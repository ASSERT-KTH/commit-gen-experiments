BLEU SCORE: 0.029079340872079116

TEST MSG: Remove 64k limit on collection elements
GENERATED MSG: Fix AssertionError when binding nested collections in DELETE

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index dd5d22b . . f6aed18 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 1 <nl> + * Remove 64k limit on collection elements ( CASSANDRA - 10374 ) <nl> * Remove unclear Indexer . indexes ( ) method ( CASSANDRA - 10690 ) <nl> * Fix NPE on stream read error ( CASSANDRA - 10771 ) <nl> * Normalize cqlsh DESC output ( CASSANDRA - 10431 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Lists . java b / src / java / org / apache / cassandra / cql3 / Lists . java <nl> index 830561e . . 4b41a9d 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Lists . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Lists . java <nl> @ @ - 36 , 7 + 36 , 6 @ @ import org . apache . cassandra . serializers . CollectionSerializer ; <nl> import org . apache . cassandra . serializers . MarshalException ; <nl> import org . apache . cassandra . transport . Server ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> / * * <nl> @ @ - 211 , 12 + 210 , 6 @ @ public abstract class Lists <nl> if ( bytes = = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) <nl> return UNSET _ VALUE ; <nl> <nl> - / / We don ' t support value > 64K because the serialization format encode the length as an unsigned short . <nl> - if ( bytes . remaining ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) <nl> - throw new InvalidRequestException ( String . format ( " List value is too long . List values are limited to % d bytes but % d bytes value provided " , <nl> - FBUtilities . MAX _ UNSIGNED _ SHORT , <nl> - bytes . remaining ( ) ) ) ; <nl> - <nl> buffers . add ( bytes ) ; <nl> } <nl> return new Value ( buffers ) ; <nl> @ @ - 370 , 12 + 363 , 6 @ @ public abstract class Lists <nl> } <nl> else if ( value ! = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) <nl> { <nl> - / / We don ' t support value > 64K because the serialization format encode the length as an unsigned short . <nl> - if ( value . remaining ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) <nl> - throw new InvalidRequestException ( String . format ( " List value is too long . List values are limited to % d bytes but % d bytes value provided " , <nl> - FBUtilities . MAX _ UNSIGNED _ SHORT , <nl> - value . remaining ( ) ) ) ; <nl> - <nl> params . addCell ( column , elementPath , value ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Maps . java b / src / java / org / apache / cassandra / cql3 / Maps . java <nl> index d5df279 . . fbb7ee3 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Maps . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Maps . java <nl> @ @ - 35 , 7 + 35 , 6 @ @ import org . apache . cassandra . serializers . CollectionSerializer ; <nl> import org . apache . cassandra . serializers . MarshalException ; <nl> import org . apache . cassandra . transport . Server ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> / * * <nl> @ @ - 225 , 14 + 224 , 11 @ @ public abstract class Maps <nl> { <nl> / / We don ' t support values > 64K because the serialization format encode the length as an unsigned short . <nl> ByteBuffer keyBytes = entry . getKey ( ) . bindAndGet ( options ) ; <nl> + <nl> if ( keyBytes = = null ) <nl> throw new InvalidRequestException ( " null is not supported inside collections " ) ; <nl> if ( keyBytes = = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) <nl> throw new InvalidRequestException ( " unset value is not supported for map keys " ) ; <nl> - if ( keyBytes . remaining ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) <nl> - throw new InvalidRequestException ( String . format ( " Map key is too long . Map keys are limited to % d bytes but % d bytes keys provided " , <nl> - FBUtilities . MAX _ UNSIGNED _ SHORT , <nl> - keyBytes . remaining ( ) ) ) ; <nl> <nl> ByteBuffer valueBytes = entry . getValue ( ) . bindAndGet ( options ) ; <nl> if ( valueBytes = = null ) <nl> @ @ - 240 , 11 + 236 , 6 @ @ public abstract class Maps <nl> if ( valueBytes = = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) <nl> return UNSET _ VALUE ; <nl> <nl> - if ( valueBytes . remaining ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) <nl> - throw new InvalidRequestException ( String . format ( " Map value is too long . Map values are limited to % d bytes but % d bytes value provided " , <nl> - FBUtilities . MAX _ UNSIGNED _ SHORT , <nl> - valueBytes . remaining ( ) ) ) ; <nl> - <nl> buffers . put ( keyBytes , valueBytes ) ; <nl> } <nl> return new Value ( buffers ) ; <nl> @ @ - 331 , 12 + 322 , 6 @ @ public abstract class Maps <nl> } <nl> else if ( value ! = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) <nl> { <nl> - / / We don ' t support value > 64K because the serialization format encode the length as an unsigned short . <nl> - if ( value . remaining ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) <nl> - throw new InvalidRequestException ( String . format ( " Map value is too long . Map values are limited to % d bytes but % d bytes value provided " , <nl> - FBUtilities . MAX _ UNSIGNED _ SHORT , <nl> - value . remaining ( ) ) ) ; <nl> - <nl> params . addCell ( column , path , value ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Sets . java b / src / java / org / apache / cassandra / cql3 / Sets . java <nl> index 010abaa . . 1e93144 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Sets . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Sets . java <nl> @ @ - 35 , 7 + 35 , 6 @ @ import org . apache . cassandra . serializers . CollectionSerializer ; <nl> import org . apache . cassandra . serializers . MarshalException ; <nl> import org . apache . cassandra . transport . Server ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> / * * <nl> * Static helper methods and classes for sets . <nl> @ @ - 213 , 12 + 212 , 6 @ @ public abstract class Sets <nl> if ( bytes = = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) <nl> return UNSET _ VALUE ; <nl> <nl> - / / We don ' t support value > 64K because the serialization format encode the length as an unsigned short . <nl> - if ( bytes . remaining ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) <nl> - throw new InvalidRequestException ( String . format ( " Set value is too long . Set values are limited to % d bytes but % d bytes value provided " , <nl> - FBUtilities . MAX _ UNSIGNED _ SHORT , <nl> - bytes . remaining ( ) ) ) ; <nl> - <nl> buffers . add ( bytes ) ; <nl> } <nl> return new Value ( buffers ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java <nl> index df8d507 . . 48e5ad3 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java <nl> @ @ - 20 , 11 + 20 , 13 @ @ package org . apache . cassandra . cql3 . validation . entities ; <nl> import java . util . Map ; <nl> import java . util . Random ; <nl> import java . util . Set ; <nl> + import java . util . Arrays ; <nl> import java . util . UUID ; <nl> <nl> import org . junit . Test ; <nl> <nl> import org . apache . cassandra . cql3 . CQLTester ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> <nl> @ @ - 686 , 4 + 688 , 168 @ @ public class CollectionsTest extends CQLTester <nl> execute ( " delete s _ list [ 0 ] from % s where k1 = ' a ' " ) ; <nl> assertRows ( execute ( " select s _ list from % s where k1 = ' a ' " ) , row ( list ( 0 ) ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testListWithElementsBiggerThan64K ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , l list < text > ) " ) ; <nl> + <nl> + byte [ ] bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; <nl> + Arrays . fill ( bytes , ( byte ) 1 ) ; <nl> + String largeText = new String ( bytes ) ; <nl> + <nl> + bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; <nl> + Arrays . fill ( bytes , ( byte ) 2 ) ; <nl> + String largeText2 = new String ( bytes ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , l ) VALUES ( 0 , ? ) " , list ( largeText , " v2 " ) ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( largeText , " v2 " ) ) ) ; <nl> + <nl> + execute ( " DELETE l [ ? ] FROM % s WHERE k = 0 " , 0 ) ; <nl> + <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( " v2 " ) ) ) ; <nl> + <nl> + execute ( " UPDATE % s SET l [ ? ] = ? WHERE k = 0 " , 0 , largeText ) ; <nl> + <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( largeText ) ) ) ; <nl> + <nl> + / / Full overwrite <nl> + execute ( " UPDATE % s SET l = ? WHERE k = 0 " , list ( " v1 " , largeText ) ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( " v1 " , largeText ) ) ) ; <nl> + <nl> + execute ( " UPDATE % s SET l = l + ? WHERE k = 0 " , list ( " v2 " , largeText2 ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( " v1 " , largeText , " v2 " , largeText2 ) ) ) ; <nl> + <nl> + execute ( " UPDATE % s SET l = l - ? WHERE k = 0 " , list ( largeText , " v2 " ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( " v1 " , largeText2 ) ) ) ; <nl> + <nl> + execute ( " DELETE l FROM % s WHERE k = 0 " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( ( Object ) null ) ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , l ) VALUES ( 0 , [ ' " + largeText + " ' , ' v2 ' ] ) " ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( largeText , " v2 " ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMapsWithElementsBiggerThan64K ( ) throws Throwable <nl> + { <nl> + byte [ ] bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; <nl> + Arrays . fill ( bytes , ( byte ) 1 ) ; <nl> + String largeText = new String ( bytes ) ; <nl> + bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; <nl> + Arrays . fill ( bytes , ( byte ) 2 ) ; <nl> + String largeText2 = new String ( bytes ) ; <nl> + <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , m map < text , text > ) " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , m ) VALUES ( 0 , ? ) " , map ( " k1 " , largeText , largeText , " v2 " ) ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( map ( " k1 " , largeText , largeText , " v2 " ) ) ) ; <nl> + <nl> + execute ( " UPDATE % s SET m [ ? ] = ? WHERE k = 0 " , " k3 " , largeText ) ; <nl> + <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( map ( " k1 " , largeText , largeText , " v2 " , " k3 " , largeText ) ) ) ; <nl> + <nl> + execute ( " UPDATE % s SET m [ ? ] = ? WHERE k = 0 " , largeText2 , " v4 " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( map ( " k1 " , largeText , largeText , " v2 " , " k3 " , largeText , largeText2 , " v4 " ) ) ) ; <nl> + <nl> + execute ( " DELETE m [ ? ] FROM % s WHERE k = 0 " , " k1 " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( map ( largeText , " v2 " , " k3 " , largeText , largeText2 , " v4 " ) ) ) ; <nl> + <nl> + execute ( " DELETE m [ ? ] FROM % s WHERE k = 0 " , largeText2 ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( map ( largeText , " v2 " , " k3 " , largeText ) ) ) ; <nl> + <nl> + / / Full overwrite <nl> + execute ( " UPDATE % s SET m = ? WHERE k = 0 " , map ( " k5 " , largeText , largeText , " v6 " ) ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( map ( " k5 " , largeText , largeText , " v6 " ) ) ) ; <nl> + <nl> + execute ( " UPDATE % s SET m = m + ? WHERE k = 0 " , map ( " k7 " , largeText ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( map ( " k5 " , largeText , largeText , " v6 " , " k7 " , largeText ) ) ) ; <nl> + <nl> + execute ( " UPDATE % s SET m = m + ? WHERE k = 0 " , map ( largeText2 , " v8 " ) ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( map ( " k5 " , largeText , largeText , " v6 " , " k7 " , largeText , largeText2 , " v8 " ) ) ) ; <nl> + <nl> + execute ( " DELETE m FROM % s WHERE k = 0 " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , row ( ( Object ) null ) ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , m ) VALUES ( 0 , { ' " + largeText + " ' : ' v1 ' , ' k2 ' : ' " + largeText + " ' } ) " ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( map ( largeText , " v1 " , " k2 " , largeText ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSetsWithElementsBiggerThan64K ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , s set < text > ) " ) ; <nl> + <nl> + byte [ ] bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; <nl> + Arrays . fill ( bytes , ( byte ) 1 ) ; <nl> + String largeText = new String ( bytes ) ; <nl> + <nl> + bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; <nl> + Arrays . fill ( bytes , ( byte ) 2 ) ; <nl> + String largeText2 = new String ( bytes ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , s ) VALUES ( 0 , ? ) " , set ( largeText , " v2 " ) ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( largeText , " v2 " ) ) ) ; <nl> + <nl> + execute ( " DELETE s [ ? ] FROM % s WHERE k = 0 " , largeText ) ; <nl> + <nl> + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( " v2 " ) ) ) ; <nl> + <nl> + / / Full overwrite <nl> + execute ( " UPDATE % s SET s = ? WHERE k = 0 " , set ( " v1 " , largeText ) ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( " v1 " , largeText ) ) ) ; <nl> + <nl> + execute ( " UPDATE % s SET s = s + ? WHERE k = 0 " , set ( " v2 " , largeText2 ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( " v1 " , largeText , " v2 " , largeText2 ) ) ) ; <nl> + <nl> + execute ( " UPDATE % s SET s = s - ? WHERE k = 0 " , set ( largeText , " v2 " ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( " v1 " , largeText2 ) ) ) ; <nl> + <nl> + execute ( " DELETE s FROM % s WHERE k = 0 " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( ( Object ) null ) ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , s ) VALUES ( 0 , { ' " + largeText + " ' , ' v2 ' } ) " ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( largeText , " v2 " ) ) ) ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / FrozenCollectionsTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / FrozenCollectionsTest . java <nl> index a0d64be . . 523a1ed 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / FrozenCollectionsTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / FrozenCollectionsTest . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> import org . apache . cassandra . exceptions . SyntaxException ; <nl> import org . apache . cassandra . service . StorageService ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> <nl> @ @ - 1113 , 4 + 1114 , 101 @ @ public class FrozenCollectionsTest extends CQLTester <nl> TupleType tuple = new TupleType ( types ) ; <nl> assertEquals ( " TupleType ( SetType ( Int32Type ) ) " , clean ( tuple . toString ( ) ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testListWithElementsBiggerThan64K ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , l frozen < list < text > > ) " ) ; <nl> + <nl> + byte [ ] bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; <nl> + Arrays . fill ( bytes , ( byte ) 1 ) ; <nl> + String largeText = new String ( bytes ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , l ) VALUES ( 0 , ? ) " , list ( largeText , " v2 " ) ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( largeText , " v2 " ) ) ) ; <nl> + <nl> + / / Full overwrite <nl> + execute ( " UPDATE % s SET l = ? WHERE k = 0 " , list ( " v1 " , largeText ) ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( " v1 " , largeText ) ) ) ; <nl> + <nl> + execute ( " DELETE l FROM % s WHERE k = 0 " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( ( Object ) null ) ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , l ) VALUES ( 0 , [ ' " + largeText + " ' , ' v2 ' ] ) " ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( largeText , " v2 " ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMapsWithElementsBiggerThan64K ( ) throws Throwable <nl> + { <nl> + byte [ ] bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; <nl> + Arrays . fill ( bytes , ( byte ) 1 ) ; <nl> + String largeText = new String ( bytes ) ; <nl> + <nl> + bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; <nl> + Arrays . fill ( bytes , ( byte ) 2 ) ; <nl> + String largeText2 = new String ( bytes ) ; <nl> + <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , m frozen < map < text , text > > ) " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , m ) VALUES ( 0 , ? ) " , map ( largeText , " v1 " , " k2 " , largeText ) ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( map ( largeText , " v1 " , " k2 " , largeText ) ) ) ; <nl> + <nl> + / / Full overwrite <nl> + execute ( " UPDATE % s SET m = ? WHERE k = 0 " , map ( " k5 " , largeText , largeText2 , " v6 " ) ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( map ( " k5 " , largeText , largeText2 , " v6 " ) ) ) ; <nl> + <nl> + execute ( " DELETE m FROM % s WHERE k = 0 " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , row ( ( Object ) null ) ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , m ) VALUES ( 0 , { ' " + largeText + " ' : ' v1 ' , ' k2 ' : ' " + largeText + " ' } ) " ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( map ( largeText , " v1 " , " k2 " , largeText ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSetsWithElementsBiggerThan64K ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , s frozen < set < text > > ) " ) ; <nl> + <nl> + byte [ ] bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; <nl> + Arrays . fill ( bytes , ( byte ) 1 ) ; <nl> + String largeText = new String ( bytes ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , s ) VALUES ( 0 , ? ) " , set ( largeText , " v1 " , " v2 " ) ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( largeText , " v1 " , " v2 " ) ) ) ; <nl> + <nl> + / / Full overwrite <nl> + execute ( " UPDATE % s SET s = ? WHERE k = 0 " , set ( largeText , " v3 " ) ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( largeText , " v3 " ) ) ) ; <nl> + <nl> + execute ( " DELETE s FROM % s WHERE k = 0 " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( ( Object ) null ) ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , s ) VALUES ( 0 , { ' " + largeText + " ' , ' v1 ' , ' v2 ' } ) " ) ; <nl> + flush ( ) ; <nl> + <nl> + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( largeText , " v1 " , " v2 " ) ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index dd5d22b . . f6aed18 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 1 
 + * Remove 64k limit on collection elements ( CASSANDRA - 10374 ) 
 * Remove unclear Indexer . indexes ( ) method ( CASSANDRA - 10690 ) 
 * Fix NPE on stream read error ( CASSANDRA - 10771 ) 
 * Normalize cqlsh DESC output ( CASSANDRA - 10431 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Lists . java b / src / java / org / apache / cassandra / cql3 / Lists . java 
 index 830561e . . 4b41a9d 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Lists . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Lists . java 
 @ @ - 36 , 7 + 36 , 6 @ @ import org . apache . cassandra . serializers . CollectionSerializer ; 
 import org . apache . cassandra . serializers . MarshalException ; 
 import org . apache . cassandra . transport . Server ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 
 / * * 
 @ @ - 211 , 12 + 210 , 6 @ @ public abstract class Lists 
 if ( bytes = = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) 
 return UNSET _ VALUE ; 
 
 - / / We don ' t support value > 64K because the serialization format encode the length as an unsigned short . 
 - if ( bytes . remaining ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) 
 - throw new InvalidRequestException ( String . format ( " List value is too long . List values are limited to % d bytes but % d bytes value provided " , 
 - FBUtilities . MAX _ UNSIGNED _ SHORT , 
 - bytes . remaining ( ) ) ) ; 
 - 
 buffers . add ( bytes ) ; 
 } 
 return new Value ( buffers ) ; 
 @ @ - 370 , 12 + 363 , 6 @ @ public abstract class Lists 
 } 
 else if ( value ! = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) 
 { 
 - / / We don ' t support value > 64K because the serialization format encode the length as an unsigned short . 
 - if ( value . remaining ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) 
 - throw new InvalidRequestException ( String . format ( " List value is too long . List values are limited to % d bytes but % d bytes value provided " , 
 - FBUtilities . MAX _ UNSIGNED _ SHORT , 
 - value . remaining ( ) ) ) ; 
 - 
 params . addCell ( column , elementPath , value ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Maps . java b / src / java / org / apache / cassandra / cql3 / Maps . java 
 index d5df279 . . fbb7ee3 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Maps . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Maps . java 
 @ @ - 35 , 7 + 35 , 6 @ @ import org . apache . cassandra . serializers . CollectionSerializer ; 
 import org . apache . cassandra . serializers . MarshalException ; 
 import org . apache . cassandra . transport . Server ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . Pair ; 
 
 / * * 
 @ @ - 225 , 14 + 224 , 11 @ @ public abstract class Maps 
 { 
 / / We don ' t support values > 64K because the serialization format encode the length as an unsigned short . 
 ByteBuffer keyBytes = entry . getKey ( ) . bindAndGet ( options ) ; 
 + 
 if ( keyBytes = = null ) 
 throw new InvalidRequestException ( " null is not supported inside collections " ) ; 
 if ( keyBytes = = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) 
 throw new InvalidRequestException ( " unset value is not supported for map keys " ) ; 
 - if ( keyBytes . remaining ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) 
 - throw new InvalidRequestException ( String . format ( " Map key is too long . Map keys are limited to % d bytes but % d bytes keys provided " , 
 - FBUtilities . MAX _ UNSIGNED _ SHORT , 
 - keyBytes . remaining ( ) ) ) ; 
 
 ByteBuffer valueBytes = entry . getValue ( ) . bindAndGet ( options ) ; 
 if ( valueBytes = = null ) 
 @ @ - 240 , 11 + 236 , 6 @ @ public abstract class Maps 
 if ( valueBytes = = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) 
 return UNSET _ VALUE ; 
 
 - if ( valueBytes . remaining ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) 
 - throw new InvalidRequestException ( String . format ( " Map value is too long . Map values are limited to % d bytes but % d bytes value provided " , 
 - FBUtilities . MAX _ UNSIGNED _ SHORT , 
 - valueBytes . remaining ( ) ) ) ; 
 - 
 buffers . put ( keyBytes , valueBytes ) ; 
 } 
 return new Value ( buffers ) ; 
 @ @ - 331 , 12 + 322 , 6 @ @ public abstract class Maps 
 } 
 else if ( value ! = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) 
 { 
 - / / We don ' t support value > 64K because the serialization format encode the length as an unsigned short . 
 - if ( value . remaining ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) 
 - throw new InvalidRequestException ( String . format ( " Map value is too long . Map values are limited to % d bytes but % d bytes value provided " , 
 - FBUtilities . MAX _ UNSIGNED _ SHORT , 
 - value . remaining ( ) ) ) ; 
 - 
 params . addCell ( column , path , value ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Sets . java b / src / java / org / apache / cassandra / cql3 / Sets . java 
 index 010abaa . . 1e93144 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Sets . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Sets . java 
 @ @ - 35 , 7 + 35 , 6 @ @ import org . apache . cassandra . serializers . CollectionSerializer ; 
 import org . apache . cassandra . serializers . MarshalException ; 
 import org . apache . cassandra . transport . Server ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 
 / * * 
 * Static helper methods and classes for sets . 
 @ @ - 213 , 12 + 212 , 6 @ @ public abstract class Sets 
 if ( bytes = = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) 
 return UNSET _ VALUE ; 
 
 - / / We don ' t support value > 64K because the serialization format encode the length as an unsigned short . 
 - if ( bytes . remaining ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) 
 - throw new InvalidRequestException ( String . format ( " Set value is too long . Set values are limited to % d bytes but % d bytes value provided " , 
 - FBUtilities . MAX _ UNSIGNED _ SHORT , 
 - bytes . remaining ( ) ) ) ; 
 - 
 buffers . add ( bytes ) ; 
 } 
 return new Value ( buffers ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java 
 index df8d507 . . 48e5ad3 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / CollectionsTest . java 
 @ @ - 20 , 11 + 20 , 13 @ @ package org . apache . cassandra . cql3 . validation . entities ; 
 import java . util . Map ; 
 import java . util . Random ; 
 import java . util . Set ; 
 + import java . util . Arrays ; 
 import java . util . UUID ; 
 
 import org . junit . Test ; 
 
 import org . apache . cassandra . cql3 . CQLTester ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 
 import static org . junit . Assert . assertEquals ; 
 
 @ @ - 686 , 4 + 688 , 168 @ @ public class CollectionsTest extends CQLTester 
 execute ( " delete s _ list [ 0 ] from % s where k1 = ' a ' " ) ; 
 assertRows ( execute ( " select s _ list from % s where k1 = ' a ' " ) , row ( list ( 0 ) ) ) ; 
 } 
 + 
 + @ Test 
 + public void testListWithElementsBiggerThan64K ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , l list < text > ) " ) ; 
 + 
 + byte [ ] bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; 
 + Arrays . fill ( bytes , ( byte ) 1 ) ; 
 + String largeText = new String ( bytes ) ; 
 + 
 + bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; 
 + Arrays . fill ( bytes , ( byte ) 2 ) ; 
 + String largeText2 = new String ( bytes ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , l ) VALUES ( 0 , ? ) " , list ( largeText , " v2 " ) ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( largeText , " v2 " ) ) ) ; 
 + 
 + execute ( " DELETE l [ ? ] FROM % s WHERE k = 0 " , 0 ) ; 
 + 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( " v2 " ) ) ) ; 
 + 
 + execute ( " UPDATE % s SET l [ ? ] = ? WHERE k = 0 " , 0 , largeText ) ; 
 + 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( largeText ) ) ) ; 
 + 
 + / / Full overwrite 
 + execute ( " UPDATE % s SET l = ? WHERE k = 0 " , list ( " v1 " , largeText ) ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( " v1 " , largeText ) ) ) ; 
 + 
 + execute ( " UPDATE % s SET l = l + ? WHERE k = 0 " , list ( " v2 " , largeText2 ) ) ; 
 + 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( " v1 " , largeText , " v2 " , largeText2 ) ) ) ; 
 + 
 + execute ( " UPDATE % s SET l = l - ? WHERE k = 0 " , list ( largeText , " v2 " ) ) ; 
 + 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( " v1 " , largeText2 ) ) ) ; 
 + 
 + execute ( " DELETE l FROM % s WHERE k = 0 " ) ; 
 + 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( ( Object ) null ) ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , l ) VALUES ( 0 , [ ' " + largeText + " ' , ' v2 ' ] ) " ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( largeText , " v2 " ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testMapsWithElementsBiggerThan64K ( ) throws Throwable 
 + { 
 + byte [ ] bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; 
 + Arrays . fill ( bytes , ( byte ) 1 ) ; 
 + String largeText = new String ( bytes ) ; 
 + bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; 
 + Arrays . fill ( bytes , ( byte ) 2 ) ; 
 + String largeText2 = new String ( bytes ) ; 
 + 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , m map < text , text > ) " ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , m ) VALUES ( 0 , ? ) " , map ( " k1 " , largeText , largeText , " v2 " ) ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( map ( " k1 " , largeText , largeText , " v2 " ) ) ) ; 
 + 
 + execute ( " UPDATE % s SET m [ ? ] = ? WHERE k = 0 " , " k3 " , largeText ) ; 
 + 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( map ( " k1 " , largeText , largeText , " v2 " , " k3 " , largeText ) ) ) ; 
 + 
 + execute ( " UPDATE % s SET m [ ? ] = ? WHERE k = 0 " , largeText2 , " v4 " ) ; 
 + 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( map ( " k1 " , largeText , largeText , " v2 " , " k3 " , largeText , largeText2 , " v4 " ) ) ) ; 
 + 
 + execute ( " DELETE m [ ? ] FROM % s WHERE k = 0 " , " k1 " ) ; 
 + 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( map ( largeText , " v2 " , " k3 " , largeText , largeText2 , " v4 " ) ) ) ; 
 + 
 + execute ( " DELETE m [ ? ] FROM % s WHERE k = 0 " , largeText2 ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( map ( largeText , " v2 " , " k3 " , largeText ) ) ) ; 
 + 
 + / / Full overwrite 
 + execute ( " UPDATE % s SET m = ? WHERE k = 0 " , map ( " k5 " , largeText , largeText , " v6 " ) ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( map ( " k5 " , largeText , largeText , " v6 " ) ) ) ; 
 + 
 + execute ( " UPDATE % s SET m = m + ? WHERE k = 0 " , map ( " k7 " , largeText ) ) ; 
 + 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( map ( " k5 " , largeText , largeText , " v6 " , " k7 " , largeText ) ) ) ; 
 + 
 + execute ( " UPDATE % s SET m = m + ? WHERE k = 0 " , map ( largeText2 , " v8 " ) ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( map ( " k5 " , largeText , largeText , " v6 " , " k7 " , largeText , largeText2 , " v8 " ) ) ) ; 
 + 
 + execute ( " DELETE m FROM % s WHERE k = 0 " ) ; 
 + 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , row ( ( Object ) null ) ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , m ) VALUES ( 0 , { ' " + largeText + " ' : ' v1 ' , ' k2 ' : ' " + largeText + " ' } ) " ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( map ( largeText , " v1 " , " k2 " , largeText ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testSetsWithElementsBiggerThan64K ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , s set < text > ) " ) ; 
 + 
 + byte [ ] bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; 
 + Arrays . fill ( bytes , ( byte ) 1 ) ; 
 + String largeText = new String ( bytes ) ; 
 + 
 + bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; 
 + Arrays . fill ( bytes , ( byte ) 2 ) ; 
 + String largeText2 = new String ( bytes ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , s ) VALUES ( 0 , ? ) " , set ( largeText , " v2 " ) ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( largeText , " v2 " ) ) ) ; 
 + 
 + execute ( " DELETE s [ ? ] FROM % s WHERE k = 0 " , largeText ) ; 
 + 
 + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( " v2 " ) ) ) ; 
 + 
 + / / Full overwrite 
 + execute ( " UPDATE % s SET s = ? WHERE k = 0 " , set ( " v1 " , largeText ) ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( " v1 " , largeText ) ) ) ; 
 + 
 + execute ( " UPDATE % s SET s = s + ? WHERE k = 0 " , set ( " v2 " , largeText2 ) ) ; 
 + 
 + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( " v1 " , largeText , " v2 " , largeText2 ) ) ) ; 
 + 
 + execute ( " UPDATE % s SET s = s - ? WHERE k = 0 " , set ( largeText , " v2 " ) ) ; 
 + 
 + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( " v1 " , largeText2 ) ) ) ; 
 + 
 + execute ( " DELETE s FROM % s WHERE k = 0 " ) ; 
 + 
 + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( ( Object ) null ) ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , s ) VALUES ( 0 , { ' " + largeText + " ' , ' v2 ' } ) " ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( largeText , " v2 " ) ) ) ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / FrozenCollectionsTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / FrozenCollectionsTest . java 
 index a0d64be . . 523a1ed 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / FrozenCollectionsTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / FrozenCollectionsTest . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 import org . apache . cassandra . exceptions . SyntaxException ; 
 import org . apache . cassandra . service . StorageService ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 
 import static org . junit . Assert . assertEquals ; 
 
 @ @ - 1113 , 4 + 1114 , 101 @ @ public class FrozenCollectionsTest extends CQLTester 
 TupleType tuple = new TupleType ( types ) ; 
 assertEquals ( " TupleType ( SetType ( Int32Type ) ) " , clean ( tuple . toString ( ) ) ) ; 
 } 
 + 
 + @ Test 
 + public void testListWithElementsBiggerThan64K ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , l frozen < list < text > > ) " ) ; 
 + 
 + byte [ ] bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; 
 + Arrays . fill ( bytes , ( byte ) 1 ) ; 
 + String largeText = new String ( bytes ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , l ) VALUES ( 0 , ? ) " , list ( largeText , " v2 " ) ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( largeText , " v2 " ) ) ) ; 
 + 
 + / / Full overwrite 
 + execute ( " UPDATE % s SET l = ? WHERE k = 0 " , list ( " v1 " , largeText ) ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( " v1 " , largeText ) ) ) ; 
 + 
 + execute ( " DELETE l FROM % s WHERE k = 0 " ) ; 
 + 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( ( Object ) null ) ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , l ) VALUES ( 0 , [ ' " + largeText + " ' , ' v2 ' ] ) " ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( largeText , " v2 " ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testMapsWithElementsBiggerThan64K ( ) throws Throwable 
 + { 
 + byte [ ] bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; 
 + Arrays . fill ( bytes , ( byte ) 1 ) ; 
 + String largeText = new String ( bytes ) ; 
 + 
 + bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; 
 + Arrays . fill ( bytes , ( byte ) 2 ) ; 
 + String largeText2 = new String ( bytes ) ; 
 + 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , m frozen < map < text , text > > ) " ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , m ) VALUES ( 0 , ? ) " , map ( largeText , " v1 " , " k2 " , largeText ) ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( map ( largeText , " v1 " , " k2 " , largeText ) ) ) ; 
 + 
 + / / Full overwrite 
 + execute ( " UPDATE % s SET m = ? WHERE k = 0 " , map ( " k5 " , largeText , largeText2 , " v6 " ) ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( map ( " k5 " , largeText , largeText2 , " v6 " ) ) ) ; 
 + 
 + execute ( " DELETE m FROM % s WHERE k = 0 " ) ; 
 + 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , row ( ( Object ) null ) ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , m ) VALUES ( 0 , { ' " + largeText + " ' : ' v1 ' , ' k2 ' : ' " + largeText + " ' } ) " ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( map ( largeText , " v1 " , " k2 " , largeText ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testSetsWithElementsBiggerThan64K ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , s frozen < set < text > > ) " ) ; 
 + 
 + byte [ ] bytes = new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 10 ] ; 
 + Arrays . fill ( bytes , ( byte ) 1 ) ; 
 + String largeText = new String ( bytes ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , s ) VALUES ( 0 , ? ) " , set ( largeText , " v1 " , " v2 " ) ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( largeText , " v1 " , " v2 " ) ) ) ; 
 + 
 + / / Full overwrite 
 + execute ( " UPDATE % s SET s = ? WHERE k = 0 " , set ( largeText , " v3 " ) ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( largeText , " v3 " ) ) ) ; 
 + 
 + execute ( " DELETE s FROM % s WHERE k = 0 " ) ; 
 + 
 + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( ( Object ) null ) ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , s ) VALUES ( 0 , { ' " + largeText + " ' , ' v1 ' , ' v2 ' } ) " ) ; 
 + flush ( ) ; 
 + 
 + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , row ( set ( largeText , " v1 " , " v2 " ) ) ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
