BLEU SCORE: 0.5873949094699213

TEST MSG: Revert " Add transparent data encryption core classes "
GENERATED MSG: Add transparent data encryption core classes

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index f8f34e0 . . e93d090 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 169 , 8 + 169 , 7 @ @ public class Config <nl> public int commitlog _ segment _ size _ in _ mb = 32 ; <nl> public ParameterizedClass commitlog _ compression ; <nl> public int commitlog _ max _ compression _ buffers _ in _ pool = 3 ; <nl> - public TransparentDataEncryptionOptions transparent _ data _ encryption _ options = new TransparentDataEncryptionOptions ( ) ; <nl> - <nl> + <nl> @ Deprecated <nl> public int commitlog _ periodic _ queue _ size = - 1 ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index e7b9455 . . 02f3c17 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 44 , 7 + 44 , 6 @ @ import org . apache . cassandra . locator . * ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . scheduler . IRequestScheduler ; <nl> import org . apache . cassandra . scheduler . NoScheduler ; <nl> - import org . apache . cassandra . security . EncryptionContext ; <nl> import org . apache . cassandra . service . CacheService ; <nl> import org . apache . cassandra . thrift . ThriftServer ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> @ @ - 93 , 7 + 92 , 6 @ @ public class DatabaseDescriptor <nl> <nl> private static String localDC ; <nl> private static Comparator < InetAddress > localComparator ; <nl> - private static EncryptionContext encryptionContext ; <nl> <nl> public static void forceStaticInitialization ( ) { } <nl> static <nl> @ @ - 615 , 10 + 613 , 6 @ @ public class DatabaseDescriptor <nl> <nl> if ( conf . user _ defined _ function _ fail _ timeout < conf . user _ defined _ function _ warn _ timeout ) <nl> throw new ConfigurationException ( " user _ defined _ function _ warn _ timeout must less than user _ defined _ function _ fail _ timeout " , false ) ; <nl> - <nl> - / / always attempt to load the cipher factory , as we could be in the situation where the user has disabled encryption , <nl> - / / but has existing commitlogs and sstables on disk that are still encrypted ( and still need to be read ) <nl> - encryptionContext = new EncryptionContext ( config . transparent _ data _ encryption _ options ) ; <nl> } <nl> <nl> private static IEndpointSnitch createEndpointSnitch ( String snitchClassName ) throws ConfigurationException <nl> @ @ - 1798 , 15 + 1792 , 4 @ @ public class DatabaseDescriptor <nl> { <nl> conf . user _ function _ timeout _ policy = userFunctionTimeoutPolicy ; <nl> } <nl> - <nl> - public static EncryptionContext getEncryptionContext ( ) <nl> - { <nl> - return encryptionContext ; <nl> - } <nl> - <nl> - @ VisibleForTesting <nl> - public static void setEncryptionContext ( EncryptionContext ec ) <nl> - { <nl> - encryptionContext = ec ; <nl> - } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / config / TransparentDataEncryptionOptions . java b / src / java / org / apache / cassandra / config / TransparentDataEncryptionOptions . java <nl> deleted file mode 100644 <nl> index 4ad0305 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / config / TransparentDataEncryptionOptions . java <nl> + + + / dev / null <nl> @ @ - 1 , 76 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . config ; <nl> - <nl> - import com . google . common . annotations . VisibleForTesting ; <nl> - import com . google . common . base . Objects ; <nl> - <nl> - public class TransparentDataEncryptionOptions <nl> - { <nl> - public boolean enabled = false ; <nl> - public int chunk _ length _ kb = 64 ; <nl> - public String cipher = " AES / CBC / PKCS5Padding " ; <nl> - public String key _ alias ; <nl> - public int iv _ length = 16 ; <nl> - <nl> - public ParameterizedClass key _ provider ; <nl> - <nl> - public TransparentDataEncryptionOptions ( ) <nl> - { } <nl> - <nl> - public TransparentDataEncryptionOptions ( boolean enabled ) <nl> - { <nl> - this . enabled = enabled ; <nl> - } <nl> - <nl> - public TransparentDataEncryptionOptions ( String cipher , String keyAlias , ParameterizedClass keyProvider ) <nl> - { <nl> - this ( true , cipher , keyAlias , keyProvider ) ; <nl> - } <nl> - <nl> - public TransparentDataEncryptionOptions ( boolean enabled , String cipher , String keyAlias , ParameterizedClass keyProvider ) <nl> - { <nl> - this . enabled = enabled ; <nl> - this . cipher = cipher ; <nl> - key _ alias = keyAlias ; <nl> - key _ provider = keyProvider ; <nl> - } <nl> - <nl> - public String get ( String key ) <nl> - { <nl> - return key _ provider . parameters . get ( key ) ; <nl> - } <nl> - <nl> - @ VisibleForTesting <nl> - public void remove ( String key ) <nl> - { <nl> - key _ provider . parameters . remove ( key ) ; <nl> - } <nl> - <nl> - public boolean equals ( Object o ) <nl> - { <nl> - return o instanceof TransparentDataEncryptionOptions & & equals ( ( TransparentDataEncryptionOptions ) o ) ; <nl> - } <nl> - <nl> - public boolean equals ( TransparentDataEncryptionOptions other ) <nl> - { <nl> - / / not sure if this is a great equals ( ) impl . . . . <nl> - return Objects . equal ( cipher , other . cipher ) & & <nl> - Objects . equal ( key _ alias , other . key _ alias ) ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / security / CipherFactory . java b / src / java / org / apache / cassandra / security / CipherFactory . java <nl> deleted file mode 100644 <nl> index 0ff9867 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / security / CipherFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 175 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . security ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . lang . reflect . Constructor ; <nl> - import java . security . InvalidAlgorithmParameterException ; <nl> - import java . security . InvalidKeyException ; <nl> - import java . security . Key ; <nl> - import java . security . NoSuchAlgorithmException ; <nl> - import java . security . SecureRandom ; <nl> - import java . util . Arrays ; <nl> - import java . util . concurrent . ExecutionException ; <nl> - import javax . crypto . Cipher ; <nl> - import javax . crypto . NoSuchPaddingException ; <nl> - import javax . crypto . spec . IvParameterSpec ; <nl> - <nl> - import com . google . common . annotations . VisibleForTesting ; <nl> - import com . google . common . cache . CacheBuilder ; <nl> - import com . google . common . cache . CacheLoader ; <nl> - import com . google . common . cache . LoadingCache ; <nl> - import com . google . common . cache . RemovalListener ; <nl> - import com . google . common . cache . RemovalNotification ; <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - <nl> - import org . apache . cassandra . config . TransparentDataEncryptionOptions ; <nl> - <nl> - / * * <nl> - * A factory for loading encryption keys from { @ link KeyProvider } instances . <nl> - * Maintains a cache of loaded keys to avoid invoking the key provider on every call . <nl> - * / <nl> - public class CipherFactory <nl> - { <nl> - private final Logger logger = LoggerFactory . getLogger ( CipherFactory . class ) ; <nl> - <nl> - / * * <nl> - * Keep around thread local instances of Cipher as they are quite expensive to instantiate ( @ code Cipher # getInstance ) . <nl> - * Bonus points if you can avoid calling ( @ code Cipher # init ) ; hence , the point of the supporting struct <nl> - * for caching Cipher instances . <nl> - * / <nl> - private static final ThreadLocal < CachedCipher > cipherThreadLocal = new ThreadLocal < > ( ) ; <nl> - <nl> - private final SecureRandom secureRandom ; <nl> - private final LoadingCache < String , Key > cache ; <nl> - private final int ivLength ; <nl> - private final KeyProvider keyProvider ; <nl> - <nl> - public CipherFactory ( TransparentDataEncryptionOptions options ) <nl> - { <nl> - logger . info ( " initializing CipherFactory " ) ; <nl> - ivLength = options . iv _ length ; <nl> - <nl> - try <nl> - { <nl> - secureRandom = SecureRandom . getInstance ( " SHA1PRNG " ) ; <nl> - Class < KeyProvider > keyProviderClass = ( Class < KeyProvider > ) Class . forName ( options . key _ provider . class _ name ) ; <nl> - Constructor ctor = keyProviderClass . getConstructor ( TransparentDataEncryptionOptions . class ) ; <nl> - keyProvider = ( KeyProvider ) ctor . newInstance ( options ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new RuntimeException ( " couldn ' t load cipher factory " , e ) ; <nl> - } <nl> - <nl> - cache = CacheBuilder . newBuilder ( ) / / by default cache is unbounded <nl> - . maximumSize ( 64 ) / / a value large enough that we should never even get close ( so nothing gets evicted ) <nl> - . concurrencyLevel ( Runtime . getRuntime ( ) . availableProcessors ( ) ) <nl> - . removalListener ( new RemovalListener < String , Key > ( ) <nl> - { <nl> - public void onRemoval ( RemovalNotification < String , Key > notice ) <nl> - { <nl> - / / maybe reload the key ? ( to avoid the reload being on the user ' s dime ) <nl> - logger . info ( " key { } removed from cipher key cache " , notice . getKey ( ) ) ; <nl> - } <nl> - } ) <nl> - . build ( new CacheLoader < String , Key > ( ) <nl> - { <nl> - @ Override <nl> - public Key load ( String alias ) throws Exception <nl> - { <nl> - logger . info ( " loading secret key for alias { } " , alias ) ; <nl> - return keyProvider . getSecretKey ( alias ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - public Cipher getEncryptor ( String transformation , String keyAlias ) throws IOException <nl> - { <nl> - byte [ ] iv = new byte [ ivLength ] ; <nl> - secureRandom . nextBytes ( iv ) ; <nl> - return buildCipher ( transformation , keyAlias , iv , Cipher . ENCRYPT _ MODE ) ; <nl> - } <nl> - <nl> - public Cipher getDecryptor ( String transformation , String keyAlias , byte [ ] iv ) throws IOException <nl> - { <nl> - assert iv ! = null | | iv . length > 0 : " trying to decrypt , but the initialization vector is empty " ; <nl> - return buildCipher ( transformation , keyAlias , iv , Cipher . DECRYPT _ MODE ) ; <nl> - } <nl> - <nl> - @ VisibleForTesting <nl> - Cipher buildCipher ( String transformation , String keyAlias , byte [ ] iv , int cipherMode ) throws IOException <nl> - { <nl> - try <nl> - { <nl> - CachedCipher cachedCipher = cipherThreadLocal . get ( ) ; <nl> - if ( cachedCipher ! = null ) <nl> - { <nl> - Cipher cipher = cachedCipher . cipher ; <nl> - / / rigorous checks to make sure we ' ve absolutely got the correct instance ( with correct alg / key / iv / . . . ) <nl> - if ( cachedCipher . mode = = cipherMode & & cipher . getAlgorithm ( ) . equals ( transformation ) <nl> - & & cachedCipher . keyAlias . equals ( keyAlias ) & & Arrays . equals ( cipher . getIV ( ) , iv ) ) <nl> - return cipher ; <nl> - } <nl> - <nl> - Key key = retrieveKey ( keyAlias ) ; <nl> - Cipher cipher = Cipher . getInstance ( transformation ) ; <nl> - cipher . init ( cipherMode , key , new IvParameterSpec ( iv ) ) ; <nl> - cipherThreadLocal . set ( new CachedCipher ( cipherMode , keyAlias , cipher ) ) ; <nl> - return cipher ; <nl> - } <nl> - catch ( NoSuchAlgorithmException | NoSuchPaddingException | InvalidAlgorithmParameterException | InvalidKeyException e ) <nl> - { <nl> - logger . error ( " could not build cipher " , e ) ; <nl> - throw new IOException ( " cannot load cipher " , e ) ; <nl> - } <nl> - } <nl> - <nl> - private Key retrieveKey ( String keyAlias ) throws IOException <nl> - { <nl> - try <nl> - { <nl> - return cache . get ( keyAlias ) ; <nl> - } <nl> - catch ( ExecutionException e ) <nl> - { <nl> - if ( e . getCause ( ) instanceof IOException ) <nl> - throw ( IOException ) e . getCause ( ) ; <nl> - throw new IOException ( " failed to load key from cache : " + keyAlias , e ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * A simple struct to use with the thread local caching of Cipher as we can ' t get the mode ( encrypt / decrypt ) nor <nl> - * key _ alias ( or key ! ) from the Cipher itself to use for comparisons <nl> - * / <nl> - private static class CachedCipher <nl> - { <nl> - public final int mode ; <nl> - public final String keyAlias ; <nl> - public final Cipher cipher ; <nl> - <nl> - private CachedCipher ( int mode , String keyAlias , Cipher cipher ) <nl> - { <nl> - this . mode = mode ; <nl> - this . keyAlias = keyAlias ; <nl> - this . cipher = cipher ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / security / EncryptionContext . java b / src / java / org / apache / cassandra / security / EncryptionContext . java <nl> deleted file mode 100644 <nl> index dff6894 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / security / EncryptionContext . java <nl> + + + / dev / null <nl> @ @ - 1 , 122 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . security ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . util . Collections ; <nl> - import javax . crypto . Cipher ; <nl> - <nl> - import com . google . common . annotations . VisibleForTesting ; <nl> - import com . google . common . base . Objects ; <nl> - <nl> - import org . apache . cassandra . config . TransparentDataEncryptionOptions ; <nl> - import org . apache . cassandra . exceptions . ConfigurationException ; <nl> - import org . apache . cassandra . io . compress . ICompressor ; <nl> - import org . apache . cassandra . io . compress . LZ4Compressor ; <nl> - <nl> - / * * <nl> - * A ( largely ) immutable wrapper for the application - wide file - level encryption settings . <nl> - * / <nl> - public class EncryptionContext <nl> - { <nl> - public static final String ENCRYPTION _ CIPHER = " encCipher " ; <nl> - public static final String ENCRYPTION _ KEY _ ALIAS = " encKeyAlias " ; <nl> - public static final String ENCRYPTION _ IV = " encIV " ; <nl> - <nl> - private final TransparentDataEncryptionOptions tdeOptions ; <nl> - private final ICompressor compressor ; <nl> - private final CipherFactory cipherFactory ; <nl> - <nl> - private final int chunkLength ; <nl> - <nl> - public EncryptionContext ( ) <nl> - { <nl> - this ( new TransparentDataEncryptionOptions ( ) ) ; <nl> - } <nl> - <nl> - public EncryptionContext ( TransparentDataEncryptionOptions tdeOptions ) <nl> - { <nl> - this ( tdeOptions , true ) ; <nl> - } <nl> - <nl> - @ VisibleForTesting <nl> - public EncryptionContext ( TransparentDataEncryptionOptions tdeOptions , boolean init ) <nl> - { <nl> - this . tdeOptions = tdeOptions ; <nl> - compressor = LZ4Compressor . create ( Collections . < String , String > emptyMap ( ) ) ; <nl> - chunkLength = tdeOptions . chunk _ length _ kb * 1024 ; <nl> - <nl> - / / always attempt to load the cipher factory , as we could be in the situation where the user has disabled encryption , <nl> - / / but has existing commitlogs and sstables on disk that are still git addencrypted ( and still need to be read ) <nl> - CipherFactory factory = null ; <nl> - <nl> - if ( tdeOptions . enabled & & init ) <nl> - { <nl> - try <nl> - { <nl> - factory = new CipherFactory ( tdeOptions ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new ConfigurationException ( " failed to load key provider for transparent data encryption " , e ) ; <nl> - } <nl> - } <nl> - <nl> - cipherFactory = factory ; <nl> - } <nl> - <nl> - public ICompressor getCompressor ( ) <nl> - { <nl> - return compressor ; <nl> - } <nl> - <nl> - public Cipher getEncryptor ( ) throws IOException <nl> - { <nl> - return cipherFactory . getEncryptor ( tdeOptions . cipher , tdeOptions . key _ alias ) ; <nl> - } <nl> - <nl> - public Cipher getDecryptor ( byte [ ] IV ) throws IOException <nl> - { <nl> - return cipherFactory . getDecryptor ( tdeOptions . cipher , tdeOptions . key _ alias , IV ) ; <nl> - } <nl> - <nl> - public boolean isEnabled ( ) <nl> - { <nl> - return tdeOptions . enabled ; <nl> - } <nl> - <nl> - public int getChunkLength ( ) <nl> - { <nl> - return chunkLength ; <nl> - } <nl> - <nl> - public TransparentDataEncryptionOptions getTransparentDataEncryptionOptions ( ) <nl> - { <nl> - return tdeOptions ; <nl> - } <nl> - <nl> - public boolean equals ( Object o ) <nl> - { <nl> - return o instanceof EncryptionContext & & equals ( ( EncryptionContext ) o ) ; <nl> - } <nl> - <nl> - public boolean equals ( EncryptionContext other ) <nl> - { <nl> - return Objects . equal ( tdeOptions , other . tdeOptions ) & & Objects . equal ( compressor , other . compressor ) ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / security / JKSKeyProvider . java b / src / java / org / apache / cassandra / security / JKSKeyProvider . java <nl> deleted file mode 100644 <nl> index 8d7f1c6 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / security / JKSKeyProvider . java <nl> + + + / dev / null <nl> @ @ - 1 , 90 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . security ; <nl> - <nl> - import java . io . FileInputStream ; <nl> - import java . io . IOException ; <nl> - import java . security . Key ; <nl> - import java . security . KeyStore ; <nl> - <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - <nl> - import org . apache . cassandra . config . TransparentDataEncryptionOptions ; <nl> - import org . apache . cassandra . io . util . FileUtils ; <nl> - <nl> - / * * <nl> - * A { @ code KeyProvider } that retrieves keys from a java keystore . <nl> - * / <nl> - public class JKSKeyProvider implements KeyProvider <nl> - { <nl> - private final Logger logger = LoggerFactory . getLogger ( JKSKeyProvider . class ) ; <nl> - static final String PROP _ KEYSTORE = " keystore " ; <nl> - static final String PROP _ KEYSTORE _ PW = " keystore _ password " ; <nl> - static final String PROP _ KEYSTORE _ TYPE = " store _ type " ; <nl> - static final String PROP _ KEY _ PW = " key _ password " ; <nl> - <nl> - private final KeyStore store ; <nl> - private final boolean isJceks ; <nl> - private final TransparentDataEncryptionOptions options ; <nl> - <nl> - public JKSKeyProvider ( TransparentDataEncryptionOptions options ) <nl> - { <nl> - this . options = options ; <nl> - logger . info ( " initializing keystore from file { } " , options . get ( PROP _ KEYSTORE ) ) ; <nl> - FileInputStream inputStream = null ; <nl> - try <nl> - { <nl> - inputStream = new FileInputStream ( options . get ( PROP _ KEYSTORE ) ) ; <nl> - store = KeyStore . getInstance ( options . get ( PROP _ KEYSTORE _ TYPE ) ) ; <nl> - store . load ( inputStream , options . get ( PROP _ KEYSTORE _ PW ) . toCharArray ( ) ) ; <nl> - isJceks = store . getType ( ) . equalsIgnoreCase ( " jceks " ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new RuntimeException ( " couldn ' t load keystore " , e ) ; <nl> - } <nl> - finally <nl> - { <nl> - FileUtils . closeQuietly ( inputStream ) ; <nl> - } <nl> - } <nl> - <nl> - public Key getSecretKey ( String keyAlias ) throws IOException <nl> - { <nl> - / / there ' s a lovely behavior with jceks files that all aliases are lower - cased <nl> - if ( isJceks ) <nl> - keyAlias = keyAlias . toLowerCase ( ) ; <nl> - <nl> - Key key ; <nl> - try <nl> - { <nl> - String password = options . get ( PROP _ KEY _ PW ) ; <nl> - if ( password = = null | | password . isEmpty ( ) ) <nl> - password = options . get ( PROP _ KEYSTORE _ PW ) ; <nl> - key = store . getKey ( keyAlias , password . toCharArray ( ) ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new IOException ( " unable to load key from keystore " ) ; <nl> - } <nl> - if ( key = = null ) <nl> - throw new IOException ( String . format ( " key % s was not found in keystore " , keyAlias ) ) ; <nl> - return key ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / security / KeyProvider . java b / src / java / org / apache / cassandra / security / KeyProvider . java <nl> deleted file mode 100644 <nl> index f380aed . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / security / KeyProvider . java <nl> + + + / dev / null <nl> @ @ - 1 , 33 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . security ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . security . Key ; <nl> - <nl> - / * * <nl> - * Customizable key retrieval mechanism . Implementations should expect that retrieved keys will be cached . <nl> - * Further , each key will be requested non - concurrently ( that is , no stampeding herds for the same key ) , although <nl> - * unique keys may be requested concurrently ( unless you mark { @ code getSecretKey } synchronized ) . <nl> - * <nl> - * Implementations must provide a constructor that accepts { @ code TransparentDataEncryptionOptions } as the sole parameter . <nl> - * / <nl> - public interface KeyProvider <nl> - { <nl> - Key getSecretKey ( String alias ) throws IOException ; <nl> - } <nl> diff - - git a / test / conf / cassandra . keystore b / test / conf / cassandra . keystore <nl> deleted file mode 100644 <nl> index 9a704ca . . 0000000 <nl> Binary files a / test / conf / cassandra . keystore and / dev / null differ <nl> diff - - git a / test / conf / cassandra _ encryption . yaml b / test / conf / cassandra _ encryption . yaml <nl> deleted file mode 100644 <nl> index 47e1312 . . 0000000 <nl> - - - a / test / conf / cassandra _ encryption . yaml <nl> + + + / dev / null <nl> @ @ - 1 , 14 + 0 , 0 @ @ <nl> - transparent _ data _ encryption _ options : <nl> - enabled : true <nl> - chunk _ length _ kb : 2 <nl> - cipher : AES / CBC / PKCS5Padding <nl> - key _ alias : testing : 1 <nl> - # CBC requires iv length to be 16 bytes <nl> - # iv _ length : 16 <nl> - key _ provider : <nl> - - class _ name : org . apache . cassandra . security . JKSKeyProvider <nl> - parameters : <nl> - - keystore : test / conf / cassandra . keystore <nl> - keystore _ password : cassandra <nl> - store _ type : JCEKS <nl> - key _ password : cassandra <nl> diff - - git a / test / unit / org / apache / cassandra / security / CipherFactoryTest . java b / test / unit / org / apache / cassandra / security / CipherFactoryTest . java <nl> deleted file mode 100644 <nl> index 4239973 . . 0000000 <nl> - - - a / test / unit / org / apache / cassandra / security / CipherFactoryTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 87 + 0 , 0 @ @ <nl> - package org . apache . cassandra . security ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . security . SecureRandom ; <nl> - <nl> - import javax . crypto . BadPaddingException ; <nl> - import javax . crypto . Cipher ; <nl> - import javax . crypto . IllegalBlockSizeException ; <nl> - <nl> - import com . google . common . base . Charsets ; <nl> - import org . junit . Assert ; <nl> - import org . junit . Before ; <nl> - import org . junit . Test ; <nl> - <nl> - import org . apache . cassandra . config . TransparentDataEncryptionOptions ; <nl> - <nl> - public class CipherFactoryTest <nl> - { <nl> - / / http : / / www . gutenberg . org / files / 4300 / 4300 - h / 4300 - h . htm <nl> - static final String ULYSSEUS = " Stately , plump Buck Mulligan came from the stairhead , bearing a bowl of lather on which a mirror and a razor lay crossed . " + <nl> - " A yellow dressinggown , ungirdled , was sustained gently behind him on the mild morning air . He held the bowl aloft and intoned : " + <nl> - " — Introibo ad altare Dei . " ; <nl> - TransparentDataEncryptionOptions encryptionOptions ; <nl> - CipherFactory cipherFactory ; <nl> - SecureRandom secureRandom ; <nl> - <nl> - @ Before <nl> - public void setup ( ) <nl> - { <nl> - secureRandom = new SecureRandom ( new byte [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ) ; <nl> - encryptionOptions = EncryptionContextGenerator . createEncryptionOptions ( ) ; <nl> - cipherFactory = new CipherFactory ( encryptionOptions ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void roundTrip ( ) throws IOException , BadPaddingException , IllegalBlockSizeException <nl> - { <nl> - Cipher encryptor = cipherFactory . getEncryptor ( encryptionOptions . cipher , encryptionOptions . key _ alias ) ; <nl> - byte [ ] original = ULYSSEUS . getBytes ( Charsets . UTF _ 8 ) ; <nl> - byte [ ] encrypted = encryptor . doFinal ( original ) ; <nl> - <nl> - Cipher decryptor = cipherFactory . getDecryptor ( encryptionOptions . cipher , encryptionOptions . key _ alias , encryptor . getIV ( ) ) ; <nl> - byte [ ] decrypted = decryptor . doFinal ( encrypted ) ; <nl> - Assert . assertEquals ( ULYSSEUS , new String ( decrypted , Charsets . UTF _ 8 ) ) ; <nl> - } <nl> - <nl> - private byte [ ] nextIV ( ) <nl> - { <nl> - byte [ ] b = new byte [ 16 ] ; <nl> - secureRandom . nextBytes ( b ) ; <nl> - return b ; <nl> - } <nl> - <nl> - @ Test <nl> - public void buildCipher _ SameParams ( ) throws Exception <nl> - { <nl> - byte [ ] iv = nextIV ( ) ; <nl> - Cipher c1 = cipherFactory . buildCipher ( encryptionOptions . cipher , encryptionOptions . key _ alias , iv , Cipher . ENCRYPT _ MODE ) ; <nl> - Cipher c2 = cipherFactory . buildCipher ( encryptionOptions . cipher , encryptionOptions . key _ alias , iv , Cipher . ENCRYPT _ MODE ) ; <nl> - Assert . assertTrue ( c1 = = c2 ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void buildCipher _ DifferentModes ( ) throws Exception <nl> - { <nl> - byte [ ] iv = nextIV ( ) ; <nl> - Cipher c1 = cipherFactory . buildCipher ( encryptionOptions . cipher , encryptionOptions . key _ alias , iv , Cipher . ENCRYPT _ MODE ) ; <nl> - Cipher c2 = cipherFactory . buildCipher ( encryptionOptions . cipher , encryptionOptions . key _ alias , iv , Cipher . DECRYPT _ MODE ) ; <nl> - Assert . assertFalse ( c1 = = c2 ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void buildCipher _ DifferentIVs ( ) throws Exception <nl> - { <nl> - Cipher c1 = cipherFactory . buildCipher ( encryptionOptions . cipher , encryptionOptions . key _ alias , nextIV ( ) , Cipher . ENCRYPT _ MODE ) ; <nl> - Cipher c2 = cipherFactory . buildCipher ( encryptionOptions . cipher , encryptionOptions . key _ alias , nextIV ( ) , Cipher . DECRYPT _ MODE ) ; <nl> - Assert . assertFalse ( c1 = = c2 ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void buildCipher _ DifferentAliases ( ) throws Exception <nl> - { <nl> - Cipher c1 = cipherFactory . buildCipher ( encryptionOptions . cipher , encryptionOptions . key _ alias , nextIV ( ) , Cipher . ENCRYPT _ MODE ) ; <nl> - Cipher c2 = cipherFactory . buildCipher ( encryptionOptions . cipher , EncryptionContextGenerator . KEY _ ALIAS _ 2 , nextIV ( ) , Cipher . DECRYPT _ MODE ) ; <nl> - Assert . assertFalse ( c1 = = c2 ) ; <nl> - } <nl> - } <nl> diff - - git a / test / unit / org / apache / cassandra / security / EncryptionContextGenerator . java b / test / unit / org / apache / cassandra / security / EncryptionContextGenerator . java <nl> deleted file mode 100644 <nl> index 635889b . . 0000000 <nl> - - - a / test / unit / org / apache / cassandra / security / EncryptionContextGenerator . java <nl> + + + / dev / null <nl> @ @ - 1 , 54 + 0 , 0 @ @ <nl> - / * <nl> - * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , <nl> - * software distributed under the License is distributed on an <nl> - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> - * KIND , either express or implied . See the License for the <nl> - * specific language governing permissions and limitations <nl> - * under the License . <nl> - * <nl> - * / <nl> - package org . apache . cassandra . security ; <nl> - <nl> - import java . util . HashMap ; <nl> - import java . util . Map ; <nl> - <nl> - import org . apache . cassandra . config . ParameterizedClass ; <nl> - import org . apache . cassandra . config . TransparentDataEncryptionOptions ; <nl> - <nl> - public class EncryptionContextGenerator <nl> - { <nl> - public static final String KEY _ ALIAS _ 1 = " testing : 1 " ; <nl> - public static final String KEY _ ALIAS _ 2 = " testing : 2 " ; <nl> - <nl> - public static EncryptionContext createContext ( boolean init ) <nl> - { <nl> - return new EncryptionContext ( createEncryptionOptions ( ) , init ) ; <nl> - } <nl> - <nl> - public static TransparentDataEncryptionOptions createEncryptionOptions ( ) <nl> - { <nl> - Map < String , String > params = new HashMap < > ( ) ; <nl> - params . put ( " keystore " , " test / conf / cassandra . keystore " ) ; <nl> - params . put ( " keystore _ password " , " cassandra " ) ; <nl> - params . put ( " store _ type " , " JCEKS " ) ; <nl> - ParameterizedClass keyProvider = new ParameterizedClass ( JKSKeyProvider . class . getName ( ) , params ) ; <nl> - <nl> - return new TransparentDataEncryptionOptions ( " AES / CBC / PKCS5Padding " , KEY _ ALIAS _ 1 , keyProvider ) ; <nl> - } <nl> - <nl> - public static EncryptionContext createDisabledContext ( ) <nl> - { <nl> - return new EncryptionContext ( ) ; <nl> - } <nl> - } <nl> diff - - git a / test / unit / org / apache / cassandra / security / JKSKeyProviderTest . java b / test / unit / org / apache / cassandra / security / JKSKeyProviderTest . java <nl> deleted file mode 100644 <nl> index 081f688 . . 0000000 <nl> - - - a / test / unit / org / apache / cassandra / security / JKSKeyProviderTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 52 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . security ; <nl> - <nl> - import java . io . IOException ; <nl> - <nl> - import org . junit . Assert ; <nl> - import org . junit . Before ; <nl> - import org . junit . Test ; <nl> - <nl> - import org . apache . cassandra . config . TransparentDataEncryptionOptions ; <nl> - <nl> - public class JKSKeyProviderTest <nl> - { <nl> - JKSKeyProvider jksKeyProvider ; <nl> - TransparentDataEncryptionOptions tdeOptions ; <nl> - <nl> - @ Before <nl> - public void setup ( ) <nl> - { <nl> - tdeOptions = EncryptionContextGenerator . createEncryptionOptions ( ) ; <nl> - jksKeyProvider = new JKSKeyProvider ( tdeOptions ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void getSecretKey _ WithKeyPassword ( ) throws IOException <nl> - { <nl> - Assert . assertNotNull ( jksKeyProvider . getSecretKey ( tdeOptions . key _ alias ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void getSecretKey _ WithoutKeyPassword ( ) throws IOException <nl> - { <nl> - tdeOptions . remove ( " key _ password " ) ; <nl> - Assert . assertNotNull ( jksKeyProvider . getSecretKey ( tdeOptions . key _ alias ) ) ; <nl> - } <nl> - }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index f8f34e0 . . e93d090 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 169 , 8 + 169 , 7 @ @ public class Config 
 public int commitlog _ segment _ size _ in _ mb = 32 ; 
 public ParameterizedClass commitlog _ compression ; 
 public int commitlog _ max _ compression _ buffers _ in _ pool = 3 ; 
 - public TransparentDataEncryptionOptions transparent _ data _ encryption _ options = new TransparentDataEncryptionOptions ( ) ; 
 - 
 + 
 @ Deprecated 
 public int commitlog _ periodic _ queue _ size = - 1 ; 
 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index e7b9455 . . 02f3c17 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 44 , 7 + 44 , 6 @ @ import org . apache . cassandra . locator . * ; 
 import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . scheduler . IRequestScheduler ; 
 import org . apache . cassandra . scheduler . NoScheduler ; 
 - import org . apache . cassandra . security . EncryptionContext ; 
 import org . apache . cassandra . service . CacheService ; 
 import org . apache . cassandra . thrift . ThriftServer ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 @ @ - 93 , 7 + 92 , 6 @ @ public class DatabaseDescriptor 
 
 private static String localDC ; 
 private static Comparator < InetAddress > localComparator ; 
 - private static EncryptionContext encryptionContext ; 
 
 public static void forceStaticInitialization ( ) { } 
 static 
 @ @ - 615 , 10 + 613 , 6 @ @ public class DatabaseDescriptor 
 
 if ( conf . user _ defined _ function _ fail _ timeout < conf . user _ defined _ function _ warn _ timeout ) 
 throw new ConfigurationException ( " user _ defined _ function _ warn _ timeout must less than user _ defined _ function _ fail _ timeout " , false ) ; 
 - 
 - / / always attempt to load the cipher factory , as we could be in the situation where the user has disabled encryption , 
 - / / but has existing commitlogs and sstables on disk that are still encrypted ( and still need to be read ) 
 - encryptionContext = new EncryptionContext ( config . transparent _ data _ encryption _ options ) ; 
 } 
 
 private static IEndpointSnitch createEndpointSnitch ( String snitchClassName ) throws ConfigurationException 
 @ @ - 1798 , 15 + 1792 , 4 @ @ public class DatabaseDescriptor 
 { 
 conf . user _ function _ timeout _ policy = userFunctionTimeoutPolicy ; 
 } 
 - 
 - public static EncryptionContext getEncryptionContext ( ) 
 - { 
 - return encryptionContext ; 
 - } 
 - 
 - @ VisibleForTesting 
 - public static void setEncryptionContext ( EncryptionContext ec ) 
 - { 
 - encryptionContext = ec ; 
 - } 
 } 
 diff - - git a / src / java / org / apache / cassandra / config / TransparentDataEncryptionOptions . java b / src / java / org / apache / cassandra / config / TransparentDataEncryptionOptions . java 
 deleted file mode 100644 
 index 4ad0305 . . 0000000 
 - - - a / src / java / org / apache / cassandra / config / TransparentDataEncryptionOptions . java 
 + + + / dev / null 
 @ @ - 1 , 76 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . config ; 
 - 
 - import com . google . common . annotations . VisibleForTesting ; 
 - import com . google . common . base . Objects ; 
 - 
 - public class TransparentDataEncryptionOptions 
 - { 
 - public boolean enabled = false ; 
 - public int chunk _ length _ kb = 64 ; 
 - public String cipher = " AES / CBC / PKCS5Padding " ; 
 - public String key _ alias ; 
 - public int iv _ length = 16 ; 
 - 
 - public ParameterizedClass key _ provider ; 
 - 
 - public TransparentDataEncryptionOptions ( ) 
 - { } 
 - 
 - public TransparentDataEncryptionOptions ( boolean enabled ) 
 - { 
 - this . enabled = enabled ; 
 - } 
 - 
 - public TransparentDataEncryptionOptions ( String cipher , String keyAlias , ParameterizedClass keyProvider ) 
 - { 
 - this ( true , cipher , keyAlias , keyProvider ) ; 
 - } 
 - 
 - public TransparentDataEncryptionOptions ( boolean enabled , String cipher , String keyAlias , ParameterizedClass keyProvider ) 
 - { 
 - this . enabled = enabled ; 
 - this . cipher = cipher ; 
 - key _ alias = keyAlias ; 
 - key _ provider = keyProvider ; 
 - } 
 - 
 - public String get ( String key ) 
 - { 
 - return key _ provider . parameters . get ( key ) ; 
 - } 
 - 
 - @ VisibleForTesting 
 - public void remove ( String key ) 
 - { 
 - key _ provider . parameters . remove ( key ) ; 
 - } 
 - 
 - public boolean equals ( Object o ) 
 - { 
 - return o instanceof TransparentDataEncryptionOptions & & equals ( ( TransparentDataEncryptionOptions ) o ) ; 
 - } 
 - 
 - public boolean equals ( TransparentDataEncryptionOptions other ) 
 - { 
 - / / not sure if this is a great equals ( ) impl . . . . 
 - return Objects . equal ( cipher , other . cipher ) & & 
 - Objects . equal ( key _ alias , other . key _ alias ) ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / security / CipherFactory . java b / src / java / org / apache / cassandra / security / CipherFactory . java 
 deleted file mode 100644 
 index 0ff9867 . . 0000000 
 - - - a / src / java / org / apache / cassandra / security / CipherFactory . java 
 + + + / dev / null 
 @ @ - 1 , 175 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . security ; 
 - 
 - import java . io . IOException ; 
 - import java . lang . reflect . Constructor ; 
 - import java . security . InvalidAlgorithmParameterException ; 
 - import java . security . InvalidKeyException ; 
 - import java . security . Key ; 
 - import java . security . NoSuchAlgorithmException ; 
 - import java . security . SecureRandom ; 
 - import java . util . Arrays ; 
 - import java . util . concurrent . ExecutionException ; 
 - import javax . crypto . Cipher ; 
 - import javax . crypto . NoSuchPaddingException ; 
 - import javax . crypto . spec . IvParameterSpec ; 
 - 
 - import com . google . common . annotations . VisibleForTesting ; 
 - import com . google . common . cache . CacheBuilder ; 
 - import com . google . common . cache . CacheLoader ; 
 - import com . google . common . cache . LoadingCache ; 
 - import com . google . common . cache . RemovalListener ; 
 - import com . google . common . cache . RemovalNotification ; 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 - 
 - import org . apache . cassandra . config . TransparentDataEncryptionOptions ; 
 - 
 - / * * 
 - * A factory for loading encryption keys from { @ link KeyProvider } instances . 
 - * Maintains a cache of loaded keys to avoid invoking the key provider on every call . 
 - * / 
 - public class CipherFactory 
 - { 
 - private final Logger logger = LoggerFactory . getLogger ( CipherFactory . class ) ; 
 - 
 - / * * 
 - * Keep around thread local instances of Cipher as they are quite expensive to instantiate ( @ code Cipher # getInstance ) . 
 - * Bonus points if you can avoid calling ( @ code Cipher # init ) ; hence , the point of the supporting struct 
 - * for caching Cipher instances . 
 - * / 
 - private static final ThreadLocal < CachedCipher > cipherThreadLocal = new ThreadLocal < > ( ) ; 
 - 
 - private final SecureRandom secureRandom ; 
 - private final LoadingCache < String , Key > cache ; 
 - private final int ivLength ; 
 - private final KeyProvider keyProvider ; 
 - 
 - public CipherFactory ( TransparentDataEncryptionOptions options ) 
 - { 
 - logger . info ( " initializing CipherFactory " ) ; 
 - ivLength = options . iv _ length ; 
 - 
 - try 
 - { 
 - secureRandom = SecureRandom . getInstance ( " SHA1PRNG " ) ; 
 - Class < KeyProvider > keyProviderClass = ( Class < KeyProvider > ) Class . forName ( options . key _ provider . class _ name ) ; 
 - Constructor ctor = keyProviderClass . getConstructor ( TransparentDataEncryptionOptions . class ) ; 
 - keyProvider = ( KeyProvider ) ctor . newInstance ( options ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - throw new RuntimeException ( " couldn ' t load cipher factory " , e ) ; 
 - } 
 - 
 - cache = CacheBuilder . newBuilder ( ) / / by default cache is unbounded 
 - . maximumSize ( 64 ) / / a value large enough that we should never even get close ( so nothing gets evicted ) 
 - . concurrencyLevel ( Runtime . getRuntime ( ) . availableProcessors ( ) ) 
 - . removalListener ( new RemovalListener < String , Key > ( ) 
 - { 
 - public void onRemoval ( RemovalNotification < String , Key > notice ) 
 - { 
 - / / maybe reload the key ? ( to avoid the reload being on the user ' s dime ) 
 - logger . info ( " key { } removed from cipher key cache " , notice . getKey ( ) ) ; 
 - } 
 - } ) 
 - . build ( new CacheLoader < String , Key > ( ) 
 - { 
 - @ Override 
 - public Key load ( String alias ) throws Exception 
 - { 
 - logger . info ( " loading secret key for alias { } " , alias ) ; 
 - return keyProvider . getSecretKey ( alias ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - public Cipher getEncryptor ( String transformation , String keyAlias ) throws IOException 
 - { 
 - byte [ ] iv = new byte [ ivLength ] ; 
 - secureRandom . nextBytes ( iv ) ; 
 - return buildCipher ( transformation , keyAlias , iv , Cipher . ENCRYPT _ MODE ) ; 
 - } 
 - 
 - public Cipher getDecryptor ( String transformation , String keyAlias , byte [ ] iv ) throws IOException 
 - { 
 - assert iv ! = null | | iv . length > 0 : " trying to decrypt , but the initialization vector is empty " ; 
 - return buildCipher ( transformation , keyAlias , iv , Cipher . DECRYPT _ MODE ) ; 
 - } 
 - 
 - @ VisibleForTesting 
 - Cipher buildCipher ( String transformation , String keyAlias , byte [ ] iv , int cipherMode ) throws IOException 
 - { 
 - try 
 - { 
 - CachedCipher cachedCipher = cipherThreadLocal . get ( ) ; 
 - if ( cachedCipher ! = null ) 
 - { 
 - Cipher cipher = cachedCipher . cipher ; 
 - / / rigorous checks to make sure we ' ve absolutely got the correct instance ( with correct alg / key / iv / . . . ) 
 - if ( cachedCipher . mode = = cipherMode & & cipher . getAlgorithm ( ) . equals ( transformation ) 
 - & & cachedCipher . keyAlias . equals ( keyAlias ) & & Arrays . equals ( cipher . getIV ( ) , iv ) ) 
 - return cipher ; 
 - } 
 - 
 - Key key = retrieveKey ( keyAlias ) ; 
 - Cipher cipher = Cipher . getInstance ( transformation ) ; 
 - cipher . init ( cipherMode , key , new IvParameterSpec ( iv ) ) ; 
 - cipherThreadLocal . set ( new CachedCipher ( cipherMode , keyAlias , cipher ) ) ; 
 - return cipher ; 
 - } 
 - catch ( NoSuchAlgorithmException | NoSuchPaddingException | InvalidAlgorithmParameterException | InvalidKeyException e ) 
 - { 
 - logger . error ( " could not build cipher " , e ) ; 
 - throw new IOException ( " cannot load cipher " , e ) ; 
 - } 
 - } 
 - 
 - private Key retrieveKey ( String keyAlias ) throws IOException 
 - { 
 - try 
 - { 
 - return cache . get ( keyAlias ) ; 
 - } 
 - catch ( ExecutionException e ) 
 - { 
 - if ( e . getCause ( ) instanceof IOException ) 
 - throw ( IOException ) e . getCause ( ) ; 
 - throw new IOException ( " failed to load key from cache : " + keyAlias , e ) ; 
 - } 
 - } 
 - 
 - / * * 
 - * A simple struct to use with the thread local caching of Cipher as we can ' t get the mode ( encrypt / decrypt ) nor 
 - * key _ alias ( or key ! ) from the Cipher itself to use for comparisons 
 - * / 
 - private static class CachedCipher 
 - { 
 - public final int mode ; 
 - public final String keyAlias ; 
 - public final Cipher cipher ; 
 - 
 - private CachedCipher ( int mode , String keyAlias , Cipher cipher ) 
 - { 
 - this . mode = mode ; 
 - this . keyAlias = keyAlias ; 
 - this . cipher = cipher ; 
 - } 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / security / EncryptionContext . java b / src / java / org / apache / cassandra / security / EncryptionContext . java 
 deleted file mode 100644 
 index dff6894 . . 0000000 
 - - - a / src / java / org / apache / cassandra / security / EncryptionContext . java 
 + + + / dev / null 
 @ @ - 1 , 122 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . security ; 
 - 
 - import java . io . IOException ; 
 - import java . util . Collections ; 
 - import javax . crypto . Cipher ; 
 - 
 - import com . google . common . annotations . VisibleForTesting ; 
 - import com . google . common . base . Objects ; 
 - 
 - import org . apache . cassandra . config . TransparentDataEncryptionOptions ; 
 - import org . apache . cassandra . exceptions . ConfigurationException ; 
 - import org . apache . cassandra . io . compress . ICompressor ; 
 - import org . apache . cassandra . io . compress . LZ4Compressor ; 
 - 
 - / * * 
 - * A ( largely ) immutable wrapper for the application - wide file - level encryption settings . 
 - * / 
 - public class EncryptionContext 
 - { 
 - public static final String ENCRYPTION _ CIPHER = " encCipher " ; 
 - public static final String ENCRYPTION _ KEY _ ALIAS = " encKeyAlias " ; 
 - public static final String ENCRYPTION _ IV = " encIV " ; 
 - 
 - private final TransparentDataEncryptionOptions tdeOptions ; 
 - private final ICompressor compressor ; 
 - private final CipherFactory cipherFactory ; 
 - 
 - private final int chunkLength ; 
 - 
 - public EncryptionContext ( ) 
 - { 
 - this ( new TransparentDataEncryptionOptions ( ) ) ; 
 - } 
 - 
 - public EncryptionContext ( TransparentDataEncryptionOptions tdeOptions ) 
 - { 
 - this ( tdeOptions , true ) ; 
 - } 
 - 
 - @ VisibleForTesting 
 - public EncryptionContext ( TransparentDataEncryptionOptions tdeOptions , boolean init ) 
 - { 
 - this . tdeOptions = tdeOptions ; 
 - compressor = LZ4Compressor . create ( Collections . < String , String > emptyMap ( ) ) ; 
 - chunkLength = tdeOptions . chunk _ length _ kb * 1024 ; 
 - 
 - / / always attempt to load the cipher factory , as we could be in the situation where the user has disabled encryption , 
 - / / but has existing commitlogs and sstables on disk that are still git addencrypted ( and still need to be read ) 
 - CipherFactory factory = null ; 
 - 
 - if ( tdeOptions . enabled & & init ) 
 - { 
 - try 
 - { 
 - factory = new CipherFactory ( tdeOptions ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - throw new ConfigurationException ( " failed to load key provider for transparent data encryption " , e ) ; 
 - } 
 - } 
 - 
 - cipherFactory = factory ; 
 - } 
 - 
 - public ICompressor getCompressor ( ) 
 - { 
 - return compressor ; 
 - } 
 - 
 - public Cipher getEncryptor ( ) throws IOException 
 - { 
 - return cipherFactory . getEncryptor ( tdeOptions . cipher , tdeOptions . key _ alias ) ; 
 - } 
 - 
 - public Cipher getDecryptor ( byte [ ] IV ) throws IOException 
 - { 
 - return cipherFactory . getDecryptor ( tdeOptions . cipher , tdeOptions . key _ alias , IV ) ; 
 - } 
 - 
 - public boolean isEnabled ( ) 
 - { 
 - return tdeOptions . enabled ; 
 - } 
 - 
 - public int getChunkLength ( ) 
 - { 
 - return chunkLength ; 
 - } 
 - 
 - public TransparentDataEncryptionOptions getTransparentDataEncryptionOptions ( ) 
 - { 
 - return tdeOptions ; 
 - } 
 - 
 - public boolean equals ( Object o ) 
 - { 
 - return o instanceof EncryptionContext & & equals ( ( EncryptionContext ) o ) ; 
 - } 
 - 
 - public boolean equals ( EncryptionContext other ) 
 - { 
 - return Objects . equal ( tdeOptions , other . tdeOptions ) & & Objects . equal ( compressor , other . compressor ) ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / security / JKSKeyProvider . java b / src / java / org / apache / cassandra / security / JKSKeyProvider . java 
 deleted file mode 100644 
 index 8d7f1c6 . . 0000000 
 - - - a / src / java / org / apache / cassandra / security / JKSKeyProvider . java 
 + + + / dev / null 
 @ @ - 1 , 90 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . security ; 
 - 
 - import java . io . FileInputStream ; 
 - import java . io . IOException ; 
 - import java . security . Key ; 
 - import java . security . KeyStore ; 
 - 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 - 
 - import org . apache . cassandra . config . TransparentDataEncryptionOptions ; 
 - import org . apache . cassandra . io . util . FileUtils ; 
 - 
 - / * * 
 - * A { @ code KeyProvider } that retrieves keys from a java keystore . 
 - * / 
 - public class JKSKeyProvider implements KeyProvider 
 - { 
 - private final Logger logger = LoggerFactory . getLogger ( JKSKeyProvider . class ) ; 
 - static final String PROP _ KEYSTORE = " keystore " ; 
 - static final String PROP _ KEYSTORE _ PW = " keystore _ password " ; 
 - static final String PROP _ KEYSTORE _ TYPE = " store _ type " ; 
 - static final String PROP _ KEY _ PW = " key _ password " ; 
 - 
 - private final KeyStore store ; 
 - private final boolean isJceks ; 
 - private final TransparentDataEncryptionOptions options ; 
 - 
 - public JKSKeyProvider ( TransparentDataEncryptionOptions options ) 
 - { 
 - this . options = options ; 
 - logger . info ( " initializing keystore from file { } " , options . get ( PROP _ KEYSTORE ) ) ; 
 - FileInputStream inputStream = null ; 
 - try 
 - { 
 - inputStream = new FileInputStream ( options . get ( PROP _ KEYSTORE ) ) ; 
 - store = KeyStore . getInstance ( options . get ( PROP _ KEYSTORE _ TYPE ) ) ; 
 - store . load ( inputStream , options . get ( PROP _ KEYSTORE _ PW ) . toCharArray ( ) ) ; 
 - isJceks = store . getType ( ) . equalsIgnoreCase ( " jceks " ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - throw new RuntimeException ( " couldn ' t load keystore " , e ) ; 
 - } 
 - finally 
 - { 
 - FileUtils . closeQuietly ( inputStream ) ; 
 - } 
 - } 
 - 
 - public Key getSecretKey ( String keyAlias ) throws IOException 
 - { 
 - / / there ' s a lovely behavior with jceks files that all aliases are lower - cased 
 - if ( isJceks ) 
 - keyAlias = keyAlias . toLowerCase ( ) ; 
 - 
 - Key key ; 
 - try 
 - { 
 - String password = options . get ( PROP _ KEY _ PW ) ; 
 - if ( password = = null | | password . isEmpty ( ) ) 
 - password = options . get ( PROP _ KEYSTORE _ PW ) ; 
 - key = store . getKey ( keyAlias , password . toCharArray ( ) ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - throw new IOException ( " unable to load key from keystore " ) ; 
 - } 
 - if ( key = = null ) 
 - throw new IOException ( String . format ( " key % s was not found in keystore " , keyAlias ) ) ; 
 - return key ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / security / KeyProvider . java b / src / java / org / apache / cassandra / security / KeyProvider . java 
 deleted file mode 100644 
 index f380aed . . 0000000 
 - - - a / src / java / org / apache / cassandra / security / KeyProvider . java 
 + + + / dev / null 
 @ @ - 1 , 33 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . security ; 
 - 
 - import java . io . IOException ; 
 - import java . security . Key ; 
 - 
 - / * * 
 - * Customizable key retrieval mechanism . Implementations should expect that retrieved keys will be cached . 
 - * Further , each key will be requested non - concurrently ( that is , no stampeding herds for the same key ) , although 
 - * unique keys may be requested concurrently ( unless you mark { @ code getSecretKey } synchronized ) . 
 - * 
 - * Implementations must provide a constructor that accepts { @ code TransparentDataEncryptionOptions } as the sole parameter . 
 - * / 
 - public interface KeyProvider 
 - { 
 - Key getSecretKey ( String alias ) throws IOException ; 
 - } 
 diff - - git a / test / conf / cassandra . keystore b / test / conf / cassandra . keystore 
 deleted file mode 100644 
 index 9a704ca . . 0000000 
 Binary files a / test / conf / cassandra . keystore and / dev / null differ 
 diff - - git a / test / conf / cassandra _ encryption . yaml b / test / conf / cassandra _ encryption . yaml 
 deleted file mode 100644 
 index 47e1312 . . 0000000 
 - - - a / test / conf / cassandra _ encryption . yaml 
 + + + / dev / null 
 @ @ - 1 , 14 + 0 , 0 @ @ 
 - transparent _ data _ encryption _ options : 
 - enabled : true 
 - chunk _ length _ kb : 2 
 - cipher : AES / CBC / PKCS5Padding 
 - key _ alias : testing : 1 
 - # CBC requires iv length to be 16 bytes 
 - # iv _ length : 16 
 - key _ provider : 
 - - class _ name : org . apache . cassandra . security . JKSKeyProvider 
 - parameters : 
 - - keystore : test / conf / cassandra . keystore 
 - keystore _ password : cassandra 
 - store _ type : JCEKS 
 - key _ password : cassandra 
 diff - - git a / test / unit / org / apache / cassandra / security / CipherFactoryTest . java b / test / unit / org / apache / cassandra / security / CipherFactoryTest . java 
 deleted file mode 100644 
 index 4239973 . . 0000000 
 - - - a / test / unit / org / apache / cassandra / security / CipherFactoryTest . java 
 + + + / dev / null 
 @ @ - 1 , 87 + 0 , 0 @ @ 
 - package org . apache . cassandra . security ; 
 - 
 - import java . io . IOException ; 
 - import java . security . SecureRandom ; 
 - 
 - import javax . crypto . BadPaddingException ; 
 - import javax . crypto . Cipher ; 
 - import javax . crypto . IllegalBlockSizeException ; 
 - 
 - import com . google . common . base . Charsets ; 
 - import org . junit . Assert ; 
 - import org . junit . Before ; 
 - import org . junit . Test ; 
 - 
 - import org . apache . cassandra . config . TransparentDataEncryptionOptions ; 
 - 
 - public class CipherFactoryTest 
 - { 
 - / / http : / / www . gutenberg . org / files / 4300 / 4300 - h / 4300 - h . htm 
 - static final String ULYSSEUS = " Stately , plump Buck Mulligan came from the stairhead , bearing a bowl of lather on which a mirror and a razor lay crossed . " + 
 - " A yellow dressinggown , ungirdled , was sustained gently behind him on the mild morning air . He held the bowl aloft and intoned : " + 
 - " — Introibo ad altare Dei . " ; 
 - TransparentDataEncryptionOptions encryptionOptions ; 
 - CipherFactory cipherFactory ; 
 - SecureRandom secureRandom ; 
 - 
 - @ Before 
 - public void setup ( ) 
 - { 
 - secureRandom = new SecureRandom ( new byte [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ) ; 
 - encryptionOptions = EncryptionContextGenerator . createEncryptionOptions ( ) ; 
 - cipherFactory = new CipherFactory ( encryptionOptions ) ; 
 - } 
 - 
 - @ Test 
 - public void roundTrip ( ) throws IOException , BadPaddingException , IllegalBlockSizeException 
 - { 
 - Cipher encryptor = cipherFactory . getEncryptor ( encryptionOptions . cipher , encryptionOptions . key _ alias ) ; 
 - byte [ ] original = ULYSSEUS . getBytes ( Charsets . UTF _ 8 ) ; 
 - byte [ ] encrypted = encryptor . doFinal ( original ) ; 
 - 
 - Cipher decryptor = cipherFactory . getDecryptor ( encryptionOptions . cipher , encryptionOptions . key _ alias , encryptor . getIV ( ) ) ; 
 - byte [ ] decrypted = decryptor . doFinal ( encrypted ) ; 
 - Assert . assertEquals ( ULYSSEUS , new String ( decrypted , Charsets . UTF _ 8 ) ) ; 
 - } 
 - 
 - private byte [ ] nextIV ( ) 
 - { 
 - byte [ ] b = new byte [ 16 ] ; 
 - secureRandom . nextBytes ( b ) ; 
 - return b ; 
 - } 
 - 
 - @ Test 
 - public void buildCipher _ SameParams ( ) throws Exception 
 - { 
 - byte [ ] iv = nextIV ( ) ; 
 - Cipher c1 = cipherFactory . buildCipher ( encryptionOptions . cipher , encryptionOptions . key _ alias , iv , Cipher . ENCRYPT _ MODE ) ; 
 - Cipher c2 = cipherFactory . buildCipher ( encryptionOptions . cipher , encryptionOptions . key _ alias , iv , Cipher . ENCRYPT _ MODE ) ; 
 - Assert . assertTrue ( c1 = = c2 ) ; 
 - } 
 - 
 - @ Test 
 - public void buildCipher _ DifferentModes ( ) throws Exception 
 - { 
 - byte [ ] iv = nextIV ( ) ; 
 - Cipher c1 = cipherFactory . buildCipher ( encryptionOptions . cipher , encryptionOptions . key _ alias , iv , Cipher . ENCRYPT _ MODE ) ; 
 - Cipher c2 = cipherFactory . buildCipher ( encryptionOptions . cipher , encryptionOptions . key _ alias , iv , Cipher . DECRYPT _ MODE ) ; 
 - Assert . assertFalse ( c1 = = c2 ) ; 
 - } 
 - 
 - @ Test 
 - public void buildCipher _ DifferentIVs ( ) throws Exception 
 - { 
 - Cipher c1 = cipherFactory . buildCipher ( encryptionOptions . cipher , encryptionOptions . key _ alias , nextIV ( ) , Cipher . ENCRYPT _ MODE ) ; 
 - Cipher c2 = cipherFactory . buildCipher ( encryptionOptions . cipher , encryptionOptions . key _ alias , nextIV ( ) , Cipher . DECRYPT _ MODE ) ; 
 - Assert . assertFalse ( c1 = = c2 ) ; 
 - } 
 - 
 - @ Test 
 - public void buildCipher _ DifferentAliases ( ) throws Exception 
 - { 
 - Cipher c1 = cipherFactory . buildCipher ( encryptionOptions . cipher , encryptionOptions . key _ alias , nextIV ( ) , Cipher . ENCRYPT _ MODE ) ; 
 - Cipher c2 = cipherFactory . buildCipher ( encryptionOptions . cipher , EncryptionContextGenerator . KEY _ ALIAS _ 2 , nextIV ( ) , Cipher . DECRYPT _ MODE ) ; 
 - Assert . assertFalse ( c1 = = c2 ) ; 
 - } 
 - } 
 diff - - git a / test / unit / org / apache / cassandra / security / EncryptionContextGenerator . java b / test / unit / org / apache / cassandra / security / EncryptionContextGenerator . java 
 deleted file mode 100644 
 index 635889b . . 0000000 
 - - - a / test / unit / org / apache / cassandra / security / EncryptionContextGenerator . java 
 + + + / dev / null 
 @ @ - 1 , 54 + 0 , 0 @ @ 
 - / * 
 - * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , 
 - * software distributed under the License is distributed on an 
 - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 - * KIND , either express or implied . See the License for the 
 - * specific language governing permissions and limitations 
 - * under the License . 
 - * 
 - * / 
 - package org . apache . cassandra . security ; 
 - 
 - import java . util . HashMap ; 
 - import java . util . Map ; 
 - 
 - import org . apache . cassandra . config . ParameterizedClass ; 
 - import org . apache . cassandra . config . TransparentDataEncryptionOptions ; 
 - 
 - public class EncryptionContextGenerator 
 - { 
 - public static final String KEY _ ALIAS _ 1 = " testing : 1 " ; 
 - public static final String KEY _ ALIAS _ 2 = " testing : 2 " ; 
 - 
 - public static EncryptionContext createContext ( boolean init ) 
 - { 
 - return new EncryptionContext ( createEncryptionOptions ( ) , init ) ; 
 - } 
 - 
 - public static TransparentDataEncryptionOptions createEncryptionOptions ( ) 
 - { 
 - Map < String , String > params = new HashMap < > ( ) ; 
 - params . put ( " keystore " , " test / conf / cassandra . keystore " ) ; 
 - params . put ( " keystore _ password " , " cassandra " ) ; 
 - params . put ( " store _ type " , " JCEKS " ) ; 
 - ParameterizedClass keyProvider = new ParameterizedClass ( JKSKeyProvider . class . getName ( ) , params ) ; 
 - 
 - return new TransparentDataEncryptionOptions ( " AES / CBC / PKCS5Padding " , KEY _ ALIAS _ 1 , keyProvider ) ; 
 - } 
 - 
 - public static EncryptionContext createDisabledContext ( ) 
 - { 
 - return new EncryptionContext ( ) ; 
 - } 
 - } 
 diff - - git a / test / unit / org / apache / cassandra / security / JKSKeyProviderTest . java b / test / unit / org / apache / cassandra / security / JKSKeyProviderTest . java 
 deleted file mode 100644 
 index 081f688 . . 0000000 
 - - - a / test / unit / org / apache / cassandra / security / JKSKeyProviderTest . java 
 + + + / dev / null 
 @ @ - 1 , 52 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . security ; 
 - 
 - import java . io . IOException ; 
 - 
 - import org . junit . Assert ; 
 - import org . junit . Before ; 
 - import org . junit . Test ; 
 - 
 - import org . apache . cassandra . config . TransparentDataEncryptionOptions ; 
 - 
 - public class JKSKeyProviderTest 
 - { 
 - JKSKeyProvider jksKeyProvider ; 
 - TransparentDataEncryptionOptions tdeOptions ; 
 - 
 - @ Before 
 - public void setup ( ) 
 - { 
 - tdeOptions = EncryptionContextGenerator . createEncryptionOptions ( ) ; 
 - jksKeyProvider = new JKSKeyProvider ( tdeOptions ) ; 
 - } 
 - 
 - @ Test 
 - public void getSecretKey _ WithKeyPassword ( ) throws IOException 
 - { 
 - Assert . assertNotNull ( jksKeyProvider . getSecretKey ( tdeOptions . key _ alias ) ) ; 
 - } 
 - 
 - @ Test 
 - public void getSecretKey _ WithoutKeyPassword ( ) throws IOException 
 - { 
 - tdeOptions . remove ( " key _ password " ) ; 
 - Assert . assertNotNull ( jksKeyProvider . getSecretKey ( tdeOptions . key _ alias ) ) ; 
 - } 
 - }

NEAREST DIFF:
ELIMINATEDSENTENCE
