BLEU SCORE: 0.05522397783539471

TEST MSG: Ninja - add missing consistency levels to cqlsh
GENERATED MSG: cqlsh : fix help topics

TEST DIFF (one line): diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index c99b98c . . 6be9b78 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 247 , 9 + 247 , 11 @ @ cqlsh _ extra _ syntax _ rules = r ' ' ' <nl> | " THREE " <nl> | " QUORUM " <nl> | " ALL " <nl> - | " LOCAL _ ONE " <nl> | " LOCAL _ QUORUM " <nl> | " EACH _ QUORUM " <nl> + | " SERIAL " <nl> + | " LOCAL _ SERIAL " <nl> + | " LOCAL _ ONE " <nl> ; <nl> <nl> < showCommand > : : = " SHOW " what = ( " VERSION " | " HOST " | " SESSION " sessionid = < uuid > )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / tracing / Tracing . java b / src / java / org / apache / cassandra / tracing / Tracing . java <nl> index 5e6b3d0 . . c158b10 100644 <nl> - - - a / src / java / org / apache / cassandra / tracing / Tracing . java <nl> + + + b / src / java / org / apache / cassandra / tracing / Tracing . java <nl> @ @ - 20 , 14 + 20 , 15 @ @ <nl> * / <nl> package org . apache . cassandra . tracing ; <nl> <nl> - import static com . google . common . base . Preconditions . checkState ; <nl> - import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; <nl> - <nl> import java . net . InetAddress ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . Arrays ; <nl> import java . util . Map ; <nl> import java . util . UUID ; <nl> + import java . util . concurrent . ConcurrentHashMap ; <nl> + <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . concurrent . Stage ; <nl> import org . apache . cassandra . concurrent . StageManager ; <nl> @ @ - 48 , 8 + 49 , 7 @ @ import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> import org . apache . cassandra . utils . WrappedRunnable ; <nl> <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> + import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; <nl> <nl> / * * <nl> * A trace session context . Able to track and store trace sessions . A session is usually a user initiated query , and may <nl> @ @ - 80 , 6 + 80 , 9 @ @ public class Tracing <nl> <nl> private final ThreadLocal < TraceState > state = new ThreadLocal < TraceState > ( ) ; <nl> <nl> + / * * sessions that were initiated on this node * / <nl> + private final Map < UUID , TraceState > initiatedSessions = new ConcurrentHashMap < UUID , TraceState > ( ) ; <nl> + <nl> public static void addColumn ( ColumnFamily cf , ByteBuffer name , Object value ) <nl> { <nl> cf . addColumn ( new ExpiringColumn ( name , ByteBufferUtil . bytes ( value . toString ( ) ) , System . currentTimeMillis ( ) , TTL ) ) ; <nl> @ @ - 141 , 11 + 144 , 6 @ @ public class Tracing <nl> return instance ! = null & & instance . state . get ( ) ! = null ; <nl> } <nl> <nl> - public void reset ( ) <nl> - { <nl> - state . set ( null ) ; <nl> - } <nl> - <nl> public UUID newSession ( ) <nl> { <nl> return newSession ( TimeUUIDType . instance . compose ( ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( ) ) ) ) ; <nl> @ @ - 157 , 6 + 155 , 7 @ @ public class Tracing <nl> <nl> TraceState ts = new TraceState ( localAddress , sessionId ) ; <nl> state . set ( ts ) ; <nl> + initiatedSessions . put ( sessionId , ts ) ; <nl> <nl> return sessionId ; <nl> } <nl> @ @ - 187 , 7 + 186 , 8 @ @ public class Tracing <nl> } <nl> } ) ; <nl> <nl> - reset ( ) ; <nl> + initiatedSessions . remove ( state . sessionId ) ; <nl> + this . state . set ( null ) ; <nl> } <nl> } <nl> <nl> @ @ - 247 , 7 + 247 , 12 @ @ public class Tracing <nl> return ; <nl> } <nl> <nl> - checkState ( sessionBytes . length = = 16 ) ; <nl> - state . set ( new TraceState ( message . from , UUIDGen . getUUID ( ByteBuffer . wrap ( sessionBytes ) ) ) ) ; <nl> + assert sessionBytes . length = = 16 ; <nl> + <nl> + UUID sessionId = UUIDGen . getUUID ( ByteBuffer . wrap ( sessionBytes ) ) ; <nl> + TraceState ts = initiatedSessions . get ( sessionId ) ; <nl> + if ( ts = = null ) <nl> + ts = new TraceState ( message . from , sessionId ) ; <nl> + state . set ( ts ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / bin / cqlsh b / bin / cqlsh 
 index c99b98c . . 6be9b78 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 247 , 9 + 247 , 11 @ @ cqlsh _ extra _ syntax _ rules = r ' ' ' 
 | " THREE " 
 | " QUORUM " 
 | " ALL " 
 - | " LOCAL _ ONE " 
 | " LOCAL _ QUORUM " 
 | " EACH _ QUORUM " 
 + | " SERIAL " 
 + | " LOCAL _ SERIAL " 
 + | " LOCAL _ ONE " 
 ; 
 
 < showCommand > : : = " SHOW " what = ( " VERSION " | " HOST " | " SESSION " sessionid = < uuid > )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / tracing / Tracing . java b / src / java / org / apache / cassandra / tracing / Tracing . java 
 index 5e6b3d0 . . c158b10 100644 
 - - - a / src / java / org / apache / cassandra / tracing / Tracing . java 
 + + + b / src / java / org / apache / cassandra / tracing / Tracing . java 
 @ @ - 20 , 14 + 20 , 15 @ @ 
 * / 
 package org . apache . cassandra . tracing ; 
 
 - import static com . google . common . base . Preconditions . checkState ; 
 - import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; 
 - 
 import java . net . InetAddress ; 
 import java . nio . ByteBuffer ; 
 import java . util . Arrays ; 
 import java . util . Map ; 
 import java . util . UUID ; 
 + import java . util . concurrent . ConcurrentHashMap ; 
 + 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . concurrent . Stage ; 
 import org . apache . cassandra . concurrent . StageManager ; 
 @ @ - 48 , 8 + 49 , 7 @ @ import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 import org . apache . cassandra . utils . WrappedRunnable ; 
 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 + import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; 
 
 / * * 
 * A trace session context . Able to track and store trace sessions . A session is usually a user initiated query , and may 
 @ @ - 80 , 6 + 80 , 9 @ @ public class Tracing 
 
 private final ThreadLocal < TraceState > state = new ThreadLocal < TraceState > ( ) ; 
 
 + / * * sessions that were initiated on this node * / 
 + private final Map < UUID , TraceState > initiatedSessions = new ConcurrentHashMap < UUID , TraceState > ( ) ; 
 + 
 public static void addColumn ( ColumnFamily cf , ByteBuffer name , Object value ) 
 { 
 cf . addColumn ( new ExpiringColumn ( name , ByteBufferUtil . bytes ( value . toString ( ) ) , System . currentTimeMillis ( ) , TTL ) ) ; 
 @ @ - 141 , 11 + 144 , 6 @ @ public class Tracing 
 return instance ! = null & & instance . state . get ( ) ! = null ; 
 } 
 
 - public void reset ( ) 
 - { 
 - state . set ( null ) ; 
 - } 
 - 
 public UUID newSession ( ) 
 { 
 return newSession ( TimeUUIDType . instance . compose ( ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( ) ) ) ) ; 
 @ @ - 157 , 6 + 155 , 7 @ @ public class Tracing 
 
 TraceState ts = new TraceState ( localAddress , sessionId ) ; 
 state . set ( ts ) ; 
 + initiatedSessions . put ( sessionId , ts ) ; 
 
 return sessionId ; 
 } 
 @ @ - 187 , 7 + 186 , 8 @ @ public class Tracing 
 } 
 } ) ; 
 
 - reset ( ) ; 
 + initiatedSessions . remove ( state . sessionId ) ; 
 + this . state . set ( null ) ; 
 } 
 } 
 
 @ @ - 247 , 7 + 247 , 12 @ @ public class Tracing 
 return ; 
 } 
 
 - checkState ( sessionBytes . length = = 16 ) ; 
 - state . set ( new TraceState ( message . from , UUIDGen . getUUID ( ByteBuffer . wrap ( sessionBytes ) ) ) ) ; 
 + assert sessionBytes . length = = 16 ; 
 + 
 + UUID sessionId = UUIDGen . getUUID ( ByteBuffer . wrap ( sessionBytes ) ) ; 
 + TraceState ts = initiatedSessions . get ( sessionId ) ; 
 + if ( ts = = null ) 
 + ts = new TraceState ( message . from , sessionId ) ; 
 + state . set ( ts ) ; 
 } 
 }
