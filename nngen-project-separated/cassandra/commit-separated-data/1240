BLEU SCORE: 0.0167475178542289

TEST MSG: Expose phi values from failure detector via JMX
GENERATED MSG: improve testing of StorageService init , and fix shutdown of messagingservice .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0904559 . . 3eff22c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 2 . 2 . 4 <nl> + * Expose phi values from failure detector via JMX and tweak debug <nl> + and trace logging ( CASSANDRA - 9526 ) <nl> * Fix RangeNamesQueryPager ( CASSANDRA - 10509 ) <nl> * Deprecate Pig support ( CASSANDRA - 10542 ) <nl> * Reduce contention getting instances of CompositeType ( CASSANDRA - 10433 ) <nl> diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> index 861a853 . . c563872 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> @ @ - 22 , 10 + 22 , 13 @ @ import java . lang . management . ManagementFactory ; <nl> import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . * ; <nl> + import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . CopyOnWriteArrayList ; <nl> import java . util . concurrent . TimeUnit ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> + import javax . management . openmbean . CompositeData ; <nl> + import javax . management . openmbean . * ; <nl> <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 46 , 6 + 49 , 7 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> public static final String MBEAN _ NAME = " org . apache . cassandra . net : type = FailureDetector " ; <nl> private static final int SAMPLE _ SIZE = 1000 ; <nl> protected static final long INITIAL _ VALUE _ NANOS = TimeUnit . NANOSECONDS . convert ( getInitialValue ( ) , TimeUnit . MILLISECONDS ) ; <nl> + private static final int DEBUG _ PERCENTAGE = 80 ; / / if the phi is larger than this percentage of the max , log a debug message <nl> private static final long DEFAULT _ MAX _ PAUSE = 5000L * 1000000L ; / / 5 seconds <nl> private static final long MAX _ LOCAL _ PAUSE _ IN _ NANOS = getMaxLocalPause ( ) ; <nl> private long lastInterpret = System . nanoTime ( ) ; <nl> @ @ - 71 , 8 + 75 , 8 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> / / change . <nl> private final double PHI _ FACTOR = 1 . 0 / Math . log ( 10 . 0 ) ; / / 0 . 434 . . . <nl> <nl> - private final Map < InetAddress , ArrivalWindow > arrivalSamples = new Hashtable < InetAddress , ArrivalWindow > ( ) ; <nl> - private final List < IFailureDetectionEventListener > fdEvntListeners = new CopyOnWriteArrayList < IFailureDetectionEventListener > ( ) ; <nl> + private final ConcurrentHashMap < InetAddress , ArrivalWindow > arrivalSamples = new ConcurrentHashMap < > ( ) ; <nl> + private final List < IFailureDetectionEventListener > fdEvntListeners = new CopyOnWriteArrayList < > ( ) ; <nl> <nl> public FailureDetector ( ) <nl> { <nl> @ @ - 148 , 6 + 152 , 34 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> return count ; <nl> } <nl> <nl> + @ Override <nl> + public TabularData getPhiValues ( ) throws OpenDataException <nl> + { <nl> + final CompositeType ct = new CompositeType ( " Node " , " Node " , <nl> + new String [ ] { " Endpoint " , " PHI " } , <nl> + new String [ ] { " IP of the endpoint " , " PHI value " } , <nl> + new OpenType [ ] { SimpleType . STRING , SimpleType . DOUBLE } ) ; <nl> + final TabularDataSupport results = new TabularDataSupport ( new TabularType ( " PhiList " , " PhiList " , ct , new String [ ] { " Endpoint " } ) ) ; <nl> + <nl> + for ( final Map . Entry < InetAddress , ArrivalWindow > entry : arrivalSamples . entrySet ( ) ) <nl> + { <nl> + final ArrivalWindow window = entry . getValue ( ) ; <nl> + if ( window . mean ( ) > 0 ) <nl> + { <nl> + final double phi = window . getLastReportedPhi ( ) ; <nl> + if ( phi ! = Double . MIN _ VALUE ) <nl> + { <nl> + / / returned values are scaled by PHI _ FACTOR so that the are on the same scale as PhiConvictThreshold <nl> + final CompositeData data = new CompositeDataSupport ( ct , <nl> + new String [ ] { " Endpoint " , " PHI " } , <nl> + new Object [ ] { entry . getKey ( ) . toString ( ) , phi * PHI _ FACTOR } ) ; <nl> + results . put ( data ) ; <nl> + } <nl> + } <nl> + } <nl> + return results ; <nl> + } <nl> + <nl> public String getEndpointState ( String address ) throws UnknownHostException <nl> { <nl> StringBuilder sb = new StringBuilder ( ) ; <nl> @ @ - 219 , 8 + 251 , 6 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> <nl> public void report ( InetAddress ep ) <nl> { <nl> - if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " reporting { } " , ep ) ; <nl> long now = System . nanoTime ( ) ; <nl> ArrivalWindow heartbeatWindow = arrivalSamples . get ( ep ) ; <nl> if ( heartbeatWindow = = null ) <nl> @ @ - 228 , 12 + 258 , 17 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> / / avoid adding an empty ArrivalWindow to the Map <nl> heartbeatWindow = new ArrivalWindow ( SAMPLE _ SIZE ) ; <nl> heartbeatWindow . add ( now , ep ) ; <nl> - arrivalSamples . put ( ep , heartbeatWindow ) ; <nl> + heartbeatWindow = arrivalSamples . putIfAbsent ( ep , heartbeatWindow ) ; <nl> + if ( heartbeatWindow ! = null ) <nl> + heartbeatWindow . add ( now , ep ) ; <nl> } <nl> else <nl> { <nl> heartbeatWindow . add ( now , ep ) ; <nl> } <nl> + <nl> + if ( logger . isTraceEnabled ( ) & & heartbeatWindow ! = null ) <nl> + logger . info ( " Average for { } is { } " , ep , heartbeatWindow . mean ( ) ) ; <nl> } <nl> <nl> public void interpret ( InetAddress ep ) <nl> @ @ - 263 , 13 + 298 , 22 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> <nl> if ( PHI _ FACTOR * phi > getPhiConvictThreshold ( ) ) <nl> { <nl> - logger . trace ( " notifying listeners that { } is down " , ep ) ; <nl> - logger . trace ( " intervals : { } mean : { } " , hbWnd , hbWnd . mean ( ) ) ; <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " Node { } phi { } > { } ; intervals : { } mean : { } " , new Object [ ] { ep , PHI _ FACTOR * phi , getPhiConvictThreshold ( ) , hbWnd , hbWnd . mean ( ) } ) ; <nl> for ( IFailureDetectionEventListener listener : fdEvntListeners ) <nl> { <nl> listener . convict ( ep , phi ) ; <nl> } <nl> } <nl> + else if ( logger . isDebugEnabled ( ) & & ( PHI _ FACTOR * phi * DEBUG _ PERCENTAGE / 100 . 0 > getPhiConvictThreshold ( ) ) ) <nl> + { <nl> + logger . debug ( " PHI for { } : { } " , ep , phi ) ; <nl> + } <nl> + else if ( logger . isTraceEnabled ( ) ) <nl> + { <nl> + logger . trace ( " PHI for { } : { } " , ep , phi ) ; <nl> + logger . trace ( " mean for { } : { } " , ep , hbWnd . mean ( ) ) ; <nl> + } <nl> } <nl> <nl> public void forceConviction ( InetAddress ep ) <nl> @ @ - 312 , 10 + 356 , 6 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> sb . append ( " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " ) ; <nl> return sb . toString ( ) ; <nl> } <nl> - <nl> - public static void main ( String [ ] args ) <nl> - { <nl> - } <nl> } <nl> <nl> / * <nl> @ @ - 372 , 12 + 412 , 7 @ @ class ArrivalWindow <nl> private static final Logger logger = LoggerFactory . getLogger ( ArrivalWindow . class ) ; <nl> private long tLast = 0L ; <nl> private final ArrayBackedBoundedStats arrivalIntervals ; <nl> - <nl> - / / this is useless except to provide backwards compatibility in phi _ convict _ threshold , <nl> - / / because everyone seems pretty accustomed to the default of 8 , and users who have <nl> - / / already tuned their phi _ convict _ threshold for their own environments won ' t need to <nl> - / / change . <nl> - private final double PHI _ FACTOR = 1 . 0 / Math . log ( 10 . 0 ) ; <nl> + private double lastReportedPhi = Double . MIN _ VALUE ; <nl> <nl> / / in the event of a long partition , never record an interval longer than the rpc timeout , <nl> / / since if a host is regularly experiencing connectivity problems lasting this long we ' d <nl> @ @ - 411 , 9 + 446 , 14 @ @ class ArrivalWindow <nl> { <nl> long interArrivalTime = ( value - tLast ) ; <nl> if ( interArrivalTime < = MAX _ INTERVAL _ IN _ NANO ) <nl> + { <nl> arrivalIntervals . add ( interArrivalTime ) ; <nl> + logger . trace ( " Reporting interval time of { } for { } " , interArrivalTime , ep ) ; <nl> + } <nl> else <nl> + { <nl> logger . debug ( " Ignoring interval time of { } for { } " , interArrivalTime , ep ) ; <nl> + } <nl> } <nl> else <nl> { <nl> @ @ - 435 , 7 + 475 , 13 @ @ class ArrivalWindow <nl> { <nl> assert arrivalIntervals . mean ( ) > 0 & & tLast > 0 ; / / should not be called before any samples arrive <nl> long t = tnow - tLast ; <nl> - return t / mean ( ) ; <nl> + lastReportedPhi = t / mean ( ) ; <nl> + return lastReportedPhi ; <nl> + } <nl> + <nl> + double getLastReportedPhi ( ) <nl> + { <nl> + return lastReportedPhi ; <nl> } <nl> <nl> public String toString ( ) <nl> diff - - git a / src / java / org / apache / cassandra / gms / FailureDetectorMBean . java b / src / java / org / apache / cassandra / gms / FailureDetectorMBean . java <nl> index 45250b4 . . 23fae3a 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / FailureDetectorMBean . java <nl> + + + b / src / java / org / apache / cassandra / gms / FailureDetectorMBean . java <nl> @ @ - 20 , 6 + 20 , 9 @ @ package org . apache . cassandra . gms ; <nl> import java . net . UnknownHostException ; <nl> import java . util . Map ; <nl> <nl> + import javax . management . openmbean . OpenDataException ; <nl> + import javax . management . openmbean . TabularData ; <nl> + <nl> public interface FailureDetectorMBean <nl> { <nl> public void dumpInterArrivalTimes ( ) ; <nl> @ @ - 37 , 4 + 40 , 6 @ @ public interface FailureDetectorMBean <nl> public int getDownEndpointCount ( ) ; <nl> <nl> public int getUpEndpointCount ( ) ; <nl> + <nl> + public TabularData getPhiValues ( ) throws OpenDataException ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index da403ab . . 62795b5 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 27 , 7 + 27 , 6 @ @ import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . rmi . server . RMIClientSocketFactory ; <nl> import java . rmi . server . RMISocketFactory ; <nl> - import java . text . SimpleDateFormat ; <nl> import java . util . AbstractMap ; <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> @ @ - 522 , 7 + 521 , 7 @ @ public class NodeProbe implements AutoCloseable <nl> <nl> / * * <nl> * Take a snapshot of all column family from different keyspaces . <nl> - * <nl> + * <nl> * @ param snapshotName <nl> * the name of the snapshot . <nl> * @ param columnFamilyList <nl> @ @ - 1277 , 6 + 1276 , 18 @ @ public class NodeProbe implements AutoCloseable <nl> } <nl> } <nl> } <nl> + <nl> + public TabularData getFailureDetectorPhilValues ( ) <nl> + { <nl> + try <nl> + { <nl> + return fdProxy . getPhiValues ( ) ; <nl> + } <nl> + catch ( OpenDataException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> } <nl> <nl> class ColumnFamilyStoreMBeanIterator implements Iterator < Map . Entry < String , ColumnFamilyStoreMBean > > <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> index da3560d . . 175b325 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeTool . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> @ @ - 129 , 7 + 129 , 8 @ @ public class NodeTool <nl> TpStats . class , <nl> TopPartitions . class , <nl> SetLoggingLevel . class , <nl> - GetLoggingLevels . class <nl> + GetLoggingLevels . class , <nl> + FailureDetectorInfo . class <nl> ) ; <nl> <nl> Cli . CliBuilder < Runnable > builder = Cli . builder ( " nodetool " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / FailureDetectorInfo . java b / src / java / org / apache / cassandra / tools / nodetool / FailureDetectorInfo . java <nl> new file mode 100644 <nl> index 0000000 . . 72c109a <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / FailureDetectorInfo . java <nl> @ @ - 0 , 0 + 1 , 46 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . tools . nodetool ; <nl> + <nl> + import io . airlift . command . Command ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import javax . management . openmbean . CompositeData ; <nl> + import javax . management . openmbean . TabularData ; <nl> + <nl> + import org . apache . cassandra . tools . NodeProbe ; <nl> + import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; <nl> + <nl> + @ Command ( name = " failuredetector " , description = " Shows the failure detector information for the cluster " ) <nl> + public class FailureDetectorInfo extends NodeToolCmd <nl> + { <nl> + @ Override <nl> + public void execute ( NodeProbe probe ) <nl> + { <nl> + TabularData data = probe . getFailureDetectorPhilValues ( ) ; <nl> + System . out . printf ( " % 10s , % 16s \ n " , " Endpoint " , " Phi " ) ; <nl> + for ( Object o : data . keySet ( ) ) <nl> + { <nl> + @ SuppressWarnings ( { " rawtypes " , " unchecked " } ) <nl> + CompositeData datum = data . get ( ( ( List ) o ) . toArray ( new Object [ ( ( List ) o ) . size ( ) ] ) ) ; <nl> + System . out . printf ( " % 10s , % 16 . 8f \ n " , datum . get ( " Endpoint " ) , datum . get ( " PHI " ) ) ; <nl> + } <nl> + } <nl> + } <nl> +
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> index 1f235df . . 25e1072 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra . concurrent ; <nl> <nl> import java . lang . management . ManagementFactory ; <nl> + import java . util . List ; <nl> import java . util . concurrent . * ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . log4j . Logger ; <nl> public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean <nl> { <nl> private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; <nl> + private final String mbeanName ; <nl> <nl> public DebuggableThreadPoolExecutor ( String threadPoolName ) <nl> { <nl> @ @ - 51 , 9 + 53 , 10 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> super . prestartAllCoreThreads ( ) ; <nl> <nl> MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + mbeanName = " org . apache . cassandra . concurrent : type = " + threadFactory . id ; <nl> try <nl> { <nl> - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id ) ) ; <nl> + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 84 , 6 + 87 , 33 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> } <nl> } <nl> <nl> + private void unregisterMBean ( ) <nl> + { <nl> + try <nl> + { <nl> + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; <nl> + } <nl> + catch ( Exception ex ) <nl> + { <nl> + / / don ' t let it get in the way , but notify . <nl> + logger _ . error ( ex . getMessage ( ) , ex ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void shutdown ( ) <nl> + { <nl> + unregisterMBean ( ) ; <nl> + super . shutdown ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < Runnable > shutdownNow ( ) <nl> + { <nl> + unregisterMBean ( ) ; <nl> + return super . shutdownNow ( ) ; <nl> + } <nl> + <nl> / * * <nl> * Get the number of completed tasks <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 3b70d17 . . f5d8d35 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 122 , 7 + 122 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> return gossiper _ ; <nl> } <nl> <nl> - private Timer gossipTimer _ = new Timer ( false ) ; <nl> + private Timer gossipTimer _ ; <nl> private InetAddress localEndPoint _ ; <nl> private long aVeryLongTime _ ; <nl> private Random random _ = new Random ( ) ; <nl> @ @ - 144 , 6 + 144 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> <nl> private Gossiper ( ) <nl> { <nl> + gossipTimer _ = new Timer ( false ) ; <nl> aVeryLongTime _ = 259200 * 1000 ; <nl> / * register with the Failure Detector for receiving Failure detector events * / <nl> FailureDetector . instance ( ) . registerFailureDetectionEventListener ( this ) ; <nl> @ @ - 834 , 6 + 835 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> public void stop ( ) <nl> { <nl> gossipTimer _ . cancel ( ) ; <nl> + gossipTimer _ = new Timer ( false ) ; / / makes the Gossiper reentrant . <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 8ff93f6 . . b1ad5ed 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 69 , 6 + 69 , 9 @ @ public class MessagingService <nl> <nl> / * List of sockets we are listening on * / <nl> private static Map < InetAddress , SelectionKey > listenSockets _ = new HashMap < InetAddress , SelectionKey > ( ) ; <nl> + <nl> + / * List of UdpConnections we are listening on * / <nl> + private static Map < InetAddress , UdpConnection > udpConnections _ = new HashMap < InetAddress , UdpConnection > ( ) ; <nl> <nl> / * Lookup table for registering message handlers based on the verb . * / <nl> private static Map < String , IVerbHandler > verbHandlers _ ; <nl> @ @ - 214 , 7 + 217 , 8 @ @ public class MessagingService <nl> try <nl> { <nl> connection . init ( localEp ) ; <nl> - endPoints _ . add ( localEp ) ; <nl> + endPoints _ . add ( localEp ) ; <nl> + udpConnections _ . put ( localEp , connection ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> @ @ - 497 , 7 + 501 , 7 @ @ public class MessagingService <nl> logger _ . info ( " Shutting down . . . " ) ; <nl> synchronized ( MessagingService . class ) <nl> { <nl> - / * Stop listening on any socket * / <nl> + / * Stop listening on any TCP socket * / <nl> for ( SelectionKey skey : listenSockets _ . values ( ) ) <nl> { <nl> skey . cancel ( ) ; <nl> @ @ - 509 , 6 + 513 , 13 @ @ public class MessagingService <nl> } <nl> listenSockets _ . clear ( ) ; <nl> <nl> + / * Stop listening on any UDP ports . * / <nl> + for ( UdpConnection con : udpConnections _ . values ( ) ) <nl> + { <nl> + con . close ( ) ; <nl> + } <nl> + udpConnections _ . clear ( ) ; <nl> + <nl> / * Shutdown the threads in the EventQueue ' s * / <nl> messageDeserializationExecutor _ . shutdownNow ( ) ; <nl> messageDeserializerExecutor _ . shutdownNow ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / net / SelectorManager . java b / src / java / org / apache / cassandra / net / SelectorManager . java <nl> index 7623a05 . . 16511ee 100644 <nl> - - - a / src / java / org / apache / cassandra / net / SelectorManager . java <nl> + + + b / src / java / org / apache / cassandra / net / SelectorManager . java <nl> @ @ - 35 , 6 + 35 , 9 @ @ public class SelectorManager extends Thread <nl> / / workaround JDK select / register bug <nl> Object gate = new Object ( ) ; <nl> <nl> + / / flag to indicate that shutdown has been requested . <nl> + private boolean shutdownRequested = false ; <nl> + <nl> / / The static selector manager which is used by all applications <nl> private static SelectorManager manager ; <nl> <nl> @ @ - 82 , 7 + 85 , 13 @ @ public class SelectorManager extends Thread <nl> selector . wakeup ( ) ; <nl> return channel . register ( selector , ops , handler ) ; <nl> } <nl> - } <nl> + } <nl> + <nl> + / / requests the thread to shutdown . However , it brings no guarantees . Added for testing . <nl> + private void requestShutdown ( ) <nl> + { <nl> + shutdownRequested = true ; <nl> + } <nl> <nl> / * * <nl> * This method starts the socket manager listening for events . It is <nl> @ @ - 102 , 6 + 111 , 11 @ @ public class SelectorManager extends Thread <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> + if ( shutdownRequested ) <nl> + { <nl> + shutdownRequested = false ; <nl> + break ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 145 , 6 + 159 , 22 @ @ public class SelectorManager extends Thread <nl> } <nl> <nl> / * * <nl> + * Intended to reset the singleton as part of testing . <nl> + * / <nl> + static void reset ( ) <nl> + { <nl> + synchronized ( SelectorManager . class ) <nl> + { <nl> + if ( manager ! = null ) <nl> + manager . requestShutdown ( ) ; <nl> + manager = null ; <nl> + if ( udpManager ! = null ) <nl> + udpManager . requestShutdown ( ) ; <nl> + udpManager = null ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Returns the SelectorManager applications should use . <nl> * <nl> * @ return The SelectorManager which applications should use <nl> diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> index 969a2cd . . e3cde8d 100644 <nl> - - - a / test / unit / org / apache / cassandra / CleanupHelper . java <nl> + + + b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . BeforeClass ; <nl> <nl> @ @ - 30 , 6 + 31 , 13 @ @ public class CleanupHelper <nl> private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; <nl> <nl> @ BeforeClass <nl> + public static void cleanupAndLeaveDirs ( ) <nl> + { <nl> + mkdirs ( ) ; <nl> + cleanup ( ) ; <nl> + mkdirs ( ) ; <nl> + } <nl> + <nl> public static void cleanup ( ) <nl> { <nl> / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) <nl> @ @ - 38 , 6 + 46 , 10 @ @ public class CleanupHelper <nl> DatabaseDescriptor . getLogFileLocation ( ) , <nl> } ; <nl> <nl> + / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process <nl> + / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally <nl> + / / put there . <nl> + <nl> for ( String dirName : directoryNames ) <nl> { <nl> File dir = new File ( dirName ) ; <nl> @ @ - 47 , 11 + 59 , 15 @ @ public class CleanupHelper <nl> } <nl> for ( File f : dir . listFiles ( ) ) <nl> { <nl> - if ( ! f . delete ( ) ) { <nl> + if ( ! f . delete ( ) ) <nl> + { <nl> logger . error ( " could not delete " + f ) ; <nl> + } <nl> } <nl> + <nl> + if ( ! dir . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> - } <nl> <nl> / / cleanup data directory which are stored as data directory / table / data files <nl> for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> @ @ - 71 , 8 + 87 , 24 @ @ public class CleanupHelper <nl> } <nl> } <nl> } <nl> + if ( ! tableFile . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> + <nl> + if ( ! dir . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> + } <nl> <nl> + public static void mkdirs ( ) <nl> + { <nl> + try <nl> + { <nl> + DatabaseDescriptor . createAllDirectories ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / net / NetPackageAccessor . java b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java <nl> new file mode 100644 <nl> index 0000000 . . 408bfba <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java <nl> @ @ - 0 , 0 + 1 , 29 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . net ; <nl> + <nl> + / * * <nl> + For accesing package - level members created for the sole purpose of testing . <nl> + * / <nl> + public class NetPackageAccessor <nl> + { <nl> + public static void resetSelectorManager ( ) <nl> + { <nl> + SelectorManager . reset ( ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceTest . java b / test / unit / org / apache / cassandra / service / StorageServiceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0ec9ffe <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / service / StorageServiceTest . java <nl> @ @ - 0 , 0 + 1 , 68 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import org . apache . cassandra . CleanupHelper ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . net . NetPackageAccessor ; <nl> + import org . junit . Test ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + public class StorageServiceTest <nl> + { <nl> + @ Test <nl> + public void testClientOnlyMode ( ) throws IOException <nl> + { <nl> + CleanupHelper . mkdirs ( ) ; <nl> + CleanupHelper . cleanup ( ) ; <nl> + StorageService . instance ( ) . initClient ( ) ; <nl> + <nl> + / / verify that no storage directories were created . <nl> + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> + { <nl> + assertFalse ( new File ( path ) . exists ( ) ) ; <nl> + } <nl> + StorageService . instance ( ) . stopClient ( ) ; <nl> + NetPackageAccessor . resetSelectorManager ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegularMode ( ) throws IOException , InterruptedException <nl> + { <nl> + CleanupHelper . mkdirs ( ) ; <nl> + CleanupHelper . cleanup ( ) ; <nl> + StorageService . instance ( ) . initServer ( ) ; <nl> + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> + { <nl> + / / verify that storage directories are there . <nl> + assertTrue ( new File ( path ) . exists ( ) ) ; <nl> + } <nl> + / / a proper test would be to call decommission here , but decommission ( ) mixes both shutdown and datatransfer <nl> + / / calls . This test is only interested in the shutdown - related items which a properly handled by just <nl> + / / stopping the client . <nl> + / / StorageService . instance ( ) . decommission ( ) ; <nl> + StorageService . instance ( ) . stopClient ( ) ; <nl> + NetPackageAccessor . resetSelectorManager ( ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0904559 . . 3eff22c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 2 . 2 . 4 
 + * Expose phi values from failure detector via JMX and tweak debug 
 + and trace logging ( CASSANDRA - 9526 ) 
 * Fix RangeNamesQueryPager ( CASSANDRA - 10509 ) 
 * Deprecate Pig support ( CASSANDRA - 10542 ) 
 * Reduce contention getting instances of CompositeType ( CASSANDRA - 10433 ) 
 diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 index 861a853 . . c563872 100644 
 - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java 
 + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 @ @ - 22 , 10 + 22 , 13 @ @ import java . lang . management . ManagementFactory ; 
 import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . * ; 
 + import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . concurrent . CopyOnWriteArrayList ; 
 import java . util . concurrent . TimeUnit ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 + import javax . management . openmbean . CompositeData ; 
 + import javax . management . openmbean . * ; 
 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 46 , 6 + 49 , 7 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 public static final String MBEAN _ NAME = " org . apache . cassandra . net : type = FailureDetector " ; 
 private static final int SAMPLE _ SIZE = 1000 ; 
 protected static final long INITIAL _ VALUE _ NANOS = TimeUnit . NANOSECONDS . convert ( getInitialValue ( ) , TimeUnit . MILLISECONDS ) ; 
 + private static final int DEBUG _ PERCENTAGE = 80 ; / / if the phi is larger than this percentage of the max , log a debug message 
 private static final long DEFAULT _ MAX _ PAUSE = 5000L * 1000000L ; / / 5 seconds 
 private static final long MAX _ LOCAL _ PAUSE _ IN _ NANOS = getMaxLocalPause ( ) ; 
 private long lastInterpret = System . nanoTime ( ) ; 
 @ @ - 71 , 8 + 75 , 8 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 / / change . 
 private final double PHI _ FACTOR = 1 . 0 / Math . log ( 10 . 0 ) ; / / 0 . 434 . . . 
 
 - private final Map < InetAddress , ArrivalWindow > arrivalSamples = new Hashtable < InetAddress , ArrivalWindow > ( ) ; 
 - private final List < IFailureDetectionEventListener > fdEvntListeners = new CopyOnWriteArrayList < IFailureDetectionEventListener > ( ) ; 
 + private final ConcurrentHashMap < InetAddress , ArrivalWindow > arrivalSamples = new ConcurrentHashMap < > ( ) ; 
 + private final List < IFailureDetectionEventListener > fdEvntListeners = new CopyOnWriteArrayList < > ( ) ; 
 
 public FailureDetector ( ) 
 { 
 @ @ - 148 , 6 + 152 , 34 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 return count ; 
 } 
 
 + @ Override 
 + public TabularData getPhiValues ( ) throws OpenDataException 
 + { 
 + final CompositeType ct = new CompositeType ( " Node " , " Node " , 
 + new String [ ] { " Endpoint " , " PHI " } , 
 + new String [ ] { " IP of the endpoint " , " PHI value " } , 
 + new OpenType [ ] { SimpleType . STRING , SimpleType . DOUBLE } ) ; 
 + final TabularDataSupport results = new TabularDataSupport ( new TabularType ( " PhiList " , " PhiList " , ct , new String [ ] { " Endpoint " } ) ) ; 
 + 
 + for ( final Map . Entry < InetAddress , ArrivalWindow > entry : arrivalSamples . entrySet ( ) ) 
 + { 
 + final ArrivalWindow window = entry . getValue ( ) ; 
 + if ( window . mean ( ) > 0 ) 
 + { 
 + final double phi = window . getLastReportedPhi ( ) ; 
 + if ( phi ! = Double . MIN _ VALUE ) 
 + { 
 + / / returned values are scaled by PHI _ FACTOR so that the are on the same scale as PhiConvictThreshold 
 + final CompositeData data = new CompositeDataSupport ( ct , 
 + new String [ ] { " Endpoint " , " PHI " } , 
 + new Object [ ] { entry . getKey ( ) . toString ( ) , phi * PHI _ FACTOR } ) ; 
 + results . put ( data ) ; 
 + } 
 + } 
 + } 
 + return results ; 
 + } 
 + 
 public String getEndpointState ( String address ) throws UnknownHostException 
 { 
 StringBuilder sb = new StringBuilder ( ) ; 
 @ @ - 219 , 8 + 251 , 6 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 
 public void report ( InetAddress ep ) 
 { 
 - if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " reporting { } " , ep ) ; 
 long now = System . nanoTime ( ) ; 
 ArrivalWindow heartbeatWindow = arrivalSamples . get ( ep ) ; 
 if ( heartbeatWindow = = null ) 
 @ @ - 228 , 12 + 258 , 17 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 / / avoid adding an empty ArrivalWindow to the Map 
 heartbeatWindow = new ArrivalWindow ( SAMPLE _ SIZE ) ; 
 heartbeatWindow . add ( now , ep ) ; 
 - arrivalSamples . put ( ep , heartbeatWindow ) ; 
 + heartbeatWindow = arrivalSamples . putIfAbsent ( ep , heartbeatWindow ) ; 
 + if ( heartbeatWindow ! = null ) 
 + heartbeatWindow . add ( now , ep ) ; 
 } 
 else 
 { 
 heartbeatWindow . add ( now , ep ) ; 
 } 
 + 
 + if ( logger . isTraceEnabled ( ) & & heartbeatWindow ! = null ) 
 + logger . info ( " Average for { } is { } " , ep , heartbeatWindow . mean ( ) ) ; 
 } 
 
 public void interpret ( InetAddress ep ) 
 @ @ - 263 , 13 + 298 , 22 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 
 if ( PHI _ FACTOR * phi > getPhiConvictThreshold ( ) ) 
 { 
 - logger . trace ( " notifying listeners that { } is down " , ep ) ; 
 - logger . trace ( " intervals : { } mean : { } " , hbWnd , hbWnd . mean ( ) ) ; 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " Node { } phi { } > { } ; intervals : { } mean : { } " , new Object [ ] { ep , PHI _ FACTOR * phi , getPhiConvictThreshold ( ) , hbWnd , hbWnd . mean ( ) } ) ; 
 for ( IFailureDetectionEventListener listener : fdEvntListeners ) 
 { 
 listener . convict ( ep , phi ) ; 
 } 
 } 
 + else if ( logger . isDebugEnabled ( ) & & ( PHI _ FACTOR * phi * DEBUG _ PERCENTAGE / 100 . 0 > getPhiConvictThreshold ( ) ) ) 
 + { 
 + logger . debug ( " PHI for { } : { } " , ep , phi ) ; 
 + } 
 + else if ( logger . isTraceEnabled ( ) ) 
 + { 
 + logger . trace ( " PHI for { } : { } " , ep , phi ) ; 
 + logger . trace ( " mean for { } : { } " , ep , hbWnd . mean ( ) ) ; 
 + } 
 } 
 
 public void forceConviction ( InetAddress ep ) 
 @ @ - 312 , 10 + 356 , 6 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 sb . append ( " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " ) ; 
 return sb . toString ( ) ; 
 } 
 - 
 - public static void main ( String [ ] args ) 
 - { 
 - } 
 } 
 
 / * 
 @ @ - 372 , 12 + 412 , 7 @ @ class ArrivalWindow 
 private static final Logger logger = LoggerFactory . getLogger ( ArrivalWindow . class ) ; 
 private long tLast = 0L ; 
 private final ArrayBackedBoundedStats arrivalIntervals ; 
 - 
 - / / this is useless except to provide backwards compatibility in phi _ convict _ threshold , 
 - / / because everyone seems pretty accustomed to the default of 8 , and users who have 
 - / / already tuned their phi _ convict _ threshold for their own environments won ' t need to 
 - / / change . 
 - private final double PHI _ FACTOR = 1 . 0 / Math . log ( 10 . 0 ) ; 
 + private double lastReportedPhi = Double . MIN _ VALUE ; 
 
 / / in the event of a long partition , never record an interval longer than the rpc timeout , 
 / / since if a host is regularly experiencing connectivity problems lasting this long we ' d 
 @ @ - 411 , 9 + 446 , 14 @ @ class ArrivalWindow 
 { 
 long interArrivalTime = ( value - tLast ) ; 
 if ( interArrivalTime < = MAX _ INTERVAL _ IN _ NANO ) 
 + { 
 arrivalIntervals . add ( interArrivalTime ) ; 
 + logger . trace ( " Reporting interval time of { } for { } " , interArrivalTime , ep ) ; 
 + } 
 else 
 + { 
 logger . debug ( " Ignoring interval time of { } for { } " , interArrivalTime , ep ) ; 
 + } 
 } 
 else 
 { 
 @ @ - 435 , 7 + 475 , 13 @ @ class ArrivalWindow 
 { 
 assert arrivalIntervals . mean ( ) > 0 & & tLast > 0 ; / / should not be called before any samples arrive 
 long t = tnow - tLast ; 
 - return t / mean ( ) ; 
 + lastReportedPhi = t / mean ( ) ; 
 + return lastReportedPhi ; 
 + } 
 + 
 + double getLastReportedPhi ( ) 
 + { 
 + return lastReportedPhi ; 
 } 
 
 public String toString ( ) 
 diff - - git a / src / java / org / apache / cassandra / gms / FailureDetectorMBean . java b / src / java / org / apache / cassandra / gms / FailureDetectorMBean . java 
 index 45250b4 . . 23fae3a 100644 
 - - - a / src / java / org / apache / cassandra / gms / FailureDetectorMBean . java 
 + + + b / src / java / org / apache / cassandra / gms / FailureDetectorMBean . java 
 @ @ - 20 , 6 + 20 , 9 @ @ package org . apache . cassandra . gms ; 
 import java . net . UnknownHostException ; 
 import java . util . Map ; 
 
 + import javax . management . openmbean . OpenDataException ; 
 + import javax . management . openmbean . TabularData ; 
 + 
 public interface FailureDetectorMBean 
 { 
 public void dumpInterArrivalTimes ( ) ; 
 @ @ - 37 , 4 + 40 , 6 @ @ public interface FailureDetectorMBean 
 public int getDownEndpointCount ( ) ; 
 
 public int getUpEndpointCount ( ) ; 
 + 
 + public TabularData getPhiValues ( ) throws OpenDataException ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index da403ab . . 62795b5 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 27 , 7 + 27 , 6 @ @ import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . rmi . server . RMIClientSocketFactory ; 
 import java . rmi . server . RMISocketFactory ; 
 - import java . text . SimpleDateFormat ; 
 import java . util . AbstractMap ; 
 import java . util . ArrayList ; 
 import java . util . Collections ; 
 @ @ - 522 , 7 + 521 , 7 @ @ public class NodeProbe implements AutoCloseable 
 
 / * * 
 * Take a snapshot of all column family from different keyspaces . 
 - * 
 + * 
 * @ param snapshotName 
 * the name of the snapshot . 
 * @ param columnFamilyList 
 @ @ - 1277 , 6 + 1276 , 18 @ @ public class NodeProbe implements AutoCloseable 
 } 
 } 
 } 
 + 
 + public TabularData getFailureDetectorPhilValues ( ) 
 + { 
 + try 
 + { 
 + return fdProxy . getPhiValues ( ) ; 
 + } 
 + catch ( OpenDataException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 } 
 
 class ColumnFamilyStoreMBeanIterator implements Iterator < Map . Entry < String , ColumnFamilyStoreMBean > > 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java 
 index da3560d . . 175b325 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeTool . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeTool . java 
 @ @ - 129 , 7 + 129 , 8 @ @ public class NodeTool 
 TpStats . class , 
 TopPartitions . class , 
 SetLoggingLevel . class , 
 - GetLoggingLevels . class 
 + GetLoggingLevels . class , 
 + FailureDetectorInfo . class 
 ) ; 
 
 Cli . CliBuilder < Runnable > builder = Cli . builder ( " nodetool " ) ; 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / FailureDetectorInfo . java b / src / java / org / apache / cassandra / tools / nodetool / FailureDetectorInfo . java 
 new file mode 100644 
 index 0000000 . . 72c109a 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / FailureDetectorInfo . java 
 @ @ - 0 , 0 + 1 , 46 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . tools . nodetool ; 
 + 
 + import io . airlift . command . Command ; 
 + 
 + import java . util . List ; 
 + 
 + import javax . management . openmbean . CompositeData ; 
 + import javax . management . openmbean . TabularData ; 
 + 
 + import org . apache . cassandra . tools . NodeProbe ; 
 + import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; 
 + 
 + @ Command ( name = " failuredetector " , description = " Shows the failure detector information for the cluster " ) 
 + public class FailureDetectorInfo extends NodeToolCmd 
 + { 
 + @ Override 
 + public void execute ( NodeProbe probe ) 
 + { 
 + TabularData data = probe . getFailureDetectorPhilValues ( ) ; 
 + System . out . printf ( " % 10s , % 16s \ n " , " Endpoint " , " Phi " ) ; 
 + for ( Object o : data . keySet ( ) ) 
 + { 
 + @ SuppressWarnings ( { " rawtypes " , " unchecked " } ) 
 + CompositeData datum = data . get ( ( ( List ) o ) . toArray ( new Object [ ( ( List ) o ) . size ( ) ] ) ) ; 
 + System . out . printf ( " % 10s , % 16 . 8f \ n " , datum . get ( " Endpoint " ) , datum . get ( " PHI " ) ) ; 
 + } 
 + } 
 + } 
 +

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 index 1f235df . . 25e1072 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra . concurrent ; 
 
 import java . lang . management . ManagementFactory ; 
 + import java . util . List ; 
 import java . util . concurrent . * ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . log4j . Logger ; 
 public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean 
 { 
 private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; 
 + private final String mbeanName ; 
 
 public DebuggableThreadPoolExecutor ( String threadPoolName ) 
 { 
 @ @ - 51 , 9 + 53 , 10 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 super . prestartAllCoreThreads ( ) ; 
 
 MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + mbeanName = " org . apache . cassandra . concurrent : type = " + threadFactory . id ; 
 try 
 { 
 - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id ) ) ; 
 + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 84 , 6 + 87 , 33 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 } 
 } 
 
 + private void unregisterMBean ( ) 
 + { 
 + try 
 + { 
 + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; 
 + } 
 + catch ( Exception ex ) 
 + { 
 + / / don ' t let it get in the way , but notify . 
 + logger _ . error ( ex . getMessage ( ) , ex ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void shutdown ( ) 
 + { 
 + unregisterMBean ( ) ; 
 + super . shutdown ( ) ; 
 + } 
 + 
 + @ Override 
 + public List < Runnable > shutdownNow ( ) 
 + { 
 + unregisterMBean ( ) ; 
 + return super . shutdownNow ( ) ; 
 + } 
 + 
 / * * 
 * Get the number of completed tasks 
 * / 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 3b70d17 . . f5d8d35 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 122 , 7 + 122 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 return gossiper _ ; 
 } 
 
 - private Timer gossipTimer _ = new Timer ( false ) ; 
 + private Timer gossipTimer _ ; 
 private InetAddress localEndPoint _ ; 
 private long aVeryLongTime _ ; 
 private Random random _ = new Random ( ) ; 
 @ @ - 144 , 6 + 144 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 
 private Gossiper ( ) 
 { 
 + gossipTimer _ = new Timer ( false ) ; 
 aVeryLongTime _ = 259200 * 1000 ; 
 / * register with the Failure Detector for receiving Failure detector events * / 
 FailureDetector . instance ( ) . registerFailureDetectionEventListener ( this ) ; 
 @ @ - 834 , 6 + 835 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 public void stop ( ) 
 { 
 gossipTimer _ . cancel ( ) ; 
 + gossipTimer _ = new Timer ( false ) ; / / makes the Gossiper reentrant . 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 8ff93f6 . . b1ad5ed 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 69 , 6 + 69 , 9 @ @ public class MessagingService 
 
 / * List of sockets we are listening on * / 
 private static Map < InetAddress , SelectionKey > listenSockets _ = new HashMap < InetAddress , SelectionKey > ( ) ; 
 + 
 + / * List of UdpConnections we are listening on * / 
 + private static Map < InetAddress , UdpConnection > udpConnections _ = new HashMap < InetAddress , UdpConnection > ( ) ; 
 
 / * Lookup table for registering message handlers based on the verb . * / 
 private static Map < String , IVerbHandler > verbHandlers _ ; 
 @ @ - 214 , 7 + 217 , 8 @ @ public class MessagingService 
 try 
 { 
 connection . init ( localEp ) ; 
 - endPoints _ . add ( localEp ) ; 
 + endPoints _ . add ( localEp ) ; 
 + udpConnections _ . put ( localEp , connection ) ; 
 } 
 catch ( IOException e ) 
 { 
 @ @ - 497 , 7 + 501 , 7 @ @ public class MessagingService 
 logger _ . info ( " Shutting down . . . " ) ; 
 synchronized ( MessagingService . class ) 
 { 
 - / * Stop listening on any socket * / 
 + / * Stop listening on any TCP socket * / 
 for ( SelectionKey skey : listenSockets _ . values ( ) ) 
 { 
 skey . cancel ( ) ; 
 @ @ - 509 , 6 + 513 , 13 @ @ public class MessagingService 
 } 
 listenSockets _ . clear ( ) ; 
 
 + / * Stop listening on any UDP ports . * / 
 + for ( UdpConnection con : udpConnections _ . values ( ) ) 
 + { 
 + con . close ( ) ; 
 + } 
 + udpConnections _ . clear ( ) ; 
 + 
 / * Shutdown the threads in the EventQueue ' s * / 
 messageDeserializationExecutor _ . shutdownNow ( ) ; 
 messageDeserializerExecutor _ . shutdownNow ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / net / SelectorManager . java b / src / java / org / apache / cassandra / net / SelectorManager . java 
 index 7623a05 . . 16511ee 100644 
 - - - a / src / java / org / apache / cassandra / net / SelectorManager . java 
 + + + b / src / java / org / apache / cassandra / net / SelectorManager . java 
 @ @ - 35 , 6 + 35 , 9 @ @ public class SelectorManager extends Thread 
 / / workaround JDK select / register bug 
 Object gate = new Object ( ) ; 
 
 + / / flag to indicate that shutdown has been requested . 
 + private boolean shutdownRequested = false ; 
 + 
 / / The static selector manager which is used by all applications 
 private static SelectorManager manager ; 
 
 @ @ - 82 , 7 + 85 , 13 @ @ public class SelectorManager extends Thread 
 selector . wakeup ( ) ; 
 return channel . register ( selector , ops , handler ) ; 
 } 
 - } 
 + } 
 + 
 + / / requests the thread to shutdown . However , it brings no guarantees . Added for testing . 
 + private void requestShutdown ( ) 
 + { 
 + shutdownRequested = true ; 
 + } 
 
 / * * 
 * This method starts the socket manager listening for events . It is 
 @ @ - 102 , 6 + 111 , 11 @ @ public class SelectorManager extends Thread 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 + if ( shutdownRequested ) 
 + { 
 + shutdownRequested = false ; 
 + break ; 
 + } 
 } 
 } 
 
 @ @ - 145 , 6 + 159 , 22 @ @ public class SelectorManager extends Thread 
 } 
 
 / * * 
 + * Intended to reset the singleton as part of testing . 
 + * / 
 + static void reset ( ) 
 + { 
 + synchronized ( SelectorManager . class ) 
 + { 
 + if ( manager ! = null ) 
 + manager . requestShutdown ( ) ; 
 + manager = null ; 
 + if ( udpManager ! = null ) 
 + udpManager . requestShutdown ( ) ; 
 + udpManager = null ; 
 + } 
 + } 
 + 
 + / * * 
 * Returns the SelectorManager applications should use . 
 * 
 * @ return The SelectorManager which applications should use 
 diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java 
 index 969a2cd . . e3cde8d 100644 
 - - - a / test / unit / org / apache / cassandra / CleanupHelper . java 
 + + + b / test / unit / org / apache / cassandra / CleanupHelper . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . BeforeClass ; 
 
 @ @ - 30 , 6 + 31 , 13 @ @ public class CleanupHelper 
 private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; 
 
 @ BeforeClass 
 + public static void cleanupAndLeaveDirs ( ) 
 + { 
 + mkdirs ( ) ; 
 + cleanup ( ) ; 
 + mkdirs ( ) ; 
 + } 
 + 
 public static void cleanup ( ) 
 { 
 / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) 
 @ @ - 38 , 6 + 46 , 10 @ @ public class CleanupHelper 
 DatabaseDescriptor . getLogFileLocation ( ) , 
 } ; 
 
 + / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process 
 + / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally 
 + / / put there . 
 + 
 for ( String dirName : directoryNames ) 
 { 
 File dir = new File ( dirName ) ; 
 @ @ - 47 , 11 + 59 , 15 @ @ public class CleanupHelper 
 } 
 for ( File f : dir . listFiles ( ) ) 
 { 
 - if ( ! f . delete ( ) ) { 
 + if ( ! f . delete ( ) ) 
 + { 
 logger . error ( " could not delete " + f ) ; 
 + } 
 } 
 + 
 + if ( ! dir . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 - } 
 
 / / cleanup data directory which are stored as data directory / table / data files 
 for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 @ @ - 71 , 8 + 87 , 24 @ @ public class CleanupHelper 
 } 
 } 
 } 
 + if ( ! tableFile . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 + 
 + if ( ! dir . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 + } 
 
 + public static void mkdirs ( ) 
 + { 
 + try 
 + { 
 + DatabaseDescriptor . createAllDirectories ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / net / NetPackageAccessor . java b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java 
 new file mode 100644 
 index 0000000 . . 408bfba 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . net ; 
 + 
 + / * * 
 + For accesing package - level members created for the sole purpose of testing . 
 + * / 
 + public class NetPackageAccessor 
 + { 
 + public static void resetSelectorManager ( ) 
 + { 
 + SelectorManager . reset ( ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceTest . java b / test / unit / org / apache / cassandra / service / StorageServiceTest . java 
 new file mode 100644 
 index 0000000 . . 0ec9ffe 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / service / StorageServiceTest . java 
 @ @ - 0 , 0 + 1 , 68 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + 
 + package org . apache . cassandra . service ; 
 + 
 + import org . apache . cassandra . CleanupHelper ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . net . NetPackageAccessor ; 
 + import org . junit . Test ; 
 + import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . assertFalse ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + public class StorageServiceTest 
 + { 
 + @ Test 
 + public void testClientOnlyMode ( ) throws IOException 
 + { 
 + CleanupHelper . mkdirs ( ) ; 
 + CleanupHelper . cleanup ( ) ; 
 + StorageService . instance ( ) . initClient ( ) ; 
 + 
 + / / verify that no storage directories were created . 
 + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 + { 
 + assertFalse ( new File ( path ) . exists ( ) ) ; 
 + } 
 + StorageService . instance ( ) . stopClient ( ) ; 
 + NetPackageAccessor . resetSelectorManager ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegularMode ( ) throws IOException , InterruptedException 
 + { 
 + CleanupHelper . mkdirs ( ) ; 
 + CleanupHelper . cleanup ( ) ; 
 + StorageService . instance ( ) . initServer ( ) ; 
 + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 + { 
 + / / verify that storage directories are there . 
 + assertTrue ( new File ( path ) . exists ( ) ) ; 
 + } 
 + / / a proper test would be to call decommission here , but decommission ( ) mixes both shutdown and datatransfer 
 + / / calls . This test is only interested in the shutdown - related items which a properly handled by just 
 + / / stopping the client . 
 + / / StorageService . instance ( ) . decommission ( ) ; 
 + StorageService . instance ( ) . stopClient ( ) ; 
 + NetPackageAccessor . resetSelectorManager ( ) ; 
 + } 
 + }
