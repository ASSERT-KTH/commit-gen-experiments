BLEU SCORE: 0.02139089632303349

TEST MSG: Avoid potential AssertionError in mixed version cluster
GENERATED MSG: Don ' t reset nodes ' versions when closing IncomingTcpConnections

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5156b0c . . 15012b1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 4 <nl> + * Avoid potential AssertionError in mixed version cluster ( CASSANDRA - 11128 ) <nl> * Properly handle hinted handoff after topology changes ( CASSANDRA - 5902 ) <nl> * AssertionError when listing sstable files on inconsistent disk state ( CASSANDRA - 11156 ) <nl> * Fix wrong rack counting and invalid conditions check for TokenAllocation <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index d416dca . . 835beed 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 877 , 6 + 877 , 9 @ @ public final class MessagingService implements MessagingServiceMBean <nl> * / <nl> public int setVersion ( InetAddress endpoint , int version ) <nl> { <nl> + / / We can ' t talk to someone from the future <nl> + version = Math . min ( version , current _ version ) ; <nl> + <nl> logger . trace ( " Setting version { } for { } " , version , endpoint ) ; <nl> <nl> if ( version < VERSION _ 22 ) <nl> diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> index adf90da . . 7b6e26e 100644 <nl> - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> @ @ - 134 , 13 + 134 , 22 @ @ public class OutboundTcpConnection extends Thread <nl> private volatile long completed ; <nl> private final AtomicLong dropped = new AtomicLong ( ) ; <nl> private volatile int currentMsgBufferCount = 0 ; <nl> - private int targetVersion = MessagingService . current _ version ; <nl> + private volatile int targetVersion ; <nl> <nl> public OutboundTcpConnection ( OutboundTcpConnectionPool pool ) <nl> { <nl> super ( " MessagingService - Outgoing - " + pool . endPoint ( ) ) ; <nl> this . poolReference = pool ; <nl> cs = newCoalescingStrategy ( pool . endPoint ( ) . getHostAddress ( ) ) ; <nl> + <nl> + / / We want to use the most precise version we know because while there is version detection on connect ( ) , <nl> + / / the target version might be accessed by the pool ( in getConnection ( ) ) before we actually connect ( as we <nl> + / / connect when the first message is submitted ) . Note however that the only case where we ' ll connect <nl> + / / without knowing the true version of a node is if that node is a seed ( otherwise , we can ' t know a node <nl> + / / unless it has been gossiped to us or it has connected to us and in both case this sets the version ) and <nl> + / / in that case we won ' t rely on that targetVersion before we ' re actually connected and so the version <nl> + / / detection in connect ( ) will do its job . <nl> + targetVersion = MessagingService . instance ( ) . getVersion ( pool . endPoint ( ) ) ; <nl> } <nl> <nl> private static boolean isLocalDC ( InetAddress targetHost ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 4cdeeb0 . . 7cca516 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1774 , 11 + 1774 , 26 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> case RPC _ READY : <nl> notifyRpcChange ( endpoint , epState . isRpcReady ( ) ) ; <nl> break ; <nl> + case NET _ VERSION : <nl> + updateNetVersion ( endpoint , value ) ; <nl> + break ; <nl> } <nl> } <nl> } <nl> } <nl> <nl> + private void updateNetVersion ( InetAddress endpoint , VersionedValue value ) <nl> + { <nl> + try <nl> + { <nl> + MessagingService . instance ( ) . setVersion ( endpoint , Integer . valueOf ( value . value ) ) ; <nl> + } <nl> + catch ( NumberFormatException e ) <nl> + { <nl> + throw new AssertionError ( " Got invalid value for NET _ VERSION application state : " + value . value ) ; <nl> + } <nl> + } <nl> + <nl> public void updateTopology ( InetAddress endpoint ) <nl> { <nl> if ( getTokenMetadata ( ) . isMember ( endpoint ) ) <nl> @ @ - 2442 , 6 + 2457 , 12 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> / / If we have restarted before the node was even marked down , we need to reset the connection pool <nl> if ( state . isAlive ( ) ) <nl> onDead ( endpoint , state ) ; <nl> + <nl> + / / Then , the node may have been upgraded and changed its messaging protocol version . If so , we <nl> + / / want to update that before we mark the node live again to avoid problems like CASSANDRA - 11128 . <nl> + VersionedValue netVersion = state . getApplicationState ( ApplicationState . NET _ VERSION ) ; <nl> + if ( netVersion ! = null ) <nl> + updateNetVersion ( endpoint , netVersion ) ; <nl> } <nl> <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5156b0c . . 15012b1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 4 
 + * Avoid potential AssertionError in mixed version cluster ( CASSANDRA - 11128 ) 
 * Properly handle hinted handoff after topology changes ( CASSANDRA - 5902 ) 
 * AssertionError when listing sstable files on inconsistent disk state ( CASSANDRA - 11156 ) 
 * Fix wrong rack counting and invalid conditions check for TokenAllocation 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index d416dca . . 835beed 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 877 , 6 + 877 , 9 @ @ public final class MessagingService implements MessagingServiceMBean 
 * / 
 public int setVersion ( InetAddress endpoint , int version ) 
 { 
 + / / We can ' t talk to someone from the future 
 + version = Math . min ( version , current _ version ) ; 
 + 
 logger . trace ( " Setting version { } for { } " , version , endpoint ) ; 
 
 if ( version < VERSION _ 22 ) 
 diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 index adf90da . . 7b6e26e 100644 
 - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 @ @ - 134 , 13 + 134 , 22 @ @ public class OutboundTcpConnection extends Thread 
 private volatile long completed ; 
 private final AtomicLong dropped = new AtomicLong ( ) ; 
 private volatile int currentMsgBufferCount = 0 ; 
 - private int targetVersion = MessagingService . current _ version ; 
 + private volatile int targetVersion ; 
 
 public OutboundTcpConnection ( OutboundTcpConnectionPool pool ) 
 { 
 super ( " MessagingService - Outgoing - " + pool . endPoint ( ) ) ; 
 this . poolReference = pool ; 
 cs = newCoalescingStrategy ( pool . endPoint ( ) . getHostAddress ( ) ) ; 
 + 
 + / / We want to use the most precise version we know because while there is version detection on connect ( ) , 
 + / / the target version might be accessed by the pool ( in getConnection ( ) ) before we actually connect ( as we 
 + / / connect when the first message is submitted ) . Note however that the only case where we ' ll connect 
 + / / without knowing the true version of a node is if that node is a seed ( otherwise , we can ' t know a node 
 + / / unless it has been gossiped to us or it has connected to us and in both case this sets the version ) and 
 + / / in that case we won ' t rely on that targetVersion before we ' re actually connected and so the version 
 + / / detection in connect ( ) will do its job . 
 + targetVersion = MessagingService . instance ( ) . getVersion ( pool . endPoint ( ) ) ; 
 } 
 
 private static boolean isLocalDC ( InetAddress targetHost ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 4cdeeb0 . . 7cca516 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1774 , 11 + 1774 , 26 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 case RPC _ READY : 
 notifyRpcChange ( endpoint , epState . isRpcReady ( ) ) ; 
 break ; 
 + case NET _ VERSION : 
 + updateNetVersion ( endpoint , value ) ; 
 + break ; 
 } 
 } 
 } 
 } 
 
 + private void updateNetVersion ( InetAddress endpoint , VersionedValue value ) 
 + { 
 + try 
 + { 
 + MessagingService . instance ( ) . setVersion ( endpoint , Integer . valueOf ( value . value ) ) ; 
 + } 
 + catch ( NumberFormatException e ) 
 + { 
 + throw new AssertionError ( " Got invalid value for NET _ VERSION application state : " + value . value ) ; 
 + } 
 + } 
 + 
 public void updateTopology ( InetAddress endpoint ) 
 { 
 if ( getTokenMetadata ( ) . isMember ( endpoint ) ) 
 @ @ - 2442 , 6 + 2457 , 12 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 / / If we have restarted before the node was even marked down , we need to reset the connection pool 
 if ( state . isAlive ( ) ) 
 onDead ( endpoint , state ) ; 
 + 
 + / / Then , the node may have been upgraded and changed its messaging protocol version . If so , we 
 + / / want to update that before we mark the node live again to avoid problems like CASSANDRA - 11128 . 
 + VersionedValue netVersion = state . getApplicationState ( ApplicationState . NET _ VERSION ) ; 
 + if ( netVersion ! = null ) 
 + updateNetVersion ( endpoint , netVersion ) ; 
 } 
 


NEAREST DIFF:
ELIMINATEDSENTENCE
