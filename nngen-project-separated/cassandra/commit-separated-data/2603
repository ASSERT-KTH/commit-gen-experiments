BLEU SCORE: 0.02383853510228548

TEST MSG: Rewrite , and always call , ABSC # localCopy
GENERATED MSG: inline SimpleAbstractColumnIterator

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index 4a83901 . . dcdffc8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 34 , 7 + 34 , 7 @ @ import org . apache . cassandra . db . composites . CellName ; <nl> import org . apache . cassandra . db . composites . CellNameType ; <nl> import org . apache . cassandra . db . composites . Composite ; <nl> import org . apache . cassandra . db . filter . ColumnSlice ; <nl> - import org . apache . cassandra . utils . memory . HeapAllocator ; <nl> + import org . apache . cassandra . utils . memory . AbstractAllocator ; <nl> <nl> / * * <nl> * A ColumnFamily backed by an array . <nl> @ @ - 86 , 18 + 86 , 14 @ @ public class ArrayBackedSortedColumns extends ColumnFamily <nl> this . isSorted = original . isSorted ; <nl> } <nl> <nl> - public static ColumnFamily cloneToHeap ( ColumnFamily value , ColumnFamilyStore cfs ) <nl> + public static ArrayBackedSortedColumns localCopy ( ColumnFamily original , AbstractAllocator allocator ) <nl> { <nl> - if ( value . getColumnCount ( ) = = 0 ) <nl> - return value ; <nl> - / / we skip anything <nl> - final Cell [ ] cells = new Cell [ value . getColumnCount ( ) ] ; <nl> - int i = 0 ; <nl> - for ( Cell cell : value ) <nl> - cells [ i + + ] = cell . localCopy ( HeapAllocator . instance ) ; <nl> - ColumnFamily r = new ArrayBackedSortedColumns ( cfs . metadata , value . isInsertReversed ( ) , cells , i , i ) ; <nl> - r . delete ( value ) ; <nl> - return r ; <nl> + ArrayBackedSortedColumns copy = new ArrayBackedSortedColumns ( original . metadata , false , new Cell [ original . getColumnCount ( ) ] , 0 , 0 ) ; <nl> + for ( Cell cell : original ) <nl> + copy . internalAdd ( cell . localCopy ( allocator ) ) ; <nl> + copy . sortedSize = copy . size ; / / internalAdd doesn ' t update sortedSize . <nl> + copy . delete ( original ) ; <nl> + return copy ; <nl> } <nl> <nl> public ColumnFamily . Factory getFactory ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index 91dcf2d . . 85ab3df 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 241 , 8 + 241 , 9 @ @ public class Memtable <nl> return new Iterator < Map . Entry < DecoratedKey , ColumnFamily > > ( ) <nl> { <nl> private Iterator < ? extends Map . Entry < ? extends RowPosition , AtomicBTreeColumns > > iter = stopAt . isMinimum ( cfs . partitioner ) <nl> - ? rows . tailMap ( startWith ) . entrySet ( ) . iterator ( ) <nl> - : rows . subMap ( startWith , true , stopAt , true ) . entrySet ( ) . iterator ( ) ; <nl> + ? rows . tailMap ( startWith ) . entrySet ( ) . iterator ( ) <nl> + : rows . subMap ( startWith , true , stopAt , true ) . entrySet ( ) . iterator ( ) ; <nl> + <nl> private Map . Entry < ? extends RowPosition , ? extends ColumnFamily > currentEntry ; <nl> <nl> public boolean hasNext ( ) <nl> @ @ - 259 , 8 + 260 , 8 @ @ public class Memtable <nl> { <nl> DecoratedKey key = ( DecoratedKey ) entry . getKey ( ) ; <nl> key = new DecoratedKey ( key . token , HeapAllocator . instance . clone ( key . key ) ) ; <nl> - ColumnFamily columns = ArrayBackedSortedColumns . cloneToHeap ( entry . getValue ( ) , cfs ) ; <nl> - entry = new AbstractMap . SimpleImmutableEntry < > ( key , columns ) ; <nl> + ColumnFamily cells = ArrayBackedSortedColumns . localCopy ( entry . getValue ( ) , HeapAllocator . instance ) ; <nl> + entry = new AbstractMap . SimpleImmutableEntry < > ( key , cells ) ; <nl> } <nl> / / Store the reference to the current entry so that remove ( ) can update the current size . <nl> currentEntry = entry ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / CollationController . java b / src / java / org / apache / cassandra / db / CollationController . java <nl> index f1f560e . . 1aa2d77 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CollationController . java <nl> + + + b / src / java / org / apache / cassandra / db / CollationController . java <nl> @ @ - 156 , 7 + 156 , 7 @ @ public class CollationController <nl> / / do a final collate . toCollate is boilerplate required to provide a CloseableIterator <nl> ColumnFamily returnCF = container . cloneMeShallow ( ) ; <nl> Tracing . trace ( " Collating all results " ) ; <nl> - filter . collateOnDiskAtom ( returnCF , Collections . singletonList ( container . iterator ( ) ) , gcBefore ) ; <nl> + filter . collateOnDiskAtom ( returnCF , container . iterator ( ) , gcBefore ) ; <nl> <nl> / / " hoist up " the requested data into a more recent sstable <nl> if ( sstablesIterated > cfs . getMinimumCompactionThreshold ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index e0329a7 . . 05784ce 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1322 , 7 + 1322 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory , filter . filter . isReversed ( ) ) ; <nl> OnDiskAtomIterator ci = filter . getMemtableColumnIterator ( cached , null ) ; <nl> - filter . collateOnDiskAtom ( cf , Collections . singletonList ( ci ) , gcBefore ) ; <nl> + filter . collateOnDiskAtom ( cf , ci , gcBefore ) ; <nl> return removeDeletedCF ( cf , gcBefore ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / QueryFilter . java b / src / java / org / apache / cassandra / db / filter / QueryFilter . java <nl> index 03e9509 . . 6e30c17 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / QueryFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / QueryFilter . java <nl> @ @ - 75 , 6 + 75 , 15 @ @ public class QueryFilter <nl> collateColumns ( returnCF , filteredIterators , gcBefore ) ; <nl> } <nl> <nl> + / * * <nl> + * When there is only a single source of atoms , we can skip the collate step <nl> + * / <nl> + public void collateOnDiskAtom ( ColumnFamily returnCF , Iterator < ? extends OnDiskAtom > toCollate , int gcBefore ) <nl> + { <nl> + Iterator < Column > columns = gatherTombstones ( returnCF , toCollate ) ; <nl> + filter . collectReducedColumns ( returnCF , columns , gcBefore ) ; <nl> + } <nl> + <nl> public void collateColumns ( final ColumnFamily returnCF , List < ? extends Iterator < Column > > toCollate , final int gcBefore ) <nl> { <nl> Comparator < Column > fcomp = filter . getColumnComparator ( returnCF . getComparator ( ) ) ; <nl> diff - - git a / test / data / serialization / 2 . 0 / db . RowMutation . bin b / test / data / serialization / 2 . 0 / db . RowMutation . bin <nl> index fcbf794 . . a659ecd 100644 <nl> Binary files a / test / data / serialization / 2 . 0 / db . RowMutation . bin and b / test / data / serialization / 2 . 0 / db . RowMutation . bin differ <nl> diff - - git a / test / unit / org / apache / cassandra / tools / SSTableExportTest . java b / test / unit / org / apache / cassandra / tools / SSTableExportTest . java <nl> index 0db0c07 . . 6fd1764 100644 <nl> - - - a / test / unit / org / apache / cassandra / tools / SSTableExportTest . java <nl> + + + b / test / unit / org / apache / cassandra / tools / SSTableExportTest . java <nl> @ @ - 204 , 7 + 204 , 7 @ @ public class SSTableExportTest extends SchemaLoader <nl> reader = SSTableReader . open ( Descriptor . fromFilename ( tempSS2 . getPath ( ) ) ) ; <nl> QueryFilter qf = QueryFilter . getNamesFilter ( Util . dk ( " rowA " ) , " Standard1 " , ByteBufferUtil . bytes ( " name " ) ) ; <nl> ColumnFamily cf = qf . getSSTableColumnIterator ( reader ) . getColumnFamily ( ) ; <nl> - qf . collateOnDiskAtom ( cf , Collections . singletonList ( qf . getSSTableColumnIterator ( reader ) ) , Integer . MIN _ VALUE ) ; <nl> + qf . collateOnDiskAtom ( cf , qf . getSSTableColumnIterator ( reader ) , Integer . MIN _ VALUE ) ; <nl> assertTrue ( cf ! = null ) ; <nl> assertTrue ( cf . getColumn ( ByteBufferUtil . bytes ( " name " ) ) . value ( ) . equals ( hexToBytes ( " 76616c " ) ) ) ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / tools / SSTableImportTest . java b / test / unit / org / apache / cassandra / tools / SSTableImportTest . java <nl> index 2954e54 . . a1a7673 100644 <nl> - - - a / test / unit / org / apache / cassandra / tools / SSTableImportTest . java <nl> + + + b / test / unit / org / apache / cassandra / tools / SSTableImportTest . java <nl> @ @ - 110 , 7 + 110 , 7 @ @ public class SSTableImportTest extends SchemaLoader <nl> SSTableReader reader = SSTableReader . open ( Descriptor . fromFilename ( tempSS . getPath ( ) ) ) ; <nl> QueryFilter qf = QueryFilter . getIdentityFilter ( Util . dk ( " rowA " ) , " Super4 " ) ; <nl> ColumnFamily cf = cloneForAdditions ( qf . getSSTableColumnIterator ( reader ) ) ; <nl> - qf . collateOnDiskAtom ( cf , Collections . singletonList ( qf . getSSTableColumnIterator ( reader ) ) , Integer . MIN _ VALUE ) ; <nl> + qf . collateOnDiskAtom ( cf , qf . getSSTableColumnIterator ( reader ) , Integer . MIN _ VALUE ) ; <nl> <nl> DeletionTime delTime = cf . deletionInfo ( ) . rangeCovering ( CompositeType . build ( ByteBufferUtil . bytes ( " superA " ) ) ) . iterator ( ) . next ( ) ; <nl> assertEquals ( " supercolumn deletion time did not match the expected time " , new DeletionInfo ( 0 , 0 ) , new DeletionInfo ( delTime ) ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index 4a83901 . . dcdffc8 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 34 , 7 + 34 , 7 @ @ import org . apache . cassandra . db . composites . CellName ; 
 import org . apache . cassandra . db . composites . CellNameType ; 
 import org . apache . cassandra . db . composites . Composite ; 
 import org . apache . cassandra . db . filter . ColumnSlice ; 
 - import org . apache . cassandra . utils . memory . HeapAllocator ; 
 + import org . apache . cassandra . utils . memory . AbstractAllocator ; 
 
 / * * 
 * A ColumnFamily backed by an array . 
 @ @ - 86 , 18 + 86 , 14 @ @ public class ArrayBackedSortedColumns extends ColumnFamily 
 this . isSorted = original . isSorted ; 
 } 
 
 - public static ColumnFamily cloneToHeap ( ColumnFamily value , ColumnFamilyStore cfs ) 
 + public static ArrayBackedSortedColumns localCopy ( ColumnFamily original , AbstractAllocator allocator ) 
 { 
 - if ( value . getColumnCount ( ) = = 0 ) 
 - return value ; 
 - / / we skip anything 
 - final Cell [ ] cells = new Cell [ value . getColumnCount ( ) ] ; 
 - int i = 0 ; 
 - for ( Cell cell : value ) 
 - cells [ i + + ] = cell . localCopy ( HeapAllocator . instance ) ; 
 - ColumnFamily r = new ArrayBackedSortedColumns ( cfs . metadata , value . isInsertReversed ( ) , cells , i , i ) ; 
 - r . delete ( value ) ; 
 - return r ; 
 + ArrayBackedSortedColumns copy = new ArrayBackedSortedColumns ( original . metadata , false , new Cell [ original . getColumnCount ( ) ] , 0 , 0 ) ; 
 + for ( Cell cell : original ) 
 + copy . internalAdd ( cell . localCopy ( allocator ) ) ; 
 + copy . sortedSize = copy . size ; / / internalAdd doesn ' t update sortedSize . 
 + copy . delete ( original ) ; 
 + return copy ; 
 } 
 
 public ColumnFamily . Factory getFactory ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index 91dcf2d . . 85ab3df 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 241 , 8 + 241 , 9 @ @ public class Memtable 
 return new Iterator < Map . Entry < DecoratedKey , ColumnFamily > > ( ) 
 { 
 private Iterator < ? extends Map . Entry < ? extends RowPosition , AtomicBTreeColumns > > iter = stopAt . isMinimum ( cfs . partitioner ) 
 - ? rows . tailMap ( startWith ) . entrySet ( ) . iterator ( ) 
 - : rows . subMap ( startWith , true , stopAt , true ) . entrySet ( ) . iterator ( ) ; 
 + ? rows . tailMap ( startWith ) . entrySet ( ) . iterator ( ) 
 + : rows . subMap ( startWith , true , stopAt , true ) . entrySet ( ) . iterator ( ) ; 
 + 
 private Map . Entry < ? extends RowPosition , ? extends ColumnFamily > currentEntry ; 
 
 public boolean hasNext ( ) 
 @ @ - 259 , 8 + 260 , 8 @ @ public class Memtable 
 { 
 DecoratedKey key = ( DecoratedKey ) entry . getKey ( ) ; 
 key = new DecoratedKey ( key . token , HeapAllocator . instance . clone ( key . key ) ) ; 
 - ColumnFamily columns = ArrayBackedSortedColumns . cloneToHeap ( entry . getValue ( ) , cfs ) ; 
 - entry = new AbstractMap . SimpleImmutableEntry < > ( key , columns ) ; 
 + ColumnFamily cells = ArrayBackedSortedColumns . localCopy ( entry . getValue ( ) , HeapAllocator . instance ) ; 
 + entry = new AbstractMap . SimpleImmutableEntry < > ( key , cells ) ; 
 } 
 / / Store the reference to the current entry so that remove ( ) can update the current size . 
 currentEntry = entry ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / CollationController . java b / src / java / org / apache / cassandra / db / CollationController . java 
 index f1f560e . . 1aa2d77 100644 
 - - - a / src / java / org / apache / cassandra / db / CollationController . java 
 + + + b / src / java / org / apache / cassandra / db / CollationController . java 
 @ @ - 156 , 7 + 156 , 7 @ @ public class CollationController 
 / / do a final collate . toCollate is boilerplate required to provide a CloseableIterator 
 ColumnFamily returnCF = container . cloneMeShallow ( ) ; 
 Tracing . trace ( " Collating all results " ) ; 
 - filter . collateOnDiskAtom ( returnCF , Collections . singletonList ( container . iterator ( ) ) , gcBefore ) ; 
 + filter . collateOnDiskAtom ( returnCF , container . iterator ( ) , gcBefore ) ; 
 
 / / " hoist up " the requested data into a more recent sstable 
 if ( sstablesIterated > cfs . getMinimumCompactionThreshold ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index e0329a7 . . 05784ce 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1322 , 7 + 1322 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory , filter . filter . isReversed ( ) ) ; 
 OnDiskAtomIterator ci = filter . getMemtableColumnIterator ( cached , null ) ; 
 - filter . collateOnDiskAtom ( cf , Collections . singletonList ( ci ) , gcBefore ) ; 
 + filter . collateOnDiskAtom ( cf , ci , gcBefore ) ; 
 return removeDeletedCF ( cf , gcBefore ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / filter / QueryFilter . java b / src / java / org / apache / cassandra / db / filter / QueryFilter . java 
 index 03e9509 . . 6e30c17 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / QueryFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / QueryFilter . java 
 @ @ - 75 , 6 + 75 , 15 @ @ public class QueryFilter 
 collateColumns ( returnCF , filteredIterators , gcBefore ) ; 
 } 
 
 + / * * 
 + * When there is only a single source of atoms , we can skip the collate step 
 + * / 
 + public void collateOnDiskAtom ( ColumnFamily returnCF , Iterator < ? extends OnDiskAtom > toCollate , int gcBefore ) 
 + { 
 + Iterator < Column > columns = gatherTombstones ( returnCF , toCollate ) ; 
 + filter . collectReducedColumns ( returnCF , columns , gcBefore ) ; 
 + } 
 + 
 public void collateColumns ( final ColumnFamily returnCF , List < ? extends Iterator < Column > > toCollate , final int gcBefore ) 
 { 
 Comparator < Column > fcomp = filter . getColumnComparator ( returnCF . getComparator ( ) ) ; 
 diff - - git a / test / data / serialization / 2 . 0 / db . RowMutation . bin b / test / data / serialization / 2 . 0 / db . RowMutation . bin 
 index fcbf794 . . a659ecd 100644 
 Binary files a / test / data / serialization / 2 . 0 / db . RowMutation . bin and b / test / data / serialization / 2 . 0 / db . RowMutation . bin differ 
 diff - - git a / test / unit / org / apache / cassandra / tools / SSTableExportTest . java b / test / unit / org / apache / cassandra / tools / SSTableExportTest . java 
 index 0db0c07 . . 6fd1764 100644 
 - - - a / test / unit / org / apache / cassandra / tools / SSTableExportTest . java 
 + + + b / test / unit / org / apache / cassandra / tools / SSTableExportTest . java 
 @ @ - 204 , 7 + 204 , 7 @ @ public class SSTableExportTest extends SchemaLoader 
 reader = SSTableReader . open ( Descriptor . fromFilename ( tempSS2 . getPath ( ) ) ) ; 
 QueryFilter qf = QueryFilter . getNamesFilter ( Util . dk ( " rowA " ) , " Standard1 " , ByteBufferUtil . bytes ( " name " ) ) ; 
 ColumnFamily cf = qf . getSSTableColumnIterator ( reader ) . getColumnFamily ( ) ; 
 - qf . collateOnDiskAtom ( cf , Collections . singletonList ( qf . getSSTableColumnIterator ( reader ) ) , Integer . MIN _ VALUE ) ; 
 + qf . collateOnDiskAtom ( cf , qf . getSSTableColumnIterator ( reader ) , Integer . MIN _ VALUE ) ; 
 assertTrue ( cf ! = null ) ; 
 assertTrue ( cf . getColumn ( ByteBufferUtil . bytes ( " name " ) ) . value ( ) . equals ( hexToBytes ( " 76616c " ) ) ) ; 
 
 diff - - git a / test / unit / org / apache / cassandra / tools / SSTableImportTest . java b / test / unit / org / apache / cassandra / tools / SSTableImportTest . java 
 index 2954e54 . . a1a7673 100644 
 - - - a / test / unit / org / apache / cassandra / tools / SSTableImportTest . java 
 + + + b / test / unit / org / apache / cassandra / tools / SSTableImportTest . java 
 @ @ - 110 , 7 + 110 , 7 @ @ public class SSTableImportTest extends SchemaLoader 
 SSTableReader reader = SSTableReader . open ( Descriptor . fromFilename ( tempSS . getPath ( ) ) ) ; 
 QueryFilter qf = QueryFilter . getIdentityFilter ( Util . dk ( " rowA " ) , " Super4 " ) ; 
 ColumnFamily cf = cloneForAdditions ( qf . getSSTableColumnIterator ( reader ) ) ; 
 - qf . collateOnDiskAtom ( cf , Collections . singletonList ( qf . getSSTableColumnIterator ( reader ) ) , Integer . MIN _ VALUE ) ; 
 + qf . collateOnDiskAtom ( cf , qf . getSSTableColumnIterator ( reader ) , Integer . MIN _ VALUE ) ; 
 
 DeletionTime delTime = cf . deletionInfo ( ) . rangeCovering ( CompositeType . build ( ByteBufferUtil . bytes ( " superA " ) ) ) . iterator ( ) . next ( ) ; 
 assertEquals ( " supercolumn deletion time did not match the expected time " , new DeletionInfo ( 0 , 0 ) , new DeletionInfo ( delTime ) ) ;
