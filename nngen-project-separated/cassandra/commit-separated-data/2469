BLEU SCORE: 0.01080894324815623

TEST MSG: Fix CellName comparison bugs
GENERATED MSG: improve testing of StorageService init , and fix shutdown of messagingservice .

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / composites / AbstractSimpleCellNameType . java b / src / java / org / apache / cassandra / db / composites / AbstractSimpleCellNameType . java <nl> index 6500069 . . 95386fd 100644 <nl> - - - a / src / java / org / apache / cassandra / db / composites / AbstractSimpleCellNameType . java <nl> + + + b / src / java / org / apache / cassandra / db / composites / AbstractSimpleCellNameType . java <nl> @ @ - 64 , 7 + 64 , 7 @ @ public abstract class AbstractSimpleCellNameType extends AbstractCellNameType <nl> boolean c1isEmpty = c1 . isEmpty ( ) ; <nl> boolean c2isEmpty = c2 . isEmpty ( ) ; <nl> if ( c1isEmpty | | c2isEmpty ) <nl> - return c1isEmpty ? 1 : ( c2isEmpty ? - 1 : 0 ) ; <nl> + return ! c1isEmpty ? 1 : ( ! c2isEmpty ? - 1 : 0 ) ; <nl> <nl> return type . compare ( c1 . get ( 0 ) , c2 . get ( 0 ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / composites / SimpleCType . java b / src / java / org / apache / cassandra / db / composites / SimpleCType . java <nl> index fe86655 . . 35e14f9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / composites / SimpleCType . java <nl> + + + b / src / java / org / apache / cassandra / db / composites / SimpleCType . java <nl> @ @ - 58 , 14 + 58 , 14 @ @ public class SimpleCType extends AbstractCType <nl> ByteBuffer b1 = c1 . toByteBuffer ( ) ; <nl> ByteBuffer b2 = c2 . toByteBuffer ( ) ; <nl> if ( ! b1 . hasRemaining ( ) | | ! b2 . hasRemaining ( ) ) <nl> - <nl> + return b1 . hasRemaining ( ) ? 1 : ( b2 . hasRemaining ( ) ? - 1 : 0 ) ; <nl> return ByteBufferUtil . compareUnsigned ( b1 , b2 ) ; <nl> } <nl> <nl> boolean c1isEmpty = c1 . isEmpty ( ) ; <nl> boolean c2isEmpty = c2 . isEmpty ( ) ; <nl> if ( c1isEmpty | | c2isEmpty ) <nl> - return c1isEmpty ? 1 : ( c2isEmpty ? - 1 : 0 ) ; <nl> + return ! c1isEmpty ? 1 : ( ! c2isEmpty ? - 1 : 0 ) ; <nl> <nl> return type . compare ( c1 . get ( 0 ) , c2 . get ( 0 ) ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / composites / CTypeTest . java b / test / unit / org / apache / cassandra / db / composites / CTypeTest . java <nl> new file mode 100644 <nl> index 0000000 . . 4bd755b <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / db / composites / CTypeTest . java <nl> @ @ - 0 , 0 + 1 , 123 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . db . composites ; <nl> + <nl> + import com . google . common . collect . Lists ; <nl> + import org . apache . cassandra . db . marshal . * ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . junit . Test ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + public class CTypeTest <nl> + { <nl> + static final List < AbstractType < ? > > types = Lists . newArrayList ( ) ; <nl> + static <nl> + { <nl> + types . add ( UTF8Type . instance ) ; <nl> + types . add ( UUIDType . instance ) ; <nl> + types . add ( Int32Type . instance ) ; <nl> + } <nl> + <nl> + static final CellNameType cdtype = new CompoundDenseCellNameType ( types ) ; <nl> + static final CellNameType stype1 = new SimpleDenseCellNameType ( BytesType . instance ) ; <nl> + static final CellNameType stype2 = new SimpleDenseCellNameType ( UUIDType . instance ) ; <nl> + <nl> + @ Test <nl> + public void testCompoundType ( ) <nl> + { <nl> + Composite a1 = cdtype . makeCellName ( " a " , UUIDType . instance . fromString ( " 00000000 - 0000 - 0000 - 0000 - 000000000000 " ) , 1 ) ; <nl> + Composite a2 = cdtype . makeCellName ( " a " , UUIDType . instance . fromString ( " 00000000 - 0000 - 0000 - 0000 - 000000000000 " ) , 100 ) ; <nl> + Composite b1 = cdtype . makeCellName ( " a " , UUIDType . instance . fromString ( " ffffffff - ffff - ffff - ffff - ffffffffffff " ) , 1 ) ; <nl> + Composite b2 = cdtype . makeCellName ( " a " , UUIDType . instance . fromString ( " ffffffff - ffff - ffff - ffff - ffffffffffff " ) , 100 ) ; <nl> + Composite c1 = cdtype . makeCellName ( " z " , UUIDType . instance . fromString ( " 00000000 - 0000 - 0000 - 0000 - 000000000000 " ) , 1 ) ; <nl> + Composite c2 = cdtype . makeCellName ( " z " , UUIDType . instance . fromString ( " 00000000 - 0000 - 0000 - 0000 - 000000000000 " ) , 100 ) ; <nl> + Composite d1 = cdtype . makeCellName ( " z " , UUIDType . instance . fromString ( " ffffffff - ffff - ffff - ffff - ffffffffffff " ) , 1 ) ; <nl> + Composite d2 = cdtype . makeCellName ( " z " , UUIDType . instance . fromString ( " ffffffff - ffff - ffff - ffff - ffffffffffff " ) , 100 ) ; <nl> + <nl> + Composite z1 = cdtype . makeCellName ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , UUIDType . instance . fromString ( " ffffffff - ffff - ffff - ffff - ffffffffffff " ) , 100 ) ; <nl> + <nl> + assert cdtype . compare ( a1 , a2 ) < 0 ; <nl> + assert cdtype . compare ( a2 , b1 ) < 0 ; <nl> + assert cdtype . compare ( b1 , b2 ) < 0 ; <nl> + assert cdtype . compare ( b2 , c1 ) < 0 ; <nl> + assert cdtype . compare ( c1 , c2 ) < 0 ; <nl> + assert cdtype . compare ( c2 , d1 ) < 0 ; <nl> + assert cdtype . compare ( d1 , d2 ) < 0 ; <nl> + <nl> + assert cdtype . compare ( a2 , a1 ) > 0 ; <nl> + assert cdtype . compare ( b1 , a2 ) > 0 ; <nl> + assert cdtype . compare ( b2 , b1 ) > 0 ; <nl> + assert cdtype . compare ( c1 , b2 ) > 0 ; <nl> + assert cdtype . compare ( c2 , c1 ) > 0 ; <nl> + assert cdtype . compare ( d1 , c2 ) > 0 ; <nl> + assert cdtype . compare ( d2 , d1 ) > 0 ; <nl> + <nl> + assert cdtype . compare ( z1 , a1 ) < 0 ; <nl> + assert cdtype . compare ( z1 , a2 ) < 0 ; <nl> + assert cdtype . compare ( z1 , b1 ) < 0 ; <nl> + assert cdtype . compare ( z1 , b2 ) < 0 ; <nl> + assert cdtype . compare ( z1 , c1 ) < 0 ; <nl> + assert cdtype . compare ( z1 , c2 ) < 0 ; <nl> + assert cdtype . compare ( z1 , d1 ) < 0 ; <nl> + assert cdtype . compare ( z1 , d2 ) < 0 ; <nl> + <nl> + assert cdtype . compare ( a1 , a1 ) = = 0 ; <nl> + assert cdtype . compare ( a2 , a2 ) = = 0 ; <nl> + assert cdtype . compare ( b1 , b1 ) = = 0 ; <nl> + assert cdtype . compare ( b2 , b2 ) = = 0 ; <nl> + assert cdtype . compare ( c1 , c1 ) = = 0 ; <nl> + assert cdtype . compare ( c2 , c2 ) = = 0 ; <nl> + assert cdtype . compare ( z1 , z1 ) = = 0 ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSimpleType2 ( ) <nl> + { <nl> + CellName a = stype2 . makeCellName ( UUIDType . instance . fromString ( " 00000000 - 0000 - 0000 - 0000 - 000000000000 " ) ) ; <nl> + CellName z = stype2 . makeCellName ( UUIDType . instance . fromString ( " ffffffff - ffff - ffff - ffff - ffffffffffff " ) ) ; <nl> + Composite empty = Composites . EMPTY ; <nl> + <nl> + assert stype2 . compare ( a , z ) < 0 ; <nl> + assert stype2 . compare ( z , a ) > 0 ; <nl> + assert stype2 . compare ( a , a ) = = 0 ; <nl> + assert stype2 . compare ( z , z ) = = 0 ; <nl> + assert stype2 . compare ( empty , a ) < 0 ; <nl> + assert stype2 . compare ( a , empty ) > 0 ; <nl> + assert stype2 . compare ( empty , empty ) = = 0 ; <nl> + } <nl> + <nl> + <nl> + @ Test <nl> + public void testSimpleType1 ( ) <nl> + { <nl> + CellName a = stype1 . makeCellName ( ByteBufferUtil . bytes ( " a " ) ) ; <nl> + CellName z = stype1 . makeCellName ( ByteBufferUtil . bytes ( " z " ) ) ; <nl> + Composite empty = Composites . EMPTY ; <nl> + <nl> + assert stype1 . compare ( a , z ) < 0 ; <nl> + assert stype1 . compare ( z , a ) > 0 ; <nl> + assert stype1 . compare ( a , a ) = = 0 ; <nl> + assert stype1 . compare ( z , z ) = = 0 ; <nl> + assert stype1 . compare ( empty , a ) < 0 ; <nl> + assert stype1 . compare ( a , empty ) > 0 ; <nl> + assert stype1 . compare ( empty , empty ) = = 0 ; <nl> + <nl> + } <nl> + <nl> + }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> index 1f235df . . 25e1072 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra . concurrent ; <nl> <nl> import java . lang . management . ManagementFactory ; <nl> + import java . util . List ; <nl> import java . util . concurrent . * ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . log4j . Logger ; <nl> public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean <nl> { <nl> private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; <nl> + private final String mbeanName ; <nl> <nl> public DebuggableThreadPoolExecutor ( String threadPoolName ) <nl> { <nl> @ @ - 51 , 9 + 53 , 10 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> super . prestartAllCoreThreads ( ) ; <nl> <nl> MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + mbeanName = " org . apache . cassandra . concurrent : type = " + threadFactory . id ; <nl> try <nl> { <nl> - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id ) ) ; <nl> + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 84 , 6 + 87 , 33 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> } <nl> } <nl> <nl> + private void unregisterMBean ( ) <nl> + { <nl> + try <nl> + { <nl> + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; <nl> + } <nl> + catch ( Exception ex ) <nl> + { <nl> + / / don ' t let it get in the way , but notify . <nl> + logger _ . error ( ex . getMessage ( ) , ex ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void shutdown ( ) <nl> + { <nl> + unregisterMBean ( ) ; <nl> + super . shutdown ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < Runnable > shutdownNow ( ) <nl> + { <nl> + unregisterMBean ( ) ; <nl> + return super . shutdownNow ( ) ; <nl> + } <nl> + <nl> / * * <nl> * Get the number of completed tasks <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 3b70d17 . . f5d8d35 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 122 , 7 + 122 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> return gossiper _ ; <nl> } <nl> <nl> - private Timer gossipTimer _ = new Timer ( false ) ; <nl> + private Timer gossipTimer _ ; <nl> private InetAddress localEndPoint _ ; <nl> private long aVeryLongTime _ ; <nl> private Random random _ = new Random ( ) ; <nl> @ @ - 144 , 6 + 144 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> <nl> private Gossiper ( ) <nl> { <nl> + gossipTimer _ = new Timer ( false ) ; <nl> aVeryLongTime _ = 259200 * 1000 ; <nl> / * register with the Failure Detector for receiving Failure detector events * / <nl> FailureDetector . instance ( ) . registerFailureDetectionEventListener ( this ) ; <nl> @ @ - 834 , 6 + 835 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> public void stop ( ) <nl> { <nl> gossipTimer _ . cancel ( ) ; <nl> + gossipTimer _ = new Timer ( false ) ; / / makes the Gossiper reentrant . <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 8ff93f6 . . b1ad5ed 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 69 , 6 + 69 , 9 @ @ public class MessagingService <nl> <nl> / * List of sockets we are listening on * / <nl> private static Map < InetAddress , SelectionKey > listenSockets _ = new HashMap < InetAddress , SelectionKey > ( ) ; <nl> + <nl> + / * List of UdpConnections we are listening on * / <nl> + private static Map < InetAddress , UdpConnection > udpConnections _ = new HashMap < InetAddress , UdpConnection > ( ) ; <nl> <nl> / * Lookup table for registering message handlers based on the verb . * / <nl> private static Map < String , IVerbHandler > verbHandlers _ ; <nl> @ @ - 214 , 7 + 217 , 8 @ @ public class MessagingService <nl> try <nl> { <nl> connection . init ( localEp ) ; <nl> - endPoints _ . add ( localEp ) ; <nl> + endPoints _ . add ( localEp ) ; <nl> + udpConnections _ . put ( localEp , connection ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> @ @ - 497 , 7 + 501 , 7 @ @ public class MessagingService <nl> logger _ . info ( " Shutting down . . . " ) ; <nl> synchronized ( MessagingService . class ) <nl> { <nl> - / * Stop listening on any socket * / <nl> + / * Stop listening on any TCP socket * / <nl> for ( SelectionKey skey : listenSockets _ . values ( ) ) <nl> { <nl> skey . cancel ( ) ; <nl> @ @ - 509 , 6 + 513 , 13 @ @ public class MessagingService <nl> } <nl> listenSockets _ . clear ( ) ; <nl> <nl> + / * Stop listening on any UDP ports . * / <nl> + for ( UdpConnection con : udpConnections _ . values ( ) ) <nl> + { <nl> + con . close ( ) ; <nl> + } <nl> + udpConnections _ . clear ( ) ; <nl> + <nl> / * Shutdown the threads in the EventQueue ' s * / <nl> messageDeserializationExecutor _ . shutdownNow ( ) ; <nl> messageDeserializerExecutor _ . shutdownNow ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / net / SelectorManager . java b / src / java / org / apache / cassandra / net / SelectorManager . java <nl> index 7623a05 . . 16511ee 100644 <nl> - - - a / src / java / org / apache / cassandra / net / SelectorManager . java <nl> + + + b / src / java / org / apache / cassandra / net / SelectorManager . java <nl> @ @ - 35 , 6 + 35 , 9 @ @ public class SelectorManager extends Thread <nl> / / workaround JDK select / register bug <nl> Object gate = new Object ( ) ; <nl> <nl> + / / flag to indicate that shutdown has been requested . <nl> + private boolean shutdownRequested = false ; <nl> + <nl> / / The static selector manager which is used by all applications <nl> private static SelectorManager manager ; <nl> <nl> @ @ - 82 , 7 + 85 , 13 @ @ public class SelectorManager extends Thread <nl> selector . wakeup ( ) ; <nl> return channel . register ( selector , ops , handler ) ; <nl> } <nl> - } <nl> + } <nl> + <nl> + / / requests the thread to shutdown . However , it brings no guarantees . Added for testing . <nl> + private void requestShutdown ( ) <nl> + { <nl> + shutdownRequested = true ; <nl> + } <nl> <nl> / * * <nl> * This method starts the socket manager listening for events . It is <nl> @ @ - 102 , 6 + 111 , 11 @ @ public class SelectorManager extends Thread <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> + if ( shutdownRequested ) <nl> + { <nl> + shutdownRequested = false ; <nl> + break ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 145 , 6 + 159 , 22 @ @ public class SelectorManager extends Thread <nl> } <nl> <nl> / * * <nl> + * Intended to reset the singleton as part of testing . <nl> + * / <nl> + static void reset ( ) <nl> + { <nl> + synchronized ( SelectorManager . class ) <nl> + { <nl> + if ( manager ! = null ) <nl> + manager . requestShutdown ( ) ; <nl> + manager = null ; <nl> + if ( udpManager ! = null ) <nl> + udpManager . requestShutdown ( ) ; <nl> + udpManager = null ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Returns the SelectorManager applications should use . <nl> * <nl> * @ return The SelectorManager which applications should use <nl> diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> index 969a2cd . . e3cde8d 100644 <nl> - - - a / test / unit / org / apache / cassandra / CleanupHelper . java <nl> + + + b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . BeforeClass ; <nl> <nl> @ @ - 30 , 6 + 31 , 13 @ @ public class CleanupHelper <nl> private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; <nl> <nl> @ BeforeClass <nl> + public static void cleanupAndLeaveDirs ( ) <nl> + { <nl> + mkdirs ( ) ; <nl> + cleanup ( ) ; <nl> + mkdirs ( ) ; <nl> + } <nl> + <nl> public static void cleanup ( ) <nl> { <nl> / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) <nl> @ @ - 38 , 6 + 46 , 10 @ @ public class CleanupHelper <nl> DatabaseDescriptor . getLogFileLocation ( ) , <nl> } ; <nl> <nl> + / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process <nl> + / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally <nl> + / / put there . <nl> + <nl> for ( String dirName : directoryNames ) <nl> { <nl> File dir = new File ( dirName ) ; <nl> @ @ - 47 , 11 + 59 , 15 @ @ public class CleanupHelper <nl> } <nl> for ( File f : dir . listFiles ( ) ) <nl> { <nl> - if ( ! f . delete ( ) ) { <nl> + if ( ! f . delete ( ) ) <nl> + { <nl> logger . error ( " could not delete " + f ) ; <nl> + } <nl> } <nl> + <nl> + if ( ! dir . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> - } <nl> <nl> / / cleanup data directory which are stored as data directory / table / data files <nl> for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> @ @ - 71 , 8 + 87 , 24 @ @ public class CleanupHelper <nl> } <nl> } <nl> } <nl> + if ( ! tableFile . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> + <nl> + if ( ! dir . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> + } <nl> <nl> + public static void mkdirs ( ) <nl> + { <nl> + try <nl> + { <nl> + DatabaseDescriptor . createAllDirectories ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / net / NetPackageAccessor . java b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java <nl> new file mode 100644 <nl> index 0000000 . . 408bfba <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java <nl> @ @ - 0 , 0 + 1 , 29 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . net ; <nl> + <nl> + / * * <nl> + For accesing package - level members created for the sole purpose of testing . <nl> + * / <nl> + public class NetPackageAccessor <nl> + { <nl> + public static void resetSelectorManager ( ) <nl> + { <nl> + SelectorManager . reset ( ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceTest . java b / test / unit / org / apache / cassandra / service / StorageServiceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0ec9ffe <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / service / StorageServiceTest . java <nl> @ @ - 0 , 0 + 1 , 68 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import org . apache . cassandra . CleanupHelper ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . net . NetPackageAccessor ; <nl> + import org . junit . Test ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + public class StorageServiceTest <nl> + { <nl> + @ Test <nl> + public void testClientOnlyMode ( ) throws IOException <nl> + { <nl> + CleanupHelper . mkdirs ( ) ; <nl> + CleanupHelper . cleanup ( ) ; <nl> + StorageService . instance ( ) . initClient ( ) ; <nl> + <nl> + / / verify that no storage directories were created . <nl> + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> + { <nl> + assertFalse ( new File ( path ) . exists ( ) ) ; <nl> + } <nl> + StorageService . instance ( ) . stopClient ( ) ; <nl> + NetPackageAccessor . resetSelectorManager ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegularMode ( ) throws IOException , InterruptedException <nl> + { <nl> + CleanupHelper . mkdirs ( ) ; <nl> + CleanupHelper . cleanup ( ) ; <nl> + StorageService . instance ( ) . initServer ( ) ; <nl> + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> + { <nl> + / / verify that storage directories are there . <nl> + assertTrue ( new File ( path ) . exists ( ) ) ; <nl> + } <nl> + / / a proper test would be to call decommission here , but decommission ( ) mixes both shutdown and datatransfer <nl> + / / calls . This test is only interested in the shutdown - related items which a properly handled by just <nl> + / / stopping the client . <nl> + / / StorageService . instance ( ) . decommission ( ) ; <nl> + StorageService . instance ( ) . stopClient ( ) ; <nl> + NetPackageAccessor . resetSelectorManager ( ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / composites / AbstractSimpleCellNameType . java b / src / java / org / apache / cassandra / db / composites / AbstractSimpleCellNameType . java 
 index 6500069 . . 95386fd 100644 
 - - - a / src / java / org / apache / cassandra / db / composites / AbstractSimpleCellNameType . java 
 + + + b / src / java / org / apache / cassandra / db / composites / AbstractSimpleCellNameType . java 
 @ @ - 64 , 7 + 64 , 7 @ @ public abstract class AbstractSimpleCellNameType extends AbstractCellNameType 
 boolean c1isEmpty = c1 . isEmpty ( ) ; 
 boolean c2isEmpty = c2 . isEmpty ( ) ; 
 if ( c1isEmpty | | c2isEmpty ) 
 - return c1isEmpty ? 1 : ( c2isEmpty ? - 1 : 0 ) ; 
 + return ! c1isEmpty ? 1 : ( ! c2isEmpty ? - 1 : 0 ) ; 
 
 return type . compare ( c1 . get ( 0 ) , c2 . get ( 0 ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / composites / SimpleCType . java b / src / java / org / apache / cassandra / db / composites / SimpleCType . java 
 index fe86655 . . 35e14f9 100644 
 - - - a / src / java / org / apache / cassandra / db / composites / SimpleCType . java 
 + + + b / src / java / org / apache / cassandra / db / composites / SimpleCType . java 
 @ @ - 58 , 14 + 58 , 14 @ @ public class SimpleCType extends AbstractCType 
 ByteBuffer b1 = c1 . toByteBuffer ( ) ; 
 ByteBuffer b2 = c2 . toByteBuffer ( ) ; 
 if ( ! b1 . hasRemaining ( ) | | ! b2 . hasRemaining ( ) ) 
 - 
 + return b1 . hasRemaining ( ) ? 1 : ( b2 . hasRemaining ( ) ? - 1 : 0 ) ; 
 return ByteBufferUtil . compareUnsigned ( b1 , b2 ) ; 
 } 
 
 boolean c1isEmpty = c1 . isEmpty ( ) ; 
 boolean c2isEmpty = c2 . isEmpty ( ) ; 
 if ( c1isEmpty | | c2isEmpty ) 
 - return c1isEmpty ? 1 : ( c2isEmpty ? - 1 : 0 ) ; 
 + return ! c1isEmpty ? 1 : ( ! c2isEmpty ? - 1 : 0 ) ; 
 
 return type . compare ( c1 . get ( 0 ) , c2 . get ( 0 ) ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / composites / CTypeTest . java b / test / unit / org / apache / cassandra / db / composites / CTypeTest . java 
 new file mode 100644 
 index 0000000 . . 4bd755b 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / db / composites / CTypeTest . java 
 @ @ - 0 , 0 + 1 , 123 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . db . composites ; 
 + 
 + import com . google . common . collect . Lists ; 
 + import org . apache . cassandra . db . marshal . * ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . junit . Test ; 
 + 
 + import java . util . List ; 
 + 
 + public class CTypeTest 
 + { 
 + static final List < AbstractType < ? > > types = Lists . newArrayList ( ) ; 
 + static 
 + { 
 + types . add ( UTF8Type . instance ) ; 
 + types . add ( UUIDType . instance ) ; 
 + types . add ( Int32Type . instance ) ; 
 + } 
 + 
 + static final CellNameType cdtype = new CompoundDenseCellNameType ( types ) ; 
 + static final CellNameType stype1 = new SimpleDenseCellNameType ( BytesType . instance ) ; 
 + static final CellNameType stype2 = new SimpleDenseCellNameType ( UUIDType . instance ) ; 
 + 
 + @ Test 
 + public void testCompoundType ( ) 
 + { 
 + Composite a1 = cdtype . makeCellName ( " a " , UUIDType . instance . fromString ( " 00000000 - 0000 - 0000 - 0000 - 000000000000 " ) , 1 ) ; 
 + Composite a2 = cdtype . makeCellName ( " a " , UUIDType . instance . fromString ( " 00000000 - 0000 - 0000 - 0000 - 000000000000 " ) , 100 ) ; 
 + Composite b1 = cdtype . makeCellName ( " a " , UUIDType . instance . fromString ( " ffffffff - ffff - ffff - ffff - ffffffffffff " ) , 1 ) ; 
 + Composite b2 = cdtype . makeCellName ( " a " , UUIDType . instance . fromString ( " ffffffff - ffff - ffff - ffff - ffffffffffff " ) , 100 ) ; 
 + Composite c1 = cdtype . makeCellName ( " z " , UUIDType . instance . fromString ( " 00000000 - 0000 - 0000 - 0000 - 000000000000 " ) , 1 ) ; 
 + Composite c2 = cdtype . makeCellName ( " z " , UUIDType . instance . fromString ( " 00000000 - 0000 - 0000 - 0000 - 000000000000 " ) , 100 ) ; 
 + Composite d1 = cdtype . makeCellName ( " z " , UUIDType . instance . fromString ( " ffffffff - ffff - ffff - ffff - ffffffffffff " ) , 1 ) ; 
 + Composite d2 = cdtype . makeCellName ( " z " , UUIDType . instance . fromString ( " ffffffff - ffff - ffff - ffff - ffffffffffff " ) , 100 ) ; 
 + 
 + Composite z1 = cdtype . makeCellName ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , UUIDType . instance . fromString ( " ffffffff - ffff - ffff - ffff - ffffffffffff " ) , 100 ) ; 
 + 
 + assert cdtype . compare ( a1 , a2 ) < 0 ; 
 + assert cdtype . compare ( a2 , b1 ) < 0 ; 
 + assert cdtype . compare ( b1 , b2 ) < 0 ; 
 + assert cdtype . compare ( b2 , c1 ) < 0 ; 
 + assert cdtype . compare ( c1 , c2 ) < 0 ; 
 + assert cdtype . compare ( c2 , d1 ) < 0 ; 
 + assert cdtype . compare ( d1 , d2 ) < 0 ; 
 + 
 + assert cdtype . compare ( a2 , a1 ) > 0 ; 
 + assert cdtype . compare ( b1 , a2 ) > 0 ; 
 + assert cdtype . compare ( b2 , b1 ) > 0 ; 
 + assert cdtype . compare ( c1 , b2 ) > 0 ; 
 + assert cdtype . compare ( c2 , c1 ) > 0 ; 
 + assert cdtype . compare ( d1 , c2 ) > 0 ; 
 + assert cdtype . compare ( d2 , d1 ) > 0 ; 
 + 
 + assert cdtype . compare ( z1 , a1 ) < 0 ; 
 + assert cdtype . compare ( z1 , a2 ) < 0 ; 
 + assert cdtype . compare ( z1 , b1 ) < 0 ; 
 + assert cdtype . compare ( z1 , b2 ) < 0 ; 
 + assert cdtype . compare ( z1 , c1 ) < 0 ; 
 + assert cdtype . compare ( z1 , c2 ) < 0 ; 
 + assert cdtype . compare ( z1 , d1 ) < 0 ; 
 + assert cdtype . compare ( z1 , d2 ) < 0 ; 
 + 
 + assert cdtype . compare ( a1 , a1 ) = = 0 ; 
 + assert cdtype . compare ( a2 , a2 ) = = 0 ; 
 + assert cdtype . compare ( b1 , b1 ) = = 0 ; 
 + assert cdtype . compare ( b2 , b2 ) = = 0 ; 
 + assert cdtype . compare ( c1 , c1 ) = = 0 ; 
 + assert cdtype . compare ( c2 , c2 ) = = 0 ; 
 + assert cdtype . compare ( z1 , z1 ) = = 0 ; 
 + } 
 + 
 + @ Test 
 + public void testSimpleType2 ( ) 
 + { 
 + CellName a = stype2 . makeCellName ( UUIDType . instance . fromString ( " 00000000 - 0000 - 0000 - 0000 - 000000000000 " ) ) ; 
 + CellName z = stype2 . makeCellName ( UUIDType . instance . fromString ( " ffffffff - ffff - ffff - ffff - ffffffffffff " ) ) ; 
 + Composite empty = Composites . EMPTY ; 
 + 
 + assert stype2 . compare ( a , z ) < 0 ; 
 + assert stype2 . compare ( z , a ) > 0 ; 
 + assert stype2 . compare ( a , a ) = = 0 ; 
 + assert stype2 . compare ( z , z ) = = 0 ; 
 + assert stype2 . compare ( empty , a ) < 0 ; 
 + assert stype2 . compare ( a , empty ) > 0 ; 
 + assert stype2 . compare ( empty , empty ) = = 0 ; 
 + } 
 + 
 + 
 + @ Test 
 + public void testSimpleType1 ( ) 
 + { 
 + CellName a = stype1 . makeCellName ( ByteBufferUtil . bytes ( " a " ) ) ; 
 + CellName z = stype1 . makeCellName ( ByteBufferUtil . bytes ( " z " ) ) ; 
 + Composite empty = Composites . EMPTY ; 
 + 
 + assert stype1 . compare ( a , z ) < 0 ; 
 + assert stype1 . compare ( z , a ) > 0 ; 
 + assert stype1 . compare ( a , a ) = = 0 ; 
 + assert stype1 . compare ( z , z ) = = 0 ; 
 + assert stype1 . compare ( empty , a ) < 0 ; 
 + assert stype1 . compare ( a , empty ) > 0 ; 
 + assert stype1 . compare ( empty , empty ) = = 0 ; 
 + 
 + } 
 + 
 + }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 index 1f235df . . 25e1072 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra . concurrent ; 
 
 import java . lang . management . ManagementFactory ; 
 + import java . util . List ; 
 import java . util . concurrent . * ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . log4j . Logger ; 
 public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean 
 { 
 private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; 
 + private final String mbeanName ; 
 
 public DebuggableThreadPoolExecutor ( String threadPoolName ) 
 { 
 @ @ - 51 , 9 + 53 , 10 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 super . prestartAllCoreThreads ( ) ; 
 
 MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + mbeanName = " org . apache . cassandra . concurrent : type = " + threadFactory . id ; 
 try 
 { 
 - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id ) ) ; 
 + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 84 , 6 + 87 , 33 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 } 
 } 
 
 + private void unregisterMBean ( ) 
 + { 
 + try 
 + { 
 + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; 
 + } 
 + catch ( Exception ex ) 
 + { 
 + / / don ' t let it get in the way , but notify . 
 + logger _ . error ( ex . getMessage ( ) , ex ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void shutdown ( ) 
 + { 
 + unregisterMBean ( ) ; 
 + super . shutdown ( ) ; 
 + } 
 + 
 + @ Override 
 + public List < Runnable > shutdownNow ( ) 
 + { 
 + unregisterMBean ( ) ; 
 + return super . shutdownNow ( ) ; 
 + } 
 + 
 / * * 
 * Get the number of completed tasks 
 * / 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 3b70d17 . . f5d8d35 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 122 , 7 + 122 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 return gossiper _ ; 
 } 
 
 - private Timer gossipTimer _ = new Timer ( false ) ; 
 + private Timer gossipTimer _ ; 
 private InetAddress localEndPoint _ ; 
 private long aVeryLongTime _ ; 
 private Random random _ = new Random ( ) ; 
 @ @ - 144 , 6 + 144 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 
 private Gossiper ( ) 
 { 
 + gossipTimer _ = new Timer ( false ) ; 
 aVeryLongTime _ = 259200 * 1000 ; 
 / * register with the Failure Detector for receiving Failure detector events * / 
 FailureDetector . instance ( ) . registerFailureDetectionEventListener ( this ) ; 
 @ @ - 834 , 6 + 835 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 public void stop ( ) 
 { 
 gossipTimer _ . cancel ( ) ; 
 + gossipTimer _ = new Timer ( false ) ; / / makes the Gossiper reentrant . 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 8ff93f6 . . b1ad5ed 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 69 , 6 + 69 , 9 @ @ public class MessagingService 
 
 / * List of sockets we are listening on * / 
 private static Map < InetAddress , SelectionKey > listenSockets _ = new HashMap < InetAddress , SelectionKey > ( ) ; 
 + 
 + / * List of UdpConnections we are listening on * / 
 + private static Map < InetAddress , UdpConnection > udpConnections _ = new HashMap < InetAddress , UdpConnection > ( ) ; 
 
 / * Lookup table for registering message handlers based on the verb . * / 
 private static Map < String , IVerbHandler > verbHandlers _ ; 
 @ @ - 214 , 7 + 217 , 8 @ @ public class MessagingService 
 try 
 { 
 connection . init ( localEp ) ; 
 - endPoints _ . add ( localEp ) ; 
 + endPoints _ . add ( localEp ) ; 
 + udpConnections _ . put ( localEp , connection ) ; 
 } 
 catch ( IOException e ) 
 { 
 @ @ - 497 , 7 + 501 , 7 @ @ public class MessagingService 
 logger _ . info ( " Shutting down . . . " ) ; 
 synchronized ( MessagingService . class ) 
 { 
 - / * Stop listening on any socket * / 
 + / * Stop listening on any TCP socket * / 
 for ( SelectionKey skey : listenSockets _ . values ( ) ) 
 { 
 skey . cancel ( ) ; 
 @ @ - 509 , 6 + 513 , 13 @ @ public class MessagingService 
 } 
 listenSockets _ . clear ( ) ; 
 
 + / * Stop listening on any UDP ports . * / 
 + for ( UdpConnection con : udpConnections _ . values ( ) ) 
 + { 
 + con . close ( ) ; 
 + } 
 + udpConnections _ . clear ( ) ; 
 + 
 / * Shutdown the threads in the EventQueue ' s * / 
 messageDeserializationExecutor _ . shutdownNow ( ) ; 
 messageDeserializerExecutor _ . shutdownNow ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / net / SelectorManager . java b / src / java / org / apache / cassandra / net / SelectorManager . java 
 index 7623a05 . . 16511ee 100644 
 - - - a / src / java / org / apache / cassandra / net / SelectorManager . java 
 + + + b / src / java / org / apache / cassandra / net / SelectorManager . java 
 @ @ - 35 , 6 + 35 , 9 @ @ public class SelectorManager extends Thread 
 / / workaround JDK select / register bug 
 Object gate = new Object ( ) ; 
 
 + / / flag to indicate that shutdown has been requested . 
 + private boolean shutdownRequested = false ; 
 + 
 / / The static selector manager which is used by all applications 
 private static SelectorManager manager ; 
 
 @ @ - 82 , 7 + 85 , 13 @ @ public class SelectorManager extends Thread 
 selector . wakeup ( ) ; 
 return channel . register ( selector , ops , handler ) ; 
 } 
 - } 
 + } 
 + 
 + / / requests the thread to shutdown . However , it brings no guarantees . Added for testing . 
 + private void requestShutdown ( ) 
 + { 
 + shutdownRequested = true ; 
 + } 
 
 / * * 
 * This method starts the socket manager listening for events . It is 
 @ @ - 102 , 6 + 111 , 11 @ @ public class SelectorManager extends Thread 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 + if ( shutdownRequested ) 
 + { 
 + shutdownRequested = false ; 
 + break ; 
 + } 
 } 
 } 
 
 @ @ - 145 , 6 + 159 , 22 @ @ public class SelectorManager extends Thread 
 } 
 
 / * * 
 + * Intended to reset the singleton as part of testing . 
 + * / 
 + static void reset ( ) 
 + { 
 + synchronized ( SelectorManager . class ) 
 + { 
 + if ( manager ! = null ) 
 + manager . requestShutdown ( ) ; 
 + manager = null ; 
 + if ( udpManager ! = null ) 
 + udpManager . requestShutdown ( ) ; 
 + udpManager = null ; 
 + } 
 + } 
 + 
 + / * * 
 * Returns the SelectorManager applications should use . 
 * 
 * @ return The SelectorManager which applications should use 
 diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java 
 index 969a2cd . . e3cde8d 100644 
 - - - a / test / unit / org / apache / cassandra / CleanupHelper . java 
 + + + b / test / unit / org / apache / cassandra / CleanupHelper . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . BeforeClass ; 
 
 @ @ - 30 , 6 + 31 , 13 @ @ public class CleanupHelper 
 private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; 
 
 @ BeforeClass 
 + public static void cleanupAndLeaveDirs ( ) 
 + { 
 + mkdirs ( ) ; 
 + cleanup ( ) ; 
 + mkdirs ( ) ; 
 + } 
 + 
 public static void cleanup ( ) 
 { 
 / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) 
 @ @ - 38 , 6 + 46 , 10 @ @ public class CleanupHelper 
 DatabaseDescriptor . getLogFileLocation ( ) , 
 } ; 
 
 + / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process 
 + / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally 
 + / / put there . 
 + 
 for ( String dirName : directoryNames ) 
 { 
 File dir = new File ( dirName ) ; 
 @ @ - 47 , 11 + 59 , 15 @ @ public class CleanupHelper 
 } 
 for ( File f : dir . listFiles ( ) ) 
 { 
 - if ( ! f . delete ( ) ) { 
 + if ( ! f . delete ( ) ) 
 + { 
 logger . error ( " could not delete " + f ) ; 
 + } 
 } 
 + 
 + if ( ! dir . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 - } 
 
 / / cleanup data directory which are stored as data directory / table / data files 
 for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 @ @ - 71 , 8 + 87 , 24 @ @ public class CleanupHelper 
 } 
 } 
 } 
 + if ( ! tableFile . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 + 
 + if ( ! dir . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 + } 
 
 + public static void mkdirs ( ) 
 + { 
 + try 
 + { 
 + DatabaseDescriptor . createAllDirectories ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / net / NetPackageAccessor . java b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java 
 new file mode 100644 
 index 0000000 . . 408bfba 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . net ; 
 + 
 + / * * 
 + For accesing package - level members created for the sole purpose of testing . 
 + * / 
 + public class NetPackageAccessor 
 + { 
 + public static void resetSelectorManager ( ) 
 + { 
 + SelectorManager . reset ( ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceTest . java b / test / unit / org / apache / cassandra / service / StorageServiceTest . java 
 new file mode 100644 
 index 0000000 . . 0ec9ffe 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / service / StorageServiceTest . java 
 @ @ - 0 , 0 + 1 , 68 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + 
 + package org . apache . cassandra . service ; 
 + 
 + import org . apache . cassandra . CleanupHelper ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . net . NetPackageAccessor ; 
 + import org . junit . Test ; 
 + import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . assertFalse ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + public class StorageServiceTest 
 + { 
 + @ Test 
 + public void testClientOnlyMode ( ) throws IOException 
 + { 
 + CleanupHelper . mkdirs ( ) ; 
 + CleanupHelper . cleanup ( ) ; 
 + StorageService . instance ( ) . initClient ( ) ; 
 + 
 + / / verify that no storage directories were created . 
 + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 + { 
 + assertFalse ( new File ( path ) . exists ( ) ) ; 
 + } 
 + StorageService . instance ( ) . stopClient ( ) ; 
 + NetPackageAccessor . resetSelectorManager ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegularMode ( ) throws IOException , InterruptedException 
 + { 
 + CleanupHelper . mkdirs ( ) ; 
 + CleanupHelper . cleanup ( ) ; 
 + StorageService . instance ( ) . initServer ( ) ; 
 + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 + { 
 + / / verify that storage directories are there . 
 + assertTrue ( new File ( path ) . exists ( ) ) ; 
 + } 
 + / / a proper test would be to call decommission here , but decommission ( ) mixes both shutdown and datatransfer 
 + / / calls . This test is only interested in the shutdown - related items which a properly handled by just 
 + / / stopping the client . 
 + / / StorageService . instance ( ) . decommission ( ) ; 
 + StorageService . instance ( ) . stopClient ( ) ; 
 + NetPackageAccessor . resetSelectorManager ( ) ; 
 + } 
 + }
