BLEU SCORE: 0.029859662827819124

TEST MSG: Add nodetool getseeds and reloadseeds commands
GENERATED MSG: improve testing of StorageService init , and fix shutdown of messagingservice .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e28ffd9 . . a2e3654 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Non - disruptive seed node list reload ( CASSANDRA - 14190 ) <nl> * Nodetool tablehistograms to print statics for all the tables ( CASSANDRA - 14185 ) <nl> * Migrate dtests to use pytest and python3 ( CASSANDRA - 14134 ) <nl> * Allow storage port to be configurable per node ( CASSANDRA - 7544 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 9012e3a . . 8e831cf 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 1661 , 6 + 1661 , 16 @ @ public class DatabaseDescriptor <nl> return ImmutableSet . < InetAddressAndPort > builder ( ) . addAll ( seedProvider . getSeeds ( ) ) . build ( ) ; <nl> } <nl> <nl> + public static SeedProvider getSeedProvider ( ) <nl> + { <nl> + return seedProvider ; <nl> + } <nl> + <nl> + public static void setSeedProvider ( SeedProvider newSeedProvider ) <nl> + { <nl> + seedProvider = newSeedProvider ; <nl> + } <nl> + <nl> public static InetAddress getListenAddress ( ) <nl> { <nl> return listenAddress ; <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index eb6c500 . . a4e46f2 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . util . concurrent . Uninterruptibles ; <nl> <nl> import org . apache . cassandra . locator . InetAddressAndPort ; <nl> + import org . apache . cassandra . locator . SeedProvider ; <nl> import org . apache . cassandra . utils . CassandraVersion ; <nl> import org . apache . cassandra . utils . Pair ; <nl> import org . slf4j . Logger ; <nl> @ @ - 89 , 7 + 90 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> public final static int intervalInMillis = 1000 ; <nl> public final static int QUARANTINE _ DELAY = StorageService . RING _ DELAY * 2 ; <nl> private static final Logger logger = LoggerFactory . getLogger ( Gossiper . class ) ; <nl> - public static final Gossiper instance = new Gossiper ( ) ; <nl> + public static final Gossiper instance = new Gossiper ( true ) ; <nl> <nl> / / Timestamp to prevent processing any in - flight messages for we ' ve not send any SYN yet , see CASSANDRA - 12653 . <nl> volatile long firstSynSendAt = 0L ; <nl> @ @ - 199 , 7 + 200 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> } <nl> } <nl> <nl> - private Gossiper ( ) <nl> + Gossiper ( boolean registerJmx ) <nl> { <nl> / / half of QUARATINE _ DELAY , to ensure justRemovedEndpoints has enough leeway to prevent re - gossip <nl> fatClientTimeout = ( QUARANTINE _ DELAY / 2 ) ; <nl> @ @ - 207 , 14 + 208 , 17 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> FailureDetector . instance . registerFailureDetectionEventListener ( this ) ; <nl> <nl> / / Register this instance with JMX <nl> - try <nl> - { <nl> - MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> - mbs . registerMBean ( this , new ObjectName ( MBEAN _ NAME ) ) ; <nl> - } <nl> - catch ( Exception e ) <nl> + if ( registerJmx ) <nl> { <nl> - throw new RuntimeException ( e ) ; <nl> + try <nl> + { <nl> + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + mbs . registerMBean ( this , new ObjectName ( MBEAN _ NAME ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 1468 , 6 + 1472 , 67 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> } <nl> } <nl> <nl> + / * * <nl> + * JMX interface for triggering an update of the seed node list . <nl> + * / <nl> + public List < String > reloadSeeds ( ) <nl> + { <nl> + logger . trace ( " Triggering reload of seed node list " ) ; <nl> + <nl> + / / Get the new set in the same that buildSeedsList does <nl> + Set < InetAddressAndPort > tmp = new HashSet < > ( ) ; <nl> + try <nl> + { <nl> + for ( InetAddressAndPort seed : DatabaseDescriptor . getSeeds ( ) ) <nl> + { <nl> + if ( seed . equals ( FBUtilities . getBroadcastAddressAndPort ( ) ) ) <nl> + continue ; <nl> + tmp . add ( seed ) ; <nl> + } <nl> + } <nl> + / / If using the SimpleSeedProvider invalid yaml added to the config since startup could <nl> + / / cause this to throw . Additionally , third party seed providers may throw exceptions . <nl> + / / Handle the error and return a null to indicate that there was a problem . <nl> + catch ( Throwable e ) <nl> + { <nl> + JVMStabilityInspector . inspectThrowable ( e ) ; <nl> + logger . warn ( " Error while getting seed node list : { } " , e . getLocalizedMessage ( ) ) ; <nl> + return null ; <nl> + } <nl> + <nl> + if ( tmp . size ( ) = = 0 ) <nl> + { <nl> + logger . trace ( " New seed node list is empty . Not updating seed list . " ) ; <nl> + return getSeeds ( ) ; <nl> + } <nl> + <nl> + if ( tmp . equals ( seeds ) ) <nl> + { <nl> + logger . trace ( " New seed node list matches the existing list . " ) ; <nl> + return getSeeds ( ) ; <nl> + } <nl> + <nl> + / / Add the new entries <nl> + seeds . addAll ( tmp ) ; <nl> + / / Remove the old entries <nl> + seeds . retainAll ( tmp ) ; <nl> + logger . trace ( " New seed node list after reload { } " , seeds ) ; <nl> + return getSeeds ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * JMX endpoint for getting the list of seeds from the node <nl> + * / <nl> + public List < String > getSeeds ( ) <nl> + { <nl> + List < String > seedList = new ArrayList < String > ( ) ; <nl> + for ( InetAddressAndPort seed : seeds ) <nl> + { <nl> + seedList . add ( seed . toString ( ) ) ; <nl> + } <nl> + return seedList ; <nl> + } <nl> + <nl> / / initialize local HB state if needed , i . e . , if gossiper has never been started before . <nl> public void maybeInitializeLocalState ( int generationNbr ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / gms / GossiperMBean . java b / src / java / org / apache / cassandra / gms / GossiperMBean . java <nl> index c4b244c . . 1b116e1 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / GossiperMBean . java <nl> + + + b / src / java / org / apache / cassandra / gms / GossiperMBean . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> package org . apache . cassandra . gms ; <nl> <nl> import java . net . UnknownHostException ; <nl> + import java . util . List ; <nl> <nl> public interface GossiperMBean <nl> { <nl> @ @ - 29 , 4 + 30 , 8 @ @ public interface GossiperMBean <nl> <nl> public void assassinateEndpoint ( String address ) throws UnknownHostException ; <nl> <nl> + public List < String > reloadSeeds ( ) ; <nl> + <nl> + public List < String > getSeeds ( ) ; <nl> + <nl> } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index d330ed4 . . ec8f7ba 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 711 , 6 + 711 , 16 @ @ public class NodeProbe implements AutoCloseable <nl> gossProxy . assassinateEndpoint ( address ) ; <nl> } <nl> <nl> + public List < String > reloadSeeds ( ) <nl> + { <nl> + return gossProxy . reloadSeeds ( ) ; <nl> + } <nl> + <nl> + public List < String > getSeeds ( ) <nl> + { <nl> + return gossProxy . getSeeds ( ) ; <nl> + } <nl> + <nl> / * * <nl> * Set the compaction threshold <nl> * <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> index d707499 . . f7b7f76 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeTool . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> @ @ - 87 , 6 + 87 , 7 @ @ public class NodeTool <nl> GetTraceProbability . class , <nl> GetInterDCStreamThroughput . class , <nl> GetEndpoints . class , <nl> + GetSeeds . class , <nl> GetSSTables . class , <nl> GetMaxHintWindow . class , <nl> GossipInfo . class , <nl> @ @ - 102 , 6 + 103 , 7 @ @ public class NodeTool <nl> Refresh . class , <nl> RemoveNode . class , <nl> Assassinate . class , <nl> + ReloadSeeds . class , <nl> ResetFullQueryLog . class , <nl> Repair . class , <nl> RepairAdmin . class , <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / GetSeeds . java b / src / java / org / apache / cassandra / tools / nodetool / GetSeeds . java <nl> new file mode 100644 <nl> index 0000000 . . 207363c <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / GetSeeds . java <nl> @ @ - 0 , 0 + 1 , 44 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . tools . nodetool ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import io . airlift . airline . Command ; <nl> + <nl> + import org . apache . cassandra . tools . NodeProbe ; <nl> + import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; <nl> + <nl> + @ Command ( name = " getseeds " , description = " Get the currently in use seed node IP list excluding the node IP " ) <nl> + public class GetSeeds extends NodeToolCmd <nl> + { <nl> + @ Override <nl> + public void execute ( NodeProbe probe ) <nl> + { <nl> + List < String > seedList = probe . getSeeds ( ) ; <nl> + if ( seedList . isEmpty ( ) ) <nl> + { <nl> + System . out . println ( " Seed node list does not contain any remote node IPs " ) ; <nl> + } <nl> + else <nl> + { <nl> + System . out . println ( " Current list of seed node IPs , excluding the current node ' s IP : " + String . join ( " " , seedList ) ) ; <nl> + } <nl> + <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / ReloadSeeds . java b / src / java / org / apache / cassandra / tools / nodetool / ReloadSeeds . java <nl> new file mode 100644 <nl> index 0000000 . . b9682cf <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / ReloadSeeds . java <nl> @ @ - 0 , 0 + 1 , 47 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . tools . nodetool ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import io . airlift . airline . Command ; <nl> + <nl> + import org . apache . cassandra . tools . NodeProbe ; <nl> + import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; <nl> + <nl> + @ Command ( name = " reloadseeds " , description = " Reload the seed node list from the seed node provider " ) <nl> + public class ReloadSeeds extends NodeToolCmd <nl> + { <nl> + @ Override <nl> + public void execute ( NodeProbe probe ) <nl> + { <nl> + List < String > seedList = probe . reloadSeeds ( ) ; <nl> + if ( seedList = = null ) <nl> + { <nl> + System . out . println ( " Failed to reload the seed node list . " ) ; <nl> + } <nl> + else if ( seedList . isEmpty ( ) ) <nl> + { <nl> + System . out . println ( " Seed node list does not contain any remote node IPs " ) ; <nl> + } <nl> + else <nl> + { <nl> + System . out . println ( " Updated seed node IP list , excluding the current node ' s IP : " + String . join ( " " , seedList ) ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / gms / GossiperTest . java b / test / unit / org / apache / cassandra / gms / GossiperTest . java <nl> index 8c65cb4 . . b856983 100644 <nl> - - - a / test / unit / org / apache / cassandra / gms / GossiperTest . java <nl> + + + b / test / unit / org / apache / cassandra / gms / GossiperTest . java <nl> @ @ - 18 , 12 + 18 , 16 @ @ <nl> <nl> package org . apache . cassandra . gms ; <nl> <nl> + import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl> import java . util . UUID ; <nl> <nl> import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . net . InetAddresses ; <nl> + import org . junit . After ; <nl> + import org . junit . Assert ; <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 33 , 6 + 37 , 7 @ @ import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . dht . RandomPartitioner ; <nl> import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . locator . InetAddressAndPort ; <nl> + import org . apache . cassandra . locator . SeedProvider ; <nl> import org . apache . cassandra . locator . TokenMetadata ; <nl> import org . apache . cassandra . service . StorageService ; <nl> <nl> @ @ - 44 , 6 + 49 , 7 @ @ public class GossiperTest <nl> { <nl> DatabaseDescriptor . daemonInitialization ( ) ; <nl> } <nl> + <nl> static final IPartitioner partitioner = new RandomPartitioner ( ) ; <nl> StorageService ss = StorageService . instance ; <nl> TokenMetadata tmd = StorageService . instance . getTokenMetadata ( ) ; <nl> @ @ - 52 , 11 + 58 , 20 @ @ public class GossiperTest <nl> List < InetAddressAndPort > hosts = new ArrayList < > ( ) ; <nl> List < UUID > hostIds = new ArrayList < > ( ) ; <nl> <nl> + private SeedProvider originalSeedProvider ; <nl> + <nl> @ Before <nl> public void setup ( ) <nl> { <nl> tmd . clearUnsafe ( ) ; <nl> - } ; <nl> + originalSeedProvider = DatabaseDescriptor . getSeedProvider ( ) ; <nl> + } <nl> + <nl> + @ After <nl> + public void tearDown ( ) <nl> + { <nl> + DatabaseDescriptor . setSeedProvider ( originalSeedProvider ) ; <nl> + } <nl> <nl> @ Test <nl> public void testLargeGenerationJump ( ) throws UnknownHostException , InterruptedException <nl> @ @ - 90 , 4 + 105 , 127 @ @ public class GossiperTest <nl> / / The generation should not have been updated because it is over Gossiper . MAX _ GENERATION _ DIFFERENCE in the future <nl> assertEquals ( proposedRemoteHeartBeat . getGeneration ( ) , actualRemoteHeartBeat . getGeneration ( ) ) ; <nl> } <nl> + <nl> + / / Note : This test might fail if for some reason the node broadcast address is in 127 . 99 . 0 . 0 / 16 <nl> + @ Test <nl> + public void testReloadSeeds ( ) throws UnknownHostException <nl> + { <nl> + Gossiper gossiper = new Gossiper ( false ) ; <nl> + List < String > loadedList ; <nl> + <nl> + / / Initialize the seed list directly to a known set to start with <nl> + gossiper . seeds . clear ( ) ; <nl> + InetAddressAndPort addr = InetAddressAndPort . getByAddress ( InetAddress . getByName ( " 127 . 99 . 1 . 1 " ) ) ; <nl> + int nextSize = 4 ; <nl> + List < InetAddressAndPort > nextSeeds = new ArrayList < > ( nextSize ) ; <nl> + for ( int i = 0 ; i < nextSize ; i + + ) <nl> + { <nl> + gossiper . seeds . add ( addr ) ; <nl> + nextSeeds . add ( addr ) ; <nl> + addr = InetAddressAndPort . getByAddress ( InetAddresses . increment ( addr . address ) ) ; <nl> + } <nl> + Assert . assertEquals ( nextSize , gossiper . seeds . size ( ) ) ; <nl> + <nl> + / / Add another unique address to the list <nl> + addr = InetAddressAndPort . getByAddress ( InetAddresses . increment ( addr . address ) ) ; <nl> + nextSeeds . add ( addr ) ; <nl> + nextSize + + ; <nl> + DatabaseDescriptor . setSeedProvider ( new TestSeedProvider ( nextSeeds ) ) ; <nl> + loadedList = gossiper . reloadSeeds ( ) ; <nl> + <nl> + / / Check that the new entry was added <nl> + Assert . assertEquals ( nextSize , loadedList . size ( ) ) ; <nl> + for ( InetAddressAndPort a : nextSeeds ) <nl> + Assert . assertTrue ( loadedList . contains ( a . toString ( ) ) ) ; <nl> + <nl> + / / Check that the return value of the reloadSeeds matches the content of the getSeeds call <nl> + / / and that they both match the internal contents of the Gossiper seeds list <nl> + Assert . assertEquals ( loadedList . size ( ) , gossiper . getSeeds ( ) . size ( ) ) ; <nl> + for ( InetAddressAndPort a : gossiper . seeds ) <nl> + { <nl> + Assert . assertTrue ( loadedList . contains ( a . toString ( ) ) ) ; <nl> + Assert . assertTrue ( gossiper . getSeeds ( ) . contains ( a . toString ( ) ) ) ; <nl> + } <nl> + <nl> + / / Add a duplicate of the last address to the seed provider list <nl> + int uniqueSize = nextSize ; <nl> + nextSeeds . add ( addr ) ; <nl> + nextSize + + ; <nl> + DatabaseDescriptor . setSeedProvider ( new TestSeedProvider ( nextSeeds ) ) ; <nl> + loadedList = gossiper . reloadSeeds ( ) ; <nl> + <nl> + / / Check that the number of seed nodes reported hasn ' t increased <nl> + Assert . assertEquals ( uniqueSize , loadedList . size ( ) ) ; <nl> + for ( InetAddressAndPort a : nextSeeds ) <nl> + Assert . assertTrue ( loadedList . contains ( a . toString ( ) ) ) ; <nl> + <nl> + / / Create a new list that has no overlaps with the previous list <nl> + addr = InetAddressAndPort . getByAddress ( InetAddress . getByName ( " 127 . 99 . 2 . 1 " ) ) ; <nl> + int disjointSize = 3 ; <nl> + List < InetAddressAndPort > disjointSeeds = new ArrayList < > ( disjointSize ) ; <nl> + for ( int i = 0 ; i < disjointSize ; i + + ) <nl> + { <nl> + disjointSeeds . add ( addr ) ; <nl> + addr = InetAddressAndPort . getByAddress ( InetAddresses . increment ( addr . address ) ) ; <nl> + } <nl> + DatabaseDescriptor . setSeedProvider ( new TestSeedProvider ( disjointSeeds ) ) ; <nl> + loadedList = gossiper . reloadSeeds ( ) ; <nl> + <nl> + / / Check that the list now contains exactly the new other list . <nl> + Assert . assertEquals ( disjointSize , gossiper . getSeeds ( ) . size ( ) ) ; <nl> + Assert . assertEquals ( disjointSize , loadedList . size ( ) ) ; <nl> + for ( InetAddressAndPort a : disjointSeeds ) <nl> + { <nl> + Assert . assertTrue ( gossiper . getSeeds ( ) . contains ( a . toString ( ) ) ) ; <nl> + Assert . assertTrue ( loadedList . contains ( a . toString ( ) ) ) ; <nl> + } <nl> + <nl> + / / Set the seed node provider to return an empty list <nl> + DatabaseDescriptor . setSeedProvider ( new TestSeedProvider ( new ArrayList < InetAddressAndPort > ( ) ) ) ; <nl> + loadedList = gossiper . reloadSeeds ( ) ; <nl> + <nl> + / / Check that the in memory seed node list was not modified <nl> + Assert . assertEquals ( disjointSize , loadedList . size ( ) ) ; <nl> + for ( InetAddressAndPort a : disjointSeeds ) <nl> + Assert . assertTrue ( loadedList . contains ( a . toString ( ) ) ) ; <nl> + <nl> + / / Change the seed provider to one that throws an unchecked exception <nl> + DatabaseDescriptor . setSeedProvider ( new ErrorSeedProvider ( ) ) ; <nl> + loadedList = gossiper . reloadSeeds ( ) ; <nl> + <nl> + / / Check for the expected null response from a reload error <nl> + Assert . assertNull ( loadedList ) ; <nl> + <nl> + / / Check that the in memory seed node list was not modified and the exception was caught <nl> + Assert . assertEquals ( disjointSize , gossiper . getSeeds ( ) . size ( ) ) ; <nl> + for ( InetAddressAndPort a : disjointSeeds ) <nl> + Assert . assertTrue ( gossiper . getSeeds ( ) . contains ( a . toString ( ) ) ) ; <nl> + } <nl> + <nl> + static class TestSeedProvider implements SeedProvider <nl> + { <nl> + private List < InetAddressAndPort > seeds ; <nl> + <nl> + TestSeedProvider ( List < InetAddressAndPort > seeds ) <nl> + { <nl> + this . seeds = seeds ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < InetAddressAndPort > getSeeds ( ) <nl> + { <nl> + return seeds ; <nl> + } <nl> + } <nl> + <nl> + / / A seed provider for testing which throws assertion errors when queried <nl> + static class ErrorSeedProvider implements SeedProvider <nl> + { <nl> + @ Override <nl> + public List < InetAddressAndPort > getSeeds ( ) <nl> + { <nl> + assert ( false ) ; <nl> + return new ArrayList < > ( ) ; <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> index 1f235df . . 25e1072 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra . concurrent ; <nl> <nl> import java . lang . management . ManagementFactory ; <nl> + import java . util . List ; <nl> import java . util . concurrent . * ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . log4j . Logger ; <nl> public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean <nl> { <nl> private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; <nl> + private final String mbeanName ; <nl> <nl> public DebuggableThreadPoolExecutor ( String threadPoolName ) <nl> { <nl> @ @ - 51 , 9 + 53 , 10 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> super . prestartAllCoreThreads ( ) ; <nl> <nl> MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + mbeanName = " org . apache . cassandra . concurrent : type = " + threadFactory . id ; <nl> try <nl> { <nl> - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id ) ) ; <nl> + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 84 , 6 + 87 , 33 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> } <nl> } <nl> <nl> + private void unregisterMBean ( ) <nl> + { <nl> + try <nl> + { <nl> + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; <nl> + } <nl> + catch ( Exception ex ) <nl> + { <nl> + / / don ' t let it get in the way , but notify . <nl> + logger _ . error ( ex . getMessage ( ) , ex ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void shutdown ( ) <nl> + { <nl> + unregisterMBean ( ) ; <nl> + super . shutdown ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < Runnable > shutdownNow ( ) <nl> + { <nl> + unregisterMBean ( ) ; <nl> + return super . shutdownNow ( ) ; <nl> + } <nl> + <nl> / * * <nl> * Get the number of completed tasks <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 3b70d17 . . f5d8d35 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 122 , 7 + 122 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> return gossiper _ ; <nl> } <nl> <nl> - private Timer gossipTimer _ = new Timer ( false ) ; <nl> + private Timer gossipTimer _ ; <nl> private InetAddress localEndPoint _ ; <nl> private long aVeryLongTime _ ; <nl> private Random random _ = new Random ( ) ; <nl> @ @ - 144 , 6 + 144 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> <nl> private Gossiper ( ) <nl> { <nl> + gossipTimer _ = new Timer ( false ) ; <nl> aVeryLongTime _ = 259200 * 1000 ; <nl> / * register with the Failure Detector for receiving Failure detector events * / <nl> FailureDetector . instance ( ) . registerFailureDetectionEventListener ( this ) ; <nl> @ @ - 834 , 6 + 835 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> public void stop ( ) <nl> { <nl> gossipTimer _ . cancel ( ) ; <nl> + gossipTimer _ = new Timer ( false ) ; / / makes the Gossiper reentrant . <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 8ff93f6 . . b1ad5ed 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 69 , 6 + 69 , 9 @ @ public class MessagingService <nl> <nl> / * List of sockets we are listening on * / <nl> private static Map < InetAddress , SelectionKey > listenSockets _ = new HashMap < InetAddress , SelectionKey > ( ) ; <nl> + <nl> + / * List of UdpConnections we are listening on * / <nl> + private static Map < InetAddress , UdpConnection > udpConnections _ = new HashMap < InetAddress , UdpConnection > ( ) ; <nl> <nl> / * Lookup table for registering message handlers based on the verb . * / <nl> private static Map < String , IVerbHandler > verbHandlers _ ; <nl> @ @ - 214 , 7 + 217 , 8 @ @ public class MessagingService <nl> try <nl> { <nl> connection . init ( localEp ) ; <nl> - endPoints _ . add ( localEp ) ; <nl> + endPoints _ . add ( localEp ) ; <nl> + udpConnections _ . put ( localEp , connection ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> @ @ - 497 , 7 + 501 , 7 @ @ public class MessagingService <nl> logger _ . info ( " Shutting down . . . " ) ; <nl> synchronized ( MessagingService . class ) <nl> { <nl> - / * Stop listening on any socket * / <nl> + / * Stop listening on any TCP socket * / <nl> for ( SelectionKey skey : listenSockets _ . values ( ) ) <nl> { <nl> skey . cancel ( ) ; <nl> @ @ - 509 , 6 + 513 , 13 @ @ public class MessagingService <nl> } <nl> listenSockets _ . clear ( ) ; <nl> <nl> + / * Stop listening on any UDP ports . * / <nl> + for ( UdpConnection con : udpConnections _ . values ( ) ) <nl> + { <nl> + con . close ( ) ; <nl> + } <nl> + udpConnections _ . clear ( ) ; <nl> + <nl> / * Shutdown the threads in the EventQueue ' s * / <nl> messageDeserializationExecutor _ . shutdownNow ( ) ; <nl> messageDeserializerExecutor _ . shutdownNow ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / net / SelectorManager . java b / src / java / org / apache / cassandra / net / SelectorManager . java <nl> index 7623a05 . . 16511ee 100644 <nl> - - - a / src / java / org / apache / cassandra / net / SelectorManager . java <nl> + + + b / src / java / org / apache / cassandra / net / SelectorManager . java <nl> @ @ - 35 , 6 + 35 , 9 @ @ public class SelectorManager extends Thread <nl> / / workaround JDK select / register bug <nl> Object gate = new Object ( ) ; <nl> <nl> + / / flag to indicate that shutdown has been requested . <nl> + private boolean shutdownRequested = false ; <nl> + <nl> / / The static selector manager which is used by all applications <nl> private static SelectorManager manager ; <nl> <nl> @ @ - 82 , 7 + 85 , 13 @ @ public class SelectorManager extends Thread <nl> selector . wakeup ( ) ; <nl> return channel . register ( selector , ops , handler ) ; <nl> } <nl> - } <nl> + } <nl> + <nl> + / / requests the thread to shutdown . However , it brings no guarantees . Added for testing . <nl> + private void requestShutdown ( ) <nl> + { <nl> + shutdownRequested = true ; <nl> + } <nl> <nl> / * * <nl> * This method starts the socket manager listening for events . It is <nl> @ @ - 102 , 6 + 111 , 11 @ @ public class SelectorManager extends Thread <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> + if ( shutdownRequested ) <nl> + { <nl> + shutdownRequested = false ; <nl> + break ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 145 , 6 + 159 , 22 @ @ public class SelectorManager extends Thread <nl> } <nl> <nl> / * * <nl> + * Intended to reset the singleton as part of testing . <nl> + * / <nl> + static void reset ( ) <nl> + { <nl> + synchronized ( SelectorManager . class ) <nl> + { <nl> + if ( manager ! = null ) <nl> + manager . requestShutdown ( ) ; <nl> + manager = null ; <nl> + if ( udpManager ! = null ) <nl> + udpManager . requestShutdown ( ) ; <nl> + udpManager = null ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Returns the SelectorManager applications should use . <nl> * <nl> * @ return The SelectorManager which applications should use <nl> diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> index 969a2cd . . e3cde8d 100644 <nl> - - - a / test / unit / org / apache / cassandra / CleanupHelper . java <nl> + + + b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . BeforeClass ; <nl> <nl> @ @ - 30 , 6 + 31 , 13 @ @ public class CleanupHelper <nl> private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; <nl> <nl> @ BeforeClass <nl> + public static void cleanupAndLeaveDirs ( ) <nl> + { <nl> + mkdirs ( ) ; <nl> + cleanup ( ) ; <nl> + mkdirs ( ) ; <nl> + } <nl> + <nl> public static void cleanup ( ) <nl> { <nl> / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) <nl> @ @ - 38 , 6 + 46 , 10 @ @ public class CleanupHelper <nl> DatabaseDescriptor . getLogFileLocation ( ) , <nl> } ; <nl> <nl> + / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process <nl> + / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally <nl> + / / put there . <nl> + <nl> for ( String dirName : directoryNames ) <nl> { <nl> File dir = new File ( dirName ) ; <nl> @ @ - 47 , 11 + 59 , 15 @ @ public class CleanupHelper <nl> } <nl> for ( File f : dir . listFiles ( ) ) <nl> { <nl> - if ( ! f . delete ( ) ) { <nl> + if ( ! f . delete ( ) ) <nl> + { <nl> logger . error ( " could not delete " + f ) ; <nl> + } <nl> } <nl> + <nl> + if ( ! dir . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> - } <nl> <nl> / / cleanup data directory which are stored as data directory / table / data files <nl> for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> @ @ - 71 , 8 + 87 , 24 @ @ public class CleanupHelper <nl> } <nl> } <nl> } <nl> + if ( ! tableFile . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> + <nl> + if ( ! dir . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> + } <nl> <nl> + public static void mkdirs ( ) <nl> + { <nl> + try <nl> + { <nl> + DatabaseDescriptor . createAllDirectories ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / net / NetPackageAccessor . java b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java <nl> new file mode 100644 <nl> index 0000000 . . 408bfba <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java <nl> @ @ - 0 , 0 + 1 , 29 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . net ; <nl> + <nl> + / * * <nl> + For accesing package - level members created for the sole purpose of testing . <nl> + * / <nl> + public class NetPackageAccessor <nl> + { <nl> + public static void resetSelectorManager ( ) <nl> + { <nl> + SelectorManager . reset ( ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceTest . java b / test / unit / org / apache / cassandra / service / StorageServiceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0ec9ffe <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / service / StorageServiceTest . java <nl> @ @ - 0 , 0 + 1 , 68 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import org . apache . cassandra . CleanupHelper ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . net . NetPackageAccessor ; <nl> + import org . junit . Test ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + public class StorageServiceTest <nl> + { <nl> + @ Test <nl> + public void testClientOnlyMode ( ) throws IOException <nl> + { <nl> + CleanupHelper . mkdirs ( ) ; <nl> + CleanupHelper . cleanup ( ) ; <nl> + StorageService . instance ( ) . initClient ( ) ; <nl> + <nl> + / / verify that no storage directories were created . <nl> + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> + { <nl> + assertFalse ( new File ( path ) . exists ( ) ) ; <nl> + } <nl> + StorageService . instance ( ) . stopClient ( ) ; <nl> + NetPackageAccessor . resetSelectorManager ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegularMode ( ) throws IOException , InterruptedException <nl> + { <nl> + CleanupHelper . mkdirs ( ) ; <nl> + CleanupHelper . cleanup ( ) ; <nl> + StorageService . instance ( ) . initServer ( ) ; <nl> + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> + { <nl> + / / verify that storage directories are there . <nl> + assertTrue ( new File ( path ) . exists ( ) ) ; <nl> + } <nl> + / / a proper test would be to call decommission here , but decommission ( ) mixes both shutdown and datatransfer <nl> + / / calls . This test is only interested in the shutdown - related items which a properly handled by just <nl> + / / stopping the client . <nl> + / / StorageService . instance ( ) . decommission ( ) ; <nl> + StorageService . instance ( ) . stopClient ( ) ; <nl> + NetPackageAccessor . resetSelectorManager ( ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e28ffd9 . . a2e3654 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Non - disruptive seed node list reload ( CASSANDRA - 14190 ) 
 * Nodetool tablehistograms to print statics for all the tables ( CASSANDRA - 14185 ) 
 * Migrate dtests to use pytest and python3 ( CASSANDRA - 14134 ) 
 * Allow storage port to be configurable per node ( CASSANDRA - 7544 ) 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 9012e3a . . 8e831cf 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 1661 , 6 + 1661 , 16 @ @ public class DatabaseDescriptor 
 return ImmutableSet . < InetAddressAndPort > builder ( ) . addAll ( seedProvider . getSeeds ( ) ) . build ( ) ; 
 } 
 
 + public static SeedProvider getSeedProvider ( ) 
 + { 
 + return seedProvider ; 
 + } 
 + 
 + public static void setSeedProvider ( SeedProvider newSeedProvider ) 
 + { 
 + seedProvider = newSeedProvider ; 
 + } 
 + 
 public static InetAddress getListenAddress ( ) 
 { 
 return listenAddress ; 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index eb6c500 . . a4e46f2 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import com . google . common . collect . ImmutableMap ; 
 import com . google . common . util . concurrent . Uninterruptibles ; 
 
 import org . apache . cassandra . locator . InetAddressAndPort ; 
 + import org . apache . cassandra . locator . SeedProvider ; 
 import org . apache . cassandra . utils . CassandraVersion ; 
 import org . apache . cassandra . utils . Pair ; 
 import org . slf4j . Logger ; 
 @ @ - 89 , 7 + 90 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 public final static int intervalInMillis = 1000 ; 
 public final static int QUARANTINE _ DELAY = StorageService . RING _ DELAY * 2 ; 
 private static final Logger logger = LoggerFactory . getLogger ( Gossiper . class ) ; 
 - public static final Gossiper instance = new Gossiper ( ) ; 
 + public static final Gossiper instance = new Gossiper ( true ) ; 
 
 / / Timestamp to prevent processing any in - flight messages for we ' ve not send any SYN yet , see CASSANDRA - 12653 . 
 volatile long firstSynSendAt = 0L ; 
 @ @ - 199 , 7 + 200 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 } 
 } 
 
 - private Gossiper ( ) 
 + Gossiper ( boolean registerJmx ) 
 { 
 / / half of QUARATINE _ DELAY , to ensure justRemovedEndpoints has enough leeway to prevent re - gossip 
 fatClientTimeout = ( QUARANTINE _ DELAY / 2 ) ; 
 @ @ - 207 , 14 + 208 , 17 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 FailureDetector . instance . registerFailureDetectionEventListener ( this ) ; 
 
 / / Register this instance with JMX 
 - try 
 - { 
 - MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 - mbs . registerMBean ( this , new ObjectName ( MBEAN _ NAME ) ) ; 
 - } 
 - catch ( Exception e ) 
 + if ( registerJmx ) 
 { 
 - throw new RuntimeException ( e ) ; 
 + try 
 + { 
 + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + mbs . registerMBean ( this , new ObjectName ( MBEAN _ NAME ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 } 
 
 @ @ - 1468 , 6 + 1472 , 67 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 } 
 } 
 
 + / * * 
 + * JMX interface for triggering an update of the seed node list . 
 + * / 
 + public List < String > reloadSeeds ( ) 
 + { 
 + logger . trace ( " Triggering reload of seed node list " ) ; 
 + 
 + / / Get the new set in the same that buildSeedsList does 
 + Set < InetAddressAndPort > tmp = new HashSet < > ( ) ; 
 + try 
 + { 
 + for ( InetAddressAndPort seed : DatabaseDescriptor . getSeeds ( ) ) 
 + { 
 + if ( seed . equals ( FBUtilities . getBroadcastAddressAndPort ( ) ) ) 
 + continue ; 
 + tmp . add ( seed ) ; 
 + } 
 + } 
 + / / If using the SimpleSeedProvider invalid yaml added to the config since startup could 
 + / / cause this to throw . Additionally , third party seed providers may throw exceptions . 
 + / / Handle the error and return a null to indicate that there was a problem . 
 + catch ( Throwable e ) 
 + { 
 + JVMStabilityInspector . inspectThrowable ( e ) ; 
 + logger . warn ( " Error while getting seed node list : { } " , e . getLocalizedMessage ( ) ) ; 
 + return null ; 
 + } 
 + 
 + if ( tmp . size ( ) = = 0 ) 
 + { 
 + logger . trace ( " New seed node list is empty . Not updating seed list . " ) ; 
 + return getSeeds ( ) ; 
 + } 
 + 
 + if ( tmp . equals ( seeds ) ) 
 + { 
 + logger . trace ( " New seed node list matches the existing list . " ) ; 
 + return getSeeds ( ) ; 
 + } 
 + 
 + / / Add the new entries 
 + seeds . addAll ( tmp ) ; 
 + / / Remove the old entries 
 + seeds . retainAll ( tmp ) ; 
 + logger . trace ( " New seed node list after reload { } " , seeds ) ; 
 + return getSeeds ( ) ; 
 + } 
 + 
 + / * * 
 + * JMX endpoint for getting the list of seeds from the node 
 + * / 
 + public List < String > getSeeds ( ) 
 + { 
 + List < String > seedList = new ArrayList < String > ( ) ; 
 + for ( InetAddressAndPort seed : seeds ) 
 + { 
 + seedList . add ( seed . toString ( ) ) ; 
 + } 
 + return seedList ; 
 + } 
 + 
 / / initialize local HB state if needed , i . e . , if gossiper has never been started before . 
 public void maybeInitializeLocalState ( int generationNbr ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / gms / GossiperMBean . java b / src / java / org / apache / cassandra / gms / GossiperMBean . java 
 index c4b244c . . 1b116e1 100644 
 - - - a / src / java / org / apache / cassandra / gms / GossiperMBean . java 
 + + + b / src / java / org / apache / cassandra / gms / GossiperMBean . java 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 package org . apache . cassandra . gms ; 
 
 import java . net . UnknownHostException ; 
 + import java . util . List ; 
 
 public interface GossiperMBean 
 { 
 @ @ - 29 , 4 + 30 , 8 @ @ public interface GossiperMBean 
 
 public void assassinateEndpoint ( String address ) throws UnknownHostException ; 
 
 + public List < String > reloadSeeds ( ) ; 
 + 
 + public List < String > getSeeds ( ) ; 
 + 
 } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index d330ed4 . . ec8f7ba 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 711 , 6 + 711 , 16 @ @ public class NodeProbe implements AutoCloseable 
 gossProxy . assassinateEndpoint ( address ) ; 
 } 
 
 + public List < String > reloadSeeds ( ) 
 + { 
 + return gossProxy . reloadSeeds ( ) ; 
 + } 
 + 
 + public List < String > getSeeds ( ) 
 + { 
 + return gossProxy . getSeeds ( ) ; 
 + } 
 + 
 / * * 
 * Set the compaction threshold 
 * 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java 
 index d707499 . . f7b7f76 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeTool . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeTool . java 
 @ @ - 87 , 6 + 87 , 7 @ @ public class NodeTool 
 GetTraceProbability . class , 
 GetInterDCStreamThroughput . class , 
 GetEndpoints . class , 
 + GetSeeds . class , 
 GetSSTables . class , 
 GetMaxHintWindow . class , 
 GossipInfo . class , 
 @ @ - 102 , 6 + 103 , 7 @ @ public class NodeTool 
 Refresh . class , 
 RemoveNode . class , 
 Assassinate . class , 
 + ReloadSeeds . class , 
 ResetFullQueryLog . class , 
 Repair . class , 
 RepairAdmin . class , 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / GetSeeds . java b / src / java / org / apache / cassandra / tools / nodetool / GetSeeds . java 
 new file mode 100644 
 index 0000000 . . 207363c 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / GetSeeds . java 
 @ @ - 0 , 0 + 1 , 44 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . tools . nodetool ; 
 + 
 + import java . util . List ; 
 + 
 + import io . airlift . airline . Command ; 
 + 
 + import org . apache . cassandra . tools . NodeProbe ; 
 + import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; 
 + 
 + @ Command ( name = " getseeds " , description = " Get the currently in use seed node IP list excluding the node IP " ) 
 + public class GetSeeds extends NodeToolCmd 
 + { 
 + @ Override 
 + public void execute ( NodeProbe probe ) 
 + { 
 + List < String > seedList = probe . getSeeds ( ) ; 
 + if ( seedList . isEmpty ( ) ) 
 + { 
 + System . out . println ( " Seed node list does not contain any remote node IPs " ) ; 
 + } 
 + else 
 + { 
 + System . out . println ( " Current list of seed node IPs , excluding the current node ' s IP : " + String . join ( " " , seedList ) ) ; 
 + } 
 + 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / ReloadSeeds . java b / src / java / org / apache / cassandra / tools / nodetool / ReloadSeeds . java 
 new file mode 100644 
 index 0000000 . . b9682cf 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / ReloadSeeds . java 
 @ @ - 0 , 0 + 1 , 47 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . tools . nodetool ; 
 + 
 + import java . util . List ; 
 + 
 + import io . airlift . airline . Command ; 
 + 
 + import org . apache . cassandra . tools . NodeProbe ; 
 + import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; 
 + 
 + @ Command ( name = " reloadseeds " , description = " Reload the seed node list from the seed node provider " ) 
 + public class ReloadSeeds extends NodeToolCmd 
 + { 
 + @ Override 
 + public void execute ( NodeProbe probe ) 
 + { 
 + List < String > seedList = probe . reloadSeeds ( ) ; 
 + if ( seedList = = null ) 
 + { 
 + System . out . println ( " Failed to reload the seed node list . " ) ; 
 + } 
 + else if ( seedList . isEmpty ( ) ) 
 + { 
 + System . out . println ( " Seed node list does not contain any remote node IPs " ) ; 
 + } 
 + else 
 + { 
 + System . out . println ( " Updated seed node IP list , excluding the current node ' s IP : " + String . join ( " " , seedList ) ) ; 
 + } 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / gms / GossiperTest . java b / test / unit / org / apache / cassandra / gms / GossiperTest . java 
 index 8c65cb4 . . b856983 100644 
 - - - a / test / unit / org / apache / cassandra / gms / GossiperTest . java 
 + + + b / test / unit / org / apache / cassandra / gms / GossiperTest . java 
 @ @ - 18 , 12 + 18 , 16 @ @ 
 
 package org . apache . cassandra . gms ; 
 
 + import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 import java . util . UUID ; 
 
 import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . net . InetAddresses ; 
 + import org . junit . After ; 
 + import org . junit . Assert ; 
 import org . junit . Before ; 
 import org . junit . Test ; 
 
 @ @ - 33 , 6 + 37 , 7 @ @ import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . dht . RandomPartitioner ; 
 import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . locator . InetAddressAndPort ; 
 + import org . apache . cassandra . locator . SeedProvider ; 
 import org . apache . cassandra . locator . TokenMetadata ; 
 import org . apache . cassandra . service . StorageService ; 
 
 @ @ - 44 , 6 + 49 , 7 @ @ public class GossiperTest 
 { 
 DatabaseDescriptor . daemonInitialization ( ) ; 
 } 
 + 
 static final IPartitioner partitioner = new RandomPartitioner ( ) ; 
 StorageService ss = StorageService . instance ; 
 TokenMetadata tmd = StorageService . instance . getTokenMetadata ( ) ; 
 @ @ - 52 , 11 + 58 , 20 @ @ public class GossiperTest 
 List < InetAddressAndPort > hosts = new ArrayList < > ( ) ; 
 List < UUID > hostIds = new ArrayList < > ( ) ; 
 
 + private SeedProvider originalSeedProvider ; 
 + 
 @ Before 
 public void setup ( ) 
 { 
 tmd . clearUnsafe ( ) ; 
 - } ; 
 + originalSeedProvider = DatabaseDescriptor . getSeedProvider ( ) ; 
 + } 
 + 
 + @ After 
 + public void tearDown ( ) 
 + { 
 + DatabaseDescriptor . setSeedProvider ( originalSeedProvider ) ; 
 + } 
 
 @ Test 
 public void testLargeGenerationJump ( ) throws UnknownHostException , InterruptedException 
 @ @ - 90 , 4 + 105 , 127 @ @ public class GossiperTest 
 / / The generation should not have been updated because it is over Gossiper . MAX _ GENERATION _ DIFFERENCE in the future 
 assertEquals ( proposedRemoteHeartBeat . getGeneration ( ) , actualRemoteHeartBeat . getGeneration ( ) ) ; 
 } 
 + 
 + / / Note : This test might fail if for some reason the node broadcast address is in 127 . 99 . 0 . 0 / 16 
 + @ Test 
 + public void testReloadSeeds ( ) throws UnknownHostException 
 + { 
 + Gossiper gossiper = new Gossiper ( false ) ; 
 + List < String > loadedList ; 
 + 
 + / / Initialize the seed list directly to a known set to start with 
 + gossiper . seeds . clear ( ) ; 
 + InetAddressAndPort addr = InetAddressAndPort . getByAddress ( InetAddress . getByName ( " 127 . 99 . 1 . 1 " ) ) ; 
 + int nextSize = 4 ; 
 + List < InetAddressAndPort > nextSeeds = new ArrayList < > ( nextSize ) ; 
 + for ( int i = 0 ; i < nextSize ; i + + ) 
 + { 
 + gossiper . seeds . add ( addr ) ; 
 + nextSeeds . add ( addr ) ; 
 + addr = InetAddressAndPort . getByAddress ( InetAddresses . increment ( addr . address ) ) ; 
 + } 
 + Assert . assertEquals ( nextSize , gossiper . seeds . size ( ) ) ; 
 + 
 + / / Add another unique address to the list 
 + addr = InetAddressAndPort . getByAddress ( InetAddresses . increment ( addr . address ) ) ; 
 + nextSeeds . add ( addr ) ; 
 + nextSize + + ; 
 + DatabaseDescriptor . setSeedProvider ( new TestSeedProvider ( nextSeeds ) ) ; 
 + loadedList = gossiper . reloadSeeds ( ) ; 
 + 
 + / / Check that the new entry was added 
 + Assert . assertEquals ( nextSize , loadedList . size ( ) ) ; 
 + for ( InetAddressAndPort a : nextSeeds ) 
 + Assert . assertTrue ( loadedList . contains ( a . toString ( ) ) ) ; 
 + 
 + / / Check that the return value of the reloadSeeds matches the content of the getSeeds call 
 + / / and that they both match the internal contents of the Gossiper seeds list 
 + Assert . assertEquals ( loadedList . size ( ) , gossiper . getSeeds ( ) . size ( ) ) ; 
 + for ( InetAddressAndPort a : gossiper . seeds ) 
 + { 
 + Assert . assertTrue ( loadedList . contains ( a . toString ( ) ) ) ; 
 + Assert . assertTrue ( gossiper . getSeeds ( ) . contains ( a . toString ( ) ) ) ; 
 + } 
 + 
 + / / Add a duplicate of the last address to the seed provider list 
 + int uniqueSize = nextSize ; 
 + nextSeeds . add ( addr ) ; 
 + nextSize + + ; 
 + DatabaseDescriptor . setSeedProvider ( new TestSeedProvider ( nextSeeds ) ) ; 
 + loadedList = gossiper . reloadSeeds ( ) ; 
 + 
 + / / Check that the number of seed nodes reported hasn ' t increased 
 + Assert . assertEquals ( uniqueSize , loadedList . size ( ) ) ; 
 + for ( InetAddressAndPort a : nextSeeds ) 
 + Assert . assertTrue ( loadedList . contains ( a . toString ( ) ) ) ; 
 + 
 + / / Create a new list that has no overlaps with the previous list 
 + addr = InetAddressAndPort . getByAddress ( InetAddress . getByName ( " 127 . 99 . 2 . 1 " ) ) ; 
 + int disjointSize = 3 ; 
 + List < InetAddressAndPort > disjointSeeds = new ArrayList < > ( disjointSize ) ; 
 + for ( int i = 0 ; i < disjointSize ; i + + ) 
 + { 
 + disjointSeeds . add ( addr ) ; 
 + addr = InetAddressAndPort . getByAddress ( InetAddresses . increment ( addr . address ) ) ; 
 + } 
 + DatabaseDescriptor . setSeedProvider ( new TestSeedProvider ( disjointSeeds ) ) ; 
 + loadedList = gossiper . reloadSeeds ( ) ; 
 + 
 + / / Check that the list now contains exactly the new other list . 
 + Assert . assertEquals ( disjointSize , gossiper . getSeeds ( ) . size ( ) ) ; 
 + Assert . assertEquals ( disjointSize , loadedList . size ( ) ) ; 
 + for ( InetAddressAndPort a : disjointSeeds ) 
 + { 
 + Assert . assertTrue ( gossiper . getSeeds ( ) . contains ( a . toString ( ) ) ) ; 
 + Assert . assertTrue ( loadedList . contains ( a . toString ( ) ) ) ; 
 + } 
 + 
 + / / Set the seed node provider to return an empty list 
 + DatabaseDescriptor . setSeedProvider ( new TestSeedProvider ( new ArrayList < InetAddressAndPort > ( ) ) ) ; 
 + loadedList = gossiper . reloadSeeds ( ) ; 
 + 
 + / / Check that the in memory seed node list was not modified 
 + Assert . assertEquals ( disjointSize , loadedList . size ( ) ) ; 
 + for ( InetAddressAndPort a : disjointSeeds ) 
 + Assert . assertTrue ( loadedList . contains ( a . toString ( ) ) ) ; 
 + 
 + / / Change the seed provider to one that throws an unchecked exception 
 + DatabaseDescriptor . setSeedProvider ( new ErrorSeedProvider ( ) ) ; 
 + loadedList = gossiper . reloadSeeds ( ) ; 
 + 
 + / / Check for the expected null response from a reload error 
 + Assert . assertNull ( loadedList ) ; 
 + 
 + / / Check that the in memory seed node list was not modified and the exception was caught 
 + Assert . assertEquals ( disjointSize , gossiper . getSeeds ( ) . size ( ) ) ; 
 + for ( InetAddressAndPort a : disjointSeeds ) 
 + Assert . assertTrue ( gossiper . getSeeds ( ) . contains ( a . toString ( ) ) ) ; 
 + } 
 + 
 + static class TestSeedProvider implements SeedProvider 
 + { 
 + private List < InetAddressAndPort > seeds ; 
 + 
 + TestSeedProvider ( List < InetAddressAndPort > seeds ) 
 + { 
 + this . seeds = seeds ; 
 + } 
 + 
 + @ Override 
 + public List < InetAddressAndPort > getSeeds ( ) 
 + { 
 + return seeds ; 
 + } 
 + } 
 + 
 + / / A seed provider for testing which throws assertion errors when queried 
 + static class ErrorSeedProvider implements SeedProvider 
 + { 
 + @ Override 
 + public List < InetAddressAndPort > getSeeds ( ) 
 + { 
 + assert ( false ) ; 
 + return new ArrayList < > ( ) ; 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 index 1f235df . . 25e1072 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra . concurrent ; 
 
 import java . lang . management . ManagementFactory ; 
 + import java . util . List ; 
 import java . util . concurrent . * ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . log4j . Logger ; 
 public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean 
 { 
 private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; 
 + private final String mbeanName ; 
 
 public DebuggableThreadPoolExecutor ( String threadPoolName ) 
 { 
 @ @ - 51 , 9 + 53 , 10 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 super . prestartAllCoreThreads ( ) ; 
 
 MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + mbeanName = " org . apache . cassandra . concurrent : type = " + threadFactory . id ; 
 try 
 { 
 - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id ) ) ; 
 + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 84 , 6 + 87 , 33 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 } 
 } 
 
 + private void unregisterMBean ( ) 
 + { 
 + try 
 + { 
 + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; 
 + } 
 + catch ( Exception ex ) 
 + { 
 + / / don ' t let it get in the way , but notify . 
 + logger _ . error ( ex . getMessage ( ) , ex ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void shutdown ( ) 
 + { 
 + unregisterMBean ( ) ; 
 + super . shutdown ( ) ; 
 + } 
 + 
 + @ Override 
 + public List < Runnable > shutdownNow ( ) 
 + { 
 + unregisterMBean ( ) ; 
 + return super . shutdownNow ( ) ; 
 + } 
 + 
 / * * 
 * Get the number of completed tasks 
 * / 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 3b70d17 . . f5d8d35 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 122 , 7 + 122 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 return gossiper _ ; 
 } 
 
 - private Timer gossipTimer _ = new Timer ( false ) ; 
 + private Timer gossipTimer _ ; 
 private InetAddress localEndPoint _ ; 
 private long aVeryLongTime _ ; 
 private Random random _ = new Random ( ) ; 
 @ @ - 144 , 6 + 144 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 
 private Gossiper ( ) 
 { 
 + gossipTimer _ = new Timer ( false ) ; 
 aVeryLongTime _ = 259200 * 1000 ; 
 / * register with the Failure Detector for receiving Failure detector events * / 
 FailureDetector . instance ( ) . registerFailureDetectionEventListener ( this ) ; 
 @ @ - 834 , 6 + 835 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 public void stop ( ) 
 { 
 gossipTimer _ . cancel ( ) ; 
 + gossipTimer _ = new Timer ( false ) ; / / makes the Gossiper reentrant . 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 8ff93f6 . . b1ad5ed 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 69 , 6 + 69 , 9 @ @ public class MessagingService 
 
 / * List of sockets we are listening on * / 
 private static Map < InetAddress , SelectionKey > listenSockets _ = new HashMap < InetAddress , SelectionKey > ( ) ; 
 + 
 + / * List of UdpConnections we are listening on * / 
 + private static Map < InetAddress , UdpConnection > udpConnections _ = new HashMap < InetAddress , UdpConnection > ( ) ; 
 
 / * Lookup table for registering message handlers based on the verb . * / 
 private static Map < String , IVerbHandler > verbHandlers _ ; 
 @ @ - 214 , 7 + 217 , 8 @ @ public class MessagingService 
 try 
 { 
 connection . init ( localEp ) ; 
 - endPoints _ . add ( localEp ) ; 
 + endPoints _ . add ( localEp ) ; 
 + udpConnections _ . put ( localEp , connection ) ; 
 } 
 catch ( IOException e ) 
 { 
 @ @ - 497 , 7 + 501 , 7 @ @ public class MessagingService 
 logger _ . info ( " Shutting down . . . " ) ; 
 synchronized ( MessagingService . class ) 
 { 
 - / * Stop listening on any socket * / 
 + / * Stop listening on any TCP socket * / 
 for ( SelectionKey skey : listenSockets _ . values ( ) ) 
 { 
 skey . cancel ( ) ; 
 @ @ - 509 , 6 + 513 , 13 @ @ public class MessagingService 
 } 
 listenSockets _ . clear ( ) ; 
 
 + / * Stop listening on any UDP ports . * / 
 + for ( UdpConnection con : udpConnections _ . values ( ) ) 
 + { 
 + con . close ( ) ; 
 + } 
 + udpConnections _ . clear ( ) ; 
 + 
 / * Shutdown the threads in the EventQueue ' s * / 
 messageDeserializationExecutor _ . shutdownNow ( ) ; 
 messageDeserializerExecutor _ . shutdownNow ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / net / SelectorManager . java b / src / java / org / apache / cassandra / net / SelectorManager . java 
 index 7623a05 . . 16511ee 100644 
 - - - a / src / java / org / apache / cassandra / net / SelectorManager . java 
 + + + b / src / java / org / apache / cassandra / net / SelectorManager . java 
 @ @ - 35 , 6 + 35 , 9 @ @ public class SelectorManager extends Thread 
 / / workaround JDK select / register bug 
 Object gate = new Object ( ) ; 
 
 + / / flag to indicate that shutdown has been requested . 
 + private boolean shutdownRequested = false ; 
 + 
 / / The static selector manager which is used by all applications 
 private static SelectorManager manager ; 
 
 @ @ - 82 , 7 + 85 , 13 @ @ public class SelectorManager extends Thread 
 selector . wakeup ( ) ; 
 return channel . register ( selector , ops , handler ) ; 
 } 
 - } 
 + } 
 + 
 + / / requests the thread to shutdown . However , it brings no guarantees . Added for testing . 
 + private void requestShutdown ( ) 
 + { 
 + shutdownRequested = true ; 
 + } 
 
 / * * 
 * This method starts the socket manager listening for events . It is 
 @ @ - 102 , 6 + 111 , 11 @ @ public class SelectorManager extends Thread 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 + if ( shutdownRequested ) 
 + { 
 + shutdownRequested = false ; 
 + break ; 
 + } 
 } 
 } 
 
 @ @ - 145 , 6 + 159 , 22 @ @ public class SelectorManager extends Thread 
 } 
 
 / * * 
 + * Intended to reset the singleton as part of testing . 
 + * / 
 + static void reset ( ) 
 + { 
 + synchronized ( SelectorManager . class ) 
 + { 
 + if ( manager ! = null ) 
 + manager . requestShutdown ( ) ; 
 + manager = null ; 
 + if ( udpManager ! = null ) 
 + udpManager . requestShutdown ( ) ; 
 + udpManager = null ; 
 + } 
 + } 
 + 
 + / * * 
 * Returns the SelectorManager applications should use . 
 * 
 * @ return The SelectorManager which applications should use 
 diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java 
 index 969a2cd . . e3cde8d 100644 
 - - - a / test / unit / org / apache / cassandra / CleanupHelper . java 
 + + + b / test / unit / org / apache / cassandra / CleanupHelper . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . BeforeClass ; 
 
 @ @ - 30 , 6 + 31 , 13 @ @ public class CleanupHelper 
 private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; 
 
 @ BeforeClass 
 + public static void cleanupAndLeaveDirs ( ) 
 + { 
 + mkdirs ( ) ; 
 + cleanup ( ) ; 
 + mkdirs ( ) ; 
 + } 
 + 
 public static void cleanup ( ) 
 { 
 / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) 
 @ @ - 38 , 6 + 46 , 10 @ @ public class CleanupHelper 
 DatabaseDescriptor . getLogFileLocation ( ) , 
 } ; 
 
 + / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process 
 + / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally 
 + / / put there . 
 + 
 for ( String dirName : directoryNames ) 
 { 
 File dir = new File ( dirName ) ; 
 @ @ - 47 , 11 + 59 , 15 @ @ public class CleanupHelper 
 } 
 for ( File f : dir . listFiles ( ) ) 
 { 
 - if ( ! f . delete ( ) ) { 
 + if ( ! f . delete ( ) ) 
 + { 
 logger . error ( " could not delete " + f ) ; 
 + } 
 } 
 + 
 + if ( ! dir . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 - } 
 
 / / cleanup data directory which are stored as data directory / table / data files 
 for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 @ @ - 71 , 8 + 87 , 24 @ @ public class CleanupHelper 
 } 
 } 
 } 
 + if ( ! tableFile . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 + 
 + if ( ! dir . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 + } 
 
 + public static void mkdirs ( ) 
 + { 
 + try 
 + { 
 + DatabaseDescriptor . createAllDirectories ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / net / NetPackageAccessor . java b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java 
 new file mode 100644 
 index 0000000 . . 408bfba 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . net ; 
 + 
 + / * * 
 + For accesing package - level members created for the sole purpose of testing . 
 + * / 
 + public class NetPackageAccessor 
 + { 
 + public static void resetSelectorManager ( ) 
 + { 
 + SelectorManager . reset ( ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceTest . java b / test / unit / org / apache / cassandra / service / StorageServiceTest . java 
 new file mode 100644 
 index 0000000 . . 0ec9ffe 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / service / StorageServiceTest . java 
 @ @ - 0 , 0 + 1 , 68 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + 
 + package org . apache . cassandra . service ; 
 + 
 + import org . apache . cassandra . CleanupHelper ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . net . NetPackageAccessor ; 
 + import org . junit . Test ; 
 + import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . assertFalse ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + public class StorageServiceTest 
 + { 
 + @ Test 
 + public void testClientOnlyMode ( ) throws IOException 
 + { 
 + CleanupHelper . mkdirs ( ) ; 
 + CleanupHelper . cleanup ( ) ; 
 + StorageService . instance ( ) . initClient ( ) ; 
 + 
 + / / verify that no storage directories were created . 
 + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 + { 
 + assertFalse ( new File ( path ) . exists ( ) ) ; 
 + } 
 + StorageService . instance ( ) . stopClient ( ) ; 
 + NetPackageAccessor . resetSelectorManager ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegularMode ( ) throws IOException , InterruptedException 
 + { 
 + CleanupHelper . mkdirs ( ) ; 
 + CleanupHelper . cleanup ( ) ; 
 + StorageService . instance ( ) . initServer ( ) ; 
 + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 + { 
 + / / verify that storage directories are there . 
 + assertTrue ( new File ( path ) . exists ( ) ) ; 
 + } 
 + / / a proper test would be to call decommission here , but decommission ( ) mixes both shutdown and datatransfer 
 + / / calls . This test is only interested in the shutdown - related items which a properly handled by just 
 + / / stopping the client . 
 + / / StorageService . instance ( ) . decommission ( ) ; 
 + StorageService . instance ( ) . stopClient ( ) ; 
 + NetPackageAccessor . resetSelectorManager ( ) ; 
 + } 
 + }
