BLEU SCORE: 0.040583489434387374

TEST MSG: Prevent building website without nodetool docs
GENERATED MSG: Automate Nodetool Documentation

TEST DIFF (one line): diff - - git a / doc / gen - nodetool - docs . py b / doc / gen - nodetool - docs . py <nl> index e3862f7 . . 2ea125a 100644 <nl> - - - a / doc / gen - nodetool - docs . py <nl> + + + b / doc / gen - nodetool - docs . py <nl> @ @ - 13 , 33 + 13 , 42 @ @ <nl> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> # See the License for the specific language governing permissions and <nl> # limitations under the License . <nl> - <nl> " " " <nl> A script to use nodetool to generate documentation for nodetool <nl> " " " <nl> + from _ _ future _ _ import print _ function <nl> <nl> import os <nl> import re <nl> import subprocess <nl> - from subprocess import PIPE , Popen <nl> + from subprocess import PIPE <nl> + from subprocess import Popen <nl> + <nl> <nl> nodetool = " . . / bin / nodetool " <nl> outdir = " source / tools / nodetool " <nl> helpfilename = outdir + " / nodetool . txt " <nl> command _ re = re . compile ( " ( ) ( [ _ a - z ] + ) " ) <nl> - commandRSTContent = " . . _ nodetool _ { 0 } : \ n \ n { 0 } \ n - - - - - - - \ n \ nUsage \ n - - - - - - - - - \ n \ n . . include : : { 0 } . txt \ n : literal : \ n \ n " <nl> + commandRSTContent = " . . _ nodetool _ { 0 } : \ n \ n { 0 } \ n { 1 } \ n \ nUsage \ n - - - - - - - - - \ n \ n . . include : : { 0 } . txt \ n : literal : \ n \ n " <nl> <nl> # create the documentation directory <nl> if not os . path . exists ( outdir ) : <nl> os . makedirs ( outdir ) <nl> <nl> # create the base help file to use for discovering the commands <nl> - def createHelpfile ( ) : <nl> - with open ( helpfilename , " w + " ) as file : <nl> - subprocess . call ( [ nodetool , " help " ] , stdout = file ) <nl> + def create _ help _ file ( ) : <nl> + with open ( helpfilename , " w + " ) as output _ file : <nl> + try : <nl> + subprocess . check _ call ( [ nodetool , " help " ] , stdout = output _ file ) <nl> + except subprocess . CalledProcessError as cpe : <nl> + print ( <nl> + ' ERROR : Nodetool failed to run , you likely need to build ' <nl> + ' cassandra using ant jar from the top level directory ' <nl> + ) <nl> + raise cpe <nl> <nl> # for a given command , create the help file and an RST file to contain it <nl> - def createRST ( command ) : <nl> + def create _ rst ( command ) : <nl> if command : <nl> cmdName = command . group ( 0 ) . strip ( ) <nl> cmdFilename = outdir + " / " + cmdName + " . txt " <nl> @ @ - 49 , 15 + 58 , 15 @ @ def createRST ( command ) : <nl> ( out , err ) = proc . communicate ( ) <nl> cmdFile . write ( out ) <nl> with open ( rstFilename , " w + " ) as rstFile : <nl> - rstFile . write ( commandRSTContent . format ( cmdName ) ) <nl> + rstFile . write ( commandRSTContent . format ( cmdName , ' - ' * len ( cmdName ) ) ) <nl> <nl> # create base file <nl> - createHelpfile ( ) <nl> + create _ help _ file ( ) <nl> <nl> # create the main usage page <nl> with open ( outdir + " / nodetool . rst " , " w + " ) as output : <nl> with open ( helpfilename , " r + " ) as helpfile : <nl> - output . write ( " . . _ nodetool \ n \ nNodetool \ n - - - - - - - \ n \ nUsage \ n - - - - - - - - - \ n \ n " ) <nl> + output . write ( " . . _ nodetool \ n \ nNodetool \ n - - - - - - - - \ n \ nUsage \ n - - - - - - - - - \ n \ n " ) <nl> for commandLine in helpfile : <nl> command = command _ re . sub ( r ' \ n \ 1 : doc : ` \ 2 ` - ' , commandLine ) <nl> output . write ( command ) <nl> @ @ - 66 , 4 + 75 , 4 @ @ with open ( outdir + " / nodetool . rst " , " w + " ) as output : <nl> with open ( helpfilename , " rw + " ) as helpfile : <nl> for commandLine in helpfile : <nl> command = command _ re . match ( commandLine ) <nl> - createRST ( command ) <nl> + create _ rst ( command )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / doc / gen - nodetool - docs . py b / doc / gen - nodetool - docs . py 
 index e3862f7 . . 2ea125a 100644 
 - - - a / doc / gen - nodetool - docs . py 
 + + + b / doc / gen - nodetool - docs . py 
 @ @ - 13 , 33 + 13 , 42 @ @ 
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 # See the License for the specific language governing permissions and 
 # limitations under the License . 
 - 
 " " " 
 A script to use nodetool to generate documentation for nodetool 
 " " " 
 + from _ _ future _ _ import print _ function 
 
 import os 
 import re 
 import subprocess 
 - from subprocess import PIPE , Popen 
 + from subprocess import PIPE 
 + from subprocess import Popen 
 + 
 
 nodetool = " . . / bin / nodetool " 
 outdir = " source / tools / nodetool " 
 helpfilename = outdir + " / nodetool . txt " 
 command _ re = re . compile ( " ( ) ( [ _ a - z ] + ) " ) 
 - commandRSTContent = " . . _ nodetool _ { 0 } : \ n \ n { 0 } \ n - - - - - - - \ n \ nUsage \ n - - - - - - - - - \ n \ n . . include : : { 0 } . txt \ n : literal : \ n \ n " 
 + commandRSTContent = " . . _ nodetool _ { 0 } : \ n \ n { 0 } \ n { 1 } \ n \ nUsage \ n - - - - - - - - - \ n \ n . . include : : { 0 } . txt \ n : literal : \ n \ n " 
 
 # create the documentation directory 
 if not os . path . exists ( outdir ) : 
 os . makedirs ( outdir ) 
 
 # create the base help file to use for discovering the commands 
 - def createHelpfile ( ) : 
 - with open ( helpfilename , " w + " ) as file : 
 - subprocess . call ( [ nodetool , " help " ] , stdout = file ) 
 + def create _ help _ file ( ) : 
 + with open ( helpfilename , " w + " ) as output _ file : 
 + try : 
 + subprocess . check _ call ( [ nodetool , " help " ] , stdout = output _ file ) 
 + except subprocess . CalledProcessError as cpe : 
 + print ( 
 + ' ERROR : Nodetool failed to run , you likely need to build ' 
 + ' cassandra using ant jar from the top level directory ' 
 + ) 
 + raise cpe 
 
 # for a given command , create the help file and an RST file to contain it 
 - def createRST ( command ) : 
 + def create _ rst ( command ) : 
 if command : 
 cmdName = command . group ( 0 ) . strip ( ) 
 cmdFilename = outdir + " / " + cmdName + " . txt " 
 @ @ - 49 , 15 + 58 , 15 @ @ def createRST ( command ) : 
 ( out , err ) = proc . communicate ( ) 
 cmdFile . write ( out ) 
 with open ( rstFilename , " w + " ) as rstFile : 
 - rstFile . write ( commandRSTContent . format ( cmdName ) ) 
 + rstFile . write ( commandRSTContent . format ( cmdName , ' - ' * len ( cmdName ) ) ) 
 
 # create base file 
 - createHelpfile ( ) 
 + create _ help _ file ( ) 
 
 # create the main usage page 
 with open ( outdir + " / nodetool . rst " , " w + " ) as output : 
 with open ( helpfilename , " r + " ) as helpfile : 
 - output . write ( " . . _ nodetool \ n \ nNodetool \ n - - - - - - - \ n \ nUsage \ n - - - - - - - - - \ n \ n " ) 
 + output . write ( " . . _ nodetool \ n \ nNodetool \ n - - - - - - - - \ n \ nUsage \ n - - - - - - - - - \ n \ n " ) 
 for commandLine in helpfile : 
 command = command _ re . sub ( r ' \ n \ 1 : doc : ` \ 2 ` - ' , commandLine ) 
 output . write ( command ) 
 @ @ - 66 , 4 + 75 , 4 @ @ with open ( outdir + " / nodetool . rst " , " w + " ) as output : 
 with open ( helpfilename , " rw + " ) as helpfile : 
 for commandLine in helpfile : 
 command = command _ re . match ( commandLine ) 
 - createRST ( command ) 
 + create _ rst ( command )

NEAREST DIFF:
ELIMINATEDSENTENCE
