BLEU SCORE: 0.017081056798999895

TEST MSG: Remove thrift schema creation when native driver is used
GENERATED MSG: fix counter add / get using CQL2 and CQL3 in stress tool

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6aa3059 . . 17e70df 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 <nl> + * Avoid thrift schema creation when native driver is used in stress tool ( CASSANDRA - 9374 ) <nl> * Populate TokenMetadata early during startup ( CASSANDRA - 9317 ) <nl> * Make Functions . declared thread - safe <nl> * Add client warnings to native protocol v4 ( CASSANDRA - 8930 ) <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / predefined / CqlCounterAdder . java b / tools / stress / src / org / apache / cassandra / stress / operations / predefined / CqlCounterAdder . java <nl> index 9bb0d87 . . bb8135c 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / predefined / CqlCounterAdder . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / predefined / CqlCounterAdder . java <nl> @ @ - 46 , 7 + 46 , 7 @ @ public class CqlCounterAdder extends CqlOperation < Integer > <nl> @ Override <nl> protected String buildQuery ( ) <nl> { <nl> - StringBuilder query = new StringBuilder ( " UPDATE \ " Counter3 \ " SET " ) ; <nl> + StringBuilder query = new StringBuilder ( " UPDATE counter1 SET " ) ; <nl> <nl> / / TODO : increment distribution subset of columns <nl> for ( int i = 0 ; i < settings . columns . maxColumnsPerKey ; i + + ) <nl> @ @ - 54 , 7 + 54 , 7 @ @ public class CqlCounterAdder extends CqlOperation < Integer > <nl> if ( i > 0 ) <nl> query . append ( " , " ) ; <nl> <nl> - String name = settings . columns . namestrs . get ( i ) ; <nl> + String name = wrapInQuotes ( settings . columns . namestrs . get ( i ) ) ; <nl> query . append ( name ) . append ( " = " ) . append ( name ) . append ( " + ? " ) ; <nl> } <nl> query . append ( " WHERE KEY = ? " ) ; <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsSchema . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsSchema . java <nl> index 54f27bc . . 5c437a9 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsSchema . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsSchema . java <nl> @ @ - 22 , 9 + 22 , 13 @ @ package org . apache . cassandra . stress . settings ; <nl> <nl> import java . io . Serializable ; <nl> import java . nio . ByteBuffer ; <nl> + import java . nio . charset . CharacterCodingException ; <nl> import java . util . * ; <nl> <nl> + import com . datastax . driver . core . exceptions . AlreadyExistsException ; <nl> + import org . apache . cassandra . stress . util . JavaDriverClient ; <nl> import org . apache . cassandra . thrift . * ; <nl> + import org . apache . cassandra . thrift . ConsistencyLevel ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> public class SettingsSchema implements Serializable <nl> @ @ - 56 , 9 + 60 , 159 @ @ public class SettingsSchema implements Serializable <nl> <nl> public void createKeySpaces ( StressSettings settings ) <nl> { <nl> - createKeySpacesThrift ( settings ) ; <nl> + if ( settings . mode . api ! = ConnectionAPI . JAVA _ DRIVER _ NATIVE ) <nl> + { <nl> + createKeySpacesThrift ( settings ) ; <nl> + } <nl> + else <nl> + { <nl> + createKeySpacesNative ( settings ) ; <nl> + } <nl> } <nl> <nl> + / * * <nl> + * Create Keyspace with Standard and Super / Counter column families <nl> + * / <nl> + public void createKeySpacesNative ( StressSettings settings ) <nl> + { <nl> + <nl> + JavaDriverClient client = settings . getJavaDriverClient ( false ) ; <nl> + <nl> + try <nl> + { <nl> + / / Keyspace <nl> + client . execute ( createKeyspaceStatementCQL3 ( ) , org . apache . cassandra . db . ConsistencyLevel . LOCAL _ ONE ) ; <nl> + <nl> + client . execute ( " USE \ " " + keyspace + " \ " " , org . apache . cassandra . db . ConsistencyLevel . LOCAL _ ONE ) ; <nl> + <nl> + / / Add standard1 and counter1 <nl> + client . execute ( createStandard1StatementCQL3 ( settings ) , org . apache . cassandra . db . ConsistencyLevel . LOCAL _ ONE ) ; <nl> + client . execute ( createCounter1StatementCQL3 ( settings ) , org . apache . cassandra . db . ConsistencyLevel . LOCAL _ ONE ) ; <nl> + <nl> + System . out . println ( String . format ( " Created keyspaces . Sleeping % ss for propagation . " , settings . node . nodes . size ( ) ) ) ; <nl> + Thread . sleep ( settings . node . nodes . size ( ) * 1000L ) ; / / seconds <nl> + } <nl> + catch ( AlreadyExistsException e ) <nl> + { <nl> + / / Ok . <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( " Encountered exception creating schema " , e ) ; <nl> + } <nl> + } <nl> + <nl> + String createKeyspaceStatementCQL3 ( ) <nl> + { <nl> + StringBuilder b = new StringBuilder ( ) ; <nl> + <nl> + / / Create Keyspace <nl> + b . append ( " CREATE KEYSPACE IF NOT EXISTS \ " " ) <nl> + . append ( keyspace ) <nl> + . append ( " \ " WITH replication = { ' class ' : ' " ) <nl> + . append ( replicationStrategy ) <nl> + . append ( " ' " ) ; <nl> + <nl> + if ( replicationStrategyOptions . isEmpty ( ) ) <nl> + { <nl> + b . append ( " , ' replication _ factor ' : ' 1 ' } " ) ; <nl> + } <nl> + else <nl> + { <nl> + for ( Map . Entry < String , String > entry : replicationStrategyOptions . entrySet ( ) ) <nl> + { <nl> + b . append ( " , ' " ) . append ( entry . getKey ( ) ) . append ( " ' : ' " ) . append ( entry . getValue ( ) ) . append ( " ' " ) ; <nl> + } <nl> + <nl> + b . append ( " } " ) ; <nl> + } <nl> + <nl> + b . append ( " AND durable _ writes = true ; \ n " ) ; <nl> + <nl> + return b . toString ( ) ; <nl> + } <nl> + <nl> + String createStandard1StatementCQL3 ( StressSettings settings ) <nl> + { <nl> + <nl> + StringBuilder b = new StringBuilder ( ) ; <nl> + <nl> + b . append ( " CREATE TABLE IF NOT EXISTS " ) <nl> + . append ( " standard1 ( key blob PRIMARY KEY " ) ; <nl> + <nl> + try <nl> + { <nl> + for ( ByteBuffer name : settings . columns . names ) <nl> + b . append ( " \ n , \ " " ) . append ( ByteBufferUtil . string ( name ) ) . append ( " \ " blob " ) ; <nl> + } <nl> + catch ( CharacterCodingException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + <nl> + / / Compression <nl> + b . append ( " ) WITH COMPACT STORAGE AND compression = { " ) ; <nl> + if ( compression ! = null ) <nl> + b . append ( " ' sstable _ compression ' : ' " ) . append ( compression ) . append ( " ' " ) ; <nl> + <nl> + b . append ( " } " ) ; <nl> + <nl> + / / Compaction <nl> + if ( compactionStrategy ! = null ) <nl> + { <nl> + b . append ( " AND compaction = { ' class ' : ' " ) . append ( compactionStrategy ) . append ( " ' " ) ; <nl> + <nl> + for ( Map . Entry < String , String > entry : compactionStrategyOptions . entrySet ( ) ) <nl> + b . append ( " , ' " ) . append ( entry . getKey ( ) ) . append ( " ' : ' " ) . append ( entry . getValue ( ) ) . append ( " ' " ) ; <nl> + <nl> + b . append ( " } " ) ; <nl> + } <nl> + <nl> + b . append ( " ; \ n " ) ; <nl> + <nl> + return b . toString ( ) ; <nl> + } <nl> + <nl> + String createCounter1StatementCQL3 ( StressSettings settings ) <nl> + { <nl> + <nl> + StringBuilder b = new StringBuilder ( ) ; <nl> + <nl> + b . append ( " CREATE TABLE IF NOT EXISTS " ) <nl> + . append ( " counter1 ( key blob PRIMARY KEY , " ) ; <nl> + <nl> + try <nl> + { <nl> + for ( ByteBuffer name : settings . columns . names ) <nl> + b . append ( " \ n , \ " " ) . append ( ByteBufferUtil . string ( name ) ) . append ( " \ " counter " ) ; <nl> + } <nl> + catch ( CharacterCodingException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + <nl> + / / Compression <nl> + b . append ( " ) WITH COMPACT STORAGE AND compression = { " ) ; <nl> + if ( compression ! = null ) <nl> + b . append ( " ' sstable _ compression ' : ' " ) . append ( compression ) . append ( " ' " ) ; <nl> + <nl> + b . append ( " } " ) ; <nl> + <nl> + / / Compaction <nl> + if ( compactionStrategy ! = null ) <nl> + { <nl> + b . append ( " AND compaction = { ' class ' : ' " ) . append ( compactionStrategy ) . append ( " ' " ) ; <nl> + <nl> + for ( Map . Entry < String , String > entry : compactionStrategyOptions . entrySet ( ) ) <nl> + b . append ( " , ' " ) . append ( entry . getKey ( ) ) . append ( " ' : ' " ) . append ( entry . getValue ( ) ) . append ( " ' " ) ; <nl> + <nl> + b . append ( " } " ) ; <nl> + } <nl> + <nl> + b . append ( " ; \ n " ) ; <nl> + <nl> + return b . toString ( ) ; <nl> + } <nl> <nl> / * * <nl> * Create Keyspace with Standard and Super / Counter column families <nl> @ @ - 113 , 16 + 267 , 7 @ @ public class SettingsSchema implements Serializable <nl> try <nl> { <nl> client . system _ add _ keyspace ( ksdef ) ; <nl> - <nl> - / * CQL3 counter cf * / <nl> - client . set _ cql _ version ( " 3 . 0 . 0 " ) ; / / just to create counter cf for cql3 <nl> - <nl> client . set _ keyspace ( keyspace ) ; <nl> - client . execute _ cql3 _ query ( createCounterCFStatementForCQL3 ( settings ) , Compression . NONE , ConsistencyLevel . ONE ) ; <nl> - <nl> - if ( settings . mode . cqlVersion . isCql ( ) ) <nl> - client . set _ cql _ version ( settings . mode . cqlVersion . connectVersion ) ; <nl> - / * end * / <nl> <nl> System . out . println ( String . format ( " Created keyspaces . Sleeping % ss for propagation . " , settings . node . nodes . size ( ) ) ) ; <nl> Thread . sleep ( settings . node . nodes . size ( ) * 1000L ) ; / / seconds <nl> @ @ - 137 , 20 + 282 , 6 @ @ public class SettingsSchema implements Serializable <nl> } <nl> } <nl> <nl> - private ByteBuffer createCounterCFStatementForCQL3 ( StressSettings options ) <nl> - { <nl> - StringBuilder counter3 = new StringBuilder ( " CREATE TABLE \ " Counter3 \ " ( KEY blob PRIMARY KEY , " ) ; <nl> - <nl> - for ( int i = 0 ; i < options . columns . maxColumnsPerKey ; i + + ) <nl> - { <nl> - counter3 . append ( " c " ) . append ( i ) . append ( " counter " ) ; <nl> - if ( i ! = options . columns . maxColumnsPerKey - 1 ) <nl> - counter3 . append ( " , " ) ; <nl> - } <nl> - counter3 . append ( " ) ; " ) ; <nl> - <nl> - return ByteBufferUtil . bytes ( counter3 . toString ( ) ) ; <nl> - } <nl> <nl> / / Option Declarations <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 8d373cf . . 630ae18 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 60 , 6 + 60 , 7 @ @ <nl> * Accept all thrift update on CQL3 cf but don ' t expose their metadata ( CASSANDRA - 4377 ) <nl> * Replace Throttle with Guava ' s RateLimiter for HintedHandOff ( CASSANDRA - 4541 ) <nl> * fix counter add / get using CQL2 and CQL3 in stress tool ( CASSANDRA - 4633 ) <nl> + * Add sstable count per level to cfstats ( CASSANDRA - 4537 ) <nl> <nl> <nl> 1 . 1 . 6 <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index d292a63 . . b539228 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 2000 , 6 + 2000 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> : 0 ; <nl> } <nl> <nl> + public int [ ] getSSTableCountPerLevel ( ) <nl> + { <nl> + return compactionStrategy instanceof LeveledCompactionStrategy <nl> + ? ( ( LeveledCompactionStrategy ) compactionStrategy ) . getAllLevelSize ( ) <nl> + : null ; <nl> + } <nl> + <nl> public static class ViewFragment <nl> { <nl> public final List < SSTableReader > sstables ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> index b9fee05 . . 9b18c23 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> @ @ - 323 , 4 + 323 , 10 @ @ public interface ColumnFamilyStoreMBean <nl> * @ return the number of SSTables in L0 . Always return 0 if Leveled compaction is not enabled . <nl> * / <nl> public int getUnleveledSSTables ( ) ; <nl> + <nl> + / * * <nl> + * @ return sstable count for each level . null unless leveled compaction is used . <nl> + * array index corresponds to level ( int [ 0 ] is for level 0 , . . . ) . <nl> + * / <nl> + public int [ ] getSSTableCountPerLevel ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> index f6b0d6d . . ced79aa 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> @ @ - 88 , 6 + 88 , 11 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem <nl> return manifest . getLevelSize ( i ) ; <nl> } <nl> <nl> + public int [ ] getAllLevelSize ( ) <nl> + { <nl> + return manifest . getAllLevelSize ( ) ; <nl> + } <nl> + <nl> / * * <nl> * the only difference between background and maximal in LCS is that maximal is still allowed <nl> * ( by explicit user request ) even when compaction is disabled . <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> index 9e1e8e4 . . 1906180 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> @ @ - 314 , 6 + 314 , 14 @ @ public class LeveledManifest <nl> return generations . length > i ? generations [ i ] . size ( ) : 0 ; <nl> } <nl> <nl> + public synchronized int [ ] getAllLevelSize ( ) <nl> + { <nl> + int [ ] counts = new int [ generations . length ] ; <nl> + for ( int i = 0 ; i < counts . length ; i + + ) <nl> + counts [ i ] = generations [ i ] . size ( ) ; <nl> + return counts ; <nl> + } <nl> + <nl> private void logDistribution ( ) <nl> { <nl> if ( logger . isDebugEnabled ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index 2359f76 . . b7dfb68 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 756 , 6 + 756 , 27 @ @ public class NodeCmd <nl> { <nl> outs . println ( " \ t \ tColumn Family : " + cfstore . getColumnFamilyName ( ) ) ; <nl> outs . println ( " \ t \ tSSTable count : " + cfstore . getLiveSSTableCount ( ) ) ; <nl> + int [ ] leveledSStables = cfstore . getSSTableCountPerLevel ( ) ; <nl> + if ( leveledSStables ! = null ) <nl> + { <nl> + outs . print ( " \ t \ tSSTables in each level : [ " ) ; <nl> + for ( int level = 0 ; level < leveledSStables . length ; level + + ) <nl> + { <nl> + int count = leveledSStables [ level ] ; <nl> + outs . print ( count ) ; <nl> + long maxCount = 4L ; / / for L0 <nl> + if ( level > 0 ) <nl> + maxCount = ( long ) Math . pow ( 10 , level ) ; <nl> + / / show max threshold for level when exceeded <nl> + if ( count > maxCount ) <nl> + outs . print ( " / " + maxCount ) ; <nl> + <nl> + if ( level < leveledSStables . length - 1 ) <nl> + outs . print ( " , " ) ; <nl> + else <nl> + outs . println ( " ] " ) ; <nl> + } <nl> + } <nl> outs . println ( " \ t \ tSpace used ( live ) : " + cfstore . getLiveDiskSpaceUsed ( ) ) ; <nl> outs . println ( " \ t \ tSpace used ( total ) : " + cfstore . getTotalDiskSpaceUsed ( ) ) ; <nl> outs . println ( " \ t \ tNumber of Keys ( estimate ) : " + cfstore . estimateKeys ( ) ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6aa3059 . . 17e70df 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 
 + * Avoid thrift schema creation when native driver is used in stress tool ( CASSANDRA - 9374 ) 
 * Populate TokenMetadata early during startup ( CASSANDRA - 9317 ) 
 * Make Functions . declared thread - safe 
 * Add client warnings to native protocol v4 ( CASSANDRA - 8930 ) 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / predefined / CqlCounterAdder . java b / tools / stress / src / org / apache / cassandra / stress / operations / predefined / CqlCounterAdder . java 
 index 9bb0d87 . . bb8135c 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / predefined / CqlCounterAdder . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / predefined / CqlCounterAdder . java 
 @ @ - 46 , 7 + 46 , 7 @ @ public class CqlCounterAdder extends CqlOperation < Integer > 
 @ Override 
 protected String buildQuery ( ) 
 { 
 - StringBuilder query = new StringBuilder ( " UPDATE \ " Counter3 \ " SET " ) ; 
 + StringBuilder query = new StringBuilder ( " UPDATE counter1 SET " ) ; 
 
 / / TODO : increment distribution subset of columns 
 for ( int i = 0 ; i < settings . columns . maxColumnsPerKey ; i + + ) 
 @ @ - 54 , 7 + 54 , 7 @ @ public class CqlCounterAdder extends CqlOperation < Integer > 
 if ( i > 0 ) 
 query . append ( " , " ) ; 
 
 - String name = settings . columns . namestrs . get ( i ) ; 
 + String name = wrapInQuotes ( settings . columns . namestrs . get ( i ) ) ; 
 query . append ( name ) . append ( " = " ) . append ( name ) . append ( " + ? " ) ; 
 } 
 query . append ( " WHERE KEY = ? " ) ; 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsSchema . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsSchema . java 
 index 54f27bc . . 5c437a9 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsSchema . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsSchema . java 
 @ @ - 22 , 9 + 22 , 13 @ @ package org . apache . cassandra . stress . settings ; 
 
 import java . io . Serializable ; 
 import java . nio . ByteBuffer ; 
 + import java . nio . charset . CharacterCodingException ; 
 import java . util . * ; 
 
 + import com . datastax . driver . core . exceptions . AlreadyExistsException ; 
 + import org . apache . cassandra . stress . util . JavaDriverClient ; 
 import org . apache . cassandra . thrift . * ; 
 + import org . apache . cassandra . thrift . ConsistencyLevel ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 public class SettingsSchema implements Serializable 
 @ @ - 56 , 9 + 60 , 159 @ @ public class SettingsSchema implements Serializable 
 
 public void createKeySpaces ( StressSettings settings ) 
 { 
 - createKeySpacesThrift ( settings ) ; 
 + if ( settings . mode . api ! = ConnectionAPI . JAVA _ DRIVER _ NATIVE ) 
 + { 
 + createKeySpacesThrift ( settings ) ; 
 + } 
 + else 
 + { 
 + createKeySpacesNative ( settings ) ; 
 + } 
 } 
 
 + / * * 
 + * Create Keyspace with Standard and Super / Counter column families 
 + * / 
 + public void createKeySpacesNative ( StressSettings settings ) 
 + { 
 + 
 + JavaDriverClient client = settings . getJavaDriverClient ( false ) ; 
 + 
 + try 
 + { 
 + / / Keyspace 
 + client . execute ( createKeyspaceStatementCQL3 ( ) , org . apache . cassandra . db . ConsistencyLevel . LOCAL _ ONE ) ; 
 + 
 + client . execute ( " USE \ " " + keyspace + " \ " " , org . apache . cassandra . db . ConsistencyLevel . LOCAL _ ONE ) ; 
 + 
 + / / Add standard1 and counter1 
 + client . execute ( createStandard1StatementCQL3 ( settings ) , org . apache . cassandra . db . ConsistencyLevel . LOCAL _ ONE ) ; 
 + client . execute ( createCounter1StatementCQL3 ( settings ) , org . apache . cassandra . db . ConsistencyLevel . LOCAL _ ONE ) ; 
 + 
 + System . out . println ( String . format ( " Created keyspaces . Sleeping % ss for propagation . " , settings . node . nodes . size ( ) ) ) ; 
 + Thread . sleep ( settings . node . nodes . size ( ) * 1000L ) ; / / seconds 
 + } 
 + catch ( AlreadyExistsException e ) 
 + { 
 + / / Ok . 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( " Encountered exception creating schema " , e ) ; 
 + } 
 + } 
 + 
 + String createKeyspaceStatementCQL3 ( ) 
 + { 
 + StringBuilder b = new StringBuilder ( ) ; 
 + 
 + / / Create Keyspace 
 + b . append ( " CREATE KEYSPACE IF NOT EXISTS \ " " ) 
 + . append ( keyspace ) 
 + . append ( " \ " WITH replication = { ' class ' : ' " ) 
 + . append ( replicationStrategy ) 
 + . append ( " ' " ) ; 
 + 
 + if ( replicationStrategyOptions . isEmpty ( ) ) 
 + { 
 + b . append ( " , ' replication _ factor ' : ' 1 ' } " ) ; 
 + } 
 + else 
 + { 
 + for ( Map . Entry < String , String > entry : replicationStrategyOptions . entrySet ( ) ) 
 + { 
 + b . append ( " , ' " ) . append ( entry . getKey ( ) ) . append ( " ' : ' " ) . append ( entry . getValue ( ) ) . append ( " ' " ) ; 
 + } 
 + 
 + b . append ( " } " ) ; 
 + } 
 + 
 + b . append ( " AND durable _ writes = true ; \ n " ) ; 
 + 
 + return b . toString ( ) ; 
 + } 
 + 
 + String createStandard1StatementCQL3 ( StressSettings settings ) 
 + { 
 + 
 + StringBuilder b = new StringBuilder ( ) ; 
 + 
 + b . append ( " CREATE TABLE IF NOT EXISTS " ) 
 + . append ( " standard1 ( key blob PRIMARY KEY " ) ; 
 + 
 + try 
 + { 
 + for ( ByteBuffer name : settings . columns . names ) 
 + b . append ( " \ n , \ " " ) . append ( ByteBufferUtil . string ( name ) ) . append ( " \ " blob " ) ; 
 + } 
 + catch ( CharacterCodingException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + 
 + / / Compression 
 + b . append ( " ) WITH COMPACT STORAGE AND compression = { " ) ; 
 + if ( compression ! = null ) 
 + b . append ( " ' sstable _ compression ' : ' " ) . append ( compression ) . append ( " ' " ) ; 
 + 
 + b . append ( " } " ) ; 
 + 
 + / / Compaction 
 + if ( compactionStrategy ! = null ) 
 + { 
 + b . append ( " AND compaction = { ' class ' : ' " ) . append ( compactionStrategy ) . append ( " ' " ) ; 
 + 
 + for ( Map . Entry < String , String > entry : compactionStrategyOptions . entrySet ( ) ) 
 + b . append ( " , ' " ) . append ( entry . getKey ( ) ) . append ( " ' : ' " ) . append ( entry . getValue ( ) ) . append ( " ' " ) ; 
 + 
 + b . append ( " } " ) ; 
 + } 
 + 
 + b . append ( " ; \ n " ) ; 
 + 
 + return b . toString ( ) ; 
 + } 
 + 
 + String createCounter1StatementCQL3 ( StressSettings settings ) 
 + { 
 + 
 + StringBuilder b = new StringBuilder ( ) ; 
 + 
 + b . append ( " CREATE TABLE IF NOT EXISTS " ) 
 + . append ( " counter1 ( key blob PRIMARY KEY , " ) ; 
 + 
 + try 
 + { 
 + for ( ByteBuffer name : settings . columns . names ) 
 + b . append ( " \ n , \ " " ) . append ( ByteBufferUtil . string ( name ) ) . append ( " \ " counter " ) ; 
 + } 
 + catch ( CharacterCodingException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + 
 + / / Compression 
 + b . append ( " ) WITH COMPACT STORAGE AND compression = { " ) ; 
 + if ( compression ! = null ) 
 + b . append ( " ' sstable _ compression ' : ' " ) . append ( compression ) . append ( " ' " ) ; 
 + 
 + b . append ( " } " ) ; 
 + 
 + / / Compaction 
 + if ( compactionStrategy ! = null ) 
 + { 
 + b . append ( " AND compaction = { ' class ' : ' " ) . append ( compactionStrategy ) . append ( " ' " ) ; 
 + 
 + for ( Map . Entry < String , String > entry : compactionStrategyOptions . entrySet ( ) ) 
 + b . append ( " , ' " ) . append ( entry . getKey ( ) ) . append ( " ' : ' " ) . append ( entry . getValue ( ) ) . append ( " ' " ) ; 
 + 
 + b . append ( " } " ) ; 
 + } 
 + 
 + b . append ( " ; \ n " ) ; 
 + 
 + return b . toString ( ) ; 
 + } 
 
 / * * 
 * Create Keyspace with Standard and Super / Counter column families 
 @ @ - 113 , 16 + 267 , 7 @ @ public class SettingsSchema implements Serializable 
 try 
 { 
 client . system _ add _ keyspace ( ksdef ) ; 
 - 
 - / * CQL3 counter cf * / 
 - client . set _ cql _ version ( " 3 . 0 . 0 " ) ; / / just to create counter cf for cql3 
 - 
 client . set _ keyspace ( keyspace ) ; 
 - client . execute _ cql3 _ query ( createCounterCFStatementForCQL3 ( settings ) , Compression . NONE , ConsistencyLevel . ONE ) ; 
 - 
 - if ( settings . mode . cqlVersion . isCql ( ) ) 
 - client . set _ cql _ version ( settings . mode . cqlVersion . connectVersion ) ; 
 - / * end * / 
 
 System . out . println ( String . format ( " Created keyspaces . Sleeping % ss for propagation . " , settings . node . nodes . size ( ) ) ) ; 
 Thread . sleep ( settings . node . nodes . size ( ) * 1000L ) ; / / seconds 
 @ @ - 137 , 20 + 282 , 6 @ @ public class SettingsSchema implements Serializable 
 } 
 } 
 
 - private ByteBuffer createCounterCFStatementForCQL3 ( StressSettings options ) 
 - { 
 - StringBuilder counter3 = new StringBuilder ( " CREATE TABLE \ " Counter3 \ " ( KEY blob PRIMARY KEY , " ) ; 
 - 
 - for ( int i = 0 ; i < options . columns . maxColumnsPerKey ; i + + ) 
 - { 
 - counter3 . append ( " c " ) . append ( i ) . append ( " counter " ) ; 
 - if ( i ! = options . columns . maxColumnsPerKey - 1 ) 
 - counter3 . append ( " , " ) ; 
 - } 
 - counter3 . append ( " ) ; " ) ; 
 - 
 - return ByteBufferUtil . bytes ( counter3 . toString ( ) ) ; 
 - } 
 
 / / Option Declarations 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 8d373cf . . 630ae18 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 60 , 6 + 60 , 7 @ @ 
 * Accept all thrift update on CQL3 cf but don ' t expose their metadata ( CASSANDRA - 4377 ) 
 * Replace Throttle with Guava ' s RateLimiter for HintedHandOff ( CASSANDRA - 4541 ) 
 * fix counter add / get using CQL2 and CQL3 in stress tool ( CASSANDRA - 4633 ) 
 + * Add sstable count per level to cfstats ( CASSANDRA - 4537 ) 
 
 
 1 . 1 . 6 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index d292a63 . . b539228 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 2000 , 6 + 2000 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 : 0 ; 
 } 
 
 + public int [ ] getSSTableCountPerLevel ( ) 
 + { 
 + return compactionStrategy instanceof LeveledCompactionStrategy 
 + ? ( ( LeveledCompactionStrategy ) compactionStrategy ) . getAllLevelSize ( ) 
 + : null ; 
 + } 
 + 
 public static class ViewFragment 
 { 
 public final List < SSTableReader > sstables ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 index b9fee05 . . 9b18c23 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 @ @ - 323 , 4 + 323 , 10 @ @ public interface ColumnFamilyStoreMBean 
 * @ return the number of SSTables in L0 . Always return 0 if Leveled compaction is not enabled . 
 * / 
 public int getUnleveledSSTables ( ) ; 
 + 
 + / * * 
 + * @ return sstable count for each level . null unless leveled compaction is used . 
 + * array index corresponds to level ( int [ 0 ] is for level 0 , . . . ) . 
 + * / 
 + public int [ ] getSSTableCountPerLevel ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 index f6b0d6d . . ced79aa 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 @ @ - 88 , 6 + 88 , 11 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy implem 
 return manifest . getLevelSize ( i ) ; 
 } 
 
 + public int [ ] getAllLevelSize ( ) 
 + { 
 + return manifest . getAllLevelSize ( ) ; 
 + } 
 + 
 / * * 
 * the only difference between background and maximal in LCS is that maximal is still allowed 
 * ( by explicit user request ) even when compaction is disabled . 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 index 9e1e8e4 . . 1906180 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 @ @ - 314 , 6 + 314 , 14 @ @ public class LeveledManifest 
 return generations . length > i ? generations [ i ] . size ( ) : 0 ; 
 } 
 
 + public synchronized int [ ] getAllLevelSize ( ) 
 + { 
 + int [ ] counts = new int [ generations . length ] ; 
 + for ( int i = 0 ; i < counts . length ; i + + ) 
 + counts [ i ] = generations [ i ] . size ( ) ; 
 + return counts ; 
 + } 
 + 
 private void logDistribution ( ) 
 { 
 if ( logger . isDebugEnabled ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index 2359f76 . . b7dfb68 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 756 , 6 + 756 , 27 @ @ public class NodeCmd 
 { 
 outs . println ( " \ t \ tColumn Family : " + cfstore . getColumnFamilyName ( ) ) ; 
 outs . println ( " \ t \ tSSTable count : " + cfstore . getLiveSSTableCount ( ) ) ; 
 + int [ ] leveledSStables = cfstore . getSSTableCountPerLevel ( ) ; 
 + if ( leveledSStables ! = null ) 
 + { 
 + outs . print ( " \ t \ tSSTables in each level : [ " ) ; 
 + for ( int level = 0 ; level < leveledSStables . length ; level + + ) 
 + { 
 + int count = leveledSStables [ level ] ; 
 + outs . print ( count ) ; 
 + long maxCount = 4L ; / / for L0 
 + if ( level > 0 ) 
 + maxCount = ( long ) Math . pow ( 10 , level ) ; 
 + / / show max threshold for level when exceeded 
 + if ( count > maxCount ) 
 + outs . print ( " / " + maxCount ) ; 
 + 
 + if ( level < leveledSStables . length - 1 ) 
 + outs . print ( " , " ) ; 
 + else 
 + outs . println ( " ] " ) ; 
 + } 
 + } 
 outs . println ( " \ t \ tSpace used ( live ) : " + cfstore . getLiveDiskSpaceUsed ( ) ) ; 
 outs . println ( " \ t \ tSpace used ( total ) : " + cfstore . getTotalDiskSpaceUsed ( ) ) ; 
 outs . println ( " \ t \ tNumber of Keys ( estimate ) : " + cfstore . estimateKeys ( ) ) ;
