BLEU SCORE: 0.0024118012379963885

TEST MSG: Backport CASSANDRA - 3569
GENERATED MSG: attempt hint delivery every ten minutes ; hint handoff throttle delay default changed to 1ms , from 50

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0bff87b . . af08802 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 5 , 6 + 5 , 7 @ @ <nl> * Push correct protocol notification for DROP INDEX ( CASSANDRA - 9310 ) <nl> * token - generator - generated tokens too long ( CASSANDRA - 9300 ) <nl> * Add option not to validate atoms during scrub ( CASSANDRA - 9406 ) <nl> + * Backport CASSANDRA - 3569 ( CASSANDRA - 9455 ) <nl> <nl> <nl> 2 . 0 . 15 : <nl> diff - - git a / debian / cassandra - sysctl . conf b / debian / cassandra - sysctl . conf <nl> index 2173765 . . 443e83f 100644 <nl> - - - a / debian / cassandra - sysctl . conf <nl> + + + b / debian / cassandra - sysctl . conf <nl> @ @ - 1 + 1 , 2 @ @ <nl> vm . max _ map _ count = 1048575 <nl> + net . ipv4 . tcp _ keepalive _ time = 300 <nl> diff - - git a / src / java / org / apache / cassandra / streaming / DefaultConnectionFactory . java b / src / java / org / apache / cassandra / streaming / DefaultConnectionFactory . java <nl> index 53af4c8 . . f711490 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / DefaultConnectionFactory . java <nl> + + + b / src / java / org / apache / cassandra / streaming / DefaultConnectionFactory . java <nl> @ @ - 51 , 6 + 51 , 7 @ @ public class DefaultConnectionFactory implements StreamConnectionFactory <nl> { <nl> Socket socket = OutboundTcpConnectionPool . newSocket ( peer ) ; <nl> socket . setSoTimeout ( DatabaseDescriptor . getStreamingSocketTimeout ( ) ) ; <nl> + socket . setKeepAlive ( true ) ; <nl> return socket ; <nl> } <nl> catch ( IOException e ) <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamSession . java b / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> index db0c484 . . 5f774e8 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> @ @ - 109 , 7 + 109 , 7 @ @ import org . apache . cassandra . utils . Pair ; <nl> * session is done is is closed ( closeSession ( ) ) . Otherwise , the node switch to the WAIT _ COMPLETE state and <nl> * send a CompleteMessage to the other side . <nl> * / <nl> - public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDetectionEventListener <nl> + public class StreamSession implements IEndpointStateChangeSubscriber <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( StreamSession . class ) ; <nl> <nl> @ @ - 194 , 10 + 194 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe <nl> public void init ( StreamResultFuture streamResult ) <nl> { <nl> this . streamResult = streamResult ; <nl> - <nl> - / / register to gossiper / FD to fail on node failure <nl> - Gossiper . instance . register ( this ) ; <nl> - FailureDetector . instance . registerFailureDetectionEventListener ( this ) ; <nl> } <nl> <nl> public void start ( ) <nl> @ @ - 372 , 8 + 368 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe <nl> / / incoming thread ( so we would deadlock ) . <nl> handler . close ( ) ; <nl> <nl> - Gossiper . instance . unregister ( this ) ; <nl> - FailureDetector . instance . unregisterFailureDetectionEventListener ( this ) ; <nl> streamResult . handleSessionComplete ( this ) ; <nl> } <nl> } <nl> @ @ - 627 , 23 + 621 , 11 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe <nl> <nl> public void onRemove ( InetAddress endpoint ) <nl> { <nl> - convict ( endpoint , Double . MAX _ VALUE ) ; <nl> + closeSession ( State . FAILED ) ; <nl> } <nl> <nl> public void onRestart ( InetAddress endpoint , EndpointState epState ) <nl> { <nl> - convict ( endpoint , Double . MAX _ VALUE ) ; <nl> - } <nl> - <nl> - public void convict ( InetAddress endpoint , double phi ) <nl> - { <nl> - if ( ! endpoint . equals ( peer ) ) <nl> - return ; <nl> - <nl> - / / We want a higher confidence in the failure detection than usual because failing a streaming wrongly has a high cost ( CASSANDRA - 7063 ) <nl> - if ( phi < 100 * DatabaseDescriptor . getPhiConvictThreshold ( ) ) <nl> - return ; <nl> - <nl> closeSession ( State . FAILED ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9c1f754 . . 5b08fbb 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 27 , 6 + 27 , 7 @ @ <nl> * more efficient allocation of small bloom filters ( CASSANDRA - 3618 ) <nl> * Use separate writer thread in SSTableSimpleUnsortedWriter ( CASSANDRA - 3619 ) <nl> * fsync the directory after new sstable or commitlog segment are created ( CASSANDRA - 3250 ) <nl> + * fix minor issues reported by FindBugs ( CASSANDRA - 3658 ) <nl> <nl> <nl> 1 . 0 . 7 <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index 0af44eb . . c67f184 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 913 , 8 + 913 , 6 @ @ public class CliClient <nl> String columnFamily = CliCompiler . getColumnFamily ( columnFamilySpec , keyspacesMap . get ( keySpace ) . cf _ defs ) ; <nl> ByteBuffer key = getKeyAsBytes ( columnFamily , columnFamilySpec . getChild ( 1 ) ) ; <nl> int columnSpecCnt = CliCompiler . numColumnSpecifiers ( columnFamilySpec ) ; <nl> - CfDef cfDef = getCfDef ( columnFamily ) ; <nl> - boolean isSuper = cfDef . column _ type . equals ( " Super " ) ; <nl> <nl> byte [ ] superColumnName = null ; <nl> ByteBuffer columnName ; <nl> diff - - git a / src / java / org / apache / cassandra / config / ReplicationStrategy . java b / src / java / org / apache / cassandra / config / ReplicationStrategy . java <nl> deleted file mode 100644 <nl> index c74bc3a . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / config / ReplicationStrategy . java <nl> + + + / dev / null <nl> @ @ - 1 , 30 + 0 , 0 @ @ <nl> - package org . apache . cassandra . config ; <nl> - / * <nl> - * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , <nl> - * software distributed under the License is distributed on an <nl> - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> - * KIND , either express or implied . See the License for the <nl> - * specific language governing permissions and limitations <nl> - * under the License . <nl> - * <nl> - * / <nl> - <nl> - <nl> - import java . util . Map ; <nl> - <nl> - public class ReplicationStrategy <nl> - { <nl> - public String strategy _ class ; <nl> - public Map < String , String > strategy _ options ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index b6fa8af . . b049160 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 181 , 7 + 181 , 7 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor <nl> while ( low < = high ) <nl> { <nl> mid = ( low + high ) > > 1 ; <nl> - if ( ( result = - compare ( get ( mid ) . name ( ) , name ) ) > 0 ) <nl> + if ( ( result = compare ( name , get ( mid ) . name ( ) ) ) > 0 ) <nl> { <nl> low = mid + 1 ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index cb715de . . 2337dfc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 258 , 16 + 258 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer <nl> return maxTimestamp ; <nl> } <nl> <nl> + @ Override <nl> public int hashCode ( ) <nl> { <nl> throw new RuntimeException ( " Not implemented . " ) ; <nl> } <nl> <nl> + @ Override <nl> public boolean equals ( Object o ) <nl> { <nl> throw new RuntimeException ( " Not implemented . " ) ; <nl> } <nl> <nl> + @ Override <nl> public String toString ( ) <nl> { <nl> StringBuilder sb = new StringBuilder ( " ColumnFamily ( " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ExpiringColumn . java b / src / java / org / apache / cassandra / db / ExpiringColumn . java <nl> index cb79590 . . 2290ccd 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ExpiringColumn . java <nl> + + + b / src / java / org / apache / cassandra / db / ExpiringColumn . java <nl> @ @ - 170 , 4 + 170 , 22 @ @ public class ExpiringColumn extends Column <nl> if ( localExpirationTime < 0 ) <nl> throw new MarshalException ( " The local expiration time should not be negative " ) ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean equals ( Object o ) <nl> + { <nl> + / / super . equals ( ) returns false if o is not a CounterColumn <nl> + return super . equals ( o ) <nl> + & & localExpirationTime = = ( ( ExpiringColumn ) o ) . localExpirationTime <nl> + & & timeToLive = = ( ( ExpiringColumn ) o ) . timeToLive ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + int result = super . hashCode ( ) ; <nl> + result = 31 * result + localExpirationTime ; <nl> + result = 31 * result + timeToLive ; <nl> + return result ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / RowIteratorFactory . java b / src / java / org / apache / cassandra / db / RowIteratorFactory . java <nl> index a08dbca . . caad3a9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RowIteratorFactory . java <nl> + + + b / src / java / org / apache / cassandra / db / RowIteratorFactory . java <nl> @ @ - 90 , 7 + 90 , 6 @ @ public class RowIteratorFactory <nl> iterators . add ( scanner ) ; <nl> } <nl> <nl> - final Memtable firstMemtable = memtables . iterator ( ) . next ( ) ; <nl> / / reduce rows from all sources into a single row <nl> return MergeIterator . get ( iterators , COMPARE _ BY _ KEY , new MergeIterator . Reducer < IColumnIterator , Row > ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> index 0601317 . . 171692e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> @ @ - 35 , 7 + 35 , 7 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy <nl> private static final Logger logger = LoggerFactory . getLogger ( SizeTieredCompactionStrategy . class ) ; <nl> protected static final long DEFAULT _ MIN _ SSTABLE _ SIZE = 50L * 1024L * 1024L ; <nl> protected static final String MIN _ SSTABLE _ SIZE _ KEY = " min _ sstable _ size " ; <nl> - protected static long minSSTableSize ; <nl> + protected long minSSTableSize ; <nl> protected volatile int estimatedRemainingTasks ; <nl> <nl> public SizeTieredCompactionStrategy ( ColumnFamilyStore cfs , Map < String , String > options ) <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / QueryFilter . java b / src / java / org / apache / cassandra / db / filter / QueryFilter . java <nl> index 0ea0cda . . c7c4fa1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / QueryFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / QueryFilter . java <nl> @ @ - 97 , 11 + 97 , 6 @ @ public class QueryFilter <nl> { <nl> ColumnFamily curCF = returnCF . cloneMeShallow ( ) ; <nl> <nl> - protected boolean isEqual ( IColumn o1 , IColumn o2 ) <nl> - { <nl> - return o1 . name ( ) . equals ( o2 . name ( ) ) ; <nl> - } <nl> - <nl> public void reduce ( IColumn current ) <nl> { <nl> if ( curCF . isSuper ( ) & & curCF . isEmpty ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractType . java b / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> index a7543e3 . . 6cc7913 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public abstract class AbstractType < T > implements Comparator < ByteBuffer > <nl> return 1 ; <nl> } <nl> <nl> - return - AbstractType . this . compare ( o1 , o2 ) ; <nl> + return AbstractType . this . compare ( o2 , o1 ) ; <nl> } <nl> } ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> index 592f392 . . ea9d940 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> @ @ - 248 , 7 + 248 , 7 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> { <nl> int header = 0 ; <nl> if ( isAlias ) <nl> - header = 0x8000 | ( ( byte ) comparatorName . charAt ( 0 ) ) ; <nl> + header = 0x8000 | ( ( ( byte ) comparatorName . charAt ( 0 ) ) & 0xFF ) ; <nl> else <nl> header = comparatorName . length ( ) ; <nl> putShortLength ( bb , header ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / ReversedType . java b / src / java / org / apache / cassandra / db / marshal / ReversedType . java <nl> index 9b41f2f . . 7adbd94 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / ReversedType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / ReversedType . java <nl> @ @ - 69 , 7 + 69 , 7 @ @ public class ReversedType < T > extends AbstractType < T > <nl> return 1 ; <nl> } <nl> <nl> - return - baseType . compare ( o1 , o2 ) ; <nl> + return baseType . compare ( o2 , o1 ) ; <nl> } <nl> <nl> public String getString ( ByteBuffer bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / dht / LocalToken . java b / src / java / org / apache / cassandra / dht / LocalToken . java <nl> index 4a4c15f . . 4354027 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / LocalToken . java <nl> + + + b / src / java / org / apache / cassandra / dht / LocalToken . java <nl> @ @ - 24 , 8 + 24 , 6 @ @ import org . apache . cassandra . db . marshal . AbstractType ; <nl> <nl> public class LocalToken extends Token < ByteBuffer > <nl> { <nl> - static final long serialVersionUID = 8437543776403014875L ; <nl> - <nl> private final AbstractType comparator ; <nl> <nl> public LocalToken ( AbstractType comparator , ByteBuffer token ) <nl> diff - - git a / src / java / org / apache / cassandra / dht / Token . java b / src / java / org / apache / cassandra / dht / Token . java <nl> index dcbea16 . . 5156cb3 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / Token . java <nl> + + + b / src / java / org / apache / cassandra / dht / Token . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ import org . apache . cassandra . io . ISerializer ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> - public abstract class Token < T > implements RingPosition < Token < T > > , Serializable <nl> + public abstract class Token < T > implements RingPosition < Token < T > > <nl> { <nl> private static final long serialVersionUID = 1L ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> index 064d247 . . ad97201 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> @ @ - 258 , 7 + 258 , 7 @ @ public class CompressionMetadata <nl> / * * <nl> * Holds offset and length of the file chunk <nl> * / <nl> - public class Chunk <nl> + public static class Chunk <nl> { <nl> public final long offset ; <nl> public final int length ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java b / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java <nl> index 9c7a9a3 . . 2d52ccb 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . util . * ; <nl> import java . util . concurrent . CountDownLatch ; <nl> import java . util . concurrent . Future ; <nl> import java . util . concurrent . TimeUnit ; <nl> + import java . util . concurrent . TimeoutException ; <nl> <nl> import org . apache . cassandra . config . ConfigurationException ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> @ @ - 165 , 10 + 166 , 12 @ @ public class SSTableLoader <nl> return null ; <nl> } <nl> <nl> - public Void get ( long timeout , TimeUnit unit ) throws InterruptedException <nl> + public Void get ( long timeout , TimeUnit unit ) throws InterruptedException , TimeoutException <nl> { <nl> - latch . await ( timeout , unit ) ; <nl> - return null ; <nl> + if ( latch . await ( timeout , unit ) ) <nl> + return null ; <nl> + else <nl> + throw new TimeoutException ( ) ; <nl> } <nl> <nl> public boolean isCancelled ( ) <nl> diff - - git a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> index f085a38 . . 91fd9be 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> @ @ - 142 , 9 + 142 , 10 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch <nl> <nl> if ( key . equals ( " default " ) ) <nl> { <nl> - defaultDCRack = value . split ( " : " ) ; <nl> - if ( defaultDCRack . length < 2 ) <nl> - defaultDCRack = new String [ ] { " default " , " default " } ; <nl> + String [ ] newDefault = value . split ( " : " ) ; <nl> + if ( newDefault . length < 2 ) <nl> + newDefault = new String [ ] { " default " , " default " } ; <nl> + defaultDCRack = newDefault ; <nl> } <nl> else <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / net / ProtocolHeader . java b / src / java / org / apache / cassandra / net / ProtocolHeader . java <nl> deleted file mode 100644 <nl> index 1be39da . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / net / ProtocolHeader . java <nl> + + + / dev / null <nl> @ @ - 1 , 31 + 0 , 0 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . net ; <nl> - <nl> - public class ProtocolHeader <nl> - { <nl> - public static final String SERIALIZER = " SERIALIZER " ; <nl> - public static final String COMPRESSION = " COMPRESSION " ; <nl> - public static final String VERSION = " VERSION " ; <nl> - <nl> - public int serializerType _ ; <nl> - public boolean isCompressed _ ; <nl> - public boolean isStreamingMode _ ; <nl> - public int version _ ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / service / AntiEntropyService . java b / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> index 535f7ff . . 812c23a 100644 <nl> - - - a / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> + + + b / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> @ @ - 595 , 7 + 595 , 7 @ @ public class AntiEntropyService <nl> * Triggers repairs with all neighbors for the given table , cfs and range . <nl> * Typical lifecycle is : start ( ) then join ( ) . Executed in client threads . <nl> * / <nl> - class RepairSession extends WrappedRunnable implements IEndpointStateChangeSubscriber , IFailureDetectionEventListener <nl> + static class RepairSession extends WrappedRunnable implements IEndpointStateChangeSubscriber , IFailureDetectionEventListener <nl> { <nl> private final String sessionName ; <nl> private final String tablename ; <nl> diff - - git a / src / java / org / apache / cassandra / streaming / FileStreamTask . java b / src / java / org / apache / cassandra / streaming / FileStreamTask . java <nl> index 0df082c . . e04b9b9 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / FileStreamTask . java <nl> + + + b / src / java / org / apache / cassandra / streaming / FileStreamTask . java <nl> @ @ - 185 , 7 + 185 , 7 @ @ public class FileStreamTask extends WrappedRunnable <nl> assert MessagingService . getBits ( msheader , 3 , 1 ) = = 0 : " Stream received before stream reply " ; <nl> int version = MessagingService . getBits ( msheader , 15 , 8 ) ; <nl> <nl> - int totalSize = input . readInt ( ) ; <nl> + input . readInt ( ) ; / / Read total size <nl> String id = input . readUTF ( ) ; <nl> Header header = Header . serializer ( ) . deserialize ( input , version ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java <nl> index 70aa250 . . 20e1008 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java <nl> + + + b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java <nl> @ @ - 24 , 6 + 24 , 8 @ @ import java . io . IOException ; <nl> import java . util . Arrays ; <nl> import java . util . concurrent . atomic . AtomicLongArray ; <nl> <nl> + import com . google . common . base . Objects ; <nl> + <nl> import org . apache . cassandra . io . ISerializer ; <nl> <nl> public class EstimatedHistogram <nl> @ @ - 202 , 6 + 204 , 12 @ @ public class EstimatedHistogram <nl> Arrays . equals ( getBuckets ( false ) , that . getBuckets ( false ) ) ; <nl> } <nl> <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return Objects . hashCode ( getBucketOffsets ( ) , getBuckets ( false ) ) ; <nl> + } <nl> + <nl> public static class EstimatedHistogramSerializer implements ISerializer < EstimatedHistogram > <nl> { <nl> public void serialize ( EstimatedHistogram eh , DataOutput dos ) throws IOException <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index df5ba00 . . 3260f37 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 414 , 7 + 414 , 7 @ @ public class FBUtilities <nl> / / both tokens are on the same side of the wrap point <nl> return o1 . compareTo ( o2 ) ; <nl> } <nl> - return - o1 . compareTo ( o2 ) ; <nl> + return o2 . compareTo ( o1 ) ; <nl> } <nl> } ; <nl> Collections . sort ( keys , comparator ) ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / NodeId . java b / src / java / org / apache / cassandra / utils / NodeId . java <nl> index 5b94080 . . 9e775b7 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / NodeId . java <nl> + + + b / src / java / org / apache / cassandra / utils / NodeId . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . util . concurrent . CopyOnWriteArrayList ; <nl> <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> + import com . google . common . base . Objects ; <nl> <nl> import org . apache . cassandra . db . CounterColumn ; <nl> import org . apache . cassandra . db . SystemTable ; <nl> @ @ - 242 , 6 + 243 , 12 @ @ public class NodeId implements Comparable < NodeId > <nl> return id . equals ( otherRecord . id ) & & timestamp = = otherRecord . timestamp ; <nl> } <nl> <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return Objects . hashCode ( id , timestamp ) ; <nl> + } <nl> + <nl> public String toString ( ) <nl> { <nl> return String . format ( " ( % s , % d ) " , id . toString ( ) , timestamp ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0bff87b . . af08802 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 5 , 6 + 5 , 7 @ @ 
 * Push correct protocol notification for DROP INDEX ( CASSANDRA - 9310 ) 
 * token - generator - generated tokens too long ( CASSANDRA - 9300 ) 
 * Add option not to validate atoms during scrub ( CASSANDRA - 9406 ) 
 + * Backport CASSANDRA - 3569 ( CASSANDRA - 9455 ) 
 
 
 2 . 0 . 15 : 
 diff - - git a / debian / cassandra - sysctl . conf b / debian / cassandra - sysctl . conf 
 index 2173765 . . 443e83f 100644 
 - - - a / debian / cassandra - sysctl . conf 
 + + + b / debian / cassandra - sysctl . conf 
 @ @ - 1 + 1 , 2 @ @ 
 vm . max _ map _ count = 1048575 
 + net . ipv4 . tcp _ keepalive _ time = 300 
 diff - - git a / src / java / org / apache / cassandra / streaming / DefaultConnectionFactory . java b / src / java / org / apache / cassandra / streaming / DefaultConnectionFactory . java 
 index 53af4c8 . . f711490 100644 
 - - - a / src / java / org / apache / cassandra / streaming / DefaultConnectionFactory . java 
 + + + b / src / java / org / apache / cassandra / streaming / DefaultConnectionFactory . java 
 @ @ - 51 , 6 + 51 , 7 @ @ public class DefaultConnectionFactory implements StreamConnectionFactory 
 { 
 Socket socket = OutboundTcpConnectionPool . newSocket ( peer ) ; 
 socket . setSoTimeout ( DatabaseDescriptor . getStreamingSocketTimeout ( ) ) ; 
 + socket . setKeepAlive ( true ) ; 
 return socket ; 
 } 
 catch ( IOException e ) 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamSession . java b / src / java / org / apache / cassandra / streaming / StreamSession . java 
 index db0c484 . . 5f774e8 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamSession . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamSession . java 
 @ @ - 109 , 7 + 109 , 7 @ @ import org . apache . cassandra . utils . Pair ; 
 * session is done is is closed ( closeSession ( ) ) . Otherwise , the node switch to the WAIT _ COMPLETE state and 
 * send a CompleteMessage to the other side . 
 * / 
 - public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDetectionEventListener 
 + public class StreamSession implements IEndpointStateChangeSubscriber 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( StreamSession . class ) ; 
 
 @ @ - 194 , 10 + 194 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe 
 public void init ( StreamResultFuture streamResult ) 
 { 
 this . streamResult = streamResult ; 
 - 
 - / / register to gossiper / FD to fail on node failure 
 - Gossiper . instance . register ( this ) ; 
 - FailureDetector . instance . registerFailureDetectionEventListener ( this ) ; 
 } 
 
 public void start ( ) 
 @ @ - 372 , 8 + 368 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe 
 / / incoming thread ( so we would deadlock ) . 
 handler . close ( ) ; 
 
 - Gossiper . instance . unregister ( this ) ; 
 - FailureDetector . instance . unregisterFailureDetectionEventListener ( this ) ; 
 streamResult . handleSessionComplete ( this ) ; 
 } 
 } 
 @ @ - 627 , 23 + 621 , 11 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe 
 
 public void onRemove ( InetAddress endpoint ) 
 { 
 - convict ( endpoint , Double . MAX _ VALUE ) ; 
 + closeSession ( State . FAILED ) ; 
 } 
 
 public void onRestart ( InetAddress endpoint , EndpointState epState ) 
 { 
 - convict ( endpoint , Double . MAX _ VALUE ) ; 
 - } 
 - 
 - public void convict ( InetAddress endpoint , double phi ) 
 - { 
 - if ( ! endpoint . equals ( peer ) ) 
 - return ; 
 - 
 - / / We want a higher confidence in the failure detection than usual because failing a streaming wrongly has a high cost ( CASSANDRA - 7063 ) 
 - if ( phi < 100 * DatabaseDescriptor . getPhiConvictThreshold ( ) ) 
 - return ; 
 - 
 closeSession ( State . FAILED ) ; 
 } 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9c1f754 . . 5b08fbb 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 27 , 6 + 27 , 7 @ @ 
 * more efficient allocation of small bloom filters ( CASSANDRA - 3618 ) 
 * Use separate writer thread in SSTableSimpleUnsortedWriter ( CASSANDRA - 3619 ) 
 * fsync the directory after new sstable or commitlog segment are created ( CASSANDRA - 3250 ) 
 + * fix minor issues reported by FindBugs ( CASSANDRA - 3658 ) 
 
 
 1 . 0 . 7 
 diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index 0af44eb . . c67f184 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 913 , 8 + 913 , 6 @ @ public class CliClient 
 String columnFamily = CliCompiler . getColumnFamily ( columnFamilySpec , keyspacesMap . get ( keySpace ) . cf _ defs ) ; 
 ByteBuffer key = getKeyAsBytes ( columnFamily , columnFamilySpec . getChild ( 1 ) ) ; 
 int columnSpecCnt = CliCompiler . numColumnSpecifiers ( columnFamilySpec ) ; 
 - CfDef cfDef = getCfDef ( columnFamily ) ; 
 - boolean isSuper = cfDef . column _ type . equals ( " Super " ) ; 
 
 byte [ ] superColumnName = null ; 
 ByteBuffer columnName ; 
 diff - - git a / src / java / org / apache / cassandra / config / ReplicationStrategy . java b / src / java / org / apache / cassandra / config / ReplicationStrategy . java 
 deleted file mode 100644 
 index c74bc3a . . 0000000 
 - - - a / src / java / org / apache / cassandra / config / ReplicationStrategy . java 
 + + + / dev / null 
 @ @ - 1 , 30 + 0 , 0 @ @ 
 - package org . apache . cassandra . config ; 
 - / * 
 - * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , 
 - * software distributed under the License is distributed on an 
 - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 - * KIND , either express or implied . See the License for the 
 - * specific language governing permissions and limitations 
 - * under the License . 
 - * 
 - * / 
 - 
 - 
 - import java . util . Map ; 
 - 
 - public class ReplicationStrategy 
 - { 
 - public String strategy _ class ; 
 - public Map < String , String > strategy _ options ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index b6fa8af . . b049160 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 181 , 7 + 181 , 7 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor 
 while ( low < = high ) 
 { 
 mid = ( low + high ) > > 1 ; 
 - if ( ( result = - compare ( get ( mid ) . name ( ) , name ) ) > 0 ) 
 + if ( ( result = compare ( name , get ( mid ) . name ( ) ) ) > 0 ) 
 { 
 low = mid + 1 ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index cb715de . . 2337dfc 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 258 , 16 + 258 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer 
 return maxTimestamp ; 
 } 
 
 + @ Override 
 public int hashCode ( ) 
 { 
 throw new RuntimeException ( " Not implemented . " ) ; 
 } 
 
 + @ Override 
 public boolean equals ( Object o ) 
 { 
 throw new RuntimeException ( " Not implemented . " ) ; 
 } 
 
 + @ Override 
 public String toString ( ) 
 { 
 StringBuilder sb = new StringBuilder ( " ColumnFamily ( " ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ExpiringColumn . java b / src / java / org / apache / cassandra / db / ExpiringColumn . java 
 index cb79590 . . 2290ccd 100644 
 - - - a / src / java / org / apache / cassandra / db / ExpiringColumn . java 
 + + + b / src / java / org / apache / cassandra / db / ExpiringColumn . java 
 @ @ - 170 , 4 + 170 , 22 @ @ public class ExpiringColumn extends Column 
 if ( localExpirationTime < 0 ) 
 throw new MarshalException ( " The local expiration time should not be negative " ) ; 
 } 
 + 
 + @ Override 
 + public boolean equals ( Object o ) 
 + { 
 + / / super . equals ( ) returns false if o is not a CounterColumn 
 + return super . equals ( o ) 
 + & & localExpirationTime = = ( ( ExpiringColumn ) o ) . localExpirationTime 
 + & & timeToLive = = ( ( ExpiringColumn ) o ) . timeToLive ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + int result = super . hashCode ( ) ; 
 + result = 31 * result + localExpirationTime ; 
 + result = 31 * result + timeToLive ; 
 + return result ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / RowIteratorFactory . java b / src / java / org / apache / cassandra / db / RowIteratorFactory . java 
 index a08dbca . . caad3a9 100644 
 - - - a / src / java / org / apache / cassandra / db / RowIteratorFactory . java 
 + + + b / src / java / org / apache / cassandra / db / RowIteratorFactory . java 
 @ @ - 90 , 7 + 90 , 6 @ @ public class RowIteratorFactory 
 iterators . add ( scanner ) ; 
 } 
 
 - final Memtable firstMemtable = memtables . iterator ( ) . next ( ) ; 
 / / reduce rows from all sources into a single row 
 return MergeIterator . get ( iterators , COMPARE _ BY _ KEY , new MergeIterator . Reducer < IColumnIterator , Row > ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 index 0601317 . . 171692e 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 @ @ - 35 , 7 + 35 , 7 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy 
 private static final Logger logger = LoggerFactory . getLogger ( SizeTieredCompactionStrategy . class ) ; 
 protected static final long DEFAULT _ MIN _ SSTABLE _ SIZE = 50L * 1024L * 1024L ; 
 protected static final String MIN _ SSTABLE _ SIZE _ KEY = " min _ sstable _ size " ; 
 - protected static long minSSTableSize ; 
 + protected long minSSTableSize ; 
 protected volatile int estimatedRemainingTasks ; 
 
 public SizeTieredCompactionStrategy ( ColumnFamilyStore cfs , Map < String , String > options ) 
 diff - - git a / src / java / org / apache / cassandra / db / filter / QueryFilter . java b / src / java / org / apache / cassandra / db / filter / QueryFilter . java 
 index 0ea0cda . . c7c4fa1 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / QueryFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / QueryFilter . java 
 @ @ - 97 , 11 + 97 , 6 @ @ public class QueryFilter 
 { 
 ColumnFamily curCF = returnCF . cloneMeShallow ( ) ; 
 
 - protected boolean isEqual ( IColumn o1 , IColumn o2 ) 
 - { 
 - return o1 . name ( ) . equals ( o2 . name ( ) ) ; 
 - } 
 - 
 public void reduce ( IColumn current ) 
 { 
 if ( curCF . isSuper ( ) & & curCF . isEmpty ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractType . java b / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 index a7543e3 . . 6cc7913 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public abstract class AbstractType < T > implements Comparator < ByteBuffer > 
 return 1 ; 
 } 
 
 - return - AbstractType . this . compare ( o1 , o2 ) ; 
 + return AbstractType . this . compare ( o2 , o1 ) ; 
 } 
 } ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 index 592f392 . . ea9d940 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 @ @ - 248 , 7 + 248 , 7 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 { 
 int header = 0 ; 
 if ( isAlias ) 
 - header = 0x8000 | ( ( byte ) comparatorName . charAt ( 0 ) ) ; 
 + header = 0x8000 | ( ( ( byte ) comparatorName . charAt ( 0 ) ) & 0xFF ) ; 
 else 
 header = comparatorName . length ( ) ; 
 putShortLength ( bb , header ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / ReversedType . java b / src / java / org / apache / cassandra / db / marshal / ReversedType . java 
 index 9b41f2f . . 7adbd94 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / ReversedType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / ReversedType . java 
 @ @ - 69 , 7 + 69 , 7 @ @ public class ReversedType < T > extends AbstractType < T > 
 return 1 ; 
 } 
 
 - return - baseType . compare ( o1 , o2 ) ; 
 + return baseType . compare ( o2 , o1 ) ; 
 } 
 
 public String getString ( ByteBuffer bytes ) 
 diff - - git a / src / java / org / apache / cassandra / dht / LocalToken . java b / src / java / org / apache / cassandra / dht / LocalToken . java 
 index 4a4c15f . . 4354027 100644 
 - - - a / src / java / org / apache / cassandra / dht / LocalToken . java 
 + + + b / src / java / org / apache / cassandra / dht / LocalToken . java 
 @ @ - 24 , 8 + 24 , 6 @ @ import org . apache . cassandra . db . marshal . AbstractType ; 
 
 public class LocalToken extends Token < ByteBuffer > 
 { 
 - static final long serialVersionUID = 8437543776403014875L ; 
 - 
 private final AbstractType comparator ; 
 
 public LocalToken ( AbstractType comparator , ByteBuffer token ) 
 diff - - git a / src / java / org / apache / cassandra / dht / Token . java b / src / java / org / apache / cassandra / dht / Token . java 
 index dcbea16 . . 5156cb3 100644 
 - - - a / src / java / org / apache / cassandra / dht / Token . java 
 + + + b / src / java / org / apache / cassandra / dht / Token . java 
 @ @ - 30 , 7 + 30 , 7 @ @ import org . apache . cassandra . io . ISerializer ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 - public abstract class Token < T > implements RingPosition < Token < T > > , Serializable 
 + public abstract class Token < T > implements RingPosition < Token < T > > 
 { 
 private static final long serialVersionUID = 1L ; 
 
 diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 index 064d247 . . ad97201 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 @ @ - 258 , 7 + 258 , 7 @ @ public class CompressionMetadata 
 / * * 
 * Holds offset and length of the file chunk 
 * / 
 - public class Chunk 
 + public static class Chunk 
 { 
 public final long offset ; 
 public final int length ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java b / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java 
 index 9c7a9a3 . . 2d52ccb 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . util . * ; 
 import java . util . concurrent . CountDownLatch ; 
 import java . util . concurrent . Future ; 
 import java . util . concurrent . TimeUnit ; 
 + import java . util . concurrent . TimeoutException ; 
 
 import org . apache . cassandra . config . ConfigurationException ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 @ @ - 165 , 10 + 166 , 12 @ @ public class SSTableLoader 
 return null ; 
 } 
 
 - public Void get ( long timeout , TimeUnit unit ) throws InterruptedException 
 + public Void get ( long timeout , TimeUnit unit ) throws InterruptedException , TimeoutException 
 { 
 - latch . await ( timeout , unit ) ; 
 - return null ; 
 + if ( latch . await ( timeout , unit ) ) 
 + return null ; 
 + else 
 + throw new TimeoutException ( ) ; 
 } 
 
 public boolean isCancelled ( ) 
 diff - - git a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 index f085a38 . . 91fd9be 100644 
 - - - a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 @ @ - 142 , 9 + 142 , 10 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch 
 
 if ( key . equals ( " default " ) ) 
 { 
 - defaultDCRack = value . split ( " : " ) ; 
 - if ( defaultDCRack . length < 2 ) 
 - defaultDCRack = new String [ ] { " default " , " default " } ; 
 + String [ ] newDefault = value . split ( " : " ) ; 
 + if ( newDefault . length < 2 ) 
 + newDefault = new String [ ] { " default " , " default " } ; 
 + defaultDCRack = newDefault ; 
 } 
 else 
 { 
 diff - - git a / src / java / org / apache / cassandra / net / ProtocolHeader . java b / src / java / org / apache / cassandra / net / ProtocolHeader . java 
 deleted file mode 100644 
 index 1be39da . . 0000000 
 - - - a / src / java / org / apache / cassandra / net / ProtocolHeader . java 
 + + + / dev / null 
 @ @ - 1 , 31 + 0 , 0 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . net ; 
 - 
 - public class ProtocolHeader 
 - { 
 - public static final String SERIALIZER = " SERIALIZER " ; 
 - public static final String COMPRESSION = " COMPRESSION " ; 
 - public static final String VERSION = " VERSION " ; 
 - 
 - public int serializerType _ ; 
 - public boolean isCompressed _ ; 
 - public boolean isStreamingMode _ ; 
 - public int version _ ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / service / AntiEntropyService . java b / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 index 535f7ff . . 812c23a 100644 
 - - - a / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 + + + b / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 @ @ - 595 , 7 + 595 , 7 @ @ public class AntiEntropyService 
 * Triggers repairs with all neighbors for the given table , cfs and range . 
 * Typical lifecycle is : start ( ) then join ( ) . Executed in client threads . 
 * / 
 - class RepairSession extends WrappedRunnable implements IEndpointStateChangeSubscriber , IFailureDetectionEventListener 
 + static class RepairSession extends WrappedRunnable implements IEndpointStateChangeSubscriber , IFailureDetectionEventListener 
 { 
 private final String sessionName ; 
 private final String tablename ; 
 diff - - git a / src / java / org / apache / cassandra / streaming / FileStreamTask . java b / src / java / org / apache / cassandra / streaming / FileStreamTask . java 
 index 0df082c . . e04b9b9 100644 
 - - - a / src / java / org / apache / cassandra / streaming / FileStreamTask . java 
 + + + b / src / java / org / apache / cassandra / streaming / FileStreamTask . java 
 @ @ - 185 , 7 + 185 , 7 @ @ public class FileStreamTask extends WrappedRunnable 
 assert MessagingService . getBits ( msheader , 3 , 1 ) = = 0 : " Stream received before stream reply " ; 
 int version = MessagingService . getBits ( msheader , 15 , 8 ) ; 
 
 - int totalSize = input . readInt ( ) ; 
 + input . readInt ( ) ; / / Read total size 
 String id = input . readUTF ( ) ; 
 Header header = Header . serializer ( ) . deserialize ( input , version ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java 
 index 70aa250 . . 20e1008 100644 
 - - - a / src / java / org / apache / cassandra / utils / EstimatedHistogram . java 
 + + + b / src / java / org / apache / cassandra / utils / EstimatedHistogram . java 
 @ @ - 24 , 6 + 24 , 8 @ @ import java . io . IOException ; 
 import java . util . Arrays ; 
 import java . util . concurrent . atomic . AtomicLongArray ; 
 
 + import com . google . common . base . Objects ; 
 + 
 import org . apache . cassandra . io . ISerializer ; 
 
 public class EstimatedHistogram 
 @ @ - 202 , 6 + 204 , 12 @ @ public class EstimatedHistogram 
 Arrays . equals ( getBuckets ( false ) , that . getBuckets ( false ) ) ; 
 } 
 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return Objects . hashCode ( getBucketOffsets ( ) , getBuckets ( false ) ) ; 
 + } 
 + 
 public static class EstimatedHistogramSerializer implements ISerializer < EstimatedHistogram > 
 { 
 public void serialize ( EstimatedHistogram eh , DataOutput dos ) throws IOException 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index df5ba00 . . 3260f37 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 414 , 7 + 414 , 7 @ @ public class FBUtilities 
 / / both tokens are on the same side of the wrap point 
 return o1 . compareTo ( o2 ) ; 
 } 
 - return - o1 . compareTo ( o2 ) ; 
 + return o2 . compareTo ( o1 ) ; 
 } 
 } ; 
 Collections . sort ( keys , comparator ) ; 
 diff - - git a / src / java / org / apache / cassandra / utils / NodeId . java b / src / java / org / apache / cassandra / utils / NodeId . java 
 index 5b94080 . . 9e775b7 100644 
 - - - a / src / java / org / apache / cassandra / utils / NodeId . java 
 + + + b / src / java / org / apache / cassandra / utils / NodeId . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . util . concurrent . CopyOnWriteArrayList ; 
 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 + import com . google . common . base . Objects ; 
 
 import org . apache . cassandra . db . CounterColumn ; 
 import org . apache . cassandra . db . SystemTable ; 
 @ @ - 242 , 6 + 243 , 12 @ @ public class NodeId implements Comparable < NodeId > 
 return id . equals ( otherRecord . id ) & & timestamp = = otherRecord . timestamp ; 
 } 
 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return Objects . hashCode ( id , timestamp ) ; 
 + } 
 + 
 public String toString ( ) 
 { 
 return String . format ( " ( % s , % d ) " , id . toString ( ) , timestamp ) ;
