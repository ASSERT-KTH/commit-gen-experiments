BLEU SCORE: 0.18393972058572117

TEST MSG: Fix CleanupTest
GENERATED MSG: fix commitlog segment recycling

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / CleanupTest . java b / test / unit / org / apache / cassandra / db / CleanupTest . java <nl> index 5872407 . . d5c2b07 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CleanupTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CleanupTest . java <nl> @ @ - 64 , 8 + 64 , 7 @ @ public class CleanupTest extends SchemaLoader <nl> @ Test <nl> public void testCleanup ( ) throws IOException , ExecutionException , InterruptedException , ConfigurationException <nl> { <nl> - StorageService . instance . initServer ( 0 ) ; <nl> - <nl> + StorageService . instance . getTokenMetadata ( ) . clearUnsafe ( ) ; <nl> Table table = Table . open ( TABLE1 ) ; <nl> ColumnFamilyStore cfs = table . getColumnFamilyStore ( CF2 ) ; <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 69d214e . . a0775fd 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 12 , 6 + 12 , 7 @ @ <nl> * fix default value validation usage in CLI SET command ( CASSANDRA - 3553 ) <nl> * Optimize componentsFor method for compaction and startup time <nl> ( CASSANDRA - 3532 ) <nl> + * ( CQL ) Proper ColumnFamily metadata validation on CREATE COLUMNFAMILY ( CASSANDRA - 3565 ) <nl> Merged from 0 . 8 : <nl> * use cannonical host for local node in nodetool info ( CASSANDRA - 3556 ) <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql / QueryProcessor . java b / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> index abc999a . . f2038ea 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> @ @ - 783 , 10 + 783 , 12 @ @ public class QueryProcessor <nl> CreateColumnFamilyStatement createCf = ( CreateColumnFamilyStatement ) statement . statement ; <nl> clientState . hasColumnFamilySchemaAccess ( Permission . WRITE ) ; <nl> validateSchemaAgreement ( ) ; <nl> - <nl> + CFMetaData cfmd = createCf . getCFMetaData ( keyspace ) ; <nl> + ThriftValidation . validateCfDef ( cfmd . toThrift ( ) , null ) ; <nl> + <nl> try <nl> { <nl> - applyMigrationOnStage ( new AddColumnFamily ( createCf . getCFMetaData ( keyspace ) ) ) ; <nl> + applyMigrationOnStage ( new AddColumnFamily ( cfmd ) ) ; <nl> } <nl> catch ( ConfigurationException e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> index 1ad0eb3 . . 04dd1aa 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> @ @ - 587 , 7 + 587 , 7 @ @ public class ThriftValidation <nl> if ( cf _ def . key _ alias . equals ( columnDef . name ) ) <nl> throw new InvalidRequestException ( " Invalid column name : " <nl> + AsciiType . instance . compose ( cf _ def . key _ alias ) <nl> - + " , because it equals to the key _ alias . " ) ; <nl> + + " , because it equals the key _ alias " ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / CleanupTest . java b / test / unit / org / apache / cassandra / db / CleanupTest . java 
 index 5872407 . . d5c2b07 100644 
 - - - a / test / unit / org / apache / cassandra / db / CleanupTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CleanupTest . java 
 @ @ - 64 , 8 + 64 , 7 @ @ public class CleanupTest extends SchemaLoader 
 @ Test 
 public void testCleanup ( ) throws IOException , ExecutionException , InterruptedException , ConfigurationException 
 { 
 - StorageService . instance . initServer ( 0 ) ; 
 - 
 + StorageService . instance . getTokenMetadata ( ) . clearUnsafe ( ) ; 
 Table table = Table . open ( TABLE1 ) ; 
 ColumnFamilyStore cfs = table . getColumnFamilyStore ( CF2 ) ; 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 69d214e . . a0775fd 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 12 , 6 + 12 , 7 @ @ 
 * fix default value validation usage in CLI SET command ( CASSANDRA - 3553 ) 
 * Optimize componentsFor method for compaction and startup time 
 ( CASSANDRA - 3532 ) 
 + * ( CQL ) Proper ColumnFamily metadata validation on CREATE COLUMNFAMILY ( CASSANDRA - 3565 ) 
 Merged from 0 . 8 : 
 * use cannonical host for local node in nodetool info ( CASSANDRA - 3556 ) 
 
 diff - - git a / src / java / org / apache / cassandra / cql / QueryProcessor . java b / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 index abc999a . . f2038ea 100644 
 - - - a / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 @ @ - 783 , 10 + 783 , 12 @ @ public class QueryProcessor 
 CreateColumnFamilyStatement createCf = ( CreateColumnFamilyStatement ) statement . statement ; 
 clientState . hasColumnFamilySchemaAccess ( Permission . WRITE ) ; 
 validateSchemaAgreement ( ) ; 
 - 
 + CFMetaData cfmd = createCf . getCFMetaData ( keyspace ) ; 
 + ThriftValidation . validateCfDef ( cfmd . toThrift ( ) , null ) ; 
 + 
 try 
 { 
 - applyMigrationOnStage ( new AddColumnFamily ( createCf . getCFMetaData ( keyspace ) ) ) ; 
 + applyMigrationOnStage ( new AddColumnFamily ( cfmd ) ) ; 
 } 
 catch ( ConfigurationException e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 index 1ad0eb3 . . 04dd1aa 100644 
 - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 @ @ - 587 , 7 + 587 , 7 @ @ public class ThriftValidation 
 if ( cf _ def . key _ alias . equals ( columnDef . name ) ) 
 throw new InvalidRequestException ( " Invalid column name : " 
 + AsciiType . instance . compose ( cf _ def . key _ alias ) 
 - + " , because it equals to the key _ alias . " ) ; 
 + + " , because it equals the key _ alias " ) ; 
 } 
 } 

