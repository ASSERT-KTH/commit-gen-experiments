BLEU SCORE: 0.018738883683389617

TEST MSG: Make sure we unmark compacting after scrub / cleanup / upgradesstables
GENERATED MSG: Avoid rescheduling compaction when no compaction was executed

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9b20a06 . . a711790 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 12 : <nl> + * Make sure we unmark compacting after scrub / cleanup etc ( CASSANDRA - 8548 ) <nl> * Check for available disk space before starting a compaction ( CASSANDRA - 8562 ) <nl> * Fix DISTINCT queries with LIMITs or paging when some partitions <nl> contain only tombstones ( CASSANDRA - 8490 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 19dedb0 . . 62599e3 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 220 , 8 + 220 , 14 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> public Object call ( ) throws IOException <nl> { <nl> - operation . perform ( cfs , sstables ) ; <nl> - cfs . getDataTracker ( ) . unmarkCompacting ( sstables ) ; <nl> + try <nl> + { <nl> + operation . perform ( cfs , sstables ) ; <nl> + } <nl> + finally <nl> + { <nl> + cfs . getDataTracker ( ) . unmarkCompacting ( sstables ) ; <nl> + } <nl> return this ; <nl> } <nl> } ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7c909e6 . . f785f9b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> * fix incorrect size exception during streaming of counters ( CASSANDRA - 3481 ) <nl> * ( CQL ) fix for counter decrement syntax ( CASSANDRA - 3418 ) <nl> * Fix race introduced by CASSANDRA - 2503 ( CASSANDRA - 3482 ) <nl> + * Avoid reschuling compactions when no compaction was executed ( CASSANDRA - 3483 ) <nl> Merged from 0 . 8 : <nl> * Make counter shard merging thread safe ( CASSANDRA - 3178 ) <nl> * fix updating CF row _ cache _ provider ( CASSANDRA - 3414 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 7a19b6f . . a51ef60 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 116 , 6 + 116 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> compactionLock . readLock ( ) . lock ( ) ; <nl> try <nl> { <nl> + boolean taskExecuted = false ; <nl> AbstractCompactionStrategy strategy = cfs . getCompactionStrategy ( ) ; <nl> List < AbstractCompactionTask > tasks = strategy . getBackgroundTasks ( getDefaultGcBefore ( cfs ) ) ; <nl> for ( AbstractCompactionTask task : tasks ) <nl> @ @ - 123 , 6 + 124 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> if ( ! task . markSSTablesForCompaction ( ) ) <nl> continue ; <nl> <nl> + taskExecuted = true ; <nl> try <nl> { <nl> task . execute ( executor ) ; <nl> @ @ - 134 , 7 + 136 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> <nl> / / newly created sstables might have made other compactions eligible <nl> - if ( ! tasks . isEmpty ( ) ) <nl> + if ( taskExecuted ) <nl> submitBackground ( cfs ) ; <nl> } <nl> finally

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9b20a06 . . a711790 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 12 : 
 + * Make sure we unmark compacting after scrub / cleanup etc ( CASSANDRA - 8548 ) 
 * Check for available disk space before starting a compaction ( CASSANDRA - 8562 ) 
 * Fix DISTINCT queries with LIMITs or paging when some partitions 
 contain only tombstones ( CASSANDRA - 8490 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 19dedb0 . . 62599e3 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 220 , 8 + 220 , 14 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 public Object call ( ) throws IOException 
 { 
 - operation . perform ( cfs , sstables ) ; 
 - cfs . getDataTracker ( ) . unmarkCompacting ( sstables ) ; 
 + try 
 + { 
 + operation . perform ( cfs , sstables ) ; 
 + } 
 + finally 
 + { 
 + cfs . getDataTracker ( ) . unmarkCompacting ( sstables ) ; 
 + } 
 return this ; 
 } 
 } ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7c909e6 . . f785f9b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 * fix incorrect size exception during streaming of counters ( CASSANDRA - 3481 ) 
 * ( CQL ) fix for counter decrement syntax ( CASSANDRA - 3418 ) 
 * Fix race introduced by CASSANDRA - 2503 ( CASSANDRA - 3482 ) 
 + * Avoid reschuling compactions when no compaction was executed ( CASSANDRA - 3483 ) 
 Merged from 0 . 8 : 
 * Make counter shard merging thread safe ( CASSANDRA - 3178 ) 
 * fix updating CF row _ cache _ provider ( CASSANDRA - 3414 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 7a19b6f . . a51ef60 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 116 , 6 + 116 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 compactionLock . readLock ( ) . lock ( ) ; 
 try 
 { 
 + boolean taskExecuted = false ; 
 AbstractCompactionStrategy strategy = cfs . getCompactionStrategy ( ) ; 
 List < AbstractCompactionTask > tasks = strategy . getBackgroundTasks ( getDefaultGcBefore ( cfs ) ) ; 
 for ( AbstractCompactionTask task : tasks ) 
 @ @ - 123 , 6 + 124 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 if ( ! task . markSSTablesForCompaction ( ) ) 
 continue ; 
 
 + taskExecuted = true ; 
 try 
 { 
 task . execute ( executor ) ; 
 @ @ - 134 , 7 + 136 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 
 / / newly created sstables might have made other compactions eligible 
 - if ( ! tasks . isEmpty ( ) ) 
 + if ( taskExecuted ) 
 submitBackground ( cfs ) ; 
 } 
 finally
