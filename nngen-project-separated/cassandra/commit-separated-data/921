BLEU SCORE: 0.024367494694068095

TEST MSG: Eliminate repeated allocation of Pair for default case
GENERATED MSG: Validate ascii and utf8 string literals in cql queries

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 43d1c3c . . 7db486d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 6 <nl> + * Eliminate allocations in R / W path ( CASSANDRA - 11421 ) <nl> * Update Netty to 4 . 0 . 36 ( CASSANDRA - 11567 ) <nl> * Fix PER PARTITION LIMIT for queries requiring post - query ordering ( CASSANDRA - 11556 ) <nl> * Allow instantiation of UDTs and tuples in UDFs ( CASSANDRA - 10818 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> index 2c2cbb7 . . a18ed3f 100644 <nl> - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> @ @ - 81 , 6 + 81 , 8 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < <nl> private final Comparator < Object > asymmetricCellPathComparator ; <nl> private final Comparator < ? super Cell > cellComparator ; <nl> <nl> + private int hash ; <nl> + <nl> / * * <nl> * These objects are compared frequently , so we encode several of their comparison components <nl> * into a single long value so that this can be done efficiently <nl> @ @ - 262 , 9 + 264 , 21 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < <nl> @ Override <nl> public int hashCode ( ) <nl> { <nl> - return Objects . hashCode ( ksName , cfName , name , type , kind , position ) ; <nl> + / / This achieves the same as Objects . hashcode , but avoids the object array allocation <nl> + / / which features significantly in the allocation profile and caches the result . <nl> + int result = hash ; <nl> + if ( result = = 0 ) <nl> + { <nl> + result = 31 + ( ksName = = null ? 0 : ksName . hashCode ( ) ) ; <nl> + result = 31 * result + ( cfName = = null ? 0 : cfName . hashCode ( ) ) ; <nl> + result = 31 * result + ( name = = null ? 0 : name . hashCode ( ) ) ; <nl> + result = 31 * result + ( type = = null ? 0 : type . hashCode ( ) ) ; <nl> + result = 31 * result + ( kind = = null ? 0 : kind . hashCode ( ) ) ; <nl> + result = 31 * result + position ; <nl> + hash = result ; <nl> + } <nl> + return result ; <nl> } <nl> - <nl> @ Override <nl> public String toString ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / transport / CBUtil . java b / src / java / org / apache / cassandra / transport / CBUtil . java <nl> index 800a9a8 . . 43f4bbd 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / CBUtil . java <nl> + + + b / src / java / org / apache / cassandra / transport / CBUtil . java <nl> @ @ - 33 , 15 + 33 , 19 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . UUID ; <nl> <nl> - import io . netty . buffer . * ; <nl> + import io . netty . buffer . ByteBuf ; <nl> + import io . netty . buffer . ByteBufAllocator ; <nl> + import io . netty . buffer . ByteBufUtil ; <nl> + import io . netty . buffer . PooledByteBufAllocator ; <nl> + import io . netty . buffer . UnpooledByteBufAllocator ; <nl> import io . netty . util . CharsetUtil ; <nl> - <nl> + import io . netty . util . concurrent . FastThreadLocal ; <nl> import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . db . ConsistencyLevel ; <nl> import org . apache . cassandra . db . TypeSizes ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . Pair ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> - import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> / * * <nl> * ByteBuf utility methods . <nl> @ @ - 55 , 9 + 59 , 7 @ @ public abstract class CBUtil <nl> public static final boolean USE _ HEAP _ ALLOCATOR = Boolean . getBoolean ( Config . PROPERTY _ PREFIX + " netty _ use _ heap _ allocator " ) ; <nl> public static final ByteBufAllocator allocator = USE _ HEAP _ ALLOCATOR ? new UnpooledByteBufAllocator ( false ) : new PooledByteBufAllocator ( true ) ; <nl> <nl> - private CBUtil ( ) { } <nl> - <nl> - private final static ThreadLocal < CharsetDecoder > decoder = new ThreadLocal < CharsetDecoder > ( ) <nl> + private final static FastThreadLocal < CharsetDecoder > TL _ UTF8 _ DECODER = new FastThreadLocal < CharsetDecoder > ( ) <nl> { <nl> @ Override <nl> protected CharsetDecoder initialValue ( ) <nl> @ @ - 66 , 6 + 68 , 40 @ @ public abstract class CBUtil <nl> } <nl> } ; <nl> <nl> + private final static FastThreadLocal < CharBuffer > TL _ CHAR _ BUFFER = new FastThreadLocal < > ( ) ; <nl> + <nl> + private CBUtil ( ) { } <nl> + <nl> + <nl> + / / Taken from Netty ' s ChannelBuffers . decodeString ( ) . We need to use our own decoder to properly handle invalid <nl> + / / UTF - 8 sequences . See CASSANDRA - 8101 for more details . This can be removed once https : / / github . com / netty / netty / pull / 2999 <nl> + / / is resolved in a release used by Cassandra . <nl> + private static String decodeString ( ByteBuffer src ) throws CharacterCodingException <nl> + { <nl> + / / the decoder needs to be reset every time we use it , hence the copy per thread <nl> + CharsetDecoder theDecoder = TL _ UTF8 _ DECODER . get ( ) ; <nl> + theDecoder . reset ( ) ; <nl> + CharBuffer dst = TL _ CHAR _ BUFFER . get ( ) ; <nl> + int capacity = ( int ) ( ( double ) src . remaining ( ) * theDecoder . maxCharsPerByte ( ) ) ; <nl> + if ( dst = = null ) { <nl> + capacity = Math . max ( capacity , 4096 ) ; <nl> + dst = CharBuffer . allocate ( capacity ) ; <nl> + TL _ CHAR _ BUFFER . set ( dst ) ; <nl> + } <nl> + else { <nl> + dst . clear ( ) ; <nl> + if ( dst . capacity ( ) < capacity ) { <nl> + dst = CharBuffer . allocate ( capacity ) ; <nl> + TL _ CHAR _ BUFFER . set ( dst ) ; <nl> + } <nl> + } <nl> + CoderResult cr = theDecoder . decode ( src , dst , true ) ; <nl> + if ( ! cr . isUnderflow ( ) ) <nl> + cr . throwException ( ) ; <nl> + <nl> + return dst . flip ( ) . toString ( ) ; <nl> + } <nl> + <nl> private static String readString ( ByteBuf cb , int length ) <nl> { <nl> if ( length = = 0 ) <nl> @ @ - 97 , 34 + 133 , 12 @ @ public abstract class CBUtil <nl> } <nl> } <nl> <nl> - / / Taken from Netty ' s ChannelBuffers . decodeString ( ) . We need to use our own decoder to properly handle invalid <nl> - / / UTF - 8 sequences . See CASSANDRA - 8101 for more details . This can be removed once https : / / github . com / netty / netty / pull / 2999 <nl> - / / is resolved in a release used by Cassandra . <nl> - private static String decodeString ( ByteBuffer src ) throws CharacterCodingException <nl> - { <nl> - / / the decoder needs to be reset every time we use it , hence the copy per thread <nl> - CharsetDecoder theDecoder = decoder . get ( ) ; <nl> - theDecoder . reset ( ) ; <nl> - <nl> - final CharBuffer dst = CharBuffer . allocate ( <nl> - ( int ) ( ( double ) src . remaining ( ) * theDecoder . maxCharsPerByte ( ) ) ) ; <nl> - <nl> - CoderResult cr = theDecoder . decode ( src , dst , true ) ; <nl> - if ( ! cr . isUnderflow ( ) ) <nl> - cr . throwException ( ) ; <nl> - <nl> - cr = theDecoder . flush ( dst ) ; <nl> - if ( ! cr . isUnderflow ( ) ) <nl> - cr . throwException ( ) ; <nl> - <nl> - return dst . flip ( ) . toString ( ) ; <nl> - } <nl> - <nl> public static void writeString ( String str , ByteBuf cb ) <nl> { <nl> - byte [ ] bytes = str . getBytes ( CharsetUtil . UTF _ 8 ) ; <nl> - cb . writeShort ( bytes . length ) ; <nl> - cb . writeBytes ( bytes ) ; <nl> + int writerIndex = cb . writerIndex ( ) ; <nl> + cb . writeShort ( 0 ) ; <nl> + int lengthBytes = ByteBufUtil . writeUtf8 ( cb , str ) ; <nl> + cb . setShort ( writerIndex , lengthBytes ) ; <nl> } <nl> <nl> public static int sizeOfString ( String str ) <nl> diff - - git a / src / java / org / apache / cassandra / transport / DataType . java b / src / java / org / apache / cassandra / transport / DataType . java <nl> index acaa9a3 . . 7abcba7 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / DataType . java <nl> + + + b / src / java / org / apache / cassandra / transport / DataType . java <nl> @ @ - 66 , 6 + 66 , 7 @ @ public enum DataType implements OptionCodec . Codecable < DataType > <nl> private final int id ; <nl> private final int protocolVersion ; <nl> private final AbstractType type ; <nl> + private final Pair < DataType , Object > pair ; <nl> private static final Map < AbstractType , DataType > dataTypeMap = new HashMap < AbstractType , DataType > ( ) ; <nl> static <nl> { <nl> @ @ - 81 , 6 + 82 , 7 @ @ public enum DataType implements OptionCodec . Codecable < DataType > <nl> this . id = id ; <nl> this . type = type ; <nl> this . protocolVersion = protocolVersion ; <nl> + pair = Pair . create ( this , null ) ; <nl> } <nl> <nl> public int getId ( int version ) <nl> @ @ - 261 , 7 + 263 , 7 @ @ public enum DataType implements OptionCodec . Codecable < DataType > <nl> / / Fall back to CUSTOM if target doesn ' t know this data type <nl> if ( version < dt . protocolVersion ) <nl> return Pair . < DataType , Object > create ( CUSTOM , type . toString ( ) ) ; <nl> - return Pair . create ( dt , null ) ; <nl> + return dt . pair ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 43d1c3c . . 7db486d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 6 
 + * Eliminate allocations in R / W path ( CASSANDRA - 11421 ) 
 * Update Netty to 4 . 0 . 36 ( CASSANDRA - 11567 ) 
 * Fix PER PARTITION LIMIT for queries requiring post - query ordering ( CASSANDRA - 11556 ) 
 * Allow instantiation of UDTs and tuples in UDFs ( CASSANDRA - 10818 ) 
 diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 index 2c2cbb7 . . a18ed3f 100644 
 - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 @ @ - 81 , 6 + 81 , 8 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < 
 private final Comparator < Object > asymmetricCellPathComparator ; 
 private final Comparator < ? super Cell > cellComparator ; 
 
 + private int hash ; 
 + 
 / * * 
 * These objects are compared frequently , so we encode several of their comparison components 
 * into a single long value so that this can be done efficiently 
 @ @ - 262 , 9 + 264 , 21 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < 
 @ Override 
 public int hashCode ( ) 
 { 
 - return Objects . hashCode ( ksName , cfName , name , type , kind , position ) ; 
 + / / This achieves the same as Objects . hashcode , but avoids the object array allocation 
 + / / which features significantly in the allocation profile and caches the result . 
 + int result = hash ; 
 + if ( result = = 0 ) 
 + { 
 + result = 31 + ( ksName = = null ? 0 : ksName . hashCode ( ) ) ; 
 + result = 31 * result + ( cfName = = null ? 0 : cfName . hashCode ( ) ) ; 
 + result = 31 * result + ( name = = null ? 0 : name . hashCode ( ) ) ; 
 + result = 31 * result + ( type = = null ? 0 : type . hashCode ( ) ) ; 
 + result = 31 * result + ( kind = = null ? 0 : kind . hashCode ( ) ) ; 
 + result = 31 * result + position ; 
 + hash = result ; 
 + } 
 + return result ; 
 } 
 - 
 @ Override 
 public String toString ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / transport / CBUtil . java b / src / java / org / apache / cassandra / transport / CBUtil . java 
 index 800a9a8 . . 43f4bbd 100644 
 - - - a / src / java / org / apache / cassandra / transport / CBUtil . java 
 + + + b / src / java / org / apache / cassandra / transport / CBUtil . java 
 @ @ - 33 , 15 + 33 , 19 @ @ import java . util . List ; 
 import java . util . Map ; 
 import java . util . UUID ; 
 
 - import io . netty . buffer . * ; 
 + import io . netty . buffer . ByteBuf ; 
 + import io . netty . buffer . ByteBufAllocator ; 
 + import io . netty . buffer . ByteBufUtil ; 
 + import io . netty . buffer . PooledByteBufAllocator ; 
 + import io . netty . buffer . UnpooledByteBufAllocator ; 
 import io . netty . util . CharsetUtil ; 
 - 
 + import io . netty . util . concurrent . FastThreadLocal ; 
 import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . db . ConsistencyLevel ; 
 import org . apache . cassandra . db . TypeSizes ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . Pair ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 - import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 / * * 
 * ByteBuf utility methods . 
 @ @ - 55 , 9 + 59 , 7 @ @ public abstract class CBUtil 
 public static final boolean USE _ HEAP _ ALLOCATOR = Boolean . getBoolean ( Config . PROPERTY _ PREFIX + " netty _ use _ heap _ allocator " ) ; 
 public static final ByteBufAllocator allocator = USE _ HEAP _ ALLOCATOR ? new UnpooledByteBufAllocator ( false ) : new PooledByteBufAllocator ( true ) ; 
 
 - private CBUtil ( ) { } 
 - 
 - private final static ThreadLocal < CharsetDecoder > decoder = new ThreadLocal < CharsetDecoder > ( ) 
 + private final static FastThreadLocal < CharsetDecoder > TL _ UTF8 _ DECODER = new FastThreadLocal < CharsetDecoder > ( ) 
 { 
 @ Override 
 protected CharsetDecoder initialValue ( ) 
 @ @ - 66 , 6 + 68 , 40 @ @ public abstract class CBUtil 
 } 
 } ; 
 
 + private final static FastThreadLocal < CharBuffer > TL _ CHAR _ BUFFER = new FastThreadLocal < > ( ) ; 
 + 
 + private CBUtil ( ) { } 
 + 
 + 
 + / / Taken from Netty ' s ChannelBuffers . decodeString ( ) . We need to use our own decoder to properly handle invalid 
 + / / UTF - 8 sequences . See CASSANDRA - 8101 for more details . This can be removed once https : / / github . com / netty / netty / pull / 2999 
 + / / is resolved in a release used by Cassandra . 
 + private static String decodeString ( ByteBuffer src ) throws CharacterCodingException 
 + { 
 + / / the decoder needs to be reset every time we use it , hence the copy per thread 
 + CharsetDecoder theDecoder = TL _ UTF8 _ DECODER . get ( ) ; 
 + theDecoder . reset ( ) ; 
 + CharBuffer dst = TL _ CHAR _ BUFFER . get ( ) ; 
 + int capacity = ( int ) ( ( double ) src . remaining ( ) * theDecoder . maxCharsPerByte ( ) ) ; 
 + if ( dst = = null ) { 
 + capacity = Math . max ( capacity , 4096 ) ; 
 + dst = CharBuffer . allocate ( capacity ) ; 
 + TL _ CHAR _ BUFFER . set ( dst ) ; 
 + } 
 + else { 
 + dst . clear ( ) ; 
 + if ( dst . capacity ( ) < capacity ) { 
 + dst = CharBuffer . allocate ( capacity ) ; 
 + TL _ CHAR _ BUFFER . set ( dst ) ; 
 + } 
 + } 
 + CoderResult cr = theDecoder . decode ( src , dst , true ) ; 
 + if ( ! cr . isUnderflow ( ) ) 
 + cr . throwException ( ) ; 
 + 
 + return dst . flip ( ) . toString ( ) ; 
 + } 
 + 
 private static String readString ( ByteBuf cb , int length ) 
 { 
 if ( length = = 0 ) 
 @ @ - 97 , 34 + 133 , 12 @ @ public abstract class CBUtil 
 } 
 } 
 
 - / / Taken from Netty ' s ChannelBuffers . decodeString ( ) . We need to use our own decoder to properly handle invalid 
 - / / UTF - 8 sequences . See CASSANDRA - 8101 for more details . This can be removed once https : / / github . com / netty / netty / pull / 2999 
 - / / is resolved in a release used by Cassandra . 
 - private static String decodeString ( ByteBuffer src ) throws CharacterCodingException 
 - { 
 - / / the decoder needs to be reset every time we use it , hence the copy per thread 
 - CharsetDecoder theDecoder = decoder . get ( ) ; 
 - theDecoder . reset ( ) ; 
 - 
 - final CharBuffer dst = CharBuffer . allocate ( 
 - ( int ) ( ( double ) src . remaining ( ) * theDecoder . maxCharsPerByte ( ) ) ) ; 
 - 
 - CoderResult cr = theDecoder . decode ( src , dst , true ) ; 
 - if ( ! cr . isUnderflow ( ) ) 
 - cr . throwException ( ) ; 
 - 
 - cr = theDecoder . flush ( dst ) ; 
 - if ( ! cr . isUnderflow ( ) ) 
 - cr . throwException ( ) ; 
 - 
 - return dst . flip ( ) . toString ( ) ; 
 - } 
 - 
 public static void writeString ( String str , ByteBuf cb ) 
 { 
 - byte [ ] bytes = str . getBytes ( CharsetUtil . UTF _ 8 ) ; 
 - cb . writeShort ( bytes . length ) ; 
 - cb . writeBytes ( bytes ) ; 
 + int writerIndex = cb . writerIndex ( ) ; 
 + cb . writeShort ( 0 ) ; 
 + int lengthBytes = ByteBufUtil . writeUtf8 ( cb , str ) ; 
 + cb . setShort ( writerIndex , lengthBytes ) ; 
 } 
 
 public static int sizeOfString ( String str ) 
 diff - - git a / src / java / org / apache / cassandra / transport / DataType . java b / src / java / org / apache / cassandra / transport / DataType . java 
 index acaa9a3 . . 7abcba7 100644 
 - - - a / src / java / org / apache / cassandra / transport / DataType . java 
 + + + b / src / java / org / apache / cassandra / transport / DataType . java 
 @ @ - 66 , 6 + 66 , 7 @ @ public enum DataType implements OptionCodec . Codecable < DataType > 
 private final int id ; 
 private final int protocolVersion ; 
 private final AbstractType type ; 
 + private final Pair < DataType , Object > pair ; 
 private static final Map < AbstractType , DataType > dataTypeMap = new HashMap < AbstractType , DataType > ( ) ; 
 static 
 { 
 @ @ - 81 , 6 + 82 , 7 @ @ public enum DataType implements OptionCodec . Codecable < DataType > 
 this . id = id ; 
 this . type = type ; 
 this . protocolVersion = protocolVersion ; 
 + pair = Pair . create ( this , null ) ; 
 } 
 
 public int getId ( int version ) 
 @ @ - 261 , 7 + 263 , 7 @ @ public enum DataType implements OptionCodec . Codecable < DataType > 
 / / Fall back to CUSTOM if target doesn ' t know this data type 
 if ( version < dt . protocolVersion ) 
 return Pair . < DataType , Object > create ( CUSTOM , type . toString ( ) ) ; 
 - return Pair . create ( dt , null ) ; 
 + return dt . pair ; 
 } 
 } 


NEAREST DIFF:
ELIMINATEDSENTENCE
