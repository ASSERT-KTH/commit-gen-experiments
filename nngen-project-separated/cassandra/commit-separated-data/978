BLEU SCORE: 0.013139808552042212

TEST MSG: Non - obsoleting compaction operations over compressed files can impose rate limit on normal reads
GENERATED MSG: Fix potential data loss in CompressedSequentialWriter ( 2 . 1 patch )

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d7b0fc2 . . b9596d9 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 6 <nl> + * Non - obsoleting compaction operations over compressed files can impose rate limit on normal reads ( CASSANDRA - 11301 ) <nl> * Add missing newline at end of bin / cqlsh ( CASSANDRA - 11325 ) <nl> * Fix AE in nodetool cfstats ( backport CASSANDRA - 10859 ) ( CASSANDRA - 11297 ) <nl> * Unresolved hostname leads to replace being ignored ( CASSANDRA - 11210 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> index e6ac60a . . ccfa5e7 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> @ @ - 41 , 26 + 41 , 15 @ @ public class CompressedRandomAccessReader extends RandomAccessReader <nl> { <nl> public static CompressedRandomAccessReader open ( ChannelProxy channel , CompressionMetadata metadata ) <nl> { <nl> - try <nl> - { <nl> - return new CompressedRandomAccessReader ( channel , metadata , null ) ; <nl> - } <nl> - catch ( FileNotFoundException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + return new CompressedRandomAccessReader ( channel , metadata , null , null ) ; <nl> } <nl> <nl> public static CompressedRandomAccessReader open ( ICompressedFile file ) <nl> { <nl> - try <nl> - { <nl> - return new CompressedRandomAccessReader ( file . channel ( ) , file . getMetadata ( ) , file ) ; <nl> - } <nl> - catch ( FileNotFoundException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + return new CompressedRandomAccessReader ( file . channel ( ) , <nl> + file . getMetadata ( ) , <nl> + file , <nl> + file instanceof PoolingSegmentedFile ? ( PoolingSegmentedFile ) file : null ) ; <nl> } <nl> <nl> private final TreeMap < Long , MappedByteBuffer > chunkSegments ; <nl> @ @ - 76 , 9 + 65 , 9 @ @ public class CompressedRandomAccessReader extends RandomAccessReader <nl> / / raw checksum bytes <nl> private ByteBuffer checksumBytes ; <nl> <nl> - protected CompressedRandomAccessReader ( ChannelProxy channel , CompressionMetadata metadata , ICompressedFile file ) throws FileNotFoundException <nl> + protected CompressedRandomAccessReader ( ChannelProxy channel , CompressionMetadata metadata , ICompressedFile file , PoolingSegmentedFile owner ) <nl> { <nl> - super ( channel , metadata . chunkLength ( ) , metadata . compressedFileLength , metadata . compressor ( ) . preferredBufferType ( ) , file instanceof PoolingSegmentedFile ? ( PoolingSegmentedFile ) file : null ) ; <nl> + super ( channel , metadata . chunkLength ( ) , metadata . compressedFileLength , metadata . compressor ( ) . preferredBufferType ( ) , owner ) ; <nl> this . metadata = metadata ; <nl> checksum = new Adler32 ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedThrottledReader . java b / src / java / org / apache / cassandra / io / compress / CompressedThrottledReader . java <nl> index a29129c . . 2b07c50 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressedThrottledReader . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressedThrottledReader . java <nl> @ @ - 21 , 8 + 21 , 6 @ @ package org . apache . cassandra . io . compress ; <nl> * / <nl> <nl> <nl> - import java . io . FileNotFoundException ; <nl> - <nl> import com . google . common . util . concurrent . RateLimiter ; <nl> <nl> import org . apache . cassandra . io . util . ChannelProxy ; <nl> @ @ - 32 , 9 + 30 , 9 @ @ public class CompressedThrottledReader extends CompressedRandomAccessReader <nl> { <nl> private final RateLimiter limiter ; <nl> <nl> - public CompressedThrottledReader ( ChannelProxy channel , CompressionMetadata metadata , ICompressedFile file , RateLimiter limiter ) throws FileNotFoundException <nl> + public CompressedThrottledReader ( ChannelProxy channel , CompressionMetadata metadata , ICompressedFile file , RateLimiter limiter ) <nl> { <nl> - super ( channel , metadata , file ) ; <nl> + super ( channel , metadata , file , null ) ; <nl> this . limiter = limiter ; <nl> } <nl> <nl> @ @ - 46 , 13 + 44 , 6 @ @ public class CompressedThrottledReader extends CompressedRandomAccessReader <nl> <nl> public static CompressedThrottledReader open ( ICompressedFile file , RateLimiter limiter ) <nl> { <nl> - try <nl> - { <nl> - return new CompressedThrottledReader ( file . channel ( ) , file . getMetadata ( ) , file , limiter ) ; <nl> - } <nl> - catch ( FileNotFoundException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + return new CompressedThrottledReader ( file . channel ( ) , file . getMetadata ( ) , file , limiter ) ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / io / compress / CompressedRandomAccessReaderTest . java b / test / unit / org / apache / cassandra / io / compress / CompressedRandomAccessReaderTest . java <nl> index 0cf4cfa . . 931422b 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / compress / CompressedRandomAccessReaderTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / compress / CompressedRandomAccessReaderTest . java <nl> @ @ - 24 , 20 + 24 , 26 @ @ import java . io . RandomAccessFile ; <nl> import java . util . Collections ; <nl> import java . util . Random ; <nl> <nl> + import com . google . common . util . concurrent . RateLimiter ; <nl> import org . junit . Test ; <nl> + <nl> import org . apache . cassandra . db . composites . SimpleDenseCellNameType ; <nl> import org . apache . cassandra . db . marshal . BytesType ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . io . sstable . CorruptSSTableException ; <nl> import org . apache . cassandra . io . sstable . metadata . MetadataCollector ; <nl> import org . apache . cassandra . io . util . ChannelProxy ; <nl> + import org . apache . cassandra . io . util . CompressedPoolingSegmentedFile ; <nl> + import org . apache . cassandra . io . util . FileDataInput ; <nl> import org . apache . cassandra . io . util . FileMark ; <nl> import org . apache . cassandra . io . util . RandomAccessReader ; <nl> import org . apache . cassandra . io . util . SequentialWriter ; <nl> import org . apache . cassandra . utils . SyncUtil ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotNull ; <nl> + import static org . junit . Assert . assertTrue ; <nl> <nl> public class CompressedRandomAccessReaderTest <nl> { <nl> @ @ - 234 , 6 + 240 , 60 @ @ public class CompressedRandomAccessReaderTest <nl> } <nl> } <nl> <nl> + @ Test <nl> + public void testThrottledReadersAreNotCached ( ) throws IOException <nl> + { <nl> + String CONTENT = " Lorem ipsum dolor sit amet , consectetur adipiscing elit . Etiam vitae . " ; <nl> + <nl> + File file = new File ( " testThrottledReadersAreNotCached " ) ; <nl> + file . deleteOnExit ( ) ; <nl> + <nl> + File metadata = new File ( file . getPath ( ) + " . meta " ) ; <nl> + metadata . deleteOnExit ( ) ; <nl> + <nl> + MetadataCollector sstableMetadataCollector = new MetadataCollector ( new SimpleDenseCellNameType ( BytesType . instance ) ) . replayPosition ( null ) ; <nl> + try ( SequentialWriter writer = new CompressedSequentialWriter ( file , metadata . getPath ( ) , new CompressionParameters ( SnappyCompressor . instance ) , sstableMetadataCollector ) ) <nl> + { <nl> + writer . write ( CONTENT . getBytes ( ) ) ; <nl> + writer . finish ( ) ; <nl> + } <nl> + <nl> + CompressionMetadata meta = new CompressionMetadata ( metadata . getPath ( ) , file . length ( ) ) ; <nl> + <nl> + try ( ChannelProxy channel = new ChannelProxy ( file ) ; <nl> + CompressedPoolingSegmentedFile segmentedFile = new CompressedPoolingSegmentedFile ( channel , meta ) ) <nl> + { <nl> + / / The cache bucket is only initialized by a call to FileCacheService . instance . get ( ) so first <nl> + / / we must create a reader using the interface for accessing segments <nl> + FileDataInput reader = segmentedFile . getSegment ( 0 ) ; <nl> + assertNotNull ( reader ) ; <nl> + reader . close ( ) ; <nl> + <nl> + / / Now we create a throttled reader , this should not be added to the cache <nl> + RateLimiter limiter = RateLimiter . create ( 1024 ) ; <nl> + reader = segmentedFile . createThrottledReader ( limiter ) ; <nl> + assertNotNull ( reader ) ; <nl> + assertTrue ( reader instanceof CompressedThrottledReader ) ; <nl> + reader . close ( ) ; <nl> + <nl> + / / We retrieve 2 readers , neither should be a throttled reader <nl> + FileDataInput [ ] readers = <nl> + { <nl> + segmentedFile . getSegment ( 0 ) , <nl> + segmentedFile . getSegment ( 0 ) <nl> + } ; <nl> + <nl> + for ( FileDataInput r : readers ) <nl> + { <nl> + assertNotNull ( r ) ; <nl> + assertFalse ( r instanceof CompressedThrottledReader ) ; <nl> + } <nl> + <nl> + for ( FileDataInput r : readers ) <nl> + r . close ( ) ; <nl> + } <nl> + } <nl> + <nl> private void updateChecksum ( RandomAccessFile file , long checksumOffset , byte [ ] checksum ) throws IOException <nl> { <nl> file . seek ( checksumOffset ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d7b0fc2 . . b9596d9 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 6 
 + * Non - obsoleting compaction operations over compressed files can impose rate limit on normal reads ( CASSANDRA - 11301 ) 
 * Add missing newline at end of bin / cqlsh ( CASSANDRA - 11325 ) 
 * Fix AE in nodetool cfstats ( backport CASSANDRA - 10859 ) ( CASSANDRA - 11297 ) 
 * Unresolved hostname leads to replace being ignored ( CASSANDRA - 11210 ) 
 diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 index e6ac60a . . ccfa5e7 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 @ @ - 41 , 26 + 41 , 15 @ @ public class CompressedRandomAccessReader extends RandomAccessReader 
 { 
 public static CompressedRandomAccessReader open ( ChannelProxy channel , CompressionMetadata metadata ) 
 { 
 - try 
 - { 
 - return new CompressedRandomAccessReader ( channel , metadata , null ) ; 
 - } 
 - catch ( FileNotFoundException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + return new CompressedRandomAccessReader ( channel , metadata , null , null ) ; 
 } 
 
 public static CompressedRandomAccessReader open ( ICompressedFile file ) 
 { 
 - try 
 - { 
 - return new CompressedRandomAccessReader ( file . channel ( ) , file . getMetadata ( ) , file ) ; 
 - } 
 - catch ( FileNotFoundException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + return new CompressedRandomAccessReader ( file . channel ( ) , 
 + file . getMetadata ( ) , 
 + file , 
 + file instanceof PoolingSegmentedFile ? ( PoolingSegmentedFile ) file : null ) ; 
 } 
 
 private final TreeMap < Long , MappedByteBuffer > chunkSegments ; 
 @ @ - 76 , 9 + 65 , 9 @ @ public class CompressedRandomAccessReader extends RandomAccessReader 
 / / raw checksum bytes 
 private ByteBuffer checksumBytes ; 
 
 - protected CompressedRandomAccessReader ( ChannelProxy channel , CompressionMetadata metadata , ICompressedFile file ) throws FileNotFoundException 
 + protected CompressedRandomAccessReader ( ChannelProxy channel , CompressionMetadata metadata , ICompressedFile file , PoolingSegmentedFile owner ) 
 { 
 - super ( channel , metadata . chunkLength ( ) , metadata . compressedFileLength , metadata . compressor ( ) . preferredBufferType ( ) , file instanceof PoolingSegmentedFile ? ( PoolingSegmentedFile ) file : null ) ; 
 + super ( channel , metadata . chunkLength ( ) , metadata . compressedFileLength , metadata . compressor ( ) . preferredBufferType ( ) , owner ) ; 
 this . metadata = metadata ; 
 checksum = new Adler32 ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedThrottledReader . java b / src / java / org / apache / cassandra / io / compress / CompressedThrottledReader . java 
 index a29129c . . 2b07c50 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressedThrottledReader . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressedThrottledReader . java 
 @ @ - 21 , 8 + 21 , 6 @ @ package org . apache . cassandra . io . compress ; 
 * / 
 
 
 - import java . io . FileNotFoundException ; 
 - 
 import com . google . common . util . concurrent . RateLimiter ; 
 
 import org . apache . cassandra . io . util . ChannelProxy ; 
 @ @ - 32 , 9 + 30 , 9 @ @ public class CompressedThrottledReader extends CompressedRandomAccessReader 
 { 
 private final RateLimiter limiter ; 
 
 - public CompressedThrottledReader ( ChannelProxy channel , CompressionMetadata metadata , ICompressedFile file , RateLimiter limiter ) throws FileNotFoundException 
 + public CompressedThrottledReader ( ChannelProxy channel , CompressionMetadata metadata , ICompressedFile file , RateLimiter limiter ) 
 { 
 - super ( channel , metadata , file ) ; 
 + super ( channel , metadata , file , null ) ; 
 this . limiter = limiter ; 
 } 
 
 @ @ - 46 , 13 + 44 , 6 @ @ public class CompressedThrottledReader extends CompressedRandomAccessReader 
 
 public static CompressedThrottledReader open ( ICompressedFile file , RateLimiter limiter ) 
 { 
 - try 
 - { 
 - return new CompressedThrottledReader ( file . channel ( ) , file . getMetadata ( ) , file , limiter ) ; 
 - } 
 - catch ( FileNotFoundException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + return new CompressedThrottledReader ( file . channel ( ) , file . getMetadata ( ) , file , limiter ) ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / io / compress / CompressedRandomAccessReaderTest . java b / test / unit / org / apache / cassandra / io / compress / CompressedRandomAccessReaderTest . java 
 index 0cf4cfa . . 931422b 100644 
 - - - a / test / unit / org / apache / cassandra / io / compress / CompressedRandomAccessReaderTest . java 
 + + + b / test / unit / org / apache / cassandra / io / compress / CompressedRandomAccessReaderTest . java 
 @ @ - 24 , 20 + 24 , 26 @ @ import java . io . RandomAccessFile ; 
 import java . util . Collections ; 
 import java . util . Random ; 
 
 + import com . google . common . util . concurrent . RateLimiter ; 
 import org . junit . Test ; 
 + 
 import org . apache . cassandra . db . composites . SimpleDenseCellNameType ; 
 import org . apache . cassandra . db . marshal . BytesType ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . io . sstable . CorruptSSTableException ; 
 import org . apache . cassandra . io . sstable . metadata . MetadataCollector ; 
 import org . apache . cassandra . io . util . ChannelProxy ; 
 + import org . apache . cassandra . io . util . CompressedPoolingSegmentedFile ; 
 + import org . apache . cassandra . io . util . FileDataInput ; 
 import org . apache . cassandra . io . util . FileMark ; 
 import org . apache . cassandra . io . util . RandomAccessReader ; 
 import org . apache . cassandra . io . util . SequentialWriter ; 
 import org . apache . cassandra . utils . SyncUtil ; 
 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotNull ; 
 + import static org . junit . Assert . assertTrue ; 
 
 public class CompressedRandomAccessReaderTest 
 { 
 @ @ - 234 , 6 + 240 , 60 @ @ public class CompressedRandomAccessReaderTest 
 } 
 } 
 
 + @ Test 
 + public void testThrottledReadersAreNotCached ( ) throws IOException 
 + { 
 + String CONTENT = " Lorem ipsum dolor sit amet , consectetur adipiscing elit . Etiam vitae . " ; 
 + 
 + File file = new File ( " testThrottledReadersAreNotCached " ) ; 
 + file . deleteOnExit ( ) ; 
 + 
 + File metadata = new File ( file . getPath ( ) + " . meta " ) ; 
 + metadata . deleteOnExit ( ) ; 
 + 
 + MetadataCollector sstableMetadataCollector = new MetadataCollector ( new SimpleDenseCellNameType ( BytesType . instance ) ) . replayPosition ( null ) ; 
 + try ( SequentialWriter writer = new CompressedSequentialWriter ( file , metadata . getPath ( ) , new CompressionParameters ( SnappyCompressor . instance ) , sstableMetadataCollector ) ) 
 + { 
 + writer . write ( CONTENT . getBytes ( ) ) ; 
 + writer . finish ( ) ; 
 + } 
 + 
 + CompressionMetadata meta = new CompressionMetadata ( metadata . getPath ( ) , file . length ( ) ) ; 
 + 
 + try ( ChannelProxy channel = new ChannelProxy ( file ) ; 
 + CompressedPoolingSegmentedFile segmentedFile = new CompressedPoolingSegmentedFile ( channel , meta ) ) 
 + { 
 + / / The cache bucket is only initialized by a call to FileCacheService . instance . get ( ) so first 
 + / / we must create a reader using the interface for accessing segments 
 + FileDataInput reader = segmentedFile . getSegment ( 0 ) ; 
 + assertNotNull ( reader ) ; 
 + reader . close ( ) ; 
 + 
 + / / Now we create a throttled reader , this should not be added to the cache 
 + RateLimiter limiter = RateLimiter . create ( 1024 ) ; 
 + reader = segmentedFile . createThrottledReader ( limiter ) ; 
 + assertNotNull ( reader ) ; 
 + assertTrue ( reader instanceof CompressedThrottledReader ) ; 
 + reader . close ( ) ; 
 + 
 + / / We retrieve 2 readers , neither should be a throttled reader 
 + FileDataInput [ ] readers = 
 + { 
 + segmentedFile . getSegment ( 0 ) , 
 + segmentedFile . getSegment ( 0 ) 
 + } ; 
 + 
 + for ( FileDataInput r : readers ) 
 + { 
 + assertNotNull ( r ) ; 
 + assertFalse ( r instanceof CompressedThrottledReader ) ; 
 + } 
 + 
 + for ( FileDataInput r : readers ) 
 + r . close ( ) ; 
 + } 
 + } 
 + 
 private void updateChecksum ( RandomAccessFile file , long checksumOffset , byte [ ] checksum ) throws IOException 
 { 
 file . seek ( checksumOffset ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
