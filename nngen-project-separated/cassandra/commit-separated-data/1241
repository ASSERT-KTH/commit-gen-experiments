BLEU SCORE: 0.03283637368030199

TEST MSG: Fix RangeNamesQueryPager ( CASSANDRA - 10509 )
GENERATED MSG: Better printing of AbstractBounds in traces

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 889438f . . 0904559 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 4 <nl> + * Fix RangeNamesQueryPager ( CASSANDRA - 10509 ) <nl> * Deprecate Pig support ( CASSANDRA - 10542 ) <nl> * Reduce contention getting instances of CompositeType ( CASSANDRA - 10433 ) <nl> Merged from 2 . 1 : <nl> diff - - git a / src / java / org / apache / cassandra / service / pager / RangeNamesQueryPager . java b / src / java / org / apache / cassandra / service / pager / RangeNamesQueryPager . java <nl> index 50d1280 . . 6b36a25 100644 <nl> - - - a / src / java / org / apache / cassandra / service / pager / RangeNamesQueryPager . java <nl> + + + b / src / java / org / apache / cassandra / service / pager / RangeNamesQueryPager . java <nl> @ @ - 81 , 7 + 81 , 9 @ @ public class RangeNamesQueryPager extends AbstractQueryPager <nl> protected boolean containsPreviousLast ( Row first ) <nl> { <nl> / / When querying the next page , we create a bound that exclude the lastReturnedKey <nl> - return false ; <nl> + / / but unfortunately ExcludingBounds is serialized as Bounds , which includes both endpoints , <nl> + / / so we may still get a live row with the same key as lastReturnedKey , see CASSANDRA - 10509 <nl> + return lastReturnedKey ! = null & & lastReturnedKey . equals ( first . key ) ; <nl> } <nl> <nl> protected boolean recordLast ( Row last ) <nl> @ @ - 103 , 11 + 105 , 11 @ @ public class RangeNamesQueryPager extends AbstractQueryPager <nl> AbstractBounds < RowPosition > bounds = command . keyRange ; <nl> if ( bounds instanceof Range | | bounds instanceof Bounds ) <nl> { <nl> - return new Range < RowPosition > ( lastReturnedKey , bounds . right ) ; <nl> + return new Range < > ( lastReturnedKey , bounds . right ) ; <nl> } <nl> else <nl> { <nl> - return new ExcludingBounds < RowPosition > ( lastReturnedKey , bounds . right ) ; <nl> + return new ExcludingBounds < > ( lastReturnedKey , bounds . right ) ; <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index 87361d4 . . 9594525 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 2924 , 11 + 2924 , 9 @ @ public class CliClient <nl> private boolean isCounterCF ( CfDef cfdef ) <nl> { <nl> String defaultValidator = cfdef . default _ validation _ class ; <nl> - if ( defaultValidator ! = null & & ! defaultValidator . isEmpty ( ) ) <nl> - { <nl> - return ( getFormatType ( defaultValidator ) instanceof CounterColumnType ) ; <nl> - } <nl> - return false ; <nl> + return defaultValidator ! = null <nl> + & & ! defaultValidator . isEmpty ( ) <nl> + & & getFormatType ( defaultValidator ) instanceof CounterColumnType ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / cli / Cql3CfDef . java b / src / java / org / apache / cassandra / cli / Cql3CfDef . java <nl> new file mode 100644 <nl> index 0000000 . . 6828e3d <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cli / Cql3CfDef . java <nl> @ @ - 0 , 0 + 1 , 5 @ @ <nl> + package org . apache . cassandra . cli ; <nl> + <nl> + public class Cql3CfDef <nl> + { <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / CFDefinition . java b / src / java / org / apache / cassandra / cql3 / CFDefinition . java <nl> index 980fb68 . . 670fdb4 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / CFDefinition . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / CFDefinition . java <nl> @ @ - 99 , 7 + 99 , 7 @ @ public class CFDefinition implements Iterable < CFDefinition . Name > <nl> int last = composite . types . size ( ) - 1 ; <nl> AbstractType < ? > lastType = composite . types . get ( last ) ; <nl> if ( lastType instanceof ColumnToCollectionType <nl> - | | ( cfm . getColumnAliases ( ) . size ( ) = = last & & lastType instanceof UTF8Type ) ) <nl> + | | ( cfm . getColumnAliases ( ) . size ( ) = = last & & lastType instanceof UTF8Type ) ) <nl> { <nl> / / " sparse " composite <nl> this . isCompact = false ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 889438f . . 0904559 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 4 
 + * Fix RangeNamesQueryPager ( CASSANDRA - 10509 ) 
 * Deprecate Pig support ( CASSANDRA - 10542 ) 
 * Reduce contention getting instances of CompositeType ( CASSANDRA - 10433 ) 
 Merged from 2 . 1 : 
 diff - - git a / src / java / org / apache / cassandra / service / pager / RangeNamesQueryPager . java b / src / java / org / apache / cassandra / service / pager / RangeNamesQueryPager . java 
 index 50d1280 . . 6b36a25 100644 
 - - - a / src / java / org / apache / cassandra / service / pager / RangeNamesQueryPager . java 
 + + + b / src / java / org / apache / cassandra / service / pager / RangeNamesQueryPager . java 
 @ @ - 81 , 7 + 81 , 9 @ @ public class RangeNamesQueryPager extends AbstractQueryPager 
 protected boolean containsPreviousLast ( Row first ) 
 { 
 / / When querying the next page , we create a bound that exclude the lastReturnedKey 
 - return false ; 
 + / / but unfortunately ExcludingBounds is serialized as Bounds , which includes both endpoints , 
 + / / so we may still get a live row with the same key as lastReturnedKey , see CASSANDRA - 10509 
 + return lastReturnedKey ! = null & & lastReturnedKey . equals ( first . key ) ; 
 } 
 
 protected boolean recordLast ( Row last ) 
 @ @ - 103 , 11 + 105 , 11 @ @ public class RangeNamesQueryPager extends AbstractQueryPager 
 AbstractBounds < RowPosition > bounds = command . keyRange ; 
 if ( bounds instanceof Range | | bounds instanceof Bounds ) 
 { 
 - return new Range < RowPosition > ( lastReturnedKey , bounds . right ) ; 
 + return new Range < > ( lastReturnedKey , bounds . right ) ; 
 } 
 else 
 { 
 - return new ExcludingBounds < RowPosition > ( lastReturnedKey , bounds . right ) ; 
 + return new ExcludingBounds < > ( lastReturnedKey , bounds . right ) ; 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index 87361d4 . . 9594525 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 2924 , 11 + 2924 , 9 @ @ public class CliClient 
 private boolean isCounterCF ( CfDef cfdef ) 
 { 
 String defaultValidator = cfdef . default _ validation _ class ; 
 - if ( defaultValidator ! = null & & ! defaultValidator . isEmpty ( ) ) 
 - { 
 - return ( getFormatType ( defaultValidator ) instanceof CounterColumnType ) ; 
 - } 
 - return false ; 
 + return defaultValidator ! = null 
 + & & ! defaultValidator . isEmpty ( ) 
 + & & getFormatType ( defaultValidator ) instanceof CounterColumnType ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / cli / Cql3CfDef . java b / src / java / org / apache / cassandra / cli / Cql3CfDef . java 
 new file mode 100644 
 index 0000000 . . 6828e3d 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cli / Cql3CfDef . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package org . apache . cassandra . cli ; 
 + 
 + public class Cql3CfDef 
 + { 
 + } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / CFDefinition . java b / src / java / org / apache / cassandra / cql3 / CFDefinition . java 
 index 980fb68 . . 670fdb4 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / CFDefinition . java 
 + + + b / src / java / org / apache / cassandra / cql3 / CFDefinition . java 
 @ @ - 99 , 7 + 99 , 7 @ @ public class CFDefinition implements Iterable < CFDefinition . Name > 
 int last = composite . types . size ( ) - 1 ; 
 AbstractType < ? > lastType = composite . types . get ( last ) ; 
 if ( lastType instanceof ColumnToCollectionType 
 - | | ( cfm . getColumnAliases ( ) . size ( ) = = last & & lastType instanceof UTF8Type ) ) 
 + | | ( cfm . getColumnAliases ( ) . size ( ) = = last & & lastType instanceof UTF8Type ) ) 
 { 
 / / " sparse " composite 
 this . isCompact = false ;
