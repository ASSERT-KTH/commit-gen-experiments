BLEU SCORE: 0.021906016114066472

TEST MSG: Fix bad merge
GENERATED MSG: Don ' t try to validate values for cell tombstones

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / CellTest . java b / test / unit / org / apache / cassandra / db / CellTest . java <nl> index e7e90a1 . . 1249989 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CellTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CellTest . java <nl> @ @ - 53 , 8 + 53 , 6 @ @ public class CellTest <nl> . addRegularColumn ( " m " , MapType . getInstance ( IntegerType . instance , IntegerType . instance , true ) ) <nl> . build ( ) ; <nl> <nl> - private static final CFMetaData fakeMetadata = CFMetaData . createFake ( " fakeKS " , " fakeTable " ) ; <nl> - <nl> @ BeforeClass <nl> public static void defineSchema ( ) throws ConfigurationException <nl> { <nl> @ @ - 64 , 8 + 62 , 8 @ @ public class CellTest <nl> <nl> private static ColumnDefinition fakeColumn ( String name , AbstractType < ? > type ) <nl> { <nl> - return new ColumnDefinition ( fakeMetadata . ksName , <nl> - fakeMetadata . cfName , <nl> + return new ColumnDefinition ( " fakeKs " , <nl> + " fakeTable " , <nl> ColumnIdentifier . getInterned ( name , false ) , <nl> type , <nl> ColumnDefinition . NO _ POSITION , <nl> @ @ - 127 , 8 + 125 , 8 @ @ public class CellTest <nl> <nl> / / Valid cells <nl> c = fakeColumn ( " c " , Int32Type . instance ) ; <nl> - assertValid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> - assertValid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . bytes ( 4 ) ) ) ; <nl> + assertValid ( BufferCell . live ( c , 0 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> + assertValid ( BufferCell . live ( c , 0 , ByteBufferUtil . bytes ( 4 ) ) ) ; <nl> <nl> assertValid ( BufferCell . expiring ( c , 0 , 4 , 4 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> assertValid ( BufferCell . expiring ( c , 0 , 4 , 4 , ByteBufferUtil . bytes ( 4 ) ) ) ; <nl> @ @ - 137 , 11 + 135 , 11 @ @ public class CellTest <nl> <nl> / / Invalid value ( we don ' t all empty values for smallint ) <nl> c = fakeColumn ( " c " , ShortType . instance ) ; <nl> - assertInvalid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> + assertInvalid ( BufferCell . live ( c , 0 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> / / But this should be valid even though the underlying value is an empty BB ( catches bug # 11618 ) <nl> assertValid ( BufferCell . tombstone ( c , 0 , 4 ) ) ; <nl> / / And of course , this should be valid with a proper value <nl> - assertValid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . bytes ( ( short ) 4 ) ) ) ; <nl> + assertValid ( BufferCell . live ( c , 0 , ByteBufferUtil . bytes ( ( short ) 4 ) ) ) ; <nl> <nl> / / Invalid ttl <nl> assertInvalid ( BufferCell . expiring ( c , 0 , - 4 , 4 , ByteBufferUtil . bytes ( 4 ) ) ) ; <nl> @ @ - 151 , 9 + 149 , 9 @ @ public class CellTest <nl> <nl> c = fakeColumn ( " c " , MapType . getInstance ( Int32Type . instance , Int32Type . instance , true ) ) ; <nl> / / Valid cell path <nl> - assertValid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . bytes ( 4 ) , CellPath . create ( ByteBufferUtil . bytes ( 4 ) ) ) ) ; <nl> + assertValid ( BufferCell . live ( c , 0 , ByteBufferUtil . bytes ( 4 ) , CellPath . create ( ByteBufferUtil . bytes ( 4 ) ) ) ) ; <nl> / / Invalid cell path ( int values should be 0 or 4 bytes ) <nl> - assertInvalid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . bytes ( 4 ) , CellPath . create ( ByteBufferUtil . bytes ( ( long ) 4 ) ) ) ) ; <nl> + assertInvalid ( BufferCell . live ( c , 0 , ByteBufferUtil . bytes ( 4 ) , CellPath . create ( ByteBufferUtil . bytes ( ( long ) 4 ) ) ) ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / CellTest . java b / test / unit / org / apache / cassandra / db / CellTest . java 
 index e7e90a1 . . 1249989 100644 
 - - - a / test / unit / org / apache / cassandra / db / CellTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CellTest . java 
 @ @ - 53 , 8 + 53 , 6 @ @ public class CellTest 
 . addRegularColumn ( " m " , MapType . getInstance ( IntegerType . instance , IntegerType . instance , true ) ) 
 . build ( ) ; 
 
 - private static final CFMetaData fakeMetadata = CFMetaData . createFake ( " fakeKS " , " fakeTable " ) ; 
 - 
 @ BeforeClass 
 public static void defineSchema ( ) throws ConfigurationException 
 { 
 @ @ - 64 , 8 + 62 , 8 @ @ public class CellTest 
 
 private static ColumnDefinition fakeColumn ( String name , AbstractType < ? > type ) 
 { 
 - return new ColumnDefinition ( fakeMetadata . ksName , 
 - fakeMetadata . cfName , 
 + return new ColumnDefinition ( " fakeKs " , 
 + " fakeTable " , 
 ColumnIdentifier . getInterned ( name , false ) , 
 type , 
 ColumnDefinition . NO _ POSITION , 
 @ @ - 127 , 8 + 125 , 8 @ @ public class CellTest 
 
 / / Valid cells 
 c = fakeColumn ( " c " , Int32Type . instance ) ; 
 - assertValid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 - assertValid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . bytes ( 4 ) ) ) ; 
 + assertValid ( BufferCell . live ( c , 0 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 + assertValid ( BufferCell . live ( c , 0 , ByteBufferUtil . bytes ( 4 ) ) ) ; 
 
 assertValid ( BufferCell . expiring ( c , 0 , 4 , 4 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 assertValid ( BufferCell . expiring ( c , 0 , 4 , 4 , ByteBufferUtil . bytes ( 4 ) ) ) ; 
 @ @ - 137 , 11 + 135 , 11 @ @ public class CellTest 
 
 / / Invalid value ( we don ' t all empty values for smallint ) 
 c = fakeColumn ( " c " , ShortType . instance ) ; 
 - assertInvalid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 + assertInvalid ( BufferCell . live ( c , 0 , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 / / But this should be valid even though the underlying value is an empty BB ( catches bug # 11618 ) 
 assertValid ( BufferCell . tombstone ( c , 0 , 4 ) ) ; 
 / / And of course , this should be valid with a proper value 
 - assertValid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . bytes ( ( short ) 4 ) ) ) ; 
 + assertValid ( BufferCell . live ( c , 0 , ByteBufferUtil . bytes ( ( short ) 4 ) ) ) ; 
 
 / / Invalid ttl 
 assertInvalid ( BufferCell . expiring ( c , 0 , - 4 , 4 , ByteBufferUtil . bytes ( 4 ) ) ) ; 
 @ @ - 151 , 9 + 149 , 9 @ @ public class CellTest 
 
 c = fakeColumn ( " c " , MapType . getInstance ( Int32Type . instance , Int32Type . instance , true ) ) ; 
 / / Valid cell path 
 - assertValid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . bytes ( 4 ) , CellPath . create ( ByteBufferUtil . bytes ( 4 ) ) ) ) ; 
 + assertValid ( BufferCell . live ( c , 0 , ByteBufferUtil . bytes ( 4 ) , CellPath . create ( ByteBufferUtil . bytes ( 4 ) ) ) ) ; 
 / / Invalid cell path ( int values should be 0 or 4 bytes ) 
 - assertInvalid ( BufferCell . live ( fakeMetadata , c , 0 , ByteBufferUtil . bytes ( 4 ) , CellPath . create ( ByteBufferUtil . bytes ( ( long ) 4 ) ) ) ) ; 
 + assertInvalid ( BufferCell . live ( c , 0 , ByteBufferUtil . bytes ( 4 ) , CellPath . create ( ByteBufferUtil . bytes ( ( long ) 4 ) ) ) ) ; 
 } 
 
 @ Test

NEAREST DIFF:
ELIMINATEDSENTENCE
