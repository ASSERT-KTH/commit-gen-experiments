BLEU SCORE: 0.0367352656298894

TEST MSG: Fix race that prevents submitting compaction for a table when executor is full
GENERATED MSG: Fix compaction and flush exception not captured issue

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5200eb1 . . 33fd264 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 12 <nl> + * Fix race that prevents submitting compaction for a table when executor is full ( CASSANDRA - 13801 ) <nl> * Rely on the JVM to handle OutOfMemoryErrors ( CASSANDRA - 13006 ) <nl> * Grab refs during scrub / index redistribution / cleanup ( CASSANDRA - 13873 ) <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 2e69b6f . . 3350b20 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 111 , 7 + 111 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> private final static CompactionExecutor cacheCleanupExecutor = new CacheCleanupExecutor ( ) ; <nl> <nl> private final CompactionMetrics metrics = new CompactionMetrics ( executor , validationExecutor ) ; <nl> - private final Multiset < ColumnFamilyStore > compactingCF = ConcurrentHashMultiset . create ( ) ; <nl> + @ VisibleForTesting <nl> + final Multiset < ColumnFamilyStore > compactingCF = ConcurrentHashMultiset . create ( ) ; <nl> <nl> private final RateLimiter compactionRateLimiter = RateLimiter . create ( Double . MAX _ VALUE ) ; <nl> <nl> @ @ - 155 , 6 + 156 , 12 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return Collections . emptyList ( ) ; <nl> } <nl> <nl> + / * * <nl> + * If a CF is currently being compacted , and there are no idle threads , submitBackground should be a no - op ; <nl> + * we can wait for the current compaction to finish and re - submit when more information is available . <nl> + * Otherwise , we should submit at least one task to prevent starvation by busier CFs , and more if there <nl> + * are idle threads stil . ( CASSANDRA - 4310 ) <nl> + * / <nl> int count = compactingCF . count ( cfs ) ; <nl> if ( count > 0 & & executor . getActiveCount ( ) > = executor . getMaximumPoolSize ( ) ) <nl> { <nl> @ @ - 171 , 10 + 178 , 9 @ @ public class CompactionManager implements CompactionManagerMBean <nl> List < Future < ? > > futures = new ArrayList < > ( 1 ) ; <nl> Future < ? > fut = executor . submitIfRunning ( new BackgroundCompactionCandidate ( cfs ) , " background task " ) ; <nl> if ( ! fut . isCancelled ( ) ) <nl> - { <nl> - compactingCF . add ( cfs ) ; <nl> futures . add ( fut ) ; <nl> - } <nl> + else <nl> + compactingCF . remove ( cfs ) ; <nl> return futures ; <nl> } <nl> <nl> @ @ - 233 , 6 + 239 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> <nl> BackgroundCompactionCandidate ( ColumnFamilyStore cfs ) <nl> { <nl> + compactingCF . add ( cfs ) ; <nl> this . cfs = cfs ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsBytemanTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsBytemanTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0b391a5 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsBytemanTest . java <nl> @ @ - 0 , 0 + 1 , 56 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . db . compaction ; <nl> + <nl> + import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + <nl> + import org . apache . cassandra . cql3 . CQLTester ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . Keyspace ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . jboss . byteman . contrib . bmunit . BMRule ; <nl> + import org . jboss . byteman . contrib . bmunit . BMUnitRunner ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + @ RunWith ( BMUnitRunner . class ) <nl> + public class CompactionsBytemanTest extends CQLTester <nl> + { <nl> + @ Test <nl> + @ BMRule ( name = " Delay background compaction task future check " , <nl> + targetClass = " CompactionManager " , <nl> + targetMethod = " submitBackground " , <nl> + targetLocation = " AT INVOKE java . util . concurrent . Future . isCancelled " , <nl> + condition = " ! $ cfs . keyspace . getName ( ) . contains ( \ " system \ " ) " , <nl> + action = " Thread . sleep ( 1000 ) " ) <nl> + public void testCompactingCFCounting ( ) throws Throwable <nl> + { <nl> + String table = createTable ( " CREATE TABLE % s ( k INT , c INT , v INT , PRIMARY KEY ( k , c ) ) " ) ; <nl> + ColumnFamilyStore cfs = Keyspace . open ( CQLTester . KEYSPACE ) . getColumnFamilyStore ( table ) ; <nl> + cfs . enableAutoCompaction ( ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , c , v ) VALUES ( ? , ? , ? ) " , 0 , 1 , 1 ) ; <nl> + assertEquals ( 0 , CompactionManager . instance . compactingCF . count ( cfs ) ) ; <nl> + cfs . forceBlockingFlush ( ) ; <nl> + <nl> + FBUtilities . waitOnFutures ( CompactionManager . instance . submitBackground ( cfs ) ) ; <nl> + assertEquals ( 0 , CompactionManager . instance . compactingCF . count ( cfs ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5200eb1 . . 33fd264 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 12 
 + * Fix race that prevents submitting compaction for a table when executor is full ( CASSANDRA - 13801 ) 
 * Rely on the JVM to handle OutOfMemoryErrors ( CASSANDRA - 13006 ) 
 * Grab refs during scrub / index redistribution / cleanup ( CASSANDRA - 13873 ) 
 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 2e69b6f . . 3350b20 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 111 , 7 + 111 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 private final static CompactionExecutor cacheCleanupExecutor = new CacheCleanupExecutor ( ) ; 
 
 private final CompactionMetrics metrics = new CompactionMetrics ( executor , validationExecutor ) ; 
 - private final Multiset < ColumnFamilyStore > compactingCF = ConcurrentHashMultiset . create ( ) ; 
 + @ VisibleForTesting 
 + final Multiset < ColumnFamilyStore > compactingCF = ConcurrentHashMultiset . create ( ) ; 
 
 private final RateLimiter compactionRateLimiter = RateLimiter . create ( Double . MAX _ VALUE ) ; 
 
 @ @ - 155 , 6 + 156 , 12 @ @ public class CompactionManager implements CompactionManagerMBean 
 return Collections . emptyList ( ) ; 
 } 
 
 + / * * 
 + * If a CF is currently being compacted , and there are no idle threads , submitBackground should be a no - op ; 
 + * we can wait for the current compaction to finish and re - submit when more information is available . 
 + * Otherwise , we should submit at least one task to prevent starvation by busier CFs , and more if there 
 + * are idle threads stil . ( CASSANDRA - 4310 ) 
 + * / 
 int count = compactingCF . count ( cfs ) ; 
 if ( count > 0 & & executor . getActiveCount ( ) > = executor . getMaximumPoolSize ( ) ) 
 { 
 @ @ - 171 , 10 + 178 , 9 @ @ public class CompactionManager implements CompactionManagerMBean 
 List < Future < ? > > futures = new ArrayList < > ( 1 ) ; 
 Future < ? > fut = executor . submitIfRunning ( new BackgroundCompactionCandidate ( cfs ) , " background task " ) ; 
 if ( ! fut . isCancelled ( ) ) 
 - { 
 - compactingCF . add ( cfs ) ; 
 futures . add ( fut ) ; 
 - } 
 + else 
 + compactingCF . remove ( cfs ) ; 
 return futures ; 
 } 
 
 @ @ - 233 , 6 + 239 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 
 BackgroundCompactionCandidate ( ColumnFamilyStore cfs ) 
 { 
 + compactingCF . add ( cfs ) ; 
 this . cfs = cfs ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsBytemanTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsBytemanTest . java 
 new file mode 100644 
 index 0000000 . . 0b391a5 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsBytemanTest . java 
 @ @ - 0 , 0 + 1 , 56 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . db . compaction ; 
 + 
 + import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + 
 + import org . apache . cassandra . cql3 . CQLTester ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . Keyspace ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + import org . jboss . byteman . contrib . bmunit . BMRule ; 
 + import org . jboss . byteman . contrib . bmunit . BMUnitRunner ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + @ RunWith ( BMUnitRunner . class ) 
 + public class CompactionsBytemanTest extends CQLTester 
 + { 
 + @ Test 
 + @ BMRule ( name = " Delay background compaction task future check " , 
 + targetClass = " CompactionManager " , 
 + targetMethod = " submitBackground " , 
 + targetLocation = " AT INVOKE java . util . concurrent . Future . isCancelled " , 
 + condition = " ! $ cfs . keyspace . getName ( ) . contains ( \ " system \ " ) " , 
 + action = " Thread . sleep ( 1000 ) " ) 
 + public void testCompactingCFCounting ( ) throws Throwable 
 + { 
 + String table = createTable ( " CREATE TABLE % s ( k INT , c INT , v INT , PRIMARY KEY ( k , c ) ) " ) ; 
 + ColumnFamilyStore cfs = Keyspace . open ( CQLTester . KEYSPACE ) . getColumnFamilyStore ( table ) ; 
 + cfs . enableAutoCompaction ( ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , c , v ) VALUES ( ? , ? , ? ) " , 0 , 1 , 1 ) ; 
 + assertEquals ( 0 , CompactionManager . instance . compactingCF . count ( cfs ) ) ; 
 + cfs . forceBlockingFlush ( ) ; 
 + 
 + FBUtilities . waitOnFutures ( CompactionManager . instance . submitBackground ( cfs ) ) ; 
 + assertEquals ( 0 , CompactionManager . instance . compactingCF . count ( cfs ) ) ; 
 + } 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
