BLEU SCORE: 0.09652434877402245

TEST MSG: add nodetool command ' statusautocompaction '
GENERATED MSG: Add nodetool replaybatchlog command

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index bab161a . . 3e88bb2 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 4949 , 6 + 4949 , 14 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> } <nl> <nl> + public Map < String , Boolean > getAutoCompactionStatus ( String ks , String . . . tables ) throws IOException <nl> + { <nl> + Map < String , Boolean > status = new HashMap < String , Boolean > ( ) ; <nl> + for ( ColumnFamilyStore cfs : getValidColumnFamilies ( true , true , ks , tables ) ) <nl> + status . put ( cfs . getTableName ( ) , cfs . isAutoCompactionDisabled ( ) ) ; <nl> + return status ; <nl> + } <nl> + <nl> / * * Returns the name of the cluster * / <nl> public String getClusterName ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index 46b7253 . . 28c1b36 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 594 , 6 + 594 , 7 @ @ public interface StorageServiceMBean extends NotificationEmitter <nl> <nl> void disableAutoCompaction ( String ks , String . . . tables ) throws IOException ; <nl> void enableAutoCompaction ( String ks , String . . . tables ) throws IOException ; <nl> + Map < String , Boolean > getAutoCompactionStatus ( String ks , String . . . tables ) throws IOException ; <nl> <nl> public void deliverHints ( String host ) throws UnknownHostException ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 267a6d5 . . a0b0aec 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 722 , 6 + 722 , 11 @ @ public class NodeProbe implements AutoCloseable <nl> ssProxy . enableAutoCompaction ( ks , tableNames ) ; <nl> } <nl> <nl> + public Map < String , Boolean > getAutoCompactionDisabled ( String ks , String . . . tableNames ) throws IOException <nl> + { <nl> + return ssProxy . getAutoCompactionStatus ( ks , tableNames ) ; <nl> + } <nl> + <nl> public void setIncrementalBackupsEnabled ( boolean enabled ) <nl> { <nl> ssProxy . setIncrementalBackupsEnabled ( enabled ) ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> index a117025 . . de89f61 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeTool . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> @ @ - 122 , 6 + 122 , 7 @ @ public class NodeTool <nl> StatusGossip . class , <nl> StatusBackup . class , <nl> StatusHandoff . class , <nl> + StatusAutoCompaction . class , <nl> Stop . class , <nl> StopDaemon . class , <nl> Version . class , <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / StatusAutoCompaction . java b / src / java / org / apache / cassandra / tools / nodetool / StatusAutoCompaction . java <nl> new file mode 100644 <nl> index 0000000 . . 4322bb8 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / StatusAutoCompaction . java <nl> @ @ - 0 , 0 + 1 , 80 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . tools . nodetool ; <nl> + <nl> + import java . io . ByteArrayOutputStream ; <nl> + import java . io . IOException ; <nl> + import java . io . PrintStream ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + <nl> + import io . airlift . airline . Arguments ; <nl> + import io . airlift . airline . Command ; <nl> + import io . airlift . airline . Option ; <nl> + import org . apache . cassandra . tools . NodeProbe ; <nl> + import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; <nl> + import org . apache . cassandra . tools . nodetool . formatter . TableBuilder ; <nl> + <nl> + @ Command ( name = " statusautocompaction " , description = " status of autocompaction of the given keyspace and table " ) <nl> + public class StatusAutoCompaction extends NodeToolCmd <nl> + { <nl> + @ Arguments ( usage = " [ < keyspace > < tables > . . . ] " , description = " The keyspace followed by one or many tables " ) <nl> + private List < String > args = new ArrayList < > ( ) ; <nl> + <nl> + @ Option ( title = " show _ all " , name = { " - a " , " - - all " } , description = " Show auto compaction status for each keyspace / table " ) <nl> + private boolean showAll = false ; <nl> + <nl> + @ Override <nl> + public void execute ( NodeProbe probe ) <nl> + { <nl> + List < String > keyspaces = parseOptionalKeyspace ( args , probe ) ; <nl> + String [ ] tableNames = parseOptionalTables ( args ) ; <nl> + <nl> + boolean allDisabled = true ; <nl> + boolean allEnabled = true ; <nl> + TableBuilder table = new TableBuilder ( ) ; <nl> + table . add ( " Keyspace " , " Table " , " Status " ) ; <nl> + try <nl> + { <nl> + for ( String keyspace : keyspaces ) <nl> + { <nl> + Map < String , Boolean > statuses = probe . getAutoCompactionDisabled ( keyspace , tableNames ) ; <nl> + for ( Map . Entry < String , Boolean > status : statuses . entrySet ( ) ) <nl> + { <nl> + String tableName = status . getKey ( ) ; <nl> + boolean disabled = status . getValue ( ) ; <nl> + allDisabled & = disabled ; <nl> + allEnabled & = ! disabled ; <nl> + table . add ( keyspace , tableName , ! disabled ? " running " : " not running " ) ; <nl> + } <nl> + } <nl> + if ( showAll ) <nl> + table . printTo ( System . out ) ; <nl> + else <nl> + System . out . println ( allEnabled ? " running " : <nl> + allDisabled ? " not running " : " partially running " ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( " Error occurred during status - auto - compaction " , e ) ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index bab161a . . 3e88bb2 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 4949 , 6 + 4949 , 14 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 } 
 
 + public Map < String , Boolean > getAutoCompactionStatus ( String ks , String . . . tables ) throws IOException 
 + { 
 + Map < String , Boolean > status = new HashMap < String , Boolean > ( ) ; 
 + for ( ColumnFamilyStore cfs : getValidColumnFamilies ( true , true , ks , tables ) ) 
 + status . put ( cfs . getTableName ( ) , cfs . isAutoCompactionDisabled ( ) ) ; 
 + return status ; 
 + } 
 + 
 / * * Returns the name of the cluster * / 
 public String getClusterName ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index 46b7253 . . 28c1b36 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 594 , 6 + 594 , 7 @ @ public interface StorageServiceMBean extends NotificationEmitter 
 
 void disableAutoCompaction ( String ks , String . . . tables ) throws IOException ; 
 void enableAutoCompaction ( String ks , String . . . tables ) throws IOException ; 
 + Map < String , Boolean > getAutoCompactionStatus ( String ks , String . . . tables ) throws IOException ; 
 
 public void deliverHints ( String host ) throws UnknownHostException ; 
 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 267a6d5 . . a0b0aec 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 722 , 6 + 722 , 11 @ @ public class NodeProbe implements AutoCloseable 
 ssProxy . enableAutoCompaction ( ks , tableNames ) ; 
 } 
 
 + public Map < String , Boolean > getAutoCompactionDisabled ( String ks , String . . . tableNames ) throws IOException 
 + { 
 + return ssProxy . getAutoCompactionStatus ( ks , tableNames ) ; 
 + } 
 + 
 public void setIncrementalBackupsEnabled ( boolean enabled ) 
 { 
 ssProxy . setIncrementalBackupsEnabled ( enabled ) ; 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java 
 index a117025 . . de89f61 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeTool . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeTool . java 
 @ @ - 122 , 6 + 122 , 7 @ @ public class NodeTool 
 StatusGossip . class , 
 StatusBackup . class , 
 StatusHandoff . class , 
 + StatusAutoCompaction . class , 
 Stop . class , 
 StopDaemon . class , 
 Version . class , 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / StatusAutoCompaction . java b / src / java / org / apache / cassandra / tools / nodetool / StatusAutoCompaction . java 
 new file mode 100644 
 index 0000000 . . 4322bb8 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / StatusAutoCompaction . java 
 @ @ - 0 , 0 + 1 , 80 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . tools . nodetool ; 
 + 
 + import java . io . ByteArrayOutputStream ; 
 + import java . io . IOException ; 
 + import java . io . PrintStream ; 
 + import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 + import java . util . HashMap ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + 
 + import io . airlift . airline . Arguments ; 
 + import io . airlift . airline . Command ; 
 + import io . airlift . airline . Option ; 
 + import org . apache . cassandra . tools . NodeProbe ; 
 + import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; 
 + import org . apache . cassandra . tools . nodetool . formatter . TableBuilder ; 
 + 
 + @ Command ( name = " statusautocompaction " , description = " status of autocompaction of the given keyspace and table " ) 
 + public class StatusAutoCompaction extends NodeToolCmd 
 + { 
 + @ Arguments ( usage = " [ < keyspace > < tables > . . . ] " , description = " The keyspace followed by one or many tables " ) 
 + private List < String > args = new ArrayList < > ( ) ; 
 + 
 + @ Option ( title = " show _ all " , name = { " - a " , " - - all " } , description = " Show auto compaction status for each keyspace / table " ) 
 + private boolean showAll = false ; 
 + 
 + @ Override 
 + public void execute ( NodeProbe probe ) 
 + { 
 + List < String > keyspaces = parseOptionalKeyspace ( args , probe ) ; 
 + String [ ] tableNames = parseOptionalTables ( args ) ; 
 + 
 + boolean allDisabled = true ; 
 + boolean allEnabled = true ; 
 + TableBuilder table = new TableBuilder ( ) ; 
 + table . add ( " Keyspace " , " Table " , " Status " ) ; 
 + try 
 + { 
 + for ( String keyspace : keyspaces ) 
 + { 
 + Map < String , Boolean > statuses = probe . getAutoCompactionDisabled ( keyspace , tableNames ) ; 
 + for ( Map . Entry < String , Boolean > status : statuses . entrySet ( ) ) 
 + { 
 + String tableName = status . getKey ( ) ; 
 + boolean disabled = status . getValue ( ) ; 
 + allDisabled & = disabled ; 
 + allEnabled & = ! disabled ; 
 + table . add ( keyspace , tableName , ! disabled ? " running " : " not running " ) ; 
 + } 
 + } 
 + if ( showAll ) 
 + table . printTo ( System . out ) ; 
 + else 
 + System . out . println ( allEnabled ? " running " : 
 + allDisabled ? " not running " : " partially running " ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( " Error occurred during status - auto - compaction " , e ) ; 
 + } 
 + } 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
