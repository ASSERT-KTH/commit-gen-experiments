BLEU SCORE: 0.04844232281716619

TEST MSG: remove bogus template parameter
GENERATED MSG: Fix minor issues reported by FindBugs

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java b / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java <nl> index 5a47f35 . . d48a349 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java <nl> + + + b / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java <nl> @ @ - 88 , 12 + 88 , 12 @ @ final class NodeBuilder <nl> * a parent if we do not - - we got here from an earlier key - - and we need to ascend back up ) , <nl> * or null if we finished the update in this node . <nl> * / <nl> - < V > NodeBuilder update ( Object key ) <nl> + NodeBuilder update ( Object key ) <nl> { <nl> assert copyFrom ! = null ; <nl> int copyFromKeyEnd = getKeyEnd ( copyFrom ) ; <nl> <nl> - int i = find ( comparator , ( V ) key , copyFrom , copyFromKeyPosition , copyFromKeyEnd ) ; <nl> + int i = find ( comparator , key , copyFrom , copyFromKeyPosition , copyFromKeyEnd ) ; <nl> boolean found = i > = 0 ; / / exact key match ? <nl> boolean owns = true ; / / true iff this node ( or a child ) should contain the key <nl> if ( ! found ) <nl> @ @ - 222 , 23 + 222 , 23 @ @ final class NodeBuilder <nl> } <nl> <nl> / / skips the next key in copyf , and puts the provided key in the builder instead <nl> - private < V > void replaceNextKey ( Object with ) <nl> + private void replaceNextKey ( Object with ) <nl> { <nl> / / ( this first part differs from addNewKey in that we pass the replaced object to replaceF as well ) <nl> ensureRoom ( buildKeyPosition + 1 ) ; <nl> if ( updateFunction ! = null ) <nl> - with = updateFunction . apply ( ( V ) copyFrom [ copyFromKeyPosition ] , ( V ) with ) ; <nl> + with = updateFunction . apply ( copyFrom [ copyFromKeyPosition ] , with ) ; <nl> buildKeys [ buildKeyPosition + + ] = with ; <nl> <nl> copyFromKeyPosition + + ; <nl> } <nl> <nl> / / puts the provided key in the builder , with no impact on treatment of data from copyf <nl> - < V > void addNewKey ( Object key ) <nl> + void addNewKey ( Object key ) <nl> { <nl> ensureRoom ( buildKeyPosition + 1 ) ; <nl> if ( updateFunction ! = null ) <nl> - key = updateFunction . apply ( ( V ) key ) ; <nl> + key = updateFunction . apply ( key ) ; <nl> buildKeys [ buildKeyPosition + + ] = key ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt < nl > index 0f9a13b . . e88fd21 100644 < nl > - - - a / CHANGES . txt < nl > + + + b / CHANGES . txt < nl > @ @ - 29 , 6 + 29 , 7 @ @ < nl > * fsync the directory after new sstable or commitlog segment are created ( CASSANDRA - 3250 ) < nl > * fix minor issues reported by FindBugs ( CASSANDRA - 3658 ) < nl > * global key / row caches ( CASSANDRA - 3143 ) < nl > + * optimize memtable iteration during range scan ( CASSANDRA - 3638 ) < nl > < nl > 1 . 0 . 7 < nl > * add nodetool setstreamthroughput ( CASSANDRA - 3571 ) < nl > diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java < nl > index 2aa7d66 . . 78d69ed 100644 < nl > - - - a / src / java / org / apache / cassandra / db / Memtable . java < nl > + + + b / src / java / org / apache / cassandra / db / Memtable . java < nl > @ @ - 309 , 11 + 309 , 13 @ @ public class Memtable < nl > * @ param startWith Include data in the result from and including this key and to the end of the memtable < nl > * @ return An iterator of entries with the data from the start key < nl > * / < nl > - public Iterator < Map . Entry < DecoratedKey , ColumnFamily > > getEntryIterator ( final RowPosition startWith ) < nl > + public Iterator < Map . Entry < DecoratedKey , ColumnFamily > > getEntryIterator ( final RowPosition startWith , final RowPosition stopAt ) < nl > { < nl > return new Iterator < Map . Entry < DecoratedKey , ColumnFamily > > ( ) < nl > { < nl > - private Iterator < Map . Entry < RowPosition , ColumnFamily > > iter = columnFamilies . tailMap ( startWith ) . entrySet ( ) . iterator ( ) ; < nl > + private Iterator < Map . Entry < RowPosition , ColumnFamily > > iter = stopAt . isMinimum ( ) < nl > + ? columnFamilies . tailMap ( startWith ) . entrySet ( ) . iterator ( ) < nl > + : columnFamilies . subMap ( startWith , true , stopAt , true ) . entrySet ( ) . iterator ( ) ; < nl > < nl > public boolean hasNext ( ) < nl > { < nl > diff - - git a / src / java / org / apache / cassandra / db / RowIteratorFactory . java b / src / java / org / apache / cassandra / db / RowIteratorFactory . java < nl > index caad3a9 . . 87d1d7f 100644 < nl > - - - a / src / java / org / apache / cassandra / db / RowIteratorFactory . java < nl > + + + b / src / java / org / apache / cassandra / db / RowIteratorFactory . java < nl > @ @ - 65 , 21 + 65 , 11 @ @ public class RowIteratorFactory < nl > { < nl > / / fetch data from current memtable , historical memtables , and SSTables in the correct order . < nl > final List < CloseableIterator < IColumnIterator > > iterators = new ArrayList < CloseableIterator < IColumnIterator > > ( ) ; < nl > - / / we iterate through memtables with a priority queue to avoid more sorting than necessary . < nl > - / / this predicate throws out the rows before the start of our range . < nl > - Predicate < IColumnIterator > p = new Predicate < IColumnIterator > ( ) < nl > - { < nl > - public boolean apply ( IColumnIterator row ) < nl > - { < nl > - return startWith . compareTo ( row . getKey ( ) ) < = 0 < nl > - & & ( stopAt . isMinimum ( ) | | row . getKey ( ) . compareTo ( stopAt ) < = 0 ) ; < nl > - } < nl > - } ; < nl > < nl > / / memtables < nl > for ( Memtable memtable : memtables ) < nl > { < nl > - iterators . add ( new ConvertToColumnIterator ( filter , p , memtable . getEntryIterator ( startWith ) ) ) ; < nl > + iterators . add ( new ConvertToColumnIterator ( filter , memtable . getEntryIterator ( startWith , stopAt ) ) ) ; < nl > } < nl > < nl > for ( SSTableReader sstable : sstables ) < nl > @ @ - 139 , 24 + 129 , 20 @ @ public class RowIteratorFactory < nl > private static class ConvertToColumnIterator extends AbstractIterator < IColumnIterator > implements CloseableIterator < IColumnIterator > < nl > { < nl > private final QueryFilter filter ; < nl > - private final Predicate < IColumnIterator > pred ; < nl > private final Iterator < Map . Entry < DecoratedKey , ColumnFamily > > iter ; < nl > < nl > - public ConvertToColumnIterator ( QueryFilter filter , Predicate < IColumnIterator > pred , Iterator < Map . Entry < DecoratedKey , ColumnFamily > > iter ) < nl > + public ConvertToColumnIterator ( QueryFilter filter , Iterator < Map . Entry < DecoratedKey , ColumnFamily > > iter ) < nl > { < nl > this . filter = filter ; < nl > - this . pred = pred ; < nl > this . iter = iter ; < nl > } < nl > < nl > public IColumnIterator computeNext ( ) < nl > { < nl > - while ( iter . hasNext ( ) ) < nl > + if ( iter . hasNext ( ) ) < nl > { < nl > Map . Entry < DecoratedKey , ColumnFamily > entry = iter . next ( ) ; < nl > - IColumnIterator ici = filter . getMemtableColumnIterator ( entry . getValue ( ) , entry . getKey ( ) ) ; < nl > - if ( pred . apply ( ici ) ) < nl > - return ici ; < nl > + return filter . getMemtableColumnIterator ( entry . getValue ( ) , entry . getKey ( ) ) ; < nl > } < nl > return endOfData ( ) ; < nl > }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java b / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java 
 index 5a47f35 . . d48a349 100644 
 - - - a / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java 
 + + + b / src / java / org / apache / cassandra / utils / btree / NodeBuilder . java 
 @ @ - 88 , 12 + 88 , 12 @ @ final class NodeBuilder 
 * a parent if we do not - - we got here from an earlier key - - and we need to ascend back up ) , 
 * or null if we finished the update in this node . 
 * / 
 - < V > NodeBuilder update ( Object key ) 
 + NodeBuilder update ( Object key ) 
 { 
 assert copyFrom ! = null ; 
 int copyFromKeyEnd = getKeyEnd ( copyFrom ) ; 
 
 - int i = find ( comparator , ( V ) key , copyFrom , copyFromKeyPosition , copyFromKeyEnd ) ; 
 + int i = find ( comparator , key , copyFrom , copyFromKeyPosition , copyFromKeyEnd ) ; 
 boolean found = i > = 0 ; / / exact key match ? 
 boolean owns = true ; / / true iff this node ( or a child ) should contain the key 
 if ( ! found ) 
 @ @ - 222 , 23 + 222 , 23 @ @ final class NodeBuilder 
 } 
 
 / / skips the next key in copyf , and puts the provided key in the builder instead 
 - private < V > void replaceNextKey ( Object with ) 
 + private void replaceNextKey ( Object with ) 
 { 
 / / ( this first part differs from addNewKey in that we pass the replaced object to replaceF as well ) 
 ensureRoom ( buildKeyPosition + 1 ) ; 
 if ( updateFunction ! = null ) 
 - with = updateFunction . apply ( ( V ) copyFrom [ copyFromKeyPosition ] , ( V ) with ) ; 
 + with = updateFunction . apply ( copyFrom [ copyFromKeyPosition ] , with ) ; 
 buildKeys [ buildKeyPosition + + ] = with ; 
 
 copyFromKeyPosition + + ; 
 } 
 
 / / puts the provided key in the builder , with no impact on treatment of data from copyf 
 - < V > void addNewKey ( Object key ) 
 + void addNewKey ( Object key ) 
 { 
 ensureRoom ( buildKeyPosition + 1 ) ; 
 if ( updateFunction ! = null ) 
 - key = updateFunction . apply ( ( V ) key ) ; 
 + key = updateFunction . apply ( key ) ; 
 buildKeys [ buildKeyPosition + + ] = key ; 
 } 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0f9a13b . . e88fd21 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 6 + 29 , 7 @ @ 
 * fsync the directory after new sstable or commitlog segment are created ( CASSANDRA - 3250 ) 
 * fix minor issues reported by FindBugs ( CASSANDRA - 3658 ) 
 * global key / row caches ( CASSANDRA - 3143 ) 
 + * optimize memtable iteration during range scan ( CASSANDRA - 3638 ) 
 
 1 . 0 . 7 
 * add nodetool setstreamthroughput ( CASSANDRA - 3571 ) 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index 2aa7d66 . . 78d69ed 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 309 , 11 + 309 , 13 @ @ public class Memtable 
 * @ param startWith Include data in the result from and including this key and to the end of the memtable 
 * @ return An iterator of entries with the data from the start key 
 * / 
 - public Iterator < Map . Entry < DecoratedKey , ColumnFamily > > getEntryIterator ( final RowPosition startWith ) 
 + public Iterator < Map . Entry < DecoratedKey , ColumnFamily > > getEntryIterator ( final RowPosition startWith , final RowPosition stopAt ) 
 { 
 return new Iterator < Map . Entry < DecoratedKey , ColumnFamily > > ( ) 
 { 
 - private Iterator < Map . Entry < RowPosition , ColumnFamily > > iter = columnFamilies . tailMap ( startWith ) . entrySet ( ) . iterator ( ) ; 
 + private Iterator < Map . Entry < RowPosition , ColumnFamily > > iter = stopAt . isMinimum ( ) 
 + ? columnFamilies . tailMap ( startWith ) . entrySet ( ) . iterator ( ) 
 + : columnFamilies . subMap ( startWith , true , stopAt , true ) . entrySet ( ) . iterator ( ) ; 
 
 public boolean hasNext ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / RowIteratorFactory . java b / src / java / org / apache / cassandra / db / RowIteratorFactory . java 
 index caad3a9 . . 87d1d7f 100644 
 - - - a / src / java / org / apache / cassandra / db / RowIteratorFactory . java 
 + + + b / src / java / org / apache / cassandra / db / RowIteratorFactory . java 
 @ @ - 65 , 21 + 65 , 11 @ @ public class RowIteratorFactory 
 { 
 / / fetch data from current memtable , historical memtables , and SSTables in the correct order . 
 final List < CloseableIterator < IColumnIterator > > iterators = new ArrayList < CloseableIterator < IColumnIterator > > ( ) ; 
 - / / we iterate through memtables with a priority queue to avoid more sorting than necessary . 
 - / / this predicate throws out the rows before the start of our range . 
 - Predicate < IColumnIterator > p = new Predicate < IColumnIterator > ( ) 
 - { 
 - public boolean apply ( IColumnIterator row ) 
 - { 
 - return startWith . compareTo ( row . getKey ( ) ) < = 0 
 - & & ( stopAt . isMinimum ( ) | | row . getKey ( ) . compareTo ( stopAt ) < = 0 ) ; 
 - } 
 - } ; 
 
 / / memtables 
 for ( Memtable memtable : memtables ) 
 { 
 - iterators . add ( new ConvertToColumnIterator ( filter , p , memtable . getEntryIterator ( startWith ) ) ) ; 
 + iterators . add ( new ConvertToColumnIterator ( filter , memtable . getEntryIterator ( startWith , stopAt ) ) ) ; 
 } 
 
 for ( SSTableReader sstable : sstables ) 
 @ @ - 139 , 24 + 129 , 20 @ @ public class RowIteratorFactory 
 private static class ConvertToColumnIterator extends AbstractIterator < IColumnIterator > implements CloseableIterator < IColumnIterator > 
 { 
 private final QueryFilter filter ; 
 - private final Predicate < IColumnIterator > pred ; 
 private final Iterator < Map . Entry < DecoratedKey , ColumnFamily > > iter ; 
 
 - public ConvertToColumnIterator ( QueryFilter filter , Predicate < IColumnIterator > pred , Iterator < Map . Entry < DecoratedKey , ColumnFamily > > iter ) 
 + public ConvertToColumnIterator ( QueryFilter filter , Iterator < Map . Entry < DecoratedKey , ColumnFamily > > iter ) 
 { 
 this . filter = filter ; 
 - this . pred = pred ; 
 this . iter = iter ; 
 } 
 
 public IColumnIterator computeNext ( ) 
 { 
 - while ( iter . hasNext ( ) ) 
 + if ( iter . hasNext ( ) ) 
 { 
 Map . Entry < DecoratedKey , ColumnFamily > entry = iter . next ( ) ; 
 - IColumnIterator ici = filter . getMemtableColumnIterator ( entry . getValue ( ) , entry . getKey ( ) ) ; 
 - if ( pred . apply ( ici ) ) 
 - return ici ; 
 + return filter . getMemtableColumnIterator ( entry . getValue ( ) , entry . getKey ( ) ) ; 
 } 
 return endOfData ( ) ; 
 }
