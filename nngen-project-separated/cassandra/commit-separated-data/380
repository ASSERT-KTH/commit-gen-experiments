BLEU SCORE: 0.06220117374063391

TEST MSG: Bring back maxHintTTL propery
GENERATED MSG: merge from 1 . 1

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 03870dd . . 9d1323d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Bring back maxHintTTL propery ( CASSANDRA - 12982 ) <nl> * Add testing guidelines ( CASSANDRA - 13497 ) <nl> * Add more repair metrics ( CASSANDRA - 13531 ) <nl> * RangeStreamer should be smarter when picking endpoints for streaming ( CASSANDRA - 4650 ) <nl> diff - - git a / conf / jvm . options b / conf / jvm . options <nl> index 49b2196 . . 398b52f 100644 <nl> - - - a / conf / jvm . options <nl> + + + b / conf / jvm . options <nl> @ @ - 79 , 6 + 79 , 9 @ @ <nl> # 10000 rows per page . <nl> # - Dcassandra . force _ default _ indexing _ page _ size = true <nl> <nl> + # Imposes an upper bound on hint lifetime below the normal min gc _ grace _ seconds <nl> + # - Dcassandra . maxHintTTL = max _ hint _ ttl _ in _ seconds <nl> + <nl> # # # # # # # # # # # # # # # # # # # # # # # # <nl> # GENERAL JVM SETTINGS # <nl> # # # # # # # # # # # # # # # # # # # # # # # # <nl> diff - - git a / src / java / org / apache / cassandra / hints / Hint . java b / src / java / org / apache / cassandra / hints / Hint . java <nl> index 1582a3c . . b0abd50 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / Hint . java <nl> + + + b / src / java / org / apache / cassandra / hints / Hint . java <nl> @ @ - 24 , 11 + 24 , 17 @ @ import java . util . concurrent . TimeUnit ; <nl> <nl> import com . google . common . base . Throwables ; <nl> <nl> + import javax . annotation . Nullable ; <nl> + <nl> + import com . google . common . primitives . Ints ; <nl> + <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> + import org . apache . cassandra . io . util . DataInputBuffer ; <nl> import org . apache . cassandra . io . util . DataInputPlus ; <nl> import org . apache . cassandra . io . util . DataOutputPlus ; <nl> import org . apache . cassandra . schema . TableId ; <nl> + import org . apache . cassandra . utils . vint . VIntCoding ; <nl> <nl> import static org . apache . cassandra . db . TypeSizes . sizeof ; <nl> import static org . apache . cassandra . db . TypeSizes . sizeofUnsignedVInt ; <nl> @ @ - 51 , 10 + 57 , 11 @ @ import static org . apache . cassandra . db . TypeSizes . sizeofUnsignedVInt ; <nl> public final class Hint <nl> { <nl> public static final Serializer serializer = new Serializer ( ) ; <nl> + static final int maxHintTTL = Integer . getInteger ( " cassandra . maxHintTTL " , Integer . MAX _ VALUE ) ; <nl> <nl> final Mutation mutation ; <nl> final long creationTime ; / / time of hint creation ( in milliseconds ) <nl> - final int gcgs ; / / the smallest gc gs of all involved tables <nl> + final int gcgs ; / / the smallest gc gs of all involved tables ( in seconds ) <nl> <nl> private Hint ( Mutation mutation , long creationTime , int gcgs ) <nl> { <nl> @ @ - 115 , 13 + 122 , 25 @ @ public final class Hint <nl> } <nl> <nl> / * * <nl> + * @ return the overall ttl of the hint - the minimum of all mutation ' s tables ' gc gs now and at the time of creation <nl> + * / <nl> + int ttl ( ) <nl> + { <nl> + return Math . min ( gcgs , mutation . smallestGCGS ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> * @ return calculates whether or not it is safe to apply the hint without risking to resurrect any deleted data <nl> * / <nl> boolean isLive ( ) <nl> { <nl> - int smallestGCGS = Math . min ( gcgs , mutation . smallestGCGS ( ) ) ; <nl> - long expirationTime = creationTime + TimeUnit . SECONDS . toMillis ( smallestGCGS ) ; <nl> - return expirationTime > System . currentTimeMillis ( ) ; <nl> + return isLive ( creationTime , System . currentTimeMillis ( ) , ttl ( ) ) ; <nl> + } <nl> + <nl> + static boolean isLive ( long creationTime , long now , int hintTTL ) <nl> + { <nl> + long expirationTime = creationTime + TimeUnit . SECONDS . toMillis ( Math . min ( hintTTL , maxHintTTL ) ) ; <nl> + return expirationTime > now ; <nl> } <nl> <nl> static final class Serializer implements IVersionedSerializer < Hint > <nl> @ @ - 152 , 5 + 171 , 60 @ @ public final class Hint <nl> { <nl> return hintBuffer . getLong ( 0 ) ; <nl> } <nl> + <nl> + / * * <nl> + * Will short - circuit Mutation deserialization if the hint is definitely dead . If a Hint instance is <nl> + * returned , there is a chance it ' s live , if gcgs on one of the table involved got reduced between <nl> + * hint creation and deserialization , but this does not impact correctness - an extra liveness check will <nl> + * also be performed on the receiving end . <nl> + * <nl> + * @ return null if the hint is definitely dead , a Hint instance if it ' s likely live <nl> + * / <nl> + @ Nullable <nl> + Hint deserializeIfLive ( DataInputPlus in , long now , long size , int version ) throws IOException <nl> + { <nl> + long creationTime = in . readLong ( ) ; <nl> + int gcgs = ( int ) in . readUnsignedVInt ( ) ; <nl> + int bytesRead = sizeof ( creationTime ) + sizeofUnsignedVInt ( gcgs ) ; <nl> + <nl> + if ( isLive ( creationTime , now , gcgs ) ) <nl> + return new Hint ( Mutation . serializer . deserialize ( in , version ) , creationTime , gcgs ) ; <nl> + <nl> + in . skipBytesFully ( Ints . checkedCast ( size ) - bytesRead ) ; <nl> + return null ; <nl> + } <nl> + <nl> + / * * <nl> + * Will short - circuit ByteBuffer allocation if the hint is definitely dead . If a ByteBuffer instance is <nl> + * returned , there is a chance it ' s live , if gcgs on one of the table involved got reduced between <nl> + * hint creation and deserialization , but this does not impact correctness - an extra liveness check will <nl> + * also be performed on the receiving end . <nl> + * <nl> + * @ return null if the hint is definitely dead , a ByteBuffer instance if it ' s likely live <nl> + * / <nl> + @ Nullable <nl> + ByteBuffer readBufferIfLive ( DataInputPlus in , long now , int size , int version ) throws IOException <nl> + { <nl> + int maxHeaderSize = Math . min ( sizeof ( Long . MAX _ VALUE ) + VIntCoding . MAX _ SIZE , size ) ; <nl> + byte [ ] header = new byte [ maxHeaderSize ] ; <nl> + in . readFully ( header ) ; <nl> + <nl> + try ( DataInputBuffer input = new DataInputBuffer ( header ) ) <nl> + { <nl> + long creationTime = input . readLong ( ) ; <nl> + int gcgs = ( int ) input . readUnsignedVInt ( ) ; <nl> + <nl> + if ( ! isLive ( creationTime , now , gcgs ) ) <nl> + { <nl> + in . skipBytesFully ( size - maxHeaderSize ) ; <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + byte [ ] bytes = new byte [ size ] ; <nl> + System . arraycopy ( header , 0 , bytes , 0 , header . length ) ; <nl> + in . readFully ( bytes , header . length , size - header . length ) ; <nl> + return ByteBuffer . wrap ( bytes ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / hints / HintsReader . java b / src / java / org / apache / cassandra / hints / HintsReader . java <nl> index dbcd7f3 . . 9bf55bf 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / HintsReader . java <nl> + + + b / src / java / org / apache / cassandra / hints / HintsReader . java <nl> @ @ - 35 , 7 + 35 , 6 @ @ import org . apache . cassandra . exceptions . UnknownTableException ; <nl> import org . apache . cassandra . io . FSReadError ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . AbstractIterator ; <nl> - import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> / * * <nl> * A paged non - compressed hints reader that provides two iterators : <nl> @ @ - 165 , 6 + 164 , 7 @ @ class HintsReader implements AutoCloseable , Iterable < HintsReader . Page > <nl> final class HintsIterator extends AbstractIterator < Hint > <nl> { <nl> private final InputPosition offset ; <nl> + private final long now = System . currentTimeMillis ( ) ; <nl> <nl> HintsIterator ( InputPosition offset ) <nl> { <nl> @ @ - 228 , 7 + 228 , 7 @ @ class HintsReader implements AutoCloseable , Iterable < HintsReader . Page > <nl> Hint hint ; <nl> try <nl> { <nl> - hint = Hint . serializer . deserialize ( input , descriptor . messagingVersion ( ) ) ; <nl> + hint = Hint . serializer . deserializeIfLive ( input , now , size , descriptor . messagingVersion ( ) ) ; <nl> input . checkLimit ( 0 ) ; <nl> } <nl> catch ( UnknownTableException e ) <nl> @ @ - 262 , 6 + 262 , 7 @ @ class HintsReader implements AutoCloseable , Iterable < HintsReader . Page > <nl> final class BuffersIterator extends AbstractIterator < ByteBuffer > <nl> { <nl> private final InputPosition offset ; <nl> + private final long now = System . currentTimeMillis ( ) ; <nl> <nl> BuffersIterator ( InputPosition offset ) <nl> { <nl> @ @ - 322 , 7 + 323 , 7 @ @ class HintsReader implements AutoCloseable , Iterable < HintsReader . Page > <nl> rateLimiter . acquire ( size ) ; <nl> input . limit ( size ) ; <nl> <nl> - ByteBuffer buffer = ByteBufferUtil . read ( input , size ) ; <nl> + ByteBuffer buffer = Hint . serializer . readBufferIfLive ( input , now , size , descriptor . messagingVersion ( ) ) ; <nl> if ( input . checkCrc ( ) ) <nl> return buffer ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / hints / HintsWriter . java b / src / java / org / apache / cassandra / hints / HintsWriter . java <nl> index 48b8c7c . . 5997eb4 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / HintsWriter . java <nl> + + + b / src / java / org / apache / cassandra / hints / HintsWriter . java <nl> @ @ - 143 , 6 + 143 , 12 @ @ class HintsWriter implements AutoCloseable <nl> } <nl> } <nl> <nl> + @ VisibleForTesting <nl> + File getFile ( ) <nl> + { <nl> + return file ; <nl> + } <nl> + <nl> / * * <nl> * Writes byte buffer into the file channel . Buffer should be flipped before calling this <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / io / util / RebufferingInputStream . java b / src / java / org / apache / cassandra / io / util / RebufferingInputStream . java <nl> index 094115a . . 086f5c9 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / RebufferingInputStream . java <nl> + + + b / src / java / org / apache / cassandra / io / util / RebufferingInputStream . java <nl> @ @ - 112 , 7 + 112 , 7 @ @ public abstract class RebufferingInputStream extends InputStream implements Data <nl> @ Override <nl> public int skipBytes ( int n ) throws IOException <nl> { <nl> - if ( n < 0 ) <nl> + if ( n < = 0 ) <nl> return 0 ; <nl> int requested = n ; <nl> int position = buffer . position ( ) , limit = buffer . limit ( ) , remaining ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / vint / VIntCoding . java b / src / java / org / apache / cassandra / utils / vint / VIntCoding . java <nl> index b490b97 . . a8a1654 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / vint / VIntCoding . java <nl> + + + b / src / java / org / apache / cassandra / utils / vint / VIntCoding . java <nl> @ @ - 59 , 6 + 59 , 7 @ @ import net . nicoulaj . compilecommand . annotations . Inline ; <nl> * / <nl> public class VIntCoding <nl> { <nl> + public static final int MAX _ SIZE = 10 ; <nl> <nl> public static long readUnsignedVInt ( DataInput input ) throws IOException <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / hints / HintWriteTTLTest . java b / test / unit / org / apache / cassandra / hints / HintWriteTTLTest . java <nl> new file mode 100644 <nl> index 0000000 . . b06187d <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / hints / HintWriteTTLTest . java <nl> @ @ - 0 , 0 + 1 , 169 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . hints ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . nio . ByteBuffer ; <nl> + import java . nio . file . Files ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Iterator ; <nl> + import java . util . List ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + <nl> + import org . junit . Assert ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . cql3 . statements . CreateTableStatement ; <nl> + import org . apache . cassandra . db . DecoratedKey ; <nl> + import org . apache . cassandra . db . Mutation ; <nl> + import org . apache . cassandra . db . partitions . PartitionUpdate ; <nl> + import org . apache . cassandra . io . util . DataInputBuffer ; <nl> + import org . apache . cassandra . net . MessagingService ; <nl> + import org . apache . cassandra . schema . KeyspaceParams ; <nl> + import org . apache . cassandra . schema . TableMetadata ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> + <nl> + public class HintWriteTTLTest <nl> + { <nl> + private static int TTL = 500 ; <nl> + private static int GC _ GRACE = 84600 ; <nl> + <nl> + private static Hint makeHint ( TableMetadata tbm , int key , int creationTime , int gcgs ) <nl> + { <nl> + PartitionUpdate update = PartitionUpdate . fullPartitionDelete ( tbm , <nl> + ByteBufferUtil . bytes ( key ) , <nl> + s2m ( creationTime ) , <nl> + creationTime ) ; <nl> + Mutation mutation = new Mutation ( update ) ; <nl> + return Hint . create ( mutation , s2m ( creationTime ) , gcgs ) ; <nl> + } <nl> + <nl> + private static DecoratedKey hintKey ( Hint hint ) <nl> + { <nl> + return hint . mutation . key ( ) ; <nl> + } <nl> + <nl> + private static Hint deserialize ( ByteBuffer bb ) throws IOException <nl> + { <nl> + DataInputBuffer input = new DataInputBuffer ( bb , true ) ; <nl> + try <nl> + { <nl> + return Hint . serializer . deserialize ( input , MessagingService . current _ version ) ; <nl> + } <nl> + finally <nl> + { <nl> + input . close ( ) ; <nl> + } <nl> + } <nl> + <nl> + private static Hint ttldHint = null ; <nl> + private static Hint liveHint = null ; <nl> + private static File hintFile = null ; <nl> + <nl> + @ BeforeClass <nl> + public static void setupClass ( ) throws Exception <nl> + { <nl> + System . setProperty ( " cassandra . maxHintTTL " , Integer . toString ( TTL ) ) ; <nl> + SchemaLoader . prepareServer ( ) ; <nl> + TableMetadata tbm = CreateTableStatement . parse ( " CREATE TABLE tbl ( k INT PRIMARY KEY , v INT ) " , " ks " ) . gcGraceSeconds ( GC _ GRACE ) . build ( ) ; <nl> + SchemaLoader . createKeyspace ( " ks " , KeyspaceParams . simple ( 1 ) , tbm ) ; <nl> + <nl> + int nowInSeconds = FBUtilities . nowInSeconds ( ) ; <nl> + liveHint = makeHint ( tbm , 1 , nowInSeconds , GC _ GRACE ) ; <nl> + ttldHint = makeHint ( tbm , 2 , nowInSeconds - ( TTL + 1 ) , GC _ GRACE ) ; <nl> + <nl> + <nl> + File directory = Files . createTempDirectory ( null ) . toFile ( ) ; <nl> + HintsDescriptor descriptor = new HintsDescriptor ( UUIDGen . getTimeUUID ( ) , s2m ( nowInSeconds ) ) ; <nl> + <nl> + try ( HintsWriter writer = HintsWriter . create ( directory , descriptor ) ; <nl> + HintsWriter . Session session = writer . newSession ( ByteBuffer . allocate ( 1024 ) ) ) <nl> + { <nl> + session . append ( liveHint ) ; <nl> + session . append ( ttldHint ) ; <nl> + hintFile = writer . getFile ( ) ; <nl> + } <nl> + } <nl> + <nl> + private static long s2m ( int seconds ) <nl> + { <nl> + return TimeUnit . SECONDS . toMillis ( seconds ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void isLive ( ) throws Exception <nl> + { <nl> + / / max ttl is set to 500 <nl> + Assert . assertTrue ( Hint . isLive ( s2m ( 0 ) , s2m ( 499 ) , 500 ) ) ; / / still live <nl> + Assert . assertFalse ( Hint . isLive ( s2m ( 0 ) , s2m ( 499 ) , 499 ) ) ; / / expired due to hint ' s own ttl <nl> + Assert . assertFalse ( Hint . isLive ( s2m ( 0 ) , s2m ( 500 ) , 501 ) ) ; / / expired due to max ttl <nl> + } <nl> + <nl> + @ Test <nl> + public void hintIsLive ( ) throws Exception <nl> + { <nl> + Assert . assertTrue ( liveHint . isLive ( ) ) ; <nl> + Assert . assertFalse ( ttldHint . isLive ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void hintIterator ( ) throws Exception <nl> + { <nl> + List < Hint > hints = new ArrayList < > ( ) ; <nl> + try ( HintsReader reader = HintsReader . open ( hintFile ) ) <nl> + { <nl> + for ( HintsReader . Page page : reader ) <nl> + { <nl> + Iterator < Hint > iter = page . hintsIterator ( ) ; <nl> + while ( iter . hasNext ( ) ) <nl> + { <nl> + hints . add ( iter . next ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + Assert . assertEquals ( 1 , hints . size ( ) ) ; <nl> + Assert . assertEquals ( hintKey ( liveHint ) , hintKey ( hints . get ( 0 ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void bufferIterator ( ) throws Exception <nl> + { <nl> + List < Hint > hints = new ArrayList < > ( ) ; <nl> + try ( HintsReader reader = HintsReader . open ( hintFile ) ) <nl> + { <nl> + for ( HintsReader . Page page : reader ) <nl> + { <nl> + Iterator < ByteBuffer > iter = page . buffersIterator ( ) ; <nl> + while ( iter . hasNext ( ) ) <nl> + { <nl> + hints . add ( deserialize ( iter . next ( ) ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + Assert . assertEquals ( 1 , hints . size ( ) ) ; <nl> + Assert . assertEquals ( hintKey ( liveHint ) , hintKey ( hints . get ( 0 ) ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> index a83fbab . . e2dc046 100644 <nl> - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> @ @ - 391 , 7 + 391 , 9 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean <nl> { <nl> Token < ? > token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromByteArray ( row . key . key ) ; <nl> InetAddress target = StorageService . instance . getTokenMetadata ( ) . getEndpoint ( token ) ; <nl> - scheduleHintDelivery ( target ) ; <nl> + / / token may have since been removed ( in which case we have just read back a tombstone ) <nl> + if ( target ! = null ) <nl> + scheduleHintDelivery ( target ) ; <nl> } <nl> <nl> if ( logger _ . isDebugEnabled ( ) )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 03870dd . . 9d1323d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Bring back maxHintTTL propery ( CASSANDRA - 12982 ) 
 * Add testing guidelines ( CASSANDRA - 13497 ) 
 * Add more repair metrics ( CASSANDRA - 13531 ) 
 * RangeStreamer should be smarter when picking endpoints for streaming ( CASSANDRA - 4650 ) 
 diff - - git a / conf / jvm . options b / conf / jvm . options 
 index 49b2196 . . 398b52f 100644 
 - - - a / conf / jvm . options 
 + + + b / conf / jvm . options 
 @ @ - 79 , 6 + 79 , 9 @ @ 
 # 10000 rows per page . 
 # - Dcassandra . force _ default _ indexing _ page _ size = true 
 
 + # Imposes an upper bound on hint lifetime below the normal min gc _ grace _ seconds 
 + # - Dcassandra . maxHintTTL = max _ hint _ ttl _ in _ seconds 
 + 
 # # # # # # # # # # # # # # # # # # # # # # # # 
 # GENERAL JVM SETTINGS # 
 # # # # # # # # # # # # # # # # # # # # # # # # 
 diff - - git a / src / java / org / apache / cassandra / hints / Hint . java b / src / java / org / apache / cassandra / hints / Hint . java 
 index 1582a3c . . b0abd50 100644 
 - - - a / src / java / org / apache / cassandra / hints / Hint . java 
 + + + b / src / java / org / apache / cassandra / hints / Hint . java 
 @ @ - 24 , 11 + 24 , 17 @ @ import java . util . concurrent . TimeUnit ; 
 
 import com . google . common . base . Throwables ; 
 
 + import javax . annotation . Nullable ; 
 + 
 + import com . google . common . primitives . Ints ; 
 + 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 + import org . apache . cassandra . io . util . DataInputBuffer ; 
 import org . apache . cassandra . io . util . DataInputPlus ; 
 import org . apache . cassandra . io . util . DataOutputPlus ; 
 import org . apache . cassandra . schema . TableId ; 
 + import org . apache . cassandra . utils . vint . VIntCoding ; 
 
 import static org . apache . cassandra . db . TypeSizes . sizeof ; 
 import static org . apache . cassandra . db . TypeSizes . sizeofUnsignedVInt ; 
 @ @ - 51 , 10 + 57 , 11 @ @ import static org . apache . cassandra . db . TypeSizes . sizeofUnsignedVInt ; 
 public final class Hint 
 { 
 public static final Serializer serializer = new Serializer ( ) ; 
 + static final int maxHintTTL = Integer . getInteger ( " cassandra . maxHintTTL " , Integer . MAX _ VALUE ) ; 
 
 final Mutation mutation ; 
 final long creationTime ; / / time of hint creation ( in milliseconds ) 
 - final int gcgs ; / / the smallest gc gs of all involved tables 
 + final int gcgs ; / / the smallest gc gs of all involved tables ( in seconds ) 
 
 private Hint ( Mutation mutation , long creationTime , int gcgs ) 
 { 
 @ @ - 115 , 13 + 122 , 25 @ @ public final class Hint 
 } 
 
 / * * 
 + * @ return the overall ttl of the hint - the minimum of all mutation ' s tables ' gc gs now and at the time of creation 
 + * / 
 + int ttl ( ) 
 + { 
 + return Math . min ( gcgs , mutation . smallestGCGS ( ) ) ; 
 + } 
 + 
 + / * * 
 * @ return calculates whether or not it is safe to apply the hint without risking to resurrect any deleted data 
 * / 
 boolean isLive ( ) 
 { 
 - int smallestGCGS = Math . min ( gcgs , mutation . smallestGCGS ( ) ) ; 
 - long expirationTime = creationTime + TimeUnit . SECONDS . toMillis ( smallestGCGS ) ; 
 - return expirationTime > System . currentTimeMillis ( ) ; 
 + return isLive ( creationTime , System . currentTimeMillis ( ) , ttl ( ) ) ; 
 + } 
 + 
 + static boolean isLive ( long creationTime , long now , int hintTTL ) 
 + { 
 + long expirationTime = creationTime + TimeUnit . SECONDS . toMillis ( Math . min ( hintTTL , maxHintTTL ) ) ; 
 + return expirationTime > now ; 
 } 
 
 static final class Serializer implements IVersionedSerializer < Hint > 
 @ @ - 152 , 5 + 171 , 60 @ @ public final class Hint 
 { 
 return hintBuffer . getLong ( 0 ) ; 
 } 
 + 
 + / * * 
 + * Will short - circuit Mutation deserialization if the hint is definitely dead . If a Hint instance is 
 + * returned , there is a chance it ' s live , if gcgs on one of the table involved got reduced between 
 + * hint creation and deserialization , but this does not impact correctness - an extra liveness check will 
 + * also be performed on the receiving end . 
 + * 
 + * @ return null if the hint is definitely dead , a Hint instance if it ' s likely live 
 + * / 
 + @ Nullable 
 + Hint deserializeIfLive ( DataInputPlus in , long now , long size , int version ) throws IOException 
 + { 
 + long creationTime = in . readLong ( ) ; 
 + int gcgs = ( int ) in . readUnsignedVInt ( ) ; 
 + int bytesRead = sizeof ( creationTime ) + sizeofUnsignedVInt ( gcgs ) ; 
 + 
 + if ( isLive ( creationTime , now , gcgs ) ) 
 + return new Hint ( Mutation . serializer . deserialize ( in , version ) , creationTime , gcgs ) ; 
 + 
 + in . skipBytesFully ( Ints . checkedCast ( size ) - bytesRead ) ; 
 + return null ; 
 + } 
 + 
 + / * * 
 + * Will short - circuit ByteBuffer allocation if the hint is definitely dead . If a ByteBuffer instance is 
 + * returned , there is a chance it ' s live , if gcgs on one of the table involved got reduced between 
 + * hint creation and deserialization , but this does not impact correctness - an extra liveness check will 
 + * also be performed on the receiving end . 
 + * 
 + * @ return null if the hint is definitely dead , a ByteBuffer instance if it ' s likely live 
 + * / 
 + @ Nullable 
 + ByteBuffer readBufferIfLive ( DataInputPlus in , long now , int size , int version ) throws IOException 
 + { 
 + int maxHeaderSize = Math . min ( sizeof ( Long . MAX _ VALUE ) + VIntCoding . MAX _ SIZE , size ) ; 
 + byte [ ] header = new byte [ maxHeaderSize ] ; 
 + in . readFully ( header ) ; 
 + 
 + try ( DataInputBuffer input = new DataInputBuffer ( header ) ) 
 + { 
 + long creationTime = input . readLong ( ) ; 
 + int gcgs = ( int ) input . readUnsignedVInt ( ) ; 
 + 
 + if ( ! isLive ( creationTime , now , gcgs ) ) 
 + { 
 + in . skipBytesFully ( size - maxHeaderSize ) ; 
 + return null ; 
 + } 
 + } 
 + 
 + byte [ ] bytes = new byte [ size ] ; 
 + System . arraycopy ( header , 0 , bytes , 0 , header . length ) ; 
 + in . readFully ( bytes , header . length , size - header . length ) ; 
 + return ByteBuffer . wrap ( bytes ) ; 
 + } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / hints / HintsReader . java b / src / java / org / apache / cassandra / hints / HintsReader . java 
 index dbcd7f3 . . 9bf55bf 100644 
 - - - a / src / java / org / apache / cassandra / hints / HintsReader . java 
 + + + b / src / java / org / apache / cassandra / hints / HintsReader . java 
 @ @ - 35 , 7 + 35 , 6 @ @ import org . apache . cassandra . exceptions . UnknownTableException ; 
 import org . apache . cassandra . io . FSReadError ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . AbstractIterator ; 
 - import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 / * * 
 * A paged non - compressed hints reader that provides two iterators : 
 @ @ - 165 , 6 + 164 , 7 @ @ class HintsReader implements AutoCloseable , Iterable < HintsReader . Page > 
 final class HintsIterator extends AbstractIterator < Hint > 
 { 
 private final InputPosition offset ; 
 + private final long now = System . currentTimeMillis ( ) ; 
 
 HintsIterator ( InputPosition offset ) 
 { 
 @ @ - 228 , 7 + 228 , 7 @ @ class HintsReader implements AutoCloseable , Iterable < HintsReader . Page > 
 Hint hint ; 
 try 
 { 
 - hint = Hint . serializer . deserialize ( input , descriptor . messagingVersion ( ) ) ; 
 + hint = Hint . serializer . deserializeIfLive ( input , now , size , descriptor . messagingVersion ( ) ) ; 
 input . checkLimit ( 0 ) ; 
 } 
 catch ( UnknownTableException e ) 
 @ @ - 262 , 6 + 262 , 7 @ @ class HintsReader implements AutoCloseable , Iterable < HintsReader . Page > 
 final class BuffersIterator extends AbstractIterator < ByteBuffer > 
 { 
 private final InputPosition offset ; 
 + private final long now = System . currentTimeMillis ( ) ; 
 
 BuffersIterator ( InputPosition offset ) 
 { 
 @ @ - 322 , 7 + 323 , 7 @ @ class HintsReader implements AutoCloseable , Iterable < HintsReader . Page > 
 rateLimiter . acquire ( size ) ; 
 input . limit ( size ) ; 
 
 - ByteBuffer buffer = ByteBufferUtil . read ( input , size ) ; 
 + ByteBuffer buffer = Hint . serializer . readBufferIfLive ( input , now , size , descriptor . messagingVersion ( ) ) ; 
 if ( input . checkCrc ( ) ) 
 return buffer ; 
 
 diff - - git a / src / java / org / apache / cassandra / hints / HintsWriter . java b / src / java / org / apache / cassandra / hints / HintsWriter . java 
 index 48b8c7c . . 5997eb4 100644 
 - - - a / src / java / org / apache / cassandra / hints / HintsWriter . java 
 + + + b / src / java / org / apache / cassandra / hints / HintsWriter . java 
 @ @ - 143 , 6 + 143 , 12 @ @ class HintsWriter implements AutoCloseable 
 } 
 } 
 
 + @ VisibleForTesting 
 + File getFile ( ) 
 + { 
 + return file ; 
 + } 
 + 
 / * * 
 * Writes byte buffer into the file channel . Buffer should be flipped before calling this 
 * / 
 diff - - git a / src / java / org / apache / cassandra / io / util / RebufferingInputStream . java b / src / java / org / apache / cassandra / io / util / RebufferingInputStream . java 
 index 094115a . . 086f5c9 100644 
 - - - a / src / java / org / apache / cassandra / io / util / RebufferingInputStream . java 
 + + + b / src / java / org / apache / cassandra / io / util / RebufferingInputStream . java 
 @ @ - 112 , 7 + 112 , 7 @ @ public abstract class RebufferingInputStream extends InputStream implements Data 
 @ Override 
 public int skipBytes ( int n ) throws IOException 
 { 
 - if ( n < 0 ) 
 + if ( n < = 0 ) 
 return 0 ; 
 int requested = n ; 
 int position = buffer . position ( ) , limit = buffer . limit ( ) , remaining ; 
 diff - - git a / src / java / org / apache / cassandra / utils / vint / VIntCoding . java b / src / java / org / apache / cassandra / utils / vint / VIntCoding . java 
 index b490b97 . . a8a1654 100644 
 - - - a / src / java / org / apache / cassandra / utils / vint / VIntCoding . java 
 + + + b / src / java / org / apache / cassandra / utils / vint / VIntCoding . java 
 @ @ - 59 , 6 + 59 , 7 @ @ import net . nicoulaj . compilecommand . annotations . Inline ; 
 * / 
 public class VIntCoding 
 { 
 + public static final int MAX _ SIZE = 10 ; 
 
 public static long readUnsignedVInt ( DataInput input ) throws IOException 
 { 
 diff - - git a / test / unit / org / apache / cassandra / hints / HintWriteTTLTest . java b / test / unit / org / apache / cassandra / hints / HintWriteTTLTest . java 
 new file mode 100644 
 index 0000000 . . b06187d 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / hints / HintWriteTTLTest . java 
 @ @ - 0 , 0 + 1 , 169 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . hints ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . nio . ByteBuffer ; 
 + import java . nio . file . Files ; 
 + import java . util . ArrayList ; 
 + import java . util . Iterator ; 
 + import java . util . List ; 
 + import java . util . concurrent . TimeUnit ; 
 + 
 + import org . junit . Assert ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . cql3 . statements . CreateTableStatement ; 
 + import org . apache . cassandra . db . DecoratedKey ; 
 + import org . apache . cassandra . db . Mutation ; 
 + import org . apache . cassandra . db . partitions . PartitionUpdate ; 
 + import org . apache . cassandra . io . util . DataInputBuffer ; 
 + import org . apache . cassandra . net . MessagingService ; 
 + import org . apache . cassandra . schema . KeyspaceParams ; 
 + import org . apache . cassandra . schema . TableMetadata ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 + 
 + public class HintWriteTTLTest 
 + { 
 + private static int TTL = 500 ; 
 + private static int GC _ GRACE = 84600 ; 
 + 
 + private static Hint makeHint ( TableMetadata tbm , int key , int creationTime , int gcgs ) 
 + { 
 + PartitionUpdate update = PartitionUpdate . fullPartitionDelete ( tbm , 
 + ByteBufferUtil . bytes ( key ) , 
 + s2m ( creationTime ) , 
 + creationTime ) ; 
 + Mutation mutation = new Mutation ( update ) ; 
 + return Hint . create ( mutation , s2m ( creationTime ) , gcgs ) ; 
 + } 
 + 
 + private static DecoratedKey hintKey ( Hint hint ) 
 + { 
 + return hint . mutation . key ( ) ; 
 + } 
 + 
 + private static Hint deserialize ( ByteBuffer bb ) throws IOException 
 + { 
 + DataInputBuffer input = new DataInputBuffer ( bb , true ) ; 
 + try 
 + { 
 + return Hint . serializer . deserialize ( input , MessagingService . current _ version ) ; 
 + } 
 + finally 
 + { 
 + input . close ( ) ; 
 + } 
 + } 
 + 
 + private static Hint ttldHint = null ; 
 + private static Hint liveHint = null ; 
 + private static File hintFile = null ; 
 + 
 + @ BeforeClass 
 + public static void setupClass ( ) throws Exception 
 + { 
 + System . setProperty ( " cassandra . maxHintTTL " , Integer . toString ( TTL ) ) ; 
 + SchemaLoader . prepareServer ( ) ; 
 + TableMetadata tbm = CreateTableStatement . parse ( " CREATE TABLE tbl ( k INT PRIMARY KEY , v INT ) " , " ks " ) . gcGraceSeconds ( GC _ GRACE ) . build ( ) ; 
 + SchemaLoader . createKeyspace ( " ks " , KeyspaceParams . simple ( 1 ) , tbm ) ; 
 + 
 + int nowInSeconds = FBUtilities . nowInSeconds ( ) ; 
 + liveHint = makeHint ( tbm , 1 , nowInSeconds , GC _ GRACE ) ; 
 + ttldHint = makeHint ( tbm , 2 , nowInSeconds - ( TTL + 1 ) , GC _ GRACE ) ; 
 + 
 + 
 + File directory = Files . createTempDirectory ( null ) . toFile ( ) ; 
 + HintsDescriptor descriptor = new HintsDescriptor ( UUIDGen . getTimeUUID ( ) , s2m ( nowInSeconds ) ) ; 
 + 
 + try ( HintsWriter writer = HintsWriter . create ( directory , descriptor ) ; 
 + HintsWriter . Session session = writer . newSession ( ByteBuffer . allocate ( 1024 ) ) ) 
 + { 
 + session . append ( liveHint ) ; 
 + session . append ( ttldHint ) ; 
 + hintFile = writer . getFile ( ) ; 
 + } 
 + } 
 + 
 + private static long s2m ( int seconds ) 
 + { 
 + return TimeUnit . SECONDS . toMillis ( seconds ) ; 
 + } 
 + 
 + @ Test 
 + public void isLive ( ) throws Exception 
 + { 
 + / / max ttl is set to 500 
 + Assert . assertTrue ( Hint . isLive ( s2m ( 0 ) , s2m ( 499 ) , 500 ) ) ; / / still live 
 + Assert . assertFalse ( Hint . isLive ( s2m ( 0 ) , s2m ( 499 ) , 499 ) ) ; / / expired due to hint ' s own ttl 
 + Assert . assertFalse ( Hint . isLive ( s2m ( 0 ) , s2m ( 500 ) , 501 ) ) ; / / expired due to max ttl 
 + } 
 + 
 + @ Test 
 + public void hintIsLive ( ) throws Exception 
 + { 
 + Assert . assertTrue ( liveHint . isLive ( ) ) ; 
 + Assert . assertFalse ( ttldHint . isLive ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void hintIterator ( ) throws Exception 
 + { 
 + List < Hint > hints = new ArrayList < > ( ) ; 
 + try ( HintsReader reader = HintsReader . open ( hintFile ) ) 
 + { 
 + for ( HintsReader . Page page : reader ) 
 + { 
 + Iterator < Hint > iter = page . hintsIterator ( ) ; 
 + while ( iter . hasNext ( ) ) 
 + { 
 + hints . add ( iter . next ( ) ) ; 
 + } 
 + } 
 + } 
 + 
 + Assert . assertEquals ( 1 , hints . size ( ) ) ; 
 + Assert . assertEquals ( hintKey ( liveHint ) , hintKey ( hints . get ( 0 ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void bufferIterator ( ) throws Exception 
 + { 
 + List < Hint > hints = new ArrayList < > ( ) ; 
 + try ( HintsReader reader = HintsReader . open ( hintFile ) ) 
 + { 
 + for ( HintsReader . Page page : reader ) 
 + { 
 + Iterator < ByteBuffer > iter = page . buffersIterator ( ) ; 
 + while ( iter . hasNext ( ) ) 
 + { 
 + hints . add ( deserialize ( iter . next ( ) ) ) ; 
 + } 
 + } 
 + } 
 + 
 + Assert . assertEquals ( 1 , hints . size ( ) ) ; 
 + Assert . assertEquals ( hintKey ( liveHint ) , hintKey ( hints . get ( 0 ) ) ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 index a83fbab . . e2dc046 100644 
 - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 @ @ - 391 , 7 + 391 , 9 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean 
 { 
 Token < ? > token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromByteArray ( row . key . key ) ; 
 InetAddress target = StorageService . instance . getTokenMetadata ( ) . getEndpoint ( token ) ; 
 - scheduleHintDelivery ( target ) ; 
 + / / token may have since been removed ( in which case we have just read back a tombstone ) 
 + if ( target ! = null ) 
 + scheduleHintDelivery ( target ) ; 
 } 
 
 if ( logger _ . isDebugEnabled ( ) )
