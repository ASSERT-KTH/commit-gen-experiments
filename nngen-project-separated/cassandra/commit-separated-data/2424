BLEU SCORE: 0.03515208856700363

TEST MSG: Fix bug with some IN queries missing results
GENERATED MSG: IN on the last clustering columns + ORDER BY DESC yield no results

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e7d7028 . . 619c219 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 24 , 6 + 24 , 7 @ @ <nl> * raise streaming phi convict threshold level ( CASSANDRA - 7063 ) <nl> * reduce garbage creation in calculatePendingRanges ( CASSANDRA - 7191 ) <nl> * exit CQLSH with error status code if script fails ( CASSANDRA - 6344 ) <nl> + * Fix bug with some IN queries missig results ( CASSANDRA - 7105 ) <nl> <nl> <nl> 1 . 2 . 16 <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index e058cff . . 02833e7 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 626 , 7 + 626 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> throw new InvalidRequestException ( String . format ( " Invalid null clustering key part % s " , name ) ) ; <nl> ColumnNameBuilder copy = builder . copy ( ) . add ( val ) ; <nl> / / See below for why this <nl> - s . add ( ( b = = Bound . END & & copy . remainingCount ( ) > 0 ) ? copy . buildAsEndOfRange ( ) : copy . build ( ) ) ; <nl> + s . add ( ( eocBound = = Bound . END & & copy . remainingCount ( ) > 0 ) ? copy . buildAsEndOfRange ( ) : copy . build ( ) ) ; <nl> } <nl> return new ArrayList < ByteBuffer > ( s ) ; <nl> } <nl> @ @ - 652 , 7 + 652 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> / / with 2ndary index is done , and with the the partition provided with an EQ , we ' ll end up here , and in that <nl> / / case using the eoc would be bad , since for the random partitioner we have no guarantee that <nl> / / builder . buildAsEndOfRange ( ) will sort after builder . build ( ) ( see # 5240 ) . <nl> - return Collections . singletonList ( ( bound = = Bound . END & & builder . remainingCount ( ) > 0 ) ? builder . buildAsEndOfRange ( ) : builder . build ( ) ) ; <nl> + return Collections . singletonList ( ( eocBound = = Bound . END & & builder . remainingCount ( ) > 0 ) ? builder . buildAsEndOfRange ( ) : builder . build ( ) ) ; <nl> } <nl> <nl> private List < ByteBuffer > getRequestedBound ( Bound b , List < ByteBuffer > variables ) throws InvalidRequestException
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e7d7028 . . 619c219 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 24 , 6 + 24 , 7 @ @ 
 * raise streaming phi convict threshold level ( CASSANDRA - 7063 ) 
 * reduce garbage creation in calculatePendingRanges ( CASSANDRA - 7191 ) 
 * exit CQLSH with error status code if script fails ( CASSANDRA - 6344 ) 
 + * Fix bug with some IN queries missig results ( CASSANDRA - 7105 ) 
 
 
 1 . 2 . 16 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index e058cff . . 02833e7 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 626 , 7 + 626 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 throw new InvalidRequestException ( String . format ( " Invalid null clustering key part % s " , name ) ) ; 
 ColumnNameBuilder copy = builder . copy ( ) . add ( val ) ; 
 / / See below for why this 
 - s . add ( ( b = = Bound . END & & copy . remainingCount ( ) > 0 ) ? copy . buildAsEndOfRange ( ) : copy . build ( ) ) ; 
 + s . add ( ( eocBound = = Bound . END & & copy . remainingCount ( ) > 0 ) ? copy . buildAsEndOfRange ( ) : copy . build ( ) ) ; 
 } 
 return new ArrayList < ByteBuffer > ( s ) ; 
 } 
 @ @ - 652 , 7 + 652 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 / / with 2ndary index is done , and with the the partition provided with an EQ , we ' ll end up here , and in that 
 / / case using the eoc would be bad , since for the random partitioner we have no guarantee that 
 / / builder . buildAsEndOfRange ( ) will sort after builder . build ( ) ( see # 5240 ) . 
 - return Collections . singletonList ( ( bound = = Bound . END & & builder . remainingCount ( ) > 0 ) ? builder . buildAsEndOfRange ( ) : builder . build ( ) ) ; 
 + return Collections . singletonList ( ( eocBound = = Bound . END & & builder . remainingCount ( ) > 0 ) ? builder . buildAsEndOfRange ( ) : builder . build ( ) ) ; 
 } 
 
 private List < ByteBuffer > getRequestedBound ( Bound b , List < ByteBuffer > variables ) throws InvalidRequestException

NEAREST DIFF:
ELIMINATEDSENTENCE
