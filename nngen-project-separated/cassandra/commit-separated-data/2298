BLEU SCORE: 0.024675789207681903

TEST MSG: Add duration mode to cassandra - stress
GENERATED MSG: Support TimeUUIDType column names in Stress . java tool

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 028128d . . 962bd4c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 1 <nl> + * Add duration mode to cassandra - stress ( CASSANDRA - 7468 ) <nl> * Add listen _ interface and rpc _ interface options ( CASSANDRA - 7417 ) <nl> * Fail to start if commit log replay detects a problem ( CASSANDRA - 7125 ) <nl> * Improve schema merge performance ( CASSANDRA - 7444 ) <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressAction . java b / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> index 2105a72 . . d2253f8 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> @ @ - 68 , 7 + 68 , 8 @ @ public class StressAction implements Runnable <nl> if ( settings . rate . auto ) <nl> success = runAuto ( ) ; <nl> else <nl> - success = null ! = run ( settings . command . getFactory ( settings ) , settings . rate . threadCount , settings . command . count , output ) ; <nl> + success = null ! = run ( settings . command . getFactory ( settings ) , settings . rate . threadCount , settings . command . count , <nl> + settings . command . duration , settings . command . durationUnits , output ) ; <nl> <nl> if ( success ) <nl> output . println ( " END " ) ; <nl> @ @ - 89 , 7 + 90 , 7 @ @ public class StressAction implements Runnable <nl> / / we need to warm up all the nodes in the cluster ideally , but we may not be the only stress instance ; <nl> / / so warm up all the nodes we ' re speaking to only . <nl> output . println ( String . format ( " Warming up % s with % d iterations . . . " , single . desc ( ) , iterations ) ) ; <nl> - run ( single , 20 , iterations , warmupOutput ) ; <nl> + run ( single , 20 , iterations , 0 , null , warmupOutput ) ; <nl> } <nl> } <nl> <nl> @ @ - 105 , 7 + 106 , 8 @ @ public class StressAction implements Runnable <nl> { <nl> output . println ( String . format ( " Running with % d threadCount " , threadCount ) ) ; <nl> <nl> - StressMetrics result = run ( settings . command . getFactory ( settings ) , threadCount , settings . command . count , output ) ; <nl> + StressMetrics result = run ( settings . command . getFactory ( settings ) , threadCount , settings . command . count , <nl> + settings . command . duration , settings . command . durationUnits , output ) ; <nl> if ( result = = null ) <nl> return false ; <nl> results . add ( result ) ; <nl> @ @ - 162 , 13 + 164 , 14 @ @ public class StressAction implements Runnable <nl> return improvement / count ; <nl> } <nl> <nl> - private StressMetrics run ( OpDistributionFactory operations , int threadCount , long opCount , PrintStream output ) <nl> + private StressMetrics run ( OpDistributionFactory operations , int threadCount , long opCount , long duration , TimeUnit durationUnits , PrintStream output ) <nl> { <nl> - <nl> output . println ( String . format ( " Running % s with % d threads % s " , <nl> operations . desc ( ) , <nl> threadCount , <nl> - opCount > 0 ? " for " + opCount + " iterations " : " until stderr of mean < " + settings . command . targetUncertainty ) ) ; <nl> + durationUnits ! = null ? duration + " " + durationUnits . toString ( ) . toLowerCase ( ) <nl> + : opCount > 0 ? " for " + opCount + " iteration " <nl> + : " until stderr of mean < " + settings . command . targetUncertainty ) ) ; <nl> final WorkQueue workQueue ; <nl> if ( opCount < 0 ) <nl> workQueue = new ContinuousWorkQueue ( 50 ) ; <nl> @ @ - 193 , 7 + 196 , 12 @ @ public class StressAction implements Runnable <nl> <nl> metrics . start ( ) ; <nl> <nl> - if ( opCount < = 0 ) <nl> + if ( durationUnits ! = null ) <nl> + { <nl> + Uninterruptibles . sleepUninterruptibly ( duration , durationUnits ) ; <nl> + workQueue . stop ( ) ; <nl> + } <nl> + else if ( opCount < = 0 ) <nl> { <nl> try <nl> { <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java b / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java <nl> index 7e5c1b6 . . 717dbb8 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java <nl> @ @ - 25 , 9 + 25 , 10 @ @ import java . io . PrintStream ; <nl> import java . util . List ; <nl> import java . util . concurrent . CountDownLatch ; <nl> import java . util . concurrent . ThreadFactory ; <nl> + import java . util . concurrent . TimeUnit ; <nl> <nl> + import com . google . common . util . concurrent . Uninterruptibles ; <nl> import org . apache . commons . lang3 . time . DurationFormatUtils ; <nl> - <nl> import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> import org . apache . cassandra . stress . util . Timing ; <nl> import org . apache . cassandra . stress . util . TimingInterval ; <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommand . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommand . java <nl> index 032f00c . . 7715e48 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommand . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommand . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . io . Serializable ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . concurrent . TimeUnit ; <nl> <nl> import org . apache . cassandra . stress . operations . OpDistributionFactory ; <nl> import org . apache . cassandra . thrift . ConsistencyLevel ; <nl> @ @ - 35 , 6 + 36 , 8 @ @ public abstract class SettingsCommand implements Serializable <nl> <nl> public final Command type ; <nl> public final long count ; <nl> + public final long duration ; <nl> + public final TimeUnit durationUnits ; <nl> public final int tries ; <nl> public final boolean ignoreErrors ; <nl> public final boolean noWarmup ; <nl> @ @ - 49 , 11 + 52 , 12 @ @ public abstract class SettingsCommand implements Serializable <nl> { <nl> this ( type , ( Options ) options , <nl> options instanceof Count ? ( Count ) options : null , <nl> + options instanceof Duration ? ( Duration ) options : null , <nl> options instanceof Uncertainty ? ( Uncertainty ) options : null <nl> ) ; <nl> } <nl> <nl> - public SettingsCommand ( Command type , Options options , Count count , Uncertainty uncertainty ) <nl> + public SettingsCommand ( Command type , Options options , Count count , Duration duration , Uncertainty uncertainty ) <nl> { <nl> this . type = type ; <nl> this . tries = Math . max ( 1 , Integer . parseInt ( options . retries . value ( ) ) + 1 ) ; <nl> @ @ - 63 , 6 + 67 , 30 @ @ public abstract class SettingsCommand implements Serializable <nl> if ( count ! = null ) <nl> { <nl> this . count = Long . parseLong ( count . count . value ( ) ) ; <nl> + this . duration = 0 ; <nl> + this . durationUnits = null ; <nl> + this . targetUncertainty = - 1 ; <nl> + this . minimumUncertaintyMeasurements = - 1 ; <nl> + this . maximumUncertaintyMeasurements = - 1 ; <nl> + } <nl> + else if ( duration ! = null ) <nl> + { <nl> + this . count = - 1 ; <nl> + this . duration = Long . parseLong ( duration . duration . value ( ) . substring ( 0 , duration . duration . value ( ) . length ( ) - 1 ) ) ; <nl> + switch ( duration . duration . value ( ) . toLowerCase ( ) . charAt ( duration . duration . value ( ) . length ( ) - 1 ) ) <nl> + { <nl> + case ' s ' : <nl> + this . durationUnits = TimeUnit . SECONDS ; <nl> + break ; <nl> + case ' m ' : <nl> + this . durationUnits = TimeUnit . MINUTES ; <nl> + break ; <nl> + case ' h ' : <nl> + this . durationUnits = TimeUnit . HOURS ; <nl> + break ; <nl> + default : <nl> + throw new IllegalStateException ( ) ; <nl> + } <nl> this . targetUncertainty = - 1 ; <nl> this . minimumUncertaintyMeasurements = - 1 ; <nl> this . maximumUncertaintyMeasurements = - 1 ; <nl> @ @ - 70 , 6 + 98 , 8 @ @ public abstract class SettingsCommand implements Serializable <nl> else <nl> { <nl> this . count = - 1 ; <nl> + this . duration = 0 ; <nl> + this . durationUnits = null ; <nl> this . targetUncertainty = Double . parseDouble ( uncertainty . uncertainty . value ( ) ) ; <nl> this . minimumUncertaintyMeasurements = Integer . parseInt ( uncertainty . minMeasurements . value ( ) ) ; <nl> this . maximumUncertaintyMeasurements = Integer . parseInt ( uncertainty . maxMeasurements . value ( ) ) ; <nl> @ @ - 97 , 6 + 127 , 16 @ @ public abstract class SettingsCommand implements Serializable <nl> } <nl> } <nl> <nl> + static class Duration extends Options <nl> + { <nl> + final OptionSimple duration = new OptionSimple ( " duration = " , " [ 0 - 9 ] + [ smh ] " , null , " Time to run in ( in seconds , minutes or hours ) " , true ) ; <nl> + @ Override <nl> + public List < ? extends Option > options ( ) <nl> + { <nl> + return Arrays . asList ( duration , retries , ignoreErrors , consistencyLevel , atOnce ) ; <nl> + } <nl> + } <nl> + <nl> static class Uncertainty extends Options <nl> { <nl> final OptionSimple uncertainty = new OptionSimple ( " err < " , " 0 \ \ . [ 0 - 9 ] + " , " 0 . 02 " , " Run until the standard error of the mean is below this fraction " , false ) ; <nl> @ @ - 138 , 5 + 178 , 37 @ @ public abstract class SettingsCommand implements Serializable <nl> return null ; <nl> } <nl> <nl> - } <nl> + / * static SettingsCommand build ( Command type , String [ ] params ) <nl> + { <nl> + GroupedOptions options = GroupedOptions . select ( params , new Count ( ) , new Duration ( ) , new Uncertainty ( ) ) ; <nl> + if ( options = = null ) <nl> + { <nl> + printHelp ( type ) ; <nl> + System . out . println ( " Invalid " + type + " options provided , see output for valid options " ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + return new SettingsCommand ( type , options ) ; <nl> + } * / <nl> + <nl> + static void printHelp ( Command type ) <nl> + { <nl> + printHelp ( type . toString ( ) . toLowerCase ( ) ) ; <nl> + } <nl> <nl> + static void printHelp ( String type ) <nl> + { <nl> + GroupedOptions . printOptions ( System . out , type . toLowerCase ( ) , new Uncertainty ( ) , new Count ( ) , new Duration ( ) ) ; <nl> + } <nl> + <nl> + static Runnable helpPrinter ( final Command type ) <nl> + { <nl> + return new Runnable ( ) <nl> + { <nl> + @ Override <nl> + public void run ( ) <nl> + { <nl> + printHelp ( type ) ; <nl> + } <nl> + } ; <nl> + } <nl> + } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefined . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefined . java <nl> index ac113d1 . . 64dc054 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefined . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefined . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . stress . operations . FixedOpDistribution ; <nl> import org . apache . cassandra . stress . operations . OpDistribution ; <nl> import org . apache . cassandra . stress . operations . OpDistributionFactory ; <nl> import org . apache . cassandra . stress . operations . predefined . PredefinedOperation ; <nl> + import org . apache . cassandra . stress . settings . SettingsCommandPreDefinedMixed . Options ; <nl> import org . apache . cassandra . stress . util . Timer ; <nl> <nl> / / Settings unique to the mixed command type <nl> @ @ - 111 , 7 + 112 , 8 @ @ public class SettingsCommandPreDefined extends SettingsCommand <nl> { <nl> GroupedOptions options = GroupedOptions . select ( params , <nl> new Options ( new Uncertainty ( ) ) , <nl> - new Options ( new Count ( ) ) ) ; <nl> + new Options ( new Count ( ) ) , <nl> + new Options ( new Duration ( ) ) ) ; <nl> if ( options = = null ) <nl> { <nl> printHelp ( type ) ; <nl> @ @ - 128 , 7 + 130 , 7 @ @ public class SettingsCommandPreDefined extends SettingsCommand <nl> <nl> static void printHelp ( String type ) <nl> { <nl> - GroupedOptions . printOptions ( System . out , type . toLowerCase ( ) , new Uncertainty ( ) , new Count ( ) ) ; <nl> + GroupedOptions . printOptions ( System . out , type . toLowerCase ( ) , new Uncertainty ( ) , new Count ( ) , new Duration ( ) ) ; <nl> } <nl> <nl> static Runnable helpPrinter ( final Command type ) <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefinedMixed . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefinedMixed . java <nl> index e5d4f80 . . 858534b 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefinedMixed . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefinedMixed . java <nl> @ @ - 120 , 7 + 120 , 8 @ @ public class SettingsCommandPreDefinedMixed extends SettingsCommandPreDefined <nl> { <nl> GroupedOptions options = GroupedOptions . select ( params , <nl> new Options ( new SettingsCommand . Uncertainty ( ) ) , <nl> - new Options ( new SettingsCommand . Count ( ) ) ) ; <nl> + new Options ( new SettingsCommand . Count ( ) ) , <nl> + new Options ( new SettingsCommand . Duration ( ) ) ) ; <nl> if ( options = = null ) <nl> { <nl> printHelp ( ) ; <nl> @ @ - 134 , 7 + 135 , 8 @ @ public class SettingsCommandPreDefinedMixed extends SettingsCommandPreDefined <nl> { <nl> GroupedOptions . printOptions ( System . out , " mixed " , <nl> new Options ( new SettingsCommand . Uncertainty ( ) ) , <nl> - new Options ( new SettingsCommand . Count ( ) ) ) ; <nl> + new Options ( new SettingsCommand . Count ( ) ) , <nl> + new Options ( new SettingsCommand . Duration ( ) ) ) ; <nl> } <nl> <nl> public static Runnable helpPrinter ( ) <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandUser . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandUser . java <nl> index f36296e . . 6463783 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandUser . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandUser . java <nl> @ @ - 118 , 7 + 118 , 8 @ @ public class SettingsCommandUser extends SettingsCommand <nl> { <nl> GroupedOptions . printOptions ( System . out , " user " , <nl> new Options ( new Uncertainty ( ) ) , <nl> - new Options ( new Count ( ) ) ) ; <nl> + new Options ( new Count ( ) ) , <nl> + new Options ( new Duration ( ) ) ) ; <nl> } <nl> <nl> public static Runnable helpPrinter ( )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7c5a752 . . d0e485b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 3 , 6 + 3 , 8 @ @ <nl> * filter out unavailable cipher suites when using encryption ( CASSANDRA - 3178 ) <nl> * ( HADOOP ) add old - style api support for CFIF and CFRR ( CASSANDRA - 2799 ) <nl> * Support TimeUUIDType column names in Stress . java tool ( CASSANDRA - 3541 ) <nl> + * ( CQL ) INSERT / UPDATE / DELETE / TRUNCATE commands should allow CF names to <nl> + be qualified by keyspace ( CASSANDRA - 3419 ) <nl> <nl> <nl> 1 . 0 . 5 <nl> diff - - git a / src / java / org / apache / cassandra / cql / AbstractModification . java b / src / java / org / apache / cassandra / cql / AbstractModification . java <nl> index d5503c1 . . 3af10cc 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / AbstractModification . java <nl> + + + b / src / java / org / apache / cassandra / cql / AbstractModification . java <nl> @ @ - 31 , 19 + 31 , 21 @ @ public abstract class AbstractModification <nl> { <nl> public static final ConsistencyLevel defaultConsistency = ConsistencyLevel . ONE ; <nl> <nl> + protected final String keyspace ; <nl> protected final String columnFamily ; <nl> protected final ConsistencyLevel cLevel ; <nl> protected final Long timestamp ; <nl> protected final int timeToLive ; <nl> protected final String keyName ; <nl> <nl> - public AbstractModification ( String columnFamily , String keyAlias , Attributes attrs ) <nl> + public AbstractModification ( String keyspace , String columnFamily , String keyAlias , Attributes attrs ) <nl> { <nl> - this ( columnFamily , keyAlias , attrs . getConsistencyLevel ( ) , attrs . getTimestamp ( ) , attrs . getTimeToLive ( ) ) ; <nl> + this ( keyspace , columnFamily , keyAlias , attrs . getConsistencyLevel ( ) , attrs . getTimestamp ( ) , attrs . getTimeToLive ( ) ) ; <nl> } <nl> <nl> - public AbstractModification ( String columnFamily , String keyAlias , ConsistencyLevel cLevel , Long timestamp , int timeToLive ) <nl> + public AbstractModification ( String keyspace , String columnFamily , String keyAlias , ConsistencyLevel cLevel , Long timestamp , int timeToLive ) <nl> { <nl> + this . keyspace = keyspace ; <nl> this . columnFamily = columnFamily ; <nl> this . cLevel = cLevel ; <nl> this . timestamp = timestamp ; <nl> @ @ - 51 , 6 + 53 , 11 @ @ public abstract class AbstractModification <nl> this . keyName = keyAlias . toUpperCase ( ) ; <nl> } <nl> <nl> + public String getKeyspace ( ) <nl> + { <nl> + return keyspace ; <nl> + } <nl> + <nl> public String getColumnFamily ( ) <nl> { <nl> return columnFamily ; <nl> diff - - git a / src / java / org / apache / cassandra / cql / Cql . g b / src / java / org / apache / cassandra / cql / Cql . g <nl> index 4e83392 . . 6971381 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / Cql . g <nl> + + + b / src / java / org / apache / cassandra / cql / Cql . g <nl> @ @ - 33 , 6 + 33 , 7 @ @ options { <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . ArrayList ; <nl> + import org . apache . cassandra . utils . Pair ; <nl> import org . apache . cassandra . thrift . ConsistencyLevel ; <nl> import org . apache . cassandra . thrift . InvalidRequestException ; <nl> <nl> @ @ - 115 , 7 + 116 , 7 @ @ query returns [ CQLStatement stmnt ] <nl> | updateStatement endStmnt { $ stmnt = new CQLStatement ( StatementType . UPDATE , $ updateStatement . expr ) ; } <nl> | batchStatement { $ stmnt = new CQLStatement ( StatementType . BATCH , $ batchStatement . expr ) ; } <nl> | useStatement { $ stmnt = new CQLStatement ( StatementType . USE , $ useStatement . keyspace ) ; } <nl> - | truncateStatement { $ stmnt = new CQLStatement ( StatementType . TRUNCATE , $ truncateStatement . cfam ) ; } <nl> + | truncateStatement { $ stmnt = new CQLStatement ( StatementType . TRUNCATE , $ truncateStatement . cf ) ; } <nl> | deleteStatement endStmnt { $ stmnt = new CQLStatement ( StatementType . DELETE , $ deleteStatement . expr ) ; } <nl> | createKeyspaceStatement { $ stmnt = new CQLStatement ( StatementType . CREATE _ KEYSPACE , $ createKeyspaceStatement . expr ) ; } <nl> | createColumnFamilyStatement { $ stmnt = new CQLStatement ( StatementType . CREATE _ COLUMNFAMILY , $ createColumnFamilyStatement . expr ) ; } <nl> @ @ - 219 , 13 + 220 , 13 @ @ insertStatement returns [ UpdateStatement expr ] <nl> List < Term > columnNames = new ArrayList < Term > ( ) ; <nl> List < Term > columnValues = new ArrayList < Term > ( ) ; <nl> } <nl> - K _ INSERT K _ INTO columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> + K _ INSERT K _ INTO ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> ' ( ' key _ alias = term ( ' , ' column _ name = term { columnNames . add ( $ column _ name . item ) ; } ) + ' ) ' <nl> K _ VALUES <nl> ' ( ' key = term ( ' , ' column _ value = term { columnValues . add ( $ column _ value . item ) ; } ) + ' ) ' <nl> ( usingClause [ attrs ] ) ? <nl> { <nl> - return new UpdateStatement ( $ columnFamily . text , key _ alias . getText ( ) , columnNames , columnValues , Collections . singletonList ( key ) , attrs ) ; <nl> + return new UpdateStatement ( $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , columnNames , columnValues , Collections . singletonList ( key ) , attrs ) ; <nl> } <nl> ; <nl> <nl> @ @ - 311 , 14 + 312 , 14 @ @ updateStatement returns [ UpdateStatement expr ] <nl> Map < Term , Operation > columns = new HashMap < Term , Operation > ( ) ; <nl> List < Term > keyList = null ; <nl> } <nl> - K _ UPDATE columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> + K _ UPDATE ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> ( usingClause [ attrs ] ) ? <nl> K _ SET termPairWithOperation [ columns ] ( ' , ' termPairWithOperation [ columns ] ) * <nl> K _ WHERE ( key _ alias = term ( ' = ' key = term { keyList = Collections . singletonList ( key ) ; } <nl> | <nl> K _ IN ' ( ' keys = termList { keyList = $ keys . items ; } ' ) ' ) ) <nl> { <nl> - return new UpdateStatement ( $ columnFamily . text , key _ alias . getText ( ) , columns , keyList , attrs ) ; <nl> + return new UpdateStatement ( $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , columns , keyList , attrs ) ; <nl> } <nl> ; <nl> <nl> @ @ - 340 , 13 + 341 , 13 @ @ deleteStatement returns [ DeleteStatement expr ] <nl> } <nl> K _ DELETE <nl> ( cols = termList { columnsList = $ cols . items ; } ) ? <nl> - K _ FROM columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> + K _ FROM ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> ( usingClauseDelete [ attrs ] ) ? <nl> ( K _ WHERE key _ alias = term ( ' = ' key = term { keyList = Collections . singletonList ( key ) ; } <nl> | K _ IN ' ( ' keys = termList { keyList = $ keys . items ; } ' ) ' ) <nl> ) ? <nl> { <nl> - return new DeleteStatement ( columnsList , $ columnFamily . text , key _ alias . getText ( ) , keyList , attrs ) ; <nl> + return new DeleteStatement ( columnsList , $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , keyList , attrs ) ; <nl> } <nl> ; <nl> <nl> @ @ - 481 , 8 + 482 , 8 @ @ relation returns [ Relation rel ] <nl> ; <nl> <nl> / / TRUNCATE < CF > ; <nl> - truncateStatement returns [ String cfam ] <nl> - : K _ TRUNCATE columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) { $ cfam = $ columnFamily . text ; } endStmnt <nl> + truncateStatement returns [ Pair < String , String > cf ] <nl> + : K _ TRUNCATE ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) { $ cf = new Pair < String , String > ( $ keyspace . text , $ columnFamily . text ) ; } endStmnt <nl> ; <nl> <nl> endStmnt <nl> diff - - git a / src / java / org / apache / cassandra / cql / DeleteStatement . java b / src / java / org / apache / cassandra / cql / DeleteStatement . java <nl> index 630a242 . . eb46076 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / DeleteStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql / DeleteStatement . java <nl> @ @ - 46 , 9 + 46 , 9 @ @ public class DeleteStatement extends AbstractModification <nl> private List < Term > columns ; <nl> private List < Term > keys ; <nl> <nl> - public DeleteStatement ( List < Term > columns , String columnFamily , String keyName , List < Term > keys , Attributes attrs ) <nl> + public DeleteStatement ( List < Term > columns , String keyspace , String columnFamily , String keyName , List < Term > keys , Attributes attrs ) <nl> { <nl> - super ( columnFamily , keyName , attrs ) ; <nl> + super ( keyspace , columnFamily , keyName , attrs ) ; <nl> <nl> this . columns = columns ; <nl> this . keys = keys ; <nl> @ @ - 118 , 8 + 118 , 9 @ @ public class DeleteStatement extends AbstractModification <nl> <nl> public String toString ( ) <nl> { <nl> - return String . format ( " DeleteStatement ( columns = % s , columnFamily = % s , consistency = % s keys = % s ) " , <nl> + return String . format ( " DeleteStatement ( columns = % s , keyspace = % s , columnFamily = % s , consistency = % s keys = % s ) " , <nl> columns , <nl> + keyspace , <nl> columnFamily , <nl> cLevel , <nl> keys ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql / QueryProcessor . java b / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> index a221e24 . . abc999a 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> @ @ - 53 , 6 + 53 , 7 @ @ import org . apache . cassandra . thrift . * ; <nl> import org . apache . cassandra . thrift . Column ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . apache . cassandra . utils . Pair ; <nl> <nl> import com . google . common . base . Predicates ; <nl> import com . google . common . collect . Maps ; <nl> @ @ - 265 , 16 + 266 , 18 @ @ public class QueryProcessor <nl> private static void batchUpdate ( ClientState clientState , List < UpdateStatement > updateStatements , ConsistencyLevel consistency ) <nl> throws InvalidRequestException , UnavailableException , TimedOutException <nl> { <nl> - String keyspace = clientState . getKeyspace ( ) ; <nl> + String globalKeyspace = clientState . getKeyspace ( ) ; <nl> List < IMutation > rowMutations = new ArrayList < IMutation > ( ) ; <nl> List < String > cfamsSeen = new ArrayList < String > ( ) ; <nl> <nl> for ( UpdateStatement update : updateStatements ) <nl> { <nl> + String keyspace = update . keyspace = = null ? globalKeyspace : update . keyspace ; <nl> + <nl> / / Avoid unnecessary authorizations . <nl> if ( ! ( cfamsSeen . contains ( update . getColumnFamily ( ) ) ) ) <nl> { <nl> - clientState . hasColumnFamilyAccess ( update . getColumnFamily ( ) , Permission . WRITE ) ; <nl> + clientState . hasColumnFamilyAccess ( keyspace , update . getColumnFamily ( ) , Permission . WRITE ) ; <nl> cfamsSeen . add ( update . getColumnFamily ( ) ) ; <nl> } <nl> <nl> @ @ - 705 , 13 + 708 , 15 @ @ public class QueryProcessor <nl> return result ; <nl> <nl> case TRUNCATE : <nl> - String columnFamily = ( String ) statement . statement ; <nl> - validateColumnFamily ( keyspace , columnFamily ) ; <nl> - clientState . hasColumnFamilyAccess ( columnFamily , Permission . WRITE ) ; <nl> + Pair < String , String > columnFamily = ( Pair < String , String > ) statement . statement ; <nl> + keyspace = columnFamily . left = = null ? clientState . getKeyspace ( ) : columnFamily . left ; <nl> + <nl> + validateColumnFamily ( keyspace , columnFamily . right ) ; <nl> + clientState . hasColumnFamilyAccess ( keyspace , columnFamily . right , Permission . WRITE ) ; <nl> <nl> try <nl> { <nl> - StorageProxy . truncateBlocking ( keyspace , columnFamily ) ; <nl> + StorageProxy . truncateBlocking ( keyspace , columnFamily . right ) ; <nl> } <nl> catch ( TimeoutException e ) <nl> { <nl> @ @ - 727 , 6 + 732 , 9 @ @ public class QueryProcessor <nl> <nl> case DELETE : <nl> DeleteStatement delete = ( DeleteStatement ) statement . statement ; <nl> + <nl> + keyspace = delete . keyspace = = null ? clientState . getKeyspace ( ) : delete . keyspace ; <nl> + <nl> try <nl> { <nl> StorageProxy . mutate ( delete . prepareRowMutations ( keyspace , clientState ) , delete . getConsistencyLevel ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql / UpdateStatement . java b / src / java / org / apache / cassandra / cql / UpdateStatement . java <nl> index 7783198 . . 128b261 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / UpdateStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql / UpdateStatement . java <nl> @ @ - 37 , 7 + 37 , 6 @ @ import org . apache . cassandra . thrift . InvalidRequestException ; <nl> <nl> import static org . apache . cassandra . cql . QueryProcessor . validateColumn ; <nl> <nl> - import static org . apache . cassandra . cql . Operation . OperationType ; <nl> import static org . apache . cassandra . thrift . ThriftValidation . validateColumnFamily ; <nl> import static org . apache . cassandra . thrift . ThriftValidation . validateCommutativeForWrite ; <nl> <nl> @ @ - 54 , 20 + 53 , 22 @ @ public class UpdateStatement extends AbstractModification <nl> / * * <nl> * Creates a new UpdateStatement from a column family name , columns map , consistency <nl> * level , and key term . <nl> - * <nl> + * <nl> + * @ param keyspace Keyspace ( optional ) <nl> * @ param columnFamily column family name <nl> * @ param keyName alias key name <nl> * @ param columns a map of column name / values pairs <nl> * @ param keys the keys to update <nl> * @ param attrs additional attributes for statement ( CL , timestamp , timeToLive ) <nl> * / <nl> - public UpdateStatement ( String columnFamily , <nl> + public UpdateStatement ( String keyspace , <nl> + String columnFamily , <nl> String keyName , <nl> Map < Term , Operation > columns , <nl> List < Term > keys , <nl> Attributes attrs ) <nl> { <nl> - super ( columnFamily , keyName , attrs ) ; <nl> + super ( keyspace , columnFamily , keyName , attrs ) ; <nl> <nl> this . columns = columns ; <nl> this . keys = keys ; <nl> @ @ - 77 , 7 + 78 , 8 @ @ public class UpdateStatement extends AbstractModification <nl> * Creates a new UpdateStatement from a column family name , a consistency level , <nl> * key , and lists of column names and values . It is intended for use with the <nl> * alternate update format , < code > INSERT < / code > . <nl> - * <nl> + * <nl> + * @ param keyspace Keyspace ( optional ) <nl> * @ param columnFamily column family name <nl> * @ param keyName alias key name <nl> * @ param columnNames list of column names <nl> @ @ - 85 , 14 + 87 , 15 @ @ public class UpdateStatement extends AbstractModification <nl> * @ param keys the keys to update <nl> * @ param attrs additional attributes for statement ( CL , timestamp , timeToLive ) <nl> * / <nl> - public UpdateStatement ( String columnFamily , <nl> + public UpdateStatement ( String keyspace , <nl> + String columnFamily , <nl> String keyName , <nl> List < Term > columnNames , <nl> List < Term > columnValues , <nl> List < Term > keys , <nl> Attributes attrs ) <nl> { <nl> - super ( columnFamily , keyName , attrs ) ; <nl> + super ( keyspace , columnFamily , keyName , attrs ) ; <nl> <nl> this . columnNames = columnNames ; <nl> this . columnValues = columnValues ; <nl> @ @ - 266 , 7 + 269 , 8 @ @ public class UpdateStatement extends AbstractModification <nl> <nl> public String toString ( ) <nl> { <nl> - return String . format ( " UpdateStatement ( columnFamily = % s , keys = % s , columns = % s , consistency = % s , timestamp = % s , timeToLive = % s ) " , <nl> + return String . format ( " UpdateStatement ( keyspace = % s , columnFamily = % s , keys = % s , columns = % s , consistency = % s , timestamp = % s , timeToLive = % s ) " , <nl> + keyspace , <nl> columnFamily , <nl> keys , <nl> columns ,

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 028128d . . 962bd4c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 1 
 + * Add duration mode to cassandra - stress ( CASSANDRA - 7468 ) 
 * Add listen _ interface and rpc _ interface options ( CASSANDRA - 7417 ) 
 * Fail to start if commit log replay detects a problem ( CASSANDRA - 7125 ) 
 * Improve schema merge performance ( CASSANDRA - 7444 ) 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressAction . java b / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 index 2105a72 . . d2253f8 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 @ @ - 68 , 7 + 68 , 8 @ @ public class StressAction implements Runnable 
 if ( settings . rate . auto ) 
 success = runAuto ( ) ; 
 else 
 - success = null ! = run ( settings . command . getFactory ( settings ) , settings . rate . threadCount , settings . command . count , output ) ; 
 + success = null ! = run ( settings . command . getFactory ( settings ) , settings . rate . threadCount , settings . command . count , 
 + settings . command . duration , settings . command . durationUnits , output ) ; 
 
 if ( success ) 
 output . println ( " END " ) ; 
 @ @ - 89 , 7 + 90 , 7 @ @ public class StressAction implements Runnable 
 / / we need to warm up all the nodes in the cluster ideally , but we may not be the only stress instance ; 
 / / so warm up all the nodes we ' re speaking to only . 
 output . println ( String . format ( " Warming up % s with % d iterations . . . " , single . desc ( ) , iterations ) ) ; 
 - run ( single , 20 , iterations , warmupOutput ) ; 
 + run ( single , 20 , iterations , 0 , null , warmupOutput ) ; 
 } 
 } 
 
 @ @ - 105 , 7 + 106 , 8 @ @ public class StressAction implements Runnable 
 { 
 output . println ( String . format ( " Running with % d threadCount " , threadCount ) ) ; 
 
 - StressMetrics result = run ( settings . command . getFactory ( settings ) , threadCount , settings . command . count , output ) ; 
 + StressMetrics result = run ( settings . command . getFactory ( settings ) , threadCount , settings . command . count , 
 + settings . command . duration , settings . command . durationUnits , output ) ; 
 if ( result = = null ) 
 return false ; 
 results . add ( result ) ; 
 @ @ - 162 , 13 + 164 , 14 @ @ public class StressAction implements Runnable 
 return improvement / count ; 
 } 
 
 - private StressMetrics run ( OpDistributionFactory operations , int threadCount , long opCount , PrintStream output ) 
 + private StressMetrics run ( OpDistributionFactory operations , int threadCount , long opCount , long duration , TimeUnit durationUnits , PrintStream output ) 
 { 
 - 
 output . println ( String . format ( " Running % s with % d threads % s " , 
 operations . desc ( ) , 
 threadCount , 
 - opCount > 0 ? " for " + opCount + " iterations " : " until stderr of mean < " + settings . command . targetUncertainty ) ) ; 
 + durationUnits ! = null ? duration + " " + durationUnits . toString ( ) . toLowerCase ( ) 
 + : opCount > 0 ? " for " + opCount + " iteration " 
 + : " until stderr of mean < " + settings . command . targetUncertainty ) ) ; 
 final WorkQueue workQueue ; 
 if ( opCount < 0 ) 
 workQueue = new ContinuousWorkQueue ( 50 ) ; 
 @ @ - 193 , 7 + 196 , 12 @ @ public class StressAction implements Runnable 
 
 metrics . start ( ) ; 
 
 - if ( opCount < = 0 ) 
 + if ( durationUnits ! = null ) 
 + { 
 + Uninterruptibles . sleepUninterruptibly ( duration , durationUnits ) ; 
 + workQueue . stop ( ) ; 
 + } 
 + else if ( opCount < = 0 ) 
 { 
 try 
 { 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java b / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java 
 index 7e5c1b6 . . 717dbb8 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java 
 @ @ - 25 , 9 + 25 , 10 @ @ import java . io . PrintStream ; 
 import java . util . List ; 
 import java . util . concurrent . CountDownLatch ; 
 import java . util . concurrent . ThreadFactory ; 
 + import java . util . concurrent . TimeUnit ; 
 
 + import com . google . common . util . concurrent . Uninterruptibles ; 
 import org . apache . commons . lang3 . time . DurationFormatUtils ; 
 - 
 import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 import org . apache . cassandra . stress . util . Timing ; 
 import org . apache . cassandra . stress . util . TimingInterval ; 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommand . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommand . java 
 index 032f00c . . 7715e48 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommand . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommand . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . io . Serializable ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 import java . util . Map ; 
 + import java . util . concurrent . TimeUnit ; 
 
 import org . apache . cassandra . stress . operations . OpDistributionFactory ; 
 import org . apache . cassandra . thrift . ConsistencyLevel ; 
 @ @ - 35 , 6 + 36 , 8 @ @ public abstract class SettingsCommand implements Serializable 
 
 public final Command type ; 
 public final long count ; 
 + public final long duration ; 
 + public final TimeUnit durationUnits ; 
 public final int tries ; 
 public final boolean ignoreErrors ; 
 public final boolean noWarmup ; 
 @ @ - 49 , 11 + 52 , 12 @ @ public abstract class SettingsCommand implements Serializable 
 { 
 this ( type , ( Options ) options , 
 options instanceof Count ? ( Count ) options : null , 
 + options instanceof Duration ? ( Duration ) options : null , 
 options instanceof Uncertainty ? ( Uncertainty ) options : null 
 ) ; 
 } 
 
 - public SettingsCommand ( Command type , Options options , Count count , Uncertainty uncertainty ) 
 + public SettingsCommand ( Command type , Options options , Count count , Duration duration , Uncertainty uncertainty ) 
 { 
 this . type = type ; 
 this . tries = Math . max ( 1 , Integer . parseInt ( options . retries . value ( ) ) + 1 ) ; 
 @ @ - 63 , 6 + 67 , 30 @ @ public abstract class SettingsCommand implements Serializable 
 if ( count ! = null ) 
 { 
 this . count = Long . parseLong ( count . count . value ( ) ) ; 
 + this . duration = 0 ; 
 + this . durationUnits = null ; 
 + this . targetUncertainty = - 1 ; 
 + this . minimumUncertaintyMeasurements = - 1 ; 
 + this . maximumUncertaintyMeasurements = - 1 ; 
 + } 
 + else if ( duration ! = null ) 
 + { 
 + this . count = - 1 ; 
 + this . duration = Long . parseLong ( duration . duration . value ( ) . substring ( 0 , duration . duration . value ( ) . length ( ) - 1 ) ) ; 
 + switch ( duration . duration . value ( ) . toLowerCase ( ) . charAt ( duration . duration . value ( ) . length ( ) - 1 ) ) 
 + { 
 + case ' s ' : 
 + this . durationUnits = TimeUnit . SECONDS ; 
 + break ; 
 + case ' m ' : 
 + this . durationUnits = TimeUnit . MINUTES ; 
 + break ; 
 + case ' h ' : 
 + this . durationUnits = TimeUnit . HOURS ; 
 + break ; 
 + default : 
 + throw new IllegalStateException ( ) ; 
 + } 
 this . targetUncertainty = - 1 ; 
 this . minimumUncertaintyMeasurements = - 1 ; 
 this . maximumUncertaintyMeasurements = - 1 ; 
 @ @ - 70 , 6 + 98 , 8 @ @ public abstract class SettingsCommand implements Serializable 
 else 
 { 
 this . count = - 1 ; 
 + this . duration = 0 ; 
 + this . durationUnits = null ; 
 this . targetUncertainty = Double . parseDouble ( uncertainty . uncertainty . value ( ) ) ; 
 this . minimumUncertaintyMeasurements = Integer . parseInt ( uncertainty . minMeasurements . value ( ) ) ; 
 this . maximumUncertaintyMeasurements = Integer . parseInt ( uncertainty . maxMeasurements . value ( ) ) ; 
 @ @ - 97 , 6 + 127 , 16 @ @ public abstract class SettingsCommand implements Serializable 
 } 
 } 
 
 + static class Duration extends Options 
 + { 
 + final OptionSimple duration = new OptionSimple ( " duration = " , " [ 0 - 9 ] + [ smh ] " , null , " Time to run in ( in seconds , minutes or hours ) " , true ) ; 
 + @ Override 
 + public List < ? extends Option > options ( ) 
 + { 
 + return Arrays . asList ( duration , retries , ignoreErrors , consistencyLevel , atOnce ) ; 
 + } 
 + } 
 + 
 static class Uncertainty extends Options 
 { 
 final OptionSimple uncertainty = new OptionSimple ( " err < " , " 0 \ \ . [ 0 - 9 ] + " , " 0 . 02 " , " Run until the standard error of the mean is below this fraction " , false ) ; 
 @ @ - 138 , 5 + 178 , 37 @ @ public abstract class SettingsCommand implements Serializable 
 return null ; 
 } 
 
 - } 
 + / * static SettingsCommand build ( Command type , String [ ] params ) 
 + { 
 + GroupedOptions options = GroupedOptions . select ( params , new Count ( ) , new Duration ( ) , new Uncertainty ( ) ) ; 
 + if ( options = = null ) 
 + { 
 + printHelp ( type ) ; 
 + System . out . println ( " Invalid " + type + " options provided , see output for valid options " ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + return new SettingsCommand ( type , options ) ; 
 + } * / 
 + 
 + static void printHelp ( Command type ) 
 + { 
 + printHelp ( type . toString ( ) . toLowerCase ( ) ) ; 
 + } 
 
 + static void printHelp ( String type ) 
 + { 
 + GroupedOptions . printOptions ( System . out , type . toLowerCase ( ) , new Uncertainty ( ) , new Count ( ) , new Duration ( ) ) ; 
 + } 
 + 
 + static Runnable helpPrinter ( final Command type ) 
 + { 
 + return new Runnable ( ) 
 + { 
 + @ Override 
 + public void run ( ) 
 + { 
 + printHelp ( type ) ; 
 + } 
 + } ; 
 + } 
 + } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefined . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefined . java 
 index ac113d1 . . 64dc054 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefined . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefined . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . stress . operations . FixedOpDistribution ; 
 import org . apache . cassandra . stress . operations . OpDistribution ; 
 import org . apache . cassandra . stress . operations . OpDistributionFactory ; 
 import org . apache . cassandra . stress . operations . predefined . PredefinedOperation ; 
 + import org . apache . cassandra . stress . settings . SettingsCommandPreDefinedMixed . Options ; 
 import org . apache . cassandra . stress . util . Timer ; 
 
 / / Settings unique to the mixed command type 
 @ @ - 111 , 7 + 112 , 8 @ @ public class SettingsCommandPreDefined extends SettingsCommand 
 { 
 GroupedOptions options = GroupedOptions . select ( params , 
 new Options ( new Uncertainty ( ) ) , 
 - new Options ( new Count ( ) ) ) ; 
 + new Options ( new Count ( ) ) , 
 + new Options ( new Duration ( ) ) ) ; 
 if ( options = = null ) 
 { 
 printHelp ( type ) ; 
 @ @ - 128 , 7 + 130 , 7 @ @ public class SettingsCommandPreDefined extends SettingsCommand 
 
 static void printHelp ( String type ) 
 { 
 - GroupedOptions . printOptions ( System . out , type . toLowerCase ( ) , new Uncertainty ( ) , new Count ( ) ) ; 
 + GroupedOptions . printOptions ( System . out , type . toLowerCase ( ) , new Uncertainty ( ) , new Count ( ) , new Duration ( ) ) ; 
 } 
 
 static Runnable helpPrinter ( final Command type ) 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefinedMixed . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefinedMixed . java 
 index e5d4f80 . . 858534b 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefinedMixed . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandPreDefinedMixed . java 
 @ @ - 120 , 7 + 120 , 8 @ @ public class SettingsCommandPreDefinedMixed extends SettingsCommandPreDefined 
 { 
 GroupedOptions options = GroupedOptions . select ( params , 
 new Options ( new SettingsCommand . Uncertainty ( ) ) , 
 - new Options ( new SettingsCommand . Count ( ) ) ) ; 
 + new Options ( new SettingsCommand . Count ( ) ) , 
 + new Options ( new SettingsCommand . Duration ( ) ) ) ; 
 if ( options = = null ) 
 { 
 printHelp ( ) ; 
 @ @ - 134 , 7 + 135 , 8 @ @ public class SettingsCommandPreDefinedMixed extends SettingsCommandPreDefined 
 { 
 GroupedOptions . printOptions ( System . out , " mixed " , 
 new Options ( new SettingsCommand . Uncertainty ( ) ) , 
 - new Options ( new SettingsCommand . Count ( ) ) ) ; 
 + new Options ( new SettingsCommand . Count ( ) ) , 
 + new Options ( new SettingsCommand . Duration ( ) ) ) ; 
 } 
 
 public static Runnable helpPrinter ( ) 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandUser . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandUser . java 
 index f36296e . . 6463783 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandUser . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommandUser . java 
 @ @ - 118 , 7 + 118 , 8 @ @ public class SettingsCommandUser extends SettingsCommand 
 { 
 GroupedOptions . printOptions ( System . out , " user " , 
 new Options ( new Uncertainty ( ) ) , 
 - new Options ( new Count ( ) ) ) ; 
 + new Options ( new Count ( ) ) , 
 + new Options ( new Duration ( ) ) ) ; 
 } 
 
 public static Runnable helpPrinter ( )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7c5a752 . . d0e485b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 3 , 6 + 3 , 8 @ @ 
 * filter out unavailable cipher suites when using encryption ( CASSANDRA - 3178 ) 
 * ( HADOOP ) add old - style api support for CFIF and CFRR ( CASSANDRA - 2799 ) 
 * Support TimeUUIDType column names in Stress . java tool ( CASSANDRA - 3541 ) 
 + * ( CQL ) INSERT / UPDATE / DELETE / TRUNCATE commands should allow CF names to 
 + be qualified by keyspace ( CASSANDRA - 3419 ) 
 
 
 1 . 0 . 5 
 diff - - git a / src / java / org / apache / cassandra / cql / AbstractModification . java b / src / java / org / apache / cassandra / cql / AbstractModification . java 
 index d5503c1 . . 3af10cc 100644 
 - - - a / src / java / org / apache / cassandra / cql / AbstractModification . java 
 + + + b / src / java / org / apache / cassandra / cql / AbstractModification . java 
 @ @ - 31 , 19 + 31 , 21 @ @ public abstract class AbstractModification 
 { 
 public static final ConsistencyLevel defaultConsistency = ConsistencyLevel . ONE ; 
 
 + protected final String keyspace ; 
 protected final String columnFamily ; 
 protected final ConsistencyLevel cLevel ; 
 protected final Long timestamp ; 
 protected final int timeToLive ; 
 protected final String keyName ; 
 
 - public AbstractModification ( String columnFamily , String keyAlias , Attributes attrs ) 
 + public AbstractModification ( String keyspace , String columnFamily , String keyAlias , Attributes attrs ) 
 { 
 - this ( columnFamily , keyAlias , attrs . getConsistencyLevel ( ) , attrs . getTimestamp ( ) , attrs . getTimeToLive ( ) ) ; 
 + this ( keyspace , columnFamily , keyAlias , attrs . getConsistencyLevel ( ) , attrs . getTimestamp ( ) , attrs . getTimeToLive ( ) ) ; 
 } 
 
 - public AbstractModification ( String columnFamily , String keyAlias , ConsistencyLevel cLevel , Long timestamp , int timeToLive ) 
 + public AbstractModification ( String keyspace , String columnFamily , String keyAlias , ConsistencyLevel cLevel , Long timestamp , int timeToLive ) 
 { 
 + this . keyspace = keyspace ; 
 this . columnFamily = columnFamily ; 
 this . cLevel = cLevel ; 
 this . timestamp = timestamp ; 
 @ @ - 51 , 6 + 53 , 11 @ @ public abstract class AbstractModification 
 this . keyName = keyAlias . toUpperCase ( ) ; 
 } 
 
 + public String getKeyspace ( ) 
 + { 
 + return keyspace ; 
 + } 
 + 
 public String getColumnFamily ( ) 
 { 
 return columnFamily ; 
 diff - - git a / src / java / org / apache / cassandra / cql / Cql . g b / src / java / org / apache / cassandra / cql / Cql . g 
 index 4e83392 . . 6971381 100644 
 - - - a / src / java / org / apache / cassandra / cql / Cql . g 
 + + + b / src / java / org / apache / cassandra / cql / Cql . g 
 @ @ - 33 , 6 + 33 , 7 @ @ options { 
 import java . util . Collections ; 
 import java . util . List ; 
 import java . util . ArrayList ; 
 + import org . apache . cassandra . utils . Pair ; 
 import org . apache . cassandra . thrift . ConsistencyLevel ; 
 import org . apache . cassandra . thrift . InvalidRequestException ; 
 
 @ @ - 115 , 7 + 116 , 7 @ @ query returns [ CQLStatement stmnt ] 
 | updateStatement endStmnt { $ stmnt = new CQLStatement ( StatementType . UPDATE , $ updateStatement . expr ) ; } 
 | batchStatement { $ stmnt = new CQLStatement ( StatementType . BATCH , $ batchStatement . expr ) ; } 
 | useStatement { $ stmnt = new CQLStatement ( StatementType . USE , $ useStatement . keyspace ) ; } 
 - | truncateStatement { $ stmnt = new CQLStatement ( StatementType . TRUNCATE , $ truncateStatement . cfam ) ; } 
 + | truncateStatement { $ stmnt = new CQLStatement ( StatementType . TRUNCATE , $ truncateStatement . cf ) ; } 
 | deleteStatement endStmnt { $ stmnt = new CQLStatement ( StatementType . DELETE , $ deleteStatement . expr ) ; } 
 | createKeyspaceStatement { $ stmnt = new CQLStatement ( StatementType . CREATE _ KEYSPACE , $ createKeyspaceStatement . expr ) ; } 
 | createColumnFamilyStatement { $ stmnt = new CQLStatement ( StatementType . CREATE _ COLUMNFAMILY , $ createColumnFamilyStatement . expr ) ; } 
 @ @ - 219 , 13 + 220 , 13 @ @ insertStatement returns [ UpdateStatement expr ] 
 List < Term > columnNames = new ArrayList < Term > ( ) ; 
 List < Term > columnValues = new ArrayList < Term > ( ) ; 
 } 
 - K _ INSERT K _ INTO columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 + K _ INSERT K _ INTO ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 ' ( ' key _ alias = term ( ' , ' column _ name = term { columnNames . add ( $ column _ name . item ) ; } ) + ' ) ' 
 K _ VALUES 
 ' ( ' key = term ( ' , ' column _ value = term { columnValues . add ( $ column _ value . item ) ; } ) + ' ) ' 
 ( usingClause [ attrs ] ) ? 
 { 
 - return new UpdateStatement ( $ columnFamily . text , key _ alias . getText ( ) , columnNames , columnValues , Collections . singletonList ( key ) , attrs ) ; 
 + return new UpdateStatement ( $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , columnNames , columnValues , Collections . singletonList ( key ) , attrs ) ; 
 } 
 ; 
 
 @ @ - 311 , 14 + 312 , 14 @ @ updateStatement returns [ UpdateStatement expr ] 
 Map < Term , Operation > columns = new HashMap < Term , Operation > ( ) ; 
 List < Term > keyList = null ; 
 } 
 - K _ UPDATE columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 + K _ UPDATE ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 ( usingClause [ attrs ] ) ? 
 K _ SET termPairWithOperation [ columns ] ( ' , ' termPairWithOperation [ columns ] ) * 
 K _ WHERE ( key _ alias = term ( ' = ' key = term { keyList = Collections . singletonList ( key ) ; } 
 | 
 K _ IN ' ( ' keys = termList { keyList = $ keys . items ; } ' ) ' ) ) 
 { 
 - return new UpdateStatement ( $ columnFamily . text , key _ alias . getText ( ) , columns , keyList , attrs ) ; 
 + return new UpdateStatement ( $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , columns , keyList , attrs ) ; 
 } 
 ; 
 
 @ @ - 340 , 13 + 341 , 13 @ @ deleteStatement returns [ DeleteStatement expr ] 
 } 
 K _ DELETE 
 ( cols = termList { columnsList = $ cols . items ; } ) ? 
 - K _ FROM columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 + K _ FROM ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 ( usingClauseDelete [ attrs ] ) ? 
 ( K _ WHERE key _ alias = term ( ' = ' key = term { keyList = Collections . singletonList ( key ) ; } 
 | K _ IN ' ( ' keys = termList { keyList = $ keys . items ; } ' ) ' ) 
 ) ? 
 { 
 - return new DeleteStatement ( columnsList , $ columnFamily . text , key _ alias . getText ( ) , keyList , attrs ) ; 
 + return new DeleteStatement ( columnsList , $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , keyList , attrs ) ; 
 } 
 ; 
 
 @ @ - 481 , 8 + 482 , 8 @ @ relation returns [ Relation rel ] 
 ; 
 
 / / TRUNCATE < CF > ; 
 - truncateStatement returns [ String cfam ] 
 - : K _ TRUNCATE columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) { $ cfam = $ columnFamily . text ; } endStmnt 
 + truncateStatement returns [ Pair < String , String > cf ] 
 + : K _ TRUNCATE ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) { $ cf = new Pair < String , String > ( $ keyspace . text , $ columnFamily . text ) ; } endStmnt 
 ; 
 
 endStmnt 
 diff - - git a / src / java / org / apache / cassandra / cql / DeleteStatement . java b / src / java / org / apache / cassandra / cql / DeleteStatement . java 
 index 630a242 . . eb46076 100644 
 - - - a / src / java / org / apache / cassandra / cql / DeleteStatement . java 
 + + + b / src / java / org / apache / cassandra / cql / DeleteStatement . java 
 @ @ - 46 , 9 + 46 , 9 @ @ public class DeleteStatement extends AbstractModification 
 private List < Term > columns ; 
 private List < Term > keys ; 
 
 - public DeleteStatement ( List < Term > columns , String columnFamily , String keyName , List < Term > keys , Attributes attrs ) 
 + public DeleteStatement ( List < Term > columns , String keyspace , String columnFamily , String keyName , List < Term > keys , Attributes attrs ) 
 { 
 - super ( columnFamily , keyName , attrs ) ; 
 + super ( keyspace , columnFamily , keyName , attrs ) ; 
 
 this . columns = columns ; 
 this . keys = keys ; 
 @ @ - 118 , 8 + 118 , 9 @ @ public class DeleteStatement extends AbstractModification 
 
 public String toString ( ) 
 { 
 - return String . format ( " DeleteStatement ( columns = % s , columnFamily = % s , consistency = % s keys = % s ) " , 
 + return String . format ( " DeleteStatement ( columns = % s , keyspace = % s , columnFamily = % s , consistency = % s keys = % s ) " , 
 columns , 
 + keyspace , 
 columnFamily , 
 cLevel , 
 keys ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql / QueryProcessor . java b / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 index a221e24 . . abc999a 100644 
 - - - a / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 @ @ - 53 , 6 + 53 , 7 @ @ import org . apache . cassandra . thrift . * ; 
 import org . apache . cassandra . thrift . Column ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 + import org . apache . cassandra . utils . Pair ; 
 
 import com . google . common . base . Predicates ; 
 import com . google . common . collect . Maps ; 
 @ @ - 265 , 16 + 266 , 18 @ @ public class QueryProcessor 
 private static void batchUpdate ( ClientState clientState , List < UpdateStatement > updateStatements , ConsistencyLevel consistency ) 
 throws InvalidRequestException , UnavailableException , TimedOutException 
 { 
 - String keyspace = clientState . getKeyspace ( ) ; 
 + String globalKeyspace = clientState . getKeyspace ( ) ; 
 List < IMutation > rowMutations = new ArrayList < IMutation > ( ) ; 
 List < String > cfamsSeen = new ArrayList < String > ( ) ; 
 
 for ( UpdateStatement update : updateStatements ) 
 { 
 + String keyspace = update . keyspace = = null ? globalKeyspace : update . keyspace ; 
 + 
 / / Avoid unnecessary authorizations . 
 if ( ! ( cfamsSeen . contains ( update . getColumnFamily ( ) ) ) ) 
 { 
 - clientState . hasColumnFamilyAccess ( update . getColumnFamily ( ) , Permission . WRITE ) ; 
 + clientState . hasColumnFamilyAccess ( keyspace , update . getColumnFamily ( ) , Permission . WRITE ) ; 
 cfamsSeen . add ( update . getColumnFamily ( ) ) ; 
 } 
 
 @ @ - 705 , 13 + 708 , 15 @ @ public class QueryProcessor 
 return result ; 
 
 case TRUNCATE : 
 - String columnFamily = ( String ) statement . statement ; 
 - validateColumnFamily ( keyspace , columnFamily ) ; 
 - clientState . hasColumnFamilyAccess ( columnFamily , Permission . WRITE ) ; 
 + Pair < String , String > columnFamily = ( Pair < String , String > ) statement . statement ; 
 + keyspace = columnFamily . left = = null ? clientState . getKeyspace ( ) : columnFamily . left ; 
 + 
 + validateColumnFamily ( keyspace , columnFamily . right ) ; 
 + clientState . hasColumnFamilyAccess ( keyspace , columnFamily . right , Permission . WRITE ) ; 
 
 try 
 { 
 - StorageProxy . truncateBlocking ( keyspace , columnFamily ) ; 
 + StorageProxy . truncateBlocking ( keyspace , columnFamily . right ) ; 
 } 
 catch ( TimeoutException e ) 
 { 
 @ @ - 727 , 6 + 732 , 9 @ @ public class QueryProcessor 
 
 case DELETE : 
 DeleteStatement delete = ( DeleteStatement ) statement . statement ; 
 + 
 + keyspace = delete . keyspace = = null ? clientState . getKeyspace ( ) : delete . keyspace ; 
 + 
 try 
 { 
 StorageProxy . mutate ( delete . prepareRowMutations ( keyspace , clientState ) , delete . getConsistencyLevel ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql / UpdateStatement . java b / src / java / org / apache / cassandra / cql / UpdateStatement . java 
 index 7783198 . . 128b261 100644 
 - - - a / src / java / org / apache / cassandra / cql / UpdateStatement . java 
 + + + b / src / java / org / apache / cassandra / cql / UpdateStatement . java 
 @ @ - 37 , 7 + 37 , 6 @ @ import org . apache . cassandra . thrift . InvalidRequestException ; 
 
 import static org . apache . cassandra . cql . QueryProcessor . validateColumn ; 
 
 - import static org . apache . cassandra . cql . Operation . OperationType ; 
 import static org . apache . cassandra . thrift . ThriftValidation . validateColumnFamily ; 
 import static org . apache . cassandra . thrift . ThriftValidation . validateCommutativeForWrite ; 
 
 @ @ - 54 , 20 + 53 , 22 @ @ public class UpdateStatement extends AbstractModification 
 / * * 
 * Creates a new UpdateStatement from a column family name , columns map , consistency 
 * level , and key term . 
 - * 
 + * 
 + * @ param keyspace Keyspace ( optional ) 
 * @ param columnFamily column family name 
 * @ param keyName alias key name 
 * @ param columns a map of column name / values pairs 
 * @ param keys the keys to update 
 * @ param attrs additional attributes for statement ( CL , timestamp , timeToLive ) 
 * / 
 - public UpdateStatement ( String columnFamily , 
 + public UpdateStatement ( String keyspace , 
 + String columnFamily , 
 String keyName , 
 Map < Term , Operation > columns , 
 List < Term > keys , 
 Attributes attrs ) 
 { 
 - super ( columnFamily , keyName , attrs ) ; 
 + super ( keyspace , columnFamily , keyName , attrs ) ; 
 
 this . columns = columns ; 
 this . keys = keys ; 
 @ @ - 77 , 7 + 78 , 8 @ @ public class UpdateStatement extends AbstractModification 
 * Creates a new UpdateStatement from a column family name , a consistency level , 
 * key , and lists of column names and values . It is intended for use with the 
 * alternate update format , < code > INSERT < / code > . 
 - * 
 + * 
 + * @ param keyspace Keyspace ( optional ) 
 * @ param columnFamily column family name 
 * @ param keyName alias key name 
 * @ param columnNames list of column names 
 @ @ - 85 , 14 + 87 , 15 @ @ public class UpdateStatement extends AbstractModification 
 * @ param keys the keys to update 
 * @ param attrs additional attributes for statement ( CL , timestamp , timeToLive ) 
 * / 
 - public UpdateStatement ( String columnFamily , 
 + public UpdateStatement ( String keyspace , 
 + String columnFamily , 
 String keyName , 
 List < Term > columnNames , 
 List < Term > columnValues , 
 List < Term > keys , 
 Attributes attrs ) 
 { 
 - super ( columnFamily , keyName , attrs ) ; 
 + super ( keyspace , columnFamily , keyName , attrs ) ; 
 
 this . columnNames = columnNames ; 
 this . columnValues = columnValues ; 
 @ @ - 266 , 7 + 269 , 8 @ @ public class UpdateStatement extends AbstractModification 
 
 public String toString ( ) 
 { 
 - return String . format ( " UpdateStatement ( columnFamily = % s , keys = % s , columns = % s , consistency = % s , timestamp = % s , timeToLive = % s ) " , 
 + return String . format ( " UpdateStatement ( keyspace = % s , columnFamily = % s , keys = % s , columns = % s , consistency = % s , timestamp = % s , timeToLive = % s ) " , 
 + keyspace , 
 columnFamily , 
 keys , 
 columns ,
