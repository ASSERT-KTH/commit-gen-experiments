BLEU SCORE: 0.04767707020457096

TEST MSG: Remove BTree . Builder Recycler to reduce memory usage
GENERATED MSG: merge from 2 . 1

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2e77d2e . . 7f4b655 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 11 . 3 <nl> + * Remove BTree . Builder Recycler to reduce memory usage ( CASSANDRA - 13929 ) <nl> * Reduce nodetool GC thread count ( CASSANDRA - 14475 ) <nl> * Fix New SASI view creation during Index Redistribution ( CASSANDRA - 14055 ) <nl> * Remove string formatting lines from BufferPool hot path ( CASSANDRA - 14416 ) <nl> diff - - git a / build . xml b / build . xml <nl> index 4edfbb1 . . 54c5372 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 422 , 8 + 422 , 8 @ @ <nl> < dependency groupId = " org . jboss . byteman " artifactId = " byteman - bmunit " version = " $ { byteman . version } " / > <nl> <nl> <nl> - < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - core " version = " 1 . 13 " / > <nl> - < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - generator - annprocess " version = " 1 . 13 " / > <nl> + < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - core " version = " 1 . 21 " / > <nl> + < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - generator - annprocess " version = " 1 . 21 " / > <nl> <nl> < dependency groupId = " org . apache . cassandra " artifactId = " cassandra - all " version = " $ { version } " / > <nl> < dependency groupId = " org . apache . cassandra " artifactId = " cassandra - thrift " version = " $ { version } " / > <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableReversedIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableReversedIterator . java <nl> index cf8798d . . 6a0b7be 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableReversedIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableReversedIterator . java <nl> @ @ - 426 , 7 + 426 , 7 @ @ public class SSTableReversedIterator extends AbstractSSTableIterator <nl> public void reset ( ) <nl> { <nl> built = null ; <nl> - rowBuilder = BTree . builder ( metadata . comparator ) ; <nl> + rowBuilder . reuse ( ) ; <nl> deletionBuilder = MutableDeletionInfo . builder ( partitionLevelDeletion , metadata ( ) . comparator , false ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / rows / BTreeRow . java b / src / java / org / apache / cassandra / db / rows / BTreeRow . java <nl> index 15ac30a . . c70e0e2 100644 <nl> - - - a / src / java / org / apache / cassandra / db / rows / BTreeRow . java <nl> + + + b / src / java / org / apache / cassandra / db / rows / BTreeRow . java <nl> @ @ - 738 , 7 + 738 , 7 @ @ public class BTreeRow extends AbstractRow <nl> this . clustering = null ; <nl> this . primaryKeyLivenessInfo = LivenessInfo . EMPTY ; <nl> this . deletion = Deletion . LIVE ; <nl> - this . cells _ = null ; <nl> + this . cells _ . reuse ( ) ; <nl> this . hasComplex = false ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / rows / ComplexColumnData . java b / src / java / org / apache / cassandra / db / rows / ComplexColumnData . java <nl> index 380af7a . . 1395782 100644 <nl> - - - a / src / java / org / apache / cassandra / db / rows / ComplexColumnData . java <nl> + + + b / src / java / org / apache / cassandra / db / rows / ComplexColumnData . java <nl> @ @ - 242 , 7 + 242 , 10 @ @ public class ComplexColumnData extends ColumnData implements Iterable < Cell > <nl> { <nl> this . column = column ; <nl> this . complexDeletion = DeletionTime . LIVE ; / / default if writeComplexDeletion is not called <nl> - this . builder = BTree . builder ( column . cellComparator ( ) ) ; <nl> + if ( builder = = null ) <nl> + builder = BTree . builder ( column . cellComparator ( ) ) ; <nl> + else <nl> + builder . reuse ( column . cellComparator ( ) ) ; <nl> } <nl> <nl> public void addComplexDeletion ( DeletionTime complexDeletion ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / btree / BTree . java b / src / java / org / apache / cassandra / utils / btree / BTree . java <nl> index a4519b9 . . a6c9826 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / btree / BTree . java <nl> + + + b / src / java / org / apache / cassandra / utils / btree / BTree . java <nl> @ @ - 21 , 12 + 21 , 12 @ @ package org . apache . cassandra . utils . btree ; <nl> import java . util . * ; <nl> import java . util . function . Consumer ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Predicate ; <nl> import com . google . common . collect . Iterators ; <nl> import com . google . common . collect . Ordering ; <nl> <nl> - import io . netty . util . Recycler ; <nl> import org . apache . cassandra . utils . ObjectSizes ; <nl> <nl> import static com . google . common . collect . Iterables . concat ; <nl> @ @ - 769 , 25 + 769 , 14 @ @ public class BTree <nl> return 1 + lookupSizeMap ( root , childIndex - 1 ) ; <nl> } <nl> <nl> - final static Recycler < Builder > builderRecycler = new Recycler < Builder > ( ) <nl> - { <nl> - protected Builder newObject ( Handle handle ) <nl> - { <nl> - return new Builder ( handle ) ; <nl> - } <nl> - } ; <nl> - <nl> public static < V > Builder < V > builder ( Comparator < ? super V > comparator ) <nl> { <nl> - Builder < V > builder = builderRecycler . get ( ) ; <nl> - builder . reuse ( comparator ) ; <nl> - <nl> - return builder ; <nl> + return new Builder < > ( comparator ) ; <nl> } <nl> <nl> public static < V > Builder < V > builder ( Comparator < ? super V > comparator , int initialCapacity ) <nl> { <nl> - return builder ( comparator ) ; <nl> + return new Builder < > ( comparator , initialCapacity ) ; <nl> } <nl> <nl> public static class Builder < V > <nl> @ @ - 816 , 12 + 805 , 23 @ @ public class BTree <nl> boolean detected = true ; / / true if we have managed to cheaply ensure sorted ( + filtered , if resolver = = null ) as we have added <nl> boolean auto = true ; / / false if the user has promised to enforce the sort order and resolve any duplicates <nl> QuickResolver < V > quickResolver ; <nl> - final Recycler . Handle recycleHandle ; <nl> <nl> + protected Builder ( Comparator < ? super V > comparator ) <nl> + { <nl> + this ( comparator , 16 ) ; <nl> + } <nl> + <nl> + protected Builder ( Comparator < ? super V > comparator , int initialCapacity ) <nl> + { <nl> + if ( initialCapacity = = 0 ) <nl> + initialCapacity = 16 ; <nl> + this . comparator = comparator ; <nl> + this . values = new Object [ initialCapacity ] ; <nl> + } <nl> <nl> - private Builder ( Recycler . Handle handle ) <nl> + @ VisibleForTesting <nl> + public Builder ( ) <nl> { <nl> - this . recycleHandle = handle ; <nl> this . values = new Object [ 16 ] ; <nl> } <nl> <nl> @ @ - 833 , 7 + 833 , 6 @ @ public class BTree <nl> this . detected = builder . detected ; <nl> this . auto = builder . auto ; <nl> this . quickResolver = builder . quickResolver ; <nl> - this . recycleHandle = null ; <nl> } <nl> <nl> / * * <nl> @ @ - 851 , 30 + 850 , 17 @ @ public class BTree <nl> return this ; <nl> } <nl> <nl> - public void recycle ( ) <nl> + public void reuse ( ) <nl> { <nl> - if ( recycleHandle ! = null ) <nl> - { <nl> - this . cleanup ( ) ; <nl> - builderRecycler . recycle ( this , recycleHandle ) ; <nl> - } <nl> + reuse ( comparator ) ; <nl> } <nl> <nl> - / * * <nl> - * Cleans up the Builder instance before recycling it . <nl> - * / <nl> - private void cleanup ( ) <nl> + public void reuse ( Comparator < ? super V > comparator ) <nl> { <nl> - quickResolver = null ; <nl> + this . comparator = comparator ; <nl> Arrays . fill ( values , null ) ; <nl> count = 0 ; <nl> detected = true ; <nl> - auto = true ; <nl> - } <nl> - <nl> - private void reuse ( Comparator < ? super V > comparator ) <nl> - { <nl> - this . comparator = comparator ; <nl> } <nl> <nl> public Builder < V > auto ( boolean auto ) <nl> @ @ - 1101 , 16 + 1087 , 9 @ @ public class BTree <nl> <nl> public Object [ ] build ( ) <nl> { <nl> - try <nl> - { <nl> - if ( auto ) <nl> - autoEnforce ( ) ; <nl> - return BTree . build ( Arrays . asList ( values ) . subList ( 0 , count ) , UpdateFunction . noOp ( ) ) ; <nl> - } <nl> - finally <nl> - { <nl> - this . recycle ( ) ; <nl> - } <nl> + if ( auto ) <nl> + autoEnforce ( ) ; <nl> + return BTree . build ( Arrays . asList ( values ) . subList ( 0 , count ) , UpdateFunction . noOp ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / test / microbench / org / apache / cassandra / test / microbench / BTreeBuildBench . java b / test / microbench / org / apache / cassandra / test / microbench / BTreeBuildBench . java <nl> new file mode 100644 <nl> index 0000000 . . 0d89ebb <nl> - - - / dev / null <nl> + + + b / test / microbench / org / apache / cassandra / test / microbench / BTreeBuildBench . java <nl> @ @ - 0 , 0 + 1 , 96 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . test . microbench ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . Comparator ; <nl> + import java . util . List ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + <nl> + import org . apache . cassandra . utils . btree . BTree ; <nl> + import org . apache . cassandra . utils . btree . UpdateFunction ; <nl> + import org . openjdk . jmh . annotations . Benchmark ; <nl> + import org . openjdk . jmh . annotations . BenchmarkMode ; <nl> + import org . openjdk . jmh . annotations . Fork ; <nl> + import org . openjdk . jmh . annotations . Level ; <nl> + import org . openjdk . jmh . annotations . Measurement ; <nl> + import org . openjdk . jmh . annotations . Mode ; <nl> + import org . openjdk . jmh . annotations . OutputTimeUnit ; <nl> + import org . openjdk . jmh . annotations . Param ; <nl> + import org . openjdk . jmh . annotations . Scope ; <nl> + import org . openjdk . jmh . annotations . Setup ; <nl> + import org . openjdk . jmh . annotations . State ; <nl> + import org . openjdk . jmh . annotations . Threads ; <nl> + import org . openjdk . jmh . annotations . Warmup ; <nl> + <nl> + @ BenchmarkMode ( Mode . Throughput ) <nl> + @ OutputTimeUnit ( TimeUnit . MILLISECONDS ) <nl> + @ Warmup ( iterations = 4 , time = 1 , timeUnit = TimeUnit . SECONDS ) <nl> + @ Measurement ( iterations = 8 , time = 2 , timeUnit = TimeUnit . SECONDS ) <nl> + @ Fork ( value = 2 ) <nl> + @ Threads ( 4 ) <nl> + @ State ( Scope . Benchmark ) <nl> + public class BTreeBuildBench <nl> + { <nl> + private List < Integer > data ; <nl> + <nl> + @ Param ( { " 1 " , " 2 " , " 5 " , " 10 " , " 20 " , " 40 " , " 100 " , " 1000 " , " 10000 " , " 100000 " } ) <nl> + int dataSize ; <nl> + <nl> + private static final Comparator < Integer > CMP = new Comparator < Integer > ( ) <nl> + { <nl> + public int compare ( Integer o1 , Integer o2 ) <nl> + { <nl> + return Integer . compare ( o1 , o2 ) ; <nl> + } <nl> + } ; <nl> + <nl> + @ Setup ( Level . Trial ) <nl> + public void setup ( ) <nl> + { <nl> + data = new ArrayList < > ( dataSize ) ; <nl> + for ( int i = 0 ; i < dataSize ; i + + ) <nl> + data . add ( i ) ; <nl> + } <nl> + <nl> + private int buildTree ( List < Integer > data ) <nl> + { <nl> + Object [ ] btree = BTree . build ( data , UpdateFunction . noOp ( ) ) ; <nl> + / / access the btree to avoid java optimized out this code <nl> + return BTree . size ( btree ) ; <nl> + } <nl> + <nl> + private int treeBuilderAddAll ( List < Integer > data ) <nl> + { <nl> + BTree . Builder < Integer > builder = BTree . builder ( Comparator . naturalOrder ( ) ) ; <nl> + Object [ ] btree = builder . addAll ( data ) . build ( ) ; <nl> + return BTree . size ( btree ) ; <nl> + } <nl> + <nl> + @ Benchmark <nl> + public int treeBuilderRecycleAdd ( ) <nl> + { <nl> + BTree . Builder < Integer > builder = BTree . builder ( Comparator . naturalOrder ( ) ) ; <nl> + builder . auto ( false ) ; <nl> + for ( Integer v : data ) <nl> + builder . add ( v ) ; <nl> + Object [ ] btree = builder . build ( ) ; <nl> + return BTree . size ( btree ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / utils / BTreeTest . java b / test / unit / org / apache / cassandra / utils / BTreeTest . java <nl> index ec4cdb8 . . 9a59e3a 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / BTreeTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / BTreeTest . java <nl> @ @ - 261 , 6 + 261 , 32 @ @ public class BTreeTest <nl> } <nl> } <nl> <nl> + @ Test <nl> + public void testBuilderReuse ( ) <nl> + { <nl> + List < Integer > sorted = seq ( 20 ) ; <nl> + BTree . Builder < Integer > builder = BTree . builder ( Comparator . naturalOrder ( ) ) ; <nl> + builder . auto ( false ) ; <nl> + for ( int i : sorted ) <nl> + builder . add ( i ) ; <nl> + checkResult ( 20 , builder . build ( ) ) ; <nl> + <nl> + builder . reuse ( ) ; <nl> + assertTrue ( builder . build ( ) = = BTree . empty ( ) ) ; <nl> + for ( int i = 0 ; i < 12 ; i + + ) <nl> + builder . add ( sorted . get ( i ) ) ; <nl> + checkResult ( 12 , builder . build ( ) ) ; <nl> + <nl> + builder . auto ( true ) ; <nl> + builder . reuse ( Comparator . reverseOrder ( ) ) ; <nl> + for ( int i = 0 ; i < 12 ; i + + ) <nl> + builder . add ( sorted . get ( i ) ) ; <nl> + checkResult ( 12 , builder . build ( ) , BTree . Dir . DESC ) ; <nl> + <nl> + builder . reuse ( ) ; <nl> + assertTrue ( builder . build ( ) = = BTree . empty ( ) ) ; <nl> + } <nl> + <nl> private static class Accumulator extends Number implements Comparable < Accumulator > <nl> { <nl> final int base ; <nl> @ @ - 385 , 7 + 411 , 12 @ @ public class BTreeTest <nl> <nl> private static void checkResult ( int count , Object [ ] btree ) <nl> { <nl> - Iterator < Integer > iter = BTree . slice ( btree , CMP , BTree . Dir . ASC ) ; <nl> + checkResult ( count , btree , BTree . Dir . ASC ) ; <nl> + } <nl> + <nl> + private static void checkResult ( int count , Object [ ] btree , BTree . Dir dir ) <nl> + { <nl> + Iterator < Integer > iter = BTree . slice ( btree , CMP , dir ) ; <nl> int i = 0 ; <nl> while ( iter . hasNext ( ) ) <nl> assertEquals ( iter . next ( ) , ints [ i + + ] ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2e77d2e . . 7f4b655 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 11 . 3 
 + * Remove BTree . Builder Recycler to reduce memory usage ( CASSANDRA - 13929 ) 
 * Reduce nodetool GC thread count ( CASSANDRA - 14475 ) 
 * Fix New SASI view creation during Index Redistribution ( CASSANDRA - 14055 ) 
 * Remove string formatting lines from BufferPool hot path ( CASSANDRA - 14416 ) 
 diff - - git a / build . xml b / build . xml 
 index 4edfbb1 . . 54c5372 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 422 , 8 + 422 , 8 @ @ 
 < dependency groupId = " org . jboss . byteman " artifactId = " byteman - bmunit " version = " $ { byteman . version } " / > 
 
 
 - < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - core " version = " 1 . 13 " / > 
 - < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - generator - annprocess " version = " 1 . 13 " / > 
 + < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - core " version = " 1 . 21 " / > 
 + < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - generator - annprocess " version = " 1 . 21 " / > 
 
 < dependency groupId = " org . apache . cassandra " artifactId = " cassandra - all " version = " $ { version } " / > 
 < dependency groupId = " org . apache . cassandra " artifactId = " cassandra - thrift " version = " $ { version } " / > 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableReversedIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableReversedIterator . java 
 index cf8798d . . 6a0b7be 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableReversedIterator . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableReversedIterator . java 
 @ @ - 426 , 7 + 426 , 7 @ @ public class SSTableReversedIterator extends AbstractSSTableIterator 
 public void reset ( ) 
 { 
 built = null ; 
 - rowBuilder = BTree . builder ( metadata . comparator ) ; 
 + rowBuilder . reuse ( ) ; 
 deletionBuilder = MutableDeletionInfo . builder ( partitionLevelDeletion , metadata ( ) . comparator , false ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / rows / BTreeRow . java b / src / java / org / apache / cassandra / db / rows / BTreeRow . java 
 index 15ac30a . . c70e0e2 100644 
 - - - a / src / java / org / apache / cassandra / db / rows / BTreeRow . java 
 + + + b / src / java / org / apache / cassandra / db / rows / BTreeRow . java 
 @ @ - 738 , 7 + 738 , 7 @ @ public class BTreeRow extends AbstractRow 
 this . clustering = null ; 
 this . primaryKeyLivenessInfo = LivenessInfo . EMPTY ; 
 this . deletion = Deletion . LIVE ; 
 - this . cells _ = null ; 
 + this . cells _ . reuse ( ) ; 
 this . hasComplex = false ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / rows / ComplexColumnData . java b / src / java / org / apache / cassandra / db / rows / ComplexColumnData . java 
 index 380af7a . . 1395782 100644 
 - - - a / src / java / org / apache / cassandra / db / rows / ComplexColumnData . java 
 + + + b / src / java / org / apache / cassandra / db / rows / ComplexColumnData . java 
 @ @ - 242 , 7 + 242 , 10 @ @ public class ComplexColumnData extends ColumnData implements Iterable < Cell > 
 { 
 this . column = column ; 
 this . complexDeletion = DeletionTime . LIVE ; / / default if writeComplexDeletion is not called 
 - this . builder = BTree . builder ( column . cellComparator ( ) ) ; 
 + if ( builder = = null ) 
 + builder = BTree . builder ( column . cellComparator ( ) ) ; 
 + else 
 + builder . reuse ( column . cellComparator ( ) ) ; 
 } 
 
 public void addComplexDeletion ( DeletionTime complexDeletion ) 
 diff - - git a / src / java / org / apache / cassandra / utils / btree / BTree . java b / src / java / org / apache / cassandra / utils / btree / BTree . java 
 index a4519b9 . . a6c9826 100644 
 - - - a / src / java / org / apache / cassandra / utils / btree / BTree . java 
 + + + b / src / java / org / apache / cassandra / utils / btree / BTree . java 
 @ @ - 21 , 12 + 21 , 12 @ @ package org . apache . cassandra . utils . btree ; 
 import java . util . * ; 
 import java . util . function . Consumer ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . base . Function ; 
 import com . google . common . base . Predicate ; 
 import com . google . common . collect . Iterators ; 
 import com . google . common . collect . Ordering ; 
 
 - import io . netty . util . Recycler ; 
 import org . apache . cassandra . utils . ObjectSizes ; 
 
 import static com . google . common . collect . Iterables . concat ; 
 @ @ - 769 , 25 + 769 , 14 @ @ public class BTree 
 return 1 + lookupSizeMap ( root , childIndex - 1 ) ; 
 } 
 
 - final static Recycler < Builder > builderRecycler = new Recycler < Builder > ( ) 
 - { 
 - protected Builder newObject ( Handle handle ) 
 - { 
 - return new Builder ( handle ) ; 
 - } 
 - } ; 
 - 
 public static < V > Builder < V > builder ( Comparator < ? super V > comparator ) 
 { 
 - Builder < V > builder = builderRecycler . get ( ) ; 
 - builder . reuse ( comparator ) ; 
 - 
 - return builder ; 
 + return new Builder < > ( comparator ) ; 
 } 
 
 public static < V > Builder < V > builder ( Comparator < ? super V > comparator , int initialCapacity ) 
 { 
 - return builder ( comparator ) ; 
 + return new Builder < > ( comparator , initialCapacity ) ; 
 } 
 
 public static class Builder < V > 
 @ @ - 816 , 12 + 805 , 23 @ @ public class BTree 
 boolean detected = true ; / / true if we have managed to cheaply ensure sorted ( + filtered , if resolver = = null ) as we have added 
 boolean auto = true ; / / false if the user has promised to enforce the sort order and resolve any duplicates 
 QuickResolver < V > quickResolver ; 
 - final Recycler . Handle recycleHandle ; 
 
 + protected Builder ( Comparator < ? super V > comparator ) 
 + { 
 + this ( comparator , 16 ) ; 
 + } 
 + 
 + protected Builder ( Comparator < ? super V > comparator , int initialCapacity ) 
 + { 
 + if ( initialCapacity = = 0 ) 
 + initialCapacity = 16 ; 
 + this . comparator = comparator ; 
 + this . values = new Object [ initialCapacity ] ; 
 + } 
 
 - private Builder ( Recycler . Handle handle ) 
 + @ VisibleForTesting 
 + public Builder ( ) 
 { 
 - this . recycleHandle = handle ; 
 this . values = new Object [ 16 ] ; 
 } 
 
 @ @ - 833 , 7 + 833 , 6 @ @ public class BTree 
 this . detected = builder . detected ; 
 this . auto = builder . auto ; 
 this . quickResolver = builder . quickResolver ; 
 - this . recycleHandle = null ; 
 } 
 
 / * * 
 @ @ - 851 , 30 + 850 , 17 @ @ public class BTree 
 return this ; 
 } 
 
 - public void recycle ( ) 
 + public void reuse ( ) 
 { 
 - if ( recycleHandle ! = null ) 
 - { 
 - this . cleanup ( ) ; 
 - builderRecycler . recycle ( this , recycleHandle ) ; 
 - } 
 + reuse ( comparator ) ; 
 } 
 
 - / * * 
 - * Cleans up the Builder instance before recycling it . 
 - * / 
 - private void cleanup ( ) 
 + public void reuse ( Comparator < ? super V > comparator ) 
 { 
 - quickResolver = null ; 
 + this . comparator = comparator ; 
 Arrays . fill ( values , null ) ; 
 count = 0 ; 
 detected = true ; 
 - auto = true ; 
 - } 
 - 
 - private void reuse ( Comparator < ? super V > comparator ) 
 - { 
 - this . comparator = comparator ; 
 } 
 
 public Builder < V > auto ( boolean auto ) 
 @ @ - 1101 , 16 + 1087 , 9 @ @ public class BTree 
 
 public Object [ ] build ( ) 
 { 
 - try 
 - { 
 - if ( auto ) 
 - autoEnforce ( ) ; 
 - return BTree . build ( Arrays . asList ( values ) . subList ( 0 , count ) , UpdateFunction . noOp ( ) ) ; 
 - } 
 - finally 
 - { 
 - this . recycle ( ) ; 
 - } 
 + if ( auto ) 
 + autoEnforce ( ) ; 
 + return BTree . build ( Arrays . asList ( values ) . subList ( 0 , count ) , UpdateFunction . noOp ( ) ) ; 
 } 
 } 
 
 diff - - git a / test / microbench / org / apache / cassandra / test / microbench / BTreeBuildBench . java b / test / microbench / org / apache / cassandra / test / microbench / BTreeBuildBench . java 
 new file mode 100644 
 index 0000000 . . 0d89ebb 
 - - - / dev / null 
 + + + b / test / microbench / org / apache / cassandra / test / microbench / BTreeBuildBench . java 
 @ @ - 0 , 0 + 1 , 96 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . test . microbench ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . Comparator ; 
 + import java . util . List ; 
 + import java . util . concurrent . TimeUnit ; 
 + 
 + import org . apache . cassandra . utils . btree . BTree ; 
 + import org . apache . cassandra . utils . btree . UpdateFunction ; 
 + import org . openjdk . jmh . annotations . Benchmark ; 
 + import org . openjdk . jmh . annotations . BenchmarkMode ; 
 + import org . openjdk . jmh . annotations . Fork ; 
 + import org . openjdk . jmh . annotations . Level ; 
 + import org . openjdk . jmh . annotations . Measurement ; 
 + import org . openjdk . jmh . annotations . Mode ; 
 + import org . openjdk . jmh . annotations . OutputTimeUnit ; 
 + import org . openjdk . jmh . annotations . Param ; 
 + import org . openjdk . jmh . annotations . Scope ; 
 + import org . openjdk . jmh . annotations . Setup ; 
 + import org . openjdk . jmh . annotations . State ; 
 + import org . openjdk . jmh . annotations . Threads ; 
 + import org . openjdk . jmh . annotations . Warmup ; 
 + 
 + @ BenchmarkMode ( Mode . Throughput ) 
 + @ OutputTimeUnit ( TimeUnit . MILLISECONDS ) 
 + @ Warmup ( iterations = 4 , time = 1 , timeUnit = TimeUnit . SECONDS ) 
 + @ Measurement ( iterations = 8 , time = 2 , timeUnit = TimeUnit . SECONDS ) 
 + @ Fork ( value = 2 ) 
 + @ Threads ( 4 ) 
 + @ State ( Scope . Benchmark ) 
 + public class BTreeBuildBench 
 + { 
 + private List < Integer > data ; 
 + 
 + @ Param ( { " 1 " , " 2 " , " 5 " , " 10 " , " 20 " , " 40 " , " 100 " , " 1000 " , " 10000 " , " 100000 " } ) 
 + int dataSize ; 
 + 
 + private static final Comparator < Integer > CMP = new Comparator < Integer > ( ) 
 + { 
 + public int compare ( Integer o1 , Integer o2 ) 
 + { 
 + return Integer . compare ( o1 , o2 ) ; 
 + } 
 + } ; 
 + 
 + @ Setup ( Level . Trial ) 
 + public void setup ( ) 
 + { 
 + data = new ArrayList < > ( dataSize ) ; 
 + for ( int i = 0 ; i < dataSize ; i + + ) 
 + data . add ( i ) ; 
 + } 
 + 
 + private int buildTree ( List < Integer > data ) 
 + { 
 + Object [ ] btree = BTree . build ( data , UpdateFunction . noOp ( ) ) ; 
 + / / access the btree to avoid java optimized out this code 
 + return BTree . size ( btree ) ; 
 + } 
 + 
 + private int treeBuilderAddAll ( List < Integer > data ) 
 + { 
 + BTree . Builder < Integer > builder = BTree . builder ( Comparator . naturalOrder ( ) ) ; 
 + Object [ ] btree = builder . addAll ( data ) . build ( ) ; 
 + return BTree . size ( btree ) ; 
 + } 
 + 
 + @ Benchmark 
 + public int treeBuilderRecycleAdd ( ) 
 + { 
 + BTree . Builder < Integer > builder = BTree . builder ( Comparator . naturalOrder ( ) ) ; 
 + builder . auto ( false ) ; 
 + for ( Integer v : data ) 
 + builder . add ( v ) ; 
 + Object [ ] btree = builder . build ( ) ; 
 + return BTree . size ( btree ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / utils / BTreeTest . java b / test / unit / org / apache / cassandra / utils / BTreeTest . java 
 index ec4cdb8 . . 9a59e3a 100644 
 - - - a / test / unit / org / apache / cassandra / utils / BTreeTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / BTreeTest . java 
 @ @ - 261 , 6 + 261 , 32 @ @ public class BTreeTest 
 } 
 } 
 
 + @ Test 
 + public void testBuilderReuse ( ) 
 + { 
 + List < Integer > sorted = seq ( 20 ) ; 
 + BTree . Builder < Integer > builder = BTree . builder ( Comparator . naturalOrder ( ) ) ; 
 + builder . auto ( false ) ; 
 + for ( int i : sorted ) 
 + builder . add ( i ) ; 
 + checkResult ( 20 , builder . build ( ) ) ; 
 + 
 + builder . reuse ( ) ; 
 + assertTrue ( builder . build ( ) = = BTree . empty ( ) ) ; 
 + for ( int i = 0 ; i < 12 ; i + + ) 
 + builder . add ( sorted . get ( i ) ) ; 
 + checkResult ( 12 , builder . build ( ) ) ; 
 + 
 + builder . auto ( true ) ; 
 + builder . reuse ( Comparator . reverseOrder ( ) ) ; 
 + for ( int i = 0 ; i < 12 ; i + + ) 
 + builder . add ( sorted . get ( i ) ) ; 
 + checkResult ( 12 , builder . build ( ) , BTree . Dir . DESC ) ; 
 + 
 + builder . reuse ( ) ; 
 + assertTrue ( builder . build ( ) = = BTree . empty ( ) ) ; 
 + } 
 + 
 private static class Accumulator extends Number implements Comparable < Accumulator > 
 { 
 final int base ; 
 @ @ - 385 , 7 + 411 , 12 @ @ public class BTreeTest 
 
 private static void checkResult ( int count , Object [ ] btree ) 
 { 
 - Iterator < Integer > iter = BTree . slice ( btree , CMP , BTree . Dir . ASC ) ; 
 + checkResult ( count , btree , BTree . Dir . ASC ) ; 
 + } 
 + 
 + private static void checkResult ( int count , Object [ ] btree , BTree . Dir dir ) 
 + { 
 + Iterator < Integer > iter = BTree . slice ( btree , CMP , dir ) ; 
 int i = 0 ; 
 while ( iter . hasNext ( ) ) 
 assertEquals ( iter . next ( ) , ints [ i + + ] ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
