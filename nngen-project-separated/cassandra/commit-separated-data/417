BLEU SCORE: 0.06220117374063391

TEST MSG: Disable compaction during PendingRepairTests
GENERATED MSG: merge from 1 . 0

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / compaction / AbstractPendingRepairTest . java b / test / unit / org / apache / cassandra / db / compaction / AbstractPendingRepairTest . java <nl> index 75f555d . . 0baad3b 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / AbstractPendingRepairTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / AbstractPendingRepairTest . java <nl> @ @ - 88 , 6 + 88 , 7 @ @ public class AbstractPendingRepairTest extends AbstractRepairTest <nl> cfs = Schema . instance . getColumnFamilyStoreInstance ( cfm . id ) ; <nl> csm = cfs . getCompactionStrategyManager ( ) ; <nl> nextSSTableKey = 0 ; <nl> + cfs . disableAutoCompaction ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionStrategyManagerPendingRepairTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionStrategyManagerPendingRepairTest . java <nl> index 27bff20 . . 0b27f73 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionStrategyManagerPendingRepairTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionStrategyManagerPendingRepairTest . java <nl> @ @ - 235 , 6 + 235 , 7 @ @ public class CompactionStrategyManagerPendingRepairTest extends AbstractPendingR <nl> Assert . assertTrue ( sstable . isPendingRepair ( ) ) ; <nl> Assert . assertFalse ( sstable . isRepaired ( ) ) ; <nl> <nl> + cfs . getCompactionStrategyManager ( ) . enable ( ) ; / / enable compaction to fetch next background task <nl> AbstractCompactionTask compactionTask = csm . getNextBackgroundTask ( FBUtilities . nowInSeconds ( ) ) ; <nl> Assert . assertNotNull ( compactionTask ) ; <nl> Assert . assertSame ( PendingRepairManager . RepairFinishedCompactionTask . class , compactionTask . getClass ( ) ) ; <nl> @ @ - 272 , 6 + 273 , 7 @ @ public class CompactionStrategyManagerPendingRepairTest extends AbstractPendingR <nl> Assert . assertTrue ( sstable . isPendingRepair ( ) ) ; <nl> Assert . assertFalse ( sstable . isRepaired ( ) ) ; <nl> <nl> + cfs . getCompactionStrategyManager ( ) . enable ( ) ; / / enable compaction to fetch next background task <nl> AbstractCompactionTask compactionTask = csm . getNextBackgroundTask ( FBUtilities . nowInSeconds ( ) ) ; <nl> Assert . assertNotNull ( compactionTask ) ; <nl> Assert . assertSame ( PendingRepairManager . RepairFinishedCompactionTask . class , compactionTask . getClass ( ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / PendingRepairManagerTest . java b / test / unit / org / apache / cassandra / db / compaction / PendingRepairManagerTest . java <nl> index 1b43217 . . a173b4b 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / PendingRepairManagerTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / PendingRepairManagerTest . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> <nl> package org . apache . cassandra . db . compaction ; <nl> <nl> + import java . util . Collection ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . UUID ; <nl> @ @ - 152 , 10 + 153 , 17 @ @ public class PendingRepairManagerTest extends AbstractPendingRepairTest <nl> Assert . assertEquals ( 2 , prm . getSessions ( ) . size ( ) ) ; <nl> Assert . assertNull ( prm . getNextBackgroundTask ( FBUtilities . nowInSeconds ( ) ) ) ; <nl> AbstractCompactionTask compactionTask = prm . getNextRepairFinishedTask ( ) ; <nl> - Assert . assertNotNull ( compactionTask ) ; <nl> - Assert . assertSame ( PendingRepairManager . RepairFinishedCompactionTask . class , compactionTask . getClass ( ) ) ; <nl> - PendingRepairManager . RepairFinishedCompactionTask cleanupTask = ( PendingRepairManager . RepairFinishedCompactionTask ) compactionTask ; <nl> - Assert . assertEquals ( repairID , cleanupTask . getSessionID ( ) ) ; <nl> + try <nl> + { <nl> + Assert . assertNotNull ( compactionTask ) ; <nl> + Assert . assertSame ( PendingRepairManager . RepairFinishedCompactionTask . class , compactionTask . getClass ( ) ) ; <nl> + PendingRepairManager . RepairFinishedCompactionTask cleanupTask = ( PendingRepairManager . RepairFinishedCompactionTask ) compactionTask ; <nl> + Assert . assertEquals ( repairID , cleanupTask . getSessionID ( ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + compactionTask . transaction . abort ( ) ; <nl> + } <nl> } <nl> <nl> @ Test <nl> @ @ - 179 , 7 + 187 , 15 @ @ public class PendingRepairManagerTest extends AbstractPendingRepairTest <nl> Assert . assertNotNull ( prm . get ( repairID ) ) ; <nl> LocalSessionAccessor . finalizeUnsafe ( repairID ) ; <nl> <nl> - Assert . assertEquals ( 1 , prm . getMaximalTasks ( FBUtilities . nowInSeconds ( ) , false ) . size ( ) ) ; <nl> + Collection < AbstractCompactionTask > tasks = prm . getMaximalTasks ( FBUtilities . nowInSeconds ( ) , false ) ; <nl> + try <nl> + { <nl> + Assert . assertEquals ( 1 , tasks . size ( ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + tasks . stream ( ) . forEach ( t - > t . transaction . abort ( ) ) ; <nl> + } <nl> } <nl> <nl> @ Test <nl> @ @ - 191 , 7 + 207 , 14 @ @ public class PendingRepairManagerTest extends AbstractPendingRepairTest <nl> mutateRepaired ( sstable , repairId ) ; <nl> prm . addSSTable ( sstable ) ; <nl> List < AbstractCompactionTask > tasks = csm . getUserDefinedTasks ( Collections . singleton ( sstable ) , 100 ) ; <nl> - Assert . assertEquals ( 1 , tasks . size ( ) ) ; <nl> + try <nl> + { <nl> + Assert . assertEquals ( 1 , tasks . size ( ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + tasks . stream ( ) . forEach ( t - > t . transaction . abort ( ) ) ; <nl> + } <nl> } <nl> <nl> @ Test <nl> @ @ - 208 , 6 + 231 , 13 @ @ public class PendingRepairManagerTest extends AbstractPendingRepairTest <nl> prm . addSSTable ( sstable ) ; <nl> prm . addSSTable ( sstable2 ) ; <nl> List < AbstractCompactionTask > tasks = csm . getUserDefinedTasks ( Lists . newArrayList ( sstable , sstable2 ) , 100 ) ; <nl> - Assert . assertEquals ( 2 , tasks . size ( ) ) ; <nl> + try <nl> + { <nl> + Assert . assertEquals ( 2 , tasks . size ( ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + tasks . stream ( ) . forEach ( t - > t . transaction . abort ( ) ) ; <nl> + } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d518830 . . 52cc2c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 29 , 7 + 29 , 7 @ @ <nl> * add scheduler JMX metrics ( CASSANDRA - 2962 ) <nl> * add block level checksum for compressed data ( CASSANDRA - 1717 ) <nl> * make column family backed column map pluggable and introduce unsynchronized <nl> - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) <nl> + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) <nl> * refactoring of the secondary index api ( CASSANDRA - 2982 ) <nl> * make CL > ONE reads wait for digest reconciliation before returning <nl> ( CASSANDRA - 2494 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index c316a85 . . 71c7213 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor <nl> this . reversed = reversed ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public AbstractType < ? > getComparator ( ) <nl> { <nl> return comparator ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 1239d1c . . 38bc0d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer <nl> this . cfm = cfm ; <nl> } <nl> <nl> - public ColumnFamily cloneMeShallow ( ) <nl> + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) <nl> { <nl> - ColumnFamily cf = ColumnFamily . create ( cfm ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; <nl> / / since deletion info is immutable , aliasing it is fine <nl> cf . deletionInfo . set ( deletionInfo . get ( ) ) ; <nl> return cf ; <nl> } <nl> <nl> + public ColumnFamily cloneMeShallow ( ) <nl> + { <nl> + return cloneMeShallow ( columns . getFactory ( ) ) ; <nl> + } <nl> + <nl> public AbstractType getSubComparator ( ) <nl> { <nl> IColumnSerializer s = getColumnSerializer ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0bfd1c5 . . 552d3e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> - * tombstones that are no longer relevant . * / <nl> + / * * <nl> + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> + * tombstones that are no longer relevant . <nl> + * The returned column family won ' t be thread safe . <nl> + * / <nl> ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) <nl> { <nl> / / special case slicing the entire row : <nl> @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; <nl> if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) <nl> { <nl> - ColumnFamily cf = cached . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> if ( sc ! = null ) <nl> cf . addColumn ( sc , HeapAllocator . instance ) ; <nl> return removeDeleted ( cf , gcBefore ) ; <nl> @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; <nl> - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> index 37f5a60 . . 624dec7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns <nl> public ISortedColumns cloneMe ( ) ; <nl> <nl> / * * <nl> + * Returns the factory used for this ISortedColumns implementation . <nl> + * / <nl> + public Factory getFactory ( ) ; <nl> + <nl> + / * * <nl> * Adds a column to this column map . <nl> * If a column with the same name is already present in the map , it will <nl> * be replaced by the newly added column . <nl> diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> index cd2488a . . 13a111a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new ThreadSafeSortedColumns ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> index 34e83dc . . 6c3fc42 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new TreeMapBackedSortedColumns ( this ) ;

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / compaction / AbstractPendingRepairTest . java b / test / unit / org / apache / cassandra / db / compaction / AbstractPendingRepairTest . java 
 index 75f555d . . 0baad3b 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / AbstractPendingRepairTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / AbstractPendingRepairTest . java 
 @ @ - 88 , 6 + 88 , 7 @ @ public class AbstractPendingRepairTest extends AbstractRepairTest 
 cfs = Schema . instance . getColumnFamilyStoreInstance ( cfm . id ) ; 
 csm = cfs . getCompactionStrategyManager ( ) ; 
 nextSSTableKey = 0 ; 
 + cfs . disableAutoCompaction ( ) ; 
 } 
 
 / * * 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionStrategyManagerPendingRepairTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionStrategyManagerPendingRepairTest . java 
 index 27bff20 . . 0b27f73 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionStrategyManagerPendingRepairTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionStrategyManagerPendingRepairTest . java 
 @ @ - 235 , 6 + 235 , 7 @ @ public class CompactionStrategyManagerPendingRepairTest extends AbstractPendingR 
 Assert . assertTrue ( sstable . isPendingRepair ( ) ) ; 
 Assert . assertFalse ( sstable . isRepaired ( ) ) ; 
 
 + cfs . getCompactionStrategyManager ( ) . enable ( ) ; / / enable compaction to fetch next background task 
 AbstractCompactionTask compactionTask = csm . getNextBackgroundTask ( FBUtilities . nowInSeconds ( ) ) ; 
 Assert . assertNotNull ( compactionTask ) ; 
 Assert . assertSame ( PendingRepairManager . RepairFinishedCompactionTask . class , compactionTask . getClass ( ) ) ; 
 @ @ - 272 , 6 + 273 , 7 @ @ public class CompactionStrategyManagerPendingRepairTest extends AbstractPendingR 
 Assert . assertTrue ( sstable . isPendingRepair ( ) ) ; 
 Assert . assertFalse ( sstable . isRepaired ( ) ) ; 
 
 + cfs . getCompactionStrategyManager ( ) . enable ( ) ; / / enable compaction to fetch next background task 
 AbstractCompactionTask compactionTask = csm . getNextBackgroundTask ( FBUtilities . nowInSeconds ( ) ) ; 
 Assert . assertNotNull ( compactionTask ) ; 
 Assert . assertSame ( PendingRepairManager . RepairFinishedCompactionTask . class , compactionTask . getClass ( ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / PendingRepairManagerTest . java b / test / unit / org / apache / cassandra / db / compaction / PendingRepairManagerTest . java 
 index 1b43217 . . a173b4b 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / PendingRepairManagerTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / PendingRepairManagerTest . java 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 
 package org . apache . cassandra . db . compaction ; 
 
 + import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . List ; 
 import java . util . UUID ; 
 @ @ - 152 , 10 + 153 , 17 @ @ public class PendingRepairManagerTest extends AbstractPendingRepairTest 
 Assert . assertEquals ( 2 , prm . getSessions ( ) . size ( ) ) ; 
 Assert . assertNull ( prm . getNextBackgroundTask ( FBUtilities . nowInSeconds ( ) ) ) ; 
 AbstractCompactionTask compactionTask = prm . getNextRepairFinishedTask ( ) ; 
 - Assert . assertNotNull ( compactionTask ) ; 
 - Assert . assertSame ( PendingRepairManager . RepairFinishedCompactionTask . class , compactionTask . getClass ( ) ) ; 
 - PendingRepairManager . RepairFinishedCompactionTask cleanupTask = ( PendingRepairManager . RepairFinishedCompactionTask ) compactionTask ; 
 - Assert . assertEquals ( repairID , cleanupTask . getSessionID ( ) ) ; 
 + try 
 + { 
 + Assert . assertNotNull ( compactionTask ) ; 
 + Assert . assertSame ( PendingRepairManager . RepairFinishedCompactionTask . class , compactionTask . getClass ( ) ) ; 
 + PendingRepairManager . RepairFinishedCompactionTask cleanupTask = ( PendingRepairManager . RepairFinishedCompactionTask ) compactionTask ; 
 + Assert . assertEquals ( repairID , cleanupTask . getSessionID ( ) ) ; 
 + } 
 + finally 
 + { 
 + compactionTask . transaction . abort ( ) ; 
 + } 
 } 
 
 @ Test 
 @ @ - 179 , 7 + 187 , 15 @ @ public class PendingRepairManagerTest extends AbstractPendingRepairTest 
 Assert . assertNotNull ( prm . get ( repairID ) ) ; 
 LocalSessionAccessor . finalizeUnsafe ( repairID ) ; 
 
 - Assert . assertEquals ( 1 , prm . getMaximalTasks ( FBUtilities . nowInSeconds ( ) , false ) . size ( ) ) ; 
 + Collection < AbstractCompactionTask > tasks = prm . getMaximalTasks ( FBUtilities . nowInSeconds ( ) , false ) ; 
 + try 
 + { 
 + Assert . assertEquals ( 1 , tasks . size ( ) ) ; 
 + } 
 + finally 
 + { 
 + tasks . stream ( ) . forEach ( t - > t . transaction . abort ( ) ) ; 
 + } 
 } 
 
 @ Test 
 @ @ - 191 , 7 + 207 , 14 @ @ public class PendingRepairManagerTest extends AbstractPendingRepairTest 
 mutateRepaired ( sstable , repairId ) ; 
 prm . addSSTable ( sstable ) ; 
 List < AbstractCompactionTask > tasks = csm . getUserDefinedTasks ( Collections . singleton ( sstable ) , 100 ) ; 
 - Assert . assertEquals ( 1 , tasks . size ( ) ) ; 
 + try 
 + { 
 + Assert . assertEquals ( 1 , tasks . size ( ) ) ; 
 + } 
 + finally 
 + { 
 + tasks . stream ( ) . forEach ( t - > t . transaction . abort ( ) ) ; 
 + } 
 } 
 
 @ Test 
 @ @ - 208 , 6 + 231 , 13 @ @ public class PendingRepairManagerTest extends AbstractPendingRepairTest 
 prm . addSSTable ( sstable ) ; 
 prm . addSSTable ( sstable2 ) ; 
 List < AbstractCompactionTask > tasks = csm . getUserDefinedTasks ( Lists . newArrayList ( sstable , sstable2 ) , 100 ) ; 
 - Assert . assertEquals ( 2 , tasks . size ( ) ) ; 
 + try 
 + { 
 + Assert . assertEquals ( 2 , tasks . size ( ) ) ; 
 + } 
 + finally 
 + { 
 + tasks . stream ( ) . forEach ( t - > t . transaction . abort ( ) ) ; 
 + } 
 } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d518830 . . 52cc2c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 7 + 29 , 7 @ @ 
 * add scheduler JMX metrics ( CASSANDRA - 2962 ) 
 * add block level checksum for compressed data ( CASSANDRA - 1717 ) 
 * make column family backed column map pluggable and introduce unsynchronized 
 - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) 
 + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) 
 * refactoring of the secondary index api ( CASSANDRA - 2982 ) 
 * make CL > ONE reads wait for digest reconciliation before returning 
 ( CASSANDRA - 2494 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index c316a85 . . 71c7213 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor 
 this . reversed = reversed ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public AbstractType < ? > getComparator ( ) 
 { 
 return comparator ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 1239d1c . . 38bc0d7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer 
 this . cfm = cfm ; 
 } 
 
 - public ColumnFamily cloneMeShallow ( ) 
 + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) 
 { 
 - ColumnFamily cf = ColumnFamily . create ( cfm ) ; 
 + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; 
 / / since deletion info is immutable , aliasing it is fine 
 cf . deletionInfo . set ( deletionInfo . get ( ) ) ; 
 return cf ; 
 } 
 
 + public ColumnFamily cloneMeShallow ( ) 
 + { 
 + return cloneMeShallow ( columns . getFactory ( ) ) ; 
 + } 
 + 
 public AbstractType getSubComparator ( ) 
 { 
 IColumnSerializer s = getColumnSerializer ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0bfd1c5 . . 552d3e9 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 - * tombstones that are no longer relevant . * / 
 + / * * 
 + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 + * tombstones that are no longer relevant . 
 + * The returned column family won ' t be thread safe . 
 + * / 
 ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) 
 { 
 / / special case slicing the entire row : 
 @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; 
 if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) 
 { 
 - ColumnFamily cf = cached . cloneMeShallow ( ) ; 
 + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 if ( sc ! = null ) 
 cf . addColumn ( sc , HeapAllocator . instance ) ; 
 return removeDeleted ( cf , gcBefore ) ; 
 @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; 
 - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 index 37f5a60 . . 624dec7 100644 
 - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns 
 public ISortedColumns cloneMe ( ) ; 
 
 / * * 
 + * Returns the factory used for this ISortedColumns implementation . 
 + * / 
 + public Factory getFactory ( ) ; 
 + 
 + / * * 
 * Adds a column to this column map . 
 * If a column with the same name is already present in the map , it will 
 * be replaced by the newly added column . 
 diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 index cd2488a . . 13a111a 100644 
 - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new ThreadSafeSortedColumns ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 index 34e83dc . . 6c3fc42 100644 
 - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new TreeMapBackedSortedColumns ( this ) ;
