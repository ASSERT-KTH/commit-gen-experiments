BLEU SCORE: 0.028398387225677897

TEST MSG: Don ' t skip entire sstables when reading backwards with mixed clustering column order
GENERATED MSG: Avoid potential NPE for queries with ORDER BY and IN

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index bca036d . . b989f3c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 2 . 2 . 14 <nl> + * Don ' t skip entire sstables when reading backwards with mixed clustering column order <nl> + ( CASSANDRA - 14910 ) <nl> * Cannot perform slice reads in reverse direction against tables with clustering columns <nl> in mixed order ( CASSANDRA - 14899 ) <nl> * Fix incorrect cqlsh results when selecting same columns multiple times ( CASSANDRA - 13262 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / ColumnSlice . java b / src / java / org / apache / cassandra / db / filter / ColumnSlice . java <nl> index 1cc348c . . 316226d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / ColumnSlice . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / ColumnSlice . java <nl> @ @ - 68 , 7 + 68 , 10 @ @ public class ColumnSlice <nl> Composite sStart = reversed ? finish : start ; <nl> Composite sEnd = reversed ? start : finish ; <nl> <nl> - if ( compare ( sStart , maxCellNames , comparator , true ) > 0 | | compare ( sEnd , minCellNames , comparator , false ) < 0 ) <nl> + / / don ' t compare static slice bounds with min / max cell names to determine intersection - that can yield unexpected <nl> + / / results , in particular with ReverseType comparators ; see CASSANDRA - 14910 for more context . <nl> + if ( ( ! sStart . isStatic ( ) & & compare ( sStart , maxCellNames , comparator , true ) > 0 ) <nl> + | | ( ! sEnd . isStatic ( ) & & compare ( sEnd , minCellNames , comparator , false ) < 0 ) ) <nl> return false ; <nl> <nl> / / We could safely return true here , but there ' s a minor optimization : if the first component is restricted <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderByTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderByTest . java <nl> index 32d800a . . e21074b 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderByTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderByTest . java <nl> @ @ - 732 , 6 + 732 , 84 @ @ public class SelectOrderByTest extends CQLTester <nl> } <nl> } <nl> <nl> + @ Test <nl> + public void testSelectWithReversedTypeInReverseOrderWithStaticColumnsWithoutStaticRow ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int static , PRIMARY KEY ( a , b ) ) WITH CLUSTERING ORDER BY ( b DESC ) ; " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 1 , 1 ) ; " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 2 , 2 ) ; " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 3 , 3 ) ; " ) ; <nl> + <nl> + / / read in comparator order <nl> + assertRows ( execute ( " SELECT b , c FROM % s WHERE a = 1 ORDER BY b DESC ; " ) , <nl> + row ( 3 , 3 ) , <nl> + row ( 2 , 2 ) , <nl> + row ( 1 , 1 ) ) ; <nl> + <nl> + / / read in reverse comparator order <nl> + assertRows ( execute ( " SELECT b , c FROM % s WHERE a = 1 ORDER BY b ASC ; " ) , <nl> + row ( 1 , 1 ) , <nl> + row ( 2 , 2 ) , <nl> + row ( 3 , 3 ) ) ; <nl> + <nl> + / * <nl> + * Flush the sstable . We * should * see the same results when reading in both directions , but prior to CASSANDRA - 14910 <nl> + * fix this would now have returned an empty result set when reading in reverse comparator order . <nl> + * / <nl> + flush ( ) ; <nl> + <nl> + / / read in comparator order <nl> + assertRows ( execute ( " SELECT b , c FROM % s WHERE a = 1 ORDER BY b DESC ; " ) , <nl> + row ( 3 , 3 ) , <nl> + row ( 2 , 2 ) , <nl> + row ( 1 , 1 ) ) ; <nl> + <nl> + / / read in reverse comparator order <nl> + assertRows ( execute ( " SELECT b , c FROM % s WHERE a = 1 ORDER BY b ASC ; " ) , <nl> + row ( 1 , 1 ) , <nl> + row ( 2 , 2 ) , <nl> + row ( 3 , 3 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSelectWithReversedTypeInReverseOrderWithStaticColumnsWithStaticRow ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int static , PRIMARY KEY ( a , b ) ) WITH CLUSTERING ORDER BY ( b DESC ) " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( a , d ) VALUES ( 1 , 0 ) ; " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 1 , 1 ) ; " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 2 , 2 ) ; " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 3 , 3 ) ; " ) ; <nl> + <nl> + / / read in comparator order <nl> + assertRows ( execute ( " SELECT b , c , d FROM % s WHERE a = 1 ORDER BY b DESC ; " ) , <nl> + row ( 3 , 3 , 0 ) , <nl> + row ( 2 , 2 , 0 ) , <nl> + row ( 1 , 1 , 0 ) ) ; <nl> + <nl> + / / read in reverse comparator order <nl> + assertRows ( execute ( " SELECT b , c , d FROM % s WHERE a = 1 ORDER BY b ASC ; " ) , <nl> + row ( 1 , 1 , 0 ) , <nl> + row ( 2 , 2 , 0 ) , <nl> + row ( 3 , 3 , 0 ) ) ; <nl> + <nl> + flush ( ) ; <nl> + <nl> + / / read in comparator order <nl> + assertRows ( execute ( " SELECT b , c , d FROM % s WHERE a = 1 ORDER BY b DESC ; " ) , <nl> + row ( 3 , 3 , 0 ) , <nl> + row ( 2 , 2 , 0 ) , <nl> + row ( 1 , 1 , 0 ) ) ; <nl> + <nl> + / / read in reverse comparator order <nl> + assertRows ( execute ( " SELECT b , c , d FROM % s WHERE a = 1 ORDER BY b ASC ; " ) , <nl> + row ( 1 , 1 , 0 ) , <nl> + row ( 2 , 2 , 0 ) , <nl> + row ( 3 , 3 , 0 ) ) ; <nl> + } <nl> + <nl> private boolean isFirstIntSorted ( Object [ ] [ ] rows ) <nl> { <nl> for ( int i = 1 ; i < rows . length ; i + + )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index bca036d . . b989f3c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 2 . 2 . 14 
 + * Don ' t skip entire sstables when reading backwards with mixed clustering column order 
 + ( CASSANDRA - 14910 ) 
 * Cannot perform slice reads in reverse direction against tables with clustering columns 
 in mixed order ( CASSANDRA - 14899 ) 
 * Fix incorrect cqlsh results when selecting same columns multiple times ( CASSANDRA - 13262 ) 
 diff - - git a / src / java / org / apache / cassandra / db / filter / ColumnSlice . java b / src / java / org / apache / cassandra / db / filter / ColumnSlice . java 
 index 1cc348c . . 316226d 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / ColumnSlice . java 
 + + + b / src / java / org / apache / cassandra / db / filter / ColumnSlice . java 
 @ @ - 68 , 7 + 68 , 10 @ @ public class ColumnSlice 
 Composite sStart = reversed ? finish : start ; 
 Composite sEnd = reversed ? start : finish ; 
 
 - if ( compare ( sStart , maxCellNames , comparator , true ) > 0 | | compare ( sEnd , minCellNames , comparator , false ) < 0 ) 
 + / / don ' t compare static slice bounds with min / max cell names to determine intersection - that can yield unexpected 
 + / / results , in particular with ReverseType comparators ; see CASSANDRA - 14910 for more context . 
 + if ( ( ! sStart . isStatic ( ) & & compare ( sStart , maxCellNames , comparator , true ) > 0 ) 
 + | | ( ! sEnd . isStatic ( ) & & compare ( sEnd , minCellNames , comparator , false ) < 0 ) ) 
 return false ; 
 
 / / We could safely return true here , but there ' s a minor optimization : if the first component is restricted 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderByTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderByTest . java 
 index 32d800a . . e21074b 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderByTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderByTest . java 
 @ @ - 732 , 6 + 732 , 84 @ @ public class SelectOrderByTest extends CQLTester 
 } 
 } 
 
 + @ Test 
 + public void testSelectWithReversedTypeInReverseOrderWithStaticColumnsWithoutStaticRow ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int static , PRIMARY KEY ( a , b ) ) WITH CLUSTERING ORDER BY ( b DESC ) ; " ) ; 
 + 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 1 , 1 ) ; " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 2 , 2 ) ; " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 3 , 3 ) ; " ) ; 
 + 
 + / / read in comparator order 
 + assertRows ( execute ( " SELECT b , c FROM % s WHERE a = 1 ORDER BY b DESC ; " ) , 
 + row ( 3 , 3 ) , 
 + row ( 2 , 2 ) , 
 + row ( 1 , 1 ) ) ; 
 + 
 + / / read in reverse comparator order 
 + assertRows ( execute ( " SELECT b , c FROM % s WHERE a = 1 ORDER BY b ASC ; " ) , 
 + row ( 1 , 1 ) , 
 + row ( 2 , 2 ) , 
 + row ( 3 , 3 ) ) ; 
 + 
 + / * 
 + * Flush the sstable . We * should * see the same results when reading in both directions , but prior to CASSANDRA - 14910 
 + * fix this would now have returned an empty result set when reading in reverse comparator order . 
 + * / 
 + flush ( ) ; 
 + 
 + / / read in comparator order 
 + assertRows ( execute ( " SELECT b , c FROM % s WHERE a = 1 ORDER BY b DESC ; " ) , 
 + row ( 3 , 3 ) , 
 + row ( 2 , 2 ) , 
 + row ( 1 , 1 ) ) ; 
 + 
 + / / read in reverse comparator order 
 + assertRows ( execute ( " SELECT b , c FROM % s WHERE a = 1 ORDER BY b ASC ; " ) , 
 + row ( 1 , 1 ) , 
 + row ( 2 , 2 ) , 
 + row ( 3 , 3 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testSelectWithReversedTypeInReverseOrderWithStaticColumnsWithStaticRow ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int static , PRIMARY KEY ( a , b ) ) WITH CLUSTERING ORDER BY ( b DESC ) " ) ; 
 + 
 + execute ( " INSERT INTO % s ( a , d ) VALUES ( 1 , 0 ) ; " ) ; 
 + 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 1 , 1 ) ; " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 2 , 2 ) ; " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 3 , 3 ) ; " ) ; 
 + 
 + / / read in comparator order 
 + assertRows ( execute ( " SELECT b , c , d FROM % s WHERE a = 1 ORDER BY b DESC ; " ) , 
 + row ( 3 , 3 , 0 ) , 
 + row ( 2 , 2 , 0 ) , 
 + row ( 1 , 1 , 0 ) ) ; 
 + 
 + / / read in reverse comparator order 
 + assertRows ( execute ( " SELECT b , c , d FROM % s WHERE a = 1 ORDER BY b ASC ; " ) , 
 + row ( 1 , 1 , 0 ) , 
 + row ( 2 , 2 , 0 ) , 
 + row ( 3 , 3 , 0 ) ) ; 
 + 
 + flush ( ) ; 
 + 
 + / / read in comparator order 
 + assertRows ( execute ( " SELECT b , c , d FROM % s WHERE a = 1 ORDER BY b DESC ; " ) , 
 + row ( 3 , 3 , 0 ) , 
 + row ( 2 , 2 , 0 ) , 
 + row ( 1 , 1 , 0 ) ) ; 
 + 
 + / / read in reverse comparator order 
 + assertRows ( execute ( " SELECT b , c , d FROM % s WHERE a = 1 ORDER BY b ASC ; " ) , 
 + row ( 1 , 1 , 0 ) , 
 + row ( 2 , 2 , 0 ) , 
 + row ( 3 , 3 , 0 ) ) ; 
 + } 
 + 
 private boolean isFirstIntSorted ( Object [ ] [ ] rows ) 
 { 
 for ( int i = 1 ; i < rows . length ; i + + )

NEAREST DIFF:
ELIMINATEDSENTENCE
