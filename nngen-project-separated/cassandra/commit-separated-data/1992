BLEU SCORE: 0.010418644977434674

TEST MSG: add check of the system wall clock time at startup
GENERATED MSG: Backport from 2 . 0 - Expose whether jna is enabled and memory is locked via JMX

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6caa5c7 . . 6517c6a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 3 <nl> + * add check of the system wall clock time at startup ( CASSANDRA - 8305 ) <nl> * Support for frozen collections ( CASSANDRA - 7859 ) <nl> * Fix overflow on histogram computation ( CASSANDRA - 8028 ) <nl> * Have paxos reuse the timestamp generation of normal queries ( CASSANDRA - 7801 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index 38d0414 . . 5897a22 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import java . lang . management . MemoryPoolMXBean ; <nl> import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . Arrays ; <nl> + import java . util . Date ; <nl> import java . util . Map ; <nl> import java . util . UUID ; <nl> import java . util . concurrent . TimeUnit ; <nl> @ @ - 72 , 6 + 73 , 13 @ @ public class CassandraDaemon <nl> <nl> private static final CassandraDaemon instance = new CassandraDaemon ( ) ; <nl> <nl> + / * * <nl> + * The earliest legit timestamp a casandra instance could have ever launched . <nl> + * Date roughly taken from http : / / perspectives . mvdirona . com / 2008 / 07 / 12 / FacebookReleasesCassandraAsOpenSource . aspx <nl> + * We use this to ensure the system clock is at least somewhat correct at startup . <nl> + * / <nl> + private static final long EARLIEST _ LAUNCH _ DATE = 1215820800000L ; <nl> + <nl> public Server thriftServer ; <nl> public Server nativeServer ; <nl> <nl> @ @ - 92 , 6 + 100 , 14 @ @ public class CassandraDaemon <nl> { <nl> logger . info ( " Could not resolve local host " ) ; <nl> } <nl> + <nl> + long now = System . currentTimeMillis ( ) ; <nl> + if ( now < EARLIEST _ LAUNCH _ DATE ) <nl> + { <nl> + logger . error ( " current machine time is { } , but that is seemingly incorrect . exiting now . " , new Date ( now ) ) ; <nl> + System . exit ( 3 ) ; <nl> + } <nl> + <nl> / / log warnings for different kinds of sub - optimal JVMs . tldr use 64 - bit Oracle > = 1 . 6u32 <nl> if ( ! DatabaseDescriptor . hasLargeAddressSpace ( ) ) <nl> logger . info ( " 32bit JVM detected . It is recommended to run Cassandra on a 64bit JVM for better performance . " ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / BatchlogManager . java b / src / java / org / apache / cassandra / db / BatchlogManager . java <nl> index 48d86e3 . . 9d46739 100644 <nl> - - - a / src / java / org / apache / cassandra / db / BatchlogManager . java <nl> + + + b / src / java / org / apache / cassandra / db / BatchlogManager . java <nl> @ @ - 203 , 7 + 203 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean <nl> * We try to deliver the mutations to the replicas ourselves if they are alive and only resort to writing hints <nl> * when a replica is down or a write request times out . <nl> * / <nl> - private void replaySerializedMutation ( RowMutation mutation , long writtenAt ) throws IOException <nl> + private void replaySerializedMutation ( RowMutation mutation , long writtenAt ) <nl> { <nl> int ttl = calculateHintTTL ( mutation , writtenAt ) ; <nl> if ( ttl < = 0 ) <nl> @ @ - 211 , 7 + 211 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean <nl> <nl> Set < InetAddress > liveEndpoints = new HashSet < InetAddress > ( ) ; <nl> String ks = mutation . getTable ( ) ; <nl> - Token tk = StorageService . getPartitioner ( ) . getToken ( mutation . key ( ) ) ; <nl> + Token < ? > tk = StorageService . getPartitioner ( ) . getToken ( mutation . key ( ) ) ; <nl> for ( InetAddress endpoint : Iterables . concat ( StorageService . instance . getNaturalEndpoints ( ks , tk ) , <nl> StorageService . instance . getTokenMetadata ( ) . pendingEndpointsFor ( tk , ks ) ) ) <nl> { <nl> @ @ - 227 , 7 + 227 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean <nl> attemptDirectDelivery ( mutation , writtenAt , liveEndpoints ) ; <nl> } <nl> <nl> - private void attemptDirectDelivery ( RowMutation mutation , long writtenAt , Set < InetAddress > endpoints ) throws IOException <nl> + private void attemptDirectDelivery ( RowMutation mutation , long writtenAt , Set < InetAddress > endpoints ) <nl> { <nl> List < WriteResponseHandler > handlers = Lists . newArrayList ( ) ; <nl> final CopyOnWriteArraySet < InetAddress > undelivered = new CopyOnWriteArraySet < InetAddress > ( endpoints ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6caa5c7 . . 6517c6a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 3 
 + * add check of the system wall clock time at startup ( CASSANDRA - 8305 ) 
 * Support for frozen collections ( CASSANDRA - 7859 ) 
 * Fix overflow on histogram computation ( CASSANDRA - 8028 ) 
 * Have paxos reuse the timestamp generation of normal queries ( CASSANDRA - 7801 ) 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index 38d0414 . . 5897a22 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import java . lang . management . MemoryPoolMXBean ; 
 import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . Arrays ; 
 + import java . util . Date ; 
 import java . util . Map ; 
 import java . util . UUID ; 
 import java . util . concurrent . TimeUnit ; 
 @ @ - 72 , 6 + 73 , 13 @ @ public class CassandraDaemon 
 
 private static final CassandraDaemon instance = new CassandraDaemon ( ) ; 
 
 + / * * 
 + * The earliest legit timestamp a casandra instance could have ever launched . 
 + * Date roughly taken from http : / / perspectives . mvdirona . com / 2008 / 07 / 12 / FacebookReleasesCassandraAsOpenSource . aspx 
 + * We use this to ensure the system clock is at least somewhat correct at startup . 
 + * / 
 + private static final long EARLIEST _ LAUNCH _ DATE = 1215820800000L ; 
 + 
 public Server thriftServer ; 
 public Server nativeServer ; 
 
 @ @ - 92 , 6 + 100 , 14 @ @ public class CassandraDaemon 
 { 
 logger . info ( " Could not resolve local host " ) ; 
 } 
 + 
 + long now = System . currentTimeMillis ( ) ; 
 + if ( now < EARLIEST _ LAUNCH _ DATE ) 
 + { 
 + logger . error ( " current machine time is { } , but that is seemingly incorrect . exiting now . " , new Date ( now ) ) ; 
 + System . exit ( 3 ) ; 
 + } 
 + 
 / / log warnings for different kinds of sub - optimal JVMs . tldr use 64 - bit Oracle > = 1 . 6u32 
 if ( ! DatabaseDescriptor . hasLargeAddressSpace ( ) ) 
 logger . info ( " 32bit JVM detected . It is recommended to run Cassandra on a 64bit JVM for better performance . " ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / BatchlogManager . java b / src / java / org / apache / cassandra / db / BatchlogManager . java 
 index 48d86e3 . . 9d46739 100644 
 - - - a / src / java / org / apache / cassandra / db / BatchlogManager . java 
 + + + b / src / java / org / apache / cassandra / db / BatchlogManager . java 
 @ @ - 203 , 7 + 203 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean 
 * We try to deliver the mutations to the replicas ourselves if they are alive and only resort to writing hints 
 * when a replica is down or a write request times out . 
 * / 
 - private void replaySerializedMutation ( RowMutation mutation , long writtenAt ) throws IOException 
 + private void replaySerializedMutation ( RowMutation mutation , long writtenAt ) 
 { 
 int ttl = calculateHintTTL ( mutation , writtenAt ) ; 
 if ( ttl < = 0 ) 
 @ @ - 211 , 7 + 211 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean 
 
 Set < InetAddress > liveEndpoints = new HashSet < InetAddress > ( ) ; 
 String ks = mutation . getTable ( ) ; 
 - Token tk = StorageService . getPartitioner ( ) . getToken ( mutation . key ( ) ) ; 
 + Token < ? > tk = StorageService . getPartitioner ( ) . getToken ( mutation . key ( ) ) ; 
 for ( InetAddress endpoint : Iterables . concat ( StorageService . instance . getNaturalEndpoints ( ks , tk ) , 
 StorageService . instance . getTokenMetadata ( ) . pendingEndpointsFor ( tk , ks ) ) ) 
 { 
 @ @ - 227 , 7 + 227 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean 
 attemptDirectDelivery ( mutation , writtenAt , liveEndpoints ) ; 
 } 
 
 - private void attemptDirectDelivery ( RowMutation mutation , long writtenAt , Set < InetAddress > endpoints ) throws IOException 
 + private void attemptDirectDelivery ( RowMutation mutation , long writtenAt , Set < InetAddress > endpoints ) 
 { 
 List < WriteResponseHandler > handlers = Lists . newArrayList ( ) ; 
 final CopyOnWriteArraySet < InetAddress > undelivered = new CopyOnWriteArraySet < InetAddress > ( endpoints ) ;
