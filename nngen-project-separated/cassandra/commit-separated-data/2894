BLEU SCORE: 0.015445276590783498

TEST MSG: warn about sync delays every 5s instead of as - it - happens
GENERATED MSG: apply disk _ failure _ policy to bad disks on initial directory creation

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java <nl> index 2f9b236 . . caa2c65 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java <nl> @ @ - 28 , 6 + 28 , 9 @ @ import static org . apache . cassandra . db . commitlog . CommitLogSegment . Allocation ; <nl> <nl> public abstract class AbstractCommitLogService <nl> { <nl> + / / how often should we log syngs that lag behind our desired period <nl> + private static final long LAG _ REPORT _ INTERVAL = TimeUnit . MINUTES . toMillis ( 5 ) ; <nl> + <nl> private final Thread thread ; <nl> private volatile boolean shutdown = false ; <nl> <nl> @ @ - 59 , 6 + 62 , 12 @ @ public abstract class AbstractCommitLogService <nl> { <nl> public void run ( ) <nl> { <nl> + long firstLagAt = 0 ; <nl> + long totalSyncDuration = 0 ; / / total time spent syncing since firstLagAt <nl> + long syncExceededIntervalBy = 0 ; / / time that syncs exceeded pollInterval since firstLagAt <nl> + int lagCount = 0 ; <nl> + int syncCount = 0 ; <nl> + <nl> boolean run = true ; <nl> while ( run ) <nl> { <nl> @ @ - 73 , 14 + 82 , 35 @ @ public abstract class AbstractCommitLogService <nl> lastSyncedAt = syncStarted ; <nl> syncComplete . signalAll ( ) ; <nl> <nl> + <nl> / / sleep any time we have left before the next one is due <nl> - long sleep = syncStarted + pollIntervalMillis - System . currentTimeMillis ( ) ; <nl> + long now = System . currentTimeMillis ( ) ; <nl> + long sleep = syncStarted + pollIntervalMillis - now ; <nl> if ( sleep < 0 ) <nl> { <nl> - logger . warn ( String . format ( " Commit log sync took longer than sync interval ( by % . 2fs ) , indicating it is a bottleneck " , sleep / - 1000d ) ) ; <nl> - / / don ' t sleep , as we probably have work to do <nl> - continue ; <nl> + / / if we have lagged noticeably , update our lag counter <nl> + if ( firstLagAt = = 0 ) <nl> + { <nl> + firstLagAt = now ; <nl> + totalSyncDuration = syncExceededIntervalBy = syncCount = lagCount = 0 ; <nl> + } <nl> + syncExceededIntervalBy - = sleep ; <nl> + lagCount + + ; <nl> } <nl> + syncCount + + ; <nl> + totalSyncDuration + = now - syncStarted ; <nl> + <nl> + if ( firstLagAt > 0 & & now - firstLagAt > = LAG _ REPORT _ INTERVAL ) <nl> + { <nl> + logger . warn ( String . format ( " Out of % d commit log syncs over the past % ds with average duration of % . 2fms , % d have exceeded the configured commit interval by an average of % . 2fms " , <nl> + syncCount , ( now - firstLagAt ) / 1000 , ( double ) totalSyncDuration / syncCount , lagCount , ( double ) syncExceededIntervalBy / lagCount ) ) ; <nl> + firstLagAt = 0 ; <nl> + } <nl> + <nl> + / / if we have lagged this round , we probably have work to do already so we don ' t sleep <nl> + if ( sleep < 0 ) <nl> + continue ; <nl> + <nl> try <nl> { <nl> haveWork . tryAcquire ( sleep , TimeUnit . MILLISECONDS ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java <nl> index c42ba9b . . dff423a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java <nl> @ @ - 260 , 7 + 260 , 7 @ @ public class CommitLogReplayer <nl> break ; <nl> <nl> if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " Replaying { } between { } and { } " , file , offset , prevEnd ) ; <nl> + logger . debug ( " Replaying { } between { } and { } " , file , offset , end ) ; <nl> <nl> reader . seek ( offset ) ; <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 43fe188 . . e6b1b95 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 1 . 8 <nl> + * fix temporarily missing schema after upgrade from pre - 1 . 1 . 5 ( CASSANDRA - 5061 ) <nl> * reduce log spam from invalid counter shards ( CASSANDRA - 5026 ) <nl> * Improve schema propagation performance ( CASSANDRA - 5025 ) <nl> * Fall back to old describe _ splits if d _ s _ ex is not available ( CASSANDRA - 4803 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / DefsTable . java b / src / java / org / apache / cassandra / db / DefsTable . java <nl> index 4d6b574 . . d564eaf 100644 <nl> - - - a / src / java / org / apache / cassandra / db / DefsTable . java <nl> + + + b / src / java / org / apache / cassandra / db / DefsTable . java <nl> @ @ - 244 , 6 + 244 , 19 @ @ public class DefsTable <nl> <nl> mutation . apply ( ) ; <nl> } <nl> + / / flush immediately because we read schema before replaying the commitlog <nl> + try <nl> + { <nl> + cfs . forceBlockingFlush ( ) ; <nl> + } <nl> + catch ( ExecutionException e ) <nl> + { <nl> + throw new RuntimeException ( " Could not flush after fixing schema timestamps " , e ) ; <nl> + } <nl> + catch ( InterruptedException e ) <nl> + { <nl> + throw new AssertionError ( e ) ; <nl> + } <nl> } <nl> <nl> private static boolean invalidSchemaRow ( Row row )

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java 
 index 2f9b236 . . caa2c65 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java 
 @ @ - 28 , 6 + 28 , 9 @ @ import static org . apache . cassandra . db . commitlog . CommitLogSegment . Allocation ; 
 
 public abstract class AbstractCommitLogService 
 { 
 + / / how often should we log syngs that lag behind our desired period 
 + private static final long LAG _ REPORT _ INTERVAL = TimeUnit . MINUTES . toMillis ( 5 ) ; 
 + 
 private final Thread thread ; 
 private volatile boolean shutdown = false ; 
 
 @ @ - 59 , 6 + 62 , 12 @ @ public abstract class AbstractCommitLogService 
 { 
 public void run ( ) 
 { 
 + long firstLagAt = 0 ; 
 + long totalSyncDuration = 0 ; / / total time spent syncing since firstLagAt 
 + long syncExceededIntervalBy = 0 ; / / time that syncs exceeded pollInterval since firstLagAt 
 + int lagCount = 0 ; 
 + int syncCount = 0 ; 
 + 
 boolean run = true ; 
 while ( run ) 
 { 
 @ @ - 73 , 14 + 82 , 35 @ @ public abstract class AbstractCommitLogService 
 lastSyncedAt = syncStarted ; 
 syncComplete . signalAll ( ) ; 
 
 + 
 / / sleep any time we have left before the next one is due 
 - long sleep = syncStarted + pollIntervalMillis - System . currentTimeMillis ( ) ; 
 + long now = System . currentTimeMillis ( ) ; 
 + long sleep = syncStarted + pollIntervalMillis - now ; 
 if ( sleep < 0 ) 
 { 
 - logger . warn ( String . format ( " Commit log sync took longer than sync interval ( by % . 2fs ) , indicating it is a bottleneck " , sleep / - 1000d ) ) ; 
 - / / don ' t sleep , as we probably have work to do 
 - continue ; 
 + / / if we have lagged noticeably , update our lag counter 
 + if ( firstLagAt = = 0 ) 
 + { 
 + firstLagAt = now ; 
 + totalSyncDuration = syncExceededIntervalBy = syncCount = lagCount = 0 ; 
 + } 
 + syncExceededIntervalBy - = sleep ; 
 + lagCount + + ; 
 } 
 + syncCount + + ; 
 + totalSyncDuration + = now - syncStarted ; 
 + 
 + if ( firstLagAt > 0 & & now - firstLagAt > = LAG _ REPORT _ INTERVAL ) 
 + { 
 + logger . warn ( String . format ( " Out of % d commit log syncs over the past % ds with average duration of % . 2fms , % d have exceeded the configured commit interval by an average of % . 2fms " , 
 + syncCount , ( now - firstLagAt ) / 1000 , ( double ) totalSyncDuration / syncCount , lagCount , ( double ) syncExceededIntervalBy / lagCount ) ) ; 
 + firstLagAt = 0 ; 
 + } 
 + 
 + / / if we have lagged this round , we probably have work to do already so we don ' t sleep 
 + if ( sleep < 0 ) 
 + continue ; 
 + 
 try 
 { 
 haveWork . tryAcquire ( sleep , TimeUnit . MILLISECONDS ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java 
 index c42ba9b . . dff423a 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java 
 @ @ - 260 , 7 + 260 , 7 @ @ public class CommitLogReplayer 
 break ; 
 
 if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " Replaying { } between { } and { } " , file , offset , prevEnd ) ; 
 + logger . debug ( " Replaying { } between { } and { } " , file , offset , end ) ; 
 
 reader . seek ( offset ) ; 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 43fe188 . . e6b1b95 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 1 . 8 
 + * fix temporarily missing schema after upgrade from pre - 1 . 1 . 5 ( CASSANDRA - 5061 ) 
 * reduce log spam from invalid counter shards ( CASSANDRA - 5026 ) 
 * Improve schema propagation performance ( CASSANDRA - 5025 ) 
 * Fall back to old describe _ splits if d _ s _ ex is not available ( CASSANDRA - 4803 ) 
 diff - - git a / src / java / org / apache / cassandra / db / DefsTable . java b / src / java / org / apache / cassandra / db / DefsTable . java 
 index 4d6b574 . . d564eaf 100644 
 - - - a / src / java / org / apache / cassandra / db / DefsTable . java 
 + + + b / src / java / org / apache / cassandra / db / DefsTable . java 
 @ @ - 244 , 6 + 244 , 19 @ @ public class DefsTable 
 
 mutation . apply ( ) ; 
 } 
 + / / flush immediately because we read schema before replaying the commitlog 
 + try 
 + { 
 + cfs . forceBlockingFlush ( ) ; 
 + } 
 + catch ( ExecutionException e ) 
 + { 
 + throw new RuntimeException ( " Could not flush after fixing schema timestamps " , e ) ; 
 + } 
 + catch ( InterruptedException e ) 
 + { 
 + throw new AssertionError ( e ) ; 
 + } 
 } 
 
 private static boolean invalidSchemaRow ( Row row )
