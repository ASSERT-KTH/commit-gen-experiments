BLEU SCORE: 0.027611988917697356

TEST MSG: Add ability to limit number of native connections
GENERATED MSG: merge from 0 . 6

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f98bb3f . . 4e34c9e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 13 : <nl> + * Add ability to limit number of native connections ( CASSANDRA - 8086 ) <nl> * Add offline tool to relevel sstables ( CASSANDRA - 8301 ) <nl> * Preserve stream ID for more protocol errors ( CASSANDRA - 8848 ) <nl> * Fix combining token ( ) function with multi - column relations on <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index 163ae9e . . f99ade1 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 332 , 6 + 332 , 14 @ @ native _ transport _ port : 9042 <nl> # be rejected as invalid . The default is 256MB . <nl> # native _ transport _ max _ frame _ size _ in _ mb : 256 <nl> <nl> + # The maximum number of concurrent client connections . <nl> + # The default is - 1 , which means unlimited . <nl> + # native _ transport _ max _ concurrent _ connections : - 1 <nl> + <nl> + # The maximum number of concurrent client connections per source ip . <nl> + # The default is - 1 , which means unlimited . <nl> + # native _ transport _ max _ concurrent _ connections _ per _ ip : - 1 <nl> + <nl> # Whether to start the thrift rpc server . <nl> start _ rpc : true <nl> <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 4dd71aa . . 3c223e3 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 112 , 6 + 112 , 8 @ @ public class Config <nl> public Integer native _ transport _ port = 9042 ; <nl> public Integer native _ transport _ max _ threads = 128 ; <nl> public Integer native _ transport _ max _ frame _ size _ in _ mb = 256 ; <nl> + public volatile Long native _ transport _ max _ concurrent _ connections = - 1L ; <nl> + public volatile Long native _ transport _ max _ concurrent _ connections _ per _ ip = - 1L ; <nl> <nl> @ Deprecated <nl> public Integer thrift _ max _ message _ length _ in _ mb = 16 ; <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 286014e . . b3b10c1 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 1108 , 6 + 1108 , 25 @ @ public class DatabaseDescriptor <nl> return conf . native _ transport _ max _ frame _ size _ in _ mb * 1024 * 1024 ; <nl> } <nl> <nl> + public static Long getNativeTransportMaxConcurrentConnections ( ) <nl> + { <nl> + return conf . native _ transport _ max _ concurrent _ connections ; <nl> + } <nl> + <nl> + public static void setNativeTransportMaxConcurrentConnections ( long nativeTransportMaxConcurrentConnections ) <nl> + { <nl> + conf . native _ transport _ max _ concurrent _ connections = nativeTransportMaxConcurrentConnections ; <nl> + } <nl> + <nl> + public static Long getNativeTransportMaxConcurrentConnectionsPerIp ( ) { <nl> + return conf . native _ transport _ max _ concurrent _ connections _ per _ ip ; <nl> + } <nl> + <nl> + public static void setNativeTransportMaxConcurrentConnectionsPerIp ( long native _ transport _ max _ concurrent _ connections _ per _ ip ) <nl> + { <nl> + conf . native _ transport _ max _ concurrent _ connections _ per _ ip = native _ transport _ max _ concurrent _ connections _ per _ ip ; <nl> + } <nl> + <nl> public static double getCommitLogSyncBatchWindow ( ) <nl> { <nl> return conf . commitlog _ sync _ batch _ window _ in _ ms ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index fcc9665 . . d033929 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 2125 , 9 + 2125 , 15 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> public Long getTruncateRpcTimeout ( ) { return DatabaseDescriptor . getTruncateRpcTimeout ( ) ; } <nl> public void setTruncateRpcTimeout ( Long timeoutInMillis ) { DatabaseDescriptor . setTruncateRpcTimeout ( timeoutInMillis ) ; } <nl> + <nl> + public Long getNativeTransportMaxConcurrentConnections ( ) { return DatabaseDescriptor . getNativeTransportMaxConcurrentConnections ( ) ; } <nl> + public void setNativeTransportMaxConcurrentConnections ( Long nativeTransportMaxConcurrentConnections ) { DatabaseDescriptor . setNativeTransportMaxConcurrentConnections ( nativeTransportMaxConcurrentConnections ) ; } <nl> + <nl> + public Long getNativeTransportMaxConcurrentConnectionsPerIp ( ) { return DatabaseDescriptor . getNativeTransportMaxConcurrentConnectionsPerIp ( ) ; } <nl> + public void setNativeTransportMaxConcurrentConnectionsPerIp ( Long nativeTransportMaxConcurrentConnections ) { DatabaseDescriptor . setNativeTransportMaxConcurrentConnectionsPerIp ( nativeTransportMaxConcurrentConnections ) ; } <nl> + <nl> public void reloadTriggerClasses ( ) { TriggerExecutor . instance . reloadClasses ( ) ; } <nl> <nl> - <nl> public long getReadRepairAttempted ( ) { <nl> return ReadRepairMetrics . attempted . count ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxyMBean . java b / src / java / org / apache / cassandra / service / StorageProxyMBean . java <nl> index 203cabe . . 03b9b58 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxyMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxyMBean . java <nl> @ @ - 95 , 6 + 95 , 9 @ @ public interface StorageProxyMBean <nl> public Long getTruncateRpcTimeout ( ) ; <nl> public void setTruncateRpcTimeout ( Long timeoutInMillis ) ; <nl> <nl> + public void setNativeTransportMaxConcurrentConnections ( Long nativeTransportMaxConcurrentConnections ) ; <nl> + public Long getNativeTransportMaxConcurrentConnections ( ) ; <nl> + <nl> public void reloadTriggerClasses ( ) ; <nl> <nl> public long getReadRepairAttempted ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / transport / ConnectionLimitHandler . java b / src / java / org / apache / cassandra / transport / ConnectionLimitHandler . java <nl> new file mode 100644 <nl> index 0000000 . . c45d2cb <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / transport / ConnectionLimitHandler . java <nl> @ @ - 0 , 0 + 1 , 111 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . transport ; <nl> + <nl> + <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . jboss . netty . channel . ChannelHandler ; <nl> + import org . jboss . netty . channel . ChannelHandlerContext ; <nl> + import org . jboss . netty . channel . ChannelStateEvent ; <nl> + import org . jboss . netty . channel . SimpleChannelUpstreamHandler ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import java . net . InetAddress ; <nl> + import java . net . InetSocketAddress ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + import java . util . concurrent . ConcurrentHashMap ; <nl> + import java . util . concurrent . ConcurrentMap ; <nl> + import java . util . concurrent . atomic . AtomicLong ; <nl> + <nl> + <nl> + / * * <nl> + * { @ link SimpleChannelUpstreamHandler } implementation which allows to limit the number of concurrent <nl> + * connections to the Server . Be aware this < strong > MUST < / strong > be shared between all child channels . <nl> + * / <nl> + @ ChannelHandler . Sharable <nl> + final class ConnectionLimitHandler extends SimpleChannelUpstreamHandler <nl> + { <nl> + private static final Logger logger = LoggerFactory . getLogger ( ConnectionLimitHandler . class ) ; <nl> + private final ConcurrentMap < InetAddress , AtomicLong > connectionsPerClient = new ConcurrentHashMap < > ( ) ; <nl> + private final AtomicLong counter = new AtomicLong ( 0 ) ; <nl> + <nl> + @ Override <nl> + public void channelOpen ( ChannelHandlerContext ctx , ChannelStateEvent event ) throws Exception <nl> + { <nl> + final long count = counter . incrementAndGet ( ) ; <nl> + long limit = DatabaseDescriptor . getNativeTransportMaxConcurrentConnections ( ) ; <nl> + / / Setting the limit to - 1 disables it . <nl> + if ( limit < 0 ) <nl> + { <nl> + limit = Long . MAX _ VALUE ; <nl> + } <nl> + if ( count > limit ) <nl> + { <nl> + / / The decrement will be done in channelClosed ( . . . ) <nl> + logger . warn ( " Exceeded maximum native connection limit of { } by using { } connections " , limit , count ) ; <nl> + ctx . getChannel ( ) . close ( ) ; <nl> + } <nl> + else <nl> + { <nl> + long perIpLimit = DatabaseDescriptor . getNativeTransportMaxConcurrentConnectionsPerIp ( ) ; <nl> + if ( perIpLimit > 0 ) <nl> + { <nl> + InetAddress address = ( ( InetSocketAddress ) ctx . getChannel ( ) . getRemoteAddress ( ) ) . getAddress ( ) ; <nl> + <nl> + AtomicLong perIpCount = connectionsPerClient . get ( address ) ; <nl> + if ( perIpCount = = null ) <nl> + { <nl> + perIpCount = new AtomicLong ( 0 ) ; <nl> + <nl> + AtomicLong old = connectionsPerClient . putIfAbsent ( address , perIpCount ) ; <nl> + if ( old ! = null ) <nl> + { <nl> + perIpCount = old ; <nl> + } <nl> + } <nl> + if ( perIpCount . incrementAndGet ( ) > perIpLimit ) <nl> + { <nl> + / / The decrement will be done in channelClosed ( . . . ) <nl> + logger . warn ( " Exceeded maximum native connection limit per ip of { } by using { } connections " , perIpLimit , perIpCount ) ; <nl> + ctx . getChannel ( ) . close ( ) ; <nl> + return ; <nl> + } <nl> + } <nl> + super . channelOpen ( ctx , event ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void channelClosed ( ChannelHandlerContext ctx , ChannelStateEvent event ) throws Exception <nl> + { <nl> + counter . decrementAndGet ( ) ; <nl> + InetAddress address = ( ( InetSocketAddress ) ctx . getChannel ( ) . getRemoteAddress ( ) ) . getAddress ( ) ; <nl> + <nl> + AtomicLong count = connectionsPerClient . get ( address ) ; <nl> + if ( count ! = null ) <nl> + { <nl> + if ( count . decrementAndGet ( ) < = 0 ) <nl> + { <nl> + connectionsPerClient . remove ( address ) ; <nl> + } <nl> + } <nl> + super . channelClosed ( ctx , event ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index df4f127 . . 30b8a9d 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 240 , 6 + 240 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> private static final Frame . Compressor frameCompressor = new Frame . Compressor ( ) ; <nl> private static final Frame . Encoder frameEncoder = new Frame . Encoder ( ) ; <nl> private static final Message . Dispatcher dispatcher = new Message . Dispatcher ( ) ; <nl> + private static final ConnectionLimitHandler connectionLimitHandler = new ConnectionLimitHandler ( ) ; <nl> <nl> private final Server server ; <nl> <nl> @ @ - 252 , 6 + 253 , 14 @ @ public class Server implements CassandraDaemon . Server <nl> { <nl> ChannelPipeline pipeline = Channels . pipeline ( ) ; <nl> <nl> + / / Add the ConnectionLimitHandler to the pipeline if configured to do so . <nl> + if ( DatabaseDescriptor . getNativeTransportMaxConcurrentConnections ( ) > 0 <nl> + | | DatabaseDescriptor . getNativeTransportMaxConcurrentConnectionsPerIp ( ) > 0 ) <nl> + { <nl> + / / Add as first to the pipeline so the limit is enforced as first action . <nl> + pipeline . addFirst ( " connectionLimitHandler " , connectionLimitHandler ) ; <nl> + } <nl> + <nl> / / pipeline . addLast ( " debug " , new LoggingHandler ( ) ) ; <nl> <nl> pipeline . addLast ( " frameDecoder " , new Frame . Decoder ( server . connectionFactory ) ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 8d9e2ea . . c97b17f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 7 + 1 , 10 @ @ <nl> dev <nl> * sstable versioning ( CASSANDRA - 389 ) <nl> <nl> - 0 . 6 . 0 - dev <nl> + 0 . 6 . 0 - RC1 <nl> + * fix compaction bucketing bug ( CASSANDRA - 814 ) <nl> + <nl> + 0 . 6 . 0 - beta1 / beta2 <nl> * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) <nl> * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) <nl> * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) <nl> @ @ - 42 , 7 + 45 , 9 @ @ dev <nl> * allow larger numbers of keys ( > 140M ) in a sstable bloom filter <nl> ( CASSANDRA - 790 ) <nl> * include jvm argument improvements from CASSANDRA - 504 in debian package <nl> - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * change streaming chunk size to 32MB to accomodate Windows XP limitations <nl> + ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) <nl> <nl> <nl> 0 . 5 . 0 final <nl> diff - - git a / build . xml b / build . xml <nl> index ea79876 . . 54ef12d 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 314 , 6 + 314 , 7 @ @ <nl> < include name = " * * " / > <nl> < exclude name = " build / * * " / > <nl> < exclude name = " src / gen - java / * * " / > <nl> + < exclude name = " interface / avro / * * " / > <nl> < / tarfileset > <nl> < / tar > <nl> < / target > <nl> diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> index fbd5ebb . . 1b5b6b1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return 0 ; <nl> } <nl> logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; <nl> - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> <nl> for ( List < SSTableReader > sstables : buckets ) <nl> @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> / * <nl> * Group files of similar size into buckets . <nl> * / <nl> - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) <nl> + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) <nl> { <nl> Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; <nl> for ( SSTableReader sstable : files ) <nl> @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> / / remove and re - add because adding changes the hash <nl> buckets . remove ( bucket ) ; <nl> - averageSize = ( averageSize + size ) / 2 ; <nl> + long totalSize = bucket . size ( ) * averageSize ; <nl> + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; <nl> bucket . add ( sstable ) ; <nl> buckets . put ( bucket , averageSize ) ; <nl> bFound = true ; <nl> @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> public void run ( ) <nl> { <nl> logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; <nl> - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> } <nl> } ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f98bb3f . . 4e34c9e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 13 : 
 + * Add ability to limit number of native connections ( CASSANDRA - 8086 ) 
 * Add offline tool to relevel sstables ( CASSANDRA - 8301 ) 
 * Preserve stream ID for more protocol errors ( CASSANDRA - 8848 ) 
 * Fix combining token ( ) function with multi - column relations on 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index 163ae9e . . f99ade1 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 332 , 6 + 332 , 14 @ @ native _ transport _ port : 9042 
 # be rejected as invalid . The default is 256MB . 
 # native _ transport _ max _ frame _ size _ in _ mb : 256 
 
 + # The maximum number of concurrent client connections . 
 + # The default is - 1 , which means unlimited . 
 + # native _ transport _ max _ concurrent _ connections : - 1 
 + 
 + # The maximum number of concurrent client connections per source ip . 
 + # The default is - 1 , which means unlimited . 
 + # native _ transport _ max _ concurrent _ connections _ per _ ip : - 1 
 + 
 # Whether to start the thrift rpc server . 
 start _ rpc : true 
 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 4dd71aa . . 3c223e3 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 112 , 6 + 112 , 8 @ @ public class Config 
 public Integer native _ transport _ port = 9042 ; 
 public Integer native _ transport _ max _ threads = 128 ; 
 public Integer native _ transport _ max _ frame _ size _ in _ mb = 256 ; 
 + public volatile Long native _ transport _ max _ concurrent _ connections = - 1L ; 
 + public volatile Long native _ transport _ max _ concurrent _ connections _ per _ ip = - 1L ; 
 
 @ Deprecated 
 public Integer thrift _ max _ message _ length _ in _ mb = 16 ; 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 286014e . . b3b10c1 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 1108 , 6 + 1108 , 25 @ @ public class DatabaseDescriptor 
 return conf . native _ transport _ max _ frame _ size _ in _ mb * 1024 * 1024 ; 
 } 
 
 + public static Long getNativeTransportMaxConcurrentConnections ( ) 
 + { 
 + return conf . native _ transport _ max _ concurrent _ connections ; 
 + } 
 + 
 + public static void setNativeTransportMaxConcurrentConnections ( long nativeTransportMaxConcurrentConnections ) 
 + { 
 + conf . native _ transport _ max _ concurrent _ connections = nativeTransportMaxConcurrentConnections ; 
 + } 
 + 
 + public static Long getNativeTransportMaxConcurrentConnectionsPerIp ( ) { 
 + return conf . native _ transport _ max _ concurrent _ connections _ per _ ip ; 
 + } 
 + 
 + public static void setNativeTransportMaxConcurrentConnectionsPerIp ( long native _ transport _ max _ concurrent _ connections _ per _ ip ) 
 + { 
 + conf . native _ transport _ max _ concurrent _ connections _ per _ ip = native _ transport _ max _ concurrent _ connections _ per _ ip ; 
 + } 
 + 
 public static double getCommitLogSyncBatchWindow ( ) 
 { 
 return conf . commitlog _ sync _ batch _ window _ in _ ms ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index fcc9665 . . d033929 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 2125 , 9 + 2125 , 15 @ @ public class StorageProxy implements StorageProxyMBean 
 
 public Long getTruncateRpcTimeout ( ) { return DatabaseDescriptor . getTruncateRpcTimeout ( ) ; } 
 public void setTruncateRpcTimeout ( Long timeoutInMillis ) { DatabaseDescriptor . setTruncateRpcTimeout ( timeoutInMillis ) ; } 
 + 
 + public Long getNativeTransportMaxConcurrentConnections ( ) { return DatabaseDescriptor . getNativeTransportMaxConcurrentConnections ( ) ; } 
 + public void setNativeTransportMaxConcurrentConnections ( Long nativeTransportMaxConcurrentConnections ) { DatabaseDescriptor . setNativeTransportMaxConcurrentConnections ( nativeTransportMaxConcurrentConnections ) ; } 
 + 
 + public Long getNativeTransportMaxConcurrentConnectionsPerIp ( ) { return DatabaseDescriptor . getNativeTransportMaxConcurrentConnectionsPerIp ( ) ; } 
 + public void setNativeTransportMaxConcurrentConnectionsPerIp ( Long nativeTransportMaxConcurrentConnections ) { DatabaseDescriptor . setNativeTransportMaxConcurrentConnectionsPerIp ( nativeTransportMaxConcurrentConnections ) ; } 
 + 
 public void reloadTriggerClasses ( ) { TriggerExecutor . instance . reloadClasses ( ) ; } 
 
 - 
 public long getReadRepairAttempted ( ) { 
 return ReadRepairMetrics . attempted . count ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxyMBean . java b / src / java / org / apache / cassandra / service / StorageProxyMBean . java 
 index 203cabe . . 03b9b58 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxyMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxyMBean . java 
 @ @ - 95 , 6 + 95 , 9 @ @ public interface StorageProxyMBean 
 public Long getTruncateRpcTimeout ( ) ; 
 public void setTruncateRpcTimeout ( Long timeoutInMillis ) ; 
 
 + public void setNativeTransportMaxConcurrentConnections ( Long nativeTransportMaxConcurrentConnections ) ; 
 + public Long getNativeTransportMaxConcurrentConnections ( ) ; 
 + 
 public void reloadTriggerClasses ( ) ; 
 
 public long getReadRepairAttempted ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / transport / ConnectionLimitHandler . java b / src / java / org / apache / cassandra / transport / ConnectionLimitHandler . java 
 new file mode 100644 
 index 0000000 . . c45d2cb 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / transport / ConnectionLimitHandler . java 
 @ @ - 0 , 0 + 1 , 111 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . transport ; 
 + 
 + 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . jboss . netty . channel . ChannelHandler ; 
 + import org . jboss . netty . channel . ChannelHandlerContext ; 
 + import org . jboss . netty . channel . ChannelStateEvent ; 
 + import org . jboss . netty . channel . SimpleChannelUpstreamHandler ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import java . net . InetAddress ; 
 + import java . net . InetSocketAddress ; 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 + import java . util . concurrent . ConcurrentHashMap ; 
 + import java . util . concurrent . ConcurrentMap ; 
 + import java . util . concurrent . atomic . AtomicLong ; 
 + 
 + 
 + / * * 
 + * { @ link SimpleChannelUpstreamHandler } implementation which allows to limit the number of concurrent 
 + * connections to the Server . Be aware this < strong > MUST < / strong > be shared between all child channels . 
 + * / 
 + @ ChannelHandler . Sharable 
 + final class ConnectionLimitHandler extends SimpleChannelUpstreamHandler 
 + { 
 + private static final Logger logger = LoggerFactory . getLogger ( ConnectionLimitHandler . class ) ; 
 + private final ConcurrentMap < InetAddress , AtomicLong > connectionsPerClient = new ConcurrentHashMap < > ( ) ; 
 + private final AtomicLong counter = new AtomicLong ( 0 ) ; 
 + 
 + @ Override 
 + public void channelOpen ( ChannelHandlerContext ctx , ChannelStateEvent event ) throws Exception 
 + { 
 + final long count = counter . incrementAndGet ( ) ; 
 + long limit = DatabaseDescriptor . getNativeTransportMaxConcurrentConnections ( ) ; 
 + / / Setting the limit to - 1 disables it . 
 + if ( limit < 0 ) 
 + { 
 + limit = Long . MAX _ VALUE ; 
 + } 
 + if ( count > limit ) 
 + { 
 + / / The decrement will be done in channelClosed ( . . . ) 
 + logger . warn ( " Exceeded maximum native connection limit of { } by using { } connections " , limit , count ) ; 
 + ctx . getChannel ( ) . close ( ) ; 
 + } 
 + else 
 + { 
 + long perIpLimit = DatabaseDescriptor . getNativeTransportMaxConcurrentConnectionsPerIp ( ) ; 
 + if ( perIpLimit > 0 ) 
 + { 
 + InetAddress address = ( ( InetSocketAddress ) ctx . getChannel ( ) . getRemoteAddress ( ) ) . getAddress ( ) ; 
 + 
 + AtomicLong perIpCount = connectionsPerClient . get ( address ) ; 
 + if ( perIpCount = = null ) 
 + { 
 + perIpCount = new AtomicLong ( 0 ) ; 
 + 
 + AtomicLong old = connectionsPerClient . putIfAbsent ( address , perIpCount ) ; 
 + if ( old ! = null ) 
 + { 
 + perIpCount = old ; 
 + } 
 + } 
 + if ( perIpCount . incrementAndGet ( ) > perIpLimit ) 
 + { 
 + / / The decrement will be done in channelClosed ( . . . ) 
 + logger . warn ( " Exceeded maximum native connection limit per ip of { } by using { } connections " , perIpLimit , perIpCount ) ; 
 + ctx . getChannel ( ) . close ( ) ; 
 + return ; 
 + } 
 + } 
 + super . channelOpen ( ctx , event ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void channelClosed ( ChannelHandlerContext ctx , ChannelStateEvent event ) throws Exception 
 + { 
 + counter . decrementAndGet ( ) ; 
 + InetAddress address = ( ( InetSocketAddress ) ctx . getChannel ( ) . getRemoteAddress ( ) ) . getAddress ( ) ; 
 + 
 + AtomicLong count = connectionsPerClient . get ( address ) ; 
 + if ( count ! = null ) 
 + { 
 + if ( count . decrementAndGet ( ) < = 0 ) 
 + { 
 + connectionsPerClient . remove ( address ) ; 
 + } 
 + } 
 + super . channelClosed ( ctx , event ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index df4f127 . . 30b8a9d 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 240 , 6 + 240 , 7 @ @ public class Server implements CassandraDaemon . Server 
 private static final Frame . Compressor frameCompressor = new Frame . Compressor ( ) ; 
 private static final Frame . Encoder frameEncoder = new Frame . Encoder ( ) ; 
 private static final Message . Dispatcher dispatcher = new Message . Dispatcher ( ) ; 
 + private static final ConnectionLimitHandler connectionLimitHandler = new ConnectionLimitHandler ( ) ; 
 
 private final Server server ; 
 
 @ @ - 252 , 6 + 253 , 14 @ @ public class Server implements CassandraDaemon . Server 
 { 
 ChannelPipeline pipeline = Channels . pipeline ( ) ; 
 
 + / / Add the ConnectionLimitHandler to the pipeline if configured to do so . 
 + if ( DatabaseDescriptor . getNativeTransportMaxConcurrentConnections ( ) > 0 
 + | | DatabaseDescriptor . getNativeTransportMaxConcurrentConnectionsPerIp ( ) > 0 ) 
 + { 
 + / / Add as first to the pipeline so the limit is enforced as first action . 
 + pipeline . addFirst ( " connectionLimitHandler " , connectionLimitHandler ) ; 
 + } 
 + 
 / / pipeline . addLast ( " debug " , new LoggingHandler ( ) ) ; 
 
 pipeline . addLast ( " frameDecoder " , new Frame . Decoder ( server . connectionFactory ) ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 8d9e2ea . . c97b17f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 7 + 1 , 10 @ @ 
 dev 
 * sstable versioning ( CASSANDRA - 389 ) 
 
 - 0 . 6 . 0 - dev 
 + 0 . 6 . 0 - RC1 
 + * fix compaction bucketing bug ( CASSANDRA - 814 ) 
 + 
 + 0 . 6 . 0 - beta1 / beta2 
 * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) 
 * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) 
 * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) 
 @ @ - 42 , 7 + 45 , 9 @ @ dev 
 * allow larger numbers of keys ( > 140M ) in a sstable bloom filter 
 ( CASSANDRA - 790 ) 
 * include jvm argument improvements from CASSANDRA - 504 in debian package 
 - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) 
 + * change streaming chunk size to 32MB to accomodate Windows XP limitations 
 + ( was 64MB ) ( CASSANDRA - 795 ) 
 + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) 
 
 
 0 . 5 . 0 final 
 diff - - git a / build . xml b / build . xml 
 index ea79876 . . 54ef12d 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 314 , 6 + 314 , 7 @ @ 
 < include name = " * * " / > 
 < exclude name = " build / * * " / > 
 < exclude name = " src / gen - java / * * " / > 
 + < exclude name = " interface / avro / * * " / > 
 < / tarfileset > 
 < / tar > 
 < / target > 
 diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java 
 index fbd5ebb . . 1b5b6b1 100644 
 - - - a / src / java / org / apache / cassandra / db / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / CompactionManager . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 return 0 ; 
 } 
 logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; 
 - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 
 for ( List < SSTableReader > sstables : buckets ) 
 @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 / * 
 * Group files of similar size into buckets . 
 * / 
 - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) 
 + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) 
 { 
 Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; 
 for ( SSTableReader sstable : files ) 
 @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 / / remove and re - add because adding changes the hash 
 buckets . remove ( bucket ) ; 
 - averageSize = ( averageSize + size ) / 2 ; 
 + long totalSize = bucket . size ( ) * averageSize ; 
 + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; 
 bucket . add ( sstable ) ; 
 buckets . put ( bucket , averageSize ) ; 
 bFound = true ; 
 @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 public void run ( ) 
 { 
 logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; 
 - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 } 
 } ;
