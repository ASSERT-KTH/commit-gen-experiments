BLEU SCORE: 0.027611988917697356

TEST MSG: Fix 2ndary index queries with DESC clustering order
GENERATED MSG: Add ability for CQL3 to list partition keys

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index df3741e . . bd0031e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 46 , 6 + 46 , 7 @ @ <nl> * reduce garbage on codec flag deserialization ( CASSANDRA - 7244 ) <nl> * Proper null handle for IF with map element access ( CASSANDRA - 7155 ) <nl> * Improve compaction visibility ( CASSANDRA - 7242 ) <nl> + * Fix 2ndary index queries with DESC clustering order ( CASSANDRA - 6950 ) <nl> Merged from 1 . 2 : <nl> * Add Cloudstack snitch ( CASSANDRA - 7147 ) <nl> * Update system . peers correctly when relocating tokens ( CASSANDRA - 7126 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index 2468eb9 . . 6b4309f 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 927 , 7 + 927 , 14 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> throw new InvalidRequestException ( String . format ( " Unsupported null value for indexed column % s " , name ) ) ; <nl> if ( value . remaining ( ) > 0xFFFF ) <nl> throw new InvalidRequestException ( " Index expression values may not be larger than 64K " ) ; <nl> - expressions . add ( new IndexExpression ( name . name . key , slice . getIndexOperator ( b ) , value ) ) ; <nl> + <nl> + IndexOperator op = slice . getIndexOperator ( b ) ; <nl> + / / If the underlying comparator for name is reversed , we need to reverse the IndexOperator : user operation <nl> + / / always refer to the " forward " sorting even if the clustering order is reversed , but the 2ndary code does <nl> + / / use the underlying comparator as is . <nl> + if ( name . type instanceof ReversedType ) <nl> + op = reverse ( op ) ; <nl> + expressions . add ( new IndexExpression ( name . name . key , op , value ) ) ; <nl> } <nl> } <nl> } <nl> @ @ - 949 , 6 + 956 , 18 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> return expressions ; <nl> } <nl> <nl> + private static IndexOperator reverse ( IndexOperator op ) <nl> + { <nl> + switch ( op ) <nl> + { <nl> + case LT : return IndexOperator . GT ; <nl> + case LTE : return IndexOperator . GTE ; <nl> + case GT : return IndexOperator . LT ; <nl> + case GTE : return IndexOperator . LTE ; <nl> + default : return op ; <nl> + } <nl> + } <nl> + <nl> private ResultSet process ( List < Row > rows , List < ByteBuffer > variables , int limit , long now ) throws InvalidRequestException <nl> { <nl> Selection . ResultSetBuilder result = selection . resultSetBuilder ( now ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java b / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java <nl> index b7bb733 . . fb32043 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java <nl> + + + b / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java <nl> @ @ - 119 , 9 + 119 , 9 @ @ public class OffHeapBitSet implements IBitSet <nl> <nl> public static OffHeapBitSet deserialize ( DataInput dis ) throws IOException <nl> { <nl> - int byteCount = dis . readInt ( ) * 8 ; <nl> + long byteCount = dis . readInt ( ) * 8L ; <nl> Memory memory = RefCountedMemory . allocate ( byteCount ) ; <nl> - for ( int i = 0 ; i < byteCount ; ) <nl> + for ( long i = 0 ; i < byteCount ; ) <nl> { <nl> long v = dis . readLong ( ) ; <nl> memory . setByte ( i + + , ( byte ) ( v > > > 0 ) ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index df3741e . . bd0031e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 46 , 6 + 46 , 7 @ @ 
 * reduce garbage on codec flag deserialization ( CASSANDRA - 7244 ) 
 * Proper null handle for IF with map element access ( CASSANDRA - 7155 ) 
 * Improve compaction visibility ( CASSANDRA - 7242 ) 
 + * Fix 2ndary index queries with DESC clustering order ( CASSANDRA - 6950 ) 
 Merged from 1 . 2 : 
 * Add Cloudstack snitch ( CASSANDRA - 7147 ) 
 * Update system . peers correctly when relocating tokens ( CASSANDRA - 7126 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index 2468eb9 . . 6b4309f 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 927 , 7 + 927 , 14 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 throw new InvalidRequestException ( String . format ( " Unsupported null value for indexed column % s " , name ) ) ; 
 if ( value . remaining ( ) > 0xFFFF ) 
 throw new InvalidRequestException ( " Index expression values may not be larger than 64K " ) ; 
 - expressions . add ( new IndexExpression ( name . name . key , slice . getIndexOperator ( b ) , value ) ) ; 
 + 
 + IndexOperator op = slice . getIndexOperator ( b ) ; 
 + / / If the underlying comparator for name is reversed , we need to reverse the IndexOperator : user operation 
 + / / always refer to the " forward " sorting even if the clustering order is reversed , but the 2ndary code does 
 + / / use the underlying comparator as is . 
 + if ( name . type instanceof ReversedType ) 
 + op = reverse ( op ) ; 
 + expressions . add ( new IndexExpression ( name . name . key , op , value ) ) ; 
 } 
 } 
 } 
 @ @ - 949 , 6 + 956 , 18 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 return expressions ; 
 } 
 
 + private static IndexOperator reverse ( IndexOperator op ) 
 + { 
 + switch ( op ) 
 + { 
 + case LT : return IndexOperator . GT ; 
 + case LTE : return IndexOperator . GTE ; 
 + case GT : return IndexOperator . LT ; 
 + case GTE : return IndexOperator . LTE ; 
 + default : return op ; 
 + } 
 + } 
 + 
 private ResultSet process ( List < Row > rows , List < ByteBuffer > variables , int limit , long now ) throws InvalidRequestException 
 { 
 Selection . ResultSetBuilder result = selection . resultSetBuilder ( now ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java b / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java 
 index b7bb733 . . fb32043 100644 
 - - - a / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java 
 + + + b / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java 
 @ @ - 119 , 9 + 119 , 9 @ @ public class OffHeapBitSet implements IBitSet 
 
 public static OffHeapBitSet deserialize ( DataInput dis ) throws IOException 
 { 
 - int byteCount = dis . readInt ( ) * 8 ; 
 + long byteCount = dis . readInt ( ) * 8L ; 
 Memory memory = RefCountedMemory . allocate ( byteCount ) ; 
 - for ( int i = 0 ; i < byteCount ; ) 
 + for ( long i = 0 ; i < byteCount ; ) 
 { 
 long v = dis . readLong ( ) ; 
 memory . setByte ( i + + , ( byte ) ( v > > > 0 ) ) ;
