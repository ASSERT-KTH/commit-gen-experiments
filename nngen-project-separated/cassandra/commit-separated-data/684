BLEU SCORE: 0.028398387225677897

TEST MSG: Ninja , remove gen - thrift - java ant task from IntelliJ launch configs
GENERATED MSG: merge with cassandra - 0 . 4 branch

TEST DIFF (one line): diff - - git a / ide / idea / workspace . xml b / ide / idea / workspace . xml <nl> index 5e7a761 . . a8922ed 100644 <nl> - - - a / ide / idea / workspace . xml <nl> + + + b / ide / idea / workspace . xml <nl> @ @ - 155 , 7 + 155 , 6 @ @ <nl> < envs / > <nl> < method > <nl> < option name = " AntTarget " enabled = " true " antfile = " file : / / $ PROJECT _ DIR $ / build . xml " target = " gen - cql3 - grammar " / > <nl> - < option name = " AntTarget " enabled = " true " antfile = " file : / / $ PROJECT _ DIR $ / build . xml " target = " gen - thrift - java " / > <nl> < option name = " Make " enabled = " true " / > <nl> < / method > <nl> < / configuration > <nl> @ @ - 180 , 7 + 179 , 6 @ @ <nl> < patterns / > <nl> < method > <nl> < option name = " AntTarget " enabled = " true " antfile = " file : / / $ PROJECT _ DIR $ / build . xml " target = " gen - cql3 - grammar " / > <nl> - < option name = " AntTarget " enabled = " true " antfile = " file : / / $ PROJECT _ DIR $ / build . xml " target = " gen - thrift - java " / > <nl> < option name = " Make " enabled = " true " / > <nl> < / method > <nl> < / configuration >
NEAREST DIFF (one line): diff - - git a / contrib / endpointsnitch _ example / CustomEndPointSnitch . java b / contrib / endpointsnitch _ example / CustomEndPointSnitch . java <nl> deleted file mode 100644 <nl> index 2b24696 . . 0000000 <nl> - - - a / contrib / endpointsnitch _ example / CustomEndPointSnitch . java <nl> + + + / dev / null <nl> @ @ - 1 , 162 + 0 , 0 @ @ <nl> - package org . apache . cassandra . locator ; <nl> - <nl> - import java . io . FileNotFoundException ; <nl> - import java . io . FileReader ; <nl> - import java . io . IOException ; <nl> - import java . lang . management . ManagementFactory ; <nl> - import java . net . UnknownHostException ; <nl> - import java . util . Properties ; <nl> - import java . util . StringTokenizer ; <nl> - <nl> - import javax . management . MBeanServer ; <nl> - import javax . management . ObjectName ; <nl> - <nl> - import org . apache . cassandra . locator . EndPointSnitch ; <nl> - import org . apache . cassandra . net . EndPoint ; <nl> - import org . apache . cassandra . utils . LogUtil ; <nl> - import org . apache . log4j . Logger ; <nl> - <nl> - / * * <nl> - * CustomEndPointSnitch <nl> - * <nl> - * CustomEndPointSnitch is used by Digg to determine if two IP ' s are in the same datacenter <nl> - * or on the same rack . <nl> - * <nl> - * @ author Sammy Yu < syu @ sammyyu . net > <nl> - * <nl> - * / <nl> - public class CustomEndPointSnitch extends EndPointSnitch implements CustomEndPointSnitchMBean { <nl> - / * * <nl> - * A list of properties with keys being host : port and values being datacenter : rack <nl> - * / <nl> - private Properties hostProperties = new Properties ( ) ; <nl> - <nl> - / * * <nl> - * The default rack property file to be read . <nl> - * / <nl> - private static String DEFAULT _ RACK _ PROPERTY _ FILE = " / etc / cassandra / rack . properties " ; <nl> - <nl> - / * * <nl> - * Whether to use the parent for detection of same node <nl> - * / <nl> - private boolean runInBaseMode = false ; <nl> - <nl> - / * * <nl> - * Reference to the logger . <nl> - * / <nl> - private static Logger logger _ = Logger . getLogger ( CustomEndPointSnitch . class ) ; <nl> - <nl> - public CustomEndPointSnitch ( ) throws IOException { <nl> - reloadConfiguration ( ) ; <nl> - try <nl> - { <nl> - MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> - mbs . registerMBean ( this , new ObjectName ( MBEAN _ OBJECT _ NAME ) ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - logger _ . error ( LogUtil . throwableToString ( e ) ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Get the raw information about an end point <nl> - * <nl> - * @ param endPoint endPoint to process <nl> - * <nl> - * @ return a array of string with the first index being the data center and the second being the rack <nl> - * / <nl> - public String [ ] getEndPointInfo ( EndPoint endPoint ) { <nl> - String key = endPoint . toString ( ) ; <nl> - String value = hostProperties . getProperty ( key ) ; <nl> - if ( value = = null ) <nl> - { <nl> - logger _ . error ( " Could not find end point information for " + key + " , will use default . " ) ; <nl> - value = hostProperties . getProperty ( " default " ) ; <nl> - } <nl> - StringTokenizer st = new StringTokenizer ( value , " : " ) ; <nl> - if ( st . countTokens ( ) < 2 ) <nl> - { <nl> - logger _ . error ( " Value for " + key + " is invalid : " + value ) ; <nl> - return new String [ ] { " default " , " default " } ; <nl> - } <nl> - return new String [ ] { st . nextToken ( ) , st . nextToken ( ) } ; <nl> - } <nl> - <nl> - / * * <nl> - * Return the data center for which an endpoint resides in <nl> - * <nl> - * @ param endPoint the endPoint to process <nl> - * @ return string of data center <nl> - * / <nl> - public String getDataCenterForEndPoint ( EndPoint endPoint ) { <nl> - return getEndPointInfo ( endPoint ) [ 0 ] ; <nl> - } <nl> - <nl> - / * * <nl> - * Return the rack for which an endpoint resides in <nl> - * <nl> - * @ param endPoint the endPoint to process <nl> - * <nl> - * @ return string of rack <nl> - * / <nl> - public String getRackForEndPoint ( EndPoint endPoint ) { <nl> - return getEndPointInfo ( endPoint ) [ 1 ] ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean isInSameDataCenter ( EndPoint host , EndPoint host2 ) <nl> - throws UnknownHostException { <nl> - if ( runInBaseMode ) <nl> - { <nl> - return super . isInSameDataCenter ( host , host2 ) ; <nl> - } <nl> - return getDataCenterForEndPoint ( host ) . equals ( getDataCenterForEndPoint ( host2 ) ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean isOnSameRack ( EndPoint host , EndPoint host2 ) <nl> - throws UnknownHostException { <nl> - if ( runInBaseMode ) <nl> - { <nl> - return super . isOnSameRack ( host , host2 ) ; <nl> - } <nl> - if ( ! isInSameDataCenter ( host , host2 ) ) <nl> - { <nl> - return false ; <nl> - } <nl> - return getRackForEndPoint ( host ) . equals ( getRackForEndPoint ( host2 ) ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public String displayConfiguration ( ) { <nl> - StringBuffer configurationString = new StringBuffer ( " Current rack configuration \ n = = = = = = = = = = = = = = = = = \ n " ) ; <nl> - for ( Object key : hostProperties . keySet ( ) ) { <nl> - String endpoint = ( String ) key ; <nl> - String value = hostProperties . getProperty ( endpoint ) ; <nl> - configurationString . append ( endpoint + " = " + value + " \ n " ) ; <nl> - } <nl> - return configurationString . toString ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void reloadConfiguration ( ) throws IOException { <nl> - String rackPropertyFilename = System . getProperty ( " rackFile " , DEFAULT _ RACK _ PROPERTY _ FILE ) ; <nl> - try <nl> - { <nl> - Properties localHostProperties = new Properties ( ) ; <nl> - localHostProperties . load ( new FileReader ( rackPropertyFilename ) ) ; <nl> - hostProperties = localHostProperties ; <nl> - runInBaseMode = false ; <nl> - } <nl> - catch ( FileNotFoundException fnfe ) { <nl> - logger _ . error ( " Could not find " + rackPropertyFilename + " , using default EndPointSnitch " , fnfe ) ; <nl> - runInBaseMode = true ; <nl> - } <nl> - catch ( IOException ioe ) { <nl> - logger _ . error ( " Could not process " + rackPropertyFilename , ioe ) ; <nl> - throw ioe ; <nl> - } <nl> - } <nl> - <nl> - } <nl> diff - - git a / contrib / endpointsnitch _ example / CustomEndPointSnitchMBean . java b / contrib / endpointsnitch _ example / CustomEndPointSnitchMBean . java <nl> deleted file mode 100644 <nl> index af350ba . . 0000000 <nl> - - - a / contrib / endpointsnitch _ example / CustomEndPointSnitchMBean . java <nl> + + + / dev / null <nl> @ @ - 1 , 29 + 0 , 0 @ @ <nl> - package org . apache . cassandra . locator ; <nl> - <nl> - import java . io . IOException ; <nl> - <nl> - / * * <nl> - * CustomEndPointSnitchMBean <nl> - * <nl> - * CustomEndPointSnitchMBean is the management interface for Digg ' s EndpointSnitch MBean <nl> - * <nl> - * @ author Sammy Yu < syu @ sammyyu . net > <nl> - * <nl> - * / <nl> - public interface CustomEndPointSnitchMBean { <nl> - / * * <nl> - * The object name of the mbean . <nl> - * / <nl> - public static String MBEAN _ OBJECT _ NAME = " org . apache . cassandra . locator : type = EndPointSnitch " ; <nl> - <nl> - / * * <nl> - * Reload the rack configuration <nl> - * / <nl> - public void reloadConfiguration ( ) throws IOException ; <nl> - <nl> - / * * <nl> - * Display the current configuration <nl> - * / <nl> - public String displayConfiguration ( ) ; <nl> - <nl> - } <nl> diff - - git a / contrib / property _ snitch / README . txt b / contrib / property _ snitch / README . txt <nl> new file mode 100644 <nl> index 0000000 . . 7e6afe8 <nl> - - - / dev / null <nl> + + + b / contrib / property _ snitch / README . txt <nl> @ @ - 0 , 0 + 1 , 41 @ @ <nl> + PropertyFileEndPointSnitch <nl> + = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + <nl> + Cassandra ' s RackAwareStrategy can be used to have replication take <nl> + data - center and / or rack location into account when placing replicas . The <nl> + ProperyFileEndPointSnitch allows you to make use of RackAwareStrategy by <nl> + specifying node locations in a standard key / value properties file . <nl> + <nl> + <nl> + Properties File <nl> + - - - - - - - - - - - - - - - <nl> + The EndPointSnitch expects to find a standard properties file at <nl> + / etc / cassandra / rack . properties in the following format : <nl> + <nl> + < node IP > \ : < port > = < data center name > : < rack name > <nl> + <nl> + There is also a special directive used to define which information to <nl> + return for unconfigured nodes : <nl> + <nl> + default = < data center name > : < rack name > <nl> + <nl> + See conf / rack . properties for an annotated example config . <nl> + <nl> + <nl> + Installing <nl> + - - - - - - - - - - <nl> + * Run the ant jar target <nl> + * Add build / cassandra - propsnitch . jar to the CLASSPATH <nl> + * Edit storage - conf . xml and set ReplicaPlacementStrategy to <nl> + org . apache . cassandra . locator . RackAwareStrategy <nl> + * Edit the EndPointSnitch element of storage - conf . xml to use <nl> + org . apache . cassandra . locator . PropertyFileEndPointSnitch <nl> + * Create the file / etc / cassandra / rack . properties <nl> + <nl> + <nl> + Running / Managing <nl> + - - - - - - - - - - - - - - - - <nl> + This endpointsnitch also registers itself as an MBean which can be used to <nl> + reload the configuration file in the case the rack . properties file has <nl> + changed . Additionally , the current rack information can be retrieved as <nl> + well . <nl> diff - - git a / contrib / property _ snitch / build . xml b / contrib / property _ snitch / build . xml <nl> new file mode 100644 <nl> index 0000000 . . f6bece3 <nl> - - - / dev / null <nl> + + + b / contrib / property _ snitch / build . xml <nl> @ @ - 0 , 0 + 1 , 77 @ @ <nl> + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " standalone = " no " ? > <nl> + < ! - - <nl> + ~ Licensed to the Apache Software Foundation ( ASF ) under one <nl> + ~ or more contributor license agreements . See the NOTICE file <nl> + ~ distributed with this work for additional information <nl> + ~ regarding copyright ownership . The ASF licenses this file <nl> + ~ to you under the Apache License , Version 2 . 0 ( the <nl> + ~ " License " ) ; you may not use this file except in compliance <nl> + ~ with the License . You may obtain a copy of the License at <nl> + ~ <nl> + ~ http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + ~ <nl> + ~ Unless required by applicable law or agreed to in writing , <nl> + ~ software distributed under the License is distributed on an <nl> + ~ " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + ~ KIND , either express or implied . See the License for the <nl> + ~ specific language governing permissions and limitations <nl> + ~ under the License . <nl> + - - > <nl> + < project basedir = " . " default = " build " name = " property - snitch " > <nl> + < property environment = " env " / > <nl> + < property name = " debuglevel " value = " source , lines , vars " / > <nl> + <nl> + < property name = " cassandra . dir " value = " . . / . . " / > <nl> + < property name = " cassandra . lib " value = " $ { cassandra . dir } / lib " / > <nl> + < property name = " cassandra . classes " value = " $ { cassandra . dir } / build / classes " / > <nl> + < property name = " build . src " value = " $ { basedir } / src / java " / > <nl> + < property name = " build . dir " value = " $ { basedir } / build " / > <nl> + < property name = " build . classes " value = " $ { build . dir } / classes " / > <nl> + < property name = " javadoc . dir " value = " $ { build . dir } / javadoc " / > <nl> + < property name = " final . name " value = " cassandra - propsnitch " / > <nl> + <nl> + < ! - - <nl> + 	 Add all the dependencies . <nl> + - - > <nl> + < path id = " cassandra . classpath " > <nl> + < pathelement location = " $ { build . classes } " / > <nl> + < pathelement location = " $ { cassandra . classes } " / > <nl> + < fileset dir = " $ { cassandra . lib } " > <nl> + < include name = " * * / * . jar " / > <nl> + < / fileset > <nl> + < / path > <nl> + <nl> + < ! - - <nl> + 	 Setup the output directories . <nl> + - - > <nl> + < target name = " init " > <nl> + < mkdir dir = " $ { build . classes } " / > <nl> + < / target > <nl> + <nl> + < target name = " clean " > <nl> + < delete dir = " $ { build . dir } " / > <nl> + < delete dir = " $ { build . classes } " / > <nl> + < / target > <nl> + <nl> + < ! - - <nl> + 	 The build target builds all the . class files <nl> + - - > <nl> + < target depends = " init " name = " build " > <nl> + < echo message = " $ { ant . project . name } : $ { ant . file } " / > <nl> + < javac debug = " true " debuglevel = " $ { debuglevel } " destdir = " $ { build . classes } " > <nl> + < src path = " $ { build . src } " / > <nl> + < classpath refid = " cassandra . classpath " / > <nl> + < / javac > <nl> + < / target > <nl> + <nl> + < ! - - <nl> + 	 The jar target makes cassandra . jar output . <nl> + - - > <nl> + < target name = " jar " depends = " build " > <nl> + < mkdir dir = " $ { build . classes } / META - INF " / > <nl> + < jar jarfile = " $ { build . dir } / $ { final . name } . jar " <nl> + basedir = " $ { build . classes } " > <nl> + < / jar > <nl> + < / target > <nl> + <nl> + < / project > <nl> diff - - git a / contrib / property _ snitch / conf / rack . properties b / contrib / property _ snitch / conf / rack . properties <nl> new file mode 100644 <nl> index 0000000 . . 5ebb053 <nl> - - - / dev / null <nl> + + + b / contrib / property _ snitch / conf / rack . properties <nl> @ @ - 0 , 0 + 1 , 23 @ @ <nl> + <nl> + # Licensed to the Apache Software Foundation ( ASF ) under one <nl> + # or more contributor license agreements . See the NOTICE file <nl> + # distributed with this work for additional information <nl> + # regarding copyright ownership . The ASF licenses this file <nl> + # to you under the Apache License , Version 2 . 0 ( the <nl> + # " License " ) ; you may not use this file except in compliance <nl> + # with the License . You may obtain a copy of the License at <nl> + # <nl> + # http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + # <nl> + # Unless required by applicable law or agreed to in writing , software <nl> + # distributed under the License is distributed on an " AS IS " BASIS , <nl> + # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + # See the License for the specific language governing permissions and <nl> + # limitations under the License . <nl> + <nl> + # Cassandra Node IP : Port = Data Center : Rack <nl> + 192 . 168 . 1 . 200 \ : 7000 = dc1 : r1 <nl> + 192 . 168 . 2 . 300 \ : 7000 = dc2 : rA <nl> + <nl> + # default for unknown nodes <nl> + default = dc1 : r1 <nl> diff - - git a / contrib / property _ snitch / src / java / org / apache / cassandra / locator / PropertyFileEndPointSnitch . java b / contrib / property _ snitch / src / java / org / apache / cassandra / locator / PropertyFileEndPointSnitch . java <nl> new file mode 100644 <nl> index 0000000 . . cb0a5c5 <nl> - - - / dev / null <nl> + + + b / contrib / property _ snitch / src / java / org / apache / cassandra / locator / PropertyFileEndPointSnitch . java <nl> @ @ - 0 , 0 + 1 , 180 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package src . java . org . apache . cassandra . locator ; <nl> + <nl> + import java . io . FileNotFoundException ; <nl> + import java . io . FileReader ; <nl> + import java . io . IOException ; <nl> + import java . lang . management . ManagementFactory ; <nl> + import java . net . UnknownHostException ; <nl> + import java . util . Properties ; <nl> + import java . util . StringTokenizer ; <nl> + <nl> + import javax . management . MBeanServer ; <nl> + import javax . management . ObjectName ; <nl> + <nl> + import org . apache . cassandra . locator . EndPointSnitch ; <nl> + import org . apache . cassandra . net . EndPoint ; <nl> + import org . apache . cassandra . utils . LogUtil ; <nl> + import org . apache . log4j . Logger ; <nl> + <nl> + / * * <nl> + * PropertyFileEndPointSnitch <nl> + * <nl> + * PropertyFileEndPointSnitch is used by Digg to determine if two IP ' s are in the same <nl> + * datacenter or on the same rack . <nl> + * <nl> + * @ author Sammy Yu < syu @ sammyyu . net > <nl> + * <nl> + * / <nl> + public class PropertyFileEndPointSnitch extends EndPointSnitch implements PropertyFileEndPointSnitchMBean { <nl> + / * * <nl> + * A list of properties with keys being host : port and values being datacenter : rack <nl> + * / <nl> + private Properties hostProperties = new Properties ( ) ; <nl> + <nl> + / * * <nl> + * The default rack property file to be read . <nl> + * / <nl> + private static String DEFAULT _ RACK _ PROPERTY _ FILE = " / etc / cassandra / rack . properties " ; <nl> + <nl> + / * * <nl> + * Whether to use the parent for detection of same node <nl> + * / <nl> + private boolean runInBaseMode = false ; <nl> + <nl> + / * * <nl> + * Reference to the logger . <nl> + * / <nl> + private static Logger logger _ = Logger . getLogger ( PropertyFileEndPointSnitch . class ) ; <nl> + <nl> + public PropertyFileEndPointSnitch ( ) throws IOException { <nl> + reloadConfiguration ( ) ; <nl> + try <nl> + { <nl> + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + mbs . registerMBean ( this , new ObjectName ( MBEAN _ OBJECT _ NAME ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + logger _ . error ( LogUtil . throwableToString ( e ) ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Get the raw information about an end point <nl> + * <nl> + * @ param endPoint endPoint to process <nl> + * <nl> + * @ return a array of string with the first index being the data center and the second being the rack <nl> + * / <nl> + public String [ ] getEndPointInfo ( EndPoint endPoint ) { <nl> + String key = endPoint . toString ( ) ; <nl> + String value = hostProperties . getProperty ( key ) ; <nl> + if ( value = = null ) <nl> + { <nl> + logger _ . error ( " Could not find end point information for " + key + " , will use default . " ) ; <nl> + value = hostProperties . getProperty ( " default " ) ; <nl> + } <nl> + StringTokenizer st = new StringTokenizer ( value , " : " ) ; <nl> + if ( st . countTokens ( ) < 2 ) <nl> + { <nl> + logger _ . error ( " Value for " + key + " is invalid : " + value ) ; <nl> + return new String [ ] { " default " , " default " } ; <nl> + } <nl> + return new String [ ] { st . nextToken ( ) , st . nextToken ( ) } ; <nl> + } <nl> + <nl> + / * * <nl> + * Return the data center for which an endpoint resides in <nl> + * <nl> + * @ param endPoint the endPoint to process <nl> + * @ return string of data center <nl> + * / <nl> + public String getDataCenterForEndPoint ( EndPoint endPoint ) { <nl> + return getEndPointInfo ( endPoint ) [ 0 ] ; <nl> + } <nl> + <nl> + / * * <nl> + * Return the rack for which an endpoint resides in <nl> + * <nl> + * @ param endPoint the endPoint to process <nl> + * <nl> + * @ return string of rack <nl> + * / <nl> + public String getRackForEndPoint ( EndPoint endPoint ) { <nl> + return getEndPointInfo ( endPoint ) [ 1 ] ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isInSameDataCenter ( EndPoint host , EndPoint host2 ) <nl> + throws UnknownHostException { <nl> + if ( runInBaseMode ) <nl> + { <nl> + return super . isInSameDataCenter ( host , host2 ) ; <nl> + } <nl> + return getDataCenterForEndPoint ( host ) . equals ( getDataCenterForEndPoint ( host2 ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isOnSameRack ( EndPoint host , EndPoint host2 ) <nl> + throws UnknownHostException { <nl> + if ( runInBaseMode ) <nl> + { <nl> + return super . isOnSameRack ( host , host2 ) ; <nl> + } <nl> + if ( ! isInSameDataCenter ( host , host2 ) ) <nl> + { <nl> + return false ; <nl> + } <nl> + return getRackForEndPoint ( host ) . equals ( getRackForEndPoint ( host2 ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String displayConfiguration ( ) { <nl> + StringBuffer configurationString = new StringBuffer ( " Current rack configuration \ n = = = = = = = = = = = = = = = = = \ n " ) ; <nl> + for ( Object key : hostProperties . keySet ( ) ) { <nl> + String endpoint = ( String ) key ; <nl> + String value = hostProperties . getProperty ( endpoint ) ; <nl> + configurationString . append ( endpoint + " = " + value + " \ n " ) ; <nl> + } <nl> + return configurationString . toString ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void reloadConfiguration ( ) throws IOException { <nl> + String rackPropertyFilename = System . getProperty ( " rackFile " , DEFAULT _ RACK _ PROPERTY _ FILE ) ; <nl> + try <nl> + { <nl> + Properties localHostProperties = new Properties ( ) ; <nl> + localHostProperties . load ( new FileReader ( rackPropertyFilename ) ) ; <nl> + hostProperties = localHostProperties ; <nl> + runInBaseMode = false ; <nl> + } <nl> + catch ( FileNotFoundException fnfe ) { <nl> + logger _ . error ( " Could not find " + rackPropertyFilename + " , using default EndPointSnitch " , fnfe ) ; <nl> + runInBaseMode = true ; <nl> + } <nl> + catch ( IOException ioe ) { <nl> + logger _ . error ( " Could not process " + rackPropertyFilename , ioe ) ; <nl> + throw ioe ; <nl> + } <nl> + } <nl> + <nl> + } <nl> diff - - git a / contrib / property _ snitch / src / java / org / apache / cassandra / locator / PropertyFileEndPointSnitchMBean . java b / contrib / property _ snitch / src / java / org / apache / cassandra / locator / PropertyFileEndPointSnitchMBean . java <nl> new file mode 100644 <nl> index 0000000 . . b8872de <nl> - - - / dev / null <nl> + + + b / contrib / property _ snitch / src / java / org / apache / cassandra / locator / PropertyFileEndPointSnitchMBean . java <nl> @ @ - 0 , 0 + 1 , 47 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package src . java . org . apache . cassandra . locator ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + / * * <nl> + * PropertyFileEndPointSnitchMBean <nl> + * <nl> + * PropertyFileEndPointSnitchMBean is the management interface for Digg ' s EndpointSnitch MBean <nl> + * <nl> + * @ author Sammy Yu < syu @ sammyyu . net > <nl> + * <nl> + * / <nl> + public interface PropertyFileEndPointSnitchMBean { <nl> + / * * <nl> + * The object name of the mbean . <nl> + * / <nl> + public static String MBEAN _ OBJECT _ NAME = " org . apache . cassandra . locator : type = EndPointSnitch " ; <nl> + <nl> + / * * <nl> + * Reload the rack configuration <nl> + * / <nl> + public void reloadConfiguration ( ) throws IOException ; <nl> + <nl> + / * * <nl> + * Display the current configuration <nl> + * / <nl> + public String displayConfiguration ( ) ; <nl> + <nl> + }

TEST DIFF:
diff - - git a / ide / idea / workspace . xml b / ide / idea / workspace . xml 
 index 5e7a761 . . a8922ed 100644 
 - - - a / ide / idea / workspace . xml 
 + + + b / ide / idea / workspace . xml 
 @ @ - 155 , 7 + 155 , 6 @ @ 
 < envs / > 
 < method > 
 < option name = " AntTarget " enabled = " true " antfile = " file : / / $ PROJECT _ DIR $ / build . xml " target = " gen - cql3 - grammar " / > 
 - < option name = " AntTarget " enabled = " true " antfile = " file : / / $ PROJECT _ DIR $ / build . xml " target = " gen - thrift - java " / > 
 < option name = " Make " enabled = " true " / > 
 < / method > 
 < / configuration > 
 @ @ - 180 , 7 + 179 , 6 @ @ 
 < patterns / > 
 < method > 
 < option name = " AntTarget " enabled = " true " antfile = " file : / / $ PROJECT _ DIR $ / build . xml " target = " gen - cql3 - grammar " / > 
 - < option name = " AntTarget " enabled = " true " antfile = " file : / / $ PROJECT _ DIR $ / build . xml " target = " gen - thrift - java " / > 
 < option name = " Make " enabled = " true " / > 
 < / method > 
 < / configuration >

NEAREST DIFF:
diff - - git a / contrib / endpointsnitch _ example / CustomEndPointSnitch . java b / contrib / endpointsnitch _ example / CustomEndPointSnitch . java 
 deleted file mode 100644 
 index 2b24696 . . 0000000 
 - - - a / contrib / endpointsnitch _ example / CustomEndPointSnitch . java 
 + + + / dev / null 
 @ @ - 1 , 162 + 0 , 0 @ @ 
 - package org . apache . cassandra . locator ; 
 - 
 - import java . io . FileNotFoundException ; 
 - import java . io . FileReader ; 
 - import java . io . IOException ; 
 - import java . lang . management . ManagementFactory ; 
 - import java . net . UnknownHostException ; 
 - import java . util . Properties ; 
 - import java . util . StringTokenizer ; 
 - 
 - import javax . management . MBeanServer ; 
 - import javax . management . ObjectName ; 
 - 
 - import org . apache . cassandra . locator . EndPointSnitch ; 
 - import org . apache . cassandra . net . EndPoint ; 
 - import org . apache . cassandra . utils . LogUtil ; 
 - import org . apache . log4j . Logger ; 
 - 
 - / * * 
 - * CustomEndPointSnitch 
 - * 
 - * CustomEndPointSnitch is used by Digg to determine if two IP ' s are in the same datacenter 
 - * or on the same rack . 
 - * 
 - * @ author Sammy Yu < syu @ sammyyu . net > 
 - * 
 - * / 
 - public class CustomEndPointSnitch extends EndPointSnitch implements CustomEndPointSnitchMBean { 
 - / * * 
 - * A list of properties with keys being host : port and values being datacenter : rack 
 - * / 
 - private Properties hostProperties = new Properties ( ) ; 
 - 
 - / * * 
 - * The default rack property file to be read . 
 - * / 
 - private static String DEFAULT _ RACK _ PROPERTY _ FILE = " / etc / cassandra / rack . properties " ; 
 - 
 - / * * 
 - * Whether to use the parent for detection of same node 
 - * / 
 - private boolean runInBaseMode = false ; 
 - 
 - / * * 
 - * Reference to the logger . 
 - * / 
 - private static Logger logger _ = Logger . getLogger ( CustomEndPointSnitch . class ) ; 
 - 
 - public CustomEndPointSnitch ( ) throws IOException { 
 - reloadConfiguration ( ) ; 
 - try 
 - { 
 - MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 - mbs . registerMBean ( this , new ObjectName ( MBEAN _ OBJECT _ NAME ) ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - logger _ . error ( LogUtil . throwableToString ( e ) ) ; 
 - } 
 - } 
 - 
 - / * * 
 - * Get the raw information about an end point 
 - * 
 - * @ param endPoint endPoint to process 
 - * 
 - * @ return a array of string with the first index being the data center and the second being the rack 
 - * / 
 - public String [ ] getEndPointInfo ( EndPoint endPoint ) { 
 - String key = endPoint . toString ( ) ; 
 - String value = hostProperties . getProperty ( key ) ; 
 - if ( value = = null ) 
 - { 
 - logger _ . error ( " Could not find end point information for " + key + " , will use default . " ) ; 
 - value = hostProperties . getProperty ( " default " ) ; 
 - } 
 - StringTokenizer st = new StringTokenizer ( value , " : " ) ; 
 - if ( st . countTokens ( ) < 2 ) 
 - { 
 - logger _ . error ( " Value for " + key + " is invalid : " + value ) ; 
 - return new String [ ] { " default " , " default " } ; 
 - } 
 - return new String [ ] { st . nextToken ( ) , st . nextToken ( ) } ; 
 - } 
 - 
 - / * * 
 - * Return the data center for which an endpoint resides in 
 - * 
 - * @ param endPoint the endPoint to process 
 - * @ return string of data center 
 - * / 
 - public String getDataCenterForEndPoint ( EndPoint endPoint ) { 
 - return getEndPointInfo ( endPoint ) [ 0 ] ; 
 - } 
 - 
 - / * * 
 - * Return the rack for which an endpoint resides in 
 - * 
 - * @ param endPoint the endPoint to process 
 - * 
 - * @ return string of rack 
 - * / 
 - public String getRackForEndPoint ( EndPoint endPoint ) { 
 - return getEndPointInfo ( endPoint ) [ 1 ] ; 
 - } 
 - 
 - @ Override 
 - public boolean isInSameDataCenter ( EndPoint host , EndPoint host2 ) 
 - throws UnknownHostException { 
 - if ( runInBaseMode ) 
 - { 
 - return super . isInSameDataCenter ( host , host2 ) ; 
 - } 
 - return getDataCenterForEndPoint ( host ) . equals ( getDataCenterForEndPoint ( host2 ) ) ; 
 - } 
 - 
 - @ Override 
 - public boolean isOnSameRack ( EndPoint host , EndPoint host2 ) 
 - throws UnknownHostException { 
 - if ( runInBaseMode ) 
 - { 
 - return super . isOnSameRack ( host , host2 ) ; 
 - } 
 - if ( ! isInSameDataCenter ( host , host2 ) ) 
 - { 
 - return false ; 
 - } 
 - return getRackForEndPoint ( host ) . equals ( getRackForEndPoint ( host2 ) ) ; 
 - } 
 - 
 - @ Override 
 - public String displayConfiguration ( ) { 
 - StringBuffer configurationString = new StringBuffer ( " Current rack configuration \ n = = = = = = = = = = = = = = = = = \ n " ) ; 
 - for ( Object key : hostProperties . keySet ( ) ) { 
 - String endpoint = ( String ) key ; 
 - String value = hostProperties . getProperty ( endpoint ) ; 
 - configurationString . append ( endpoint + " = " + value + " \ n " ) ; 
 - } 
 - return configurationString . toString ( ) ; 
 - } 
 - 
 - @ Override 
 - public void reloadConfiguration ( ) throws IOException { 
 - String rackPropertyFilename = System . getProperty ( " rackFile " , DEFAULT _ RACK _ PROPERTY _ FILE ) ; 
 - try 
 - { 
 - Properties localHostProperties = new Properties ( ) ; 
 - localHostProperties . load ( new FileReader ( rackPropertyFilename ) ) ; 
 - hostProperties = localHostProperties ; 
 - runInBaseMode = false ; 
 - } 
 - catch ( FileNotFoundException fnfe ) { 
 - logger _ . error ( " Could not find " + rackPropertyFilename + " , using default EndPointSnitch " , fnfe ) ; 
 - runInBaseMode = true ; 
 - } 
 - catch ( IOException ioe ) { 
 - logger _ . error ( " Could not process " + rackPropertyFilename , ioe ) ; 
 - throw ioe ; 
 - } 
 - } 
 - 
 - } 
 diff - - git a / contrib / endpointsnitch _ example / CustomEndPointSnitchMBean . java b / contrib / endpointsnitch _ example / CustomEndPointSnitchMBean . java 
 deleted file mode 100644 
 index af350ba . . 0000000 
 - - - a / contrib / endpointsnitch _ example / CustomEndPointSnitchMBean . java 
 + + + / dev / null 
 @ @ - 1 , 29 + 0 , 0 @ @ 
 - package org . apache . cassandra . locator ; 
 - 
 - import java . io . IOException ; 
 - 
 - / * * 
 - * CustomEndPointSnitchMBean 
 - * 
 - * CustomEndPointSnitchMBean is the management interface for Digg ' s EndpointSnitch MBean 
 - * 
 - * @ author Sammy Yu < syu @ sammyyu . net > 
 - * 
 - * / 
 - public interface CustomEndPointSnitchMBean { 
 - / * * 
 - * The object name of the mbean . 
 - * / 
 - public static String MBEAN _ OBJECT _ NAME = " org . apache . cassandra . locator : type = EndPointSnitch " ; 
 - 
 - / * * 
 - * Reload the rack configuration 
 - * / 
 - public void reloadConfiguration ( ) throws IOException ; 
 - 
 - / * * 
 - * Display the current configuration 
 - * / 
 - public String displayConfiguration ( ) ; 
 - 
 - } 
 diff - - git a / contrib / property _ snitch / README . txt b / contrib / property _ snitch / README . txt 
 new file mode 100644 
 index 0000000 . . 7e6afe8 
 - - - / dev / null 
 + + + b / contrib / property _ snitch / README . txt 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + PropertyFileEndPointSnitch 
 + = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + 
 + Cassandra ' s RackAwareStrategy can be used to have replication take 
 + data - center and / or rack location into account when placing replicas . The 
 + ProperyFileEndPointSnitch allows you to make use of RackAwareStrategy by 
 + specifying node locations in a standard key / value properties file . 
 + 
 + 
 + Properties File 
 + - - - - - - - - - - - - - - - 
 + The EndPointSnitch expects to find a standard properties file at 
 + / etc / cassandra / rack . properties in the following format : 
 + 
 + < node IP > \ : < port > = < data center name > : < rack name > 
 + 
 + There is also a special directive used to define which information to 
 + return for unconfigured nodes : 
 + 
 + default = < data center name > : < rack name > 
 + 
 + See conf / rack . properties for an annotated example config . 
 + 
 + 
 + Installing 
 + - - - - - - - - - - 
 + * Run the ant jar target 
 + * Add build / cassandra - propsnitch . jar to the CLASSPATH 
 + * Edit storage - conf . xml and set ReplicaPlacementStrategy to 
 + org . apache . cassandra . locator . RackAwareStrategy 
 + * Edit the EndPointSnitch element of storage - conf . xml to use 
 + org . apache . cassandra . locator . PropertyFileEndPointSnitch 
 + * Create the file / etc / cassandra / rack . properties 
 + 
 + 
 + Running / Managing 
 + - - - - - - - - - - - - - - - - 
 + This endpointsnitch also registers itself as an MBean which can be used to 
 + reload the configuration file in the case the rack . properties file has 
 + changed . Additionally , the current rack information can be retrieved as 
 + well . 
 diff - - git a / contrib / property _ snitch / build . xml b / contrib / property _ snitch / build . xml 
 new file mode 100644 
 index 0000000 . . f6bece3 
 - - - / dev / null 
 + + + b / contrib / property _ snitch / build . xml 
 @ @ - 0 , 0 + 1 , 77 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " standalone = " no " ? > 
 + < ! - - 
 + ~ Licensed to the Apache Software Foundation ( ASF ) under one 
 + ~ or more contributor license agreements . See the NOTICE file 
 + ~ distributed with this work for additional information 
 + ~ regarding copyright ownership . The ASF licenses this file 
 + ~ to you under the Apache License , Version 2 . 0 ( the 
 + ~ " License " ) ; you may not use this file except in compliance 
 + ~ with the License . You may obtain a copy of the License at 
 + ~ 
 + ~ http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + ~ 
 + ~ Unless required by applicable law or agreed to in writing , 
 + ~ software distributed under the License is distributed on an 
 + ~ " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + ~ KIND , either express or implied . See the License for the 
 + ~ specific language governing permissions and limitations 
 + ~ under the License . 
 + - - > 
 + < project basedir = " . " default = " build " name = " property - snitch " > 
 + < property environment = " env " / > 
 + < property name = " debuglevel " value = " source , lines , vars " / > 
 + 
 + < property name = " cassandra . dir " value = " . . / . . " / > 
 + < property name = " cassandra . lib " value = " $ { cassandra . dir } / lib " / > 
 + < property name = " cassandra . classes " value = " $ { cassandra . dir } / build / classes " / > 
 + < property name = " build . src " value = " $ { basedir } / src / java " / > 
 + < property name = " build . dir " value = " $ { basedir } / build " / > 
 + < property name = " build . classes " value = " $ { build . dir } / classes " / > 
 + < property name = " javadoc . dir " value = " $ { build . dir } / javadoc " / > 
 + < property name = " final . name " value = " cassandra - propsnitch " / > 
 + 
 + < ! - - 
 + 	 Add all the dependencies . 
 + - - > 
 + < path id = " cassandra . classpath " > 
 + < pathelement location = " $ { build . classes } " / > 
 + < pathelement location = " $ { cassandra . classes } " / > 
 + < fileset dir = " $ { cassandra . lib } " > 
 + < include name = " * * / * . jar " / > 
 + < / fileset > 
 + < / path > 
 + 
 + < ! - - 
 + 	 Setup the output directories . 
 + - - > 
 + < target name = " init " > 
 + < mkdir dir = " $ { build . classes } " / > 
 + < / target > 
 + 
 + < target name = " clean " > 
 + < delete dir = " $ { build . dir } " / > 
 + < delete dir = " $ { build . classes } " / > 
 + < / target > 
 + 
 + < ! - - 
 + 	 The build target builds all the . class files 
 + - - > 
 + < target depends = " init " name = " build " > 
 + < echo message = " $ { ant . project . name } : $ { ant . file } " / > 
 + < javac debug = " true " debuglevel = " $ { debuglevel } " destdir = " $ { build . classes } " > 
 + < src path = " $ { build . src } " / > 
 + < classpath refid = " cassandra . classpath " / > 
 + < / javac > 
 + < / target > 
 + 
 + < ! - - 
 + 	 The jar target makes cassandra . jar output . 
 + - - > 
 + < target name = " jar " depends = " build " > 
 + < mkdir dir = " $ { build . classes } / META - INF " / > 
 + < jar jarfile = " $ { build . dir } / $ { final . name } . jar " 
 + basedir = " $ { build . classes } " > 
 + < / jar > 
 + < / target > 
 + 
 + < / project > 
 diff - - git a / contrib / property _ snitch / conf / rack . properties b / contrib / property _ snitch / conf / rack . properties 
 new file mode 100644 
 index 0000000 . . 5ebb053 
 - - - / dev / null 
 + + + b / contrib / property _ snitch / conf / rack . properties 
 @ @ - 0 , 0 + 1 , 23 @ @ 
 + 
 + # Licensed to the Apache Software Foundation ( ASF ) under one 
 + # or more contributor license agreements . See the NOTICE file 
 + # distributed with this work for additional information 
 + # regarding copyright ownership . The ASF licenses this file 
 + # to you under the Apache License , Version 2 . 0 ( the 
 + # " License " ) ; you may not use this file except in compliance 
 + # with the License . You may obtain a copy of the License at 
 + # 
 + # http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + # 
 + # Unless required by applicable law or agreed to in writing , software 
 + # distributed under the License is distributed on an " AS IS " BASIS , 
 + # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + # See the License for the specific language governing permissions and 
 + # limitations under the License . 
 + 
 + # Cassandra Node IP : Port = Data Center : Rack 
 + 192 . 168 . 1 . 200 \ : 7000 = dc1 : r1 
 + 192 . 168 . 2 . 300 \ : 7000 = dc2 : rA 
 + 
 + # default for unknown nodes 
 + default = dc1 : r1 
 diff - - git a / contrib / property _ snitch / src / java / org / apache / cassandra / locator / PropertyFileEndPointSnitch . java b / contrib / property _ snitch / src / java / org / apache / cassandra / locator / PropertyFileEndPointSnitch . java 
 new file mode 100644 
 index 0000000 . . cb0a5c5 
 - - - / dev / null 
 + + + b / contrib / property _ snitch / src / java / org / apache / cassandra / locator / PropertyFileEndPointSnitch . java 
 @ @ - 0 , 0 + 1 , 180 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package src . java . org . apache . cassandra . locator ; 
 + 
 + import java . io . FileNotFoundException ; 
 + import java . io . FileReader ; 
 + import java . io . IOException ; 
 + import java . lang . management . ManagementFactory ; 
 + import java . net . UnknownHostException ; 
 + import java . util . Properties ; 
 + import java . util . StringTokenizer ; 
 + 
 + import javax . management . MBeanServer ; 
 + import javax . management . ObjectName ; 
 + 
 + import org . apache . cassandra . locator . EndPointSnitch ; 
 + import org . apache . cassandra . net . EndPoint ; 
 + import org . apache . cassandra . utils . LogUtil ; 
 + import org . apache . log4j . Logger ; 
 + 
 + / * * 
 + * PropertyFileEndPointSnitch 
 + * 
 + * PropertyFileEndPointSnitch is used by Digg to determine if two IP ' s are in the same 
 + * datacenter or on the same rack . 
 + * 
 + * @ author Sammy Yu < syu @ sammyyu . net > 
 + * 
 + * / 
 + public class PropertyFileEndPointSnitch extends EndPointSnitch implements PropertyFileEndPointSnitchMBean { 
 + / * * 
 + * A list of properties with keys being host : port and values being datacenter : rack 
 + * / 
 + private Properties hostProperties = new Properties ( ) ; 
 + 
 + / * * 
 + * The default rack property file to be read . 
 + * / 
 + private static String DEFAULT _ RACK _ PROPERTY _ FILE = " / etc / cassandra / rack . properties " ; 
 + 
 + / * * 
 + * Whether to use the parent for detection of same node 
 + * / 
 + private boolean runInBaseMode = false ; 
 + 
 + / * * 
 + * Reference to the logger . 
 + * / 
 + private static Logger logger _ = Logger . getLogger ( PropertyFileEndPointSnitch . class ) ; 
 + 
 + public PropertyFileEndPointSnitch ( ) throws IOException { 
 + reloadConfiguration ( ) ; 
 + try 
 + { 
 + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + mbs . registerMBean ( this , new ObjectName ( MBEAN _ OBJECT _ NAME ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + logger _ . error ( LogUtil . throwableToString ( e ) ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Get the raw information about an end point 
 + * 
 + * @ param endPoint endPoint to process 
 + * 
 + * @ return a array of string with the first index being the data center and the second being the rack 
 + * / 
 + public String [ ] getEndPointInfo ( EndPoint endPoint ) { 
 + String key = endPoint . toString ( ) ; 
 + String value = hostProperties . getProperty ( key ) ; 
 + if ( value = = null ) 
 + { 
 + logger _ . error ( " Could not find end point information for " + key + " , will use default . " ) ; 
 + value = hostProperties . getProperty ( " default " ) ; 
 + } 
 + StringTokenizer st = new StringTokenizer ( value , " : " ) ; 
 + if ( st . countTokens ( ) < 2 ) 
 + { 
 + logger _ . error ( " Value for " + key + " is invalid : " + value ) ; 
 + return new String [ ] { " default " , " default " } ; 
 + } 
 + return new String [ ] { st . nextToken ( ) , st . nextToken ( ) } ; 
 + } 
 + 
 + / * * 
 + * Return the data center for which an endpoint resides in 
 + * 
 + * @ param endPoint the endPoint to process 
 + * @ return string of data center 
 + * / 
 + public String getDataCenterForEndPoint ( EndPoint endPoint ) { 
 + return getEndPointInfo ( endPoint ) [ 0 ] ; 
 + } 
 + 
 + / * * 
 + * Return the rack for which an endpoint resides in 
 + * 
 + * @ param endPoint the endPoint to process 
 + * 
 + * @ return string of rack 
 + * / 
 + public String getRackForEndPoint ( EndPoint endPoint ) { 
 + return getEndPointInfo ( endPoint ) [ 1 ] ; 
 + } 
 + 
 + @ Override 
 + public boolean isInSameDataCenter ( EndPoint host , EndPoint host2 ) 
 + throws UnknownHostException { 
 + if ( runInBaseMode ) 
 + { 
 + return super . isInSameDataCenter ( host , host2 ) ; 
 + } 
 + return getDataCenterForEndPoint ( host ) . equals ( getDataCenterForEndPoint ( host2 ) ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isOnSameRack ( EndPoint host , EndPoint host2 ) 
 + throws UnknownHostException { 
 + if ( runInBaseMode ) 
 + { 
 + return super . isOnSameRack ( host , host2 ) ; 
 + } 
 + if ( ! isInSameDataCenter ( host , host2 ) ) 
 + { 
 + return false ; 
 + } 
 + return getRackForEndPoint ( host ) . equals ( getRackForEndPoint ( host2 ) ) ; 
 + } 
 + 
 + @ Override 
 + public String displayConfiguration ( ) { 
 + StringBuffer configurationString = new StringBuffer ( " Current rack configuration \ n = = = = = = = = = = = = = = = = = \ n " ) ; 
 + for ( Object key : hostProperties . keySet ( ) ) { 
 + String endpoint = ( String ) key ; 
 + String value = hostProperties . getProperty ( endpoint ) ; 
 + configurationString . append ( endpoint + " = " + value + " \ n " ) ; 
 + } 
 + return configurationString . toString ( ) ; 
 + } 
 + 
 + @ Override 
 + public void reloadConfiguration ( ) throws IOException { 
 + String rackPropertyFilename = System . getProperty ( " rackFile " , DEFAULT _ RACK _ PROPERTY _ FILE ) ; 
 + try 
 + { 
 + Properties localHostProperties = new Properties ( ) ; 
 + localHostProperties . load ( new FileReader ( rackPropertyFilename ) ) ; 
 + hostProperties = localHostProperties ; 
 + runInBaseMode = false ; 
 + } 
 + catch ( FileNotFoundException fnfe ) { 
 + logger _ . error ( " Could not find " + rackPropertyFilename + " , using default EndPointSnitch " , fnfe ) ; 
 + runInBaseMode = true ; 
 + } 
 + catch ( IOException ioe ) { 
 + logger _ . error ( " Could not process " + rackPropertyFilename , ioe ) ; 
 + throw ioe ; 
 + } 
 + } 
 + 
 + } 
 diff - - git a / contrib / property _ snitch / src / java / org / apache / cassandra / locator / PropertyFileEndPointSnitchMBean . java b / contrib / property _ snitch / src / java / org / apache / cassandra / locator / PropertyFileEndPointSnitchMBean . java 
 new file mode 100644 
 index 0000000 . . b8872de 
 - - - / dev / null 
 + + + b / contrib / property _ snitch / src / java / org / apache / cassandra / locator / PropertyFileEndPointSnitchMBean . java 
 @ @ - 0 , 0 + 1 , 47 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package src . java . org . apache . cassandra . locator ; 
 + 
 + import java . io . IOException ; 
 + 
 + / * * 
 + * PropertyFileEndPointSnitchMBean 
 + * 
 + * PropertyFileEndPointSnitchMBean is the management interface for Digg ' s EndpointSnitch MBean 
 + * 
 + * @ author Sammy Yu < syu @ sammyyu . net > 
 + * 
 + * / 
 + public interface PropertyFileEndPointSnitchMBean { 
 + / * * 
 + * The object name of the mbean . 
 + * / 
 + public static String MBEAN _ OBJECT _ NAME = " org . apache . cassandra . locator : type = EndPointSnitch " ; 
 + 
 + / * * 
 + * Reload the rack configuration 
 + * / 
 + public void reloadConfiguration ( ) throws IOException ; 
 + 
 + / * * 
 + * Display the current configuration 
 + * / 
 + public String displayConfiguration ( ) ; 
 + 
 + }
