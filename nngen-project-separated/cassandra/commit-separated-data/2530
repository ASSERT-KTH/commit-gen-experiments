BLEU SCORE: 0.041961149062965476

TEST MSG: Add ability to set / get logging levels to nodetool
GENERATED MSG: Add commit _ failure _ policy .

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 75f6427 . . f44eaed 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 45 , 6 + 45 , 7 @ @ import com . google . common . util . concurrent . Uninterruptibles ; <nl> import org . apache . cassandra . cql3 . CQL3Type ; <nl> import org . apache . commons . lang3 . StringUtils ; <nl> import org . apache . log4j . Level ; <nl> + import org . apache . log4j . LogManager ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 57 , 7 + 58 , 6 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . KSMetaData ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . * ; <nl> - import org . apache . cassandra . db . Keyspace ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . db . index . SecondaryIndex ; <nl> import org . apache . cassandra . dht . * ; <nl> @ @ - 2795 , 9 + 2795 , 44 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> public void setLog4jLevel ( String classQualifier , String rawLevel ) <nl> { <nl> + org . apache . log4j . Logger log4jlogger = org . apache . log4j . Logger . getLogger ( classQualifier ) ; <nl> + / / if both classQualifer and rawLevel are empty , reload from configuration <nl> + if ( StringUtils . isBlank ( classQualifier ) & & StringUtils . isBlank ( rawLevel ) ) <nl> + { <nl> + LogManager . resetConfiguration ( ) ; <nl> + CassandraDaemon . initLog4j ( ) ; <nl> + return ; <nl> + } <nl> + / / classQualifer is set , but blank level given <nl> + else if ( StringUtils . isNotBlank ( classQualifier ) & & StringUtils . isBlank ( rawLevel ) ) <nl> + { <nl> + if ( log4jlogger . getLevel ( ) ! = null | | log4jlogger . getAllAppenders ( ) . hasMoreElements ( ) ) <nl> + log4jlogger . setLevel ( null ) ; <nl> + return ; <nl> + } <nl> + <nl> Level level = Level . toLevel ( rawLevel ) ; <nl> - org . apache . log4j . Logger . getLogger ( classQualifier ) . setLevel ( level ) ; <nl> - logger . info ( " set log level to " + level + " for classes under ' " + classQualifier + " ' ( if the level doesn ' t look like ' " + rawLevel + " ' then log4j couldn ' t parse ' " + rawLevel + " ' ) " ) ; <nl> + log4jlogger . setLevel ( level ) ; <nl> + logger . info ( " set log level to { } for classes under ' { } ' ( if the level doesn ' t look like ' { } ' then the logger couldn ' t parse ' { } ' ) " , level , classQualifier , rawLevel , rawLevel ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return the runtime logging levels for all the configured loggers <nl> + * / <nl> + @ Override <nl> + public Map < String , String > getLoggingLevels ( ) <nl> + { <nl> + Map < String , String > logLevelMaps = Maps . newLinkedHashMap ( ) ; <nl> + org . apache . log4j . Logger rootLogger = org . apache . log4j . Logger . getRootLogger ( ) ; <nl> + logLevelMaps . put ( rootLogger . getName ( ) , rootLogger . getLevel ( ) . toString ( ) ) ; <nl> + Enumeration < org . apache . log4j . Logger > loggers = LogManager . getCurrentLoggers ( ) ; <nl> + while ( loggers . hasMoreElements ( ) ) <nl> + { <nl> + org . apache . log4j . Logger logger = loggers . nextElement ( ) ; <nl> + if ( logger . getLevel ( ) ! = null ) <nl> + logLevelMaps . put ( logger . getName ( ) , logger . getLevel ( ) . toString ( ) ) ; <nl> + } <nl> + return logLevelMaps ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index ed260b8 . . 9b1487f 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 341 , 6 + 341 , 8 @ @ public interface StorageServiceMBean extends NotificationEmitter <nl> / * * set the logging level at runtime * / <nl> public void setLog4jLevel ( String classQualifier , String level ) ; <nl> <nl> + public Map < String , String > getLoggingLevels ( ) ; <nl> + <nl> / * * get the operational mode ( leaving , joining , normal , decommissioned , client ) * * / <nl> public String getOperationMode ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index 618097d . . b79a037 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 55 , 6 + 55 , 9 @ @ import org . apache . cassandra . streaming . SessionInfo ; <nl> import org . apache . cassandra . utils . EstimatedHistogram ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> + import static org . apache . commons . lang3 . StringUtils . EMPTY ; <nl> + <nl> + <nl> public class NodeCmd <nl> { <nl> private static final String HISTORYFILE = " nodetool . history " ; <nl> @ @ - 184 , 7 + 187 , 9 @ @ public class NodeCmd <nl> ENABLEBACKUP , <nl> DISABLEBACKUP , <nl> SETCACHEKEYSTOSAVE , <nl> - RELOADTRIGGERS <nl> + RELOADTRIGGERS , <nl> + SETLOGGINGLEVEL , <nl> + GETLOGGINGLEVELS <nl> } <nl> <nl> <nl> @ @ - 1444 , 6 + 1449 , 20 @ @ public class NodeCmd <nl> probe . reloadTriggers ( ) ; <nl> break ; <nl> <nl> + case SETLOGGINGLEVEL : <nl> + String classQualifer = EMPTY ; <nl> + String level = EMPTY ; <nl> + if ( arguments . length > = 1 ) <nl> + classQualifer = arguments [ 0 ] ; <nl> + if ( arguments . length = = 2 ) <nl> + level = arguments [ 1 ] ; <nl> + probe . setLoggingLevel ( classQualifer , level ) ; <nl> + break ; <nl> + <nl> + case GETLOGGINGLEVELS : <nl> + nodeCmd . getLoggingLevels ( System . out ) ; <nl> + break ; <nl> + <nl> default : <nl> throw new RuntimeException ( " Unreachable code . " ) ; <nl> } <nl> @ @ - 1465 , 6 + 1484 , 14 @ @ public class NodeCmd <nl> System . exit ( probe . isFailed ( ) ? 1 : 0 ) ; <nl> } <nl> <nl> + private void getLoggingLevels ( PrintStream out ) <nl> + { <nl> + / / what if some one set a very long logger name ? 50 space may not be enough . . . <nl> + System . out . printf ( " % n % - 50s % 10s % n " , " Logger Name " , " Log Level " ) ; <nl> + for ( Map . Entry < String , String > entry : this . probe . getLoggingLevels ( ) . entrySet ( ) ) <nl> + System . out . printf ( " % - 50s % 10s % n " , entry . getKey ( ) , entry . getValue ( ) ) ; <nl> + } <nl> + <nl> private void printCompactionHistory ( PrintStream out ) <nl> { <nl> out . println ( " Compaction History : " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index f42fd22 . . f0ee15d 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 916 , 6 + 916 , 16 @ @ public class NodeProbe <nl> { <nl> spProxy . reloadTriggerClasses ( ) ; <nl> } <nl> + <nl> + public void setLoggingLevel ( String classQualifier , String level ) <nl> + { <nl> + ssProxy . setLog4jLevel ( classQualifier , level ) ; <nl> + } <nl> + <nl> + public Map < String , String > getLoggingLevels ( ) <nl> + { <nl> + return ssProxy . getLoggingLevels ( ) ; <nl> + } <nl> } <nl> <nl> class ColumnFamilyStoreMBeanIterator implements Iterator < Map . Entry < String , ColumnFamilyStoreMBean > > <nl> diff - - git a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml <nl> index eaab98a . . 8b0185e 100644 <nl> - - - a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml <nl> + + + b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml <nl> @ @ - 220 , 3 + 220 , 9 @ @ commands : <nl> - name : reloadtriggers <nl> help : | <nl> reload trigger classes <nl> + - name : setLoggingLevel <nl> + help : | <nl> + Set a log level for a given logger . If both classQualifer and level are empty / null , it will reset to the initial configuration <nl> + - name : getLoggingLevels <nl> + help : | <nl> + Get the runtime logging levels
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 75f6427 . . f44eaed 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 45 , 6 + 45 , 7 @ @ import com . google . common . util . concurrent . Uninterruptibles ; 
 import org . apache . cassandra . cql3 . CQL3Type ; 
 import org . apache . commons . lang3 . StringUtils ; 
 import org . apache . log4j . Level ; 
 + import org . apache . log4j . LogManager ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 57 , 7 + 58 , 6 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . KSMetaData ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . * ; 
 - import org . apache . cassandra . db . Keyspace ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . db . index . SecondaryIndex ; 
 import org . apache . cassandra . dht . * ; 
 @ @ - 2795 , 9 + 2795 , 44 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 public void setLog4jLevel ( String classQualifier , String rawLevel ) 
 { 
 + org . apache . log4j . Logger log4jlogger = org . apache . log4j . Logger . getLogger ( classQualifier ) ; 
 + / / if both classQualifer and rawLevel are empty , reload from configuration 
 + if ( StringUtils . isBlank ( classQualifier ) & & StringUtils . isBlank ( rawLevel ) ) 
 + { 
 + LogManager . resetConfiguration ( ) ; 
 + CassandraDaemon . initLog4j ( ) ; 
 + return ; 
 + } 
 + / / classQualifer is set , but blank level given 
 + else if ( StringUtils . isNotBlank ( classQualifier ) & & StringUtils . isBlank ( rawLevel ) ) 
 + { 
 + if ( log4jlogger . getLevel ( ) ! = null | | log4jlogger . getAllAppenders ( ) . hasMoreElements ( ) ) 
 + log4jlogger . setLevel ( null ) ; 
 + return ; 
 + } 
 + 
 Level level = Level . toLevel ( rawLevel ) ; 
 - org . apache . log4j . Logger . getLogger ( classQualifier ) . setLevel ( level ) ; 
 - logger . info ( " set log level to " + level + " for classes under ' " + classQualifier + " ' ( if the level doesn ' t look like ' " + rawLevel + " ' then log4j couldn ' t parse ' " + rawLevel + " ' ) " ) ; 
 + log4jlogger . setLevel ( level ) ; 
 + logger . info ( " set log level to { } for classes under ' { } ' ( if the level doesn ' t look like ' { } ' then the logger couldn ' t parse ' { } ' ) " , level , classQualifier , rawLevel , rawLevel ) ; 
 + } 
 + 
 + / * * 
 + * @ return the runtime logging levels for all the configured loggers 
 + * / 
 + @ Override 
 + public Map < String , String > getLoggingLevels ( ) 
 + { 
 + Map < String , String > logLevelMaps = Maps . newLinkedHashMap ( ) ; 
 + org . apache . log4j . Logger rootLogger = org . apache . log4j . Logger . getRootLogger ( ) ; 
 + logLevelMaps . put ( rootLogger . getName ( ) , rootLogger . getLevel ( ) . toString ( ) ) ; 
 + Enumeration < org . apache . log4j . Logger > loggers = LogManager . getCurrentLoggers ( ) ; 
 + while ( loggers . hasMoreElements ( ) ) 
 + { 
 + org . apache . log4j . Logger logger = loggers . nextElement ( ) ; 
 + if ( logger . getLevel ( ) ! = null ) 
 + logLevelMaps . put ( logger . getName ( ) , logger . getLevel ( ) . toString ( ) ) ; 
 + } 
 + return logLevelMaps ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index ed260b8 . . 9b1487f 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 341 , 6 + 341 , 8 @ @ public interface StorageServiceMBean extends NotificationEmitter 
 / * * set the logging level at runtime * / 
 public void setLog4jLevel ( String classQualifier , String level ) ; 
 
 + public Map < String , String > getLoggingLevels ( ) ; 
 + 
 / * * get the operational mode ( leaving , joining , normal , decommissioned , client ) * * / 
 public String getOperationMode ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index 618097d . . b79a037 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 55 , 6 + 55 , 9 @ @ import org . apache . cassandra . streaming . SessionInfo ; 
 import org . apache . cassandra . utils . EstimatedHistogram ; 
 import org . apache . cassandra . utils . Pair ; 
 
 + import static org . apache . commons . lang3 . StringUtils . EMPTY ; 
 + 
 + 
 public class NodeCmd 
 { 
 private static final String HISTORYFILE = " nodetool . history " ; 
 @ @ - 184 , 7 + 187 , 9 @ @ public class NodeCmd 
 ENABLEBACKUP , 
 DISABLEBACKUP , 
 SETCACHEKEYSTOSAVE , 
 - RELOADTRIGGERS 
 + RELOADTRIGGERS , 
 + SETLOGGINGLEVEL , 
 + GETLOGGINGLEVELS 
 } 
 
 
 @ @ - 1444 , 6 + 1449 , 20 @ @ public class NodeCmd 
 probe . reloadTriggers ( ) ; 
 break ; 
 
 + case SETLOGGINGLEVEL : 
 + String classQualifer = EMPTY ; 
 + String level = EMPTY ; 
 + if ( arguments . length > = 1 ) 
 + classQualifer = arguments [ 0 ] ; 
 + if ( arguments . length = = 2 ) 
 + level = arguments [ 1 ] ; 
 + probe . setLoggingLevel ( classQualifer , level ) ; 
 + break ; 
 + 
 + case GETLOGGINGLEVELS : 
 + nodeCmd . getLoggingLevels ( System . out ) ; 
 + break ; 
 + 
 default : 
 throw new RuntimeException ( " Unreachable code . " ) ; 
 } 
 @ @ - 1465 , 6 + 1484 , 14 @ @ public class NodeCmd 
 System . exit ( probe . isFailed ( ) ? 1 : 0 ) ; 
 } 
 
 + private void getLoggingLevels ( PrintStream out ) 
 + { 
 + / / what if some one set a very long logger name ? 50 space may not be enough . . . 
 + System . out . printf ( " % n % - 50s % 10s % n " , " Logger Name " , " Log Level " ) ; 
 + for ( Map . Entry < String , String > entry : this . probe . getLoggingLevels ( ) . entrySet ( ) ) 
 + System . out . printf ( " % - 50s % 10s % n " , entry . getKey ( ) , entry . getValue ( ) ) ; 
 + } 
 + 
 private void printCompactionHistory ( PrintStream out ) 
 { 
 out . println ( " Compaction History : " ) ; 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index f42fd22 . . f0ee15d 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 916 , 6 + 916 , 16 @ @ public class NodeProbe 
 { 
 spProxy . reloadTriggerClasses ( ) ; 
 } 
 + 
 + public void setLoggingLevel ( String classQualifier , String level ) 
 + { 
 + ssProxy . setLog4jLevel ( classQualifier , level ) ; 
 + } 
 + 
 + public Map < String , String > getLoggingLevels ( ) 
 + { 
 + return ssProxy . getLoggingLevels ( ) ; 
 + } 
 } 
 
 class ColumnFamilyStoreMBeanIterator implements Iterator < Map . Entry < String , ColumnFamilyStoreMBean > > 
 diff - - git a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml 
 index eaab98a . . 8b0185e 100644 
 - - - a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml 
 + + + b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml 
 @ @ - 220 , 3 + 220 , 9 @ @ commands : 
 - name : reloadtriggers 
 help : | 
 reload trigger classes 
 + - name : setLoggingLevel 
 + help : | 
 + Set a log level for a given logger . If both classQualifer and level are empty / null , it will reset to the initial configuration 
 + - name : getLoggingLevels 
 + help : | 
 + Get the runtime logging levels

NEAREST DIFF:
ELIMINATEDSENTENCE
