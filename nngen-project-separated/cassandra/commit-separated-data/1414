BLEU SCORE: 0.09535414040914189

TEST MSG: Add new JMX methods to change local compaction strategy
GENERATED MSG: Validate compaction strategy options

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7151883 . . 462de44 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 9 <nl> + * Add new JMX methods to change local compaction strategy ( CASSANDRA - 9965 ) <nl> * Write hints for paxos commits ( CASSANDRA - 7342 ) <nl> * ( cqlsh ) Fix timestamps before 1970 on Windows , always <nl> use UTC for timestamp display ( CASSANDRA - 10000 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 0b64e31 . . f6e2665 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 24 , 7 + 24 , 8 @ @ Upgrading <nl> - Commit log files are no longer recycled by default , due to negative <nl> performance implications . This can be enabled again with the <nl> commitlog _ segment _ recycling option in your cassandra . yaml <nl> - <nl> + - JMX methods set / getCompactionStrategyClass have been deprecated , use <nl> + set / getLocalCompactionStrategy / set / getLocalCompactionStrategyJson instead <nl> <nl> 2 . 1 . 8 <nl> = = = = = <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 4bc5f1b . . 2c6a30c 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 1283 , 7 + 1283 , 9 @ @ public final class CFMetaData <nl> return strategyClass ; <nl> } <nl> <nl> - public AbstractCompactionStrategy createCompactionStrategyInstance ( ColumnFamilyStore cfs ) <nl> + public static AbstractCompactionStrategy createCompactionStrategyInstance ( Class < ? extends AbstractCompactionStrategy > compactionStrategyClass , <nl> + ColumnFamilyStore cfs , <nl> + Map < String , String > compactionStrategyOptions ) <nl> { <nl> try <nl> { <nl> @ @ - 1297 , 6 + 1299 , 12 @ @ public final class CFMetaData <nl> } <nl> } <nl> <nl> + @ Deprecated <nl> + public AbstractCompactionStrategy createCompactionStrategyInstance ( ColumnFamilyStore cfs ) <nl> + { <nl> + return createCompactionStrategyInstance ( compactionStrategyClass , cfs , compactionStrategyOptions ) ; <nl> + } <nl> + <nl> / / converts CFM to thrift CfDef <nl> public org . apache . cassandra . thrift . CfDef toThrift ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 6777e7a . . f8d796e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 252 , 6 + 252 , 41 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } ; <nl> } <nl> <nl> + public void setLocalCompactionStrategyJson ( String options ) <nl> + { <nl> + setLocalCompactionStrategy ( FBUtilities . fromJsonMap ( options ) ) ; <nl> + } <nl> + <nl> + public String getLocalCompactionStrategyJson ( ) <nl> + { <nl> + return FBUtilities . json ( getLocalCompactionStrategy ( ) ) ; <nl> + } <nl> + <nl> + public void setLocalCompactionStrategy ( Map < String , String > options ) <nl> + { <nl> + try <nl> + { <nl> + Map < String , String > optionsCopy = new HashMap < > ( options ) ; <nl> + Class < ? extends AbstractCompactionStrategy > compactionStrategyClass = CFMetaData . createCompactionStrategy ( optionsCopy . get ( " class " ) ) ; <nl> + optionsCopy . remove ( " class " ) ; <nl> + CFMetaData . validateCompactionOptions ( compactionStrategyClass , optionsCopy ) ; <nl> + compactionStrategyWrapper . setNewLocalCompactionStrategy ( compactionStrategyClass , optionsCopy ) ; <nl> + } <nl> + catch ( Throwable t ) <nl> + { <nl> + logger . error ( " Could not set new local compaction strategy " , t ) ; <nl> + / / dont propagate the ConfigurationException over jmx , user will only see a ClassNotFoundException <nl> + throw new IllegalArgumentException ( " Could not set new local compaction strategy : " + t . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + public Map < String , String > getLocalCompactionStrategy ( ) <nl> + { <nl> + Map < String , String > options = new HashMap < > ( compactionStrategyWrapper . options ) ; <nl> + options . put ( " class " , compactionStrategyWrapper . getName ( ) ) ; <nl> + return options ; <nl> + } <nl> + <nl> public void setCompactionStrategyClass ( String compactionStrategyClass ) <nl> { <nl> try <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> index 4df593b . . e292be4 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> @ @ - 311 , 14 + 311 , 35 @ @ public interface ColumnFamilyStoreMBean <nl> public void setMaximumCompactionThreshold ( int threshold ) ; <nl> <nl> / * * <nl> + * Sets the compaction strategy locally for this node <nl> + * <nl> + * Note that this will be set until an ALTER with compaction = { . . } is executed or the node is restarted <nl> + * <nl> + * @ param options compaction options with the same syntax as when doing ALTER . . . WITH compaction = { . . } <nl> + * / <nl> + public void setLocalCompactionStrategyJson ( String options ) ; <nl> + public String getLocalCompactionStrategyJson ( ) ; <nl> + <nl> + / * * <nl> + * Sets the compaction strategy locally for this node <nl> + * <nl> + * Note that this will be set until an ALTER with compaction = { . . } is executed or the node is restarted <nl> + * <nl> + * @ param options compaction options map <nl> + * / <nl> + public void setLocalCompactionStrategy ( Map < String , String > options ) ; <nl> + public Map < String , String > getLocalCompactionStrategy ( ) ; <nl> + / * * <nl> * Sets the compaction strategy by class name <nl> * @ param className the name of the compaction strategy class <nl> * / <nl> + @ Deprecated <nl> public void setCompactionStrategyClass ( String className ) ; <nl> <nl> / * * <nl> * Gets the compaction strategy class name <nl> * / <nl> + @ Deprecated <nl> public String getCompactionStrategyClass ( ) ; <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> index 73cda77 . . 77ca404 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> @ @ - 60 , 7 + 60 , 7 @ @ public abstract class AbstractCompactionStrategy <nl> protected static final String UNCHECKED _ TOMBSTONE _ COMPACTION _ OPTION = " unchecked _ tombstone _ compaction " ; <nl> protected static final String COMPACTION _ ENABLED = " enabled " ; <nl> <nl> - protected Map < String , String > options ; <nl> + public Map < String , String > options ; <nl> <nl> protected final ColumnFamilyStore cfs ; <nl> protected float tombstoneThreshold ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / WrappingCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / WrappingCompactionStrategy . java <nl> index 0fed733 . . ae67599 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / WrappingCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / WrappingCompactionStrategy . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . util . Arrays ; <nl> import java . util . Collection ; <nl> import java . util . HashSet ; <nl> import java . util . List ; <nl> + import java . util . Map ; <nl> import java . util . Set ; <nl> import java . util . concurrent . Callable ; <nl> <nl> @ @ - 47 , 6 + 48 , 16 @ @ public final class WrappingCompactionStrategy extends AbstractCompactionStrategy <nl> private static final Logger logger = LoggerFactory . getLogger ( WrappingCompactionStrategy . class ) ; <nl> private volatile AbstractCompactionStrategy repaired ; <nl> private volatile AbstractCompactionStrategy unrepaired ; <nl> + / * <nl> + We keep a copy of the schema compaction options and class here to be able to decide if we <nl> + should update the compaction strategy in maybeReloadCompactionStrategy ( ) due to an ALTER . <nl> + <nl> + If a user changes the local compaction strategy and then later ALTERs a compaction option , <nl> + we will use the new compaction options . <nl> + * / <nl> + private Map < String , String > schemaCompactionOptions ; <nl> + private Class < ? > schemaCompactionStrategyClass ; <nl> + <nl> public WrappingCompactionStrategy ( ColumnFamilyStore cfs ) <nl> { <nl> super ( cfs , cfs . metadata . compactionStrategyOptions ) ; <nl> @ @ - 146 , 10 + 157 , 9 @ @ public final class WrappingCompactionStrategy extends AbstractCompactionStrategy <nl> <nl> public synchronized void maybeReloadCompactionStrategy ( CFMetaData metadata ) <nl> { <nl> - if ( repaired ! = null & & repaired . getClass ( ) . equals ( metadata . compactionStrategyClass ) <nl> - & & unrepaired ! = null & & unrepaired . getClass ( ) . equals ( metadata . compactionStrategyClass ) <nl> - & & repaired . options . equals ( metadata . compactionStrategyOptions ) <nl> - & & unrepaired . options . equals ( metadata . compactionStrategyOptions ) ) <nl> + / / compare the old schema configuration to the new one , ignore any locally set changes . <nl> + if ( metadata . compactionStrategyClass . equals ( schemaCompactionStrategyClass ) & & <nl> + metadata . compactionStrategyOptions . equals ( schemaCompactionOptions ) ) <nl> return ; <nl> reloadCompactionStrategy ( metadata ) ; <nl> } <nl> @ @ - 157 , 13 + 167 , 10 @ @ public final class WrappingCompactionStrategy extends AbstractCompactionStrategy <nl> public synchronized void reloadCompactionStrategy ( CFMetaData metadata ) <nl> { <nl> boolean disabledWithJMX = ! enabled & & shouldBeEnabled ( ) ; <nl> - if ( repaired ! = null ) <nl> - repaired . shutdown ( ) ; <nl> - if ( unrepaired ! = null ) <nl> - unrepaired . shutdown ( ) ; <nl> - repaired = metadata . createCompactionStrategyInstance ( cfs ) ; <nl> - unrepaired = metadata . createCompactionStrategyInstance ( cfs ) ; <nl> - options = ImmutableMap . copyOf ( metadata . compactionStrategyOptions ) ; <nl> + setStrategy ( metadata . compactionStrategyClass , metadata . compactionStrategyOptions ) ; <nl> + schemaCompactionOptions = ImmutableMap . copyOf ( metadata . compactionStrategyOptions ) ; <nl> + schemaCompactionStrategyClass = repaired . getClass ( ) ; <nl> + <nl> if ( disabledWithJMX | | ! shouldBeEnabled ( ) ) <nl> disable ( ) ; <nl> else <nl> @ @ - 393 , 4 + 400 , 26 @ @ public final class WrappingCompactionStrategy extends AbstractCompactionStrategy <nl> { <nl> return Arrays . asList ( repaired , unrepaired ) ; <nl> } <nl> + <nl> + public synchronized void setNewLocalCompactionStrategy ( Class < ? extends AbstractCompactionStrategy > compactionStrategyClass , Map < String , String > options ) <nl> + { <nl> + logger . info ( " Switching local compaction strategy from { } to { } with options = { } " , repaired = = null ? " null " : repaired . getClass ( ) , compactionStrategyClass , options ) ; <nl> + setStrategy ( compactionStrategyClass , options ) ; <nl> + if ( shouldBeEnabled ( ) ) <nl> + enable ( ) ; <nl> + else <nl> + disable ( ) ; <nl> + startup ( ) ; <nl> + } <nl> + <nl> + private void setStrategy ( Class < ? extends AbstractCompactionStrategy > compactionStrategyClass , Map < String , String > options ) <nl> + { <nl> + if ( repaired ! = null ) <nl> + repaired . shutdown ( ) ; <nl> + if ( unrepaired ! = null ) <nl> + unrepaired . shutdown ( ) ; <nl> + repaired = CFMetaData . createCompactionStrategyInstance ( compactionStrategyClass , cfs , options ) ; <nl> + unrepaired = CFMetaData . createCompactionStrategyInstance ( compactionStrategyClass , cfs , options ) ; <nl> + this . options = ImmutableMap . copyOf ( options ) ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java <nl> index 58fc062 . . 2798689 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java <nl> @ @ - 17 , 12 + 17 , 16 @ @ <nl> * / <nl> package org . apache . cassandra . db . compaction ; <nl> <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + <nl> import org . junit . Test ; <nl> <nl> import org . apache . cassandra . cql3 . CQLTester ; <nl> import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> + import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> @ @ - 141 , 12 + 145 , 88 @ @ public class CompactionsCQLTest extends CQLTester <nl> assertTrue ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testSetLocalCompactionStrategy ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) " ) ; <nl> + Map < String , String > localOptions = new HashMap < > ( ) ; <nl> + localOptions . put ( " class " , " DateTieredCompactionStrategy " ) ; <nl> + getCurrentColumnFamilyStore ( ) . setLocalCompactionStrategy ( localOptions ) ; <nl> + WrappingCompactionStrategy wrappingCompactionStrategy = ( WrappingCompactionStrategy ) getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) ; <nl> + assertTrue ( verifyStrategies ( wrappingCompactionStrategy , DateTieredCompactionStrategy . class ) ) ; <nl> + / / altering something non - compaction related <nl> + execute ( " ALTER TABLE % s WITH gc _ grace _ seconds = 1000 " ) ; <nl> + / / should keep the local compaction strat <nl> + assertTrue ( verifyStrategies ( wrappingCompactionStrategy , DateTieredCompactionStrategy . class ) ) ; <nl> + / / altering a compaction option <nl> + execute ( " ALTER TABLE % s WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' min _ threshold ' : 3 } " ) ; <nl> + / / will use the new option <nl> + assertTrue ( verifyStrategies ( wrappingCompactionStrategy , SizeTieredCompactionStrategy . class ) ) ; <nl> + } <nl> + <nl> + <nl> + @ Test <nl> + public void testSetLocalCompactionStrategyDisable ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) " ) ; <nl> + Map < String , String > localOptions = new HashMap < > ( ) ; <nl> + localOptions . put ( " class " , " DateTieredCompactionStrategy " ) ; <nl> + localOptions . put ( " enabled " , " false " ) ; <nl> + getCurrentColumnFamilyStore ( ) . setLocalCompactionStrategy ( localOptions ) ; <nl> + assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; <nl> + localOptions . clear ( ) ; <nl> + localOptions . put ( " class " , " DateTieredCompactionStrategy " ) ; <nl> + / / localOptions . put ( " enabled " , " true " ) ; - this is default ! <nl> + getCurrentColumnFamilyStore ( ) . setLocalCompactionStrategy ( localOptions ) ; <nl> + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; <nl> + } <nl> + <nl> + <nl> + @ Test <nl> + public void testSetLocalCompactionStrategyEnable ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) " ) ; <nl> + Map < String , String > localOptions = new HashMap < > ( ) ; <nl> + localOptions . put ( " class " , " DateTieredCompactionStrategy " ) ; <nl> + <nl> + getCurrentColumnFamilyStore ( ) . disableAutoCompaction ( ) ; <nl> + assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; <nl> + <nl> + getCurrentColumnFamilyStore ( ) . setLocalCompactionStrategy ( localOptions ) ; <nl> + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; <nl> + <nl> + } <nl> + <nl> + <nl> + <nl> + @ Test ( expected = IllegalArgumentException . class ) <nl> + public void testBadLocalCompactionStrategyOptions ( ) <nl> + { <nl> + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) " ) ; <nl> + Map < String , String > localOptions = new HashMap < > ( ) ; <nl> + localOptions . put ( " class " , " SizeTieredCompactionStrategy " ) ; <nl> + localOptions . put ( " sstable _ size _ in _ mb " , " 1234 " ) ; / / not for STCS <nl> + getCurrentColumnFamilyStore ( ) . setLocalCompactionStrategy ( localOptions ) ; <nl> + } <nl> + <nl> + public boolean verifyStrategies ( WrappingCompactionStrategy wrappingStrategy , Class < ? extends AbstractCompactionStrategy > expected ) <nl> + { <nl> + boolean found = false ; <nl> + for ( AbstractCompactionStrategy actualStrategy : wrappingStrategy . getWrappedStrategies ( ) ) <nl> + { <nl> + if ( ! actualStrategy . getClass ( ) . equals ( expected ) ) <nl> + return false ; <nl> + found = true ; <nl> + } <nl> + return found ; <nl> + } <nl> + <nl> private ColumnFamilyStore getCurrentColumnFamilyStore ( ) <nl> { <nl> return Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( currentTable ( ) ) ; <nl> } <nl> <nl> - public boolean minorWasTriggered ( String keyspace , String cf ) throws Throwable <nl> + private boolean minorWasTriggered ( String keyspace , String cf ) throws Throwable <nl> { <nl> UntypedResultSet res = execute ( " SELECT * FROM system . compaction _ history " ) ; <nl> boolean minorWasTriggered = false ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / utils / SemanticVersion . java b / src / java / org / apache / cassandra / utils / SemanticVersion . java <nl> index 00305cb . . fd122ad 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / SemanticVersion . java <nl> + + + b / src / java / org / apache / cassandra / utils / SemanticVersion . java <nl> @ @ - 143 , 7 + 143 , 7 @ @ public class SemanticVersion implements Comparable < SemanticVersion > <nl> <nl> public boolean isSupportedBy ( SemanticVersion version ) <nl> { <nl> - return major = = version . major & & minor < = version . minor ; <nl> + return major = = version . major & & minor < = version . minor & & patch < = version . patch ; <nl> } <nl> <nl> private static int compareIdentifiers ( String [ ] ids1 , String [ ] ids2 , int defaultPred ) <nl> diff - - git a / test / unit / org / apache / cassandra / utils / SemanticVersionTest . java b / test / unit / org / apache / cassandra / utils / SemanticVersionTest . java <nl> index 6d03d3f . . 010964f 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / SemanticVersionTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / SemanticVersionTest . java <nl> @ @ - 71 , 7 + 71 , 7 @ @ public class SemanticVersionTest <nl> v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; <nl> v2 = new SemanticVersion ( " 1 . 2 . 4 " ) ; <nl> assert v1 . isSupportedBy ( v2 ) ; <nl> - assert v2 . isSupportedBy ( v1 ) ; <nl> + assert ! v2 . isSupportedBy ( v1 ) ; <nl> <nl> v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; <nl> v2 = new SemanticVersion ( " 1 . 3 . 3 " ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7151883 . . 462de44 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 9 
 + * Add new JMX methods to change local compaction strategy ( CASSANDRA - 9965 ) 
 * Write hints for paxos commits ( CASSANDRA - 7342 ) 
 * ( cqlsh ) Fix timestamps before 1970 on Windows , always 
 use UTC for timestamp display ( CASSANDRA - 10000 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 0b64e31 . . f6e2665 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 24 , 7 + 24 , 8 @ @ Upgrading 
 - Commit log files are no longer recycled by default , due to negative 
 performance implications . This can be enabled again with the 
 commitlog _ segment _ recycling option in your cassandra . yaml 
 - 
 + - JMX methods set / getCompactionStrategyClass have been deprecated , use 
 + set / getLocalCompactionStrategy / set / getLocalCompactionStrategyJson instead 
 
 2 . 1 . 8 
 = = = = = 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 4bc5f1b . . 2c6a30c 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 1283 , 7 + 1283 , 9 @ @ public final class CFMetaData 
 return strategyClass ; 
 } 
 
 - public AbstractCompactionStrategy createCompactionStrategyInstance ( ColumnFamilyStore cfs ) 
 + public static AbstractCompactionStrategy createCompactionStrategyInstance ( Class < ? extends AbstractCompactionStrategy > compactionStrategyClass , 
 + ColumnFamilyStore cfs , 
 + Map < String , String > compactionStrategyOptions ) 
 { 
 try 
 { 
 @ @ - 1297 , 6 + 1299 , 12 @ @ public final class CFMetaData 
 } 
 } 
 
 + @ Deprecated 
 + public AbstractCompactionStrategy createCompactionStrategyInstance ( ColumnFamilyStore cfs ) 
 + { 
 + return createCompactionStrategyInstance ( compactionStrategyClass , cfs , compactionStrategyOptions ) ; 
 + } 
 + 
 / / converts CFM to thrift CfDef 
 public org . apache . cassandra . thrift . CfDef toThrift ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 6777e7a . . f8d796e 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 252 , 6 + 252 , 41 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } ; 
 } 
 
 + public void setLocalCompactionStrategyJson ( String options ) 
 + { 
 + setLocalCompactionStrategy ( FBUtilities . fromJsonMap ( options ) ) ; 
 + } 
 + 
 + public String getLocalCompactionStrategyJson ( ) 
 + { 
 + return FBUtilities . json ( getLocalCompactionStrategy ( ) ) ; 
 + } 
 + 
 + public void setLocalCompactionStrategy ( Map < String , String > options ) 
 + { 
 + try 
 + { 
 + Map < String , String > optionsCopy = new HashMap < > ( options ) ; 
 + Class < ? extends AbstractCompactionStrategy > compactionStrategyClass = CFMetaData . createCompactionStrategy ( optionsCopy . get ( " class " ) ) ; 
 + optionsCopy . remove ( " class " ) ; 
 + CFMetaData . validateCompactionOptions ( compactionStrategyClass , optionsCopy ) ; 
 + compactionStrategyWrapper . setNewLocalCompactionStrategy ( compactionStrategyClass , optionsCopy ) ; 
 + } 
 + catch ( Throwable t ) 
 + { 
 + logger . error ( " Could not set new local compaction strategy " , t ) ; 
 + / / dont propagate the ConfigurationException over jmx , user will only see a ClassNotFoundException 
 + throw new IllegalArgumentException ( " Could not set new local compaction strategy : " + t . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + public Map < String , String > getLocalCompactionStrategy ( ) 
 + { 
 + Map < String , String > options = new HashMap < > ( compactionStrategyWrapper . options ) ; 
 + options . put ( " class " , compactionStrategyWrapper . getName ( ) ) ; 
 + return options ; 
 + } 
 + 
 public void setCompactionStrategyClass ( String compactionStrategyClass ) 
 { 
 try 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 index 4df593b . . e292be4 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 @ @ - 311 , 14 + 311 , 35 @ @ public interface ColumnFamilyStoreMBean 
 public void setMaximumCompactionThreshold ( int threshold ) ; 
 
 / * * 
 + * Sets the compaction strategy locally for this node 
 + * 
 + * Note that this will be set until an ALTER with compaction = { . . } is executed or the node is restarted 
 + * 
 + * @ param options compaction options with the same syntax as when doing ALTER . . . WITH compaction = { . . } 
 + * / 
 + public void setLocalCompactionStrategyJson ( String options ) ; 
 + public String getLocalCompactionStrategyJson ( ) ; 
 + 
 + / * * 
 + * Sets the compaction strategy locally for this node 
 + * 
 + * Note that this will be set until an ALTER with compaction = { . . } is executed or the node is restarted 
 + * 
 + * @ param options compaction options map 
 + * / 
 + public void setLocalCompactionStrategy ( Map < String , String > options ) ; 
 + public Map < String , String > getLocalCompactionStrategy ( ) ; 
 + / * * 
 * Sets the compaction strategy by class name 
 * @ param className the name of the compaction strategy class 
 * / 
 + @ Deprecated 
 public void setCompactionStrategyClass ( String className ) ; 
 
 / * * 
 * Gets the compaction strategy class name 
 * / 
 + @ Deprecated 
 public String getCompactionStrategyClass ( ) ; 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 index 73cda77 . . 77ca404 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 @ @ - 60 , 7 + 60 , 7 @ @ public abstract class AbstractCompactionStrategy 
 protected static final String UNCHECKED _ TOMBSTONE _ COMPACTION _ OPTION = " unchecked _ tombstone _ compaction " ; 
 protected static final String COMPACTION _ ENABLED = " enabled " ; 
 
 - protected Map < String , String > options ; 
 + public Map < String , String > options ; 
 
 protected final ColumnFamilyStore cfs ; 
 protected float tombstoneThreshold ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / WrappingCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / WrappingCompactionStrategy . java 
 index 0fed733 . . ae67599 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / WrappingCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / WrappingCompactionStrategy . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . util . Arrays ; 
 import java . util . Collection ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 + import java . util . Map ; 
 import java . util . Set ; 
 import java . util . concurrent . Callable ; 
 
 @ @ - 47 , 6 + 48 , 16 @ @ public final class WrappingCompactionStrategy extends AbstractCompactionStrategy 
 private static final Logger logger = LoggerFactory . getLogger ( WrappingCompactionStrategy . class ) ; 
 private volatile AbstractCompactionStrategy repaired ; 
 private volatile AbstractCompactionStrategy unrepaired ; 
 + / * 
 + We keep a copy of the schema compaction options and class here to be able to decide if we 
 + should update the compaction strategy in maybeReloadCompactionStrategy ( ) due to an ALTER . 
 + 
 + If a user changes the local compaction strategy and then later ALTERs a compaction option , 
 + we will use the new compaction options . 
 + * / 
 + private Map < String , String > schemaCompactionOptions ; 
 + private Class < ? > schemaCompactionStrategyClass ; 
 + 
 public WrappingCompactionStrategy ( ColumnFamilyStore cfs ) 
 { 
 super ( cfs , cfs . metadata . compactionStrategyOptions ) ; 
 @ @ - 146 , 10 + 157 , 9 @ @ public final class WrappingCompactionStrategy extends AbstractCompactionStrategy 
 
 public synchronized void maybeReloadCompactionStrategy ( CFMetaData metadata ) 
 { 
 - if ( repaired ! = null & & repaired . getClass ( ) . equals ( metadata . compactionStrategyClass ) 
 - & & unrepaired ! = null & & unrepaired . getClass ( ) . equals ( metadata . compactionStrategyClass ) 
 - & & repaired . options . equals ( metadata . compactionStrategyOptions ) 
 - & & unrepaired . options . equals ( metadata . compactionStrategyOptions ) ) 
 + / / compare the old schema configuration to the new one , ignore any locally set changes . 
 + if ( metadata . compactionStrategyClass . equals ( schemaCompactionStrategyClass ) & & 
 + metadata . compactionStrategyOptions . equals ( schemaCompactionOptions ) ) 
 return ; 
 reloadCompactionStrategy ( metadata ) ; 
 } 
 @ @ - 157 , 13 + 167 , 10 @ @ public final class WrappingCompactionStrategy extends AbstractCompactionStrategy 
 public synchronized void reloadCompactionStrategy ( CFMetaData metadata ) 
 { 
 boolean disabledWithJMX = ! enabled & & shouldBeEnabled ( ) ; 
 - if ( repaired ! = null ) 
 - repaired . shutdown ( ) ; 
 - if ( unrepaired ! = null ) 
 - unrepaired . shutdown ( ) ; 
 - repaired = metadata . createCompactionStrategyInstance ( cfs ) ; 
 - unrepaired = metadata . createCompactionStrategyInstance ( cfs ) ; 
 - options = ImmutableMap . copyOf ( metadata . compactionStrategyOptions ) ; 
 + setStrategy ( metadata . compactionStrategyClass , metadata . compactionStrategyOptions ) ; 
 + schemaCompactionOptions = ImmutableMap . copyOf ( metadata . compactionStrategyOptions ) ; 
 + schemaCompactionStrategyClass = repaired . getClass ( ) ; 
 + 
 if ( disabledWithJMX | | ! shouldBeEnabled ( ) ) 
 disable ( ) ; 
 else 
 @ @ - 393 , 4 + 400 , 26 @ @ public final class WrappingCompactionStrategy extends AbstractCompactionStrategy 
 { 
 return Arrays . asList ( repaired , unrepaired ) ; 
 } 
 + 
 + public synchronized void setNewLocalCompactionStrategy ( Class < ? extends AbstractCompactionStrategy > compactionStrategyClass , Map < String , String > options ) 
 + { 
 + logger . info ( " Switching local compaction strategy from { } to { } with options = { } " , repaired = = null ? " null " : repaired . getClass ( ) , compactionStrategyClass , options ) ; 
 + setStrategy ( compactionStrategyClass , options ) ; 
 + if ( shouldBeEnabled ( ) ) 
 + enable ( ) ; 
 + else 
 + disable ( ) ; 
 + startup ( ) ; 
 + } 
 + 
 + private void setStrategy ( Class < ? extends AbstractCompactionStrategy > compactionStrategyClass , Map < String , String > options ) 
 + { 
 + if ( repaired ! = null ) 
 + repaired . shutdown ( ) ; 
 + if ( unrepaired ! = null ) 
 + unrepaired . shutdown ( ) ; 
 + repaired = CFMetaData . createCompactionStrategyInstance ( compactionStrategyClass , cfs , options ) ; 
 + unrepaired = CFMetaData . createCompactionStrategyInstance ( compactionStrategyClass , cfs , options ) ; 
 + this . options = ImmutableMap . copyOf ( options ) ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java 
 index 58fc062 . . 2798689 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsCQLTest . java 
 @ @ - 17 , 12 + 17 , 16 @ @ 
 * / 
 package org . apache . cassandra . db . compaction ; 
 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 + 
 import org . junit . Test ; 
 
 import org . apache . cassandra . cql3 . CQLTester ; 
 import org . apache . cassandra . cql3 . UntypedResultSet ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . Keyspace ; 
 + import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertTrue ; 
 
 @ @ - 141 , 12 + 145 , 88 @ @ public class CompactionsCQLTest extends CQLTester 
 assertTrue ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; 
 } 
 
 + @ Test 
 + public void testSetLocalCompactionStrategy ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) " ) ; 
 + Map < String , String > localOptions = new HashMap < > ( ) ; 
 + localOptions . put ( " class " , " DateTieredCompactionStrategy " ) ; 
 + getCurrentColumnFamilyStore ( ) . setLocalCompactionStrategy ( localOptions ) ; 
 + WrappingCompactionStrategy wrappingCompactionStrategy = ( WrappingCompactionStrategy ) getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) ; 
 + assertTrue ( verifyStrategies ( wrappingCompactionStrategy , DateTieredCompactionStrategy . class ) ) ; 
 + / / altering something non - compaction related 
 + execute ( " ALTER TABLE % s WITH gc _ grace _ seconds = 1000 " ) ; 
 + / / should keep the local compaction strat 
 + assertTrue ( verifyStrategies ( wrappingCompactionStrategy , DateTieredCompactionStrategy . class ) ) ; 
 + / / altering a compaction option 
 + execute ( " ALTER TABLE % s WITH compaction = { ' class ' : ' SizeTieredCompactionStrategy ' , ' min _ threshold ' : 3 } " ) ; 
 + / / will use the new option 
 + assertTrue ( verifyStrategies ( wrappingCompactionStrategy , SizeTieredCompactionStrategy . class ) ) ; 
 + } 
 + 
 + 
 + @ Test 
 + public void testSetLocalCompactionStrategyDisable ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) " ) ; 
 + Map < String , String > localOptions = new HashMap < > ( ) ; 
 + localOptions . put ( " class " , " DateTieredCompactionStrategy " ) ; 
 + localOptions . put ( " enabled " , " false " ) ; 
 + getCurrentColumnFamilyStore ( ) . setLocalCompactionStrategy ( localOptions ) ; 
 + assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; 
 + localOptions . clear ( ) ; 
 + localOptions . put ( " class " , " DateTieredCompactionStrategy " ) ; 
 + / / localOptions . put ( " enabled " , " true " ) ; - this is default ! 
 + getCurrentColumnFamilyStore ( ) . setLocalCompactionStrategy ( localOptions ) ; 
 + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; 
 + } 
 + 
 + 
 + @ Test 
 + public void testSetLocalCompactionStrategyEnable ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) " ) ; 
 + Map < String , String > localOptions = new HashMap < > ( ) ; 
 + localOptions . put ( " class " , " DateTieredCompactionStrategy " ) ; 
 + 
 + getCurrentColumnFamilyStore ( ) . disableAutoCompaction ( ) ; 
 + assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; 
 + 
 + getCurrentColumnFamilyStore ( ) . setLocalCompactionStrategy ( localOptions ) ; 
 + assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategy ( ) . isEnabled ( ) ) ; 
 + 
 + } 
 + 
 + 
 + 
 + @ Test ( expected = IllegalArgumentException . class ) 
 + public void testBadLocalCompactionStrategyOptions ( ) 
 + { 
 + createTable ( " CREATE TABLE % s ( id text PRIMARY KEY ) " ) ; 
 + Map < String , String > localOptions = new HashMap < > ( ) ; 
 + localOptions . put ( " class " , " SizeTieredCompactionStrategy " ) ; 
 + localOptions . put ( " sstable _ size _ in _ mb " , " 1234 " ) ; / / not for STCS 
 + getCurrentColumnFamilyStore ( ) . setLocalCompactionStrategy ( localOptions ) ; 
 + } 
 + 
 + public boolean verifyStrategies ( WrappingCompactionStrategy wrappingStrategy , Class < ? extends AbstractCompactionStrategy > expected ) 
 + { 
 + boolean found = false ; 
 + for ( AbstractCompactionStrategy actualStrategy : wrappingStrategy . getWrappedStrategies ( ) ) 
 + { 
 + if ( ! actualStrategy . getClass ( ) . equals ( expected ) ) 
 + return false ; 
 + found = true ; 
 + } 
 + return found ; 
 + } 
 + 
 private ColumnFamilyStore getCurrentColumnFamilyStore ( ) 
 { 
 return Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( currentTable ( ) ) ; 
 } 
 
 - public boolean minorWasTriggered ( String keyspace , String cf ) throws Throwable 
 + private boolean minorWasTriggered ( String keyspace , String cf ) throws Throwable 
 { 
 UntypedResultSet res = execute ( " SELECT * FROM system . compaction _ history " ) ; 
 boolean minorWasTriggered = false ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / utils / SemanticVersion . java b / src / java / org / apache / cassandra / utils / SemanticVersion . java 
 index 00305cb . . fd122ad 100644 
 - - - a / src / java / org / apache / cassandra / utils / SemanticVersion . java 
 + + + b / src / java / org / apache / cassandra / utils / SemanticVersion . java 
 @ @ - 143 , 7 + 143 , 7 @ @ public class SemanticVersion implements Comparable < SemanticVersion > 
 
 public boolean isSupportedBy ( SemanticVersion version ) 
 { 
 - return major = = version . major & & minor < = version . minor ; 
 + return major = = version . major & & minor < = version . minor & & patch < = version . patch ; 
 } 
 
 private static int compareIdentifiers ( String [ ] ids1 , String [ ] ids2 , int defaultPred ) 
 diff - - git a / test / unit / org / apache / cassandra / utils / SemanticVersionTest . java b / test / unit / org / apache / cassandra / utils / SemanticVersionTest . java 
 index 6d03d3f . . 010964f 100644 
 - - - a / test / unit / org / apache / cassandra / utils / SemanticVersionTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / SemanticVersionTest . java 
 @ @ - 71 , 7 + 71 , 7 @ @ public class SemanticVersionTest 
 v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; 
 v2 = new SemanticVersion ( " 1 . 2 . 4 " ) ; 
 assert v1 . isSupportedBy ( v2 ) ; 
 - assert v2 . isSupportedBy ( v1 ) ; 
 + assert ! v2 . isSupportedBy ( v1 ) ; 
 
 v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; 
 v2 = new SemanticVersion ( " 1 . 3 . 3 " ) ;
