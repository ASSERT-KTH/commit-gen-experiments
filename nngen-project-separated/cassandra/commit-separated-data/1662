BLEU SCORE: 0.06567274736060397

TEST MSG: fix merge issue with ColumnInfo name change
GENERATED MSG: fix bad validator lookup

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java b / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java <nl> index 91cdd02 . . 0b833b7 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java <nl> @ @ - 499 , 8 + 499 , 8 @ @ public class CqlNativeStorage extends LoadFunc implements StoreFuncInterface , Lo <nl> for ( ColumnInfo cdef : cfInfo . getColumns ( ) ) <nl> { <nl> ResourceFieldSchema valSchema = new ResourceFieldSchema ( ) ; <nl> - AbstractType validator = validators . get ( cdef . getName ( ) ) ; <nl> - valSchema . setName ( new String ( cdef . getName ( ) ) ) ; <nl> + AbstractType < ? > validator = validators . get ( ByteBufferUtil . bytes ( cdef . getName ( ) ) ) ; <nl> + valSchema . setName ( cdef . getName ( ) ) ; <nl> valSchema . setType ( StorageHelper . getPigType ( validator ) ) ; <nl> allSchemaFields . add ( valSchema ) ; <nl> } <nl> @ @ - 901 , 7 + 901 , 7 @ @ public class CqlNativeStorage extends LoadFunc implements StoreFuncInterface , Lo <nl> String [ ] partitionKeys = new String [ tableMetadata . getPartitionKey ( ) . size ( ) ] ; <nl> for ( int i = 0 ; i < tableMetadata . getPartitionKey ( ) . size ( ) ; i + + ) <nl> { <nl> - partitionKeys [ i ] = new String ( tableMetadata . getPartitionKey ( ) . get ( i ) . getName ( ) ) ; <nl> + partitionKeys [ i ] = tableMetadata . getPartitionKey ( ) . get ( i ) . getName ( ) ; <nl> } <nl> return partitionKeys ; <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index cbe8498 . . 2c7db76 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 0 . 8 <nl> + * Compute more accurate compaction score per level ( CASSANDRA - 3790 ) <nl> * Return InvalidRequest when using a keyspace that doesn ' t exist <nl> ( CASSANDRA - 3764 ) <nl> * disallow user modification of System keyspace ( CASSANDRA - 3738 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> index 40a0a17 . . 189de8e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> @ @ - 241 , 7 + 241 , 7 @ @ public class LeveledManifest <nl> List < SSTableReader > sstables = generations [ i ] ; <nl> if ( sstables . isEmpty ( ) ) <nl> continue ; / / mostly this just avoids polluting the debug log with zero scores <nl> - double score = SSTableReader . getTotalBytes ( sstables ) / maxBytesForLevel ( i ) ; <nl> + double score = ( double ) SSTableReader . getTotalBytes ( sstables ) / ( double ) maxBytesForLevel ( i ) ; <nl> logger . debug ( " Compaction score for level { } is { } " , i , score ) ; <nl> <nl> / / L0 gets a special case that if we don ' t have anything more important to do ,

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java b / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java 
 index 91cdd02 . . 0b833b7 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java 
 + + + b / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java 
 @ @ - 499 , 8 + 499 , 8 @ @ public class CqlNativeStorage extends LoadFunc implements StoreFuncInterface , Lo 
 for ( ColumnInfo cdef : cfInfo . getColumns ( ) ) 
 { 
 ResourceFieldSchema valSchema = new ResourceFieldSchema ( ) ; 
 - AbstractType validator = validators . get ( cdef . getName ( ) ) ; 
 - valSchema . setName ( new String ( cdef . getName ( ) ) ) ; 
 + AbstractType < ? > validator = validators . get ( ByteBufferUtil . bytes ( cdef . getName ( ) ) ) ; 
 + valSchema . setName ( cdef . getName ( ) ) ; 
 valSchema . setType ( StorageHelper . getPigType ( validator ) ) ; 
 allSchemaFields . add ( valSchema ) ; 
 } 
 @ @ - 901 , 7 + 901 , 7 @ @ public class CqlNativeStorage extends LoadFunc implements StoreFuncInterface , Lo 
 String [ ] partitionKeys = new String [ tableMetadata . getPartitionKey ( ) . size ( ) ] ; 
 for ( int i = 0 ; i < tableMetadata . getPartitionKey ( ) . size ( ) ; i + + ) 
 { 
 - partitionKeys [ i ] = new String ( tableMetadata . getPartitionKey ( ) . get ( i ) . getName ( ) ) ; 
 + partitionKeys [ i ] = tableMetadata . getPartitionKey ( ) . get ( i ) . getName ( ) ; 
 } 
 return partitionKeys ; 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index cbe8498 . . 2c7db76 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 0 . 8 
 + * Compute more accurate compaction score per level ( CASSANDRA - 3790 ) 
 * Return InvalidRequest when using a keyspace that doesn ' t exist 
 ( CASSANDRA - 3764 ) 
 * disallow user modification of System keyspace ( CASSANDRA - 3738 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 index 40a0a17 . . 189de8e 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 @ @ - 241 , 7 + 241 , 7 @ @ public class LeveledManifest 
 List < SSTableReader > sstables = generations [ i ] ; 
 if ( sstables . isEmpty ( ) ) 
 continue ; / / mostly this just avoids polluting the debug log with zero scores 
 - double score = SSTableReader . getTotalBytes ( sstables ) / maxBytesForLevel ( i ) ; 
 + double score = ( double ) SSTableReader . getTotalBytes ( sstables ) / ( double ) maxBytesForLevel ( i ) ; 
 logger . debug ( " Compaction score for level { } is { } " , i , score ) ; 
 
 / / L0 gets a special case that if we don ' t have anything more important to do ,
