BLEU SCORE: 0.03314288201886802

TEST MSG: Fix UPDATE queries with empty IN restrictions
GENERATED MSG: Fix AssertionError while flushing memtable due to materialized views incorrectly inserting empty rows

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1a90b1f . . 4387019 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 11 <nl> + * Fix UPDATE queries with empty IN restrictions ( CASSANDRA - 13152 ) <nl> * Abort or retry on failed hints delivery ( CASSANDRA - 13124 ) <nl> * Fix handling of partition with partition - level deletion plus <nl> live rows in sstabledump ( CASSANDRA - 13177 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> index acfa16b . . 1722f02 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> @ @ - 657 , 6 + 657 , 10 @ @ public abstract class ModificationStatement implements CQLStatement <nl> { <nl> NavigableSet < Clustering > clusterings = createClustering ( options ) ; <nl> <nl> + / / If some of the restrictions were unspecified ( e . g . empty IN restrictions ) we do not need to do anything . <nl> + if ( restrictions . hasClusteringColumnsRestriction ( ) & & clusterings . isEmpty ( ) ) <nl> + return ; <nl> + <nl> UpdateParameters params = makeUpdateParameters ( keys , clusterings , options , local , now ) ; <nl> <nl> for ( ByteBuffer key : keys ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java <nl> index 18a6ca3 . . 09098ac 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java <nl> @ @ - 28 , 11 + 28 , 14 @ @ import org . apache . commons . lang3 . StringUtils ; <nl> import org . junit . Test ; <nl> <nl> import org . apache . cassandra . cql3 . CQLTester ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . Keyspace ; <nl> <nl> import static org . apache . cassandra . utils . ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; <nl> import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; <nl> import static org . apache . commons . lang3 . StringUtils . isEmpty ; <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> <nl> public class DeleteTest extends CQLTester <nl> { <nl> @ @ - 1247 , 4 + 1250 , 55 @ @ public class DeleteTest extends CQLTester <nl> row ( 1 , 1 , 1 , 3 , 3 ) , <nl> row ( 1 , 1 , 1 , 4 , 4 ) ) ; <nl> } <nl> + <nl> + / * * <nl> + * Test for CASSANDRA - 13152 <nl> + * / <nl> + @ Test <nl> + public void testThatDeletesWithEmptyInRestrictionDoNotCreateMutations ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; <nl> + <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b = 1 ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a = 1 AND b IN ( ) ; " ) ; <nl> + <nl> + assertTrue ( " The memtable should be empty but is not " , isMemtableEmpty ( ) ) ; <nl> + <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , s int static , PRIMARY KEY ( ( a , b ) , c ) ) " ) ; <nl> + <nl> + execute ( " DELETE FROM % s WHERE a = 1 AND b = 1 AND c IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a = 1 AND b IN ( ) AND c IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b = 1 AND c IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c = 1 ; " ) ; <nl> + <nl> + assertTrue ( " The memtable should be empty but is not " , isMemtableEmpty ( ) ) ; <nl> + <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , e int , PRIMARY KEY ( ( a , b ) , c , d ) ) " ) ; <nl> + <nl> + execute ( " DELETE FROM % s WHERE a = 1 AND b = 1 AND c IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a = 1 AND b = 1 AND c = 1 AND d IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a = 1 AND b = 1 AND c IN ( ) AND d IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a = 1 AND b IN ( ) AND c IN ( ) AND d IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c IN ( ) AND d IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c IN ( ) AND d = 1 ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c = 1 AND d = 1 ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c = 1 AND d IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b = 1 " ) ; <nl> + <nl> + assertTrue ( " The memtable should be empty but is not " , isMemtableEmpty ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if the memtable is empty or not <nl> + * @ return { @ code true } if the memtable is empty , { @ code false } otherwise . <nl> + * / <nl> + private boolean isMemtableEmpty ( ) <nl> + { <nl> + Keyspace keyspace = Keyspace . open ( KEYSPACE ) ; <nl> + ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( currentTable ( ) ) ; <nl> + return cfs . metric . allMemtablesLiveDataSize . getValue ( ) = = 0 ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java <nl> index 0d81fa3 . . a49f828 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java <nl> @ @ - 20 , 11 + 20 , 15 @ @ package org . apache . cassandra . cql3 . validation . operations ; <nl> <nl> import java . util . Arrays ; <nl> <nl> + import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> import static org . apache . commons . lang3 . StringUtils . isEmpty ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> import org . apache . cassandra . cql3 . CQLTester ; <nl> - import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . Keyspace ; <nl> <nl> public class UpdateTest extends CQLTester <nl> { <nl> @ @ - 557 , 4 + 561 , 51 @ @ public class UpdateTest extends CQLTester <nl> row ( 1 , 1 , 1 , 3 , 3 ) , <nl> row ( 1 , 1 , 1 , 4 , 4 ) ) ; <nl> } <nl> + <nl> + / * * <nl> + * Test for CASSANDRA - 13152 <nl> + * / <nl> + @ Test <nl> + public void testThatUpdatesWithEmptyInRestrictionDoNotCreateMutations ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; <nl> + <nl> + execute ( " UPDATE % s SET c = 100 WHERE a IN ( ) AND b = 1 ; " ) ; <nl> + execute ( " UPDATE % s SET c = 100 WHERE a = 1 AND b IN ( ) ; " ) ; <nl> + <nl> + assertTrue ( " The memtable should be empty but is not " , isMemtableEmpty ( ) ) ; <nl> + <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , s int static , PRIMARY KEY ( ( a , b ) , c ) ) " ) ; <nl> + <nl> + execute ( " UPDATE % s SET d = 100 WHERE a = 1 AND b = 1 AND c IN ( ) ; " ) ; <nl> + execute ( " UPDATE % s SET d = 100 WHERE a = 1 AND b IN ( ) AND c IN ( ) ; " ) ; <nl> + execute ( " UPDATE % s SET d = 100 WHERE a IN ( ) AND b IN ( ) AND c IN ( ) ; " ) ; <nl> + execute ( " UPDATE % s SET d = 100 WHERE a IN ( ) AND b IN ( ) AND c = 1 ; " ) ; <nl> + execute ( " UPDATE % s SET d = 100 WHERE a IN ( ) AND b = 1 AND c IN ( ) ; " ) ; <nl> + <nl> + assertTrue ( " The memtable should be empty but is not " , isMemtableEmpty ( ) ) ; <nl> + <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , e int , PRIMARY KEY ( ( a , b ) , c , d ) ) " ) ; <nl> + <nl> + execute ( " UPDATE % s SET e = 100 WHERE a = 1 AND b = 1 AND c = 1 AND d IN ( ) ; " ) ; <nl> + execute ( " UPDATE % s SET e = 100 WHERE a = 1 AND b = 1 AND c IN ( ) AND d IN ( ) ; " ) ; <nl> + execute ( " UPDATE % s SET e = 100 WHERE a = 1 AND b IN ( ) AND c IN ( ) AND d IN ( ) ; " ) ; <nl> + execute ( " UPDATE % s SET e = 100 WHERE a IN ( ) AND b IN ( ) AND c IN ( ) AND d IN ( ) ; " ) ; <nl> + execute ( " UPDATE % s SET e = 100 WHERE a IN ( ) AND b IN ( ) AND c IN ( ) AND d = 1 ; " ) ; <nl> + execute ( " UPDATE % s SET e = 100 WHERE a IN ( ) AND b IN ( ) AND c = 1 AND d = 1 ; " ) ; <nl> + execute ( " UPDATE % s SET e = 100 WHERE a IN ( ) AND b IN ( ) AND c = 1 AND d IN ( ) ; " ) ; <nl> + <nl> + assertTrue ( " The memtable should be empty but is not " , isMemtableEmpty ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if the memtable is empty or not <nl> + * @ return { @ code true } if the memtable is empty , { @ code false } otherwise . <nl> + * / <nl> + private boolean isMemtableEmpty ( ) <nl> + { <nl> + Keyspace keyspace = Keyspace . open ( KEYSPACE ) ; <nl> + ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( currentTable ( ) ) ; <nl> + return cfs . metric . allMemtablesLiveDataSize . getValue ( ) = = 0 ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1a90b1f . . 4387019 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 11 
 + * Fix UPDATE queries with empty IN restrictions ( CASSANDRA - 13152 ) 
 * Abort or retry on failed hints delivery ( CASSANDRA - 13124 ) 
 * Fix handling of partition with partition - level deletion plus 
 live rows in sstabledump ( CASSANDRA - 13177 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 index acfa16b . . 1722f02 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 @ @ - 657 , 6 + 657 , 10 @ @ public abstract class ModificationStatement implements CQLStatement 
 { 
 NavigableSet < Clustering > clusterings = createClustering ( options ) ; 
 
 + / / If some of the restrictions were unspecified ( e . g . empty IN restrictions ) we do not need to do anything . 
 + if ( restrictions . hasClusteringColumnsRestriction ( ) & & clusterings . isEmpty ( ) ) 
 + return ; 
 + 
 UpdateParameters params = makeUpdateParameters ( keys , clusterings , options , local , now ) ; 
 
 for ( ByteBuffer key : keys ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java 
 index 18a6ca3 . . 09098ac 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java 
 @ @ - 28 , 11 + 28 , 14 @ @ import org . apache . commons . lang3 . StringUtils ; 
 import org . junit . Test ; 
 
 import org . apache . cassandra . cql3 . CQLTester ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . Keyspace ; 
 
 import static org . apache . cassandra . utils . ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; 
 import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; 
 import static org . apache . commons . lang3 . StringUtils . isEmpty ; 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 
 public class DeleteTest extends CQLTester 
 { 
 @ @ - 1247 , 4 + 1250 , 55 @ @ public class DeleteTest extends CQLTester 
 row ( 1 , 1 , 1 , 3 , 3 ) , 
 row ( 1 , 1 , 1 , 4 , 4 ) ) ; 
 } 
 + 
 + / * * 
 + * Test for CASSANDRA - 13152 
 + * / 
 + @ Test 
 + public void testThatDeletesWithEmptyInRestrictionDoNotCreateMutations ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; 
 + 
 + execute ( " DELETE FROM % s WHERE a IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b = 1 ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a = 1 AND b IN ( ) ; " ) ; 
 + 
 + assertTrue ( " The memtable should be empty but is not " , isMemtableEmpty ( ) ) ; 
 + 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , s int static , PRIMARY KEY ( ( a , b ) , c ) ) " ) ; 
 + 
 + execute ( " DELETE FROM % s WHERE a = 1 AND b = 1 AND c IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a = 1 AND b IN ( ) AND c IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b = 1 AND c IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c = 1 ; " ) ; 
 + 
 + assertTrue ( " The memtable should be empty but is not " , isMemtableEmpty ( ) ) ; 
 + 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , e int , PRIMARY KEY ( ( a , b ) , c , d ) ) " ) ; 
 + 
 + execute ( " DELETE FROM % s WHERE a = 1 AND b = 1 AND c IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a = 1 AND b = 1 AND c = 1 AND d IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a = 1 AND b = 1 AND c IN ( ) AND d IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a = 1 AND b IN ( ) AND c IN ( ) AND d IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c IN ( ) AND d IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c IN ( ) AND d = 1 ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c = 1 AND d = 1 ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c = 1 AND d IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b = 1 " ) ; 
 + 
 + assertTrue ( " The memtable should be empty but is not " , isMemtableEmpty ( ) ) ; 
 + } 
 + 
 + / * * 
 + * Checks if the memtable is empty or not 
 + * @ return { @ code true } if the memtable is empty , { @ code false } otherwise . 
 + * / 
 + private boolean isMemtableEmpty ( ) 
 + { 
 + Keyspace keyspace = Keyspace . open ( KEYSPACE ) ; 
 + ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( currentTable ( ) ) ; 
 + return cfs . metric . allMemtablesLiveDataSize . getValue ( ) = = 0 ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java 
 index 0d81fa3 . . a49f828 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java 
 @ @ - 20 , 11 + 20 , 15 @ @ package org . apache . cassandra . cql3 . validation . operations ; 
 
 import java . util . Arrays ; 
 
 + import org . junit . Assert ; 
 import org . junit . Test ; 
 
 import static org . apache . commons . lang3 . StringUtils . isEmpty ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 import org . apache . cassandra . cql3 . CQLTester ; 
 - import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . Keyspace ; 
 
 public class UpdateTest extends CQLTester 
 { 
 @ @ - 557 , 4 + 561 , 51 @ @ public class UpdateTest extends CQLTester 
 row ( 1 , 1 , 1 , 3 , 3 ) , 
 row ( 1 , 1 , 1 , 4 , 4 ) ) ; 
 } 
 + 
 + / * * 
 + * Test for CASSANDRA - 13152 
 + * / 
 + @ Test 
 + public void testThatUpdatesWithEmptyInRestrictionDoNotCreateMutations ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; 
 + 
 + execute ( " UPDATE % s SET c = 100 WHERE a IN ( ) AND b = 1 ; " ) ; 
 + execute ( " UPDATE % s SET c = 100 WHERE a = 1 AND b IN ( ) ; " ) ; 
 + 
 + assertTrue ( " The memtable should be empty but is not " , isMemtableEmpty ( ) ) ; 
 + 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , s int static , PRIMARY KEY ( ( a , b ) , c ) ) " ) ; 
 + 
 + execute ( " UPDATE % s SET d = 100 WHERE a = 1 AND b = 1 AND c IN ( ) ; " ) ; 
 + execute ( " UPDATE % s SET d = 100 WHERE a = 1 AND b IN ( ) AND c IN ( ) ; " ) ; 
 + execute ( " UPDATE % s SET d = 100 WHERE a IN ( ) AND b IN ( ) AND c IN ( ) ; " ) ; 
 + execute ( " UPDATE % s SET d = 100 WHERE a IN ( ) AND b IN ( ) AND c = 1 ; " ) ; 
 + execute ( " UPDATE % s SET d = 100 WHERE a IN ( ) AND b = 1 AND c IN ( ) ; " ) ; 
 + 
 + assertTrue ( " The memtable should be empty but is not " , isMemtableEmpty ( ) ) ; 
 + 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , e int , PRIMARY KEY ( ( a , b ) , c , d ) ) " ) ; 
 + 
 + execute ( " UPDATE % s SET e = 100 WHERE a = 1 AND b = 1 AND c = 1 AND d IN ( ) ; " ) ; 
 + execute ( " UPDATE % s SET e = 100 WHERE a = 1 AND b = 1 AND c IN ( ) AND d IN ( ) ; " ) ; 
 + execute ( " UPDATE % s SET e = 100 WHERE a = 1 AND b IN ( ) AND c IN ( ) AND d IN ( ) ; " ) ; 
 + execute ( " UPDATE % s SET e = 100 WHERE a IN ( ) AND b IN ( ) AND c IN ( ) AND d IN ( ) ; " ) ; 
 + execute ( " UPDATE % s SET e = 100 WHERE a IN ( ) AND b IN ( ) AND c IN ( ) AND d = 1 ; " ) ; 
 + execute ( " UPDATE % s SET e = 100 WHERE a IN ( ) AND b IN ( ) AND c = 1 AND d = 1 ; " ) ; 
 + execute ( " UPDATE % s SET e = 100 WHERE a IN ( ) AND b IN ( ) AND c = 1 AND d IN ( ) ; " ) ; 
 + 
 + assertTrue ( " The memtable should be empty but is not " , isMemtableEmpty ( ) ) ; 
 + } 
 + 
 + / * * 
 + * Checks if the memtable is empty or not 
 + * @ return { @ code true } if the memtable is empty , { @ code false } otherwise . 
 + * / 
 + private boolean isMemtableEmpty ( ) 
 + { 
 + Keyspace keyspace = Keyspace . open ( KEYSPACE ) ; 
 + ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( currentTable ( ) ) ; 
 + return cfs . metric . allMemtablesLiveDataSize . getValue ( ) = = 0 ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
