BLEU SCORE: 0.05341087579952926

TEST MSG: Reject counters inside user types
GENERATED MSG: Fix preparing INSERT queries

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f4b3921 . . eaa3b43 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 0 - final <nl> + * Reject counters inside user types ( CASSANDRA - 7672 ) <nl> * Switch to notification - based GCInspector ( CASSANDRA - 7638 ) <nl> * ( cqlsh ) Handle nulls in UDTs and tuples correctly ( CASSANDRA - 7656 ) <nl> * Don ' t use strict consistency when replacing ( CASSANDRA - 7568 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTypeStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTypeStatement . java <nl> index 1ddc8e6 . . 5224474 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTypeStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTypeStatement . java <nl> @ @ - 68 , 8 + 68 , 13 @ @ public class CreateTypeStatement extends SchemaAlteringStatement <nl> KSMetaData ksm = Schema . instance . getKSMetaData ( name . getKeyspace ( ) ) ; <nl> if ( ksm = = null ) <nl> throw new InvalidRequestException ( String . format ( " Cannot add type in unknown keyspace % s " , name . getKeyspace ( ) ) ) ; <nl> + <nl> if ( ksm . userTypes . getType ( name . getUserTypeName ( ) ) ! = null & & ! ifNotExists ) <nl> - throw new InvalidRequestException ( String . format ( " A user type of name % s already exists . " , name ) ) ; <nl> + throw new InvalidRequestException ( String . format ( " A user type of name % s already exists " , name ) ) ; <nl> + <nl> + for ( CQL3Type . Raw type : columnTypes ) <nl> + if ( type . isCounter ( ) ) <nl> + throw new InvalidRequestException ( " A user type cannot contain counters " ) ; <nl> } <nl> <nl> public static void checkForDuplicateNames ( UserType type ) throws InvalidRequestException
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ad2a1a8 . . 14fe46e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 2 , 6 + 2 , 7 @ @ <nl> * rename rpc _ timeout settings to request _ timeout ( CASSANDRA - 5027 ) <nl> * add BF with 0 . 1 FP to LCS by default ( CASSANDRA - 5029 ) <nl> * Fix preparing insert queries ( CASSANDRA - 5016 ) <nl> + * Fix preparing queries with counter increment ( CASSANDRA - 5022 ) <nl> <nl> <nl> 1 . 2 - beta3 <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / operations / PreparedOperation . java b / src / java / org / apache / cassandra / cql3 / operations / PreparedOperation . java <nl> index a54b065 . . 540fdde 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / operations / PreparedOperation . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / operations / PreparedOperation . java <nl> @ @ - 136 , 6 + 136 , 10 @ @ public class PreparedOperation implements Operation <nl> return ( validator instanceof ListType ) & & kind = = Kind . MINUS _ PREPARED ; <nl> } <nl> <nl> + public boolean isPotentialCounterOperation ( ) { <nl> + return kind = = Kind . PLUS _ PREPARED | | kind = = Kind . MINUS _ PREPARED ; <nl> + } <nl> + <nl> public Type getType ( ) <nl> { <nl> return Type . PREPARED ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> index c690530 . . 48b74ac 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import org . apache . cassandra . cql3 . * ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . cql3 . operations . ColumnOperation ; <nl> import org . apache . cassandra . cql3 . operations . Operation ; <nl> + import org . apache . cassandra . cql3 . operations . PreparedOperation ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . cassandra . exceptions . * ; <nl> @ @ - 205 , 8 + 206 , 6 @ @ public class UpdateStatement extends ModificationStatement <nl> throws InvalidRequestException <nl> { <nl> validateKey ( key ) ; <nl> - / / if true we need to wrap RowMutation into CounterMutation <nl> - boolean hasCounterColumn = false ; <nl> <nl> QueryProcessor . validateKey ( key ) ; <nl> RowMutation rm = new RowMutation ( cfDef . cfm . ksName , key ) ; <nl> @ @ - 246 , 7 + 245 , 7 @ @ public class UpdateStatement extends ModificationStatement <nl> assert operations . size ( ) = = 1 ; <nl> operation = operations . get ( 0 ) ; <nl> } <nl> - hasCounterColumn = addToMutation ( cf , builder , cfDef . value , operation , params , null ) ; <nl> + operation . execute ( cf , builder . copy ( ) , cfDef . value = = null ? null : cfDef . value . type , params , null ) ; <nl> } <nl> else <nl> { <nl> @ @ - 254 , 70 + 253 , 26 @ @ public class UpdateStatement extends ModificationStatement <nl> { <nl> CFDefinition . Name name = entry . getKey ( ) ; <nl> Operation op = entry . getValue ( ) ; <nl> - hasCounterColumn | = addToMutation ( cf , builder . copy ( ) . add ( name . name . key ) , name , op , params , group = = null | | ! op . requiresRead ( name . type ) ? null : group . getCollection ( name . name . key ) ) ; <nl> + op . execute ( cf , builder . copy ( ) . add ( name . name . key ) , name . type , params , group = = null | | ! op . requiresRead ( name . type ) ? null : group . getCollection ( name . name . key ) ) ; <nl> } <nl> } <nl> <nl> - return ( hasCounterColumn ) ? new CounterMutation ( rm , cl ) : rm ; <nl> - } <nl> - <nl> - private boolean addToMutation ( ColumnFamily cf , <nl> - ColumnNameBuilder builder , <nl> - CFDefinition . Name valueDef , <nl> - Operation valueOperation , <nl> - UpdateParameters params , <nl> - List < Pair < ByteBuffer , IColumn > > list ) throws InvalidRequestException <nl> - { <nl> - Operation . Type type = valueOperation . getType ( ) ; <nl> - <nl> - switch ( type ) <nl> - { <nl> - case COUNTER : <nl> - if ( valueDef ! = null & & valueDef . type . isCollection ( ) ) <nl> - throw new InvalidRequestException ( " Cannot assign collection value to column with " + valueDef . type + " type . " ) ; <nl> - break ; <nl> - case LIST : <nl> - case SET : <nl> - case MAP : <nl> - if ( ! valueDef . type . isCollection ( ) ) <nl> - throw new InvalidRequestException ( " Can ' t apply collection operation on column with " + valueDef . type + " type . " ) ; <nl> - break ; <nl> - } <nl> - valueOperation . execute ( cf , builder . copy ( ) , valueDef = = null ? null : valueDef . type , params , list ) ; <nl> - return valueOperation . getType ( ) = = Operation . Type . COUNTER ; <nl> + return type = = Type . COUNTER ? new CounterMutation ( rm , cl ) : rm ; <nl> } <nl> <nl> public ParsedStatement . Prepared prepare ( CFDefinition . Name [ ] boundNames ) throws InvalidRequestException <nl> { <nl> - if ( columns ! = null ) <nl> - { <nl> - for ( Pair < ColumnIdentifier , Operation > column : columns ) <nl> - { <nl> - if ( column . right . getType ( ) = = Operation . Type . COUNTER ) <nl> - { <nl> - if ( type = = null ) <nl> - type = Type . COUNTER ; <nl> - else if ( type ! = Type . COUNTER ) <nl> - throw new InvalidRequestException ( " Mix of counter and non - counter operations is not allowed . " ) ; <nl> - } <nl> - else if ( type = = Type . COUNTER ) <nl> - { <nl> - throw new InvalidRequestException ( " Mix of counter and non - counter operations is not allowed . " ) ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - if ( type = = null ) <nl> - type = Type . LOGGED ; <nl> - <nl> / / Deal here with the keyspace overwrite thingy to avoid mistake <nl> - CFMetaData metadata = validateColumnFamily ( keyspace ( ) , columnFamily ( ) , type = = Type . COUNTER ) ; <nl> + CFMetaData metadata = validateColumnFamily ( keyspace ( ) , columnFamily ( ) ) ; <nl> cfDef = metadata . getCfDef ( ) ; <nl> <nl> + type = metadata . getDefaultValidator ( ) . isCommutative ( ) ? Type . COUNTER : Type . LOGGED ; <nl> + <nl> if ( columns = = null ) <nl> { <nl> / / Created from an INSERT <nl> - / / Don ' t hate , validate . <nl> + if ( type = = Type . COUNTER ) <nl> + throw new InvalidRequestException ( " INSERT statement are not allowed on counter tables , use UPDATE instead " ) ; <nl> if ( columnNames . size ( ) ! = columnOperations . size ( ) ) <nl> throw new InvalidRequestException ( " unmatched column names / values " ) ; <nl> if ( columnNames . size ( ) < 1 ) <nl> @ @ - 363 , 6 + 318 , 30 @ @ public class UpdateStatement extends ModificationStatement <nl> if ( name = = null ) <nl> throw new InvalidRequestException ( String . format ( " Unknown identifier % s " , entry . left ) ) ; <nl> <nl> + Operation operation = entry . right ; <nl> + <nl> + switch ( operation . getType ( ) ) <nl> + { <nl> + case COUNTER : <nl> + if ( type ! = Type . COUNTER ) <nl> + throw new InvalidRequestException ( " Invalid counter operation on non - counter table . " ) ; <nl> + break ; <nl> + case LIST : <nl> + case SET : <nl> + case MAP : <nl> + if ( ! name . type . isCollection ( ) ) <nl> + throw new InvalidRequestException ( " Cannot apply collection operation on column " + name + " with " + name . type + " type . " ) ; <nl> + / / Fallthrough on purpose <nl> + case COLUMN : <nl> + if ( type = = Type . COUNTER ) <nl> + throw new InvalidRequestException ( " Invalid non - counter operation on counter table . " ) ; <nl> + break ; <nl> + case PREPARED : <nl> + if ( type = = Type . COUNTER & & ! ( ( PreparedOperation ) operation ) . isPotentialCounterOperation ( ) ) <nl> + throw new InvalidRequestException ( " Invalid non - counter operation on counter table . " ) ; <nl> + break ; <nl> + } <nl> + <nl> switch ( name . kind ) <nl> { <nl> case KEY _ ALIAS : <nl> @ @ - 370 , 15 + 349 , 14 @ @ public class UpdateStatement extends ModificationStatement <nl> throw new InvalidRequestException ( String . format ( " PRIMARY KEY part % s found in SET part " , entry . left ) ) ; <nl> case VALUE _ ALIAS : <nl> case COLUMN _ METADATA : <nl> - for ( Operation op : processedColumns . get ( name ) ) <nl> - if ( op . getType ( ) = = Operation . Type . COLUMN ) <nl> + for ( Operation otherOp : processedColumns . get ( name ) ) <nl> + if ( otherOp . getType ( ) = = Operation . Type . COLUMN ) <nl> throw new InvalidRequestException ( String . format ( " Multiple definitions found for column % s " , name ) ) ; <nl> <nl> - Operation op = entry . right ; <nl> - for ( Term t : op . getValues ( ) ) <nl> + for ( Term t : operation . getValues ( ) ) <nl> if ( t . isBindMarker ( ) ) <nl> boundNames [ t . bindIndex ] = name ; <nl> - processedColumns . put ( name , op ) ; <nl> + processedColumns . put ( name , operation ) ; <nl> break ; <nl> } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f4b3921 . . eaa3b43 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 0 - final 
 + * Reject counters inside user types ( CASSANDRA - 7672 ) 
 * Switch to notification - based GCInspector ( CASSANDRA - 7638 ) 
 * ( cqlsh ) Handle nulls in UDTs and tuples correctly ( CASSANDRA - 7656 ) 
 * Don ' t use strict consistency when replacing ( CASSANDRA - 7568 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTypeStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTypeStatement . java 
 index 1ddc8e6 . . 5224474 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTypeStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTypeStatement . java 
 @ @ - 68 , 8 + 68 , 13 @ @ public class CreateTypeStatement extends SchemaAlteringStatement 
 KSMetaData ksm = Schema . instance . getKSMetaData ( name . getKeyspace ( ) ) ; 
 if ( ksm = = null ) 
 throw new InvalidRequestException ( String . format ( " Cannot add type in unknown keyspace % s " , name . getKeyspace ( ) ) ) ; 
 + 
 if ( ksm . userTypes . getType ( name . getUserTypeName ( ) ) ! = null & & ! ifNotExists ) 
 - throw new InvalidRequestException ( String . format ( " A user type of name % s already exists . " , name ) ) ; 
 + throw new InvalidRequestException ( String . format ( " A user type of name % s already exists " , name ) ) ; 
 + 
 + for ( CQL3Type . Raw type : columnTypes ) 
 + if ( type . isCounter ( ) ) 
 + throw new InvalidRequestException ( " A user type cannot contain counters " ) ; 
 } 
 
 public static void checkForDuplicateNames ( UserType type ) throws InvalidRequestException

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ad2a1a8 . . 14fe46e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 2 , 6 + 2 , 7 @ @ 
 * rename rpc _ timeout settings to request _ timeout ( CASSANDRA - 5027 ) 
 * add BF with 0 . 1 FP to LCS by default ( CASSANDRA - 5029 ) 
 * Fix preparing insert queries ( CASSANDRA - 5016 ) 
 + * Fix preparing queries with counter increment ( CASSANDRA - 5022 ) 
 
 
 1 . 2 - beta3 
 diff - - git a / src / java / org / apache / cassandra / cql3 / operations / PreparedOperation . java b / src / java / org / apache / cassandra / cql3 / operations / PreparedOperation . java 
 index a54b065 . . 540fdde 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / operations / PreparedOperation . java 
 + + + b / src / java / org / apache / cassandra / cql3 / operations / PreparedOperation . java 
 @ @ - 136 , 6 + 136 , 10 @ @ public class PreparedOperation implements Operation 
 return ( validator instanceof ListType ) & & kind = = Kind . MINUS _ PREPARED ; 
 } 
 
 + public boolean isPotentialCounterOperation ( ) { 
 + return kind = = Kind . PLUS _ PREPARED | | kind = = Kind . MINUS _ PREPARED ; 
 + } 
 + 
 public Type getType ( ) 
 { 
 return Type . PREPARED ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 index c690530 . . 48b74ac 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / UpdateStatement . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import org . apache . cassandra . cql3 . * ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . cql3 . operations . ColumnOperation ; 
 import org . apache . cassandra . cql3 . operations . Operation ; 
 + import org . apache . cassandra . cql3 . operations . PreparedOperation ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . marshal . * ; 
 import org . apache . cassandra . exceptions . * ; 
 @ @ - 205 , 8 + 206 , 6 @ @ public class UpdateStatement extends ModificationStatement 
 throws InvalidRequestException 
 { 
 validateKey ( key ) ; 
 - / / if true we need to wrap RowMutation into CounterMutation 
 - boolean hasCounterColumn = false ; 
 
 QueryProcessor . validateKey ( key ) ; 
 RowMutation rm = new RowMutation ( cfDef . cfm . ksName , key ) ; 
 @ @ - 246 , 7 + 245 , 7 @ @ public class UpdateStatement extends ModificationStatement 
 assert operations . size ( ) = = 1 ; 
 operation = operations . get ( 0 ) ; 
 } 
 - hasCounterColumn = addToMutation ( cf , builder , cfDef . value , operation , params , null ) ; 
 + operation . execute ( cf , builder . copy ( ) , cfDef . value = = null ? null : cfDef . value . type , params , null ) ; 
 } 
 else 
 { 
 @ @ - 254 , 70 + 253 , 26 @ @ public class UpdateStatement extends ModificationStatement 
 { 
 CFDefinition . Name name = entry . getKey ( ) ; 
 Operation op = entry . getValue ( ) ; 
 - hasCounterColumn | = addToMutation ( cf , builder . copy ( ) . add ( name . name . key ) , name , op , params , group = = null | | ! op . requiresRead ( name . type ) ? null : group . getCollection ( name . name . key ) ) ; 
 + op . execute ( cf , builder . copy ( ) . add ( name . name . key ) , name . type , params , group = = null | | ! op . requiresRead ( name . type ) ? null : group . getCollection ( name . name . key ) ) ; 
 } 
 } 
 
 - return ( hasCounterColumn ) ? new CounterMutation ( rm , cl ) : rm ; 
 - } 
 - 
 - private boolean addToMutation ( ColumnFamily cf , 
 - ColumnNameBuilder builder , 
 - CFDefinition . Name valueDef , 
 - Operation valueOperation , 
 - UpdateParameters params , 
 - List < Pair < ByteBuffer , IColumn > > list ) throws InvalidRequestException 
 - { 
 - Operation . Type type = valueOperation . getType ( ) ; 
 - 
 - switch ( type ) 
 - { 
 - case COUNTER : 
 - if ( valueDef ! = null & & valueDef . type . isCollection ( ) ) 
 - throw new InvalidRequestException ( " Cannot assign collection value to column with " + valueDef . type + " type . " ) ; 
 - break ; 
 - case LIST : 
 - case SET : 
 - case MAP : 
 - if ( ! valueDef . type . isCollection ( ) ) 
 - throw new InvalidRequestException ( " Can ' t apply collection operation on column with " + valueDef . type + " type . " ) ; 
 - break ; 
 - } 
 - valueOperation . execute ( cf , builder . copy ( ) , valueDef = = null ? null : valueDef . type , params , list ) ; 
 - return valueOperation . getType ( ) = = Operation . Type . COUNTER ; 
 + return type = = Type . COUNTER ? new CounterMutation ( rm , cl ) : rm ; 
 } 
 
 public ParsedStatement . Prepared prepare ( CFDefinition . Name [ ] boundNames ) throws InvalidRequestException 
 { 
 - if ( columns ! = null ) 
 - { 
 - for ( Pair < ColumnIdentifier , Operation > column : columns ) 
 - { 
 - if ( column . right . getType ( ) = = Operation . Type . COUNTER ) 
 - { 
 - if ( type = = null ) 
 - type = Type . COUNTER ; 
 - else if ( type ! = Type . COUNTER ) 
 - throw new InvalidRequestException ( " Mix of counter and non - counter operations is not allowed . " ) ; 
 - } 
 - else if ( type = = Type . COUNTER ) 
 - { 
 - throw new InvalidRequestException ( " Mix of counter and non - counter operations is not allowed . " ) ; 
 - } 
 - } 
 - } 
 - 
 - if ( type = = null ) 
 - type = Type . LOGGED ; 
 - 
 / / Deal here with the keyspace overwrite thingy to avoid mistake 
 - CFMetaData metadata = validateColumnFamily ( keyspace ( ) , columnFamily ( ) , type = = Type . COUNTER ) ; 
 + CFMetaData metadata = validateColumnFamily ( keyspace ( ) , columnFamily ( ) ) ; 
 cfDef = metadata . getCfDef ( ) ; 
 
 + type = metadata . getDefaultValidator ( ) . isCommutative ( ) ? Type . COUNTER : Type . LOGGED ; 
 + 
 if ( columns = = null ) 
 { 
 / / Created from an INSERT 
 - / / Don ' t hate , validate . 
 + if ( type = = Type . COUNTER ) 
 + throw new InvalidRequestException ( " INSERT statement are not allowed on counter tables , use UPDATE instead " ) ; 
 if ( columnNames . size ( ) ! = columnOperations . size ( ) ) 
 throw new InvalidRequestException ( " unmatched column names / values " ) ; 
 if ( columnNames . size ( ) < 1 ) 
 @ @ - 363 , 6 + 318 , 30 @ @ public class UpdateStatement extends ModificationStatement 
 if ( name = = null ) 
 throw new InvalidRequestException ( String . format ( " Unknown identifier % s " , entry . left ) ) ; 
 
 + Operation operation = entry . right ; 
 + 
 + switch ( operation . getType ( ) ) 
 + { 
 + case COUNTER : 
 + if ( type ! = Type . COUNTER ) 
 + throw new InvalidRequestException ( " Invalid counter operation on non - counter table . " ) ; 
 + break ; 
 + case LIST : 
 + case SET : 
 + case MAP : 
 + if ( ! name . type . isCollection ( ) ) 
 + throw new InvalidRequestException ( " Cannot apply collection operation on column " + name + " with " + name . type + " type . " ) ; 
 + / / Fallthrough on purpose 
 + case COLUMN : 
 + if ( type = = Type . COUNTER ) 
 + throw new InvalidRequestException ( " Invalid non - counter operation on counter table . " ) ; 
 + break ; 
 + case PREPARED : 
 + if ( type = = Type . COUNTER & & ! ( ( PreparedOperation ) operation ) . isPotentialCounterOperation ( ) ) 
 + throw new InvalidRequestException ( " Invalid non - counter operation on counter table . " ) ; 
 + break ; 
 + } 
 + 
 switch ( name . kind ) 
 { 
 case KEY _ ALIAS : 
 @ @ - 370 , 15 + 349 , 14 @ @ public class UpdateStatement extends ModificationStatement 
 throw new InvalidRequestException ( String . format ( " PRIMARY KEY part % s found in SET part " , entry . left ) ) ; 
 case VALUE _ ALIAS : 
 case COLUMN _ METADATA : 
 - for ( Operation op : processedColumns . get ( name ) ) 
 - if ( op . getType ( ) = = Operation . Type . COLUMN ) 
 + for ( Operation otherOp : processedColumns . get ( name ) ) 
 + if ( otherOp . getType ( ) = = Operation . Type . COLUMN ) 
 throw new InvalidRequestException ( String . format ( " Multiple definitions found for column % s " , name ) ) ; 
 
 - Operation op = entry . right ; 
 - for ( Term t : op . getValues ( ) ) 
 + for ( Term t : operation . getValues ( ) ) 
 if ( t . isBindMarker ( ) ) 
 boundNames [ t . bindIndex ] = name ; 
 - processedColumns . put ( name , op ) ; 
 + processedColumns . put ( name , operation ) ; 
 break ; 
 } 
 }
