BLEU SCORE: 0.018738883683389617

TEST MSG: Don ' t scrub 2i CF if index type is CUSTOM
GENERATED MSG: Reset SSTII in EchoedRow iterator ( see CASSANDRA - 2653 )

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 6d3e21a . . 892e881 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 40 , 11 + 40 , 8 @ @ import org . apache . cassandra . cache . IRowCacheEntry ; <nl> import org . apache . cassandra . cache . RowCacheKey ; <nl> import org . apache . cassandra . cache . RowCacheSentinel ; <nl> import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> + import org . apache . cassandra . config . * ; <nl> import org . apache . cassandra . config . CFMetaData . SpeculativeRetry ; <nl> - import org . apache . cassandra . config . ColumnDefinition ; <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . db . commitlog . ReplayPosition ; <nl> @ @ - 464 , 8 + 461 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> if ( def . isIndexed ( ) ) <nl> { <nl> - CFMetaData indexMetadata = CFMetaData . newIndexMetadata ( metadata , def , SecondaryIndex . getIndexComparator ( metadata , def ) ) ; <nl> - scrubDataDirectories ( indexMetadata ) ; <nl> + CellNameType indexComparator = SecondaryIndex . getIndexComparator ( metadata , def ) ; <nl> + if ( indexComparator ! = null ) <nl> + { <nl> + CFMetaData indexMetadata = CFMetaData . newIndexMetadata ( metadata , def , indexComparator ) ; <nl> + scrubDataDirectories ( indexMetadata ) ; <nl> + } <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1081122 . . cfdc0bd 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 43 , 6 + 43 , 7 @ @ <nl> * fix exception adding validators to non - string columns ( CASSANDRA - 2696 ) <nl> * avoid instantiating DatabaseDescriptor in JDBC ( CASSANDRA - 2694 ) <nl> * fix potential stack overflow during compaction ( CASSANDRA - 2626 ) <nl> + * reset underlying iterator in EchoedRow constructor ( CASSANDRA - 2653 ) <nl> <nl> <nl> 0 . 8 . 0 - rc1 <nl> diff - - git a / src / java / org / apache / cassandra / db / EchoedRow . java b / src / java / org / apache / cassandra / db / EchoedRow . java <nl> index f52e2bb . . b6abb4a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / EchoedRow . java <nl> + + + b / src / java / org / apache / cassandra / db / EchoedRow . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ public class EchoedRow extends AbstractCompactedRow <nl> { <nl> super ( row . getKey ( ) ) ; <nl> this . row = row ; <nl> + / / Reset SSTableIdentityIterator because we have not guarantee the filePointer hasn ' t moved since the Iterator was built <nl> + row . reset ( ) ; <nl> } <nl> <nl> public void write ( DataOutput out ) throws IOException <nl> diff - - git a / test / unit / org / apache / cassandra / db / CompactionsTest . java b / test / unit / org / apache / cassandra / db / CompactionsTest . java <nl> index 4e6a6b6 . . f2322f4 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CompactionsTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CompactionsTest . java <nl> @ @ - 153 , 4 + 153 , 34 @ @ public class CompactionsTest extends CleanupHelper <nl> buckets = CompactionManager . getBuckets ( pairs , 10 ) ; / / notice the min is 10 <nl> assertEquals ( 1 , buckets . size ( ) ) ; <nl> } <nl> + @ Test <nl> + public void testEchoedRow ( ) throws IOException , ExecutionException , InterruptedException <nl> + { <nl> + / / This test check that EchoedRow doesn ' t skipp rows : see CASSANDRA - 2653 <nl> + <nl> + Table table = Table . open ( TABLE1 ) ; <nl> + ColumnFamilyStore store = table . getColumnFamilyStore ( " Standard2 " ) ; <nl> + <nl> + / / disable compaction while flushing <nl> + store . disableAutoCompaction ( ) ; <nl> + <nl> + / / Insert 4 keys in two sstables . We need the sstables to have 2 rows <nl> + / / at least to trigger what was causing CASSANDRA - 2653 <nl> + for ( int i = 1 ; i < 5 ; i + + ) <nl> + { <nl> + DecoratedKey key = Util . dk ( String . valueOf ( i ) ) ; <nl> + RowMutation rm = new RowMutation ( TABLE1 , key . key ) ; <nl> + rm . add ( new QueryPath ( " Standard2 " , null , ByteBufferUtil . bytes ( String . valueOf ( i ) ) ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , i ) ; <nl> + rm . apply ( ) ; <nl> + <nl> + if ( i % 2 = = 0 ) <nl> + store . forceBlockingFlush ( ) ; <nl> + } <nl> + <nl> + / / Force compaction . Since each row is in only one sstable , we will be using EchoedRow . <nl> + CompactionManager . instance . performMajor ( store ) ; <nl> + <nl> + / / Now assert we do have the two keys <nl> + assertEquals ( 4 , Util . getRangeSlice ( store ) . size ( ) ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 6d3e21a . . 892e881 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 40 , 11 + 40 , 8 @ @ import org . apache . cassandra . cache . IRowCacheEntry ; 
 import org . apache . cassandra . cache . RowCacheKey ; 
 import org . apache . cassandra . cache . RowCacheSentinel ; 
 import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; 
 - import org . apache . cassandra . config . CFMetaData ; 
 + import org . apache . cassandra . config . * ; 
 import org . apache . cassandra . config . CFMetaData . SpeculativeRetry ; 
 - import org . apache . cassandra . config . ColumnDefinition ; 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . db . commitlog . ReplayPosition ; 
 @ @ - 464 , 8 + 461 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 if ( def . isIndexed ( ) ) 
 { 
 - CFMetaData indexMetadata = CFMetaData . newIndexMetadata ( metadata , def , SecondaryIndex . getIndexComparator ( metadata , def ) ) ; 
 - scrubDataDirectories ( indexMetadata ) ; 
 + CellNameType indexComparator = SecondaryIndex . getIndexComparator ( metadata , def ) ; 
 + if ( indexComparator ! = null ) 
 + { 
 + CFMetaData indexMetadata = CFMetaData . newIndexMetadata ( metadata , def , indexComparator ) ; 
 + scrubDataDirectories ( indexMetadata ) ; 
 + } 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1081122 . . cfdc0bd 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 43 , 6 + 43 , 7 @ @ 
 * fix exception adding validators to non - string columns ( CASSANDRA - 2696 ) 
 * avoid instantiating DatabaseDescriptor in JDBC ( CASSANDRA - 2694 ) 
 * fix potential stack overflow during compaction ( CASSANDRA - 2626 ) 
 + * reset underlying iterator in EchoedRow constructor ( CASSANDRA - 2653 ) 
 
 
 0 . 8 . 0 - rc1 
 diff - - git a / src / java / org / apache / cassandra / db / EchoedRow . java b / src / java / org / apache / cassandra / db / EchoedRow . java 
 index f52e2bb . . b6abb4a 100644 
 - - - a / src / java / org / apache / cassandra / db / EchoedRow . java 
 + + + b / src / java / org / apache / cassandra / db / EchoedRow . java 
 @ @ - 19 , 6 + 19 , 8 @ @ public class EchoedRow extends AbstractCompactedRow 
 { 
 super ( row . getKey ( ) ) ; 
 this . row = row ; 
 + / / Reset SSTableIdentityIterator because we have not guarantee the filePointer hasn ' t moved since the Iterator was built 
 + row . reset ( ) ; 
 } 
 
 public void write ( DataOutput out ) throws IOException 
 diff - - git a / test / unit / org / apache / cassandra / db / CompactionsTest . java b / test / unit / org / apache / cassandra / db / CompactionsTest . java 
 index 4e6a6b6 . . f2322f4 100644 
 - - - a / test / unit / org / apache / cassandra / db / CompactionsTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CompactionsTest . java 
 @ @ - 153 , 4 + 153 , 34 @ @ public class CompactionsTest extends CleanupHelper 
 buckets = CompactionManager . getBuckets ( pairs , 10 ) ; / / notice the min is 10 
 assertEquals ( 1 , buckets . size ( ) ) ; 
 } 
 + @ Test 
 + public void testEchoedRow ( ) throws IOException , ExecutionException , InterruptedException 
 + { 
 + / / This test check that EchoedRow doesn ' t skipp rows : see CASSANDRA - 2653 
 + 
 + Table table = Table . open ( TABLE1 ) ; 
 + ColumnFamilyStore store = table . getColumnFamilyStore ( " Standard2 " ) ; 
 + 
 + / / disable compaction while flushing 
 + store . disableAutoCompaction ( ) ; 
 + 
 + / / Insert 4 keys in two sstables . We need the sstables to have 2 rows 
 + / / at least to trigger what was causing CASSANDRA - 2653 
 + for ( int i = 1 ; i < 5 ; i + + ) 
 + { 
 + DecoratedKey key = Util . dk ( String . valueOf ( i ) ) ; 
 + RowMutation rm = new RowMutation ( TABLE1 , key . key ) ; 
 + rm . add ( new QueryPath ( " Standard2 " , null , ByteBufferUtil . bytes ( String . valueOf ( i ) ) ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , i ) ; 
 + rm . apply ( ) ; 
 + 
 + if ( i % 2 = = 0 ) 
 + store . forceBlockingFlush ( ) ; 
 + } 
 + 
 + / / Force compaction . Since each row is in only one sstable , we will be using EchoedRow . 
 + CompactionManager . instance . performMajor ( store ) ; 
 + 
 + / / Now assert we do have the two keys 
 + assertEquals ( 4 , Util . getRangeSlice ( store ) . size ( ) ) ; 
 + } 
 }
