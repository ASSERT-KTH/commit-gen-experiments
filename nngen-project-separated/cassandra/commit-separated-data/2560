BLEU SCORE: 0.03283637368030199

TEST MSG: Snapshot only related SSTables when sequential repair
GENERATED MSG: merge from 0 . 6

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 592eef9 . . 9f34023 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 45 , 6 + 45 , 7 @ @ <nl> * Add failure handler to async callback ( CASSANDRA - 6747 ) <nl> * Fix AE when closing SSTable without releasing reference ( CASSANDRA - 7000 ) <nl> * Clean up IndexInfo on keyspace / table drops ( CASSANDRA - 6924 ) <nl> + * Only snapshot relative SSTables when sequential repair ( CASSANDRA - 7024 ) <nl> Merged from 2 . 0 : <nl> * Put nodes in hibernate when join _ ring is false ( CASSANDRA - 6961 ) <nl> * Allow compaction of system tables during startup ( CASSANDRA - 6913 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index ffea243 . . 923ea5b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import javax . management . * ; <nl> <nl> import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . base . Function ; <nl> + import com . google . common . base . Predicate ; <nl> import com . google . common . collect . * ; <nl> import com . google . common . util . concurrent . * ; <nl> import com . google . common . util . concurrent . Futures ; <nl> @ @ - 2153 , 6 + 2154 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> public void snapshotWithoutFlush ( String snapshotName ) <nl> { <nl> + snapshotWithoutFlush ( snapshotName , null ) ; <nl> + } <nl> + <nl> + public void snapshotWithoutFlush ( String snapshotName , Predicate < SSTableReader > predicate ) <nl> + { <nl> for ( ColumnFamilyStore cfs : concatWithIndexes ( ) ) <nl> { <nl> DataTracker . View currentView = cfs . markCurrentViewReferenced ( ) ; <nl> @ @ - 2161 , 6 + 2167 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> for ( SSTableReader ssTable : currentView . sstables ) <nl> { <nl> + if ( predicate ! = null & & ! predicate . apply ( ssTable ) ) <nl> + { <nl> + continue ; <nl> + } <nl> + <nl> File snapshotDirectory = Directories . getSnapshotDirectory ( ssTable . descriptor , snapshotName ) ; <nl> ssTable . createLinks ( snapshotDirectory . getPath ( ) ) ; / / hard links <nl> if ( logger . isDebugEnabled ( ) ) <nl> @ @ - 2190 , 8 + 2201 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> * / <nl> public void snapshot ( String snapshotName ) <nl> { <nl> + snapshot ( snapshotName , null ) ; <nl> + } <nl> + <nl> + public void snapshot ( String snapshotName , Predicate < SSTableReader > predicate ) <nl> + { <nl> forceBlockingFlush ( ) ; <nl> - snapshotWithoutFlush ( snapshotName ) ; <nl> + snapshotWithoutFlush ( snapshotName , predicate ) ; <nl> } <nl> <nl> public boolean snapshotExists ( String snapshotName ) <nl> diff - - git a / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java b / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java <nl> index bb66b69 . . d710652 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java <nl> + + + b / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java <nl> @ @ - 18 , 30 + 18 , 32 @ @ <nl> package org . apache . cassandra . repair ; <nl> <nl> import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . UUID ; <nl> import java . util . concurrent . Future ; <nl> <nl> + import com . google . common . base . Predicate ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> + import org . apache . cassandra . dht . Bounds ; <nl> + import org . apache . cassandra . dht . Range ; <nl> + import org . apache . cassandra . dht . Token ; <nl> + import org . apache . cassandra . io . sstable . SSTableReader ; <nl> import org . apache . cassandra . net . IVerbHandler ; <nl> import org . apache . cassandra . net . MessageIn ; <nl> import org . apache . cassandra . net . MessageOut ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> - import org . apache . cassandra . repair . messages . AnticompactionRequest ; <nl> - import org . apache . cassandra . repair . messages . PrepareMessage ; <nl> - import org . apache . cassandra . repair . messages . RepairMessage ; <nl> - import org . apache . cassandra . repair . messages . SyncRequest ; <nl> - import org . apache . cassandra . repair . messages . ValidationRequest ; <nl> + import org . apache . cassandra . repair . messages . * ; <nl> import org . apache . cassandra . service . ActiveRepairService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - <nl> / * * <nl> * Handles all repair related message . <nl> * <nl> @ @ - 71 , 6 + 73 , 21 @ @ public class RepairMessageVerbHandler implements IVerbHandler < RepairMessage > <nl> MessagingService . instance ( ) . sendReply ( new MessageOut ( MessagingService . Verb . INTERNAL _ RESPONSE ) , id , message . from ) ; <nl> break ; <nl> <nl> + case SNAPSHOT : <nl> + ColumnFamilyStore cfs = Keyspace . open ( desc . keyspace ) . getColumnFamilyStore ( desc . columnFamily ) ; <nl> + final Range < Token > repairingRange = desc . range ; <nl> + cfs . snapshot ( desc . sessionId . toString ( ) , new Predicate < SSTableReader > ( ) <nl> + { <nl> + public boolean apply ( SSTableReader sstable ) <nl> + { <nl> + return sstable ! = null & & new Bounds < > ( sstable . first . token , sstable . last . token ) . intersects ( Collections . singleton ( repairingRange ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + logger . debug ( " Enqueuing response to snapshot request { } to { } " , desc . sessionId , message . from ) ; <nl> + MessagingService . instance ( ) . sendReply ( new MessageOut ( MessagingService . Verb . INTERNAL _ RESPONSE ) , id , message . from ) ; <nl> + break ; <nl> + <nl> case VALIDATION _ REQUEST : <nl> ValidationRequest validationRequest = ( ValidationRequest ) message . payload ; <nl> / / trigger read - only compaction <nl> diff - - git a / src / java / org / apache / cassandra / repair / SnapshotTask . java b / src / java / org / apache / cassandra / repair / SnapshotTask . java <nl> index cb5003a . . 6c3afb1 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / SnapshotTask . java <nl> + + + b / src / java / org / apache / cassandra / repair / SnapshotTask . java <nl> @ @ - 18 , 15 + 18 , 14 @ @ <nl> package org . apache . cassandra . repair ; <nl> <nl> import java . net . InetAddress ; <nl> - import java . util . List ; <nl> import java . util . concurrent . RunnableFuture ; <nl> <nl> import com . google . common . util . concurrent . AbstractFuture ; <nl> <nl> - import org . apache . cassandra . db . SnapshotCommand ; <nl> import org . apache . cassandra . net . IAsyncCallbackWithFailure ; <nl> import org . apache . cassandra . net . MessageIn ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> + import org . apache . cassandra . repair . messages . SnapshotMessage ; <nl> <nl> / * * <nl> * SnapshotTask is a task that sends snapshot request . <nl> @ @ - 44 , 10 + 43 , 7 @ @ public class SnapshotTask extends AbstractFuture < InetAddress > implements Runnabl <nl> <nl> public void run ( ) <nl> { <nl> - MessagingService . instance ( ) . sendRRWithFailure ( new SnapshotCommand ( desc . keyspace , <nl> - desc . columnFamily , <nl> - desc . sessionId . toString ( ) , <nl> - false ) . createMessage ( ) , <nl> + MessagingService . instance ( ) . sendRRWithFailure ( new SnapshotMessage ( desc ) . createMessage ( ) , <nl> endpoint , <nl> new SnapshotCallback ( this ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / repair / messages / RepairMessage . java b / src / java / org / apache / cassandra / repair / messages / RepairMessage . java <nl> index 054fb55 . . d500928 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / messages / RepairMessage . java <nl> + + + b / src / java / org / apache / cassandra / repair / messages / RepairMessage . java <nl> @ @ - 44 , 7 + 44 , 8 @ @ public abstract class RepairMessage <nl> SYNC _ REQUEST ( 2 , SyncRequest . serializer ) , <nl> SYNC _ COMPLETE ( 3 , SyncComplete . serializer ) , <nl> ANTICOMPACTION _ REQUEST ( 4 , AnticompactionRequest . serializer ) , <nl> - PREPARE _ MESSAGE ( 5 , PrepareMessage . serializer ) ; <nl> + PREPARE _ MESSAGE ( 5 , PrepareMessage . serializer ) , <nl> + SNAPSHOT ( 6 , SnapshotMessage . serializer ) ; <nl> <nl> private final byte type ; <nl> private final MessageSerializer < RepairMessage > serializer ; <nl> diff - - git a / src / java / org / apache / cassandra / repair / messages / SnapshotMessage . java b / src / java / org / apache / cassandra / repair / messages / SnapshotMessage . java <nl> new file mode 100644 <nl> index 0000000 . . caccc82 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / repair / messages / SnapshotMessage . java <nl> @ @ - 0 , 0 + 1 , 53 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . repair . messages ; <nl> + <nl> + import java . io . DataInput ; <nl> + import java . io . IOException ; <nl> + <nl> + import org . apache . cassandra . io . util . DataOutputPlus ; <nl> + import org . apache . cassandra . repair . RepairJobDesc ; <nl> + <nl> + public class SnapshotMessage extends RepairMessage <nl> + { <nl> + public final static MessageSerializer serializer = new SnapshotMessageSerializer ( ) ; <nl> + <nl> + public SnapshotMessage ( RepairJobDesc desc ) <nl> + { <nl> + super ( Type . SNAPSHOT , desc ) ; <nl> + } <nl> + <nl> + public static class SnapshotMessageSerializer implements MessageSerializer < SnapshotMessage > <nl> + { <nl> + public void serialize ( SnapshotMessage message , DataOutputPlus out , int version ) throws IOException <nl> + { <nl> + RepairJobDesc . serializer . serialize ( message . desc , out , version ) ; <nl> + } <nl> + <nl> + public SnapshotMessage deserialize ( DataInput in , int version ) throws IOException <nl> + { <nl> + RepairJobDesc desc = RepairJobDesc . serializer . deserialize ( in , version ) ; <nl> + return new SnapshotMessage ( desc ) ; <nl> + } <nl> + <nl> + public long serializedSize ( SnapshotMessage message , int version ) <nl> + { <nl> + return RepairJobDesc . serializer . serializedSize ( message . desc , version ) ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 8d9e2ea . . c97b17f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 7 + 1 , 10 @ @ <nl> dev <nl> * sstable versioning ( CASSANDRA - 389 ) <nl> <nl> - 0 . 6 . 0 - dev <nl> + 0 . 6 . 0 - RC1 <nl> + * fix compaction bucketing bug ( CASSANDRA - 814 ) <nl> + <nl> + 0 . 6 . 0 - beta1 / beta2 <nl> * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) <nl> * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) <nl> * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) <nl> @ @ - 42 , 7 + 45 , 9 @ @ dev <nl> * allow larger numbers of keys ( > 140M ) in a sstable bloom filter <nl> ( CASSANDRA - 790 ) <nl> * include jvm argument improvements from CASSANDRA - 504 in debian package <nl> - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * change streaming chunk size to 32MB to accomodate Windows XP limitations <nl> + ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) <nl> <nl> <nl> 0 . 5 . 0 final <nl> diff - - git a / build . xml b / build . xml <nl> index ea79876 . . 54ef12d 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 314 , 6 + 314 , 7 @ @ <nl> < include name = " * * " / > <nl> < exclude name = " build / * * " / > <nl> < exclude name = " src / gen - java / * * " / > <nl> + < exclude name = " interface / avro / * * " / > <nl> < / tarfileset > <nl> < / tar > <nl> < / target > <nl> diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> index fbd5ebb . . 1b5b6b1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return 0 ; <nl> } <nl> logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; <nl> - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> <nl> for ( List < SSTableReader > sstables : buckets ) <nl> @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> / * <nl> * Group files of similar size into buckets . <nl> * / <nl> - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) <nl> + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) <nl> { <nl> Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; <nl> for ( SSTableReader sstable : files ) <nl> @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> / / remove and re - add because adding changes the hash <nl> buckets . remove ( bucket ) ; <nl> - averageSize = ( averageSize + size ) / 2 ; <nl> + long totalSize = bucket . size ( ) * averageSize ; <nl> + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; <nl> bucket . add ( sstable ) ; <nl> buckets . put ( bucket , averageSize ) ; <nl> bFound = true ; <nl> @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> public void run ( ) <nl> { <nl> logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; <nl> - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> } <nl> } ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 592eef9 . . 9f34023 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 45 , 6 + 45 , 7 @ @ 
 * Add failure handler to async callback ( CASSANDRA - 6747 ) 
 * Fix AE when closing SSTable without releasing reference ( CASSANDRA - 7000 ) 
 * Clean up IndexInfo on keyspace / table drops ( CASSANDRA - 6924 ) 
 + * Only snapshot relative SSTables when sequential repair ( CASSANDRA - 7024 ) 
 Merged from 2 . 0 : 
 * Put nodes in hibernate when join _ ring is false ( CASSANDRA - 6961 ) 
 * Allow compaction of system tables during startup ( CASSANDRA - 6913 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index ffea243 . . 923ea5b 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import javax . management . * ; 
 
 import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . base . Function ; 
 + import com . google . common . base . Predicate ; 
 import com . google . common . collect . * ; 
 import com . google . common . util . concurrent . * ; 
 import com . google . common . util . concurrent . Futures ; 
 @ @ - 2153 , 6 + 2154 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 public void snapshotWithoutFlush ( String snapshotName ) 
 { 
 + snapshotWithoutFlush ( snapshotName , null ) ; 
 + } 
 + 
 + public void snapshotWithoutFlush ( String snapshotName , Predicate < SSTableReader > predicate ) 
 + { 
 for ( ColumnFamilyStore cfs : concatWithIndexes ( ) ) 
 { 
 DataTracker . View currentView = cfs . markCurrentViewReferenced ( ) ; 
 @ @ - 2161 , 6 + 2167 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 for ( SSTableReader ssTable : currentView . sstables ) 
 { 
 + if ( predicate ! = null & & ! predicate . apply ( ssTable ) ) 
 + { 
 + continue ; 
 + } 
 + 
 File snapshotDirectory = Directories . getSnapshotDirectory ( ssTable . descriptor , snapshotName ) ; 
 ssTable . createLinks ( snapshotDirectory . getPath ( ) ) ; / / hard links 
 if ( logger . isDebugEnabled ( ) ) 
 @ @ - 2190 , 8 + 2201 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 * / 
 public void snapshot ( String snapshotName ) 
 { 
 + snapshot ( snapshotName , null ) ; 
 + } 
 + 
 + public void snapshot ( String snapshotName , Predicate < SSTableReader > predicate ) 
 + { 
 forceBlockingFlush ( ) ; 
 - snapshotWithoutFlush ( snapshotName ) ; 
 + snapshotWithoutFlush ( snapshotName , predicate ) ; 
 } 
 
 public boolean snapshotExists ( String snapshotName ) 
 diff - - git a / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java b / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java 
 index bb66b69 . . d710652 100644 
 - - - a / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java 
 + + + b / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java 
 @ @ - 18 , 30 + 18 , 32 @ @ 
 package org . apache . cassandra . repair ; 
 
 import java . util . ArrayList ; 
 + import java . util . Collections ; 
 import java . util . List ; 
 import java . util . UUID ; 
 import java . util . concurrent . Future ; 
 
 + import com . google . common . base . Predicate ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . Keyspace ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 + import org . apache . cassandra . dht . Bounds ; 
 + import org . apache . cassandra . dht . Range ; 
 + import org . apache . cassandra . dht . Token ; 
 + import org . apache . cassandra . io . sstable . SSTableReader ; 
 import org . apache . cassandra . net . IVerbHandler ; 
 import org . apache . cassandra . net . MessageIn ; 
 import org . apache . cassandra . net . MessageOut ; 
 import org . apache . cassandra . net . MessagingService ; 
 - import org . apache . cassandra . repair . messages . AnticompactionRequest ; 
 - import org . apache . cassandra . repair . messages . PrepareMessage ; 
 - import org . apache . cassandra . repair . messages . RepairMessage ; 
 - import org . apache . cassandra . repair . messages . SyncRequest ; 
 - import org . apache . cassandra . repair . messages . ValidationRequest ; 
 + import org . apache . cassandra . repair . messages . * ; 
 import org . apache . cassandra . service . ActiveRepairService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . Pair ; 
 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 - 
 / * * 
 * Handles all repair related message . 
 * 
 @ @ - 71 , 6 + 73 , 21 @ @ public class RepairMessageVerbHandler implements IVerbHandler < RepairMessage > 
 MessagingService . instance ( ) . sendReply ( new MessageOut ( MessagingService . Verb . INTERNAL _ RESPONSE ) , id , message . from ) ; 
 break ; 
 
 + case SNAPSHOT : 
 + ColumnFamilyStore cfs = Keyspace . open ( desc . keyspace ) . getColumnFamilyStore ( desc . columnFamily ) ; 
 + final Range < Token > repairingRange = desc . range ; 
 + cfs . snapshot ( desc . sessionId . toString ( ) , new Predicate < SSTableReader > ( ) 
 + { 
 + public boolean apply ( SSTableReader sstable ) 
 + { 
 + return sstable ! = null & & new Bounds < > ( sstable . first . token , sstable . last . token ) . intersects ( Collections . singleton ( repairingRange ) ) ; 
 + } 
 + } ) ; 
 + 
 + logger . debug ( " Enqueuing response to snapshot request { } to { } " , desc . sessionId , message . from ) ; 
 + MessagingService . instance ( ) . sendReply ( new MessageOut ( MessagingService . Verb . INTERNAL _ RESPONSE ) , id , message . from ) ; 
 + break ; 
 + 
 case VALIDATION _ REQUEST : 
 ValidationRequest validationRequest = ( ValidationRequest ) message . payload ; 
 / / trigger read - only compaction 
 diff - - git a / src / java / org / apache / cassandra / repair / SnapshotTask . java b / src / java / org / apache / cassandra / repair / SnapshotTask . java 
 index cb5003a . . 6c3afb1 100644 
 - - - a / src / java / org / apache / cassandra / repair / SnapshotTask . java 
 + + + b / src / java / org / apache / cassandra / repair / SnapshotTask . java 
 @ @ - 18 , 15 + 18 , 14 @ @ 
 package org . apache . cassandra . repair ; 
 
 import java . net . InetAddress ; 
 - import java . util . List ; 
 import java . util . concurrent . RunnableFuture ; 
 
 import com . google . common . util . concurrent . AbstractFuture ; 
 
 - import org . apache . cassandra . db . SnapshotCommand ; 
 import org . apache . cassandra . net . IAsyncCallbackWithFailure ; 
 import org . apache . cassandra . net . MessageIn ; 
 import org . apache . cassandra . net . MessagingService ; 
 + import org . apache . cassandra . repair . messages . SnapshotMessage ; 
 
 / * * 
 * SnapshotTask is a task that sends snapshot request . 
 @ @ - 44 , 10 + 43 , 7 @ @ public class SnapshotTask extends AbstractFuture < InetAddress > implements Runnabl 
 
 public void run ( ) 
 { 
 - MessagingService . instance ( ) . sendRRWithFailure ( new SnapshotCommand ( desc . keyspace , 
 - desc . columnFamily , 
 - desc . sessionId . toString ( ) , 
 - false ) . createMessage ( ) , 
 + MessagingService . instance ( ) . sendRRWithFailure ( new SnapshotMessage ( desc ) . createMessage ( ) , 
 endpoint , 
 new SnapshotCallback ( this ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / repair / messages / RepairMessage . java b / src / java / org / apache / cassandra / repair / messages / RepairMessage . java 
 index 054fb55 . . d500928 100644 
 - - - a / src / java / org / apache / cassandra / repair / messages / RepairMessage . java 
 + + + b / src / java / org / apache / cassandra / repair / messages / RepairMessage . java 
 @ @ - 44 , 7 + 44 , 8 @ @ public abstract class RepairMessage 
 SYNC _ REQUEST ( 2 , SyncRequest . serializer ) , 
 SYNC _ COMPLETE ( 3 , SyncComplete . serializer ) , 
 ANTICOMPACTION _ REQUEST ( 4 , AnticompactionRequest . serializer ) , 
 - PREPARE _ MESSAGE ( 5 , PrepareMessage . serializer ) ; 
 + PREPARE _ MESSAGE ( 5 , PrepareMessage . serializer ) , 
 + SNAPSHOT ( 6 , SnapshotMessage . serializer ) ; 
 
 private final byte type ; 
 private final MessageSerializer < RepairMessage > serializer ; 
 diff - - git a / src / java / org / apache / cassandra / repair / messages / SnapshotMessage . java b / src / java / org / apache / cassandra / repair / messages / SnapshotMessage . java 
 new file mode 100644 
 index 0000000 . . caccc82 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / repair / messages / SnapshotMessage . java 
 @ @ - 0 , 0 + 1 , 53 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . repair . messages ; 
 + 
 + import java . io . DataInput ; 
 + import java . io . IOException ; 
 + 
 + import org . apache . cassandra . io . util . DataOutputPlus ; 
 + import org . apache . cassandra . repair . RepairJobDesc ; 
 + 
 + public class SnapshotMessage extends RepairMessage 
 + { 
 + public final static MessageSerializer serializer = new SnapshotMessageSerializer ( ) ; 
 + 
 + public SnapshotMessage ( RepairJobDesc desc ) 
 + { 
 + super ( Type . SNAPSHOT , desc ) ; 
 + } 
 + 
 + public static class SnapshotMessageSerializer implements MessageSerializer < SnapshotMessage > 
 + { 
 + public void serialize ( SnapshotMessage message , DataOutputPlus out , int version ) throws IOException 
 + { 
 + RepairJobDesc . serializer . serialize ( message . desc , out , version ) ; 
 + } 
 + 
 + public SnapshotMessage deserialize ( DataInput in , int version ) throws IOException 
 + { 
 + RepairJobDesc desc = RepairJobDesc . serializer . deserialize ( in , version ) ; 
 + return new SnapshotMessage ( desc ) ; 
 + } 
 + 
 + public long serializedSize ( SnapshotMessage message , int version ) 
 + { 
 + return RepairJobDesc . serializer . serializedSize ( message . desc , version ) ; 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 8d9e2ea . . c97b17f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 7 + 1 , 10 @ @ 
 dev 
 * sstable versioning ( CASSANDRA - 389 ) 
 
 - 0 . 6 . 0 - dev 
 + 0 . 6 . 0 - RC1 
 + * fix compaction bucketing bug ( CASSANDRA - 814 ) 
 + 
 + 0 . 6 . 0 - beta1 / beta2 
 * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) 
 * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) 
 * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) 
 @ @ - 42 , 7 + 45 , 9 @ @ dev 
 * allow larger numbers of keys ( > 140M ) in a sstable bloom filter 
 ( CASSANDRA - 790 ) 
 * include jvm argument improvements from CASSANDRA - 504 in debian package 
 - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) 
 + * change streaming chunk size to 32MB to accomodate Windows XP limitations 
 + ( was 64MB ) ( CASSANDRA - 795 ) 
 + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) 
 
 
 0 . 5 . 0 final 
 diff - - git a / build . xml b / build . xml 
 index ea79876 . . 54ef12d 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 314 , 6 + 314 , 7 @ @ 
 < include name = " * * " / > 
 < exclude name = " build / * * " / > 
 < exclude name = " src / gen - java / * * " / > 
 + < exclude name = " interface / avro / * * " / > 
 < / tarfileset > 
 < / tar > 
 < / target > 
 diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java 
 index fbd5ebb . . 1b5b6b1 100644 
 - - - a / src / java / org / apache / cassandra / db / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / CompactionManager . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 return 0 ; 
 } 
 logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; 
 - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 
 for ( List < SSTableReader > sstables : buckets ) 
 @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 / * 
 * Group files of similar size into buckets . 
 * / 
 - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) 
 + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) 
 { 
 Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; 
 for ( SSTableReader sstable : files ) 
 @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 / / remove and re - add because adding changes the hash 
 buckets . remove ( bucket ) ; 
 - averageSize = ( averageSize + size ) / 2 ; 
 + long totalSize = bucket . size ( ) * averageSize ; 
 + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; 
 bucket . add ( sstable ) ; 
 buckets . put ( bucket , averageSize ) ; 
 bFound = true ; 
 @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 public void run ( ) 
 { 
 logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; 
 - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 } 
 } ;
