BLEU SCORE: 0.04844232281716619

TEST MSG: Add documentation for 7017
GENERATED MSG: Support named bind variables in CQL

TEST DIFF (one line): diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile <nl> index 1ee2537 . . 83899d2 100644 <nl> - - - a / doc / cql3 / CQL . textile <nl> + + + b / doc / cql3 / CQL . textile <nl> @ @ - 1029 , 6 + 1029 , 7 @ @ bc ( syntax ) . . <nl> FROM < tablename > <nl> ( WHERE < where - clause > ) ? <nl> ( ORDER BY < order - by > ) ? <nl> + ( PER PARTITION LIMIT < integer > ) ? <nl> ( LIMIT < integer > ) ? <nl> ( ALLOW FILTERING ) ? <nl> <nl> @ @ - 1147 , 9 + 1148 , 9 @ @ The @ ORDER BY @ option allows to select the order of the returned results . It tak <nl> * if the table has been defined without any specific @ CLUSTERING ORDER @ , then then allowed orderings are the order induced by the clustering columns and the reverse of that one . <nl> * otherwise , the orderings allowed are the order of the @ CLUSTERING ORDER @ option and the reversed one . <nl> <nl> - h4 ( # selectLimit ) . @ LIMIT @ <nl> + h4 ( # selectLimit ) . @ LIMIT @ and @ PER PARTITION LIMIT @ <nl> <nl> - The @ LIMIT @ option to a @ SELECT @ statement limits the number of rows returned by a query . <nl> + The @ LIMIT @ option to a @ SELECT @ statement limits the number of rows returned by a query , while the @ PER PARTITION LIMIT @ option limits the number of rows returned for a given partition by the query . Note that both type of limit can used in the same statement . <nl> <nl> h4 ( # selectAllowFiltering ) . @ ALLOW FILTERING @ <nl> <nl> @ @ - 2315 , 6 + 2316 , 7 @ @ h3 . 3 . 4 . 2 <nl> <nl> * " @ INSERT / UPDATE options @ " : # updateOptions for tables having a default _ time _ to _ live specifying a TTL of 0 will remove the TTL from the inserted or updated values <nl> * " @ ALTER TABLE @ " : # alterTableStmt @ ADD @ and @ DROP @ now allow mutiple columns to be added / removed <nl> + * New " @ PER PARTITION LIMIT @ " : # selectLimit option ( see " CASSANDRA - 7017 " : https : / / issues . apache . org / jira / browse / CASSANDRA - 7017 ) . <nl> <nl> h3 . 3 . 4 . 1 <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index 1fd8564 . . 5f4b0f6 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 59 , 7 + 59 , 7 @ @ import org . github . jamm . MemoryMeter ; <nl> <nl> public class QueryProcessor implements QueryHandler <nl> { <nl> - public static final CassandraVersion CQL _ VERSION = new CassandraVersion ( " 3 . 4 . 0 " ) ; <nl> + public static final CassandraVersion CQL _ VERSION = new CassandraVersion ( " 3 . 4 . 2 " ) ; <nl> <nl> public static final QueryProcessor instance = new QueryProcessor ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index 9b68d7a . . b164e61 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 857 , 7 + 857 , 7 @ @ public class SelectStatement implements CQLStatement <nl> isReversed , <nl> orderingComparator , <nl> prepareLimit ( boundNames , limit , keyspace ( ) , limitReceiver ( ) ) , <nl> - prepareLimit ( boundNames , perPartitionLimit , keyspace ( ) , limitReceiver ( ) ) ) ; <nl> + prepareLimit ( boundNames , perPartitionLimit , keyspace ( ) , perPartitionLimitReceiver ( ) ) ) ; <nl> <nl> return new ParsedStatement . Prepared ( stmt , boundNames , boundNames . getPartitionKeyBindIndexes ( cfm ) ) ; <nl> } <nl> @ @ - 1055 , 6 + 1055 , 11 @ @ public class SelectStatement implements CQLStatement <nl> return new ColumnSpecification ( keyspace ( ) , columnFamily ( ) , new ColumnIdentifier ( " [ limit ] " , true ) , Int32Type . instance ) ; <nl> } <nl> <nl> + private ColumnSpecification perPartitionLimitReceiver ( ) <nl> + { <nl> + return new ColumnSpecification ( keyspace ( ) , columnFamily ( ) , new ColumnIdentifier ( " [ per _ partition _ limit ] " , true ) , Int32Type . instance ) ; <nl> + } <nl> + <nl> @ Override <nl> public String toString ( ) <nl> {
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b2fa36e . . 06d9b16 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 27 , 6 + 27 , 7 @ @ <nl> * cqlsh : return the result of CAS writes ( CASSANDRA - 5796 ) <nl> * Fix validation of IN clauses with 2ndary indexes ( CASSANDRA - 6050 ) <nl> * Support named bind variables in CQL ( CASSANDRA - 6033 ) <nl> + * Make ThriftServer more easlly extensible ( CASSANDRA - 6058 ) <nl> Merged from 1 . 2 : <nl> * Avoid second - guessing out - of - space state ( CASSANDRA - 5605 ) <nl> * Tuning knobs for dealing with large blobs and many CFs ( CASSANDRA - 5982 ) <nl> diff - - git a / src / java / org / apache / cassandra / thrift / TServerFactory . java b / src / java / org / apache / cassandra / thrift / TServerFactory . java <nl> index 0c93867 . . 2e2acb8 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / TServerFactory . java <nl> + + + b / src / java / org / apache / cassandra / thrift / TServerFactory . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . thrift ; <nl> <nl> import java . net . InetSocketAddress ; <nl> <nl> + import org . apache . thrift . TProcessor ; <nl> import org . apache . thrift . protocol . TProtocolFactory ; <nl> import org . apache . thrift . server . TServer ; <nl> import org . apache . thrift . transport . TTransportFactory ; <nl> @ @ - 32 , 7 + 33 , 7 @ @ public interface TServerFactory <nl> { <nl> public InetSocketAddress addr ; <nl> public CassandraServer cassandraServer ; <nl> - public Cassandra . Processor processor ; <nl> + public TProcessor processor ; <nl> public TProtocolFactory tProtocolFactory ; <nl> public TTransportFactory inTransportFactory ; <nl> public TTransportFactory outTransportFactory ; <nl> diff - - git a / src / java / org / apache / cassandra / thrift / ThriftServer . java b / src / java / org / apache / cassandra / thrift / ThriftServer . java <nl> index 5f608a1 . . 3a0d545 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / ThriftServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / ThriftServer . java <nl> @ @ - 25 , 19 + 25 , 21 @ @ import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . service . CassandraDaemon ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . thrift . TProcessor ; <nl> import org . apache . thrift . protocol . TBinaryProtocol ; <nl> import org . apache . thrift . server . TServer ; <nl> import org . apache . thrift . transport . TFramedTransport ; <nl> + import org . apache . thrift . transport . TTransportFactory ; <nl> <nl> public class ThriftServer implements CassandraDaemon . Server <nl> { <nl> private static Logger logger = LoggerFactory . getLogger ( ThriftServer . class ) ; <nl> - final static String SYNC = " sync " ; <nl> - final static String ASYNC = " async " ; <nl> - final static String HSHA = " hsha " ; <nl> + protected final static String SYNC = " sync " ; <nl> + protected final static String ASYNC = " async " ; <nl> + protected final static String HSHA = " hsha " ; <nl> <nl> - private final InetAddress address ; <nl> - private final int port ; <nl> + protected final InetAddress address ; <nl> + protected final int port ; <nl> private volatile ThriftServerThread server ; <nl> <nl> public ThriftServer ( InetAddress address , int port ) <nl> @ @ - 50 , 7 + 52 , 8 @ @ public class ThriftServer implements CassandraDaemon . Server <nl> { <nl> if ( server = = null ) <nl> { <nl> - server = new ThriftServerThread ( address , port ) ; <nl> + CassandraServer iface = getCassandraServer ( ) ; <nl> + server = new ThriftServerThread ( address , port , iface , getProcessor ( iface ) , getTransportFactory ( ) ) ; <nl> server . start ( ) ; <nl> } <nl> } <nl> @ @ - 77 , 15 + 80 , 39 @ @ public class ThriftServer implements CassandraDaemon . Server <nl> return server ! = null ; <nl> } <nl> <nl> + / * <nl> + * These methods are intended to be overriden to provide DSE specific implementations <nl> + * / <nl> + protected CassandraServer getCassandraServer ( ) <nl> + { <nl> + return new CassandraServer ( ) ; <nl> + } <nl> + <nl> + protected TProcessor getProcessor ( CassandraServer server ) <nl> + { <nl> + return new Cassandra . Processor < Cassandra . Iface > ( server ) ; <nl> + } <nl> + <nl> + protected TTransportFactory getTransportFactory ( ) <nl> + { <nl> + int tFramedTransportSize = DatabaseDescriptor . getThriftFramedTransportSize ( ) ; <nl> + logger . info ( " Using TFramedTransport with a max frame size of { } bytes . " , tFramedTransportSize ) ; <nl> + return new TFramedTransport . Factory ( tFramedTransportSize ) ; <nl> + } <nl> + <nl> / * * <nl> * Simple class to run the thrift connection accepting code in separate <nl> * thread of control . <nl> * / <nl> private static class ThriftServerThread extends Thread <nl> { <nl> - private TServer serverEngine ; <nl> + private final TServer serverEngine ; <nl> <nl> - public ThriftServerThread ( InetAddress listenAddr , int listenPort ) <nl> + public ThriftServerThread ( InetAddress listenAddr , <nl> + int listenPort , <nl> + CassandraServer server , <nl> + TProcessor processor , <nl> + TTransportFactory transportFactory ) <nl> { <nl> / / now we start listening for clients <nl> logger . info ( String . format ( " Binding thrift service to % s : % s " , listenAddr , listenPort ) ) ; <nl> @ @ - 93 , 16 + 120 , 13 @ @ public class ThriftServer implements CassandraDaemon . Server <nl> TServerFactory . Args args = new TServerFactory . Args ( ) ; <nl> args . tProtocolFactory = new TBinaryProtocol . Factory ( true , true ) ; <nl> args . addr = new InetSocketAddress ( listenAddr , listenPort ) ; <nl> - args . cassandraServer = new CassandraServer ( ) ; <nl> - args . processor = new Cassandra . Processor ( args . cassandraServer ) ; <nl> + args . cassandraServer = server ; <nl> + args . processor = processor ; <nl> args . keepAlive = DatabaseDescriptor . getRpcKeepAlive ( ) ; <nl> args . sendBufferSize = DatabaseDescriptor . getRpcSendBufferSize ( ) ; <nl> args . recvBufferSize = DatabaseDescriptor . getRpcRecvBufferSize ( ) ; <nl> - int tFramedTransportSize = DatabaseDescriptor . getThriftFramedTransportSize ( ) ; <nl> - <nl> - logger . info ( " Using TFramedTransport with a max frame size of { } bytes . " , tFramedTransportSize ) ; <nl> - args . inTransportFactory = new TFramedTransport . Factory ( tFramedTransportSize ) ; <nl> - args . outTransportFactory = new TFramedTransport . Factory ( tFramedTransportSize ) ; <nl> + args . inTransportFactory = transportFactory ; <nl> + args . outTransportFactory = transportFactory ; <nl> serverEngine = new TServerCustomFactory ( DatabaseDescriptor . getRpcServerType ( ) ) . buildTServer ( args ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile 
 index 1ee2537 . . 83899d2 100644 
 - - - a / doc / cql3 / CQL . textile 
 + + + b / doc / cql3 / CQL . textile 
 @ @ - 1029 , 6 + 1029 , 7 @ @ bc ( syntax ) . . 
 FROM < tablename > 
 ( WHERE < where - clause > ) ? 
 ( ORDER BY < order - by > ) ? 
 + ( PER PARTITION LIMIT < integer > ) ? 
 ( LIMIT < integer > ) ? 
 ( ALLOW FILTERING ) ? 
 
 @ @ - 1147 , 9 + 1148 , 9 @ @ The @ ORDER BY @ option allows to select the order of the returned results . It tak 
 * if the table has been defined without any specific @ CLUSTERING ORDER @ , then then allowed orderings are the order induced by the clustering columns and the reverse of that one . 
 * otherwise , the orderings allowed are the order of the @ CLUSTERING ORDER @ option and the reversed one . 
 
 - h4 ( # selectLimit ) . @ LIMIT @ 
 + h4 ( # selectLimit ) . @ LIMIT @ and @ PER PARTITION LIMIT @ 
 
 - The @ LIMIT @ option to a @ SELECT @ statement limits the number of rows returned by a query . 
 + The @ LIMIT @ option to a @ SELECT @ statement limits the number of rows returned by a query , while the @ PER PARTITION LIMIT @ option limits the number of rows returned for a given partition by the query . Note that both type of limit can used in the same statement . 
 
 h4 ( # selectAllowFiltering ) . @ ALLOW FILTERING @ 
 
 @ @ - 2315 , 6 + 2316 , 7 @ @ h3 . 3 . 4 . 2 
 
 * " @ INSERT / UPDATE options @ " : # updateOptions for tables having a default _ time _ to _ live specifying a TTL of 0 will remove the TTL from the inserted or updated values 
 * " @ ALTER TABLE @ " : # alterTableStmt @ ADD @ and @ DROP @ now allow mutiple columns to be added / removed 
 + * New " @ PER PARTITION LIMIT @ " : # selectLimit option ( see " CASSANDRA - 7017 " : https : / / issues . apache . org / jira / browse / CASSANDRA - 7017 ) . 
 
 h3 . 3 . 4 . 1 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index 1fd8564 . . 5f4b0f6 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 59 , 7 + 59 , 7 @ @ import org . github . jamm . MemoryMeter ; 
 
 public class QueryProcessor implements QueryHandler 
 { 
 - public static final CassandraVersion CQL _ VERSION = new CassandraVersion ( " 3 . 4 . 0 " ) ; 
 + public static final CassandraVersion CQL _ VERSION = new CassandraVersion ( " 3 . 4 . 2 " ) ; 
 
 public static final QueryProcessor instance = new QueryProcessor ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index 9b68d7a . . b164e61 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 857 , 7 + 857 , 7 @ @ public class SelectStatement implements CQLStatement 
 isReversed , 
 orderingComparator , 
 prepareLimit ( boundNames , limit , keyspace ( ) , limitReceiver ( ) ) , 
 - prepareLimit ( boundNames , perPartitionLimit , keyspace ( ) , limitReceiver ( ) ) ) ; 
 + prepareLimit ( boundNames , perPartitionLimit , keyspace ( ) , perPartitionLimitReceiver ( ) ) ) ; 
 
 return new ParsedStatement . Prepared ( stmt , boundNames , boundNames . getPartitionKeyBindIndexes ( cfm ) ) ; 
 } 
 @ @ - 1055 , 6 + 1055 , 11 @ @ public class SelectStatement implements CQLStatement 
 return new ColumnSpecification ( keyspace ( ) , columnFamily ( ) , new ColumnIdentifier ( " [ limit ] " , true ) , Int32Type . instance ) ; 
 } 
 
 + private ColumnSpecification perPartitionLimitReceiver ( ) 
 + { 
 + return new ColumnSpecification ( keyspace ( ) , columnFamily ( ) , new ColumnIdentifier ( " [ per _ partition _ limit ] " , true ) , Int32Type . instance ) ; 
 + } 
 + 
 @ Override 
 public String toString ( ) 
 {

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b2fa36e . . 06d9b16 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 27 , 6 + 27 , 7 @ @ 
 * cqlsh : return the result of CAS writes ( CASSANDRA - 5796 ) 
 * Fix validation of IN clauses with 2ndary indexes ( CASSANDRA - 6050 ) 
 * Support named bind variables in CQL ( CASSANDRA - 6033 ) 
 + * Make ThriftServer more easlly extensible ( CASSANDRA - 6058 ) 
 Merged from 1 . 2 : 
 * Avoid second - guessing out - of - space state ( CASSANDRA - 5605 ) 
 * Tuning knobs for dealing with large blobs and many CFs ( CASSANDRA - 5982 ) 
 diff - - git a / src / java / org / apache / cassandra / thrift / TServerFactory . java b / src / java / org / apache / cassandra / thrift / TServerFactory . java 
 index 0c93867 . . 2e2acb8 100644 
 - - - a / src / java / org / apache / cassandra / thrift / TServerFactory . java 
 + + + b / src / java / org / apache / cassandra / thrift / TServerFactory . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . thrift ; 
 
 import java . net . InetSocketAddress ; 
 
 + import org . apache . thrift . TProcessor ; 
 import org . apache . thrift . protocol . TProtocolFactory ; 
 import org . apache . thrift . server . TServer ; 
 import org . apache . thrift . transport . TTransportFactory ; 
 @ @ - 32 , 7 + 33 , 7 @ @ public interface TServerFactory 
 { 
 public InetSocketAddress addr ; 
 public CassandraServer cassandraServer ; 
 - public Cassandra . Processor processor ; 
 + public TProcessor processor ; 
 public TProtocolFactory tProtocolFactory ; 
 public TTransportFactory inTransportFactory ; 
 public TTransportFactory outTransportFactory ; 
 diff - - git a / src / java / org / apache / cassandra / thrift / ThriftServer . java b / src / java / org / apache / cassandra / thrift / ThriftServer . java 
 index 5f608a1 . . 3a0d545 100644 
 - - - a / src / java / org / apache / cassandra / thrift / ThriftServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / ThriftServer . java 
 @ @ - 25 , 19 + 25 , 21 @ @ import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . service . CassandraDaemon ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . thrift . TProcessor ; 
 import org . apache . thrift . protocol . TBinaryProtocol ; 
 import org . apache . thrift . server . TServer ; 
 import org . apache . thrift . transport . TFramedTransport ; 
 + import org . apache . thrift . transport . TTransportFactory ; 
 
 public class ThriftServer implements CassandraDaemon . Server 
 { 
 private static Logger logger = LoggerFactory . getLogger ( ThriftServer . class ) ; 
 - final static String SYNC = " sync " ; 
 - final static String ASYNC = " async " ; 
 - final static String HSHA = " hsha " ; 
 + protected final static String SYNC = " sync " ; 
 + protected final static String ASYNC = " async " ; 
 + protected final static String HSHA = " hsha " ; 
 
 - private final InetAddress address ; 
 - private final int port ; 
 + protected final InetAddress address ; 
 + protected final int port ; 
 private volatile ThriftServerThread server ; 
 
 public ThriftServer ( InetAddress address , int port ) 
 @ @ - 50 , 7 + 52 , 8 @ @ public class ThriftServer implements CassandraDaemon . Server 
 { 
 if ( server = = null ) 
 { 
 - server = new ThriftServerThread ( address , port ) ; 
 + CassandraServer iface = getCassandraServer ( ) ; 
 + server = new ThriftServerThread ( address , port , iface , getProcessor ( iface ) , getTransportFactory ( ) ) ; 
 server . start ( ) ; 
 } 
 } 
 @ @ - 77 , 15 + 80 , 39 @ @ public class ThriftServer implements CassandraDaemon . Server 
 return server ! = null ; 
 } 
 
 + / * 
 + * These methods are intended to be overriden to provide DSE specific implementations 
 + * / 
 + protected CassandraServer getCassandraServer ( ) 
 + { 
 + return new CassandraServer ( ) ; 
 + } 
 + 
 + protected TProcessor getProcessor ( CassandraServer server ) 
 + { 
 + return new Cassandra . Processor < Cassandra . Iface > ( server ) ; 
 + } 
 + 
 + protected TTransportFactory getTransportFactory ( ) 
 + { 
 + int tFramedTransportSize = DatabaseDescriptor . getThriftFramedTransportSize ( ) ; 
 + logger . info ( " Using TFramedTransport with a max frame size of { } bytes . " , tFramedTransportSize ) ; 
 + return new TFramedTransport . Factory ( tFramedTransportSize ) ; 
 + } 
 + 
 / * * 
 * Simple class to run the thrift connection accepting code in separate 
 * thread of control . 
 * / 
 private static class ThriftServerThread extends Thread 
 { 
 - private TServer serverEngine ; 
 + private final TServer serverEngine ; 
 
 - public ThriftServerThread ( InetAddress listenAddr , int listenPort ) 
 + public ThriftServerThread ( InetAddress listenAddr , 
 + int listenPort , 
 + CassandraServer server , 
 + TProcessor processor , 
 + TTransportFactory transportFactory ) 
 { 
 / / now we start listening for clients 
 logger . info ( String . format ( " Binding thrift service to % s : % s " , listenAddr , listenPort ) ) ; 
 @ @ - 93 , 16 + 120 , 13 @ @ public class ThriftServer implements CassandraDaemon . Server 
 TServerFactory . Args args = new TServerFactory . Args ( ) ; 
 args . tProtocolFactory = new TBinaryProtocol . Factory ( true , true ) ; 
 args . addr = new InetSocketAddress ( listenAddr , listenPort ) ; 
 - args . cassandraServer = new CassandraServer ( ) ; 
 - args . processor = new Cassandra . Processor ( args . cassandraServer ) ; 
 + args . cassandraServer = server ; 
 + args . processor = processor ; 
 args . keepAlive = DatabaseDescriptor . getRpcKeepAlive ( ) ; 
 args . sendBufferSize = DatabaseDescriptor . getRpcSendBufferSize ( ) ; 
 args . recvBufferSize = DatabaseDescriptor . getRpcRecvBufferSize ( ) ; 
 - int tFramedTransportSize = DatabaseDescriptor . getThriftFramedTransportSize ( ) ; 
 - 
 - logger . info ( " Using TFramedTransport with a max frame size of { } bytes . " , tFramedTransportSize ) ; 
 - args . inTransportFactory = new TFramedTransport . Factory ( tFramedTransportSize ) ; 
 - args . outTransportFactory = new TFramedTransport . Factory ( tFramedTransportSize ) ; 
 + args . inTransportFactory = transportFactory ; 
 + args . outTransportFactory = transportFactory ; 
 serverEngine = new TServerCustomFactory ( DatabaseDescriptor . getRpcServerType ( ) ) . buildTServer ( args ) ; 
 } 

