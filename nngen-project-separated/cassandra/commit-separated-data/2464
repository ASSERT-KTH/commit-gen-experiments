BLEU SCORE: 0.08310415003234632

TEST MSG: remove unused classes
GENERATED MSG: Update version and add missing license

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 450e337 . . 7bab4cc 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 6 @ @ <nl> + 3 . 0 <nl> + * remove unused classes ( CASSANDRA - 7197 ) <nl> + <nl> 2 . 1 . 0 - rc1 <nl> * Add PowerShell Windows launch scripts ( CASSANDRA - 7001 ) <nl> * Make commitlog archive + restore more robust ( CASSANDRA - 6974 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / SimpleAbstractColumnIterator . java b / src / java / org / apache / cassandra / db / columniterator / SimpleAbstractColumnIterator . java <nl> deleted file mode 100644 <nl> index afd268d . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / SimpleAbstractColumnIterator . java <nl> + + + / dev / null <nl> @ @ - 1 , 29 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . db . columniterator ; <nl> - <nl> - import java . io . IOException ; <nl> - <nl> - import com . google . common . collect . AbstractIterator ; <nl> - <nl> - import org . apache . cassandra . db . OnDiskAtom ; <nl> - <nl> - public abstract class SimpleAbstractColumnIterator extends AbstractIterator < OnDiskAtom > implements OnDiskAtomIterator <nl> - { <nl> - public void close ( ) throws IOException { } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / db / context / IContext . java b / src / java / org / apache / cassandra / db / context / IContext . java <nl> deleted file mode 100644 <nl> index df484e7 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / db / context / IContext . java <nl> + + + / dev / null <nl> @ @ - 1 , 75 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . db . context ; <nl> - <nl> - import java . nio . ByteBuffer ; <nl> - <nl> - import org . apache . cassandra . utils . memory . AbstractAllocator ; <nl> - <nl> - / * * <nl> - * An opaque commutative context . <nl> - * <nl> - * Maintains a ByteBuffer context that represents a partitioned commutative value . <nl> - * / <nl> - public interface IContext <nl> - { <nl> - public static enum ContextRelationship <nl> - { <nl> - EQUAL , <nl> - GREATER _ THAN , <nl> - LESS _ THAN , <nl> - DISJOINT <nl> - } ; <nl> - <nl> - / * * <nl> - * Determine the relationship between two contexts . <nl> - * <nl> - * EQUAL : Equal set of nodes and every count is equal . <nl> - * GREATER _ THAN : Superset of nodes and every count is equal or greater than its corollary . <nl> - * LESS _ THAN : Subset of nodes and every count is equal or less than its corollary . <nl> - * DISJOINT : Node sets are not equal and / or counts are not all greater or less than . <nl> - * <nl> - * @ param left <nl> - * context . <nl> - * @ param right <nl> - * context . <nl> - * @ return the ContextRelationship between the contexts . <nl> - * / <nl> - public ContextRelationship diff ( ByteBuffer left , ByteBuffer right ) ; <nl> - <nl> - / * * <nl> - * Return a context w / an aggregated count for each node id . <nl> - * <nl> - * @ param left <nl> - * context . <nl> - * @ param right <nl> - * context . <nl> - * @ param allocator <nl> - * an allocator to allocate the new context from . <nl> - * / <nl> - public ByteBuffer merge ( ByteBuffer left , ByteBuffer right , AbstractAllocator allocator ) ; <nl> - <nl> - / * * <nl> - * Human - readable String from context . <nl> - * <nl> - * @ param context <nl> - * context . <nl> - * @ return a human - readable String of the context . <nl> - * / <nl> - public String toString ( ByteBuffer context ) ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / gms / IFailureNotification . java b / src / java / org / apache / cassandra / gms / IFailureNotification . java <nl> deleted file mode 100644 <nl> index 7e1c955 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / gms / IFailureNotification . java <nl> + + + / dev / null <nl> @ @ - 1 , 27 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . gms ; <nl> - <nl> - import java . net . InetAddress ; <nl> - <nl> - public interface IFailureNotification <nl> - { <nl> - public void convict ( InetAddress ep ) ; <nl> - <nl> - public void revive ( InetAddress ep ) ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java b / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java <nl> index 59a8843 . . abf8df2 100644 <nl> - - - a / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java <nl> + + + b / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java <nl> @ @ - 43 , 7 + 43 , 7 @ @ import java . util . Set ; <nl> import java . util . Collection ; <nl> import java . util . concurrent . * ; <nl> <nl> - public class PendingRangeCalculatorService extends PendingRangeCalculatorServiceMBean <nl> + public class PendingRangeCalculatorService <nl> { <nl> public static final PendingRangeCalculatorService instance = new PendingRangeCalculatorService ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / PendingRangeCalculatorServiceMBean . java b / src / java / org / apache / cassandra / service / PendingRangeCalculatorServiceMBean . java <nl> deleted file mode 100644 <nl> index c9b04f0 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / service / PendingRangeCalculatorServiceMBean . java <nl> + + + / dev / null <nl> @ @ - 1 , 23 + 0 , 0 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . service ; <nl> - <nl> - public class PendingRangeCalculatorServiceMBean <nl> - { <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / RequestType . java b / src / java / org / apache / cassandra / thrift / RequestType . java <nl> deleted file mode 100644 <nl> index 0d01362 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / thrift / RequestType . java <nl> + + + / dev / null <nl> @ @ - 1 , 24 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . thrift ; <nl> - <nl> - public enum RequestType <nl> - { <nl> - READ , <nl> - WRITE <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / utils / AtomicLongArrayUpdater . java b / src / java / org / apache / cassandra / utils / AtomicLongArrayUpdater . java <nl> deleted file mode 100644 <nl> index c797331 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / utils / AtomicLongArrayUpdater . java <nl> + + + / dev / null <nl> @ @ - 1 , 91 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , <nl> - * software distributed under the License is distributed on an <nl> - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> - * KIND , either express or implied . See the License for the <nl> - * specific language governing permissions and limitations <nl> - * under the License . <nl> - * / <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - import sun . misc . Unsafe ; <nl> - <nl> - import java . lang . reflect . Field ; <nl> - import java . security . AccessController ; <nl> - import java . security . PrivilegedAction ; <nl> - <nl> - public final class AtomicLongArrayUpdater { <nl> - <nl> - private static final long offset ; <nl> - private static final int shift ; <nl> - <nl> - static final Unsafe theUnsafe ; <nl> - <nl> - static { <nl> - theUnsafe = ( Unsafe ) AccessController . doPrivileged ( <nl> - new PrivilegedAction < Object > ( ) <nl> - { <nl> - @ Override <nl> - public Object run ( ) <nl> - { <nl> - try <nl> - { <nl> - Field f = Unsafe . class . getDeclaredField ( " theUnsafe " ) ; <nl> - f . setAccessible ( true ) ; <nl> - return f . get ( null ) ; <nl> - } catch ( NoSuchFieldException e ) <nl> - { <nl> - / / It doesn ' t matter what we throw ; <nl> - / / it ' s swallowed in getBest ( ) . <nl> - throw new Error ( ) ; <nl> - } catch ( IllegalAccessException e ) <nl> - { <nl> - throw new Error ( ) ; <nl> - } <nl> - } <nl> - } ) ; <nl> - Class < ? > clazz = long [ ] . class ; <nl> - offset = theUnsafe . arrayBaseOffset ( clazz ) ; <nl> - shift = shift ( theUnsafe . arrayIndexScale ( clazz ) ) ; <nl> - } <nl> - <nl> - private static int shift ( int scale ) <nl> - { <nl> - if ( Integer . bitCount ( scale ) ! = 1 ) <nl> - throw new IllegalStateException ( ) ; <nl> - return Integer . bitCount ( scale - 1 ) ; <nl> - } <nl> - <nl> - public AtomicLongArrayUpdater ( ) { } <nl> - <nl> - public final boolean compareAndSet ( Object trg , int i , long exp , long upd ) { <nl> - return theUnsafe . compareAndSwapLong ( trg , offset + ( i < < shift ) , exp , upd ) ; <nl> - } <nl> - <nl> - public final void putVolatile ( Object trg , int i , long val ) { <nl> - theUnsafe . putLongVolatile ( trg , offset + ( i < < shift ) , val ) ; <nl> - } <nl> - <nl> - public final void putOrdered ( Object trg , int i , long val ) { <nl> - theUnsafe . putOrderedLong ( trg , offset + ( i < < shift ) , val ) ; <nl> - } <nl> - <nl> - public final long get ( Object trg , int i ) { <nl> - return theUnsafe . getLong ( trg , offset + ( i < < shift ) ) ; <nl> - } <nl> - <nl> - public final long getVolatile ( Object trg , int i ) { <nl> - return theUnsafe . getLongVolatile ( trg , offset + ( i < < shift ) ) ; <nl> - } <nl> - <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / utils / DefaultDouble . java b / src / java / org / apache / cassandra / utils / DefaultDouble . java <nl> deleted file mode 100644 <nl> index 236e177 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / utils / DefaultDouble . java <nl> + + + / dev / null <nl> @ @ - 1 , 46 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - <nl> - public class DefaultDouble <nl> - { <nl> - private final double originalValue ; <nl> - private double currentValue ; <nl> - <nl> - public DefaultDouble ( double value ) <nl> - { <nl> - originalValue = value ; <nl> - currentValue = value ; <nl> - } <nl> - <nl> - public double value ( ) <nl> - { <nl> - return currentValue ; <nl> - } <nl> - <nl> - public void set ( double d ) <nl> - { <nl> - currentValue = d ; <nl> - } <nl> - <nl> - public boolean isModified ( ) <nl> - { <nl> - return originalValue ! = currentValue ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / utils / LatencyTracker . java b / src / java / org / apache / cassandra / utils / LatencyTracker . java <nl> deleted file mode 100644 <nl> index 02a07e9 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / utils / LatencyTracker . java <nl> + + + / dev / null <nl> @ @ - 1 , 82 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - import java . util . concurrent . atomic . AtomicLong ; <nl> - <nl> - public class LatencyTracker <nl> - { <nl> - private final AtomicLong opCount = new AtomicLong ( 0 ) ; <nl> - private final AtomicLong totalLatency = new AtomicLong ( 0 ) ; <nl> - private long lastLatency = 0 ; <nl> - private long lastOpCount = 0 ; <nl> - private final EstimatedHistogram totalHistogram = new EstimatedHistogram ( ) ; <nl> - private final EstimatedHistogram recentHistogram = new EstimatedHistogram ( ) ; <nl> - <nl> - / * * takes nanoseconds * * / <nl> - public void addNano ( long nanos ) <nl> - { <nl> - / / convert to microseconds . 1 millionth <nl> - addMicro ( nanos / 1000 ) ; <nl> - } <nl> - <nl> - public void addMicro ( long micros ) <nl> - { <nl> - opCount . incrementAndGet ( ) ; <nl> - totalLatency . addAndGet ( micros ) ; <nl> - totalHistogram . add ( micros ) ; <nl> - recentHistogram . add ( micros ) ; <nl> - } <nl> - <nl> - public long getOpCount ( ) <nl> - { <nl> - return opCount . get ( ) ; <nl> - } <nl> - <nl> - / * * returns microseconds * / <nl> - public long getTotalLatencyMicros ( ) <nl> - { <nl> - return totalLatency . get ( ) ; <nl> - } <nl> - <nl> - / * * returns microseconds * / <nl> - public double getRecentLatencyMicros ( ) <nl> - { <nl> - long ops = opCount . get ( ) ; <nl> - long n = totalLatency . get ( ) ; <nl> - try <nl> - { <nl> - return ( ( double ) n - lastLatency ) / ( ops - lastOpCount ) ; <nl> - } <nl> - finally <nl> - { <nl> - lastLatency = n ; <nl> - lastOpCount = ops ; <nl> - } <nl> - } <nl> - <nl> - public long [ ] getTotalLatencyHistogramMicros ( ) <nl> - { <nl> - return totalHistogram . getBuckets ( false ) ; <nl> - } <nl> - <nl> - public long [ ] getRecentLatencyHistogramMicros ( ) <nl> - { <nl> - return recentHistogram . getBuckets ( true ) ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / utils / SkipNullRepresenter . java b / src / java / org / apache / cassandra / utils / SkipNullRepresenter . java <nl> deleted file mode 100644 <nl> index 2845bc3 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / utils / SkipNullRepresenter . java <nl> + + + / dev / null <nl> @ @ - 1 , 40 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - import org . yaml . snakeyaml . introspector . Property ; <nl> - import org . yaml . snakeyaml . nodes . NodeTuple ; <nl> - import org . yaml . snakeyaml . nodes . Tag ; <nl> - import org . yaml . snakeyaml . representer . Representer ; <nl> - <nl> - <nl> - / * used to prevent null values from being included in generated YAML * / <nl> - public class SkipNullRepresenter extends Representer <nl> - { <nl> - protected NodeTuple representJavaBeanProperty ( Object javaBean , Property property , Object propertyValue , Tag customTag ) <nl> - { <nl> - if ( propertyValue = = null ) <nl> - { <nl> - return null ; <nl> - } <nl> - else <nl> - { <nl> - return super . representJavaBeanProperty ( javaBean , property , propertyValue , customTag ) ; <nl> - } <nl> - } <nl> - } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 02385df . . b64237e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 52 , 6 + 52 , 7 @ @ <nl> * Don ' t allow prepared marker inside collections ( CASSANDRA - 4890 ) <nl> * Re - allow order by on non - selected columns ( CASSANDRA - 4645 ) <nl> * Bug when composite index is created in a table having collections ( CASSANDRA - 4909 ) <nl> + * log index scan subject in CompositesSearcher ( CASSANDRA - 4904 ) <nl> Merged from 1 . 1 : <nl> * add get [ Row | Key ] CacheEntries to CacheServiceMBean ( CASSANDRA - 4859 ) <nl> * fix get _ paged _ slice to wrap to next row correctly ( CASSANDRA - 4816 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> index ecabf23 . . 63af51b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . cassandra . dht . * ; <nl> + import org . apache . cassandra . thrift . IndexExpression ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> / * * <nl> @ @ - 73 , 6 + 74 , 18 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec <nl> <nl> protected abstract ByteBuffer makeIndexColumnName ( ByteBuffer rowKey , IColumn column ) ; <nl> <nl> + protected abstract AbstractType getExpressionComparator ( ) ; <nl> + <nl> + public String expressionString ( IndexExpression expr ) <nl> + { <nl> + return String . format ( " ' % s . % s % s % s ' " , <nl> + baseCfs . columnFamily , <nl> + getExpressionComparator ( ) . getString ( expr . column _ name ) , <nl> + expr . op , <nl> + baseCfs . metadata . getColumn _ metadata ( ) . get ( expr . column _ name ) . getValidator ( ) . getString ( expr . value ) ) ; <nl> + } <nl> + <nl> + <nl> public void delete ( ByteBuffer rowKey , IColumn column ) <nl> { <nl> if ( column . isMarkedForDelete ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesIndex . java b / src / java / org / apache / cassandra / db / index / composites / CompositesIndex . java <nl> index 552d75f . . f1aa4aa 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesIndex . java <nl> @ @ - 67 , 6 + 67 , 12 @ @ public class CompositesIndex extends AbstractSimplePerColumnSecondaryIndex <nl> return builder . build ( ) ; <nl> } <nl> <nl> + protected AbstractType getExpressionComparator ( ) <nl> + { <nl> + CompositeType baseComparator = ( CompositeType ) baseCfs . getComparator ( ) ; <nl> + return baseComparator . types . get ( prefixSize ) ; <nl> + } <nl> + <nl> @ Override <nl> public boolean indexes ( ByteBuffer name ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java <nl> index 5a08f49 . . caf375b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java <nl> + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . util . * ; <nl> <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . filter . * ; <nl> + import org . apache . cassandra . db . index . AbstractSimplePerColumnSecondaryIndex ; <nl> import org . apache . cassandra . db . index . PerColumnSecondaryIndex ; <nl> import org . apache . cassandra . db . index . SecondaryIndex ; <nl> import org . apache . cassandra . db . index . SecondaryIndexManager ; <nl> @ @ - 208 , 10 + 209 , 9 @ @ public class CompositesSearcher extends SecondaryIndexSearcher <nl> return makeReturn ( currentKey , data ) ; <nl> } <nl> <nl> - / / TODO : broken because we need to extract the component comparator rather than the whole name comparator <nl> - / / if ( logger . isDebugEnabled ( ) ) <nl> - / / logger . debug ( " Scanning index { } starting with { } " , <nl> - / / expressionString ( primary ) , indexComparator . getString ( startPrefix ) ) ; <nl> + if ( logger . isTraceEnabled ( ) & & ( index instanceof AbstractSimplePerColumnSecondaryIndex ) ) <nl> + logger . trace ( " Scanning index { } starting with { } " , <nl> + ( ( AbstractSimplePerColumnSecondaryIndex ) index ) . expressionString ( primary ) , indexComparator . getString ( startPrefix ) ) ; <nl> <nl> QueryFilter indexFilter = QueryFilter . getSliceFilter ( indexKey , <nl> new QueryPath ( index . getIndexCfs ( ) . getColumnFamilyName ( ) ) , <nl> diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> index 7174ffc . . 04c9946 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . db . IColumn ; <nl> import org . apache . cassandra . db . index . AbstractSimplePerColumnSecondaryIndex ; <nl> import org . apache . cassandra . db . index . SecondaryIndexSearcher ; <nl> + import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> <nl> / * * <nl> @ @ - 51 , 4 + 52 , 9 @ @ public class KeysIndex extends AbstractSimplePerColumnSecondaryIndex <nl> { <nl> / / no options used <nl> } <nl> + <nl> + protected AbstractType getExpressionComparator ( ) <nl> + { <nl> + return baseCfs . getComparator ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java b / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java <nl> index 590f629 . . bb03672 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java <nl> + + + b / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . util . * ; <nl> <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . filter . * ; <nl> + import org . apache . cassandra . db . index . AbstractSimplePerColumnSecondaryIndex ; <nl> import org . apache . cassandra . db . index . PerColumnSecondaryIndex ; <nl> import org . apache . cassandra . db . index . SecondaryIndex ; <nl> import org . apache . cassandra . db . index . SecondaryIndexManager ; <nl> @ @ - 68 , 15 + 69 , 6 @ @ public class KeysSearcher extends SecondaryIndexSearcher <nl> return best ; <nl> } <nl> <nl> - private String expressionString ( IndexExpression expr ) <nl> - { <nl> - return String . format ( " ' % s . % s % s % s ' " , <nl> - baseCfs . columnFamily , <nl> - baseCfs . getComparator ( ) . getString ( expr . column _ name ) , <nl> - expr . op , <nl> - baseCfs . metadata . getColumn _ metadata ( ) . get ( expr . column _ name ) . getValidator ( ) . getString ( expr . value ) ) ; <nl> - } <nl> - <nl> public boolean isIndexing ( List < IndexExpression > clause ) <nl> { <nl> return highestSelectivityPredicate ( clause ) ! = null ; <nl> @ @ - 133 , 9 + 125 , 9 @ @ public class KeysSearcher extends SecondaryIndexSearcher <nl> return endOfData ( ) ; <nl> } <nl> <nl> - if ( logger . isTraceEnabled ( ) ) <nl> + if ( logger . isTraceEnabled ( ) & & ( index instanceof AbstractSimplePerColumnSecondaryIndex ) ) <nl> logger . trace ( " Scanning index { } starting with { } " , <nl> - expressionString ( primary ) , index . getBaseCfs ( ) . metadata . getKeyValidator ( ) . getString ( startKey ) ) ; <nl> + ( ( AbstractSimplePerColumnSecondaryIndex ) index ) . expressionString ( primary ) , index . getBaseCfs ( ) . metadata . getKeyValidator ( ) . getString ( startKey ) ) ; <nl> <nl> QueryFilter indexFilter = QueryFilter . getSliceFilter ( indexKey , <nl> new QueryPath ( index . getIndexCfs ( ) . getColumnFamilyName ( ) ) ,

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 450e337 . . 7bab4cc 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 6 @ @ 
 + 3 . 0 
 + * remove unused classes ( CASSANDRA - 7197 ) 
 + 
 2 . 1 . 0 - rc1 
 * Add PowerShell Windows launch scripts ( CASSANDRA - 7001 ) 
 * Make commitlog archive + restore more robust ( CASSANDRA - 6974 ) 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / SimpleAbstractColumnIterator . java b / src / java / org / apache / cassandra / db / columniterator / SimpleAbstractColumnIterator . java 
 deleted file mode 100644 
 index afd268d . . 0000000 
 - - - a / src / java / org / apache / cassandra / db / columniterator / SimpleAbstractColumnIterator . java 
 + + + / dev / null 
 @ @ - 1 , 29 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . db . columniterator ; 
 - 
 - import java . io . IOException ; 
 - 
 - import com . google . common . collect . AbstractIterator ; 
 - 
 - import org . apache . cassandra . db . OnDiskAtom ; 
 - 
 - public abstract class SimpleAbstractColumnIterator extends AbstractIterator < OnDiskAtom > implements OnDiskAtomIterator 
 - { 
 - public void close ( ) throws IOException { } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / db / context / IContext . java b / src / java / org / apache / cassandra / db / context / IContext . java 
 deleted file mode 100644 
 index df484e7 . . 0000000 
 - - - a / src / java / org / apache / cassandra / db / context / IContext . java 
 + + + / dev / null 
 @ @ - 1 , 75 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . db . context ; 
 - 
 - import java . nio . ByteBuffer ; 
 - 
 - import org . apache . cassandra . utils . memory . AbstractAllocator ; 
 - 
 - / * * 
 - * An opaque commutative context . 
 - * 
 - * Maintains a ByteBuffer context that represents a partitioned commutative value . 
 - * / 
 - public interface IContext 
 - { 
 - public static enum ContextRelationship 
 - { 
 - EQUAL , 
 - GREATER _ THAN , 
 - LESS _ THAN , 
 - DISJOINT 
 - } ; 
 - 
 - / * * 
 - * Determine the relationship between two contexts . 
 - * 
 - * EQUAL : Equal set of nodes and every count is equal . 
 - * GREATER _ THAN : Superset of nodes and every count is equal or greater than its corollary . 
 - * LESS _ THAN : Subset of nodes and every count is equal or less than its corollary . 
 - * DISJOINT : Node sets are not equal and / or counts are not all greater or less than . 
 - * 
 - * @ param left 
 - * context . 
 - * @ param right 
 - * context . 
 - * @ return the ContextRelationship between the contexts . 
 - * / 
 - public ContextRelationship diff ( ByteBuffer left , ByteBuffer right ) ; 
 - 
 - / * * 
 - * Return a context w / an aggregated count for each node id . 
 - * 
 - * @ param left 
 - * context . 
 - * @ param right 
 - * context . 
 - * @ param allocator 
 - * an allocator to allocate the new context from . 
 - * / 
 - public ByteBuffer merge ( ByteBuffer left , ByteBuffer right , AbstractAllocator allocator ) ; 
 - 
 - / * * 
 - * Human - readable String from context . 
 - * 
 - * @ param context 
 - * context . 
 - * @ return a human - readable String of the context . 
 - * / 
 - public String toString ( ByteBuffer context ) ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / gms / IFailureNotification . java b / src / java / org / apache / cassandra / gms / IFailureNotification . java 
 deleted file mode 100644 
 index 7e1c955 . . 0000000 
 - - - a / src / java / org / apache / cassandra / gms / IFailureNotification . java 
 + + + / dev / null 
 @ @ - 1 , 27 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . gms ; 
 - 
 - import java . net . InetAddress ; 
 - 
 - public interface IFailureNotification 
 - { 
 - public void convict ( InetAddress ep ) ; 
 - 
 - public void revive ( InetAddress ep ) ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java b / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java 
 index 59a8843 . . abf8df2 100644 
 - - - a / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java 
 + + + b / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java 
 @ @ - 43 , 7 + 43 , 7 @ @ import java . util . Set ; 
 import java . util . Collection ; 
 import java . util . concurrent . * ; 
 
 - public class PendingRangeCalculatorService extends PendingRangeCalculatorServiceMBean 
 + public class PendingRangeCalculatorService 
 { 
 public static final PendingRangeCalculatorService instance = new PendingRangeCalculatorService ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / service / PendingRangeCalculatorServiceMBean . java b / src / java / org / apache / cassandra / service / PendingRangeCalculatorServiceMBean . java 
 deleted file mode 100644 
 index c9b04f0 . . 0000000 
 - - - a / src / java / org / apache / cassandra / service / PendingRangeCalculatorServiceMBean . java 
 + + + / dev / null 
 @ @ - 1 , 23 + 0 , 0 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . service ; 
 - 
 - public class PendingRangeCalculatorServiceMBean 
 - { 
 - } 
 diff - - git a / src / java / org / apache / cassandra / thrift / RequestType . java b / src / java / org / apache / cassandra / thrift / RequestType . java 
 deleted file mode 100644 
 index 0d01362 . . 0000000 
 - - - a / src / java / org / apache / cassandra / thrift / RequestType . java 
 + + + / dev / null 
 @ @ - 1 , 24 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . thrift ; 
 - 
 - public enum RequestType 
 - { 
 - READ , 
 - WRITE 
 - } 
 diff - - git a / src / java / org / apache / cassandra / utils / AtomicLongArrayUpdater . java b / src / java / org / apache / cassandra / utils / AtomicLongArrayUpdater . java 
 deleted file mode 100644 
 index c797331 . . 0000000 
 - - - a / src / java / org / apache / cassandra / utils / AtomicLongArrayUpdater . java 
 + + + / dev / null 
 @ @ - 1 , 91 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , 
 - * software distributed under the License is distributed on an 
 - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 - * KIND , either express or implied . See the License for the 
 - * specific language governing permissions and limitations 
 - * under the License . 
 - * / 
 - package org . apache . cassandra . utils ; 
 - 
 - import sun . misc . Unsafe ; 
 - 
 - import java . lang . reflect . Field ; 
 - import java . security . AccessController ; 
 - import java . security . PrivilegedAction ; 
 - 
 - public final class AtomicLongArrayUpdater { 
 - 
 - private static final long offset ; 
 - private static final int shift ; 
 - 
 - static final Unsafe theUnsafe ; 
 - 
 - static { 
 - theUnsafe = ( Unsafe ) AccessController . doPrivileged ( 
 - new PrivilegedAction < Object > ( ) 
 - { 
 - @ Override 
 - public Object run ( ) 
 - { 
 - try 
 - { 
 - Field f = Unsafe . class . getDeclaredField ( " theUnsafe " ) ; 
 - f . setAccessible ( true ) ; 
 - return f . get ( null ) ; 
 - } catch ( NoSuchFieldException e ) 
 - { 
 - / / It doesn ' t matter what we throw ; 
 - / / it ' s swallowed in getBest ( ) . 
 - throw new Error ( ) ; 
 - } catch ( IllegalAccessException e ) 
 - { 
 - throw new Error ( ) ; 
 - } 
 - } 
 - } ) ; 
 - Class < ? > clazz = long [ ] . class ; 
 - offset = theUnsafe . arrayBaseOffset ( clazz ) ; 
 - shift = shift ( theUnsafe . arrayIndexScale ( clazz ) ) ; 
 - } 
 - 
 - private static int shift ( int scale ) 
 - { 
 - if ( Integer . bitCount ( scale ) ! = 1 ) 
 - throw new IllegalStateException ( ) ; 
 - return Integer . bitCount ( scale - 1 ) ; 
 - } 
 - 
 - public AtomicLongArrayUpdater ( ) { } 
 - 
 - public final boolean compareAndSet ( Object trg , int i , long exp , long upd ) { 
 - return theUnsafe . compareAndSwapLong ( trg , offset + ( i < < shift ) , exp , upd ) ; 
 - } 
 - 
 - public final void putVolatile ( Object trg , int i , long val ) { 
 - theUnsafe . putLongVolatile ( trg , offset + ( i < < shift ) , val ) ; 
 - } 
 - 
 - public final void putOrdered ( Object trg , int i , long val ) { 
 - theUnsafe . putOrderedLong ( trg , offset + ( i < < shift ) , val ) ; 
 - } 
 - 
 - public final long get ( Object trg , int i ) { 
 - return theUnsafe . getLong ( trg , offset + ( i < < shift ) ) ; 
 - } 
 - 
 - public final long getVolatile ( Object trg , int i ) { 
 - return theUnsafe . getLongVolatile ( trg , offset + ( i < < shift ) ) ; 
 - } 
 - 
 - } 
 diff - - git a / src / java / org / apache / cassandra / utils / DefaultDouble . java b / src / java / org / apache / cassandra / utils / DefaultDouble . java 
 deleted file mode 100644 
 index 236e177 . . 0000000 
 - - - a / src / java / org / apache / cassandra / utils / DefaultDouble . java 
 + + + / dev / null 
 @ @ - 1 , 46 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . utils ; 
 - 
 - 
 - public class DefaultDouble 
 - { 
 - private final double originalValue ; 
 - private double currentValue ; 
 - 
 - public DefaultDouble ( double value ) 
 - { 
 - originalValue = value ; 
 - currentValue = value ; 
 - } 
 - 
 - public double value ( ) 
 - { 
 - return currentValue ; 
 - } 
 - 
 - public void set ( double d ) 
 - { 
 - currentValue = d ; 
 - } 
 - 
 - public boolean isModified ( ) 
 - { 
 - return originalValue ! = currentValue ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / utils / LatencyTracker . java b / src / java / org / apache / cassandra / utils / LatencyTracker . java 
 deleted file mode 100644 
 index 02a07e9 . . 0000000 
 - - - a / src / java / org / apache / cassandra / utils / LatencyTracker . java 
 + + + / dev / null 
 @ @ - 1 , 82 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . utils ; 
 - 
 - import java . util . concurrent . atomic . AtomicLong ; 
 - 
 - public class LatencyTracker 
 - { 
 - private final AtomicLong opCount = new AtomicLong ( 0 ) ; 
 - private final AtomicLong totalLatency = new AtomicLong ( 0 ) ; 
 - private long lastLatency = 0 ; 
 - private long lastOpCount = 0 ; 
 - private final EstimatedHistogram totalHistogram = new EstimatedHistogram ( ) ; 
 - private final EstimatedHistogram recentHistogram = new EstimatedHistogram ( ) ; 
 - 
 - / * * takes nanoseconds * * / 
 - public void addNano ( long nanos ) 
 - { 
 - / / convert to microseconds . 1 millionth 
 - addMicro ( nanos / 1000 ) ; 
 - } 
 - 
 - public void addMicro ( long micros ) 
 - { 
 - opCount . incrementAndGet ( ) ; 
 - totalLatency . addAndGet ( micros ) ; 
 - totalHistogram . add ( micros ) ; 
 - recentHistogram . add ( micros ) ; 
 - } 
 - 
 - public long getOpCount ( ) 
 - { 
 - return opCount . get ( ) ; 
 - } 
 - 
 - / * * returns microseconds * / 
 - public long getTotalLatencyMicros ( ) 
 - { 
 - return totalLatency . get ( ) ; 
 - } 
 - 
 - / * * returns microseconds * / 
 - public double getRecentLatencyMicros ( ) 
 - { 
 - long ops = opCount . get ( ) ; 
 - long n = totalLatency . get ( ) ; 
 - try 
 - { 
 - return ( ( double ) n - lastLatency ) / ( ops - lastOpCount ) ; 
 - } 
 - finally 
 - { 
 - lastLatency = n ; 
 - lastOpCount = ops ; 
 - } 
 - } 
 - 
 - public long [ ] getTotalLatencyHistogramMicros ( ) 
 - { 
 - return totalHistogram . getBuckets ( false ) ; 
 - } 
 - 
 - public long [ ] getRecentLatencyHistogramMicros ( ) 
 - { 
 - return recentHistogram . getBuckets ( true ) ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / utils / SkipNullRepresenter . java b / src / java / org / apache / cassandra / utils / SkipNullRepresenter . java 
 deleted file mode 100644 
 index 2845bc3 . . 0000000 
 - - - a / src / java / org / apache / cassandra / utils / SkipNullRepresenter . java 
 + + + / dev / null 
 @ @ - 1 , 40 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . utils ; 
 - 
 - import org . yaml . snakeyaml . introspector . Property ; 
 - import org . yaml . snakeyaml . nodes . NodeTuple ; 
 - import org . yaml . snakeyaml . nodes . Tag ; 
 - import org . yaml . snakeyaml . representer . Representer ; 
 - 
 - 
 - / * used to prevent null values from being included in generated YAML * / 
 - public class SkipNullRepresenter extends Representer 
 - { 
 - protected NodeTuple representJavaBeanProperty ( Object javaBean , Property property , Object propertyValue , Tag customTag ) 
 - { 
 - if ( propertyValue = = null ) 
 - { 
 - return null ; 
 - } 
 - else 
 - { 
 - return super . representJavaBeanProperty ( javaBean , property , propertyValue , customTag ) ; 
 - } 
 - } 
 - } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 02385df . . b64237e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 52 , 6 + 52 , 7 @ @ 
 * Don ' t allow prepared marker inside collections ( CASSANDRA - 4890 ) 
 * Re - allow order by on non - selected columns ( CASSANDRA - 4645 ) 
 * Bug when composite index is created in a table having collections ( CASSANDRA - 4909 ) 
 + * log index scan subject in CompositesSearcher ( CASSANDRA - 4904 ) 
 Merged from 1 . 1 : 
 * add get [ Row | Key ] CacheEntries to CacheServiceMBean ( CASSANDRA - 4859 ) 
 * fix get _ paged _ slice to wrap to next row correctly ( CASSANDRA - 4816 ) 
 diff - - git a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 index ecabf23 . . 63af51b 100644 
 - - - a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . marshal . * ; 
 import org . apache . cassandra . dht . * ; 
 + import org . apache . cassandra . thrift . IndexExpression ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 / * * 
 @ @ - 73 , 6 + 74 , 18 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec 
 
 protected abstract ByteBuffer makeIndexColumnName ( ByteBuffer rowKey , IColumn column ) ; 
 
 + protected abstract AbstractType getExpressionComparator ( ) ; 
 + 
 + public String expressionString ( IndexExpression expr ) 
 + { 
 + return String . format ( " ' % s . % s % s % s ' " , 
 + baseCfs . columnFamily , 
 + getExpressionComparator ( ) . getString ( expr . column _ name ) , 
 + expr . op , 
 + baseCfs . metadata . getColumn _ metadata ( ) . get ( expr . column _ name ) . getValidator ( ) . getString ( expr . value ) ) ; 
 + } 
 + 
 + 
 public void delete ( ByteBuffer rowKey , IColumn column ) 
 { 
 if ( column . isMarkedForDelete ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesIndex . java b / src / java / org / apache / cassandra / db / index / composites / CompositesIndex . java 
 index 552d75f . . f1aa4aa 100644 
 - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesIndex . java 
 @ @ - 67 , 6 + 67 , 12 @ @ public class CompositesIndex extends AbstractSimplePerColumnSecondaryIndex 
 return builder . build ( ) ; 
 } 
 
 + protected AbstractType getExpressionComparator ( ) 
 + { 
 + CompositeType baseComparator = ( CompositeType ) baseCfs . getComparator ( ) ; 
 + return baseComparator . types . get ( prefixSize ) ; 
 + } 
 + 
 @ Override 
 public boolean indexes ( ByteBuffer name ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java 
 index 5a08f49 . . caf375b 100644 
 - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java 
 + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . util . * ; 
 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . filter . * ; 
 + import org . apache . cassandra . db . index . AbstractSimplePerColumnSecondaryIndex ; 
 import org . apache . cassandra . db . index . PerColumnSecondaryIndex ; 
 import org . apache . cassandra . db . index . SecondaryIndex ; 
 import org . apache . cassandra . db . index . SecondaryIndexManager ; 
 @ @ - 208 , 10 + 209 , 9 @ @ public class CompositesSearcher extends SecondaryIndexSearcher 
 return makeReturn ( currentKey , data ) ; 
 } 
 
 - / / TODO : broken because we need to extract the component comparator rather than the whole name comparator 
 - / / if ( logger . isDebugEnabled ( ) ) 
 - / / logger . debug ( " Scanning index { } starting with { } " , 
 - / / expressionString ( primary ) , indexComparator . getString ( startPrefix ) ) ; 
 + if ( logger . isTraceEnabled ( ) & & ( index instanceof AbstractSimplePerColumnSecondaryIndex ) ) 
 + logger . trace ( " Scanning index { } starting with { } " , 
 + ( ( AbstractSimplePerColumnSecondaryIndex ) index ) . expressionString ( primary ) , indexComparator . getString ( startPrefix ) ) ; 
 
 QueryFilter indexFilter = QueryFilter . getSliceFilter ( indexKey , 
 new QueryPath ( index . getIndexCfs ( ) . getColumnFamilyName ( ) ) , 
 diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 index 7174ffc . . 04c9946 100644 
 - - - a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . db . IColumn ; 
 import org . apache . cassandra . db . index . AbstractSimplePerColumnSecondaryIndex ; 
 import org . apache . cassandra . db . index . SecondaryIndexSearcher ; 
 + import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 
 / * * 
 @ @ - 51 , 4 + 52 , 9 @ @ public class KeysIndex extends AbstractSimplePerColumnSecondaryIndex 
 { 
 / / no options used 
 } 
 + 
 + protected AbstractType getExpressionComparator ( ) 
 + { 
 + return baseCfs . getComparator ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java b / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java 
 index 590f629 . . bb03672 100644 
 - - - a / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java 
 + + + b / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . util . * ; 
 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . filter . * ; 
 + import org . apache . cassandra . db . index . AbstractSimplePerColumnSecondaryIndex ; 
 import org . apache . cassandra . db . index . PerColumnSecondaryIndex ; 
 import org . apache . cassandra . db . index . SecondaryIndex ; 
 import org . apache . cassandra . db . index . SecondaryIndexManager ; 
 @ @ - 68 , 15 + 69 , 6 @ @ public class KeysSearcher extends SecondaryIndexSearcher 
 return best ; 
 } 
 
 - private String expressionString ( IndexExpression expr ) 
 - { 
 - return String . format ( " ' % s . % s % s % s ' " , 
 - baseCfs . columnFamily , 
 - baseCfs . getComparator ( ) . getString ( expr . column _ name ) , 
 - expr . op , 
 - baseCfs . metadata . getColumn _ metadata ( ) . get ( expr . column _ name ) . getValidator ( ) . getString ( expr . value ) ) ; 
 - } 
 - 
 public boolean isIndexing ( List < IndexExpression > clause ) 
 { 
 return highestSelectivityPredicate ( clause ) ! = null ; 
 @ @ - 133 , 9 + 125 , 9 @ @ public class KeysSearcher extends SecondaryIndexSearcher 
 return endOfData ( ) ; 
 } 
 
 - if ( logger . isTraceEnabled ( ) ) 
 + if ( logger . isTraceEnabled ( ) & & ( index instanceof AbstractSimplePerColumnSecondaryIndex ) ) 
 logger . trace ( " Scanning index { } starting with { } " , 
 - expressionString ( primary ) , index . getBaseCfs ( ) . metadata . getKeyValidator ( ) . getString ( startKey ) ) ; 
 + ( ( AbstractSimplePerColumnSecondaryIndex ) index ) . expressionString ( primary ) , index . getBaseCfs ( ) . metadata . getKeyValidator ( ) . getString ( startKey ) ) ; 
 
 QueryFilter indexFilter = QueryFilter . getSliceFilter ( indexKey , 
 new QueryPath ( index . getIndexCfs ( ) . getColumnFamilyName ( ) ) ,
