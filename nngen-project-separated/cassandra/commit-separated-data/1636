BLEU SCORE: 0.03283637368030199

TEST MSG: Fix string encoding of JSON map keys
GENERATED MSG: range query support

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / Json . java b / src / java / org / apache / cassandra / cql3 / Json . java <nl> index 905f6e0 . . e4bce29 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Json . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Json . java <nl> @ @ - 39 , 6 + 39 , 18 @ @ public class Json <nl> <nl> public static final ColumnIdentifier JSON _ COLUMN _ ID = new ColumnIdentifier ( " [ json ] " , true ) ; <nl> <nl> + public static Object decodeJson ( String json ) <nl> + { <nl> + try <nl> + { <nl> + return JSON _ OBJECT _ MAPPER . readValue ( json , Object . class ) ; <nl> + } <nl> + catch ( IOException exc ) <nl> + { <nl> + throw new MarshalException ( " Error decoding JSON string : " + exc . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> public interface Raw <nl> { <nl> public Prepared prepareAndCollectMarkers ( CFMetaData metadata , Collection < ColumnDefinition > receivers , VariableSpecifications boundNames ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / ListType . java b / src / java / org / apache / cassandra / db / marshal / ListType . java <nl> index bae8043 . . 03f39d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / ListType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / ListType . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db . marshal ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> + import org . apache . cassandra . cql3 . Json ; <nl> import org . apache . cassandra . cql3 . Lists ; <nl> import org . apache . cassandra . cql3 . Term ; <nl> import org . apache . cassandra . db . Cell ; <nl> @ @ - 180 , 6 + 181 , 9 @ @ public class ListType < T > extends CollectionType < List < T > > <nl> @ Override <nl> public Term fromJSONObject ( Object parsed ) throws MarshalException <nl> { <nl> + if ( parsed instanceof String ) <nl> + parsed = Json . decodeJson ( ( String ) parsed ) ; <nl> + <nl> if ( ! ( parsed instanceof List ) ) <nl> throw new MarshalException ( String . format ( <nl> " Expected a list , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / MapType . java b / src / java / org / apache / cassandra / db / marshal / MapType . java <nl> index 3ed3dd1 . . 983710b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / MapType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / MapType . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db . marshal ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> + import org . apache . cassandra . cql3 . Json ; <nl> import org . apache . cassandra . cql3 . Maps ; <nl> import org . apache . cassandra . cql3 . Term ; <nl> import org . apache . cassandra . db . Cell ; <nl> @ @ - 200 , 6 + 201 , 9 @ @ public class MapType < K , V > extends CollectionType < Map < K , V > > <nl> @ Override <nl> public Term fromJSONObject ( Object parsed ) throws MarshalException <nl> { <nl> + if ( parsed instanceof String ) <nl> + parsed = Json . decodeJson ( ( String ) parsed ) ; <nl> + <nl> if ( ! ( parsed instanceof Map ) ) <nl> throw new MarshalException ( String . format ( <nl> " Expected a map , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; <nl> @ @ - 229 , 7 + 233 , 13 @ @ public class MapType < K , V > extends CollectionType < Map < K , V > > <nl> if ( i > 0 ) <nl> sb . append ( " , " ) ; <nl> <nl> - sb . append ( keys . toJSONString ( CollectionSerializer . readValue ( buffer , protocolVersion ) , protocolVersion ) ) ; <nl> + / / map keys must be JSON strings , so convert non - string keys to strings <nl> + String key = keys . toJSONString ( CollectionSerializer . readValue ( buffer , protocolVersion ) , protocolVersion ) ; <nl> + if ( key . startsWith ( " \ " " ) ) <nl> + sb . append ( key ) ; <nl> + else <nl> + sb . append ( ' " ' ) . append ( Json . JSON _ STRING _ ENCODER . quoteAsString ( key ) ) . append ( ' " ' ) ; <nl> + <nl> sb . append ( " : " ) ; <nl> sb . append ( values . toJSONString ( CollectionSerializer . readValue ( buffer , protocolVersion ) , protocolVersion ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / SetType . java b / src / java / org / apache / cassandra / db / marshal / SetType . java <nl> index 372555a . . 78aac25 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / SetType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / SetType . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db . marshal ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> + import org . apache . cassandra . cql3 . Json ; <nl> import org . apache . cassandra . cql3 . Sets ; <nl> import org . apache . cassandra . cql3 . Term ; <nl> import org . apache . cassandra . db . Cell ; <nl> @ @ - 154 , 6 + 155 , 9 @ @ public class SetType < T > extends CollectionType < Set < T > > <nl> @ Override <nl> public Term fromJSONObject ( Object parsed ) throws MarshalException <nl> { <nl> + if ( parsed instanceof String ) <nl> + parsed = Json . decodeJson ( ( String ) parsed ) ; <nl> + <nl> if ( ! ( parsed instanceof List ) ) <nl> throw new MarshalException ( String . format ( <nl> " Expected a list ( representing a set ) , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / TupleType . java b / src / java / org / apache / cassandra / db / marshal / TupleType . java <nl> index 6093137 . . e874cb6 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / TupleType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / TupleType . java <nl> @ @ - 25 , 10 + 25 , 7 @ @ import java . util . List ; <nl> <nl> import com . google . common . base . Objects ; <nl> <nl> - import org . apache . cassandra . cql3 . CQL3Type ; <nl> - import org . apache . cassandra . cql3 . Constants ; <nl> - import org . apache . cassandra . cql3 . Term ; <nl> - import org . apache . cassandra . cql3 . Tuples ; <nl> + import org . apache . cassandra . cql3 . * ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . exceptions . SyntaxException ; <nl> import org . apache . cassandra . serializers . * ; <nl> @ @ - 233 , 6 + 230 , 9 @ @ public class TupleType extends AbstractType < ByteBuffer > <nl> @ Override <nl> public Term fromJSONObject ( Object parsed ) throws MarshalException <nl> { <nl> + if ( parsed instanceof String ) <nl> + parsed = Json . decodeJson ( ( String ) parsed ) ; <nl> + <nl> if ( ! ( parsed instanceof List ) ) <nl> throw new MarshalException ( String . format ( <nl> " Expected a list representation of a tuple , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / UserType . java b / src / java / org / apache / cassandra / db / marshal / UserType . java <nl> index 45c5f0e . . 5879d6b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / UserType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / UserType . java <nl> @ @ - 145 , 6 + 145 , 9 @ @ public class UserType extends TupleType <nl> @ Override <nl> public Term fromJSONObject ( Object parsed ) throws MarshalException <nl> { <nl> + if ( parsed instanceof String ) <nl> + parsed = Json . decodeJson ( ( String ) parsed ) ; <nl> + <nl> if ( ! ( parsed instanceof Map ) ) <nl> throw new MarshalException ( String . format ( <nl> " Expected a map , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / JsonTest . java b / test / unit / org / apache / cassandra / cql3 / JsonTest . java <nl> index 47d6ddd . . 305502e 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / JsonTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / JsonTest . java <nl> @ @ - 843 , 6 + 843 , 93 @ @ public class JsonTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> + public void testInsertJsonSyntaxWithNonNativeMapKeys ( ) throws Throwable <nl> + { <nl> + / / JSON doesn ' t allow non - string keys , so we accept string representations of any type as map keys and <nl> + / / return maps with string keys when necessary . <nl> + <nl> + String typeName = createType ( " CREATE TYPE % s ( a int ) " ) ; <nl> + createTable ( " CREATE TABLE % s ( " + <nl> + " k int PRIMARY KEY , " + <nl> + " intmap map < int , boolean > , " + <nl> + " bigintmap map < bigint , boolean > , " + <nl> + " varintmap map < varint , boolean > , " + <nl> + " booleanmap map < boolean , boolean > , " + <nl> + " floatmap map < float , boolean > , " + <nl> + " doublemap map < double , boolean > , " + <nl> + " decimalmap map < decimal , boolean > , " + <nl> + " tuplemap map < frozen < tuple < int , text > > , boolean > , " + <nl> + " udtmap map < frozen < " + typeName + " > , boolean > , " + <nl> + " setmap map < frozen < set < int > > , boolean > , " + <nl> + " listmap map < frozen < list < int > > , boolean > , " + <nl> + " textsetmap map < frozen < set < text > > , boolean > , " + <nl> + " nestedsetmap map < frozen < map < set < text > , text > > , boolean > , " + <nl> + " frozensetmap frozen < map < set < int > , boolean > > ) " ) ; <nl> + <nl> + / / int keys <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " intmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON k , intmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " intmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ) ; <nl> + <nl> + / / bigint keys <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " bigintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON k , bigintmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " bigintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ) ; <nl> + <nl> + / / varint keys <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " varintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON k , varintmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " varintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ) ; <nl> + <nl> + / / boolean keys <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " booleanmap \ " : { \ " true \ " : true , \ " false \ " : false } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON k , booleanmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " booleanmap \ " : { \ " false \ " : false , \ " true \ " : true } } " ) ) ; <nl> + <nl> + / / float keys <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " floatmap \ " : { \ " 1 . 23 \ " : true , \ " 4 . 56 \ " : false } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON k , floatmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " floatmap \ " : { \ " 1 . 23 \ " : true , \ " 4 . 56 \ " : false } } " ) ) ; <nl> + <nl> + / / double keys <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " doublemap \ " : { \ " 1 . 23 \ " : true , \ " 4 . 56 \ " : false } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON k , doublemap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " doublemap \ " : { \ " 1 . 23 \ " : true , \ " 4 . 56 \ " : false } } " ) ) ; <nl> + <nl> + / / decimal keys <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " decimalmap \ " : { \ " 1 . 23 \ " : true , \ " 4 . 56 \ " : false } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON k , decimalmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " decimalmap \ " : { \ " 1 . 23 \ " : true , \ " 4 . 56 \ " : false } } " ) ) ; <nl> + <nl> + / / tuple < int , text > keys <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " tuplemap \ " : { \ " [ 0 , \ \ \ " a \ \ \ " ] \ " : true , \ " [ 1 , \ \ \ " b \ \ \ " ] \ " : false } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON k , tuplemap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " tuplemap \ " : { \ " [ 0 , \ \ \ " a \ \ \ " ] \ " : true , \ " [ 1 , \ \ \ " b \ \ \ " ] \ " : false } } " ) ) ; <nl> + <nl> + / / UDT keys <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " udtmap \ " : { \ " { \ \ \ " a \ \ \ " : 0 } \ " : true , \ " { \ \ \ " a \ \ \ " : 1 } \ " : false } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON k , udtmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " udtmap \ " : { \ " { \ \ \ " a \ \ \ " : 0 } \ " : true , \ " { \ \ \ " a \ \ \ " : 1 } \ " : false } } " ) ) ; <nl> + <nl> + / / set < int > keys <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " setmap \ " : { \ " [ 0 , 1 , 2 ] \ " : true , \ " [ 3 , 4 , 5 ] \ " : false } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON k , setmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " setmap \ " : { \ " [ 0 , 1 , 2 ] \ " : true , \ " [ 3 , 4 , 5 ] \ " : false } } " ) ) ; <nl> + <nl> + / / list < int > keys <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " listmap \ " : { \ " [ 0 , 1 , 2 ] \ " : true , \ " [ 3 , 4 , 5 ] \ " : false } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON k , listmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " listmap \ " : { \ " [ 0 , 1 , 2 ] \ " : true , \ " [ 3 , 4 , 5 ] \ " : false } } " ) ) ; <nl> + <nl> + / / set < text > keys <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " textsetmap \ " : { \ " [ \ \ \ " 0 \ \ \ " , \ \ \ " 1 \ \ \ " ] \ " : true , \ " [ \ \ \ " 3 \ \ \ " , \ \ \ " 4 \ \ \ " ] \ " : false } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON k , textsetmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " textsetmap \ " : { \ " [ \ \ \ " 0 \ \ \ " , \ \ \ " 1 \ \ \ " ] \ " : true , \ " [ \ \ \ " 3 \ \ \ " , \ \ \ " 4 \ \ \ " ] \ " : false } } " ) ) ; <nl> + <nl> + / / map < set < text > , text > keys <nl> + String innerKey1 = " [ \ " 0 \ " , \ " 1 \ " ] " ; <nl> + String fullKey1 = String . format ( " { \ " % s \ " : \ " % s \ " } " , new String ( Json . JSON _ STRING _ ENCODER . quoteAsString ( innerKey1 ) ) , " a " ) ; <nl> + String stringKey1 = new String ( Json . JSON _ STRING _ ENCODER . quoteAsString ( fullKey1 ) ) ; <nl> + String innerKey2 = " [ \ " 3 \ " , \ " 4 \ " ] " ; <nl> + String fullKey2 = String . format ( " { \ " % s \ " : \ " % s \ " } " , new String ( Json . JSON _ STRING _ ENCODER . quoteAsString ( innerKey2 ) ) , " b " ) ; <nl> + String stringKey2 = new String ( Json . JSON _ STRING _ ENCODER . quoteAsString ( fullKey2 ) ) ; <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " nestedsetmap \ " : { \ " " + stringKey1 + " \ " : true , \ " " + stringKey2 + " \ " : false } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON k , nestedsetmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " nestedsetmap \ " : { \ " " + stringKey1 + " \ " : true , \ " " + stringKey2 + " \ " : false } } " ) ) ; <nl> + <nl> + / / set < int > keys in a frozen map <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " frozensetmap \ " : { \ " [ 0 , 1 , 2 ] \ " : true , \ " [ 3 , 4 , 5 ] \ " : false } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON k , frozensetmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " frozensetmap \ " : { \ " [ 0 , 1 , 2 ] \ " : true , \ " [ 3 , 4 , 5 ] \ " : false } } " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testInsertJsonSyntaxWithTuplesAndUDTs ( ) throws Throwable <nl> { <nl> String typeName = createType ( " CREATE TYPE % s ( a int , b frozen < set < int > > , c tuple < int , int > ) " ) ;
NEAREST DIFF (one line): diff - - git a / src / org / apache / cassandra / config / DatabaseDescriptor . java b / src / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 683009c . . 73cf3a6 100644 <nl> - - - a / src / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 18 , 21 + 18 , 24 @ @ <nl> <nl> package org . apache . cassandra . config ; <nl> <nl> - import java . util . * ; <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . util . ArrayList ; <nl> + import java . util . HashMap ; <nl> + import java . util . HashSet ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> - import java . io . * ; <nl> <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> + import org . apache . cassandra . db . SystemTable ; <nl> import org . apache . cassandra . db . Table ; <nl> import org . apache . cassandra . db . TypeInfo ; <nl> - import org . apache . cassandra . db . DBManager ; <nl> - import org . apache . cassandra . db . SystemTable ; <nl> - import org . apache . cassandra . db . Table . TableMetadata ; <nl> import org . apache . cassandra . utils . FileUtils ; <nl> import org . apache . cassandra . utils . XMLUtils ; <nl> import org . w3c . dom . Node ; <nl> import org . w3c . dom . NodeList ; <nl> - import org . apache . cassandra . io . * ; <nl> <nl> <nl> / * * <nl> @ @ - 306 , 6 + 309 , 9 @ @ public class DatabaseDescriptor <nl> / * Read the table related stuff from config * / <nl> NodeList tables = xmlUtils . getRequestedNodeList ( " / Storage / Tables / Table " ) ; <nl> int size = tables . getLength ( ) ; <nl> + if ( size = = 0 ) { <nl> + throw new UnsupportedOperationException ( " A Table must be configured " ) ; <nl> + } <nl> for ( int i = 0 ; i < size ; + + i ) <nl> { <nl> Node table = tables . item ( i ) ; <nl> @ @ - 785 , 4 + 791 , 9 @ @ public class DatabaseDescriptor <nl> { <nl> return tableToCFMetaDataMap _ ; <nl> } <nl> + <nl> + public static String getTableName ( ) <nl> + { <nl> + return tables _ . get ( 0 ) ; <nl> + } <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / ColumnFamily . java b / src / org / apache / cassandra / db / ColumnFamily . java <nl> index 51ac744 . . a2ac3a2 100644 <nl> - - - a / src / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 288 , 7 + 288 , 7 @ @ public final class ColumnFamily <nl> return columns _ . getSortedColumns ( ) ; <nl> } <nl> <nl> - Map < String , IColumn > getColumns ( ) <nl> + public Map < String , IColumn > getColumns ( ) <nl> { <nl> return columns _ . getColumns ( ) ; <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / ColumnFamilyStore . java b / src / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index be7c245 . . 28bb3f7 100644 <nl> - - - a / src / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1384 , 4 + 1384 , 14 @ @ public class ColumnFamilyStore <nl> { <nl> memtable _ . get ( ) . flushOnRecovery ( ) ; <nl> } <nl> + <nl> + public Object getMemtable ( ) <nl> + { <nl> + return memtable _ . get ( ) ; <nl> + } <nl> + <nl> + public Set < String > getSSTableFilenames ( ) <nl> + { <nl> + return Collections . unmodifiableSet ( ssTables _ ) ; <nl> + } <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / Memtable . java b / src / org / apache / cassandra / db / Memtable . java <nl> index 2bdad37 . . 567b829 100644 <nl> - - - a / src / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / org / apache / cassandra / db / Memtable . java <nl> @ @ - 26 , 6 + 26 , 8 @ @ import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> + import java . util . Iterator ; <nl> + import java . util . PriorityQueue ; <nl> import java . util . concurrent . Callable ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . ExecutorService ; <nl> @ @ - 45 , 6 + 47 , 7 @ @ import org . apache . cassandra . io . DataOutputBuffer ; <nl> import org . apache . cassandra . io . SSTable ; <nl> import org . apache . cassandra . utils . BloomFilter ; <nl> import org . apache . cassandra . utils . LogUtil ; <nl> + import org . apache . cassandra . utils . DestructivePQIterator ; <nl> <nl> / * * <nl> * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) <nl> @ @ - 419 , 4 + 422 , 9 @ @ public class Memtable implements MemtableMBean , Comparable < Memtable > <nl> columnFamilies _ . clear ( ) ; <nl> } <nl> <nl> + public Iterator < String > sortedKeyIterator ( ) <nl> + { <nl> + return new DestructivePQIterator < String > ( new PriorityQueue < String > ( columnFamilies _ . keySet ( ) ) ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / MemtableManager . java b / src / org / apache / cassandra / db / MemtableManager . java <nl> index 997bbd3 . . 54242d1 100644 <nl> - - - a / src / org / apache / cassandra / db / MemtableManager . java <nl> + + + b / src / org / apache / cassandra / db / MemtableManager . java <nl> @ @ - 40 , 7 + 40 , 7 @ @ public class MemtableManager <nl> private static Lock lock _ = new ReentrantLock ( ) ; <nl> private static Logger logger _ = Logger . getLogger ( MemtableManager . class ) ; <nl> private ReentrantReadWriteLock rwLock _ = new ReentrantReadWriteLock ( true ) ; <nl> - static MemtableManager instance ( ) <nl> + public static MemtableManager instance ( ) <nl> { <nl> if ( instance _ = = null ) <nl> { <nl> @ @ - 157 , 7 + 157 , 22 @ @ public class MemtableManager <nl> 	 } <nl> } <nl> <nl> - <nl> - <nl> + public List < Memtable > getUnflushedMemtables ( String cfName ) <nl> + { <nl> + rwLock _ . readLock ( ) . lock ( ) ; <nl> + try <nl> + { <nl> + List < Memtable > memtables = history _ . get ( cfName ) ; <nl> + if ( memtables ! = null ) <nl> + { <nl> + return new ArrayList < Memtable > ( memtables ) ; <nl> + } <nl> + return Arrays . asList ( new Memtable [ 0 ] ) ; <nl> + } <nl> + finally <nl> + { <nl> + rwLock _ . readLock ( ) . unlock ( ) ; <nl> + } <nl> + } <nl> <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / Table . java b / src / org / apache / cassandra / db / Table . java <nl> index 9c84b42 . . f1b260a 100644 <nl> - - - a / src / org / apache / cassandra / db / Table . java <nl> + + + b / src / org / apache / cassandra / db / Table . java <nl> @ @ - 60 , 7 + 60 , 7 @ @ public class Table <nl> * is basically the column family name and the ID associated with <nl> * this column family . We use this ID in the Commit Log header to <nl> * determine when a log file that has been rolled can be deleted . <nl> - * / <nl> + * / <nl> public static class TableMetadata <nl> { <nl> / * Name of the column family * / <nl> @ @ - 454 , 7 + 454 , 7 @ @ public class Table <nl> return columnFamilyStores _ ; <nl> } <nl> <nl> - ColumnFamilyStore getColumnFamilyStore ( String cfName ) <nl> + public ColumnFamilyStore getColumnFamilyStore ( String cfName ) <nl> { <nl> return columnFamilyStores _ . get ( cfName ) ; <nl> } <nl> @ @ - 875 , 4 + 875 , 17 @ @ public class Table <nl> long timeTaken = System . currentTimeMillis ( ) - start ; <nl> dbAnalyticsSource _ . updateWriteStatistics ( timeTaken ) ; <nl> } <nl> + <nl> + public Set < String > getApplicationColumnFamilies ( ) <nl> + { <nl> + Set < String > set = new HashSet < String > ( ) ; <nl> + for ( String cfName : getColumnFamilies ( ) ) <nl> + { <nl> + if ( DatabaseDescriptor . isApplicationColumnFamily ( cfName ) ) <nl> + { <nl> + set . add ( cfName ) ; <nl> + } <nl> + } <nl> + return set ; <nl> + } <nl> } <nl> diff - - git a / src / org / apache / cassandra / service / CassandraServer . java b / src / org / apache / cassandra / service / CassandraServer . java <nl> index 93b62e7 . . c2d5f66 100644 <nl> - - - a / src / org / apache / cassandra / service / CassandraServer . java <nl> + + + b / src / org / apache / cassandra / service / CassandraServer . java <nl> @ @ - 817 , 6 + 817 , 71 @ @ public class CassandraServer extends FacebookBase implements <nl> return result ; <nl> } <nl> <nl> + public List < String > get _ range ( String tablename , final String startkey ) throws CassandraException <nl> + { <nl> + logger _ . debug ( " get _ range " ) ; <nl> + <nl> + / / send request <nl> + Message message ; <nl> + DataOutputBuffer dob = new DataOutputBuffer ( ) ; <nl> + try <nl> + { <nl> + dob . writeUTF ( startkey ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + logger _ . error ( " unable to write startkey " , e ) ; <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + byte [ ] messageBody = Arrays . copyOf ( dob . getData ( ) , dob . getLength ( ) ) ; <nl> + message = new Message ( StorageService . getLocalStorageEndPoint ( ) , <nl> + StorageService . readStage _ , <nl> + StorageService . rangeVerbHandler _ , <nl> + messageBody ) ; <nl> + EndPoint endPoint ; <nl> + try <nl> + { <nl> + endPoint = StorageService . instance ( ) . findSuitableEndPoint ( startkey ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new CassandraException ( " Unable to find endpoint for " + startkey ) ; <nl> + } <nl> + IAsyncResult iar = MessagingService . getMessagingInstance ( ) . sendRR ( message , endPoint ) ; <nl> + <nl> + / / read response <nl> + / / TODO send more requests if we need to span multiple nodes ( or can we just let client worry about that , <nl> + / / since they have to handle multiple requests anyway ? ) <nl> + byte [ ] responseBody ; <nl> + try <nl> + { <nl> + responseBody = ( byte [ ] ) iar . get ( 2 * DatabaseDescriptor . getRpcTimeout ( ) , TimeUnit . MILLISECONDS ) [ 0 ] ; <nl> + } <nl> + catch ( TimeoutException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + DataInputBuffer bufIn = new DataInputBuffer ( ) ; <nl> + bufIn . reset ( responseBody , responseBody . length ) ; <nl> + <nl> + / / turn into List <nl> + List < String > keys = new ArrayList < String > ( ) ; <nl> + while ( bufIn . getPosition ( ) < responseBody . length ) <nl> + { <nl> + try <nl> + { <nl> + keys . add ( bufIn . readUTF ( ) ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + logger _ . error ( " bad utf " , e ) ; <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + return keys ; <nl> + } <nl> + <nl> / * <nl> * This method is used to ensure that all keys <nl> * prior to the specified key , as dtermined by <nl> diff - - git a / src / org / apache / cassandra / service / RangeVerbHandler . java b / src / org / apache / cassandra / service / RangeVerbHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 3587907 <nl> - - - / dev / null <nl> + + + b / src / org / apache / cassandra / service / RangeVerbHandler . java <nl> @ @ - 0 , 0 + 1 , 152 @ @ <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + import java . util . Iterator ; <nl> + import java . util . Comparator ; <nl> + import java . util . Arrays ; <nl> + import java . io . FileNotFoundException ; <nl> + import java . io . IOException ; <nl> + <nl> + import org . apache . commons . collections . IteratorUtils ; <nl> + import org . apache . commons . collections . Predicate ; <nl> + <nl> + import org . apache . cassandra . net . MessagingService ; <nl> + import org . apache . cassandra . net . IVerbHandler ; <nl> + import org . apache . cassandra . net . Message ; <nl> + import org . apache . cassandra . db . IdentityFilter ; <nl> + import org . apache . cassandra . db . ColumnFamily ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . FileStruct ; <nl> + import org . apache . cassandra . db . Table ; <nl> + import org . apache . cassandra . db . Memtable ; <nl> + import org . apache . cassandra . db . MemtableManager ; <nl> + import org . apache . cassandra . io . SequenceFile ; <nl> + import org . apache . cassandra . io . DataInputBuffer ; <nl> + import org . apache . cassandra . io . DataOutputBuffer ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + <nl> + public class RangeVerbHandler implements IVerbHandler <nl> + { <nl> + public static final Comparator < String > STRING _ COMPARATOR = new Comparator < String > ( ) <nl> + { <nl> + public int compare ( String o1 , String o2 ) <nl> + { <nl> + return o1 . compareTo ( o2 ) ; <nl> + } <nl> + } ; <nl> + <nl> + public void doVerb ( Message message ) <nl> + { <nl> + byte [ ] bytes = ( byte [ ] ) message . getMessageBody ( ) [ 0 ] ; <nl> + final String startkey ; <nl> + if ( bytes . length = = 0 ) <nl> + { <nl> + startkey = " " ; <nl> + } <nl> + else <nl> + { <nl> + DataInputBuffer dib = new DataInputBuffer ( ) ; <nl> + dib . reset ( bytes , bytes . length ) ; <nl> + try <nl> + { <nl> + startkey = dib . readUTF ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + List < Iterator < String > > iterators = new ArrayList < Iterator < String > > ( ) ; <nl> + Table table = Table . open ( DatabaseDescriptor . getTableName ( ) ) ; <nl> + for ( String cfName : table . getApplicationColumnFamilies ( ) ) <nl> + { <nl> + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; <nl> + <nl> + / / memtable keys : current and historical <nl> + Iterator < Memtable > it = ( Iterator < Memtable > ) IteratorUtils . chainedIterator ( <nl> + IteratorUtils . singletonIterator ( cfs . getMemtable ( ) ) , <nl> + MemtableManager . instance ( ) . getUnflushedMemtables ( cfName ) . iterator ( ) ) ; <nl> + while ( it . hasNext ( ) ) <nl> + { <nl> + iterators . add ( IteratorUtils . filteredIterator ( it . next ( ) . sortedKeyIterator ( ) , new Predicate ( ) <nl> + { <nl> + public boolean evaluate ( Object key ) <nl> + { <nl> + return ( ( String ) key ) . compareTo ( startkey ) > = 0 ; <nl> + } <nl> + } ) ) ; <nl> + } <nl> + <nl> + / / sstables <nl> + for ( String filename : cfs . getSSTableFilenames ( ) ) <nl> + { <nl> + try <nl> + { <nl> + FileStruct fs = new FileStruct ( SequenceFile . reader ( filename ) ) ; <nl> + fs . seekTo ( startkey ) ; <nl> + iterators . add ( fs . iterator ( ) ) ; <nl> + } <nl> + catch ( FileNotFoundException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + Iterator < String > iter = IteratorUtils . collatedIterator ( STRING _ COMPARATOR , iterators ) ; <nl> + List < String > keys = new ArrayList < String > ( ) ; <nl> + String last = null , current = null ; <nl> + <nl> + while ( keys . size ( ) < 1000 ) <nl> + { <nl> + if ( ! iter . hasNext ( ) ) <nl> + { <nl> + break ; <nl> + } <nl> + current = iter . next ( ) ; <nl> + if ( ! current . equals ( last ) ) <nl> + { <nl> + last = current ; <nl> + for ( String cfName : table . getApplicationColumnFamilies ( ) ) <nl> + { <nl> + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; <nl> + try <nl> + { <nl> + ColumnFamily cf = cfs . getColumnFamily ( current , cfName , new IdentityFilter ( ) ) ; <nl> + if ( cf ! = null & & cf . getColumns ( ) . size ( ) > 0 ) <nl> + { <nl> + keys . add ( current ) ; <nl> + break ; <nl> + } <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + DataOutputBuffer dob = new DataOutputBuffer ( ) ; <nl> + for ( String key : keys ) <nl> + { <nl> + try <nl> + { <nl> + dob . writeUTF ( key ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + byte [ ] data = Arrays . copyOf ( dob . getData ( ) , dob . getLength ( ) ) ; <nl> + Message response = message . getReply ( StorageService . getLocalStorageEndPoint ( ) , data ) ; <nl> + MessagingService . getMessagingInstance ( ) . sendOneWay ( response , message . getFrom ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / org / apache / cassandra / service / StorageService . java b / src / org / apache / cassandra / service / StorageService . java <nl> index 409cd5f . . 95de5c6 100644 <nl> - - - a / src / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / org / apache / cassandra / service / StorageService . java <nl> @ @ - 138 , 6 + 138 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> public final static String bsMetadataVerbHandler _ = " BS - METADATA - VERB - HANDLER " ; <nl> public final static String calloutDeployVerbHandler _ = " CALLOUT - DEPLOY - VERB - HANDLER " ; <nl> public final static String touchVerbHandler _ = " TOUCH - VERB - HANDLER " ; <nl> + public static String rangeVerbHandler _ = " RANGE - VERB - HANDLER " ; <nl> <nl> public static enum ConsistencyLevel <nl> { <nl> diff - - git a / src / org / apache / cassandra / utils / DestructivePQIterator . java b / src / org / apache / cassandra / utils / DestructivePQIterator . java <nl> new file mode 100644 <nl> index 0000000 . . 0ed96f8 <nl> - - - / dev / null <nl> + + + b / src / org / apache / cassandra / utils / DestructivePQIterator . java <nl> @ @ - 0 , 0 + 1 , 25 @ @ <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . util . Iterator ; <nl> + import java . util . PriorityQueue ; <nl> + <nl> + public class DestructivePQIterator < T > implements Iterator < T > { <nl> + private PriorityQueue < T > pq ; <nl> + <nl> + public DestructivePQIterator ( PriorityQueue < T > pq ) { <nl> + this . pq = pq ; <nl> + } <nl> + <nl> + public boolean hasNext ( ) { <nl> + return pq . size ( ) > 0 ; <nl> + } <nl> + <nl> + public T next ( ) { <nl> + return pq . poll ( ) ; <nl> + } <nl> + <nl> + public void remove ( ) { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + } <nl> + <nl> diff - - git a / test / org / apache / cassandra / service / CassandraServerTest . java b / test / org / apache / cassandra / service / CassandraServerTest . java <nl> index 07c7dfe . . 762bbb5 100644 <nl> - - - a / test / org / apache / cassandra / service / CassandraServerTest . java <nl> + + + b / test / org / apache / cassandra / service / CassandraServerTest . java <nl> @ @ - 9 , 8 + 9 , 50 @ @ import org . testng . annotations . Test ; <nl> import java . io . IOException ; <nl> import java . util . * ; <nl> <nl> + import com . facebook . thrift . TException ; <nl> + <nl> public class CassandraServerTest extends ServerTest { <nl> / * <nl> + TODO fix resetting server so this works <nl> + @ Test <nl> + public void test _ get _ range _ empty ( ) throws IOException , TException { <nl> + CassandraServer server = new CassandraServer ( ) ; <nl> + server . start ( ) ; <nl> + <nl> + assert CollectionUtils . EMPTY _ COLLECTION . equals ( server . get _ range ( DatabaseDescriptor . getTableName ( ) , " " ) ) ; <nl> + } <nl> + * / <nl> + <nl> + / * <nl> + @ Test <nl> + public void test _ get _ range ( ) throws IOException , TException , CassandraException <nl> + { <nl> + CassandraServer server = new CassandraServer ( ) ; <nl> + try <nl> + { <nl> + server . start ( ) ; <nl> + } <nl> + catch ( Throwable throwable ) <nl> + { <nl> + throw new RuntimeException ( throwable ) ; <nl> + } <nl> + <nl> + / / TODO insert some data <nl> + try { <nl> + String last = null ; <nl> + for ( String key : server . get _ range ( DatabaseDescriptor . getTableName ( ) , " key1 " ) ) { <nl> + if ( last ! = null ) { <nl> + assert last . compareTo ( key ) < 0 ; <nl> + } <nl> + last = key ; <nl> + } <nl> + } finally { <nl> + server . shutdown ( ) ; <nl> + } <nl> + } <nl> + * / <nl> + <nl> + / * <nl> @ Test <nl> public void test _ get _ column ( ) throws Throwable { <nl> CassandraServer server = new CassandraServer ( ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / Json . java b / src / java / org / apache / cassandra / cql3 / Json . java 
 index 905f6e0 . . e4bce29 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Json . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Json . java 
 @ @ - 39 , 6 + 39 , 18 @ @ public class Json 
 
 public static final ColumnIdentifier JSON _ COLUMN _ ID = new ColumnIdentifier ( " [ json ] " , true ) ; 
 
 + public static Object decodeJson ( String json ) 
 + { 
 + try 
 + { 
 + return JSON _ OBJECT _ MAPPER . readValue ( json , Object . class ) ; 
 + } 
 + catch ( IOException exc ) 
 + { 
 + throw new MarshalException ( " Error decoding JSON string : " + exc . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 public interface Raw 
 { 
 public Prepared prepareAndCollectMarkers ( CFMetaData metadata , Collection < ColumnDefinition > receivers , VariableSpecifications boundNames ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / ListType . java b / src / java / org / apache / cassandra / db / marshal / ListType . java 
 index bae8043 . . 03f39d7 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / ListType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / ListType . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db . marshal ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 + import org . apache . cassandra . cql3 . Json ; 
 import org . apache . cassandra . cql3 . Lists ; 
 import org . apache . cassandra . cql3 . Term ; 
 import org . apache . cassandra . db . Cell ; 
 @ @ - 180 , 6 + 181 , 9 @ @ public class ListType < T > extends CollectionType < List < T > > 
 @ Override 
 public Term fromJSONObject ( Object parsed ) throws MarshalException 
 { 
 + if ( parsed instanceof String ) 
 + parsed = Json . decodeJson ( ( String ) parsed ) ; 
 + 
 if ( ! ( parsed instanceof List ) ) 
 throw new MarshalException ( String . format ( 
 " Expected a list , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / MapType . java b / src / java / org / apache / cassandra / db / marshal / MapType . java 
 index 3ed3dd1 . . 983710b 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / MapType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / MapType . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db . marshal ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 + import org . apache . cassandra . cql3 . Json ; 
 import org . apache . cassandra . cql3 . Maps ; 
 import org . apache . cassandra . cql3 . Term ; 
 import org . apache . cassandra . db . Cell ; 
 @ @ - 200 , 6 + 201 , 9 @ @ public class MapType < K , V > extends CollectionType < Map < K , V > > 
 @ Override 
 public Term fromJSONObject ( Object parsed ) throws MarshalException 
 { 
 + if ( parsed instanceof String ) 
 + parsed = Json . decodeJson ( ( String ) parsed ) ; 
 + 
 if ( ! ( parsed instanceof Map ) ) 
 throw new MarshalException ( String . format ( 
 " Expected a map , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; 
 @ @ - 229 , 7 + 233 , 13 @ @ public class MapType < K , V > extends CollectionType < Map < K , V > > 
 if ( i > 0 ) 
 sb . append ( " , " ) ; 
 
 - sb . append ( keys . toJSONString ( CollectionSerializer . readValue ( buffer , protocolVersion ) , protocolVersion ) ) ; 
 + / / map keys must be JSON strings , so convert non - string keys to strings 
 + String key = keys . toJSONString ( CollectionSerializer . readValue ( buffer , protocolVersion ) , protocolVersion ) ; 
 + if ( key . startsWith ( " \ " " ) ) 
 + sb . append ( key ) ; 
 + else 
 + sb . append ( ' " ' ) . append ( Json . JSON _ STRING _ ENCODER . quoteAsString ( key ) ) . append ( ' " ' ) ; 
 + 
 sb . append ( " : " ) ; 
 sb . append ( values . toJSONString ( CollectionSerializer . readValue ( buffer , protocolVersion ) , protocolVersion ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / SetType . java b / src / java / org / apache / cassandra / db / marshal / SetType . java 
 index 372555a . . 78aac25 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / SetType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / SetType . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db . marshal ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 + import org . apache . cassandra . cql3 . Json ; 
 import org . apache . cassandra . cql3 . Sets ; 
 import org . apache . cassandra . cql3 . Term ; 
 import org . apache . cassandra . db . Cell ; 
 @ @ - 154 , 6 + 155 , 9 @ @ public class SetType < T > extends CollectionType < Set < T > > 
 @ Override 
 public Term fromJSONObject ( Object parsed ) throws MarshalException 
 { 
 + if ( parsed instanceof String ) 
 + parsed = Json . decodeJson ( ( String ) parsed ) ; 
 + 
 if ( ! ( parsed instanceof List ) ) 
 throw new MarshalException ( String . format ( 
 " Expected a list ( representing a set ) , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / TupleType . java b / src / java / org / apache / cassandra / db / marshal / TupleType . java 
 index 6093137 . . e874cb6 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / TupleType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / TupleType . java 
 @ @ - 25 , 10 + 25 , 7 @ @ import java . util . List ; 
 
 import com . google . common . base . Objects ; 
 
 - import org . apache . cassandra . cql3 . CQL3Type ; 
 - import org . apache . cassandra . cql3 . Constants ; 
 - import org . apache . cassandra . cql3 . Term ; 
 - import org . apache . cassandra . cql3 . Tuples ; 
 + import org . apache . cassandra . cql3 . * ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . exceptions . SyntaxException ; 
 import org . apache . cassandra . serializers . * ; 
 @ @ - 233 , 6 + 230 , 9 @ @ public class TupleType extends AbstractType < ByteBuffer > 
 @ Override 
 public Term fromJSONObject ( Object parsed ) throws MarshalException 
 { 
 + if ( parsed instanceof String ) 
 + parsed = Json . decodeJson ( ( String ) parsed ) ; 
 + 
 if ( ! ( parsed instanceof List ) ) 
 throw new MarshalException ( String . format ( 
 " Expected a list representation of a tuple , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / UserType . java b / src / java / org / apache / cassandra / db / marshal / UserType . java 
 index 45c5f0e . . 5879d6b 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / UserType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / UserType . java 
 @ @ - 145 , 6 + 145 , 9 @ @ public class UserType extends TupleType 
 @ Override 
 public Term fromJSONObject ( Object parsed ) throws MarshalException 
 { 
 + if ( parsed instanceof String ) 
 + parsed = Json . decodeJson ( ( String ) parsed ) ; 
 + 
 if ( ! ( parsed instanceof Map ) ) 
 throw new MarshalException ( String . format ( 
 " Expected a map , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / JsonTest . java b / test / unit / org / apache / cassandra / cql3 / JsonTest . java 
 index 47d6ddd . . 305502e 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / JsonTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / JsonTest . java 
 @ @ - 843 , 6 + 843 , 93 @ @ public class JsonTest extends CQLTester 
 } 
 
 @ Test 
 + public void testInsertJsonSyntaxWithNonNativeMapKeys ( ) throws Throwable 
 + { 
 + / / JSON doesn ' t allow non - string keys , so we accept string representations of any type as map keys and 
 + / / return maps with string keys when necessary . 
 + 
 + String typeName = createType ( " CREATE TYPE % s ( a int ) " ) ; 
 + createTable ( " CREATE TABLE % s ( " + 
 + " k int PRIMARY KEY , " + 
 + " intmap map < int , boolean > , " + 
 + " bigintmap map < bigint , boolean > , " + 
 + " varintmap map < varint , boolean > , " + 
 + " booleanmap map < boolean , boolean > , " + 
 + " floatmap map < float , boolean > , " + 
 + " doublemap map < double , boolean > , " + 
 + " decimalmap map < decimal , boolean > , " + 
 + " tuplemap map < frozen < tuple < int , text > > , boolean > , " + 
 + " udtmap map < frozen < " + typeName + " > , boolean > , " + 
 + " setmap map < frozen < set < int > > , boolean > , " + 
 + " listmap map < frozen < list < int > > , boolean > , " + 
 + " textsetmap map < frozen < set < text > > , boolean > , " + 
 + " nestedsetmap map < frozen < map < set < text > , text > > , boolean > , " + 
 + " frozensetmap frozen < map < set < int > , boolean > > ) " ) ; 
 + 
 + / / int keys 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " intmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ; 
 + assertRows ( execute ( " SELECT JSON k , intmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " intmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ) ; 
 + 
 + / / bigint keys 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " bigintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ; 
 + assertRows ( execute ( " SELECT JSON k , bigintmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " bigintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ) ; 
 + 
 + / / varint keys 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " varintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ; 
 + assertRows ( execute ( " SELECT JSON k , varintmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " varintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ) ; 
 + 
 + / / boolean keys 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " booleanmap \ " : { \ " true \ " : true , \ " false \ " : false } } " ) ; 
 + assertRows ( execute ( " SELECT JSON k , booleanmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " booleanmap \ " : { \ " false \ " : false , \ " true \ " : true } } " ) ) ; 
 + 
 + / / float keys 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " floatmap \ " : { \ " 1 . 23 \ " : true , \ " 4 . 56 \ " : false } } " ) ; 
 + assertRows ( execute ( " SELECT JSON k , floatmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " floatmap \ " : { \ " 1 . 23 \ " : true , \ " 4 . 56 \ " : false } } " ) ) ; 
 + 
 + / / double keys 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " doublemap \ " : { \ " 1 . 23 \ " : true , \ " 4 . 56 \ " : false } } " ) ; 
 + assertRows ( execute ( " SELECT JSON k , doublemap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " doublemap \ " : { \ " 1 . 23 \ " : true , \ " 4 . 56 \ " : false } } " ) ) ; 
 + 
 + / / decimal keys 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " decimalmap \ " : { \ " 1 . 23 \ " : true , \ " 4 . 56 \ " : false } } " ) ; 
 + assertRows ( execute ( " SELECT JSON k , decimalmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " decimalmap \ " : { \ " 1 . 23 \ " : true , \ " 4 . 56 \ " : false } } " ) ) ; 
 + 
 + / / tuple < int , text > keys 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " tuplemap \ " : { \ " [ 0 , \ \ \ " a \ \ \ " ] \ " : true , \ " [ 1 , \ \ \ " b \ \ \ " ] \ " : false } } " ) ; 
 + assertRows ( execute ( " SELECT JSON k , tuplemap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " tuplemap \ " : { \ " [ 0 , \ \ \ " a \ \ \ " ] \ " : true , \ " [ 1 , \ \ \ " b \ \ \ " ] \ " : false } } " ) ) ; 
 + 
 + / / UDT keys 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " udtmap \ " : { \ " { \ \ \ " a \ \ \ " : 0 } \ " : true , \ " { \ \ \ " a \ \ \ " : 1 } \ " : false } } " ) ; 
 + assertRows ( execute ( " SELECT JSON k , udtmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " udtmap \ " : { \ " { \ \ \ " a \ \ \ " : 0 } \ " : true , \ " { \ \ \ " a \ \ \ " : 1 } \ " : false } } " ) ) ; 
 + 
 + / / set < int > keys 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " setmap \ " : { \ " [ 0 , 1 , 2 ] \ " : true , \ " [ 3 , 4 , 5 ] \ " : false } } " ) ; 
 + assertRows ( execute ( " SELECT JSON k , setmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " setmap \ " : { \ " [ 0 , 1 , 2 ] \ " : true , \ " [ 3 , 4 , 5 ] \ " : false } } " ) ) ; 
 + 
 + / / list < int > keys 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " listmap \ " : { \ " [ 0 , 1 , 2 ] \ " : true , \ " [ 3 , 4 , 5 ] \ " : false } } " ) ; 
 + assertRows ( execute ( " SELECT JSON k , listmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " listmap \ " : { \ " [ 0 , 1 , 2 ] \ " : true , \ " [ 3 , 4 , 5 ] \ " : false } } " ) ) ; 
 + 
 + / / set < text > keys 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " textsetmap \ " : { \ " [ \ \ \ " 0 \ \ \ " , \ \ \ " 1 \ \ \ " ] \ " : true , \ " [ \ \ \ " 3 \ \ \ " , \ \ \ " 4 \ \ \ " ] \ " : false } } " ) ; 
 + assertRows ( execute ( " SELECT JSON k , textsetmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " textsetmap \ " : { \ " [ \ \ \ " 0 \ \ \ " , \ \ \ " 1 \ \ \ " ] \ " : true , \ " [ \ \ \ " 3 \ \ \ " , \ \ \ " 4 \ \ \ " ] \ " : false } } " ) ) ; 
 + 
 + / / map < set < text > , text > keys 
 + String innerKey1 = " [ \ " 0 \ " , \ " 1 \ " ] " ; 
 + String fullKey1 = String . format ( " { \ " % s \ " : \ " % s \ " } " , new String ( Json . JSON _ STRING _ ENCODER . quoteAsString ( innerKey1 ) ) , " a " ) ; 
 + String stringKey1 = new String ( Json . JSON _ STRING _ ENCODER . quoteAsString ( fullKey1 ) ) ; 
 + String innerKey2 = " [ \ " 3 \ " , \ " 4 \ " ] " ; 
 + String fullKey2 = String . format ( " { \ " % s \ " : \ " % s \ " } " , new String ( Json . JSON _ STRING _ ENCODER . quoteAsString ( innerKey2 ) ) , " b " ) ; 
 + String stringKey2 = new String ( Json . JSON _ STRING _ ENCODER . quoteAsString ( fullKey2 ) ) ; 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " nestedsetmap \ " : { \ " " + stringKey1 + " \ " : true , \ " " + stringKey2 + " \ " : false } } " ) ; 
 + assertRows ( execute ( " SELECT JSON k , nestedsetmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " nestedsetmap \ " : { \ " " + stringKey1 + " \ " : true , \ " " + stringKey2 + " \ " : false } } " ) ) ; 
 + 
 + / / set < int > keys in a frozen map 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " frozensetmap \ " : { \ " [ 0 , 1 , 2 ] \ " : true , \ " [ 3 , 4 , 5 ] \ " : false } } " ) ; 
 + assertRows ( execute ( " SELECT JSON k , frozensetmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " frozensetmap \ " : { \ " [ 0 , 1 , 2 ] \ " : true , \ " [ 3 , 4 , 5 ] \ " : false } } " ) ) ; 
 + } 
 + 
 + @ Test 
 public void testInsertJsonSyntaxWithTuplesAndUDTs ( ) throws Throwable 
 { 
 String typeName = createType ( " CREATE TYPE % s ( a int , b frozen < set < int > > , c tuple < int , int > ) " ) ;

NEAREST DIFF:
diff - - git a / src / org / apache / cassandra / config / DatabaseDescriptor . java b / src / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 683009c . . 73cf3a6 100644 
 - - - a / src / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 18 , 21 + 18 , 24 @ @ 
 
 package org . apache . cassandra . config ; 
 
 - import java . util . * ; 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + import java . util . HashSet ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Set ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 - import java . io . * ; 
 
 import org . apache . cassandra . db . ColumnFamily ; 
 + import org . apache . cassandra . db . SystemTable ; 
 import org . apache . cassandra . db . Table ; 
 import org . apache . cassandra . db . TypeInfo ; 
 - import org . apache . cassandra . db . DBManager ; 
 - import org . apache . cassandra . db . SystemTable ; 
 - import org . apache . cassandra . db . Table . TableMetadata ; 
 import org . apache . cassandra . utils . FileUtils ; 
 import org . apache . cassandra . utils . XMLUtils ; 
 import org . w3c . dom . Node ; 
 import org . w3c . dom . NodeList ; 
 - import org . apache . cassandra . io . * ; 
 
 
 / * * 
 @ @ - 306 , 6 + 309 , 9 @ @ public class DatabaseDescriptor 
 / * Read the table related stuff from config * / 
 NodeList tables = xmlUtils . getRequestedNodeList ( " / Storage / Tables / Table " ) ; 
 int size = tables . getLength ( ) ; 
 + if ( size = = 0 ) { 
 + throw new UnsupportedOperationException ( " A Table must be configured " ) ; 
 + } 
 for ( int i = 0 ; i < size ; + + i ) 
 { 
 Node table = tables . item ( i ) ; 
 @ @ - 785 , 4 + 791 , 9 @ @ public class DatabaseDescriptor 
 { 
 return tableToCFMetaDataMap _ ; 
 } 
 + 
 + public static String getTableName ( ) 
 + { 
 + return tables _ . get ( 0 ) ; 
 + } 
 } 
 diff - - git a / src / org / apache / cassandra / db / ColumnFamily . java b / src / org / apache / cassandra / db / ColumnFamily . java 
 index 51ac744 . . a2ac3a2 100644 
 - - - a / src / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 288 , 7 + 288 , 7 @ @ public final class ColumnFamily 
 return columns _ . getSortedColumns ( ) ; 
 } 
 
 - Map < String , IColumn > getColumns ( ) 
 + public Map < String , IColumn > getColumns ( ) 
 { 
 return columns _ . getColumns ( ) ; 
 } 
 diff - - git a / src / org / apache / cassandra / db / ColumnFamilyStore . java b / src / org / apache / cassandra / db / ColumnFamilyStore . java 
 index be7c245 . . 28bb3f7 100644 
 - - - a / src / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1384 , 4 + 1384 , 14 @ @ public class ColumnFamilyStore 
 { 
 memtable _ . get ( ) . flushOnRecovery ( ) ; 
 } 
 + 
 + public Object getMemtable ( ) 
 + { 
 + return memtable _ . get ( ) ; 
 + } 
 + 
 + public Set < String > getSSTableFilenames ( ) 
 + { 
 + return Collections . unmodifiableSet ( ssTables _ ) ; 
 + } 
 } 
 diff - - git a / src / org / apache / cassandra / db / Memtable . java b / src / org / apache / cassandra / db / Memtable . java 
 index 2bdad37 . . 567b829 100644 
 - - - a / src / org / apache / cassandra / db / Memtable . java 
 + + + b / src / org / apache / cassandra / db / Memtable . java 
 @ @ - 26 , 6 + 26 , 8 @ @ import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 + import java . util . Iterator ; 
 + import java . util . PriorityQueue ; 
 import java . util . concurrent . Callable ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . ExecutorService ; 
 @ @ - 45 , 6 + 47 , 7 @ @ import org . apache . cassandra . io . DataOutputBuffer ; 
 import org . apache . cassandra . io . SSTable ; 
 import org . apache . cassandra . utils . BloomFilter ; 
 import org . apache . cassandra . utils . LogUtil ; 
 + import org . apache . cassandra . utils . DestructivePQIterator ; 
 
 / * * 
 * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) 
 @ @ - 419 , 4 + 422 , 9 @ @ public class Memtable implements MemtableMBean , Comparable < Memtable > 
 columnFamilies _ . clear ( ) ; 
 } 
 
 + public Iterator < String > sortedKeyIterator ( ) 
 + { 
 + return new DestructivePQIterator < String > ( new PriorityQueue < String > ( columnFamilies _ . keySet ( ) ) ) ; 
 + } 
 + 
 } 
 diff - - git a / src / org / apache / cassandra / db / MemtableManager . java b / src / org / apache / cassandra / db / MemtableManager . java 
 index 997bbd3 . . 54242d1 100644 
 - - - a / src / org / apache / cassandra / db / MemtableManager . java 
 + + + b / src / org / apache / cassandra / db / MemtableManager . java 
 @ @ - 40 , 7 + 40 , 7 @ @ public class MemtableManager 
 private static Lock lock _ = new ReentrantLock ( ) ; 
 private static Logger logger _ = Logger . getLogger ( MemtableManager . class ) ; 
 private ReentrantReadWriteLock rwLock _ = new ReentrantReadWriteLock ( true ) ; 
 - static MemtableManager instance ( ) 
 + public static MemtableManager instance ( ) 
 { 
 if ( instance _ = = null ) 
 { 
 @ @ - 157 , 7 + 157 , 22 @ @ public class MemtableManager 
 	 } 
 } 
 
 - 
 - 
 + public List < Memtable > getUnflushedMemtables ( String cfName ) 
 + { 
 + rwLock _ . readLock ( ) . lock ( ) ; 
 + try 
 + { 
 + List < Memtable > memtables = history _ . get ( cfName ) ; 
 + if ( memtables ! = null ) 
 + { 
 + return new ArrayList < Memtable > ( memtables ) ; 
 + } 
 + return Arrays . asList ( new Memtable [ 0 ] ) ; 
 + } 
 + finally 
 + { 
 + rwLock _ . readLock ( ) . unlock ( ) ; 
 + } 
 + } 
 
 } 
 diff - - git a / src / org / apache / cassandra / db / Table . java b / src / org / apache / cassandra / db / Table . java 
 index 9c84b42 . . f1b260a 100644 
 - - - a / src / org / apache / cassandra / db / Table . java 
 + + + b / src / org / apache / cassandra / db / Table . java 
 @ @ - 60 , 7 + 60 , 7 @ @ public class Table 
 * is basically the column family name and the ID associated with 
 * this column family . We use this ID in the Commit Log header to 
 * determine when a log file that has been rolled can be deleted . 
 - * / 
 + * / 
 public static class TableMetadata 
 { 
 / * Name of the column family * / 
 @ @ - 454 , 7 + 454 , 7 @ @ public class Table 
 return columnFamilyStores _ ; 
 } 
 
 - ColumnFamilyStore getColumnFamilyStore ( String cfName ) 
 + public ColumnFamilyStore getColumnFamilyStore ( String cfName ) 
 { 
 return columnFamilyStores _ . get ( cfName ) ; 
 } 
 @ @ - 875 , 4 + 875 , 17 @ @ public class Table 
 long timeTaken = System . currentTimeMillis ( ) - start ; 
 dbAnalyticsSource _ . updateWriteStatistics ( timeTaken ) ; 
 } 
 + 
 + public Set < String > getApplicationColumnFamilies ( ) 
 + { 
 + Set < String > set = new HashSet < String > ( ) ; 
 + for ( String cfName : getColumnFamilies ( ) ) 
 + { 
 + if ( DatabaseDescriptor . isApplicationColumnFamily ( cfName ) ) 
 + { 
 + set . add ( cfName ) ; 
 + } 
 + } 
 + return set ; 
 + } 
 } 
 diff - - git a / src / org / apache / cassandra / service / CassandraServer . java b / src / org / apache / cassandra / service / CassandraServer . java 
 index 93b62e7 . . c2d5f66 100644 
 - - - a / src / org / apache / cassandra / service / CassandraServer . java 
 + + + b / src / org / apache / cassandra / service / CassandraServer . java 
 @ @ - 817 , 6 + 817 , 71 @ @ public class CassandraServer extends FacebookBase implements 
 return result ; 
 } 
 
 + public List < String > get _ range ( String tablename , final String startkey ) throws CassandraException 
 + { 
 + logger _ . debug ( " get _ range " ) ; 
 + 
 + / / send request 
 + Message message ; 
 + DataOutputBuffer dob = new DataOutputBuffer ( ) ; 
 + try 
 + { 
 + dob . writeUTF ( startkey ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + logger _ . error ( " unable to write startkey " , e ) ; 
 + throw new RuntimeException ( e ) ; 
 + } 
 + byte [ ] messageBody = Arrays . copyOf ( dob . getData ( ) , dob . getLength ( ) ) ; 
 + message = new Message ( StorageService . getLocalStorageEndPoint ( ) , 
 + StorageService . readStage _ , 
 + StorageService . rangeVerbHandler _ , 
 + messageBody ) ; 
 + EndPoint endPoint ; 
 + try 
 + { 
 + endPoint = StorageService . instance ( ) . findSuitableEndPoint ( startkey ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new CassandraException ( " Unable to find endpoint for " + startkey ) ; 
 + } 
 + IAsyncResult iar = MessagingService . getMessagingInstance ( ) . sendRR ( message , endPoint ) ; 
 + 
 + / / read response 
 + / / TODO send more requests if we need to span multiple nodes ( or can we just let client worry about that , 
 + / / since they have to handle multiple requests anyway ? ) 
 + byte [ ] responseBody ; 
 + try 
 + { 
 + responseBody = ( byte [ ] ) iar . get ( 2 * DatabaseDescriptor . getRpcTimeout ( ) , TimeUnit . MILLISECONDS ) [ 0 ] ; 
 + } 
 + catch ( TimeoutException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + DataInputBuffer bufIn = new DataInputBuffer ( ) ; 
 + bufIn . reset ( responseBody , responseBody . length ) ; 
 + 
 + / / turn into List 
 + List < String > keys = new ArrayList < String > ( ) ; 
 + while ( bufIn . getPosition ( ) < responseBody . length ) 
 + { 
 + try 
 + { 
 + keys . add ( bufIn . readUTF ( ) ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + logger _ . error ( " bad utf " , e ) ; 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + return keys ; 
 + } 
 + 
 / * 
 * This method is used to ensure that all keys 
 * prior to the specified key , as dtermined by 
 diff - - git a / src / org / apache / cassandra / service / RangeVerbHandler . java b / src / org / apache / cassandra / service / RangeVerbHandler . java 
 new file mode 100644 
 index 0000000 . . 3587907 
 - - - / dev / null 
 + + + b / src / org / apache / cassandra / service / RangeVerbHandler . java 
 @ @ - 0 , 0 + 1 , 152 @ @ 
 + package org . apache . cassandra . service ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + import java . util . Iterator ; 
 + import java . util . Comparator ; 
 + import java . util . Arrays ; 
 + import java . io . FileNotFoundException ; 
 + import java . io . IOException ; 
 + 
 + import org . apache . commons . collections . IteratorUtils ; 
 + import org . apache . commons . collections . Predicate ; 
 + 
 + import org . apache . cassandra . net . MessagingService ; 
 + import org . apache . cassandra . net . IVerbHandler ; 
 + import org . apache . cassandra . net . Message ; 
 + import org . apache . cassandra . db . IdentityFilter ; 
 + import org . apache . cassandra . db . ColumnFamily ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . FileStruct ; 
 + import org . apache . cassandra . db . Table ; 
 + import org . apache . cassandra . db . Memtable ; 
 + import org . apache . cassandra . db . MemtableManager ; 
 + import org . apache . cassandra . io . SequenceFile ; 
 + import org . apache . cassandra . io . DataInputBuffer ; 
 + import org . apache . cassandra . io . DataOutputBuffer ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + 
 + public class RangeVerbHandler implements IVerbHandler 
 + { 
 + public static final Comparator < String > STRING _ COMPARATOR = new Comparator < String > ( ) 
 + { 
 + public int compare ( String o1 , String o2 ) 
 + { 
 + return o1 . compareTo ( o2 ) ; 
 + } 
 + } ; 
 + 
 + public void doVerb ( Message message ) 
 + { 
 + byte [ ] bytes = ( byte [ ] ) message . getMessageBody ( ) [ 0 ] ; 
 + final String startkey ; 
 + if ( bytes . length = = 0 ) 
 + { 
 + startkey = " " ; 
 + } 
 + else 
 + { 
 + DataInputBuffer dib = new DataInputBuffer ( ) ; 
 + dib . reset ( bytes , bytes . length ) ; 
 + try 
 + { 
 + startkey = dib . readUTF ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + List < Iterator < String > > iterators = new ArrayList < Iterator < String > > ( ) ; 
 + Table table = Table . open ( DatabaseDescriptor . getTableName ( ) ) ; 
 + for ( String cfName : table . getApplicationColumnFamilies ( ) ) 
 + { 
 + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; 
 + 
 + / / memtable keys : current and historical 
 + Iterator < Memtable > it = ( Iterator < Memtable > ) IteratorUtils . chainedIterator ( 
 + IteratorUtils . singletonIterator ( cfs . getMemtable ( ) ) , 
 + MemtableManager . instance ( ) . getUnflushedMemtables ( cfName ) . iterator ( ) ) ; 
 + while ( it . hasNext ( ) ) 
 + { 
 + iterators . add ( IteratorUtils . filteredIterator ( it . next ( ) . sortedKeyIterator ( ) , new Predicate ( ) 
 + { 
 + public boolean evaluate ( Object key ) 
 + { 
 + return ( ( String ) key ) . compareTo ( startkey ) > = 0 ; 
 + } 
 + } ) ) ; 
 + } 
 + 
 + / / sstables 
 + for ( String filename : cfs . getSSTableFilenames ( ) ) 
 + { 
 + try 
 + { 
 + FileStruct fs = new FileStruct ( SequenceFile . reader ( filename ) ) ; 
 + fs . seekTo ( startkey ) ; 
 + iterators . add ( fs . iterator ( ) ) ; 
 + } 
 + catch ( FileNotFoundException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + } 
 + 
 + Iterator < String > iter = IteratorUtils . collatedIterator ( STRING _ COMPARATOR , iterators ) ; 
 + List < String > keys = new ArrayList < String > ( ) ; 
 + String last = null , current = null ; 
 + 
 + while ( keys . size ( ) < 1000 ) 
 + { 
 + if ( ! iter . hasNext ( ) ) 
 + { 
 + break ; 
 + } 
 + current = iter . next ( ) ; 
 + if ( ! current . equals ( last ) ) 
 + { 
 + last = current ; 
 + for ( String cfName : table . getApplicationColumnFamilies ( ) ) 
 + { 
 + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; 
 + try 
 + { 
 + ColumnFamily cf = cfs . getColumnFamily ( current , cfName , new IdentityFilter ( ) ) ; 
 + if ( cf ! = null & & cf . getColumns ( ) . size ( ) > 0 ) 
 + { 
 + keys . add ( current ) ; 
 + break ; 
 + } 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( ) ; 
 + } 
 + } 
 + } 
 + } 
 + 
 + DataOutputBuffer dob = new DataOutputBuffer ( ) ; 
 + for ( String key : keys ) 
 + { 
 + try 
 + { 
 + dob . writeUTF ( key ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + byte [ ] data = Arrays . copyOf ( dob . getData ( ) , dob . getLength ( ) ) ; 
 + Message response = message . getReply ( StorageService . getLocalStorageEndPoint ( ) , data ) ; 
 + MessagingService . getMessagingInstance ( ) . sendOneWay ( response , message . getFrom ( ) ) ; 
 + } 
 + } 
 diff - - git a / src / org / apache / cassandra / service / StorageService . java b / src / org / apache / cassandra / service / StorageService . java 
 index 409cd5f . . 95de5c6 100644 
 - - - a / src / org / apache / cassandra / service / StorageService . java 
 + + + b / src / org / apache / cassandra / service / StorageService . java 
 @ @ - 138 , 6 + 138 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 public final static String bsMetadataVerbHandler _ = " BS - METADATA - VERB - HANDLER " ; 
 public final static String calloutDeployVerbHandler _ = " CALLOUT - DEPLOY - VERB - HANDLER " ; 
 public final static String touchVerbHandler _ = " TOUCH - VERB - HANDLER " ; 
 + public static String rangeVerbHandler _ = " RANGE - VERB - HANDLER " ; 
 
 public static enum ConsistencyLevel 
 { 
 diff - - git a / src / org / apache / cassandra / utils / DestructivePQIterator . java b / src / org / apache / cassandra / utils / DestructivePQIterator . java 
 new file mode 100644 
 index 0000000 . . 0ed96f8 
 - - - / dev / null 
 + + + b / src / org / apache / cassandra / utils / DestructivePQIterator . java 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . util . Iterator ; 
 + import java . util . PriorityQueue ; 
 + 
 + public class DestructivePQIterator < T > implements Iterator < T > { 
 + private PriorityQueue < T > pq ; 
 + 
 + public DestructivePQIterator ( PriorityQueue < T > pq ) { 
 + this . pq = pq ; 
 + } 
 + 
 + public boolean hasNext ( ) { 
 + return pq . size ( ) > 0 ; 
 + } 
 + 
 + public T next ( ) { 
 + return pq . poll ( ) ; 
 + } 
 + 
 + public void remove ( ) { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + } 
 + 
 diff - - git a / test / org / apache / cassandra / service / CassandraServerTest . java b / test / org / apache / cassandra / service / CassandraServerTest . java 
 index 07c7dfe . . 762bbb5 100644 
 - - - a / test / org / apache / cassandra / service / CassandraServerTest . java 
 + + + b / test / org / apache / cassandra / service / CassandraServerTest . java 
 @ @ - 9 , 8 + 9 , 50 @ @ import org . testng . annotations . Test ; 
 import java . io . IOException ; 
 import java . util . * ; 
 
 + import com . facebook . thrift . TException ; 
 + 
 public class CassandraServerTest extends ServerTest { 
 / * 
 + TODO fix resetting server so this works 
 + @ Test 
 + public void test _ get _ range _ empty ( ) throws IOException , TException { 
 + CassandraServer server = new CassandraServer ( ) ; 
 + server . start ( ) ; 
 + 
 + assert CollectionUtils . EMPTY _ COLLECTION . equals ( server . get _ range ( DatabaseDescriptor . getTableName ( ) , " " ) ) ; 
 + } 
 + * / 
 + 
 + / * 
 + @ Test 
 + public void test _ get _ range ( ) throws IOException , TException , CassandraException 
 + { 
 + CassandraServer server = new CassandraServer ( ) ; 
 + try 
 + { 
 + server . start ( ) ; 
 + } 
 + catch ( Throwable throwable ) 
 + { 
 + throw new RuntimeException ( throwable ) ; 
 + } 
 + 
 + / / TODO insert some data 
 + try { 
 + String last = null ; 
 + for ( String key : server . get _ range ( DatabaseDescriptor . getTableName ( ) , " key1 " ) ) { 
 + if ( last ! = null ) { 
 + assert last . compareTo ( key ) < 0 ; 
 + } 
 + last = key ; 
 + } 
 + } finally { 
 + server . shutdown ( ) ; 
 + } 
 + } 
 + * / 
 + 
 + / * 
 @ Test 
 public void test _ get _ column ( ) throws Throwable { 
 CassandraServer server = new CassandraServer ( ) ;
