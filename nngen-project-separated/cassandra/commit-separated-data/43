BLEU SCORE: 0.0370865905565703

TEST MSG: Catch empty / invalid bounds in SelectStatement
GENERATED MSG: Fix out - of - space error treatment in memtable flushing

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9b4ab59 . . bde5b52 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Catch empty / invalid bounds in SelectStatement ( CASSANDRA - 14849 ) <nl> * Auto - expand replication _ factor for NetworkTopologyStrategy ( CASSANDRA - 14303 ) <nl> * Transient Replication : support EACH _ QUORUM ( CASSANDRA - 14727 ) <nl> * BufferPool : allocating thread for new chunks should acquire directly ( CASSANDRA - 14832 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index f847a6e . . 6e52ab1 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . cql3 . statements ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> import org . slf4j . Logger ; <nl> @ @ - 625 , 7 + 626 , 8 @ @ public class SelectStatement implements CQLStatement <nl> return new ClusteringIndexNamesFilter ( clusterings , isReversed ) ; <nl> } <nl> <nl> - private Slices makeSlices ( QueryOptions options ) <nl> + @ VisibleForTesting <nl> + public Slices makeSlices ( QueryOptions options ) <nl> throws InvalidRequestException <nl> { <nl> SortedSet < ClusteringBound > startBounds = restrictions . getClusteringColumnsBounds ( Bound . START , options ) ; <nl> @ @ - 637 , 7 + 639 , 7 @ @ public class SelectStatement implements CQLStatement <nl> { <nl> ClusteringBound start = startBounds . first ( ) ; <nl> ClusteringBound end = endBounds . first ( ) ; <nl> - return table . comparator . compare ( start , end ) > 0 <nl> + return Slice . isEmpty ( table . comparator , start , end ) <nl> ? Slices . NONE <nl> : Slices . with ( table . comparator , Slice . make ( start , end ) ) ; <nl> } <nl> @ @ - 651 , 7 + 653 , 7 @ @ public class SelectStatement implements CQLStatement <nl> ClusteringBound end = endIter . next ( ) ; <nl> <nl> / / Ignore slices that are nonsensical <nl> - if ( table . comparator . compare ( start , end ) > 0 ) <nl> + if ( Slice . isEmpty ( table . comparator , start , end ) ) <nl> continue ; <nl> <nl> builder . add ( start , end ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / Slice . java b / src / java / org / apache / cassandra / db / Slice . java <nl> index 2517186 . . 44f7ac3 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Slice . java <nl> + + + b / src / java / org / apache / cassandra / db / Slice . java <nl> @ @ - 159 , 7 + 159 , 15 @ @ public class Slice <nl> public static boolean isEmpty ( ClusteringComparator comparator , ClusteringBound start , ClusteringBound end ) <nl> { <nl> assert start . isStart ( ) & & end . isEnd ( ) ; <nl> - return comparator . compare ( end , start ) < = 0 ; <nl> + <nl> + int cmp = comparator . compare ( start , end ) ; <nl> + <nl> + if ( cmp < 0 ) <nl> + return false ; <nl> + else if ( cmp > 0 ) <nl> + return true ; <nl> + else <nl> + return start . isExclusive ( ) | | end . isExclusive ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / db / Slices . java b / src / java / org / apache / cassandra / db / Slices . java <nl> index 9900112 . . 9c7da79 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Slices . java <nl> + + + b / src / java / org / apache / cassandra / db / Slices . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> + import com . google . common . base . Preconditions ; <nl> import com . google . common . collect . Iterators ; <nl> <nl> import org . apache . cassandra . schema . ColumnMetadata ; <nl> @ @ - 61 , 7 + 62 , 7 @ @ public abstract class Slices implements Iterable < Slice > <nl> if ( slice . start ( ) = = ClusteringBound . BOTTOM & & slice . end ( ) = = ClusteringBound . TOP ) <nl> return Slices . ALL ; <nl> <nl> - assert comparator . compare ( slice . start ( ) , slice . end ( ) ) < = 0 ; <nl> + Preconditions . checkArgument ( ! slice . isEmpty ( comparator ) ) ; <nl> return new ArrayBackedSlices ( comparator , new Slice [ ] { slice } ) ; <nl> } <nl> <nl> @ @ - 192 , 7 + 193 , 7 @ @ public abstract class Slices implements Iterable < Slice > <nl> <nl> public Builder add ( Slice slice ) <nl> { <nl> - assert comparator . compare ( slice . start ( ) , slice . end ( ) ) < = 0 ; <nl> + Preconditions . checkArgument ( ! slice . isEmpty ( comparator ) ) ; <nl> if ( slices . size ( ) > 0 & & comparator . compare ( slices . get ( slices . size ( ) - 1 ) . end ( ) , slice . start ( ) ) > 0 ) <nl> needsNormalizing = true ; <nl> slices . add ( slice ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / statements / SelectStatementTest . java b / test / unit / org / apache / cassandra / cql3 / statements / SelectStatementTest . java <nl> new file mode 100644 <nl> index 0000000 . . 5856bce <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / cql3 / statements / SelectStatementTest . java <nl> @ @ - 0 , 0 + 1 , 63 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . cql3 . statements ; <nl> + <nl> + import org . junit . Assert ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . cql3 . CQLStatement ; <nl> + import org . apache . cassandra . cql3 . QueryOptions ; <nl> + import org . apache . cassandra . cql3 . QueryProcessor ; <nl> + import org . apache . cassandra . db . Slices ; <nl> + import org . apache . cassandra . schema . KeyspaceParams ; <nl> + import org . apache . cassandra . service . ClientState ; <nl> + <nl> + public class SelectStatementTest <nl> + { <nl> + <nl> + private static final String KEYSPACE = " ks " ; <nl> + <nl> + @ BeforeClass <nl> + public static void setupClass ( ) <nl> + { <nl> + DatabaseDescriptor . daemonInitialization ( ) ; <nl> + SchemaLoader . prepareServer ( ) ; <nl> + SchemaLoader . createKeyspace ( KEYSPACE , KeyspaceParams . simple ( 1 ) ) ; <nl> + } <nl> + <nl> + private static SelectStatement parseSelect ( String query ) <nl> + { <nl> + CQLStatement stmt = QueryProcessor . parseStatement ( query ) . prepare ( ClientState . forInternalCalls ( ) ) ; <nl> + assert stmt instanceof SelectStatement ; <nl> + return ( SelectStatement ) stmt ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNonsensicalBounds ( ) <nl> + { <nl> + QueryProcessor . executeOnceInternal ( " CREATE TABLE ks . tbl ( k int , c int , v int , primary key ( k , c ) ) " ) ; <nl> + QueryProcessor . executeOnceInternal ( " INSERT INTO ks . tbl ( k , c , v ) VALUES ( 100 , 10 , 0 ) " ) ; <nl> + Assert . assertEquals ( Slices . NONE , parseSelect ( " SELECT * FROM ks . tbl WHERE k = 100 AND c > 10 AND c < = 10 " ) . makeSlices ( QueryOptions . DEFAULT ) ) ; <nl> + Assert . assertEquals ( Slices . NONE , parseSelect ( " SELECT * FROM ks . tbl WHERE k = 100 AND c < 10 AND c > = 10 " ) . makeSlices ( QueryOptions . DEFAULT ) ) ; <nl> + Assert . assertEquals ( Slices . NONE , parseSelect ( " SELECT * FROM ks . tbl WHERE k = 100 AND c < 10 AND c > 10 " ) . makeSlices ( QueryOptions . DEFAULT ) ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / db / filter / SliceTest . java b / test / unit / org / apache / cassandra / db / filter / SliceTest . java <nl> index 9188c94 . . 6c04500 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / filter / SliceTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / filter / SliceTest . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . db . marshal . Int32Type ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> + import static org . apache . cassandra . db . ClusteringPrefix . Kind . * ; <nl> import static org . junit . Assert . * ; <nl> <nl> public class SliceTest <nl> @ @ - 43 , 8 + 44 , 8 @ @ public class SliceTest <nl> types . add ( Int32Type . instance ) ; <nl> ClusteringComparator cc = new ClusteringComparator ( types ) ; <nl> <nl> - ClusteringPrefix . Kind sk = ClusteringPrefix . Kind . INCL _ START _ BOUND ; <nl> - ClusteringPrefix . Kind ek = ClusteringPrefix . Kind . INCL _ END _ BOUND ; <nl> + ClusteringPrefix . Kind sk = INCL _ START _ BOUND ; <nl> + ClusteringPrefix . Kind ek = INCL _ END _ BOUND ; <nl> <nl> / / filter falls entirely before sstable <nl> Slice slice = Slice . make ( makeBound ( sk , 0 , 0 , 0 ) , makeBound ( ek , 1 , 0 , 0 ) ) ; <nl> @ @ - 274 , 8 + 275 , 8 @ @ public class SliceTest <nl> types . add ( Int32Type . instance ) ; <nl> ClusteringComparator cc = new ClusteringComparator ( types ) ; <nl> <nl> - ClusteringPrefix . Kind sk = ClusteringPrefix . Kind . INCL _ START _ BOUND ; <nl> - ClusteringPrefix . Kind ek = ClusteringPrefix . Kind . INCL _ END _ BOUND ; <nl> + ClusteringPrefix . Kind sk = INCL _ START _ BOUND ; <nl> + ClusteringPrefix . Kind ek = INCL _ END _ BOUND ; <nl> <nl> / / slice does intersect <nl> Slice slice = Slice . make ( makeBound ( sk ) , makeBound ( ek ) ) ; <nl> @ @ - 323 , 6 + 324 , 26 @ @ public class SliceTest <nl> assertSlicesNormalization ( cc , slices ( s ( - 1 , 2 ) , s ( - 1 , 3 ) , s ( 5 , 9 ) ) , slices ( s ( - 1 , 3 ) , s ( 5 , 9 ) ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testIsEmpty ( ) <nl> + { <nl> + List < AbstractType < ? > > types = new ArrayList < > ( ) ; <nl> + types . add ( Int32Type . instance ) ; <nl> + types . add ( Int32Type . instance ) ; <nl> + ClusteringComparator cc = new ClusteringComparator ( types ) ; <nl> + <nl> + assertFalse ( Slice . isEmpty ( cc , makeBound ( INCL _ START _ BOUND , 5 , 0 ) , makeBound ( INCL _ END _ BOUND , 5 , 0 ) ) ) ; <nl> + assertFalse ( Slice . isEmpty ( cc , makeBound ( INCL _ START _ BOUND , 5 , 0 ) , makeBound ( EXCL _ END _ BOUND , 5 , 1 ) ) ) ; <nl> + assertFalse ( Slice . isEmpty ( cc , makeBound ( INCL _ START _ BOUND , 5 ) , makeBound ( EXCL _ END _ BOUND , 5 , 1 ) ) ) ; <nl> + <nl> + assertTrue ( Slice . isEmpty ( cc , makeBound ( EXCL _ START _ BOUND , 5 ) , makeBound ( EXCL _ END _ BOUND , 5 ) ) ) ; <nl> + assertTrue ( Slice . isEmpty ( cc , makeBound ( EXCL _ START _ BOUND , 5 ) , makeBound ( EXCL _ END _ BOUND , 5 , 1 ) ) ) ; <nl> + assertTrue ( Slice . isEmpty ( cc , makeBound ( EXCL _ START _ BOUND , 5 , 1 ) , makeBound ( EXCL _ END _ BOUND , 5 , 1 ) ) ) ; <nl> + assertTrue ( Slice . isEmpty ( cc , makeBound ( INCL _ START _ BOUND , 5 , 0 ) , makeBound ( INCL _ END _ BOUND , 4 , 0 ) ) ) ; <nl> + assertTrue ( Slice . isEmpty ( cc , makeBound ( INCL _ START _ BOUND , 5 , 0 ) , makeBound ( EXCL _ END _ BOUND , 5 ) ) ) ; <nl> + assertTrue ( Slice . isEmpty ( cc , makeBound ( INCL _ START _ BOUND , 5 , 0 ) , makeBound ( EXCL _ END _ BOUND , 3 , 0 ) ) ) ; <nl> + } <nl> + <nl> private static ClusteringBound makeBound ( ClusteringPrefix . Kind kind , Integer . . . components ) <nl> { <nl> ByteBuffer [ ] values = new ByteBuffer [ components . length ] ; <nl> @ @ - 343 , 8 + 364 , 8 @ @ public class SliceTest <nl> <nl> private static Slice s ( int start , int finish ) <nl> { <nl> - return Slice . make ( makeBound ( ClusteringPrefix . Kind . INCL _ START _ BOUND , start ) , <nl> - makeBound ( ClusteringPrefix . Kind . INCL _ END _ BOUND , finish ) ) ; <nl> + return Slice . make ( makeBound ( INCL _ START _ BOUND , start ) , <nl> + makeBound ( INCL _ END _ BOUND , finish ) ) ; <nl> } <nl> <nl> private Slice [ ] slices ( Slice . . . slices )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9b4ab59 . . bde5b52 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Catch empty / invalid bounds in SelectStatement ( CASSANDRA - 14849 ) 
 * Auto - expand replication _ factor for NetworkTopologyStrategy ( CASSANDRA - 14303 ) 
 * Transient Replication : support EACH _ QUORUM ( CASSANDRA - 14727 ) 
 * BufferPool : allocating thread for new chunks should acquire directly ( CASSANDRA - 14832 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index f847a6e . . 6e52ab1 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . cql3 . statements ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . base . MoreObjects ; 
 
 import org . slf4j . Logger ; 
 @ @ - 625 , 7 + 626 , 8 @ @ public class SelectStatement implements CQLStatement 
 return new ClusteringIndexNamesFilter ( clusterings , isReversed ) ; 
 } 
 
 - private Slices makeSlices ( QueryOptions options ) 
 + @ VisibleForTesting 
 + public Slices makeSlices ( QueryOptions options ) 
 throws InvalidRequestException 
 { 
 SortedSet < ClusteringBound > startBounds = restrictions . getClusteringColumnsBounds ( Bound . START , options ) ; 
 @ @ - 637 , 7 + 639 , 7 @ @ public class SelectStatement implements CQLStatement 
 { 
 ClusteringBound start = startBounds . first ( ) ; 
 ClusteringBound end = endBounds . first ( ) ; 
 - return table . comparator . compare ( start , end ) > 0 
 + return Slice . isEmpty ( table . comparator , start , end ) 
 ? Slices . NONE 
 : Slices . with ( table . comparator , Slice . make ( start , end ) ) ; 
 } 
 @ @ - 651 , 7 + 653 , 7 @ @ public class SelectStatement implements CQLStatement 
 ClusteringBound end = endIter . next ( ) ; 
 
 / / Ignore slices that are nonsensical 
 - if ( table . comparator . compare ( start , end ) > 0 ) 
 + if ( Slice . isEmpty ( table . comparator , start , end ) ) 
 continue ; 
 
 builder . add ( start , end ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / Slice . java b / src / java / org / apache / cassandra / db / Slice . java 
 index 2517186 . . 44f7ac3 100644 
 - - - a / src / java / org / apache / cassandra / db / Slice . java 
 + + + b / src / java / org / apache / cassandra / db / Slice . java 
 @ @ - 159 , 7 + 159 , 15 @ @ public class Slice 
 public static boolean isEmpty ( ClusteringComparator comparator , ClusteringBound start , ClusteringBound end ) 
 { 
 assert start . isStart ( ) & & end . isEnd ( ) ; 
 - return comparator . compare ( end , start ) < = 0 ; 
 + 
 + int cmp = comparator . compare ( start , end ) ; 
 + 
 + if ( cmp < 0 ) 
 + return false ; 
 + else if ( cmp > 0 ) 
 + return true ; 
 + else 
 + return start . isExclusive ( ) | | end . isExclusive ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / db / Slices . java b / src / java / org / apache / cassandra / db / Slices . java 
 index 9900112 . . 9c7da79 100644 
 - - - a / src / java / org / apache / cassandra / db / Slices . java 
 + + + b / src / java / org / apache / cassandra / db / Slices . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 + import com . google . common . base . Preconditions ; 
 import com . google . common . collect . Iterators ; 
 
 import org . apache . cassandra . schema . ColumnMetadata ; 
 @ @ - 61 , 7 + 62 , 7 @ @ public abstract class Slices implements Iterable < Slice > 
 if ( slice . start ( ) = = ClusteringBound . BOTTOM & & slice . end ( ) = = ClusteringBound . TOP ) 
 return Slices . ALL ; 
 
 - assert comparator . compare ( slice . start ( ) , slice . end ( ) ) < = 0 ; 
 + Preconditions . checkArgument ( ! slice . isEmpty ( comparator ) ) ; 
 return new ArrayBackedSlices ( comparator , new Slice [ ] { slice } ) ; 
 } 
 
 @ @ - 192 , 7 + 193 , 7 @ @ public abstract class Slices implements Iterable < Slice > 
 
 public Builder add ( Slice slice ) 
 { 
 - assert comparator . compare ( slice . start ( ) , slice . end ( ) ) < = 0 ; 
 + Preconditions . checkArgument ( ! slice . isEmpty ( comparator ) ) ; 
 if ( slices . size ( ) > 0 & & comparator . compare ( slices . get ( slices . size ( ) - 1 ) . end ( ) , slice . start ( ) ) > 0 ) 
 needsNormalizing = true ; 
 slices . add ( slice ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / statements / SelectStatementTest . java b / test / unit / org / apache / cassandra / cql3 / statements / SelectStatementTest . java 
 new file mode 100644 
 index 0000000 . . 5856bce 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / cql3 / statements / SelectStatementTest . java 
 @ @ - 0 , 0 + 1 , 63 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . cql3 . statements ; 
 + 
 + import org . junit . Assert ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . cql3 . CQLStatement ; 
 + import org . apache . cassandra . cql3 . QueryOptions ; 
 + import org . apache . cassandra . cql3 . QueryProcessor ; 
 + import org . apache . cassandra . db . Slices ; 
 + import org . apache . cassandra . schema . KeyspaceParams ; 
 + import org . apache . cassandra . service . ClientState ; 
 + 
 + public class SelectStatementTest 
 + { 
 + 
 + private static final String KEYSPACE = " ks " ; 
 + 
 + @ BeforeClass 
 + public static void setupClass ( ) 
 + { 
 + DatabaseDescriptor . daemonInitialization ( ) ; 
 + SchemaLoader . prepareServer ( ) ; 
 + SchemaLoader . createKeyspace ( KEYSPACE , KeyspaceParams . simple ( 1 ) ) ; 
 + } 
 + 
 + private static SelectStatement parseSelect ( String query ) 
 + { 
 + CQLStatement stmt = QueryProcessor . parseStatement ( query ) . prepare ( ClientState . forInternalCalls ( ) ) ; 
 + assert stmt instanceof SelectStatement ; 
 + return ( SelectStatement ) stmt ; 
 + } 
 + 
 + @ Test 
 + public void testNonsensicalBounds ( ) 
 + { 
 + QueryProcessor . executeOnceInternal ( " CREATE TABLE ks . tbl ( k int , c int , v int , primary key ( k , c ) ) " ) ; 
 + QueryProcessor . executeOnceInternal ( " INSERT INTO ks . tbl ( k , c , v ) VALUES ( 100 , 10 , 0 ) " ) ; 
 + Assert . assertEquals ( Slices . NONE , parseSelect ( " SELECT * FROM ks . tbl WHERE k = 100 AND c > 10 AND c < = 10 " ) . makeSlices ( QueryOptions . DEFAULT ) ) ; 
 + Assert . assertEquals ( Slices . NONE , parseSelect ( " SELECT * FROM ks . tbl WHERE k = 100 AND c < 10 AND c > = 10 " ) . makeSlices ( QueryOptions . DEFAULT ) ) ; 
 + Assert . assertEquals ( Slices . NONE , parseSelect ( " SELECT * FROM ks . tbl WHERE k = 100 AND c < 10 AND c > 10 " ) . makeSlices ( QueryOptions . DEFAULT ) ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / db / filter / SliceTest . java b / test / unit / org / apache / cassandra / db / filter / SliceTest . java 
 index 9188c94 . . 6c04500 100644 
 - - - a / test / unit / org / apache / cassandra / db / filter / SliceTest . java 
 + + + b / test / unit / org / apache / cassandra / db / filter / SliceTest . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . db . marshal . Int32Type ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 + import static org . apache . cassandra . db . ClusteringPrefix . Kind . * ; 
 import static org . junit . Assert . * ; 
 
 public class SliceTest 
 @ @ - 43 , 8 + 44 , 8 @ @ public class SliceTest 
 types . add ( Int32Type . instance ) ; 
 ClusteringComparator cc = new ClusteringComparator ( types ) ; 
 
 - ClusteringPrefix . Kind sk = ClusteringPrefix . Kind . INCL _ START _ BOUND ; 
 - ClusteringPrefix . Kind ek = ClusteringPrefix . Kind . INCL _ END _ BOUND ; 
 + ClusteringPrefix . Kind sk = INCL _ START _ BOUND ; 
 + ClusteringPrefix . Kind ek = INCL _ END _ BOUND ; 
 
 / / filter falls entirely before sstable 
 Slice slice = Slice . make ( makeBound ( sk , 0 , 0 , 0 ) , makeBound ( ek , 1 , 0 , 0 ) ) ; 
 @ @ - 274 , 8 + 275 , 8 @ @ public class SliceTest 
 types . add ( Int32Type . instance ) ; 
 ClusteringComparator cc = new ClusteringComparator ( types ) ; 
 
 - ClusteringPrefix . Kind sk = ClusteringPrefix . Kind . INCL _ START _ BOUND ; 
 - ClusteringPrefix . Kind ek = ClusteringPrefix . Kind . INCL _ END _ BOUND ; 
 + ClusteringPrefix . Kind sk = INCL _ START _ BOUND ; 
 + ClusteringPrefix . Kind ek = INCL _ END _ BOUND ; 
 
 / / slice does intersect 
 Slice slice = Slice . make ( makeBound ( sk ) , makeBound ( ek ) ) ; 
 @ @ - 323 , 6 + 324 , 26 @ @ public class SliceTest 
 assertSlicesNormalization ( cc , slices ( s ( - 1 , 2 ) , s ( - 1 , 3 ) , s ( 5 , 9 ) ) , slices ( s ( - 1 , 3 ) , s ( 5 , 9 ) ) ) ; 
 } 
 
 + @ Test 
 + public void testIsEmpty ( ) 
 + { 
 + List < AbstractType < ? > > types = new ArrayList < > ( ) ; 
 + types . add ( Int32Type . instance ) ; 
 + types . add ( Int32Type . instance ) ; 
 + ClusteringComparator cc = new ClusteringComparator ( types ) ; 
 + 
 + assertFalse ( Slice . isEmpty ( cc , makeBound ( INCL _ START _ BOUND , 5 , 0 ) , makeBound ( INCL _ END _ BOUND , 5 , 0 ) ) ) ; 
 + assertFalse ( Slice . isEmpty ( cc , makeBound ( INCL _ START _ BOUND , 5 , 0 ) , makeBound ( EXCL _ END _ BOUND , 5 , 1 ) ) ) ; 
 + assertFalse ( Slice . isEmpty ( cc , makeBound ( INCL _ START _ BOUND , 5 ) , makeBound ( EXCL _ END _ BOUND , 5 , 1 ) ) ) ; 
 + 
 + assertTrue ( Slice . isEmpty ( cc , makeBound ( EXCL _ START _ BOUND , 5 ) , makeBound ( EXCL _ END _ BOUND , 5 ) ) ) ; 
 + assertTrue ( Slice . isEmpty ( cc , makeBound ( EXCL _ START _ BOUND , 5 ) , makeBound ( EXCL _ END _ BOUND , 5 , 1 ) ) ) ; 
 + assertTrue ( Slice . isEmpty ( cc , makeBound ( EXCL _ START _ BOUND , 5 , 1 ) , makeBound ( EXCL _ END _ BOUND , 5 , 1 ) ) ) ; 
 + assertTrue ( Slice . isEmpty ( cc , makeBound ( INCL _ START _ BOUND , 5 , 0 ) , makeBound ( INCL _ END _ BOUND , 4 , 0 ) ) ) ; 
 + assertTrue ( Slice . isEmpty ( cc , makeBound ( INCL _ START _ BOUND , 5 , 0 ) , makeBound ( EXCL _ END _ BOUND , 5 ) ) ) ; 
 + assertTrue ( Slice . isEmpty ( cc , makeBound ( INCL _ START _ BOUND , 5 , 0 ) , makeBound ( EXCL _ END _ BOUND , 3 , 0 ) ) ) ; 
 + } 
 + 
 private static ClusteringBound makeBound ( ClusteringPrefix . Kind kind , Integer . . . components ) 
 { 
 ByteBuffer [ ] values = new ByteBuffer [ components . length ] ; 
 @ @ - 343 , 8 + 364 , 8 @ @ public class SliceTest 
 
 private static Slice s ( int start , int finish ) 
 { 
 - return Slice . make ( makeBound ( ClusteringPrefix . Kind . INCL _ START _ BOUND , start ) , 
 - makeBound ( ClusteringPrefix . Kind . INCL _ END _ BOUND , finish ) ) ; 
 + return Slice . make ( makeBound ( INCL _ START _ BOUND , start ) , 
 + makeBound ( INCL _ END _ BOUND , finish ) ) ; 
 } 
 
 private Slice [ ] slices ( Slice . . . slices )

NEAREST DIFF:
ELIMINATEDSENTENCE
