BLEU SCORE: 1.0

TEST MSG: Add forgotten test
GENERATED MSG: Add forgotten test

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / metrics / LatencyMetricsTest . java b / test / unit / org / apache / cassandra / metrics / LatencyMetricsTest . java <nl> new file mode 100644 <nl> index 0000000 . . e5f0804 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / metrics / LatencyMetricsTest . java <nl> @ @ - 0 , 0 + 1 , 50 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . metrics ; <nl> + <nl> + import org . junit . Test ; <nl> + import static junit . framework . Assert . assertFalse ; <nl> + <nl> + public class LatencyMetricsTest <nl> + { <nl> + / * * <nl> + * Test bitsets in a " real - world " environment , i . e . , bloom filters <nl> + * / <nl> + @ Test <nl> + public void testGetRecentLatency ( ) <nl> + { <nl> + final LatencyMetrics l = new LatencyMetrics ( " test " , " test " ) ; <nl> + Runnable r = new Runnable ( ) <nl> + { <nl> + public void run ( ) <nl> + { <nl> + for ( int i = 0 ; i < 10000 ; i + + ) <nl> + { <nl> + l . addNano ( 1000 ) ; <nl> + } <nl> + } <nl> + } ; <nl> + new Thread ( r ) . start ( ) ; <nl> + <nl> + for ( int i = 0 ; i < 10000 ; i + + ) <nl> + { <nl> + Double recent = l . getRecentLatency ( ) ; <nl> + assertFalse ( recent . equals ( Double . POSITIVE _ INFINITY ) ) ; <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / metrics / LatencyMetricsTest . java b / test / unit / org / apache / cassandra / metrics / LatencyMetricsTest . java 
 new file mode 100644 
 index 0000000 . . e5f0804 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / metrics / LatencyMetricsTest . java 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . metrics ; 
 + 
 + import org . junit . Test ; 
 + import static junit . framework . Assert . assertFalse ; 
 + 
 + public class LatencyMetricsTest 
 + { 
 + / * * 
 + * Test bitsets in a " real - world " environment , i . e . , bloom filters 
 + * / 
 + @ Test 
 + public void testGetRecentLatency ( ) 
 + { 
 + final LatencyMetrics l = new LatencyMetrics ( " test " , " test " ) ; 
 + Runnable r = new Runnable ( ) 
 + { 
 + public void run ( ) 
 + { 
 + for ( int i = 0 ; i < 10000 ; i + + ) 
 + { 
 + l . addNano ( 1000 ) ; 
 + } 
 + } 
 + } ; 
 + new Thread ( r ) . start ( ) ; 
 + 
 + for ( int i = 0 ; i < 10000 ; i + + ) 
 + { 
 + Double recent = l . getRecentLatency ( ) ; 
 + assertFalse ( recent . equals ( Double . POSITIVE _ INFINITY ) ) ; 
 + } 
 + } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
ELIMINATEDSENTENCE
