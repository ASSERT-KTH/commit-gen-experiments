BLEU SCORE: 0.018738883683389617

TEST MSG: Handling adding UDT fields in SELECT JSON and toJson ( )
GENERATED MSG: Make aggregates work with reversed types

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7cbfea7 . . c85fc45 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 6 <nl> + * Handle adding fields to a UDT in SELECT JSON and toJson ( ) ( CASSANDRA - 11146 ) <nl> * Better error message for cleanup ( CASSANDRA - 10991 ) <nl> * cqlsh pg - style - strings broken if line ends with ' ; ' ( CASSANDRA - 11123 ) <nl> * Use cloned TokenMetadata in size estimates to avoid race against membership check <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / UserType . java b / src / java / org / apache / cassandra / db / marshal / UserType . java <nl> index 40a35b5 . . 6102d26 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / UserType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / UserType . java <nl> @ @ - 209 , 7 + 209 , 7 @ @ public class UserType extends TupleType <nl> sb . append ( Json . quoteAsJsonString ( name ) ) ; <nl> sb . append ( " \ " : " ) ; <nl> <nl> - ByteBuffer valueBuffer = buffers [ i ] ; <nl> + ByteBuffer valueBuffer = ( i > = buffers . length ) ? null : buffers [ i ] ; <nl> if ( valueBuffer = = null ) <nl> sb . append ( " null " ) ; <nl> else <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java <nl> index 57df1e6 . . 2c234cb 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java <nl> @ @ - 958 , 6 + 958 , 25 @ @ public class JsonTest extends CQLTester <nl> assertRows ( execute ( " SELECT k , a . a , a . b , a . c , b FROM % s " ) , row ( 0 , 0 , set ( 1 , 2 , 3 ) , null , null ) ) ; <nl> } <nl> <nl> + / / done for CASSANDRA - 11146 <nl> + @ Test <nl> + public void testAlterUDT ( ) throws Throwable <nl> + { <nl> + String typeName = createType ( " CREATE TYPE % s ( a int ) " ) ; <nl> + createTable ( " CREATE TABLE % s ( " + <nl> + " k int PRIMARY KEY , " + <nl> + " a frozen < " + typeName + " > ) " ) ; <nl> + <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " a \ " : { \ " a \ " : 0 } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON * FROM % s " ) , row ( " { \ " k \ " : 0 , \ " a \ " : { \ " a \ " : 0 } } " ) ) ; <nl> + <nl> + schemaChange ( " ALTER TYPE " + KEYSPACE + " . " + typeName + " ADD b boolean " ) ; <nl> + assertRows ( execute ( " SELECT JSON * FROM % s " ) , row ( " { \ " k \ " : 0 , \ " a \ " : { \ " a \ " : 0 , \ " b \ " : null } } " ) ) ; <nl> + <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " a \ " : { \ " a \ " : 0 , \ " b \ " : true } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON * FROM % s " ) , row ( " { \ " k \ " : 0 , \ " a \ " : { \ " a \ " : 0 , \ " b \ " : true } } " ) ) ; <nl> + } <nl> + <nl> / / done for CASSANDRA - 11048 <nl> @ Test <nl> public void testJsonTreadSafety ( ) throws Throwable
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7cbfea7 . . c85fc45 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 6 
 + * Handle adding fields to a UDT in SELECT JSON and toJson ( ) ( CASSANDRA - 11146 ) 
 * Better error message for cleanup ( CASSANDRA - 10991 ) 
 * cqlsh pg - style - strings broken if line ends with ' ; ' ( CASSANDRA - 11123 ) 
 * Use cloned TokenMetadata in size estimates to avoid race against membership check 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / UserType . java b / src / java / org / apache / cassandra / db / marshal / UserType . java 
 index 40a35b5 . . 6102d26 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / UserType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / UserType . java 
 @ @ - 209 , 7 + 209 , 7 @ @ public class UserType extends TupleType 
 sb . append ( Json . quoteAsJsonString ( name ) ) ; 
 sb . append ( " \ " : " ) ; 
 
 - ByteBuffer valueBuffer = buffers [ i ] ; 
 + ByteBuffer valueBuffer = ( i > = buffers . length ) ? null : buffers [ i ] ; 
 if ( valueBuffer = = null ) 
 sb . append ( " null " ) ; 
 else 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java 
 index 57df1e6 . . 2c234cb 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java 
 @ @ - 958 , 6 + 958 , 25 @ @ public class JsonTest extends CQLTester 
 assertRows ( execute ( " SELECT k , a . a , a . b , a . c , b FROM % s " ) , row ( 0 , 0 , set ( 1 , 2 , 3 ) , null , null ) ) ; 
 } 
 
 + / / done for CASSANDRA - 11146 
 + @ Test 
 + public void testAlterUDT ( ) throws Throwable 
 + { 
 + String typeName = createType ( " CREATE TYPE % s ( a int ) " ) ; 
 + createTable ( " CREATE TABLE % s ( " + 
 + " k int PRIMARY KEY , " + 
 + " a frozen < " + typeName + " > ) " ) ; 
 + 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " a \ " : { \ " a \ " : 0 } } " ) ; 
 + assertRows ( execute ( " SELECT JSON * FROM % s " ) , row ( " { \ " k \ " : 0 , \ " a \ " : { \ " a \ " : 0 } } " ) ) ; 
 + 
 + schemaChange ( " ALTER TYPE " + KEYSPACE + " . " + typeName + " ADD b boolean " ) ; 
 + assertRows ( execute ( " SELECT JSON * FROM % s " ) , row ( " { \ " k \ " : 0 , \ " a \ " : { \ " a \ " : 0 , \ " b \ " : null } } " ) ) ; 
 + 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " a \ " : { \ " a \ " : 0 , \ " b \ " : true } } " ) ; 
 + assertRows ( execute ( " SELECT JSON * FROM % s " ) , row ( " { \ " k \ " : 0 , \ " a \ " : { \ " a \ " : 0 , \ " b \ " : true } } " ) ) ; 
 + } 
 + 
 / / done for CASSANDRA - 11048 
 @ Test 
 public void testJsonTreadSafety ( ) throws Throwable

NEAREST DIFF:
ELIMINATEDSENTENCE
