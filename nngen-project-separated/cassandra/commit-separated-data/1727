BLEU SCORE: 0.2259005009024612

TEST MSG: ninja fix MessagePayloadTest
GENERATED MSG: reformat

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / transport / MessagePayloadTest . java b / test / unit / org / apache / cassandra / transport / MessagePayloadTest . java <nl> index afb738a . . 1049d63 100644 <nl> - - - a / test / unit / org / apache / cassandra / transport / MessagePayloadTest . java <nl> + + + b / test / unit / org / apache / cassandra / transport / MessagePayloadTest . java <nl> @ @ - 210 , 9 + 210 , 9 @ @ public class MessagePayloadTest extends CQLTester <nl> client . execute ( queryMessage ) ; <nl> Assert . fail ( ) ; <nl> } <nl> - catch ( ProtocolException e ) <nl> + catch ( RuntimeException e ) <nl> { <nl> - / / that ' s what we want <nl> + Assert . assertTrue ( e . getCause ( ) instanceof ProtocolException ) ; <nl> } <nl> queryMessage . setCustomPayload ( null ) ; <nl> client . execute ( queryMessage ) ; <nl> @ @ - 225 , 9 + 225 , 9 @ @ public class MessagePayloadTest extends CQLTester <nl> client . execute ( prepareMessage ) ; <nl> Assert . fail ( ) ; <nl> } <nl> - catch ( ProtocolException e ) <nl> + catch ( RuntimeException e ) <nl> { <nl> - / / that ' s what we want <nl> + Assert . assertTrue ( e . getCause ( ) instanceof ProtocolException ) ; <nl> } <nl> prepareMessage . setCustomPayload ( null ) ; <nl> ResultMessage . Prepared prepareResponse = ( ResultMessage . Prepared ) client . execute ( prepareMessage ) ; <nl> @ @ - 241 , 9 + 241 , 9 @ @ public class MessagePayloadTest extends CQLTester <nl> client . execute ( executeMessage ) ; <nl> Assert . fail ( ) ; <nl> } <nl> - catch ( ProtocolException e ) <nl> + catch ( RuntimeException e ) <nl> { <nl> - / / that ' s what we want <nl> + Assert . assertTrue ( e . getCause ( ) instanceof ProtocolException ) ; <nl> } <nl> <nl> BatchMessage batchMessage = new BatchMessage ( BatchStatement . Type . UNLOGGED , <nl> @ @ - 258 , 9 + 258 , 9 @ @ public class MessagePayloadTest extends CQLTester <nl> client . execute ( batchMessage ) ; <nl> Assert . fail ( ) ; <nl> } <nl> - catch ( ProtocolException e ) <nl> + catch ( RuntimeException e ) <nl> { <nl> - / / that ' s what we want <nl> + Assert . assertTrue ( e . getCause ( ) instanceof ProtocolException ) ; <nl> } <nl> } <nl> finally
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index bd0b0e5 . . 4cf521f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 26 , 6 + 26 , 7 @ @ <nl> * fix for reversed slice queries on large rows ( CASSANDRA - 2212 ) <nl> * fat clients were writing local data ( CASSANDRA - 2223 ) <nl> * turn off string interning in json2sstable ( CASSANDRA - 2189 ) <nl> + * set DEFAULT _ MEMTABLE _ LIFETIME _ IN _ MINS to 24h <nl> <nl> <nl> 0 . 7 . 2 <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index e8c414e . . 7e8b7ac 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 56 , 7 + 56 , 7 @ @ public final class CFMetaData <nl> public final static int DEFAULT _ GC _ GRACE _ SECONDS = 864000 ; <nl> public final static int DEFAULT _ MIN _ COMPACTION _ THRESHOLD = 4 ; <nl> public final static int DEFAULT _ MAX _ COMPACTION _ THRESHOLD = 32 ; <nl> - public final static int DEFAULT _ MEMTABLE _ LIFETIME _ IN _ MINS = 60 ; <nl> + public final static int DEFAULT _ MEMTABLE _ LIFETIME _ IN _ MINS = 60 * 24 ; <nl> public final static int DEFAULT _ MEMTABLE _ THROUGHPUT _ IN _ MB = sizeMemtableThroughput ( ) ; <nl> public final static double DEFAULT _ MEMTABLE _ OPERATIONS _ IN _ MILLIONS = sizeMemtableOperations ( DEFAULT _ MEMTABLE _ THROUGHPUT _ IN _ MB ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / Descriptor . java b / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> index effeb82 . . 9e762b1 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> @ @ - 199 , 7 + 199 , 11 @ @ public class Descriptor <nl> if ( ! ( o instanceof Descriptor ) ) <nl> return false ; <nl> Descriptor that = ( Descriptor ) o ; <nl> - return that . directory . equals ( this . directory ) & & that . generation = = this . generation & & that . ksname . equals ( this . ksname ) & & that . cfname . equals ( this . cfname ) ; <nl> + return that . directory . equals ( this . directory ) <nl> + & & that . generation = = this . generation <nl> + & & that . ksname . equals ( this . ksname ) <nl> + & & that . cfname . equals ( this . cfname ) <nl> + & & that . temporary = = this . temporary ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> index 3e52ad7 . . 14f4aee 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> @ @ - 22 , 9 + 22 , 12 @ @ package org . apache . cassandra . io . sstable ; <nl> import java . io . * ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . Arrays ; <nl> + import java . util . Collections ; <nl> import java . util . HashSet ; <nl> import java . util . Set ; <nl> <nl> + import com . google . common . collect . Sets ; <nl> + <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 204 , 8 + 207 , 10 @ @ public class SSTableWriter extends SSTable <nl> Descriptor newdesc = tmpdesc . asTemporary ( false ) ; <nl> try <nl> { <nl> - for ( Component component : components ) <nl> + / / do - Data last because - Data present should mean the sstable was completely renamed before crash <nl> + for ( Component component : Sets . difference ( components , Collections . singleton ( Component . DATA ) ) ) <nl> FBUtilities . renameWithConfirm ( tmpdesc . filenameFor ( component ) , newdesc . filenameFor ( component ) ) ; <nl> + FBUtilities . renameWithConfirm ( tmpdesc . filenameFor ( Component . DATA ) , newdesc . filenameFor ( Component . DATA ) ) ; <nl> } <nl> catch ( IOException e ) <nl> {

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / transport / MessagePayloadTest . java b / test / unit / org / apache / cassandra / transport / MessagePayloadTest . java 
 index afb738a . . 1049d63 100644 
 - - - a / test / unit / org / apache / cassandra / transport / MessagePayloadTest . java 
 + + + b / test / unit / org / apache / cassandra / transport / MessagePayloadTest . java 
 @ @ - 210 , 9 + 210 , 9 @ @ public class MessagePayloadTest extends CQLTester 
 client . execute ( queryMessage ) ; 
 Assert . fail ( ) ; 
 } 
 - catch ( ProtocolException e ) 
 + catch ( RuntimeException e ) 
 { 
 - / / that ' s what we want 
 + Assert . assertTrue ( e . getCause ( ) instanceof ProtocolException ) ; 
 } 
 queryMessage . setCustomPayload ( null ) ; 
 client . execute ( queryMessage ) ; 
 @ @ - 225 , 9 + 225 , 9 @ @ public class MessagePayloadTest extends CQLTester 
 client . execute ( prepareMessage ) ; 
 Assert . fail ( ) ; 
 } 
 - catch ( ProtocolException e ) 
 + catch ( RuntimeException e ) 
 { 
 - / / that ' s what we want 
 + Assert . assertTrue ( e . getCause ( ) instanceof ProtocolException ) ; 
 } 
 prepareMessage . setCustomPayload ( null ) ; 
 ResultMessage . Prepared prepareResponse = ( ResultMessage . Prepared ) client . execute ( prepareMessage ) ; 
 @ @ - 241 , 9 + 241 , 9 @ @ public class MessagePayloadTest extends CQLTester 
 client . execute ( executeMessage ) ; 
 Assert . fail ( ) ; 
 } 
 - catch ( ProtocolException e ) 
 + catch ( RuntimeException e ) 
 { 
 - / / that ' s what we want 
 + Assert . assertTrue ( e . getCause ( ) instanceof ProtocolException ) ; 
 } 
 
 BatchMessage batchMessage = new BatchMessage ( BatchStatement . Type . UNLOGGED , 
 @ @ - 258 , 9 + 258 , 9 @ @ public class MessagePayloadTest extends CQLTester 
 client . execute ( batchMessage ) ; 
 Assert . fail ( ) ; 
 } 
 - catch ( ProtocolException e ) 
 + catch ( RuntimeException e ) 
 { 
 - / / that ' s what we want 
 + Assert . assertTrue ( e . getCause ( ) instanceof ProtocolException ) ; 
 } 
 } 
 finally

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index bd0b0e5 . . 4cf521f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 26 , 6 + 26 , 7 @ @ 
 * fix for reversed slice queries on large rows ( CASSANDRA - 2212 ) 
 * fat clients were writing local data ( CASSANDRA - 2223 ) 
 * turn off string interning in json2sstable ( CASSANDRA - 2189 ) 
 + * set DEFAULT _ MEMTABLE _ LIFETIME _ IN _ MINS to 24h 
 
 
 0 . 7 . 2 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index e8c414e . . 7e8b7ac 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 56 , 7 + 56 , 7 @ @ public final class CFMetaData 
 public final static int DEFAULT _ GC _ GRACE _ SECONDS = 864000 ; 
 public final static int DEFAULT _ MIN _ COMPACTION _ THRESHOLD = 4 ; 
 public final static int DEFAULT _ MAX _ COMPACTION _ THRESHOLD = 32 ; 
 - public final static int DEFAULT _ MEMTABLE _ LIFETIME _ IN _ MINS = 60 ; 
 + public final static int DEFAULT _ MEMTABLE _ LIFETIME _ IN _ MINS = 60 * 24 ; 
 public final static int DEFAULT _ MEMTABLE _ THROUGHPUT _ IN _ MB = sizeMemtableThroughput ( ) ; 
 public final static double DEFAULT _ MEMTABLE _ OPERATIONS _ IN _ MILLIONS = sizeMemtableOperations ( DEFAULT _ MEMTABLE _ THROUGHPUT _ IN _ MB ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / Descriptor . java b / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 index effeb82 . . 9e762b1 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 @ @ - 199 , 7 + 199 , 11 @ @ public class Descriptor 
 if ( ! ( o instanceof Descriptor ) ) 
 return false ; 
 Descriptor that = ( Descriptor ) o ; 
 - return that . directory . equals ( this . directory ) & & that . generation = = this . generation & & that . ksname . equals ( this . ksname ) & & that . cfname . equals ( this . cfname ) ; 
 + return that . directory . equals ( this . directory ) 
 + & & that . generation = = this . generation 
 + & & that . ksname . equals ( this . ksname ) 
 + & & that . cfname . equals ( this . cfname ) 
 + & & that . temporary = = this . temporary ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 index 3e52ad7 . . 14f4aee 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 @ @ - 22 , 9 + 22 , 12 @ @ package org . apache . cassandra . io . sstable ; 
 import java . io . * ; 
 import java . nio . ByteBuffer ; 
 import java . util . Arrays ; 
 + import java . util . Collections ; 
 import java . util . HashSet ; 
 import java . util . Set ; 
 
 + import com . google . common . collect . Sets ; 
 + 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 204 , 8 + 207 , 10 @ @ public class SSTableWriter extends SSTable 
 Descriptor newdesc = tmpdesc . asTemporary ( false ) ; 
 try 
 { 
 - for ( Component component : components ) 
 + / / do - Data last because - Data present should mean the sstable was completely renamed before crash 
 + for ( Component component : Sets . difference ( components , Collections . singleton ( Component . DATA ) ) ) 
 FBUtilities . renameWithConfirm ( tmpdesc . filenameFor ( component ) , newdesc . filenameFor ( component ) ) ; 
 + FBUtilities . renameWithConfirm ( tmpdesc . filenameFor ( Component . DATA ) , newdesc . filenameFor ( Component . DATA ) ) ; 
 } 
 catch ( IOException e ) 
 {
