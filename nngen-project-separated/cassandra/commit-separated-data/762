BLEU SCORE: 0.0016348267813739235

TEST MSG: fix SSTableSizeSummer ' s file skipping logic
GENERATED MSG: Refactor and optimize ColumnFamilyStore . files ( . . . ) and Descriptor . fromFilename ( String ) and few other places responsible for work with SSTable files

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java <nl> index 87527e8 . . a83c845 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Directories . java <nl> + + + b / src / java / org / apache / cassandra / db / Directories . java <nl> @ @ - 17 , 8 + 17 , 6 @ @ <nl> * / <nl> package org . apache . cassandra . db ; <nl> <nl> - import static com . google . common . collect . Sets . newHashSet ; <nl> - <nl> import java . io . File ; <nl> import java . io . FileFilter ; <nl> import java . io . IOError ; <nl> @ @ - 1014 , 14 + 1012 , 14 @ @ public class Directories <nl> } <nl> <nl> @ Override <nl> - public boolean isAcceptable ( Path file ) <nl> + public boolean isAcceptable ( Path path ) <nl> { <nl> - String fileName = file . toFile ( ) . getName ( ) ; <nl> - Pair < Descriptor , Component > pair = SSTable . tryComponentFromFilename ( file . getParent ( ) . toFile ( ) , fileName ) ; <nl> + File file = path . toFile ( ) ; <nl> + Pair < Descriptor , Component > pair = SSTable . tryComponentFromFilename ( path . getParent ( ) . toFile ( ) , file . getName ( ) ) ; <nl> return pair ! = null <nl> & & pair . left . ksname . equals ( metadata . ksName ) <nl> & & pair . left . cfname . equals ( metadata . cfName ) <nl> - & & ! toSkip . contains ( fileName ) ; <nl> + & & ! toSkip . contains ( file ) ; <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 84cd1e3 . . 4d374df 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 11 , 6 + 11 , 9 @ @ <nl> command to the nodetool ( CASSANDRA - 2991 ) <nl> * make cleanup and normal compaction able to skip empty rows <nl> ( rows containing nothing but expired tombstones ) ( CASSANDRA - 3039 ) <nl> + * work around native memory leak in com . sun . management . GarbageCollectorMXBean <nl> + ( CASSANDRA - 2868 ) <nl> + <nl> <nl> 0 . 8 . 4 <nl> * include files - to - be - streamed in StreamInSession . getSources ( CASSANDRA - 2972 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / GCInspector . java b / src / java / org / apache / cassandra / service / GCInspector . java <nl> index ec0bf80 . . ede0d2b 100644 <nl> - - - a / src / java / org / apache / cassandra / service / GCInspector . java <nl> + + + b / src / java / org / apache / cassandra / service / GCInspector . java <nl> @ @ - 20 , 11 + 20 , 13 @ @ package org . apache . cassandra . service ; <nl> * <nl> * / <nl> <nl> + import java . lang . management . GarbageCollectorMXBean ; <nl> import java . lang . management . ManagementFactory ; <nl> + import java . lang . management . MemoryMXBean ; <nl> import java . lang . management . MemoryUsage ; <nl> - import java . lang . reflect . InvocationTargetException ; <nl> - import java . lang . reflect . Method ; <nl> - import java . util . * ; <nl> + import java . util . ArrayList ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> import java . util . concurrent . TimeUnit ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> @ @ - 45 , 32 + 47 , 22 @ @ public class GCInspector <nl> public static final GCInspector instance = new GCInspector ( ) ; <nl> <nl> private HashMap < String , Long > gctimes = new HashMap < String , Long > ( ) ; <nl> + private HashMap < String , Long > gccounts = new HashMap < String , Long > ( ) ; <nl> + <nl> + List < GarbageCollectorMXBean > beans = new ArrayList < GarbageCollectorMXBean > ( ) ; <nl> + MemoryMXBean membean = ManagementFactory . getMemoryMXBean ( ) ; <nl> <nl> - List < Object > beans = new ArrayList < Object > ( ) ; / / these are instances of com . sun . management . GarbageCollectorMXBean <nl> private volatile boolean cacheSizesReduced ; <nl> <nl> public GCInspector ( ) <nl> { <nl> - / / we only want this class to do its thing on sun jdks , or when the sun classes are present . <nl> - Class gcBeanClass = null ; <nl> - try <nl> - { <nl> - gcBeanClass = Class . forName ( " com . sun . management . GarbageCollectorMXBean " ) ; <nl> - Class . forName ( " com . sun . management . GcInfo " ) ; <nl> - } <nl> - catch ( ClassNotFoundException ex ) <nl> - { <nl> - / / this happens when using a non - sun jdk . <nl> - logger . warn ( " Cannot load sun GC monitoring classes . GCInspector is disabled . " ) ; <nl> - } <nl> - <nl> MBeanServer server = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> try <nl> { <nl> ObjectName gcName = new ObjectName ( ManagementFactory . GARBAGE _ COLLECTOR _ MXBEAN _ DOMAIN _ TYPE + " , * " ) ; <nl> for ( ObjectName name : server . queryNames ( gcName , null ) ) <nl> { <nl> - Object gc = ManagementFactory . newPlatformMXBeanProxy ( server , name . getCanonicalName ( ) , gcBeanClass ) ; <nl> + GarbageCollectorMXBean gc = ManagementFactory . newPlatformMXBeanProxy ( server , name . getCanonicalName ( ) , GarbageCollectorMXBean . class ) ; <nl> beans . add ( gc ) ; <nl> } <nl> } <nl> @ @ - 97 , 43 + 89 , 42 @ @ public class GCInspector <nl> <nl> private void logGCResults ( ) <nl> { <nl> - for ( Object gc : beans ) <nl> + for ( GarbageCollectorMXBean gc : beans ) <nl> { <nl> - SunGcWrapper gcw = new SunGcWrapper ( gc ) ; <nl> - if ( gcw . isLastGcInfoNull ( ) ) <nl> + Long previousTotal = gctimes . get ( gc . getName ( ) ) ; <nl> + Long total = gc . getCollectionTime ( ) ; <nl> + if ( previousTotal = = null ) <nl> + previousTotal = 0L ; <nl> + if ( previousTotal . equals ( total ) ) <nl> continue ; <nl> - <nl> - Long previous = gctimes . get ( gcw . getName ( ) ) ; <nl> - if ( previous ! = null & & previous . longValue ( ) = = gcw . getCollectionTime ( ) . longValue ( ) ) <nl> - continue ; <nl> - gctimes . put ( gcw . getName ( ) , gcw . getCollectionTime ( ) ) ; <nl> - <nl> - long previousMemoryUsed = 0 ; <nl> - long memoryUsed = 0 ; <nl> - long memoryMax = 0 ; <nl> - for ( Map . Entry < String , MemoryUsage > entry : gcw . getMemoryUsageBeforeGc ( ) . entrySet ( ) ) <nl> - { <nl> - previousMemoryUsed + = entry . getValue ( ) . getUsed ( ) ; <nl> - } <nl> - for ( Map . Entry < String , MemoryUsage > entry : gcw . getMemoryUsageAfterGc ( ) . entrySet ( ) ) <nl> - { <nl> - MemoryUsage mu = entry . getValue ( ) ; <nl> - memoryUsed + = mu . getUsed ( ) ; <nl> - memoryMax + = mu . getMax ( ) ; <nl> - } <nl> - <nl> - String st = String . format ( " GC for % s : % s ms , % s reclaimed leaving % s used ; max is % s " , <nl> - gcw . getName ( ) , gcw . getDuration ( ) , previousMemoryUsed - memoryUsed , memoryUsed , memoryMax ) ; <nl> - if ( gcw . getDuration ( ) > MIN _ DURATION ) <nl> + gctimes . put ( gc . getName ( ) , total ) ; <nl> + Long duration = total - previousTotal ; <nl> + assert duration > 0 ; <nl> + <nl> + Long previousCount = gccounts . get ( gc . getName ( ) ) ; <nl> + Long count = gc . getCollectionCount ( ) ; <nl> + if ( previousCount = = null ) <nl> + previousCount = 0L ; <nl> + gccounts . put ( gc . getName ( ) , count ) ; <nl> + assert count > previousCount ; <nl> + <nl> + MemoryUsage mu = membean . getHeapMemoryUsage ( ) ; <nl> + long memoryUsed = mu . getUsed ( ) ; <nl> + long memoryMax = mu . getMax ( ) ; <nl> + <nl> + String st = String . format ( " GC for % s : % s ms for % s collections , % s used ; max is % s " , <nl> + gc . getName ( ) , duration , count - previousCount , memoryUsed , memoryMax ) ; <nl> + long durationPerCollection = duration / ( count - previousCount ) ; <nl> + if ( durationPerCollection > MIN _ DURATION ) <nl> logger . info ( st ) ; <nl> else if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( st ) ; <nl> <nl> - if ( gcw . getDuration ( ) > MIN _ DURATION _ TPSTATS ) <nl> + if ( durationPerCollection > MIN _ DURATION _ TPSTATS ) <nl> StatusLogger . log ( ) ; <nl> <nl> / / if we just finished a full collection and we ' re still using a lot of memory , try to reduce the pressure <nl> - if ( gcw . getName ( ) . equals ( " ConcurrentMarkSweep " ) ) <nl> + if ( gc . getName ( ) . equals ( " ConcurrentMarkSweep " ) ) <nl> { <nl> double usage = ( double ) memoryUsed / memoryMax ; <nl> <nl> @ @ - 152 , 82 + 143 , 4 @ @ public class GCInspector <nl> } <nl> } <nl> } <nl> - <nl> - / / wrapper for sun class . this enables other jdks to compile this class . <nl> - private static final class SunGcWrapper <nl> - { <nl> - <nl> - private Map < String , MemoryUsage > usageBeforeGc = null ; <nl> - private Map < String , MemoryUsage > usageAfterGc = null ; <nl> - private String name ; <nl> - private Long collectionTime ; <nl> - private Long duration ; <nl> - <nl> - SunGcWrapper ( Object gcMxBean ) <nl> - { <nl> - / / if we ' ve gotten this far , we ' ve already verified that the right classes are in the CP . Now we just <nl> - / / need to check for boneheadedness . <nl> - / / grab everything we need here so that we don ' t have to deal with try / catch everywhere . <nl> - try <nl> - { <nl> - assert Class . forName ( " com . sun . management . GarbageCollectorMXBean " ) . isAssignableFrom ( gcMxBean . getClass ( ) ) ; <nl> - Method getGcInfo = gcMxBean . getClass ( ) . getDeclaredMethod ( " getLastGcInfo " ) ; <nl> - Object lastGcInfo = getGcInfo . invoke ( gcMxBean ) ; <nl> - if ( lastGcInfo ! = null ) <nl> - { <nl> - usageBeforeGc = ( Map < String , MemoryUsage > ) lastGcInfo . getClass ( ) . getDeclaredMethod ( " getMemoryUsageBeforeGc " ) . invoke ( lastGcInfo ) ; <nl> - usageAfterGc = ( Map < String , MemoryUsage > ) lastGcInfo . getClass ( ) . getDeclaredMethod ( " getMemoryUsageAfterGc " ) . invoke ( lastGcInfo ) ; <nl> - duration = ( Long ) lastGcInfo . getClass ( ) . getDeclaredMethod ( " getDuration " ) . invoke ( lastGcInfo ) ; <nl> - name = ( String ) gcMxBean . getClass ( ) . getDeclaredMethod ( " getName " ) . invoke ( gcMxBean ) ; <nl> - collectionTime = ( Long ) gcMxBean . getClass ( ) . getDeclaredMethod ( " getCollectionTime " ) . invoke ( gcMxBean ) ; <nl> - } <nl> - } <nl> - catch ( ClassNotFoundException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - catch ( NoSuchMethodException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - catch ( IllegalAccessException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - catch ( InvocationTargetException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> - <nl> - String getName ( ) <nl> - { <nl> - return name ; <nl> - } <nl> - <nl> - Long getCollectionTime ( ) <nl> - { <nl> - return collectionTime ; <nl> - } <nl> - <nl> - Long getDuration ( ) <nl> - { <nl> - return duration ; <nl> - } <nl> - <nl> - Map < String , MemoryUsage > getMemoryUsageAfterGc ( ) <nl> - { <nl> - return usageAfterGc ; <nl> - } <nl> - <nl> - Map < String , MemoryUsage > getMemoryUsageBeforeGc ( ) <nl> - { <nl> - return usageBeforeGc ; <nl> - } <nl> - <nl> - boolean isLastGcInfoNull ( ) <nl> - { <nl> - return usageBeforeGc = = null ; <nl> - } <nl> - } <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java 
 index 87527e8 . . a83c845 100644 
 - - - a / src / java / org / apache / cassandra / db / Directories . java 
 + + + b / src / java / org / apache / cassandra / db / Directories . java 
 @ @ - 17 , 8 + 17 , 6 @ @ 
 * / 
 package org . apache . cassandra . db ; 
 
 - import static com . google . common . collect . Sets . newHashSet ; 
 - 
 import java . io . File ; 
 import java . io . FileFilter ; 
 import java . io . IOError ; 
 @ @ - 1014 , 14 + 1012 , 14 @ @ public class Directories 
 } 
 
 @ Override 
 - public boolean isAcceptable ( Path file ) 
 + public boolean isAcceptable ( Path path ) 
 { 
 - String fileName = file . toFile ( ) . getName ( ) ; 
 - Pair < Descriptor , Component > pair = SSTable . tryComponentFromFilename ( file . getParent ( ) . toFile ( ) , fileName ) ; 
 + File file = path . toFile ( ) ; 
 + Pair < Descriptor , Component > pair = SSTable . tryComponentFromFilename ( path . getParent ( ) . toFile ( ) , file . getName ( ) ) ; 
 return pair ! = null 
 & & pair . left . ksname . equals ( metadata . ksName ) 
 & & pair . left . cfname . equals ( metadata . cfName ) 
 - & & ! toSkip . contains ( fileName ) ; 
 + & & ! toSkip . contains ( file ) ; 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 84cd1e3 . . 4d374df 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 11 , 6 + 11 , 9 @ @ 
 command to the nodetool ( CASSANDRA - 2991 ) 
 * make cleanup and normal compaction able to skip empty rows 
 ( rows containing nothing but expired tombstones ) ( CASSANDRA - 3039 ) 
 + * work around native memory leak in com . sun . management . GarbageCollectorMXBean 
 + ( CASSANDRA - 2868 ) 
 + 
 
 0 . 8 . 4 
 * include files - to - be - streamed in StreamInSession . getSources ( CASSANDRA - 2972 ) 
 diff - - git a / src / java / org / apache / cassandra / service / GCInspector . java b / src / java / org / apache / cassandra / service / GCInspector . java 
 index ec0bf80 . . ede0d2b 100644 
 - - - a / src / java / org / apache / cassandra / service / GCInspector . java 
 + + + b / src / java / org / apache / cassandra / service / GCInspector . java 
 @ @ - 20 , 11 + 20 , 13 @ @ package org . apache . cassandra . service ; 
 * 
 * / 
 
 + import java . lang . management . GarbageCollectorMXBean ; 
 import java . lang . management . ManagementFactory ; 
 + import java . lang . management . MemoryMXBean ; 
 import java . lang . management . MemoryUsage ; 
 - import java . lang . reflect . InvocationTargetException ; 
 - import java . lang . reflect . Method ; 
 - import java . util . * ; 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + import java . util . List ; 
 import java . util . concurrent . TimeUnit ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 @ @ - 45 , 32 + 47 , 22 @ @ public class GCInspector 
 public static final GCInspector instance = new GCInspector ( ) ; 
 
 private HashMap < String , Long > gctimes = new HashMap < String , Long > ( ) ; 
 + private HashMap < String , Long > gccounts = new HashMap < String , Long > ( ) ; 
 + 
 + List < GarbageCollectorMXBean > beans = new ArrayList < GarbageCollectorMXBean > ( ) ; 
 + MemoryMXBean membean = ManagementFactory . getMemoryMXBean ( ) ; 
 
 - List < Object > beans = new ArrayList < Object > ( ) ; / / these are instances of com . sun . management . GarbageCollectorMXBean 
 private volatile boolean cacheSizesReduced ; 
 
 public GCInspector ( ) 
 { 
 - / / we only want this class to do its thing on sun jdks , or when the sun classes are present . 
 - Class gcBeanClass = null ; 
 - try 
 - { 
 - gcBeanClass = Class . forName ( " com . sun . management . GarbageCollectorMXBean " ) ; 
 - Class . forName ( " com . sun . management . GcInfo " ) ; 
 - } 
 - catch ( ClassNotFoundException ex ) 
 - { 
 - / / this happens when using a non - sun jdk . 
 - logger . warn ( " Cannot load sun GC monitoring classes . GCInspector is disabled . " ) ; 
 - } 
 - 
 MBeanServer server = ManagementFactory . getPlatformMBeanServer ( ) ; 
 try 
 { 
 ObjectName gcName = new ObjectName ( ManagementFactory . GARBAGE _ COLLECTOR _ MXBEAN _ DOMAIN _ TYPE + " , * " ) ; 
 for ( ObjectName name : server . queryNames ( gcName , null ) ) 
 { 
 - Object gc = ManagementFactory . newPlatformMXBeanProxy ( server , name . getCanonicalName ( ) , gcBeanClass ) ; 
 + GarbageCollectorMXBean gc = ManagementFactory . newPlatformMXBeanProxy ( server , name . getCanonicalName ( ) , GarbageCollectorMXBean . class ) ; 
 beans . add ( gc ) ; 
 } 
 } 
 @ @ - 97 , 43 + 89 , 42 @ @ public class GCInspector 
 
 private void logGCResults ( ) 
 { 
 - for ( Object gc : beans ) 
 + for ( GarbageCollectorMXBean gc : beans ) 
 { 
 - SunGcWrapper gcw = new SunGcWrapper ( gc ) ; 
 - if ( gcw . isLastGcInfoNull ( ) ) 
 + Long previousTotal = gctimes . get ( gc . getName ( ) ) ; 
 + Long total = gc . getCollectionTime ( ) ; 
 + if ( previousTotal = = null ) 
 + previousTotal = 0L ; 
 + if ( previousTotal . equals ( total ) ) 
 continue ; 
 - 
 - Long previous = gctimes . get ( gcw . getName ( ) ) ; 
 - if ( previous ! = null & & previous . longValue ( ) = = gcw . getCollectionTime ( ) . longValue ( ) ) 
 - continue ; 
 - gctimes . put ( gcw . getName ( ) , gcw . getCollectionTime ( ) ) ; 
 - 
 - long previousMemoryUsed = 0 ; 
 - long memoryUsed = 0 ; 
 - long memoryMax = 0 ; 
 - for ( Map . Entry < String , MemoryUsage > entry : gcw . getMemoryUsageBeforeGc ( ) . entrySet ( ) ) 
 - { 
 - previousMemoryUsed + = entry . getValue ( ) . getUsed ( ) ; 
 - } 
 - for ( Map . Entry < String , MemoryUsage > entry : gcw . getMemoryUsageAfterGc ( ) . entrySet ( ) ) 
 - { 
 - MemoryUsage mu = entry . getValue ( ) ; 
 - memoryUsed + = mu . getUsed ( ) ; 
 - memoryMax + = mu . getMax ( ) ; 
 - } 
 - 
 - String st = String . format ( " GC for % s : % s ms , % s reclaimed leaving % s used ; max is % s " , 
 - gcw . getName ( ) , gcw . getDuration ( ) , previousMemoryUsed - memoryUsed , memoryUsed , memoryMax ) ; 
 - if ( gcw . getDuration ( ) > MIN _ DURATION ) 
 + gctimes . put ( gc . getName ( ) , total ) ; 
 + Long duration = total - previousTotal ; 
 + assert duration > 0 ; 
 + 
 + Long previousCount = gccounts . get ( gc . getName ( ) ) ; 
 + Long count = gc . getCollectionCount ( ) ; 
 + if ( previousCount = = null ) 
 + previousCount = 0L ; 
 + gccounts . put ( gc . getName ( ) , count ) ; 
 + assert count > previousCount ; 
 + 
 + MemoryUsage mu = membean . getHeapMemoryUsage ( ) ; 
 + long memoryUsed = mu . getUsed ( ) ; 
 + long memoryMax = mu . getMax ( ) ; 
 + 
 + String st = String . format ( " GC for % s : % s ms for % s collections , % s used ; max is % s " , 
 + gc . getName ( ) , duration , count - previousCount , memoryUsed , memoryMax ) ; 
 + long durationPerCollection = duration / ( count - previousCount ) ; 
 + if ( durationPerCollection > MIN _ DURATION ) 
 logger . info ( st ) ; 
 else if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( st ) ; 
 
 - if ( gcw . getDuration ( ) > MIN _ DURATION _ TPSTATS ) 
 + if ( durationPerCollection > MIN _ DURATION _ TPSTATS ) 
 StatusLogger . log ( ) ; 
 
 / / if we just finished a full collection and we ' re still using a lot of memory , try to reduce the pressure 
 - if ( gcw . getName ( ) . equals ( " ConcurrentMarkSweep " ) ) 
 + if ( gc . getName ( ) . equals ( " ConcurrentMarkSweep " ) ) 
 { 
 double usage = ( double ) memoryUsed / memoryMax ; 
 
 @ @ - 152 , 82 + 143 , 4 @ @ public class GCInspector 
 } 
 } 
 } 
 - 
 - / / wrapper for sun class . this enables other jdks to compile this class . 
 - private static final class SunGcWrapper 
 - { 
 - 
 - private Map < String , MemoryUsage > usageBeforeGc = null ; 
 - private Map < String , MemoryUsage > usageAfterGc = null ; 
 - private String name ; 
 - private Long collectionTime ; 
 - private Long duration ; 
 - 
 - SunGcWrapper ( Object gcMxBean ) 
 - { 
 - / / if we ' ve gotten this far , we ' ve already verified that the right classes are in the CP . Now we just 
 - / / need to check for boneheadedness . 
 - / / grab everything we need here so that we don ' t have to deal with try / catch everywhere . 
 - try 
 - { 
 - assert Class . forName ( " com . sun . management . GarbageCollectorMXBean " ) . isAssignableFrom ( gcMxBean . getClass ( ) ) ; 
 - Method getGcInfo = gcMxBean . getClass ( ) . getDeclaredMethod ( " getLastGcInfo " ) ; 
 - Object lastGcInfo = getGcInfo . invoke ( gcMxBean ) ; 
 - if ( lastGcInfo ! = null ) 
 - { 
 - usageBeforeGc = ( Map < String , MemoryUsage > ) lastGcInfo . getClass ( ) . getDeclaredMethod ( " getMemoryUsageBeforeGc " ) . invoke ( lastGcInfo ) ; 
 - usageAfterGc = ( Map < String , MemoryUsage > ) lastGcInfo . getClass ( ) . getDeclaredMethod ( " getMemoryUsageAfterGc " ) . invoke ( lastGcInfo ) ; 
 - duration = ( Long ) lastGcInfo . getClass ( ) . getDeclaredMethod ( " getDuration " ) . invoke ( lastGcInfo ) ; 
 - name = ( String ) gcMxBean . getClass ( ) . getDeclaredMethod ( " getName " ) . invoke ( gcMxBean ) ; 
 - collectionTime = ( Long ) gcMxBean . getClass ( ) . getDeclaredMethod ( " getCollectionTime " ) . invoke ( gcMxBean ) ; 
 - } 
 - } 
 - catch ( ClassNotFoundException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - catch ( NoSuchMethodException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - catch ( IllegalAccessException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - catch ( InvocationTargetException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 - 
 - String getName ( ) 
 - { 
 - return name ; 
 - } 
 - 
 - Long getCollectionTime ( ) 
 - { 
 - return collectionTime ; 
 - } 
 - 
 - Long getDuration ( ) 
 - { 
 - return duration ; 
 - } 
 - 
 - Map < String , MemoryUsage > getMemoryUsageAfterGc ( ) 
 - { 
 - return usageAfterGc ; 
 - } 
 - 
 - Map < String , MemoryUsage > getMemoryUsageBeforeGc ( ) 
 - { 
 - return usageBeforeGc ; 
 - } 
 - 
 - boolean isLastGcInfoNull ( ) 
 - { 
 - return usageBeforeGc = = null ; 
 - } 
 - } 
 }
