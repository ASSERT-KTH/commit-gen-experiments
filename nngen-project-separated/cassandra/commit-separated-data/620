BLEU SCORE: 0.02383853510228548

TEST MSG: Fix leak errors and execution rejected exceptions when draining
GENERATED MSG: update size - tiered compaction to prioritize small tiers

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 97bc70a . . 54425fa 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 9 <nl> + * Fix leak errors and execution rejected exceptions when draining ( CASSANDRA - 12457 ) <nl> * Fix merkle tree depth calculation ( CASSANDRA - 12580 ) <nl> * Make Collections deserialization more robust ( CASSANDRA - 12618 ) <nl> <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableScheduledThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableScheduledThreadPoolExecutor . java <nl> index a722b87 . . ea0715c 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / DebuggableScheduledThreadPoolExecutor . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / DebuggableScheduledThreadPoolExecutor . java <nl> @ @ - 54 , 7 + 54 , 7 @ @ public class DebuggableScheduledThreadPoolExecutor extends ScheduledThreadPoolEx <nl> if ( task instanceof Future ) <nl> ( ( Future ) task ) . cancel ( false ) ; <nl> <nl> - logger . trace ( " ScheduledThreadPoolExecutor has shut down as part of C * shutdown " ) ; <nl> + logger . debug ( " ScheduledThreadPoolExecutor has shut down as part of C * shutdown " ) ; <nl> } <nl> else <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java b / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java <nl> index 5935669 . . 5962db9 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java <nl> @ @ - 31 , 10 + 31 , 6 @ @ public class ScheduledExecutors <nl> * This executor is used for tasks that can have longer execution times , and usually are non periodic . <nl> * / <nl> public static final DebuggableScheduledThreadPoolExecutor nonPeriodicTasks = new DebuggableScheduledThreadPoolExecutor ( " NonPeriodicTasks " ) ; <nl> - static <nl> - { <nl> - nonPeriodicTasks . setExecuteExistingDelayedTasksAfterShutdownPolicy ( false ) ; <nl> - } <nl> <nl> / * * <nl> * This executor is used for tasks that do not need to be waited for on shutdown / drain . <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 78fa23c . . 626bd27 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 165 , 16 + 165 , 14 @ @ public class CompactionManager implements CompactionManagerMBean <nl> cfs . keyspace . getName ( ) , <nl> cfs . name , <nl> cfs . getCompactionStrategy ( ) . getName ( ) ) ; <nl> - List < Future < ? > > futures = new ArrayList < > ( ) ; <nl> - / / we must schedule it at least once , otherwise compaction will stop for a CF until next flush <nl> - if ( executor . isShutdown ( ) ) <nl> + <nl> + List < Future < ? > > futures = new ArrayList < > ( 1 ) ; <nl> + Future < ? > fut = executor . submitIfRunning ( new BackgroundCompactionCandidate ( cfs ) , " background task " ) ; <nl> + if ( ! fut . isCancelled ( ) ) <nl> { <nl> - logger . info ( " Executor has shut down , not submitting background task " ) ; <nl> - return Collections . emptyList ( ) ; <nl> + compactingCF . add ( cfs ) ; <nl> + futures . add ( fut ) ; <nl> } <nl> - compactingCF . add ( cfs ) ; <nl> - futures . add ( executor . submit ( new BackgroundCompactionCandidate ( cfs ) ) ) ; <nl> - <nl> return futures ; <nl> } <nl> <nl> @ @ - 209 , 7 + 207 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> try <nl> { <nl> - exec . awaitTermination ( 1 , TimeUnit . MINUTES ) ; <nl> + if ( ! exec . awaitTermination ( 1 , TimeUnit . MINUTES ) ) <nl> + logger . warn ( " Failed to wait for compaction executors shutdown " ) ; <nl> } <nl> catch ( InterruptedException e ) <nl> { <nl> @ @ - 286 , 16 + 285 , 10 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return AllSSTableOpStatus . SUCCESSFUL ; <nl> } <nl> <nl> - List < Future < Object > > futures = new ArrayList < > ( ) ; <nl> + List < Future < ? > > futures = new ArrayList < > ( ) ; <nl> <nl> for ( final SSTableReader sstable : sstables ) <nl> { <nl> - if ( executor . isShutdown ( ) ) <nl> - { <nl> - logger . info ( " Executor has shut down , not submitting task " ) ; <nl> - return AllSSTableOpStatus . ABORTED ; <nl> - } <nl> - <nl> final LifecycleTransaction txn = compacting . split ( singleton ( sstable ) ) ; <nl> transactions . add ( txn ) ; <nl> Callable < Object > callable = new Callable < Object > ( ) <nl> @ @ - 307 , 7 + 300 , 12 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return this ; <nl> } <nl> } ; <nl> - futures . add ( executor . submit ( callable ) ) ; <nl> + Future < ? > fut = executor . submitIfRunning ( callable , " paralell sstable operation " ) ; <nl> + if ( ! fut . isCancelled ( ) ) <nl> + futures . add ( fut ) ; <nl> + else <nl> + return AllSSTableOpStatus . ABORTED ; <nl> + <nl> if ( jobs > 0 & & futures . size ( ) = = jobs ) <nl> { <nl> FBUtilities . waitOnFutures ( futures ) ; <nl> @ @ - 472 , 16 + 470 , 18 @ @ public class CompactionManager implements CompactionManagerMBean <nl> performAnticompaction ( cfs , ranges , sstables , modifier , repairedAt ) ; <nl> } <nl> } ; <nl> - if ( executor . isShutdown ( ) ) <nl> + <nl> + ListenableFuture < ? > ret = null ; <nl> + try <nl> { <nl> - logger . info ( " Compaction executor has shut down , not submitting anticompaction " ) ; <nl> - sstables . release ( ) ; <nl> - return Futures . immediateCancelledFuture ( ) ; <nl> + ret = executor . submitIfRunning ( runnable , " anticompaction " ) ; <nl> + return ret ; <nl> + } <nl> + finally <nl> + { <nl> + if ( ret = = null | | ret . isCancelled ( ) ) <nl> + sstables . release ( ) ; <nl> } <nl> - <nl> - ListenableFutureTask < ? > task = ListenableFutureTask . create ( runnable , null ) ; <nl> - executor . submit ( task ) ; <nl> - return task ; <nl> } <nl> <nl> / * * <nl> @ @ - 599 , 12 + 599 , 10 @ @ public class CompactionManager implements CompactionManagerMBean <nl> task . execute ( metrics ) ; <nl> } <nl> } ; <nl> - if ( executor . isShutdown ( ) ) <nl> - { <nl> - logger . info ( " Compaction executor has shut down , not submitting task " ) ; <nl> - return Collections . emptyList ( ) ; <nl> - } <nl> - futures . add ( executor . submit ( runnable ) ) ; <nl> + <nl> + Future < ? > fut = executor . submitIfRunning ( runnable , " maximal task " ) ; <nl> + if ( ! fut . isCancelled ( ) ) <nl> + futures . add ( fut ) ; <nl> } <nl> if ( nonEmptyTasks > 1 ) <nl> logger . info ( " Cannot perform a full major compaction as repaired and unrepaired sstables cannot be compacted together . These two set of sstables will be compacted separately . " ) ; <nl> @ @ - 671 , 13 + 669 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> } <nl> } ; <nl> - if ( executor . isShutdown ( ) ) <nl> - { <nl> - logger . info ( " Compaction executor has shut down , not submitting task " ) ; <nl> - return Futures . immediateCancelledFuture ( ) ; <nl> - } <nl> <nl> - return executor . submit ( runnable ) ; <nl> + return executor . submitIfRunning ( runnable , " user defined task " ) ; <nl> } <nl> <nl> / / This acquire a reference on the sstable <nl> @ @ - 695 , 7 + 688 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> / * * <nl> * Does not mutate data , so is not scheduled . <nl> * / <nl> - public Future < Object > submitValidation ( final ColumnFamilyStore cfStore , final Validator validator ) <nl> + public Future < ? > submitValidation ( final ColumnFamilyStore cfStore , final Validator validator ) <nl> { <nl> Callable < Object > callable = new Callable < Object > ( ) <nl> { <nl> @ @ - 714 , 7 + 707 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return this ; <nl> } <nl> } ; <nl> - return validationExecutor . submit ( callable ) ; <nl> + <nl> + return validationExecutor . submitIfRunning ( callable , " validation " ) ; <nl> } <nl> <nl> / * Used in tests . * / <nl> @ @ - 1344 , 13 + 1338 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> } <nl> } ; <nl> - if ( executor . isShutdown ( ) ) <nl> - { <nl> - logger . info ( " Compaction executor has shut down , not submitting index build " ) ; <nl> - return null ; <nl> - } <nl> <nl> - return executor . submit ( runnable ) ; <nl> + return executor . submitIfRunning ( runnable , " index build " ) ; <nl> } <nl> <nl> public Future < ? > submitCacheWrite ( final AutoSavingCache . Writer writer ) <nl> @ @ - 1382 , 12 + 1371 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> } <nl> } ; <nl> - if ( executor . isShutdown ( ) ) <nl> - { <nl> - logger . info ( " Executor has shut down , not submitting background task " ) ; <nl> - Futures . immediateCancelledFuture ( ) ; <nl> - } <nl> - return executor . submit ( runnable ) ; <nl> + <nl> + return executor . submitIfRunning ( runnable , " cache write " ) ; <nl> } <nl> <nl> public List < SSTableReader > runIndexSummaryRedistribution ( IndexSummaryRedistribution redistribution ) throws IOException <nl> @ @ - 1509 , 6 + 1494 , 46 @ @ public class CompactionManager implements CompactionManagerMBean <nl> / / unmap those segments which could free up a snapshot for successful deletion . <nl> SnapshotDeletingTask . rescheduleFailedTasks ( ) ; <nl> } <nl> + <nl> + public ListenableFuture < ? > submitIfRunning ( Runnable task , String name ) <nl> + { <nl> + return submitIfRunning ( Executors . callable ( task , null ) , name ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Submit the task but only if the executor has not been shutdown . If the executor has <nl> + * been shutdown , or in case of a rejected execution exception return a cancelled future . <nl> + * <nl> + * @ param task - the task to submit <nl> + * @ param name - the task name to use in log messages <nl> + * <nl> + * @ return the future that will deliver the task result , or a future that has already been <nl> + * cancelled if the task could not be submitted . <nl> + * / <nl> + public ListenableFuture < ? > submitIfRunning ( Callable < ? > task , String name ) <nl> + { <nl> + if ( isShutdown ( ) ) <nl> + { <nl> + logger . info ( " Executor has been shut down , not submitting { } " , name ) ; <nl> + return Futures . immediateCancelledFuture ( ) ; <nl> + } <nl> + <nl> + try <nl> + { <nl> + ListenableFutureTask ret = ListenableFutureTask . create ( task ) ; <nl> + submit ( ret ) ; <nl> + return ret ; <nl> + } <nl> + catch ( RejectedExecutionException ex ) <nl> + { <nl> + if ( isShutdown ( ) ) <nl> + logger . info ( " Executor has shut down , could not submit { } " , name ) ; <nl> + else <nl> + logger . error ( " Failed to submit { } " , name , ex ) ; <nl> + <nl> + return Futures . immediateCancelledFuture ( ) ; <nl> + } <nl> + } <nl> } <nl> <nl> private static class ValidationExecutor extends CompactionExecutor <nl> diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java b / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java <nl> index 59cee50 . . a95c4a8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java <nl> @ @ - 83 , 6 + 83 , 12 @ @ public class LifecycleTransaction extends Transactional . AbstractTransactional <nl> update . clear ( ) ; <nl> obsolete . clear ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return String . format ( " [ obsolete : % s , update : % s ] " , obsolete , update ) ; <nl> + } <nl> } <nl> <nl> public final Tracker tracker ; <nl> @ @ - 150 , 7 + 156 , 8 @ @ public class LifecycleTransaction extends Transactional . AbstractTransactional <nl> { <nl> assert staged . isEmpty ( ) : " must be no actions introduced between prepareToCommit and a commit " ; <nl> <nl> - logger . trace ( " Committing update : { } , obsolete : { } " , staged . update , staged . obsolete ) ; <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " Committing transaction over { } staged : { } , logged : { } " , originals , staged , logged ) ; <nl> <nl> / / this is now the point of no return ; we cannot safely rollback , so we ignore exceptions until we ' re done <nl> / / we restore state by obsoleting our obsolete files , releasing our references to them , and updating our size <nl> @ @ - 168 , 7 + 175 , 7 @ @ public class LifecycleTransaction extends Transactional . AbstractTransactional <nl> public Throwable doAbort ( Throwable accumulate ) <nl> { <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " Aborting transaction over { } , with ( { } , { } ) logged and ( { } , { } ) staged " , originals , logged . update , logged . obsolete , staged . update , staged . obsolete ) ; <nl> + logger . trace ( " Aborting transaction over { } staged : { } , logged : { } " , originals , staged , logged ) ; <nl> <nl> if ( logged . isEmpty ( ) & & staged . isEmpty ( ) ) <nl> return accumulate ; <nl> @ @ - 225 , 7 + 232 , 7 @ @ public class LifecycleTransaction extends Transactional . AbstractTransactional <nl> private Throwable checkpoint ( Throwable accumulate ) <nl> { <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " Checkpointing update : { } , obsolete : { } " , staged . update , staged . obsolete ) ; <nl> + logger . trace ( " Checkpointing staged { } " , staged ) ; <nl> <nl> if ( staged . isEmpty ( ) ) <nl> return accumulate ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> index c303975 . . fddf058 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> @ @ - 2037 , 7 + 2037 , 7 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> private DescriptorTypeTidy type ; <nl> private GlobalTidy global ; <nl> <nl> - private boolean setup ; <nl> + private volatile boolean setup ; <nl> <nl> void setup ( SSTableReader reader , boolean trackHotness ) <nl> { <nl> @ @ - 2062 , 6 + 2062 , 9 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> <nl> public void tidy ( ) <nl> { <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " Running instance tidier for { } with setup { } " , descriptor , setup ) ; <nl> + <nl> / / don ' t try to cleanup if the sstablereader was never fully constructed <nl> if ( ! setup ) <nl> return ; <nl> @ @ - 2080 , 8 + 2083 , 15 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> { <nl> public void run ( ) <nl> { <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " Async instance tidier for { } , before barrier " , descriptor ) ; <nl> + <nl> if ( barrier ! = null ) <nl> barrier . await ( ) ; <nl> + <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " Async instance tidier for { } , after barrier " , descriptor ) ; <nl> + <nl> if ( bf ! = null ) <nl> bf . close ( ) ; <nl> if ( summary ! = null ) <nl> @ @ - 2093 , 6 + 2103 , 9 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> if ( ifile ! = null ) <nl> ifile . close ( ) ; <nl> typeRef . release ( ) ; <nl> + <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " Async instance tidier for { } , completed " , descriptor ) ; <nl> } <nl> } ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index fb0c9ca . . f0e2fbf 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 769 , 7 + 769 , 8 @ @ public final class MessagingService implements MessagingServiceMBean <nl> assert ! StageManager . getStage ( Stage . MUTATION ) . isShutdown ( ) ; <nl> <nl> / / the important part <nl> - callbacks . shutdownBlocking ( ) ; <nl> + if ( ! callbacks . shutdownBlocking ( ) ) <nl> + logger . warn ( " Failed to wait for messaging service callbacks shutdown " ) ; <nl> <nl> / / attempt to humor tests that try to stop and restart MS <nl> try <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 0b6e851 . . db86294 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 3982 , 8 + 3982 , 17 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> FBUtilities . waitOnFuture ( f ) ; <nl> remainingCFs - - ; <nl> } <nl> - / / flush the system ones after all the rest are done , just in case flushing modifies any system state <nl> - / / like CASSANDRA - 5151 . don ' t bother with progress tracking since system data is tiny . <nl> + <nl> + BatchlogManager . shutdown ( ) ; <nl> + <nl> + / / Interrupt on going compaction and shutdown to prevent further compaction <nl> + CompactionManager . instance . forceShutdown ( ) ; <nl> + <nl> + / / Flush the system tables after all other tables are flushed , just in case flushing modifies any system state <nl> + / / like CASSANDRA - 5151 . Don ' t bother with progress tracking since system data is tiny . <nl> + / / Flush system tables after stopping the batchlog manager and compactions since they both modify <nl> + / / system tables ( for example compactions can obsolete sstables and the tidiers in SSTableReader update <nl> + / / system tables , see SSTableReader . GlobalTidy ) <nl> flushes . clear ( ) ; <nl> for ( Keyspace keyspace : Keyspace . system ( ) ) <nl> { <nl> @ @ - 3992 , 11 + 4001 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> FBUtilities . waitOnFutures ( flushes ) ; <nl> <nl> - BatchlogManager . shutdown ( ) ; <nl> - <nl> - / / Interrupt on going compaction and shutdown to prevent further compaction <nl> - CompactionManager . instance . forceShutdown ( ) ; <nl> - <nl> / / whilst we ' ve flushed all the CFs , which will have recycled all completed segments , we want to ensure <nl> / / there are no segments to replay , so we force the recycling of any remaining ( should be at most one ) <nl> CommitLog . instance . forceRecycleAllSegments ( ) ; <nl> @ @ - 4006 , 7 + 4010 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> / / wait for miscellaneous tasks like sstable and commitlog segment deletion <nl> ScheduledExecutors . nonPeriodicTasks . shutdown ( ) ; <nl> if ( ! ScheduledExecutors . nonPeriodicTasks . awaitTermination ( 1 , TimeUnit . MINUTES ) ) <nl> - logger . warn ( " Miscellaneous task executor still busy after one minute ; proceeding with shutdown " ) ; <nl> + logger . warn ( " Failed to wait for non periodic tasks to shutdown " ) ; <nl> <nl> ColumnFamilyStore . shutdownPostFlushExecutor ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / ExpiringMap . java b / src / java / org / apache / cassandra / utils / ExpiringMap . java <nl> index e7b626c . . 8359918 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / ExpiringMap . java <nl> + + + b / src / java / org / apache / cassandra / utils / ExpiringMap . java <nl> @ @ - 105 , 12 + 105 , 12 @ @ public class ExpiringMap < K , V > <nl> service . scheduleWithFixedDelay ( runnable , defaultExpiration / 2 , defaultExpiration / 2 , TimeUnit . MILLISECONDS ) ; <nl> } <nl> <nl> - public void shutdownBlocking ( ) <nl> + public boolean shutdownBlocking ( ) <nl> { <nl> service . shutdown ( ) ; <nl> try <nl> { <nl> - service . awaitTermination ( defaultExpiration * 2 , TimeUnit . MILLISECONDS ) ; <nl> + return service . awaitTermination ( defaultExpiration * 2 , TimeUnit . MILLISECONDS ) ; <nl> } <nl> catch ( InterruptedException e ) <nl> {
NEAREST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / service / ConsistencyLevelTest . java b / test / unit / org / apache / cassandra / service / ConsistencyLevelTest . java <nl> index 6321687 . . c112788 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / ConsistencyLevelTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / ConsistencyLevelTest . java <nl> @ @ - 132 , 10 + 132 , 6 @ @ public class ConsistencyLevelTest extends CleanupHelper <nl> } <nl> } <nl> <nl> - / / these should always match ( in this kind of test ) <nl> - assertTrue ( String . format ( " Node Alive : % d - CL : % s - isWriteUnavailable : % b - isReadUnavailable : % b " , hostsInUse . size ( ) , c , isWriteUnavailable , isReadUnavailable ) , <nl> - isWriteUnavailable = = isReadUnavailable ) ; <nl> - <nl> switch ( c ) <nl> { <nl> case ALL :

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 97bc70a . . 54425fa 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 9 
 + * Fix leak errors and execution rejected exceptions when draining ( CASSANDRA - 12457 ) 
 * Fix merkle tree depth calculation ( CASSANDRA - 12580 ) 
 * Make Collections deserialization more robust ( CASSANDRA - 12618 ) 
 
 diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableScheduledThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableScheduledThreadPoolExecutor . java 
 index a722b87 . . ea0715c 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / DebuggableScheduledThreadPoolExecutor . java 
 + + + b / src / java / org / apache / cassandra / concurrent / DebuggableScheduledThreadPoolExecutor . java 
 @ @ - 54 , 7 + 54 , 7 @ @ public class DebuggableScheduledThreadPoolExecutor extends ScheduledThreadPoolEx 
 if ( task instanceof Future ) 
 ( ( Future ) task ) . cancel ( false ) ; 
 
 - logger . trace ( " ScheduledThreadPoolExecutor has shut down as part of C * shutdown " ) ; 
 + logger . debug ( " ScheduledThreadPoolExecutor has shut down as part of C * shutdown " ) ; 
 } 
 else 
 { 
 diff - - git a / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java b / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java 
 index 5935669 . . 5962db9 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java 
 + + + b / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java 
 @ @ - 31 , 10 + 31 , 6 @ @ public class ScheduledExecutors 
 * This executor is used for tasks that can have longer execution times , and usually are non periodic . 
 * / 
 public static final DebuggableScheduledThreadPoolExecutor nonPeriodicTasks = new DebuggableScheduledThreadPoolExecutor ( " NonPeriodicTasks " ) ; 
 - static 
 - { 
 - nonPeriodicTasks . setExecuteExistingDelayedTasksAfterShutdownPolicy ( false ) ; 
 - } 
 
 / * * 
 * This executor is used for tasks that do not need to be waited for on shutdown / drain . 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 78fa23c . . 626bd27 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 165 , 16 + 165 , 14 @ @ public class CompactionManager implements CompactionManagerMBean 
 cfs . keyspace . getName ( ) , 
 cfs . name , 
 cfs . getCompactionStrategy ( ) . getName ( ) ) ; 
 - List < Future < ? > > futures = new ArrayList < > ( ) ; 
 - / / we must schedule it at least once , otherwise compaction will stop for a CF until next flush 
 - if ( executor . isShutdown ( ) ) 
 + 
 + List < Future < ? > > futures = new ArrayList < > ( 1 ) ; 
 + Future < ? > fut = executor . submitIfRunning ( new BackgroundCompactionCandidate ( cfs ) , " background task " ) ; 
 + if ( ! fut . isCancelled ( ) ) 
 { 
 - logger . info ( " Executor has shut down , not submitting background task " ) ; 
 - return Collections . emptyList ( ) ; 
 + compactingCF . add ( cfs ) ; 
 + futures . add ( fut ) ; 
 } 
 - compactingCF . add ( cfs ) ; 
 - futures . add ( executor . submit ( new BackgroundCompactionCandidate ( cfs ) ) ) ; 
 - 
 return futures ; 
 } 
 
 @ @ - 209 , 7 + 207 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 try 
 { 
 - exec . awaitTermination ( 1 , TimeUnit . MINUTES ) ; 
 + if ( ! exec . awaitTermination ( 1 , TimeUnit . MINUTES ) ) 
 + logger . warn ( " Failed to wait for compaction executors shutdown " ) ; 
 } 
 catch ( InterruptedException e ) 
 { 
 @ @ - 286 , 16 + 285 , 10 @ @ public class CompactionManager implements CompactionManagerMBean 
 return AllSSTableOpStatus . SUCCESSFUL ; 
 } 
 
 - List < Future < Object > > futures = new ArrayList < > ( ) ; 
 + List < Future < ? > > futures = new ArrayList < > ( ) ; 
 
 for ( final SSTableReader sstable : sstables ) 
 { 
 - if ( executor . isShutdown ( ) ) 
 - { 
 - logger . info ( " Executor has shut down , not submitting task " ) ; 
 - return AllSSTableOpStatus . ABORTED ; 
 - } 
 - 
 final LifecycleTransaction txn = compacting . split ( singleton ( sstable ) ) ; 
 transactions . add ( txn ) ; 
 Callable < Object > callable = new Callable < Object > ( ) 
 @ @ - 307 , 7 + 300 , 12 @ @ public class CompactionManager implements CompactionManagerMBean 
 return this ; 
 } 
 } ; 
 - futures . add ( executor . submit ( callable ) ) ; 
 + Future < ? > fut = executor . submitIfRunning ( callable , " paralell sstable operation " ) ; 
 + if ( ! fut . isCancelled ( ) ) 
 + futures . add ( fut ) ; 
 + else 
 + return AllSSTableOpStatus . ABORTED ; 
 + 
 if ( jobs > 0 & & futures . size ( ) = = jobs ) 
 { 
 FBUtilities . waitOnFutures ( futures ) ; 
 @ @ - 472 , 16 + 470 , 18 @ @ public class CompactionManager implements CompactionManagerMBean 
 performAnticompaction ( cfs , ranges , sstables , modifier , repairedAt ) ; 
 } 
 } ; 
 - if ( executor . isShutdown ( ) ) 
 + 
 + ListenableFuture < ? > ret = null ; 
 + try 
 { 
 - logger . info ( " Compaction executor has shut down , not submitting anticompaction " ) ; 
 - sstables . release ( ) ; 
 - return Futures . immediateCancelledFuture ( ) ; 
 + ret = executor . submitIfRunning ( runnable , " anticompaction " ) ; 
 + return ret ; 
 + } 
 + finally 
 + { 
 + if ( ret = = null | | ret . isCancelled ( ) ) 
 + sstables . release ( ) ; 
 } 
 - 
 - ListenableFutureTask < ? > task = ListenableFutureTask . create ( runnable , null ) ; 
 - executor . submit ( task ) ; 
 - return task ; 
 } 
 
 / * * 
 @ @ - 599 , 12 + 599 , 10 @ @ public class CompactionManager implements CompactionManagerMBean 
 task . execute ( metrics ) ; 
 } 
 } ; 
 - if ( executor . isShutdown ( ) ) 
 - { 
 - logger . info ( " Compaction executor has shut down , not submitting task " ) ; 
 - return Collections . emptyList ( ) ; 
 - } 
 - futures . add ( executor . submit ( runnable ) ) ; 
 + 
 + Future < ? > fut = executor . submitIfRunning ( runnable , " maximal task " ) ; 
 + if ( ! fut . isCancelled ( ) ) 
 + futures . add ( fut ) ; 
 } 
 if ( nonEmptyTasks > 1 ) 
 logger . info ( " Cannot perform a full major compaction as repaired and unrepaired sstables cannot be compacted together . These two set of sstables will be compacted separately . " ) ; 
 @ @ - 671 , 13 + 669 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 } 
 } ; 
 - if ( executor . isShutdown ( ) ) 
 - { 
 - logger . info ( " Compaction executor has shut down , not submitting task " ) ; 
 - return Futures . immediateCancelledFuture ( ) ; 
 - } 
 
 - return executor . submit ( runnable ) ; 
 + return executor . submitIfRunning ( runnable , " user defined task " ) ; 
 } 
 
 / / This acquire a reference on the sstable 
 @ @ - 695 , 7 + 688 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 / * * 
 * Does not mutate data , so is not scheduled . 
 * / 
 - public Future < Object > submitValidation ( final ColumnFamilyStore cfStore , final Validator validator ) 
 + public Future < ? > submitValidation ( final ColumnFamilyStore cfStore , final Validator validator ) 
 { 
 Callable < Object > callable = new Callable < Object > ( ) 
 { 
 @ @ - 714 , 7 + 707 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 return this ; 
 } 
 } ; 
 - return validationExecutor . submit ( callable ) ; 
 + 
 + return validationExecutor . submitIfRunning ( callable , " validation " ) ; 
 } 
 
 / * Used in tests . * / 
 @ @ - 1344 , 13 + 1338 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 } 
 } ; 
 - if ( executor . isShutdown ( ) ) 
 - { 
 - logger . info ( " Compaction executor has shut down , not submitting index build " ) ; 
 - return null ; 
 - } 
 
 - return executor . submit ( runnable ) ; 
 + return executor . submitIfRunning ( runnable , " index build " ) ; 
 } 
 
 public Future < ? > submitCacheWrite ( final AutoSavingCache . Writer writer ) 
 @ @ - 1382 , 12 + 1371 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 } 
 } ; 
 - if ( executor . isShutdown ( ) ) 
 - { 
 - logger . info ( " Executor has shut down , not submitting background task " ) ; 
 - Futures . immediateCancelledFuture ( ) ; 
 - } 
 - return executor . submit ( runnable ) ; 
 + 
 + return executor . submitIfRunning ( runnable , " cache write " ) ; 
 } 
 
 public List < SSTableReader > runIndexSummaryRedistribution ( IndexSummaryRedistribution redistribution ) throws IOException 
 @ @ - 1509 , 6 + 1494 , 46 @ @ public class CompactionManager implements CompactionManagerMBean 
 / / unmap those segments which could free up a snapshot for successful deletion . 
 SnapshotDeletingTask . rescheduleFailedTasks ( ) ; 
 } 
 + 
 + public ListenableFuture < ? > submitIfRunning ( Runnable task , String name ) 
 + { 
 + return submitIfRunning ( Executors . callable ( task , null ) , name ) ; 
 + } 
 + 
 + / * * 
 + * Submit the task but only if the executor has not been shutdown . If the executor has 
 + * been shutdown , or in case of a rejected execution exception return a cancelled future . 
 + * 
 + * @ param task - the task to submit 
 + * @ param name - the task name to use in log messages 
 + * 
 + * @ return the future that will deliver the task result , or a future that has already been 
 + * cancelled if the task could not be submitted . 
 + * / 
 + public ListenableFuture < ? > submitIfRunning ( Callable < ? > task , String name ) 
 + { 
 + if ( isShutdown ( ) ) 
 + { 
 + logger . info ( " Executor has been shut down , not submitting { } " , name ) ; 
 + return Futures . immediateCancelledFuture ( ) ; 
 + } 
 + 
 + try 
 + { 
 + ListenableFutureTask ret = ListenableFutureTask . create ( task ) ; 
 + submit ( ret ) ; 
 + return ret ; 
 + } 
 + catch ( RejectedExecutionException ex ) 
 + { 
 + if ( isShutdown ( ) ) 
 + logger . info ( " Executor has shut down , could not submit { } " , name ) ; 
 + else 
 + logger . error ( " Failed to submit { } " , name , ex ) ; 
 + 
 + return Futures . immediateCancelledFuture ( ) ; 
 + } 
 + } 
 } 
 
 private static class ValidationExecutor extends CompactionExecutor 
 diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java b / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java 
 index 59cee50 . . a95c4a8 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java 
 @ @ - 83 , 6 + 83 , 12 @ @ public class LifecycleTransaction extends Transactional . AbstractTransactional 
 update . clear ( ) ; 
 obsolete . clear ( ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return String . format ( " [ obsolete : % s , update : % s ] " , obsolete , update ) ; 
 + } 
 } 
 
 public final Tracker tracker ; 
 @ @ - 150 , 7 + 156 , 8 @ @ public class LifecycleTransaction extends Transactional . AbstractTransactional 
 { 
 assert staged . isEmpty ( ) : " must be no actions introduced between prepareToCommit and a commit " ; 
 
 - logger . trace ( " Committing update : { } , obsolete : { } " , staged . update , staged . obsolete ) ; 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " Committing transaction over { } staged : { } , logged : { } " , originals , staged , logged ) ; 
 
 / / this is now the point of no return ; we cannot safely rollback , so we ignore exceptions until we ' re done 
 / / we restore state by obsoleting our obsolete files , releasing our references to them , and updating our size 
 @ @ - 168 , 7 + 175 , 7 @ @ public class LifecycleTransaction extends Transactional . AbstractTransactional 
 public Throwable doAbort ( Throwable accumulate ) 
 { 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " Aborting transaction over { } , with ( { } , { } ) logged and ( { } , { } ) staged " , originals , logged . update , logged . obsolete , staged . update , staged . obsolete ) ; 
 + logger . trace ( " Aborting transaction over { } staged : { } , logged : { } " , originals , staged , logged ) ; 
 
 if ( logged . isEmpty ( ) & & staged . isEmpty ( ) ) 
 return accumulate ; 
 @ @ - 225 , 7 + 232 , 7 @ @ public class LifecycleTransaction extends Transactional . AbstractTransactional 
 private Throwable checkpoint ( Throwable accumulate ) 
 { 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " Checkpointing update : { } , obsolete : { } " , staged . update , staged . obsolete ) ; 
 + logger . trace ( " Checkpointing staged { } " , staged ) ; 
 
 if ( staged . isEmpty ( ) ) 
 return accumulate ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 index c303975 . . fddf058 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 @ @ - 2037 , 7 + 2037 , 7 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 private DescriptorTypeTidy type ; 
 private GlobalTidy global ; 
 
 - private boolean setup ; 
 + private volatile boolean setup ; 
 
 void setup ( SSTableReader reader , boolean trackHotness ) 
 { 
 @ @ - 2062 , 6 + 2062 , 9 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 
 public void tidy ( ) 
 { 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " Running instance tidier for { } with setup { } " , descriptor , setup ) ; 
 + 
 / / don ' t try to cleanup if the sstablereader was never fully constructed 
 if ( ! setup ) 
 return ; 
 @ @ - 2080 , 8 + 2083 , 15 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 { 
 public void run ( ) 
 { 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " Async instance tidier for { } , before barrier " , descriptor ) ; 
 + 
 if ( barrier ! = null ) 
 barrier . await ( ) ; 
 + 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " Async instance tidier for { } , after barrier " , descriptor ) ; 
 + 
 if ( bf ! = null ) 
 bf . close ( ) ; 
 if ( summary ! = null ) 
 @ @ - 2093 , 6 + 2103 , 9 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 if ( ifile ! = null ) 
 ifile . close ( ) ; 
 typeRef . release ( ) ; 
 + 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " Async instance tidier for { } , completed " , descriptor ) ; 
 } 
 } ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index fb0c9ca . . f0e2fbf 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 769 , 7 + 769 , 8 @ @ public final class MessagingService implements MessagingServiceMBean 
 assert ! StageManager . getStage ( Stage . MUTATION ) . isShutdown ( ) ; 
 
 / / the important part 
 - callbacks . shutdownBlocking ( ) ; 
 + if ( ! callbacks . shutdownBlocking ( ) ) 
 + logger . warn ( " Failed to wait for messaging service callbacks shutdown " ) ; 
 
 / / attempt to humor tests that try to stop and restart MS 
 try 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 0b6e851 . . db86294 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 3982 , 8 + 3982 , 17 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 FBUtilities . waitOnFuture ( f ) ; 
 remainingCFs - - ; 
 } 
 - / / flush the system ones after all the rest are done , just in case flushing modifies any system state 
 - / / like CASSANDRA - 5151 . don ' t bother with progress tracking since system data is tiny . 
 + 
 + BatchlogManager . shutdown ( ) ; 
 + 
 + / / Interrupt on going compaction and shutdown to prevent further compaction 
 + CompactionManager . instance . forceShutdown ( ) ; 
 + 
 + / / Flush the system tables after all other tables are flushed , just in case flushing modifies any system state 
 + / / like CASSANDRA - 5151 . Don ' t bother with progress tracking since system data is tiny . 
 + / / Flush system tables after stopping the batchlog manager and compactions since they both modify 
 + / / system tables ( for example compactions can obsolete sstables and the tidiers in SSTableReader update 
 + / / system tables , see SSTableReader . GlobalTidy ) 
 flushes . clear ( ) ; 
 for ( Keyspace keyspace : Keyspace . system ( ) ) 
 { 
 @ @ - 3992 , 11 + 4001 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 FBUtilities . waitOnFutures ( flushes ) ; 
 
 - BatchlogManager . shutdown ( ) ; 
 - 
 - / / Interrupt on going compaction and shutdown to prevent further compaction 
 - CompactionManager . instance . forceShutdown ( ) ; 
 - 
 / / whilst we ' ve flushed all the CFs , which will have recycled all completed segments , we want to ensure 
 / / there are no segments to replay , so we force the recycling of any remaining ( should be at most one ) 
 CommitLog . instance . forceRecycleAllSegments ( ) ; 
 @ @ - 4006 , 7 + 4010 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 / / wait for miscellaneous tasks like sstable and commitlog segment deletion 
 ScheduledExecutors . nonPeriodicTasks . shutdown ( ) ; 
 if ( ! ScheduledExecutors . nonPeriodicTasks . awaitTermination ( 1 , TimeUnit . MINUTES ) ) 
 - logger . warn ( " Miscellaneous task executor still busy after one minute ; proceeding with shutdown " ) ; 
 + logger . warn ( " Failed to wait for non periodic tasks to shutdown " ) ; 
 
 ColumnFamilyStore . shutdownPostFlushExecutor ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / utils / ExpiringMap . java b / src / java / org / apache / cassandra / utils / ExpiringMap . java 
 index e7b626c . . 8359918 100644 
 - - - a / src / java / org / apache / cassandra / utils / ExpiringMap . java 
 + + + b / src / java / org / apache / cassandra / utils / ExpiringMap . java 
 @ @ - 105 , 12 + 105 , 12 @ @ public class ExpiringMap < K , V > 
 service . scheduleWithFixedDelay ( runnable , defaultExpiration / 2 , defaultExpiration / 2 , TimeUnit . MILLISECONDS ) ; 
 } 
 
 - public void shutdownBlocking ( ) 
 + public boolean shutdownBlocking ( ) 
 { 
 service . shutdown ( ) ; 
 try 
 { 
 - service . awaitTermination ( defaultExpiration * 2 , TimeUnit . MILLISECONDS ) ; 
 + return service . awaitTermination ( defaultExpiration * 2 , TimeUnit . MILLISECONDS ) ; 
 } 
 catch ( InterruptedException e ) 
 {

NEAREST DIFF:
diff - - git a / test / unit / org / apache / cassandra / service / ConsistencyLevelTest . java b / test / unit / org / apache / cassandra / service / ConsistencyLevelTest . java 
 index 6321687 . . c112788 100644 
 - - - a / test / unit / org / apache / cassandra / service / ConsistencyLevelTest . java 
 + + + b / test / unit / org / apache / cassandra / service / ConsistencyLevelTest . java 
 @ @ - 132 , 10 + 132 , 6 @ @ public class ConsistencyLevelTest extends CleanupHelper 
 } 
 } 
 
 - / / these should always match ( in this kind of test ) 
 - assertTrue ( String . format ( " Node Alive : % d - CL : % s - isWriteUnavailable : % b - isReadUnavailable : % b " , hostsInUse . size ( ) , c , isWriteUnavailable , isReadUnavailable ) , 
 - isWriteUnavailable = = isReadUnavailable ) ; 
 - 
 switch ( c ) 
 { 
 case ALL :
