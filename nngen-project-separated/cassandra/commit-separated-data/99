BLEU SCORE: 0.02383853510228548

TEST MSG: Fix static column order for SELECT * wildcard queries
GENERATED MSG: inline AbstractColumnContainer and IIterableColumns

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7e4d88c . . eccece2 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 18 <nl> + * Fix static column order for SELECT * wildcard queries ( CASSANDRA - 14638 ) <nl> * sstableloader should use discovered broadcast address to connect intra - cluster ( CASSANDRA - 14522 ) <nl> * Fix reading columns with non - UTF names from schema ( CASSANDRA - 14468 ) <nl> Merged from 2 . 2 : <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 234154e . . 29864bc 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 42 , 6 + 42 , 16 @ @ restore snapshots created with the previous major version using the <nl> ' sstableloader ' tool . You can upgrade the file format of your snapshots <nl> using the provided ' sstableupgrade ' tool . <nl> <nl> + 3 . 0 . 18 <nl> + = = = = = = <nl> + <nl> + Upgrading <nl> + - - - - - - - - - <nl> + - The order of static columns in SELECT * has been fixed to match that of 2 . 0 and 2 . 1 - they are now sorted <nl> + alphabetically again , by their name , just like regular columns are . If you use prepared statements and <nl> + SELECT * queries , and have both simple and collection static columns in those tables , and are upgrading from an <nl> + earlier 3 . 0 version , then you might be affected by this change . Please see CASSANDRA - 14638 for details . <nl> + <nl> 3 . 0 . 17 <nl> = = = = = <nl> <nl> diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile <nl> index cc2b9aa . . 5f35d57 100644 <nl> - - - a / doc / cql3 / CQL . textile <nl> + + + b / doc / cql3 / CQL . textile <nl> @ @ - 1079 , 7 + 1079 , 7 @ @ The @ SELECT @ statements reads one or more columns for one or more rows in a tabl <nl> <nl> h4 ( # selectSelection ) . @ < select - clause > @ <nl> <nl> - The @ < select - clause > @ determines which columns needs to be queried and returned in the result - set . It consists of either the comma - separated list of < selector > or the wildcard character ( @ * @ ) to select all the columns defined for the table . <nl> + The @ < select - clause > @ determines which columns needs to be queried and returned in the result - set . It consists of either the comma - separated list of < selector > or the wildcard character ( @ * @ ) to select all the columns defined for the table . Please note that for wildcard @ SELECT @ queries the order of columns returned is not specified and is not guaranteed to be stable between Cassandra versions . <nl> <nl> A @ < selector > @ is either a column name to retrieve or a @ < function > @ of one or more @ < term > @ s . The function allowed are the same as for @ < term > @ and are described in the " function section " : # functions . In addition to these generic functions , the @ WRITETIME @ ( resp . @ TTL @ ) function allows to select the timestamp of when the column was inserted ( resp . the time to live ( in seconds ) for the column ( or null if the column has no expiration set ) ) . <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / Columns . java b / src / java / org / apache / cassandra / db / Columns . java <nl> index eb4f761 . . 45ce91e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Columns . java <nl> + + + b / src / java / org / apache / cassandra / db / Columns . java <nl> @ @ - 50 , 7 + 50 , 16 @ @ public class Columns extends AbstractCollection < ColumnDefinition > implements Col <nl> { <nl> public static final Serializer serializer = new Serializer ( ) ; <nl> public static final Columns NONE = new Columns ( BTree . empty ( ) , 0 ) ; <nl> - public static final ColumnDefinition FIRST _ COMPLEX = <nl> + <nl> + private static final ColumnDefinition FIRST _ COMPLEX _ STATIC = <nl> + new ColumnDefinition ( " " , <nl> + " " , <nl> + ColumnIdentifier . getInterned ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , UTF8Type . instance ) , <nl> + SetType . getInstance ( UTF8Type . instance , true ) , <nl> + ColumnDefinition . NO _ POSITION , <nl> + ColumnDefinition . Kind . STATIC ) ; <nl> + <nl> + private static final ColumnDefinition FIRST _ COMPLEX _ REGULAR = <nl> new ColumnDefinition ( " " , <nl> " " , <nl> ColumnIdentifier . getInterned ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , UTF8Type . instance ) , <nl> @ @ - 99 , 11 + 108 , 14 @ @ public class Columns extends AbstractCollection < ColumnDefinition > implements Col <nl> <nl> private static int findFirstComplexIdx ( Object [ ] tree ) <nl> { <nl> - / / have fast path for common no - complex case <nl> + if ( BTree . isEmpty ( tree ) ) <nl> + return 0 ; <nl> + <nl> int size = BTree . size ( tree ) ; <nl> - if ( ! BTree . isEmpty ( tree ) & & BTree . < ColumnDefinition > findByIndex ( tree , size - 1 ) . isSimple ( ) ) <nl> - return size ; <nl> - return BTree . ceilIndex ( tree , Comparator . naturalOrder ( ) , FIRST _ COMPLEX ) ; <nl> + ColumnDefinition last = BTree . findByIndex ( tree , size - 1 ) ; <nl> + return last . isSimple ( ) <nl> + ? size <nl> + : BTree . ceilIndex ( tree , Comparator . naturalOrder ( ) , last . isStatic ( ) ? FIRST _ COMPLEX _ STATIC : FIRST _ COMPLEX _ REGULAR ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / test / unit / org / apache / cassandra / db / ColumnsTest . java b / test / unit / org / apache / cassandra / db / ColumnsTest . java <nl> index 4e3df80 . . 1a245a0 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / ColumnsTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / ColumnsTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . util . * ; <nl> import java . util . concurrent . ThreadLocalRandom ; <nl> import java . util . function . Predicate ; <nl> <nl> + import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . Iterators ; <nl> import com . google . common . collect . Lists ; <nl> <nl> @ @ - 33 , 6 + 34 , 7 @ @ import junit . framework . Assert ; <nl> import org . apache . cassandra . MockSchema ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> + import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . db . marshal . SetType ; <nl> import org . apache . cassandra . db . marshal . UTF8Type ; <nl> import org . apache . cassandra . io . util . DataInputBuffer ; <nl> @ @ - 129 , 21 + 131 , 77 @ @ public class ColumnsTest <nl> { <nl> List < String > names = new ArrayList < > ( ) ; <nl> for ( int i = 0 ; i < 50 ; i + + ) <nl> - names . add ( " clustering _ " + i ) ; <nl> + names . add ( " regular _ " + i ) ; <nl> <nl> List < ColumnDefinition > defs = new ArrayList < > ( ) ; <nl> - addClustering ( names , defs ) ; <nl> + addRegular ( names , defs ) ; <nl> <nl> Columns columns = Columns . from ( new HashSet < > ( defs ) ) ; <nl> <nl> defs = new ArrayList < > ( ) ; <nl> - addClustering ( names . subList ( 0 , 8 ) , defs ) ; <nl> + addRegular ( names . subList ( 0 , 8 ) , defs ) ; <nl> <nl> Columns subset = Columns . from ( new HashSet < > ( defs ) ) ; <nl> <nl> Assert . assertTrue ( columns . containsAll ( subset ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testStaticColumns ( ) <nl> + { <nl> + testColumns ( ColumnDefinition . Kind . STATIC ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegularColumns ( ) <nl> + { <nl> + testColumns ( ColumnDefinition . Kind . REGULAR ) ; <nl> + } <nl> + <nl> + private void testColumns ( ColumnDefinition . Kind kind ) <nl> + { <nl> + List < ColumnDefinition > definitions = ImmutableList . of ( <nl> + def ( " a " , UTF8Type . instance , kind ) , <nl> + def ( " b " , SetType . getInstance ( UTF8Type . instance , true ) , kind ) , <nl> + def ( " c " , UTF8Type . instance , kind ) , <nl> + def ( " d " , SetType . getInstance ( UTF8Type . instance , true ) , kind ) , <nl> + def ( " e " , UTF8Type . instance , kind ) , <nl> + def ( " f " , SetType . getInstance ( UTF8Type . instance , true ) , kind ) , <nl> + def ( " g " , UTF8Type . instance , kind ) , <nl> + def ( " h " , SetType . getInstance ( UTF8Type . instance , true ) , kind ) <nl> + ) ; <nl> + Columns columns = Columns . from ( definitions ) ; <nl> + <nl> + / / test simpleColumnCount ( ) <nl> + Assert . assertEquals ( 4 , columns . simpleColumnCount ( ) ) ; <nl> + <nl> + / / test simpleColumns ( ) <nl> + List < ColumnDefinition > simpleColumnsExpected = <nl> + ImmutableList . of ( definitions . get ( 0 ) , definitions . get ( 2 ) , definitions . get ( 4 ) , definitions . get ( 6 ) ) ; <nl> + List < ColumnDefinition > simpleColumnsActual = new ArrayList < > ( ) ; <nl> + Iterators . addAll ( simpleColumnsActual , columns . simpleColumns ( ) ) ; <nl> + Assert . assertEquals ( simpleColumnsExpected , simpleColumnsActual ) ; <nl> + <nl> + / / test complexColumnCount ( ) <nl> + Assert . assertEquals ( 4 , columns . complexColumnCount ( ) ) ; <nl> + <nl> + / / test complexColumns ( ) <nl> + List < ColumnDefinition > complexColumnsExpected = <nl> + ImmutableList . of ( definitions . get ( 1 ) , definitions . get ( 3 ) , definitions . get ( 5 ) , definitions . get ( 7 ) ) ; <nl> + List < ColumnDefinition > complexColumnsActual = new ArrayList < > ( ) ; <nl> + Iterators . addAll ( complexColumnsActual , columns . complexColumns ( ) ) ; <nl> + Assert . assertEquals ( complexColumnsExpected , complexColumnsActual ) ; <nl> + <nl> + / / test size ( ) <nl> + Assert . assertEquals ( 8 , columns . size ( ) ) ; <nl> + <nl> + / / test selectOrderIterator ( ) <nl> + List < ColumnDefinition > columnsExpected = definitions ; <nl> + List < ColumnDefinition > columnsActual = new ArrayList < > ( ) ; <nl> + Iterators . addAll ( columnsActual , columns . selectOrderIterator ( ) ) ; <nl> + Assert . assertEquals ( columnsExpected , columnsActual ) ; <nl> + } <nl> + <nl> private void testSerializeSubset ( ColumnsCheck input ) throws IOException <nl> { <nl> testSerializeSubset ( input . columns , input . columns , input . definitions ) ; <nl> @ @ - 403 , 6 + 461 , 11 @ @ public class ColumnsTest <nl> results . add ( ColumnDefinition . regularDef ( cfMetaData , bytes ( name ) , SetType . getInstance ( UTF8Type . instance , true ) ) ) ; <nl> } <nl> <nl> + private static ColumnDefinition def ( String name , AbstractType < ? > type , ColumnDefinition . Kind kind ) <nl> + { <nl> + return new ColumnDefinition ( cfMetaData , bytes ( name ) , type , ColumnDefinition . NO _ POSITION , kind ) ; <nl> + } <nl> + <nl> private static CFMetaData mock ( Columns columns ) <nl> { <nl> if ( columns . isEmpty ( ) )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / AbstractThreadUnsafeSortedColumns . java b / src / java / org / apache / cassandra / db / AbstractThreadUnsafeSortedColumns . java <nl> index aa153e1 . . b40c2e2 100644 <nl> - - - a / src / java / org / apache / cassandra / db / AbstractThreadUnsafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / AbstractThreadUnsafeSortedColumns . java <nl> @ @ - 86 , 9 + 86 , 4 @ @ public abstract class AbstractThreadUnsafeSortedColumns implements ISortedColumn <nl> { <nl> return size ( ) = = 0 ; <nl> } <nl> - <nl> - public int getEstimatedColumnCount ( ) <nl> - { <nl> - return size ( ) ; <nl> - } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / AtomicSortedColumns . java b / src / java / org / apache / cassandra / db / AtomicSortedColumns . java <nl> index fbfcd75 . . 4a7b659 100644 <nl> - - - a / src / java / org / apache / cassandra / db / AtomicSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / AtomicSortedColumns . java <nl> @ @ - 44 , 8 + 44 , 6 @ @ import org . apache . cassandra . utils . Allocator ; <nl> * WARNING : removing element through getSortedColumns ( ) . iterator ( ) is * not * <nl> * isolated of other operations and could actually be fully ignored in the <nl> * face of a concurrent . Don ' t use it unless in a non - concurrent context . <nl> - * <nl> - * TODO : check the snaptree license make it ok to use <nl> * / <nl> public class AtomicSortedColumns implements ISortedColumns <nl> { <nl> @ @ - 263 , 11 + 261 , 6 @ @ public class AtomicSortedColumns implements ISortedColumns <nl> return ref . get ( ) . map . size ( ) ; <nl> } <nl> <nl> - public int getEstimatedColumnCount ( ) <nl> - { <nl> - return size ( ) ; <nl> - } <nl> - <nl> public boolean isEmpty ( ) <nl> { <nl> return ref . get ( ) . map . isEmpty ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / RowMutation . java b / src / java / org / apache / cassandra / db / RowMutation . java <nl> index f850d28 . . e90e15e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RowMutation . java <nl> + + + b / src / java / org / apache / cassandra / db / RowMutation . java <nl> @ @ - 26 , 17 + 26 , 11 @ @ import java . util . * ; <nl> import org . apache . commons . lang . StringUtils ; <nl> <nl> import org . apache . cassandra . config . CFMetaData ; <nl> - import org . apache . cassandra . config . KSMetaData ; <nl> import org . apache . cassandra . config . Schema ; <nl> - import org . apache . cassandra . db . marshal . UUIDType ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . net . MessageOut ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> - import org . apache . cassandra . thrift . ColumnOrSuperColumn ; <nl> - import org . apache . cassandra . thrift . Deletion ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> - import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> / / TODO convert this to a Builder pattern instead of encouraging RM . add directly , <nl> / / which is less - efficient since we have to keep a mutable HashMap around <nl> diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> index 776e543 . . b535521 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> @ @ - 119 , 7 + 119 , 6 @ @ public class ThreadSafeSortedColumns extends AbstractThreadUnsafeSortedColumns i <nl> addAllWithSizeDelta ( cm , allocator , transformation , null ) ; <nl> } <nl> <nl> - @ Override <nl> public long addAllWithSizeDelta ( ISortedColumns cm , Allocator allocator , Function < Column , Column > transformation , SecondaryIndexManager . Updater indexer ) <nl> { <nl> delete ( cm . getDeletionInfo ( ) ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7e4d88c . . eccece2 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 18 
 + * Fix static column order for SELECT * wildcard queries ( CASSANDRA - 14638 ) 
 * sstableloader should use discovered broadcast address to connect intra - cluster ( CASSANDRA - 14522 ) 
 * Fix reading columns with non - UTF names from schema ( CASSANDRA - 14468 ) 
 Merged from 2 . 2 : 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 234154e . . 29864bc 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 42 , 6 + 42 , 16 @ @ restore snapshots created with the previous major version using the 
 ' sstableloader ' tool . You can upgrade the file format of your snapshots 
 using the provided ' sstableupgrade ' tool . 
 
 + 3 . 0 . 18 
 + = = = = = = 
 + 
 + Upgrading 
 + - - - - - - - - - 
 + - The order of static columns in SELECT * has been fixed to match that of 2 . 0 and 2 . 1 - they are now sorted 
 + alphabetically again , by their name , just like regular columns are . If you use prepared statements and 
 + SELECT * queries , and have both simple and collection static columns in those tables , and are upgrading from an 
 + earlier 3 . 0 version , then you might be affected by this change . Please see CASSANDRA - 14638 for details . 
 + 
 3 . 0 . 17 
 = = = = = 
 
 diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile 
 index cc2b9aa . . 5f35d57 100644 
 - - - a / doc / cql3 / CQL . textile 
 + + + b / doc / cql3 / CQL . textile 
 @ @ - 1079 , 7 + 1079 , 7 @ @ The @ SELECT @ statements reads one or more columns for one or more rows in a tabl 
 
 h4 ( # selectSelection ) . @ < select - clause > @ 
 
 - The @ < select - clause > @ determines which columns needs to be queried and returned in the result - set . It consists of either the comma - separated list of < selector > or the wildcard character ( @ * @ ) to select all the columns defined for the table . 
 + The @ < select - clause > @ determines which columns needs to be queried and returned in the result - set . It consists of either the comma - separated list of < selector > or the wildcard character ( @ * @ ) to select all the columns defined for the table . Please note that for wildcard @ SELECT @ queries the order of columns returned is not specified and is not guaranteed to be stable between Cassandra versions . 
 
 A @ < selector > @ is either a column name to retrieve or a @ < function > @ of one or more @ < term > @ s . The function allowed are the same as for @ < term > @ and are described in the " function section " : # functions . In addition to these generic functions , the @ WRITETIME @ ( resp . @ TTL @ ) function allows to select the timestamp of when the column was inserted ( resp . the time to live ( in seconds ) for the column ( or null if the column has no expiration set ) ) . 
 
 diff - - git a / src / java / org / apache / cassandra / db / Columns . java b / src / java / org / apache / cassandra / db / Columns . java 
 index eb4f761 . . 45ce91e 100644 
 - - - a / src / java / org / apache / cassandra / db / Columns . java 
 + + + b / src / java / org / apache / cassandra / db / Columns . java 
 @ @ - 50 , 7 + 50 , 16 @ @ public class Columns extends AbstractCollection < ColumnDefinition > implements Col 
 { 
 public static final Serializer serializer = new Serializer ( ) ; 
 public static final Columns NONE = new Columns ( BTree . empty ( ) , 0 ) ; 
 - public static final ColumnDefinition FIRST _ COMPLEX = 
 + 
 + private static final ColumnDefinition FIRST _ COMPLEX _ STATIC = 
 + new ColumnDefinition ( " " , 
 + " " , 
 + ColumnIdentifier . getInterned ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , UTF8Type . instance ) , 
 + SetType . getInstance ( UTF8Type . instance , true ) , 
 + ColumnDefinition . NO _ POSITION , 
 + ColumnDefinition . Kind . STATIC ) ; 
 + 
 + private static final ColumnDefinition FIRST _ COMPLEX _ REGULAR = 
 new ColumnDefinition ( " " , 
 " " , 
 ColumnIdentifier . getInterned ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , UTF8Type . instance ) , 
 @ @ - 99 , 11 + 108 , 14 @ @ public class Columns extends AbstractCollection < ColumnDefinition > implements Col 
 
 private static int findFirstComplexIdx ( Object [ ] tree ) 
 { 
 - / / have fast path for common no - complex case 
 + if ( BTree . isEmpty ( tree ) ) 
 + return 0 ; 
 + 
 int size = BTree . size ( tree ) ; 
 - if ( ! BTree . isEmpty ( tree ) & & BTree . < ColumnDefinition > findByIndex ( tree , size - 1 ) . isSimple ( ) ) 
 - return size ; 
 - return BTree . ceilIndex ( tree , Comparator . naturalOrder ( ) , FIRST _ COMPLEX ) ; 
 + ColumnDefinition last = BTree . findByIndex ( tree , size - 1 ) ; 
 + return last . isSimple ( ) 
 + ? size 
 + : BTree . ceilIndex ( tree , Comparator . naturalOrder ( ) , last . isStatic ( ) ? FIRST _ COMPLEX _ STATIC : FIRST _ COMPLEX _ REGULAR ) ; 
 } 
 
 / * * 
 diff - - git a / test / unit / org / apache / cassandra / db / ColumnsTest . java b / test / unit / org / apache / cassandra / db / ColumnsTest . java 
 index 4e3df80 . . 1a245a0 100644 
 - - - a / test / unit / org / apache / cassandra / db / ColumnsTest . java 
 + + + b / test / unit / org / apache / cassandra / db / ColumnsTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . util . * ; 
 import java . util . concurrent . ThreadLocalRandom ; 
 import java . util . function . Predicate ; 
 
 + import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . Iterators ; 
 import com . google . common . collect . Lists ; 
 
 @ @ - 33 , 6 + 34 , 7 @ @ import junit . framework . Assert ; 
 import org . apache . cassandra . MockSchema ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 + import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . db . marshal . SetType ; 
 import org . apache . cassandra . db . marshal . UTF8Type ; 
 import org . apache . cassandra . io . util . DataInputBuffer ; 
 @ @ - 129 , 21 + 131 , 77 @ @ public class ColumnsTest 
 { 
 List < String > names = new ArrayList < > ( ) ; 
 for ( int i = 0 ; i < 50 ; i + + ) 
 - names . add ( " clustering _ " + i ) ; 
 + names . add ( " regular _ " + i ) ; 
 
 List < ColumnDefinition > defs = new ArrayList < > ( ) ; 
 - addClustering ( names , defs ) ; 
 + addRegular ( names , defs ) ; 
 
 Columns columns = Columns . from ( new HashSet < > ( defs ) ) ; 
 
 defs = new ArrayList < > ( ) ; 
 - addClustering ( names . subList ( 0 , 8 ) , defs ) ; 
 + addRegular ( names . subList ( 0 , 8 ) , defs ) ; 
 
 Columns subset = Columns . from ( new HashSet < > ( defs ) ) ; 
 
 Assert . assertTrue ( columns . containsAll ( subset ) ) ; 
 } 
 
 + @ Test 
 + public void testStaticColumns ( ) 
 + { 
 + testColumns ( ColumnDefinition . Kind . STATIC ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegularColumns ( ) 
 + { 
 + testColumns ( ColumnDefinition . Kind . REGULAR ) ; 
 + } 
 + 
 + private void testColumns ( ColumnDefinition . Kind kind ) 
 + { 
 + List < ColumnDefinition > definitions = ImmutableList . of ( 
 + def ( " a " , UTF8Type . instance , kind ) , 
 + def ( " b " , SetType . getInstance ( UTF8Type . instance , true ) , kind ) , 
 + def ( " c " , UTF8Type . instance , kind ) , 
 + def ( " d " , SetType . getInstance ( UTF8Type . instance , true ) , kind ) , 
 + def ( " e " , UTF8Type . instance , kind ) , 
 + def ( " f " , SetType . getInstance ( UTF8Type . instance , true ) , kind ) , 
 + def ( " g " , UTF8Type . instance , kind ) , 
 + def ( " h " , SetType . getInstance ( UTF8Type . instance , true ) , kind ) 
 + ) ; 
 + Columns columns = Columns . from ( definitions ) ; 
 + 
 + / / test simpleColumnCount ( ) 
 + Assert . assertEquals ( 4 , columns . simpleColumnCount ( ) ) ; 
 + 
 + / / test simpleColumns ( ) 
 + List < ColumnDefinition > simpleColumnsExpected = 
 + ImmutableList . of ( definitions . get ( 0 ) , definitions . get ( 2 ) , definitions . get ( 4 ) , definitions . get ( 6 ) ) ; 
 + List < ColumnDefinition > simpleColumnsActual = new ArrayList < > ( ) ; 
 + Iterators . addAll ( simpleColumnsActual , columns . simpleColumns ( ) ) ; 
 + Assert . assertEquals ( simpleColumnsExpected , simpleColumnsActual ) ; 
 + 
 + / / test complexColumnCount ( ) 
 + Assert . assertEquals ( 4 , columns . complexColumnCount ( ) ) ; 
 + 
 + / / test complexColumns ( ) 
 + List < ColumnDefinition > complexColumnsExpected = 
 + ImmutableList . of ( definitions . get ( 1 ) , definitions . get ( 3 ) , definitions . get ( 5 ) , definitions . get ( 7 ) ) ; 
 + List < ColumnDefinition > complexColumnsActual = new ArrayList < > ( ) ; 
 + Iterators . addAll ( complexColumnsActual , columns . complexColumns ( ) ) ; 
 + Assert . assertEquals ( complexColumnsExpected , complexColumnsActual ) ; 
 + 
 + / / test size ( ) 
 + Assert . assertEquals ( 8 , columns . size ( ) ) ; 
 + 
 + / / test selectOrderIterator ( ) 
 + List < ColumnDefinition > columnsExpected = definitions ; 
 + List < ColumnDefinition > columnsActual = new ArrayList < > ( ) ; 
 + Iterators . addAll ( columnsActual , columns . selectOrderIterator ( ) ) ; 
 + Assert . assertEquals ( columnsExpected , columnsActual ) ; 
 + } 
 + 
 private void testSerializeSubset ( ColumnsCheck input ) throws IOException 
 { 
 testSerializeSubset ( input . columns , input . columns , input . definitions ) ; 
 @ @ - 403 , 6 + 461 , 11 @ @ public class ColumnsTest 
 results . add ( ColumnDefinition . regularDef ( cfMetaData , bytes ( name ) , SetType . getInstance ( UTF8Type . instance , true ) ) ) ; 
 } 
 
 + private static ColumnDefinition def ( String name , AbstractType < ? > type , ColumnDefinition . Kind kind ) 
 + { 
 + return new ColumnDefinition ( cfMetaData , bytes ( name ) , type , ColumnDefinition . NO _ POSITION , kind ) ; 
 + } 
 + 
 private static CFMetaData mock ( Columns columns ) 
 { 
 if ( columns . isEmpty ( ) )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / AbstractThreadUnsafeSortedColumns . java b / src / java / org / apache / cassandra / db / AbstractThreadUnsafeSortedColumns . java 
 index aa153e1 . . b40c2e2 100644 
 - - - a / src / java / org / apache / cassandra / db / AbstractThreadUnsafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / AbstractThreadUnsafeSortedColumns . java 
 @ @ - 86 , 9 + 86 , 4 @ @ public abstract class AbstractThreadUnsafeSortedColumns implements ISortedColumn 
 { 
 return size ( ) = = 0 ; 
 } 
 - 
 - public int getEstimatedColumnCount ( ) 
 - { 
 - return size ( ) ; 
 - } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / AtomicSortedColumns . java b / src / java / org / apache / cassandra / db / AtomicSortedColumns . java 
 index fbfcd75 . . 4a7b659 100644 
 - - - a / src / java / org / apache / cassandra / db / AtomicSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / AtomicSortedColumns . java 
 @ @ - 44 , 8 + 44 , 6 @ @ import org . apache . cassandra . utils . Allocator ; 
 * WARNING : removing element through getSortedColumns ( ) . iterator ( ) is * not * 
 * isolated of other operations and could actually be fully ignored in the 
 * face of a concurrent . Don ' t use it unless in a non - concurrent context . 
 - * 
 - * TODO : check the snaptree license make it ok to use 
 * / 
 public class AtomicSortedColumns implements ISortedColumns 
 { 
 @ @ - 263 , 11 + 261 , 6 @ @ public class AtomicSortedColumns implements ISortedColumns 
 return ref . get ( ) . map . size ( ) ; 
 } 
 
 - public int getEstimatedColumnCount ( ) 
 - { 
 - return size ( ) ; 
 - } 
 - 
 public boolean isEmpty ( ) 
 { 
 return ref . get ( ) . map . isEmpty ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / RowMutation . java b / src / java / org / apache / cassandra / db / RowMutation . java 
 index f850d28 . . e90e15e 100644 
 - - - a / src / java / org / apache / cassandra / db / RowMutation . java 
 + + + b / src / java / org / apache / cassandra / db / RowMutation . java 
 @ @ - 26 , 17 + 26 , 11 @ @ import java . util . * ; 
 import org . apache . commons . lang . StringUtils ; 
 
 import org . apache . cassandra . config . CFMetaData ; 
 - import org . apache . cassandra . config . KSMetaData ; 
 import org . apache . cassandra . config . Schema ; 
 - import org . apache . cassandra . db . marshal . UUIDType ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . net . MessageOut ; 
 import org . apache . cassandra . net . MessagingService ; 
 - import org . apache . cassandra . thrift . ColumnOrSuperColumn ; 
 - import org . apache . cassandra . thrift . Deletion ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 - import org . apache . cassandra . utils . UUIDGen ; 
 
 / / TODO convert this to a Builder pattern instead of encouraging RM . add directly , 
 / / which is less - efficient since we have to keep a mutable HashMap around 
 diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 index 776e543 . . b535521 100644 
 - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 @ @ - 119 , 7 + 119 , 6 @ @ public class ThreadSafeSortedColumns extends AbstractThreadUnsafeSortedColumns i 
 addAllWithSizeDelta ( cm , allocator , transformation , null ) ; 
 } 
 
 - @ Override 
 public long addAllWithSizeDelta ( ISortedColumns cm , Allocator allocator , Function < Column , Column > transformation , SecondaryIndexManager . Updater indexer ) 
 { 
 delete ( cm . getDeletionInfo ( ) ) ;
