BLEU SCORE: 0.02399905349559606

TEST MSG: Fix sigar message about swap
GENERATED MSG: Allow estimated memtable size to exceed slab allocator size

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / utils / SigarLibrary . java b / src / java / org / apache / cassandra / utils / SigarLibrary . java <nl> index be85977 . . 7cf4d71 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / SigarLibrary . java <nl> + + + b / src / java / org / apache / cassandra / utils / SigarLibrary . java <nl> @ @ - 140 , 11 + 140 , 11 @ @ public class SigarLibrary <nl> long swapSize = swap . getTotal ( ) ; <nl> if ( swapSize > 0 ) <nl> { <nl> - return false ; <nl> + return true ; <nl> } <nl> else <nl> { <nl> - return true ; <nl> + return false ; <nl> } <nl> } <nl> catch ( SigarException sigarException )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 830f568 . . fe4efc7 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 5 , 6 + 5 , 7 @ @ <nl> * Correctly send metadata on SELECT COUNT ( CASSANDRA - 6080 ) <nl> * Track clients ' remote addresses in ClientState ( CASSANDRA - 6070 ) <nl> Merged from 1 . 2 : <nl> + * Allow estimated memtable size to exceed slab allocator size ( CASSANDRA - 6078 ) <nl> * Start MeteredFlusher earlier to prevent OOM during CL replay ( CASSANDRA - 6087 ) <nl> * Avoid sending Truncate command to fat clients ( CASSANDRA - 6088 ) <nl> * Allow cache - keys - to - save to be set at runtime ( CASSANDRA - 5980 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index 4cca602 . . 14ce74c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 136 , 11 + 136 , 9 @ @ public class Memtable <nl> { <nl> long estimatedSize = ( long ) ( currentSize . get ( ) * cfs . liveRatio ) ; <nl> <nl> - / / cap the estimate at both ends by what the allocator can tell us <nl> + / / liveRatio is just an estimate ; we can get a lower bound directly from the allocator <nl> if ( estimatedSize < allocator . getMinimumSize ( ) ) <nl> return allocator . getMinimumSize ( ) ; <nl> - if ( estimatedSize > allocator . getMaximumSize ( ) ) <nl> - return allocator . getMaximumSize ( ) ; <nl> <nl> return estimatedSize ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / Allocator . java b / src / java / org / apache / cassandra / utils / Allocator . java <nl> index d11815d . . 7134353 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / Allocator . java <nl> + + + b / src / java / org / apache / cassandra / utils / Allocator . java <nl> @ @ - 38 , 6 + 38 , 4 @ @ public abstract class Allocator <nl> public abstract ByteBuffer allocate ( int size ) ; <nl> <nl> public abstract long getMinimumSize ( ) ; <nl> - <nl> - public abstract long getMaximumSize ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / HeapAllocator . java b / src / java / org / apache / cassandra / utils / HeapAllocator . java <nl> index efe55dd . . 3d19b98 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / HeapAllocator . java <nl> + + + b / src / java / org / apache / cassandra / utils / HeapAllocator . java <nl> @ @ - 38 , 9 + 38 , 4 @ @ public final class HeapAllocator extends Allocator <nl> { <nl> return 0 ; <nl> } <nl> - <nl> - public long getMaximumSize ( ) <nl> - { <nl> - return Long . MAX _ VALUE ; <nl> - } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / SlabAllocator . java b / src / java / org / apache / cassandra / utils / SlabAllocator . java <nl> index edd6f86 . . dedf869 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / SlabAllocator . java <nl> + + + b / src / java / org / apache / cassandra / utils / SlabAllocator . java <nl> @ @ - 117 , 14 + 117 , 6 @ @ public class SlabAllocator extends Allocator <nl> } <nl> <nl> / * * <nl> - * @ return an upper bound on how much space has been allocated <nl> - * / <nl> - public long getMaximumSize ( ) <nl> - { <nl> - return unslabbed . get ( ) + regionCount . get ( ) * ( long ) REGION _ SIZE ; <nl> - } <nl> - <nl> - / * * <nl> * A region of memory out of which allocations are sliced . <nl> * <nl> * This serves two purposes :

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / utils / SigarLibrary . java b / src / java / org / apache / cassandra / utils / SigarLibrary . java 
 index be85977 . . 7cf4d71 100644 
 - - - a / src / java / org / apache / cassandra / utils / SigarLibrary . java 
 + + + b / src / java / org / apache / cassandra / utils / SigarLibrary . java 
 @ @ - 140 , 11 + 140 , 11 @ @ public class SigarLibrary 
 long swapSize = swap . getTotal ( ) ; 
 if ( swapSize > 0 ) 
 { 
 - return false ; 
 + return true ; 
 } 
 else 
 { 
 - return true ; 
 + return false ; 
 } 
 } 
 catch ( SigarException sigarException )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 830f568 . . fe4efc7 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 5 , 6 + 5 , 7 @ @ 
 * Correctly send metadata on SELECT COUNT ( CASSANDRA - 6080 ) 
 * Track clients ' remote addresses in ClientState ( CASSANDRA - 6070 ) 
 Merged from 1 . 2 : 
 + * Allow estimated memtable size to exceed slab allocator size ( CASSANDRA - 6078 ) 
 * Start MeteredFlusher earlier to prevent OOM during CL replay ( CASSANDRA - 6087 ) 
 * Avoid sending Truncate command to fat clients ( CASSANDRA - 6088 ) 
 * Allow cache - keys - to - save to be set at runtime ( CASSANDRA - 5980 ) 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index 4cca602 . . 14ce74c 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 136 , 11 + 136 , 9 @ @ public class Memtable 
 { 
 long estimatedSize = ( long ) ( currentSize . get ( ) * cfs . liveRatio ) ; 
 
 - / / cap the estimate at both ends by what the allocator can tell us 
 + / / liveRatio is just an estimate ; we can get a lower bound directly from the allocator 
 if ( estimatedSize < allocator . getMinimumSize ( ) ) 
 return allocator . getMinimumSize ( ) ; 
 - if ( estimatedSize > allocator . getMaximumSize ( ) ) 
 - return allocator . getMaximumSize ( ) ; 
 
 return estimatedSize ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / Allocator . java b / src / java / org / apache / cassandra / utils / Allocator . java 
 index d11815d . . 7134353 100644 
 - - - a / src / java / org / apache / cassandra / utils / Allocator . java 
 + + + b / src / java / org / apache / cassandra / utils / Allocator . java 
 @ @ - 38 , 6 + 38 , 4 @ @ public abstract class Allocator 
 public abstract ByteBuffer allocate ( int size ) ; 
 
 public abstract long getMinimumSize ( ) ; 
 - 
 - public abstract long getMaximumSize ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / HeapAllocator . java b / src / java / org / apache / cassandra / utils / HeapAllocator . java 
 index efe55dd . . 3d19b98 100644 
 - - - a / src / java / org / apache / cassandra / utils / HeapAllocator . java 
 + + + b / src / java / org / apache / cassandra / utils / HeapAllocator . java 
 @ @ - 38 , 9 + 38 , 4 @ @ public final class HeapAllocator extends Allocator 
 { 
 return 0 ; 
 } 
 - 
 - public long getMaximumSize ( ) 
 - { 
 - return Long . MAX _ VALUE ; 
 - } 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / SlabAllocator . java b / src / java / org / apache / cassandra / utils / SlabAllocator . java 
 index edd6f86 . . dedf869 100644 
 - - - a / src / java / org / apache / cassandra / utils / SlabAllocator . java 
 + + + b / src / java / org / apache / cassandra / utils / SlabAllocator . java 
 @ @ - 117 , 14 + 117 , 6 @ @ public class SlabAllocator extends Allocator 
 } 
 
 / * * 
 - * @ return an upper bound on how much space has been allocated 
 - * / 
 - public long getMaximumSize ( ) 
 - { 
 - return unslabbed . get ( ) + regionCount . get ( ) * ( long ) REGION _ SIZE ; 
 - } 
 - 
 - / * * 
 * A region of memory out of which allocations are sliced . 
 * 
 * This serves two purposes :
