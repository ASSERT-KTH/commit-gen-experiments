BLEU SCORE: 0.675316032742297

TEST MSG: Log when messages are dropped due to cross _ node _ timeout ( CASSANDRA - 9793 )
GENERATED MSG: Log when messages are dropped due to cross _ node _ timeout

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b8593c0 . . 17ec705 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 2 , 6 + 2 , 8 @ @ <nl> * UDF / UDA execution time in trace ( CASSANDRA - 9723 ) <nl> * Remove repair snapshot leftover on startup ( CASSANDRA - 7357 ) <nl> * Use random nodes for batch log when only 2 racks ( CASSANDRA - 8735 ) <nl> + Merged from 2 . 0 : <nl> + * Log when messages are dropped due to cross _ node _ timeout ( CASSANDRA - 9793 ) <nl> <nl> 2 . 2 . 0 <nl> * Fix cqlsh copy methods and other windows specific issues ( CASSANDRA - 9795 ) <nl> diff - - git a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> index c325717 . . 375da64 100644 <nl> - - - a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> @ @ - 181 , 10 + 181 , 15 @ @ public class IncomingTcpConnection extends Thread implements Closeable <nl> id = input . readInt ( ) ; <nl> <nl> long timestamp = System . currentTimeMillis ( ) ; <nl> + boolean isCrossNodeTimestamp = false ; <nl> / / make sure to readInt , even if cross _ node _ to is not enabled <nl> int partial = input . readInt ( ) ; <nl> if ( DatabaseDescriptor . hasCrossNodeTimeout ( ) ) <nl> - timestamp = ( timestamp & 0xFFFFFFFF00000000L ) | ( ( ( partial & 0xFFFFFFFFL ) < < 2 ) > > 2 ) ; <nl> + { <nl> + long crossNodeTimestamp = ( timestamp & 0xFFFFFFFF00000000L ) | ( ( ( partial & 0xFFFFFFFFL ) < < 2 ) > > 2 ) ; <nl> + isCrossNodeTimestamp = ( timestamp ! = crossNodeTimestamp ) ; <nl> + timestamp = crossNodeTimestamp ; <nl> + } <nl> <nl> MessageIn message = MessageIn . read ( input , version , id ) ; <nl> if ( message = = null ) <nl> @ @ - 194 , 7 + 199 , 7 @ @ public class IncomingTcpConnection extends Thread implements Closeable <nl> } <nl> if ( version < = MessagingService . current _ version ) <nl> { <nl> - MessagingService . instance ( ) . receive ( message , id , timestamp ) ; <nl> + MessagingService . instance ( ) . receive ( message , id , timestamp , isCrossNodeTimestamp ) ; <nl> } <nl> else <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java <nl> index f160464 . . 7f30797 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java <nl> + + + b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java <nl> @ @ - 31 , 15 + 31 , 17 @ @ public class MessageDeliveryTask implements Runnable <nl> private static final Logger logger = LoggerFactory . getLogger ( MessageDeliveryTask . class ) ; <nl> <nl> private final MessageIn message ; <nl> - private final long constructionTime ; <nl> private final int id ; <nl> + private final long constructionTime ; <nl> + private final boolean isCrossNodeTimestamp ; <nl> <nl> - public MessageDeliveryTask ( MessageIn message , int id , long timestamp ) <nl> + public MessageDeliveryTask ( MessageIn message , int id , long timestamp , boolean isCrossNodeTimestamp ) <nl> { <nl> assert message ! = null ; <nl> this . message = message ; <nl> this . id = id ; <nl> - constructionTime = timestamp ; <nl> + this . constructionTime = timestamp ; <nl> + this . isCrossNodeTimestamp = isCrossNodeTimestamp ; <nl> } <nl> <nl> public void run ( ) <nl> @ @ - 48 , 7 + 50 , 7 @ @ public class MessageDeliveryTask implements Runnable <nl> if ( MessagingService . DROPPABLE _ VERBS . contains ( verb ) <nl> & & System . currentTimeMillis ( ) > constructionTime + message . getTimeout ( ) ) <nl> { <nl> - MessagingService . instance ( ) . incrementDroppedMessages ( verb ) ; <nl> + MessagingService . instance ( ) . incrementDroppedMessages ( verb , isCrossNodeTimestamp ) ; <nl> return ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index dec7550 . . e3ad8c0 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import java . util . concurrent . atomic . AtomicInteger ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Sets ; <nl> @ @ - 125 , 7 + 126 , 7 @ @ public final class MessagingService implements MessagingServiceMBean <nl> SNAPSHOT , / / Similar to nt snapshot <nl> MIGRATION _ REQUEST , <nl> GOSSIP _ SHUTDOWN , <nl> - _ TRACE , / / dummy verb so we can use MS . droppedMessages <nl> + _ TRACE , / / dummy verb so we can use MS . droppedMessagesMap <nl> ECHO , <nl> REPAIR _ MESSAGE , <nl> / / use as padding for backwards compatability where a previous version needs to validate a verb from the future . <nl> @ @ - 297 , 10 + 298 , 23 @ @ public final class MessagingService implements MessagingServiceMBean <nl> Verb . PAGED _ RANGE , <nl> Verb . REQUEST _ RESPONSE ) ; <nl> <nl> + <nl> + private static final class DroppedMessages <nl> + { <nl> + final DroppedMessageMetrics metrics ; <nl> + final AtomicInteger droppedInternalTimeout ; <nl> + final AtomicInteger droppedCrossNodeTimeout ; <nl> + <nl> + DroppedMessages ( Verb verb ) <nl> + { <nl> + this . metrics = new DroppedMessageMetrics ( verb ) ; <nl> + this . droppedInternalTimeout = new AtomicInteger ( 0 ) ; <nl> + this . droppedCrossNodeTimeout = new AtomicInteger ( 0 ) ; <nl> + } <nl> + <nl> + } <nl> / / total dropped message counts for server lifetime <nl> - private final Map < Verb , DroppedMessageMetrics > droppedMessages = new EnumMap < Verb , DroppedMessageMetrics > ( Verb . class ) ; <nl> - / / dropped count when last requested for the Recent api . high concurrency isn ' t necessary here . <nl> - private final Map < Verb , Integer > lastDroppedInternal = new EnumMap < Verb , Integer > ( Verb . class ) ; <nl> + private final Map < Verb , DroppedMessages > droppedMessagesMap = new EnumMap < > ( Verb . class ) ; <nl> <nl> private final List < ILatencySubscriber > subscribers = new ArrayList < ILatencySubscriber > ( ) ; <nl> <nl> @ @ - 322 , 7 + 336 , 7 @ @ public final class MessagingService implements MessagingServiceMBean <nl> <nl> private static class MSHandle <nl> { <nl> - public static final MessagingService instance = new MessagingService ( ) ; <nl> + public static final MessagingService instance = new MessagingService ( false ) ; <nl> } <nl> <nl> public static MessagingService instance ( ) <nl> @ @ - 330 , 24 + 344 , 34 @ @ public final class MessagingService implements MessagingServiceMBean <nl> return MSHandle . instance ; <nl> } <nl> <nl> - private MessagingService ( ) <nl> + private static class MSTestHandle <nl> + { <nl> + public static final MessagingService instance = new MessagingService ( true ) ; <nl> + } <nl> + <nl> + static MessagingService test ( ) <nl> + { <nl> + return MSTestHandle . instance ; <nl> + } <nl> + <nl> + private MessagingService ( boolean testOnly ) <nl> { <nl> for ( Verb verb : DROPPABLE _ VERBS ) <nl> - { <nl> - droppedMessages . put ( verb , new DroppedMessageMetrics ( verb ) ) ; <nl> - lastDroppedInternal . put ( verb , 0 ) ; <nl> - } <nl> + droppedMessagesMap . put ( verb , new DroppedMessages ( verb ) ) ; <nl> <nl> listenGate = new SimpleCondition ( ) ; <nl> verbHandlers = new EnumMap < Verb , IVerbHandler > ( Verb . class ) ; <nl> - Runnable logDropped = new Runnable ( ) <nl> + if ( ! testOnly ) <nl> { <nl> - public void run ( ) <nl> + Runnable logDropped = new Runnable ( ) <nl> { <nl> - logDroppedMessages ( ) ; <nl> - } <nl> - } ; <nl> - ScheduledExecutors . scheduledTasks . scheduleWithFixedDelay ( logDropped , LOG _ DROPPED _ INTERVAL _ IN _ MS , LOG _ DROPPED _ INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; <nl> + public void run ( ) <nl> + { <nl> + logDroppedMessages ( ) ; <nl> + } <nl> + } ; <nl> + ScheduledExecutors . scheduledTasks . scheduleWithFixedDelay ( logDropped , LOG _ DROPPED _ INTERVAL _ IN _ MS , LOG _ DROPPED _ INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; <nl> + } <nl> <nl> Function < Pair < Integer , ExpiringMap . CacheableObject < CallbackInfo > > , ? > timeoutReporter = new Function < Pair < Integer , ExpiringMap . CacheableObject < CallbackInfo > > , Object > ( ) <nl> { <nl> @ @ - 378 , 16 + 402 , 19 @ @ public final class MessagingService implements MessagingServiceMBean <nl> } <nl> } ; <nl> <nl> - callbacks = new ExpiringMap < Integer , CallbackInfo > ( DatabaseDescriptor . getMinRpcTimeout ( ) , timeoutReporter ) ; <nl> + callbacks = new ExpiringMap < > ( DatabaseDescriptor . getMinRpcTimeout ( ) , timeoutReporter ) ; <nl> <nl> - MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> - try <nl> - { <nl> - mbs . registerMBean ( this , new ObjectName ( MBEAN _ NAME ) ) ; <nl> - } <nl> - catch ( Exception e ) <nl> + if ( ! testOnly ) <nl> { <nl> - throw new RuntimeException ( e ) ; <nl> + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + try <nl> + { <nl> + mbs . registerMBean ( this , new ObjectName ( MBEAN _ NAME ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 741 , 7 + 768 , 7 @ @ public final class MessagingService implements MessagingServiceMBean <nl> } <nl> } <nl> <nl> - public void receive ( MessageIn message , int id , long timestamp ) <nl> + public void receive ( MessageIn message , int id , long timestamp , boolean isCrossNodeTimestamp ) <nl> { <nl> TraceState state = Tracing . instance . initializeFromMessage ( message ) ; <nl> if ( state ! = null ) <nl> @ @ - 752 , 7 + 779 , 7 @ @ public final class MessagingService implements MessagingServiceMBean <nl> if ( ! ms . allowIncomingMessage ( message , id ) ) <nl> return ; <nl> <nl> - Runnable runnable = new MessageDeliveryTask ( message , id , timestamp ) ; <nl> + Runnable runnable = new MessageDeliveryTask ( message , id , timestamp , isCrossNodeTimestamp ) ; <nl> TracingAwareExecutorService stage = StageManager . getStage ( message . getMessageType ( ) ) ; <nl> assert stage ! = null : " No stage for message type " + message . verb ; <nl> <nl> @ @ - 842 , 29 + 869 , 55 @ @ public final class MessagingService implements MessagingServiceMBean <nl> <nl> public void incrementDroppedMessages ( Verb verb ) <nl> { <nl> + incrementDroppedMessages ( verb , false ) ; <nl> + } <nl> + <nl> + public void incrementDroppedMessages ( Verb verb , boolean isCrossNodeTimeout ) <nl> + { <nl> assert DROPPABLE _ VERBS . contains ( verb ) : " Verb " + verb + " should not legally be dropped " ; <nl> - droppedMessages . get ( verb ) . dropped . mark ( ) ; <nl> + incrementDroppedMessages ( droppedMessagesMap . get ( verb ) , isCrossNodeTimeout ) ; <nl> + } <nl> + <nl> + private void incrementDroppedMessages ( DroppedMessages droppedMessages , boolean isCrossNodeTimeout ) <nl> + { <nl> + droppedMessages . metrics . dropped . mark ( ) ; <nl> + if ( isCrossNodeTimeout ) <nl> + droppedMessages . droppedCrossNodeTimeout . incrementAndGet ( ) ; <nl> + else <nl> + droppedMessages . droppedInternalTimeout . incrementAndGet ( ) ; <nl> } <nl> <nl> private void logDroppedMessages ( ) <nl> { <nl> - boolean logTpstats = false ; <nl> - for ( Map . Entry < Verb , DroppedMessageMetrics > entry : droppedMessages . entrySet ( ) ) <nl> + List < String > logs = getDroppedMessagesLogs ( ) ; <nl> + for ( String log : logs ) <nl> + logger . error ( log ) ; <nl> + <nl> + if ( logs . size ( ) > 0 ) <nl> + StatusLogger . log ( ) ; <nl> + } <nl> + <nl> + @ VisibleForTesting <nl> + List < String > getDroppedMessagesLogs ( ) <nl> + { <nl> + List < String > ret = new ArrayList < > ( ) ; <nl> + for ( Map . Entry < Verb , DroppedMessages > entry : droppedMessagesMap . entrySet ( ) ) <nl> { <nl> - int dropped = ( int ) entry . getValue ( ) . dropped . getCount ( ) ; <nl> Verb verb = entry . getKey ( ) ; <nl> - int recent = dropped - lastDroppedInternal . get ( verb ) ; <nl> - if ( recent > 0 ) <nl> + DroppedMessages droppedMessages = entry . getValue ( ) ; <nl> + <nl> + int droppedInternalTimeout = droppedMessages . droppedInternalTimeout . getAndSet ( 0 ) ; <nl> + int droppedCrossNodeTimeout = droppedMessages . droppedCrossNodeTimeout . getAndSet ( 0 ) ; <nl> + if ( droppedInternalTimeout > 0 | | droppedCrossNodeTimeout > 0 ) <nl> { <nl> - logTpstats = true ; <nl> - logger . info ( " { } { } messages dropped in last { } ms " , <nl> - new Object [ ] { recent , verb , LOG _ DROPPED _ INTERVAL _ IN _ MS } ) ; <nl> - lastDroppedInternal . put ( verb , dropped ) ; <nl> + ret . add ( String . format ( " % s messages were dropped in last % d ms : % d for internal timeout and % d for cross node timeout " , <nl> + verb , <nl> + LOG _ DROPPED _ INTERVAL _ IN _ MS , <nl> + droppedInternalTimeout , <nl> + droppedCrossNodeTimeout ) ) ; <nl> } <nl> } <nl> - <nl> - if ( logTpstats ) <nl> - StatusLogger . log ( ) ; <nl> + return ret ; <nl> } <nl> <nl> private static class SocketThread extends Thread <nl> @ @ - 1016 , 9 + 1069 , 9 @ @ public final class MessagingService implements MessagingServiceMBean <nl> <nl> public Map < String , Integer > getDroppedMessages ( ) <nl> { <nl> - Map < String , Integer > map = new HashMap < String , Integer > ( droppedMessages . size ( ) ) ; <nl> - for ( Map . Entry < Verb , DroppedMessageMetrics > entry : droppedMessages . entrySet ( ) ) <nl> - map . put ( entry . getKey ( ) . toString ( ) , ( int ) entry . getValue ( ) . dropped . getCount ( ) ) ; <nl> + Map < String , Integer > map = new HashMap < > ( droppedMessagesMap . size ( ) ) ; <nl> + for ( Map . Entry < Verb , DroppedMessages > entry : droppedMessagesMap . entrySet ( ) ) <nl> + map . put ( entry . getKey ( ) . toString ( ) , ( int ) entry . getValue ( ) . metrics . dropped . getCount ( ) ) ; <nl> return map ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / net / MessagingServiceTest . java b / test / unit / org / apache / cassandra / net / MessagingServiceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 75c146e <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / net / MessagingServiceTest . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + package org . apache . cassandra . net ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + public class MessagingServiceTest <nl> + { <nl> + private final MessagingService messagingService = MessagingService . test ( ) ; <nl> + <nl> + @ Test <nl> + public void testDroppedMessages ( ) <nl> + { <nl> + MessagingService . Verb verb = MessagingService . Verb . READ ; <nl> + <nl> + for ( int i = 0 ; i < 5000 ; i + + ) <nl> + messagingService . incrementDroppedMessages ( verb , i % 2 = = 0 ) ; <nl> + <nl> + List < String > logs = messagingService . getDroppedMessagesLogs ( ) ; <nl> + assertEquals ( 1 , logs . size ( ) ) ; <nl> + assertEquals ( " READ messages were dropped in last 5000 ms : 2500 for internal timeout and 2500 for cross node timeout " , logs . get ( 0 ) ) ; <nl> + assertEquals ( 5000 , ( int ) messagingService . getDroppedMessages ( ) . get ( verb . toString ( ) ) ) ; <nl> + <nl> + logs = messagingService . getDroppedMessagesLogs ( ) ; <nl> + assertEquals ( 0 , logs . size ( ) ) ; <nl> + <nl> + for ( int i = 0 ; i < 2500 ; i + + ) <nl> + messagingService . incrementDroppedMessages ( verb , i % 2 = = 0 ) ; <nl> + <nl> + logs = messagingService . getDroppedMessagesLogs ( ) ; <nl> + assertEquals ( " READ messages were dropped in last 5000 ms : 1250 for internal timeout and 1250 for cross node timeout " , logs . get ( 0 ) ) ; <nl> + assertEquals ( 7500 , ( int ) messagingService . getDroppedMessages ( ) . get ( verb . toString ( ) ) ) ; <nl> + } <nl> + <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b8593c0 . . 17ec705 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 2 , 6 + 2 , 8 @ @ 
 * UDF / UDA execution time in trace ( CASSANDRA - 9723 ) 
 * Remove repair snapshot leftover on startup ( CASSANDRA - 7357 ) 
 * Use random nodes for batch log when only 2 racks ( CASSANDRA - 8735 ) 
 + Merged from 2 . 0 : 
 + * Log when messages are dropped due to cross _ node _ timeout ( CASSANDRA - 9793 ) 
 
 2 . 2 . 0 
 * Fix cqlsh copy methods and other windows specific issues ( CASSANDRA - 9795 ) 
 diff - - git a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 index c325717 . . 375da64 100644 
 - - - a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 @ @ - 181 , 10 + 181 , 15 @ @ public class IncomingTcpConnection extends Thread implements Closeable 
 id = input . readInt ( ) ; 
 
 long timestamp = System . currentTimeMillis ( ) ; 
 + boolean isCrossNodeTimestamp = false ; 
 / / make sure to readInt , even if cross _ node _ to is not enabled 
 int partial = input . readInt ( ) ; 
 if ( DatabaseDescriptor . hasCrossNodeTimeout ( ) ) 
 - timestamp = ( timestamp & 0xFFFFFFFF00000000L ) | ( ( ( partial & 0xFFFFFFFFL ) < < 2 ) > > 2 ) ; 
 + { 
 + long crossNodeTimestamp = ( timestamp & 0xFFFFFFFF00000000L ) | ( ( ( partial & 0xFFFFFFFFL ) < < 2 ) > > 2 ) ; 
 + isCrossNodeTimestamp = ( timestamp ! = crossNodeTimestamp ) ; 
 + timestamp = crossNodeTimestamp ; 
 + } 
 
 MessageIn message = MessageIn . read ( input , version , id ) ; 
 if ( message = = null ) 
 @ @ - 194 , 7 + 199 , 7 @ @ public class IncomingTcpConnection extends Thread implements Closeable 
 } 
 if ( version < = MessagingService . current _ version ) 
 { 
 - MessagingService . instance ( ) . receive ( message , id , timestamp ) ; 
 + MessagingService . instance ( ) . receive ( message , id , timestamp , isCrossNodeTimestamp ) ; 
 } 
 else 
 { 
 diff - - git a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java 
 index f160464 . . 7f30797 100644 
 - - - a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java 
 + + + b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java 
 @ @ - 31 , 15 + 31 , 17 @ @ public class MessageDeliveryTask implements Runnable 
 private static final Logger logger = LoggerFactory . getLogger ( MessageDeliveryTask . class ) ; 
 
 private final MessageIn message ; 
 - private final long constructionTime ; 
 private final int id ; 
 + private final long constructionTime ; 
 + private final boolean isCrossNodeTimestamp ; 
 
 - public MessageDeliveryTask ( MessageIn message , int id , long timestamp ) 
 + public MessageDeliveryTask ( MessageIn message , int id , long timestamp , boolean isCrossNodeTimestamp ) 
 { 
 assert message ! = null ; 
 this . message = message ; 
 this . id = id ; 
 - constructionTime = timestamp ; 
 + this . constructionTime = timestamp ; 
 + this . isCrossNodeTimestamp = isCrossNodeTimestamp ; 
 } 
 
 public void run ( ) 
 @ @ - 48 , 7 + 50 , 7 @ @ public class MessageDeliveryTask implements Runnable 
 if ( MessagingService . DROPPABLE _ VERBS . contains ( verb ) 
 & & System . currentTimeMillis ( ) > constructionTime + message . getTimeout ( ) ) 
 { 
 - MessagingService . instance ( ) . incrementDroppedMessages ( verb ) ; 
 + MessagingService . instance ( ) . incrementDroppedMessages ( verb , isCrossNodeTimestamp ) ; 
 return ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index dec7550 . . e3ad8c0 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import java . util . concurrent . atomic . AtomicInteger ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . base . Function ; 
 import com . google . common . collect . Lists ; 
 import com . google . common . collect . Sets ; 
 @ @ - 125 , 7 + 126 , 7 @ @ public final class MessagingService implements MessagingServiceMBean 
 SNAPSHOT , / / Similar to nt snapshot 
 MIGRATION _ REQUEST , 
 GOSSIP _ SHUTDOWN , 
 - _ TRACE , / / dummy verb so we can use MS . droppedMessages 
 + _ TRACE , / / dummy verb so we can use MS . droppedMessagesMap 
 ECHO , 
 REPAIR _ MESSAGE , 
 / / use as padding for backwards compatability where a previous version needs to validate a verb from the future . 
 @ @ - 297 , 10 + 298 , 23 @ @ public final class MessagingService implements MessagingServiceMBean 
 Verb . PAGED _ RANGE , 
 Verb . REQUEST _ RESPONSE ) ; 
 
 + 
 + private static final class DroppedMessages 
 + { 
 + final DroppedMessageMetrics metrics ; 
 + final AtomicInteger droppedInternalTimeout ; 
 + final AtomicInteger droppedCrossNodeTimeout ; 
 + 
 + DroppedMessages ( Verb verb ) 
 + { 
 + this . metrics = new DroppedMessageMetrics ( verb ) ; 
 + this . droppedInternalTimeout = new AtomicInteger ( 0 ) ; 
 + this . droppedCrossNodeTimeout = new AtomicInteger ( 0 ) ; 
 + } 
 + 
 + } 
 / / total dropped message counts for server lifetime 
 - private final Map < Verb , DroppedMessageMetrics > droppedMessages = new EnumMap < Verb , DroppedMessageMetrics > ( Verb . class ) ; 
 - / / dropped count when last requested for the Recent api . high concurrency isn ' t necessary here . 
 - private final Map < Verb , Integer > lastDroppedInternal = new EnumMap < Verb , Integer > ( Verb . class ) ; 
 + private final Map < Verb , DroppedMessages > droppedMessagesMap = new EnumMap < > ( Verb . class ) ; 
 
 private final List < ILatencySubscriber > subscribers = new ArrayList < ILatencySubscriber > ( ) ; 
 
 @ @ - 322 , 7 + 336 , 7 @ @ public final class MessagingService implements MessagingServiceMBean 
 
 private static class MSHandle 
 { 
 - public static final MessagingService instance = new MessagingService ( ) ; 
 + public static final MessagingService instance = new MessagingService ( false ) ; 
 } 
 
 public static MessagingService instance ( ) 
 @ @ - 330 , 24 + 344 , 34 @ @ public final class MessagingService implements MessagingServiceMBean 
 return MSHandle . instance ; 
 } 
 
 - private MessagingService ( ) 
 + private static class MSTestHandle 
 + { 
 + public static final MessagingService instance = new MessagingService ( true ) ; 
 + } 
 + 
 + static MessagingService test ( ) 
 + { 
 + return MSTestHandle . instance ; 
 + } 
 + 
 + private MessagingService ( boolean testOnly ) 
 { 
 for ( Verb verb : DROPPABLE _ VERBS ) 
 - { 
 - droppedMessages . put ( verb , new DroppedMessageMetrics ( verb ) ) ; 
 - lastDroppedInternal . put ( verb , 0 ) ; 
 - } 
 + droppedMessagesMap . put ( verb , new DroppedMessages ( verb ) ) ; 
 
 listenGate = new SimpleCondition ( ) ; 
 verbHandlers = new EnumMap < Verb , IVerbHandler > ( Verb . class ) ; 
 - Runnable logDropped = new Runnable ( ) 
 + if ( ! testOnly ) 
 { 
 - public void run ( ) 
 + Runnable logDropped = new Runnable ( ) 
 { 
 - logDroppedMessages ( ) ; 
 - } 
 - } ; 
 - ScheduledExecutors . scheduledTasks . scheduleWithFixedDelay ( logDropped , LOG _ DROPPED _ INTERVAL _ IN _ MS , LOG _ DROPPED _ INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; 
 + public void run ( ) 
 + { 
 + logDroppedMessages ( ) ; 
 + } 
 + } ; 
 + ScheduledExecutors . scheduledTasks . scheduleWithFixedDelay ( logDropped , LOG _ DROPPED _ INTERVAL _ IN _ MS , LOG _ DROPPED _ INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; 
 + } 
 
 Function < Pair < Integer , ExpiringMap . CacheableObject < CallbackInfo > > , ? > timeoutReporter = new Function < Pair < Integer , ExpiringMap . CacheableObject < CallbackInfo > > , Object > ( ) 
 { 
 @ @ - 378 , 16 + 402 , 19 @ @ public final class MessagingService implements MessagingServiceMBean 
 } 
 } ; 
 
 - callbacks = new ExpiringMap < Integer , CallbackInfo > ( DatabaseDescriptor . getMinRpcTimeout ( ) , timeoutReporter ) ; 
 + callbacks = new ExpiringMap < > ( DatabaseDescriptor . getMinRpcTimeout ( ) , timeoutReporter ) ; 
 
 - MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 - try 
 - { 
 - mbs . registerMBean ( this , new ObjectName ( MBEAN _ NAME ) ) ; 
 - } 
 - catch ( Exception e ) 
 + if ( ! testOnly ) 
 { 
 - throw new RuntimeException ( e ) ; 
 + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + try 
 + { 
 + mbs . registerMBean ( this , new ObjectName ( MBEAN _ NAME ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 } 
 
 @ @ - 741 , 7 + 768 , 7 @ @ public final class MessagingService implements MessagingServiceMBean 
 } 
 } 
 
 - public void receive ( MessageIn message , int id , long timestamp ) 
 + public void receive ( MessageIn message , int id , long timestamp , boolean isCrossNodeTimestamp ) 
 { 
 TraceState state = Tracing . instance . initializeFromMessage ( message ) ; 
 if ( state ! = null ) 
 @ @ - 752 , 7 + 779 , 7 @ @ public final class MessagingService implements MessagingServiceMBean 
 if ( ! ms . allowIncomingMessage ( message , id ) ) 
 return ; 
 
 - Runnable runnable = new MessageDeliveryTask ( message , id , timestamp ) ; 
 + Runnable runnable = new MessageDeliveryTask ( message , id , timestamp , isCrossNodeTimestamp ) ; 
 TracingAwareExecutorService stage = StageManager . getStage ( message . getMessageType ( ) ) ; 
 assert stage ! = null : " No stage for message type " + message . verb ; 
 
 @ @ - 842 , 29 + 869 , 55 @ @ public final class MessagingService implements MessagingServiceMBean 
 
 public void incrementDroppedMessages ( Verb verb ) 
 { 
 + incrementDroppedMessages ( verb , false ) ; 
 + } 
 + 
 + public void incrementDroppedMessages ( Verb verb , boolean isCrossNodeTimeout ) 
 + { 
 assert DROPPABLE _ VERBS . contains ( verb ) : " Verb " + verb + " should not legally be dropped " ; 
 - droppedMessages . get ( verb ) . dropped . mark ( ) ; 
 + incrementDroppedMessages ( droppedMessagesMap . get ( verb ) , isCrossNodeTimeout ) ; 
 + } 
 + 
 + private void incrementDroppedMessages ( DroppedMessages droppedMessages , boolean isCrossNodeTimeout ) 
 + { 
 + droppedMessages . metrics . dropped . mark ( ) ; 
 + if ( isCrossNodeTimeout ) 
 + droppedMessages . droppedCrossNodeTimeout . incrementAndGet ( ) ; 
 + else 
 + droppedMessages . droppedInternalTimeout . incrementAndGet ( ) ; 
 } 
 
 private void logDroppedMessages ( ) 
 { 
 - boolean logTpstats = false ; 
 - for ( Map . Entry < Verb , DroppedMessageMetrics > entry : droppedMessages . entrySet ( ) ) 
 + List < String > logs = getDroppedMessagesLogs ( ) ; 
 + for ( String log : logs ) 
 + logger . error ( log ) ; 
 + 
 + if ( logs . size ( ) > 0 ) 
 + StatusLogger . log ( ) ; 
 + } 
 + 
 + @ VisibleForTesting 
 + List < String > getDroppedMessagesLogs ( ) 
 + { 
 + List < String > ret = new ArrayList < > ( ) ; 
 + for ( Map . Entry < Verb , DroppedMessages > entry : droppedMessagesMap . entrySet ( ) ) 
 { 
 - int dropped = ( int ) entry . getValue ( ) . dropped . getCount ( ) ; 
 Verb verb = entry . getKey ( ) ; 
 - int recent = dropped - lastDroppedInternal . get ( verb ) ; 
 - if ( recent > 0 ) 
 + DroppedMessages droppedMessages = entry . getValue ( ) ; 
 + 
 + int droppedInternalTimeout = droppedMessages . droppedInternalTimeout . getAndSet ( 0 ) ; 
 + int droppedCrossNodeTimeout = droppedMessages . droppedCrossNodeTimeout . getAndSet ( 0 ) ; 
 + if ( droppedInternalTimeout > 0 | | droppedCrossNodeTimeout > 0 ) 
 { 
 - logTpstats = true ; 
 - logger . info ( " { } { } messages dropped in last { } ms " , 
 - new Object [ ] { recent , verb , LOG _ DROPPED _ INTERVAL _ IN _ MS } ) ; 
 - lastDroppedInternal . put ( verb , dropped ) ; 
 + ret . add ( String . format ( " % s messages were dropped in last % d ms : % d for internal timeout and % d for cross node timeout " , 
 + verb , 
 + LOG _ DROPPED _ INTERVAL _ IN _ MS , 
 + droppedInternalTimeout , 
 + droppedCrossNodeTimeout ) ) ; 
 } 
 } 
 - 
 - if ( logTpstats ) 
 - StatusLogger . log ( ) ; 
 + return ret ; 
 } 
 
 private static class SocketThread extends Thread 
 @ @ - 1016 , 9 + 1069 , 9 @ @ public final class MessagingService implements MessagingServiceMBean 
 
 public Map < String , Integer > getDroppedMessages ( ) 
 { 
 - Map < String , Integer > map = new HashMap < String , Integer > ( droppedMessages . size ( ) ) ; 
 - for ( Map . Entry < Verb , DroppedMessageMetrics > entry : droppedMessages . entrySet ( ) ) 
 - map . put ( entry . getKey ( ) . toString ( ) , ( int ) entry . getValue ( ) . dropped . getCount ( ) ) ; 
 + Map < String , Integer > map = new HashMap < > ( droppedMessagesMap . size ( ) ) ; 
 + for ( Map . Entry < Verb , DroppedMessages > entry : droppedMessagesMap . entrySet ( ) ) 
 + map . put ( entry . getKey ( ) . toString ( ) , ( int ) entry . getValue ( ) . metrics . dropped . getCount ( ) ) ; 
 return map ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / net / MessagingServiceTest . java b / test / unit / org / apache / cassandra / net / MessagingServiceTest . java 
 new file mode 100644 
 index 0000000 . . 75c146e 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / net / MessagingServiceTest . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + package org . apache . cassandra . net ; 
 + 
 + import java . util . List ; 
 + 
 + import org . junit . Test ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + public class MessagingServiceTest 
 + { 
 + private final MessagingService messagingService = MessagingService . test ( ) ; 
 + 
 + @ Test 
 + public void testDroppedMessages ( ) 
 + { 
 + MessagingService . Verb verb = MessagingService . Verb . READ ; 
 + 
 + for ( int i = 0 ; i < 5000 ; i + + ) 
 + messagingService . incrementDroppedMessages ( verb , i % 2 = = 0 ) ; 
 + 
 + List < String > logs = messagingService . getDroppedMessagesLogs ( ) ; 
 + assertEquals ( 1 , logs . size ( ) ) ; 
 + assertEquals ( " READ messages were dropped in last 5000 ms : 2500 for internal timeout and 2500 for cross node timeout " , logs . get ( 0 ) ) ; 
 + assertEquals ( 5000 , ( int ) messagingService . getDroppedMessages ( ) . get ( verb . toString ( ) ) ) ; 
 + 
 + logs = messagingService . getDroppedMessagesLogs ( ) ; 
 + assertEquals ( 0 , logs . size ( ) ) ; 
 + 
 + for ( int i = 0 ; i < 2500 ; i + + ) 
 + messagingService . incrementDroppedMessages ( verb , i % 2 = = 0 ) ; 
 + 
 + logs = messagingService . getDroppedMessagesLogs ( ) ; 
 + assertEquals ( " READ messages were dropped in last 5000 ms : 1250 for internal timeout and 1250 for cross node timeout " , logs . get ( 0 ) ) ; 
 + assertEquals ( 7500 , ( int ) messagingService . getDroppedMessages ( ) . get ( verb . toString ( ) ) ) ; 
 + } 
 + 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
