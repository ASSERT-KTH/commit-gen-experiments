BLEU SCORE: 0.024367494694068095

TEST MSG: Fix help message for stress counter _ write
GENERATED MSG: Support TimeUUIDType column names in Stress . java tool

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6a44d80 . . 4d9bc07 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 16 , 6 + 16 , 7 @ @ <nl> * Fix potentially repairing with wrong nodes ( CASSANDRA - 6808 ) <nl> * Change caching option syntax ( CASSANDRA - 6745 ) <nl> * Fix stress to do proper counter reads ( CASSANDRA - 6835 ) <nl> + * Fix help message for stress counter _ write ( CASSANDRA - 6824 ) <nl> Merged from 2 . 0 : <nl> * Fix leaking validator FH in StreamWriter ( CASSANDRA - 6832 ) <nl> * fix nodetool getsstables for blob PK ( CASSANDRA - 6803 ) <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressAction . java b / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> index e7cdd0b . . 07ba1d8 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> @ @ - 464 , 7 + 464 , 7 @ @ public class StressAction implements Runnable <nl> } <nl> <nl> <nl> - case COUNTERREAD : <nl> + case COUNTER _ READ : <nl> switch ( state . settings . mode . style ) <nl> { <nl> case THRIFT : <nl> @ @ - 488 , 7 + 488 , 7 @ @ public class StressAction implements Runnable <nl> throw new UnsupportedOperationException ( ) ; <nl> } <nl> <nl> - case COUNTERWRITE : <nl> + case COUNTER _ WRITE : <nl> switch ( state . settings . mode . style ) <nl> { <nl> case THRIFT : <nl> @ @ - 500 , 7 + 500 , 7 @ @ public class StressAction implements Runnable <nl> throw new UnsupportedOperationException ( ) ; <nl> } <nl> <nl> - case RANGESLICE : <nl> + case RANGE _ SLICE : <nl> switch ( state . settings . mode . style ) <nl> { <nl> case THRIFT : <nl> @ @ - 512 , 7 + 512 , 7 @ @ public class StressAction implements Runnable <nl> throw new UnsupportedOperationException ( ) ; <nl> } <nl> <nl> - case IRANGESLICE : <nl> + case INDEXED _ RANGE _ SLICE : <nl> switch ( state . settings . mode . style ) <nl> { <nl> case THRIFT : <nl> @ @ - 524 , 7 + 524 , 7 @ @ public class StressAction implements Runnable <nl> throw new UnsupportedOperationException ( ) ; <nl> } <nl> <nl> - case READMULTI : <nl> + case READ _ MULTI : <nl> switch ( state . settings . mode . style ) <nl> { <nl> case THRIFT : <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / Command . java b / tools / stress / src / org / apache / cassandra / stress / settings / Command . java <nl> index d0350ad . . ac10014 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / Command . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / Command . java <nl> @ @ - 21 , 8 + 21 , 9 @ @ package org . apache . cassandra . stress . settings ; <nl> * / <nl> <nl> <nl> - import java . util . HashMap ; <nl> - import java . util . Map ; <nl> + import java . util . * ; <nl> + <nl> + import com . google . common . collect . ImmutableList ; <nl> <nl> public enum Command <nl> { <nl> @ @ - 40 , 25 + 41 , 25 @ @ public enum Command <nl> " Interleaving of any basic commands , with configurable ratio and distribution - the cluster must first be populated by a write test " , <nl> CommandCategory . MIXED <nl> ) , <nl> - RANGESLICE ( false , " Standard1 " , " Super1 " , <nl> + RANGE _ SLICE ( false , " Standard1 " , " Super1 " , <nl> " Range slice queries - the cluster must first be populated by a write test " , <nl> CommandCategory . MULTI <nl> ) , <nl> - IRANGESLICE ( false , " Standard1 " , " Super1 " , <nl> + INDEXED _ RANGE _ SLICE ( false , " Standard1 " , " Super1 " , <nl> " Range slice queries through a secondary index . The cluster must first be populated by a write test , with indexing enabled . " , <nl> CommandCategory . BASIC <nl> ) , <nl> - READMULTI ( false , " Standard1 " , " Super1 " , <nl> + READ _ MULTI ( false , " Standard1 " , " Super1 " , <nl> " multi _ read " , <nl> " Multiple concurrent reads fetching multiple rows at once . The cluster must first be populated by a write test . " , <nl> CommandCategory . MULTI <nl> ) , <nl> - COUNTERWRITE ( true , " Counter1 " , " SuperCounter1 " , <nl> + COUNTER _ WRITE ( true , " Counter1 " , " SuperCounter1 " , <nl> " counter _ add " , <nl> " Multiple concurrent updates of counters . " , <nl> CommandCategory . BASIC <nl> ) , <nl> - COUNTERREAD ( false , " Counter1 " , " SuperCounter1 " , <nl> + COUNTER _ READ ( false , " Counter1 " , " SuperCounter1 " , <nl> " counter _ get " , <nl> " Multiple concurrent reads of counters . The cluster must first be populated by a counterwrite test . " , <nl> CommandCategory . BASIC <nl> @ @ - 76 , 9 + 77 , 8 @ @ public enum Command <nl> final Map < String , Command > lookup = new HashMap < > ( ) ; <nl> for ( Command cmd : values ( ) ) <nl> { <nl> - lookup . put ( cmd . toString ( ) . toLowerCase ( ) , cmd ) ; <nl> - if ( cmd . extraName ! = null ) <nl> - lookup . put ( cmd . extraName , cmd ) ; <nl> + for ( String name : cmd . names ) <nl> + lookup . put ( name , cmd ) ; <nl> } <nl> LOOKUP = lookup ; <nl> } <nl> @ @ - 90 , 7 + 90 , 7 @ @ public enum Command <nl> <nl> public final boolean updates ; <nl> public final CommandCategory category ; <nl> - public final String extraName ; <nl> + public final List < String > names ; <nl> public final String description ; <nl> public final String table ; <nl> public final String supertable ; <nl> @ @ - 106 , 7 + 106 , 15 @ @ public enum Command <nl> this . supertable = supertable ; <nl> this . updates = updates ; <nl> this . category = category ; <nl> - this . extraName = extra ; <nl> + List < String > names = new ArrayList < > ( ) ; <nl> + names . add ( this . toString ( ) . toLowerCase ( ) ) ; <nl> + names . add ( this . toString ( ) . replaceAll ( " _ " , " " ) . toLowerCase ( ) ) ; <nl> + if ( extra ! = null ) <nl> + { <nl> + names . add ( extra . toLowerCase ( ) ) ; <nl> + names . add ( extra . replaceAll ( " _ " , " " ) . toLowerCase ( ) ) ; <nl> + } <nl> + this . names = ImmutableList . copyOf ( names ) ; <nl> this . description = description ; <nl> } <nl> <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommand . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommand . java <nl> index 71b30e4 . . b491707 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommand . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommand . java <nl> @ @ - 117 , 9 + 117 , 13 @ @ public class SettingsCommand implements Serializable <nl> { <nl> if ( cmd . category = = null ) <nl> continue ; <nl> - final String [ ] params = clArgs . remove ( cmd . toString ( ) . toLowerCase ( ) ) ; <nl> - if ( params ! = null ) <nl> + <nl> + for ( String name : cmd . names ) <nl> { <nl> + final String [ ] params = clArgs . remove ( name ) ; <nl> + if ( params = = null ) <nl> + continue ; <nl> + <nl> switch ( cmd . category ) <nl> { <nl> case BASIC : <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsKey . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsKey . java <nl> index 9818d363 . . ab489be 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsKey . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsKey . java <nl> @ @ - 114 , 7 + 114 , 7 @ @ public class SettingsKey implements Serializable <nl> switch ( command . type ) <nl> { <nl> case WRITE : <nl> - case COUNTERWRITE : <nl> + case COUNTER _ WRITE : <nl> return new SettingsKey ( new PopulateOptions ( defaultLimit ) ) ; <nl> default : <nl> return new SettingsKey ( new DistributionOptions ( defaultLimit ) ) ; <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsMisc . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsMisc . java <nl> index e47f85f . . 8a5975f 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsMisc . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsMisc . java <nl> @ @ - 117 , 7 + 117 , 8 @ @ public class SettingsMisc implements Serializable <nl> <nl> public static void printHelp ( ) <nl> { <nl> - System . out . println ( " Usage : . / bin / cassandra - stress < command > [ options ] " ) ; <nl> + System . out . println ( " Usage : cassandra - stress < command > [ options ] " ) ; <nl> + System . out . println ( " Help usage : cassandra - stress help < command > " ) ; <nl> System . out . println ( ) ; <nl> System . out . println ( " - - - Commands - - - " ) ; <nl> for ( Command cmd : Command . values ( ) ) <nl> @ @ - 160 , 7 + 161 , 7 @ @ public class SettingsMisc implements Serializable <nl> System . out . println ( " Usage : . / bin / cassandra - stress help < command | option > " ) ; <nl> System . out . println ( " Commands : " ) ; <nl> for ( Command cmd : Command . values ( ) ) <nl> - System . out . println ( " " + cmd . toString ( ) . toLowerCase ( ) + ( cmd . extraName ! = null ? " , " + cmd . extraName : " " ) ) ; <nl> + System . out . println ( " " + cmd . names . toString ( ) . replaceAll ( " \ \ [ | \ \ ] " , " " ) ) ; <nl> System . out . println ( " Options : " ) ; <nl> for ( CliOption op : CliOption . values ( ) ) <nl> System . out . println ( " - " + op . toString ( ) . toLowerCase ( ) + ( op . extraName ! = null ? " , " + op . extraName : " " ) ) ; <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsRate . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsRate . java <nl> index ad7e234 . . a91f073 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsRate . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsRate . java <nl> @ @ - 92 , 7 + 92 , 7 @ @ public class SettingsRate implements Serializable <nl> switch ( command . type ) <nl> { <nl> case WRITE : <nl> - case COUNTERWRITE : <nl> + case COUNTER _ WRITE : <nl> if ( command . count > 0 ) <nl> { <nl> ThreadOptions options = new ThreadOptions ( ) ; <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / StressSettings . java b / tools / stress / src / org / apache / cassandra / stress / settings / StressSettings . java <nl> index 95ec75b . . a1d68b4 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / StressSettings . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / StressSettings . java <nl> @ @ - 165 , 7 + 165 , 7 @ @ public class StressSettings implements Serializable <nl> <nl> public void maybeCreateKeyspaces ( ) <nl> { <nl> - if ( command . type = = Command . WRITE | | command . type = = Command . COUNTERWRITE ) <nl> + if ( command . type = = Command . WRITE | | command . type = = Command . COUNTER _ WRITE ) <nl> schema . createKeySpaces ( this ) ; <nl> <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7c5a752 . . d0e485b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 3 , 6 + 3 , 8 @ @ <nl> * filter out unavailable cipher suites when using encryption ( CASSANDRA - 3178 ) <nl> * ( HADOOP ) add old - style api support for CFIF and CFRR ( CASSANDRA - 2799 ) <nl> * Support TimeUUIDType column names in Stress . java tool ( CASSANDRA - 3541 ) <nl> + * ( CQL ) INSERT / UPDATE / DELETE / TRUNCATE commands should allow CF names to <nl> + be qualified by keyspace ( CASSANDRA - 3419 ) <nl> <nl> <nl> 1 . 0 . 5 <nl> diff - - git a / src / java / org / apache / cassandra / cql / AbstractModification . java b / src / java / org / apache / cassandra / cql / AbstractModification . java <nl> index d5503c1 . . 3af10cc 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / AbstractModification . java <nl> + + + b / src / java / org / apache / cassandra / cql / AbstractModification . java <nl> @ @ - 31 , 19 + 31 , 21 @ @ public abstract class AbstractModification <nl> { <nl> public static final ConsistencyLevel defaultConsistency = ConsistencyLevel . ONE ; <nl> <nl> + protected final String keyspace ; <nl> protected final String columnFamily ; <nl> protected final ConsistencyLevel cLevel ; <nl> protected final Long timestamp ; <nl> protected final int timeToLive ; <nl> protected final String keyName ; <nl> <nl> - public AbstractModification ( String columnFamily , String keyAlias , Attributes attrs ) <nl> + public AbstractModification ( String keyspace , String columnFamily , String keyAlias , Attributes attrs ) <nl> { <nl> - this ( columnFamily , keyAlias , attrs . getConsistencyLevel ( ) , attrs . getTimestamp ( ) , attrs . getTimeToLive ( ) ) ; <nl> + this ( keyspace , columnFamily , keyAlias , attrs . getConsistencyLevel ( ) , attrs . getTimestamp ( ) , attrs . getTimeToLive ( ) ) ; <nl> } <nl> <nl> - public AbstractModification ( String columnFamily , String keyAlias , ConsistencyLevel cLevel , Long timestamp , int timeToLive ) <nl> + public AbstractModification ( String keyspace , String columnFamily , String keyAlias , ConsistencyLevel cLevel , Long timestamp , int timeToLive ) <nl> { <nl> + this . keyspace = keyspace ; <nl> this . columnFamily = columnFamily ; <nl> this . cLevel = cLevel ; <nl> this . timestamp = timestamp ; <nl> @ @ - 51 , 6 + 53 , 11 @ @ public abstract class AbstractModification <nl> this . keyName = keyAlias . toUpperCase ( ) ; <nl> } <nl> <nl> + public String getKeyspace ( ) <nl> + { <nl> + return keyspace ; <nl> + } <nl> + <nl> public String getColumnFamily ( ) <nl> { <nl> return columnFamily ; <nl> diff - - git a / src / java / org / apache / cassandra / cql / Cql . g b / src / java / org / apache / cassandra / cql / Cql . g <nl> index 4e83392 . . 6971381 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / Cql . g <nl> + + + b / src / java / org / apache / cassandra / cql / Cql . g <nl> @ @ - 33 , 6 + 33 , 7 @ @ options { <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . ArrayList ; <nl> + import org . apache . cassandra . utils . Pair ; <nl> import org . apache . cassandra . thrift . ConsistencyLevel ; <nl> import org . apache . cassandra . thrift . InvalidRequestException ; <nl> <nl> @ @ - 115 , 7 + 116 , 7 @ @ query returns [ CQLStatement stmnt ] <nl> | updateStatement endStmnt { $ stmnt = new CQLStatement ( StatementType . UPDATE , $ updateStatement . expr ) ; } <nl> | batchStatement { $ stmnt = new CQLStatement ( StatementType . BATCH , $ batchStatement . expr ) ; } <nl> | useStatement { $ stmnt = new CQLStatement ( StatementType . USE , $ useStatement . keyspace ) ; } <nl> - | truncateStatement { $ stmnt = new CQLStatement ( StatementType . TRUNCATE , $ truncateStatement . cfam ) ; } <nl> + | truncateStatement { $ stmnt = new CQLStatement ( StatementType . TRUNCATE , $ truncateStatement . cf ) ; } <nl> | deleteStatement endStmnt { $ stmnt = new CQLStatement ( StatementType . DELETE , $ deleteStatement . expr ) ; } <nl> | createKeyspaceStatement { $ stmnt = new CQLStatement ( StatementType . CREATE _ KEYSPACE , $ createKeyspaceStatement . expr ) ; } <nl> | createColumnFamilyStatement { $ stmnt = new CQLStatement ( StatementType . CREATE _ COLUMNFAMILY , $ createColumnFamilyStatement . expr ) ; } <nl> @ @ - 219 , 13 + 220 , 13 @ @ insertStatement returns [ UpdateStatement expr ] <nl> List < Term > columnNames = new ArrayList < Term > ( ) ; <nl> List < Term > columnValues = new ArrayList < Term > ( ) ; <nl> } <nl> - K _ INSERT K _ INTO columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> + K _ INSERT K _ INTO ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> ' ( ' key _ alias = term ( ' , ' column _ name = term { columnNames . add ( $ column _ name . item ) ; } ) + ' ) ' <nl> K _ VALUES <nl> ' ( ' key = term ( ' , ' column _ value = term { columnValues . add ( $ column _ value . item ) ; } ) + ' ) ' <nl> ( usingClause [ attrs ] ) ? <nl> { <nl> - return new UpdateStatement ( $ columnFamily . text , key _ alias . getText ( ) , columnNames , columnValues , Collections . singletonList ( key ) , attrs ) ; <nl> + return new UpdateStatement ( $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , columnNames , columnValues , Collections . singletonList ( key ) , attrs ) ; <nl> } <nl> ; <nl> <nl> @ @ - 311 , 14 + 312 , 14 @ @ updateStatement returns [ UpdateStatement expr ] <nl> Map < Term , Operation > columns = new HashMap < Term , Operation > ( ) ; <nl> List < Term > keyList = null ; <nl> } <nl> - K _ UPDATE columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> + K _ UPDATE ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> ( usingClause [ attrs ] ) ? <nl> K _ SET termPairWithOperation [ columns ] ( ' , ' termPairWithOperation [ columns ] ) * <nl> K _ WHERE ( key _ alias = term ( ' = ' key = term { keyList = Collections . singletonList ( key ) ; } <nl> | <nl> K _ IN ' ( ' keys = termList { keyList = $ keys . items ; } ' ) ' ) ) <nl> { <nl> - return new UpdateStatement ( $ columnFamily . text , key _ alias . getText ( ) , columns , keyList , attrs ) ; <nl> + return new UpdateStatement ( $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , columns , keyList , attrs ) ; <nl> } <nl> ; <nl> <nl> @ @ - 340 , 13 + 341 , 13 @ @ deleteStatement returns [ DeleteStatement expr ] <nl> } <nl> K _ DELETE <nl> ( cols = termList { columnsList = $ cols . items ; } ) ? <nl> - K _ FROM columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> + K _ FROM ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> ( usingClauseDelete [ attrs ] ) ? <nl> ( K _ WHERE key _ alias = term ( ' = ' key = term { keyList = Collections . singletonList ( key ) ; } <nl> | K _ IN ' ( ' keys = termList { keyList = $ keys . items ; } ' ) ' ) <nl> ) ? <nl> { <nl> - return new DeleteStatement ( columnsList , $ columnFamily . text , key _ alias . getText ( ) , keyList , attrs ) ; <nl> + return new DeleteStatement ( columnsList , $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , keyList , attrs ) ; <nl> } <nl> ; <nl> <nl> @ @ - 481 , 8 + 482 , 8 @ @ relation returns [ Relation rel ] <nl> ; <nl> <nl> / / TRUNCATE < CF > ; <nl> - truncateStatement returns [ String cfam ] <nl> - : K _ TRUNCATE columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) { $ cfam = $ columnFamily . text ; } endStmnt <nl> + truncateStatement returns [ Pair < String , String > cf ] <nl> + : K _ TRUNCATE ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) { $ cf = new Pair < String , String > ( $ keyspace . text , $ columnFamily . text ) ; } endStmnt <nl> ; <nl> <nl> endStmnt <nl> diff - - git a / src / java / org / apache / cassandra / cql / DeleteStatement . java b / src / java / org / apache / cassandra / cql / DeleteStatement . java <nl> index 630a242 . . eb46076 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / DeleteStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql / DeleteStatement . java <nl> @ @ - 46 , 9 + 46 , 9 @ @ public class DeleteStatement extends AbstractModification <nl> private List < Term > columns ; <nl> private List < Term > keys ; <nl> <nl> - public DeleteStatement ( List < Term > columns , String columnFamily , String keyName , List < Term > keys , Attributes attrs ) <nl> + public DeleteStatement ( List < Term > columns , String keyspace , String columnFamily , String keyName , List < Term > keys , Attributes attrs ) <nl> { <nl> - super ( columnFamily , keyName , attrs ) ; <nl> + super ( keyspace , columnFamily , keyName , attrs ) ; <nl> <nl> this . columns = columns ; <nl> this . keys = keys ; <nl> @ @ - 118 , 8 + 118 , 9 @ @ public class DeleteStatement extends AbstractModification <nl> <nl> public String toString ( ) <nl> { <nl> - return String . format ( " DeleteStatement ( columns = % s , columnFamily = % s , consistency = % s keys = % s ) " , <nl> + return String . format ( " DeleteStatement ( columns = % s , keyspace = % s , columnFamily = % s , consistency = % s keys = % s ) " , <nl> columns , <nl> + keyspace , <nl> columnFamily , <nl> cLevel , <nl> keys ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql / QueryProcessor . java b / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> index a221e24 . . abc999a 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> @ @ - 53 , 6 + 53 , 7 @ @ import org . apache . cassandra . thrift . * ; <nl> import org . apache . cassandra . thrift . Column ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . apache . cassandra . utils . Pair ; <nl> <nl> import com . google . common . base . Predicates ; <nl> import com . google . common . collect . Maps ; <nl> @ @ - 265 , 16 + 266 , 18 @ @ public class QueryProcessor <nl> private static void batchUpdate ( ClientState clientState , List < UpdateStatement > updateStatements , ConsistencyLevel consistency ) <nl> throws InvalidRequestException , UnavailableException , TimedOutException <nl> { <nl> - String keyspace = clientState . getKeyspace ( ) ; <nl> + String globalKeyspace = clientState . getKeyspace ( ) ; <nl> List < IMutation > rowMutations = new ArrayList < IMutation > ( ) ; <nl> List < String > cfamsSeen = new ArrayList < String > ( ) ; <nl> <nl> for ( UpdateStatement update : updateStatements ) <nl> { <nl> + String keyspace = update . keyspace = = null ? globalKeyspace : update . keyspace ; <nl> + <nl> / / Avoid unnecessary authorizations . <nl> if ( ! ( cfamsSeen . contains ( update . getColumnFamily ( ) ) ) ) <nl> { <nl> - clientState . hasColumnFamilyAccess ( update . getColumnFamily ( ) , Permission . WRITE ) ; <nl> + clientState . hasColumnFamilyAccess ( keyspace , update . getColumnFamily ( ) , Permission . WRITE ) ; <nl> cfamsSeen . add ( update . getColumnFamily ( ) ) ; <nl> } <nl> <nl> @ @ - 705 , 13 + 708 , 15 @ @ public class QueryProcessor <nl> return result ; <nl> <nl> case TRUNCATE : <nl> - String columnFamily = ( String ) statement . statement ; <nl> - validateColumnFamily ( keyspace , columnFamily ) ; <nl> - clientState . hasColumnFamilyAccess ( columnFamily , Permission . WRITE ) ; <nl> + Pair < String , String > columnFamily = ( Pair < String , String > ) statement . statement ; <nl> + keyspace = columnFamily . left = = null ? clientState . getKeyspace ( ) : columnFamily . left ; <nl> + <nl> + validateColumnFamily ( keyspace , columnFamily . right ) ; <nl> + clientState . hasColumnFamilyAccess ( keyspace , columnFamily . right , Permission . WRITE ) ; <nl> <nl> try <nl> { <nl> - StorageProxy . truncateBlocking ( keyspace , columnFamily ) ; <nl> + StorageProxy . truncateBlocking ( keyspace , columnFamily . right ) ; <nl> } <nl> catch ( TimeoutException e ) <nl> { <nl> @ @ - 727 , 6 + 732 , 9 @ @ public class QueryProcessor <nl> <nl> case DELETE : <nl> DeleteStatement delete = ( DeleteStatement ) statement . statement ; <nl> + <nl> + keyspace = delete . keyspace = = null ? clientState . getKeyspace ( ) : delete . keyspace ; <nl> + <nl> try <nl> { <nl> StorageProxy . mutate ( delete . prepareRowMutations ( keyspace , clientState ) , delete . getConsistencyLevel ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql / UpdateStatement . java b / src / java / org / apache / cassandra / cql / UpdateStatement . java <nl> index 7783198 . . 128b261 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / UpdateStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql / UpdateStatement . java <nl> @ @ - 37 , 7 + 37 , 6 @ @ import org . apache . cassandra . thrift . InvalidRequestException ; <nl> <nl> import static org . apache . cassandra . cql . QueryProcessor . validateColumn ; <nl> <nl> - import static org . apache . cassandra . cql . Operation . OperationType ; <nl> import static org . apache . cassandra . thrift . ThriftValidation . validateColumnFamily ; <nl> import static org . apache . cassandra . thrift . ThriftValidation . validateCommutativeForWrite ; <nl> <nl> @ @ - 54 , 20 + 53 , 22 @ @ public class UpdateStatement extends AbstractModification <nl> / * * <nl> * Creates a new UpdateStatement from a column family name , columns map , consistency <nl> * level , and key term . <nl> - * <nl> + * <nl> + * @ param keyspace Keyspace ( optional ) <nl> * @ param columnFamily column family name <nl> * @ param keyName alias key name <nl> * @ param columns a map of column name / values pairs <nl> * @ param keys the keys to update <nl> * @ param attrs additional attributes for statement ( CL , timestamp , timeToLive ) <nl> * / <nl> - public UpdateStatement ( String columnFamily , <nl> + public UpdateStatement ( String keyspace , <nl> + String columnFamily , <nl> String keyName , <nl> Map < Term , Operation > columns , <nl> List < Term > keys , <nl> Attributes attrs ) <nl> { <nl> - super ( columnFamily , keyName , attrs ) ; <nl> + super ( keyspace , columnFamily , keyName , attrs ) ; <nl> <nl> this . columns = columns ; <nl> this . keys = keys ; <nl> @ @ - 77 , 7 + 78 , 8 @ @ public class UpdateStatement extends AbstractModification <nl> * Creates a new UpdateStatement from a column family name , a consistency level , <nl> * key , and lists of column names and values . It is intended for use with the <nl> * alternate update format , < code > INSERT < / code > . <nl> - * <nl> + * <nl> + * @ param keyspace Keyspace ( optional ) <nl> * @ param columnFamily column family name <nl> * @ param keyName alias key name <nl> * @ param columnNames list of column names <nl> @ @ - 85 , 14 + 87 , 15 @ @ public class UpdateStatement extends AbstractModification <nl> * @ param keys the keys to update <nl> * @ param attrs additional attributes for statement ( CL , timestamp , timeToLive ) <nl> * / <nl> - public UpdateStatement ( String columnFamily , <nl> + public UpdateStatement ( String keyspace , <nl> + String columnFamily , <nl> String keyName , <nl> List < Term > columnNames , <nl> List < Term > columnValues , <nl> List < Term > keys , <nl> Attributes attrs ) <nl> { <nl> - super ( columnFamily , keyName , attrs ) ; <nl> + super ( keyspace , columnFamily , keyName , attrs ) ; <nl> <nl> this . columnNames = columnNames ; <nl> this . columnValues = columnValues ; <nl> @ @ - 266 , 7 + 269 , 8 @ @ public class UpdateStatement extends AbstractModification <nl> <nl> public String toString ( ) <nl> { <nl> - return String . format ( " UpdateStatement ( columnFamily = % s , keys = % s , columns = % s , consistency = % s , timestamp = % s , timeToLive = % s ) " , <nl> + return String . format ( " UpdateStatement ( keyspace = % s , columnFamily = % s , keys = % s , columns = % s , consistency = % s , timestamp = % s , timeToLive = % s ) " , <nl> + keyspace , <nl> columnFamily , <nl> keys , <nl> columns ,

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6a44d80 . . 4d9bc07 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 16 , 6 + 16 , 7 @ @ 
 * Fix potentially repairing with wrong nodes ( CASSANDRA - 6808 ) 
 * Change caching option syntax ( CASSANDRA - 6745 ) 
 * Fix stress to do proper counter reads ( CASSANDRA - 6835 ) 
 + * Fix help message for stress counter _ write ( CASSANDRA - 6824 ) 
 Merged from 2 . 0 : 
 * Fix leaking validator FH in StreamWriter ( CASSANDRA - 6832 ) 
 * fix nodetool getsstables for blob PK ( CASSANDRA - 6803 ) 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressAction . java b / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 index e7cdd0b . . 07ba1d8 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 @ @ - 464 , 7 + 464 , 7 @ @ public class StressAction implements Runnable 
 } 
 
 
 - case COUNTERREAD : 
 + case COUNTER _ READ : 
 switch ( state . settings . mode . style ) 
 { 
 case THRIFT : 
 @ @ - 488 , 7 + 488 , 7 @ @ public class StressAction implements Runnable 
 throw new UnsupportedOperationException ( ) ; 
 } 
 
 - case COUNTERWRITE : 
 + case COUNTER _ WRITE : 
 switch ( state . settings . mode . style ) 
 { 
 case THRIFT : 
 @ @ - 500 , 7 + 500 , 7 @ @ public class StressAction implements Runnable 
 throw new UnsupportedOperationException ( ) ; 
 } 
 
 - case RANGESLICE : 
 + case RANGE _ SLICE : 
 switch ( state . settings . mode . style ) 
 { 
 case THRIFT : 
 @ @ - 512 , 7 + 512 , 7 @ @ public class StressAction implements Runnable 
 throw new UnsupportedOperationException ( ) ; 
 } 
 
 - case IRANGESLICE : 
 + case INDEXED _ RANGE _ SLICE : 
 switch ( state . settings . mode . style ) 
 { 
 case THRIFT : 
 @ @ - 524 , 7 + 524 , 7 @ @ public class StressAction implements Runnable 
 throw new UnsupportedOperationException ( ) ; 
 } 
 
 - case READMULTI : 
 + case READ _ MULTI : 
 switch ( state . settings . mode . style ) 
 { 
 case THRIFT : 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / Command . java b / tools / stress / src / org / apache / cassandra / stress / settings / Command . java 
 index d0350ad . . ac10014 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / Command . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / Command . java 
 @ @ - 21 , 8 + 21 , 9 @ @ package org . apache . cassandra . stress . settings ; 
 * / 
 
 
 - import java . util . HashMap ; 
 - import java . util . Map ; 
 + import java . util . * ; 
 + 
 + import com . google . common . collect . ImmutableList ; 
 
 public enum Command 
 { 
 @ @ - 40 , 25 + 41 , 25 @ @ public enum Command 
 " Interleaving of any basic commands , with configurable ratio and distribution - the cluster must first be populated by a write test " , 
 CommandCategory . MIXED 
 ) , 
 - RANGESLICE ( false , " Standard1 " , " Super1 " , 
 + RANGE _ SLICE ( false , " Standard1 " , " Super1 " , 
 " Range slice queries - the cluster must first be populated by a write test " , 
 CommandCategory . MULTI 
 ) , 
 - IRANGESLICE ( false , " Standard1 " , " Super1 " , 
 + INDEXED _ RANGE _ SLICE ( false , " Standard1 " , " Super1 " , 
 " Range slice queries through a secondary index . The cluster must first be populated by a write test , with indexing enabled . " , 
 CommandCategory . BASIC 
 ) , 
 - READMULTI ( false , " Standard1 " , " Super1 " , 
 + READ _ MULTI ( false , " Standard1 " , " Super1 " , 
 " multi _ read " , 
 " Multiple concurrent reads fetching multiple rows at once . The cluster must first be populated by a write test . " , 
 CommandCategory . MULTI 
 ) , 
 - COUNTERWRITE ( true , " Counter1 " , " SuperCounter1 " , 
 + COUNTER _ WRITE ( true , " Counter1 " , " SuperCounter1 " , 
 " counter _ add " , 
 " Multiple concurrent updates of counters . " , 
 CommandCategory . BASIC 
 ) , 
 - COUNTERREAD ( false , " Counter1 " , " SuperCounter1 " , 
 + COUNTER _ READ ( false , " Counter1 " , " SuperCounter1 " , 
 " counter _ get " , 
 " Multiple concurrent reads of counters . The cluster must first be populated by a counterwrite test . " , 
 CommandCategory . BASIC 
 @ @ - 76 , 9 + 77 , 8 @ @ public enum Command 
 final Map < String , Command > lookup = new HashMap < > ( ) ; 
 for ( Command cmd : values ( ) ) 
 { 
 - lookup . put ( cmd . toString ( ) . toLowerCase ( ) , cmd ) ; 
 - if ( cmd . extraName ! = null ) 
 - lookup . put ( cmd . extraName , cmd ) ; 
 + for ( String name : cmd . names ) 
 + lookup . put ( name , cmd ) ; 
 } 
 LOOKUP = lookup ; 
 } 
 @ @ - 90 , 7 + 90 , 7 @ @ public enum Command 
 
 public final boolean updates ; 
 public final CommandCategory category ; 
 - public final String extraName ; 
 + public final List < String > names ; 
 public final String description ; 
 public final String table ; 
 public final String supertable ; 
 @ @ - 106 , 7 + 106 , 15 @ @ public enum Command 
 this . supertable = supertable ; 
 this . updates = updates ; 
 this . category = category ; 
 - this . extraName = extra ; 
 + List < String > names = new ArrayList < > ( ) ; 
 + names . add ( this . toString ( ) . toLowerCase ( ) ) ; 
 + names . add ( this . toString ( ) . replaceAll ( " _ " , " " ) . toLowerCase ( ) ) ; 
 + if ( extra ! = null ) 
 + { 
 + names . add ( extra . toLowerCase ( ) ) ; 
 + names . add ( extra . replaceAll ( " _ " , " " ) . toLowerCase ( ) ) ; 
 + } 
 + this . names = ImmutableList . copyOf ( names ) ; 
 this . description = description ; 
 } 
 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommand . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommand . java 
 index 71b30e4 . . b491707 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommand . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsCommand . java 
 @ @ - 117 , 9 + 117 , 13 @ @ public class SettingsCommand implements Serializable 
 { 
 if ( cmd . category = = null ) 
 continue ; 
 - final String [ ] params = clArgs . remove ( cmd . toString ( ) . toLowerCase ( ) ) ; 
 - if ( params ! = null ) 
 + 
 + for ( String name : cmd . names ) 
 { 
 + final String [ ] params = clArgs . remove ( name ) ; 
 + if ( params = = null ) 
 + continue ; 
 + 
 switch ( cmd . category ) 
 { 
 case BASIC : 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsKey . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsKey . java 
 index 9818d363 . . ab489be 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsKey . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsKey . java 
 @ @ - 114 , 7 + 114 , 7 @ @ public class SettingsKey implements Serializable 
 switch ( command . type ) 
 { 
 case WRITE : 
 - case COUNTERWRITE : 
 + case COUNTER _ WRITE : 
 return new SettingsKey ( new PopulateOptions ( defaultLimit ) ) ; 
 default : 
 return new SettingsKey ( new DistributionOptions ( defaultLimit ) ) ; 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsMisc . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsMisc . java 
 index e47f85f . . 8a5975f 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsMisc . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsMisc . java 
 @ @ - 117 , 7 + 117 , 8 @ @ public class SettingsMisc implements Serializable 
 
 public static void printHelp ( ) 
 { 
 - System . out . println ( " Usage : . / bin / cassandra - stress < command > [ options ] " ) ; 
 + System . out . println ( " Usage : cassandra - stress < command > [ options ] " ) ; 
 + System . out . println ( " Help usage : cassandra - stress help < command > " ) ; 
 System . out . println ( ) ; 
 System . out . println ( " - - - Commands - - - " ) ; 
 for ( Command cmd : Command . values ( ) ) 
 @ @ - 160 , 7 + 161 , 7 @ @ public class SettingsMisc implements Serializable 
 System . out . println ( " Usage : . / bin / cassandra - stress help < command | option > " ) ; 
 System . out . println ( " Commands : " ) ; 
 for ( Command cmd : Command . values ( ) ) 
 - System . out . println ( " " + cmd . toString ( ) . toLowerCase ( ) + ( cmd . extraName ! = null ? " , " + cmd . extraName : " " ) ) ; 
 + System . out . println ( " " + cmd . names . toString ( ) . replaceAll ( " \ \ [ | \ \ ] " , " " ) ) ; 
 System . out . println ( " Options : " ) ; 
 for ( CliOption op : CliOption . values ( ) ) 
 System . out . println ( " - " + op . toString ( ) . toLowerCase ( ) + ( op . extraName ! = null ? " , " + op . extraName : " " ) ) ; 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsRate . java b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsRate . java 
 index ad7e234 . . a91f073 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / SettingsRate . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / SettingsRate . java 
 @ @ - 92 , 7 + 92 , 7 @ @ public class SettingsRate implements Serializable 
 switch ( command . type ) 
 { 
 case WRITE : 
 - case COUNTERWRITE : 
 + case COUNTER _ WRITE : 
 if ( command . count > 0 ) 
 { 
 ThreadOptions options = new ThreadOptions ( ) ; 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / StressSettings . java b / tools / stress / src / org / apache / cassandra / stress / settings / StressSettings . java 
 index 95ec75b . . a1d68b4 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / StressSettings . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / StressSettings . java 
 @ @ - 165 , 7 + 165 , 7 @ @ public class StressSettings implements Serializable 
 
 public void maybeCreateKeyspaces ( ) 
 { 
 - if ( command . type = = Command . WRITE | | command . type = = Command . COUNTERWRITE ) 
 + if ( command . type = = Command . WRITE | | command . type = = Command . COUNTER _ WRITE ) 
 schema . createKeySpaces ( this ) ; 
 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7c5a752 . . d0e485b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 3 , 6 + 3 , 8 @ @ 
 * filter out unavailable cipher suites when using encryption ( CASSANDRA - 3178 ) 
 * ( HADOOP ) add old - style api support for CFIF and CFRR ( CASSANDRA - 2799 ) 
 * Support TimeUUIDType column names in Stress . java tool ( CASSANDRA - 3541 ) 
 + * ( CQL ) INSERT / UPDATE / DELETE / TRUNCATE commands should allow CF names to 
 + be qualified by keyspace ( CASSANDRA - 3419 ) 
 
 
 1 . 0 . 5 
 diff - - git a / src / java / org / apache / cassandra / cql / AbstractModification . java b / src / java / org / apache / cassandra / cql / AbstractModification . java 
 index d5503c1 . . 3af10cc 100644 
 - - - a / src / java / org / apache / cassandra / cql / AbstractModification . java 
 + + + b / src / java / org / apache / cassandra / cql / AbstractModification . java 
 @ @ - 31 , 19 + 31 , 21 @ @ public abstract class AbstractModification 
 { 
 public static final ConsistencyLevel defaultConsistency = ConsistencyLevel . ONE ; 
 
 + protected final String keyspace ; 
 protected final String columnFamily ; 
 protected final ConsistencyLevel cLevel ; 
 protected final Long timestamp ; 
 protected final int timeToLive ; 
 protected final String keyName ; 
 
 - public AbstractModification ( String columnFamily , String keyAlias , Attributes attrs ) 
 + public AbstractModification ( String keyspace , String columnFamily , String keyAlias , Attributes attrs ) 
 { 
 - this ( columnFamily , keyAlias , attrs . getConsistencyLevel ( ) , attrs . getTimestamp ( ) , attrs . getTimeToLive ( ) ) ; 
 + this ( keyspace , columnFamily , keyAlias , attrs . getConsistencyLevel ( ) , attrs . getTimestamp ( ) , attrs . getTimeToLive ( ) ) ; 
 } 
 
 - public AbstractModification ( String columnFamily , String keyAlias , ConsistencyLevel cLevel , Long timestamp , int timeToLive ) 
 + public AbstractModification ( String keyspace , String columnFamily , String keyAlias , ConsistencyLevel cLevel , Long timestamp , int timeToLive ) 
 { 
 + this . keyspace = keyspace ; 
 this . columnFamily = columnFamily ; 
 this . cLevel = cLevel ; 
 this . timestamp = timestamp ; 
 @ @ - 51 , 6 + 53 , 11 @ @ public abstract class AbstractModification 
 this . keyName = keyAlias . toUpperCase ( ) ; 
 } 
 
 + public String getKeyspace ( ) 
 + { 
 + return keyspace ; 
 + } 
 + 
 public String getColumnFamily ( ) 
 { 
 return columnFamily ; 
 diff - - git a / src / java / org / apache / cassandra / cql / Cql . g b / src / java / org / apache / cassandra / cql / Cql . g 
 index 4e83392 . . 6971381 100644 
 - - - a / src / java / org / apache / cassandra / cql / Cql . g 
 + + + b / src / java / org / apache / cassandra / cql / Cql . g 
 @ @ - 33 , 6 + 33 , 7 @ @ options { 
 import java . util . Collections ; 
 import java . util . List ; 
 import java . util . ArrayList ; 
 + import org . apache . cassandra . utils . Pair ; 
 import org . apache . cassandra . thrift . ConsistencyLevel ; 
 import org . apache . cassandra . thrift . InvalidRequestException ; 
 
 @ @ - 115 , 7 + 116 , 7 @ @ query returns [ CQLStatement stmnt ] 
 | updateStatement endStmnt { $ stmnt = new CQLStatement ( StatementType . UPDATE , $ updateStatement . expr ) ; } 
 | batchStatement { $ stmnt = new CQLStatement ( StatementType . BATCH , $ batchStatement . expr ) ; } 
 | useStatement { $ stmnt = new CQLStatement ( StatementType . USE , $ useStatement . keyspace ) ; } 
 - | truncateStatement { $ stmnt = new CQLStatement ( StatementType . TRUNCATE , $ truncateStatement . cfam ) ; } 
 + | truncateStatement { $ stmnt = new CQLStatement ( StatementType . TRUNCATE , $ truncateStatement . cf ) ; } 
 | deleteStatement endStmnt { $ stmnt = new CQLStatement ( StatementType . DELETE , $ deleteStatement . expr ) ; } 
 | createKeyspaceStatement { $ stmnt = new CQLStatement ( StatementType . CREATE _ KEYSPACE , $ createKeyspaceStatement . expr ) ; } 
 | createColumnFamilyStatement { $ stmnt = new CQLStatement ( StatementType . CREATE _ COLUMNFAMILY , $ createColumnFamilyStatement . expr ) ; } 
 @ @ - 219 , 13 + 220 , 13 @ @ insertStatement returns [ UpdateStatement expr ] 
 List < Term > columnNames = new ArrayList < Term > ( ) ; 
 List < Term > columnValues = new ArrayList < Term > ( ) ; 
 } 
 - K _ INSERT K _ INTO columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 + K _ INSERT K _ INTO ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 ' ( ' key _ alias = term ( ' , ' column _ name = term { columnNames . add ( $ column _ name . item ) ; } ) + ' ) ' 
 K _ VALUES 
 ' ( ' key = term ( ' , ' column _ value = term { columnValues . add ( $ column _ value . item ) ; } ) + ' ) ' 
 ( usingClause [ attrs ] ) ? 
 { 
 - return new UpdateStatement ( $ columnFamily . text , key _ alias . getText ( ) , columnNames , columnValues , Collections . singletonList ( key ) , attrs ) ; 
 + return new UpdateStatement ( $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , columnNames , columnValues , Collections . singletonList ( key ) , attrs ) ; 
 } 
 ; 
 
 @ @ - 311 , 14 + 312 , 14 @ @ updateStatement returns [ UpdateStatement expr ] 
 Map < Term , Operation > columns = new HashMap < Term , Operation > ( ) ; 
 List < Term > keyList = null ; 
 } 
 - K _ UPDATE columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 + K _ UPDATE ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 ( usingClause [ attrs ] ) ? 
 K _ SET termPairWithOperation [ columns ] ( ' , ' termPairWithOperation [ columns ] ) * 
 K _ WHERE ( key _ alias = term ( ' = ' key = term { keyList = Collections . singletonList ( key ) ; } 
 | 
 K _ IN ' ( ' keys = termList { keyList = $ keys . items ; } ' ) ' ) ) 
 { 
 - return new UpdateStatement ( $ columnFamily . text , key _ alias . getText ( ) , columns , keyList , attrs ) ; 
 + return new UpdateStatement ( $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , columns , keyList , attrs ) ; 
 } 
 ; 
 
 @ @ - 340 , 13 + 341 , 13 @ @ deleteStatement returns [ DeleteStatement expr ] 
 } 
 K _ DELETE 
 ( cols = termList { columnsList = $ cols . items ; } ) ? 
 - K _ FROM columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 + K _ FROM ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 ( usingClauseDelete [ attrs ] ) ? 
 ( K _ WHERE key _ alias = term ( ' = ' key = term { keyList = Collections . singletonList ( key ) ; } 
 | K _ IN ' ( ' keys = termList { keyList = $ keys . items ; } ' ) ' ) 
 ) ? 
 { 
 - return new DeleteStatement ( columnsList , $ columnFamily . text , key _ alias . getText ( ) , keyList , attrs ) ; 
 + return new DeleteStatement ( columnsList , $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , keyList , attrs ) ; 
 } 
 ; 
 
 @ @ - 481 , 8 + 482 , 8 @ @ relation returns [ Relation rel ] 
 ; 
 
 / / TRUNCATE < CF > ; 
 - truncateStatement returns [ String cfam ] 
 - : K _ TRUNCATE columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) { $ cfam = $ columnFamily . text ; } endStmnt 
 + truncateStatement returns [ Pair < String , String > cf ] 
 + : K _ TRUNCATE ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) { $ cf = new Pair < String , String > ( $ keyspace . text , $ columnFamily . text ) ; } endStmnt 
 ; 
 
 endStmnt 
 diff - - git a / src / java / org / apache / cassandra / cql / DeleteStatement . java b / src / java / org / apache / cassandra / cql / DeleteStatement . java 
 index 630a242 . . eb46076 100644 
 - - - a / src / java / org / apache / cassandra / cql / DeleteStatement . java 
 + + + b / src / java / org / apache / cassandra / cql / DeleteStatement . java 
 @ @ - 46 , 9 + 46 , 9 @ @ public class DeleteStatement extends AbstractModification 
 private List < Term > columns ; 
 private List < Term > keys ; 
 
 - public DeleteStatement ( List < Term > columns , String columnFamily , String keyName , List < Term > keys , Attributes attrs ) 
 + public DeleteStatement ( List < Term > columns , String keyspace , String columnFamily , String keyName , List < Term > keys , Attributes attrs ) 
 { 
 - super ( columnFamily , keyName , attrs ) ; 
 + super ( keyspace , columnFamily , keyName , attrs ) ; 
 
 this . columns = columns ; 
 this . keys = keys ; 
 @ @ - 118 , 8 + 118 , 9 @ @ public class DeleteStatement extends AbstractModification 
 
 public String toString ( ) 
 { 
 - return String . format ( " DeleteStatement ( columns = % s , columnFamily = % s , consistency = % s keys = % s ) " , 
 + return String . format ( " DeleteStatement ( columns = % s , keyspace = % s , columnFamily = % s , consistency = % s keys = % s ) " , 
 columns , 
 + keyspace , 
 columnFamily , 
 cLevel , 
 keys ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql / QueryProcessor . java b / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 index a221e24 . . abc999a 100644 
 - - - a / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 @ @ - 53 , 6 + 53 , 7 @ @ import org . apache . cassandra . thrift . * ; 
 import org . apache . cassandra . thrift . Column ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 + import org . apache . cassandra . utils . Pair ; 
 
 import com . google . common . base . Predicates ; 
 import com . google . common . collect . Maps ; 
 @ @ - 265 , 16 + 266 , 18 @ @ public class QueryProcessor 
 private static void batchUpdate ( ClientState clientState , List < UpdateStatement > updateStatements , ConsistencyLevel consistency ) 
 throws InvalidRequestException , UnavailableException , TimedOutException 
 { 
 - String keyspace = clientState . getKeyspace ( ) ; 
 + String globalKeyspace = clientState . getKeyspace ( ) ; 
 List < IMutation > rowMutations = new ArrayList < IMutation > ( ) ; 
 List < String > cfamsSeen = new ArrayList < String > ( ) ; 
 
 for ( UpdateStatement update : updateStatements ) 
 { 
 + String keyspace = update . keyspace = = null ? globalKeyspace : update . keyspace ; 
 + 
 / / Avoid unnecessary authorizations . 
 if ( ! ( cfamsSeen . contains ( update . getColumnFamily ( ) ) ) ) 
 { 
 - clientState . hasColumnFamilyAccess ( update . getColumnFamily ( ) , Permission . WRITE ) ; 
 + clientState . hasColumnFamilyAccess ( keyspace , update . getColumnFamily ( ) , Permission . WRITE ) ; 
 cfamsSeen . add ( update . getColumnFamily ( ) ) ; 
 } 
 
 @ @ - 705 , 13 + 708 , 15 @ @ public class QueryProcessor 
 return result ; 
 
 case TRUNCATE : 
 - String columnFamily = ( String ) statement . statement ; 
 - validateColumnFamily ( keyspace , columnFamily ) ; 
 - clientState . hasColumnFamilyAccess ( columnFamily , Permission . WRITE ) ; 
 + Pair < String , String > columnFamily = ( Pair < String , String > ) statement . statement ; 
 + keyspace = columnFamily . left = = null ? clientState . getKeyspace ( ) : columnFamily . left ; 
 + 
 + validateColumnFamily ( keyspace , columnFamily . right ) ; 
 + clientState . hasColumnFamilyAccess ( keyspace , columnFamily . right , Permission . WRITE ) ; 
 
 try 
 { 
 - StorageProxy . truncateBlocking ( keyspace , columnFamily ) ; 
 + StorageProxy . truncateBlocking ( keyspace , columnFamily . right ) ; 
 } 
 catch ( TimeoutException e ) 
 { 
 @ @ - 727 , 6 + 732 , 9 @ @ public class QueryProcessor 
 
 case DELETE : 
 DeleteStatement delete = ( DeleteStatement ) statement . statement ; 
 + 
 + keyspace = delete . keyspace = = null ? clientState . getKeyspace ( ) : delete . keyspace ; 
 + 
 try 
 { 
 StorageProxy . mutate ( delete . prepareRowMutations ( keyspace , clientState ) , delete . getConsistencyLevel ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql / UpdateStatement . java b / src / java / org / apache / cassandra / cql / UpdateStatement . java 
 index 7783198 . . 128b261 100644 
 - - - a / src / java / org / apache / cassandra / cql / UpdateStatement . java 
 + + + b / src / java / org / apache / cassandra / cql / UpdateStatement . java 
 @ @ - 37 , 7 + 37 , 6 @ @ import org . apache . cassandra . thrift . InvalidRequestException ; 
 
 import static org . apache . cassandra . cql . QueryProcessor . validateColumn ; 
 
 - import static org . apache . cassandra . cql . Operation . OperationType ; 
 import static org . apache . cassandra . thrift . ThriftValidation . validateColumnFamily ; 
 import static org . apache . cassandra . thrift . ThriftValidation . validateCommutativeForWrite ; 
 
 @ @ - 54 , 20 + 53 , 22 @ @ public class UpdateStatement extends AbstractModification 
 / * * 
 * Creates a new UpdateStatement from a column family name , columns map , consistency 
 * level , and key term . 
 - * 
 + * 
 + * @ param keyspace Keyspace ( optional ) 
 * @ param columnFamily column family name 
 * @ param keyName alias key name 
 * @ param columns a map of column name / values pairs 
 * @ param keys the keys to update 
 * @ param attrs additional attributes for statement ( CL , timestamp , timeToLive ) 
 * / 
 - public UpdateStatement ( String columnFamily , 
 + public UpdateStatement ( String keyspace , 
 + String columnFamily , 
 String keyName , 
 Map < Term , Operation > columns , 
 List < Term > keys , 
 Attributes attrs ) 
 { 
 - super ( columnFamily , keyName , attrs ) ; 
 + super ( keyspace , columnFamily , keyName , attrs ) ; 
 
 this . columns = columns ; 
 this . keys = keys ; 
 @ @ - 77 , 7 + 78 , 8 @ @ public class UpdateStatement extends AbstractModification 
 * Creates a new UpdateStatement from a column family name , a consistency level , 
 * key , and lists of column names and values . It is intended for use with the 
 * alternate update format , < code > INSERT < / code > . 
 - * 
 + * 
 + * @ param keyspace Keyspace ( optional ) 
 * @ param columnFamily column family name 
 * @ param keyName alias key name 
 * @ param columnNames list of column names 
 @ @ - 85 , 14 + 87 , 15 @ @ public class UpdateStatement extends AbstractModification 
 * @ param keys the keys to update 
 * @ param attrs additional attributes for statement ( CL , timestamp , timeToLive ) 
 * / 
 - public UpdateStatement ( String columnFamily , 
 + public UpdateStatement ( String keyspace , 
 + String columnFamily , 
 String keyName , 
 List < Term > columnNames , 
 List < Term > columnValues , 
 List < Term > keys , 
 Attributes attrs ) 
 { 
 - super ( columnFamily , keyName , attrs ) ; 
 + super ( keyspace , columnFamily , keyName , attrs ) ; 
 
 this . columnNames = columnNames ; 
 this . columnValues = columnValues ; 
 @ @ - 266 , 7 + 269 , 8 @ @ public class UpdateStatement extends AbstractModification 
 
 public String toString ( ) 
 { 
 - return String . format ( " UpdateStatement ( columnFamily = % s , keys = % s , columns = % s , consistency = % s , timestamp = % s , timeToLive = % s ) " , 
 + return String . format ( " UpdateStatement ( keyspace = % s , columnFamily = % s , keys = % s , columns = % s , consistency = % s , timestamp = % s , timeToLive = % s ) " , 
 + keyspace , 
 columnFamily , 
 keys , 
 columns ,
