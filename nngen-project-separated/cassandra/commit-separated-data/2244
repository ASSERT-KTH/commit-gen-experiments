BLEU SCORE: 0.05795599612995367

TEST MSG: Add cassandra . auto _ bootstrap system property
GENERATED MSG: fix DatabaseDescriptor . hasExistingNoSystemTables to skip system table correctly

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 49cb6a1 . . fdff490 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 10 <nl> + * Add cassandra . auto _ bootstrap system property ( CASSANDRA - 7650 ) <nl> * Remove CqlPagingRecordReader / CqlPagingInputFormat ( CASSANDRA - 7570 ) <nl> * Fix IncompatibleClassChangeError from hadoop2 ( CASSANDRA - 7229 ) <nl> * Add ' nodetool sethintedhandoffthrottlekb ' ( CASSANDRA - 7635 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 1ca7975 . . 7987193 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 1138 , 7 + 1138 , 7 @ @ public class DatabaseDescriptor <nl> <nl> public static boolean isAutoBootstrap ( ) <nl> { <nl> - return conf . auto _ bootstrap ; <nl> + return Boolean . parseBoolean ( System . getProperty ( " cassandra . auto _ bootstrap " , conf . auto _ bootstrap . toString ( ) ) ) ; <nl> } <nl> <nl> public static void setHintedHandoffEnabled ( boolean hintedHandoffEnabled )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index 7d78196 . . 16a9e47 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 119 , 7 + 119 , 36 @ @ public class CassandraDaemon <nl> * / <nl> protected void setup ( ) <nl> { <nl> - logger . info ( " JVM vendor / version : { } / { } " , System . getProperty ( " java . vm . name " ) , System . getProperty ( " java . version " ) ) ; <nl> + String javaVersion = System . getProperty ( " java . version " ) ; <nl> + String javaVmName = System . getProperty ( " java . vm . name " ) ; <nl> + logger . info ( " JVM vendor / version : { } / { } " , javaVmName , javaVersion ) ; <nl> + if ( javaVmName . contains ( " OpenJDK " ) ) <nl> + { <nl> + / / There is essentially no QA done on OpenJDK builds , and <nl> + / / clusters running OpenJDK have seen many heap and load issues . <nl> + logger . warn ( " OpenJDK is not recommended . Please upgrade to the newest Oracle Java release " ) ; <nl> + } <nl> + else if ( ! javaVmName . contains ( " HotSpot " ) ) <nl> + { <nl> + logger . warn ( " Non - Oracle JVM detected . Some features , such as immediate unmap of compacted SSTables , may not work as intended " ) ; <nl> + } <nl> + else <nl> + { <nl> + String [ ] java _ version = javaVersion . split ( " _ " ) ; <nl> + String java _ major = java _ version [ 0 ] ; <nl> + int java _ minor = ( java _ version . length > 1 ) ? Integer . parseInt ( java _ version [ 1 ] ) : 0 ; <nl> + if ( java _ major . equals ( " 1 . 6 . 0 " ) ) <nl> + { <nl> + / / These need to be updated from time to time , but these are currently valid ( 12 . 18 . 2012 ) <nl> + if ( java _ minor < 29 ) <nl> + / / Seen to be a major contributing factor for heap and load issues <nl> + logger . error ( " Your JVM is out of date . Please upgrade to the newest Oracle Java 6 . " ) ; <nl> + else if ( java _ minor < 32 ) <nl> + / / Updates 32 + have been seen to work well enough in the wild <nl> + logger . warn ( " Your JVM is out of date . Please upgrade to the newest Oracle Java 6 . " ) ; <nl> + } <nl> + } <nl> + <nl> logger . info ( " Heap size : { } / { } " , Runtime . getRuntime ( ) . totalMemory ( ) , Runtime . getRuntime ( ) . maxMemory ( ) ) ; <nl> logger . info ( " Classpath : { } " , System . getProperty ( " java . class . path " ) ) ; <nl> CLibrary . tryMlockall ( ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 49cb6a1 . . fdff490 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 10 
 + * Add cassandra . auto _ bootstrap system property ( CASSANDRA - 7650 ) 
 * Remove CqlPagingRecordReader / CqlPagingInputFormat ( CASSANDRA - 7570 ) 
 * Fix IncompatibleClassChangeError from hadoop2 ( CASSANDRA - 7229 ) 
 * Add ' nodetool sethintedhandoffthrottlekb ' ( CASSANDRA - 7635 ) 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 1ca7975 . . 7987193 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 1138 , 7 + 1138 , 7 @ @ public class DatabaseDescriptor 
 
 public static boolean isAutoBootstrap ( ) 
 { 
 - return conf . auto _ bootstrap ; 
 + return Boolean . parseBoolean ( System . getProperty ( " cassandra . auto _ bootstrap " , conf . auto _ bootstrap . toString ( ) ) ) ; 
 } 
 
 public static void setHintedHandoffEnabled ( boolean hintedHandoffEnabled )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index 7d78196 . . 16a9e47 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 119 , 7 + 119 , 36 @ @ public class CassandraDaemon 
 * / 
 protected void setup ( ) 
 { 
 - logger . info ( " JVM vendor / version : { } / { } " , System . getProperty ( " java . vm . name " ) , System . getProperty ( " java . version " ) ) ; 
 + String javaVersion = System . getProperty ( " java . version " ) ; 
 + String javaVmName = System . getProperty ( " java . vm . name " ) ; 
 + logger . info ( " JVM vendor / version : { } / { } " , javaVmName , javaVersion ) ; 
 + if ( javaVmName . contains ( " OpenJDK " ) ) 
 + { 
 + / / There is essentially no QA done on OpenJDK builds , and 
 + / / clusters running OpenJDK have seen many heap and load issues . 
 + logger . warn ( " OpenJDK is not recommended . Please upgrade to the newest Oracle Java release " ) ; 
 + } 
 + else if ( ! javaVmName . contains ( " HotSpot " ) ) 
 + { 
 + logger . warn ( " Non - Oracle JVM detected . Some features , such as immediate unmap of compacted SSTables , may not work as intended " ) ; 
 + } 
 + else 
 + { 
 + String [ ] java _ version = javaVersion . split ( " _ " ) ; 
 + String java _ major = java _ version [ 0 ] ; 
 + int java _ minor = ( java _ version . length > 1 ) ? Integer . parseInt ( java _ version [ 1 ] ) : 0 ; 
 + if ( java _ major . equals ( " 1 . 6 . 0 " ) ) 
 + { 
 + / / These need to be updated from time to time , but these are currently valid ( 12 . 18 . 2012 ) 
 + if ( java _ minor < 29 ) 
 + / / Seen to be a major contributing factor for heap and load issues 
 + logger . error ( " Your JVM is out of date . Please upgrade to the newest Oracle Java 6 . " ) ; 
 + else if ( java _ minor < 32 ) 
 + / / Updates 32 + have been seen to work well enough in the wild 
 + logger . warn ( " Your JVM is out of date . Please upgrade to the newest Oracle Java 6 . " ) ; 
 + } 
 + } 
 + 
 logger . info ( " Heap size : { } / { } " , Runtime . getRuntime ( ) . totalMemory ( ) , Runtime . getRuntime ( ) . maxMemory ( ) ) ; 
 logger . info ( " Classpath : { } " , System . getProperty ( " java . class . path " ) ) ; 
 CLibrary . tryMlockall ( ) ;
