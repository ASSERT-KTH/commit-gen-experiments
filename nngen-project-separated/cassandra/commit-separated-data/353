BLEU SCORE: 0.16233395773754944

TEST MSG: Allow noop incremental repair state transitions
GENERATED MSG: Start compaction when incremental repair finishes

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6444994 . . 6840bdd 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Allow noop incremental repair state transitions ( CASSANDRA - 13658 ) <nl> * Run repair with down replicas ( CASSANDRA - 10446 ) <nl> * Added started & completed repair metrics ( CASSANDRA - 13598 ) <nl> * Added started & completed repair metrics ( CASSANDRA - 13598 ) <nl> diff - - git a / src / java / org / apache / cassandra / repair / consistent / ConsistentSession . java b / src / java / org / apache / cassandra / repair / consistent / ConsistentSession . java <nl> index 9b1fec9 . . af0a0dd 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / consistent / ConsistentSession . java <nl> + + + b / src / java / org / apache / cassandra / repair / consistent / ConsistentSession . java <nl> @ @ - 170 , 12 + 170 , 14 @ @ public abstract class ConsistentSession <nl> put ( REPAIRING , ImmutableSet . of ( FINALIZE _ PROMISED , FAILED ) ) ; <nl> put ( FINALIZE _ PROMISED , ImmutableSet . of ( FINALIZED , FAILED ) ) ; <nl> put ( FINALIZED , ImmutableSet . of ( ) ) ; <nl> - put ( FAILED , ImmutableSet . of ( FAILED ) ) ; <nl> + put ( FAILED , ImmutableSet . of ( ) ) ; <nl> } } ; <nl> <nl> public boolean canTransitionTo ( State state ) <nl> { <nl> - return transitions . get ( this ) . contains ( state ) ; <nl> + / / redundant transitions are allowed because the failure recovery mechanism can <nl> + / / send redundant status changes out , and they shouldn ' t throw exceptions <nl> + return state = = this | | transitions . get ( this ) . contains ( state ) ; <nl> } <nl> <nl> public static State valueOf ( int ordinal ) <nl> diff - - git a / test / unit / org / apache / cassandra / repair / consistent / LocalSessionTest . java b / test / unit / org / apache / cassandra / repair / consistent / LocalSessionTest . java <nl> index a5197ec . . 3b48051 100644 <nl> - - - a / test / unit / org / apache / cassandra / repair / consistent / LocalSessionTest . java <nl> + + + b / test / unit / org / apache / cassandra / repair / consistent / LocalSessionTest . java <nl> @ @ - 580 , 6 + 580 , 19 @ @ public class LocalSessionTest extends AbstractRepairTest <nl> } <nl> <nl> @ Test <nl> + public void handleStatusResponseFinalizedRedundant ( ) throws Exception <nl> + { <nl> + UUID sessionID = registerSession ( ) ; <nl> + InstrumentedLocalSessions sessions = new InstrumentedLocalSessions ( ) ; <nl> + sessions . start ( ) ; <nl> + LocalSession session = sessions . prepareForTest ( sessionID ) ; <nl> + session . setState ( FINALIZED ) ; <nl> + <nl> + sessions . handleStatusResponse ( PARTICIPANT1 , new StatusResponse ( sessionID , FINALIZED ) ) ; <nl> + Assert . assertEquals ( FINALIZED , session . getState ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void handleStatusResponseFailed ( ) throws Exception <nl> { <nl> UUID sessionID = registerSession ( ) ; <nl> @ @ - 593 , 6 + 606 , 19 @ @ public class LocalSessionTest extends AbstractRepairTest <nl> } <nl> <nl> @ Test <nl> + public void handleStatusResponseFailedRedundant ( ) throws Exception <nl> + { <nl> + UUID sessionID = registerSession ( ) ; <nl> + InstrumentedLocalSessions sessions = new InstrumentedLocalSessions ( ) ; <nl> + sessions . start ( ) ; <nl> + LocalSession session = sessions . prepareForTest ( sessionID ) ; <nl> + session . setState ( FAILED ) ; <nl> + <nl> + sessions . handleStatusResponse ( PARTICIPANT1 , new StatusResponse ( sessionID , FAILED ) ) ; <nl> + Assert . assertEquals ( FAILED , session . getState ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void handleStatusResponseNoop ( ) throws Exception <nl> { <nl> UUID sessionID = registerSession ( ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6444994 . . 6840bdd 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Allow noop incremental repair state transitions ( CASSANDRA - 13658 ) 
 * Run repair with down replicas ( CASSANDRA - 10446 ) 
 * Added started & completed repair metrics ( CASSANDRA - 13598 ) 
 * Added started & completed repair metrics ( CASSANDRA - 13598 ) 
 diff - - git a / src / java / org / apache / cassandra / repair / consistent / ConsistentSession . java b / src / java / org / apache / cassandra / repair / consistent / ConsistentSession . java 
 index 9b1fec9 . . af0a0dd 100644 
 - - - a / src / java / org / apache / cassandra / repair / consistent / ConsistentSession . java 
 + + + b / src / java / org / apache / cassandra / repair / consistent / ConsistentSession . java 
 @ @ - 170 , 12 + 170 , 14 @ @ public abstract class ConsistentSession 
 put ( REPAIRING , ImmutableSet . of ( FINALIZE _ PROMISED , FAILED ) ) ; 
 put ( FINALIZE _ PROMISED , ImmutableSet . of ( FINALIZED , FAILED ) ) ; 
 put ( FINALIZED , ImmutableSet . of ( ) ) ; 
 - put ( FAILED , ImmutableSet . of ( FAILED ) ) ; 
 + put ( FAILED , ImmutableSet . of ( ) ) ; 
 } } ; 
 
 public boolean canTransitionTo ( State state ) 
 { 
 - return transitions . get ( this ) . contains ( state ) ; 
 + / / redundant transitions are allowed because the failure recovery mechanism can 
 + / / send redundant status changes out , and they shouldn ' t throw exceptions 
 + return state = = this | | transitions . get ( this ) . contains ( state ) ; 
 } 
 
 public static State valueOf ( int ordinal ) 
 diff - - git a / test / unit / org / apache / cassandra / repair / consistent / LocalSessionTest . java b / test / unit / org / apache / cassandra / repair / consistent / LocalSessionTest . java 
 index a5197ec . . 3b48051 100644 
 - - - a / test / unit / org / apache / cassandra / repair / consistent / LocalSessionTest . java 
 + + + b / test / unit / org / apache / cassandra / repair / consistent / LocalSessionTest . java 
 @ @ - 580 , 6 + 580 , 19 @ @ public class LocalSessionTest extends AbstractRepairTest 
 } 
 
 @ Test 
 + public void handleStatusResponseFinalizedRedundant ( ) throws Exception 
 + { 
 + UUID sessionID = registerSession ( ) ; 
 + InstrumentedLocalSessions sessions = new InstrumentedLocalSessions ( ) ; 
 + sessions . start ( ) ; 
 + LocalSession session = sessions . prepareForTest ( sessionID ) ; 
 + session . setState ( FINALIZED ) ; 
 + 
 + sessions . handleStatusResponse ( PARTICIPANT1 , new StatusResponse ( sessionID , FINALIZED ) ) ; 
 + Assert . assertEquals ( FINALIZED , session . getState ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void handleStatusResponseFailed ( ) throws Exception 
 { 
 UUID sessionID = registerSession ( ) ; 
 @ @ - 593 , 6 + 606 , 19 @ @ public class LocalSessionTest extends AbstractRepairTest 
 } 
 
 @ Test 
 + public void handleStatusResponseFailedRedundant ( ) throws Exception 
 + { 
 + UUID sessionID = registerSession ( ) ; 
 + InstrumentedLocalSessions sessions = new InstrumentedLocalSessions ( ) ; 
 + sessions . start ( ) ; 
 + LocalSession session = sessions . prepareForTest ( sessionID ) ; 
 + session . setState ( FAILED ) ; 
 + 
 + sessions . handleStatusResponse ( PARTICIPANT1 , new StatusResponse ( sessionID , FAILED ) ) ; 
 + Assert . assertEquals ( FAILED , session . getState ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void handleStatusResponseNoop ( ) throws Exception 
 { 
 UUID sessionID = registerSession ( ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
