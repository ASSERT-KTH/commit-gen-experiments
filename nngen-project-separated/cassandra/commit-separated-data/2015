BLEU SCORE: 0.013139808552042212

TEST MSG: Don ' t compile Thrift sources in Eclipse , use classes for an ant build
GENERATED MSG: r / m drivers / from generate - eclipse - files target

TEST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 9562a37 . . 29e4121 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 1499 , 14 + 1499 , 13 @ @ <nl> < classpathentry kind = " src " path = " src / java " / > <nl> < classpathentry kind = " src " path = " src / resources " / > <nl> < classpathentry kind = " src " path = " src / gen - java " / > <nl> - < classpathentry kind = " src " path = " interface / thrift / gen - java " / > <nl> < classpathentry kind = " src " path = " test / unit " / > <nl> < classpathentry kind = " src " path = " test / long " / > <nl> < classpathentry kind = " src " path = " test / pig " / > <nl> < classpathentry kind = " src " path = " tools / stress / src " / > <nl> < classpathentry kind = " con " path = " org . eclipse . jdt . launching . JRE _ CONTAINER " / > <nl> < classpathentry kind = " output " path = " build / classes / main " / > <nl> - < classpathentry kind = " lib " path = " build / classes / thrift " / > <nl> + < classpathentry kind = " lib " path = " build / classes / thrift " sourcepath = " interface / thrift / gen - java / " / > <nl> < classpathentry kind = " lib " path = " build / test / classes " / > <nl> < classpathentry kind = " lib " path = " test / conf " / > <nl> ] ] >
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6c45d09 . . 1abbffa 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 48 , 6 + 48 , 7 @ @ <nl> * fix removing columns and subcolumns that are supressed by a row or <nl> supercolumn tombstone during replica resolution ( CASSANDRA - 2590 ) <nl> * support sstable2json against snapshot sstables ( CASSANDRA - 2386 ) <nl> + * remove active - pull schema requests ( CASSANDRA - 2715 ) <nl> <nl> <nl> 0 . 8 . 0 - final <nl> diff - - git a / src / java / org / apache / cassandra / db / DataTracker . java b / src / java / org / apache / cassandra / db / DataTracker . java <nl> index 4096f57 . . f833621 100644 <nl> - - - a / src / java / org / apache / cassandra / db / DataTracker . java <nl> + + + b / src / java / org / apache / cassandra / db / DataTracker . java <nl> @ @ - 37 , 7 + 37 , 7 @ @ import org . apache . cassandra . io . sstable . Descriptor ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> - public class DataTracker <nl> + public class DataTracker <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( DataTracker . class ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java b / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java <nl> index 2ec3ecc . . e69de29 100644 <nl> - - - a / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java <nl> + + + b / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java <nl> @ @ - 1 , 36 + 0 , 0 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * < p / > <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * < p / > <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . db ; <nl> - <nl> - import java . util . UUID ; <nl> - <nl> - import org . apache . cassandra . net . IVerbHandler ; <nl> - import org . apache . cassandra . net . Message ; <nl> - import org . apache . cassandra . service . MigrationManager ; <nl> - <nl> - public class DefinitionsAnnounceVerbHandler implements IVerbHandler <nl> - { <nl> - <nl> - / * * someone is announcing their schema version . * / <nl> - public void doVerb ( Message message , String id ) <nl> - { <nl> - UUID theirVersion = UUID . fromString ( new String ( message . getMessageBody ( ) ) ) ; <nl> - MigrationManager . rectify ( theirVersion , message . getFrom ( ) ) ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java b / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java <nl> deleted file mode 100644 <nl> index 5df5e85 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java <nl> + + + / dev / null <nl> @ @ - 1 , 93 + 0 , 0 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * < p / > <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * < p / > <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . db ; <nl> - <nl> - import java . io . IOError ; <nl> - import java . io . IOException ; <nl> - import java . util . Collection ; <nl> - import java . util . UUID ; <nl> - <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - <nl> - import org . apache . cassandra . concurrent . Stage ; <nl> - import org . apache . cassandra . concurrent . StageManager ; <nl> - import org . apache . cassandra . config . ConfigurationException ; <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . db . migration . Migration ; <nl> - import org . apache . cassandra . net . IVerbHandler ; <nl> - import org . apache . cassandra . net . Message ; <nl> - import org . apache . cassandra . service . MigrationManager ; <nl> - import org . apache . cassandra . utils . UUIDGen ; <nl> - import org . apache . cassandra . utils . WrappedRunnable ; <nl> - <nl> - public class DefinitionsUpdateResponseVerbHandler implements IVerbHandler <nl> - { <nl> - private static final Logger logger = LoggerFactory . getLogger ( DefinitionsUpdateResponseVerbHandler . class ) ; <nl> - <nl> - / * * someone sent me their data definitions * / <nl> - public void doVerb ( final Message message , String id ) <nl> - { <nl> - try <nl> - { <nl> - / / these are the serialized row mutations that I must apply . <nl> - / / check versions at every step along the way to make sure migrations are not applied out of order . <nl> - Collection < Column > cols = MigrationManager . makeColumns ( message ) ; <nl> - for ( Column col : cols ) <nl> - { <nl> - final UUID version = UUIDGen . getUUID ( col . name ( ) ) ; <nl> - if ( version . timestamp ( ) > DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) ) <nl> - { <nl> - final Migration m = Migration . deserialize ( col . value ( ) , message . getVersion ( ) ) ; <nl> - assert m . getVersion ( ) . equals ( version ) ; <nl> - StageManager . getStage ( Stage . MIGRATION ) . submit ( new WrappedRunnable ( ) <nl> - { <nl> - protected void runMayThrow ( ) throws Exception <nl> - { <nl> - / / check to make sure the current version is before this one . <nl> - if ( DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) = = version . timestamp ( ) ) <nl> - logger . debug ( " Not appling ( equal ) " + version . toString ( ) ) ; <nl> - else if ( DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) > version . timestamp ( ) ) <nl> - logger . debug ( " Not applying ( before ) " + version . toString ( ) ) ; <nl> - else <nl> - { <nl> - logger . debug ( " Applying { } from { } " , m . getClass ( ) . getSimpleName ( ) , message . getFrom ( ) ) ; <nl> - try <nl> - { <nl> - m . apply ( ) ; <nl> - / / update gossip , but don ' t contact nodes directly <nl> - m . passiveAnnounce ( ) ; <nl> - } <nl> - catch ( ConfigurationException ex ) <nl> - { <nl> - / / Trying to apply the same migration twice . This happens as a result of gossip . <nl> - logger . debug ( " Migration not applied " + ex . getMessage ( ) ) ; <nl> - } <nl> - } <nl> - } <nl> - } ) ; <nl> - } <nl> - } <nl> - } <nl> - catch ( IOException ex ) <nl> - { <nl> - throw new IOError ( ex ) ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / db / DefinitionsUpdateVerbHandler . java b / src / java / org / apache / cassandra / db / DefinitionsUpdateVerbHandler . java <nl> new file mode 100644 <nl> index 0000000 . . ddc4513 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / DefinitionsUpdateVerbHandler . java <nl> @ @ - 0 , 0 + 1 , 93 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * < p / > <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * < p / > <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . db ; <nl> + <nl> + import java . io . IOError ; <nl> + import java . io . IOException ; <nl> + import java . util . Collection ; <nl> + import java . util . UUID ; <nl> + <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import org . apache . cassandra . concurrent . Stage ; <nl> + import org . apache . cassandra . concurrent . StageManager ; <nl> + import org . apache . cassandra . config . ConfigurationException ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . db . migration . Migration ; <nl> + import org . apache . cassandra . net . IVerbHandler ; <nl> + import org . apache . cassandra . net . Message ; <nl> + import org . apache . cassandra . service . MigrationManager ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> + import org . apache . cassandra . utils . WrappedRunnable ; <nl> + <nl> + public class DefinitionsUpdateVerbHandler implements IVerbHandler <nl> + { <nl> + private static final Logger logger = LoggerFactory . getLogger ( DefinitionsUpdateVerbHandler . class ) ; <nl> + <nl> + / * * someone sent me their data definitions * / <nl> + public void doVerb ( final Message message , String id ) <nl> + { <nl> + try <nl> + { <nl> + / / these are the serialized row mutations that I must apply . <nl> + / / check versions at every step along the way to make sure migrations are not applied out of order . <nl> + Collection < Column > cols = MigrationManager . makeColumns ( message ) ; <nl> + for ( Column col : cols ) <nl> + { <nl> + final UUID version = UUIDGen . getUUID ( col . name ( ) ) ; <nl> + if ( version . timestamp ( ) > DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) ) <nl> + { <nl> + final Migration m = Migration . deserialize ( col . value ( ) , message . getVersion ( ) ) ; <nl> + assert m . getVersion ( ) . equals ( version ) ; <nl> + StageManager . getStage ( Stage . MIGRATION ) . submit ( new WrappedRunnable ( ) <nl> + { <nl> + protected void runMayThrow ( ) throws Exception <nl> + { <nl> + / / check to make sure the current version is before this one . <nl> + if ( DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) = = version . timestamp ( ) ) <nl> + logger . debug ( " Not appling ( equal ) " + version . toString ( ) ) ; <nl> + else if ( DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) > version . timestamp ( ) ) <nl> + logger . debug ( " Not applying ( before ) " + version . toString ( ) ) ; <nl> + else <nl> + { <nl> + logger . debug ( " Applying { } from { } " , m . getClass ( ) . getSimpleName ( ) , message . getFrom ( ) ) ; <nl> + try <nl> + { <nl> + m . apply ( ) ; <nl> + / / update gossip , but don ' t contact nodes directly <nl> + m . passiveAnnounce ( ) ; <nl> + } <nl> + catch ( ConfigurationException ex ) <nl> + { <nl> + / / Trying to apply the same migration twice . This happens as a result of gossip . <nl> + logger . debug ( " Migration not applied " + ex . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> + } <nl> + } <nl> + catch ( IOException ex ) <nl> + { <nl> + throw new IOError ( ex ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / AddColumnFamily . java b / src / java / org / apache / cassandra / db / migration / AddColumnFamily . java <nl> index 4bda09e . . cd17528 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / AddColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / AddColumnFamily . java <nl> @ @ - 8 , 6 + 8 , 7 @ @ import java . util . Map ; <nl> <nl> import org . apache . cassandra . config . * ; <nl> import org . apache . cassandra . db . Table ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> @ @ - 88 , 7 + 89 , 7 @ @ public class AddColumnFamily extends Migration <nl> DatabaseDescriptor . setTableDefinition ( ksm , newVersion ) ; <nl> / / these definitions could have come from somewhere else . <nl> CFMetaData . fixMaxId ( ) ; <nl> - if ( ! clientMode ) <nl> + if ( ! StorageService . instance . isClientMode ( ) ) <nl> Table . open ( ksm . name ) . initCf ( cfm . cfId , cfm . cfName ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / AddKeyspace . java b / src / java / org / apache / cassandra / db / migration / AddKeyspace . java <nl> index 1e61ec6 . . 892c885 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / AddKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / AddKeyspace . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import org . apache . cassandra . config . ConfigurationException ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . KSMetaData ; <nl> import org . apache . cassandra . db . Table ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> @ @ - 69 , 7 + 70 , 7 @ @ public class AddKeyspace extends Migration <nl> DatabaseDescriptor . setTableDefinition ( ksm , newVersion ) ; <nl> / / these definitions could have come from somewhere else . <nl> CFMetaData . fixMaxId ( ) ; <nl> - if ( ! clientMode ) <nl> + if ( ! StorageService . instance . isClientMode ( ) ) <nl> { <nl> Table . open ( ksm . name ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java b / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java <nl> index 74cdb48 . . e085e3e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java <nl> @ @ - 11 , 6 + 11 , 7 @ @ import org . apache . cassandra . config . KSMetaData ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . Table ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> @ @ - 78 , 7 + 79 , 7 @ @ public class DropColumnFamily extends Migration <nl> CFMetaData . purge ( cfm ) ; <nl> DatabaseDescriptor . setTableDefinition ( ksm , newVersion ) ; <nl> <nl> - if ( ! clientMode ) <nl> + if ( ! StorageService . instance . isClientMode ( ) ) <nl> { <nl> cfs . snapshot ( Table . getTimestampedSnapshotName ( null ) ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / DropKeyspace . java b / src / java / org / apache / cassandra / db / migration / DropKeyspace . java <nl> index bb522b7 . . f9a442e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / DropKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / DropKeyspace . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . HintedHandOffManager ; <nl> import org . apache . cassandra . db . Table ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> @ @ - 61 , 7 + 62 , 7 @ @ public class DropKeyspace extends Migration <nl> { <nl> ColumnFamilyStore cfs = Table . open ( ksm . name ) . getColumnFamilyStore ( cfm . cfName ) ; <nl> CFMetaData . purge ( cfm ) ; <nl> - if ( ! clientMode ) <nl> + if ( ! StorageService . instance . isClientMode ( ) ) <nl> { <nl> cfs . snapshot ( snapshotName ) ; <nl> cfs . flushLock . lock ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / Migration . java b / src / java / org / apache / cassandra / db / migration / Migration . java <nl> index 761f395 . . 5d14287 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / Migration . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / Migration . java <nl> @ @ - 38 , 7 + 38 , 6 @ @ import org . apache . cassandra . config . KSMetaData ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . filter . QueryFilter ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> - import org . apache . cassandra . gms . Gossiper ; <nl> import org . apache . cassandra . io . SerDeUtils ; <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> import org . apache . cassandra . service . MigrationManager ; <nl> @ @ - 76 , 15 + 75 , 12 @ @ public abstract class Migration <nl> protected RowMutation rm ; <nl> protected UUID newVersion ; <nl> protected UUID lastVersion ; <nl> - <nl> - / / this doesn ' t follow the serialized migration around . <nl> - protected transient boolean clientMode ; <nl> - <nl> + <nl> + / / the migration in column form , used when announcing to others <nl> + private IColumn column ; <nl> + <nl> / * * Subclasses must have a matching constructor * / <nl> - protected Migration ( ) <nl> - { <nl> - clientMode = StorageService . instance . isClientMode ( ) ; <nl> - } <nl> + protected Migration ( ) { } <nl> <nl> Migration ( UUID newVersion , UUID lastVersion ) <nl> { <nl> @ @ - 103 , 16 + 99 , 17 @ @ public abstract class Migration <nl> throw new ConfigurationException ( " New version timestamp is not newer than the current version timestamp . " ) ; <nl> / / write to schema <nl> assert rm ! = null ; <nl> - if ( ! clientMode ) <nl> + if ( ! StorageService . instance . isClientMode ( ) ) <nl> + { <nl> rm . apply ( ) ; <nl> <nl> - / / write migration . <nl> - if ( ! clientMode ) <nl> - { <nl> long now = System . currentTimeMillis ( ) ; <nl> ByteBuffer buf = serialize ( ) ; <nl> RowMutation migration = new RowMutation ( Table . SYSTEM _ TABLE , MIGRATIONS _ KEY ) ; <nl> - migration . add ( new QueryPath ( MIGRATIONS _ CF , null , ByteBuffer . wrap ( UUIDGen . decompose ( newVersion ) ) ) , buf , now ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( Table . SYSTEM _ TABLE , MIGRATIONS _ CF ) ; <nl> + column = new Column ( ByteBuffer . wrap ( UUIDGen . decompose ( newVersion ) ) , buf , now ) ; <nl> + cf . addColumn ( column ) ; <nl> + migration . add ( cf ) ; <nl> migration . apply ( ) ; <nl> <nl> / / note that we ' re storing this in the system table , which is not replicated <nl> @ @ - 155 , 14 + 152 , 13 @ @ public abstract class Migration <nl> <nl> applyModels ( ) ; <nl> } <nl> - <nl> + <nl> + / * * send this migration immediately to existing nodes in the cluster . apply ( ) must be called first . * / <nl> public final void announce ( ) <nl> { <nl> - if ( StorageService . instance . isClientMode ( ) ) <nl> - return ; <nl> - <nl> - / / immediate notification for existing nodes . <nl> - MigrationManager . announce ( newVersion , Gossiper . instance . getLiveMembers ( ) ) ; <nl> + assert ! StorageService . instance . isClientMode ( ) ; <nl> + assert column ! = null ; <nl> + MigrationManager . announce ( column ) ; <nl> } <nl> <nl> public final void passiveAnnounce ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / RenameColumnFamily . java b / src / java / org / apache / cassandra / db / migration / RenameColumnFamily . java <nl> index 34b50af . . 74957c5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / RenameColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / RenameColumnFamily . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ import org . apache . cassandra . config . ConfigurationException ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . KSMetaData ; <nl> import org . apache . cassandra . db . Table ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> @ @ - 100 , 7 + 101 , 7 @ @ public class RenameColumnFamily extends Migration <nl> } <nl> DatabaseDescriptor . setTableDefinition ( ksm , newVersion ) ; <nl> <nl> - if ( ! clientMode ) <nl> + if ( ! StorageService . instance . isClientMode ( ) ) <nl> { <nl> Table . open ( ksm . name ) . renameCf ( cfId , newName ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / RenameKeyspace . java b / src / java / org / apache / cassandra / db / migration / RenameKeyspace . java <nl> index 7f67a36 . . f22708b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / RenameKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / RenameKeyspace . java <nl> @ @ - 29 , 8 + 29 , 8 @ @ import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ConfigurationException ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . KSMetaData ; <nl> - import org . apache . cassandra . db . HintedHandOffManager ; <nl> import org . apache . cassandra . db . Table ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> @ @ - 80 , 7 + 80 , 7 @ @ public class RenameKeyspace extends Migration <nl> <nl> public void applyModels ( ) throws IOException <nl> { <nl> - if ( ! clientMode ) <nl> + if ( ! StorageService . instance . isClientMode ( ) ) <nl> renameKsStorageFiles ( oldName , newName ) ; <nl> <nl> KSMetaData oldKsm = DatabaseDescriptor . getTableDefinition ( oldName ) ; <nl> @ @ - 105 , 7 + 105 , 7 @ @ public class RenameKeyspace extends Migration <nl> DatabaseDescriptor . clearTableDefinition ( oldKsm , newVersion ) ; <nl> DatabaseDescriptor . setTableDefinition ( newKsm , newVersion ) ; <nl> <nl> - if ( ! clientMode ) <nl> + if ( ! StorageService . instance . isClientMode ( ) ) <nl> { <nl> Table . clear ( oldKsm . name ) ; <nl> Table . open ( newName ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java b / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java <nl> index ab8c077 . . d9fecf3 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java <nl> @ @ - 6 , 6 + 6 , 7 @ @ import org . apache . cassandra . config . * ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . Table ; <nl> import org . apache . cassandra . db . migration . avro . ColumnDef ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> @ @ - 78 , 7 + 79 , 7 @ @ public class UpdateColumnFamily extends Migration <nl> } <nl> DatabaseDescriptor . setTableDefinition ( null , newVersion ) ; <nl> <nl> - if ( ! clientMode ) <nl> + if ( ! StorageService . instance . isClientMode ( ) ) <nl> { <nl> Table table = Table . open ( metadata . ksName ) ; <nl> ColumnFamilyStore oldCfs = table . getColumnFamilyStore ( metadata . cfName ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> index e2fe77c . . d816c57 100644 <nl> - - - a / src / java / org / apache / cassandra / service / MigrationManager . java <nl> + + + b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> @ @ - 87 , 19 + 87 , 15 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> public static void rectify ( UUID theirVersion , InetAddress endpoint ) <nl> { <nl> UUID myVersion = DatabaseDescriptor . getDefsVersion ( ) ; <nl> - if ( theirVersion . timestamp ( ) = = myVersion . timestamp ( ) ) <nl> - return ; <nl> - else if ( theirVersion . timestamp ( ) > myVersion . timestamp ( ) ) <nl> - { <nl> - logger . debug ( " My data definitions are old . Asking for updates since { } " , myVersion . toString ( ) ) ; <nl> - announce ( myVersion , Collections . singleton ( endpoint ) ) ; <nl> - } <nl> - else if ( ! StorageService . instance . isClientMode ( ) ) <nl> + if ( theirVersion . timestamp ( ) < myVersion . timestamp ( ) <nl> + & & ! StorageService . instance . isClientMode ( ) ) <nl> { <nl> if ( lastPushed . get ( endpoint ) = = null | | theirVersion . timestamp ( ) > = lastPushed . get ( endpoint ) . timestamp ( ) ) <nl> { <nl> logger . debug ( " Schema on { } is old . Sending updates since { } " , endpoint , theirVersion ) ; <nl> - pushMigrations ( theirVersion , myVersion , endpoint ) ; <nl> + Collection < IColumn > migrations = Migration . getLocalMigrations ( theirVersion , myVersion ) ; <nl> + pushMigrations ( endpoint , migrations ) ; <nl> + lastPushed . put ( endpoint , TimeUUIDType . instance . compose ( Iterables . getLast ( migrations ) . name ( ) ) ) ; <nl> } <nl> else <nl> { <nl> @ @ - 109 , 28 + 105 , 26 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> } <nl> } <nl> <nl> - / * * actively announce my version to a set of hosts via rpc . They may culminate with them sending me migrations . * / <nl> - public static void announce ( final UUID version , Set < InetAddress > hosts ) <nl> + private static void pushMigrations ( InetAddress endpoint , Collection < IColumn > migrations ) <nl> { <nl> - MessageProducer prod = new CachingMessageProducer ( new MessageProducer ( ) { <nl> - public Message getMessage ( Integer protocolVersion ) throws IOException <nl> - { <nl> - return makeVersionMessage ( version , protocolVersion ) ; <nl> - } <nl> - } ) ; <nl> - for ( InetAddress host : hosts ) <nl> + try <nl> { <nl> - try <nl> - { <nl> - MessagingService . instance ( ) . sendOneWay ( prod . getMessage ( Gossiper . instance . getVersion ( host ) ) , host ) ; <nl> - } <nl> - catch ( IOException ex ) <nl> - { <nl> - / / happened during message serialization . <nl> - throw new IOError ( ex ) ; <nl> - } <nl> + Message msg = makeMigrationMessage ( migrations , Gossiper . instance . getVersion ( endpoint ) ) ; <nl> + MessagingService . instance ( ) . sendOneWay ( msg , endpoint ) ; <nl> + } <nl> + catch ( IOException ex ) <nl> + { <nl> + throw new IOError ( ex ) ; <nl> } <nl> - passiveAnnounce ( version ) ; <nl> + } <nl> + <nl> + / * * actively announce a new version to active hosts via rpc * / <nl> + public static void announce ( IColumn column ) <nl> + { <nl> + <nl> + Collection < IColumn > migrations = Collections . singleton ( column ) ; <nl> + for ( InetAddress endpoint : Gossiper . instance . getLiveMembers ( ) ) <nl> + pushMigrations ( endpoint , migrations ) ; <nl> } <nl> <nl> / * * announce my version passively over gossip * * / <nl> @ @ - 138 , 7 + 132 , 7 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> { <nl> / / this is for notifying nodes as they arrive in the cluster . <nl> Gossiper . instance . addLocalApplicationState ( ApplicationState . SCHEMA , StorageService . instance . valueFactory . migration ( version ) ) ; <nl> - logger . debug ( " Announcing my schema is " + version ) ; <nl> + logger . debug ( " Gossiping my schema version " + version ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 197 , 30 + 191 , 7 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> } <nl> passiveAnnounce ( to ) ; / / we don ' t need to send rpcs , but we need to update gossip <nl> } <nl> - <nl> - / * * pushes migrations from this host to another host * / <nl> - public static void pushMigrations ( UUID from , UUID to , InetAddress host ) <nl> - { <nl> - / / I want all the rows from theirVersion through myVersion . <nl> - Collection < IColumn > migrations = Migration . getLocalMigrations ( from , to ) ; <nl> - try <nl> - { <nl> - Message msg = makeMigrationMessage ( migrations , Gossiper . instance . getVersion ( host ) ) ; <nl> - MessagingService . instance ( ) . sendOneWay ( msg , host ) ; <nl> - lastPushed . put ( host , TimeUUIDType . instance . compose ( Iterables . getLast ( migrations ) . name ( ) ) ) ; <nl> - } <nl> - catch ( IOException ex ) <nl> - { <nl> - throw new IOError ( ex ) ; <nl> - } <nl> - } <nl> - <nl> - private static Message makeVersionMessage ( UUID version , int protocolVersion ) <nl> - { <nl> - byte [ ] body = version . toString ( ) . getBytes ( ) ; <nl> - return new Message ( FBUtilities . getLocalAddress ( ) , StorageService . Verb . DEFINITIONS _ ANNOUNCE , body , protocolVersion ) ; <nl> - } <nl> - <nl> + <nl> / / other half of transformation is in DefinitionsUpdateResponseVerbHandler . <nl> private static Message makeMigrationMessage ( Collection < IColumn > migrations , int version ) throws IOException <nl> { <nl> @ @ - 241 , 7 + 212 , 7 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> } <nl> dout . close ( ) ; <nl> byte [ ] body = bout . toByteArray ( ) ; <nl> - return new Message ( FBUtilities . getLocalAddress ( ) , StorageService . Verb . DEFINITIONS _ UPDATE _ RESPONSE , body , version ) ; <nl> + return new Message ( FBUtilities . getLocalAddress ( ) , StorageService . Verb . DEFINITIONS _ UPDATE , body , version ) ; <nl> } <nl> <nl> / / other half of this transformation is in MigrationManager . <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 13be78c . . 6f304c7 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 104 , 8 + 104 , 8 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> GOSSIP _ DIGEST _ SYN , <nl> GOSSIP _ DIGEST _ ACK , <nl> GOSSIP _ DIGEST _ ACK2 , <nl> - DEFINITIONS _ ANNOUNCE , <nl> - DEFINITIONS _ UPDATE _ RESPONSE , <nl> + DEFINITIONS _ ANNOUNCE , / / Deprecated <nl> + DEFINITIONS _ UPDATE , <nl> TRUNCATE , <nl> SCHEMA _ CHECK , <nl> INDEX _ SCAN , <nl> @ @ - 137 , 8 + 137 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> put ( Verb . GOSSIP _ DIGEST _ ACK , Stage . GOSSIP ) ; <nl> put ( Verb . GOSSIP _ DIGEST _ ACK2 , Stage . GOSSIP ) ; <nl> put ( Verb . GOSSIP _ DIGEST _ SYN , Stage . GOSSIP ) ; <nl> - put ( Verb . DEFINITIONS _ ANNOUNCE , Stage . READ ) ; <nl> - put ( Verb . DEFINITIONS _ UPDATE _ RESPONSE , Stage . READ ) ; <nl> + put ( Verb . DEFINITIONS _ UPDATE , Stage . READ ) ; <nl> put ( Verb . TRUNCATE , Stage . MUTATION ) ; <nl> put ( Verb . SCHEMA _ CHECK , Stage . MIGRATION ) ; <nl> put ( Verb . INDEX _ SCAN , Stage . READ ) ; <nl> @ @ - 257 , 8 + 256 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> MessagingService . instance ( ) . registerVerbHandlers ( Verb . GOSSIP _ DIGEST _ ACK , new GossipDigestAckVerbHandler ( ) ) ; <nl> MessagingService . instance ( ) . registerVerbHandlers ( Verb . GOSSIP _ DIGEST _ ACK2 , new GossipDigestAck2VerbHandler ( ) ) ; <nl> <nl> - MessagingService . instance ( ) . registerVerbHandlers ( Verb . DEFINITIONS _ ANNOUNCE , new DefinitionsAnnounceVerbHandler ( ) ) ; <nl> - MessagingService . instance ( ) . registerVerbHandlers ( Verb . DEFINITIONS _ UPDATE _ RESPONSE , new DefinitionsUpdateResponseVerbHandler ( ) ) ; <nl> + MessagingService . instance ( ) . registerVerbHandlers ( Verb . DEFINITIONS _ UPDATE , new DefinitionsUpdateVerbHandler ( ) ) ; <nl> MessagingService . instance ( ) . registerVerbHandlers ( Verb . TRUNCATE , new TruncateVerbHandler ( ) ) ; <nl> MessagingService . instance ( ) . registerVerbHandlers ( Verb . SCHEMA _ CHECK , new SchemaCheckVerbHandler ( ) ) ; <nl> <nl> @ @ - 364 , 7 + 362 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> { <nl> throw new IOError ( ex ) ; <nl> } <nl> - MigrationManager . announce ( DatabaseDescriptor . getDefsVersion ( ) , DatabaseDescriptor . getSeeds ( ) ) ; <nl> + MigrationManager . passiveAnnounce ( DatabaseDescriptor . getDefsVersion ( ) ) ; <nl> } <nl> <nl> public synchronized void initServer ( ) throws IOException , org . apache . cassandra . config . ConfigurationException <nl> @ @ - 431 , 7 + 429 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> <nl> MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; <nl> StorageLoadBalancer . instance . startBroadcasting ( ) ; <nl> - MigrationManager . announce ( DatabaseDescriptor . getDefsVersion ( ) , DatabaseDescriptor . getSeeds ( ) ) ; <nl> + MigrationManager . passiveAnnounce ( DatabaseDescriptor . getDefsVersion ( ) ) ; <nl> Gossiper . instance . addLocalApplicationState ( ApplicationState . RELEASE _ VERSION , valueFactory . releaseVersion ( ) ) ; <nl> <nl> HintedHandOffManager . instance . registerMBean ( ) ;

TEST DIFF:
diff - - git a / build . xml b / build . xml 
 index 9562a37 . . 29e4121 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 1499 , 14 + 1499 , 13 @ @ 
 < classpathentry kind = " src " path = " src / java " / > 
 < classpathentry kind = " src " path = " src / resources " / > 
 < classpathentry kind = " src " path = " src / gen - java " / > 
 - < classpathentry kind = " src " path = " interface / thrift / gen - java " / > 
 < classpathentry kind = " src " path = " test / unit " / > 
 < classpathentry kind = " src " path = " test / long " / > 
 < classpathentry kind = " src " path = " test / pig " / > 
 < classpathentry kind = " src " path = " tools / stress / src " / > 
 < classpathentry kind = " con " path = " org . eclipse . jdt . launching . JRE _ CONTAINER " / > 
 < classpathentry kind = " output " path = " build / classes / main " / > 
 - < classpathentry kind = " lib " path = " build / classes / thrift " / > 
 + < classpathentry kind = " lib " path = " build / classes / thrift " sourcepath = " interface / thrift / gen - java / " / > 
 < classpathentry kind = " lib " path = " build / test / classes " / > 
 < classpathentry kind = " lib " path = " test / conf " / > 
 ] ] >

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6c45d09 . . 1abbffa 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 48 , 6 + 48 , 7 @ @ 
 * fix removing columns and subcolumns that are supressed by a row or 
 supercolumn tombstone during replica resolution ( CASSANDRA - 2590 ) 
 * support sstable2json against snapshot sstables ( CASSANDRA - 2386 ) 
 + * remove active - pull schema requests ( CASSANDRA - 2715 ) 
 
 
 0 . 8 . 0 - final 
 diff - - git a / src / java / org / apache / cassandra / db / DataTracker . java b / src / java / org / apache / cassandra / db / DataTracker . java 
 index 4096f57 . . f833621 100644 
 - - - a / src / java / org / apache / cassandra / db / DataTracker . java 
 + + + b / src / java / org / apache / cassandra / db / DataTracker . java 
 @ @ - 37 , 7 + 37 , 7 @ @ import org . apache . cassandra . io . sstable . Descriptor ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 import org . apache . cassandra . utils . Pair ; 
 
 - public class DataTracker 
 + public class DataTracker 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( DataTracker . class ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java b / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java 
 index 2ec3ecc . . e69de29 100644 
 - - - a / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java 
 + + + b / src / java / org / apache / cassandra / db / DefinitionsAnnounceVerbHandler . java 
 @ @ - 1 , 36 + 0 , 0 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * < p / > 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * < p / > 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . db ; 
 - 
 - import java . util . UUID ; 
 - 
 - import org . apache . cassandra . net . IVerbHandler ; 
 - import org . apache . cassandra . net . Message ; 
 - import org . apache . cassandra . service . MigrationManager ; 
 - 
 - public class DefinitionsAnnounceVerbHandler implements IVerbHandler 
 - { 
 - 
 - / * * someone is announcing their schema version . * / 
 - public void doVerb ( Message message , String id ) 
 - { 
 - UUID theirVersion = UUID . fromString ( new String ( message . getMessageBody ( ) ) ) ; 
 - MigrationManager . rectify ( theirVersion , message . getFrom ( ) ) ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java b / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java 
 deleted file mode 100644 
 index 5df5e85 . . 0000000 
 - - - a / src / java / org / apache / cassandra / db / DefinitionsUpdateResponseVerbHandler . java 
 + + + / dev / null 
 @ @ - 1 , 93 + 0 , 0 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * < p / > 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * < p / > 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . db ; 
 - 
 - import java . io . IOError ; 
 - import java . io . IOException ; 
 - import java . util . Collection ; 
 - import java . util . UUID ; 
 - 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 - 
 - import org . apache . cassandra . concurrent . Stage ; 
 - import org . apache . cassandra . concurrent . StageManager ; 
 - import org . apache . cassandra . config . ConfigurationException ; 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . db . migration . Migration ; 
 - import org . apache . cassandra . net . IVerbHandler ; 
 - import org . apache . cassandra . net . Message ; 
 - import org . apache . cassandra . service . MigrationManager ; 
 - import org . apache . cassandra . utils . UUIDGen ; 
 - import org . apache . cassandra . utils . WrappedRunnable ; 
 - 
 - public class DefinitionsUpdateResponseVerbHandler implements IVerbHandler 
 - { 
 - private static final Logger logger = LoggerFactory . getLogger ( DefinitionsUpdateResponseVerbHandler . class ) ; 
 - 
 - / * * someone sent me their data definitions * / 
 - public void doVerb ( final Message message , String id ) 
 - { 
 - try 
 - { 
 - / / these are the serialized row mutations that I must apply . 
 - / / check versions at every step along the way to make sure migrations are not applied out of order . 
 - Collection < Column > cols = MigrationManager . makeColumns ( message ) ; 
 - for ( Column col : cols ) 
 - { 
 - final UUID version = UUIDGen . getUUID ( col . name ( ) ) ; 
 - if ( version . timestamp ( ) > DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) ) 
 - { 
 - final Migration m = Migration . deserialize ( col . value ( ) , message . getVersion ( ) ) ; 
 - assert m . getVersion ( ) . equals ( version ) ; 
 - StageManager . getStage ( Stage . MIGRATION ) . submit ( new WrappedRunnable ( ) 
 - { 
 - protected void runMayThrow ( ) throws Exception 
 - { 
 - / / check to make sure the current version is before this one . 
 - if ( DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) = = version . timestamp ( ) ) 
 - logger . debug ( " Not appling ( equal ) " + version . toString ( ) ) ; 
 - else if ( DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) > version . timestamp ( ) ) 
 - logger . debug ( " Not applying ( before ) " + version . toString ( ) ) ; 
 - else 
 - { 
 - logger . debug ( " Applying { } from { } " , m . getClass ( ) . getSimpleName ( ) , message . getFrom ( ) ) ; 
 - try 
 - { 
 - m . apply ( ) ; 
 - / / update gossip , but don ' t contact nodes directly 
 - m . passiveAnnounce ( ) ; 
 - } 
 - catch ( ConfigurationException ex ) 
 - { 
 - / / Trying to apply the same migration twice . This happens as a result of gossip . 
 - logger . debug ( " Migration not applied " + ex . getMessage ( ) ) ; 
 - } 
 - } 
 - } 
 - } ) ; 
 - } 
 - } 
 - } 
 - catch ( IOException ex ) 
 - { 
 - throw new IOError ( ex ) ; 
 - } 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / db / DefinitionsUpdateVerbHandler . java b / src / java / org / apache / cassandra / db / DefinitionsUpdateVerbHandler . java 
 new file mode 100644 
 index 0000000 . . ddc4513 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / DefinitionsUpdateVerbHandler . java 
 @ @ - 0 , 0 + 1 , 93 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * < p / > 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * < p / > 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . db ; 
 + 
 + import java . io . IOError ; 
 + import java . io . IOException ; 
 + import java . util . Collection ; 
 + import java . util . UUID ; 
 + 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import org . apache . cassandra . concurrent . Stage ; 
 + import org . apache . cassandra . concurrent . StageManager ; 
 + import org . apache . cassandra . config . ConfigurationException ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . db . migration . Migration ; 
 + import org . apache . cassandra . net . IVerbHandler ; 
 + import org . apache . cassandra . net . Message ; 
 + import org . apache . cassandra . service . MigrationManager ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 + import org . apache . cassandra . utils . WrappedRunnable ; 
 + 
 + public class DefinitionsUpdateVerbHandler implements IVerbHandler 
 + { 
 + private static final Logger logger = LoggerFactory . getLogger ( DefinitionsUpdateVerbHandler . class ) ; 
 + 
 + / * * someone sent me their data definitions * / 
 + public void doVerb ( final Message message , String id ) 
 + { 
 + try 
 + { 
 + / / these are the serialized row mutations that I must apply . 
 + / / check versions at every step along the way to make sure migrations are not applied out of order . 
 + Collection < Column > cols = MigrationManager . makeColumns ( message ) ; 
 + for ( Column col : cols ) 
 + { 
 + final UUID version = UUIDGen . getUUID ( col . name ( ) ) ; 
 + if ( version . timestamp ( ) > DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) ) 
 + { 
 + final Migration m = Migration . deserialize ( col . value ( ) , message . getVersion ( ) ) ; 
 + assert m . getVersion ( ) . equals ( version ) ; 
 + StageManager . getStage ( Stage . MIGRATION ) . submit ( new WrappedRunnable ( ) 
 + { 
 + protected void runMayThrow ( ) throws Exception 
 + { 
 + / / check to make sure the current version is before this one . 
 + if ( DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) = = version . timestamp ( ) ) 
 + logger . debug ( " Not appling ( equal ) " + version . toString ( ) ) ; 
 + else if ( DatabaseDescriptor . getDefsVersion ( ) . timestamp ( ) > version . timestamp ( ) ) 
 + logger . debug ( " Not applying ( before ) " + version . toString ( ) ) ; 
 + else 
 + { 
 + logger . debug ( " Applying { } from { } " , m . getClass ( ) . getSimpleName ( ) , message . getFrom ( ) ) ; 
 + try 
 + { 
 + m . apply ( ) ; 
 + / / update gossip , but don ' t contact nodes directly 
 + m . passiveAnnounce ( ) ; 
 + } 
 + catch ( ConfigurationException ex ) 
 + { 
 + / / Trying to apply the same migration twice . This happens as a result of gossip . 
 + logger . debug ( " Migration not applied " + ex . getMessage ( ) ) ; 
 + } 
 + } 
 + } 
 + } ) ; 
 + } 
 + } 
 + } 
 + catch ( IOException ex ) 
 + { 
 + throw new IOError ( ex ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / db / migration / AddColumnFamily . java b / src / java / org / apache / cassandra / db / migration / AddColumnFamily . java 
 index 4bda09e . . cd17528 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / AddColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / migration / AddColumnFamily . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import java . util . Map ; 
 
 import org . apache . cassandra . config . * ; 
 import org . apache . cassandra . db . Table ; 
 + import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 
 @ @ - 88 , 7 + 89 , 7 @ @ public class AddColumnFamily extends Migration 
 DatabaseDescriptor . setTableDefinition ( ksm , newVersion ) ; 
 / / these definitions could have come from somewhere else . 
 CFMetaData . fixMaxId ( ) ; 
 - if ( ! clientMode ) 
 + if ( ! StorageService . instance . isClientMode ( ) ) 
 Table . open ( ksm . name ) . initCf ( cfm . cfId , cfm . cfName ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / migration / AddKeyspace . java b / src / java / org / apache / cassandra / db / migration / AddKeyspace . java 
 index 1e61ec6 . . 892c885 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / AddKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / migration / AddKeyspace . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import org . apache . cassandra . config . ConfigurationException ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . KSMetaData ; 
 import org . apache . cassandra . db . Table ; 
 + import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 
 @ @ - 69 , 7 + 70 , 7 @ @ public class AddKeyspace extends Migration 
 DatabaseDescriptor . setTableDefinition ( ksm , newVersion ) ; 
 / / these definitions could have come from somewhere else . 
 CFMetaData . fixMaxId ( ) ; 
 - if ( ! clientMode ) 
 + if ( ! StorageService . instance . isClientMode ( ) ) 
 { 
 Table . open ( ksm . name ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java b / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java 
 index 74cdb48 . . e085e3e 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java 
 @ @ - 11 , 6 + 11 , 7 @ @ import org . apache . cassandra . config . KSMetaData ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . Table ; 
 + import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 
 @ @ - 78 , 7 + 79 , 7 @ @ public class DropColumnFamily extends Migration 
 CFMetaData . purge ( cfm ) ; 
 DatabaseDescriptor . setTableDefinition ( ksm , newVersion ) ; 
 
 - if ( ! clientMode ) 
 + if ( ! StorageService . instance . isClientMode ( ) ) 
 { 
 cfs . snapshot ( Table . getTimestampedSnapshotName ( null ) ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / migration / DropKeyspace . java b / src / java / org / apache / cassandra / db / migration / DropKeyspace . java 
 index bb522b7 . . f9a442e 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / DropKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / migration / DropKeyspace . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . HintedHandOffManager ; 
 import org . apache . cassandra . db . Table ; 
 + import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 
 @ @ - 61 , 7 + 62 , 7 @ @ public class DropKeyspace extends Migration 
 { 
 ColumnFamilyStore cfs = Table . open ( ksm . name ) . getColumnFamilyStore ( cfm . cfName ) ; 
 CFMetaData . purge ( cfm ) ; 
 - if ( ! clientMode ) 
 + if ( ! StorageService . instance . isClientMode ( ) ) 
 { 
 cfs . snapshot ( snapshotName ) ; 
 cfs . flushLock . lock ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / migration / Migration . java b / src / java / org / apache / cassandra / db / migration / Migration . java 
 index 761f395 . . 5d14287 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / Migration . java 
 + + + b / src / java / org / apache / cassandra / db / migration / Migration . java 
 @ @ - 38 , 7 + 38 , 6 @ @ import org . apache . cassandra . config . KSMetaData ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . filter . QueryFilter ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 - import org . apache . cassandra . gms . Gossiper ; 
 import org . apache . cassandra . io . SerDeUtils ; 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 import org . apache . cassandra . service . MigrationManager ; 
 @ @ - 76 , 15 + 75 , 12 @ @ public abstract class Migration 
 protected RowMutation rm ; 
 protected UUID newVersion ; 
 protected UUID lastVersion ; 
 - 
 - / / this doesn ' t follow the serialized migration around . 
 - protected transient boolean clientMode ; 
 - 
 + 
 + / / the migration in column form , used when announcing to others 
 + private IColumn column ; 
 + 
 / * * Subclasses must have a matching constructor * / 
 - protected Migration ( ) 
 - { 
 - clientMode = StorageService . instance . isClientMode ( ) ; 
 - } 
 + protected Migration ( ) { } 
 
 Migration ( UUID newVersion , UUID lastVersion ) 
 { 
 @ @ - 103 , 16 + 99 , 17 @ @ public abstract class Migration 
 throw new ConfigurationException ( " New version timestamp is not newer than the current version timestamp . " ) ; 
 / / write to schema 
 assert rm ! = null ; 
 - if ( ! clientMode ) 
 + if ( ! StorageService . instance . isClientMode ( ) ) 
 + { 
 rm . apply ( ) ; 
 
 - / / write migration . 
 - if ( ! clientMode ) 
 - { 
 long now = System . currentTimeMillis ( ) ; 
 ByteBuffer buf = serialize ( ) ; 
 RowMutation migration = new RowMutation ( Table . SYSTEM _ TABLE , MIGRATIONS _ KEY ) ; 
 - migration . add ( new QueryPath ( MIGRATIONS _ CF , null , ByteBuffer . wrap ( UUIDGen . decompose ( newVersion ) ) ) , buf , now ) ; 
 + ColumnFamily cf = ColumnFamily . create ( Table . SYSTEM _ TABLE , MIGRATIONS _ CF ) ; 
 + column = new Column ( ByteBuffer . wrap ( UUIDGen . decompose ( newVersion ) ) , buf , now ) ; 
 + cf . addColumn ( column ) ; 
 + migration . add ( cf ) ; 
 migration . apply ( ) ; 
 
 / / note that we ' re storing this in the system table , which is not replicated 
 @ @ - 155 , 14 + 152 , 13 @ @ public abstract class Migration 
 
 applyModels ( ) ; 
 } 
 - 
 + 
 + / * * send this migration immediately to existing nodes in the cluster . apply ( ) must be called first . * / 
 public final void announce ( ) 
 { 
 - if ( StorageService . instance . isClientMode ( ) ) 
 - return ; 
 - 
 - / / immediate notification for existing nodes . 
 - MigrationManager . announce ( newVersion , Gossiper . instance . getLiveMembers ( ) ) ; 
 + assert ! StorageService . instance . isClientMode ( ) ; 
 + assert column ! = null ; 
 + MigrationManager . announce ( column ) ; 
 } 
 
 public final void passiveAnnounce ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / migration / RenameColumnFamily . java b / src / java / org / apache / cassandra / db / migration / RenameColumnFamily . java 
 index 34b50af . . 74957c5 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / RenameColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / migration / RenameColumnFamily . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import org . apache . cassandra . config . ConfigurationException ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . KSMetaData ; 
 import org . apache . cassandra . db . Table ; 
 + import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 
 @ @ - 100 , 7 + 101 , 7 @ @ public class RenameColumnFamily extends Migration 
 } 
 DatabaseDescriptor . setTableDefinition ( ksm , newVersion ) ; 
 
 - if ( ! clientMode ) 
 + if ( ! StorageService . instance . isClientMode ( ) ) 
 { 
 Table . open ( ksm . name ) . renameCf ( cfId , newName ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / migration / RenameKeyspace . java b / src / java / org / apache / cassandra / db / migration / RenameKeyspace . java 
 index 7f67a36 . . f22708b 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / RenameKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / migration / RenameKeyspace . java 
 @ @ - 29 , 8 + 29 , 8 @ @ import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ConfigurationException ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . KSMetaData ; 
 - import org . apache . cassandra . db . HintedHandOffManager ; 
 import org . apache . cassandra . db . Table ; 
 + import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 
 @ @ - 80 , 7 + 80 , 7 @ @ public class RenameKeyspace extends Migration 
 
 public void applyModels ( ) throws IOException 
 { 
 - if ( ! clientMode ) 
 + if ( ! StorageService . instance . isClientMode ( ) ) 
 renameKsStorageFiles ( oldName , newName ) ; 
 
 KSMetaData oldKsm = DatabaseDescriptor . getTableDefinition ( oldName ) ; 
 @ @ - 105 , 7 + 105 , 7 @ @ public class RenameKeyspace extends Migration 
 DatabaseDescriptor . clearTableDefinition ( oldKsm , newVersion ) ; 
 DatabaseDescriptor . setTableDefinition ( newKsm , newVersion ) ; 
 
 - if ( ! clientMode ) 
 + if ( ! StorageService . instance . isClientMode ( ) ) 
 { 
 Table . clear ( oldKsm . name ) ; 
 Table . open ( newName ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java b / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java 
 index ab8c077 . . d9fecf3 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / migration / UpdateColumnFamily . java 
 @ @ - 6 , 6 + 6 , 7 @ @ import org . apache . cassandra . config . * ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . Table ; 
 import org . apache . cassandra . db . migration . avro . ColumnDef ; 
 + import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 
 @ @ - 78 , 7 + 79 , 7 @ @ public class UpdateColumnFamily extends Migration 
 } 
 DatabaseDescriptor . setTableDefinition ( null , newVersion ) ; 
 
 - if ( ! clientMode ) 
 + if ( ! StorageService . instance . isClientMode ( ) ) 
 { 
 Table table = Table . open ( metadata . ksName ) ; 
 ColumnFamilyStore oldCfs = table . getColumnFamilyStore ( metadata . cfName ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java 
 index e2fe77c . . d816c57 100644 
 - - - a / src / java / org / apache / cassandra / service / MigrationManager . java 
 + + + b / src / java / org / apache / cassandra / service / MigrationManager . java 
 @ @ - 87 , 19 + 87 , 15 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 public static void rectify ( UUID theirVersion , InetAddress endpoint ) 
 { 
 UUID myVersion = DatabaseDescriptor . getDefsVersion ( ) ; 
 - if ( theirVersion . timestamp ( ) = = myVersion . timestamp ( ) ) 
 - return ; 
 - else if ( theirVersion . timestamp ( ) > myVersion . timestamp ( ) ) 
 - { 
 - logger . debug ( " My data definitions are old . Asking for updates since { } " , myVersion . toString ( ) ) ; 
 - announce ( myVersion , Collections . singleton ( endpoint ) ) ; 
 - } 
 - else if ( ! StorageService . instance . isClientMode ( ) ) 
 + if ( theirVersion . timestamp ( ) < myVersion . timestamp ( ) 
 + & & ! StorageService . instance . isClientMode ( ) ) 
 { 
 if ( lastPushed . get ( endpoint ) = = null | | theirVersion . timestamp ( ) > = lastPushed . get ( endpoint ) . timestamp ( ) ) 
 { 
 logger . debug ( " Schema on { } is old . Sending updates since { } " , endpoint , theirVersion ) ; 
 - pushMigrations ( theirVersion , myVersion , endpoint ) ; 
 + Collection < IColumn > migrations = Migration . getLocalMigrations ( theirVersion , myVersion ) ; 
 + pushMigrations ( endpoint , migrations ) ; 
 + lastPushed . put ( endpoint , TimeUUIDType . instance . compose ( Iterables . getLast ( migrations ) . name ( ) ) ) ; 
 } 
 else 
 { 
 @ @ - 109 , 28 + 105 , 26 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 } 
 } 
 
 - / * * actively announce my version to a set of hosts via rpc . They may culminate with them sending me migrations . * / 
 - public static void announce ( final UUID version , Set < InetAddress > hosts ) 
 + private static void pushMigrations ( InetAddress endpoint , Collection < IColumn > migrations ) 
 { 
 - MessageProducer prod = new CachingMessageProducer ( new MessageProducer ( ) { 
 - public Message getMessage ( Integer protocolVersion ) throws IOException 
 - { 
 - return makeVersionMessage ( version , protocolVersion ) ; 
 - } 
 - } ) ; 
 - for ( InetAddress host : hosts ) 
 + try 
 { 
 - try 
 - { 
 - MessagingService . instance ( ) . sendOneWay ( prod . getMessage ( Gossiper . instance . getVersion ( host ) ) , host ) ; 
 - } 
 - catch ( IOException ex ) 
 - { 
 - / / happened during message serialization . 
 - throw new IOError ( ex ) ; 
 - } 
 + Message msg = makeMigrationMessage ( migrations , Gossiper . instance . getVersion ( endpoint ) ) ; 
 + MessagingService . instance ( ) . sendOneWay ( msg , endpoint ) ; 
 + } 
 + catch ( IOException ex ) 
 + { 
 + throw new IOError ( ex ) ; 
 } 
 - passiveAnnounce ( version ) ; 
 + } 
 + 
 + / * * actively announce a new version to active hosts via rpc * / 
 + public static void announce ( IColumn column ) 
 + { 
 + 
 + Collection < IColumn > migrations = Collections . singleton ( column ) ; 
 + for ( InetAddress endpoint : Gossiper . instance . getLiveMembers ( ) ) 
 + pushMigrations ( endpoint , migrations ) ; 
 } 
 
 / * * announce my version passively over gossip * * / 
 @ @ - 138 , 7 + 132 , 7 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 { 
 / / this is for notifying nodes as they arrive in the cluster . 
 Gossiper . instance . addLocalApplicationState ( ApplicationState . SCHEMA , StorageService . instance . valueFactory . migration ( version ) ) ; 
 - logger . debug ( " Announcing my schema is " + version ) ; 
 + logger . debug ( " Gossiping my schema version " + version ) ; 
 } 
 
 / * * 
 @ @ - 197 , 30 + 191 , 7 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 } 
 passiveAnnounce ( to ) ; / / we don ' t need to send rpcs , but we need to update gossip 
 } 
 - 
 - / * * pushes migrations from this host to another host * / 
 - public static void pushMigrations ( UUID from , UUID to , InetAddress host ) 
 - { 
 - / / I want all the rows from theirVersion through myVersion . 
 - Collection < IColumn > migrations = Migration . getLocalMigrations ( from , to ) ; 
 - try 
 - { 
 - Message msg = makeMigrationMessage ( migrations , Gossiper . instance . getVersion ( host ) ) ; 
 - MessagingService . instance ( ) . sendOneWay ( msg , host ) ; 
 - lastPushed . put ( host , TimeUUIDType . instance . compose ( Iterables . getLast ( migrations ) . name ( ) ) ) ; 
 - } 
 - catch ( IOException ex ) 
 - { 
 - throw new IOError ( ex ) ; 
 - } 
 - } 
 - 
 - private static Message makeVersionMessage ( UUID version , int protocolVersion ) 
 - { 
 - byte [ ] body = version . toString ( ) . getBytes ( ) ; 
 - return new Message ( FBUtilities . getLocalAddress ( ) , StorageService . Verb . DEFINITIONS _ ANNOUNCE , body , protocolVersion ) ; 
 - } 
 - 
 + 
 / / other half of transformation is in DefinitionsUpdateResponseVerbHandler . 
 private static Message makeMigrationMessage ( Collection < IColumn > migrations , int version ) throws IOException 
 { 
 @ @ - 241 , 7 + 212 , 7 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 } 
 dout . close ( ) ; 
 byte [ ] body = bout . toByteArray ( ) ; 
 - return new Message ( FBUtilities . getLocalAddress ( ) , StorageService . Verb . DEFINITIONS _ UPDATE _ RESPONSE , body , version ) ; 
 + return new Message ( FBUtilities . getLocalAddress ( ) , StorageService . Verb . DEFINITIONS _ UPDATE , body , version ) ; 
 } 
 
 / / other half of this transformation is in MigrationManager . 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 13be78c . . 6f304c7 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 104 , 8 + 104 , 8 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 GOSSIP _ DIGEST _ SYN , 
 GOSSIP _ DIGEST _ ACK , 
 GOSSIP _ DIGEST _ ACK2 , 
 - DEFINITIONS _ ANNOUNCE , 
 - DEFINITIONS _ UPDATE _ RESPONSE , 
 + DEFINITIONS _ ANNOUNCE , / / Deprecated 
 + DEFINITIONS _ UPDATE , 
 TRUNCATE , 
 SCHEMA _ CHECK , 
 INDEX _ SCAN , 
 @ @ - 137 , 8 + 137 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 put ( Verb . GOSSIP _ DIGEST _ ACK , Stage . GOSSIP ) ; 
 put ( Verb . GOSSIP _ DIGEST _ ACK2 , Stage . GOSSIP ) ; 
 put ( Verb . GOSSIP _ DIGEST _ SYN , Stage . GOSSIP ) ; 
 - put ( Verb . DEFINITIONS _ ANNOUNCE , Stage . READ ) ; 
 - put ( Verb . DEFINITIONS _ UPDATE _ RESPONSE , Stage . READ ) ; 
 + put ( Verb . DEFINITIONS _ UPDATE , Stage . READ ) ; 
 put ( Verb . TRUNCATE , Stage . MUTATION ) ; 
 put ( Verb . SCHEMA _ CHECK , Stage . MIGRATION ) ; 
 put ( Verb . INDEX _ SCAN , Stage . READ ) ; 
 @ @ - 257 , 8 + 256 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 MessagingService . instance ( ) . registerVerbHandlers ( Verb . GOSSIP _ DIGEST _ ACK , new GossipDigestAckVerbHandler ( ) ) ; 
 MessagingService . instance ( ) . registerVerbHandlers ( Verb . GOSSIP _ DIGEST _ ACK2 , new GossipDigestAck2VerbHandler ( ) ) ; 
 
 - MessagingService . instance ( ) . registerVerbHandlers ( Verb . DEFINITIONS _ ANNOUNCE , new DefinitionsAnnounceVerbHandler ( ) ) ; 
 - MessagingService . instance ( ) . registerVerbHandlers ( Verb . DEFINITIONS _ UPDATE _ RESPONSE , new DefinitionsUpdateResponseVerbHandler ( ) ) ; 
 + MessagingService . instance ( ) . registerVerbHandlers ( Verb . DEFINITIONS _ UPDATE , new DefinitionsUpdateVerbHandler ( ) ) ; 
 MessagingService . instance ( ) . registerVerbHandlers ( Verb . TRUNCATE , new TruncateVerbHandler ( ) ) ; 
 MessagingService . instance ( ) . registerVerbHandlers ( Verb . SCHEMA _ CHECK , new SchemaCheckVerbHandler ( ) ) ; 
 
 @ @ - 364 , 7 + 362 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 { 
 throw new IOError ( ex ) ; 
 } 
 - MigrationManager . announce ( DatabaseDescriptor . getDefsVersion ( ) , DatabaseDescriptor . getSeeds ( ) ) ; 
 + MigrationManager . passiveAnnounce ( DatabaseDescriptor . getDefsVersion ( ) ) ; 
 } 
 
 public synchronized void initServer ( ) throws IOException , org . apache . cassandra . config . ConfigurationException 
 @ @ - 431 , 7 + 429 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 
 MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; 
 StorageLoadBalancer . instance . startBroadcasting ( ) ; 
 - MigrationManager . announce ( DatabaseDescriptor . getDefsVersion ( ) , DatabaseDescriptor . getSeeds ( ) ) ; 
 + MigrationManager . passiveAnnounce ( DatabaseDescriptor . getDefsVersion ( ) ) ; 
 Gossiper . instance . addLocalApplicationState ( ApplicationState . RELEASE _ VERSION , valueFactory . releaseVersion ( ) ) ; 
 
 HintedHandOffManager . instance . registerMBean ( ) ;
