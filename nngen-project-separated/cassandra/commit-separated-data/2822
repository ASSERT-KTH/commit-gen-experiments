BLEU SCORE: 0.018738883683389617

TEST MSG: Make sure both type name are prepared for a type rename
GENERATED MSG: renaming

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java <nl> index dd88aca . . 61a4e35 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java <nl> @ @ - 352 , 6 + 352 , 18 @ @ public abstract class AlterTypeStatement extends SchemaAlteringStatement <nl> this . newName = newName ; <nl> } <nl> <nl> + @ Override <nl> + public void prepareKeyspace ( ClientState state ) throws InvalidRequestException <nl> + { <nl> + super . prepareKeyspace ( state ) ; <nl> + <nl> + if ( ! newName . hasKeyspace ( ) ) <nl> + newName . setKeyspace ( state . getKeyspace ( ) ) ; <nl> + <nl> + if ( newName . getKeyspace ( ) = = null ) <nl> + throw new InvalidRequestException ( " You need to be logged in a keyspace or use a fully qualified user type name " ) ; <nl> + } <nl> + <nl> protected UserType makeUpdatedType ( UserType toUpdate ) throws InvalidRequestException <nl> { <nl> KSMetaData ksm = Schema . instance . getKSMetaData ( newName . getKeyspace ( ) ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 871a69b . . c3f7c62 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 244 , 6 + 244 , 7 @ @ public final class CFMetaData <nl> public static CFMetaData newIndexMetadata ( CFMetaData parent , ColumnDefinition info , AbstractType columnComparator ) <nl> { <nl> return new CFMetaData ( parent . ksName , parent . indexColumnFamilyName ( info ) , ColumnFamilyType . Standard , columnComparator , null ) <nl> + . keyValidator ( info . getValidator ( ) ) <nl> . keyCacheSize ( 0 . 0 ) <nl> . readRepairChance ( 0 . 0 ) <nl> . gcGraceSeconds ( parent . gcGraceSeconds ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 157c0a0 . . 047d6a1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1544 , 9 + 1544 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> * For testing . no effort is made to clear historical memtables , nor for <nl> * thread safety <nl> * / <nl> - void clearUnsafe ( ) <nl> + public void clearUnsafe ( ) <nl> { <nl> - data . init ( ) ; <nl> + for ( ColumnFamilyStore cfs : concatWithIndexes ( ) ) <nl> + cfs . data . init ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java <nl> index 0c37298 . . 9b51703 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Table . java <nl> + + + b / src / java / org / apache / cassandra / db / Table . java <nl> @ @ - 514 , 7 + 514 , 9 @ @ public class Table <nl> <nl> public static void indexRow ( DecoratedKey < ? > key , ColumnFamilyStore cfs , SortedSet < ByteBuffer > indexedColumns ) <nl> { <nl> - logger . debug ( " Indexing row { } " , key ) ; <nl> + if ( logger . isDebugEnabled ( ) ) <nl> + logger . debug ( " Indexing row { } " , cfs . metadata . getKeyValidator ( ) . getString ( key . key ) ) ; <nl> + <nl> switchLock . readLock ( ) . lock ( ) ; <nl> try <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> index c970a29 . . fa37f3f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> @ @ - 56 , 19 + 56 , 19 @ @ public class KeysIndex extends PerColumnSecondaryIndex <nl> assert baseCfs ! = null & & columnDefs ! = null ; <nl> <nl> ColumnDefinition columnDef = columnDefs . iterator ( ) . next ( ) ; <nl> - CFMetaData indexedCfMetadata = CFMetaData . newIndexMetadata ( baseCfs . metadata , columnDef , indexComparator ( ) ) ; <nl> + CFMetaData indexedCfMetadata = CFMetaData . newIndexMetadata ( baseCfs . metadata , columnDef , indexComparator ( ) ) ; <nl> indexCfs = ColumnFamilyStore . createColumnFamilyStore ( baseCfs . table , <nl> - indexedCfMetadata . cfName , <nl> - new LocalPartitioner ( columnDef . getValidator ( ) ) , <nl> - indexedCfMetadata ) ; <nl> + indexedCfMetadata . cfName , <nl> + new LocalPartitioner ( columnDef . getValidator ( ) ) , <nl> + indexedCfMetadata ) ; <nl> } <nl> <nl> public static AbstractType indexComparator ( ) <nl> { <nl> IPartitioner rowPartitioner = StorageService . getPartitioner ( ) ; <nl> return ( rowPartitioner instanceof OrderPreservingPartitioner | | rowPartitioner instanceof ByteOrderedPartitioner ) <nl> - ? BytesType . instance <nl> - : new LocalByPartionerType ( StorageService . getPartitioner ( ) ) ; <nl> + ? BytesType . instance <nl> + : new LocalByPartionerType ( StorageService . getPartitioner ( ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 99 , 7 + 99 , 7 @ @ public class KeysIndex extends PerColumnSecondaryIndex <nl> cfi . addColumn ( new Column ( rowKey , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , column . timestamp ( ) ) ) ; <nl> } <nl> if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " applying index row { } : { } " , valueKey , cfi ) ; <nl> + logger . debug ( " applying index row { } in { } " , indexCfs . metadata . getKeyValidator ( ) . getString ( valueKey . key ) , cfi ) ; <nl> <nl> indexCfs . apply ( valueKey , cfi ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java b / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java <nl> index 35ab914 . . a6a1179 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java <nl> + + + b / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java <nl> @ @ - 149 , 7 + 149 , 7 @ @ public class KeysSearcher extends SecondaryIndexSearcher <nl> * should be pretty close to ` start _ key ` . * / <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( String . format ( " Scanning index % s starting with % s " , <nl> - expressionString ( primary ) , index . getUnderlyingCfs ( ) . getComparator ( ) . getString ( startKey ) ) ) ; <nl> + expressionString ( primary ) , index . getBaseCFStore ( ) . metadata . getKeyValidator ( ) . getString ( startKey ) ) ) ; <nl> <nl> / / We shouldn ' t fetch only 1 row as this provides buggy paging in case the first row doesn ' t satisfy all clauses <nl> int count = Math . max ( clause . count , 2 ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> index 9518f0f . . 111f757 100644 <nl> - - - a / test / unit / org / apache / cassandra / SchemaLoader . java <nl> + + + b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> @ @ - 276 , 8 + 276 , 9 @ @ public class SchemaLoader <nl> private static CFMetaData indexCFMD ( String ksName , String cfName , final Boolean withIdxType ) throws ConfigurationException <nl> { <nl> return standardCFMD ( ksName , cfName ) <nl> - . columnMetadata ( new HashMap < ByteBuffer , ColumnDefinition > ( ) <nl> - { { <nl> + . keyValidator ( AsciiType . instance ) <nl> + . columnMetadata ( new HashMap < ByteBuffer , ColumnDefinition > ( ) <nl> + { { <nl> ByteBuffer cName = ByteBuffer . wrap ( " birthdate " . getBytes ( Charsets . UTF _ 8 ) ) ; <nl> IndexType keys = withIdxType ? IndexType . KEYS : null ; <nl> put ( cName , new ColumnDefinition ( cName , LongType . instance , keys , null , ByteBufferUtil . bytesToHex ( cName ) ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java b / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java <nl> index 6678bfd . . adbbd01 100644 <nl> - - - a / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java <nl> + + + b / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java <nl> @ @ - 48 , 10 + 48 , 15 @ @ import org . apache . cassandra . utils . NodeId ; <nl> <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> public class StreamingTransferTest extends CleanupHelper <nl> { <nl> + private static final Logger logger = LoggerFactory . getLogger ( StreamingTransferTest . class ) ; <nl> + <nl> public static final InetAddress LOCAL = FBUtilities . getBroadcastAddress ( ) ; <nl> <nl> @ BeforeClass <nl> @ @ - 67 , 6 + 72 , 7 @ @ public class StreamingTransferTest extends CleanupHelper <nl> private List < String > createAndTransfer ( Table table , ColumnFamilyStore cfs , Mutator mutator ) throws Exception <nl> { <nl> / / write a temporary SSTable , and unregister it <nl> + logger . debug ( " Mutating " + cfs . columnFamily ) ; <nl> long timestamp = 1234 ; <nl> for ( int i = 1 ; i < = 3 ; i + + ) <nl> mutator . mutate ( " key " + i , " col " + i , timestamp ) ; <nl> @ @ - 79 , 6 + 85 , 7 @ @ public class StreamingTransferTest extends CleanupHelper <nl> cfs . removeAllSSTables ( ) ; <nl> <nl> / / transfer the first and last key <nl> + logger . debug ( " Transferring " + cfs . columnFamily ) ; <nl> int [ ] offs = new int [ ] { 1 , 3 } ; <nl> IPartitioner p = StorageService . getPartitioner ( ) ; <nl> List < Range > ranges = new ArrayList < Range > ( ) ; <nl> @ @ - 110 , 6 + 117 , 8 @ @ public class StreamingTransferTest extends CleanupHelper <nl> List < String > keys = new ArrayList < String > ( ) ; <nl> for ( int off : offs ) <nl> keys . add ( " key " + off ) ; <nl> + <nl> + logger . debug ( " . . . everything looks good for " + cfs . columnFamily ) ; <nl> return keys ; <nl> } <nl> <nl> @ @ - 129 , 6 + 138 , 7 @ @ public class StreamingTransferTest extends CleanupHelper <nl> cf . addColumn ( column ( col , " v " , timestamp ) ) ; <nl> cf . addColumn ( new Column ( ByteBufferUtil . bytes ( " birthdate " ) , ByteBufferUtil . bytes ( val ) , timestamp ) ) ; <nl> rm . add ( cf ) ; <nl> + logger . debug ( " Applying row to transfer " + rm ) ; <nl> rm . apply ( ) ; <nl> } <nl> } ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java 
 index dd88aca . . 61a4e35 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java 
 @ @ - 352 , 6 + 352 , 18 @ @ public abstract class AlterTypeStatement extends SchemaAlteringStatement 
 this . newName = newName ; 
 } 
 
 + @ Override 
 + public void prepareKeyspace ( ClientState state ) throws InvalidRequestException 
 + { 
 + super . prepareKeyspace ( state ) ; 
 + 
 + if ( ! newName . hasKeyspace ( ) ) 
 + newName . setKeyspace ( state . getKeyspace ( ) ) ; 
 + 
 + if ( newName . getKeyspace ( ) = = null ) 
 + throw new InvalidRequestException ( " You need to be logged in a keyspace or use a fully qualified user type name " ) ; 
 + } 
 + 
 protected UserType makeUpdatedType ( UserType toUpdate ) throws InvalidRequestException 
 { 
 KSMetaData ksm = Schema . instance . getKSMetaData ( newName . getKeyspace ( ) ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 871a69b . . c3f7c62 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 244 , 6 + 244 , 7 @ @ public final class CFMetaData 
 public static CFMetaData newIndexMetadata ( CFMetaData parent , ColumnDefinition info , AbstractType columnComparator ) 
 { 
 return new CFMetaData ( parent . ksName , parent . indexColumnFamilyName ( info ) , ColumnFamilyType . Standard , columnComparator , null ) 
 + . keyValidator ( info . getValidator ( ) ) 
 . keyCacheSize ( 0 . 0 ) 
 . readRepairChance ( 0 . 0 ) 
 . gcGraceSeconds ( parent . gcGraceSeconds ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 157c0a0 . . 047d6a1 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1544 , 9 + 1544 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 * For testing . no effort is made to clear historical memtables , nor for 
 * thread safety 
 * / 
 - void clearUnsafe ( ) 
 + public void clearUnsafe ( ) 
 { 
 - data . init ( ) ; 
 + for ( ColumnFamilyStore cfs : concatWithIndexes ( ) ) 
 + cfs . data . init ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java 
 index 0c37298 . . 9b51703 100644 
 - - - a / src / java / org / apache / cassandra / db / Table . java 
 + + + b / src / java / org / apache / cassandra / db / Table . java 
 @ @ - 514 , 7 + 514 , 9 @ @ public class Table 
 
 public static void indexRow ( DecoratedKey < ? > key , ColumnFamilyStore cfs , SortedSet < ByteBuffer > indexedColumns ) 
 { 
 - logger . debug ( " Indexing row { } " , key ) ; 
 + if ( logger . isDebugEnabled ( ) ) 
 + logger . debug ( " Indexing row { } " , cfs . metadata . getKeyValidator ( ) . getString ( key . key ) ) ; 
 + 
 switchLock . readLock ( ) . lock ( ) ; 
 try 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 index c970a29 . . fa37f3f 100644 
 - - - a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 @ @ - 56 , 19 + 56 , 19 @ @ public class KeysIndex extends PerColumnSecondaryIndex 
 assert baseCfs ! = null & & columnDefs ! = null ; 
 
 ColumnDefinition columnDef = columnDefs . iterator ( ) . next ( ) ; 
 - CFMetaData indexedCfMetadata = CFMetaData . newIndexMetadata ( baseCfs . metadata , columnDef , indexComparator ( ) ) ; 
 + CFMetaData indexedCfMetadata = CFMetaData . newIndexMetadata ( baseCfs . metadata , columnDef , indexComparator ( ) ) ; 
 indexCfs = ColumnFamilyStore . createColumnFamilyStore ( baseCfs . table , 
 - indexedCfMetadata . cfName , 
 - new LocalPartitioner ( columnDef . getValidator ( ) ) , 
 - indexedCfMetadata ) ; 
 + indexedCfMetadata . cfName , 
 + new LocalPartitioner ( columnDef . getValidator ( ) ) , 
 + indexedCfMetadata ) ; 
 } 
 
 public static AbstractType indexComparator ( ) 
 { 
 IPartitioner rowPartitioner = StorageService . getPartitioner ( ) ; 
 return ( rowPartitioner instanceof OrderPreservingPartitioner | | rowPartitioner instanceof ByteOrderedPartitioner ) 
 - ? BytesType . instance 
 - : new LocalByPartionerType ( StorageService . getPartitioner ( ) ) ; 
 + ? BytesType . instance 
 + : new LocalByPartionerType ( StorageService . getPartitioner ( ) ) ; 
 } 
 
 @ Override 
 @ @ - 99 , 7 + 99 , 7 @ @ public class KeysIndex extends PerColumnSecondaryIndex 
 cfi . addColumn ( new Column ( rowKey , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , column . timestamp ( ) ) ) ; 
 } 
 if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " applying index row { } : { } " , valueKey , cfi ) ; 
 + logger . debug ( " applying index row { } in { } " , indexCfs . metadata . getKeyValidator ( ) . getString ( valueKey . key ) , cfi ) ; 
 
 indexCfs . apply ( valueKey , cfi ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java b / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java 
 index 35ab914 . . a6a1179 100644 
 - - - a / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java 
 + + + b / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java 
 @ @ - 149 , 7 + 149 , 7 @ @ public class KeysSearcher extends SecondaryIndexSearcher 
 * should be pretty close to ` start _ key ` . * / 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( String . format ( " Scanning index % s starting with % s " , 
 - expressionString ( primary ) , index . getUnderlyingCfs ( ) . getComparator ( ) . getString ( startKey ) ) ) ; 
 + expressionString ( primary ) , index . getBaseCFStore ( ) . metadata . getKeyValidator ( ) . getString ( startKey ) ) ) ; 
 
 / / We shouldn ' t fetch only 1 row as this provides buggy paging in case the first row doesn ' t satisfy all clauses 
 int count = Math . max ( clause . count , 2 ) ; 
 diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java 
 index 9518f0f . . 111f757 100644 
 - - - a / test / unit / org / apache / cassandra / SchemaLoader . java 
 + + + b / test / unit / org / apache / cassandra / SchemaLoader . java 
 @ @ - 276 , 8 + 276 , 9 @ @ public class SchemaLoader 
 private static CFMetaData indexCFMD ( String ksName , String cfName , final Boolean withIdxType ) throws ConfigurationException 
 { 
 return standardCFMD ( ksName , cfName ) 
 - . columnMetadata ( new HashMap < ByteBuffer , ColumnDefinition > ( ) 
 - { { 
 + . keyValidator ( AsciiType . instance ) 
 + . columnMetadata ( new HashMap < ByteBuffer , ColumnDefinition > ( ) 
 + { { 
 ByteBuffer cName = ByteBuffer . wrap ( " birthdate " . getBytes ( Charsets . UTF _ 8 ) ) ; 
 IndexType keys = withIdxType ? IndexType . KEYS : null ; 
 put ( cName , new ColumnDefinition ( cName , LongType . instance , keys , null , ByteBufferUtil . bytesToHex ( cName ) ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java b / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java 
 index 6678bfd . . adbbd01 100644 
 - - - a / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java 
 + + + b / test / unit / org / apache / cassandra / streaming / StreamingTransferTest . java 
 @ @ - 48 , 10 + 48 , 15 @ @ import org . apache . cassandra . utils . NodeId ; 
 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 public class StreamingTransferTest extends CleanupHelper 
 { 
 + private static final Logger logger = LoggerFactory . getLogger ( StreamingTransferTest . class ) ; 
 + 
 public static final InetAddress LOCAL = FBUtilities . getBroadcastAddress ( ) ; 
 
 @ BeforeClass 
 @ @ - 67 , 6 + 72 , 7 @ @ public class StreamingTransferTest extends CleanupHelper 
 private List < String > createAndTransfer ( Table table , ColumnFamilyStore cfs , Mutator mutator ) throws Exception 
 { 
 / / write a temporary SSTable , and unregister it 
 + logger . debug ( " Mutating " + cfs . columnFamily ) ; 
 long timestamp = 1234 ; 
 for ( int i = 1 ; i < = 3 ; i + + ) 
 mutator . mutate ( " key " + i , " col " + i , timestamp ) ; 
 @ @ - 79 , 6 + 85 , 7 @ @ public class StreamingTransferTest extends CleanupHelper 
 cfs . removeAllSSTables ( ) ; 
 
 / / transfer the first and last key 
 + logger . debug ( " Transferring " + cfs . columnFamily ) ; 
 int [ ] offs = new int [ ] { 1 , 3 } ; 
 IPartitioner p = StorageService . getPartitioner ( ) ; 
 List < Range > ranges = new ArrayList < Range > ( ) ; 
 @ @ - 110 , 6 + 117 , 8 @ @ public class StreamingTransferTest extends CleanupHelper 
 List < String > keys = new ArrayList < String > ( ) ; 
 for ( int off : offs ) 
 keys . add ( " key " + off ) ; 
 + 
 + logger . debug ( " . . . everything looks good for " + cfs . columnFamily ) ; 
 return keys ; 
 } 
 
 @ @ - 129 , 6 + 138 , 7 @ @ public class StreamingTransferTest extends CleanupHelper 
 cf . addColumn ( column ( col , " v " , timestamp ) ) ; 
 cf . addColumn ( new Column ( ByteBufferUtil . bytes ( " birthdate " ) , ByteBufferUtil . bytes ( val ) , timestamp ) ) ; 
 rm . add ( cf ) ; 
 + logger . debug ( " Applying row to transfer " + rm ) ; 
 rm . apply ( ) ; 
 } 
 } ) ;
