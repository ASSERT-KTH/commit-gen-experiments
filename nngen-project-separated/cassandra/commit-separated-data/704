BLEU SCORE: 0.07545383788761362

TEST MSG: Fix hanging stream session
GENERATED MSG: Fix error streaming section more than 2GB

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f734476 . . 232203e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 8 <nl> + * Fix hanging stream session ( CASSANDRA - 10992 ) <nl> * Add byteman support for testing ( CASSANDRA - 12377 ) <nl> * Fix INSERT JSON , fromJson ( ) support of smallint , tinyint types ( CASSANDRA - 12371 ) <nl> * Restore JVM metric export for metric reporters ( CASSANDRA - 12312 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index ede4560 . . 60daee6 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 171 , 6 + 171 , 10 @ @ public class Config <nl> public volatile Integer compaction _ throughput _ mb _ per _ sec = 16 ; <nl> public volatile Integer compaction _ large _ partition _ warning _ threshold _ mb = 100 ; <nl> <nl> + / * * <nl> + * @ deprecated retry support removed on CASSANDRA - 10992 <nl> + * / <nl> + @ Deprecated <nl> public Integer max _ streaming _ retries = 3 ; <nl> <nl> public volatile Integer stream _ throughput _ outbound _ megabits _ per _ sec = 200 ; <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index f1acfc4 . . 6e46725 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 957 , 11 + 957 , 6 @ @ public class DatabaseDescriptor <nl> return conf . cluster _ name ; <nl> } <nl> <nl> - public static int getMaxStreamingRetries ( ) <nl> - { <nl> - return conf . max _ streaming _ retries ; <nl> - } <nl> - <nl> public static int getStoragePort ( ) <nl> { <nl> return Integer . parseInt ( System . getProperty ( " cassandra . storage _ port " , conf . storage _ port . toString ( ) ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamReader . java b / src / java / org / apache / cassandra / streaming / StreamReader . java <nl> index 8789720 . . c96ea22 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamReader . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamReader . java <nl> @ @ - 45 , 6 + 45 , 7 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . BytesReadTracker ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> + import static org . apache . cassandra . utils . Throwables . extractIOExceptionCause ; <nl> <nl> / * * <nl> * StreamReader reads from stream and writes to SSTable . <nl> @ @ - 137 , 11 + 138 , 7 @ @ public class StreamReader <nl> e . addSuppressed ( e2 ) ; <nl> } <nl> } <nl> - drain ( dis , in . getBytesRead ( ) ) ; <nl> - if ( e instanceof IOException ) <nl> - throw ( IOException ) e ; <nl> - else <nl> - throw Throwables . propagate ( e ) ; <nl> + throw Throwables . propagate ( e ) ; <nl> } <nl> } <nl> <nl> @ @ - 155 , 25 + 152 , 6 @ @ public class StreamReader <nl> return SSTableWriter . create ( desc , estimatedKeys , repairedAt , sstableLevel ) ; <nl> } <nl> <nl> - protected void drain ( InputStream dis , long bytesRead ) throws IOException <nl> - { <nl> - long toSkip = totalSize ( ) - bytesRead ; <nl> - <nl> - / / InputStream . skip can return - 1 if dis is inaccessible . <nl> - long skipped = dis . skip ( toSkip ) ; <nl> - if ( skipped = = - 1 ) <nl> - return ; <nl> - <nl> - toSkip = toSkip - skipped ; <nl> - while ( toSkip > 0 ) <nl> - { <nl> - skipped = dis . skip ( toSkip ) ; <nl> - if ( skipped = = - 1 ) <nl> - break ; <nl> - toSkip = toSkip - skipped ; <nl> - } <nl> - } <nl> - <nl> protected long totalSize ( ) <nl> { <nl> long size = 0 ; <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamSession . java b / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> index 294b9c1 . . 0f43f1f 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> @ @ - 105 , 10 + 105 , 8 @ @ import org . apache . cassandra . utils . concurrent . Refs ; <nl> * complete ( received ( ) ) . When all files for the StreamReceiveTask have been received , the sstables <nl> * are added to the CFS ( and 2ndary index are built , StreamReceiveTask . complete ( ) ) and the task <nl> * is marked complete ( taskCompleted ( ) ) <nl> - * ( b ) If during the streaming of a particular file an I / O error occurs on the receiving end of a stream <nl> - * ( FileMessage . deserialize ) , the node will retry the file ( up to DatabaseDescriptor . getMaxStreamingRetries ( ) ) <nl> - * by sending a RetryMessage to the sender . On receiving a RetryMessage , the sender simply issue a new <nl> - * FileMessage for that file . <nl> + * ( b ) If during the streaming of a particular file an error occurs on the receiving end of a stream <nl> + * ( FileMessage . deserialize ) , the node will send a SessionFailedMessage to the sender and close the stream session . <nl> * ( c ) When all transfer and receive tasks for a session are complete , the move to the Completion phase <nl> * ( maybeCompleted ( ) ) . <nl> * <nl> @ @ - 149 , 8 + 147 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber <nl> <nl> public final ConnectionHandler handler ; <nl> <nl> - private int retries ; <nl> - <nl> private AtomicBoolean isAborted = new AtomicBoolean ( false ) ; <nl> private final boolean keepSSTableLevel ; <nl> private final boolean isIncremental ; <nl> @ @ - 481 , 11 + 477 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber <nl> received ( received . cfId , received . sequenceNumber ) ; <nl> break ; <nl> <nl> - case RETRY : <nl> - RetryMessage retry = ( RetryMessage ) message ; <nl> - retry ( retry . cfId , retry . sequenceNumber ) ; <nl> - break ; <nl> - <nl> case COMPLETE : <nl> complete ( ) ; <nl> break ; <nl> @ @ - 610 , 18 + 601 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber <nl> } <nl> <nl> / * * <nl> - * Call back on receiving { @ code StreamMessage . Type . RETRY } message . <nl> - * <nl> - * @ param cfId ColumnFamily ID <nl> - * @ param sequenceNumber Sequence number to indicate which file to stream again <nl> - * / <nl> - public void retry ( UUID cfId , int sequenceNumber ) <nl> - { <nl> - OutgoingFileMessage message = transfers . get ( cfId ) . createMessageForRetry ( sequenceNumber ) ; <nl> - handler . sendMessage ( message ) ; <nl> - } <nl> - <nl> - / * * <nl> * Check if session is completed on receiving { @ code StreamMessage . Type . COMPLETE } message . <nl> * / <nl> public synchronized void complete ( ) <nl> @ @ - 651 , 17 + 630 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber <nl> closeSession ( State . FAILED ) ; <nl> } <nl> <nl> - public void doRetry ( FileMessageHeader header , Throwable e ) <nl> - { <nl> - logger . warn ( " [ Stream # { } ] Retrying for following error " , planId ( ) , e ) ; <nl> - / / retry <nl> - retries + + ; <nl> - if ( retries > DatabaseDescriptor . getMaxStreamingRetries ( ) ) <nl> - onError ( new IOException ( " Too many retries for " + header , e ) ) ; <nl> - else <nl> - handler . sendMessage ( new RetryMessage ( header . cfId , header . sequenceNumber ) ) ; <nl> - } <nl> - <nl> / * * <nl> * @ return Current snapshot of this session info . <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java b / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java <nl> index 489fed9 . . d08ffa9 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java <nl> + + + b / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java <nl> @ @ - 63 , 8 + 63 , 17 @ @ public class CompressedInputStream extends InputStream <nl> / / raw checksum bytes <nl> private final byte [ ] checksumBytes = new byte [ 4 ] ; <nl> <nl> + / * * <nl> + * Indicates there was a problem when reading from source stream . <nl> + * When this is added to the < code > dataBuffer < / code > by the stream Reader , <nl> + * it is expected that the < code > readException < / code > variable is populated <nl> + * with the cause of the error when reading from source stream , so it is <nl> + * thrown to the consumer on subsequent read operation . <nl> + * / <nl> private static final byte [ ] POISON _ PILL = new byte [ 0 ] ; <nl> <nl> + protected volatile IOException readException = null ; <nl> + <nl> private long totalCompressedBytesRead ; <nl> <nl> / * * <nl> @ @ - 84 , 13 + 93 , 19 @ @ public class CompressedInputStream extends InputStream <nl> <nl> public int read ( ) throws IOException <nl> { <nl> + if ( readException ! = null ) <nl> + throw readException ; <nl> + <nl> if ( current > = bufferOffset + buffer . length | | validBufferBytes = = - 1 ) <nl> { <nl> try <nl> { <nl> byte [ ] compressedWithCRC = dataBuffer . take ( ) ; <nl> if ( compressedWithCRC = = POISON _ PILL ) <nl> - throw new EOFException ( " No chunk available " ) ; <nl> + { <nl> + assert readException ! = null ; <nl> + throw readException ; <nl> + } <nl> decompress ( compressedWithCRC ) ; <nl> } <nl> catch ( InterruptedException e ) <nl> @ @ - 138 , 7 + 153 , 7 @ @ public class CompressedInputStream extends InputStream <nl> return totalCompressedBytesRead ; <nl> } <nl> <nl> - static class Reader extends WrappedRunnable <nl> + class Reader extends WrappedRunnable <nl> { <nl> private final InputStream source ; <nl> private final Iterator < CompressionMetadata . Chunk > chunks ; <nl> @ @ - 169 , 6 + 184 , 7 @ @ public class CompressedInputStream extends InputStream <nl> int r = source . read ( compressedWithCRC , bufferRead , readLength - bufferRead ) ; <nl> if ( r < 0 ) <nl> { <nl> + readException = new EOFException ( " No chunk available " ) ; <nl> dataBuffer . put ( POISON _ PILL ) ; <nl> return ; / / throw exception where we consume dataBuffer <nl> } <nl> @ @ - 177 , 6 + 193 , 7 @ @ public class CompressedInputStream extends InputStream <nl> catch ( IOException e ) <nl> { <nl> logger . warn ( " Error while reading compressed input stream . " , e ) ; <nl> + readException = e ; <nl> dataBuffer . put ( POISON _ PILL ) ; <nl> return ; / / throw exception where we consume dataBuffer <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / streaming / compress / CompressedStreamReader . java b / src / java / org / apache / cassandra / streaming / compress / CompressedStreamReader . java <nl> index c684e4f . . fa1022d 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / compress / CompressedStreamReader . java <nl> + + + b / src / java / org / apache / cassandra / streaming / compress / CompressedStreamReader . java <nl> @ @ - 44 , 6 + 44 , 8 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . BytesReadTracker ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> + import static org . apache . cassandra . utils . Throwables . extractIOExceptionCause ; <nl> + <nl> / * * <nl> * StreamReader that reads from streamed compressed SSTable <nl> * / <nl> @ @ - 132 , 11 + 134 , 9 @ @ public class CompressedStreamReader extends StreamReader <nl> e . addSuppressed ( e2 ) ; <nl> } <nl> } <nl> - drain ( cis , in . getBytesRead ( ) ) ; <nl> - if ( e instanceof IOException ) <nl> - throw ( IOException ) e ; <nl> - else <nl> - throw Throwables . propagate ( e ) ; <nl> + if ( extractIOExceptionCause ( e ) . isPresent ( ) ) <nl> + throw e ; <nl> + throw Throwables . propagate ( e ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / streaming / messages / IncomingFileMessage . java b / src / java / org / apache / cassandra / streaming / messages / IncomingFileMessage . java <nl> index 31ab2a8 . . 2870c03 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / messages / IncomingFileMessage . java <nl> + + + b / src / java / org / apache / cassandra / streaming / messages / IncomingFileMessage . java <nl> @ @ - 22 , 6 + 22 , 8 @ @ import java . io . IOException ; <nl> import java . nio . channels . Channels ; <nl> import java . nio . channels . ReadableByteChannel ; <nl> <nl> + import com . google . common . base . Optional ; <nl> + <nl> import org . apache . cassandra . io . sstable . format . SSTableWriter ; <nl> import org . apache . cassandra . io . util . DataOutputStreamPlus ; <nl> import org . apache . cassandra . streaming . StreamReader ; <nl> @ @ - 29 , 6 + 31 , 8 @ @ import org . apache . cassandra . streaming . StreamSession ; <nl> import org . apache . cassandra . streaming . compress . CompressedStreamReader ; <nl> import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> <nl> + import static org . apache . cassandra . utils . Throwables . extractIOExceptionCause ; <nl> + <nl> / * * <nl> * IncomingFileMessage is used to receive the part ( or whole ) of a SSTable data file . <nl> * / <nl> @ @ - 48 , 26 + 52 , 10 @ @ public class IncomingFileMessage extends StreamMessage <nl> { <nl> return new IncomingFileMessage ( reader . read ( in ) , header ) ; <nl> } <nl> - catch ( IOException eof ) <nl> - { <nl> - / / Reading from remote failed ( i . e . reached EOF before reading expected length of data ) . <nl> - / / This can be caused by network / node failure thus we are not retrying <nl> - throw eof ; <nl> - } <nl> catch ( Throwable t ) <nl> { <nl> - / / Throwable can be Runtime error containing IOException . <nl> - / / In that case we don ' t want to retry . <nl> - Throwable cause = t ; <nl> - while ( ( cause = cause . getCause ( ) ) ! = null ) <nl> - { <nl> - if ( cause instanceof IOException ) <nl> - throw ( IOException ) cause ; <nl> - } <nl> JVMStabilityInspector . inspectThrowable ( t ) ; <nl> - / / Otherwise , we can retry <nl> - session . doRetry ( header , t ) ; <nl> - return null ; <nl> + throw t ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / streaming / messages / RetryMessage . java b / src / java / org / apache / cassandra / streaming / messages / RetryMessage . java <nl> index 29e84bf . . 6673aa1 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / messages / RetryMessage . java <nl> + + + b / src / java / org / apache / cassandra / streaming / messages / RetryMessage . java <nl> @ @ - 27 , 6 + 27 , 10 @ @ import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . streaming . StreamSession ; <nl> import org . apache . cassandra . utils . UUIDSerializer ; <nl> <nl> + / * * <nl> + * @ deprecated retry support removed on CASSANDRA - 10992 <nl> + * / <nl> + @ Deprecated <nl> public class RetryMessage extends StreamMessage <nl> { <nl> public static Serializer < RetryMessage > serializer = new Serializer < RetryMessage > ( ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / Throwables . java b / src / java / org / apache / cassandra / utils / Throwables . java <nl> index a895f31 . . 877f388 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / Throwables . java <nl> + + + b / src / java / org / apache / cassandra / utils / Throwables . java <nl> @ @ - 18 , 6 + 18 , 10 @ @ <nl> * / <nl> package org . apache . cassandra . utils ; <nl> <nl> + import java . io . IOException ; <nl> + <nl> + import com . google . common . base . Optional ; <nl> + <nl> public class Throwables <nl> { <nl> <nl> @ @ - 50 , 4 + 54 , 17 @ @ public class Throwables <nl> } <nl> return accumulate ; <nl> } <nl> + <nl> + public static Optional < IOException > extractIOExceptionCause ( Throwable t ) <nl> + { <nl> + if ( t instanceof IOException ) <nl> + return Optional . of ( ( IOException ) t ) ; <nl> + Throwable cause = t ; <nl> + while ( ( cause = cause . getCause ( ) ) ! = null ) <nl> + { <nl> + if ( cause instanceof IOException ) <nl> + return Optional . of ( ( IOException ) cause ) ; <nl> + } <nl> + return Optional . absent ( ) ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / streaming / compress / CompressedInputStreamTest . java b / test / unit / org / apache / cassandra / streaming / compress / CompressedInputStreamTest . java <nl> index 0becd18 . . 87d93fd 100644 <nl> - - - a / test / unit / org / apache / cassandra / streaming / compress / CompressedInputStreamTest . java <nl> + + + b / test / unit / org / apache / cassandra / streaming / compress / CompressedInputStreamTest . java <nl> @ @ - 36 , 6 + 36 , 7 @ @ import org . apache . cassandra . io . sstable . metadata . MetadataCollector ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . fail ; <nl> <nl> / * * <nl> * / <nl> @ @ - 44 , 24 + 45 , 33 @ @ public class CompressedInputStreamTest <nl> @ Test <nl> public void testCompressedRead ( ) throws Exception <nl> { <nl> - testCompressedReadWith ( new long [ ] { 0L } , false ) ; <nl> - testCompressedReadWith ( new long [ ] { 1L } , false ) ; <nl> - testCompressedReadWith ( new long [ ] { 100L } , false ) ; <nl> + testCompressedReadWith ( new long [ ] { 0L } , false , false ) ; <nl> + testCompressedReadWith ( new long [ ] { 1L } , false , false ) ; <nl> + testCompressedReadWith ( new long [ ] { 100L } , false , false ) ; <nl> <nl> - testCompressedReadWith ( new long [ ] { 1L , 122L , 123L , 124L , 456L } , false ) ; <nl> + testCompressedReadWith ( new long [ ] { 1L , 122L , 123L , 124L , 456L } , false , false ) ; <nl> } <nl> <nl> @ Test ( expected = EOFException . class ) <nl> public void testTruncatedRead ( ) throws Exception <nl> { <nl> - testCompressedReadWith ( new long [ ] { 1L , 122L , 123L , 124L , 456L } , true ) ; <nl> + testCompressedReadWith ( new long [ ] { 1L , 122L , 123L , 124L , 456L } , true , false ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Test that CompressedInputStream does not block if there ' s an exception while reading stream <nl> + * / <nl> + @ Test ( timeout = 30000 ) <nl> + public void testException ( ) throws Exception <nl> + { <nl> + testCompressedReadWith ( new long [ ] { 1L , 122L , 123L , 124L , 456L } , false , true ) ; <nl> } <nl> <nl> / * * <nl> * @ param valuesToCheck array of longs of range ( 0 - 999 ) <nl> * @ throws Exception <nl> * / <nl> - private void testCompressedReadWith ( long [ ] valuesToCheck , boolean testTruncate ) throws Exception <nl> + private void testCompressedReadWith ( long [ ] valuesToCheck , boolean testTruncate , boolean testException ) throws Exception <nl> { <nl> assert valuesToCheck ! = null & & valuesToCheck . length > 0 ; <nl> <nl> @ @ - 120 , 6 + 130 , 12 @ @ public class CompressedInputStreamTest <nl> <nl> / / read buffer using CompressedInputStream <nl> CompressionInfo info = new CompressionInfo ( chunks , param ) ; <nl> + <nl> + if ( testException ) <nl> + { <nl> + testException ( sections , info ) ; <nl> + return ; <nl> + } <nl> CompressedInputStream input = new CompressedInputStream ( new ByteArrayInputStream ( toRead ) , info ) ; <nl> <nl> try ( DataInputStream in = new DataInputStream ( input ) ) <nl> @ @ - 132 , 4 + 148 , 25 @ @ public class CompressedInputStreamTest <nl> } <nl> } <nl> } <nl> + <nl> + private static void testException ( List < Pair < Long , Long > > sections , CompressionInfo info ) throws IOException <nl> + { <nl> + CompressedInputStream input = new CompressedInputStream ( new ByteArrayInputStream ( new byte [ 0 ] ) , info ) ; <nl> + <nl> + try ( DataInputStream in = new DataInputStream ( input ) ) <nl> + { <nl> + for ( int i = 0 ; i < sections . size ( ) ; i + + ) <nl> + { <nl> + input . position ( sections . get ( i ) . left ) ; <nl> + try { <nl> + in . readLong ( ) ; <nl> + fail ( " Should have thrown IOException " ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + continue ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f734476 . . 232203e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 8 
 + * Fix hanging stream session ( CASSANDRA - 10992 ) 
 * Add byteman support for testing ( CASSANDRA - 12377 ) 
 * Fix INSERT JSON , fromJson ( ) support of smallint , tinyint types ( CASSANDRA - 12371 ) 
 * Restore JVM metric export for metric reporters ( CASSANDRA - 12312 ) 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index ede4560 . . 60daee6 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 171 , 6 + 171 , 10 @ @ public class Config 
 public volatile Integer compaction _ throughput _ mb _ per _ sec = 16 ; 
 public volatile Integer compaction _ large _ partition _ warning _ threshold _ mb = 100 ; 
 
 + / * * 
 + * @ deprecated retry support removed on CASSANDRA - 10992 
 + * / 
 + @ Deprecated 
 public Integer max _ streaming _ retries = 3 ; 
 
 public volatile Integer stream _ throughput _ outbound _ megabits _ per _ sec = 200 ; 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index f1acfc4 . . 6e46725 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 957 , 11 + 957 , 6 @ @ public class DatabaseDescriptor 
 return conf . cluster _ name ; 
 } 
 
 - public static int getMaxStreamingRetries ( ) 
 - { 
 - return conf . max _ streaming _ retries ; 
 - } 
 - 
 public static int getStoragePort ( ) 
 { 
 return Integer . parseInt ( System . getProperty ( " cassandra . storage _ port " , conf . storage _ port . toString ( ) ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamReader . java b / src / java / org / apache / cassandra / streaming / StreamReader . java 
 index 8789720 . . c96ea22 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamReader . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamReader . java 
 @ @ - 45 , 6 + 45 , 7 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . BytesReadTracker ; 
 import org . apache . cassandra . utils . Pair ; 
 
 + import static org . apache . cassandra . utils . Throwables . extractIOExceptionCause ; 
 
 / * * 
 * StreamReader reads from stream and writes to SSTable . 
 @ @ - 137 , 11 + 138 , 7 @ @ public class StreamReader 
 e . addSuppressed ( e2 ) ; 
 } 
 } 
 - drain ( dis , in . getBytesRead ( ) ) ; 
 - if ( e instanceof IOException ) 
 - throw ( IOException ) e ; 
 - else 
 - throw Throwables . propagate ( e ) ; 
 + throw Throwables . propagate ( e ) ; 
 } 
 } 
 
 @ @ - 155 , 25 + 152 , 6 @ @ public class StreamReader 
 return SSTableWriter . create ( desc , estimatedKeys , repairedAt , sstableLevel ) ; 
 } 
 
 - protected void drain ( InputStream dis , long bytesRead ) throws IOException 
 - { 
 - long toSkip = totalSize ( ) - bytesRead ; 
 - 
 - / / InputStream . skip can return - 1 if dis is inaccessible . 
 - long skipped = dis . skip ( toSkip ) ; 
 - if ( skipped = = - 1 ) 
 - return ; 
 - 
 - toSkip = toSkip - skipped ; 
 - while ( toSkip > 0 ) 
 - { 
 - skipped = dis . skip ( toSkip ) ; 
 - if ( skipped = = - 1 ) 
 - break ; 
 - toSkip = toSkip - skipped ; 
 - } 
 - } 
 - 
 protected long totalSize ( ) 
 { 
 long size = 0 ; 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamSession . java b / src / java / org / apache / cassandra / streaming / StreamSession . java 
 index 294b9c1 . . 0f43f1f 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamSession . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamSession . java 
 @ @ - 105 , 10 + 105 , 8 @ @ import org . apache . cassandra . utils . concurrent . Refs ; 
 * complete ( received ( ) ) . When all files for the StreamReceiveTask have been received , the sstables 
 * are added to the CFS ( and 2ndary index are built , StreamReceiveTask . complete ( ) ) and the task 
 * is marked complete ( taskCompleted ( ) ) 
 - * ( b ) If during the streaming of a particular file an I / O error occurs on the receiving end of a stream 
 - * ( FileMessage . deserialize ) , the node will retry the file ( up to DatabaseDescriptor . getMaxStreamingRetries ( ) ) 
 - * by sending a RetryMessage to the sender . On receiving a RetryMessage , the sender simply issue a new 
 - * FileMessage for that file . 
 + * ( b ) If during the streaming of a particular file an error occurs on the receiving end of a stream 
 + * ( FileMessage . deserialize ) , the node will send a SessionFailedMessage to the sender and close the stream session . 
 * ( c ) When all transfer and receive tasks for a session are complete , the move to the Completion phase 
 * ( maybeCompleted ( ) ) . 
 * 
 @ @ - 149 , 8 + 147 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber 
 
 public final ConnectionHandler handler ; 
 
 - private int retries ; 
 - 
 private AtomicBoolean isAborted = new AtomicBoolean ( false ) ; 
 private final boolean keepSSTableLevel ; 
 private final boolean isIncremental ; 
 @ @ - 481 , 11 + 477 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber 
 received ( received . cfId , received . sequenceNumber ) ; 
 break ; 
 
 - case RETRY : 
 - RetryMessage retry = ( RetryMessage ) message ; 
 - retry ( retry . cfId , retry . sequenceNumber ) ; 
 - break ; 
 - 
 case COMPLETE : 
 complete ( ) ; 
 break ; 
 @ @ - 610 , 18 + 601 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber 
 } 
 
 / * * 
 - * Call back on receiving { @ code StreamMessage . Type . RETRY } message . 
 - * 
 - * @ param cfId ColumnFamily ID 
 - * @ param sequenceNumber Sequence number to indicate which file to stream again 
 - * / 
 - public void retry ( UUID cfId , int sequenceNumber ) 
 - { 
 - OutgoingFileMessage message = transfers . get ( cfId ) . createMessageForRetry ( sequenceNumber ) ; 
 - handler . sendMessage ( message ) ; 
 - } 
 - 
 - / * * 
 * Check if session is completed on receiving { @ code StreamMessage . Type . COMPLETE } message . 
 * / 
 public synchronized void complete ( ) 
 @ @ - 651 , 17 + 630 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber 
 closeSession ( State . FAILED ) ; 
 } 
 
 - public void doRetry ( FileMessageHeader header , Throwable e ) 
 - { 
 - logger . warn ( " [ Stream # { } ] Retrying for following error " , planId ( ) , e ) ; 
 - / / retry 
 - retries + + ; 
 - if ( retries > DatabaseDescriptor . getMaxStreamingRetries ( ) ) 
 - onError ( new IOException ( " Too many retries for " + header , e ) ) ; 
 - else 
 - handler . sendMessage ( new RetryMessage ( header . cfId , header . sequenceNumber ) ) ; 
 - } 
 - 
 / * * 
 * @ return Current snapshot of this session info . 
 * / 
 diff - - git a / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java b / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java 
 index 489fed9 . . d08ffa9 100644 
 - - - a / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java 
 + + + b / src / java / org / apache / cassandra / streaming / compress / CompressedInputStream . java 
 @ @ - 63 , 8 + 63 , 17 @ @ public class CompressedInputStream extends InputStream 
 / / raw checksum bytes 
 private final byte [ ] checksumBytes = new byte [ 4 ] ; 
 
 + / * * 
 + * Indicates there was a problem when reading from source stream . 
 + * When this is added to the < code > dataBuffer < / code > by the stream Reader , 
 + * it is expected that the < code > readException < / code > variable is populated 
 + * with the cause of the error when reading from source stream , so it is 
 + * thrown to the consumer on subsequent read operation . 
 + * / 
 private static final byte [ ] POISON _ PILL = new byte [ 0 ] ; 
 
 + protected volatile IOException readException = null ; 
 + 
 private long totalCompressedBytesRead ; 
 
 / * * 
 @ @ - 84 , 13 + 93 , 19 @ @ public class CompressedInputStream extends InputStream 
 
 public int read ( ) throws IOException 
 { 
 + if ( readException ! = null ) 
 + throw readException ; 
 + 
 if ( current > = bufferOffset + buffer . length | | validBufferBytes = = - 1 ) 
 { 
 try 
 { 
 byte [ ] compressedWithCRC = dataBuffer . take ( ) ; 
 if ( compressedWithCRC = = POISON _ PILL ) 
 - throw new EOFException ( " No chunk available " ) ; 
 + { 
 + assert readException ! = null ; 
 + throw readException ; 
 + } 
 decompress ( compressedWithCRC ) ; 
 } 
 catch ( InterruptedException e ) 
 @ @ - 138 , 7 + 153 , 7 @ @ public class CompressedInputStream extends InputStream 
 return totalCompressedBytesRead ; 
 } 
 
 - static class Reader extends WrappedRunnable 
 + class Reader extends WrappedRunnable 
 { 
 private final InputStream source ; 
 private final Iterator < CompressionMetadata . Chunk > chunks ; 
 @ @ - 169 , 6 + 184 , 7 @ @ public class CompressedInputStream extends InputStream 
 int r = source . read ( compressedWithCRC , bufferRead , readLength - bufferRead ) ; 
 if ( r < 0 ) 
 { 
 + readException = new EOFException ( " No chunk available " ) ; 
 dataBuffer . put ( POISON _ PILL ) ; 
 return ; / / throw exception where we consume dataBuffer 
 } 
 @ @ - 177 , 6 + 193 , 7 @ @ public class CompressedInputStream extends InputStream 
 catch ( IOException e ) 
 { 
 logger . warn ( " Error while reading compressed input stream . " , e ) ; 
 + readException = e ; 
 dataBuffer . put ( POISON _ PILL ) ; 
 return ; / / throw exception where we consume dataBuffer 
 } 
 diff - - git a / src / java / org / apache / cassandra / streaming / compress / CompressedStreamReader . java b / src / java / org / apache / cassandra / streaming / compress / CompressedStreamReader . java 
 index c684e4f . . fa1022d 100644 
 - - - a / src / java / org / apache / cassandra / streaming / compress / CompressedStreamReader . java 
 + + + b / src / java / org / apache / cassandra / streaming / compress / CompressedStreamReader . java 
 @ @ - 44 , 6 + 44 , 8 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . BytesReadTracker ; 
 import org . apache . cassandra . utils . Pair ; 
 
 + import static org . apache . cassandra . utils . Throwables . extractIOExceptionCause ; 
 + 
 / * * 
 * StreamReader that reads from streamed compressed SSTable 
 * / 
 @ @ - 132 , 11 + 134 , 9 @ @ public class CompressedStreamReader extends StreamReader 
 e . addSuppressed ( e2 ) ; 
 } 
 } 
 - drain ( cis , in . getBytesRead ( ) ) ; 
 - if ( e instanceof IOException ) 
 - throw ( IOException ) e ; 
 - else 
 - throw Throwables . propagate ( e ) ; 
 + if ( extractIOExceptionCause ( e ) . isPresent ( ) ) 
 + throw e ; 
 + throw Throwables . propagate ( e ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / streaming / messages / IncomingFileMessage . java b / src / java / org / apache / cassandra / streaming / messages / IncomingFileMessage . java 
 index 31ab2a8 . . 2870c03 100644 
 - - - a / src / java / org / apache / cassandra / streaming / messages / IncomingFileMessage . java 
 + + + b / src / java / org / apache / cassandra / streaming / messages / IncomingFileMessage . java 
 @ @ - 22 , 6 + 22 , 8 @ @ import java . io . IOException ; 
 import java . nio . channels . Channels ; 
 import java . nio . channels . ReadableByteChannel ; 
 
 + import com . google . common . base . Optional ; 
 + 
 import org . apache . cassandra . io . sstable . format . SSTableWriter ; 
 import org . apache . cassandra . io . util . DataOutputStreamPlus ; 
 import org . apache . cassandra . streaming . StreamReader ; 
 @ @ - 29 , 6 + 31 , 8 @ @ import org . apache . cassandra . streaming . StreamSession ; 
 import org . apache . cassandra . streaming . compress . CompressedStreamReader ; 
 import org . apache . cassandra . utils . JVMStabilityInspector ; 
 
 + import static org . apache . cassandra . utils . Throwables . extractIOExceptionCause ; 
 + 
 / * * 
 * IncomingFileMessage is used to receive the part ( or whole ) of a SSTable data file . 
 * / 
 @ @ - 48 , 26 + 52 , 10 @ @ public class IncomingFileMessage extends StreamMessage 
 { 
 return new IncomingFileMessage ( reader . read ( in ) , header ) ; 
 } 
 - catch ( IOException eof ) 
 - { 
 - / / Reading from remote failed ( i . e . reached EOF before reading expected length of data ) . 
 - / / This can be caused by network / node failure thus we are not retrying 
 - throw eof ; 
 - } 
 catch ( Throwable t ) 
 { 
 - / / Throwable can be Runtime error containing IOException . 
 - / / In that case we don ' t want to retry . 
 - Throwable cause = t ; 
 - while ( ( cause = cause . getCause ( ) ) ! = null ) 
 - { 
 - if ( cause instanceof IOException ) 
 - throw ( IOException ) cause ; 
 - } 
 JVMStabilityInspector . inspectThrowable ( t ) ; 
 - / / Otherwise , we can retry 
 - session . doRetry ( header , t ) ; 
 - return null ; 
 + throw t ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / streaming / messages / RetryMessage . java b / src / java / org / apache / cassandra / streaming / messages / RetryMessage . java 
 index 29e84bf . . 6673aa1 100644 
 - - - a / src / java / org / apache / cassandra / streaming / messages / RetryMessage . java 
 + + + b / src / java / org / apache / cassandra / streaming / messages / RetryMessage . java 
 @ @ - 27 , 6 + 27 , 10 @ @ import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . streaming . StreamSession ; 
 import org . apache . cassandra . utils . UUIDSerializer ; 
 
 + / * * 
 + * @ deprecated retry support removed on CASSANDRA - 10992 
 + * / 
 + @ Deprecated 
 public class RetryMessage extends StreamMessage 
 { 
 public static Serializer < RetryMessage > serializer = new Serializer < RetryMessage > ( ) 
 diff - - git a / src / java / org / apache / cassandra / utils / Throwables . java b / src / java / org / apache / cassandra / utils / Throwables . java 
 index a895f31 . . 877f388 100644 
 - - - a / src / java / org / apache / cassandra / utils / Throwables . java 
 + + + b / src / java / org / apache / cassandra / utils / Throwables . java 
 @ @ - 18 , 6 + 18 , 10 @ @ 
 * / 
 package org . apache . cassandra . utils ; 
 
 + import java . io . IOException ; 
 + 
 + import com . google . common . base . Optional ; 
 + 
 public class Throwables 
 { 
 
 @ @ - 50 , 4 + 54 , 17 @ @ public class Throwables 
 } 
 return accumulate ; 
 } 
 + 
 + public static Optional < IOException > extractIOExceptionCause ( Throwable t ) 
 + { 
 + if ( t instanceof IOException ) 
 + return Optional . of ( ( IOException ) t ) ; 
 + Throwable cause = t ; 
 + while ( ( cause = cause . getCause ( ) ) ! = null ) 
 + { 
 + if ( cause instanceof IOException ) 
 + return Optional . of ( ( IOException ) cause ) ; 
 + } 
 + return Optional . absent ( ) ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / streaming / compress / CompressedInputStreamTest . java b / test / unit / org / apache / cassandra / streaming / compress / CompressedInputStreamTest . java 
 index 0becd18 . . 87d93fd 100644 
 - - - a / test / unit / org / apache / cassandra / streaming / compress / CompressedInputStreamTest . java 
 + + + b / test / unit / org / apache / cassandra / streaming / compress / CompressedInputStreamTest . java 
 @ @ - 36 , 6 + 36 , 7 @ @ import org . apache . cassandra . io . sstable . metadata . MetadataCollector ; 
 import org . apache . cassandra . utils . Pair ; 
 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . fail ; 
 
 / * * 
 * / 
 @ @ - 44 , 24 + 45 , 33 @ @ public class CompressedInputStreamTest 
 @ Test 
 public void testCompressedRead ( ) throws Exception 
 { 
 - testCompressedReadWith ( new long [ ] { 0L } , false ) ; 
 - testCompressedReadWith ( new long [ ] { 1L } , false ) ; 
 - testCompressedReadWith ( new long [ ] { 100L } , false ) ; 
 + testCompressedReadWith ( new long [ ] { 0L } , false , false ) ; 
 + testCompressedReadWith ( new long [ ] { 1L } , false , false ) ; 
 + testCompressedReadWith ( new long [ ] { 100L } , false , false ) ; 
 
 - testCompressedReadWith ( new long [ ] { 1L , 122L , 123L , 124L , 456L } , false ) ; 
 + testCompressedReadWith ( new long [ ] { 1L , 122L , 123L , 124L , 456L } , false , false ) ; 
 } 
 
 @ Test ( expected = EOFException . class ) 
 public void testTruncatedRead ( ) throws Exception 
 { 
 - testCompressedReadWith ( new long [ ] { 1L , 122L , 123L , 124L , 456L } , true ) ; 
 + testCompressedReadWith ( new long [ ] { 1L , 122L , 123L , 124L , 456L } , true , false ) ; 
 + } 
 + 
 + / * * 
 + * Test that CompressedInputStream does not block if there ' s an exception while reading stream 
 + * / 
 + @ Test ( timeout = 30000 ) 
 + public void testException ( ) throws Exception 
 + { 
 + testCompressedReadWith ( new long [ ] { 1L , 122L , 123L , 124L , 456L } , false , true ) ; 
 } 
 
 / * * 
 * @ param valuesToCheck array of longs of range ( 0 - 999 ) 
 * @ throws Exception 
 * / 
 - private void testCompressedReadWith ( long [ ] valuesToCheck , boolean testTruncate ) throws Exception 
 + private void testCompressedReadWith ( long [ ] valuesToCheck , boolean testTruncate , boolean testException ) throws Exception 
 { 
 assert valuesToCheck ! = null & & valuesToCheck . length > 0 ; 
 
 @ @ - 120 , 6 + 130 , 12 @ @ public class CompressedInputStreamTest 
 
 / / read buffer using CompressedInputStream 
 CompressionInfo info = new CompressionInfo ( chunks , param ) ; 
 + 
 + if ( testException ) 
 + { 
 + testException ( sections , info ) ; 
 + return ; 
 + } 
 CompressedInputStream input = new CompressedInputStream ( new ByteArrayInputStream ( toRead ) , info ) ; 
 
 try ( DataInputStream in = new DataInputStream ( input ) ) 
 @ @ - 132 , 4 + 148 , 25 @ @ public class CompressedInputStreamTest 
 } 
 } 
 } 
 + 
 + private static void testException ( List < Pair < Long , Long > > sections , CompressionInfo info ) throws IOException 
 + { 
 + CompressedInputStream input = new CompressedInputStream ( new ByteArrayInputStream ( new byte [ 0 ] ) , info ) ; 
 + 
 + try ( DataInputStream in = new DataInputStream ( input ) ) 
 + { 
 + for ( int i = 0 ; i < sections . size ( ) ; i + + ) 
 + { 
 + input . position ( sections . get ( i ) . left ) ; 
 + try { 
 + in . readLong ( ) ; 
 + fail ( " Should have thrown IOException " ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + continue ; 
 + } 
 + } 
 + } 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
