BLEU SCORE: 0.041961149062965476

TEST MSG: Add missing CHANGES . txt entry for CASSANDRA - 6933
GENERATED MSG: merge from 0 . 4

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9bc8cf9 . . 667cb74 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> 3 . 0 <nl> * Remove CQL2 ( CASSANDRA - 5918 ) <nl> - * add Thrift get _ multi _ slice call ( CASSANDRA - 6757 ) <nl> + * Add Thrift get _ multi _ slice call ( CASSANDRA - 6757 ) <nl> + * Optimize fetching multiple cells by name ( CASSANDRA - 6933 ) <nl> <nl> <nl> 2 . 1 . 0 - beta2
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / net / TcpConnectionManager . java b / src / java / org / apache / cassandra / net / TcpConnectionManager . java <nl> index b8fa909 . . f88a8a9 100644 <nl> - - - a / src / java / org / apache / cassandra / net / TcpConnectionManager . java <nl> + + + b / src / java / org / apache / cassandra / net / TcpConnectionManager . java <nl> @ @ - 20 , 7 + 20 , 6 @ @ package org . apache . cassandra . net ; <nl> <nl> import java . io . IOException ; <nl> import java . util . * ; <nl> - import java . util . concurrent . * ; <nl> import java . util . concurrent . locks . * ; <nl> <nl> import org . apache . log4j . Logger ; <nl> @ @ - 36 , 7 + 35 , 7 @ @ class TcpConnectionManager <nl> private int maxSize _ ; <nl> private long lastTimeUsed _ ; <nl> private boolean isShut _ ; <nl> - <nl> + <nl> private int inUse _ ; <nl> <nl> TcpConnectionManager ( int initialSize , int growthFactor , int maxSize , EndPoint localEp , EndPoint remoteEp ) <nl> @ @ - 45 , 34 + 44 , 34 @ @ class TcpConnectionManager <nl> growthFactor _ = growthFactor ; <nl> maxSize _ = maxSize ; <nl> localEp _ = localEp ; <nl> - remoteEp _ = remoteEp ; <nl> - isShut _ = false ; <nl> - lastTimeUsed _ = System . currentTimeMillis ( ) ; <nl> - allConnections _ = new Vector < TcpConnection > ( ) ; <nl> + remoteEp _ = remoteEp ; <nl> + isShut _ = false ; <nl> + lastTimeUsed _ = System . currentTimeMillis ( ) ; <nl> + allConnections _ = new ArrayList < TcpConnection > ( ) ; <nl> } <nl> - <nl> + <nl> TcpConnection getConnection ( ) throws IOException <nl> { <nl> lock _ . lock ( ) ; <nl> try <nl> { <nl> - if ( allConnections _ . isEmpty ( ) ) <nl> - { <nl> + if ( allConnections _ . isEmpty ( ) ) <nl> + { <nl> TcpConnection conn = new TcpConnection ( this , localEp _ , remoteEp _ ) ; <nl> addToPool ( conn ) ; <nl> conn . inUse _ = true ; <nl> incUsed ( ) ; <nl> return conn ; <nl> } <nl> - <nl> + <nl> TcpConnection least = getLeastLoaded ( ) ; <nl> - <nl> + <nl> if ( ( least ! = null & & least . pending ( ) = = 0 ) | | allConnections _ . size ( ) = = maxSize _ ) { <nl> least . inUse _ = true ; <nl> incUsed ( ) ; <nl> return least ; <nl> } <nl> - <nl> + <nl> TcpConnection connection = new TcpConnection ( this , localEp _ , remoteEp _ ) ; <nl> if ( connection ! = null & & ! contains ( connection ) ) <nl> { <nl> @ @ - 84 , 7 + 83 , 7 @ @ class TcpConnectionManager <nl> else <nl> { <nl> if ( connection ! = null ) <nl> - { <nl> + { <nl> connection . closeSocket ( ) ; <nl> } <nl> return getLeastLoaded ( ) ; <nl> @ @ - 95 , 9 + 94 , 9 @ @ class TcpConnectionManager <nl> lock _ . unlock ( ) ; <nl> } <nl> } <nl> - <nl> - protected TcpConnection getLeastLoaded ( ) <nl> - { <nl> + <nl> + protected TcpConnection getLeastLoaded ( ) <nl> + { <nl> TcpConnection connection = null ; <nl> lock _ . lock ( ) ; <nl> try <nl> @ @ - 111 , 42 + 110 , 49 @ @ class TcpConnectionManager <nl> } <nl> return connection ; <nl> } <nl> - <nl> + <nl> void removeConnection ( TcpConnection connection ) <nl> { <nl> - allConnections _ . remove ( connection ) ; <nl> + lock _ . lock ( ) ; <nl> + try <nl> + { <nl> + allConnections _ . remove ( connection ) ; <nl> + } <nl> + finally <nl> + { <nl> + lock _ . unlock ( ) ; <nl> + } <nl> } <nl> - <nl> + <nl> void incUsed ( ) <nl> { <nl> inUse _ + + ; <nl> } <nl> - <nl> + <nl> void decUsed ( ) <nl> - { <nl> + { <nl> inUse _ - - ; <nl> } <nl> - <nl> + <nl> int getConnectionsInUse ( ) <nl> { <nl> return inUse _ ; <nl> } <nl> <nl> void addToPool ( TcpConnection connection ) <nl> - { <nl> - <nl> - if ( contains ( connection ) ) <nl> - return ; <nl> - <nl> + { <nl> lock _ . lock ( ) ; <nl> try <nl> { <nl> + if ( contains ( connection ) ) <nl> + return ; <nl> + <nl> if ( allConnections _ . size ( ) < maxSize _ ) <nl> - { <nl> - allConnections _ . add ( connection ) ; <nl> + { <nl> + allConnections _ . add ( connection ) ; <nl> } <nl> else <nl> - { <nl> + { <nl> connection . closeSocket ( ) ; <nl> } <nl> } <nl> @ @ - 155 , 15 + 161 , 15 @ @ class TcpConnectionManager <nl> lock _ . unlock ( ) ; <nl> } <nl> } <nl> - <nl> + <nl> void shutdown ( ) <nl> - { <nl> + { <nl> lock _ . lock ( ) ; <nl> try <nl> { <nl> while ( allConnections _ . size ( ) > 0 ) <nl> { <nl> - TcpConnection connection = allConnections _ . remove ( 0 ) ; <nl> + TcpConnection connection = allConnections _ . remove ( 0 ) ; <nl> connection . closeSocket ( ) ; <nl> } <nl> } <nl> @ @ - 176 , 19 + 182 , 27 @ @ class TcpConnectionManager <nl> <nl> int getPoolSize ( ) <nl> { <nl> - return allConnections _ . size ( ) ; <nl> + lock _ . lock ( ) ; <nl> + try <nl> + { <nl> + return allConnections _ . size ( ) ; <nl> + } <nl> + finally <nl> + { <nl> + lock _ . unlock ( ) ; <nl> + } <nl> } <nl> <nl> EndPoint getLocalEndPoint ( ) <nl> { <nl> return localEp _ ; <nl> } <nl> - <nl> + <nl> EndPoint getRemoteEndPoint ( ) <nl> { <nl> return remoteEp _ ; <nl> } <nl> - <nl> + <nl> int getPendingWrites ( ) <nl> { <nl> int total = 0 ; <nl> @ @ - 206 , 13 + 220 , 17 @ @ class TcpConnectionManager <nl> } <nl> return total ; <nl> } <nl> - <nl> + <nl> boolean contains ( TcpConnection connection ) <nl> { <nl> - return allConnections _ . contains ( connection ) ; <nl> - } <nl> - List < TcpConnection > getConnections ( ) <nl> - { <nl> - return allConnections _ ; <nl> + lock _ . lock ( ) ; <nl> + try <nl> + { <nl> + return allConnections _ . contains ( connection ) ; <nl> + } <nl> + finally <nl> + { <nl> + lock _ . unlock ( ) ; <nl> + } <nl> } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9bc8cf9 . . 667cb74 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 3 . 0 
 * Remove CQL2 ( CASSANDRA - 5918 ) 
 - * add Thrift get _ multi _ slice call ( CASSANDRA - 6757 ) 
 + * Add Thrift get _ multi _ slice call ( CASSANDRA - 6757 ) 
 + * Optimize fetching multiple cells by name ( CASSANDRA - 6933 ) 
 
 
 2 . 1 . 0 - beta2

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / net / TcpConnectionManager . java b / src / java / org / apache / cassandra / net / TcpConnectionManager . java 
 index b8fa909 . . f88a8a9 100644 
 - - - a / src / java / org / apache / cassandra / net / TcpConnectionManager . java 
 + + + b / src / java / org / apache / cassandra / net / TcpConnectionManager . java 
 @ @ - 20 , 7 + 20 , 6 @ @ package org . apache . cassandra . net ; 
 
 import java . io . IOException ; 
 import java . util . * ; 
 - import java . util . concurrent . * ; 
 import java . util . concurrent . locks . * ; 
 
 import org . apache . log4j . Logger ; 
 @ @ - 36 , 7 + 35 , 7 @ @ class TcpConnectionManager 
 private int maxSize _ ; 
 private long lastTimeUsed _ ; 
 private boolean isShut _ ; 
 - 
 + 
 private int inUse _ ; 
 
 TcpConnectionManager ( int initialSize , int growthFactor , int maxSize , EndPoint localEp , EndPoint remoteEp ) 
 @ @ - 45 , 34 + 44 , 34 @ @ class TcpConnectionManager 
 growthFactor _ = growthFactor ; 
 maxSize _ = maxSize ; 
 localEp _ = localEp ; 
 - remoteEp _ = remoteEp ; 
 - isShut _ = false ; 
 - lastTimeUsed _ = System . currentTimeMillis ( ) ; 
 - allConnections _ = new Vector < TcpConnection > ( ) ; 
 + remoteEp _ = remoteEp ; 
 + isShut _ = false ; 
 + lastTimeUsed _ = System . currentTimeMillis ( ) ; 
 + allConnections _ = new ArrayList < TcpConnection > ( ) ; 
 } 
 - 
 + 
 TcpConnection getConnection ( ) throws IOException 
 { 
 lock _ . lock ( ) ; 
 try 
 { 
 - if ( allConnections _ . isEmpty ( ) ) 
 - { 
 + if ( allConnections _ . isEmpty ( ) ) 
 + { 
 TcpConnection conn = new TcpConnection ( this , localEp _ , remoteEp _ ) ; 
 addToPool ( conn ) ; 
 conn . inUse _ = true ; 
 incUsed ( ) ; 
 return conn ; 
 } 
 - 
 + 
 TcpConnection least = getLeastLoaded ( ) ; 
 - 
 + 
 if ( ( least ! = null & & least . pending ( ) = = 0 ) | | allConnections _ . size ( ) = = maxSize _ ) { 
 least . inUse _ = true ; 
 incUsed ( ) ; 
 return least ; 
 } 
 - 
 + 
 TcpConnection connection = new TcpConnection ( this , localEp _ , remoteEp _ ) ; 
 if ( connection ! = null & & ! contains ( connection ) ) 
 { 
 @ @ - 84 , 7 + 83 , 7 @ @ class TcpConnectionManager 
 else 
 { 
 if ( connection ! = null ) 
 - { 
 + { 
 connection . closeSocket ( ) ; 
 } 
 return getLeastLoaded ( ) ; 
 @ @ - 95 , 9 + 94 , 9 @ @ class TcpConnectionManager 
 lock _ . unlock ( ) ; 
 } 
 } 
 - 
 - protected TcpConnection getLeastLoaded ( ) 
 - { 
 + 
 + protected TcpConnection getLeastLoaded ( ) 
 + { 
 TcpConnection connection = null ; 
 lock _ . lock ( ) ; 
 try 
 @ @ - 111 , 42 + 110 , 49 @ @ class TcpConnectionManager 
 } 
 return connection ; 
 } 
 - 
 + 
 void removeConnection ( TcpConnection connection ) 
 { 
 - allConnections _ . remove ( connection ) ; 
 + lock _ . lock ( ) ; 
 + try 
 + { 
 + allConnections _ . remove ( connection ) ; 
 + } 
 + finally 
 + { 
 + lock _ . unlock ( ) ; 
 + } 
 } 
 - 
 + 
 void incUsed ( ) 
 { 
 inUse _ + + ; 
 } 
 - 
 + 
 void decUsed ( ) 
 - { 
 + { 
 inUse _ - - ; 
 } 
 - 
 + 
 int getConnectionsInUse ( ) 
 { 
 return inUse _ ; 
 } 
 
 void addToPool ( TcpConnection connection ) 
 - { 
 - 
 - if ( contains ( connection ) ) 
 - return ; 
 - 
 + { 
 lock _ . lock ( ) ; 
 try 
 { 
 + if ( contains ( connection ) ) 
 + return ; 
 + 
 if ( allConnections _ . size ( ) < maxSize _ ) 
 - { 
 - allConnections _ . add ( connection ) ; 
 + { 
 + allConnections _ . add ( connection ) ; 
 } 
 else 
 - { 
 + { 
 connection . closeSocket ( ) ; 
 } 
 } 
 @ @ - 155 , 15 + 161 , 15 @ @ class TcpConnectionManager 
 lock _ . unlock ( ) ; 
 } 
 } 
 - 
 + 
 void shutdown ( ) 
 - { 
 + { 
 lock _ . lock ( ) ; 
 try 
 { 
 while ( allConnections _ . size ( ) > 0 ) 
 { 
 - TcpConnection connection = allConnections _ . remove ( 0 ) ; 
 + TcpConnection connection = allConnections _ . remove ( 0 ) ; 
 connection . closeSocket ( ) ; 
 } 
 } 
 @ @ - 176 , 19 + 182 , 27 @ @ class TcpConnectionManager 
 
 int getPoolSize ( ) 
 { 
 - return allConnections _ . size ( ) ; 
 + lock _ . lock ( ) ; 
 + try 
 + { 
 + return allConnections _ . size ( ) ; 
 + } 
 + finally 
 + { 
 + lock _ . unlock ( ) ; 
 + } 
 } 
 
 EndPoint getLocalEndPoint ( ) 
 { 
 return localEp _ ; 
 } 
 - 
 + 
 EndPoint getRemoteEndPoint ( ) 
 { 
 return remoteEp _ ; 
 } 
 - 
 + 
 int getPendingWrites ( ) 
 { 
 int total = 0 ; 
 @ @ - 206 , 13 + 220 , 17 @ @ class TcpConnectionManager 
 } 
 return total ; 
 } 
 - 
 + 
 boolean contains ( TcpConnection connection ) 
 { 
 - return allConnections _ . contains ( connection ) ; 
 - } 
 - List < TcpConnection > getConnections ( ) 
 - { 
 - return allConnections _ ; 
 + lock _ . lock ( ) ; 
 + try 
 + { 
 + return allConnections _ . contains ( connection ) ; 
 + } 
 + finally 
 + { 
 + lock _ . unlock ( ) ; 
 + } 
 } 
 }
