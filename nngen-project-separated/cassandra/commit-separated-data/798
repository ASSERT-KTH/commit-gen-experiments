BLEU SCORE: 0.04767707020457096

TEST MSG: backport fix for flaky testExportColumnsWithMetadata from 2 . 2
GENERATED MSG: sstable2json escapes quotes .

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / tools / SSTableExportTest . java b / test / unit / org / apache / cassandra / tools / SSTableExportTest . java <nl> index c918d6a . . 16f4bda 100644 <nl> - - - a / test / unit / org / apache / cassandra / tools / SSTableExportTest . java <nl> + + + b / test / unit / org / apache / cassandra / tools / SSTableExportTest . java <nl> @ @ - 296 , 10 + 296 , 9 @ @ public class SSTableExportTest extends SchemaLoader <nl> JSONObject serializedDeletionInfo = ( JSONObject ) meta . get ( " deletionInfo " ) ; <nl> assertNotNull ( " expecing deletionInfo to be present " , serializedDeletionInfo ) ; <nl> <nl> - assertEquals ( <nl> - " unexpected serialization format for topLevelDeletion " , <nl> - " { \ " markedForDeleteAt \ " : 0 , \ " localDeletionTime \ " : 0 } " , <nl> - serializedDeletionInfo . toJSONString ( ) ) ; <nl> + assertEquals ( " unexpected serialization format for topLevelDeletion " , <nl> + JSONValue . parse ( " { \ " markedForDeleteAt \ " : 0 , \ " localDeletionTime \ " : 0 } " ) , <nl> + serializedDeletionInfo ) ; <nl> <nl> / / check the colums are what we put in <nl> JSONArray cols = ( JSONArray ) row . get ( " cells " ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index fe3280f . . a2e96e7 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 1731 , 7 + 1731 , 7 @ @ public class CliClient <nl> sessionState . out . printf ( " Compaction Strategy : % s % n " , cf _ def . compaction _ strategy ) ; <nl> if ( ! cf _ def . compaction _ strategy _ options . isEmpty ( ) ) <nl> { <nl> - sessionState . out . printf ( " Compaction Strategy Options : % s % n " , cf _ def . compaction _ strategy ) ; <nl> + sessionState . out . println ( " Compaction Strategy Options : " ) ; <nl> for ( Map . Entry < String , String > e : cf _ def . compaction _ strategy _ options . entrySet ( ) ) <nl> sessionState . out . printf ( " % s : % s % n " , e . getKey ( ) , e . getValue ( ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 0343e2f . . cca7cd7 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 705 , 6 + 705 , 19 @ @ public final class CFMetaData <nl> if ( cf _ def . isSetRow _ cache _ provider ( ) ) { newCFMD . rowCacheProvider ( FBUtilities . newCacheProvider ( cf _ def . row _ cache _ provider ) ) ; } <nl> if ( cf _ def . isSetKey _ alias ( ) ) { newCFMD . keyAlias ( cf _ def . key _ alias ) ; } <nl> if ( cf _ def . isSetKey _ validation _ class ( ) ) { newCFMD . keyValidator ( TypeParser . parse ( cf _ def . key _ validation _ class ) ) ; } <nl> + if ( cf _ def . isSetCompaction _ strategy ( ) ) <nl> + { <nl> + try <nl> + { <nl> + newCFMD . compactionStrategyClass ( ( Class < ? extends AbstractCompactionStrategy > ) Class . forName ( cf _ def . compaction _ strategy ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new ConfigurationException ( " Unable to set Compaction Strategy Class of " + cf _ def . compaction _ strategy , e ) ; <nl> + } <nl> + } <nl> + if ( cf _ def . isSetCompaction _ strategy _ options ( ) ) <nl> + newCFMD . compactionStrategyOptions ( new HashMap < String , String > ( cf _ def . compaction _ strategy _ options ) ) ; <nl> <nl> return newCFMD . comment ( cf _ def . comment ) <nl> . rowCacheSize ( cf _ def . row _ cache _ size ) <nl> @ @ - 817 , 6 + 830 , 7 @ @ public final class CFMetaData <nl> <nl> if ( null ! = cf _ def . compaction _ strategy _ options ) <nl> { <nl> + compactionStrategyOptions = new HashMap < String , String > ( ) ; <nl> for ( Map . Entry < CharSequence , CharSequence > e : cf _ def . compaction _ strategy _ options . entrySet ( ) ) <nl> compactionStrategyOptions . put ( e . getKey ( ) . toString ( ) , e . getValue ( ) . toString ( ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 9a82ee7 . . feee8cb 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 195 , 7 + 195 , 9 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> rowCacheSaveInSeconds = new DefaultInteger ( metadata . getRowCacheSavePeriodInSeconds ( ) ) ; <nl> if ( ! keyCacheSaveInSeconds . isModified ( ) ) <nl> keyCacheSaveInSeconds = new DefaultInteger ( metadata . getKeyCacheSavePeriodInSeconds ( ) ) ; <nl> - <nl> + <nl> + compactionStrategy = metadata . createCompactionStrategyInstance ( this ) ; <nl> + <nl> updateCacheSizes ( ) ; <nl> scheduleCacheSaving ( rowCacheSaveInSeconds . value ( ) , keyCacheSaveInSeconds . value ( ) ) ; <nl>

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / tools / SSTableExportTest . java b / test / unit / org / apache / cassandra / tools / SSTableExportTest . java 
 index c918d6a . . 16f4bda 100644 
 - - - a / test / unit / org / apache / cassandra / tools / SSTableExportTest . java 
 + + + b / test / unit / org / apache / cassandra / tools / SSTableExportTest . java 
 @ @ - 296 , 10 + 296 , 9 @ @ public class SSTableExportTest extends SchemaLoader 
 JSONObject serializedDeletionInfo = ( JSONObject ) meta . get ( " deletionInfo " ) ; 
 assertNotNull ( " expecing deletionInfo to be present " , serializedDeletionInfo ) ; 
 
 - assertEquals ( 
 - " unexpected serialization format for topLevelDeletion " , 
 - " { \ " markedForDeleteAt \ " : 0 , \ " localDeletionTime \ " : 0 } " , 
 - serializedDeletionInfo . toJSONString ( ) ) ; 
 + assertEquals ( " unexpected serialization format for topLevelDeletion " , 
 + JSONValue . parse ( " { \ " markedForDeleteAt \ " : 0 , \ " localDeletionTime \ " : 0 } " ) , 
 + serializedDeletionInfo ) ; 
 
 / / check the colums are what we put in 
 JSONArray cols = ( JSONArray ) row . get ( " cells " ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index fe3280f . . a2e96e7 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 1731 , 7 + 1731 , 7 @ @ public class CliClient 
 sessionState . out . printf ( " Compaction Strategy : % s % n " , cf _ def . compaction _ strategy ) ; 
 if ( ! cf _ def . compaction _ strategy _ options . isEmpty ( ) ) 
 { 
 - sessionState . out . printf ( " Compaction Strategy Options : % s % n " , cf _ def . compaction _ strategy ) ; 
 + sessionState . out . println ( " Compaction Strategy Options : " ) ; 
 for ( Map . Entry < String , String > e : cf _ def . compaction _ strategy _ options . entrySet ( ) ) 
 sessionState . out . printf ( " % s : % s % n " , e . getKey ( ) , e . getValue ( ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 0343e2f . . cca7cd7 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 705 , 6 + 705 , 19 @ @ public final class CFMetaData 
 if ( cf _ def . isSetRow _ cache _ provider ( ) ) { newCFMD . rowCacheProvider ( FBUtilities . newCacheProvider ( cf _ def . row _ cache _ provider ) ) ; } 
 if ( cf _ def . isSetKey _ alias ( ) ) { newCFMD . keyAlias ( cf _ def . key _ alias ) ; } 
 if ( cf _ def . isSetKey _ validation _ class ( ) ) { newCFMD . keyValidator ( TypeParser . parse ( cf _ def . key _ validation _ class ) ) ; } 
 + if ( cf _ def . isSetCompaction _ strategy ( ) ) 
 + { 
 + try 
 + { 
 + newCFMD . compactionStrategyClass ( ( Class < ? extends AbstractCompactionStrategy > ) Class . forName ( cf _ def . compaction _ strategy ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new ConfigurationException ( " Unable to set Compaction Strategy Class of " + cf _ def . compaction _ strategy , e ) ; 
 + } 
 + } 
 + if ( cf _ def . isSetCompaction _ strategy _ options ( ) ) 
 + newCFMD . compactionStrategyOptions ( new HashMap < String , String > ( cf _ def . compaction _ strategy _ options ) ) ; 
 
 return newCFMD . comment ( cf _ def . comment ) 
 . rowCacheSize ( cf _ def . row _ cache _ size ) 
 @ @ - 817 , 6 + 830 , 7 @ @ public final class CFMetaData 
 
 if ( null ! = cf _ def . compaction _ strategy _ options ) 
 { 
 + compactionStrategyOptions = new HashMap < String , String > ( ) ; 
 for ( Map . Entry < CharSequence , CharSequence > e : cf _ def . compaction _ strategy _ options . entrySet ( ) ) 
 compactionStrategyOptions . put ( e . getKey ( ) . toString ( ) , e . getValue ( ) . toString ( ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 9a82ee7 . . feee8cb 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 195 , 7 + 195 , 9 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 rowCacheSaveInSeconds = new DefaultInteger ( metadata . getRowCacheSavePeriodInSeconds ( ) ) ; 
 if ( ! keyCacheSaveInSeconds . isModified ( ) ) 
 keyCacheSaveInSeconds = new DefaultInteger ( metadata . getKeyCacheSavePeriodInSeconds ( ) ) ; 
 - 
 + 
 + compactionStrategy = metadata . createCompactionStrategyInstance ( this ) ; 
 + 
 updateCacheSizes ( ) ; 
 scheduleCacheSaving ( rowCacheSaveInSeconds . value ( ) , keyCacheSaveInSeconds . value ( ) ) ; 

