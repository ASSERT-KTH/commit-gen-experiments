BLEU SCORE: 2.765421850739168E-4

TEST MSG: fix build
GENERATED MSG: add test for BRAF EOFException . patch by mdennis ; reviewed by jbellis for CASSANDRA - 1200

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> index cfabf62 . . 7dbbdc2 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> @ @ - 530 , 6 + 530 , 8 @ @ public class BufferedRandomAccessFileTest <nl> { <nl> / / see https : / / issues . apache . org / jira / browse / CASSANDRA - 7756 <nl> <nl> + final FileCacheService . CacheKey cacheKey = new FileCacheService . CacheKey ( ) ; <nl> + <nl> final int THREAD _ COUNT = 40 ; <nl> ExecutorService executorService = Executors . newFixedThreadPool ( THREAD _ COUNT ) ; <nl> <nl> @ @ - 550 , 8 + 552 , 8 @ @ public class BufferedRandomAccessFileTest <nl> RandomAccessReader r2 = RandomAccessReader . open ( w2 ) ; <nl> <nl> <nl> - FileCacheService . instance . put ( r1 ) ; <nl> - FileCacheService . instance . put ( r2 ) ; <nl> + FileCacheService . instance . put ( cacheKey , r1 ) ; <nl> + FileCacheService . instance . put ( cacheKey , r2 ) ; <nl> <nl> final CountDownLatch finished = new CountDownLatch ( THREAD _ COUNT ) ; <nl> final AtomicBoolean hadError = new AtomicBoolean ( false ) ;
NEAREST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> index c98ee8b . . d4f11e3 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> @ @ - 21 , 13 + 21 , 16 @ @ package org . apache . cassandra . io . util ; <nl> * / <nl> <nl> <nl> - import static org . junit . Assert . * ; <nl> - <nl> + import java . io . EOFException ; <nl> import java . io . File ; <nl> + import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> + import java . util . Arrays ; <nl> <nl> import org . junit . Test ; <nl> <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> public class BufferedRandomAccessFileTest <nl> { <nl> <nl> @ @ - 66 , 4 + 69 , 45 @ @ public class BufferedRandomAccessFileTest <nl> r . close ( ) ; <nl> } <nl> <nl> + protected void expectException ( int size , int offset , int len , BufferedRandomAccessFile braf ) <nl> + { <nl> + boolean threw = false ; <nl> + try <nl> + { <nl> + braf . readFully ( new byte [ size ] , offset , len ) ; <nl> + } <nl> + catch ( Throwable t ) <nl> + { <nl> + assert t . getClass ( ) . equals ( EOFException . class ) : t . getClass ( ) . getName ( ) + " is not " + EOFException . class . getName ( ) ; <nl> + threw = true ; <nl> + } <nl> + assert threw : EOFException . class . getName ( ) + " not received " ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testEOF ( ) throws Exception <nl> + { <nl> + for ( String mode : Arrays . asList ( " r " , " rw " ) ) / / read , read + write <nl> + { <nl> + for ( int buf : Arrays . asList ( 8 , 16 , 32 , 0 ) ) / / smaller , equal , bigger , zero <nl> + { <nl> + for ( int off : Arrays . asList ( 0 , 8 ) ) <nl> + { <nl> + expectException ( 32 , off , 17 , new BufferedRandomAccessFile ( writeTemporaryFile ( new byte [ 16 ] ) , mode , buf ) ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + protected File writeTemporaryFile ( byte [ ] data ) throws Exception <nl> + { <nl> + File f = File . createTempFile ( " BRAFTestFile " , null ) ; <nl> + f . deleteOnExit ( ) ; <nl> + FileOutputStream fout = new FileOutputStream ( f ) ; <nl> + fout . write ( data ) ; <nl> + fout . getFD ( ) . sync ( ) ; <nl> + fout . close ( ) ; <nl> + return f ; <nl> + } <nl> + <nl> }

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 index cfabf62 . . 7dbbdc2 100644 
 - - - a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 + + + b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 @ @ - 530 , 6 + 530 , 8 @ @ public class BufferedRandomAccessFileTest 
 { 
 / / see https : / / issues . apache . org / jira / browse / CASSANDRA - 7756 
 
 + final FileCacheService . CacheKey cacheKey = new FileCacheService . CacheKey ( ) ; 
 + 
 final int THREAD _ COUNT = 40 ; 
 ExecutorService executorService = Executors . newFixedThreadPool ( THREAD _ COUNT ) ; 
 
 @ @ - 550 , 8 + 552 , 8 @ @ public class BufferedRandomAccessFileTest 
 RandomAccessReader r2 = RandomAccessReader . open ( w2 ) ; 
 
 
 - FileCacheService . instance . put ( r1 ) ; 
 - FileCacheService . instance . put ( r2 ) ; 
 + FileCacheService . instance . put ( cacheKey , r1 ) ; 
 + FileCacheService . instance . put ( cacheKey , r2 ) ; 
 
 final CountDownLatch finished = new CountDownLatch ( THREAD _ COUNT ) ; 
 final AtomicBoolean hadError = new AtomicBoolean ( false ) ;

NEAREST DIFF:
diff - - git a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 index c98ee8b . . d4f11e3 100644 
 - - - a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 + + + b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 @ @ - 21 , 13 + 21 , 16 @ @ package org . apache . cassandra . io . util ; 
 * / 
 
 
 - import static org . junit . Assert . * ; 
 - 
 + import java . io . EOFException ; 
 import java . io . File ; 
 + import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 + import java . util . Arrays ; 
 
 import org . junit . Test ; 
 
 + import static org . junit . Assert . assertEquals ; 
 + 
 public class BufferedRandomAccessFileTest 
 { 
 
 @ @ - 66 , 4 + 69 , 45 @ @ public class BufferedRandomAccessFileTest 
 r . close ( ) ; 
 } 
 
 + protected void expectException ( int size , int offset , int len , BufferedRandomAccessFile braf ) 
 + { 
 + boolean threw = false ; 
 + try 
 + { 
 + braf . readFully ( new byte [ size ] , offset , len ) ; 
 + } 
 + catch ( Throwable t ) 
 + { 
 + assert t . getClass ( ) . equals ( EOFException . class ) : t . getClass ( ) . getName ( ) + " is not " + EOFException . class . getName ( ) ; 
 + threw = true ; 
 + } 
 + assert threw : EOFException . class . getName ( ) + " not received " ; 
 + } 
 + 
 + @ Test 
 + public void testEOF ( ) throws Exception 
 + { 
 + for ( String mode : Arrays . asList ( " r " , " rw " ) ) / / read , read + write 
 + { 
 + for ( int buf : Arrays . asList ( 8 , 16 , 32 , 0 ) ) / / smaller , equal , bigger , zero 
 + { 
 + for ( int off : Arrays . asList ( 0 , 8 ) ) 
 + { 
 + expectException ( 32 , off , 17 , new BufferedRandomAccessFile ( writeTemporaryFile ( new byte [ 16 ] ) , mode , buf ) ) ; 
 + } 
 + } 
 + } 
 + } 
 + 
 + protected File writeTemporaryFile ( byte [ ] data ) throws Exception 
 + { 
 + File f = File . createTempFile ( " BRAFTestFile " , null ) ; 
 + f . deleteOnExit ( ) ; 
 + FileOutputStream fout = new FileOutputStream ( f ) ; 
 + fout . write ( data ) ; 
 + fout . getFD ( ) . sync ( ) ; 
 + fout . close ( ) ; 
 + return f ; 
 + } 
 + 
 }
