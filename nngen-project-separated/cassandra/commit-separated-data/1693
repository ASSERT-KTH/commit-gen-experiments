BLEU SCORE: 0.04027248192421852

TEST MSG: Do not attempt to rebuild indexes if no index accepts any column
GENERATED MSG: Pass the updated cf to the PRSI index ( ) method

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6c546c4 . . 5e1e62c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 15 : <nl> + * Do not attempt to rebuild indexes if no index accepts any column ( CASSANDRA - 9196 ) <nl> * Don ' t initiate snitch reconnection for dead states ( CASSANDRA - 7292 ) <nl> * Fix ArrayIndexOutOfBoundsException in CQLSSTableWriter ( CASSANDRA - 8978 ) <nl> * Add shutdown gossip state to prevent timeouts during rolling restarts ( CASSANDRA - 8336 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> index fda79f8 . . 1db7de6 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> @ @ - 131 , 6 + 131 , 7 @ @ public class SecondaryIndexManager <nl> * / <nl> public void maybeBuildSecondaryIndexes ( Collection < SSTableReader > sstables , Set < String > idxNames ) <nl> { <nl> + idxNames = filterByColumn ( idxNames ) ; <nl> if ( idxNames . isEmpty ( ) ) <nl> return ; <nl> <nl> @ @ - 580 , 6 + 581 , 24 @ @ public class SecondaryIndexManager <nl> return true ; <nl> } <nl> <nl> + private Set < String > filterByColumn ( Set < String > idxNames ) <nl> + { <nl> + Set < SecondaryIndex > indexes = getIndexesByNames ( idxNames ) ; <nl> + Set < String > filtered = new HashSet < > ( idxNames . size ( ) ) ; <nl> + for ( SecondaryIndex candidate : indexes ) <nl> + { <nl> + for ( ColumnDefinition column : baseCfs . metadata . allColumns ( ) ) <nl> + { <nl> + if ( candidate . indexes ( column . name ) ) <nl> + { <nl> + filtered . add ( candidate . getIndexName ( ) ) ; <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> + return filtered ; <nl> + } <nl> + <nl> public static interface Updater <nl> { <nl> / * * called when constructing the index against pre - existing data * / <nl> diff - - git a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java <nl> index 292b7f2 . . 8f4a18f 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java <nl> @ @ - 45 , 6 + 45 , 7 @ @ import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . columniterator . IdentityQueryFilter ; <nl> import org . apache . cassandra . db . filter . * ; <nl> + import org . apache . cassandra . db . index . PerRowSecondaryIndexTest ; <nl> import org . apache . cassandra . db . index . SecondaryIndex ; <nl> import org . apache . cassandra . db . marshal . CompositeType ; <nl> import org . apache . cassandra . db . marshal . LexicalUUIDType ; <nl> @ @ - 2172 , 4 + 2173 , 30 @ @ public class ColumnFamilyStoreTest extends SchemaLoader <nl> } ) ; <nl> System . err . println ( " Row key : " + rowKey + " Cols : " + transformed ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testRebuildSecondaryIndex ( ) throws IOException <nl> + { <nl> + RowMutation rm ; <nl> + <nl> + rm = new RowMutation ( " PerRowSecondaryIndex " , ByteBufferUtil . bytes ( " k1 " ) ) ; <nl> + rm . add ( " Indexed1 " , ByteBufferUtil . bytes ( " indexed " ) , ByteBufferUtil . bytes ( " foo " ) , 1 ) ; <nl> + rm . apply ( ) ; <nl> + assertTrue ( Arrays . equals ( " k1 " . getBytes ( ) , PerRowSecondaryIndexTest . TestIndex . LAST _ INDEXED _ KEY . array ( ) ) ) ; <nl> + <nl> + Keyspace . open ( " PerRowSecondaryIndex " ) . getColumnFamilyStore ( " Indexed1 " ) . forceBlockingFlush ( ) ; <nl> + <nl> + PerRowSecondaryIndexTest . TestIndex . reset ( ) ; <nl> + <nl> + ColumnFamilyStore . rebuildSecondaryIndex ( " PerRowSecondaryIndex " , " Indexed1 " , PerRowSecondaryIndexTest . TestIndex . class . getSimpleName ( ) ) ; <nl> + assertTrue ( Arrays . equals ( " k1 " . getBytes ( ) , PerRowSecondaryIndexTest . TestIndex . LAST _ INDEXED _ KEY . array ( ) ) ) ; <nl> + <nl> + PerRowSecondaryIndexTest . TestIndex . reset ( ) ; <nl> + <nl> + PerRowSecondaryIndexTest . TestIndex . ACTIVE = false ; <nl> + ColumnFamilyStore . rebuildSecondaryIndex ( " PerRowSecondaryIndex " , " Indexed1 " , PerRowSecondaryIndexTest . TestIndex . class . getSimpleName ( ) ) ; <nl> + assertNull ( PerRowSecondaryIndexTest . TestIndex . LAST _ INDEXED _ KEY ) ; <nl> + <nl> + PerRowSecondaryIndexTest . TestIndex . reset ( ) ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / index / PerRowSecondaryIndexTest . java b / test / unit / org / apache / cassandra / db / index / PerRowSecondaryIndexTest . java <nl> index b983e6e . . 6a6956c 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / index / PerRowSecondaryIndexTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / index / PerRowSecondaryIndexTest . java <nl> @ @ - 115 , 16 + 115 , 24 @ @ public class PerRowSecondaryIndexTest extends SchemaLoader <nl> <nl> public static class TestIndex extends PerRowSecondaryIndex <nl> { <nl> + public static volatile boolean ACTIVE = true ; <nl> public static ColumnFamily LAST _ INDEXED _ ROW ; <nl> public static ByteBuffer LAST _ INDEXED _ KEY ; <nl> <nl> public static void reset ( ) <nl> { <nl> + ACTIVE = true ; <nl> LAST _ INDEXED _ KEY = null ; <nl> LAST _ INDEXED _ ROW = null ; <nl> } <nl> <nl> @ Override <nl> + public boolean indexes ( ByteBuffer name ) <nl> + { <nl> + return ACTIVE ; <nl> + } <nl> + <nl> + @ Override <nl> public void index ( ByteBuffer rowKey , ColumnFamily cf ) <nl> { <nl> QueryFilter filter = QueryFilter . getIdentityFilter ( DatabaseDescriptor . getPartitioner ( ) . decorateKey ( rowKey ) , <nl> @ @ - 157 , 7 + 165 , 7 @ @ public class PerRowSecondaryIndexTest extends SchemaLoader <nl> @ Override <nl> public String getIndexName ( ) <nl> { <nl> - return null ; <nl> + return this . getClass ( ) . getSimpleName ( ) ; <nl> } <nl> <nl> @ Override
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 12e2017 . . cfcb364 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 11 , 6 + 11 , 7 @ @ <nl> * Correctly handle limits in CompositesSearcher ( CASSANDRA - 5975 ) <nl> * Pig : handle CQL collections ( CASSANDRA - 5867 ) <nl> * Pass the updated cf to the PRSI index ( ) method ( CASSANDRA - 5999 ) <nl> + * Allow empty CQL3 batches ( as no - op ) ( CASSANDRA - 5994 ) <nl> <nl> <nl> 1 . 2 . 9 <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> index f59be51 . . 2445bf2 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Cql . g <nl> + + + b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> @ @ - 386 , 7 + 386 , 7 @ @ batchStatement returns [ BatchStatement expr ] <nl> : K _ BEGIN <nl> ( K _ UNLOGGED { type = BatchStatement . Type . UNLOGGED ; } | K _ COUNTER { type = BatchStatement . Type . COUNTER ; } ) ? <nl> K _ BATCH ( usingClause [ attrs ] ) ? <nl> - ( s = batchStatementObjective ' ; ' ? { statements . add ( s ) ; } ) + <nl> + ( s = batchStatementObjective ' ; ' ? { statements . add ( s ) ; } ) * <nl> K _ APPLY K _ BATCH <nl> { <nl> return new BatchStatement ( type , statements , attrs ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6c546c4 . . 5e1e62c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 15 : 
 + * Do not attempt to rebuild indexes if no index accepts any column ( CASSANDRA - 9196 ) 
 * Don ' t initiate snitch reconnection for dead states ( CASSANDRA - 7292 ) 
 * Fix ArrayIndexOutOfBoundsException in CQLSSTableWriter ( CASSANDRA - 8978 ) 
 * Add shutdown gossip state to prevent timeouts during rolling restarts ( CASSANDRA - 8336 ) 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 index fda79f8 . . 1db7de6 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 @ @ - 131 , 6 + 131 , 7 @ @ public class SecondaryIndexManager 
 * / 
 public void maybeBuildSecondaryIndexes ( Collection < SSTableReader > sstables , Set < String > idxNames ) 
 { 
 + idxNames = filterByColumn ( idxNames ) ; 
 if ( idxNames . isEmpty ( ) ) 
 return ; 
 
 @ @ - 580 , 6 + 581 , 24 @ @ public class SecondaryIndexManager 
 return true ; 
 } 
 
 + private Set < String > filterByColumn ( Set < String > idxNames ) 
 + { 
 + Set < SecondaryIndex > indexes = getIndexesByNames ( idxNames ) ; 
 + Set < String > filtered = new HashSet < > ( idxNames . size ( ) ) ; 
 + for ( SecondaryIndex candidate : indexes ) 
 + { 
 + for ( ColumnDefinition column : baseCfs . metadata . allColumns ( ) ) 
 + { 
 + if ( candidate . indexes ( column . name ) ) 
 + { 
 + filtered . add ( candidate . getIndexName ( ) ) ; 
 + break ; 
 + } 
 + } 
 + } 
 + return filtered ; 
 + } 
 + 
 public static interface Updater 
 { 
 / * * called when constructing the index against pre - existing data * / 
 diff - - git a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java 
 index 292b7f2 . . 8f4a18f 100644 
 - - - a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java 
 + + + b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java 
 @ @ - 45 , 6 + 45 , 7 @ @ import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . columniterator . IdentityQueryFilter ; 
 import org . apache . cassandra . db . filter . * ; 
 + import org . apache . cassandra . db . index . PerRowSecondaryIndexTest ; 
 import org . apache . cassandra . db . index . SecondaryIndex ; 
 import org . apache . cassandra . db . marshal . CompositeType ; 
 import org . apache . cassandra . db . marshal . LexicalUUIDType ; 
 @ @ - 2172 , 4 + 2173 , 30 @ @ public class ColumnFamilyStoreTest extends SchemaLoader 
 } ) ; 
 System . err . println ( " Row key : " + rowKey + " Cols : " + transformed ) ; 
 } 
 + 
 + @ Test 
 + public void testRebuildSecondaryIndex ( ) throws IOException 
 + { 
 + RowMutation rm ; 
 + 
 + rm = new RowMutation ( " PerRowSecondaryIndex " , ByteBufferUtil . bytes ( " k1 " ) ) ; 
 + rm . add ( " Indexed1 " , ByteBufferUtil . bytes ( " indexed " ) , ByteBufferUtil . bytes ( " foo " ) , 1 ) ; 
 + rm . apply ( ) ; 
 + assertTrue ( Arrays . equals ( " k1 " . getBytes ( ) , PerRowSecondaryIndexTest . TestIndex . LAST _ INDEXED _ KEY . array ( ) ) ) ; 
 + 
 + Keyspace . open ( " PerRowSecondaryIndex " ) . getColumnFamilyStore ( " Indexed1 " ) . forceBlockingFlush ( ) ; 
 + 
 + PerRowSecondaryIndexTest . TestIndex . reset ( ) ; 
 + 
 + ColumnFamilyStore . rebuildSecondaryIndex ( " PerRowSecondaryIndex " , " Indexed1 " , PerRowSecondaryIndexTest . TestIndex . class . getSimpleName ( ) ) ; 
 + assertTrue ( Arrays . equals ( " k1 " . getBytes ( ) , PerRowSecondaryIndexTest . TestIndex . LAST _ INDEXED _ KEY . array ( ) ) ) ; 
 + 
 + PerRowSecondaryIndexTest . TestIndex . reset ( ) ; 
 + 
 + PerRowSecondaryIndexTest . TestIndex . ACTIVE = false ; 
 + ColumnFamilyStore . rebuildSecondaryIndex ( " PerRowSecondaryIndex " , " Indexed1 " , PerRowSecondaryIndexTest . TestIndex . class . getSimpleName ( ) ) ; 
 + assertNull ( PerRowSecondaryIndexTest . TestIndex . LAST _ INDEXED _ KEY ) ; 
 + 
 + PerRowSecondaryIndexTest . TestIndex . reset ( ) ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / index / PerRowSecondaryIndexTest . java b / test / unit / org / apache / cassandra / db / index / PerRowSecondaryIndexTest . java 
 index b983e6e . . 6a6956c 100644 
 - - - a / test / unit / org / apache / cassandra / db / index / PerRowSecondaryIndexTest . java 
 + + + b / test / unit / org / apache / cassandra / db / index / PerRowSecondaryIndexTest . java 
 @ @ - 115 , 16 + 115 , 24 @ @ public class PerRowSecondaryIndexTest extends SchemaLoader 
 
 public static class TestIndex extends PerRowSecondaryIndex 
 { 
 + public static volatile boolean ACTIVE = true ; 
 public static ColumnFamily LAST _ INDEXED _ ROW ; 
 public static ByteBuffer LAST _ INDEXED _ KEY ; 
 
 public static void reset ( ) 
 { 
 + ACTIVE = true ; 
 LAST _ INDEXED _ KEY = null ; 
 LAST _ INDEXED _ ROW = null ; 
 } 
 
 @ Override 
 + public boolean indexes ( ByteBuffer name ) 
 + { 
 + return ACTIVE ; 
 + } 
 + 
 + @ Override 
 public void index ( ByteBuffer rowKey , ColumnFamily cf ) 
 { 
 QueryFilter filter = QueryFilter . getIdentityFilter ( DatabaseDescriptor . getPartitioner ( ) . decorateKey ( rowKey ) , 
 @ @ - 157 , 7 + 165 , 7 @ @ public class PerRowSecondaryIndexTest extends SchemaLoader 
 @ Override 
 public String getIndexName ( ) 
 { 
 - return null ; 
 + return this . getClass ( ) . getSimpleName ( ) ; 
 } 
 
 @ Override

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 12e2017 . . cfcb364 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 11 , 6 + 11 , 7 @ @ 
 * Correctly handle limits in CompositesSearcher ( CASSANDRA - 5975 ) 
 * Pig : handle CQL collections ( CASSANDRA - 5867 ) 
 * Pass the updated cf to the PRSI index ( ) method ( CASSANDRA - 5999 ) 
 + * Allow empty CQL3 batches ( as no - op ) ( CASSANDRA - 5994 ) 
 
 
 1 . 2 . 9 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g 
 index f59be51 . . 2445bf2 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Cql . g 
 + + + b / src / java / org / apache / cassandra / cql3 / Cql . g 
 @ @ - 386 , 7 + 386 , 7 @ @ batchStatement returns [ BatchStatement expr ] 
 : K _ BEGIN 
 ( K _ UNLOGGED { type = BatchStatement . Type . UNLOGGED ; } | K _ COUNTER { type = BatchStatement . Type . COUNTER ; } ) ? 
 K _ BATCH ( usingClause [ attrs ] ) ? 
 - ( s = batchStatementObjective ' ; ' ? { statements . add ( s ) ; } ) + 
 + ( s = batchStatementObjective ' ; ' ? { statements . add ( s ) ; } ) * 
 K _ APPLY K _ BATCH 
 { 
 return new BatchStatement ( type , statements , attrs ) ;
