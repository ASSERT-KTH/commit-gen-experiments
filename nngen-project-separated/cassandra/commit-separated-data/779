BLEU SCORE: 0.10682175159905853

TEST MSG: Various fixes to SASI tests
GENERATED MSG: test to expose missing dependencies

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java b / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java <nl> index a27db74 . . 46d1a3c 100644 <nl> - - - a / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java <nl> + + + b / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java <nl> @ @ - 103 , 7 + 103 , 7 @ @ public class SASIIndexTest <nl> SchemaLoader . fullTextSearchSASICFMD ( KS _ NAME , FTS _ CF _ NAME ) ) ) ) ; <nl> } <nl> <nl> - @ After <nl> + @ Before <nl> public void cleanUp ( ) <nl> { <nl> Keyspace . open ( KS _ NAME ) . getColumnFamilyStore ( CF _ NAME ) . truncateBlocking ( ) ; <nl> @ @ - 1093 , 8 + 1093 , 8 @ @ public class SASIIndexTest <nl> Mutation rm = new Mutation ( KS _ NAME , decoratedKey ( AsciiType . instance . decompose ( " key1 " ) ) ) ; <nl> update ( rm , new ArrayList < Cell > ( ) <nl> { { <nl> - add ( buildCell ( firstName , AsciiType . instance . decompose ( " pavel " ) , System . currentTimeMillis ( ) ) ) ; <nl> add ( buildCell ( age , LongType . instance . decompose ( 26L ) , System . currentTimeMillis ( ) ) ) ; <nl> + add ( buildCell ( firstName , AsciiType . instance . decompose ( " pavel " ) , System . currentTimeMillis ( ) ) ) ; <nl> } } ) ; <nl> rm . apply ( ) ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / format / SSTableFlushObserverTest . java b / test / unit / org / apache / cassandra / io / sstable / format / SSTableFlushObserverTest . java <nl> index 27c76dd . . dafad37 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / format / SSTableFlushObserverTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / format / SSTableFlushObserverTest . java <nl> @ @ - 100 , 22 + 100 , 22 @ @ public class SSTableFlushObserverTest <nl> final long now = System . currentTimeMillis ( ) ; <nl> <nl> ByteBuffer key = UTF8Type . instance . fromString ( " key1 " ) ; <nl> - expected . putAll ( key , Arrays . asList ( BufferCell . live ( getColumn ( cfm , " first _ name " ) , now , UTF8Type . instance . fromString ( " jack " ) ) , <nl> - BufferCell . live ( getColumn ( cfm , " age " ) , now , Int32Type . instance . decompose ( 27 ) ) , <nl> + expected . putAll ( key , Arrays . asList ( BufferCell . live ( getColumn ( cfm , " age " ) , now , Int32Type . instance . decompose ( 27 ) ) , <nl> + BufferCell . live ( getColumn ( cfm , " first _ name " ) , now , UTF8Type . instance . fromString ( " jack " ) ) , <nl> BufferCell . live ( getColumn ( cfm , " height " ) , now , LongType . instance . decompose ( 183L ) ) ) ) ; <nl> <nl> writer . append ( new RowIterator ( cfm , key . duplicate ( ) , Collections . singletonList ( buildRow ( expected . get ( key ) ) ) ) ) ; <nl> <nl> key = UTF8Type . instance . fromString ( " key2 " ) ; <nl> - expected . putAll ( key , Arrays . asList ( BufferCell . live ( getColumn ( cfm , " first _ name " ) , now , UTF8Type . instance . fromString ( " jim " ) ) , <nl> - BufferCell . live ( getColumn ( cfm , " age " ) , now , Int32Type . instance . decompose ( 30 ) ) , <nl> + expected . putAll ( key , Arrays . asList ( BufferCell . live ( getColumn ( cfm , " age " ) , now , Int32Type . instance . decompose ( 30 ) ) , <nl> + BufferCell . live ( getColumn ( cfm , " first _ name " ) , now , UTF8Type . instance . fromString ( " jim " ) ) , <nl> BufferCell . live ( getColumn ( cfm , " height " ) , now , LongType . instance . decompose ( 180L ) ) ) ) ; <nl> <nl> writer . append ( new RowIterator ( cfm , key , Collections . singletonList ( buildRow ( expected . get ( key ) ) ) ) ) ; <nl> <nl> key = UTF8Type . instance . fromString ( " key3 " ) ; <nl> - expected . putAll ( key , Arrays . asList ( BufferCell . live ( getColumn ( cfm , " first _ name " ) , now , UTF8Type . instance . fromString ( " ken " ) ) , <nl> - BufferCell . live ( getColumn ( cfm , " age " ) , now , Int32Type . instance . decompose ( 30 ) ) , <nl> + expected . putAll ( key , Arrays . asList ( BufferCell . live ( getColumn ( cfm , " age " ) , now , Int32Type . instance . decompose ( 30 ) ) , <nl> + BufferCell . live ( getColumn ( cfm , " first _ name " ) , now , UTF8Type . instance . fromString ( " ken " ) ) , <nl> BufferCell . live ( getColumn ( cfm , " height " ) , now , LongType . instance . decompose ( 178L ) ) ) ) ; <nl> <nl> writer . append ( new RowIterator ( cfm , key , Collections . singletonList ( buildRow ( expected . get ( key ) ) ) ) ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / utils / UUIDGen . java b / src / java / org / apache / cassandra / utils / UUIDGen . java <nl> index f1969fe . . 75828f0 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / UUIDGen . java <nl> + + + b / src / java / org / apache / cassandra / utils / UUIDGen . java <nl> @ @ - 23 , 6 + 23 , 8 @ @ package org . apache . cassandra . utils ; <nl> import java . io . * ; <nl> import java . net . InetAddress ; <nl> import java . nio . ByteBuffer ; <nl> + import java . security . MessageDigest ; <nl> + import java . security . NoSuchAlgorithmException ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> import java . util . Random ; <nl> @ @ - 42 , 7 + 44 , 31 @ @ public class UUIDGen <nl> <nl> private long lastNanos ; <nl> private final Map < InetAddress , Long > nodeCache = new HashMap < InetAddress , Long > ( ) ; <nl> - <nl> + <nl> + private static final ThreadLocal < MessageDigest > localMD5Digest = new ThreadLocal < MessageDigest > ( ) <nl> + { <nl> + @ Override <nl> + protected MessageDigest initialValue ( ) <nl> + { <nl> + try <nl> + { <nl> + return MessageDigest . getInstance ( " MD5 " ) ; <nl> + } <nl> + catch ( NoSuchAlgorithmException nsae ) <nl> + { <nl> + throw new RuntimeException ( " MD5 digest algorithm is not available " , nsae ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public MessageDigest get ( ) <nl> + { <nl> + MessageDigest digest = super . get ( ) ; <nl> + digest . reset ( ) ; <nl> + return digest ; <nl> + } <nl> + } ; <nl> + <nl> private UUIDGen ( ) <nl> { <nl> / / make sure someone didn ' t whack the clock by changing the order of instantiation . <nl> @ @ - 195 , 7 + 221 , 7 @ @ public class UUIDGen <nl> return nodeCache . get ( addr ) ; <nl> <nl> / / ideally , we ' d use the MAC address , but java doesn ' t expose that . <nl> - byte [ ] hash = FBUtilities . hash ( ByteBuffer . wrap ( addr . toString ( ) . getBytes ( ) ) ) ; <nl> + byte [ ] hash = hash ( addr . toString ( ) ) ; <nl> long node = 0 ; <nl> for ( int i = 0 ; i < Math . min ( 6 , hash . length ) ; i + + ) <nl> node | = ( 0x00000000000000ff & ( long ) hash [ i ] ) < < ( 5 - i ) * 8 ; <nl> @ @ - 205 , 6 + 231 , 15 @ @ public class UUIDGen <nl> <nl> return node ; <nl> } <nl> + <nl> + private static byte [ ] hash ( String . . . data ) <nl> + { <nl> + MessageDigest messageDigest = localMD5Digest . get ( ) ; <nl> + for ( String block : data ) <nl> + messageDigest . update ( block . getBytes ( ) ) ; <nl> + <nl> + return messageDigest . digest ( ) ; <nl> + } <nl> } <nl> <nl> / / for the curious , here is how I generated START _ EPOCH

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java b / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java 
 index a27db74 . . 46d1a3c 100644 
 - - - a / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java 
 + + + b / test / unit / org / apache / cassandra / index / sasi / SASIIndexTest . java 
 @ @ - 103 , 7 + 103 , 7 @ @ public class SASIIndexTest 
 SchemaLoader . fullTextSearchSASICFMD ( KS _ NAME , FTS _ CF _ NAME ) ) ) ) ; 
 } 
 
 - @ After 
 + @ Before 
 public void cleanUp ( ) 
 { 
 Keyspace . open ( KS _ NAME ) . getColumnFamilyStore ( CF _ NAME ) . truncateBlocking ( ) ; 
 @ @ - 1093 , 8 + 1093 , 8 @ @ public class SASIIndexTest 
 Mutation rm = new Mutation ( KS _ NAME , decoratedKey ( AsciiType . instance . decompose ( " key1 " ) ) ) ; 
 update ( rm , new ArrayList < Cell > ( ) 
 { { 
 - add ( buildCell ( firstName , AsciiType . instance . decompose ( " pavel " ) , System . currentTimeMillis ( ) ) ) ; 
 add ( buildCell ( age , LongType . instance . decompose ( 26L ) , System . currentTimeMillis ( ) ) ) ; 
 + add ( buildCell ( firstName , AsciiType . instance . decompose ( " pavel " ) , System . currentTimeMillis ( ) ) ) ; 
 } } ) ; 
 rm . apply ( ) ; 
 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / format / SSTableFlushObserverTest . java b / test / unit / org / apache / cassandra / io / sstable / format / SSTableFlushObserverTest . java 
 index 27c76dd . . dafad37 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / format / SSTableFlushObserverTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / format / SSTableFlushObserverTest . java 
 @ @ - 100 , 22 + 100 , 22 @ @ public class SSTableFlushObserverTest 
 final long now = System . currentTimeMillis ( ) ; 
 
 ByteBuffer key = UTF8Type . instance . fromString ( " key1 " ) ; 
 - expected . putAll ( key , Arrays . asList ( BufferCell . live ( getColumn ( cfm , " first _ name " ) , now , UTF8Type . instance . fromString ( " jack " ) ) , 
 - BufferCell . live ( getColumn ( cfm , " age " ) , now , Int32Type . instance . decompose ( 27 ) ) , 
 + expected . putAll ( key , Arrays . asList ( BufferCell . live ( getColumn ( cfm , " age " ) , now , Int32Type . instance . decompose ( 27 ) ) , 
 + BufferCell . live ( getColumn ( cfm , " first _ name " ) , now , UTF8Type . instance . fromString ( " jack " ) ) , 
 BufferCell . live ( getColumn ( cfm , " height " ) , now , LongType . instance . decompose ( 183L ) ) ) ) ; 
 
 writer . append ( new RowIterator ( cfm , key . duplicate ( ) , Collections . singletonList ( buildRow ( expected . get ( key ) ) ) ) ) ; 
 
 key = UTF8Type . instance . fromString ( " key2 " ) ; 
 - expected . putAll ( key , Arrays . asList ( BufferCell . live ( getColumn ( cfm , " first _ name " ) , now , UTF8Type . instance . fromString ( " jim " ) ) , 
 - BufferCell . live ( getColumn ( cfm , " age " ) , now , Int32Type . instance . decompose ( 30 ) ) , 
 + expected . putAll ( key , Arrays . asList ( BufferCell . live ( getColumn ( cfm , " age " ) , now , Int32Type . instance . decompose ( 30 ) ) , 
 + BufferCell . live ( getColumn ( cfm , " first _ name " ) , now , UTF8Type . instance . fromString ( " jim " ) ) , 
 BufferCell . live ( getColumn ( cfm , " height " ) , now , LongType . instance . decompose ( 180L ) ) ) ) ; 
 
 writer . append ( new RowIterator ( cfm , key , Collections . singletonList ( buildRow ( expected . get ( key ) ) ) ) ) ; 
 
 key = UTF8Type . instance . fromString ( " key3 " ) ; 
 - expected . putAll ( key , Arrays . asList ( BufferCell . live ( getColumn ( cfm , " first _ name " ) , now , UTF8Type . instance . fromString ( " ken " ) ) , 
 - BufferCell . live ( getColumn ( cfm , " age " ) , now , Int32Type . instance . decompose ( 30 ) ) , 
 + expected . putAll ( key , Arrays . asList ( BufferCell . live ( getColumn ( cfm , " age " ) , now , Int32Type . instance . decompose ( 30 ) ) , 
 + BufferCell . live ( getColumn ( cfm , " first _ name " ) , now , UTF8Type . instance . fromString ( " ken " ) ) , 
 BufferCell . live ( getColumn ( cfm , " height " ) , now , LongType . instance . decompose ( 178L ) ) ) ) ; 
 
 writer . append ( new RowIterator ( cfm , key , Collections . singletonList ( buildRow ( expected . get ( key ) ) ) ) ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / utils / UUIDGen . java b / src / java / org / apache / cassandra / utils / UUIDGen . java 
 index f1969fe . . 75828f0 100644 
 - - - a / src / java / org / apache / cassandra / utils / UUIDGen . java 
 + + + b / src / java / org / apache / cassandra / utils / UUIDGen . java 
 @ @ - 23 , 6 + 23 , 8 @ @ package org . apache . cassandra . utils ; 
 import java . io . * ; 
 import java . net . InetAddress ; 
 import java . nio . ByteBuffer ; 
 + import java . security . MessageDigest ; 
 + import java . security . NoSuchAlgorithmException ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 import java . util . Random ; 
 @ @ - 42 , 7 + 44 , 31 @ @ public class UUIDGen 
 
 private long lastNanos ; 
 private final Map < InetAddress , Long > nodeCache = new HashMap < InetAddress , Long > ( ) ; 
 - 
 + 
 + private static final ThreadLocal < MessageDigest > localMD5Digest = new ThreadLocal < MessageDigest > ( ) 
 + { 
 + @ Override 
 + protected MessageDigest initialValue ( ) 
 + { 
 + try 
 + { 
 + return MessageDigest . getInstance ( " MD5 " ) ; 
 + } 
 + catch ( NoSuchAlgorithmException nsae ) 
 + { 
 + throw new RuntimeException ( " MD5 digest algorithm is not available " , nsae ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public MessageDigest get ( ) 
 + { 
 + MessageDigest digest = super . get ( ) ; 
 + digest . reset ( ) ; 
 + return digest ; 
 + } 
 + } ; 
 + 
 private UUIDGen ( ) 
 { 
 / / make sure someone didn ' t whack the clock by changing the order of instantiation . 
 @ @ - 195 , 7 + 221 , 7 @ @ public class UUIDGen 
 return nodeCache . get ( addr ) ; 
 
 / / ideally , we ' d use the MAC address , but java doesn ' t expose that . 
 - byte [ ] hash = FBUtilities . hash ( ByteBuffer . wrap ( addr . toString ( ) . getBytes ( ) ) ) ; 
 + byte [ ] hash = hash ( addr . toString ( ) ) ; 
 long node = 0 ; 
 for ( int i = 0 ; i < Math . min ( 6 , hash . length ) ; i + + ) 
 node | = ( 0x00000000000000ff & ( long ) hash [ i ] ) < < ( 5 - i ) * 8 ; 
 @ @ - 205 , 6 + 231 , 15 @ @ public class UUIDGen 
 
 return node ; 
 } 
 + 
 + private static byte [ ] hash ( String . . . data ) 
 + { 
 + MessageDigest messageDigest = localMD5Digest . get ( ) ; 
 + for ( String block : data ) 
 + messageDigest . update ( block . getBytes ( ) ) ; 
 + 
 + return messageDigest . digest ( ) ; 
 + } 
 } 
 
 / / for the curious , here is how I generated START _ EPOCH
