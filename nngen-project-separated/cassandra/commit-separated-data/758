BLEU SCORE: 0.028398387225677897

TEST MSG: Wait until the message is being send to decide which serializer must be used
GENERATED MSG: update MessagingService protocol to allow version handshake with broadcast address identification

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 70210a8 . . 3829046 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 9 <nl> + * Wait until the message is being send to decide which serializer must be used ( CASSANDRA - 11393 ) <nl> * Fix migration of static thrift column names with non - text comparators ( CASSANDRA - 12147 ) <nl> * Fix upgrading sparse tables that are incorrectly marked as dense ( CASSANDRA - 11315 ) <nl> * Fix reverse queries ignoring range tombstones ( CASSANDRA - 11733 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 100bcf4 . . b71ebf6 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 1124 , 6 + 1124 , 7 @ @ public class DatabaseDescriptor <nl> case READ : <nl> return getReadRpcTimeout ( ) ; <nl> case RANGE _ SLICE : <nl> + case PAGED _ RANGE : <nl> return getRangeRpcTimeout ( ) ; <nl> case TRUNCATE : <nl> return getTruncateRpcTimeout ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java b / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java <nl> index 842ad5f . . 99e24c8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java <nl> @ @ - 253 , 12 + 253 , 9 @ @ public class PartitionRangeReadCommand extends ReadCommand <nl> <nl> public MessageOut < ReadCommand > createMessage ( int version ) <nl> { <nl> - if ( version > = MessagingService . VERSION _ 30 ) <nl> - return new MessageOut < > ( MessagingService . Verb . RANGE _ SLICE , this , serializer ) ; <nl> - <nl> return dataRange ( ) . isPaging ( ) <nl> - ? new MessageOut < > ( MessagingService . Verb . PAGED _ RANGE , this , legacyPagedRangeCommandSerializer ) <nl> - : new MessageOut < > ( MessagingService . Verb . RANGE _ SLICE , this , legacyRangeSliceCommandSerializer ) ; <nl> + ? new MessageOut < > ( MessagingService . Verb . PAGED _ RANGE , this , pagedRangeSerializer ) <nl> + : new MessageOut < > ( MessagingService . Verb . RANGE _ SLICE , this , rangeSliceSerializer ) ; <nl> } <nl> <nl> protected void appendCQLWhereClause ( StringBuilder sb ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ReadCommand . java b / src / java / org / apache / cassandra / db / ReadCommand . java <nl> index c792a5a . . 36969f8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / ReadCommand . java <nl> @ @ - 34 , 6 + 34 , 7 @ @ import org . apache . cassandra . db . transform . Transformation ; <nl> import org . apache . cassandra . dht . AbstractBounds ; <nl> import org . apache . cassandra . index . Index ; <nl> import org . apache . cassandra . index . IndexNotAvailableException ; <nl> + import org . apache . cassandra . io . ForwardingVersionedSerializer ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . io . util . DataInputPlus ; <nl> import org . apache . cassandra . io . util . DataOutputPlus ; <nl> @ @ - 58 , 9 + 59 , 39 @ @ public abstract class ReadCommand implements ReadQuery <nl> protected static final Logger logger = LoggerFactory . getLogger ( ReadCommand . class ) ; <nl> <nl> public static final IVersionedSerializer < ReadCommand > serializer = new Serializer ( ) ; <nl> + <nl> + / / For READ verb : will either dispatch on ' serializer ' for 3 . 0 or ' legacyReadCommandSerializer ' for earlier version . <nl> + / / Can be removed ( and replaced by ' serializer ' ) once we drop pre - 3 . 0 backward compatibility . <nl> + public static final IVersionedSerializer < ReadCommand > readSerializer = new ForwardingVersionedSerializer < ReadCommand > ( ) <nl> + { <nl> + protected IVersionedSerializer < ReadCommand > delegate ( int version ) <nl> + { <nl> + return version < MessagingService . VERSION _ 30 <nl> + ? legacyReadCommandSerializer : serializer ; <nl> + } <nl> + } ; <nl> + <nl> / / For RANGE _ SLICE verb : will either dispatch on ' serializer ' for 3 . 0 or ' legacyRangeSliceCommandSerializer ' for earlier version . <nl> / / Can be removed ( and replaced by ' serializer ' ) once we drop pre - 3 . 0 backward compatibility . <nl> - public static final IVersionedSerializer < ReadCommand > rangeSliceSerializer = new RangeSliceSerializer ( ) ; <nl> + public static final IVersionedSerializer < ReadCommand > rangeSliceSerializer = new ForwardingVersionedSerializer < ReadCommand > ( ) <nl> + { <nl> + protected IVersionedSerializer < ReadCommand > delegate ( int version ) <nl> + { <nl> + return version < MessagingService . VERSION _ 30 <nl> + ? legacyRangeSliceCommandSerializer : serializer ; <nl> + } <nl> + } ; <nl> + <nl> + / / For PAGED _ RANGE verb : will either dispatch on ' serializer ' for 3 . 0 or ' legacyPagedRangeCommandSerializer ' for earlier version . <nl> + / / Can be removed ( and replaced by ' serializer ' ) once we drop pre - 3 . 0 backward compatibility . <nl> + public static final IVersionedSerializer < ReadCommand > pagedRangeSerializer = new ForwardingVersionedSerializer < ReadCommand > ( ) <nl> + { <nl> + protected IVersionedSerializer < ReadCommand > delegate ( int version ) <nl> + { <nl> + return version < MessagingService . VERSION _ 30 <nl> + ? legacyPagedRangeCommandSerializer : serializer ; <nl> + } <nl> + } ; <nl> <nl> public static final IVersionedSerializer < ReadCommand > legacyRangeSliceCommandSerializer = new LegacyRangeSliceCommandSerializer ( ) ; <nl> public static final IVersionedSerializer < ReadCommand > legacyPagedRangeCommandSerializer = new LegacyPagedRangeCommandSerializer ( ) ; <nl> @ @ - 567 , 7 + 598 , 6 @ @ public abstract class ReadCommand implements ReadQuery <nl> <nl> public void serialize ( ReadCommand command , DataOutputPlus out , int version ) throws IOException <nl> { <nl> - / / for serialization , createLegacyMessage ( ) should cause legacyReadCommandSerializer to be used directly <nl> assert version > = MessagingService . VERSION _ 30 ; <nl> <nl> out . writeByte ( command . kind . ordinal ( ) ) ; <nl> @ @ - 587 , 8 + 617 , 7 @ @ public abstract class ReadCommand implements ReadQuery <nl> <nl> public ReadCommand deserialize ( DataInputPlus in , int version ) throws IOException <nl> { <nl> - if ( version < MessagingService . VERSION _ 30 ) <nl> - return legacyReadCommandSerializer . deserialize ( in , version ) ; <nl> + assert version > = MessagingService . VERSION _ 30 ; <nl> <nl> Kind kind = Kind . values ( ) [ in . readByte ( ) ] ; <nl> int flags = in . readByte ( ) ; <nl> @ @ - 628 , 7 + 657 , 6 @ @ public abstract class ReadCommand implements ReadQuery <nl> <nl> public long serializedSize ( ReadCommand command , int version ) <nl> { <nl> - / / for serialization , createLegacyMessage ( ) should cause legacyReadCommandSerializer to be used directly <nl> assert version > = MessagingService . VERSION _ 30 ; <nl> <nl> return 2 / / kind + flags <nl> @ @ - 643 , 33 + 671 , 6 @ @ public abstract class ReadCommand implements ReadQuery <nl> } <nl> } <nl> <nl> - / / Dispatch to either Serializer or LegacyRangeSliceCommandSerializer . Only useful as long as we maintain pre - 3 . 0 <nl> - / / compatibility <nl> - private static class RangeSliceSerializer implements IVersionedSerializer < ReadCommand > <nl> - { <nl> - public void serialize ( ReadCommand command , DataOutputPlus out , int version ) throws IOException <nl> - { <nl> - if ( version < MessagingService . VERSION _ 30 ) <nl> - legacyRangeSliceCommandSerializer . serialize ( command , out , version ) ; <nl> - else <nl> - serializer . serialize ( command , out , version ) ; <nl> - } <nl> - <nl> - public ReadCommand deserialize ( DataInputPlus in , int version ) throws IOException <nl> - { <nl> - return version < MessagingService . VERSION _ 30 <nl> - ? legacyRangeSliceCommandSerializer . deserialize ( in , version ) <nl> - : serializer . deserialize ( in , version ) ; <nl> - } <nl> - <nl> - public long serializedSize ( ReadCommand command , int version ) <nl> - { <nl> - return version < MessagingService . VERSION _ 30 <nl> - ? legacyRangeSliceCommandSerializer . serializedSize ( command , version ) <nl> - : serializer . serializedSize ( command , version ) ; <nl> - } <nl> - } <nl> - <nl> private enum LegacyType <nl> { <nl> GET _ BY _ NAMES ( ( byte ) 1 ) , <nl> diff - - git a / src / java / org / apache / cassandra / db / ReadResponse . java b / src / java / org / apache / cassandra / db / ReadResponse . java <nl> index 8bd1be6 . . 12a200f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ReadResponse . java <nl> + + + b / src / java / org / apache / cassandra / db / ReadResponse . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import org . apache . cassandra . db . filter . ColumnFilter ; <nl> import org . apache . cassandra . db . rows . * ; <nl> import org . apache . cassandra . db . partitions . * ; <nl> import org . apache . cassandra . dht . * ; <nl> + import org . apache . cassandra . io . ForwardingVersionedSerializer ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . io . util . DataInputBuffer ; <nl> import org . apache . cassandra . io . util . DataInputPlus ; <nl> @ @ - 46 , 11 + 47 , 20 @ @ public abstract class ReadResponse <nl> { <nl> / / Serializer for single partition read response <nl> public static final IVersionedSerializer < ReadResponse > serializer = new Serializer ( ) ; <nl> - / / Serializer for partition range read response ( this actually delegate to ' serializer ' in 3 . 0 and to <nl> - / / ' legacyRangeSliceReplySerializer ' in older version . <nl> - public static final IVersionedSerializer < ReadResponse > rangeSliceSerializer = new RangeSliceSerializer ( ) ; <nl> / / Serializer for the pre - 3 . 0 rang slice responses . <nl> public static final IVersionedSerializer < ReadResponse > legacyRangeSliceReplySerializer = new LegacyRangeSliceReplySerializer ( ) ; <nl> + / / Serializer for partition range read response ( this actually delegate to ' serializer ' in 3 . 0 and to <nl> + / / ' legacyRangeSliceReplySerializer ' in older version . <nl> + public static final IVersionedSerializer < ReadResponse > rangeSliceSerializer = new ForwardingVersionedSerializer < ReadResponse > ( ) <nl> + { <nl> + @ Override <nl> + protected IVersionedSerializer < ReadResponse > delegate ( int version ) <nl> + { <nl> + return version < MessagingService . VERSION _ 30 <nl> + ? legacyRangeSliceReplySerializer <nl> + : serializer ; <nl> + } <nl> + } ; <nl> <nl> / / This is used only when serializing data responses and we can ' t it easily in other cases . So this can be null , which is slighly <nl> / / hacky , but as this hack doesn ' t escape this class , and it ' s easy enough to validate that it ' s not null when we need , it ' s " good enough " . <nl> @ @ - 411 , 31 + 421 , 6 @ @ public abstract class ReadResponse <nl> } <nl> } <nl> <nl> - private static class RangeSliceSerializer implements IVersionedSerializer < ReadResponse > <nl> - { <nl> - public void serialize ( ReadResponse response , DataOutputPlus out , int version ) throws IOException <nl> - { <nl> - if ( version < MessagingService . VERSION _ 30 ) <nl> - legacyRangeSliceReplySerializer . serialize ( response , out , version ) ; <nl> - else <nl> - serializer . serialize ( response , out , version ) ; <nl> - } <nl> - <nl> - public ReadResponse deserialize ( DataInputPlus in , int version ) throws IOException <nl> - { <nl> - return version < MessagingService . VERSION _ 30 <nl> - ? legacyRangeSliceReplySerializer . deserialize ( in , version ) <nl> - : serializer . deserialize ( in , version ) ; <nl> - } <nl> - <nl> - public long serializedSize ( ReadResponse response , int version ) <nl> - { <nl> - return version < MessagingService . VERSION _ 30 <nl> - ? legacyRangeSliceReplySerializer . serializedSize ( response , version ) <nl> - : serializer . serializedSize ( response , version ) ; <nl> - } <nl> - } <nl> - <nl> private static class LegacyRangeSliceReplySerializer implements IVersionedSerializer < ReadResponse > <nl> { <nl> public void serialize ( ReadResponse response , DataOutputPlus out , int version ) throws IOException <nl> @ @ - 477 , 6 + 462 , 8 @ @ public abstract class ReadResponse <nl> <nl> public ReadResponse deserialize ( DataInputPlus in , int version ) throws IOException <nl> { <nl> + assert version < MessagingService . VERSION _ 30 ; <nl> + <nl> int partitionCount = in . readInt ( ) ; <nl> ArrayList < ImmutableBTreePartition > partitions = new ArrayList < > ( partitionCount ) ; <nl> for ( int i = 0 ; i < partitionCount ; i + + ) <nl> diff - - git a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> index 6784770 . . 73eb9bd 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> @ @ - 894 , 7 + 894 , 7 @ @ public class SinglePartitionReadCommand extends ReadCommand <nl> <nl> public MessageOut < ReadCommand > createMessage ( int version ) <nl> { <nl> - return new MessageOut < > ( MessagingService . Verb . READ , this , version < MessagingService . VERSION _ 30 ? legacyReadCommandSerializer : serializer ) ; <nl> + return new MessageOut < > ( MessagingService . Verb . READ , this , readSerializer ) ; <nl> } <nl> <nl> protected void appendCQLWhereClause ( StringBuilder sb ) <nl> diff - - git a / src / java / org / apache / cassandra / io / ForwardingVersionedSerializer . java b / src / java / org / apache / cassandra / io / ForwardingVersionedSerializer . java <nl> new file mode 100644 <nl> index 0000000 . . 64f91d7 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / io / ForwardingVersionedSerializer . java <nl> @ @ - 0 , 0 + 1 , 57 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . io ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import org . apache . cassandra . io . util . DataInputPlus ; <nl> + import org . apache . cassandra . io . util . DataOutputPlus ; <nl> + <nl> + / * * <nl> + * A serializer which forwards all its method calls to another serializer . Subclasses should override one or more <nl> + * methods to modify the behavior of the backing serializer as desired per the decorator pattern . <nl> + * / <nl> + public abstract class ForwardingVersionedSerializer < T > implements IVersionedSerializer < T > <nl> + { <nl> + protected ForwardingVersionedSerializer ( ) <nl> + { <nl> + } <nl> + <nl> + / * * <nl> + * Returns the backing delegate instance that methods are forwarded to . <nl> + * <nl> + * @ param version the server version <nl> + * @ return the backing delegate instance that methods are forwarded to . <nl> + * / <nl> + protected abstract IVersionedSerializer < T > delegate ( int version ) ; <nl> + <nl> + public void serialize ( T t , DataOutputPlus out , int version ) throws IOException <nl> + { <nl> + delegate ( version ) . serialize ( t , out , version ) ; <nl> + } <nl> + <nl> + public T deserialize ( DataInputPlus in , int version ) throws IOException <nl> + { <nl> + return delegate ( version ) . deserialize ( in , version ) ; <nl> + } <nl> + <nl> + public long serializedSize ( T t , int version ) <nl> + { <nl> + return delegate ( version ) . serializedSize ( t , version ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index fac46eb . . d01419f 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 215 , 9 + 215 , 9 @ @ public final class MessagingService implements MessagingServiceMBean <nl> <nl> put ( Verb . MUTATION , Mutation . serializer ) ; <nl> put ( Verb . READ _ REPAIR , Mutation . serializer ) ; <nl> - put ( Verb . READ , ReadCommand . serializer ) ; <nl> + put ( Verb . READ , ReadCommand . readSerializer ) ; <nl> put ( Verb . RANGE _ SLICE , ReadCommand . rangeSliceSerializer ) ; <nl> - put ( Verb . PAGED _ RANGE , ReadCommand . legacyPagedRangeCommandSerializer ) ; <nl> + put ( Verb . PAGED _ RANGE , ReadCommand . pagedRangeSerializer ) ; <nl> put ( Verb . BOOTSTRAP _ TOKEN , BootStrapper . StringSerializer . instance ) ; <nl> put ( Verb . REPAIR _ MESSAGE , RepairMessage . serializer ) ; <nl> put ( Verb . GOSSIP _ DIGEST _ ACK , GossipDigestAck . serializer ) ; <nl> @ @ - 247 , 7 + 247 , 7 @ @ public final class MessagingService implements MessagingServiceMBean <nl> put ( Verb . READ _ REPAIR , WriteResponse . serializer ) ; <nl> put ( Verb . COUNTER _ MUTATION , WriteResponse . serializer ) ; <nl> put ( Verb . RANGE _ SLICE , ReadResponse . rangeSliceSerializer ) ; <nl> - put ( Verb . PAGED _ RANGE , ReadResponse . legacyRangeSliceReplySerializer ) ; <nl> + put ( Verb . PAGED _ RANGE , ReadResponse . rangeSliceSerializer ) ; <nl> put ( Verb . READ , ReadResponse . serializer ) ; <nl> put ( Verb . TRUNCATE , TruncateResponse . serializer ) ; <nl> put ( Verb . SNAPSHOT , null ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 06dafe7 . . 57c3c49 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 101 , 9 + 101 , 6 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> <nl> private final Map < InetAddress , Long > expireTimeEndpointMap = new ConcurrentHashMap < InetAddress , Long > ( ) ; <nl> <nl> - / / protocol versions of the other nodes in the cluster <nl> - private final ConcurrentMap < InetAddress , Integer > versions = new NonBlockingHashMap < InetAddress , Integer > ( ) ; <nl> - <nl> private class GossipTask implements Runnable <nl> { <nl> public void run ( ) <nl> @ @ - 200 , 32 + 197 , 6 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> subscribers . remove ( subscriber ) ; <nl> } <nl> <nl> - public Integer setVersion ( InetAddress address , int version ) <nl> - { <nl> - logger . debug ( " Setting version { } for { } " , version , address ) ; <nl> - return versions . put ( address , version ) ; <nl> - } <nl> - <nl> - public void resetVersion ( InetAddress endpoint ) <nl> - { <nl> - logger . debug ( " Reseting version for { } " , endpoint ) ; <nl> - versions . remove ( endpoint ) ; <nl> - } <nl> - <nl> - public Integer getVersion ( InetAddress address ) <nl> - { <nl> - Integer v = versions . get ( address ) ; <nl> - if ( v = = null ) <nl> - { <nl> - / / we don ' t know the version . assume current . we ' ll know soon enough if that was incorrect . <nl> - logger . trace ( " Assuming current protocol version for { } " , address ) ; <nl> - return MessagingService . current _ version ; <nl> - } <nl> - else <nl> - return v ; <nl> - } <nl> - <nl> - <nl> public Set < InetAddress > getLiveMembers ( ) <nl> { <nl> Set < InetAddress > liveMbrs = new HashSet < InetAddress > ( liveEndpoints ) ; <nl> @ @ - 304 , 7 + 275 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> unreachableEndpoints . remove ( endpoint ) ; <nl> / / do not remove endpointState until the quarantine expires <nl> FailureDetector . instance . remove ( endpoint ) ; <nl> - versions . remove ( endpoint ) ; <nl> + MessagingService . instance ( ) . resetVersion ( endpoint ) ; <nl> quarantineEndpoint ( endpoint ) ; <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " removing endpoint " + endpoint ) ; <nl> @ @ - 1115 , 11 + 1086 , 6 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> } <nl> } <nl> <nl> - public int getVersion ( String address ) throws UnknownHostException <nl> - { <nl> - return getVersion ( InetAddress . getByName ( address ) ) ; <nl> - } <nl> - <nl> public long getEndpointDowntime ( String address ) throws UnknownHostException <nl> { <nl> return getEndpointDowntime ( InetAddress . getByName ( address ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / gms / GossiperMBean . java b / src / java / org / apache / cassandra / gms / GossiperMBean . java <nl> index 806e77d . . 521fd21 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / GossiperMBean . java <nl> + + + b / src / java / org / apache / cassandra / gms / GossiperMBean . java <nl> @ @ - 21 , 8 + 21 , 6 @ @ import java . net . UnknownHostException ; <nl> <nl> public interface GossiperMBean <nl> { <nl> - public int getVersion ( String address ) throws UnknownHostException ; <nl> - <nl> public long getEndpointDowntime ( String address ) throws UnknownHostException ; <nl> <nl> public int getCurrentGenerationNumber ( String address ) throws UnknownHostException ; <nl> diff - - git a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> index e808c7e . . 7966605 100644 <nl> - - - a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> @ @ - 113 , 7 + 113 , 7 @ @ public class IncomingTcpConnection extends Thread <nl> logger . info ( " Received messages from newer protocol version { } . Ignoring " , version ) ; <nl> return ; <nl> } <nl> - Gossiper . instance . setVersion ( from , Math . min ( MessagingService . current _ version , maxVersion ) ) ; <nl> + MessagingService . instance ( ) . setVersion ( from , Math . min ( MessagingService . current _ version , maxVersion ) ) ; <nl> logger . debug ( " set version for { } to { } " , from , Math . min ( MessagingService . current _ version , maxVersion ) ) ; <nl> / / outbound side will reconnect if necessary to upgrade version <nl> <nl> @ @ - 137 , 7 + 137 , 7 @ @ public class IncomingTcpConnection extends Thread <nl> logger . info ( " Received messages from newer protocol version . Ignoring " ) ; <nl> return ; <nl> } <nl> - int lastVersion = Gossiper . instance . setVersion ( from , version ) ; <nl> + int lastVersion = MessagingService . instance ( ) . setVersion ( from , version ) ; <nl> logger . debug ( " set version for { } to { } " , from , version ) ; <nl> if ( lastVersion < version ) <nl> { <nl> @ @ - 200 , 7 + 200 , 7 @ @ public class IncomingTcpConnection extends Thread <nl> { <nl> / / reset version here , since we set when starting an incoming socket <nl> if ( from ! = null ) <nl> - Gossiper . instance . resetVersion ( from ) ; <nl> + MessagingService . instance ( ) . resetVersion ( from ) ; <nl> try <nl> { <nl> socket . close ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index ed9e5b3 . . a9cb1a6 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 287 , 6 + 287 , 9 @ @ public final class MessagingService implements MessagingServiceMBean <nl> private final List < ILatencySubscriber > subscribers = new ArrayList < ILatencySubscriber > ( ) ; <nl> private static final long DEFAULT _ CALLBACK _ TIMEOUT = DatabaseDescriptor . getRpcTimeout ( ) ; <nl> <nl> + / / protocol versions of the other nodes in the cluster <nl> + private final ConcurrentMap < InetAddress , Integer > versions = new NonBlockingHashMap < InetAddress , Integer > ( ) ; <nl> + <nl> private static class MSHandle <nl> { <nl> public static final MessagingService instance = new MessagingService ( ) ; <nl> @ @ - 761 , 6 + 764 , 36 @ @ public final class MessagingService implements MessagingServiceMBean <nl> return buffer ; <nl> } <nl> <nl> + public Integer setVersion ( InetAddress address , int version ) <nl> + { <nl> + logger . debug ( " Setting version { } for { } " , version , address ) ; <nl> + return versions . put ( address , version ) ; <nl> + } <nl> + <nl> + public void resetVersion ( InetAddress endpoint ) <nl> + { <nl> + logger . debug ( " Reseting version for { } " , endpoint ) ; <nl> + versions . remove ( endpoint ) ; <nl> + } <nl> + <nl> + public Integer getVersion ( InetAddress address ) <nl> + { <nl> + Integer v = versions . get ( address ) ; <nl> + if ( v = = null ) <nl> + { <nl> + / / we don ' t know the version . assume current . we ' ll know soon enough if that was incorrect . <nl> + logger . trace ( " Assuming current protocol version for { } " , address ) ; <nl> + return MessagingService . current _ version ; <nl> + } <nl> + else <nl> + return v ; <nl> + } <nl> + <nl> + public int getVersion ( String address ) throws UnknownHostException <nl> + { <nl> + return getVersion ( InetAddress . getByName ( address ) ) ; <nl> + } <nl> + <nl> public void incrementDroppedMessages ( Verb verb ) <nl> { <nl> assert DROPPABLE _ VERBS . contains ( verb ) : " Verb " + verb + " should not legally be dropped " ; <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingServiceMBean . java b / src / java / org / apache / cassandra / net / MessagingServiceMBean . java <nl> index 17621af . . ff39e23 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingServiceMBean . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . net ; <nl> <nl> <nl> <nl> + import java . net . UnknownHostException ; <nl> import java . util . Map ; <nl> <nl> / * * <nl> @ @ - 81 , 4 + 82 , 6 @ @ public interface MessagingServiceMBean <nl> * Number of timeouts since last check per host . <nl> * / <nl> public Map < String , Long > getRecentTimeoutsPerHost ( ) ; <nl> + <nl> + public int getVersion ( String address ) throws UnknownHostException ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> index a123072 . . a5d8181 100644 <nl> - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> @ @ - 241 , 7 + 241 , 7 @ @ public class OutboundTcpConnection extends Thread <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " attempting to connect to " + poolReference . endPoint ( ) ) ; <nl> <nl> - targetVersion = Gossiper . instance . getVersion ( poolReference . endPoint ( ) ) ; <nl> + targetVersion = MessagingService . instance ( ) . getVersion ( poolReference . endPoint ( ) ) ; <nl> <nl> long start = System . currentTimeMillis ( ) ; <nl> while ( System . currentTimeMillis ( ) < start + DatabaseDescriptor . getRpcTimeout ( ) ) <nl> @ @ - 264 , 7 + 264 , 7 @ @ public class OutboundTcpConnection extends Thread <nl> if ( targetVersion > maxTargetVersion ) <nl> { <nl> logger . debug ( " Target max version is { } ; will reconnect with that version " , maxTargetVersion ) ; <nl> - Gossiper . instance . setVersion ( poolReference . endPoint ( ) , maxTargetVersion ) ; <nl> + MessagingService . instance ( ) . setVersion ( poolReference . endPoint ( ) , maxTargetVersion ) ; <nl> disconnect ( ) ; <nl> return false ; <nl> } <nl> @ @ - 273 , 7 + 273 , 7 @ @ public class OutboundTcpConnection extends Thread <nl> { <nl> logger . debug ( " Detected higher max version { } ( using { } ) ; will reconnect when queued messages are done " , <nl> maxTargetVersion , targetVersion ) ; <nl> - Gossiper . instance . setVersion ( poolReference . endPoint ( ) , Math . min ( MessagingService . current _ version , maxTargetVersion ) ) ; <nl> + MessagingService . instance ( ) . setVersion ( poolReference . endPoint ( ) , Math . min ( MessagingService . current _ version , maxTargetVersion ) ) ; <nl> softCloseSocket ( ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / AntiEntropyService . java b / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> index 08d4dd5 . . b26574e 100644 <nl> - - - a / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> + + + b / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> @ @ - 636 , 7 + 636 , 7 @ @ public class AntiEntropyService <nl> return ; <nl> } <nl> <nl> - if ( Gossiper . instance . getVersion ( endpoint ) < MessagingService . VERSION _ 11 & & isSequential ) <nl> + if ( MessagingService . instance ( ) . getVersion ( endpoint ) < MessagingService . VERSION _ 11 & & isSequential ) <nl> { <nl> logger . info ( String . format ( " [ repair # % s ] Cannot repair using snapshots as node % s is pre - 1 . 1 " , getName ( ) , endpoint ) ) ; <nl> return ; <nl> @ @ - 979 , 7 + 979 , 7 @ @ public class AntiEntropyService <nl> StreamingRepairTask task = StreamingRepairTask . create ( r1 . endpoint , r2 . endpoint , tablename , cfname , differences , callback ) ; <nl> <nl> / / Pre 1 . 0 , nodes don ' t know how to handle forwarded streaming task so don ' t bother <nl> - if ( task . isLocalTask ( ) | | Gossiper . instance . getVersion ( task . dst ) > = MessagingService . VERSION _ 10 ) <nl> + if ( task . isLocalTask ( ) | | MessagingService . instance ( ) . getVersion ( task . dst ) > = MessagingService . VERSION _ 10 ) <nl> task . run ( ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> index cc1c136 . . ec2679c 100644 <nl> - - - a / src / java / org / apache / cassandra / service / MigrationManager . java <nl> + + + b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> @ @ - 85 , 7 + 85 , 7 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> private static void rectifySchema ( UUID theirVersion , final InetAddress endpoint ) <nl> { <nl> / / Can ' t request migrations from nodes with versions younger than 1 . 1 <nl> - if ( Gossiper . instance . getVersion ( endpoint ) < MessagingService . VERSION _ 11 ) <nl> + if ( MessagingService . instance ( ) . getVersion ( endpoint ) < MessagingService . VERSION _ 11 ) <nl> return ; <nl> <nl> if ( Schema . instance . getVersion ( ) . equals ( theirVersion ) ) <nl> @ @ - 204 , 7 + 204 , 7 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> continue ; / / we ' ve delt with localhost already <nl> <nl> / / don ' t send migrations to the nodes with the versions older than < 1 . 1 <nl> - if ( Gossiper . instance . getVersion ( endpoint ) < MessagingService . VERSION _ 11 ) <nl> + if ( MessagingService . instance ( ) . getVersion ( endpoint ) < MessagingService . VERSION _ 11 ) <nl> continue ; <nl> <nl> pushSchemaMutation ( endpoint , schema ) ; <nl> @ @ - 261 , 7 + 261 , 7 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> / / because migration format of the nodes with versions < 1 . 1 is incompatible with older versions <nl> for ( InetAddress node : liveEndpoints ) <nl> { <nl> - if ( Gossiper . instance . getVersion ( node ) > = MessagingService . VERSION _ 11 ) <nl> + if ( MessagingService . instance ( ) . getVersion ( node ) > = MessagingService . VERSION _ 11 ) <nl> { <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " Requesting schema from " + node ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index c76c3c4 . . 64aea28 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 362 , 7 + 362 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> try <nl> { <nl> UUID hostId = StorageService . instance . getTokenMetadata ( ) . getHostId ( target ) ; <nl> - if ( ( hostId = = null ) & & ( Gossiper . instance . getVersion ( target ) < MessagingService . VERSION _ 12 ) ) <nl> + if ( ( hostId = = null ) & & ( MessagingService . instance ( ) . getVersion ( target ) < MessagingService . VERSION _ 12 ) ) <nl> { <nl> logger . warn ( " Unable to store hint for host with missing ID , { } ( old node ? ) " , target . toString ( ) ) ; <nl> return ; <nl> @ @ - 409 , 7 + 409 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> InetAddress target = iter . next ( ) ; <nl> <nl> / / direct writes to local DC or old Cassadra versions <nl> - if ( dataCenter . equals ( localDataCenter ) | | Gossiper . instance . getVersion ( target ) < MessagingService . VERSION _ 11 ) <nl> + if ( dataCenter . equals ( localDataCenter ) | | MessagingService . instance ( ) . getVersion ( target ) < MessagingService . VERSION _ 11 ) <nl> { <nl> / / yes , the loop and non - loop code here are the same ; this is clunky but we want to avoid <nl> / / creating a second iterator since we already have a perfectly good one <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index af34413 . . 0455b1d 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1018 , 7 + 1018 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> / / versions < 1 . 2 . . . . . : STATUS , TOKEN <nl> / / versions > = 1 . 2 . . . . . : STATUS , HOST _ ID , TOKEN , TOKEN , . . . <nl> int tokenPos ; <nl> - if ( Gossiper . instance . getVersion ( endpoint ) > = MessagingService . VERSION _ 12 ) <nl> + if ( MessagingService . instance ( ) . getVersion ( endpoint ) > = MessagingService . VERSION _ 12 ) <nl> { <nl> assert pieces . length > = 3 ; <nl> tokenPos = 2 ; <nl> @ @ - 1048 , 7 + 1048 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> tokenMetadata . addBootstrapToken ( token , endpoint ) ; <nl> calculatePendingRanges ( ) ; <nl> <nl> - if ( Gossiper . instance . getVersion ( endpoint ) > = MessagingService . VERSION _ 12 ) <nl> + if ( MessagingService . instance ( ) . getVersion ( endpoint ) > = MessagingService . VERSION _ 12 ) <nl> tokenMetadata . updateHostId ( UUID . fromString ( pieces [ 1 ] ) , endpoint ) ; <nl> } <nl> <nl> @ @ - 1067 , 7 + 1067 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> / / versions < 1 . 2 . . . . . : STATUS , TOKEN <nl> / / versions > = 1 . 2 . . . . . : STATUS , HOST _ ID , TOKEN , TOKEN , . . . <nl> int tokensPos ; <nl> - if ( Gossiper . instance . getVersion ( endpoint ) > = MessagingService . VERSION _ 12 ) <nl> + if ( MessagingService . instance ( ) . getVersion ( endpoint ) > = MessagingService . VERSION _ 12 ) <nl> { <nl> assert pieces . length > = 3 ; <nl> tokensPos = 2 ; <nl> @ @ - 1084 , 7 + 1084 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> logger . info ( " Node " + endpoint + " state jump to normal " ) ; <nl> <nl> / / Order Matters , TM . updateHostID ( ) should be called before TM . updateNormalToken ( ) , ( see CASSANDRA - 4300 ) . <nl> - if ( Gossiper . instance . getVersion ( endpoint ) > = MessagingService . VERSION _ 12 ) <nl> + if ( MessagingService . instance ( ) . getVersion ( endpoint ) > = MessagingService . VERSION _ 12 ) <nl> tokenMetadata . updateHostId ( UUID . fromString ( pieces [ 1 ] ) , endpoint ) ; <nl> <nl> / / we don ' t want to update if this node is responsible for the token and it has a later startup time than endpoint . <nl> diff - - git a / src / java / org / apache / cassandra / streaming / FileStreamTask . java b / src / java / org / apache / cassandra / streaming / FileStreamTask . java <nl> index b55593f . . 96a0064 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / FileStreamTask . java <nl> + + + b / src / java / org / apache / cassandra / streaming / FileStreamTask . java <nl> @ @ - 129 , 7 + 129 , 7 @ @ public class FileStreamTask extends WrappedRunnable <nl> * / <nl> protected void stream ( ) throws IOException <nl> { <nl> - ByteBuffer headerBuffer = MessagingService . instance ( ) . constructStreamHeader ( header , false , Gossiper . instance . getVersion ( to ) ) ; <nl> + ByteBuffer headerBuffer = MessagingService . instance ( ) . constructStreamHeader ( header , false , MessagingService . instance ( ) . getVersion ( to ) ) ; <nl> / / write header ( this should not be compressed for compatibility with other messages ) <nl> output . write ( ByteBufferUtil . getArray ( headerBuffer ) ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamInSession . java b / src / java / org / apache / cassandra / streaming / StreamInSession . java <nl> index 958924d . . e11838c 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamInSession . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamInSession . java <nl> @ @ - 171 , 7 + 171 , 7 @ @ public class StreamInSession extends AbstractStreamSession <nl> OutboundTcpConnection . write ( message , <nl> String . valueOf ( getSessionId ( ) ) , <nl> out , <nl> - Gossiper . instance . getVersion ( getHost ( ) ) , false ) ; <nl> + MessagingService . instance ( ) . getVersion ( getHost ( ) ) ) ; <nl> out . flush ( ) ; <nl> } <nl> <nl> @ @ - 222 , 7 + 222 , 7 @ @ public class StreamInSession extends AbstractStreamSession <nl> OutboundTcpConnection . write ( reply . createMessage ( ) , <nl> context . right . toString ( ) , <nl> new DataOutputStream ( socket . getOutputStream ( ) ) , <nl> - Gossiper . instance . getVersion ( getHost ( ) ) , false ) ; <nl> + MessagingService . instance ( ) . getVersion ( getHost ( ) ) ) ; <nl> else <nl> logger . debug ( " No socket to reply to { } with ! " , getHost ( ) ) ; <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 70210a8 . . 3829046 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 9 
 + * Wait until the message is being send to decide which serializer must be used ( CASSANDRA - 11393 ) 
 * Fix migration of static thrift column names with non - text comparators ( CASSANDRA - 12147 ) 
 * Fix upgrading sparse tables that are incorrectly marked as dense ( CASSANDRA - 11315 ) 
 * Fix reverse queries ignoring range tombstones ( CASSANDRA - 11733 ) 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 100bcf4 . . b71ebf6 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 1124 , 6 + 1124 , 7 @ @ public class DatabaseDescriptor 
 case READ : 
 return getReadRpcTimeout ( ) ; 
 case RANGE _ SLICE : 
 + case PAGED _ RANGE : 
 return getRangeRpcTimeout ( ) ; 
 case TRUNCATE : 
 return getTruncateRpcTimeout ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java b / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java 
 index 842ad5f . . 99e24c8 100644 
 - - - a / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / PartitionRangeReadCommand . java 
 @ @ - 253 , 12 + 253 , 9 @ @ public class PartitionRangeReadCommand extends ReadCommand 
 
 public MessageOut < ReadCommand > createMessage ( int version ) 
 { 
 - if ( version > = MessagingService . VERSION _ 30 ) 
 - return new MessageOut < > ( MessagingService . Verb . RANGE _ SLICE , this , serializer ) ; 
 - 
 return dataRange ( ) . isPaging ( ) 
 - ? new MessageOut < > ( MessagingService . Verb . PAGED _ RANGE , this , legacyPagedRangeCommandSerializer ) 
 - : new MessageOut < > ( MessagingService . Verb . RANGE _ SLICE , this , legacyRangeSliceCommandSerializer ) ; 
 + ? new MessageOut < > ( MessagingService . Verb . PAGED _ RANGE , this , pagedRangeSerializer ) 
 + : new MessageOut < > ( MessagingService . Verb . RANGE _ SLICE , this , rangeSliceSerializer ) ; 
 } 
 
 protected void appendCQLWhereClause ( StringBuilder sb ) 
 diff - - git a / src / java / org / apache / cassandra / db / ReadCommand . java b / src / java / org / apache / cassandra / db / ReadCommand . java 
 index c792a5a . . 36969f8 100644 
 - - - a / src / java / org / apache / cassandra / db / ReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / ReadCommand . java 
 @ @ - 34 , 6 + 34 , 7 @ @ import org . apache . cassandra . db . transform . Transformation ; 
 import org . apache . cassandra . dht . AbstractBounds ; 
 import org . apache . cassandra . index . Index ; 
 import org . apache . cassandra . index . IndexNotAvailableException ; 
 + import org . apache . cassandra . io . ForwardingVersionedSerializer ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . io . util . DataInputPlus ; 
 import org . apache . cassandra . io . util . DataOutputPlus ; 
 @ @ - 58 , 9 + 59 , 39 @ @ public abstract class ReadCommand implements ReadQuery 
 protected static final Logger logger = LoggerFactory . getLogger ( ReadCommand . class ) ; 
 
 public static final IVersionedSerializer < ReadCommand > serializer = new Serializer ( ) ; 
 + 
 + / / For READ verb : will either dispatch on ' serializer ' for 3 . 0 or ' legacyReadCommandSerializer ' for earlier version . 
 + / / Can be removed ( and replaced by ' serializer ' ) once we drop pre - 3 . 0 backward compatibility . 
 + public static final IVersionedSerializer < ReadCommand > readSerializer = new ForwardingVersionedSerializer < ReadCommand > ( ) 
 + { 
 + protected IVersionedSerializer < ReadCommand > delegate ( int version ) 
 + { 
 + return version < MessagingService . VERSION _ 30 
 + ? legacyReadCommandSerializer : serializer ; 
 + } 
 + } ; 
 + 
 / / For RANGE _ SLICE verb : will either dispatch on ' serializer ' for 3 . 0 or ' legacyRangeSliceCommandSerializer ' for earlier version . 
 / / Can be removed ( and replaced by ' serializer ' ) once we drop pre - 3 . 0 backward compatibility . 
 - public static final IVersionedSerializer < ReadCommand > rangeSliceSerializer = new RangeSliceSerializer ( ) ; 
 + public static final IVersionedSerializer < ReadCommand > rangeSliceSerializer = new ForwardingVersionedSerializer < ReadCommand > ( ) 
 + { 
 + protected IVersionedSerializer < ReadCommand > delegate ( int version ) 
 + { 
 + return version < MessagingService . VERSION _ 30 
 + ? legacyRangeSliceCommandSerializer : serializer ; 
 + } 
 + } ; 
 + 
 + / / For PAGED _ RANGE verb : will either dispatch on ' serializer ' for 3 . 0 or ' legacyPagedRangeCommandSerializer ' for earlier version . 
 + / / Can be removed ( and replaced by ' serializer ' ) once we drop pre - 3 . 0 backward compatibility . 
 + public static final IVersionedSerializer < ReadCommand > pagedRangeSerializer = new ForwardingVersionedSerializer < ReadCommand > ( ) 
 + { 
 + protected IVersionedSerializer < ReadCommand > delegate ( int version ) 
 + { 
 + return version < MessagingService . VERSION _ 30 
 + ? legacyPagedRangeCommandSerializer : serializer ; 
 + } 
 + } ; 
 
 public static final IVersionedSerializer < ReadCommand > legacyRangeSliceCommandSerializer = new LegacyRangeSliceCommandSerializer ( ) ; 
 public static final IVersionedSerializer < ReadCommand > legacyPagedRangeCommandSerializer = new LegacyPagedRangeCommandSerializer ( ) ; 
 @ @ - 567 , 7 + 598 , 6 @ @ public abstract class ReadCommand implements ReadQuery 
 
 public void serialize ( ReadCommand command , DataOutputPlus out , int version ) throws IOException 
 { 
 - / / for serialization , createLegacyMessage ( ) should cause legacyReadCommandSerializer to be used directly 
 assert version > = MessagingService . VERSION _ 30 ; 
 
 out . writeByte ( command . kind . ordinal ( ) ) ; 
 @ @ - 587 , 8 + 617 , 7 @ @ public abstract class ReadCommand implements ReadQuery 
 
 public ReadCommand deserialize ( DataInputPlus in , int version ) throws IOException 
 { 
 - if ( version < MessagingService . VERSION _ 30 ) 
 - return legacyReadCommandSerializer . deserialize ( in , version ) ; 
 + assert version > = MessagingService . VERSION _ 30 ; 
 
 Kind kind = Kind . values ( ) [ in . readByte ( ) ] ; 
 int flags = in . readByte ( ) ; 
 @ @ - 628 , 7 + 657 , 6 @ @ public abstract class ReadCommand implements ReadQuery 
 
 public long serializedSize ( ReadCommand command , int version ) 
 { 
 - / / for serialization , createLegacyMessage ( ) should cause legacyReadCommandSerializer to be used directly 
 assert version > = MessagingService . VERSION _ 30 ; 
 
 return 2 / / kind + flags 
 @ @ - 643 , 33 + 671 , 6 @ @ public abstract class ReadCommand implements ReadQuery 
 } 
 } 
 
 - / / Dispatch to either Serializer or LegacyRangeSliceCommandSerializer . Only useful as long as we maintain pre - 3 . 0 
 - / / compatibility 
 - private static class RangeSliceSerializer implements IVersionedSerializer < ReadCommand > 
 - { 
 - public void serialize ( ReadCommand command , DataOutputPlus out , int version ) throws IOException 
 - { 
 - if ( version < MessagingService . VERSION _ 30 ) 
 - legacyRangeSliceCommandSerializer . serialize ( command , out , version ) ; 
 - else 
 - serializer . serialize ( command , out , version ) ; 
 - } 
 - 
 - public ReadCommand deserialize ( DataInputPlus in , int version ) throws IOException 
 - { 
 - return version < MessagingService . VERSION _ 30 
 - ? legacyRangeSliceCommandSerializer . deserialize ( in , version ) 
 - : serializer . deserialize ( in , version ) ; 
 - } 
 - 
 - public long serializedSize ( ReadCommand command , int version ) 
 - { 
 - return version < MessagingService . VERSION _ 30 
 - ? legacyRangeSliceCommandSerializer . serializedSize ( command , version ) 
 - : serializer . serializedSize ( command , version ) ; 
 - } 
 - } 
 - 
 private enum LegacyType 
 { 
 GET _ BY _ NAMES ( ( byte ) 1 ) , 
 diff - - git a / src / java / org / apache / cassandra / db / ReadResponse . java b / src / java / org / apache / cassandra / db / ReadResponse . java 
 index 8bd1be6 . . 12a200f 100644 
 - - - a / src / java / org / apache / cassandra / db / ReadResponse . java 
 + + + b / src / java / org / apache / cassandra / db / ReadResponse . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import org . apache . cassandra . db . filter . ColumnFilter ; 
 import org . apache . cassandra . db . rows . * ; 
 import org . apache . cassandra . db . partitions . * ; 
 import org . apache . cassandra . dht . * ; 
 + import org . apache . cassandra . io . ForwardingVersionedSerializer ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . io . util . DataInputBuffer ; 
 import org . apache . cassandra . io . util . DataInputPlus ; 
 @ @ - 46 , 11 + 47 , 20 @ @ public abstract class ReadResponse 
 { 
 / / Serializer for single partition read response 
 public static final IVersionedSerializer < ReadResponse > serializer = new Serializer ( ) ; 
 - / / Serializer for partition range read response ( this actually delegate to ' serializer ' in 3 . 0 and to 
 - / / ' legacyRangeSliceReplySerializer ' in older version . 
 - public static final IVersionedSerializer < ReadResponse > rangeSliceSerializer = new RangeSliceSerializer ( ) ; 
 / / Serializer for the pre - 3 . 0 rang slice responses . 
 public static final IVersionedSerializer < ReadResponse > legacyRangeSliceReplySerializer = new LegacyRangeSliceReplySerializer ( ) ; 
 + / / Serializer for partition range read response ( this actually delegate to ' serializer ' in 3 . 0 and to 
 + / / ' legacyRangeSliceReplySerializer ' in older version . 
 + public static final IVersionedSerializer < ReadResponse > rangeSliceSerializer = new ForwardingVersionedSerializer < ReadResponse > ( ) 
 + { 
 + @ Override 
 + protected IVersionedSerializer < ReadResponse > delegate ( int version ) 
 + { 
 + return version < MessagingService . VERSION _ 30 
 + ? legacyRangeSliceReplySerializer 
 + : serializer ; 
 + } 
 + } ; 
 
 / / This is used only when serializing data responses and we can ' t it easily in other cases . So this can be null , which is slighly 
 / / hacky , but as this hack doesn ' t escape this class , and it ' s easy enough to validate that it ' s not null when we need , it ' s " good enough " . 
 @ @ - 411 , 31 + 421 , 6 @ @ public abstract class ReadResponse 
 } 
 } 
 
 - private static class RangeSliceSerializer implements IVersionedSerializer < ReadResponse > 
 - { 
 - public void serialize ( ReadResponse response , DataOutputPlus out , int version ) throws IOException 
 - { 
 - if ( version < MessagingService . VERSION _ 30 ) 
 - legacyRangeSliceReplySerializer . serialize ( response , out , version ) ; 
 - else 
 - serializer . serialize ( response , out , version ) ; 
 - } 
 - 
 - public ReadResponse deserialize ( DataInputPlus in , int version ) throws IOException 
 - { 
 - return version < MessagingService . VERSION _ 30 
 - ? legacyRangeSliceReplySerializer . deserialize ( in , version ) 
 - : serializer . deserialize ( in , version ) ; 
 - } 
 - 
 - public long serializedSize ( ReadResponse response , int version ) 
 - { 
 - return version < MessagingService . VERSION _ 30 
 - ? legacyRangeSliceReplySerializer . serializedSize ( response , version ) 
 - : serializer . serializedSize ( response , version ) ; 
 - } 
 - } 
 - 
 private static class LegacyRangeSliceReplySerializer implements IVersionedSerializer < ReadResponse > 
 { 
 public void serialize ( ReadResponse response , DataOutputPlus out , int version ) throws IOException 
 @ @ - 477 , 6 + 462 , 8 @ @ public abstract class ReadResponse 
 
 public ReadResponse deserialize ( DataInputPlus in , int version ) throws IOException 
 { 
 + assert version < MessagingService . VERSION _ 30 ; 
 + 
 int partitionCount = in . readInt ( ) ; 
 ArrayList < ImmutableBTreePartition > partitions = new ArrayList < > ( partitionCount ) ; 
 for ( int i = 0 ; i < partitionCount ; i + + ) 
 diff - - git a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 index 6784770 . . 73eb9bd 100644 
 - - - a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 @ @ - 894 , 7 + 894 , 7 @ @ public class SinglePartitionReadCommand extends ReadCommand 
 
 public MessageOut < ReadCommand > createMessage ( int version ) 
 { 
 - return new MessageOut < > ( MessagingService . Verb . READ , this , version < MessagingService . VERSION _ 30 ? legacyReadCommandSerializer : serializer ) ; 
 + return new MessageOut < > ( MessagingService . Verb . READ , this , readSerializer ) ; 
 } 
 
 protected void appendCQLWhereClause ( StringBuilder sb ) 
 diff - - git a / src / java / org / apache / cassandra / io / ForwardingVersionedSerializer . java b / src / java / org / apache / cassandra / io / ForwardingVersionedSerializer . java 
 new file mode 100644 
 index 0000000 . . 64f91d7 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / io / ForwardingVersionedSerializer . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . io ; 
 + 
 + import java . io . IOException ; 
 + 
 + import org . apache . cassandra . io . util . DataInputPlus ; 
 + import org . apache . cassandra . io . util . DataOutputPlus ; 
 + 
 + / * * 
 + * A serializer which forwards all its method calls to another serializer . Subclasses should override one or more 
 + * methods to modify the behavior of the backing serializer as desired per the decorator pattern . 
 + * / 
 + public abstract class ForwardingVersionedSerializer < T > implements IVersionedSerializer < T > 
 + { 
 + protected ForwardingVersionedSerializer ( ) 
 + { 
 + } 
 + 
 + / * * 
 + * Returns the backing delegate instance that methods are forwarded to . 
 + * 
 + * @ param version the server version 
 + * @ return the backing delegate instance that methods are forwarded to . 
 + * / 
 + protected abstract IVersionedSerializer < T > delegate ( int version ) ; 
 + 
 + public void serialize ( T t , DataOutputPlus out , int version ) throws IOException 
 + { 
 + delegate ( version ) . serialize ( t , out , version ) ; 
 + } 
 + 
 + public T deserialize ( DataInputPlus in , int version ) throws IOException 
 + { 
 + return delegate ( version ) . deserialize ( in , version ) ; 
 + } 
 + 
 + public long serializedSize ( T t , int version ) 
 + { 
 + return delegate ( version ) . serializedSize ( t , version ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index fac46eb . . d01419f 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 215 , 9 + 215 , 9 @ @ public final class MessagingService implements MessagingServiceMBean 
 
 put ( Verb . MUTATION , Mutation . serializer ) ; 
 put ( Verb . READ _ REPAIR , Mutation . serializer ) ; 
 - put ( Verb . READ , ReadCommand . serializer ) ; 
 + put ( Verb . READ , ReadCommand . readSerializer ) ; 
 put ( Verb . RANGE _ SLICE , ReadCommand . rangeSliceSerializer ) ; 
 - put ( Verb . PAGED _ RANGE , ReadCommand . legacyPagedRangeCommandSerializer ) ; 
 + put ( Verb . PAGED _ RANGE , ReadCommand . pagedRangeSerializer ) ; 
 put ( Verb . BOOTSTRAP _ TOKEN , BootStrapper . StringSerializer . instance ) ; 
 put ( Verb . REPAIR _ MESSAGE , RepairMessage . serializer ) ; 
 put ( Verb . GOSSIP _ DIGEST _ ACK , GossipDigestAck . serializer ) ; 
 @ @ - 247 , 7 + 247 , 7 @ @ public final class MessagingService implements MessagingServiceMBean 
 put ( Verb . READ _ REPAIR , WriteResponse . serializer ) ; 
 put ( Verb . COUNTER _ MUTATION , WriteResponse . serializer ) ; 
 put ( Verb . RANGE _ SLICE , ReadResponse . rangeSliceSerializer ) ; 
 - put ( Verb . PAGED _ RANGE , ReadResponse . legacyRangeSliceReplySerializer ) ; 
 + put ( Verb . PAGED _ RANGE , ReadResponse . rangeSliceSerializer ) ; 
 put ( Verb . READ , ReadResponse . serializer ) ; 
 put ( Verb . TRUNCATE , TruncateResponse . serializer ) ; 
 put ( Verb . SNAPSHOT , null ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 06dafe7 . . 57c3c49 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 101 , 9 + 101 , 6 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 
 private final Map < InetAddress , Long > expireTimeEndpointMap = new ConcurrentHashMap < InetAddress , Long > ( ) ; 
 
 - / / protocol versions of the other nodes in the cluster 
 - private final ConcurrentMap < InetAddress , Integer > versions = new NonBlockingHashMap < InetAddress , Integer > ( ) ; 
 - 
 private class GossipTask implements Runnable 
 { 
 public void run ( ) 
 @ @ - 200 , 32 + 197 , 6 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 subscribers . remove ( subscriber ) ; 
 } 
 
 - public Integer setVersion ( InetAddress address , int version ) 
 - { 
 - logger . debug ( " Setting version { } for { } " , version , address ) ; 
 - return versions . put ( address , version ) ; 
 - } 
 - 
 - public void resetVersion ( InetAddress endpoint ) 
 - { 
 - logger . debug ( " Reseting version for { } " , endpoint ) ; 
 - versions . remove ( endpoint ) ; 
 - } 
 - 
 - public Integer getVersion ( InetAddress address ) 
 - { 
 - Integer v = versions . get ( address ) ; 
 - if ( v = = null ) 
 - { 
 - / / we don ' t know the version . assume current . we ' ll know soon enough if that was incorrect . 
 - logger . trace ( " Assuming current protocol version for { } " , address ) ; 
 - return MessagingService . current _ version ; 
 - } 
 - else 
 - return v ; 
 - } 
 - 
 - 
 public Set < InetAddress > getLiveMembers ( ) 
 { 
 Set < InetAddress > liveMbrs = new HashSet < InetAddress > ( liveEndpoints ) ; 
 @ @ - 304 , 7 + 275 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 unreachableEndpoints . remove ( endpoint ) ; 
 / / do not remove endpointState until the quarantine expires 
 FailureDetector . instance . remove ( endpoint ) ; 
 - versions . remove ( endpoint ) ; 
 + MessagingService . instance ( ) . resetVersion ( endpoint ) ; 
 quarantineEndpoint ( endpoint ) ; 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " removing endpoint " + endpoint ) ; 
 @ @ - 1115 , 11 + 1086 , 6 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 } 
 } 
 
 - public int getVersion ( String address ) throws UnknownHostException 
 - { 
 - return getVersion ( InetAddress . getByName ( address ) ) ; 
 - } 
 - 
 public long getEndpointDowntime ( String address ) throws UnknownHostException 
 { 
 return getEndpointDowntime ( InetAddress . getByName ( address ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / gms / GossiperMBean . java b / src / java / org / apache / cassandra / gms / GossiperMBean . java 
 index 806e77d . . 521fd21 100644 
 - - - a / src / java / org / apache / cassandra / gms / GossiperMBean . java 
 + + + b / src / java / org / apache / cassandra / gms / GossiperMBean . java 
 @ @ - 21 , 8 + 21 , 6 @ @ import java . net . UnknownHostException ; 
 
 public interface GossiperMBean 
 { 
 - public int getVersion ( String address ) throws UnknownHostException ; 
 - 
 public long getEndpointDowntime ( String address ) throws UnknownHostException ; 
 
 public int getCurrentGenerationNumber ( String address ) throws UnknownHostException ; 
 diff - - git a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 index e808c7e . . 7966605 100644 
 - - - a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 @ @ - 113 , 7 + 113 , 7 @ @ public class IncomingTcpConnection extends Thread 
 logger . info ( " Received messages from newer protocol version { } . Ignoring " , version ) ; 
 return ; 
 } 
 - Gossiper . instance . setVersion ( from , Math . min ( MessagingService . current _ version , maxVersion ) ) ; 
 + MessagingService . instance ( ) . setVersion ( from , Math . min ( MessagingService . current _ version , maxVersion ) ) ; 
 logger . debug ( " set version for { } to { } " , from , Math . min ( MessagingService . current _ version , maxVersion ) ) ; 
 / / outbound side will reconnect if necessary to upgrade version 
 
 @ @ - 137 , 7 + 137 , 7 @ @ public class IncomingTcpConnection extends Thread 
 logger . info ( " Received messages from newer protocol version . Ignoring " ) ; 
 return ; 
 } 
 - int lastVersion = Gossiper . instance . setVersion ( from , version ) ; 
 + int lastVersion = MessagingService . instance ( ) . setVersion ( from , version ) ; 
 logger . debug ( " set version for { } to { } " , from , version ) ; 
 if ( lastVersion < version ) 
 { 
 @ @ - 200 , 7 + 200 , 7 @ @ public class IncomingTcpConnection extends Thread 
 { 
 / / reset version here , since we set when starting an incoming socket 
 if ( from ! = null ) 
 - Gossiper . instance . resetVersion ( from ) ; 
 + MessagingService . instance ( ) . resetVersion ( from ) ; 
 try 
 { 
 socket . close ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index ed9e5b3 . . a9cb1a6 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 287 , 6 + 287 , 9 @ @ public final class MessagingService implements MessagingServiceMBean 
 private final List < ILatencySubscriber > subscribers = new ArrayList < ILatencySubscriber > ( ) ; 
 private static final long DEFAULT _ CALLBACK _ TIMEOUT = DatabaseDescriptor . getRpcTimeout ( ) ; 
 
 + / / protocol versions of the other nodes in the cluster 
 + private final ConcurrentMap < InetAddress , Integer > versions = new NonBlockingHashMap < InetAddress , Integer > ( ) ; 
 + 
 private static class MSHandle 
 { 
 public static final MessagingService instance = new MessagingService ( ) ; 
 @ @ - 761 , 6 + 764 , 36 @ @ public final class MessagingService implements MessagingServiceMBean 
 return buffer ; 
 } 
 
 + public Integer setVersion ( InetAddress address , int version ) 
 + { 
 + logger . debug ( " Setting version { } for { } " , version , address ) ; 
 + return versions . put ( address , version ) ; 
 + } 
 + 
 + public void resetVersion ( InetAddress endpoint ) 
 + { 
 + logger . debug ( " Reseting version for { } " , endpoint ) ; 
 + versions . remove ( endpoint ) ; 
 + } 
 + 
 + public Integer getVersion ( InetAddress address ) 
 + { 
 + Integer v = versions . get ( address ) ; 
 + if ( v = = null ) 
 + { 
 + / / we don ' t know the version . assume current . we ' ll know soon enough if that was incorrect . 
 + logger . trace ( " Assuming current protocol version for { } " , address ) ; 
 + return MessagingService . current _ version ; 
 + } 
 + else 
 + return v ; 
 + } 
 + 
 + public int getVersion ( String address ) throws UnknownHostException 
 + { 
 + return getVersion ( InetAddress . getByName ( address ) ) ; 
 + } 
 + 
 public void incrementDroppedMessages ( Verb verb ) 
 { 
 assert DROPPABLE _ VERBS . contains ( verb ) : " Verb " + verb + " should not legally be dropped " ; 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingServiceMBean . java b / src / java / org / apache / cassandra / net / MessagingServiceMBean . java 
 index 17621af . . ff39e23 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingServiceMBean . java 
 @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . net ; 
 
 
 
 + import java . net . UnknownHostException ; 
 import java . util . Map ; 
 
 / * * 
 @ @ - 81 , 4 + 82 , 6 @ @ public interface MessagingServiceMBean 
 * Number of timeouts since last check per host . 
 * / 
 public Map < String , Long > getRecentTimeoutsPerHost ( ) ; 
 + 
 + public int getVersion ( String address ) throws UnknownHostException ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 index a123072 . . a5d8181 100644 
 - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 @ @ - 241 , 7 + 241 , 7 @ @ public class OutboundTcpConnection extends Thread 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " attempting to connect to " + poolReference . endPoint ( ) ) ; 
 
 - targetVersion = Gossiper . instance . getVersion ( poolReference . endPoint ( ) ) ; 
 + targetVersion = MessagingService . instance ( ) . getVersion ( poolReference . endPoint ( ) ) ; 
 
 long start = System . currentTimeMillis ( ) ; 
 while ( System . currentTimeMillis ( ) < start + DatabaseDescriptor . getRpcTimeout ( ) ) 
 @ @ - 264 , 7 + 264 , 7 @ @ public class OutboundTcpConnection extends Thread 
 if ( targetVersion > maxTargetVersion ) 
 { 
 logger . debug ( " Target max version is { } ; will reconnect with that version " , maxTargetVersion ) ; 
 - Gossiper . instance . setVersion ( poolReference . endPoint ( ) , maxTargetVersion ) ; 
 + MessagingService . instance ( ) . setVersion ( poolReference . endPoint ( ) , maxTargetVersion ) ; 
 disconnect ( ) ; 
 return false ; 
 } 
 @ @ - 273 , 7 + 273 , 7 @ @ public class OutboundTcpConnection extends Thread 
 { 
 logger . debug ( " Detected higher max version { } ( using { } ) ; will reconnect when queued messages are done " , 
 maxTargetVersion , targetVersion ) ; 
 - Gossiper . instance . setVersion ( poolReference . endPoint ( ) , Math . min ( MessagingService . current _ version , maxTargetVersion ) ) ; 
 + MessagingService . instance ( ) . setVersion ( poolReference . endPoint ( ) , Math . min ( MessagingService . current _ version , maxTargetVersion ) ) ; 
 softCloseSocket ( ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / service / AntiEntropyService . java b / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 index 08d4dd5 . . b26574e 100644 
 - - - a / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 + + + b / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 @ @ - 636 , 7 + 636 , 7 @ @ public class AntiEntropyService 
 return ; 
 } 
 
 - if ( Gossiper . instance . getVersion ( endpoint ) < MessagingService . VERSION _ 11 & & isSequential ) 
 + if ( MessagingService . instance ( ) . getVersion ( endpoint ) < MessagingService . VERSION _ 11 & & isSequential ) 
 { 
 logger . info ( String . format ( " [ repair # % s ] Cannot repair using snapshots as node % s is pre - 1 . 1 " , getName ( ) , endpoint ) ) ; 
 return ; 
 @ @ - 979 , 7 + 979 , 7 @ @ public class AntiEntropyService 
 StreamingRepairTask task = StreamingRepairTask . create ( r1 . endpoint , r2 . endpoint , tablename , cfname , differences , callback ) ; 
 
 / / Pre 1 . 0 , nodes don ' t know how to handle forwarded streaming task so don ' t bother 
 - if ( task . isLocalTask ( ) | | Gossiper . instance . getVersion ( task . dst ) > = MessagingService . VERSION _ 10 ) 
 + if ( task . isLocalTask ( ) | | MessagingService . instance ( ) . getVersion ( task . dst ) > = MessagingService . VERSION _ 10 ) 
 task . run ( ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java 
 index cc1c136 . . ec2679c 100644 
 - - - a / src / java / org / apache / cassandra / service / MigrationManager . java 
 + + + b / src / java / org / apache / cassandra / service / MigrationManager . java 
 @ @ - 85 , 7 + 85 , 7 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 private static void rectifySchema ( UUID theirVersion , final InetAddress endpoint ) 
 { 
 / / Can ' t request migrations from nodes with versions younger than 1 . 1 
 - if ( Gossiper . instance . getVersion ( endpoint ) < MessagingService . VERSION _ 11 ) 
 + if ( MessagingService . instance ( ) . getVersion ( endpoint ) < MessagingService . VERSION _ 11 ) 
 return ; 
 
 if ( Schema . instance . getVersion ( ) . equals ( theirVersion ) ) 
 @ @ - 204 , 7 + 204 , 7 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 continue ; / / we ' ve delt with localhost already 
 
 / / don ' t send migrations to the nodes with the versions older than < 1 . 1 
 - if ( Gossiper . instance . getVersion ( endpoint ) < MessagingService . VERSION _ 11 ) 
 + if ( MessagingService . instance ( ) . getVersion ( endpoint ) < MessagingService . VERSION _ 11 ) 
 continue ; 
 
 pushSchemaMutation ( endpoint , schema ) ; 
 @ @ - 261 , 7 + 261 , 7 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 / / because migration format of the nodes with versions < 1 . 1 is incompatible with older versions 
 for ( InetAddress node : liveEndpoints ) 
 { 
 - if ( Gossiper . instance . getVersion ( node ) > = MessagingService . VERSION _ 11 ) 
 + if ( MessagingService . instance ( ) . getVersion ( node ) > = MessagingService . VERSION _ 11 ) 
 { 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " Requesting schema from " + node ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index c76c3c4 . . 64aea28 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 362 , 7 + 362 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 try 
 { 
 UUID hostId = StorageService . instance . getTokenMetadata ( ) . getHostId ( target ) ; 
 - if ( ( hostId = = null ) & & ( Gossiper . instance . getVersion ( target ) < MessagingService . VERSION _ 12 ) ) 
 + if ( ( hostId = = null ) & & ( MessagingService . instance ( ) . getVersion ( target ) < MessagingService . VERSION _ 12 ) ) 
 { 
 logger . warn ( " Unable to store hint for host with missing ID , { } ( old node ? ) " , target . toString ( ) ) ; 
 return ; 
 @ @ - 409 , 7 + 409 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 InetAddress target = iter . next ( ) ; 
 
 / / direct writes to local DC or old Cassadra versions 
 - if ( dataCenter . equals ( localDataCenter ) | | Gossiper . instance . getVersion ( target ) < MessagingService . VERSION _ 11 ) 
 + if ( dataCenter . equals ( localDataCenter ) | | MessagingService . instance ( ) . getVersion ( target ) < MessagingService . VERSION _ 11 ) 
 { 
 / / yes , the loop and non - loop code here are the same ; this is clunky but we want to avoid 
 / / creating a second iterator since we already have a perfectly good one 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index af34413 . . 0455b1d 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1018 , 7 + 1018 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 / / versions < 1 . 2 . . . . . : STATUS , TOKEN 
 / / versions > = 1 . 2 . . . . . : STATUS , HOST _ ID , TOKEN , TOKEN , . . . 
 int tokenPos ; 
 - if ( Gossiper . instance . getVersion ( endpoint ) > = MessagingService . VERSION _ 12 ) 
 + if ( MessagingService . instance ( ) . getVersion ( endpoint ) > = MessagingService . VERSION _ 12 ) 
 { 
 assert pieces . length > = 3 ; 
 tokenPos = 2 ; 
 @ @ - 1048 , 7 + 1048 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 tokenMetadata . addBootstrapToken ( token , endpoint ) ; 
 calculatePendingRanges ( ) ; 
 
 - if ( Gossiper . instance . getVersion ( endpoint ) > = MessagingService . VERSION _ 12 ) 
 + if ( MessagingService . instance ( ) . getVersion ( endpoint ) > = MessagingService . VERSION _ 12 ) 
 tokenMetadata . updateHostId ( UUID . fromString ( pieces [ 1 ] ) , endpoint ) ; 
 } 
 
 @ @ - 1067 , 7 + 1067 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 / / versions < 1 . 2 . . . . . : STATUS , TOKEN 
 / / versions > = 1 . 2 . . . . . : STATUS , HOST _ ID , TOKEN , TOKEN , . . . 
 int tokensPos ; 
 - if ( Gossiper . instance . getVersion ( endpoint ) > = MessagingService . VERSION _ 12 ) 
 + if ( MessagingService . instance ( ) . getVersion ( endpoint ) > = MessagingService . VERSION _ 12 ) 
 { 
 assert pieces . length > = 3 ; 
 tokensPos = 2 ; 
 @ @ - 1084 , 7 + 1084 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 logger . info ( " Node " + endpoint + " state jump to normal " ) ; 
 
 / / Order Matters , TM . updateHostID ( ) should be called before TM . updateNormalToken ( ) , ( see CASSANDRA - 4300 ) . 
 - if ( Gossiper . instance . getVersion ( endpoint ) > = MessagingService . VERSION _ 12 ) 
 + if ( MessagingService . instance ( ) . getVersion ( endpoint ) > = MessagingService . VERSION _ 12 ) 
 tokenMetadata . updateHostId ( UUID . fromString ( pieces [ 1 ] ) , endpoint ) ; 
 
 / / we don ' t want to update if this node is responsible for the token and it has a later startup time than endpoint . 
 diff - - git a / src / java / org / apache / cassandra / streaming / FileStreamTask . java b / src / java / org / apache / cassandra / streaming / FileStreamTask . java 
 index b55593f . . 96a0064 100644 
 - - - a / src / java / org / apache / cassandra / streaming / FileStreamTask . java 
 + + + b / src / java / org / apache / cassandra / streaming / FileStreamTask . java 
 @ @ - 129 , 7 + 129 , 7 @ @ public class FileStreamTask extends WrappedRunnable 
 * / 
 protected void stream ( ) throws IOException 
 { 
 - ByteBuffer headerBuffer = MessagingService . instance ( ) . constructStreamHeader ( header , false , Gossiper . instance . getVersion ( to ) ) ; 
 + ByteBuffer headerBuffer = MessagingService . instance ( ) . constructStreamHeader ( header , false , MessagingService . instance ( ) . getVersion ( to ) ) ; 
 / / write header ( this should not be compressed for compatibility with other messages ) 
 output . write ( ByteBufferUtil . getArray ( headerBuffer ) ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamInSession . java b / src / java / org / apache / cassandra / streaming / StreamInSession . java 
 index 958924d . . e11838c 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamInSession . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamInSession . java 
 @ @ - 171 , 7 + 171 , 7 @ @ public class StreamInSession extends AbstractStreamSession 
 OutboundTcpConnection . write ( message , 
 String . valueOf ( getSessionId ( ) ) , 
 out , 
 - Gossiper . instance . getVersion ( getHost ( ) ) , false ) ; 
 + MessagingService . instance ( ) . getVersion ( getHost ( ) ) ) ; 
 out . flush ( ) ; 
 } 
 
 @ @ - 222 , 7 + 222 , 7 @ @ public class StreamInSession extends AbstractStreamSession 
 OutboundTcpConnection . write ( reply . createMessage ( ) , 
 context . right . toString ( ) , 
 new DataOutputStream ( socket . getOutputStream ( ) ) , 
 - Gossiper . instance . getVersion ( getHost ( ) ) , false ) ; 
 + MessagingService . instance ( ) . getVersion ( getHost ( ) ) ) ; 
 else 
 logger . debug ( " No socket to reply to { } with ! " , getHost ( ) ) ; 
 }
