BLEU SCORE: 0.019648763141608138

TEST MSG: merge from 2 . 0
GENERATED MSG: Log more information when exceeding tombstone _ warn _ threshold

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9575c8b . . ea436f0 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 23 , 6 + 23 , 7 @ @ <nl> * Add logging levels ( minimal , normal or verbose ) to stress tool ( CASSANDRA - 6849 ) <nl> * Fix race condition in Batch CLE ( CASSANDRA - 6860 ) <nl> Merged from 2 . 0 : <nl> + * Log more information when exceeding tombstone _ warn _ threshold ( CASSANDRA - 6865 ) <nl> * Fix truncate to not abort due to unreachable fat clients ( CASSANDRA - 6864 ) <nl> * Fix schema concurrency exceptions ( CASSANDRA - 6841 ) <nl> * Fix leaking validator FH in StreamWriter ( CASSANDRA - 6832 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> index f448db9 . . 325521b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> @ @ - 220 , 8 + 220 , 24 @ @ public class SliceQueryFilter implements IDiskAtomFilter <nl> <nl> Tracing . trace ( " Read { } live and { } tombstoned cells " , columnCounter . live ( ) , columnCounter . ignored ( ) ) ; <nl> if ( respectTombstoneThresholds ( ) & & columnCounter . ignored ( ) > DatabaseDescriptor . getTombstoneWarnThreshold ( ) ) <nl> - logger . warn ( " Read { } live and { } tombstoned cells in { } . { } ( see tombstone _ warn _ threshold ) " , <nl> - columnCounter . live ( ) , columnCounter . ignored ( ) , container . metadata ( ) . ksName , container . metadata ( ) . cfName ) ; <nl> + { <nl> + StringBuilder sb = new StringBuilder ( ) ; <nl> + AbstractType < ? > type = container . metadata ( ) . comparator ; <nl> + for ( ColumnSlice sl : slices ) <nl> + { <nl> + if ( sl = = null ) <nl> + continue ; <nl> + <nl> + sb . append ( ' [ ' ) ; <nl> + sb . append ( type . getString ( sl . start ) ) ; <nl> + sb . append ( ' - ' ) ; <nl> + sb . append ( type . getString ( sl . finish ) ) ; <nl> + sb . append ( ' ] ' ) ; <nl> + } <nl> + <nl> + logger . warn ( " Read { } live and { } tombstoned cells in { } . { } ( see tombstone _ warn _ threshold ) . { } columns was requested , slices = { } , delInfo = { } " , <nl> + columnCounter . live ( ) , columnCounter . ignored ( ) , container . metadata ( ) . ksName , container . metadata ( ) . cfName , count , sb , container . deletionInfo ( ) ) ; <nl> + } <nl> } <nl> <nl> protected boolean respectTombstoneThresholds ( ) <nl> diff - - git a / test / pig / org / apache / cassandra / pig / CqlTableTest . java b / test / pig / org / apache / cassandra / pig / CqlTableTest . java <nl> index e33364f . . 3bbc3d1 100644 <nl> - - - a / test / pig / org / apache / cassandra / pig / CqlTableTest . java <nl> + + + b / test / pig / org / apache / cassandra / pig / CqlTableTest . java <nl> @ @ - 177 , 18 + 177 , 18 @ @ public class CqlTableTest extends PigTestBase <nl> pig . registerQuery ( " STORE recs INTO ' cql : / / cql3ks / collectiontable ? " + defaultParameters + " & output _ query = update + cql3ks . collectiontable + set + n + % 3D + % 3F ' USING CqlStorage ( ) ; " ) ; <nl> pig . executeBatch ( ) ; <nl> <nl> - / / ( book2 , ( ( m , mm ) , ( n , nn ) ) ) <nl> - / / ( book3 , ( ( m , mm ) , ( n , nn ) ) ) <nl> - / / ( book4 , ( ( m , mm ) , ( n , nn ) ) ) <nl> - / / ( book1 , ( ( m , mm ) , ( n , nn ) ) ) <nl> + / / ( book2 , ( ( key2 , value2 ) , ( m , mm ) , ( n , nn ) ) ) <nl> + / / ( book3 , ( ( key3 , value3 ) , ( m , mm ) , ( n , nn ) ) ) <nl> + / / ( book4 , ( ( key4 , value4 ) , ( m , mm ) , ( n , nn ) ) ) <nl> + / / ( book1 , ( ( key1 , value1 ) , ( m , mm ) , ( n , nn ) ) ) <nl> pig . registerQuery ( " result = LOAD ' cql : / / cql3ks / collectiontable ? " + defaultParameters + " ' USING CqlStorage ( ) ; " ) ; <nl> Iterator < Tuple > it = pig . openIterator ( " result " ) ; <nl> - if ( it . hasNext ( ) ) { <nl> + while ( it . hasNext ( ) ) { <nl> Tuple t = it . next ( ) ; <nl> Tuple t1 = ( Tuple ) t . get ( 1 ) ; <nl> - Assert . assertEquals ( t1 . size ( ) , 2 ) ; <nl> - Tuple element1 = ( Tuple ) t1 . get ( 0 ) ; <nl> - Tuple element2 = ( Tuple ) t1 . get ( 1 ) ; <nl> + Assert . assertEquals ( t1 . size ( ) , 3 ) ; <nl> + Tuple element1 = ( Tuple ) t1 . get ( 1 ) ; <nl> + Tuple element2 = ( Tuple ) t1 . get ( 2 ) ; <nl> Assert . assertEquals ( element1 . get ( 0 ) , " m " ) ; <nl> Assert . assertEquals ( element1 . get ( 1 ) , " mm " ) ; <nl> Assert . assertEquals ( element2 . get ( 0 ) , " n " ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9575c8b . . ea436f0 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 23 , 6 + 23 , 7 @ @ 
 * Add logging levels ( minimal , normal or verbose ) to stress tool ( CASSANDRA - 6849 ) 
 * Fix race condition in Batch CLE ( CASSANDRA - 6860 ) 
 Merged from 2 . 0 : 
 + * Log more information when exceeding tombstone _ warn _ threshold ( CASSANDRA - 6865 ) 
 * Fix truncate to not abort due to unreachable fat clients ( CASSANDRA - 6864 ) 
 * Fix schema concurrency exceptions ( CASSANDRA - 6841 ) 
 * Fix leaking validator FH in StreamWriter ( CASSANDRA - 6832 ) 
 diff - - git a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 index f448db9 . . 325521b 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 @ @ - 220 , 8 + 220 , 24 @ @ public class SliceQueryFilter implements IDiskAtomFilter 
 
 Tracing . trace ( " Read { } live and { } tombstoned cells " , columnCounter . live ( ) , columnCounter . ignored ( ) ) ; 
 if ( respectTombstoneThresholds ( ) & & columnCounter . ignored ( ) > DatabaseDescriptor . getTombstoneWarnThreshold ( ) ) 
 - logger . warn ( " Read { } live and { } tombstoned cells in { } . { } ( see tombstone _ warn _ threshold ) " , 
 - columnCounter . live ( ) , columnCounter . ignored ( ) , container . metadata ( ) . ksName , container . metadata ( ) . cfName ) ; 
 + { 
 + StringBuilder sb = new StringBuilder ( ) ; 
 + AbstractType < ? > type = container . metadata ( ) . comparator ; 
 + for ( ColumnSlice sl : slices ) 
 + { 
 + if ( sl = = null ) 
 + continue ; 
 + 
 + sb . append ( ' [ ' ) ; 
 + sb . append ( type . getString ( sl . start ) ) ; 
 + sb . append ( ' - ' ) ; 
 + sb . append ( type . getString ( sl . finish ) ) ; 
 + sb . append ( ' ] ' ) ; 
 + } 
 + 
 + logger . warn ( " Read { } live and { } tombstoned cells in { } . { } ( see tombstone _ warn _ threshold ) . { } columns was requested , slices = { } , delInfo = { } " , 
 + columnCounter . live ( ) , columnCounter . ignored ( ) , container . metadata ( ) . ksName , container . metadata ( ) . cfName , count , sb , container . deletionInfo ( ) ) ; 
 + } 
 } 
 
 protected boolean respectTombstoneThresholds ( ) 
 diff - - git a / test / pig / org / apache / cassandra / pig / CqlTableTest . java b / test / pig / org / apache / cassandra / pig / CqlTableTest . java 
 index e33364f . . 3bbc3d1 100644 
 - - - a / test / pig / org / apache / cassandra / pig / CqlTableTest . java 
 + + + b / test / pig / org / apache / cassandra / pig / CqlTableTest . java 
 @ @ - 177 , 18 + 177 , 18 @ @ public class CqlTableTest extends PigTestBase 
 pig . registerQuery ( " STORE recs INTO ' cql : / / cql3ks / collectiontable ? " + defaultParameters + " & output _ query = update + cql3ks . collectiontable + set + n + % 3D + % 3F ' USING CqlStorage ( ) ; " ) ; 
 pig . executeBatch ( ) ; 
 
 - / / ( book2 , ( ( m , mm ) , ( n , nn ) ) ) 
 - / / ( book3 , ( ( m , mm ) , ( n , nn ) ) ) 
 - / / ( book4 , ( ( m , mm ) , ( n , nn ) ) ) 
 - / / ( book1 , ( ( m , mm ) , ( n , nn ) ) ) 
 + / / ( book2 , ( ( key2 , value2 ) , ( m , mm ) , ( n , nn ) ) ) 
 + / / ( book3 , ( ( key3 , value3 ) , ( m , mm ) , ( n , nn ) ) ) 
 + / / ( book4 , ( ( key4 , value4 ) , ( m , mm ) , ( n , nn ) ) ) 
 + / / ( book1 , ( ( key1 , value1 ) , ( m , mm ) , ( n , nn ) ) ) 
 pig . registerQuery ( " result = LOAD ' cql : / / cql3ks / collectiontable ? " + defaultParameters + " ' USING CqlStorage ( ) ; " ) ; 
 Iterator < Tuple > it = pig . openIterator ( " result " ) ; 
 - if ( it . hasNext ( ) ) { 
 + while ( it . hasNext ( ) ) { 
 Tuple t = it . next ( ) ; 
 Tuple t1 = ( Tuple ) t . get ( 1 ) ; 
 - Assert . assertEquals ( t1 . size ( ) , 2 ) ; 
 - Tuple element1 = ( Tuple ) t1 . get ( 0 ) ; 
 - Tuple element2 = ( Tuple ) t1 . get ( 1 ) ; 
 + Assert . assertEquals ( t1 . size ( ) , 3 ) ; 
 + Tuple element1 = ( Tuple ) t1 . get ( 1 ) ; 
 + Tuple element2 = ( Tuple ) t1 . get ( 2 ) ; 
 Assert . assertEquals ( element1 . get ( 0 ) , " m " ) ; 
 Assert . assertEquals ( element1 . get ( 1 ) , " mm " ) ; 
 Assert . assertEquals ( element2 . get ( 0 ) , " n " ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
