BLEU SCORE: 0.0167475178542289

TEST MSG: Fix Coverity - flagged CASSANDRA - 6230 issues
GENERATED MSG: add settings for buffer sizes ; make unconfigurable ones more sane .

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index b3bc4d2 . . 01455ac 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 1527 , 7 + 1527 , 7 @ @ public class DatabaseDescriptor <nl> <nl> public static long getMaxHintsFileSize ( ) <nl> { <nl> - return conf . max _ hints _ file _ size _ in _ mb * 1024 * 1024 ; <nl> + return conf . max _ hints _ file _ size _ in _ mb * 1024L * 1024L ; <nl> } <nl> <nl> public static boolean isIncrementalBackupsEnabled ( ) <nl> diff - - git a / src / java / org / apache / cassandra / hints / HintsWriter . java b / src / java / org / apache / cassandra / hints / HintsWriter . java <nl> index 300d9cc . . 5cadd35 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / HintsWriter . java <nl> + + + b / src / java / org / apache / cassandra / hints / HintsWriter . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . io . IOException ; <nl> import java . io . OutputStream ; <nl> import java . nio . ByteBuffer ; <nl> import java . nio . channels . FileChannel ; <nl> + import java . nio . charset . StandardCharsets ; <nl> import java . nio . file . Files ; <nl> import java . nio . file . StandardOpenOption ; <nl> import java . util . zip . CRC32 ; <nl> @ @ - 98 , 7 + 99 , 7 @ @ final class HintsWriter implements AutoCloseable <nl> File checksumFile = new File ( directory , descriptor . checksumFileName ( ) ) ; <nl> try ( OutputStream out = Files . newOutputStream ( checksumFile . toPath ( ) ) ) <nl> { <nl> - out . write ( Integer . toHexString ( ( int ) globalCRC . getValue ( ) ) . getBytes ( ) ) ; <nl> + out . write ( Integer . toHexString ( ( int ) globalCRC . getValue ( ) ) . getBytes ( StandardCharsets . UTF _ 8 ) ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> @ @ - 255 , 7 + 256 , 7 @ @ final class HintsWriter implements AutoCloseable <nl> <nl> private void maybeFsync ( ) <nl> { <nl> - if ( position ( ) > = lastSyncPosition + DatabaseDescriptor . getTrickleFsyncIntervalInKb ( ) * 1024 ) <nl> + if ( position ( ) > = lastSyncPosition + DatabaseDescriptor . getTrickleFsyncIntervalInKb ( ) * 1024L ) <nl> fsync ( ) ; <nl> } <nl> <nl> @ @ - 265 , 7 + 266 , 7 @ @ final class HintsWriter implements AutoCloseable <nl> <nl> / / don ' t skip page cache for tiny files , on the assumption that if they are tiny , the target node is probably <nl> / / alive , and if so , the file will be closed and dispatched shortly ( within a minute ) , and the file will be dropped . <nl> - if ( position > = DatabaseDescriptor . getTrickleFsyncIntervalInKb ( ) * 1024 ) <nl> + if ( position > = DatabaseDescriptor . getTrickleFsyncIntervalInKb ( ) * 1024L ) <nl> CLibrary . trySkipCache ( fd , 0 , position - ( position % PAGE _ SIZE ) , file . getPath ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / hints / LegacyHintsMigrator . java b / src / java / org / apache / cassandra / hints / LegacyHintsMigrator . java <nl> index 082e307 . . 196f184 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / LegacyHintsMigrator . java <nl> + + + b / src / java / org / apache / cassandra / hints / LegacyHintsMigrator . java <nl> @ @ - 71 , 7 + 71 , 7 @ @ public final class LegacyHintsMigrator <nl> int meanCellCount = legacyHintsTable . getMeanColumns ( ) ; <nl> double meanPartitionSize = legacyHintsTable . getMeanPartitionSize ( ) ; <nl> <nl> - if ( meanCellCount ! = 0 | | meanPartitionSize ! = 0 ) <nl> + if ( meanCellCount ! = 0 & & meanPartitionSize ! = 0 ) <nl> { <nl> int avgHintSize = ( int ) meanPartitionSize / meanCellCount ; <nl> size = Math . max ( 2 , Math . min ( size , ( 512 < < 10 ) / avgHintSize ) ) ;
NEAREST DIFF (one line): diff - - git a / conf / storage - conf . xml b / conf / storage - conf . xml <nl> index 1cd55ea . . fdda823 100644 <nl> - - - a / conf / storage - conf . xml <nl> + + + b / conf / storage - conf . xml <nl> @ @ - 198 , 6 + 198 , 12 @ @ <nl> < ! - - Memory , Disk , and Performance - - > <nl> < ! - - = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = - - > <nl> <nl> + < ! - - Buffer size to use when performing contiguous column slices . <nl> + Increase this to the size of the column slices you typically <nl> + perform . ( Name - based queries are performed with a buffer size <nl> + of ColumnIndexSizeInKB . ) - - > <nl> + < SlicedBufferSizeInKB > 64 < / SlicedBufferSizeInKB > <nl> + <nl> < ! - - Buffer size to use when flushing memtables to disk . <nl> ( Only one memtable is ever flushed at a time . ) <nl> Increase ( decrease ) the index buffer size relative to the data buffer <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index b576733 . . 2916df6 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 71 , 6 + 71 , 7 @ @ public class DatabaseDescriptor <nl> <nl> private static double flushDataBufferSizeInMB _ = 32 ; <nl> private static double flushIndexBufferSizeInMB _ = 8 ; <nl> + private static int slicedReadBufferSizeInKB _ = 64 ; <nl> private static List < String > tables _ = new ArrayList < String > ( ) ; <nl> private static Set < String > applicationColumnFamilies _ = new HashSet < String > ( ) ; <nl> <nl> @ @ - 239 , 6 + 240 , 12 @ @ public class DatabaseDescriptor <nl> flushIndexBufferSizeInMB _ = Double . parseDouble ( rawFlushIndex ) ; <nl> } <nl> <nl> + String rawSlicedBuffer = xmlUtils . getNodeValue ( " / Storage / SlicedBufferSizeInKB " ) ; <nl> + if ( rawSlicedBuffer ! = null ) <nl> + { <nl> + slicedReadBufferSizeInKB _ = Integer . parseInt ( rawSlicedBuffer ) ; <nl> + } <nl> + <nl> / * TCP port on which the storage system listens * / <nl> String port = xmlUtils . getNodeValue ( " / Storage / StoragePort " ) ; <nl> if ( port ! = null ) <nl> @ @ - 956 , 4 + 963 , 14 @ @ public class DatabaseDescriptor <nl> { <nl> return flushIndexBufferSizeInMB _ ; <nl> } <nl> + <nl> + public static int getIndexedReadBufferSizeInKB ( ) <nl> + { <nl> + return columnIndexSizeInKB _ ; <nl> + } <nl> + <nl> + public static int getSlicedReadBufferSizeInKB ( ) <nl> + { <nl> + return slicedReadBufferSizeInKB _ ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / CommitLog . java b / src / java / org / apache / cassandra / db / CommitLog . java <nl> index a82f762 . . 3e644de 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CommitLog . java <nl> + + + b / src / java / org / apache / cassandra / db / CommitLog . java <nl> @ @ - 249 , 7 + 249 , 8 @ @ public class CommitLog <nl> <nl> for ( File file : clogs ) <nl> { <nl> - BufferedRandomAccessFile reader = new BufferedRandomAccessFile ( file . getAbsolutePath ( ) , " r " ) ; <nl> + int bufferSize = ( int ) Math . min ( file . length ( ) , 32 * 1024 * 1024 ) ; <nl> + BufferedRandomAccessFile reader = new BufferedRandomAccessFile ( file . getAbsolutePath ( ) , " r " , bufferSize ) ; <nl> CommitLogHeader clHeader = readCommitLogHeader ( reader ) ; <nl> / * seek to the lowest position * / <nl> int lowPos = CommitLogHeader . getLowestPosition ( clHeader ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / SSTableNamesIterator . java b / src / java / org / apache / cassandra / db / filter / SSTableNamesIterator . java <nl> index 7b3ccca . . 2d42cbe 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / SSTableNamesIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / SSTableNamesIterator . java <nl> @ @ - 27 , 7 + 27 , 7 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator <nl> if ( position < 0 ) <nl> return ; <nl> <nl> - BufferedRandomAccessFile file = new BufferedRandomAccessFile ( filename , " r " ) ; <nl> + BufferedRandomAccessFile file = new BufferedRandomAccessFile ( filename , " r " , DatabaseDescriptor . getIndexedReadBufferSizeInKB ( ) * 1024 ) ; <nl> try <nl> { <nl> file . seek ( position ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / SSTableSliceIterator . java b / src / java / org / apache / cassandra / db / filter / SSTableSliceIterator . java <nl> index e4d28ae . . 64f5423 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / SSTableSliceIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / SSTableSliceIterator . java <nl> @ @ - 7 , 6 + 7 , 7 @ @ import org . apache . cassandra . db . IColumn ; <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . io . * ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import com . google . common . collect . AbstractIterator ; <nl> <nl> / * * <nl> @ @ - 86 , 7 + 87 , 7 @ @ class SSTableSliceIterator extends AbstractIterator < IColumn > implements ColumnIt <nl> <nl> public ColumnGroupReader ( String filename , String key , long position ) throws IOException <nl> { <nl> - this . file = new BufferedRandomAccessFile ( filename , " r " ) ; <nl> + this . file = new BufferedRandomAccessFile ( filename , " r " , DatabaseDescriptor . getSlicedReadBufferSizeInKB ( ) * 1024 ) ; <nl> <nl> file . seek ( position ) ; <nl> String keyInDisk = file . readUTF ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / FileStruct . java b / src / java / org / apache / cassandra / io / FileStruct . java <nl> index 60048ed . . 321bcb4 100644 <nl> - - - a / src / java / org / apache / cassandra / io / FileStruct . java <nl> + + + b / src / java / org / apache / cassandra / io / FileStruct . java <nl> @ @ - 19 , 10 + 19 , 12 @ @ <nl> package org . apache . cassandra . io ; <nl> <nl> import java . io . IOException ; <nl> + import java . io . File ; <nl> import java . util . Iterator ; <nl> <nl> import org . apache . cassandra . db . IColumn ; <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> <nl> import org . apache . log4j . Logger ; <nl> import com . google . common . collect . AbstractIterator ; <nl> @ @ - 40 , 7 + 42 , 11 @ @ public class FileStruct implements Comparable < FileStruct > , Iterator < String > <nl> <nl> FileStruct ( SSTableReader sstable ) throws IOException <nl> { <nl> - this . file = new BufferedRandomAccessFile ( sstable . getFilename ( ) , " r " , 1024 * 1024 ) ; <nl> + / / TODO this is used for both compactions and key ranges . the buffer sizes we want <nl> + / / to use for these ops are very different . here we are leaning towards the key - range <nl> + / / use case since that is more common . What we really want is to split those <nl> + / / two uses of this class up . <nl> + this . file = new BufferedRandomAccessFile ( sstable . getFilename ( ) , " r " , 256 * 1024 ) ; <nl> this . sstable = sstable ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index b3bc4d2 . . 01455ac 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 1527 , 7 + 1527 , 7 @ @ public class DatabaseDescriptor 
 
 public static long getMaxHintsFileSize ( ) 
 { 
 - return conf . max _ hints _ file _ size _ in _ mb * 1024 * 1024 ; 
 + return conf . max _ hints _ file _ size _ in _ mb * 1024L * 1024L ; 
 } 
 
 public static boolean isIncrementalBackupsEnabled ( ) 
 diff - - git a / src / java / org / apache / cassandra / hints / HintsWriter . java b / src / java / org / apache / cassandra / hints / HintsWriter . java 
 index 300d9cc . . 5cadd35 100644 
 - - - a / src / java / org / apache / cassandra / hints / HintsWriter . java 
 + + + b / src / java / org / apache / cassandra / hints / HintsWriter . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . io . IOException ; 
 import java . io . OutputStream ; 
 import java . nio . ByteBuffer ; 
 import java . nio . channels . FileChannel ; 
 + import java . nio . charset . StandardCharsets ; 
 import java . nio . file . Files ; 
 import java . nio . file . StandardOpenOption ; 
 import java . util . zip . CRC32 ; 
 @ @ - 98 , 7 + 99 , 7 @ @ final class HintsWriter implements AutoCloseable 
 File checksumFile = new File ( directory , descriptor . checksumFileName ( ) ) ; 
 try ( OutputStream out = Files . newOutputStream ( checksumFile . toPath ( ) ) ) 
 { 
 - out . write ( Integer . toHexString ( ( int ) globalCRC . getValue ( ) ) . getBytes ( ) ) ; 
 + out . write ( Integer . toHexString ( ( int ) globalCRC . getValue ( ) ) . getBytes ( StandardCharsets . UTF _ 8 ) ) ; 
 } 
 catch ( IOException e ) 
 { 
 @ @ - 255 , 7 + 256 , 7 @ @ final class HintsWriter implements AutoCloseable 
 
 private void maybeFsync ( ) 
 { 
 - if ( position ( ) > = lastSyncPosition + DatabaseDescriptor . getTrickleFsyncIntervalInKb ( ) * 1024 ) 
 + if ( position ( ) > = lastSyncPosition + DatabaseDescriptor . getTrickleFsyncIntervalInKb ( ) * 1024L ) 
 fsync ( ) ; 
 } 
 
 @ @ - 265 , 7 + 266 , 7 @ @ final class HintsWriter implements AutoCloseable 
 
 / / don ' t skip page cache for tiny files , on the assumption that if they are tiny , the target node is probably 
 / / alive , and if so , the file will be closed and dispatched shortly ( within a minute ) , and the file will be dropped . 
 - if ( position > = DatabaseDescriptor . getTrickleFsyncIntervalInKb ( ) * 1024 ) 
 + if ( position > = DatabaseDescriptor . getTrickleFsyncIntervalInKb ( ) * 1024L ) 
 CLibrary . trySkipCache ( fd , 0 , position - ( position % PAGE _ SIZE ) , file . getPath ( ) ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / hints / LegacyHintsMigrator . java b / src / java / org / apache / cassandra / hints / LegacyHintsMigrator . java 
 index 082e307 . . 196f184 100644 
 - - - a / src / java / org / apache / cassandra / hints / LegacyHintsMigrator . java 
 + + + b / src / java / org / apache / cassandra / hints / LegacyHintsMigrator . java 
 @ @ - 71 , 7 + 71 , 7 @ @ public final class LegacyHintsMigrator 
 int meanCellCount = legacyHintsTable . getMeanColumns ( ) ; 
 double meanPartitionSize = legacyHintsTable . getMeanPartitionSize ( ) ; 
 
 - if ( meanCellCount ! = 0 | | meanPartitionSize ! = 0 ) 
 + if ( meanCellCount ! = 0 & & meanPartitionSize ! = 0 ) 
 { 
 int avgHintSize = ( int ) meanPartitionSize / meanCellCount ; 
 size = Math . max ( 2 , Math . min ( size , ( 512 < < 10 ) / avgHintSize ) ) ;

NEAREST DIFF:
diff - - git a / conf / storage - conf . xml b / conf / storage - conf . xml 
 index 1cd55ea . . fdda823 100644 
 - - - a / conf / storage - conf . xml 
 + + + b / conf / storage - conf . xml 
 @ @ - 198 , 6 + 198 , 12 @ @ 
 < ! - - Memory , Disk , and Performance - - > 
 < ! - - = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = - - > 
 
 + < ! - - Buffer size to use when performing contiguous column slices . 
 + Increase this to the size of the column slices you typically 
 + perform . ( Name - based queries are performed with a buffer size 
 + of ColumnIndexSizeInKB . ) - - > 
 + < SlicedBufferSizeInKB > 64 < / SlicedBufferSizeInKB > 
 + 
 < ! - - Buffer size to use when flushing memtables to disk . 
 ( Only one memtable is ever flushed at a time . ) 
 Increase ( decrease ) the index buffer size relative to the data buffer 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index b576733 . . 2916df6 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 71 , 6 + 71 , 7 @ @ public class DatabaseDescriptor 
 
 private static double flushDataBufferSizeInMB _ = 32 ; 
 private static double flushIndexBufferSizeInMB _ = 8 ; 
 + private static int slicedReadBufferSizeInKB _ = 64 ; 
 private static List < String > tables _ = new ArrayList < String > ( ) ; 
 private static Set < String > applicationColumnFamilies _ = new HashSet < String > ( ) ; 
 
 @ @ - 239 , 6 + 240 , 12 @ @ public class DatabaseDescriptor 
 flushIndexBufferSizeInMB _ = Double . parseDouble ( rawFlushIndex ) ; 
 } 
 
 + String rawSlicedBuffer = xmlUtils . getNodeValue ( " / Storage / SlicedBufferSizeInKB " ) ; 
 + if ( rawSlicedBuffer ! = null ) 
 + { 
 + slicedReadBufferSizeInKB _ = Integer . parseInt ( rawSlicedBuffer ) ; 
 + } 
 + 
 / * TCP port on which the storage system listens * / 
 String port = xmlUtils . getNodeValue ( " / Storage / StoragePort " ) ; 
 if ( port ! = null ) 
 @ @ - 956 , 4 + 963 , 14 @ @ public class DatabaseDescriptor 
 { 
 return flushIndexBufferSizeInMB _ ; 
 } 
 + 
 + public static int getIndexedReadBufferSizeInKB ( ) 
 + { 
 + return columnIndexSizeInKB _ ; 
 + } 
 + 
 + public static int getSlicedReadBufferSizeInKB ( ) 
 + { 
 + return slicedReadBufferSizeInKB _ ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / CommitLog . java b / src / java / org / apache / cassandra / db / CommitLog . java 
 index a82f762 . . 3e644de 100644 
 - - - a / src / java / org / apache / cassandra / db / CommitLog . java 
 + + + b / src / java / org / apache / cassandra / db / CommitLog . java 
 @ @ - 249 , 7 + 249 , 8 @ @ public class CommitLog 
 
 for ( File file : clogs ) 
 { 
 - BufferedRandomAccessFile reader = new BufferedRandomAccessFile ( file . getAbsolutePath ( ) , " r " ) ; 
 + int bufferSize = ( int ) Math . min ( file . length ( ) , 32 * 1024 * 1024 ) ; 
 + BufferedRandomAccessFile reader = new BufferedRandomAccessFile ( file . getAbsolutePath ( ) , " r " , bufferSize ) ; 
 CommitLogHeader clHeader = readCommitLogHeader ( reader ) ; 
 / * seek to the lowest position * / 
 int lowPos = CommitLogHeader . getLowestPosition ( clHeader ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / filter / SSTableNamesIterator . java b / src / java / org / apache / cassandra / db / filter / SSTableNamesIterator . java 
 index 7b3ccca . . 2d42cbe 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / SSTableNamesIterator . java 
 + + + b / src / java / org / apache / cassandra / db / filter / SSTableNamesIterator . java 
 @ @ - 27 , 7 + 27 , 7 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator 
 if ( position < 0 ) 
 return ; 
 
 - BufferedRandomAccessFile file = new BufferedRandomAccessFile ( filename , " r " ) ; 
 + BufferedRandomAccessFile file = new BufferedRandomAccessFile ( filename , " r " , DatabaseDescriptor . getIndexedReadBufferSizeInKB ( ) * 1024 ) ; 
 try 
 { 
 file . seek ( position ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / filter / SSTableSliceIterator . java b / src / java / org / apache / cassandra / db / filter / SSTableSliceIterator . java 
 index e4d28ae . . 64f5423 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / SSTableSliceIterator . java 
 + + + b / src / java / org / apache / cassandra / db / filter / SSTableSliceIterator . java 
 @ @ - 7 , 6 + 7 , 7 @ @ import org . apache . cassandra . db . IColumn ; 
 import org . apache . cassandra . db . ColumnFamily ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . io . * ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import com . google . common . collect . AbstractIterator ; 
 
 / * * 
 @ @ - 86 , 7 + 87 , 7 @ @ class SSTableSliceIterator extends AbstractIterator < IColumn > implements ColumnIt 
 
 public ColumnGroupReader ( String filename , String key , long position ) throws IOException 
 { 
 - this . file = new BufferedRandomAccessFile ( filename , " r " ) ; 
 + this . file = new BufferedRandomAccessFile ( filename , " r " , DatabaseDescriptor . getSlicedReadBufferSizeInKB ( ) * 1024 ) ; 
 
 file . seek ( position ) ; 
 String keyInDisk = file . readUTF ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / FileStruct . java b / src / java / org / apache / cassandra / io / FileStruct . java 
 index 60048ed . . 321bcb4 100644 
 - - - a / src / java / org / apache / cassandra / io / FileStruct . java 
 + + + b / src / java / org / apache / cassandra / io / FileStruct . java 
 @ @ - 19 , 10 + 19 , 12 @ @ 
 package org . apache . cassandra . io ; 
 
 import java . io . IOException ; 
 + import java . io . File ; 
 import java . util . Iterator ; 
 
 import org . apache . cassandra . db . IColumn ; 
 import org . apache . cassandra . db . ColumnFamily ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 
 import org . apache . log4j . Logger ; 
 import com . google . common . collect . AbstractIterator ; 
 @ @ - 40 , 7 + 42 , 11 @ @ public class FileStruct implements Comparable < FileStruct > , Iterator < String > 
 
 FileStruct ( SSTableReader sstable ) throws IOException 
 { 
 - this . file = new BufferedRandomAccessFile ( sstable . getFilename ( ) , " r " , 1024 * 1024 ) ; 
 + / / TODO this is used for both compactions and key ranges . the buffer sizes we want 
 + / / to use for these ops are very different . here we are leaning towards the key - range 
 + / / use case since that is more common . What we really want is to split those 
 + / / two uses of this class up . 
 + this . file = new BufferedRandomAccessFile ( sstable . getFilename ( ) , " r " , 256 * 1024 ) ; 
 this . sstable = sstable ; 
 } 

