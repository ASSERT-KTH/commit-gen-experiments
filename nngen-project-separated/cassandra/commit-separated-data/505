BLEU SCORE: 0.37991784282579627

TEST MSG: remove unused interface
GENERATED MSG: remove unnecessary class

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / io / ISSTableSerializer . java b / src / java / org / apache / cassandra / io / ISSTableSerializer . java <nl> deleted file mode 100644 <nl> index 96a38ac . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / io / ISSTableSerializer . java <nl> + + + / dev / null <nl> @ @ - 1 , 47 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . io ; <nl> - <nl> - import java . io . DataInput ; <nl> - import java . io . IOException ; <nl> - <nl> - import org . apache . cassandra . io . sstable . format . Version ; <nl> - import org . apache . cassandra . io . util . DataOutputPlus ; <nl> - <nl> - public interface ISSTableSerializer < T > <nl> - { <nl> - / * * <nl> - * Serialize the specified type into the specified DataOutputStream <nl> - * instance in the format suited for SSTables . <nl> - * <nl> - * @ param t type that needs to be serialized <nl> - * @ param out DataOutput into which serialization needs to happen . <nl> - * @ throws java . io . IOException <nl> - * / <nl> - public void serializeForSSTable ( T t , DataOutputPlus out ) throws IOException ; <nl> - <nl> - / * * <nl> - * Deserialize into the specified DataInputStream instance in the format <nl> - * suited for SSTables . <nl> - * @ param in DataInput from which deserialization needs to happen . <nl> - * @ param version the version for the sstable we ' re reading from <nl> - * @ throws IOException <nl> - * @ return the type that was deserialized <nl> - * / <nl> - public T deserializeFromSSTable ( DataInput in , Version version ) throws IOException ; <nl> - }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / CounterMutation . java b / src / java / org / apache / cassandra / db / CounterMutation . java <nl> index 9a1c117 . . c3256cc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CounterMutation . java <nl> + + + b / src / java / org / apache / cassandra / db / CounterMutation . java <nl> @ @ - 34 , 7 + 34 , 6 @ @ import org . apache . cassandra . net . MessageOut ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . thrift . ConsistencyLevel ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . HeapAllocator ; <nl> <nl> public class CounterMutation implements IMutation <nl> @ @ - 182 , 8 + 181 , 7 @ @ class CounterMutationSerializer implements IVersionedSerializer < CounterMutation > <nl> <nl> public long serializedSize ( CounterMutation cm , int version ) <nl> { <nl> - int tableSize = FBUtilities . encodedUTF8Length ( cm . consistency ( ) . name ( ) ) ; <nl> return RowMutation . serializer . serializedSize ( cm . rowMutation ( ) , version ) <nl> - + TypeSizes . NATIVE . sizeof ( ( short ) tableSize ) + tableSize ; <nl> + + TypeSizes . NATIVE . sizeof ( cm . consistency ( ) . name ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / RangeSliceCommand . java b / src / java / org / apache / cassandra / db / RangeSliceCommand . java <nl> index 2ad4b5d . . 8516e06 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RangeSliceCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / RangeSliceCommand . java <nl> @ @ - 217 , 14 + 217 , 12 @ @ class RangeSliceCommandSerializer implements IVersionedSerializer < RangeSliceComm <nl> return new RangeSliceCommand ( keyspace , columnFamily , superColumn , pred , range , rowFilter , maxResults , maxIsColumns , isPaging ) ; <nl> } <nl> <nl> - public long serializedSize ( RangeSliceCommand rangeSliceCommand , int version ) <nl> + public long serializedSize ( RangeSliceCommand rsc , int version ) <nl> { <nl> - int ksLength = FBUtilities . encodedUTF8Length ( rangeSliceCommand . keyspace ) ; <nl> - long size = TypeSizes . NATIVE . sizeof ( ksLength ) + ksLength ; <nl> - int cfLength = FBUtilities . encodedUTF8Length ( rangeSliceCommand . column _ family ) ; <nl> - size + = TypeSizes . NATIVE . sizeof ( cfLength ) + cfLength ; <nl> + long size = TypeSizes . NATIVE . sizeof ( rsc . keyspace ) ; <nl> + size + = TypeSizes . NATIVE . sizeof ( rsc . column _ family ) ; <nl> <nl> - ByteBuffer sc = rangeSliceCommand . super _ column ; <nl> + ByteBuffer sc = rsc . super _ column ; <nl> if ( sc ! = null ) <nl> { <nl> size + = TypeSizes . NATIVE . sizeof ( sc . remaining ( ) ) ; <nl> @ @ - 238 , 7 + 236 , 7 @ @ class RangeSliceCommandSerializer implements IVersionedSerializer < RangeSliceComm <nl> TSerializer ser = new TSerializer ( new TBinaryProtocol . Factory ( ) ) ; <nl> try <nl> { <nl> - int predicateLength = ser . serialize ( rangeSliceCommand . predicate ) . length ; <nl> + int predicateLength = ser . serialize ( rsc . predicate ) . length ; <nl> size + = TypeSizes . NATIVE . sizeof ( predicateLength ) ; <nl> size + = predicateLength ; <nl> } <nl> @ @ - 249 , 14 + 247 , 14 @ @ class RangeSliceCommandSerializer implements IVersionedSerializer < RangeSliceComm <nl> <nl> if ( version > = MessagingService . VERSION _ 11 ) <nl> { <nl> - if ( rangeSliceCommand . row _ filter = = null ) <nl> + if ( rsc . row _ filter = = null ) <nl> { <nl> size + = TypeSizes . NATIVE . sizeof ( 0 ) ; <nl> } <nl> else <nl> { <nl> - size + = TypeSizes . NATIVE . sizeof ( rangeSliceCommand . row _ filter . size ( ) ) ; <nl> - for ( IndexExpression expr : rangeSliceCommand . row _ filter ) <nl> + size + = TypeSizes . NATIVE . sizeof ( rsc . row _ filter . size ( ) ) ; <nl> + for ( IndexExpression expr : rsc . row _ filter ) <nl> { <nl> try <nl> { <nl> @ @ - 271 , 12 + 269 , 12 @ @ class RangeSliceCommandSerializer implements IVersionedSerializer < RangeSliceComm <nl> } <nl> } <nl> } <nl> - size + = AbstractBounds . serializer . serializedSize ( rangeSliceCommand . range , version ) ; <nl> - size + = TypeSizes . NATIVE . sizeof ( rangeSliceCommand . maxResults ) ; <nl> + size + = AbstractBounds . serializer . serializedSize ( rsc . range , version ) ; <nl> + size + = TypeSizes . NATIVE . sizeof ( rsc . maxResults ) ; <nl> if ( version > = MessagingService . VERSION _ 11 ) <nl> { <nl> - size + = TypeSizes . NATIVE . sizeof ( rangeSliceCommand . maxIsColumns ) ; <nl> - size + = TypeSizes . NATIVE . sizeof ( rangeSliceCommand . isPaging ) ; <nl> + size + = TypeSizes . NATIVE . sizeof ( rsc . maxIsColumns ) ; <nl> + size + = TypeSizes . NATIVE . sizeof ( rsc . isPaging ) ; <nl> } <nl> return size ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / RowMutation . java b / src / java / org / apache / cassandra / db / RowMutation . java <nl> index 4eae246 . . 5474ab5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RowMutation . java <nl> + + + b / src / java / org / apache / cassandra / db / RowMutation . java <nl> @ @ - 440 , 16 + 440 , 15 @ @ public class RowMutation implements IMutation <nl> <nl> public long serializedSize ( RowMutation rm , int version ) <nl> { <nl> - TypeSizes typeSizes = TypeSizes . NATIVE ; <nl> - int tableSize = FBUtilities . encodedUTF8Length ( rm . getTable ( ) ) ; <nl> + TypeSizes sizes = TypeSizes . NATIVE ; <nl> + int size = sizes . sizeof ( rm . getTable ( ) ) ; <nl> int keySize = rm . key ( ) . remaining ( ) ; <nl> - int size = typeSizes . sizeof ( ( short ) tableSize ) + tableSize ; <nl> - size + = typeSizes . sizeof ( ( short ) keySize ) + keySize ; <nl> + size + = sizes . sizeof ( ( short ) keySize ) + keySize ; <nl> <nl> - size + = typeSizes . sizeof ( rm . modifications . size ( ) ) ; <nl> + size + = sizes . sizeof ( rm . modifications . size ( ) ) ; <nl> for ( Map . Entry < Integer , ColumnFamily > entry : rm . modifications . entrySet ( ) ) <nl> { <nl> - size + = typeSizes . sizeof ( entry . getKey ( ) ) ; <nl> + size + = sizes . sizeof ( entry . getKey ( ) ) ; <nl> size + = ColumnFamily . serializer . serializedSize ( entry . getValue ( ) , TypeSizes . NATIVE ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / SliceByNamesReadCommand . java b / src / java / org / apache / cassandra / db / SliceByNamesReadCommand . java <nl> index 088a5d8 . . 1f92890 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SliceByNamesReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / SliceByNamesReadCommand . java <nl> @ @ - 110 , 22 + 110 , 21 @ @ class SliceByNamesReadCommandSerializer implements IVersionedSerializer < ReadComm <nl> <nl> public long serializedSize ( ReadCommand cmd , int version ) <nl> { <nl> - TypeSizes typeSizes = TypeSizes . NATIVE ; <nl> + TypeSizes sizes = TypeSizes . NATIVE ; <nl> SliceByNamesReadCommand command = ( SliceByNamesReadCommand ) cmd ; <nl> - int size = typeSizes . sizeof ( command . isDigestQuery ( ) ) ; <nl> - int tableSize = FBUtilities . encodedUTF8Length ( command . table ) ; <nl> + int size = sizes . sizeof ( command . isDigestQuery ( ) ) ; <nl> int keySize = command . key . remaining ( ) ; <nl> <nl> - size + = typeSizes . sizeof ( ( short ) tableSize ) + tableSize ; <nl> - size + = typeSizes . sizeof ( keySize ) + keySize ; <nl> - size + = command . queryPath . serializedSize ( typeSizes ) ; <nl> - size + = typeSizes . sizeof ( command . columnNames . size ( ) ) ; <nl> + size + = sizes . sizeof ( command . table ) ; <nl> + size + = sizes . sizeof ( keySize ) + keySize ; <nl> + size + = command . queryPath . serializedSize ( sizes ) ; <nl> + size + = sizes . sizeof ( command . columnNames . size ( ) ) ; <nl> if ( ! command . columnNames . isEmpty ( ) ) <nl> { <nl> for ( ByteBuffer cName : command . columnNames ) <nl> { <nl> int cNameSize = cName . remaining ( ) ; <nl> - size + = typeSizes . sizeof ( ( short ) cNameSize ) + cNameSize ; <nl> + size + = sizes . sizeof ( ( short ) cNameSize ) + cNameSize ; <nl> } <nl> } <nl> return size ; <nl> diff - - git a / src / java / org / apache / cassandra / db / SliceFromReadCommand . java b / src / java / org / apache / cassandra / db / SliceFromReadCommand . java <nl> index e61d217 . . 93c5ba1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SliceFromReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / SliceFromReadCommand . java <nl> @ @ - 184 , 21 + 184 , 20 @ @ class SliceFromReadCommandSerializer implements IVersionedSerializer < ReadCommand <nl> <nl> public long serializedSize ( ReadCommand cmd , int version ) <nl> { <nl> - TypeSizes typeSizes = TypeSizes . NATIVE ; <nl> + TypeSizes sizes = TypeSizes . NATIVE ; <nl> SliceFromReadCommand command = ( SliceFromReadCommand ) cmd ; <nl> - int tableSize = FBUtilities . encodedUTF8Length ( command . table ) ; <nl> int keySize = command . key . remaining ( ) ; <nl> int startSize = command . start . remaining ( ) ; <nl> int finishSize = command . finish . remaining ( ) ; <nl> <nl> - int size = typeSizes . sizeof ( cmd . isDigestQuery ( ) ) ; / / boolean <nl> - size + = typeSizes . sizeof ( ( short ) tableSize ) + tableSize ; <nl> - size + = typeSizes . sizeof ( ( short ) keySize ) + keySize ; <nl> - size + = command . queryPath . serializedSize ( typeSizes ) ; <nl> - size + = typeSizes . sizeof ( ( short ) startSize ) + startSize ; <nl> - size + = typeSizes . sizeof ( ( short ) finishSize ) + finishSize ; <nl> - size + = typeSizes . sizeof ( command . reversed ) ; <nl> - size + = typeSizes . sizeof ( command . count ) ; <nl> + int size = sizes . sizeof ( cmd . isDigestQuery ( ) ) ; / / boolean <nl> + size + = sizes . sizeof ( command . table ) ; <nl> + size + = sizes . sizeof ( ( short ) keySize ) + keySize ; <nl> + size + = command . queryPath . serializedSize ( sizes ) ; <nl> + size + = sizes . sizeof ( ( short ) startSize ) + startSize ; <nl> + size + = sizes . sizeof ( ( short ) finishSize ) + finishSize ; <nl> + size + = sizes . sizeof ( command . reversed ) ; <nl> + size + = sizes . sizeof ( command . count ) ; <nl> return size ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / SnapshotCommand . java b / src / java / org / apache / cassandra / db / SnapshotCommand . java <nl> index c3b8036 . . 43dbdae 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SnapshotCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / SnapshotCommand . java <nl> @ @ - 25 , 8 + 25 , 6 @ @ import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . net . MessageOut ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> <nl> - import static org . apache . cassandra . utils . FBUtilities . serializedUTF8Size ; <nl> - <nl> public class SnapshotCommand <nl> { <nl> public static final SnapshotCommandSerializer serializer = new SnapshotCommandSerializer ( ) ; <nl> @ @ - 80 , 9 + 78 , 9 @ @ class SnapshotCommandSerializer implements IVersionedSerializer < SnapshotCommand > <nl> <nl> public long serializedSize ( SnapshotCommand sc , int version ) <nl> { <nl> - return serializedUTF8Size ( sc . keyspace ) <nl> - + serializedUTF8Size ( sc . column _ family ) <nl> - + serializedUTF8Size ( sc . snapshot _ name ) <nl> + return TypeSizes . NATIVE . sizeof ( sc . keyspace ) <nl> + + TypeSizes . NATIVE . sizeof ( sc . column _ family ) <nl> + + TypeSizes . NATIVE . sizeof ( sc . snapshot _ name ) <nl> + TypeSizes . NATIVE . sizeof ( sc . clear _ snapshot ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / TruncateResponse . java b / src / java / org / apache / cassandra / db / TruncateResponse . java <nl> index 87c9440 . . efbe667 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TruncateResponse . java <nl> + + + b / src / java / org / apache / cassandra / db / TruncateResponse . java <nl> @ @ - 25 , 8 + 25 , 6 @ @ import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . net . MessageOut ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> <nl> - import static org . apache . cassandra . utils . FBUtilities . serializedUTF8Size ; <nl> - <nl> / * * <nl> * This message is sent back the truncate operation and basically specifies if <nl> * the truncate succeeded . <nl> @ @ - 70 , 8 + 68 , 8 @ @ public class TruncateResponse <nl> <nl> public long serializedSize ( TruncateResponse tr , int version ) <nl> { <nl> - return serializedUTF8Size ( tr . keyspace ) <nl> - + serializedUTF8Size ( tr . columnFamily ) <nl> + return TypeSizes . NATIVE . sizeof ( tr . keyspace ) <nl> + + TypeSizes . NATIVE . sizeof ( tr . columnFamily ) <nl> + TypeSizes . NATIVE . sizeof ( tr . success ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / Truncation . java b / src / java / org / apache / cassandra / db / Truncation . java <nl> index f52384f . . f43c8e8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Truncation . java <nl> + + + b / src / java / org / apache / cassandra / db / Truncation . java <nl> @ @ - 24 , 9 + 24 , 6 @ @ import java . io . IOException ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . net . MessageOut ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> - <nl> - import static org . apache . cassandra . utils . FBUtilities . serializedUTF8Size ; <nl> <nl> / * * <nl> * A truncate operation descriptor <nl> @ @ - 72 , 6 + 69 , 6 @ @ class TruncationSerializer implements IVersionedSerializer < Truncation > <nl> <nl> public long serializedSize ( Truncation truncation , int version ) <nl> { <nl> - return serializedUTF8Size ( truncation . keyspace ) + serializedUTF8Size ( truncation . columnFamily ) ; <nl> + return TypeSizes . NATIVE . sizeof ( truncation . keyspace ) + TypeSizes . NATIVE . sizeof ( truncation . columnFamily ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / TypeSizes . java b / src / java / org / apache / cassandra / db / TypeSizes . java <nl> index 6e2f15e . . 26c9f7d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TypeSizes . java <nl> + + + b / src / java / org / apache / cassandra / db / TypeSizes . java <nl> @ @ - 17 , 6 + 17 , 8 @ @ <nl> * / <nl> package org . apache . cassandra . db ; <nl> <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + <nl> public abstract class TypeSizes <nl> { <nl> public static final TypeSizes NATIVE = new NativeDBTypeSizes ( ) ; <nl> @ @ - 32 , 6 + 34 , 31 @ @ public abstract class TypeSizes <nl> public abstract int sizeof ( int value ) ; <nl> public abstract int sizeof ( long value ) ; <nl> <nl> + / * * assumes UTF8 * / <nl> + public int sizeof ( String value ) <nl> + { <nl> + int length = encodedUTF8Length ( value ) ; <nl> + assert length < = Short . MAX _ VALUE ; <nl> + return sizeof ( ( short ) length ) + length ; <nl> + } <nl> + <nl> + public static int encodedUTF8Length ( String st ) <nl> + { <nl> + int strlen = st . length ( ) ; <nl> + int utflen = 0 ; <nl> + for ( int i = 0 ; i < strlen ; i + + ) <nl> + { <nl> + int c = st . charAt ( i ) ; <nl> + if ( ( c > = 0x0001 ) & & ( c < = 0x007F ) ) <nl> + utflen + + ; <nl> + else if ( c > 0x07FF ) <nl> + utflen + = 3 ; <nl> + else <nl> + utflen + = 2 ; <nl> + } <nl> + return utflen ; <nl> + } <nl> + <nl> public static class NativeDBTypeSizes extends TypeSizes <nl> { <nl> public int sizeof ( boolean value ) <nl> diff - - git a / src / java / org / apache / cassandra / db / WriteResponse . java b / src / java / org / apache / cassandra / db / WriteResponse . java <nl> index bb2c842 . . 4b73c48 100644 <nl> - - - a / src / java / org / apache / cassandra / db / WriteResponse . java <nl> + + + b / src / java / org / apache / cassandra / db / WriteResponse . java <nl> @ @ - 88 , 12 + 88 , 11 @ @ public class WriteResponse <nl> <nl> public long serializedSize ( WriteResponse response , int version ) <nl> { <nl> - TypeSizes typeSizes = TypeSizes . NATIVE ; <nl> - int utfSize = FBUtilities . encodedUTF8Length ( response . table ( ) ) ; <nl> + TypeSizes sizes = TypeSizes . NATIVE ; <nl> int keySize = response . key ( ) . remaining ( ) ; <nl> - int size = typeSizes . sizeof ( ( short ) utfSize ) + utfSize ; <nl> - size + = typeSizes . sizeof ( ( short ) keySize ) + keySize ; <nl> - size + = typeSizes . sizeof ( response . isSuccess ( ) ) ; <nl> + int size = sizes . sizeof ( response . table ( ) ) ; <nl> + size + = sizes . sizeof ( ( short ) keySize ) + keySize ; <nl> + size + = sizes . sizeof ( response . isSuccess ( ) ) ; <nl> return size ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / QueryPath . java b / src / java / org / apache / cassandra / db / filter / QueryPath . java <nl> index c4570a9 . . 8116b81 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / QueryPath . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / QueryPath . java <nl> @ @ - 99 , 15 + 99 , 9 @ @ public class QueryPath <nl> int size = 0 ; <nl> <nl> if ( columnFamilyName = = null ) <nl> - { <nl> size + = typeSizes . sizeof ( ( short ) 0 ) ; <nl> - } <nl> else <nl> - { <nl> - int cfNameSize = FBUtilities . encodedUTF8Length ( columnFamilyName ) ; <nl> - size + = typeSizes . sizeof ( ( short ) cfNameSize ) ; <nl> - size + = cfNameSize ; <nl> - } <nl> + size + = typeSizes . sizeof ( columnFamilyName ) ; <nl> <nl> if ( superColumnName = = null ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / dht / BootStrapper . java b / src / java / org / apache / cassandra / dht / BootStrapper . java <nl> index 7886304 . . 7b14586 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / BootStrapper . java <nl> + + + b / src / java / org / apache / cassandra / dht / BootStrapper . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import org . apache . cassandra . config . ConfigurationException ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . Table ; <nl> + import org . apache . cassandra . db . TypeSizes ; <nl> import org . apache . cassandra . gms . FailureDetector ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . locator . AbstractReplicationStrategy ; <nl> @ @ - 42 , 8 + 43 , 6 @ @ import org . apache . cassandra . streaming . OperationType ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . SimpleCondition ; <nl> <nl> - import static org . apache . cassandra . utils . FBUtilities . serializedUTF8Size ; <nl> - <nl> public class BootStrapper <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( BootStrapper . class ) ; <nl> @ @ - 230 , 7 + 229 , 7 @ @ public class BootStrapper <nl> <nl> public long serializedSize ( String s , int version ) <nl> { <nl> - return serializedUTF8Size ( s ) ; <nl> + return TypeSizes . NATIVE . sizeof ( s ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / gms / GossipDigestSyn . java b / src / java / org / apache / cassandra / gms / GossipDigestSyn . java <nl> index 7faca3c . . 8ce2257 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / GossipDigestSyn . java <nl> + + + b / src / java / org / apache / cassandra / gms / GossipDigestSyn . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import java . util . List ; <nl> <nl> import org . apache . cassandra . db . TypeSizes ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> / * * <nl> * This is the first message that gets sent out as a start of the Gossip protocol in a <nl> @ @ - 92 , 7 + 91 , 7 @ @ class GossipDigestSynSerializer implements IVersionedSerializer < GossipDigestSyn > <nl> <nl> public long serializedSize ( GossipDigestSyn syn , int version ) <nl> { <nl> - return FBUtilities . serializedUTF8Size ( syn . clusterId ) + GossipDigestSerializationHelper . serializedSize ( syn . gDigests , version ) ; <nl> + return TypeSizes . NATIVE . sizeof ( syn . clusterId ) + GossipDigestSerializationHelper . serializedSize ( syn . gDigests , version ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / gms / VersionedValue . java b / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> index 4484e75 . . 61bcbe5 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> + + + b / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> @ @ - 235 , 8 + 235 , 7 @ @ public class VersionedValue implements Comparable < VersionedValue > <nl> <nl> public long serializedSize ( VersionedValue value , int version ) <nl> { <nl> - int outLength = FBUtilities . encodedUTF8Length ( outValue ( value , version ) ) ; <nl> - return TypeSizes . NATIVE . sizeof ( outLength ) + outLength + TypeSizes . NATIVE . sizeof ( value . version ) ; <nl> + return TypeSizes . NATIVE . sizeof ( outValue ( value , version ) ) + TypeSizes . NATIVE . sizeof ( value . version ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / AntiEntropyService . java b / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> index bdbb40c . . 1e9e321 100644 <nl> - - - a / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> + + + b / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> @ @ - 34 , 10 + 34 , 7 @ @ import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> import org . apache . cassandra . concurrent . Stage ; <nl> import org . apache . cassandra . concurrent . StageManager ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . db . ColumnFamilyStore ; <nl> - import org . apache . cassandra . db . DecoratedKey ; <nl> - import org . apache . cassandra . db . SnapshotCommand ; <nl> - import org . apache . cassandra . db . Table ; <nl> + import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . compaction . AbstractCompactedRow ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . dht . AbstractBounds ; <nl> @ @ - 46 , 7 + 43 , 6 @ @ import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . gms . * ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> - import org . apache . cassandra . io . util . FastByteArrayInputStream ; <nl> import org . apache . cassandra . net . * ; <nl> import org . apache . cassandra . streaming . StreamingRepairTask ; <nl> import org . apache . cassandra . utils . * ; <nl> @ @ - 557 , 10 + 553 , 10 @ @ public class AntiEntropyService <nl> <nl> public long serializedSize ( TreeRequest request , int version ) <nl> { <nl> - return 2 + FBUtilities . encodedUTF8Length ( request . sessionid ) <nl> + return TypeSizes . NATIVE . sizeof ( request . sessionid ) <nl> + CompactEndpointSerializationHelper . serializedSize ( request . endpoint ) <nl> - + 2 + FBUtilities . encodedUTF8Length ( request . cf . left ) <nl> - + 2 + FBUtilities . encodedUTF8Length ( request . cf . right ) <nl> + + TypeSizes . NATIVE . sizeof ( request . cf . left ) <nl> + + TypeSizes . NATIVE . sizeof ( request . cf . right ) <nl> + AbstractBounds . serializer . serializedSize ( request . range , version ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / streaming / PendingFile . java b / src / java / org / apache / cassandra / streaming / PendingFile . java <nl> index 8e01eba . . 8160f51 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / PendingFile . java <nl> + + + b / src / java / org / apache / cassandra / streaming / PendingFile . java <nl> @ @ - 26 , 7 + 26 , 6 @ @ import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . io . sstable . Descriptor ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> / * * <nl> @ @ - 149 , 13 + 148 , 13 @ @ public class PendingFile <nl> if ( pf = = null ) <nl> return TypeSizes . NATIVE . sizeof ( 0 ) ; <nl> <nl> - long size = FBUtilities . serializedUTF8Size ( pf . desc . filenameFor ( pf . component ) ) ; <nl> - size + = FBUtilities . serializedUTF8Size ( pf . component ) ; <nl> + long size = TypeSizes . NATIVE . sizeof ( pf . desc . filenameFor ( pf . component ) ) ; <nl> + size + = TypeSizes . NATIVE . sizeof ( pf . component ) ; <nl> size + = TypeSizes . NATIVE . sizeof ( pf . sections . size ( ) ) ; <nl> for ( Pair < Long , Long > section : pf . sections ) <nl> size + = TypeSizes . NATIVE . sizeof ( section . left + TypeSizes . NATIVE . sizeof ( section . right ) ) ; <nl> if ( version > MessagingService . VERSION _ 07 ) <nl> - size + = FBUtilities . serializedUTF8Size ( pf . type . name ( ) ) ; <nl> + size + = TypeSizes . NATIVE . sizeof ( pf . type . name ( ) ) ; <nl> if ( version > MessagingService . VERSION _ 080 ) <nl> size + = TypeSizes . NATIVE . sizeof ( pf . estimatedKeys ) ; <nl> return size ; <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamHeader . java b / src / java / org / apache / cassandra / streaming / StreamHeader . java <nl> index f85042e . . 151fdd2 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamHeader . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamHeader . java <nl> @ @ - 102 , 7 + 102 , 7 @ @ public class StreamHeader <nl> <nl> public long serializedSize ( StreamHeader sh , int version ) <nl> { <nl> - long size = FBUtilities . serializedUTF8Size ( sh . table ) ; <nl> + long size = TypeSizes . NATIVE . sizeof ( sh . table ) ; <nl> size + = TypeSizes . NATIVE . sizeof ( sh . sessionId ) ; <nl> size + = PendingFile . serializer . serializedSize ( sh . file , version ) ; <nl> size + = TypeSizes . NATIVE . sizeof ( sh . pendingFiles . size ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamReply . java b / src / java / org / apache / cassandra / streaming / StreamReply . java <nl> index e29b697 . . bfb65e3 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamReply . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamReply . java <nl> @ @ - 25 , 7 + 25 , 6 @ @ import org . apache . cassandra . db . TypeSizes ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . net . MessageOut ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> public class StreamReply <nl> { <nl> @ @ - 84 , 7 + 83 , 7 @ @ public class StreamReply <nl> <nl> public long serializedSize ( StreamReply reply , int version ) <nl> { <nl> - return TypeSizes . NATIVE . sizeof ( reply . sessionId ) + FBUtilities . serializedUTF8Size ( reply . file ) + TypeSizes . NATIVE . sizeof ( reply . action . ordinal ( ) ) ; <nl> + return TypeSizes . NATIVE . sizeof ( reply . sessionId ) + TypeSizes . NATIVE . sizeof ( reply . file ) + TypeSizes . NATIVE . sizeof ( reply . action . ordinal ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamRequest . java b / src / java / org / apache / cassandra / streaming / StreamRequest . java <nl> index 1661d7c . . 3a08202 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamRequest . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamRequest . java <nl> @ @ - 37 , 7 + 37 , 6 @ @ import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . net . CompactEndpointSerializationHelper ; <nl> import org . apache . cassandra . net . MessageOut ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> / * * <nl> * This class encapsulates the message that needs to be sent to nodes <nl> @ @ - 186 , 12 + 185 , 12 @ @ public class StreamRequest <nl> if ( sr . file ! = null ) <nl> return size + PendingFile . serializer . serializedSize ( sr . file , version ) ; <nl> <nl> - size + = FBUtilities . serializedUTF8Size ( sr . table ) ; <nl> + size + = TypeSizes . NATIVE . sizeof ( sr . table ) ; <nl> size + = TypeSizes . NATIVE . sizeof ( sr . ranges . size ( ) ) ; <nl> for ( Range < Token > range : sr . ranges ) <nl> size + = AbstractBounds . serializer . serializedSize ( range , version ) ; <nl> if ( version > MessagingService . VERSION _ 07 ) <nl> - size + = FBUtilities . serializedUTF8Size ( sr . type . name ( ) ) ; <nl> + size + = TypeSizes . NATIVE . sizeof ( sr . type . name ( ) ) ; <nl> if ( version > MessagingService . VERSION _ 080 ) <nl> { <nl> size + = TypeSizes . NATIVE . sizeof ( Iterables . size ( sr . columnFamilies ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamingRepairTask . java b / src / java / org / apache / cassandra / streaming / StreamingRepairTask . java <nl> index 5c6907e . . bff8966 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamingRepairTask . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamingRepairTask . java <nl> @ @ - 265 , 8 + 265 , 8 @ @ public class StreamingRepairTask implements Runnable <nl> { <nl> long size = UUIDGen . serializer . serializedSize ( task . id , version ) ; <nl> size + = 3 * CompactEndpointSerializationHelper . serializedSize ( task . owner ) ; <nl> - size + = FBUtilities . serializedUTF8Size ( task . tableName ) ; <nl> - size + = FBUtilities . serializedUTF8Size ( task . cfName ) ; <nl> + size + = TypeSizes . NATIVE . sizeof ( task . tableName ) ; <nl> + size + = TypeSizes . NATIVE . sizeof ( task . cfName ) ; <nl> size + = TypeSizes . NATIVE . sizeof ( task . ranges . size ( ) ) ; <nl> for ( Range < Token > range : task . ranges ) <nl> size + = AbstractBounds . serializer . serializedSize ( range , version ) ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index 9c012fb . . a8d3e85 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 305 , 23 + 305 , 6 @ @ public class FBUtilities <nl> } <nl> } <nl> <nl> - public static int encodedUTF8Length ( String st ) <nl> - { <nl> - int strlen = st . length ( ) ; <nl> - int utflen = 0 ; <nl> - for ( int i = 0 ; i < strlen ; i + + ) <nl> - { <nl> - int c = st . charAt ( i ) ; <nl> - if ( ( c > = 0x0001 ) & & ( c < = 0x007F ) ) <nl> - utflen + + ; <nl> - else if ( c > 0x07FF ) <nl> - utflen + = 3 ; <nl> - else <nl> - utflen + = 2 ; <nl> - } <nl> - return utflen ; <nl> - } <nl> - <nl> public static String resourceToFile ( String filename ) throws ConfigurationException <nl> { <nl> ClassLoader loader = FBUtilities . class . getClassLoader ( ) ; <nl> @ @ - 584 , 12 + 567 , 6 @ @ public class FBUtilities <nl> } <nl> } <nl> <nl> - public static int serializedUTF8Size ( String st ) <nl> - { <nl> - int length = encodedUTF8Length ( st ) ; <nl> - return TypeSizes . NATIVE . sizeof ( length ) + length ; <nl> - } <nl> - <nl> private static final class WrappedCloseableIterator < T > <nl> extends AbstractIterator < T > implements CloseableIterator < T > <nl> {

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / io / ISSTableSerializer . java b / src / java / org / apache / cassandra / io / ISSTableSerializer . java 
 deleted file mode 100644 
 index 96a38ac . . 0000000 
 - - - a / src / java / org / apache / cassandra / io / ISSTableSerializer . java 
 + + + / dev / null 
 @ @ - 1 , 47 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . io ; 
 - 
 - import java . io . DataInput ; 
 - import java . io . IOException ; 
 - 
 - import org . apache . cassandra . io . sstable . format . Version ; 
 - import org . apache . cassandra . io . util . DataOutputPlus ; 
 - 
 - public interface ISSTableSerializer < T > 
 - { 
 - / * * 
 - * Serialize the specified type into the specified DataOutputStream 
 - * instance in the format suited for SSTables . 
 - * 
 - * @ param t type that needs to be serialized 
 - * @ param out DataOutput into which serialization needs to happen . 
 - * @ throws java . io . IOException 
 - * / 
 - public void serializeForSSTable ( T t , DataOutputPlus out ) throws IOException ; 
 - 
 - / * * 
 - * Deserialize into the specified DataInputStream instance in the format 
 - * suited for SSTables . 
 - * @ param in DataInput from which deserialization needs to happen . 
 - * @ param version the version for the sstable we ' re reading from 
 - * @ throws IOException 
 - * @ return the type that was deserialized 
 - * / 
 - public T deserializeFromSSTable ( DataInput in , Version version ) throws IOException ; 
 - }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / CounterMutation . java b / src / java / org / apache / cassandra / db / CounterMutation . java 
 index 9a1c117 . . c3256cc 100644 
 - - - a / src / java / org / apache / cassandra / db / CounterMutation . java 
 + + + b / src / java / org / apache / cassandra / db / CounterMutation . java 
 @ @ - 34 , 7 + 34 , 6 @ @ import org . apache . cassandra . net . MessageOut ; 
 import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . thrift . ConsistencyLevel ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . HeapAllocator ; 
 
 public class CounterMutation implements IMutation 
 @ @ - 182 , 8 + 181 , 7 @ @ class CounterMutationSerializer implements IVersionedSerializer < CounterMutation > 
 
 public long serializedSize ( CounterMutation cm , int version ) 
 { 
 - int tableSize = FBUtilities . encodedUTF8Length ( cm . consistency ( ) . name ( ) ) ; 
 return RowMutation . serializer . serializedSize ( cm . rowMutation ( ) , version ) 
 - + TypeSizes . NATIVE . sizeof ( ( short ) tableSize ) + tableSize ; 
 + + TypeSizes . NATIVE . sizeof ( cm . consistency ( ) . name ( ) ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / RangeSliceCommand . java b / src / java / org / apache / cassandra / db / RangeSliceCommand . java 
 index 2ad4b5d . . 8516e06 100644 
 - - - a / src / java / org / apache / cassandra / db / RangeSliceCommand . java 
 + + + b / src / java / org / apache / cassandra / db / RangeSliceCommand . java 
 @ @ - 217 , 14 + 217 , 12 @ @ class RangeSliceCommandSerializer implements IVersionedSerializer < RangeSliceComm 
 return new RangeSliceCommand ( keyspace , columnFamily , superColumn , pred , range , rowFilter , maxResults , maxIsColumns , isPaging ) ; 
 } 
 
 - public long serializedSize ( RangeSliceCommand rangeSliceCommand , int version ) 
 + public long serializedSize ( RangeSliceCommand rsc , int version ) 
 { 
 - int ksLength = FBUtilities . encodedUTF8Length ( rangeSliceCommand . keyspace ) ; 
 - long size = TypeSizes . NATIVE . sizeof ( ksLength ) + ksLength ; 
 - int cfLength = FBUtilities . encodedUTF8Length ( rangeSliceCommand . column _ family ) ; 
 - size + = TypeSizes . NATIVE . sizeof ( cfLength ) + cfLength ; 
 + long size = TypeSizes . NATIVE . sizeof ( rsc . keyspace ) ; 
 + size + = TypeSizes . NATIVE . sizeof ( rsc . column _ family ) ; 
 
 - ByteBuffer sc = rangeSliceCommand . super _ column ; 
 + ByteBuffer sc = rsc . super _ column ; 
 if ( sc ! = null ) 
 { 
 size + = TypeSizes . NATIVE . sizeof ( sc . remaining ( ) ) ; 
 @ @ - 238 , 7 + 236 , 7 @ @ class RangeSliceCommandSerializer implements IVersionedSerializer < RangeSliceComm 
 TSerializer ser = new TSerializer ( new TBinaryProtocol . Factory ( ) ) ; 
 try 
 { 
 - int predicateLength = ser . serialize ( rangeSliceCommand . predicate ) . length ; 
 + int predicateLength = ser . serialize ( rsc . predicate ) . length ; 
 size + = TypeSizes . NATIVE . sizeof ( predicateLength ) ; 
 size + = predicateLength ; 
 } 
 @ @ - 249 , 14 + 247 , 14 @ @ class RangeSliceCommandSerializer implements IVersionedSerializer < RangeSliceComm 
 
 if ( version > = MessagingService . VERSION _ 11 ) 
 { 
 - if ( rangeSliceCommand . row _ filter = = null ) 
 + if ( rsc . row _ filter = = null ) 
 { 
 size + = TypeSizes . NATIVE . sizeof ( 0 ) ; 
 } 
 else 
 { 
 - size + = TypeSizes . NATIVE . sizeof ( rangeSliceCommand . row _ filter . size ( ) ) ; 
 - for ( IndexExpression expr : rangeSliceCommand . row _ filter ) 
 + size + = TypeSizes . NATIVE . sizeof ( rsc . row _ filter . size ( ) ) ; 
 + for ( IndexExpression expr : rsc . row _ filter ) 
 { 
 try 
 { 
 @ @ - 271 , 12 + 269 , 12 @ @ class RangeSliceCommandSerializer implements IVersionedSerializer < RangeSliceComm 
 } 
 } 
 } 
 - size + = AbstractBounds . serializer . serializedSize ( rangeSliceCommand . range , version ) ; 
 - size + = TypeSizes . NATIVE . sizeof ( rangeSliceCommand . maxResults ) ; 
 + size + = AbstractBounds . serializer . serializedSize ( rsc . range , version ) ; 
 + size + = TypeSizes . NATIVE . sizeof ( rsc . maxResults ) ; 
 if ( version > = MessagingService . VERSION _ 11 ) 
 { 
 - size + = TypeSizes . NATIVE . sizeof ( rangeSliceCommand . maxIsColumns ) ; 
 - size + = TypeSizes . NATIVE . sizeof ( rangeSliceCommand . isPaging ) ; 
 + size + = TypeSizes . NATIVE . sizeof ( rsc . maxIsColumns ) ; 
 + size + = TypeSizes . NATIVE . sizeof ( rsc . isPaging ) ; 
 } 
 return size ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / RowMutation . java b / src / java / org / apache / cassandra / db / RowMutation . java 
 index 4eae246 . . 5474ab5 100644 
 - - - a / src / java / org / apache / cassandra / db / RowMutation . java 
 + + + b / src / java / org / apache / cassandra / db / RowMutation . java 
 @ @ - 440 , 16 + 440 , 15 @ @ public class RowMutation implements IMutation 
 
 public long serializedSize ( RowMutation rm , int version ) 
 { 
 - TypeSizes typeSizes = TypeSizes . NATIVE ; 
 - int tableSize = FBUtilities . encodedUTF8Length ( rm . getTable ( ) ) ; 
 + TypeSizes sizes = TypeSizes . NATIVE ; 
 + int size = sizes . sizeof ( rm . getTable ( ) ) ; 
 int keySize = rm . key ( ) . remaining ( ) ; 
 - int size = typeSizes . sizeof ( ( short ) tableSize ) + tableSize ; 
 - size + = typeSizes . sizeof ( ( short ) keySize ) + keySize ; 
 + size + = sizes . sizeof ( ( short ) keySize ) + keySize ; 
 
 - size + = typeSizes . sizeof ( rm . modifications . size ( ) ) ; 
 + size + = sizes . sizeof ( rm . modifications . size ( ) ) ; 
 for ( Map . Entry < Integer , ColumnFamily > entry : rm . modifications . entrySet ( ) ) 
 { 
 - size + = typeSizes . sizeof ( entry . getKey ( ) ) ; 
 + size + = sizes . sizeof ( entry . getKey ( ) ) ; 
 size + = ColumnFamily . serializer . serializedSize ( entry . getValue ( ) , TypeSizes . NATIVE ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / SliceByNamesReadCommand . java b / src / java / org / apache / cassandra / db / SliceByNamesReadCommand . java 
 index 088a5d8 . . 1f92890 100644 
 - - - a / src / java / org / apache / cassandra / db / SliceByNamesReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / SliceByNamesReadCommand . java 
 @ @ - 110 , 22 + 110 , 21 @ @ class SliceByNamesReadCommandSerializer implements IVersionedSerializer < ReadComm 
 
 public long serializedSize ( ReadCommand cmd , int version ) 
 { 
 - TypeSizes typeSizes = TypeSizes . NATIVE ; 
 + TypeSizes sizes = TypeSizes . NATIVE ; 
 SliceByNamesReadCommand command = ( SliceByNamesReadCommand ) cmd ; 
 - int size = typeSizes . sizeof ( command . isDigestQuery ( ) ) ; 
 - int tableSize = FBUtilities . encodedUTF8Length ( command . table ) ; 
 + int size = sizes . sizeof ( command . isDigestQuery ( ) ) ; 
 int keySize = command . key . remaining ( ) ; 
 
 - size + = typeSizes . sizeof ( ( short ) tableSize ) + tableSize ; 
 - size + = typeSizes . sizeof ( keySize ) + keySize ; 
 - size + = command . queryPath . serializedSize ( typeSizes ) ; 
 - size + = typeSizes . sizeof ( command . columnNames . size ( ) ) ; 
 + size + = sizes . sizeof ( command . table ) ; 
 + size + = sizes . sizeof ( keySize ) + keySize ; 
 + size + = command . queryPath . serializedSize ( sizes ) ; 
 + size + = sizes . sizeof ( command . columnNames . size ( ) ) ; 
 if ( ! command . columnNames . isEmpty ( ) ) 
 { 
 for ( ByteBuffer cName : command . columnNames ) 
 { 
 int cNameSize = cName . remaining ( ) ; 
 - size + = typeSizes . sizeof ( ( short ) cNameSize ) + cNameSize ; 
 + size + = sizes . sizeof ( ( short ) cNameSize ) + cNameSize ; 
 } 
 } 
 return size ; 
 diff - - git a / src / java / org / apache / cassandra / db / SliceFromReadCommand . java b / src / java / org / apache / cassandra / db / SliceFromReadCommand . java 
 index e61d217 . . 93c5ba1 100644 
 - - - a / src / java / org / apache / cassandra / db / SliceFromReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / SliceFromReadCommand . java 
 @ @ - 184 , 21 + 184 , 20 @ @ class SliceFromReadCommandSerializer implements IVersionedSerializer < ReadCommand 
 
 public long serializedSize ( ReadCommand cmd , int version ) 
 { 
 - TypeSizes typeSizes = TypeSizes . NATIVE ; 
 + TypeSizes sizes = TypeSizes . NATIVE ; 
 SliceFromReadCommand command = ( SliceFromReadCommand ) cmd ; 
 - int tableSize = FBUtilities . encodedUTF8Length ( command . table ) ; 
 int keySize = command . key . remaining ( ) ; 
 int startSize = command . start . remaining ( ) ; 
 int finishSize = command . finish . remaining ( ) ; 
 
 - int size = typeSizes . sizeof ( cmd . isDigestQuery ( ) ) ; / / boolean 
 - size + = typeSizes . sizeof ( ( short ) tableSize ) + tableSize ; 
 - size + = typeSizes . sizeof ( ( short ) keySize ) + keySize ; 
 - size + = command . queryPath . serializedSize ( typeSizes ) ; 
 - size + = typeSizes . sizeof ( ( short ) startSize ) + startSize ; 
 - size + = typeSizes . sizeof ( ( short ) finishSize ) + finishSize ; 
 - size + = typeSizes . sizeof ( command . reversed ) ; 
 - size + = typeSizes . sizeof ( command . count ) ; 
 + int size = sizes . sizeof ( cmd . isDigestQuery ( ) ) ; / / boolean 
 + size + = sizes . sizeof ( command . table ) ; 
 + size + = sizes . sizeof ( ( short ) keySize ) + keySize ; 
 + size + = command . queryPath . serializedSize ( sizes ) ; 
 + size + = sizes . sizeof ( ( short ) startSize ) + startSize ; 
 + size + = sizes . sizeof ( ( short ) finishSize ) + finishSize ; 
 + size + = sizes . sizeof ( command . reversed ) ; 
 + size + = sizes . sizeof ( command . count ) ; 
 return size ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / SnapshotCommand . java b / src / java / org / apache / cassandra / db / SnapshotCommand . java 
 index c3b8036 . . 43dbdae 100644 
 - - - a / src / java / org / apache / cassandra / db / SnapshotCommand . java 
 + + + b / src / java / org / apache / cassandra / db / SnapshotCommand . java 
 @ @ - 25 , 8 + 25 , 6 @ @ import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . net . MessageOut ; 
 import org . apache . cassandra . net . MessagingService ; 
 
 - import static org . apache . cassandra . utils . FBUtilities . serializedUTF8Size ; 
 - 
 public class SnapshotCommand 
 { 
 public static final SnapshotCommandSerializer serializer = new SnapshotCommandSerializer ( ) ; 
 @ @ - 80 , 9 + 78 , 9 @ @ class SnapshotCommandSerializer implements IVersionedSerializer < SnapshotCommand > 
 
 public long serializedSize ( SnapshotCommand sc , int version ) 
 { 
 - return serializedUTF8Size ( sc . keyspace ) 
 - + serializedUTF8Size ( sc . column _ family ) 
 - + serializedUTF8Size ( sc . snapshot _ name ) 
 + return TypeSizes . NATIVE . sizeof ( sc . keyspace ) 
 + + TypeSizes . NATIVE . sizeof ( sc . column _ family ) 
 + + TypeSizes . NATIVE . sizeof ( sc . snapshot _ name ) 
 + TypeSizes . NATIVE . sizeof ( sc . clear _ snapshot ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / TruncateResponse . java b / src / java / org / apache / cassandra / db / TruncateResponse . java 
 index 87c9440 . . efbe667 100644 
 - - - a / src / java / org / apache / cassandra / db / TruncateResponse . java 
 + + + b / src / java / org / apache / cassandra / db / TruncateResponse . java 
 @ @ - 25 , 8 + 25 , 6 @ @ import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . net . MessageOut ; 
 import org . apache . cassandra . net . MessagingService ; 
 
 - import static org . apache . cassandra . utils . FBUtilities . serializedUTF8Size ; 
 - 
 / * * 
 * This message is sent back the truncate operation and basically specifies if 
 * the truncate succeeded . 
 @ @ - 70 , 8 + 68 , 8 @ @ public class TruncateResponse 
 
 public long serializedSize ( TruncateResponse tr , int version ) 
 { 
 - return serializedUTF8Size ( tr . keyspace ) 
 - + serializedUTF8Size ( tr . columnFamily ) 
 + return TypeSizes . NATIVE . sizeof ( tr . keyspace ) 
 + + TypeSizes . NATIVE . sizeof ( tr . columnFamily ) 
 + TypeSizes . NATIVE . sizeof ( tr . success ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / Truncation . java b / src / java / org / apache / cassandra / db / Truncation . java 
 index f52384f . . f43c8e8 100644 
 - - - a / src / java / org / apache / cassandra / db / Truncation . java 
 + + + b / src / java / org / apache / cassandra / db / Truncation . java 
 @ @ - 24 , 9 + 24 , 6 @ @ import java . io . IOException ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . net . MessageOut ; 
 import org . apache . cassandra . net . MessagingService ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 - 
 - import static org . apache . cassandra . utils . FBUtilities . serializedUTF8Size ; 
 
 / * * 
 * A truncate operation descriptor 
 @ @ - 72 , 6 + 69 , 6 @ @ class TruncationSerializer implements IVersionedSerializer < Truncation > 
 
 public long serializedSize ( Truncation truncation , int version ) 
 { 
 - return serializedUTF8Size ( truncation . keyspace ) + serializedUTF8Size ( truncation . columnFamily ) ; 
 + return TypeSizes . NATIVE . sizeof ( truncation . keyspace ) + TypeSizes . NATIVE . sizeof ( truncation . columnFamily ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / TypeSizes . java b / src / java / org / apache / cassandra / db / TypeSizes . java 
 index 6e2f15e . . 26c9f7d 100644 
 - - - a / src / java / org / apache / cassandra / db / TypeSizes . java 
 + + + b / src / java / org / apache / cassandra / db / TypeSizes . java 
 @ @ - 17 , 6 + 17 , 8 @ @ 
 * / 
 package org . apache . cassandra . db ; 
 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + 
 public abstract class TypeSizes 
 { 
 public static final TypeSizes NATIVE = new NativeDBTypeSizes ( ) ; 
 @ @ - 32 , 6 + 34 , 31 @ @ public abstract class TypeSizes 
 public abstract int sizeof ( int value ) ; 
 public abstract int sizeof ( long value ) ; 
 
 + / * * assumes UTF8 * / 
 + public int sizeof ( String value ) 
 + { 
 + int length = encodedUTF8Length ( value ) ; 
 + assert length < = Short . MAX _ VALUE ; 
 + return sizeof ( ( short ) length ) + length ; 
 + } 
 + 
 + public static int encodedUTF8Length ( String st ) 
 + { 
 + int strlen = st . length ( ) ; 
 + int utflen = 0 ; 
 + for ( int i = 0 ; i < strlen ; i + + ) 
 + { 
 + int c = st . charAt ( i ) ; 
 + if ( ( c > = 0x0001 ) & & ( c < = 0x007F ) ) 
 + utflen + + ; 
 + else if ( c > 0x07FF ) 
 + utflen + = 3 ; 
 + else 
 + utflen + = 2 ; 
 + } 
 + return utflen ; 
 + } 
 + 
 public static class NativeDBTypeSizes extends TypeSizes 
 { 
 public int sizeof ( boolean value ) 
 diff - - git a / src / java / org / apache / cassandra / db / WriteResponse . java b / src / java / org / apache / cassandra / db / WriteResponse . java 
 index bb2c842 . . 4b73c48 100644 
 - - - a / src / java / org / apache / cassandra / db / WriteResponse . java 
 + + + b / src / java / org / apache / cassandra / db / WriteResponse . java 
 @ @ - 88 , 12 + 88 , 11 @ @ public class WriteResponse 
 
 public long serializedSize ( WriteResponse response , int version ) 
 { 
 - TypeSizes typeSizes = TypeSizes . NATIVE ; 
 - int utfSize = FBUtilities . encodedUTF8Length ( response . table ( ) ) ; 
 + TypeSizes sizes = TypeSizes . NATIVE ; 
 int keySize = response . key ( ) . remaining ( ) ; 
 - int size = typeSizes . sizeof ( ( short ) utfSize ) + utfSize ; 
 - size + = typeSizes . sizeof ( ( short ) keySize ) + keySize ; 
 - size + = typeSizes . sizeof ( response . isSuccess ( ) ) ; 
 + int size = sizes . sizeof ( response . table ( ) ) ; 
 + size + = sizes . sizeof ( ( short ) keySize ) + keySize ; 
 + size + = sizes . sizeof ( response . isSuccess ( ) ) ; 
 return size ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / filter / QueryPath . java b / src / java / org / apache / cassandra / db / filter / QueryPath . java 
 index c4570a9 . . 8116b81 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / QueryPath . java 
 + + + b / src / java / org / apache / cassandra / db / filter / QueryPath . java 
 @ @ - 99 , 15 + 99 , 9 @ @ public class QueryPath 
 int size = 0 ; 
 
 if ( columnFamilyName = = null ) 
 - { 
 size + = typeSizes . sizeof ( ( short ) 0 ) ; 
 - } 
 else 
 - { 
 - int cfNameSize = FBUtilities . encodedUTF8Length ( columnFamilyName ) ; 
 - size + = typeSizes . sizeof ( ( short ) cfNameSize ) ; 
 - size + = cfNameSize ; 
 - } 
 + size + = typeSizes . sizeof ( columnFamilyName ) ; 
 
 if ( superColumnName = = null ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / dht / BootStrapper . java b / src / java / org / apache / cassandra / dht / BootStrapper . java 
 index 7886304 . . 7b14586 100644 
 - - - a / src / java / org / apache / cassandra / dht / BootStrapper . java 
 + + + b / src / java / org / apache / cassandra / dht / BootStrapper . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import org . apache . cassandra . config . ConfigurationException ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . Table ; 
 + import org . apache . cassandra . db . TypeSizes ; 
 import org . apache . cassandra . gms . FailureDetector ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . locator . AbstractReplicationStrategy ; 
 @ @ - 42 , 8 + 43 , 6 @ @ import org . apache . cassandra . streaming . OperationType ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . SimpleCondition ; 
 
 - import static org . apache . cassandra . utils . FBUtilities . serializedUTF8Size ; 
 - 
 public class BootStrapper 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( BootStrapper . class ) ; 
 @ @ - 230 , 7 + 229 , 7 @ @ public class BootStrapper 
 
 public long serializedSize ( String s , int version ) 
 { 
 - return serializedUTF8Size ( s ) ; 
 + return TypeSizes . NATIVE . sizeof ( s ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / gms / GossipDigestSyn . java b / src / java / org / apache / cassandra / gms / GossipDigestSyn . java 
 index 7faca3c . . 8ce2257 100644 
 - - - a / src / java / org / apache / cassandra / gms / GossipDigestSyn . java 
 + + + b / src / java / org / apache / cassandra / gms / GossipDigestSyn . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import java . util . List ; 
 
 import org . apache . cassandra . db . TypeSizes ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 
 / * * 
 * This is the first message that gets sent out as a start of the Gossip protocol in a 
 @ @ - 92 , 7 + 91 , 7 @ @ class GossipDigestSynSerializer implements IVersionedSerializer < GossipDigestSyn > 
 
 public long serializedSize ( GossipDigestSyn syn , int version ) 
 { 
 - return FBUtilities . serializedUTF8Size ( syn . clusterId ) + GossipDigestSerializationHelper . serializedSize ( syn . gDigests , version ) ; 
 + return TypeSizes . NATIVE . sizeof ( syn . clusterId ) + GossipDigestSerializationHelper . serializedSize ( syn . gDigests , version ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / gms / VersionedValue . java b / src / java / org / apache / cassandra / gms / VersionedValue . java 
 index 4484e75 . . 61bcbe5 100644 
 - - - a / src / java / org / apache / cassandra / gms / VersionedValue . java 
 + + + b / src / java / org / apache / cassandra / gms / VersionedValue . java 
 @ @ - 235 , 8 + 235 , 7 @ @ public class VersionedValue implements Comparable < VersionedValue > 
 
 public long serializedSize ( VersionedValue value , int version ) 
 { 
 - int outLength = FBUtilities . encodedUTF8Length ( outValue ( value , version ) ) ; 
 - return TypeSizes . NATIVE . sizeof ( outLength ) + outLength + TypeSizes . NATIVE . sizeof ( value . version ) ; 
 + return TypeSizes . NATIVE . sizeof ( outValue ( value , version ) ) + TypeSizes . NATIVE . sizeof ( value . version ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / AntiEntropyService . java b / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 index bdbb40c . . 1e9e321 100644 
 - - - a / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 + + + b / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 @ @ - 34 , 10 + 34 , 7 @ @ import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 import org . apache . cassandra . concurrent . Stage ; 
 import org . apache . cassandra . concurrent . StageManager ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . db . ColumnFamilyStore ; 
 - import org . apache . cassandra . db . DecoratedKey ; 
 - import org . apache . cassandra . db . SnapshotCommand ; 
 - import org . apache . cassandra . db . Table ; 
 + import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . compaction . AbstractCompactedRow ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . dht . AbstractBounds ; 
 @ @ - 46 , 7 + 43 , 6 @ @ import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . gms . * ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 - import org . apache . cassandra . io . util . FastByteArrayInputStream ; 
 import org . apache . cassandra . net . * ; 
 import org . apache . cassandra . streaming . StreamingRepairTask ; 
 import org . apache . cassandra . utils . * ; 
 @ @ - 557 , 10 + 553 , 10 @ @ public class AntiEntropyService 
 
 public long serializedSize ( TreeRequest request , int version ) 
 { 
 - return 2 + FBUtilities . encodedUTF8Length ( request . sessionid ) 
 + return TypeSizes . NATIVE . sizeof ( request . sessionid ) 
 + CompactEndpointSerializationHelper . serializedSize ( request . endpoint ) 
 - + 2 + FBUtilities . encodedUTF8Length ( request . cf . left ) 
 - + 2 + FBUtilities . encodedUTF8Length ( request . cf . right ) 
 + + TypeSizes . NATIVE . sizeof ( request . cf . left ) 
 + + TypeSizes . NATIVE . sizeof ( request . cf . right ) 
 + AbstractBounds . serializer . serializedSize ( request . range , version ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / streaming / PendingFile . java b / src / java / org / apache / cassandra / streaming / PendingFile . java 
 index 8e01eba . . 8160f51 100644 
 - - - a / src / java / org / apache / cassandra / streaming / PendingFile . java 
 + + + b / src / java / org / apache / cassandra / streaming / PendingFile . java 
 @ @ - 26 , 7 + 26 , 6 @ @ import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . io . sstable . Descriptor ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 import org . apache . cassandra . net . MessagingService ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . Pair ; 
 
 / * * 
 @ @ - 149 , 13 + 148 , 13 @ @ public class PendingFile 
 if ( pf = = null ) 
 return TypeSizes . NATIVE . sizeof ( 0 ) ; 
 
 - long size = FBUtilities . serializedUTF8Size ( pf . desc . filenameFor ( pf . component ) ) ; 
 - size + = FBUtilities . serializedUTF8Size ( pf . component ) ; 
 + long size = TypeSizes . NATIVE . sizeof ( pf . desc . filenameFor ( pf . component ) ) ; 
 + size + = TypeSizes . NATIVE . sizeof ( pf . component ) ; 
 size + = TypeSizes . NATIVE . sizeof ( pf . sections . size ( ) ) ; 
 for ( Pair < Long , Long > section : pf . sections ) 
 size + = TypeSizes . NATIVE . sizeof ( section . left + TypeSizes . NATIVE . sizeof ( section . right ) ) ; 
 if ( version > MessagingService . VERSION _ 07 ) 
 - size + = FBUtilities . serializedUTF8Size ( pf . type . name ( ) ) ; 
 + size + = TypeSizes . NATIVE . sizeof ( pf . type . name ( ) ) ; 
 if ( version > MessagingService . VERSION _ 080 ) 
 size + = TypeSizes . NATIVE . sizeof ( pf . estimatedKeys ) ; 
 return size ; 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamHeader . java b / src / java / org / apache / cassandra / streaming / StreamHeader . java 
 index f85042e . . 151fdd2 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamHeader . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamHeader . java 
 @ @ - 102 , 7 + 102 , 7 @ @ public class StreamHeader 
 
 public long serializedSize ( StreamHeader sh , int version ) 
 { 
 - long size = FBUtilities . serializedUTF8Size ( sh . table ) ; 
 + long size = TypeSizes . NATIVE . sizeof ( sh . table ) ; 
 size + = TypeSizes . NATIVE . sizeof ( sh . sessionId ) ; 
 size + = PendingFile . serializer . serializedSize ( sh . file , version ) ; 
 size + = TypeSizes . NATIVE . sizeof ( sh . pendingFiles . size ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamReply . java b / src / java / org / apache / cassandra / streaming / StreamReply . java 
 index e29b697 . . bfb65e3 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamReply . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamReply . java 
 @ @ - 25 , 7 + 25 , 6 @ @ import org . apache . cassandra . db . TypeSizes ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . net . MessageOut ; 
 import org . apache . cassandra . net . MessagingService ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 
 public class StreamReply 
 { 
 @ @ - 84 , 7 + 83 , 7 @ @ public class StreamReply 
 
 public long serializedSize ( StreamReply reply , int version ) 
 { 
 - return TypeSizes . NATIVE . sizeof ( reply . sessionId ) + FBUtilities . serializedUTF8Size ( reply . file ) + TypeSizes . NATIVE . sizeof ( reply . action . ordinal ( ) ) ; 
 + return TypeSizes . NATIVE . sizeof ( reply . sessionId ) + TypeSizes . NATIVE . sizeof ( reply . file ) + TypeSizes . NATIVE . sizeof ( reply . action . ordinal ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamRequest . java b / src / java / org / apache / cassandra / streaming / StreamRequest . java 
 index 1661d7c . . 3a08202 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamRequest . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamRequest . java 
 @ @ - 37 , 7 + 37 , 6 @ @ import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . net . CompactEndpointSerializationHelper ; 
 import org . apache . cassandra . net . MessageOut ; 
 import org . apache . cassandra . net . MessagingService ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 
 / * * 
 * This class encapsulates the message that needs to be sent to nodes 
 @ @ - 186 , 12 + 185 , 12 @ @ public class StreamRequest 
 if ( sr . file ! = null ) 
 return size + PendingFile . serializer . serializedSize ( sr . file , version ) ; 
 
 - size + = FBUtilities . serializedUTF8Size ( sr . table ) ; 
 + size + = TypeSizes . NATIVE . sizeof ( sr . table ) ; 
 size + = TypeSizes . NATIVE . sizeof ( sr . ranges . size ( ) ) ; 
 for ( Range < Token > range : sr . ranges ) 
 size + = AbstractBounds . serializer . serializedSize ( range , version ) ; 
 if ( version > MessagingService . VERSION _ 07 ) 
 - size + = FBUtilities . serializedUTF8Size ( sr . type . name ( ) ) ; 
 + size + = TypeSizes . NATIVE . sizeof ( sr . type . name ( ) ) ; 
 if ( version > MessagingService . VERSION _ 080 ) 
 { 
 size + = TypeSizes . NATIVE . sizeof ( Iterables . size ( sr . columnFamilies ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamingRepairTask . java b / src / java / org / apache / cassandra / streaming / StreamingRepairTask . java 
 index 5c6907e . . bff8966 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamingRepairTask . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamingRepairTask . java 
 @ @ - 265 , 8 + 265 , 8 @ @ public class StreamingRepairTask implements Runnable 
 { 
 long size = UUIDGen . serializer . serializedSize ( task . id , version ) ; 
 size + = 3 * CompactEndpointSerializationHelper . serializedSize ( task . owner ) ; 
 - size + = FBUtilities . serializedUTF8Size ( task . tableName ) ; 
 - size + = FBUtilities . serializedUTF8Size ( task . cfName ) ; 
 + size + = TypeSizes . NATIVE . sizeof ( task . tableName ) ; 
 + size + = TypeSizes . NATIVE . sizeof ( task . cfName ) ; 
 size + = TypeSizes . NATIVE . sizeof ( task . ranges . size ( ) ) ; 
 for ( Range < Token > range : task . ranges ) 
 size + = AbstractBounds . serializer . serializedSize ( range , version ) ; 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index 9c012fb . . a8d3e85 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 305 , 23 + 305 , 6 @ @ public class FBUtilities 
 } 
 } 
 
 - public static int encodedUTF8Length ( String st ) 
 - { 
 - int strlen = st . length ( ) ; 
 - int utflen = 0 ; 
 - for ( int i = 0 ; i < strlen ; i + + ) 
 - { 
 - int c = st . charAt ( i ) ; 
 - if ( ( c > = 0x0001 ) & & ( c < = 0x007F ) ) 
 - utflen + + ; 
 - else if ( c > 0x07FF ) 
 - utflen + = 3 ; 
 - else 
 - utflen + = 2 ; 
 - } 
 - return utflen ; 
 - } 
 - 
 public static String resourceToFile ( String filename ) throws ConfigurationException 
 { 
 ClassLoader loader = FBUtilities . class . getClassLoader ( ) ; 
 @ @ - 584 , 12 + 567 , 6 @ @ public class FBUtilities 
 } 
 } 
 
 - public static int serializedUTF8Size ( String st ) 
 - { 
 - int length = encodedUTF8Length ( st ) ; 
 - return TypeSizes . NATIVE . sizeof ( length ) + length ; 
 - } 
 - 
 private static final class WrappedCloseableIterator < T > 
 extends AbstractIterator < T > implements CloseableIterator < T > 
 {
