BLEU SCORE: 0.018738883683389617

TEST MSG: Aggregate with Initial Condition fails with C * 3 . 0
GENERATED MSG: p / 4443 / 050 _ process _ queued _ xfers

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 616ff47 . . 6c97ffb 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 <nl> + * Aggregate with Initial Condition fails with C * 3 . 0 ( CASSANDRA - 10367 ) <nl> Merged from 2 . 2 : <nl> * Expose phi values from failure detector via JMX and tweak debug <nl> and trace logging ( CASSANDRA - 9526 ) <nl> diff - - git a / lib / cassandra - driver - core - 3 . 0 . 0 - alpha3 - 093a692 - SNAPSHOT - shaded . jar b / lib / cassandra - driver - core - 3 . 0 . 0 - alpha3 - 093a692 - SNAPSHOT - shaded . jar <nl> deleted file mode 100644 <nl> index daf7837 . . 0000000 <nl> Binary files a / lib / cassandra - driver - core - 3 . 0 . 0 - alpha3 - 093a692 - SNAPSHOT - shaded . jar and / dev / null differ <nl> diff - - git a / lib / cassandra - driver - core - 3 . 0 . 0 - alpha4 - shaded . jar b / lib / cassandra - driver - core - 3 . 0 . 0 - alpha4 - shaded . jar <nl> new file mode 100644 <nl> index 0000000 . . 9a4921e <nl> Binary files / dev / null and b / lib / cassandra - driver - core - 3 . 0 . 0 - alpha4 - shaded . jar differ <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> index 36cdb15 . . 5f7c024 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> @ @ - 300 , 8 + 300 , 8 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> { <nl> / / Get the TypeCodec stuff in Java Driver initialized . <nl> / / This is to get the classes loaded outside of the restricted sandbox ' s security context of a UDF . <nl> - UDHelper . codecRegistry . codecFor ( DataType . inet ( ) ) . format ( InetAddress . getLoopbackAddress ( ) ) ; <nl> - UDHelper . codecRegistry . codecFor ( DataType . ascii ( ) ) . format ( " " ) ; <nl> + UDHelper . codecFor ( DataType . inet ( ) ) . format ( InetAddress . getLoopbackAddress ( ) ) ; <nl> + UDHelper . codecFor ( DataType . ascii ( ) ) . format ( " " ) ; <nl> } <nl> <nl> private static final class ThreadIdAndCpuTime extends CompletableFuture < Object > <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java <nl> index df6ca1f . . d7700c4 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java <nl> @ @ - 38 , 8 + 38 , 8 @ @ import org . apache . cassandra . transport . Server ; <nl> public final class UDHelper <nl> { <nl> / / TODO make these c ' tors and methods public in Java - Driver - see https : / / datastax - oss . atlassian . net / browse / JAVA - 502 <nl> - static final MethodHandle methodParseOne ; <nl> - static final CodecRegistry codecRegistry ; <nl> + private static final MethodHandle methodParseOne ; <nl> + private static final CodecRegistry codecRegistry ; <nl> static <nl> { <nl> try <nl> @ @ - 56 , 6 + 56 , 11 @ @ public final class UDHelper <nl> } <nl> } <nl> <nl> + static TypeCodec < Object > codecFor ( DataType dataType ) <nl> + { <nl> + return codecRegistry . codecFor ( dataType ) ; <nl> + } <nl> + <nl> / * * <nl> * Construct an array containing the Java classes for the given Java Driver { @ link com . datastax . driver . core . DataType } s . <nl> * <nl> @ @ - 132 , 12 + 137 , 12 @ @ public final class UDHelper <nl> <nl> public static Object deserialize ( DataType dataType , int protocolVersion , ByteBuffer value ) <nl> { <nl> - return codecRegistry . codecFor ( dataType ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> + return codecFor ( dataType ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; <nl> } <nl> <nl> public static ByteBuffer serialize ( DataType dataType , int protocolVersion , Object value ) <nl> { <nl> - TypeCodec < Object > codec = codecRegistry . codecFor ( dataType ) ; <nl> + TypeCodec < Object > codec = codecFor ( dataType ) ; <nl> if ( ! codec . getJavaType ( ) . getRawType ( ) . isAssignableFrom ( value . getClass ( ) ) ) <nl> throw new InvalidTypeException ( " Invalid value for CQL type " + dataType . getName ( ) . toString ( ) ) ; <nl> <nl> @ @ - 146 , 7 + 151 , 7 @ @ public final class UDHelper <nl> <nl> public static Class < ? > asJavaClass ( DataType dataType ) <nl> { <nl> - return codecRegistry . codecFor ( dataType ) . getJavaType ( ) . getRawType ( ) ; <nl> + return codecFor ( dataType ) . getJavaType ( ) . getRawType ( ) ; <nl> } <nl> <nl> public static boolean isNullOrEmpty ( AbstractType < ? > type , ByteBuffer bb ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> index dc47861 . . 4341258 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . cql3 . validation . operations ; <nl> <nl> import java . math . BigDecimal ; <nl> import java . text . SimpleDateFormat ; <nl> + import java . util . Arrays ; <nl> import java . util . Calendar ; <nl> import java . util . Date ; <nl> import java . util . TimeZone ; <nl> @ @ - 1635 , 4 + 1636 , 29 @ @ public class AggregationTest extends CQLTester <nl> assertRows ( execute ( " SELECT " + aRNON + " ( b ) FROM % s " ) , row ( " fin " ) ) ; <nl> <nl> } <nl> + <nl> + @ Test <nl> + public void testEmptyListInitcond ( ) throws Throwable <nl> + { <nl> + String f = createFunction ( KEYSPACE , <nl> + " list , int " , <nl> + " CREATE FUNCTION % s ( s list < text > , i int ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS list < text > " + <nl> + " LANGUAGE java " + <nl> + " AS ' if ( i ! = null ) s . add ( String . valueOf ( i ) ) ; return s ; ' " ) ; <nl> + <nl> + String a = createAggregate ( KEYSPACE , <nl> + " int " , <nl> + " CREATE AGGREGATE % s ( int ) " + <nl> + " SFUNC " + shortFunctionName ( f ) + ' ' + <nl> + " STYPE list < text > " + <nl> + " INITCOND [ ] " ) ; <nl> + <nl> + createTable ( " CREATE TABLE % s ( a int primary key , b int ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b ) VALUES ( 1 , 1 ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b ) VALUES ( 2 , null ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b ) VALUES ( 3 , 2 ) " ) ; <nl> + assertRows ( execute ( " SELECT " + a + " ( b ) FROM % s " ) , row ( Arrays . asList ( " 1 " , " 2 " ) ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index 3bef142 . . 5f99e45 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 2690 , 7 + 2690 , 7 @ @ def setup _ cqlruleset ( cqlmodule ) : <nl> def main ( options , hostname , port ) : <nl> setup _ cqlruleset ( options . cqlmodule ) <nl> <nl> - if os . path . exists ( HISTORY ) and readline is not None : <nl> + if os . path . exists ( HISTORY ) and readline is not None and readline . get _ history _ length ( ) > 0 : <nl> readline . read _ history _ file ( HISTORY ) <nl> delims = readline . get _ completer _ delims ( ) <nl> delims . replace ( " ' " , " " )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 616ff47 . . 6c97ffb 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 
 + * Aggregate with Initial Condition fails with C * 3 . 0 ( CASSANDRA - 10367 ) 
 Merged from 2 . 2 : 
 * Expose phi values from failure detector via JMX and tweak debug 
 and trace logging ( CASSANDRA - 9526 ) 
 diff - - git a / lib / cassandra - driver - core - 3 . 0 . 0 - alpha3 - 093a692 - SNAPSHOT - shaded . jar b / lib / cassandra - driver - core - 3 . 0 . 0 - alpha3 - 093a692 - SNAPSHOT - shaded . jar 
 deleted file mode 100644 
 index daf7837 . . 0000000 
 Binary files a / lib / cassandra - driver - core - 3 . 0 . 0 - alpha3 - 093a692 - SNAPSHOT - shaded . jar and / dev / null differ 
 diff - - git a / lib / cassandra - driver - core - 3 . 0 . 0 - alpha4 - shaded . jar b / lib / cassandra - driver - core - 3 . 0 . 0 - alpha4 - shaded . jar 
 new file mode 100644 
 index 0000000 . . 9a4921e 
 Binary files / dev / null and b / lib / cassandra - driver - core - 3 . 0 . 0 - alpha4 - shaded . jar differ 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 index 36cdb15 . . 5f7c024 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 @ @ - 300 , 8 + 300 , 8 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 { 
 / / Get the TypeCodec stuff in Java Driver initialized . 
 / / This is to get the classes loaded outside of the restricted sandbox ' s security context of a UDF . 
 - UDHelper . codecRegistry . codecFor ( DataType . inet ( ) ) . format ( InetAddress . getLoopbackAddress ( ) ) ; 
 - UDHelper . codecRegistry . codecFor ( DataType . ascii ( ) ) . format ( " " ) ; 
 + UDHelper . codecFor ( DataType . inet ( ) ) . format ( InetAddress . getLoopbackAddress ( ) ) ; 
 + UDHelper . codecFor ( DataType . ascii ( ) ) . format ( " " ) ; 
 } 
 
 private static final class ThreadIdAndCpuTime extends CompletableFuture < Object > 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java 
 index df6ca1f . . d7700c4 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java 
 @ @ - 38 , 8 + 38 , 8 @ @ import org . apache . cassandra . transport . Server ; 
 public final class UDHelper 
 { 
 / / TODO make these c ' tors and methods public in Java - Driver - see https : / / datastax - oss . atlassian . net / browse / JAVA - 502 
 - static final MethodHandle methodParseOne ; 
 - static final CodecRegistry codecRegistry ; 
 + private static final MethodHandle methodParseOne ; 
 + private static final CodecRegistry codecRegistry ; 
 static 
 { 
 try 
 @ @ - 56 , 6 + 56 , 11 @ @ public final class UDHelper 
 } 
 } 
 
 + static TypeCodec < Object > codecFor ( DataType dataType ) 
 + { 
 + return codecRegistry . codecFor ( dataType ) ; 
 + } 
 + 
 / * * 
 * Construct an array containing the Java classes for the given Java Driver { @ link com . datastax . driver . core . DataType } s . 
 * 
 @ @ - 132 , 12 + 137 , 12 @ @ public final class UDHelper 
 
 public static Object deserialize ( DataType dataType , int protocolVersion , ByteBuffer value ) 
 { 
 - return codecRegistry . codecFor ( dataType ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 + return codecFor ( dataType ) . deserialize ( value , ProtocolVersion . fromInt ( protocolVersion ) ) ; 
 } 
 
 public static ByteBuffer serialize ( DataType dataType , int protocolVersion , Object value ) 
 { 
 - TypeCodec < Object > codec = codecRegistry . codecFor ( dataType ) ; 
 + TypeCodec < Object > codec = codecFor ( dataType ) ; 
 if ( ! codec . getJavaType ( ) . getRawType ( ) . isAssignableFrom ( value . getClass ( ) ) ) 
 throw new InvalidTypeException ( " Invalid value for CQL type " + dataType . getName ( ) . toString ( ) ) ; 
 
 @ @ - 146 , 7 + 151 , 7 @ @ public final class UDHelper 
 
 public static Class < ? > asJavaClass ( DataType dataType ) 
 { 
 - return codecRegistry . codecFor ( dataType ) . getJavaType ( ) . getRawType ( ) ; 
 + return codecFor ( dataType ) . getJavaType ( ) . getRawType ( ) ; 
 } 
 
 public static boolean isNullOrEmpty ( AbstractType < ? > type , ByteBuffer bb ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 index dc47861 . . 4341258 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . cql3 . validation . operations ; 
 
 import java . math . BigDecimal ; 
 import java . text . SimpleDateFormat ; 
 + import java . util . Arrays ; 
 import java . util . Calendar ; 
 import java . util . Date ; 
 import java . util . TimeZone ; 
 @ @ - 1635 , 4 + 1636 , 29 @ @ public class AggregationTest extends CQLTester 
 assertRows ( execute ( " SELECT " + aRNON + " ( b ) FROM % s " ) , row ( " fin " ) ) ; 
 
 } 
 + 
 + @ Test 
 + public void testEmptyListInitcond ( ) throws Throwable 
 + { 
 + String f = createFunction ( KEYSPACE , 
 + " list , int " , 
 + " CREATE FUNCTION % s ( s list < text > , i int ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS list < text > " + 
 + " LANGUAGE java " + 
 + " AS ' if ( i ! = null ) s . add ( String . valueOf ( i ) ) ; return s ; ' " ) ; 
 + 
 + String a = createAggregate ( KEYSPACE , 
 + " int " , 
 + " CREATE AGGREGATE % s ( int ) " + 
 + " SFUNC " + shortFunctionName ( f ) + ' ' + 
 + " STYPE list < text > " + 
 + " INITCOND [ ] " ) ; 
 + 
 + createTable ( " CREATE TABLE % s ( a int primary key , b int ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b ) VALUES ( 1 , 1 ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b ) VALUES ( 2 , null ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b ) VALUES ( 3 , 2 ) " ) ; 
 + assertRows ( execute ( " SELECT " + a + " ( b ) FROM % s " ) , row ( Arrays . asList ( " 1 " , " 2 " ) ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / bin / cqlsh b / bin / cqlsh 
 index 3bef142 . . 5f99e45 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 2690 , 7 + 2690 , 7 @ @ def setup _ cqlruleset ( cqlmodule ) : 
 def main ( options , hostname , port ) : 
 setup _ cqlruleset ( options . cqlmodule ) 
 
 - if os . path . exists ( HISTORY ) and readline is not None : 
 + if os . path . exists ( HISTORY ) and readline is not None and readline . get _ history _ length ( ) > 0 : 
 readline . read _ history _ file ( HISTORY ) 
 delims = readline . get _ completer _ delims ( ) 
 delims . replace ( " ' " , " " )
