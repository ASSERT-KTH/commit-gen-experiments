BLEU SCORE: 1.0

TEST MSG: fix logging context
GENERATED MSG: fix logging context

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategyOptions . java b / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategyOptions . java <nl> index fee9e34 . . 9362bde 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategyOptions . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategyOptions . java <nl> @ @ - 27 , 7 + 27 , 7 @ @ import org . apache . cassandra . exceptions . ConfigurationException ; <nl> <nl> public final class DateTieredCompactionStrategyOptions <nl> { <nl> - private static final Logger logger = LoggerFactory . getLogger ( DateTieredCompactionStrategy . class ) ; <nl> + private static final Logger logger = LoggerFactory . getLogger ( DateTieredCompactionStrategyOptions . class ) ; <nl> protected static final TimeUnit DEFAULT _ TIMESTAMP _ RESOLUTION = TimeUnit . MICROSECONDS ; <nl> @ Deprecated <nl> protected static final double DEFAULT _ MAX _ SSTABLE _ AGE _ DAYS = 365 * 1000 ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 191c935 . . 05b7ef3 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 9 , 6 + 9 , 7 @ @ <nl> * fix potential infinite loop in get _ count ( CASSANDRA - 4833 ) <nl> * fix compositeType . { get / from } String methods ( CASSANDRA - 4842 ) <nl> * ( CQL ) fix CREATE COLUMNFAMILY permissions check ( CASSANDRA - 4864 ) <nl> + * Fix DynamicCompositeType same type comparison ( CASSANDRA - 4711 ) <nl> <nl> <nl> 1 . 1 . 6 <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> index 0f0127a . . 06ecdfc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> @ @ - 120 , 15 + 120 , 15 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> * We compare component of different types by comparing the <nl> * comparator class names . We start with the simple classname <nl> * first because that will be faster in almost all cases , but <nl> - * allback on the full name if necessary <nl> - * / <nl> + * fallback on the full name if necessary <nl> + * / <nl> int cmp = comp1 . getClass ( ) . getSimpleName ( ) . compareTo ( comp2 . getClass ( ) . getSimpleName ( ) ) ; <nl> if ( cmp ! = 0 ) <nl> - return cmp < 0 ? FixedValueComparator . instance : ReversedType . getInstance ( FixedValueComparator . instance ) ; <nl> + return cmp < 0 ? FixedValueComparator . alwaysLesserThan : FixedValueComparator . alwaysGreaterThan ; <nl> <nl> cmp = comp1 . getClass ( ) . getName ( ) . compareTo ( comp2 . getClass ( ) . getName ( ) ) ; <nl> if ( cmp ! = 0 ) <nl> - return cmp < 0 ? FixedValueComparator . instance : ReversedType . getInstance ( FixedValueComparator . instance ) ; <nl> + return cmp < 0 ? FixedValueComparator . alwaysLesserThan : FixedValueComparator . alwaysGreaterThan ; <nl> <nl> / / if cmp = = 0 , we ' re actually having the same type , but one that <nl> / / did not have a singleton instance . It ' s ok ( though inefficient ) . <nl> @ @ - 307 , 11 + 307 , 19 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> * / <nl> private static class FixedValueComparator extends AbstractType < Void > <nl> { <nl> - public static final FixedValueComparator instance = new FixedValueComparator ( ) ; <nl> + public static final FixedValueComparator alwaysLesserThan = new FixedValueComparator ( - 1 ) ; <nl> + public static final FixedValueComparator alwaysGreaterThan = new FixedValueComparator ( 1 ) ; <nl> + <nl> + private final int cmp ; <nl> + <nl> + public FixedValueComparator ( int cmp ) <nl> + { <nl> + this . cmp = cmp ; <nl> + } <nl> <nl> public int compare ( ByteBuffer v1 , ByteBuffer v2 ) <nl> { <nl> - return - 1 ; <nl> + return cmp ; <nl> } <nl> <nl> public Void compose ( ByteBuffer bytes )

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategyOptions . java b / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategyOptions . java 
 index fee9e34 . . 9362bde 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategyOptions . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategyOptions . java 
 @ @ - 27 , 7 + 27 , 7 @ @ import org . apache . cassandra . exceptions . ConfigurationException ; 
 
 public final class DateTieredCompactionStrategyOptions 
 { 
 - private static final Logger logger = LoggerFactory . getLogger ( DateTieredCompactionStrategy . class ) ; 
 + private static final Logger logger = LoggerFactory . getLogger ( DateTieredCompactionStrategyOptions . class ) ; 
 protected static final TimeUnit DEFAULT _ TIMESTAMP _ RESOLUTION = TimeUnit . MICROSECONDS ; 
 @ Deprecated 
 protected static final double DEFAULT _ MAX _ SSTABLE _ AGE _ DAYS = 365 * 1000 ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 191c935 . . 05b7ef3 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 9 , 6 + 9 , 7 @ @ 
 * fix potential infinite loop in get _ count ( CASSANDRA - 4833 ) 
 * fix compositeType . { get / from } String methods ( CASSANDRA - 4842 ) 
 * ( CQL ) fix CREATE COLUMNFAMILY permissions check ( CASSANDRA - 4864 ) 
 + * Fix DynamicCompositeType same type comparison ( CASSANDRA - 4711 ) 
 
 
 1 . 1 . 6 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 index 0f0127a . . 06ecdfc 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 @ @ - 120 , 15 + 120 , 15 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 * We compare component of different types by comparing the 
 * comparator class names . We start with the simple classname 
 * first because that will be faster in almost all cases , but 
 - * allback on the full name if necessary 
 - * / 
 + * fallback on the full name if necessary 
 + * / 
 int cmp = comp1 . getClass ( ) . getSimpleName ( ) . compareTo ( comp2 . getClass ( ) . getSimpleName ( ) ) ; 
 if ( cmp ! = 0 ) 
 - return cmp < 0 ? FixedValueComparator . instance : ReversedType . getInstance ( FixedValueComparator . instance ) ; 
 + return cmp < 0 ? FixedValueComparator . alwaysLesserThan : FixedValueComparator . alwaysGreaterThan ; 
 
 cmp = comp1 . getClass ( ) . getName ( ) . compareTo ( comp2 . getClass ( ) . getName ( ) ) ; 
 if ( cmp ! = 0 ) 
 - return cmp < 0 ? FixedValueComparator . instance : ReversedType . getInstance ( FixedValueComparator . instance ) ; 
 + return cmp < 0 ? FixedValueComparator . alwaysLesserThan : FixedValueComparator . alwaysGreaterThan ; 
 
 / / if cmp = = 0 , we ' re actually having the same type , but one that 
 / / did not have a singleton instance . It ' s ok ( though inefficient ) . 
 @ @ - 307 , 11 + 307 , 19 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 * / 
 private static class FixedValueComparator extends AbstractType < Void > 
 { 
 - public static final FixedValueComparator instance = new FixedValueComparator ( ) ; 
 + public static final FixedValueComparator alwaysLesserThan = new FixedValueComparator ( - 1 ) ; 
 + public static final FixedValueComparator alwaysGreaterThan = new FixedValueComparator ( 1 ) ; 
 + 
 + private final int cmp ; 
 + 
 + public FixedValueComparator ( int cmp ) 
 + { 
 + this . cmp = cmp ; 
 + } 
 
 public int compare ( ByteBuffer v1 , ByteBuffer v2 ) 
 { 
 - return - 1 ; 
 + return cmp ; 
 } 
 
 public Void compose ( ByteBuffer bytes )
