BLEU SCORE: 0.03283637368030199

TEST MSG: Ensure safe resource cleanup when replacing SSTables
GENERATED MSG: merge from 1 . 2

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4cfc957 . . 0f1ae93 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 41 , 6 + 41 , 7 @ @ <nl> * Properly remove 1 . 2 sstable support in 2 . 1 ( CASSANDRA - 6869 ) <nl> * Lock counter cells , not partitions ( CASSANDRA - 6880 ) <nl> * Track presence of legacy counter shards in sstables ( CASSANDRA - 6888 ) <nl> + * Ensure safe resource cleanup when replacing sstables ( CASSANDRA - 6912 ) <nl> Merged from 2 . 0 : <nl> * Allow compaction of system tables during startup ( CASSANDRA - 6913 ) <nl> * Restrict Windows to parallel repairs ( CASSANDRA - 6907 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / DataTracker . java b / src / java / org / apache / cassandra / db / DataTracker . java <nl> index c8fc699 . . 9c8f9a0 100644 <nl> - - - a / src / java / org / apache / cassandra / db / DataTracker . java <nl> + + + b / src / java / org / apache / cassandra / db / DataTracker . java <nl> @ @ - 192 , 14 + 192 , 17 @ @ public class DataTracker <nl> public boolean markCompacting ( Iterable < SSTableReader > sstables ) <nl> { <nl> assert sstables ! = null & & ! Iterables . isEmpty ( sstables ) ; <nl> + while ( true ) <nl> + { <nl> + View currentView = view . get ( ) ; <nl> + Set < SSTableReader > inactive = Sets . difference ( ImmutableSet . copyOf ( sstables ) , currentView . compacting ) ; <nl> + if ( inactive . size ( ) < Iterables . size ( sstables ) ) <nl> + return false ; <nl> <nl> - View currentView = view . get ( ) ; <nl> - Set < SSTableReader > inactive = Sets . difference ( ImmutableSet . copyOf ( sstables ) , currentView . compacting ) ; <nl> - if ( inactive . size ( ) < Iterables . size ( sstables ) ) <nl> - return false ; <nl> - <nl> - View newView = currentView . markCompacting ( inactive ) ; <nl> - return view . compareAndSet ( currentView , newView ) ; <nl> + View newView = currentView . markCompacting ( inactive ) ; <nl> + if ( view . compareAndSet ( currentView , newView ) ) <nl> + return true ; <nl> + } <nl> } <nl> <nl> / * * <nl> @ @ - 333 , 14 + 336 , 6 @ @ public class DataTracker <nl> * / <nl> public void replaceReaders ( Collection < SSTableReader > oldSSTables , Collection < SSTableReader > newSSTables ) <nl> { <nl> - / / data component will be unchanged but the index summary will be a different size <nl> - / / ( since we save that to make restart fast ) <nl> - long sizeIncrease = 0 ; <nl> - for ( SSTableReader sstable : oldSSTables ) <nl> - sizeIncrease - = sstable . bytesOnDisk ( ) ; <nl> - for ( SSTableReader sstable : newSSTables ) <nl> - sizeIncrease + = sstable . bytesOnDisk ( ) ; <nl> - <nl> View currentView , newView ; <nl> do <nl> { <nl> @ @ - 349 , 9 + 344 , 6 @ @ public class DataTracker <nl> } <nl> while ( ! view . compareAndSet ( currentView , newView ) ) ; <nl> <nl> - StorageMetrics . load . inc ( sizeIncrease ) ; <nl> - cfstore . metric . liveDiskSpaceUsed . inc ( sizeIncrease ) ; <nl> - <nl> for ( SSTableReader sstable : newSSTables ) <nl> sstable . setTrackedBy ( this ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java <nl> index f87f356 . . 0696fb7 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java <nl> @ @ - 258 , 7 + 258 , 7 @ @ public class IndexSummary implements Closeable <nl> } <nl> <nl> @ Override <nl> - public void close ( ) throws IOException <nl> + public void close ( ) <nl> { <nl> bytes . free ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java b / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java <nl> index b35f5f4 . . d5b7364 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java <nl> @ @ - 19 , 17 + 19 , 24 @ @ package org . apache . cassandra . io . sstable ; <nl> <nl> import java . io . IOException ; <nl> import java . lang . management . ManagementFactory ; <nl> - import java . util . * ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . Comparator ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> import java . util . concurrent . ScheduledFuture ; <nl> import java . util . concurrent . TimeUnit ; <nl> - <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> <nl> import com . google . common . annotations . VisibleForTesting ; <nl> - import com . google . common . collect . * ; <nl> - <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> + import com . google . common . collect . HashMultimap ; <nl> + import com . google . common . collect . Iterables ; <nl> + import com . google . common . collect . Lists ; <nl> + import com . google . common . collect . Multimap ; <nl> + import com . google . common . collect . Sets ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 409 , 8 + 416 , 9 @ @ public class IndexSummaryManager implements IndexSummaryManagerMBean <nl> logger . debug ( " Re - sampling index summary for { } from { } / { } to { } / { } of the original number of entries " , <nl> sstable , sstable . getIndexSummarySamplingLevel ( ) , Downsampling . BASE _ SAMPLING _ LEVEL , <nl> entry . newSamplingLevel , Downsampling . BASE _ SAMPLING _ LEVEL ) ; <nl> - SSTableReader replacement = sstable . cloneWithNewSummarySamplingLevel ( entry . newSamplingLevel ) ; <nl> - DataTracker tracker = Keyspace . open ( sstable . getKeyspaceName ( ) ) . getColumnFamilyStore ( sstable . getColumnFamilyName ( ) ) . getDataTracker ( ) ; <nl> + ColumnFamilyStore cfs = Keyspace . open ( sstable . getKeyspaceName ( ) ) . getColumnFamilyStore ( sstable . getColumnFamilyName ( ) ) ; <nl> + SSTableReader replacement = sstable . cloneWithNewSummarySamplingLevel ( cfs , entry . newSamplingLevel ) ; <nl> + DataTracker tracker = cfs . getDataTracker ( ) ; <nl> <nl> replacedByTracker . put ( tracker , sstable ) ; <nl> replacementsByTracker . put ( tracker , replacement ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index 82a0bc8 . . d29d5ac 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 17 , 16 + 17 , 34 @ @ <nl> * / <nl> package org . apache . cassandra . io . sstable ; <nl> <nl> - import java . io . * ; <nl> + import java . io . BufferedInputStream ; <nl> + import java . io . Closeable ; <nl> + import java . io . DataInputStream ; <nl> + import java . io . File ; <nl> + import java . io . FileInputStream ; <nl> + import java . io . FileNotFoundException ; <nl> + import java . io . FileOutputStream ; <nl> + import java . io . IOException ; <nl> + import java . io . RandomAccessFile ; <nl> import java . nio . ByteBuffer ; <nl> - import java . util . * ; <nl> - import java . util . concurrent . * ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Collection ; <nl> + import java . util . Collections ; <nl> + import java . util . Comparator ; <nl> + import java . util . EnumSet ; <nl> + import java . util . Iterator ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> + import java . util . concurrent . ExecutorService ; <nl> + import java . util . concurrent . LinkedBlockingQueue ; <nl> + import java . util . concurrent . ScheduledFuture ; <nl> + import java . util . concurrent . ScheduledThreadPoolExecutor ; <nl> + import java . util . concurrent . TimeUnit ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> import java . util . concurrent . atomic . AtomicLong ; <nl> <nl> - import com . clearspring . analytics . stream . cardinality . CardinalityMergeException ; <nl> - import com . clearspring . analytics . stream . cardinality . ICardinality ; <nl> import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . base . Predicate ; <nl> import com . google . common . collect . Iterators ; <nl> @ @ - 36 , 28 + 54 , 62 @ @ import com . google . common . util . concurrent . RateLimiter ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import com . clearspring . analytics . stream . cardinality . CardinalityMergeException ; <nl> + import com . clearspring . analytics . stream . cardinality . ICardinality ; <nl> import org . apache . cassandra . cache . CachingOptions ; <nl> import org . apache . cassandra . cache . InstrumentingCache ; <nl> import org . apache . cassandra . cache . KeyCacheKey ; <nl> import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; <nl> - import org . apache . cassandra . config . * ; <nl> - import org . apache . cassandra . db . * ; <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> + import org . apache . cassandra . config . ColumnDefinition ; <nl> + import org . apache . cassandra . config . Config ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . config . Schema ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . DataRange ; <nl> + import org . apache . cassandra . db . DataTracker ; <nl> + import org . apache . cassandra . db . DecoratedKey ; <nl> + import org . apache . cassandra . db . Keyspace ; <nl> + import org . apache . cassandra . db . RowIndexEntry ; <nl> + import org . apache . cassandra . db . RowPosition ; <nl> + import org . apache . cassandra . db . SystemKeyspace ; <nl> import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; <nl> import org . apache . cassandra . db . commitlog . ReplayPosition ; <nl> import org . apache . cassandra . db . compaction . ICompactionScanner ; <nl> import org . apache . cassandra . db . index . SecondaryIndex ; <nl> - import org . apache . cassandra . dht . * ; <nl> + import org . apache . cassandra . dht . AbstractBounds ; <nl> + import org . apache . cassandra . dht . IPartitioner ; <nl> + import org . apache . cassandra . dht . LocalPartitioner ; <nl> + import org . apache . cassandra . dht . Range ; <nl> + import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; <nl> import org . apache . cassandra . io . compress . CompressedThrottledReader ; <nl> import org . apache . cassandra . io . compress . CompressionMetadata ; <nl> - import org . apache . cassandra . io . sstable . metadata . * ; <nl> - import org . apache . cassandra . io . util . * ; <nl> + import org . apache . cassandra . io . sstable . metadata . CompactionMetadata ; <nl> + import org . apache . cassandra . io . sstable . metadata . MetadataComponent ; <nl> + import org . apache . cassandra . io . sstable . metadata . MetadataType ; <nl> + import org . apache . cassandra . io . sstable . metadata . StatsMetadata ; <nl> + import org . apache . cassandra . io . sstable . metadata . ValidationMetadata ; <nl> + import org . apache . cassandra . io . util . DataOutputStreamAndChannel ; <nl> + import org . apache . cassandra . io . util . FileDataInput ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> + import org . apache . cassandra . io . util . ICompressedFile ; <nl> + import org . apache . cassandra . io . util . RandomAccessReader ; <nl> + import org . apache . cassandra . io . util . SegmentedFile ; <nl> + import org . apache . cassandra . io . util . ThrottledReader ; <nl> import org . apache . cassandra . metrics . RestorableMeter ; <nl> + import org . apache . cassandra . metrics . StorageMetrics ; <nl> import org . apache . cassandra . service . ActiveRepairService ; <nl> import org . apache . cassandra . service . CacheService ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . tracing . Tracing ; <nl> - import org . apache . cassandra . utils . * ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . CLibrary ; <nl> + import org . apache . cassandra . utils . EstimatedHistogram ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . apache . cassandra . utils . FilterFactory ; <nl> + import org . apache . cassandra . utils . IFilter ; <nl> + import org . apache . cassandra . utils . Pair ; <nl> <nl> import static org . apache . cassandra . db . Directories . SECONDARY _ INDEX _ NAME _ SEPARATOR ; <nl> <nl> @ @ - 122 , 15 + 174 , 24 @ @ public class SSTableReader extends SSTable implements Closeable <nl> / / but it seems like a good extra layer of protection against reference counting bugs to not delete data based on that alone <nl> private final AtomicBoolean isCompacted = new AtomicBoolean ( false ) ; <nl> private final AtomicBoolean isSuspect = new AtomicBoolean ( false ) ; <nl> - private final AtomicBoolean isReplaced = new AtomicBoolean ( false ) ; <nl> <nl> - private final SSTableDeletingTask deletingTask ; <nl> / / not final since we need to be able to change level on a file . <nl> private volatile StatsMetadata sstableMetadata ; <nl> <nl> private final AtomicLong keyCacheHit = new AtomicLong ( 0 ) ; <nl> private final AtomicLong keyCacheRequest = new AtomicLong ( 0 ) ; <nl> <nl> + / * * <nl> + * To support replacing this sstablereader with another object that represents that same underlying sstable , but with different associated resources , <nl> + * we build a linked - list chain of replacement , which we synchronise using a shared object to make maintenance of the list across multiple threads simple . <nl> + * On close we check if any of the closeable resources differ between any chains either side of us ; any that are in neither of the adjacent links ( if any ) are closed . <nl> + * Once we ' ve made this decision we remove ourselves from the linked list , so that anybody behind / ahead will compare against only other still opened resources . <nl> + * / <nl> + private Object replaceLock = new Object ( ) ; <nl> + private SSTableReader replacedBy ; <nl> + private SSTableReader replaces ; <nl> + private SSTableDeletingTask deletingTask ; <nl> + <nl> @ VisibleForTesting <nl> public RestorableMeter readMeter ; <nl> private ScheduledFuture readMeterSyncFuture ; <nl> @ @ - 275 , 10 + 336 , 10 @ @ public class SSTableReader extends SSTable implements Closeable <nl> statsMetadata ) ; <nl> <nl> / / special implementation of load to use non - pooled SegmentedFile builders <nl> - SegmentedFile . Builder ibuilder = new BufferedSegmentedFile . Builder ( ) ; <nl> + SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; <nl> SegmentedFile . Builder dbuilder = sstable . compression <nl> - ? new CompressedSegmentedFile . Builder ( ) <nl> - : new BufferedSegmentedFile . Builder ( ) ; <nl> + ? SegmentedFile . getCompressedBuilder ( ) <nl> + : SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ; <nl> if ( ! sstable . loadSummary ( ibuilder , dbuilder ) ) <nl> sstable . buildSummary ( false , ibuilder , dbuilder , false , Downsampling . BASE _ SAMPLING _ LEVEL ) ; <nl> sstable . ifile = ibuilder . complete ( sstable . descriptor . filenameFor ( Component . PRIMARY _ INDEX ) ) ; <nl> @ @ - 480 , 27 + 541 , 95 @ @ public class SSTableReader extends SSTable implements Closeable <nl> return sum ; <nl> } <nl> <nl> - / * * <nl> - * Clean up all opened resources . <nl> - * <nl> - * @ throws IOException <nl> - * / <nl> - public void close ( ) throws IOException <nl> + private void tidy ( boolean release ) <nl> { <nl> if ( readMeterSyncFuture ! = null ) <nl> readMeterSyncFuture . cancel ( false ) ; <nl> <nl> - / / if this SSTR was replaced by a new SSTR with a different index summary , the two instances will share <nl> - / / resources , so don ' t force unmapping , clear the FileCacheService entry , or close the BF <nl> - if ( ! isReplaced . get ( ) ) <nl> + assert references . get ( ) = = 0 ; <nl> + <nl> + synchronized ( replaceLock ) <nl> { <nl> - / / Force finalizing mmapping if necessary <nl> - ifile . cleanup ( ) ; <nl> - dfile . cleanup ( ) ; <nl> - / / close the BF so it can be opened later . <nl> - bf . close ( ) ; <nl> + boolean closeBf = true , closeSummary = true , closeFiles = true ; <nl> + <nl> + if ( replacedBy ! = null ) <nl> + { <nl> + closeBf = replacedBy . bf ! = bf ; <nl> + closeSummary = replacedBy . indexSummary ! = indexSummary ; <nl> + closeFiles = replacedBy . dfile ! = dfile ; <nl> + } <nl> + <nl> + if ( replaces ! = null ) <nl> + { <nl> + closeBf & = replaces . bf ! = bf ; <nl> + closeSummary & = replaces . indexSummary ! = indexSummary ; <nl> + closeFiles & = replaces . dfile ! = dfile ; <nl> + } <nl> + <nl> + boolean deleteAll = false ; <nl> + if ( release & & isCompacted . get ( ) ) <nl> + { <nl> + assert replacedBy = = null ; <nl> + if ( replaces ! = null ) <nl> + { <nl> + replaces . replacedBy = null ; <nl> + replaces . deletingTask = deletingTask ; <nl> + replaces . markObsolete ( ) ; <nl> + } <nl> + else <nl> + { <nl> + deleteAll = true ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + if ( replaces ! = null ) <nl> + replaces . replacedBy = replacedBy ; <nl> + if ( replacedBy ! = null ) <nl> + replacedBy . replaces = replaces ; <nl> + } <nl> + <nl> + assert references . get ( ) = = 0 ; <nl> + if ( closeBf ) <nl> + bf . close ( ) ; <nl> + if ( closeSummary ) <nl> + indexSummary . close ( ) ; <nl> + if ( closeFiles ) <nl> + { <nl> + ifile . cleanup ( ) ; <nl> + dfile . cleanup ( ) ; <nl> + } <nl> + if ( deleteAll ) <nl> + { <nl> + / * * <nl> + * Do the OS a favour and suggest ( using fadvice call ) that we <nl> + * don ' t want to see pages of this SSTable in memory anymore . <nl> + * <nl> + * NOTE : We can ' t use madvice in java because it requires the address of <nl> + * the mapping , so instead we always open a file and run fadvice ( fd , 0 , 0 ) on it <nl> + * / <nl> + dropPageCache ( ) ; <nl> + deletingTask . schedule ( ) ; <nl> + } <nl> } <nl> - indexSummary . close ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Schedule clean - up of resources <nl> + * / <nl> + public void close ( ) <nl> + { <nl> + tidy ( false ) ; <nl> + } <nl> + <nl> + public String getFilename ( ) <nl> + { <nl> + return dfile . path ; <nl> + } <nl> + <nl> + public String getIndexFilename ( ) <nl> + { <nl> + return ifile . path ; <nl> } <nl> <nl> public void setTrackedBy ( DataTracker tracker ) <nl> @ @ - 726 , 6 + 855 , 17 @ @ public class SSTableReader extends SSTable implements Closeable <nl> } <nl> } <nl> <nl> + public void setReplacedBy ( SSTableReader replacement ) <nl> + { <nl> + synchronized ( replaceLock ) <nl> + { <nl> + assert replacedBy = = null ; <nl> + replacedBy = replacement ; <nl> + replacement . replaces = this ; <nl> + replacement . replaceLock = replaceLock ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Returns a new SSTableReader with the same properties as this SSTableReader except that a new IndexSummary will <nl> * be built at the target samplingLevel . This ( original ) SSTableReader instance will be marked as replaced , have <nl> @ @ - 734 , 49 + 874 , 59 @ @ public class SSTableReader extends SSTable implements Closeable <nl> * @ return a new SSTableReader <nl> * @ throws IOException <nl> * / <nl> - public SSTableReader cloneWithNewSummarySamplingLevel ( int samplingLevel ) throws IOException <nl> + public SSTableReader cloneWithNewSummarySamplingLevel ( ColumnFamilyStore parent , int samplingLevel ) throws IOException <nl> { <nl> - int minIndexInterval = metadata . getMinIndexInterval ( ) ; <nl> - int maxIndexInterval = metadata . getMaxIndexInterval ( ) ; <nl> - double effectiveInterval = indexSummary . getEffectiveIndexInterval ( ) ; <nl> + synchronized ( replaceLock ) <nl> + { <nl> + assert replacedBy = = null ; <nl> <nl> - IndexSummary newSummary ; <nl> + int minIndexInterval = metadata . getMinIndexInterval ( ) ; <nl> + int maxIndexInterval = metadata . getMaxIndexInterval ( ) ; <nl> + double effectiveInterval = indexSummary . getEffectiveIndexInterval ( ) ; <nl> <nl> - / / We have to rebuild the summary from the on - disk primary index in three cases : <nl> - / / 1 . The sampling level went up , so we need to read more entries off disk <nl> - / / 2 . The min _ index _ interval changed ( in either direction ) ; this changes what entries would be in the summary <nl> - / / at full sampling ( and consequently at any other sampling level ) <nl> - / / 3 . The max _ index _ interval was lowered , forcing us to raise the sampling level <nl> - if ( samplingLevel > indexSummary . getSamplingLevel ( ) | | indexSummary . getMinIndexInterval ( ) ! = minIndexInterval | | effectiveInterval > maxIndexInterval ) <nl> - { <nl> - newSummary = buildSummaryAtLevel ( samplingLevel ) ; <nl> - } <nl> - else if ( samplingLevel < indexSummary . getSamplingLevel ( ) ) <nl> - { <nl> - / / we can use the existing index summary to make a smaller one <nl> - newSummary = IndexSummaryBuilder . downsample ( indexSummary , samplingLevel , minIndexInterval , partitioner ) ; <nl> + IndexSummary newSummary ; <nl> + long oldSize = bytesOnDisk ( ) ; <nl> <nl> - SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; <nl> - SegmentedFile . Builder dbuilder = compression <nl> - ? SegmentedFile . getCompressedBuilder ( ) <nl> - : SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ; <nl> - saveSummary ( ibuilder , dbuilder , newSummary ) ; <nl> - } <nl> - else <nl> - { <nl> - throw new AssertionError ( " Attempted to clone SSTableReader with the same index summary sampling level and " + <nl> - " no adjustments to min / max _ index _ interval " ) ; <nl> - } <nl> + / / We have to rebuild the summary from the on - disk primary index in three cases : <nl> + / / 1 . The sampling level went up , so we need to read more entries off disk <nl> + / / 2 . The min _ index _ interval changed ( in either direction ) ; this changes what entries would be in the summary <nl> + / / at full sampling ( and consequently at any other sampling level ) <nl> + / / 3 . The max _ index _ interval was lowered , forcing us to raise the sampling level <nl> + if ( samplingLevel > indexSummary . getSamplingLevel ( ) | | indexSummary . getMinIndexInterval ( ) ! = minIndexInterval | | effectiveInterval > maxIndexInterval ) <nl> + { <nl> + newSummary = buildSummaryAtLevel ( samplingLevel ) ; <nl> + } <nl> + else if ( samplingLevel < indexSummary . getSamplingLevel ( ) ) <nl> + { <nl> + / / we can use the existing index summary to make a smaller one <nl> + newSummary = IndexSummaryBuilder . downsample ( indexSummary , samplingLevel , minIndexInterval , partitioner ) ; <nl> + <nl> + SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; <nl> + SegmentedFile . Builder dbuilder = compression <nl> + ? SegmentedFile . getCompressedBuilder ( ) <nl> + : SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ; <nl> + saveSummary ( ibuilder , dbuilder , newSummary ) ; <nl> + } <nl> + else <nl> + { <nl> + throw new AssertionError ( " Attempted to clone SSTableReader with the same index summary sampling level and " + <nl> + " no adjustments to min / max _ index _ interval " ) ; <nl> + } <nl> <nl> - markReplaced ( ) ; <nl> - if ( readMeterSyncFuture ! = null ) <nl> - readMeterSyncFuture . cancel ( false ) ; <nl> + long newSize = bytesOnDisk ( ) ; <nl> + StorageMetrics . load . inc ( newSize - oldSize ) ; <nl> + parent . metric . liveDiskSpaceUsed . inc ( newSize - oldSize ) ; <nl> <nl> - SSTableReader replacement = new SSTableReader ( descriptor , components , metadata , partitioner , ifile , dfile , newSummary , bf , maxDataAge , sstableMetadata ) ; <nl> - replacement . readMeter = this . readMeter ; <nl> - replacement . first = this . first ; <nl> - replacement . last = this . last ; <nl> - return replacement ; <nl> + if ( readMeterSyncFuture ! = null ) <nl> + readMeterSyncFuture . cancel ( false ) ; <nl> + <nl> + SSTableReader replacement = new SSTableReader ( descriptor , components , metadata , partitioner , ifile , dfile , newSummary , bf , maxDataAge , sstableMetadata ) ; <nl> + replacement . readMeter = this . readMeter ; <nl> + replacement . first = this . first ; <nl> + replacement . last = this . last ; <nl> + setReplacedBy ( replacement ) ; <nl> + return replacement ; <nl> + } <nl> } <nl> <nl> private IndexSummary buildSummaryAtLevel ( int newSamplingLevel ) throws IOException <nl> @ @ - 1342 , 12 + 1492 , 6 @ @ public class SSTableReader extends SSTable implements Closeable <nl> return dfile . onDiskLength ; <nl> } <nl> <nl> - public void markReplaced ( ) <nl> - { <nl> - boolean success = isReplaced . compareAndSet ( false , true ) ; <nl> - assert success : " Attempted to mark an SSTableReader as replaced more than once " ; <nl> - } <nl> - <nl> public boolean acquireReference ( ) <nl> { <nl> while ( true ) <nl> @ @ - 1368 , 27 + 1512 , 7 @ @ public class SSTableReader extends SSTable implements Closeable <nl> public void releaseReference ( ) <nl> { <nl> if ( references . decrementAndGet ( ) = = 0 ) <nl> - { <nl> - FileUtils . closeQuietly ( this ) ; <nl> - <nl> - / / if this SSTR instance was replaced by another with a different index summary , let the new instance <nl> - / / handle clearing the page cache and deleting the files <nl> - if ( isCompacted . get ( ) ) <nl> - { <nl> - assert ! isReplaced . get ( ) ; <nl> - <nl> - / * * <nl> - * Do the OS a favour and suggest ( using fadvice call ) that we <nl> - * don ' t want to see pages of this SSTable in memory anymore . <nl> - * <nl> - * NOTE : We can ' t use madvice in java because it requires the address of <nl> - * the mapping , so instead we always open a file and run fadvice ( fd , 0 , 0 ) on it <nl> - * / <nl> - dropPageCache ( ) ; <nl> - <nl> - deletingTask . schedule ( ) ; <nl> - } <nl> - } <nl> + tidy ( true ) ; <nl> assert references . get ( ) > = 0 : " Reference counter " + references . get ( ) + " for " + dfile . path ; <nl> } <nl> <nl> @ @ - 1406 , 6 + 1530 , 10 @ @ public class SSTableReader extends SSTable implements Closeable <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " Marking { } compacted " , getFilename ( ) ) ; <nl> <nl> + synchronized ( replaceLock ) <nl> + { <nl> + assert replacedBy = = null ; <nl> + } <nl> return ! isCompacted . getAndSet ( true ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java b / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java <nl> index 0f5136b . . 83d8f3a 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java <nl> + + + b / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java <nl> @ @ - 17 , 7 + 17 , 6 @ @ <nl> * / <nl> package org . apache . cassandra . utils ; <nl> <nl> - import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> <nl> public class AlwaysPresentFilter implements IFilter <nl> @ @ - 31 , 7 + 30 , 7 @ @ public class AlwaysPresentFilter implements IFilter <nl> <nl> public void clear ( ) { } <nl> <nl> - public void close ( ) throws IOException { } <nl> + public void close ( ) { } <nl> <nl> public long serializedSize ( ) { return 0 ; } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / BloomFilter . java b / src / java / org / apache / cassandra / utils / BloomFilter . java <nl> index 9fbb38e . . ceba89b 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / BloomFilter . java <nl> + + + b / src / java / org / apache / cassandra / utils / BloomFilter . java <nl> @ @ - 17 , 7 + 17 , 6 @ @ <nl> * / <nl> package org . apache . cassandra . utils ; <nl> <nl> - import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> <nl> import com . google . common . annotations . VisibleForTesting ; <nl> @ @ - 112 , 7 + 111 , 7 @ @ public abstract class BloomFilter implements IFilter <nl> bitset . clear ( ) ; <nl> } <nl> <nl> - public void close ( ) throws IOException <nl> + public void close ( ) <nl> { <nl> bitset . close ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / IFilter . java b / src / java / org / apache / cassandra / utils / IFilter . java <nl> index 10f6df2 . . 91c0e36 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / IFilter . java <nl> + + + b / src / java / org / apache / cassandra / utils / IFilter . java <nl> @ @ - 29 , 4 + 29 , 6 @ @ public interface IFilter extends Closeable <nl> void clear ( ) ; <nl> <nl> long serializedSize ( ) ; <nl> + <nl> + void close ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / obs / IBitSet . java b / src / java / org / apache / cassandra / utils / obs / IBitSet . java <nl> index c6fbddd . . 96aac6b 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / obs / IBitSet . java <nl> + + + b / src / java / org / apache / cassandra / utils / obs / IBitSet . java <nl> @ @ - 49 , 4 + 49 , 6 @ @ public interface IBitSet extends Closeable <nl> public long serializedSize ( TypeSizes type ) ; <nl> <nl> public void clear ( ) ; <nl> + <nl> + public void close ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java b / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java <nl> index 29dd848 . . de8da01 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java <nl> + + + b / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java <nl> @ @ - 139 , 7 + 139 , 7 @ @ public class OffHeapBitSet implements IBitSet <nl> return new OffHeapBitSet ( memory ) ; <nl> } <nl> <nl> - public void close ( ) throws IOException <nl> + public void close ( ) <nl> { <nl> bytes . free ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java b / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java <nl> index 5657d41 . . 1d2f690 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java <nl> + + + b / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java <nl> @ @ - 387 , 7 + 387 , 7 @ @ public class OpenBitSet implements IBitSet <nl> return ( int ) ( ( h > > 32 ) ^ h ) + 0x98761234 ; <nl> } <nl> <nl> - public void close ( ) throws IOException { <nl> + public void close ( ) { <nl> / / noop , let GC do the cleanup . <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / IndexSummaryManagerTest . java b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryManagerTest . java <nl> index 35fd9bd . . 9b2b492 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / IndexSummaryManagerTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryManagerTest . java <nl> @ @ - 421 , 7 + 421 , 7 @ @ public class IndexSummaryManagerTest extends SchemaLoader <nl> SSTableReader sstable = original ; <nl> for ( int samplingLevel = 1 ; samplingLevel < BASE _ SAMPLING _ LEVEL ; samplingLevel + + ) <nl> { <nl> - sstable = sstable . cloneWithNewSummarySamplingLevel ( samplingLevel ) ; <nl> + sstable = sstable . cloneWithNewSummarySamplingLevel ( cfs , samplingLevel ) ; <nl> assertEquals ( samplingLevel , sstable . getIndexSummarySamplingLevel ( ) ) ; <nl> int expectedSize = ( numRows * samplingLevel ) / ( sstable . metadata . getMinIndexInterval ( ) * BASE _ SAMPLING _ LEVEL ) ; <nl> assertEquals ( expectedSize , sstable . getIndexSummarySize ( ) , 1 ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java <nl> index bd50538 . . 8429d37 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java <nl> @ @ - 23 , 17 + 23 , 20 @ @ package org . apache . cassandra . io . sstable ; <nl> <nl> import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> - import java . util . * ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collection ; <nl> + import java . util . List ; <nl> + import java . util . Set ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . Future ; <nl> import java . util . concurrent . ScheduledThreadPoolExecutor ; <nl> import java . util . concurrent . ThreadPoolExecutor ; <nl> <nl> - import org . junit . Assert ; <nl> import com . google . common . collect . Sets ; <nl> + import org . junit . Assert ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> - <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 41 , 27 + 44 , 34 @ @ import org . apache . cassandra . OrderedJUnit4ClassRunner ; <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . db . * ; <nl> + import org . apache . cassandra . db . ColumnFamily ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . DecoratedKey ; <nl> + import org . apache . cassandra . db . IndexExpression ; <nl> + import org . apache . cassandra . db . Keyspace ; <nl> + import org . apache . cassandra . db . Mutation ; <nl> + import org . apache . cassandra . db . Row ; <nl> + import org . apache . cassandra . db . RowPosition ; <nl> import org . apache . cassandra . db . columniterator . IdentityQueryFilter ; <nl> - import org . apache . cassandra . db . composites . Composites ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . compaction . ICompactionScanner ; <nl> + import org . apache . cassandra . db . composites . Composites ; <nl> import org . apache . cassandra . dht . LocalPartitioner ; <nl> import org . apache . cassandra . dht . LocalToken ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> - import org . apache . cassandra . service . CacheService ; <nl> import org . apache . cassandra . io . util . FileDataInput ; <nl> import org . apache . cassandra . io . util . MmappedSegmentedFile ; <nl> import org . apache . cassandra . io . util . SegmentedFile ; <nl> + import org . apache . cassandra . service . CacheService ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> + import static org . apache . cassandra . Util . cellname ; <nl> import static org . junit . Assert . assertEquals ; <nl> - import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . assertFalse ; <nl> - import static org . apache . cassandra . Util . cellname ; <nl> + import static org . junit . Assert . assertTrue ; <nl> <nl> @ RunWith ( OrderedJUnit4ClassRunner . class ) <nl> public class SSTableReaderTest extends SchemaLoader <nl> @ @ - 400 , 7 + 410 , 7 @ @ public class SSTableReaderTest extends SchemaLoader <nl> } ) ) ; <nl> } <nl> <nl> - SSTableReader replacement = sstable . cloneWithNewSummarySamplingLevel ( 1 ) ; <nl> + SSTableReader replacement = sstable . cloneWithNewSummarySamplingLevel ( store , 1 ) ; <nl> store . getDataTracker ( ) . replaceReaders ( Arrays . asList ( sstable ) , Arrays . asList ( replacement ) ) ; <nl> for ( Future future : futures ) <nl> future . get ( ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b935425 . . 7f5a487 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 - rc1 <nl> + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) <nl> * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) <nl> * save truncation position in system table ( CASSANDRA - 4906 ) <nl> * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) <nl> diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py <nl> index d15c083 . . bab3506 100644 <nl> - - - a / pylib / cqlshlib / formatting . py <nl> + + + b / pylib / cqlshlib / formatting . py <nl> @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : <nl> return f <nl> return registrator <nl> <nl> - @ formatter _ for ( ' bytes ' ) <nl> - def format _ value _ bytes ( val , colormap , * * _ ) : <nl> + @ formatter _ for ( ' blob ' ) <nl> + def format _ value _ blob ( val , colormap , * * _ ) : <nl> bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) <nl> return colorme ( bval , colormap , ' hex ' ) <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4cfc957 . . 0f1ae93 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 41 , 6 + 41 , 7 @ @ 
 * Properly remove 1 . 2 sstable support in 2 . 1 ( CASSANDRA - 6869 ) 
 * Lock counter cells , not partitions ( CASSANDRA - 6880 ) 
 * Track presence of legacy counter shards in sstables ( CASSANDRA - 6888 ) 
 + * Ensure safe resource cleanup when replacing sstables ( CASSANDRA - 6912 ) 
 Merged from 2 . 0 : 
 * Allow compaction of system tables during startup ( CASSANDRA - 6913 ) 
 * Restrict Windows to parallel repairs ( CASSANDRA - 6907 ) 
 diff - - git a / src / java / org / apache / cassandra / db / DataTracker . java b / src / java / org / apache / cassandra / db / DataTracker . java 
 index c8fc699 . . 9c8f9a0 100644 
 - - - a / src / java / org / apache / cassandra / db / DataTracker . java 
 + + + b / src / java / org / apache / cassandra / db / DataTracker . java 
 @ @ - 192 , 14 + 192 , 17 @ @ public class DataTracker 
 public boolean markCompacting ( Iterable < SSTableReader > sstables ) 
 { 
 assert sstables ! = null & & ! Iterables . isEmpty ( sstables ) ; 
 + while ( true ) 
 + { 
 + View currentView = view . get ( ) ; 
 + Set < SSTableReader > inactive = Sets . difference ( ImmutableSet . copyOf ( sstables ) , currentView . compacting ) ; 
 + if ( inactive . size ( ) < Iterables . size ( sstables ) ) 
 + return false ; 
 
 - View currentView = view . get ( ) ; 
 - Set < SSTableReader > inactive = Sets . difference ( ImmutableSet . copyOf ( sstables ) , currentView . compacting ) ; 
 - if ( inactive . size ( ) < Iterables . size ( sstables ) ) 
 - return false ; 
 - 
 - View newView = currentView . markCompacting ( inactive ) ; 
 - return view . compareAndSet ( currentView , newView ) ; 
 + View newView = currentView . markCompacting ( inactive ) ; 
 + if ( view . compareAndSet ( currentView , newView ) ) 
 + return true ; 
 + } 
 } 
 
 / * * 
 @ @ - 333 , 14 + 336 , 6 @ @ public class DataTracker 
 * / 
 public void replaceReaders ( Collection < SSTableReader > oldSSTables , Collection < SSTableReader > newSSTables ) 
 { 
 - / / data component will be unchanged but the index summary will be a different size 
 - / / ( since we save that to make restart fast ) 
 - long sizeIncrease = 0 ; 
 - for ( SSTableReader sstable : oldSSTables ) 
 - sizeIncrease - = sstable . bytesOnDisk ( ) ; 
 - for ( SSTableReader sstable : newSSTables ) 
 - sizeIncrease + = sstable . bytesOnDisk ( ) ; 
 - 
 View currentView , newView ; 
 do 
 { 
 @ @ - 349 , 9 + 344 , 6 @ @ public class DataTracker 
 } 
 while ( ! view . compareAndSet ( currentView , newView ) ) ; 
 
 - StorageMetrics . load . inc ( sizeIncrease ) ; 
 - cfstore . metric . liveDiskSpaceUsed . inc ( sizeIncrease ) ; 
 - 
 for ( SSTableReader sstable : newSSTables ) 
 sstable . setTrackedBy ( this ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java 
 index f87f356 . . 0696fb7 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java 
 @ @ - 258 , 7 + 258 , 7 @ @ public class IndexSummary implements Closeable 
 } 
 
 @ Override 
 - public void close ( ) throws IOException 
 + public void close ( ) 
 { 
 bytes . free ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java b / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java 
 index b35f5f4 . . d5b7364 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java 
 @ @ - 19 , 17 + 19 , 24 @ @ package org . apache . cassandra . io . sstable ; 
 
 import java . io . IOException ; 
 import java . lang . management . ManagementFactory ; 
 - import java . util . * ; 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . Comparator ; 
 + import java . util . HashMap ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Set ; 
 import java . util . concurrent . ScheduledFuture ; 
 import java . util . concurrent . TimeUnit ; 
 - 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 
 import com . google . common . annotations . VisibleForTesting ; 
 - import com . google . common . collect . * ; 
 - 
 - import org . apache . cassandra . config . CFMetaData ; 
 + import com . google . common . collect . HashMultimap ; 
 + import com . google . common . collect . Iterables ; 
 + import com . google . common . collect . Lists ; 
 + import com . google . common . collect . Multimap ; 
 + import com . google . common . collect . Sets ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 409 , 8 + 416 , 9 @ @ public class IndexSummaryManager implements IndexSummaryManagerMBean 
 logger . debug ( " Re - sampling index summary for { } from { } / { } to { } / { } of the original number of entries " , 
 sstable , sstable . getIndexSummarySamplingLevel ( ) , Downsampling . BASE _ SAMPLING _ LEVEL , 
 entry . newSamplingLevel , Downsampling . BASE _ SAMPLING _ LEVEL ) ; 
 - SSTableReader replacement = sstable . cloneWithNewSummarySamplingLevel ( entry . newSamplingLevel ) ; 
 - DataTracker tracker = Keyspace . open ( sstable . getKeyspaceName ( ) ) . getColumnFamilyStore ( sstable . getColumnFamilyName ( ) ) . getDataTracker ( ) ; 
 + ColumnFamilyStore cfs = Keyspace . open ( sstable . getKeyspaceName ( ) ) . getColumnFamilyStore ( sstable . getColumnFamilyName ( ) ) ; 
 + SSTableReader replacement = sstable . cloneWithNewSummarySamplingLevel ( cfs , entry . newSamplingLevel ) ; 
 + DataTracker tracker = cfs . getDataTracker ( ) ; 
 
 replacedByTracker . put ( tracker , sstable ) ; 
 replacementsByTracker . put ( tracker , replacement ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index 82a0bc8 . . d29d5ac 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 17 , 16 + 17 , 34 @ @ 
 * / 
 package org . apache . cassandra . io . sstable ; 
 
 - import java . io . * ; 
 + import java . io . BufferedInputStream ; 
 + import java . io . Closeable ; 
 + import java . io . DataInputStream ; 
 + import java . io . File ; 
 + import java . io . FileInputStream ; 
 + import java . io . FileNotFoundException ; 
 + import java . io . FileOutputStream ; 
 + import java . io . IOException ; 
 + import java . io . RandomAccessFile ; 
 import java . nio . ByteBuffer ; 
 - import java . util . * ; 
 - import java . util . concurrent . * ; 
 + import java . util . ArrayList ; 
 + import java . util . Collection ; 
 + import java . util . Collections ; 
 + import java . util . Comparator ; 
 + import java . util . EnumSet ; 
 + import java . util . Iterator ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Set ; 
 + import java . util . concurrent . ExecutorService ; 
 + import java . util . concurrent . LinkedBlockingQueue ; 
 + import java . util . concurrent . ScheduledFuture ; 
 + import java . util . concurrent . ScheduledThreadPoolExecutor ; 
 + import java . util . concurrent . TimeUnit ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 import java . util . concurrent . atomic . AtomicLong ; 
 
 - import com . clearspring . analytics . stream . cardinality . CardinalityMergeException ; 
 - import com . clearspring . analytics . stream . cardinality . ICardinality ; 
 import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . base . Predicate ; 
 import com . google . common . collect . Iterators ; 
 @ @ - 36 , 28 + 54 , 62 @ @ import com . google . common . util . concurrent . RateLimiter ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import com . clearspring . analytics . stream . cardinality . CardinalityMergeException ; 
 + import com . clearspring . analytics . stream . cardinality . ICardinality ; 
 import org . apache . cassandra . cache . CachingOptions ; 
 import org . apache . cassandra . cache . InstrumentingCache ; 
 import org . apache . cassandra . cache . KeyCacheKey ; 
 import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; 
 - import org . apache . cassandra . config . * ; 
 - import org . apache . cassandra . db . * ; 
 + import org . apache . cassandra . config . CFMetaData ; 
 + import org . apache . cassandra . config . ColumnDefinition ; 
 + import org . apache . cassandra . config . Config ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . config . Schema ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . DataRange ; 
 + import org . apache . cassandra . db . DataTracker ; 
 + import org . apache . cassandra . db . DecoratedKey ; 
 + import org . apache . cassandra . db . Keyspace ; 
 + import org . apache . cassandra . db . RowIndexEntry ; 
 + import org . apache . cassandra . db . RowPosition ; 
 + import org . apache . cassandra . db . SystemKeyspace ; 
 import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; 
 import org . apache . cassandra . db . commitlog . ReplayPosition ; 
 import org . apache . cassandra . db . compaction . ICompactionScanner ; 
 import org . apache . cassandra . db . index . SecondaryIndex ; 
 - import org . apache . cassandra . dht . * ; 
 + import org . apache . cassandra . dht . AbstractBounds ; 
 + import org . apache . cassandra . dht . IPartitioner ; 
 + import org . apache . cassandra . dht . LocalPartitioner ; 
 + import org . apache . cassandra . dht . Range ; 
 + import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; 
 import org . apache . cassandra . io . compress . CompressedThrottledReader ; 
 import org . apache . cassandra . io . compress . CompressionMetadata ; 
 - import org . apache . cassandra . io . sstable . metadata . * ; 
 - import org . apache . cassandra . io . util . * ; 
 + import org . apache . cassandra . io . sstable . metadata . CompactionMetadata ; 
 + import org . apache . cassandra . io . sstable . metadata . MetadataComponent ; 
 + import org . apache . cassandra . io . sstable . metadata . MetadataType ; 
 + import org . apache . cassandra . io . sstable . metadata . StatsMetadata ; 
 + import org . apache . cassandra . io . sstable . metadata . ValidationMetadata ; 
 + import org . apache . cassandra . io . util . DataOutputStreamAndChannel ; 
 + import org . apache . cassandra . io . util . FileDataInput ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 + import org . apache . cassandra . io . util . ICompressedFile ; 
 + import org . apache . cassandra . io . util . RandomAccessReader ; 
 + import org . apache . cassandra . io . util . SegmentedFile ; 
 + import org . apache . cassandra . io . util . ThrottledReader ; 
 import org . apache . cassandra . metrics . RestorableMeter ; 
 + import org . apache . cassandra . metrics . StorageMetrics ; 
 import org . apache . cassandra . service . ActiveRepairService ; 
 import org . apache . cassandra . service . CacheService ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . tracing . Tracing ; 
 - import org . apache . cassandra . utils . * ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . CLibrary ; 
 + import org . apache . cassandra . utils . EstimatedHistogram ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + import org . apache . cassandra . utils . FilterFactory ; 
 + import org . apache . cassandra . utils . IFilter ; 
 + import org . apache . cassandra . utils . Pair ; 
 
 import static org . apache . cassandra . db . Directories . SECONDARY _ INDEX _ NAME _ SEPARATOR ; 
 
 @ @ - 122 , 15 + 174 , 24 @ @ public class SSTableReader extends SSTable implements Closeable 
 / / but it seems like a good extra layer of protection against reference counting bugs to not delete data based on that alone 
 private final AtomicBoolean isCompacted = new AtomicBoolean ( false ) ; 
 private final AtomicBoolean isSuspect = new AtomicBoolean ( false ) ; 
 - private final AtomicBoolean isReplaced = new AtomicBoolean ( false ) ; 
 
 - private final SSTableDeletingTask deletingTask ; 
 / / not final since we need to be able to change level on a file . 
 private volatile StatsMetadata sstableMetadata ; 
 
 private final AtomicLong keyCacheHit = new AtomicLong ( 0 ) ; 
 private final AtomicLong keyCacheRequest = new AtomicLong ( 0 ) ; 
 
 + / * * 
 + * To support replacing this sstablereader with another object that represents that same underlying sstable , but with different associated resources , 
 + * we build a linked - list chain of replacement , which we synchronise using a shared object to make maintenance of the list across multiple threads simple . 
 + * On close we check if any of the closeable resources differ between any chains either side of us ; any that are in neither of the adjacent links ( if any ) are closed . 
 + * Once we ' ve made this decision we remove ourselves from the linked list , so that anybody behind / ahead will compare against only other still opened resources . 
 + * / 
 + private Object replaceLock = new Object ( ) ; 
 + private SSTableReader replacedBy ; 
 + private SSTableReader replaces ; 
 + private SSTableDeletingTask deletingTask ; 
 + 
 @ VisibleForTesting 
 public RestorableMeter readMeter ; 
 private ScheduledFuture readMeterSyncFuture ; 
 @ @ - 275 , 10 + 336 , 10 @ @ public class SSTableReader extends SSTable implements Closeable 
 statsMetadata ) ; 
 
 / / special implementation of load to use non - pooled SegmentedFile builders 
 - SegmentedFile . Builder ibuilder = new BufferedSegmentedFile . Builder ( ) ; 
 + SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; 
 SegmentedFile . Builder dbuilder = sstable . compression 
 - ? new CompressedSegmentedFile . Builder ( ) 
 - : new BufferedSegmentedFile . Builder ( ) ; 
 + ? SegmentedFile . getCompressedBuilder ( ) 
 + : SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ; 
 if ( ! sstable . loadSummary ( ibuilder , dbuilder ) ) 
 sstable . buildSummary ( false , ibuilder , dbuilder , false , Downsampling . BASE _ SAMPLING _ LEVEL ) ; 
 sstable . ifile = ibuilder . complete ( sstable . descriptor . filenameFor ( Component . PRIMARY _ INDEX ) ) ; 
 @ @ - 480 , 27 + 541 , 95 @ @ public class SSTableReader extends SSTable implements Closeable 
 return sum ; 
 } 
 
 - / * * 
 - * Clean up all opened resources . 
 - * 
 - * @ throws IOException 
 - * / 
 - public void close ( ) throws IOException 
 + private void tidy ( boolean release ) 
 { 
 if ( readMeterSyncFuture ! = null ) 
 readMeterSyncFuture . cancel ( false ) ; 
 
 - / / if this SSTR was replaced by a new SSTR with a different index summary , the two instances will share 
 - / / resources , so don ' t force unmapping , clear the FileCacheService entry , or close the BF 
 - if ( ! isReplaced . get ( ) ) 
 + assert references . get ( ) = = 0 ; 
 + 
 + synchronized ( replaceLock ) 
 { 
 - / / Force finalizing mmapping if necessary 
 - ifile . cleanup ( ) ; 
 - dfile . cleanup ( ) ; 
 - / / close the BF so it can be opened later . 
 - bf . close ( ) ; 
 + boolean closeBf = true , closeSummary = true , closeFiles = true ; 
 + 
 + if ( replacedBy ! = null ) 
 + { 
 + closeBf = replacedBy . bf ! = bf ; 
 + closeSummary = replacedBy . indexSummary ! = indexSummary ; 
 + closeFiles = replacedBy . dfile ! = dfile ; 
 + } 
 + 
 + if ( replaces ! = null ) 
 + { 
 + closeBf & = replaces . bf ! = bf ; 
 + closeSummary & = replaces . indexSummary ! = indexSummary ; 
 + closeFiles & = replaces . dfile ! = dfile ; 
 + } 
 + 
 + boolean deleteAll = false ; 
 + if ( release & & isCompacted . get ( ) ) 
 + { 
 + assert replacedBy = = null ; 
 + if ( replaces ! = null ) 
 + { 
 + replaces . replacedBy = null ; 
 + replaces . deletingTask = deletingTask ; 
 + replaces . markObsolete ( ) ; 
 + } 
 + else 
 + { 
 + deleteAll = true ; 
 + } 
 + } 
 + else 
 + { 
 + if ( replaces ! = null ) 
 + replaces . replacedBy = replacedBy ; 
 + if ( replacedBy ! = null ) 
 + replacedBy . replaces = replaces ; 
 + } 
 + 
 + assert references . get ( ) = = 0 ; 
 + if ( closeBf ) 
 + bf . close ( ) ; 
 + if ( closeSummary ) 
 + indexSummary . close ( ) ; 
 + if ( closeFiles ) 
 + { 
 + ifile . cleanup ( ) ; 
 + dfile . cleanup ( ) ; 
 + } 
 + if ( deleteAll ) 
 + { 
 + / * * 
 + * Do the OS a favour and suggest ( using fadvice call ) that we 
 + * don ' t want to see pages of this SSTable in memory anymore . 
 + * 
 + * NOTE : We can ' t use madvice in java because it requires the address of 
 + * the mapping , so instead we always open a file and run fadvice ( fd , 0 , 0 ) on it 
 + * / 
 + dropPageCache ( ) ; 
 + deletingTask . schedule ( ) ; 
 + } 
 } 
 - indexSummary . close ( ) ; 
 + } 
 + 
 + / * * 
 + * Schedule clean - up of resources 
 + * / 
 + public void close ( ) 
 + { 
 + tidy ( false ) ; 
 + } 
 + 
 + public String getFilename ( ) 
 + { 
 + return dfile . path ; 
 + } 
 + 
 + public String getIndexFilename ( ) 
 + { 
 + return ifile . path ; 
 } 
 
 public void setTrackedBy ( DataTracker tracker ) 
 @ @ - 726 , 6 + 855 , 17 @ @ public class SSTableReader extends SSTable implements Closeable 
 } 
 } 
 
 + public void setReplacedBy ( SSTableReader replacement ) 
 + { 
 + synchronized ( replaceLock ) 
 + { 
 + assert replacedBy = = null ; 
 + replacedBy = replacement ; 
 + replacement . replaces = this ; 
 + replacement . replaceLock = replaceLock ; 
 + } 
 + } 
 + 
 / * * 
 * Returns a new SSTableReader with the same properties as this SSTableReader except that a new IndexSummary will 
 * be built at the target samplingLevel . This ( original ) SSTableReader instance will be marked as replaced , have 
 @ @ - 734 , 49 + 874 , 59 @ @ public class SSTableReader extends SSTable implements Closeable 
 * @ return a new SSTableReader 
 * @ throws IOException 
 * / 
 - public SSTableReader cloneWithNewSummarySamplingLevel ( int samplingLevel ) throws IOException 
 + public SSTableReader cloneWithNewSummarySamplingLevel ( ColumnFamilyStore parent , int samplingLevel ) throws IOException 
 { 
 - int minIndexInterval = metadata . getMinIndexInterval ( ) ; 
 - int maxIndexInterval = metadata . getMaxIndexInterval ( ) ; 
 - double effectiveInterval = indexSummary . getEffectiveIndexInterval ( ) ; 
 + synchronized ( replaceLock ) 
 + { 
 + assert replacedBy = = null ; 
 
 - IndexSummary newSummary ; 
 + int minIndexInterval = metadata . getMinIndexInterval ( ) ; 
 + int maxIndexInterval = metadata . getMaxIndexInterval ( ) ; 
 + double effectiveInterval = indexSummary . getEffectiveIndexInterval ( ) ; 
 
 - / / We have to rebuild the summary from the on - disk primary index in three cases : 
 - / / 1 . The sampling level went up , so we need to read more entries off disk 
 - / / 2 . The min _ index _ interval changed ( in either direction ) ; this changes what entries would be in the summary 
 - / / at full sampling ( and consequently at any other sampling level ) 
 - / / 3 . The max _ index _ interval was lowered , forcing us to raise the sampling level 
 - if ( samplingLevel > indexSummary . getSamplingLevel ( ) | | indexSummary . getMinIndexInterval ( ) ! = minIndexInterval | | effectiveInterval > maxIndexInterval ) 
 - { 
 - newSummary = buildSummaryAtLevel ( samplingLevel ) ; 
 - } 
 - else if ( samplingLevel < indexSummary . getSamplingLevel ( ) ) 
 - { 
 - / / we can use the existing index summary to make a smaller one 
 - newSummary = IndexSummaryBuilder . downsample ( indexSummary , samplingLevel , minIndexInterval , partitioner ) ; 
 + IndexSummary newSummary ; 
 + long oldSize = bytesOnDisk ( ) ; 
 
 - SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; 
 - SegmentedFile . Builder dbuilder = compression 
 - ? SegmentedFile . getCompressedBuilder ( ) 
 - : SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ; 
 - saveSummary ( ibuilder , dbuilder , newSummary ) ; 
 - } 
 - else 
 - { 
 - throw new AssertionError ( " Attempted to clone SSTableReader with the same index summary sampling level and " + 
 - " no adjustments to min / max _ index _ interval " ) ; 
 - } 
 + / / We have to rebuild the summary from the on - disk primary index in three cases : 
 + / / 1 . The sampling level went up , so we need to read more entries off disk 
 + / / 2 . The min _ index _ interval changed ( in either direction ) ; this changes what entries would be in the summary 
 + / / at full sampling ( and consequently at any other sampling level ) 
 + / / 3 . The max _ index _ interval was lowered , forcing us to raise the sampling level 
 + if ( samplingLevel > indexSummary . getSamplingLevel ( ) | | indexSummary . getMinIndexInterval ( ) ! = minIndexInterval | | effectiveInterval > maxIndexInterval ) 
 + { 
 + newSummary = buildSummaryAtLevel ( samplingLevel ) ; 
 + } 
 + else if ( samplingLevel < indexSummary . getSamplingLevel ( ) ) 
 + { 
 + / / we can use the existing index summary to make a smaller one 
 + newSummary = IndexSummaryBuilder . downsample ( indexSummary , samplingLevel , minIndexInterval , partitioner ) ; 
 + 
 + SegmentedFile . Builder ibuilder = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) ) ; 
 + SegmentedFile . Builder dbuilder = compression 
 + ? SegmentedFile . getCompressedBuilder ( ) 
 + : SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) ) ; 
 + saveSummary ( ibuilder , dbuilder , newSummary ) ; 
 + } 
 + else 
 + { 
 + throw new AssertionError ( " Attempted to clone SSTableReader with the same index summary sampling level and " + 
 + " no adjustments to min / max _ index _ interval " ) ; 
 + } 
 
 - markReplaced ( ) ; 
 - if ( readMeterSyncFuture ! = null ) 
 - readMeterSyncFuture . cancel ( false ) ; 
 + long newSize = bytesOnDisk ( ) ; 
 + StorageMetrics . load . inc ( newSize - oldSize ) ; 
 + parent . metric . liveDiskSpaceUsed . inc ( newSize - oldSize ) ; 
 
 - SSTableReader replacement = new SSTableReader ( descriptor , components , metadata , partitioner , ifile , dfile , newSummary , bf , maxDataAge , sstableMetadata ) ; 
 - replacement . readMeter = this . readMeter ; 
 - replacement . first = this . first ; 
 - replacement . last = this . last ; 
 - return replacement ; 
 + if ( readMeterSyncFuture ! = null ) 
 + readMeterSyncFuture . cancel ( false ) ; 
 + 
 + SSTableReader replacement = new SSTableReader ( descriptor , components , metadata , partitioner , ifile , dfile , newSummary , bf , maxDataAge , sstableMetadata ) ; 
 + replacement . readMeter = this . readMeter ; 
 + replacement . first = this . first ; 
 + replacement . last = this . last ; 
 + setReplacedBy ( replacement ) ; 
 + return replacement ; 
 + } 
 } 
 
 private IndexSummary buildSummaryAtLevel ( int newSamplingLevel ) throws IOException 
 @ @ - 1342 , 12 + 1492 , 6 @ @ public class SSTableReader extends SSTable implements Closeable 
 return dfile . onDiskLength ; 
 } 
 
 - public void markReplaced ( ) 
 - { 
 - boolean success = isReplaced . compareAndSet ( false , true ) ; 
 - assert success : " Attempted to mark an SSTableReader as replaced more than once " ; 
 - } 
 - 
 public boolean acquireReference ( ) 
 { 
 while ( true ) 
 @ @ - 1368 , 27 + 1512 , 7 @ @ public class SSTableReader extends SSTable implements Closeable 
 public void releaseReference ( ) 
 { 
 if ( references . decrementAndGet ( ) = = 0 ) 
 - { 
 - FileUtils . closeQuietly ( this ) ; 
 - 
 - / / if this SSTR instance was replaced by another with a different index summary , let the new instance 
 - / / handle clearing the page cache and deleting the files 
 - if ( isCompacted . get ( ) ) 
 - { 
 - assert ! isReplaced . get ( ) ; 
 - 
 - / * * 
 - * Do the OS a favour and suggest ( using fadvice call ) that we 
 - * don ' t want to see pages of this SSTable in memory anymore . 
 - * 
 - * NOTE : We can ' t use madvice in java because it requires the address of 
 - * the mapping , so instead we always open a file and run fadvice ( fd , 0 , 0 ) on it 
 - * / 
 - dropPageCache ( ) ; 
 - 
 - deletingTask . schedule ( ) ; 
 - } 
 - } 
 + tidy ( true ) ; 
 assert references . get ( ) > = 0 : " Reference counter " + references . get ( ) + " for " + dfile . path ; 
 } 
 
 @ @ - 1406 , 6 + 1530 , 10 @ @ public class SSTableReader extends SSTable implements Closeable 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " Marking { } compacted " , getFilename ( ) ) ; 
 
 + synchronized ( replaceLock ) 
 + { 
 + assert replacedBy = = null ; 
 + } 
 return ! isCompacted . getAndSet ( true ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java b / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java 
 index 0f5136b . . 83d8f3a 100644 
 - - - a / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java 
 + + + b / src / java / org / apache / cassandra / utils / AlwaysPresentFilter . java 
 @ @ - 17 , 7 + 17 , 6 @ @ 
 * / 
 package org . apache . cassandra . utils ; 
 
 - import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 
 public class AlwaysPresentFilter implements IFilter 
 @ @ - 31 , 7 + 30 , 7 @ @ public class AlwaysPresentFilter implements IFilter 
 
 public void clear ( ) { } 
 
 - public void close ( ) throws IOException { } 
 + public void close ( ) { } 
 
 public long serializedSize ( ) { return 0 ; } 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / BloomFilter . java b / src / java / org / apache / cassandra / utils / BloomFilter . java 
 index 9fbb38e . . ceba89b 100644 
 - - - a / src / java / org / apache / cassandra / utils / BloomFilter . java 
 + + + b / src / java / org / apache / cassandra / utils / BloomFilter . java 
 @ @ - 17 , 7 + 17 , 6 @ @ 
 * / 
 package org . apache . cassandra . utils ; 
 
 - import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 
 import com . google . common . annotations . VisibleForTesting ; 
 @ @ - 112 , 7 + 111 , 7 @ @ public abstract class BloomFilter implements IFilter 
 bitset . clear ( ) ; 
 } 
 
 - public void close ( ) throws IOException 
 + public void close ( ) 
 { 
 bitset . close ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / IFilter . java b / src / java / org / apache / cassandra / utils / IFilter . java 
 index 10f6df2 . . 91c0e36 100644 
 - - - a / src / java / org / apache / cassandra / utils / IFilter . java 
 + + + b / src / java / org / apache / cassandra / utils / IFilter . java 
 @ @ - 29 , 4 + 29 , 6 @ @ public interface IFilter extends Closeable 
 void clear ( ) ; 
 
 long serializedSize ( ) ; 
 + 
 + void close ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / obs / IBitSet . java b / src / java / org / apache / cassandra / utils / obs / IBitSet . java 
 index c6fbddd . . 96aac6b 100644 
 - - - a / src / java / org / apache / cassandra / utils / obs / IBitSet . java 
 + + + b / src / java / org / apache / cassandra / utils / obs / IBitSet . java 
 @ @ - 49 , 4 + 49 , 6 @ @ public interface IBitSet extends Closeable 
 public long serializedSize ( TypeSizes type ) ; 
 
 public void clear ( ) ; 
 + 
 + public void close ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java b / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java 
 index 29dd848 . . de8da01 100644 
 - - - a / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java 
 + + + b / src / java / org / apache / cassandra / utils / obs / OffHeapBitSet . java 
 @ @ - 139 , 7 + 139 , 7 @ @ public class OffHeapBitSet implements IBitSet 
 return new OffHeapBitSet ( memory ) ; 
 } 
 
 - public void close ( ) throws IOException 
 + public void close ( ) 
 { 
 bytes . free ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java b / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java 
 index 5657d41 . . 1d2f690 100644 
 - - - a / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java 
 + + + b / src / java / org / apache / cassandra / utils / obs / OpenBitSet . java 
 @ @ - 387 , 7 + 387 , 7 @ @ public class OpenBitSet implements IBitSet 
 return ( int ) ( ( h > > 32 ) ^ h ) + 0x98761234 ; 
 } 
 
 - public void close ( ) throws IOException { 
 + public void close ( ) { 
 / / noop , let GC do the cleanup . 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / IndexSummaryManagerTest . java b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryManagerTest . java 
 index 35fd9bd . . 9b2b492 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / IndexSummaryManagerTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryManagerTest . java 
 @ @ - 421 , 7 + 421 , 7 @ @ public class IndexSummaryManagerTest extends SchemaLoader 
 SSTableReader sstable = original ; 
 for ( int samplingLevel = 1 ; samplingLevel < BASE _ SAMPLING _ LEVEL ; samplingLevel + + ) 
 { 
 - sstable = sstable . cloneWithNewSummarySamplingLevel ( samplingLevel ) ; 
 + sstable = sstable . cloneWithNewSummarySamplingLevel ( cfs , samplingLevel ) ; 
 assertEquals ( samplingLevel , sstable . getIndexSummarySamplingLevel ( ) ) ; 
 int expectedSize = ( numRows * samplingLevel ) / ( sstable . metadata . getMinIndexInterval ( ) * BASE _ SAMPLING _ LEVEL ) ; 
 assertEquals ( expectedSize , sstable . getIndexSummarySize ( ) , 1 ) ; 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java 
 index bd50538 . . 8429d37 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java 
 @ @ - 23 , 17 + 23 , 20 @ @ package org . apache . cassandra . io . sstable ; 
 
 import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 - import java . util . * ; 
 + import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 + import java . util . Collection ; 
 + import java . util . List ; 
 + import java . util . Set ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . Future ; 
 import java . util . concurrent . ScheduledThreadPoolExecutor ; 
 import java . util . concurrent . ThreadPoolExecutor ; 
 
 - import org . junit . Assert ; 
 import com . google . common . collect . Sets ; 
 + import org . junit . Assert ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 - 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 41 , 27 + 44 , 34 @ @ import org . apache . cassandra . OrderedJUnit4ClassRunner ; 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . Util ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . db . * ; 
 + import org . apache . cassandra . db . ColumnFamily ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . DecoratedKey ; 
 + import org . apache . cassandra . db . IndexExpression ; 
 + import org . apache . cassandra . db . Keyspace ; 
 + import org . apache . cassandra . db . Mutation ; 
 + import org . apache . cassandra . db . Row ; 
 + import org . apache . cassandra . db . RowPosition ; 
 import org . apache . cassandra . db . columniterator . IdentityQueryFilter ; 
 - import org . apache . cassandra . db . composites . Composites ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . compaction . ICompactionScanner ; 
 + import org . apache . cassandra . db . composites . Composites ; 
 import org . apache . cassandra . dht . LocalPartitioner ; 
 import org . apache . cassandra . dht . LocalToken ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 - import org . apache . cassandra . service . CacheService ; 
 import org . apache . cassandra . io . util . FileDataInput ; 
 import org . apache . cassandra . io . util . MmappedSegmentedFile ; 
 import org . apache . cassandra . io . util . SegmentedFile ; 
 + import org . apache . cassandra . service . CacheService ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . Pair ; 
 
 + import static org . apache . cassandra . Util . cellname ; 
 import static org . junit . Assert . assertEquals ; 
 - import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . assertFalse ; 
 - import static org . apache . cassandra . Util . cellname ; 
 + import static org . junit . Assert . assertTrue ; 
 
 @ RunWith ( OrderedJUnit4ClassRunner . class ) 
 public class SSTableReaderTest extends SchemaLoader 
 @ @ - 400 , 7 + 410 , 7 @ @ public class SSTableReaderTest extends SchemaLoader 
 } ) ) ; 
 } 
 
 - SSTableReader replacement = sstable . cloneWithNewSummarySamplingLevel ( 1 ) ; 
 + SSTableReader replacement = sstable . cloneWithNewSummarySamplingLevel ( store , 1 ) ; 
 store . getDataTracker ( ) . replaceReaders ( Arrays . asList ( sstable ) , Arrays . asList ( replacement ) ) ; 
 for ( Future future : futures ) 
 future . get ( ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b935425 . . 7f5a487 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 - rc1 
 + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) 
 * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) 
 * save truncation position in system table ( CASSANDRA - 4906 ) 
 * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) 
 diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py 
 index d15c083 . . bab3506 100644 
 - - - a / pylib / cqlshlib / formatting . py 
 + + + b / pylib / cqlshlib / formatting . py 
 @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : 
 return f 
 return registrator 
 
 - @ formatter _ for ( ' bytes ' ) 
 - def format _ value _ bytes ( val , colormap , * * _ ) : 
 + @ formatter _ for ( ' blob ' ) 
 + def format _ value _ blob ( val , colormap , * * _ ) : 
 bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) 
 return colorme ( bval , colormap , ' hex ' ) 

