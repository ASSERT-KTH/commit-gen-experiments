BLEU SCORE: 0.014199193612838947

TEST MSG: Fix file system race condition that may cause LogAwareFileLister to fail to classify files
GENERATED MSG: Sort commitlog segments for replay by id instead of mtime

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index cf14f67 . . 7a1fbc5 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 9 <nl> + * Fix file system race condition that may cause LogAwareFileLister to fail to classify files ( CASSANDRA - 11889 ) <nl> * Fix file handle leaks due to simultaneous compaction / repair and <nl> listing snapshots , calculating snapshot sizes , or making schema <nl> changes ( CASSANDRA - 11594 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogFile . java b / src / java / org / apache / cassandra / db / lifecycle / LogFile . java <nl> index 8560410 . . da5bb39 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / LogFile . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / LogFile . java <nl> @ @ - 216 , 7 + 216 , 7 @ @ final class LogFile implements AutoCloseable <nl> / / it matches . Because we delete files from oldest to newest , the latest update time should <nl> / / always match . <nl> record . status . onDiskRecord = record . withExistingFiles ( ) ; <nl> - if ( record . updateTime ! = record . status . onDiskRecord . updateTime & & record . status . onDiskRecord . numFiles > 0 ) <nl> + if ( record . updateTime ! = record . status . onDiskRecord . updateTime & & record . status . onDiskRecord . updateTime > 0 ) <nl> { <nl> record . setError ( String . format ( " Unexpected files detected for sstable [ % s ] , " + <nl> " record [ % s ] : last update time [ % tT ] should have been [ % tT ] " , <nl> diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogRecord . java b / src / java / org / apache / cassandra / db / lifecycle / LogRecord . java <nl> index d7eb774 . . c981b02 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / LogRecord . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / LogRecord . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . nio . file . Paths ; <nl> import java . util . * ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> + import java . util . stream . Collectors ; <nl> import java . util . zip . CRC32 ; <nl> <nl> import org . apache . cassandra . io . sstable . SSTable ; <nl> @ @ - 156 , 8 + 157 , 12 @ @ final class LogRecord <nl> <nl> public static LogRecord make ( Type type , List < File > files , int minFiles , String absolutePath ) <nl> { <nl> - long lastModified = files . stream ( ) . map ( File : : lastModified ) . reduce ( 0L , Long : : max ) ; <nl> - return new LogRecord ( type , absolutePath , lastModified , Math . max ( minFiles , files . size ( ) ) ) ; <nl> + / / CASSANDRA - 11889 : File . lastModified ( ) returns a positive value only if the file exists , therefore <nl> + / / we filter by positive values to only consider the files that still exists right now , in case things <nl> + / / changed on disk since getExistingFiles ( ) was called <nl> + List < Long > positiveModifiedTimes = files . stream ( ) . map ( File : : lastModified ) . filter ( lm - > lm > 0 ) . collect ( Collectors . toList ( ) ) ; <nl> + long lastModified = positiveModifiedTimes . stream ( ) . reduce ( 0L , Long : : max ) ; <nl> + return new LogRecord ( type , absolutePath , lastModified , Math . max ( minFiles , positiveModifiedTimes . size ( ) ) ) ; <nl> } <nl> <nl> private LogRecord ( Type type , long updateTime )
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 749029e . . 04a5307 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 363 , 7 + 363 , 7 @ @ <nl> < exclusion groupId = " commons - lang " artifactId = " commons - lang " / > <nl> < / dependency > <nl> < dependency groupId = " org . apache . hadoop " artifactId = " hadoop - core " version = " 1 . 0 . 2 " / > <nl> - < dependency groupId = " org . apache . pig " artifactId = " pig " version = " 0 . 9 . 2 " / > <nl> + < dependency groupId = " org . apache . pig " artifactId = " pig " version = " 0 . 10 . 0 " / > <nl> < dependency groupId = " net . sf . jopt - simple " artifactId = " jopt - simple " version = " 3 . 2 " / > <nl> < dependency groupId = " net . java . dev . jna " artifactId = " jna " version = " 3 . 2 . 7 " / > <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index cf14f67 . . 7a1fbc5 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 9 
 + * Fix file system race condition that may cause LogAwareFileLister to fail to classify files ( CASSANDRA - 11889 ) 
 * Fix file handle leaks due to simultaneous compaction / repair and 
 listing snapshots , calculating snapshot sizes , or making schema 
 changes ( CASSANDRA - 11594 ) 
 diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogFile . java b / src / java / org / apache / cassandra / db / lifecycle / LogFile . java 
 index 8560410 . . da5bb39 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / LogFile . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / LogFile . java 
 @ @ - 216 , 7 + 216 , 7 @ @ final class LogFile implements AutoCloseable 
 / / it matches . Because we delete files from oldest to newest , the latest update time should 
 / / always match . 
 record . status . onDiskRecord = record . withExistingFiles ( ) ; 
 - if ( record . updateTime ! = record . status . onDiskRecord . updateTime & & record . status . onDiskRecord . numFiles > 0 ) 
 + if ( record . updateTime ! = record . status . onDiskRecord . updateTime & & record . status . onDiskRecord . updateTime > 0 ) 
 { 
 record . setError ( String . format ( " Unexpected files detected for sstable [ % s ] , " + 
 " record [ % s ] : last update time [ % tT ] should have been [ % tT ] " , 
 diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogRecord . java b / src / java / org / apache / cassandra / db / lifecycle / LogRecord . java 
 index d7eb774 . . c981b02 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / LogRecord . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / LogRecord . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . nio . file . Paths ; 
 import java . util . * ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 + import java . util . stream . Collectors ; 
 import java . util . zip . CRC32 ; 
 
 import org . apache . cassandra . io . sstable . SSTable ; 
 @ @ - 156 , 8 + 157 , 12 @ @ final class LogRecord 
 
 public static LogRecord make ( Type type , List < File > files , int minFiles , String absolutePath ) 
 { 
 - long lastModified = files . stream ( ) . map ( File : : lastModified ) . reduce ( 0L , Long : : max ) ; 
 - return new LogRecord ( type , absolutePath , lastModified , Math . max ( minFiles , files . size ( ) ) ) ; 
 + / / CASSANDRA - 11889 : File . lastModified ( ) returns a positive value only if the file exists , therefore 
 + / / we filter by positive values to only consider the files that still exists right now , in case things 
 + / / changed on disk since getExistingFiles ( ) was called 
 + List < Long > positiveModifiedTimes = files . stream ( ) . map ( File : : lastModified ) . filter ( lm - > lm > 0 ) . collect ( Collectors . toList ( ) ) ; 
 + long lastModified = positiveModifiedTimes . stream ( ) . reduce ( 0L , Long : : max ) ; 
 + return new LogRecord ( type , absolutePath , lastModified , Math . max ( minFiles , positiveModifiedTimes . size ( ) ) ) ; 
 } 
 
 private LogRecord ( Type type , long updateTime )

NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index 749029e . . 04a5307 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 363 , 7 + 363 , 7 @ @ 
 < exclusion groupId = " commons - lang " artifactId = " commons - lang " / > 
 < / dependency > 
 < dependency groupId = " org . apache . hadoop " artifactId = " hadoop - core " version = " 1 . 0 . 2 " / > 
 - < dependency groupId = " org . apache . pig " artifactId = " pig " version = " 0 . 9 . 2 " / > 
 + < dependency groupId = " org . apache . pig " artifactId = " pig " version = " 0 . 10 . 0 " / > 
 < dependency groupId = " net . sf . jopt - simple " artifactId = " jopt - simple " version = " 3 . 2 " / > 
 < dependency groupId = " net . java . dev . jna " artifactId = " jna " version = " 3 . 2 . 7 " / > 

