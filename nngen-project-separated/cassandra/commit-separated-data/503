BLEU SCORE: 0.035641869294051415

TEST MSG: Fix duration type validation
GENERATED MSG: Fix IOOBE when inserting bad tuple w / string literal

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 55762e2 . . aec644f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 10 <nl> + * Fix duration type validation ( CASSANDRA - 13143 ) <nl> * Fix flaky GcCompactionTest ( CASSANDRA - 12664 ) <nl> * Fix TestHintedHandoff . hintedhandoff _ decom _ test ( CASSANDRA - 13058 ) <nl> * Fixed query monitoring for range queries ( CASSANDRA - 13050 ) <nl> diff - - git a / src / java / org / apache / cassandra / serializers / DurationSerializer . java b / src / java / org / apache / cassandra / serializers / DurationSerializer . java <nl> index d139b9e . . 03d08ae 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / DurationSerializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / DurationSerializer . java <nl> @ @ - 80 , 6 + 80 , 22 @ @ public final class DurationSerializer implements TypeSerializer < Duration > <nl> { <nl> if ( bytes . remaining ( ) < 3 ) <nl> throw new MarshalException ( String . format ( " Expected at least 3 bytes for a duration ( % d ) " , bytes . remaining ( ) ) ) ; <nl> + <nl> + try ( DataInputBuffer in = new DataInputBuffer ( bytes , true ) ) <nl> + { <nl> + int months = ( int ) in . readVInt ( ) ; <nl> + int days = ( int ) in . readVInt ( ) ; <nl> + long nanoseconds = in . readVInt ( ) ; <nl> + <nl> + if ( ! ( ( months > = 0 & & days > = 0 & & nanoseconds > = 0 ) | | ( months < = 0 & & days < = 0 & & nanoseconds < = 0 ) ) ) <nl> + throw new MarshalException ( String . format ( " The duration months , days and nanoseconds must be all of the same sign ( % d , % d , % d ) " , <nl> + months , days , nanoseconds ) ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + / / this should never happen with a DataInputBuffer <nl> + throw new AssertionError ( " Unexpected error " , e ) ; <nl> + } <nl> } <nl> <nl> public String toString ( Duration duration ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / CreateTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / CreateTest . java <nl> index 6912f85 . . e60bf36 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / CreateTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / CreateTest . java <nl> @ @ - 17 , 6 + 17 , 8 @ @ <nl> * / <nl> package org . apache . cassandra . cql3 . validation . operations ; <nl> <nl> + import java . io . IOException ; <nl> + import java . nio . ByteBuffer ; <nl> import java . util . Collection ; <nl> import java . util . Collections ; <nl> import java . util . UUID ; <nl> @ @ - 32 , 6 + 34 , 7 @ @ import org . apache . cassandra . db . Mutation ; <nl> import org . apache . cassandra . db . partitions . Partition ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . exceptions . SyntaxException ; <nl> + import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> import org . apache . cassandra . schema . SchemaKeyspace ; <nl> import org . apache . cassandra . triggers . ITrigger ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> @ @ - 121 , 6 + 124 , 8 @ @ public class CreateTest extends CQLTester <nl> execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 18 , P1Y3MT2H10M ) " ) ; <nl> execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 19 , P0000 - 00 - 00T30 : 20 : 00 ) " ) ; <nl> execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 20 , P0001 - 03 - 00T02 : 10 : 00 ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 21 , duration ( 12 , 10 , 0 ) ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 22 , duration ( - 12 , - 10 , 0 ) ) ; <nl> <nl> assertRows ( execute ( " SELECT * FROM % s " ) , <nl> row ( 1 , 1 , Duration . newInstance ( 14 , 0 , 0 ) ) , <nl> @ @ - 142 , 7 + 147 , 9 @ @ public class CreateTest extends CQLTester <nl> row ( 1 , 17 , Duration . newInstance ( 0 , 14 , 0 ) ) , <nl> row ( 1 , 18 , Duration . newInstance ( 15 , 0 , 130 * NANOS _ PER _ MINUTE ) ) , <nl> row ( 1 , 19 , Duration . newInstance ( 0 , 0 , 30 * NANOS _ PER _ HOUR + 20 * NANOS _ PER _ MINUTE ) ) , <nl> - row ( 1 , 20 , Duration . newInstance ( 15 , 0 , 130 * NANOS _ PER _ MINUTE ) ) ) ; <nl> + row ( 1 , 20 , Duration . newInstance ( 15 , 0 , 130 * NANOS _ PER _ MINUTE ) ) , <nl> + row ( 1 , 21 , Duration . newInstance ( 12 , 10 , 0 ) ) , <nl> + row ( 1 , 22 , Duration . newInstance ( - 12 , - 10 , 0 ) ) ) ; <nl> <nl> assertInvalidMessage ( " Slice restriction are not supported on duration columns " , <nl> " SELECT * FROM % s WHERE c > 1y ALLOW FILTERING " ) ; <nl> @ @ - 157 , 6 + 164 , 12 @ @ public class CreateTest extends CQLTester <nl> assertInvalidMessage ( " Invalid duration . The total number of days must be less or equal to 2147483647 " , <nl> " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 2 , " + Long . MAX _ VALUE + " d ) " ) ; <nl> <nl> + assertInvalidMessage ( " The duration months , days and nanoseconds must be all of the same sign ( 2 , - 2 , 0 ) " , <nl> + " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 2 , 1 , duration ( 2 , - 2 , 0 ) ) ; <nl> + <nl> + assertInvalidMessage ( " The duration months , days and nanoseconds must be all of the same sign ( - 2 , 0 , 2000000 ) " , <nl> + " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 2 , 1 , duration ( - 2 , 0 , 2000000 ) ) ; <nl> + <nl> / / Test with duration column name <nl> createTable ( " CREATE TABLE % s ( a text PRIMARY KEY , duration duration ) ; " ) ; <nl> <nl> @ @ - 216 , 6 + 229 , 17 @ @ public class CreateTest extends CQLTester <nl> " CREATE TABLE % s ( pk int , m frozen < map < text , list < tuple < int , duration > > > > , v int , PRIMARY KEY ( pk , m ) ) " ) ; <nl> } <nl> <nl> + private ByteBuffer duration ( int months , int days , long nanoseconds ) throws IOException <nl> + { <nl> + try ( DataOutputBuffer output = new DataOutputBuffer ( ) ) <nl> + { <nl> + output . writeVInt ( months ) ; <nl> + output . writeVInt ( days ) ; <nl> + output . writeVInt ( nanoseconds ) ; <nl> + return output . buffer ( ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Creation and basic operations on a static table , <nl> * migrated from cql _ tests . py : TestCQL . static _ cf _ test ( )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 55762e2 . . aec644f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 10 
 + * Fix duration type validation ( CASSANDRA - 13143 ) 
 * Fix flaky GcCompactionTest ( CASSANDRA - 12664 ) 
 * Fix TestHintedHandoff . hintedhandoff _ decom _ test ( CASSANDRA - 13058 ) 
 * Fixed query monitoring for range queries ( CASSANDRA - 13050 ) 
 diff - - git a / src / java / org / apache / cassandra / serializers / DurationSerializer . java b / src / java / org / apache / cassandra / serializers / DurationSerializer . java 
 index d139b9e . . 03d08ae 100644 
 - - - a / src / java / org / apache / cassandra / serializers / DurationSerializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / DurationSerializer . java 
 @ @ - 80 , 6 + 80 , 22 @ @ public final class DurationSerializer implements TypeSerializer < Duration > 
 { 
 if ( bytes . remaining ( ) < 3 ) 
 throw new MarshalException ( String . format ( " Expected at least 3 bytes for a duration ( % d ) " , bytes . remaining ( ) ) ) ; 
 + 
 + try ( DataInputBuffer in = new DataInputBuffer ( bytes , true ) ) 
 + { 
 + int months = ( int ) in . readVInt ( ) ; 
 + int days = ( int ) in . readVInt ( ) ; 
 + long nanoseconds = in . readVInt ( ) ; 
 + 
 + if ( ! ( ( months > = 0 & & days > = 0 & & nanoseconds > = 0 ) | | ( months < = 0 & & days < = 0 & & nanoseconds < = 0 ) ) ) 
 + throw new MarshalException ( String . format ( " The duration months , days and nanoseconds must be all of the same sign ( % d , % d , % d ) " , 
 + months , days , nanoseconds ) ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + / / this should never happen with a DataInputBuffer 
 + throw new AssertionError ( " Unexpected error " , e ) ; 
 + } 
 } 
 
 public String toString ( Duration duration ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / CreateTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / CreateTest . java 
 index 6912f85 . . e60bf36 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / CreateTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / CreateTest . java 
 @ @ - 17 , 6 + 17 , 8 @ @ 
 * / 
 package org . apache . cassandra . cql3 . validation . operations ; 
 
 + import java . io . IOException ; 
 + import java . nio . ByteBuffer ; 
 import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . UUID ; 
 @ @ - 32 , 6 + 34 , 7 @ @ import org . apache . cassandra . db . Mutation ; 
 import org . apache . cassandra . db . partitions . Partition ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . exceptions . SyntaxException ; 
 + import org . apache . cassandra . io . util . DataOutputBuffer ; 
 import org . apache . cassandra . schema . SchemaKeyspace ; 
 import org . apache . cassandra . triggers . ITrigger ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 @ @ - 121 , 6 + 124 , 8 @ @ public class CreateTest extends CQLTester 
 execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 18 , P1Y3MT2H10M ) " ) ; 
 execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 19 , P0000 - 00 - 00T30 : 20 : 00 ) " ) ; 
 execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 20 , P0001 - 03 - 00T02 : 10 : 00 ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 21 , duration ( 12 , 10 , 0 ) ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 22 , duration ( - 12 , - 10 , 0 ) ) ; 
 
 assertRows ( execute ( " SELECT * FROM % s " ) , 
 row ( 1 , 1 , Duration . newInstance ( 14 , 0 , 0 ) ) , 
 @ @ - 142 , 7 + 147 , 9 @ @ public class CreateTest extends CQLTester 
 row ( 1 , 17 , Duration . newInstance ( 0 , 14 , 0 ) ) , 
 row ( 1 , 18 , Duration . newInstance ( 15 , 0 , 130 * NANOS _ PER _ MINUTE ) ) , 
 row ( 1 , 19 , Duration . newInstance ( 0 , 0 , 30 * NANOS _ PER _ HOUR + 20 * NANOS _ PER _ MINUTE ) ) , 
 - row ( 1 , 20 , Duration . newInstance ( 15 , 0 , 130 * NANOS _ PER _ MINUTE ) ) ) ; 
 + row ( 1 , 20 , Duration . newInstance ( 15 , 0 , 130 * NANOS _ PER _ MINUTE ) ) , 
 + row ( 1 , 21 , Duration . newInstance ( 12 , 10 , 0 ) ) , 
 + row ( 1 , 22 , Duration . newInstance ( - 12 , - 10 , 0 ) ) ) ; 
 
 assertInvalidMessage ( " Slice restriction are not supported on duration columns " , 
 " SELECT * FROM % s WHERE c > 1y ALLOW FILTERING " ) ; 
 @ @ - 157 , 6 + 164 , 12 @ @ public class CreateTest extends CQLTester 
 assertInvalidMessage ( " Invalid duration . The total number of days must be less or equal to 2147483647 " , 
 " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 2 , " + Long . MAX _ VALUE + " d ) " ) ; 
 
 + assertInvalidMessage ( " The duration months , days and nanoseconds must be all of the same sign ( 2 , - 2 , 0 ) " , 
 + " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 2 , 1 , duration ( 2 , - 2 , 0 ) ) ; 
 + 
 + assertInvalidMessage ( " The duration months , days and nanoseconds must be all of the same sign ( - 2 , 0 , 2000000 ) " , 
 + " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 2 , 1 , duration ( - 2 , 0 , 2000000 ) ) ; 
 + 
 / / Test with duration column name 
 createTable ( " CREATE TABLE % s ( a text PRIMARY KEY , duration duration ) ; " ) ; 
 
 @ @ - 216 , 6 + 229 , 17 @ @ public class CreateTest extends CQLTester 
 " CREATE TABLE % s ( pk int , m frozen < map < text , list < tuple < int , duration > > > > , v int , PRIMARY KEY ( pk , m ) ) " ) ; 
 } 
 
 + private ByteBuffer duration ( int months , int days , long nanoseconds ) throws IOException 
 + { 
 + try ( DataOutputBuffer output = new DataOutputBuffer ( ) ) 
 + { 
 + output . writeVInt ( months ) ; 
 + output . writeVInt ( days ) ; 
 + output . writeVInt ( nanoseconds ) ; 
 + return output . buffer ( ) ; 
 + } 
 + } 
 + 
 / * * 
 * Creation and basic operations on a static table , 
 * migrated from cql _ tests . py : TestCQL . static _ cf _ test ( )

NEAREST DIFF:
ELIMINATEDSENTENCE
