BLEU SCORE: 0.03823246852690465

TEST MSG: Invalid writetime for null columns in cqlsh
GENERATED MSG: Fix 2ndary index queries on partition keys for tables with static columns

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5e95b75 . . e3f5fe6 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 15 <nl> + * Fix invalid writetime for null cells ( CASSANDRA - 13711 ) <nl> * Fix ALTER TABLE statement to atomically propagate changes to the table and its MVs ( CASSANDRA - 12952 ) <nl> * Fixed ambiguous output of nodetool tablestats command ( CASSANDRA - 13722 ) <nl> * JMXEnabledThreadPoolExecutor with corePoolSize equal to maxPoolSize ( Backport CASSANDRA - 13329 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / selection / Selection . java b / src / java / org / apache / cassandra / cql3 / selection / Selection . java <nl> index 0ecf063 . . 425ae52 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / selection / Selection . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / selection / Selection . java <nl> @ @ - 346 , 6 + 346 , 12 @ @ public abstract class Selection <nl> } <nl> } <nl> current = new ArrayList < > ( columns . size ( ) ) ; <nl> + <nl> + / / Timestamps and TTLs are arrays per row , we must null them out between row <nl> + if ( timestamps ! = null ) <nl> + Arrays . fill ( timestamps , Long . MIN _ VALUE ) ; <nl> + if ( ttls ! = null ) <nl> + Arrays . fill ( ttls , - 1 ) ; <nl> } <nl> <nl> public ResultSet build ( int protocolVersion ) throws InvalidRequestException <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / TimestampTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / TimestampTest . java <nl> index 3e70cd0 . . b41163c 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / TimestampTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / TimestampTest . java <nl> @ @ - 152 , 4 + 152 , 33 @ @ public class TimestampTest extends CQLTester <nl> execute ( " INSERT INTO % s ( k , i ) VALUES ( 1 , 1 ) USING TIMESTAMP ? " , unset ( ) ) ; / / treat as ' now ' <nl> } <nl> <nl> + @ Test <nl> + public void testTimestampsOnUnsetColumns ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , i int ) " ) ; <nl> + execute ( " INSERT INTO % s ( k , i ) VALUES ( 1 , 1 ) USING TIMESTAMP 1 ; " ) ; <nl> + execute ( " INSERT INTO % s ( k ) VALUES ( 2 ) USING TIMESTAMP 2 ; " ) ; <nl> + execute ( " INSERT INTO % s ( k , i ) VALUES ( 3 , 3 ) USING TIMESTAMP 1 ; " ) ; <nl> + assertRows ( execute ( " SELECT k , i , writetime ( i ) FROM % s " ) , <nl> + row ( 1 , 1 , 1L ) , <nl> + row ( 2 , null , null ) , <nl> + row ( 3 , 3 , 1L ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTimestampsOnUnsetColumnsWide ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int , c int , i int , PRIMARY KEY ( k , c ) ) " ) ; <nl> + execute ( " INSERT INTO % s ( k , c , i ) VALUES ( 1 , 1 , 1 ) USING TIMESTAMP 1 ; " ) ; <nl> + execute ( " INSERT INTO % s ( k , c ) VALUES ( 1 , 2 ) USING TIMESTAMP 1 ; " ) ; <nl> + execute ( " INSERT INTO % s ( k , c , i ) VALUES ( 1 , 3 , 1 ) USING TIMESTAMP 1 ; " ) ; <nl> + execute ( " INSERT INTO % s ( k , c ) VALUES ( 2 , 2 ) USING TIMESTAMP 2 ; " ) ; <nl> + execute ( " INSERT INTO % s ( k , c , i ) VALUES ( 3 , 3 , 3 ) USING TIMESTAMP 1 ; " ) ; <nl> + assertRows ( execute ( " SELECT k , c , i , writetime ( i ) FROM % s " ) , <nl> + row ( 1 , 1 , 1 , 1L ) , <nl> + row ( 1 , 2 , null , null ) , <nl> + row ( 1 , 3 , 1 , 1L ) , <nl> + row ( 2 , 2 , null , null ) , <nl> + row ( 3 , 3 , 3 , 1L ) ) ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java <nl> index f40ae4b . . 3ee20a0 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java <nl> @ @ - 2966 , 4 + 2966 , 31 @ @ public class SelectTest extends CQLTester <nl> } ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testMixedTTLOnColumns ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , i int ) " ) ; <nl> + execute ( " INSERT INTO % s ( k ) VALUES ( 2 ) ; " ) ; <nl> + execute ( " INSERT INTO % s ( k , i ) VALUES ( 1 , 1 ) USING TTL 100 ; " ) ; <nl> + execute ( " INSERT INTO % s ( k , i ) VALUES ( 3 , 3 ) USING TTL 100 ; " ) ; <nl> + assertRows ( execute ( " SELECT k , i , TTL ( i ) FROM % s " ) , <nl> + row ( 1 , 1 , 100 ) , row ( 2 , null , null ) , row ( 3 , 3 , 100 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMixedTTLOnColumnsWide ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int , c int , i int , PRIMARY KEY ( k , c ) ) " ) ; <nl> + execute ( " INSERT INTO % s ( k , c ) VALUES ( 2 , 2 ) ; " ) ; <nl> + execute ( " INSERT INTO % s ( k , c , i ) VALUES ( 1 , 1 , 1 ) USING TTL 100 ; " ) ; <nl> + execute ( " INSERT INTO % s ( k , c ) VALUES ( 1 , 2 ) ; " ) ; <nl> + execute ( " INSERT INTO % s ( k , c , i ) VALUES ( 1 , 3 , 3 ) USING TTL 100 ; " ) ; <nl> + execute ( " INSERT INTO % s ( k , c , i ) VALUES ( 3 , 3 , 3 ) USING TTL 100 ; " ) ; <nl> + assertRows ( execute ( " SELECT k , c , i , TTL ( i ) FROM % s " ) , <nl> + row ( 1 , 1 , 1 , 100 ) , <nl> + row ( 1 , 2 , null , null ) , <nl> + row ( 1 , 3 , 3 , 100 ) , <nl> + row ( 2 , 2 , null , null ) , <nl> + row ( 3 , 3 , 3 , 100 ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5e95b75 . . e3f5fe6 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 15 
 + * Fix invalid writetime for null cells ( CASSANDRA - 13711 ) 
 * Fix ALTER TABLE statement to atomically propagate changes to the table and its MVs ( CASSANDRA - 12952 ) 
 * Fixed ambiguous output of nodetool tablestats command ( CASSANDRA - 13722 ) 
 * JMXEnabledThreadPoolExecutor with corePoolSize equal to maxPoolSize ( Backport CASSANDRA - 13329 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / selection / Selection . java b / src / java / org / apache / cassandra / cql3 / selection / Selection . java 
 index 0ecf063 . . 425ae52 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / selection / Selection . java 
 + + + b / src / java / org / apache / cassandra / cql3 / selection / Selection . java 
 @ @ - 346 , 6 + 346 , 12 @ @ public abstract class Selection 
 } 
 } 
 current = new ArrayList < > ( columns . size ( ) ) ; 
 + 
 + / / Timestamps and TTLs are arrays per row , we must null them out between row 
 + if ( timestamps ! = null ) 
 + Arrays . fill ( timestamps , Long . MIN _ VALUE ) ; 
 + if ( ttls ! = null ) 
 + Arrays . fill ( ttls , - 1 ) ; 
 } 
 
 public ResultSet build ( int protocolVersion ) throws InvalidRequestException 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / TimestampTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / TimestampTest . java 
 index 3e70cd0 . . b41163c 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / TimestampTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / TimestampTest . java 
 @ @ - 152 , 4 + 152 , 33 @ @ public class TimestampTest extends CQLTester 
 execute ( " INSERT INTO % s ( k , i ) VALUES ( 1 , 1 ) USING TIMESTAMP ? " , unset ( ) ) ; / / treat as ' now ' 
 } 
 
 + @ Test 
 + public void testTimestampsOnUnsetColumns ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , i int ) " ) ; 
 + execute ( " INSERT INTO % s ( k , i ) VALUES ( 1 , 1 ) USING TIMESTAMP 1 ; " ) ; 
 + execute ( " INSERT INTO % s ( k ) VALUES ( 2 ) USING TIMESTAMP 2 ; " ) ; 
 + execute ( " INSERT INTO % s ( k , i ) VALUES ( 3 , 3 ) USING TIMESTAMP 1 ; " ) ; 
 + assertRows ( execute ( " SELECT k , i , writetime ( i ) FROM % s " ) , 
 + row ( 1 , 1 , 1L ) , 
 + row ( 2 , null , null ) , 
 + row ( 3 , 3 , 1L ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testTimestampsOnUnsetColumnsWide ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int , c int , i int , PRIMARY KEY ( k , c ) ) " ) ; 
 + execute ( " INSERT INTO % s ( k , c , i ) VALUES ( 1 , 1 , 1 ) USING TIMESTAMP 1 ; " ) ; 
 + execute ( " INSERT INTO % s ( k , c ) VALUES ( 1 , 2 ) USING TIMESTAMP 1 ; " ) ; 
 + execute ( " INSERT INTO % s ( k , c , i ) VALUES ( 1 , 3 , 1 ) USING TIMESTAMP 1 ; " ) ; 
 + execute ( " INSERT INTO % s ( k , c ) VALUES ( 2 , 2 ) USING TIMESTAMP 2 ; " ) ; 
 + execute ( " INSERT INTO % s ( k , c , i ) VALUES ( 3 , 3 , 3 ) USING TIMESTAMP 1 ; " ) ; 
 + assertRows ( execute ( " SELECT k , c , i , writetime ( i ) FROM % s " ) , 
 + row ( 1 , 1 , 1 , 1L ) , 
 + row ( 1 , 2 , null , null ) , 
 + row ( 1 , 3 , 1 , 1L ) , 
 + row ( 2 , 2 , null , null ) , 
 + row ( 3 , 3 , 3 , 1L ) ) ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java 
 index f40ae4b . . 3ee20a0 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java 
 @ @ - 2966 , 4 + 2966 , 31 @ @ public class SelectTest extends CQLTester 
 } ) ; 
 } 
 
 + @ Test 
 + public void testMixedTTLOnColumns ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , i int ) " ) ; 
 + execute ( " INSERT INTO % s ( k ) VALUES ( 2 ) ; " ) ; 
 + execute ( " INSERT INTO % s ( k , i ) VALUES ( 1 , 1 ) USING TTL 100 ; " ) ; 
 + execute ( " INSERT INTO % s ( k , i ) VALUES ( 3 , 3 ) USING TTL 100 ; " ) ; 
 + assertRows ( execute ( " SELECT k , i , TTL ( i ) FROM % s " ) , 
 + row ( 1 , 1 , 100 ) , row ( 2 , null , null ) , row ( 3 , 3 , 100 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testMixedTTLOnColumnsWide ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int , c int , i int , PRIMARY KEY ( k , c ) ) " ) ; 
 + execute ( " INSERT INTO % s ( k , c ) VALUES ( 2 , 2 ) ; " ) ; 
 + execute ( " INSERT INTO % s ( k , c , i ) VALUES ( 1 , 1 , 1 ) USING TTL 100 ; " ) ; 
 + execute ( " INSERT INTO % s ( k , c ) VALUES ( 1 , 2 ) ; " ) ; 
 + execute ( " INSERT INTO % s ( k , c , i ) VALUES ( 1 , 3 , 3 ) USING TTL 100 ; " ) ; 
 + execute ( " INSERT INTO % s ( k , c , i ) VALUES ( 3 , 3 , 3 ) USING TTL 100 ; " ) ; 
 + assertRows ( execute ( " SELECT k , c , i , TTL ( i ) FROM % s " ) , 
 + row ( 1 , 1 , 1 , 100 ) , 
 + row ( 1 , 2 , null , null ) , 
 + row ( 1 , 3 , 3 , 100 ) , 
 + row ( 2 , 2 , null , null ) , 
 + row ( 3 , 3 , 3 , 100 ) ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
