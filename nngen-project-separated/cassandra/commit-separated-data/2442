BLEU SCORE: 0.03772691894380681

TEST MSG: Work around initialization problem
GENERATED MSG: Track clients ' remote addresses in ClientState

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index fca9c42 . . fd6e6ce 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 82 , 7 + 82 , 6 @ @ public class QueryProcessor implements QueryHandler <nl> / / A map for prepared statements used internally ( which we don ' t want to mix with user statement , in particular we don ' t <nl> / / bother with expiration on those . <nl> private static final ConcurrentMap < String , ParsedStatement . Prepared > internalStatements = new ConcurrentHashMap < > ( ) ; <nl> - private static final QueryState internalQueryState ; <nl> <nl> static <nl> { <nl> @ @ - 95 , 16 + 94 , 33 @ @ public class QueryProcessor implements QueryHandler <nl> . weigher ( thriftMemoryUsageWeigher ) <nl> . build ( ) ; <nl> <nl> - ClientState state = ClientState . forInternalCalls ( ) ; <nl> - try <nl> - { <nl> - state . setKeyspace ( Keyspace . SYSTEM _ KS ) ; <nl> - } <nl> - catch ( InvalidRequestException e ) <nl> + } <nl> + <nl> + / / Work aound initialization dependency <nl> + private static enum InternalStateInstance <nl> + { <nl> + INSTANCE ; <nl> + <nl> + private final QueryState queryState ; <nl> + <nl> + InternalStateInstance ( ) <nl> { <nl> - throw new RuntimeException ( ) ; <nl> + ClientState state = ClientState . forInternalCalls ( ) ; <nl> + try <nl> + { <nl> + state . setKeyspace ( Keyspace . SYSTEM _ KS ) ; <nl> + } <nl> + catch ( InvalidRequestException e ) <nl> + { <nl> + throw new RuntimeException ( ) ; <nl> + } <nl> + this . queryState = new QueryState ( state ) ; <nl> } <nl> - internalQueryState = new QueryState ( state ) ; <nl> + } <nl> + <nl> + private static QueryState internalQueryState ( ) <nl> + { <nl> + return InternalStateInstance . INSTANCE . queryState ; <nl> } <nl> <nl> private QueryProcessor ( ) <nl> @ @ - 233 , 8 + 249 , 8 @ @ public class QueryProcessor implements QueryHandler <nl> return prepared ; <nl> <nl> / / Note : if 2 threads prepare the same query , we ' ll live so don ' t bother synchronizing <nl> - prepared = parseStatement ( query , internalQueryState ) ; <nl> - prepared . statement . validate ( internalQueryState . getClientState ( ) ) ; <nl> + prepared = parseStatement ( query , internalQueryState ( ) ) ; <nl> + prepared . statement . validate ( internalQueryState ( ) . getClientState ( ) ) ; <nl> internalStatements . putIfAbsent ( query , prepared ) ; <nl> return prepared ; <nl> } <nl> @ @ - 244 , 7 + 260 , 7 @ @ public class QueryProcessor implements QueryHandler <nl> try <nl> { <nl> ParsedStatement . Prepared prepared = prepareInternal ( query ) ; <nl> - ResultMessage result = prepared . statement . executeInternal ( internalQueryState , makeInternalOptions ( prepared , values ) ) ; <nl> + ResultMessage result = prepared . statement . executeInternal ( internalQueryState ( ) , makeInternalOptions ( prepared , values ) ) ; <nl> if ( result instanceof ResultMessage . Rows ) <nl> return UntypedResultSet . create ( ( ( ResultMessage . Rows ) result ) . result ) ; <nl> else <nl> @ @ - 286 , 9 + 302 , 9 @ @ public class QueryProcessor implements QueryHandler <nl> { <nl> try <nl> { <nl> - ParsedStatement . Prepared prepared = parseStatement ( query , internalQueryState ) ; <nl> - prepared . statement . validate ( internalQueryState . getClientState ( ) ) ; <nl> - ResultMessage result = prepared . statement . executeInternal ( internalQueryState , makeInternalOptions ( prepared , values ) ) ; <nl> + ParsedStatement . Prepared prepared = parseStatement ( query , internalQueryState ( ) ) ; <nl> + prepared . statement . validate ( internalQueryState ( ) . getClientState ( ) ) ; <nl> + ResultMessage result = prepared . statement . executeInternal ( internalQueryState ( ) , makeInternalOptions ( prepared , values ) ) ; <nl> if ( result instanceof ResultMessage . Rows ) <nl> return UntypedResultSet . create ( ( ( ResultMessage . Rows ) result ) . result ) ; <nl> else
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index cecb88a . . ae2ab5e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 . 11 <nl> + * Avoid sending Truncate command to fat clients ( CASSANDRA - 6088 ) <nl> * Allow cache - keys - to - save to be set at runtime ( CASSANDRA - 5980 ) <nl> * Allow where clause conditions to be in parenthesis ( CASSANDRA - 6037 ) <nl> * Do not open non - ssl storage port if encryption option is all ( CASSANDRA - 3916 ) <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index b4ea88a . . acf40f3 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 218 , 10 + 218 , 22 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> <nl> public Set < InetAddress > getLiveMembers ( ) <nl> { <nl> - Set < InetAddress > liveMbrs = new HashSet < InetAddress > ( liveEndpoints ) ; <nl> - if ( ! liveMbrs . contains ( FBUtilities . getBroadcastAddress ( ) ) ) <nl> - liveMbrs . add ( FBUtilities . getBroadcastAddress ( ) ) ; <nl> - return liveMbrs ; <nl> + Set < InetAddress > liveMembers = new HashSet < InetAddress > ( liveEndpoints ) ; <nl> + if ( ! liveMembers . contains ( FBUtilities . getBroadcastAddress ( ) ) ) <nl> + liveMembers . add ( FBUtilities . getBroadcastAddress ( ) ) ; <nl> + return liveMembers ; <nl> + } <nl> + <nl> + public Set < InetAddress > getLiveTokenOwners ( ) <nl> + { <nl> + Set < InetAddress > tokenOwners = new HashSet < InetAddress > ( ) ; <nl> + for ( InetAddress member : getLiveMembers ( ) ) <nl> + { <nl> + EndpointState epState = endpointStateMap . get ( member ) ; <nl> + if ( epState ! = null & & ! isDeadState ( epState ) & & StorageService . instance . getTokenMetadata ( ) . isMember ( member ) ) <nl> + tokenOwners . add ( member ) ; <nl> + } <nl> + return tokenOwners ; <nl> } <nl> <nl> public Set < InetAddress > getUnreachableMembers ( ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index be92213 . . 8a6e52e 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 25 , 7 + 25 , 6 @ @ import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> import java . util . concurrent . * ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> - import java . util . concurrent . atomic . AtomicLong ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> <nl> @ @ - 1551 , 7 + 1550 , 8 @ @ public class StorageProxy implements StorageProxyMBean <nl> throw new UnavailableException ( ConsistencyLevel . ALL , liveMembers + Gossiper . instance . getUnreachableMembers ( ) . size ( ) , liveMembers ) ; <nl> } <nl> <nl> - Set < InetAddress > allEndpoints = Gossiper . instance . getLiveMembers ( ) ; <nl> + Set < InetAddress > allEndpoints = Gossiper . instance . getLiveTokenOwners ( ) ; <nl> + <nl> int blockFor = allEndpoints . size ( ) ; <nl> final TruncateResponseHandler responseHandler = new TruncateResponseHandler ( blockFor ) ; <nl>

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index fca9c42 . . fd6e6ce 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 82 , 7 + 82 , 6 @ @ public class QueryProcessor implements QueryHandler 
 / / A map for prepared statements used internally ( which we don ' t want to mix with user statement , in particular we don ' t 
 / / bother with expiration on those . 
 private static final ConcurrentMap < String , ParsedStatement . Prepared > internalStatements = new ConcurrentHashMap < > ( ) ; 
 - private static final QueryState internalQueryState ; 
 
 static 
 { 
 @ @ - 95 , 16 + 94 , 33 @ @ public class QueryProcessor implements QueryHandler 
 . weigher ( thriftMemoryUsageWeigher ) 
 . build ( ) ; 
 
 - ClientState state = ClientState . forInternalCalls ( ) ; 
 - try 
 - { 
 - state . setKeyspace ( Keyspace . SYSTEM _ KS ) ; 
 - } 
 - catch ( InvalidRequestException e ) 
 + } 
 + 
 + / / Work aound initialization dependency 
 + private static enum InternalStateInstance 
 + { 
 + INSTANCE ; 
 + 
 + private final QueryState queryState ; 
 + 
 + InternalStateInstance ( ) 
 { 
 - throw new RuntimeException ( ) ; 
 + ClientState state = ClientState . forInternalCalls ( ) ; 
 + try 
 + { 
 + state . setKeyspace ( Keyspace . SYSTEM _ KS ) ; 
 + } 
 + catch ( InvalidRequestException e ) 
 + { 
 + throw new RuntimeException ( ) ; 
 + } 
 + this . queryState = new QueryState ( state ) ; 
 } 
 - internalQueryState = new QueryState ( state ) ; 
 + } 
 + 
 + private static QueryState internalQueryState ( ) 
 + { 
 + return InternalStateInstance . INSTANCE . queryState ; 
 } 
 
 private QueryProcessor ( ) 
 @ @ - 233 , 8 + 249 , 8 @ @ public class QueryProcessor implements QueryHandler 
 return prepared ; 
 
 / / Note : if 2 threads prepare the same query , we ' ll live so don ' t bother synchronizing 
 - prepared = parseStatement ( query , internalQueryState ) ; 
 - prepared . statement . validate ( internalQueryState . getClientState ( ) ) ; 
 + prepared = parseStatement ( query , internalQueryState ( ) ) ; 
 + prepared . statement . validate ( internalQueryState ( ) . getClientState ( ) ) ; 
 internalStatements . putIfAbsent ( query , prepared ) ; 
 return prepared ; 
 } 
 @ @ - 244 , 7 + 260 , 7 @ @ public class QueryProcessor implements QueryHandler 
 try 
 { 
 ParsedStatement . Prepared prepared = prepareInternal ( query ) ; 
 - ResultMessage result = prepared . statement . executeInternal ( internalQueryState , makeInternalOptions ( prepared , values ) ) ; 
 + ResultMessage result = prepared . statement . executeInternal ( internalQueryState ( ) , makeInternalOptions ( prepared , values ) ) ; 
 if ( result instanceof ResultMessage . Rows ) 
 return UntypedResultSet . create ( ( ( ResultMessage . Rows ) result ) . result ) ; 
 else 
 @ @ - 286 , 9 + 302 , 9 @ @ public class QueryProcessor implements QueryHandler 
 { 
 try 
 { 
 - ParsedStatement . Prepared prepared = parseStatement ( query , internalQueryState ) ; 
 - prepared . statement . validate ( internalQueryState . getClientState ( ) ) ; 
 - ResultMessage result = prepared . statement . executeInternal ( internalQueryState , makeInternalOptions ( prepared , values ) ) ; 
 + ParsedStatement . Prepared prepared = parseStatement ( query , internalQueryState ( ) ) ; 
 + prepared . statement . validate ( internalQueryState ( ) . getClientState ( ) ) ; 
 + ResultMessage result = prepared . statement . executeInternal ( internalQueryState ( ) , makeInternalOptions ( prepared , values ) ) ; 
 if ( result instanceof ResultMessage . Rows ) 
 return UntypedResultSet . create ( ( ( ResultMessage . Rows ) result ) . result ) ; 
 else

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index cecb88a . . ae2ab5e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 . 11 
 + * Avoid sending Truncate command to fat clients ( CASSANDRA - 6088 ) 
 * Allow cache - keys - to - save to be set at runtime ( CASSANDRA - 5980 ) 
 * Allow where clause conditions to be in parenthesis ( CASSANDRA - 6037 ) 
 * Do not open non - ssl storage port if encryption option is all ( CASSANDRA - 3916 ) 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index b4ea88a . . acf40f3 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 218 , 10 + 218 , 22 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 
 public Set < InetAddress > getLiveMembers ( ) 
 { 
 - Set < InetAddress > liveMbrs = new HashSet < InetAddress > ( liveEndpoints ) ; 
 - if ( ! liveMbrs . contains ( FBUtilities . getBroadcastAddress ( ) ) ) 
 - liveMbrs . add ( FBUtilities . getBroadcastAddress ( ) ) ; 
 - return liveMbrs ; 
 + Set < InetAddress > liveMembers = new HashSet < InetAddress > ( liveEndpoints ) ; 
 + if ( ! liveMembers . contains ( FBUtilities . getBroadcastAddress ( ) ) ) 
 + liveMembers . add ( FBUtilities . getBroadcastAddress ( ) ) ; 
 + return liveMembers ; 
 + } 
 + 
 + public Set < InetAddress > getLiveTokenOwners ( ) 
 + { 
 + Set < InetAddress > tokenOwners = new HashSet < InetAddress > ( ) ; 
 + for ( InetAddress member : getLiveMembers ( ) ) 
 + { 
 + EndpointState epState = endpointStateMap . get ( member ) ; 
 + if ( epState ! = null & & ! isDeadState ( epState ) & & StorageService . instance . getTokenMetadata ( ) . isMember ( member ) ) 
 + tokenOwners . add ( member ) ; 
 + } 
 + return tokenOwners ; 
 } 
 
 public Set < InetAddress > getUnreachableMembers ( ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index be92213 . . 8a6e52e 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 25 , 7 + 25 , 6 @ @ import java . nio . ByteBuffer ; 
 import java . util . * ; 
 import java . util . concurrent . * ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 - import java . util . concurrent . atomic . AtomicLong ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 
 @ @ - 1551 , 7 + 1550 , 8 @ @ public class StorageProxy implements StorageProxyMBean 
 throw new UnavailableException ( ConsistencyLevel . ALL , liveMembers + Gossiper . instance . getUnreachableMembers ( ) . size ( ) , liveMembers ) ; 
 } 
 
 - Set < InetAddress > allEndpoints = Gossiper . instance . getLiveMembers ( ) ; 
 + Set < InetAddress > allEndpoints = Gossiper . instance . getLiveTokenOwners ( ) ; 
 + 
 int blockFor = allEndpoints . size ( ) ; 
 final TruncateResponseHandler responseHandler = new TruncateResponseHandler ( blockFor ) ; 

