BLEU SCORE: 0.028398387225677897

TEST MSG: Fix potentially returning deleted row with range tombstones ( 2 . 1 version )
GENERATED MSG: improve testing of StorageService init , and fix shutdown of messagingservice .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e070eaf . . 175a78a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 52 , 6 + 52 , 7 @ @ <nl> * Log failed host when preparing incremental repair ( CASSANDRA - 8228 ) <nl> * Force config client mode in CQLSSTableWriter ( CASSANDRA - 8281 ) <nl> Merged from 2 . 0 : <nl> + * Fix potentially returning deleted rows with range tombstone ( CASSANDRA - 8558 ) <nl> * Check for available disk space before starting a compaction ( CASSANDRA - 8562 ) <nl> * Fix DISTINCT queries with LIMITs or paging when some partitions <nl> contain only tombstones ( CASSANDRA - 8490 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index 92a9579 . . 4ef554d 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 844 , 7 + 844 , 7 @ @ public class SelectStatement implements CQLStatement <nl> / / For composites , if there was preceding component and we ' re computing the end , we must change the last component <nl> / / End - Of - Component , otherwise we would be selecting only one record . <nl> Composite prefix = builder . build ( ) ; <nl> - return Collections . singletonList ( ! prefix . isEmpty ( ) & & eocBound = = Bound . END ? prefix . end ( ) : prefix ) ; <nl> + return Collections . singletonList ( ! prefix . isEmpty ( ) & & eocBound = = Bound . END ? prefix . end ( ) : prefix . start ( ) ) ; <nl> } <nl> if ( r . isSlice ( ) ) <nl> { <nl> @ @ - 869 , 7 + 869 , 7 @ @ public class SelectStatement implements CQLStatement <nl> throw new InvalidRequestException ( String . format ( " Invalid null clustering key part % s " , def . name ) ) ; <nl> Composite prefix = builder . buildWith ( val ) ; <nl> / / See below for why this <nl> - s . add ( ( eocBound = = Bound . END & & builder . remainingCount ( ) > 0 ) ? prefix . end ( ) : prefix ) ; <nl> + s . add ( ( eocBound = = Bound . END & & builder . remainingCount ( ) > 0 ) ? prefix . end ( ) : prefix . start ( ) ) ; <nl> } <nl> return new ArrayList < > ( s ) ; <nl> } <nl> @ @ - 887 , 7 + 887 , 7 @ @ public class SelectStatement implements CQLStatement <nl> / / case using the eoc would be bad , since for the random partitioner we have no guarantee that <nl> / / prefix . end ( ) will sort after prefix ( see # 5240 ) . <nl> Composite prefix = builder . build ( ) ; <nl> - return Collections . singletonList ( eocBound = = Bound . END & & builder . remainingCount ( ) > 0 ? prefix . end ( ) : prefix ) ; <nl> + return Collections . singletonList ( eocBound = = Bound . END & & builder . remainingCount ( ) > 0 ? prefix . end ( ) : prefix . start ( ) ) ; <nl> } <nl> <nl> private static Composite . EOC eocForRelation ( Operator op ) <nl> diff - - git a / src / java / org / apache / cassandra / db / AtomDeserializer . java b / src / java / org / apache / cassandra / db / AtomDeserializer . java <nl> index 799ed0e . . a103647 100644 <nl> - - - a / src / java / org / apache / cassandra / db / AtomDeserializer . java <nl> + + + b / src / java / org / apache / cassandra / db / AtomDeserializer . java <nl> @ @ - 42 , 6 + 42 , 10 @ @ public class AtomDeserializer <nl> private final int expireBefore ; <nl> private final Descriptor . Version version ; <nl> <nl> + / / The " flag " for the next name ( which correspond to the " masks " in ColumnSerializer ) if it has been <nl> + / / read already , Integer . MIN _ VALUE otherwise ; <nl> + private int nextFlags = Integer . MIN _ VALUE ; <nl> + <nl> public AtomDeserializer ( CellNameType type , DataInput in , ColumnSerializer . Flag flag , int expireBefore , Descriptor . Version version ) <nl> { <nl> this . type = type ; <nl> @ @ - 82 , 17 + 86 , 30 @ @ public class AtomDeserializer <nl> } <nl> <nl> / * * <nl> + * Returns whether the next atom is a range tombstone or not . <nl> + * <nl> + * Please note that this should only be called after compareNextTo ( ) has been called . <nl> + * / <nl> + public boolean nextIsRangeTombstone ( ) throws IOException <nl> + { <nl> + nextFlags = in . readUnsignedByte ( ) ; <nl> + return ( nextFlags & ColumnSerializer . RANGE _ TOMBSTONE _ MASK ) ! = 0 ; <nl> + } <nl> + <nl> + / * * <nl> * Returns the next atom . <nl> * / <nl> public OnDiskAtom readNext ( ) throws IOException <nl> { <nl> Composite name = nameDeserializer . readNext ( ) ; <nl> assert ! name . isEmpty ( ) ; / / This would imply hasNext ( ) hasn ' t been called <nl> - int b = in . readUnsignedByte ( ) ; <nl> - if ( ( b & ColumnSerializer . RANGE _ TOMBSTONE _ MASK ) ! = 0 ) <nl> - return type . rangeTombstoneSerializer ( ) . deserializeBody ( in , name , version ) ; <nl> - else <nl> - return type . columnSerializer ( ) . deserializeColumnBody ( in , ( CellName ) name , b , flag , expireBefore ) ; <nl> + <nl> + nextFlags = nextFlags = = Integer . MIN _ VALUE ? in . readUnsignedByte ( ) : nextFlags ; <nl> + OnDiskAtom atom = ( nextFlags & ColumnSerializer . RANGE _ TOMBSTONE _ MASK ) ! = 0 <nl> + ? type . rangeTombstoneSerializer ( ) . deserializeBody ( in , name , version ) <nl> + : type . columnSerializer ( ) . deserializeColumnBody ( in , ( CellName ) name , nextFlags , flag , expireBefore ) ; <nl> + nextFlags = Integer . MIN _ VALUE ; <nl> + return atom ; <nl> } <nl> <nl> / * * <nl> @ @ - 101 , 10 + 118 , 11 @ @ public class AtomDeserializer <nl> public void skipNext ( ) throws IOException <nl> { <nl> nameDeserializer . skipNext ( ) ; <nl> - int b = in . readUnsignedByte ( ) ; <nl> - if ( ( b & ColumnSerializer . RANGE _ TOMBSTONE _ MASK ) ! = 0 ) <nl> + nextFlags = nextFlags = = Integer . MIN _ VALUE ? in . readUnsignedByte ( ) : nextFlags ; <nl> + if ( ( nextFlags & ColumnSerializer . RANGE _ TOMBSTONE _ MASK ) ! = 0 ) <nl> type . rangeTombstoneSerializer ( ) . skipBody ( in , version ) ; <nl> else <nl> - type . columnSerializer ( ) . skipColumnBody ( in , b ) ; <nl> + type . columnSerializer ( ) . skipColumnBody ( in , nextFlags ) ; <nl> + nextFlags = Integer . MIN _ VALUE ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java b / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java <nl> index 7012321 . . 924e9bc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java <nl> @ @ - 290 , 8 + 290 , 13 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA <nl> <nl> / / If we read blocks in reversed disk order , we may have columns from the previous block to handle . <nl> / / Note that prefetched keeps columns in reversed disk order . <nl> + / / Also note that Range Tombstone handling is a bit tricky , because we may run into range tombstones <nl> + / / that cover a slice * after * we ' ve move to the previous slice . To keep it simple , we simply include <nl> + / / every RT in prefetched : it ' s only slightly inefficient to do so and there is only so much RT that <nl> + / / can be mistakenly added this way . <nl> if ( reversed & & ! prefetched . isEmpty ( ) ) <nl> { <nl> + / / Whether we ' ve found anything to return in prefetched <nl> boolean gotSome = false ; <nl> / / Avoids some comparison when we know it ' s not useful <nl> boolean inSlice = false ; <nl> @ @ - 303 , 8 + 308 , 22 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA <nl> if ( isColumnBeforeSliceStart ( prefetchedCol ) ) <nl> { <nl> inSlice = false ; <nl> - if ( ! setNextSlice ( ) ) <nl> - return false ; <nl> + <nl> + / / As explained above , we add RT unconditionally <nl> + if ( prefetchedCol instanceof RangeTombstone ) <nl> + { <nl> + blockColumns . addLast ( prefetched . poll ( ) ) ; <nl> + gotSome = true ; <nl> + continue ; <nl> + } <nl> + <nl> + / / Otherwise , we either move to the next slice or , if we have none ( which can happen <nl> + / / because we unwind prefetched no matter what due to RT ) , we skip the cell <nl> + if ( hasMoreSlice ( ) ) <nl> + setNextSlice ( ) ; <nl> + else <nl> + prefetched . poll ( ) ; <nl> + <nl> } <nl> / / col is within slice , all columns <nl> / / ( we go in reverse , so as soon as we are in a slice , no need to check <nl> @ @ - 374 , 6 + 393 , 16 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA <nl> Composite start = currentStart ( ) ; <nl> if ( ! inSlice & & ! start . isEmpty ( ) & & deserializer . compareNextTo ( start ) < 0 ) <nl> { <nl> + / / If it ' s a rangeTombstone , then we need to read it and include it unless it ' s end <nl> + / / stops before our slice start . <nl> + if ( deserializer . nextIsRangeTombstone ( ) ) <nl> + { <nl> + RangeTombstone rt = ( RangeTombstone ) deserializer . readNext ( ) ; <nl> + if ( comparator . compare ( rt . max , start ) > = 0 ) <nl> + addColumn ( rt ) ; <nl> + continue ; <nl> + } <nl> + <nl> if ( reversed ) <nl> { <nl> / / the next slice select columns that are before the current one , so it may <nl> @ @ - 451 , 7 + 480 , 18 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA <nl> Composite start = currentStart ( ) ; <nl> if ( ! inSlice & & ! start . isEmpty ( ) & & deserializer . compareNextTo ( start ) < 0 ) <nl> { <nl> - deserializer . skipNext ( ) ; <nl> + / / If it ' s a rangeTombstone , then we need to read it and include it unless it ' s end <nl> + / / stops before our slice start . Otherwise , we can skip it . <nl> + if ( deserializer . nextIsRangeTombstone ( ) ) <nl> + { <nl> + RangeTombstone rt = ( RangeTombstone ) deserializer . readNext ( ) ; <nl> + if ( comparator . compare ( rt . max , start ) > = 0 ) <nl> + addColumn ( rt ) ; <nl> + } <nl> + else <nl> + { <nl> + deserializer . skipNext ( ) ; <nl> + } <nl> continue ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> index 224b63f . . 221f499 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> @ @ - 214 , 16 + 214 , 31 @ @ public class SSTableNamesIterator extends AbstractIterator < OnDiskAtom > implement <nl> while ( file . bytesPastMark ( mark ) < indexInfo . width & & nextToFetch ! = null ) <nl> { <nl> int cmp = deserializer . compareNextTo ( nextToFetch ) ; <nl> - if ( cmp = = 0 ) <nl> + if ( cmp < 0 ) <nl> + { <nl> + / / If it ' s a rangeTombstone , then we need to read it and include <nl> + / / it if it includes our target . Otherwise , we can skip it . <nl> + if ( deserializer . nextIsRangeTombstone ( ) ) <nl> + { <nl> + RangeTombstone rt = ( RangeTombstone ) deserializer . readNext ( ) ; <nl> + if ( comparator . compare ( rt . max , nextToFetch ) > = 0 ) <nl> + result . add ( rt ) ; <nl> + } <nl> + else <nl> + { <nl> + deserializer . skipNext ( ) ; <nl> + } <nl> + } <nl> + else if ( cmp = = 0 ) <nl> { <nl> nextToFetch = toFetch . hasNext ( ) ? toFetch . next ( ) : null ; <nl> result . add ( deserializer . readNext ( ) ) ; <nl> - continue ; <nl> } <nl> - <nl> - deserializer . skipNext ( ) ; <nl> - if ( cmp > 0 ) <nl> + else <nl> + { <nl> + deserializer . skipNext ( ) ; <nl> nextToFetch = toFetch . hasNext ( ) ? toFetch . next ( ) : null ; <nl> + } <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / composites / CellNameType . java b / src / java / org / apache / cassandra / db / composites / CellNameType . java <nl> index 1e87296 . . 7b4fd36 100644 <nl> - - - a / src / java / org / apache / cassandra / db / composites / CellNameType . java <nl> + + + b / src / java / org / apache / cassandra / db / composites / CellNameType . java <nl> @ @ - 197 , 7 + 197 , 7 @ @ public interface CellNameType extends CType <nl> public boolean hasUnprocessed ( ) throws IOException ; <nl> <nl> / * * <nl> - * Comparare the next name to read to the provided Composite . <nl> + * Compare the next name to read to the provided Composite . <nl> * This does not consume the next name . <nl> * / <nl> public int compareNextTo ( Composite composite ) throws IOException ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / RangeDeletionTest . java b / test / unit / org / apache / cassandra / cql3 / RangeDeletionTest . java <nl> new file mode 100644 <nl> index 0000000 . . b31d0c2 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / cql3 / RangeDeletionTest . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + public class RangeDeletionTest extends CQLTester <nl> + { <nl> + @ Test <nl> + public void testCassandra8558 ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b , c ) ) " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 1 , 1 , 1 , 1 ) ; <nl> + flush ( ) ; <nl> + execute ( " DELETE FROM % s WHERE a = ? AND b = ? " , 1 , 1 ) ; <nl> + flush ( ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND c = ? " , 1 , 1 , 1 ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> index 1f235df . . 25e1072 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra . concurrent ; <nl> <nl> import java . lang . management . ManagementFactory ; <nl> + import java . util . List ; <nl> import java . util . concurrent . * ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . log4j . Logger ; <nl> public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean <nl> { <nl> private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; <nl> + private final String mbeanName ; <nl> <nl> public DebuggableThreadPoolExecutor ( String threadPoolName ) <nl> { <nl> @ @ - 51 , 9 + 53 , 10 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> super . prestartAllCoreThreads ( ) ; <nl> <nl> MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + mbeanName = " org . apache . cassandra . concurrent : type = " + threadFactory . id ; <nl> try <nl> { <nl> - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id ) ) ; <nl> + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 84 , 6 + 87 , 33 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> } <nl> } <nl> <nl> + private void unregisterMBean ( ) <nl> + { <nl> + try <nl> + { <nl> + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; <nl> + } <nl> + catch ( Exception ex ) <nl> + { <nl> + / / don ' t let it get in the way , but notify . <nl> + logger _ . error ( ex . getMessage ( ) , ex ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void shutdown ( ) <nl> + { <nl> + unregisterMBean ( ) ; <nl> + super . shutdown ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < Runnable > shutdownNow ( ) <nl> + { <nl> + unregisterMBean ( ) ; <nl> + return super . shutdownNow ( ) ; <nl> + } <nl> + <nl> / * * <nl> * Get the number of completed tasks <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 3b70d17 . . f5d8d35 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 122 , 7 + 122 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> return gossiper _ ; <nl> } <nl> <nl> - private Timer gossipTimer _ = new Timer ( false ) ; <nl> + private Timer gossipTimer _ ; <nl> private InetAddress localEndPoint _ ; <nl> private long aVeryLongTime _ ; <nl> private Random random _ = new Random ( ) ; <nl> @ @ - 144 , 6 + 144 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> <nl> private Gossiper ( ) <nl> { <nl> + gossipTimer _ = new Timer ( false ) ; <nl> aVeryLongTime _ = 259200 * 1000 ; <nl> / * register with the Failure Detector for receiving Failure detector events * / <nl> FailureDetector . instance ( ) . registerFailureDetectionEventListener ( this ) ; <nl> @ @ - 834 , 6 + 835 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> public void stop ( ) <nl> { <nl> gossipTimer _ . cancel ( ) ; <nl> + gossipTimer _ = new Timer ( false ) ; / / makes the Gossiper reentrant . <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 8ff93f6 . . b1ad5ed 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 69 , 6 + 69 , 9 @ @ public class MessagingService <nl> <nl> / * List of sockets we are listening on * / <nl> private static Map < InetAddress , SelectionKey > listenSockets _ = new HashMap < InetAddress , SelectionKey > ( ) ; <nl> + <nl> + / * List of UdpConnections we are listening on * / <nl> + private static Map < InetAddress , UdpConnection > udpConnections _ = new HashMap < InetAddress , UdpConnection > ( ) ; <nl> <nl> / * Lookup table for registering message handlers based on the verb . * / <nl> private static Map < String , IVerbHandler > verbHandlers _ ; <nl> @ @ - 214 , 7 + 217 , 8 @ @ public class MessagingService <nl> try <nl> { <nl> connection . init ( localEp ) ; <nl> - endPoints _ . add ( localEp ) ; <nl> + endPoints _ . add ( localEp ) ; <nl> + udpConnections _ . put ( localEp , connection ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> @ @ - 497 , 7 + 501 , 7 @ @ public class MessagingService <nl> logger _ . info ( " Shutting down . . . " ) ; <nl> synchronized ( MessagingService . class ) <nl> { <nl> - / * Stop listening on any socket * / <nl> + / * Stop listening on any TCP socket * / <nl> for ( SelectionKey skey : listenSockets _ . values ( ) ) <nl> { <nl> skey . cancel ( ) ; <nl> @ @ - 509 , 6 + 513 , 13 @ @ public class MessagingService <nl> } <nl> listenSockets _ . clear ( ) ; <nl> <nl> + / * Stop listening on any UDP ports . * / <nl> + for ( UdpConnection con : udpConnections _ . values ( ) ) <nl> + { <nl> + con . close ( ) ; <nl> + } <nl> + udpConnections _ . clear ( ) ; <nl> + <nl> / * Shutdown the threads in the EventQueue ' s * / <nl> messageDeserializationExecutor _ . shutdownNow ( ) ; <nl> messageDeserializerExecutor _ . shutdownNow ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / net / SelectorManager . java b / src / java / org / apache / cassandra / net / SelectorManager . java <nl> index 7623a05 . . 16511ee 100644 <nl> - - - a / src / java / org / apache / cassandra / net / SelectorManager . java <nl> + + + b / src / java / org / apache / cassandra / net / SelectorManager . java <nl> @ @ - 35 , 6 + 35 , 9 @ @ public class SelectorManager extends Thread <nl> / / workaround JDK select / register bug <nl> Object gate = new Object ( ) ; <nl> <nl> + / / flag to indicate that shutdown has been requested . <nl> + private boolean shutdownRequested = false ; <nl> + <nl> / / The static selector manager which is used by all applications <nl> private static SelectorManager manager ; <nl> <nl> @ @ - 82 , 7 + 85 , 13 @ @ public class SelectorManager extends Thread <nl> selector . wakeup ( ) ; <nl> return channel . register ( selector , ops , handler ) ; <nl> } <nl> - } <nl> + } <nl> + <nl> + / / requests the thread to shutdown . However , it brings no guarantees . Added for testing . <nl> + private void requestShutdown ( ) <nl> + { <nl> + shutdownRequested = true ; <nl> + } <nl> <nl> / * * <nl> * This method starts the socket manager listening for events . It is <nl> @ @ - 102 , 6 + 111 , 11 @ @ public class SelectorManager extends Thread <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> + if ( shutdownRequested ) <nl> + { <nl> + shutdownRequested = false ; <nl> + break ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 145 , 6 + 159 , 22 @ @ public class SelectorManager extends Thread <nl> } <nl> <nl> / * * <nl> + * Intended to reset the singleton as part of testing . <nl> + * / <nl> + static void reset ( ) <nl> + { <nl> + synchronized ( SelectorManager . class ) <nl> + { <nl> + if ( manager ! = null ) <nl> + manager . requestShutdown ( ) ; <nl> + manager = null ; <nl> + if ( udpManager ! = null ) <nl> + udpManager . requestShutdown ( ) ; <nl> + udpManager = null ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Returns the SelectorManager applications should use . <nl> * <nl> * @ return The SelectorManager which applications should use <nl> diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> index 969a2cd . . e3cde8d 100644 <nl> - - - a / test / unit / org / apache / cassandra / CleanupHelper . java <nl> + + + b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . BeforeClass ; <nl> <nl> @ @ - 30 , 6 + 31 , 13 @ @ public class CleanupHelper <nl> private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; <nl> <nl> @ BeforeClass <nl> + public static void cleanupAndLeaveDirs ( ) <nl> + { <nl> + mkdirs ( ) ; <nl> + cleanup ( ) ; <nl> + mkdirs ( ) ; <nl> + } <nl> + <nl> public static void cleanup ( ) <nl> { <nl> / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) <nl> @ @ - 38 , 6 + 46 , 10 @ @ public class CleanupHelper <nl> DatabaseDescriptor . getLogFileLocation ( ) , <nl> } ; <nl> <nl> + / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process <nl> + / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally <nl> + / / put there . <nl> + <nl> for ( String dirName : directoryNames ) <nl> { <nl> File dir = new File ( dirName ) ; <nl> @ @ - 47 , 11 + 59 , 15 @ @ public class CleanupHelper <nl> } <nl> for ( File f : dir . listFiles ( ) ) <nl> { <nl> - if ( ! f . delete ( ) ) { <nl> + if ( ! f . delete ( ) ) <nl> + { <nl> logger . error ( " could not delete " + f ) ; <nl> + } <nl> } <nl> + <nl> + if ( ! dir . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> - } <nl> <nl> / / cleanup data directory which are stored as data directory / table / data files <nl> for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> @ @ - 71 , 8 + 87 , 24 @ @ public class CleanupHelper <nl> } <nl> } <nl> } <nl> + if ( ! tableFile . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> + <nl> + if ( ! dir . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> + } <nl> <nl> + public static void mkdirs ( ) <nl> + { <nl> + try <nl> + { <nl> + DatabaseDescriptor . createAllDirectories ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / net / NetPackageAccessor . java b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java <nl> new file mode 100644 <nl> index 0000000 . . 408bfba <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java <nl> @ @ - 0 , 0 + 1 , 29 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . net ; <nl> + <nl> + / * * <nl> + For accesing package - level members created for the sole purpose of testing . <nl> + * / <nl> + public class NetPackageAccessor <nl> + { <nl> + public static void resetSelectorManager ( ) <nl> + { <nl> + SelectorManager . reset ( ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceTest . java b / test / unit / org / apache / cassandra / service / StorageServiceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0ec9ffe <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / service / StorageServiceTest . java <nl> @ @ - 0 , 0 + 1 , 68 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import org . apache . cassandra . CleanupHelper ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . net . NetPackageAccessor ; <nl> + import org . junit . Test ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + public class StorageServiceTest <nl> + { <nl> + @ Test <nl> + public void testClientOnlyMode ( ) throws IOException <nl> + { <nl> + CleanupHelper . mkdirs ( ) ; <nl> + CleanupHelper . cleanup ( ) ; <nl> + StorageService . instance ( ) . initClient ( ) ; <nl> + <nl> + / / verify that no storage directories were created . <nl> + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> + { <nl> + assertFalse ( new File ( path ) . exists ( ) ) ; <nl> + } <nl> + StorageService . instance ( ) . stopClient ( ) ; <nl> + NetPackageAccessor . resetSelectorManager ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegularMode ( ) throws IOException , InterruptedException <nl> + { <nl> + CleanupHelper . mkdirs ( ) ; <nl> + CleanupHelper . cleanup ( ) ; <nl> + StorageService . instance ( ) . initServer ( ) ; <nl> + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> + { <nl> + / / verify that storage directories are there . <nl> + assertTrue ( new File ( path ) . exists ( ) ) ; <nl> + } <nl> + / / a proper test would be to call decommission here , but decommission ( ) mixes both shutdown and datatransfer <nl> + / / calls . This test is only interested in the shutdown - related items which a properly handled by just <nl> + / / stopping the client . <nl> + / / StorageService . instance ( ) . decommission ( ) ; <nl> + StorageService . instance ( ) . stopClient ( ) ; <nl> + NetPackageAccessor . resetSelectorManager ( ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e070eaf . . 175a78a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 52 , 6 + 52 , 7 @ @ 
 * Log failed host when preparing incremental repair ( CASSANDRA - 8228 ) 
 * Force config client mode in CQLSSTableWriter ( CASSANDRA - 8281 ) 
 Merged from 2 . 0 : 
 + * Fix potentially returning deleted rows with range tombstone ( CASSANDRA - 8558 ) 
 * Check for available disk space before starting a compaction ( CASSANDRA - 8562 ) 
 * Fix DISTINCT queries with LIMITs or paging when some partitions 
 contain only tombstones ( CASSANDRA - 8490 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index 92a9579 . . 4ef554d 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 844 , 7 + 844 , 7 @ @ public class SelectStatement implements CQLStatement 
 / / For composites , if there was preceding component and we ' re computing the end , we must change the last component 
 / / End - Of - Component , otherwise we would be selecting only one record . 
 Composite prefix = builder . build ( ) ; 
 - return Collections . singletonList ( ! prefix . isEmpty ( ) & & eocBound = = Bound . END ? prefix . end ( ) : prefix ) ; 
 + return Collections . singletonList ( ! prefix . isEmpty ( ) & & eocBound = = Bound . END ? prefix . end ( ) : prefix . start ( ) ) ; 
 } 
 if ( r . isSlice ( ) ) 
 { 
 @ @ - 869 , 7 + 869 , 7 @ @ public class SelectStatement implements CQLStatement 
 throw new InvalidRequestException ( String . format ( " Invalid null clustering key part % s " , def . name ) ) ; 
 Composite prefix = builder . buildWith ( val ) ; 
 / / See below for why this 
 - s . add ( ( eocBound = = Bound . END & & builder . remainingCount ( ) > 0 ) ? prefix . end ( ) : prefix ) ; 
 + s . add ( ( eocBound = = Bound . END & & builder . remainingCount ( ) > 0 ) ? prefix . end ( ) : prefix . start ( ) ) ; 
 } 
 return new ArrayList < > ( s ) ; 
 } 
 @ @ - 887 , 7 + 887 , 7 @ @ public class SelectStatement implements CQLStatement 
 / / case using the eoc would be bad , since for the random partitioner we have no guarantee that 
 / / prefix . end ( ) will sort after prefix ( see # 5240 ) . 
 Composite prefix = builder . build ( ) ; 
 - return Collections . singletonList ( eocBound = = Bound . END & & builder . remainingCount ( ) > 0 ? prefix . end ( ) : prefix ) ; 
 + return Collections . singletonList ( eocBound = = Bound . END & & builder . remainingCount ( ) > 0 ? prefix . end ( ) : prefix . start ( ) ) ; 
 } 
 
 private static Composite . EOC eocForRelation ( Operator op ) 
 diff - - git a / src / java / org / apache / cassandra / db / AtomDeserializer . java b / src / java / org / apache / cassandra / db / AtomDeserializer . java 
 index 799ed0e . . a103647 100644 
 - - - a / src / java / org / apache / cassandra / db / AtomDeserializer . java 
 + + + b / src / java / org / apache / cassandra / db / AtomDeserializer . java 
 @ @ - 42 , 6 + 42 , 10 @ @ public class AtomDeserializer 
 private final int expireBefore ; 
 private final Descriptor . Version version ; 
 
 + / / The " flag " for the next name ( which correspond to the " masks " in ColumnSerializer ) if it has been 
 + / / read already , Integer . MIN _ VALUE otherwise ; 
 + private int nextFlags = Integer . MIN _ VALUE ; 
 + 
 public AtomDeserializer ( CellNameType type , DataInput in , ColumnSerializer . Flag flag , int expireBefore , Descriptor . Version version ) 
 { 
 this . type = type ; 
 @ @ - 82 , 17 + 86 , 30 @ @ public class AtomDeserializer 
 } 
 
 / * * 
 + * Returns whether the next atom is a range tombstone or not . 
 + * 
 + * Please note that this should only be called after compareNextTo ( ) has been called . 
 + * / 
 + public boolean nextIsRangeTombstone ( ) throws IOException 
 + { 
 + nextFlags = in . readUnsignedByte ( ) ; 
 + return ( nextFlags & ColumnSerializer . RANGE _ TOMBSTONE _ MASK ) ! = 0 ; 
 + } 
 + 
 + / * * 
 * Returns the next atom . 
 * / 
 public OnDiskAtom readNext ( ) throws IOException 
 { 
 Composite name = nameDeserializer . readNext ( ) ; 
 assert ! name . isEmpty ( ) ; / / This would imply hasNext ( ) hasn ' t been called 
 - int b = in . readUnsignedByte ( ) ; 
 - if ( ( b & ColumnSerializer . RANGE _ TOMBSTONE _ MASK ) ! = 0 ) 
 - return type . rangeTombstoneSerializer ( ) . deserializeBody ( in , name , version ) ; 
 - else 
 - return type . columnSerializer ( ) . deserializeColumnBody ( in , ( CellName ) name , b , flag , expireBefore ) ; 
 + 
 + nextFlags = nextFlags = = Integer . MIN _ VALUE ? in . readUnsignedByte ( ) : nextFlags ; 
 + OnDiskAtom atom = ( nextFlags & ColumnSerializer . RANGE _ TOMBSTONE _ MASK ) ! = 0 
 + ? type . rangeTombstoneSerializer ( ) . deserializeBody ( in , name , version ) 
 + : type . columnSerializer ( ) . deserializeColumnBody ( in , ( CellName ) name , nextFlags , flag , expireBefore ) ; 
 + nextFlags = Integer . MIN _ VALUE ; 
 + return atom ; 
 } 
 
 / * * 
 @ @ - 101 , 10 + 118 , 11 @ @ public class AtomDeserializer 
 public void skipNext ( ) throws IOException 
 { 
 nameDeserializer . skipNext ( ) ; 
 - int b = in . readUnsignedByte ( ) ; 
 - if ( ( b & ColumnSerializer . RANGE _ TOMBSTONE _ MASK ) ! = 0 ) 
 + nextFlags = nextFlags = = Integer . MIN _ VALUE ? in . readUnsignedByte ( ) : nextFlags ; 
 + if ( ( nextFlags & ColumnSerializer . RANGE _ TOMBSTONE _ MASK ) ! = 0 ) 
 type . rangeTombstoneSerializer ( ) . skipBody ( in , version ) ; 
 else 
 - type . columnSerializer ( ) . skipColumnBody ( in , b ) ; 
 + type . columnSerializer ( ) . skipColumnBody ( in , nextFlags ) ; 
 + nextFlags = Integer . MIN _ VALUE ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java b / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java 
 index 7012321 . . 924e9bc 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java 
 @ @ - 290 , 8 + 290 , 13 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA 
 
 / / If we read blocks in reversed disk order , we may have columns from the previous block to handle . 
 / / Note that prefetched keeps columns in reversed disk order . 
 + / / Also note that Range Tombstone handling is a bit tricky , because we may run into range tombstones 
 + / / that cover a slice * after * we ' ve move to the previous slice . To keep it simple , we simply include 
 + / / every RT in prefetched : it ' s only slightly inefficient to do so and there is only so much RT that 
 + / / can be mistakenly added this way . 
 if ( reversed & & ! prefetched . isEmpty ( ) ) 
 { 
 + / / Whether we ' ve found anything to return in prefetched 
 boolean gotSome = false ; 
 / / Avoids some comparison when we know it ' s not useful 
 boolean inSlice = false ; 
 @ @ - 303 , 8 + 308 , 22 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA 
 if ( isColumnBeforeSliceStart ( prefetchedCol ) ) 
 { 
 inSlice = false ; 
 - if ( ! setNextSlice ( ) ) 
 - return false ; 
 + 
 + / / As explained above , we add RT unconditionally 
 + if ( prefetchedCol instanceof RangeTombstone ) 
 + { 
 + blockColumns . addLast ( prefetched . poll ( ) ) ; 
 + gotSome = true ; 
 + continue ; 
 + } 
 + 
 + / / Otherwise , we either move to the next slice or , if we have none ( which can happen 
 + / / because we unwind prefetched no matter what due to RT ) , we skip the cell 
 + if ( hasMoreSlice ( ) ) 
 + setNextSlice ( ) ; 
 + else 
 + prefetched . poll ( ) ; 
 + 
 } 
 / / col is within slice , all columns 
 / / ( we go in reverse , so as soon as we are in a slice , no need to check 
 @ @ - 374 , 6 + 393 , 16 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA 
 Composite start = currentStart ( ) ; 
 if ( ! inSlice & & ! start . isEmpty ( ) & & deserializer . compareNextTo ( start ) < 0 ) 
 { 
 + / / If it ' s a rangeTombstone , then we need to read it and include it unless it ' s end 
 + / / stops before our slice start . 
 + if ( deserializer . nextIsRangeTombstone ( ) ) 
 + { 
 + RangeTombstone rt = ( RangeTombstone ) deserializer . readNext ( ) ; 
 + if ( comparator . compare ( rt . max , start ) > = 0 ) 
 + addColumn ( rt ) ; 
 + continue ; 
 + } 
 + 
 if ( reversed ) 
 { 
 / / the next slice select columns that are before the current one , so it may 
 @ @ - 451 , 7 + 480 , 18 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA 
 Composite start = currentStart ( ) ; 
 if ( ! inSlice & & ! start . isEmpty ( ) & & deserializer . compareNextTo ( start ) < 0 ) 
 { 
 - deserializer . skipNext ( ) ; 
 + / / If it ' s a rangeTombstone , then we need to read it and include it unless it ' s end 
 + / / stops before our slice start . Otherwise , we can skip it . 
 + if ( deserializer . nextIsRangeTombstone ( ) ) 
 + { 
 + RangeTombstone rt = ( RangeTombstone ) deserializer . readNext ( ) ; 
 + if ( comparator . compare ( rt . max , start ) > = 0 ) 
 + addColumn ( rt ) ; 
 + } 
 + else 
 + { 
 + deserializer . skipNext ( ) ; 
 + } 
 continue ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 index 224b63f . . 221f499 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 @ @ - 214 , 16 + 214 , 31 @ @ public class SSTableNamesIterator extends AbstractIterator < OnDiskAtom > implement 
 while ( file . bytesPastMark ( mark ) < indexInfo . width & & nextToFetch ! = null ) 
 { 
 int cmp = deserializer . compareNextTo ( nextToFetch ) ; 
 - if ( cmp = = 0 ) 
 + if ( cmp < 0 ) 
 + { 
 + / / If it ' s a rangeTombstone , then we need to read it and include 
 + / / it if it includes our target . Otherwise , we can skip it . 
 + if ( deserializer . nextIsRangeTombstone ( ) ) 
 + { 
 + RangeTombstone rt = ( RangeTombstone ) deserializer . readNext ( ) ; 
 + if ( comparator . compare ( rt . max , nextToFetch ) > = 0 ) 
 + result . add ( rt ) ; 
 + } 
 + else 
 + { 
 + deserializer . skipNext ( ) ; 
 + } 
 + } 
 + else if ( cmp = = 0 ) 
 { 
 nextToFetch = toFetch . hasNext ( ) ? toFetch . next ( ) : null ; 
 result . add ( deserializer . readNext ( ) ) ; 
 - continue ; 
 } 
 - 
 - deserializer . skipNext ( ) ; 
 - if ( cmp > 0 ) 
 + else 
 + { 
 + deserializer . skipNext ( ) ; 
 nextToFetch = toFetch . hasNext ( ) ? toFetch . next ( ) : null ; 
 + } 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / composites / CellNameType . java b / src / java / org / apache / cassandra / db / composites / CellNameType . java 
 index 1e87296 . . 7b4fd36 100644 
 - - - a / src / java / org / apache / cassandra / db / composites / CellNameType . java 
 + + + b / src / java / org / apache / cassandra / db / composites / CellNameType . java 
 @ @ - 197 , 7 + 197 , 7 @ @ public interface CellNameType extends CType 
 public boolean hasUnprocessed ( ) throws IOException ; 
 
 / * * 
 - * Comparare the next name to read to the provided Composite . 
 + * Compare the next name to read to the provided Composite . 
 * This does not consume the next name . 
 * / 
 public int compareNextTo ( Composite composite ) throws IOException ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / RangeDeletionTest . java b / test / unit / org / apache / cassandra / cql3 / RangeDeletionTest . java 
 new file mode 100644 
 index 0000000 . . b31d0c2 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / cql3 / RangeDeletionTest . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 ; 
 + 
 + import org . junit . Test ; 
 + 
 + public class RangeDeletionTest extends CQLTester 
 + { 
 + @ Test 
 + public void testCassandra8558 ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b , c ) ) " ) ; 
 + 
 + execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 1 , 1 , 1 , 1 ) ; 
 + flush ( ) ; 
 + execute ( " DELETE FROM % s WHERE a = ? AND b = ? " , 1 , 1 ) ; 
 + flush ( ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = ? AND b = ? AND c = ? " , 1 , 1 , 1 ) ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 index 1f235df . . 25e1072 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra . concurrent ; 
 
 import java . lang . management . ManagementFactory ; 
 + import java . util . List ; 
 import java . util . concurrent . * ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . log4j . Logger ; 
 public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean 
 { 
 private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; 
 + private final String mbeanName ; 
 
 public DebuggableThreadPoolExecutor ( String threadPoolName ) 
 { 
 @ @ - 51 , 9 + 53 , 10 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 super . prestartAllCoreThreads ( ) ; 
 
 MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + mbeanName = " org . apache . cassandra . concurrent : type = " + threadFactory . id ; 
 try 
 { 
 - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id ) ) ; 
 + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 84 , 6 + 87 , 33 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 } 
 } 
 
 + private void unregisterMBean ( ) 
 + { 
 + try 
 + { 
 + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; 
 + } 
 + catch ( Exception ex ) 
 + { 
 + / / don ' t let it get in the way , but notify . 
 + logger _ . error ( ex . getMessage ( ) , ex ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void shutdown ( ) 
 + { 
 + unregisterMBean ( ) ; 
 + super . shutdown ( ) ; 
 + } 
 + 
 + @ Override 
 + public List < Runnable > shutdownNow ( ) 
 + { 
 + unregisterMBean ( ) ; 
 + return super . shutdownNow ( ) ; 
 + } 
 + 
 / * * 
 * Get the number of completed tasks 
 * / 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 3b70d17 . . f5d8d35 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 122 , 7 + 122 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 return gossiper _ ; 
 } 
 
 - private Timer gossipTimer _ = new Timer ( false ) ; 
 + private Timer gossipTimer _ ; 
 private InetAddress localEndPoint _ ; 
 private long aVeryLongTime _ ; 
 private Random random _ = new Random ( ) ; 
 @ @ - 144 , 6 + 144 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 
 private Gossiper ( ) 
 { 
 + gossipTimer _ = new Timer ( false ) ; 
 aVeryLongTime _ = 259200 * 1000 ; 
 / * register with the Failure Detector for receiving Failure detector events * / 
 FailureDetector . instance ( ) . registerFailureDetectionEventListener ( this ) ; 
 @ @ - 834 , 6 + 835 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 public void stop ( ) 
 { 
 gossipTimer _ . cancel ( ) ; 
 + gossipTimer _ = new Timer ( false ) ; / / makes the Gossiper reentrant . 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 8ff93f6 . . b1ad5ed 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 69 , 6 + 69 , 9 @ @ public class MessagingService 
 
 / * List of sockets we are listening on * / 
 private static Map < InetAddress , SelectionKey > listenSockets _ = new HashMap < InetAddress , SelectionKey > ( ) ; 
 + 
 + / * List of UdpConnections we are listening on * / 
 + private static Map < InetAddress , UdpConnection > udpConnections _ = new HashMap < InetAddress , UdpConnection > ( ) ; 
 
 / * Lookup table for registering message handlers based on the verb . * / 
 private static Map < String , IVerbHandler > verbHandlers _ ; 
 @ @ - 214 , 7 + 217 , 8 @ @ public class MessagingService 
 try 
 { 
 connection . init ( localEp ) ; 
 - endPoints _ . add ( localEp ) ; 
 + endPoints _ . add ( localEp ) ; 
 + udpConnections _ . put ( localEp , connection ) ; 
 } 
 catch ( IOException e ) 
 { 
 @ @ - 497 , 7 + 501 , 7 @ @ public class MessagingService 
 logger _ . info ( " Shutting down . . . " ) ; 
 synchronized ( MessagingService . class ) 
 { 
 - / * Stop listening on any socket * / 
 + / * Stop listening on any TCP socket * / 
 for ( SelectionKey skey : listenSockets _ . values ( ) ) 
 { 
 skey . cancel ( ) ; 
 @ @ - 509 , 6 + 513 , 13 @ @ public class MessagingService 
 } 
 listenSockets _ . clear ( ) ; 
 
 + / * Stop listening on any UDP ports . * / 
 + for ( UdpConnection con : udpConnections _ . values ( ) ) 
 + { 
 + con . close ( ) ; 
 + } 
 + udpConnections _ . clear ( ) ; 
 + 
 / * Shutdown the threads in the EventQueue ' s * / 
 messageDeserializationExecutor _ . shutdownNow ( ) ; 
 messageDeserializerExecutor _ . shutdownNow ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / net / SelectorManager . java b / src / java / org / apache / cassandra / net / SelectorManager . java 
 index 7623a05 . . 16511ee 100644 
 - - - a / src / java / org / apache / cassandra / net / SelectorManager . java 
 + + + b / src / java / org / apache / cassandra / net / SelectorManager . java 
 @ @ - 35 , 6 + 35 , 9 @ @ public class SelectorManager extends Thread 
 / / workaround JDK select / register bug 
 Object gate = new Object ( ) ; 
 
 + / / flag to indicate that shutdown has been requested . 
 + private boolean shutdownRequested = false ; 
 + 
 / / The static selector manager which is used by all applications 
 private static SelectorManager manager ; 
 
 @ @ - 82 , 7 + 85 , 13 @ @ public class SelectorManager extends Thread 
 selector . wakeup ( ) ; 
 return channel . register ( selector , ops , handler ) ; 
 } 
 - } 
 + } 
 + 
 + / / requests the thread to shutdown . However , it brings no guarantees . Added for testing . 
 + private void requestShutdown ( ) 
 + { 
 + shutdownRequested = true ; 
 + } 
 
 / * * 
 * This method starts the socket manager listening for events . It is 
 @ @ - 102 , 6 + 111 , 11 @ @ public class SelectorManager extends Thread 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 + if ( shutdownRequested ) 
 + { 
 + shutdownRequested = false ; 
 + break ; 
 + } 
 } 
 } 
 
 @ @ - 145 , 6 + 159 , 22 @ @ public class SelectorManager extends Thread 
 } 
 
 / * * 
 + * Intended to reset the singleton as part of testing . 
 + * / 
 + static void reset ( ) 
 + { 
 + synchronized ( SelectorManager . class ) 
 + { 
 + if ( manager ! = null ) 
 + manager . requestShutdown ( ) ; 
 + manager = null ; 
 + if ( udpManager ! = null ) 
 + udpManager . requestShutdown ( ) ; 
 + udpManager = null ; 
 + } 
 + } 
 + 
 + / * * 
 * Returns the SelectorManager applications should use . 
 * 
 * @ return The SelectorManager which applications should use 
 diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java 
 index 969a2cd . . e3cde8d 100644 
 - - - a / test / unit / org / apache / cassandra / CleanupHelper . java 
 + + + b / test / unit / org / apache / cassandra / CleanupHelper . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . BeforeClass ; 
 
 @ @ - 30 , 6 + 31 , 13 @ @ public class CleanupHelper 
 private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; 
 
 @ BeforeClass 
 + public static void cleanupAndLeaveDirs ( ) 
 + { 
 + mkdirs ( ) ; 
 + cleanup ( ) ; 
 + mkdirs ( ) ; 
 + } 
 + 
 public static void cleanup ( ) 
 { 
 / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) 
 @ @ - 38 , 6 + 46 , 10 @ @ public class CleanupHelper 
 DatabaseDescriptor . getLogFileLocation ( ) , 
 } ; 
 
 + / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process 
 + / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally 
 + / / put there . 
 + 
 for ( String dirName : directoryNames ) 
 { 
 File dir = new File ( dirName ) ; 
 @ @ - 47 , 11 + 59 , 15 @ @ public class CleanupHelper 
 } 
 for ( File f : dir . listFiles ( ) ) 
 { 
 - if ( ! f . delete ( ) ) { 
 + if ( ! f . delete ( ) ) 
 + { 
 logger . error ( " could not delete " + f ) ; 
 + } 
 } 
 + 
 + if ( ! dir . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 - } 
 
 / / cleanup data directory which are stored as data directory / table / data files 
 for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 @ @ - 71 , 8 + 87 , 24 @ @ public class CleanupHelper 
 } 
 } 
 } 
 + if ( ! tableFile . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 + 
 + if ( ! dir . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 + } 
 
 + public static void mkdirs ( ) 
 + { 
 + try 
 + { 
 + DatabaseDescriptor . createAllDirectories ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / net / NetPackageAccessor . java b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java 
 new file mode 100644 
 index 0000000 . . 408bfba 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . net ; 
 + 
 + / * * 
 + For accesing package - level members created for the sole purpose of testing . 
 + * / 
 + public class NetPackageAccessor 
 + { 
 + public static void resetSelectorManager ( ) 
 + { 
 + SelectorManager . reset ( ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceTest . java b / test / unit / org / apache / cassandra / service / StorageServiceTest . java 
 new file mode 100644 
 index 0000000 . . 0ec9ffe 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / service / StorageServiceTest . java 
 @ @ - 0 , 0 + 1 , 68 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + 
 + package org . apache . cassandra . service ; 
 + 
 + import org . apache . cassandra . CleanupHelper ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . net . NetPackageAccessor ; 
 + import org . junit . Test ; 
 + import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . assertFalse ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + public class StorageServiceTest 
 + { 
 + @ Test 
 + public void testClientOnlyMode ( ) throws IOException 
 + { 
 + CleanupHelper . mkdirs ( ) ; 
 + CleanupHelper . cleanup ( ) ; 
 + StorageService . instance ( ) . initClient ( ) ; 
 + 
 + / / verify that no storage directories were created . 
 + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 + { 
 + assertFalse ( new File ( path ) . exists ( ) ) ; 
 + } 
 + StorageService . instance ( ) . stopClient ( ) ; 
 + NetPackageAccessor . resetSelectorManager ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegularMode ( ) throws IOException , InterruptedException 
 + { 
 + CleanupHelper . mkdirs ( ) ; 
 + CleanupHelper . cleanup ( ) ; 
 + StorageService . instance ( ) . initServer ( ) ; 
 + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 + { 
 + / / verify that storage directories are there . 
 + assertTrue ( new File ( path ) . exists ( ) ) ; 
 + } 
 + / / a proper test would be to call decommission here , but decommission ( ) mixes both shutdown and datatransfer 
 + / / calls . This test is only interested in the shutdown - related items which a properly handled by just 
 + / / stopping the client . 
 + / / StorageService . instance ( ) . decommission ( ) ; 
 + StorageService . instance ( ) . stopClient ( ) ; 
 + NetPackageAccessor . resetSelectorManager ( ) ; 
 + } 
 + }
