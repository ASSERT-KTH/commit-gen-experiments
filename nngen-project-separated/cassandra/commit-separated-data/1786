BLEU SCORE: 0.11631736348831642

TEST MSG: use long math for long results
GENERATED MSG: Use long math in compaction / compression .

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> index 182cdd2 . . 928541a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java <nl> @ @ - 188 , 7 + 188 , 7 @ @ public class CompressionMetadata <nl> { <nl> try <nl> { <nl> - offsets . setLong ( i * 8 , input . readLong ( ) ) ; <nl> + offsets . setLong ( i * 8L , input . readLong ( ) ) ; <nl> } <nl> catch ( EOFException e ) <nl> { <nl> @ @ - 290 , 7 + 290 , 7 @ @ public class CompressionMetadata <nl> { <nl> if ( count = = maxCount ) <nl> { <nl> - SafeMemory newOffsets = offsets . copy ( ( maxCount * = 2L ) * 8 ) ; <nl> + SafeMemory newOffsets = offsets . copy ( ( maxCount * = 2L ) * 8L ) ; <nl> offsets . close ( ) ; <nl> offsets = newOffsets ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / StreamingHistogram . java b / src / java / org / apache / cassandra / utils / StreamingHistogram . java <nl> index 3f5a715 . . eb884be 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / StreamingHistogram . java <nl> + + + b / src / java / org / apache / cassandra / utils / StreamingHistogram . java <nl> @ @ - 201 , 7 + 201 , 7 @ @ public class StreamingHistogram <nl> Map < Double , Long > entries = histogram . getAsMap ( ) ; <nl> size + = typeSizes . sizeof ( entries . size ( ) ) ; <nl> / / size of entries = size * ( 8 ( double ) + 8 ( long ) ) <nl> - size + = entries . size ( ) * ( 8 + 8 ) ; <nl> + size + = entries . size ( ) * ( 8L + 8L ) ; <nl> return size ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 3ff5451 . . a27ee94 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 256 , 7 + 256 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> catch ( Exception e ) <nl> { <nl> / / this shouldn ' t block anything . <nl> - logger . warn ( e . getMessage ( ) , e ) ; <nl> + logger . warn ( " Failed unregistering mbean : " + mbeanName , e ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 index 182cdd2 . . 928541a 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressionMetadata . java 
 @ @ - 188 , 7 + 188 , 7 @ @ public class CompressionMetadata 
 { 
 try 
 { 
 - offsets . setLong ( i * 8 , input . readLong ( ) ) ; 
 + offsets . setLong ( i * 8L , input . readLong ( ) ) ; 
 } 
 catch ( EOFException e ) 
 { 
 @ @ - 290 , 7 + 290 , 7 @ @ public class CompressionMetadata 
 { 
 if ( count = = maxCount ) 
 { 
 - SafeMemory newOffsets = offsets . copy ( ( maxCount * = 2L ) * 8 ) ; 
 + SafeMemory newOffsets = offsets . copy ( ( maxCount * = 2L ) * 8L ) ; 
 offsets . close ( ) ; 
 offsets = newOffsets ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / StreamingHistogram . java b / src / java / org / apache / cassandra / utils / StreamingHistogram . java 
 index 3f5a715 . . eb884be 100644 
 - - - a / src / java / org / apache / cassandra / utils / StreamingHistogram . java 
 + + + b / src / java / org / apache / cassandra / utils / StreamingHistogram . java 
 @ @ - 201 , 7 + 201 , 7 @ @ public class StreamingHistogram 
 Map < Double , Long > entries = histogram . getAsMap ( ) ; 
 size + = typeSizes . sizeof ( entries . size ( ) ) ; 
 / / size of entries = size * ( 8 ( double ) + 8 ( long ) ) 
 - size + = entries . size ( ) * ( 8 + 8 ) ; 
 + size + = entries . size ( ) * ( 8L + 8L ) ; 
 return size ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 3ff5451 . . a27ee94 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 256 , 7 + 256 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 catch ( Exception e ) 
 { 
 / / this shouldn ' t block anything . 
 - logger . warn ( e . getMessage ( ) , e ) ; 
 + logger . warn ( " Failed unregistering mbean : " + mbeanName , e ) ; 
 } 
 } 

