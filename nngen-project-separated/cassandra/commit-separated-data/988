BLEU SCORE: 1.0

TEST MSG: Only log yaml config once , at startup
GENERATED MSG: Only log yaml config once , at startup

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b77d811 . . 819fa22 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 21 , 6 + 21 , 7 @ @ <nl> properly ( CASSANDRA - 11050 ) <nl> * Fix NPE when using forceRepairRangeAsync without DC ( CASSANDRA - 11239 ) <nl> Merged from 2 . 2 : <nl> + * Only log yaml config once , at startup ( CASSANDRA - 11217 ) <nl> * Reference leak with parallel repairs on the same table ( CASSANDRA - 11215 ) <nl> * Range . compareTo ( ) violates the contract of Comparable ( CASSANDRA - 11216 ) <nl> * Avoid NPE when serializing ErrorMessage with null message ( CASSANDRA - 11167 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index ca5bcea . . 32c0bfa 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 17 , 11 + 17 , 21 @ @ <nl> * / <nl> package org . apache . cassandra . config ; <nl> <nl> + import java . lang . reflect . Field ; <nl> + import java . lang . reflect . Modifier ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> import java . util . Set ; <nl> + import java . util . TreeMap ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> + import com . google . common . base . Joiner ; <nl> import com . google . common . collect . Sets ; <nl> <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> import org . apache . cassandra . config . EncryptionOptions . ClientEncryptionOptions ; <nl> import org . apache . cassandra . config . EncryptionOptions . ServerEncryptionOptions ; <nl> <nl> @ @ - 32 , 6 + 42 , 8 @ @ import org . apache . cassandra . config . EncryptionOptions . ServerEncryptionOptions ; <nl> * / <nl> public class Config <nl> { <nl> + private static final Logger logger = LoggerFactory . getLogger ( Config . class ) ; <nl> + <nl> / * <nl> * Prefix for Java properties for internal Cassandra configuration options <nl> * / <nl> @ @ - 383 , 4 + 395 , 40 @ @ public class Config <nl> ssd , <nl> spinning <nl> } <nl> + <nl> + private static final List < String > SENSITIVE _ KEYS = new ArrayList < String > ( ) { { <nl> + add ( " client _ encryption _ options " ) ; <nl> + add ( " server _ encryption _ options " ) ; <nl> + } } ; <nl> + public void log ( ) <nl> + { <nl> + Map < String , String > configMap = new TreeMap < > ( ) ; <nl> + for ( Field field : getClass ( ) . getFields ( ) ) <nl> + { <nl> + / / ignore the constants <nl> + if ( Modifier . isFinal ( field . getModifiers ( ) ) ) <nl> + continue ; <nl> + <nl> + String name = field . getName ( ) ; <nl> + if ( SENSITIVE _ KEYS . contains ( name ) ) <nl> + { <nl> + configMap . put ( name , " < REDACTED > " ) ; <nl> + continue ; <nl> + } <nl> + <nl> + String value ; <nl> + try <nl> + { <nl> + / / Field . get ( ) can throw NPE if the value of the field is null <nl> + value = field . get ( this ) . toString ( ) ; <nl> + } <nl> + catch ( NullPointerException | IllegalAccessException npe ) <nl> + { <nl> + value = " null " ; <nl> + } <nl> + configMap . put ( name , value ) ; <nl> + } <nl> + <nl> + logger . info ( " Node configuration : [ " + Joiner . on ( " ; " ) . join ( configMap . entrySet ( ) ) + " ] " ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index c903775 . . 7bcfb97 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 53 , 7 + 53 , 6 @ @ import org . apache . cassandra . scheduler . IRequestScheduler ; <nl> import org . apache . cassandra . scheduler . NoScheduler ; <nl> import org . apache . cassandra . service . CacheService ; <nl> import org . apache . cassandra . thrift . ThriftServer ; <nl> - import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . memory . * ; <nl> <nl> @ @ - 101 , 6 + 100 , 7 @ @ public class DatabaseDescriptor <nl> <nl> private static String localDC ; <nl> private static Comparator < InetAddress > localComparator ; <nl> + private static boolean hasLoggedConfig ; <nl> <nl> public static void forceStaticInitialization ( ) { } <nl> static <nl> @ @ - 132 , 7 + 132 , 15 @ @ public class DatabaseDescriptor <nl> ConfigurationLoader loader = loaderClass = = null <nl> ? new YamlConfigurationLoader ( ) <nl> : FBUtilities . < ConfigurationLoader > construct ( loaderClass , " configuration loading " ) ; <nl> - return loader . loadConfig ( ) ; <nl> + Config config = loader . loadConfig ( ) ; <nl> + <nl> + if ( ! hasLoggedConfig ) <nl> + { <nl> + hasLoggedConfig = true ; <nl> + config . log ( ) ; <nl> + } <nl> + <nl> + return config ; <nl> } <nl> <nl> private static InetAddress getNetworkInterfaceAddress ( String intf , String configName , boolean preferIPv6 ) throws ConfigurationException <nl> diff - - git a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> index 917eaeb . . 435377c 100644 <nl> - - - a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> + + + b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> @ @ - 27 , 9 + 27 , 7 @ @ import java . util . HashSet ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> - import java . util . TreeMap ; <nl> <nl> - import com . google . common . base . Joiner ; <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Sets ; <nl> @ @ - 113 , 8 + 111 , 6 @ @ public class YamlConfigurationLoader implements ConfigurationLoader <nl> throw new AssertionError ( e ) ; <nl> } <nl> <nl> - logConfig ( configBytes ) ; <nl> - <nl> Constructor constructor = new CustomConstructor ( Config . class ) ; <nl> MissingPropertiesChecker propertiesChecker = new MissingPropertiesChecker ( ) ; <nl> constructor . setPropertyUtils ( propertiesChecker ) ; <nl> @ @ - 165 , 20 + 161 , 6 @ @ public class YamlConfigurationLoader implements ConfigurationLoader <nl> } <nl> } <nl> <nl> - private void logConfig ( byte [ ] configBytes ) <nl> - { <nl> - Map < Object , Object > configMap = new TreeMap < > ( ( Map < ? , ? > ) new Yaml ( ) . load ( new ByteArrayInputStream ( configBytes ) ) ) ; <nl> - / / these keys contain passwords , don ' t log them <nl> - for ( String sensitiveKey : new String [ ] { " client _ encryption _ options " , " server _ encryption _ options " } ) <nl> - { <nl> - if ( configMap . containsKey ( sensitiveKey ) ) <nl> - { <nl> - configMap . put ( sensitiveKey , " < REDACTED > " ) ; <nl> - } <nl> - } <nl> - logger . info ( " Node configuration : [ { } ] " , Joiner . on ( " ; " ) . join ( configMap . entrySet ( ) ) ) ; <nl> - } <nl> - <nl> private static class MissingPropertiesChecker extends PropertyUtils <nl> { <nl> private final Set < String > missingProperties = new HashSet < > ( ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b77d811 . . 819fa22 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 21 , 6 + 21 , 7 @ @ 
 properly ( CASSANDRA - 11050 ) 
 * Fix NPE when using forceRepairRangeAsync without DC ( CASSANDRA - 11239 ) 
 Merged from 2 . 2 : 
 + * Only log yaml config once , at startup ( CASSANDRA - 11217 ) 
 * Reference leak with parallel repairs on the same table ( CASSANDRA - 11215 ) 
 * Range . compareTo ( ) violates the contract of Comparable ( CASSANDRA - 11216 ) 
 * Avoid NPE when serializing ErrorMessage with null message ( CASSANDRA - 11167 ) 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index ca5bcea . . 32c0bfa 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 17 , 11 + 17 , 21 @ @ 
 * / 
 package org . apache . cassandra . config ; 
 
 + import java . lang . reflect . Field ; 
 + import java . lang . reflect . Modifier ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 import java . util . Set ; 
 + import java . util . TreeMap ; 
 import java . util . concurrent . TimeUnit ; 
 
 + import com . google . common . base . Joiner ; 
 import com . google . common . collect . Sets ; 
 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 import org . apache . cassandra . config . EncryptionOptions . ClientEncryptionOptions ; 
 import org . apache . cassandra . config . EncryptionOptions . ServerEncryptionOptions ; 
 
 @ @ - 32 , 6 + 42 , 8 @ @ import org . apache . cassandra . config . EncryptionOptions . ServerEncryptionOptions ; 
 * / 
 public class Config 
 { 
 + private static final Logger logger = LoggerFactory . getLogger ( Config . class ) ; 
 + 
 / * 
 * Prefix for Java properties for internal Cassandra configuration options 
 * / 
 @ @ - 383 , 4 + 395 , 40 @ @ public class Config 
 ssd , 
 spinning 
 } 
 + 
 + private static final List < String > SENSITIVE _ KEYS = new ArrayList < String > ( ) { { 
 + add ( " client _ encryption _ options " ) ; 
 + add ( " server _ encryption _ options " ) ; 
 + } } ; 
 + public void log ( ) 
 + { 
 + Map < String , String > configMap = new TreeMap < > ( ) ; 
 + for ( Field field : getClass ( ) . getFields ( ) ) 
 + { 
 + / / ignore the constants 
 + if ( Modifier . isFinal ( field . getModifiers ( ) ) ) 
 + continue ; 
 + 
 + String name = field . getName ( ) ; 
 + if ( SENSITIVE _ KEYS . contains ( name ) ) 
 + { 
 + configMap . put ( name , " < REDACTED > " ) ; 
 + continue ; 
 + } 
 + 
 + String value ; 
 + try 
 + { 
 + / / Field . get ( ) can throw NPE if the value of the field is null 
 + value = field . get ( this ) . toString ( ) ; 
 + } 
 + catch ( NullPointerException | IllegalAccessException npe ) 
 + { 
 + value = " null " ; 
 + } 
 + configMap . put ( name , value ) ; 
 + } 
 + 
 + logger . info ( " Node configuration : [ " + Joiner . on ( " ; " ) . join ( configMap . entrySet ( ) ) + " ] " ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index c903775 . . 7bcfb97 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 53 , 7 + 53 , 6 @ @ import org . apache . cassandra . scheduler . IRequestScheduler ; 
 import org . apache . cassandra . scheduler . NoScheduler ; 
 import org . apache . cassandra . service . CacheService ; 
 import org . apache . cassandra . thrift . ThriftServer ; 
 - import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . memory . * ; 
 
 @ @ - 101 , 6 + 100 , 7 @ @ public class DatabaseDescriptor 
 
 private static String localDC ; 
 private static Comparator < InetAddress > localComparator ; 
 + private static boolean hasLoggedConfig ; 
 
 public static void forceStaticInitialization ( ) { } 
 static 
 @ @ - 132 , 7 + 132 , 15 @ @ public class DatabaseDescriptor 
 ConfigurationLoader loader = loaderClass = = null 
 ? new YamlConfigurationLoader ( ) 
 : FBUtilities . < ConfigurationLoader > construct ( loaderClass , " configuration loading " ) ; 
 - return loader . loadConfig ( ) ; 
 + Config config = loader . loadConfig ( ) ; 
 + 
 + if ( ! hasLoggedConfig ) 
 + { 
 + hasLoggedConfig = true ; 
 + config . log ( ) ; 
 + } 
 + 
 + return config ; 
 } 
 
 private static InetAddress getNetworkInterfaceAddress ( String intf , String configName , boolean preferIPv6 ) throws ConfigurationException 
 diff - - git a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 index 917eaeb . . 435377c 100644 
 - - - a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 + + + b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 @ @ - 27 , 9 + 27 , 7 @ @ import java . util . HashSet ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 - import java . util . TreeMap ; 
 
 - import com . google . common . base . Joiner ; 
 import com . google . common . collect . Lists ; 
 import com . google . common . collect . Maps ; 
 import com . google . common . collect . Sets ; 
 @ @ - 113 , 8 + 111 , 6 @ @ public class YamlConfigurationLoader implements ConfigurationLoader 
 throw new AssertionError ( e ) ; 
 } 
 
 - logConfig ( configBytes ) ; 
 - 
 Constructor constructor = new CustomConstructor ( Config . class ) ; 
 MissingPropertiesChecker propertiesChecker = new MissingPropertiesChecker ( ) ; 
 constructor . setPropertyUtils ( propertiesChecker ) ; 
 @ @ - 165 , 20 + 161 , 6 @ @ public class YamlConfigurationLoader implements ConfigurationLoader 
 } 
 } 
 
 - private void logConfig ( byte [ ] configBytes ) 
 - { 
 - Map < Object , Object > configMap = new TreeMap < > ( ( Map < ? , ? > ) new Yaml ( ) . load ( new ByteArrayInputStream ( configBytes ) ) ) ; 
 - / / these keys contain passwords , don ' t log them 
 - for ( String sensitiveKey : new String [ ] { " client _ encryption _ options " , " server _ encryption _ options " } ) 
 - { 
 - if ( configMap . containsKey ( sensitiveKey ) ) 
 - { 
 - configMap . put ( sensitiveKey , " < REDACTED > " ) ; 
 - } 
 - } 
 - logger . info ( " Node configuration : [ { } ] " , Joiner . on ( " ; " ) . join ( configMap . entrySet ( ) ) ) ; 
 - } 
 - 
 private static class MissingPropertiesChecker extends PropertyUtils 
 { 
 private final Set < String > missingProperties = new HashSet < > ( ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
