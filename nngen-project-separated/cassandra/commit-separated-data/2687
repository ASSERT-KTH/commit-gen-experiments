BLEU SCORE: 0.05341087579952926

TEST MSG: Replace differencers set with AtomicInteger
GENERATED MSG: streaming logging improvement

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / repair / RepairJob . java b / src / java / org / apache / cassandra / repair / RepairJob . java <nl> index 475d7f7 . . 13fe511 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / RepairJob . java <nl> + + + b / src / java / org / apache / cassandra / repair / RepairJob . java <nl> @ @ - 19 , 14 + 19 , 13 @ @ package org . apache . cassandra . repair ; <nl> <nl> import java . net . InetAddress ; <nl> import java . util . * ; <nl> - import java . util . concurrent . Executors ; <nl> + import java . util . concurrent . atomic . AtomicInteger ; <nl> import java . util . concurrent . locks . Condition ; <nl> <nl> import com . google . common . util . concurrent . * ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> @ @ - 51 , 12 + 50 , 13 @ @ public class RepairJob <nl> private final List < TreeResponse > trees = new ArrayList < > ( ) ; <nl> / / once all responses are received , each tree is compared with each other , and differencer tasks <nl> / / are submitted . the job is done when all differencers are complete . <nl> - private final Set < Differencer > differencers = new HashSet < > ( ) ; <nl> private final ListeningExecutorService taskExecutor ; <nl> private final Condition requestsSent = new SimpleCondition ( ) ; <nl> private int gcBefore = - 1 ; <nl> <nl> private volatile boolean failed = false ; <nl> + / * Count down as sync completes * / <nl> + private AtomicInteger waitForSync ; <nl> <nl> / * * <nl> * Create repair job to run on specific columnfamily <nl> @ @ - 172 , 7 + 172 , 7 @ @ public class RepairJob <nl> public void submitDifferencers ( ) <nl> { <nl> assert ! failed ; <nl> - <nl> + List < Differencer > differencers = new ArrayList < > ( ) ; <nl> / / We need to difference all trees one against another <nl> for ( int i = 0 ; i < trees . size ( ) - 1 ; + + i ) <nl> { <nl> @ @ - 183 , 21 + 183 , 20 @ @ public class RepairJob <nl> Differencer differencer = new Differencer ( desc , r1 , r2 ) ; <nl> differencers . add ( differencer ) ; <nl> logger . debug ( " Queueing comparison { } " , differencer ) ; <nl> - taskExecutor . submit ( differencer ) ; <nl> } <nl> } <nl> + waitForSync = new AtomicInteger ( differencers . size ( ) ) ; <nl> + for ( Differencer differencer : differencers ) <nl> + taskExecutor . submit ( differencer ) ; <nl> + <nl> trees . clear ( ) ; / / allows gc to do its thing <nl> } <nl> <nl> / * * <nl> * @ return true if the given node pair was the last remaining <nl> * / <nl> - synchronized boolean completedSynchronization ( NodePair nodes , boolean success ) <nl> + boolean completedSynchronization ( ) <nl> { <nl> - if ( ! success ) <nl> - failed = true ; <nl> - Differencer completed = new Differencer ( desc , new TreeResponse ( nodes . endpoint1 , null ) , new TreeResponse ( nodes . endpoint2 , null ) ) ; <nl> - differencers . remove ( completed ) ; <nl> - return differencers . size ( ) = = 0 ; <nl> + return waitForSync . decrementAndGet ( ) = = 0 ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / repair / RepairSession . java b / src / java / org / apache / cassandra / repair / RepairSession . java <nl> index 7ffe87f . . ea31ff3 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / RepairSession . java <nl> + + + b / src / java / org / apache / cassandra / repair / RepairSession . java <nl> @ @ - 211 , 7 + 211 , 7 @ @ public class RepairSession extends WrappedRunnable implements IEndpointStateChan <nl> <nl> logger . debug ( String . format ( " [ repair # % s ] Repair completed between % s and % s on % s " , getId ( ) , nodes . endpoint1 , nodes . endpoint2 , desc . columnFamily ) ) ; <nl> <nl> - if ( job . completedSynchronization ( nodes , success ) ) <nl> + if ( job . completedSynchronization ( ) ) <nl> { <nl> RepairJob completedJob = syncingJobs . remove ( job . desc . columnFamily ) ; <nl> String remaining = syncingJobs . size ( ) = = 0 ? " " : String . format ( " ( % d remaining column family to sync for this session ) " , syncingJobs . size ( ) ) ;
NEAREST DIFF (one line): diff - - git a / NEWS . txt b / NEWS . txt <nl> index dc3d51a . . 0acbc76 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 22 , 9 + 22 , 9 @ @ Upgrading <nl> timestamps are microseconds - since - epoch . Do not use these <nl> features if you are using client - specified timestamps with some <nl> other source . <nl> - - Upgrading is ONLY supported from Cassandra 1 . 2 . 6 or later . This <nl> + - Upgrading is ONLY supported from Cassandra 1 . 2 . 7 or later . This <nl> goes for sstable compatibility as well as network . When <nl> - upgrading from an earlier release , upgrade to 1 . 2 . 6 first and <nl> + upgrading from an earlier release , upgrade to 1 . 2 . 7 first and <nl> run upgradesstables before proceeding to 2 . 0 . <nl> - Replication and strategy options do not accept unknown options anymore . <nl> This was already the case for CQL3 in 1 . 2 but this is now the case for

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / repair / RepairJob . java b / src / java / org / apache / cassandra / repair / RepairJob . java 
 index 475d7f7 . . 13fe511 100644 
 - - - a / src / java / org / apache / cassandra / repair / RepairJob . java 
 + + + b / src / java / org / apache / cassandra / repair / RepairJob . java 
 @ @ - 19 , 14 + 19 , 13 @ @ package org . apache . cassandra . repair ; 
 
 import java . net . InetAddress ; 
 import java . util . * ; 
 - import java . util . concurrent . Executors ; 
 + import java . util . concurrent . atomic . AtomicInteger ; 
 import java . util . concurrent . locks . Condition ; 
 
 import com . google . common . util . concurrent . * ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 import org . apache . cassandra . db . Keyspace ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 @ @ - 51 , 12 + 50 , 13 @ @ public class RepairJob 
 private final List < TreeResponse > trees = new ArrayList < > ( ) ; 
 / / once all responses are received , each tree is compared with each other , and differencer tasks 
 / / are submitted . the job is done when all differencers are complete . 
 - private final Set < Differencer > differencers = new HashSet < > ( ) ; 
 private final ListeningExecutorService taskExecutor ; 
 private final Condition requestsSent = new SimpleCondition ( ) ; 
 private int gcBefore = - 1 ; 
 
 private volatile boolean failed = false ; 
 + / * Count down as sync completes * / 
 + private AtomicInteger waitForSync ; 
 
 / * * 
 * Create repair job to run on specific columnfamily 
 @ @ - 172 , 7 + 172 , 7 @ @ public class RepairJob 
 public void submitDifferencers ( ) 
 { 
 assert ! failed ; 
 - 
 + List < Differencer > differencers = new ArrayList < > ( ) ; 
 / / We need to difference all trees one against another 
 for ( int i = 0 ; i < trees . size ( ) - 1 ; + + i ) 
 { 
 @ @ - 183 , 21 + 183 , 20 @ @ public class RepairJob 
 Differencer differencer = new Differencer ( desc , r1 , r2 ) ; 
 differencers . add ( differencer ) ; 
 logger . debug ( " Queueing comparison { } " , differencer ) ; 
 - taskExecutor . submit ( differencer ) ; 
 } 
 } 
 + waitForSync = new AtomicInteger ( differencers . size ( ) ) ; 
 + for ( Differencer differencer : differencers ) 
 + taskExecutor . submit ( differencer ) ; 
 + 
 trees . clear ( ) ; / / allows gc to do its thing 
 } 
 
 / * * 
 * @ return true if the given node pair was the last remaining 
 * / 
 - synchronized boolean completedSynchronization ( NodePair nodes , boolean success ) 
 + boolean completedSynchronization ( ) 
 { 
 - if ( ! success ) 
 - failed = true ; 
 - Differencer completed = new Differencer ( desc , new TreeResponse ( nodes . endpoint1 , null ) , new TreeResponse ( nodes . endpoint2 , null ) ) ; 
 - differencers . remove ( completed ) ; 
 - return differencers . size ( ) = = 0 ; 
 + return waitForSync . decrementAndGet ( ) = = 0 ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / repair / RepairSession . java b / src / java / org / apache / cassandra / repair / RepairSession . java 
 index 7ffe87f . . ea31ff3 100644 
 - - - a / src / java / org / apache / cassandra / repair / RepairSession . java 
 + + + b / src / java / org / apache / cassandra / repair / RepairSession . java 
 @ @ - 211 , 7 + 211 , 7 @ @ public class RepairSession extends WrappedRunnable implements IEndpointStateChan 
 
 logger . debug ( String . format ( " [ repair # % s ] Repair completed between % s and % s on % s " , getId ( ) , nodes . endpoint1 , nodes . endpoint2 , desc . columnFamily ) ) ; 
 
 - if ( job . completedSynchronization ( nodes , success ) ) 
 + if ( job . completedSynchronization ( ) ) 
 { 
 RepairJob completedJob = syncingJobs . remove ( job . desc . columnFamily ) ; 
 String remaining = syncingJobs . size ( ) = = 0 ? " " : String . format ( " ( % d remaining column family to sync for this session ) " , syncingJobs . size ( ) ) ;

NEAREST DIFF:
diff - - git a / NEWS . txt b / NEWS . txt 
 index dc3d51a . . 0acbc76 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 22 , 9 + 22 , 9 @ @ Upgrading 
 timestamps are microseconds - since - epoch . Do not use these 
 features if you are using client - specified timestamps with some 
 other source . 
 - - Upgrading is ONLY supported from Cassandra 1 . 2 . 6 or later . This 
 + - Upgrading is ONLY supported from Cassandra 1 . 2 . 7 or later . This 
 goes for sstable compatibility as well as network . When 
 - upgrading from an earlier release , upgrade to 1 . 2 . 6 first and 
 + upgrading from an earlier release , upgrade to 1 . 2 . 7 first and 
 run upgradesstables before proceeding to 2 . 0 . 
 - Replication and strategy options do not accept unknown options anymore . 
 This was already the case for CQL3 in 1 . 2 but this is now the case for
