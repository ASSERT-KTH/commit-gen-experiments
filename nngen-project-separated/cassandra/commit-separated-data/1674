BLEU SCORE: 0.08334503290277118

TEST MSG: Add CASSANDRA - 9195 unit tests
GENERATED MSG: Further refining CommitLog * restart for Windows CI unit tests

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java <nl> index 602cf94 . . 91f3179 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java <nl> @ @ - 56 , 7 + 56 , 7 @ @ public class CommitLogArchiver <nl> final String archiveCommand ; <nl> final String restoreCommand ; <nl> final String restoreDirectories ; <nl> - public final long restorePointInTime ; <nl> + public long restorePointInTime ; <nl> public final TimeUnit precision ; <nl> <nl> public CommitLogArchiver ( ) <nl> diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java b / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java <nl> index 1f7d388 . . 817b8e9 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java <nl> @ @ - 19 , 15 + 19 , 14 @ @ <nl> package org . apache . cassandra . db ; <nl> <nl> import static org . apache . cassandra . Util . column ; <nl> - import static org . junit . Assert . assertNotNull ; <nl> - import static org . junit . Assert . assertNull ; <nl> + import static org . junit . Assert . * ; <nl> <nl> import java . io . IOException ; <nl> + import org . junit . Test ; <nl> <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> - import org . junit . Test ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> / * * <nl> @ @ - 35 , 46 + 34 , 150 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; <nl> * / <nl> public class RecoveryManagerTruncateTest extends SchemaLoader <nl> { <nl> - 	 @ Test <nl> - 	 public void testTruncate ( ) throws IOException <nl> - 	 { <nl> - 	 	 Keyspace keyspace = Keyspace . open ( " Keyspace1 " ) ; <nl> - 	 	 ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( " Standard1 " ) ; <nl> + @ Test <nl> + public void testTruncate ( ) throws IOException <nl> + { <nl> + Keyspace keyspace = Keyspace . open ( " Keyspace1 " ) ; <nl> + ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( " Standard1 " ) ; <nl> <nl> - 	 	 Mutation rm ; <nl> - 	 	 ColumnFamily cf ; <nl> + Mutation rm ; <nl> + ColumnFamily cf ; <nl> <nl> - 	 	 / / add a single cell <nl> + / / add a single cell <nl> cf = ArrayBackedSortedColumns . factory . create ( " Keyspace1 " , " Standard1 " ) ; <nl> - 	 	 cf . addColumn ( column ( " col1 " , " val1 " , 1L ) ) ; <nl> + cf . addColumn ( column ( " col1 " , " val1 " , 1L ) ) ; <nl> rm = new Mutation ( " Keyspace1 " , ByteBufferUtil . bytes ( " keymulti " ) , cf ) ; <nl> - 	 	 rm . apply ( ) ; <nl> + rm . apply ( ) ; <nl> + long time = System . currentTimeMillis ( ) ; <nl> <nl> - 	 	 / / Make sure data was written <nl> - 	 	 assertNotNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col1 " ) ) ; <nl> + / / Make sure data was written <nl> + assertNotNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col1 " ) ) ; <nl> <nl> - 	 	 / / and now truncate it <nl> - 	 	 cfs . truncateBlocking ( ) ; <nl> + / / and now truncate it <nl> + cfs . truncateBlocking ( ) ; <nl> CommitLog . instance . resetUnsafe ( ) ; <nl> - 	 	 CommitLog . instance . recover ( ) ; <nl> - <nl> - 	 	 / / and validate truncation . <nl> - 	 	 assertNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col1 " ) ) ; <nl> - 	 } <nl> - <nl> - 	 private Cell getFromTable ( Keyspace keyspace , String cfName , String keyName , String columnName ) <nl> - 	 { <nl> - 	 	 ColumnFamily cf ; <nl> - 	 	 ColumnFamilyStore cfStore = keyspace . getColumnFamilyStore ( cfName ) ; <nl> - 	 	 if ( cfStore = = null ) <nl> - 	 	 { <nl> - 	 	 	 return null ; <nl> - 	 	 } <nl> - 	 	 cf = cfStore . getColumnFamily ( Util . namesQueryFilter ( cfStore , Util . dk ( keyName ) , columnName ) ) ; <nl> - 	 	 if ( cf = = null ) <nl> - 	 	 { <nl> - 	 	 	 return null ; <nl> - 	 	 } <nl> - 	 	 return cf . getColumn ( Util . cellname ( columnName ) ) ; <nl> - 	 } <nl> + CommitLog . instance . recover ( ) ; <nl> + <nl> + / / and validate truncation . <nl> + assertNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col1 " ) ) ; <nl> + assertTrue ( SystemKeyspace . getTruncatedAt ( cfs . metadata . cfId ) > time ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTruncatePointInTime ( ) throws IOException <nl> + { <nl> + Keyspace keyspace = Keyspace . open ( " Keyspace1 " ) ; <nl> + ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( " Standard1 " ) ; <nl> + <nl> + Mutation rm ; <nl> + ColumnFamily cf ; <nl> + <nl> + / / add a single cell <nl> + cf = ArrayBackedSortedColumns . factory . create ( " Keyspace1 " , " Standard1 " ) ; <nl> + cf . addColumn ( column ( " col2 " , " val1 " , 1L ) ) ; <nl> + rm = new Mutation ( " Keyspace1 " , ByteBufferUtil . bytes ( " keymulti " ) , cf ) ; <nl> + rm . apply ( ) ; <nl> + <nl> + / / Make sure data was written <nl> + long time = System . currentTimeMillis ( ) ; <nl> + assertNotNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col2 " ) ) ; <nl> + <nl> + / / and now truncate it <nl> + cfs . truncateBlocking ( ) ; <nl> + <nl> + / / verify truncation <nl> + assertNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col2 " ) ) ; <nl> + <nl> + try <nl> + { <nl> + / / Restore to point in time . <nl> + CommitLog . instance . archiver . restorePointInTime = time ; <nl> + CommitLog . instance . resetUnsafe ( ) ; <nl> + CommitLog . instance . recover ( ) ; <nl> + } <nl> + finally <nl> + { <nl> + CommitLog . instance . archiver . restorePointInTime = Long . MAX _ VALUE ; <nl> + } <nl> + <nl> + / / Validate pre - truncation data was restored . <nl> + assertNotNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col2 " ) ) ; <nl> + / / And that we don ' t have a truncation record after restore time . <nl> + assertFalse ( SystemKeyspace . getTruncatedAt ( cfs . metadata . cfId ) > time ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTruncatePointInTimeReplayList ( ) throws IOException <nl> + { <nl> + Keyspace keyspace = Keyspace . open ( " Keyspace1 " ) ; <nl> + ColumnFamilyStore cfs1 = keyspace . getColumnFamilyStore ( " Standard1 " ) ; <nl> + ColumnFamilyStore cfs2 = keyspace . getColumnFamilyStore ( " Standard2 " ) ; <nl> + <nl> + Mutation rm ; <nl> + ColumnFamily cf ; <nl> + <nl> + / / add a single cell <nl> + cf = ArrayBackedSortedColumns . factory . create ( " Keyspace1 " , " Standard1 " ) ; <nl> + cf . addColumn ( column ( " col3 " , " val1 " , 1L ) ) ; <nl> + rm = new Mutation ( " Keyspace1 " , ByteBufferUtil . bytes ( " keymulti " ) , cf ) ; <nl> + rm . apply ( ) ; <nl> + <nl> + / / add a single cell <nl> + cf = ArrayBackedSortedColumns . factory . create ( " Keyspace1 " , " Standard2 " ) ; <nl> + cf . addColumn ( column ( " col4 " , " val1 " , 1L ) ) ; <nl> + rm = new Mutation ( " Keyspace1 " , ByteBufferUtil . bytes ( " keymulti " ) , cf ) ; <nl> + rm . apply ( ) ; <nl> + <nl> + / / Make sure data was written <nl> + long time = System . currentTimeMillis ( ) ; <nl> + assertNotNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col3 " ) ) ; <nl> + assertNotNull ( getFromTable ( keyspace , " Standard2 " , " keymulti " , " col4 " ) ) ; <nl> + <nl> + / / and now truncate it <nl> + cfs1 . truncateBlocking ( ) ; <nl> + cfs2 . truncateBlocking ( ) ; <nl> + <nl> + / / verify truncation <nl> + assertNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col3 " ) ) ; <nl> + assertNull ( getFromTable ( keyspace , " Standard2 " , " keymulti " , " col4 " ) ) ; <nl> + <nl> + try <nl> + { <nl> + / / Restore to point in time . <nl> + CommitLog . instance . archiver . restorePointInTime = time ; <nl> + System . setProperty ( " cassandra . replayList " , " Keyspace1 . Standard1 " ) ; <nl> + CommitLog . instance . resetUnsafe ( ) ; <nl> + CommitLog . instance . recover ( ) ; <nl> + } <nl> + finally <nl> + { <nl> + CommitLog . instance . archiver . restorePointInTime = Long . MAX _ VALUE ; <nl> + System . clearProperty ( " cassandra . replayList " ) ; <nl> + } <nl> + <nl> + / / Validate pre - truncation data was restored . <nl> + assertNotNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col3 " ) ) ; <nl> + / / But only on the replayed table . <nl> + assertNull ( getFromTable ( keyspace , " Standard2 " , " keymulti " , " col4 " ) ) ; <nl> + <nl> + / / And that we have the correct truncation records . <nl> + assertFalse ( SystemKeyspace . getTruncatedAt ( cfs1 . metadata . cfId ) > time ) ; <nl> + assertTrue ( SystemKeyspace . getTruncatedAt ( cfs2 . metadata . cfId ) > time ) ; <nl> + } <nl> + <nl> + private Cell getFromTable ( Keyspace keyspace , String cfName , String keyName , String columnName ) <nl> + { <nl> + ColumnFamily cf ; <nl> + ColumnFamilyStore cfStore = keyspace . getColumnFamilyStore ( cfName ) ; <nl> + if ( cfStore = = null ) <nl> + { <nl> + return null ; <nl> + } <nl> + cf = cfStore . getColumnFamily ( Util . namesQueryFilter ( cfStore , Util . dk ( keyName ) , columnName ) ) ; <nl> + if ( cf = = null ) <nl> + { <nl> + return null ; <nl> + } <nl> + return cf . getColumn ( Util . cellname ( columnName ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java 
 index 602cf94 . . 91f3179 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java 
 @ @ - 56 , 7 + 56 , 7 @ @ public class CommitLogArchiver 
 final String archiveCommand ; 
 final String restoreCommand ; 
 final String restoreDirectories ; 
 - public final long restorePointInTime ; 
 + public long restorePointInTime ; 
 public final TimeUnit precision ; 
 
 public CommitLogArchiver ( ) 
 diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java b / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java 
 index 1f7d388 . . 817b8e9 100644 
 - - - a / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java 
 @ @ - 19 , 15 + 19 , 14 @ @ 
 package org . apache . cassandra . db ; 
 
 import static org . apache . cassandra . Util . column ; 
 - import static org . junit . Assert . assertNotNull ; 
 - import static org . junit . Assert . assertNull ; 
 + import static org . junit . Assert . * ; 
 
 import java . io . IOException ; 
 + import org . junit . Test ; 
 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . Util ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 - import org . junit . Test ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 / * * 
 @ @ - 35 , 46 + 34 , 150 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; 
 * / 
 public class RecoveryManagerTruncateTest extends SchemaLoader 
 { 
 - 	 @ Test 
 - 	 public void testTruncate ( ) throws IOException 
 - 	 { 
 - 	 	 Keyspace keyspace = Keyspace . open ( " Keyspace1 " ) ; 
 - 	 	 ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( " Standard1 " ) ; 
 + @ Test 
 + public void testTruncate ( ) throws IOException 
 + { 
 + Keyspace keyspace = Keyspace . open ( " Keyspace1 " ) ; 
 + ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( " Standard1 " ) ; 
 
 - 	 	 Mutation rm ; 
 - 	 	 ColumnFamily cf ; 
 + Mutation rm ; 
 + ColumnFamily cf ; 
 
 - 	 	 / / add a single cell 
 + / / add a single cell 
 cf = ArrayBackedSortedColumns . factory . create ( " Keyspace1 " , " Standard1 " ) ; 
 - 	 	 cf . addColumn ( column ( " col1 " , " val1 " , 1L ) ) ; 
 + cf . addColumn ( column ( " col1 " , " val1 " , 1L ) ) ; 
 rm = new Mutation ( " Keyspace1 " , ByteBufferUtil . bytes ( " keymulti " ) , cf ) ; 
 - 	 	 rm . apply ( ) ; 
 + rm . apply ( ) ; 
 + long time = System . currentTimeMillis ( ) ; 
 
 - 	 	 / / Make sure data was written 
 - 	 	 assertNotNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col1 " ) ) ; 
 + / / Make sure data was written 
 + assertNotNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col1 " ) ) ; 
 
 - 	 	 / / and now truncate it 
 - 	 	 cfs . truncateBlocking ( ) ; 
 + / / and now truncate it 
 + cfs . truncateBlocking ( ) ; 
 CommitLog . instance . resetUnsafe ( ) ; 
 - 	 	 CommitLog . instance . recover ( ) ; 
 - 
 - 	 	 / / and validate truncation . 
 - 	 	 assertNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col1 " ) ) ; 
 - 	 } 
 - 
 - 	 private Cell getFromTable ( Keyspace keyspace , String cfName , String keyName , String columnName ) 
 - 	 { 
 - 	 	 ColumnFamily cf ; 
 - 	 	 ColumnFamilyStore cfStore = keyspace . getColumnFamilyStore ( cfName ) ; 
 - 	 	 if ( cfStore = = null ) 
 - 	 	 { 
 - 	 	 	 return null ; 
 - 	 	 } 
 - 	 	 cf = cfStore . getColumnFamily ( Util . namesQueryFilter ( cfStore , Util . dk ( keyName ) , columnName ) ) ; 
 - 	 	 if ( cf = = null ) 
 - 	 	 { 
 - 	 	 	 return null ; 
 - 	 	 } 
 - 	 	 return cf . getColumn ( Util . cellname ( columnName ) ) ; 
 - 	 } 
 + CommitLog . instance . recover ( ) ; 
 + 
 + / / and validate truncation . 
 + assertNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col1 " ) ) ; 
 + assertTrue ( SystemKeyspace . getTruncatedAt ( cfs . metadata . cfId ) > time ) ; 
 + } 
 + 
 + @ Test 
 + public void testTruncatePointInTime ( ) throws IOException 
 + { 
 + Keyspace keyspace = Keyspace . open ( " Keyspace1 " ) ; 
 + ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( " Standard1 " ) ; 
 + 
 + Mutation rm ; 
 + ColumnFamily cf ; 
 + 
 + / / add a single cell 
 + cf = ArrayBackedSortedColumns . factory . create ( " Keyspace1 " , " Standard1 " ) ; 
 + cf . addColumn ( column ( " col2 " , " val1 " , 1L ) ) ; 
 + rm = new Mutation ( " Keyspace1 " , ByteBufferUtil . bytes ( " keymulti " ) , cf ) ; 
 + rm . apply ( ) ; 
 + 
 + / / Make sure data was written 
 + long time = System . currentTimeMillis ( ) ; 
 + assertNotNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col2 " ) ) ; 
 + 
 + / / and now truncate it 
 + cfs . truncateBlocking ( ) ; 
 + 
 + / / verify truncation 
 + assertNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col2 " ) ) ; 
 + 
 + try 
 + { 
 + / / Restore to point in time . 
 + CommitLog . instance . archiver . restorePointInTime = time ; 
 + CommitLog . instance . resetUnsafe ( ) ; 
 + CommitLog . instance . recover ( ) ; 
 + } 
 + finally 
 + { 
 + CommitLog . instance . archiver . restorePointInTime = Long . MAX _ VALUE ; 
 + } 
 + 
 + / / Validate pre - truncation data was restored . 
 + assertNotNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col2 " ) ) ; 
 + / / And that we don ' t have a truncation record after restore time . 
 + assertFalse ( SystemKeyspace . getTruncatedAt ( cfs . metadata . cfId ) > time ) ; 
 + } 
 + 
 + @ Test 
 + public void testTruncatePointInTimeReplayList ( ) throws IOException 
 + { 
 + Keyspace keyspace = Keyspace . open ( " Keyspace1 " ) ; 
 + ColumnFamilyStore cfs1 = keyspace . getColumnFamilyStore ( " Standard1 " ) ; 
 + ColumnFamilyStore cfs2 = keyspace . getColumnFamilyStore ( " Standard2 " ) ; 
 + 
 + Mutation rm ; 
 + ColumnFamily cf ; 
 + 
 + / / add a single cell 
 + cf = ArrayBackedSortedColumns . factory . create ( " Keyspace1 " , " Standard1 " ) ; 
 + cf . addColumn ( column ( " col3 " , " val1 " , 1L ) ) ; 
 + rm = new Mutation ( " Keyspace1 " , ByteBufferUtil . bytes ( " keymulti " ) , cf ) ; 
 + rm . apply ( ) ; 
 + 
 + / / add a single cell 
 + cf = ArrayBackedSortedColumns . factory . create ( " Keyspace1 " , " Standard2 " ) ; 
 + cf . addColumn ( column ( " col4 " , " val1 " , 1L ) ) ; 
 + rm = new Mutation ( " Keyspace1 " , ByteBufferUtil . bytes ( " keymulti " ) , cf ) ; 
 + rm . apply ( ) ; 
 + 
 + / / Make sure data was written 
 + long time = System . currentTimeMillis ( ) ; 
 + assertNotNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col3 " ) ) ; 
 + assertNotNull ( getFromTable ( keyspace , " Standard2 " , " keymulti " , " col4 " ) ) ; 
 + 
 + / / and now truncate it 
 + cfs1 . truncateBlocking ( ) ; 
 + cfs2 . truncateBlocking ( ) ; 
 + 
 + / / verify truncation 
 + assertNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col3 " ) ) ; 
 + assertNull ( getFromTable ( keyspace , " Standard2 " , " keymulti " , " col4 " ) ) ; 
 + 
 + try 
 + { 
 + / / Restore to point in time . 
 + CommitLog . instance . archiver . restorePointInTime = time ; 
 + System . setProperty ( " cassandra . replayList " , " Keyspace1 . Standard1 " ) ; 
 + CommitLog . instance . resetUnsafe ( ) ; 
 + CommitLog . instance . recover ( ) ; 
 + } 
 + finally 
 + { 
 + CommitLog . instance . archiver . restorePointInTime = Long . MAX _ VALUE ; 
 + System . clearProperty ( " cassandra . replayList " ) ; 
 + } 
 + 
 + / / Validate pre - truncation data was restored . 
 + assertNotNull ( getFromTable ( keyspace , " Standard1 " , " keymulti " , " col3 " ) ) ; 
 + / / But only on the replayed table . 
 + assertNull ( getFromTable ( keyspace , " Standard2 " , " keymulti " , " col4 " ) ) ; 
 + 
 + / / And that we have the correct truncation records . 
 + assertFalse ( SystemKeyspace . getTruncatedAt ( cfs1 . metadata . cfId ) > time ) ; 
 + assertTrue ( SystemKeyspace . getTruncatedAt ( cfs2 . metadata . cfId ) > time ) ; 
 + } 
 + 
 + private Cell getFromTable ( Keyspace keyspace , String cfName , String keyName , String columnName ) 
 + { 
 + ColumnFamily cf ; 
 + ColumnFamilyStore cfStore = keyspace . getColumnFamilyStore ( cfName ) ; 
 + if ( cfStore = = null ) 
 + { 
 + return null ; 
 + } 
 + cf = cfStore . getColumnFamily ( Util . namesQueryFilter ( cfStore , Util . dk ( keyName ) , columnName ) ) ; 
 + if ( cf = = null ) 
 + { 
 + return null ; 
 + } 
 + return cf . getColumn ( Util . cellname ( columnName ) ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
