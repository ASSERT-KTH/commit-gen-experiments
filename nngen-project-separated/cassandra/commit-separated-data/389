BLEU SCORE: 0.044808361601213584

TEST MSG: Fix 2ndary indexes on primary key columns to don ' t create expiring entries ( CASSANDRA - 13412 )
GENERATED MSG: Don ' t try to index clustering values of static rows

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2517432 . . f62f162 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 18 <nl> + * Fix 2ndary indexes on primary key columns to don ' t create expiring entries ( CASSANDRA - 13412 ) <nl> * Set javac encoding to utf - 8 ( CASSANDRA - 13466 ) <nl> * Fix 2ndary index queries on partition keys for tables with static columns ( CASSANDRA - 13147 ) <nl> * Fix ParseError unhashable type list in cqlsh copy from ( CASSANDRA - 13364 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> index e80c7bd . . d7a1d8a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> @ @ - 116 , 7 + 116 , 7 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec <nl> DecoratedKey valueKey = getIndexKeyFor ( getIndexedValue ( rowKey , cell ) ) ; <nl> ColumnFamily cfi = ArrayBackedSortedColumns . factory . create ( indexCfs . metadata , false , 1 ) ; <nl> CellName name = makeIndexColumnName ( rowKey , cell ) ; <nl> - if ( cell instanceof ExpiringCell ) <nl> + if ( ! columnDef . isPrimaryKeyColumn ( ) & & cell instanceof ExpiringCell ) <nl> { <nl> ExpiringCell ec = ( ExpiringCell ) cell ; <nl> cfi . addColumn ( new BufferExpiringCell ( name , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , ec . timestamp ( ) , ec . getTimeToLive ( ) , ec . getLocalDeletionTime ( ) ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java <nl> index b723f60 . . 1e63e3a 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java <nl> @ @ - 819 , 4 + 819 , 46 @ @ public class SecondaryIndexTest extends CQLTester <nl> assertRows ( execute ( " SELECT * FROM % s WHERE v = ? " , 1 ) , <nl> row ( 1 , 1 , 9 , 1 ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testIndexOnPartitionKeyInsertExpiringColumn ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k1 int , k2 int , a int , b int , PRIMARY KEY ( ( k1 , k2 ) ) ) " ) ; <nl> + createIndex ( " CREATE INDEX on % s ( k1 ) " ) ; <nl> + execute ( " INSERT INTO % s ( k1 , k2 , a , b ) VALUES ( 1 , 2 , 3 , 4 ) " ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE k1 = 1 " ) , row ( 1 , 2 , 3 , 4 ) ) ; <nl> + execute ( " UPDATE % s USING TTL 1 SET b = 10 WHERE k1 = 1 AND k2 = 2 " ) ; <nl> + Thread . sleep ( 1000 ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE k1 = 1 " ) , row ( 1 , 2 , 3 , null ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIndexOnClusteringKeyInsertExpiringColumn ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( pk int , ck int , a int , b int , PRIMARY KEY ( pk , ck ) ) " ) ; <nl> + createIndex ( " CREATE INDEX on % s ( ck ) " ) ; <nl> + execute ( " INSERT INTO % s ( pk , ck , a , b ) VALUES ( 1 , 2 , 3 , 4 ) " ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE ck = 2 " ) , row ( 1 , 2 , 3 , 4 ) ) ; <nl> + execute ( " UPDATE % s USING TTL 1 SET b = 10 WHERE pk = 1 AND ck = 2 " ) ; <nl> + Thread . sleep ( 1000 ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE ck = 2 " ) , row ( 1 , 2 , 3 , null ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIndexOnRegularColumnInsertExpiringColumn ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( pk int , ck int , a int , b int , PRIMARY KEY ( pk , ck ) ) " ) ; <nl> + createIndex ( " CREATE INDEX on % s ( a ) " ) ; <nl> + execute ( " INSERT INTO % s ( pk , ck , a , b ) VALUES ( 1 , 2 , 3 , 4 ) " ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a = 3 " ) , row ( 1 , 2 , 3 , 4 ) ) ; <nl> + <nl> + execute ( " UPDATE % s USING TTL 1 SET b = 10 WHERE pk = 1 AND ck = 2 " ) ; <nl> + Thread . sleep ( 1000 ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE a = 3 " ) , row ( 1 , 2 , 3 , null ) ) ; <nl> + <nl> + execute ( " UPDATE % s USING TTL 1 SET a = 5 WHERE pk = 1 AND ck = 2 " ) ; <nl> + Thread . sleep ( 1000 ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = 3 " ) ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = 5 " ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2517432 . . f62f162 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 18 
 + * Fix 2ndary indexes on primary key columns to don ' t create expiring entries ( CASSANDRA - 13412 ) 
 * Set javac encoding to utf - 8 ( CASSANDRA - 13466 ) 
 * Fix 2ndary index queries on partition keys for tables with static columns ( CASSANDRA - 13147 ) 
 * Fix ParseError unhashable type list in cqlsh copy from ( CASSANDRA - 13364 ) 
 diff - - git a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 index e80c7bd . . d7a1d8a 100644 
 - - - a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 @ @ - 116 , 7 + 116 , 7 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec 
 DecoratedKey valueKey = getIndexKeyFor ( getIndexedValue ( rowKey , cell ) ) ; 
 ColumnFamily cfi = ArrayBackedSortedColumns . factory . create ( indexCfs . metadata , false , 1 ) ; 
 CellName name = makeIndexColumnName ( rowKey , cell ) ; 
 - if ( cell instanceof ExpiringCell ) 
 + if ( ! columnDef . isPrimaryKeyColumn ( ) & & cell instanceof ExpiringCell ) 
 { 
 ExpiringCell ec = ( ExpiringCell ) cell ; 
 cfi . addColumn ( new BufferExpiringCell ( name , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , ec . timestamp ( ) , ec . getTimeToLive ( ) , ec . getLocalDeletionTime ( ) ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java 
 index b723f60 . . 1e63e3a 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java 
 @ @ - 819 , 4 + 819 , 46 @ @ public class SecondaryIndexTest extends CQLTester 
 assertRows ( execute ( " SELECT * FROM % s WHERE v = ? " , 1 ) , 
 row ( 1 , 1 , 9 , 1 ) ) ; 
 } 
 + 
 + @ Test 
 + public void testIndexOnPartitionKeyInsertExpiringColumn ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k1 int , k2 int , a int , b int , PRIMARY KEY ( ( k1 , k2 ) ) ) " ) ; 
 + createIndex ( " CREATE INDEX on % s ( k1 ) " ) ; 
 + execute ( " INSERT INTO % s ( k1 , k2 , a , b ) VALUES ( 1 , 2 , 3 , 4 ) " ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE k1 = 1 " ) , row ( 1 , 2 , 3 , 4 ) ) ; 
 + execute ( " UPDATE % s USING TTL 1 SET b = 10 WHERE k1 = 1 AND k2 = 2 " ) ; 
 + Thread . sleep ( 1000 ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE k1 = 1 " ) , row ( 1 , 2 , 3 , null ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIndexOnClusteringKeyInsertExpiringColumn ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( pk int , ck int , a int , b int , PRIMARY KEY ( pk , ck ) ) " ) ; 
 + createIndex ( " CREATE INDEX on % s ( ck ) " ) ; 
 + execute ( " INSERT INTO % s ( pk , ck , a , b ) VALUES ( 1 , 2 , 3 , 4 ) " ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE ck = 2 " ) , row ( 1 , 2 , 3 , 4 ) ) ; 
 + execute ( " UPDATE % s USING TTL 1 SET b = 10 WHERE pk = 1 AND ck = 2 " ) ; 
 + Thread . sleep ( 1000 ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE ck = 2 " ) , row ( 1 , 2 , 3 , null ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIndexOnRegularColumnInsertExpiringColumn ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( pk int , ck int , a int , b int , PRIMARY KEY ( pk , ck ) ) " ) ; 
 + createIndex ( " CREATE INDEX on % s ( a ) " ) ; 
 + execute ( " INSERT INTO % s ( pk , ck , a , b ) VALUES ( 1 , 2 , 3 , 4 ) " ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a = 3 " ) , row ( 1 , 2 , 3 , 4 ) ) ; 
 + 
 + execute ( " UPDATE % s USING TTL 1 SET b = 10 WHERE pk = 1 AND ck = 2 " ) ; 
 + Thread . sleep ( 1000 ) ; 
 + assertRows ( execute ( " SELECT * FROM % s WHERE a = 3 " ) , row ( 1 , 2 , 3 , null ) ) ; 
 + 
 + execute ( " UPDATE % s USING TTL 1 SET a = 5 WHERE pk = 1 AND ck = 2 " ) ; 
 + Thread . sleep ( 1000 ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = 3 " ) ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE a = 5 " ) ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
