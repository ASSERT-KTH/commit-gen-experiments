BLEU SCORE: 0.049900497019368314

TEST MSG: CompositeType . extractComponent is static , call it as such
GENERATED MSG: make CompositesIndex . IndexEntry static to reduce footprint

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnCollectionKeyAndValue . java b / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnCollectionKeyAndValue . java <nl> index e18ea4e . . 0b7f579 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnCollectionKeyAndValue . java <nl> + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnCollectionKeyAndValue . java <nl> @ @ - 72 , 7 + 72 , 7 @ @ public class CompositesIndexOnCollectionKeyAndValue extends CompositesIndexInclu <nl> <nl> private ByteBuffer extractIndexKeyComponent ( IndexedEntry entry , int component ) <nl> { <nl> - return ( ( CompositeType ) getIndexKeyComparator ( ) ) . extractComponent ( entry . indexValue . getKey ( ) , component ) ; <nl> + return CompositeType . extractComponent ( entry . indexValue . getKey ( ) , component ) ; <nl> } <nl> <nl> private ByteBuffer extractCollectionValue ( IndexedEntry entry )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java b / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java <nl> index d06f2d8 . . 541888a 100644 <nl> - - - a / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java <nl> + + + b / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ import java . net . InetAddress ; <nl> import java . util . HashSet ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> + import java . util . LinkedHashMap ; <nl> import java . util . concurrent . * ; <nl> <nl> <nl> @ @ - 153 , 8 + 154 , 10 @ @ public class PendingRangeCalculatorService extends PendingRangeCalculatorService <nl> <nl> / / For each of the bootstrapping nodes , simply add and remove them one by one to <nl> / / allLeftMetadata and check in between what their ranges would be . <nl> - synchronized ( bootstrapTokens ) <nl> - { <nl> + 	 synchronized ( bootstrapTokens ) { <nl> + 	 bootstrapTokens = new LinkedHashMap < Token , InetAddress > ( bootstrapTokens ) ; <nl> + 	 } <nl> + <nl> for ( Map . Entry < Token , InetAddress > entry : bootstrapTokens . entrySet ( ) ) <nl> { <nl> InetAddress endpoint = entry . getValue ( ) ; <nl> @ @ - 164 , 7 + 167 , 6 @ @ public class PendingRangeCalculatorService extends PendingRangeCalculatorService <nl> pendingRanges . put ( range , endpoint ) ; <nl> allLeftMetadata . removeEndpoint ( endpoint ) ; <nl> } <nl> - } <nl> <nl> / / At this stage pendingRanges has been updated according to leaving and bootstrapping nodes . <nl> / / We can now finish the calculation by checking moving nodes .

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnCollectionKeyAndValue . java b / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnCollectionKeyAndValue . java 
 index e18ea4e . . 0b7f579 100644 
 - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnCollectionKeyAndValue . java 
 + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesIndexOnCollectionKeyAndValue . java 
 @ @ - 72 , 7 + 72 , 7 @ @ public class CompositesIndexOnCollectionKeyAndValue extends CompositesIndexInclu 
 
 private ByteBuffer extractIndexKeyComponent ( IndexedEntry entry , int component ) 
 { 
 - return ( ( CompositeType ) getIndexKeyComparator ( ) ) . extractComponent ( entry . indexValue . getKey ( ) , component ) ; 
 + return CompositeType . extractComponent ( entry . indexValue . getKey ( ) , component ) ; 
 } 
 
 private ByteBuffer extractCollectionValue ( IndexedEntry entry )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java b / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java 
 index d06f2d8 . . 541888a 100644 
 - - - a / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java 
 + + + b / src / java / org / apache / cassandra / service / PendingRangeCalculatorService . java 
 @ @ - 38 , 6 + 38 , 7 @ @ import java . net . InetAddress ; 
 import java . util . HashSet ; 
 import java . util . Map ; 
 import java . util . Set ; 
 + import java . util . LinkedHashMap ; 
 import java . util . concurrent . * ; 
 
 
 @ @ - 153 , 8 + 154 , 10 @ @ public class PendingRangeCalculatorService extends PendingRangeCalculatorService 
 
 / / For each of the bootstrapping nodes , simply add and remove them one by one to 
 / / allLeftMetadata and check in between what their ranges would be . 
 - synchronized ( bootstrapTokens ) 
 - { 
 + 	 synchronized ( bootstrapTokens ) { 
 + 	 bootstrapTokens = new LinkedHashMap < Token , InetAddress > ( bootstrapTokens ) ; 
 + 	 } 
 + 
 for ( Map . Entry < Token , InetAddress > entry : bootstrapTokens . entrySet ( ) ) 
 { 
 InetAddress endpoint = entry . getValue ( ) ; 
 @ @ - 164 , 7 + 167 , 6 @ @ public class PendingRangeCalculatorService extends PendingRangeCalculatorService 
 pendingRanges . put ( range , endpoint ) ; 
 allLeftMetadata . removeEndpoint ( endpoint ) ; 
 } 
 - } 
 
 / / At this stage pendingRanges has been updated according to leaving and bootstrapping nodes . 
 / / We can now finish the calculation by checking moving nodes .
