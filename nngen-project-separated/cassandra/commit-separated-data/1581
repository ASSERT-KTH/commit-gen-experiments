BLEU SCORE: 0.015542791893293221

TEST MSG: Consistent error message for mixed counters , non - counters
GENERATED MSG: Force provided columns in clustering key order in ' CLUSTERING ORDER BY '

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 422f66e . . 0eb0751 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 2 . 1 . 6 <nl> + * Consistent error message when a table mixes counter and non - counter <nl> + columns ( CASSANDRA - 9492 ) <nl> * Avoid getting unreadable keys during anticompaction ( CASSANDRA - 9508 ) <nl> * ( cqlsh ) Better float precision by default ( CASSANDRA - 9224 ) <nl> * Improve estimated row count ( CASSANDRA - 9107 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> index 17fd6fd . . 5c4e9e2 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> @ @ - 53 , 7 + 53 , 14 @ @ public class CreateTableStatement extends SchemaAlteringStatement <nl> <nl> private boolean isDense ; <nl> <nl> - private final Map < ColumnIdentifier , AbstractType > columns = new HashMap < ColumnIdentifier , AbstractType > ( ) ; <nl> + / / use a TreeMap to preserve ordering across JDK versions ( see CASSANDRA - 9492 ) <nl> + private final Map < ColumnIdentifier , AbstractType > columns = new TreeMap < > ( new Comparator < ColumnIdentifier > ( ) <nl> + { <nl> + public int compare ( ColumnIdentifier o1 , ColumnIdentifier o2 ) <nl> + { <nl> + return o1 . bytes . compareTo ( o2 . bytes ) ; <nl> + } <nl> + } ) ; <nl> private final Set < ColumnIdentifier > staticColumns ; <nl> private final CFPropDefs properties ; <nl> private final boolean ifNotExists ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 48cb945 . . fed3bc1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 44 , 6 + 44 , 7 @ @ <nl> * Fix potential infinite loop in tombstone compaction ( CASSANDRA - 4781 ) <nl> * Remove system tables accounting from schema ( CASSANDRA - 4850 ) <nl> * Force provided columns in clustering key order in ' CLUSTERING ORDER BY ' ( CASSANDRA - 4881 ) <nl> + * Fix composite index bug ( CASSANDRA - 4884 ) <nl> Merged from 1 . 1 : <nl> * add get [ Row | Key ] CacheEntries to CacheServiceMBean ( CASSANDRA - 4859 ) <nl> * fix get _ paged _ slice to wrap to next row correctly ( CASSANDRA - 4816 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> index 1eb5d2a . . f7d1c92 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> @ @ - 422 , 10 + 422 , 8 @ @ public class SecondaryIndexManager <nl> / / Update entire row only once per row level index <nl> Set < Class < ? extends SecondaryIndex > > appliedRowLevelIndexes = null ; <nl> <nl> - for ( Map . Entry < ByteBuffer , SecondaryIndex > entry : indexesByColumn . entrySet ( ) ) <nl> + for ( SecondaryIndex index : indexesByColumn . values ( ) ) <nl> { <nl> - SecondaryIndex index = entry . getValue ( ) ; <nl> - <nl> if ( index instanceof PerRowSecondaryIndex ) <nl> { <nl> if ( appliedRowLevelIndexes = = null ) <nl> @ @ - 436 , 11 + 434 , 11 @ @ public class SecondaryIndexManager <nl> } <nl> else <nl> { <nl> - IColumn column = cf . getColumn ( entry . getKey ( ) ) ; <nl> - if ( column = = null ) <nl> - continue ; <nl> - <nl> - ( ( PerColumnSecondaryIndex ) index ) . insert ( key , column ) ; <nl> + for ( IColumn column : cf ) <nl> + { <nl> + if ( index . indexes ( column . name ( ) ) ) <nl> + ( ( PerColumnSecondaryIndex ) index ) . insert ( key , column ) ; <nl> + } <nl> } <nl> } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 422f66e . . 0eb0751 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 2 . 1 . 6 
 + * Consistent error message when a table mixes counter and non - counter 
 + columns ( CASSANDRA - 9492 ) 
 * Avoid getting unreadable keys during anticompaction ( CASSANDRA - 9508 ) 
 * ( cqlsh ) Better float precision by default ( CASSANDRA - 9224 ) 
 * Improve estimated row count ( CASSANDRA - 9107 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 index 17fd6fd . . 5c4e9e2 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 @ @ - 53 , 7 + 53 , 14 @ @ public class CreateTableStatement extends SchemaAlteringStatement 
 
 private boolean isDense ; 
 
 - private final Map < ColumnIdentifier , AbstractType > columns = new HashMap < ColumnIdentifier , AbstractType > ( ) ; 
 + / / use a TreeMap to preserve ordering across JDK versions ( see CASSANDRA - 9492 ) 
 + private final Map < ColumnIdentifier , AbstractType > columns = new TreeMap < > ( new Comparator < ColumnIdentifier > ( ) 
 + { 
 + public int compare ( ColumnIdentifier o1 , ColumnIdentifier o2 ) 
 + { 
 + return o1 . bytes . compareTo ( o2 . bytes ) ; 
 + } 
 + } ) ; 
 private final Set < ColumnIdentifier > staticColumns ; 
 private final CFPropDefs properties ; 
 private final boolean ifNotExists ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 48cb945 . . fed3bc1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 44 , 6 + 44 , 7 @ @ 
 * Fix potential infinite loop in tombstone compaction ( CASSANDRA - 4781 ) 
 * Remove system tables accounting from schema ( CASSANDRA - 4850 ) 
 * Force provided columns in clustering key order in ' CLUSTERING ORDER BY ' ( CASSANDRA - 4881 ) 
 + * Fix composite index bug ( CASSANDRA - 4884 ) 
 Merged from 1 . 1 : 
 * add get [ Row | Key ] CacheEntries to CacheServiceMBean ( CASSANDRA - 4859 ) 
 * fix get _ paged _ slice to wrap to next row correctly ( CASSANDRA - 4816 ) 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 index 1eb5d2a . . f7d1c92 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 @ @ - 422 , 10 + 422 , 8 @ @ public class SecondaryIndexManager 
 / / Update entire row only once per row level index 
 Set < Class < ? extends SecondaryIndex > > appliedRowLevelIndexes = null ; 
 
 - for ( Map . Entry < ByteBuffer , SecondaryIndex > entry : indexesByColumn . entrySet ( ) ) 
 + for ( SecondaryIndex index : indexesByColumn . values ( ) ) 
 { 
 - SecondaryIndex index = entry . getValue ( ) ; 
 - 
 if ( index instanceof PerRowSecondaryIndex ) 
 { 
 if ( appliedRowLevelIndexes = = null ) 
 @ @ - 436 , 11 + 434 , 11 @ @ public class SecondaryIndexManager 
 } 
 else 
 { 
 - IColumn column = cf . getColumn ( entry . getKey ( ) ) ; 
 - if ( column = = null ) 
 - continue ; 
 - 
 - ( ( PerColumnSecondaryIndex ) index ) . insert ( key , column ) ; 
 + for ( IColumn column : cf ) 
 + { 
 + if ( index . indexes ( column . name ( ) ) ) 
 + ( ( PerColumnSecondaryIndex ) index ) . insert ( key , column ) ; 
 + } 
 } 
 } 
 }
