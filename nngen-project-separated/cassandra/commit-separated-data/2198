BLEU SCORE: 0.028398387225677897

TEST MSG: Avoid flushing on request threads . causes netty to over cache buffers and OOM
GENERATED MSG: Add server side batching to native transport

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 8714265 . . eeb115f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 0 - rc6 <nl> + * Fix OOM issue from netty caching over time ( CASSANDRA - 7743 ) <nl> * json2sstable couldn ' t import JSON for CQL table ( CASSANDRA - 7477 ) <nl> * Invalidate all caches on table drop ( CASSANDRA - 7561 ) <nl> * Skip strict endpoint selection for ranges if RF = = nodes ( CASSANRA - 7765 ) <nl> diff - - git a / src / java / org / apache / cassandra / transport / Message . java b / src / java / org / apache / cassandra / transport / Message . java <nl> index 9a89454 . . 163fffb 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Message . java <nl> + + + b / src / java / org / apache / cassandra / transport / Message . java <nl> @ @ - 128 , 7 + 128 , 7 @ @ public abstract class Message <nl> public final Type type ; <nl> protected Connection connection ; <nl> private int streamId ; <nl> - private Frame sourceFrame = null ; <nl> + private Frame sourceFrame ; <nl> <nl> protected Message ( Type type ) <nl> { <nl> @ @ - 321 , 10 + 321 , 12 @ @ public abstract class Message <nl> private static class FlushItem <nl> { <nl> final ChannelHandlerContext ctx ; <nl> - final Response response ; <nl> - private FlushItem ( ChannelHandlerContext ctx , Response response ) <nl> + final Object response ; <nl> + final Frame sourceFrame ; <nl> + private FlushItem ( ChannelHandlerContext ctx , Object response , Frame sourceFrame ) <nl> { <nl> this . ctx = ctx ; <nl> + this . sourceFrame = sourceFrame ; <nl> this . response = response ; <nl> } <nl> } <nl> @ @ - 369 , 7 + 371 , 7 @ @ public abstract class Message <nl> for ( ChannelHandlerContext channel : channels ) <nl> channel . flush ( ) ; <nl> for ( FlushItem item : flushed ) <nl> - item . response . getSourceFrame ( ) . release ( ) ; <nl> + item . sourceFrame . release ( ) ; <nl> <nl> channels . clear ( ) ; <nl> flushed . clear ( ) ; <nl> @ @ - 420 , 20 + 422 , 21 @ @ public abstract class Message <nl> response = request . execute ( qstate ) ; <nl> response . setStreamId ( request . getStreamId ( ) ) ; <nl> response . attach ( connection ) ; <nl> - response . setSourceFrame ( request . getSourceFrame ( ) ) ; <nl> connection . applyStateTransition ( request . type , response . type ) ; <nl> } <nl> catch ( Throwable ex ) <nl> { <nl> - request . getSourceFrame ( ) . release ( ) ; <nl> - / / Don ' t let the exception propagate to exceptionCaught ( ) if we can help it so that we can assign the right streamID . <nl> - ctx . writeAndFlush ( ErrorMessage . fromException ( ex ) . setStreamId ( request . getStreamId ( ) ) , ctx . voidPromise ( ) ) ; <nl> + flush ( new FlushItem ( ctx , ErrorMessage . fromException ( ex ) . setStreamId ( request . getStreamId ( ) ) , request . getSourceFrame ( ) ) ) ; <nl> return ; <nl> } <nl> <nl> logger . debug ( " Responding : { } , v = { } " , response , connection . getVersion ( ) ) ; <nl> + flush ( new FlushItem ( ctx , response , request . getSourceFrame ( ) ) ) ; <nl> + } <nl> <nl> - EventLoop loop = ctx . channel ( ) . eventLoop ( ) ; <nl> + private void flush ( FlushItem item ) <nl> + { <nl> + EventLoop loop = item . ctx . channel ( ) . eventLoop ( ) ; <nl> Flusher flusher = flusherLookup . get ( loop ) ; <nl> if ( flusher = = null ) <nl> { <nl> @ @ - 442 , 7 + 445 , 7 @ @ public abstract class Message <nl> flusher = alt ; <nl> } <nl> <nl> - flusher . queued . add ( new FlushItem ( ctx , response ) ) ; <nl> + flusher . queued . add ( item ) ; <nl> flusher . start ( ) ; <nl> } <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 8714265 . . eeb115f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 0 - rc6 
 + * Fix OOM issue from netty caching over time ( CASSANDRA - 7743 ) 
 * json2sstable couldn ' t import JSON for CQL table ( CASSANDRA - 7477 ) 
 * Invalidate all caches on table drop ( CASSANDRA - 7561 ) 
 * Skip strict endpoint selection for ranges if RF = = nodes ( CASSANRA - 7765 ) 
 diff - - git a / src / java / org / apache / cassandra / transport / Message . java b / src / java / org / apache / cassandra / transport / Message . java 
 index 9a89454 . . 163fffb 100644 
 - - - a / src / java / org / apache / cassandra / transport / Message . java 
 + + + b / src / java / org / apache / cassandra / transport / Message . java 
 @ @ - 128 , 7 + 128 , 7 @ @ public abstract class Message 
 public final Type type ; 
 protected Connection connection ; 
 private int streamId ; 
 - private Frame sourceFrame = null ; 
 + private Frame sourceFrame ; 
 
 protected Message ( Type type ) 
 { 
 @ @ - 321 , 10 + 321 , 12 @ @ public abstract class Message 
 private static class FlushItem 
 { 
 final ChannelHandlerContext ctx ; 
 - final Response response ; 
 - private FlushItem ( ChannelHandlerContext ctx , Response response ) 
 + final Object response ; 
 + final Frame sourceFrame ; 
 + private FlushItem ( ChannelHandlerContext ctx , Object response , Frame sourceFrame ) 
 { 
 this . ctx = ctx ; 
 + this . sourceFrame = sourceFrame ; 
 this . response = response ; 
 } 
 } 
 @ @ - 369 , 7 + 371 , 7 @ @ public abstract class Message 
 for ( ChannelHandlerContext channel : channels ) 
 channel . flush ( ) ; 
 for ( FlushItem item : flushed ) 
 - item . response . getSourceFrame ( ) . release ( ) ; 
 + item . sourceFrame . release ( ) ; 
 
 channels . clear ( ) ; 
 flushed . clear ( ) ; 
 @ @ - 420 , 20 + 422 , 21 @ @ public abstract class Message 
 response = request . execute ( qstate ) ; 
 response . setStreamId ( request . getStreamId ( ) ) ; 
 response . attach ( connection ) ; 
 - response . setSourceFrame ( request . getSourceFrame ( ) ) ; 
 connection . applyStateTransition ( request . type , response . type ) ; 
 } 
 catch ( Throwable ex ) 
 { 
 - request . getSourceFrame ( ) . release ( ) ; 
 - / / Don ' t let the exception propagate to exceptionCaught ( ) if we can help it so that we can assign the right streamID . 
 - ctx . writeAndFlush ( ErrorMessage . fromException ( ex ) . setStreamId ( request . getStreamId ( ) ) , ctx . voidPromise ( ) ) ; 
 + flush ( new FlushItem ( ctx , ErrorMessage . fromException ( ex ) . setStreamId ( request . getStreamId ( ) ) , request . getSourceFrame ( ) ) ) ; 
 return ; 
 } 
 
 logger . debug ( " Responding : { } , v = { } " , response , connection . getVersion ( ) ) ; 
 + flush ( new FlushItem ( ctx , response , request . getSourceFrame ( ) ) ) ; 
 + } 
 
 - EventLoop loop = ctx . channel ( ) . eventLoop ( ) ; 
 + private void flush ( FlushItem item ) 
 + { 
 + EventLoop loop = item . ctx . channel ( ) . eventLoop ( ) ; 
 Flusher flusher = flusherLookup . get ( loop ) ; 
 if ( flusher = = null ) 
 { 
 @ @ - 442 , 7 + 445 , 7 @ @ public abstract class Message 
 flusher = alt ; 
 } 
 
 - flusher . queued . add ( new FlushItem ( ctx , response ) ) ; 
 + flusher . queued . add ( item ) ; 
 flusher . start ( ) ; 
 } 


NEAREST DIFF:
ELIMINATEDSENTENCE
