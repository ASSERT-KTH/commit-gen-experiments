BLEU SCORE: 0.04767707020457096

TEST MSG: Avoid NPE on null nested UDT inside a set
GENERATED MSG: Ability to freeze UDT

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4da1e56 . . 0d39416 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 1 <nl> + * Fix NPE on null nested UDT inside a set ( CASSANDRA - 8105 ) <nl> * Fix exception when querying secondary index on set items or map keys <nl> when some clustering columns are specified ( CASSANDRA - 8073 ) <nl> * Send proper error response when there is an error during native <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / TupleType . java b / src / java / org / apache / cassandra / db / marshal / TupleType . java <nl> index a7a83ea . . 42aaba1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / TupleType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / TupleType . java <nl> @ @ - 72 , 8 + 72 , 7 @ @ public class TupleType extends AbstractType < ByteBuffer > <nl> ByteBuffer bb1 = o1 . duplicate ( ) ; <nl> ByteBuffer bb2 = o2 . duplicate ( ) ; <nl> <nl> - int i = 0 ; <nl> - while ( bb1 . remaining ( ) > 0 & & bb2 . remaining ( ) > 0 ) <nl> + for ( int i = 0 ; bb1 . remaining ( ) > 0 & & bb2 . remaining ( ) > 0 ; i + + ) <nl> { <nl> AbstractType < ? > comparator = types . get ( i ) ; <nl> <nl> @ @ - 95 , 8 + 94 , 6 @ @ public class TupleType extends AbstractType < ByteBuffer > <nl> int cmp = comparator . compare ( value1 , value2 ) ; <nl> if ( cmp ! = 0 ) <nl> return cmp ; <nl> - <nl> - + + i ; <nl> } <nl> <nl> if ( bb1 . remaining ( ) = = 0 ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / UserTypesTest . java b / test / unit / org / apache / cassandra / cql3 / UserTypesTest . java <nl> index ca84102 . . 184de19 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / UserTypesTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / UserTypesTest . java <nl> @ @ - 32 , 6 + 32 , 25 @ @ public class UserTypesTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> + public void testCassandra8105 ( ) throws Throwable <nl> + { <nl> + String ut1 = createType ( " CREATE TYPE % s ( a int , b int ) " ) ; <nl> + String ut2 = createType ( " CREATE TYPE % s ( j frozen < " + KEYSPACE + " . " + ut1 + " > , k int ) " ) ; <nl> + createTable ( " CREATE TABLE % s ( x int PRIMARY KEY , y set < frozen < " + KEYSPACE + " . " + ut2 + " > > ) " ) ; <nl> + execute ( " INSERT INTO % s ( x , y ) VALUES ( 1 , { { k : 1 } } ) " ) ; <nl> + <nl> + String ut3 = createType ( " CREATE TYPE % s ( a int , b int ) " ) ; <nl> + String ut4 = createType ( " CREATE TYPE % s ( j frozen < " + KEYSPACE + " . " + ut3 + " > , k int ) " ) ; <nl> + createTable ( " CREATE TABLE % s ( x int PRIMARY KEY , y list < frozen < " + KEYSPACE + " . " + ut4 + " > > ) " ) ; <nl> + execute ( " INSERT INTO % s ( x , y ) VALUES ( 1 , [ { k : 1 } ] ) " ) ; <nl> + <nl> + String ut5 = createType ( " CREATE TYPE % s ( a int , b int ) " ) ; <nl> + String ut6 = createType ( " CREATE TYPE % s ( i int , j frozen < " + KEYSPACE + " . " + ut5 + " > ) " ) ; <nl> + createTable ( " CREATE TABLE % s ( x int PRIMARY KEY , y set < frozen < " + KEYSPACE + " . " + ut6 + " > > ) " ) ; <nl> + execute ( " INSERT INTO % s ( x , y ) VALUES ( 1 , { { i : 1 } } ) " ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testFor7684 ( ) throws Throwable <nl> { <nl> String myType = createType ( " CREATE TYPE % s ( x double ) " ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4da1e56 . . 0d39416 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 1 
 + * Fix NPE on null nested UDT inside a set ( CASSANDRA - 8105 ) 
 * Fix exception when querying secondary index on set items or map keys 
 when some clustering columns are specified ( CASSANDRA - 8073 ) 
 * Send proper error response when there is an error during native 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / TupleType . java b / src / java / org / apache / cassandra / db / marshal / TupleType . java 
 index a7a83ea . . 42aaba1 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / TupleType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / TupleType . java 
 @ @ - 72 , 8 + 72 , 7 @ @ public class TupleType extends AbstractType < ByteBuffer > 
 ByteBuffer bb1 = o1 . duplicate ( ) ; 
 ByteBuffer bb2 = o2 . duplicate ( ) ; 
 
 - int i = 0 ; 
 - while ( bb1 . remaining ( ) > 0 & & bb2 . remaining ( ) > 0 ) 
 + for ( int i = 0 ; bb1 . remaining ( ) > 0 & & bb2 . remaining ( ) > 0 ; i + + ) 
 { 
 AbstractType < ? > comparator = types . get ( i ) ; 
 
 @ @ - 95 , 8 + 94 , 6 @ @ public class TupleType extends AbstractType < ByteBuffer > 
 int cmp = comparator . compare ( value1 , value2 ) ; 
 if ( cmp ! = 0 ) 
 return cmp ; 
 - 
 - + + i ; 
 } 
 
 if ( bb1 . remaining ( ) = = 0 ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / UserTypesTest . java b / test / unit / org / apache / cassandra / cql3 / UserTypesTest . java 
 index ca84102 . . 184de19 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / UserTypesTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / UserTypesTest . java 
 @ @ - 32 , 6 + 32 , 25 @ @ public class UserTypesTest extends CQLTester 
 } 
 
 @ Test 
 + public void testCassandra8105 ( ) throws Throwable 
 + { 
 + String ut1 = createType ( " CREATE TYPE % s ( a int , b int ) " ) ; 
 + String ut2 = createType ( " CREATE TYPE % s ( j frozen < " + KEYSPACE + " . " + ut1 + " > , k int ) " ) ; 
 + createTable ( " CREATE TABLE % s ( x int PRIMARY KEY , y set < frozen < " + KEYSPACE + " . " + ut2 + " > > ) " ) ; 
 + execute ( " INSERT INTO % s ( x , y ) VALUES ( 1 , { { k : 1 } } ) " ) ; 
 + 
 + String ut3 = createType ( " CREATE TYPE % s ( a int , b int ) " ) ; 
 + String ut4 = createType ( " CREATE TYPE % s ( j frozen < " + KEYSPACE + " . " + ut3 + " > , k int ) " ) ; 
 + createTable ( " CREATE TABLE % s ( x int PRIMARY KEY , y list < frozen < " + KEYSPACE + " . " + ut4 + " > > ) " ) ; 
 + execute ( " INSERT INTO % s ( x , y ) VALUES ( 1 , [ { k : 1 } ] ) " ) ; 
 + 
 + String ut5 = createType ( " CREATE TYPE % s ( a int , b int ) " ) ; 
 + String ut6 = createType ( " CREATE TYPE % s ( i int , j frozen < " + KEYSPACE + " . " + ut5 + " > ) " ) ; 
 + createTable ( " CREATE TABLE % s ( x int PRIMARY KEY , y set < frozen < " + KEYSPACE + " . " + ut6 + " > > ) " ) ; 
 + execute ( " INSERT INTO % s ( x , y ) VALUES ( 1 , { { i : 1 } } ) " ) ; 
 + } 
 + 
 + @ Test 
 public void testFor7684 ( ) throws Throwable 
 { 
 String myType = createType ( " CREATE TYPE % s ( x double ) " ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
