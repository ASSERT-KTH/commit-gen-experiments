BLEU SCORE: 0.018543295278285157

TEST MSG: fix startup when WMI memory query fails
GENERATED MSG: Nodetool gets default JMX port from cassandra - env . sh

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 641326e . . 180b044 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 7 @ @ <nl> + 2 . 1 . 0 - final <nl> + * ( Windows ) fix startup when WMI memory query fails ( CASSANDRA - 7505 ) <nl> + <nl> + <nl> 2 . 1 . 0 - rc3 <nl> * Consider expiry when reconciling otherwise equal cells ( CASSANDRA - 7403 ) <nl> * Introduce CQL support for stress tool ( CASSANDRA - 6146 ) <nl> diff - - git a / conf / cassandra - env . ps1 b / conf / cassandra - env . ps1 <nl> index 87a5cfe . . b8a806f 100644 <nl> - - - a / conf / cassandra - env . ps1 <nl> + + + b / conf / cassandra - env . ps1 <nl> @ @ - 66 , 6 + 66 , 14 @ @ Function CalculateHeapSizes <nl> } <nl> <nl> $ memObject = Get - WMIObject - class win32 _ physicalmemory <nl> + if ( $ memObject - eq $ null ) <nl> + { <nl> + echo " WARNING ! Could not determine system memory . Defaulting to 2G heap , 512M newgen . Manually override in conf / cassandra - env . ps1 for different heap values . " <nl> + $ env : MAX _ HEAP _ SIZE = " 2048M " <nl> + $ env : HEAP _ NEWSIZE = " 512M " <nl> + return <nl> + } <nl> + <nl> $ memory = ( $ memObject | Measure - Object Capacity - Sum ) . sum <nl> $ memoryMB = [ Math ] : : Truncate ( $ memory / ( 1024 * 1024 ) ) <nl>
NEAREST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java <nl> index 9bd384c . . 8c0d908 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java <nl> @ @ - 303 , 41 + 303 , 6 @ @ public class SSTableReaderTest extends SchemaLoader <nl> foundScanner = true ; <nl> } <nl> assertTrue ( foundScanner ) ; <nl> - <nl> - @ Test <nl> - public void testGetPositionsForRangesFromTableOpenedForBulkLoading ( ) throws IOException , ExecutionException , InterruptedException <nl> - { <nl> - Table table = Table . open ( " Keyspace1 " ) ; <nl> - ColumnFamilyStore store = table . getColumnFamilyStore ( " Standard2 " ) ; <nl> - <nl> - / / insert data and compact to a single sstable . The <nl> - / / number of keys inserted is greater than index _ interval <nl> - / / to ensure multiple segments in the index file <nl> - CompactionManager . instance . disableAutoCompaction ( ) ; <nl> - for ( int j = 0 ; j < 130 ; j + + ) <nl> - { <nl> - ByteBuffer key = ByteBufferUtil . bytes ( String . valueOf ( j ) ) ; <nl> - RowMutation rm = new RowMutation ( " Keyspace1 " , key ) ; <nl> - rm . add ( new QueryPath ( " Standard2 " , null , ByteBufferUtil . bytes ( " 0 " ) ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , j ) ; <nl> - rm . apply ( ) ; <nl> - } <nl> - store . forceBlockingFlush ( ) ; <nl> - CompactionManager . instance . performMaximal ( store ) ; <nl> - <nl> - / / construct a range which is present in the sstable , but whose <nl> - / / keys are not found in the first segment of the index . <nl> - List < Range < Token > > ranges = new ArrayList < Range < Token > > ( ) ; <nl> - ranges . add ( new Range < Token > ( t ( 98 ) , t ( 99 ) ) ) ; <nl> - <nl> - SSTableReader sstable = store . getSSTables ( ) . iterator ( ) . next ( ) ; <nl> - List < Pair < Long , Long > > sections = sstable . getPositionsForRanges ( ranges ) ; <nl> - assert sections . size ( ) = = 1 : " Expected to find range in sstable " ; <nl> - <nl> - / / re - open the same sstable as it would be during bulk loading <nl> - Set < Component > components = Sets . newHashSet ( Component . DATA , Component . PRIMARY _ INDEX ) ; <nl> - SSTableReader bulkLoaded = SSTableReader . openForBatch ( sstable . descriptor , components , sstable . partitioner ) ; <nl> - sections = bulkLoaded . getPositionsForRanges ( ranges ) ; <nl> - assert sections . size ( ) = = 1 : " Expected to find range in sstable opened for bulk loading " ; <nl> } <nl> <nl> private void assertIndexQueryWorks ( ColumnFamilyStore indexedCFS ) throws IOException

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 641326e . . 180b044 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 7 @ @ 
 + 2 . 1 . 0 - final 
 + * ( Windows ) fix startup when WMI memory query fails ( CASSANDRA - 7505 ) 
 + 
 + 
 2 . 1 . 0 - rc3 
 * Consider expiry when reconciling otherwise equal cells ( CASSANDRA - 7403 ) 
 * Introduce CQL support for stress tool ( CASSANDRA - 6146 ) 
 diff - - git a / conf / cassandra - env . ps1 b / conf / cassandra - env . ps1 
 index 87a5cfe . . b8a806f 100644 
 - - - a / conf / cassandra - env . ps1 
 + + + b / conf / cassandra - env . ps1 
 @ @ - 66 , 6 + 66 , 14 @ @ Function CalculateHeapSizes 
 } 
 
 $ memObject = Get - WMIObject - class win32 _ physicalmemory 
 + if ( $ memObject - eq $ null ) 
 + { 
 + echo " WARNING ! Could not determine system memory . Defaulting to 2G heap , 512M newgen . Manually override in conf / cassandra - env . ps1 for different heap values . " 
 + $ env : MAX _ HEAP _ SIZE = " 2048M " 
 + $ env : HEAP _ NEWSIZE = " 512M " 
 + return 
 + } 
 + 
 $ memory = ( $ memObject | Measure - Object Capacity - Sum ) . sum 
 $ memoryMB = [ Math ] : : Truncate ( $ memory / ( 1024 * 1024 ) ) 


NEAREST DIFF:
diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java 
 index 9bd384c . . 8c0d908 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java 
 @ @ - 303 , 41 + 303 , 6 @ @ public class SSTableReaderTest extends SchemaLoader 
 foundScanner = true ; 
 } 
 assertTrue ( foundScanner ) ; 
 - 
 - @ Test 
 - public void testGetPositionsForRangesFromTableOpenedForBulkLoading ( ) throws IOException , ExecutionException , InterruptedException 
 - { 
 - Table table = Table . open ( " Keyspace1 " ) ; 
 - ColumnFamilyStore store = table . getColumnFamilyStore ( " Standard2 " ) ; 
 - 
 - / / insert data and compact to a single sstable . The 
 - / / number of keys inserted is greater than index _ interval 
 - / / to ensure multiple segments in the index file 
 - CompactionManager . instance . disableAutoCompaction ( ) ; 
 - for ( int j = 0 ; j < 130 ; j + + ) 
 - { 
 - ByteBuffer key = ByteBufferUtil . bytes ( String . valueOf ( j ) ) ; 
 - RowMutation rm = new RowMutation ( " Keyspace1 " , key ) ; 
 - rm . add ( new QueryPath ( " Standard2 " , null , ByteBufferUtil . bytes ( " 0 " ) ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , j ) ; 
 - rm . apply ( ) ; 
 - } 
 - store . forceBlockingFlush ( ) ; 
 - CompactionManager . instance . performMaximal ( store ) ; 
 - 
 - / / construct a range which is present in the sstable , but whose 
 - / / keys are not found in the first segment of the index . 
 - List < Range < Token > > ranges = new ArrayList < Range < Token > > ( ) ; 
 - ranges . add ( new Range < Token > ( t ( 98 ) , t ( 99 ) ) ) ; 
 - 
 - SSTableReader sstable = store . getSSTables ( ) . iterator ( ) . next ( ) ; 
 - List < Pair < Long , Long > > sections = sstable . getPositionsForRanges ( ranges ) ; 
 - assert sections . size ( ) = = 1 : " Expected to find range in sstable " ; 
 - 
 - / / re - open the same sstable as it would be during bulk loading 
 - Set < Component > components = Sets . newHashSet ( Component . DATA , Component . PRIMARY _ INDEX ) ; 
 - SSTableReader bulkLoaded = SSTableReader . openForBatch ( sstable . descriptor , components , sstable . partitioner ) ; 
 - sections = bulkLoaded . getPositionsForRanges ( ranges ) ; 
 - assert sections . size ( ) = = 1 : " Expected to find range in sstable opened for bulk loading " ; 
 } 
 
 private void assertIndexQueryWorks ( ColumnFamilyStore indexedCFS ) throws IOException
