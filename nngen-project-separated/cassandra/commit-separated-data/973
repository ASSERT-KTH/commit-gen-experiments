BLEU SCORE: 0.014199193612838947

TEST MSG: Don ' t warn on big batches if everything is in the same partition
GENERATED MSG: Fix merge

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> index 9faf73c . . 058969b 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> @ @ - 262 , 22 + 262 , 32 @ @ public class BatchStatement implements CQLStatement <nl> * <nl> * @ param updates - the batch mutations . <nl> * / <nl> - public static void verifyBatchSize ( Iterable < PartitionUpdate > updates ) throws InvalidRequestException <nl> + private static void verifyBatchSize ( Collection < ? extends IMutation > mutations ) throws InvalidRequestException <nl> { <nl> + / / We only warn for batch spanning multiple mutations
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c7d64b4 . . 727ede8 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 16 , 6 + 16 , 7 @ @ <nl> * Fix streaming compressed files when using encryption ( CASSANDRA - 5391 ) <nl> * cassandra - all 1 . 2 . 0 pom missing netty dependency ( CASSANDRA - 5392 ) <nl> * Fix writetime / ttl functions on null values ( CASSANDRA - 5341 ) <nl> + * Fix NPE during cql3 select with token ( ) ( CASSANDRA - 5404 ) <nl> Merged from 1 . 1 : <nl> * cli : Quote ks and cf names in schema output when needed ( CASSANDRA - 5052 ) <nl> * Fix bad default for min / max timestamp in SSTableMetadata ( CASSANDRA - 5372 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java b / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java <nl> index 01c26af . . 14a9b78 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java <nl> @ @ - 132 , 7 + 132 , 11 @ @ public class FunctionCall extends Term . NonTerminal <nl> public boolean isAssignableTo ( ColumnSpecification receiver ) <nl> { <nl> AbstractType < ? > returnType = Functions . getReturnType ( functionName , receiver . ksName , receiver . cfName ) ; <nl> - return receiver . type . asCQL3Type ( ) . equals ( returnType . asCQL3Type ( ) ) ; <nl> + / / Note : if returnType = = null , it means the function doesn ' t exist . We may get this if an undefined function <nl> + / / is used as argument of another , existing , function . In that case , we return true here because we ' ll catch <nl> + / / the fact that the method is undefined latter anyway and with a more helpful error message that if we were <nl> + / / to return false here . <nl> + return returnType = = null | | receiver . type . asCQL3Type ( ) . equals ( returnType . asCQL3Type ( ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / Selection . java b / src / java / org / apache / cassandra / cql3 / statements / Selection . java <nl> index 983c35b . . e4e59c5 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / Selection . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / Selection . java <nl> @ @ - 117 , 6 + 117 , 8 @ @ public abstract class Selection <nl> args . add ( makeSelector ( cfDef , rawArg , names , null ) ) ; <nl> <nl> AbstractType < ? > returnType = Functions . getReturnType ( withFun . functionName , cfDef . cfm . ksName , cfDef . cfm . cfName ) ; <nl> + if ( returnType = = null ) <nl> + throw new InvalidRequestException ( String . format ( " Unknown function ' % s ' " , withFun . functionName ) ) ; <nl> ColumnSpecification spec = makeFunctionSpec ( cfDef , withFun , returnType ) ; <nl> Function fun = Functions . get ( withFun . functionName , args , spec ) ; <nl> if ( metadata ! = null )

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 index 9faf73c . . 058969b 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 @ @ - 262 , 22 + 262 , 32 @ @ public class BatchStatement implements CQLStatement 
 * 
 * @ param updates - the batch mutations . 
 * / 
 - public static void verifyBatchSize ( Iterable < PartitionUpdate > updates ) throws InvalidRequestException 
 + private static void verifyBatchSize ( Collection < ? extends IMutation > mutations ) throws InvalidRequestException 
 { 
 + / / We only warn for batch spanning multiple mutations

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c7d64b4 . . 727ede8 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 16 , 6 + 16 , 7 @ @ 
 * Fix streaming compressed files when using encryption ( CASSANDRA - 5391 ) 
 * cassandra - all 1 . 2 . 0 pom missing netty dependency ( CASSANDRA - 5392 ) 
 * Fix writetime / ttl functions on null values ( CASSANDRA - 5341 ) 
 + * Fix NPE during cql3 select with token ( ) ( CASSANDRA - 5404 ) 
 Merged from 1 . 1 : 
 * cli : Quote ks and cf names in schema output when needed ( CASSANDRA - 5052 ) 
 * Fix bad default for min / max timestamp in SSTableMetadata ( CASSANDRA - 5372 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java b / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java 
 index 01c26af . . 14a9b78 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / FunctionCall . java 
 @ @ - 132 , 7 + 132 , 11 @ @ public class FunctionCall extends Term . NonTerminal 
 public boolean isAssignableTo ( ColumnSpecification receiver ) 
 { 
 AbstractType < ? > returnType = Functions . getReturnType ( functionName , receiver . ksName , receiver . cfName ) ; 
 - return receiver . type . asCQL3Type ( ) . equals ( returnType . asCQL3Type ( ) ) ; 
 + / / Note : if returnType = = null , it means the function doesn ' t exist . We may get this if an undefined function 
 + / / is used as argument of another , existing , function . In that case , we return true here because we ' ll catch 
 + / / the fact that the method is undefined latter anyway and with a more helpful error message that if we were 
 + / / to return false here . 
 + return returnType = = null | | receiver . type . asCQL3Type ( ) . equals ( returnType . asCQL3Type ( ) ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / Selection . java b / src / java / org / apache / cassandra / cql3 / statements / Selection . java 
 index 983c35b . . e4e59c5 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / Selection . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / Selection . java 
 @ @ - 117 , 6 + 117 , 8 @ @ public abstract class Selection 
 args . add ( makeSelector ( cfDef , rawArg , names , null ) ) ; 
 
 AbstractType < ? > returnType = Functions . getReturnType ( withFun . functionName , cfDef . cfm . ksName , cfDef . cfm . cfName ) ; 
 + if ( returnType = = null ) 
 + throw new InvalidRequestException ( String . format ( " Unknown function ' % s ' " , withFun . functionName ) ) ; 
 ColumnSpecification spec = makeFunctionSpec ( cfDef , withFun , returnType ) ; 
 Function fun = Functions . get ( withFun . functionName , args , spec ) ; 
 if ( metadata ! = null )
