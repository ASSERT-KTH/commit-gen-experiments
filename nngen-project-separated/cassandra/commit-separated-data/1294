BLEU SCORE: 0.06567274736060397

TEST MSG: Follow - up to CASSANDRA - 10238
GENERATED MSG: move endpoint cache from snitch to strategy

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> index 745eeb8 . . 5b89df1 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> @ @ - 59 , 7 + 59 , 7 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch <nl> <nl> public PropertyFileSnitch ( ) throws ConfigurationException <nl> { <nl> - reloadConfiguration ( ) ; <nl> + reloadConfiguration ( false ) ; <nl> <nl> try <nl> { <nl> @ @ - 68 , 8 + 68 , 7 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch <nl> { <nl> protected void runMayThrow ( ) throws ConfigurationException <nl> { <nl> - reloadConfiguration ( ) ; <nl> - StorageService . instance . updateTopology ( ) ; <nl> + reloadConfiguration ( true ) ; <nl> } <nl> } ; <nl> ResourceWatcher . watch ( SNITCH _ PROPERTIES _ FILENAME , runnable , 60 * 1000 ) ; <nl> @ @ - 131 , 7 + 130 , 7 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch <nl> return info [ 1 ] ; <nl> } <nl> <nl> - public void reloadConfiguration ( ) throws ConfigurationException <nl> + public void reloadConfiguration ( boolean isUpdate ) throws ConfigurationException <nl> { <nl> HashMap < InetAddress , String [ ] > reloadedMap = new HashMap < InetAddress , String [ ] > ( ) ; <nl> <nl> @ @ - 198 , 7 + 197 , 12 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch <nl> <nl> endpointMap = reloadedMap ; <nl> if ( StorageService . instance ! = null ) / / null check tolerates circular dependency ; see CASSANDRA - 4145 <nl> - StorageService . instance . getTokenMetadata ( ) . invalidateCachedRings ( ) ; <nl> + { <nl> + if ( isUpdate ) <nl> + StorageService . instance . updateTopology ( ) ; <nl> + else <nl> + StorageService . instance . getTokenMetadata ( ) . invalidateCachedRings ( ) ; <nl> + } <nl> <nl> if ( gossipStarted ) <nl> StorageService . instance . gossipSnitchInfo ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> index b1b25e8 . . 25d60f0 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> @ @ - 413 , 6 + 413 , 7 @ @ public class TokenMetadata <nl> { <nl> logger . info ( " Updating topology for { } " , endpoint ) ; <nl> topology . updateEndpoint ( endpoint ) ; <nl> + invalidateCachedRings ( ) ; <nl> } <nl> finally <nl> { <nl> @ @ - 431 , 6 + 432 , 7 @ @ public class TokenMetadata <nl> { <nl> logger . info ( " Updating topology for all endpoints that have changed " ) ; <nl> topology . updateEndpoints ( ) ; <nl> + invalidateCachedRings ( ) ; <nl> } <nl> finally <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / locator / YamlFileNetworkTopologySnitch . java b / src / java / org / apache / cassandra / locator / YamlFileNetworkTopologySnitch . java <nl> index e6691c4 . . b75fc28 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / YamlFileNetworkTopologySnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / YamlFileNetworkTopologySnitch . java <nl> @ @ - 103 , 7 + 103 , 7 @ @ public class YamlFileNetworkTopologySnitch <nl> throws ConfigurationException <nl> { <nl> this . topologyConfigFilename = topologyConfigFilename ; <nl> - loadTopologyConfiguration ( ) ; <nl> + loadTopologyConfiguration ( false ) ; <nl> <nl> try <nl> { <nl> @ @ - 119 , 8 + 119 , 7 @ @ public class YamlFileNetworkTopologySnitch <nl> * / <nl> protected void runMayThrow ( ) throws ConfigurationException <nl> { <nl> - loadTopologyConfiguration ( ) ; <nl> - StorageService . instance . updateTopology ( ) ; <nl> + loadTopologyConfiguration ( true ) ; <nl> } <nl> } ; <nl> ResourceWatcher . watch ( topologyConfigFilename , runnable , <nl> @ @ - 202 , 7 + 201 , 7 @ @ public class YamlFileNetworkTopologySnitch <nl> * @ throws ConfigurationException <nl> * on failure <nl> * / <nl> - private synchronized void loadTopologyConfiguration ( ) <nl> + private synchronized void loadTopologyConfiguration ( boolean isUpdate ) <nl> throws ConfigurationException <nl> { <nl> logger . debug ( " Loading topology configuration from { } " , <nl> @ @ - 354 , 6 + 353 , 9 @ @ public class YamlFileNetworkTopologySnitch <nl> { <nl> StorageService . instance . gossipSnitchInfo ( ) ; <nl> } <nl> + <nl> + if ( isUpdate & & StorageService . instance ! = null ) <nl> + StorageService . instance . updateTopology ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index c5f159e . . 9327b67 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1411 , 7 + 1411 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> public void updateTopology ( ) <nl> { <nl> getTokenMetadata ( ) . updateTopology ( ) ; <nl> - <nl> } <nl> <nl> private void updatePeerInfo ( InetAddress endpoint ) <nl> @ @ - 3670 , 6 + 3669 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> if ( oldSnitch instanceof DynamicEndpointSnitch ) <nl> ( ( DynamicEndpointSnitch ) oldSnitch ) . unregisterMBean ( ) ; <nl> + <nl> + updateTopology ( ) ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 048f6f2 . . 86b55fa 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 52 , 6 + 52 , 7 @ @ dev <nl> * cli support for index queries ( CASSANDRA - 1635 ) <nl> * cli support for updating schema memtable settings ( CASSANDRA - 1634 ) <nl> * reduce automatically chosen memtable sizes by 50 % ( CASSANDRA - 1641 ) <nl> + * move endpoint cache from snitch to strategy ( CASSANDRA - 1643 ) <nl> <nl> <nl> 0 . 7 - beta2 <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index c263bd6 . . 63419f0 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 709 , 14 + 709 , 6 @ @ public class DatabaseDescriptor <nl> return requestSchedulerId ; <nl> } <nl> <nl> - public static Class < ? extends AbstractReplicationStrategy > getReplicaPlacementStrategyClass ( String table ) <nl> - { <nl> - 	 KSMetaData meta = tables . get ( table ) ; <nl> - 	 if ( meta = = null ) <nl> - throw new RuntimeException ( table + " not found . Failure to call loadSchemas ( ) perhaps ? " ) ; <nl> - return meta . strategyClass ; <nl> - } <nl> - <nl> public static KSMetaData getKSMetaData ( String table ) <nl> { <nl> assert table ! = null ; <nl> diff - - git a / src / java / org / apache / cassandra / locator / AbstractEndpointSnitch . java b / src / java / org / apache / cassandra / locator / AbstractEndpointSnitch . java <nl> index c4afaac . . 08126f2 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / AbstractEndpointSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / AbstractEndpointSnitch . java <nl> @ @ - 35 , 27 + 35 , 6 @ @ public abstract class AbstractEndpointSnitch implements IEndpointSnitch <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( AbstractEndpointSnitch . class ) ; <nl> <nl> - / * list of subscribers that are notified when cached values from this snitch are invalidated * / <nl> - protected List < AbstractReplicationStrategy > subscribers = new CopyOnWriteArrayList < AbstractReplicationStrategy > ( ) ; <nl> - <nl> - private final Map < Token , ArrayList < InetAddress > > cachedEndpoints = new NonBlockingHashMap < Token , ArrayList < InetAddress > > ( ) ; <nl> - <nl> - public ArrayList < InetAddress > getCachedEndpoints ( Token t ) <nl> - { <nl> - return cachedEndpoints . get ( t ) ; <nl> - } <nl> - <nl> - public void cacheEndpoint ( Token t , ArrayList < InetAddress > addr ) <nl> - { <nl> - cachedEndpoints . put ( t , addr ) ; <nl> - } <nl> - <nl> - public void clearEndpointCache ( ) <nl> - { <nl> - logger . debug ( " clearing cached endpoints " ) ; <nl> - cachedEndpoints . clear ( ) ; <nl> - } <nl> - <nl> public abstract List < InetAddress > getSortedListByProximity ( InetAddress address , Collection < InetAddress > unsortedAddress ) ; <nl> public abstract void sortByProximity ( InetAddress address , List < InetAddress > addresses ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> index 175f85e . . 0d3ecab 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> + + + b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> @ @ - 19 , 29 + 19 , 23 @ @ <nl> <nl> package org . apache . cassandra . locator ; <nl> <nl> - import java . io . DataInputStream ; <nl> - import java . io . DataOutputStream ; <nl> - import java . io . IOException ; <nl> import java . lang . reflect . Constructor ; <nl> import java . net . InetAddress ; <nl> import java . util . * ; <nl> <nl> - import org . apache . cassandra . config . ConfigurationException ; <nl> - import org . apache . cassandra . service . * ; <nl> - import org . apache . commons . lang . ObjectUtils ; <nl> + import com . google . common . collect . HashMultimap ; <nl> + import com . google . common . collect . Multimap ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import com . google . common . collect . HashMultimap ; <nl> - import com . google . common . collect . Multimap ; <nl> + import org . apache . cassandra . config . ConfigurationException ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . gms . FailureDetector ; <nl> - import org . apache . cassandra . service . StorageProxy ; <nl> + import org . apache . cassandra . service . * ; <nl> import org . apache . cassandra . thrift . ConsistencyLevel ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> - import org . apache . hadoop . util . StringUtils ; <nl> import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; <nl> <nl> / * * <nl> @ @ - 51 , 10 + 45 , 10 @ @ public abstract class AbstractReplicationStrategy <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( AbstractReplicationStrategy . class ) ; <nl> <nl> - public String table ; <nl> - private TokenMetadata tokenMetadata ; <nl> + public final String table ; <nl> + private final TokenMetadata tokenMetadata ; <nl> public final IEndpointSnitch snitch ; <nl> - public Map < String , String > configOptions ; <nl> + public final Map < String , String > configOptions ; <nl> <nl> AbstractReplicationStrategy ( String table , TokenMetadata tokenMetadata , IEndpointSnitch snitch , Map < String , String > configOptions ) <nl> { <nl> @ @ - 68 , 6 + 62 , 24 @ @ public abstract class AbstractReplicationStrategy <nl> this . table = table ; <nl> } <nl> <nl> + private final Map < Token , ArrayList < InetAddress > > cachedEndpoints = new NonBlockingHashMap < Token , ArrayList < InetAddress > > ( ) ; <nl> + <nl> + public ArrayList < InetAddress > getCachedEndpoints ( Token t ) <nl> + { <nl> + return cachedEndpoints . get ( t ) ; <nl> + } <nl> + <nl> + public void cacheEndpoint ( Token t , ArrayList < InetAddress > addr ) <nl> + { <nl> + cachedEndpoints . put ( t , addr ) ; <nl> + } <nl> + <nl> + public void clearEndpointCache ( ) <nl> + { <nl> + logger . debug ( " clearing cached endpoints " ) ; <nl> + cachedEndpoints . clear ( ) ; <nl> + } <nl> + <nl> / * * <nl> * get the ( possibly cached ) endpoints that should store the given Token <nl> * Note that while the endpoints are conceptually a Set ( no duplicates will be included ) , <nl> @ @ - 79 , 13 + 91 , 13 @ @ public abstract class AbstractReplicationStrategy <nl> public ArrayList < InetAddress > getNaturalEndpoints ( Token searchToken ) throws IllegalStateException <nl> { <nl> Token keyToken = TokenMetadata . firstToken ( tokenMetadata . sortedTokens ( ) , searchToken ) ; <nl> - ArrayList < InetAddress > endpoints = snitch . getCachedEndpoints ( keyToken ) ; <nl> + ArrayList < InetAddress > endpoints = getCachedEndpoints ( keyToken ) ; <nl> if ( endpoints = = null ) <nl> { <nl> TokenMetadata tokenMetadataClone = tokenMetadata . cloneOnlyTokenMap ( ) ; <nl> keyToken = TokenMetadata . firstToken ( tokenMetadataClone . sortedTokens ( ) , searchToken ) ; <nl> endpoints = new ArrayList < InetAddress > ( calculateNaturalEndpoints ( searchToken , tokenMetadataClone ) ) ; <nl> - snitch . cacheEndpoint ( keyToken , endpoints ) ; <nl> + cacheEndpoint ( keyToken , endpoints ) ; <nl> / / calculateNaturalEndpoints should have checked this already , this is a safety <nl> assert getReplicationFactor ( ) < = endpoints . size ( ) : String . format ( " endpoints % s generated for RF of % s " , <nl> Arrays . toString ( endpoints . toArray ( ) ) , <nl> @ @ - 220 , 7 + 232 , 7 @ @ public abstract class AbstractReplicationStrategy <nl> <nl> public void invalidateCachedTokenEndpointValues ( ) <nl> { <nl> - snitch . clearEndpointCache ( ) ; <nl> + clearEndpointCache ( ) ; <nl> } <nl> <nl> public static AbstractReplicationStrategy createReplicationStrategy ( String table , <nl> diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> index 3dfc3a3 . . 37de7d5 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> @ @ - 86 , 21 + 86 , 6 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa <nl> } <nl> } <nl> <nl> - public ArrayList < InetAddress > getCachedEndpoints ( Token t ) <nl> - { <nl> - return subsnitch . getCachedEndpoints ( t ) ; <nl> - } <nl> - <nl> - public void cacheEndpoint ( Token t , ArrayList < InetAddress > addr ) <nl> - { <nl> - subsnitch . cacheEndpoint ( t , addr ) ; <nl> - } <nl> - <nl> - public void clearEndpointCache ( ) <nl> - { <nl> - subsnitch . clearEndpointCache ( ) ; <nl> - } <nl> - <nl> public String getRack ( InetAddress endpoint ) <nl> { <nl> return subsnitch . getRack ( endpoint ) ; <nl> diff - - git a / src / java / org / apache / cassandra / locator / IEndpointSnitch . java b / src / java / org / apache / cassandra / locator / IEndpointSnitch . java <nl> index 388fe4c . . 28a7989 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / IEndpointSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / IEndpointSnitch . java <nl> @ @ - 57 , 19 + 57 , 4 @ @ public interface IEndpointSnitch <nl> * compares two endpoints in relation to the target endpoint , returning as Comparator . compare would <nl> * / <nl> public int compareEndpoints ( InetAddress target , InetAddress a1 , InetAddress a2 ) ; <nl> - <nl> - / * * <nl> - * returns a list of cached endpoints for a given token . <nl> - * / <nl> - public ArrayList < InetAddress > getCachedEndpoints ( Token t ) ; <nl> - <nl> - / * * <nl> - * puts an address in the cache for a given token . <nl> - * / <nl> - public void cacheEndpoint ( Token t , ArrayList < InetAddress > addr ) ; <nl> - <nl> - / * * <nl> - * clears all cache values . <nl> - * / <nl> - public void clearEndpointCache ( ) ; <nl> - } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> index 38c12ba . . cedb5fa 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . config . ConfigurationException ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . ResourceWatcher ; <nl> import org . apache . cassandra . utils . WrappedRunnable ; <nl> @ @ - 152 , 6 + 153 , 6 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch <nl> <nl> logger . debug ( " loaded network topology { } " , FBUtilities . toString ( reloadedMap ) ) ; <nl> endpointMap = reloadedMap ; <nl> - clearEndpointCache ( ) ; <nl> + StorageService . instance . getTokenMetadata ( ) . invalidateCaches ( ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> index 70692d3 . . 4a5652d 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> @ @ - 121 , 7 + 121 , 7 @ @ public class TokenMetadata <nl> sortedTokens = sortTokens ( ) ; <nl> } <nl> leavingEndpoints . remove ( endpoint ) ; <nl> - fireTokenToEndpointMapChanged ( ) ; <nl> + invalidateCaches ( ) ; <nl> } <nl> finally <nl> { <nl> @ @ - 197 , 7 + 197 , 7 @ @ public class TokenMetadata <nl> tokenToEndpointMap . inverse ( ) . remove ( endpoint ) ; <nl> leavingEndpoints . remove ( endpoint ) ; <nl> sortedTokens = sortTokens ( ) ; <nl> - fireTokenToEndpointMapChanged ( ) ; <nl> + invalidateCaches ( ) ; <nl> } <nl> finally <nl> { <nl> @ @ - 450 , 7 + 450 , 7 @ @ public class TokenMetadata <nl> tokenToEndpointMap . clear ( ) ; <nl> leavingEndpoints . clear ( ) ; <nl> pendingRanges . clear ( ) ; <nl> - fireTokenToEndpointMapChanged ( ) ; <nl> + invalidateCaches ( ) ; <nl> } <nl> <nl> public String toString ( ) <nl> @ @ - 527 , 7 + 527 , 7 @ @ public class TokenMetadata <nl> return sb . toString ( ) ; <nl> } <nl> <nl> - protected void fireTokenToEndpointMapChanged ( ) <nl> + public void invalidateCaches ( ) <nl> { <nl> for ( AbstractReplicationStrategy subscriber : subscribers ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 1b955bd . . 7f3caa0 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 168 , 7 + 168 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> " request " ) ; <nl> <nl> / * We use this interface to determine where replicas need to be placed * / <nl> - private Map < String , AbstractReplicationStrategy > replicationStrategies ; <nl> + private final Map < String , AbstractReplicationStrategy > replicationStrategies ; <nl> <nl> private Set < InetAddress > replicatingNodes ; <nl> private InetAddress removingNode ; <nl> @ @ - 252 , 10 + 252 , 8 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> public AbstractReplicationStrategy getReplicationStrategy ( String table ) <nl> { <nl> AbstractReplicationStrategy ars = replicationStrategies . get ( table ) ; <nl> - if ( ars = = null ) <nl> - throw new RuntimeException ( String . format ( " No replica strategy configured for % s " , table ) ) ; <nl> - else <nl> - return ars ; <nl> + assert ars ! = null : String . format ( " No replica strategy configured for % s " , table ) ; <nl> + return ars ; <nl> } <nl> <nl> public void initReplicationStrategy ( String table ) <nl> diff - - git a / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java b / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java <nl> index c6d138a . . 731ba82 100644 <nl> - - - a / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java <nl> + + + b / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java <nl> @ @ - 39 , 19 + 39 , 15 @ @ import org . apache . cassandra . service . StorageServiceAccessor ; <nl> public class SimpleStrategyTest extends SchemaLoader <nl> { <nl> @ Test <nl> + public void tryValidTable ( ) <nl> + { <nl> + assert StorageService . instance . getReplicationStrategy ( " Keyspace1 " ) ! = null ; <nl> + } <nl> + <nl> + @ Test ( expected = AssertionError . class ) <nl> public void tryBogusTable ( ) <nl> { <nl> - AbstractReplicationStrategy rs = StorageService . instance . getReplicationStrategy ( " Keyspace1 " ) ; <nl> - assertNotNull ( rs ) ; <nl> - try <nl> - { <nl> - rs = StorageService . instance . getReplicationStrategy ( " SomeBogusTableThatDoesntExist " ) ; <nl> - throw new AssertionError ( " SS . createReplicationStrategy ( ) should have thrown a RuntimeException . " ) ; <nl> - } <nl> - catch ( RuntimeException ex ) <nl> - { <nl> - / / This exception should be thrown . <nl> - } <nl> + StorageService . instance . getReplicationStrategy ( " SomeBogusTableThatDoesntExist " ) ; <nl> } <nl> <nl> @ Test

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 index 745eeb8 . . 5b89df1 100644 
 - - - a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 @ @ - 59 , 7 + 59 , 7 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch 
 
 public PropertyFileSnitch ( ) throws ConfigurationException 
 { 
 - reloadConfiguration ( ) ; 
 + reloadConfiguration ( false ) ; 
 
 try 
 { 
 @ @ - 68 , 8 + 68 , 7 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch 
 { 
 protected void runMayThrow ( ) throws ConfigurationException 
 { 
 - reloadConfiguration ( ) ; 
 - StorageService . instance . updateTopology ( ) ; 
 + reloadConfiguration ( true ) ; 
 } 
 } ; 
 ResourceWatcher . watch ( SNITCH _ PROPERTIES _ FILENAME , runnable , 60 * 1000 ) ; 
 @ @ - 131 , 7 + 130 , 7 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch 
 return info [ 1 ] ; 
 } 
 
 - public void reloadConfiguration ( ) throws ConfigurationException 
 + public void reloadConfiguration ( boolean isUpdate ) throws ConfigurationException 
 { 
 HashMap < InetAddress , String [ ] > reloadedMap = new HashMap < InetAddress , String [ ] > ( ) ; 
 
 @ @ - 198 , 7 + 197 , 12 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch 
 
 endpointMap = reloadedMap ; 
 if ( StorageService . instance ! = null ) / / null check tolerates circular dependency ; see CASSANDRA - 4145 
 - StorageService . instance . getTokenMetadata ( ) . invalidateCachedRings ( ) ; 
 + { 
 + if ( isUpdate ) 
 + StorageService . instance . updateTopology ( ) ; 
 + else 
 + StorageService . instance . getTokenMetadata ( ) . invalidateCachedRings ( ) ; 
 + } 
 
 if ( gossipStarted ) 
 StorageService . instance . gossipSnitchInfo ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 index b1b25e8 . . 25d60f0 100644 
 - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 @ @ - 413 , 6 + 413 , 7 @ @ public class TokenMetadata 
 { 
 logger . info ( " Updating topology for { } " , endpoint ) ; 
 topology . updateEndpoint ( endpoint ) ; 
 + invalidateCachedRings ( ) ; 
 } 
 finally 
 { 
 @ @ - 431 , 6 + 432 , 7 @ @ public class TokenMetadata 
 { 
 logger . info ( " Updating topology for all endpoints that have changed " ) ; 
 topology . updateEndpoints ( ) ; 
 + invalidateCachedRings ( ) ; 
 } 
 finally 
 { 
 diff - - git a / src / java / org / apache / cassandra / locator / YamlFileNetworkTopologySnitch . java b / src / java / org / apache / cassandra / locator / YamlFileNetworkTopologySnitch . java 
 index e6691c4 . . b75fc28 100644 
 - - - a / src / java / org / apache / cassandra / locator / YamlFileNetworkTopologySnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / YamlFileNetworkTopologySnitch . java 
 @ @ - 103 , 7 + 103 , 7 @ @ public class YamlFileNetworkTopologySnitch 
 throws ConfigurationException 
 { 
 this . topologyConfigFilename = topologyConfigFilename ; 
 - loadTopologyConfiguration ( ) ; 
 + loadTopologyConfiguration ( false ) ; 
 
 try 
 { 
 @ @ - 119 , 8 + 119 , 7 @ @ public class YamlFileNetworkTopologySnitch 
 * / 
 protected void runMayThrow ( ) throws ConfigurationException 
 { 
 - loadTopologyConfiguration ( ) ; 
 - StorageService . instance . updateTopology ( ) ; 
 + loadTopologyConfiguration ( true ) ; 
 } 
 } ; 
 ResourceWatcher . watch ( topologyConfigFilename , runnable , 
 @ @ - 202 , 7 + 201 , 7 @ @ public class YamlFileNetworkTopologySnitch 
 * @ throws ConfigurationException 
 * on failure 
 * / 
 - private synchronized void loadTopologyConfiguration ( ) 
 + private synchronized void loadTopologyConfiguration ( boolean isUpdate ) 
 throws ConfigurationException 
 { 
 logger . debug ( " Loading topology configuration from { } " , 
 @ @ - 354 , 6 + 353 , 9 @ @ public class YamlFileNetworkTopologySnitch 
 { 
 StorageService . instance . gossipSnitchInfo ( ) ; 
 } 
 + 
 + if ( isUpdate & & StorageService . instance ! = null ) 
 + StorageService . instance . updateTopology ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index c5f159e . . 9327b67 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1411 , 7 + 1411 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 public void updateTopology ( ) 
 { 
 getTokenMetadata ( ) . updateTopology ( ) ; 
 - 
 } 
 
 private void updatePeerInfo ( InetAddress endpoint ) 
 @ @ - 3670 , 6 + 3669 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 if ( oldSnitch instanceof DynamicEndpointSnitch ) 
 ( ( DynamicEndpointSnitch ) oldSnitch ) . unregisterMBean ( ) ; 
 + 
 + updateTopology ( ) ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 048f6f2 . . 86b55fa 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 52 , 6 + 52 , 7 @ @ dev 
 * cli support for index queries ( CASSANDRA - 1635 ) 
 * cli support for updating schema memtable settings ( CASSANDRA - 1634 ) 
 * reduce automatically chosen memtable sizes by 50 % ( CASSANDRA - 1641 ) 
 + * move endpoint cache from snitch to strategy ( CASSANDRA - 1643 ) 
 
 
 0 . 7 - beta2 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index c263bd6 . . 63419f0 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 709 , 14 + 709 , 6 @ @ public class DatabaseDescriptor 
 return requestSchedulerId ; 
 } 
 
 - public static Class < ? extends AbstractReplicationStrategy > getReplicaPlacementStrategyClass ( String table ) 
 - { 
 - 	 KSMetaData meta = tables . get ( table ) ; 
 - 	 if ( meta = = null ) 
 - throw new RuntimeException ( table + " not found . Failure to call loadSchemas ( ) perhaps ? " ) ; 
 - return meta . strategyClass ; 
 - } 
 - 
 public static KSMetaData getKSMetaData ( String table ) 
 { 
 assert table ! = null ; 
 diff - - git a / src / java / org / apache / cassandra / locator / AbstractEndpointSnitch . java b / src / java / org / apache / cassandra / locator / AbstractEndpointSnitch . java 
 index c4afaac . . 08126f2 100644 
 - - - a / src / java / org / apache / cassandra / locator / AbstractEndpointSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / AbstractEndpointSnitch . java 
 @ @ - 35 , 27 + 35 , 6 @ @ public abstract class AbstractEndpointSnitch implements IEndpointSnitch 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( AbstractEndpointSnitch . class ) ; 
 
 - / * list of subscribers that are notified when cached values from this snitch are invalidated * / 
 - protected List < AbstractReplicationStrategy > subscribers = new CopyOnWriteArrayList < AbstractReplicationStrategy > ( ) ; 
 - 
 - private final Map < Token , ArrayList < InetAddress > > cachedEndpoints = new NonBlockingHashMap < Token , ArrayList < InetAddress > > ( ) ; 
 - 
 - public ArrayList < InetAddress > getCachedEndpoints ( Token t ) 
 - { 
 - return cachedEndpoints . get ( t ) ; 
 - } 
 - 
 - public void cacheEndpoint ( Token t , ArrayList < InetAddress > addr ) 
 - { 
 - cachedEndpoints . put ( t , addr ) ; 
 - } 
 - 
 - public void clearEndpointCache ( ) 
 - { 
 - logger . debug ( " clearing cached endpoints " ) ; 
 - cachedEndpoints . clear ( ) ; 
 - } 
 - 
 public abstract List < InetAddress > getSortedListByProximity ( InetAddress address , Collection < InetAddress > unsortedAddress ) ; 
 public abstract void sortByProximity ( InetAddress address , List < InetAddress > addresses ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 index 175f85e . . 0d3ecab 100644 
 - - - a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 + + + b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 @ @ - 19 , 29 + 19 , 23 @ @ 
 
 package org . apache . cassandra . locator ; 
 
 - import java . io . DataInputStream ; 
 - import java . io . DataOutputStream ; 
 - import java . io . IOException ; 
 import java . lang . reflect . Constructor ; 
 import java . net . InetAddress ; 
 import java . util . * ; 
 
 - import org . apache . cassandra . config . ConfigurationException ; 
 - import org . apache . cassandra . service . * ; 
 - import org . apache . commons . lang . ObjectUtils ; 
 + import com . google . common . collect . HashMultimap ; 
 + import com . google . common . collect . Multimap ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import com . google . common . collect . HashMultimap ; 
 - import com . google . common . collect . Multimap ; 
 + import org . apache . cassandra . config . ConfigurationException ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . gms . FailureDetector ; 
 - import org . apache . cassandra . service . StorageProxy ; 
 + import org . apache . cassandra . service . * ; 
 import org . apache . cassandra . thrift . ConsistencyLevel ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 - import org . apache . hadoop . util . StringUtils ; 
 import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; 
 
 / * * 
 @ @ - 51 , 10 + 45 , 10 @ @ public abstract class AbstractReplicationStrategy 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( AbstractReplicationStrategy . class ) ; 
 
 - public String table ; 
 - private TokenMetadata tokenMetadata ; 
 + public final String table ; 
 + private final TokenMetadata tokenMetadata ; 
 public final IEndpointSnitch snitch ; 
 - public Map < String , String > configOptions ; 
 + public final Map < String , String > configOptions ; 
 
 AbstractReplicationStrategy ( String table , TokenMetadata tokenMetadata , IEndpointSnitch snitch , Map < String , String > configOptions ) 
 { 
 @ @ - 68 , 6 + 62 , 24 @ @ public abstract class AbstractReplicationStrategy 
 this . table = table ; 
 } 
 
 + private final Map < Token , ArrayList < InetAddress > > cachedEndpoints = new NonBlockingHashMap < Token , ArrayList < InetAddress > > ( ) ; 
 + 
 + public ArrayList < InetAddress > getCachedEndpoints ( Token t ) 
 + { 
 + return cachedEndpoints . get ( t ) ; 
 + } 
 + 
 + public void cacheEndpoint ( Token t , ArrayList < InetAddress > addr ) 
 + { 
 + cachedEndpoints . put ( t , addr ) ; 
 + } 
 + 
 + public void clearEndpointCache ( ) 
 + { 
 + logger . debug ( " clearing cached endpoints " ) ; 
 + cachedEndpoints . clear ( ) ; 
 + } 
 + 
 / * * 
 * get the ( possibly cached ) endpoints that should store the given Token 
 * Note that while the endpoints are conceptually a Set ( no duplicates will be included ) , 
 @ @ - 79 , 13 + 91 , 13 @ @ public abstract class AbstractReplicationStrategy 
 public ArrayList < InetAddress > getNaturalEndpoints ( Token searchToken ) throws IllegalStateException 
 { 
 Token keyToken = TokenMetadata . firstToken ( tokenMetadata . sortedTokens ( ) , searchToken ) ; 
 - ArrayList < InetAddress > endpoints = snitch . getCachedEndpoints ( keyToken ) ; 
 + ArrayList < InetAddress > endpoints = getCachedEndpoints ( keyToken ) ; 
 if ( endpoints = = null ) 
 { 
 TokenMetadata tokenMetadataClone = tokenMetadata . cloneOnlyTokenMap ( ) ; 
 keyToken = TokenMetadata . firstToken ( tokenMetadataClone . sortedTokens ( ) , searchToken ) ; 
 endpoints = new ArrayList < InetAddress > ( calculateNaturalEndpoints ( searchToken , tokenMetadataClone ) ) ; 
 - snitch . cacheEndpoint ( keyToken , endpoints ) ; 
 + cacheEndpoint ( keyToken , endpoints ) ; 
 / / calculateNaturalEndpoints should have checked this already , this is a safety 
 assert getReplicationFactor ( ) < = endpoints . size ( ) : String . format ( " endpoints % s generated for RF of % s " , 
 Arrays . toString ( endpoints . toArray ( ) ) , 
 @ @ - 220 , 7 + 232 , 7 @ @ public abstract class AbstractReplicationStrategy 
 
 public void invalidateCachedTokenEndpointValues ( ) 
 { 
 - snitch . clearEndpointCache ( ) ; 
 + clearEndpointCache ( ) ; 
 } 
 
 public static AbstractReplicationStrategy createReplicationStrategy ( String table , 
 diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 index 3dfc3a3 . . 37de7d5 100644 
 - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 @ @ - 86 , 21 + 86 , 6 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa 
 } 
 } 
 
 - public ArrayList < InetAddress > getCachedEndpoints ( Token t ) 
 - { 
 - return subsnitch . getCachedEndpoints ( t ) ; 
 - } 
 - 
 - public void cacheEndpoint ( Token t , ArrayList < InetAddress > addr ) 
 - { 
 - subsnitch . cacheEndpoint ( t , addr ) ; 
 - } 
 - 
 - public void clearEndpointCache ( ) 
 - { 
 - subsnitch . clearEndpointCache ( ) ; 
 - } 
 - 
 public String getRack ( InetAddress endpoint ) 
 { 
 return subsnitch . getRack ( endpoint ) ; 
 diff - - git a / src / java / org / apache / cassandra / locator / IEndpointSnitch . java b / src / java / org / apache / cassandra / locator / IEndpointSnitch . java 
 index 388fe4c . . 28a7989 100644 
 - - - a / src / java / org / apache / cassandra / locator / IEndpointSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / IEndpointSnitch . java 
 @ @ - 57 , 19 + 57 , 4 @ @ public interface IEndpointSnitch 
 * compares two endpoints in relation to the target endpoint , returning as Comparator . compare would 
 * / 
 public int compareEndpoints ( InetAddress target , InetAddress a1 , InetAddress a2 ) ; 
 - 
 - / * * 
 - * returns a list of cached endpoints for a given token . 
 - * / 
 - public ArrayList < InetAddress > getCachedEndpoints ( Token t ) ; 
 - 
 - / * * 
 - * puts an address in the cache for a given token . 
 - * / 
 - public void cacheEndpoint ( Token t , ArrayList < InetAddress > addr ) ; 
 - 
 - / * * 
 - * clears all cache values . 
 - * / 
 - public void clearEndpointCache ( ) ; 
 - } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 index 38c12ba . . cedb5fa 100644 
 - - - a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . config . ConfigurationException ; 
 + import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . ResourceWatcher ; 
 import org . apache . cassandra . utils . WrappedRunnable ; 
 @ @ - 152 , 6 + 153 , 6 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch 
 
 logger . debug ( " loaded network topology { } " , FBUtilities . toString ( reloadedMap ) ) ; 
 endpointMap = reloadedMap ; 
 - clearEndpointCache ( ) ; 
 + StorageService . instance . getTokenMetadata ( ) . invalidateCaches ( ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 index 70692d3 . . 4a5652d 100644 
 - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 @ @ - 121 , 7 + 121 , 7 @ @ public class TokenMetadata 
 sortedTokens = sortTokens ( ) ; 
 } 
 leavingEndpoints . remove ( endpoint ) ; 
 - fireTokenToEndpointMapChanged ( ) ; 
 + invalidateCaches ( ) ; 
 } 
 finally 
 { 
 @ @ - 197 , 7 + 197 , 7 @ @ public class TokenMetadata 
 tokenToEndpointMap . inverse ( ) . remove ( endpoint ) ; 
 leavingEndpoints . remove ( endpoint ) ; 
 sortedTokens = sortTokens ( ) ; 
 - fireTokenToEndpointMapChanged ( ) ; 
 + invalidateCaches ( ) ; 
 } 
 finally 
 { 
 @ @ - 450 , 7 + 450 , 7 @ @ public class TokenMetadata 
 tokenToEndpointMap . clear ( ) ; 
 leavingEndpoints . clear ( ) ; 
 pendingRanges . clear ( ) ; 
 - fireTokenToEndpointMapChanged ( ) ; 
 + invalidateCaches ( ) ; 
 } 
 
 public String toString ( ) 
 @ @ - 527 , 7 + 527 , 7 @ @ public class TokenMetadata 
 return sb . toString ( ) ; 
 } 
 
 - protected void fireTokenToEndpointMapChanged ( ) 
 + public void invalidateCaches ( ) 
 { 
 for ( AbstractReplicationStrategy subscriber : subscribers ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 1b955bd . . 7f3caa0 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 168 , 7 + 168 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 " request " ) ; 
 
 / * We use this interface to determine where replicas need to be placed * / 
 - private Map < String , AbstractReplicationStrategy > replicationStrategies ; 
 + private final Map < String , AbstractReplicationStrategy > replicationStrategies ; 
 
 private Set < InetAddress > replicatingNodes ; 
 private InetAddress removingNode ; 
 @ @ - 252 , 10 + 252 , 8 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 public AbstractReplicationStrategy getReplicationStrategy ( String table ) 
 { 
 AbstractReplicationStrategy ars = replicationStrategies . get ( table ) ; 
 - if ( ars = = null ) 
 - throw new RuntimeException ( String . format ( " No replica strategy configured for % s " , table ) ) ; 
 - else 
 - return ars ; 
 + assert ars ! = null : String . format ( " No replica strategy configured for % s " , table ) ; 
 + return ars ; 
 } 
 
 public void initReplicationStrategy ( String table ) 
 diff - - git a / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java b / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java 
 index c6d138a . . 731ba82 100644 
 - - - a / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java 
 + + + b / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java 
 @ @ - 39 , 19 + 39 , 15 @ @ import org . apache . cassandra . service . StorageServiceAccessor ; 
 public class SimpleStrategyTest extends SchemaLoader 
 { 
 @ Test 
 + public void tryValidTable ( ) 
 + { 
 + assert StorageService . instance . getReplicationStrategy ( " Keyspace1 " ) ! = null ; 
 + } 
 + 
 + @ Test ( expected = AssertionError . class ) 
 public void tryBogusTable ( ) 
 { 
 - AbstractReplicationStrategy rs = StorageService . instance . getReplicationStrategy ( " Keyspace1 " ) ; 
 - assertNotNull ( rs ) ; 
 - try 
 - { 
 - rs = StorageService . instance . getReplicationStrategy ( " SomeBogusTableThatDoesntExist " ) ; 
 - throw new AssertionError ( " SS . createReplicationStrategy ( ) should have thrown a RuntimeException . " ) ; 
 - } 
 - catch ( RuntimeException ex ) 
 - { 
 - / / This exception should be thrown . 
 - } 
 + StorageService . instance . getReplicationStrategy ( " SomeBogusTableThatDoesntExist " ) ; 
 } 
 
 @ Test
