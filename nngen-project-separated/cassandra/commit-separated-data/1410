BLEU SCORE: 0.005126350474233546

TEST MSG: Add custom JMX enabled executor for UDFs
GENERATED MSG: validate UTF8 keys in legacy OPP and COPP . patch by Nick Bailey ; reviewed by Stu Hood and jbellis

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5d3e0d3 . . 7eff824 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 0 - beta1 <nl> + * Add custom JMX enabled executor for UDF sandbox ( CASSANDRA - 10026 ) <nl> * Fix row deletion bug for Materialized Views ( CASSANDRA - 10014 ) <nl> * Support mixed - version clusters with Cassandra 2 . 1 and 2 . 2 ( CASSANDRA - 9704 ) <nl> * Fix multiple slices on RowSearchers ( CASSANDRA - 10002 ) <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / NamedThreadFactory . java b / src / java / org / apache / cassandra / concurrent / NamedThreadFactory . java <nl> index 20570c4 . . 33c80d5 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / NamedThreadFactory . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / NamedThreadFactory . java <nl> @ @ - 28 , 7 + 28 , 7 @ @ import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> public class NamedThreadFactory implements ThreadFactory <nl> { <nl> - protected final String id ; <nl> + public final String id ; <nl> private final int priority ; <nl> private final ClassLoader contextClassLoader ; <nl> private final ThreadGroup threadGroup ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java <nl> index 3d8ebd9 . . 126160d 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java <nl> @ @ - 25 , 35 + 25 , 21 @ @ import java . lang . invoke . MethodHandle ; <nl> import java . lang . invoke . MethodHandles ; <nl> import java . lang . invoke . MethodType ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> - import java . net . MalformedURLException ; <nl> - import java . net . URL ; <nl> - import java . net . URLConnection ; <nl> - import java . net . URLStreamHandler ; <nl> + import java . net . * ; <nl> import java . nio . ByteBuffer ; <nl> - import java . security . CodeSource ; <nl> - import java . security . PermissionCollection ; <nl> - import java . security . ProtectionDomain ; <nl> - import java . security . SecureClassLoader ; <nl> + import java . security . * ; <nl> import java . security . cert . Certificate ; <nl> - import java . util . ArrayList ; <nl> - import java . util . Collections ; <nl> - import java . util . HashMap ; <nl> - import java . util . Iterator ; <nl> - import java . util . List ; <nl> - import java . util . Locale ; <nl> - import java . util . Map ; <nl> - import java . util . Set ; <nl> - import java . util . StringTokenizer ; <nl> - import java . util . concurrent . * ; <nl> + import java . util . * ; <nl> + import java . util . concurrent . ConcurrentHashMap ; <nl> + import java . util . concurrent . ExecutorService ; <nl> + import java . util . concurrent . ThreadLocalRandom ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> import com . google . common . io . ByteStreams ; <nl> - <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import com . datastax . driver . core . DataType ; <nl> - import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; <nl> import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> @ @ - 78 , 12 + 64 , 14 @ @ final class JavaBasedUDFunction extends UDFunction <nl> <nl> private static final AtomicInteger classSequence = new AtomicInteger ( ) ; <nl> <nl> - private static final JMXEnabledThreadPoolExecutor executor = <nl> - new JMXEnabledThreadPoolExecutor ( new NamedThreadFactory ( " UserDefinedFunctions " , <nl> - Thread . MIN _ PRIORITY , <nl> - udfClassLoader , <nl> - new SecurityThreadGroup ( " UserDefinedFunctions " , null ) ) , <nl> - " userfunction " ) ; <nl> + / / use a JVM standard ExecutorService as DebuggableThreadPoolExecutor references internal <nl> + / / classes , which triggers AccessControlException from the UDF sandbox <nl> + private static final UDFExecutorService executor = <nl> + new UDFExecutorService ( new NamedThreadFactory ( " UserDefinedFunctions " , <nl> + Thread . MIN _ PRIORITY , <nl> + udfClassLoader , <nl> + new SecurityThreadGroup ( " UserDefinedFunctions " , null ) ) , <nl> + " userfunction " ) ; <nl> <nl> private static final EcjTargetClassLoader targetClassLoader = new EcjTargetClassLoader ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java <nl> index 8b448fe . . c4faa72 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java <nl> @ @ - 19 , 36 + 19 , 14 @ @ package org . apache . cassandra . cql3 . functions ; <nl> <nl> import java . math . BigDecimal ; <nl> import java . math . BigInteger ; <nl> - import java . net . MalformedURLException ; <nl> - import java . net . URL ; <nl> - import java . net . URLConnection ; <nl> - import java . net . URLStreamHandler ; <nl> + import java . net . * ; <nl> import java . nio . ByteBuffer ; <nl> - import java . security . AccessControlContext ; <nl> - import java . security . AccessController ; <nl> - import java . security . CodeSource ; <nl> - import java . security . PrivilegedActionException ; <nl> - import java . security . PrivilegedExceptionAction ; <nl> - import java . security . ProtectionDomain ; <nl> + import java . security . * ; <nl> import java . security . cert . Certificate ; <nl> - import java . util . Arrays ; <nl> - import java . util . Collections ; <nl> - import java . util . HashMap ; <nl> - import java . util . HashSet ; <nl> - import java . util . List ; <nl> - import java . util . Map ; <nl> + import java . util . * ; <nl> import java . util . concurrent . ExecutorService ; <nl> - import javax . script . Bindings ; <nl> - import javax . script . Compilable ; <nl> - import javax . script . CompiledScript ; <nl> - import javax . script . ScriptContext ; <nl> - import javax . script . ScriptEngine ; <nl> - import javax . script . ScriptEngineFactory ; <nl> - import javax . script . ScriptEngineManager ; <nl> - import javax . script . ScriptException ; <nl> - import javax . script . SimpleScriptContext ; <nl> + import javax . script . * ; <nl> <nl> - import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; <nl> import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> @ @ - 100 , 12 + 78 , 14 @ @ final class ScriptBasedUDFunction extends UDFunction <nl> " com . datastax . driver . core . utils " <nl> } ; <nl> <nl> - private static final JMXEnabledThreadPoolExecutor executor = <nl> - new JMXEnabledThreadPoolExecutor ( new NamedThreadFactory ( " UserDefinedScriptFunctions " , <nl> - Thread . MIN _ PRIORITY , <nl> - udfClassLoader , <nl> - new SecurityThreadGroup ( " UserDefinedScriptFunctions " , Collections . unmodifiableSet ( new HashSet < > ( Arrays . asList ( allowedPackagesArray ) ) ) ) ) , <nl> - " userscripts " ) ; <nl> + / / use a JVM standard ExecutorService as DebuggableThreadPoolExecutor references internal <nl> + / / classes , which triggers AccessControlException from the UDF sandbox <nl> + private static final UDFExecutorService executor = <nl> + new UDFExecutorService ( new NamedThreadFactory ( " UserDefinedScriptFunctions " , <nl> + Thread . MIN _ PRIORITY , <nl> + udfClassLoader , <nl> + new SecurityThreadGroup ( " UserDefinedScriptFunctions " , Collections . unmodifiableSet ( new HashSet < > ( Arrays . asList ( allowedPackagesArray ) ) ) ) ) , <nl> + " userscripts " ) ; <nl> <nl> static <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFExecutorService . java b / src / java / org / apache / cassandra / cql3 / functions / UDFExecutorService . java <nl> new file mode 100644 <nl> index 0000000 . . 5e08ad8 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFExecutorService . java <nl> @ @ - 0 , 0 + 1 , 53 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 . functions ; <nl> + <nl> + import java . util . concurrent . LinkedBlockingQueue ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + <nl> + import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; <nl> + import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + <nl> + / * * <nl> + * Executor service which exposes stats via JMX , but which doesn ' t reference <nl> + * internal classes in its beforeExecute & afterExecute methods as these are <nl> + * forbidden by the UDF execution sandbox <nl> + * / <nl> + final class UDFExecutorService extends JMXEnabledThreadPoolExecutor <nl> + { <nl> + private static int KEEPALIVE = Integer . getInteger ( " cassandra . udf _ executor _ thread _ keepalive _ ms " , 30000 ) ; <nl> + <nl> + UDFExecutorService ( NamedThreadFactory threadFactory , String jmxPath ) <nl> + { <nl> + super ( FBUtilities . getAvailableProcessors ( ) , <nl> + KEEPALIVE , <nl> + TimeUnit . MILLISECONDS , <nl> + new LinkedBlockingQueue < > ( ) , <nl> + threadFactory , <nl> + jmxPath ) ; <nl> + } <nl> + <nl> + protected void afterExecute ( Runnable r , Throwable t ) <nl> + { <nl> + } <nl> + <nl> + protected void beforeExecute ( Thread t , Runnable r ) <nl> + { <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java b / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java <nl> index 7fb9dd0 . . 76b878b 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java <nl> + + + b / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra . dht ; <nl> <nl> import java . math . BigInteger ; <nl> + import java . nio . charset . CharacterCodingException ; <nl> import java . text . Collator ; <nl> import java . util . Arrays ; <nl> import java . util . Comparator ; <nl> @ @ - 39 , 7 + 40 , 16 @ @ public class CollatingOrderPreservingPartitioner extends AbstractByteOrderedPart <nl> { <nl> if ( key . length = = 0 ) <nl> return MINIMUM ; <nl> - String skey = new String ( key , FBUtilities . UTF8 ) ; <nl> + <nl> + String skey ; <nl> + try <nl> + { <nl> + skey = FBUtilities . decodeToUTF8 ( key ) ; <nl> + } <nl> + catch ( CharacterCodingException e ) <nl> + { <nl> + throw new RuntimeException ( " The provided key was not UTF8 encoded . " , e ) ; <nl> + } <nl> return new BytesToken ( collator . getCollationKey ( skey ) . toByteArray ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java b / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java <nl> index 9e1522e . . 27aa614 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java <nl> + + + b / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . dht ; <nl> <nl> import java . io . UnsupportedEncodingException ; <nl> import java . math . BigInteger ; <nl> + import java . nio . charset . CharacterCodingException ; <nl> import java . util . Arrays ; <nl> import java . util . Comparator ; <nl> import java . util . Random ; <nl> @ @ - 163 , 6 + 164 , 15 @ @ public class OrderPreservingPartitioner implements IPartitioner < StringToken > <nl> <nl> public StringToken getToken ( byte [ ] key ) <nl> { <nl> - return new StringToken ( new String ( key , FBUtilities . UTF8 ) ) ; <nl> + String skey ; <nl> + try <nl> + { <nl> + skey = FBUtilities . decodeToUTF8 ( key ) ; <nl> + } <nl> + catch ( CharacterCodingException e ) <nl> + { <nl> + throw new RuntimeException ( " The provided key was not UTF8 encoded . " , e ) ; <nl> + } <nl> + return new StringToken ( skey ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index e6fce1f . . e2ffb2f 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 27 , 7 + 27 , 9 @ @ import java . net . InetAddress ; <nl> import java . net . URL ; <nl> import java . net . UnknownHostException ; <nl> import java . nio . ByteBuffer ; <nl> + import java . nio . charset . CharacterCodingException ; <nl> import java . nio . charset . Charset ; <nl> + import java . nio . charset . CharsetDecoder ; <nl> import java . security . MessageDigest ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> @ @ - 37 , 6 + 39 , 7 @ @ import java . util . concurrent . atomic . AtomicInteger ; <nl> import java . util . concurrent . atomic . AtomicLong ; <nl> import java . util . concurrent . atomic . AtomicReference ; <nl> <nl> + import com . google . common . base . Charsets ; <nl> import org . apache . commons . collections . iterators . CollatingIterator ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 63 , 6 + 66 , 7 @ @ public class FBUtilities <nl> private static volatile InetAddress localInetAddress _ ; <nl> <nl> public static final int MAX _ UNSIGNED _ SHORT = 0xFFFF ; <nl> + public static final CharsetDecoder utf8Decoder = Charsets . UTF _ 8 . newDecoder ( ) ; <nl> <nl> public static Charset UTF8 ; <nl> static <nl> @ @ - 480 , 6 + 484 , 11 @ @ public class FBUtilities <nl> return utflen ; <nl> } <nl> <nl> + public static String decodeToUTF8 ( byte [ ] bytes ) throws CharacterCodingException <nl> + { <nl> + return utf8Decoder . decode ( ByteBuffer . wrap ( bytes ) ) . toString ( ) ; <nl> + } <nl> + <nl> / * * <nl> * Test if a particular bit is set using a bit mask . <nl> * <nl> diff - - git a / test / unit / org / apache / cassandra / utils / FBUtilitiesTest . java b / test / unit / org / apache / cassandra / utils / FBUtilitiesTest . java <nl> index 216f41d . . 7ad79b7 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / FBUtilitiesTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / FBUtilitiesTest . java <nl> @ @ - 21 , 6 + 21 , 8 @ @ package org . apache . cassandra . utils ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> <nl> + import java . io . IOException ; <nl> + import java . nio . charset . CharacterCodingException ; <nl> import java . util . concurrent . atomic . AtomicReference ; <nl> <nl> import org . apache . cassandra . db . IClock ; <nl> @ @ - 80 , 4 + 82 , 11 @ @ public class FBUtilitiesTest <nl> FBUtilities . atomicSetMax ( atomicClock , new TimestampClock ( 3L ) ) ; <nl> assert ( ( TimestampClock ) atomicClock . get ( ) ) . timestamp ( ) = = 9L ; <nl> } <nl> + <nl> + @ Test ( expected = CharacterCodingException . class ) <nl> + public void testDecode ( ) throws IOException <nl> + { <nl> + byte [ ] bytes = new byte [ ] { ( byte ) 0xff , ( byte ) 0xfe } ; <nl> + FBUtilities . decodeToUTF8 ( bytes ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5d3e0d3 . . 7eff824 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 0 - beta1 
 + * Add custom JMX enabled executor for UDF sandbox ( CASSANDRA - 10026 ) 
 * Fix row deletion bug for Materialized Views ( CASSANDRA - 10014 ) 
 * Support mixed - version clusters with Cassandra 2 . 1 and 2 . 2 ( CASSANDRA - 9704 ) 
 * Fix multiple slices on RowSearchers ( CASSANDRA - 10002 ) 
 diff - - git a / src / java / org / apache / cassandra / concurrent / NamedThreadFactory . java b / src / java / org / apache / cassandra / concurrent / NamedThreadFactory . java 
 index 20570c4 . . 33c80d5 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / NamedThreadFactory . java 
 + + + b / src / java / org / apache / cassandra / concurrent / NamedThreadFactory . java 
 @ @ - 28 , 7 + 28 , 7 @ @ import java . util . concurrent . atomic . AtomicInteger ; 
 
 public class NamedThreadFactory implements ThreadFactory 
 { 
 - protected final String id ; 
 + public final String id ; 
 private final int priority ; 
 private final ClassLoader contextClassLoader ; 
 private final ThreadGroup threadGroup ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java 
 index 3d8ebd9 . . 126160d 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / JavaBasedUDFunction . java 
 @ @ - 25 , 35 + 25 , 21 @ @ import java . lang . invoke . MethodHandle ; 
 import java . lang . invoke . MethodHandles ; 
 import java . lang . invoke . MethodType ; 
 import java . lang . reflect . InvocationTargetException ; 
 - import java . net . MalformedURLException ; 
 - import java . net . URL ; 
 - import java . net . URLConnection ; 
 - import java . net . URLStreamHandler ; 
 + import java . net . * ; 
 import java . nio . ByteBuffer ; 
 - import java . security . CodeSource ; 
 - import java . security . PermissionCollection ; 
 - import java . security . ProtectionDomain ; 
 - import java . security . SecureClassLoader ; 
 + import java . security . * ; 
 import java . security . cert . Certificate ; 
 - import java . util . ArrayList ; 
 - import java . util . Collections ; 
 - import java . util . HashMap ; 
 - import java . util . Iterator ; 
 - import java . util . List ; 
 - import java . util . Locale ; 
 - import java . util . Map ; 
 - import java . util . Set ; 
 - import java . util . StringTokenizer ; 
 - import java . util . concurrent . * ; 
 + import java . util . * ; 
 + import java . util . concurrent . ConcurrentHashMap ; 
 + import java . util . concurrent . ExecutorService ; 
 + import java . util . concurrent . ThreadLocalRandom ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 import com . google . common . io . ByteStreams ; 
 - 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import com . datastax . driver . core . DataType ; 
 - import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; 
 import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 @ @ - 78 , 12 + 64 , 14 @ @ final class JavaBasedUDFunction extends UDFunction 
 
 private static final AtomicInteger classSequence = new AtomicInteger ( ) ; 
 
 - private static final JMXEnabledThreadPoolExecutor executor = 
 - new JMXEnabledThreadPoolExecutor ( new NamedThreadFactory ( " UserDefinedFunctions " , 
 - Thread . MIN _ PRIORITY , 
 - udfClassLoader , 
 - new SecurityThreadGroup ( " UserDefinedFunctions " , null ) ) , 
 - " userfunction " ) ; 
 + / / use a JVM standard ExecutorService as DebuggableThreadPoolExecutor references internal 
 + / / classes , which triggers AccessControlException from the UDF sandbox 
 + private static final UDFExecutorService executor = 
 + new UDFExecutorService ( new NamedThreadFactory ( " UserDefinedFunctions " , 
 + Thread . MIN _ PRIORITY , 
 + udfClassLoader , 
 + new SecurityThreadGroup ( " UserDefinedFunctions " , null ) ) , 
 + " userfunction " ) ; 
 
 private static final EcjTargetClassLoader targetClassLoader = new EcjTargetClassLoader ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java 
 index 8b448fe . . c4faa72 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / ScriptBasedUDFunction . java 
 @ @ - 19 , 36 + 19 , 14 @ @ package org . apache . cassandra . cql3 . functions ; 
 
 import java . math . BigDecimal ; 
 import java . math . BigInteger ; 
 - import java . net . MalformedURLException ; 
 - import java . net . URL ; 
 - import java . net . URLConnection ; 
 - import java . net . URLStreamHandler ; 
 + import java . net . * ; 
 import java . nio . ByteBuffer ; 
 - import java . security . AccessControlContext ; 
 - import java . security . AccessController ; 
 - import java . security . CodeSource ; 
 - import java . security . PrivilegedActionException ; 
 - import java . security . PrivilegedExceptionAction ; 
 - import java . security . ProtectionDomain ; 
 + import java . security . * ; 
 import java . security . cert . Certificate ; 
 - import java . util . Arrays ; 
 - import java . util . Collections ; 
 - import java . util . HashMap ; 
 - import java . util . HashSet ; 
 - import java . util . List ; 
 - import java . util . Map ; 
 + import java . util . * ; 
 import java . util . concurrent . ExecutorService ; 
 - import javax . script . Bindings ; 
 - import javax . script . Compilable ; 
 - import javax . script . CompiledScript ; 
 - import javax . script . ScriptContext ; 
 - import javax . script . ScriptEngine ; 
 - import javax . script . ScriptEngineFactory ; 
 - import javax . script . ScriptEngineManager ; 
 - import javax . script . ScriptException ; 
 - import javax . script . SimpleScriptContext ; 
 + import javax . script . * ; 
 
 - import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; 
 import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 @ @ - 100 , 12 + 78 , 14 @ @ final class ScriptBasedUDFunction extends UDFunction 
 " com . datastax . driver . core . utils " 
 } ; 
 
 - private static final JMXEnabledThreadPoolExecutor executor = 
 - new JMXEnabledThreadPoolExecutor ( new NamedThreadFactory ( " UserDefinedScriptFunctions " , 
 - Thread . MIN _ PRIORITY , 
 - udfClassLoader , 
 - new SecurityThreadGroup ( " UserDefinedScriptFunctions " , Collections . unmodifiableSet ( new HashSet < > ( Arrays . asList ( allowedPackagesArray ) ) ) ) ) , 
 - " userscripts " ) ; 
 + / / use a JVM standard ExecutorService as DebuggableThreadPoolExecutor references internal 
 + / / classes , which triggers AccessControlException from the UDF sandbox 
 + private static final UDFExecutorService executor = 
 + new UDFExecutorService ( new NamedThreadFactory ( " UserDefinedScriptFunctions " , 
 + Thread . MIN _ PRIORITY , 
 + udfClassLoader , 
 + new SecurityThreadGroup ( " UserDefinedScriptFunctions " , Collections . unmodifiableSet ( new HashSet < > ( Arrays . asList ( allowedPackagesArray ) ) ) ) ) , 
 + " userscripts " ) ; 
 
 static 
 { 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFExecutorService . java b / src / java / org / apache / cassandra / cql3 / functions / UDFExecutorService . java 
 new file mode 100644 
 index 0000000 . . 5e08ad8 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFExecutorService . java 
 @ @ - 0 , 0 + 1 , 53 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 . functions ; 
 + 
 + import java . util . concurrent . LinkedBlockingQueue ; 
 + import java . util . concurrent . TimeUnit ; 
 + 
 + import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; 
 + import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + 
 + / * * 
 + * Executor service which exposes stats via JMX , but which doesn ' t reference 
 + * internal classes in its beforeExecute & afterExecute methods as these are 
 + * forbidden by the UDF execution sandbox 
 + * / 
 + final class UDFExecutorService extends JMXEnabledThreadPoolExecutor 
 + { 
 + private static int KEEPALIVE = Integer . getInteger ( " cassandra . udf _ executor _ thread _ keepalive _ ms " , 30000 ) ; 
 + 
 + UDFExecutorService ( NamedThreadFactory threadFactory , String jmxPath ) 
 + { 
 + super ( FBUtilities . getAvailableProcessors ( ) , 
 + KEEPALIVE , 
 + TimeUnit . MILLISECONDS , 
 + new LinkedBlockingQueue < > ( ) , 
 + threadFactory , 
 + jmxPath ) ; 
 + } 
 + 
 + protected void afterExecute ( Runnable r , Throwable t ) 
 + { 
 + } 
 + 
 + protected void beforeExecute ( Thread t , Runnable r ) 
 + { 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java b / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java 
 index 7fb9dd0 . . 76b878b 100644 
 - - - a / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java 
 + + + b / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra . dht ; 
 
 import java . math . BigInteger ; 
 + import java . nio . charset . CharacterCodingException ; 
 import java . text . Collator ; 
 import java . util . Arrays ; 
 import java . util . Comparator ; 
 @ @ - 39 , 7 + 40 , 16 @ @ public class CollatingOrderPreservingPartitioner extends AbstractByteOrderedPart 
 { 
 if ( key . length = = 0 ) 
 return MINIMUM ; 
 - String skey = new String ( key , FBUtilities . UTF8 ) ; 
 + 
 + String skey ; 
 + try 
 + { 
 + skey = FBUtilities . decodeToUTF8 ( key ) ; 
 + } 
 + catch ( CharacterCodingException e ) 
 + { 
 + throw new RuntimeException ( " The provided key was not UTF8 encoded . " , e ) ; 
 + } 
 return new BytesToken ( collator . getCollationKey ( skey ) . toByteArray ( ) ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java b / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java 
 index 9e1522e . . 27aa614 100644 
 - - - a / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java 
 + + + b / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . dht ; 
 
 import java . io . UnsupportedEncodingException ; 
 import java . math . BigInteger ; 
 + import java . nio . charset . CharacterCodingException ; 
 import java . util . Arrays ; 
 import java . util . Comparator ; 
 import java . util . Random ; 
 @ @ - 163 , 6 + 164 , 15 @ @ public class OrderPreservingPartitioner implements IPartitioner < StringToken > 
 
 public StringToken getToken ( byte [ ] key ) 
 { 
 - return new StringToken ( new String ( key , FBUtilities . UTF8 ) ) ; 
 + String skey ; 
 + try 
 + { 
 + skey = FBUtilities . decodeToUTF8 ( key ) ; 
 + } 
 + catch ( CharacterCodingException e ) 
 + { 
 + throw new RuntimeException ( " The provided key was not UTF8 encoded . " , e ) ; 
 + } 
 + return new StringToken ( skey ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index e6fce1f . . e2ffb2f 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 27 , 7 + 27 , 9 @ @ import java . net . InetAddress ; 
 import java . net . URL ; 
 import java . net . UnknownHostException ; 
 import java . nio . ByteBuffer ; 
 + import java . nio . charset . CharacterCodingException ; 
 import java . nio . charset . Charset ; 
 + import java . nio . charset . CharsetDecoder ; 
 import java . security . MessageDigest ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 @ @ - 37 , 6 + 39 , 7 @ @ import java . util . concurrent . atomic . AtomicInteger ; 
 import java . util . concurrent . atomic . AtomicLong ; 
 import java . util . concurrent . atomic . AtomicReference ; 
 
 + import com . google . common . base . Charsets ; 
 import org . apache . commons . collections . iterators . CollatingIterator ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 63 , 6 + 66 , 7 @ @ public class FBUtilities 
 private static volatile InetAddress localInetAddress _ ; 
 
 public static final int MAX _ UNSIGNED _ SHORT = 0xFFFF ; 
 + public static final CharsetDecoder utf8Decoder = Charsets . UTF _ 8 . newDecoder ( ) ; 
 
 public static Charset UTF8 ; 
 static 
 @ @ - 480 , 6 + 484 , 11 @ @ public class FBUtilities 
 return utflen ; 
 } 
 
 + public static String decodeToUTF8 ( byte [ ] bytes ) throws CharacterCodingException 
 + { 
 + return utf8Decoder . decode ( ByteBuffer . wrap ( bytes ) ) . toString ( ) ; 
 + } 
 + 
 / * * 
 * Test if a particular bit is set using a bit mask . 
 * 
 diff - - git a / test / unit / org / apache / cassandra / utils / FBUtilitiesTest . java b / test / unit / org / apache / cassandra / utils / FBUtilitiesTest . java 
 index 216f41d . . 7ad79b7 100644 
 - - - a / test / unit / org / apache / cassandra / utils / FBUtilitiesTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / FBUtilitiesTest . java 
 @ @ - 21 , 6 + 21 , 8 @ @ package org . apache . cassandra . utils ; 
 import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 
 + import java . io . IOException ; 
 + import java . nio . charset . CharacterCodingException ; 
 import java . util . concurrent . atomic . AtomicReference ; 
 
 import org . apache . cassandra . db . IClock ; 
 @ @ - 80 , 4 + 82 , 11 @ @ public class FBUtilitiesTest 
 FBUtilities . atomicSetMax ( atomicClock , new TimestampClock ( 3L ) ) ; 
 assert ( ( TimestampClock ) atomicClock . get ( ) ) . timestamp ( ) = = 9L ; 
 } 
 + 
 + @ Test ( expected = CharacterCodingException . class ) 
 + public void testDecode ( ) throws IOException 
 + { 
 + byte [ ] bytes = new byte [ ] { ( byte ) 0xff , ( byte ) 0xfe } ; 
 + FBUtilities . decodeToUTF8 ( bytes ) ; 
 + } 
 }
