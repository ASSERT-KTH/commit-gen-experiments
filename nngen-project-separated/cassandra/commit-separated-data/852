BLEU SCORE: 0.02133165846478451

TEST MSG: entry - weighers in QueryProcessor should respect partitionKeyBindIndexes field
GENERATED MSG: Limit CQL prepared statement cache by size instead of count

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 627f905 . . 1426507 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 8 <nl> + * entry - weighers in QueryProcessor should respect partitionKeyBindIndexes field ( CASSANDRA - 11718 ) <nl> * Support older ant versions ( CASSANDRA - 11807 ) <nl> * Estimate compressed on disk size when deciding if sstable size limit reached ( CASSANDRA - 11623 ) <nl> * cassandra - stress profiles should support case sensitive schemas ( CASSANDRA - 11546 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index feedfc4 . . d812af4 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 55 , 7 + 55 , 6 @ @ import org . apache . cassandra . tracing . Tracing ; <nl> import org . apache . cassandra . transport . Server ; <nl> import org . apache . cassandra . transport . messages . ResultMessage ; <nl> import org . apache . cassandra . utils . * ; <nl> - import org . github . jamm . MemoryMeter ; <nl> <nl> public class QueryProcessor implements QueryHandler <nl> { <nl> @ @ - 64 , 25 + 63 , 6 @ @ public class QueryProcessor implements QueryHandler <nl> public static final QueryProcessor instance = new QueryProcessor ( ) ; <nl> <nl> private static final Logger logger = LoggerFactory . getLogger ( QueryProcessor . class ) ; <nl> - private static final MemoryMeter meter = new MemoryMeter ( ) . withGuessing ( MemoryMeter . Guess . FALLBACK _ BEST ) . ignoreKnownSingletons ( ) ; <nl> - <nl> - private static final EntryWeigher < MD5Digest , ParsedStatement . Prepared > cqlMemoryUsageWeigher = new EntryWeigher < MD5Digest , ParsedStatement . Prepared > ( ) <nl> - { <nl> - @ Override <nl> - public int weightOf ( MD5Digest key , ParsedStatement . Prepared value ) <nl> - { <nl> - return Ints . checkedCast ( measure ( key ) + measure ( value . rawCQLStatement ) + measure ( value . statement ) + measure ( value . boundNames ) ) ; <nl> - } <nl> - } ; <nl> - <nl> - private static final EntryWeigher < Integer , ParsedStatement . Prepared > thriftMemoryUsageWeigher = new EntryWeigher < Integer , ParsedStatement . Prepared > ( ) <nl> - { <nl> - @ Override <nl> - public int weightOf ( Integer key , ParsedStatement . Prepared value ) <nl> - { <nl> - return Ints . checkedCast ( measure ( key ) + measure ( value . rawCQLStatement ) + measure ( value . statement ) + measure ( value . boundNames ) ) ; <nl> - } <nl> - } ; <nl> <nl> private static final ConcurrentLinkedHashMap < MD5Digest , ParsedStatement . Prepared > preparedStatements ; <nl> private static final ConcurrentLinkedHashMap < Integer , ParsedStatement . Prepared > thriftPreparedStatements ; <nl> @ @ - 102 , 7 + 82 , 7 @ @ public class QueryProcessor implements QueryHandler <nl> { <nl> preparedStatements = new ConcurrentLinkedHashMap . Builder < MD5Digest , ParsedStatement . Prepared > ( ) <nl> . maximumWeightedCapacity ( capacityToBytes ( DatabaseDescriptor . getPreparedStatementsCacheSizeMB ( ) ) ) <nl> - . weigher ( cqlMemoryUsageWeigher ) <nl> + . weigher ( QueryProcessor : : measure ) <nl> . listener ( ( md5Digest , prepared ) - > { <nl> metrics . preparedStatementsEvicted . inc ( ) ; <nl> lastMinuteEvictionsCount . incrementAndGet ( ) ; <nl> @ @ - 110 , 7 + 90 , 7 @ @ public class QueryProcessor implements QueryHandler <nl> <nl> thriftPreparedStatements = new ConcurrentLinkedHashMap . Builder < Integer , ParsedStatement . Prepared > ( ) <nl> . maximumWeightedCapacity ( capacityToBytes ( DatabaseDescriptor . getThriftPreparedStatementsCacheSizeMB ( ) ) ) <nl> - . weigher ( thriftMemoryUsageWeigher ) <nl> + . weigher ( QueryProcessor : : measure ) <nl> . listener ( ( integer , prepared ) - > { <nl> metrics . preparedStatementsEvicted . inc ( ) ; <nl> thriftLastMinuteEvictionsCount . incrementAndGet ( ) ; <nl> @ @ - 429 , 7 + 409 , 7 @ @ public class QueryProcessor implements QueryHandler <nl> { <nl> / / Concatenate the current keyspace so we don ' t mix prepared statements between keyspace
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1590dd0 . . 94fa927 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 2 <nl> + * Never return WriteTimeout for CL . ANY ( CASSANDRA - 6032 ) <nl> * Fix race conditions in bulk loader ( CASSANDRA - 6129 ) <nl> * Add configurable metrics reporting ( CASSANDRA - 4430 ) <nl> * drop queries exceeding a configurable number of tombstones ( CASSANDRA - 6117 ) <nl> @ @ - 19 , 7 + 20 , 7 @ @ <nl> * Disallow empty column names in cql ( CASSANDRA - 6136 ) <nl> * Use Java7 file - handling APIs and fix file moving on Windows ( CASSANDRA - 5383 ) <nl> Merged from 1 . 2 : <nl> - * Never return WriteTimeout for CL . ANY ( CASSANDRA - 6032 ) <nl> + * Limit CQL prepared statement cache by size instead of count ( CASSANDRA - 6107 ) <nl> * Tracing should log write failure rather than raw exceptions ( CASSANDRA - 6133 ) <nl> * lock access to TM . endpointToHostIdMap ( CASSANDRA - 6103 ) <nl> * Allow estimated memtable size to exceed slab allocator size ( CASSANDRA - 6078 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index 52396e7 . . 72351d5 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 20 , 8 + 20 , 12 @ @ package org . apache . cassandra . cql3 ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> + import com . google . common . primitives . Ints ; <nl> + <nl> import com . googlecode . concurrentlinkedhashmap . ConcurrentLinkedHashMap ; <nl> + import com . googlecode . concurrentlinkedhashmap . EntryWeigher ; <nl> import org . antlr . runtime . * ; <nl> + import org . github . jamm . MemoryMeter ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 41 , 15 + 45 , 36 @ @ public class QueryProcessor <nl> public static final SemanticVersion CQL _ VERSION = new SemanticVersion ( " 3 . 1 . 1 " ) ; <nl> <nl> private static final Logger logger = LoggerFactory . getLogger ( QueryProcessor . class ) ; <nl> + private static final MemoryMeter meter = new MemoryMeter ( ) ; <nl> + private static final long MAX _ CACHE _ PREPARED _ MEMORY = Runtime . getRuntime ( ) . maxMemory ( ) / 256 ; <nl> <nl> - public static final int MAX _ CACHE _ PREPARED = 100000 ; / / Enough to keep buggy clients from OOM ' ing us <nl> - private static final Map < MD5Digest , CQLStatement > preparedStatements = new ConcurrentLinkedHashMap . Builder < MD5Digest , CQLStatement > ( ) <nl> - . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED ) <nl> - . build ( ) ; <nl> + private static EntryWeigher < MD5Digest , CQLStatement > cqlMemoryUsageWeigher = new EntryWeigher < MD5Digest , CQLStatement > ( ) <nl> + { <nl> + @ Override <nl> + public int weightOf ( MD5Digest key , CQLStatement value ) <nl> + { <nl> + return Ints . checkedCast ( meter . measureDeep ( key ) + meter . measureDeep ( value ) ) ; <nl> + } <nl> + } ; <nl> <nl> - private static final Map < Integer , CQLStatement > thriftPreparedStatements = new ConcurrentLinkedHashMap . Builder < Integer , CQLStatement > ( ) <nl> - . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED ) <nl> - . build ( ) ; <nl> + private static final ConcurrentLinkedHashMap < MD5Digest , CQLStatement > preparedStatements = new ConcurrentLinkedHashMap . Builder < MD5Digest , CQLStatement > ( ) <nl> + . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ MEMORY ) <nl> + . weigher ( cqlMemoryUsageWeigher ) <nl> + . build ( ) ; <nl> + <nl> + private static EntryWeigher < Integer , CQLStatement > thriftMemoryUsageWeigher = new EntryWeigher < Integer , CQLStatement > ( ) <nl> + { <nl> + @ Override <nl> + public int weightOf ( Integer key , CQLStatement value ) <nl> + { <nl> + return Ints . checkedCast ( meter . measureDeep ( key ) + meter . measureDeep ( value ) ) ; <nl> + } <nl> + } ; <nl> + <nl> + private static final ConcurrentLinkedHashMap < Integer , CQLStatement > thriftPreparedStatements = new ConcurrentLinkedHashMap . Builder < Integer , CQLStatement > ( ) <nl> + . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ MEMORY ) <nl> + . weigher ( thriftMemoryUsageWeigher ) <nl> + . build ( ) ; <nl> <nl> <nl> public static CQLStatement getPrepared ( MD5Digest id ) <nl> @ @ - 188 , 10 + 213 , 18 @ @ public class QueryProcessor <nl> } <nl> <nl> private static ResultMessage . Prepared storePreparedStatement ( String queryString , String keyspace , ParsedStatement . Prepared prepared , boolean forThrift ) <nl> + throws InvalidRequestException <nl> { <nl> / / Concatenate the current keyspace so we don ' t mix prepared statements between keyspace

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 627f905 . . 1426507 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 8 
 + * entry - weighers in QueryProcessor should respect partitionKeyBindIndexes field ( CASSANDRA - 11718 ) 
 * Support older ant versions ( CASSANDRA - 11807 ) 
 * Estimate compressed on disk size when deciding if sstable size limit reached ( CASSANDRA - 11623 ) 
 * cassandra - stress profiles should support case sensitive schemas ( CASSANDRA - 11546 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index feedfc4 . . d812af4 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 55 , 7 + 55 , 6 @ @ import org . apache . cassandra . tracing . Tracing ; 
 import org . apache . cassandra . transport . Server ; 
 import org . apache . cassandra . transport . messages . ResultMessage ; 
 import org . apache . cassandra . utils . * ; 
 - import org . github . jamm . MemoryMeter ; 
 
 public class QueryProcessor implements QueryHandler 
 { 
 @ @ - 64 , 25 + 63 , 6 @ @ public class QueryProcessor implements QueryHandler 
 public static final QueryProcessor instance = new QueryProcessor ( ) ; 
 
 private static final Logger logger = LoggerFactory . getLogger ( QueryProcessor . class ) ; 
 - private static final MemoryMeter meter = new MemoryMeter ( ) . withGuessing ( MemoryMeter . Guess . FALLBACK _ BEST ) . ignoreKnownSingletons ( ) ; 
 - 
 - private static final EntryWeigher < MD5Digest , ParsedStatement . Prepared > cqlMemoryUsageWeigher = new EntryWeigher < MD5Digest , ParsedStatement . Prepared > ( ) 
 - { 
 - @ Override 
 - public int weightOf ( MD5Digest key , ParsedStatement . Prepared value ) 
 - { 
 - return Ints . checkedCast ( measure ( key ) + measure ( value . rawCQLStatement ) + measure ( value . statement ) + measure ( value . boundNames ) ) ; 
 - } 
 - } ; 
 - 
 - private static final EntryWeigher < Integer , ParsedStatement . Prepared > thriftMemoryUsageWeigher = new EntryWeigher < Integer , ParsedStatement . Prepared > ( ) 
 - { 
 - @ Override 
 - public int weightOf ( Integer key , ParsedStatement . Prepared value ) 
 - { 
 - return Ints . checkedCast ( measure ( key ) + measure ( value . rawCQLStatement ) + measure ( value . statement ) + measure ( value . boundNames ) ) ; 
 - } 
 - } ; 
 
 private static final ConcurrentLinkedHashMap < MD5Digest , ParsedStatement . Prepared > preparedStatements ; 
 private static final ConcurrentLinkedHashMap < Integer , ParsedStatement . Prepared > thriftPreparedStatements ; 
 @ @ - 102 , 7 + 82 , 7 @ @ public class QueryProcessor implements QueryHandler 
 { 
 preparedStatements = new ConcurrentLinkedHashMap . Builder < MD5Digest , ParsedStatement . Prepared > ( ) 
 . maximumWeightedCapacity ( capacityToBytes ( DatabaseDescriptor . getPreparedStatementsCacheSizeMB ( ) ) ) 
 - . weigher ( cqlMemoryUsageWeigher ) 
 + . weigher ( QueryProcessor : : measure ) 
 . listener ( ( md5Digest , prepared ) - > { 
 metrics . preparedStatementsEvicted . inc ( ) ; 
 lastMinuteEvictionsCount . incrementAndGet ( ) ; 
 @ @ - 110 , 7 + 90 , 7 @ @ public class QueryProcessor implements QueryHandler 
 
 thriftPreparedStatements = new ConcurrentLinkedHashMap . Builder < Integer , ParsedStatement . Prepared > ( ) 
 . maximumWeightedCapacity ( capacityToBytes ( DatabaseDescriptor . getThriftPreparedStatementsCacheSizeMB ( ) ) ) 
 - . weigher ( thriftMemoryUsageWeigher ) 
 + . weigher ( QueryProcessor : : measure ) 
 . listener ( ( integer , prepared ) - > { 
 metrics . preparedStatementsEvicted . inc ( ) ; 
 thriftLastMinuteEvictionsCount . incrementAndGet ( ) ; 
 @ @ - 429 , 7 + 409 , 7 @ @ public class QueryProcessor implements QueryHandler 
 { 
 / / Concatenate the current keyspace so we don ' t mix prepared statements between keyspace

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1590dd0 . . 94fa927 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 2 
 + * Never return WriteTimeout for CL . ANY ( CASSANDRA - 6032 ) 
 * Fix race conditions in bulk loader ( CASSANDRA - 6129 ) 
 * Add configurable metrics reporting ( CASSANDRA - 4430 ) 
 * drop queries exceeding a configurable number of tombstones ( CASSANDRA - 6117 ) 
 @ @ - 19 , 7 + 20 , 7 @ @ 
 * Disallow empty column names in cql ( CASSANDRA - 6136 ) 
 * Use Java7 file - handling APIs and fix file moving on Windows ( CASSANDRA - 5383 ) 
 Merged from 1 . 2 : 
 - * Never return WriteTimeout for CL . ANY ( CASSANDRA - 6032 ) 
 + * Limit CQL prepared statement cache by size instead of count ( CASSANDRA - 6107 ) 
 * Tracing should log write failure rather than raw exceptions ( CASSANDRA - 6133 ) 
 * lock access to TM . endpointToHostIdMap ( CASSANDRA - 6103 ) 
 * Allow estimated memtable size to exceed slab allocator size ( CASSANDRA - 6078 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index 52396e7 . . 72351d5 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 20 , 8 + 20 , 12 @ @ package org . apache . cassandra . cql3 ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 + import com . google . common . primitives . Ints ; 
 + 
 import com . googlecode . concurrentlinkedhashmap . ConcurrentLinkedHashMap ; 
 + import com . googlecode . concurrentlinkedhashmap . EntryWeigher ; 
 import org . antlr . runtime . * ; 
 + import org . github . jamm . MemoryMeter ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 41 , 15 + 45 , 36 @ @ public class QueryProcessor 
 public static final SemanticVersion CQL _ VERSION = new SemanticVersion ( " 3 . 1 . 1 " ) ; 
 
 private static final Logger logger = LoggerFactory . getLogger ( QueryProcessor . class ) ; 
 + private static final MemoryMeter meter = new MemoryMeter ( ) ; 
 + private static final long MAX _ CACHE _ PREPARED _ MEMORY = Runtime . getRuntime ( ) . maxMemory ( ) / 256 ; 
 
 - public static final int MAX _ CACHE _ PREPARED = 100000 ; / / Enough to keep buggy clients from OOM ' ing us 
 - private static final Map < MD5Digest , CQLStatement > preparedStatements = new ConcurrentLinkedHashMap . Builder < MD5Digest , CQLStatement > ( ) 
 - . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED ) 
 - . build ( ) ; 
 + private static EntryWeigher < MD5Digest , CQLStatement > cqlMemoryUsageWeigher = new EntryWeigher < MD5Digest , CQLStatement > ( ) 
 + { 
 + @ Override 
 + public int weightOf ( MD5Digest key , CQLStatement value ) 
 + { 
 + return Ints . checkedCast ( meter . measureDeep ( key ) + meter . measureDeep ( value ) ) ; 
 + } 
 + } ; 
 
 - private static final Map < Integer , CQLStatement > thriftPreparedStatements = new ConcurrentLinkedHashMap . Builder < Integer , CQLStatement > ( ) 
 - . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED ) 
 - . build ( ) ; 
 + private static final ConcurrentLinkedHashMap < MD5Digest , CQLStatement > preparedStatements = new ConcurrentLinkedHashMap . Builder < MD5Digest , CQLStatement > ( ) 
 + . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ MEMORY ) 
 + . weigher ( cqlMemoryUsageWeigher ) 
 + . build ( ) ; 
 + 
 + private static EntryWeigher < Integer , CQLStatement > thriftMemoryUsageWeigher = new EntryWeigher < Integer , CQLStatement > ( ) 
 + { 
 + @ Override 
 + public int weightOf ( Integer key , CQLStatement value ) 
 + { 
 + return Ints . checkedCast ( meter . measureDeep ( key ) + meter . measureDeep ( value ) ) ; 
 + } 
 + } ; 
 + 
 + private static final ConcurrentLinkedHashMap < Integer , CQLStatement > thriftPreparedStatements = new ConcurrentLinkedHashMap . Builder < Integer , CQLStatement > ( ) 
 + . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ MEMORY ) 
 + . weigher ( thriftMemoryUsageWeigher ) 
 + . build ( ) ; 
 
 
 public static CQLStatement getPrepared ( MD5Digest id ) 
 @ @ - 188 , 10 + 213 , 18 @ @ public class QueryProcessor 
 } 
 
 private static ResultMessage . Prepared storePreparedStatement ( String queryString , String keyspace , ParsedStatement . Prepared prepared , boolean forThrift ) 
 + throws InvalidRequestException 
 { 
 / / Concatenate the current keyspace so we don ' t mix prepared statements between keyspace
