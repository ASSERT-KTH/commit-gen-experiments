BLEU SCORE: 0.028398387225677897

TEST MSG: Replace trivial uses of String . replace / replaceAll / split with StringUtils methods
GENERATED MSG: merge from 0 . 8

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 128255c . . ffa55c3 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . util . * ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . ThreadLocalRandom ; <nl> import java . util . concurrent . TimeUnit ; <nl> + import java . util . regex . Pattern ; <nl> import java . util . stream . Collectors ; <nl> <nl> import com . google . common . annotations . VisibleForTesting ; <nl> @ @ - 69 , 6 + 70 , 8 @ @ public final class CFMetaData <nl> SUPER , COUNTER , DENSE , COMPOUND <nl> } <nl> <nl> + private static final Pattern PATTERN _ WORD _ CHARS = Pattern . compile ( " \ \ w + " ) ; <nl> + <nl> private static final Logger logger = LoggerFactory . getLogger ( CFMetaData . class ) ; <nl> <nl> public static final Serializer serializer = new Serializer ( ) ; <nl> @ @ - 830 , 9 + 833 , 9 @ @ public final class CFMetaData <nl> return columnMetadata . get ( name ) ; <nl> } <nl> <nl> - public static boolean isNameValid ( String name ) <nl> - { <nl> - return name ! = null & & ! name . isEmpty ( ) & & name . length ( ) < = Schema . NAME _ LENGTH & & name . matches ( " \ \ w + " ) ; <nl> + public static boolean isNameValid ( String name ) { <nl> + return name ! = null & & ! name . isEmpty ( ) <nl> + & & name . length ( ) < = Schema . NAME _ LENGTH & & PATTERN _ WORD _ CHARS . matcher ( name ) . matches ( ) ; <nl> } <nl> <nl> public CFMetaData validate ( ) throws ConfigurationException <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index edcbcf5 . . 3fc0b31 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 54 , 9 + 54 , 9 @ @ import org . apache . cassandra . scheduler . NoScheduler ; <nl> import org . apache . cassandra . security . EncryptionContext ; <nl> import org . apache . cassandra . service . CacheService ; <nl> import org . apache . cassandra . thrift . ThriftServer ; <nl> - import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . memory . * ; <nl> + import org . apache . commons . lang3 . StringUtils ; <nl> <nl> public class DatabaseDescriptor <nl> { <nl> @ @ - 927 , 8 + 927 , 8 @ @ public class DatabaseDescriptor <nl> { <nl> List < String > tokens = new ArrayList < String > ( ) ; <nl> if ( tokenString ! = null ) <nl> - for ( String token : tokenString . split ( " , " ) ) <nl> - tokens . add ( token . replaceAll ( " ^ \ \ s + " , " " ) . replaceAll ( " \ \ s + $ " , " " ) ) ; <nl> + for ( String token : StringUtils . split ( tokenString , ' , ' ) ) <nl> + tokens . add ( token . trim ( ) ) ; <nl> return tokens ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java b / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java <nl> index 93734e9 . . 74d0d28 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java <nl> @ @ - 46 , 7 + 46 , 8 @ @ import org . apache . cassandra . utils . memory . AbstractAllocator ; <nl> public class ColumnIdentifier extends Selectable implements IMeasurableMemory , Comparable < ColumnIdentifier > <nl> { <nl> private static final Pattern PATTERN _ DOUBLE _ QUOTE = Pattern . compile ( " \ " " , Pattern . LITERAL ) ; <nl> - <nl> + private static final String ESCAPED _ DOUBLE _ QUOTE = Matcher . quoteReplacement ( " \ " \ " " ) ; <nl> + <nl> public final ByteBuffer bytes ; <nl> private final String text ; <nl> / * * <nl> @ @ - 332 , 6 + 333 , 6 @ @ public class ColumnIdentifier extends Selectable implements IMeasurableMemory , C <nl> { <nl> if ( UNQUOTED _ IDENTIFIER . matcher ( text ) . matches ( ) ) <nl> return text ; <nl> - return ' " ' + PATTERN _ DOUBLE _ QUOTE . matcher ( text ) . replaceAll ( Matcher . quoteReplacement ( " \ " \ " " ) ) + ' " ' ; <nl> + return ' " ' + PATTERN _ DOUBLE _ QUOTE . matcher ( text ) . replaceAll ( ESCAPED _ DOUBLE _ QUOTE ) + ' " ' ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> index 3eb0ac9 . . 86754b6 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ <nl> * / <nl> package org . apache . cassandra . cql3 . statements ; <nl> <nl> + import java . util . regex . Pattern ; <nl> import org . apache . cassandra . auth . * ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> @ @ - 31 , 6 + 32 , 8 @ @ import org . apache . cassandra . transport . Event ; <nl> / * * A < code > CREATE KEYSPACE < / code > statement parsed from a CQL query . * / <nl> public class CreateKeyspaceStatement extends SchemaAlteringStatement <nl> { <nl> + private static final Pattern PATTERN _ WORD _ CHARS = Pattern . compile ( " \ \ w + " ) ; <nl> + <nl> private final String name ; <nl> private final KeyspaceAttributes attrs ; <nl> private final boolean ifNotExists ; <nl> @ @ - 73 , 7 + 76 , 7 @ @ public class CreateKeyspaceStatement extends SchemaAlteringStatement <nl> ThriftValidation . validateKeyspaceNotSystem ( name ) ; <nl> <nl> / / keyspace name <nl> - if ( ! name . matches ( " \ \ w + " ) ) <nl> + if ( ! PATTERN _ WORD _ CHARS . matcher ( name ) . matches ( ) ) <nl> throw new InvalidRequestException ( String . format ( " \ " % s \ " is not a valid keyspace name " , name ) ) ; <nl> if ( name . length ( ) > Schema . NAME _ LENGTH ) <nl> throw new InvalidRequestException ( String . format ( " Keyspace names shouldn ' t be more than % s characters long ( got \ " % s \ " ) " , Schema . NAME _ LENGTH , name ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> index c19f970 . . debb200 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ package org . apache . cassandra . cql3 . statements ; <nl> <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> - <nl> + import java . util . regex . Pattern ; <nl> import com . google . common . collect . HashMultiset ; <nl> import com . google . common . collect . Multiset ; <nl> import org . apache . commons . lang3 . StringUtils ; <nl> @ @ - 41 , 6 + 41 , 8 @ @ import org . apache . cassandra . transport . Event ; <nl> / * * A { @ code CREATE TABLE } parsed from a CQL query statement . * / <nl> public class CreateTableStatement extends SchemaAlteringStatement <nl> { <nl> + private static final Pattern PATTERN _ WORD _ CHARS = Pattern . compile ( " \ \ w + " ) ; <nl> + <nl> private List < AbstractType < ? > > keyTypes ; <nl> private List < AbstractType < ? > > clusteringTypes ; <nl> <nl> @ @ - 202 , 7 + 204 , 7 @ @ public class CreateTableStatement extends SchemaAlteringStatement <nl> public ParsedStatement . Prepared prepare ( Types udts ) throws RequestValidationException <nl> { <nl> / / Column family name <nl> - if ( ! columnFamily ( ) . matches ( " \ \ w + " ) ) <nl> + if ( ! PATTERN _ WORD _ CHARS . matcher ( columnFamily ( ) ) . matches ( ) ) <nl> throw new InvalidRequestException ( String . format ( " \ " % s \ " is not a valid table name ( must be alphanumeric character or underscore only : [ a - zA - Z _ 0 - 9 ] + ) " , columnFamily ( ) ) ) ; <nl> if ( columnFamily ( ) . length ( ) > Schema . NAME _ LENGTH ) <nl> throw new InvalidRequestException ( String . format ( " Table names shouldn ' t be more than % s characters long ( got \ " % s \ " ) " , Schema . NAME _ LENGTH , columnFamily ( ) ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / PropertyDefinitions . java b / src / java / org / apache / cassandra / cql3 / statements / PropertyDefinitions . java <nl> index 793285b . . 590910f 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / PropertyDefinitions . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / PropertyDefinitions . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> package org . apache . cassandra . cql3 . statements ; <nl> <nl> import java . util . * ; <nl> + import java . util . regex . Pattern ; <nl> <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 26 , 6 + 27 , 8 @ @ import org . apache . cassandra . exceptions . SyntaxException ; <nl> <nl> public class PropertyDefinitions <nl> { <nl> + private static final Pattern PATTERN _ POSITIVE = Pattern . compile ( " ( 1 | true | yes ) " ) ; <nl> + <nl> protected static final Logger logger = LoggerFactory . getLogger ( PropertyDefinitions . class ) ; <nl> <nl> protected final Map < String , Object > properties = new HashMap < String , Object > ( ) ; <nl> @ @ - 91 , 7 + 94 , 7 @ @ public class PropertyDefinitions <nl> public Boolean getBoolean ( String key , Boolean defaultValue ) throws SyntaxException <nl> { <nl> String value = getSimple ( key ) ; <nl> - return ( value = = null ) ? defaultValue : value . toLowerCase ( ) . matches ( " ( 1 | true | yes ) " ) ; <nl> + return ( value = = null ) ? defaultValue : PATTERN _ POSITIVE . matcher ( value . toLowerCase ( ) ) . matches ( ) ; <nl> } <nl> <nl> / / Return a property value , typed as a double <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java <nl> index 5547d0e . . 97b26c7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java <nl> @ @ - 29 , 6 + 29 , 8 @ @ import java . util . Map ; <nl> import java . util . Properties ; <nl> import java . util . TimeZone ; <nl> import java . util . concurrent . * ; <nl> + import java . util . regex . Matcher ; <nl> + import java . util . regex . Pattern ; <nl> <nl> import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> @ @ - 46 , 6 + 48 , 10 @ @ public class CommitLogArchiver <nl> private static final Logger logger = LoggerFactory . getLogger ( CommitLogArchiver . class ) ; <nl> public static final SimpleDateFormat format = new SimpleDateFormat ( " yyyy : MM : dd HH : mm : ss " ) ; <nl> private static final String DELIMITER = " , " ; <nl> + private static final Pattern NAME = Pattern . compile ( " % name " ) ; <nl> + private static final Pattern PATH = Pattern . compile ( " % path " ) ; <nl> + private static final Pattern FROM = Pattern . compile ( " % from " ) ; <nl> + private static final Pattern TO = Pattern . compile ( " % to " ) ; <nl> static <nl> { <nl> format . setTimeZone ( TimeZone . getTimeZone ( " GMT " ) ) ; <nl> @ @ - 136 , 8 + 142 , 8 @ @ public class CommitLogArchiver <nl> protected void runMayThrow ( ) throws IOException <nl> { <nl> segment . waitForFinalSync ( ) ; <nl> - String command = archiveCommand . replace ( " % name " , segment . getName ( ) ) ; <nl> - command = command . replace ( " % path " , segment . getPath ( ) ) ; <nl> + String command = NAME . matcher ( archiveCommand ) . replaceAll ( Matcher . quoteReplacement ( segment . getName ( ) ) ) ; <nl> + command = PATH . matcher ( command ) . replaceAll ( Matcher . quoteReplacement ( segment . getPath ( ) ) ) ; <nl> exec ( command ) ; <nl> } <nl> } ) ) ; <nl> @ @ - 158 , 8 + 164 , 8 @ @ public class CommitLogArchiver <nl> { <nl> protected void runMayThrow ( ) throws IOException <nl> { <nl> - String command = archiveCommand . replace ( " % name " , name ) ; <nl> - command = command . replace ( " % path " , path ) ; <nl> + String command = NAME . matcher ( archiveCommand ) . replaceAll ( Matcher . quoteReplacement ( name ) ) ; <nl> + command = PATH . matcher ( command ) . replaceAll ( Matcher . quoteReplacement ( path ) ) ; <nl> exec ( command ) ; <nl> } <nl> } ) ) ; <nl> @ @ - 244 , 8 + 250 , 8 @ @ public class CommitLogArchiver <nl> continue ; <nl> } <nl> <nl> - String command = restoreCommand . replace ( " % from " , fromFile . getPath ( ) ) ; <nl> - command = command . replace ( " % to " , toFile . getPath ( ) ) ; <nl> + String command = FROM . matcher ( restoreCommand ) . replaceAll ( Matcher . quoteReplacement ( fromFile . getPath ( ) ) ) ; <nl> + command = TO . matcher ( command ) . replaceAll ( Matcher . quoteReplacement ( toFile . getPath ( ) ) ) ; <nl> try <nl> { <nl> exec ( command ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java <nl> index 0c71871 . . e97b36e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java <nl> @ @ - 295 , 7 + 295 , 7 @ @ public class CommitLogReplayer <nl> Multimap < String , String > toReplay = HashMultimap . create ( ) ; <nl> for ( String rawPair : System . getProperty ( " cassandra . replayList " ) . split ( " , " ) ) <nl> { <nl> - String [ ] pair = rawPair . trim ( ) . split ( " \ \ . " ) ; <nl> + String [ ] pair = StringUtils . split ( rawPair . trim ( ) , ' . ' ) ; <nl> if ( pair . length ! = 2 ) <nl> throw new IllegalArgumentException ( " Each table to be replayed must be fully qualified with keyspace name , e . g . , ' system . peers ' " ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java <nl> index ad4050d . . 130ed7b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import java . nio . ByteBuffer ; <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> + import java . util . regex . Pattern ; <nl> <nl> import org . apache . cassandra . cql3 . Term ; <nl> import org . apache . cassandra . serializers . TypeSerializer ; <nl> @ @ - 107 , 6 + 108 , 10 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> } <nl> return l . toArray ( new ByteBuffer [ l . size ( ) ] ) ; <nl> } <nl> + private static final String COLON = " : " ; <nl> + private static final Pattern COLON _ PAT = Pattern . compile ( COLON ) ; <nl> + private static final String ESCAPED _ COLON = " \ \ \ \ : " ; <nl> + private static final Pattern ESCAPED _ COLON _ PAT = Pattern . compile ( ESCAPED _ COLON ) ; <nl> <nl> <nl> / * <nl> @ @ - 118 , 7 + 123 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> if ( input . isEmpty ( ) ) <nl> return input ; <nl> <nl> - String res = input . replaceAll ( " : " , " \ \ \ \ : " ) ; <nl> + String res = COLON _ PAT . matcher ( input ) . replaceAll ( ESCAPED _ COLON ) ; <nl> char last = res . charAt ( res . length ( ) - 1 ) ; <nl> return last = = ' \ \ ' | | last = = ' ! ' ? res + ' ! ' : res ; <nl> } <nl> @ @ - 132 , 7 + 137 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> if ( input . isEmpty ( ) ) <nl> return input ; <nl> <nl> - String res = input . replaceAll ( " \ \ \ \ : " , " : " ) ; <nl> + String res = ESCAPED _ COLON _ PAT . matcher ( input ) . replaceAll ( COLON ) ; <nl> char last = res . charAt ( res . length ( ) - 1 ) ; <nl> return last = = ' ! ' ? res . substring ( 0 , res . length ( ) - 1 ) : res ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / TupleType . java b / src / java / org / apache / cassandra / db / marshal / TupleType . java <nl> index 9480229 . . 362388b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / TupleType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / TupleType . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> + import java . util . regex . Pattern ; <nl> <nl> import com . google . common . base . Objects ; <nl> <nl> @ @ - 37 , 6 + 38 , 15 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; <nl> * / <nl> public class TupleType extends AbstractType < ByteBuffer > <nl> { <nl> + private static final String COLON = " : " ; <nl> + private static final Pattern COLON _ PAT = Pattern . compile ( COLON ) ; <nl> + private static final String ESCAPED _ COLON = " \ \ \ \ : " ; <nl> + private static final Pattern ESCAPED _ COLON _ PAT = Pattern . compile ( ESCAPED _ COLON ) ; <nl> + private static final String AT = " @ " ; <nl> + private static final Pattern AT _ PAT = Pattern . compile ( AT ) ; <nl> + private static final String ESCAPED _ AT = " \ \ \ \ @ " ; <nl> + private static final Pattern ESCAPED _ AT _ PAT = Pattern . compile ( ESCAPED _ AT ) ; <nl> + <nl> protected final List < AbstractType < ? > > types ; <nl> <nl> public TupleType ( List < AbstractType < ? > > types ) <nl> @ @ - 215 , 7 + 225 , 9 @ @ public class TupleType extends AbstractType < ByteBuffer > <nl> <nl> ByteBuffer field = ByteBufferUtil . readBytes ( input , size ) ; <nl> / / We use ' : ' as delimiter , and @ to represent null , so escape them in the generated string <nl> - sb . append ( type . getString ( field ) . replaceAll ( " : " , " \ \ \ \ : " ) . replaceAll ( " @ " , " \ \ \ \ @ " ) ) ; <nl> + String fld = COLON _ PAT . matcher ( type . getString ( field ) ) . replaceAll ( ESCAPED _ COLON ) ; <nl> + fld = AT _ PAT . matcher ( fld ) . replaceAll ( ESCAPED _ AT ) ; <nl> + sb . append ( fld ) ; <nl> } <nl> return sb . toString ( ) ; <nl> } <nl> @ @ - 238 , 7 + 250 , 9 @ @ public class TupleType extends AbstractType < ByteBuffer > <nl> continue ; <nl> <nl> AbstractType < ? > type = type ( i ) ; <nl> - fields [ i ] = type . fromString ( fieldString . replaceAll ( " \ \ \ \ : " , " : " ) . replaceAll ( " \ \ \ \ @ " , " @ " ) ) ; <nl> + fieldString = ESCAPED _ COLON _ PAT . matcher ( fieldString ) . replaceAll ( COLON ) ; <nl> + fieldString = ESCAPED _ AT _ PAT . matcher ( fieldString ) . replaceAll ( AT ) ; <nl> + fields [ i ] = type . fromString ( fieldString ) ; <nl> } <nl> return buildValue ( fields ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / index / internal / CassandraIndex . java b / src / java / org / apache / cassandra / index / internal / CassandraIndex . java <nl> index 4598326 . . 2204a5e 100644 <nl> - - - a / src / java / org / apache / cassandra / index / internal / CassandraIndex . java <nl> + + + b / src / java / org / apache / cassandra / index / internal / CassandraIndex . java <nl> @ @ - 725 , 6 + 725 , 9 @ @ public abstract class CassandraIndex implements Index <nl> return getFunctions ( indexMetadata , parseTarget ( baseCfs . metadata , indexMetadata ) ) . newIndexInstance ( baseCfs , indexMetadata ) ; <nl> } <nl> <nl> + private static final Pattern TWO _ QUOTES = Pattern . compile ( " \ " \ " " ) ; <nl> + private static final String QUOTE = " \ " " ; <nl> + <nl> / / Public because it ' s also used to convert index metadata into a thrift - compatible format <nl> public static Pair < ColumnDefinition , IndexTarget . Type > parseTarget ( CFMetaData cfm , <nl> IndexMetadata indexDef ) <nl> @ @ - 754 , 10 + 757 , 10 @ @ public abstract class CassandraIndex implements Index <nl> / / abc " def - > abc " " def . <nl> / / Because the target string is stored in a CQL compatible form , we <nl> / / need to un - escape any such quotes to get the actual column name <nl> - if ( columnName . startsWith ( " \ " " ) ) <nl> + if ( columnName . startsWith ( QUOTE ) ) <nl> { <nl> columnName = StringUtils . substring ( StringUtils . substring ( columnName , 1 ) , 0 , - 1 ) ; <nl> - columnName = columnName . replaceAll ( " \ " \ " " , " \ " " ) ; <nl> + columnName = TWO _ QUOTES . matcher ( columnName ) . replaceAll ( QUOTE ) ; <nl> } <nl> <nl> / / if it ' s not a CQL table , we can ' t assume that the column name is utf8 , so <nl> diff - - git a / src / java / org / apache / cassandra / metrics / CassandraMetricsRegistry . java b / src / java / org / apache / cassandra / metrics / CassandraMetricsRegistry . java <nl> index 1cd3b6c . . 0d9e6d6 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / CassandraMetricsRegistry . java <nl> + + + b / src / java / org / apache / cassandra / metrics / CassandraMetricsRegistry . java <nl> @ @ - 191 , 6 + 191 , 18 @ @ public class CassandraMetricsRegistry extends MetricRegistry <nl> mBeanServer . unregisterMBean ( name . getMBeanName ( ) ) ; <nl> } catch ( Exception ignore ) { } <nl> } <nl> + <nl> + / * * <nl> + * Strips a single final ' $ ' from input <nl> + * <nl> + * @ param s String to strip <nl> + * @ return a string with one less ' $ ' at end <nl> + * / <nl> + private static String withoutFinalDollar ( String s ) <nl> + { <nl> + int l = s . length ( ) ; <nl> + return ( l ! = 0 & & ' $ ' = = s . charAt ( l - 1 ) ) ? s . substring ( 0 , l - 1 ) : s ; <nl> + } <nl> <nl> public interface MetricMBean <nl> { <nl> @ @ - 601 , 7 + 613 , 7 @ @ public class CassandraMetricsRegistry extends MetricRegistry <nl> public MetricName ( Class < ? > klass , String name , String scope ) <nl> { <nl> this ( klass . getPackage ( ) = = null ? " " : klass . getPackage ( ) . getName ( ) , <nl> - klass . getSimpleName ( ) . replaceAll ( " \ \ $ $ " , " " ) , <nl> + withoutFinalDollar ( klass . getSimpleName ( ) ) , <nl> name , <nl> scope ) ; <nl> } <nl> @ @ - 811 , 7 + 823 , 7 @ @ public class CassandraMetricsRegistry extends MetricRegistry <nl> { <nl> if ( type = = null | | type . isEmpty ( ) ) <nl> { <nl> - type = klass . getSimpleName ( ) . replaceAll ( " \ \ $ $ " , " " ) ; <nl> + type = withoutFinalDollar ( klass . getSimpleName ( ) ) ; <nl> } <nl> return type ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / schema / IndexMetadata . java b / src / java / org / apache / cassandra / schema / IndexMetadata . java <nl> index ee9179a . . 59ac1cf 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / IndexMetadata . java <nl> + + + b / src / java / org / apache / cassandra / schema / IndexMetadata . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package org . apache . cassandra . schema ; <nl> import java . io . IOException ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . util . * ; <nl> + import java . util . regex . Pattern ; <nl> import java . util . stream . Collectors ; <nl> <nl> import com . google . common . base . Objects ; <nl> @ @ - 46 , 6 + 47 , 10 @ @ import org . apache . cassandra . utils . UUIDSerializer ; <nl> public final class IndexMetadata <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( IndexMetadata . class ) ; <nl> + <nl> + private static final Pattern PATTERN _ NON _ WORD _ CHAR = Pattern . compile ( " \ \ W " ) ; <nl> + private static final Pattern PATTERN _ WORD _ CHARS = Pattern . compile ( " \ \ w + " ) ; <nl> + <nl> <nl> public static final Serializer serializer = new Serializer ( ) ; <nl> <nl> @ @ - 127 , 15 + 132 , 15 @ @ public final class IndexMetadata <nl> <nl> public static boolean isNameValid ( String name ) <nl> { <nl> - return name ! = null & & ! name . isEmpty ( ) & & name . matches ( " \ \ w + " ) ; <nl> + return name ! = null & & ! name . isEmpty ( ) & & PATTERN _ WORD _ CHARS . matcher ( name ) . matches ( ) ; <nl> } <nl> <nl> public static String getDefaultIndexName ( String cfName , String root ) <nl> { <nl> if ( root = = null ) <nl> - return ( cfName + " _ " + " idx " ) . replaceAll ( " \ \ W " , " " ) ; <nl> + return PATTERN _ NON _ WORD _ CHAR . matcher ( cfName + " _ " + " idx " ) . replaceAll ( " " ) ; <nl> else <nl> - return ( cfName + " _ " + root + " _ idx " ) . replaceAll ( " \ \ W " , " " ) ; <nl> + return PATTERN _ NON _ WORD _ CHAR . matcher ( cfName + " _ " + root + " _ idx " ) . replaceAll ( " " ) ; <nl> } <nl> <nl> public void validate ( ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 069af53 . . 60ede18 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 166 , 7 + 166 , 7 @ @ import static java . util . Arrays . asList ; <nl> public class StorageService extends NotificationBroadcasterSupport implements IEndpointStateChangeSubscriber , StorageServiceMBean <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( StorageService . class ) ; <nl> - <nl> + <nl> public static final int RING _ DELAY = getRingDelay ( ) ; / / delay after which we assume ring has stablized <nl> <nl> private final JMXProgressSupport progressSupport = new JMXProgressSupport ( this ) ; <nl> @ @ - 2707 , 7 + 2707 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> Map < Keyspace , List < String > > keyspaceColumnfamily = new HashMap < Keyspace , List < String > > ( ) ; <nl> for ( String table : tableList ) <nl> { <nl> - String splittedString [ ] = table . split ( " \ \ . " ) ; <nl> + String splittedString [ ] = StringUtils . split ( table , ' . ' ) ; <nl> if ( splittedString . length = = 2 ) <nl> { <nl> String keyspaceName = splittedString [ 0 ] ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / CassandraVersion . java b / src / java / org / apache / cassandra / utils / CassandraVersion . java <nl> index aac7df9 . . 759ca97 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / CassandraVersion . java <nl> + + + b / src / java / org / apache / cassandra / utils / CassandraVersion . java <nl> @ @ - 37 , 6 + 37 , 8 @ @ public class CassandraVersion implements Comparable < CassandraVersion > <nl> * this is because 3rd and the last can be identical . <nl> * * / <nl> private static final String VERSION _ REGEXP = " ( \ \ d + ) \ \ . ( \ \ d + ) ( ? : \ \ . ( \ \ w + ) ) ? ( \ \ - [ . \ \ w ] + ) ? ( [ . + ] [ . \ \ w ] + ) ? " ; <nl> + private static final Pattern PATTERN _ WHITESPACE = Pattern . compile ( " \ \ w + " ) ; <nl> + <nl> private static final Pattern pattern = Pattern . compile ( VERSION _ REGEXP ) ; <nl> private static final Pattern SNAPSHOT = Pattern . compile ( " - SNAPSHOT " ) ; <nl> <nl> @ @ - 83 , 10 + 85 , 10 @ @ public class CassandraVersion implements Comparable < CassandraVersion > <nl> { <nl> / / Drop initial - or + <nl> str = str . substring ( 1 ) ; <nl> - String [ ] parts = str . split ( " \ \ . " ) ; <nl> + String [ ] parts = StringUtils . split ( str , ' . ' ) ; <nl> for ( String part : parts ) <nl> { <nl> - if ( ! part . matches ( " \ \ w + " ) ) <nl> + if ( ! PATTERN _ WHITESPACE . matcher ( part ) . matches ( ) ) <nl> throw new IllegalArgumentException ( " Invalid version value : " + version ) ; <nl> } <nl> return parts ; <nl> diff - - git a / test / unit / org / apache / cassandra / config / CFMetaDataTest . java b / test / unit / org / apache / cassandra / config / CFMetaDataTest . java <nl> index 9d91df3 . . 188f72f 100644 <nl> - - - a / test / unit / org / apache / cassandra / config / CFMetaDataTest . java <nl> + + + b / test / unit / org / apache / cassandra / config / CFMetaDataTest . java <nl> @ @ - 49 , 6 + 49 , 8 @ @ import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertTrue ; <nl> <nl> public class CFMetaDataTest <nl> { <nl> @ @ - 173 , 4 + 175 , 22 @ @ public class CFMetaDataTest <nl> assertEquals ( cfm . params , params ) ; <nl> assertEquals ( new HashSet < > ( cfm . allColumns ( ) ) , columns ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testIsNameValidPositive ( ) <nl> + { <nl> + assertTrue ( CFMetaData . isNameValid ( " abcdefghijklmnopqrstuvwxyz " ) ) ; <nl> + assertTrue ( CFMetaData . isNameValid ( " ABCDEFGHIJKLMNOPQRSTUVWXYZ " ) ) ; <nl> + assertTrue ( CFMetaData . isNameValid ( " _ 01234567890 " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsNameValidNegative ( ) <nl> + { <nl> + assertFalse ( CFMetaData . isNameValid ( null ) ) ; <nl> + assertFalse ( CFMetaData . isNameValid ( " " ) ) ; <nl> + assertFalse ( CFMetaData . isNameValid ( " " ) ) ; <nl> + assertFalse ( CFMetaData . isNameValid ( " @ " ) ) ; <nl> + assertFalse ( CFMetaData . isNameValid ( " ! " ) ) ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java b / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java <nl> index 3a3b6ee . . 84f0235 100644 <nl> - - - a / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java <nl> + + + b / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java <nl> @ @ - 23 , 6 + 23 , 8 @ @ import java . net . Inet4Address ; <nl> import java . net . Inet6Address ; <nl> import java . net . InetAddress ; <nl> import java . net . NetworkInterface ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collection ; <nl> import java . util . Enumeration ; <nl> <nl> import org . junit . BeforeClass ; <nl> @ @ - 43 , 6 + 45 , 8 @ @ import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertNull ; <nl> <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> @ RunWith ( OrderedJUnit4ClassRunner . class ) <nl> public class DatabaseDescriptorTest <nl> { <nl> @ @ - 265 , 4 + 269 , 15 @ @ public class DatabaseDescriptorTest <nl> DatabaseDescriptor . applyAddressConfig ( testConfig ) ; <nl> <nl> } <nl> + <nl> + @ Test <nl> + public void testTokensFromString ( ) <nl> + { <nl> + assertTrue ( DatabaseDescriptor . tokensFromString ( null ) . isEmpty ( ) ) ; <nl> + Collection < String > tokens = DatabaseDescriptor . tokensFromString ( " a , b , c , d , f , g , h " ) ; <nl> + assertEquals ( 7 , tokens . size ( ) ) ; <nl> + assertTrue ( tokens . containsAll ( Arrays . asList ( new String [ ] { " a " , " b " , " c " , " d " , " f " , " g " , " h " } ) ) ) ; <nl> + <nl> + <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / ColumnIdentifierTest . java b / test / unit / org / apache / cassandra / cql3 / ColumnIdentifierTest . java <nl> index c287883 . . 158110c 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / ColumnIdentifierTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / ColumnIdentifierTest . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import org . junit . Test ; <nl> import junit . framework . Assert ; <nl> import org . apache . cassandra . db . marshal . BytesType ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import static org . junit . Assert . assertEquals ; <nl> <nl> public class ColumnIdentifierTest <nl> { <nl> @ @ - 57 , 5 + 58 , 23 @ @ public class ColumnIdentifierTest <nl> { <nl> return v < 0 ? - 1 : v > 0 ? 1 : 0 ; <nl> } <nl> + <nl> + @ Test <nl> + public void testMaybeQuote ( ) <nl> + { <nl> + String unquotable = " a " ; <nl> + assertEquals ( unquotable , ColumnIdentifier . maybeQuote ( unquotable ) ) ; <nl> + unquotable = " z4 " ; <nl> + assertEquals ( unquotable , ColumnIdentifier . maybeQuote ( unquotable ) ) ; <nl> + unquotable = " m _ 4 _ " ; <nl> + assertEquals ( unquotable , ColumnIdentifier . maybeQuote ( unquotable ) ) ; <nl> + unquotable = " f _ _ " ; <nl> + assertEquals ( unquotable , ColumnIdentifier . maybeQuote ( unquotable ) ) ; <nl> + <nl> + assertEquals ( " \ " A \ " " , ColumnIdentifier . maybeQuote ( " A " ) ) ; <nl> + assertEquals ( " \ " 4b \ " " , ColumnIdentifier . maybeQuote ( " 4b " ) ) ; <nl> + assertEquals ( " \ " \ " \ " \ " " , ColumnIdentifier . maybeQuote ( " \ " " ) ) ; <nl> + assertEquals ( " \ " \ " \ " a \ " \ " b \ " \ " \ " " , ColumnIdentifier . maybeQuote ( " \ " a \ " b \ " " ) ) ; <nl> + } <nl> <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / statements / PropertyDefinitionsTest . java b / test / unit / org / apache / cassandra / cql3 / statements / PropertyDefinitionsTest . java <nl> new file mode 100644 <nl> index 0000000 . . 417fcdc <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / cql3 / statements / PropertyDefinitionsTest . java <nl> @ @ - 0 , 0 + 1 , 61 @ @ <nl> + package org . apache . cassandra . cql3 . statements ; <nl> + <nl> + import org . junit . After ; <nl> + import org . junit . Test ; <nl> + import org . junit . Before ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + public class PropertyDefinitionsTest { <nl> + <nl> + PropertyDefinitions pd ; <nl> + <nl> + @ Before <nl> + public void setUp ( ) <nl> + { <nl> + pd = new PropertyDefinitions ( ) ; <nl> + } <nl> + <nl> + @ After <nl> + public void clear ( ) <nl> + { <nl> + pd = null ; <nl> + } <nl> + <nl> + <nl> + @ Test <nl> + public void testGetBooleanExistant ( ) <nl> + { <nl> + String key = " one " ; <nl> + pd . addProperty ( key , " 1 " ) ; <nl> + assertEquals ( Boolean . TRUE , pd . getBoolean ( key , null ) ) ; <nl> + <nl> + key = " TRUE " ; <nl> + pd . addProperty ( key , " TrUe " ) ; <nl> + assertEquals ( Boolean . TRUE , pd . getBoolean ( key , null ) ) ; <nl> + <nl> + key = " YES " ; <nl> + pd . addProperty ( key , " YeS " ) ; <nl> + assertEquals ( Boolean . TRUE , pd . getBoolean ( key , null ) ) ; <nl> + <nl> + key = " BAD _ ONE " ; <nl> + pd . addProperty ( key , " 1 " ) ; <nl> + assertEquals ( Boolean . FALSE , pd . getBoolean ( key , null ) ) ; <nl> + <nl> + key = " BAD _ TRUE " ; <nl> + pd . addProperty ( key , " true " ) ; <nl> + assertEquals ( Boolean . FALSE , pd . getBoolean ( key , null ) ) ; <nl> + <nl> + key = " BAD _ YES " ; <nl> + pd . addProperty ( key , " ye s " ) ; <nl> + assertEquals ( Boolean . FALSE , pd . getBoolean ( key , null ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetBooleanNonexistant ( ) <nl> + { <nl> + assertEquals ( Boolean . FALSE , pd . getBoolean ( " nonexistant " , Boolean . FALSE ) ) ; <nl> + assertEquals ( Boolean . TRUE , pd . getBoolean ( " nonexistant " , Boolean . TRUE ) ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / db / marshal / AbstractCompositeTypeTest . java b / test / unit / org / apache / cassandra / db / marshal / AbstractCompositeTypeTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0e91532 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / db / marshal / AbstractCompositeTypeTest . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + package org . apache . cassandra . db . marshal ; <nl> + <nl> + import org . junit . Test ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + public class AbstractCompositeTypeTest <nl> + { <nl> + <nl> + @ Test <nl> + public void testEscape ( ) <nl> + { <nl> + assertEquals ( " " , AbstractCompositeType . escape ( " " ) ) ; <nl> + assertEquals ( " Ab ! CdXy \ \ Z123 - 345 " , AbstractCompositeType . escape ( " Ab ! CdXy \ \ Z123 - 345 " ) ) ; <nl> + assertEquals ( " Ab ! CdXy \ \ Z123 - 345 ! ! " , AbstractCompositeType . escape ( " Ab ! CdXy \ \ Z123 - 345 ! " ) ) ; <nl> + assertEquals ( " Ab ! CdXy \ \ Z123 - 345 \ \ ! " , AbstractCompositeType . escape ( " Ab ! CdXy \ \ Z123 - 345 \ \ " ) ) ; <nl> + <nl> + assertEquals ( " A \ \ : b ! CdXy \ \ \ \ : Z123 - 345 " , AbstractCompositeType . escape ( " A : b ! CdXy \ \ : Z123 - 345 " ) ) ; <nl> + assertEquals ( " A \ \ : b ! CdXy \ \ \ \ : Z123 - 345 ! ! " , AbstractCompositeType . escape ( " A : b ! CdXy \ \ : Z123 - 345 ! " ) ) ; <nl> + assertEquals ( " A \ \ : b ! CdXy \ \ \ \ : Z123 - 345 \ \ ! " , AbstractCompositeType . escape ( " A : b ! CdXy \ \ : Z123 - 345 \ \ " ) ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testUnescape ( ) <nl> + { <nl> + assertEquals ( " " , AbstractCompositeType . escape ( " " ) ) ; <nl> + assertEquals ( " Ab ! CdXy \ \ Z123 - 345 " , AbstractCompositeType . unescape ( " Ab ! CdXy \ \ Z123 - 345 " ) ) ; <nl> + assertEquals ( " Ab ! CdXy \ \ Z123 - 345 ! " , AbstractCompositeType . unescape ( " Ab ! CdXy \ \ Z123 - 345 ! ! " ) ) ; <nl> + assertEquals ( " Ab ! CdXy \ \ Z123 - 345 \ \ " , AbstractCompositeType . unescape ( " Ab ! CdXy \ \ Z123 - 345 \ \ ! " ) ) ; <nl> + <nl> + assertEquals ( " A : b ! CdXy \ \ : Z123 - 345 " , AbstractCompositeType . unescape ( " A \ \ : b ! CdXy \ \ \ \ : Z123 - 345 " ) ) ; <nl> + assertEquals ( " A : b ! CdXy \ \ : Z123 - 345 ! " , AbstractCompositeType . unescape ( " A \ \ : b ! CdXy \ \ \ \ : Z123 - 345 ! ! " ) ) ; <nl> + assertEquals ( " A : b ! CdXy \ \ : Z123 - 345 \ \ " , AbstractCompositeType . unescape ( " A \ \ : b ! CdXy \ \ \ \ : Z123 - 345 \ \ ! " ) ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / metrics / CassandraMetricsRegistryTest . java b / test / unit / org / apache / cassandra / metrics / CassandraMetricsRegistryTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0258b8c <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / metrics / CassandraMetricsRegistryTest . java <nl> @ @ - 0 , 0 + 1 , 34 @ @ <nl> + package org . apache . cassandra . metrics ; <nl> + <nl> + import org . junit . Test ; <nl> + import org . apache . cassandra . metrics . CassandraMetricsRegistry . MetricName ; <nl> + import static org . junit . Assert . * ; <nl> + <nl> + <nl> + public class CassandraMetricsRegistryTest <nl> + { <nl> + / / A class with a name ending in ' $ ' <nl> + private static class StrangeName $ <nl> + { <nl> + } <nl> + <nl> + @ Test <nl> + public void testChooseType ( ) <nl> + { <nl> + assertEquals ( " StrangeName " , MetricName . chooseType ( null , StrangeName $ . class ) ) ; <nl> + assertEquals ( " StrangeName " , MetricName . chooseType ( " " , StrangeName $ . class ) ) ; <nl> + assertEquals ( " String " , MetricName . chooseType ( null , String . class ) ) ; <nl> + assertEquals ( " String " , MetricName . chooseType ( " " , String . class ) ) ; <nl> + <nl> + assertEquals ( " a " , MetricName . chooseType ( " a " , StrangeName $ . class ) ) ; <nl> + assertEquals ( " b " , MetricName . chooseType ( " b " , String . class ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMetricName ( ) <nl> + { <nl> + MetricName name = new MetricName ( StrangeName $ . class , " NaMe " , " ScOpE " ) ; <nl> + assertEquals ( " StrangeName " , name . getType ( ) ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / schema / IndexMetadataTest . java b / test / unit / org / apache / cassandra / schema / IndexMetadataTest . java <nl> new file mode 100644 <nl> index 0000000 . . 901a5aa <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / schema / IndexMetadataTest . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + package org . apache . cassandra . schema ; <nl> + <nl> + import org . junit . Assert ; <nl> + import org . junit . Test ; <nl> + <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + public class IndexMetadataTest { <nl> + <nl> + @ Test <nl> + public void testIsNameValidPositive ( ) <nl> + { <nl> + assertTrue ( IndexMetadata . isNameValid ( " abcdefghijklmnopqrstuvwxyz " ) ) ; <nl> + assertTrue ( IndexMetadata . isNameValid ( " ABCDEFGHIJKLMNOPQRSTUVWXYZ " ) ) ; <nl> + assertTrue ( IndexMetadata . isNameValid ( " _ 01234567890 " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsNameValidNegative ( ) <nl> + { <nl> + assertFalse ( IndexMetadata . isNameValid ( null ) ) ; <nl> + assertFalse ( IndexMetadata . isNameValid ( " " ) ) ; <nl> + assertFalse ( IndexMetadata . isNameValid ( " " ) ) ; <nl> + assertFalse ( IndexMetadata . isNameValid ( " @ " ) ) ; <nl> + assertFalse ( IndexMetadata . isNameValid ( " ! " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetDefaultIndexName ( ) <nl> + { <nl> + Assert . assertEquals ( " aB4 _ _ idx " , IndexMetadata . getDefaultIndexName ( " a B - 4 @ ! _ + " , null ) ) ; <nl> + Assert . assertEquals ( " 34 _ Ddd _ F6 _ idx " , IndexMetadata . getDefaultIndexName ( " 34 _ ( ) Ddd " , " # F % 6 * " ) ) ; <nl> + <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java b / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java <nl> index cec668f . . 73562b7 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java <nl> @ @ - 17 , 10 + 17 , 16 @ @ <nl> * / <nl> package org . apache . cassandra . utils ; <nl> <nl> + import java . lang . reflect . InvocationTargetException ; <nl> + import java . lang . reflect . Method ; <nl> + import java . util . Arrays ; <nl> import org . junit . Test ; <nl> <nl> + import static org . junit . Assert . assertArrayEquals ; <nl> + import static org . junit . Assert . assertThat ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> + import static org . junit . matchers . JUnitMatchers . containsString ; <nl> <nl> public class CassandraVersionTest <nl> { <nl> @ @ - 153 , 7 + 159 , 7 @ @ public class CassandraVersionTest <nl> next = new CassandraVersion ( " 3 . 2 " ) ; <nl> assertTrue ( prev . compareTo ( next ) < 0 ) ; <nl> } <nl> - <nl> + <nl> private static void assertThrows ( String str ) <nl> { <nl> try <nl> @ @ - 163 , 4 + 169 , 47 @ @ public class CassandraVersionTest <nl> } <nl> catch ( IllegalArgumentException e ) { } <nl> } <nl> + <nl> + @ Test <nl> + public void testParseIdentifiersPositive ( ) throws Throwable <nl> + { <nl> + String [ ] result = parseIdentifiers ( " DUMMY " , " + a . b . cde . f _ g . " ) ; <nl> + String [ ] expected = { " a " , " b " , " cde " , " f _ g " } ; <nl> + assertArrayEquals ( expected , result ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testParseIdentifiersNegative ( ) throws Throwable <nl> + { <nl> + String version = " DUMMY " ; <nl> + try <nl> + { <nl> + parseIdentifiers ( version , " + a . . b " ) ; <nl> + <nl> + } <nl> + catch ( IllegalArgumentException e ) <nl> + { <nl> + assertThat ( e . getMessage ( ) , containsString ( version ) ) ; <nl> + } <nl> + } <nl> + private static String [ ] parseIdentifiers ( String version , String str ) throws Throwable <nl> + { <nl> + String name = " parseIdentifiers " ; <nl> + Class [ ] args = { String . class , String . class } ; <nl> + for ( Method m : CassandraVersion . class . getDeclaredMethods ( ) ) <nl> + { <nl> + if ( name . equals ( m . getName ( ) ) & & <nl> + Arrays . equals ( args , m . getParameterTypes ( ) ) ) <nl> + { <nl> + m . setAccessible ( true ) ; <nl> + try <nl> + { <nl> + return ( String [ ] ) m . invoke ( null , version , str ) ; <nl> + } catch ( InvocationTargetException e ) { <nl> + throw e . getTargetException ( ) ; <nl> + } <nl> + } <nl> + } <nl> + throw new NoSuchMethodException ( CassandraVersion . class + " . " + name + Arrays . toString ( args ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / lib / licenses / guava - r05 . txt b / lib / licenses / guava - r05 . txt <nl> deleted file mode 100644 <nl> index d645695 . . 0000000 <nl> - - - a / lib / licenses / guava - r05 . txt <nl> + + + / dev / null <nl> @ @ - 1 , 202 + 0 , 0 @ @ <nl> - <nl> - Apache License <nl> - Version 2 . 0 , January 2004 <nl> - http : / / www . apache . org / licenses / <nl> - <nl> - TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION <nl> - <nl> - 1 . Definitions . <nl> - <nl> - " License " shall mean the terms and conditions for use , reproduction , <nl> - and distribution as defined by Sections 1 through 9 of this document . <nl> - <nl> - " Licensor " shall mean the copyright owner or entity authorized by <nl> - the copyright owner that is granting the License . <nl> - <nl> - " Legal Entity " shall mean the union of the acting entity and all <nl> - other entities that control , are controlled by , or are under common <nl> - control with that entity . For the purposes of this definition , <nl> - " control " means ( i ) the power , direct or indirect , to cause the <nl> - direction or management of such entity , whether by contract or <nl> - otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the <nl> - outstanding shares , or ( iii ) beneficial ownership of such entity . <nl> - <nl> - " You " ( or " Your " ) shall mean an individual or Legal Entity <nl> - exercising permissions granted by this License . <nl> - <nl> - " Source " form shall mean the preferred form for making modifications , <nl> - including but not limited to software source code , documentation <nl> - source , and configuration files . <nl> - <nl> - " Object " form shall mean any form resulting from mechanical <nl> - transformation or translation of a Source form , including but <nl> - not limited to compiled object code , generated documentation , <nl> - and conversions to other media types . <nl> - <nl> - " Work " shall mean the work of authorship , whether in Source or <nl> - Object form , made available under the License , as indicated by a <nl> - copyright notice that is included in or attached to the work <nl> - ( an example is provided in the Appendix below ) . <nl> - <nl> - " Derivative Works " shall mean any work , whether in Source or Object <nl> - form , that is based on ( or derived from ) the Work and for which the <nl> - editorial revisions , annotations , elaborations , or other modifications <nl> - represent , as a whole , an original work of authorship . For the purposes <nl> - of this License , Derivative Works shall not include works that remain <nl> - separable from , or merely link ( or bind by name ) to the interfaces of , <nl> - the Work and Derivative Works thereof . <nl> - <nl> - " Contribution " shall mean any work of authorship , including <nl> - the original version of the Work and any modifications or additions <nl> - to that Work or Derivative Works thereof , that is intentionally <nl> - submitted to Licensor for inclusion in the Work by the copyright owner <nl> - or by an individual or Legal Entity authorized to submit on behalf of <nl> - the copyright owner . For the purposes of this definition , " submitted " <nl> - means any form of electronic , verbal , or written communication sent <nl> - to the Licensor or its representatives , including but not limited to <nl> - communication on electronic mailing lists , source code control systems , <nl> - and issue tracking systems that are managed by , or on behalf of , the <nl> - Licensor for the purpose of discussing and improving the Work , but <nl> - excluding communication that is conspicuously marked or otherwise <nl> - designated in writing by the copyright owner as " Not a Contribution . " <nl> - <nl> - " Contributor " shall mean Licensor and any individual or Legal Entity <nl> - on behalf of whom a Contribution has been received by Licensor and <nl> - subsequently incorporated within the Work . <nl> - <nl> - 2 . Grant of Copyright License . Subject to the terms and conditions of <nl> - this License , each Contributor hereby grants to You a perpetual , <nl> - worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> - copyright license to reproduce , prepare Derivative Works of , <nl> - publicly display , publicly perform , sublicense , and distribute the <nl> - Work and such Derivative Works in Source or Object form . <nl> - <nl> - 3 . Grant of Patent License . Subject to the terms and conditions of <nl> - this License , each Contributor hereby grants to You a perpetual , <nl> - worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> - ( except as stated in this section ) patent license to make , have made , <nl> - use , offer to sell , sell , import , and otherwise transfer the Work , <nl> - where such license applies only to those patent claims licensable <nl> - by such Contributor that are necessarily infringed by their <nl> - Contribution ( s ) alone or by combination of their Contribution ( s ) <nl> - with the Work to which such Contribution ( s ) was submitted . If You <nl> - institute patent litigation against any entity ( including a <nl> - cross - claim or counterclaim in a lawsuit ) alleging that the Work <nl> - or a Contribution incorporated within the Work constitutes direct <nl> - or contributory patent infringement , then any patent licenses <nl> - granted to You under this License for that Work shall terminate <nl> - as of the date such litigation is filed . <nl> - <nl> - 4 . Redistribution . You may reproduce and distribute copies of the <nl> - Work or Derivative Works thereof in any medium , with or without <nl> - modifications , and in Source or Object form , provided that You <nl> - meet the following conditions : <nl> - <nl> - ( a ) You must give any other recipients of the Work or <nl> - Derivative Works a copy of this License ; and <nl> - <nl> - ( b ) You must cause any modified files to carry prominent notices <nl> - stating that You changed the files ; and <nl> - <nl> - ( c ) You must retain , in the Source form of any Derivative Works <nl> - that You distribute , all copyright , patent , trademark , and <nl> - attribution notices from the Source form of the Work , <nl> - excluding those notices that do not pertain to any part of <nl> - the Derivative Works ; and <nl> - <nl> - ( d ) If the Work includes a " NOTICE " text file as part of its <nl> - distribution , then any Derivative Works that You distribute must <nl> - include a readable copy of the attribution notices contained <nl> - within such NOTICE file , excluding those notices that do not <nl> - pertain to any part of the Derivative Works , in at least one <nl> - of the following places : within a NOTICE text file distributed <nl> - as part of the Derivative Works ; within the Source form or <nl> - documentation , if provided along with the Derivative Works ; or , <nl> - within a display generated by the Derivative Works , if and <nl> - wherever such third - party notices normally appear . The contents <nl> - of the NOTICE file are for informational purposes only and <nl> - do not modify the License . You may add Your own attribution <nl> - notices within Derivative Works that You distribute , alongside <nl> - or as an addendum to the NOTICE text from the Work , provided <nl> - that such additional attribution notices cannot be construed <nl> - as modifying the License . <nl> - <nl> - You may add Your own copyright statement to Your modifications and <nl> - may provide additional or different license terms and conditions <nl> - for use , reproduction , or distribution of Your modifications , or <nl> - for any such Derivative Works as a whole , provided Your use , <nl> - reproduction , and distribution of the Work otherwise complies with <nl> - the conditions stated in this License . <nl> - <nl> - 5 . Submission of Contributions . Unless You explicitly state otherwise , <nl> - any Contribution intentionally submitted for inclusion in the Work <nl> - by You to the Licensor shall be under the terms and conditions of <nl> - this License , without any additional terms or conditions . <nl> - Notwithstanding the above , nothing herein shall supersede or modify <nl> - the terms of any separate license agreement you may have executed <nl> - with Licensor regarding such Contributions . <nl> - <nl> - 6 . Trademarks . This License does not grant permission to use the trade <nl> - names , trademarks , service marks , or product names of the Licensor , <nl> - except as required for reasonable and customary use in describing the <nl> - origin of the Work and reproducing the content of the NOTICE file . <nl> - <nl> - 7 . Disclaimer of Warranty . Unless required by applicable law or <nl> - agreed to in writing , Licensor provides the Work ( and each <nl> - Contributor provides its Contributions ) on an " AS IS " BASIS , <nl> - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or <nl> - implied , including , without limitation , any warranties or conditions <nl> - of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A <nl> - PARTICULAR PURPOSE . You are solely responsible for determining the <nl> - appropriateness of using or redistributing the Work and assume any <nl> - risks associated with Your exercise of permissions under this License . <nl> - <nl> - 8 . Limitation of Liability . In no event and under no legal theory , <nl> - whether in tort ( including negligence ) , contract , or otherwise , <nl> - unless required by applicable law ( such as deliberate and grossly <nl> - negligent acts ) or agreed to in writing , shall any Contributor be <nl> - liable to You for damages , including any direct , indirect , special , <nl> - incidental , or consequential damages of any character arising as a <nl> - result of this License or out of the use or inability to use the <nl> - Work ( including but not limited to damages for loss of goodwill , <nl> - work stoppage , computer failure or malfunction , or any and all <nl> - other commercial damages or losses ) , even if such Contributor <nl> - has been advised of the possibility of such damages . <nl> - <nl> - 9 . Accepting Warranty or Additional Liability . While redistributing <nl> - the Work or Derivative Works thereof , You may choose to offer , <nl> - and charge a fee for , acceptance of support , warranty , indemnity , <nl> - or other liability obligations and / or rights consistent with this <nl> - License . However , in accepting such obligations , You may act only <nl> - on Your own behalf and on Your sole responsibility , not on behalf <nl> - of any other Contributor , and only if You agree to indemnify , <nl> - defend , and hold each Contributor harmless for any liability <nl> - incurred by , or claims asserted against , such Contributor by reason <nl> - of your accepting any such warranty or additional liability . <nl> - <nl> - END OF TERMS AND CONDITIONS <nl> - <nl> - APPENDIX : How to apply the Apache License to your work . <nl> - <nl> - To apply the Apache License to your work , attach the following <nl> - boilerplate notice , with the fields enclosed by brackets " [ ] " <nl> - replaced with your own identifying information . ( Don ' t include <nl> - the brackets ! ) The text should be enclosed in the appropriate <nl> - comment syntax for the file format . We also recommend that a <nl> - file or class name and description of purpose be included on the <nl> - same " printed page " as the copyright notice for easier <nl> - identification within third - party archives . <nl> - <nl> - Copyright [ yyyy ] [ name of copyright owner ] <nl> - <nl> - Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - you may not use this file except in compliance with the License . <nl> - You may obtain a copy of the License at <nl> - <nl> - http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - <nl> - Unless required by applicable law or agreed to in writing , software <nl> - distributed under the License is distributed on an " AS IS " BASIS , <nl> - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - See the License for the specific language governing permissions and <nl> - limitations under the License . <nl> diff - - git a / lib / licenses / guava - r08 . txt b / lib / licenses / guava - r08 . txt <nl> new file mode 100644 <nl> index 0000000 . . d645695 <nl> - - - / dev / null <nl> + + + b / lib / licenses / guava - r08 . txt <nl> @ @ - 0 , 0 + 1 , 202 @ @ <nl> + <nl> + Apache License <nl> + Version 2 . 0 , January 2004 <nl> + http : / / www . apache . org / licenses / <nl> + <nl> + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION <nl> + <nl> + 1 . Definitions . <nl> + <nl> + " License " shall mean the terms and conditions for use , reproduction , <nl> + and distribution as defined by Sections 1 through 9 of this document . <nl> + <nl> + " Licensor " shall mean the copyright owner or entity authorized by <nl> + the copyright owner that is granting the License . <nl> + <nl> + " Legal Entity " shall mean the union of the acting entity and all <nl> + other entities that control , are controlled by , or are under common <nl> + control with that entity . For the purposes of this definition , <nl> + " control " means ( i ) the power , direct or indirect , to cause the <nl> + direction or management of such entity , whether by contract or <nl> + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the <nl> + outstanding shares , or ( iii ) beneficial ownership of such entity . <nl> + <nl> + " You " ( or " Your " ) shall mean an individual or Legal Entity <nl> + exercising permissions granted by this License . <nl> + <nl> + " Source " form shall mean the preferred form for making modifications , <nl> + including but not limited to software source code , documentation <nl> + source , and configuration files . <nl> + <nl> + " Object " form shall mean any form resulting from mechanical <nl> + transformation or translation of a Source form , including but <nl> + not limited to compiled object code , generated documentation , <nl> + and conversions to other media types . <nl> + <nl> + " Work " shall mean the work of authorship , whether in Source or <nl> + Object form , made available under the License , as indicated by a <nl> + copyright notice that is included in or attached to the work <nl> + ( an example is provided in the Appendix below ) . <nl> + <nl> + " Derivative Works " shall mean any work , whether in Source or Object <nl> + form , that is based on ( or derived from ) the Work and for which the <nl> + editorial revisions , annotations , elaborations , or other modifications <nl> + represent , as a whole , an original work of authorship . For the purposes <nl> + of this License , Derivative Works shall not include works that remain <nl> + separable from , or merely link ( or bind by name ) to the interfaces of , <nl> + the Work and Derivative Works thereof . <nl> + <nl> + " Contribution " shall mean any work of authorship , including <nl> + the original version of the Work and any modifications or additions <nl> + to that Work or Derivative Works thereof , that is intentionally <nl> + submitted to Licensor for inclusion in the Work by the copyright owner <nl> + or by an individual or Legal Entity authorized to submit on behalf of <nl> + the copyright owner . For the purposes of this definition , " submitted " <nl> + means any form of electronic , verbal , or written communication sent <nl> + to the Licensor or its representatives , including but not limited to <nl> + communication on electronic mailing lists , source code control systems , <nl> + and issue tracking systems that are managed by , or on behalf of , the <nl> + Licensor for the purpose of discussing and improving the Work , but <nl> + excluding communication that is conspicuously marked or otherwise <nl> + designated in writing by the copyright owner as " Not a Contribution . " <nl> + <nl> + " Contributor " shall mean Licensor and any individual or Legal Entity <nl> + on behalf of whom a Contribution has been received by Licensor and <nl> + subsequently incorporated within the Work . <nl> + <nl> + 2 . Grant of Copyright License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + copyright license to reproduce , prepare Derivative Works of , <nl> + publicly display , publicly perform , sublicense , and distribute the <nl> + Work and such Derivative Works in Source or Object form . <nl> + <nl> + 3 . Grant of Patent License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + ( except as stated in this section ) patent license to make , have made , <nl> + use , offer to sell , sell , import , and otherwise transfer the Work , <nl> + where such license applies only to those patent claims licensable <nl> + by such Contributor that are necessarily infringed by their <nl> + Contribution ( s ) alone or by combination of their Contribution ( s ) <nl> + with the Work to which such Contribution ( s ) was submitted . If You <nl> + institute patent litigation against any entity ( including a <nl> + cross - claim or counterclaim in a lawsuit ) alleging that the Work <nl> + or a Contribution incorporated within the Work constitutes direct <nl> + or contributory patent infringement , then any patent licenses <nl> + granted to You under this License for that Work shall terminate <nl> + as of the date such litigation is filed . <nl> + <nl> + 4 . Redistribution . You may reproduce and distribute copies of the <nl> + Work or Derivative Works thereof in any medium , with or without <nl> + modifications , and in Source or Object form , provided that You <nl> + meet the following conditions : <nl> + <nl> + ( a ) You must give any other recipients of the Work or <nl> + Derivative Works a copy of this License ; and <nl> + <nl> + ( b ) You must cause any modified files to carry prominent notices <nl> + stating that You changed the files ; and <nl> + <nl> + ( c ) You must retain , in the Source form of any Derivative Works <nl> + that You distribute , all copyright , patent , trademark , and <nl> + attribution notices from the Source form of the Work , <nl> + excluding those notices that do not pertain to any part of <nl> + the Derivative Works ; and <nl> + <nl> + ( d ) If the Work includes a " NOTICE " text file as part of its <nl> + distribution , then any Derivative Works that You distribute must <nl> + include a readable copy of the attribution notices contained <nl> + within such NOTICE file , excluding those notices that do not <nl> + pertain to any part of the Derivative Works , in at least one <nl> + of the following places : within a NOTICE text file distributed <nl> + as part of the Derivative Works ; within the Source form or <nl> + documentation , if provided along with the Derivative Works ; or , <nl> + within a display generated by the Derivative Works , if and <nl> + wherever such third - party notices normally appear . The contents <nl> + of the NOTICE file are for informational purposes only and <nl> + do not modify the License . You may add Your own attribution <nl> + notices within Derivative Works that You distribute , alongside <nl> + or as an addendum to the NOTICE text from the Work , provided <nl> + that such additional attribution notices cannot be construed <nl> + as modifying the License . <nl> + <nl> + You may add Your own copyright statement to Your modifications and <nl> + may provide additional or different license terms and conditions <nl> + for use , reproduction , or distribution of Your modifications , or <nl> + for any such Derivative Works as a whole , provided Your use , <nl> + reproduction , and distribution of the Work otherwise complies with <nl> + the conditions stated in this License . <nl> + <nl> + 5 . Submission of Contributions . Unless You explicitly state otherwise , <nl> + any Contribution intentionally submitted for inclusion in the Work <nl> + by You to the Licensor shall be under the terms and conditions of <nl> + this License , without any additional terms or conditions . <nl> + Notwithstanding the above , nothing herein shall supersede or modify <nl> + the terms of any separate license agreement you may have executed <nl> + with Licensor regarding such Contributions . <nl> + <nl> + 6 . Trademarks . This License does not grant permission to use the trade <nl> + names , trademarks , service marks , or product names of the Licensor , <nl> + except as required for reasonable and customary use in describing the <nl> + origin of the Work and reproducing the content of the NOTICE file . <nl> + <nl> + 7 . Disclaimer of Warranty . Unless required by applicable law or <nl> + agreed to in writing , Licensor provides the Work ( and each <nl> + Contributor provides its Contributions ) on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or <nl> + implied , including , without limitation , any warranties or conditions <nl> + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A <nl> + PARTICULAR PURPOSE . You are solely responsible for determining the <nl> + appropriateness of using or redistributing the Work and assume any <nl> + risks associated with Your exercise of permissions under this License . <nl> + <nl> + 8 . Limitation of Liability . In no event and under no legal theory , <nl> + whether in tort ( including negligence ) , contract , or otherwise , <nl> + unless required by applicable law ( such as deliberate and grossly <nl> + negligent acts ) or agreed to in writing , shall any Contributor be <nl> + liable to You for damages , including any direct , indirect , special , <nl> + incidental , or consequential damages of any character arising as a <nl> + result of this License or out of the use or inability to use the <nl> + Work ( including but not limited to damages for loss of goodwill , <nl> + work stoppage , computer failure or malfunction , or any and all <nl> + other commercial damages or losses ) , even if such Contributor <nl> + has been advised of the possibility of such damages . <nl> + <nl> + 9 . Accepting Warranty or Additional Liability . While redistributing <nl> + the Work or Derivative Works thereof , You may choose to offer , <nl> + and charge a fee for , acceptance of support , warranty , indemnity , <nl> + or other liability obligations and / or rights consistent with this <nl> + License . However , in accepting such obligations , You may act only <nl> + on Your own behalf and on Your sole responsibility , not on behalf <nl> + of any other Contributor , and only if You agree to indemnify , <nl> + defend , and hold each Contributor harmless for any liability <nl> + incurred by , or claims asserted against , such Contributor by reason <nl> + of your accepting any such warranty or additional liability . <nl> + <nl> + END OF TERMS AND CONDITIONS <nl> + <nl> + APPENDIX : How to apply the Apache License to your work . <nl> + <nl> + To apply the Apache License to your work , attach the following <nl> + boilerplate notice , with the fields enclosed by brackets " [ ] " <nl> + replaced with your own identifying information . ( Don ' t include <nl> + the brackets ! ) The text should be enclosed in the appropriate <nl> + comment syntax for the file format . We also recommend that a <nl> + file or class name and description of purpose be included on the <nl> + same " printed page " as the copyright notice for easier <nl> + identification within third - party archives . <nl> + <nl> + Copyright [ yyyy ] [ name of copyright owner ] <nl> + <nl> + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + you may not use this file except in compliance with the License . <nl> + You may obtain a copy of the License at <nl> + <nl> + http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + <nl> + Unless required by applicable law or agreed to in writing , software <nl> + distributed under the License is distributed on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + See the License for the specific language governing permissions and <nl> + limitations under the License .

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 128255c . . ffa55c3 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . util . * ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . concurrent . ThreadLocalRandom ; 
 import java . util . concurrent . TimeUnit ; 
 + import java . util . regex . Pattern ; 
 import java . util . stream . Collectors ; 
 
 import com . google . common . annotations . VisibleForTesting ; 
 @ @ - 69 , 6 + 70 , 8 @ @ public final class CFMetaData 
 SUPER , COUNTER , DENSE , COMPOUND 
 } 
 
 + private static final Pattern PATTERN _ WORD _ CHARS = Pattern . compile ( " \ \ w + " ) ; 
 + 
 private static final Logger logger = LoggerFactory . getLogger ( CFMetaData . class ) ; 
 
 public static final Serializer serializer = new Serializer ( ) ; 
 @ @ - 830 , 9 + 833 , 9 @ @ public final class CFMetaData 
 return columnMetadata . get ( name ) ; 
 } 
 
 - public static boolean isNameValid ( String name ) 
 - { 
 - return name ! = null & & ! name . isEmpty ( ) & & name . length ( ) < = Schema . NAME _ LENGTH & & name . matches ( " \ \ w + " ) ; 
 + public static boolean isNameValid ( String name ) { 
 + return name ! = null & & ! name . isEmpty ( ) 
 + & & name . length ( ) < = Schema . NAME _ LENGTH & & PATTERN _ WORD _ CHARS . matcher ( name ) . matches ( ) ; 
 } 
 
 public CFMetaData validate ( ) throws ConfigurationException 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index edcbcf5 . . 3fc0b31 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 54 , 9 + 54 , 9 @ @ import org . apache . cassandra . scheduler . NoScheduler ; 
 import org . apache . cassandra . security . EncryptionContext ; 
 import org . apache . cassandra . service . CacheService ; 
 import org . apache . cassandra . thrift . ThriftServer ; 
 - import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . memory . * ; 
 + import org . apache . commons . lang3 . StringUtils ; 
 
 public class DatabaseDescriptor 
 { 
 @ @ - 927 , 8 + 927 , 8 @ @ public class DatabaseDescriptor 
 { 
 List < String > tokens = new ArrayList < String > ( ) ; 
 if ( tokenString ! = null ) 
 - for ( String token : tokenString . split ( " , " ) ) 
 - tokens . add ( token . replaceAll ( " ^ \ \ s + " , " " ) . replaceAll ( " \ \ s + $ " , " " ) ) ; 
 + for ( String token : StringUtils . split ( tokenString , ' , ' ) ) 
 + tokens . add ( token . trim ( ) ) ; 
 return tokens ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java b / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java 
 index 93734e9 . . 74d0d28 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java 
 + + + b / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java 
 @ @ - 46 , 7 + 46 , 8 @ @ import org . apache . cassandra . utils . memory . AbstractAllocator ; 
 public class ColumnIdentifier extends Selectable implements IMeasurableMemory , Comparable < ColumnIdentifier > 
 { 
 private static final Pattern PATTERN _ DOUBLE _ QUOTE = Pattern . compile ( " \ " " , Pattern . LITERAL ) ; 
 - 
 + private static final String ESCAPED _ DOUBLE _ QUOTE = Matcher . quoteReplacement ( " \ " \ " " ) ; 
 + 
 public final ByteBuffer bytes ; 
 private final String text ; 
 / * * 
 @ @ - 332 , 6 + 333 , 6 @ @ public class ColumnIdentifier extends Selectable implements IMeasurableMemory , C 
 { 
 if ( UNQUOTED _ IDENTIFIER . matcher ( text ) . matches ( ) ) 
 return text ; 
 - return ' " ' + PATTERN _ DOUBLE _ QUOTE . matcher ( text ) . replaceAll ( Matcher . quoteReplacement ( " \ " \ " " ) ) + ' " ' ; 
 + return ' " ' + PATTERN _ DOUBLE _ QUOTE . matcher ( text ) . replaceAll ( ESCAPED _ DOUBLE _ QUOTE ) + ' " ' ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 index 3eb0ac9 . . 86754b6 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 @ @ - 17 , 6 + 17 , 7 @ @ 
 * / 
 package org . apache . cassandra . cql3 . statements ; 
 
 + import java . util . regex . Pattern ; 
 import org . apache . cassandra . auth . * ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 @ @ - 31 , 6 + 32 , 8 @ @ import org . apache . cassandra . transport . Event ; 
 / * * A < code > CREATE KEYSPACE < / code > statement parsed from a CQL query . * / 
 public class CreateKeyspaceStatement extends SchemaAlteringStatement 
 { 
 + private static final Pattern PATTERN _ WORD _ CHARS = Pattern . compile ( " \ \ w + " ) ; 
 + 
 private final String name ; 
 private final KeyspaceAttributes attrs ; 
 private final boolean ifNotExists ; 
 @ @ - 73 , 7 + 76 , 7 @ @ public class CreateKeyspaceStatement extends SchemaAlteringStatement 
 ThriftValidation . validateKeyspaceNotSystem ( name ) ; 
 
 / / keyspace name 
 - if ( ! name . matches ( " \ \ w + " ) ) 
 + if ( ! PATTERN _ WORD _ CHARS . matcher ( name ) . matches ( ) ) 
 throw new InvalidRequestException ( String . format ( " \ " % s \ " is not a valid keyspace name " , name ) ) ; 
 if ( name . length ( ) > Schema . NAME _ LENGTH ) 
 throw new InvalidRequestException ( String . format ( " Keyspace names shouldn ' t be more than % s characters long ( got \ " % s \ " ) " , Schema . NAME _ LENGTH , name ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 index c19f970 . . debb200 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 @ @ - 19 , 7 + 19 , 7 @ @ package org . apache . cassandra . cql3 . statements ; 
 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 - 
 + import java . util . regex . Pattern ; 
 import com . google . common . collect . HashMultiset ; 
 import com . google . common . collect . Multiset ; 
 import org . apache . commons . lang3 . StringUtils ; 
 @ @ - 41 , 6 + 41 , 8 @ @ import org . apache . cassandra . transport . Event ; 
 / * * A { @ code CREATE TABLE } parsed from a CQL query statement . * / 
 public class CreateTableStatement extends SchemaAlteringStatement 
 { 
 + private static final Pattern PATTERN _ WORD _ CHARS = Pattern . compile ( " \ \ w + " ) ; 
 + 
 private List < AbstractType < ? > > keyTypes ; 
 private List < AbstractType < ? > > clusteringTypes ; 
 
 @ @ - 202 , 7 + 204 , 7 @ @ public class CreateTableStatement extends SchemaAlteringStatement 
 public ParsedStatement . Prepared prepare ( Types udts ) throws RequestValidationException 
 { 
 / / Column family name 
 - if ( ! columnFamily ( ) . matches ( " \ \ w + " ) ) 
 + if ( ! PATTERN _ WORD _ CHARS . matcher ( columnFamily ( ) ) . matches ( ) ) 
 throw new InvalidRequestException ( String . format ( " \ " % s \ " is not a valid table name ( must be alphanumeric character or underscore only : [ a - zA - Z _ 0 - 9 ] + ) " , columnFamily ( ) ) ) ; 
 if ( columnFamily ( ) . length ( ) > Schema . NAME _ LENGTH ) 
 throw new InvalidRequestException ( String . format ( " Table names shouldn ' t be more than % s characters long ( got \ " % s \ " ) " , Schema . NAME _ LENGTH , columnFamily ( ) ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / PropertyDefinitions . java b / src / java / org / apache / cassandra / cql3 / statements / PropertyDefinitions . java 
 index 793285b . . 590910f 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / PropertyDefinitions . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / PropertyDefinitions . java 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 package org . apache . cassandra . cql3 . statements ; 
 
 import java . util . * ; 
 + import java . util . regex . Pattern ; 
 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 26 , 6 + 27 , 8 @ @ import org . apache . cassandra . exceptions . SyntaxException ; 
 
 public class PropertyDefinitions 
 { 
 + private static final Pattern PATTERN _ POSITIVE = Pattern . compile ( " ( 1 | true | yes ) " ) ; 
 + 
 protected static final Logger logger = LoggerFactory . getLogger ( PropertyDefinitions . class ) ; 
 
 protected final Map < String , Object > properties = new HashMap < String , Object > ( ) ; 
 @ @ - 91 , 7 + 94 , 7 @ @ public class PropertyDefinitions 
 public Boolean getBoolean ( String key , Boolean defaultValue ) throws SyntaxException 
 { 
 String value = getSimple ( key ) ; 
 - return ( value = = null ) ? defaultValue : value . toLowerCase ( ) . matches ( " ( 1 | true | yes ) " ) ; 
 + return ( value = = null ) ? defaultValue : PATTERN _ POSITIVE . matcher ( value . toLowerCase ( ) ) . matches ( ) ; 
 } 
 
 / / Return a property value , typed as a double 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java 
 index 5547d0e . . 97b26c7 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java 
 @ @ - 29 , 6 + 29 , 8 @ @ import java . util . Map ; 
 import java . util . Properties ; 
 import java . util . TimeZone ; 
 import java . util . concurrent . * ; 
 + import java . util . regex . Matcher ; 
 + import java . util . regex . Pattern ; 
 
 import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 @ @ - 46 , 6 + 48 , 10 @ @ public class CommitLogArchiver 
 private static final Logger logger = LoggerFactory . getLogger ( CommitLogArchiver . class ) ; 
 public static final SimpleDateFormat format = new SimpleDateFormat ( " yyyy : MM : dd HH : mm : ss " ) ; 
 private static final String DELIMITER = " , " ; 
 + private static final Pattern NAME = Pattern . compile ( " % name " ) ; 
 + private static final Pattern PATH = Pattern . compile ( " % path " ) ; 
 + private static final Pattern FROM = Pattern . compile ( " % from " ) ; 
 + private static final Pattern TO = Pattern . compile ( " % to " ) ; 
 static 
 { 
 format . setTimeZone ( TimeZone . getTimeZone ( " GMT " ) ) ; 
 @ @ - 136 , 8 + 142 , 8 @ @ public class CommitLogArchiver 
 protected void runMayThrow ( ) throws IOException 
 { 
 segment . waitForFinalSync ( ) ; 
 - String command = archiveCommand . replace ( " % name " , segment . getName ( ) ) ; 
 - command = command . replace ( " % path " , segment . getPath ( ) ) ; 
 + String command = NAME . matcher ( archiveCommand ) . replaceAll ( Matcher . quoteReplacement ( segment . getName ( ) ) ) ; 
 + command = PATH . matcher ( command ) . replaceAll ( Matcher . quoteReplacement ( segment . getPath ( ) ) ) ; 
 exec ( command ) ; 
 } 
 } ) ) ; 
 @ @ - 158 , 8 + 164 , 8 @ @ public class CommitLogArchiver 
 { 
 protected void runMayThrow ( ) throws IOException 
 { 
 - String command = archiveCommand . replace ( " % name " , name ) ; 
 - command = command . replace ( " % path " , path ) ; 
 + String command = NAME . matcher ( archiveCommand ) . replaceAll ( Matcher . quoteReplacement ( name ) ) ; 
 + command = PATH . matcher ( command ) . replaceAll ( Matcher . quoteReplacement ( path ) ) ; 
 exec ( command ) ; 
 } 
 } ) ) ; 
 @ @ - 244 , 8 + 250 , 8 @ @ public class CommitLogArchiver 
 continue ; 
 } 
 
 - String command = restoreCommand . replace ( " % from " , fromFile . getPath ( ) ) ; 
 - command = command . replace ( " % to " , toFile . getPath ( ) ) ; 
 + String command = FROM . matcher ( restoreCommand ) . replaceAll ( Matcher . quoteReplacement ( fromFile . getPath ( ) ) ) ; 
 + command = TO . matcher ( command ) . replaceAll ( Matcher . quoteReplacement ( toFile . getPath ( ) ) ) ; 
 try 
 { 
 exec ( command ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java 
 index 0c71871 . . e97b36e 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java 
 @ @ - 295 , 7 + 295 , 7 @ @ public class CommitLogReplayer 
 Multimap < String , String > toReplay = HashMultimap . create ( ) ; 
 for ( String rawPair : System . getProperty ( " cassandra . replayList " ) . split ( " , " ) ) 
 { 
 - String [ ] pair = rawPair . trim ( ) . split ( " \ \ . " ) ; 
 + String [ ] pair = StringUtils . split ( rawPair . trim ( ) , ' . ' ) ; 
 if ( pair . length ! = 2 ) 
 throw new IllegalArgumentException ( " Each table to be replayed must be fully qualified with keyspace name , e . g . , ' system . peers ' " ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java 
 index ad4050d . . 130ed7b 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import java . nio . ByteBuffer ; 
 import java . util . ArrayList ; 
 import java . util . Collections ; 
 import java . util . List ; 
 + import java . util . regex . Pattern ; 
 
 import org . apache . cassandra . cql3 . Term ; 
 import org . apache . cassandra . serializers . TypeSerializer ; 
 @ @ - 107 , 6 + 108 , 10 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 } 
 return l . toArray ( new ByteBuffer [ l . size ( ) ] ) ; 
 } 
 + private static final String COLON = " : " ; 
 + private static final Pattern COLON _ PAT = Pattern . compile ( COLON ) ; 
 + private static final String ESCAPED _ COLON = " \ \ \ \ : " ; 
 + private static final Pattern ESCAPED _ COLON _ PAT = Pattern . compile ( ESCAPED _ COLON ) ; 
 
 
 / * 
 @ @ - 118 , 7 + 123 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 if ( input . isEmpty ( ) ) 
 return input ; 
 
 - String res = input . replaceAll ( " : " , " \ \ \ \ : " ) ; 
 + String res = COLON _ PAT . matcher ( input ) . replaceAll ( ESCAPED _ COLON ) ; 
 char last = res . charAt ( res . length ( ) - 1 ) ; 
 return last = = ' \ \ ' | | last = = ' ! ' ? res + ' ! ' : res ; 
 } 
 @ @ - 132 , 7 + 137 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 if ( input . isEmpty ( ) ) 
 return input ; 
 
 - String res = input . replaceAll ( " \ \ \ \ : " , " : " ) ; 
 + String res = ESCAPED _ COLON _ PAT . matcher ( input ) . replaceAll ( COLON ) ; 
 char last = res . charAt ( res . length ( ) - 1 ) ; 
 return last = = ' ! ' ? res . substring ( 0 , res . length ( ) - 1 ) : res ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / TupleType . java b / src / java / org / apache / cassandra / db / marshal / TupleType . java 
 index 9480229 . . 362388b 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / TupleType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / TupleType . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 + import java . util . regex . Pattern ; 
 
 import com . google . common . base . Objects ; 
 
 @ @ - 37 , 6 + 38 , 15 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; 
 * / 
 public class TupleType extends AbstractType < ByteBuffer > 
 { 
 + private static final String COLON = " : " ; 
 + private static final Pattern COLON _ PAT = Pattern . compile ( COLON ) ; 
 + private static final String ESCAPED _ COLON = " \ \ \ \ : " ; 
 + private static final Pattern ESCAPED _ COLON _ PAT = Pattern . compile ( ESCAPED _ COLON ) ; 
 + private static final String AT = " @ " ; 
 + private static final Pattern AT _ PAT = Pattern . compile ( AT ) ; 
 + private static final String ESCAPED _ AT = " \ \ \ \ @ " ; 
 + private static final Pattern ESCAPED _ AT _ PAT = Pattern . compile ( ESCAPED _ AT ) ; 
 + 
 protected final List < AbstractType < ? > > types ; 
 
 public TupleType ( List < AbstractType < ? > > types ) 
 @ @ - 215 , 7 + 225 , 9 @ @ public class TupleType extends AbstractType < ByteBuffer > 
 
 ByteBuffer field = ByteBufferUtil . readBytes ( input , size ) ; 
 / / We use ' : ' as delimiter , and @ to represent null , so escape them in the generated string 
 - sb . append ( type . getString ( field ) . replaceAll ( " : " , " \ \ \ \ : " ) . replaceAll ( " @ " , " \ \ \ \ @ " ) ) ; 
 + String fld = COLON _ PAT . matcher ( type . getString ( field ) ) . replaceAll ( ESCAPED _ COLON ) ; 
 + fld = AT _ PAT . matcher ( fld ) . replaceAll ( ESCAPED _ AT ) ; 
 + sb . append ( fld ) ; 
 } 
 return sb . toString ( ) ; 
 } 
 @ @ - 238 , 7 + 250 , 9 @ @ public class TupleType extends AbstractType < ByteBuffer > 
 continue ; 
 
 AbstractType < ? > type = type ( i ) ; 
 - fields [ i ] = type . fromString ( fieldString . replaceAll ( " \ \ \ \ : " , " : " ) . replaceAll ( " \ \ \ \ @ " , " @ " ) ) ; 
 + fieldString = ESCAPED _ COLON _ PAT . matcher ( fieldString ) . replaceAll ( COLON ) ; 
 + fieldString = ESCAPED _ AT _ PAT . matcher ( fieldString ) . replaceAll ( AT ) ; 
 + fields [ i ] = type . fromString ( fieldString ) ; 
 } 
 return buildValue ( fields ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / index / internal / CassandraIndex . java b / src / java / org / apache / cassandra / index / internal / CassandraIndex . java 
 index 4598326 . . 2204a5e 100644 
 - - - a / src / java / org / apache / cassandra / index / internal / CassandraIndex . java 
 + + + b / src / java / org / apache / cassandra / index / internal / CassandraIndex . java 
 @ @ - 725 , 6 + 725 , 9 @ @ public abstract class CassandraIndex implements Index 
 return getFunctions ( indexMetadata , parseTarget ( baseCfs . metadata , indexMetadata ) ) . newIndexInstance ( baseCfs , indexMetadata ) ; 
 } 
 
 + private static final Pattern TWO _ QUOTES = Pattern . compile ( " \ " \ " " ) ; 
 + private static final String QUOTE = " \ " " ; 
 + 
 / / Public because it ' s also used to convert index metadata into a thrift - compatible format 
 public static Pair < ColumnDefinition , IndexTarget . Type > parseTarget ( CFMetaData cfm , 
 IndexMetadata indexDef ) 
 @ @ - 754 , 10 + 757 , 10 @ @ public abstract class CassandraIndex implements Index 
 / / abc " def - > abc " " def . 
 / / Because the target string is stored in a CQL compatible form , we 
 / / need to un - escape any such quotes to get the actual column name 
 - if ( columnName . startsWith ( " \ " " ) ) 
 + if ( columnName . startsWith ( QUOTE ) ) 
 { 
 columnName = StringUtils . substring ( StringUtils . substring ( columnName , 1 ) , 0 , - 1 ) ; 
 - columnName = columnName . replaceAll ( " \ " \ " " , " \ " " ) ; 
 + columnName = TWO _ QUOTES . matcher ( columnName ) . replaceAll ( QUOTE ) ; 
 } 
 
 / / if it ' s not a CQL table , we can ' t assume that the column name is utf8 , so 
 diff - - git a / src / java / org / apache / cassandra / metrics / CassandraMetricsRegistry . java b / src / java / org / apache / cassandra / metrics / CassandraMetricsRegistry . java 
 index 1cd3b6c . . 0d9e6d6 100644 
 - - - a / src / java / org / apache / cassandra / metrics / CassandraMetricsRegistry . java 
 + + + b / src / java / org / apache / cassandra / metrics / CassandraMetricsRegistry . java 
 @ @ - 191 , 6 + 191 , 18 @ @ public class CassandraMetricsRegistry extends MetricRegistry 
 mBeanServer . unregisterMBean ( name . getMBeanName ( ) ) ; 
 } catch ( Exception ignore ) { } 
 } 
 + 
 + / * * 
 + * Strips a single final ' $ ' from input 
 + * 
 + * @ param s String to strip 
 + * @ return a string with one less ' $ ' at end 
 + * / 
 + private static String withoutFinalDollar ( String s ) 
 + { 
 + int l = s . length ( ) ; 
 + return ( l ! = 0 & & ' $ ' = = s . charAt ( l - 1 ) ) ? s . substring ( 0 , l - 1 ) : s ; 
 + } 
 
 public interface MetricMBean 
 { 
 @ @ - 601 , 7 + 613 , 7 @ @ public class CassandraMetricsRegistry extends MetricRegistry 
 public MetricName ( Class < ? > klass , String name , String scope ) 
 { 
 this ( klass . getPackage ( ) = = null ? " " : klass . getPackage ( ) . getName ( ) , 
 - klass . getSimpleName ( ) . replaceAll ( " \ \ $ $ " , " " ) , 
 + withoutFinalDollar ( klass . getSimpleName ( ) ) , 
 name , 
 scope ) ; 
 } 
 @ @ - 811 , 7 + 823 , 7 @ @ public class CassandraMetricsRegistry extends MetricRegistry 
 { 
 if ( type = = null | | type . isEmpty ( ) ) 
 { 
 - type = klass . getSimpleName ( ) . replaceAll ( " \ \ $ $ " , " " ) ; 
 + type = withoutFinalDollar ( klass . getSimpleName ( ) ) ; 
 } 
 return type ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / schema / IndexMetadata . java b / src / java / org / apache / cassandra / schema / IndexMetadata . java 
 index ee9179a . . 59ac1cf 100644 
 - - - a / src / java / org / apache / cassandra / schema / IndexMetadata . java 
 + + + b / src / java / org / apache / cassandra / schema / IndexMetadata . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package org . apache . cassandra . schema ; 
 import java . io . IOException ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . util . * ; 
 + import java . util . regex . Pattern ; 
 import java . util . stream . Collectors ; 
 
 import com . google . common . base . Objects ; 
 @ @ - 46 , 6 + 47 , 10 @ @ import org . apache . cassandra . utils . UUIDSerializer ; 
 public final class IndexMetadata 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( IndexMetadata . class ) ; 
 + 
 + private static final Pattern PATTERN _ NON _ WORD _ CHAR = Pattern . compile ( " \ \ W " ) ; 
 + private static final Pattern PATTERN _ WORD _ CHARS = Pattern . compile ( " \ \ w + " ) ; 
 + 
 
 public static final Serializer serializer = new Serializer ( ) ; 
 
 @ @ - 127 , 15 + 132 , 15 @ @ public final class IndexMetadata 
 
 public static boolean isNameValid ( String name ) 
 { 
 - return name ! = null & & ! name . isEmpty ( ) & & name . matches ( " \ \ w + " ) ; 
 + return name ! = null & & ! name . isEmpty ( ) & & PATTERN _ WORD _ CHARS . matcher ( name ) . matches ( ) ; 
 } 
 
 public static String getDefaultIndexName ( String cfName , String root ) 
 { 
 if ( root = = null ) 
 - return ( cfName + " _ " + " idx " ) . replaceAll ( " \ \ W " , " " ) ; 
 + return PATTERN _ NON _ WORD _ CHAR . matcher ( cfName + " _ " + " idx " ) . replaceAll ( " " ) ; 
 else 
 - return ( cfName + " _ " + root + " _ idx " ) . replaceAll ( " \ \ W " , " " ) ; 
 + return PATTERN _ NON _ WORD _ CHAR . matcher ( cfName + " _ " + root + " _ idx " ) . replaceAll ( " " ) ; 
 } 
 
 public void validate ( ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 069af53 . . 60ede18 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 166 , 7 + 166 , 7 @ @ import static java . util . Arrays . asList ; 
 public class StorageService extends NotificationBroadcasterSupport implements IEndpointStateChangeSubscriber , StorageServiceMBean 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( StorageService . class ) ; 
 - 
 + 
 public static final int RING _ DELAY = getRingDelay ( ) ; / / delay after which we assume ring has stablized 
 
 private final JMXProgressSupport progressSupport = new JMXProgressSupport ( this ) ; 
 @ @ - 2707 , 7 + 2707 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 Map < Keyspace , List < String > > keyspaceColumnfamily = new HashMap < Keyspace , List < String > > ( ) ; 
 for ( String table : tableList ) 
 { 
 - String splittedString [ ] = table . split ( " \ \ . " ) ; 
 + String splittedString [ ] = StringUtils . split ( table , ' . ' ) ; 
 if ( splittedString . length = = 2 ) 
 { 
 String keyspaceName = splittedString [ 0 ] ; 
 diff - - git a / src / java / org / apache / cassandra / utils / CassandraVersion . java b / src / java / org / apache / cassandra / utils / CassandraVersion . java 
 index aac7df9 . . 759ca97 100644 
 - - - a / src / java / org / apache / cassandra / utils / CassandraVersion . java 
 + + + b / src / java / org / apache / cassandra / utils / CassandraVersion . java 
 @ @ - 37 , 6 + 37 , 8 @ @ public class CassandraVersion implements Comparable < CassandraVersion > 
 * this is because 3rd and the last can be identical . 
 * * / 
 private static final String VERSION _ REGEXP = " ( \ \ d + ) \ \ . ( \ \ d + ) ( ? : \ \ . ( \ \ w + ) ) ? ( \ \ - [ . \ \ w ] + ) ? ( [ . + ] [ . \ \ w ] + ) ? " ; 
 + private static final Pattern PATTERN _ WHITESPACE = Pattern . compile ( " \ \ w + " ) ; 
 + 
 private static final Pattern pattern = Pattern . compile ( VERSION _ REGEXP ) ; 
 private static final Pattern SNAPSHOT = Pattern . compile ( " - SNAPSHOT " ) ; 
 
 @ @ - 83 , 10 + 85 , 10 @ @ public class CassandraVersion implements Comparable < CassandraVersion > 
 { 
 / / Drop initial - or + 
 str = str . substring ( 1 ) ; 
 - String [ ] parts = str . split ( " \ \ . " ) ; 
 + String [ ] parts = StringUtils . split ( str , ' . ' ) ; 
 for ( String part : parts ) 
 { 
 - if ( ! part . matches ( " \ \ w + " ) ) 
 + if ( ! PATTERN _ WHITESPACE . matcher ( part ) . matches ( ) ) 
 throw new IllegalArgumentException ( " Invalid version value : " + version ) ; 
 } 
 return parts ; 
 diff - - git a / test / unit / org / apache / cassandra / config / CFMetaDataTest . java b / test / unit / org / apache / cassandra / config / CFMetaDataTest . java 
 index 9d91df3 . . 188f72f 100644 
 - - - a / test / unit / org / apache / cassandra / config / CFMetaDataTest . java 
 + + + b / test / unit / org / apache / cassandra / config / CFMetaDataTest . java 
 @ @ - 49 , 6 + 49 , 8 @ @ import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertTrue ; 
 
 public class CFMetaDataTest 
 { 
 @ @ - 173 , 4 + 175 , 22 @ @ public class CFMetaDataTest 
 assertEquals ( cfm . params , params ) ; 
 assertEquals ( new HashSet < > ( cfm . allColumns ( ) ) , columns ) ; 
 } 
 + 
 + @ Test 
 + public void testIsNameValidPositive ( ) 
 + { 
 + assertTrue ( CFMetaData . isNameValid ( " abcdefghijklmnopqrstuvwxyz " ) ) ; 
 + assertTrue ( CFMetaData . isNameValid ( " ABCDEFGHIJKLMNOPQRSTUVWXYZ " ) ) ; 
 + assertTrue ( CFMetaData . isNameValid ( " _ 01234567890 " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsNameValidNegative ( ) 
 + { 
 + assertFalse ( CFMetaData . isNameValid ( null ) ) ; 
 + assertFalse ( CFMetaData . isNameValid ( " " ) ) ; 
 + assertFalse ( CFMetaData . isNameValid ( " " ) ) ; 
 + assertFalse ( CFMetaData . isNameValid ( " @ " ) ) ; 
 + assertFalse ( CFMetaData . isNameValid ( " ! " ) ) ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java b / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java 
 index 3a3b6ee . . 84f0235 100644 
 - - - a / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java 
 + + + b / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java 
 @ @ - 23 , 6 + 23 , 8 @ @ import java . net . Inet4Address ; 
 import java . net . Inet6Address ; 
 import java . net . InetAddress ; 
 import java . net . NetworkInterface ; 
 + import java . util . Arrays ; 
 + import java . util . Collection ; 
 import java . util . Enumeration ; 
 
 import org . junit . BeforeClass ; 
 @ @ - 43 , 6 + 45 , 8 @ @ import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertNull ; 
 
 + import static org . junit . Assert . assertTrue ; 
 + 
 @ RunWith ( OrderedJUnit4ClassRunner . class ) 
 public class DatabaseDescriptorTest 
 { 
 @ @ - 265 , 4 + 269 , 15 @ @ public class DatabaseDescriptorTest 
 DatabaseDescriptor . applyAddressConfig ( testConfig ) ; 
 
 } 
 + 
 + @ Test 
 + public void testTokensFromString ( ) 
 + { 
 + assertTrue ( DatabaseDescriptor . tokensFromString ( null ) . isEmpty ( ) ) ; 
 + Collection < String > tokens = DatabaseDescriptor . tokensFromString ( " a , b , c , d , f , g , h " ) ; 
 + assertEquals ( 7 , tokens . size ( ) ) ; 
 + assertTrue ( tokens . containsAll ( Arrays . asList ( new String [ ] { " a " , " b " , " c " , " d " , " f " , " g " , " h " } ) ) ) ; 
 + 
 + 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / ColumnIdentifierTest . java b / test / unit / org / apache / cassandra / cql3 / ColumnIdentifierTest . java 
 index c287883 . . 158110c 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / ColumnIdentifierTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / ColumnIdentifierTest . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import org . junit . Test ; 
 import junit . framework . Assert ; 
 import org . apache . cassandra . db . marshal . BytesType ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import static org . junit . Assert . assertEquals ; 
 
 public class ColumnIdentifierTest 
 { 
 @ @ - 57 , 5 + 58 , 23 @ @ public class ColumnIdentifierTest 
 { 
 return v < 0 ? - 1 : v > 0 ? 1 : 0 ; 
 } 
 + 
 + @ Test 
 + public void testMaybeQuote ( ) 
 + { 
 + String unquotable = " a " ; 
 + assertEquals ( unquotable , ColumnIdentifier . maybeQuote ( unquotable ) ) ; 
 + unquotable = " z4 " ; 
 + assertEquals ( unquotable , ColumnIdentifier . maybeQuote ( unquotable ) ) ; 
 + unquotable = " m _ 4 _ " ; 
 + assertEquals ( unquotable , ColumnIdentifier . maybeQuote ( unquotable ) ) ; 
 + unquotable = " f _ _ " ; 
 + assertEquals ( unquotable , ColumnIdentifier . maybeQuote ( unquotable ) ) ; 
 + 
 + assertEquals ( " \ " A \ " " , ColumnIdentifier . maybeQuote ( " A " ) ) ; 
 + assertEquals ( " \ " 4b \ " " , ColumnIdentifier . maybeQuote ( " 4b " ) ) ; 
 + assertEquals ( " \ " \ " \ " \ " " , ColumnIdentifier . maybeQuote ( " \ " " ) ) ; 
 + assertEquals ( " \ " \ " \ " a \ " \ " b \ " \ " \ " " , ColumnIdentifier . maybeQuote ( " \ " a \ " b \ " " ) ) ; 
 + } 
 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / statements / PropertyDefinitionsTest . java b / test / unit / org / apache / cassandra / cql3 / statements / PropertyDefinitionsTest . java 
 new file mode 100644 
 index 0000000 . . 417fcdc 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / cql3 / statements / PropertyDefinitionsTest . java 
 @ @ - 0 , 0 + 1 , 61 @ @ 
 + package org . apache . cassandra . cql3 . statements ; 
 + 
 + import org . junit . After ; 
 + import org . junit . Test ; 
 + import org . junit . Before ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + public class PropertyDefinitionsTest { 
 + 
 + PropertyDefinitions pd ; 
 + 
 + @ Before 
 + public void setUp ( ) 
 + { 
 + pd = new PropertyDefinitions ( ) ; 
 + } 
 + 
 + @ After 
 + public void clear ( ) 
 + { 
 + pd = null ; 
 + } 
 + 
 + 
 + @ Test 
 + public void testGetBooleanExistant ( ) 
 + { 
 + String key = " one " ; 
 + pd . addProperty ( key , " 1 " ) ; 
 + assertEquals ( Boolean . TRUE , pd . getBoolean ( key , null ) ) ; 
 + 
 + key = " TRUE " ; 
 + pd . addProperty ( key , " TrUe " ) ; 
 + assertEquals ( Boolean . TRUE , pd . getBoolean ( key , null ) ) ; 
 + 
 + key = " YES " ; 
 + pd . addProperty ( key , " YeS " ) ; 
 + assertEquals ( Boolean . TRUE , pd . getBoolean ( key , null ) ) ; 
 + 
 + key = " BAD _ ONE " ; 
 + pd . addProperty ( key , " 1 " ) ; 
 + assertEquals ( Boolean . FALSE , pd . getBoolean ( key , null ) ) ; 
 + 
 + key = " BAD _ TRUE " ; 
 + pd . addProperty ( key , " true " ) ; 
 + assertEquals ( Boolean . FALSE , pd . getBoolean ( key , null ) ) ; 
 + 
 + key = " BAD _ YES " ; 
 + pd . addProperty ( key , " ye s " ) ; 
 + assertEquals ( Boolean . FALSE , pd . getBoolean ( key , null ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetBooleanNonexistant ( ) 
 + { 
 + assertEquals ( Boolean . FALSE , pd . getBoolean ( " nonexistant " , Boolean . FALSE ) ) ; 
 + assertEquals ( Boolean . TRUE , pd . getBoolean ( " nonexistant " , Boolean . TRUE ) ) ; 
 + } 
 + 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / db / marshal / AbstractCompositeTypeTest . java b / test / unit / org / apache / cassandra / db / marshal / AbstractCompositeTypeTest . java 
 new file mode 100644 
 index 0000000 . . 0e91532 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / db / marshal / AbstractCompositeTypeTest . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + package org . apache . cassandra . db . marshal ; 
 + 
 + import org . junit . Test ; 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + public class AbstractCompositeTypeTest 
 + { 
 + 
 + @ Test 
 + public void testEscape ( ) 
 + { 
 + assertEquals ( " " , AbstractCompositeType . escape ( " " ) ) ; 
 + assertEquals ( " Ab ! CdXy \ \ Z123 - 345 " , AbstractCompositeType . escape ( " Ab ! CdXy \ \ Z123 - 345 " ) ) ; 
 + assertEquals ( " Ab ! CdXy \ \ Z123 - 345 ! ! " , AbstractCompositeType . escape ( " Ab ! CdXy \ \ Z123 - 345 ! " ) ) ; 
 + assertEquals ( " Ab ! CdXy \ \ Z123 - 345 \ \ ! " , AbstractCompositeType . escape ( " Ab ! CdXy \ \ Z123 - 345 \ \ " ) ) ; 
 + 
 + assertEquals ( " A \ \ : b ! CdXy \ \ \ \ : Z123 - 345 " , AbstractCompositeType . escape ( " A : b ! CdXy \ \ : Z123 - 345 " ) ) ; 
 + assertEquals ( " A \ \ : b ! CdXy \ \ \ \ : Z123 - 345 ! ! " , AbstractCompositeType . escape ( " A : b ! CdXy \ \ : Z123 - 345 ! " ) ) ; 
 + assertEquals ( " A \ \ : b ! CdXy \ \ \ \ : Z123 - 345 \ \ ! " , AbstractCompositeType . escape ( " A : b ! CdXy \ \ : Z123 - 345 \ \ " ) ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testUnescape ( ) 
 + { 
 + assertEquals ( " " , AbstractCompositeType . escape ( " " ) ) ; 
 + assertEquals ( " Ab ! CdXy \ \ Z123 - 345 " , AbstractCompositeType . unescape ( " Ab ! CdXy \ \ Z123 - 345 " ) ) ; 
 + assertEquals ( " Ab ! CdXy \ \ Z123 - 345 ! " , AbstractCompositeType . unescape ( " Ab ! CdXy \ \ Z123 - 345 ! ! " ) ) ; 
 + assertEquals ( " Ab ! CdXy \ \ Z123 - 345 \ \ " , AbstractCompositeType . unescape ( " Ab ! CdXy \ \ Z123 - 345 \ \ ! " ) ) ; 
 + 
 + assertEquals ( " A : b ! CdXy \ \ : Z123 - 345 " , AbstractCompositeType . unescape ( " A \ \ : b ! CdXy \ \ \ \ : Z123 - 345 " ) ) ; 
 + assertEquals ( " A : b ! CdXy \ \ : Z123 - 345 ! " , AbstractCompositeType . unescape ( " A \ \ : b ! CdXy \ \ \ \ : Z123 - 345 ! ! " ) ) ; 
 + assertEquals ( " A : b ! CdXy \ \ : Z123 - 345 \ \ " , AbstractCompositeType . unescape ( " A \ \ : b ! CdXy \ \ \ \ : Z123 - 345 \ \ ! " ) ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / metrics / CassandraMetricsRegistryTest . java b / test / unit / org / apache / cassandra / metrics / CassandraMetricsRegistryTest . java 
 new file mode 100644 
 index 0000000 . . 0258b8c 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / metrics / CassandraMetricsRegistryTest . java 
 @ @ - 0 , 0 + 1 , 34 @ @ 
 + package org . apache . cassandra . metrics ; 
 + 
 + import org . junit . Test ; 
 + import org . apache . cassandra . metrics . CassandraMetricsRegistry . MetricName ; 
 + import static org . junit . Assert . * ; 
 + 
 + 
 + public class CassandraMetricsRegistryTest 
 + { 
 + / / A class with a name ending in ' $ ' 
 + private static class StrangeName $ 
 + { 
 + } 
 + 
 + @ Test 
 + public void testChooseType ( ) 
 + { 
 + assertEquals ( " StrangeName " , MetricName . chooseType ( null , StrangeName $ . class ) ) ; 
 + assertEquals ( " StrangeName " , MetricName . chooseType ( " " , StrangeName $ . class ) ) ; 
 + assertEquals ( " String " , MetricName . chooseType ( null , String . class ) ) ; 
 + assertEquals ( " String " , MetricName . chooseType ( " " , String . class ) ) ; 
 + 
 + assertEquals ( " a " , MetricName . chooseType ( " a " , StrangeName $ . class ) ) ; 
 + assertEquals ( " b " , MetricName . chooseType ( " b " , String . class ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testMetricName ( ) 
 + { 
 + MetricName name = new MetricName ( StrangeName $ . class , " NaMe " , " ScOpE " ) ; 
 + assertEquals ( " StrangeName " , name . getType ( ) ) ; 
 + } 
 + 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / schema / IndexMetadataTest . java b / test / unit / org / apache / cassandra / schema / IndexMetadataTest . java 
 new file mode 100644 
 index 0000000 . . 901a5aa 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / schema / IndexMetadataTest . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + package org . apache . cassandra . schema ; 
 + 
 + import org . junit . Assert ; 
 + import org . junit . Test ; 
 + 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + public class IndexMetadataTest { 
 + 
 + @ Test 
 + public void testIsNameValidPositive ( ) 
 + { 
 + assertTrue ( IndexMetadata . isNameValid ( " abcdefghijklmnopqrstuvwxyz " ) ) ; 
 + assertTrue ( IndexMetadata . isNameValid ( " ABCDEFGHIJKLMNOPQRSTUVWXYZ " ) ) ; 
 + assertTrue ( IndexMetadata . isNameValid ( " _ 01234567890 " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsNameValidNegative ( ) 
 + { 
 + assertFalse ( IndexMetadata . isNameValid ( null ) ) ; 
 + assertFalse ( IndexMetadata . isNameValid ( " " ) ) ; 
 + assertFalse ( IndexMetadata . isNameValid ( " " ) ) ; 
 + assertFalse ( IndexMetadata . isNameValid ( " @ " ) ) ; 
 + assertFalse ( IndexMetadata . isNameValid ( " ! " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetDefaultIndexName ( ) 
 + { 
 + Assert . assertEquals ( " aB4 _ _ idx " , IndexMetadata . getDefaultIndexName ( " a B - 4 @ ! _ + " , null ) ) ; 
 + Assert . assertEquals ( " 34 _ Ddd _ F6 _ idx " , IndexMetadata . getDefaultIndexName ( " 34 _ ( ) Ddd " , " # F % 6 * " ) ) ; 
 + 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java b / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java 
 index cec668f . . 73562b7 100644 
 - - - a / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java 
 @ @ - 17 , 10 + 17 , 16 @ @ 
 * / 
 package org . apache . cassandra . utils ; 
 
 + import java . lang . reflect . InvocationTargetException ; 
 + import java . lang . reflect . Method ; 
 + import java . util . Arrays ; 
 import org . junit . Test ; 
 
 + import static org . junit . Assert . assertArrayEquals ; 
 + import static org . junit . Assert . assertThat ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 + import static org . junit . matchers . JUnitMatchers . containsString ; 
 
 public class CassandraVersionTest 
 { 
 @ @ - 153 , 7 + 159 , 7 @ @ public class CassandraVersionTest 
 next = new CassandraVersion ( " 3 . 2 " ) ; 
 assertTrue ( prev . compareTo ( next ) < 0 ) ; 
 } 
 - 
 + 
 private static void assertThrows ( String str ) 
 { 
 try 
 @ @ - 163 , 4 + 169 , 47 @ @ public class CassandraVersionTest 
 } 
 catch ( IllegalArgumentException e ) { } 
 } 
 + 
 + @ Test 
 + public void testParseIdentifiersPositive ( ) throws Throwable 
 + { 
 + String [ ] result = parseIdentifiers ( " DUMMY " , " + a . b . cde . f _ g . " ) ; 
 + String [ ] expected = { " a " , " b " , " cde " , " f _ g " } ; 
 + assertArrayEquals ( expected , result ) ; 
 + } 
 + 
 + @ Test 
 + public void testParseIdentifiersNegative ( ) throws Throwable 
 + { 
 + String version = " DUMMY " ; 
 + try 
 + { 
 + parseIdentifiers ( version , " + a . . b " ) ; 
 + 
 + } 
 + catch ( IllegalArgumentException e ) 
 + { 
 + assertThat ( e . getMessage ( ) , containsString ( version ) ) ; 
 + } 
 + } 
 + private static String [ ] parseIdentifiers ( String version , String str ) throws Throwable 
 + { 
 + String name = " parseIdentifiers " ; 
 + Class [ ] args = { String . class , String . class } ; 
 + for ( Method m : CassandraVersion . class . getDeclaredMethods ( ) ) 
 + { 
 + if ( name . equals ( m . getName ( ) ) & & 
 + Arrays . equals ( args , m . getParameterTypes ( ) ) ) 
 + { 
 + m . setAccessible ( true ) ; 
 + try 
 + { 
 + return ( String [ ] ) m . invoke ( null , version , str ) ; 
 + } catch ( InvocationTargetException e ) { 
 + throw e . getTargetException ( ) ; 
 + } 
 + } 
 + } 
 + throw new NoSuchMethodException ( CassandraVersion . class + " . " + name + Arrays . toString ( args ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / lib / licenses / guava - r05 . txt b / lib / licenses / guava - r05 . txt 
 deleted file mode 100644 
 index d645695 . . 0000000 
 - - - a / lib / licenses / guava - r05 . txt 
 + + + / dev / null 
 @ @ - 1 , 202 + 0 , 0 @ @ 
 - 
 - Apache License 
 - Version 2 . 0 , January 2004 
 - http : / / www . apache . org / licenses / 
 - 
 - TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION 
 - 
 - 1 . Definitions . 
 - 
 - " License " shall mean the terms and conditions for use , reproduction , 
 - and distribution as defined by Sections 1 through 9 of this document . 
 - 
 - " Licensor " shall mean the copyright owner or entity authorized by 
 - the copyright owner that is granting the License . 
 - 
 - " Legal Entity " shall mean the union of the acting entity and all 
 - other entities that control , are controlled by , or are under common 
 - control with that entity . For the purposes of this definition , 
 - " control " means ( i ) the power , direct or indirect , to cause the 
 - direction or management of such entity , whether by contract or 
 - otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the 
 - outstanding shares , or ( iii ) beneficial ownership of such entity . 
 - 
 - " You " ( or " Your " ) shall mean an individual or Legal Entity 
 - exercising permissions granted by this License . 
 - 
 - " Source " form shall mean the preferred form for making modifications , 
 - including but not limited to software source code , documentation 
 - source , and configuration files . 
 - 
 - " Object " form shall mean any form resulting from mechanical 
 - transformation or translation of a Source form , including but 
 - not limited to compiled object code , generated documentation , 
 - and conversions to other media types . 
 - 
 - " Work " shall mean the work of authorship , whether in Source or 
 - Object form , made available under the License , as indicated by a 
 - copyright notice that is included in or attached to the work 
 - ( an example is provided in the Appendix below ) . 
 - 
 - " Derivative Works " shall mean any work , whether in Source or Object 
 - form , that is based on ( or derived from ) the Work and for which the 
 - editorial revisions , annotations , elaborations , or other modifications 
 - represent , as a whole , an original work of authorship . For the purposes 
 - of this License , Derivative Works shall not include works that remain 
 - separable from , or merely link ( or bind by name ) to the interfaces of , 
 - the Work and Derivative Works thereof . 
 - 
 - " Contribution " shall mean any work of authorship , including 
 - the original version of the Work and any modifications or additions 
 - to that Work or Derivative Works thereof , that is intentionally 
 - submitted to Licensor for inclusion in the Work by the copyright owner 
 - or by an individual or Legal Entity authorized to submit on behalf of 
 - the copyright owner . For the purposes of this definition , " submitted " 
 - means any form of electronic , verbal , or written communication sent 
 - to the Licensor or its representatives , including but not limited to 
 - communication on electronic mailing lists , source code control systems , 
 - and issue tracking systems that are managed by , or on behalf of , the 
 - Licensor for the purpose of discussing and improving the Work , but 
 - excluding communication that is conspicuously marked or otherwise 
 - designated in writing by the copyright owner as " Not a Contribution . " 
 - 
 - " Contributor " shall mean Licensor and any individual or Legal Entity 
 - on behalf of whom a Contribution has been received by Licensor and 
 - subsequently incorporated within the Work . 
 - 
 - 2 . Grant of Copyright License . Subject to the terms and conditions of 
 - this License , each Contributor hereby grants to You a perpetual , 
 - worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 - copyright license to reproduce , prepare Derivative Works of , 
 - publicly display , publicly perform , sublicense , and distribute the 
 - Work and such Derivative Works in Source or Object form . 
 - 
 - 3 . Grant of Patent License . Subject to the terms and conditions of 
 - this License , each Contributor hereby grants to You a perpetual , 
 - worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 - ( except as stated in this section ) patent license to make , have made , 
 - use , offer to sell , sell , import , and otherwise transfer the Work , 
 - where such license applies only to those patent claims licensable 
 - by such Contributor that are necessarily infringed by their 
 - Contribution ( s ) alone or by combination of their Contribution ( s ) 
 - with the Work to which such Contribution ( s ) was submitted . If You 
 - institute patent litigation against any entity ( including a 
 - cross - claim or counterclaim in a lawsuit ) alleging that the Work 
 - or a Contribution incorporated within the Work constitutes direct 
 - or contributory patent infringement , then any patent licenses 
 - granted to You under this License for that Work shall terminate 
 - as of the date such litigation is filed . 
 - 
 - 4 . Redistribution . You may reproduce and distribute copies of the 
 - Work or Derivative Works thereof in any medium , with or without 
 - modifications , and in Source or Object form , provided that You 
 - meet the following conditions : 
 - 
 - ( a ) You must give any other recipients of the Work or 
 - Derivative Works a copy of this License ; and 
 - 
 - ( b ) You must cause any modified files to carry prominent notices 
 - stating that You changed the files ; and 
 - 
 - ( c ) You must retain , in the Source form of any Derivative Works 
 - that You distribute , all copyright , patent , trademark , and 
 - attribution notices from the Source form of the Work , 
 - excluding those notices that do not pertain to any part of 
 - the Derivative Works ; and 
 - 
 - ( d ) If the Work includes a " NOTICE " text file as part of its 
 - distribution , then any Derivative Works that You distribute must 
 - include a readable copy of the attribution notices contained 
 - within such NOTICE file , excluding those notices that do not 
 - pertain to any part of the Derivative Works , in at least one 
 - of the following places : within a NOTICE text file distributed 
 - as part of the Derivative Works ; within the Source form or 
 - documentation , if provided along with the Derivative Works ; or , 
 - within a display generated by the Derivative Works , if and 
 - wherever such third - party notices normally appear . The contents 
 - of the NOTICE file are for informational purposes only and 
 - do not modify the License . You may add Your own attribution 
 - notices within Derivative Works that You distribute , alongside 
 - or as an addendum to the NOTICE text from the Work , provided 
 - that such additional attribution notices cannot be construed 
 - as modifying the License . 
 - 
 - You may add Your own copyright statement to Your modifications and 
 - may provide additional or different license terms and conditions 
 - for use , reproduction , or distribution of Your modifications , or 
 - for any such Derivative Works as a whole , provided Your use , 
 - reproduction , and distribution of the Work otherwise complies with 
 - the conditions stated in this License . 
 - 
 - 5 . Submission of Contributions . Unless You explicitly state otherwise , 
 - any Contribution intentionally submitted for inclusion in the Work 
 - by You to the Licensor shall be under the terms and conditions of 
 - this License , without any additional terms or conditions . 
 - Notwithstanding the above , nothing herein shall supersede or modify 
 - the terms of any separate license agreement you may have executed 
 - with Licensor regarding such Contributions . 
 - 
 - 6 . Trademarks . This License does not grant permission to use the trade 
 - names , trademarks , service marks , or product names of the Licensor , 
 - except as required for reasonable and customary use in describing the 
 - origin of the Work and reproducing the content of the NOTICE file . 
 - 
 - 7 . Disclaimer of Warranty . Unless required by applicable law or 
 - agreed to in writing , Licensor provides the Work ( and each 
 - Contributor provides its Contributions ) on an " AS IS " BASIS , 
 - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or 
 - implied , including , without limitation , any warranties or conditions 
 - of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A 
 - PARTICULAR PURPOSE . You are solely responsible for determining the 
 - appropriateness of using or redistributing the Work and assume any 
 - risks associated with Your exercise of permissions under this License . 
 - 
 - 8 . Limitation of Liability . In no event and under no legal theory , 
 - whether in tort ( including negligence ) , contract , or otherwise , 
 - unless required by applicable law ( such as deliberate and grossly 
 - negligent acts ) or agreed to in writing , shall any Contributor be 
 - liable to You for damages , including any direct , indirect , special , 
 - incidental , or consequential damages of any character arising as a 
 - result of this License or out of the use or inability to use the 
 - Work ( including but not limited to damages for loss of goodwill , 
 - work stoppage , computer failure or malfunction , or any and all 
 - other commercial damages or losses ) , even if such Contributor 
 - has been advised of the possibility of such damages . 
 - 
 - 9 . Accepting Warranty or Additional Liability . While redistributing 
 - the Work or Derivative Works thereof , You may choose to offer , 
 - and charge a fee for , acceptance of support , warranty , indemnity , 
 - or other liability obligations and / or rights consistent with this 
 - License . However , in accepting such obligations , You may act only 
 - on Your own behalf and on Your sole responsibility , not on behalf 
 - of any other Contributor , and only if You agree to indemnify , 
 - defend , and hold each Contributor harmless for any liability 
 - incurred by , or claims asserted against , such Contributor by reason 
 - of your accepting any such warranty or additional liability . 
 - 
 - END OF TERMS AND CONDITIONS 
 - 
 - APPENDIX : How to apply the Apache License to your work . 
 - 
 - To apply the Apache License to your work , attach the following 
 - boilerplate notice , with the fields enclosed by brackets " [ ] " 
 - replaced with your own identifying information . ( Don ' t include 
 - the brackets ! ) The text should be enclosed in the appropriate 
 - comment syntax for the file format . We also recommend that a 
 - file or class name and description of purpose be included on the 
 - same " printed page " as the copyright notice for easier 
 - identification within third - party archives . 
 - 
 - Copyright [ yyyy ] [ name of copyright owner ] 
 - 
 - Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - you may not use this file except in compliance with the License . 
 - You may obtain a copy of the License at 
 - 
 - http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - 
 - Unless required by applicable law or agreed to in writing , software 
 - distributed under the License is distributed on an " AS IS " BASIS , 
 - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - See the License for the specific language governing permissions and 
 - limitations under the License . 
 diff - - git a / lib / licenses / guava - r08 . txt b / lib / licenses / guava - r08 . txt 
 new file mode 100644 
 index 0000000 . . d645695 
 - - - / dev / null 
 + + + b / lib / licenses / guava - r08 . txt 
 @ @ - 0 , 0 + 1 , 202 @ @ 
 + 
 + Apache License 
 + Version 2 . 0 , January 2004 
 + http : / / www . apache . org / licenses / 
 + 
 + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION 
 + 
 + 1 . Definitions . 
 + 
 + " License " shall mean the terms and conditions for use , reproduction , 
 + and distribution as defined by Sections 1 through 9 of this document . 
 + 
 + " Licensor " shall mean the copyright owner or entity authorized by 
 + the copyright owner that is granting the License . 
 + 
 + " Legal Entity " shall mean the union of the acting entity and all 
 + other entities that control , are controlled by , or are under common 
 + control with that entity . For the purposes of this definition , 
 + " control " means ( i ) the power , direct or indirect , to cause the 
 + direction or management of such entity , whether by contract or 
 + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the 
 + outstanding shares , or ( iii ) beneficial ownership of such entity . 
 + 
 + " You " ( or " Your " ) shall mean an individual or Legal Entity 
 + exercising permissions granted by this License . 
 + 
 + " Source " form shall mean the preferred form for making modifications , 
 + including but not limited to software source code , documentation 
 + source , and configuration files . 
 + 
 + " Object " form shall mean any form resulting from mechanical 
 + transformation or translation of a Source form , including but 
 + not limited to compiled object code , generated documentation , 
 + and conversions to other media types . 
 + 
 + " Work " shall mean the work of authorship , whether in Source or 
 + Object form , made available under the License , as indicated by a 
 + copyright notice that is included in or attached to the work 
 + ( an example is provided in the Appendix below ) . 
 + 
 + " Derivative Works " shall mean any work , whether in Source or Object 
 + form , that is based on ( or derived from ) the Work and for which the 
 + editorial revisions , annotations , elaborations , or other modifications 
 + represent , as a whole , an original work of authorship . For the purposes 
 + of this License , Derivative Works shall not include works that remain 
 + separable from , or merely link ( or bind by name ) to the interfaces of , 
 + the Work and Derivative Works thereof . 
 + 
 + " Contribution " shall mean any work of authorship , including 
 + the original version of the Work and any modifications or additions 
 + to that Work or Derivative Works thereof , that is intentionally 
 + submitted to Licensor for inclusion in the Work by the copyright owner 
 + or by an individual or Legal Entity authorized to submit on behalf of 
 + the copyright owner . For the purposes of this definition , " submitted " 
 + means any form of electronic , verbal , or written communication sent 
 + to the Licensor or its representatives , including but not limited to 
 + communication on electronic mailing lists , source code control systems , 
 + and issue tracking systems that are managed by , or on behalf of , the 
 + Licensor for the purpose of discussing and improving the Work , but 
 + excluding communication that is conspicuously marked or otherwise 
 + designated in writing by the copyright owner as " Not a Contribution . " 
 + 
 + " Contributor " shall mean Licensor and any individual or Legal Entity 
 + on behalf of whom a Contribution has been received by Licensor and 
 + subsequently incorporated within the Work . 
 + 
 + 2 . Grant of Copyright License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + copyright license to reproduce , prepare Derivative Works of , 
 + publicly display , publicly perform , sublicense , and distribute the 
 + Work and such Derivative Works in Source or Object form . 
 + 
 + 3 . Grant of Patent License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + ( except as stated in this section ) patent license to make , have made , 
 + use , offer to sell , sell , import , and otherwise transfer the Work , 
 + where such license applies only to those patent claims licensable 
 + by such Contributor that are necessarily infringed by their 
 + Contribution ( s ) alone or by combination of their Contribution ( s ) 
 + with the Work to which such Contribution ( s ) was submitted . If You 
 + institute patent litigation against any entity ( including a 
 + cross - claim or counterclaim in a lawsuit ) alleging that the Work 
 + or a Contribution incorporated within the Work constitutes direct 
 + or contributory patent infringement , then any patent licenses 
 + granted to You under this License for that Work shall terminate 
 + as of the date such litigation is filed . 
 + 
 + 4 . Redistribution . You may reproduce and distribute copies of the 
 + Work or Derivative Works thereof in any medium , with or without 
 + modifications , and in Source or Object form , provided that You 
 + meet the following conditions : 
 + 
 + ( a ) You must give any other recipients of the Work or 
 + Derivative Works a copy of this License ; and 
 + 
 + ( b ) You must cause any modified files to carry prominent notices 
 + stating that You changed the files ; and 
 + 
 + ( c ) You must retain , in the Source form of any Derivative Works 
 + that You distribute , all copyright , patent , trademark , and 
 + attribution notices from the Source form of the Work , 
 + excluding those notices that do not pertain to any part of 
 + the Derivative Works ; and 
 + 
 + ( d ) If the Work includes a " NOTICE " text file as part of its 
 + distribution , then any Derivative Works that You distribute must 
 + include a readable copy of the attribution notices contained 
 + within such NOTICE file , excluding those notices that do not 
 + pertain to any part of the Derivative Works , in at least one 
 + of the following places : within a NOTICE text file distributed 
 + as part of the Derivative Works ; within the Source form or 
 + documentation , if provided along with the Derivative Works ; or , 
 + within a display generated by the Derivative Works , if and 
 + wherever such third - party notices normally appear . The contents 
 + of the NOTICE file are for informational purposes only and 
 + do not modify the License . You may add Your own attribution 
 + notices within Derivative Works that You distribute , alongside 
 + or as an addendum to the NOTICE text from the Work , provided 
 + that such additional attribution notices cannot be construed 
 + as modifying the License . 
 + 
 + You may add Your own copyright statement to Your modifications and 
 + may provide additional or different license terms and conditions 
 + for use , reproduction , or distribution of Your modifications , or 
 + for any such Derivative Works as a whole , provided Your use , 
 + reproduction , and distribution of the Work otherwise complies with 
 + the conditions stated in this License . 
 + 
 + 5 . Submission of Contributions . Unless You explicitly state otherwise , 
 + any Contribution intentionally submitted for inclusion in the Work 
 + by You to the Licensor shall be under the terms and conditions of 
 + this License , without any additional terms or conditions . 
 + Notwithstanding the above , nothing herein shall supersede or modify 
 + the terms of any separate license agreement you may have executed 
 + with Licensor regarding such Contributions . 
 + 
 + 6 . Trademarks . This License does not grant permission to use the trade 
 + names , trademarks , service marks , or product names of the Licensor , 
 + except as required for reasonable and customary use in describing the 
 + origin of the Work and reproducing the content of the NOTICE file . 
 + 
 + 7 . Disclaimer of Warranty . Unless required by applicable law or 
 + agreed to in writing , Licensor provides the Work ( and each 
 + Contributor provides its Contributions ) on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or 
 + implied , including , without limitation , any warranties or conditions 
 + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A 
 + PARTICULAR PURPOSE . You are solely responsible for determining the 
 + appropriateness of using or redistributing the Work and assume any 
 + risks associated with Your exercise of permissions under this License . 
 + 
 + 8 . Limitation of Liability . In no event and under no legal theory , 
 + whether in tort ( including negligence ) , contract , or otherwise , 
 + unless required by applicable law ( such as deliberate and grossly 
 + negligent acts ) or agreed to in writing , shall any Contributor be 
 + liable to You for damages , including any direct , indirect , special , 
 + incidental , or consequential damages of any character arising as a 
 + result of this License or out of the use or inability to use the 
 + Work ( including but not limited to damages for loss of goodwill , 
 + work stoppage , computer failure or malfunction , or any and all 
 + other commercial damages or losses ) , even if such Contributor 
 + has been advised of the possibility of such damages . 
 + 
 + 9 . Accepting Warranty or Additional Liability . While redistributing 
 + the Work or Derivative Works thereof , You may choose to offer , 
 + and charge a fee for , acceptance of support , warranty , indemnity , 
 + or other liability obligations and / or rights consistent with this 
 + License . However , in accepting such obligations , You may act only 
 + on Your own behalf and on Your sole responsibility , not on behalf 
 + of any other Contributor , and only if You agree to indemnify , 
 + defend , and hold each Contributor harmless for any liability 
 + incurred by , or claims asserted against , such Contributor by reason 
 + of your accepting any such warranty or additional liability . 
 + 
 + END OF TERMS AND CONDITIONS 
 + 
 + APPENDIX : How to apply the Apache License to your work . 
 + 
 + To apply the Apache License to your work , attach the following 
 + boilerplate notice , with the fields enclosed by brackets " [ ] " 
 + replaced with your own identifying information . ( Don ' t include 
 + the brackets ! ) The text should be enclosed in the appropriate 
 + comment syntax for the file format . We also recommend that a 
 + file or class name and description of purpose be included on the 
 + same " printed page " as the copyright notice for easier 
 + identification within third - party archives . 
 + 
 + Copyright [ yyyy ] [ name of copyright owner ] 
 + 
 + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + you may not use this file except in compliance with the License . 
 + You may obtain a copy of the License at 
 + 
 + http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + 
 + Unless required by applicable law or agreed to in writing , software 
 + distributed under the License is distributed on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + See the License for the specific language governing permissions and 
 + limitations under the License .
