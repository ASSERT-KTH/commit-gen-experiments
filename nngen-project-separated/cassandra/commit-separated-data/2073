BLEU SCORE: 0.05341087579952926

TEST MSG: Fix CONTAINS filtering on sets
GENERATED MSG: Properly reject unknown UDT fields

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f9523ed . . 6949209 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 1 <nl> + * Fix filtering for CONTAINS on sets ( CASSANDRA - 8033 ) <nl> * Properly track added size ( CASSANDRA - 7239 ) <nl> * Allow compilation in java 8 ( CASSANDRA - 7208 ) <nl> * Fix Assertion error on RangeTombstoneList diff ( CASSANDRA - 8013 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / ExtendedFilter . java b / src / java / org / apache / cassandra / db / filter / ExtendedFilter . java <nl> index bc59152 . . 4f27a51 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / ExtendedFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / ExtendedFilter . java <nl> @ @ - 327 , 6 + 327 , 7 @ @ public abstract class ExtendedFilter <nl> private static boolean collectionSatisfies ( ColumnDefinition def , ColumnFamily data , Composite prefix , IndexExpression expr , ByteBuffer collectionElement ) <nl> { <nl> assert def . type . isCollection ( ) ; <nl> + CollectionType type = ( CollectionType ) def . type ; <nl> <nl> if ( expr . operator = = IndexExpression . Operator . CONTAINS ) <nl> { <nl> @ @ - 334 , 14 + 335 , 22 @ @ public abstract class ExtendedFilter <nl> Iterator < Cell > iter = data . iterator ( new ColumnSlice [ ] { data . getComparator ( ) . create ( prefix , def ) . slice ( ) } ) ; <nl> while ( iter . hasNext ( ) ) <nl> { <nl> - if ( ( ( CollectionType ) def . type ) . valueComparator ( ) . compare ( iter . next ( ) . value ( ) , expr . value ) = = 0 ) <nl> - return true ; <nl> + Cell cell = iter . next ( ) ; <nl> + if ( type . kind = = CollectionType . Kind . SET ) <nl> + { <nl> + if ( type . nameComparator ( ) . compare ( cell . name ( ) . collectionElement ( ) , expr . value ) = = 0 ) <nl> + return true ; <nl> + } <nl> + else <nl> + { <nl> + if ( type . valueComparator ( ) . compare ( cell . value ( ) , expr . value ) = = 0 ) <nl> + return true ; <nl> + } <nl> } <nl> <nl> return false ; <nl> } <nl> <nl> - CollectionType type = ( CollectionType ) def . type ; <nl> switch ( type . kind ) <nl> { <nl> case LIST : <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java b / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java <nl> index 84a8c8f . . 525059d 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java <nl> @ @ - 133 , 4 + 133 , 28 @ @ public class ContainsRelationTest extends CQLTester <nl> row ( " test " , 5 , map ( " lmn " , " foo " ) ) <nl> ) ; <nl> } <nl> + <nl> + / / See CASSANDRA - 8033 <nl> + @ Test <nl> + public void testFilterForContains ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k1 int , k2 int , v set < int > , PRIMARY KEY ( ( k1 , k2 ) ) ) " ) ; <nl> + createIndex ( " CREATE INDEX ON % s ( k2 ) " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k1 , k2 , v ) VALUES ( ? , ? , ? ) " , 0 , 0 , set ( 1 , 2 , 3 ) ) ; <nl> + execute ( " INSERT INTO % s ( k1 , k2 , v ) VALUES ( ? , ? , ? ) " , 0 , 1 , set ( 2 , 3 , 4 ) ) ; <nl> + execute ( " INSERT INTO % s ( k1 , k2 , v ) VALUES ( ? , ? , ? ) " , 1 , 0 , set ( 3 , 4 , 5 ) ) ; <nl> + execute ( " INSERT INTO % s ( k1 , k2 , v ) VALUES ( ? , ? , ? ) " , 1 , 1 , set ( 4 , 5 , 6 ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE k2 = ? " , 1 ) , <nl> + row ( 0 , 1 , set ( 2 , 3 , 4 ) ) , <nl> + row ( 1 , 1 , set ( 4 , 5 , 6 ) ) <nl> + ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE k2 = ? AND v CONTAINS ? ALLOW FILTERING " , 1 , 6 ) , <nl> + row ( 1 , 1 , set ( 4 , 5 , 6 ) ) <nl> + ) ; <nl> + <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE k2 = ? AND v CONTAINS ? ALLOW FILTERING " , 1 , 7 ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f9523ed . . 6949209 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 1 
 + * Fix filtering for CONTAINS on sets ( CASSANDRA - 8033 ) 
 * Properly track added size ( CASSANDRA - 7239 ) 
 * Allow compilation in java 8 ( CASSANDRA - 7208 ) 
 * Fix Assertion error on RangeTombstoneList diff ( CASSANDRA - 8013 ) 
 diff - - git a / src / java / org / apache / cassandra / db / filter / ExtendedFilter . java b / src / java / org / apache / cassandra / db / filter / ExtendedFilter . java 
 index bc59152 . . 4f27a51 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / ExtendedFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / ExtendedFilter . java 
 @ @ - 327 , 6 + 327 , 7 @ @ public abstract class ExtendedFilter 
 private static boolean collectionSatisfies ( ColumnDefinition def , ColumnFamily data , Composite prefix , IndexExpression expr , ByteBuffer collectionElement ) 
 { 
 assert def . type . isCollection ( ) ; 
 + CollectionType type = ( CollectionType ) def . type ; 
 
 if ( expr . operator = = IndexExpression . Operator . CONTAINS ) 
 { 
 @ @ - 334 , 14 + 335 , 22 @ @ public abstract class ExtendedFilter 
 Iterator < Cell > iter = data . iterator ( new ColumnSlice [ ] { data . getComparator ( ) . create ( prefix , def ) . slice ( ) } ) ; 
 while ( iter . hasNext ( ) ) 
 { 
 - if ( ( ( CollectionType ) def . type ) . valueComparator ( ) . compare ( iter . next ( ) . value ( ) , expr . value ) = = 0 ) 
 - return true ; 
 + Cell cell = iter . next ( ) ; 
 + if ( type . kind = = CollectionType . Kind . SET ) 
 + { 
 + if ( type . nameComparator ( ) . compare ( cell . name ( ) . collectionElement ( ) , expr . value ) = = 0 ) 
 + return true ; 
 + } 
 + else 
 + { 
 + if ( type . valueComparator ( ) . compare ( cell . value ( ) , expr . value ) = = 0 ) 
 + return true ; 
 + } 
 } 
 
 return false ; 
 } 
 
 - CollectionType type = ( CollectionType ) def . type ; 
 switch ( type . kind ) 
 { 
 case LIST : 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java b / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java 
 index 84a8c8f . . 525059d 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java 
 @ @ - 133 , 4 + 133 , 28 @ @ public class ContainsRelationTest extends CQLTester 
 row ( " test " , 5 , map ( " lmn " , " foo " ) ) 
 ) ; 
 } 
 + 
 + / / See CASSANDRA - 8033 
 + @ Test 
 + public void testFilterForContains ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k1 int , k2 int , v set < int > , PRIMARY KEY ( ( k1 , k2 ) ) ) " ) ; 
 + createIndex ( " CREATE INDEX ON % s ( k2 ) " ) ; 
 + 
 + execute ( " INSERT INTO % s ( k1 , k2 , v ) VALUES ( ? , ? , ? ) " , 0 , 0 , set ( 1 , 2 , 3 ) ) ; 
 + execute ( " INSERT INTO % s ( k1 , k2 , v ) VALUES ( ? , ? , ? ) " , 0 , 1 , set ( 2 , 3 , 4 ) ) ; 
 + execute ( " INSERT INTO % s ( k1 , k2 , v ) VALUES ( ? , ? , ? ) " , 1 , 0 , set ( 3 , 4 , 5 ) ) ; 
 + execute ( " INSERT INTO % s ( k1 , k2 , v ) VALUES ( ? , ? , ? ) " , 1 , 1 , set ( 4 , 5 , 6 ) ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE k2 = ? " , 1 ) , 
 + row ( 0 , 1 , set ( 2 , 3 , 4 ) ) , 
 + row ( 1 , 1 , set ( 4 , 5 , 6 ) ) 
 + ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE k2 = ? AND v CONTAINS ? ALLOW FILTERING " , 1 , 6 ) , 
 + row ( 1 , 1 , set ( 4 , 5 , 6 ) ) 
 + ) ; 
 + 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE k2 = ? AND v CONTAINS ? ALLOW FILTERING " , 1 , 7 ) ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
