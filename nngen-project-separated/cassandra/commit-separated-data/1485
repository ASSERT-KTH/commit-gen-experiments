BLEU SCORE: 0.00882875838860343

TEST MSG: Simplify / optimise CFMetaData serialization
GENERATED MSG: add MemtableFlushAfterMinutes , a global replacement for the old per - CF FlushPeriodInMinutes setting

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 1219952 . . 84639dc 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 1516 , 29 + 1516 , 16 @ @ public final class CFMetaData <nl> / / we could make UUIDSerializer work as the serializer below , but I ' ll keep that to later . <nl> public static class Serializer <nl> { <nl> - private static void writeLongAsSeparateBytes ( long value , DataOutputPlus out ) throws IOException <nl> - { <nl> - for ( int i = 7 ; i > = 0 ; i - - ) <nl> - out . writeByte ( ( int ) ( ( value > > ( 8 * i ) ) & 0xFF ) ) ; <nl> - } <nl> - <nl> - private static long readLongAsSeparateBytes ( DataInput in ) throws IOException <nl> - { <nl> - long val = 0 ; <nl> - for ( int i = 7 ; i > = 0 ; i - - ) <nl> - val | = ( ( long ) in . readUnsignedByte ( ) ) < < ( 8 * i ) ; <nl> - return val ; <nl> - } <nl> - <nl> public void serialize ( CFMetaData metadata , DataOutputPlus out , int version ) throws IOException <nl> { <nl> - writeLongAsSeparateBytes ( metadata . cfId . getMostSignificantBits ( ) , out ) ; <nl> - writeLongAsSeparateBytes ( metadata . cfId . getLeastSignificantBits ( ) , out ) ; <nl> + / / for some reason these are stored is LITTLE _ ENDIAN ; so just reverse them <nl> + out . writeLong ( Long . reverseBytes ( metadata . cfId . getMostSignificantBits ( ) ) ) ; <nl> + out . writeLong ( Long . reverseBytes ( metadata . cfId . getLeastSignificantBits ( ) ) ) ; <nl> } <nl> <nl> public CFMetaData deserialize ( DataInput in , int version ) throws IOException <nl> { <nl> - UUID cfId = new UUID ( readLongAsSeparateBytes ( in ) , readLongAsSeparateBytes ( in ) ) ; <nl> + UUID cfId = new UUID ( Long . reverseBytes ( in . readLong ( ) ) , Long . reverseBytes ( in . readLong ( ) ) ) ; <nl> CFMetaData metadata = Schema . instance . getCFMetaData ( cfId ) ; <nl> if ( metadata = = null ) <nl> {
NEAREST DIFF (one line): diff - - git a / conf / storage - conf . xml b / conf / storage - conf . xml <nl> index 3f40016 . . d74a180 100644 <nl> - - - a / conf / storage - conf . xml <nl> + + + b / conf / storage - conf . xml <nl> @ @ - 58 , 15 + 58 , 8 @ @ <nl> ~ <nl> ~ ( To get the closest approximation to 0 . 3 - style supercolumns , you <nl> ~ would use CompareWith = UTF8Type CompareSubcolumnsWith = LongType . ) <nl> - <nl> - ~ If FlushPeriodInMinutes is positive , it will be <nl> - ~ flushed to disk with that period even if the memtable has not <nl> - ~ exceeded the size or count thresholds , so that it does not <nl> - ~ prevent commitlog segments from being purged . <nl> - - > <nl> - < ColumnFamily CompareWith = " BytesType " <nl> - Name = " Standard1 " <nl> - FlushPeriodInMinutes = " 60 " / > <nl> + < ColumnFamily CompareWith = " BytesType " Name = " Standard1 " / > <nl> < ColumnFamily CompareWith = " UTF8Type " Name = " Standard2 " / > <nl> < ColumnFamily CompareWith = " TimeUUIDType " Name = " StandardByUUID1 " / > <nl> < ColumnFamily ColumnType = " Super " <nl> @ @ - 243 , 6 + 236 , 16 @ @ <nl> ~ setting . Use with MemtableSizeInMB to tune memory usage . <nl> - - > <nl> < MemtableObjectCountInMillions > 0 . 1 < / MemtableObjectCountInMillions > <nl> + < ! - - <nl> + ~ The maximum time to leave a dirty memtable unflushed . <nl> + ~ ( While any affected columnfamilies have unflushed data from a <nl> + ~ commit log segment , that segment cannot be deleted . ) <nl> + ~ This needs to be large enough that it won ' t cause a flush storm <nl> + ~ of all your memtables flushing at once because none has hit <nl> + ~ the size or count thresholds yet . For production , a larger <nl> + ~ value such as 1440 is recommended . <nl> + - - > <nl> + < MemtableFlushAfterMinutes > 60 < / MemtableFlushAfterMinutes > <nl> <nl> < ! - - <nl> ~ Unlike most systems , in Cassandra writes are faster than reads , so <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 3d093d2 . . ac6bda5 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 36 , 7 + 36 , 6 @ @ public class CFMetaData <nl> public String n _ columnKey ; <nl> public String n _ columnValue ; <nl> public String n _ columnTimestamp ; <nl> - public int flushPeriodInMinutes = 0 ; / / flush interval , if < = 0 , no periodic flusher is scheduled <nl> <nl> / / a quick and dirty pretty printer for describing the column family . . . <nl> public String pretty ( ) <nl> @ @ - 51 , 7 + 50 , 6 @ @ public class CFMetaData <nl> <nl> desc + = " Column Family Type : " + columnType + " \ n " + <nl> " Columns Sorted By : " + comparator + " \ n " ; <nl> - desc + = " flush period : " + flushPeriodInMinutes + " minutes \ n " ; <nl> return desc ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 2df5b61 . . f10a198 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 20 , 7 + 20 , 6 @ @ package org . apache . cassandra . config ; <nl> <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> - import org . apache . cassandra . db . marshal . AsciiType ; <nl> import org . apache . cassandra . db . marshal . BytesType ; <nl> import org . apache . cassandra . db . marshal . UTF8Type ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> @ @ - 101 , 8 + 100 , 8 @ @ public class DatabaseDescriptor <nl> <nl> / * if the size of columns or super - columns are more than this , indexing will kick in * / <nl> private static int columnIndexSizeInKB _ ; <nl> - / * Number of hours to keep a memtable in memory * / <nl> - private static int memtableLifetime _ = 6 ; <nl> + / * Number of minutes to keep a memtable in memory * / <nl> + private static int memtableLifetimeMs _ = 60 * 60 * 1000 ; <nl> / * Size of the memtable in memory before it is dumped * / <nl> private static int memtableSize _ = 128 ; <nl> / * Number of objects in millions in the memtable before it is dumped * / <nl> @ @ - 320 , 9 + 319 , 9 @ @ public class DatabaseDescriptor <nl> <nl> <nl> / * Number of days to keep the memtable around w / o flushing * / <nl> - String lifetime = xmlUtils . getNodeValue ( " / Storage / MemtableLifetimeInDays " ) ; <nl> - if ( lifetime ! = null ) <nl> - memtableLifetime _ = Integer . parseInt ( lifetime ) ; <nl> + String lifetime = xmlUtils . getNodeValue ( " / Storage / MemtableFlushAfterMinutes " ) ; <nl> + if ( lifetime ! = null ) <nl> + memtableLifetimeMs _ = Integer . parseInt ( lifetime ) * 60 * 1000 ; <nl> <nl> / * Size of the memtable in memory in MB before it is dumped * / <nl> String memtableSize = xmlUtils . getNodeValue ( " / Storage / MemtableSizeInMB " ) ; <nl> @ @ - 471 , 13 + 470 , 6 @ @ public class DatabaseDescriptor <nl> throw new ConfigurationException ( " CompareSubcolumnsWith is only a valid attribute on super columnfamilies ( not regular columnfamily " + cfName + " ) " ) ; <nl> } <nl> <nl> - / / see if flush period is set <nl> - String flushPeriodInMinutes = XMLUtils . getAttributeValue ( columnFamily , " FlushPeriodInMinutes " ) ; <nl> - int flushPeriod = 0 ; <nl> - if ( flushPeriodInMinutes ! = null ) <nl> - flushPeriod = Integer . parseInt ( flushPeriodInMinutes ) ; <nl> - <nl> - <nl> / / Parse out user - specified logical names for the various dimensions <nl> / / of a the column family from the config . <nl> String n _ superColumnMap = xmlUtils . getNodeValue ( xqlCF + " SuperColumnMap " ) ; <nl> @ @ - 525 , 8 + 517 , 7 @ @ public class DatabaseDescriptor <nl> cfMetaData . n _ superColumnKey = n _ superColumnKey ; <nl> cfMetaData . n _ superColumnMap = n _ superColumnMap ; <nl> } <nl> - cfMetaData . flushPeriodInMinutes = flushPeriod ; <nl> - <nl> + <nl> tableToCFMetaDataMap _ . get ( tName ) . put ( cfName , cfMetaData ) ; <nl> } <nl> } <nl> @ @ - 538 , 14 + 529 , 12 @ @ public class DatabaseDescriptor <nl> CFMetaData data = new CFMetaData ( ) ; <nl> data . columnType = " Standard " ; <nl> data . comparator = new UTF8Type ( ) ; <nl> - data . flushPeriodInMinutes = 1 ; <nl> systemMetadata . put ( SystemTable . LOCATION _ CF , data ) ; <nl> <nl> data = new CFMetaData ( ) ; <nl> data . columnType = " Super " ; <nl> data . comparator = new UTF8Type ( ) ; <nl> data . subcolumnComparator = new BytesType ( ) ; <nl> - data . flushPeriodInMinutes = 10 ; <nl> systemMetadata . put ( HintedHandOffManager . HINTS _ CF , data ) ; <nl> tableToCFMetaDataMap _ . put ( Table . SYSTEM _ TABLE , systemMetadata ) ; <nl> <nl> @ @ - 673 , 9 + 662 , 9 @ @ public class DatabaseDescriptor <nl> 	 return columnIndexSizeInKB _ * 1024 ; <nl> } <nl> <nl> - public static int getMemtableLifetime ( ) <nl> + public static int getMemtableLifetimeMS ( ) <nl> { <nl> - return memtableLifetime _ ; <nl> + return memtableLifetimeMs _ ; <nl> } <nl> <nl> public static String getInitialToken ( ) <nl> @ @ - 748 , 16 + 737 , 6 @ @ public class DatabaseDescriptor <nl> return cfMetaData . columnType ; <nl> } <nl> <nl> - public static int getFlushPeriod ( String tableName , String columnFamilyName ) <nl> - { <nl> - assert tableName ! = null ; <nl> - CFMetaData cfMetaData = getCFMetaData ( tableName , columnFamilyName ) ; <nl> - <nl> - if ( cfMetaData = = null ) <nl> - return 0 ; <nl> - return cfMetaData . flushPeriodInMinutes ; <nl> - } <nl> - <nl> public static List < String > getTables ( ) <nl> { <nl> return tables _ ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index c09440a . . e831aa2 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 85 , 7 + 85 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> new LinkedBlockingQueue < Runnable > ( ) , <nl> new NamedThreadFactory ( " FLUSH - WRITER - POOL " ) ) ; <nl> private static ExecutorService commitLogUpdater _ = new DebuggableThreadPoolExecutor ( " MEMTABLE - POST - FLUSHER " ) ; <nl> - private static Timer flushTimer _ = new Timer ( " FLUSH - TIMER " ) ; <nl> <nl> private final String table _ ; <nl> public final String columnFamily _ ; <nl> @ @ - 223 , 26 + 222 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> HintedHandOffManager . instance ( ) . scheduleHandoffsFor ( this ) ; <nl> } <nl> - <nl> - / / schedule periodic flusher if required <nl> - int flushPeriodMS = DatabaseDescriptor . getFlushPeriod ( table _ , columnFamily _ ) * 60 * 1000 ; <nl> - if ( flushPeriodMS > 0 ) <nl> - { <nl> - flushTimer _ . schedule ( new TimerTask ( ) <nl> - { <nl> - public void run ( ) <nl> - { <nl> - try <nl> - { <nl> - forceFlush ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> - } , flushPeriodMS , flushPeriodMS ) ; <nl> - } <nl> } <nl> <nl> / * <nl> @ @ - 417 , 6 + 396 , 12 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> binaryMemtable _ . get ( ) . put ( key , buffer ) ; <nl> } <nl> <nl> + public void forceFlushIfExpired ( ) throws IOException <nl> + { <nl> + if ( memtable _ . isExpired ( ) ) <nl> + forceFlush ( ) ; <nl> + } <nl> + <nl> public Future < ? > forceFlush ( ) throws IOException <nl> { <nl> if ( memtable _ . isClean ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index 570ab69 . . 136c43b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 346 , 4 + 346 , 9 @ @ public class Memtable implements Comparable < Memtable > , IFlushable < String > <nl> { <nl> columnFamilies _ . clear ( ) ; <nl> } <nl> + <nl> + public boolean isExpired ( ) <nl> + { <nl> + return System . currentTimeMillis ( ) > creationTime _ + DatabaseDescriptor . getMemtableLifetimeMS ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java <nl> index 5efc6a2 . . b61991e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Table . java <nl> + + + b / src / java / org / apache / cassandra / db / Table . java <nl> @ @ - 53 , 6 + 53 , 8 @ @ public class Table <nl> / * we use this lock to drain updaters before calling a flush . * / <nl> static final ReentrantReadWriteLock flusherLock _ = new ReentrantReadWriteLock ( true ) ; <nl> <nl> + private static Timer flushTimer _ = new Timer ( " FLUSH - TIMER " ) ; <nl> + <nl> / * <nl> * This class represents the metadata of this Table . The metadata <nl> * is basically the column family name and the ID associated with <nl> @ @ - 513 , 6 + 515 , 26 @ @ public class Table <nl> { <nl> columnFamilyStores _ . put ( columnFamily , ColumnFamilyStore . getColumnFamilyStore ( table , columnFamily ) ) ; <nl> } <nl> + <nl> + / / check 10x as often as the lifetime , so we can exceed lifetime by 10 % at most <nl> + int checkMs = DatabaseDescriptor . getMemtableLifetimeMS ( ) / 10 ; <nl> + flushTimer _ . schedule ( new TimerTask ( ) <nl> + { <nl> + public void run ( ) <nl> + { <nl> + for ( ColumnFamilyStore cfs : columnFamilyStores _ . values ( ) ) <nl> + { <nl> + try <nl> + { <nl> + cfs . forceFlushIfExpired ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + } <nl> + } , checkMs , checkMs ) ; <nl> } <nl> <nl> boolean isApplicationColumnFamily ( String columnFamily ) <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraServer . java b / src / java / org / apache / cassandra / service / CassandraServer . java <nl> index ac6220f . . 1228525 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraServer . java <nl> @ @ - 572 , 7 + 572 , 6 @ @ public class CassandraServer implements Cassandra . Iface <nl> { <nl> columnMap . put ( " CompareSubcolumnsWith " , columnFamilyMetaData . subcolumnComparator . getClass ( ) . getName ( ) ) ; <nl> } <nl> - columnMap . put ( " FlushPeriodInMinutes " , columnFamilyMetaData . flushPeriodInMinutes + " " ) ; <nl> columnFamiliesMap . put ( columnFamilyMetaData . cfName , columnMap ) ; <nl> } <nl> return columnFamiliesMap ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 1219952 . . 84639dc 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 1516 , 29 + 1516 , 16 @ @ public final class CFMetaData 
 / / we could make UUIDSerializer work as the serializer below , but I ' ll keep that to later . 
 public static class Serializer 
 { 
 - private static void writeLongAsSeparateBytes ( long value , DataOutputPlus out ) throws IOException 
 - { 
 - for ( int i = 7 ; i > = 0 ; i - - ) 
 - out . writeByte ( ( int ) ( ( value > > ( 8 * i ) ) & 0xFF ) ) ; 
 - } 
 - 
 - private static long readLongAsSeparateBytes ( DataInput in ) throws IOException 
 - { 
 - long val = 0 ; 
 - for ( int i = 7 ; i > = 0 ; i - - ) 
 - val | = ( ( long ) in . readUnsignedByte ( ) ) < < ( 8 * i ) ; 
 - return val ; 
 - } 
 - 
 public void serialize ( CFMetaData metadata , DataOutputPlus out , int version ) throws IOException 
 { 
 - writeLongAsSeparateBytes ( metadata . cfId . getMostSignificantBits ( ) , out ) ; 
 - writeLongAsSeparateBytes ( metadata . cfId . getLeastSignificantBits ( ) , out ) ; 
 + / / for some reason these are stored is LITTLE _ ENDIAN ; so just reverse them 
 + out . writeLong ( Long . reverseBytes ( metadata . cfId . getMostSignificantBits ( ) ) ) ; 
 + out . writeLong ( Long . reverseBytes ( metadata . cfId . getLeastSignificantBits ( ) ) ) ; 
 } 
 
 public CFMetaData deserialize ( DataInput in , int version ) throws IOException 
 { 
 - UUID cfId = new UUID ( readLongAsSeparateBytes ( in ) , readLongAsSeparateBytes ( in ) ) ; 
 + UUID cfId = new UUID ( Long . reverseBytes ( in . readLong ( ) ) , Long . reverseBytes ( in . readLong ( ) ) ) ; 
 CFMetaData metadata = Schema . instance . getCFMetaData ( cfId ) ; 
 if ( metadata = = null ) 
 {

NEAREST DIFF:
diff - - git a / conf / storage - conf . xml b / conf / storage - conf . xml 
 index 3f40016 . . d74a180 100644 
 - - - a / conf / storage - conf . xml 
 + + + b / conf / storage - conf . xml 
 @ @ - 58 , 15 + 58 , 8 @ @ 
 ~ 
 ~ ( To get the closest approximation to 0 . 3 - style supercolumns , you 
 ~ would use CompareWith = UTF8Type CompareSubcolumnsWith = LongType . ) 
 - 
 - ~ If FlushPeriodInMinutes is positive , it will be 
 - ~ flushed to disk with that period even if the memtable has not 
 - ~ exceeded the size or count thresholds , so that it does not 
 - ~ prevent commitlog segments from being purged . 
 - - > 
 - < ColumnFamily CompareWith = " BytesType " 
 - Name = " Standard1 " 
 - FlushPeriodInMinutes = " 60 " / > 
 + < ColumnFamily CompareWith = " BytesType " Name = " Standard1 " / > 
 < ColumnFamily CompareWith = " UTF8Type " Name = " Standard2 " / > 
 < ColumnFamily CompareWith = " TimeUUIDType " Name = " StandardByUUID1 " / > 
 < ColumnFamily ColumnType = " Super " 
 @ @ - 243 , 6 + 236 , 16 @ @ 
 ~ setting . Use with MemtableSizeInMB to tune memory usage . 
 - - > 
 < MemtableObjectCountInMillions > 0 . 1 < / MemtableObjectCountInMillions > 
 + < ! - - 
 + ~ The maximum time to leave a dirty memtable unflushed . 
 + ~ ( While any affected columnfamilies have unflushed data from a 
 + ~ commit log segment , that segment cannot be deleted . ) 
 + ~ This needs to be large enough that it won ' t cause a flush storm 
 + ~ of all your memtables flushing at once because none has hit 
 + ~ the size or count thresholds yet . For production , a larger 
 + ~ value such as 1440 is recommended . 
 + - - > 
 + < MemtableFlushAfterMinutes > 60 < / MemtableFlushAfterMinutes > 
 
 < ! - - 
 ~ Unlike most systems , in Cassandra writes are faster than reads , so 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 3d093d2 . . ac6bda5 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 36 , 7 + 36 , 6 @ @ public class CFMetaData 
 public String n _ columnKey ; 
 public String n _ columnValue ; 
 public String n _ columnTimestamp ; 
 - public int flushPeriodInMinutes = 0 ; / / flush interval , if < = 0 , no periodic flusher is scheduled 
 
 / / a quick and dirty pretty printer for describing the column family . . . 
 public String pretty ( ) 
 @ @ - 51 , 7 + 50 , 6 @ @ public class CFMetaData 
 
 desc + = " Column Family Type : " + columnType + " \ n " + 
 " Columns Sorted By : " + comparator + " \ n " ; 
 - desc + = " flush period : " + flushPeriodInMinutes + " minutes \ n " ; 
 return desc ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 2df5b61 . . f10a198 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 20 , 7 + 20 , 6 @ @ package org . apache . cassandra . config ; 
 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 - import org . apache . cassandra . db . marshal . AsciiType ; 
 import org . apache . cassandra . db . marshal . BytesType ; 
 import org . apache . cassandra . db . marshal . UTF8Type ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 @ @ - 101 , 8 + 100 , 8 @ @ public class DatabaseDescriptor 
 
 / * if the size of columns or super - columns are more than this , indexing will kick in * / 
 private static int columnIndexSizeInKB _ ; 
 - / * Number of hours to keep a memtable in memory * / 
 - private static int memtableLifetime _ = 6 ; 
 + / * Number of minutes to keep a memtable in memory * / 
 + private static int memtableLifetimeMs _ = 60 * 60 * 1000 ; 
 / * Size of the memtable in memory before it is dumped * / 
 private static int memtableSize _ = 128 ; 
 / * Number of objects in millions in the memtable before it is dumped * / 
 @ @ - 320 , 9 + 319 , 9 @ @ public class DatabaseDescriptor 
 
 
 / * Number of days to keep the memtable around w / o flushing * / 
 - String lifetime = xmlUtils . getNodeValue ( " / Storage / MemtableLifetimeInDays " ) ; 
 - if ( lifetime ! = null ) 
 - memtableLifetime _ = Integer . parseInt ( lifetime ) ; 
 + String lifetime = xmlUtils . getNodeValue ( " / Storage / MemtableFlushAfterMinutes " ) ; 
 + if ( lifetime ! = null ) 
 + memtableLifetimeMs _ = Integer . parseInt ( lifetime ) * 60 * 1000 ; 
 
 / * Size of the memtable in memory in MB before it is dumped * / 
 String memtableSize = xmlUtils . getNodeValue ( " / Storage / MemtableSizeInMB " ) ; 
 @ @ - 471 , 13 + 470 , 6 @ @ public class DatabaseDescriptor 
 throw new ConfigurationException ( " CompareSubcolumnsWith is only a valid attribute on super columnfamilies ( not regular columnfamily " + cfName + " ) " ) ; 
 } 
 
 - / / see if flush period is set 
 - String flushPeriodInMinutes = XMLUtils . getAttributeValue ( columnFamily , " FlushPeriodInMinutes " ) ; 
 - int flushPeriod = 0 ; 
 - if ( flushPeriodInMinutes ! = null ) 
 - flushPeriod = Integer . parseInt ( flushPeriodInMinutes ) ; 
 - 
 - 
 / / Parse out user - specified logical names for the various dimensions 
 / / of a the column family from the config . 
 String n _ superColumnMap = xmlUtils . getNodeValue ( xqlCF + " SuperColumnMap " ) ; 
 @ @ - 525 , 8 + 517 , 7 @ @ public class DatabaseDescriptor 
 cfMetaData . n _ superColumnKey = n _ superColumnKey ; 
 cfMetaData . n _ superColumnMap = n _ superColumnMap ; 
 } 
 - cfMetaData . flushPeriodInMinutes = flushPeriod ; 
 - 
 + 
 tableToCFMetaDataMap _ . get ( tName ) . put ( cfName , cfMetaData ) ; 
 } 
 } 
 @ @ - 538 , 14 + 529 , 12 @ @ public class DatabaseDescriptor 
 CFMetaData data = new CFMetaData ( ) ; 
 data . columnType = " Standard " ; 
 data . comparator = new UTF8Type ( ) ; 
 - data . flushPeriodInMinutes = 1 ; 
 systemMetadata . put ( SystemTable . LOCATION _ CF , data ) ; 
 
 data = new CFMetaData ( ) ; 
 data . columnType = " Super " ; 
 data . comparator = new UTF8Type ( ) ; 
 data . subcolumnComparator = new BytesType ( ) ; 
 - data . flushPeriodInMinutes = 10 ; 
 systemMetadata . put ( HintedHandOffManager . HINTS _ CF , data ) ; 
 tableToCFMetaDataMap _ . put ( Table . SYSTEM _ TABLE , systemMetadata ) ; 
 
 @ @ - 673 , 9 + 662 , 9 @ @ public class DatabaseDescriptor 
 	 return columnIndexSizeInKB _ * 1024 ; 
 } 
 
 - public static int getMemtableLifetime ( ) 
 + public static int getMemtableLifetimeMS ( ) 
 { 
 - return memtableLifetime _ ; 
 + return memtableLifetimeMs _ ; 
 } 
 
 public static String getInitialToken ( ) 
 @ @ - 748 , 16 + 737 , 6 @ @ public class DatabaseDescriptor 
 return cfMetaData . columnType ; 
 } 
 
 - public static int getFlushPeriod ( String tableName , String columnFamilyName ) 
 - { 
 - assert tableName ! = null ; 
 - CFMetaData cfMetaData = getCFMetaData ( tableName , columnFamilyName ) ; 
 - 
 - if ( cfMetaData = = null ) 
 - return 0 ; 
 - return cfMetaData . flushPeriodInMinutes ; 
 - } 
 - 
 public static List < String > getTables ( ) 
 { 
 return tables _ ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index c09440a . . e831aa2 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 85 , 7 + 85 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 new LinkedBlockingQueue < Runnable > ( ) , 
 new NamedThreadFactory ( " FLUSH - WRITER - POOL " ) ) ; 
 private static ExecutorService commitLogUpdater _ = new DebuggableThreadPoolExecutor ( " MEMTABLE - POST - FLUSHER " ) ; 
 - private static Timer flushTimer _ = new Timer ( " FLUSH - TIMER " ) ; 
 
 private final String table _ ; 
 public final String columnFamily _ ; 
 @ @ - 223 , 26 + 222 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 HintedHandOffManager . instance ( ) . scheduleHandoffsFor ( this ) ; 
 } 
 - 
 - / / schedule periodic flusher if required 
 - int flushPeriodMS = DatabaseDescriptor . getFlushPeriod ( table _ , columnFamily _ ) * 60 * 1000 ; 
 - if ( flushPeriodMS > 0 ) 
 - { 
 - flushTimer _ . schedule ( new TimerTask ( ) 
 - { 
 - public void run ( ) 
 - { 
 - try 
 - { 
 - forceFlush ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 - } , flushPeriodMS , flushPeriodMS ) ; 
 - } 
 } 
 
 / * 
 @ @ - 417 , 6 + 396 , 12 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 binaryMemtable _ . get ( ) . put ( key , buffer ) ; 
 } 
 
 + public void forceFlushIfExpired ( ) throws IOException 
 + { 
 + if ( memtable _ . isExpired ( ) ) 
 + forceFlush ( ) ; 
 + } 
 + 
 public Future < ? > forceFlush ( ) throws IOException 
 { 
 if ( memtable _ . isClean ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index 570ab69 . . 136c43b 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 346 , 4 + 346 , 9 @ @ public class Memtable implements Comparable < Memtable > , IFlushable < String > 
 { 
 columnFamilies _ . clear ( ) ; 
 } 
 + 
 + public boolean isExpired ( ) 
 + { 
 + return System . currentTimeMillis ( ) > creationTime _ + DatabaseDescriptor . getMemtableLifetimeMS ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java 
 index 5efc6a2 . . b61991e 100644 
 - - - a / src / java / org / apache / cassandra / db / Table . java 
 + + + b / src / java / org / apache / cassandra / db / Table . java 
 @ @ - 53 , 6 + 53 , 8 @ @ public class Table 
 / * we use this lock to drain updaters before calling a flush . * / 
 static final ReentrantReadWriteLock flusherLock _ = new ReentrantReadWriteLock ( true ) ; 
 
 + private static Timer flushTimer _ = new Timer ( " FLUSH - TIMER " ) ; 
 + 
 / * 
 * This class represents the metadata of this Table . The metadata 
 * is basically the column family name and the ID associated with 
 @ @ - 513 , 6 + 515 , 26 @ @ public class Table 
 { 
 columnFamilyStores _ . put ( columnFamily , ColumnFamilyStore . getColumnFamilyStore ( table , columnFamily ) ) ; 
 } 
 + 
 + / / check 10x as often as the lifetime , so we can exceed lifetime by 10 % at most 
 + int checkMs = DatabaseDescriptor . getMemtableLifetimeMS ( ) / 10 ; 
 + flushTimer _ . schedule ( new TimerTask ( ) 
 + { 
 + public void run ( ) 
 + { 
 + for ( ColumnFamilyStore cfs : columnFamilyStores _ . values ( ) ) 
 + { 
 + try 
 + { 
 + cfs . forceFlushIfExpired ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + } 
 + } , checkMs , checkMs ) ; 
 } 
 
 boolean isApplicationColumnFamily ( String columnFamily ) 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraServer . java b / src / java / org / apache / cassandra / service / CassandraServer . java 
 index ac6220f . . 1228525 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraServer . java 
 @ @ - 572 , 7 + 572 , 6 @ @ public class CassandraServer implements Cassandra . Iface 
 { 
 columnMap . put ( " CompareSubcolumnsWith " , columnFamilyMetaData . subcolumnComparator . getClass ( ) . getName ( ) ) ; 
 } 
 - columnMap . put ( " FlushPeriodInMinutes " , columnFamilyMetaData . flushPeriodInMinutes + " " ) ; 
 columnFamiliesMap . put ( columnFamilyMetaData . cfName , columnMap ) ; 
 } 
 return columnFamiliesMap ;
