BLEU SCORE: 0.017820934647025707

TEST MSG: Fix CASSANDRA - 6075
GENERATED MSG: Validate token ( ) args are in partition key order

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index 363e3d3 . . aadd0bd 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import com . google . common . base . Joiner ; <nl> import com . google . common . base . Objects ; <nl> import com . google . common . base . Predicate ; <nl> import com . google . common . collect . Iterables ; <nl> + import com . google . common . collect . Iterators ; <nl> <nl> import org . github . jamm . MemoryMeter ; <nl> <nl> @ @ - 1815 , 7 + 1816 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> previous = cname ; <nl> } <nl> <nl> - if ( stmt . onToken & & cfDef . partitionKeyCount ( ) > 0 ) <nl> + if ( stmt . onToken ) <nl> checkTokenFunctionArgumentsOrder ( cfDef ) ; <nl> } <nl> <nl> @ @ - 1827 , 7 + 1828 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> * / <nl> private void checkTokenFunctionArgumentsOrder ( CFDefinition cfDef ) throws InvalidRequestException <nl> { <nl> - Iterator < Name > iter = cfDef . partitionKeys ( ) . iterator ( ) ; <nl> + Iterator < Name > iter = Iterators . cycle ( cfDef . partitionKeys ( ) ) ; <nl> for ( Relation relation : whereClause ) <nl> { <nl> SingleColumnRelation singleColumnRelation = ( SingleColumnRelation ) relation ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java b / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java <nl> index f089a5b . . 9199862 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . cql3 ; <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . db . ConsistencyLevel ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> + import org . apache . cassandra . exceptions . SyntaxException ; <nl> import org . apache . cassandra . gms . Gossiper ; <nl> import org . apache . cassandra . service . ClientState ; <nl> import org . junit . AfterClass ; <nl> @ @ - 90 , 6 + 91 , 8 @ @ public class SelectWithTokenFunctionTest <nl> { <nl> UntypedResultSet results = execute ( " SELECT * FROM % s . single _ partition WHERE token ( a ) > = token ( 0 ) " ) ; <nl> assertEquals ( 1 , results . size ( ) ) ; <nl> + results = execute ( " SELECT * FROM % s . single _ partition WHERE token ( a ) > = token ( 0 ) and token ( a ) < token ( 1 ) " ) ; <nl> + assertEquals ( 1 , results . size ( ) ) ; <nl> } <nl> finally <nl> { <nl> @ @ - 104 , 6 + 107 , 24 @ @ public class SelectWithTokenFunctionTest <nl> } <nl> <nl> @ Test ( expected = InvalidRequestException . class ) <nl> + public void testTokenFunctionWithTwoGreaterThan ( ) throws Throwable <nl> + { <nl> + execute ( " SELECT * FROM % s . single _ clustering WHERE token ( a ) > = token ( 0 ) and token ( a ) > = token ( 1 ) " ) ; <nl> + } <nl> + <nl> + @ Test ( expected = InvalidRequestException . class ) <nl> + public void testTokenFunctionWithGreaterThanAndEquals ( ) throws Throwable <nl> + { <nl> + execute ( " SELECT * FROM % s . single _ clustering WHERE token ( a ) > = token ( 0 ) and token ( a ) = token ( 1 ) " ) ; <nl> + } <nl> + <nl> + @ Test ( expected = SyntaxException . class ) <nl> + public void testTokenFunctionWithGreaterThanAndIn ( ) throws Throwable <nl> + { <nl> + execute ( " SELECT * FROM % s . single _ clustering WHERE token ( a ) > = token ( 0 ) and token ( a ) in ( token ( 1 ) ) " ) ; <nl> + } <nl> + <nl> + @ Test ( expected = InvalidRequestException . class ) <nl> public void testTokenFunctionWithPartitionKeyAndClusteringKeyArguments ( ) throws Throwable <nl> { <nl> execute ( " SELECT * FROM % s . single _ clustering WHERE token ( a , b ) > token ( 0 , ' c ' ) " ) ; <nl> @ @ - 126 , 6 + 147 , 9 @ @ public class SelectWithTokenFunctionTest <nl> { <nl> UntypedResultSet results = execute ( " SELECT * FROM % s . compound _ partition WHERE token ( a , b ) > token ( 0 , ' a ' ) " ) ; <nl> assertEquals ( 2 , results . size ( ) ) ; <nl> + results = execute ( " SELECT * FROM % s . compound _ partition WHERE token ( a , b ) > token ( 0 , ' a ' ) " <nl> + + " and token ( a , b ) < token ( 0 , ' d ' ) " ) ; <nl> + assertEquals ( 2 , results . size ( ) ) ; <nl> } <nl> finally <nl> { <nl> @ @ - 138 , 4 + 162 , 10 @ @ public class SelectWithTokenFunctionTest <nl> { <nl> execute ( " SELECT * FROM % s . compound _ partition WHERE token ( b , a ) > token ( 0 , ' c ' ) " ) ; <nl> } <nl> + <nl> + @ Test ( expected = InvalidRequestException . class ) <nl> + public void testTokenFunctionOnEachPartitionKeyColumns ( ) throws Throwable <nl> + { <nl> + execute ( " SELECT * FROM % s . compound _ partition WHERE token ( a ) > token ( 0 ) and token ( b ) > token ( ' c ' ) " ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index 363e3d3 . . aadd0bd 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import com . google . common . base . Joiner ; 
 import com . google . common . base . Objects ; 
 import com . google . common . base . Predicate ; 
 import com . google . common . collect . Iterables ; 
 + import com . google . common . collect . Iterators ; 
 
 import org . github . jamm . MemoryMeter ; 
 
 @ @ - 1815 , 7 + 1816 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 previous = cname ; 
 } 
 
 - if ( stmt . onToken & & cfDef . partitionKeyCount ( ) > 0 ) 
 + if ( stmt . onToken ) 
 checkTokenFunctionArgumentsOrder ( cfDef ) ; 
 } 
 
 @ @ - 1827 , 7 + 1828 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 * / 
 private void checkTokenFunctionArgumentsOrder ( CFDefinition cfDef ) throws InvalidRequestException 
 { 
 - Iterator < Name > iter = cfDef . partitionKeys ( ) . iterator ( ) ; 
 + Iterator < Name > iter = Iterators . cycle ( cfDef . partitionKeys ( ) ) ; 
 for ( Relation relation : whereClause ) 
 { 
 SingleColumnRelation singleColumnRelation = ( SingleColumnRelation ) relation ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java b / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java 
 index f089a5b . . 9199862 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . cql3 ; 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . db . ConsistencyLevel ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 + import org . apache . cassandra . exceptions . SyntaxException ; 
 import org . apache . cassandra . gms . Gossiper ; 
 import org . apache . cassandra . service . ClientState ; 
 import org . junit . AfterClass ; 
 @ @ - 90 , 6 + 91 , 8 @ @ public class SelectWithTokenFunctionTest 
 { 
 UntypedResultSet results = execute ( " SELECT * FROM % s . single _ partition WHERE token ( a ) > = token ( 0 ) " ) ; 
 assertEquals ( 1 , results . size ( ) ) ; 
 + results = execute ( " SELECT * FROM % s . single _ partition WHERE token ( a ) > = token ( 0 ) and token ( a ) < token ( 1 ) " ) ; 
 + assertEquals ( 1 , results . size ( ) ) ; 
 } 
 finally 
 { 
 @ @ - 104 , 6 + 107 , 24 @ @ public class SelectWithTokenFunctionTest 
 } 
 
 @ Test ( expected = InvalidRequestException . class ) 
 + public void testTokenFunctionWithTwoGreaterThan ( ) throws Throwable 
 + { 
 + execute ( " SELECT * FROM % s . single _ clustering WHERE token ( a ) > = token ( 0 ) and token ( a ) > = token ( 1 ) " ) ; 
 + } 
 + 
 + @ Test ( expected = InvalidRequestException . class ) 
 + public void testTokenFunctionWithGreaterThanAndEquals ( ) throws Throwable 
 + { 
 + execute ( " SELECT * FROM % s . single _ clustering WHERE token ( a ) > = token ( 0 ) and token ( a ) = token ( 1 ) " ) ; 
 + } 
 + 
 + @ Test ( expected = SyntaxException . class ) 
 + public void testTokenFunctionWithGreaterThanAndIn ( ) throws Throwable 
 + { 
 + execute ( " SELECT * FROM % s . single _ clustering WHERE token ( a ) > = token ( 0 ) and token ( a ) in ( token ( 1 ) ) " ) ; 
 + } 
 + 
 + @ Test ( expected = InvalidRequestException . class ) 
 public void testTokenFunctionWithPartitionKeyAndClusteringKeyArguments ( ) throws Throwable 
 { 
 execute ( " SELECT * FROM % s . single _ clustering WHERE token ( a , b ) > token ( 0 , ' c ' ) " ) ; 
 @ @ - 126 , 6 + 147 , 9 @ @ public class SelectWithTokenFunctionTest 
 { 
 UntypedResultSet results = execute ( " SELECT * FROM % s . compound _ partition WHERE token ( a , b ) > token ( 0 , ' a ' ) " ) ; 
 assertEquals ( 2 , results . size ( ) ) ; 
 + results = execute ( " SELECT * FROM % s . compound _ partition WHERE token ( a , b ) > token ( 0 , ' a ' ) " 
 + + " and token ( a , b ) < token ( 0 , ' d ' ) " ) ; 
 + assertEquals ( 2 , results . size ( ) ) ; 
 } 
 finally 
 { 
 @ @ - 138 , 4 + 162 , 10 @ @ public class SelectWithTokenFunctionTest 
 { 
 execute ( " SELECT * FROM % s . compound _ partition WHERE token ( b , a ) > token ( 0 , ' c ' ) " ) ; 
 } 
 + 
 + @ Test ( expected = InvalidRequestException . class ) 
 + public void testTokenFunctionOnEachPartitionKeyColumns ( ) throws Throwable 
 + { 
 + execute ( " SELECT * FROM % s . compound _ partition WHERE token ( a ) > token ( 0 ) and token ( b ) > token ( ' c ' ) " ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
