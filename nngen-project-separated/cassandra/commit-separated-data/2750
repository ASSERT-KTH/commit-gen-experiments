BLEU SCORE: 0.08310415003234632

TEST MSG: Add missing files
GENERATED MSG: Expose schema version in nodetool .

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / notifications / SSTableRepairStatusChanged . java b / src / java / org / apache / cassandra / notifications / SSTableRepairStatusChanged . java <nl> new file mode 100644 <nl> index 0000000 . . 084599e <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / notifications / SSTableRepairStatusChanged . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package org . apache . cassandra . notifications ; <nl> + <nl> + import java . util . Collection ; <nl> + <nl> + import org . apache . cassandra . io . sstable . SSTableReader ; <nl> + <nl> + public class SSTableRepairStatusChanged implements INotification <nl> + { <nl> + public final Collection < SSTableReader > sstable ; <nl> + <nl> + public SSTableRepairStatusChanged ( Collection < SSTableReader > repairStatusChanged ) <nl> + { <nl> + this . sstable = repairStatusChanged ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / repair / messages / AnticompactionRequest . java b / src / java / org / apache / cassandra / repair / messages / AnticompactionRequest . java <nl> new file mode 100644 <nl> index 0000000 . . daa49f0 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / repair / messages / AnticompactionRequest . java <nl> @ @ - 0 , 0 + 1 , 64 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . repair . messages ; <nl> + <nl> + import java . io . DataInput ; <nl> + import java . io . DataOutput ; <nl> + import java . io . IOException ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Collection ; <nl> + import java . util . List ; <nl> + import java . util . UUID ; <nl> + <nl> + import org . apache . cassandra . db . TypeSizes ; <nl> + import org . apache . cassandra . dht . AbstractBounds ; <nl> + import org . apache . cassandra . dht . Range ; <nl> + import org . apache . cassandra . dht . Token ; <nl> + import org . apache . cassandra . repair . RepairJobDesc ; <nl> + import org . apache . cassandra . utils . UUIDSerializer ; <nl> + <nl> + public class AnticompactionRequest extends RepairMessage <nl> + { <nl> + public static MessageSerializer serializer = new AnticompactionRequestSerializer ( ) ; <nl> + public final UUID parentRepairSession ; <nl> + <nl> + public AnticompactionRequest ( UUID parentRepairSession ) <nl> + { <nl> + super ( Type . ANTICOMPACTION _ REQUEST , null ) ; <nl> + this . parentRepairSession = parentRepairSession ; <nl> + } <nl> + <nl> + public static class AnticompactionRequestSerializer implements MessageSerializer < AnticompactionRequest > <nl> + { <nl> + public void serialize ( AnticompactionRequest message , DataOutput out , int version ) throws IOException <nl> + { <nl> + UUIDSerializer . serializer . serialize ( message . parentRepairSession , out , version ) ; <nl> + } <nl> + <nl> + public AnticompactionRequest deserialize ( DataInput in , int version ) throws IOException <nl> + { <nl> + UUID parentRepairSession = UUIDSerializer . serializer . deserialize ( in , version ) ; <nl> + return new AnticompactionRequest ( parentRepairSession ) ; <nl> + } <nl> + <nl> + public long serializedSize ( AnticompactionRequest message , int version ) <nl> + { <nl> + return UUIDSerializer . serializer . serializedSize ( message . parentRepairSession , version ) ; <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java b / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java <nl> new file mode 100644 <nl> index 0000000 . . defb584 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java <nl> @ @ - 0 , 0 + 1 , 101 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . repair . messages ; <nl> + <nl> + import java . io . DataInput ; <nl> + import java . io . DataOutput ; <nl> + import java . io . IOException ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Collection ; <nl> + import java . util . List ; <nl> + import java . util . UUID ; <nl> + <nl> + import org . apache . cassandra . db . TypeSizes ; <nl> + import org . apache . cassandra . dht . Range ; <nl> + import org . apache . cassandra . dht . Token ; <nl> + import org . apache . cassandra . utils . UUIDSerializer ; <nl> + <nl> + <nl> + public class PrepareMessage extends RepairMessage <nl> + { <nl> + public final static MessageSerializer serializer = new PrepareMessageSerializer ( ) ; <nl> + public final List < UUID > cfIds ; <nl> + public final Collection < Range < Token > > ranges ; <nl> + <nl> + public final UUID parentRepairSession ; <nl> + <nl> + public PrepareMessage ( UUID parentRepairSession , List < UUID > cfIds , Collection < Range < Token > > ranges ) <nl> + { <nl> + super ( Type . PREPARE _ MESSAGE , null ) ; <nl> + this . parentRepairSession = parentRepairSession ; <nl> + this . cfIds = cfIds ; <nl> + this . ranges = ranges ; <nl> + } <nl> + <nl> + public static class PrepareMessageSerializer implements MessageSerializer < PrepareMessage > <nl> + { <nl> + public void serialize ( PrepareMessage message , DataOutput out , int version ) throws IOException <nl> + { <nl> + out . writeInt ( message . cfIds . size ( ) ) ; <nl> + for ( UUID cfId : message . cfIds ) <nl> + UUIDSerializer . serializer . serialize ( cfId , out , version ) ; <nl> + UUIDSerializer . serializer . serialize ( message . parentRepairSession , out , version ) ; <nl> + out . writeInt ( message . ranges . size ( ) ) ; <nl> + for ( Range r : message . ranges ) <nl> + Range . serializer . serialize ( r , out , version ) ; <nl> + } <nl> + <nl> + public PrepareMessage deserialize ( DataInput in , int version ) throws IOException <nl> + { <nl> + int cfIdCount = in . readInt ( ) ; <nl> + List < UUID > cfIds = new ArrayList < > ( cfIdCount ) ; <nl> + for ( int i = 0 ; i < cfIdCount ; i + + ) <nl> + cfIds . add ( UUIDSerializer . serializer . deserialize ( in , version ) ) ; <nl> + UUID parentRepairSession = UUIDSerializer . serializer . deserialize ( in , version ) ; <nl> + int rangeCount = in . readInt ( ) ; <nl> + List < Range < Token > > ranges = new ArrayList < > ( rangeCount ) ; <nl> + for ( int i = 0 ; i < rangeCount ; i + + ) <nl> + ranges . add ( ( Range < Token > ) Range . serializer . deserialize ( in , version ) . toTokenBounds ( ) ) ; <nl> + return new PrepareMessage ( parentRepairSession , cfIds , ranges ) ; <nl> + } <nl> + <nl> + public long serializedSize ( PrepareMessage message , int version ) <nl> + { <nl> + long size ; <nl> + TypeSizes sizes = TypeSizes . NATIVE ; <nl> + size = sizes . sizeof ( message . cfIds . size ( ) ) ; <nl> + for ( UUID cfId : message . cfIds ) <nl> + size + = UUIDSerializer . serializer . serializedSize ( cfId , version ) ; <nl> + size + = UUIDSerializer . serializer . serializedSize ( message . parentRepairSession , version ) ; <nl> + size + = sizes . sizeof ( message . ranges . size ( ) ) ; <nl> + for ( Range r : message . ranges ) <nl> + size + = Range . serializer . serializedSize ( r , version ) ; <nl> + return size ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return " PrepareMessage { " + <nl> + " cfIds = ' " + cfIds + ' \ ' ' + <nl> + " , ranges = " + ranges + <nl> + " , parentRepairSession = " + parentRepairSession + <nl> + ' } ' ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java b / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java <nl> new file mode 100644 <nl> index 0000000 . . 623e71b <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java <nl> @ @ - 0 , 0 + 1 , 92 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . tools ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . io . PrintStream ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . attribute . FileTime ; <nl> + import java . util . EnumSet ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> + <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . Keyspace ; <nl> + import org . apache . cassandra . io . sstable . Component ; <nl> + import org . apache . cassandra . io . sstable . Descriptor ; <nl> + import org . apache . cassandra . io . sstable . metadata . CompactionMetadata ; <nl> + import org . apache . cassandra . io . sstable . metadata . MetadataComponent ; <nl> + import org . apache . cassandra . io . sstable . metadata . MetadataType ; <nl> + import org . apache . cassandra . io . sstable . metadata . StatsMetadata ; <nl> + import org . apache . cassandra . io . sstable . metadata . ValidationMetadata ; <nl> + import org . apache . cassandra . service . ActiveRepairService ; <nl> + <nl> + / * * <nl> + * Set repairedAt status on a given set of sstables . <nl> + * <nl> + * If you pass - - is - repaired , it will set the repairedAt time to the last modified time . <nl> + * <nl> + * If you know you ran repair 2 weeks ago , you can do something like <nl> + * <nl> + * for x in $ ( find / var / lib / cassandra / data / . . . / - iname " * Data . db * " - mtime + 14 ) ; do sstablerepairset - - is - repaired $ x ; done <nl> + * <nl> + * / <nl> + public class SSTableRepairedAtSetter <nl> + { <nl> + / * * <nl> + * @ param args a list of sstables whose metadata we are changing <nl> + * / <nl> + public static void main ( String [ ] args ) throws IOException <nl> + { <nl> + PrintStream out = System . out ; <nl> + if ( args . length = = 0 ) <nl> + { <nl> + out . println ( " This command should be run with Cassandra stopped ! " ) ; <nl> + out . println ( " Usage : sstablerepairedset [ - - is - repaired | - - is - unrepaired ] < sstable > " ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + <nl> + for ( String s : args ) <nl> + System . out . println ( s ) ; <nl> + <nl> + if ( args . length ! = 3 | | ! args [ 0 ] . equals ( " - - really - set " ) | | ( ! args [ 1 ] . equals ( " - - is - repaired " ) & & ! args [ 1 ] . equals ( " - - is - unrepaired " ) ) ) <nl> + { <nl> + out . println ( " This command should be run with Cassandra stopped , otherwise you will get very strange behavior " ) ; <nl> + out . println ( " Verify that Cassandra is not running and then execute the command like this : " ) ; <nl> + out . println ( " Usage : sstablelevelreset - - really - set [ - - is - repaired | - - is - unrepaired ] < sstable > " ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + <nl> + boolean setIsRepaired = args [ 1 ] . equals ( " - - is - repaired " ) ; <nl> + <nl> + String fname = args [ 2 ] ; <nl> + Descriptor descriptor = Descriptor . fromFilename ( fname ) ; <nl> + if ( setIsRepaired ) <nl> + { <nl> + FileTime f = Files . getLastModifiedTime ( new File ( descriptor . filenameFor ( Component . DATA ) ) . toPath ( ) ) ; <nl> + descriptor . getMetadataSerializer ( ) . mutateRepairedAt ( descriptor , f . toMillis ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + descriptor . getMetadataSerializer ( ) . mutateRepairedAt ( descriptor , ActiveRepairService . UNREPAIRED _ SSTABLE ) ; <nl> + } <nl> + <nl> + } <nl> + } <nl> diff - - git a / test / data / serialization / 2 . 1 / db . RangeSliceCommand . bin b / test / data / serialization / 2 . 1 / db . RangeSliceCommand . bin <nl> new file mode 100644 <nl> index 0000000 . . f852df0 <nl> Binary files / dev / null and b / test / data / serialization / 2 . 1 / db . RangeSliceCommand . bin differ <nl> diff - - git a / test / data / serialization / 2 . 1 / db . SliceByNamesReadCommand . bin b / test / data / serialization / 2 . 1 / db . SliceByNamesReadCommand . bin <nl> new file mode 100644 <nl> index 0000000 . . e9c33a2 <nl> Binary files / dev / null and b / test / data / serialization / 2 . 1 / db . SliceByNamesReadCommand . bin differ <nl> diff - - git a / test / data / serialization / 2 . 1 / db . SliceFromReadCommand . bin b / test / data / serialization / 2 . 1 / db . SliceFromReadCommand . bin <nl> new file mode 100644 <nl> index 0000000 . . 1beede3 <nl> Binary files / dev / null and b / test / data / serialization / 2 . 1 / db . SliceFromReadCommand . bin differ <nl> diff - - git a / test / data / serialization / 2 . 1 / db . Truncation . bin b / test / data / serialization / 2 . 1 / db . Truncation . bin <nl> new file mode 100644 <nl> index 0000000 . . ea67995 <nl> Binary files / dev / null and b / test / data / serialization / 2 . 1 / db . Truncation . bin differ <nl> diff - - git a / test / data / serialization / 2 . 1 / db . WriteResponse . bin b / test / data / serialization / 2 . 1 / db . WriteResponse . bin <nl> new file mode 100644 <nl> index 0000000 . . e69de29 <nl> diff - - git a / test / data / serialization / 2 . 1 / gms . EndpointState . bin b / test / data / serialization / 2 . 1 / gms . EndpointState . bin <nl> new file mode 100644 <nl> index 0000000 . . f87fc77 <nl> Binary files / dev / null and b / test / data / serialization / 2 . 1 / gms . EndpointState . bin differ <nl> diff - - git a / test / data / serialization / 2 . 1 / gms . Gossip . bin b / test / data / serialization / 2 . 1 / gms . Gossip . bin <nl> new file mode 100644 <nl> index 0000000 . . af5ac57 <nl> Binary files / dev / null and b / test / data / serialization / 2 . 1 / gms . Gossip . bin differ <nl> diff - - git a / test / data / serialization / 2 . 1 / service . SyncComplete . bin b / test / data / serialization / 2 . 1 / service . SyncComplete . bin <nl> new file mode 100644 <nl> index 0000000 . . 533abe2 <nl> Binary files / dev / null and b / test / data / serialization / 2 . 1 / service . SyncComplete . bin differ <nl> diff - - git a / test / data / serialization / 2 . 1 / service . SyncRequest . bin b / test / data / serialization / 2 . 1 / service . SyncRequest . bin <nl> new file mode 100644 <nl> index 0000000 . . 2bb8bf9 <nl> Binary files / dev / null and b / test / data / serialization / 2 . 1 / service . SyncRequest . bin differ <nl> diff - - git a / test / data / serialization / 2 . 1 / service . ValidationComplete . bin b / test / data / serialization / 2 . 1 / service . ValidationComplete . bin <nl> new file mode 100644 <nl> index 0000000 . . 6eff48f <nl> Binary files / dev / null and b / test / data / serialization / 2 . 1 / service . ValidationComplete . bin differ <nl> diff - - git a / test / data / serialization / 2 . 1 / service . ValidationRequest . bin b / test / data / serialization / 2 . 1 / service . ValidationRequest . bin <nl> new file mode 100644 <nl> index 0000000 . . e774d05 <nl> Binary files / dev / null and b / test / data / serialization / 2 . 1 / service . ValidationRequest . bin differ <nl> diff - - git a / test / data / serialization / 2 . 1 / utils . BloomFilter . bin b / test / data / serialization / 2 . 1 / utils . BloomFilter . bin <nl> new file mode 100644 <nl> index 0000000 . . 357042a <nl> Binary files / dev / null and b / test / data / serialization / 2 . 1 / utils . BloomFilter . bin differ <nl> diff - - git a / test / data / serialization / 2 . 1 / utils . EstimatedHistogram . bin b / test / data / serialization / 2 . 1 / utils . EstimatedHistogram . bin <nl> new file mode 100644 <nl> index 0000000 . . bedd39b <nl> Binary files / dev / null and b / test / data / serialization / 2 . 1 / utils . EstimatedHistogram . bin differ <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / AntiCompactionTest . java b / test / unit / org / apache / cassandra / db / compaction / AntiCompactionTest . java <nl> new file mode 100644 <nl> index 0000000 . . 164dd62 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / AntiCompactionTest . java <nl> @ @ - 0 , 0 + 1 , 100 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . db . compaction ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collection ; <nl> + import java . util . List ; <nl> + import java . util . concurrent . ExecutionException ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . Util ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . DecoratedKey ; <nl> + import org . apache . cassandra . db . Keyspace ; <nl> + import org . apache . cassandra . db . Mutation ; <nl> + import org . apache . cassandra . dht . BytesToken ; <nl> + import org . apache . cassandra . dht . Range ; <nl> + import org . apache . cassandra . dht . Token ; <nl> + import org . apache . cassandra . io . sstable . SSTableIdentityIterator ; <nl> + import org . apache . cassandra . io . sstable . SSTableReader ; <nl> + import org . apache . cassandra . io . sstable . SSTableScanner ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import static junit . framework . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + public class AntiCompactionTest extends SchemaLoader <nl> + { <nl> + private static final String KEYSPACE1 = " Keyspace1 " ; <nl> + private static final String CF = " Standard1 " ; <nl> + <nl> + @ Test <nl> + public void antiCompactOne ( ) throws InterruptedException , ExecutionException , IOException <nl> + { <nl> + Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; <nl> + ColumnFamilyStore store = keyspace . getColumnFamilyStore ( CF ) ; <nl> + store . disableAutoCompaction ( ) ; <nl> + long timestamp = System . currentTimeMillis ( ) ; <nl> + for ( int i = 0 ; i < 10 ; i + + ) <nl> + { <nl> + DecoratedKey key = Util . dk ( Integer . toString ( i ) ) ; <nl> + Mutation rm = new Mutation ( KEYSPACE1 , key . key ) ; <nl> + for ( int j = 0 ; j < 10 ; j + + ) <nl> + rm . add ( " Standard1 " , Util . cellname ( Integer . toString ( j ) ) , <nl> + ByteBufferUtil . EMPTY _ BYTE _ BUFFER , <nl> + timestamp , <nl> + 0 ) ; <nl> + rm . apply ( ) ; <nl> + } <nl> + store . forceBlockingFlush ( ) ; <nl> + Collection < SSTableReader > sstables = store . getUnrepairedSSTables ( ) ; <nl> + assertEquals ( store . getSSTables ( ) . size ( ) , sstables . size ( ) ) ; <nl> + Range < Token > range = new Range < Token > ( new BytesToken ( " 0 " . getBytes ( ) ) , new BytesToken ( " 4 " . getBytes ( ) ) ) ; <nl> + List < Range < Token > > ranges = Arrays . asList ( range ) ; <nl> + <nl> + long repairedAt = 1000 ; <nl> + CompactionManager . instance . performAnticompaction ( store , ranges , sstables , repairedAt ) ; <nl> + <nl> + assertEquals ( 2 , store . getSSTables ( ) . size ( ) ) ; <nl> + int repairedKeys = 0 ; <nl> + int nonRepairedKeys = 0 ; <nl> + for ( SSTableReader sstable : store . getSSTables ( ) ) <nl> + { <nl> + SSTableScanner scanner = sstable . getScanner ( ) ; <nl> + while ( scanner . hasNext ( ) ) <nl> + { <nl> + SSTableIdentityIterator row = ( SSTableIdentityIterator ) scanner . next ( ) ; <nl> + if ( sstable . isRepaired ( ) ) <nl> + { <nl> + assertTrue ( range . contains ( row . getKey ( ) . token ) ) ; <nl> + repairedKeys + + ; <nl> + } <nl> + else <nl> + { <nl> + assertFalse ( range . contains ( row . getKey ( ) . token ) ) ; <nl> + nonRepairedKeys + + ; <nl> + } <nl> + } <nl> + } <nl> + assertEquals ( repairedKeys , 4 ) ; <nl> + assertEquals ( nonRepairedKeys , 6 ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / utils / IntervalTree / IntervalTree . java b / src / java / org / apache / cassandra / utils / IntervalTree / IntervalTree . java <nl> index a01ed53 . . 954c796 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / IntervalTree / IntervalTree . java <nl> + + + b / src / java / org / apache / cassandra / utils / IntervalTree / IntervalTree . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package org . apache . cassandra . utils . IntervalTree ; <nl> * / <nl> <nl> <nl> + import java . util . ArrayList ; <nl> import java . util . LinkedList ; <nl> import java . util . List ; <nl> <nl> @ @ - 50 , 12 + 51 , 12 @ @ public class IntervalTree < T > <nl> <nl> public List < T > search ( Interval < T > searchInterval ) <nl> { <nl> - List < T > retlist = new LinkedList < T > ( ) ; <nl> - searchInternal ( head , searchInterval , retlist ) ; <nl> - return retlist ; <nl> + List < T > results = new ArrayList < T > ( ) ; <nl> + searchInternal ( head , searchInterval , results ) ; <nl> + return results ; <nl> } <nl> <nl> - protected void searchInternal ( IntervalNode node , Interval < T > searchInterval , List < T > retList ) <nl> + protected void searchInternal ( IntervalNode node , Interval < T > searchInterval , List < T > results ) <nl> { <nl> if ( null = = head ) <nl> return ; <nl> @ @ - 68 , 11 + 69 , 11 @ @ public class IntervalTree < T > <nl> { <nl> for ( Interval < T > interval : node . intersects _ left ) <nl> { <nl> - retList . add ( interval . Data ) ; <nl> + results . add ( interval . Data ) ; <nl> } <nl> <nl> - searchInternal ( node . left , searchInterval , retList ) ; <nl> - searchInternal ( node . right , searchInterval , retList ) ; <nl> + searchInternal ( node . left , searchInterval , results ) ; <nl> + searchInternal ( node . right , searchInterval , results ) ; <nl> return ; <nl> } <nl> <nl> @ @ - 86 , 11 + 87 , 11 @ @ public class IntervalTree < T > <nl> { <nl> if ( interval . max . compareTo ( searchInterval . min ) > = 0 ) <nl> { <nl> - retList . add ( interval . Data ) ; <nl> + results . add ( interval . Data ) ; <nl> } <nl> else break ; <nl> } <nl> - searchInternal ( node . right , searchInterval , retList ) ; <nl> + searchInternal ( node . right , searchInterval , results ) ; <nl> return ; <nl> } <nl> <nl> @ @ - 104 , 11 + 105 , 11 @ @ public class IntervalTree < T > <nl> { <nl> if ( interval . min . compareTo ( searchInterval . max ) < = 0 ) <nl> { <nl> - retList . add ( interval . Data ) ; <nl> + results . add ( interval . Data ) ; <nl> } <nl> else break ; <nl> } <nl> - searchInternal ( node . left , searchInterval , retList ) ; <nl> + searchInternal ( node . left , searchInterval , results ) ; <nl> return ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / notifications / SSTableRepairStatusChanged . java b / src / java / org / apache / cassandra / notifications / SSTableRepairStatusChanged . java 
 new file mode 100644 
 index 0000000 . . 084599e 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / notifications / SSTableRepairStatusChanged . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package org . apache . cassandra . notifications ; 
 + 
 + import java . util . Collection ; 
 + 
 + import org . apache . cassandra . io . sstable . SSTableReader ; 
 + 
 + public class SSTableRepairStatusChanged implements INotification 
 + { 
 + public final Collection < SSTableReader > sstable ; 
 + 
 + public SSTableRepairStatusChanged ( Collection < SSTableReader > repairStatusChanged ) 
 + { 
 + this . sstable = repairStatusChanged ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / repair / messages / AnticompactionRequest . java b / src / java / org / apache / cassandra / repair / messages / AnticompactionRequest . java 
 new file mode 100644 
 index 0000000 . . daa49f0 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / repair / messages / AnticompactionRequest . java 
 @ @ - 0 , 0 + 1 , 64 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . repair . messages ; 
 + 
 + import java . io . DataInput ; 
 + import java . io . DataOutput ; 
 + import java . io . IOException ; 
 + import java . util . ArrayList ; 
 + import java . util . Collection ; 
 + import java . util . List ; 
 + import java . util . UUID ; 
 + 
 + import org . apache . cassandra . db . TypeSizes ; 
 + import org . apache . cassandra . dht . AbstractBounds ; 
 + import org . apache . cassandra . dht . Range ; 
 + import org . apache . cassandra . dht . Token ; 
 + import org . apache . cassandra . repair . RepairJobDesc ; 
 + import org . apache . cassandra . utils . UUIDSerializer ; 
 + 
 + public class AnticompactionRequest extends RepairMessage 
 + { 
 + public static MessageSerializer serializer = new AnticompactionRequestSerializer ( ) ; 
 + public final UUID parentRepairSession ; 
 + 
 + public AnticompactionRequest ( UUID parentRepairSession ) 
 + { 
 + super ( Type . ANTICOMPACTION _ REQUEST , null ) ; 
 + this . parentRepairSession = parentRepairSession ; 
 + } 
 + 
 + public static class AnticompactionRequestSerializer implements MessageSerializer < AnticompactionRequest > 
 + { 
 + public void serialize ( AnticompactionRequest message , DataOutput out , int version ) throws IOException 
 + { 
 + UUIDSerializer . serializer . serialize ( message . parentRepairSession , out , version ) ; 
 + } 
 + 
 + public AnticompactionRequest deserialize ( DataInput in , int version ) throws IOException 
 + { 
 + UUID parentRepairSession = UUIDSerializer . serializer . deserialize ( in , version ) ; 
 + return new AnticompactionRequest ( parentRepairSession ) ; 
 + } 
 + 
 + public long serializedSize ( AnticompactionRequest message , int version ) 
 + { 
 + return UUIDSerializer . serializer . serializedSize ( message . parentRepairSession , version ) ; 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java b / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java 
 new file mode 100644 
 index 0000000 . . defb584 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java 
 @ @ - 0 , 0 + 1 , 101 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . repair . messages ; 
 + 
 + import java . io . DataInput ; 
 + import java . io . DataOutput ; 
 + import java . io . IOException ; 
 + import java . util . ArrayList ; 
 + import java . util . Collection ; 
 + import java . util . List ; 
 + import java . util . UUID ; 
 + 
 + import org . apache . cassandra . db . TypeSizes ; 
 + import org . apache . cassandra . dht . Range ; 
 + import org . apache . cassandra . dht . Token ; 
 + import org . apache . cassandra . utils . UUIDSerializer ; 
 + 
 + 
 + public class PrepareMessage extends RepairMessage 
 + { 
 + public final static MessageSerializer serializer = new PrepareMessageSerializer ( ) ; 
 + public final List < UUID > cfIds ; 
 + public final Collection < Range < Token > > ranges ; 
 + 
 + public final UUID parentRepairSession ; 
 + 
 + public PrepareMessage ( UUID parentRepairSession , List < UUID > cfIds , Collection < Range < Token > > ranges ) 
 + { 
 + super ( Type . PREPARE _ MESSAGE , null ) ; 
 + this . parentRepairSession = parentRepairSession ; 
 + this . cfIds = cfIds ; 
 + this . ranges = ranges ; 
 + } 
 + 
 + public static class PrepareMessageSerializer implements MessageSerializer < PrepareMessage > 
 + { 
 + public void serialize ( PrepareMessage message , DataOutput out , int version ) throws IOException 
 + { 
 + out . writeInt ( message . cfIds . size ( ) ) ; 
 + for ( UUID cfId : message . cfIds ) 
 + UUIDSerializer . serializer . serialize ( cfId , out , version ) ; 
 + UUIDSerializer . serializer . serialize ( message . parentRepairSession , out , version ) ; 
 + out . writeInt ( message . ranges . size ( ) ) ; 
 + for ( Range r : message . ranges ) 
 + Range . serializer . serialize ( r , out , version ) ; 
 + } 
 + 
 + public PrepareMessage deserialize ( DataInput in , int version ) throws IOException 
 + { 
 + int cfIdCount = in . readInt ( ) ; 
 + List < UUID > cfIds = new ArrayList < > ( cfIdCount ) ; 
 + for ( int i = 0 ; i < cfIdCount ; i + + ) 
 + cfIds . add ( UUIDSerializer . serializer . deserialize ( in , version ) ) ; 
 + UUID parentRepairSession = UUIDSerializer . serializer . deserialize ( in , version ) ; 
 + int rangeCount = in . readInt ( ) ; 
 + List < Range < Token > > ranges = new ArrayList < > ( rangeCount ) ; 
 + for ( int i = 0 ; i < rangeCount ; i + + ) 
 + ranges . add ( ( Range < Token > ) Range . serializer . deserialize ( in , version ) . toTokenBounds ( ) ) ; 
 + return new PrepareMessage ( parentRepairSession , cfIds , ranges ) ; 
 + } 
 + 
 + public long serializedSize ( PrepareMessage message , int version ) 
 + { 
 + long size ; 
 + TypeSizes sizes = TypeSizes . NATIVE ; 
 + size = sizes . sizeof ( message . cfIds . size ( ) ) ; 
 + for ( UUID cfId : message . cfIds ) 
 + size + = UUIDSerializer . serializer . serializedSize ( cfId , version ) ; 
 + size + = UUIDSerializer . serializer . serializedSize ( message . parentRepairSession , version ) ; 
 + size + = sizes . sizeof ( message . ranges . size ( ) ) ; 
 + for ( Range r : message . ranges ) 
 + size + = Range . serializer . serializedSize ( r , version ) ; 
 + return size ; 
 + } 
 + } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return " PrepareMessage { " + 
 + " cfIds = ' " + cfIds + ' \ ' ' + 
 + " , ranges = " + ranges + 
 + " , parentRepairSession = " + parentRepairSession + 
 + ' } ' ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java b / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java 
 new file mode 100644 
 index 0000000 . . 623e71b 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / tools / SSTableRepairedAtSetter . java 
 @ @ - 0 , 0 + 1 , 92 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . tools ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . io . PrintStream ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . attribute . FileTime ; 
 + import java . util . EnumSet ; 
 + import java . util . Map ; 
 + import java . util . Set ; 
 + 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . Keyspace ; 
 + import org . apache . cassandra . io . sstable . Component ; 
 + import org . apache . cassandra . io . sstable . Descriptor ; 
 + import org . apache . cassandra . io . sstable . metadata . CompactionMetadata ; 
 + import org . apache . cassandra . io . sstable . metadata . MetadataComponent ; 
 + import org . apache . cassandra . io . sstable . metadata . MetadataType ; 
 + import org . apache . cassandra . io . sstable . metadata . StatsMetadata ; 
 + import org . apache . cassandra . io . sstable . metadata . ValidationMetadata ; 
 + import org . apache . cassandra . service . ActiveRepairService ; 
 + 
 + / * * 
 + * Set repairedAt status on a given set of sstables . 
 + * 
 + * If you pass - - is - repaired , it will set the repairedAt time to the last modified time . 
 + * 
 + * If you know you ran repair 2 weeks ago , you can do something like 
 + * 
 + * for x in $ ( find / var / lib / cassandra / data / . . . / - iname " * Data . db * " - mtime + 14 ) ; do sstablerepairset - - is - repaired $ x ; done 
 + * 
 + * / 
 + public class SSTableRepairedAtSetter 
 + { 
 + / * * 
 + * @ param args a list of sstables whose metadata we are changing 
 + * / 
 + public static void main ( String [ ] args ) throws IOException 
 + { 
 + PrintStream out = System . out ; 
 + if ( args . length = = 0 ) 
 + { 
 + out . println ( " This command should be run with Cassandra stopped ! " ) ; 
 + out . println ( " Usage : sstablerepairedset [ - - is - repaired | - - is - unrepaired ] < sstable > " ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + 
 + for ( String s : args ) 
 + System . out . println ( s ) ; 
 + 
 + if ( args . length ! = 3 | | ! args [ 0 ] . equals ( " - - really - set " ) | | ( ! args [ 1 ] . equals ( " - - is - repaired " ) & & ! args [ 1 ] . equals ( " - - is - unrepaired " ) ) ) 
 + { 
 + out . println ( " This command should be run with Cassandra stopped , otherwise you will get very strange behavior " ) ; 
 + out . println ( " Verify that Cassandra is not running and then execute the command like this : " ) ; 
 + out . println ( " Usage : sstablelevelreset - - really - set [ - - is - repaired | - - is - unrepaired ] < sstable > " ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + 
 + boolean setIsRepaired = args [ 1 ] . equals ( " - - is - repaired " ) ; 
 + 
 + String fname = args [ 2 ] ; 
 + Descriptor descriptor = Descriptor . fromFilename ( fname ) ; 
 + if ( setIsRepaired ) 
 + { 
 + FileTime f = Files . getLastModifiedTime ( new File ( descriptor . filenameFor ( Component . DATA ) ) . toPath ( ) ) ; 
 + descriptor . getMetadataSerializer ( ) . mutateRepairedAt ( descriptor , f . toMillis ( ) ) ; 
 + } 
 + else 
 + { 
 + descriptor . getMetadataSerializer ( ) . mutateRepairedAt ( descriptor , ActiveRepairService . UNREPAIRED _ SSTABLE ) ; 
 + } 
 + 
 + } 
 + } 
 diff - - git a / test / data / serialization / 2 . 1 / db . RangeSliceCommand . bin b / test / data / serialization / 2 . 1 / db . RangeSliceCommand . bin 
 new file mode 100644 
 index 0000000 . . f852df0 
 Binary files / dev / null and b / test / data / serialization / 2 . 1 / db . RangeSliceCommand . bin differ 
 diff - - git a / test / data / serialization / 2 . 1 / db . SliceByNamesReadCommand . bin b / test / data / serialization / 2 . 1 / db . SliceByNamesReadCommand . bin 
 new file mode 100644 
 index 0000000 . . e9c33a2 
 Binary files / dev / null and b / test / data / serialization / 2 . 1 / db . SliceByNamesReadCommand . bin differ 
 diff - - git a / test / data / serialization / 2 . 1 / db . SliceFromReadCommand . bin b / test / data / serialization / 2 . 1 / db . SliceFromReadCommand . bin 
 new file mode 100644 
 index 0000000 . . 1beede3 
 Binary files / dev / null and b / test / data / serialization / 2 . 1 / db . SliceFromReadCommand . bin differ 
 diff - - git a / test / data / serialization / 2 . 1 / db . Truncation . bin b / test / data / serialization / 2 . 1 / db . Truncation . bin 
 new file mode 100644 
 index 0000000 . . ea67995 
 Binary files / dev / null and b / test / data / serialization / 2 . 1 / db . Truncation . bin differ 
 diff - - git a / test / data / serialization / 2 . 1 / db . WriteResponse . bin b / test / data / serialization / 2 . 1 / db . WriteResponse . bin 
 new file mode 100644 
 index 0000000 . . e69de29 
 diff - - git a / test / data / serialization / 2 . 1 / gms . EndpointState . bin b / test / data / serialization / 2 . 1 / gms . EndpointState . bin 
 new file mode 100644 
 index 0000000 . . f87fc77 
 Binary files / dev / null and b / test / data / serialization / 2 . 1 / gms . EndpointState . bin differ 
 diff - - git a / test / data / serialization / 2 . 1 / gms . Gossip . bin b / test / data / serialization / 2 . 1 / gms . Gossip . bin 
 new file mode 100644 
 index 0000000 . . af5ac57 
 Binary files / dev / null and b / test / data / serialization / 2 . 1 / gms . Gossip . bin differ 
 diff - - git a / test / data / serialization / 2 . 1 / service . SyncComplete . bin b / test / data / serialization / 2 . 1 / service . SyncComplete . bin 
 new file mode 100644 
 index 0000000 . . 533abe2 
 Binary files / dev / null and b / test / data / serialization / 2 . 1 / service . SyncComplete . bin differ 
 diff - - git a / test / data / serialization / 2 . 1 / service . SyncRequest . bin b / test / data / serialization / 2 . 1 / service . SyncRequest . bin 
 new file mode 100644 
 index 0000000 . . 2bb8bf9 
 Binary files / dev / null and b / test / data / serialization / 2 . 1 / service . SyncRequest . bin differ 
 diff - - git a / test / data / serialization / 2 . 1 / service . ValidationComplete . bin b / test / data / serialization / 2 . 1 / service . ValidationComplete . bin 
 new file mode 100644 
 index 0000000 . . 6eff48f 
 Binary files / dev / null and b / test / data / serialization / 2 . 1 / service . ValidationComplete . bin differ 
 diff - - git a / test / data / serialization / 2 . 1 / service . ValidationRequest . bin b / test / data / serialization / 2 . 1 / service . ValidationRequest . bin 
 new file mode 100644 
 index 0000000 . . e774d05 
 Binary files / dev / null and b / test / data / serialization / 2 . 1 / service . ValidationRequest . bin differ 
 diff - - git a / test / data / serialization / 2 . 1 / utils . BloomFilter . bin b / test / data / serialization / 2 . 1 / utils . BloomFilter . bin 
 new file mode 100644 
 index 0000000 . . 357042a 
 Binary files / dev / null and b / test / data / serialization / 2 . 1 / utils . BloomFilter . bin differ 
 diff - - git a / test / data / serialization / 2 . 1 / utils . EstimatedHistogram . bin b / test / data / serialization / 2 . 1 / utils . EstimatedHistogram . bin 
 new file mode 100644 
 index 0000000 . . bedd39b 
 Binary files / dev / null and b / test / data / serialization / 2 . 1 / utils . EstimatedHistogram . bin differ 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / AntiCompactionTest . java b / test / unit / org / apache / cassandra / db / compaction / AntiCompactionTest . java 
 new file mode 100644 
 index 0000000 . . 164dd62 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / db / compaction / AntiCompactionTest . java 
 @ @ - 0 , 0 + 1 , 100 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . db . compaction ; 
 + 
 + import java . io . IOException ; 
 + import java . util . Arrays ; 
 + import java . util . Collection ; 
 + import java . util . List ; 
 + import java . util . concurrent . ExecutionException ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . Util ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . DecoratedKey ; 
 + import org . apache . cassandra . db . Keyspace ; 
 + import org . apache . cassandra . db . Mutation ; 
 + import org . apache . cassandra . dht . BytesToken ; 
 + import org . apache . cassandra . dht . Range ; 
 + import org . apache . cassandra . dht . Token ; 
 + import org . apache . cassandra . io . sstable . SSTableIdentityIterator ; 
 + import org . apache . cassandra . io . sstable . SSTableReader ; 
 + import org . apache . cassandra . io . sstable . SSTableScanner ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import static junit . framework . Assert . assertFalse ; 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + public class AntiCompactionTest extends SchemaLoader 
 + { 
 + private static final String KEYSPACE1 = " Keyspace1 " ; 
 + private static final String CF = " Standard1 " ; 
 + 
 + @ Test 
 + public void antiCompactOne ( ) throws InterruptedException , ExecutionException , IOException 
 + { 
 + Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; 
 + ColumnFamilyStore store = keyspace . getColumnFamilyStore ( CF ) ; 
 + store . disableAutoCompaction ( ) ; 
 + long timestamp = System . currentTimeMillis ( ) ; 
 + for ( int i = 0 ; i < 10 ; i + + ) 
 + { 
 + DecoratedKey key = Util . dk ( Integer . toString ( i ) ) ; 
 + Mutation rm = new Mutation ( KEYSPACE1 , key . key ) ; 
 + for ( int j = 0 ; j < 10 ; j + + ) 
 + rm . add ( " Standard1 " , Util . cellname ( Integer . toString ( j ) ) , 
 + ByteBufferUtil . EMPTY _ BYTE _ BUFFER , 
 + timestamp , 
 + 0 ) ; 
 + rm . apply ( ) ; 
 + } 
 + store . forceBlockingFlush ( ) ; 
 + Collection < SSTableReader > sstables = store . getUnrepairedSSTables ( ) ; 
 + assertEquals ( store . getSSTables ( ) . size ( ) , sstables . size ( ) ) ; 
 + Range < Token > range = new Range < Token > ( new BytesToken ( " 0 " . getBytes ( ) ) , new BytesToken ( " 4 " . getBytes ( ) ) ) ; 
 + List < Range < Token > > ranges = Arrays . asList ( range ) ; 
 + 
 + long repairedAt = 1000 ; 
 + CompactionManager . instance . performAnticompaction ( store , ranges , sstables , repairedAt ) ; 
 + 
 + assertEquals ( 2 , store . getSSTables ( ) . size ( ) ) ; 
 + int repairedKeys = 0 ; 
 + int nonRepairedKeys = 0 ; 
 + for ( SSTableReader sstable : store . getSSTables ( ) ) 
 + { 
 + SSTableScanner scanner = sstable . getScanner ( ) ; 
 + while ( scanner . hasNext ( ) ) 
 + { 
 + SSTableIdentityIterator row = ( SSTableIdentityIterator ) scanner . next ( ) ; 
 + if ( sstable . isRepaired ( ) ) 
 + { 
 + assertTrue ( range . contains ( row . getKey ( ) . token ) ) ; 
 + repairedKeys + + ; 
 + } 
 + else 
 + { 
 + assertFalse ( range . contains ( row . getKey ( ) . token ) ) ; 
 + nonRepairedKeys + + ; 
 + } 
 + } 
 + } 
 + assertEquals ( repairedKeys , 4 ) ; 
 + assertEquals ( nonRepairedKeys , 6 ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / utils / IntervalTree / IntervalTree . java b / src / java / org / apache / cassandra / utils / IntervalTree / IntervalTree . java 
 index a01ed53 . . 954c796 100644 
 - - - a / src / java / org / apache / cassandra / utils / IntervalTree / IntervalTree . java 
 + + + b / src / java / org / apache / cassandra / utils / IntervalTree / IntervalTree . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package org . apache . cassandra . utils . IntervalTree ; 
 * / 
 
 
 + import java . util . ArrayList ; 
 import java . util . LinkedList ; 
 import java . util . List ; 
 
 @ @ - 50 , 12 + 51 , 12 @ @ public class IntervalTree < T > 
 
 public List < T > search ( Interval < T > searchInterval ) 
 { 
 - List < T > retlist = new LinkedList < T > ( ) ; 
 - searchInternal ( head , searchInterval , retlist ) ; 
 - return retlist ; 
 + List < T > results = new ArrayList < T > ( ) ; 
 + searchInternal ( head , searchInterval , results ) ; 
 + return results ; 
 } 
 
 - protected void searchInternal ( IntervalNode node , Interval < T > searchInterval , List < T > retList ) 
 + protected void searchInternal ( IntervalNode node , Interval < T > searchInterval , List < T > results ) 
 { 
 if ( null = = head ) 
 return ; 
 @ @ - 68 , 11 + 69 , 11 @ @ public class IntervalTree < T > 
 { 
 for ( Interval < T > interval : node . intersects _ left ) 
 { 
 - retList . add ( interval . Data ) ; 
 + results . add ( interval . Data ) ; 
 } 
 
 - searchInternal ( node . left , searchInterval , retList ) ; 
 - searchInternal ( node . right , searchInterval , retList ) ; 
 + searchInternal ( node . left , searchInterval , results ) ; 
 + searchInternal ( node . right , searchInterval , results ) ; 
 return ; 
 } 
 
 @ @ - 86 , 11 + 87 , 11 @ @ public class IntervalTree < T > 
 { 
 if ( interval . max . compareTo ( searchInterval . min ) > = 0 ) 
 { 
 - retList . add ( interval . Data ) ; 
 + results . add ( interval . Data ) ; 
 } 
 else break ; 
 } 
 - searchInternal ( node . right , searchInterval , retList ) ; 
 + searchInternal ( node . right , searchInterval , results ) ; 
 return ; 
 } 
 
 @ @ - 104 , 11 + 105 , 11 @ @ public class IntervalTree < T > 
 { 
 if ( interval . min . compareTo ( searchInterval . max ) < = 0 ) 
 { 
 - retList . add ( interval . Data ) ; 
 + results . add ( interval . Data ) ; 
 } 
 else break ; 
 } 
 - searchInternal ( node . left , searchInterval , retList ) ; 
 + searchInternal ( node . left , searchInterval , results ) ; 
 return ; 
 } 
 }
