BLEU SCORE: 0.027611988917697356

TEST MSG: Replace mutable UTMetaData with immutable Types in KSMetaData
GENERATED MSG: Add AlterKeyspace statement to 1 . 1

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> index a325a80 . . 4afba19 100644 <nl> - - - a / src / java / org / apache / cassandra / config / KSMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import com . google . common . base . Objects ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . locator . * ; <nl> import org . apache . cassandra . schema . Functions ; <nl> + import org . apache . cassandra . schema . Types ; <nl> import org . apache . cassandra . service . StorageService ; <nl> <nl> public final class KSMetaData <nl> @ @ - 34 , 7 + 35 , 7 @ @ public final class KSMetaData <nl> private final Map < String , CFMetaData > cfMetaData ; <nl> public final boolean durableWrites ; <nl> <nl> - public final UTMetaData userTypes ; <nl> + public final Types types ; <nl> public final Functions functions ; <nl> <nl> public KSMetaData ( String name , <nl> @ @ - 42 , 7 + 43 , 7 @ @ public final class KSMetaData <nl> Map < String , String > strategyOptions , <nl> boolean durableWrites ) <nl> { <nl> - this ( name , strategyClass , strategyOptions , durableWrites , Collections . < CFMetaData > emptyList ( ) , new UTMetaData ( ) , Functions . none ( ) ) ; <nl> + this ( name , strategyClass , strategyOptions , durableWrites , Collections . < CFMetaData > emptyList ( ) , Types . none ( ) , Functions . none ( ) ) ; <nl> } <nl> <nl> public KSMetaData ( String name , <nl> @ @ - 51 , 7 + 52 , 7 @ @ public final class KSMetaData <nl> boolean durableWrites , <nl> Iterable < CFMetaData > cfDefs ) <nl> { <nl> - this ( name , strategyClass , strategyOptions , durableWrites , cfDefs , new UTMetaData ( ) , Functions . none ( ) ) ; <nl> + this ( name , strategyClass , strategyOptions , durableWrites , cfDefs , Types . none ( ) , Functions . none ( ) ) ; <nl> } <nl> <nl> public KSMetaData ( String name , <nl> @ @ - 61 , 7 + 62 , 7 @ @ public final class KSMetaData <nl> Iterable < CFMetaData > cfDefs , <nl> Functions functions ) <nl> { <nl> - this ( name , strategyClass , strategyOptions , durableWrites , cfDefs , new UTMetaData ( ) , functions ) ; <nl> + this ( name , strategyClass , strategyOptions , durableWrites , cfDefs , Types . none ( ) , functions ) ; <nl> } <nl> <nl> private KSMetaData ( String name , <nl> @ @ - 69 , 7 + 70 , 7 @ @ public final class KSMetaData <nl> Map < String , String > strategyOptions , <nl> boolean durableWrites , <nl> Iterable < CFMetaData > cfDefs , <nl> - UTMetaData userTypes , <nl> + Types types , <nl> Functions functions ) <nl> { <nl> this . name = name ; <nl> @ @ - 80 , 7 + 81 , 7 @ @ public final class KSMetaData <nl> cfmap . put ( cfm . cfName , cfm ) ; <nl> this . cfMetaData = Collections . unmodifiableMap ( cfmap ) ; <nl> this . durableWrites = durableWrites ; <nl> - this . userTypes = userTypes ; <nl> + this . types = types ; <nl> this . functions = functions ; <nl> } <nl> <nl> @ @ - 96 , 7 + 97 , 7 @ @ public final class KSMetaData <nl> <nl> public static KSMetaData newKeyspace ( String name , Class < ? extends AbstractReplicationStrategy > strategyClass , Map < String , String > options , boolean durablesWrites , Iterable < CFMetaData > cfDefs ) <nl> { <nl> - return new KSMetaData ( name , strategyClass , options , durablesWrites , cfDefs , new UTMetaData ( ) , Functions . none ( ) ) ; <nl> + return new KSMetaData ( name , strategyClass , options , durablesWrites , cfDefs , Types . none ( ) , Functions . none ( ) ) ; <nl> } <nl> <nl> public KSMetaData cloneWithTableRemoved ( CFMetaData table ) <nl> @ @ - 105 , 7 + 106 , 7 @ @ public final class KSMetaData <nl> List < CFMetaData > newTables = new ArrayList < > ( cfMetaData ( ) . values ( ) ) ; <nl> newTables . remove ( table ) ; <nl> assert newTables . size ( ) = = cfMetaData ( ) . size ( ) - 1 ; <nl> - return cloneWith ( newTables , userTypes , functions ) ; <nl> + return cloneWith ( newTables , types , functions ) ; <nl> } <nl> <nl> public KSMetaData cloneWithTableAdded ( CFMetaData table ) <nl> @ @ - 114 , 17 + 115 , 22 @ @ public final class KSMetaData <nl> List < CFMetaData > newTables = new ArrayList < > ( cfMetaData ( ) . values ( ) ) ; <nl> newTables . add ( table ) ; <nl> assert newTables . size ( ) = = cfMetaData ( ) . size ( ) + 1 ; <nl> - return cloneWith ( newTables , userTypes , functions ) ; <nl> + return cloneWith ( newTables , types , functions ) ; <nl> } <nl> <nl> - public KSMetaData cloneWith ( Iterable < CFMetaData > tables , UTMetaData types , Functions functions ) <nl> + public KSMetaData cloneWith ( Iterable < CFMetaData > tables , Types types , Functions functions ) <nl> { <nl> return new KSMetaData ( name , strategyClass , strategyOptions , durableWrites , tables , types , functions ) ; <nl> } <nl> <nl> + public KSMetaData cloneWith ( Types types ) <nl> + { <nl> + return new KSMetaData ( name , strategyClass , strategyOptions , durableWrites , cfMetaData . values ( ) , types , functions ) ; <nl> + } <nl> + <nl> public KSMetaData cloneWith ( Functions functions ) <nl> { <nl> - return new KSMetaData ( name , strategyClass , strategyOptions , durableWrites , cfMetaData . values ( ) , userTypes , functions ) ; <nl> + return new KSMetaData ( name , strategyClass , strategyOptions , durableWrites , cfMetaData . values ( ) , types , functions ) ; <nl> } <nl> <nl> public static KSMetaData testMetadata ( String name , Class < ? extends AbstractReplicationStrategy > strategyClass , Map < String , String > strategyOptions , CFMetaData . . . cfDefs ) <nl> @ @ - 140 , 7 + 146 , 7 @ @ public final class KSMetaData <nl> @ Override <nl> public int hashCode ( ) <nl> { <nl> - return Objects . hashCode ( name , strategyClass , strategyOptions , cfMetaData , durableWrites , functions , userTypes ) ; <nl> + return Objects . hashCode ( name , strategyClass , strategyOptions , cfMetaData , durableWrites , functions , types ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 160 , 7 + 166 , 7 @ @ public final class KSMetaData <nl> & & Objects . equal ( cfMetaData , other . cfMetaData ) <nl> & & Objects . equal ( durableWrites , other . durableWrites ) <nl> & & Objects . equal ( functions , other . functions ) <nl> - & & Objects . equal ( userTypes , other . userTypes ) ; <nl> + & & Objects . equal ( types , other . types ) ; <nl> } <nl> <nl> public Map < String , CFMetaData > cfMetaData ( ) <nl> @ @ - 178 , 7 + 184 , 7 @ @ public final class KSMetaData <nl> . add ( " cfMetaData " , cfMetaData ) <nl> . add ( " durableWrites " , durableWrites ) <nl> . add ( " functions " , functions ) <nl> - . add ( " userTypes " , userTypes ) <nl> + . add ( " types " , types ) <nl> . toString ( ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / config / Schema . java b / src / java / org / apache / cassandra / config / Schema . java <nl> index 07684ad . . ebf83a9 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Schema . java <nl> + + + b / src / java / org / apache / cassandra / config / Schema . java <nl> @ @ - 453 , 10 + 453 , 9 @ @ public class Schema <nl> { <nl> KSMetaData oldKsm = getKSMetaData ( ksName ) ; <nl> assert oldKsm ! = null ; <nl> - KSMetaData newKsm = LegacySchemaTables . createKeyspaceFromName ( ksName ) . cloneWith ( oldKsm . cfMetaData ( ) . values ( ) , oldKsm . userTypes , oldKsm . functions ) ; <nl> - <nl> + KSMetaData newKsm = LegacySchemaTables . createKeyspaceFromName ( ksName ) <nl> + . cloneWith ( oldKsm . cfMetaData ( ) . values ( ) , oldKsm . types , oldKsm . functions ) ; <nl> setKeyspaceDefinition ( newKsm ) ; <nl> - <nl> Keyspace . open ( ksName ) . createReplicationStrategy ( newKsm ) ; <nl> MigrationManager . instance . notifyUpdateKeyspace ( newKsm ) ; <nl> } <nl> @ @ - 551 , 35 + 550 , 28 @ @ public class Schema <nl> <nl> public void addType ( UserType ut ) <nl> { <nl> - KSMetaData ksm = getKSMetaData ( ut . keyspace ) ; <nl> - assert ksm ! = null ; <nl> - <nl> - logger . info ( " Loading { } " , ut ) ; <nl> - <nl> - ksm . userTypes . addType ( ut ) ; <nl> - <nl> + KSMetaData oldKsm = getKSMetaData ( ut . keyspace ) ; <nl> + assert oldKsm ! = null ; <nl> + KSMetaData newKsm = oldKsm . cloneWith ( oldKsm . types . with ( ut ) ) ; <nl> + setKeyspaceDefinition ( newKsm ) ; <nl> MigrationManager . instance . notifyCreateUserType ( ut ) ; <nl> } <nl> <nl> public void updateType ( UserType ut ) <nl> { <nl> - KSMetaData ksm = getKSMetaData ( ut . keyspace ) ; <nl> - assert ksm ! = null ; <nl> - <nl> - logger . info ( " Updating { } " , ut ) ; <nl> - <nl> - ksm . userTypes . addType ( ut ) ; <nl> - <nl> + KSMetaData oldKsm = getKSMetaData ( ut . keyspace ) ; <nl> + assert oldKsm ! = null ; <nl> + KSMetaData newKsm = oldKsm . cloneWith ( oldKsm . types . without ( ut . name ) . with ( ut ) ) ; <nl> + setKeyspaceDefinition ( newKsm ) ; <nl> MigrationManager . instance . notifyUpdateUserType ( ut ) ; <nl> } <nl> <nl> public void dropType ( UserType ut ) <nl> { <nl> - KSMetaData ksm = getKSMetaData ( ut . keyspace ) ; <nl> - assert ksm ! = null ; <nl> - <nl> - ksm . userTypes . removeType ( ut ) ; <nl> - <nl> + KSMetaData oldKsm = getKSMetaData ( ut . keyspace ) ; <nl> + assert oldKsm ! = null ; <nl> + KSMetaData newKsm = oldKsm . cloneWith ( oldKsm . types . without ( ut . name ) ) ; <nl> + setKeyspaceDefinition ( newKsm ) ; <nl> MigrationManager . instance . notifyDropUserType ( ut ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / config / UTMetaData . java b / src / java / org / apache / cassandra / config / UTMetaData . java <nl> deleted file mode 100644 <nl> index 08cedee . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / config / UTMetaData . java <nl> + + + / dev / null <nl> @ @ - 1 , 76 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . config ; <nl> - <nl> - import java . nio . ByteBuffer ; <nl> - import java . util . * ; <nl> - <nl> - import org . apache . cassandra . db . marshal . * ; <nl> - <nl> - / * * <nl> - * Defined ( and loaded ) user types . <nl> - * <nl> - * In practice , because user types are global , we have only one instance of <nl> - * this class that retrieve through the Schema class . <nl> - * / <nl> - public final class UTMetaData <nl> - { <nl> - private final Map < ByteBuffer , UserType > userTypes ; <nl> - <nl> - public UTMetaData ( ) <nl> - { <nl> - this ( new HashMap < ByteBuffer , UserType > ( ) ) ; <nl> - } <nl> - <nl> - public UTMetaData ( Map < ByteBuffer , UserType > types ) <nl> - { <nl> - this . userTypes = types ; <nl> - } <nl> - <nl> - public UserType getType ( ByteBuffer typeName ) <nl> - { <nl> - return userTypes . get ( typeName ) ; <nl> - } <nl> - <nl> - public Map < ByteBuffer , UserType > getAllTypes ( ) <nl> - { <nl> - / / Copy to avoid concurrent modification while iterating . Not intended to be called on a critical path anyway <nl> - return new HashMap < > ( userTypes ) ; <nl> - } <nl> - <nl> - / / This is * not * thread safe but is only called in Schema that is synchronized . <nl> - public void addType ( UserType type ) <nl> - { <nl> - UserType old = userTypes . get ( type . name ) ; <nl> - assert old = = null | | type . isCompatibleWith ( old ) ; <nl> - userTypes . put ( type . name , type ) ; <nl> - } <nl> - <nl> - / / Same remarks than for addType <nl> - public void removeType ( UserType type ) <nl> - { <nl> - userTypes . remove ( type . name ) ; <nl> - } <nl> - <nl> - public boolean equals ( Object that ) <nl> - { <nl> - if ( ! ( that instanceof UTMetaData ) ) <nl> - return false ; <nl> - return userTypes . equals ( ( ( UTMetaData ) that ) . userTypes ) ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / CQL3Type . java b / src / java / org / apache / cassandra / cql3 / CQL3Type . java <nl> index 290f4cb . . c24f6fe 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / CQL3Type . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / CQL3Type . java <nl> @ @ - 528 , 7 + 528 , 7 @ @ public interface CQL3Type <nl> KSMetaData ksm = Schema . instance . getKSMetaData ( name . getKeyspace ( ) ) ; <nl> if ( ksm = = null ) <nl> throw new InvalidRequestException ( " Unknown keyspace " + name . getKeyspace ( ) ) ; <nl> - UserType type = ksm . userTypes . getType ( name . getUserTypeName ( ) ) ; <nl> + UserType type = ksm . types . getNullable ( name . getUserTypeName ( ) ) ; <nl> if ( type = = null ) <nl> throw new InvalidRequestException ( " Unknown type " + name ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> index 77e4afe . . 14a8ff2 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java <nl> @ @ - 295 , 7 + 295 , 7 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct <nl> KSMetaData ksm = Schema . instance . getKSMetaData ( ksName ) ; <nl> assert ksm ! = null ; <nl> <nl> - org . apache . cassandra . db . marshal . UserType ut = ksm . userTypes . getType ( ByteBufferUtil . bytes ( typeName ) ) ; <nl> + org . apache . cassandra . db . marshal . UserType ut = ksm . types . get ( ByteBufferUtil . bytes ( typeName ) ) . get ( ) ; <nl> <nl> DataType newUserType = UDHelper . driverType ( ut ) ; <nl> argDataTypes [ i ] = newUserType ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java <nl> index 4e78bfc . . 0fb084e 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java <nl> @ @ - 95 , 10 + 95 , 9 @ @ public abstract class AlterTypeStatement extends SchemaAlteringStatement <nl> if ( ksm = = null ) <nl> throw new InvalidRequestException ( String . format ( " Cannot alter type in unknown keyspace % s " , name . getKeyspace ( ) ) ) ; <nl> <nl> - UserType toUpdate = ksm . userTypes . getType ( name . getUserTypeName ( ) ) ; <nl> - / / Shouldn ' t happen , unless we race with a drop <nl> - if ( toUpdate = = null ) <nl> - throw new InvalidRequestException ( String . format ( " No user type named % s exists . " , name ) ) ; <nl> + UserType toUpdate = <nl> + ksm . types . get ( name . getUserTypeName ( ) ) <nl> + . orElseThrow ( ( ) - > new InvalidRequestException ( String . format ( " No user type named % s exists . " , name ) ) ) ; <nl> <nl> UserType updated = makeUpdatedType ( toUpdate ) ; <nl> <nl> @ @ - 117 , 7 + 116 , 7 @ @ public abstract class AlterTypeStatement extends SchemaAlteringStatement <nl> } <nl> <nl> / / Other user types potentially using the updated type <nl> - for ( UserType ut : ksm . userTypes . getAllTypes ( ) . values ( ) ) <nl> + for ( UserType ut : ksm . types ) <nl> { <nl> / / Re - updating the type we ' ve just updated would be harmless but useless so we avoid it . <nl> / / Besides , we use the occasion to drop the old version of the type if it ' s a type rename <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTypeStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTypeStatement . java <nl> index 82c2808 . . 97f3ed6 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTypeStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTypeStatement . java <nl> @ @ - 69 , 7 + 69 , 7 @ @ public class CreateTypeStatement extends SchemaAlteringStatement <nl> if ( ksm = = null ) <nl> throw new InvalidRequestException ( String . format ( " Cannot add type in unknown keyspace % s " , name . getKeyspace ( ) ) ) ; <nl> <nl> - if ( ksm . userTypes . getType ( name . getUserTypeName ( ) ) ! = null & & ! ifNotExists ) <nl> + if ( ksm . types . get ( name . getUserTypeName ( ) ) . isPresent ( ) & & ! ifNotExists ) <nl> throw new InvalidRequestException ( String . format ( " A user type of name % s already exists " , name ) ) ; <nl> <nl> for ( CQL3Type . Raw type : columnTypes ) <nl> @ @ - 122 , 7 + 122 , 7 @ @ public class CreateTypeStatement extends SchemaAlteringStatement <nl> assert ksm ! = null ; / / should haven ' t validate otherwise <nl> <nl> / / Can happen with ifNotExists <nl> - if ( ksm . userTypes . getType ( name . getUserTypeName ( ) ) ! = null ) <nl> + if ( ksm . types . get ( name . getUserTypeName ( ) ) . isPresent ( ) ) <nl> return false ; <nl> <nl> UserType type = createType ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropTypeStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropTypeStatement . java <nl> index 5edac58 . . ddb0959 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / DropTypeStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / DropTypeStatement . java <nl> @ @ - 57 , 8 + 57 , 7 @ @ public class DropTypeStatement extends SchemaAlteringStatement <nl> if ( ksm = = null ) <nl> throw new InvalidRequestException ( String . format ( " Cannot drop type in unknown keyspace % s " , name . getKeyspace ( ) ) ) ; <nl> <nl> - UserType old = ksm . userTypes . getType ( name . getUserTypeName ( ) ) ; <nl> - if ( old = = null ) <nl> + if ( ! ksm . types . get ( name . getUserTypeName ( ) ) . isPresent ( ) ) <nl> { <nl> if ( ifExists ) <nl> return ; <nl> @ @ - 83 , 7 + 82 , 7 @ @ public class DropTypeStatement extends SchemaAlteringStatement <nl> throw new InvalidRequestException ( String . format ( " Cannot drop user type % s as it is still used by function % s " , name , function ) ) ; <nl> } <nl> <nl> - for ( UserType ut : ksm . userTypes . getAllTypes ( ) . values ( ) ) <nl> + for ( UserType ut : ksm . types ) <nl> if ( ! ut . name . equals ( name . getUserTypeName ( ) ) & & isUsedBy ( ut ) ) <nl> throw new InvalidRequestException ( String . format ( " Cannot drop user type % s as it is still used by user type % s " , name , ut . asCQL3Type ( ) ) ) ; <nl> <nl> @ @ - 140 , 7 + 139 , 7 @ @ public class DropTypeStatement extends SchemaAlteringStatement <nl> KSMetaData ksm = Schema . instance . getKSMetaData ( name . getKeyspace ( ) ) ; <nl> assert ksm ! = null ; <nl> <nl> - UserType toDrop = ksm . userTypes . getType ( name . getUserTypeName ( ) ) ; <nl> + UserType toDrop = ksm . types . getNullable ( name . getUserTypeName ( ) ) ; <nl> / / Can be null with ifExists <nl> if ( toDrop = = null ) <nl> return false ; <nl> diff - - git a / src / java / org / apache / cassandra / schema / LegacySchemaTables . java b / src / java / org / apache / cassandra / schema / LegacySchemaTables . java <nl> index 42c67db . . 4077700 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / LegacySchemaTables . java <nl> + + + b / src / java / org / apache / cassandra / schema / LegacySchemaTables . java <nl> @ @ - 661 , 8 + 661 , 8 @ @ public final class LegacySchemaTables <nl> <nl> if ( withTablesAndTypesAndFunctions ) <nl> { <nl> - keyspace . userTypes . getAllTypes ( ) . values ( ) . forEach ( type - > addTypeToSchemaMutation ( type , timestamp , mutation ) ) ; <nl> keyspace . cfMetaData ( ) . values ( ) . forEach ( table - > addTableToSchemaMutation ( table , timestamp , true , mutation ) ) ; <nl> + keyspace . types . forEach ( type - > addTypeToSchemaMutation ( type , timestamp , mutation ) ) ; <nl> keyspace . functions . udfs ( ) . forEach ( udf - > addFunctionToSchemaMutation ( udf , timestamp , mutation ) ) ; <nl> keyspace . functions . udas ( ) . forEach ( uda - > addAggregateToSchemaMutation ( uda , timestamp , mutation ) ) ; <nl> } <nl> @ @ - 687 , 12 + 687 , 10 @ @ public final class LegacySchemaTables <nl> RowIterator seriazliedAggregates ) <nl> { <nl> Collection < CFMetaData > tables = createTablesFromTablesPartition ( serializedTables ) ; <nl> - UTMetaData types = new UTMetaData ( createTypesFromPartition ( serializedTypes ) ) ; <nl> - <nl> + Types types = createTypesFromPartition ( serializedTypes ) ; <nl> Collection < UDFunction > udfs = createFunctionsFromFunctionsPartition ( serializedFunctions ) ; <nl> Collection < UDAggregate > udas = createAggregatesFromAggregatesPartition ( seriazliedAggregates ) ; <nl> Functions functions = org . apache . cassandra . schema . Functions . builder ( ) . add ( udfs ) . add ( udas ) . build ( ) ; <nl> - <nl> return createKeyspaceFromSchemaPartition ( serializedKeyspace ) . cloneWith ( tables , types , functions ) ; <nl> } <nl> <nl> @ @ - 759 , 16 + 757 , 12 @ @ public final class LegacySchemaTables <nl> return RowUpdateBuilder . deleteRow ( Usertypes , timestamp , mutation , type . name ) ; <nl> } <nl> <nl> - private static Map < ByteBuffer , UserType > createTypesFromPartition ( RowIterator partition ) <nl> + private static Types createTypesFromPartition ( RowIterator partition ) <nl> { <nl> String query = String . format ( " SELECT * FROM % s . % s " , SystemKeyspace . NAME , USERTYPES ) ; <nl> - Map < ByteBuffer , UserType > types = new HashMap < > ( ) ; <nl> - for ( UntypedResultSet . Row row : QueryProcessor . resultify ( query , partition ) ) <nl> - { <nl> - UserType type = createTypeFromRow ( row ) ; <nl> - types . put ( type . name , type ) ; <nl> - } <nl> - return types ; <nl> + Types . Builder types = Types . builder ( ) ; <nl> + QueryProcessor . resultify ( query , partition ) . forEach ( row - > types . add ( createTypeFromRow ( row ) ) ) ; <nl> + return types . build ( ) ; <nl> } <nl> <nl> private static UserType createTypeFromRow ( UntypedResultSet . Row row ) <nl> diff - - git a / src / java / org / apache / cassandra / schema / Types . java b / src / java / org / apache / cassandra / schema / Types . java <nl> new file mode 100644 <nl> index 0000000 . . 982e3f5 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / schema / Types . java <nl> @ @ - 0 , 0 + 1 , 147 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . schema ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . Iterator ; <nl> + import java . util . Optional ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + <nl> + import com . google . common . collect . ImmutableMap ; <nl> + <nl> + import org . apache . cassandra . db . marshal . UserType ; <nl> + <nl> + import static com . google . common . collect . Iterables . filter ; <nl> + <nl> + / * * <nl> + * An immutable container for a keyspace ' s UDTs . <nl> + * / <nl> + public final class Types implements Iterable < UserType > <nl> + { <nl> + private final ImmutableMap < ByteBuffer , UserType > types ; <nl> + <nl> + private Types ( Builder builder ) <nl> + { <nl> + types = builder . types . build ( ) ; <nl> + } <nl> + <nl> + public static Builder builder ( ) <nl> + { <nl> + return new Builder ( ) ; <nl> + } <nl> + <nl> + public static Types none ( ) <nl> + { <nl> + return builder ( ) . build ( ) ; <nl> + } <nl> + <nl> + public Iterator < UserType > iterator ( ) <nl> + { <nl> + return types . values ( ) . iterator ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Get the type with the specified name <nl> + * <nl> + * @ param name a non - qualified type name <nl> + * @ return an empty { @ link Optional } if the type name is not found ; a non - empty optional of { @ link UserType } otherwise <nl> + * / <nl> + public Optional < UserType > get ( ByteBuffer name ) <nl> + { <nl> + return Optional . ofNullable ( types . get ( name ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Get the type with the specified name <nl> + * <nl> + * @ param name a non - qualified type name <nl> + * @ return null if the type name is not found ; the found { @ link UserType } otherwise <nl> + * / <nl> + @ Nullable <nl> + public UserType getNullable ( ByteBuffer name ) <nl> + { <nl> + return types . get ( name ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Create a Types instance with the provided type added <nl> + * / <nl> + public Types with ( UserType type ) <nl> + { <nl> + if ( get ( type . name ) . isPresent ( ) ) <nl> + throw new IllegalStateException ( String . format ( " Type % s already exists " , type . name ) ) ; <nl> + <nl> + return builder ( ) . add ( this ) . add ( type ) . build ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Creates a Types instance with the type with the provided name removed <nl> + * / <nl> + public Types without ( ByteBuffer name ) <nl> + { <nl> + UserType type = <nl> + get ( name ) . orElseThrow ( ( ) - > new IllegalStateException ( String . format ( " Type % s doesn ' t exists " , name ) ) ) ; <nl> + <nl> + return builder ( ) . add ( filter ( this , t - > t ! = type ) ) . build ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean equals ( Object o ) <nl> + { <nl> + return this = = o | | ( o instanceof Types & & types . equals ( ( ( Types ) o ) . types ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return types . hashCode ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return types . values ( ) . toString ( ) ; <nl> + } <nl> + <nl> + public static final class Builder <nl> + { <nl> + final ImmutableMap . Builder < ByteBuffer , UserType > types = new ImmutableMap . Builder < > ( ) ; <nl> + <nl> + private Builder ( ) <nl> + { <nl> + } <nl> + <nl> + public Types build ( ) <nl> + { <nl> + return new Types ( this ) ; <nl> + } <nl> + <nl> + public Builder add ( UserType type ) <nl> + { <nl> + types . put ( type . name , type ) ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder add ( Iterable < UserType > types ) <nl> + { <nl> + types . forEach ( this : : add ) ; <nl> + return this ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / selection / SelectionColumnMappingTest . java b / test / unit / org / apache / cassandra / cql3 / selection / SelectionColumnMappingTest . java <nl> index 2f1d361 . . 971176a 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / selection / SelectionColumnMappingTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / selection / SelectionColumnMappingTest . java <nl> @ @ - 46 , 7 + 46 , 7 @ @ public class SelectionColumnMappingTest extends CQLTester <nl> " v1 int , " + <nl> " v2 ascii , " + <nl> " v3 frozen < " + typeName + " > ) " ) ; <nl> - userType = Schema . instance . getKSMetaData ( KEYSPACE ) . userTypes . getType ( ByteBufferUtil . bytes ( typeName ) ) ; <nl> + userType = Schema . instance . getKSMetaData ( KEYSPACE ) . types . get ( ByteBufferUtil . bytes ( typeName ) ) . get ( ) ; <nl> functionName = createFunction ( KEYSPACE , " int , ascii " , <nl> " CREATE FUNCTION % s ( i int , a ascii ) " + <nl> " CALLED ON NULL INPUT " +
NEAREST DIFF (one line): diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index f984618 . . c242cf9 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 32 , 7 + 32 , 7 @ @ exit 1 <nl> from _ _ future _ _ import with _ statement <nl> <nl> description = " CQL Shell for Apache Cassandra " <nl> - version = " 2 . 2 . 0 " <nl> + version = " 2 . 3 . 0 " <nl> <nl> from StringIO import StringIO <nl> from itertools import groupby <nl> @ @ - 112 , 6 + 112 , 7 @ @ HISTORY = os . path . expanduser ( os . path . join ( ' ~ ' , ' . cqlsh _ history ' ) ) <nl> DEFAULT _ HOST = ' localhost ' <nl> DEFAULT _ PORT = 9160 <nl> DEFAULT _ CQLVER = ' 2 ' <nl> + DEFAULT _ TRANSPORT _ FACTORY = ' cqlshlib . tfactory . regular _ transport _ factory ' <nl> <nl> epilog = " " " Connects to % ( DEFAULT _ HOST ) s : % ( DEFAULT _ PORT ) d by default . These <nl> defaults can be changed by setting $ CQLSH _ HOST and / or $ CQLSH _ PORT . When a <nl> @ @ - 128 , 8 + 129 , 9 @ @ parser . add _ option ( " - - no - color " , action = ' store _ false ' , dest = ' color ' , <nl> parser . add _ option ( " - u " , " - - username " , help = " Authenticate as user . " ) <nl> parser . add _ option ( " - p " , " - - password " , help = " Authenticate using password . " ) <nl> parser . add _ option ( ' - k ' , ' - - keyspace ' , help = ' Authenticate to the given keyspace . ' ) <nl> - parser . add _ option ( " - f " , " - - file " , <nl> - help = " Execute commands from FILE , then exit " ) <nl> + parser . add _ option ( " - f " , " - - file " , help = " Execute commands from FILE , then exit " ) <nl> + parser . add _ option ( " - t " , " - - transport - factory " , <nl> + help = " Use the provided Thrift transport factory function . " ) <nl> parser . add _ option ( ' - - debug ' , action = ' store _ true ' , <nl> help = ' Show additional debugging information ' ) <nl> parser . add _ option ( ' - - cqlversion ' , default = DEFAULT _ CQLVER , <nl> @ @ - 557 , 19 + 559 , 22 @ @ class Shell ( cmd . Cmd ) : <nl> csv _ dialect _ defaults = dict ( delimiter = ' , ' , doublequote = False , <nl> escapechar = ' \ \ ' , quotechar = ' " ' ) <nl> <nl> - def _ _ init _ _ ( self , hostname , port , color = False , username = None , <nl> - password = None , encoding = None , stdin = None , tty = True , <nl> + def _ _ init _ _ ( self , hostname , port , transport _ factory , color = False , <nl> + username = None , password = None , encoding = None , stdin = None , tty = True , <nl> completekey = ' tab ' , use _ conn = None , cqlver = None , keyspace = None ) : <nl> cmd . Cmd . _ _ init _ _ ( self , completekey = completekey ) <nl> self . hostname = hostname <nl> self . port = port <nl> + self . transport _ factory = transport _ factory <nl> self . username = username <nl> self . password = password <nl> self . keyspace = keyspace <nl> if use _ conn is not None : <nl> self . conn = use _ conn <nl> else : <nl> - self . conn = cql . connect ( hostname , port , user = username , password = password ) <nl> + transport = transport _ factory ( hostname , port , os . environ , CONFIG _ FILE ) <nl> + self . conn = cql . connect ( hostname , port , user = username , password = password , <nl> + transport = transport ) <nl> self . set _ expanded _ cql _ version ( cqlver ) <nl> # we could set the keyspace through cql . connect ( ) , but as of 1 . 0 . 10 , <nl> # it doesn ' t quote the keyspace for USE : ( <nl> @ @ - 1794 , 9 + 1799 , 9 @ @ class Shell ( cmd . Cmd ) : <nl> except IOError , e : <nl> self . printerr ( ' Could not open % r : % s ' % ( fname , e ) ) <nl> return <nl> - subshell = Shell ( self . hostname , self . port , color = self . color , <nl> - encoding = self . encoding , stdin = f , tty = False , <nl> - use _ conn = self . conn , cqlver = self . cql _ version ) <nl> + subshell = Shell ( self . hostname , self . port , self . transport _ factory , <nl> + color = self . color , encoding = self . encoding , stdin = f , <nl> + tty = False , use _ conn = self . conn , cqlver = self . cql _ version ) <nl> subshell . cmdloop ( ) <nl> f . close ( ) <nl> <nl> @ @ - 2627 , 6 + 2632 , 21 @ @ def should _ use _ color ( ) : <nl> pass <nl> return True <nl> <nl> + def load _ factory ( name ) : <nl> + " " " <nl> + Attempts to load a transport factory function given its fully qualified <nl> + name , e . g . " cqlshlib . tfactory . regular _ transport _ factory " <nl> + " " " <nl> + parts = name . split ( ' . ' ) <nl> + module = " . " . join ( parts [ : - 1 ] ) <nl> + try : <nl> + t = _ _ import _ _ ( module ) <nl> + for part in parts [ 1 : ] : <nl> + t = getattr ( t , part ) <nl> + return t <nl> + except ( ImportError , AttributeError ) : <nl> + sys . exit ( " Can ' t locate transport factory function % s " % name ) <nl> + <nl> def read _ options ( cmdlineargs , environment ) : <nl> configs = ConfigParser . SafeConfigParser ( ) <nl> configs . read ( CONFIG _ FILE ) <nl> @ @ - 2635 , 6 + 2655 , 8 @ @ def read _ options ( cmdlineargs , environment ) : <nl> optvalues . username = option _ with _ default ( configs . get , ' authentication ' , ' username ' ) <nl> optvalues . password = option _ with _ default ( configs . get , ' authentication ' , ' password ' ) <nl> optvalues . keyspace = option _ with _ default ( configs . get , ' authentication ' , ' keyspace ' ) <nl> + optvalues . transport _ factory = option _ with _ default ( configs . get , ' connection ' , ' factory ' , <nl> + DEFAULT _ TRANSPORT _ FACTORY ) <nl> optvalues . completekey = option _ with _ default ( configs . get , ' ui ' , ' completekey ' , ' tab ' ) <nl> optvalues . color = option _ with _ default ( configs . getboolean , ' ui ' , ' color ' ) <nl> optvalues . debug = False <nl> @ @ - 2658 , 6 + 2680 , 8 @ @ def read _ options ( cmdlineargs , environment ) : <nl> if options . file is not None : <nl> options . tty = False <nl> <nl> + options . transport _ factory = load _ factory ( options . transport _ factory ) <nl> + <nl> if optvalues . color in ( True , False ) : <nl> options . color = optvalues . color <nl> else : <nl> @ @ - 2725 , 6 + 2749 , 7 @ @ def main ( options , hostname , port ) : <nl> try : <nl> shell = Shell ( hostname , <nl> port , <nl> + options . transport _ factory , <nl> color = options . color , <nl> username = options . username , <nl> password = options . password , <nl> diff - - git a / lib / cql - internal - only - 1 . 0 . 10 - 4610 . zip b / lib / cql - internal - only - 1 . 0 . 10 - 4610 . zip <nl> new file mode 100644 <nl> index 0000000 . . c98101d <nl> Binary files / dev / null and b / lib / cql - internal - only - 1 . 0 . 10 - 4610 . zip differ <nl> diff - - git a / lib / cql - internal - only - 1 . 0 . 10 . zip b / lib / cql - internal - only - 1 . 0 . 10 . zip <nl> deleted file mode 100644 <nl> index c4ca8f2 . . 0000000 <nl> Binary files a / lib / cql - internal - only - 1 . 0 . 10 . zip and / dev / null differ <nl> diff - - git a / pylib / cqlshlib / tfactory . py b / pylib / cqlshlib / tfactory . py <nl> new file mode 100644 <nl> index 0000000 . . d16c8e7 <nl> - - - / dev / null <nl> + + + b / pylib / cqlshlib / tfactory . py <nl> @ @ - 0 , 0 + 1 , 32 @ @ <nl> + # Licensed to the Apache Software Foundation ( ASF ) under one <nl> + # or more contributor license agreements . See the NOTICE file <nl> + # distributed with this work for additional information <nl> + # regarding copyright ownership . The ASF licenses this file <nl> + # to you under the Apache License , Version 2 . 0 ( the <nl> + # " License " ) ; you may not use this file except in compliance <nl> + # with the License . You may obtain a copy of the License at <nl> + # <nl> + # http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + # <nl> + # Unless required by applicable law or agreed to in writing , software <nl> + # distributed under the License is distributed on an " AS IS " BASIS , <nl> + # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + # See the License for the specific language governing permissions and <nl> + # limitations under the License . <nl> + <nl> + from thrift . transport import TSocket , TTransport <nl> + <nl> + def regular _ transport _ factory ( host , port , env , config _ file ) : <nl> + " " " <nl> + Basic unencrypted Thrift transport factory function . <nl> + Returns instantiated Thrift transport for use with cql . Connection . <nl> + <nl> + Params : <nl> + * host . . . . . . . . . : hostname of Cassandra node . <nl> + * port . . . . . . . . . : port number to connect to . <nl> + * env . . . . . . . . . . : environment variables ( os . environ ) - not used by this implementation . <nl> + * config _ file . . : path to cqlsh config file - not used by this implementation . <nl> + " " " <nl> + socket = TSocket . TSocket ( host , port ) <nl> + socket . open ( ) <nl> + return TTransport . TFramedTransport ( socket )

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java 
 index a325a80 . . 4afba19 100644 
 - - - a / src / java / org / apache / cassandra / config / KSMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / KSMetaData . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import com . google . common . base . Objects ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . locator . * ; 
 import org . apache . cassandra . schema . Functions ; 
 + import org . apache . cassandra . schema . Types ; 
 import org . apache . cassandra . service . StorageService ; 
 
 public final class KSMetaData 
 @ @ - 34 , 7 + 35 , 7 @ @ public final class KSMetaData 
 private final Map < String , CFMetaData > cfMetaData ; 
 public final boolean durableWrites ; 
 
 - public final UTMetaData userTypes ; 
 + public final Types types ; 
 public final Functions functions ; 
 
 public KSMetaData ( String name , 
 @ @ - 42 , 7 + 43 , 7 @ @ public final class KSMetaData 
 Map < String , String > strategyOptions , 
 boolean durableWrites ) 
 { 
 - this ( name , strategyClass , strategyOptions , durableWrites , Collections . < CFMetaData > emptyList ( ) , new UTMetaData ( ) , Functions . none ( ) ) ; 
 + this ( name , strategyClass , strategyOptions , durableWrites , Collections . < CFMetaData > emptyList ( ) , Types . none ( ) , Functions . none ( ) ) ; 
 } 
 
 public KSMetaData ( String name , 
 @ @ - 51 , 7 + 52 , 7 @ @ public final class KSMetaData 
 boolean durableWrites , 
 Iterable < CFMetaData > cfDefs ) 
 { 
 - this ( name , strategyClass , strategyOptions , durableWrites , cfDefs , new UTMetaData ( ) , Functions . none ( ) ) ; 
 + this ( name , strategyClass , strategyOptions , durableWrites , cfDefs , Types . none ( ) , Functions . none ( ) ) ; 
 } 
 
 public KSMetaData ( String name , 
 @ @ - 61 , 7 + 62 , 7 @ @ public final class KSMetaData 
 Iterable < CFMetaData > cfDefs , 
 Functions functions ) 
 { 
 - this ( name , strategyClass , strategyOptions , durableWrites , cfDefs , new UTMetaData ( ) , functions ) ; 
 + this ( name , strategyClass , strategyOptions , durableWrites , cfDefs , Types . none ( ) , functions ) ; 
 } 
 
 private KSMetaData ( String name , 
 @ @ - 69 , 7 + 70 , 7 @ @ public final class KSMetaData 
 Map < String , String > strategyOptions , 
 boolean durableWrites , 
 Iterable < CFMetaData > cfDefs , 
 - UTMetaData userTypes , 
 + Types types , 
 Functions functions ) 
 { 
 this . name = name ; 
 @ @ - 80 , 7 + 81 , 7 @ @ public final class KSMetaData 
 cfmap . put ( cfm . cfName , cfm ) ; 
 this . cfMetaData = Collections . unmodifiableMap ( cfmap ) ; 
 this . durableWrites = durableWrites ; 
 - this . userTypes = userTypes ; 
 + this . types = types ; 
 this . functions = functions ; 
 } 
 
 @ @ - 96 , 7 + 97 , 7 @ @ public final class KSMetaData 
 
 public static KSMetaData newKeyspace ( String name , Class < ? extends AbstractReplicationStrategy > strategyClass , Map < String , String > options , boolean durablesWrites , Iterable < CFMetaData > cfDefs ) 
 { 
 - return new KSMetaData ( name , strategyClass , options , durablesWrites , cfDefs , new UTMetaData ( ) , Functions . none ( ) ) ; 
 + return new KSMetaData ( name , strategyClass , options , durablesWrites , cfDefs , Types . none ( ) , Functions . none ( ) ) ; 
 } 
 
 public KSMetaData cloneWithTableRemoved ( CFMetaData table ) 
 @ @ - 105 , 7 + 106 , 7 @ @ public final class KSMetaData 
 List < CFMetaData > newTables = new ArrayList < > ( cfMetaData ( ) . values ( ) ) ; 
 newTables . remove ( table ) ; 
 assert newTables . size ( ) = = cfMetaData ( ) . size ( ) - 1 ; 
 - return cloneWith ( newTables , userTypes , functions ) ; 
 + return cloneWith ( newTables , types , functions ) ; 
 } 
 
 public KSMetaData cloneWithTableAdded ( CFMetaData table ) 
 @ @ - 114 , 17 + 115 , 22 @ @ public final class KSMetaData 
 List < CFMetaData > newTables = new ArrayList < > ( cfMetaData ( ) . values ( ) ) ; 
 newTables . add ( table ) ; 
 assert newTables . size ( ) = = cfMetaData ( ) . size ( ) + 1 ; 
 - return cloneWith ( newTables , userTypes , functions ) ; 
 + return cloneWith ( newTables , types , functions ) ; 
 } 
 
 - public KSMetaData cloneWith ( Iterable < CFMetaData > tables , UTMetaData types , Functions functions ) 
 + public KSMetaData cloneWith ( Iterable < CFMetaData > tables , Types types , Functions functions ) 
 { 
 return new KSMetaData ( name , strategyClass , strategyOptions , durableWrites , tables , types , functions ) ; 
 } 
 
 + public KSMetaData cloneWith ( Types types ) 
 + { 
 + return new KSMetaData ( name , strategyClass , strategyOptions , durableWrites , cfMetaData . values ( ) , types , functions ) ; 
 + } 
 + 
 public KSMetaData cloneWith ( Functions functions ) 
 { 
 - return new KSMetaData ( name , strategyClass , strategyOptions , durableWrites , cfMetaData . values ( ) , userTypes , functions ) ; 
 + return new KSMetaData ( name , strategyClass , strategyOptions , durableWrites , cfMetaData . values ( ) , types , functions ) ; 
 } 
 
 public static KSMetaData testMetadata ( String name , Class < ? extends AbstractReplicationStrategy > strategyClass , Map < String , String > strategyOptions , CFMetaData . . . cfDefs ) 
 @ @ - 140 , 7 + 146 , 7 @ @ public final class KSMetaData 
 @ Override 
 public int hashCode ( ) 
 { 
 - return Objects . hashCode ( name , strategyClass , strategyOptions , cfMetaData , durableWrites , functions , userTypes ) ; 
 + return Objects . hashCode ( name , strategyClass , strategyOptions , cfMetaData , durableWrites , functions , types ) ; 
 } 
 
 @ Override 
 @ @ - 160 , 7 + 166 , 7 @ @ public final class KSMetaData 
 & & Objects . equal ( cfMetaData , other . cfMetaData ) 
 & & Objects . equal ( durableWrites , other . durableWrites ) 
 & & Objects . equal ( functions , other . functions ) 
 - & & Objects . equal ( userTypes , other . userTypes ) ; 
 + & & Objects . equal ( types , other . types ) ; 
 } 
 
 public Map < String , CFMetaData > cfMetaData ( ) 
 @ @ - 178 , 7 + 184 , 7 @ @ public final class KSMetaData 
 . add ( " cfMetaData " , cfMetaData ) 
 . add ( " durableWrites " , durableWrites ) 
 . add ( " functions " , functions ) 
 - . add ( " userTypes " , userTypes ) 
 + . add ( " types " , types ) 
 . toString ( ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / config / Schema . java b / src / java / org / apache / cassandra / config / Schema . java 
 index 07684ad . . ebf83a9 100644 
 - - - a / src / java / org / apache / cassandra / config / Schema . java 
 + + + b / src / java / org / apache / cassandra / config / Schema . java 
 @ @ - 453 , 10 + 453 , 9 @ @ public class Schema 
 { 
 KSMetaData oldKsm = getKSMetaData ( ksName ) ; 
 assert oldKsm ! = null ; 
 - KSMetaData newKsm = LegacySchemaTables . createKeyspaceFromName ( ksName ) . cloneWith ( oldKsm . cfMetaData ( ) . values ( ) , oldKsm . userTypes , oldKsm . functions ) ; 
 - 
 + KSMetaData newKsm = LegacySchemaTables . createKeyspaceFromName ( ksName ) 
 + . cloneWith ( oldKsm . cfMetaData ( ) . values ( ) , oldKsm . types , oldKsm . functions ) ; 
 setKeyspaceDefinition ( newKsm ) ; 
 - 
 Keyspace . open ( ksName ) . createReplicationStrategy ( newKsm ) ; 
 MigrationManager . instance . notifyUpdateKeyspace ( newKsm ) ; 
 } 
 @ @ - 551 , 35 + 550 , 28 @ @ public class Schema 
 
 public void addType ( UserType ut ) 
 { 
 - KSMetaData ksm = getKSMetaData ( ut . keyspace ) ; 
 - assert ksm ! = null ; 
 - 
 - logger . info ( " Loading { } " , ut ) ; 
 - 
 - ksm . userTypes . addType ( ut ) ; 
 - 
 + KSMetaData oldKsm = getKSMetaData ( ut . keyspace ) ; 
 + assert oldKsm ! = null ; 
 + KSMetaData newKsm = oldKsm . cloneWith ( oldKsm . types . with ( ut ) ) ; 
 + setKeyspaceDefinition ( newKsm ) ; 
 MigrationManager . instance . notifyCreateUserType ( ut ) ; 
 } 
 
 public void updateType ( UserType ut ) 
 { 
 - KSMetaData ksm = getKSMetaData ( ut . keyspace ) ; 
 - assert ksm ! = null ; 
 - 
 - logger . info ( " Updating { } " , ut ) ; 
 - 
 - ksm . userTypes . addType ( ut ) ; 
 - 
 + KSMetaData oldKsm = getKSMetaData ( ut . keyspace ) ; 
 + assert oldKsm ! = null ; 
 + KSMetaData newKsm = oldKsm . cloneWith ( oldKsm . types . without ( ut . name ) . with ( ut ) ) ; 
 + setKeyspaceDefinition ( newKsm ) ; 
 MigrationManager . instance . notifyUpdateUserType ( ut ) ; 
 } 
 
 public void dropType ( UserType ut ) 
 { 
 - KSMetaData ksm = getKSMetaData ( ut . keyspace ) ; 
 - assert ksm ! = null ; 
 - 
 - ksm . userTypes . removeType ( ut ) ; 
 - 
 + KSMetaData oldKsm = getKSMetaData ( ut . keyspace ) ; 
 + assert oldKsm ! = null ; 
 + KSMetaData newKsm = oldKsm . cloneWith ( oldKsm . types . without ( ut . name ) ) ; 
 + setKeyspaceDefinition ( newKsm ) ; 
 MigrationManager . instance . notifyDropUserType ( ut ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / config / UTMetaData . java b / src / java / org / apache / cassandra / config / UTMetaData . java 
 deleted file mode 100644 
 index 08cedee . . 0000000 
 - - - a / src / java / org / apache / cassandra / config / UTMetaData . java 
 + + + / dev / null 
 @ @ - 1 , 76 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . config ; 
 - 
 - import java . nio . ByteBuffer ; 
 - import java . util . * ; 
 - 
 - import org . apache . cassandra . db . marshal . * ; 
 - 
 - / * * 
 - * Defined ( and loaded ) user types . 
 - * 
 - * In practice , because user types are global , we have only one instance of 
 - * this class that retrieve through the Schema class . 
 - * / 
 - public final class UTMetaData 
 - { 
 - private final Map < ByteBuffer , UserType > userTypes ; 
 - 
 - public UTMetaData ( ) 
 - { 
 - this ( new HashMap < ByteBuffer , UserType > ( ) ) ; 
 - } 
 - 
 - public UTMetaData ( Map < ByteBuffer , UserType > types ) 
 - { 
 - this . userTypes = types ; 
 - } 
 - 
 - public UserType getType ( ByteBuffer typeName ) 
 - { 
 - return userTypes . get ( typeName ) ; 
 - } 
 - 
 - public Map < ByteBuffer , UserType > getAllTypes ( ) 
 - { 
 - / / Copy to avoid concurrent modification while iterating . Not intended to be called on a critical path anyway 
 - return new HashMap < > ( userTypes ) ; 
 - } 
 - 
 - / / This is * not * thread safe but is only called in Schema that is synchronized . 
 - public void addType ( UserType type ) 
 - { 
 - UserType old = userTypes . get ( type . name ) ; 
 - assert old = = null | | type . isCompatibleWith ( old ) ; 
 - userTypes . put ( type . name , type ) ; 
 - } 
 - 
 - / / Same remarks than for addType 
 - public void removeType ( UserType type ) 
 - { 
 - userTypes . remove ( type . name ) ; 
 - } 
 - 
 - public boolean equals ( Object that ) 
 - { 
 - if ( ! ( that instanceof UTMetaData ) ) 
 - return false ; 
 - return userTypes . equals ( ( ( UTMetaData ) that ) . userTypes ) ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / CQL3Type . java b / src / java / org / apache / cassandra / cql3 / CQL3Type . java 
 index 290f4cb . . c24f6fe 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / CQL3Type . java 
 + + + b / src / java / org / apache / cassandra / cql3 / CQL3Type . java 
 @ @ - 528 , 7 + 528 , 7 @ @ public interface CQL3Type 
 KSMetaData ksm = Schema . instance . getKSMetaData ( name . getKeyspace ( ) ) ; 
 if ( ksm = = null ) 
 throw new InvalidRequestException ( " Unknown keyspace " + name . getKeyspace ( ) ) ; 
 - UserType type = ksm . userTypes . getType ( name . getUserTypeName ( ) ) ; 
 + UserType type = ksm . types . getNullable ( name . getUserTypeName ( ) ) ; 
 if ( type = = null ) 
 throw new InvalidRequestException ( " Unknown type " + name ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 index 77e4afe . . 14a8ff2 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDFunction . java 
 @ @ - 295 , 7 + 295 , 7 @ @ public abstract class UDFunction extends AbstractFunction implements ScalarFunct 
 KSMetaData ksm = Schema . instance . getKSMetaData ( ksName ) ; 
 assert ksm ! = null ; 
 
 - org . apache . cassandra . db . marshal . UserType ut = ksm . userTypes . getType ( ByteBufferUtil . bytes ( typeName ) ) ; 
 + org . apache . cassandra . db . marshal . UserType ut = ksm . types . get ( ByteBufferUtil . bytes ( typeName ) ) . get ( ) ; 
 
 DataType newUserType = UDHelper . driverType ( ut ) ; 
 argDataTypes [ i ] = newUserType ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java 
 index 4e78bfc . . 0fb084e 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java 
 @ @ - 95 , 10 + 95 , 9 @ @ public abstract class AlterTypeStatement extends SchemaAlteringStatement 
 if ( ksm = = null ) 
 throw new InvalidRequestException ( String . format ( " Cannot alter type in unknown keyspace % s " , name . getKeyspace ( ) ) ) ; 
 
 - UserType toUpdate = ksm . userTypes . getType ( name . getUserTypeName ( ) ) ; 
 - / / Shouldn ' t happen , unless we race with a drop 
 - if ( toUpdate = = null ) 
 - throw new InvalidRequestException ( String . format ( " No user type named % s exists . " , name ) ) ; 
 + UserType toUpdate = 
 + ksm . types . get ( name . getUserTypeName ( ) ) 
 + . orElseThrow ( ( ) - > new InvalidRequestException ( String . format ( " No user type named % s exists . " , name ) ) ) ; 
 
 UserType updated = makeUpdatedType ( toUpdate ) ; 
 
 @ @ - 117 , 7 + 116 , 7 @ @ public abstract class AlterTypeStatement extends SchemaAlteringStatement 
 } 
 
 / / Other user types potentially using the updated type 
 - for ( UserType ut : ksm . userTypes . getAllTypes ( ) . values ( ) ) 
 + for ( UserType ut : ksm . types ) 
 { 
 / / Re - updating the type we ' ve just updated would be harmless but useless so we avoid it . 
 / / Besides , we use the occasion to drop the old version of the type if it ' s a type rename 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTypeStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTypeStatement . java 
 index 82c2808 . . 97f3ed6 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTypeStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTypeStatement . java 
 @ @ - 69 , 7 + 69 , 7 @ @ public class CreateTypeStatement extends SchemaAlteringStatement 
 if ( ksm = = null ) 
 throw new InvalidRequestException ( String . format ( " Cannot add type in unknown keyspace % s " , name . getKeyspace ( ) ) ) ; 
 
 - if ( ksm . userTypes . getType ( name . getUserTypeName ( ) ) ! = null & & ! ifNotExists ) 
 + if ( ksm . types . get ( name . getUserTypeName ( ) ) . isPresent ( ) & & ! ifNotExists ) 
 throw new InvalidRequestException ( String . format ( " A user type of name % s already exists " , name ) ) ; 
 
 for ( CQL3Type . Raw type : columnTypes ) 
 @ @ - 122 , 7 + 122 , 7 @ @ public class CreateTypeStatement extends SchemaAlteringStatement 
 assert ksm ! = null ; / / should haven ' t validate otherwise 
 
 / / Can happen with ifNotExists 
 - if ( ksm . userTypes . getType ( name . getUserTypeName ( ) ) ! = null ) 
 + if ( ksm . types . get ( name . getUserTypeName ( ) ) . isPresent ( ) ) 
 return false ; 
 
 UserType type = createType ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropTypeStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropTypeStatement . java 
 index 5edac58 . . ddb0959 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / DropTypeStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / DropTypeStatement . java 
 @ @ - 57 , 8 + 57 , 7 @ @ public class DropTypeStatement extends SchemaAlteringStatement 
 if ( ksm = = null ) 
 throw new InvalidRequestException ( String . format ( " Cannot drop type in unknown keyspace % s " , name . getKeyspace ( ) ) ) ; 
 
 - UserType old = ksm . userTypes . getType ( name . getUserTypeName ( ) ) ; 
 - if ( old = = null ) 
 + if ( ! ksm . types . get ( name . getUserTypeName ( ) ) . isPresent ( ) ) 
 { 
 if ( ifExists ) 
 return ; 
 @ @ - 83 , 7 + 82 , 7 @ @ public class DropTypeStatement extends SchemaAlteringStatement 
 throw new InvalidRequestException ( String . format ( " Cannot drop user type % s as it is still used by function % s " , name , function ) ) ; 
 } 
 
 - for ( UserType ut : ksm . userTypes . getAllTypes ( ) . values ( ) ) 
 + for ( UserType ut : ksm . types ) 
 if ( ! ut . name . equals ( name . getUserTypeName ( ) ) & & isUsedBy ( ut ) ) 
 throw new InvalidRequestException ( String . format ( " Cannot drop user type % s as it is still used by user type % s " , name , ut . asCQL3Type ( ) ) ) ; 
 
 @ @ - 140 , 7 + 139 , 7 @ @ public class DropTypeStatement extends SchemaAlteringStatement 
 KSMetaData ksm = Schema . instance . getKSMetaData ( name . getKeyspace ( ) ) ; 
 assert ksm ! = null ; 
 
 - UserType toDrop = ksm . userTypes . getType ( name . getUserTypeName ( ) ) ; 
 + UserType toDrop = ksm . types . getNullable ( name . getUserTypeName ( ) ) ; 
 / / Can be null with ifExists 
 if ( toDrop = = null ) 
 return false ; 
 diff - - git a / src / java / org / apache / cassandra / schema / LegacySchemaTables . java b / src / java / org / apache / cassandra / schema / LegacySchemaTables . java 
 index 42c67db . . 4077700 100644 
 - - - a / src / java / org / apache / cassandra / schema / LegacySchemaTables . java 
 + + + b / src / java / org / apache / cassandra / schema / LegacySchemaTables . java 
 @ @ - 661 , 8 + 661 , 8 @ @ public final class LegacySchemaTables 
 
 if ( withTablesAndTypesAndFunctions ) 
 { 
 - keyspace . userTypes . getAllTypes ( ) . values ( ) . forEach ( type - > addTypeToSchemaMutation ( type , timestamp , mutation ) ) ; 
 keyspace . cfMetaData ( ) . values ( ) . forEach ( table - > addTableToSchemaMutation ( table , timestamp , true , mutation ) ) ; 
 + keyspace . types . forEach ( type - > addTypeToSchemaMutation ( type , timestamp , mutation ) ) ; 
 keyspace . functions . udfs ( ) . forEach ( udf - > addFunctionToSchemaMutation ( udf , timestamp , mutation ) ) ; 
 keyspace . functions . udas ( ) . forEach ( uda - > addAggregateToSchemaMutation ( uda , timestamp , mutation ) ) ; 
 } 
 @ @ - 687 , 12 + 687 , 10 @ @ public final class LegacySchemaTables 
 RowIterator seriazliedAggregates ) 
 { 
 Collection < CFMetaData > tables = createTablesFromTablesPartition ( serializedTables ) ; 
 - UTMetaData types = new UTMetaData ( createTypesFromPartition ( serializedTypes ) ) ; 
 - 
 + Types types = createTypesFromPartition ( serializedTypes ) ; 
 Collection < UDFunction > udfs = createFunctionsFromFunctionsPartition ( serializedFunctions ) ; 
 Collection < UDAggregate > udas = createAggregatesFromAggregatesPartition ( seriazliedAggregates ) ; 
 Functions functions = org . apache . cassandra . schema . Functions . builder ( ) . add ( udfs ) . add ( udas ) . build ( ) ; 
 - 
 return createKeyspaceFromSchemaPartition ( serializedKeyspace ) . cloneWith ( tables , types , functions ) ; 
 } 
 
 @ @ - 759 , 16 + 757 , 12 @ @ public final class LegacySchemaTables 
 return RowUpdateBuilder . deleteRow ( Usertypes , timestamp , mutation , type . name ) ; 
 } 
 
 - private static Map < ByteBuffer , UserType > createTypesFromPartition ( RowIterator partition ) 
 + private static Types createTypesFromPartition ( RowIterator partition ) 
 { 
 String query = String . format ( " SELECT * FROM % s . % s " , SystemKeyspace . NAME , USERTYPES ) ; 
 - Map < ByteBuffer , UserType > types = new HashMap < > ( ) ; 
 - for ( UntypedResultSet . Row row : QueryProcessor . resultify ( query , partition ) ) 
 - { 
 - UserType type = createTypeFromRow ( row ) ; 
 - types . put ( type . name , type ) ; 
 - } 
 - return types ; 
 + Types . Builder types = Types . builder ( ) ; 
 + QueryProcessor . resultify ( query , partition ) . forEach ( row - > types . add ( createTypeFromRow ( row ) ) ) ; 
 + return types . build ( ) ; 
 } 
 
 private static UserType createTypeFromRow ( UntypedResultSet . Row row ) 
 diff - - git a / src / java / org / apache / cassandra / schema / Types . java b / src / java / org / apache / cassandra / schema / Types . java 
 new file mode 100644 
 index 0000000 . . 982e3f5 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / schema / Types . java 
 @ @ - 0 , 0 + 1 , 147 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . schema ; 
 + 
 + import java . nio . ByteBuffer ; 
 + import java . util . Iterator ; 
 + import java . util . Optional ; 
 + 
 + import javax . annotation . Nullable ; 
 + 
 + import com . google . common . collect . ImmutableMap ; 
 + 
 + import org . apache . cassandra . db . marshal . UserType ; 
 + 
 + import static com . google . common . collect . Iterables . filter ; 
 + 
 + / * * 
 + * An immutable container for a keyspace ' s UDTs . 
 + * / 
 + public final class Types implements Iterable < UserType > 
 + { 
 + private final ImmutableMap < ByteBuffer , UserType > types ; 
 + 
 + private Types ( Builder builder ) 
 + { 
 + types = builder . types . build ( ) ; 
 + } 
 + 
 + public static Builder builder ( ) 
 + { 
 + return new Builder ( ) ; 
 + } 
 + 
 + public static Types none ( ) 
 + { 
 + return builder ( ) . build ( ) ; 
 + } 
 + 
 + public Iterator < UserType > iterator ( ) 
 + { 
 + return types . values ( ) . iterator ( ) ; 
 + } 
 + 
 + / * * 
 + * Get the type with the specified name 
 + * 
 + * @ param name a non - qualified type name 
 + * @ return an empty { @ link Optional } if the type name is not found ; a non - empty optional of { @ link UserType } otherwise 
 + * / 
 + public Optional < UserType > get ( ByteBuffer name ) 
 + { 
 + return Optional . ofNullable ( types . get ( name ) ) ; 
 + } 
 + 
 + / * * 
 + * Get the type with the specified name 
 + * 
 + * @ param name a non - qualified type name 
 + * @ return null if the type name is not found ; the found { @ link UserType } otherwise 
 + * / 
 + @ Nullable 
 + public UserType getNullable ( ByteBuffer name ) 
 + { 
 + return types . get ( name ) ; 
 + } 
 + 
 + / * * 
 + * Create a Types instance with the provided type added 
 + * / 
 + public Types with ( UserType type ) 
 + { 
 + if ( get ( type . name ) . isPresent ( ) ) 
 + throw new IllegalStateException ( String . format ( " Type % s already exists " , type . name ) ) ; 
 + 
 + return builder ( ) . add ( this ) . add ( type ) . build ( ) ; 
 + } 
 + 
 + / * * 
 + * Creates a Types instance with the type with the provided name removed 
 + * / 
 + public Types without ( ByteBuffer name ) 
 + { 
 + UserType type = 
 + get ( name ) . orElseThrow ( ( ) - > new IllegalStateException ( String . format ( " Type % s doesn ' t exists " , name ) ) ) ; 
 + 
 + return builder ( ) . add ( filter ( this , t - > t ! = type ) ) . build ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean equals ( Object o ) 
 + { 
 + return this = = o | | ( o instanceof Types & & types . equals ( ( ( Types ) o ) . types ) ) ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return types . hashCode ( ) ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return types . values ( ) . toString ( ) ; 
 + } 
 + 
 + public static final class Builder 
 + { 
 + final ImmutableMap . Builder < ByteBuffer , UserType > types = new ImmutableMap . Builder < > ( ) ; 
 + 
 + private Builder ( ) 
 + { 
 + } 
 + 
 + public Types build ( ) 
 + { 
 + return new Types ( this ) ; 
 + } 
 + 
 + public Builder add ( UserType type ) 
 + { 
 + types . put ( type . name , type ) ; 
 + return this ; 
 + } 
 + 
 + public Builder add ( Iterable < UserType > types ) 
 + { 
 + types . forEach ( this : : add ) ; 
 + return this ; 
 + } 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / selection / SelectionColumnMappingTest . java b / test / unit / org / apache / cassandra / cql3 / selection / SelectionColumnMappingTest . java 
 index 2f1d361 . . 971176a 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / selection / SelectionColumnMappingTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / selection / SelectionColumnMappingTest . java 
 @ @ - 46 , 7 + 46 , 7 @ @ public class SelectionColumnMappingTest extends CQLTester 
 " v1 int , " + 
 " v2 ascii , " + 
 " v3 frozen < " + typeName + " > ) " ) ; 
 - userType = Schema . instance . getKSMetaData ( KEYSPACE ) . userTypes . getType ( ByteBufferUtil . bytes ( typeName ) ) ; 
 + userType = Schema . instance . getKSMetaData ( KEYSPACE ) . types . get ( ByteBufferUtil . bytes ( typeName ) ) . get ( ) ; 
 functionName = createFunction ( KEYSPACE , " int , ascii " , 
 " CREATE FUNCTION % s ( i int , a ascii ) " + 
 " CALLED ON NULL INPUT " +

NEAREST DIFF:
diff - - git a / bin / cqlsh b / bin / cqlsh 
 index f984618 . . c242cf9 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 32 , 7 + 32 , 7 @ @ exit 1 
 from _ _ future _ _ import with _ statement 
 
 description = " CQL Shell for Apache Cassandra " 
 - version = " 2 . 2 . 0 " 
 + version = " 2 . 3 . 0 " 
 
 from StringIO import StringIO 
 from itertools import groupby 
 @ @ - 112 , 6 + 112 , 7 @ @ HISTORY = os . path . expanduser ( os . path . join ( ' ~ ' , ' . cqlsh _ history ' ) ) 
 DEFAULT _ HOST = ' localhost ' 
 DEFAULT _ PORT = 9160 
 DEFAULT _ CQLVER = ' 2 ' 
 + DEFAULT _ TRANSPORT _ FACTORY = ' cqlshlib . tfactory . regular _ transport _ factory ' 
 
 epilog = " " " Connects to % ( DEFAULT _ HOST ) s : % ( DEFAULT _ PORT ) d by default . These 
 defaults can be changed by setting $ CQLSH _ HOST and / or $ CQLSH _ PORT . When a 
 @ @ - 128 , 8 + 129 , 9 @ @ parser . add _ option ( " - - no - color " , action = ' store _ false ' , dest = ' color ' , 
 parser . add _ option ( " - u " , " - - username " , help = " Authenticate as user . " ) 
 parser . add _ option ( " - p " , " - - password " , help = " Authenticate using password . " ) 
 parser . add _ option ( ' - k ' , ' - - keyspace ' , help = ' Authenticate to the given keyspace . ' ) 
 - parser . add _ option ( " - f " , " - - file " , 
 - help = " Execute commands from FILE , then exit " ) 
 + parser . add _ option ( " - f " , " - - file " , help = " Execute commands from FILE , then exit " ) 
 + parser . add _ option ( " - t " , " - - transport - factory " , 
 + help = " Use the provided Thrift transport factory function . " ) 
 parser . add _ option ( ' - - debug ' , action = ' store _ true ' , 
 help = ' Show additional debugging information ' ) 
 parser . add _ option ( ' - - cqlversion ' , default = DEFAULT _ CQLVER , 
 @ @ - 557 , 19 + 559 , 22 @ @ class Shell ( cmd . Cmd ) : 
 csv _ dialect _ defaults = dict ( delimiter = ' , ' , doublequote = False , 
 escapechar = ' \ \ ' , quotechar = ' " ' ) 
 
 - def _ _ init _ _ ( self , hostname , port , color = False , username = None , 
 - password = None , encoding = None , stdin = None , tty = True , 
 + def _ _ init _ _ ( self , hostname , port , transport _ factory , color = False , 
 + username = None , password = None , encoding = None , stdin = None , tty = True , 
 completekey = ' tab ' , use _ conn = None , cqlver = None , keyspace = None ) : 
 cmd . Cmd . _ _ init _ _ ( self , completekey = completekey ) 
 self . hostname = hostname 
 self . port = port 
 + self . transport _ factory = transport _ factory 
 self . username = username 
 self . password = password 
 self . keyspace = keyspace 
 if use _ conn is not None : 
 self . conn = use _ conn 
 else : 
 - self . conn = cql . connect ( hostname , port , user = username , password = password ) 
 + transport = transport _ factory ( hostname , port , os . environ , CONFIG _ FILE ) 
 + self . conn = cql . connect ( hostname , port , user = username , password = password , 
 + transport = transport ) 
 self . set _ expanded _ cql _ version ( cqlver ) 
 # we could set the keyspace through cql . connect ( ) , but as of 1 . 0 . 10 , 
 # it doesn ' t quote the keyspace for USE : ( 
 @ @ - 1794 , 9 + 1799 , 9 @ @ class Shell ( cmd . Cmd ) : 
 except IOError , e : 
 self . printerr ( ' Could not open % r : % s ' % ( fname , e ) ) 
 return 
 - subshell = Shell ( self . hostname , self . port , color = self . color , 
 - encoding = self . encoding , stdin = f , tty = False , 
 - use _ conn = self . conn , cqlver = self . cql _ version ) 
 + subshell = Shell ( self . hostname , self . port , self . transport _ factory , 
 + color = self . color , encoding = self . encoding , stdin = f , 
 + tty = False , use _ conn = self . conn , cqlver = self . cql _ version ) 
 subshell . cmdloop ( ) 
 f . close ( ) 
 
 @ @ - 2627 , 6 + 2632 , 21 @ @ def should _ use _ color ( ) : 
 pass 
 return True 
 
 + def load _ factory ( name ) : 
 + " " " 
 + Attempts to load a transport factory function given its fully qualified 
 + name , e . g . " cqlshlib . tfactory . regular _ transport _ factory " 
 + " " " 
 + parts = name . split ( ' . ' ) 
 + module = " . " . join ( parts [ : - 1 ] ) 
 + try : 
 + t = _ _ import _ _ ( module ) 
 + for part in parts [ 1 : ] : 
 + t = getattr ( t , part ) 
 + return t 
 + except ( ImportError , AttributeError ) : 
 + sys . exit ( " Can ' t locate transport factory function % s " % name ) 
 + 
 def read _ options ( cmdlineargs , environment ) : 
 configs = ConfigParser . SafeConfigParser ( ) 
 configs . read ( CONFIG _ FILE ) 
 @ @ - 2635 , 6 + 2655 , 8 @ @ def read _ options ( cmdlineargs , environment ) : 
 optvalues . username = option _ with _ default ( configs . get , ' authentication ' , ' username ' ) 
 optvalues . password = option _ with _ default ( configs . get , ' authentication ' , ' password ' ) 
 optvalues . keyspace = option _ with _ default ( configs . get , ' authentication ' , ' keyspace ' ) 
 + optvalues . transport _ factory = option _ with _ default ( configs . get , ' connection ' , ' factory ' , 
 + DEFAULT _ TRANSPORT _ FACTORY ) 
 optvalues . completekey = option _ with _ default ( configs . get , ' ui ' , ' completekey ' , ' tab ' ) 
 optvalues . color = option _ with _ default ( configs . getboolean , ' ui ' , ' color ' ) 
 optvalues . debug = False 
 @ @ - 2658 , 6 + 2680 , 8 @ @ def read _ options ( cmdlineargs , environment ) : 
 if options . file is not None : 
 options . tty = False 
 
 + options . transport _ factory = load _ factory ( options . transport _ factory ) 
 + 
 if optvalues . color in ( True , False ) : 
 options . color = optvalues . color 
 else : 
 @ @ - 2725 , 6 + 2749 , 7 @ @ def main ( options , hostname , port ) : 
 try : 
 shell = Shell ( hostname , 
 port , 
 + options . transport _ factory , 
 color = options . color , 
 username = options . username , 
 password = options . password , 
 diff - - git a / lib / cql - internal - only - 1 . 0 . 10 - 4610 . zip b / lib / cql - internal - only - 1 . 0 . 10 - 4610 . zip 
 new file mode 100644 
 index 0000000 . . c98101d 
 Binary files / dev / null and b / lib / cql - internal - only - 1 . 0 . 10 - 4610 . zip differ 
 diff - - git a / lib / cql - internal - only - 1 . 0 . 10 . zip b / lib / cql - internal - only - 1 . 0 . 10 . zip 
 deleted file mode 100644 
 index c4ca8f2 . . 0000000 
 Binary files a / lib / cql - internal - only - 1 . 0 . 10 . zip and / dev / null differ 
 diff - - git a / pylib / cqlshlib / tfactory . py b / pylib / cqlshlib / tfactory . py 
 new file mode 100644 
 index 0000000 . . d16c8e7 
 - - - / dev / null 
 + + + b / pylib / cqlshlib / tfactory . py 
 @ @ - 0 , 0 + 1 , 32 @ @ 
 + # Licensed to the Apache Software Foundation ( ASF ) under one 
 + # or more contributor license agreements . See the NOTICE file 
 + # distributed with this work for additional information 
 + # regarding copyright ownership . The ASF licenses this file 
 + # to you under the Apache License , Version 2 . 0 ( the 
 + # " License " ) ; you may not use this file except in compliance 
 + # with the License . You may obtain a copy of the License at 
 + # 
 + # http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + # 
 + # Unless required by applicable law or agreed to in writing , software 
 + # distributed under the License is distributed on an " AS IS " BASIS , 
 + # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + # See the License for the specific language governing permissions and 
 + # limitations under the License . 
 + 
 + from thrift . transport import TSocket , TTransport 
 + 
 + def regular _ transport _ factory ( host , port , env , config _ file ) : 
 + " " " 
 + Basic unencrypted Thrift transport factory function . 
 + Returns instantiated Thrift transport for use with cql . Connection . 
 + 
 + Params : 
 + * host . . . . . . . . . : hostname of Cassandra node . 
 + * port . . . . . . . . . : port number to connect to . 
 + * env . . . . . . . . . . : environment variables ( os . environ ) - not used by this implementation . 
 + * config _ file . . : path to cqlsh config file - not used by this implementation . 
 + " " " 
 + socket = TSocket . TSocket ( host , port ) 
 + socket . open ( ) 
 + return TTransport . TFramedTransport ( socket )
