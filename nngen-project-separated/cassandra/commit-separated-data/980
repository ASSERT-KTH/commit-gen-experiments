BLEU SCORE: 0.08745825313180632

TEST MSG: Fix broken BTreeRow . hashCode
GENERATED MSG: merge from 0 . 4 branch

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / rows / AbstractRow . java b / src / java / org / apache / cassandra / db / rows / AbstractRow . java <nl> index 0295e2e . . 59addeb 100644 <nl> - - - a / src / java / org / apache / cassandra / db / rows / AbstractRow . java <nl> + + + b / src / java / org / apache / cassandra / db / rows / AbstractRow . java <nl> @ @ - 178 , 7 + 178 , 7 @ @ public abstract class AbstractRow extends AbstractCollection < ColumnData > impleme <nl> @ Override <nl> public int hashCode ( ) <nl> { <nl> - int hash = Objects . hash ( clustering ( ) , columns ( ) , primaryKeyLivenessInfo ( ) , deletion ( ) ) ; <nl> + int hash = Objects . hash ( clustering ( ) , primaryKeyLivenessInfo ( ) , deletion ( ) ) ; <nl> for ( ColumnData cd : this ) <nl> hash + = 31 * cd . hashCode ( ) ; <nl> return hash ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / RowTest . java b / test / unit / org / apache / cassandra / db / RowTest . java <nl> index 0af183c . . e3f4884 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RowTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RowTest . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> package org . apache . cassandra . db ; <nl> <nl> import java . io . IOException ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> <nl> import com . google . common . collect . ImmutableList ; <nl> import org . junit . Before ; <nl> @ @ - 165 , 6 + 167 , 24 @ @ public class RowTest <nl> Util . assertEmpty ( Util . cmd ( cfs , dk ) . includeRow ( " c1 " ) . withNowInSeconds ( nowInSeconds + ttl + 1 ) . build ( ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testHashCode ( ) <nl> + { <nl> + ColumnDefinition defA = cfm . getColumnDefinition ( new ColumnIdentifier ( " a " , true ) ) ; <nl> + ColumnDefinition defB = cfm . getColumnDefinition ( new ColumnIdentifier ( " b " , true ) ) ; <nl> + <nl> + Row . Builder builder = BTreeRow . unsortedBuilder ( nowInSeconds ) ; <nl> + builder . newRow ( cfm . comparator . make ( " c1 " ) ) ; <nl> + writeSimpleCellValue ( builder , cfm , defA , " a1 " , 0 ) ; <nl> + writeSimpleCellValue ( builder , cfm , defA , " a2 " , 1 ) ; <nl> + writeSimpleCellValue ( builder , cfm , defB , " b1 " , 1 ) ; <nl> + Row row = builder . build ( ) ; <nl> + <nl> + Map < Row , Integer > map = new HashMap < > ( ) ; <nl> + map . put ( row , 1 ) ; <nl> + assertEquals ( Integer . valueOf ( 1 ) , map . get ( row ) ) ; <nl> + } <nl> + <nl> private void assertRangeTombstoneMarkers ( Slice . Bound start , Slice . Bound end , DeletionTime deletionTime , Object [ ] expected ) <nl> { <nl> AbstractType clusteringType = ( AbstractType ) cfm . comparator . subtype ( 0 ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index af6e247 . . d0f7c20 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 175 , 16 + 175 , 17 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> for ( File file : sstableFiles ) <nl> { <nl> String filename = file . getAbsolutePath ( ) ; <nl> + SSTableReader sstable ; <nl> try <nl> { <nl> - SSTableReader sstable = SSTableReader . open ( filename ) ; <nl> - ssTables _ . put ( filename , sstable ) ; <nl> + sstable = SSTableReader . open ( filename ) ; <nl> } <nl> catch ( IOException ex ) <nl> { <nl> - logger _ . error ( " Corrupt file " + filename , ex ) ; <nl> - FileUtils . delete ( filename ) ; <nl> + logger _ . error ( " Corrupt file " + filename + " ; skipped " , ex ) ; <nl> + continue ; <nl> } <nl> + ssTables _ . put ( filename , sstable ) ; <nl> } <nl> <nl> / / submit initial check - for - compaction request <nl> @ @ - 637 , 7 + 638 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> / * it ' s ok if compaction gets submitted multiple times while one is already in process . <nl> worst that happens is , compactor will count the sstable files and decide there are <nl> not enough to bother with . * / <nl> - if ( ssTableCount > = MinorCompactionManager . COMPACTION _ THRESHOLD ) <nl> + if ( ssTableCount > = MinorCompactionManager . MINCOMPACTION _ THRESHOLD ) <nl> { <nl> if ( logger _ . isDebugEnabled ( ) ) <nl> logger _ . debug ( " Submitting " + columnFamily _ + " for compaction " ) ; <nl> @ @ - 668 , 7 + 669 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> / * <nl> * Group files of similar size into buckets . <nl> * / <nl> - static Set < List < String > > getCompactionBuckets ( List < String > files , long min ) <nl> + static Set < List < String > > getCompactionBuckets ( Iterable < String > files , long min ) <nl> { <nl> Map < List < String > , Long > buckets = new ConcurrentHashMap < List < String > , Long > ( ) ; <nl> for ( String fname : files ) <nl> @ @ - 710 , 32 + 711 , 17 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> / * <nl> * Break the files into buckets and then compact . <nl> * / <nl> - int doCompaction ( int threshold ) throws IOException <nl> + int doCompaction ( int minThreshold , int maxThreshold ) throws IOException <nl> { <nl> - List < String > files = new ArrayList < String > ( ssTables _ . keySet ( ) ) ; <nl> int filesCompacted = 0 ; <nl> - Set < List < String > > buckets = getCompactionBuckets ( files , 50L * 1024L * 1024L ) ; <nl> - for ( List < String > fileList : buckets ) <nl> + for ( List < String > files : getCompactionBuckets ( ssTables _ . keySet ( ) , 50L * 1024L * 1024L ) ) <nl> { <nl> - Collections . sort ( fileList , new FileNameComparator ( FileNameComparator . Ascending ) ) ; <nl> - if ( fileList . size ( ) < threshold ) <nl> + if ( files . size ( ) < minThreshold ) <nl> { <nl> continue ; <nl> } <nl> - / / For each bucket if it has crossed the threshhold do the compaction <nl> - / / In case of range compaction merge the counting bloom filters also . <nl> - files . clear ( ) ; <nl> - int count = 0 ; <nl> - for ( String file : fileList ) <nl> - { <nl> - files . add ( file ) ; <nl> - count + + ; <nl> - if ( count = = threshold ) <nl> - { <nl> - filesCompacted + = doFileCompaction ( files , BUFSIZE ) ; <nl> - break ; <nl> - } <nl> - } <nl> + Collections . sort ( files , new FileNameComparator ( FileNameComparator . Ascending ) ) ; <nl> + filesCompacted + = doFileCompaction ( files . subList ( 0 , Math . min ( files . size ( ) , maxThreshold ) ) , BUFSIZE ) ; <nl> } <nl> return filesCompacted ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / MinorCompactionManager . java b / src / java / org / apache / cassandra / db / MinorCompactionManager . java <nl> index c303dd9 . . 3fe2ed7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / MinorCompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / MinorCompactionManager . java <nl> @ @ - 21 , 11 + 21 , 8 @ @ package org . apache . cassandra . db ; <nl> import java . io . IOException ; <nl> import java . util . List ; <nl> import java . util . concurrent . Callable ; <nl> - import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Future ; <nl> - import java . util . concurrent . LinkedBlockingQueue ; <nl> import java . util . concurrent . ScheduledExecutorService ; <nl> - import java . util . concurrent . TimeUnit ; <nl> import java . util . concurrent . locks . Lock ; <nl> import java . util . concurrent . locks . ReentrantLock ; <nl> <nl> @ @ - 33 , 7 + 30 , 7 @ @ import org . apache . cassandra . concurrent . DebuggableScheduledThreadPoolExecutor ; <nl> import org . apache . cassandra . concurrent . ThreadFactoryImpl ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . net . EndPoint ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> + <nl> import org . apache . log4j . Logger ; <nl> <nl> class MinorCompactionManager <nl> @ @ - 42 , 7 + 39 , 8 @ @ class MinorCompactionManager <nl> private static Lock lock _ = new ReentrantLock ( ) ; <nl> private static Logger logger _ = Logger . getLogger ( MinorCompactionManager . class ) ; <nl> private static final long intervalInMins _ = 5 ; <nl> - static final int COMPACTION _ THRESHOLD = 4 ; / / compact this many sstables at a time <nl> + static final int MINCOMPACTION _ THRESHOLD = 4 ; / / compact this many sstables min at a time <nl> + static final int MAXCOMPACTION _ THRESHOLD = 32 ; / / compact this many sstables max at a time <nl> <nl> public static MinorCompactionManager instance ( ) <nl> { <nl> @ @ - 155 , 16 + 153 , 16 @ @ class MinorCompactionManager <nl> <nl> public Future < Integer > submit ( final ColumnFamilyStore columnFamilyStore ) <nl> { <nl> - return submit ( columnFamilyStore , COMPACTION _ THRESHOLD ) ; <nl> + return submit ( columnFamilyStore , MINCOMPACTION _ THRESHOLD , MAXCOMPACTION _ THRESHOLD ) ; <nl> } <nl> <nl> - Future < Integer > submit ( final ColumnFamilyStore columnFamilyStore , final int threshold ) <nl> + Future < Integer > submit ( final ColumnFamilyStore columnFamilyStore , final int minThreshold , final int maxThreshold ) <nl> { <nl> Callable < Integer > callable = new Callable < Integer > ( ) <nl> { <nl> public Integer call ( ) throws IOException <nl> { <nl> - return columnFamilyStore . doCompaction ( threshold ) ; <nl> + return columnFamilyStore . doCompaction ( minThreshold , maxThreshold ) ; <nl> } <nl> } ; <nl> return compactor _ . submit ( callable ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / CompactionsTest . java b / test / unit / org / apache / cassandra / db / CompactionsTest . java <nl> index fa6afd6 . . 1ab34e9 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CompactionsTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CompactionsTest . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . Future ; <nl> import java . util . Set ; <nl> import java . util . HashSet ; <nl> - import java . util . Arrays ; <nl> <nl> import org . junit . Test ; <nl> <nl> @ @ - 62 , 7 + 61 , 7 @ @ public class CompactionsTest extends CleanupHelper <nl> } <nl> if ( store . getSSTables ( ) . size ( ) > 1 ) <nl> { <nl> - store . doCompaction ( store . getSSTables ( ) . size ( ) ) ; <nl> + store . doCompaction ( 2 , store . getSSTables ( ) . size ( ) ) ; <nl> } <nl> assertEquals ( table . getColumnFamilyStore ( " Standard1 " ) . getKeyRange ( " " , " " , 10000 ) . keys . size ( ) , inserted . size ( ) ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / OneCompactionTest . java b / test / unit / org / apache / cassandra / db / OneCompactionTest . java <nl> index 41fd40a . . 61df9b2 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / OneCompactionTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / OneCompactionTest . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . Future ; <nl> import java . util . Set ; <nl> import java . util . HashSet ; <nl> - import java . util . Arrays ; <nl> <nl> import org . junit . Test ; <nl> <nl> @ @ - 47 , 7 + 46 , 7 @ @ public class OneCompactionTest <nl> store . forceBlockingFlush ( ) ; <nl> assertEquals ( inserted . size ( ) , table . getColumnFamilyStore ( columnFamilyName ) . getKeyRange ( " " , " " , 10000 ) . keys . size ( ) ) ; <nl> } <nl> - Future < Integer > ft = MinorCompactionManager . instance ( ) . submit ( store , 2 ) ; <nl> + Future < Integer > ft = MinorCompactionManager . instance ( ) . submit ( store , 2 , 32 ) ; <nl> ft . get ( ) ; <nl> assertEquals ( 1 , store . getSSTables ( ) . size ( ) ) ; <nl> assertEquals ( table . getColumnFamilyStore ( columnFamilyName ) . getKeyRange ( " " , " " , 10000 ) . keys . size ( ) , inserted . size ( ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java b / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java <nl> index 9839d0e . . e90e3e0 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java <nl> @ @ - 57 , 7 + 57 , 7 @ @ public class RemoveSuperColumnTest <nl> store . forceBlockingFlush ( ) ; <nl> validateRemoveTwoSources ( ) ; <nl> <nl> - Future < Integer > ft = MinorCompactionManager . instance ( ) . submit ( store , 2 ) ; <nl> + Future < Integer > ft = MinorCompactionManager . instance ( ) . submit ( store , 2 , 32 ) ; <nl> ft . get ( ) ; <nl> assertEquals ( 1 , store . getSSTables ( ) . size ( ) ) ; <nl> validateRemoveCompacted ( ) ; <nl> @ @ - 109 , 7 + 109 , 7 @ @ public class RemoveSuperColumnTest <nl> store . forceBlockingFlush ( ) ; <nl> validateRemoveWithNewData ( ) ; <nl> <nl> - Future < Integer > ft = MinorCompactionManager . instance ( ) . submit ( store , 2 ) ; <nl> + Future < Integer > ft = MinorCompactionManager . instance ( ) . submit ( store , 2 , 32 ) ; <nl> ft . get ( ) ; <nl> assertEquals ( 1 , store . getSSTables ( ) . size ( ) ) ; <nl> validateRemoveWithNewData ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / TableTest . java b / test / unit / org / apache / cassandra / db / TableTest . java <nl> index 0ef1146 . . 6abd7ad 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / TableTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / TableTest . java <nl> @ @ - 304 , 7 + 304 , 7 @ @ public class TableTest extends CleanupHelper <nl> / / compact so we have a big row with more than the minimum index count <nl> if ( cfStore . getSSTables ( ) . size ( ) > 1 ) <nl> { <nl> - cfStore . doCompaction ( cfStore . getSSTables ( ) . size ( ) ) ; <nl> + cfStore . doCompaction ( 2 , cfStore . getSSTables ( ) . size ( ) ) ; <nl> } <nl> SSTableReader sstable = cfStore . getSSTables ( ) . iterator ( ) . next ( ) ; <nl> long position = sstable . getPosition ( key ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / rows / AbstractRow . java b / src / java / org / apache / cassandra / db / rows / AbstractRow . java 
 index 0295e2e . . 59addeb 100644 
 - - - a / src / java / org / apache / cassandra / db / rows / AbstractRow . java 
 + + + b / src / java / org / apache / cassandra / db / rows / AbstractRow . java 
 @ @ - 178 , 7 + 178 , 7 @ @ public abstract class AbstractRow extends AbstractCollection < ColumnData > impleme 
 @ Override 
 public int hashCode ( ) 
 { 
 - int hash = Objects . hash ( clustering ( ) , columns ( ) , primaryKeyLivenessInfo ( ) , deletion ( ) ) ; 
 + int hash = Objects . hash ( clustering ( ) , primaryKeyLivenessInfo ( ) , deletion ( ) ) ; 
 for ( ColumnData cd : this ) 
 hash + = 31 * cd . hashCode ( ) ; 
 return hash ; 
 diff - - git a / test / unit / org / apache / cassandra / db / RowTest . java b / test / unit / org / apache / cassandra / db / RowTest . java 
 index 0af183c . . e3f4884 100644 
 - - - a / test / unit / org / apache / cassandra / db / RowTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RowTest . java 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 package org . apache . cassandra . db ; 
 
 import java . io . IOException ; 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 
 import com . google . common . collect . ImmutableList ; 
 import org . junit . Before ; 
 @ @ - 165 , 6 + 167 , 24 @ @ public class RowTest 
 Util . assertEmpty ( Util . cmd ( cfs , dk ) . includeRow ( " c1 " ) . withNowInSeconds ( nowInSeconds + ttl + 1 ) . build ( ) ) ; 
 } 
 
 + @ Test 
 + public void testHashCode ( ) 
 + { 
 + ColumnDefinition defA = cfm . getColumnDefinition ( new ColumnIdentifier ( " a " , true ) ) ; 
 + ColumnDefinition defB = cfm . getColumnDefinition ( new ColumnIdentifier ( " b " , true ) ) ; 
 + 
 + Row . Builder builder = BTreeRow . unsortedBuilder ( nowInSeconds ) ; 
 + builder . newRow ( cfm . comparator . make ( " c1 " ) ) ; 
 + writeSimpleCellValue ( builder , cfm , defA , " a1 " , 0 ) ; 
 + writeSimpleCellValue ( builder , cfm , defA , " a2 " , 1 ) ; 
 + writeSimpleCellValue ( builder , cfm , defB , " b1 " , 1 ) ; 
 + Row row = builder . build ( ) ; 
 + 
 + Map < Row , Integer > map = new HashMap < > ( ) ; 
 + map . put ( row , 1 ) ; 
 + assertEquals ( Integer . valueOf ( 1 ) , map . get ( row ) ) ; 
 + } 
 + 
 private void assertRangeTombstoneMarkers ( Slice . Bound start , Slice . Bound end , DeletionTime deletionTime , Object [ ] expected ) 
 { 
 AbstractType clusteringType = ( AbstractType ) cfm . comparator . subtype ( 0 ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index af6e247 . . d0f7c20 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 175 , 16 + 175 , 17 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 for ( File file : sstableFiles ) 
 { 
 String filename = file . getAbsolutePath ( ) ; 
 + SSTableReader sstable ; 
 try 
 { 
 - SSTableReader sstable = SSTableReader . open ( filename ) ; 
 - ssTables _ . put ( filename , sstable ) ; 
 + sstable = SSTableReader . open ( filename ) ; 
 } 
 catch ( IOException ex ) 
 { 
 - logger _ . error ( " Corrupt file " + filename , ex ) ; 
 - FileUtils . delete ( filename ) ; 
 + logger _ . error ( " Corrupt file " + filename + " ; skipped " , ex ) ; 
 + continue ; 
 } 
 + ssTables _ . put ( filename , sstable ) ; 
 } 
 
 / / submit initial check - for - compaction request 
 @ @ - 637 , 7 + 638 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 / * it ' s ok if compaction gets submitted multiple times while one is already in process . 
 worst that happens is , compactor will count the sstable files and decide there are 
 not enough to bother with . * / 
 - if ( ssTableCount > = MinorCompactionManager . COMPACTION _ THRESHOLD ) 
 + if ( ssTableCount > = MinorCompactionManager . MINCOMPACTION _ THRESHOLD ) 
 { 
 if ( logger _ . isDebugEnabled ( ) ) 
 logger _ . debug ( " Submitting " + columnFamily _ + " for compaction " ) ; 
 @ @ - 668 , 7 + 669 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 / * 
 * Group files of similar size into buckets . 
 * / 
 - static Set < List < String > > getCompactionBuckets ( List < String > files , long min ) 
 + static Set < List < String > > getCompactionBuckets ( Iterable < String > files , long min ) 
 { 
 Map < List < String > , Long > buckets = new ConcurrentHashMap < List < String > , Long > ( ) ; 
 for ( String fname : files ) 
 @ @ - 710 , 32 + 711 , 17 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 / * 
 * Break the files into buckets and then compact . 
 * / 
 - int doCompaction ( int threshold ) throws IOException 
 + int doCompaction ( int minThreshold , int maxThreshold ) throws IOException 
 { 
 - List < String > files = new ArrayList < String > ( ssTables _ . keySet ( ) ) ; 
 int filesCompacted = 0 ; 
 - Set < List < String > > buckets = getCompactionBuckets ( files , 50L * 1024L * 1024L ) ; 
 - for ( List < String > fileList : buckets ) 
 + for ( List < String > files : getCompactionBuckets ( ssTables _ . keySet ( ) , 50L * 1024L * 1024L ) ) 
 { 
 - Collections . sort ( fileList , new FileNameComparator ( FileNameComparator . Ascending ) ) ; 
 - if ( fileList . size ( ) < threshold ) 
 + if ( files . size ( ) < minThreshold ) 
 { 
 continue ; 
 } 
 - / / For each bucket if it has crossed the threshhold do the compaction 
 - / / In case of range compaction merge the counting bloom filters also . 
 - files . clear ( ) ; 
 - int count = 0 ; 
 - for ( String file : fileList ) 
 - { 
 - files . add ( file ) ; 
 - count + + ; 
 - if ( count = = threshold ) 
 - { 
 - filesCompacted + = doFileCompaction ( files , BUFSIZE ) ; 
 - break ; 
 - } 
 - } 
 + Collections . sort ( files , new FileNameComparator ( FileNameComparator . Ascending ) ) ; 
 + filesCompacted + = doFileCompaction ( files . subList ( 0 , Math . min ( files . size ( ) , maxThreshold ) ) , BUFSIZE ) ; 
 } 
 return filesCompacted ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / MinorCompactionManager . java b / src / java / org / apache / cassandra / db / MinorCompactionManager . java 
 index c303dd9 . . 3fe2ed7 100644 
 - - - a / src / java / org / apache / cassandra / db / MinorCompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / MinorCompactionManager . java 
 @ @ - 21 , 11 + 21 , 8 @ @ package org . apache . cassandra . db ; 
 import java . io . IOException ; 
 import java . util . List ; 
 import java . util . concurrent . Callable ; 
 - import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Future ; 
 - import java . util . concurrent . LinkedBlockingQueue ; 
 import java . util . concurrent . ScheduledExecutorService ; 
 - import java . util . concurrent . TimeUnit ; 
 import java . util . concurrent . locks . Lock ; 
 import java . util . concurrent . locks . ReentrantLock ; 
 
 @ @ - 33 , 7 + 30 , 7 @ @ import org . apache . cassandra . concurrent . DebuggableScheduledThreadPoolExecutor ; 
 import org . apache . cassandra . concurrent . ThreadFactoryImpl ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . net . EndPoint ; 
 - import org . apache . cassandra . service . StorageService ; 
 + 
 import org . apache . log4j . Logger ; 
 
 class MinorCompactionManager 
 @ @ - 42 , 7 + 39 , 8 @ @ class MinorCompactionManager 
 private static Lock lock _ = new ReentrantLock ( ) ; 
 private static Logger logger _ = Logger . getLogger ( MinorCompactionManager . class ) ; 
 private static final long intervalInMins _ = 5 ; 
 - static final int COMPACTION _ THRESHOLD = 4 ; / / compact this many sstables at a time 
 + static final int MINCOMPACTION _ THRESHOLD = 4 ; / / compact this many sstables min at a time 
 + static final int MAXCOMPACTION _ THRESHOLD = 32 ; / / compact this many sstables max at a time 
 
 public static MinorCompactionManager instance ( ) 
 { 
 @ @ - 155 , 16 + 153 , 16 @ @ class MinorCompactionManager 
 
 public Future < Integer > submit ( final ColumnFamilyStore columnFamilyStore ) 
 { 
 - return submit ( columnFamilyStore , COMPACTION _ THRESHOLD ) ; 
 + return submit ( columnFamilyStore , MINCOMPACTION _ THRESHOLD , MAXCOMPACTION _ THRESHOLD ) ; 
 } 
 
 - Future < Integer > submit ( final ColumnFamilyStore columnFamilyStore , final int threshold ) 
 + Future < Integer > submit ( final ColumnFamilyStore columnFamilyStore , final int minThreshold , final int maxThreshold ) 
 { 
 Callable < Integer > callable = new Callable < Integer > ( ) 
 { 
 public Integer call ( ) throws IOException 
 { 
 - return columnFamilyStore . doCompaction ( threshold ) ; 
 + return columnFamilyStore . doCompaction ( minThreshold , maxThreshold ) ; 
 } 
 } ; 
 return compactor _ . submit ( callable ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / CompactionsTest . java b / test / unit / org / apache / cassandra / db / CompactionsTest . java 
 index fa6afd6 . . 1ab34e9 100644 
 - - - a / test / unit / org / apache / cassandra / db / CompactionsTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CompactionsTest . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . Future ; 
 import java . util . Set ; 
 import java . util . HashSet ; 
 - import java . util . Arrays ; 
 
 import org . junit . Test ; 
 
 @ @ - 62 , 7 + 61 , 7 @ @ public class CompactionsTest extends CleanupHelper 
 } 
 if ( store . getSSTables ( ) . size ( ) > 1 ) 
 { 
 - store . doCompaction ( store . getSSTables ( ) . size ( ) ) ; 
 + store . doCompaction ( 2 , store . getSSTables ( ) . size ( ) ) ; 
 } 
 assertEquals ( table . getColumnFamilyStore ( " Standard1 " ) . getKeyRange ( " " , " " , 10000 ) . keys . size ( ) , inserted . size ( ) ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / OneCompactionTest . java b / test / unit / org / apache / cassandra / db / OneCompactionTest . java 
 index 41fd40a . . 61df9b2 100644 
 - - - a / test / unit / org / apache / cassandra / db / OneCompactionTest . java 
 + + + b / test / unit / org / apache / cassandra / db / OneCompactionTest . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . Future ; 
 import java . util . Set ; 
 import java . util . HashSet ; 
 - import java . util . Arrays ; 
 
 import org . junit . Test ; 
 
 @ @ - 47 , 7 + 46 , 7 @ @ public class OneCompactionTest 
 store . forceBlockingFlush ( ) ; 
 assertEquals ( inserted . size ( ) , table . getColumnFamilyStore ( columnFamilyName ) . getKeyRange ( " " , " " , 10000 ) . keys . size ( ) ) ; 
 } 
 - Future < Integer > ft = MinorCompactionManager . instance ( ) . submit ( store , 2 ) ; 
 + Future < Integer > ft = MinorCompactionManager . instance ( ) . submit ( store , 2 , 32 ) ; 
 ft . get ( ) ; 
 assertEquals ( 1 , store . getSSTables ( ) . size ( ) ) ; 
 assertEquals ( table . getColumnFamilyStore ( columnFamilyName ) . getKeyRange ( " " , " " , 10000 ) . keys . size ( ) , inserted . size ( ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java b / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java 
 index 9839d0e . . e90e3e0 100644 
 - - - a / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RemoveSuperColumnTest . java 
 @ @ - 57 , 7 + 57 , 7 @ @ public class RemoveSuperColumnTest 
 store . forceBlockingFlush ( ) ; 
 validateRemoveTwoSources ( ) ; 
 
 - Future < Integer > ft = MinorCompactionManager . instance ( ) . submit ( store , 2 ) ; 
 + Future < Integer > ft = MinorCompactionManager . instance ( ) . submit ( store , 2 , 32 ) ; 
 ft . get ( ) ; 
 assertEquals ( 1 , store . getSSTables ( ) . size ( ) ) ; 
 validateRemoveCompacted ( ) ; 
 @ @ - 109 , 7 + 109 , 7 @ @ public class RemoveSuperColumnTest 
 store . forceBlockingFlush ( ) ; 
 validateRemoveWithNewData ( ) ; 
 
 - Future < Integer > ft = MinorCompactionManager . instance ( ) . submit ( store , 2 ) ; 
 + Future < Integer > ft = MinorCompactionManager . instance ( ) . submit ( store , 2 , 32 ) ; 
 ft . get ( ) ; 
 assertEquals ( 1 , store . getSSTables ( ) . size ( ) ) ; 
 validateRemoveWithNewData ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / TableTest . java b / test / unit / org / apache / cassandra / db / TableTest . java 
 index 0ef1146 . . 6abd7ad 100644 
 - - - a / test / unit / org / apache / cassandra / db / TableTest . java 
 + + + b / test / unit / org / apache / cassandra / db / TableTest . java 
 @ @ - 304 , 7 + 304 , 7 @ @ public class TableTest extends CleanupHelper 
 / / compact so we have a big row with more than the minimum index count 
 if ( cfStore . getSSTables ( ) . size ( ) > 1 ) 
 { 
 - cfStore . doCompaction ( cfStore . getSSTables ( ) . size ( ) ) ; 
 + cfStore . doCompaction ( 2 , cfStore . getSSTables ( ) . size ( ) ) ; 
 } 
 SSTableReader sstable = cfStore . getSSTables ( ) . iterator ( ) . next ( ) ; 
 long position = sstable . getPosition ( key ) ;
