BLEU SCORE: 0.021476912089159066

TEST MSG: add calculation for arrayOffset ( ) and position ( ) , or asserts that the offset is 0
GENERATED MSG: fix more findbugs complaints . patch by Michael Greene ; reviewed by jbellis for CASSANDRA - 338

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 797e2c7 . . 7e1a18f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1476 , 12 + 1476 , 14 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> TabularDataSupport result = new TabularDataSupport ( COUNTER _ TYPE ) ; <nl> for ( Counter < ByteBuffer > counter : samplerResults . topK ) <nl> { <nl> - byte [ ] key = counter . getItem ( ) . array ( ) ; <nl> + / / Not duplicating the buffer for safety because AbstractSerializer and ByteBufferUtil . bytesToHex <nl> + / / don ' t modify position or limit <nl> + ByteBuffer key = counter . getItem ( ) ; <nl> result . put ( new CompositeDataSupport ( COUNTER _ COMPOSITE _ TYPE , COUNTER _ NAMES , new Object [ ] { <nl> - Hex . bytesToHex ( key ) , / / raw <nl> + ByteBufferUtil . bytesToHex ( key ) , / / raw <nl> counter . getCount ( ) , / / count <nl> counter . getError ( ) , / / error <nl> - metadata . getKeyValidator ( ) . getString ( ByteBuffer . wrap ( key ) ) } ) ) ; / / string <nl> + metadata . getKeyValidator ( ) . getString ( key ) } ) ) ; / / string <nl> } <nl> return new CompositeDataSupport ( SAMPLING _ RESULT , SAMPLER _ NAMES , new Object [ ] { <nl> samplerResults . cardinality , result } ) ; <nl> @ @ - 1561 , 7 + 1563 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> if ( ! manifestFile . getParentFile ( ) . exists ( ) ) <nl> manifestFile . getParentFile ( ) . mkdirs ( ) ; <nl> - <nl> + <nl> try ( PrintStream out = new PrintStream ( manifestFile ) ) <nl> { <nl> final JSONObject manifestJSON = new JSONObject ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / RangeTombstoneList . java b / src / java / org / apache / cassandra / db / RangeTombstoneList . java <nl> index c92a296 . . 841e6de 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RangeTombstoneList . java <nl> + + + b / src / java / org / apache / cassandra / db / RangeTombstoneList . java <nl> @ @ - 459 , 7 + 459 , 6 @ @ public class RangeTombstoneList implements Iterable < RangeTombstone > , IMeasurable <nl> { <nl> if ( idx < 0 | | idx < finish ) <nl> return endOfData ( ) ; <nl> - <nl> / / We want to make sure the range are stricly included within the queried slice as this <nl> / / make it easier to combine things when iterator over successive slices . This means that <nl> / / for the first and last range we might have to " cut " the range returned . <nl> diff - - git a / src / java / org / apache / cassandra / gms / TokenSerializer . java b / src / java / org / apache / cassandra / gms / TokenSerializer . java <nl> index 1404258 . . da4ee7d 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / TokenSerializer . java <nl> + + + b / src / java / org / apache / cassandra / gms / TokenSerializer . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ package org . apache . cassandra . gms ; <nl> <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . dht . Token ; <nl> - <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 37 , 9 + 37 , 9 @ @ public class TokenSerializer <nl> { <nl> for ( Token token : tokens ) <nl> { <nl> - byte [ ] bintoken = partitioner . getTokenFactory ( ) . toByteArray ( token ) . array ( ) ; <nl> - out . writeInt ( bintoken . length ) ; <nl> - out . write ( bintoken ) ; <nl> + ByteBuffer tokenBuffer = partitioner . getTokenFactory ( ) . toByteArray ( token ) ; <nl> + assert tokenBuffer . arrayOffset ( ) = = 0 ; <nl> + ByteBufferUtil . writeWithLength ( tokenBuffer . array ( ) , out ) ; <nl> } <nl> out . writeInt ( 0 ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / util / DataIntegrityMetadata . java b / src / java / org / apache / cassandra / io / util / DataIntegrityMetadata . java <nl> index 70cd860 . . ab750c8 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / DataIntegrityMetadata . java <nl> + + + b / src / java / org / apache / cassandra / io / util / DataIntegrityMetadata . java <nl> @ @ - 198 , 6 + 198 , 7 @ @ public class DataIntegrityMetadata <nl> { <nl> ByteBuffer byteBuffer = ByteBuffer . allocate ( 4 ) ; <nl> byteBuffer . putInt ( incrementalChecksumValue ) ; <nl> + assert byteBuffer . arrayOffset ( ) = = 0 ; <nl> fullChecksum . update ( byteBuffer . array ( ) , 0 , byteBuffer . array ( ) . length ) ; <nl> } <nl> incrementalChecksum . reset ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java b / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java <nl> index d9a290e . . af85c58 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java <nl> + + + b / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java <nl> @ @ - 106 , 6 + 106 , 7 @ @ public class DataOutputBuffer extends BufferedDataOutputStreamPlus <nl> <nl> public byte [ ] getData ( ) <nl> { <nl> + assert buffer . arrayOffset ( ) = = 0 ; <nl> return buffer . array ( ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / serializers / TypeSerializer . java b / src / java / org / apache / cassandra / serializers / TypeSerializer . java <nl> index cddef08 . . 9501397 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / TypeSerializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / TypeSerializer . java <nl> @ @ - 23 , 11 + 23 , 17 @ @ import java . nio . ByteBuffer ; <nl> public interface TypeSerializer < T > <nl> { <nl> public ByteBuffer serialize ( T value ) ; <nl> + <nl> + / * <nl> + * Does not modify the position or limit of the buffer even temporarily . <nl> + * / <nl> public T deserialize ( ByteBuffer bytes ) ; <nl> <nl> / * <nl> * Validate that the byte array is a valid sequence for the type this represents . <nl> * This guarantees deserialize ( ) can be called without errors . <nl> + * <nl> + * Does not modify the position or limit of the buffer even temporarily <nl> * / <nl> public void validate ( ByteBuffer bytes ) throws MarshalException ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> index abc2a37 . . 505522f 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> + + + b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> @ @ - 162 , 7 + 162 , 6 @ @ public class ByteBufferUtil <nl> public static byte [ ] getArray ( ByteBuffer buffer ) <nl> { <nl> int length = buffer . remaining ( ) ; <nl> - <nl> if ( buffer . hasArray ( ) ) <nl> { <nl> int boff = buffer . arrayOffset ( ) + buffer . position ( ) ; <nl> @ @ - 511 , 8 + 510 , 16 @ @ public class ByteBufferUtil <nl> } ; <nl> } <nl> <nl> + / * <nl> + * Does not modify position or limit of buffer even temporarily <nl> + * so this is safe even without duplication . <nl> + * / <nl> public static String bytesToHex ( ByteBuffer bytes ) <nl> { <nl> + if ( bytes . hasArray ( ) ) { <nl> + return Hex . bytesToHex ( bytes . array ( ) , bytes . arrayOffset ( ) + bytes . position ( ) , bytes . remaining ( ) ) ; <nl> + } <nl> + <nl> final int offset = bytes . position ( ) ; <nl> final int size = bytes . remaining ( ) ; <nl> final char [ ] c = new char [ size * 2 ] ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / Hex . java b / src / java / org / apache / cassandra / utils / Hex . java <nl> index 0883c34 . . c4b4586 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / Hex . java <nl> + + + b / src / java / org / apache / cassandra / utils / Hex . java <nl> @ @ - 70 , 10 + 70 , 15 @ @ public class Hex <nl> <nl> public static String bytesToHex ( byte . . . bytes ) <nl> { <nl> - char [ ] c = new char [ bytes . length * 2 ] ; <nl> - for ( int i = 0 ; i < bytes . length ; i + + ) <nl> + return bytesToHex ( bytes , 0 , bytes . length ) ; <nl> + } <nl> + <nl> + public static String bytesToHex ( byte bytes [ ] , int offset , int length ) <nl> + { <nl> + char [ ] c = new char [ length * 2 ] ; <nl> + for ( int i = 0 ; i < length ; i + + ) <nl> { <nl> - int bint = bytes [ i ] ; <nl> + int bint = bytes [ i + offset ] ; <nl> c [ i * 2 ] = byteToChar [ ( bint & 0xf0 ) > > 4 ] ; <nl> c [ 1 + i * 2 ] = byteToChar [ bint & 0x0f ] ; <nl> } <nl> @ @ - 96 , 7 + 101 , 7 @ @ public class Hex <nl> try <nl> { <nl> s = stringConstructor . newInstance ( 0 , c . length , c ) ; <nl> - } <nl> + } <nl> catch ( InvocationTargetException ite ) { <nl> / / The underlying constructor failed . Unwrapping the exception . <nl> Throwable cause = ite . getCause ( ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 8baf41f . . f5da722 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 57 , 7 + 57 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> private static Logger logger _ = Logger . getLogger ( ColumnFamilyStore . class ) ; <nl> <nl> private static final int BUFSIZE = 128 * 1024 * 1024 ; <nl> - private static final int COMPACTION _ MEMORY _ THRESHOLD = 1 < < 30 ; <nl> <nl> private static NonBlockingHashMap < String , Set < Memtable > > memtablesPendingFlush = new NonBlockingHashMap < String , Set < Memtable > > ( ) ; <nl> private static ExecutorService flusher _ = new DebuggableThreadPoolExecutor ( " MEMTABLE - FLUSHER - POOL " ) ; <nl> @ @ - 902 , 7 + 901 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> long totalkeysWritten = 0 ; <nl> String rangeFileLocation ; <nl> String mergedFileName ; <nl> - IPartitioner p = StorageService . getPartitioner ( ) ; <nl> / / Calculate the expected compacted filesize <nl> long expectedRangeFileSize = getExpectedCompactedFileSize ( files ) ; <nl> / * in the worst case a node will be giving out half of its data so we take a chance * / <nl> @ @ - 1378 , 7 + 1376 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> / / if we are querying subcolumns of a supercolumn , fetch the supercolumn with NQF , then filter in - memory . <nl> if ( filter . path . superColumnName ! = null ) <nl> { <nl> - AbstractType comparator = DatabaseDescriptor . getComparator ( table _ , columnFamily _ ) ; <nl> QueryFilter nameFilter = new NamesQueryFilter ( filter . key , new QueryPath ( columnFamily _ ) , filter . path . superColumnName ) ; <nl> ColumnFamily cf = getColumnFamily ( nameFilter ) ; <nl> if ( cf ! = null ) <nl> diff - - git a / src / java / org / apache / cassandra / db / CommitLog . java b / src / java / org / apache / cassandra / db / CommitLog . java <nl> index 92d777e . . a82f762 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CommitLog . java <nl> + + + b / src / java / org / apache / cassandra / db / CommitLog . java <nl> @ @ - 101 , 13 + 101 , 6 @ @ public class CommitLog <nl> { <nl> return ( int ) ( getCreationTime ( f ) - getCreationTime ( f2 ) ) ; <nl> } <nl> - <nl> - public boolean equals ( Object o ) <nl> - { <nl> - if ( ! ( o instanceof CommitLogFileComparator ) ) <nl> - return false ; <nl> - return true ; <nl> - } <nl> } <nl> <nl> public static void setSegmentSize ( int size ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / BytesType . java b / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> index da5c070 . . 3633849 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> @ @ - 1 , 5 + 1 , 7 @ @ <nl> package org . apache . cassandra . db . marshal ; <nl> <nl> + import java . util . Arrays ; <nl> + <nl> public class BytesType extends AbstractType <nl> { <nl> public int compare ( byte [ ] o1 , byte [ ] o2 ) <nl> @ @ - 28 , 6 + 30 , 6 @ @ public class BytesType extends AbstractType <nl> <nl> public String getString ( byte [ ] bytes ) <nl> { <nl> - return bytes . toString ( ) ; <nl> + return Arrays . toString ( bytes ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / LongType . java b / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> index a458274 . . efa3718 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> @ @ - 18 , 7 + 18 , 7 @ @ public class LongType extends AbstractType <nl> <nl> long L1 = ByteBuffer . wrap ( o1 ) . order ( ByteOrder . LITTLE _ ENDIAN ) . getLong ( ) ; <nl> long L2 = ByteBuffer . wrap ( o2 ) . order ( ByteOrder . LITTLE _ ENDIAN ) . getLong ( ) ; <nl> - return new Long ( L1 ) . compareTo ( L2 ) ; <nl> + return Long . valueOf ( L1 ) . compareTo ( Long . valueOf ( L2 ) ) ; <nl> } <nl> <nl> public String getString ( byte [ ] bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> index f7c57f6 . . 6b3d16f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> @ @ - 1 , 7 + 1 , 6 @ @ <nl> package org . apache . cassandra . db . marshal ; <nl> <nl> import java . util . UUID ; <nl> - import java . nio . ByteBuffer ; <nl> <nl> public class TimeUUIDType extends AbstractType <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / dht / BootStrapper . java b / src / java / org / apache / cassandra / dht / BootStrapper . java <nl> index 7059cd9 . . 01e1766 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / BootStrapper . java <nl> + + + b / src / java / org / apache / cassandra / dht / BootStrapper . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra . dht ; <nl> <nl> import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . HashMap ; <nl> import java . util . HashSet ; <nl> @ @ - 31 , 7 + 32 , 7 @ @ package org . apache . cassandra . dht ; <nl> import org . apache . cassandra . locator . TokenMetadata ; <nl> import org . apache . cassandra . net . EndPoint ; <nl> import org . apache . cassandra . service . StorageService ; <nl> - import org . apache . cassandra . utils . LogUtil ; <nl> + import org . apache . cassandra . utils . LogUtil ; <nl> <nl> <nl> / * * <nl> @ @ - 59 , 7 + 60 , 7 @ @ public class BootStrapper implements Runnable <nl> try <nl> { <nl> if ( logger _ . isDebugEnabled ( ) ) <nl> - logger _ . debug ( " Beginning bootstrap process for " + targets _ + " . . . " ) ; <nl> + logger _ . debug ( " Beginning bootstrap process for " + Arrays . toString ( targets _ ) + " . . . " ) ; <nl> / * copy the token to endpoint map * / <nl> Map < Token , EndPoint > tokenToEndPointMap = tokenMetadata _ . cloneTokenEndPointMap ( ) ; <nl> / * remove the tokens associated with the endpoints being bootstrapped * / <nl> diff - - git a / src / java / org / apache / cassandra / dht / BootstrapMetadata . java b / src / java / org / apache / cassandra / dht / BootstrapMetadata . java <nl> index 34126b2 . . e7b09a7 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / BootstrapMetadata . java <nl> + + + b / src / java / org / apache / cassandra / dht / BootstrapMetadata . java <nl> @ @ - 55 , 6 + 55 , 8 @ @ class BootstrapMetadata <nl> <nl> BootstrapMetadata ( EndPoint target , List < Range > ranges ) <nl> { <nl> + assert target _ ! = null ; <nl> + assert ranges _ ! = null ; <nl> target _ = target ; <nl> ranges _ = ranges ; <nl> } <nl> @ @ - 78 , 13 + 80 , 11 @ @ class BootstrapMetadataSerializer implements ICompactSerializer < BootstrapMetadat <nl> public void serialize ( BootstrapMetadata bsMetadata , DataOutputStream dos ) throws IOException <nl> { <nl> CompactEndPointSerializationHelper . serialize ( bsMetadata . target _ , dos ) ; <nl> - int size = ( bsMetadata . ranges _ = = null ) ? 0 : bsMetadata . ranges _ . size ( ) ; <nl> - dos . writeInt ( size ) ; <nl> - <nl> - for ( Range range : bsMetadata . ranges _ ) <nl> + dos . writeInt ( bsMetadata . ranges _ . size ( ) ) ; <nl> + for ( Range range : bsMetadata . ranges _ ) <nl> { <nl> Range . serializer ( ) . serialize ( range , dos ) ; <nl> - } <nl> + } <nl> } <nl> <nl> public BootstrapMetadata deserialize ( DataInputStream dis ) throws IOException <nl> diff - - git a / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java b / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java <nl> index 341d72e . . a786cab 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java <nl> + + + b / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java <nl> @ @ - 60 , 6 + 60 , 7 @ @ class BootstrapMetadataMessage <nl> <nl> BootstrapMetadataMessage ( BootstrapMetadata [ ] bsMetadata ) <nl> { <nl> + assert bsMetadata ! = null ; <nl> bsMetadata _ = bsMetadata ; <nl> } <nl> } <nl> @ @ - 69 , 9 + 70 , 8 @ @ class BootstrapMetadataMessageSerializer implements ICompactSerializer < Bootstrap <nl> public void serialize ( BootstrapMetadataMessage bsMetadataMessage , DataOutputStream dos ) throws IOException <nl> { <nl> BootstrapMetadata [ ] bsMetadata = bsMetadataMessage . bsMetadata _ ; <nl> - int size = ( bsMetadata = = null ) ? 0 : bsMetadata . length ; <nl> - dos . writeInt ( size ) ; <nl> - for ( BootstrapMetadata bsmd : bsMetadata ) <nl> + dos . writeInt ( bsMetadata . length ) ; <nl> + for ( BootstrapMetadata bsmd : bsMetadata ) <nl> { <nl> BootstrapMetadata . serializer ( ) . serialize ( bsmd , dos ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / ConsistencyManager . java b / src / java / org / apache / cassandra / service / ConsistencyManager . java <nl> index 94f9d3d . . 69c3296 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ConsistencyManager . java <nl> + + + b / src / java / org / apache / cassandra / service / ConsistencyManager . java <nl> @ @ - 98 , 7 + 98 , 7 @ @ class ConsistencyManager implements Runnable <nl> 	 	 } <nl> 	 } <nl> 	 <nl> - 	 class DataRepairHandler implements IAsyncCallback , ICacheExpungeHook < String , String > <nl> + 	 static class DataRepairHandler implements IAsyncCallback , ICacheExpungeHook < String , String > <nl> 	 { <nl> 	 	 private List < Message > responses _ = new ArrayList < Message > ( ) ; <nl> 	 	 private IResponseResolver < Row > readResponseResolver _ ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / MembershipCleaner . java b / src / java / org / apache / cassandra / tools / MembershipCleaner . java <nl> index 28775f8 . . 71db3ee 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / MembershipCleaner . java <nl> + + + b / src / java / org / apache / cassandra / tools / MembershipCleaner . java <nl> @ @ - 44 , 7 + 44 , 7 @ @ public class MembershipCleaner <nl> { <nl> if ( args . length ! = 3 ) <nl> { <nl> - System . out . println ( " Usage : java com . facebook . infrastructure . tools . MembershipCleaner " + <nl> + System . out . println ( " Usage : java org . apache . cassandra . tools . MembershipCleaner " + <nl> " < ip : port to send the message > " + <nl> " < node which needs to be removed > " + <nl> " < file containing all nodes in the cluster > " ) ; <nl> @ @ - 82 , 7 + 82 , 6 @ @ public class MembershipCleaner <nl> public static class MembershipCleanerMessage implements Serializable <nl> { <nl> private static ICompactSerializer < MembershipCleanerMessage > serializer _ ; <nl> - private static AtomicInteger idGen _ = new AtomicInteger ( 0 ) ; <nl> <nl> static <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / tools / MembershipCleanerVerbHandler . java b / src / java / org / apache / cassandra / tools / MembershipCleanerVerbHandler . java <nl> index b34db74 . . 610b5e8 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / MembershipCleanerVerbHandler . java <nl> + + + b / src / java / org / apache / cassandra / tools / MembershipCleanerVerbHandler . java <nl> @ @ - 69 , 7 + 69 , 7 @ @ public class MembershipCleanerVerbHandler implements IVerbHandler <nl> { <nl> if ( logger _ . isDebugEnabled ( ) ) <nl> logger _ . debug ( " Processing node " + node ) ; <nl> - byte [ ] bytes = headers . remove ( node ) ; <nl> + headers . remove ( node ) ; <nl> / * Send a message to this node to alter its membership state . * / <nl> EndPoint targetNode = new EndPoint ( node , DatabaseDescriptor . getStoragePort ( ) ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / FileUtils . java b / src / java / org / apache / cassandra / utils / FileUtils . java <nl> index a29f2a8 . . 3110d04 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FileUtils . java <nl> + + + b / src / java / org / apache / cassandra / utils / FileUtils . java <nl> @ @ - 88 , 13 + 88 , 6 @ @ public class FileUtils <nl> { <nl> return ( int ) ( f . lastModified ( ) - f2 . lastModified ( ) ) ; <nl> } <nl> - <nl> - public boolean equals ( Object o ) <nl> - { <nl> - if ( ! ( o instanceof FileComparator ) ) <nl> - return false ; <nl> - return true ; <nl> - } <nl> } <nl> <nl> public static void createDirectory ( String directory ) throws IOException

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 797e2c7 . . 7e1a18f 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1476 , 12 + 1476 , 14 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 TabularDataSupport result = new TabularDataSupport ( COUNTER _ TYPE ) ; 
 for ( Counter < ByteBuffer > counter : samplerResults . topK ) 
 { 
 - byte [ ] key = counter . getItem ( ) . array ( ) ; 
 + / / Not duplicating the buffer for safety because AbstractSerializer and ByteBufferUtil . bytesToHex 
 + / / don ' t modify position or limit 
 + ByteBuffer key = counter . getItem ( ) ; 
 result . put ( new CompositeDataSupport ( COUNTER _ COMPOSITE _ TYPE , COUNTER _ NAMES , new Object [ ] { 
 - Hex . bytesToHex ( key ) , / / raw 
 + ByteBufferUtil . bytesToHex ( key ) , / / raw 
 counter . getCount ( ) , / / count 
 counter . getError ( ) , / / error 
 - metadata . getKeyValidator ( ) . getString ( ByteBuffer . wrap ( key ) ) } ) ) ; / / string 
 + metadata . getKeyValidator ( ) . getString ( key ) } ) ) ; / / string 
 } 
 return new CompositeDataSupport ( SAMPLING _ RESULT , SAMPLER _ NAMES , new Object [ ] { 
 samplerResults . cardinality , result } ) ; 
 @ @ - 1561 , 7 + 1563 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 if ( ! manifestFile . getParentFile ( ) . exists ( ) ) 
 manifestFile . getParentFile ( ) . mkdirs ( ) ; 
 - 
 + 
 try ( PrintStream out = new PrintStream ( manifestFile ) ) 
 { 
 final JSONObject manifestJSON = new JSONObject ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / RangeTombstoneList . java b / src / java / org / apache / cassandra / db / RangeTombstoneList . java 
 index c92a296 . . 841e6de 100644 
 - - - a / src / java / org / apache / cassandra / db / RangeTombstoneList . java 
 + + + b / src / java / org / apache / cassandra / db / RangeTombstoneList . java 
 @ @ - 459 , 7 + 459 , 6 @ @ public class RangeTombstoneList implements Iterable < RangeTombstone > , IMeasurable 
 { 
 if ( idx < 0 | | idx < finish ) 
 return endOfData ( ) ; 
 - 
 / / We want to make sure the range are stricly included within the queried slice as this 
 / / make it easier to combine things when iterator over successive slices . This means that 
 / / for the first and last range we might have to " cut " the range returned . 
 diff - - git a / src / java / org / apache / cassandra / gms / TokenSerializer . java b / src / java / org / apache / cassandra / gms / TokenSerializer . java 
 index 1404258 . . da4ee7d 100644 
 - - - a / src / java / org / apache / cassandra / gms / TokenSerializer . java 
 + + + b / src / java / org / apache / cassandra / gms / TokenSerializer . java 
 @ @ - 19 , 7 + 19 , 7 @ @ package org . apache . cassandra . gms ; 
 
 import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . dht . Token ; 
 - 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 37 , 9 + 37 , 9 @ @ public class TokenSerializer 
 { 
 for ( Token token : tokens ) 
 { 
 - byte [ ] bintoken = partitioner . getTokenFactory ( ) . toByteArray ( token ) . array ( ) ; 
 - out . writeInt ( bintoken . length ) ; 
 - out . write ( bintoken ) ; 
 + ByteBuffer tokenBuffer = partitioner . getTokenFactory ( ) . toByteArray ( token ) ; 
 + assert tokenBuffer . arrayOffset ( ) = = 0 ; 
 + ByteBufferUtil . writeWithLength ( tokenBuffer . array ( ) , out ) ; 
 } 
 out . writeInt ( 0 ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / util / DataIntegrityMetadata . java b / src / java / org / apache / cassandra / io / util / DataIntegrityMetadata . java 
 index 70cd860 . . ab750c8 100644 
 - - - a / src / java / org / apache / cassandra / io / util / DataIntegrityMetadata . java 
 + + + b / src / java / org / apache / cassandra / io / util / DataIntegrityMetadata . java 
 @ @ - 198 , 6 + 198 , 7 @ @ public class DataIntegrityMetadata 
 { 
 ByteBuffer byteBuffer = ByteBuffer . allocate ( 4 ) ; 
 byteBuffer . putInt ( incrementalChecksumValue ) ; 
 + assert byteBuffer . arrayOffset ( ) = = 0 ; 
 fullChecksum . update ( byteBuffer . array ( ) , 0 , byteBuffer . array ( ) . length ) ; 
 } 
 incrementalChecksum . reset ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java b / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java 
 index d9a290e . . af85c58 100644 
 - - - a / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java 
 + + + b / src / java / org / apache / cassandra / io / util / DataOutputBuffer . java 
 @ @ - 106 , 6 + 106 , 7 @ @ public class DataOutputBuffer extends BufferedDataOutputStreamPlus 
 
 public byte [ ] getData ( ) 
 { 
 + assert buffer . arrayOffset ( ) = = 0 ; 
 return buffer . array ( ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / serializers / TypeSerializer . java b / src / java / org / apache / cassandra / serializers / TypeSerializer . java 
 index cddef08 . . 9501397 100644 
 - - - a / src / java / org / apache / cassandra / serializers / TypeSerializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / TypeSerializer . java 
 @ @ - 23 , 11 + 23 , 17 @ @ import java . nio . ByteBuffer ; 
 public interface TypeSerializer < T > 
 { 
 public ByteBuffer serialize ( T value ) ; 
 + 
 + / * 
 + * Does not modify the position or limit of the buffer even temporarily . 
 + * / 
 public T deserialize ( ByteBuffer bytes ) ; 
 
 / * 
 * Validate that the byte array is a valid sequence for the type this represents . 
 * This guarantees deserialize ( ) can be called without errors . 
 + * 
 + * Does not modify the position or limit of the buffer even temporarily 
 * / 
 public void validate ( ByteBuffer bytes ) throws MarshalException ; 
 
 diff - - git a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 index abc2a37 . . 505522f 100644 
 - - - a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 + + + b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 @ @ - 162 , 7 + 162 , 6 @ @ public class ByteBufferUtil 
 public static byte [ ] getArray ( ByteBuffer buffer ) 
 { 
 int length = buffer . remaining ( ) ; 
 - 
 if ( buffer . hasArray ( ) ) 
 { 
 int boff = buffer . arrayOffset ( ) + buffer . position ( ) ; 
 @ @ - 511 , 8 + 510 , 16 @ @ public class ByteBufferUtil 
 } ; 
 } 
 
 + / * 
 + * Does not modify position or limit of buffer even temporarily 
 + * so this is safe even without duplication . 
 + * / 
 public static String bytesToHex ( ByteBuffer bytes ) 
 { 
 + if ( bytes . hasArray ( ) ) { 
 + return Hex . bytesToHex ( bytes . array ( ) , bytes . arrayOffset ( ) + bytes . position ( ) , bytes . remaining ( ) ) ; 
 + } 
 + 
 final int offset = bytes . position ( ) ; 
 final int size = bytes . remaining ( ) ; 
 final char [ ] c = new char [ size * 2 ] ; 
 diff - - git a / src / java / org / apache / cassandra / utils / Hex . java b / src / java / org / apache / cassandra / utils / Hex . java 
 index 0883c34 . . c4b4586 100644 
 - - - a / src / java / org / apache / cassandra / utils / Hex . java 
 + + + b / src / java / org / apache / cassandra / utils / Hex . java 
 @ @ - 70 , 10 + 70 , 15 @ @ public class Hex 
 
 public static String bytesToHex ( byte . . . bytes ) 
 { 
 - char [ ] c = new char [ bytes . length * 2 ] ; 
 - for ( int i = 0 ; i < bytes . length ; i + + ) 
 + return bytesToHex ( bytes , 0 , bytes . length ) ; 
 + } 
 + 
 + public static String bytesToHex ( byte bytes [ ] , int offset , int length ) 
 + { 
 + char [ ] c = new char [ length * 2 ] ; 
 + for ( int i = 0 ; i < length ; i + + ) 
 { 
 - int bint = bytes [ i ] ; 
 + int bint = bytes [ i + offset ] ; 
 c [ i * 2 ] = byteToChar [ ( bint & 0xf0 ) > > 4 ] ; 
 c [ 1 + i * 2 ] = byteToChar [ bint & 0x0f ] ; 
 } 
 @ @ - 96 , 7 + 101 , 7 @ @ public class Hex 
 try 
 { 
 s = stringConstructor . newInstance ( 0 , c . length , c ) ; 
 - } 
 + } 
 catch ( InvocationTargetException ite ) { 
 / / The underlying constructor failed . Unwrapping the exception . 
 Throwable cause = ite . getCause ( ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 8baf41f . . f5da722 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 57 , 7 + 57 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 private static Logger logger _ = Logger . getLogger ( ColumnFamilyStore . class ) ; 
 
 private static final int BUFSIZE = 128 * 1024 * 1024 ; 
 - private static final int COMPACTION _ MEMORY _ THRESHOLD = 1 < < 30 ; 
 
 private static NonBlockingHashMap < String , Set < Memtable > > memtablesPendingFlush = new NonBlockingHashMap < String , Set < Memtable > > ( ) ; 
 private static ExecutorService flusher _ = new DebuggableThreadPoolExecutor ( " MEMTABLE - FLUSHER - POOL " ) ; 
 @ @ - 902 , 7 + 901 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 long totalkeysWritten = 0 ; 
 String rangeFileLocation ; 
 String mergedFileName ; 
 - IPartitioner p = StorageService . getPartitioner ( ) ; 
 / / Calculate the expected compacted filesize 
 long expectedRangeFileSize = getExpectedCompactedFileSize ( files ) ; 
 / * in the worst case a node will be giving out half of its data so we take a chance * / 
 @ @ - 1378 , 7 + 1376 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 / / if we are querying subcolumns of a supercolumn , fetch the supercolumn with NQF , then filter in - memory . 
 if ( filter . path . superColumnName ! = null ) 
 { 
 - AbstractType comparator = DatabaseDescriptor . getComparator ( table _ , columnFamily _ ) ; 
 QueryFilter nameFilter = new NamesQueryFilter ( filter . key , new QueryPath ( columnFamily _ ) , filter . path . superColumnName ) ; 
 ColumnFamily cf = getColumnFamily ( nameFilter ) ; 
 if ( cf ! = null ) 
 diff - - git a / src / java / org / apache / cassandra / db / CommitLog . java b / src / java / org / apache / cassandra / db / CommitLog . java 
 index 92d777e . . a82f762 100644 
 - - - a / src / java / org / apache / cassandra / db / CommitLog . java 
 + + + b / src / java / org / apache / cassandra / db / CommitLog . java 
 @ @ - 101 , 13 + 101 , 6 @ @ public class CommitLog 
 { 
 return ( int ) ( getCreationTime ( f ) - getCreationTime ( f2 ) ) ; 
 } 
 - 
 - public boolean equals ( Object o ) 
 - { 
 - if ( ! ( o instanceof CommitLogFileComparator ) ) 
 - return false ; 
 - return true ; 
 - } 
 } 
 
 public static void setSegmentSize ( int size ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / BytesType . java b / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 index da5c070 . . 3633849 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 @ @ - 1 , 5 + 1 , 7 @ @ 
 package org . apache . cassandra . db . marshal ; 
 
 + import java . util . Arrays ; 
 + 
 public class BytesType extends AbstractType 
 { 
 public int compare ( byte [ ] o1 , byte [ ] o2 ) 
 @ @ - 28 , 6 + 30 , 6 @ @ public class BytesType extends AbstractType 
 
 public String getString ( byte [ ] bytes ) 
 { 
 - return bytes . toString ( ) ; 
 + return Arrays . toString ( bytes ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / LongType . java b / src / java / org / apache / cassandra / db / marshal / LongType . java 
 index a458274 . . efa3718 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / LongType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / LongType . java 
 @ @ - 18 , 7 + 18 , 7 @ @ public class LongType extends AbstractType 
 
 long L1 = ByteBuffer . wrap ( o1 ) . order ( ByteOrder . LITTLE _ ENDIAN ) . getLong ( ) ; 
 long L2 = ByteBuffer . wrap ( o2 ) . order ( ByteOrder . LITTLE _ ENDIAN ) . getLong ( ) ; 
 - return new Long ( L1 ) . compareTo ( L2 ) ; 
 + return Long . valueOf ( L1 ) . compareTo ( Long . valueOf ( L2 ) ) ; 
 } 
 
 public String getString ( byte [ ] bytes ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 index f7c57f6 . . 6b3d16f 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 @ @ - 1 , 7 + 1 , 6 @ @ 
 package org . apache . cassandra . db . marshal ; 
 
 import java . util . UUID ; 
 - import java . nio . ByteBuffer ; 
 
 public class TimeUUIDType extends AbstractType 
 { 
 diff - - git a / src / java / org / apache / cassandra / dht / BootStrapper . java b / src / java / org / apache / cassandra / dht / BootStrapper . java 
 index 7059cd9 . . 01e1766 100644 
 - - - a / src / java / org / apache / cassandra / dht / BootStrapper . java 
 + + + b / src / java / org / apache / cassandra / dht / BootStrapper . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra . dht ; 
 
 import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . HashMap ; 
 import java . util . HashSet ; 
 @ @ - 31 , 7 + 32 , 7 @ @ package org . apache . cassandra . dht ; 
 import org . apache . cassandra . locator . TokenMetadata ; 
 import org . apache . cassandra . net . EndPoint ; 
 import org . apache . cassandra . service . StorageService ; 
 - import org . apache . cassandra . utils . LogUtil ; 
 + import org . apache . cassandra . utils . LogUtil ; 
 
 
 / * * 
 @ @ - 59 , 7 + 60 , 7 @ @ public class BootStrapper implements Runnable 
 try 
 { 
 if ( logger _ . isDebugEnabled ( ) ) 
 - logger _ . debug ( " Beginning bootstrap process for " + targets _ + " . . . " ) ; 
 + logger _ . debug ( " Beginning bootstrap process for " + Arrays . toString ( targets _ ) + " . . . " ) ; 
 / * copy the token to endpoint map * / 
 Map < Token , EndPoint > tokenToEndPointMap = tokenMetadata _ . cloneTokenEndPointMap ( ) ; 
 / * remove the tokens associated with the endpoints being bootstrapped * / 
 diff - - git a / src / java / org / apache / cassandra / dht / BootstrapMetadata . java b / src / java / org / apache / cassandra / dht / BootstrapMetadata . java 
 index 34126b2 . . e7b09a7 100644 
 - - - a / src / java / org / apache / cassandra / dht / BootstrapMetadata . java 
 + + + b / src / java / org / apache / cassandra / dht / BootstrapMetadata . java 
 @ @ - 55 , 6 + 55 , 8 @ @ class BootstrapMetadata 
 
 BootstrapMetadata ( EndPoint target , List < Range > ranges ) 
 { 
 + assert target _ ! = null ; 
 + assert ranges _ ! = null ; 
 target _ = target ; 
 ranges _ = ranges ; 
 } 
 @ @ - 78 , 13 + 80 , 11 @ @ class BootstrapMetadataSerializer implements ICompactSerializer < BootstrapMetadat 
 public void serialize ( BootstrapMetadata bsMetadata , DataOutputStream dos ) throws IOException 
 { 
 CompactEndPointSerializationHelper . serialize ( bsMetadata . target _ , dos ) ; 
 - int size = ( bsMetadata . ranges _ = = null ) ? 0 : bsMetadata . ranges _ . size ( ) ; 
 - dos . writeInt ( size ) ; 
 - 
 - for ( Range range : bsMetadata . ranges _ ) 
 + dos . writeInt ( bsMetadata . ranges _ . size ( ) ) ; 
 + for ( Range range : bsMetadata . ranges _ ) 
 { 
 Range . serializer ( ) . serialize ( range , dos ) ; 
 - } 
 + } 
 } 
 
 public BootstrapMetadata deserialize ( DataInputStream dis ) throws IOException 
 diff - - git a / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java b / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java 
 index 341d72e . . a786cab 100644 
 - - - a / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java 
 + + + b / src / java / org / apache / cassandra / dht / BootstrapMetadataMessage . java 
 @ @ - 60 , 6 + 60 , 7 @ @ class BootstrapMetadataMessage 
 
 BootstrapMetadataMessage ( BootstrapMetadata [ ] bsMetadata ) 
 { 
 + assert bsMetadata ! = null ; 
 bsMetadata _ = bsMetadata ; 
 } 
 } 
 @ @ - 69 , 9 + 70 , 8 @ @ class BootstrapMetadataMessageSerializer implements ICompactSerializer < Bootstrap 
 public void serialize ( BootstrapMetadataMessage bsMetadataMessage , DataOutputStream dos ) throws IOException 
 { 
 BootstrapMetadata [ ] bsMetadata = bsMetadataMessage . bsMetadata _ ; 
 - int size = ( bsMetadata = = null ) ? 0 : bsMetadata . length ; 
 - dos . writeInt ( size ) ; 
 - for ( BootstrapMetadata bsmd : bsMetadata ) 
 + dos . writeInt ( bsMetadata . length ) ; 
 + for ( BootstrapMetadata bsmd : bsMetadata ) 
 { 
 BootstrapMetadata . serializer ( ) . serialize ( bsmd , dos ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / ConsistencyManager . java b / src / java / org / apache / cassandra / service / ConsistencyManager . java 
 index 94f9d3d . . 69c3296 100644 
 - - - a / src / java / org / apache / cassandra / service / ConsistencyManager . java 
 + + + b / src / java / org / apache / cassandra / service / ConsistencyManager . java 
 @ @ - 98 , 7 + 98 , 7 @ @ class ConsistencyManager implements Runnable 
 	 	 } 
 	 } 
 	 
 - 	 class DataRepairHandler implements IAsyncCallback , ICacheExpungeHook < String , String > 
 + 	 static class DataRepairHandler implements IAsyncCallback , ICacheExpungeHook < String , String > 
 	 { 
 	 	 private List < Message > responses _ = new ArrayList < Message > ( ) ; 
 	 	 private IResponseResolver < Row > readResponseResolver _ ; 
 diff - - git a / src / java / org / apache / cassandra / tools / MembershipCleaner . java b / src / java / org / apache / cassandra / tools / MembershipCleaner . java 
 index 28775f8 . . 71db3ee 100644 
 - - - a / src / java / org / apache / cassandra / tools / MembershipCleaner . java 
 + + + b / src / java / org / apache / cassandra / tools / MembershipCleaner . java 
 @ @ - 44 , 7 + 44 , 7 @ @ public class MembershipCleaner 
 { 
 if ( args . length ! = 3 ) 
 { 
 - System . out . println ( " Usage : java com . facebook . infrastructure . tools . MembershipCleaner " + 
 + System . out . println ( " Usage : java org . apache . cassandra . tools . MembershipCleaner " + 
 " < ip : port to send the message > " + 
 " < node which needs to be removed > " + 
 " < file containing all nodes in the cluster > " ) ; 
 @ @ - 82 , 7 + 82 , 6 @ @ public class MembershipCleaner 
 public static class MembershipCleanerMessage implements Serializable 
 { 
 private static ICompactSerializer < MembershipCleanerMessage > serializer _ ; 
 - private static AtomicInteger idGen _ = new AtomicInteger ( 0 ) ; 
 
 static 
 { 
 diff - - git a / src / java / org / apache / cassandra / tools / MembershipCleanerVerbHandler . java b / src / java / org / apache / cassandra / tools / MembershipCleanerVerbHandler . java 
 index b34db74 . . 610b5e8 100644 
 - - - a / src / java / org / apache / cassandra / tools / MembershipCleanerVerbHandler . java 
 + + + b / src / java / org / apache / cassandra / tools / MembershipCleanerVerbHandler . java 
 @ @ - 69 , 7 + 69 , 7 @ @ public class MembershipCleanerVerbHandler implements IVerbHandler 
 { 
 if ( logger _ . isDebugEnabled ( ) ) 
 logger _ . debug ( " Processing node " + node ) ; 
 - byte [ ] bytes = headers . remove ( node ) ; 
 + headers . remove ( node ) ; 
 / * Send a message to this node to alter its membership state . * / 
 EndPoint targetNode = new EndPoint ( node , DatabaseDescriptor . getStoragePort ( ) ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / utils / FileUtils . java b / src / java / org / apache / cassandra / utils / FileUtils . java 
 index a29f2a8 . . 3110d04 100644 
 - - - a / src / java / org / apache / cassandra / utils / FileUtils . java 
 + + + b / src / java / org / apache / cassandra / utils / FileUtils . java 
 @ @ - 88 , 13 + 88 , 6 @ @ public class FileUtils 
 { 
 return ( int ) ( f . lastModified ( ) - f2 . lastModified ( ) ) ; 
 } 
 - 
 - public boolean equals ( Object o ) 
 - { 
 - if ( ! ( o instanceof FileComparator ) ) 
 - return false ; 
 - return true ; 
 - } 
 } 
 
 public static void createDirectory ( String directory ) throws IOException
