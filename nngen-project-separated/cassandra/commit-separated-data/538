BLEU SCORE: 0.02133165846478451

TEST MSG: Fix DELETE and UPDATE queries with empty IN restrictions
GENERATED MSG: Support Restricting non - PK Cols in MV Select Statements

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 145afb9 . . e69bf08 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 11 <nl> + * Fix DELETE and UPDATE queries with empty IN restrictions ( CASSANDRA - 12829 ) <nl> * Mark MVs as built after successful bootstrap ( CASSANDRA - 12984 ) <nl> * Estimated TS drop - time histogram updated with Cell . NO _ DELETION _ TIME ( CASSANDRA - 13040 ) <nl> * Nodetool compactionstats fails with NullPointerException ( CASSANDRA - 13021 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java <nl> index 647d22f . . 542dec9 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java <nl> @ @ - 430 , 6 + 430 , 17 @ @ public final class StatementRestrictions <nl> } <nl> <nl> / * * <nl> + * Checks if restrictions on the clustering key have IN restrictions . <nl> + * <nl> + * @ return < code > true < / code > if the restrictions on the clustering key have IN restrictions , <nl> + * < code > false < / code > otherwise . <nl> + * / <nl> + public boolean clusteringKeyRestrictionsHasIN ( ) <nl> + { <nl> + return clusteringColumnsRestrictions . isIN ( ) ; <nl> + } <nl> + <nl> + / * * <nl> * Processes the clustering column restrictions . <nl> * <nl> * @ param hasQueriableIndex < code > true < / code > if some of the queried data are indexed , < code > false < / code > otherwise <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> index f0aa835 . . 76a6460 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> @ @ - 401 , 7 + 401 , 7 @ @ public class BatchStatement implements CQLStatement <nl> QueryOptions statementOptions = options . forStatement ( i ) ; <nl> long timestamp = attrs . getTimestamp ( now , statementOptions ) ; <nl> List < ByteBuffer > pks = statement . buildPartitionKeyNames ( statementOptions ) ; <nl> - if ( pks . size ( ) > 1 ) <nl> + if ( statement . getRestrictions ( ) . keyIsInRelation ( ) ) <nl> throw new IllegalArgumentException ( " Batch with conditions cannot span multiple partitions ( you cannot use IN on the partition key ) " ) ; <nl> if ( key = = null ) <nl> { <nl> @ @ - 413 , 12 + 413 , 11 @ @ public class BatchStatement implements CQLStatement <nl> throw new InvalidRequestException ( " Batch with conditions cannot span multiple partitions " ) ; <nl> } <nl> <nl> - SortedSet < Clustering > clusterings = statement . createClustering ( statementOptions ) ; <nl> + checkFalse ( statement . getRestrictions ( ) . clusteringKeyRestrictionsHasIN ( ) , <nl> + " IN on the clustering key columns is not supported with conditional % s " , <nl> + statement . type . isUpdate ( ) ? " updates " : " deletions " ) ; <nl> <nl> - checkFalse ( clusterings . size ( ) > 1 , <nl> - " IN on the clustering key columns is not supported with conditional updates " ) ; <nl> - <nl> - Clustering clustering = Iterables . getOnlyElement ( clusterings ) ; <nl> + Clustering clustering = Iterables . getOnlyElement ( statement . createClustering ( statementOptions ) ) ; <nl> <nl> if ( statement . hasConditions ( ) ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> index 01c2ad1 . . acfa16b 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> @ @ - 139 , 6 + 139 , 11 @ @ public abstract class ModificationStatement implements CQLStatement <nl> this . requiresRead = requiresReadBuilder . build ( ) ; <nl> } <nl> <nl> + public StatementRestrictions getRestrictions ( ) <nl> + { <nl> + return restrictions ; <nl> + } <nl> + <nl> public Iterable < Function > getFunctions ( ) <nl> { <nl> List < Function > functions = new ArrayList < > ( ) ; <nl> @ @ - 445 , 20 + 450 , 18 @ @ public abstract class ModificationStatement implements CQLStatement <nl> { <nl> List < ByteBuffer > keys = buildPartitionKeyNames ( options ) ; <nl> / / We don ' t support IN for CAS operation so far <nl> - checkFalse ( keys . size ( ) > 1 , <nl> + checkFalse ( restrictions . keyIsInRelation ( ) , <nl> " IN on the partition key is not supported with conditional % s " , <nl> type . isUpdate ( ) ? " updates " : " deletions " ) ; <nl> <nl> DecoratedKey key = cfm . decorateKey ( keys . get ( 0 ) ) ; <nl> long now = options . getTimestamp ( queryState ) ; <nl> - SortedSet < Clustering > clusterings = createClustering ( options ) ; <nl> <nl> - checkFalse ( clusterings . size ( ) > 1 , <nl> + checkFalse ( restrictions . clusteringKeyRestrictionsHasIN ( ) , <nl> " IN on the clustering key columns is not supported with conditional % s " , <nl> type . isUpdate ( ) ? " updates " : " deletions " ) ; <nl> <nl> - Clustering clustering = Iterables . getOnlyElement ( clusterings ) ; <nl> - <nl> + Clustering clustering = Iterables . getOnlyElement ( createClustering ( options ) ) ; <nl> CQL3CasRequest request = new CQL3CasRequest ( cfm , key , false , conditionColumns ( ) , updatesRegularRows ( ) , updatesStaticRow ( ) ) ; <nl> <nl> addConditions ( clustering , request , options ) ; <nl> @ @ - 663 , 7 + 666 , 7 @ @ public abstract class ModificationStatement implements CQLStatement <nl> <nl> PartitionUpdate upd = collector . getPartitionUpdate ( cfm , dk , options . getConsistency ( ) ) ; <nl> <nl> - if ( clusterings . isEmpty ( ) ) <nl> + if ( ! restrictions . hasClusteringColumnsRestriction ( ) ) <nl> { <nl> addUpdateForKey ( upd , Clustering . EMPTY , params ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> index 3d8d03b . . 4732ed3 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> @ @ - 382 , 6 + 382 , 13 @ @ public abstract class CQLTester <nl> store . forceBlockingFlush ( ) ; <nl> } <nl> <nl> + <nl> + public void flush ( boolean forceFlush ) <nl> + { <nl> + if ( forceFlush ) <nl> + flush ( ) ; <nl> + } <nl> + <nl> @ FunctionalInterface <nl> public interface CheckedFunction { <nl> void apply ( ) throws Throwable ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / BatchTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / BatchTest . java <nl> index 66226eb . . e8f169d 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / BatchTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / BatchTest . java <nl> @ @ - 199 , 4 + 199 , 44 @ @ public class BatchTest extends CQLTester <nl> assertRows ( execute ( String . format ( " SELECT * FROM % s " , tbl1 ) ) , row ( 0 , 1 , 2 ) ) ; <nl> assertRows ( execute ( String . format ( " SELECT * FROM % s " , tbl2 ) ) , row ( 0 , 3 , 4 ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testBatchWithInRestriction ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 1 , 1 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 2 , 2 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 3 , 3 ) ; <nl> + <nl> + for ( String inClause : new String [ ] { " ( ) " , " ( 1 , 2 ) " } ) <nl> + { <nl> + assertInvalidMessage ( " IN on the clustering key columns is not supported with conditional updates " , <nl> + " BEGIN BATCH " + <nl> + " UPDATE % 1 $ s SET c = 100 WHERE a = 1 AND b = 1 IF c = 1 ; " + <nl> + " UPDATE % 1 $ s SET c = 200 WHERE a = 1 AND b IN " + inClause + " IF c = 1 ; " + <nl> + " APPLY BATCH " ) ; <nl> + <nl> + assertInvalidMessage ( " IN on the clustering key columns is not supported with conditional deletions " , <nl> + " BEGIN BATCH " + <nl> + " UPDATE % 1 $ s SET c = 100 WHERE a = 1 AND b = 1 IF c = 1 ; " + <nl> + " DELETE FROM % 1 $ s WHERE a = 1 AND b IN " + inClause + " IF c = 1 ; " + <nl> + " APPLY BATCH " ) ; <nl> + <nl> + assertInvalidMessage ( " Batch with conditions cannot span multiple partitions ( you cannot use IN on the partition key ) " , <nl> + " BEGIN BATCH " + <nl> + " UPDATE % 1 $ s SET c = 100 WHERE a = 1 AND b = 1 IF c = 1 ; " + <nl> + " UPDATE % 1 $ s SET c = 200 WHERE a IN " + inClause + " AND b = 1 IF c = 1 ; " + <nl> + " APPLY BATCH " ) ; <nl> + <nl> + assertInvalidMessage ( " Batch with conditions cannot span multiple partitions ( you cannot use IN on the partition key ) " , <nl> + " BEGIN BATCH " + <nl> + " UPDATE % 1 $ s SET c = 100 WHERE a = 1 AND b = 1 IF c = 1 ; " + <nl> + " DELETE FROM % 1 $ s WHERE a IN " + inClause + " AND b = 1 IF c = 1 ; " + <nl> + " APPLY BATCH " ) ; <nl> + } <nl> + assertRows ( execute ( " SELECT * FROM % s " ) , <nl> + row ( 1 , 1 , 1 ) , <nl> + row ( 1 , 2 , 2 ) , <nl> + row ( 1 , 3 , 3 ) ) ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java <nl> index b9ccafb . . 18a6ca3 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java <nl> @ @ - 1165 , 12 + 1165 , 6 @ @ public class DeleteTest extends CQLTester <nl> } <nl> } <nl> <nl> - private void flush ( boolean forceFlush ) <nl> - { <nl> - if ( forceFlush ) <nl> - flush ( ) ; <nl> - } <nl> - <nl> @ Test <nl> public void testDeleteAndReverseQueries ( ) throws Throwable <nl> { <nl> @ @ - 1196 , 4 + 1190 , 61 @ @ public class DeleteTest extends CQLTester <nl> row ( 9 ) , row ( 8 ) , row ( 1 ) , row ( 0 ) <nl> ) ; <nl> } <nl> + <nl> + / * * <nl> + * Test for CASSANDRA - 12829 <nl> + * / <nl> + @ Test <nl> + public void testDeleteWithEmptyInRestriction ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 1 , 1 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 2 , 2 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 3 , 3 ) ; <nl> + <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b = 1 ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a = 1 AND b IN ( ) ; " ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s " ) , <nl> + row ( 1 , 1 , 1 ) , <nl> + row ( 1 , 2 , 2 ) , <nl> + row ( 1 , 3 , 3 ) ) ; <nl> + <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , s int static , PRIMARY KEY ( ( a , b ) , c ) ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , s ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 1 , 1 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , s ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 2 , 2 , 1 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , s ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 3 , 3 , 1 ) ; <nl> + <nl> + execute ( " DELETE FROM % s WHERE a = 1 AND b = 1 AND c IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a = 1 AND b IN ( ) AND c IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b = 1 AND c IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c = 1 ; " ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s " ) , <nl> + row ( 1 , 1 , 1 , 1 , 1 ) , <nl> + row ( 1 , 1 , 2 , 1 , 2 ) , <nl> + row ( 1 , 1 , 3 , 1 , 3 ) ) ; <nl> + <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , e int , PRIMARY KEY ( ( a , b ) , c , d ) ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , e ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 1 , 1 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , e ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 2 , 2 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , e ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 3 , 3 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , e ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 4 , 4 ) ; <nl> + <nl> + execute ( " DELETE FROM % s WHERE a = 1 AND b = 1 AND c IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a = 1 AND b = 1 AND c = 1 AND d IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a = 1 AND b = 1 AND c IN ( ) AND d IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a = 1 AND b IN ( ) AND c IN ( ) AND d IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c IN ( ) AND d IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c IN ( ) AND d = 1 ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c = 1 AND d = 1 ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c = 1 AND d IN ( ) ; " ) ; <nl> + execute ( " DELETE FROM % s WHERE a IN ( ) AND b = 1 " ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s " ) , <nl> + row ( 1 , 1 , 1 , 1 , 1 ) , <nl> + row ( 1 , 1 , 1 , 2 , 2 ) , <nl> + row ( 1 , 1 , 1 , 3 , 3 ) , <nl> + row ( 1 , 1 , 1 , 4 , 4 ) ) ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertTest . java <nl> index a030613 . . c9a9faf 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertTest . java <nl> @ @ - 285 , 12 + 285 , 6 @ @ public class InsertTest extends CQLTester <nl> " INSERT INTO % s ( partitionKey , clustering _ 2 , staticValue ) VALUES ( 0 , 0 , ' A ' ) " ) ; <nl> } <nl> <nl> - private void flush ( boolean forceFlush ) <nl> - { <nl> - if ( forceFlush ) <nl> - flush ( ) ; <nl> - } <nl> - <nl> @ Test <nl> public void testPKInsertWithValueOver64K ( ) throws Throwable <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertUpdateIfConditionTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertUpdateIfConditionTest . java <nl> index f1dc9a2 . . fd02a69 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertUpdateIfConditionTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertUpdateIfConditionTest . java <nl> @ @ - 119 , 6 + 119 , 8 @ @ public class InsertUpdateIfConditionTest extends CQLTester <nl> <nl> createTable ( " CREATE TABLE % s ( k int , c int , v1 text , PRIMARY KEY ( k , c ) ) " ) ; <nl> assertInvalidMessage ( " IN on the clustering key columns is not supported with conditional updates " , <nl> + " UPDATE % s SET v1 = ' A ' WHERE k = 0 AND c IN ( ) IF EXISTS " ) ; <nl> + assertInvalidMessage ( " IN on the clustering key columns is not supported with conditional updates " , <nl> " UPDATE % s SET v1 = ' A ' WHERE k = 0 AND c IN ( 1 , 2 ) IF EXISTS " ) ; <nl> } <nl> <nl> @ @ - 227 , 7 + 229 , 11 @ @ public class InsertUpdateIfConditionTest extends CQLTester <nl> assertInvalidMessage ( " IN on the clustering key columns is not supported with conditional deletions " , <nl> " DELETE FROM % s WHERE k = ' k ' AND i IN ( 0 , 1 ) IF v = ' foo ' " ) ; <nl> assertInvalidMessage ( " IN on the clustering key columns is not supported with conditional deletions " , <nl> + " DELETE FROM % s WHERE k = ' k ' AND i IN ( ) IF v = ' foo ' " ) ; <nl> + assertInvalidMessage ( " IN on the clustering key columns is not supported with conditional deletions " , <nl> " DELETE FROM % s WHERE k = ' k ' AND i IN ( 0 , 1 ) IF EXISTS " ) ; <nl> + assertInvalidMessage ( " IN on the clustering key columns is not supported with conditional deletions " , <nl> + " DELETE FROM % s WHERE k = ' k ' AND i IN ( ) IF EXISTS " ) ; <nl> <nl> assertInvalidMessage ( " Invalid ' unset ' value in condition " , <nl> " DELETE FROM % s WHERE k = ' k ' AND i = 0 IF v = ? " , unset ( ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java <nl> index 0170ed2 . . 690d4f9 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java <nl> @ @ - 521 , 9 + 521 , 72 @ @ public class UpdateTest extends CQLTester <nl> assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( " v1 " , " v4 " , " v3 " ) ) ) ; <nl> } <nl> <nl> - private void flush ( boolean forceFlush ) <nl> + / * * <nl> + * Test for CASSANDRA - 12829 <nl> + * / <nl> + @ Test <nl> + public void testUpdateWithEmptyInRestriction ( ) throws Throwable <nl> { <nl> - if ( forceFlush ) <nl> - flush ( ) ; <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 1 , 1 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 2 , 2 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 3 , 3 ) ; <nl> + <nl> + assertInvalidMessage ( " Some clustering keys are missing : b " , <nl> + " UPDATE % s SET c = 100 WHERE a IN ( ) ; " ) ; <nl> + execute ( " UPDATE % s SET c = 100 WHERE a IN ( ) AND b IN ( ) ; " ) ; <nl> + execute ( " UPDATE % s SET c = 100 WHERE a IN ( ) AND b = 1 ; " ) ; <nl> + execute ( " UPDATE % s SET c = 100 WHERE a = 1 AND b IN ( ) ; " ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s " ) , <nl> + row ( 1 , 1 , 1 ) , <nl> + row ( 1 , 2 , 2 ) , <nl> + row ( 1 , 3 , 3 ) ) ; <nl> + <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , s int static , PRIMARY KEY ( ( a , b ) , c ) ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , s ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 1 , 1 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , s ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 2 , 2 , 1 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , s ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 3 , 3 , 1 ) ; <nl> + <nl> + execute ( " UPDATE % s SET d = 100 WHERE a = 1 AND b = 1 AND c IN ( ) ; " ) ; <nl> + execute ( " UPDATE % s SET d = 100 WHERE a = 1 AND b IN ( ) AND c IN ( ) ; " ) ; <nl> + execute ( " UPDATE % s SET d = 100 WHERE a IN ( ) AND b IN ( ) AND c IN ( ) ; " ) ; <nl> + execute ( " UPDATE % s SET d = 100 WHERE a IN ( ) AND b IN ( ) AND c = 1 ; " ) ; <nl> + execute ( " UPDATE % s SET d = 100 WHERE a IN ( ) AND b = 1 AND c IN ( ) ; " ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s " ) , <nl> + row ( 1 , 1 , 1 , 1 , 1 ) , <nl> + row ( 1 , 1 , 2 , 1 , 2 ) , <nl> + row ( 1 , 1 , 3 , 1 , 3 ) ) ; <nl> + <nl> + / / No clustering keys restricted , update whole partition <nl> + execute ( " UPDATE % s set s = 100 where a = 1 AND b = 1 ; " ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s " ) , <nl> + row ( 1 , 1 , 1 , 100 , 1 ) , <nl> + row ( 1 , 1 , 2 , 100 , 2 ) , <nl> + row ( 1 , 1 , 3 , 100 , 3 ) ) ; <nl> + <nl> + execute ( " UPDATE % s set s = 200 where a = 1 AND b IN ( ) ; " ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s " ) , <nl> + row ( 1 , 1 , 1 , 100 , 1 ) , <nl> + row ( 1 , 1 , 2 , 100 , 2 ) , <nl> + row ( 1 , 1 , 3 , 100 , 3 ) ) ; <nl> + <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , e int , PRIMARY KEY ( ( a , b ) , c , d ) ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , e ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 1 , 1 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , e ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 2 , 2 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , e ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 3 , 3 ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , e ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 4 , 4 ) ; <nl> + <nl> + execute ( " UPDATE % s SET e = 100 WHERE a = 1 AND b = 1 AND c = 1 AND d IN ( ) ; " ) ; <nl> + execute ( " UPDATE % s SET e = 100 WHERE a = 1 AND b = 1 AND c IN ( ) AND d IN ( ) ; " ) ; <nl> + execute ( " UPDATE % s SET e = 100 WHERE a = 1 AND b IN ( ) AND c IN ( ) AND d IN ( ) ; " ) ; <nl> + execute ( " UPDATE % s SET e = 100 WHERE a IN ( ) AND b IN ( ) AND c IN ( ) AND d IN ( ) ; " ) ; <nl> + execute ( " UPDATE % s SET e = 100 WHERE a IN ( ) AND b IN ( ) AND c IN ( ) AND d = 1 ; " ) ; <nl> + execute ( " UPDATE % s SET e = 100 WHERE a IN ( ) AND b IN ( ) AND c = 1 AND d = 1 ; " ) ; <nl> + execute ( " UPDATE % s SET e = 100 WHERE a IN ( ) AND b IN ( ) AND c = 1 AND d IN ( ) ; " ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s " ) , <nl> + row ( 1 , 1 , 1 , 1 , 1 ) , <nl> + row ( 1 , 1 , 1 , 2 , 2 ) , <nl> + row ( 1 , 1 , 1 , 3 , 3 ) , <nl> + row ( 1 , 1 , 1 , 4 , 4 ) ) ; <nl> } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 145afb9 . . e69bf08 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 11 
 + * Fix DELETE and UPDATE queries with empty IN restrictions ( CASSANDRA - 12829 ) 
 * Mark MVs as built after successful bootstrap ( CASSANDRA - 12984 ) 
 * Estimated TS drop - time histogram updated with Cell . NO _ DELETION _ TIME ( CASSANDRA - 13040 ) 
 * Nodetool compactionstats fails with NullPointerException ( CASSANDRA - 13021 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java 
 index 647d22f . . 542dec9 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java 
 + + + b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java 
 @ @ - 430 , 6 + 430 , 17 @ @ public final class StatementRestrictions 
 } 
 
 / * * 
 + * Checks if restrictions on the clustering key have IN restrictions . 
 + * 
 + * @ return < code > true < / code > if the restrictions on the clustering key have IN restrictions , 
 + * < code > false < / code > otherwise . 
 + * / 
 + public boolean clusteringKeyRestrictionsHasIN ( ) 
 + { 
 + return clusteringColumnsRestrictions . isIN ( ) ; 
 + } 
 + 
 + / * * 
 * Processes the clustering column restrictions . 
 * 
 * @ param hasQueriableIndex < code > true < / code > if some of the queried data are indexed , < code > false < / code > otherwise 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 index f0aa835 . . 76a6460 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 @ @ - 401 , 7 + 401 , 7 @ @ public class BatchStatement implements CQLStatement 
 QueryOptions statementOptions = options . forStatement ( i ) ; 
 long timestamp = attrs . getTimestamp ( now , statementOptions ) ; 
 List < ByteBuffer > pks = statement . buildPartitionKeyNames ( statementOptions ) ; 
 - if ( pks . size ( ) > 1 ) 
 + if ( statement . getRestrictions ( ) . keyIsInRelation ( ) ) 
 throw new IllegalArgumentException ( " Batch with conditions cannot span multiple partitions ( you cannot use IN on the partition key ) " ) ; 
 if ( key = = null ) 
 { 
 @ @ - 413 , 12 + 413 , 11 @ @ public class BatchStatement implements CQLStatement 
 throw new InvalidRequestException ( " Batch with conditions cannot span multiple partitions " ) ; 
 } 
 
 - SortedSet < Clustering > clusterings = statement . createClustering ( statementOptions ) ; 
 + checkFalse ( statement . getRestrictions ( ) . clusteringKeyRestrictionsHasIN ( ) , 
 + " IN on the clustering key columns is not supported with conditional % s " , 
 + statement . type . isUpdate ( ) ? " updates " : " deletions " ) ; 
 
 - checkFalse ( clusterings . size ( ) > 1 , 
 - " IN on the clustering key columns is not supported with conditional updates " ) ; 
 - 
 - Clustering clustering = Iterables . getOnlyElement ( clusterings ) ; 
 + Clustering clustering = Iterables . getOnlyElement ( statement . createClustering ( statementOptions ) ) ; 
 
 if ( statement . hasConditions ( ) ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 index 01c2ad1 . . acfa16b 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 @ @ - 139 , 6 + 139 , 11 @ @ public abstract class ModificationStatement implements CQLStatement 
 this . requiresRead = requiresReadBuilder . build ( ) ; 
 } 
 
 + public StatementRestrictions getRestrictions ( ) 
 + { 
 + return restrictions ; 
 + } 
 + 
 public Iterable < Function > getFunctions ( ) 
 { 
 List < Function > functions = new ArrayList < > ( ) ; 
 @ @ - 445 , 20 + 450 , 18 @ @ public abstract class ModificationStatement implements CQLStatement 
 { 
 List < ByteBuffer > keys = buildPartitionKeyNames ( options ) ; 
 / / We don ' t support IN for CAS operation so far 
 - checkFalse ( keys . size ( ) > 1 , 
 + checkFalse ( restrictions . keyIsInRelation ( ) , 
 " IN on the partition key is not supported with conditional % s " , 
 type . isUpdate ( ) ? " updates " : " deletions " ) ; 
 
 DecoratedKey key = cfm . decorateKey ( keys . get ( 0 ) ) ; 
 long now = options . getTimestamp ( queryState ) ; 
 - SortedSet < Clustering > clusterings = createClustering ( options ) ; 
 
 - checkFalse ( clusterings . size ( ) > 1 , 
 + checkFalse ( restrictions . clusteringKeyRestrictionsHasIN ( ) , 
 " IN on the clustering key columns is not supported with conditional % s " , 
 type . isUpdate ( ) ? " updates " : " deletions " ) ; 
 
 - Clustering clustering = Iterables . getOnlyElement ( clusterings ) ; 
 - 
 + Clustering clustering = Iterables . getOnlyElement ( createClustering ( options ) ) ; 
 CQL3CasRequest request = new CQL3CasRequest ( cfm , key , false , conditionColumns ( ) , updatesRegularRows ( ) , updatesStaticRow ( ) ) ; 
 
 addConditions ( clustering , request , options ) ; 
 @ @ - 663 , 7 + 666 , 7 @ @ public abstract class ModificationStatement implements CQLStatement 
 
 PartitionUpdate upd = collector . getPartitionUpdate ( cfm , dk , options . getConsistency ( ) ) ; 
 
 - if ( clusterings . isEmpty ( ) ) 
 + if ( ! restrictions . hasClusteringColumnsRestriction ( ) ) 
 { 
 addUpdateForKey ( upd , Clustering . EMPTY , params ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 index 3d8d03b . . 4732ed3 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 @ @ - 382 , 6 + 382 , 13 @ @ public abstract class CQLTester 
 store . forceBlockingFlush ( ) ; 
 } 
 
 + 
 + public void flush ( boolean forceFlush ) 
 + { 
 + if ( forceFlush ) 
 + flush ( ) ; 
 + } 
 + 
 @ FunctionalInterface 
 public interface CheckedFunction { 
 void apply ( ) throws Throwable ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / BatchTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / BatchTest . java 
 index 66226eb . . e8f169d 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / BatchTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / BatchTest . java 
 @ @ - 199 , 4 + 199 , 44 @ @ public class BatchTest extends CQLTester 
 assertRows ( execute ( String . format ( " SELECT * FROM % s " , tbl1 ) ) , row ( 0 , 1 , 2 ) ) ; 
 assertRows ( execute ( String . format ( " SELECT * FROM % s " , tbl2 ) ) , row ( 0 , 3 , 4 ) ) ; 
 } 
 + 
 + @ Test 
 + public void testBatchWithInRestriction ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 1 , 1 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 2 , 2 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 3 , 3 ) ; 
 + 
 + for ( String inClause : new String [ ] { " ( ) " , " ( 1 , 2 ) " } ) 
 + { 
 + assertInvalidMessage ( " IN on the clustering key columns is not supported with conditional updates " , 
 + " BEGIN BATCH " + 
 + " UPDATE % 1 $ s SET c = 100 WHERE a = 1 AND b = 1 IF c = 1 ; " + 
 + " UPDATE % 1 $ s SET c = 200 WHERE a = 1 AND b IN " + inClause + " IF c = 1 ; " + 
 + " APPLY BATCH " ) ; 
 + 
 + assertInvalidMessage ( " IN on the clustering key columns is not supported with conditional deletions " , 
 + " BEGIN BATCH " + 
 + " UPDATE % 1 $ s SET c = 100 WHERE a = 1 AND b = 1 IF c = 1 ; " + 
 + " DELETE FROM % 1 $ s WHERE a = 1 AND b IN " + inClause + " IF c = 1 ; " + 
 + " APPLY BATCH " ) ; 
 + 
 + assertInvalidMessage ( " Batch with conditions cannot span multiple partitions ( you cannot use IN on the partition key ) " , 
 + " BEGIN BATCH " + 
 + " UPDATE % 1 $ s SET c = 100 WHERE a = 1 AND b = 1 IF c = 1 ; " + 
 + " UPDATE % 1 $ s SET c = 200 WHERE a IN " + inClause + " AND b = 1 IF c = 1 ; " + 
 + " APPLY BATCH " ) ; 
 + 
 + assertInvalidMessage ( " Batch with conditions cannot span multiple partitions ( you cannot use IN on the partition key ) " , 
 + " BEGIN BATCH " + 
 + " UPDATE % 1 $ s SET c = 100 WHERE a = 1 AND b = 1 IF c = 1 ; " + 
 + " DELETE FROM % 1 $ s WHERE a IN " + inClause + " AND b = 1 IF c = 1 ; " + 
 + " APPLY BATCH " ) ; 
 + } 
 + assertRows ( execute ( " SELECT * FROM % s " ) , 
 + row ( 1 , 1 , 1 ) , 
 + row ( 1 , 2 , 2 ) , 
 + row ( 1 , 3 , 3 ) ) ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java 
 index b9ccafb . . 18a6ca3 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / DeleteTest . java 
 @ @ - 1165 , 12 + 1165 , 6 @ @ public class DeleteTest extends CQLTester 
 } 
 } 
 
 - private void flush ( boolean forceFlush ) 
 - { 
 - if ( forceFlush ) 
 - flush ( ) ; 
 - } 
 - 
 @ Test 
 public void testDeleteAndReverseQueries ( ) throws Throwable 
 { 
 @ @ - 1196 , 4 + 1190 , 61 @ @ public class DeleteTest extends CQLTester 
 row ( 9 ) , row ( 8 ) , row ( 1 ) , row ( 0 ) 
 ) ; 
 } 
 + 
 + / * * 
 + * Test for CASSANDRA - 12829 
 + * / 
 + @ Test 
 + public void testDeleteWithEmptyInRestriction ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 1 , 1 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 2 , 2 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 3 , 3 ) ; 
 + 
 + execute ( " DELETE FROM % s WHERE a IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b = 1 ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a = 1 AND b IN ( ) ; " ) ; 
 + assertRows ( execute ( " SELECT * FROM % s " ) , 
 + row ( 1 , 1 , 1 ) , 
 + row ( 1 , 2 , 2 ) , 
 + row ( 1 , 3 , 3 ) ) ; 
 + 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , s int static , PRIMARY KEY ( ( a , b ) , c ) ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , s ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 1 , 1 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , s ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 2 , 2 , 1 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , s ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 3 , 3 , 1 ) ; 
 + 
 + execute ( " DELETE FROM % s WHERE a = 1 AND b = 1 AND c IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a = 1 AND b IN ( ) AND c IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b = 1 AND c IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c = 1 ; " ) ; 
 + assertRows ( execute ( " SELECT * FROM % s " ) , 
 + row ( 1 , 1 , 1 , 1 , 1 ) , 
 + row ( 1 , 1 , 2 , 1 , 2 ) , 
 + row ( 1 , 1 , 3 , 1 , 3 ) ) ; 
 + 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , e int , PRIMARY KEY ( ( a , b ) , c , d ) ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , e ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 1 , 1 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , e ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 2 , 2 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , e ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 3 , 3 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , e ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 4 , 4 ) ; 
 + 
 + execute ( " DELETE FROM % s WHERE a = 1 AND b = 1 AND c IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a = 1 AND b = 1 AND c = 1 AND d IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a = 1 AND b = 1 AND c IN ( ) AND d IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a = 1 AND b IN ( ) AND c IN ( ) AND d IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c IN ( ) AND d IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c IN ( ) AND d = 1 ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c = 1 AND d = 1 ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b IN ( ) AND c = 1 AND d IN ( ) ; " ) ; 
 + execute ( " DELETE FROM % s WHERE a IN ( ) AND b = 1 " ) ; 
 + assertRows ( execute ( " SELECT * FROM % s " ) , 
 + row ( 1 , 1 , 1 , 1 , 1 ) , 
 + row ( 1 , 1 , 1 , 2 , 2 ) , 
 + row ( 1 , 1 , 1 , 3 , 3 ) , 
 + row ( 1 , 1 , 1 , 4 , 4 ) ) ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertTest . java 
 index a030613 . . c9a9faf 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertTest . java 
 @ @ - 285 , 12 + 285 , 6 @ @ public class InsertTest extends CQLTester 
 " INSERT INTO % s ( partitionKey , clustering _ 2 , staticValue ) VALUES ( 0 , 0 , ' A ' ) " ) ; 
 } 
 
 - private void flush ( boolean forceFlush ) 
 - { 
 - if ( forceFlush ) 
 - flush ( ) ; 
 - } 
 - 
 @ Test 
 public void testPKInsertWithValueOver64K ( ) throws Throwable 
 { 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertUpdateIfConditionTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertUpdateIfConditionTest . java 
 index f1dc9a2 . . fd02a69 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertUpdateIfConditionTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertUpdateIfConditionTest . java 
 @ @ - 119 , 6 + 119 , 8 @ @ public class InsertUpdateIfConditionTest extends CQLTester 
 
 createTable ( " CREATE TABLE % s ( k int , c int , v1 text , PRIMARY KEY ( k , c ) ) " ) ; 
 assertInvalidMessage ( " IN on the clustering key columns is not supported with conditional updates " , 
 + " UPDATE % s SET v1 = ' A ' WHERE k = 0 AND c IN ( ) IF EXISTS " ) ; 
 + assertInvalidMessage ( " IN on the clustering key columns is not supported with conditional updates " , 
 " UPDATE % s SET v1 = ' A ' WHERE k = 0 AND c IN ( 1 , 2 ) IF EXISTS " ) ; 
 } 
 
 @ @ - 227 , 7 + 229 , 11 @ @ public class InsertUpdateIfConditionTest extends CQLTester 
 assertInvalidMessage ( " IN on the clustering key columns is not supported with conditional deletions " , 
 " DELETE FROM % s WHERE k = ' k ' AND i IN ( 0 , 1 ) IF v = ' foo ' " ) ; 
 assertInvalidMessage ( " IN on the clustering key columns is not supported with conditional deletions " , 
 + " DELETE FROM % s WHERE k = ' k ' AND i IN ( ) IF v = ' foo ' " ) ; 
 + assertInvalidMessage ( " IN on the clustering key columns is not supported with conditional deletions " , 
 " DELETE FROM % s WHERE k = ' k ' AND i IN ( 0 , 1 ) IF EXISTS " ) ; 
 + assertInvalidMessage ( " IN on the clustering key columns is not supported with conditional deletions " , 
 + " DELETE FROM % s WHERE k = ' k ' AND i IN ( ) IF EXISTS " ) ; 
 
 assertInvalidMessage ( " Invalid ' unset ' value in condition " , 
 " DELETE FROM % s WHERE k = ' k ' AND i = 0 IF v = ? " , unset ( ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java 
 index 0170ed2 . . 690d4f9 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / UpdateTest . java 
 @ @ - 521 , 9 + 521 , 72 @ @ public class UpdateTest extends CQLTester 
 assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , row ( list ( " v1 " , " v4 " , " v3 " ) ) ) ; 
 } 
 
 - private void flush ( boolean forceFlush ) 
 + / * * 
 + * Test for CASSANDRA - 12829 
 + * / 
 + @ Test 
 + public void testUpdateWithEmptyInRestriction ( ) throws Throwable 
 { 
 - if ( forceFlush ) 
 - flush ( ) ; 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 1 , 1 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 2 , 2 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 1 , 3 , 3 ) ; 
 + 
 + assertInvalidMessage ( " Some clustering keys are missing : b " , 
 + " UPDATE % s SET c = 100 WHERE a IN ( ) ; " ) ; 
 + execute ( " UPDATE % s SET c = 100 WHERE a IN ( ) AND b IN ( ) ; " ) ; 
 + execute ( " UPDATE % s SET c = 100 WHERE a IN ( ) AND b = 1 ; " ) ; 
 + execute ( " UPDATE % s SET c = 100 WHERE a = 1 AND b IN ( ) ; " ) ; 
 + assertRows ( execute ( " SELECT * FROM % s " ) , 
 + row ( 1 , 1 , 1 ) , 
 + row ( 1 , 2 , 2 ) , 
 + row ( 1 , 3 , 3 ) ) ; 
 + 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , s int static , PRIMARY KEY ( ( a , b ) , c ) ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , s ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 1 , 1 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , s ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 2 , 2 , 1 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , s ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 3 , 3 , 1 ) ; 
 + 
 + execute ( " UPDATE % s SET d = 100 WHERE a = 1 AND b = 1 AND c IN ( ) ; " ) ; 
 + execute ( " UPDATE % s SET d = 100 WHERE a = 1 AND b IN ( ) AND c IN ( ) ; " ) ; 
 + execute ( " UPDATE % s SET d = 100 WHERE a IN ( ) AND b IN ( ) AND c IN ( ) ; " ) ; 
 + execute ( " UPDATE % s SET d = 100 WHERE a IN ( ) AND b IN ( ) AND c = 1 ; " ) ; 
 + execute ( " UPDATE % s SET d = 100 WHERE a IN ( ) AND b = 1 AND c IN ( ) ; " ) ; 
 + assertRows ( execute ( " SELECT * FROM % s " ) , 
 + row ( 1 , 1 , 1 , 1 , 1 ) , 
 + row ( 1 , 1 , 2 , 1 , 2 ) , 
 + row ( 1 , 1 , 3 , 1 , 3 ) ) ; 
 + 
 + / / No clustering keys restricted , update whole partition 
 + execute ( " UPDATE % s set s = 100 where a = 1 AND b = 1 ; " ) ; 
 + assertRows ( execute ( " SELECT * FROM % s " ) , 
 + row ( 1 , 1 , 1 , 100 , 1 ) , 
 + row ( 1 , 1 , 2 , 100 , 2 ) , 
 + row ( 1 , 1 , 3 , 100 , 3 ) ) ; 
 + 
 + execute ( " UPDATE % s set s = 200 where a = 1 AND b IN ( ) ; " ) ; 
 + assertRows ( execute ( " SELECT * FROM % s " ) , 
 + row ( 1 , 1 , 1 , 100 , 1 ) , 
 + row ( 1 , 1 , 2 , 100 , 2 ) , 
 + row ( 1 , 1 , 3 , 100 , 3 ) ) ; 
 + 
 + createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , e int , PRIMARY KEY ( ( a , b ) , c , d ) ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , e ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 1 , 1 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , e ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 2 , 2 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , e ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 3 , 3 ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , e ) VALUES ( ? , ? , ? , ? , ? ) " , 1 , 1 , 1 , 4 , 4 ) ; 
 + 
 + execute ( " UPDATE % s SET e = 100 WHERE a = 1 AND b = 1 AND c = 1 AND d IN ( ) ; " ) ; 
 + execute ( " UPDATE % s SET e = 100 WHERE a = 1 AND b = 1 AND c IN ( ) AND d IN ( ) ; " ) ; 
 + execute ( " UPDATE % s SET e = 100 WHERE a = 1 AND b IN ( ) AND c IN ( ) AND d IN ( ) ; " ) ; 
 + execute ( " UPDATE % s SET e = 100 WHERE a IN ( ) AND b IN ( ) AND c IN ( ) AND d IN ( ) ; " ) ; 
 + execute ( " UPDATE % s SET e = 100 WHERE a IN ( ) AND b IN ( ) AND c IN ( ) AND d = 1 ; " ) ; 
 + execute ( " UPDATE % s SET e = 100 WHERE a IN ( ) AND b IN ( ) AND c = 1 AND d = 1 ; " ) ; 
 + execute ( " UPDATE % s SET e = 100 WHERE a IN ( ) AND b IN ( ) AND c = 1 AND d IN ( ) ; " ) ; 
 + assertRows ( execute ( " SELECT * FROM % s " ) , 
 + row ( 1 , 1 , 1 , 1 , 1 ) , 
 + row ( 1 , 1 , 1 , 2 , 2 ) , 
 + row ( 1 , 1 , 1 , 3 , 3 ) , 
 + row ( 1 , 1 , 1 , 4 , 4 ) ) ; 
 } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
