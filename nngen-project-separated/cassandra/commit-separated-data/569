BLEU SCORE: 0.05522397783539469

TEST MSG: cqlsh auto completion : refactor definition of compaction strategy options
GENERATED MSG: cqlsh : Add min _ threshold to DTCS autocomplete options

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 3f47bab . . 32a3f32 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 12 <nl> + * cqlsh auto completion : refactor definition of compaction strategy options ( CASSANDRA - 12946 ) <nl> * Add support for arithmetic operators ( CASSANDRA - 11935 ) <nl> <nl> 3 . 11 <nl> diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index f759422 . . 3c21bc8 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 79 , 6 + 79 , 33 @ @ class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : <nl> ' SERIAL ' <nl> ) <nl> <nl> + size _ tiered _ compaction _ strategy _ options = ( <nl> + ' min _ sstable _ size ' , <nl> + ' min _ threshold ' , <nl> + ' bucket _ high ' , <nl> + ' bucket _ low ' <nl> + ) <nl> + <nl> + leveled _ compaction _ strategy _ options = ( <nl> + ' sstable _ size _ in _ mb ' , <nl> + ' fanout _ size ' <nl> + ) <nl> + <nl> + date _ tiered _ compaction _ strategy _ options = ( <nl> + ' base _ time _ seconds ' , <nl> + ' max _ sstable _ age _ days ' , <nl> + ' min _ threshold ' , <nl> + ' max _ window _ size _ seconds ' , <nl> + ' timestamp _ resolution ' <nl> + ) <nl> + <nl> + time _ window _ compaction _ strategy _ options = ( <nl> + ' compaction _ window _ unit ' , <nl> + ' compaction _ window _ size ' , <nl> + ' min _ threshold ' , <nl> + ' timestamp _ resolution ' <nl> + ) <nl> + <nl> @ classmethod <nl> def escape _ value ( cls , value ) : <nl> if value is None : <nl> @ @ - 506 , 25 + 533 , 13 @ @ def cf _ prop _ val _ mapkey _ completer ( ctxt , cass ) : <nl> return [ " ' class ' " ] <nl> csc = csc . split ( ' . ' ) [ - 1 ] <nl> if csc = = ' SizeTieredCompactionStrategy ' : <nl> - opts . add ( ' min _ sstable _ size ' ) <nl> - opts . add ( ' min _ threshold ' ) <nl> - opts . add ( ' bucket _ high ' ) <nl> - opts . add ( ' bucket _ low ' ) <nl> + opts = opts . union ( set ( CqlRuleSet . size _ tiered _ compaction _ strategy _ options ) ) <nl> elif csc = = ' LeveledCompactionStrategy ' : <nl> - opts . add ( ' sstable _ size _ in _ mb ' ) <nl> - opts . add ( ' fanout _ size ' ) <nl> + opts = opts . union ( set ( CqlRuleSet . leveled _ compaction _ strategy _ options ) ) <nl> elif csc = = ' DateTieredCompactionStrategy ' : <nl> - opts . add ( ' base _ time _ seconds ' ) <nl> - opts . add ( ' max _ sstable _ age _ days ' ) <nl> - opts . add ( ' min _ threshold ' ) <nl> - opts . add ( ' max _ window _ size _ seconds ' ) <nl> - opts . add ( ' timestamp _ resolution ' ) <nl> + opts = opts . union ( set ( CqlRuleSet . date _ tiered _ compaction _ strategy _ options ) ) <nl> elif csc = = ' TimeWindowCompactionStrategy ' : <nl> - opts . add ( ' compaction _ window _ unit ' ) <nl> - opts . add ( ' compaction _ window _ size ' ) <nl> - opts . add ( ' min _ threshold ' ) <nl> - opts . add ( ' max _ threshold ' ) <nl> - opts . add ( ' timestamp _ resolution ' ) <nl> + opts = opts . union ( set ( CqlRuleSet . time _ window _ compaction _ strategy _ options ) ) <nl> <nl> return map ( escape _ value , opts ) <nl> return ( )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 3f47bab . . 32a3f32 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 12 
 + * cqlsh auto completion : refactor definition of compaction strategy options ( CASSANDRA - 12946 ) 
 * Add support for arithmetic operators ( CASSANDRA - 11935 ) 
 
 3 . 11 
 diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index f759422 . . 3c21bc8 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 79 , 6 + 79 , 33 @ @ class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : 
 ' SERIAL ' 
 ) 
 
 + size _ tiered _ compaction _ strategy _ options = ( 
 + ' min _ sstable _ size ' , 
 + ' min _ threshold ' , 
 + ' bucket _ high ' , 
 + ' bucket _ low ' 
 + ) 
 + 
 + leveled _ compaction _ strategy _ options = ( 
 + ' sstable _ size _ in _ mb ' , 
 + ' fanout _ size ' 
 + ) 
 + 
 + date _ tiered _ compaction _ strategy _ options = ( 
 + ' base _ time _ seconds ' , 
 + ' max _ sstable _ age _ days ' , 
 + ' min _ threshold ' , 
 + ' max _ window _ size _ seconds ' , 
 + ' timestamp _ resolution ' 
 + ) 
 + 
 + time _ window _ compaction _ strategy _ options = ( 
 + ' compaction _ window _ unit ' , 
 + ' compaction _ window _ size ' , 
 + ' min _ threshold ' , 
 + ' timestamp _ resolution ' 
 + ) 
 + 
 @ classmethod 
 def escape _ value ( cls , value ) : 
 if value is None : 
 @ @ - 506 , 25 + 533 , 13 @ @ def cf _ prop _ val _ mapkey _ completer ( ctxt , cass ) : 
 return [ " ' class ' " ] 
 csc = csc . split ( ' . ' ) [ - 1 ] 
 if csc = = ' SizeTieredCompactionStrategy ' : 
 - opts . add ( ' min _ sstable _ size ' ) 
 - opts . add ( ' min _ threshold ' ) 
 - opts . add ( ' bucket _ high ' ) 
 - opts . add ( ' bucket _ low ' ) 
 + opts = opts . union ( set ( CqlRuleSet . size _ tiered _ compaction _ strategy _ options ) ) 
 elif csc = = ' LeveledCompactionStrategy ' : 
 - opts . add ( ' sstable _ size _ in _ mb ' ) 
 - opts . add ( ' fanout _ size ' ) 
 + opts = opts . union ( set ( CqlRuleSet . leveled _ compaction _ strategy _ options ) ) 
 elif csc = = ' DateTieredCompactionStrategy ' : 
 - opts . add ( ' base _ time _ seconds ' ) 
 - opts . add ( ' max _ sstable _ age _ days ' ) 
 - opts . add ( ' min _ threshold ' ) 
 - opts . add ( ' max _ window _ size _ seconds ' ) 
 - opts . add ( ' timestamp _ resolution ' ) 
 + opts = opts . union ( set ( CqlRuleSet . date _ tiered _ compaction _ strategy _ options ) ) 
 elif csc = = ' TimeWindowCompactionStrategy ' : 
 - opts . add ( ' compaction _ window _ unit ' ) 
 - opts . add ( ' compaction _ window _ size ' ) 
 - opts . add ( ' min _ threshold ' ) 
 - opts . add ( ' max _ threshold ' ) 
 - opts . add ( ' timestamp _ resolution ' ) 
 + opts = opts . union ( set ( CqlRuleSet . time _ window _ compaction _ strategy _ options ) ) 
 
 return map ( escape _ value , opts ) 
 return ( )

NEAREST DIFF:
ELIMINATEDSENTENCE
