BLEU SCORE: 0.05522397783539471

TEST MSG: Outbound TCP connections should consult internode authenticator .
GENERATED MSG: Allow encryption only between datacenters .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index fb9b8c4 . . b42bde6 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Outbound TCP connections ignore internode authenticator ( CASSANDRA - 13324 ) <nl> * Upgrade junit from 4 . 6 to 4 . 12 ( CASSANDRA - 13360 ) <nl> * Cleanup ParentRepairSession after repairs ( CASSANDRA - 13359 ) <nl> * Incremental repair not streaming correct sstables ( CASSANDRA - 13328 ) <nl> diff - - git a / src / java / org / apache / cassandra / auth / AuthConfig . java b / src / java / org / apache / cassandra / auth / AuthConfig . java <nl> index c389ae4 . . 2ca1522 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / AuthConfig . java <nl> + + + b / src / java / org / apache / cassandra / auth / AuthConfig . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . hsqldb . Database ; <nl> <nl> / * * <nl> * Only purpose is to Initialize authentication / authorization via { @ link # applyAuth ( ) } . <nl> @ @ - 94 , 13 + 95 , 8 @ @ public final class AuthConfig <nl> <nl> / / authenticator <nl> <nl> - IInternodeAuthenticator internodeAuthenticator ; <nl> if ( conf . internode _ authenticator ! = null ) <nl> - internodeAuthenticator = FBUtilities . construct ( conf . internode _ authenticator , " internode _ authenticator " ) ; <nl> - else <nl> - internodeAuthenticator = new AllowAllInternodeAuthenticator ( ) ; <nl> - <nl> - DatabaseDescriptor . setInternodeAuthenticator ( internodeAuthenticator ) ; <nl> + DatabaseDescriptor . setInternodeAuthenticator ( FBUtilities . construct ( conf . internode _ authenticator , " internode _ authenticator " ) ) ; <nl> <nl> / / Validate at last to have authenticator , authorizer , role - manager and internode - auth setup <nl> / / in case these rely on each other . <nl> @ @ - 108 , 6 + 104 , 6 @ @ public final class AuthConfig <nl> authenticator . validateConfiguration ( ) ; <nl> authorizer . validateConfiguration ( ) ; <nl> roleManager . validateConfiguration ( ) ; <nl> - internodeAuthenticator . validateConfiguration ( ) ; <nl> + DatabaseDescriptor . getInternodeAuthenticator ( ) . validateConfiguration ( ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 4fb742c . . 465cd8a 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import java . nio . file . Paths ; <nl> import java . util . * ; <nl> <nl> import com . google . common . annotations . VisibleForTesting ; <nl> + import com . google . common . base . Preconditions ; <nl> import com . google . common . collect . ImmutableSet ; <nl> import com . google . common . primitives . Ints ; <nl> import com . google . common . primitives . Longs ; <nl> @ @ - 36 , 6 + 37 , 7 @ @ import com . google . common . primitives . Longs ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . auth . AllowAllInternodeAuthenticator ; <nl> import org . apache . cassandra . auth . AuthConfig ; <nl> import org . apache . cassandra . auth . IAuthenticator ; <nl> import org . apache . cassandra . auth . IAuthorizer ; <nl> @ @ - 79 , 7 + 81 , 7 @ @ public class DatabaseDescriptor <nl> private static InetAddress rpcAddress ; <nl> private static InetAddress broadcastRpcAddress ; <nl> private static SeedProvider seedProvider ; <nl> - private static IInternodeAuthenticator internodeAuthenticator ; <nl> + private static IInternodeAuthenticator internodeAuthenticator = new AllowAllInternodeAuthenticator ( ) ; <nl> <nl> / * Hashing strategy Random or OPHF * / <nl> private static IPartitioner partitioner ; <nl> @ @ - 1538 , 6 + 1540 , 7 @ @ public class DatabaseDescriptor <nl> <nl> public static void setInternodeAuthenticator ( IInternodeAuthenticator internodeAuthenticator ) <nl> { <nl> + Preconditions . checkNotNull ( internodeAuthenticator ) ; <nl> DatabaseDescriptor . internodeAuthenticator = internodeAuthenticator ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / locator / ReconnectableSnitchHelper . java b / src / java / org / apache / cassandra / locator / ReconnectableSnitchHelper . java <nl> index a6bec0c . . 08f0a14 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / ReconnectableSnitchHelper . java <nl> + + + b / src / java / org / apache / cassandra / locator / ReconnectableSnitchHelper . java <nl> @ @ - 21 , 8 + 21 , 12 @ @ package org . apache . cassandra . locator ; <nl> import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> + <nl> import org . apache . cassandra . gms . * ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> + import org . apache . cassandra . net . OutboundTcpConnectionPool ; <nl> + <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 49 , 7 + 53 , 7 @ @ public class ReconnectableSnitchHelper implements IEndpointStateChangeSubscriber <nl> { <nl> try <nl> { <nl> - reconnect ( publicAddress , InetAddress . getByName ( localAddressValue . value ) ) ; <nl> + reconnect ( publicAddress , InetAddress . getByName ( localAddressValue . value ) , snitch , localDc ) ; <nl> } <nl> catch ( UnknownHostException e ) <nl> { <nl> @ @ - 57 , 12 + 61 , 21 @ @ public class ReconnectableSnitchHelper implements IEndpointStateChangeSubscriber <nl> } <nl> } <nl> <nl> - private void reconnect ( InetAddress publicAddress , InetAddress localAddress ) <nl> + @ VisibleForTesting <nl> + static void reconnect ( InetAddress publicAddress , InetAddress localAddress , IEndpointSnitch snitch , String localDc ) <nl> { <nl> + OutboundTcpConnectionPool cp = MessagingService . instance ( ) . getConnectionPool ( publicAddress ) ; <nl> + / / InternodeAuthenticator said don ' t connect <nl> + if ( cp = = null ) <nl> + { <nl> + logger . debug ( " InternodeAuthenticator said don ' t reconnect to { } on { } " , publicAddress , localAddress ) ; <nl> + return ; <nl> + } <nl> + <nl> if ( snitch . getDatacenter ( publicAddress ) . equals ( localDc ) <nl> - & & ! MessagingService . instance ( ) . getConnectionPool ( publicAddress ) . endPoint ( ) . equals ( localAddress ) ) <nl> + & & ! cp . endPoint ( ) . equals ( localAddress ) ) <nl> { <nl> - MessagingService . instance ( ) . getConnectionPool ( publicAddress ) . reset ( localAddress ) ; <nl> + cp . reset ( localAddress ) ; <nl> logger . debug ( " Initiated reconnect to an Internal IP { } for the { } " , localAddress , publicAddress ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 729c042 . . 55604d0 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 416 , 7 + 416 , 8 @ @ public final class MessagingService implements MessagingServiceMBean <nl> / * Lookup table for registering message handlers based on the verb . * / <nl> private final Map < Verb , IVerbHandler > verbHandlers ; <nl> <nl> - private final ConcurrentMap < InetAddress , OutboundTcpConnectionPool > connectionManagers = new NonBlockingHashMap < > ( ) ; <nl> + @ VisibleForTesting <nl> + final ConcurrentMap < InetAddress , OutboundTcpConnectionPool > connectionManagers = new NonBlockingHashMap < > ( ) ; <nl> <nl> private static final Logger logger = LoggerFactory . getLogger ( MessagingService . class ) ; <nl> private static final int LOG _ DROPPED _ INTERVAL _ IN _ MS = 5000 ; <nl> @ @ - 531 , 6 + 532 , 10 @ @ public final class MessagingService implements MessagingServiceMBean <nl> maybeAddLatency ( expiredCallbackInfo . callback , expiredCallbackInfo . target , pair . right . timeout ) ; <nl> <nl> ConnectionMetrics . totalTimeouts . mark ( ) ; <nl> + OutboundTcpConnectionPool cp = getConnectionPool ( expiredCallbackInfo . target ) ; <nl> + if ( cp ! = null ) <nl> + cp . incrementTimeout ( ) ; <nl> + <nl> getConnectionPool ( expiredCallbackInfo . target ) . incrementTimeout ( ) ; <nl> <nl> if ( expiredCallbackInfo . callback . supportsBackPressure ( ) ) <nl> @ @ - 670 , 8 + 675 , 16 @ @ public final class MessagingService implements MessagingServiceMBean <nl> * / <nl> public void convict ( InetAddress ep ) <nl> { <nl> - logger . trace ( " Resetting pool for { } " , ep ) ; <nl> - getConnectionPool ( ep ) . reset ( ) ; <nl> + OutboundTcpConnectionPool cp = getConnectionPool ( ep ) ; <nl> + if ( cp ! = null ) <nl> + { <nl> + logger . trace ( " Resetting pool for { } " , ep ) ; <nl> + getConnectionPool ( ep ) . reset ( ) ; <nl> + } <nl> + else <nl> + { <nl> + logger . debug ( " Not resetting pool for { } because internode authenticator said not to connect " , ep ) ; <nl> + } <nl> } <nl> <nl> public void listen ( ) <nl> @ @ - 795 , 11 + 808 , 22 @ @ public final class MessagingService implements MessagingServiceMBean <nl> connectionManagers . remove ( to ) ; <nl> } <nl> <nl> + / * * <nl> + * Get a connection pool to the specified endpoint . Constructs one if none exists . <nl> + * <nl> + * Can return null if the InternodeAuthenticator fails to authenticate the node . <nl> + * @ param to <nl> + * @ return The connection pool or null if internode authenticator says not to <nl> + * / <nl> public OutboundTcpConnectionPool getConnectionPool ( InetAddress to ) <nl> { <nl> OutboundTcpConnectionPool cp = connectionManagers . get ( to ) ; <nl> if ( cp = = null ) <nl> { <nl> + / / Don ' t attempt to connect to nodes that won ' t ( or shouldn ' t ) authenticate anyways <nl> + if ( ! DatabaseDescriptor . getInternodeAuthenticator ( ) . authenticate ( to , OutboundTcpConnectionPool . portFor ( to ) ) ) <nl> + return null ; <nl> + <nl> cp = new OutboundTcpConnectionPool ( to , backPressure . newState ( to ) ) ; <nl> OutboundTcpConnectionPool existingPool = connectionManagers . putIfAbsent ( to , cp ) ; <nl> if ( existingPool ! = null ) <nl> @ @ - 811 , 10 + 835 , 17 @ @ public final class MessagingService implements MessagingServiceMBean <nl> return cp ; <nl> } <nl> <nl> - <nl> + / * * <nl> + * Get a connection for a message to a specific endpoint . Constructs one if none exists . <nl> + * <nl> + * Can return null if the InternodeAuthenticator fails to authenticate the node . <nl> + * @ param to <nl> + * @ return The connection or null if internode authenticator says not to <nl> + * / <nl> public OutboundTcpConnection getConnection ( InetAddress to , MessageOut msg ) <nl> { <nl> - return getConnectionPool ( to ) . getConnection ( msg ) ; <nl> + OutboundTcpConnectionPool cp = getConnectionPool ( to ) ; <nl> + return cp = = null ? null : cp . getConnection ( msg ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 968 , 7 + 999 , 8 @ @ public final class MessagingService implements MessagingServiceMBean <nl> OutboundTcpConnection connection = getConnection ( to , message ) ; <nl> <nl> / / write it <nl> - connection . enqueue ( message , id ) ; <nl> + if ( connection ! = null ) <nl> + connection . enqueue ( message , id ) ; <nl> } <nl> <nl> public < T > AsyncOneResponse < T > sendRR ( MessageOut message , InetAddress to ) <nl> diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> index feff527 . . 9b19eab 100644 <nl> - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> @ @ - 249 , 6 + 249 , 12 @ @ public class OutboundTcpConnection extends FastThreadLocalThread <nl> break inner ; <nl> } <nl> } <nl> + catch ( InternodeAuthFailed e ) <nl> + { <nl> + logger . warn ( " Internode auth failed connecting to " + poolReference . endPoint ( ) ) ; <nl> + / / Remove the connection pool and other thread so messages aren ' t queued <nl> + MessagingService . instance ( ) . destroyConnectionPool ( poolReference . endPoint ( ) ) ; <nl> + } <nl> catch ( Exception e ) <nl> { <nl> JVMStabilityInspector . inspectThrowable ( e ) ; <nl> @ @ - 394 , 20 + 400 , 27 @ @ public class OutboundTcpConnection extends FastThreadLocalThread <nl> } <nl> <nl> @ SuppressWarnings ( " resource " ) <nl> - private boolean connect ( ) <nl> + private boolean connect ( ) throws InternodeAuthFailed <nl> { <nl> - logger . debug ( " Attempting to connect to { } " , poolReference . endPoint ( ) ) ; <nl> + InetAddress endpoint = poolReference . endPoint ( ) ; <nl> + if ( ! DatabaseDescriptor . getInternodeAuthenticator ( ) . authenticate ( endpoint , poolReference . portFor ( endpoint ) ) ) <nl> + { <nl> + throw new InternodeAuthFailed ( ) ; <nl> + } <nl> + <nl> + logger . debug ( " Attempting to connect to { } " , endpoint ) ; <nl> + <nl> <nl> long start = System . nanoTime ( ) ; <nl> long timeout = TimeUnit . MILLISECONDS . toNanos ( DatabaseDescriptor . getRpcTimeout ( ) ) ; <nl> while ( System . nanoTime ( ) - start < timeout ) <nl> { <nl> - targetVersion = MessagingService . instance ( ) . getVersion ( poolReference . endPoint ( ) ) ; <nl> + targetVersion = MessagingService . instance ( ) . getVersion ( endpoint ) ; <nl> try <nl> { <nl> socket = poolReference . newSocket ( ) ; <nl> socket . setKeepAlive ( true ) ; <nl> - if ( isLocalDC ( poolReference . endPoint ( ) ) ) <nl> + if ( isLocalDC ( endpoint ) ) <nl> { <nl> socket . setTcpNoDelay ( INTRADC _ TCP _ NODELAY ) ; <nl> } <nl> @ @ - 446 , 7 + 459 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread <nl> } <nl> else <nl> { <nl> - MessagingService . instance ( ) . setVersion ( poolReference . endPoint ( ) , maxTargetVersion ) ; <nl> + MessagingService . instance ( ) . setVersion ( endpoint , maxTargetVersion ) ; <nl> } <nl> <nl> if ( targetVersion > maxTargetVersion ) <nl> @ @ - 454 , 7 + 467 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread <nl> logger . trace ( " Target max version is { } ; will reconnect with that version " , maxTargetVersion ) ; <nl> try <nl> { <nl> - if ( DatabaseDescriptor . getSeeds ( ) . contains ( poolReference . endPoint ( ) ) ) <nl> + if ( DatabaseDescriptor . getSeeds ( ) . contains ( endpoint ) ) <nl> logger . warn ( " Seed gossip version is { } ; will not connect with that version " , maxTargetVersion ) ; <nl> } <nl> catch ( Throwable e ) <nl> @ @ - 484 , 7 + 497 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread <nl> if ( shouldCompressConnection ( ) ) <nl> { <nl> out . flush ( ) ; <nl> - logger . trace ( " Upgrading OutputStream to { } to be compressed " , poolReference . endPoint ( ) ) ; <nl> + logger . trace ( " Upgrading OutputStream to { } to be compressed " , endpoint ) ; <nl> <nl> / / TODO : custom LZ4 OS that supports BB write methods <nl> LZ4Compressor compressor = LZ4Factory . fastestInstance ( ) . fastCompressor ( ) ; <nl> @ @ - 495 , 7 + 508 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread <nl> checksum , <nl> true ) ) ; / / no async flushing <nl> } <nl> - logger . debug ( " Done connecting to { } " , poolReference . endPoint ( ) ) ; <nl> + logger . debug ( " Done connecting to { } " , endpoint ) ; <nl> return true ; <nl> } <nl> catch ( SSLHandshakeException e ) <nl> @ @ - 508 , 7 + 521 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread <nl> catch ( IOException e ) <nl> { <nl> socket = null ; <nl> - logger . debug ( " Unable to connect to { } " , poolReference . endPoint ( ) , e ) ; <nl> + logger . debug ( " Unable to connect to { } " , endpoint , e ) ; <nl> Uninterruptibles . sleepUninterruptibly ( OPEN _ RETRY _ DELAY , TimeUnit . MILLISECONDS ) ; <nl> } <nl> } <nl> @ @ - 613 , 4 + 626 , 6 @ @ public class OutboundTcpConnection extends FastThreadLocalThread <nl> return false ; <nl> } <nl> } <nl> + <nl> + private static class InternodeAuthFailed extends Exception { } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnectionPool . java b / src / java / org / apache / cassandra / net / OutboundTcpConnectionPool . java <nl> index 9f9ffee . . 20a8da6 100644 <nl> - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnectionPool . java <nl> + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnectionPool . java <nl> @ @ - 148 , 6 + 148 , 11 @ @ public class OutboundTcpConnectionPool <nl> } <nl> } <nl> <nl> + public static int portFor ( InetAddress endpoint ) <nl> + { <nl> + return isEncryptedChannel ( endpoint ) ? DatabaseDescriptor . getSSLStoragePort ( ) : DatabaseDescriptor . getStoragePort ( ) ; <nl> + } <nl> + <nl> public InetAddress endPoint ( ) <nl> { <nl> if ( id . equals ( FBUtilities . getBroadcastAddress ( ) ) ) <nl> @ @ - 218 , 7 + 223 , 7 @ @ public class OutboundTcpConnectionPool <nl> smallMessages . closeSocket ( true ) ; <nl> if ( gossipMessages ! = null ) <nl> gossipMessages . closeSocket ( true ) ; <nl> - <nl> - metrics . release ( ) ; <nl> + if ( metrics ! = null ) <nl> + metrics . release ( ) ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / config / DatabaseDescriptorRefTest . java b / test / unit / org / apache / cassandra / config / DatabaseDescriptorRefTest . java <nl> index 17cdd77 . . c8f8bc1 100644 <nl> - - - a / test / unit / org / apache / cassandra / config / DatabaseDescriptorRefTest . java <nl> + + + b / test / unit / org / apache / cassandra / config / DatabaseDescriptorRefTest . java <nl> @ @ - 54 , 6 + 54 , 7 @ @ import static org . junit . Assert . fail ; <nl> public class DatabaseDescriptorRefTest <nl> { <nl> static final String [ ] validClasses = { <nl> + " org . apache . cassandra . auth . AllowAllInternodeAuthenticator " , <nl> " org . apache . cassandra . auth . IInternodeAuthenticator " , <nl> " org . apache . cassandra . auth . IAuthenticator " , <nl> " org . apache . cassandra . auth . IAuthorizer " , <nl> diff - - git a / test / unit / org / apache / cassandra / locator / ReconnectableSnitchHelperTest . java b / test / unit / org / apache / cassandra / locator / ReconnectableSnitchHelperTest . java <nl> new file mode 100644 <nl> index 0000000 . . 232865a <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / locator / ReconnectableSnitchHelperTest . java <nl> @ @ - 0 , 0 + 1 , 63 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . locator ; <nl> + <nl> + import java . net . InetAddress ; <nl> + import java . net . UnknownHostException ; <nl> + import java . util . Collections ; <nl> + <nl> + import org . junit . After ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . auth . IInternodeAuthenticator ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . net . MessagingServiceTest ; <nl> + <nl> + public class ReconnectableSnitchHelperTest <nl> + { <nl> + static final IInternodeAuthenticator originalAuthenticator = DatabaseDescriptor . getInternodeAuthenticator ( ) ; <nl> + <nl> + @ BeforeClass <nl> + public static void beforeClass ( ) throws UnknownHostException <nl> + { <nl> + DatabaseDescriptor . daemonInitialization ( ) ; <nl> + DatabaseDescriptor . setBackPressureStrategy ( new MessagingServiceTest . MockBackPressureStrategy ( Collections . emptyMap ( ) ) ) ; <nl> + DatabaseDescriptor . setBroadcastAddress ( InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Make sure that if a node fails internode authentication and MessagingService returns a null <nl> + * pool that ReconnectableSnitchHelper fails gracefully . <nl> + * / <nl> + @ Test <nl> + public void failedAuthentication ( ) throws Exception <nl> + { <nl> + DatabaseDescriptor . setInternodeAuthenticator ( MessagingServiceTest . ALLOW _ NOTHING _ AUTHENTICATOR ) ; <nl> + InetAddress address = InetAddress . getByName ( " 127 . 0 . 0 . 250 " ) ; <nl> + / / Should tolerate null returns by MS for the connection <nl> + ReconnectableSnitchHelper . reconnect ( address , address , null , null ) ; <nl> + } <nl> + <nl> + @ After <nl> + public void replaceAuthenticator ( ) <nl> + { <nl> + DatabaseDescriptor . setInternodeAuthenticator ( originalAuthenticator ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / net / MessagingServiceTest . java b / test / unit / org / apache / cassandra / net / MessagingServiceTest . java <nl> index d9a9915 . . e6b5cd0 100644 <nl> - - - a / test / unit / org / apache / cassandra / net / MessagingServiceTest . java <nl> + + + b / test / unit / org / apache / cassandra / net / MessagingServiceTest . java <nl> @ @ - 36 , 12 + 36 , 16 @ @ import java . util . concurrent . TimeUnit ; <nl> import com . google . common . collect . Iterables ; <nl> import com . codahale . metrics . Timer ; <nl> <nl> + import org . apache . cassandra . auth . IInternodeAuthenticator ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . monitoring . ApproximateTime ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . io . util . DataInputPlus . DataInputStreamPlus ; <nl> import org . apache . cassandra . io . util . DataOutputStreamPlus ; <nl> import org . apache . cassandra . io . util . WrappedDataOutputStreamPlus ; <nl> import org . caffinitas . ohc . histo . EstimatedHistogram ; <nl> + import org . junit . After ; <nl> import org . junit . Before ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> @ @ - 52 , 6 + 56 , 20 @ @ public class MessagingServiceTest <nl> { <nl> private final static long ONE _ SECOND = TimeUnit . NANOSECONDS . convert ( 1 , TimeUnit . SECONDS ) ; <nl> private final static long [ ] bucketOffsets = new EstimatedHistogram ( 160 ) . getBucketOffsets ( ) ; <nl> + public static final IInternodeAuthenticator ALLOW _ NOTHING _ AUTHENTICATOR = new IInternodeAuthenticator ( ) <nl> + { <nl> + public boolean authenticate ( InetAddress remoteAddress , int remotePort ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public void validateConfiguration ( ) throws ConfigurationException <nl> + { <nl> + <nl> + } <nl> + } ; <nl> + static final IInternodeAuthenticator originalAuthenticator = DatabaseDescriptor . getInternodeAuthenticator ( ) ; <nl> + <nl> private final MessagingService messagingService = MessagingService . test ( ) ; <nl> <nl> @ BeforeClass <nl> @ @ - 368 , 4 + 386 , 46 @ @ public class MessagingServiceTest <nl> throw new UnsupportedOperationException ( " Not supported . " ) ; <nl> } <nl> } <nl> + <nl> + / * * <nl> + * Make sure that if internode authenticatino fails for an outbound connection that all the code that relies <nl> + * on getting the connection pool handles the null return <nl> + * @ throws Exception <nl> + * / <nl> + @ Test <nl> + public void testFailedInternodeAuth ( ) throws Exception <nl> + { <nl> + MessagingService ms = MessagingService . instance ( ) ; <nl> + DatabaseDescriptor . setInternodeAuthenticator ( ALLOW _ NOTHING _ AUTHENTICATOR ) ; <nl> + InetAddress address = InetAddress . getByName ( " 127 . 0 . 0 . 250 " ) ; <nl> + <nl> + / / Should return null <nl> + assertNull ( ms . getConnectionPool ( address ) ) ; <nl> + assertNull ( ms . getConnection ( address , new MessageOut ( MessagingService . Verb . GOSSIP _ DIGEST _ ACK ) ) ) ; <nl> + <nl> + / / Should tolerate null <nl> + ms . convict ( address ) ; <nl> + ms . sendOneWay ( new MessageOut ( MessagingService . Verb . GOSSIP _ DIGEST _ ACK ) , address ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testOutboundTcpConnectionCleansUp ( ) throws Exception <nl> + { <nl> + MessagingService ms = MessagingService . instance ( ) ; <nl> + DatabaseDescriptor . setInternodeAuthenticator ( ALLOW _ NOTHING _ AUTHENTICATOR ) ; <nl> + InetAddress address = InetAddress . getByName ( " 127 . 0 . 0 . 250 " ) ; <nl> + OutboundTcpConnectionPool pool = new OutboundTcpConnectionPool ( address , new MockBackPressureStrategy ( null ) . newState ( address ) ) ; <nl> + ms . connectionManagers . put ( address , pool ) ; <nl> + pool . smallMessages . start ( ) ; <nl> + pool . smallMessages . enqueue ( new MessageOut ( MessagingService . Verb . GOSSIP _ DIGEST _ ACK ) , 0 ) ; <nl> + pool . smallMessages . join ( ) ; <nl> + assertFalse ( ms . connectionManagers . containsKey ( address ) ) ; <nl> + } <nl> + <nl> + @ After <nl> + public void replaceAuthenticator ( ) <nl> + { <nl> + DatabaseDescriptor . setInternodeAuthenticator ( originalAuthenticator ) ; <nl> + } <nl> + <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 848ea88 . . 6e9c555 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 25 , 6 + 25 , 7 @ @ <nl> * use CF / KS names as snapshot prefix for drop + truncate operations <nl> ( CASSANDRA - 2997 ) <nl> * Break bloom filters up to avoid heap fragmentation ( CASSANDRA - 2466 ) <nl> + * fix cassandra hanging on jsvc stop ( CASSANDRA - 3302 ) <nl> Merged from 0 . 8 : <nl> * ( CQL ) update grammar to require key clause in DELETE statement <nl> ( CASSANDRA - 3349 ) <nl> diff - - git a / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java b / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java <nl> index 38577f1 . . 4076d10 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java <nl> + + + b / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java <nl> @ @ - 174 , 4 + 174 , 12 @ @ public class TCustomServerSocket extends TServerTransport <nl> serverSocket _ = null ; <nl> } <nl> } <nl> + <nl> + @ Override <nl> + public void interrupt ( ) <nl> + { <nl> + / / The thread - safeness of this is dubious , but Java documentation suggests <nl> + / / that it is safe to do this from a different thread context <nl> + close ( ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index fb9b8c4 . . b42bde6 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Outbound TCP connections ignore internode authenticator ( CASSANDRA - 13324 ) 
 * Upgrade junit from 4 . 6 to 4 . 12 ( CASSANDRA - 13360 ) 
 * Cleanup ParentRepairSession after repairs ( CASSANDRA - 13359 ) 
 * Incremental repair not streaming correct sstables ( CASSANDRA - 13328 ) 
 diff - - git a / src / java / org / apache / cassandra / auth / AuthConfig . java b / src / java / org / apache / cassandra / auth / AuthConfig . java 
 index c389ae4 . . 2ca1522 100644 
 - - - a / src / java / org / apache / cassandra / auth / AuthConfig . java 
 + + + b / src / java / org / apache / cassandra / auth / AuthConfig . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 + import org . hsqldb . Database ; 
 
 / * * 
 * Only purpose is to Initialize authentication / authorization via { @ link # applyAuth ( ) } . 
 @ @ - 94 , 13 + 95 , 8 @ @ public final class AuthConfig 
 
 / / authenticator 
 
 - IInternodeAuthenticator internodeAuthenticator ; 
 if ( conf . internode _ authenticator ! = null ) 
 - internodeAuthenticator = FBUtilities . construct ( conf . internode _ authenticator , " internode _ authenticator " ) ; 
 - else 
 - internodeAuthenticator = new AllowAllInternodeAuthenticator ( ) ; 
 - 
 - DatabaseDescriptor . setInternodeAuthenticator ( internodeAuthenticator ) ; 
 + DatabaseDescriptor . setInternodeAuthenticator ( FBUtilities . construct ( conf . internode _ authenticator , " internode _ authenticator " ) ) ; 
 
 / / Validate at last to have authenticator , authorizer , role - manager and internode - auth setup 
 / / in case these rely on each other . 
 @ @ - 108 , 6 + 104 , 6 @ @ public final class AuthConfig 
 authenticator . validateConfiguration ( ) ; 
 authorizer . validateConfiguration ( ) ; 
 roleManager . validateConfiguration ( ) ; 
 - internodeAuthenticator . validateConfiguration ( ) ; 
 + DatabaseDescriptor . getInternodeAuthenticator ( ) . validateConfiguration ( ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 4fb742c . . 465cd8a 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import java . nio . file . Paths ; 
 import java . util . * ; 
 
 import com . google . common . annotations . VisibleForTesting ; 
 + import com . google . common . base . Preconditions ; 
 import com . google . common . collect . ImmutableSet ; 
 import com . google . common . primitives . Ints ; 
 import com . google . common . primitives . Longs ; 
 @ @ - 36 , 6 + 37 , 7 @ @ import com . google . common . primitives . Longs ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . auth . AllowAllInternodeAuthenticator ; 
 import org . apache . cassandra . auth . AuthConfig ; 
 import org . apache . cassandra . auth . IAuthenticator ; 
 import org . apache . cassandra . auth . IAuthorizer ; 
 @ @ - 79 , 7 + 81 , 7 @ @ public class DatabaseDescriptor 
 private static InetAddress rpcAddress ; 
 private static InetAddress broadcastRpcAddress ; 
 private static SeedProvider seedProvider ; 
 - private static IInternodeAuthenticator internodeAuthenticator ; 
 + private static IInternodeAuthenticator internodeAuthenticator = new AllowAllInternodeAuthenticator ( ) ; 
 
 / * Hashing strategy Random or OPHF * / 
 private static IPartitioner partitioner ; 
 @ @ - 1538 , 6 + 1540 , 7 @ @ public class DatabaseDescriptor 
 
 public static void setInternodeAuthenticator ( IInternodeAuthenticator internodeAuthenticator ) 
 { 
 + Preconditions . checkNotNull ( internodeAuthenticator ) ; 
 DatabaseDescriptor . internodeAuthenticator = internodeAuthenticator ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / locator / ReconnectableSnitchHelper . java b / src / java / org / apache / cassandra / locator / ReconnectableSnitchHelper . java 
 index a6bec0c . . 08f0a14 100644 
 - - - a / src / java / org / apache / cassandra / locator / ReconnectableSnitchHelper . java 
 + + + b / src / java / org / apache / cassandra / locator / ReconnectableSnitchHelper . java 
 @ @ - 21 , 8 + 21 , 12 @ @ package org . apache . cassandra . locator ; 
 import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 + 
 import org . apache . cassandra . gms . * ; 
 import org . apache . cassandra . net . MessagingService ; 
 + import org . apache . cassandra . net . OutboundTcpConnectionPool ; 
 + 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 49 , 7 + 53 , 7 @ @ public class ReconnectableSnitchHelper implements IEndpointStateChangeSubscriber 
 { 
 try 
 { 
 - reconnect ( publicAddress , InetAddress . getByName ( localAddressValue . value ) ) ; 
 + reconnect ( publicAddress , InetAddress . getByName ( localAddressValue . value ) , snitch , localDc ) ; 
 } 
 catch ( UnknownHostException e ) 
 { 
 @ @ - 57 , 12 + 61 , 21 @ @ public class ReconnectableSnitchHelper implements IEndpointStateChangeSubscriber 
 } 
 } 
 
 - private void reconnect ( InetAddress publicAddress , InetAddress localAddress ) 
 + @ VisibleForTesting 
 + static void reconnect ( InetAddress publicAddress , InetAddress localAddress , IEndpointSnitch snitch , String localDc ) 
 { 
 + OutboundTcpConnectionPool cp = MessagingService . instance ( ) . getConnectionPool ( publicAddress ) ; 
 + / / InternodeAuthenticator said don ' t connect 
 + if ( cp = = null ) 
 + { 
 + logger . debug ( " InternodeAuthenticator said don ' t reconnect to { } on { } " , publicAddress , localAddress ) ; 
 + return ; 
 + } 
 + 
 if ( snitch . getDatacenter ( publicAddress ) . equals ( localDc ) 
 - & & ! MessagingService . instance ( ) . getConnectionPool ( publicAddress ) . endPoint ( ) . equals ( localAddress ) ) 
 + & & ! cp . endPoint ( ) . equals ( localAddress ) ) 
 { 
 - MessagingService . instance ( ) . getConnectionPool ( publicAddress ) . reset ( localAddress ) ; 
 + cp . reset ( localAddress ) ; 
 logger . debug ( " Initiated reconnect to an Internal IP { } for the { } " , localAddress , publicAddress ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 729c042 . . 55604d0 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 416 , 7 + 416 , 8 @ @ public final class MessagingService implements MessagingServiceMBean 
 / * Lookup table for registering message handlers based on the verb . * / 
 private final Map < Verb , IVerbHandler > verbHandlers ; 
 
 - private final ConcurrentMap < InetAddress , OutboundTcpConnectionPool > connectionManagers = new NonBlockingHashMap < > ( ) ; 
 + @ VisibleForTesting 
 + final ConcurrentMap < InetAddress , OutboundTcpConnectionPool > connectionManagers = new NonBlockingHashMap < > ( ) ; 
 
 private static final Logger logger = LoggerFactory . getLogger ( MessagingService . class ) ; 
 private static final int LOG _ DROPPED _ INTERVAL _ IN _ MS = 5000 ; 
 @ @ - 531 , 6 + 532 , 10 @ @ public final class MessagingService implements MessagingServiceMBean 
 maybeAddLatency ( expiredCallbackInfo . callback , expiredCallbackInfo . target , pair . right . timeout ) ; 
 
 ConnectionMetrics . totalTimeouts . mark ( ) ; 
 + OutboundTcpConnectionPool cp = getConnectionPool ( expiredCallbackInfo . target ) ; 
 + if ( cp ! = null ) 
 + cp . incrementTimeout ( ) ; 
 + 
 getConnectionPool ( expiredCallbackInfo . target ) . incrementTimeout ( ) ; 
 
 if ( expiredCallbackInfo . callback . supportsBackPressure ( ) ) 
 @ @ - 670 , 8 + 675 , 16 @ @ public final class MessagingService implements MessagingServiceMBean 
 * / 
 public void convict ( InetAddress ep ) 
 { 
 - logger . trace ( " Resetting pool for { } " , ep ) ; 
 - getConnectionPool ( ep ) . reset ( ) ; 
 + OutboundTcpConnectionPool cp = getConnectionPool ( ep ) ; 
 + if ( cp ! = null ) 
 + { 
 + logger . trace ( " Resetting pool for { } " , ep ) ; 
 + getConnectionPool ( ep ) . reset ( ) ; 
 + } 
 + else 
 + { 
 + logger . debug ( " Not resetting pool for { } because internode authenticator said not to connect " , ep ) ; 
 + } 
 } 
 
 public void listen ( ) 
 @ @ - 795 , 11 + 808 , 22 @ @ public final class MessagingService implements MessagingServiceMBean 
 connectionManagers . remove ( to ) ; 
 } 
 
 + / * * 
 + * Get a connection pool to the specified endpoint . Constructs one if none exists . 
 + * 
 + * Can return null if the InternodeAuthenticator fails to authenticate the node . 
 + * @ param to 
 + * @ return The connection pool or null if internode authenticator says not to 
 + * / 
 public OutboundTcpConnectionPool getConnectionPool ( InetAddress to ) 
 { 
 OutboundTcpConnectionPool cp = connectionManagers . get ( to ) ; 
 if ( cp = = null ) 
 { 
 + / / Don ' t attempt to connect to nodes that won ' t ( or shouldn ' t ) authenticate anyways 
 + if ( ! DatabaseDescriptor . getInternodeAuthenticator ( ) . authenticate ( to , OutboundTcpConnectionPool . portFor ( to ) ) ) 
 + return null ; 
 + 
 cp = new OutboundTcpConnectionPool ( to , backPressure . newState ( to ) ) ; 
 OutboundTcpConnectionPool existingPool = connectionManagers . putIfAbsent ( to , cp ) ; 
 if ( existingPool ! = null ) 
 @ @ - 811 , 10 + 835 , 17 @ @ public final class MessagingService implements MessagingServiceMBean 
 return cp ; 
 } 
 
 - 
 + / * * 
 + * Get a connection for a message to a specific endpoint . Constructs one if none exists . 
 + * 
 + * Can return null if the InternodeAuthenticator fails to authenticate the node . 
 + * @ param to 
 + * @ return The connection or null if internode authenticator says not to 
 + * / 
 public OutboundTcpConnection getConnection ( InetAddress to , MessageOut msg ) 
 { 
 - return getConnectionPool ( to ) . getConnection ( msg ) ; 
 + OutboundTcpConnectionPool cp = getConnectionPool ( to ) ; 
 + return cp = = null ? null : cp . getConnection ( msg ) ; 
 } 
 
 / * * 
 @ @ - 968 , 7 + 999 , 8 @ @ public final class MessagingService implements MessagingServiceMBean 
 OutboundTcpConnection connection = getConnection ( to , message ) ; 
 
 / / write it 
 - connection . enqueue ( message , id ) ; 
 + if ( connection ! = null ) 
 + connection . enqueue ( message , id ) ; 
 } 
 
 public < T > AsyncOneResponse < T > sendRR ( MessageOut message , InetAddress to ) 
 diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 index feff527 . . 9b19eab 100644 
 - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 @ @ - 249 , 6 + 249 , 12 @ @ public class OutboundTcpConnection extends FastThreadLocalThread 
 break inner ; 
 } 
 } 
 + catch ( InternodeAuthFailed e ) 
 + { 
 + logger . warn ( " Internode auth failed connecting to " + poolReference . endPoint ( ) ) ; 
 + / / Remove the connection pool and other thread so messages aren ' t queued 
 + MessagingService . instance ( ) . destroyConnectionPool ( poolReference . endPoint ( ) ) ; 
 + } 
 catch ( Exception e ) 
 { 
 JVMStabilityInspector . inspectThrowable ( e ) ; 
 @ @ - 394 , 20 + 400 , 27 @ @ public class OutboundTcpConnection extends FastThreadLocalThread 
 } 
 
 @ SuppressWarnings ( " resource " ) 
 - private boolean connect ( ) 
 + private boolean connect ( ) throws InternodeAuthFailed 
 { 
 - logger . debug ( " Attempting to connect to { } " , poolReference . endPoint ( ) ) ; 
 + InetAddress endpoint = poolReference . endPoint ( ) ; 
 + if ( ! DatabaseDescriptor . getInternodeAuthenticator ( ) . authenticate ( endpoint , poolReference . portFor ( endpoint ) ) ) 
 + { 
 + throw new InternodeAuthFailed ( ) ; 
 + } 
 + 
 + logger . debug ( " Attempting to connect to { } " , endpoint ) ; 
 + 
 
 long start = System . nanoTime ( ) ; 
 long timeout = TimeUnit . MILLISECONDS . toNanos ( DatabaseDescriptor . getRpcTimeout ( ) ) ; 
 while ( System . nanoTime ( ) - start < timeout ) 
 { 
 - targetVersion = MessagingService . instance ( ) . getVersion ( poolReference . endPoint ( ) ) ; 
 + targetVersion = MessagingService . instance ( ) . getVersion ( endpoint ) ; 
 try 
 { 
 socket = poolReference . newSocket ( ) ; 
 socket . setKeepAlive ( true ) ; 
 - if ( isLocalDC ( poolReference . endPoint ( ) ) ) 
 + if ( isLocalDC ( endpoint ) ) 
 { 
 socket . setTcpNoDelay ( INTRADC _ TCP _ NODELAY ) ; 
 } 
 @ @ - 446 , 7 + 459 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread 
 } 
 else 
 { 
 - MessagingService . instance ( ) . setVersion ( poolReference . endPoint ( ) , maxTargetVersion ) ; 
 + MessagingService . instance ( ) . setVersion ( endpoint , maxTargetVersion ) ; 
 } 
 
 if ( targetVersion > maxTargetVersion ) 
 @ @ - 454 , 7 + 467 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread 
 logger . trace ( " Target max version is { } ; will reconnect with that version " , maxTargetVersion ) ; 
 try 
 { 
 - if ( DatabaseDescriptor . getSeeds ( ) . contains ( poolReference . endPoint ( ) ) ) 
 + if ( DatabaseDescriptor . getSeeds ( ) . contains ( endpoint ) ) 
 logger . warn ( " Seed gossip version is { } ; will not connect with that version " , maxTargetVersion ) ; 
 } 
 catch ( Throwable e ) 
 @ @ - 484 , 7 + 497 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread 
 if ( shouldCompressConnection ( ) ) 
 { 
 out . flush ( ) ; 
 - logger . trace ( " Upgrading OutputStream to { } to be compressed " , poolReference . endPoint ( ) ) ; 
 + logger . trace ( " Upgrading OutputStream to { } to be compressed " , endpoint ) ; 
 
 / / TODO : custom LZ4 OS that supports BB write methods 
 LZ4Compressor compressor = LZ4Factory . fastestInstance ( ) . fastCompressor ( ) ; 
 @ @ - 495 , 7 + 508 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread 
 checksum , 
 true ) ) ; / / no async flushing 
 } 
 - logger . debug ( " Done connecting to { } " , poolReference . endPoint ( ) ) ; 
 + logger . debug ( " Done connecting to { } " , endpoint ) ; 
 return true ; 
 } 
 catch ( SSLHandshakeException e ) 
 @ @ - 508 , 7 + 521 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread 
 catch ( IOException e ) 
 { 
 socket = null ; 
 - logger . debug ( " Unable to connect to { } " , poolReference . endPoint ( ) , e ) ; 
 + logger . debug ( " Unable to connect to { } " , endpoint , e ) ; 
 Uninterruptibles . sleepUninterruptibly ( OPEN _ RETRY _ DELAY , TimeUnit . MILLISECONDS ) ; 
 } 
 } 
 @ @ - 613 , 4 + 626 , 6 @ @ public class OutboundTcpConnection extends FastThreadLocalThread 
 return false ; 
 } 
 } 
 + 
 + private static class InternodeAuthFailed extends Exception { } 
 } 
 diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnectionPool . java b / src / java / org / apache / cassandra / net / OutboundTcpConnectionPool . java 
 index 9f9ffee . . 20a8da6 100644 
 - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnectionPool . java 
 + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnectionPool . java 
 @ @ - 148 , 6 + 148 , 11 @ @ public class OutboundTcpConnectionPool 
 } 
 } 
 
 + public static int portFor ( InetAddress endpoint ) 
 + { 
 + return isEncryptedChannel ( endpoint ) ? DatabaseDescriptor . getSSLStoragePort ( ) : DatabaseDescriptor . getStoragePort ( ) ; 
 + } 
 + 
 public InetAddress endPoint ( ) 
 { 
 if ( id . equals ( FBUtilities . getBroadcastAddress ( ) ) ) 
 @ @ - 218 , 7 + 223 , 7 @ @ public class OutboundTcpConnectionPool 
 smallMessages . closeSocket ( true ) ; 
 if ( gossipMessages ! = null ) 
 gossipMessages . closeSocket ( true ) ; 
 - 
 - metrics . release ( ) ; 
 + if ( metrics ! = null ) 
 + metrics . release ( ) ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / config / DatabaseDescriptorRefTest . java b / test / unit / org / apache / cassandra / config / DatabaseDescriptorRefTest . java 
 index 17cdd77 . . c8f8bc1 100644 
 - - - a / test / unit / org / apache / cassandra / config / DatabaseDescriptorRefTest . java 
 + + + b / test / unit / org / apache / cassandra / config / DatabaseDescriptorRefTest . java 
 @ @ - 54 , 6 + 54 , 7 @ @ import static org . junit . Assert . fail ; 
 public class DatabaseDescriptorRefTest 
 { 
 static final String [ ] validClasses = { 
 + " org . apache . cassandra . auth . AllowAllInternodeAuthenticator " , 
 " org . apache . cassandra . auth . IInternodeAuthenticator " , 
 " org . apache . cassandra . auth . IAuthenticator " , 
 " org . apache . cassandra . auth . IAuthorizer " , 
 diff - - git a / test / unit / org / apache / cassandra / locator / ReconnectableSnitchHelperTest . java b / test / unit / org / apache / cassandra / locator / ReconnectableSnitchHelperTest . java 
 new file mode 100644 
 index 0000000 . . 232865a 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / locator / ReconnectableSnitchHelperTest . java 
 @ @ - 0 , 0 + 1 , 63 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . locator ; 
 + 
 + import java . net . InetAddress ; 
 + import java . net . UnknownHostException ; 
 + import java . util . Collections ; 
 + 
 + import org . junit . After ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . auth . IInternodeAuthenticator ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . net . MessagingServiceTest ; 
 + 
 + public class ReconnectableSnitchHelperTest 
 + { 
 + static final IInternodeAuthenticator originalAuthenticator = DatabaseDescriptor . getInternodeAuthenticator ( ) ; 
 + 
 + @ BeforeClass 
 + public static void beforeClass ( ) throws UnknownHostException 
 + { 
 + DatabaseDescriptor . daemonInitialization ( ) ; 
 + DatabaseDescriptor . setBackPressureStrategy ( new MessagingServiceTest . MockBackPressureStrategy ( Collections . emptyMap ( ) ) ) ; 
 + DatabaseDescriptor . setBroadcastAddress ( InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ) ; 
 + } 
 + 
 + / * * 
 + * Make sure that if a node fails internode authentication and MessagingService returns a null 
 + * pool that ReconnectableSnitchHelper fails gracefully . 
 + * / 
 + @ Test 
 + public void failedAuthentication ( ) throws Exception 
 + { 
 + DatabaseDescriptor . setInternodeAuthenticator ( MessagingServiceTest . ALLOW _ NOTHING _ AUTHENTICATOR ) ; 
 + InetAddress address = InetAddress . getByName ( " 127 . 0 . 0 . 250 " ) ; 
 + / / Should tolerate null returns by MS for the connection 
 + ReconnectableSnitchHelper . reconnect ( address , address , null , null ) ; 
 + } 
 + 
 + @ After 
 + public void replaceAuthenticator ( ) 
 + { 
 + DatabaseDescriptor . setInternodeAuthenticator ( originalAuthenticator ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / net / MessagingServiceTest . java b / test / unit / org / apache / cassandra / net / MessagingServiceTest . java 
 index d9a9915 . . e6b5cd0 100644 
 - - - a / test / unit / org / apache / cassandra / net / MessagingServiceTest . java 
 + + + b / test / unit / org / apache / cassandra / net / MessagingServiceTest . java 
 @ @ - 36 , 12 + 36 , 16 @ @ import java . util . concurrent . TimeUnit ; 
 import com . google . common . collect . Iterables ; 
 import com . codahale . metrics . Timer ; 
 
 + import org . apache . cassandra . auth . IInternodeAuthenticator ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . monitoring . ApproximateTime ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . io . util . DataInputPlus . DataInputStreamPlus ; 
 import org . apache . cassandra . io . util . DataOutputStreamPlus ; 
 import org . apache . cassandra . io . util . WrappedDataOutputStreamPlus ; 
 import org . caffinitas . ohc . histo . EstimatedHistogram ; 
 + import org . junit . After ; 
 import org . junit . Before ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 @ @ - 52 , 6 + 56 , 20 @ @ public class MessagingServiceTest 
 { 
 private final static long ONE _ SECOND = TimeUnit . NANOSECONDS . convert ( 1 , TimeUnit . SECONDS ) ; 
 private final static long [ ] bucketOffsets = new EstimatedHistogram ( 160 ) . getBucketOffsets ( ) ; 
 + public static final IInternodeAuthenticator ALLOW _ NOTHING _ AUTHENTICATOR = new IInternodeAuthenticator ( ) 
 + { 
 + public boolean authenticate ( InetAddress remoteAddress , int remotePort ) 
 + { 
 + return false ; 
 + } 
 + 
 + public void validateConfiguration ( ) throws ConfigurationException 
 + { 
 + 
 + } 
 + } ; 
 + static final IInternodeAuthenticator originalAuthenticator = DatabaseDescriptor . getInternodeAuthenticator ( ) ; 
 + 
 private final MessagingService messagingService = MessagingService . test ( ) ; 
 
 @ BeforeClass 
 @ @ - 368 , 4 + 386 , 46 @ @ public class MessagingServiceTest 
 throw new UnsupportedOperationException ( " Not supported . " ) ; 
 } 
 } 
 + 
 + / * * 
 + * Make sure that if internode authenticatino fails for an outbound connection that all the code that relies 
 + * on getting the connection pool handles the null return 
 + * @ throws Exception 
 + * / 
 + @ Test 
 + public void testFailedInternodeAuth ( ) throws Exception 
 + { 
 + MessagingService ms = MessagingService . instance ( ) ; 
 + DatabaseDescriptor . setInternodeAuthenticator ( ALLOW _ NOTHING _ AUTHENTICATOR ) ; 
 + InetAddress address = InetAddress . getByName ( " 127 . 0 . 0 . 250 " ) ; 
 + 
 + / / Should return null 
 + assertNull ( ms . getConnectionPool ( address ) ) ; 
 + assertNull ( ms . getConnection ( address , new MessageOut ( MessagingService . Verb . GOSSIP _ DIGEST _ ACK ) ) ) ; 
 + 
 + / / Should tolerate null 
 + ms . convict ( address ) ; 
 + ms . sendOneWay ( new MessageOut ( MessagingService . Verb . GOSSIP _ DIGEST _ ACK ) , address ) ; 
 + } 
 + 
 + @ Test 
 + public void testOutboundTcpConnectionCleansUp ( ) throws Exception 
 + { 
 + MessagingService ms = MessagingService . instance ( ) ; 
 + DatabaseDescriptor . setInternodeAuthenticator ( ALLOW _ NOTHING _ AUTHENTICATOR ) ; 
 + InetAddress address = InetAddress . getByName ( " 127 . 0 . 0 . 250 " ) ; 
 + OutboundTcpConnectionPool pool = new OutboundTcpConnectionPool ( address , new MockBackPressureStrategy ( null ) . newState ( address ) ) ; 
 + ms . connectionManagers . put ( address , pool ) ; 
 + pool . smallMessages . start ( ) ; 
 + pool . smallMessages . enqueue ( new MessageOut ( MessagingService . Verb . GOSSIP _ DIGEST _ ACK ) , 0 ) ; 
 + pool . smallMessages . join ( ) ; 
 + assertFalse ( ms . connectionManagers . containsKey ( address ) ) ; 
 + } 
 + 
 + @ After 
 + public void replaceAuthenticator ( ) 
 + { 
 + DatabaseDescriptor . setInternodeAuthenticator ( originalAuthenticator ) ; 
 + } 
 + 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 848ea88 . . 6e9c555 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 25 , 6 + 25 , 7 @ @ 
 * use CF / KS names as snapshot prefix for drop + truncate operations 
 ( CASSANDRA - 2997 ) 
 * Break bloom filters up to avoid heap fragmentation ( CASSANDRA - 2466 ) 
 + * fix cassandra hanging on jsvc stop ( CASSANDRA - 3302 ) 
 Merged from 0 . 8 : 
 * ( CQL ) update grammar to require key clause in DELETE statement 
 ( CASSANDRA - 3349 ) 
 diff - - git a / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java b / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java 
 index 38577f1 . . 4076d10 100644 
 - - - a / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java 
 + + + b / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java 
 @ @ - 174 , 4 + 174 , 12 @ @ public class TCustomServerSocket extends TServerTransport 
 serverSocket _ = null ; 
 } 
 } 
 + 
 + @ Override 
 + public void interrupt ( ) 
 + { 
 + / / The thread - safeness of this is dubious , but Java documentation suggests 
 + / / that it is safe to do this from a different thread context 
 + close ( ) ; 
 + } 
 }
