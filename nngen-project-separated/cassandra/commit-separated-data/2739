BLEU SCORE: 0.16186478197091597

TEST MSG: iss - 6691
GENERATED MSG: r / m jetty

TEST DIFF (one line): diff - - git a / tools / stress / src / org / apache / cassandra / stress / Operation . java b / tools / stress / src / org / apache / cassandra / stress / Operation . java <nl> index fa7a453 . . 4519b19 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / Operation . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / Operation . java <nl> @ @ - 21 , 10 + 21 , 25 @ @ import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> + import java . util . EnumMap ; <nl> import java . util . List ; <nl> <nl> import org . apache . cassandra . stress . generatedata . KeyGen ; <nl> import org . apache . cassandra . stress . generatedata . RowGen ; <nl> + import org . apache . cassandra . stress . operations . CqlCounterAdder ; <nl> + import org . apache . cassandra . stress . operations . CqlCounterGetter ; <nl> + import org . apache . cassandra . stress . operations . CqlIndexedRangeSlicer ; <nl> + import org . apache . cassandra . stress . operations . CqlInserter ; <nl> + import org . apache . cassandra . stress . operations . CqlMultiGetter ; <nl> + import org . apache . cassandra . stress . operations . CqlRangeSlicer ; <nl> + import org . apache . cassandra . stress . operations . CqlReader ; <nl> + import org . apache . cassandra . stress . operations . ThriftCounterAdder ; <nl> + import org . apache . cassandra . stress . operations . ThriftCounterGetter ; <nl> + import org . apache . cassandra . stress . operations . ThriftIndexedRangeSlicer ; <nl> + import org . apache . cassandra . stress . operations . ThriftInserter ; <nl> + import org . apache . cassandra . stress . operations . ThriftMultiGetter ; <nl> + import org . apache . cassandra . stress . operations . ThriftRangeSlicer ; <nl> + import org . apache . cassandra . stress . operations . ThriftReader ; <nl> import org . apache . cassandra . stress . settings . Command ; <nl> import org . apache . cassandra . stress . settings . CqlVersion ; <nl> import org . apache . cassandra . stress . settings . SettingsCommandMixed ; <nl> @ @ - 66 , 7 + 81 , 8 @ @ public abstract class Operation <nl> public final RowGen rowGen ; <nl> public final List < ColumnParent > columnParents ; <nl> public final StressMetrics metrics ; <nl> - public final SettingsCommandMixed . CommandSelector readWriteSelector ; <nl> + public final SettingsCommandMixed . CommandSelector commandSelector ; <nl> + private final EnumMap < Command , State > substates ; <nl> private Object cqlCache ; <nl> <nl> public State ( Command type , StressSettings settings , StressMetrics metrics ) <nl> @ @ - 74 , 9 + 90 , 15 @ @ public abstract class Operation <nl> this . type = type ; <nl> this . timer = metrics . getTiming ( ) . newTimer ( ) ; <nl> if ( type = = Command . MIXED ) <nl> - readWriteSelector = ( ( SettingsCommandMixed ) settings . command ) . selector ( ) ; <nl> + { <nl> + commandSelector = ( ( SettingsCommandMixed ) settings . command ) . selector ( ) ; <nl> + substates = new EnumMap < > ( Command . class ) ; <nl> + } <nl> else <nl> - readWriteSelector = null ; <nl> + { <nl> + commandSelector = null ; <nl> + substates = null ; <nl> + } <nl> this . settings = settings ; <nl> this . keyGen = settings . keys . newKeyGen ( ) ; <nl> this . rowGen = settings . columns . newRowGen ( ) ; <nl> @ @ - 91 , 6 + 113 , 20 @ @ public abstract class Operation <nl> columnParents = Arrays . asList ( cp ) ; <nl> } <nl> } <nl> + <nl> + private State ( Command type , State copy ) <nl> + { <nl> + this . type = type ; <nl> + this . timer = copy . timer ; <nl> + this . rowGen = copy . rowGen ; <nl> + this . keyGen = copy . keyGen ; <nl> + this . columnParents = copy . columnParents ; <nl> + this . metrics = copy . metrics ; <nl> + this . settings = copy . settings ; <nl> + this . substates = null ; <nl> + this . commandSelector = null ; <nl> + } <nl> + <nl> public boolean isCql3 ( ) <nl> { <nl> return settings . mode . cqlVersion = = CqlVersion . CQL3 ; <nl> @ @ - 107 , 6 + 143 , 18 @ @ public abstract class Operation <nl> { <nl> cqlCache = val ; <nl> } <nl> + <nl> + public State substate ( Command command ) <nl> + { <nl> + assert type = = Command . MIXED ; <nl> + State substate = substates . get ( command ) ; <nl> + if ( substate = = null ) <nl> + { <nl> + substates . put ( command , substate = new State ( command , this ) ) ; <nl> + } <nl> + return substate ; <nl> + } <nl> + <nl> } <nl> <nl> protected ByteBuffer getKey ( ) <nl> @ @ - 119 , 9 + 167 , 9 @ @ public abstract class Operation <nl> return state . keyGen . getKeys ( count , index ) ; <nl> } <nl> <nl> - protected List < ByteBuffer > generateColumnValues ( ) <nl> + protected List < ByteBuffer > generateColumnValues ( ByteBuffer key ) <nl> { <nl> - return state . rowGen . generate ( index ) ; <nl> + return state . rowGen . generate ( index , key ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 146 , 20 + 194 , 18 @ @ public abstract class Operation <nl> boolean success = false ; <nl> String exceptionMessage = null ; <nl> <nl> - for ( int t = 0 ; t < state . settings . command . tries ; t + + ) <nl> + int tries = 0 ; <nl> + for ( ; tries < state . settings . command . tries ; tries + + ) <nl> { <nl> - if ( success ) <nl> - break ; <nl> - <nl> try <nl> { <nl> success = run . run ( ) ; <nl> + break ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> System . err . println ( e ) ; <nl> exceptionMessage = getExceptionMessage ( e ) ; <nl> - success = false ; <nl> } <nl> } <nl> <nl> @ @ - 167 , 11 + 213 , 13 @ @ public abstract class Operation <nl> <nl> if ( ! success ) <nl> { <nl> - error ( String . format ( " Operation [ % d ] retried % d times - error executing for key % s % s % n " , <nl> + error ( String . format ( " Operation [ % d ] x % d key % s % s % n " , <nl> index , <nl> - state . settings . command . tries , <nl> + tries , <nl> run . key ( ) , <nl> - ( exceptionMessage = = null ) ? " " : " ( " + exceptionMessage + " ) " ) ) ; <nl> + ( exceptionMessage = = null ) <nl> + ? " Data returned was not validated " <nl> + : " Error executing : " + exceptionMessage ) ) ; <nl> } <nl> <nl> } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressAction . java b / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> index 0312093 . . d85f010 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> @ @ - 93 , 6 + 93 , 10 @ @ public class StressAction implements Runnable <nl> default : <nl> throw new IllegalStateException ( ) ; <nl> } <nl> + <nl> + / / we need to warm up all the nodes in the cluster ideally , but we may not be the only stress instance ; <nl> + / / so warm up all the nodes we ' re speaking to only . <nl> + iterations * = settings . node . nodes . size ( ) ; <nl> output . println ( String . format ( " Warming up % s with % d iterations . . . " , type , iterations ) ) ; <nl> run ( type , 20 , iterations , warmupOutput ) ; <nl> } <nl> @ @ - 533 , 7 + 537 , 8 @ @ public class StressAction implements Runnable <nl> } <nl> <nl> case MIXED : <nl> - return createOperation ( state . readWriteSelector . next ( ) , state , index ) ; <nl> + Command subcommand = state . commandSelector . next ( ) ; <nl> + return createOperation ( subcommand , state . substate ( subcommand ) , index ) ; <nl> <nl> } <nl> <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGen . java b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGen . java <nl> index 4c22005 . . c441b7e 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGen . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGen . java <nl> @ @ - 6 , 13 + 6 , 13 @ @ import java . util . List ; <nl> public abstract class DataGen <nl> { <nl> <nl> - public abstract void generate ( ByteBuffer fill , long offset ) ; <nl> + public abstract void generate ( ByteBuffer fill , long index , ByteBuffer seed ) ; <nl> public abstract boolean isDeterministic ( ) ; <nl> <nl> - public void generate ( List < ByteBuffer > fills , long offset ) <nl> + public void generate ( List < ByteBuffer > fills , long index , ByteBuffer seed ) <nl> { <nl> for ( ByteBuffer fill : fills ) <nl> - generate ( fill , offset + + ) ; <nl> + generate ( fill , index + + , seed ) ; <nl> } <nl> <nl> } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenBytesRandom . java b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenBytesRandom . java <nl> index 3906f93 . . cce438d 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenBytesRandom . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenBytesRandom . java <nl> @ @ - 9 , 7 + 9 , 7 @ @ public class DataGenBytesRandom extends DataGen <nl> private final Random rnd = new Random ( ) ; <nl> <nl> @ Override <nl> - public void generate ( ByteBuffer fill , long offset ) <nl> + public void generate ( ByteBuffer fill , long index , ByteBuffer seed ) <nl> { <nl> fill . clear ( ) ; <nl> rnd . nextBytes ( fill . array ( ) ) ; <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenHex . java b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenHex . java <nl> index 50d49dd . . b71d3e9 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenHex . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenHex . java <nl> @ @ - 8 , 7 + 8 , 7 @ @ public abstract class DataGenHex extends DataGen <nl> abstract long next ( long operationIndex ) ; <nl> <nl> @ Override <nl> - public final void generate ( ByteBuffer fill , long operationIndex ) <nl> + public final void generate ( ByteBuffer fill , long operationIndex , ByteBuffer seed ) <nl> { <nl> fill . clear ( ) ; <nl> fillKeyStringBytes ( next ( operationIndex ) , fill . array ( ) ) ; <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringDictionary . java b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringDictionary . java <nl> index e581232 . . 7733ed6 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringDictionary . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringDictionary . java <nl> @ @ - 25 , 13 + 25 , 13 @ @ public class DataGenStringDictionary extends DataGen <nl> } <nl> <nl> @ Override <nl> - public void generate ( ByteBuffer fill , long index ) <nl> + public void generate ( ByteBuffer fill , long index , ByteBuffer seed ) <nl> { <nl> fill ( fill , 0 ) ; <nl> } <nl> <nl> @ Override <nl> - public void generate ( List < ByteBuffer > fills , long index ) <nl> + public void generate ( List < ByteBuffer > fills , long index , ByteBuffer seed ) <nl> { <nl> for ( int i = 0 ; i < fills . size ( ) ; i + + ) <nl> fill ( fills . get ( 0 ) , i ) ; <nl> @ @ - 55 , 7 + 55 , 7 @ @ public class DataGenStringDictionary extends DataGen <nl> @ Override <nl> public boolean isDeterministic ( ) <nl> { <nl> - return true ; <nl> + return false ; <nl> } <nl> <nl> public static DataGenFactory getFactory ( File file ) throws IOException <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringRepeats . java b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringRepeats . java <nl> index 47091f7 . . 4c5bb89 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringRepeats . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringRepeats . java <nl> @ @ - 25 , 32 + 25 , 32 @ @ public class DataGenStringRepeats extends DataGen <nl> } <nl> <nl> @ Override <nl> - public void generate ( ByteBuffer fill , long index ) <nl> + public void generate ( ByteBuffer fill , long index , ByteBuffer seed ) <nl> { <nl> - fill ( fill , index , 0 ) ; <nl> + fill ( fill , index , 0 , seed ) ; <nl> } <nl> <nl> @ Override <nl> - public void generate ( List < ByteBuffer > fills , long index ) <nl> + public void generate ( List < ByteBuffer > fills , long index , ByteBuffer seed ) <nl> { <nl> for ( int i = 0 ; i < fills . size ( ) ; i + + ) <nl> { <nl> - fill ( fills . get ( i ) , index , i ) ; <nl> + fill ( fills . get ( i ) , index , i , seed ) ; <nl> } <nl> } <nl> <nl> - private void fill ( ByteBuffer fill , long index , int column ) <nl> + private void fill ( ByteBuffer fill , long index , int column , ByteBuffer seed ) <nl> { <nl> fill . clear ( ) ; <nl> byte [ ] trg = fill . array ( ) ; <nl> - byte [ ] src = getData ( index , column ) ; <nl> + byte [ ] src = getData ( index , column , seed ) ; <nl> for ( int j = 0 ; j < trg . length ; j + = src . length ) <nl> System . arraycopy ( src , 0 , trg , j , Math . min ( src . length , trg . length - j ) ) ; <nl> } <nl> <nl> - private byte [ ] getData ( long index , int column ) <nl> + private byte [ ] getData ( long index , int column , ByteBuffer seed ) <nl> { <nl> - final long key = ( column * repeatFrequency ) + ( index % repeatFrequency ) ; <nl> + final long key = ( column * repeatFrequency ) + ( ( seed = = null ? index : Math . abs ( seed . hashCode ( ) ) ) % repeatFrequency ) ; <nl> byte [ ] r = cache . get ( key ) ; <nl> if ( r ! = null ) <nl> return r ; <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / generatedata / KeyGen . java b / tools / stress / src / org / apache / cassandra / stress / generatedata / KeyGen . java <nl> index cdd6d39 . . 36dc31d 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / generatedata / KeyGen . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / generatedata / KeyGen . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ public class KeyGen <nl> { <nl> while ( keyBuffers . size ( ) < n ) <nl> keyBuffers . add ( ByteBuffer . wrap ( new byte [ keySize ] ) ) ; <nl> - dataGen . generate ( keyBuffers , index ) ; <nl> + dataGen . generate ( keyBuffers , index , null ) ; <nl> return keyBuffers ; <nl> } <nl> <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / generatedata / RowGen . java b / tools / stress / src / org / apache / cassandra / stress / generatedata / RowGen . java <nl> index 869fbc7 . . 3174177 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / generatedata / RowGen . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / generatedata / RowGen . java <nl> @ @ - 16 , 10 + 16 , 10 @ @ public abstract class RowGen <nl> this . dataGen = dataGenerator ; <nl> } <nl> <nl> - public List < ByteBuffer > generate ( long operationIndex ) <nl> + public List < ByteBuffer > generate ( long operationIndex , ByteBuffer key ) <nl> { <nl> List < ByteBuffer > fill = getColumns ( operationIndex ) ; <nl> - dataGen . generate ( fill , operationIndex ) ; <nl> + dataGen . generate ( fill , operationIndex , key ) ; <nl> return fill ; <nl> } <nl> <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlIndexedRangeSlicer . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlIndexedRangeSlicer . java <nl> index 748bf30 . . ff43322 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlIndexedRangeSlicer . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlIndexedRangeSlicer . java <nl> @ @ - 70 , 7 + 70 , 7 @ @ public class CqlIndexedRangeSlicer extends CqlOperation < byte [ ] [ ] > <nl> protected void run ( CqlOperation . ClientWrapper client ) throws IOException <nl> { <nl> acceptNoResults = false ; <nl> - final List < ByteBuffer > columns = generateColumnValues ( ) ; <nl> + final List < ByteBuffer > columns = generateColumnValues ( getKey ( ) ) ; <nl> final ByteBuffer value = columns . get ( 1 ) ; / / only C1 column is indexed <nl> byte [ ] minKey = new byte [ 0 ] ; <nl> int rowCount ; <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlInserter . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlInserter . java <nl> index 82f00aa . . 8d964f5 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlInserter . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlInserter . java <nl> @ @ - 72 , 7 + 72 , 7 @ @ public class CqlInserter extends CqlOperation < Integer > <nl> protected List < ByteBuffer > getQueryParameters ( byte [ ] key ) <nl> { <nl> final ArrayList < ByteBuffer > queryParams = new ArrayList < > ( ) ; <nl> - final List < ByteBuffer > values = generateColumnValues ( ) ; <nl> + final List < ByteBuffer > values = generateColumnValues ( ByteBuffer . wrap ( key ) ) ; <nl> queryParams . addAll ( values ) ; <nl> queryParams . add ( ByteBuffer . wrap ( key ) ) ; <nl> return queryParams ; <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlOperation . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlOperation . java <nl> index 744e7f6 . . bd2f131 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlOperation . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlOperation . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . stress . operations ; <nl> <nl> import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> + import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> import com . datastax . driver . core . PreparedStatement ; <nl> @ @ - 33 , 6 + 34 , 7 @ @ import org . apache . cassandra . stress . util . JavaDriverClient ; <nl> import org . apache . cassandra . stress . util . ThriftClient ; <nl> import org . apache . cassandra . thrift . Compression ; <nl> import org . apache . cassandra . thrift . CqlResult ; <nl> + import org . apache . cassandra . thrift . CqlRow ; <nl> import org . apache . cassandra . thrift . ThriftConversion ; <nl> import org . apache . cassandra . transport . SimpleClient ; <nl> import org . apache . cassandra . transport . messages . ResultMessage ; <nl> @ @ - 167 , 6 + 169 , 35 @ @ public abstract class CqlOperation < V > extends Operation <nl> <nl> } <nl> <nl> + protected final class CqlRunOpMatchResults extends CqlRunOp < ByteBuffer [ ] [ ] > <nl> + { <nl> + <nl> + final List < List < ByteBuffer > > expect ; <nl> + <nl> + / / a null value for an item in expect means we just check the row is present <nl> + protected CqlRunOpMatchResults ( ClientWrapper client , String query , Object queryId , List < ByteBuffer > params , String id , ByteBuffer key , List < List < ByteBuffer > > expect ) <nl> + { <nl> + super ( client , query , queryId , RowsHandler . INSTANCE , params , id , key ) ; <nl> + this . expect = expect ; <nl> + } <nl> + <nl> + @ Override <nl> + public int keyCount ( ) <nl> + { <nl> + return result = = null ? 0 : result . length ; <nl> + } <nl> + <nl> + public boolean validate ( ByteBuffer [ ] [ ] result ) <nl> + { <nl> + if ( result . length ! = expect . size ( ) ) <nl> + return false ; <nl> + for ( int i = 0 ; i < result . length ; i + + ) <nl> + if ( ! expect . get ( i ) . equals ( Arrays . asList ( result [ i ] ) ) ) <nl> + return false ; <nl> + return true ; <nl> + } <nl> + } <nl> + <nl> / / Cql <nl> protected abstract class CqlRunOp < V > implements RunOp <nl> { <nl> @ @ - 451 , 6 + 482 , 87 @ @ public abstract class CqlOperation < V > extends Operation <nl> } <nl> <nl> / / Processes results from each client into an array of all key bytes returned <nl> + protected static final class RowsHandler implements ResultHandler < ByteBuffer [ ] [ ] > <nl> + { <nl> + static final RowsHandler INSTANCE = new RowsHandler ( ) ; <nl> + <nl> + @ Override <nl> + public Function < ResultSet , ByteBuffer [ ] [ ] > javaDriverHandler ( ) <nl> + { <nl> + return new Function < ResultSet , ByteBuffer [ ] [ ] > ( ) <nl> + { <nl> + <nl> + @ Override <nl> + public ByteBuffer [ ] [ ] apply ( ResultSet result ) <nl> + { <nl> + if ( result = = null ) <nl> + return new ByteBuffer [ 0 ] [ ] ; <nl> + List < Row > rows = result . all ( ) ; <nl> + <nl> + ByteBuffer [ ] [ ] r = new ByteBuffer [ rows . size ( ) ] [ ] ; <nl> + for ( int i = 0 ; i < r . length ; i + + ) <nl> + { <nl> + Row row = rows . get ( i ) ; <nl> + r [ i ] = new ByteBuffer [ row . getColumnDefinitions ( ) . size ( ) - 1 ] ; <nl> + for ( int j = 1 ; j < row . getColumnDefinitions ( ) . size ( ) ; j + + ) <nl> + r [ i ] [ j - 1 ] = row . getBytes ( j ) ; <nl> + } <nl> + return r ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + @ Override <nl> + public Function < ResultMessage , ByteBuffer [ ] [ ] > thriftHandler ( ) <nl> + { <nl> + return new Function < ResultMessage , ByteBuffer [ ] [ ] > ( ) <nl> + { <nl> + <nl> + @ Override <nl> + public ByteBuffer [ ] [ ] apply ( ResultMessage result ) <nl> + { <nl> + if ( result instanceof ResultMessage . Rows ) <nl> + { <nl> + ResultMessage . Rows rows = ( ( ResultMessage . Rows ) result ) ; <nl> + ByteBuffer [ ] [ ] r = new ByteBuffer [ rows . result . size ( ) ] [ ] ; <nl> + for ( int i = 0 ; i < r . length ; i + + ) <nl> + { <nl> + List < ByteBuffer > row = rows . result . rows . get ( i ) ; <nl> + r [ i ] = new ByteBuffer [ row . size ( ) ] ; <nl> + for ( int j = 0 ; j < row . size ( ) ; j + + ) <nl> + r [ i ] [ j ] = row . get ( j ) ; <nl> + } <nl> + return r ; <nl> + } <nl> + return new ByteBuffer [ 0 ] [ ] ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + @ Override <nl> + public Function < CqlResult , ByteBuffer [ ] [ ] > simpleNativeHandler ( ) <nl> + { <nl> + return new Function < CqlResult , ByteBuffer [ ] [ ] > ( ) <nl> + { <nl> + <nl> + @ Override <nl> + public ByteBuffer [ ] [ ] apply ( CqlResult result ) <nl> + { <nl> + ByteBuffer [ ] [ ] r = new ByteBuffer [ result . getRows ( ) . size ( ) ] [ ] ; <nl> + for ( int i = 0 ; i < r . length ; i + + ) <nl> + { <nl> + CqlRow row = result . getRows ( ) . get ( i ) ; <nl> + r [ i ] = new ByteBuffer [ row . getColumns ( ) . size ( ) ] ; <nl> + for ( int j = 0 ; j < r [ i ] . length ; j + + ) <nl> + r [ i ] [ j ] = ByteBuffer . wrap ( row . getColumns ( ) . get ( j ) . getValue ( ) ) ; <nl> + } <nl> + return r ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + } <nl> + / / Processes results from each client into an array of all key bytes returned <nl> protected static final class KeysHandler implements ResultHandler < byte [ ] [ ] > <nl> { <nl> static final KeysHandler INSTANCE = new KeysHandler ( ) ; <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlReader . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlReader . java <nl> index 749a482 . . 44da43f 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlReader . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlReader . java <nl> @ @ - 23 , 10 + 23 , 11 @ @ package org . apache . cassandra . stress . operations ; <nl> <nl> import java . nio . ByteBuffer ; <nl> import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> <nl> - public class CqlReader extends CqlOperation < Integer > <nl> + public class CqlReader extends CqlOperation < ByteBuffer [ ] [ ] > <nl> { <nl> <nl> public CqlReader ( State state , long idx ) <nl> @ @ - 79 , 9 + 80 , 10 @ @ public class CqlReader extends CqlOperation < Integer > <nl> } <nl> <nl> @ Override <nl> - protected CqlRunOp < Integer > buildRunOp ( ClientWrapper client , String query , Object queryId , List < ByteBuffer > params , String keyid , ByteBuffer key ) <nl> + protected CqlRunOp < ByteBuffer [ ] [ ] > buildRunOp ( ClientWrapper client , String query , Object queryId , List < ByteBuffer > params , String keyid , ByteBuffer key ) <nl> { <nl> - return new CqlRunOpTestNonEmpty ( client , query , queryId , params , keyid , key ) ; <nl> + List < ByteBuffer > expectRow = state . rowGen . isDeterministic ( ) ? generateColumnValues ( key ) : null ; <nl> + return new CqlRunOpMatchResults ( client , query , queryId , params , keyid , key , Arrays . asList ( expectRow ) ) ; <nl> } <nl> <nl> } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / ThriftCounterAdder . java b / tools / stress / src / org / apache / cassandra / stress / operations / ThriftCounterAdder . java <nl> index b1657b2 . . 26695a6 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / ThriftCounterAdder . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / ThriftCounterAdder . java <nl> @ @ - 39 , 7 + 39 , 7 @ @ public class ThriftCounterAdder extends Operation <nl> <nl> public void run ( final ThriftClient client ) throws IOException <nl> { <nl> - List < CounterColumn > columns = new ArrayList < CounterColumn > ( ) ; <nl> + List < CounterColumn > columns = new ArrayList < > ( ) ; <nl> for ( int i = 0 ; i < state . settings . columns . maxColumnsPerKey ; i + + ) <nl> columns . add ( new CounterColumn ( getColumnNameBytes ( i ) , 1L ) ) ; <nl> <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / ThriftIndexedRangeSlicer . java b / tools / stress / src / org / apache / cassandra / stress / operations / ThriftIndexedRangeSlicer . java <nl> index c6b1b03 . . 6eab209 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / ThriftIndexedRangeSlicer . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / ThriftIndexedRangeSlicer . java <nl> @ @ - 49 , 7 + 49 , 7 @ @ public class ThriftIndexedRangeSlicer extends Operation <nl> . setSlice _ range ( new SliceRange ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , <nl> ByteBufferUtil . EMPTY _ BYTE _ BUFFER , <nl> false , state . settings . columns . maxColumnsPerKey ) ) ; <nl> - final List < ByteBuffer > columns = generateColumnValues ( ) ; <nl> + final List < ByteBuffer > columns = generateColumnValues ( getKey ( ) ) ; <nl> final ColumnParent parent = state . columnParents . get ( 0 ) ; <nl> <nl> final ByteBuffer columnName = getColumnNameBytes ( 1 ) ; <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / ThriftInserter . java b / tools / stress / src / org / apache / cassandra / stress / operations / ThriftInserter . java <nl> index c5f8051 . . b107f26 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / ThriftInserter . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / ThriftInserter . java <nl> @ @ - 42 , 7 + 42 , 7 @ @ public final class ThriftInserter extends Operation <nl> public void run ( final ThriftClient client ) throws IOException <nl> { <nl> final ByteBuffer key = getKey ( ) ; <nl> - final List < Column > columns = generateColumns ( ) ; <nl> + final List < Column > columns = generateColumns ( key ) ; <nl> <nl> Map < String , List < Mutation > > row ; <nl> if ( ! state . settings . columns . useSuperColumns ) <nl> @ @ - 92 , 9 + 92 , 9 @ @ public final class ThriftInserter extends Operation <nl> } ) ; <nl> } <nl> <nl> - protected List < Column > generateColumns ( ) <nl> + protected List < Column > generateColumns ( ByteBuffer key ) <nl> { <nl> - final List < ByteBuffer > values = generateColumnValues ( ) ; <nl> + final List < ByteBuffer > values = generateColumnValues ( key ) ; <nl> final List < Column > columns = new ArrayList < > ( values . size ( ) ) ; <nl> <nl> if ( state . settings . columns . useTimeUUIDComparator ) <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / ThriftReader . java b / tools / stress / src / org / apache / cassandra / stress / operations / ThriftReader . java <nl> index a8605e8 . . c50843f 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / ThriftReader . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / ThriftReader . java <nl> @ @ - 19 , 12 + 19 , 16 @ @ package org . apache . cassandra . stress . operations ; <nl> <nl> import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> <nl> import org . apache . cassandra . stress . Operation ; <nl> import org . apache . cassandra . stress . util . ThriftClient ; <nl> + import org . apache . cassandra . thrift . ColumnOrSuperColumn ; <nl> import org . apache . cassandra . thrift . ColumnParent ; <nl> import org . apache . cassandra . thrift . SlicePredicate ; <nl> import org . apache . cassandra . thrift . SliceRange ; <nl> + import org . apache . cassandra . thrift . SuperColumn ; <nl> <nl> public final class ThriftReader extends Operation <nl> { <nl> @ @ - 48 , 6 + 52 , 7 @ @ public final class ThriftReader extends Operation <nl> predicate . setColumn _ names ( state . settings . columns . names ) ; <nl> <nl> final ByteBuffer key = getKey ( ) ; <nl> + final List < ByteBuffer > expect = state . rowGen . isDeterministic ( ) ? generateColumnValues ( key ) : null ; <nl> for ( final ColumnParent parent : state . columnParents ) <nl> { <nl> timeWithRetry ( new RunOp ( ) <nl> @ @ - 55 , 7 + 60 , 30 @ @ public final class ThriftReader extends Operation <nl> @ Override <nl> public boolean run ( ) throws Exception <nl> { <nl> - return client . get _ slice ( key , parent , predicate , state . settings . command . consistencyLevel ) . size ( ) ! = 0 ; <nl> + List < ColumnOrSuperColumn > row = client . get _ slice ( key , parent , predicate , state . settings . command . consistencyLevel ) ; <nl> + if ( expect = = null ) <nl> + return ! row . isEmpty ( ) ; <nl> + if ( ! state . settings . columns . useSuperColumns ) <nl> + { <nl> + if ( row . size ( ) ! = expect . size ( ) ) <nl> + return false ; <nl> + for ( int i = 0 ; i < row . size ( ) ; i + + ) <nl> + if ( ! row . get ( i ) . getColumn ( ) . bufferForValue ( ) . equals ( expect . get ( i ) ) ) <nl> + return false ; <nl> + } <nl> + else <nl> + { <nl> + for ( ColumnOrSuperColumn col : row ) <nl> + { <nl> + SuperColumn superColumn = col . getSuper _ column ( ) ; <nl> + if ( superColumn . getColumns ( ) . size ( ) ! = expect . size ( ) ) <nl> + return false ; <nl> + for ( int i = 0 ; i < expect . size ( ) ; i + + ) <nl> + if ( ! superColumn . getColumns ( ) . get ( i ) . bufferForValue ( ) . equals ( expect . get ( i ) ) ) <nl> + return false ; <nl> + } <nl> + } <nl> + return true ; <nl> } <nl> <nl> @ Override
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b310e29 . . b67d0be 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 3 , 6 + 3 , 7 @ @ <nl> * add JVM shutdownhook to sync commitlog ( CASSANDRA - 1919 ) <nl> * allow nodes to be up without being part of normal traffic ( CASSANDRA - 1951 ) <nl> * fix CLI " show keyspaces " with null options on NTS ( CASSANDRA - 2049 ) <nl> + * fix possible ByteBuffer race conditions ( CASSANDRA - 2066 ) <nl> <nl> <nl> 0 . 7 . 1 <nl> diff - - git a / src / java / org / apache / cassandra / dht / RandomPartitioner . java b / src / java / org / apache / cassandra / dht / RandomPartitioner . java <nl> index cffce07 . . 7bbeb6e 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / RandomPartitioner . java <nl> + + + b / src / java / org / apache / cassandra / dht / RandomPartitioner . java <nl> @ @ - 98 , 11 + 98 , 7 @ @ public class RandomPartitioner implements IPartitioner < BigIntegerToken > <nl> <nl> public Token < BigInteger > fromByteArray ( ByteBuffer bytes ) <nl> { <nl> - byte [ ] b = new byte [ bytes . remaining ( ) ] ; <nl> - bytes . get ( b ) ; <nl> - bytes . rewind ( ) ; <nl> - <nl> - return new BigIntegerToken ( new BigInteger ( b ) ) ; <nl> + return new BigIntegerToken ( new BigInteger ( ByteBufferUtil . getArray ( bytes ) ) ) ; <nl> } <nl> <nl> public String toString ( Token < BigInteger > bigIntegerToken ) <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java <nl> index 79456e4 . . 7b7fd8d 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java <nl> @ @ - 40 , 7 + 40 , 7 @ @ import org . apache . hadoop . mapreduce . TaskAttemptContext ; <nl> import org . apache . thrift . TException ; <nl> import org . apache . thrift . transport . TSocket ; <nl> <nl> - import static org . apache . cassandra . io . SerDeUtils . copy ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> / * * <nl> * The < code > ColumnFamilyRecordWriter < / code > maps the output & lt ; key , value & gt ; <nl> @ @ - 169 , 7 + 169 , 7 @ @ implements org . apache . hadoop . mapred . RecordWriter < ByteBuffer , List < org . apache . cass <nl> org . apache . cassandra . avro . SlicePredicate apred = amut . deletion . predicate ; <nl> if ( amut . deletion . super _ column ! = null ) <nl> / / super column <nl> - deletion . setSuper _ column ( copy ( amut . deletion . super _ column ) ) ; <nl> + deletion . setSuper _ column ( ByteBufferUtil . getArray ( amut . deletion . super _ column ) ) ; <nl> else if ( apred . column _ names ! = null ) <nl> { <nl> / / column names <nl> diff - - git a / src / java / org / apache / cassandra / io / SerDeUtils . java b / src / java / org / apache / cassandra / io / SerDeUtils . java <nl> index 937ed90 . . 32ab237 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SerDeUtils . java <nl> + + + b / src / java / org / apache / cassandra / io / SerDeUtils . java <nl> @ @ - 45 , 14 + 45 , 6 @ @ public final class SerDeUtils <nl> / / unbuffered decoders <nl> private final static DecoderFactory DIRECT _ DECODERS = new DecoderFactory ( ) . configureDirectDecoder ( true ) ; <nl> <nl> - public static byte [ ] copy ( ByteBuffer buff ) <nl> - { <nl> - byte [ ] bytes = new byte [ buff . remaining ( ) ] ; <nl> - buff . get ( bytes ) ; <nl> - buff . rewind ( ) ; <nl> - return bytes ; <nl> - } <nl> - <nl> 	 / * * <nl> * Deserializes a single object based on the given Schema . <nl> * @ param writer writer ' s schema <nl> diff - - git a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> index 169eb7b . . ff2e461 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> + + + b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> @ @ - 135 , 7 + 135 , 12 @ @ public class ByteBufferUtil <nl> public static byte [ ] getArray ( ByteBuffer b , int start , int length ) <nl> { <nl> if ( b . hasArray ( ) ) <nl> - return Arrays . copyOfRange ( b . array ( ) , start + b . arrayOffset ( ) , start + length + b . arrayOffset ( ) ) ; <nl> + { <nl> + if ( b . arrayOffset ( ) = = 0 & & start = = 0 & & length = = b . array ( ) . length ) <nl> + return b . array ( ) ; <nl> + else <nl> + return Arrays . copyOfRange ( b . array ( ) , start + b . arrayOffset ( ) , start + length + b . arrayOffset ( ) ) ; <nl> + } <nl> <nl> byte [ ] bytes = new byte [ length ] ; <nl>

TEST DIFF:
diff - - git a / tools / stress / src / org / apache / cassandra / stress / Operation . java b / tools / stress / src / org / apache / cassandra / stress / Operation . java 
 index fa7a453 . . 4519b19 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / Operation . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / Operation . java 
 @ @ - 21 , 10 + 21 , 25 @ @ import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 + import java . util . EnumMap ; 
 import java . util . List ; 
 
 import org . apache . cassandra . stress . generatedata . KeyGen ; 
 import org . apache . cassandra . stress . generatedata . RowGen ; 
 + import org . apache . cassandra . stress . operations . CqlCounterAdder ; 
 + import org . apache . cassandra . stress . operations . CqlCounterGetter ; 
 + import org . apache . cassandra . stress . operations . CqlIndexedRangeSlicer ; 
 + import org . apache . cassandra . stress . operations . CqlInserter ; 
 + import org . apache . cassandra . stress . operations . CqlMultiGetter ; 
 + import org . apache . cassandra . stress . operations . CqlRangeSlicer ; 
 + import org . apache . cassandra . stress . operations . CqlReader ; 
 + import org . apache . cassandra . stress . operations . ThriftCounterAdder ; 
 + import org . apache . cassandra . stress . operations . ThriftCounterGetter ; 
 + import org . apache . cassandra . stress . operations . ThriftIndexedRangeSlicer ; 
 + import org . apache . cassandra . stress . operations . ThriftInserter ; 
 + import org . apache . cassandra . stress . operations . ThriftMultiGetter ; 
 + import org . apache . cassandra . stress . operations . ThriftRangeSlicer ; 
 + import org . apache . cassandra . stress . operations . ThriftReader ; 
 import org . apache . cassandra . stress . settings . Command ; 
 import org . apache . cassandra . stress . settings . CqlVersion ; 
 import org . apache . cassandra . stress . settings . SettingsCommandMixed ; 
 @ @ - 66 , 7 + 81 , 8 @ @ public abstract class Operation 
 public final RowGen rowGen ; 
 public final List < ColumnParent > columnParents ; 
 public final StressMetrics metrics ; 
 - public final SettingsCommandMixed . CommandSelector readWriteSelector ; 
 + public final SettingsCommandMixed . CommandSelector commandSelector ; 
 + private final EnumMap < Command , State > substates ; 
 private Object cqlCache ; 
 
 public State ( Command type , StressSettings settings , StressMetrics metrics ) 
 @ @ - 74 , 9 + 90 , 15 @ @ public abstract class Operation 
 this . type = type ; 
 this . timer = metrics . getTiming ( ) . newTimer ( ) ; 
 if ( type = = Command . MIXED ) 
 - readWriteSelector = ( ( SettingsCommandMixed ) settings . command ) . selector ( ) ; 
 + { 
 + commandSelector = ( ( SettingsCommandMixed ) settings . command ) . selector ( ) ; 
 + substates = new EnumMap < > ( Command . class ) ; 
 + } 
 else 
 - readWriteSelector = null ; 
 + { 
 + commandSelector = null ; 
 + substates = null ; 
 + } 
 this . settings = settings ; 
 this . keyGen = settings . keys . newKeyGen ( ) ; 
 this . rowGen = settings . columns . newRowGen ( ) ; 
 @ @ - 91 , 6 + 113 , 20 @ @ public abstract class Operation 
 columnParents = Arrays . asList ( cp ) ; 
 } 
 } 
 + 
 + private State ( Command type , State copy ) 
 + { 
 + this . type = type ; 
 + this . timer = copy . timer ; 
 + this . rowGen = copy . rowGen ; 
 + this . keyGen = copy . keyGen ; 
 + this . columnParents = copy . columnParents ; 
 + this . metrics = copy . metrics ; 
 + this . settings = copy . settings ; 
 + this . substates = null ; 
 + this . commandSelector = null ; 
 + } 
 + 
 public boolean isCql3 ( ) 
 { 
 return settings . mode . cqlVersion = = CqlVersion . CQL3 ; 
 @ @ - 107 , 6 + 143 , 18 @ @ public abstract class Operation 
 { 
 cqlCache = val ; 
 } 
 + 
 + public State substate ( Command command ) 
 + { 
 + assert type = = Command . MIXED ; 
 + State substate = substates . get ( command ) ; 
 + if ( substate = = null ) 
 + { 
 + substates . put ( command , substate = new State ( command , this ) ) ; 
 + } 
 + return substate ; 
 + } 
 + 
 } 
 
 protected ByteBuffer getKey ( ) 
 @ @ - 119 , 9 + 167 , 9 @ @ public abstract class Operation 
 return state . keyGen . getKeys ( count , index ) ; 
 } 
 
 - protected List < ByteBuffer > generateColumnValues ( ) 
 + protected List < ByteBuffer > generateColumnValues ( ByteBuffer key ) 
 { 
 - return state . rowGen . generate ( index ) ; 
 + return state . rowGen . generate ( index , key ) ; 
 } 
 
 / * * 
 @ @ - 146 , 20 + 194 , 18 @ @ public abstract class Operation 
 boolean success = false ; 
 String exceptionMessage = null ; 
 
 - for ( int t = 0 ; t < state . settings . command . tries ; t + + ) 
 + int tries = 0 ; 
 + for ( ; tries < state . settings . command . tries ; tries + + ) 
 { 
 - if ( success ) 
 - break ; 
 - 
 try 
 { 
 success = run . run ( ) ; 
 + break ; 
 } 
 catch ( Exception e ) 
 { 
 System . err . println ( e ) ; 
 exceptionMessage = getExceptionMessage ( e ) ; 
 - success = false ; 
 } 
 } 
 
 @ @ - 167 , 11 + 213 , 13 @ @ public abstract class Operation 
 
 if ( ! success ) 
 { 
 - error ( String . format ( " Operation [ % d ] retried % d times - error executing for key % s % s % n " , 
 + error ( String . format ( " Operation [ % d ] x % d key % s % s % n " , 
 index , 
 - state . settings . command . tries , 
 + tries , 
 run . key ( ) , 
 - ( exceptionMessage = = null ) ? " " : " ( " + exceptionMessage + " ) " ) ) ; 
 + ( exceptionMessage = = null ) 
 + ? " Data returned was not validated " 
 + : " Error executing : " + exceptionMessage ) ) ; 
 } 
 
 } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressAction . java b / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 index 0312093 . . d85f010 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 @ @ - 93 , 6 + 93 , 10 @ @ public class StressAction implements Runnable 
 default : 
 throw new IllegalStateException ( ) ; 
 } 
 + 
 + / / we need to warm up all the nodes in the cluster ideally , but we may not be the only stress instance ; 
 + / / so warm up all the nodes we ' re speaking to only . 
 + iterations * = settings . node . nodes . size ( ) ; 
 output . println ( String . format ( " Warming up % s with % d iterations . . . " , type , iterations ) ) ; 
 run ( type , 20 , iterations , warmupOutput ) ; 
 } 
 @ @ - 533 , 7 + 537 , 8 @ @ public class StressAction implements Runnable 
 } 
 
 case MIXED : 
 - return createOperation ( state . readWriteSelector . next ( ) , state , index ) ; 
 + Command subcommand = state . commandSelector . next ( ) ; 
 + return createOperation ( subcommand , state . substate ( subcommand ) , index ) ; 
 
 } 
 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGen . java b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGen . java 
 index 4c22005 . . c441b7e 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGen . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGen . java 
 @ @ - 6 , 13 + 6 , 13 @ @ import java . util . List ; 
 public abstract class DataGen 
 { 
 
 - public abstract void generate ( ByteBuffer fill , long offset ) ; 
 + public abstract void generate ( ByteBuffer fill , long index , ByteBuffer seed ) ; 
 public abstract boolean isDeterministic ( ) ; 
 
 - public void generate ( List < ByteBuffer > fills , long offset ) 
 + public void generate ( List < ByteBuffer > fills , long index , ByteBuffer seed ) 
 { 
 for ( ByteBuffer fill : fills ) 
 - generate ( fill , offset + + ) ; 
 + generate ( fill , index + + , seed ) ; 
 } 
 
 } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenBytesRandom . java b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenBytesRandom . java 
 index 3906f93 . . cce438d 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenBytesRandom . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenBytesRandom . java 
 @ @ - 9 , 7 + 9 , 7 @ @ public class DataGenBytesRandom extends DataGen 
 private final Random rnd = new Random ( ) ; 
 
 @ Override 
 - public void generate ( ByteBuffer fill , long offset ) 
 + public void generate ( ByteBuffer fill , long index , ByteBuffer seed ) 
 { 
 fill . clear ( ) ; 
 rnd . nextBytes ( fill . array ( ) ) ; 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenHex . java b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenHex . java 
 index 50d49dd . . b71d3e9 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenHex . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenHex . java 
 @ @ - 8 , 7 + 8 , 7 @ @ public abstract class DataGenHex extends DataGen 
 abstract long next ( long operationIndex ) ; 
 
 @ Override 
 - public final void generate ( ByteBuffer fill , long operationIndex ) 
 + public final void generate ( ByteBuffer fill , long operationIndex , ByteBuffer seed ) 
 { 
 fill . clear ( ) ; 
 fillKeyStringBytes ( next ( operationIndex ) , fill . array ( ) ) ; 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringDictionary . java b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringDictionary . java 
 index e581232 . . 7733ed6 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringDictionary . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringDictionary . java 
 @ @ - 25 , 13 + 25 , 13 @ @ public class DataGenStringDictionary extends DataGen 
 } 
 
 @ Override 
 - public void generate ( ByteBuffer fill , long index ) 
 + public void generate ( ByteBuffer fill , long index , ByteBuffer seed ) 
 { 
 fill ( fill , 0 ) ; 
 } 
 
 @ Override 
 - public void generate ( List < ByteBuffer > fills , long index ) 
 + public void generate ( List < ByteBuffer > fills , long index , ByteBuffer seed ) 
 { 
 for ( int i = 0 ; i < fills . size ( ) ; i + + ) 
 fill ( fills . get ( 0 ) , i ) ; 
 @ @ - 55 , 7 + 55 , 7 @ @ public class DataGenStringDictionary extends DataGen 
 @ Override 
 public boolean isDeterministic ( ) 
 { 
 - return true ; 
 + return false ; 
 } 
 
 public static DataGenFactory getFactory ( File file ) throws IOException 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringRepeats . java b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringRepeats . java 
 index 47091f7 . . 4c5bb89 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringRepeats . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringRepeats . java 
 @ @ - 25 , 32 + 25 , 32 @ @ public class DataGenStringRepeats extends DataGen 
 } 
 
 @ Override 
 - public void generate ( ByteBuffer fill , long index ) 
 + public void generate ( ByteBuffer fill , long index , ByteBuffer seed ) 
 { 
 - fill ( fill , index , 0 ) ; 
 + fill ( fill , index , 0 , seed ) ; 
 } 
 
 @ Override 
 - public void generate ( List < ByteBuffer > fills , long index ) 
 + public void generate ( List < ByteBuffer > fills , long index , ByteBuffer seed ) 
 { 
 for ( int i = 0 ; i < fills . size ( ) ; i + + ) 
 { 
 - fill ( fills . get ( i ) , index , i ) ; 
 + fill ( fills . get ( i ) , index , i , seed ) ; 
 } 
 } 
 
 - private void fill ( ByteBuffer fill , long index , int column ) 
 + private void fill ( ByteBuffer fill , long index , int column , ByteBuffer seed ) 
 { 
 fill . clear ( ) ; 
 byte [ ] trg = fill . array ( ) ; 
 - byte [ ] src = getData ( index , column ) ; 
 + byte [ ] src = getData ( index , column , seed ) ; 
 for ( int j = 0 ; j < trg . length ; j + = src . length ) 
 System . arraycopy ( src , 0 , trg , j , Math . min ( src . length , trg . length - j ) ) ; 
 } 
 
 - private byte [ ] getData ( long index , int column ) 
 + private byte [ ] getData ( long index , int column , ByteBuffer seed ) 
 { 
 - final long key = ( column * repeatFrequency ) + ( index % repeatFrequency ) ; 
 + final long key = ( column * repeatFrequency ) + ( ( seed = = null ? index : Math . abs ( seed . hashCode ( ) ) ) % repeatFrequency ) ; 
 byte [ ] r = cache . get ( key ) ; 
 if ( r ! = null ) 
 return r ; 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / generatedata / KeyGen . java b / tools / stress / src / org / apache / cassandra / stress / generatedata / KeyGen . java 
 index cdd6d39 . . 36dc31d 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / generatedata / KeyGen . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / generatedata / KeyGen . java 
 @ @ - 21 , 7 + 21 , 7 @ @ public class KeyGen 
 { 
 while ( keyBuffers . size ( ) < n ) 
 keyBuffers . add ( ByteBuffer . wrap ( new byte [ keySize ] ) ) ; 
 - dataGen . generate ( keyBuffers , index ) ; 
 + dataGen . generate ( keyBuffers , index , null ) ; 
 return keyBuffers ; 
 } 
 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / generatedata / RowGen . java b / tools / stress / src / org / apache / cassandra / stress / generatedata / RowGen . java 
 index 869fbc7 . . 3174177 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / generatedata / RowGen . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / generatedata / RowGen . java 
 @ @ - 16 , 10 + 16 , 10 @ @ public abstract class RowGen 
 this . dataGen = dataGenerator ; 
 } 
 
 - public List < ByteBuffer > generate ( long operationIndex ) 
 + public List < ByteBuffer > generate ( long operationIndex , ByteBuffer key ) 
 { 
 List < ByteBuffer > fill = getColumns ( operationIndex ) ; 
 - dataGen . generate ( fill , operationIndex ) ; 
 + dataGen . generate ( fill , operationIndex , key ) ; 
 return fill ; 
 } 
 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlIndexedRangeSlicer . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlIndexedRangeSlicer . java 
 index 748bf30 . . ff43322 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlIndexedRangeSlicer . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlIndexedRangeSlicer . java 
 @ @ - 70 , 7 + 70 , 7 @ @ public class CqlIndexedRangeSlicer extends CqlOperation < byte [ ] [ ] > 
 protected void run ( CqlOperation . ClientWrapper client ) throws IOException 
 { 
 acceptNoResults = false ; 
 - final List < ByteBuffer > columns = generateColumnValues ( ) ; 
 + final List < ByteBuffer > columns = generateColumnValues ( getKey ( ) ) ; 
 final ByteBuffer value = columns . get ( 1 ) ; / / only C1 column is indexed 
 byte [ ] minKey = new byte [ 0 ] ; 
 int rowCount ; 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlInserter . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlInserter . java 
 index 82f00aa . . 8d964f5 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlInserter . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlInserter . java 
 @ @ - 72 , 7 + 72 , 7 @ @ public class CqlInserter extends CqlOperation < Integer > 
 protected List < ByteBuffer > getQueryParameters ( byte [ ] key ) 
 { 
 final ArrayList < ByteBuffer > queryParams = new ArrayList < > ( ) ; 
 - final List < ByteBuffer > values = generateColumnValues ( ) ; 
 + final List < ByteBuffer > values = generateColumnValues ( ByteBuffer . wrap ( key ) ) ; 
 queryParams . addAll ( values ) ; 
 queryParams . add ( ByteBuffer . wrap ( key ) ) ; 
 return queryParams ; 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlOperation . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlOperation . java 
 index 744e7f6 . . bd2f131 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlOperation . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlOperation . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . stress . operations ; 
 
 import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 + import java . util . Arrays ; 
 import java . util . List ; 
 
 import com . datastax . driver . core . PreparedStatement ; 
 @ @ - 33 , 6 + 34 , 7 @ @ import org . apache . cassandra . stress . util . JavaDriverClient ; 
 import org . apache . cassandra . stress . util . ThriftClient ; 
 import org . apache . cassandra . thrift . Compression ; 
 import org . apache . cassandra . thrift . CqlResult ; 
 + import org . apache . cassandra . thrift . CqlRow ; 
 import org . apache . cassandra . thrift . ThriftConversion ; 
 import org . apache . cassandra . transport . SimpleClient ; 
 import org . apache . cassandra . transport . messages . ResultMessage ; 
 @ @ - 167 , 6 + 169 , 35 @ @ public abstract class CqlOperation < V > extends Operation 
 
 } 
 
 + protected final class CqlRunOpMatchResults extends CqlRunOp < ByteBuffer [ ] [ ] > 
 + { 
 + 
 + final List < List < ByteBuffer > > expect ; 
 + 
 + / / a null value for an item in expect means we just check the row is present 
 + protected CqlRunOpMatchResults ( ClientWrapper client , String query , Object queryId , List < ByteBuffer > params , String id , ByteBuffer key , List < List < ByteBuffer > > expect ) 
 + { 
 + super ( client , query , queryId , RowsHandler . INSTANCE , params , id , key ) ; 
 + this . expect = expect ; 
 + } 
 + 
 + @ Override 
 + public int keyCount ( ) 
 + { 
 + return result = = null ? 0 : result . length ; 
 + } 
 + 
 + public boolean validate ( ByteBuffer [ ] [ ] result ) 
 + { 
 + if ( result . length ! = expect . size ( ) ) 
 + return false ; 
 + for ( int i = 0 ; i < result . length ; i + + ) 
 + if ( ! expect . get ( i ) . equals ( Arrays . asList ( result [ i ] ) ) ) 
 + return false ; 
 + return true ; 
 + } 
 + } 
 + 
 / / Cql 
 protected abstract class CqlRunOp < V > implements RunOp 
 { 
 @ @ - 451 , 6 + 482 , 87 @ @ public abstract class CqlOperation < V > extends Operation 
 } 
 
 / / Processes results from each client into an array of all key bytes returned 
 + protected static final class RowsHandler implements ResultHandler < ByteBuffer [ ] [ ] > 
 + { 
 + static final RowsHandler INSTANCE = new RowsHandler ( ) ; 
 + 
 + @ Override 
 + public Function < ResultSet , ByteBuffer [ ] [ ] > javaDriverHandler ( ) 
 + { 
 + return new Function < ResultSet , ByteBuffer [ ] [ ] > ( ) 
 + { 
 + 
 + @ Override 
 + public ByteBuffer [ ] [ ] apply ( ResultSet result ) 
 + { 
 + if ( result = = null ) 
 + return new ByteBuffer [ 0 ] [ ] ; 
 + List < Row > rows = result . all ( ) ; 
 + 
 + ByteBuffer [ ] [ ] r = new ByteBuffer [ rows . size ( ) ] [ ] ; 
 + for ( int i = 0 ; i < r . length ; i + + ) 
 + { 
 + Row row = rows . get ( i ) ; 
 + r [ i ] = new ByteBuffer [ row . getColumnDefinitions ( ) . size ( ) - 1 ] ; 
 + for ( int j = 1 ; j < row . getColumnDefinitions ( ) . size ( ) ; j + + ) 
 + r [ i ] [ j - 1 ] = row . getBytes ( j ) ; 
 + } 
 + return r ; 
 + } 
 + } ; 
 + } 
 + 
 + @ Override 
 + public Function < ResultMessage , ByteBuffer [ ] [ ] > thriftHandler ( ) 
 + { 
 + return new Function < ResultMessage , ByteBuffer [ ] [ ] > ( ) 
 + { 
 + 
 + @ Override 
 + public ByteBuffer [ ] [ ] apply ( ResultMessage result ) 
 + { 
 + if ( result instanceof ResultMessage . Rows ) 
 + { 
 + ResultMessage . Rows rows = ( ( ResultMessage . Rows ) result ) ; 
 + ByteBuffer [ ] [ ] r = new ByteBuffer [ rows . result . size ( ) ] [ ] ; 
 + for ( int i = 0 ; i < r . length ; i + + ) 
 + { 
 + List < ByteBuffer > row = rows . result . rows . get ( i ) ; 
 + r [ i ] = new ByteBuffer [ row . size ( ) ] ; 
 + for ( int j = 0 ; j < row . size ( ) ; j + + ) 
 + r [ i ] [ j ] = row . get ( j ) ; 
 + } 
 + return r ; 
 + } 
 + return new ByteBuffer [ 0 ] [ ] ; 
 + } 
 + } ; 
 + } 
 + 
 + @ Override 
 + public Function < CqlResult , ByteBuffer [ ] [ ] > simpleNativeHandler ( ) 
 + { 
 + return new Function < CqlResult , ByteBuffer [ ] [ ] > ( ) 
 + { 
 + 
 + @ Override 
 + public ByteBuffer [ ] [ ] apply ( CqlResult result ) 
 + { 
 + ByteBuffer [ ] [ ] r = new ByteBuffer [ result . getRows ( ) . size ( ) ] [ ] ; 
 + for ( int i = 0 ; i < r . length ; i + + ) 
 + { 
 + CqlRow row = result . getRows ( ) . get ( i ) ; 
 + r [ i ] = new ByteBuffer [ row . getColumns ( ) . size ( ) ] ; 
 + for ( int j = 0 ; j < r [ i ] . length ; j + + ) 
 + r [ i ] [ j ] = ByteBuffer . wrap ( row . getColumns ( ) . get ( j ) . getValue ( ) ) ; 
 + } 
 + return r ; 
 + } 
 + } ; 
 + } 
 + 
 + } 
 + / / Processes results from each client into an array of all key bytes returned 
 protected static final class KeysHandler implements ResultHandler < byte [ ] [ ] > 
 { 
 static final KeysHandler INSTANCE = new KeysHandler ( ) ; 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlReader . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlReader . java 
 index 749a482 . . 44da43f 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlReader . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlReader . java 
 @ @ - 23 , 10 + 23 , 11 @ @ package org . apache . cassandra . stress . operations ; 
 
 import java . nio . ByteBuffer ; 
 import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . List ; 
 
 - public class CqlReader extends CqlOperation < Integer > 
 + public class CqlReader extends CqlOperation < ByteBuffer [ ] [ ] > 
 { 
 
 public CqlReader ( State state , long idx ) 
 @ @ - 79 , 9 + 80 , 10 @ @ public class CqlReader extends CqlOperation < Integer > 
 } 
 
 @ Override 
 - protected CqlRunOp < Integer > buildRunOp ( ClientWrapper client , String query , Object queryId , List < ByteBuffer > params , String keyid , ByteBuffer key ) 
 + protected CqlRunOp < ByteBuffer [ ] [ ] > buildRunOp ( ClientWrapper client , String query , Object queryId , List < ByteBuffer > params , String keyid , ByteBuffer key ) 
 { 
 - return new CqlRunOpTestNonEmpty ( client , query , queryId , params , keyid , key ) ; 
 + List < ByteBuffer > expectRow = state . rowGen . isDeterministic ( ) ? generateColumnValues ( key ) : null ; 
 + return new CqlRunOpMatchResults ( client , query , queryId , params , keyid , key , Arrays . asList ( expectRow ) ) ; 
 } 
 
 } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / ThriftCounterAdder . java b / tools / stress / src / org / apache / cassandra / stress / operations / ThriftCounterAdder . java 
 index b1657b2 . . 26695a6 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / ThriftCounterAdder . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / ThriftCounterAdder . java 
 @ @ - 39 , 7 + 39 , 7 @ @ public class ThriftCounterAdder extends Operation 
 
 public void run ( final ThriftClient client ) throws IOException 
 { 
 - List < CounterColumn > columns = new ArrayList < CounterColumn > ( ) ; 
 + List < CounterColumn > columns = new ArrayList < > ( ) ; 
 for ( int i = 0 ; i < state . settings . columns . maxColumnsPerKey ; i + + ) 
 columns . add ( new CounterColumn ( getColumnNameBytes ( i ) , 1L ) ) ; 
 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / ThriftIndexedRangeSlicer . java b / tools / stress / src / org / apache / cassandra / stress / operations / ThriftIndexedRangeSlicer . java 
 index c6b1b03 . . 6eab209 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / ThriftIndexedRangeSlicer . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / ThriftIndexedRangeSlicer . java 
 @ @ - 49 , 7 + 49 , 7 @ @ public class ThriftIndexedRangeSlicer extends Operation 
 . setSlice _ range ( new SliceRange ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , 
 ByteBufferUtil . EMPTY _ BYTE _ BUFFER , 
 false , state . settings . columns . maxColumnsPerKey ) ) ; 
 - final List < ByteBuffer > columns = generateColumnValues ( ) ; 
 + final List < ByteBuffer > columns = generateColumnValues ( getKey ( ) ) ; 
 final ColumnParent parent = state . columnParents . get ( 0 ) ; 
 
 final ByteBuffer columnName = getColumnNameBytes ( 1 ) ; 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / ThriftInserter . java b / tools / stress / src / org / apache / cassandra / stress / operations / ThriftInserter . java 
 index c5f8051 . . b107f26 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / ThriftInserter . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / ThriftInserter . java 
 @ @ - 42 , 7 + 42 , 7 @ @ public final class ThriftInserter extends Operation 
 public void run ( final ThriftClient client ) throws IOException 
 { 
 final ByteBuffer key = getKey ( ) ; 
 - final List < Column > columns = generateColumns ( ) ; 
 + final List < Column > columns = generateColumns ( key ) ; 
 
 Map < String , List < Mutation > > row ; 
 if ( ! state . settings . columns . useSuperColumns ) 
 @ @ - 92 , 9 + 92 , 9 @ @ public final class ThriftInserter extends Operation 
 } ) ; 
 } 
 
 - protected List < Column > generateColumns ( ) 
 + protected List < Column > generateColumns ( ByteBuffer key ) 
 { 
 - final List < ByteBuffer > values = generateColumnValues ( ) ; 
 + final List < ByteBuffer > values = generateColumnValues ( key ) ; 
 final List < Column > columns = new ArrayList < > ( values . size ( ) ) ; 
 
 if ( state . settings . columns . useTimeUUIDComparator ) 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / ThriftReader . java b / tools / stress / src / org / apache / cassandra / stress / operations / ThriftReader . java 
 index a8605e8 . . c50843f 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / ThriftReader . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / ThriftReader . java 
 @ @ - 19 , 12 + 19 , 16 @ @ package org . apache . cassandra . stress . operations ; 
 
 import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 
 import org . apache . cassandra . stress . Operation ; 
 import org . apache . cassandra . stress . util . ThriftClient ; 
 + import org . apache . cassandra . thrift . ColumnOrSuperColumn ; 
 import org . apache . cassandra . thrift . ColumnParent ; 
 import org . apache . cassandra . thrift . SlicePredicate ; 
 import org . apache . cassandra . thrift . SliceRange ; 
 + import org . apache . cassandra . thrift . SuperColumn ; 
 
 public final class ThriftReader extends Operation 
 { 
 @ @ - 48 , 6 + 52 , 7 @ @ public final class ThriftReader extends Operation 
 predicate . setColumn _ names ( state . settings . columns . names ) ; 
 
 final ByteBuffer key = getKey ( ) ; 
 + final List < ByteBuffer > expect = state . rowGen . isDeterministic ( ) ? generateColumnValues ( key ) : null ; 
 for ( final ColumnParent parent : state . columnParents ) 
 { 
 timeWithRetry ( new RunOp ( ) 
 @ @ - 55 , 7 + 60 , 30 @ @ public final class ThriftReader extends Operation 
 @ Override 
 public boolean run ( ) throws Exception 
 { 
 - return client . get _ slice ( key , parent , predicate , state . settings . command . consistencyLevel ) . size ( ) ! = 0 ; 
 + List < ColumnOrSuperColumn > row = client . get _ slice ( key , parent , predicate , state . settings . command . consistencyLevel ) ; 
 + if ( expect = = null ) 
 + return ! row . isEmpty ( ) ; 
 + if ( ! state . settings . columns . useSuperColumns ) 
 + { 
 + if ( row . size ( ) ! = expect . size ( ) ) 
 + return false ; 
 + for ( int i = 0 ; i < row . size ( ) ; i + + ) 
 + if ( ! row . get ( i ) . getColumn ( ) . bufferForValue ( ) . equals ( expect . get ( i ) ) ) 
 + return false ; 
 + } 
 + else 
 + { 
 + for ( ColumnOrSuperColumn col : row ) 
 + { 
 + SuperColumn superColumn = col . getSuper _ column ( ) ; 
 + if ( superColumn . getColumns ( ) . size ( ) ! = expect . size ( ) ) 
 + return false ; 
 + for ( int i = 0 ; i < expect . size ( ) ; i + + ) 
 + if ( ! superColumn . getColumns ( ) . get ( i ) . bufferForValue ( ) . equals ( expect . get ( i ) ) ) 
 + return false ; 
 + } 
 + } 
 + return true ; 
 } 
 
 @ Override

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b310e29 . . b67d0be 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 3 , 6 + 3 , 7 @ @ 
 * add JVM shutdownhook to sync commitlog ( CASSANDRA - 1919 ) 
 * allow nodes to be up without being part of normal traffic ( CASSANDRA - 1951 ) 
 * fix CLI " show keyspaces " with null options on NTS ( CASSANDRA - 2049 ) 
 + * fix possible ByteBuffer race conditions ( CASSANDRA - 2066 ) 
 
 
 0 . 7 . 1 
 diff - - git a / src / java / org / apache / cassandra / dht / RandomPartitioner . java b / src / java / org / apache / cassandra / dht / RandomPartitioner . java 
 index cffce07 . . 7bbeb6e 100644 
 - - - a / src / java / org / apache / cassandra / dht / RandomPartitioner . java 
 + + + b / src / java / org / apache / cassandra / dht / RandomPartitioner . java 
 @ @ - 98 , 11 + 98 , 7 @ @ public class RandomPartitioner implements IPartitioner < BigIntegerToken > 
 
 public Token < BigInteger > fromByteArray ( ByteBuffer bytes ) 
 { 
 - byte [ ] b = new byte [ bytes . remaining ( ) ] ; 
 - bytes . get ( b ) ; 
 - bytes . rewind ( ) ; 
 - 
 - return new BigIntegerToken ( new BigInteger ( b ) ) ; 
 + return new BigIntegerToken ( new BigInteger ( ByteBufferUtil . getArray ( bytes ) ) ) ; 
 } 
 
 public String toString ( Token < BigInteger > bigIntegerToken ) 
 diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java 
 index 79456e4 . . 7b7fd8d 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java 
 + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java 
 @ @ - 40 , 7 + 40 , 7 @ @ import org . apache . hadoop . mapreduce . TaskAttemptContext ; 
 import org . apache . thrift . TException ; 
 import org . apache . thrift . transport . TSocket ; 
 
 - import static org . apache . cassandra . io . SerDeUtils . copy ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 / * * 
 * The < code > ColumnFamilyRecordWriter < / code > maps the output & lt ; key , value & gt ; 
 @ @ - 169 , 7 + 169 , 7 @ @ implements org . apache . hadoop . mapred . RecordWriter < ByteBuffer , List < org . apache . cass 
 org . apache . cassandra . avro . SlicePredicate apred = amut . deletion . predicate ; 
 if ( amut . deletion . super _ column ! = null ) 
 / / super column 
 - deletion . setSuper _ column ( copy ( amut . deletion . super _ column ) ) ; 
 + deletion . setSuper _ column ( ByteBufferUtil . getArray ( amut . deletion . super _ column ) ) ; 
 else if ( apred . column _ names ! = null ) 
 { 
 / / column names 
 diff - - git a / src / java / org / apache / cassandra / io / SerDeUtils . java b / src / java / org / apache / cassandra / io / SerDeUtils . java 
 index 937ed90 . . 32ab237 100644 
 - - - a / src / java / org / apache / cassandra / io / SerDeUtils . java 
 + + + b / src / java / org / apache / cassandra / io / SerDeUtils . java 
 @ @ - 45 , 14 + 45 , 6 @ @ public final class SerDeUtils 
 / / unbuffered decoders 
 private final static DecoderFactory DIRECT _ DECODERS = new DecoderFactory ( ) . configureDirectDecoder ( true ) ; 
 
 - public static byte [ ] copy ( ByteBuffer buff ) 
 - { 
 - byte [ ] bytes = new byte [ buff . remaining ( ) ] ; 
 - buff . get ( bytes ) ; 
 - buff . rewind ( ) ; 
 - return bytes ; 
 - } 
 - 
 	 / * * 
 * Deserializes a single object based on the given Schema . 
 * @ param writer writer ' s schema 
 diff - - git a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 index 169eb7b . . ff2e461 100644 
 - - - a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 + + + b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 @ @ - 135 , 7 + 135 , 12 @ @ public class ByteBufferUtil 
 public static byte [ ] getArray ( ByteBuffer b , int start , int length ) 
 { 
 if ( b . hasArray ( ) ) 
 - return Arrays . copyOfRange ( b . array ( ) , start + b . arrayOffset ( ) , start + length + b . arrayOffset ( ) ) ; 
 + { 
 + if ( b . arrayOffset ( ) = = 0 & & start = = 0 & & length = = b . array ( ) . length ) 
 + return b . array ( ) ; 
 + else 
 + return Arrays . copyOfRange ( b . array ( ) , start + b . arrayOffset ( ) , start + length + b . arrayOffset ( ) ) ; 
 + } 
 
 byte [ ] bytes = new byte [ length ] ; 

