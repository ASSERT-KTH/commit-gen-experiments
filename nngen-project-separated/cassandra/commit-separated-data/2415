BLEU SCORE: 0.029859662827819124

TEST MSG: use long math for long results
GENERATED MSG: HHOM only sleeps for rounded intervals to prevent problems on windows .

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / concurrent / SEPWorker . java b / src / java / org / apache / cassandra / concurrent / SEPWorker . java <nl> index ef79c74 . . 60a8d61 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / SEPWorker . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / SEPWorker . java <nl> @ @ - 221 , 7 + 221 , 7 @ @ final class SEPWorker extends AtomicReference < SEPWorker . Work > implements Runnabl <nl> { <nl> / / pick a random sleep interval based on the number of threads spinning , so that <nl> / / we should always have a thread about to wake up , but most threads are sleeping <nl> - long sleep = 10000 * pool . spinningCount . get ( ) ; <nl> + long sleep = 10000L * pool . spinningCount . get ( ) ; <nl> sleep = Math . min ( 1000000 , sleep ) ; <nl> sleep * = Math . random ( ) ; <nl> sleep = Math . max ( 10000 , sleep ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> index 0ffca86 . . 52600d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> @ @ - 236 , 6 + 236 , 7 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean <nl> / / sleep a random amount to stagger handoff delivery from different replicas . <nl> / / ( if we had to wait , then gossiper randomness took care of that for us already . ) <nl> if ( waited = = 0 ) { <nl> + / / use a ' rounded ' sleep interval because of a strange bug with windows : CASSANDRA - 3375 <nl> int sleep = FBUtilities . threadLocalRandom ( ) . nextInt ( 2000 ) * 30 ; <nl> logger _ . debug ( " Sleeping { } ms to stagger hint delivery " , sleep ) ; <nl> Thread . sleep ( sleep ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / concurrent / SEPWorker . java b / src / java / org / apache / cassandra / concurrent / SEPWorker . java 
 index ef79c74 . . 60a8d61 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / SEPWorker . java 
 + + + b / src / java / org / apache / cassandra / concurrent / SEPWorker . java 
 @ @ - 221 , 7 + 221 , 7 @ @ final class SEPWorker extends AtomicReference < SEPWorker . Work > implements Runnabl 
 { 
 / / pick a random sleep interval based on the number of threads spinning , so that 
 / / we should always have a thread about to wake up , but most threads are sleeping 
 - long sleep = 10000 * pool . spinningCount . get ( ) ; 
 + long sleep = 10000L * pool . spinningCount . get ( ) ; 
 sleep = Math . min ( 1000000 , sleep ) ; 
 sleep * = Math . random ( ) ; 
 sleep = Math . max ( 10000 , sleep ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 index 0ffca86 . . 52600d7 100644 
 - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 @ @ - 236 , 6 + 236 , 7 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean 
 / / sleep a random amount to stagger handoff delivery from different replicas . 
 / / ( if we had to wait , then gossiper randomness took care of that for us already . ) 
 if ( waited = = 0 ) { 
 + / / use a ' rounded ' sleep interval because of a strange bug with windows : CASSANDRA - 3375 
 int sleep = FBUtilities . threadLocalRandom ( ) . nextInt ( 2000 ) * 30 ; 
 logger _ . debug ( " Sleeping { } ms to stagger hint delivery " , sleep ) ; 
 Thread . sleep ( sleep ) ;
