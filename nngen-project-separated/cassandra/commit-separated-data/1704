BLEU SCORE: 0.020980574531482755

TEST MSG: Add shutdown gossip state to prevent timeouts during rolling restarts
GENERATED MSG: merge from 0 . 7

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 521668d . . 460b07c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 15 : <nl> + * Add shutdown gossip state to prevent timeouts during rolling restarts ( CASSANDRA - 8336 ) <nl> * Fix running with java . net . preferIPv6Addresses = true ( CASSANDRA - 9137 ) <nl> * Fix failed bootstrap / replace attempts being persisted in system . peers ( CASSANDRA - 9180 ) <nl> * Flush system . IndexInfo after marking index built ( CASSANDRA - 9128 ) <nl> diff - - git a / src / java / org / apache / cassandra / gms / GossipShutdownVerbHandler . java b / src / java / org / apache / cassandra / gms / GossipShutdownVerbHandler . java <nl> index ef71208 . . 1691107 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / GossipShutdownVerbHandler . java <nl> + + + b / src / java / org / apache / cassandra / gms / GossipShutdownVerbHandler . java <nl> @ @ - 34 , 7 + 34 , 7 @ @ public class GossipShutdownVerbHandler implements IVerbHandler <nl> logger . debug ( " Ignoring shutdown message from { } because gossip is disabled " , message . from ) ; <nl> return ; <nl> } <nl> - FailureDetector . instance . forceConviction ( message . from ) ; <nl> + Gossiper . instance . markAsShutdown ( message . from ) ; <nl> } <nl> <nl> } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 962a358 . . 090033e 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 71 , 6 + 71 , 11 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> static final ApplicationState [ ] STATES = ApplicationState . values ( ) ; <nl> static final List < String > DEAD _ STATES = Arrays . asList ( VersionedValue . REMOVING _ TOKEN , VersionedValue . REMOVED _ TOKEN , <nl> VersionedValue . STATUS _ LEFT , VersionedValue . HIBERNATE ) ; <nl> + static List < String > SILENT _ SHUTDOWN _ STATES = DEAD _ STATES ; <nl> + static { <nl> + SILENT _ SHUTDOWN _ STATES . add ( VersionedValue . STATUS _ BOOTSTRAPPING ) ; <nl> + SILENT _ SHUTDOWN _ STATES . add ( VersionedValue . STATUS _ LEFT ) ; <nl> + } <nl> <nl> private ScheduledFuture < ? > scheduledGossipTask ; <nl> private static final ReentrantLock taskLock = new ReentrantLock ( ) ; <nl> @ @ - 297 , 6 + 302 , 20 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> return 0L ; <nl> } <nl> <nl> + private boolean isShutdown ( InetAddress endpoint ) <nl> + { <nl> + EndpointState epState = endpointStateMap . get ( endpoint ) ; <nl> + if ( epState = = null ) <nl> + return false ; <nl> + if ( epState . getApplicationState ( ApplicationState . STATUS ) = = null ) <nl> + return false ; <nl> + String value = epState . getApplicationState ( ApplicationState . STATUS ) . value ; <nl> + String [ ] pieces = value . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; <nl> + assert ( pieces . length > 0 ) ; <nl> + String state = pieces [ 0 ] ; <nl> + return state . equals ( VersionedValue . SHUTDOWN ) ; <nl> + } <nl> + <nl> / * * <nl> * This method is part of IFailureDetectionEventListener interface . This is invoked <nl> * by the Failure Detector when it convicts an end point . <nl> @ @ - 308 , 7 + 327 , 11 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> EndpointState epState = endpointStateMap . get ( endpoint ) ; <nl> if ( epState = = null ) <nl> return ; <nl> - if ( epState . isAlive ( ) & & ! isDeadState ( epState ) ) <nl> + if ( isShutdown ( endpoint ) & & epState . isAlive ( ) ) <nl> + { <nl> + markAsShutdown ( endpoint ) ; <nl> + } <nl> + else if ( epState . isAlive ( ) & & ! isDeadState ( epState ) ) <nl> { <nl> markDead ( endpoint , epState ) ; <nl> } <nl> @ @ - 317 , 6 + 340 , 21 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> } <nl> <nl> / * * <nl> + * This method is used to mark a node as shutdown ; that is it gracefully exited on its own and told us about it <nl> + * @ param endpoint endpoint that has shut itself down <nl> + * / <nl> + protected void markAsShutdown ( InetAddress endpoint ) <nl> + { <nl> + EndpointState epState = endpointStateMap . get ( endpoint ) ; <nl> + if ( epState = = null ) <nl> + return ; <nl> + epState . addApplicationState ( ApplicationState . STATUS , StorageService . instance . valueFactory . shutdown ( true ) ) ; <nl> + epState . getHeartBeatState ( ) . forceHighestPossibleVersionUnsafe ( ) ; <nl> + markDead ( endpoint , epState ) ; <nl> + FailureDetector . instance . forceConviction ( endpoint ) ; <nl> + } <nl> + <nl> + / * * <nl> * Return either : the greatest heartbeat or application state <nl> * <nl> * @ param epState <nl> @ @ - 963 , 6 + 1001 , 9 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> } <nl> for ( IEndpointStateChangeSubscriber subscriber : subscribers ) <nl> subscriber . onJoin ( ep , epState ) ; <nl> + / / check this at the end so nodes will learn about the endpoint <nl> + if ( isShutdown ( ep ) ) <nl> + markAsShutdown ( ep ) ; <nl> } <nl> <nl> public boolean isDeadState ( EndpointState epState ) <nl> @ @ - 981 , 6 + 1022 , 22 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> return false ; <nl> } <nl> <nl> + public boolean isSilentShutdownState ( EndpointState epState ) <nl> + { <nl> + if ( epState . getApplicationState ( ApplicationState . STATUS ) = = null ) <nl> + return false ; <nl> + String value = epState . getApplicationState ( ApplicationState . STATUS ) . value ; <nl> + String [ ] pieces = value . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; <nl> + assert ( pieces . length > 0 ) ; <nl> + String state = pieces [ 0 ] ; <nl> + for ( String deadstate : SILENT _ SHUTDOWN _ STATES ) <nl> + { <nl> + if ( state . equals ( deadstate ) ) <nl> + return true ; <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> void applyStateLocally ( Map < InetAddress , EndpointState > epStateMap ) <nl> { <nl> for ( Entry < InetAddress , EndpointState > entry : epStateMap . entrySet ( ) ) <nl> @ @ - 1264 , 6 + 1321 , 12 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> endpointStateMap . putIfAbsent ( FBUtilities . getBroadcastAddress ( ) , localState ) ; <nl> } <nl> <nl> + public void forceNewerGeneration ( ) <nl> + { <nl> + EndpointState epstate = endpointStateMap . get ( FBUtilities . getBroadcastAddress ( ) ) ; <nl> + epstate . getHeartBeatState ( ) . forceNewerGenerationUnsafe ( ) ; <nl> + } <nl> + <nl> <nl> / * * <nl> * Add an endpoint we knew about previously , but whose state is unknown <nl> @ @ - 1330 , 13 + 1393 , 20 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> <nl> public void stop ( ) <nl> { <nl> - 	 if ( scheduledGossipTask ! = null ) <nl> - 	 	 scheduledGossipTask . cancel ( false ) ; <nl> - logger . info ( " Announcing shutdown " ) ; <nl> - Uninterruptibles . sleepUninterruptibly ( intervalInMillis * 2 , TimeUnit . MILLISECONDS ) ; <nl> - MessageOut message = new MessageOut ( MessagingService . Verb . GOSSIP _ SHUTDOWN ) ; <nl> - for ( InetAddress ep : liveEndpoints ) <nl> - MessagingService . instance ( ) . sendOneWay ( message , ep ) ; <nl> + EndpointState mystate = endpointStateMap . get ( FBUtilities . getBroadcastAddress ( ) ) ; <nl> + if ( mystate ! = null & & ! isSilentShutdownState ( mystate ) ) <nl> + { <nl> + logger . info ( " Announcing shutdown " ) ; <nl> + addLocalApplicationState ( ApplicationState . STATUS , StorageService . instance . valueFactory . shutdown ( true ) ) ; <nl> + MessageOut message = new MessageOut ( MessagingService . Verb . GOSSIP _ SHUTDOWN ) ; <nl> + for ( InetAddress ep : liveEndpoints ) <nl> + MessagingService . instance ( ) . sendOneWay ( message , ep ) ; <nl> + Uninterruptibles . sleepUninterruptibly ( Integer . getInteger ( " cassandra . shutdown _ announce _ in _ ms " , 2000 ) , TimeUnit . MILLISECONDS ) ; <nl> + } <nl> + else <nl> + logger . warn ( " No local state or state is in silent shutdown , not announcing shutdown " ) ; <nl> + if ( scheduledGossipTask ! = null ) <nl> + scheduledGossipTask . cancel ( false ) ; <nl> } <nl> <nl> public boolean isEnabled ( ) <nl> diff - - git a / src / java / org / apache / cassandra / gms / HeartBeatState . java b / src / java / org / apache / cassandra / gms / HeartBeatState . java <nl> index c3b423c . . 4af5dd8 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / HeartBeatState . java <nl> + + + b / src / java / org / apache / cassandra / gms / HeartBeatState . java <nl> @ @ - 63 , 6 + 63 , 11 @ @ class HeartBeatState <nl> generation + = 1 ; <nl> } <nl> <nl> + void forceHighestPossibleVersionUnsafe ( ) <nl> + { <nl> + version = Integer . MAX _ VALUE ; <nl> + } <nl> + <nl> public String toString ( ) <nl> { <nl> return String . format ( " HeartBeat : generation = % d , version = % d " , generation , version ) ; <nl> diff - - git a / src / java / org / apache / cassandra / gms / VersionedValue . java b / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> index 565a8cb . . b0918ac 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> + + + b / src / java / org / apache / cassandra / gms / VersionedValue . java <nl> @ @ - 69 , 6 + 69 , 7 @ @ public class VersionedValue implements Comparable < VersionedValue > <nl> public final static String REMOVED _ TOKEN = " removed " ; <nl> <nl> public final static String HIBERNATE = " hibernate " ; <nl> + public final static String SHUTDOWN = " shutdown " ; <nl> <nl> / / values for ApplicationState . REMOVAL _ COORDINATOR <nl> public final static String REMOVAL _ COORDINATOR = " REMOVER " ; <nl> @ @ - 207 , 6 + 208 , 11 @ @ public class VersionedValue implements Comparable < VersionedValue > <nl> return new VersionedValue ( VersionedValue . HIBERNATE + VersionedValue . DELIMITER + value ) ; <nl> } <nl> <nl> + public VersionedValue shutdown ( boolean value ) <nl> + { <nl> + return new VersionedValue ( VersionedValue . SHUTDOWN + VersionedValue . DELIMITER + value ) ; <nl> + } <nl> + <nl> public VersionedValue datacenter ( String dcId ) <nl> { <nl> return new VersionedValue ( dcId ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index e906f03 . . 077413f 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 37 , 12 + 37 , 10 @ @ import javax . management . ObjectName ; <nl> import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . base . Predicate ; <nl> import com . google . common . collect . * ; <nl> - import com . google . common . util . concurrent . AtomicDouble ; <nl> import com . google . common . util . concurrent . FutureCallback ; <nl> import com . google . common . util . concurrent . Futures ; <nl> import com . google . common . util . concurrent . Uninterruptibles ; <nl> <nl> - import org . apache . cassandra . cql3 . CQL3Type ; <nl> import org . apache . commons . lang3 . StringUtils ; <nl> import org . apache . log4j . Level ; <nl> import org . apache . log4j . LogManager ; <nl> @ @ - 205 , 11 + 203 , 16 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> SystemKeyspace . updateTokens ( tokens ) ; <nl> tokenMetadata . updateNormalTokens ( tokens , FBUtilities . getBroadcastAddress ( ) ) ; <nl> Collection < Token > localTokens = getLocalTokens ( ) ; <nl> + setGossipTokens ( localTokens ) ; <nl> + setMode ( Mode . NORMAL , false ) ; <nl> + } <nl> + <nl> + public void setGossipTokens ( Collection < Token > tokens ) <nl> + { <nl> List < Pair < ApplicationState , VersionedValue > > states = new ArrayList < Pair < ApplicationState , VersionedValue > > ( ) ; <nl> - states . add ( Pair . create ( ApplicationState . TOKENS , valueFactory . tokens ( localTokens ) ) ) ; <nl> - states . add ( Pair . create ( ApplicationState . STATUS , valueFactory . normal ( localTokens ) ) ) ; <nl> + states . add ( Pair . create ( ApplicationState . TOKENS , valueFactory . tokens ( tokens ) ) ) ; <nl> + states . add ( Pair . create ( ApplicationState . STATUS , valueFactory . normal ( tokens ) ) ) ; <nl> Gossiper . instance . addLocalApplicationStates ( states ) ; <nl> - setMode ( Mode . NORMAL , false ) ; <nl> } <nl> <nl> public StorageService ( ) <nl> @ @ - 289 , 6 + 292 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> if ( ! initialized ) <nl> { <nl> logger . warn ( " Starting gossip by operator request " ) ; <nl> + setGossipTokens ( getLocalTokens ( ) ) ; <nl> + Gossiper . instance . forceNewerGeneration ( ) ; <nl> Gossiper . instance . start ( ( int ) ( System . currentTimeMillis ( ) / 1000 ) ) ; <nl> initialized = true ; <nl> } <nl> @ @ - 1346 , 7 + 1351 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> if ( moveName . equals ( VersionedValue . STATUS _ BOOTSTRAPPING ) ) <nl> handleStateBootstrap ( endpoint , pieces ) ; <nl> - else if ( moveName . equals ( VersionedValue . STATUS _ NORMAL ) ) <nl> + else if ( moveName . equals ( VersionedValue . STATUS _ NORMAL ) | | moveName . equals ( VersionedValue . SHUTDOWN ) ) <nl> handleStateNormal ( endpoint , pieces ) ; <nl> else if ( moveName . equals ( VersionedValue . REMOVING _ TOKEN ) | | moveName . equals ( VersionedValue . REMOVED _ TOKEN ) ) <nl> handleStateRemoving ( endpoint , pieces ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index eec904a . . 982454c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 59 , 6 + 59 , 8 @ @ <nl> the old ones ( CASSANDRA - 1644 ) <nl> * upgrade to Thrift 0 . 5 ( CASSANDRA - 1367 ) <nl> * renamed CL . DCQUORUM to LOCAL _ QUORUM and DCQUORUMSYNC to EACH _ QUORUM <nl> + * cli truncate support ( CASSANDRA - 1653 ) <nl> + * update GC settings in cassandra . bat ( CASSANDRA - 1636 ) <nl> <nl> <nl> 0 . 7 - beta2 <nl> diff - - git a / src / java / org / apache / cassandra / cli / Cli . g b / src / java / org / apache / cassandra / cli / Cli . g <nl> index e59c608 . . a9229ee 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / Cli . g <nl> + + + b / src / java / org / apache / cassandra / cli / Cli . g <nl> @ @ - 55 , 6 + 55 , 7 @ @ tokens { <nl> NODE _ UPDATE _ KEYSPACE ; <nl> NODE _ UPDATE _ COLUMN _ FAMILY ; <nl> NODE _ LIST ; <nl> + NODE _ TRUNCATE ; <nl> <nl> / / Internal Nodes . <nl> NODE _ COLUMN _ ACCESS ; <nl> @ @ - 123 , 6 + 124 , 7 @ @ statement <nl> | setStatement <nl> | showStatement <nl> | listStatement <nl> + | truncateStatement <nl> | - > ^ ( NODE _ NO _ OP ) <nl> ; <nl> <nl> @ @ - 174 , 6 + 176 , 8 @ @ helpStatement <nl> - > ^ ( NODE _ HELP NODE _ THRIFT _ COUNT ) <nl> | K _ HELP K _ LIST <nl> - > ^ ( NODE _ HELP NODE _ LIST ) <nl> + | K _ HELP K _ TRUNCATE <nl> + - > ^ ( NODE _ HELP NODE _ TRUNCATE ) <nl> | K _ HELP <nl> - > ^ ( NODE _ HELP ) <nl> | ' ? ' <nl> @ @ - 231 , 6 + 235 , 11 @ @ listStatement <nl> - > ^ ( NODE _ LIST columnFamily keyRangeExpr ? ^ ( NODE _ LIMIT $ limit ) ? ) <nl> ; <nl> <nl> + truncateStatement <nl> + : K _ TRUNCATE columnFamily <nl> + - > ^ ( NODE _ TRUNCATE columnFamily ) <nl> + ; <nl> + <nl> showClusterName <nl> : K _ SHOW K _ CLUSTER K _ NAME <nl> - > ^ ( NODE _ SHOW _ CLUSTER _ NAME ) <nl> @ @ - 430 , 6 + 439 , 7 @ @ K _ AND : ' AND ' ; <nl> K _ UPDATE : ' UPDATE ' ; <nl> K _ LIST : ' LIST ' ; <nl> K _ LIMIT : ' LIMIT ' ; <nl> + K _ TRUNCATE : ' TRUNCATE ' ; <nl> <nl> / / private syntactic rules <nl> fragment <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index b6ace98 . . b63105a 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 171 , 6 + 171 , 9 @ @ public class CliClient extends CliUserHelp <nl> case CliParser . NODE _ LIST : <nl> executeList ( tree ) ; <nl> break ; <nl> + case CliParser . NODE _ TRUNCATE : <nl> + executeTruncate ( tree . getChild ( 0 ) . getText ( ) ) ; <nl> + break ; <nl> case CliParser . NODE _ NO _ OP : <nl> / / comment lines come here ; they are treated as no ops . <nl> break ; <nl> @ @ - 943 , 6 + 946 , 30 @ @ public class CliClient extends CliUserHelp <nl> printSliceList ( columnFamilyDef , keySlices ) ; <nl> } <nl> <nl> + / / TRUNCATE < columnFamily > <nl> + private void executeTruncate ( String columnFamily ) <nl> + { <nl> + if ( ! CliMain . isConnected ( ) | | ! hasKeySpace ( ) ) <nl> + return ; <nl> + <nl> + / / getting CfDef , it will fail if there is no such column family in current keySpace . <nl> + CfDef cfDef = getCfDef ( columnFamily ) ; <nl> + <nl> + try <nl> + { <nl> + thriftClient . truncate ( cfDef . getName ( ) ) ; <nl> + sessionState . out . println ( columnFamily + " truncated . " ) ; <nl> + } <nl> + catch ( InvalidRequestException e ) <nl> + { <nl> + throw new RuntimeException ( e . getWhy ( ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> / / SHOW API VERSION <nl> private void executeShowVersion ( ) throws TException <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliCompleter . java b / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> index f541fe5 . . b033d8f 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> @ @ - 55 , 12 + 55 , 16 @ @ public class CliCompleter extends SimpleCompletor <nl> " help set " , <nl> " help del " , <nl> " help count " , <nl> + " help list " , <nl> + " help truncate " <nl> } ; <nl> private static String [ ] keyspaceCommands = { <nl> " get " , <nl> " set " , <nl> " count " , <nl> - " del " <nl> + " del " , <nl> + " list " , <nl> + " truncate " <nl> } ; <nl> <nl> public CliCompleter ( ) <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliUserHelp . java b / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> index 7c512e2 . . db6a779 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> @ @ - 281 , 6 + 281 , 13 @ @ public class CliUserHelp { <nl> state . out . println ( " list Users [ j : ] limit 40 " ) ; <nl> break ; <nl> <nl> + case CliParser . NODE _ TRUNCATE : <nl> + state . out . println ( " truncate < column _ family > " ) ; <nl> + state . out . println ( " Truncate specified column family . \ n " ) ; <nl> + state . out . println ( " example : " ) ; <nl> + state . out . println ( " truncate Category " ) ; <nl> + break ; <nl> + <nl> default : <nl> state . out . println ( " ? " ) ; <nl> break ; <nl> @ @ - 324 , 7 + 331 , 8 @ @ public class CliUserHelp { <nl> state . out . println ( " del < cf > [ ' < key > ' ] [ ' < super > ' ] [ ' < col > ' ] Delete sub column . " ) ; <nl> state . out . println ( " count < cf > [ ' < key > ' ] Count columns in record . " ) ; <nl> state . out . println ( " count < cf > [ ' < key > ' ] [ ' < super > ' ] Count columns in a super column . " ) ; <nl> - state . out . println ( " list < cf > List all rows in the column family . " ) ; <nl> + state . out . println ( " truncate < column _ family > Truncate specified column family . " ) ; <nl> + state . out . println ( " list < cf > List all rows in the column family . " ) ; <nl> state . out . println ( " list < cf > [ < startKey > : ] " ) ; <nl> state . out . println ( " List rows in the column family beginning with < startKey > . " ) ; <nl> state . out . println ( " list < cf > [ < startKey > : < endKey > ] " ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> index 24a3de0 . . eddcafd 100644 <nl> - - - a / test / unit / org / apache / cassandra / cli / CliTest . java <nl> + + + b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> @ @ - 52 , 6 + 52 , 7 @ @ public class CliTest extends TestCase <nl> " list CF3 [ h : ] " , <nl> " list CF3 limit 10 " , <nl> " list CF3 [ h : g ] limit 10 " , <nl> + " truncate CF1 " , <nl> " update keyspace TestKeySpace with placement _ strategy = ' org . apache . cassandra . locator . LocalStrategy ' " , <nl> " update keyspace TestKeySpace with replication _ factor = 1 and strategy _ options = [ { DC1 : 3 , DC2 : 4 , DC5 : 1 } ] " <nl> } ; <nl> @ @ - 101 , 6 + 102 , 10 @ @ public class CliTest extends TestCase <nl> assertTrue ( result . startsWith ( " = > ( column = " ) ) ; <nl> } <nl> } <nl> + else if ( statement . startsWith ( " truncate " ) ) <nl> + { <nl> + assertTrue ( result . contains ( " truncated . " ) ) ; <nl> + } <nl> <nl> outStream . reset ( ) ; / / reset stream so we have only output from next statement all the time <nl> errStream . reset ( ) ; / / no errors to the end user .

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 521668d . . 460b07c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 15 : 
 + * Add shutdown gossip state to prevent timeouts during rolling restarts ( CASSANDRA - 8336 ) 
 * Fix running with java . net . preferIPv6Addresses = true ( CASSANDRA - 9137 ) 
 * Fix failed bootstrap / replace attempts being persisted in system . peers ( CASSANDRA - 9180 ) 
 * Flush system . IndexInfo after marking index built ( CASSANDRA - 9128 ) 
 diff - - git a / src / java / org / apache / cassandra / gms / GossipShutdownVerbHandler . java b / src / java / org / apache / cassandra / gms / GossipShutdownVerbHandler . java 
 index ef71208 . . 1691107 100644 
 - - - a / src / java / org / apache / cassandra / gms / GossipShutdownVerbHandler . java 
 + + + b / src / java / org / apache / cassandra / gms / GossipShutdownVerbHandler . java 
 @ @ - 34 , 7 + 34 , 7 @ @ public class GossipShutdownVerbHandler implements IVerbHandler 
 logger . debug ( " Ignoring shutdown message from { } because gossip is disabled " , message . from ) ; 
 return ; 
 } 
 - FailureDetector . instance . forceConviction ( message . from ) ; 
 + Gossiper . instance . markAsShutdown ( message . from ) ; 
 } 
 
 } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 962a358 . . 090033e 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 71 , 6 + 71 , 11 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 static final ApplicationState [ ] STATES = ApplicationState . values ( ) ; 
 static final List < String > DEAD _ STATES = Arrays . asList ( VersionedValue . REMOVING _ TOKEN , VersionedValue . REMOVED _ TOKEN , 
 VersionedValue . STATUS _ LEFT , VersionedValue . HIBERNATE ) ; 
 + static List < String > SILENT _ SHUTDOWN _ STATES = DEAD _ STATES ; 
 + static { 
 + SILENT _ SHUTDOWN _ STATES . add ( VersionedValue . STATUS _ BOOTSTRAPPING ) ; 
 + SILENT _ SHUTDOWN _ STATES . add ( VersionedValue . STATUS _ LEFT ) ; 
 + } 
 
 private ScheduledFuture < ? > scheduledGossipTask ; 
 private static final ReentrantLock taskLock = new ReentrantLock ( ) ; 
 @ @ - 297 , 6 + 302 , 20 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 return 0L ; 
 } 
 
 + private boolean isShutdown ( InetAddress endpoint ) 
 + { 
 + EndpointState epState = endpointStateMap . get ( endpoint ) ; 
 + if ( epState = = null ) 
 + return false ; 
 + if ( epState . getApplicationState ( ApplicationState . STATUS ) = = null ) 
 + return false ; 
 + String value = epState . getApplicationState ( ApplicationState . STATUS ) . value ; 
 + String [ ] pieces = value . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; 
 + assert ( pieces . length > 0 ) ; 
 + String state = pieces [ 0 ] ; 
 + return state . equals ( VersionedValue . SHUTDOWN ) ; 
 + } 
 + 
 / * * 
 * This method is part of IFailureDetectionEventListener interface . This is invoked 
 * by the Failure Detector when it convicts an end point . 
 @ @ - 308 , 7 + 327 , 11 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 EndpointState epState = endpointStateMap . get ( endpoint ) ; 
 if ( epState = = null ) 
 return ; 
 - if ( epState . isAlive ( ) & & ! isDeadState ( epState ) ) 
 + if ( isShutdown ( endpoint ) & & epState . isAlive ( ) ) 
 + { 
 + markAsShutdown ( endpoint ) ; 
 + } 
 + else if ( epState . isAlive ( ) & & ! isDeadState ( epState ) ) 
 { 
 markDead ( endpoint , epState ) ; 
 } 
 @ @ - 317 , 6 + 340 , 21 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 } 
 
 / * * 
 + * This method is used to mark a node as shutdown ; that is it gracefully exited on its own and told us about it 
 + * @ param endpoint endpoint that has shut itself down 
 + * / 
 + protected void markAsShutdown ( InetAddress endpoint ) 
 + { 
 + EndpointState epState = endpointStateMap . get ( endpoint ) ; 
 + if ( epState = = null ) 
 + return ; 
 + epState . addApplicationState ( ApplicationState . STATUS , StorageService . instance . valueFactory . shutdown ( true ) ) ; 
 + epState . getHeartBeatState ( ) . forceHighestPossibleVersionUnsafe ( ) ; 
 + markDead ( endpoint , epState ) ; 
 + FailureDetector . instance . forceConviction ( endpoint ) ; 
 + } 
 + 
 + / * * 
 * Return either : the greatest heartbeat or application state 
 * 
 * @ param epState 
 @ @ - 963 , 6 + 1001 , 9 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 } 
 for ( IEndpointStateChangeSubscriber subscriber : subscribers ) 
 subscriber . onJoin ( ep , epState ) ; 
 + / / check this at the end so nodes will learn about the endpoint 
 + if ( isShutdown ( ep ) ) 
 + markAsShutdown ( ep ) ; 
 } 
 
 public boolean isDeadState ( EndpointState epState ) 
 @ @ - 981 , 6 + 1022 , 22 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 return false ; 
 } 
 
 + public boolean isSilentShutdownState ( EndpointState epState ) 
 + { 
 + if ( epState . getApplicationState ( ApplicationState . STATUS ) = = null ) 
 + return false ; 
 + String value = epState . getApplicationState ( ApplicationState . STATUS ) . value ; 
 + String [ ] pieces = value . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; 
 + assert ( pieces . length > 0 ) ; 
 + String state = pieces [ 0 ] ; 
 + for ( String deadstate : SILENT _ SHUTDOWN _ STATES ) 
 + { 
 + if ( state . equals ( deadstate ) ) 
 + return true ; 
 + } 
 + return false ; 
 + } 
 + 
 void applyStateLocally ( Map < InetAddress , EndpointState > epStateMap ) 
 { 
 for ( Entry < InetAddress , EndpointState > entry : epStateMap . entrySet ( ) ) 
 @ @ - 1264 , 6 + 1321 , 12 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 endpointStateMap . putIfAbsent ( FBUtilities . getBroadcastAddress ( ) , localState ) ; 
 } 
 
 + public void forceNewerGeneration ( ) 
 + { 
 + EndpointState epstate = endpointStateMap . get ( FBUtilities . getBroadcastAddress ( ) ) ; 
 + epstate . getHeartBeatState ( ) . forceNewerGenerationUnsafe ( ) ; 
 + } 
 + 
 
 / * * 
 * Add an endpoint we knew about previously , but whose state is unknown 
 @ @ - 1330 , 13 + 1393 , 20 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 
 public void stop ( ) 
 { 
 - 	 if ( scheduledGossipTask ! = null ) 
 - 	 	 scheduledGossipTask . cancel ( false ) ; 
 - logger . info ( " Announcing shutdown " ) ; 
 - Uninterruptibles . sleepUninterruptibly ( intervalInMillis * 2 , TimeUnit . MILLISECONDS ) ; 
 - MessageOut message = new MessageOut ( MessagingService . Verb . GOSSIP _ SHUTDOWN ) ; 
 - for ( InetAddress ep : liveEndpoints ) 
 - MessagingService . instance ( ) . sendOneWay ( message , ep ) ; 
 + EndpointState mystate = endpointStateMap . get ( FBUtilities . getBroadcastAddress ( ) ) ; 
 + if ( mystate ! = null & & ! isSilentShutdownState ( mystate ) ) 
 + { 
 + logger . info ( " Announcing shutdown " ) ; 
 + addLocalApplicationState ( ApplicationState . STATUS , StorageService . instance . valueFactory . shutdown ( true ) ) ; 
 + MessageOut message = new MessageOut ( MessagingService . Verb . GOSSIP _ SHUTDOWN ) ; 
 + for ( InetAddress ep : liveEndpoints ) 
 + MessagingService . instance ( ) . sendOneWay ( message , ep ) ; 
 + Uninterruptibles . sleepUninterruptibly ( Integer . getInteger ( " cassandra . shutdown _ announce _ in _ ms " , 2000 ) , TimeUnit . MILLISECONDS ) ; 
 + } 
 + else 
 + logger . warn ( " No local state or state is in silent shutdown , not announcing shutdown " ) ; 
 + if ( scheduledGossipTask ! = null ) 
 + scheduledGossipTask . cancel ( false ) ; 
 } 
 
 public boolean isEnabled ( ) 
 diff - - git a / src / java / org / apache / cassandra / gms / HeartBeatState . java b / src / java / org / apache / cassandra / gms / HeartBeatState . java 
 index c3b423c . . 4af5dd8 100644 
 - - - a / src / java / org / apache / cassandra / gms / HeartBeatState . java 
 + + + b / src / java / org / apache / cassandra / gms / HeartBeatState . java 
 @ @ - 63 , 6 + 63 , 11 @ @ class HeartBeatState 
 generation + = 1 ; 
 } 
 
 + void forceHighestPossibleVersionUnsafe ( ) 
 + { 
 + version = Integer . MAX _ VALUE ; 
 + } 
 + 
 public String toString ( ) 
 { 
 return String . format ( " HeartBeat : generation = % d , version = % d " , generation , version ) ; 
 diff - - git a / src / java / org / apache / cassandra / gms / VersionedValue . java b / src / java / org / apache / cassandra / gms / VersionedValue . java 
 index 565a8cb . . b0918ac 100644 
 - - - a / src / java / org / apache / cassandra / gms / VersionedValue . java 
 + + + b / src / java / org / apache / cassandra / gms / VersionedValue . java 
 @ @ - 69 , 6 + 69 , 7 @ @ public class VersionedValue implements Comparable < VersionedValue > 
 public final static String REMOVED _ TOKEN = " removed " ; 
 
 public final static String HIBERNATE = " hibernate " ; 
 + public final static String SHUTDOWN = " shutdown " ; 
 
 / / values for ApplicationState . REMOVAL _ COORDINATOR 
 public final static String REMOVAL _ COORDINATOR = " REMOVER " ; 
 @ @ - 207 , 6 + 208 , 11 @ @ public class VersionedValue implements Comparable < VersionedValue > 
 return new VersionedValue ( VersionedValue . HIBERNATE + VersionedValue . DELIMITER + value ) ; 
 } 
 
 + public VersionedValue shutdown ( boolean value ) 
 + { 
 + return new VersionedValue ( VersionedValue . SHUTDOWN + VersionedValue . DELIMITER + value ) ; 
 + } 
 + 
 public VersionedValue datacenter ( String dcId ) 
 { 
 return new VersionedValue ( dcId ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index e906f03 . . 077413f 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 37 , 12 + 37 , 10 @ @ import javax . management . ObjectName ; 
 import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . base . Predicate ; 
 import com . google . common . collect . * ; 
 - import com . google . common . util . concurrent . AtomicDouble ; 
 import com . google . common . util . concurrent . FutureCallback ; 
 import com . google . common . util . concurrent . Futures ; 
 import com . google . common . util . concurrent . Uninterruptibles ; 
 
 - import org . apache . cassandra . cql3 . CQL3Type ; 
 import org . apache . commons . lang3 . StringUtils ; 
 import org . apache . log4j . Level ; 
 import org . apache . log4j . LogManager ; 
 @ @ - 205 , 11 + 203 , 16 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 SystemKeyspace . updateTokens ( tokens ) ; 
 tokenMetadata . updateNormalTokens ( tokens , FBUtilities . getBroadcastAddress ( ) ) ; 
 Collection < Token > localTokens = getLocalTokens ( ) ; 
 + setGossipTokens ( localTokens ) ; 
 + setMode ( Mode . NORMAL , false ) ; 
 + } 
 + 
 + public void setGossipTokens ( Collection < Token > tokens ) 
 + { 
 List < Pair < ApplicationState , VersionedValue > > states = new ArrayList < Pair < ApplicationState , VersionedValue > > ( ) ; 
 - states . add ( Pair . create ( ApplicationState . TOKENS , valueFactory . tokens ( localTokens ) ) ) ; 
 - states . add ( Pair . create ( ApplicationState . STATUS , valueFactory . normal ( localTokens ) ) ) ; 
 + states . add ( Pair . create ( ApplicationState . TOKENS , valueFactory . tokens ( tokens ) ) ) ; 
 + states . add ( Pair . create ( ApplicationState . STATUS , valueFactory . normal ( tokens ) ) ) ; 
 Gossiper . instance . addLocalApplicationStates ( states ) ; 
 - setMode ( Mode . NORMAL , false ) ; 
 } 
 
 public StorageService ( ) 
 @ @ - 289 , 6 + 292 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 if ( ! initialized ) 
 { 
 logger . warn ( " Starting gossip by operator request " ) ; 
 + setGossipTokens ( getLocalTokens ( ) ) ; 
 + Gossiper . instance . forceNewerGeneration ( ) ; 
 Gossiper . instance . start ( ( int ) ( System . currentTimeMillis ( ) / 1000 ) ) ; 
 initialized = true ; 
 } 
 @ @ - 1346 , 7 + 1351 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 if ( moveName . equals ( VersionedValue . STATUS _ BOOTSTRAPPING ) ) 
 handleStateBootstrap ( endpoint , pieces ) ; 
 - else if ( moveName . equals ( VersionedValue . STATUS _ NORMAL ) ) 
 + else if ( moveName . equals ( VersionedValue . STATUS _ NORMAL ) | | moveName . equals ( VersionedValue . SHUTDOWN ) ) 
 handleStateNormal ( endpoint , pieces ) ; 
 else if ( moveName . equals ( VersionedValue . REMOVING _ TOKEN ) | | moveName . equals ( VersionedValue . REMOVED _ TOKEN ) ) 
 handleStateRemoving ( endpoint , pieces ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index eec904a . . 982454c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 59 , 6 + 59 , 8 @ @ 
 the old ones ( CASSANDRA - 1644 ) 
 * upgrade to Thrift 0 . 5 ( CASSANDRA - 1367 ) 
 * renamed CL . DCQUORUM to LOCAL _ QUORUM and DCQUORUMSYNC to EACH _ QUORUM 
 + * cli truncate support ( CASSANDRA - 1653 ) 
 + * update GC settings in cassandra . bat ( CASSANDRA - 1636 ) 
 
 
 0 . 7 - beta2 
 diff - - git a / src / java / org / apache / cassandra / cli / Cli . g b / src / java / org / apache / cassandra / cli / Cli . g 
 index e59c608 . . a9229ee 100644 
 - - - a / src / java / org / apache / cassandra / cli / Cli . g 
 + + + b / src / java / org / apache / cassandra / cli / Cli . g 
 @ @ - 55 , 6 + 55 , 7 @ @ tokens { 
 NODE _ UPDATE _ KEYSPACE ; 
 NODE _ UPDATE _ COLUMN _ FAMILY ; 
 NODE _ LIST ; 
 + NODE _ TRUNCATE ; 
 
 / / Internal Nodes . 
 NODE _ COLUMN _ ACCESS ; 
 @ @ - 123 , 6 + 124 , 7 @ @ statement 
 | setStatement 
 | showStatement 
 | listStatement 
 + | truncateStatement 
 | - > ^ ( NODE _ NO _ OP ) 
 ; 
 
 @ @ - 174 , 6 + 176 , 8 @ @ helpStatement 
 - > ^ ( NODE _ HELP NODE _ THRIFT _ COUNT ) 
 | K _ HELP K _ LIST 
 - > ^ ( NODE _ HELP NODE _ LIST ) 
 + | K _ HELP K _ TRUNCATE 
 + - > ^ ( NODE _ HELP NODE _ TRUNCATE ) 
 | K _ HELP 
 - > ^ ( NODE _ HELP ) 
 | ' ? ' 
 @ @ - 231 , 6 + 235 , 11 @ @ listStatement 
 - > ^ ( NODE _ LIST columnFamily keyRangeExpr ? ^ ( NODE _ LIMIT $ limit ) ? ) 
 ; 
 
 + truncateStatement 
 + : K _ TRUNCATE columnFamily 
 + - > ^ ( NODE _ TRUNCATE columnFamily ) 
 + ; 
 + 
 showClusterName 
 : K _ SHOW K _ CLUSTER K _ NAME 
 - > ^ ( NODE _ SHOW _ CLUSTER _ NAME ) 
 @ @ - 430 , 6 + 439 , 7 @ @ K _ AND : ' AND ' ; 
 K _ UPDATE : ' UPDATE ' ; 
 K _ LIST : ' LIST ' ; 
 K _ LIMIT : ' LIMIT ' ; 
 + K _ TRUNCATE : ' TRUNCATE ' ; 
 
 / / private syntactic rules 
 fragment 
 diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index b6ace98 . . b63105a 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 171 , 6 + 171 , 9 @ @ public class CliClient extends CliUserHelp 
 case CliParser . NODE _ LIST : 
 executeList ( tree ) ; 
 break ; 
 + case CliParser . NODE _ TRUNCATE : 
 + executeTruncate ( tree . getChild ( 0 ) . getText ( ) ) ; 
 + break ; 
 case CliParser . NODE _ NO _ OP : 
 / / comment lines come here ; they are treated as no ops . 
 break ; 
 @ @ - 943 , 6 + 946 , 30 @ @ public class CliClient extends CliUserHelp 
 printSliceList ( columnFamilyDef , keySlices ) ; 
 } 
 
 + / / TRUNCATE < columnFamily > 
 + private void executeTruncate ( String columnFamily ) 
 + { 
 + if ( ! CliMain . isConnected ( ) | | ! hasKeySpace ( ) ) 
 + return ; 
 + 
 + / / getting CfDef , it will fail if there is no such column family in current keySpace . 
 + CfDef cfDef = getCfDef ( columnFamily ) ; 
 + 
 + try 
 + { 
 + thriftClient . truncate ( cfDef . getName ( ) ) ; 
 + sessionState . out . println ( columnFamily + " truncated . " ) ; 
 + } 
 + catch ( InvalidRequestException e ) 
 + { 
 + throw new RuntimeException ( e . getWhy ( ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 / / SHOW API VERSION 
 private void executeShowVersion ( ) throws TException 
 { 
 diff - - git a / src / java / org / apache / cassandra / cli / CliCompleter . java b / src / java / org / apache / cassandra / cli / CliCompleter . java 
 index f541fe5 . . b033d8f 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliCompleter . java 
 + + + b / src / java / org / apache / cassandra / cli / CliCompleter . java 
 @ @ - 55 , 12 + 55 , 16 @ @ public class CliCompleter extends SimpleCompletor 
 " help set " , 
 " help del " , 
 " help count " , 
 + " help list " , 
 + " help truncate " 
 } ; 
 private static String [ ] keyspaceCommands = { 
 " get " , 
 " set " , 
 " count " , 
 - " del " 
 + " del " , 
 + " list " , 
 + " truncate " 
 } ; 
 
 public CliCompleter ( ) 
 diff - - git a / src / java / org / apache / cassandra / cli / CliUserHelp . java b / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 index 7c512e2 . . db6a779 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 + + + b / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 @ @ - 281 , 6 + 281 , 13 @ @ public class CliUserHelp { 
 state . out . println ( " list Users [ j : ] limit 40 " ) ; 
 break ; 
 
 + case CliParser . NODE _ TRUNCATE : 
 + state . out . println ( " truncate < column _ family > " ) ; 
 + state . out . println ( " Truncate specified column family . \ n " ) ; 
 + state . out . println ( " example : " ) ; 
 + state . out . println ( " truncate Category " ) ; 
 + break ; 
 + 
 default : 
 state . out . println ( " ? " ) ; 
 break ; 
 @ @ - 324 , 7 + 331 , 8 @ @ public class CliUserHelp { 
 state . out . println ( " del < cf > [ ' < key > ' ] [ ' < super > ' ] [ ' < col > ' ] Delete sub column . " ) ; 
 state . out . println ( " count < cf > [ ' < key > ' ] Count columns in record . " ) ; 
 state . out . println ( " count < cf > [ ' < key > ' ] [ ' < super > ' ] Count columns in a super column . " ) ; 
 - state . out . println ( " list < cf > List all rows in the column family . " ) ; 
 + state . out . println ( " truncate < column _ family > Truncate specified column family . " ) ; 
 + state . out . println ( " list < cf > List all rows in the column family . " ) ; 
 state . out . println ( " list < cf > [ < startKey > : ] " ) ; 
 state . out . println ( " List rows in the column family beginning with < startKey > . " ) ; 
 state . out . println ( " list < cf > [ < startKey > : < endKey > ] " ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java 
 index 24a3de0 . . eddcafd 100644 
 - - - a / test / unit / org / apache / cassandra / cli / CliTest . java 
 + + + b / test / unit / org / apache / cassandra / cli / CliTest . java 
 @ @ - 52 , 6 + 52 , 7 @ @ public class CliTest extends TestCase 
 " list CF3 [ h : ] " , 
 " list CF3 limit 10 " , 
 " list CF3 [ h : g ] limit 10 " , 
 + " truncate CF1 " , 
 " update keyspace TestKeySpace with placement _ strategy = ' org . apache . cassandra . locator . LocalStrategy ' " , 
 " update keyspace TestKeySpace with replication _ factor = 1 and strategy _ options = [ { DC1 : 3 , DC2 : 4 , DC5 : 1 } ] " 
 } ; 
 @ @ - 101 , 6 + 102 , 10 @ @ public class CliTest extends TestCase 
 assertTrue ( result . startsWith ( " = > ( column = " ) ) ; 
 } 
 } 
 + else if ( statement . startsWith ( " truncate " ) ) 
 + { 
 + assertTrue ( result . contains ( " truncated . " ) ) ; 
 + } 
 
 outStream . reset ( ) ; / / reset stream so we have only output from next statement all the time 
 errStream . reset ( ) ; / / no errors to the end user .
