BLEU SCORE: 0.018738883683389617

TEST MSG: support frozen collections : list , set in cassandra - stress
GENERATED MSG: merge from 1 . 1 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 492bc1c . . 8ee7e06 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 19 <nl> + * cassandra - stress works with frozen collections : list and set ( CASSANDRA - 14907 ) <nl> * For nodetool listsnapshots output , put spaces between columns , and increase snapshot padding ( CASSANDRA - 14876 ) <nl> * Fix handling FS errors on writing and reading flat files - LogTransaction and hints ( CASSANDRA - 15053 ) <nl> * Avoid double closing the iterator to avoid overcounting the number of requests ( CASSANDRA - 15058 ) <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressProfile . java b / tools / stress / src / org / apache / cassandra / stress / StressProfile . java <nl> index c19e0cd . . 0b0d4e9 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / StressProfile . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / StressProfile . java <nl> @ @ - 411 , 6 + 411 , 11 @ @ public class StressProfile implements Serializable <nl> { <nl> case SET : <nl> case LIST : <nl> + if ( c . getType ( ) . isFrozen ( ) ) <nl> + { <nl> + sb . append ( " ? " ) ; <nl> + break ; <nl> + } <nl> case COUNTER : <nl> sb . append ( c . getName ( ) ) . append ( " + ? " ) ; <nl> break ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c8ccc24 . . 2cc8c52 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 11 , 6 + 11 , 7 @ @ <nl> * add a convenient way to reset a node ' s schema ( CASSANDRA - 2963 ) <nl> * fix for intermittent SchemaDisagreementException ( CASSANDRA - 3884 ) <nl> * CLI ` list < CF > ` to limit number of columns and their order ( CASSANDRA - 3012 ) <nl> + * ignore deprecated KsDef / CfDef / ColumnDef fields in native schema ( CASSANDRA - 3963 ) <nl> Merged from 1 . 0 : <nl> * remove the wait on hint future during write ( CASSANDRA - 3870 ) <nl> * ( cqlsh ) ignore missing CfDef opts ( CASSANDRA - 3933 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 5f7d21c . . 230398c 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 1194 , 6 + 1194 , 12 @ @ public final class CFMetaData <nl> assert attr . length = = 2 ; <nl> <nl> CfDef . _ Fields field = CfDef . _ Fields . findByName ( attr [ 1 ] ) ; <nl> + <nl> + / / this means that given field was deprecated <nl> + / / but still exists in the serialized schema <nl> + if ( field = = null ) <nl> + continue ; <nl> + <nl> cfDef . setFieldValue ( field , deserializeValue ( cfAttr . value ( ) , getValueClass ( CfDef . class , field . getFieldName ( ) ) ) ) ; <nl> } <nl> return cfDef ; <nl> diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> index ec79a72 . . 0ea3d10 100644 <nl> - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> @ @ - 249 , 6 + 249 , 12 @ @ public class ColumnDefinition <nl> } <nl> <nl> ColumnDef . _ Fields field = ColumnDef . _ Fields . findByName ( components [ 2 ] ) ; <nl> + <nl> + / / this means that given field was deprecated <nl> + / / but still exists in the serialized schema <nl> + if ( field = = null ) <nl> + continue ; <nl> + <nl> columnDef . setFieldValue ( field , deserializeValue ( column . value ( ) , getValueClass ( ColumnDef . class , field . getFieldName ( ) ) ) ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> index 816c086 . . fb33974 100644 <nl> - - - a / src / java / org / apache / cassandra / config / KSMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> @ @ - 306 , 6 + 306 , 12 @ @ public final class KSMetaData <nl> continue ; <nl> <nl> KsDef . _ Fields field = KsDef . _ Fields . findByName ( comparator . getString ( ksAttr . name ( ) ) ) ; <nl> + <nl> + / / this means that given field was deprecated <nl> + / / but still exists in the serialized schema <nl> + if ( field = = null ) <nl> + continue ; <nl> + <nl> ksDef . setFieldValue ( field , deserializeValue ( ksAttr . value ( ) , getValueClass ( KsDef . class , field . getFieldName ( ) ) ) ) ; <nl> } <nl> <nl> @ @ - 380 , 6 + 386 , 12 @ @ public final class KSMetaData <nl> } <nl> <nl> CfDef . _ Fields field = CfDef . _ Fields . findByName ( attr [ 1 ] ) ; <nl> + <nl> + / / this means that given field was deprecated <nl> + / / but still exists in the serialized schema <nl> + if ( field = = null ) <nl> + continue ; <nl> + <nl> cfDef . setFieldValue ( field , deserializeValue ( column . value ( ) , getValueClass ( CfDef . class , field . getFieldName ( ) ) ) ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 492bc1c . . 8ee7e06 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 19 
 + * cassandra - stress works with frozen collections : list and set ( CASSANDRA - 14907 ) 
 * For nodetool listsnapshots output , put spaces between columns , and increase snapshot padding ( CASSANDRA - 14876 ) 
 * Fix handling FS errors on writing and reading flat files - LogTransaction and hints ( CASSANDRA - 15053 ) 
 * Avoid double closing the iterator to avoid overcounting the number of requests ( CASSANDRA - 15058 ) 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressProfile . java b / tools / stress / src / org / apache / cassandra / stress / StressProfile . java 
 index c19e0cd . . 0b0d4e9 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / StressProfile . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / StressProfile . java 
 @ @ - 411 , 6 + 411 , 11 @ @ public class StressProfile implements Serializable 
 { 
 case SET : 
 case LIST : 
 + if ( c . getType ( ) . isFrozen ( ) ) 
 + { 
 + sb . append ( " ? " ) ; 
 + break ; 
 + } 
 case COUNTER : 
 sb . append ( c . getName ( ) ) . append ( " + ? " ) ; 
 break ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c8ccc24 . . 2cc8c52 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 11 , 6 + 11 , 7 @ @ 
 * add a convenient way to reset a node ' s schema ( CASSANDRA - 2963 ) 
 * fix for intermittent SchemaDisagreementException ( CASSANDRA - 3884 ) 
 * CLI ` list < CF > ` to limit number of columns and their order ( CASSANDRA - 3012 ) 
 + * ignore deprecated KsDef / CfDef / ColumnDef fields in native schema ( CASSANDRA - 3963 ) 
 Merged from 1 . 0 : 
 * remove the wait on hint future during write ( CASSANDRA - 3870 ) 
 * ( cqlsh ) ignore missing CfDef opts ( CASSANDRA - 3933 ) 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 5f7d21c . . 230398c 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 1194 , 6 + 1194 , 12 @ @ public final class CFMetaData 
 assert attr . length = = 2 ; 
 
 CfDef . _ Fields field = CfDef . _ Fields . findByName ( attr [ 1 ] ) ; 
 + 
 + / / this means that given field was deprecated 
 + / / but still exists in the serialized schema 
 + if ( field = = null ) 
 + continue ; 
 + 
 cfDef . setFieldValue ( field , deserializeValue ( cfAttr . value ( ) , getValueClass ( CfDef . class , field . getFieldName ( ) ) ) ) ; 
 } 
 return cfDef ; 
 diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 index ec79a72 . . 0ea3d10 100644 
 - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 @ @ - 249 , 6 + 249 , 12 @ @ public class ColumnDefinition 
 } 
 
 ColumnDef . _ Fields field = ColumnDef . _ Fields . findByName ( components [ 2 ] ) ; 
 + 
 + / / this means that given field was deprecated 
 + / / but still exists in the serialized schema 
 + if ( field = = null ) 
 + continue ; 
 + 
 columnDef . setFieldValue ( field , deserializeValue ( column . value ( ) , getValueClass ( ColumnDef . class , field . getFieldName ( ) ) ) ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java 
 index 816c086 . . fb33974 100644 
 - - - a / src / java / org / apache / cassandra / config / KSMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / KSMetaData . java 
 @ @ - 306 , 6 + 306 , 12 @ @ public final class KSMetaData 
 continue ; 
 
 KsDef . _ Fields field = KsDef . _ Fields . findByName ( comparator . getString ( ksAttr . name ( ) ) ) ; 
 + 
 + / / this means that given field was deprecated 
 + / / but still exists in the serialized schema 
 + if ( field = = null ) 
 + continue ; 
 + 
 ksDef . setFieldValue ( field , deserializeValue ( ksAttr . value ( ) , getValueClass ( KsDef . class , field . getFieldName ( ) ) ) ) ; 
 } 
 
 @ @ - 380 , 6 + 386 , 12 @ @ public final class KSMetaData 
 } 
 
 CfDef . _ Fields field = CfDef . _ Fields . findByName ( attr [ 1 ] ) ; 
 + 
 + / / this means that given field was deprecated 
 + / / but still exists in the serialized schema 
 + if ( field = = null ) 
 + continue ; 
 + 
 cfDef . setFieldValue ( field , deserializeValue ( column . value ( ) , getValueClass ( CfDef . class , field . getFieldName ( ) ) ) ) ; 
 } 

