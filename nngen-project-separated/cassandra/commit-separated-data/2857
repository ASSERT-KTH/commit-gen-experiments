BLEU SCORE: 0.024675789207681903

TEST MSG: Fix streaming older SSTable yields row tombstones
GENERATED MSG: Update version for 1 . 2 . 0 final

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f38b58f . . 93cdd81 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 17 , 6 + 17 , 7 @ @ <nl> * cqlsh : handle symlinks properly ( CASSANDRA - 6425 ) <nl> * Fix potential infinite loop when paging query with IN ( CASSANDRA - 6464 ) <nl> * Fix assertion error in AbstractQueryPager . discardFirst ( CASSANDRA - 6447 ) <nl> + * Fix streaming older SSTable yields unnecessary tombstones ( CASSANDRA - 6527 ) <nl> Merged from 1 . 2 : <nl> * Improved error message on bad properties in DDL queries ( CASSANDRA - 6453 ) <nl> * Randomize batchlog candidates selection ( CASSANDRA - 6481 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> index 70c0b42 . . 3d19d83 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> @ @ - 222 , 16 + 222 , 19 @ @ public class SSTableWriter extends SSTable <nl> StreamingHistogram tombstones = new StreamingHistogram ( TOMBSTONE _ HISTOGRAM _ BIN _ SIZE ) ; <nl> ColumnFamily cf = ArrayBackedSortedColumns . factory . create ( metadata ) ; <nl> <nl> + / / skip row size for version < ja <nl> + if ( version . hasRowSizeAndColumnCount ) <nl> + FileUtils . skipBytesFully ( in , 8 ) ; <nl> + <nl> cf . delete ( DeletionTime . serializer . deserialize ( in ) ) ; <nl> <nl> ColumnIndex . Builder columnIndexer = new ColumnIndex . Builder ( cf , key . key , dataFile . stream ) ; <nl> + <nl> + / / read column count for version < ja <nl> int columnCount = Integer . MAX _ VALUE ; <nl> if ( version . hasRowSizeAndColumnCount ) <nl> - { <nl> - / / skip row size <nl> - FileUtils . skipBytesFully ( in , 8 ) ; <nl> columnCount = in . readInt ( ) ; <nl> - } <nl> + <nl> Iterator < OnDiskAtom > iter = metadata . getOnDiskIterator ( in , columnCount , ColumnSerializer . Flag . PRESERVE _ SIZE , Integer . MIN _ VALUE , version ) ; <nl> try <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> index 0b0ecf8 . . e508a55 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> @ @ - 25 , 8 + 25 , 15 @ @ import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> import org . apache . cassandra . SchemaLoader ; <nl> - import org . apache . cassandra . db . DecoratedKey ; <nl> + import org . apache . cassandra . Util ; <nl> + import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . columniterator . SSTableNamesIterator ; <nl> + import org . apache . cassandra . dht . IPartitioner ; <nl> + import org . apache . cassandra . dht . Range ; <nl> + import org . apache . cassandra . dht . Token ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> + import org . apache . cassandra . streaming . StreamPlan ; <nl> + import org . apache . cassandra . streaming . StreamSession ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . junit . BeforeClass ; <nl> @ @ - 85 , 6 + 92 , 46 @ @ public class LegacySSTableTest extends SchemaLoader <nl> * / <nl> <nl> @ Test <nl> + public void testStreaming ( ) throws Throwable <nl> + { <nl> + StorageService . instance . initServer ( ) ; <nl> + <nl> + for ( File version : LEGACY _ SSTABLE _ ROOT . listFiles ( ) ) <nl> + if ( Descriptor . Version . validate ( version . getName ( ) ) ) <nl> + testStreaming ( version . getName ( ) ) ; <nl> + } <nl> + <nl> + private void testStreaming ( String version ) throws Exception <nl> + { <nl> + SSTableReader sstable = SSTableReader . open ( getDescriptor ( version ) ) ; <nl> + IPartitioner p = StorageService . getPartitioner ( ) ; <nl> + List < Range < Token > > ranges = new ArrayList < > ( ) ; <nl> + ranges . add ( new Range < > ( p . getMinimumToken ( ) , p . getToken ( ByteBufferUtil . bytes ( " 100 " ) ) ) ) ; <nl> + ranges . add ( new Range < > ( p . getToken ( ByteBufferUtil . bytes ( " 100 " ) ) , p . getMinimumToken ( ) ) ) ; <nl> + ArrayList < StreamSession . SSTableStreamingSections > details = new ArrayList < > ( ) ; <nl> + details . add ( new StreamSession . SSTableStreamingSections ( sstable , <nl> + sstable . getPositionsForRanges ( ranges ) , <nl> + sstable . estimatedKeysForRanges ( ranges ) ) ) ; <nl> + new StreamPlan ( " LegacyStreamingTest " ) . transferFiles ( FBUtilities . getBroadcastAddress ( ) , details ) <nl> + . execute ( ) . get ( ) ; <nl> + sstable . close ( ) ; <nl> + <nl> + ColumnFamilyStore cfs = Keyspace . open ( KSNAME ) . getColumnFamilyStore ( CFNAME ) ; <nl> + assert cfs . getSSTables ( ) . size ( ) = = 1 ; <nl> + sstable = cfs . getSSTables ( ) . iterator ( ) . next ( ) ; <nl> + for ( String keystring : TEST _ DATA ) <nl> + { <nl> + ByteBuffer key = ByteBufferUtil . bytes ( keystring ) ; <nl> + SSTableNamesIterator iter = new SSTableNamesIterator ( sstable , Util . dk ( key ) , FBUtilities . singleton ( key ) ) ; <nl> + ColumnFamily cf = iter . getColumnFamily ( ) ; <nl> + <nl> + / / check not deleted ( CASSANDRA - 6527 ) <nl> + assert cf . deletionInfo ( ) . equals ( DeletionInfo . live ( ) ) ; <nl> + assert iter . next ( ) . name ( ) . equals ( key ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> public void testVersions ( ) throws Throwable <nl> { <nl> for ( File version : LEGACY _ SSTABLE _ ROOT . listFiles ( ) )
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index eca789a . . 767128c 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 124 , 6 + 124 , 10 @ @ <nl> < include name = " * * / * . jar " / > <nl> < / fileset > <nl> < / path > <nl> + 	 <nl> + 	 < path id = " cobertura . classpath " > <nl> + 	 	 < pathelement location = " $ { cobertura . classes . dir } " / > <nl> + 	 < / path > <nl> <nl> < macrodef name = " create - javadoc " > <nl> < attribute name = " destdir " / > <nl> @ @ - 150 , 6 + 154 , 7 @ @ <nl> < mkdir dir = " $ { test . lib } " / > <nl> < mkdir dir = " $ { test . classes } " / > <nl> < mkdir dir = " $ { build . src . gen - java } " / > <nl> + < mkdir dir = " $ { build . dir . lib } " / > <nl> < / target > <nl> <nl> < target name = " clean " description = " Remove all locally created artifacts " > <nl> @ @ - 245 , 24 + 250 , 21 @ @ <nl> can be run stand - alone from a binary release artifact . <nl> - - > <nl> < target name = " maven - ant - tasks - localrepo " unless = " maven - ant - tasks . jar . exists " if = " maven - ant - tasks . jar . local " <nl> - description = " Fetch Maven ANT Tasks from Maven Local Repository " > <nl> - < mkdir dir = " $ { build . dir } " / > <nl> + depends = " init " description = " Fetch Maven ANT Tasks from Maven Local Repository " > <nl> < copy file = " $ { maven - ant - tasks . local } / $ { maven - ant - tasks . version } / maven - ant - tasks - $ { maven - ant - tasks . version } . jar " <nl> tofile = " $ { build . dir } / maven - ant - tasks - $ { maven - ant - tasks . version } . jar " / > <nl> < property name = " maven - ant - tasks . jar . exists " value = " true " / > <nl> < / target > <nl> <nl> - < target name = " maven - ant - tasks - download " depends = " maven - ant - tasks - localrepo " unless = " maven - ant - tasks . jar . exists " <nl> + < target name = " maven - ant - tasks - download " depends = " init , maven - ant - tasks - localrepo " unless = " maven - ant - tasks . jar . exists " <nl> description = " Fetch Maven ANT Tasks from Maven Central Repositroy " > <nl> < echo > Downloading Maven ANT Tasks . . . < / echo > <nl> - < mkdir dir = " $ { build . dir } " / > <nl> < get src = " $ { maven - ant - tasks . url } / $ { maven - ant - tasks . version } / maven - ant - tasks - $ { maven - ant - tasks . version } . jar " <nl> dest = " $ { build . dir } / maven - ant - tasks - $ { maven - ant - tasks . version } . jar " usetimestamp = " true " / > <nl> < / target > <nl> <nl> - < target name = " maven - ant - tasks - init " depends = " maven - ant - tasks - download " unless = " maven - ant - tasks . initialized " <nl> + < target name = " maven - ant - tasks - init " depends = " init , maven - ant - tasks - download " unless = " maven - ant - tasks . initialized " <nl> description = " Initialize Maven ANT Tasks " > <nl> - < mkdir dir = " $ { build . dir . lib } " / > <nl> < typedef uri = " antlib : org . apache . maven . artifact . ant " classpathref = " maven - ant - tasks . classpath " / > <nl> <nl> < ! - - define the remote repositories we use - - > <nl> @ @ - 513 , 7 + 515 , 7 @ @ <nl> < / artifact : pom > <nl> < / target > <nl> <nl> - < target name = " maven - ant - tasks - retrieve - build " depends = " maven - declare - dependencies " > <nl> + < target name = " _ maven - ant - tasks - retrieve - build " depends = " maven - declare - dependencies " > <nl> < artifact : dependencies pomRefId = " build - deps - pom " <nl> filesetId = " build - dependency - jars " <nl> sourcesFilesetId = " build - dependency - sources " <nl> @ @ - 538 , 6 + 540 , 10 @ @ <nl> < / copy > <nl> < / target > <nl> <nl> + < target name = " maven - ant - tasks - retrieve - build " unless = " without . maven " > <nl> + < antcall target = " _ maven - ant - tasks - retrieve - build " / > <nl> + < / target > <nl> + <nl> < target name = " maven - ant - tasks - retrieve - test " depends = " maven - ant - tasks - init " > <nl> < artifact : dependencies pomRefId = " test - deps - pom " <nl> filesetId = " test - dependency - jars " <nl> @ @ - 562 , 7 + 568 , 7 @ @ <nl> < ! - - <nl> Generate avro code <nl> - - > <nl> - < target name = " check - avro - generate " depends = " maven - ant - tasks - init " > <nl> + < target name = " check - avro - generate " depends = " init " > <nl> < taskdef name = " avro - protocol " classname = " org . apache . avro . specific . ProtocolTask " > <nl> < classpath refid = " cassandra . classpath " / > <nl> < / taskdef > <nl> @ @ - 571 , 11 + 577 , 9 @ @ <nl> < / target > <nl> <nl> < target name = " avro - generate " <nl> - depends = " avro - interface - generate - internode " <nl> - description = " Generates Java Avro classes for client and internal use . " / > <nl> - <nl> - < target name = " avro - interface - generate - internode " unless = " avroINProtoUpToDate " <nl> - depends = " init , check - avro - generate , maven - ant - tasks - retrieve - build " > <nl> + unless = " avroINProtoUpToDate " <nl> + depends = " init , check - avro - generate , maven - ant - tasks - retrieve - build " <nl> + description = " Generates Java Avro classes for internal use . " > <nl> < avromacro protocolname = " internode " inputfile = " $ { avro . src } / internode . genavro " <nl> jsondir = " $ { build . dir } " outputdir = " $ { build . src } " / > <nl> < / target > <nl> @ @ - 609 , 13 + 613 , 22 @ @ <nl> Cassandra depends on it , and python because that is what the system <nl> tests run . <nl> - - > <nl> - < target name = " gen - thrift - java " depends = " rat - init " description = " Generate Thrift Java artifacts " > <nl> - < echo > Generating Thrift Java code from $ { basedir } / interface / cassandra . thrift . . . . < / echo > <nl> + < target name = " check - gen - thrift - java " > <nl> + < uptodate property = " thriftUpToDate " srcfile = " $ { interface . dir } / cassandra . thrift " <nl> + targetfile = " $ { interface . thrift . gen - java } / org / apache / cassandra / thrift / Cassandra . java " / > <nl> + < / target > <nl> + < target name = " gen - thrift - java " unless = " thriftUpToDate " depends = " check - gen - thrift - java " <nl> + description = " Generate Thrift Java artifacts " > <nl> + < echo > Generating Thrift Java code from $ { basedir } / interface / cassandra . thrift . . . < / echo > <nl> < exec executable = " thrift " dir = " $ { basedir } / interface " failonerror = " true " > <nl> < arg line = " - - gen java : hashcode " / > <nl> < arg line = " - o $ { interface . thrift . dir } " / > <nl> < arg line = " cassandra . thrift " / > <nl> < / exec > <nl> + < antcall target = " write - java - license - headers " / > <nl> + < / target > <nl> + <nl> + < target name = " _ write - java - license - headers " depends = " rat - init " > <nl> < java classname = " org . apache . rat . Report " fork = " true " <nl> output = " $ { build . dir } / rat - report . log " > <nl> < classpath refid = " rat . classpath " / > <nl> @ @ - 624 , 8 + 637 , 13 @ @ <nl> < arg value = " interface / thrift " / > <nl> < / java > <nl> < / target > <nl> + <nl> + < target name = " write - java - license - headers " unless = " without . rat " description = " Add missing java license headers " > <nl> + < antcall target = " _ write - java - license - headers " / > <nl> + < / target > <nl> + <nl> < target name = " gen - thrift - py " description = " Generate Thrift Python artifacts " > <nl> - < echo > Generating Thrift Python code from $ { basedir } / interface / cassandra . thrift . . . . < / echo > <nl> + < echo > Generating Thrift Python code from $ { basedir } / interface / cassandra . thrift . . . < / echo > <nl> < exec executable = " thrift " dir = " $ { basedir } / interface " failonerror = " true " > <nl> < arg line = " - - gen py " / > <nl> < arg line = " - o $ { interface . thrift . dir } " / > <nl> @ @ - 663 , 8 + 681 , 7 @ @ <nl> The build target builds all the . class files <nl> - - > <nl> < target name = " build " <nl> - depends = " maven - ant - tasks - retrieve - build , avro - generate , build - subprojects , build - project " description = " Compile Cassandra classes " / > <nl> - < target name = " build - subprojects " description = " Compile Cassandra contrib projects " / > <nl> + depends = " maven - ant - tasks - retrieve - build , build - project " description = " Compile Cassandra classes " / > <nl> < target name = " codecoverage " depends = " cobertura - instrument , test , cobertura - report " description = " Create code coverage report " / > <nl> <nl> < target depends = " init , avro - generate , gen - cli - grammar , gen - cql2 - grammar , gen - cql3 - grammar " <nl> @ @ - 715 , 11 + 732 , 24 @ @ <nl> < / javac > <nl> < / target > <nl> <nl> + 	 < target name = " _ write - poms " depends = " maven - declare - dependencies " > <nl> + 	 < artifact : writepom pomRefId = " parent - pom " file = " $ { build . dir } / $ { final . name } - parent . pom " / > <nl> + 	 < artifact : writepom pomRefId = " thrift - pom " <nl> + 	 file = " $ { build . dir } / $ { ant . project . name } - thrift - $ { version } . pom " / > <nl> + 	 < artifact : writepom pomRefId = " all - pom " file = " $ { build . dir } / $ { final . name } . pom " / > <nl> + 	 < artifact : writepom pomRefId = " clientutil - pom " <nl> + 	 	 file = " $ { build . dir } / $ { ant . project . name } - clientutil - $ { version } . pom " / > <nl> + 	 < / target > <nl> + <nl> + 	 < target name = " write - poms " unless = " without . maven " > <nl> + 	 < antcall target = " _ write - poms " / > <nl> + 	 < / target > <nl> + 	 <nl> < ! - - <nl> The jar target makes cassandra . jar output . <nl> - - > <nl> < target name = " jar " <nl> - depends = " maven - declare - dependencies , build , build - test , stress - build " <nl> + depends = " build , build - test , stress - build , write - poms " <nl> description = " Assemble Cassandra JAR files " > <nl> < mkdir dir = " $ { build . classes . main } / META - INF " / > <nl> < mkdir dir = " $ { build . classes . thrift } / META - INF " / > <nl> @ @ - 732 , 11 + 762 , 7 @ @ <nl> < copy file = " NOTICE . txt " <nl> tofile = " $ { build . classes . thrift } / META - INF / NOTICE . txt " / > <nl> <nl> - < artifact : writepom pomRefId = " parent - pom " file = " $ { build . dir } / $ { final . name } - parent . pom " / > <nl> - <nl> < ! - - Thrift Jar - - > <nl> - < artifact : writepom pomRefId = " thrift - pom " <nl> - file = " $ { build . dir } / $ { ant . project . name } - thrift - $ { version } . pom " / > <nl> < jar jarfile = " $ { build . dir } / $ { ant . project . name } - thrift - $ { version } . jar " <nl> basedir = " $ { build . classes . thrift } " > <nl> < fileset dir = " $ { build . classes . main } " > <nl> @ @ - 751 , 8 + 777 , 6 @ @ <nl> < / jar > <nl> <nl> < ! - - Main Jar - - > <nl> - < artifact : writepom pomRefId = " all - pom " <nl> - file = " $ { build . dir } / $ { final . name } . pom " / > <nl> < jar jarfile = " $ { build . dir } / $ { final . name } . jar " <nl> basedir = " $ { build . classes . main } " > <nl> < manifest > <nl> @ @ - 770 , 8 + 794 , 6 @ @ <nl> <nl> < ! - - Clientutil Jar - - > <nl> < ! - - TODO : write maven pom here - - > <nl> - < artifact : writepom pomRefId = " clientutil - pom " <nl> - file = " $ { build . dir } / $ { ant . project . name } - clientutil - $ { version } . pom " / > <nl> < jar jarfile = " $ { build . dir } / $ { ant . project . name } - clientutil - $ { version } . jar " > <nl> < fileset dir = " $ { build . classes . main } " > <nl> < include name = " org / apache / cassandra / cql / jdbc / * " / > <nl> @ @ - 1146 , 6 + 1168 , 10 @ @ <nl> < / testmacro > <nl> < / target > <nl> <nl> + < target name = " test - all " <nl> + depends = " test , long - test , test - compression , test - clientutil - jar " <nl> + description = " Run all tests " / > <nl> + <nl> < ! - - instruments the classes to later create code coverage reports - - > <nl> < target name = " cobertura - instrument " depends = " build , build - test " > <nl> < taskdef resource = " tasks . properties " >

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f38b58f . . 93cdd81 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 17 , 6 + 17 , 7 @ @ 
 * cqlsh : handle symlinks properly ( CASSANDRA - 6425 ) 
 * Fix potential infinite loop when paging query with IN ( CASSANDRA - 6464 ) 
 * Fix assertion error in AbstractQueryPager . discardFirst ( CASSANDRA - 6447 ) 
 + * Fix streaming older SSTable yields unnecessary tombstones ( CASSANDRA - 6527 ) 
 Merged from 1 . 2 : 
 * Improved error message on bad properties in DDL queries ( CASSANDRA - 6453 ) 
 * Randomize batchlog candidates selection ( CASSANDRA - 6481 ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 index 70c0b42 . . 3d19d83 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 @ @ - 222 , 16 + 222 , 19 @ @ public class SSTableWriter extends SSTable 
 StreamingHistogram tombstones = new StreamingHistogram ( TOMBSTONE _ HISTOGRAM _ BIN _ SIZE ) ; 
 ColumnFamily cf = ArrayBackedSortedColumns . factory . create ( metadata ) ; 
 
 + / / skip row size for version < ja 
 + if ( version . hasRowSizeAndColumnCount ) 
 + FileUtils . skipBytesFully ( in , 8 ) ; 
 + 
 cf . delete ( DeletionTime . serializer . deserialize ( in ) ) ; 
 
 ColumnIndex . Builder columnIndexer = new ColumnIndex . Builder ( cf , key . key , dataFile . stream ) ; 
 + 
 + / / read column count for version < ja 
 int columnCount = Integer . MAX _ VALUE ; 
 if ( version . hasRowSizeAndColumnCount ) 
 - { 
 - / / skip row size 
 - FileUtils . skipBytesFully ( in , 8 ) ; 
 columnCount = in . readInt ( ) ; 
 - } 
 + 
 Iterator < OnDiskAtom > iter = metadata . getOnDiskIterator ( in , columnCount , ColumnSerializer . Flag . PRESERVE _ SIZE , Integer . MIN _ VALUE , version ) ; 
 try 
 { 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 index 0b0ecf8 . . e508a55 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 @ @ - 25 , 8 + 25 , 15 @ @ import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 import org . apache . cassandra . SchemaLoader ; 
 - import org . apache . cassandra . db . DecoratedKey ; 
 + import org . apache . cassandra . Util ; 
 + import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . columniterator . SSTableNamesIterator ; 
 + import org . apache . cassandra . dht . IPartitioner ; 
 + import org . apache . cassandra . dht . Range ; 
 + import org . apache . cassandra . dht . Token ; 
 + import org . apache . cassandra . service . StorageService ; 
 + import org . apache . cassandra . streaming . StreamPlan ; 
 + import org . apache . cassandra . streaming . StreamSession ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . junit . BeforeClass ; 
 @ @ - 85 , 6 + 92 , 46 @ @ public class LegacySSTableTest extends SchemaLoader 
 * / 
 
 @ Test 
 + public void testStreaming ( ) throws Throwable 
 + { 
 + StorageService . instance . initServer ( ) ; 
 + 
 + for ( File version : LEGACY _ SSTABLE _ ROOT . listFiles ( ) ) 
 + if ( Descriptor . Version . validate ( version . getName ( ) ) ) 
 + testStreaming ( version . getName ( ) ) ; 
 + } 
 + 
 + private void testStreaming ( String version ) throws Exception 
 + { 
 + SSTableReader sstable = SSTableReader . open ( getDescriptor ( version ) ) ; 
 + IPartitioner p = StorageService . getPartitioner ( ) ; 
 + List < Range < Token > > ranges = new ArrayList < > ( ) ; 
 + ranges . add ( new Range < > ( p . getMinimumToken ( ) , p . getToken ( ByteBufferUtil . bytes ( " 100 " ) ) ) ) ; 
 + ranges . add ( new Range < > ( p . getToken ( ByteBufferUtil . bytes ( " 100 " ) ) , p . getMinimumToken ( ) ) ) ; 
 + ArrayList < StreamSession . SSTableStreamingSections > details = new ArrayList < > ( ) ; 
 + details . add ( new StreamSession . SSTableStreamingSections ( sstable , 
 + sstable . getPositionsForRanges ( ranges ) , 
 + sstable . estimatedKeysForRanges ( ranges ) ) ) ; 
 + new StreamPlan ( " LegacyStreamingTest " ) . transferFiles ( FBUtilities . getBroadcastAddress ( ) , details ) 
 + . execute ( ) . get ( ) ; 
 + sstable . close ( ) ; 
 + 
 + ColumnFamilyStore cfs = Keyspace . open ( KSNAME ) . getColumnFamilyStore ( CFNAME ) ; 
 + assert cfs . getSSTables ( ) . size ( ) = = 1 ; 
 + sstable = cfs . getSSTables ( ) . iterator ( ) . next ( ) ; 
 + for ( String keystring : TEST _ DATA ) 
 + { 
 + ByteBuffer key = ByteBufferUtil . bytes ( keystring ) ; 
 + SSTableNamesIterator iter = new SSTableNamesIterator ( sstable , Util . dk ( key ) , FBUtilities . singleton ( key ) ) ; 
 + ColumnFamily cf = iter . getColumnFamily ( ) ; 
 + 
 + / / check not deleted ( CASSANDRA - 6527 ) 
 + assert cf . deletionInfo ( ) . equals ( DeletionInfo . live ( ) ) ; 
 + assert iter . next ( ) . name ( ) . equals ( key ) ; 
 + } 
 + } 
 + 
 + @ Test 
 public void testVersions ( ) throws Throwable 
 { 
 for ( File version : LEGACY _ SSTABLE _ ROOT . listFiles ( ) )

NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index eca789a . . 767128c 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 124 , 6 + 124 , 10 @ @ 
 < include name = " * * / * . jar " / > 
 < / fileset > 
 < / path > 
 + 	 
 + 	 < path id = " cobertura . classpath " > 
 + 	 	 < pathelement location = " $ { cobertura . classes . dir } " / > 
 + 	 < / path > 
 
 < macrodef name = " create - javadoc " > 
 < attribute name = " destdir " / > 
 @ @ - 150 , 6 + 154 , 7 @ @ 
 < mkdir dir = " $ { test . lib } " / > 
 < mkdir dir = " $ { test . classes } " / > 
 < mkdir dir = " $ { build . src . gen - java } " / > 
 + < mkdir dir = " $ { build . dir . lib } " / > 
 < / target > 
 
 < target name = " clean " description = " Remove all locally created artifacts " > 
 @ @ - 245 , 24 + 250 , 21 @ @ 
 can be run stand - alone from a binary release artifact . 
 - - > 
 < target name = " maven - ant - tasks - localrepo " unless = " maven - ant - tasks . jar . exists " if = " maven - ant - tasks . jar . local " 
 - description = " Fetch Maven ANT Tasks from Maven Local Repository " > 
 - < mkdir dir = " $ { build . dir } " / > 
 + depends = " init " description = " Fetch Maven ANT Tasks from Maven Local Repository " > 
 < copy file = " $ { maven - ant - tasks . local } / $ { maven - ant - tasks . version } / maven - ant - tasks - $ { maven - ant - tasks . version } . jar " 
 tofile = " $ { build . dir } / maven - ant - tasks - $ { maven - ant - tasks . version } . jar " / > 
 < property name = " maven - ant - tasks . jar . exists " value = " true " / > 
 < / target > 
 
 - < target name = " maven - ant - tasks - download " depends = " maven - ant - tasks - localrepo " unless = " maven - ant - tasks . jar . exists " 
 + < target name = " maven - ant - tasks - download " depends = " init , maven - ant - tasks - localrepo " unless = " maven - ant - tasks . jar . exists " 
 description = " Fetch Maven ANT Tasks from Maven Central Repositroy " > 
 < echo > Downloading Maven ANT Tasks . . . < / echo > 
 - < mkdir dir = " $ { build . dir } " / > 
 < get src = " $ { maven - ant - tasks . url } / $ { maven - ant - tasks . version } / maven - ant - tasks - $ { maven - ant - tasks . version } . jar " 
 dest = " $ { build . dir } / maven - ant - tasks - $ { maven - ant - tasks . version } . jar " usetimestamp = " true " / > 
 < / target > 
 
 - < target name = " maven - ant - tasks - init " depends = " maven - ant - tasks - download " unless = " maven - ant - tasks . initialized " 
 + < target name = " maven - ant - tasks - init " depends = " init , maven - ant - tasks - download " unless = " maven - ant - tasks . initialized " 
 description = " Initialize Maven ANT Tasks " > 
 - < mkdir dir = " $ { build . dir . lib } " / > 
 < typedef uri = " antlib : org . apache . maven . artifact . ant " classpathref = " maven - ant - tasks . classpath " / > 
 
 < ! - - define the remote repositories we use - - > 
 @ @ - 513 , 7 + 515 , 7 @ @ 
 < / artifact : pom > 
 < / target > 
 
 - < target name = " maven - ant - tasks - retrieve - build " depends = " maven - declare - dependencies " > 
 + < target name = " _ maven - ant - tasks - retrieve - build " depends = " maven - declare - dependencies " > 
 < artifact : dependencies pomRefId = " build - deps - pom " 
 filesetId = " build - dependency - jars " 
 sourcesFilesetId = " build - dependency - sources " 
 @ @ - 538 , 6 + 540 , 10 @ @ 
 < / copy > 
 < / target > 
 
 + < target name = " maven - ant - tasks - retrieve - build " unless = " without . maven " > 
 + < antcall target = " _ maven - ant - tasks - retrieve - build " / > 
 + < / target > 
 + 
 < target name = " maven - ant - tasks - retrieve - test " depends = " maven - ant - tasks - init " > 
 < artifact : dependencies pomRefId = " test - deps - pom " 
 filesetId = " test - dependency - jars " 
 @ @ - 562 , 7 + 568 , 7 @ @ 
 < ! - - 
 Generate avro code 
 - - > 
 - < target name = " check - avro - generate " depends = " maven - ant - tasks - init " > 
 + < target name = " check - avro - generate " depends = " init " > 
 < taskdef name = " avro - protocol " classname = " org . apache . avro . specific . ProtocolTask " > 
 < classpath refid = " cassandra . classpath " / > 
 < / taskdef > 
 @ @ - 571 , 11 + 577 , 9 @ @ 
 < / target > 
 
 < target name = " avro - generate " 
 - depends = " avro - interface - generate - internode " 
 - description = " Generates Java Avro classes for client and internal use . " / > 
 - 
 - < target name = " avro - interface - generate - internode " unless = " avroINProtoUpToDate " 
 - depends = " init , check - avro - generate , maven - ant - tasks - retrieve - build " > 
 + unless = " avroINProtoUpToDate " 
 + depends = " init , check - avro - generate , maven - ant - tasks - retrieve - build " 
 + description = " Generates Java Avro classes for internal use . " > 
 < avromacro protocolname = " internode " inputfile = " $ { avro . src } / internode . genavro " 
 jsondir = " $ { build . dir } " outputdir = " $ { build . src } " / > 
 < / target > 
 @ @ - 609 , 13 + 613 , 22 @ @ 
 Cassandra depends on it , and python because that is what the system 
 tests run . 
 - - > 
 - < target name = " gen - thrift - java " depends = " rat - init " description = " Generate Thrift Java artifacts " > 
 - < echo > Generating Thrift Java code from $ { basedir } / interface / cassandra . thrift . . . . < / echo > 
 + < target name = " check - gen - thrift - java " > 
 + < uptodate property = " thriftUpToDate " srcfile = " $ { interface . dir } / cassandra . thrift " 
 + targetfile = " $ { interface . thrift . gen - java } / org / apache / cassandra / thrift / Cassandra . java " / > 
 + < / target > 
 + < target name = " gen - thrift - java " unless = " thriftUpToDate " depends = " check - gen - thrift - java " 
 + description = " Generate Thrift Java artifacts " > 
 + < echo > Generating Thrift Java code from $ { basedir } / interface / cassandra . thrift . . . < / echo > 
 < exec executable = " thrift " dir = " $ { basedir } / interface " failonerror = " true " > 
 < arg line = " - - gen java : hashcode " / > 
 < arg line = " - o $ { interface . thrift . dir } " / > 
 < arg line = " cassandra . thrift " / > 
 < / exec > 
 + < antcall target = " write - java - license - headers " / > 
 + < / target > 
 + 
 + < target name = " _ write - java - license - headers " depends = " rat - init " > 
 < java classname = " org . apache . rat . Report " fork = " true " 
 output = " $ { build . dir } / rat - report . log " > 
 < classpath refid = " rat . classpath " / > 
 @ @ - 624 , 8 + 637 , 13 @ @ 
 < arg value = " interface / thrift " / > 
 < / java > 
 < / target > 
 + 
 + < target name = " write - java - license - headers " unless = " without . rat " description = " Add missing java license headers " > 
 + < antcall target = " _ write - java - license - headers " / > 
 + < / target > 
 + 
 < target name = " gen - thrift - py " description = " Generate Thrift Python artifacts " > 
 - < echo > Generating Thrift Python code from $ { basedir } / interface / cassandra . thrift . . . . < / echo > 
 + < echo > Generating Thrift Python code from $ { basedir } / interface / cassandra . thrift . . . < / echo > 
 < exec executable = " thrift " dir = " $ { basedir } / interface " failonerror = " true " > 
 < arg line = " - - gen py " / > 
 < arg line = " - o $ { interface . thrift . dir } " / > 
 @ @ - 663 , 8 + 681 , 7 @ @ 
 The build target builds all the . class files 
 - - > 
 < target name = " build " 
 - depends = " maven - ant - tasks - retrieve - build , avro - generate , build - subprojects , build - project " description = " Compile Cassandra classes " / > 
 - < target name = " build - subprojects " description = " Compile Cassandra contrib projects " / > 
 + depends = " maven - ant - tasks - retrieve - build , build - project " description = " Compile Cassandra classes " / > 
 < target name = " codecoverage " depends = " cobertura - instrument , test , cobertura - report " description = " Create code coverage report " / > 
 
 < target depends = " init , avro - generate , gen - cli - grammar , gen - cql2 - grammar , gen - cql3 - grammar " 
 @ @ - 715 , 11 + 732 , 24 @ @ 
 < / javac > 
 < / target > 
 
 + 	 < target name = " _ write - poms " depends = " maven - declare - dependencies " > 
 + 	 < artifact : writepom pomRefId = " parent - pom " file = " $ { build . dir } / $ { final . name } - parent . pom " / > 
 + 	 < artifact : writepom pomRefId = " thrift - pom " 
 + 	 file = " $ { build . dir } / $ { ant . project . name } - thrift - $ { version } . pom " / > 
 + 	 < artifact : writepom pomRefId = " all - pom " file = " $ { build . dir } / $ { final . name } . pom " / > 
 + 	 < artifact : writepom pomRefId = " clientutil - pom " 
 + 	 	 file = " $ { build . dir } / $ { ant . project . name } - clientutil - $ { version } . pom " / > 
 + 	 < / target > 
 + 
 + 	 < target name = " write - poms " unless = " without . maven " > 
 + 	 < antcall target = " _ write - poms " / > 
 + 	 < / target > 
 + 	 
 < ! - - 
 The jar target makes cassandra . jar output . 
 - - > 
 < target name = " jar " 
 - depends = " maven - declare - dependencies , build , build - test , stress - build " 
 + depends = " build , build - test , stress - build , write - poms " 
 description = " Assemble Cassandra JAR files " > 
 < mkdir dir = " $ { build . classes . main } / META - INF " / > 
 < mkdir dir = " $ { build . classes . thrift } / META - INF " / > 
 @ @ - 732 , 11 + 762 , 7 @ @ 
 < copy file = " NOTICE . txt " 
 tofile = " $ { build . classes . thrift } / META - INF / NOTICE . txt " / > 
 
 - < artifact : writepom pomRefId = " parent - pom " file = " $ { build . dir } / $ { final . name } - parent . pom " / > 
 - 
 < ! - - Thrift Jar - - > 
 - < artifact : writepom pomRefId = " thrift - pom " 
 - file = " $ { build . dir } / $ { ant . project . name } - thrift - $ { version } . pom " / > 
 < jar jarfile = " $ { build . dir } / $ { ant . project . name } - thrift - $ { version } . jar " 
 basedir = " $ { build . classes . thrift } " > 
 < fileset dir = " $ { build . classes . main } " > 
 @ @ - 751 , 8 + 777 , 6 @ @ 
 < / jar > 
 
 < ! - - Main Jar - - > 
 - < artifact : writepom pomRefId = " all - pom " 
 - file = " $ { build . dir } / $ { final . name } . pom " / > 
 < jar jarfile = " $ { build . dir } / $ { final . name } . jar " 
 basedir = " $ { build . classes . main } " > 
 < manifest > 
 @ @ - 770 , 8 + 794 , 6 @ @ 
 
 < ! - - Clientutil Jar - - > 
 < ! - - TODO : write maven pom here - - > 
 - < artifact : writepom pomRefId = " clientutil - pom " 
 - file = " $ { build . dir } / $ { ant . project . name } - clientutil - $ { version } . pom " / > 
 < jar jarfile = " $ { build . dir } / $ { ant . project . name } - clientutil - $ { version } . jar " > 
 < fileset dir = " $ { build . classes . main } " > 
 < include name = " org / apache / cassandra / cql / jdbc / * " / > 
 @ @ - 1146 , 6 + 1168 , 10 @ @ 
 < / testmacro > 
 < / target > 
 
 + < target name = " test - all " 
 + depends = " test , long - test , test - compression , test - clientutil - jar " 
 + description = " Run all tests " / > 
 + 
 < ! - - instruments the classes to later create code coverage reports - - > 
 < target name = " cobertura - instrument " depends = " build , build - test " > 
 < taskdef resource = " tasks . properties " >
