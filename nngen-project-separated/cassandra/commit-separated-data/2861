BLEU SCORE: 0.020980574531482755

TEST MSG: Allow removing snapshots of no - longer - existing CFs
GENERATED MSG: add nodeprobe cancelpending

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 916ed7d . . b80c821 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 4 <nl> + * Allow removing snapshots of no - longer - existing CFs ( CASSANDRA - 6418 ) <nl> * add StorageService . stopDaemon ( ) ( CASSANDRA - 4268 ) <nl> * add IRE for invalid CF supplied to get _ count ( CASSANDRA - 5701 ) <nl> * add client encryption support to sstableloader ( CASSANDRA - 6378 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index d585407 . . a04c9e2 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1825 , 9 + 1825 , 16 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return directories . snapshotCreationTime ( snapshotName ) ; <nl> } <nl> <nl> + / * * <nl> + * Clear all the snapshots for a given column family . <nl> + * <nl> + * @ param snapshotName the user supplied snapshot name . If left empty , <nl> + * all the snapshots will be cleaned . <nl> + * / <nl> public void clearSnapshot ( String snapshotName ) <nl> { <nl> - directories . clearSnapshot ( snapshotName ) ; <nl> + List < File > snapshotDirs = directories . getCFDirectories ( ) ; <nl> + Directories . clearSnapshot ( snapshotName , snapshotDirs ) ; <nl> } <nl> <nl> public boolean hasUnreclaimedSpace ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java <nl> index b006c71 . . 2db4d9b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Directories . java <nl> + + + b / src / java / org / apache / cassandra / db / Directories . java <nl> @ @ - 402 , 11 + 402 , 11 @ @ public class Directories <nl> return false ; <nl> } <nl> <nl> - public void clearSnapshot ( String snapshotName ) <nl> + public static void clearSnapshot ( String snapshotName , List < File > snapshotDirectories ) <nl> { <nl> / / If snapshotName is empty or null , we will delete the entire snapshot directory <nl> String tag = snapshotName = = null ? " " : snapshotName ; <nl> - for ( File dir : sstableDirectories ) <nl> + for ( File dir : snapshotDirectories ) <nl> { <nl> File snapshotDir = new File ( dir , join ( SNAPSHOT _ SUBDIR , tag ) ) ; <nl> if ( snapshotDir . exists ( ) ) <nl> @ @ - 430 , 6 + 430 , 36 @ @ public class Directories <nl> throw new RuntimeException ( " Snapshot " + snapshotName + " doesn ' t exist " ) ; <nl> } <nl> <nl> + / / Recursively finds all the sub directories in the KS directory . <nl> + public static List < File > getKSChildDirectories ( String ksName ) <nl> + { <nl> + List < File > result = new ArrayList < File > ( ) ; <nl> + for ( DataDirectory dataDirectory : dataFileLocations ) <nl> + { <nl> + File ksDir = new File ( dataDirectory . location , ksName ) ; <nl> + File [ ] cfDirs = ksDir . listFiles ( ) ; <nl> + if ( cfDirs = = null ) <nl> + continue ; <nl> + for ( File cfDir : cfDirs ) <nl> + { <nl> + if ( cfDir . isDirectory ( ) ) <nl> + result . add ( cfDir ) ; <nl> + } <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> + public List < File > getCFDirectories ( ) <nl> + { <nl> + List < File > result = new ArrayList < File > ( ) ; <nl> + for ( File dataDirectory : sstableDirectories ) <nl> + { <nl> + if ( dataDirectory . isDirectory ( ) ) <nl> + result . add ( dataDirectory ) ; <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> private static File getOrCreate ( File base , String . . . subdirs ) <nl> { <nl> File dir = subdirs = = null | | subdirs . length = = 0 ? base : new File ( base , join ( subdirs ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / Keyspace . java b / src / java / org / apache / cassandra / db / Keyspace . java <nl> index 0280ed2 . . 36789e2 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Keyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / Keyspace . java <nl> @ @ - 239 , 10 + 239 , 8 @ @ public class Keyspace <nl> * / <nl> public void clearSnapshot ( String snapshotName ) <nl> { <nl> - for ( ColumnFamilyStore cfStore : columnFamilyStores . values ( ) ) <nl> - { <nl> - cfStore . clearSnapshot ( snapshotName ) ; <nl> - } <nl> + List < File > snapshotDirs = Directories . getKSChildDirectories ( getName ( ) ) ; <nl> + Directories . clearSnapshot ( snapshotName , snapshotDirs ) ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> index 164d80f . . 771ce2f 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> @ @ - 287 , 4 + 287 , 9 @ @ public class TokenMetadata <nl> { <nl> return getEndPoint ( getSuccessor ( getToken ( endPoint ) ) ) ; <nl> } <nl> + <nl> + public void clearPendingRanges ( ) <nl> + { <nl> + pendingRanges . clear ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index bc23170 . . d4beeb8 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1046 , 4 + 1046 , 9 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> { <nl> return replicationStrategy _ ; <nl> } <nl> + <nl> + public void cancelPendingRanges ( ) <nl> + { <nl> + tokenMetadata _ . clearPendingRanges ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index f4a9913 . . 3cb2001 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 131 , 6 + 131 , 13 @ @ public interface StorageServiceMBean <nl> * / <nl> public void loadBalance ( ) throws IOException , InterruptedException ; <nl> <nl> + / * * <nl> + * cancel writes to nodes that are set to be changing ranges . <nl> + * Only do this if the reason for the range changes no longer exists <nl> + * ( e . g . , a bootstrapping node was killed or crashed . ) <nl> + * / <nl> + public void cancelPendingRanges ( ) ; <nl> + <nl> / * * set the logging level at runtime * / <nl> public void setLog4jLevel ( String classQualifier , String level ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 96d80bf . . 347e2c1 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 393 , 6 + 393 , 11 @ @ public class NodeProbe <nl> ssProxy . move ( newToken ) ; <nl> } <nl> <nl> + public void cancelPendingRanges ( ) <nl> + { <nl> + ssProxy . cancelPendingRanges ( ) ; <nl> + } <nl> + <nl> / * * <nl> * Print out the size of the queues in the thread pools <nl> * <nl> @ @ - 488 , 7 + 493 , 7 @ @ public class NodeProbe <nl> HelpFormatter hf = new HelpFormatter ( ) ; <nl> String header = String . format ( <nl> " % nAvailable commands : ring , info , cleanup , compact , cfstats , snapshot [ name ] , clearsnapshot , " + <nl> - " tpstats , flush , decommission , move , loadbalance , " + <nl> + " tpstats , flush , decommission , move , loadbalance , cancelpending , " + <nl> " getcompactionthreshold , setcompactionthreshold [ minthreshold ] ( [ maxthreshold ] ) " ) ; <nl> String usage = String . format ( " java % s - host < arg > < command > % n " , NodeProbe . class . getName ( ) ) ; <nl> hf . printHelp ( usage , " " , options , header ) ; <nl> @ @ - 563 , 6 + 568 , 10 @ @ public class NodeProbe <nl> } <nl> probe . move ( arguments [ 1 ] ) ; <nl> } <nl> + else if ( cmdName . equals ( " cancelpending " ) ) <nl> + { <nl> + probe . cancelPendingRanges ( ) ; <nl> + } <nl> else if ( cmdName . equals ( " snapshot " ) ) <nl> { <nl> String snapshotName = " " ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 916ed7d . . b80c821 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 4 
 + * Allow removing snapshots of no - longer - existing CFs ( CASSANDRA - 6418 ) 
 * add StorageService . stopDaemon ( ) ( CASSANDRA - 4268 ) 
 * add IRE for invalid CF supplied to get _ count ( CASSANDRA - 5701 ) 
 * add client encryption support to sstableloader ( CASSANDRA - 6378 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index d585407 . . a04c9e2 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1825 , 9 + 1825 , 16 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return directories . snapshotCreationTime ( snapshotName ) ; 
 } 
 
 + / * * 
 + * Clear all the snapshots for a given column family . 
 + * 
 + * @ param snapshotName the user supplied snapshot name . If left empty , 
 + * all the snapshots will be cleaned . 
 + * / 
 public void clearSnapshot ( String snapshotName ) 
 { 
 - directories . clearSnapshot ( snapshotName ) ; 
 + List < File > snapshotDirs = directories . getCFDirectories ( ) ; 
 + Directories . clearSnapshot ( snapshotName , snapshotDirs ) ; 
 } 
 
 public boolean hasUnreclaimedSpace ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java 
 index b006c71 . . 2db4d9b 100644 
 - - - a / src / java / org / apache / cassandra / db / Directories . java 
 + + + b / src / java / org / apache / cassandra / db / Directories . java 
 @ @ - 402 , 11 + 402 , 11 @ @ public class Directories 
 return false ; 
 } 
 
 - public void clearSnapshot ( String snapshotName ) 
 + public static void clearSnapshot ( String snapshotName , List < File > snapshotDirectories ) 
 { 
 / / If snapshotName is empty or null , we will delete the entire snapshot directory 
 String tag = snapshotName = = null ? " " : snapshotName ; 
 - for ( File dir : sstableDirectories ) 
 + for ( File dir : snapshotDirectories ) 
 { 
 File snapshotDir = new File ( dir , join ( SNAPSHOT _ SUBDIR , tag ) ) ; 
 if ( snapshotDir . exists ( ) ) 
 @ @ - 430 , 6 + 430 , 36 @ @ public class Directories 
 throw new RuntimeException ( " Snapshot " + snapshotName + " doesn ' t exist " ) ; 
 } 
 
 + / / Recursively finds all the sub directories in the KS directory . 
 + public static List < File > getKSChildDirectories ( String ksName ) 
 + { 
 + List < File > result = new ArrayList < File > ( ) ; 
 + for ( DataDirectory dataDirectory : dataFileLocations ) 
 + { 
 + File ksDir = new File ( dataDirectory . location , ksName ) ; 
 + File [ ] cfDirs = ksDir . listFiles ( ) ; 
 + if ( cfDirs = = null ) 
 + continue ; 
 + for ( File cfDir : cfDirs ) 
 + { 
 + if ( cfDir . isDirectory ( ) ) 
 + result . add ( cfDir ) ; 
 + } 
 + } 
 + return result ; 
 + } 
 + 
 + public List < File > getCFDirectories ( ) 
 + { 
 + List < File > result = new ArrayList < File > ( ) ; 
 + for ( File dataDirectory : sstableDirectories ) 
 + { 
 + if ( dataDirectory . isDirectory ( ) ) 
 + result . add ( dataDirectory ) ; 
 + } 
 + return result ; 
 + } 
 + 
 private static File getOrCreate ( File base , String . . . subdirs ) 
 { 
 File dir = subdirs = = null | | subdirs . length = = 0 ? base : new File ( base , join ( subdirs ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / Keyspace . java b / src / java / org / apache / cassandra / db / Keyspace . java 
 index 0280ed2 . . 36789e2 100644 
 - - - a / src / java / org / apache / cassandra / db / Keyspace . java 
 + + + b / src / java / org / apache / cassandra / db / Keyspace . java 
 @ @ - 239 , 10 + 239 , 8 @ @ public class Keyspace 
 * / 
 public void clearSnapshot ( String snapshotName ) 
 { 
 - for ( ColumnFamilyStore cfStore : columnFamilyStores . values ( ) ) 
 - { 
 - cfStore . clearSnapshot ( snapshotName ) ; 
 - } 
 + List < File > snapshotDirs = Directories . getKSChildDirectories ( getName ( ) ) ; 
 + Directories . clearSnapshot ( snapshotName , snapshotDirs ) ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 index 164d80f . . 771ce2f 100644 
 - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 @ @ - 287 , 4 + 287 , 9 @ @ public class TokenMetadata 
 { 
 return getEndPoint ( getSuccessor ( getToken ( endPoint ) ) ) ; 
 } 
 + 
 + public void clearPendingRanges ( ) 
 + { 
 + pendingRanges . clear ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index bc23170 . . d4beeb8 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1046 , 4 + 1046 , 9 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 { 
 return replicationStrategy _ ; 
 } 
 + 
 + public void cancelPendingRanges ( ) 
 + { 
 + tokenMetadata _ . clearPendingRanges ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index f4a9913 . . 3cb2001 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 131 , 6 + 131 , 13 @ @ public interface StorageServiceMBean 
 * / 
 public void loadBalance ( ) throws IOException , InterruptedException ; 
 
 + / * * 
 + * cancel writes to nodes that are set to be changing ranges . 
 + * Only do this if the reason for the range changes no longer exists 
 + * ( e . g . , a bootstrapping node was killed or crashed . ) 
 + * / 
 + public void cancelPendingRanges ( ) ; 
 + 
 / * * set the logging level at runtime * / 
 public void setLog4jLevel ( String classQualifier , String level ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 96d80bf . . 347e2c1 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 393 , 6 + 393 , 11 @ @ public class NodeProbe 
 ssProxy . move ( newToken ) ; 
 } 
 
 + public void cancelPendingRanges ( ) 
 + { 
 + ssProxy . cancelPendingRanges ( ) ; 
 + } 
 + 
 / * * 
 * Print out the size of the queues in the thread pools 
 * 
 @ @ - 488 , 7 + 493 , 7 @ @ public class NodeProbe 
 HelpFormatter hf = new HelpFormatter ( ) ; 
 String header = String . format ( 
 " % nAvailable commands : ring , info , cleanup , compact , cfstats , snapshot [ name ] , clearsnapshot , " + 
 - " tpstats , flush , decommission , move , loadbalance , " + 
 + " tpstats , flush , decommission , move , loadbalance , cancelpending , " + 
 " getcompactionthreshold , setcompactionthreshold [ minthreshold ] ( [ maxthreshold ] ) " ) ; 
 String usage = String . format ( " java % s - host < arg > < command > % n " , NodeProbe . class . getName ( ) ) ; 
 hf . printHelp ( usage , " " , options , header ) ; 
 @ @ - 563 , 6 + 568 , 10 @ @ public class NodeProbe 
 } 
 probe . move ( arguments [ 1 ] ) ; 
 } 
 + else if ( cmdName . equals ( " cancelpending " ) ) 
 + { 
 + probe . cancelPendingRanges ( ) ; 
 + } 
 else if ( cmdName . equals ( " snapshot " ) ) 
 { 
 String snapshotName = " " ;
