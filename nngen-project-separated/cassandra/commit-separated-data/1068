BLEU SCORE: 0.004649197634792874

TEST MSG: Throw UnsupportedOperationException for bad removeNode calls
GENERATED MSG: add StorageService . initClient , which starts up Gossiper without setting a token or anything other application state .

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 92a8136 . . 22ea0c1 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 3885 , 7 + 3885 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> / * * <nl> * Force a remove operation to complete . This may be necessary if a remove operation <nl> - * blocks forever due to node / stream failure . removeToken ( ) must be called <nl> + * blocks forever due to node / stream failure . removeNode ( ) must be called <nl> * first , this is a last resort measure . No further attempt will be made to restore replicas . <nl> * / <nl> public void forceRemoveCompletion ( ) <nl> @ @ - 3904 , 18 + 3904 , 18 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> else <nl> { <nl> - logger . warn ( " No tokens to force removal on , call ' removenode ' first " ) ; <nl> + logger . warn ( " No nodes to force removal on , call ' removenode ' first " ) ; <nl> } <nl> } <nl> <nl> / * * <nl> * Remove a node that has died , attempting to restore the replica count . <nl> * If the node is alive , decommission should be attempted . If decommission <nl> - * fails , then removeToken should be called . If we fail while trying to <nl> + * fails , then removeNode should be called . If we fail while trying to <nl> * restore the replica count , finally forceRemoveCompleteion should be <nl> * called to forcibly remove the node without regard to replica count . <nl> * <nl> - * @ param hostIdString token for the node <nl> + * @ param hostIdString Host ID for the node <nl> * / <nl> public void removeNode ( String hostIdString ) <nl> { <nl> @ @ - 3927 , 7 + 3927 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> if ( endpoint = = null ) <nl> throw new UnsupportedOperationException ( " Host ID not found . " ) ; <nl> <nl> - Collection < Token > tokens = tokenMetadata . getTokens ( endpoint ) ; <nl> + if ( ! tokenMetadata . isMember ( endpoint ) ) <nl> + throw new UnsupportedOperationException ( " Node to be removed is not a member of the token ring " ) ; <nl> <nl> if ( endpoint . equals ( myAddress ) ) <nl> throw new UnsupportedOperationException ( " Cannot remove self " ) ; <nl> @ @ - 3942 , 6 + 3943 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> if ( ! replicatingNodes . isEmpty ( ) ) <nl> throw new UnsupportedOperationException ( " This node is already processing a removal . Wait for it to complete , or use ' removenode force ' if this has failed . " ) ; <nl> <nl> + Collection < Token > tokens = tokenMetadata . getTokens ( endpoint ) ; <nl> + <nl> / / Find the endpoints that are going to become responsible for data <nl> for ( String keyspaceName : Schema . instance . getNonSystemKeyspaces ( ) ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / service / RemoveTest . java b / test / unit / org / apache / cassandra / service / RemoveTest . java <nl> index 9f1d6a8 . . 4c26fc5 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / RemoveTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / RemoveTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package org . apache . cassandra . service ; <nl> import java . io . IOException ; <nl> import java . net . InetAddress ; <nl> import java . util . ArrayList ; <nl> + import java . util . Collection ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . UUID ; <nl> @ @ - 31 , 11 + 32 , 14 @ @ import org . junit . * ; <nl> <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . Util ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . dht . RandomPartitioner ; <nl> import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . gms . ApplicationState ; <nl> import org . apache . cassandra . gms . Gossiper ; <nl> + import org . apache . cassandra . gms . VersionedValue . VersionedValueFactory ; <nl> import org . apache . cassandra . locator . TokenMetadata ; <nl> import org . apache . cassandra . net . MessageOut ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> @ @ - 108 , 6 + 112 , 25 @ @ public class RemoveTest <nl> ss . removeNode ( hostIds . get ( 0 ) . toString ( ) ) ; <nl> } <nl> <nl> + @ Test ( expected = UnsupportedOperationException . class ) <nl> + public void testNonmemberId ( ) <nl> + { <nl> + VersionedValueFactory valueFactory = new VersionedValueFactory ( DatabaseDescriptor . getPartitioner ( ) ) ; <nl> + Collection < Token > tokens = Collections . singleton ( DatabaseDescriptor . getPartitioner ( ) . getRandomToken ( ) ) ; <nl> + <nl> + InetAddress joininghost = hosts . get ( 4 ) ; <nl> + UUID joiningId = hostIds . get ( 4 ) ; <nl> + <nl> + hosts . remove ( joininghost ) ; <nl> + hostIds . remove ( joiningId ) ; <nl> + <nl> + / / Change a node to a bootstrapping node that is not yet a member of the ring <nl> + Gossiper . instance . injectApplicationState ( joininghost , ApplicationState . TOKENS , valueFactory . tokens ( tokens ) ) ; <nl> + ss . onChange ( joininghost , ApplicationState . STATUS , valueFactory . bootstrapping ( tokens ) ) ; <nl> + <nl> + ss . removeNode ( joiningId . toString ( ) ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testRemoveHostId ( ) throws InterruptedException <nl> {
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 6e5ab81 . . b2394b1 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 390 , 22 + 390 , 9 @ @ public class DatabaseDescriptor <nl> columnIndexSizeInKB _ = Integer . parseInt ( columnIndexSizeInKB ) ; <nl> } <nl> <nl> - / * data file directory * / <nl> + / * data file and commit log directories . they get created later , when they ' re needed . * / <nl> dataFileDirectories _ = xmlUtils . getNodeValues ( " / Storage / DataFileDirectories / DataFileDirectory " ) ; <nl> - if ( dataFileDirectories _ . length = = 0 ) <nl> - { <nl> - throw new ConfigurationException ( " At least one DataFileDirectory must be specified " ) ; <nl> - } <nl> - for ( String dataFileDirectory : dataFileDirectories _ ) <nl> - FileUtils . createDirectory ( dataFileDirectory ) ; <nl> - <nl> - / * commit log directory * / <nl> logFileDirectory _ = xmlUtils . getNodeValue ( " / Storage / CommitLogDirectory " ) ; <nl> - if ( logFileDirectory _ = = null ) <nl> - { <nl> - throw new ConfigurationException ( " CommitLogDirectory must be specified " ) ; <nl> - } <nl> - FileUtils . createDirectory ( logFileDirectory _ ) ; <nl> <nl> / * threshold after which commit log should be rotated . * / <nl> String value = xmlUtils . getNodeValue ( " / Storage / CommitLogRotationThresholdInMB " ) ; <nl> @ @ - 547 , 9 + 534 , 6 @ @ public class DatabaseDescriptor <nl> tableToCFMetaDataMap _ . put ( Table . SYSTEM _ TABLE , systemMetadata ) ; <nl> tableKeysCachedFractions _ . put ( Table . SYSTEM _ TABLE , 0 . 0 ) ; <nl> <nl> - / * make sure we have a directory for each table * / <nl> - createTableDirectories ( ) ; <nl> - <nl> / * Load the seeds for node contact points * / <nl> String [ ] seeds = xmlUtils . getNodeValues ( " / Storage / Seeds / Seed " ) ; <nl> if ( seeds . length < = 0 ) <nl> @ @ - 603 , 11 + 587 , 31 @ @ public class DatabaseDescriptor <nl> } <nl> <nl> / * * <nl> - * Create the table directory in each data directory <nl> + * Creates all storage - related directories . <nl> + * @ throws IOException when a disk problem is encountered . <nl> * / <nl> - public static void createTableDirectories ( ) throws IOException <nl> + public static void createAllDirectories ( ) throws IOException <nl> { <nl> - for ( String dataFile : dataFileDirectories _ ) <nl> + try { <nl> + if ( dataFileDirectories _ . length = = 0 ) <nl> + { <nl> + throw new ConfigurationException ( " At least one DataFileDirectory must be specified " ) ; <nl> + } <nl> + for ( String dataFileDirectory : dataFileDirectories _ ) <nl> + FileUtils . createDirectory ( dataFileDirectory ) ; <nl> + if ( logFileDirectory _ = = null ) <nl> + { <nl> + throw new ConfigurationException ( " CommitLogDirectory must be specified " ) ; <nl> + } <nl> + FileUtils . createDirectory ( logFileDirectory _ ) ; <nl> + } <nl> + catch ( ConfigurationException ex ) { <nl> + logger _ . error ( " Fatal error : " + ex . getMessage ( ) ) ; <nl> + System . err . println ( " Bad configuration ; unable to start server " ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + / * make sure we have a directory for each table * / <nl> + for ( String dataFile : dataFileDirectories _ ) <nl> { <nl> FileUtils . createDirectory ( dataFile + File . separator + Table . SYSTEM _ TABLE ) ; <nl> for ( String table : tables _ ) <nl> diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java <nl> index 6d2fe48 . . 30d4dc2 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Table . java <nl> + + + b / src / java / org / apache / cassandra / db / Table . java <nl> @ @ - 29 , 14 + 29 , 8 @ @ import java . util . concurrent . Future ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . io . SSTableReader ; <nl> - import org . apache . cassandra . io . SSTableWriter ; <nl> import org . apache . cassandra . io . DataOutputBuffer ; <nl> import java . net . InetAddress ; <nl> - import org . apache . cassandra . net . Message ; <nl> - import org . apache . cassandra . net . MessagingService ; <nl> - import org . apache . cassandra . net . io . IStreamComplete ; <nl> - import org . apache . cassandra . net . io . StreamContextManager ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . * ; <nl> import org . apache . cassandra . db . filter . * ; <nl> <nl> @ @ - 53 , 6 + 47 , 21 @ @ public class Table <nl> <nl> private static Timer flushTimer _ = new Timer ( " FLUSH - TIMER " ) ; <nl> <nl> + / / This is a result of pushing down the point in time when storage directories get created . It used to happen in <nl> + / / CassandraDaemon , but it is possible to call Table . open without a running daemon , so it made sense to ensure <nl> + / / proper directories here . <nl> + static <nl> + { <nl> + try <nl> + { <nl> + DatabaseDescriptor . createAllDirectories ( ) ; <nl> + } <nl> + catch ( IOException ex ) <nl> + { <nl> + throw new RuntimeException ( ex ) ; <nl> + } <nl> + } <nl> + <nl> / * <nl> * This class represents the metadata of this Table . The metadata <nl> * is basically the column family name and the ID associated with <nl> diff - - git a / src / java / org / apache / cassandra / gms / EndPointState . java b / src / java / org / apache / cassandra / gms / EndPointState . java <nl> index 2be33d9 . . 2db8e6e 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / EndPointState . java <nl> + + + b / src / java / org / apache / cassandra / gms / EndPointState . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . io . DataOutputStream ; <nl> import java . io . IOException ; <nl> import java . util . * ; <nl> import org . apache . cassandra . io . ICompactSerializer ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> <nl> import org . apache . log4j . Logger ; <nl> <nl> @ @ - 82 , 7 + 83 , 8 @ @ public class EndPointState <nl> } <nl> <nl> void addApplicationState ( String key , ApplicationState appState ) <nl> - { <nl> + { <nl> + assert ! StorageService . instance ( ) . isClientMode ( ) ; <nl> applicationState _ . put ( key , appState ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraServer . java b / src / java / org / apache / cassandra / service / CassandraServer . java <nl> index 2cd3e5a . . 4600b80 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraServer . java <nl> @ @ - 66 , 7 + 66 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> 	 	 LogUtil . init ( ) ; <nl> 	 	 / / LogUtil . setLogLevel ( " com . facebook " , " DEBUG " ) ; <nl> 	 	 / / Start the storage service <nl> - 	 	 storageService . start ( ) ; <nl> + 	 	 storageService . initServer ( ) ; <nl> 	 } <nl> <nl> protected Map < String , ColumnFamily > readColumnFamily ( List < ReadCommand > commands , int consistency _ level ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 73bf9dd . . 7951ab4 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import javax . management . * ; <nl> import org . apache . cassandra . concurrent . * ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . * ; <nl> + import org . apache . cassandra . db . filter . QueryPath ; <nl> import org . apache . cassandra . dht . * ; <nl> import org . apache . cassandra . gms . * ; <nl> import org . apache . cassandra . locator . * ; <nl> @ @ - 149 , 6 + 150 , 8 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> / * Are we starting this node in bootstrap mode ? * / <nl> private boolean isBootstrapMode ; <nl> private Set < InetAddress > bootstrapSet ; <nl> + / * when intialized as a client , we shouldn ' t write to the system table . * / <nl> + private boolean isClientMode ; <nl> <nl> public synchronized void addBootstrapSource ( InetAddress s ) <nl> { <nl> @ @ - 185 , 8 + 188 , 9 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> } <nl> <nl> / * * <nl> - * for bulk loading clients to be able to use tokenmetadata / messagingservice <nl> - * without fully starting storageservice / systemtable . <nl> + * Intended for operation in client - only ( non - storage mode ) . E . g . : for bulk loading clients <nl> + * to be able to use tokenmetadata / messagingservice without fully starting storageservice / systemtable , <nl> + * or java clients that wish to bypase Thrift entirely . <nl> * / <nl> public void updateForeignTokenUnsafe ( Token token , InetAddress endpoint ) <nl> { <nl> @ @ - 251 , 10 + 255 , 34 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> } <nl> return replicationStrategy ; <nl> } <nl> + <nl> + public void stopClient ( ) <nl> + { <nl> + Gossiper . instance ( ) . unregister ( this ) ; <nl> + Gossiper . instance ( ) . stop ( ) ; <nl> + MessagingService . shutdown ( ) ; <nl> + } <nl> + <nl> + public void initClient ( ) throws IOException <nl> + { <nl> + isClientMode = true ; <nl> + logger _ . info ( " Starting up client gossip " ) ; <nl> + MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; <nl> + MessagingService . instance ( ) . listenUDP ( FBUtilities . getLocalAddress ( ) ) ; <nl> + <nl> + SelectorManager . getSelectorManager ( ) . start ( ) ; <nl> + SelectorManager . getUdpSelectorManager ( ) . start ( ) ; <nl> + <nl> + Gossiper . instance ( ) . register ( this ) ; <nl> + Gossiper . instance ( ) . start ( FBUtilities . getLocalAddress ( ) , ( int ) ( System . currentTimeMillis ( ) / 1000 ) ) ; / / needed for node - ring gathering . <nl> + } <nl> <nl> - public void start ( ) throws IOException <nl> + public void initServer ( ) throws IOException <nl> { <nl> + isClientMode = false ; <nl> storageMetadata _ = SystemTable . initMetadata ( ) ; <nl> + DatabaseDescriptor . createAllDirectories ( ) ; <nl> + logger _ . info ( " Starting up server gossip " ) ; <nl> <nl> / * Listen for application messages * / <nl> MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; <nl> @ @ - 270 , 7 + 298 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> / / for bootstrap to get the load info it needs . <nl> / / ( we won ' t be part of the storage ring though until we add a nodeId to our state , below . ) <nl> Gossiper . instance ( ) . register ( this ) ; <nl> - Gossiper . instance ( ) . start ( FBUtilities . getLocalAddress ( ) , storageMetadata _ . getGeneration ( ) ) ; <nl> + Gossiper . instance ( ) . start ( FBUtilities . getLocalAddress ( ) , storageMetadata _ . getGeneration ( ) ) ; / / needed for node - ring gathering . <nl> <nl> if ( DatabaseDescriptor . isAutoBootstrap ( ) <nl> & & ! ( DatabaseDescriptor . getSeeds ( ) . contains ( FBUtilities . getLocalAddress ( ) ) | | SystemTable . isBootstrapped ( ) ) ) <nl> @ @ - 284 , 7 + 312 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> while ( isBootstrapMode ) <nl> { <nl> try <nl> - { <nl> + { <nl> Thread . sleep ( 100 ) ; <nl> } <nl> catch ( InterruptedException e ) <nl> @ @ - 405 , 7 + 433 , 10 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> Token token = getPartitioner ( ) . getTokenFactory ( ) . fromString ( state . getValue ( ) ) ; <nl> if ( logger _ . isDebugEnabled ( ) ) <nl> logger _ . debug ( endpoint + " state normal , token " + token ) ; <nl> - updateForeignToken ( token , endpoint ) ; <nl> + if ( isClientMode ) <nl> + updateForeignTokenUnsafe ( token , endpoint ) ; <nl> + else <nl> + updateForeignToken ( token , endpoint ) ; <nl> replicationStrategy _ . removeObsoletePendingRanges ( ) ; <nl> } <nl> else if ( STATE _ LEAVING . equals ( stateName ) ) <nl> @ @ - 499 , 7 + 530 , 8 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> <nl> public void onAlive ( InetAddress endpoint , EndPointState state ) <nl> { <nl> - deliverHints ( endpoint ) ; <nl> + if ( ! isClientMode ) <nl> + deliverHints ( endpoint ) ; <nl> } <nl> <nl> public void onDead ( InetAddress endpoint , EndPointState state ) { } <nl> @ @ - 983 , 6 + 1015 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> public void run ( ) <nl> { <nl> Gossiper . instance ( ) . stop ( ) ; <nl> + MessagingService . shutdown ( ) ; <nl> logger _ . info ( " DECOMMISSION FINISHED . " ) ; <nl> / / let op be responsible for killing the process <nl> } <nl> @ @ - 1111 , 4 + 1144 , 9 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> { <nl> tokenMetadata _ . clearPendingRanges ( ) ; <nl> } <nl> + <nl> + public boolean isClientMode ( ) <nl> + { <nl> + return isClientMode ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 92a8136 . . 22ea0c1 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 3885 , 7 + 3885 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 / * * 
 * Force a remove operation to complete . This may be necessary if a remove operation 
 - * blocks forever due to node / stream failure . removeToken ( ) must be called 
 + * blocks forever due to node / stream failure . removeNode ( ) must be called 
 * first , this is a last resort measure . No further attempt will be made to restore replicas . 
 * / 
 public void forceRemoveCompletion ( ) 
 @ @ - 3904 , 18 + 3904 , 18 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 else 
 { 
 - logger . warn ( " No tokens to force removal on , call ' removenode ' first " ) ; 
 + logger . warn ( " No nodes to force removal on , call ' removenode ' first " ) ; 
 } 
 } 
 
 / * * 
 * Remove a node that has died , attempting to restore the replica count . 
 * If the node is alive , decommission should be attempted . If decommission 
 - * fails , then removeToken should be called . If we fail while trying to 
 + * fails , then removeNode should be called . If we fail while trying to 
 * restore the replica count , finally forceRemoveCompleteion should be 
 * called to forcibly remove the node without regard to replica count . 
 * 
 - * @ param hostIdString token for the node 
 + * @ param hostIdString Host ID for the node 
 * / 
 public void removeNode ( String hostIdString ) 
 { 
 @ @ - 3927 , 7 + 3927 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 if ( endpoint = = null ) 
 throw new UnsupportedOperationException ( " Host ID not found . " ) ; 
 
 - Collection < Token > tokens = tokenMetadata . getTokens ( endpoint ) ; 
 + if ( ! tokenMetadata . isMember ( endpoint ) ) 
 + throw new UnsupportedOperationException ( " Node to be removed is not a member of the token ring " ) ; 
 
 if ( endpoint . equals ( myAddress ) ) 
 throw new UnsupportedOperationException ( " Cannot remove self " ) ; 
 @ @ - 3942 , 6 + 3943 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 if ( ! replicatingNodes . isEmpty ( ) ) 
 throw new UnsupportedOperationException ( " This node is already processing a removal . Wait for it to complete , or use ' removenode force ' if this has failed . " ) ; 
 
 + Collection < Token > tokens = tokenMetadata . getTokens ( endpoint ) ; 
 + 
 / / Find the endpoints that are going to become responsible for data 
 for ( String keyspaceName : Schema . instance . getNonSystemKeyspaces ( ) ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / service / RemoveTest . java b / test / unit / org / apache / cassandra / service / RemoveTest . java 
 index 9f1d6a8 . . 4c26fc5 100644 
 - - - a / test / unit / org / apache / cassandra / service / RemoveTest . java 
 + + + b / test / unit / org / apache / cassandra / service / RemoveTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package org . apache . cassandra . service ; 
 import java . io . IOException ; 
 import java . net . InetAddress ; 
 import java . util . ArrayList ; 
 + import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . List ; 
 import java . util . UUID ; 
 @ @ - 31 , 11 + 32 , 14 @ @ import org . junit . * ; 
 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . Util ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . dht . RandomPartitioner ; 
 import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . gms . ApplicationState ; 
 import org . apache . cassandra . gms . Gossiper ; 
 + import org . apache . cassandra . gms . VersionedValue . VersionedValueFactory ; 
 import org . apache . cassandra . locator . TokenMetadata ; 
 import org . apache . cassandra . net . MessageOut ; 
 import org . apache . cassandra . net . MessagingService ; 
 @ @ - 108 , 6 + 112 , 25 @ @ public class RemoveTest 
 ss . removeNode ( hostIds . get ( 0 ) . toString ( ) ) ; 
 } 
 
 + @ Test ( expected = UnsupportedOperationException . class ) 
 + public void testNonmemberId ( ) 
 + { 
 + VersionedValueFactory valueFactory = new VersionedValueFactory ( DatabaseDescriptor . getPartitioner ( ) ) ; 
 + Collection < Token > tokens = Collections . singleton ( DatabaseDescriptor . getPartitioner ( ) . getRandomToken ( ) ) ; 
 + 
 + InetAddress joininghost = hosts . get ( 4 ) ; 
 + UUID joiningId = hostIds . get ( 4 ) ; 
 + 
 + hosts . remove ( joininghost ) ; 
 + hostIds . remove ( joiningId ) ; 
 + 
 + / / Change a node to a bootstrapping node that is not yet a member of the ring 
 + Gossiper . instance . injectApplicationState ( joininghost , ApplicationState . TOKENS , valueFactory . tokens ( tokens ) ) ; 
 + ss . onChange ( joininghost , ApplicationState . STATUS , valueFactory . bootstrapping ( tokens ) ) ; 
 + 
 + ss . removeNode ( joiningId . toString ( ) ) ; 
 + } 
 + 
 @ Test 
 public void testRemoveHostId ( ) throws InterruptedException 
 {

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 6e5ab81 . . b2394b1 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 390 , 22 + 390 , 9 @ @ public class DatabaseDescriptor 
 columnIndexSizeInKB _ = Integer . parseInt ( columnIndexSizeInKB ) ; 
 } 
 
 - / * data file directory * / 
 + / * data file and commit log directories . they get created later , when they ' re needed . * / 
 dataFileDirectories _ = xmlUtils . getNodeValues ( " / Storage / DataFileDirectories / DataFileDirectory " ) ; 
 - if ( dataFileDirectories _ . length = = 0 ) 
 - { 
 - throw new ConfigurationException ( " At least one DataFileDirectory must be specified " ) ; 
 - } 
 - for ( String dataFileDirectory : dataFileDirectories _ ) 
 - FileUtils . createDirectory ( dataFileDirectory ) ; 
 - 
 - / * commit log directory * / 
 logFileDirectory _ = xmlUtils . getNodeValue ( " / Storage / CommitLogDirectory " ) ; 
 - if ( logFileDirectory _ = = null ) 
 - { 
 - throw new ConfigurationException ( " CommitLogDirectory must be specified " ) ; 
 - } 
 - FileUtils . createDirectory ( logFileDirectory _ ) ; 
 
 / * threshold after which commit log should be rotated . * / 
 String value = xmlUtils . getNodeValue ( " / Storage / CommitLogRotationThresholdInMB " ) ; 
 @ @ - 547 , 9 + 534 , 6 @ @ public class DatabaseDescriptor 
 tableToCFMetaDataMap _ . put ( Table . SYSTEM _ TABLE , systemMetadata ) ; 
 tableKeysCachedFractions _ . put ( Table . SYSTEM _ TABLE , 0 . 0 ) ; 
 
 - / * make sure we have a directory for each table * / 
 - createTableDirectories ( ) ; 
 - 
 / * Load the seeds for node contact points * / 
 String [ ] seeds = xmlUtils . getNodeValues ( " / Storage / Seeds / Seed " ) ; 
 if ( seeds . length < = 0 ) 
 @ @ - 603 , 11 + 587 , 31 @ @ public class DatabaseDescriptor 
 } 
 
 / * * 
 - * Create the table directory in each data directory 
 + * Creates all storage - related directories . 
 + * @ throws IOException when a disk problem is encountered . 
 * / 
 - public static void createTableDirectories ( ) throws IOException 
 + public static void createAllDirectories ( ) throws IOException 
 { 
 - for ( String dataFile : dataFileDirectories _ ) 
 + try { 
 + if ( dataFileDirectories _ . length = = 0 ) 
 + { 
 + throw new ConfigurationException ( " At least one DataFileDirectory must be specified " ) ; 
 + } 
 + for ( String dataFileDirectory : dataFileDirectories _ ) 
 + FileUtils . createDirectory ( dataFileDirectory ) ; 
 + if ( logFileDirectory _ = = null ) 
 + { 
 + throw new ConfigurationException ( " CommitLogDirectory must be specified " ) ; 
 + } 
 + FileUtils . createDirectory ( logFileDirectory _ ) ; 
 + } 
 + catch ( ConfigurationException ex ) { 
 + logger _ . error ( " Fatal error : " + ex . getMessage ( ) ) ; 
 + System . err . println ( " Bad configuration ; unable to start server " ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + / * make sure we have a directory for each table * / 
 + for ( String dataFile : dataFileDirectories _ ) 
 { 
 FileUtils . createDirectory ( dataFile + File . separator + Table . SYSTEM _ TABLE ) ; 
 for ( String table : tables _ ) 
 diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java 
 index 6d2fe48 . . 30d4dc2 100644 
 - - - a / src / java / org / apache / cassandra / db / Table . java 
 + + + b / src / java / org / apache / cassandra / db / Table . java 
 @ @ - 29 , 14 + 29 , 8 @ @ import java . util . concurrent . Future ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . io . SSTableReader ; 
 - import org . apache . cassandra . io . SSTableWriter ; 
 import org . apache . cassandra . io . DataOutputBuffer ; 
 import java . net . InetAddress ; 
 - import org . apache . cassandra . net . Message ; 
 - import org . apache . cassandra . net . MessagingService ; 
 - import org . apache . cassandra . net . io . IStreamComplete ; 
 - import org . apache . cassandra . net . io . StreamContextManager ; 
 - import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . * ; 
 import org . apache . cassandra . db . filter . * ; 
 
 @ @ - 53 , 6 + 47 , 21 @ @ public class Table 
 
 private static Timer flushTimer _ = new Timer ( " FLUSH - TIMER " ) ; 
 
 + / / This is a result of pushing down the point in time when storage directories get created . It used to happen in 
 + / / CassandraDaemon , but it is possible to call Table . open without a running daemon , so it made sense to ensure 
 + / / proper directories here . 
 + static 
 + { 
 + try 
 + { 
 + DatabaseDescriptor . createAllDirectories ( ) ; 
 + } 
 + catch ( IOException ex ) 
 + { 
 + throw new RuntimeException ( ex ) ; 
 + } 
 + } 
 + 
 / * 
 * This class represents the metadata of this Table . The metadata 
 * is basically the column family name and the ID associated with 
 diff - - git a / src / java / org / apache / cassandra / gms / EndPointState . java b / src / java / org / apache / cassandra / gms / EndPointState . java 
 index 2be33d9 . . 2db8e6e 100644 
 - - - a / src / java / org / apache / cassandra / gms / EndPointState . java 
 + + + b / src / java / org / apache / cassandra / gms / EndPointState . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . io . DataOutputStream ; 
 import java . io . IOException ; 
 import java . util . * ; 
 import org . apache . cassandra . io . ICompactSerializer ; 
 + import org . apache . cassandra . service . StorageService ; 
 
 import org . apache . log4j . Logger ; 
 
 @ @ - 82 , 7 + 83 , 8 @ @ public class EndPointState 
 } 
 
 void addApplicationState ( String key , ApplicationState appState ) 
 - { 
 + { 
 + assert ! StorageService . instance ( ) . isClientMode ( ) ; 
 applicationState _ . put ( key , appState ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraServer . java b / src / java / org / apache / cassandra / service / CassandraServer . java 
 index 2cd3e5a . . 4600b80 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraServer . java 
 @ @ - 66 , 7 + 66 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 	 	 LogUtil . init ( ) ; 
 	 	 / / LogUtil . setLogLevel ( " com . facebook " , " DEBUG " ) ; 
 	 	 / / Start the storage service 
 - 	 	 storageService . start ( ) ; 
 + 	 	 storageService . initServer ( ) ; 
 	 } 
 
 protected Map < String , ColumnFamily > readColumnFamily ( List < ReadCommand > commands , int consistency _ level ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 73bf9dd . . 7951ab4 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import javax . management . * ; 
 import org . apache . cassandra . concurrent . * ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . * ; 
 + import org . apache . cassandra . db . filter . QueryPath ; 
 import org . apache . cassandra . dht . * ; 
 import org . apache . cassandra . gms . * ; 
 import org . apache . cassandra . locator . * ; 
 @ @ - 149 , 6 + 150 , 8 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 / * Are we starting this node in bootstrap mode ? * / 
 private boolean isBootstrapMode ; 
 private Set < InetAddress > bootstrapSet ; 
 + / * when intialized as a client , we shouldn ' t write to the system table . * / 
 + private boolean isClientMode ; 
 
 public synchronized void addBootstrapSource ( InetAddress s ) 
 { 
 @ @ - 185 , 8 + 188 , 9 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 } 
 
 / * * 
 - * for bulk loading clients to be able to use tokenmetadata / messagingservice 
 - * without fully starting storageservice / systemtable . 
 + * Intended for operation in client - only ( non - storage mode ) . E . g . : for bulk loading clients 
 + * to be able to use tokenmetadata / messagingservice without fully starting storageservice / systemtable , 
 + * or java clients that wish to bypase Thrift entirely . 
 * / 
 public void updateForeignTokenUnsafe ( Token token , InetAddress endpoint ) 
 { 
 @ @ - 251 , 10 + 255 , 34 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 } 
 return replicationStrategy ; 
 } 
 + 
 + public void stopClient ( ) 
 + { 
 + Gossiper . instance ( ) . unregister ( this ) ; 
 + Gossiper . instance ( ) . stop ( ) ; 
 + MessagingService . shutdown ( ) ; 
 + } 
 + 
 + public void initClient ( ) throws IOException 
 + { 
 + isClientMode = true ; 
 + logger _ . info ( " Starting up client gossip " ) ; 
 + MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; 
 + MessagingService . instance ( ) . listenUDP ( FBUtilities . getLocalAddress ( ) ) ; 
 + 
 + SelectorManager . getSelectorManager ( ) . start ( ) ; 
 + SelectorManager . getUdpSelectorManager ( ) . start ( ) ; 
 + 
 + Gossiper . instance ( ) . register ( this ) ; 
 + Gossiper . instance ( ) . start ( FBUtilities . getLocalAddress ( ) , ( int ) ( System . currentTimeMillis ( ) / 1000 ) ) ; / / needed for node - ring gathering . 
 + } 
 
 - public void start ( ) throws IOException 
 + public void initServer ( ) throws IOException 
 { 
 + isClientMode = false ; 
 storageMetadata _ = SystemTable . initMetadata ( ) ; 
 + DatabaseDescriptor . createAllDirectories ( ) ; 
 + logger _ . info ( " Starting up server gossip " ) ; 
 
 / * Listen for application messages * / 
 MessagingService . instance ( ) . listen ( FBUtilities . getLocalAddress ( ) ) ; 
 @ @ - 270 , 7 + 298 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 / / for bootstrap to get the load info it needs . 
 / / ( we won ' t be part of the storage ring though until we add a nodeId to our state , below . ) 
 Gossiper . instance ( ) . register ( this ) ; 
 - Gossiper . instance ( ) . start ( FBUtilities . getLocalAddress ( ) , storageMetadata _ . getGeneration ( ) ) ; 
 + Gossiper . instance ( ) . start ( FBUtilities . getLocalAddress ( ) , storageMetadata _ . getGeneration ( ) ) ; / / needed for node - ring gathering . 
 
 if ( DatabaseDescriptor . isAutoBootstrap ( ) 
 & & ! ( DatabaseDescriptor . getSeeds ( ) . contains ( FBUtilities . getLocalAddress ( ) ) | | SystemTable . isBootstrapped ( ) ) ) 
 @ @ - 284 , 7 + 312 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 while ( isBootstrapMode ) 
 { 
 try 
 - { 
 + { 
 Thread . sleep ( 100 ) ; 
 } 
 catch ( InterruptedException e ) 
 @ @ - 405 , 7 + 433 , 10 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 Token token = getPartitioner ( ) . getTokenFactory ( ) . fromString ( state . getValue ( ) ) ; 
 if ( logger _ . isDebugEnabled ( ) ) 
 logger _ . debug ( endpoint + " state normal , token " + token ) ; 
 - updateForeignToken ( token , endpoint ) ; 
 + if ( isClientMode ) 
 + updateForeignTokenUnsafe ( token , endpoint ) ; 
 + else 
 + updateForeignToken ( token , endpoint ) ; 
 replicationStrategy _ . removeObsoletePendingRanges ( ) ; 
 } 
 else if ( STATE _ LEAVING . equals ( stateName ) ) 
 @ @ - 499 , 7 + 530 , 8 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 
 public void onAlive ( InetAddress endpoint , EndPointState state ) 
 { 
 - deliverHints ( endpoint ) ; 
 + if ( ! isClientMode ) 
 + deliverHints ( endpoint ) ; 
 } 
 
 public void onDead ( InetAddress endpoint , EndPointState state ) { } 
 @ @ - 983 , 6 + 1015 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 public void run ( ) 
 { 
 Gossiper . instance ( ) . stop ( ) ; 
 + MessagingService . shutdown ( ) ; 
 logger _ . info ( " DECOMMISSION FINISHED . " ) ; 
 / / let op be responsible for killing the process 
 } 
 @ @ - 1111 , 4 + 1144 , 9 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 { 
 tokenMetadata _ . clearPendingRanges ( ) ; 
 } 
 + 
 + public boolean isClientMode ( ) 
 + { 
 + return isClientMode ; 
 + } 
 }
