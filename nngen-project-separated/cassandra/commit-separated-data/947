BLEU SCORE: 0.10682175159905853

TEST MSG: Make test index names unique
GENERATED MSG: Fix index selectivity comparison

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> index 43de101 . . a7145fc 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> @ @ - 626 , 6 + 626 , 7 @ @ public abstract class CQLTester <nl> } <nl> catch ( Exception e ) <nl> { <nl> + logger . info ( " Error performing schema change " , e ) ; <nl> throw new RuntimeException ( " Error setting schema for test ( query was : " + query + " ) " , e ) ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / index / CustomIndexTest . java b / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> index b1fd992 . . 0b553f4 100644 <nl> - - - a / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> + + + b / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> @ @ - 392 , 30 + 392 , 34 @ @ public class CustomIndexTest extends CQLTester <nl> public void customExpressionsDisallowedInModifications ( ) throws Throwable <nl> { <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; <nl> - createIndex ( String . format ( " CREATE CUSTOM INDEX custom _ index ON % % s ( c ) USING ' % s ' " , StubIndex . class . getName ( ) ) ) ; <nl> + String indexName = currentTable ( ) + " _ custom _ index " ; <nl> + createIndex ( String . format ( " CREATE CUSTOM INDEX % s ON % % s ( c ) USING ' % s ' " , <nl> + indexName , StubIndex . class . getName ( ) ) ) ; <nl> <nl> assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> ModificationStatement . CUSTOM _ EXPRESSIONS _ NOT _ ALLOWED , <nl> QueryValidationException . class , <nl> - " DELETE FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; <nl> + String . format ( " DELETE FROM % % s WHERE expr ( % s , ' foo bar baz ' ) " , indexName ) ) ; <nl> assertInvalidThrowMessage ( Server . CURRENT _ VERSION , <nl> ModificationStatement . CUSTOM _ EXPRESSIONS _ NOT _ ALLOWED , <nl> QueryValidationException . class , <nl> - " UPDATE % s SET d = 0 WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; <nl> + String . format ( " UPDATE % % s SET d = 0 WHERE expr ( % s , ' foo bar baz ' ) " , indexName ) ) ; <nl> } <nl> <nl> @ Test <nl> public void indexSelectionPrefersMostSelectiveIndex ( ) throws Throwable <nl> { <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a ) ) " ) ; <nl> - createIndex ( String . format ( " CREATE CUSTOM INDEX more _ selective ON % % s ( b ) USING ' % s ' " , <nl> + createIndex ( String . format ( " CREATE CUSTOM INDEX % s _ more _ selective ON % % s ( b ) USING ' % s ' " , <nl> + currentTable ( ) , <nl> SettableSelectivityIndex . class . getName ( ) ) ) ; <nl> - createIndex ( String . format ( " CREATE CUSTOM INDEX less _ selective ON % % s ( c ) USING ' % s ' " , <nl> + createIndex ( String . format ( " CREATE CUSTOM INDEX % s _ less _ selective ON % % s ( c ) USING ' % s ' " , <nl> + currentTable ( ) , <nl> SettableSelectivityIndex . class . getName ( ) ) ) ; <nl> SettableSelectivityIndex moreSelective = <nl> - ( SettableSelectivityIndex ) getCurrentColumnFamilyStore ( ) . indexManager . getIndexByName ( " more _ selective " ) ; <nl> + ( SettableSelectivityIndex ) getCurrentColumnFamilyStore ( ) . indexManager . getIndexByName ( currentTable ( ) + " _ more _ selective " ) ; <nl> SettableSelectivityIndex lessSelective = <nl> - ( SettableSelectivityIndex ) getCurrentColumnFamilyStore ( ) . indexManager . getIndexByName ( " less _ selective " ) ; <nl> + ( SettableSelectivityIndex ) getCurrentColumnFamilyStore ( ) . indexManager . getIndexByName ( currentTable ( ) + " _ less _ selective " ) ; <nl> assertEquals ( 0 , moreSelective . searchersProvided ) ; <nl> assertEquals ( 0 , lessSelective . searchersProvided ) ; <nl> <nl> @ @ - 437 , 14 + 441 , 16 @ @ public class CustomIndexTest extends CQLTester <nl> public void customExpressionForcesIndexSelection ( ) throws Throwable <nl> { <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a ) ) " ) ; <nl> - createIndex ( String . format ( " CREATE CUSTOM INDEX more _ selective ON % % s ( b ) USING ' % s ' " , <nl> + createIndex ( String . format ( " CREATE CUSTOM INDEX % s _ more _ selective ON % % s ( b ) USING ' % s ' " , <nl> + currentTable ( ) , <nl> SettableSelectivityIndex . class . getName ( ) ) ) ; <nl> - createIndex ( String . format ( " CREATE CUSTOM INDEX less _ selective ON % % s ( c ) USING ' % s ' " , <nl> + createIndex ( String . format ( " CREATE CUSTOM INDEX % s _ less _ selective ON % % s ( c ) USING ' % s ' " , <nl> + currentTable ( ) , <nl> SettableSelectivityIndex . class . getName ( ) ) ) ; <nl> SettableSelectivityIndex moreSelective = <nl> - ( SettableSelectivityIndex ) getCurrentColumnFamilyStore ( ) . indexManager . getIndexByName ( " more _ selective " ) ; <nl> + ( SettableSelectivityIndex ) getCurrentColumnFamilyStore ( ) . indexManager . getIndexByName ( currentTable ( ) + " _ more _ selective " ) ; <nl> SettableSelectivityIndex lessSelective = <nl> - ( SettableSelectivityIndex ) getCurrentColumnFamilyStore ( ) . indexManager . getIndexByName ( " less _ selective " ) ; <nl> + ( SettableSelectivityIndex ) getCurrentColumnFamilyStore ( ) . indexManager . getIndexByName ( currentTable ( ) + " _ less _ selective " ) ; <nl> assertEquals ( 0 , moreSelective . searchersProvided ) ; <nl> assertEquals ( 0 , lessSelective . searchersProvided ) ; <nl> <nl> @ @ - 456 , 7 + 462 , 7 @ @ public class CustomIndexTest extends CQLTester <nl> assertEquals ( 0 , lessSelective . searchersProvided ) ; <nl> <nl> / / when a custom expression is present , its target index should be preferred <nl> - execute ( " SELECT * FROM % s WHERE b = 0 AND expr ( less _ selective , ' expression ' ) ALLOW FILTERING " ) ; <nl> + execute ( String . format ( " SELECT * FROM % % s WHERE b = 0 AND expr ( % s _ less _ selective , ' expression ' ) ALLOW FILTERING " , currentTable ( ) ) ) ; <nl> assertEquals ( 1 , moreSelective . searchersProvided ) ; <nl> assertEquals ( 1 , lessSelective . searchersProvided ) ; <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 index 43de101 . . a7145fc 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 @ @ - 626 , 6 + 626 , 7 @ @ public abstract class CQLTester 
 } 
 catch ( Exception e ) 
 { 
 + logger . info ( " Error performing schema change " , e ) ; 
 throw new RuntimeException ( " Error setting schema for test ( query was : " + query + " ) " , e ) ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / index / CustomIndexTest . java b / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 index b1fd992 . . 0b553f4 100644 
 - - - a / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 + + + b / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 @ @ - 392 , 30 + 392 , 34 @ @ public class CustomIndexTest extends CQLTester 
 public void customExpressionsDisallowedInModifications ( ) throws Throwable 
 { 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; 
 - createIndex ( String . format ( " CREATE CUSTOM INDEX custom _ index ON % % s ( c ) USING ' % s ' " , StubIndex . class . getName ( ) ) ) ; 
 + String indexName = currentTable ( ) + " _ custom _ index " ; 
 + createIndex ( String . format ( " CREATE CUSTOM INDEX % s ON % % s ( c ) USING ' % s ' " , 
 + indexName , StubIndex . class . getName ( ) ) ) ; 
 
 assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 ModificationStatement . CUSTOM _ EXPRESSIONS _ NOT _ ALLOWED , 
 QueryValidationException . class , 
 - " DELETE FROM % s WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; 
 + String . format ( " DELETE FROM % % s WHERE expr ( % s , ' foo bar baz ' ) " , indexName ) ) ; 
 assertInvalidThrowMessage ( Server . CURRENT _ VERSION , 
 ModificationStatement . CUSTOM _ EXPRESSIONS _ NOT _ ALLOWED , 
 QueryValidationException . class , 
 - " UPDATE % s SET d = 0 WHERE expr ( custom _ index , ' foo bar baz ' ) " ) ; 
 + String . format ( " UPDATE % % s SET d = 0 WHERE expr ( % s , ' foo bar baz ' ) " , indexName ) ) ; 
 } 
 
 @ Test 
 public void indexSelectionPrefersMostSelectiveIndex ( ) throws Throwable 
 { 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a ) ) " ) ; 
 - createIndex ( String . format ( " CREATE CUSTOM INDEX more _ selective ON % % s ( b ) USING ' % s ' " , 
 + createIndex ( String . format ( " CREATE CUSTOM INDEX % s _ more _ selective ON % % s ( b ) USING ' % s ' " , 
 + currentTable ( ) , 
 SettableSelectivityIndex . class . getName ( ) ) ) ; 
 - createIndex ( String . format ( " CREATE CUSTOM INDEX less _ selective ON % % s ( c ) USING ' % s ' " , 
 + createIndex ( String . format ( " CREATE CUSTOM INDEX % s _ less _ selective ON % % s ( c ) USING ' % s ' " , 
 + currentTable ( ) , 
 SettableSelectivityIndex . class . getName ( ) ) ) ; 
 SettableSelectivityIndex moreSelective = 
 - ( SettableSelectivityIndex ) getCurrentColumnFamilyStore ( ) . indexManager . getIndexByName ( " more _ selective " ) ; 
 + ( SettableSelectivityIndex ) getCurrentColumnFamilyStore ( ) . indexManager . getIndexByName ( currentTable ( ) + " _ more _ selective " ) ; 
 SettableSelectivityIndex lessSelective = 
 - ( SettableSelectivityIndex ) getCurrentColumnFamilyStore ( ) . indexManager . getIndexByName ( " less _ selective " ) ; 
 + ( SettableSelectivityIndex ) getCurrentColumnFamilyStore ( ) . indexManager . getIndexByName ( currentTable ( ) + " _ less _ selective " ) ; 
 assertEquals ( 0 , moreSelective . searchersProvided ) ; 
 assertEquals ( 0 , lessSelective . searchersProvided ) ; 
 
 @ @ - 437 , 14 + 441 , 16 @ @ public class CustomIndexTest extends CQLTester 
 public void customExpressionForcesIndexSelection ( ) throws Throwable 
 { 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a ) ) " ) ; 
 - createIndex ( String . format ( " CREATE CUSTOM INDEX more _ selective ON % % s ( b ) USING ' % s ' " , 
 + createIndex ( String . format ( " CREATE CUSTOM INDEX % s _ more _ selective ON % % s ( b ) USING ' % s ' " , 
 + currentTable ( ) , 
 SettableSelectivityIndex . class . getName ( ) ) ) ; 
 - createIndex ( String . format ( " CREATE CUSTOM INDEX less _ selective ON % % s ( c ) USING ' % s ' " , 
 + createIndex ( String . format ( " CREATE CUSTOM INDEX % s _ less _ selective ON % % s ( c ) USING ' % s ' " , 
 + currentTable ( ) , 
 SettableSelectivityIndex . class . getName ( ) ) ) ; 
 SettableSelectivityIndex moreSelective = 
 - ( SettableSelectivityIndex ) getCurrentColumnFamilyStore ( ) . indexManager . getIndexByName ( " more _ selective " ) ; 
 + ( SettableSelectivityIndex ) getCurrentColumnFamilyStore ( ) . indexManager . getIndexByName ( currentTable ( ) + " _ more _ selective " ) ; 
 SettableSelectivityIndex lessSelective = 
 - ( SettableSelectivityIndex ) getCurrentColumnFamilyStore ( ) . indexManager . getIndexByName ( " less _ selective " ) ; 
 + ( SettableSelectivityIndex ) getCurrentColumnFamilyStore ( ) . indexManager . getIndexByName ( currentTable ( ) + " _ less _ selective " ) ; 
 assertEquals ( 0 , moreSelective . searchersProvided ) ; 
 assertEquals ( 0 , lessSelective . searchersProvided ) ; 
 
 @ @ - 456 , 7 + 462 , 7 @ @ public class CustomIndexTest extends CQLTester 
 assertEquals ( 0 , lessSelective . searchersProvided ) ; 
 
 / / when a custom expression is present , its target index should be preferred 
 - execute ( " SELECT * FROM % s WHERE b = 0 AND expr ( less _ selective , ' expression ' ) ALLOW FILTERING " ) ; 
 + execute ( String . format ( " SELECT * FROM % % s WHERE b = 0 AND expr ( % s _ less _ selective , ' expression ' ) ALLOW FILTERING " , currentTable ( ) ) ) ; 
 assertEquals ( 1 , moreSelective . searchersProvided ) ; 
 assertEquals ( 1 , lessSelective . searchersProvided ) ; 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
