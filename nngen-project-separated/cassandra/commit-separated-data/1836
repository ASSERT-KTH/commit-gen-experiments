BLEU SCORE: 0.016932492841722675

TEST MSG: Fix token ( ) + multi - column relation on clustering cols
GENERATED MSG: p / 4443 / 050 _ process _ queued _ xfers

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 09d6d2f . . f2b4469 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 2 . 0 . 13 : <nl> + * Fix combining token ( ) function with multi - column relations on <nl> + clustering columns ( CASSANDRA - 8797 ) <nl> * Make CFS . markReferenced ( ) resistant to bad refcounting ( CASSANDRA - 8829 ) <nl> * Fix StreamTransferTask abort / complete bad refcounting ( CASSANDRA - 8815 ) <nl> * Fix AssertionError when querying a DESC clustering ordered <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Relation . java b / src / java / org / apache / cassandra / cql3 / Relation . java <nl> index 0f1366d . . e7c5f2d 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Relation . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Relation . java <nl> @ @ - 54 , 4 + 54 , 9 @ @ public abstract class Relation { <nl> } <nl> <nl> public abstract boolean isMultiColumn ( ) ; <nl> + <nl> + public boolean isOnToken ( ) <nl> + { <nl> + return false ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / SingleColumnRelation . java b / src / java / org / apache / cassandra / cql3 / SingleColumnRelation . java <nl> index d63493e . . 388d938 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / SingleColumnRelation . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / SingleColumnRelation . java <nl> @ @ - 84 , 6 + 84 , 11 @ @ public class SingleColumnRelation extends Relation <nl> return false ; <nl> } <nl> <nl> + public boolean isOnToken ( ) <nl> + { <nl> + return onToken ; <nl> + } <nl> + <nl> public SingleColumnRelation withNonStrictOperator ( ) <nl> { <nl> switch ( relationType ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index 2fa57b9 . . 59ed6e1 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 1906 , 8 + 1906 , 12 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> Iterator < Name > iter = Iterators . cycle ( cfDef . partitionKeys ( ) ) ; <nl> for ( Relation relation : whereClause ) <nl> { <nl> + if ( ! relation . isOnToken ( ) ) <nl> + continue ; <nl> + <nl> + assert ! relation . isMultiColumn ( ) : " Unexpectedly got multi - column token relation " ; <nl> SingleColumnRelation singleColumnRelation = ( SingleColumnRelation ) relation ; <nl> - if ( singleColumnRelation . onToken & & ! cfDef . get ( singleColumnRelation . getEntity ( ) . prepare ( cfDef . cfm ) ) . equals ( iter . next ( ) ) ) <nl> + if ( ! cfDef . get ( singleColumnRelation . getEntity ( ) . prepare ( cfDef . cfm ) ) . equals ( iter . next ( ) ) ) <nl> throw new InvalidRequestException ( String . format ( " The token function arguments must be in the partition key order : % s " , <nl> Joiner . on ( ' , ' ) . join ( cfDef . partitionKeys ( ) ) ) ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java b / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java <nl> index 9199862 . . c222f35 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java <nl> @ @ - 47 , 6 + 47 , 7 @ @ public class SelectWithTokenFunctionTest <nl> executeSchemaChange ( " CREATE TABLE IF NOT EXISTS % s . single _ partition ( a int PRIMARY KEY , b text ) " ) ; <nl> executeSchemaChange ( " CREATE TABLE IF NOT EXISTS % s . compound _ partition ( a int , b text , PRIMARY KEY ( ( a , b ) ) ) " ) ; <nl> executeSchemaChange ( " CREATE TABLE IF NOT EXISTS % s . single _ clustering ( a int , b text , PRIMARY KEY ( a , b ) ) " ) ; <nl> + executeSchemaChange ( " CREATE TABLE IF NOT EXISTS % s . compound _ with _ clustering ( a int , b int , c int , d int , PRIMARY KEY ( ( a , b ) , c , d ) ) " ) ; <nl> clientState = ClientState . forInternalCalls ( ) ; <nl> } <nl> <nl> @ @ - 168 , 4 + 169 , 14 @ @ public class SelectWithTokenFunctionTest <nl> { <nl> execute ( " SELECT * FROM % s . compound _ partition WHERE token ( a ) > token ( 0 ) and token ( b ) > token ( ' c ' ) " ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testTokenFunctionWithCompoundPartitionAndClusteringCols ( ) throws Throwable <nl> + { <nl> + / / just test that the queries don ' t error <nl> + execute ( " SELECT * FROM % s . compound _ with _ clustering WHERE token ( a , b ) > token ( 0 , 0 ) AND c > 10 ALLOW FILTERING ; " ) ; <nl> + execute ( " SELECT * FROM % s . compound _ with _ clustering WHERE c > 10 AND token ( a , b ) > token ( 0 , 0 ) ALLOW FILTERING ; " ) ; <nl> + execute ( " SELECT * FROM % s . compound _ with _ clustering WHERE token ( a , b ) > token ( 0 , 0 ) AND ( c , d ) > ( 0 , 0 ) ALLOW FILTERING ; " ) ; <nl> + execute ( " SELECT * FROM % s . compound _ with _ clustering WHERE ( c , d ) > ( 0 , 0 ) AND token ( a , b ) > token ( 0 , 0 ) ALLOW FILTERING ; " ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index 3bef142 . . 5f99e45 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 2690 , 7 + 2690 , 7 @ @ def setup _ cqlruleset ( cqlmodule ) : <nl> def main ( options , hostname , port ) : <nl> setup _ cqlruleset ( options . cqlmodule ) <nl> <nl> - if os . path . exists ( HISTORY ) and readline is not None : <nl> + if os . path . exists ( HISTORY ) and readline is not None and readline . get _ history _ length ( ) > 0 : <nl> readline . read _ history _ file ( HISTORY ) <nl> delims = readline . get _ completer _ delims ( ) <nl> delims . replace ( " ' " , " " )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 09d6d2f . . f2b4469 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 2 . 0 . 13 : 
 + * Fix combining token ( ) function with multi - column relations on 
 + clustering columns ( CASSANDRA - 8797 ) 
 * Make CFS . markReferenced ( ) resistant to bad refcounting ( CASSANDRA - 8829 ) 
 * Fix StreamTransferTask abort / complete bad refcounting ( CASSANDRA - 8815 ) 
 * Fix AssertionError when querying a DESC clustering ordered 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Relation . java b / src / java / org / apache / cassandra / cql3 / Relation . java 
 index 0f1366d . . e7c5f2d 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Relation . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Relation . java 
 @ @ - 54 , 4 + 54 , 9 @ @ public abstract class Relation { 
 } 
 
 public abstract boolean isMultiColumn ( ) ; 
 + 
 + public boolean isOnToken ( ) 
 + { 
 + return false ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / SingleColumnRelation . java b / src / java / org / apache / cassandra / cql3 / SingleColumnRelation . java 
 index d63493e . . 388d938 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / SingleColumnRelation . java 
 + + + b / src / java / org / apache / cassandra / cql3 / SingleColumnRelation . java 
 @ @ - 84 , 6 + 84 , 11 @ @ public class SingleColumnRelation extends Relation 
 return false ; 
 } 
 
 + public boolean isOnToken ( ) 
 + { 
 + return onToken ; 
 + } 
 + 
 public SingleColumnRelation withNonStrictOperator ( ) 
 { 
 switch ( relationType ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index 2fa57b9 . . 59ed6e1 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 1906 , 8 + 1906 , 12 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 Iterator < Name > iter = Iterators . cycle ( cfDef . partitionKeys ( ) ) ; 
 for ( Relation relation : whereClause ) 
 { 
 + if ( ! relation . isOnToken ( ) ) 
 + continue ; 
 + 
 + assert ! relation . isMultiColumn ( ) : " Unexpectedly got multi - column token relation " ; 
 SingleColumnRelation singleColumnRelation = ( SingleColumnRelation ) relation ; 
 - if ( singleColumnRelation . onToken & & ! cfDef . get ( singleColumnRelation . getEntity ( ) . prepare ( cfDef . cfm ) ) . equals ( iter . next ( ) ) ) 
 + if ( ! cfDef . get ( singleColumnRelation . getEntity ( ) . prepare ( cfDef . cfm ) ) . equals ( iter . next ( ) ) ) 
 throw new InvalidRequestException ( String . format ( " The token function arguments must be in the partition key order : % s " , 
 Joiner . on ( ' , ' ) . join ( cfDef . partitionKeys ( ) ) ) ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java b / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java 
 index 9199862 . . c222f35 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java 
 @ @ - 47 , 6 + 47 , 7 @ @ public class SelectWithTokenFunctionTest 
 executeSchemaChange ( " CREATE TABLE IF NOT EXISTS % s . single _ partition ( a int PRIMARY KEY , b text ) " ) ; 
 executeSchemaChange ( " CREATE TABLE IF NOT EXISTS % s . compound _ partition ( a int , b text , PRIMARY KEY ( ( a , b ) ) ) " ) ; 
 executeSchemaChange ( " CREATE TABLE IF NOT EXISTS % s . single _ clustering ( a int , b text , PRIMARY KEY ( a , b ) ) " ) ; 
 + executeSchemaChange ( " CREATE TABLE IF NOT EXISTS % s . compound _ with _ clustering ( a int , b int , c int , d int , PRIMARY KEY ( ( a , b ) , c , d ) ) " ) ; 
 clientState = ClientState . forInternalCalls ( ) ; 
 } 
 
 @ @ - 168 , 4 + 169 , 14 @ @ public class SelectWithTokenFunctionTest 
 { 
 execute ( " SELECT * FROM % s . compound _ partition WHERE token ( a ) > token ( 0 ) and token ( b ) > token ( ' c ' ) " ) ; 
 } 
 + 
 + @ Test 
 + public void testTokenFunctionWithCompoundPartitionAndClusteringCols ( ) throws Throwable 
 + { 
 + / / just test that the queries don ' t error 
 + execute ( " SELECT * FROM % s . compound _ with _ clustering WHERE token ( a , b ) > token ( 0 , 0 ) AND c > 10 ALLOW FILTERING ; " ) ; 
 + execute ( " SELECT * FROM % s . compound _ with _ clustering WHERE c > 10 AND token ( a , b ) > token ( 0 , 0 ) ALLOW FILTERING ; " ) ; 
 + execute ( " SELECT * FROM % s . compound _ with _ clustering WHERE token ( a , b ) > token ( 0 , 0 ) AND ( c , d ) > ( 0 , 0 ) ALLOW FILTERING ; " ) ; 
 + execute ( " SELECT * FROM % s . compound _ with _ clustering WHERE ( c , d ) > ( 0 , 0 ) AND token ( a , b ) > token ( 0 , 0 ) ALLOW FILTERING ; " ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / bin / cqlsh b / bin / cqlsh 
 index 3bef142 . . 5f99e45 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 2690 , 7 + 2690 , 7 @ @ def setup _ cqlruleset ( cqlmodule ) : 
 def main ( options , hostname , port ) : 
 setup _ cqlruleset ( options . cqlmodule ) 
 
 - if os . path . exists ( HISTORY ) and readline is not None : 
 + if os . path . exists ( HISTORY ) and readline is not None and readline . get _ history _ length ( ) > 0 : 
 readline . read _ history _ file ( HISTORY ) 
 delims = readline . get _ completer _ delims ( ) 
 delims . replace ( " ' " , " " )
