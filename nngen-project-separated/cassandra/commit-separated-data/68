BLEU SCORE: 0.06567274736060397

TEST MSG: Upgrade to 4 . 0 fails with NullPointerException
GENERATED MSG: merge from 0 . 7

TEST DIFF (one line): diff - - git a / doc / source / cql / ddl . rst b / doc / source / cql / ddl . rst <nl> index 2d9a50a . . 945e301 100644 <nl> - - - a / doc / source / cql / ddl . rst <nl> + + + b / doc / source / cql / ddl . rst <nl> @ @ - 463 , 7 + 463 , 7 @ @ A table supports the following options : <nl> | ` ` speculative _ retry ` ` | * simple * | 99PERCENTILE | : ref : ` Speculative retry options | <nl> | | | | < speculative - retry - options > ` . | <nl> + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - + - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + <nl> - | ` ` speculative _ write _ threshold ` ` | * simple * | 99PERCENTILE | : ref : ` Speculative retry options | <nl> + | ` ` additional _ write _ policy ` ` | * simple * | 99PERCENTILE | : ref : ` Speculative retry options | <nl> | | | | < speculative - retry - options > ` . | <nl> + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - + - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + <nl> | ` ` gc _ grace _ seconds ` ` | * simple * | 864000 | Time to wait before garbage collecting tombstones | <nl> @ @ - 496 , 7 + 496 , 7 @ @ Speculative retry options <nl> By default , Cassandra read coordinators only query as many replicas as necessary to satisfy <nl> consistency levels : one for consistency level ` ` ONE ` ` , a quorum for ` ` QUORUM ` ` , and so on . <nl> ` ` speculative _ retry ` ` determines when coordinators may query additional replicas , which is useful <nl> - when replicas are slow or unresponsive . ` ` speculative _ write _ threshold ` ` specifies the threshold at which <nl> + when replicas are slow or unresponsive . ` ` additional _ write _ policy ` ` specifies the threshold at which <nl> a cheap quorum write will be upgraded to include transient replicas . The following are legal values ( case - insensitive ) : <nl> <nl> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index 405e88e . . 1d17978 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 49 , 7 + 49 , 7 @ @ class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : <nl> ( ' max _ index _ interval ' , None ) , <nl> ( ' default _ time _ to _ live ' , None ) , <nl> ( ' speculative _ retry ' , None ) , <nl> - ( ' speculative _ write _ threshold ' , None ) , <nl> + ( ' additional _ write _ policy ' , None ) , <nl> ( ' memtable _ flush _ period _ in _ ms ' , None ) , <nl> ( ' cdc ' , None ) , <nl> ( ' read _ repair ' , None ) , <nl> diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ completion . py b / pylib / cqlshlib / test / test _ cqlsh _ completion . py <nl> index 794c591 . . db18e3f 100644 <nl> - - - a / pylib / cqlshlib / test / test _ cqlsh _ completion . py <nl> + + + b / pylib / cqlshlib / test / test _ cqlsh _ completion . py <nl> @ @ - 594 , 7 + 594 , 7 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : <nl> ' memtable _ flush _ period _ in _ ms ' , <nl> ' CLUSTERING ' , <nl> ' COMPACT ' , ' caching ' , ' comment ' , <nl> - ' min _ index _ interval ' , ' speculative _ retry ' , ' speculative _ write _ threshold ' , ' cdc ' ] ) <nl> + ' min _ index _ interval ' , ' speculative _ retry ' , ' additional _ write _ policy ' , ' cdc ' ] ) <nl> self . trycompletions ( prefix + ' new _ table ( col _ a int PRIMARY KEY ) WITH ' , <nl> choices = [ ' bloom _ filter _ fp _ chance ' , ' compaction ' , <nl> ' compression ' , <nl> @ @ - 603 , 7 + 603 , 7 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : <nl> ' memtable _ flush _ period _ in _ ms ' , <nl> ' CLUSTERING ' , <nl> ' COMPACT ' , ' caching ' , ' comment ' , <nl> - ' min _ index _ interval ' , ' speculative _ retry ' , ' speculative _ write _ threshold ' , ' cdc ' ] ) <nl> + ' min _ index _ interval ' , ' speculative _ retry ' , ' additional _ write _ policy ' , ' cdc ' ] ) <nl> self . trycompletions ( prefix + ' new _ table ( col _ a int PRIMARY KEY ) WITH bloom _ filter _ fp _ chance ' , <nl> immediate = ' = ' ) <nl> self . trycompletions ( prefix + ' new _ table ( col _ a int PRIMARY KEY ) WITH bloom _ filter _ fp _ chance = ' , <nl> @ @ - 650 , 7 + 650 , 7 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : <nl> ' memtable _ flush _ period _ in _ ms ' , <nl> ' CLUSTERING ' , <nl> ' COMPACT ' , ' caching ' , ' comment ' , <nl> - ' min _ index _ interval ' , ' speculative _ retry ' , ' speculative _ write _ threshold ' , ' cdc ' ] ) <nl> + ' min _ index _ interval ' , ' speculative _ retry ' , ' additional _ write _ policy ' , ' cdc ' ] ) <nl> self . trycompletions ( prefix + " new _ table ( col _ a int PRIMARY KEY ) WITH compaction = " <nl> + " { ' class ' : ' DateTieredCompactionStrategy ' , ' " , <nl> choices = [ ' base _ time _ seconds ' , ' max _ sstable _ age _ days ' , <nl> diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ output . py b / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> index 46546f0 . . fb9fcd6 100644 <nl> - - - a / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> + + + b / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> @ @ - 623 , 7 + 623 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> AND memtable _ flush _ period _ in _ ms = 0 <nl> AND min _ index _ interval = 128 <nl> AND speculative _ retry = ' 99PERCENTILE ' <nl> - AND speculative _ write _ threshold = ' 99PERCENTILE ' ; <nl> + AND additional _ write _ policy = ' 99PERCENTILE ' ; <nl> <nl> " " " % quote _ name ( get _ keyspace ( ) ) ) <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / schema / TableAttributes . java b / src / java / org / apache / cassandra / cql3 / statements / schema / TableAttributes . java <nl> index 4e66307 . . 126e6d7 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / schema / TableAttributes . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / schema / TableAttributes . java <nl> @ @ - 128 , 8 + 128 , 8 @ @ public final class TableAttributes extends PropertyDefinitions <nl> if ( hasOption ( Option . SPECULATIVE _ RETRY ) ) <nl> builder . speculativeRetry ( SpeculativeRetryPolicy . fromString ( getString ( Option . SPECULATIVE _ RETRY ) ) ) ; <nl> <nl> - if ( hasOption ( Option . SPECULATIVE _ WRITE _ THRESHOLD ) ) <nl> - builder . speculativeWriteThreshold ( SpeculativeRetryPolicy . fromString ( getString ( Option . SPECULATIVE _ WRITE _ THRESHOLD ) ) ) ; <nl> + if ( hasOption ( Option . ADDITIONAL _ WRITE _ POLICY ) ) <nl> + builder . additionalWritePolicy ( SpeculativeRetryPolicy . fromString ( getString ( Option . ADDITIONAL _ WRITE _ POLICY ) ) ) ; <nl> <nl> if ( hasOption ( Option . CRC _ CHECK _ CHANCE ) ) <nl> builder . crcCheckChance ( getDouble ( Option . CRC _ CHECK _ CHANCE ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index bc69026 . . 877a3c5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 204 , 7 + 204 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> public final TableMetrics metric ; <nl> public volatile long sampleReadLatencyNanos ; <nl> - public volatile long transientWriteLatencyNanos ; <nl> + public volatile long additionalWriteLatencyNanos ; <nl> <nl> private final CassandraTableWriteHandler writeHandler ; <nl> private final CassandraStreamManager streamManager ; <nl> @ @ - 384 , 7 + 384 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> metric = new TableMetrics ( this ) ; <nl> fileIndexGenerator . set ( generation ) ; <nl> sampleReadLatencyNanos = TimeUnit . MILLISECONDS . toNanos ( DatabaseDescriptor . getReadRpcTimeout ( ) / 2 ) ; <nl> - transientWriteLatencyNanos = TimeUnit . MILLISECONDS . toNanos ( DatabaseDescriptor . getWriteRpcTimeout ( ) / 2 ) ; <nl> + additionalWriteLatencyNanos = TimeUnit . MILLISECONDS . toNanos ( DatabaseDescriptor . getWriteRpcTimeout ( ) / 2 ) ; <nl> <nl> logger . info ( " Initializing { } . { } " , keyspace . getName ( ) , name ) ; <nl> <nl> @ @ - 455 , 7 + 455 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> try <nl> { <nl> sampleReadLatencyNanos = metadata ( ) . params . speculativeRetry . calculateThreshold ( metric . coordinatorReadLatency . getSnapshot ( ) , sampleReadLatencyNanos ) ; <nl> - transientWriteLatencyNanos = metadata ( ) . params . speculativeWriteThreshold . calculateThreshold ( metric . coordinatorWriteLatency . getSnapshot ( ) , transientWriteLatencyNanos ) ; <nl> + additionalWriteLatencyNanos = metadata ( ) . params . additionalWritePolicy . calculateThreshold ( metric . coordinatorWriteLatency . getSnapshot ( ) , additionalWriteLatencyNanos ) ; <nl> } <nl> catch ( Throwable e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / TableCQLHelper . java b / src / java / org / apache / cassandra / db / TableCQLHelper . java <nl> index f97bebc . . 21ae560 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TableCQLHelper . java <nl> + + + b / src / java / org / apache / cassandra / db / TableCQLHelper . java <nl> @ @ - 310 , 7 + 310 , 7 @ @ public class TableCQLHelper <nl> builder . append ( " \ n \ tAND max _ index _ interval = " ) . append ( tableParams . maxIndexInterval ) ; <nl> builder . append ( " \ n \ tAND memtable _ flush _ period _ in _ ms = " ) . append ( tableParams . memtableFlushPeriodInMs ) ; <nl> builder . append ( " \ n \ tAND speculative _ retry = ' " ) . append ( tableParams . speculativeRetry ) . append ( " ' " ) ; <nl> - builder . append ( " \ n \ tAND speculative _ write _ threshold = ' " ) . append ( tableParams . speculativeWriteThreshold ) . append ( " ' " ) ; <nl> + builder . append ( " \ n \ tAND additional _ write _ policy = ' " ) . append ( tableParams . additionalWritePolicy ) . append ( " ' " ) ; <nl> builder . append ( " \ n \ tAND comment = " ) . append ( singleQuote ( tableParams . comment ) ) ; <nl> builder . append ( " \ n \ tAND caching = " ) . append ( toCQL ( tableParams . caching . asMap ( ) ) ) ; <nl> builder . append ( " \ n \ tAND compaction = " ) . append ( toCQL ( tableParams . compaction . asMap ( ) ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / metrics / KeyspaceMetrics . java b / src / java / org / apache / cassandra / metrics / KeyspaceMetrics . java <nl> index f1df026 . . ef3338e 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / KeyspaceMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / KeyspaceMetrics . java <nl> @ @ - 104 , 7 + 104 , 7 @ @ public class KeyspaceMetrics <nl> / * * Needed to speculate , but didn ' t have enough replicas * * / <nl> public final Counter speculativeInsufficientReplicas ; <nl> / * * Needed to write to a transient replica to satisfy quorum * * / <nl> - public final Counter speculativeWrites ; <nl> + public final Counter additionalWrites ; <nl> / * * Number of started repairs as coordinator on this keyspace * / <nl> public final Counter repairsStarted ; <nl> / * * Number of completed repairs as coordinator on this keyspace * / <nl> @ @ - 292 , 7 + 292 , 7 @ @ public class KeyspaceMetrics <nl> speculativeRetries = createKeyspaceCounter ( " SpeculativeRetries " , metric - > metric . speculativeRetries . getCount ( ) ) ; <nl> speculativeFailedRetries = createKeyspaceCounter ( " SpeculativeFailedRetries " , metric - > metric . speculativeFailedRetries . getCount ( ) ) ; <nl> speculativeInsufficientReplicas = createKeyspaceCounter ( " SpeculativeInsufficientReplicas " , metric - > metric . speculativeInsufficientReplicas . getCount ( ) ) ; <nl> - speculativeWrites = createKeyspaceCounter ( " SpeculativeWrites " , metric - > metric . speculativeWrites . getCount ( ) ) ; <nl> + additionalWrites = createKeyspaceCounter ( " AdditionalWrites " , metric - > metric . additionalWrites . getCount ( ) ) ; <nl> repairsStarted = createKeyspaceCounter ( " RepairJobsStarted " , metric - > metric . repairsStarted . getCount ( ) ) ; <nl> repairsCompleted = createKeyspaceCounter ( " RepairJobsCompleted " , metric - > metric . repairsCompleted . getCount ( ) ) ; <nl> repairTime = Metrics . timer ( factory . createMetricName ( " RepairTime " ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / metrics / TableMetrics . java b / src / java / org / apache / cassandra / metrics / TableMetrics . java <nl> index 52c50b8 . . 41771d1 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / TableMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / TableMetrics . java <nl> @ @ - 214 , 8 + 214 , 8 @ @ public class TableMetrics <nl> public final Counter speculativeInsufficientReplicas ; <nl> public final Gauge < Long > speculativeSampleLatencyNanos ; <nl> <nl> - public final Counter speculativeWrites ; <nl> - public final Gauge < Long > speculativeWriteLatencyNanos ; <nl> + public final Counter additionalWrites ; <nl> + public final Gauge < Long > additionalWriteLatencyNanos ; <nl> <nl> / * * <nl> * Metrics for inconsistencies detected between repaired data sets across replicas . These <nl> @ @ - 843 , 8 + 843 , 8 @ @ public class TableMetrics <nl> speculativeInsufficientReplicas = createTableCounter ( " SpeculativeInsufficientReplicas " ) ; <nl> speculativeSampleLatencyNanos = createTableGauge ( " SpeculativeSampleLatencyNanos " , ( ) - > cfs . sampleReadLatencyNanos ) ; <nl> <nl> - speculativeWrites = createTableCounter ( " SpeculativeWrites " ) ; <nl> - speculativeWriteLatencyNanos = createTableGauge ( " SpeculativeWriteLatencyNanos " , ( ) - > cfs . transientWriteLatencyNanos ) ; <nl> + additionalWrites = createTableCounter ( " AdditionalWrites " ) ; <nl> + additionalWriteLatencyNanos = createTableGauge ( " AdditionalWriteLatencyNanos " , ( ) - > cfs . additionalWriteLatencyNanos ) ; <nl> <nl> keyCacheHitRate = Metrics . register ( factory . createMetricName ( " KeyCacheHitRate " ) , <nl> aliasFactory . createMetricName ( " KeyCacheHitRate " ) , <nl> diff - - git a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> index 22a8c39 . . d2abc03 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> @ @ - 137 , 7 + 137 , 7 @ @ public final class SchemaKeyspace <nl> + " min _ index _ interval int , " <nl> + " read _ repair _ chance double , " / / no longer used , left for drivers ' sake <nl> + " speculative _ retry text , " <nl> - + " speculative _ write _ threshold text , " <nl> + + " additional _ write _ policy text , " <nl> + " cdc boolean , " <nl> + " read _ repair text , " <nl> + " PRIMARY KEY ( ( keyspace _ name ) , table _ name ) ) " ) ; <nl> @ @ - 204 , 7 + 204 , 7 @ @ public final class SchemaKeyspace <nl> + " min _ index _ interval int , " <nl> + " read _ repair _ chance double , " / / no longer used , left for drivers ' sake <nl> + " speculative _ retry text , " <nl> - + " speculative _ write _ threshold text , " <nl> + + " additional _ write _ policy text , " <nl> + " cdc boolean , " <nl> + " read _ repair text , " <nl> + " PRIMARY KEY ( ( keyspace _ name ) , view _ name ) ) " ) ; <nl> @ @ - 565 , 7 + 565 , 7 @ @ public final class SchemaKeyspace <nl> . add ( " min _ index _ interval " , params . minIndexInterval ) <nl> . add ( " read _ repair _ chance " , 0 . 0 ) / / no longer used , left for drivers ' sake <nl> . add ( " speculative _ retry " , params . speculativeRetry . toString ( ) ) <nl> - . add ( " speculative _ write _ threshold " , params . speculativeWriteThreshold . toString ( ) ) <nl> + . add ( " additional _ write _ policy " , params . additionalWritePolicy . toString ( ) ) <nl> . add ( " crc _ check _ chance " , params . crcCheckChance ) <nl> . add ( " caching " , params . caching . asMap ( ) ) <nl> . add ( " compaction " , params . compaction . asMap ( ) ) <nl> @ @ - 994 , 7 + 994 , 9 @ @ public final class SchemaKeyspace <nl> . minIndexInterval ( row . getInt ( " min _ index _ interval " ) ) <nl> . crcCheckChance ( row . getDouble ( " crc _ check _ chance " ) ) <nl> . speculativeRetry ( SpeculativeRetryPolicy . fromString ( row . getString ( " speculative _ retry " ) ) ) <nl> - . speculativeWriteThreshold ( SpeculativeRetryPolicy . fromString ( row . getString ( " speculative _ write _ threshold " ) ) ) <nl> + . additionalWritePolicy ( row . has ( " additional _ write _ policy " ) ? <nl> + SpeculativeRetryPolicy . fromString ( row . getString ( " additional _ write _ policy " ) ) : <nl> + SpeculativeRetryPolicy . fromString ( " 99PERCENTILE " ) ) <nl> . cdc ( row . has ( " cdc " ) & & row . getBoolean ( " cdc " ) ) <nl> . readRepair ( getReadRepairStrategy ( row ) ) <nl> . build ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / schema / TableMetadata . java b / src / java / org / apache / cassandra / schema / TableMetadata . java <nl> index 10edf4d . . 02b851b 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / TableMetadata . java <nl> + + + b / src / java / org / apache / cassandra / schema / TableMetadata . java <nl> @ @ - 834 , 9 + 834 , 9 @ @ public final class TableMetadata <nl> return this ; <nl> } <nl> <nl> - public Builder speculativeWriteThreshold ( SpeculativeRetryPolicy val ) <nl> + public Builder additionalWritePolicy ( SpeculativeRetryPolicy val ) <nl> { <nl> - params . speculativeWriteThreshold ( val ) ; <nl> + params . additionalWritePolicy ( val ) ; <nl> return this ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / schema / TableParams . java b / src / java / org / apache / cassandra / schema / TableParams . java <nl> index 0bba5e1 . . 7c3eaa2 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / TableParams . java <nl> + + + b / src / java / org / apache / cassandra / schema / TableParams . java <nl> @ @ - 51 , 7 + 51 , 7 @ @ public final class TableParams <nl> MEMTABLE _ FLUSH _ PERIOD _ IN _ MS , <nl> MIN _ INDEX _ INTERVAL , <nl> SPECULATIVE _ RETRY , <nl> - SPECULATIVE _ WRITE _ THRESHOLD , <nl> + ADDITIONAL _ WRITE _ POLICY , <nl> CRC _ CHECK _ CHANCE , <nl> CDC , <nl> READ _ REPAIR ; <nl> @ @ - 72 , 7 + 72 , 7 @ @ public final class TableParams <nl> public final int minIndexInterval ; <nl> public final int maxIndexInterval ; <nl> public final SpeculativeRetryPolicy speculativeRetry ; <nl> - public final SpeculativeRetryPolicy speculativeWriteThreshold ; <nl> + public final SpeculativeRetryPolicy additionalWritePolicy ; <nl> public final CachingParams caching ; <nl> public final CompactionParams compaction ; <nl> public final CompressionParams compression ; <nl> @ @ - 93 , 7 + 93 , 7 @ @ public final class TableParams <nl> minIndexInterval = builder . minIndexInterval ; <nl> maxIndexInterval = builder . maxIndexInterval ; <nl> speculativeRetry = builder . speculativeRetry ; <nl> - speculativeWriteThreshold = builder . speculativeWriteThreshold ; <nl> + additionalWritePolicy = builder . additionalWritePolicy ; <nl> caching = builder . caching ; <nl> compaction = builder . compaction ; <nl> compression = builder . compression ; <nl> @ @ - 121 , 7 + 121 , 7 @ @ public final class TableParams <nl> . memtableFlushPeriodInMs ( params . memtableFlushPeriodInMs ) <nl> . minIndexInterval ( params . minIndexInterval ) <nl> . speculativeRetry ( params . speculativeRetry ) <nl> - . speculativeWriteThreshold ( params . speculativeWriteThreshold ) <nl> + . additionalWritePolicy ( params . additionalWritePolicy ) <nl> . extensions ( params . extensions ) <nl> . cdc ( params . cdc ) <nl> . readRepair ( params . readRepair ) ; <nl> @ @ - 264 , 7 + 264 , 7 @ @ public final class TableParams <nl> private int minIndexInterval = 128 ; <nl> private int maxIndexInterval = 2048 ; <nl> private SpeculativeRetryPolicy speculativeRetry = PercentileSpeculativeRetryPolicy . NINETY _ NINE _ P ; <nl> - private SpeculativeRetryPolicy speculativeWriteThreshold = PercentileSpeculativeRetryPolicy . NINETY _ NINE _ P ; <nl> + private SpeculativeRetryPolicy additionalWritePolicy = PercentileSpeculativeRetryPolicy . NINETY _ NINE _ P ; <nl> private CachingParams caching = CachingParams . DEFAULT ; <nl> private CompactionParams compaction = CompactionParams . DEFAULT ; <nl> private CompressionParams compression = CompressionParams . DEFAULT ; <nl> @ @ - 335 , 9 + 335 , 9 @ @ public final class TableParams <nl> return this ; <nl> } <nl> <nl> - public Builder speculativeWriteThreshold ( SpeculativeRetryPolicy val ) <nl> + public Builder additionalWritePolicy ( SpeculativeRetryPolicy val ) <nl> { <nl> - speculativeWriteThreshold = val ; <nl> + additionalWritePolicy = val ; <nl> return this ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java b / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java <nl> index 7f51ae7 . . 1470cad 100644 <nl> - - - a / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java <nl> + + + b / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java <nl> @ @ - 298 , 7 + 298 , 7 @ @ public abstract class AbstractWriteResponseHandler < T > implements IAsyncCallbackW <nl> . map ( Schema . instance : : getColumnFamilyStoreInstance ) <nl> . collect ( Collectors . toList ( ) ) ; <nl> for ( ColumnFamilyStore cf : cfs ) <nl> - timeout = Math . min ( timeout , cf . transientWriteLatencyNanos ) ; <nl> + timeout = Math . min ( timeout , cf . additionalWriteLatencyNanos ) ; <nl> <nl> / / no latency information , or we ' re overloaded <nl> if ( timeout > TimeUnit . MILLISECONDS . toNanos ( mutation . getTimeout ( ) ) ) <nl> @ @ - 309 , 7 + 309 , 7 @ @ public abstract class AbstractWriteResponseHandler < T > implements IAsyncCallbackW <nl> if ( ! condition . await ( timeout , TimeUnit . NANOSECONDS ) ) <nl> { <nl> for ( ColumnFamilyStore cf : cfs ) <nl> - cf . metric . speculativeWrites . inc ( ) ; <nl> + cf . metric . additionalWrites . inc ( ) ; <nl> <nl> writePerformer . apply ( mutation , replicaPlan . withContact ( uncontacted ) , <nl> ( AbstractWriteResponseHandler < IMutation > ) this , <nl> diff - - git a / src / java / org / apache / cassandra / service / reads / repair / BlockingReadRepair . java b / src / java / org / apache / cassandra / service / reads / repair / BlockingReadRepair . java <nl> index 938abaf . . 8016b89 100644 <nl> - - - a / src / java / org / apache / cassandra / service / reads / repair / BlockingReadRepair . java <nl> + + + b / src / java / org / apache / cassandra / service / reads / repair / BlockingReadRepair . java <nl> @ @ - 74 , 7 + 74 , 7 @ @ public class BlockingReadRepair < E extends Endpoints < E > , P extends ReplicaPlan . Fo <nl> { <nl> for ( BlockingPartitionRepair repair : repairs ) <nl> { <nl> - repair . maybeSendAdditionalWrites ( cfs . transientWriteLatencyNanos , TimeUnit . NANOSECONDS ) ; <nl> + repair . maybeSendAdditionalWrites ( cfs . additionalWriteLatencyNanos , TimeUnit . NANOSECONDS ) ; <nl> } <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / TableCQLHelperTest . java b / test / unit / org / apache / cassandra / db / TableCQLHelperTest . java <nl> index fff567b . . a1cae54 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / TableCQLHelperTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / TableCQLHelperTest . java <nl> @ @ - 256 , 7 + 256 , 7 @ @ public class TableCQLHelperTest extends CQLTester <nl> . maxIndexInterval ( 7 ) <nl> . memtableFlushPeriod ( 8 ) <nl> . speculativeRetry ( AlwaysSpeculativeRetryPolicy . INSTANCE ) <nl> - . speculativeWriteThreshold ( NeverSpeculativeRetryPolicy . INSTANCE ) <nl> + . additionalWritePolicy ( NeverSpeculativeRetryPolicy . INSTANCE ) <nl> . extensions ( ImmutableMap . of ( " ext1 " , ByteBuffer . wrap ( " val1 " . getBytes ( ) ) ) ) <nl> . recordColumnDrop ( ColumnMetadata . regularColumn ( keyspace , table , " reg1 " , AsciiType . instance ) , <nl> FBUtilities . timestampMicros ( ) ) ; <nl> @ @ - 274 , 7 + 274 , 7 @ @ public class TableCQLHelperTest extends CQLTester <nl> " \ tAND max _ index _ interval = 7 \ n " + <nl> " \ tAND memtable _ flush _ period _ in _ ms = 8 \ n " + <nl> " \ tAND speculative _ retry = ' ALWAYS ' \ n " + <nl> - " \ tAND speculative _ write _ threshold = ' NEVER ' \ n " + <nl> + " \ tAND additional _ write _ policy = ' NEVER ' \ n " + <nl> " \ tAND comment = ' comment ' \ n " + <nl> " \ tAND caching = { ' keys ' : ' ALL ' , ' rows _ per _ partition ' : ' NONE ' } \ n " + <nl> " \ tAND compaction = { ' max _ threshold ' : ' 32 ' , ' min _ threshold ' : ' 4 ' , ' sstable _ size _ in _ mb ' : ' 1 ' , ' class ' : ' org . apache . cassandra . db . compaction . LeveledCompactionStrategy ' } \ n " + <nl> diff - - git a / test / unit / org / apache / cassandra / service / reads / repair / AbstractReadRepairTest . java b / test / unit / org / apache / cassandra / service / reads / repair / AbstractReadRepairTest . java <nl> index 5115581 . . 68afedc 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / reads / repair / AbstractReadRepairTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / reads / repair / AbstractReadRepairTest . java <nl> @ @ - 205 , 7 + 205 , 7 @ @ public abstract class AbstractReadRepairTest <nl> cfs = ks . getColumnFamilyStore ( " tbl " ) ; <nl> <nl> cfs . sampleReadLatencyNanos = 0 ; <nl> - cfs . transientWriteLatencyNanos = 0 ; <nl> + cfs . additionalWriteLatencyNanos = 0 ; <nl> <nl> target1 = InetAddressAndPort . getByName ( " 127 . 0 . 0 . 255 " ) ; <nl> target2 = InetAddressAndPort . getByName ( " 127 . 0 . 0 . 254 " ) ; <nl> @ @ - 243 , 7 + 243 , 7 @ @ public abstract class AbstractReadRepairTest <nl> assert configured : " configureClass must be called in a @ BeforeClass method " ; <nl> <nl> cfs . sampleReadLatencyNanos = 0 ; <nl> - cfs . transientWriteLatencyNanos = 0 ; <nl> + cfs . additionalWriteLatencyNanos = 0 ; <nl> } <nl> <nl> static ReplicaPlan . ForRangeRead replicaPlan ( ConsistencyLevel consistencyLevel , EndpointsForRange replicas )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index eec904a . . 982454c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 59 , 6 + 59 , 8 @ @ <nl> the old ones ( CASSANDRA - 1644 ) <nl> * upgrade to Thrift 0 . 5 ( CASSANDRA - 1367 ) <nl> * renamed CL . DCQUORUM to LOCAL _ QUORUM and DCQUORUMSYNC to EACH _ QUORUM <nl> + * cli truncate support ( CASSANDRA - 1653 ) <nl> + * update GC settings in cassandra . bat ( CASSANDRA - 1636 ) <nl> <nl> <nl> 0 . 7 - beta2 <nl> diff - - git a / src / java / org / apache / cassandra / cli / Cli . g b / src / java / org / apache / cassandra / cli / Cli . g <nl> index e59c608 . . a9229ee 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / Cli . g <nl> + + + b / src / java / org / apache / cassandra / cli / Cli . g <nl> @ @ - 55 , 6 + 55 , 7 @ @ tokens { <nl> NODE _ UPDATE _ KEYSPACE ; <nl> NODE _ UPDATE _ COLUMN _ FAMILY ; <nl> NODE _ LIST ; <nl> + NODE _ TRUNCATE ; <nl> <nl> / / Internal Nodes . <nl> NODE _ COLUMN _ ACCESS ; <nl> @ @ - 123 , 6 + 124 , 7 @ @ statement <nl> | setStatement <nl> | showStatement <nl> | listStatement <nl> + | truncateStatement <nl> | - > ^ ( NODE _ NO _ OP ) <nl> ; <nl> <nl> @ @ - 174 , 6 + 176 , 8 @ @ helpStatement <nl> - > ^ ( NODE _ HELP NODE _ THRIFT _ COUNT ) <nl> | K _ HELP K _ LIST <nl> - > ^ ( NODE _ HELP NODE _ LIST ) <nl> + | K _ HELP K _ TRUNCATE <nl> + - > ^ ( NODE _ HELP NODE _ TRUNCATE ) <nl> | K _ HELP <nl> - > ^ ( NODE _ HELP ) <nl> | ' ? ' <nl> @ @ - 231 , 6 + 235 , 11 @ @ listStatement <nl> - > ^ ( NODE _ LIST columnFamily keyRangeExpr ? ^ ( NODE _ LIMIT $ limit ) ? ) <nl> ; <nl> <nl> + truncateStatement <nl> + : K _ TRUNCATE columnFamily <nl> + - > ^ ( NODE _ TRUNCATE columnFamily ) <nl> + ; <nl> + <nl> showClusterName <nl> : K _ SHOW K _ CLUSTER K _ NAME <nl> - > ^ ( NODE _ SHOW _ CLUSTER _ NAME ) <nl> @ @ - 430 , 6 + 439 , 7 @ @ K _ AND : ' AND ' ; <nl> K _ UPDATE : ' UPDATE ' ; <nl> K _ LIST : ' LIST ' ; <nl> K _ LIMIT : ' LIMIT ' ; <nl> + K _ TRUNCATE : ' TRUNCATE ' ; <nl> <nl> / / private syntactic rules <nl> fragment <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index b6ace98 . . b63105a 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 171 , 6 + 171 , 9 @ @ public class CliClient extends CliUserHelp <nl> case CliParser . NODE _ LIST : <nl> executeList ( tree ) ; <nl> break ; <nl> + case CliParser . NODE _ TRUNCATE : <nl> + executeTruncate ( tree . getChild ( 0 ) . getText ( ) ) ; <nl> + break ; <nl> case CliParser . NODE _ NO _ OP : <nl> / / comment lines come here ; they are treated as no ops . <nl> break ; <nl> @ @ - 943 , 6 + 946 , 30 @ @ public class CliClient extends CliUserHelp <nl> printSliceList ( columnFamilyDef , keySlices ) ; <nl> } <nl> <nl> + / / TRUNCATE < columnFamily > <nl> + private void executeTruncate ( String columnFamily ) <nl> + { <nl> + if ( ! CliMain . isConnected ( ) | | ! hasKeySpace ( ) ) <nl> + return ; <nl> + <nl> + / / getting CfDef , it will fail if there is no such column family in current keySpace . <nl> + CfDef cfDef = getCfDef ( columnFamily ) ; <nl> + <nl> + try <nl> + { <nl> + thriftClient . truncate ( cfDef . getName ( ) ) ; <nl> + sessionState . out . println ( columnFamily + " truncated . " ) ; <nl> + } <nl> + catch ( InvalidRequestException e ) <nl> + { <nl> + throw new RuntimeException ( e . getWhy ( ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> / / SHOW API VERSION <nl> private void executeShowVersion ( ) throws TException <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliCompleter . java b / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> index f541fe5 . . b033d8f 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> @ @ - 55 , 12 + 55 , 16 @ @ public class CliCompleter extends SimpleCompletor <nl> " help set " , <nl> " help del " , <nl> " help count " , <nl> + " help list " , <nl> + " help truncate " <nl> } ; <nl> private static String [ ] keyspaceCommands = { <nl> " get " , <nl> " set " , <nl> " count " , <nl> - " del " <nl> + " del " , <nl> + " list " , <nl> + " truncate " <nl> } ; <nl> <nl> public CliCompleter ( ) <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliUserHelp . java b / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> index 7c512e2 . . db6a779 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> @ @ - 281 , 6 + 281 , 13 @ @ public class CliUserHelp { <nl> state . out . println ( " list Users [ j : ] limit 40 " ) ; <nl> break ; <nl> <nl> + case CliParser . NODE _ TRUNCATE : <nl> + state . out . println ( " truncate < column _ family > " ) ; <nl> + state . out . println ( " Truncate specified column family . \ n " ) ; <nl> + state . out . println ( " example : " ) ; <nl> + state . out . println ( " truncate Category " ) ; <nl> + break ; <nl> + <nl> default : <nl> state . out . println ( " ? " ) ; <nl> break ; <nl> @ @ - 324 , 7 + 331 , 8 @ @ public class CliUserHelp { <nl> state . out . println ( " del < cf > [ ' < key > ' ] [ ' < super > ' ] [ ' < col > ' ] Delete sub column . " ) ; <nl> state . out . println ( " count < cf > [ ' < key > ' ] Count columns in record . " ) ; <nl> state . out . println ( " count < cf > [ ' < key > ' ] [ ' < super > ' ] Count columns in a super column . " ) ; <nl> - state . out . println ( " list < cf > List all rows in the column family . " ) ; <nl> + state . out . println ( " truncate < column _ family > Truncate specified column family . " ) ; <nl> + state . out . println ( " list < cf > List all rows in the column family . " ) ; <nl> state . out . println ( " list < cf > [ < startKey > : ] " ) ; <nl> state . out . println ( " List rows in the column family beginning with < startKey > . " ) ; <nl> state . out . println ( " list < cf > [ < startKey > : < endKey > ] " ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> index 24a3de0 . . eddcafd 100644 <nl> - - - a / test / unit / org / apache / cassandra / cli / CliTest . java <nl> + + + b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> @ @ - 52 , 6 + 52 , 7 @ @ public class CliTest extends TestCase <nl> " list CF3 [ h : ] " , <nl> " list CF3 limit 10 " , <nl> " list CF3 [ h : g ] limit 10 " , <nl> + " truncate CF1 " , <nl> " update keyspace TestKeySpace with placement _ strategy = ' org . apache . cassandra . locator . LocalStrategy ' " , <nl> " update keyspace TestKeySpace with replication _ factor = 1 and strategy _ options = [ { DC1 : 3 , DC2 : 4 , DC5 : 1 } ] " <nl> } ; <nl> @ @ - 101 , 6 + 102 , 10 @ @ public class CliTest extends TestCase <nl> assertTrue ( result . startsWith ( " = > ( column = " ) ) ; <nl> } <nl> } <nl> + else if ( statement . startsWith ( " truncate " ) ) <nl> + { <nl> + assertTrue ( result . contains ( " truncated . " ) ) ; <nl> + } <nl> <nl> outStream . reset ( ) ; / / reset stream so we have only output from next statement all the time <nl> errStream . reset ( ) ; / / no errors to the end user .

TEST DIFF:
diff - - git a / doc / source / cql / ddl . rst b / doc / source / cql / ddl . rst 
 index 2d9a50a . . 945e301 100644 
 - - - a / doc / source / cql / ddl . rst 
 + + + b / doc / source / cql / ddl . rst 
 @ @ - 463 , 7 + 463 , 7 @ @ A table supports the following options : 
 | ` ` speculative _ retry ` ` | * simple * | 99PERCENTILE | : ref : ` Speculative retry options | 
 | | | | < speculative - retry - options > ` . | 
 + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - + - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + 
 - | ` ` speculative _ write _ threshold ` ` | * simple * | 99PERCENTILE | : ref : ` Speculative retry options | 
 + | ` ` additional _ write _ policy ` ` | * simple * | 99PERCENTILE | : ref : ` Speculative retry options | 
 | | | | < speculative - retry - options > ` . | 
 + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - + - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + 
 | ` ` gc _ grace _ seconds ` ` | * simple * | 864000 | Time to wait before garbage collecting tombstones | 
 @ @ - 496 , 7 + 496 , 7 @ @ Speculative retry options 
 By default , Cassandra read coordinators only query as many replicas as necessary to satisfy 
 consistency levels : one for consistency level ` ` ONE ` ` , a quorum for ` ` QUORUM ` ` , and so on . 
 ` ` speculative _ retry ` ` determines when coordinators may query additional replicas , which is useful 
 - when replicas are slow or unresponsive . ` ` speculative _ write _ threshold ` ` specifies the threshold at which 
 + when replicas are slow or unresponsive . ` ` additional _ write _ policy ` ` specifies the threshold at which 
 a cheap quorum write will be upgraded to include transient replicas . The following are legal values ( case - insensitive ) : 
 
 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index 405e88e . . 1d17978 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 49 , 7 + 49 , 7 @ @ class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : 
 ( ' max _ index _ interval ' , None ) , 
 ( ' default _ time _ to _ live ' , None ) , 
 ( ' speculative _ retry ' , None ) , 
 - ( ' speculative _ write _ threshold ' , None ) , 
 + ( ' additional _ write _ policy ' , None ) , 
 ( ' memtable _ flush _ period _ in _ ms ' , None ) , 
 ( ' cdc ' , None ) , 
 ( ' read _ repair ' , None ) , 
 diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ completion . py b / pylib / cqlshlib / test / test _ cqlsh _ completion . py 
 index 794c591 . . db18e3f 100644 
 - - - a / pylib / cqlshlib / test / test _ cqlsh _ completion . py 
 + + + b / pylib / cqlshlib / test / test _ cqlsh _ completion . py 
 @ @ - 594 , 7 + 594 , 7 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : 
 ' memtable _ flush _ period _ in _ ms ' , 
 ' CLUSTERING ' , 
 ' COMPACT ' , ' caching ' , ' comment ' , 
 - ' min _ index _ interval ' , ' speculative _ retry ' , ' speculative _ write _ threshold ' , ' cdc ' ] ) 
 + ' min _ index _ interval ' , ' speculative _ retry ' , ' additional _ write _ policy ' , ' cdc ' ] ) 
 self . trycompletions ( prefix + ' new _ table ( col _ a int PRIMARY KEY ) WITH ' , 
 choices = [ ' bloom _ filter _ fp _ chance ' , ' compaction ' , 
 ' compression ' , 
 @ @ - 603 , 7 + 603 , 7 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : 
 ' memtable _ flush _ period _ in _ ms ' , 
 ' CLUSTERING ' , 
 ' COMPACT ' , ' caching ' , ' comment ' , 
 - ' min _ index _ interval ' , ' speculative _ retry ' , ' speculative _ write _ threshold ' , ' cdc ' ] ) 
 + ' min _ index _ interval ' , ' speculative _ retry ' , ' additional _ write _ policy ' , ' cdc ' ] ) 
 self . trycompletions ( prefix + ' new _ table ( col _ a int PRIMARY KEY ) WITH bloom _ filter _ fp _ chance ' , 
 immediate = ' = ' ) 
 self . trycompletions ( prefix + ' new _ table ( col _ a int PRIMARY KEY ) WITH bloom _ filter _ fp _ chance = ' , 
 @ @ - 650 , 7 + 650 , 7 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : 
 ' memtable _ flush _ period _ in _ ms ' , 
 ' CLUSTERING ' , 
 ' COMPACT ' , ' caching ' , ' comment ' , 
 - ' min _ index _ interval ' , ' speculative _ retry ' , ' speculative _ write _ threshold ' , ' cdc ' ] ) 
 + ' min _ index _ interval ' , ' speculative _ retry ' , ' additional _ write _ policy ' , ' cdc ' ] ) 
 self . trycompletions ( prefix + " new _ table ( col _ a int PRIMARY KEY ) WITH compaction = " 
 + " { ' class ' : ' DateTieredCompactionStrategy ' , ' " , 
 choices = [ ' base _ time _ seconds ' , ' max _ sstable _ age _ days ' , 
 diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ output . py b / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 index 46546f0 . . fb9fcd6 100644 
 - - - a / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 + + + b / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 @ @ - 623 , 7 + 623 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 AND memtable _ flush _ period _ in _ ms = 0 
 AND min _ index _ interval = 128 
 AND speculative _ retry = ' 99PERCENTILE ' 
 - AND speculative _ write _ threshold = ' 99PERCENTILE ' ; 
 + AND additional _ write _ policy = ' 99PERCENTILE ' ; 
 
 " " " % quote _ name ( get _ keyspace ( ) ) ) 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / schema / TableAttributes . java b / src / java / org / apache / cassandra / cql3 / statements / schema / TableAttributes . java 
 index 4e66307 . . 126e6d7 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / schema / TableAttributes . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / schema / TableAttributes . java 
 @ @ - 128 , 8 + 128 , 8 @ @ public final class TableAttributes extends PropertyDefinitions 
 if ( hasOption ( Option . SPECULATIVE _ RETRY ) ) 
 builder . speculativeRetry ( SpeculativeRetryPolicy . fromString ( getString ( Option . SPECULATIVE _ RETRY ) ) ) ; 
 
 - if ( hasOption ( Option . SPECULATIVE _ WRITE _ THRESHOLD ) ) 
 - builder . speculativeWriteThreshold ( SpeculativeRetryPolicy . fromString ( getString ( Option . SPECULATIVE _ WRITE _ THRESHOLD ) ) ) ; 
 + if ( hasOption ( Option . ADDITIONAL _ WRITE _ POLICY ) ) 
 + builder . additionalWritePolicy ( SpeculativeRetryPolicy . fromString ( getString ( Option . ADDITIONAL _ WRITE _ POLICY ) ) ) ; 
 
 if ( hasOption ( Option . CRC _ CHECK _ CHANCE ) ) 
 builder . crcCheckChance ( getDouble ( Option . CRC _ CHECK _ CHANCE ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index bc69026 . . 877a3c5 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 204 , 7 + 204 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 public final TableMetrics metric ; 
 public volatile long sampleReadLatencyNanos ; 
 - public volatile long transientWriteLatencyNanos ; 
 + public volatile long additionalWriteLatencyNanos ; 
 
 private final CassandraTableWriteHandler writeHandler ; 
 private final CassandraStreamManager streamManager ; 
 @ @ - 384 , 7 + 384 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 metric = new TableMetrics ( this ) ; 
 fileIndexGenerator . set ( generation ) ; 
 sampleReadLatencyNanos = TimeUnit . MILLISECONDS . toNanos ( DatabaseDescriptor . getReadRpcTimeout ( ) / 2 ) ; 
 - transientWriteLatencyNanos = TimeUnit . MILLISECONDS . toNanos ( DatabaseDescriptor . getWriteRpcTimeout ( ) / 2 ) ; 
 + additionalWriteLatencyNanos = TimeUnit . MILLISECONDS . toNanos ( DatabaseDescriptor . getWriteRpcTimeout ( ) / 2 ) ; 
 
 logger . info ( " Initializing { } . { } " , keyspace . getName ( ) , name ) ; 
 
 @ @ - 455 , 7 + 455 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 try 
 { 
 sampleReadLatencyNanos = metadata ( ) . params . speculativeRetry . calculateThreshold ( metric . coordinatorReadLatency . getSnapshot ( ) , sampleReadLatencyNanos ) ; 
 - transientWriteLatencyNanos = metadata ( ) . params . speculativeWriteThreshold . calculateThreshold ( metric . coordinatorWriteLatency . getSnapshot ( ) , transientWriteLatencyNanos ) ; 
 + additionalWriteLatencyNanos = metadata ( ) . params . additionalWritePolicy . calculateThreshold ( metric . coordinatorWriteLatency . getSnapshot ( ) , additionalWriteLatencyNanos ) ; 
 } 
 catch ( Throwable e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / TableCQLHelper . java b / src / java / org / apache / cassandra / db / TableCQLHelper . java 
 index f97bebc . . 21ae560 100644 
 - - - a / src / java / org / apache / cassandra / db / TableCQLHelper . java 
 + + + b / src / java / org / apache / cassandra / db / TableCQLHelper . java 
 @ @ - 310 , 7 + 310 , 7 @ @ public class TableCQLHelper 
 builder . append ( " \ n \ tAND max _ index _ interval = " ) . append ( tableParams . maxIndexInterval ) ; 
 builder . append ( " \ n \ tAND memtable _ flush _ period _ in _ ms = " ) . append ( tableParams . memtableFlushPeriodInMs ) ; 
 builder . append ( " \ n \ tAND speculative _ retry = ' " ) . append ( tableParams . speculativeRetry ) . append ( " ' " ) ; 
 - builder . append ( " \ n \ tAND speculative _ write _ threshold = ' " ) . append ( tableParams . speculativeWriteThreshold ) . append ( " ' " ) ; 
 + builder . append ( " \ n \ tAND additional _ write _ policy = ' " ) . append ( tableParams . additionalWritePolicy ) . append ( " ' " ) ; 
 builder . append ( " \ n \ tAND comment = " ) . append ( singleQuote ( tableParams . comment ) ) ; 
 builder . append ( " \ n \ tAND caching = " ) . append ( toCQL ( tableParams . caching . asMap ( ) ) ) ; 
 builder . append ( " \ n \ tAND compaction = " ) . append ( toCQL ( tableParams . compaction . asMap ( ) ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / metrics / KeyspaceMetrics . java b / src / java / org / apache / cassandra / metrics / KeyspaceMetrics . java 
 index f1df026 . . ef3338e 100644 
 - - - a / src / java / org / apache / cassandra / metrics / KeyspaceMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / KeyspaceMetrics . java 
 @ @ - 104 , 7 + 104 , 7 @ @ public class KeyspaceMetrics 
 / * * Needed to speculate , but didn ' t have enough replicas * * / 
 public final Counter speculativeInsufficientReplicas ; 
 / * * Needed to write to a transient replica to satisfy quorum * * / 
 - public final Counter speculativeWrites ; 
 + public final Counter additionalWrites ; 
 / * * Number of started repairs as coordinator on this keyspace * / 
 public final Counter repairsStarted ; 
 / * * Number of completed repairs as coordinator on this keyspace * / 
 @ @ - 292 , 7 + 292 , 7 @ @ public class KeyspaceMetrics 
 speculativeRetries = createKeyspaceCounter ( " SpeculativeRetries " , metric - > metric . speculativeRetries . getCount ( ) ) ; 
 speculativeFailedRetries = createKeyspaceCounter ( " SpeculativeFailedRetries " , metric - > metric . speculativeFailedRetries . getCount ( ) ) ; 
 speculativeInsufficientReplicas = createKeyspaceCounter ( " SpeculativeInsufficientReplicas " , metric - > metric . speculativeInsufficientReplicas . getCount ( ) ) ; 
 - speculativeWrites = createKeyspaceCounter ( " SpeculativeWrites " , metric - > metric . speculativeWrites . getCount ( ) ) ; 
 + additionalWrites = createKeyspaceCounter ( " AdditionalWrites " , metric - > metric . additionalWrites . getCount ( ) ) ; 
 repairsStarted = createKeyspaceCounter ( " RepairJobsStarted " , metric - > metric . repairsStarted . getCount ( ) ) ; 
 repairsCompleted = createKeyspaceCounter ( " RepairJobsCompleted " , metric - > metric . repairsCompleted . getCount ( ) ) ; 
 repairTime = Metrics . timer ( factory . createMetricName ( " RepairTime " ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / metrics / TableMetrics . java b / src / java / org / apache / cassandra / metrics / TableMetrics . java 
 index 52c50b8 . . 41771d1 100644 
 - - - a / src / java / org / apache / cassandra / metrics / TableMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / TableMetrics . java 
 @ @ - 214 , 8 + 214 , 8 @ @ public class TableMetrics 
 public final Counter speculativeInsufficientReplicas ; 
 public final Gauge < Long > speculativeSampleLatencyNanos ; 
 
 - public final Counter speculativeWrites ; 
 - public final Gauge < Long > speculativeWriteLatencyNanos ; 
 + public final Counter additionalWrites ; 
 + public final Gauge < Long > additionalWriteLatencyNanos ; 
 
 / * * 
 * Metrics for inconsistencies detected between repaired data sets across replicas . These 
 @ @ - 843 , 8 + 843 , 8 @ @ public class TableMetrics 
 speculativeInsufficientReplicas = createTableCounter ( " SpeculativeInsufficientReplicas " ) ; 
 speculativeSampleLatencyNanos = createTableGauge ( " SpeculativeSampleLatencyNanos " , ( ) - > cfs . sampleReadLatencyNanos ) ; 
 
 - speculativeWrites = createTableCounter ( " SpeculativeWrites " ) ; 
 - speculativeWriteLatencyNanos = createTableGauge ( " SpeculativeWriteLatencyNanos " , ( ) - > cfs . transientWriteLatencyNanos ) ; 
 + additionalWrites = createTableCounter ( " AdditionalWrites " ) ; 
 + additionalWriteLatencyNanos = createTableGauge ( " AdditionalWriteLatencyNanos " , ( ) - > cfs . additionalWriteLatencyNanos ) ; 
 
 keyCacheHitRate = Metrics . register ( factory . createMetricName ( " KeyCacheHitRate " ) , 
 aliasFactory . createMetricName ( " KeyCacheHitRate " ) , 
 diff - - git a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 index 22a8c39 . . d2abc03 100644 
 - - - a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 + + + b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 @ @ - 137 , 7 + 137 , 7 @ @ public final class SchemaKeyspace 
 + " min _ index _ interval int , " 
 + " read _ repair _ chance double , " / / no longer used , left for drivers ' sake 
 + " speculative _ retry text , " 
 - + " speculative _ write _ threshold text , " 
 + + " additional _ write _ policy text , " 
 + " cdc boolean , " 
 + " read _ repair text , " 
 + " PRIMARY KEY ( ( keyspace _ name ) , table _ name ) ) " ) ; 
 @ @ - 204 , 7 + 204 , 7 @ @ public final class SchemaKeyspace 
 + " min _ index _ interval int , " 
 + " read _ repair _ chance double , " / / no longer used , left for drivers ' sake 
 + " speculative _ retry text , " 
 - + " speculative _ write _ threshold text , " 
 + + " additional _ write _ policy text , " 
 + " cdc boolean , " 
 + " read _ repair text , " 
 + " PRIMARY KEY ( ( keyspace _ name ) , view _ name ) ) " ) ; 
 @ @ - 565 , 7 + 565 , 7 @ @ public final class SchemaKeyspace 
 . add ( " min _ index _ interval " , params . minIndexInterval ) 
 . add ( " read _ repair _ chance " , 0 . 0 ) / / no longer used , left for drivers ' sake 
 . add ( " speculative _ retry " , params . speculativeRetry . toString ( ) ) 
 - . add ( " speculative _ write _ threshold " , params . speculativeWriteThreshold . toString ( ) ) 
 + . add ( " additional _ write _ policy " , params . additionalWritePolicy . toString ( ) ) 
 . add ( " crc _ check _ chance " , params . crcCheckChance ) 
 . add ( " caching " , params . caching . asMap ( ) ) 
 . add ( " compaction " , params . compaction . asMap ( ) ) 
 @ @ - 994 , 7 + 994 , 9 @ @ public final class SchemaKeyspace 
 . minIndexInterval ( row . getInt ( " min _ index _ interval " ) ) 
 . crcCheckChance ( row . getDouble ( " crc _ check _ chance " ) ) 
 . speculativeRetry ( SpeculativeRetryPolicy . fromString ( row . getString ( " speculative _ retry " ) ) ) 
 - . speculativeWriteThreshold ( SpeculativeRetryPolicy . fromString ( row . getString ( " speculative _ write _ threshold " ) ) ) 
 + . additionalWritePolicy ( row . has ( " additional _ write _ policy " ) ? 
 + SpeculativeRetryPolicy . fromString ( row . getString ( " additional _ write _ policy " ) ) : 
 + SpeculativeRetryPolicy . fromString ( " 99PERCENTILE " ) ) 
 . cdc ( row . has ( " cdc " ) & & row . getBoolean ( " cdc " ) ) 
 . readRepair ( getReadRepairStrategy ( row ) ) 
 . build ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / schema / TableMetadata . java b / src / java / org / apache / cassandra / schema / TableMetadata . java 
 index 10edf4d . . 02b851b 100644 
 - - - a / src / java / org / apache / cassandra / schema / TableMetadata . java 
 + + + b / src / java / org / apache / cassandra / schema / TableMetadata . java 
 @ @ - 834 , 9 + 834 , 9 @ @ public final class TableMetadata 
 return this ; 
 } 
 
 - public Builder speculativeWriteThreshold ( SpeculativeRetryPolicy val ) 
 + public Builder additionalWritePolicy ( SpeculativeRetryPolicy val ) 
 { 
 - params . speculativeWriteThreshold ( val ) ; 
 + params . additionalWritePolicy ( val ) ; 
 return this ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / schema / TableParams . java b / src / java / org / apache / cassandra / schema / TableParams . java 
 index 0bba5e1 . . 7c3eaa2 100644 
 - - - a / src / java / org / apache / cassandra / schema / TableParams . java 
 + + + b / src / java / org / apache / cassandra / schema / TableParams . java 
 @ @ - 51 , 7 + 51 , 7 @ @ public final class TableParams 
 MEMTABLE _ FLUSH _ PERIOD _ IN _ MS , 
 MIN _ INDEX _ INTERVAL , 
 SPECULATIVE _ RETRY , 
 - SPECULATIVE _ WRITE _ THRESHOLD , 
 + ADDITIONAL _ WRITE _ POLICY , 
 CRC _ CHECK _ CHANCE , 
 CDC , 
 READ _ REPAIR ; 
 @ @ - 72 , 7 + 72 , 7 @ @ public final class TableParams 
 public final int minIndexInterval ; 
 public final int maxIndexInterval ; 
 public final SpeculativeRetryPolicy speculativeRetry ; 
 - public final SpeculativeRetryPolicy speculativeWriteThreshold ; 
 + public final SpeculativeRetryPolicy additionalWritePolicy ; 
 public final CachingParams caching ; 
 public final CompactionParams compaction ; 
 public final CompressionParams compression ; 
 @ @ - 93 , 7 + 93 , 7 @ @ public final class TableParams 
 minIndexInterval = builder . minIndexInterval ; 
 maxIndexInterval = builder . maxIndexInterval ; 
 speculativeRetry = builder . speculativeRetry ; 
 - speculativeWriteThreshold = builder . speculativeWriteThreshold ; 
 + additionalWritePolicy = builder . additionalWritePolicy ; 
 caching = builder . caching ; 
 compaction = builder . compaction ; 
 compression = builder . compression ; 
 @ @ - 121 , 7 + 121 , 7 @ @ public final class TableParams 
 . memtableFlushPeriodInMs ( params . memtableFlushPeriodInMs ) 
 . minIndexInterval ( params . minIndexInterval ) 
 . speculativeRetry ( params . speculativeRetry ) 
 - . speculativeWriteThreshold ( params . speculativeWriteThreshold ) 
 + . additionalWritePolicy ( params . additionalWritePolicy ) 
 . extensions ( params . extensions ) 
 . cdc ( params . cdc ) 
 . readRepair ( params . readRepair ) ; 
 @ @ - 264 , 7 + 264 , 7 @ @ public final class TableParams 
 private int minIndexInterval = 128 ; 
 private int maxIndexInterval = 2048 ; 
 private SpeculativeRetryPolicy speculativeRetry = PercentileSpeculativeRetryPolicy . NINETY _ NINE _ P ; 
 - private SpeculativeRetryPolicy speculativeWriteThreshold = PercentileSpeculativeRetryPolicy . NINETY _ NINE _ P ; 
 + private SpeculativeRetryPolicy additionalWritePolicy = PercentileSpeculativeRetryPolicy . NINETY _ NINE _ P ; 
 private CachingParams caching = CachingParams . DEFAULT ; 
 private CompactionParams compaction = CompactionParams . DEFAULT ; 
 private CompressionParams compression = CompressionParams . DEFAULT ; 
 @ @ - 335 , 9 + 335 , 9 @ @ public final class TableParams 
 return this ; 
 } 
 
 - public Builder speculativeWriteThreshold ( SpeculativeRetryPolicy val ) 
 + public Builder additionalWritePolicy ( SpeculativeRetryPolicy val ) 
 { 
 - speculativeWriteThreshold = val ; 
 + additionalWritePolicy = val ; 
 return this ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java b / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java 
 index 7f51ae7 . . 1470cad 100644 
 - - - a / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java 
 + + + b / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java 
 @ @ - 298 , 7 + 298 , 7 @ @ public abstract class AbstractWriteResponseHandler < T > implements IAsyncCallbackW 
 . map ( Schema . instance : : getColumnFamilyStoreInstance ) 
 . collect ( Collectors . toList ( ) ) ; 
 for ( ColumnFamilyStore cf : cfs ) 
 - timeout = Math . min ( timeout , cf . transientWriteLatencyNanos ) ; 
 + timeout = Math . min ( timeout , cf . additionalWriteLatencyNanos ) ; 
 
 / / no latency information , or we ' re overloaded 
 if ( timeout > TimeUnit . MILLISECONDS . toNanos ( mutation . getTimeout ( ) ) ) 
 @ @ - 309 , 7 + 309 , 7 @ @ public abstract class AbstractWriteResponseHandler < T > implements IAsyncCallbackW 
 if ( ! condition . await ( timeout , TimeUnit . NANOSECONDS ) ) 
 { 
 for ( ColumnFamilyStore cf : cfs ) 
 - cf . metric . speculativeWrites . inc ( ) ; 
 + cf . metric . additionalWrites . inc ( ) ; 
 
 writePerformer . apply ( mutation , replicaPlan . withContact ( uncontacted ) , 
 ( AbstractWriteResponseHandler < IMutation > ) this , 
 diff - - git a / src / java / org / apache / cassandra / service / reads / repair / BlockingReadRepair . java b / src / java / org / apache / cassandra / service / reads / repair / BlockingReadRepair . java 
 index 938abaf . . 8016b89 100644 
 - - - a / src / java / org / apache / cassandra / service / reads / repair / BlockingReadRepair . java 
 + + + b / src / java / org / apache / cassandra / service / reads / repair / BlockingReadRepair . java 
 @ @ - 74 , 7 + 74 , 7 @ @ public class BlockingReadRepair < E extends Endpoints < E > , P extends ReplicaPlan . Fo 
 { 
 for ( BlockingPartitionRepair repair : repairs ) 
 { 
 - repair . maybeSendAdditionalWrites ( cfs . transientWriteLatencyNanos , TimeUnit . NANOSECONDS ) ; 
 + repair . maybeSendAdditionalWrites ( cfs . additionalWriteLatencyNanos , TimeUnit . NANOSECONDS ) ; 
 } 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / db / TableCQLHelperTest . java b / test / unit / org / apache / cassandra / db / TableCQLHelperTest . java 
 index fff567b . . a1cae54 100644 
 - - - a / test / unit / org / apache / cassandra / db / TableCQLHelperTest . java 
 + + + b / test / unit / org / apache / cassandra / db / TableCQLHelperTest . java 
 @ @ - 256 , 7 + 256 , 7 @ @ public class TableCQLHelperTest extends CQLTester 
 . maxIndexInterval ( 7 ) 
 . memtableFlushPeriod ( 8 ) 
 . speculativeRetry ( AlwaysSpeculativeRetryPolicy . INSTANCE ) 
 - . speculativeWriteThreshold ( NeverSpeculativeRetryPolicy . INSTANCE ) 
 + . additionalWritePolicy ( NeverSpeculativeRetryPolicy . INSTANCE ) 
 . extensions ( ImmutableMap . of ( " ext1 " , ByteBuffer . wrap ( " val1 " . getBytes ( ) ) ) ) 
 . recordColumnDrop ( ColumnMetadata . regularColumn ( keyspace , table , " reg1 " , AsciiType . instance ) , 
 FBUtilities . timestampMicros ( ) ) ; 
 @ @ - 274 , 7 + 274 , 7 @ @ public class TableCQLHelperTest extends CQLTester 
 " \ tAND max _ index _ interval = 7 \ n " + 
 " \ tAND memtable _ flush _ period _ in _ ms = 8 \ n " + 
 " \ tAND speculative _ retry = ' ALWAYS ' \ n " + 
 - " \ tAND speculative _ write _ threshold = ' NEVER ' \ n " + 
 + " \ tAND additional _ write _ policy = ' NEVER ' \ n " + 
 " \ tAND comment = ' comment ' \ n " + 
 " \ tAND caching = { ' keys ' : ' ALL ' , ' rows _ per _ partition ' : ' NONE ' } \ n " + 
 " \ tAND compaction = { ' max _ threshold ' : ' 32 ' , ' min _ threshold ' : ' 4 ' , ' sstable _ size _ in _ mb ' : ' 1 ' , ' class ' : ' org . apache . cassandra . db . compaction . LeveledCompactionStrategy ' } \ n " + 
 diff - - git a / test / unit / org / apache / cassandra / service / reads / repair / AbstractReadRepairTest . java b / test / unit / org / apache / cassandra / service / reads / repair / AbstractReadRepairTest . java 
 index 5115581 . . 68afedc 100644 
 - - - a / test / unit / org / apache / cassandra / service / reads / repair / AbstractReadRepairTest . java 
 + + + b / test / unit / org / apache / cassandra / service / reads / repair / AbstractReadRepairTest . java 
 @ @ - 205 , 7 + 205 , 7 @ @ public abstract class AbstractReadRepairTest 
 cfs = ks . getColumnFamilyStore ( " tbl " ) ; 
 
 cfs . sampleReadLatencyNanos = 0 ; 
 - cfs . transientWriteLatencyNanos = 0 ; 
 + cfs . additionalWriteLatencyNanos = 0 ; 
 
 target1 = InetAddressAndPort . getByName ( " 127 . 0 . 0 . 255 " ) ; 
 target2 = InetAddressAndPort . getByName ( " 127 . 0 . 0 . 254 " ) ; 
 @ @ - 243 , 7 + 243 , 7 @ @ public abstract class AbstractReadRepairTest 
 assert configured : " configureClass must be called in a @ BeforeClass method " ; 
 
 cfs . sampleReadLatencyNanos = 0 ; 
 - cfs . transientWriteLatencyNanos = 0 ; 
 + cfs . additionalWriteLatencyNanos = 0 ; 
 } 
 
 static ReplicaPlan . ForRangeRead replicaPlan ( ConsistencyLevel consistencyLevel , EndpointsForRange replicas )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index eec904a . . 982454c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 59 , 6 + 59 , 8 @ @ 
 the old ones ( CASSANDRA - 1644 ) 
 * upgrade to Thrift 0 . 5 ( CASSANDRA - 1367 ) 
 * renamed CL . DCQUORUM to LOCAL _ QUORUM and DCQUORUMSYNC to EACH _ QUORUM 
 + * cli truncate support ( CASSANDRA - 1653 ) 
 + * update GC settings in cassandra . bat ( CASSANDRA - 1636 ) 
 
 
 0 . 7 - beta2 
 diff - - git a / src / java / org / apache / cassandra / cli / Cli . g b / src / java / org / apache / cassandra / cli / Cli . g 
 index e59c608 . . a9229ee 100644 
 - - - a / src / java / org / apache / cassandra / cli / Cli . g 
 + + + b / src / java / org / apache / cassandra / cli / Cli . g 
 @ @ - 55 , 6 + 55 , 7 @ @ tokens { 
 NODE _ UPDATE _ KEYSPACE ; 
 NODE _ UPDATE _ COLUMN _ FAMILY ; 
 NODE _ LIST ; 
 + NODE _ TRUNCATE ; 
 
 / / Internal Nodes . 
 NODE _ COLUMN _ ACCESS ; 
 @ @ - 123 , 6 + 124 , 7 @ @ statement 
 | setStatement 
 | showStatement 
 | listStatement 
 + | truncateStatement 
 | - > ^ ( NODE _ NO _ OP ) 
 ; 
 
 @ @ - 174 , 6 + 176 , 8 @ @ helpStatement 
 - > ^ ( NODE _ HELP NODE _ THRIFT _ COUNT ) 
 | K _ HELP K _ LIST 
 - > ^ ( NODE _ HELP NODE _ LIST ) 
 + | K _ HELP K _ TRUNCATE 
 + - > ^ ( NODE _ HELP NODE _ TRUNCATE ) 
 | K _ HELP 
 - > ^ ( NODE _ HELP ) 
 | ' ? ' 
 @ @ - 231 , 6 + 235 , 11 @ @ listStatement 
 - > ^ ( NODE _ LIST columnFamily keyRangeExpr ? ^ ( NODE _ LIMIT $ limit ) ? ) 
 ; 
 
 + truncateStatement 
 + : K _ TRUNCATE columnFamily 
 + - > ^ ( NODE _ TRUNCATE columnFamily ) 
 + ; 
 + 
 showClusterName 
 : K _ SHOW K _ CLUSTER K _ NAME 
 - > ^ ( NODE _ SHOW _ CLUSTER _ NAME ) 
 @ @ - 430 , 6 + 439 , 7 @ @ K _ AND : ' AND ' ; 
 K _ UPDATE : ' UPDATE ' ; 
 K _ LIST : ' LIST ' ; 
 K _ LIMIT : ' LIMIT ' ; 
 + K _ TRUNCATE : ' TRUNCATE ' ; 
 
 / / private syntactic rules 
 fragment 
 diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index b6ace98 . . b63105a 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 171 , 6 + 171 , 9 @ @ public class CliClient extends CliUserHelp 
 case CliParser . NODE _ LIST : 
 executeList ( tree ) ; 
 break ; 
 + case CliParser . NODE _ TRUNCATE : 
 + executeTruncate ( tree . getChild ( 0 ) . getText ( ) ) ; 
 + break ; 
 case CliParser . NODE _ NO _ OP : 
 / / comment lines come here ; they are treated as no ops . 
 break ; 
 @ @ - 943 , 6 + 946 , 30 @ @ public class CliClient extends CliUserHelp 
 printSliceList ( columnFamilyDef , keySlices ) ; 
 } 
 
 + / / TRUNCATE < columnFamily > 
 + private void executeTruncate ( String columnFamily ) 
 + { 
 + if ( ! CliMain . isConnected ( ) | | ! hasKeySpace ( ) ) 
 + return ; 
 + 
 + / / getting CfDef , it will fail if there is no such column family in current keySpace . 
 + CfDef cfDef = getCfDef ( columnFamily ) ; 
 + 
 + try 
 + { 
 + thriftClient . truncate ( cfDef . getName ( ) ) ; 
 + sessionState . out . println ( columnFamily + " truncated . " ) ; 
 + } 
 + catch ( InvalidRequestException e ) 
 + { 
 + throw new RuntimeException ( e . getWhy ( ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 / / SHOW API VERSION 
 private void executeShowVersion ( ) throws TException 
 { 
 diff - - git a / src / java / org / apache / cassandra / cli / CliCompleter . java b / src / java / org / apache / cassandra / cli / CliCompleter . java 
 index f541fe5 . . b033d8f 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliCompleter . java 
 + + + b / src / java / org / apache / cassandra / cli / CliCompleter . java 
 @ @ - 55 , 12 + 55 , 16 @ @ public class CliCompleter extends SimpleCompletor 
 " help set " , 
 " help del " , 
 " help count " , 
 + " help list " , 
 + " help truncate " 
 } ; 
 private static String [ ] keyspaceCommands = { 
 " get " , 
 " set " , 
 " count " , 
 - " del " 
 + " del " , 
 + " list " , 
 + " truncate " 
 } ; 
 
 public CliCompleter ( ) 
 diff - - git a / src / java / org / apache / cassandra / cli / CliUserHelp . java b / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 index 7c512e2 . . db6a779 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 + + + b / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 @ @ - 281 , 6 + 281 , 13 @ @ public class CliUserHelp { 
 state . out . println ( " list Users [ j : ] limit 40 " ) ; 
 break ; 
 
 + case CliParser . NODE _ TRUNCATE : 
 + state . out . println ( " truncate < column _ family > " ) ; 
 + state . out . println ( " Truncate specified column family . \ n " ) ; 
 + state . out . println ( " example : " ) ; 
 + state . out . println ( " truncate Category " ) ; 
 + break ; 
 + 
 default : 
 state . out . println ( " ? " ) ; 
 break ; 
 @ @ - 324 , 7 + 331 , 8 @ @ public class CliUserHelp { 
 state . out . println ( " del < cf > [ ' < key > ' ] [ ' < super > ' ] [ ' < col > ' ] Delete sub column . " ) ; 
 state . out . println ( " count < cf > [ ' < key > ' ] Count columns in record . " ) ; 
 state . out . println ( " count < cf > [ ' < key > ' ] [ ' < super > ' ] Count columns in a super column . " ) ; 
 - state . out . println ( " list < cf > List all rows in the column family . " ) ; 
 + state . out . println ( " truncate < column _ family > Truncate specified column family . " ) ; 
 + state . out . println ( " list < cf > List all rows in the column family . " ) ; 
 state . out . println ( " list < cf > [ < startKey > : ] " ) ; 
 state . out . println ( " List rows in the column family beginning with < startKey > . " ) ; 
 state . out . println ( " list < cf > [ < startKey > : < endKey > ] " ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java 
 index 24a3de0 . . eddcafd 100644 
 - - - a / test / unit / org / apache / cassandra / cli / CliTest . java 
 + + + b / test / unit / org / apache / cassandra / cli / CliTest . java 
 @ @ - 52 , 6 + 52 , 7 @ @ public class CliTest extends TestCase 
 " list CF3 [ h : ] " , 
 " list CF3 limit 10 " , 
 " list CF3 [ h : g ] limit 10 " , 
 + " truncate CF1 " , 
 " update keyspace TestKeySpace with placement _ strategy = ' org . apache . cassandra . locator . LocalStrategy ' " , 
 " update keyspace TestKeySpace with replication _ factor = 1 and strategy _ options = [ { DC1 : 3 , DC2 : 4 , DC5 : 1 } ] " 
 } ; 
 @ @ - 101 , 6 + 102 , 10 @ @ public class CliTest extends TestCase 
 assertTrue ( result . startsWith ( " = > ( column = " ) ) ; 
 } 
 } 
 + else if ( statement . startsWith ( " truncate " ) ) 
 + { 
 + assertTrue ( result . contains ( " truncated . " ) ) ; 
 + } 
 
 outStream . reset ( ) ; / / reset stream so we have only output from next statement all the time 
 errStream . reset ( ) ; / / no errors to the end user .
