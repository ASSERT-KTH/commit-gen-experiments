BLEU SCORE: 1.0

TEST MSG: Validate token ( ) args are in partition key order
GENERATED MSG: Validate token ( ) args are in partition key order

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9a69dfd . . d3ee7d9 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 44 , 7 + 44 , 8 @ @ <nl> * Include snippet of CQL query near syntax error in messages ( CASSANDRA - 7111 ) <nl> * Make repair - pr work with - local ( CASSANDRA - 7450 ) <nl> Merged from 2 . 0 : <nl> - 2 . 0 . 11 : <nl> + * token ( ) should only accept columns in the partitioning <nl> + key order ( CASSANDRA - 6075 ) <nl> * Add method to invalidate permission cache via JMX ( CASSANDRA - 7977 ) <nl> * Allow propagating multiple gossip states atomically ( CASSANDRA - 6125 ) <nl> * Log exceptions related to unclean native protocol client disconnects <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index 586eb85 . . 22c8468 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . cql3 . statements ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> + import com . google . common . base . Joiner ; <nl> import com . google . common . base . Objects ; <nl> import com . google . common . base . Predicate ; <nl> import com . google . common . collect . AbstractIterator ; <nl> @ @ - 1822 , 6 + 1823 , 27 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> } <nl> previous = cdef ; <nl> } <nl> + <nl> + if ( stmt . onToken & & cfm . partitionKeyColumns ( ) . size ( ) > 0 ) <nl> + checkTokenFunctionArgumentsOrder ( cfm ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks that the column identifiers used as argument for the token function have been specified in the <nl> + * partition key order . <nl> + * @ param cfm the Column Family MetaData <nl> + * @ throws InvalidRequestException if the arguments have not been provided in the proper order . <nl> + * / <nl> + private void checkTokenFunctionArgumentsOrder ( CFMetaData cfm ) throws InvalidRequestException <nl> + { <nl> + Iterator < ColumnDefinition > iter = cfm . partitionKeyColumns ( ) . iterator ( ) ; <nl> + for ( Relation relation : whereClause ) <nl> + { <nl> + SingleColumnRelation singleColumnRelation = ( SingleColumnRelation ) relation ; <nl> + if ( singleColumnRelation . onToken & & ! cfm . getColumnDefinition ( singleColumnRelation . getEntity ( ) ) . equals ( iter . next ( ) ) ) <nl> + throw new InvalidRequestException ( String . format ( " The token function arguments must be in the partition key order : % s " , <nl> + Joiner . on ( ' , ' ) . join ( cfm . partitionKeyColumns ( ) ) ) ) ; <nl> + } <nl> } <nl> <nl> private void processColumnRestrictions ( SelectStatement stmt , boolean hasQueriableIndex , CFMetaData cfm ) throws InvalidRequestException <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java b / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java <nl> new file mode 100644 <nl> index 0000000 . . 73a7209 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java <nl> @ @ - 0 , 0 + 1 , 55 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + public class SelectWithTokenFunctionTest extends CQLTester <nl> + { <nl> + @ Test <nl> + public void testTokenFunctionWithSingleColumnPartitionKey ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE IF NOT EXISTS % s ( a int PRIMARY KEY , b text ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b ) VALUES ( 0 , ' a ' ) " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE token ( a ) > = token ( ? ) " , 0 ) , row ( 0 , " a " ) ) ; <nl> + assertInvalid ( " SELECT * FROM % s WHERE token ( a ) > token ( ? ) " , " a " ) ; <nl> + assertInvalid ( " SELECT * FROM % s WHERE token ( a , b ) > = token ( ? , ? ) " , " b " , 0 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTokenFunctionWithPartitionKeyAndClusteringKeyArguments ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE IF NOT EXISTS % s ( a int , b text , PRIMARY KEY ( a , b ) ) " ) ; <nl> + assertInvalid ( " SELECT * FROM % s WHERE token ( a , b ) > token ( 0 , ' c ' ) " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTokenFunctionWithMultiColumnPartitionKey ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE IF NOT EXISTS % s ( a int , b text , PRIMARY KEY ( ( a , b ) ) ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b ) VALUES ( 0 , ' a ' ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b ) VALUES ( 0 , ' b ' ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b ) VALUES ( 0 , ' c ' ) " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT * FROM % s WHERE token ( a , b ) > token ( ? , ? ) " , 0 , " a " ) , <nl> + row ( 0 , " b " ) , <nl> + row ( 0 , " c " ) ) ; <nl> + assertInvalid ( " SELECT * FROM % s WHERE token ( b , a ) > token ( 0 , ' c ' ) " ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9a69dfd . . d3ee7d9 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 44 , 7 + 44 , 8 @ @ 
 * Include snippet of CQL query near syntax error in messages ( CASSANDRA - 7111 ) 
 * Make repair - pr work with - local ( CASSANDRA - 7450 ) 
 Merged from 2 . 0 : 
 - 2 . 0 . 11 : 
 + * token ( ) should only accept columns in the partitioning 
 + key order ( CASSANDRA - 6075 ) 
 * Add method to invalidate permission cache via JMX ( CASSANDRA - 7977 ) 
 * Allow propagating multiple gossip states atomically ( CASSANDRA - 6125 ) 
 * Log exceptions related to unclean native protocol client disconnects 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index 586eb85 . . 22c8468 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . cql3 . statements ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 + import com . google . common . base . Joiner ; 
 import com . google . common . base . Objects ; 
 import com . google . common . base . Predicate ; 
 import com . google . common . collect . AbstractIterator ; 
 @ @ - 1822 , 6 + 1823 , 27 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 } 
 previous = cdef ; 
 } 
 + 
 + if ( stmt . onToken & & cfm . partitionKeyColumns ( ) . size ( ) > 0 ) 
 + checkTokenFunctionArgumentsOrder ( cfm ) ; 
 + } 
 + 
 + / * * 
 + * Checks that the column identifiers used as argument for the token function have been specified in the 
 + * partition key order . 
 + * @ param cfm the Column Family MetaData 
 + * @ throws InvalidRequestException if the arguments have not been provided in the proper order . 
 + * / 
 + private void checkTokenFunctionArgumentsOrder ( CFMetaData cfm ) throws InvalidRequestException 
 + { 
 + Iterator < ColumnDefinition > iter = cfm . partitionKeyColumns ( ) . iterator ( ) ; 
 + for ( Relation relation : whereClause ) 
 + { 
 + SingleColumnRelation singleColumnRelation = ( SingleColumnRelation ) relation ; 
 + if ( singleColumnRelation . onToken & & ! cfm . getColumnDefinition ( singleColumnRelation . getEntity ( ) ) . equals ( iter . next ( ) ) ) 
 + throw new InvalidRequestException ( String . format ( " The token function arguments must be in the partition key order : % s " , 
 + Joiner . on ( ' , ' ) . join ( cfm . partitionKeyColumns ( ) ) ) ) ; 
 + } 
 } 
 
 private void processColumnRestrictions ( SelectStatement stmt , boolean hasQueriableIndex , CFMetaData cfm ) throws InvalidRequestException 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java b / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java 
 new file mode 100644 
 index 0000000 . . 73a7209 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / cql3 / SelectWithTokenFunctionTest . java 
 @ @ - 0 , 0 + 1 , 55 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 ; 
 + 
 + import org . junit . Test ; 
 + 
 + public class SelectWithTokenFunctionTest extends CQLTester 
 + { 
 + @ Test 
 + public void testTokenFunctionWithSingleColumnPartitionKey ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE IF NOT EXISTS % s ( a int PRIMARY KEY , b text ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b ) VALUES ( 0 , ' a ' ) " ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE token ( a ) > = token ( ? ) " , 0 ) , row ( 0 , " a " ) ) ; 
 + assertInvalid ( " SELECT * FROM % s WHERE token ( a ) > token ( ? ) " , " a " ) ; 
 + assertInvalid ( " SELECT * FROM % s WHERE token ( a , b ) > = token ( ? , ? ) " , " b " , 0 ) ; 
 + } 
 + 
 + @ Test 
 + public void testTokenFunctionWithPartitionKeyAndClusteringKeyArguments ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE IF NOT EXISTS % s ( a int , b text , PRIMARY KEY ( a , b ) ) " ) ; 
 + assertInvalid ( " SELECT * FROM % s WHERE token ( a , b ) > token ( 0 , ' c ' ) " ) ; 
 + } 
 + 
 + @ Test 
 + public void testTokenFunctionWithMultiColumnPartitionKey ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE IF NOT EXISTS % s ( a int , b text , PRIMARY KEY ( ( a , b ) ) ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b ) VALUES ( 0 , ' a ' ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b ) VALUES ( 0 , ' b ' ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b ) VALUES ( 0 , ' c ' ) " ) ; 
 + 
 + assertRows ( execute ( " SELECT * FROM % s WHERE token ( a , b ) > token ( ? , ? ) " , 0 , " a " ) , 
 + row ( 0 , " b " ) , 
 + row ( 0 , " c " ) ) ; 
 + assertInvalid ( " SELECT * FROM % s WHERE token ( b , a ) > token ( 0 , ' c ' ) " ) ; 
 + } 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
