BLEU SCORE: 1.0

TEST MSG: fix tests
GENERATED MSG: fix tests

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java b / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java <nl> index 72a0dc6 . . 658a4a9 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java <nl> @ @ - 24 , 7 + 24 , 7 @ @ import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . * ; <nl> <nl> - import org . apache . cassandra . db . SystemKeyspace ; <nl> + import org . apache . cassandra . db . SystemTable ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . junit . Test ; <nl> @ @ - 661 , 14 + 661 , 14 @ @ public class LeaveAndBootstrapTest <nl> VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( partitioner ) ; <nl> <nl> / / create a ring of 2 nodes <nl> - ArrayList < Token > endpointTokens = new ArrayList < > ( ) ; <nl> - List < InetAddress > hosts = new ArrayList < > ( ) ; <nl> + ArrayList < Token > endpointTokens = new ArrayList < Token > ( ) ; <nl> + List < InetAddress > hosts = new ArrayList < InetAddress > ( ) ; <nl> Util . createInitialRing ( ss , partitioner , endpointTokens , new ArrayList < Token > ( ) , hosts , new ArrayList < UUID > ( ) , 2 ) ; <nl> <nl> InetAddress toRemove = hosts . get ( 1 ) ; <nl> - SystemKeyspace . updatePeerInfo ( toRemove , " data _ center " , " ' dc42 ' " ) ; <nl> - SystemKeyspace . updatePeerInfo ( toRemove , " rack " , " ' rack42 ' " ) ; <nl> - assertEquals ( " rack42 " , SystemKeyspace . loadDcRackInfo ( ) . get ( toRemove ) . get ( " rack " ) ) ; <nl> + SystemTable . updatePeerInfo ( toRemove , " data _ center " , " ' dc42 ' " ) ; <nl> + SystemTable . updatePeerInfo ( toRemove , " rack " , " ' rack42 ' " ) ; <nl> + assertEquals ( " rack42 " , SystemTable . loadDcRackInfo ( ) . get ( toRemove ) . get ( " rack " ) ) ; <nl> <nl> / / mark the node as removed <nl> Gossiper . instance . injectApplicationState ( toRemove , ApplicationState . STATUS , <nl> @ @ - 678 , 7 + 678 , 7 @ @ public class LeaveAndBootstrapTest <nl> / / state changes made after the endpoint has left should be ignored <nl> ss . onChange ( hosts . get ( 1 ) , ApplicationState . RACK , <nl> valueFactory . rack ( " rack9999 " ) ) ; <nl> - assertEquals ( " rack42 " , SystemKeyspace . loadDcRackInfo ( ) . get ( toRemove ) . get ( " rack " ) ) ; <nl> + assertEquals ( " rack42 " , SystemTable . loadDcRackInfo ( ) . get ( toRemove ) . get ( " rack " ) ) ; <nl> } <nl> <nl> private static Collection < InetAddress > makeAddrs ( String . . . hosts ) throws UnknownHostException
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index d9d8c80 . . c09440a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1325 , 5 + 1325 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> void clearUnsafe ( ) <nl> { <nl> memtable _ . clearUnsafe ( ) ; <nl> + ssTables _ . clearUnsafe ( ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableTracker . java b / src / java / org / apache / cassandra / io / SSTableTracker . java <nl> index dd4a7f0 . . db8b79f 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableTracker . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableTracker . java <nl> @ @ - 50 , 4 + 50 , 9 @ @ public class SSTableTracker implements Iterable < SSTableReader > <nl> { <nl> return sstables . iterator ( ) ; <nl> } <nl> + <nl> + public synchronized void clearUnsafe ( ) <nl> + { <nl> + sstables = Collections . emptySet ( ) ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java b / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java <nl> index 1648a7e . . 6a5d43a 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java <nl> + + + b / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . util . concurrent . ExecutionException ; <nl> import java . util . Set ; <nl> import java . util . HashSet ; <nl> import java . util . Arrays ; <nl> + import java . util . Collections ; <nl> <nl> import org . junit . Test ; <nl> <nl> @ @ - 43 , 19 + 44 , 24 @ @ public class RecoveryManager2Test extends CleanupHelper <nl> for ( int i = 0 ; i < 100 ; i + + ) <nl> { <nl> String key = " key " + i ; <nl> - RowMutation rm = new RowMutation ( " Keyspace1 " , key ) ; <nl> - ColumnFamily cf = ColumnFamily . create ( " Keyspace1 " , " Standard1 " ) ; <nl> - cf . addColumn ( column ( " col1 " , " val1 " , 1L ) ) ; <nl> - rm . add ( cf ) ; <nl> - rm . apply ( ) ; <nl> + insertRow ( key ) ; <nl> keys . add ( key ) ; <nl> } <nl> table1 . getColumnFamilyStore ( " Standard1 " ) . forceBlockingFlush ( ) ; <nl> <nl> table1 . getColumnFamilyStore ( " Standard1 " ) . clearUnsafe ( ) ; <nl> - RecoveryManager . doRecovery ( ) ; <nl> + RecoveryManager . doRecovery ( ) ; / / this is a no - op . is testing this useful ? <nl> <nl> Set < String > foundKeys = new HashSet < String > ( table1 . getColumnFamilyStore ( " Standard1 " ) . getKeyRange ( " " , " " , 1000 ) . keys ) ; <nl> - assert keys . equals ( foundKeys ) ; <nl> + assert foundKeys . equals ( Collections . emptySet ( ) ) ; <nl> + } <nl> + <nl> + private void insertRow ( String key ) throws IOException <nl> + { <nl> + RowMutation rm = new RowMutation ( " Keyspace1 " , key ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( " Keyspace1 " , " Standard1 " ) ; <nl> + cf . addColumn ( column ( " col1 " , " val1 " , 1L ) ) ; <nl> + rm . add ( cf ) ; <nl> + rm . apply ( ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java b / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java 
 index 72a0dc6 . . 658a4a9 100644 
 - - - a / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java 
 + + + b / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java 
 @ @ - 24 , 7 + 24 , 7 @ @ import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . * ; 
 
 - import org . apache . cassandra . db . SystemKeyspace ; 
 + import org . apache . cassandra . db . SystemTable ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . config . Schema ; 
 import org . junit . Test ; 
 @ @ - 661 , 14 + 661 , 14 @ @ public class LeaveAndBootstrapTest 
 VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( partitioner ) ; 
 
 / / create a ring of 2 nodes 
 - ArrayList < Token > endpointTokens = new ArrayList < > ( ) ; 
 - List < InetAddress > hosts = new ArrayList < > ( ) ; 
 + ArrayList < Token > endpointTokens = new ArrayList < Token > ( ) ; 
 + List < InetAddress > hosts = new ArrayList < InetAddress > ( ) ; 
 Util . createInitialRing ( ss , partitioner , endpointTokens , new ArrayList < Token > ( ) , hosts , new ArrayList < UUID > ( ) , 2 ) ; 
 
 InetAddress toRemove = hosts . get ( 1 ) ; 
 - SystemKeyspace . updatePeerInfo ( toRemove , " data _ center " , " ' dc42 ' " ) ; 
 - SystemKeyspace . updatePeerInfo ( toRemove , " rack " , " ' rack42 ' " ) ; 
 - assertEquals ( " rack42 " , SystemKeyspace . loadDcRackInfo ( ) . get ( toRemove ) . get ( " rack " ) ) ; 
 + SystemTable . updatePeerInfo ( toRemove , " data _ center " , " ' dc42 ' " ) ; 
 + SystemTable . updatePeerInfo ( toRemove , " rack " , " ' rack42 ' " ) ; 
 + assertEquals ( " rack42 " , SystemTable . loadDcRackInfo ( ) . get ( toRemove ) . get ( " rack " ) ) ; 
 
 / / mark the node as removed 
 Gossiper . instance . injectApplicationState ( toRemove , ApplicationState . STATUS , 
 @ @ - 678 , 7 + 678 , 7 @ @ public class LeaveAndBootstrapTest 
 / / state changes made after the endpoint has left should be ignored 
 ss . onChange ( hosts . get ( 1 ) , ApplicationState . RACK , 
 valueFactory . rack ( " rack9999 " ) ) ; 
 - assertEquals ( " rack42 " , SystemKeyspace . loadDcRackInfo ( ) . get ( toRemove ) . get ( " rack " ) ) ; 
 + assertEquals ( " rack42 " , SystemTable . loadDcRackInfo ( ) . get ( toRemove ) . get ( " rack " ) ) ; 
 } 
 
 private static Collection < InetAddress > makeAddrs ( String . . . hosts ) throws UnknownHostException

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index d9d8c80 . . c09440a 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1325 , 5 + 1325 , 6 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 void clearUnsafe ( ) 
 { 
 memtable _ . clearUnsafe ( ) ; 
 + ssTables _ . clearUnsafe ( ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableTracker . java b / src / java / org / apache / cassandra / io / SSTableTracker . java 
 index dd4a7f0 . . db8b79f 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableTracker . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableTracker . java 
 @ @ - 50 , 4 + 50 , 9 @ @ public class SSTableTracker implements Iterable < SSTableReader > 
 { 
 return sstables . iterator ( ) ; 
 } 
 + 
 + public synchronized void clearUnsafe ( ) 
 + { 
 + sstables = Collections . emptySet ( ) ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java b / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java 
 index 1648a7e . . 6a5d43a 100644 
 - - - a / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java 
 + + + b / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . util . concurrent . ExecutionException ; 
 import java . util . Set ; 
 import java . util . HashSet ; 
 import java . util . Arrays ; 
 + import java . util . Collections ; 
 
 import org . junit . Test ; 
 
 @ @ - 43 , 19 + 44 , 24 @ @ public class RecoveryManager2Test extends CleanupHelper 
 for ( int i = 0 ; i < 100 ; i + + ) 
 { 
 String key = " key " + i ; 
 - RowMutation rm = new RowMutation ( " Keyspace1 " , key ) ; 
 - ColumnFamily cf = ColumnFamily . create ( " Keyspace1 " , " Standard1 " ) ; 
 - cf . addColumn ( column ( " col1 " , " val1 " , 1L ) ) ; 
 - rm . add ( cf ) ; 
 - rm . apply ( ) ; 
 + insertRow ( key ) ; 
 keys . add ( key ) ; 
 } 
 table1 . getColumnFamilyStore ( " Standard1 " ) . forceBlockingFlush ( ) ; 
 
 table1 . getColumnFamilyStore ( " Standard1 " ) . clearUnsafe ( ) ; 
 - RecoveryManager . doRecovery ( ) ; 
 + RecoveryManager . doRecovery ( ) ; / / this is a no - op . is testing this useful ? 
 
 Set < String > foundKeys = new HashSet < String > ( table1 . getColumnFamilyStore ( " Standard1 " ) . getKeyRange ( " " , " " , 1000 ) . keys ) ; 
 - assert keys . equals ( foundKeys ) ; 
 + assert foundKeys . equals ( Collections . emptySet ( ) ) ; 
 + } 
 + 
 + private void insertRow ( String key ) throws IOException 
 + { 
 + RowMutation rm = new RowMutation ( " Keyspace1 " , key ) ; 
 + ColumnFamily cf = ColumnFamily . create ( " Keyspace1 " , " Standard1 " ) ; 
 + cf . addColumn ( column ( " col1 " , " val1 " , 1L ) ) ; 
 + rm . add ( cf ) ; 
 + rm . apply ( ) ; 
 } 
 }
