BLEU SCORE: 0.009711282555136248

TEST MSG: use parameterized logging
GENERATED MSG: switch purge - compacted - sstables - at - startup logging to DEBUG level

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index b5c6c98 . . 0e7e5f2 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1855 , 14 + 1855 , 14 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> if ( sstable = = null | | ! sstable . acquireReference ( ) ) <nl> { <nl> if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " using snapshot sstable " + entries . getKey ( ) ) ; <nl> + logger . debug ( " using snapshot sstable { } " , entries . getKey ( ) ) ; <nl> sstable = SSTableReader . open ( entries . getKey ( ) , entries . getValue ( ) , metadata , partitioner ) ; <nl> / / This is technically not necessary since it ' s a snapshot but makes things easier <nl> sstable . acquireReference ( ) ; <nl> } <nl> else if ( logger . isDebugEnabled ( ) ) <nl> { <nl> - logger . debug ( " using active sstable " + entries . getKey ( ) ) ; <nl> + logger . debug ( " using active sstable { } " , entries . getKey ( ) ) ; <nl> } <nl> readers . add ( sstable ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> index 929d163 . . 383ca4d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> @ @ - 845 , 19 + 845 , 19 @ @ public class CompactionManager implements CompactionManagerMBean <nl> totalkeysWritten + + ; <nl> } <nl> else <nl> - 	 	 	 { <nl> - 	 	 	 cfs . invalidateCachedRow ( row . getKey ( ) ) ; <nl> - 	 	 	 if ( ! indexedColumns . isEmpty ( ) | | isCommutative ) <nl> + { <nl> + cfs . invalidateCachedRow ( row . getKey ( ) ) ; <nl> + if ( ! indexedColumns . isEmpty ( ) | | isCommutative ) <nl> { <nl> while ( row . hasNext ( ) ) <nl> { <nl> IColumn column = row . next ( ) ; <nl> if ( column instanceof CounterColumn ) <nl> - renewer . maybeRenew ( ( CounterColumn ) column ) ; <nl> + renewer . maybeRenew ( ( CounterColumn ) column ) ; <nl> if ( indexedColumns . contains ( column . name ( ) ) ) <nl> Table . cleanupIndexEntry ( cfs , row . getKey ( ) . key , column ) ; <nl> } <nl> - 	 	 	 } <nl> + } <nl> } <nl> } <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index b5c6c98 . . 0e7e5f2 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1855 , 14 + 1855 , 14 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 if ( sstable = = null | | ! sstable . acquireReference ( ) ) 
 { 
 if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " using snapshot sstable " + entries . getKey ( ) ) ; 
 + logger . debug ( " using snapshot sstable { } " , entries . getKey ( ) ) ; 
 sstable = SSTableReader . open ( entries . getKey ( ) , entries . getValue ( ) , metadata , partitioner ) ; 
 / / This is technically not necessary since it ' s a snapshot but makes things easier 
 sstable . acquireReference ( ) ; 
 } 
 else if ( logger . isDebugEnabled ( ) ) 
 { 
 - logger . debug ( " using active sstable " + entries . getKey ( ) ) ; 
 + logger . debug ( " using active sstable { } " , entries . getKey ( ) ) ; 
 } 
 readers . add ( sstable ) ; 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java 
 index 929d163 . . 383ca4d 100644 
 - - - a / src / java / org / apache / cassandra / db / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / CompactionManager . java 
 @ @ - 845 , 19 + 845 , 19 @ @ public class CompactionManager implements CompactionManagerMBean 
 totalkeysWritten + + ; 
 } 
 else 
 - 	 	 	 { 
 - 	 	 	 cfs . invalidateCachedRow ( row . getKey ( ) ) ; 
 - 	 	 	 if ( ! indexedColumns . isEmpty ( ) | | isCommutative ) 
 + { 
 + cfs . invalidateCachedRow ( row . getKey ( ) ) ; 
 + if ( ! indexedColumns . isEmpty ( ) | | isCommutative ) 
 { 
 while ( row . hasNext ( ) ) 
 { 
 IColumn column = row . next ( ) ; 
 if ( column instanceof CounterColumn ) 
 - renewer . maybeRenew ( ( CounterColumn ) column ) ; 
 + renewer . maybeRenew ( ( CounterColumn ) column ) ; 
 if ( indexedColumns . contains ( column . name ( ) ) ) 
 Table . cleanupIndexEntry ( cfs , row . getKey ( ) . key , column ) ; 
 } 
 - 	 	 	 } 
 + } 
 } 
 } 
 }
