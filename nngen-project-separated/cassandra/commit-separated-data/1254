BLEU SCORE: 0.015445276590783498

TEST MSG: Don ' t allow startup if the node ' s rack has changed
GENERATED MSG: Add standalone sstableupgrade utility .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index cd2a779 . . 9a82780 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> 2 . 1 . 12 <nl> - * ( cqlsh ) show partial trace if incomplete after max _ trace _ wait ( CASSANDRA - 7645 ) <nl> + * Don ' t allow startup if the node ' s rack has changed ( CASSANDRA - 10242 ) <nl> + * ( cqlsh ) show partial trace if incomplete after max _ trace _ wait ( CASSANDRA - 7645 ) <nl> <nl> <nl> 2 . 1 . 11 <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 4b34778 . . fadd541 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 13 , 6 + 13 , 18 @ @ restore snapshots created with the previous major version using the <nl> ' sstableloader ' tool . You can upgrade the file format of your snapshots <nl> using the provided ' sstableupgrade ' tool . <nl> <nl> + 2 . 1 . 12 <nl> + = = = = = = <nl> + <nl> + New features <nl> + - - - - - - - - - - - - <nl> + - Switching racks is no longer an allowed operation on a node which has <nl> + data . Instead , the node will need to be wiped and bootstrapped . If <nl> + moving from the SimpleSnitch , make sure the rack containing all current <nl> + nodes is named " rack1 " . To override this behavior when manually wiping <nl> + the node and bootstrapping , use - Dcassandra . ignore _ rack = true . <nl> + <nl> + <nl> 2 . 1 . 11 <nl> = = = = = <nl> <nl> @ @ - 21 , 6 + 33 , 7 @ @ Upgrading <nl> - Nothing specific to this release , but please see 2 . 1 if you are upgrading <nl> from a previous version . <nl> <nl> + <nl> 2 . 1 . 10 <nl> = = = = = <nl> <nl> diff - - git a / conf / cassandra - rackdc . properties b / conf / cassandra - rackdc . properties <nl> index f0a0d55 . . f85646e 100644 <nl> - - - a / conf / cassandra - rackdc . properties <nl> + + + b / conf / cassandra - rackdc . properties <nl> @ @ - 16 , 6 + 16 , 9 @ @ <nl> <nl> # These properties are used with GossipingPropertyFileSnitch and will <nl> # indicate the rack and dc for this node <nl> + # <nl> + # When upgrading from SimpleSnitch , you will need to set your initial machines <nl> + # to have rack = rack1 <nl> dc = DC1 <nl> rack = RAC1 <nl> <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index 7e266d1 . . df1aa15 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 654 , 6 + 654 , 9 @ @ cross _ node _ timeout : false <nl> # YOU MUST RUN A FULL REPAIR , SINCE THE SNITCH AFFECTS WHERE REPLICAS <nl> # ARE PLACED . <nl> # <nl> + # IF THE RACK A REPLICA IS PLACED IN CHANGES AFTER THE REPLICA HAS BEEN <nl> + # ADDED TO A RING , THE NODE MUST BE WIPED AND REBOOTSTRAPPED . <nl> + # <nl> # Out of the box , Cassandra provides <nl> # - SimpleSnitch : <nl> # Treats Strategy order as proximity . This can improve cache <nl> diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> index 2185c6c . . 72ee270 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> @ @ - 608 , 24 + 608 , 45 @ @ public class SystemKeyspace <nl> } <nl> ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( LOCAL _ CF ) ; <nl> <nl> - String req = " SELECT cluster _ name FROM system . % s WHERE key = ' % s ' " ; <nl> - UntypedResultSet result = executeInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) ) ; <nl> - <nl> - if ( result . isEmpty ( ) | | ! result . one ( ) . has ( " cluster _ name " ) ) <nl> { <nl> - / / this is a brand new node <nl> - if ( ! cfs . getSSTables ( ) . isEmpty ( ) ) <nl> - throw new ConfigurationException ( " Found system keyspace files , but they couldn ' t be loaded ! " ) ; <nl> + String req = " SELECT cluster _ name FROM system . % s WHERE key = ' % s ' " ; <nl> + UntypedResultSet result = executeInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) ) ; <nl> <nl> - / / no system files . this is a new node . <nl> - req = " INSERT INTO system . % s ( key , cluster _ name ) VALUES ( ' % s ' , ? ) " ; <nl> - executeInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) , DatabaseDescriptor . getClusterName ( ) ) ; <nl> - return ; <nl> + if ( result . isEmpty ( ) | | ! result . one ( ) . has ( " cluster _ name " ) ) <nl> + { <nl> + / / this is a brand new node <nl> + if ( ! cfs . getSSTables ( ) . isEmpty ( ) ) <nl> + throw new ConfigurationException ( " Found system keyspace files , but they couldn ' t be loaded ! " ) ; <nl> + <nl> + / / no system files . this is a new node . <nl> + req = " INSERT INTO system . % s ( key , cluster _ name ) VALUES ( ' % s ' , ? ) " ; <nl> + executeInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) , DatabaseDescriptor . getClusterName ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + String savedClusterName = result . one ( ) . getString ( " cluster _ name " ) ; <nl> + if ( ! DatabaseDescriptor . getClusterName ( ) . equals ( savedClusterName ) ) <nl> + throw new ConfigurationException ( " Saved cluster name " + savedClusterName + " ! = configured name " + DatabaseDescriptor . getClusterName ( ) ) ; <nl> + } <nl> } <nl> <nl> - String savedClusterName = result . one ( ) . getString ( " cluster _ name " ) ; <nl> - if ( ! DatabaseDescriptor . getClusterName ( ) . equals ( savedClusterName ) ) <nl> - throw new ConfigurationException ( " Saved cluster name " + savedClusterName + " ! = configured name " + DatabaseDescriptor . getClusterName ( ) ) ; <nl> + if ( ! Boolean . getBoolean ( " cassandra . ignore _ rack " ) ) <nl> + { <nl> + String req = " SELECT rack FROM system . % s WHERE key = ' % s ' " ; <nl> + UntypedResultSet result = executeInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) ) ; <nl> + <nl> + / / Look up the Rack ( return it if found ) <nl> + if ( ! result . isEmpty ( ) & & result . one ( ) . has ( " rack " ) ) <nl> + { <nl> + String storedRack = result . one ( ) . getString ( " rack " ) ; <nl> + String currentRack = DatabaseDescriptor . getEndpointSnitch ( ) . getRack ( FBUtilities . getBroadcastAddress ( ) ) ; <nl> + if ( ! storedRack . equals ( currentRack ) ) <nl> + { <nl> + throw new ConfigurationException ( " Cannot start node if snitch ' s rack ( " + currentRack + " ) differs from previous rack ( " + storedRack + " ) . " + <nl> + " Please fix the snitch or wipe and rebootstrap this node . " ) ; <nl> + } <nl> + } <nl> + } <nl> } <nl> <nl> public static Collection < Token > getSavedTokens ( )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / metrics / ReadRepairMetrics . java b / src / java / org / apache / cassandra / metrics / ReadRepairMetrics . java <nl> index 3f48fee . . 5b61e42 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / ReadRepairMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / ReadRepairMetrics . java <nl> @ @ - 1 , 4 + 1 , 25 @ @ <nl> package org . apache . cassandra . metrics ; <nl> + / * <nl> + * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * <nl> + * / <nl> + <nl> <nl> import java . util . concurrent . TimeUnit ; <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index cd2a779 . . 9a82780 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 2 . 1 . 12 
 - * ( cqlsh ) show partial trace if incomplete after max _ trace _ wait ( CASSANDRA - 7645 ) 
 + * Don ' t allow startup if the node ' s rack has changed ( CASSANDRA - 10242 ) 
 + * ( cqlsh ) show partial trace if incomplete after max _ trace _ wait ( CASSANDRA - 7645 ) 
 
 
 2 . 1 . 11 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 4b34778 . . fadd541 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 13 , 6 + 13 , 18 @ @ restore snapshots created with the previous major version using the 
 ' sstableloader ' tool . You can upgrade the file format of your snapshots 
 using the provided ' sstableupgrade ' tool . 
 
 + 2 . 1 . 12 
 + = = = = = = 
 + 
 + New features 
 + - - - - - - - - - - - - 
 + - Switching racks is no longer an allowed operation on a node which has 
 + data . Instead , the node will need to be wiped and bootstrapped . If 
 + moving from the SimpleSnitch , make sure the rack containing all current 
 + nodes is named " rack1 " . To override this behavior when manually wiping 
 + the node and bootstrapping , use - Dcassandra . ignore _ rack = true . 
 + 
 + 
 2 . 1 . 11 
 = = = = = 
 
 @ @ - 21 , 6 + 33 , 7 @ @ Upgrading 
 - Nothing specific to this release , but please see 2 . 1 if you are upgrading 
 from a previous version . 
 
 + 
 2 . 1 . 10 
 = = = = = 
 
 diff - - git a / conf / cassandra - rackdc . properties b / conf / cassandra - rackdc . properties 
 index f0a0d55 . . f85646e 100644 
 - - - a / conf / cassandra - rackdc . properties 
 + + + b / conf / cassandra - rackdc . properties 
 @ @ - 16 , 6 + 16 , 9 @ @ 
 
 # These properties are used with GossipingPropertyFileSnitch and will 
 # indicate the rack and dc for this node 
 + # 
 + # When upgrading from SimpleSnitch , you will need to set your initial machines 
 + # to have rack = rack1 
 dc = DC1 
 rack = RAC1 
 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index 7e266d1 . . df1aa15 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 654 , 6 + 654 , 9 @ @ cross _ node _ timeout : false 
 # YOU MUST RUN A FULL REPAIR , SINCE THE SNITCH AFFECTS WHERE REPLICAS 
 # ARE PLACED . 
 # 
 + # IF THE RACK A REPLICA IS PLACED IN CHANGES AFTER THE REPLICA HAS BEEN 
 + # ADDED TO A RING , THE NODE MUST BE WIPED AND REBOOTSTRAPPED . 
 + # 
 # Out of the box , Cassandra provides 
 # - SimpleSnitch : 
 # Treats Strategy order as proximity . This can improve cache 
 diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 index 2185c6c . . 72ee270 100644 
 - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 @ @ - 608 , 24 + 608 , 45 @ @ public class SystemKeyspace 
 } 
 ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( LOCAL _ CF ) ; 
 
 - String req = " SELECT cluster _ name FROM system . % s WHERE key = ' % s ' " ; 
 - UntypedResultSet result = executeInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) ) ; 
 - 
 - if ( result . isEmpty ( ) | | ! result . one ( ) . has ( " cluster _ name " ) ) 
 { 
 - / / this is a brand new node 
 - if ( ! cfs . getSSTables ( ) . isEmpty ( ) ) 
 - throw new ConfigurationException ( " Found system keyspace files , but they couldn ' t be loaded ! " ) ; 
 + String req = " SELECT cluster _ name FROM system . % s WHERE key = ' % s ' " ; 
 + UntypedResultSet result = executeInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) ) ; 
 
 - / / no system files . this is a new node . 
 - req = " INSERT INTO system . % s ( key , cluster _ name ) VALUES ( ' % s ' , ? ) " ; 
 - executeInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) , DatabaseDescriptor . getClusterName ( ) ) ; 
 - return ; 
 + if ( result . isEmpty ( ) | | ! result . one ( ) . has ( " cluster _ name " ) ) 
 + { 
 + / / this is a brand new node 
 + if ( ! cfs . getSSTables ( ) . isEmpty ( ) ) 
 + throw new ConfigurationException ( " Found system keyspace files , but they couldn ' t be loaded ! " ) ; 
 + 
 + / / no system files . this is a new node . 
 + req = " INSERT INTO system . % s ( key , cluster _ name ) VALUES ( ' % s ' , ? ) " ; 
 + executeInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) , DatabaseDescriptor . getClusterName ( ) ) ; 
 + } 
 + else 
 + { 
 + String savedClusterName = result . one ( ) . getString ( " cluster _ name " ) ; 
 + if ( ! DatabaseDescriptor . getClusterName ( ) . equals ( savedClusterName ) ) 
 + throw new ConfigurationException ( " Saved cluster name " + savedClusterName + " ! = configured name " + DatabaseDescriptor . getClusterName ( ) ) ; 
 + } 
 } 
 
 - String savedClusterName = result . one ( ) . getString ( " cluster _ name " ) ; 
 - if ( ! DatabaseDescriptor . getClusterName ( ) . equals ( savedClusterName ) ) 
 - throw new ConfigurationException ( " Saved cluster name " + savedClusterName + " ! = configured name " + DatabaseDescriptor . getClusterName ( ) ) ; 
 + if ( ! Boolean . getBoolean ( " cassandra . ignore _ rack " ) ) 
 + { 
 + String req = " SELECT rack FROM system . % s WHERE key = ' % s ' " ; 
 + UntypedResultSet result = executeInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) ) ; 
 + 
 + / / Look up the Rack ( return it if found ) 
 + if ( ! result . isEmpty ( ) & & result . one ( ) . has ( " rack " ) ) 
 + { 
 + String storedRack = result . one ( ) . getString ( " rack " ) ; 
 + String currentRack = DatabaseDescriptor . getEndpointSnitch ( ) . getRack ( FBUtilities . getBroadcastAddress ( ) ) ; 
 + if ( ! storedRack . equals ( currentRack ) ) 
 + { 
 + throw new ConfigurationException ( " Cannot start node if snitch ' s rack ( " + currentRack + " ) differs from previous rack ( " + storedRack + " ) . " + 
 + " Please fix the snitch or wipe and rebootstrap this node . " ) ; 
 + } 
 + } 
 + } 
 } 
 
 public static Collection < Token > getSavedTokens ( )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / metrics / ReadRepairMetrics . java b / src / java / org / apache / cassandra / metrics / ReadRepairMetrics . java 
 index 3f48fee . . 5b61e42 100644 
 - - - a / src / java / org / apache / cassandra / metrics / ReadRepairMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / ReadRepairMetrics . java 
 @ @ - 1 , 4 + 1 , 25 @ @ 
 package org . apache . cassandra . metrics ; 
 + / * 
 + * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * 
 + * / 
 + 
 
 import java . util . concurrent . TimeUnit ; 

