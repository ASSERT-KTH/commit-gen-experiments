BLEU SCORE: 0.020980574531482755

TEST MSG: Fix handling of incorrect % z cqlshlib output on Windows
GENERATED MSG: cqlsh : Handle collections embedded into UDTs correctly .

TEST DIFF (one line): diff - - git a / bin / cqlsh . py b / bin / cqlsh . py <nl> index 999ddc4 . . 6df1d75 100644 <nl> - - - a / bin / cqlsh . py <nl> + + + b / bin / cqlsh . py <nl> @ @ - 945 , 7 + 945 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> try : <nl> import readline <nl> except ImportError : <nl> - if platform . system ( ) = = ' Windows ' : <nl> + if myplatform = = ' Windows ' : <nl> print " WARNING : pyreadline dependency missing . Install to enable tab completion . " <nl> pass <nl> else : <nl> diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py <nl> index ff5b118 . . 00d5b40 100644 <nl> - - - a / pylib / cqlshlib / formatting . py <nl> + + + b / pylib / cqlshlib / formatting . py <nl> @ @ - 16 , 16 + 16 , 20 @ @ <nl> <nl> import calendar <nl> import math <nl> + import platform <nl> import re <nl> import sys <nl> import platform <nl> import time <nl> from collections import defaultdict <nl> + <nl> from . import wcwidth <nl> from . displaying import colorme , FormattedValue , DEFAULT _ VALUE _ COLORS <nl> from datetime import datetime , timedelta <nl> from cassandra . cqltypes import EMPTY <nl> <nl> + is _ win = platform . system ( ) = = ' Windows ' <nl> + <nl> unicode _ controlchars _ re = re . compile ( r ' [ \ x00 - \ x31 \ x7f - \ xa0 ] ' ) <nl> controlchars _ re = re . compile ( r ' [ \ x00 - \ x31 \ x7f - \ xff ] ' ) <nl> <nl> @ @ - 193 , 15 + 197 , 24 @ @ def strftime ( time _ format , seconds ) : <nl> offset = - time . altzone <nl> else : <nl> offset = - time . timezone <nl> - if formatted [ - 4 : ] ! = ' 0000 ' or time _ format [ - 2 : ] ! = ' % z ' or offset = = 0 : <nl> + if not is _ win and ( formatted [ - 4 : ] ! = ' 0000 ' or time _ format [ - 2 : ] ! = ' % z ' or offset = = 0 ) : <nl> return formatted <nl> + elif is _ win and time _ format [ - 2 : ] ! = ' % z ' : <nl> + return formatted <nl> + <nl> # deal with % z on platforms where it isn ' t supported . see CASSANDRA - 4746 . <nl> if offset < 0 : <nl> sign = ' - ' <nl> else : <nl> sign = ' + ' <nl> hours , minutes = divmod ( abs ( offset ) / 60 , 60 ) <nl> - return formatted [ : - 5 ] + sign + ' { 0 : 0 = 2 } { 1 : 0 = 2 } ' . format ( hours , minutes ) <nl> + # Need to strip out invalid % z output on Windows . C libs give us ' Eastern Standard Time ' instead of + / - GMT <nl> + if is _ win and time _ format [ - 2 : ] = = ' % z ' : <nl> + # Remove chars and strip trailing spaces left behind <nl> + formatted = re . sub ( ' [ A - Za - z ] ' , ' ' , formatted ) . rstrip ( ) <nl> + return formatted + sign + ' { 0 : 0 = 2 } { 1 : 0 = 2 } ' . format ( hours , minutes ) <nl> + else : <nl> + return formatted [ : - 5 ] + sign + ' { 0 : 0 = 2 } { 1 : 0 = 2 } ' . format ( hours , minutes ) <nl> <nl> @ formatter _ for ( ' Date ' ) <nl> def format _ value _ date ( val , colormap , * * _ ) :
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / bin / cqlsh . py b / bin / cqlsh . py 
 index 999ddc4 . . 6df1d75 100644 
 - - - a / bin / cqlsh . py 
 + + + b / bin / cqlsh . py 
 @ @ - 945 , 7 + 945 , 7 @ @ class Shell ( cmd . Cmd ) : 
 try : 
 import readline 
 except ImportError : 
 - if platform . system ( ) = = ' Windows ' : 
 + if myplatform = = ' Windows ' : 
 print " WARNING : pyreadline dependency missing . Install to enable tab completion . " 
 pass 
 else : 
 diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py 
 index ff5b118 . . 00d5b40 100644 
 - - - a / pylib / cqlshlib / formatting . py 
 + + + b / pylib / cqlshlib / formatting . py 
 @ @ - 16 , 16 + 16 , 20 @ @ 
 
 import calendar 
 import math 
 + import platform 
 import re 
 import sys 
 import platform 
 import time 
 from collections import defaultdict 
 + 
 from . import wcwidth 
 from . displaying import colorme , FormattedValue , DEFAULT _ VALUE _ COLORS 
 from datetime import datetime , timedelta 
 from cassandra . cqltypes import EMPTY 
 
 + is _ win = platform . system ( ) = = ' Windows ' 
 + 
 unicode _ controlchars _ re = re . compile ( r ' [ \ x00 - \ x31 \ x7f - \ xa0 ] ' ) 
 controlchars _ re = re . compile ( r ' [ \ x00 - \ x31 \ x7f - \ xff ] ' ) 
 
 @ @ - 193 , 15 + 197 , 24 @ @ def strftime ( time _ format , seconds ) : 
 offset = - time . altzone 
 else : 
 offset = - time . timezone 
 - if formatted [ - 4 : ] ! = ' 0000 ' or time _ format [ - 2 : ] ! = ' % z ' or offset = = 0 : 
 + if not is _ win and ( formatted [ - 4 : ] ! = ' 0000 ' or time _ format [ - 2 : ] ! = ' % z ' or offset = = 0 ) : 
 return formatted 
 + elif is _ win and time _ format [ - 2 : ] ! = ' % z ' : 
 + return formatted 
 + 
 # deal with % z on platforms where it isn ' t supported . see CASSANDRA - 4746 . 
 if offset < 0 : 
 sign = ' - ' 
 else : 
 sign = ' + ' 
 hours , minutes = divmod ( abs ( offset ) / 60 , 60 ) 
 - return formatted [ : - 5 ] + sign + ' { 0 : 0 = 2 } { 1 : 0 = 2 } ' . format ( hours , minutes ) 
 + # Need to strip out invalid % z output on Windows . C libs give us ' Eastern Standard Time ' instead of + / - GMT 
 + if is _ win and time _ format [ - 2 : ] = = ' % z ' : 
 + # Remove chars and strip trailing spaces left behind 
 + formatted = re . sub ( ' [ A - Za - z ] ' , ' ' , formatted ) . rstrip ( ) 
 + return formatted + sign + ' { 0 : 0 = 2 } { 1 : 0 = 2 } ' . format ( hours , minutes ) 
 + else : 
 + return formatted [ : - 5 ] + sign + ' { 0 : 0 = 2 } { 1 : 0 = 2 } ' . format ( hours , minutes ) 
 
 @ formatter _ for ( ' Date ' ) 
 def format _ value _ date ( val , colormap , * * _ ) :

NEAREST DIFF:
ELIMINATEDSENTENCE
