BLEU SCORE: 0.024367494694068095

TEST MSG: Fix prepared statement on thrift post - 6659
GENERATED MSG: add cqlVersion to things ClientState . reset cleans up

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index fe818fd . . 64ea5e5 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . exceptions . * ; <nl> import org . apache . cassandra . service . ClientState ; <nl> import org . apache . cassandra . service . QueryState ; <nl> + import org . apache . cassandra . thrift . ThriftClientState ; <nl> import org . apache . cassandra . tracing . Tracing ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . MD5Digest ; <nl> @ @ - 237 , 7 + 238 , 8 @ @ public class QueryProcessor implements QueryHandler <nl> public ResultMessage . Prepared prepare ( String queryString , QueryState queryState ) <nl> throws RequestValidationException <nl> { <nl> - return prepare ( queryString , queryState . getClientState ( ) , false ) ; <nl> + ClientState cState = queryState . getClientState ( ) ; <nl> + return prepare ( queryString , cState , cState instanceof ThriftClientState ) ; <nl> } <nl> <nl> public static ResultMessage . Prepared prepare ( String queryString , ClientState clientState , boolean forThrift )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4d2fd27 . . c680f03 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 19 , 7 + 19 , 6 @ @ <nl> * Pluggable Thrift transport factories for CLI ( CASSANDRA - 4609 ) <nl> * Backport adding AlterKeyspace statement ( CASSANDRA - 4611 ) <nl> * ( CQL3 ) Correcty accept upper - case data types ( CASSANDRA - 4770 ) <nl> - * Add ability to use custom TServerFactory implementations ( CASSANDRA - 4608 ) <nl> Merged from 1 . 0 : <nl> * Switch from NBHM to CHM in MessagingService ' s callback map , which <nl> prevents OOM in long - running instances ( CASSANDRA - 4708 ) <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index 5e0be98 . . c4732db 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 287 , 7 + 287 , 7 @ @ rpc _ port : 9160 <nl> # enable or disable keepalive on rpc connections <nl> rpc _ keepalive : true <nl> <nl> - # Cassandra provides three out - of - the - box options for the RPC Server : <nl> + # Cassandra provides three options for the RPC Server : <nl> # <nl> # sync - > One connection per thread in the rpc pool ( see below ) . <nl> # For a very large number of clients , memory will be your limiting <nl> @ @ - 305 , 9 + 305 , 6 @ @ rpc _ keepalive : true <nl> # <nl> # The default is sync because on Windows hsha is about 30 % slower . On Linux , <nl> # sync / hsha performance is about the same , with hsha of course using less memory . <nl> - # <nl> - # Alternatively , can provide your own RPC server by providing the fully - qualified class name <nl> - # of an o . a . c . t . TServerFactory that can create an instance of it . <nl> rpc _ server _ type : sync <nl> <nl> # Uncomment rpc _ min | max | thread to set request pool size . <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 7ed6170 . . 20fa981 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 381 , 6 + 381 , 8 @ @ public class DatabaseDescriptor <nl> if ( conf . stream _ throughput _ outbound _ megabits _ per _ sec = = null ) <nl> conf . stream _ throughput _ outbound _ megabits _ per _ sec = 400 ; <nl> <nl> + if ( ! CassandraDaemon . rpc _ server _ types . contains ( conf . rpc _ server _ type . toLowerCase ( ) ) ) <nl> + throw new ConfigurationException ( " Unknown rpc _ server _ type : " + conf . rpc _ server _ type ) ; <nl> if ( conf . rpc _ min _ threads = = null ) <nl> conf . rpc _ min _ threads = conf . rpc _ server _ type . toLowerCase ( ) . equals ( " hsha " ) <nl> ? Runtime . getRuntime ( ) . availableProcessors ( ) * 4 <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> index 2decb8e . . 7153c08 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> @ @ - 20 , 14 + 20 , 28 @ @ package org . apache . cassandra . thrift ; <nl> <nl> import java . net . InetAddress ; <nl> import java . net . InetSocketAddress ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + import java . util . concurrent . ExecutorService ; <nl> + import java . util . concurrent . SynchronousQueue ; <nl> + import java . util . concurrent . TimeUnit ; <nl> <nl> + import org . apache . cassandra . service . AbstractCassandraDaemon ; <nl> + import org . apache . thrift . server . TNonblockingServer ; <nl> + import org . apache . thrift . server . TThreadPoolServer ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; <nl> + import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . service . AbstractCassandraDaemon ; <nl> + import org . apache . thrift . protocol . TProtocolFactory ; <nl> import org . apache . thrift . server . TServer ; <nl> import org . apache . thrift . transport . TFramedTransport ; <nl> + import org . apache . thrift . transport . TNonblockingServerTransport ; <nl> + import org . apache . thrift . transport . TServerTransport ; <nl> + import org . apache . thrift . transport . TTransportException ; <nl> + import org . apache . thrift . transport . TTransportFactory ; <nl> <nl> / * * <nl> * This class supports two methods for creating a Cassandra node daemon , <nl> @ @ - 48 , 9 + 62 , 10 @ @ public class CassandraDaemon extends org . apache . cassandra . service . AbstractCassan <nl> } <nl> <nl> private static Logger logger = LoggerFactory . getLogger ( CassandraDaemon . class ) ; <nl> - final static String SYNC = " sync " ; <nl> - final static String ASYNC = " async " ; <nl> - final static String HSHA = " hsha " ; <nl> + private final static String SYNC = " sync " ; <nl> + private final static String ASYNC = " async " ; <nl> + private final static String HSHA = " hsha " ; <nl> + public final static List < String > rpc _ server _ types = Arrays . asList ( SYNC , ASYNC , HSHA ) ; <nl> private ThriftServer server ; <nl> <nl> protected void startServer ( ) <nl> @ @ - 102 , 21 + 117 , 94 @ @ public class CassandraDaemon extends org . apache . cassandra . service . AbstractCassan <nl> public ThriftServer ( InetAddress listenAddr , int listenPort ) <nl> { <nl> / / now we start listening for clients <nl> + final CassandraServer cassandraServer = new CassandraServer ( ) ; <nl> + Cassandra . Processor processor = new Cassandra . Processor ( cassandraServer ) ; <nl> + <nl> + / / Transport <nl> logger . info ( String . format ( " Binding thrift service to % s : % s " , listenAddr , listenPort ) ) ; <nl> <nl> - TServerFactory . Args args = new TServerFactory . Args ( ) ; <nl> - args . tProtocolFactory = new TBinaryProtocol . Factory ( true , true , DatabaseDescriptor . getThriftMaxMessageLength ( ) ) ; <nl> - args . addr = new InetSocketAddress ( listenAddr , listenPort ) ; <nl> - args . cassandraServer = new CassandraServer ( ) ; <nl> - args . processor = new Cassandra . Processor ( args . cassandraServer ) ; <nl> - args . keepAlive = DatabaseDescriptor . getRpcKeepAlive ( ) ; <nl> - args . sendBufferSize = DatabaseDescriptor . getRpcSendBufferSize ( ) ; <nl> - args . recvBufferSize = DatabaseDescriptor . getRpcRecvBufferSize ( ) ; <nl> + / / Protocol factory <nl> + TProtocolFactory tProtocolFactory = new TBinaryProtocol . Factory ( true , true , DatabaseDescriptor . getThriftMaxMessageLength ( ) ) ; <nl> + <nl> + / / Transport factory <nl> int tFramedTransportSize = DatabaseDescriptor . getThriftFramedTransportSize ( ) ; <nl> - logger . info ( " Using TFramedTransport with a max frame size of { } bytes . " , tFramedTransportSize ) ; <nl> - args . inTransportFactory = new TFramedTransport . Factory ( tFramedTransportSize ) ; <nl> - args . outTransportFactory = new TFramedTransport . Factory ( tFramedTransportSize ) ; <nl> - serverEngine = new TServerCustomFactory ( DatabaseDescriptor . getRpcServerType ( ) ) . buildTServer ( args ) ; <nl> + TTransportFactory inTransportFactory = new TFramedTransport . Factory ( tFramedTransportSize ) ; <nl> + TTransportFactory outTransportFactory = new TFramedTransport . Factory ( tFramedTransportSize ) ; <nl> + logger . info ( " Using TFastFramedTransport with a max frame size of { } bytes . " , tFramedTransportSize ) ; <nl> + <nl> + if ( DatabaseDescriptor . getRpcServerType ( ) . equalsIgnoreCase ( SYNC ) ) <nl> + { <nl> + TServerTransport serverTransport ; <nl> + try <nl> + { <nl> + serverTransport = new TCustomServerSocket ( new InetSocketAddress ( listenAddr , listenPort ) , <nl> + DatabaseDescriptor . getRpcKeepAlive ( ) , <nl> + DatabaseDescriptor . getRpcSendBufferSize ( ) , <nl> + DatabaseDescriptor . getRpcRecvBufferSize ( ) ) ; <nl> + } <nl> + catch ( TTransportException e ) <nl> + { <nl> + throw new RuntimeException ( String . format ( " Unable to create thrift socket to % s : % s " , listenAddr , listenPort ) , e ) ; <nl> + } <nl> + / / ThreadPool Server and will be invocation per connection basis . . . <nl> + TThreadPoolServer . Args serverArgs = new TThreadPoolServer . Args ( serverTransport ) <nl> + . minWorkerThreads ( DatabaseDescriptor . getRpcMinThreads ( ) ) <nl> + . maxWorkerThreads ( DatabaseDescriptor . getRpcMaxThreads ( ) ) <nl> + . inputTransportFactory ( inTransportFactory ) <nl> + . outputTransportFactory ( outTransportFactory ) <nl> + . inputProtocolFactory ( tProtocolFactory ) <nl> + . outputProtocolFactory ( tProtocolFactory ) <nl> + . processor ( processor ) ; <nl> + ExecutorService executorService = new CleaningThreadPool ( cassandraServer . clientState , serverArgs . minWorkerThreads , serverArgs . maxWorkerThreads ) ; <nl> + serverEngine = new CustomTThreadPoolServer ( serverArgs , executorService ) ; <nl> + logger . info ( String . format ( " Using synchronous / threadpool thrift server on % s : % s " , listenAddr , listenPort ) ) ; <nl> + } <nl> + else <nl> + { <nl> + TNonblockingServerTransport serverTransport ; <nl> + try <nl> + { <nl> + serverTransport = new TCustomNonblockingServerSocket ( new InetSocketAddress ( listenAddr , listenPort ) , <nl> + DatabaseDescriptor . getRpcKeepAlive ( ) , <nl> + DatabaseDescriptor . getRpcSendBufferSize ( ) , <nl> + DatabaseDescriptor . getRpcRecvBufferSize ( ) ) ; <nl> + } <nl> + catch ( TTransportException e ) <nl> + { <nl> + throw new RuntimeException ( String . format ( " Unable to create thrift socket to % s : % s " , listenAddr , listenPort ) , e ) ; <nl> + } <nl> + <nl> + if ( DatabaseDescriptor . getRpcServerType ( ) . equalsIgnoreCase ( ASYNC ) ) <nl> + { <nl> + / / This is single threaded hence the invocation will be all <nl> + / / in one thread . <nl> + TNonblockingServer . Args serverArgs = new TNonblockingServer . Args ( serverTransport ) . inputTransportFactory ( inTransportFactory ) <nl> + . outputTransportFactory ( outTransportFactory ) <nl> + . inputProtocolFactory ( tProtocolFactory ) <nl> + . outputProtocolFactory ( tProtocolFactory ) <nl> + . processor ( processor ) ; <nl> + logger . info ( String . format ( " Using non - blocking / asynchronous thrift server on % s : % s " , listenAddr , listenPort ) ) ; <nl> + serverEngine = new CustomTNonBlockingServer ( serverArgs ) ; <nl> + } <nl> + else if ( DatabaseDescriptor . getRpcServerType ( ) . equalsIgnoreCase ( HSHA ) ) <nl> + { <nl> + / / This is NIO selector service but the invocation will be Multi - Threaded with the Executor service . <nl> + ExecutorService executorService = new JMXEnabledThreadPoolExecutor ( DatabaseDescriptor . getRpcMinThreads ( ) , <nl> + DatabaseDescriptor . getRpcMaxThreads ( ) , <nl> + 60L , <nl> + TimeUnit . SECONDS , <nl> + new SynchronousQueue < Runnable > ( ) , <nl> + new NamedThreadFactory ( " RPC - Thread " ) , " RPC - THREAD - POOL " ) ; <nl> + TNonblockingServer . Args serverArgs = new TNonblockingServer . Args ( serverTransport ) . inputTransportFactory ( inTransportFactory ) <nl> + . outputTransportFactory ( outTransportFactory ) <nl> + . inputProtocolFactory ( tProtocolFactory ) <nl> + . outputProtocolFactory ( tProtocolFactory ) <nl> + . processor ( processor ) ; <nl> + logger . info ( String . format ( " Using custom half - sync / half - async thrift server on % s : % s " , listenAddr , listenPort ) ) ; <nl> + / / Check for available processors in the system which will be equal to the IO Threads . <nl> + serverEngine = new CustomTHsHaServer ( serverArgs , executorService , Runtime . getRuntime ( ) . availableProcessors ( ) ) ; <nl> + } <nl> + } <nl> } <nl> <nl> public void run ( ) <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CustomTHsHaServer . java b / src / java / org / apache / cassandra / thrift / CustomTHsHaServer . java <nl> index 6ade5ca . . 350a13d 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CustomTHsHaServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CustomTHsHaServer . java <nl> @ @ - 22 , 7 + 22 , 6 @ @ package org . apache . cassandra . thrift ; <nl> <nl> <nl> import java . io . IOException ; <nl> - import java . net . InetSocketAddress ; <nl> import java . nio . channels . SelectionKey ; <nl> import java . nio . channels . Selector ; <nl> import java . nio . channels . spi . SelectorProvider ; <nl> @ @ - 31 , 15 + 30 , 9 @ @ import java . util . Iterator ; <nl> import java . util . Set ; <nl> import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . RejectedExecutionException ; <nl> - import java . util . concurrent . SynchronousQueue ; <nl> - import java . util . concurrent . TimeUnit ; <nl> <nl> - import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; <nl> - import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . service . SocketSessionManagementService ; <nl> import org . apache . thrift . server . TNonblockingServer ; <nl> - import org . apache . thrift . server . TServer ; <nl> import org . apache . thrift . transport . TNonblockingServerTransport ; <nl> import org . apache . thrift . transport . TNonblockingSocket ; <nl> import org . apache . thrift . transport . TNonblockingTransport ; <nl> @ @ - 350 , 36 + 343 , 4 @ @ public class CustomTHsHaServer extends TNonblockingServer <nl> / / thread because the method is not synchronized with the rest of the <nl> / / selectors threads . <nl> } <nl> - <nl> - public static class Factory implements TServerFactory <nl> - { <nl> - public TServer buildTServer ( Args args ) <nl> - { <nl> - final InetSocketAddress addr = args . addr ; <nl> - TNonblockingServerTransport serverTransport ; <nl> - try <nl> - { <nl> - serverTransport = new TCustomNonblockingServerSocket ( addr , args . keepAlive , args . sendBufferSize , args . recvBufferSize ) ; <nl> - } <nl> - catch ( TTransportException e ) <nl> - { <nl> - throw new RuntimeException ( String . format ( " Unable to create thrift socket to % s : % s " , addr . getAddress ( ) , addr . getPort ( ) ) , e ) ; <nl> - } <nl> - <nl> - / / This is NIO selector service but the invocation will be Multi - Threaded with the Executor service . <nl> - ExecutorService executorService = new JMXEnabledThreadPoolExecutor ( DatabaseDescriptor . getRpcMinThreads ( ) , <nl> - DatabaseDescriptor . getRpcMaxThreads ( ) , <nl> - 60L , <nl> - TimeUnit . SECONDS , <nl> - new SynchronousQueue < Runnable > ( ) , <nl> - new NamedThreadFactory ( " RPC - Thread " ) , " RPC - THREAD - POOL " ) ; <nl> - TNonblockingServer . Args serverArgs = new TNonblockingServer . Args ( serverTransport ) . inputTransportFactory ( args . inTransportFactory ) <nl> - . outputTransportFactory ( args . outTransportFactory ) <nl> - . inputProtocolFactory ( args . tProtocolFactory ) <nl> - . outputProtocolFactory ( args . tProtocolFactory ) <nl> - . processor ( args . processor ) ; <nl> - / / Check for available processors in the system which will be equal to the IO Threads . <nl> - return new CustomTHsHaServer ( serverArgs , executorService , Runtime . getRuntime ( ) . availableProcessors ( ) ) ; <nl> - } <nl> - } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CustomTNonBlockingServer . java b / src / java / org / apache / cassandra / thrift / CustomTNonBlockingServer . java <nl> index 479fba8 . . 0b6c90b 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CustomTNonBlockingServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CustomTNonBlockingServer . java <nl> @ @ - 21 , 14 + 21 , 9 @ @ package org . apache . cassandra . thrift ; <nl> * / <nl> <nl> <nl> - import java . net . InetSocketAddress ; <nl> - <nl> import org . apache . cassandra . service . SocketSessionManagementService ; <nl> import org . apache . thrift . server . TNonblockingServer ; <nl> - import org . apache . thrift . server . TServer ; <nl> - import org . apache . thrift . transport . TNonblockingServerTransport ; <nl> import org . apache . thrift . transport . TNonblockingSocket ; <nl> - import org . apache . thrift . transport . TTransportException ; <nl> <nl> public class CustomTNonBlockingServer extends TNonblockingServer <nl> { <nl> @ @ - 45 , 30 + 40 , 4 @ @ public class CustomTNonBlockingServer extends TNonblockingServer <nl> frameBuffer . invoke ( ) ; <nl> return true ; <nl> } <nl> - <nl> - public static class Factory implements TServerFactory <nl> - { <nl> - public TServer buildTServer ( Args args ) <nl> - { <nl> - final InetSocketAddress addr = args . addr ; <nl> - TNonblockingServerTransport serverTransport ; <nl> - try <nl> - { <nl> - serverTransport = new TCustomNonblockingServerSocket ( addr , args . keepAlive , args . sendBufferSize , args . recvBufferSize ) ; <nl> - } <nl> - catch ( TTransportException e ) <nl> - { <nl> - throw new RuntimeException ( String . format ( " Unable to create thrift socket to % s : % s " , addr . getAddress ( ) , addr . getPort ( ) ) , e ) ; <nl> - } <nl> - <nl> - / / This is single threaded hence the invocation will be all <nl> - / / in one thread . <nl> - TNonblockingServer . Args serverArgs = new TNonblockingServer . Args ( serverTransport ) . inputTransportFactory ( args . inTransportFactory ) <nl> - . outputTransportFactory ( args . outTransportFactory ) <nl> - . inputProtocolFactory ( args . tProtocolFactory ) <nl> - . outputProtocolFactory ( args . tProtocolFactory ) <nl> - . processor ( args . processor ) ; <nl> - return new CustomTNonBlockingServer ( serverArgs ) ; <nl> - } <nl> - } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java b / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java <nl> index fc07c60 . . d6ba012 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ <nl> <nl> package org . apache . cassandra . thrift ; <nl> <nl> - import java . net . InetSocketAddress ; <nl> import java . net . SocketTimeoutException ; <nl> import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> @ @ - 27 , 14 + 26 , 11 @ @ import java . util . concurrent . atomic . AtomicInteger ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . service . AbstractCassandraDaemon ; <nl> import org . apache . thrift . TException ; <nl> import org . apache . thrift . TProcessor ; <nl> import org . apache . thrift . protocol . TProtocol ; <nl> import org . apache . thrift . server . TServer ; <nl> import org . apache . thrift . server . TThreadPoolServer ; <nl> - import org . apache . thrift . transport . TServerTransport ; <nl> import org . apache . thrift . transport . TTransport ; <nl> import org . apache . thrift . transport . TTransportException ; <nl> <nl> @ @ - 223 , 32 + 219 , 4 @ @ public class CustomTThreadPoolServer extends TServer <nl> } <nl> } <nl> } <nl> - <nl> - public static class Factory implements TServerFactory <nl> - { <nl> - public TServer buildTServer ( Args args ) <nl> - { <nl> - final InetSocketAddress addr = args . addr ; <nl> - TServerTransport serverTransport ; <nl> - try <nl> - { <nl> - serverTransport = new TCustomServerSocket ( addr , args . keepAlive , args . sendBufferSize , args . recvBufferSize ) ; <nl> - } <nl> - catch ( TTransportException e ) <nl> - { <nl> - throw new RuntimeException ( String . format ( " Unable to create thrift socket to % s : % s " , addr . getAddress ( ) , addr . getPort ( ) ) , e ) ; <nl> - } <nl> - / / ThreadPool Server and will be invocation per connection basis . . . <nl> - TThreadPoolServer . Args serverArgs = new TThreadPoolServer . Args ( serverTransport ) <nl> - . minWorkerThreads ( DatabaseDescriptor . getRpcMinThreads ( ) ) <nl> - . maxWorkerThreads ( DatabaseDescriptor . getRpcMaxThreads ( ) ) <nl> - . inputTransportFactory ( args . inTransportFactory ) <nl> - . outputTransportFactory ( args . outTransportFactory ) <nl> - . inputProtocolFactory ( args . tProtocolFactory ) <nl> - . outputProtocolFactory ( args . tProtocolFactory ) <nl> - . processor ( args . processor ) ; <nl> - ExecutorService executorService = new AbstractCassandraDaemon . CleaningThreadPool ( args . cassandraServer . clientState , serverArgs . minWorkerThreads , serverArgs . maxWorkerThreads ) ; <nl> - return new CustomTThreadPoolServer ( serverArgs , executorService ) ; <nl> - } <nl> - } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / TServerCustomFactory . java b / src / java / org / apache / cassandra / thrift / TServerCustomFactory . java <nl> deleted file mode 100644 <nl> index 50e4fac . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / thrift / TServerCustomFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 75 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , <nl> - * software distributed under the License is distributed on an <nl> - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> - * KIND , either express or implied . See the License for the <nl> - * specific language governing permissions and limitations <nl> - * under the License . <nl> - * / <nl> - package org . apache . cassandra . thrift ; <nl> - <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - <nl> - import org . apache . thrift . server . TServer ; <nl> - <nl> - / * * <nl> - * Helper implementation to create a thrift TServer based on one of the common types we support ( sync , async , hsha ) , <nl> - * or a custom type by setting the fully qualified java class name in the rpc _ server _ type setting . <nl> - * / <nl> - public class TServerCustomFactory implements TServerFactory <nl> - { <nl> - private static Logger logger = LoggerFactory . getLogger ( TServerCustomFactory . class ) ; <nl> - private final String serverType ; <nl> - <nl> - public TServerCustomFactory ( String serverType ) <nl> - { <nl> - assert serverType ! = null ; <nl> - this . serverType = serverType ; <nl> - } <nl> - <nl> - public TServer buildTServer ( TServerFactory . Args args ) <nl> - { <nl> - TServer server ; <nl> - if ( CassandraDaemon . SYNC . equalsIgnoreCase ( serverType ) ) <nl> - { <nl> - server = new CustomTThreadPoolServer . Factory ( ) . buildTServer ( args ) ; <nl> - logger . info ( String . format ( " Using synchronous / threadpool thrift server on % s : % s " , args . addr . getHostName ( ) , args . addr . getPort ( ) ) ) ; <nl> - } <nl> - else if ( CassandraDaemon . ASYNC . equalsIgnoreCase ( serverType ) ) <nl> - { <nl> - server = new CustomTNonBlockingServer . Factory ( ) . buildTServer ( args ) ; <nl> - logger . info ( String . format ( " Using non - blocking / asynchronous thrift server on % s : % s " , args . addr . getHostName ( ) , args . addr . getPort ( ) ) ) ; <nl> - } <nl> - else if ( CassandraDaemon . HSHA . equalsIgnoreCase ( serverType ) ) <nl> - { <nl> - server = new CustomTHsHaServer . Factory ( ) . buildTServer ( args ) ; <nl> - logger . info ( String . format ( " Using custom half - sync / half - async thrift server on % s : % s " , args . addr . getHostName ( ) , args . addr . getPort ( ) ) ) ; <nl> - } <nl> - else <nl> - { <nl> - TServerFactory serverFactory ; <nl> - try <nl> - { <nl> - serverFactory = ( TServerFactory ) Class . forName ( serverType ) . newInstance ( ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new RuntimeException ( " Failed to instantiate server factory : " + serverType , e ) ; <nl> - } <nl> - server = serverFactory . buildTServer ( args ) ; <nl> - logger . info ( String . format ( " Using custom thrift server % s on % s : % s " , server . getClass ( ) . getName ( ) , args . addr . getHostName ( ) , args . addr . getPort ( ) ) ) ; <nl> - } <nl> - return server ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / TServerFactory . java b / src / java / org / apache / cassandra / thrift / TServerFactory . java <nl> deleted file mode 100644 <nl> index 0c93867 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / thrift / TServerFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 43 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , <nl> - * software distributed under the License is distributed on an <nl> - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> - * KIND , either express or implied . See the License for the <nl> - * specific language governing permissions and limitations <nl> - * under the License . <nl> - * / <nl> - package org . apache . cassandra . thrift ; <nl> - <nl> - import java . net . InetSocketAddress ; <nl> - <nl> - import org . apache . thrift . protocol . TProtocolFactory ; <nl> - import org . apache . thrift . server . TServer ; <nl> - import org . apache . thrift . transport . TTransportFactory ; <nl> - <nl> - public interface TServerFactory <nl> - { <nl> - TServer buildTServer ( Args args ) ; <nl> - <nl> - public static class Args <nl> - { <nl> - public InetSocketAddress addr ; <nl> - public CassandraServer cassandraServer ; <nl> - public Cassandra . Processor processor ; <nl> - public TProtocolFactory tProtocolFactory ; <nl> - public TTransportFactory inTransportFactory ; <nl> - public TTransportFactory outTransportFactory ; <nl> - public Integer sendBufferSize ; <nl> - public Integer recvBufferSize ; <nl> - public boolean keepAlive ; <nl> - } <nl> - }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index fe818fd . . 64ea5e5 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . exceptions . * ; 
 import org . apache . cassandra . service . ClientState ; 
 import org . apache . cassandra . service . QueryState ; 
 + import org . apache . cassandra . thrift . ThriftClientState ; 
 import org . apache . cassandra . tracing . Tracing ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . MD5Digest ; 
 @ @ - 237 , 7 + 238 , 8 @ @ public class QueryProcessor implements QueryHandler 
 public ResultMessage . Prepared prepare ( String queryString , QueryState queryState ) 
 throws RequestValidationException 
 { 
 - return prepare ( queryString , queryState . getClientState ( ) , false ) ; 
 + ClientState cState = queryState . getClientState ( ) ; 
 + return prepare ( queryString , cState , cState instanceof ThriftClientState ) ; 
 } 
 
 public static ResultMessage . Prepared prepare ( String queryString , ClientState clientState , boolean forThrift )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4d2fd27 . . c680f03 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 19 , 7 + 19 , 6 @ @ 
 * Pluggable Thrift transport factories for CLI ( CASSANDRA - 4609 ) 
 * Backport adding AlterKeyspace statement ( CASSANDRA - 4611 ) 
 * ( CQL3 ) Correcty accept upper - case data types ( CASSANDRA - 4770 ) 
 - * Add ability to use custom TServerFactory implementations ( CASSANDRA - 4608 ) 
 Merged from 1 . 0 : 
 * Switch from NBHM to CHM in MessagingService ' s callback map , which 
 prevents OOM in long - running instances ( CASSANDRA - 4708 ) 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index 5e0be98 . . c4732db 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 287 , 7 + 287 , 7 @ @ rpc _ port : 9160 
 # enable or disable keepalive on rpc connections 
 rpc _ keepalive : true 
 
 - # Cassandra provides three out - of - the - box options for the RPC Server : 
 + # Cassandra provides three options for the RPC Server : 
 # 
 # sync - > One connection per thread in the rpc pool ( see below ) . 
 # For a very large number of clients , memory will be your limiting 
 @ @ - 305 , 9 + 305 , 6 @ @ rpc _ keepalive : true 
 # 
 # The default is sync because on Windows hsha is about 30 % slower . On Linux , 
 # sync / hsha performance is about the same , with hsha of course using less memory . 
 - # 
 - # Alternatively , can provide your own RPC server by providing the fully - qualified class name 
 - # of an o . a . c . t . TServerFactory that can create an instance of it . 
 rpc _ server _ type : sync 
 
 # Uncomment rpc _ min | max | thread to set request pool size . 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 7ed6170 . . 20fa981 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 381 , 6 + 381 , 8 @ @ public class DatabaseDescriptor 
 if ( conf . stream _ throughput _ outbound _ megabits _ per _ sec = = null ) 
 conf . stream _ throughput _ outbound _ megabits _ per _ sec = 400 ; 
 
 + if ( ! CassandraDaemon . rpc _ server _ types . contains ( conf . rpc _ server _ type . toLowerCase ( ) ) ) 
 + throw new ConfigurationException ( " Unknown rpc _ server _ type : " + conf . rpc _ server _ type ) ; 
 if ( conf . rpc _ min _ threads = = null ) 
 conf . rpc _ min _ threads = conf . rpc _ server _ type . toLowerCase ( ) . equals ( " hsha " ) 
 ? Runtime . getRuntime ( ) . availableProcessors ( ) * 4 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 index 2decb8e . . 7153c08 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 @ @ - 20 , 14 + 20 , 28 @ @ package org . apache . cassandra . thrift ; 
 
 import java . net . InetAddress ; 
 import java . net . InetSocketAddress ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + import java . util . concurrent . ExecutorService ; 
 + import java . util . concurrent . SynchronousQueue ; 
 + import java . util . concurrent . TimeUnit ; 
 
 + import org . apache . cassandra . service . AbstractCassandraDaemon ; 
 + import org . apache . thrift . server . TNonblockingServer ; 
 + import org . apache . thrift . server . TThreadPoolServer ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; 
 + import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . service . AbstractCassandraDaemon ; 
 + import org . apache . thrift . protocol . TProtocolFactory ; 
 import org . apache . thrift . server . TServer ; 
 import org . apache . thrift . transport . TFramedTransport ; 
 + import org . apache . thrift . transport . TNonblockingServerTransport ; 
 + import org . apache . thrift . transport . TServerTransport ; 
 + import org . apache . thrift . transport . TTransportException ; 
 + import org . apache . thrift . transport . TTransportFactory ; 
 
 / * * 
 * This class supports two methods for creating a Cassandra node daemon , 
 @ @ - 48 , 9 + 62 , 10 @ @ public class CassandraDaemon extends org . apache . cassandra . service . AbstractCassan 
 } 
 
 private static Logger logger = LoggerFactory . getLogger ( CassandraDaemon . class ) ; 
 - final static String SYNC = " sync " ; 
 - final static String ASYNC = " async " ; 
 - final static String HSHA = " hsha " ; 
 + private final static String SYNC = " sync " ; 
 + private final static String ASYNC = " async " ; 
 + private final static String HSHA = " hsha " ; 
 + public final static List < String > rpc _ server _ types = Arrays . asList ( SYNC , ASYNC , HSHA ) ; 
 private ThriftServer server ; 
 
 protected void startServer ( ) 
 @ @ - 102 , 21 + 117 , 94 @ @ public class CassandraDaemon extends org . apache . cassandra . service . AbstractCassan 
 public ThriftServer ( InetAddress listenAddr , int listenPort ) 
 { 
 / / now we start listening for clients 
 + final CassandraServer cassandraServer = new CassandraServer ( ) ; 
 + Cassandra . Processor processor = new Cassandra . Processor ( cassandraServer ) ; 
 + 
 + / / Transport 
 logger . info ( String . format ( " Binding thrift service to % s : % s " , listenAddr , listenPort ) ) ; 
 
 - TServerFactory . Args args = new TServerFactory . Args ( ) ; 
 - args . tProtocolFactory = new TBinaryProtocol . Factory ( true , true , DatabaseDescriptor . getThriftMaxMessageLength ( ) ) ; 
 - args . addr = new InetSocketAddress ( listenAddr , listenPort ) ; 
 - args . cassandraServer = new CassandraServer ( ) ; 
 - args . processor = new Cassandra . Processor ( args . cassandraServer ) ; 
 - args . keepAlive = DatabaseDescriptor . getRpcKeepAlive ( ) ; 
 - args . sendBufferSize = DatabaseDescriptor . getRpcSendBufferSize ( ) ; 
 - args . recvBufferSize = DatabaseDescriptor . getRpcRecvBufferSize ( ) ; 
 + / / Protocol factory 
 + TProtocolFactory tProtocolFactory = new TBinaryProtocol . Factory ( true , true , DatabaseDescriptor . getThriftMaxMessageLength ( ) ) ; 
 + 
 + / / Transport factory 
 int tFramedTransportSize = DatabaseDescriptor . getThriftFramedTransportSize ( ) ; 
 - logger . info ( " Using TFramedTransport with a max frame size of { } bytes . " , tFramedTransportSize ) ; 
 - args . inTransportFactory = new TFramedTransport . Factory ( tFramedTransportSize ) ; 
 - args . outTransportFactory = new TFramedTransport . Factory ( tFramedTransportSize ) ; 
 - serverEngine = new TServerCustomFactory ( DatabaseDescriptor . getRpcServerType ( ) ) . buildTServer ( args ) ; 
 + TTransportFactory inTransportFactory = new TFramedTransport . Factory ( tFramedTransportSize ) ; 
 + TTransportFactory outTransportFactory = new TFramedTransport . Factory ( tFramedTransportSize ) ; 
 + logger . info ( " Using TFastFramedTransport with a max frame size of { } bytes . " , tFramedTransportSize ) ; 
 + 
 + if ( DatabaseDescriptor . getRpcServerType ( ) . equalsIgnoreCase ( SYNC ) ) 
 + { 
 + TServerTransport serverTransport ; 
 + try 
 + { 
 + serverTransport = new TCustomServerSocket ( new InetSocketAddress ( listenAddr , listenPort ) , 
 + DatabaseDescriptor . getRpcKeepAlive ( ) , 
 + DatabaseDescriptor . getRpcSendBufferSize ( ) , 
 + DatabaseDescriptor . getRpcRecvBufferSize ( ) ) ; 
 + } 
 + catch ( TTransportException e ) 
 + { 
 + throw new RuntimeException ( String . format ( " Unable to create thrift socket to % s : % s " , listenAddr , listenPort ) , e ) ; 
 + } 
 + / / ThreadPool Server and will be invocation per connection basis . . . 
 + TThreadPoolServer . Args serverArgs = new TThreadPoolServer . Args ( serverTransport ) 
 + . minWorkerThreads ( DatabaseDescriptor . getRpcMinThreads ( ) ) 
 + . maxWorkerThreads ( DatabaseDescriptor . getRpcMaxThreads ( ) ) 
 + . inputTransportFactory ( inTransportFactory ) 
 + . outputTransportFactory ( outTransportFactory ) 
 + . inputProtocolFactory ( tProtocolFactory ) 
 + . outputProtocolFactory ( tProtocolFactory ) 
 + . processor ( processor ) ; 
 + ExecutorService executorService = new CleaningThreadPool ( cassandraServer . clientState , serverArgs . minWorkerThreads , serverArgs . maxWorkerThreads ) ; 
 + serverEngine = new CustomTThreadPoolServer ( serverArgs , executorService ) ; 
 + logger . info ( String . format ( " Using synchronous / threadpool thrift server on % s : % s " , listenAddr , listenPort ) ) ; 
 + } 
 + else 
 + { 
 + TNonblockingServerTransport serverTransport ; 
 + try 
 + { 
 + serverTransport = new TCustomNonblockingServerSocket ( new InetSocketAddress ( listenAddr , listenPort ) , 
 + DatabaseDescriptor . getRpcKeepAlive ( ) , 
 + DatabaseDescriptor . getRpcSendBufferSize ( ) , 
 + DatabaseDescriptor . getRpcRecvBufferSize ( ) ) ; 
 + } 
 + catch ( TTransportException e ) 
 + { 
 + throw new RuntimeException ( String . format ( " Unable to create thrift socket to % s : % s " , listenAddr , listenPort ) , e ) ; 
 + } 
 + 
 + if ( DatabaseDescriptor . getRpcServerType ( ) . equalsIgnoreCase ( ASYNC ) ) 
 + { 
 + / / This is single threaded hence the invocation will be all 
 + / / in one thread . 
 + TNonblockingServer . Args serverArgs = new TNonblockingServer . Args ( serverTransport ) . inputTransportFactory ( inTransportFactory ) 
 + . outputTransportFactory ( outTransportFactory ) 
 + . inputProtocolFactory ( tProtocolFactory ) 
 + . outputProtocolFactory ( tProtocolFactory ) 
 + . processor ( processor ) ; 
 + logger . info ( String . format ( " Using non - blocking / asynchronous thrift server on % s : % s " , listenAddr , listenPort ) ) ; 
 + serverEngine = new CustomTNonBlockingServer ( serverArgs ) ; 
 + } 
 + else if ( DatabaseDescriptor . getRpcServerType ( ) . equalsIgnoreCase ( HSHA ) ) 
 + { 
 + / / This is NIO selector service but the invocation will be Multi - Threaded with the Executor service . 
 + ExecutorService executorService = new JMXEnabledThreadPoolExecutor ( DatabaseDescriptor . getRpcMinThreads ( ) , 
 + DatabaseDescriptor . getRpcMaxThreads ( ) , 
 + 60L , 
 + TimeUnit . SECONDS , 
 + new SynchronousQueue < Runnable > ( ) , 
 + new NamedThreadFactory ( " RPC - Thread " ) , " RPC - THREAD - POOL " ) ; 
 + TNonblockingServer . Args serverArgs = new TNonblockingServer . Args ( serverTransport ) . inputTransportFactory ( inTransportFactory ) 
 + . outputTransportFactory ( outTransportFactory ) 
 + . inputProtocolFactory ( tProtocolFactory ) 
 + . outputProtocolFactory ( tProtocolFactory ) 
 + . processor ( processor ) ; 
 + logger . info ( String . format ( " Using custom half - sync / half - async thrift server on % s : % s " , listenAddr , listenPort ) ) ; 
 + / / Check for available processors in the system which will be equal to the IO Threads . 
 + serverEngine = new CustomTHsHaServer ( serverArgs , executorService , Runtime . getRuntime ( ) . availableProcessors ( ) ) ; 
 + } 
 + } 
 } 
 
 public void run ( ) 
 diff - - git a / src / java / org / apache / cassandra / thrift / CustomTHsHaServer . java b / src / java / org / apache / cassandra / thrift / CustomTHsHaServer . java 
 index 6ade5ca . . 350a13d 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CustomTHsHaServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CustomTHsHaServer . java 
 @ @ - 22 , 7 + 22 , 6 @ @ package org . apache . cassandra . thrift ; 
 
 
 import java . io . IOException ; 
 - import java . net . InetSocketAddress ; 
 import java . nio . channels . SelectionKey ; 
 import java . nio . channels . Selector ; 
 import java . nio . channels . spi . SelectorProvider ; 
 @ @ - 31 , 15 + 30 , 9 @ @ import java . util . Iterator ; 
 import java . util . Set ; 
 import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . RejectedExecutionException ; 
 - import java . util . concurrent . SynchronousQueue ; 
 - import java . util . concurrent . TimeUnit ; 
 
 - import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; 
 - import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . service . SocketSessionManagementService ; 
 import org . apache . thrift . server . TNonblockingServer ; 
 - import org . apache . thrift . server . TServer ; 
 import org . apache . thrift . transport . TNonblockingServerTransport ; 
 import org . apache . thrift . transport . TNonblockingSocket ; 
 import org . apache . thrift . transport . TNonblockingTransport ; 
 @ @ - 350 , 36 + 343 , 4 @ @ public class CustomTHsHaServer extends TNonblockingServer 
 / / thread because the method is not synchronized with the rest of the 
 / / selectors threads . 
 } 
 - 
 - public static class Factory implements TServerFactory 
 - { 
 - public TServer buildTServer ( Args args ) 
 - { 
 - final InetSocketAddress addr = args . addr ; 
 - TNonblockingServerTransport serverTransport ; 
 - try 
 - { 
 - serverTransport = new TCustomNonblockingServerSocket ( addr , args . keepAlive , args . sendBufferSize , args . recvBufferSize ) ; 
 - } 
 - catch ( TTransportException e ) 
 - { 
 - throw new RuntimeException ( String . format ( " Unable to create thrift socket to % s : % s " , addr . getAddress ( ) , addr . getPort ( ) ) , e ) ; 
 - } 
 - 
 - / / This is NIO selector service but the invocation will be Multi - Threaded with the Executor service . 
 - ExecutorService executorService = new JMXEnabledThreadPoolExecutor ( DatabaseDescriptor . getRpcMinThreads ( ) , 
 - DatabaseDescriptor . getRpcMaxThreads ( ) , 
 - 60L , 
 - TimeUnit . SECONDS , 
 - new SynchronousQueue < Runnable > ( ) , 
 - new NamedThreadFactory ( " RPC - Thread " ) , " RPC - THREAD - POOL " ) ; 
 - TNonblockingServer . Args serverArgs = new TNonblockingServer . Args ( serverTransport ) . inputTransportFactory ( args . inTransportFactory ) 
 - . outputTransportFactory ( args . outTransportFactory ) 
 - . inputProtocolFactory ( args . tProtocolFactory ) 
 - . outputProtocolFactory ( args . tProtocolFactory ) 
 - . processor ( args . processor ) ; 
 - / / Check for available processors in the system which will be equal to the IO Threads . 
 - return new CustomTHsHaServer ( serverArgs , executorService , Runtime . getRuntime ( ) . availableProcessors ( ) ) ; 
 - } 
 - } 
 } 
 diff - - git a / src / java / org / apache / cassandra / thrift / CustomTNonBlockingServer . java b / src / java / org / apache / cassandra / thrift / CustomTNonBlockingServer . java 
 index 479fba8 . . 0b6c90b 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CustomTNonBlockingServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CustomTNonBlockingServer . java 
 @ @ - 21 , 14 + 21 , 9 @ @ package org . apache . cassandra . thrift ; 
 * / 
 
 
 - import java . net . InetSocketAddress ; 
 - 
 import org . apache . cassandra . service . SocketSessionManagementService ; 
 import org . apache . thrift . server . TNonblockingServer ; 
 - import org . apache . thrift . server . TServer ; 
 - import org . apache . thrift . transport . TNonblockingServerTransport ; 
 import org . apache . thrift . transport . TNonblockingSocket ; 
 - import org . apache . thrift . transport . TTransportException ; 
 
 public class CustomTNonBlockingServer extends TNonblockingServer 
 { 
 @ @ - 45 , 30 + 40 , 4 @ @ public class CustomTNonBlockingServer extends TNonblockingServer 
 frameBuffer . invoke ( ) ; 
 return true ; 
 } 
 - 
 - public static class Factory implements TServerFactory 
 - { 
 - public TServer buildTServer ( Args args ) 
 - { 
 - final InetSocketAddress addr = args . addr ; 
 - TNonblockingServerTransport serverTransport ; 
 - try 
 - { 
 - serverTransport = new TCustomNonblockingServerSocket ( addr , args . keepAlive , args . sendBufferSize , args . recvBufferSize ) ; 
 - } 
 - catch ( TTransportException e ) 
 - { 
 - throw new RuntimeException ( String . format ( " Unable to create thrift socket to % s : % s " , addr . getAddress ( ) , addr . getPort ( ) ) , e ) ; 
 - } 
 - 
 - / / This is single threaded hence the invocation will be all 
 - / / in one thread . 
 - TNonblockingServer . Args serverArgs = new TNonblockingServer . Args ( serverTransport ) . inputTransportFactory ( args . inTransportFactory ) 
 - . outputTransportFactory ( args . outTransportFactory ) 
 - . inputProtocolFactory ( args . tProtocolFactory ) 
 - . outputProtocolFactory ( args . tProtocolFactory ) 
 - . processor ( args . processor ) ; 
 - return new CustomTNonBlockingServer ( serverArgs ) ; 
 - } 
 - } 
 } 
 diff - - git a / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java b / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java 
 index fc07c60 . . d6ba012 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java 
 @ @ - 19 , 7 + 19 , 6 @ @ 
 
 package org . apache . cassandra . thrift ; 
 
 - import java . net . InetSocketAddress ; 
 import java . net . SocketTimeoutException ; 
 import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 @ @ - 27 , 14 + 26 , 11 @ @ import java . util . concurrent . atomic . AtomicInteger ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . service . AbstractCassandraDaemon ; 
 import org . apache . thrift . TException ; 
 import org . apache . thrift . TProcessor ; 
 import org . apache . thrift . protocol . TProtocol ; 
 import org . apache . thrift . server . TServer ; 
 import org . apache . thrift . server . TThreadPoolServer ; 
 - import org . apache . thrift . transport . TServerTransport ; 
 import org . apache . thrift . transport . TTransport ; 
 import org . apache . thrift . transport . TTransportException ; 
 
 @ @ - 223 , 32 + 219 , 4 @ @ public class CustomTThreadPoolServer extends TServer 
 } 
 } 
 } 
 - 
 - public static class Factory implements TServerFactory 
 - { 
 - public TServer buildTServer ( Args args ) 
 - { 
 - final InetSocketAddress addr = args . addr ; 
 - TServerTransport serverTransport ; 
 - try 
 - { 
 - serverTransport = new TCustomServerSocket ( addr , args . keepAlive , args . sendBufferSize , args . recvBufferSize ) ; 
 - } 
 - catch ( TTransportException e ) 
 - { 
 - throw new RuntimeException ( String . format ( " Unable to create thrift socket to % s : % s " , addr . getAddress ( ) , addr . getPort ( ) ) , e ) ; 
 - } 
 - / / ThreadPool Server and will be invocation per connection basis . . . 
 - TThreadPoolServer . Args serverArgs = new TThreadPoolServer . Args ( serverTransport ) 
 - . minWorkerThreads ( DatabaseDescriptor . getRpcMinThreads ( ) ) 
 - . maxWorkerThreads ( DatabaseDescriptor . getRpcMaxThreads ( ) ) 
 - . inputTransportFactory ( args . inTransportFactory ) 
 - . outputTransportFactory ( args . outTransportFactory ) 
 - . inputProtocolFactory ( args . tProtocolFactory ) 
 - . outputProtocolFactory ( args . tProtocolFactory ) 
 - . processor ( args . processor ) ; 
 - ExecutorService executorService = new AbstractCassandraDaemon . CleaningThreadPool ( args . cassandraServer . clientState , serverArgs . minWorkerThreads , serverArgs . maxWorkerThreads ) ; 
 - return new CustomTThreadPoolServer ( serverArgs , executorService ) ; 
 - } 
 - } 
 } 
 diff - - git a / src / java / org / apache / cassandra / thrift / TServerCustomFactory . java b / src / java / org / apache / cassandra / thrift / TServerCustomFactory . java 
 deleted file mode 100644 
 index 50e4fac . . 0000000 
 - - - a / src / java / org / apache / cassandra / thrift / TServerCustomFactory . java 
 + + + / dev / null 
 @ @ - 1 , 75 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , 
 - * software distributed under the License is distributed on an 
 - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 - * KIND , either express or implied . See the License for the 
 - * specific language governing permissions and limitations 
 - * under the License . 
 - * / 
 - package org . apache . cassandra . thrift ; 
 - 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 - 
 - import org . apache . thrift . server . TServer ; 
 - 
 - / * * 
 - * Helper implementation to create a thrift TServer based on one of the common types we support ( sync , async , hsha ) , 
 - * or a custom type by setting the fully qualified java class name in the rpc _ server _ type setting . 
 - * / 
 - public class TServerCustomFactory implements TServerFactory 
 - { 
 - private static Logger logger = LoggerFactory . getLogger ( TServerCustomFactory . class ) ; 
 - private final String serverType ; 
 - 
 - public TServerCustomFactory ( String serverType ) 
 - { 
 - assert serverType ! = null ; 
 - this . serverType = serverType ; 
 - } 
 - 
 - public TServer buildTServer ( TServerFactory . Args args ) 
 - { 
 - TServer server ; 
 - if ( CassandraDaemon . SYNC . equalsIgnoreCase ( serverType ) ) 
 - { 
 - server = new CustomTThreadPoolServer . Factory ( ) . buildTServer ( args ) ; 
 - logger . info ( String . format ( " Using synchronous / threadpool thrift server on % s : % s " , args . addr . getHostName ( ) , args . addr . getPort ( ) ) ) ; 
 - } 
 - else if ( CassandraDaemon . ASYNC . equalsIgnoreCase ( serverType ) ) 
 - { 
 - server = new CustomTNonBlockingServer . Factory ( ) . buildTServer ( args ) ; 
 - logger . info ( String . format ( " Using non - blocking / asynchronous thrift server on % s : % s " , args . addr . getHostName ( ) , args . addr . getPort ( ) ) ) ; 
 - } 
 - else if ( CassandraDaemon . HSHA . equalsIgnoreCase ( serverType ) ) 
 - { 
 - server = new CustomTHsHaServer . Factory ( ) . buildTServer ( args ) ; 
 - logger . info ( String . format ( " Using custom half - sync / half - async thrift server on % s : % s " , args . addr . getHostName ( ) , args . addr . getPort ( ) ) ) ; 
 - } 
 - else 
 - { 
 - TServerFactory serverFactory ; 
 - try 
 - { 
 - serverFactory = ( TServerFactory ) Class . forName ( serverType ) . newInstance ( ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - throw new RuntimeException ( " Failed to instantiate server factory : " + serverType , e ) ; 
 - } 
 - server = serverFactory . buildTServer ( args ) ; 
 - logger . info ( String . format ( " Using custom thrift server % s on % s : % s " , server . getClass ( ) . getName ( ) , args . addr . getHostName ( ) , args . addr . getPort ( ) ) ) ; 
 - } 
 - return server ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / thrift / TServerFactory . java b / src / java / org / apache / cassandra / thrift / TServerFactory . java 
 deleted file mode 100644 
 index 0c93867 . . 0000000 
 - - - a / src / java / org / apache / cassandra / thrift / TServerFactory . java 
 + + + / dev / null 
 @ @ - 1 , 43 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , 
 - * software distributed under the License is distributed on an 
 - * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 - * KIND , either express or implied . See the License for the 
 - * specific language governing permissions and limitations 
 - * under the License . 
 - * / 
 - package org . apache . cassandra . thrift ; 
 - 
 - import java . net . InetSocketAddress ; 
 - 
 - import org . apache . thrift . protocol . TProtocolFactory ; 
 - import org . apache . thrift . server . TServer ; 
 - import org . apache . thrift . transport . TTransportFactory ; 
 - 
 - public interface TServerFactory 
 - { 
 - TServer buildTServer ( Args args ) ; 
 - 
 - public static class Args 
 - { 
 - public InetSocketAddress addr ; 
 - public CassandraServer cassandraServer ; 
 - public Cassandra . Processor processor ; 
 - public TProtocolFactory tProtocolFactory ; 
 - public TTransportFactory inTransportFactory ; 
 - public TTransportFactory outTransportFactory ; 
 - public Integer sendBufferSize ; 
 - public Integer recvBufferSize ; 
 - public boolean keepAlive ; 
 - } 
 - }
