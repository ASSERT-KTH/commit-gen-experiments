BLEU SCORE: 1.0

TEST MSG: Fix LatencyMetrics returning infinity .
GENERATED MSG: Fix LatencyMetrics returning infinity .

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / metrics / LatencyMetrics . java b / src / java / org / apache / cassandra / metrics / LatencyMetrics . java <nl> index b53449c . . ef1dee9 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / LatencyMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / LatencyMetrics . java <nl> @ @ - 85 , 8 + 85 , 11 @ @ public class LatencyMetrics <nl> public void addNano ( long nanos ) <nl> { <nl> / / convert to microseconds . 1 millionth <nl> - latency . update ( nanos , TimeUnit . NANOSECONDS ) ; <nl> - totalLatency . inc ( nanos / 1000 ) ; <nl> + synchronized ( this ) <nl> + { <nl> + latency . update ( nanos , TimeUnit . NANOSECONDS ) ; <nl> + totalLatency . inc ( nanos / 1000 ) ; <nl> + } <nl> totalLatencyHistogram . add ( nanos / 1000 ) ; <nl> recentLatencyHistogram . add ( nanos / 1000 ) ; <nl> } <nl> @ @ - 100 , 8 + 103 , 13 @ @ public class LatencyMetrics <nl> @ Deprecated <nl> public double getRecentLatency ( ) <nl> { <nl> - long ops = latency . count ( ) ; <nl> - long n = totalLatency . count ( ) ; <nl> + long ops = 0 ; <nl> + long n = 0 ; <nl> + synchronized ( this ) <nl> + { <nl> + ops = latency . count ( ) ; <nl> + n = totalLatency . count ( ) ; <nl> + } <nl> try <nl> { <nl> return ( ( double ) n - lastLatency ) / ( ops - lastOpCount ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / metrics / LatencyMetrics . java b / src / java / org / apache / cassandra / metrics / LatencyMetrics . java 
 index b53449c . . ef1dee9 100644 
 - - - a / src / java / org / apache / cassandra / metrics / LatencyMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / LatencyMetrics . java 
 @ @ - 85 , 8 + 85 , 11 @ @ public class LatencyMetrics 
 public void addNano ( long nanos ) 
 { 
 / / convert to microseconds . 1 millionth 
 - latency . update ( nanos , TimeUnit . NANOSECONDS ) ; 
 - totalLatency . inc ( nanos / 1000 ) ; 
 + synchronized ( this ) 
 + { 
 + latency . update ( nanos , TimeUnit . NANOSECONDS ) ; 
 + totalLatency . inc ( nanos / 1000 ) ; 
 + } 
 totalLatencyHistogram . add ( nanos / 1000 ) ; 
 recentLatencyHistogram . add ( nanos / 1000 ) ; 
 } 
 @ @ - 100 , 8 + 103 , 13 @ @ public class LatencyMetrics 
 @ Deprecated 
 public double getRecentLatency ( ) 
 { 
 - long ops = latency . count ( ) ; 
 - long n = totalLatency . count ( ) ; 
 + long ops = 0 ; 
 + long n = 0 ; 
 + synchronized ( this ) 
 + { 
 + ops = latency . count ( ) ; 
 + n = totalLatency . count ( ) ; 
 + } 
 try 
 { 
 return ( ( double ) n - lastLatency ) / ( ops - lastOpCount ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
