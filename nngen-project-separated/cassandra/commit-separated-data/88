BLEU SCORE: 0.02399905349559606

TEST MSG: Make AuthCache easier to subclass
GENERATED MSG: rename Cachetable - > ExpiringMap . patch by jbellis

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a7468f4 . . aca31fe 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Make AuthCache more easily extendable ( CASSANDRA - 14662 ) <nl> * Extend RolesCache to include detailed role info ( CASSANDRA - 14497 ) <nl> * Add fqltool compare ( CASSANDRA - 14619 ) <nl> * Add fqltool replay ( CASSANDRA - 14618 ) <nl> diff - - git a / src / java / org / apache / cassandra / auth / AuthCache . java b / src / java / org / apache / cassandra / auth / AuthCache . java <nl> index d6ff0b0 . . 4f36a63 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / AuthCache . java <nl> + + + b / src / java / org / apache / cassandra / auth / AuthCache . java <nl> @ @ - 35 , 24 + 35 , 40 @ @ import com . github . benmanes . caffeine . cache . LoadingCache ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - public class AuthCache < K , V > implements AuthCacheMBean <nl> + import static com . google . common . base . Preconditions . checkNotNull ; <nl> + <nl> + public class AuthCache < K , V > implements AuthCacheMBean < K > <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( AuthCache . class ) ; <nl> <nl> private static final String MBEAN _ NAME _ BASE = " org . apache . cassandra . auth : type = " ; <nl> <nl> - private volatile LoadingCache < K , V > cache ; <nl> - <nl> - private final String name ; <nl> - private final IntConsumer setValidityDelegate ; <nl> - private final IntSupplier getValidityDelegate ; <nl> - private final IntConsumer setUpdateIntervalDelegate ; <nl> - private final IntSupplier getUpdateIntervalDelegate ; <nl> - private final IntConsumer setMaxEntriesDelegate ; <nl> - private final IntSupplier getMaxEntriesDelegate ; <nl> - private final Function < K , V > loadFunction ; <nl> - private final BooleanSupplier enableCache ; <nl> - <nl> + / * * <nl> + * Underlying cache . LoadingCache will call underlying load function on { @ link # get } if key is not present <nl> + * / <nl> + protected volatile LoadingCache < K , V > cache ; <nl> + <nl> + private String name ; <nl> + private IntConsumer setValidityDelegate ; <nl> + private IntSupplier getValidityDelegate ; <nl> + private IntConsumer setUpdateIntervalDelegate ; <nl> + private IntSupplier getUpdateIntervalDelegate ; <nl> + private IntConsumer setMaxEntriesDelegate ; <nl> + private IntSupplier getMaxEntriesDelegate ; <nl> + private Function < K , V > loadFunction ; <nl> + private BooleanSupplier enableCache ; <nl> + <nl> + / * * <nl> + * @ param name Used for MBean <nl> + * @ param setValidityDelegate Used to set cache validity period . See { @ link Policy # expireAfterWrite ( ) } <nl> + * @ param getValidityDelegate Getter for validity period <nl> + * @ param setUpdateIntervalDelegate Used to set cache update interval . See { @ link Policy # refreshAfterWrite ( ) } <nl> + * @ param getUpdateIntervalDelegate Getter for update interval <nl> + * @ param setMaxEntriesDelegate Used to set max # entries in cache . See { @ link com . github . benmanes . caffeine . cache . Policy . Eviction # setMaximum ( long ) } <nl> + * @ param getMaxEntriesDelegate Getter for max entries . <nl> + * @ param loadFunction Function to load the cache . Called on { @ link # get ( Object ) } <nl> + * @ param cacheEnabledDelegate Used to determine if cache is enabled . <nl> + * / <nl> protected AuthCache ( String name , <nl> IntConsumer setValidityDelegate , <nl> IntSupplier getValidityDelegate , <nl> @ @ - 61 , 23 + 77 , 26 @ @ public class AuthCache < K , V > implements AuthCacheMBean <nl> IntConsumer setMaxEntriesDelegate , <nl> IntSupplier getMaxEntriesDelegate , <nl> Function < K , V > loadFunction , <nl> - BooleanSupplier enableCache ) <nl> + BooleanSupplier cacheEnabledDelegate ) <nl> { <nl> - this . name = name ; <nl> - this . setValidityDelegate = setValidityDelegate ; <nl> - this . getValidityDelegate = getValidityDelegate ; <nl> - this . setUpdateIntervalDelegate = setUpdateIntervalDelegate ; <nl> - this . getUpdateIntervalDelegate = getUpdateIntervalDelegate ; <nl> - this . setMaxEntriesDelegate = setMaxEntriesDelegate ; <nl> - this . getMaxEntriesDelegate = getMaxEntriesDelegate ; <nl> - this . loadFunction = loadFunction ; <nl> - this . enableCache = enableCache ; <nl> + this . name = checkNotNull ( name ) ; <nl> + this . setValidityDelegate = checkNotNull ( setValidityDelegate ) ; <nl> + this . getValidityDelegate = checkNotNull ( getValidityDelegate ) ; <nl> + this . setUpdateIntervalDelegate = checkNotNull ( setUpdateIntervalDelegate ) ; <nl> + this . getUpdateIntervalDelegate = checkNotNull ( getUpdateIntervalDelegate ) ; <nl> + this . setMaxEntriesDelegate = checkNotNull ( setMaxEntriesDelegate ) ; <nl> + this . getMaxEntriesDelegate = checkNotNull ( getMaxEntriesDelegate ) ; <nl> + this . loadFunction = checkNotNull ( loadFunction ) ; <nl> + this . enableCache = checkNotNull ( cacheEnabledDelegate ) ; <nl> init ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Do setup for the cache and MBean . <nl> + * / <nl> protected void init ( ) <nl> { <nl> - this . cache = initCache ( null ) ; <nl> + cache = initCache ( null ) ; <nl> try <nl> { <nl> MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> @ @ - 107 , 6 + 126 , 14 @ @ public class AuthCache < K , V > implements AuthCacheMBean <nl> return new ObjectName ( MBEAN _ NAME _ BASE + name ) ; <nl> } <nl> <nl> + / * * <nl> + * Retrieve a value from the cache . Will call { @ link LoadingCache # get ( Object ) } which will <nl> + * " load " the value if it ' s not present , thus populating the key . <nl> + * @ param k <nl> + * @ return The current value of { @ code K } if cached or loaded . <nl> + * <nl> + * See { @ link LoadingCache # get ( Object ) } for possible exceptions . <nl> + * / <nl> public V get ( K k ) <nl> { <nl> if ( cache = = null ) <nl> @ @ - 115 , 17 + 142 , 28 @ @ public class AuthCache < K , V > implements AuthCacheMBean <nl> return cache . get ( k ) ; <nl> } <nl> <nl> + / * * <nl> + * Invalidate the entire cache . <nl> + * / <nl> public void invalidate ( ) <nl> { <nl> cache = initCache ( null ) ; <nl> } <nl> <nl> + / * * <nl> + * Invalidate a key <nl> + * @ param k key to invalidate <nl> + * / <nl> public void invalidate ( K k ) <nl> { <nl> if ( cache ! = null ) <nl> cache . invalidate ( k ) ; <nl> } <nl> <nl> + / * * <nl> + * Time in milliseconds that a value in the cache will expire after . <nl> + * @ param validityPeriod in milliseconds <nl> + * / <nl> public void setValidity ( int validityPeriod ) <nl> { <nl> if ( Boolean . getBoolean ( " cassandra . disable _ auth _ caches _ remote _ configuration " ) ) <nl> @ @ - 140 , 6 + 178 , 10 @ @ public class AuthCache < K , V > implements AuthCacheMBean <nl> return getValidityDelegate . getAsInt ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Time in milliseconds after which an entry in the cache should be refreshed ( it ' s load function called again ) <nl> + * @ param updateInterval in milliseconds <nl> + * / <nl> public void setUpdateInterval ( int updateInterval ) <nl> { <nl> if ( Boolean . getBoolean ( " cassandra . disable _ auth _ caches _ remote _ configuration " ) ) <nl> @ @ - 154 , 6 + 196 , 10 @ @ public class AuthCache < K , V > implements AuthCacheMBean <nl> return getUpdateIntervalDelegate . getAsInt ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Set maximum number of entries in the cache . <nl> + * @ param maxEntries <nl> + * / <nl> public void setMaxEntries ( int maxEntries ) <nl> { <nl> if ( Boolean . getBoolean ( " cassandra . disable _ auth _ caches _ remote _ configuration " ) ) <nl> @ @ - 168 , 7 + 214 , 14 @ @ public class AuthCache < K , V > implements AuthCacheMBean <nl> return getMaxEntriesDelegate . getAsInt ( ) ; <nl> } <nl> <nl> - private LoadingCache < K , V > initCache ( LoadingCache < K , V > existing ) <nl> + / * * <nl> + * ( Re - ) initialise the underlying cache . Will update validity , max entries , and update interval if <nl> + * any have changed . The underlying { @ link LoadingCache } will be initiated based on the provided { @ code loadFunction } . <nl> + * Note : If you need some unhandled cache setting to be set you should extend { @ link AuthCache } and override this method . <nl> + * @ param existing If not null will only update cache update validity , max entries , and update interval . <nl> + * @ return New { @ link LoadingCache } if existing was null , otherwise the existing { @ code cache } <nl> + * / <nl> + protected LoadingCache < K , V > initCache ( LoadingCache < K , V > existing ) <nl> { <nl> if ( ! enableCache . getAsBoolean ( ) ) <nl> return null ; <nl> @ @ - 181 , 14 + 234 , 14 @ @ public class AuthCache < K , V > implements AuthCacheMBean <nl> <nl> if ( existing = = null ) { <nl> return Caffeine . newBuilder ( ) <nl> - . refreshAfterWrite ( getUpdateInterval ( ) , TimeUnit . MILLISECONDS ) <nl> - . expireAfterWrite ( getValidity ( ) , TimeUnit . MILLISECONDS ) <nl> - . maximumSize ( getMaxEntries ( ) ) <nl> - . executor ( MoreExecutors . directExecutor ( ) ) <nl> - . build ( loadFunction : : apply ) ; <nl> + . refreshAfterWrite ( getUpdateInterval ( ) , TimeUnit . MILLISECONDS ) <nl> + . expireAfterWrite ( getValidity ( ) , TimeUnit . MILLISECONDS ) <nl> + . maximumSize ( getMaxEntries ( ) ) <nl> + . executor ( MoreExecutors . directExecutor ( ) ) <nl> + . build ( loadFunction : : apply ) ; <nl> } <nl> <nl> - / / Always set as manditory <nl> + / / Always set as mandatory <nl> cache . policy ( ) . refreshAfterWrite ( ) . ifPresent ( policy - > <nl> policy . setExpiresAfter ( getUpdateInterval ( ) , TimeUnit . MILLISECONDS ) ) ; <nl> cache . policy ( ) . expireAfterWrite ( ) . ifPresent ( policy - > <nl> diff - - git a / src / java / org / apache / cassandra / auth / AuthCacheMBean . java b / src / java / org / apache / cassandra / auth / AuthCacheMBean . java <nl> index 43fb88e . . 1416044 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / AuthCacheMBean . java <nl> + + + b / src / java / org / apache / cassandra / auth / AuthCacheMBean . java <nl> @ @ - 18 , 10 + 18 , 12 @ @ <nl> <nl> package org . apache . cassandra . auth ; <nl> <nl> - public interface AuthCacheMBean <nl> + public interface AuthCacheMBean < T > <nl> { <nl> public void invalidate ( ) ; <nl> <nl> + public void invalidate ( T t ) ; <nl> + <nl> public void setValidity ( int validityPeriod ) ; <nl> <nl> public int getValidity ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / auth / NetworkAuthCache . java b / src / java / org / apache / cassandra / auth / NetworkAuthCache . java <nl> index 15b1819 . . 0991889 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / NetworkAuthCache . java <nl> + + + b / src / java / org / apache / cassandra / auth / NetworkAuthCache . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ package org . apache . cassandra . auth ; <nl> <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> <nl> - public class NetworkAuthCache extends AuthCache < RoleResource , DCPermissions > implements AuthCacheMBean <nl> + public class NetworkAuthCache extends AuthCache < RoleResource , DCPermissions > <nl> { <nl> public NetworkAuthCache ( INetworkAuthorizer authorizer ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java b / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java <nl> index 27a68a0 . . b10136e 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java <nl> + + + b / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java <nl> @ @ - 228 , 7 + 228 , 7 @ @ public class PasswordAuthenticator implements IAuthenticator <nl> } <nl> } <nl> <nl> - private static class CredentialsCache extends AuthCache < String , String > implements CredentialsCacheMBean <nl> + private static class CredentialsCache extends AuthCache < String , String > <nl> { <nl> private CredentialsCache ( PasswordAuthenticator authenticator ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / auth / PermissionsCache . java b / src / java / org / apache / cassandra / auth / PermissionsCache . java <nl> index 981ede8 . . a33f5d1 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / PermissionsCache . java <nl> + + + b / src / java / org / apache / cassandra / auth / PermissionsCache . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ import java . util . Set ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> - public class PermissionsCache extends AuthCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > implements PermissionsCacheMBean <nl> + public class PermissionsCache extends AuthCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > <nl> { <nl> public PermissionsCache ( IAuthorizer authorizer ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / auth / PermissionsCacheMBean . java b / src / java / org / apache / cassandra / auth / PermissionsCacheMBean . java <nl> deleted file mode 100644 <nl> index d370d06 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / auth / PermissionsCacheMBean . java <nl> + + + / dev / null <nl> @ @ - 1 , 26 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . auth ; <nl> - <nl> - / * * <nl> - * Retained since CASSANDRA - 7715 for backwards compatibility of MBean interface <nl> - * classes . This should be removed in the next major version ( 4 . 0 ) <nl> - * / <nl> - public interface PermissionsCacheMBean extends AuthCacheMBean <nl> - { <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / auth / RolesCache . java b / src / java / org / apache / cassandra / auth / RolesCache . java <nl> index cc178ce . . d01de63 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / RolesCache . java <nl> + + + b / src / java / org / apache / cassandra / auth / RolesCache . java <nl> @ @ - 23 , 7 + 23 , 7 @ @ import java . util . stream . Collectors ; <nl> <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> <nl> - public class RolesCache extends AuthCache < RoleResource , Set < Role > > implements RolesCacheMBean <nl> + public class RolesCache extends AuthCache < RoleResource , Set < Role > > <nl> { <nl> public RolesCache ( IRoleManager roleManager , BooleanSupplier enableCache ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / auth / RolesCacheMBean . java b / src / java / org / apache / cassandra / auth / RolesCacheMBean . java <nl> deleted file mode 100644 <nl> index 06482d7 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / auth / RolesCacheMBean . java <nl> + + + / dev / null <nl> @ @ - 1 , 26 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . auth ; <nl> - <nl> - / * * <nl> - * Retained since CASSANDRA - 7715 for backwards compatibility of MBean interface <nl> - * classes . This should be removed in the next major version ( 4 . 0 ) <nl> - * / <nl> - public interface RolesCacheMBean extends AuthCacheMBean <nl> - { <nl> - } <nl> diff - - git a / test / unit / org / apache / cassandra / auth / AuthCacheTest . java b / test / unit / org / apache / cassandra / auth / AuthCacheTest . java <nl> new file mode 100644 <nl> index 0000000 . . cc78ebc <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / auth / AuthCacheTest . java <nl> @ @ - 0 , 0 + 1 , 137 @ @ <nl> + <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . auth ; <nl> + <nl> + import org . junit . Assert ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> + import static org . junit . Assert . assertNull ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + public class AuthCacheTest <nl> + { <nl> + private boolean loadFuncCalled = false ; <nl> + private boolean isCacheEnabled = false ; <nl> + <nl> + @ BeforeClass <nl> + public static void setup ( ) <nl> + { <nl> + DatabaseDescriptor . daemonInitialization ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCaching ( ) <nl> + { <nl> + AuthCache < String , String > authCache = new AuthCache < > ( " TestCache " , <nl> + DatabaseDescriptor : : setCredentialsValidity , <nl> + DatabaseDescriptor : : getCredentialsValidity , <nl> + DatabaseDescriptor : : setCredentialsUpdateInterval , <nl> + DatabaseDescriptor : : getCredentialsUpdateInterval , <nl> + DatabaseDescriptor : : setCredentialsCacheMaxEntries , <nl> + DatabaseDescriptor : : getCredentialsCacheMaxEntries , <nl> + this : : load , <nl> + ( ) - > true <nl> + ) ; <nl> + <nl> + / / Test cacheloader is called if set <nl> + loadFuncCalled = false ; <nl> + String result = authCache . get ( " test " ) ; <nl> + assertTrue ( loadFuncCalled ) ; <nl> + Assert . assertEquals ( " load " , result ) ; <nl> + <nl> + / / value should be fetched from cache <nl> + loadFuncCalled = false ; <nl> + String result2 = authCache . get ( " test " ) ; <nl> + assertFalse ( loadFuncCalled ) ; <nl> + Assert . assertEquals ( " load " , result2 ) ; <nl> + <nl> + / / value should be fetched from cache after complete invalidate <nl> + authCache . invalidate ( ) ; <nl> + loadFuncCalled = false ; <nl> + String result3 = authCache . get ( " test " ) ; <nl> + assertTrue ( loadFuncCalled ) ; <nl> + Assert . assertEquals ( " load " , result3 ) ; <nl> + <nl> + / / value should be fetched from cache after invalidating key <nl> + authCache . invalidate ( " test " ) ; <nl> + loadFuncCalled = false ; <nl> + String result4 = authCache . get ( " test " ) ; <nl> + assertTrue ( loadFuncCalled ) ; <nl> + Assert . assertEquals ( " load " , result4 ) ; <nl> + <nl> + / / set cache to null and load function should be called <nl> + loadFuncCalled = false ; <nl> + authCache . cache = null ; <nl> + String result5 = authCache . get ( " test " ) ; <nl> + assertTrue ( loadFuncCalled ) ; <nl> + Assert . assertEquals ( " load " , result5 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testInitCache ( ) <nl> + { <nl> + / / Test that a validity of < = 0 will turn off caching <nl> + DatabaseDescriptor . setCredentialsValidity ( 0 ) ; <nl> + AuthCache < String , String > authCache = new AuthCache < > ( " TestCache2 " , <nl> + DatabaseDescriptor : : setCredentialsValidity , <nl> + DatabaseDescriptor : : getCredentialsValidity , <nl> + DatabaseDescriptor : : setCredentialsUpdateInterval , <nl> + DatabaseDescriptor : : getCredentialsUpdateInterval , <nl> + DatabaseDescriptor : : setCredentialsCacheMaxEntries , <nl> + DatabaseDescriptor : : getCredentialsCacheMaxEntries , <nl> + this : : load , <nl> + ( ) - > true ) ; <nl> + assertNull ( authCache . cache ) ; <nl> + authCache . setValidity ( 2000 ) ; <nl> + authCache . cache = authCache . initCache ( null ) ; <nl> + assertNotNull ( authCache . cache ) ; <nl> + <nl> + / / Test enableCache works as intended <nl> + authCache = new AuthCache < > ( " TestCache3 " , <nl> + DatabaseDescriptor : : setCredentialsValidity , <nl> + DatabaseDescriptor : : getCredentialsValidity , <nl> + DatabaseDescriptor : : setCredentialsUpdateInterval , <nl> + DatabaseDescriptor : : getCredentialsUpdateInterval , <nl> + DatabaseDescriptor : : setCredentialsCacheMaxEntries , <nl> + DatabaseDescriptor : : getCredentialsCacheMaxEntries , <nl> + this : : load , <nl> + ( ) - > isCacheEnabled ) ; <nl> + assertNull ( authCache . cache ) ; <nl> + isCacheEnabled = true ; <nl> + authCache . cache = authCache . initCache ( null ) ; <nl> + assertNotNull ( authCache . cache ) ; <nl> + <nl> + / / Ensure at a minimum these policies have been initialised by default <nl> + assertTrue ( authCache . cache . policy ( ) . expireAfterWrite ( ) . isPresent ( ) ) ; <nl> + assertTrue ( authCache . cache . policy ( ) . refreshAfterWrite ( ) . isPresent ( ) ) ; <nl> + assertTrue ( authCache . cache . policy ( ) . eviction ( ) . isPresent ( ) ) ; <nl> + } <nl> + <nl> + private String load ( String test ) <nl> + { <nl> + loadFuncCalled = true ; <nl> + return " load " ; <nl> + } <nl> + <nl> + }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cache / ICachetable . java b / src / java / org / apache / cassandra / cache / ICachetable . java <nl> deleted file mode 100644 <nl> index 98d6ffa . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / cache / ICachetable . java <nl> + + + / dev / null <nl> @ @ - 1 , 35 + 0 , 0 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . cache ; <nl> - <nl> - import java . util . Set ; <nl> - <nl> - public interface ICachetable < K , V > <nl> - { <nl> - public void put ( K key , V value ) ; <nl> - public void put ( K key , V value , ICacheExpungeHook < K , V > hook ) ; <nl> - 	 public V get ( K key ) ; <nl> - public V remove ( K key ) ; <nl> - public int size ( ) ; <nl> - public boolean containsKey ( K key ) ; <nl> - public boolean containsValue ( V value ) ; <nl> - public boolean isEmpty ( ) ; <nl> - public Set < K > keySet ( ) ; <nl> - public void shutdown ( ) ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 9340c5b . . ef43fa7 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 18 , 7 + 18 , 6 @ @ <nl> <nl> package org . apache . cassandra . net ; <nl> <nl> - import org . apache . cassandra . cache . ICachetable ; <nl> import org . apache . cassandra . concurrent . * ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . gms . FailureDetector ; <nl> @ @ - 56 , 8 + 55 , 8 @ @ public class MessagingService implements IFailureDetectionEventListener <nl> public static final String responseVerbHandler _ = " RESPONSE " ; <nl> <nl> / * This records all the results mapped by message Id * / <nl> - private static ICachetable < String , IAsyncCallback > callbackMap _ ; <nl> - private static ICachetable < String , IAsyncResult > taskCompletionMap _ ; <nl> + private static ExpiringMap < String , IAsyncCallback > callbackMap _ ; <nl> + private static ExpiringMap < String , IAsyncResult > taskCompletionMap _ ; <nl> <nl> / * Lookup table for registering message handlers based on the verb . * / <nl> private static Map < String , IVerbHandler > verbHandlers _ ; <nl> @ @ - 94 , 8 + 93 , 8 @ @ public class MessagingService implements IFailureDetectionEventListener <nl> * which is the sum of the threads in the pool that adds shit into the table and the <nl> * pool that retrives the callback from here . <nl> * / <nl> - callbackMap _ = new Cachetable < String , IAsyncCallback > ( 2 * DatabaseDescriptor . getRpcTimeout ( ) ) ; <nl> - taskCompletionMap _ = new Cachetable < String , IAsyncResult > ( 2 * DatabaseDescriptor . getRpcTimeout ( ) ) ; <nl> + callbackMap _ = new ExpiringMap < String , IAsyncCallback > ( 2 * DatabaseDescriptor . getRpcTimeout ( ) ) ; <nl> + taskCompletionMap _ = new ExpiringMap < String , IAsyncResult > ( 2 * DatabaseDescriptor . getRpcTimeout ( ) ) ; <nl> <nl> / / read executor puts messages to deserialize on this . <nl> messageDeserializerExecutor _ = new JMXEnabledThreadPoolExecutor ( 1 , <nl> diff - - git a / src / java / org / apache / cassandra / service / AntiEntropyService . java b / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> index 8e5e46d . . 9dd75b2 100644 <nl> - - - a / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> + + + b / src / java / org / apache / cassandra / service / AntiEntropyService . java <nl> @ @ - 113 , 7 + 113 , 7 @ @ public class AntiEntropyService <nl> * <nl> * This map is only accessed from AE _ SERVICE _ STAGE , so it is not synchronized . <nl> * / <nl> - private final Map < CFPair , Cachetable < InetAddress , TreePair > > trees ; <nl> + private final Map < CFPair , ExpiringMap < InetAddress , TreePair > > trees ; <nl> <nl> / * * <nl> * Protected constructor . Use AntiEntropyService . instance . <nl> @ @ - 123 , 7 + 123 , 7 @ @ public class AntiEntropyService <nl> MessagingService . instance . registerVerbHandlers ( TREE _ REQUEST _ VERB , new TreeRequestVerbHandler ( ) ) ; <nl> MessagingService . instance . registerVerbHandlers ( TREE _ RESPONSE _ VERB , new TreeResponseVerbHandler ( ) ) ; <nl> naturalRepairs = new ConcurrentHashMap < CFPair , Long > ( ) ; <nl> - trees = new HashMap < CFPair , Cachetable < InetAddress , TreePair > > ( ) ; <nl> + trees = new HashMap < CFPair , ExpiringMap < InetAddress , TreePair > > ( ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 133 , 12 + 133 , 12 @ @ public class AntiEntropyService <nl> * @ param cf Column family to fetch trees for . <nl> * @ return The store of trees for the given cf . <nl> * / <nl> - private Cachetable < InetAddress , TreePair > rendezvousPairs ( CFPair cf ) <nl> + private ExpiringMap < InetAddress , TreePair > rendezvousPairs ( CFPair cf ) <nl> { <nl> - Cachetable < InetAddress , TreePair > ctrees = trees . get ( cf ) ; <nl> + ExpiringMap < InetAddress , TreePair > ctrees = trees . get ( cf ) ; <nl> if ( ctrees = = null ) <nl> { <nl> - ctrees = new Cachetable < InetAddress , TreePair > ( TREE _ STORE _ TIMEOUT ) ; <nl> + ctrees = new ExpiringMap < InetAddress , TreePair > ( TREE _ STORE _ TIMEOUT ) ; <nl> trees . put ( cf , ctrees ) ; <nl> } <nl> return ctrees ; <nl> @ @ - 168 , 7 + 168 , 7 @ @ public class AntiEntropyService <nl> InetAddress LOCAL = FBUtilities . getLocalAddress ( ) ; <nl> <nl> / / return the rendezvous pairs for this cf <nl> - Cachetable < InetAddress , TreePair > ctrees = rendezvousPairs ( cf ) ; <nl> + ExpiringMap < InetAddress , TreePair > ctrees = rendezvousPairs ( cf ) ; <nl> <nl> List < Differencer > differencers = new ArrayList < Differencer > ( ) ; <nl> if ( LOCAL . equals ( endpoint ) ) <nl> diff - - git a / src / java / org / apache / cassandra / service / ConsistencyManager . java b / src / java / org / apache / cassandra / service / ConsistencyManager . java <nl> index effd282 . . 925d426 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ConsistencyManager . java <nl> + + + b / src / java / org / apache / cassandra / service / ConsistencyManager . java <nl> @ @ - 26 , 7 + 26 , 6 @ @ import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> import org . apache . cassandra . cache . ICacheExpungeHook ; <nl> - import org . apache . cassandra . cache . ICachetable ; <nl> import org . apache . cassandra . db . ReadCommand ; <nl> import org . apache . cassandra . db . ReadResponse ; <nl> import org . apache . cassandra . db . Row ; <nl> @ @ - 132 , 7 + 131 , 7 @ @ class ConsistencyManager implements Runnable <nl> } <nl> <nl> 	 private static long scheduledTimeMillis _ = 600 ; <nl> - 	 private static ICachetable < String , String > readRepairTable _ = new Cachetable < String , String > ( scheduledTimeMillis _ ) ; <nl> + 	 private static ExpiringMap < String , String > readRepairTable _ = new ExpiringMap < String , String > ( scheduledTimeMillis _ ) ; <nl> 	 private final Row row _ ; <nl> 	 protected final List < InetAddress > replicas _ ; <nl> 	 private final ReadCommand readCommand _ ; <nl> diff - - git a / src / java / org / apache / cassandra / service / ReadRepairManager . java b / src / java / org / apache / cassandra / service / ReadRepairManager . java <nl> index 294c95a . . 07cc8da 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ReadRepairManager . java <nl> + + + b / src / java / org / apache / cassandra / service / ReadRepairManager . java <nl> @ @ - 27 , 10 + 27 , 9 @ @ import java . net . UnknownHostException ; <nl> <nl> import org . apache . cassandra . net . Message ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> - import org . apache . cassandra . utils . Cachetable ; <nl> + import org . apache . cassandra . utils . ExpiringMap ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . cache . ICacheExpungeHook ; <nl> - import org . apache . cassandra . cache . ICachetable ; <nl> <nl> import org . apache . log4j . Logger ; <nl> <nl> @ @ - 78 , 7 + 77 , 7 @ @ class ReadRepairManager <nl> <nl> 	 } <nl> <nl> - 	 private ICachetable < String , Message > readRepairTable _ = new Cachetable < String , Message > ( expirationTimeInMillis , new ReadRepairManager . ReadRepairPerformer ( ) ) ; <nl> + 	 private ExpiringMap < String , Message > readRepairTable _ = new ExpiringMap < String , Message > ( expirationTimeInMillis , new ReadRepairManager . ReadRepairPerformer ( ) ) ; <nl> <nl> 	 protected ReadRepairManager ( ) <nl> 	 { <nl> diff - - git a / src / java / org / apache / cassandra / utils / Cachetable . java b / src / java / org / apache / cassandra / utils / Cachetable . java <nl> deleted file mode 100644 <nl> index e112647 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / utils / Cachetable . java <nl> + + + / dev / null <nl> @ @ - 1 , 218 + 0 , 0 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - import java . util . * ; <nl> - <nl> - import org . apache . log4j . Logger ; <nl> - <nl> - import org . apache . cassandra . cache . ICacheExpungeHook ; <nl> - import org . apache . cassandra . cache . ICachetable ; <nl> - <nl> - public class Cachetable < K , V > implements ICachetable < K , V > <nl> - { <nl> - private class CacheableObject <nl> - { <nl> - private V value _ ; <nl> - private long age _ ; <nl> - <nl> - CacheableObject ( V o ) <nl> - { <nl> - value _ = o ; <nl> - age _ = System . currentTimeMillis ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean equals ( Object o ) <nl> - { <nl> - return value _ . equals ( o ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public int hashCode ( ) <nl> - { <nl> - return value _ . hashCode ( ) ; <nl> - } <nl> - <nl> - V getValue ( ) <nl> - { <nl> - return value _ ; <nl> - } <nl> - <nl> - boolean isReadyToDie ( long expiration ) <nl> - { <nl> - return ( ( System . currentTimeMillis ( ) - age _ ) > expiration ) ; <nl> - } <nl> - } <nl> - <nl> - private class CacheMonitor extends TimerTask <nl> - { <nl> - private long expiration _ ; <nl> - <nl> - CacheMonitor ( long expiration ) <nl> - { <nl> - expiration _ = expiration ; <nl> - } <nl> - <nl> - @ Override <nl> - public void run ( ) <nl> - { <nl> - Map < K , V > expungedValues = new HashMap < K , V > ( ) ; <nl> - synchronized ( cache _ ) <nl> - { <nl> - Enumeration < K > e = cache _ . keys ( ) ; <nl> - while ( e . hasMoreElements ( ) ) <nl> - { <nl> - K key = e . nextElement ( ) ; <nl> - CacheableObject co = cache _ . get ( key ) ; <nl> - if ( co ! = null & & co . isReadyToDie ( expiration _ ) ) <nl> - { <nl> - V v = co . getValue ( ) ; <nl> - if ( null ! = v ) <nl> - { <nl> - expungedValues . put ( key , v ) ; <nl> - } <nl> - cache _ . remove ( key ) ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - / * Calling the hooks on the keys that have been expunged * / <nl> - Set < K > keys = expungedValues . keySet ( ) ; <nl> - for ( K key : keys ) <nl> - { <nl> - V value = expungedValues . get ( key ) ; <nl> - ICacheExpungeHook < K , V > hook = hooks _ . remove ( key ) ; <nl> - if ( hook ! = null ) <nl> - { <nl> - hook . callMe ( key , value ) ; <nl> - } <nl> - else if ( globalHook _ ! = null ) <nl> - { <nl> - globalHook _ . callMe ( key , value ) ; <nl> - } <nl> - } <nl> - expungedValues . clear ( ) ; <nl> - } <nl> - } <nl> - <nl> - private ICacheExpungeHook < K , V > globalHook _ ; <nl> - private Hashtable < K , CacheableObject > cache _ ; <nl> - private Map < K , ICacheExpungeHook < K , V > > hooks _ ; <nl> - private Timer timer _ ; <nl> - private static int counter _ = 0 ; <nl> - private static final Logger LOGGER = Logger . getLogger ( Cachetable . class ) ; <nl> - <nl> - private void init ( long expiration ) <nl> - { <nl> - if ( expiration < = 0 ) <nl> - { <nl> - throw new IllegalArgumentException ( " Argument specified must be a positive number " ) ; <nl> - } <nl> - <nl> - cache _ = new Hashtable < K , CacheableObject > ( ) ; <nl> - hooks _ = new Hashtable < K , ICacheExpungeHook < K , V > > ( ) ; <nl> - timer _ = new Timer ( " CACHETABLE - TIMER - " + ( + + counter _ ) , true ) ; <nl> - timer _ . schedule ( new CacheMonitor ( expiration ) , expiration , expiration ) ; <nl> - } <nl> - <nl> - / * <nl> - * Specify the TTL for objects in the cache <nl> - * in milliseconds . <nl> - * / <nl> - public Cachetable ( long expiration ) <nl> - { <nl> - init ( expiration ) ; <nl> - } <nl> - <nl> - / * <nl> - * Specify the TTL for objects in the cache <nl> - * in milliseconds and a global expunge hook . If <nl> - * a key has a key - specific hook installed invoke that <nl> - * instead . <nl> - * / <nl> - public Cachetable ( long expiration , ICacheExpungeHook < K , V > global ) <nl> - { <nl> - init ( expiration ) ; <nl> - globalHook _ = global ; <nl> - } <nl> - <nl> - public void shutdown ( ) <nl> - { <nl> - timer _ . cancel ( ) ; <nl> - } <nl> - <nl> - public void put ( K key , V value ) <nl> - { <nl> - cache _ . put ( key , new CacheableObject ( value ) ) ; <nl> - } <nl> - <nl> - public void put ( K key , V value , ICacheExpungeHook < K , V > hook ) <nl> - { <nl> - put ( key , value ) ; <nl> - hooks _ . put ( key , hook ) ; <nl> - } <nl> - <nl> - public V get ( K key ) <nl> - { <nl> - V result = null ; <nl> - CacheableObject co = cache _ . get ( key ) ; <nl> - if ( co ! = null ) <nl> - { <nl> - result = co . getValue ( ) ; <nl> - } <nl> - return result ; <nl> - } <nl> - <nl> - public V remove ( K key ) <nl> - { <nl> - CacheableObject co = cache _ . remove ( key ) ; <nl> - V result = null ; <nl> - if ( co ! = null ) <nl> - { <nl> - result = co . getValue ( ) ; <nl> - } <nl> - return result ; <nl> - } <nl> - <nl> - public int size ( ) <nl> - { <nl> - return cache _ . size ( ) ; <nl> - } <nl> - <nl> - public boolean containsKey ( K key ) <nl> - { <nl> - return cache _ . containsKey ( key ) ; <nl> - } <nl> - <nl> - public boolean containsValue ( V value ) <nl> - { <nl> - return cache _ . containsValue ( new CacheableObject ( value ) ) ; <nl> - } <nl> - <nl> - public boolean isEmpty ( ) <nl> - { <nl> - return cache _ . isEmpty ( ) ; <nl> - } <nl> - <nl> - public Set < K > keySet ( ) <nl> - { <nl> - return cache _ . keySet ( ) ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / utils / ExpiringMap . java b / src / java / org / apache / cassandra / utils / ExpiringMap . java <nl> new file mode 100644 <nl> index 0000000 . . 356943f <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / utils / ExpiringMap . java <nl> @ @ - 0 , 0 + 1 , 217 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . util . * ; <nl> + <nl> + import org . apache . log4j . Logger ; <nl> + <nl> + import org . apache . cassandra . cache . ICacheExpungeHook ; <nl> + <nl> + public class ExpiringMap < K , V > <nl> + { <nl> + private class CacheableObject <nl> + { <nl> + private V value _ ; <nl> + private long age _ ; <nl> + <nl> + CacheableObject ( V o ) <nl> + { <nl> + value _ = o ; <nl> + age _ = System . currentTimeMillis ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean equals ( Object o ) <nl> + { <nl> + return value _ . equals ( o ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return value _ . hashCode ( ) ; <nl> + } <nl> + <nl> + V getValue ( ) <nl> + { <nl> + return value _ ; <nl> + } <nl> + <nl> + boolean isReadyToDie ( long expiration ) <nl> + { <nl> + return ( ( System . currentTimeMillis ( ) - age _ ) > expiration ) ; <nl> + } <nl> + } <nl> + <nl> + private class CacheMonitor extends TimerTask <nl> + { <nl> + private long expiration _ ; <nl> + <nl> + CacheMonitor ( long expiration ) <nl> + { <nl> + expiration _ = expiration ; <nl> + } <nl> + <nl> + @ Override <nl> + public void run ( ) <nl> + { <nl> + Map < K , V > expungedValues = new HashMap < K , V > ( ) ; <nl> + synchronized ( cache _ ) <nl> + { <nl> + Enumeration < K > e = cache _ . keys ( ) ; <nl> + while ( e . hasMoreElements ( ) ) <nl> + { <nl> + K key = e . nextElement ( ) ; <nl> + CacheableObject co = cache _ . get ( key ) ; <nl> + if ( co ! = null & & co . isReadyToDie ( expiration _ ) ) <nl> + { <nl> + V v = co . getValue ( ) ; <nl> + if ( null ! = v ) <nl> + { <nl> + expungedValues . put ( key , v ) ; <nl> + } <nl> + cache _ . remove ( key ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * Calling the hooks on the keys that have been expunged * / <nl> + Set < K > keys = expungedValues . keySet ( ) ; <nl> + for ( K key : keys ) <nl> + { <nl> + V value = expungedValues . get ( key ) ; <nl> + ICacheExpungeHook < K , V > hook = hooks _ . remove ( key ) ; <nl> + if ( hook ! = null ) <nl> + { <nl> + hook . callMe ( key , value ) ; <nl> + } <nl> + else if ( globalHook _ ! = null ) <nl> + { <nl> + globalHook _ . callMe ( key , value ) ; <nl> + } <nl> + } <nl> + expungedValues . clear ( ) ; <nl> + } <nl> + } <nl> + <nl> + private ICacheExpungeHook < K , V > globalHook _ ; <nl> + private Hashtable < K , CacheableObject > cache _ ; <nl> + private Map < K , ICacheExpungeHook < K , V > > hooks _ ; <nl> + private Timer timer _ ; <nl> + private static int counter _ = 0 ; <nl> + private static final Logger LOGGER = Logger . getLogger ( ExpiringMap . class ) ; <nl> + <nl> + private void init ( long expiration ) <nl> + { <nl> + if ( expiration < = 0 ) <nl> + { <nl> + throw new IllegalArgumentException ( " Argument specified must be a positive number " ) ; <nl> + } <nl> + <nl> + cache _ = new Hashtable < K , CacheableObject > ( ) ; <nl> + hooks _ = new Hashtable < K , ICacheExpungeHook < K , V > > ( ) ; <nl> + timer _ = new Timer ( " CACHETABLE - TIMER - " + ( + + counter _ ) , true ) ; <nl> + timer _ . schedule ( new CacheMonitor ( expiration ) , expiration , expiration ) ; <nl> + } <nl> + <nl> + / * <nl> + * Specify the TTL for objects in the cache <nl> + * in milliseconds . <nl> + * / <nl> + public ExpiringMap ( long expiration ) <nl> + { <nl> + init ( expiration ) ; <nl> + } <nl> + <nl> + / * <nl> + * Specify the TTL for objects in the cache <nl> + * in milliseconds and a global expunge hook . If <nl> + * a key has a key - specific hook installed invoke that <nl> + * instead . <nl> + * / <nl> + public ExpiringMap ( long expiration , ICacheExpungeHook < K , V > global ) <nl> + { <nl> + init ( expiration ) ; <nl> + globalHook _ = global ; <nl> + } <nl> + <nl> + public void shutdown ( ) <nl> + { <nl> + timer _ . cancel ( ) ; <nl> + } <nl> + <nl> + public void put ( K key , V value ) <nl> + { <nl> + cache _ . put ( key , new CacheableObject ( value ) ) ; <nl> + } <nl> + <nl> + public void put ( K key , V value , ICacheExpungeHook < K , V > hook ) <nl> + { <nl> + put ( key , value ) ; <nl> + hooks _ . put ( key , hook ) ; <nl> + } <nl> + <nl> + public V get ( K key ) <nl> + { <nl> + V result = null ; <nl> + CacheableObject co = cache _ . get ( key ) ; <nl> + if ( co ! = null ) <nl> + { <nl> + result = co . getValue ( ) ; <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> + public V remove ( K key ) <nl> + { <nl> + CacheableObject co = cache _ . remove ( key ) ; <nl> + V result = null ; <nl> + if ( co ! = null ) <nl> + { <nl> + result = co . getValue ( ) ; <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> + public int size ( ) <nl> + { <nl> + return cache _ . size ( ) ; <nl> + } <nl> + <nl> + public boolean containsKey ( K key ) <nl> + { <nl> + return cache _ . containsKey ( key ) ; <nl> + } <nl> + <nl> + public boolean containsValue ( V value ) <nl> + { <nl> + return cache _ . containsValue ( new CacheableObject ( value ) ) ; <nl> + } <nl> + <nl> + public boolean isEmpty ( ) <nl> + { <nl> + return cache _ . isEmpty ( ) ; <nl> + } <nl> + <nl> + public Set < K > keySet ( ) <nl> + { <nl> + return cache _ . keySet ( ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a7468f4 . . aca31fe 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Make AuthCache more easily extendable ( CASSANDRA - 14662 ) 
 * Extend RolesCache to include detailed role info ( CASSANDRA - 14497 ) 
 * Add fqltool compare ( CASSANDRA - 14619 ) 
 * Add fqltool replay ( CASSANDRA - 14618 ) 
 diff - - git a / src / java / org / apache / cassandra / auth / AuthCache . java b / src / java / org / apache / cassandra / auth / AuthCache . java 
 index d6ff0b0 . . 4f36a63 100644 
 - - - a / src / java / org / apache / cassandra / auth / AuthCache . java 
 + + + b / src / java / org / apache / cassandra / auth / AuthCache . java 
 @ @ - 35 , 24 + 35 , 40 @ @ import com . github . benmanes . caffeine . cache . LoadingCache ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - public class AuthCache < K , V > implements AuthCacheMBean 
 + import static com . google . common . base . Preconditions . checkNotNull ; 
 + 
 + public class AuthCache < K , V > implements AuthCacheMBean < K > 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( AuthCache . class ) ; 
 
 private static final String MBEAN _ NAME _ BASE = " org . apache . cassandra . auth : type = " ; 
 
 - private volatile LoadingCache < K , V > cache ; 
 - 
 - private final String name ; 
 - private final IntConsumer setValidityDelegate ; 
 - private final IntSupplier getValidityDelegate ; 
 - private final IntConsumer setUpdateIntervalDelegate ; 
 - private final IntSupplier getUpdateIntervalDelegate ; 
 - private final IntConsumer setMaxEntriesDelegate ; 
 - private final IntSupplier getMaxEntriesDelegate ; 
 - private final Function < K , V > loadFunction ; 
 - private final BooleanSupplier enableCache ; 
 - 
 + / * * 
 + * Underlying cache . LoadingCache will call underlying load function on { @ link # get } if key is not present 
 + * / 
 + protected volatile LoadingCache < K , V > cache ; 
 + 
 + private String name ; 
 + private IntConsumer setValidityDelegate ; 
 + private IntSupplier getValidityDelegate ; 
 + private IntConsumer setUpdateIntervalDelegate ; 
 + private IntSupplier getUpdateIntervalDelegate ; 
 + private IntConsumer setMaxEntriesDelegate ; 
 + private IntSupplier getMaxEntriesDelegate ; 
 + private Function < K , V > loadFunction ; 
 + private BooleanSupplier enableCache ; 
 + 
 + / * * 
 + * @ param name Used for MBean 
 + * @ param setValidityDelegate Used to set cache validity period . See { @ link Policy # expireAfterWrite ( ) } 
 + * @ param getValidityDelegate Getter for validity period 
 + * @ param setUpdateIntervalDelegate Used to set cache update interval . See { @ link Policy # refreshAfterWrite ( ) } 
 + * @ param getUpdateIntervalDelegate Getter for update interval 
 + * @ param setMaxEntriesDelegate Used to set max # entries in cache . See { @ link com . github . benmanes . caffeine . cache . Policy . Eviction # setMaximum ( long ) } 
 + * @ param getMaxEntriesDelegate Getter for max entries . 
 + * @ param loadFunction Function to load the cache . Called on { @ link # get ( Object ) } 
 + * @ param cacheEnabledDelegate Used to determine if cache is enabled . 
 + * / 
 protected AuthCache ( String name , 
 IntConsumer setValidityDelegate , 
 IntSupplier getValidityDelegate , 
 @ @ - 61 , 23 + 77 , 26 @ @ public class AuthCache < K , V > implements AuthCacheMBean 
 IntConsumer setMaxEntriesDelegate , 
 IntSupplier getMaxEntriesDelegate , 
 Function < K , V > loadFunction , 
 - BooleanSupplier enableCache ) 
 + BooleanSupplier cacheEnabledDelegate ) 
 { 
 - this . name = name ; 
 - this . setValidityDelegate = setValidityDelegate ; 
 - this . getValidityDelegate = getValidityDelegate ; 
 - this . setUpdateIntervalDelegate = setUpdateIntervalDelegate ; 
 - this . getUpdateIntervalDelegate = getUpdateIntervalDelegate ; 
 - this . setMaxEntriesDelegate = setMaxEntriesDelegate ; 
 - this . getMaxEntriesDelegate = getMaxEntriesDelegate ; 
 - this . loadFunction = loadFunction ; 
 - this . enableCache = enableCache ; 
 + this . name = checkNotNull ( name ) ; 
 + this . setValidityDelegate = checkNotNull ( setValidityDelegate ) ; 
 + this . getValidityDelegate = checkNotNull ( getValidityDelegate ) ; 
 + this . setUpdateIntervalDelegate = checkNotNull ( setUpdateIntervalDelegate ) ; 
 + this . getUpdateIntervalDelegate = checkNotNull ( getUpdateIntervalDelegate ) ; 
 + this . setMaxEntriesDelegate = checkNotNull ( setMaxEntriesDelegate ) ; 
 + this . getMaxEntriesDelegate = checkNotNull ( getMaxEntriesDelegate ) ; 
 + this . loadFunction = checkNotNull ( loadFunction ) ; 
 + this . enableCache = checkNotNull ( cacheEnabledDelegate ) ; 
 init ( ) ; 
 } 
 
 + / * * 
 + * Do setup for the cache and MBean . 
 + * / 
 protected void init ( ) 
 { 
 - this . cache = initCache ( null ) ; 
 + cache = initCache ( null ) ; 
 try 
 { 
 MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 @ @ - 107 , 6 + 126 , 14 @ @ public class AuthCache < K , V > implements AuthCacheMBean 
 return new ObjectName ( MBEAN _ NAME _ BASE + name ) ; 
 } 
 
 + / * * 
 + * Retrieve a value from the cache . Will call { @ link LoadingCache # get ( Object ) } which will 
 + * " load " the value if it ' s not present , thus populating the key . 
 + * @ param k 
 + * @ return The current value of { @ code K } if cached or loaded . 
 + * 
 + * See { @ link LoadingCache # get ( Object ) } for possible exceptions . 
 + * / 
 public V get ( K k ) 
 { 
 if ( cache = = null ) 
 @ @ - 115 , 17 + 142 , 28 @ @ public class AuthCache < K , V > implements AuthCacheMBean 
 return cache . get ( k ) ; 
 } 
 
 + / * * 
 + * Invalidate the entire cache . 
 + * / 
 public void invalidate ( ) 
 { 
 cache = initCache ( null ) ; 
 } 
 
 + / * * 
 + * Invalidate a key 
 + * @ param k key to invalidate 
 + * / 
 public void invalidate ( K k ) 
 { 
 if ( cache ! = null ) 
 cache . invalidate ( k ) ; 
 } 
 
 + / * * 
 + * Time in milliseconds that a value in the cache will expire after . 
 + * @ param validityPeriod in milliseconds 
 + * / 
 public void setValidity ( int validityPeriod ) 
 { 
 if ( Boolean . getBoolean ( " cassandra . disable _ auth _ caches _ remote _ configuration " ) ) 
 @ @ - 140 , 6 + 178 , 10 @ @ public class AuthCache < K , V > implements AuthCacheMBean 
 return getValidityDelegate . getAsInt ( ) ; 
 } 
 
 + / * * 
 + * Time in milliseconds after which an entry in the cache should be refreshed ( it ' s load function called again ) 
 + * @ param updateInterval in milliseconds 
 + * / 
 public void setUpdateInterval ( int updateInterval ) 
 { 
 if ( Boolean . getBoolean ( " cassandra . disable _ auth _ caches _ remote _ configuration " ) ) 
 @ @ - 154 , 6 + 196 , 10 @ @ public class AuthCache < K , V > implements AuthCacheMBean 
 return getUpdateIntervalDelegate . getAsInt ( ) ; 
 } 
 
 + / * * 
 + * Set maximum number of entries in the cache . 
 + * @ param maxEntries 
 + * / 
 public void setMaxEntries ( int maxEntries ) 
 { 
 if ( Boolean . getBoolean ( " cassandra . disable _ auth _ caches _ remote _ configuration " ) ) 
 @ @ - 168 , 7 + 214 , 14 @ @ public class AuthCache < K , V > implements AuthCacheMBean 
 return getMaxEntriesDelegate . getAsInt ( ) ; 
 } 
 
 - private LoadingCache < K , V > initCache ( LoadingCache < K , V > existing ) 
 + / * * 
 + * ( Re - ) initialise the underlying cache . Will update validity , max entries , and update interval if 
 + * any have changed . The underlying { @ link LoadingCache } will be initiated based on the provided { @ code loadFunction } . 
 + * Note : If you need some unhandled cache setting to be set you should extend { @ link AuthCache } and override this method . 
 + * @ param existing If not null will only update cache update validity , max entries , and update interval . 
 + * @ return New { @ link LoadingCache } if existing was null , otherwise the existing { @ code cache } 
 + * / 
 + protected LoadingCache < K , V > initCache ( LoadingCache < K , V > existing ) 
 { 
 if ( ! enableCache . getAsBoolean ( ) ) 
 return null ; 
 @ @ - 181 , 14 + 234 , 14 @ @ public class AuthCache < K , V > implements AuthCacheMBean 
 
 if ( existing = = null ) { 
 return Caffeine . newBuilder ( ) 
 - . refreshAfterWrite ( getUpdateInterval ( ) , TimeUnit . MILLISECONDS ) 
 - . expireAfterWrite ( getValidity ( ) , TimeUnit . MILLISECONDS ) 
 - . maximumSize ( getMaxEntries ( ) ) 
 - . executor ( MoreExecutors . directExecutor ( ) ) 
 - . build ( loadFunction : : apply ) ; 
 + . refreshAfterWrite ( getUpdateInterval ( ) , TimeUnit . MILLISECONDS ) 
 + . expireAfterWrite ( getValidity ( ) , TimeUnit . MILLISECONDS ) 
 + . maximumSize ( getMaxEntries ( ) ) 
 + . executor ( MoreExecutors . directExecutor ( ) ) 
 + . build ( loadFunction : : apply ) ; 
 } 
 
 - / / Always set as manditory 
 + / / Always set as mandatory 
 cache . policy ( ) . refreshAfterWrite ( ) . ifPresent ( policy - > 
 policy . setExpiresAfter ( getUpdateInterval ( ) , TimeUnit . MILLISECONDS ) ) ; 
 cache . policy ( ) . expireAfterWrite ( ) . ifPresent ( policy - > 
 diff - - git a / src / java / org / apache / cassandra / auth / AuthCacheMBean . java b / src / java / org / apache / cassandra / auth / AuthCacheMBean . java 
 index 43fb88e . . 1416044 100644 
 - - - a / src / java / org / apache / cassandra / auth / AuthCacheMBean . java 
 + + + b / src / java / org / apache / cassandra / auth / AuthCacheMBean . java 
 @ @ - 18 , 10 + 18 , 12 @ @ 
 
 package org . apache . cassandra . auth ; 
 
 - public interface AuthCacheMBean 
 + public interface AuthCacheMBean < T > 
 { 
 public void invalidate ( ) ; 
 
 + public void invalidate ( T t ) ; 
 + 
 public void setValidity ( int validityPeriod ) ; 
 
 public int getValidity ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / auth / NetworkAuthCache . java b / src / java / org / apache / cassandra / auth / NetworkAuthCache . java 
 index 15b1819 . . 0991889 100644 
 - - - a / src / java / org / apache / cassandra / auth / NetworkAuthCache . java 
 + + + b / src / java / org / apache / cassandra / auth / NetworkAuthCache . java 
 @ @ - 20 , 7 + 20 , 7 @ @ package org . apache . cassandra . auth ; 
 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 
 - public class NetworkAuthCache extends AuthCache < RoleResource , DCPermissions > implements AuthCacheMBean 
 + public class NetworkAuthCache extends AuthCache < RoleResource , DCPermissions > 
 { 
 public NetworkAuthCache ( INetworkAuthorizer authorizer ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java b / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java 
 index 27a68a0 . . b10136e 100644 
 - - - a / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java 
 + + + b / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java 
 @ @ - 228 , 7 + 228 , 7 @ @ public class PasswordAuthenticator implements IAuthenticator 
 } 
 } 
 
 - private static class CredentialsCache extends AuthCache < String , String > implements CredentialsCacheMBean 
 + private static class CredentialsCache extends AuthCache < String , String > 
 { 
 private CredentialsCache ( PasswordAuthenticator authenticator ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / auth / PermissionsCache . java b / src / java / org / apache / cassandra / auth / PermissionsCache . java 
 index 981ede8 . . a33f5d1 100644 
 - - - a / src / java / org / apache / cassandra / auth / PermissionsCache . java 
 + + + b / src / java / org / apache / cassandra / auth / PermissionsCache . java 
 @ @ - 22 , 7 + 22 , 7 @ @ import java . util . Set ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . utils . Pair ; 
 
 - public class PermissionsCache extends AuthCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > implements PermissionsCacheMBean 
 + public class PermissionsCache extends AuthCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > 
 { 
 public PermissionsCache ( IAuthorizer authorizer ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / auth / PermissionsCacheMBean . java b / src / java / org / apache / cassandra / auth / PermissionsCacheMBean . java 
 deleted file mode 100644 
 index d370d06 . . 0000000 
 - - - a / src / java / org / apache / cassandra / auth / PermissionsCacheMBean . java 
 + + + / dev / null 
 @ @ - 1 , 26 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . auth ; 
 - 
 - / * * 
 - * Retained since CASSANDRA - 7715 for backwards compatibility of MBean interface 
 - * classes . This should be removed in the next major version ( 4 . 0 ) 
 - * / 
 - public interface PermissionsCacheMBean extends AuthCacheMBean 
 - { 
 - } 
 diff - - git a / src / java / org / apache / cassandra / auth / RolesCache . java b / src / java / org / apache / cassandra / auth / RolesCache . java 
 index cc178ce . . d01de63 100644 
 - - - a / src / java / org / apache / cassandra / auth / RolesCache . java 
 + + + b / src / java / org / apache / cassandra / auth / RolesCache . java 
 @ @ - 23 , 7 + 23 , 7 @ @ import java . util . stream . Collectors ; 
 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 
 - public class RolesCache extends AuthCache < RoleResource , Set < Role > > implements RolesCacheMBean 
 + public class RolesCache extends AuthCache < RoleResource , Set < Role > > 
 { 
 public RolesCache ( IRoleManager roleManager , BooleanSupplier enableCache ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / auth / RolesCacheMBean . java b / src / java / org / apache / cassandra / auth / RolesCacheMBean . java 
 deleted file mode 100644 
 index 06482d7 . . 0000000 
 - - - a / src / java / org / apache / cassandra / auth / RolesCacheMBean . java 
 + + + / dev / null 
 @ @ - 1 , 26 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . auth ; 
 - 
 - / * * 
 - * Retained since CASSANDRA - 7715 for backwards compatibility of MBean interface 
 - * classes . This should be removed in the next major version ( 4 . 0 ) 
 - * / 
 - public interface RolesCacheMBean extends AuthCacheMBean 
 - { 
 - } 
 diff - - git a / test / unit / org / apache / cassandra / auth / AuthCacheTest . java b / test / unit / org / apache / cassandra / auth / AuthCacheTest . java 
 new file mode 100644 
 index 0000000 . . cc78ebc 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / auth / AuthCacheTest . java 
 @ @ - 0 , 0 + 1 , 137 @ @ 
 + 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . auth ; 
 + 
 + import org . junit . Assert ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertNotNull ; 
 + import static org . junit . Assert . assertNull ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + public class AuthCacheTest 
 + { 
 + private boolean loadFuncCalled = false ; 
 + private boolean isCacheEnabled = false ; 
 + 
 + @ BeforeClass 
 + public static void setup ( ) 
 + { 
 + DatabaseDescriptor . daemonInitialization ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testCaching ( ) 
 + { 
 + AuthCache < String , String > authCache = new AuthCache < > ( " TestCache " , 
 + DatabaseDescriptor : : setCredentialsValidity , 
 + DatabaseDescriptor : : getCredentialsValidity , 
 + DatabaseDescriptor : : setCredentialsUpdateInterval , 
 + DatabaseDescriptor : : getCredentialsUpdateInterval , 
 + DatabaseDescriptor : : setCredentialsCacheMaxEntries , 
 + DatabaseDescriptor : : getCredentialsCacheMaxEntries , 
 + this : : load , 
 + ( ) - > true 
 + ) ; 
 + 
 + / / Test cacheloader is called if set 
 + loadFuncCalled = false ; 
 + String result = authCache . get ( " test " ) ; 
 + assertTrue ( loadFuncCalled ) ; 
 + Assert . assertEquals ( " load " , result ) ; 
 + 
 + / / value should be fetched from cache 
 + loadFuncCalled = false ; 
 + String result2 = authCache . get ( " test " ) ; 
 + assertFalse ( loadFuncCalled ) ; 
 + Assert . assertEquals ( " load " , result2 ) ; 
 + 
 + / / value should be fetched from cache after complete invalidate 
 + authCache . invalidate ( ) ; 
 + loadFuncCalled = false ; 
 + String result3 = authCache . get ( " test " ) ; 
 + assertTrue ( loadFuncCalled ) ; 
 + Assert . assertEquals ( " load " , result3 ) ; 
 + 
 + / / value should be fetched from cache after invalidating key 
 + authCache . invalidate ( " test " ) ; 
 + loadFuncCalled = false ; 
 + String result4 = authCache . get ( " test " ) ; 
 + assertTrue ( loadFuncCalled ) ; 
 + Assert . assertEquals ( " load " , result4 ) ; 
 + 
 + / / set cache to null and load function should be called 
 + loadFuncCalled = false ; 
 + authCache . cache = null ; 
 + String result5 = authCache . get ( " test " ) ; 
 + assertTrue ( loadFuncCalled ) ; 
 + Assert . assertEquals ( " load " , result5 ) ; 
 + } 
 + 
 + @ Test 
 + public void testInitCache ( ) 
 + { 
 + / / Test that a validity of < = 0 will turn off caching 
 + DatabaseDescriptor . setCredentialsValidity ( 0 ) ; 
 + AuthCache < String , String > authCache = new AuthCache < > ( " TestCache2 " , 
 + DatabaseDescriptor : : setCredentialsValidity , 
 + DatabaseDescriptor : : getCredentialsValidity , 
 + DatabaseDescriptor : : setCredentialsUpdateInterval , 
 + DatabaseDescriptor : : getCredentialsUpdateInterval , 
 + DatabaseDescriptor : : setCredentialsCacheMaxEntries , 
 + DatabaseDescriptor : : getCredentialsCacheMaxEntries , 
 + this : : load , 
 + ( ) - > true ) ; 
 + assertNull ( authCache . cache ) ; 
 + authCache . setValidity ( 2000 ) ; 
 + authCache . cache = authCache . initCache ( null ) ; 
 + assertNotNull ( authCache . cache ) ; 
 + 
 + / / Test enableCache works as intended 
 + authCache = new AuthCache < > ( " TestCache3 " , 
 + DatabaseDescriptor : : setCredentialsValidity , 
 + DatabaseDescriptor : : getCredentialsValidity , 
 + DatabaseDescriptor : : setCredentialsUpdateInterval , 
 + DatabaseDescriptor : : getCredentialsUpdateInterval , 
 + DatabaseDescriptor : : setCredentialsCacheMaxEntries , 
 + DatabaseDescriptor : : getCredentialsCacheMaxEntries , 
 + this : : load , 
 + ( ) - > isCacheEnabled ) ; 
 + assertNull ( authCache . cache ) ; 
 + isCacheEnabled = true ; 
 + authCache . cache = authCache . initCache ( null ) ; 
 + assertNotNull ( authCache . cache ) ; 
 + 
 + / / Ensure at a minimum these policies have been initialised by default 
 + assertTrue ( authCache . cache . policy ( ) . expireAfterWrite ( ) . isPresent ( ) ) ; 
 + assertTrue ( authCache . cache . policy ( ) . refreshAfterWrite ( ) . isPresent ( ) ) ; 
 + assertTrue ( authCache . cache . policy ( ) . eviction ( ) . isPresent ( ) ) ; 
 + } 
 + 
 + private String load ( String test ) 
 + { 
 + loadFuncCalled = true ; 
 + return " load " ; 
 + } 
 + 
 + }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cache / ICachetable . java b / src / java / org / apache / cassandra / cache / ICachetable . java 
 deleted file mode 100644 
 index 98d6ffa . . 0000000 
 - - - a / src / java / org / apache / cassandra / cache / ICachetable . java 
 + + + / dev / null 
 @ @ - 1 , 35 + 0 , 0 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . cache ; 
 - 
 - import java . util . Set ; 
 - 
 - public interface ICachetable < K , V > 
 - { 
 - public void put ( K key , V value ) ; 
 - public void put ( K key , V value , ICacheExpungeHook < K , V > hook ) ; 
 - 	 public V get ( K key ) ; 
 - public V remove ( K key ) ; 
 - public int size ( ) ; 
 - public boolean containsKey ( K key ) ; 
 - public boolean containsValue ( V value ) ; 
 - public boolean isEmpty ( ) ; 
 - public Set < K > keySet ( ) ; 
 - public void shutdown ( ) ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 9340c5b . . ef43fa7 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 18 , 7 + 18 , 6 @ @ 
 
 package org . apache . cassandra . net ; 
 
 - import org . apache . cassandra . cache . ICachetable ; 
 import org . apache . cassandra . concurrent . * ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . gms . FailureDetector ; 
 @ @ - 56 , 8 + 55 , 8 @ @ public class MessagingService implements IFailureDetectionEventListener 
 public static final String responseVerbHandler _ = " RESPONSE " ; 
 
 / * This records all the results mapped by message Id * / 
 - private static ICachetable < String , IAsyncCallback > callbackMap _ ; 
 - private static ICachetable < String , IAsyncResult > taskCompletionMap _ ; 
 + private static ExpiringMap < String , IAsyncCallback > callbackMap _ ; 
 + private static ExpiringMap < String , IAsyncResult > taskCompletionMap _ ; 
 
 / * Lookup table for registering message handlers based on the verb . * / 
 private static Map < String , IVerbHandler > verbHandlers _ ; 
 @ @ - 94 , 8 + 93 , 8 @ @ public class MessagingService implements IFailureDetectionEventListener 
 * which is the sum of the threads in the pool that adds shit into the table and the 
 * pool that retrives the callback from here . 
 * / 
 - callbackMap _ = new Cachetable < String , IAsyncCallback > ( 2 * DatabaseDescriptor . getRpcTimeout ( ) ) ; 
 - taskCompletionMap _ = new Cachetable < String , IAsyncResult > ( 2 * DatabaseDescriptor . getRpcTimeout ( ) ) ; 
 + callbackMap _ = new ExpiringMap < String , IAsyncCallback > ( 2 * DatabaseDescriptor . getRpcTimeout ( ) ) ; 
 + taskCompletionMap _ = new ExpiringMap < String , IAsyncResult > ( 2 * DatabaseDescriptor . getRpcTimeout ( ) ) ; 
 
 / / read executor puts messages to deserialize on this . 
 messageDeserializerExecutor _ = new JMXEnabledThreadPoolExecutor ( 1 , 
 diff - - git a / src / java / org / apache / cassandra / service / AntiEntropyService . java b / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 index 8e5e46d . . 9dd75b2 100644 
 - - - a / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 + + + b / src / java / org / apache / cassandra / service / AntiEntropyService . java 
 @ @ - 113 , 7 + 113 , 7 @ @ public class AntiEntropyService 
 * 
 * This map is only accessed from AE _ SERVICE _ STAGE , so it is not synchronized . 
 * / 
 - private final Map < CFPair , Cachetable < InetAddress , TreePair > > trees ; 
 + private final Map < CFPair , ExpiringMap < InetAddress , TreePair > > trees ; 
 
 / * * 
 * Protected constructor . Use AntiEntropyService . instance . 
 @ @ - 123 , 7 + 123 , 7 @ @ public class AntiEntropyService 
 MessagingService . instance . registerVerbHandlers ( TREE _ REQUEST _ VERB , new TreeRequestVerbHandler ( ) ) ; 
 MessagingService . instance . registerVerbHandlers ( TREE _ RESPONSE _ VERB , new TreeResponseVerbHandler ( ) ) ; 
 naturalRepairs = new ConcurrentHashMap < CFPair , Long > ( ) ; 
 - trees = new HashMap < CFPair , Cachetable < InetAddress , TreePair > > ( ) ; 
 + trees = new HashMap < CFPair , ExpiringMap < InetAddress , TreePair > > ( ) ; 
 } 
 
 / * * 
 @ @ - 133 , 12 + 133 , 12 @ @ public class AntiEntropyService 
 * @ param cf Column family to fetch trees for . 
 * @ return The store of trees for the given cf . 
 * / 
 - private Cachetable < InetAddress , TreePair > rendezvousPairs ( CFPair cf ) 
 + private ExpiringMap < InetAddress , TreePair > rendezvousPairs ( CFPair cf ) 
 { 
 - Cachetable < InetAddress , TreePair > ctrees = trees . get ( cf ) ; 
 + ExpiringMap < InetAddress , TreePair > ctrees = trees . get ( cf ) ; 
 if ( ctrees = = null ) 
 { 
 - ctrees = new Cachetable < InetAddress , TreePair > ( TREE _ STORE _ TIMEOUT ) ; 
 + ctrees = new ExpiringMap < InetAddress , TreePair > ( TREE _ STORE _ TIMEOUT ) ; 
 trees . put ( cf , ctrees ) ; 
 } 
 return ctrees ; 
 @ @ - 168 , 7 + 168 , 7 @ @ public class AntiEntropyService 
 InetAddress LOCAL = FBUtilities . getLocalAddress ( ) ; 
 
 / / return the rendezvous pairs for this cf 
 - Cachetable < InetAddress , TreePair > ctrees = rendezvousPairs ( cf ) ; 
 + ExpiringMap < InetAddress , TreePair > ctrees = rendezvousPairs ( cf ) ; 
 
 List < Differencer > differencers = new ArrayList < Differencer > ( ) ; 
 if ( LOCAL . equals ( endpoint ) ) 
 diff - - git a / src / java / org / apache / cassandra / service / ConsistencyManager . java b / src / java / org / apache / cassandra / service / ConsistencyManager . java 
 index effd282 . . 925d426 100644 
 - - - a / src / java / org / apache / cassandra / service / ConsistencyManager . java 
 + + + b / src / java / org / apache / cassandra / service / ConsistencyManager . java 
 @ @ - 26 , 7 + 26 , 6 @ @ import java . util . Arrays ; 
 import java . util . List ; 
 
 import org . apache . cassandra . cache . ICacheExpungeHook ; 
 - import org . apache . cassandra . cache . ICachetable ; 
 import org . apache . cassandra . db . ReadCommand ; 
 import org . apache . cassandra . db . ReadResponse ; 
 import org . apache . cassandra . db . Row ; 
 @ @ - 132 , 7 + 131 , 7 @ @ class ConsistencyManager implements Runnable 
 } 
 
 	 private static long scheduledTimeMillis _ = 600 ; 
 - 	 private static ICachetable < String , String > readRepairTable _ = new Cachetable < String , String > ( scheduledTimeMillis _ ) ; 
 + 	 private static ExpiringMap < String , String > readRepairTable _ = new ExpiringMap < String , String > ( scheduledTimeMillis _ ) ; 
 	 private final Row row _ ; 
 	 protected final List < InetAddress > replicas _ ; 
 	 private final ReadCommand readCommand _ ; 
 diff - - git a / src / java / org / apache / cassandra / service / ReadRepairManager . java b / src / java / org / apache / cassandra / service / ReadRepairManager . java 
 index 294c95a . . 07cc8da 100644 
 - - - a / src / java / org / apache / cassandra / service / ReadRepairManager . java 
 + + + b / src / java / org / apache / cassandra / service / ReadRepairManager . java 
 @ @ - 27 , 10 + 27 , 9 @ @ import java . net . UnknownHostException ; 
 
 import org . apache . cassandra . net . Message ; 
 import org . apache . cassandra . net . MessagingService ; 
 - import org . apache . cassandra . utils . Cachetable ; 
 + import org . apache . cassandra . utils . ExpiringMap ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . cache . ICacheExpungeHook ; 
 - import org . apache . cassandra . cache . ICachetable ; 
 
 import org . apache . log4j . Logger ; 
 
 @ @ - 78 , 7 + 77 , 7 @ @ class ReadRepairManager 
 
 	 } 
 
 - 	 private ICachetable < String , Message > readRepairTable _ = new Cachetable < String , Message > ( expirationTimeInMillis , new ReadRepairManager . ReadRepairPerformer ( ) ) ; 
 + 	 private ExpiringMap < String , Message > readRepairTable _ = new ExpiringMap < String , Message > ( expirationTimeInMillis , new ReadRepairManager . ReadRepairPerformer ( ) ) ; 
 
 	 protected ReadRepairManager ( ) 
 	 { 
 diff - - git a / src / java / org / apache / cassandra / utils / Cachetable . java b / src / java / org / apache / cassandra / utils / Cachetable . java 
 deleted file mode 100644 
 index e112647 . . 0000000 
 - - - a / src / java / org / apache / cassandra / utils / Cachetable . java 
 + + + / dev / null 
 @ @ - 1 , 218 + 0 , 0 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . utils ; 
 - 
 - import java . util . * ; 
 - 
 - import org . apache . log4j . Logger ; 
 - 
 - import org . apache . cassandra . cache . ICacheExpungeHook ; 
 - import org . apache . cassandra . cache . ICachetable ; 
 - 
 - public class Cachetable < K , V > implements ICachetable < K , V > 
 - { 
 - private class CacheableObject 
 - { 
 - private V value _ ; 
 - private long age _ ; 
 - 
 - CacheableObject ( V o ) 
 - { 
 - value _ = o ; 
 - age _ = System . currentTimeMillis ( ) ; 
 - } 
 - 
 - @ Override 
 - public boolean equals ( Object o ) 
 - { 
 - return value _ . equals ( o ) ; 
 - } 
 - 
 - @ Override 
 - public int hashCode ( ) 
 - { 
 - return value _ . hashCode ( ) ; 
 - } 
 - 
 - V getValue ( ) 
 - { 
 - return value _ ; 
 - } 
 - 
 - boolean isReadyToDie ( long expiration ) 
 - { 
 - return ( ( System . currentTimeMillis ( ) - age _ ) > expiration ) ; 
 - } 
 - } 
 - 
 - private class CacheMonitor extends TimerTask 
 - { 
 - private long expiration _ ; 
 - 
 - CacheMonitor ( long expiration ) 
 - { 
 - expiration _ = expiration ; 
 - } 
 - 
 - @ Override 
 - public void run ( ) 
 - { 
 - Map < K , V > expungedValues = new HashMap < K , V > ( ) ; 
 - synchronized ( cache _ ) 
 - { 
 - Enumeration < K > e = cache _ . keys ( ) ; 
 - while ( e . hasMoreElements ( ) ) 
 - { 
 - K key = e . nextElement ( ) ; 
 - CacheableObject co = cache _ . get ( key ) ; 
 - if ( co ! = null & & co . isReadyToDie ( expiration _ ) ) 
 - { 
 - V v = co . getValue ( ) ; 
 - if ( null ! = v ) 
 - { 
 - expungedValues . put ( key , v ) ; 
 - } 
 - cache _ . remove ( key ) ; 
 - } 
 - } 
 - } 
 - 
 - / * Calling the hooks on the keys that have been expunged * / 
 - Set < K > keys = expungedValues . keySet ( ) ; 
 - for ( K key : keys ) 
 - { 
 - V value = expungedValues . get ( key ) ; 
 - ICacheExpungeHook < K , V > hook = hooks _ . remove ( key ) ; 
 - if ( hook ! = null ) 
 - { 
 - hook . callMe ( key , value ) ; 
 - } 
 - else if ( globalHook _ ! = null ) 
 - { 
 - globalHook _ . callMe ( key , value ) ; 
 - } 
 - } 
 - expungedValues . clear ( ) ; 
 - } 
 - } 
 - 
 - private ICacheExpungeHook < K , V > globalHook _ ; 
 - private Hashtable < K , CacheableObject > cache _ ; 
 - private Map < K , ICacheExpungeHook < K , V > > hooks _ ; 
 - private Timer timer _ ; 
 - private static int counter _ = 0 ; 
 - private static final Logger LOGGER = Logger . getLogger ( Cachetable . class ) ; 
 - 
 - private void init ( long expiration ) 
 - { 
 - if ( expiration < = 0 ) 
 - { 
 - throw new IllegalArgumentException ( " Argument specified must be a positive number " ) ; 
 - } 
 - 
 - cache _ = new Hashtable < K , CacheableObject > ( ) ; 
 - hooks _ = new Hashtable < K , ICacheExpungeHook < K , V > > ( ) ; 
 - timer _ = new Timer ( " CACHETABLE - TIMER - " + ( + + counter _ ) , true ) ; 
 - timer _ . schedule ( new CacheMonitor ( expiration ) , expiration , expiration ) ; 
 - } 
 - 
 - / * 
 - * Specify the TTL for objects in the cache 
 - * in milliseconds . 
 - * / 
 - public Cachetable ( long expiration ) 
 - { 
 - init ( expiration ) ; 
 - } 
 - 
 - / * 
 - * Specify the TTL for objects in the cache 
 - * in milliseconds and a global expunge hook . If 
 - * a key has a key - specific hook installed invoke that 
 - * instead . 
 - * / 
 - public Cachetable ( long expiration , ICacheExpungeHook < K , V > global ) 
 - { 
 - init ( expiration ) ; 
 - globalHook _ = global ; 
 - } 
 - 
 - public void shutdown ( ) 
 - { 
 - timer _ . cancel ( ) ; 
 - } 
 - 
 - public void put ( K key , V value ) 
 - { 
 - cache _ . put ( key , new CacheableObject ( value ) ) ; 
 - } 
 - 
 - public void put ( K key , V value , ICacheExpungeHook < K , V > hook ) 
 - { 
 - put ( key , value ) ; 
 - hooks _ . put ( key , hook ) ; 
 - } 
 - 
 - public V get ( K key ) 
 - { 
 - V result = null ; 
 - CacheableObject co = cache _ . get ( key ) ; 
 - if ( co ! = null ) 
 - { 
 - result = co . getValue ( ) ; 
 - } 
 - return result ; 
 - } 
 - 
 - public V remove ( K key ) 
 - { 
 - CacheableObject co = cache _ . remove ( key ) ; 
 - V result = null ; 
 - if ( co ! = null ) 
 - { 
 - result = co . getValue ( ) ; 
 - } 
 - return result ; 
 - } 
 - 
 - public int size ( ) 
 - { 
 - return cache _ . size ( ) ; 
 - } 
 - 
 - public boolean containsKey ( K key ) 
 - { 
 - return cache _ . containsKey ( key ) ; 
 - } 
 - 
 - public boolean containsValue ( V value ) 
 - { 
 - return cache _ . containsValue ( new CacheableObject ( value ) ) ; 
 - } 
 - 
 - public boolean isEmpty ( ) 
 - { 
 - return cache _ . isEmpty ( ) ; 
 - } 
 - 
 - public Set < K > keySet ( ) 
 - { 
 - return cache _ . keySet ( ) ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / utils / ExpiringMap . java b / src / java / org / apache / cassandra / utils / ExpiringMap . java 
 new file mode 100644 
 index 0000000 . . 356943f 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / utils / ExpiringMap . java 
 @ @ - 0 , 0 + 1 , 217 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . util . * ; 
 + 
 + import org . apache . log4j . Logger ; 
 + 
 + import org . apache . cassandra . cache . ICacheExpungeHook ; 
 + 
 + public class ExpiringMap < K , V > 
 + { 
 + private class CacheableObject 
 + { 
 + private V value _ ; 
 + private long age _ ; 
 + 
 + CacheableObject ( V o ) 
 + { 
 + value _ = o ; 
 + age _ = System . currentTimeMillis ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean equals ( Object o ) 
 + { 
 + return value _ . equals ( o ) ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return value _ . hashCode ( ) ; 
 + } 
 + 
 + V getValue ( ) 
 + { 
 + return value _ ; 
 + } 
 + 
 + boolean isReadyToDie ( long expiration ) 
 + { 
 + return ( ( System . currentTimeMillis ( ) - age _ ) > expiration ) ; 
 + } 
 + } 
 + 
 + private class CacheMonitor extends TimerTask 
 + { 
 + private long expiration _ ; 
 + 
 + CacheMonitor ( long expiration ) 
 + { 
 + expiration _ = expiration ; 
 + } 
 + 
 + @ Override 
 + public void run ( ) 
 + { 
 + Map < K , V > expungedValues = new HashMap < K , V > ( ) ; 
 + synchronized ( cache _ ) 
 + { 
 + Enumeration < K > e = cache _ . keys ( ) ; 
 + while ( e . hasMoreElements ( ) ) 
 + { 
 + K key = e . nextElement ( ) ; 
 + CacheableObject co = cache _ . get ( key ) ; 
 + if ( co ! = null & & co . isReadyToDie ( expiration _ ) ) 
 + { 
 + V v = co . getValue ( ) ; 
 + if ( null ! = v ) 
 + { 
 + expungedValues . put ( key , v ) ; 
 + } 
 + cache _ . remove ( key ) ; 
 + } 
 + } 
 + } 
 + 
 + / * Calling the hooks on the keys that have been expunged * / 
 + Set < K > keys = expungedValues . keySet ( ) ; 
 + for ( K key : keys ) 
 + { 
 + V value = expungedValues . get ( key ) ; 
 + ICacheExpungeHook < K , V > hook = hooks _ . remove ( key ) ; 
 + if ( hook ! = null ) 
 + { 
 + hook . callMe ( key , value ) ; 
 + } 
 + else if ( globalHook _ ! = null ) 
 + { 
 + globalHook _ . callMe ( key , value ) ; 
 + } 
 + } 
 + expungedValues . clear ( ) ; 
 + } 
 + } 
 + 
 + private ICacheExpungeHook < K , V > globalHook _ ; 
 + private Hashtable < K , CacheableObject > cache _ ; 
 + private Map < K , ICacheExpungeHook < K , V > > hooks _ ; 
 + private Timer timer _ ; 
 + private static int counter _ = 0 ; 
 + private static final Logger LOGGER = Logger . getLogger ( ExpiringMap . class ) ; 
 + 
 + private void init ( long expiration ) 
 + { 
 + if ( expiration < = 0 ) 
 + { 
 + throw new IllegalArgumentException ( " Argument specified must be a positive number " ) ; 
 + } 
 + 
 + cache _ = new Hashtable < K , CacheableObject > ( ) ; 
 + hooks _ = new Hashtable < K , ICacheExpungeHook < K , V > > ( ) ; 
 + timer _ = new Timer ( " CACHETABLE - TIMER - " + ( + + counter _ ) , true ) ; 
 + timer _ . schedule ( new CacheMonitor ( expiration ) , expiration , expiration ) ; 
 + } 
 + 
 + / * 
 + * Specify the TTL for objects in the cache 
 + * in milliseconds . 
 + * / 
 + public ExpiringMap ( long expiration ) 
 + { 
 + init ( expiration ) ; 
 + } 
 + 
 + / * 
 + * Specify the TTL for objects in the cache 
 + * in milliseconds and a global expunge hook . If 
 + * a key has a key - specific hook installed invoke that 
 + * instead . 
 + * / 
 + public ExpiringMap ( long expiration , ICacheExpungeHook < K , V > global ) 
 + { 
 + init ( expiration ) ; 
 + globalHook _ = global ; 
 + } 
 + 
 + public void shutdown ( ) 
 + { 
 + timer _ . cancel ( ) ; 
 + } 
 + 
 + public void put ( K key , V value ) 
 + { 
 + cache _ . put ( key , new CacheableObject ( value ) ) ; 
 + } 
 + 
 + public void put ( K key , V value , ICacheExpungeHook < K , V > hook ) 
 + { 
 + put ( key , value ) ; 
 + hooks _ . put ( key , hook ) ; 
 + } 
 + 
 + public V get ( K key ) 
 + { 
 + V result = null ; 
 + CacheableObject co = cache _ . get ( key ) ; 
 + if ( co ! = null ) 
 + { 
 + result = co . getValue ( ) ; 
 + } 
 + return result ; 
 + } 
 + 
 + public V remove ( K key ) 
 + { 
 + CacheableObject co = cache _ . remove ( key ) ; 
 + V result = null ; 
 + if ( co ! = null ) 
 + { 
 + result = co . getValue ( ) ; 
 + } 
 + return result ; 
 + } 
 + 
 + public int size ( ) 
 + { 
 + return cache _ . size ( ) ; 
 + } 
 + 
 + public boolean containsKey ( K key ) 
 + { 
 + return cache _ . containsKey ( key ) ; 
 + } 
 + 
 + public boolean containsValue ( V value ) 
 + { 
 + return cache _ . containsValue ( new CacheableObject ( value ) ) ; 
 + } 
 + 
 + public boolean isEmpty ( ) 
 + { 
 + return cache _ . isEmpty ( ) ; 
 + } 
 + 
 + public Set < K > keySet ( ) 
 + { 
 + return cache _ . keySet ( ) ; 
 + } 
 + }
