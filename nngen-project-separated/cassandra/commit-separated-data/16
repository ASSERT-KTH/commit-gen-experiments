BLEU SCORE: 0.05522397783539471

TEST MSG: Improve ` nodetool status - r ` speed
GENERATED MSG: Allow nodetool to optionally resolve hostnames .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b755751 . . fb71bf5 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 19 <nl> + * Improve ` nodetool status - r ` speed ( CASSANDRA - 14847 ) <nl> * Improve merkle tree size and time on heap ( CASSANDRA - 14096 ) <nl> * Add missing commands to nodetool - completion ( CASSANDRA - 14916 ) <nl> * Anti - compaction temporarily corrupts sstable state for readers ( CASSANDRA - 15004 ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / Status . java b / src / java / org / apache / cassandra / tools / nodetool / Status . java <nl> index 99f745d . . 091040b 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / nodetool / Status . java <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / Status . java <nl> @ @ - 25 , 8 + 25 , 10 @ @ import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . text . DecimalFormat ; <nl> import java . util . Collection ; <nl> + import java . util . HashSet ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . Set ; <nl> import java . util . SortedMap ; <nl> <nl> import org . apache . cassandra . locator . EndpointSnitchInfoMBean ; <nl> @ @ - 46 , 7 + 48 , 6 @ @ public class Status extends NodeToolCmd <nl> private boolean resolveIp = false ; <nl> <nl> private boolean isTokenPerNode = true ; <nl> - private int maxAddressLength = 0 ; <nl> private String format = null ; <nl> private Collection < String > joiningNodes , leavingNodes , movingNodes , liveNodes , unreachableNodes ; <nl> private Map < String , String > loadMap , hostIDMap ; <nl> @ @ - 91 , 13 + 92 , 13 @ @ public class Status extends NodeToolCmd <nl> if ( dcs . values ( ) . size ( ) < tokensToEndpoints . keySet ( ) . size ( ) ) <nl> isTokenPerNode = false ; <nl> <nl> - findMaxAddressLength ( dcs ) ; <nl> + int maxAddressLength = computeMaxAddressLength ( dcs ) ; <nl> <nl> / / Datacenters <nl> for ( Map . Entry < String , SetHostStat > dc : dcs . entrySet ( ) ) <nl> { <nl> String dcHeader = String . format ( " Datacenter : % s % n " , dc . getKey ( ) ) ; <nl> - System . out . printf ( dcHeader ) ; <nl> + System . out . print ( dcHeader ) ; <nl> for ( int i = 0 ; i < ( dcHeader . length ( ) - 1 ) ; i + + ) System . out . print ( ' = ' ) ; <nl> System . out . println ( ) ; <nl> <nl> @ @ - 105 , 7 + 106 , 7 @ @ public class Status extends NodeToolCmd <nl> System . out . println ( " Status = Up / Down " ) ; <nl> System . out . println ( " | / State = Normal / Leaving / Joining / Moving " ) ; <nl> <nl> - printNodesHeader ( hasEffectiveOwns , isTokenPerNode ) ; <nl> + printNodesHeader ( hasEffectiveOwns , isTokenPerNode , maxAddressLength ) ; <nl> <nl> ArrayListMultimap < InetAddress , HostStat > hostToTokens = ArrayListMultimap . create ( ) ; <nl> for ( HostStat stat : dc . getValue ( ) ) <nl> @ @ - 115 , 29 + 116 , 30 @ @ public class Status extends NodeToolCmd <nl> { <nl> Float owns = ownerships . get ( endpoint ) ; <nl> List < HostStat > tokens = hostToTokens . get ( endpoint ) ; <nl> - printNode ( endpoint . getHostAddress ( ) , owns , tokens , hasEffectiveOwns , isTokenPerNode ) ; <nl> + printNode ( endpoint . getHostAddress ( ) , owns , tokens , hasEffectiveOwns , isTokenPerNode , maxAddressLength ) ; <nl> } <nl> } <nl> <nl> - System . out . printf ( " % n " + errors . toString ( ) ) ; <nl> + System . out . printf ( " % n " + errors ) ; <nl> <nl> } <nl> <nl> - private void findMaxAddressLength ( Map < String , SetHostStat > dcs ) <nl> + private int computeMaxAddressLength ( Map < String , SetHostStat > dcs ) <nl> { <nl> - maxAddressLength = 0 ; <nl> - for ( Map . Entry < String , SetHostStat > dc : dcs . entrySet ( ) ) <nl> - { <nl> - for ( HostStat stat : dc . getValue ( ) ) <nl> - { <nl> - maxAddressLength = Math . max ( maxAddressLength , stat . ipOrDns ( ) . length ( ) ) ; <nl> - } <nl> - } <nl> + int maxAddressLength = 0 ; <nl> + <nl> + Set < InetAddress > seenHosts = new HashSet < > ( ) ; <nl> + for ( SetHostStat stats : dcs . values ( ) ) <nl> + for ( HostStat stat : stats ) <nl> + if ( seenHosts . add ( stat . endpoint ) ) <nl> + maxAddressLength = Math . max ( maxAddressLength , stat . ipOrDns ( ) . length ( ) ) ; <nl> + <nl> + return maxAddressLength ; <nl> } <nl> <nl> - private void printNodesHeader ( boolean hasEffectiveOwns , boolean isTokenPerNode ) <nl> + private void printNodesHeader ( boolean hasEffectiveOwns , boolean isTokenPerNode , int maxAddressLength ) <nl> { <nl> - String fmt = getFormat ( hasEffectiveOwns , isTokenPerNode ) ; <nl> + String fmt = getFormat ( hasEffectiveOwns , isTokenPerNode , maxAddressLength ) ; <nl> String owns = hasEffectiveOwns ? " Owns ( effective ) " : " Owns " ; <nl> <nl> if ( isTokenPerNode ) <nl> @ @ - 146 , 10 + 148 , 11 @ @ public class Status extends NodeToolCmd <nl> System . out . printf ( fmt , " - " , " - " , " Address " , " Load " , " Tokens " , owns , " Host ID " , " Rack " ) ; <nl> } <nl> <nl> - private void printNode ( String endpoint , Float owns , List < HostStat > tokens , boolean hasEffectiveOwns , boolean isTokenPerNode ) <nl> + private void printNode ( String endpoint , Float owns , List < HostStat > tokens , boolean hasEffectiveOwns , <nl> + boolean isTokenPerNode , int maxAddressLength ) <nl> { <nl> String status , state , load , strOwns , hostID , rack , fmt ; <nl> - fmt = getFormat ( hasEffectiveOwns , isTokenPerNode ) ; <nl> + fmt = getFormat ( hasEffectiveOwns , isTokenPerNode , maxAddressLength ) ; <nl> if ( liveNodes . contains ( endpoint ) ) status = " U " ; <nl> else if ( unreachableNodes . contains ( endpoint ) ) status = " D " ; <nl> else status = " ? " ; <nl> @ @ - 177 , 9 + 180 , 7 @ @ public class Status extends NodeToolCmd <nl> System . out . printf ( fmt , status , state , endpointDns , load , tokens . size ( ) , strOwns , hostID , rack ) ; <nl> } <nl> <nl> - private String getFormat ( <nl> - boolean hasEffectiveOwns , <nl> - boolean isTokenPerNode ) <nl> + private String getFormat ( boolean hasEffectiveOwns , boolean isTokenPerNode , int maxAddressLength ) <nl> { <nl> if ( format = = null ) <nl> {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b755751 . . fb71bf5 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 19 
 + * Improve ` nodetool status - r ` speed ( CASSANDRA - 14847 ) 
 * Improve merkle tree size and time on heap ( CASSANDRA - 14096 ) 
 * Add missing commands to nodetool - completion ( CASSANDRA - 14916 ) 
 * Anti - compaction temporarily corrupts sstable state for readers ( CASSANDRA - 15004 ) 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / Status . java b / src / java / org / apache / cassandra / tools / nodetool / Status . java 
 index 99f745d . . 091040b 100644 
 - - - a / src / java / org / apache / cassandra / tools / nodetool / Status . java 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / Status . java 
 @ @ - 25 , 8 + 25 , 10 @ @ import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . text . DecimalFormat ; 
 import java . util . Collection ; 
 + import java . util . HashSet ; 
 import java . util . List ; 
 import java . util . Map ; 
 + import java . util . Set ; 
 import java . util . SortedMap ; 
 
 import org . apache . cassandra . locator . EndpointSnitchInfoMBean ; 
 @ @ - 46 , 7 + 48 , 6 @ @ public class Status extends NodeToolCmd 
 private boolean resolveIp = false ; 
 
 private boolean isTokenPerNode = true ; 
 - private int maxAddressLength = 0 ; 
 private String format = null ; 
 private Collection < String > joiningNodes , leavingNodes , movingNodes , liveNodes , unreachableNodes ; 
 private Map < String , String > loadMap , hostIDMap ; 
 @ @ - 91 , 13 + 92 , 13 @ @ public class Status extends NodeToolCmd 
 if ( dcs . values ( ) . size ( ) < tokensToEndpoints . keySet ( ) . size ( ) ) 
 isTokenPerNode = false ; 
 
 - findMaxAddressLength ( dcs ) ; 
 + int maxAddressLength = computeMaxAddressLength ( dcs ) ; 
 
 / / Datacenters 
 for ( Map . Entry < String , SetHostStat > dc : dcs . entrySet ( ) ) 
 { 
 String dcHeader = String . format ( " Datacenter : % s % n " , dc . getKey ( ) ) ; 
 - System . out . printf ( dcHeader ) ; 
 + System . out . print ( dcHeader ) ; 
 for ( int i = 0 ; i < ( dcHeader . length ( ) - 1 ) ; i + + ) System . out . print ( ' = ' ) ; 
 System . out . println ( ) ; 
 
 @ @ - 105 , 7 + 106 , 7 @ @ public class Status extends NodeToolCmd 
 System . out . println ( " Status = Up / Down " ) ; 
 System . out . println ( " | / State = Normal / Leaving / Joining / Moving " ) ; 
 
 - printNodesHeader ( hasEffectiveOwns , isTokenPerNode ) ; 
 + printNodesHeader ( hasEffectiveOwns , isTokenPerNode , maxAddressLength ) ; 
 
 ArrayListMultimap < InetAddress , HostStat > hostToTokens = ArrayListMultimap . create ( ) ; 
 for ( HostStat stat : dc . getValue ( ) ) 
 @ @ - 115 , 29 + 116 , 30 @ @ public class Status extends NodeToolCmd 
 { 
 Float owns = ownerships . get ( endpoint ) ; 
 List < HostStat > tokens = hostToTokens . get ( endpoint ) ; 
 - printNode ( endpoint . getHostAddress ( ) , owns , tokens , hasEffectiveOwns , isTokenPerNode ) ; 
 + printNode ( endpoint . getHostAddress ( ) , owns , tokens , hasEffectiveOwns , isTokenPerNode , maxAddressLength ) ; 
 } 
 } 
 
 - System . out . printf ( " % n " + errors . toString ( ) ) ; 
 + System . out . printf ( " % n " + errors ) ; 
 
 } 
 
 - private void findMaxAddressLength ( Map < String , SetHostStat > dcs ) 
 + private int computeMaxAddressLength ( Map < String , SetHostStat > dcs ) 
 { 
 - maxAddressLength = 0 ; 
 - for ( Map . Entry < String , SetHostStat > dc : dcs . entrySet ( ) ) 
 - { 
 - for ( HostStat stat : dc . getValue ( ) ) 
 - { 
 - maxAddressLength = Math . max ( maxAddressLength , stat . ipOrDns ( ) . length ( ) ) ; 
 - } 
 - } 
 + int maxAddressLength = 0 ; 
 + 
 + Set < InetAddress > seenHosts = new HashSet < > ( ) ; 
 + for ( SetHostStat stats : dcs . values ( ) ) 
 + for ( HostStat stat : stats ) 
 + if ( seenHosts . add ( stat . endpoint ) ) 
 + maxAddressLength = Math . max ( maxAddressLength , stat . ipOrDns ( ) . length ( ) ) ; 
 + 
 + return maxAddressLength ; 
 } 
 
 - private void printNodesHeader ( boolean hasEffectiveOwns , boolean isTokenPerNode ) 
 + private void printNodesHeader ( boolean hasEffectiveOwns , boolean isTokenPerNode , int maxAddressLength ) 
 { 
 - String fmt = getFormat ( hasEffectiveOwns , isTokenPerNode ) ; 
 + String fmt = getFormat ( hasEffectiveOwns , isTokenPerNode , maxAddressLength ) ; 
 String owns = hasEffectiveOwns ? " Owns ( effective ) " : " Owns " ; 
 
 if ( isTokenPerNode ) 
 @ @ - 146 , 10 + 148 , 11 @ @ public class Status extends NodeToolCmd 
 System . out . printf ( fmt , " - " , " - " , " Address " , " Load " , " Tokens " , owns , " Host ID " , " Rack " ) ; 
 } 
 
 - private void printNode ( String endpoint , Float owns , List < HostStat > tokens , boolean hasEffectiveOwns , boolean isTokenPerNode ) 
 + private void printNode ( String endpoint , Float owns , List < HostStat > tokens , boolean hasEffectiveOwns , 
 + boolean isTokenPerNode , int maxAddressLength ) 
 { 
 String status , state , load , strOwns , hostID , rack , fmt ; 
 - fmt = getFormat ( hasEffectiveOwns , isTokenPerNode ) ; 
 + fmt = getFormat ( hasEffectiveOwns , isTokenPerNode , maxAddressLength ) ; 
 if ( liveNodes . contains ( endpoint ) ) status = " U " ; 
 else if ( unreachableNodes . contains ( endpoint ) ) status = " D " ; 
 else status = " ? " ; 
 @ @ - 177 , 9 + 180 , 7 @ @ public class Status extends NodeToolCmd 
 System . out . printf ( fmt , status , state , endpointDns , load , tokens . size ( ) , strOwns , hostID , rack ) ; 
 } 
 
 - private String getFormat ( 
 - boolean hasEffectiveOwns , 
 - boolean isTokenPerNode ) 
 + private String getFormat ( boolean hasEffectiveOwns , boolean isTokenPerNode , int maxAddressLength ) 
 { 
 if ( format = = null ) 
 {

NEAREST DIFF:
ELIMINATEDSENTENCE
