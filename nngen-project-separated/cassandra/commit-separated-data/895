BLEU SCORE: 0.007228376004244835

TEST MSG: Add units to stress output
GENERATED MSG: use Strings instead of Endpoints in jmx methods . merge cluster info into ring .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e11ebd8 . . 8ee39dc 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 6 <nl> + * Add units to stress ouput ( CASSANDRA - 11352 ) <nl> * Fix PER PARTITION LIMIT for single and multi partitions queries ( CASSANDRA - 11603 ) <nl> * Add uncompressed chunk cache for RandomAccessReader ( CASSANDRA - 5863 ) <nl> * Clarify ClusteringPrefix hierarchy ( CASSANDRA - 11213 ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index f8c82c3 . . 76178ad 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 588 , 11 + 588 , 16 @ @ public class FBUtilities <nl> <nl> public static String prettyPrintMemory ( long size ) <nl> { <nl> + return prettyPrintMemory ( size , false ) ; <nl> + } <nl> + <nl> + public static String prettyPrintMemory ( long size , boolean includeSpace ) <nl> + { <nl> if ( size > = 1 < < 30 ) <nl> - return String . format ( " % . 3fGiB " , size / ( double ) ( 1 < < 30 ) ) ; <nl> + return String . format ( " % . 3f % sGiB " , size / ( double ) ( 1 < < 30 ) , includeSpace ? " " : " " ) ; <nl> if ( size > = 1 < < 20 ) <nl> - return String . format ( " % . 3fMiB " , size / ( double ) ( 1 < < 20 ) ) ; <nl> - return String . format ( " % . 3fKiB " , size / ( double ) ( 1 < < 10 ) ) ; <nl> + return String . format ( " % . 3f % sMiB " , size / ( double ) ( 1 < < 20 ) , includeSpace ? " " : " " ) ; <nl> + return String . format ( " % . 3f % sKiB " , size / ( double ) ( 1 < < 10 ) , includeSpace ? " " : " " ) ; <nl> } <nl> <nl> public static String prettyPrintMemoryPerSecond ( long rate ) <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java b / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java <nl> index 3585a00 . . fa36716 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . cassandra . stress . util . * ; <nl> import org . apache . commons . lang3 . time . DurationFormatUtils ; <nl> import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> import org . apache . cassandra . stress . settings . StressSettings ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> public class StressMetrics <nl> { <nl> @ @ - 217 , 22 + 218 , 22 @ @ public class StressMetrics <nl> <nl> TimingIntervals opHistory = timing . getHistory ( ) ; <nl> TimingInterval history = opHistory . combine ( settings . samples . historyCount ) ; <nl> - output . println ( String . format ( " op rate : % . 0f % s " , history . opRate ( ) , opHistory . opRates ( ) ) ) ; <nl> - output . println ( String . format ( " partition rate : % . 0f % s " , history . partitionRate ( ) , opHistory . partitionRates ( ) ) ) ; <nl> - output . println ( String . format ( " row rate : % . 0f % s " , history . rowRate ( ) , opHistory . rowRates ( ) ) ) ; <nl> - output . println ( String . format ( " latency mean : % . 1f % s " , history . meanLatency ( ) , opHistory . meanLatencies ( ) ) ) ; <nl> - output . println ( String . format ( " latency median : % . 1f % s " , history . medianLatency ( ) , opHistory . medianLatencies ( ) ) ) ; <nl> - output . println ( String . format ( " latency 95th percentile : % . 1f % s " , history . rankLatency ( . 95f ) , opHistory . rankLatencies ( 0 . 95f ) ) ) ; <nl> - output . println ( String . format ( " latency 99th percentile : % . 1f % s " , history . rankLatency ( 0 . 99f ) , opHistory . rankLatencies ( 0 . 99f ) ) ) ; <nl> - output . println ( String . format ( " latency 99 . 9th percentile : % . 1f % s " , history . rankLatency ( 0 . 999f ) , opHistory . rankLatencies ( 0 . 999f ) ) ) ; <nl> - output . println ( String . format ( " latency max : % . 1f % s " , history . maxLatency ( ) , opHistory . maxLatencies ( ) ) ) ; <nl> - output . println ( String . format ( " Total partitions : % d % s " , history . partitionCount , opHistory . partitionCounts ( ) ) ) ; <nl> - output . println ( String . format ( " Total errors : % d % s " , history . errorCount , opHistory . errorCounts ( ) ) ) ; <nl> - output . println ( String . format ( " total gc count : % . 0f " , totalGcStats . count ) ) ; <nl> - output . println ( String . format ( " total gc mb : % . 0f " , totalGcStats . bytes / ( 1 < < 20 ) ) ) ; <nl> - output . println ( String . format ( " total gc time ( s ) : % . 0f " , totalGcStats . summs / 1000 ) ) ; <nl> - output . println ( String . format ( " avg gc time ( ms ) : % . 0f " , totalGcStats . summs / totalGcStats . count ) ) ; <nl> - output . println ( String . format ( " stdev gc time ( ms ) : % . 0f " , totalGcStats . sdvms ) ) ; <nl> + output . println ( String . format ( " Op rate : % , 8 . 0f op / s % s " , history . opRate ( ) , opHistory . opRates ( ) ) ) ; <nl> + output . println ( String . format ( " Partition rate : % , 8 . 0f pk / s % s " , history . partitionRate ( ) , opHistory . partitionRates ( ) ) ) ; <nl> + output . println ( String . format ( " Row rate : % , 8 . 0f row / s % s " , history . rowRate ( ) , opHistory . rowRates ( ) ) ) ; <nl> + output . println ( String . format ( " Latency mean : % 6 . 1f ms % s " , history . meanLatency ( ) , opHistory . meanLatencies ( ) ) ) ; <nl> + output . println ( String . format ( " Latency median : % 6 . 1f ms % s " , history . medianLatency ( ) , opHistory . medianLatencies ( ) ) ) ; <nl> + output . println ( String . format ( " Latency 95th percentile : % 6 . 1f ms % s " , history . rankLatency ( . 95f ) , opHistory . rankLatencies ( 0 . 95f ) ) ) ; <nl> + output . println ( String . format ( " Latency 99th percentile : % 6 . 1f ms % s " , history . rankLatency ( 0 . 99f ) , opHistory . rankLatencies ( 0 . 99f ) ) ) ; <nl> + output . println ( String . format ( " Latency 99 . 9th percentile : % 6 . 1f ms % s " , history . rankLatency ( 0 . 999f ) , opHistory . rankLatencies ( 0 . 999f ) ) ) ; <nl> + output . println ( String . format ( " Latency max : % 6 . 1f ms % s " , history . maxLatency ( ) , opHistory . maxLatencies ( ) ) ) ; <nl> + output . println ( String . format ( " Total partitions : % , 10d % s " , history . partitionCount , opHistory . partitionCounts ( ) ) ) ; <nl> + output . println ( String . format ( " Total errors : % , 10d % s " , history . errorCount , opHistory . errorCounts ( ) ) ) ; <nl> + output . println ( String . format ( " Total GC count : % , 1 . 0f " , totalGcStats . count ) ) ; <nl> + output . println ( String . format ( " Total GC memory : % s " , FBUtilities . prettyPrintMemory ( ( long ) totalGcStats . bytes , true ) ) ) ; <nl> + output . println ( String . format ( " Total GC time : % , 6 . 1f seconds " , totalGcStats . summs / 1000 ) ) ; <nl> + output . println ( String . format ( " Avg GC time : % , 6 . 1f ms " , totalGcStats . summs / totalGcStats . count ) ) ; <nl> + output . println ( String . format ( " StdDev GC time : % , 6 . 1f ms " , totalGcStats . sdvms ) ) ; <nl> output . println ( " Total operation time : " + DurationFormatUtils . formatDuration ( <nl> history . runTime ( ) , " HH : mm : ss " , true ) ) ; <nl> output . println ( " " ) ; / / Newline is important here to separate the aggregates section from the END or the next stress iteration <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / TimingInterval . java b / tools / stress / src / org / apache / cassandra / stress / util / TimingInterval . java <nl> index 89995dd . . ede235c 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / util / TimingInterval . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / util / TimingInterval . java <nl> @ @ - 186 , 16 + 186 , 16 @ @ public final class TimingInterval <nl> { <nl> switch ( value ) <nl> { <nl> - case OPRATE : return String . format ( " % . 0f " , opRate ( ) ) ; <nl> - case ROWRATE : return String . format ( " % . 0f " , rowRate ( ) ) ; <nl> - case ADJROWRATE : return String . format ( " % . 0f " , adjustedRowRate ( ) ) ; <nl> - case PARTITIONRATE : return String . format ( " % . 0f " , partitionRate ( ) ) ; <nl> - case MEANLATENCY : return String . format ( " % . 1f " , meanLatency ( ) ) ; <nl> - case MAXLATENCY : return String . format ( " % . 1f " , maxLatency ( ) ) ; <nl> - case MEDIANLATENCY : return String . format ( " % . 1f " , medianLatency ( ) ) ; <nl> - case RANKLATENCY : return String . format ( " % . 1f " , rankLatency ( rank ) ) ; <nl> - case ERRORCOUNT : return String . format ( " % d " , errorCount ) ; <nl> - case PARTITIONCOUNT : return String . format ( " % d " , partitionCount ) ; <nl> + case OPRATE : return String . format ( " % , . 0f " , opRate ( ) ) ; <nl> + case ROWRATE : return String . format ( " % , . 0f " , rowRate ( ) ) ; <nl> + case ADJROWRATE : return String . format ( " % , . 0f " , adjustedRowRate ( ) ) ; <nl> + case PARTITIONRATE : return String . format ( " % , . 0f " , partitionRate ( ) ) ; <nl> + case MEANLATENCY : return String . format ( " % , . 1f " , meanLatency ( ) ) ; <nl> + case MAXLATENCY : return String . format ( " % , . 1f " , maxLatency ( ) ) ; <nl> + case MEDIANLATENCY : return String . format ( " % , . 1f " , medianLatency ( ) ) ; <nl> + case RANKLATENCY : return String . format ( " % , . 1f " , rankLatency ( rank ) ) ; <nl> + case ERRORCOUNT : return String . format ( " % , d " , errorCount ) ; <nl> + case PARTITIONCOUNT : return String . format ( " % , d " , partitionCount ) ; <nl> default : throw new IllegalStateException ( ) ; <nl> } <nl> } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / TimingIntervals . java b / tools / stress / src / org / apache / cassandra / stress / util / TimingIntervals . java <nl> index f989173 . . 17680a7 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / util / TimingIntervals . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / util / TimingIntervals . java <nl> @ @ - 48 , 20 + 48 , 25 @ @ public class TimingIntervals <nl> return TimingInterval . merge ( intervals . values ( ) , maxSamples , start ) ; <nl> } <nl> <nl> - public String str ( TimingInterval . TimingParameter value ) <nl> + public String str ( TimingInterval . TimingParameter value , String unit ) <nl> { <nl> - return str ( value , Float . NaN ) ; <nl> + return str ( value , Float . NaN , unit ) ; <nl> } <nl> <nl> - public String str ( TimingInterval . TimingParameter value , float rank ) <nl> + public String str ( TimingInterval . TimingParameter value , float rank , String unit ) <nl> { <nl> StringBuilder sb = new StringBuilder ( " [ " ) ; <nl> <nl> for ( Map . Entry < String , TimingInterval > entry : intervals . entrySet ( ) ) <nl> { <nl> sb . append ( entry . getKey ( ) ) ; <nl> - sb . append ( " : " ) ; <nl> + sb . append ( " : " ) ; <nl> sb . append ( entry . getValue ( ) . getStringValue ( value , rank ) ) ; <nl> + if ( unit . length ( ) > 0 ) <nl> + { <nl> + sb . append ( " " ) ; <nl> + sb . append ( unit ) ; <nl> + } <nl> sb . append ( " , " ) ; <nl> } <nl> <nl> @ @ - 73 , 39 + 78 , 47 @ @ public class TimingIntervals <nl> <nl> public String opRates ( ) <nl> { <nl> - return str ( TimingInterval . TimingParameter . OPRATE ) ; <nl> + return str ( TimingInterval . TimingParameter . OPRATE , " op / s " ) ; <nl> } <nl> + <nl> public String partitionRates ( ) <nl> { <nl> - return str ( TimingInterval . TimingParameter . PARTITIONRATE ) ; <nl> + return str ( TimingInterval . TimingParameter . PARTITIONRATE , " pk / s " ) ; <nl> } <nl> + <nl> public String rowRates ( ) <nl> { <nl> - return str ( TimingInterval . TimingParameter . ROWRATE ) ; <nl> + return str ( TimingInterval . TimingParameter . ROWRATE , " row / s " ) ; <nl> } <nl> + <nl> public String meanLatencies ( ) <nl> { <nl> - return str ( TimingInterval . TimingParameter . MEANLATENCY ) ; <nl> + return str ( TimingInterval . TimingParameter . MEANLATENCY , " ms " ) ; <nl> } <nl> + <nl> public String maxLatencies ( ) <nl> { <nl> - return str ( TimingInterval . TimingParameter . MAXLATENCY ) ; <nl> + return str ( TimingInterval . TimingParameter . MAXLATENCY , " ms " ) ; <nl> } <nl> + <nl> public String medianLatencies ( ) <nl> { <nl> - return str ( TimingInterval . TimingParameter . MEDIANLATENCY ) ; <nl> + return str ( TimingInterval . TimingParameter . MEDIANLATENCY , " ms " ) ; <nl> } <nl> + <nl> public String rankLatencies ( float rank ) <nl> { <nl> - return str ( TimingInterval . TimingParameter . RANKLATENCY , rank ) ; <nl> + return str ( TimingInterval . TimingParameter . RANKLATENCY , rank , " ms " ) ; <nl> } <nl> + <nl> public String errorCounts ( ) <nl> { <nl> - return str ( TimingInterval . TimingParameter . ERRORCOUNT ) ; <nl> + return str ( TimingInterval . TimingParameter . ERRORCOUNT , " " ) ; <nl> } <nl> + <nl> public String partitionCounts ( ) <nl> { <nl> - return str ( TimingInterval . TimingParameter . PARTITIONCOUNT ) ; <nl> + return str ( TimingInterval . TimingParameter . PARTITIONCOUNT , " " ) ; <nl> } <nl> <nl> public long opRate ( )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / dht / Range . java b / src / java / org / apache / cassandra / dht / Range . java <nl> index a7461ad . . 2548e60 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / Range . java <nl> + + + b / src / java / org / apache / cassandra / dht / Range . java <nl> @ @ - 23 , 10 + 23 , 8 @ @ import java . io . DataOutputStream ; <nl> import java . io . IOException ; <nl> import java . io . Serializable ; <nl> import java . util . List ; <nl> - import java . math . BigInteger ; <nl> <nl> import org . apache . cassandra . io . ICompactSerializer ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / net / EndPoint . java b / src / java / org / apache / cassandra / net / EndPoint . java <nl> index 3cb669a . . 11d0351 100644 <nl> - - - a / src / java / org / apache / cassandra / net / EndPoint . java <nl> + + + b / src / java / org / apache / cassandra / net / EndPoint . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ <nl> package org . apache . cassandra . net ; <nl> <nl> <nl> - import java . io . IOException ; <nl> import java . io . Serializable ; <nl> import java . net . * ; <nl> import java . nio . ByteBuffer ; <nl> @ @ - 28 , 7 + 27 , 6 @ @ import java . util . HashMap ; <nl> import java . util . Map ; <nl> <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> - import org . apache . cassandra . utils . LogUtil ; <nl> import org . apache . log4j . Logger ; <nl> <nl> public class EndPoint implements Serializable , Comparable < EndPoint > <nl> @ @ - 47 , 10 + 45 , 10 @ @ public class EndPoint implements Serializable , Comparable < EndPoint > <nl> try <nl> { <nl> sentinelLocalEndPoint _ = new EndPoint ( FBUtilities . getHostAddress ( ) , EndPoint . sentinelPort _ ) ; <nl> - } <nl> - catch ( IOException ex ) <nl> + } <nl> + catch ( UnknownHostException e ) <nl> { <nl> - logger _ . warn ( LogUtil . throwableToString ( ex ) ) ; <nl> + throw new AssertionError ( e ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 54836a2 . . f40efad 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 357 , 13 + 357 , 18 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> consistencyManager _ . submit ( consistencySentinel ) ; <nl> } <nl> <nl> - public Map < Range , List < EndPoint > > getRangeToEndPointMap ( ) <nl> + public Map < Range , List < String > > getRangeToEndPointMap ( ) <nl> { <nl> / * Get the token to endpoint map . * / <nl> Map < Token , EndPoint > tokenToEndPointMap = tokenMetadata _ . cloneTokenEndPointMap ( ) ; <nl> / * All the ranges for the tokens * / <nl> Range [ ] ranges = getAllRanges ( tokenToEndPointMap . keySet ( ) ) ; <nl> - return constructRangeToEndPointMap ( ranges ) ; <nl> + Map < Range , List < String > > map = new HashMap < Range , List < String > > ( ) ; <nl> + for ( Map . Entry < Range , List < EndPoint > > entry : constructRangeToEndPointMap ( ranges ) . entrySet ( ) ) <nl> + { <nl> + map . put ( entry . getKey ( ) , stringify ( entry . getValue ( ) ) ) ; <nl> + } <nl> + return map ; <nl> } <nl> <nl> / * * <nl> @ @ - 626 , 31 + 631 , 39 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> return tokenMetadata _ . getToken ( StorageService . tcpAddr _ ) . toString ( ) ; <nl> } <nl> <nl> - public String getLiveNodes ( ) <nl> + public Set < String > getLiveNodes ( ) <nl> { <nl> return stringify ( Gossiper . instance ( ) . getLiveMembers ( ) ) ; <nl> } <nl> <nl> - public String getUnreachableNodes ( ) <nl> + public Set < String > getUnreachableNodes ( ) <nl> { <nl> return stringify ( Gossiper . instance ( ) . getUnreachableMembers ( ) ) ; <nl> } <nl> - <nl> - public int getCurrentGenerationNumber ( ) <nl> + <nl> + private Set < String > stringify ( Set < EndPoint > endPoints ) <nl> { <nl> - return Gossiper . instance ( ) . getCurrentGenerationNumber ( udpAddr _ ) ; <nl> + Set < String > stringEndPoints = new HashSet < String > ( ) ; <nl> + for ( EndPoint ep : endPoints ) <nl> + { <nl> + stringEndPoints . add ( ep . getHost ( ) ) ; <nl> + } <nl> + return stringEndPoints ; <nl> } <nl> <nl> - / * Helper for the MBean interface * / <nl> - private String stringify ( Set < EndPoint > eps ) <nl> + private List < String > stringify ( List < EndPoint > endPoints ) <nl> { <nl> - StringBuilder sb = new StringBuilder ( " " ) ; <nl> - for ( EndPoint ep : eps ) <nl> + List < String > stringEndPoints = new ArrayList < String > ( ) ; <nl> + for ( EndPoint ep : endPoints ) <nl> { <nl> - sb . append ( ep ) ; <nl> - sb . append ( " " ) ; <nl> + stringEndPoints . add ( ep . getHost ( ) ) ; <nl> } <nl> - return sb . toString ( ) ; <nl> + return stringEndPoints ; <nl> + } <nl> + <nl> + public int getCurrentGenerationNumber ( ) <nl> + { <nl> + return Gossiper . instance ( ) . getCurrentGenerationNumber ( udpAddr _ ) ; <nl> } <nl> <nl> public void bootstrapNodes ( String nodes ) throws UnknownHostException <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index da55ce2 . . e745a1f 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 22 , 6 + 22 , 8 @ @ import java . io . IOException ; <nl> import java . net . UnknownHostException ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . Set ; <nl> + <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . net . EndPoint ; <nl> <nl> @ @ - 30 , 21 + 32 , 19 @ @ public interface StorageServiceMBean <nl> { <nl> / * * <nl> * Retrieve the list of live nodes in the cluster , where " liveness " is <nl> - * determined by the failure detector of the node being queried . The <nl> - * returned string is a space delimited list of host : port end points . <nl> + * determined by the failure detector of the node being queried . <nl> * <nl> - * @ return space delimited list of nodes <nl> + * @ return set of IP addresses , as Strings <nl> * / <nl> - public String getLiveNodes ( ) ; <nl> + public Set < String > getLiveNodes ( ) ; <nl> <nl> / * * <nl> * Retrieve the list of unreachable nodes in the cluster , as determined <nl> - * by this node ' s failure detector . The returned string is a space <nl> - * delimited list of host : port end points . <nl> + * by this node ' s failure detector . <nl> * <nl> - * @ return space delimited list of nodes <nl> + * @ return set of IP addresses , as Strings <nl> * / <nl> - public String getUnreachableNodes ( ) ; <nl> + public Set < String > getUnreachableNodes ( ) ; <nl> <nl> / * * <nl> * Fetch a string representation of the token . <nl> @ @ - 59 , 7 + 59 , 7 @ @ public interface StorageServiceMBean <nl> * <nl> * @ return mapping of ranges to end points <nl> * / <nl> - public Map < Range , List < EndPoint > > getRangeToEndPointMap ( ) ; <nl> + public Map < Range , List < String > > getRangeToEndPointMap ( ) ; <nl> <nl> / * * Human - readable load value * / <nl> public String getLoadString ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index e3a0a2d . . 0078204 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 200 , 25 + 200 , 37 @ @ public class NodeProbe <nl> * / <nl> public void printRing ( PrintStream outs ) <nl> { <nl> - Map < Range , List < EndPoint > > rangeMap = ssProxy . getRangeToEndPointMap ( ) ; <nl> + Map < Range , List < String > > rangeMap = ssProxy . getRangeToEndPointMap ( ) ; <nl> List < Range > ranges = new ArrayList < Range > ( rangeMap . keySet ( ) ) ; <nl> Collections . sort ( ranges ) ; <nl> - <nl> + Set < String > liveNodes = ssProxy . getLiveNodes ( ) ; <nl> + Set < String > deadNodes = ssProxy . getUnreachableNodes ( ) ; <nl> + <nl> / / Print range - to - endpoint mapping <nl> int counter = 0 ; <nl> - outs . print ( String . format ( " % - 46s " , " Starting Token " ) ) ; <nl> - outs . print ( String . format ( " % - 44s " , " Ending Token " ) ) ; <nl> - outs . print ( String . format ( " % - 4s " , " Size " ) ) ; <nl> - outs . print ( String . format ( " % - 15s " , " Address " ) ) ; <nl> + outs . print ( String . format ( " % - 14s " , " Address " ) ) ; <nl> + outs . print ( String . format ( " % - 11s " , " Status " ) ) ; <nl> + outs . print ( String . format ( " % - 43s " , " Range " ) ) ; <nl> outs . println ( " Ring " ) ; <nl> + / / emphasize that we ' re showing the right part of each range <nl> + if ( ranges . size ( ) > 1 ) <nl> + { <nl> + outs . println ( String . format ( " % - 14s % - 11s % - 43s " , " " , " " , ranges . get ( 0 ) . left ( ) ) ) ; <nl> + } <nl> + / / normal range & node info <nl> for ( Range range : ranges ) { <nl> - List < EndPoint > endpoints = rangeMap . get ( range ) ; <nl> - <nl> - outs . print ( String . format ( " % - 46s " , range . left ( ) ) ) ; <nl> - outs . print ( String . format ( " % - 46s " , range . right ( ) ) ) ; <nl> - outs . print ( String . format ( " % 2d " , endpoints . size ( ) ) ) ; <nl> - outs . print ( String . format ( " % - 15s " , endpoints . get ( 0 ) . getHost ( ) ) ) ; <nl> - <nl> + List < String > endpoints = rangeMap . get ( range ) ; <nl> + String primaryEndpoint = endpoints . get ( 0 ) ; <nl> + <nl> + outs . print ( String . format ( " % - 14s " , primaryEndpoint ) ) ; <nl> + String status = liveNodes . contains ( primaryEndpoint ) <nl> + ? " Up " <nl> + : deadNodes . contains ( primaryEndpoint ) <nl> + ? " Down " <nl> + : " ? " ; <nl> + outs . print ( String . format ( " % - 11s " , status ) ) ; <nl> + outs . print ( String . format ( " % - 43s " , range . right ( ) ) ) ; <nl> + <nl> String asciiRingArt ; <nl> if ( counter = = 0 ) <nl> { <nl> @ @ - 231 , 17 + 243 , 11 @ @ public class NodeProbe <nl> else <nl> { <nl> if ( ( rangeMap . size ( ) > 4 ) & & ( ( counter % 2 ) = = 0 ) ) <nl> - { <nl> asciiRingArt = " v | " ; <nl> - } <nl> else if ( ( rangeMap . size ( ) > 4 ) & & ( ( counter % 2 ) ! = 0 ) ) <nl> - { <nl> asciiRingArt = " | ^ " ; <nl> - } <nl> else <nl> - { <nl> asciiRingArt = " | | " ; <nl> - } <nl> } <nl> outs . println ( asciiRingArt ) ; <nl> <nl> @ @ - 333 , 30 + 339 , 6 @ @ public class NodeProbe <nl> } <nl> <nl> / * * <nl> - * Write a list of nodes with corresponding status . <nl> - * <nl> - * @ param outs the stream to write to <nl> - * / <nl> - public void printCluster ( PrintStream outs ) <nl> - { <nl> - for ( String upNode : ssProxy . getLiveNodes ( ) . split ( " \ \ s + " ) ) <nl> - { <nl> - if ( upNode . length ( ) > 0 ) <nl> - { <nl> - outs . println ( String . format ( " % - 21s up " , upNode ) ) ; <nl> - } <nl> - } <nl> - <nl> - for ( String downNode : ssProxy . getUnreachableNodes ( ) . split ( " \ \ s + " ) ) <nl> - { <nl> - if ( downNode . length ( ) > 0 ) <nl> - { <nl> - outs . println ( String . format ( " % - 21s down " , downNode ) ) ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - / * * <nl> * Write node information . <nl> * <nl> * @ param outs the stream to write to <nl> @ @ - 523 , 10 + 505 , 6 @ @ public class NodeProbe <nl> { <nl> probe . printRing ( System . out ) ; <nl> } <nl> - else if ( cmdName . equals ( " cluster " ) ) <nl> - { <nl> - probe . printCluster ( System . out ) ; <nl> - } <nl> else if ( cmdName . equals ( " info " ) ) <nl> { <nl> probe . printInfo ( System . out ) ; <nl> @ @ - 562 , 11 + 540 , 11 @ @ public class NodeProbe <nl> { <nl> probe . bootstrapNodes ( arguments [ 1 ] ) ; <nl> } <nl> - else <nl> + else <nl> { <nl> System . err . println ( cmdName + " needs a node to work with " ) ; <nl> NodeProbe . printUsage ( ) ; <nl> - System . exit ( 1 ) ; <nl> + System . exit ( 1 ) ; <nl> } <nl> } <nl> else if ( cmdName . equals ( " tpstats " ) ) <nl> @ @ - 584 , 7 + 562 , 7 @ @ public class NodeProbe <nl> probe . forceTableFlushBinary ( probe . getArgs ( ) [ 1 ] ) ; <nl> } <nl> else if ( cmdName . equals ( " getcompactionthreshold " ) ) <nl> - { <nl> + { <nl> probe . getCompactionThreshold ( System . out ) ; <nl> } <nl> else if ( cmdName . equals ( " setcompactionthreshold " ) ) <nl> @ @ - 598 , 7 + 576 , 7 @ @ public class NodeProbe <nl> int minthreshold = Integer . parseInt ( arguments [ 1 ] ) ; <nl> int maxthreshold = 0 ; <nl> if ( arguments . length > 2 ) <nl> - { <nl> + { <nl> maxthreshold = Integer . parseInt ( arguments [ 2 ] ) ; <nl> } <nl> probe . setCompactionThreshold ( minthreshold , maxthreshold ) ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / FileUtils . java b / src / java / org / apache / cassandra / utils / FileUtils . java <nl> index 0fb8ab7 . . fe6c649 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FileUtils . java <nl> + + + b / src / java / org / apache / cassandra / utils / FileUtils . java <nl> @ @ - 175 , 7 + 175 , 7 @ @ public class FileUtils <nl> else <nl> { <nl> String val = df _ . format ( value ) ; <nl> - return val + " bytes . " ; <nl> + return val + " bytes " ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e11ebd8 . . 8ee39dc 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 6 
 + * Add units to stress ouput ( CASSANDRA - 11352 ) 
 * Fix PER PARTITION LIMIT for single and multi partitions queries ( CASSANDRA - 11603 ) 
 * Add uncompressed chunk cache for RandomAccessReader ( CASSANDRA - 5863 ) 
 * Clarify ClusteringPrefix hierarchy ( CASSANDRA - 11213 ) 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index f8c82c3 . . 76178ad 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 588 , 11 + 588 , 16 @ @ public class FBUtilities 
 
 public static String prettyPrintMemory ( long size ) 
 { 
 + return prettyPrintMemory ( size , false ) ; 
 + } 
 + 
 + public static String prettyPrintMemory ( long size , boolean includeSpace ) 
 + { 
 if ( size > = 1 < < 30 ) 
 - return String . format ( " % . 3fGiB " , size / ( double ) ( 1 < < 30 ) ) ; 
 + return String . format ( " % . 3f % sGiB " , size / ( double ) ( 1 < < 30 ) , includeSpace ? " " : " " ) ; 
 if ( size > = 1 < < 20 ) 
 - return String . format ( " % . 3fMiB " , size / ( double ) ( 1 < < 20 ) ) ; 
 - return String . format ( " % . 3fKiB " , size / ( double ) ( 1 < < 10 ) ) ; 
 + return String . format ( " % . 3f % sMiB " , size / ( double ) ( 1 < < 20 ) , includeSpace ? " " : " " ) ; 
 + return String . format ( " % . 3f % sKiB " , size / ( double ) ( 1 < < 10 ) , includeSpace ? " " : " " ) ; 
 } 
 
 public static String prettyPrintMemoryPerSecond ( long rate ) 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java b / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java 
 index 3585a00 . . fa36716 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . cassandra . stress . util . * ; 
 import org . apache . commons . lang3 . time . DurationFormatUtils ; 
 import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 import org . apache . cassandra . stress . settings . StressSettings ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 
 public class StressMetrics 
 { 
 @ @ - 217 , 22 + 218 , 22 @ @ public class StressMetrics 
 
 TimingIntervals opHistory = timing . getHistory ( ) ; 
 TimingInterval history = opHistory . combine ( settings . samples . historyCount ) ; 
 - output . println ( String . format ( " op rate : % . 0f % s " , history . opRate ( ) , opHistory . opRates ( ) ) ) ; 
 - output . println ( String . format ( " partition rate : % . 0f % s " , history . partitionRate ( ) , opHistory . partitionRates ( ) ) ) ; 
 - output . println ( String . format ( " row rate : % . 0f % s " , history . rowRate ( ) , opHistory . rowRates ( ) ) ) ; 
 - output . println ( String . format ( " latency mean : % . 1f % s " , history . meanLatency ( ) , opHistory . meanLatencies ( ) ) ) ; 
 - output . println ( String . format ( " latency median : % . 1f % s " , history . medianLatency ( ) , opHistory . medianLatencies ( ) ) ) ; 
 - output . println ( String . format ( " latency 95th percentile : % . 1f % s " , history . rankLatency ( . 95f ) , opHistory . rankLatencies ( 0 . 95f ) ) ) ; 
 - output . println ( String . format ( " latency 99th percentile : % . 1f % s " , history . rankLatency ( 0 . 99f ) , opHistory . rankLatencies ( 0 . 99f ) ) ) ; 
 - output . println ( String . format ( " latency 99 . 9th percentile : % . 1f % s " , history . rankLatency ( 0 . 999f ) , opHistory . rankLatencies ( 0 . 999f ) ) ) ; 
 - output . println ( String . format ( " latency max : % . 1f % s " , history . maxLatency ( ) , opHistory . maxLatencies ( ) ) ) ; 
 - output . println ( String . format ( " Total partitions : % d % s " , history . partitionCount , opHistory . partitionCounts ( ) ) ) ; 
 - output . println ( String . format ( " Total errors : % d % s " , history . errorCount , opHistory . errorCounts ( ) ) ) ; 
 - output . println ( String . format ( " total gc count : % . 0f " , totalGcStats . count ) ) ; 
 - output . println ( String . format ( " total gc mb : % . 0f " , totalGcStats . bytes / ( 1 < < 20 ) ) ) ; 
 - output . println ( String . format ( " total gc time ( s ) : % . 0f " , totalGcStats . summs / 1000 ) ) ; 
 - output . println ( String . format ( " avg gc time ( ms ) : % . 0f " , totalGcStats . summs / totalGcStats . count ) ) ; 
 - output . println ( String . format ( " stdev gc time ( ms ) : % . 0f " , totalGcStats . sdvms ) ) ; 
 + output . println ( String . format ( " Op rate : % , 8 . 0f op / s % s " , history . opRate ( ) , opHistory . opRates ( ) ) ) ; 
 + output . println ( String . format ( " Partition rate : % , 8 . 0f pk / s % s " , history . partitionRate ( ) , opHistory . partitionRates ( ) ) ) ; 
 + output . println ( String . format ( " Row rate : % , 8 . 0f row / s % s " , history . rowRate ( ) , opHistory . rowRates ( ) ) ) ; 
 + output . println ( String . format ( " Latency mean : % 6 . 1f ms % s " , history . meanLatency ( ) , opHistory . meanLatencies ( ) ) ) ; 
 + output . println ( String . format ( " Latency median : % 6 . 1f ms % s " , history . medianLatency ( ) , opHistory . medianLatencies ( ) ) ) ; 
 + output . println ( String . format ( " Latency 95th percentile : % 6 . 1f ms % s " , history . rankLatency ( . 95f ) , opHistory . rankLatencies ( 0 . 95f ) ) ) ; 
 + output . println ( String . format ( " Latency 99th percentile : % 6 . 1f ms % s " , history . rankLatency ( 0 . 99f ) , opHistory . rankLatencies ( 0 . 99f ) ) ) ; 
 + output . println ( String . format ( " Latency 99 . 9th percentile : % 6 . 1f ms % s " , history . rankLatency ( 0 . 999f ) , opHistory . rankLatencies ( 0 . 999f ) ) ) ; 
 + output . println ( String . format ( " Latency max : % 6 . 1f ms % s " , history . maxLatency ( ) , opHistory . maxLatencies ( ) ) ) ; 
 + output . println ( String . format ( " Total partitions : % , 10d % s " , history . partitionCount , opHistory . partitionCounts ( ) ) ) ; 
 + output . println ( String . format ( " Total errors : % , 10d % s " , history . errorCount , opHistory . errorCounts ( ) ) ) ; 
 + output . println ( String . format ( " Total GC count : % , 1 . 0f " , totalGcStats . count ) ) ; 
 + output . println ( String . format ( " Total GC memory : % s " , FBUtilities . prettyPrintMemory ( ( long ) totalGcStats . bytes , true ) ) ) ; 
 + output . println ( String . format ( " Total GC time : % , 6 . 1f seconds " , totalGcStats . summs / 1000 ) ) ; 
 + output . println ( String . format ( " Avg GC time : % , 6 . 1f ms " , totalGcStats . summs / totalGcStats . count ) ) ; 
 + output . println ( String . format ( " StdDev GC time : % , 6 . 1f ms " , totalGcStats . sdvms ) ) ; 
 output . println ( " Total operation time : " + DurationFormatUtils . formatDuration ( 
 history . runTime ( ) , " HH : mm : ss " , true ) ) ; 
 output . println ( " " ) ; / / Newline is important here to separate the aggregates section from the END or the next stress iteration 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / TimingInterval . java b / tools / stress / src / org / apache / cassandra / stress / util / TimingInterval . java 
 index 89995dd . . ede235c 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / util / TimingInterval . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / util / TimingInterval . java 
 @ @ - 186 , 16 + 186 , 16 @ @ public final class TimingInterval 
 { 
 switch ( value ) 
 { 
 - case OPRATE : return String . format ( " % . 0f " , opRate ( ) ) ; 
 - case ROWRATE : return String . format ( " % . 0f " , rowRate ( ) ) ; 
 - case ADJROWRATE : return String . format ( " % . 0f " , adjustedRowRate ( ) ) ; 
 - case PARTITIONRATE : return String . format ( " % . 0f " , partitionRate ( ) ) ; 
 - case MEANLATENCY : return String . format ( " % . 1f " , meanLatency ( ) ) ; 
 - case MAXLATENCY : return String . format ( " % . 1f " , maxLatency ( ) ) ; 
 - case MEDIANLATENCY : return String . format ( " % . 1f " , medianLatency ( ) ) ; 
 - case RANKLATENCY : return String . format ( " % . 1f " , rankLatency ( rank ) ) ; 
 - case ERRORCOUNT : return String . format ( " % d " , errorCount ) ; 
 - case PARTITIONCOUNT : return String . format ( " % d " , partitionCount ) ; 
 + case OPRATE : return String . format ( " % , . 0f " , opRate ( ) ) ; 
 + case ROWRATE : return String . format ( " % , . 0f " , rowRate ( ) ) ; 
 + case ADJROWRATE : return String . format ( " % , . 0f " , adjustedRowRate ( ) ) ; 
 + case PARTITIONRATE : return String . format ( " % , . 0f " , partitionRate ( ) ) ; 
 + case MEANLATENCY : return String . format ( " % , . 1f " , meanLatency ( ) ) ; 
 + case MAXLATENCY : return String . format ( " % , . 1f " , maxLatency ( ) ) ; 
 + case MEDIANLATENCY : return String . format ( " % , . 1f " , medianLatency ( ) ) ; 
 + case RANKLATENCY : return String . format ( " % , . 1f " , rankLatency ( rank ) ) ; 
 + case ERRORCOUNT : return String . format ( " % , d " , errorCount ) ; 
 + case PARTITIONCOUNT : return String . format ( " % , d " , partitionCount ) ; 
 default : throw new IllegalStateException ( ) ; 
 } 
 } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / TimingIntervals . java b / tools / stress / src / org / apache / cassandra / stress / util / TimingIntervals . java 
 index f989173 . . 17680a7 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / util / TimingIntervals . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / util / TimingIntervals . java 
 @ @ - 48 , 20 + 48 , 25 @ @ public class TimingIntervals 
 return TimingInterval . merge ( intervals . values ( ) , maxSamples , start ) ; 
 } 
 
 - public String str ( TimingInterval . TimingParameter value ) 
 + public String str ( TimingInterval . TimingParameter value , String unit ) 
 { 
 - return str ( value , Float . NaN ) ; 
 + return str ( value , Float . NaN , unit ) ; 
 } 
 
 - public String str ( TimingInterval . TimingParameter value , float rank ) 
 + public String str ( TimingInterval . TimingParameter value , float rank , String unit ) 
 { 
 StringBuilder sb = new StringBuilder ( " [ " ) ; 
 
 for ( Map . Entry < String , TimingInterval > entry : intervals . entrySet ( ) ) 
 { 
 sb . append ( entry . getKey ( ) ) ; 
 - sb . append ( " : " ) ; 
 + sb . append ( " : " ) ; 
 sb . append ( entry . getValue ( ) . getStringValue ( value , rank ) ) ; 
 + if ( unit . length ( ) > 0 ) 
 + { 
 + sb . append ( " " ) ; 
 + sb . append ( unit ) ; 
 + } 
 sb . append ( " , " ) ; 
 } 
 
 @ @ - 73 , 39 + 78 , 47 @ @ public class TimingIntervals 
 
 public String opRates ( ) 
 { 
 - return str ( TimingInterval . TimingParameter . OPRATE ) ; 
 + return str ( TimingInterval . TimingParameter . OPRATE , " op / s " ) ; 
 } 
 + 
 public String partitionRates ( ) 
 { 
 - return str ( TimingInterval . TimingParameter . PARTITIONRATE ) ; 
 + return str ( TimingInterval . TimingParameter . PARTITIONRATE , " pk / s " ) ; 
 } 
 + 
 public String rowRates ( ) 
 { 
 - return str ( TimingInterval . TimingParameter . ROWRATE ) ; 
 + return str ( TimingInterval . TimingParameter . ROWRATE , " row / s " ) ; 
 } 
 + 
 public String meanLatencies ( ) 
 { 
 - return str ( TimingInterval . TimingParameter . MEANLATENCY ) ; 
 + return str ( TimingInterval . TimingParameter . MEANLATENCY , " ms " ) ; 
 } 
 + 
 public String maxLatencies ( ) 
 { 
 - return str ( TimingInterval . TimingParameter . MAXLATENCY ) ; 
 + return str ( TimingInterval . TimingParameter . MAXLATENCY , " ms " ) ; 
 } 
 + 
 public String medianLatencies ( ) 
 { 
 - return str ( TimingInterval . TimingParameter . MEDIANLATENCY ) ; 
 + return str ( TimingInterval . TimingParameter . MEDIANLATENCY , " ms " ) ; 
 } 
 + 
 public String rankLatencies ( float rank ) 
 { 
 - return str ( TimingInterval . TimingParameter . RANKLATENCY , rank ) ; 
 + return str ( TimingInterval . TimingParameter . RANKLATENCY , rank , " ms " ) ; 
 } 
 + 
 public String errorCounts ( ) 
 { 
 - return str ( TimingInterval . TimingParameter . ERRORCOUNT ) ; 
 + return str ( TimingInterval . TimingParameter . ERRORCOUNT , " " ) ; 
 } 
 + 
 public String partitionCounts ( ) 
 { 
 - return str ( TimingInterval . TimingParameter . PARTITIONCOUNT ) ; 
 + return str ( TimingInterval . TimingParameter . PARTITIONCOUNT , " " ) ; 
 } 
 
 public long opRate ( )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / dht / Range . java b / src / java / org / apache / cassandra / dht / Range . java 
 index a7461ad . . 2548e60 100644 
 - - - a / src / java / org / apache / cassandra / dht / Range . java 
 + + + b / src / java / org / apache / cassandra / dht / Range . java 
 @ @ - 23 , 10 + 23 , 8 @ @ import java . io . DataOutputStream ; 
 import java . io . IOException ; 
 import java . io . Serializable ; 
 import java . util . List ; 
 - import java . math . BigInteger ; 
 
 import org . apache . cassandra . io . ICompactSerializer ; 
 - import org . apache . cassandra . service . StorageService ; 
 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / net / EndPoint . java b / src / java / org / apache / cassandra / net / EndPoint . java 
 index 3cb669a . . 11d0351 100644 
 - - - a / src / java / org / apache / cassandra / net / EndPoint . java 
 + + + b / src / java / org / apache / cassandra / net / EndPoint . java 
 @ @ - 19 , 7 + 19 , 6 @ @ 
 package org . apache . cassandra . net ; 
 
 
 - import java . io . IOException ; 
 import java . io . Serializable ; 
 import java . net . * ; 
 import java . nio . ByteBuffer ; 
 @ @ - 28 , 7 + 27 , 6 @ @ import java . util . HashMap ; 
 import java . util . Map ; 
 
 import org . apache . cassandra . utils . FBUtilities ; 
 - import org . apache . cassandra . utils . LogUtil ; 
 import org . apache . log4j . Logger ; 
 
 public class EndPoint implements Serializable , Comparable < EndPoint > 
 @ @ - 47 , 10 + 45 , 10 @ @ public class EndPoint implements Serializable , Comparable < EndPoint > 
 try 
 { 
 sentinelLocalEndPoint _ = new EndPoint ( FBUtilities . getHostAddress ( ) , EndPoint . sentinelPort _ ) ; 
 - } 
 - catch ( IOException ex ) 
 + } 
 + catch ( UnknownHostException e ) 
 { 
 - logger _ . warn ( LogUtil . throwableToString ( ex ) ) ; 
 + throw new AssertionError ( e ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 54836a2 . . f40efad 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 357 , 13 + 357 , 18 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 consistencyManager _ . submit ( consistencySentinel ) ; 
 } 
 
 - public Map < Range , List < EndPoint > > getRangeToEndPointMap ( ) 
 + public Map < Range , List < String > > getRangeToEndPointMap ( ) 
 { 
 / * Get the token to endpoint map . * / 
 Map < Token , EndPoint > tokenToEndPointMap = tokenMetadata _ . cloneTokenEndPointMap ( ) ; 
 / * All the ranges for the tokens * / 
 Range [ ] ranges = getAllRanges ( tokenToEndPointMap . keySet ( ) ) ; 
 - return constructRangeToEndPointMap ( ranges ) ; 
 + Map < Range , List < String > > map = new HashMap < Range , List < String > > ( ) ; 
 + for ( Map . Entry < Range , List < EndPoint > > entry : constructRangeToEndPointMap ( ranges ) . entrySet ( ) ) 
 + { 
 + map . put ( entry . getKey ( ) , stringify ( entry . getValue ( ) ) ) ; 
 + } 
 + return map ; 
 } 
 
 / * * 
 @ @ - 626 , 31 + 631 , 39 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 return tokenMetadata _ . getToken ( StorageService . tcpAddr _ ) . toString ( ) ; 
 } 
 
 - public String getLiveNodes ( ) 
 + public Set < String > getLiveNodes ( ) 
 { 
 return stringify ( Gossiper . instance ( ) . getLiveMembers ( ) ) ; 
 } 
 
 - public String getUnreachableNodes ( ) 
 + public Set < String > getUnreachableNodes ( ) 
 { 
 return stringify ( Gossiper . instance ( ) . getUnreachableMembers ( ) ) ; 
 } 
 - 
 - public int getCurrentGenerationNumber ( ) 
 + 
 + private Set < String > stringify ( Set < EndPoint > endPoints ) 
 { 
 - return Gossiper . instance ( ) . getCurrentGenerationNumber ( udpAddr _ ) ; 
 + Set < String > stringEndPoints = new HashSet < String > ( ) ; 
 + for ( EndPoint ep : endPoints ) 
 + { 
 + stringEndPoints . add ( ep . getHost ( ) ) ; 
 + } 
 + return stringEndPoints ; 
 } 
 
 - / * Helper for the MBean interface * / 
 - private String stringify ( Set < EndPoint > eps ) 
 + private List < String > stringify ( List < EndPoint > endPoints ) 
 { 
 - StringBuilder sb = new StringBuilder ( " " ) ; 
 - for ( EndPoint ep : eps ) 
 + List < String > stringEndPoints = new ArrayList < String > ( ) ; 
 + for ( EndPoint ep : endPoints ) 
 { 
 - sb . append ( ep ) ; 
 - sb . append ( " " ) ; 
 + stringEndPoints . add ( ep . getHost ( ) ) ; 
 } 
 - return sb . toString ( ) ; 
 + return stringEndPoints ; 
 + } 
 + 
 + public int getCurrentGenerationNumber ( ) 
 + { 
 + return Gossiper . instance ( ) . getCurrentGenerationNumber ( udpAddr _ ) ; 
 } 
 
 public void bootstrapNodes ( String nodes ) throws UnknownHostException 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index da55ce2 . . e745a1f 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 22 , 6 + 22 , 8 @ @ import java . io . IOException ; 
 import java . net . UnknownHostException ; 
 import java . util . List ; 
 import java . util . Map ; 
 + import java . util . Set ; 
 + 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . net . EndPoint ; 
 
 @ @ - 30 , 21 + 32 , 19 @ @ public interface StorageServiceMBean 
 { 
 / * * 
 * Retrieve the list of live nodes in the cluster , where " liveness " is 
 - * determined by the failure detector of the node being queried . The 
 - * returned string is a space delimited list of host : port end points . 
 + * determined by the failure detector of the node being queried . 
 * 
 - * @ return space delimited list of nodes 
 + * @ return set of IP addresses , as Strings 
 * / 
 - public String getLiveNodes ( ) ; 
 + public Set < String > getLiveNodes ( ) ; 
 
 / * * 
 * Retrieve the list of unreachable nodes in the cluster , as determined 
 - * by this node ' s failure detector . The returned string is a space 
 - * delimited list of host : port end points . 
 + * by this node ' s failure detector . 
 * 
 - * @ return space delimited list of nodes 
 + * @ return set of IP addresses , as Strings 
 * / 
 - public String getUnreachableNodes ( ) ; 
 + public Set < String > getUnreachableNodes ( ) ; 
 
 / * * 
 * Fetch a string representation of the token . 
 @ @ - 59 , 7 + 59 , 7 @ @ public interface StorageServiceMBean 
 * 
 * @ return mapping of ranges to end points 
 * / 
 - public Map < Range , List < EndPoint > > getRangeToEndPointMap ( ) ; 
 + public Map < Range , List < String > > getRangeToEndPointMap ( ) ; 
 
 / * * Human - readable load value * / 
 public String getLoadString ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index e3a0a2d . . 0078204 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 200 , 25 + 200 , 37 @ @ public class NodeProbe 
 * / 
 public void printRing ( PrintStream outs ) 
 { 
 - Map < Range , List < EndPoint > > rangeMap = ssProxy . getRangeToEndPointMap ( ) ; 
 + Map < Range , List < String > > rangeMap = ssProxy . getRangeToEndPointMap ( ) ; 
 List < Range > ranges = new ArrayList < Range > ( rangeMap . keySet ( ) ) ; 
 Collections . sort ( ranges ) ; 
 - 
 + Set < String > liveNodes = ssProxy . getLiveNodes ( ) ; 
 + Set < String > deadNodes = ssProxy . getUnreachableNodes ( ) ; 
 + 
 / / Print range - to - endpoint mapping 
 int counter = 0 ; 
 - outs . print ( String . format ( " % - 46s " , " Starting Token " ) ) ; 
 - outs . print ( String . format ( " % - 44s " , " Ending Token " ) ) ; 
 - outs . print ( String . format ( " % - 4s " , " Size " ) ) ; 
 - outs . print ( String . format ( " % - 15s " , " Address " ) ) ; 
 + outs . print ( String . format ( " % - 14s " , " Address " ) ) ; 
 + outs . print ( String . format ( " % - 11s " , " Status " ) ) ; 
 + outs . print ( String . format ( " % - 43s " , " Range " ) ) ; 
 outs . println ( " Ring " ) ; 
 + / / emphasize that we ' re showing the right part of each range 
 + if ( ranges . size ( ) > 1 ) 
 + { 
 + outs . println ( String . format ( " % - 14s % - 11s % - 43s " , " " , " " , ranges . get ( 0 ) . left ( ) ) ) ; 
 + } 
 + / / normal range & node info 
 for ( Range range : ranges ) { 
 - List < EndPoint > endpoints = rangeMap . get ( range ) ; 
 - 
 - outs . print ( String . format ( " % - 46s " , range . left ( ) ) ) ; 
 - outs . print ( String . format ( " % - 46s " , range . right ( ) ) ) ; 
 - outs . print ( String . format ( " % 2d " , endpoints . size ( ) ) ) ; 
 - outs . print ( String . format ( " % - 15s " , endpoints . get ( 0 ) . getHost ( ) ) ) ; 
 - 
 + List < String > endpoints = rangeMap . get ( range ) ; 
 + String primaryEndpoint = endpoints . get ( 0 ) ; 
 + 
 + outs . print ( String . format ( " % - 14s " , primaryEndpoint ) ) ; 
 + String status = liveNodes . contains ( primaryEndpoint ) 
 + ? " Up " 
 + : deadNodes . contains ( primaryEndpoint ) 
 + ? " Down " 
 + : " ? " ; 
 + outs . print ( String . format ( " % - 11s " , status ) ) ; 
 + outs . print ( String . format ( " % - 43s " , range . right ( ) ) ) ; 
 + 
 String asciiRingArt ; 
 if ( counter = = 0 ) 
 { 
 @ @ - 231 , 17 + 243 , 11 @ @ public class NodeProbe 
 else 
 { 
 if ( ( rangeMap . size ( ) > 4 ) & & ( ( counter % 2 ) = = 0 ) ) 
 - { 
 asciiRingArt = " v | " ; 
 - } 
 else if ( ( rangeMap . size ( ) > 4 ) & & ( ( counter % 2 ) ! = 0 ) ) 
 - { 
 asciiRingArt = " | ^ " ; 
 - } 
 else 
 - { 
 asciiRingArt = " | | " ; 
 - } 
 } 
 outs . println ( asciiRingArt ) ; 
 
 @ @ - 333 , 30 + 339 , 6 @ @ public class NodeProbe 
 } 
 
 / * * 
 - * Write a list of nodes with corresponding status . 
 - * 
 - * @ param outs the stream to write to 
 - * / 
 - public void printCluster ( PrintStream outs ) 
 - { 
 - for ( String upNode : ssProxy . getLiveNodes ( ) . split ( " \ \ s + " ) ) 
 - { 
 - if ( upNode . length ( ) > 0 ) 
 - { 
 - outs . println ( String . format ( " % - 21s up " , upNode ) ) ; 
 - } 
 - } 
 - 
 - for ( String downNode : ssProxy . getUnreachableNodes ( ) . split ( " \ \ s + " ) ) 
 - { 
 - if ( downNode . length ( ) > 0 ) 
 - { 
 - outs . println ( String . format ( " % - 21s down " , downNode ) ) ; 
 - } 
 - } 
 - } 
 - 
 - / * * 
 * Write node information . 
 * 
 * @ param outs the stream to write to 
 @ @ - 523 , 10 + 505 , 6 @ @ public class NodeProbe 
 { 
 probe . printRing ( System . out ) ; 
 } 
 - else if ( cmdName . equals ( " cluster " ) ) 
 - { 
 - probe . printCluster ( System . out ) ; 
 - } 
 else if ( cmdName . equals ( " info " ) ) 
 { 
 probe . printInfo ( System . out ) ; 
 @ @ - 562 , 11 + 540 , 11 @ @ public class NodeProbe 
 { 
 probe . bootstrapNodes ( arguments [ 1 ] ) ; 
 } 
 - else 
 + else 
 { 
 System . err . println ( cmdName + " needs a node to work with " ) ; 
 NodeProbe . printUsage ( ) ; 
 - System . exit ( 1 ) ; 
 + System . exit ( 1 ) ; 
 } 
 } 
 else if ( cmdName . equals ( " tpstats " ) ) 
 @ @ - 584 , 7 + 562 , 7 @ @ public class NodeProbe 
 probe . forceTableFlushBinary ( probe . getArgs ( ) [ 1 ] ) ; 
 } 
 else if ( cmdName . equals ( " getcompactionthreshold " ) ) 
 - { 
 + { 
 probe . getCompactionThreshold ( System . out ) ; 
 } 
 else if ( cmdName . equals ( " setcompactionthreshold " ) ) 
 @ @ - 598 , 7 + 576 , 7 @ @ public class NodeProbe 
 int minthreshold = Integer . parseInt ( arguments [ 1 ] ) ; 
 int maxthreshold = 0 ; 
 if ( arguments . length > 2 ) 
 - { 
 + { 
 maxthreshold = Integer . parseInt ( arguments [ 2 ] ) ; 
 } 
 probe . setCompactionThreshold ( minthreshold , maxthreshold ) ; 
 diff - - git a / src / java / org / apache / cassandra / utils / FileUtils . java b / src / java / org / apache / cassandra / utils / FileUtils . java 
 index 0fb8ab7 . . fe6c649 100644 
 - - - a / src / java / org / apache / cassandra / utils / FileUtils . java 
 + + + b / src / java / org / apache / cassandra / utils / FileUtils . java 
 @ @ - 175 , 7 + 175 , 7 @ @ public class FileUtils 
 else 
 { 
 String val = df _ . format ( value ) ; 
 - return val + " bytes . " ; 
 + return val + " bytes " ; 
 } 
 } 

