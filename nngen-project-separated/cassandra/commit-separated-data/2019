BLEU SCORE: 0.1270331870386537

TEST MSG: Add ' nodetool statusgossip '
GENERATED MSG: Add reloadtriggers command to nodetool

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0ec3ff1 . . 97fb94a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 12 : <nl> + * Add ' nodetool statusgossip ' ( CASSANDRA - 8125 ) <nl> * Improve client notification that nodes are ready for requests ( CASSANDRA - 7510 ) <nl> * Handle negative timestamp in writetime method ( CASSANDRA - 8139 ) <nl> * Pig : Remove errant LIMIT clause in CqlNativeStorage ( CASSANDRA - 8166 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 1f831b9 . . 066544a 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 293 , 6 + 293 , 12 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> } <nl> <nl> + / / should only be called via JMX <nl> + public boolean isGossipRunning ( ) <nl> + { <nl> + return Gossiper . instance . isEnabled ( ) ; <nl> + } <nl> + <nl> / / should only be called via JMX <nl> public void startRPCServer ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index 6308aa5 . . 0e2f55d 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 392 , 6 + 392 , 9 @ @ public interface StorageServiceMBean extends NotificationEmitter <nl> / / allows a user to recover a forcibly ' killed ' node <nl> public void startGossiping ( ) ; <nl> <nl> + / / allows a user to see whether gossip is running or not <nl> + public boolean isGossipRunning ( ) ; <nl> + <nl> / / allows a user to forcibly completely stop cassandra <nl> public void stopDaemon ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index d9f3607 . . a397244 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import java . text . SimpleDateFormat ; <nl> import java . util . * ; <nl> import java . util . Map . Entry ; <nl> import java . util . concurrent . ExecutionException ; <nl> + <nl> import javax . management . openmbean . TabularData ; <nl> <nl> import com . google . common . base . Joiner ; <nl> @ @ - 171 , 6 + 172 , 7 @ @ public class NodeCmd <nl> SNAPSHOT , <nl> STATUS , <nl> STATUSBINARY , <nl> + STATUSGOSSIP , <nl> STATUSTHRIFT , <nl> STOP , <nl> STOPDAEMON , <nl> @ @ - 1246 , 6 + 1248 , 7 @ @ public class NodeCmd <nl> case STATUSBINARY : nodeCmd . printIsNativeTransportRunning ( System . out ) ; break ; <nl> case DISABLEGOSSIP : probe . stopGossiping ( ) ; break ; <nl> case ENABLEGOSSIP : probe . startGossiping ( ) ; break ; <nl> + case STATUSGOSSIP : nodeCmd . printIsGossipRunning ( System . out ) ; break ; <nl> case DISABLEHANDOFF : probe . disableHintedHandoff ( ) ; break ; <nl> case ENABLEHANDOFF : <nl> if ( arguments . length > 0 ) { probe . enableHintedHandoff ( arguments [ 0 ] ) ; } <nl> @ @ - 1494 , 6 + 1497 , 11 @ @ public class NodeCmd <nl> System . exit ( probe . isFailed ( ) ? 1 : 0 ) ; <nl> } <nl> <nl> + private void printIsGossipRunning ( PrintStream outs ) <nl> + { <nl> + outs . println ( probe . isGossipRunning ( ) ? " running " : " not running " ) ; <nl> + } <nl> + <nl> private void getLoggingLevels ( PrintStream out ) <nl> { <nl> / / what if some one set a very long logger name ? 50 space may not be enough . . . <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 78dce76 . . 849e368 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 782 , 6 + 782 , 11 @ @ public class NodeProbe <nl> ssProxy . startGossiping ( ) ; <nl> } <nl> <nl> + public boolean isGossipRunning ( ) <nl> + { <nl> + return ssProxy . isGossipRunning ( ) ; <nl> + } <nl> + <nl> public void stopThriftServer ( ) <nl> { <nl> ssProxy . stopRPCServer ( ) ; <nl> diff - - git a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml <nl> index fa2b39c . . 523335e 100644 <nl> - - - a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml <nl> + + + b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml <nl> @ @ - 100 , 6 + 100 , 9 @ @ commands : <nl> - name : gossipinfo <nl> help : | <nl> Shows the gossip information for the cluster <nl> + - name : statusgossip <nl> + help : | <nl> + Status of gossip <nl> - name : invalidatekeycache <nl> help : | <nl> Invalidate the key cache
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 70bb919 . . 117a200 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> 1 . 2 . 12 <nl> * ( Hadoop ) Require CFRR batchSize to be at least 2 ( CASSANDRA - 6114 ) <nl> + * Fix altering column types ( CASSANDRA - 6185 ) <nl> <nl> <nl> 1 . 2 . 11 <nl> diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> index db5f7ed . . 807f008 100644 <nl> - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> @ @ - 180 , 8 + 180 , 9 @ @ public class ColumnDefinition <nl> if ( getIndexType ( ) ! = null & & def . getIndexType ( ) ! = null ) <nl> { <nl> / / If an index is set ( and not drop by this update ) , the validator shouldn ' t be change to a non - compatible one <nl> + / / ( and we want true comparator compatibility , not just value one , since the validator is used by LocalPartitioner to order index rows ) <nl> if ( ! def . getValidator ( ) . isCompatibleWith ( getValidator ( ) ) ) <nl> - throw new ConfigurationException ( String . format ( " Cannot modify validator to a non - compatible one for column % s since an index is set " , comparator . getString ( name ) ) ) ; <nl> + throw new ConfigurationException ( String . format ( " Cannot modify validator to a non - order - compatible one for column % s since an index is set " , comparator . getString ( name ) ) ) ; <nl> <nl> assert getIndexName ( ) ! = null ; <nl> if ( ! getIndexName ( ) . equals ( def . getIndexName ( ) ) ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> index a247a4d . . 36ec56d 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> @ @ - 134 , 24 + 134 , 45 @ @ public class AlterTableStatement extends SchemaAlteringStatement <nl> throw new InvalidRequestException ( String . format ( " counter type is not supported for PRIMARY KEY part % s " , columnName ) ) ; <nl> if ( cfDef . hasCompositeKey ) <nl> { <nl> - List < AbstractType < ? > > newTypes = new ArrayList < AbstractType < ? > > ( ( ( CompositeType ) cfm . getKeyValidator ( ) ) . types ) ; <nl> + List < AbstractType < ? > > oldTypes = ( ( CompositeType ) cfm . getKeyValidator ( ) ) . types ; <nl> + if ( ! newType . isValueCompatibleWith ( oldTypes . get ( name . position ) ) ) <nl> + throw new ConfigurationException ( String . format ( " Cannot change % s from type % s to type % s : types are incompatible . " , <nl> + columnName , <nl> + oldTypes . get ( name . position ) . asCQL3Type ( ) , <nl> + validator ) ) ; <nl> + <nl> + List < AbstractType < ? > > newTypes = new ArrayList < AbstractType < ? > > ( oldTypes ) ; <nl> newTypes . set ( name . position , newType ) ; <nl> cfm . keyValidator ( CompositeType . getInstance ( newTypes ) ) ; <nl> } <nl> else <nl> { <nl> + if ( ! newType . isValueCompatibleWith ( cfm . getKeyValidator ( ) ) ) <nl> + throw new ConfigurationException ( String . format ( " Cannot change % s from type % s to type % s : types are incompatible . " , <nl> + columnName , <nl> + cfm . getKeyValidator ( ) . asCQL3Type ( ) , <nl> + validator ) ) ; <nl> cfm . keyValidator ( newType ) ; <nl> } <nl> break ; <nl> case COLUMN _ ALIAS : <nl> assert cfDef . isComposite ; <nl> - List < AbstractType < ? > > newTypes = new ArrayList < AbstractType < ? > > ( ( ( CompositeType ) cfm . comparator ) . types ) ; <nl> + List < AbstractType < ? > > oldTypes = ( ( CompositeType ) cfm . comparator ) . types ; <nl> + / / Note that CFMetaData . validateCompatibility already validate the change we ' re about to do . However , the error message it <nl> + / / sends is a bit cryptic for a CQL3 user , so validating here for a sake of returning a better error message <nl> + / / Do note that we need isCompatibleWith here , not just isValueCompatibleWith . <nl> + if ( ! validator . getType ( ) . isCompatibleWith ( oldTypes . get ( name . position ) ) ) <nl> + throw new ConfigurationException ( String . format ( " Cannot change % s from type % s to type % s : types are not order - compatible . " , <nl> + columnName , <nl> + oldTypes . get ( name . position ) . asCQL3Type ( ) , <nl> + validator ) ) ; <nl> + List < AbstractType < ? > > newTypes = new ArrayList < AbstractType < ? > > ( oldTypes ) ; <nl> newTypes . set ( name . position , validator . getType ( ) ) ; <nl> cfm . comparator = CompositeType . getInstance ( newTypes ) ; <nl> break ; <nl> case VALUE _ ALIAS : <nl> / / See below <nl> - if ( ! validator . getType ( ) . isCompatibleWith ( cfm . getDefaultValidator ( ) ) ) <nl> + if ( ! validator . getType ( ) . isValueCompatibleWith ( cfm . getDefaultValidator ( ) ) ) <nl> throw new ConfigurationException ( String . format ( " Cannot change % s from type % s to type % s : types are incompatible . " , <nl> columnName , <nl> cfm . getDefaultValidator ( ) . asCQL3Type ( ) , <nl> @ @ - 160 , 10 + 181 , 12 @ @ public class AlterTableStatement extends SchemaAlteringStatement <nl> break ; <nl> case COLUMN _ METADATA : <nl> ColumnDefinition column = cfm . getColumnDefinition ( columnName . key ) ; <nl> - / / Thrift allows to change a column validator so CFMetaData . validateCompatility will let it slide <nl> + / / Thrift allows to change a column validator so CFMetaData . validateCompatibility will let it slide <nl> / / if we change to an incompatible type ( contrarily to the comparator case ) . But we don ' t want to <nl> - / / allow it for CQL3 ( see # 5882 ) so validating it explicitly here <nl> - if ( ! validator . getType ( ) . isCompatibleWith ( column . getValidator ( ) ) ) <nl> + / / allow it for CQL3 ( see # 5882 ) so validating it explicitly here . We only care about value compatibility <nl> + / / though since we won ' t compare values ( except when there is an index , but that is validated by <nl> + / / ColumnDefinition already ) . <nl> + if ( ! validator . getType ( ) . isValueCompatibleWith ( column . getValidator ( ) ) ) <nl> throw new ConfigurationException ( String . format ( " Cannot change % s from type % s to type % s : types are incompatible . " , <nl> columnName , <nl> column . getValidator ( ) . asCQL3Type ( ) , <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractType . java b / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> index cbba89c . . 140ea7f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> @ @ - 213 , 7 + 213 , 19 @ @ public abstract class AbstractType < T > implements Comparator < ByteBuffer > <nl> * / <nl> public boolean isCompatibleWith ( AbstractType < ? > previous ) <nl> { <nl> - return this = = previous ; <nl> + return this . equals ( previous ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns true if values of the previous AbstracType can be read by the this <nl> + * AbsractType . Note that this is a weaker version of isCompatibleWith , as it <nl> + * does not require that both type compare values the same way . <nl> + * <nl> + * Note that a type should be compatible with at least itself . <nl> + * / <nl> + public boolean isValueCompatibleWith ( AbstractType < ? > previous ) <nl> + { <nl> + return isCompatibleWith ( previous ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / BytesType . java b / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> index 1bb2bd2 . . a9fee0a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> @ @ - 83 , 6 + 83 , 13 @ @ public class BytesType extends AbstractType < ByteBuffer > <nl> return this = = previous | | previous = = AsciiType . instance | | previous = = UTF8Type . instance ; <nl> } <nl> <nl> + @ Override <nl> + public boolean isValueCompatibleWith ( AbstractType < ? > previous ) <nl> + { <nl> + / / BytesType can read anything <nl> + return true ; <nl> + } <nl> + <nl> public CQL3Type asCQL3Type ( ) <nl> { <nl> return CQL3Type . Native . BLOB ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / CompositeType . java b / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> index 2a27617 . . 8cb1e34 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> @ @ - 172 , 6 + 172 , 30 @ @ public class CompositeType extends AbstractCompositeType <nl> return true ; <nl> } <nl> <nl> + @ Override <nl> + public boolean isValueCompatibleWith ( AbstractType < ? > previous ) <nl> + { <nl> + if ( this = = previous ) <nl> + return true ; <nl> + <nl> + if ( ! ( previous instanceof CompositeType ) ) <nl> + return false ; <nl> + <nl> + / / Extending with new components is fine <nl> + CompositeType cp = ( CompositeType ) previous ; <nl> + if ( types . size ( ) < cp . types . size ( ) ) <nl> + return false ; <nl> + <nl> + for ( int i = 0 ; i < cp . types . size ( ) ; i + + ) <nl> + { <nl> + AbstractType tprev = cp . types . get ( i ) ; <nl> + AbstractType tnew = types . get ( i ) ; <nl> + if ( ! tnew . isValueCompatibleWith ( tprev ) ) <nl> + return false ; <nl> + } <nl> + return true ; <nl> + } <nl> + <nl> private static class StaticParsedComparator implements ParsedComparator <nl> { <nl> final AbstractType < ? > type ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0ec3ff1 . . 97fb94a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 12 : 
 + * Add ' nodetool statusgossip ' ( CASSANDRA - 8125 ) 
 * Improve client notification that nodes are ready for requests ( CASSANDRA - 7510 ) 
 * Handle negative timestamp in writetime method ( CASSANDRA - 8139 ) 
 * Pig : Remove errant LIMIT clause in CqlNativeStorage ( CASSANDRA - 8166 ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 1f831b9 . . 066544a 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 293 , 6 + 293 , 12 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 } 
 
 + / / should only be called via JMX 
 + public boolean isGossipRunning ( ) 
 + { 
 + return Gossiper . instance . isEnabled ( ) ; 
 + } 
 + 
 / / should only be called via JMX 
 public void startRPCServer ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index 6308aa5 . . 0e2f55d 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 392 , 6 + 392 , 9 @ @ public interface StorageServiceMBean extends NotificationEmitter 
 / / allows a user to recover a forcibly ' killed ' node 
 public void startGossiping ( ) ; 
 
 + / / allows a user to see whether gossip is running or not 
 + public boolean isGossipRunning ( ) ; 
 + 
 / / allows a user to forcibly completely stop cassandra 
 public void stopDaemon ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index d9f3607 . . a397244 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import java . text . SimpleDateFormat ; 
 import java . util . * ; 
 import java . util . Map . Entry ; 
 import java . util . concurrent . ExecutionException ; 
 + 
 import javax . management . openmbean . TabularData ; 
 
 import com . google . common . base . Joiner ; 
 @ @ - 171 , 6 + 172 , 7 @ @ public class NodeCmd 
 SNAPSHOT , 
 STATUS , 
 STATUSBINARY , 
 + STATUSGOSSIP , 
 STATUSTHRIFT , 
 STOP , 
 STOPDAEMON , 
 @ @ - 1246 , 6 + 1248 , 7 @ @ public class NodeCmd 
 case STATUSBINARY : nodeCmd . printIsNativeTransportRunning ( System . out ) ; break ; 
 case DISABLEGOSSIP : probe . stopGossiping ( ) ; break ; 
 case ENABLEGOSSIP : probe . startGossiping ( ) ; break ; 
 + case STATUSGOSSIP : nodeCmd . printIsGossipRunning ( System . out ) ; break ; 
 case DISABLEHANDOFF : probe . disableHintedHandoff ( ) ; break ; 
 case ENABLEHANDOFF : 
 if ( arguments . length > 0 ) { probe . enableHintedHandoff ( arguments [ 0 ] ) ; } 
 @ @ - 1494 , 6 + 1497 , 11 @ @ public class NodeCmd 
 System . exit ( probe . isFailed ( ) ? 1 : 0 ) ; 
 } 
 
 + private void printIsGossipRunning ( PrintStream outs ) 
 + { 
 + outs . println ( probe . isGossipRunning ( ) ? " running " : " not running " ) ; 
 + } 
 + 
 private void getLoggingLevels ( PrintStream out ) 
 { 
 / / what if some one set a very long logger name ? 50 space may not be enough . . . 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 78dce76 . . 849e368 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 782 , 6 + 782 , 11 @ @ public class NodeProbe 
 ssProxy . startGossiping ( ) ; 
 } 
 
 + public boolean isGossipRunning ( ) 
 + { 
 + return ssProxy . isGossipRunning ( ) ; 
 + } 
 + 
 public void stopThriftServer ( ) 
 { 
 ssProxy . stopRPCServer ( ) ; 
 diff - - git a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml 
 index fa2b39c . . 523335e 100644 
 - - - a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml 
 + + + b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml 
 @ @ - 100 , 6 + 100 , 9 @ @ commands : 
 - name : gossipinfo 
 help : | 
 Shows the gossip information for the cluster 
 + - name : statusgossip 
 + help : | 
 + Status of gossip 
 - name : invalidatekeycache 
 help : | 
 Invalidate the key cache

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 70bb919 . . 117a200 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 1 . 2 . 12 
 * ( Hadoop ) Require CFRR batchSize to be at least 2 ( CASSANDRA - 6114 ) 
 + * Fix altering column types ( CASSANDRA - 6185 ) 
 
 
 1 . 2 . 11 
 diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 index db5f7ed . . 807f008 100644 
 - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 @ @ - 180 , 8 + 180 , 9 @ @ public class ColumnDefinition 
 if ( getIndexType ( ) ! = null & & def . getIndexType ( ) ! = null ) 
 { 
 / / If an index is set ( and not drop by this update ) , the validator shouldn ' t be change to a non - compatible one 
 + / / ( and we want true comparator compatibility , not just value one , since the validator is used by LocalPartitioner to order index rows ) 
 if ( ! def . getValidator ( ) . isCompatibleWith ( getValidator ( ) ) ) 
 - throw new ConfigurationException ( String . format ( " Cannot modify validator to a non - compatible one for column % s since an index is set " , comparator . getString ( name ) ) ) ; 
 + throw new ConfigurationException ( String . format ( " Cannot modify validator to a non - order - compatible one for column % s since an index is set " , comparator . getString ( name ) ) ) ; 
 
 assert getIndexName ( ) ! = null ; 
 if ( ! getIndexName ( ) . equals ( def . getIndexName ( ) ) ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 index a247a4d . . 36ec56d 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 @ @ - 134 , 24 + 134 , 45 @ @ public class AlterTableStatement extends SchemaAlteringStatement 
 throw new InvalidRequestException ( String . format ( " counter type is not supported for PRIMARY KEY part % s " , columnName ) ) ; 
 if ( cfDef . hasCompositeKey ) 
 { 
 - List < AbstractType < ? > > newTypes = new ArrayList < AbstractType < ? > > ( ( ( CompositeType ) cfm . getKeyValidator ( ) ) . types ) ; 
 + List < AbstractType < ? > > oldTypes = ( ( CompositeType ) cfm . getKeyValidator ( ) ) . types ; 
 + if ( ! newType . isValueCompatibleWith ( oldTypes . get ( name . position ) ) ) 
 + throw new ConfigurationException ( String . format ( " Cannot change % s from type % s to type % s : types are incompatible . " , 
 + columnName , 
 + oldTypes . get ( name . position ) . asCQL3Type ( ) , 
 + validator ) ) ; 
 + 
 + List < AbstractType < ? > > newTypes = new ArrayList < AbstractType < ? > > ( oldTypes ) ; 
 newTypes . set ( name . position , newType ) ; 
 cfm . keyValidator ( CompositeType . getInstance ( newTypes ) ) ; 
 } 
 else 
 { 
 + if ( ! newType . isValueCompatibleWith ( cfm . getKeyValidator ( ) ) ) 
 + throw new ConfigurationException ( String . format ( " Cannot change % s from type % s to type % s : types are incompatible . " , 
 + columnName , 
 + cfm . getKeyValidator ( ) . asCQL3Type ( ) , 
 + validator ) ) ; 
 cfm . keyValidator ( newType ) ; 
 } 
 break ; 
 case COLUMN _ ALIAS : 
 assert cfDef . isComposite ; 
 - List < AbstractType < ? > > newTypes = new ArrayList < AbstractType < ? > > ( ( ( CompositeType ) cfm . comparator ) . types ) ; 
 + List < AbstractType < ? > > oldTypes = ( ( CompositeType ) cfm . comparator ) . types ; 
 + / / Note that CFMetaData . validateCompatibility already validate the change we ' re about to do . However , the error message it 
 + / / sends is a bit cryptic for a CQL3 user , so validating here for a sake of returning a better error message 
 + / / Do note that we need isCompatibleWith here , not just isValueCompatibleWith . 
 + if ( ! validator . getType ( ) . isCompatibleWith ( oldTypes . get ( name . position ) ) ) 
 + throw new ConfigurationException ( String . format ( " Cannot change % s from type % s to type % s : types are not order - compatible . " , 
 + columnName , 
 + oldTypes . get ( name . position ) . asCQL3Type ( ) , 
 + validator ) ) ; 
 + List < AbstractType < ? > > newTypes = new ArrayList < AbstractType < ? > > ( oldTypes ) ; 
 newTypes . set ( name . position , validator . getType ( ) ) ; 
 cfm . comparator = CompositeType . getInstance ( newTypes ) ; 
 break ; 
 case VALUE _ ALIAS : 
 / / See below 
 - if ( ! validator . getType ( ) . isCompatibleWith ( cfm . getDefaultValidator ( ) ) ) 
 + if ( ! validator . getType ( ) . isValueCompatibleWith ( cfm . getDefaultValidator ( ) ) ) 
 throw new ConfigurationException ( String . format ( " Cannot change % s from type % s to type % s : types are incompatible . " , 
 columnName , 
 cfm . getDefaultValidator ( ) . asCQL3Type ( ) , 
 @ @ - 160 , 10 + 181 , 12 @ @ public class AlterTableStatement extends SchemaAlteringStatement 
 break ; 
 case COLUMN _ METADATA : 
 ColumnDefinition column = cfm . getColumnDefinition ( columnName . key ) ; 
 - / / Thrift allows to change a column validator so CFMetaData . validateCompatility will let it slide 
 + / / Thrift allows to change a column validator so CFMetaData . validateCompatibility will let it slide 
 / / if we change to an incompatible type ( contrarily to the comparator case ) . But we don ' t want to 
 - / / allow it for CQL3 ( see # 5882 ) so validating it explicitly here 
 - if ( ! validator . getType ( ) . isCompatibleWith ( column . getValidator ( ) ) ) 
 + / / allow it for CQL3 ( see # 5882 ) so validating it explicitly here . We only care about value compatibility 
 + / / though since we won ' t compare values ( except when there is an index , but that is validated by 
 + / / ColumnDefinition already ) . 
 + if ( ! validator . getType ( ) . isValueCompatibleWith ( column . getValidator ( ) ) ) 
 throw new ConfigurationException ( String . format ( " Cannot change % s from type % s to type % s : types are incompatible . " , 
 columnName , 
 column . getValidator ( ) . asCQL3Type ( ) , 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractType . java b / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 index cbba89c . . 140ea7f 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 @ @ - 213 , 7 + 213 , 19 @ @ public abstract class AbstractType < T > implements Comparator < ByteBuffer > 
 * / 
 public boolean isCompatibleWith ( AbstractType < ? > previous ) 
 { 
 - return this = = previous ; 
 + return this . equals ( previous ) ; 
 + } 
 + 
 + / * * 
 + * Returns true if values of the previous AbstracType can be read by the this 
 + * AbsractType . Note that this is a weaker version of isCompatibleWith , as it 
 + * does not require that both type compare values the same way . 
 + * 
 + * Note that a type should be compatible with at least itself . 
 + * / 
 + public boolean isValueCompatibleWith ( AbstractType < ? > previous ) 
 + { 
 + return isCompatibleWith ( previous ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / BytesType . java b / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 index 1bb2bd2 . . a9fee0a 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 @ @ - 83 , 6 + 83 , 13 @ @ public class BytesType extends AbstractType < ByteBuffer > 
 return this = = previous | | previous = = AsciiType . instance | | previous = = UTF8Type . instance ; 
 } 
 
 + @ Override 
 + public boolean isValueCompatibleWith ( AbstractType < ? > previous ) 
 + { 
 + / / BytesType can read anything 
 + return true ; 
 + } 
 + 
 public CQL3Type asCQL3Type ( ) 
 { 
 return CQL3Type . Native . BLOB ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / CompositeType . java b / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 index 2a27617 . . 8cb1e34 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 @ @ - 172 , 6 + 172 , 30 @ @ public class CompositeType extends AbstractCompositeType 
 return true ; 
 } 
 
 + @ Override 
 + public boolean isValueCompatibleWith ( AbstractType < ? > previous ) 
 + { 
 + if ( this = = previous ) 
 + return true ; 
 + 
 + if ( ! ( previous instanceof CompositeType ) ) 
 + return false ; 
 + 
 + / / Extending with new components is fine 
 + CompositeType cp = ( CompositeType ) previous ; 
 + if ( types . size ( ) < cp . types . size ( ) ) 
 + return false ; 
 + 
 + for ( int i = 0 ; i < cp . types . size ( ) ; i + + ) 
 + { 
 + AbstractType tprev = cp . types . get ( i ) ; 
 + AbstractType tnew = types . get ( i ) ; 
 + if ( ! tnew . isValueCompatibleWith ( tprev ) ) 
 + return false ; 
 + } 
 + return true ; 
 + } 
 + 
 private static class StaticParsedComparator implements ParsedComparator 
 { 
 final AbstractType < ? > type ;
