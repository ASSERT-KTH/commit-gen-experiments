BLEU SCORE: 0.033864985683445356

TEST MSG: Partial backport of CASSANDRA - 8739 - avoid LCS overlap in L1
GENERATED MSG: fix infinite recompaction in L0

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> index 81c65e4 . . 7839121 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> @ @ - 547 , 6 + 547 , 8 @ @ public class LeveledManifest <nl> Set < SSTableReader > l1overlapping = overlapping ( candidates , generations [ 1 ] ) ; <nl> if ( Sets . intersection ( l1overlapping , compacting ) . size ( ) > 0 ) <nl> return Collections . emptyList ( ) ; <nl> + if ( ! overlapping ( candidates , compactingL0 ) . isEmpty ( ) ) <nl> + return Collections . emptyList ( ) ; <nl> candidates = Sets . union ( candidates , l1overlapping ) ; <nl> } <nl> if ( candidates . size ( ) < 2 )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f3ef292 . . 7863d56 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 1 . 6 <nl> + * preflight check ttl for maximum of 20 years ( CASSANDRA - 4771 ) <nl> * Fix HH to compact with correct gcBefore , which avoids wiping out <nl> undelivered hints ( CASSANDRA - 4772 ) <nl> * LCS will merge up to 32 L0 sstables as intended ( CASSANDRA - 4778 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> index e47f7f2 . . 23d96e0 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> @ @ - 25 , 7 + 25 , 7 @ @ import java . util . concurrent . TimeoutException ; <nl> import org . apache . cassandra . auth . Permission ; <nl> import org . apache . cassandra . cql3 . * ; <nl> import org . apache . cassandra . db . IMutation ; <nl> - import org . apache . cassandra . db . marshal . AbstractType ; <nl> + import org . apache . cassandra . db . ExpiringColumn ; <nl> import org . apache . cassandra . service . ClientState ; <nl> import org . apache . cassandra . service . StorageProxy ; <nl> import org . apache . cassandra . thrift . ConsistencyLevel ; <nl> @ @ - 70 , 6 + 70 , 9 @ @ public abstract class ModificationStatement extends CFStatement implements CQLSt <nl> if ( timeToLive < 0 ) <nl> throw new InvalidRequestException ( " A TTL must be greater or equal to 0 " ) ; <nl> <nl> + if ( timeToLive > ExpiringColumn . MAX _ TTL ) <nl> + throw new InvalidRequestException ( String . format ( " ttl is too large . requested ( % d ) maximum ( % d ) " , timeToLive , ExpiringColumn . MAX _ TTL ) ) ; <nl> + <nl> ThriftValidation . validateConsistencyLevel ( keyspace ( ) , getConsistencyLevel ( ) , RequestType . WRITE ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / ExpiringColumn . java b / src / java / org / apache / cassandra / db / ExpiringColumn . java <nl> index 2eb981d . . fe1b57c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ExpiringColumn . java <nl> + + + b / src / java / org / apache / cassandra / db / ExpiringColumn . java <nl> @ @ - 43 , 6 + 43 , 8 @ @ import org . apache . cassandra . utils . HeapAllocator ; <nl> * / <nl> public class ExpiringColumn extends Column <nl> { <nl> + public static final int MAX _ TTL = 20 * 365 * 24 * 60 * 60 ; / / 20 years in seconds <nl> + <nl> private final int localExpirationTime ; <nl> private final int timeToLive ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> index fe53060 . . c673a9c 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> @ @ - 29 , 15 + 29 , 12 @ @ import org . slf4j . LoggerFactory ; <nl> import org . apache . cassandra . config . * ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> - import org . apache . cassandra . db . marshal . AsciiType ; <nl> import org . apache . cassandra . db . marshal . MarshalException ; <nl> - import org . apache . cassandra . db . marshal . TypeParser ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . dht . RandomPartitioner ; <nl> import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . locator . * ; <nl> import org . apache . cassandra . service . StorageService ; <nl> - import org . apache . cassandra . io . compress . CompressionParameters ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> @ @ - 337 , 12 + 334 , 19 @ @ public class ThriftValidation <nl> <nl> private static void validateTtl ( Column column ) throws InvalidRequestException <nl> { <nl> - if ( column . isSetTtl ( ) & & column . ttl < = 0 ) <nl> + if ( column . isSetTtl ( ) ) <nl> { <nl> - throw new InvalidRequestException ( " ttl must be positive " ) ; <nl> + if ( column . ttl < = 0 ) <nl> + throw new InvalidRequestException ( " ttl must be positive " ) ; <nl> + <nl> + if ( column . ttl > ExpiringColumn . MAX _ TTL ) <nl> + throw new InvalidRequestException ( String . format ( " ttl is too large . requested ( % d ) maximum ( % d ) " , column . ttl , ExpiringColumn . MAX _ TTL ) ) ; <nl> + } <nl> + else <nl> + { <nl> + / / if it ' s not set , then it should be zero - - here we are just checking to make sure Thrift doesn ' t change that contract with us . <nl> + assert column . ttl = = 0 ; <nl> } <nl> - / / if it ' s not set , then it should be zero - - here we are just checking to make sure Thrift doesn ' t change that contract with us . <nl> - assert column . isSetTtl ( ) | | column . ttl = = 0 ; <nl> } <nl> <nl> public static void validateMutation ( CFMetaData metadata , Mutation mut ) <nl> @ @ - 441 , 7 + 445 , 7 @ @ public class ThriftValidation <nl> ( isSubColumn ? metadata . subcolumnComparator : metadata . comparator ) . getString ( column . name ) ) ) ; <nl> } <nl> <nl> - / / Indexed column values cannot be larger than 64K . See CASSANDRA - 3057 / 4240 for more details <nl> + / / Indexed column values cannot be larger than 64K . See CASSANDRA - 3057 / 4240 for more details <nl> if ( ! Table . open ( metadata . ksName ) . getColumnFamilyStore ( metadata . cfName ) . indexManager . validate ( column ) ) <nl> throw new InvalidRequestException ( String . format ( " Can ' t index column value of size % d for index % s in CF % s of KS % s " , <nl> column . value . remaining ( ) ,

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 index 81c65e4 . . 7839121 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 @ @ - 547 , 6 + 547 , 8 @ @ public class LeveledManifest 
 Set < SSTableReader > l1overlapping = overlapping ( candidates , generations [ 1 ] ) ; 
 if ( Sets . intersection ( l1overlapping , compacting ) . size ( ) > 0 ) 
 return Collections . emptyList ( ) ; 
 + if ( ! overlapping ( candidates , compactingL0 ) . isEmpty ( ) ) 
 + return Collections . emptyList ( ) ; 
 candidates = Sets . union ( candidates , l1overlapping ) ; 
 } 
 if ( candidates . size ( ) < 2 )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f3ef292 . . 7863d56 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 1 . 6 
 + * preflight check ttl for maximum of 20 years ( CASSANDRA - 4771 ) 
 * Fix HH to compact with correct gcBefore , which avoids wiping out 
 undelivered hints ( CASSANDRA - 4772 ) 
 * LCS will merge up to 32 L0 sstables as intended ( CASSANDRA - 4778 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 index e47f7f2 . . 23d96e0 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 @ @ - 25 , 7 + 25 , 7 @ @ import java . util . concurrent . TimeoutException ; 
 import org . apache . cassandra . auth . Permission ; 
 import org . apache . cassandra . cql3 . * ; 
 import org . apache . cassandra . db . IMutation ; 
 - import org . apache . cassandra . db . marshal . AbstractType ; 
 + import org . apache . cassandra . db . ExpiringColumn ; 
 import org . apache . cassandra . service . ClientState ; 
 import org . apache . cassandra . service . StorageProxy ; 
 import org . apache . cassandra . thrift . ConsistencyLevel ; 
 @ @ - 70 , 6 + 70 , 9 @ @ public abstract class ModificationStatement extends CFStatement implements CQLSt 
 if ( timeToLive < 0 ) 
 throw new InvalidRequestException ( " A TTL must be greater or equal to 0 " ) ; 
 
 + if ( timeToLive > ExpiringColumn . MAX _ TTL ) 
 + throw new InvalidRequestException ( String . format ( " ttl is too large . requested ( % d ) maximum ( % d ) " , timeToLive , ExpiringColumn . MAX _ TTL ) ) ; 
 + 
 ThriftValidation . validateConsistencyLevel ( keyspace ( ) , getConsistencyLevel ( ) , RequestType . WRITE ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / ExpiringColumn . java b / src / java / org / apache / cassandra / db / ExpiringColumn . java 
 index 2eb981d . . fe1b57c 100644 
 - - - a / src / java / org / apache / cassandra / db / ExpiringColumn . java 
 + + + b / src / java / org / apache / cassandra / db / ExpiringColumn . java 
 @ @ - 43 , 6 + 43 , 8 @ @ import org . apache . cassandra . utils . HeapAllocator ; 
 * / 
 public class ExpiringColumn extends Column 
 { 
 + public static final int MAX _ TTL = 20 * 365 * 24 * 60 * 60 ; / / 20 years in seconds 
 + 
 private final int localExpirationTime ; 
 private final int timeToLive ; 
 
 diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 index fe53060 . . c673a9c 100644 
 - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 @ @ - 29 , 15 + 29 , 12 @ @ import org . slf4j . LoggerFactory ; 
 import org . apache . cassandra . config . * ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 - import org . apache . cassandra . db . marshal . AsciiType ; 
 import org . apache . cassandra . db . marshal . MarshalException ; 
 - import org . apache . cassandra . db . marshal . TypeParser ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . dht . RandomPartitioner ; 
 import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . locator . * ; 
 import org . apache . cassandra . service . StorageService ; 
 - import org . apache . cassandra . io . compress . CompressionParameters ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 @ @ - 337 , 12 + 334 , 19 @ @ public class ThriftValidation 
 
 private static void validateTtl ( Column column ) throws InvalidRequestException 
 { 
 - if ( column . isSetTtl ( ) & & column . ttl < = 0 ) 
 + if ( column . isSetTtl ( ) ) 
 { 
 - throw new InvalidRequestException ( " ttl must be positive " ) ; 
 + if ( column . ttl < = 0 ) 
 + throw new InvalidRequestException ( " ttl must be positive " ) ; 
 + 
 + if ( column . ttl > ExpiringColumn . MAX _ TTL ) 
 + throw new InvalidRequestException ( String . format ( " ttl is too large . requested ( % d ) maximum ( % d ) " , column . ttl , ExpiringColumn . MAX _ TTL ) ) ; 
 + } 
 + else 
 + { 
 + / / if it ' s not set , then it should be zero - - here we are just checking to make sure Thrift doesn ' t change that contract with us . 
 + assert column . ttl = = 0 ; 
 } 
 - / / if it ' s not set , then it should be zero - - here we are just checking to make sure Thrift doesn ' t change that contract with us . 
 - assert column . isSetTtl ( ) | | column . ttl = = 0 ; 
 } 
 
 public static void validateMutation ( CFMetaData metadata , Mutation mut ) 
 @ @ - 441 , 7 + 445 , 7 @ @ public class ThriftValidation 
 ( isSubColumn ? metadata . subcolumnComparator : metadata . comparator ) . getString ( column . name ) ) ) ; 
 } 
 
 - / / Indexed column values cannot be larger than 64K . See CASSANDRA - 3057 / 4240 for more details 
 + / / Indexed column values cannot be larger than 64K . See CASSANDRA - 3057 / 4240 for more details 
 if ( ! Table . open ( metadata . ksName ) . getColumnFamilyStore ( metadata . cfName ) . indexManager . validate ( column ) ) 
 throw new InvalidRequestException ( String . format ( " Can ' t index column value of size % d for index % s in CF % s of KS % s " , 
 column . value . remaining ( ) ,
