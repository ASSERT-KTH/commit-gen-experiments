BLEU SCORE: 0.020980574531482755

TEST MSG: Increase bloom filter true positive count on key cache hit
GENERATED MSG: avoid using cached position of a keywhen GTis requested

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 57ab5b4 . . c8cf1d4 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 12 : <nl> + * Increase bf true positive count on key cache hit ( CASSANDRA - 8525 ) <nl> * Move MeteredFlusher to its own thread ( CASSANDRA - 8485 ) <nl> * Fix non - distinct results in DISTNCT queries on static columns when <nl> paging is enabled ( CASSANDRA - 8087 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index f0e9e65 . . 803c7fa 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 887 , 7 + 887 , 10 @ @ public class SSTableReader extends SSTable implements Closeable <nl> RowIndexEntry cachedEntry = keyCache . get ( unifiedKey ) ; <nl> keyCacheRequest . incrementAndGet ( ) ; <nl> if ( cachedEntry ! = null ) <nl> + { <nl> keyCacheHit . incrementAndGet ( ) ; <nl> + bloomFilterTracker . addTruePositive ( ) ; <nl> + } <nl> return cachedEntry ; <nl> } <nl> else <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java <nl> index 427d089 . . e49e564 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java <nl> @ @ - 56 , 6 + 56 , 7 @ @ import org . apache . cassandra . thrift . IndexExpression ; <nl> import org . apache . cassandra . thrift . IndexOperator ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . Pair ; <nl> + import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> @ RunWith ( OrderedJUnit4ClassRunner . class ) <nl> @ @ - 204 , 6 + 205 , 39 @ @ public class SSTableReaderTest extends SchemaLoader <nl> } <nl> <nl> @ Test <nl> + public void testGetPositionsKeyCacheStats ( ) throws IOException , ExecutionException , InterruptedException <nl> + { <nl> + Keyspace keyspace = Keyspace . open ( " Keyspace1 " ) ; <nl> + ColumnFamilyStore store = keyspace . getColumnFamilyStore ( " Standard2 " ) ; <nl> + CacheService . instance . keyCache . setCapacity ( 1000 ) ; <nl> + <nl> + / / insert data and compact to a single sstable <nl> + CompactionManager . instance . disableAutoCompaction ( ) ; <nl> + for ( int j = 0 ; j < 10 ; j + + ) <nl> + { <nl> + ByteBuffer key = ByteBufferUtil . bytes ( String . valueOf ( j ) ) ; <nl> + RowMutation rm = new RowMutation ( " Keyspace1 " , key ) ; <nl> + rm . add ( " Standard2 " , ByteBufferUtil . bytes ( " 0 " ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , j ) ; <nl> + rm . apply ( ) ; <nl> + } <nl> + store . forceBlockingFlush ( ) ; <nl> + CompactionManager . instance . performMaximal ( store ) ; <nl> + <nl> + SSTableReader sstable = store . getSSTables ( ) . iterator ( ) . next ( ) ; <nl> + sstable . getPosition ( k ( 2 ) , SSTableReader . Operator . EQ ) ; <nl> + assertEquals ( 0 , sstable . getKeyCacheHit ( ) ) ; <nl> + assertEquals ( 1 , sstable . getBloomFilterTruePositiveCount ( ) ) ; <nl> + sstable . getPosition ( k ( 2 ) , SSTableReader . Operator . EQ ) ; <nl> + assertEquals ( 1 , sstable . getKeyCacheHit ( ) ) ; <nl> + assertEquals ( 2 , sstable . getBloomFilterTruePositiveCount ( ) ) ; <nl> + sstable . getPosition ( k ( 15 ) , SSTableReader . Operator . EQ ) ; <nl> + assertEquals ( 1 , sstable . getKeyCacheHit ( ) ) ; <nl> + assertEquals ( 2 , sstable . getBloomFilterTruePositiveCount ( ) ) ; <nl> + <nl> + } <nl> + <nl> + <nl> + @ Test <nl> public void testPersistentStatisticsWithSecondaryIndex ( ) throws IOException , ExecutionException , InterruptedException <nl> { <nl> / / Create secondary index and flush to disk <nl> @ @ - 254 , 7 + 288 , 7 @ @ public class SSTableReaderTest extends SchemaLoader <nl> <nl> / / test to see if sstable can be opened as expected <nl> SSTableReader target = SSTableReader . open ( desc ) ; <nl> - Assert . assertEquals ( target . getKeySampleSize ( ) , 1 ) ; <nl> + assertEquals ( target . getKeySampleSize ( ) , 1 ) ; <nl> Assert . assertArrayEquals ( ByteBufferUtil . getArray ( firstKey . key ) , target . getKeySample ( 0 ) ) ; <nl> assert target . first . equals ( firstKey ) ; <nl> assert target . last . equals ( lastKey ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c553e69 . . e2dcb65 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> * Allow removing LocationInfo sstables ( CASSANDRA - 2632 ) <nl> * avoid attempting to replay mutations from dropped keyspaces ( CASSANDRA - 2631 ) <nl> * avoid using cached position of a key when GT is requested ( CASSANDRA - 2633 ) <nl> + * fix counting bloom filter true positives ( CASSANDRA - 2637 ) <nl> <nl> <nl> 0 . 7 . 5 <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index 8b4f2d0 . . a0b45a6 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 488 , 12 + 488 , 12 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> { <nl> if ( comparison = = 0 & & keyCache ! = null & & keyCache . getCapacity ( ) > 0 ) <nl> { <nl> - if ( op = = Operator . EQ ) <nl> - bloomFilterTracker . addTruePositive ( ) ; <nl> / / store exact match for the key <nl> if ( decoratedKey . key ! = null ) <nl> cacheKey ( decoratedKey , dataPosition ) ; <nl> } <nl> + if ( op = = Operator . EQ ) <nl> + bloomFilterTracker . addTruePositive ( ) ; <nl> return dataPosition ; <nl> } <nl> if ( v < 0 )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 57ab5b4 . . c8cf1d4 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 12 : 
 + * Increase bf true positive count on key cache hit ( CASSANDRA - 8525 ) 
 * Move MeteredFlusher to its own thread ( CASSANDRA - 8485 ) 
 * Fix non - distinct results in DISTNCT queries on static columns when 
 paging is enabled ( CASSANDRA - 8087 ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index f0e9e65 . . 803c7fa 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 887 , 7 + 887 , 10 @ @ public class SSTableReader extends SSTable implements Closeable 
 RowIndexEntry cachedEntry = keyCache . get ( unifiedKey ) ; 
 keyCacheRequest . incrementAndGet ( ) ; 
 if ( cachedEntry ! = null ) 
 + { 
 keyCacheHit . incrementAndGet ( ) ; 
 + bloomFilterTracker . addTruePositive ( ) ; 
 + } 
 return cachedEntry ; 
 } 
 else 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java 
 index 427d089 . . e49e564 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableReaderTest . java 
 @ @ - 56 , 6 + 56 , 7 @ @ import org . apache . cassandra . thrift . IndexExpression ; 
 import org . apache . cassandra . thrift . IndexOperator ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . Pair ; 
 + import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertTrue ; 
 
 @ RunWith ( OrderedJUnit4ClassRunner . class ) 
 @ @ - 204 , 6 + 205 , 39 @ @ public class SSTableReaderTest extends SchemaLoader 
 } 
 
 @ Test 
 + public void testGetPositionsKeyCacheStats ( ) throws IOException , ExecutionException , InterruptedException 
 + { 
 + Keyspace keyspace = Keyspace . open ( " Keyspace1 " ) ; 
 + ColumnFamilyStore store = keyspace . getColumnFamilyStore ( " Standard2 " ) ; 
 + CacheService . instance . keyCache . setCapacity ( 1000 ) ; 
 + 
 + / / insert data and compact to a single sstable 
 + CompactionManager . instance . disableAutoCompaction ( ) ; 
 + for ( int j = 0 ; j < 10 ; j + + ) 
 + { 
 + ByteBuffer key = ByteBufferUtil . bytes ( String . valueOf ( j ) ) ; 
 + RowMutation rm = new RowMutation ( " Keyspace1 " , key ) ; 
 + rm . add ( " Standard2 " , ByteBufferUtil . bytes ( " 0 " ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , j ) ; 
 + rm . apply ( ) ; 
 + } 
 + store . forceBlockingFlush ( ) ; 
 + CompactionManager . instance . performMaximal ( store ) ; 
 + 
 + SSTableReader sstable = store . getSSTables ( ) . iterator ( ) . next ( ) ; 
 + sstable . getPosition ( k ( 2 ) , SSTableReader . Operator . EQ ) ; 
 + assertEquals ( 0 , sstable . getKeyCacheHit ( ) ) ; 
 + assertEquals ( 1 , sstable . getBloomFilterTruePositiveCount ( ) ) ; 
 + sstable . getPosition ( k ( 2 ) , SSTableReader . Operator . EQ ) ; 
 + assertEquals ( 1 , sstable . getKeyCacheHit ( ) ) ; 
 + assertEquals ( 2 , sstable . getBloomFilterTruePositiveCount ( ) ) ; 
 + sstable . getPosition ( k ( 15 ) , SSTableReader . Operator . EQ ) ; 
 + assertEquals ( 1 , sstable . getKeyCacheHit ( ) ) ; 
 + assertEquals ( 2 , sstable . getBloomFilterTruePositiveCount ( ) ) ; 
 + 
 + } 
 + 
 + 
 + @ Test 
 public void testPersistentStatisticsWithSecondaryIndex ( ) throws IOException , ExecutionException , InterruptedException 
 { 
 / / Create secondary index and flush to disk 
 @ @ - 254 , 7 + 288 , 7 @ @ public class SSTableReaderTest extends SchemaLoader 
 
 / / test to see if sstable can be opened as expected 
 SSTableReader target = SSTableReader . open ( desc ) ; 
 - Assert . assertEquals ( target . getKeySampleSize ( ) , 1 ) ; 
 + assertEquals ( target . getKeySampleSize ( ) , 1 ) ; 
 Assert . assertArrayEquals ( ByteBufferUtil . getArray ( firstKey . key ) , target . getKeySample ( 0 ) ) ; 
 assert target . first . equals ( firstKey ) ; 
 assert target . last . equals ( lastKey ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c553e69 . . e2dcb65 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 * Allow removing LocationInfo sstables ( CASSANDRA - 2632 ) 
 * avoid attempting to replay mutations from dropped keyspaces ( CASSANDRA - 2631 ) 
 * avoid using cached position of a key when GT is requested ( CASSANDRA - 2633 ) 
 + * fix counting bloom filter true positives ( CASSANDRA - 2637 ) 
 
 
 0 . 7 . 5 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index 8b4f2d0 . . a0b45a6 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 488 , 12 + 488 , 12 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 { 
 if ( comparison = = 0 & & keyCache ! = null & & keyCache . getCapacity ( ) > 0 ) 
 { 
 - if ( op = = Operator . EQ ) 
 - bloomFilterTracker . addTruePositive ( ) ; 
 / / store exact match for the key 
 if ( decoratedKey . key ! = null ) 
 cacheKey ( decoratedKey , dataPosition ) ; 
 } 
 + if ( op = = Operator . EQ ) 
 + bloomFilterTracker . addTruePositive ( ) ; 
 return dataPosition ; 
 } 
 if ( v < 0 )
