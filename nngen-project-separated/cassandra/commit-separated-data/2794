BLEU SCORE: 0.027611988917697356

TEST MSG: add cassandra . default _ messaging _ version
GENERATED MSG: Fix ArrayIndexOutOfBoundsException in 2ndary index query

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ec546db . . 2920c15 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 1 . 2 . 14 <nl> + * add cassandra . default _ messaging _ version property to allow easier <nl> + upgrading from 1 . 1 ( CASSANDRA - 6619 ) <nl> * Allow executing CREATE statements multiple times ( CASSANDRA - 6471 ) <nl> * Don ' t send confusing info with timeouts ( CASSANDRA - 6491 ) <nl> * Don ' t resubmit counter mutation runnables internally ( CASSANDRA - 6427 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 8c22bea . . 53cb7ca 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 22 , 6 + 22 , 15 @ @ Features <nl> - Batchlog replay can be , and is throttled by default now . <nl> See batchlog _ replay _ throttle _ in _ kb setting in cassandra . yaml . <nl> <nl> + Upgrading <nl> + - - - - - - - - - <nl> + - The system property cassandra . default _ messaging _ version has been added <nl> + to allow faster upgrades from 1 . 1 . Normally , a 1 . 2 node will need to <nl> + wait until a 1 . 1 node connects to it to discover that the 1 . 1 node uses <nl> + an older internal message protocol ; setting this property ( to 5 , <nl> + corresponding to 1 . 1 . 7 + ) will allow newly upgraded 1 . 2 nodes to <nl> + participate in a mostly - 1 . 1 cluster faster . <nl> + <nl> <nl> 1 . 2 . 13 <nl> = = = = = = <nl> diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> index 4edac5d . . 9989221 100644 <nl> - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> @ @ - 36 , 15 + 36 , 14 @ @ import java . util . concurrent . atomic . AtomicLong ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . config . Config ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . tracing . TraceState ; <nl> import org . apache . cassandra . tracing . Tracing ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> import org . xerial . snappy . SnappyOutputStream ; <nl> <nl> - import org . apache . cassandra . config . Config ; <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - <nl> public class OutboundTcpConnection extends Thread <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( OutboundTcpConnection . class ) ; <nl> @ @ - 322 , 6 + 321 , 8 @ @ public class OutboundTcpConnection extends Thread <nl> } <nl> out = new DataOutputStream ( new BufferedOutputStream ( socket . getOutputStream ( ) , 4096 ) ) ; <nl> <nl> + / / ( MS defaults to assuming everyone else is on the same version as us until proven otherwise , so this <nl> + / / code will run once even for older nodes , which allows us to reset the version to the correct one ) <nl> if ( targetVersion > = MessagingService . VERSION _ 12 ) <nl> { <nl> out . writeInt ( MessagingService . PROTOCOL _ MAGIC ) ; <nl> @ @ - 335 , 8 + 336 , 26 @ @ public class OutboundTcpConnection extends Thread <nl> / / no version is returned , so disconnect an try again : we will either get <nl> / / a different target version ( targetVersion < MessagingService . VERSION _ 12 ) <nl> / / or if the same version the handshake will finally succeed <nl> - logger . debug ( " Target max version is { } ; no version information yet , will retry " , maxTargetVersion ) ; <nl> - disconnect ( ) ; <nl> + / / Try to downgrade to the version passed in from the env variable <nl> + if ( System . getProperty ( " cassandra . default _ messaging _ version " ) ! = null ) <nl> + { <nl> + try <nl> + { <nl> + int defaultVersion = Integer . parseInt ( System . getProperty ( " cassandra . default _ messaging _ version " ) ) ; <nl> + logger . debug ( " No messaging version received ; assuming default of { } " , defaultVersion ) ; <nl> + MessagingService . instance ( ) . setVersion ( poolReference . endPoint ( ) , defaultVersion ) ; <nl> + } <nl> + catch ( NumberFormatException e ) <nl> + { <nl> + logger . debug ( " Unable to parse the value of cassandra . default _ messaging _ version " ) ; 	 	 <nl> + } <nl> + } <nl> + else <nl> + { <nl> + 	 logger . debug ( " No messaging version received ; will retry " , maxTargetVersion ) ; <nl> + } <nl> + <nl> + disconnect ( ) ; / / do we need to disconnect ? <nl> continue ; <nl> } <nl> if ( targetVersion > maxTargetVersion )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ec546db . . 2920c15 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 1 . 2 . 14 
 + * add cassandra . default _ messaging _ version property to allow easier 
 + upgrading from 1 . 1 ( CASSANDRA - 6619 ) 
 * Allow executing CREATE statements multiple times ( CASSANDRA - 6471 ) 
 * Don ' t send confusing info with timeouts ( CASSANDRA - 6491 ) 
 * Don ' t resubmit counter mutation runnables internally ( CASSANDRA - 6427 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 8c22bea . . 53cb7ca 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 22 , 6 + 22 , 15 @ @ Features 
 - Batchlog replay can be , and is throttled by default now . 
 See batchlog _ replay _ throttle _ in _ kb setting in cassandra . yaml . 
 
 + Upgrading 
 + - - - - - - - - - 
 + - The system property cassandra . default _ messaging _ version has been added 
 + to allow faster upgrades from 1 . 1 . Normally , a 1 . 2 node will need to 
 + wait until a 1 . 1 node connects to it to discover that the 1 . 1 node uses 
 + an older internal message protocol ; setting this property ( to 5 , 
 + corresponding to 1 . 1 . 7 + ) will allow newly upgraded 1 . 2 nodes to 
 + participate in a mostly - 1 . 1 cluster faster . 
 + 
 
 1 . 2 . 13 
 = = = = = = 
 diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 index 4edac5d . . 9989221 100644 
 - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 @ @ - 36 , 15 + 36 , 14 @ @ import java . util . concurrent . atomic . AtomicLong ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . config . Config ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . tracing . TraceState ; 
 import org . apache . cassandra . tracing . Tracing ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 import org . xerial . snappy . SnappyOutputStream ; 
 
 - import org . apache . cassandra . config . Config ; 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 - 
 public class OutboundTcpConnection extends Thread 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( OutboundTcpConnection . class ) ; 
 @ @ - 322 , 6 + 321 , 8 @ @ public class OutboundTcpConnection extends Thread 
 } 
 out = new DataOutputStream ( new BufferedOutputStream ( socket . getOutputStream ( ) , 4096 ) ) ; 
 
 + / / ( MS defaults to assuming everyone else is on the same version as us until proven otherwise , so this 
 + / / code will run once even for older nodes , which allows us to reset the version to the correct one ) 
 if ( targetVersion > = MessagingService . VERSION _ 12 ) 
 { 
 out . writeInt ( MessagingService . PROTOCOL _ MAGIC ) ; 
 @ @ - 335 , 8 + 336 , 26 @ @ public class OutboundTcpConnection extends Thread 
 / / no version is returned , so disconnect an try again : we will either get 
 / / a different target version ( targetVersion < MessagingService . VERSION _ 12 ) 
 / / or if the same version the handshake will finally succeed 
 - logger . debug ( " Target max version is { } ; no version information yet , will retry " , maxTargetVersion ) ; 
 - disconnect ( ) ; 
 + / / Try to downgrade to the version passed in from the env variable 
 + if ( System . getProperty ( " cassandra . default _ messaging _ version " ) ! = null ) 
 + { 
 + try 
 + { 
 + int defaultVersion = Integer . parseInt ( System . getProperty ( " cassandra . default _ messaging _ version " ) ) ; 
 + logger . debug ( " No messaging version received ; assuming default of { } " , defaultVersion ) ; 
 + MessagingService . instance ( ) . setVersion ( poolReference . endPoint ( ) , defaultVersion ) ; 
 + } 
 + catch ( NumberFormatException e ) 
 + { 
 + logger . debug ( " Unable to parse the value of cassandra . default _ messaging _ version " ) ; 	 	 
 + } 
 + } 
 + else 
 + { 
 + 	 logger . debug ( " No messaging version received ; will retry " , maxTargetVersion ) ; 
 + } 
 + 
 + disconnect ( ) ; / / do we need to disconnect ? 
 continue ; 
 } 
 if ( targetVersion > maxTargetVersion )

NEAREST DIFF:
ELIMINATEDSENTENCE
