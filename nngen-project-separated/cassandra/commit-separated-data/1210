BLEU SCORE: 0.03089055318156698

TEST MSG: Fix SortedSet cqlsh formatting ( follow - up to CASSANDRA - 10513 )
GENERATED MSG: cqlsh : fix display of timeuuids

TEST DIFF (one line): diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py <nl> index e95df9f . . fe1786a 100644 <nl> - - - a / pylib / cqlshlib / formatting . py <nl> + + + b / pylib / cqlshlib / formatting . py <nl> @ @ - 270 , 6 + 270 , 7 @ @ def format _ value _ set ( val , encoding , colormap , date _ time _ format , float _ precision , <nl> date _ time _ format , float _ precision , nullval ) <nl> formatter _ for ( ' frozenset ' ) ( format _ value _ set ) <nl> formatter _ for ( ' sortedset ' ) ( format _ value _ set ) <nl> + formatter _ for ( ' SortedSet ' ) ( format _ value _ set ) <nl> <nl> <nl> @ formatter _ for ( ' dict ' )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7314f99 . . b70c412 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 3 , 6 + 3 , 7 @ @ <nl> * adjust blockFor calculation to account for pending ranges due to node <nl> movement ( CASSANDRA - 833 ) <nl> * Change CQL version to 3 . 0 . 0 and stop accepting 3 . 0 . 0 - beta1 ( CASSANDRA - 4649 ) <nl> + * Make prepared statement global instead of per connection ( CASSANDRA - 4449 ) <nl> <nl> 1 . 2 - beta1 <nl> * add atomic _ batch _ mutate ( CASSANDRA - 4542 , - 4635 ) <nl> diff - - git a / doc / native _ protocol . spec b / doc / native _ protocol . spec <nl> index 0dd5c14 . . 9a44697 100644 <nl> - - - a / doc / native _ protocol . spec <nl> + + + b / doc / native _ protocol . spec <nl> @ @ - 520 , 3 + 520 , 7 @ @ Table of Contents <nl> already exists . If the query was attempting to create a <nl> keyspace , < table > will be present but will be the empty <nl> string . <nl> + 0x2500 Unprepared : Can be thrown while a prepared statement tries to be <nl> + executed if the provide prepared statement ID is not known by <nl> + this host . The rest of the ERROR message body will be [ bytes ] <nl> + representing the unknown ID . <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index 146f775 . . 856f6fd 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . cql3 ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> + import com . googlecode . concurrentlinkedhashmap . ConcurrentLinkedHashMap ; <nl> import org . antlr . runtime . * ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . cassandra . exceptions . * ; <nl> import org . apache . cassandra . service . ClientState ; <nl> import org . apache . cassandra . thrift . SchemaDisagreementException ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . apache . cassandra . utils . MD5Digest ; <nl> import org . apache . cassandra . utils . SemanticVersion ; <nl> <nl> public class QueryProcessor <nl> @ @ - 42 , 6 + 44 , 26 @ @ public class QueryProcessor <nl> <nl> private static final Logger logger = LoggerFactory . getLogger ( QueryProcessor . class ) ; <nl> <nl> + public static final int MAX _ CACHE _ PREPARED = 100000 ; / / Enough to keep buggy clients from OOM ' ing us <nl> + private static final Map < MD5Digest , CQLStatement > preparedStatements = new ConcurrentLinkedHashMap . Builder < MD5Digest , CQLStatement > ( ) <nl> + . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED ) <nl> + . build ( ) ; <nl> + <nl> + private static final Map < Integer , CQLStatement > thriftPreparedStatements = new ConcurrentLinkedHashMap . Builder < Integer , CQLStatement > ( ) <nl> + . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED ) <nl> + . build ( ) ; <nl> + <nl> + <nl> + public static CQLStatement getPrepared ( MD5Digest id ) <nl> + { <nl> + return preparedStatements . get ( id ) ; <nl> + } <nl> + <nl> + public static CQLStatement getPrepared ( Integer id ) <nl> + { <nl> + return thriftPreparedStatements . get ( id ) ; <nl> + } <nl> + <nl> public static void validateKey ( ByteBuffer key ) throws InvalidRequestException <nl> { <nl> if ( key = = null | | key . remaining ( ) = = 0 ) <nl> @ @ - 151 , 20 + 173 , 38 @ @ public class QueryProcessor <nl> } <nl> } <nl> <nl> - public static ResultMessage . Prepared prepare ( String queryString , ClientState clientState ) <nl> + public static ResultMessage . Prepared prepare ( String queryString , ClientState clientState , boolean forThrift ) <nl> throws RequestValidationException <nl> { <nl> logger . trace ( " CQL QUERY : { } " , queryString ) ; <nl> <nl> ParsedStatement . Prepared prepared = getStatement ( queryString , clientState ) ; <nl> - int statementId = makeStatementId ( queryString ) ; <nl> - clientState . getCQL3Prepared ( ) . put ( statementId , prepared . statement ) ; <nl> - logger . trace ( String . format ( " Stored prepared statement # % d with % d bind markers " , <nl> - statementId , <nl> - prepared . statement . getBoundsTerms ( ) ) ) ; <nl> + ResultMessage . Prepared msg = storePreparedStatement ( queryString , clientState , prepared , forThrift ) ; <nl> <nl> assert prepared . statement . getBoundsTerms ( ) = = prepared . boundNames . size ( ) ; <nl> - return new ResultMessage . Prepared ( statementId , prepared . boundNames ) ; <nl> + return msg ; <nl> + } <nl> + <nl> + private static ResultMessage . Prepared storePreparedStatement ( String queryString , ClientState clientState , ParsedStatement . Prepared prepared , boolean forThrift ) <nl> + { <nl> + if ( forThrift ) <nl> + { <nl> + int statementId = queryString . hashCode ( ) ; <nl> + thriftPreparedStatements . put ( statementId , prepared . statement ) ; <nl> + logger . trace ( String . format ( " Stored prepared statement # % d with % d bind markers " , <nl> + statementId , <nl> + prepared . statement . getBoundsTerms ( ) ) ) ; <nl> + return ResultMessage . Prepared . forThrift ( statementId , prepared . boundNames ) ; <nl> + } <nl> + else <nl> + { <nl> + MD5Digest statementId = MD5Digest . compute ( queryString ) ; <nl> + logger . trace ( String . format ( " Stored prepared statement % s with % d bind markers " , <nl> + statementId , <nl> + prepared . statement . getBoundsTerms ( ) ) ) ; <nl> + preparedStatements . put ( statementId , prepared . statement ) ; <nl> + return new ResultMessage . Prepared ( statementId , prepared . boundNames ) ; <nl> + } <nl> } <nl> <nl> public static ResultMessage processPrepared ( CQLStatement statement , ClientState clientState , List < ByteBuffer > variables ) <nl> @ @ - 188 , 12 + 228 , 6 @ @ public class QueryProcessor <nl> return processStatement ( statement , clientState , variables ) ; <nl> } <nl> <nl> - private static final int makeStatementId ( String cql ) <nl> - { <nl> - / / use the hash of the string till something better is provided <nl> - return cql . hashCode ( ) ; <nl> - } <nl> - <nl> private static ParsedStatement . Prepared getStatement ( String queryStr , ClientState clientState ) <nl> throws RequestValidationException <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / exceptions / ExceptionCode . java b / src / java / org / apache / cassandra / exceptions / ExceptionCode . java <nl> index 13fcc6a . . e8dfb4e 100644 <nl> - - - a / src / java / org / apache / cassandra / exceptions / ExceptionCode . java <nl> + + + b / src / java / org / apache / cassandra / exceptions / ExceptionCode . java <nl> @ @ - 43 , 7 + 43 , 8 @ @ public enum ExceptionCode <nl> UNAUTHORIZED ( 0x2100 ) , <nl> INVALID ( 0x2200 ) , <nl> CONFIG _ ERROR ( 0x2300 ) , <nl> - ALREADY _ EXISTS ( 0x2400 ) ; <nl> + ALREADY _ EXISTS ( 0x2400 ) , <nl> + UNPREPARED ( 0x2500 ) ; <nl> <nl> public final int value ; <nl> private static final Map < Integer , ExceptionCode > valueToCode = new HashMap < Integer , ExceptionCode > ( ExceptionCode . values ( ) . length ) ; <nl> diff - - git a / src / java / org / apache / cassandra / exceptions / PreparedQueryNotFoundException . java b / src / java / org / apache / cassandra / exceptions / PreparedQueryNotFoundException . java <nl> new file mode 100644 <nl> index 0000000 . . 07502c8 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / exceptions / PreparedQueryNotFoundException . java <nl> @ @ - 0 , 0 + 1 , 40 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . exceptions ; <nl> + <nl> + import org . apache . cassandra . cql3 . QueryProcessor ; <nl> + import org . apache . cassandra . utils . MD5Digest ; <nl> + <nl> + public class PreparedQueryNotFoundException extends RequestValidationException <nl> + { <nl> + public final MD5Digest id ; <nl> + <nl> + public PreparedQueryNotFoundException ( MD5Digest id ) <nl> + { <nl> + super ( ExceptionCode . UNPREPARED , makeMsg ( id ) ) ; <nl> + this . id = id ; <nl> + } <nl> + <nl> + private static String makeMsg ( MD5Digest id ) <nl> + { <nl> + return String . format ( " Prepared query with ID % d not found " + <nl> + " ( either the query was not prepared on this host ( maybe the host has been restarted ? ) " + <nl> + " or you have prepared more than % d queries and queries % d has been evicted from the internal cache ) " , <nl> + id , QueryProcessor . MAX _ CACHE _ PREPARED , id ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / service / ClientState . java b / src / java / org / apache / cassandra / service / ClientState . java <nl> index ef640af . . 6266a3b 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ClientState . java <nl> + + + b / src / java / org / apache / cassandra / service / ClientState . java <nl> @ @ - 65 , 12 + 65 , 6 @ @ public class ClientState <nl> } <nl> } ; <nl> <nl> - private final Map < Integer , org . apache . cassandra . cql3 . CQLStatement > cql3Prepared = new LinkedHashMap < Integer , org . apache . cassandra . cql3 . CQLStatement > ( 16 , 0 . 75f , true ) { <nl> - protected boolean removeEldestEntry ( Map . Entry < Integer , org . apache . cassandra . cql3 . CQLStatement > eldest ) { <nl> - return size ( ) > MAX _ CACHE _ PREPARED ; <nl> - } <nl> - } ; <nl> - <nl> private long clock ; <nl> <nl> / / internalCall is used to mark ClientState as used by some internal component <nl> @ @ - 96 , 11 + 90 , 6 @ @ public class ClientState <nl> return prepared ; <nl> } <nl> <nl> - public Map < Integer , org . apache . cassandra . cql3 . CQLStatement > getCQL3Prepared ( ) <nl> - { <nl> - return cql3Prepared ; <nl> - } <nl> - <nl> public String getRawKeyspace ( ) <nl> { <nl> return keyspace ; <nl> @ @ - 191 , 7 + 180 , 6 @ @ public class ClientState <nl> preparedTracingSession = null ; <nl> resourceClear ( ) ; <nl> prepared . clear ( ) ; <nl> - cql3Prepared . clear ( ) ; <nl> } <nl> <nl> public void hasKeyspaceAccess ( String keyspace , Permission perm ) throws UnauthorizedException , InvalidRequestException <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> index 73ecd29 . . 4ab19bb 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> @ @ - 1705 , 7 + 1705 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> if ( cState . getCQLVersion ( ) . major = = 2 ) <nl> return QueryProcessor . prepare ( queryString , cState ) ; <nl> else <nl> - return org . apache . cassandra . cql3 . QueryProcessor . prepare ( queryString , cState ) . toThriftPreparedResult ( ) ; <nl> + return org . apache . cassandra . cql3 . QueryProcessor . prepare ( queryString , cState , true ) . toThriftPreparedResult ( ) ; <nl> } <nl> catch ( RequestValidationException e ) <nl> { <nl> @ @ - 1741 , 10 + 1741 , 13 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> else <nl> { <nl> - org . apache . cassandra . cql3 . CQLStatement statement = cState . getCQL3Prepared ( ) . get ( itemId ) ; <nl> + org . apache . cassandra . cql3 . CQLStatement statement = org . apache . cassandra . cql3 . QueryProcessor . getPrepared ( itemId ) ; <nl> <nl> if ( statement = = null ) <nl> - throw new InvalidRequestException ( String . format ( " Prepared query with ID % d not found " , itemId ) ) ; <nl> + throw new InvalidRequestException ( String . format ( " Prepared query with ID % d not found " + <nl> + " ( either the query was not prepared on this host ( maybe the host has been restarted ? ) " + <nl> + " or you have prepared more than % d queries and queries % d has been evicted from the internal cache ) " , <nl> + itemId , org . apache . cassandra . cql3 . QueryProcessor . MAX _ CACHE _ PREPARED , itemId ) ) ; <nl> logger . trace ( " Retrieved prepared statement # { } with { } bind markers " , itemId , <nl> statement . getBoundsTerms ( ) ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / transport / CBUtil . java b / src / java / org / apache / cassandra / transport / CBUtil . java <nl> index b977f35 . . fe8863a 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / CBUtil . java <nl> + + + b / src / java / org / apache / cassandra / transport / CBUtil . java <nl> @ @ - 111 , 6 + 111 , 26 @ @ public abstract class CBUtil <nl> return ChannelBuffers . wrappedBuffer ( shortToCB ( bytes . readableBytes ( ) ) , bytes ) ; <nl> } <nl> <nl> + public static ChannelBuffer bytesToCB ( byte [ ] bytes ) <nl> + { <nl> + return ChannelBuffers . wrappedBuffer ( shortToCB ( bytes . length ) , ChannelBuffers . wrappedBuffer ( bytes ) ) ; <nl> + } <nl> + <nl> + public static byte [ ] readBytes ( ChannelBuffer cb ) <nl> + { <nl> + try <nl> + { <nl> + int length = cb . readUnsignedShort ( ) ; <nl> + byte [ ] bytes = new byte [ length ] ; <nl> + cb . readBytes ( bytes ) ; <nl> + return bytes ; <nl> + } <nl> + catch ( IndexOutOfBoundsException e ) <nl> + { <nl> + throw new ProtocolException ( " Not enough bytes to read a byte array preceded by it ' s 2 bytes length " ) ; <nl> + } <nl> + } <nl> + <nl> public static ChannelBuffer longStringToCB ( String str ) <nl> { <nl> ChannelBuffer bytes = bytes ( str ) ; <nl> diff - - git a / src / java / org / apache / cassandra / transport / Client . java b / src / java / org / apache / cassandra / transport / Client . java <nl> index b9e00fa . . 3b4ace9 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Client . java <nl> + + + b / src / java / org / apache / cassandra / transport / Client . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import com . google . common . base . Splitter ; <nl> <nl> import org . apache . cassandra . transport . messages . * ; <nl> import org . apache . cassandra . db . marshal . * ; <nl> + import org . apache . cassandra . utils . Hex ; <nl> <nl> public class Client extends SimpleClient <nl> { <nl> @ @ - 109 , 7 + 110 , 7 @ @ public class Client extends SimpleClient <nl> { <nl> try <nl> { <nl> - int id = Integer . parseInt ( iter . next ( ) ) ; <nl> + byte [ ] id = Hex . hexToBytes ( iter . next ( ) ) ; <nl> List < ByteBuffer > values = new ArrayList < ByteBuffer > ( ) ; <nl> while ( iter . hasNext ( ) ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / transport / SimpleClient . java b / src / java / org / apache / cassandra / transport / SimpleClient . java <nl> index ea0a3df . . 8132e65 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / SimpleClient . java <nl> + + + b / src / java / org / apache / cassandra / transport / SimpleClient . java <nl> @ @ - 126 , 7 + 126 , 7 @ @ public class SimpleClient <nl> return ( ResultMessage . Prepared ) msg ; <nl> } <nl> <nl> - public ResultMessage executePrepared ( int statementId , List < ByteBuffer > values ) <nl> + public ResultMessage executePrepared ( byte [ ] statementId , List < ByteBuffer > values ) <nl> { <nl> Message . Response msg = execute ( new ExecuteMessage ( statementId , values ) ) ; <nl> assert msg instanceof ResultMessage ; <nl> diff - - git a / src / java / org / apache / cassandra / transport / messages / ErrorMessage . java b / src / java / org / apache / cassandra / transport / messages / ErrorMessage . java <nl> index ecb387b . . 8ed8e94 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / messages / ErrorMessage . java <nl> + + + b / src / java / org / apache / cassandra / transport / messages / ErrorMessage . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . cassandra . transport . ProtocolException ; <nl> import org . apache . cassandra . transport . ServerError ; <nl> import org . apache . cassandra . thrift . AuthenticationException ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . MD5Digest ; <nl> <nl> / * * <nl> * Message to indicate an error to the client . <nl> @ @ - 91 , 6 + 92 , 12 @ @ public class ErrorMessage extends Message . Response <nl> te = new ReadTimeoutException ( cl , received , blockFor , dataPresent ! = 0 ) ; <nl> } <nl> break ; <nl> + case UNPREPARED : <nl> + { <nl> + MD5Digest id = MD5Digest . wrap ( CBUtil . readBytes ( body ) ) ; <nl> + te = new PreparedQueryNotFoundException ( id ) ; <nl> + } <nl> + break ; <nl> case SYNTAX _ ERROR : <nl> te = new SyntaxException ( msg ) ; <nl> break ; <nl> @ @ - 145 , 6 + 152 , 10 @ @ public class ErrorMessage extends Message . Response <nl> if ( readEx ! = null ) <nl> acb . writeByte ( ( byte ) ( readEx . dataPresent ? 1 : 0 ) ) ; <nl> break ; <nl> + case UNPREPARED : <nl> + PreparedQueryNotFoundException pqnfe = ( PreparedQueryNotFoundException ) msg . error ; <nl> + acb = CBUtil . bytesToCB ( pqnfe . id . bytes ) ; <nl> + break ; <nl> case ALREADY _ EXISTS : <nl> AlreadyExistsException aee = ( AlreadyExistsException ) msg . error ; <nl> acb = ChannelBuffers . wrappedBuffer ( CBUtil . stringToCB ( aee . ksName ) , <nl> diff - - git a / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java b / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java <nl> index 4172862 . . 4400d12 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java <nl> + + + b / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java <nl> @ @ - 25 , 8 + 25 , 9 @ @ import org . jboss . netty . buffer . ChannelBuffer ; <nl> <nl> import org . apache . cassandra . cql3 . CQLStatement ; <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> - import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> + import org . apache . cassandra . exceptions . PreparedQueryNotFoundException ; <nl> import org . apache . cassandra . transport . * ; <nl> + import org . apache . cassandra . utils . MD5Digest ; <nl> <nl> public class ExecuteMessage extends Message . Request <nl> { <nl> @ @ - 34 , 7 + 35 , 7 @ @ public class ExecuteMessage extends Message . Request <nl> { <nl> public ExecuteMessage decode ( ChannelBuffer body ) <nl> { <nl> - int id = body . readInt ( ) ; <nl> + byte [ ] id = CBUtil . readBytes ( body ) ; <nl> <nl> int count = body . readUnsignedShort ( ) ; <nl> List < ByteBuffer > values = new ArrayList < ByteBuffer > ( count ) ; <nl> @ @ - 53 , 7 + 54 , 7 @ @ public class ExecuteMessage extends Message . Request <nl> / / - options <nl> int vs = msg . values . size ( ) ; <nl> CBUtil . BufferBuilder builder = new CBUtil . BufferBuilder ( 2 , 0 , vs ) ; <nl> - builder . add ( CBUtil . intToCB ( msg . statementId ) ) ; <nl> + builder . add ( CBUtil . bytesToCB ( msg . statementId . bytes ) ) ; <nl> builder . add ( CBUtil . shortToCB ( vs ) ) ; <nl> <nl> / / Values <nl> @ @ - 64 , 10 + 65 , 15 @ @ public class ExecuteMessage extends Message . Request <nl> } <nl> } ; <nl> <nl> - public final int statementId ; <nl> + public final MD5Digest statementId ; <nl> public final List < ByteBuffer > values ; <nl> <nl> - public ExecuteMessage ( int statementId , List < ByteBuffer > values ) <nl> + public ExecuteMessage ( byte [ ] statementId , List < ByteBuffer > values ) <nl> + { <nl> + this ( MD5Digest . wrap ( statementId ) , values ) ; <nl> + } <nl> + <nl> + public ExecuteMessage ( MD5Digest statementId , List < ByteBuffer > values ) <nl> { <nl> super ( Message . Type . EXECUTE ) ; <nl> this . statementId = statementId ; <nl> @ @ - 84 , 10 + 90 , 10 @ @ public class ExecuteMessage extends Message . Request <nl> try <nl> { <nl> ServerConnection c = ( ServerConnection ) connection ; <nl> - CQLStatement statement = c . clientState ( ) . getCQL3Prepared ( ) . get ( statementId ) ; <nl> + CQLStatement statement = QueryProcessor . getPrepared ( statementId ) ; <nl> <nl> if ( statement = = null ) <nl> - throw new InvalidRequestException ( String . format ( " Prepared query with ID % d not found " , statementId ) ) ; <nl> + throw new PreparedQueryNotFoundException ( statementId ) ; <nl> <nl> return QueryProcessor . processPrepared ( statement , c . clientState ( ) , values ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / transport / messages / PrepareMessage . java b / src / java / org / apache / cassandra / transport / messages / PrepareMessage . java <nl> index 5c2636a . . 382e834 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / messages / PrepareMessage . java <nl> + + + b / src / java / org / apache / cassandra / transport / messages / PrepareMessage . java <nl> @ @ - 55 , 7 + 55 , 7 @ @ public class PrepareMessage extends Message . Request <nl> { <nl> try <nl> { <nl> - return QueryProcessor . prepare ( query , ( ( ServerConnection ) connection ) . clientState ( ) ) ; <nl> + return QueryProcessor . prepare ( query , ( ( ServerConnection ) connection ) . clientState ( ) , false ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / transport / messages / ResultMessage . java b / src / java / org / apache / cassandra / transport / messages / ResultMessage . java <nl> index 6b63948 . . d5009e9 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / messages / ResultMessage . java <nl> + + + b / src / java / org / apache / cassandra / transport / messages / ResultMessage . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import org . apache . cassandra . db . marshal . TypeParser ; <nl> import org . apache . cassandra . thrift . CqlPreparedResult ; <nl> import org . apache . cassandra . thrift . CqlResult ; <nl> import org . apache . cassandra . thrift . CqlResultType ; <nl> + import org . apache . cassandra . utils . MD5Digest ; <nl> <nl> public abstract class ResultMessage extends Message . Response <nl> { <nl> @ @ - 248 , 30 + 249 , 40 @ @ public abstract class ResultMessage extends Message . Response <nl> { <nl> public ResultMessage decode ( ChannelBuffer body ) <nl> { <nl> - int id = body . readInt ( ) ; <nl> - return new Prepared ( id , ResultSet . Metadata . codec . decode ( body ) ) ; <nl> + MD5Digest id = MD5Digest . wrap ( CBUtil . readBytes ( body ) ) ; <nl> + return new Prepared ( id , - 1 , ResultSet . Metadata . codec . decode ( body ) ) ; <nl> } <nl> <nl> public ChannelBuffer encode ( ResultMessage msg ) <nl> { <nl> assert msg instanceof Prepared ; <nl> Prepared prepared = ( Prepared ) msg ; <nl> - return ChannelBuffers . wrappedBuffer ( CBUtil . intToCB ( prepared . statementId ) , ResultSet . Metadata . codec . encode ( prepared . metadata ) ) ; <nl> + assert prepared . statementId ! = null ; <nl> + return ChannelBuffers . wrappedBuffer ( CBUtil . bytesToCB ( prepared . statementId . bytes ) , ResultSet . Metadata . codec . encode ( prepared . metadata ) ) ; <nl> } <nl> } ; <nl> <nl> - public final int statementId ; <nl> + public final MD5Digest statementId ; <nl> public final ResultSet . Metadata metadata ; <nl> <nl> - public Prepared ( int statementId , List < ColumnSpecification > names ) <nl> + / / statement id for CQL - over - thrift compatibility . The binary protocol ignore that . <nl> + private final int thriftStatementId ; <nl> + <nl> + public Prepared ( MD5Digest statementId , List < ColumnSpecification > names ) <nl> + { <nl> + this ( statementId , - 1 , new ResultSet . Metadata ( names ) ) ; <nl> + } <nl> + <nl> + public static Prepared forThrift ( int statementId , List < ColumnSpecification > names ) <nl> { <nl> - this ( statementId , new ResultSet . Metadata ( names ) ) ; <nl> + return new Prepared ( null , statementId , new ResultSet . Metadata ( names ) ) ; <nl> } <nl> <nl> - private Prepared ( int statementId , ResultSet . Metadata metadata ) <nl> + private Prepared ( MD5Digest statementId , int thriftStatementId , ResultSet . Metadata metadata ) <nl> { <nl> super ( Kind . PREPARED ) ; <nl> this . statementId = statementId ; <nl> + this . thriftStatementId = thriftStatementId ; <nl> this . metadata = metadata ; <nl> } <nl> <nl> @ @ - 294 , 7 + 305 , 7 @ @ public abstract class ResultMessage extends Message . Response <nl> namesString . add ( name . toString ( ) ) ; <nl> typesString . add ( TypeParser . getShortName ( name . type ) ) ; <nl> } <nl> - return new CqlPreparedResult ( statementId , metadata . names . size ( ) ) . setVariable _ types ( typesString ) . setVariable _ names ( namesString ) ; <nl> + return new CqlPreparedResult ( thriftStatementId , metadata . names . size ( ) ) . setVariable _ types ( typesString ) . setVariable _ names ( namesString ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / utils / MD5Digest . java b / src / java / org / apache / cassandra / utils / MD5Digest . java <nl> new file mode 100644 <nl> index 0000000 . . 59c1aba <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / utils / MD5Digest . java <nl> @ @ - 0 , 0 + 1 , 75 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . util . Arrays ; <nl> + <nl> + / * * <nl> + * The result of the computation of an MD5 digest . <nl> + * <nl> + * A MD5 is really just a byte [ ] but arrays are a no go as map keys . We could <nl> + * wrap it in a ByteBuffer but : <nl> + * 1 . MD5Digest is a more explicit name than ByteBuffer to represent a md5 . <nl> + * 2 . Using our own class allows to use our FastByteComparison for equals . <nl> + * / <nl> + public class MD5Digest <nl> + { <nl> + public final byte [ ] bytes ; <nl> + <nl> + private MD5Digest ( byte [ ] bytes ) <nl> + { <nl> + this . bytes = bytes ; <nl> + } <nl> + <nl> + public static MD5Digest wrap ( byte [ ] digest ) <nl> + { <nl> + return new MD5Digest ( digest ) ; <nl> + } <nl> + <nl> + public static MD5Digest compute ( byte [ ] toHash ) <nl> + { <nl> + return new MD5Digest ( FBUtilities . threadLocalMD5Digest ( ) . digest ( toHash ) ) ; <nl> + } <nl> + <nl> + public static MD5Digest compute ( String toHash ) <nl> + { <nl> + return compute ( toHash . getBytes ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public final int hashCode ( ) <nl> + { <nl> + return Arrays . hashCode ( bytes ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public final boolean equals ( Object o ) <nl> + { <nl> + if ( ! ( o instanceof MD5Digest ) ) <nl> + return false ; <nl> + MD5Digest that = ( MD5Digest ) o ; <nl> + / / handles nulls properly <nl> + return FBUtilities . compareUnsigned ( this . bytes , that . bytes , 0 , 0 , this . bytes . length , that . bytes . length ) = = 0 ; <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return Hex . bytesToHex ( bytes ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py 
 index e95df9f . . fe1786a 100644 
 - - - a / pylib / cqlshlib / formatting . py 
 + + + b / pylib / cqlshlib / formatting . py 
 @ @ - 270 , 6 + 270 , 7 @ @ def format _ value _ set ( val , encoding , colormap , date _ time _ format , float _ precision , 
 date _ time _ format , float _ precision , nullval ) 
 formatter _ for ( ' frozenset ' ) ( format _ value _ set ) 
 formatter _ for ( ' sortedset ' ) ( format _ value _ set ) 
 + formatter _ for ( ' SortedSet ' ) ( format _ value _ set ) 
 
 
 @ formatter _ for ( ' dict ' )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7314f99 . . b70c412 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 3 , 6 + 3 , 7 @ @ 
 * adjust blockFor calculation to account for pending ranges due to node 
 movement ( CASSANDRA - 833 ) 
 * Change CQL version to 3 . 0 . 0 and stop accepting 3 . 0 . 0 - beta1 ( CASSANDRA - 4649 ) 
 + * Make prepared statement global instead of per connection ( CASSANDRA - 4449 ) 
 
 1 . 2 - beta1 
 * add atomic _ batch _ mutate ( CASSANDRA - 4542 , - 4635 ) 
 diff - - git a / doc / native _ protocol . spec b / doc / native _ protocol . spec 
 index 0dd5c14 . . 9a44697 100644 
 - - - a / doc / native _ protocol . spec 
 + + + b / doc / native _ protocol . spec 
 @ @ - 520 , 3 + 520 , 7 @ @ Table of Contents 
 already exists . If the query was attempting to create a 
 keyspace , < table > will be present but will be the empty 
 string . 
 + 0x2500 Unprepared : Can be thrown while a prepared statement tries to be 
 + executed if the provide prepared statement ID is not known by 
 + this host . The rest of the ERROR message body will be [ bytes ] 
 + representing the unknown ID . 
 diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index 146f775 . . 856f6fd 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . cql3 ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 + import com . googlecode . concurrentlinkedhashmap . ConcurrentLinkedHashMap ; 
 import org . antlr . runtime . * ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . cassandra . exceptions . * ; 
 import org . apache . cassandra . service . ClientState ; 
 import org . apache . cassandra . thrift . SchemaDisagreementException ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 + import org . apache . cassandra . utils . MD5Digest ; 
 import org . apache . cassandra . utils . SemanticVersion ; 
 
 public class QueryProcessor 
 @ @ - 42 , 6 + 44 , 26 @ @ public class QueryProcessor 
 
 private static final Logger logger = LoggerFactory . getLogger ( QueryProcessor . class ) ; 
 
 + public static final int MAX _ CACHE _ PREPARED = 100000 ; / / Enough to keep buggy clients from OOM ' ing us 
 + private static final Map < MD5Digest , CQLStatement > preparedStatements = new ConcurrentLinkedHashMap . Builder < MD5Digest , CQLStatement > ( ) 
 + . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED ) 
 + . build ( ) ; 
 + 
 + private static final Map < Integer , CQLStatement > thriftPreparedStatements = new ConcurrentLinkedHashMap . Builder < Integer , CQLStatement > ( ) 
 + . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED ) 
 + . build ( ) ; 
 + 
 + 
 + public static CQLStatement getPrepared ( MD5Digest id ) 
 + { 
 + return preparedStatements . get ( id ) ; 
 + } 
 + 
 + public static CQLStatement getPrepared ( Integer id ) 
 + { 
 + return thriftPreparedStatements . get ( id ) ; 
 + } 
 + 
 public static void validateKey ( ByteBuffer key ) throws InvalidRequestException 
 { 
 if ( key = = null | | key . remaining ( ) = = 0 ) 
 @ @ - 151 , 20 + 173 , 38 @ @ public class QueryProcessor 
 } 
 } 
 
 - public static ResultMessage . Prepared prepare ( String queryString , ClientState clientState ) 
 + public static ResultMessage . Prepared prepare ( String queryString , ClientState clientState , boolean forThrift ) 
 throws RequestValidationException 
 { 
 logger . trace ( " CQL QUERY : { } " , queryString ) ; 
 
 ParsedStatement . Prepared prepared = getStatement ( queryString , clientState ) ; 
 - int statementId = makeStatementId ( queryString ) ; 
 - clientState . getCQL3Prepared ( ) . put ( statementId , prepared . statement ) ; 
 - logger . trace ( String . format ( " Stored prepared statement # % d with % d bind markers " , 
 - statementId , 
 - prepared . statement . getBoundsTerms ( ) ) ) ; 
 + ResultMessage . Prepared msg = storePreparedStatement ( queryString , clientState , prepared , forThrift ) ; 
 
 assert prepared . statement . getBoundsTerms ( ) = = prepared . boundNames . size ( ) ; 
 - return new ResultMessage . Prepared ( statementId , prepared . boundNames ) ; 
 + return msg ; 
 + } 
 + 
 + private static ResultMessage . Prepared storePreparedStatement ( String queryString , ClientState clientState , ParsedStatement . Prepared prepared , boolean forThrift ) 
 + { 
 + if ( forThrift ) 
 + { 
 + int statementId = queryString . hashCode ( ) ; 
 + thriftPreparedStatements . put ( statementId , prepared . statement ) ; 
 + logger . trace ( String . format ( " Stored prepared statement # % d with % d bind markers " , 
 + statementId , 
 + prepared . statement . getBoundsTerms ( ) ) ) ; 
 + return ResultMessage . Prepared . forThrift ( statementId , prepared . boundNames ) ; 
 + } 
 + else 
 + { 
 + MD5Digest statementId = MD5Digest . compute ( queryString ) ; 
 + logger . trace ( String . format ( " Stored prepared statement % s with % d bind markers " , 
 + statementId , 
 + prepared . statement . getBoundsTerms ( ) ) ) ; 
 + preparedStatements . put ( statementId , prepared . statement ) ; 
 + return new ResultMessage . Prepared ( statementId , prepared . boundNames ) ; 
 + } 
 } 
 
 public static ResultMessage processPrepared ( CQLStatement statement , ClientState clientState , List < ByteBuffer > variables ) 
 @ @ - 188 , 12 + 228 , 6 @ @ public class QueryProcessor 
 return processStatement ( statement , clientState , variables ) ; 
 } 
 
 - private static final int makeStatementId ( String cql ) 
 - { 
 - / / use the hash of the string till something better is provided 
 - return cql . hashCode ( ) ; 
 - } 
 - 
 private static ParsedStatement . Prepared getStatement ( String queryStr , ClientState clientState ) 
 throws RequestValidationException 
 { 
 diff - - git a / src / java / org / apache / cassandra / exceptions / ExceptionCode . java b / src / java / org / apache / cassandra / exceptions / ExceptionCode . java 
 index 13fcc6a . . e8dfb4e 100644 
 - - - a / src / java / org / apache / cassandra / exceptions / ExceptionCode . java 
 + + + b / src / java / org / apache / cassandra / exceptions / ExceptionCode . java 
 @ @ - 43 , 7 + 43 , 8 @ @ public enum ExceptionCode 
 UNAUTHORIZED ( 0x2100 ) , 
 INVALID ( 0x2200 ) , 
 CONFIG _ ERROR ( 0x2300 ) , 
 - ALREADY _ EXISTS ( 0x2400 ) ; 
 + ALREADY _ EXISTS ( 0x2400 ) , 
 + UNPREPARED ( 0x2500 ) ; 
 
 public final int value ; 
 private static final Map < Integer , ExceptionCode > valueToCode = new HashMap < Integer , ExceptionCode > ( ExceptionCode . values ( ) . length ) ; 
 diff - - git a / src / java / org / apache / cassandra / exceptions / PreparedQueryNotFoundException . java b / src / java / org / apache / cassandra / exceptions / PreparedQueryNotFoundException . java 
 new file mode 100644 
 index 0000000 . . 07502c8 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / exceptions / PreparedQueryNotFoundException . java 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . exceptions ; 
 + 
 + import org . apache . cassandra . cql3 . QueryProcessor ; 
 + import org . apache . cassandra . utils . MD5Digest ; 
 + 
 + public class PreparedQueryNotFoundException extends RequestValidationException 
 + { 
 + public final MD5Digest id ; 
 + 
 + public PreparedQueryNotFoundException ( MD5Digest id ) 
 + { 
 + super ( ExceptionCode . UNPREPARED , makeMsg ( id ) ) ; 
 + this . id = id ; 
 + } 
 + 
 + private static String makeMsg ( MD5Digest id ) 
 + { 
 + return String . format ( " Prepared query with ID % d not found " + 
 + " ( either the query was not prepared on this host ( maybe the host has been restarted ? ) " + 
 + " or you have prepared more than % d queries and queries % d has been evicted from the internal cache ) " , 
 + id , QueryProcessor . MAX _ CACHE _ PREPARED , id ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / service / ClientState . java b / src / java / org / apache / cassandra / service / ClientState . java 
 index ef640af . . 6266a3b 100644 
 - - - a / src / java / org / apache / cassandra / service / ClientState . java 
 + + + b / src / java / org / apache / cassandra / service / ClientState . java 
 @ @ - 65 , 12 + 65 , 6 @ @ public class ClientState 
 } 
 } ; 
 
 - private final Map < Integer , org . apache . cassandra . cql3 . CQLStatement > cql3Prepared = new LinkedHashMap < Integer , org . apache . cassandra . cql3 . CQLStatement > ( 16 , 0 . 75f , true ) { 
 - protected boolean removeEldestEntry ( Map . Entry < Integer , org . apache . cassandra . cql3 . CQLStatement > eldest ) { 
 - return size ( ) > MAX _ CACHE _ PREPARED ; 
 - } 
 - } ; 
 - 
 private long clock ; 
 
 / / internalCall is used to mark ClientState as used by some internal component 
 @ @ - 96 , 11 + 90 , 6 @ @ public class ClientState 
 return prepared ; 
 } 
 
 - public Map < Integer , org . apache . cassandra . cql3 . CQLStatement > getCQL3Prepared ( ) 
 - { 
 - return cql3Prepared ; 
 - } 
 - 
 public String getRawKeyspace ( ) 
 { 
 return keyspace ; 
 @ @ - 191 , 7 + 180 , 6 @ @ public class ClientState 
 preparedTracingSession = null ; 
 resourceClear ( ) ; 
 prepared . clear ( ) ; 
 - cql3Prepared . clear ( ) ; 
 } 
 
 public void hasKeyspaceAccess ( String keyspace , Permission perm ) throws UnauthorizedException , InvalidRequestException 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 index 73ecd29 . . 4ab19bb 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 @ @ - 1705 , 7 + 1705 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 if ( cState . getCQLVersion ( ) . major = = 2 ) 
 return QueryProcessor . prepare ( queryString , cState ) ; 
 else 
 - return org . apache . cassandra . cql3 . QueryProcessor . prepare ( queryString , cState ) . toThriftPreparedResult ( ) ; 
 + return org . apache . cassandra . cql3 . QueryProcessor . prepare ( queryString , cState , true ) . toThriftPreparedResult ( ) ; 
 } 
 catch ( RequestValidationException e ) 
 { 
 @ @ - 1741 , 10 + 1741 , 13 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 else 
 { 
 - org . apache . cassandra . cql3 . CQLStatement statement = cState . getCQL3Prepared ( ) . get ( itemId ) ; 
 + org . apache . cassandra . cql3 . CQLStatement statement = org . apache . cassandra . cql3 . QueryProcessor . getPrepared ( itemId ) ; 
 
 if ( statement = = null ) 
 - throw new InvalidRequestException ( String . format ( " Prepared query with ID % d not found " , itemId ) ) ; 
 + throw new InvalidRequestException ( String . format ( " Prepared query with ID % d not found " + 
 + " ( either the query was not prepared on this host ( maybe the host has been restarted ? ) " + 
 + " or you have prepared more than % d queries and queries % d has been evicted from the internal cache ) " , 
 + itemId , org . apache . cassandra . cql3 . QueryProcessor . MAX _ CACHE _ PREPARED , itemId ) ) ; 
 logger . trace ( " Retrieved prepared statement # { } with { } bind markers " , itemId , 
 statement . getBoundsTerms ( ) ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / transport / CBUtil . java b / src / java / org / apache / cassandra / transport / CBUtil . java 
 index b977f35 . . fe8863a 100644 
 - - - a / src / java / org / apache / cassandra / transport / CBUtil . java 
 + + + b / src / java / org / apache / cassandra / transport / CBUtil . java 
 @ @ - 111 , 6 + 111 , 26 @ @ public abstract class CBUtil 
 return ChannelBuffers . wrappedBuffer ( shortToCB ( bytes . readableBytes ( ) ) , bytes ) ; 
 } 
 
 + public static ChannelBuffer bytesToCB ( byte [ ] bytes ) 
 + { 
 + return ChannelBuffers . wrappedBuffer ( shortToCB ( bytes . length ) , ChannelBuffers . wrappedBuffer ( bytes ) ) ; 
 + } 
 + 
 + public static byte [ ] readBytes ( ChannelBuffer cb ) 
 + { 
 + try 
 + { 
 + int length = cb . readUnsignedShort ( ) ; 
 + byte [ ] bytes = new byte [ length ] ; 
 + cb . readBytes ( bytes ) ; 
 + return bytes ; 
 + } 
 + catch ( IndexOutOfBoundsException e ) 
 + { 
 + throw new ProtocolException ( " Not enough bytes to read a byte array preceded by it ' s 2 bytes length " ) ; 
 + } 
 + } 
 + 
 public static ChannelBuffer longStringToCB ( String str ) 
 { 
 ChannelBuffer bytes = bytes ( str ) ; 
 diff - - git a / src / java / org / apache / cassandra / transport / Client . java b / src / java / org / apache / cassandra / transport / Client . java 
 index b9e00fa . . 3b4ace9 100644 
 - - - a / src / java / org / apache / cassandra / transport / Client . java 
 + + + b / src / java / org / apache / cassandra / transport / Client . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import com . google . common . base . Splitter ; 
 
 import org . apache . cassandra . transport . messages . * ; 
 import org . apache . cassandra . db . marshal . * ; 
 + import org . apache . cassandra . utils . Hex ; 
 
 public class Client extends SimpleClient 
 { 
 @ @ - 109 , 7 + 110 , 7 @ @ public class Client extends SimpleClient 
 { 
 try 
 { 
 - int id = Integer . parseInt ( iter . next ( ) ) ; 
 + byte [ ] id = Hex . hexToBytes ( iter . next ( ) ) ; 
 List < ByteBuffer > values = new ArrayList < ByteBuffer > ( ) ; 
 while ( iter . hasNext ( ) ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / transport / SimpleClient . java b / src / java / org / apache / cassandra / transport / SimpleClient . java 
 index ea0a3df . . 8132e65 100644 
 - - - a / src / java / org / apache / cassandra / transport / SimpleClient . java 
 + + + b / src / java / org / apache / cassandra / transport / SimpleClient . java 
 @ @ - 126 , 7 + 126 , 7 @ @ public class SimpleClient 
 return ( ResultMessage . Prepared ) msg ; 
 } 
 
 - public ResultMessage executePrepared ( int statementId , List < ByteBuffer > values ) 
 + public ResultMessage executePrepared ( byte [ ] statementId , List < ByteBuffer > values ) 
 { 
 Message . Response msg = execute ( new ExecuteMessage ( statementId , values ) ) ; 
 assert msg instanceof ResultMessage ; 
 diff - - git a / src / java / org / apache / cassandra / transport / messages / ErrorMessage . java b / src / java / org / apache / cassandra / transport / messages / ErrorMessage . java 
 index ecb387b . . 8ed8e94 100644 
 - - - a / src / java / org / apache / cassandra / transport / messages / ErrorMessage . java 
 + + + b / src / java / org / apache / cassandra / transport / messages / ErrorMessage . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . cassandra . transport . ProtocolException ; 
 import org . apache . cassandra . transport . ServerError ; 
 import org . apache . cassandra . thrift . AuthenticationException ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . MD5Digest ; 
 
 / * * 
 * Message to indicate an error to the client . 
 @ @ - 91 , 6 + 92 , 12 @ @ public class ErrorMessage extends Message . Response 
 te = new ReadTimeoutException ( cl , received , blockFor , dataPresent ! = 0 ) ; 
 } 
 break ; 
 + case UNPREPARED : 
 + { 
 + MD5Digest id = MD5Digest . wrap ( CBUtil . readBytes ( body ) ) ; 
 + te = new PreparedQueryNotFoundException ( id ) ; 
 + } 
 + break ; 
 case SYNTAX _ ERROR : 
 te = new SyntaxException ( msg ) ; 
 break ; 
 @ @ - 145 , 6 + 152 , 10 @ @ public class ErrorMessage extends Message . Response 
 if ( readEx ! = null ) 
 acb . writeByte ( ( byte ) ( readEx . dataPresent ? 1 : 0 ) ) ; 
 break ; 
 + case UNPREPARED : 
 + PreparedQueryNotFoundException pqnfe = ( PreparedQueryNotFoundException ) msg . error ; 
 + acb = CBUtil . bytesToCB ( pqnfe . id . bytes ) ; 
 + break ; 
 case ALREADY _ EXISTS : 
 AlreadyExistsException aee = ( AlreadyExistsException ) msg . error ; 
 acb = ChannelBuffers . wrappedBuffer ( CBUtil . stringToCB ( aee . ksName ) , 
 diff - - git a / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java b / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java 
 index 4172862 . . 4400d12 100644 
 - - - a / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java 
 + + + b / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java 
 @ @ - 25 , 8 + 25 , 9 @ @ import org . jboss . netty . buffer . ChannelBuffer ; 
 
 import org . apache . cassandra . cql3 . CQLStatement ; 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 - import org . apache . cassandra . exceptions . InvalidRequestException ; 
 + import org . apache . cassandra . exceptions . PreparedQueryNotFoundException ; 
 import org . apache . cassandra . transport . * ; 
 + import org . apache . cassandra . utils . MD5Digest ; 
 
 public class ExecuteMessage extends Message . Request 
 { 
 @ @ - 34 , 7 + 35 , 7 @ @ public class ExecuteMessage extends Message . Request 
 { 
 public ExecuteMessage decode ( ChannelBuffer body ) 
 { 
 - int id = body . readInt ( ) ; 
 + byte [ ] id = CBUtil . readBytes ( body ) ; 
 
 int count = body . readUnsignedShort ( ) ; 
 List < ByteBuffer > values = new ArrayList < ByteBuffer > ( count ) ; 
 @ @ - 53 , 7 + 54 , 7 @ @ public class ExecuteMessage extends Message . Request 
 / / - options 
 int vs = msg . values . size ( ) ; 
 CBUtil . BufferBuilder builder = new CBUtil . BufferBuilder ( 2 , 0 , vs ) ; 
 - builder . add ( CBUtil . intToCB ( msg . statementId ) ) ; 
 + builder . add ( CBUtil . bytesToCB ( msg . statementId . bytes ) ) ; 
 builder . add ( CBUtil . shortToCB ( vs ) ) ; 
 
 / / Values 
 @ @ - 64 , 10 + 65 , 15 @ @ public class ExecuteMessage extends Message . Request 
 } 
 } ; 
 
 - public final int statementId ; 
 + public final MD5Digest statementId ; 
 public final List < ByteBuffer > values ; 
 
 - public ExecuteMessage ( int statementId , List < ByteBuffer > values ) 
 + public ExecuteMessage ( byte [ ] statementId , List < ByteBuffer > values ) 
 + { 
 + this ( MD5Digest . wrap ( statementId ) , values ) ; 
 + } 
 + 
 + public ExecuteMessage ( MD5Digest statementId , List < ByteBuffer > values ) 
 { 
 super ( Message . Type . EXECUTE ) ; 
 this . statementId = statementId ; 
 @ @ - 84 , 10 + 90 , 10 @ @ public class ExecuteMessage extends Message . Request 
 try 
 { 
 ServerConnection c = ( ServerConnection ) connection ; 
 - CQLStatement statement = c . clientState ( ) . getCQL3Prepared ( ) . get ( statementId ) ; 
 + CQLStatement statement = QueryProcessor . getPrepared ( statementId ) ; 
 
 if ( statement = = null ) 
 - throw new InvalidRequestException ( String . format ( " Prepared query with ID % d not found " , statementId ) ) ; 
 + throw new PreparedQueryNotFoundException ( statementId ) ; 
 
 return QueryProcessor . processPrepared ( statement , c . clientState ( ) , values ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / transport / messages / PrepareMessage . java b / src / java / org / apache / cassandra / transport / messages / PrepareMessage . java 
 index 5c2636a . . 382e834 100644 
 - - - a / src / java / org / apache / cassandra / transport / messages / PrepareMessage . java 
 + + + b / src / java / org / apache / cassandra / transport / messages / PrepareMessage . java 
 @ @ - 55 , 7 + 55 , 7 @ @ public class PrepareMessage extends Message . Request 
 { 
 try 
 { 
 - return QueryProcessor . prepare ( query , ( ( ServerConnection ) connection ) . clientState ( ) ) ; 
 + return QueryProcessor . prepare ( query , ( ( ServerConnection ) connection ) . clientState ( ) , false ) ; 
 } 
 catch ( Exception e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / transport / messages / ResultMessage . java b / src / java / org / apache / cassandra / transport / messages / ResultMessage . java 
 index 6b63948 . . d5009e9 100644 
 - - - a / src / java / org / apache / cassandra / transport / messages / ResultMessage . java 
 + + + b / src / java / org / apache / cassandra / transport / messages / ResultMessage . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import org . apache . cassandra . db . marshal . TypeParser ; 
 import org . apache . cassandra . thrift . CqlPreparedResult ; 
 import org . apache . cassandra . thrift . CqlResult ; 
 import org . apache . cassandra . thrift . CqlResultType ; 
 + import org . apache . cassandra . utils . MD5Digest ; 
 
 public abstract class ResultMessage extends Message . Response 
 { 
 @ @ - 248 , 30 + 249 , 40 @ @ public abstract class ResultMessage extends Message . Response 
 { 
 public ResultMessage decode ( ChannelBuffer body ) 
 { 
 - int id = body . readInt ( ) ; 
 - return new Prepared ( id , ResultSet . Metadata . codec . decode ( body ) ) ; 
 + MD5Digest id = MD5Digest . wrap ( CBUtil . readBytes ( body ) ) ; 
 + return new Prepared ( id , - 1 , ResultSet . Metadata . codec . decode ( body ) ) ; 
 } 
 
 public ChannelBuffer encode ( ResultMessage msg ) 
 { 
 assert msg instanceof Prepared ; 
 Prepared prepared = ( Prepared ) msg ; 
 - return ChannelBuffers . wrappedBuffer ( CBUtil . intToCB ( prepared . statementId ) , ResultSet . Metadata . codec . encode ( prepared . metadata ) ) ; 
 + assert prepared . statementId ! = null ; 
 + return ChannelBuffers . wrappedBuffer ( CBUtil . bytesToCB ( prepared . statementId . bytes ) , ResultSet . Metadata . codec . encode ( prepared . metadata ) ) ; 
 } 
 } ; 
 
 - public final int statementId ; 
 + public final MD5Digest statementId ; 
 public final ResultSet . Metadata metadata ; 
 
 - public Prepared ( int statementId , List < ColumnSpecification > names ) 
 + / / statement id for CQL - over - thrift compatibility . The binary protocol ignore that . 
 + private final int thriftStatementId ; 
 + 
 + public Prepared ( MD5Digest statementId , List < ColumnSpecification > names ) 
 + { 
 + this ( statementId , - 1 , new ResultSet . Metadata ( names ) ) ; 
 + } 
 + 
 + public static Prepared forThrift ( int statementId , List < ColumnSpecification > names ) 
 { 
 - this ( statementId , new ResultSet . Metadata ( names ) ) ; 
 + return new Prepared ( null , statementId , new ResultSet . Metadata ( names ) ) ; 
 } 
 
 - private Prepared ( int statementId , ResultSet . Metadata metadata ) 
 + private Prepared ( MD5Digest statementId , int thriftStatementId , ResultSet . Metadata metadata ) 
 { 
 super ( Kind . PREPARED ) ; 
 this . statementId = statementId ; 
 + this . thriftStatementId = thriftStatementId ; 
 this . metadata = metadata ; 
 } 
 
 @ @ - 294 , 7 + 305 , 7 @ @ public abstract class ResultMessage extends Message . Response 
 namesString . add ( name . toString ( ) ) ; 
 typesString . add ( TypeParser . getShortName ( name . type ) ) ; 
 } 
 - return new CqlPreparedResult ( statementId , metadata . names . size ( ) ) . setVariable _ types ( typesString ) . setVariable _ names ( namesString ) ; 
 + return new CqlPreparedResult ( thriftStatementId , metadata . names . size ( ) ) . setVariable _ types ( typesString ) . setVariable _ names ( namesString ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / utils / MD5Digest . java b / src / java / org / apache / cassandra / utils / MD5Digest . java 
 new file mode 100644 
 index 0000000 . . 59c1aba 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / utils / MD5Digest . java 
 @ @ - 0 , 0 + 1 , 75 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . util . Arrays ; 
 + 
 + / * * 
 + * The result of the computation of an MD5 digest . 
 + * 
 + * A MD5 is really just a byte [ ] but arrays are a no go as map keys . We could 
 + * wrap it in a ByteBuffer but : 
 + * 1 . MD5Digest is a more explicit name than ByteBuffer to represent a md5 . 
 + * 2 . Using our own class allows to use our FastByteComparison for equals . 
 + * / 
 + public class MD5Digest 
 + { 
 + public final byte [ ] bytes ; 
 + 
 + private MD5Digest ( byte [ ] bytes ) 
 + { 
 + this . bytes = bytes ; 
 + } 
 + 
 + public static MD5Digest wrap ( byte [ ] digest ) 
 + { 
 + return new MD5Digest ( digest ) ; 
 + } 
 + 
 + public static MD5Digest compute ( byte [ ] toHash ) 
 + { 
 + return new MD5Digest ( FBUtilities . threadLocalMD5Digest ( ) . digest ( toHash ) ) ; 
 + } 
 + 
 + public static MD5Digest compute ( String toHash ) 
 + { 
 + return compute ( toHash . getBytes ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public final int hashCode ( ) 
 + { 
 + return Arrays . hashCode ( bytes ) ; 
 + } 
 + 
 + @ Override 
 + public final boolean equals ( Object o ) 
 + { 
 + if ( ! ( o instanceof MD5Digest ) ) 
 + return false ; 
 + MD5Digest that = ( MD5Digest ) o ; 
 + / / handles nulls properly 
 + return FBUtilities . compareUnsigned ( this . bytes , that . bytes , 0 , 0 , this . bytes . length , that . bytes . length ) = = 0 ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return Hex . bytesToHex ( bytes ) ; 
 + } 
 + }
