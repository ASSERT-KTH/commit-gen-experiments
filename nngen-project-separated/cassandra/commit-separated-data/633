BLEU SCORE: 0.018738883683389617

TEST MSG: Really fix CM . setConcurrentCompactors , include test coverage for such
GENERATED MSG: Reset SSTII in EchoedRow iterator ( see CASSANDRA - 2653 )

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 148a4fb . . 2f3b32f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 1865 , 8 + 1865 , 18 @ @ public class CompactionManager implements CompactionManagerMBean <nl> <nl> public void setConcurrentCompactors ( int value ) <nl> { <nl> - executor . setMaximumPoolSize ( value ) ; <nl> - executor . setCorePoolSize ( value ) ; <nl> + if ( value > executor . getCorePoolSize ( ) ) <nl> + { <nl> + / / we are increasing the value <nl> + executor . setMaximumPoolSize ( value ) ; <nl> + executor . setCorePoolSize ( value ) ; <nl> + } <nl> + else if ( value < executor . getCorePoolSize ( ) ) <nl> + { <nl> + / / we are reducing the value <nl> + executor . setCorePoolSize ( value ) ; <nl> + executor . setMaximumPoolSize ( value ) ; <nl> + } <nl> } <nl> <nl> public int getCoreCompactorThreads ( ) <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java <nl> index 198b01b . . cc81263 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java <nl> @ @ - 641 , 4 + 641 , 15 @ @ public class CompactionsTest <nl> 200 , 209 , <nl> 300 , 301 ) ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testConcurrencySettings ( ) <nl> + { <nl> + CompactionManager . instance . setConcurrentCompactors ( 2 ) ; <nl> + assertEquals ( 2 , CompactionManager . instance . getCoreCompactorThreads ( ) ) ; <nl> + CompactionManager . instance . setConcurrentCompactors ( 3 ) ; <nl> + assertEquals ( 3 , CompactionManager . instance . getCoreCompactorThreads ( ) ) ; <nl> + CompactionManager . instance . setConcurrentCompactors ( 1 ) ; <nl> + assertEquals ( 1 , CompactionManager . instance . getCoreCompactorThreads ( ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1081122 . . cfdc0bd 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 43 , 6 + 43 , 7 @ @ <nl> * fix exception adding validators to non - string columns ( CASSANDRA - 2696 ) <nl> * avoid instantiating DatabaseDescriptor in JDBC ( CASSANDRA - 2694 ) <nl> * fix potential stack overflow during compaction ( CASSANDRA - 2626 ) <nl> + * reset underlying iterator in EchoedRow constructor ( CASSANDRA - 2653 ) <nl> <nl> <nl> 0 . 8 . 0 - rc1 <nl> diff - - git a / src / java / org / apache / cassandra / db / EchoedRow . java b / src / java / org / apache / cassandra / db / EchoedRow . java <nl> index f52e2bb . . b6abb4a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / EchoedRow . java <nl> + + + b / src / java / org / apache / cassandra / db / EchoedRow . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ public class EchoedRow extends AbstractCompactedRow <nl> { <nl> super ( row . getKey ( ) ) ; <nl> this . row = row ; <nl> + / / Reset SSTableIdentityIterator because we have not guarantee the filePointer hasn ' t moved since the Iterator was built <nl> + row . reset ( ) ; <nl> } <nl> <nl> public void write ( DataOutput out ) throws IOException <nl> diff - - git a / test / unit / org / apache / cassandra / db / CompactionsTest . java b / test / unit / org / apache / cassandra / db / CompactionsTest . java <nl> index 4e6a6b6 . . f2322f4 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CompactionsTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CompactionsTest . java <nl> @ @ - 153 , 4 + 153 , 34 @ @ public class CompactionsTest extends CleanupHelper <nl> buckets = CompactionManager . getBuckets ( pairs , 10 ) ; / / notice the min is 10 <nl> assertEquals ( 1 , buckets . size ( ) ) ; <nl> } <nl> + @ Test <nl> + public void testEchoedRow ( ) throws IOException , ExecutionException , InterruptedException <nl> + { <nl> + / / This test check that EchoedRow doesn ' t skipp rows : see CASSANDRA - 2653 <nl> + <nl> + Table table = Table . open ( TABLE1 ) ; <nl> + ColumnFamilyStore store = table . getColumnFamilyStore ( " Standard2 " ) ; <nl> + <nl> + / / disable compaction while flushing <nl> + store . disableAutoCompaction ( ) ; <nl> + <nl> + / / Insert 4 keys in two sstables . We need the sstables to have 2 rows <nl> + / / at least to trigger what was causing CASSANDRA - 2653 <nl> + for ( int i = 1 ; i < 5 ; i + + ) <nl> + { <nl> + DecoratedKey key = Util . dk ( String . valueOf ( i ) ) ; <nl> + RowMutation rm = new RowMutation ( TABLE1 , key . key ) ; <nl> + rm . add ( new QueryPath ( " Standard2 " , null , ByteBufferUtil . bytes ( String . valueOf ( i ) ) ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , i ) ; <nl> + rm . apply ( ) ; <nl> + <nl> + if ( i % 2 = = 0 ) <nl> + store . forceBlockingFlush ( ) ; <nl> + } <nl> + <nl> + / / Force compaction . Since each row is in only one sstable , we will be using EchoedRow . <nl> + CompactionManager . instance . performMajor ( store ) ; <nl> + <nl> + / / Now assert we do have the two keys <nl> + assertEquals ( 4 , Util . getRangeSlice ( store ) . size ( ) ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 148a4fb . . 2f3b32f 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 1865 , 8 + 1865 , 18 @ @ public class CompactionManager implements CompactionManagerMBean 
 
 public void setConcurrentCompactors ( int value ) 
 { 
 - executor . setMaximumPoolSize ( value ) ; 
 - executor . setCorePoolSize ( value ) ; 
 + if ( value > executor . getCorePoolSize ( ) ) 
 + { 
 + / / we are increasing the value 
 + executor . setMaximumPoolSize ( value ) ; 
 + executor . setCorePoolSize ( value ) ; 
 + } 
 + else if ( value < executor . getCorePoolSize ( ) ) 
 + { 
 + / / we are reducing the value 
 + executor . setCorePoolSize ( value ) ; 
 + executor . setMaximumPoolSize ( value ) ; 
 + } 
 } 
 
 public int getCoreCompactorThreads ( ) 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java 
 index 198b01b . . cc81263 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java 
 @ @ - 641 , 4 + 641 , 15 @ @ public class CompactionsTest 
 200 , 209 , 
 300 , 301 ) ) ) ; 
 } 
 + 
 + @ Test 
 + public void testConcurrencySettings ( ) 
 + { 
 + CompactionManager . instance . setConcurrentCompactors ( 2 ) ; 
 + assertEquals ( 2 , CompactionManager . instance . getCoreCompactorThreads ( ) ) ; 
 + CompactionManager . instance . setConcurrentCompactors ( 3 ) ; 
 + assertEquals ( 3 , CompactionManager . instance . getCoreCompactorThreads ( ) ) ; 
 + CompactionManager . instance . setConcurrentCompactors ( 1 ) ; 
 + assertEquals ( 1 , CompactionManager . instance . getCoreCompactorThreads ( ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1081122 . . cfdc0bd 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 43 , 6 + 43 , 7 @ @ 
 * fix exception adding validators to non - string columns ( CASSANDRA - 2696 ) 
 * avoid instantiating DatabaseDescriptor in JDBC ( CASSANDRA - 2694 ) 
 * fix potential stack overflow during compaction ( CASSANDRA - 2626 ) 
 + * reset underlying iterator in EchoedRow constructor ( CASSANDRA - 2653 ) 
 
 
 0 . 8 . 0 - rc1 
 diff - - git a / src / java / org / apache / cassandra / db / EchoedRow . java b / src / java / org / apache / cassandra / db / EchoedRow . java 
 index f52e2bb . . b6abb4a 100644 
 - - - a / src / java / org / apache / cassandra / db / EchoedRow . java 
 + + + b / src / java / org / apache / cassandra / db / EchoedRow . java 
 @ @ - 19 , 6 + 19 , 8 @ @ public class EchoedRow extends AbstractCompactedRow 
 { 
 super ( row . getKey ( ) ) ; 
 this . row = row ; 
 + / / Reset SSTableIdentityIterator because we have not guarantee the filePointer hasn ' t moved since the Iterator was built 
 + row . reset ( ) ; 
 } 
 
 public void write ( DataOutput out ) throws IOException 
 diff - - git a / test / unit / org / apache / cassandra / db / CompactionsTest . java b / test / unit / org / apache / cassandra / db / CompactionsTest . java 
 index 4e6a6b6 . . f2322f4 100644 
 - - - a / test / unit / org / apache / cassandra / db / CompactionsTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CompactionsTest . java 
 @ @ - 153 , 4 + 153 , 34 @ @ public class CompactionsTest extends CleanupHelper 
 buckets = CompactionManager . getBuckets ( pairs , 10 ) ; / / notice the min is 10 
 assertEquals ( 1 , buckets . size ( ) ) ; 
 } 
 + @ Test 
 + public void testEchoedRow ( ) throws IOException , ExecutionException , InterruptedException 
 + { 
 + / / This test check that EchoedRow doesn ' t skipp rows : see CASSANDRA - 2653 
 + 
 + Table table = Table . open ( TABLE1 ) ; 
 + ColumnFamilyStore store = table . getColumnFamilyStore ( " Standard2 " ) ; 
 + 
 + / / disable compaction while flushing 
 + store . disableAutoCompaction ( ) ; 
 + 
 + / / Insert 4 keys in two sstables . We need the sstables to have 2 rows 
 + / / at least to trigger what was causing CASSANDRA - 2653 
 + for ( int i = 1 ; i < 5 ; i + + ) 
 + { 
 + DecoratedKey key = Util . dk ( String . valueOf ( i ) ) ; 
 + RowMutation rm = new RowMutation ( TABLE1 , key . key ) ; 
 + rm . add ( new QueryPath ( " Standard2 " , null , ByteBufferUtil . bytes ( String . valueOf ( i ) ) ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , i ) ; 
 + rm . apply ( ) ; 
 + 
 + if ( i % 2 = = 0 ) 
 + store . forceBlockingFlush ( ) ; 
 + } 
 + 
 + / / Force compaction . Since each row is in only one sstable , we will be using EchoedRow . 
 + CompactionManager . instance . performMajor ( store ) ; 
 + 
 + / / Now assert we do have the two keys 
 + assertEquals ( 4 , Util . getRangeSlice ( store ) . size ( ) ) ; 
 + } 
 }
