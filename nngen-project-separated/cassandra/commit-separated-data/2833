BLEU SCORE: 0.028465126651392333

TEST MSG: make log parms / markers the same
GENERATED MSG: add thrift - server and LMAX Disruptor licences

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index d497a38 . . 60e9c25 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 531 , 7 + 531 , 7 @ @ public class CassandraDaemon <nl> } <nl> if ( forceAfter > 0 & & totalPolls > forceAfter ) <nl> { <nl> - logger . warn ( " Gossip not settled but startup forced by cassandra . skip _ wait _ for _ gossip _ to _ settle . Gossip Stage active / pending / completed : { } / { } / { } " , <nl> + logger . warn ( " Gossip not settled but startup forced by cassandra . skip _ wait _ for _ gossip _ to _ settle . Gossip Stage total / active / pending / completed : { } / { } / { } / { } " , <nl> totalPolls , active , pending , completed ) ; <nl> break ; <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 75b349f . . 8790518 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> 1 . 1 . next <nl> * Backport compaction exception handling from 1 . 2 <nl> + * Correctly validate sparse composite cells in scrub ( CASSANDRA - 5855 ) <nl> <nl> <nl> 1 . 1 . 12 <nl> diff - - git a / src / java / org / apache / cassandra / db / Column . java b / src / java / org / apache / cassandra / db / Column . java <nl> index 97aece0 . . ea83146 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Column . java <nl> + + + b / src / java / org / apache / cassandra / db / Column . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . config . CFMetaData ; <nl> + import org . apache . cassandra . cql3 . CFDefinition ; <nl> import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> import org . apache . cassandra . utils . Allocator ; <nl> @ @ - 277 , 7 + 278 , 23 @ @ public class Column implements IColumn <nl> public void validateFields ( CFMetaData metadata ) throws MarshalException <nl> { <nl> validateName ( metadata ) ; <nl> - AbstractType < ? > valueValidator = metadata . getValueValidator ( name ( ) ) ; <nl> + CFDefinition cfdef = metadata . getCfDef ( ) ; <nl> + <nl> + / / If this is a CQL table , we need to pull out the CQL column name to look up the correct column type . <nl> + / / ( Note that COMPACT composites are handled by validateName , above . ) <nl> + ByteBuffer internalName ; <nl> + if ( cfdef . isComposite & & ! cfdef . isCompact ) <nl> + { <nl> + AbstractCompositeType comparator = ( AbstractCompositeType ) metadata . comparator ; <nl> + List < AbstractCompositeType . CompositeComponent > components = comparator . deconstruct ( name ) ; <nl> + internalName = components . get ( components . size ( ) - 1 ) . value ; <nl> + } <nl> + else <nl> + { <nl> + internalName = name ; <nl> + } <nl> + <nl> + AbstractType < ? > valueValidator = metadata . getValueValidator ( internalName ) ; <nl> if ( valueValidator ! = null ) <nl> valueValidator . validate ( value ( ) ) ; <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index d497a38 . . 60e9c25 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 531 , 7 + 531 , 7 @ @ public class CassandraDaemon 
 } 
 if ( forceAfter > 0 & & totalPolls > forceAfter ) 
 { 
 - logger . warn ( " Gossip not settled but startup forced by cassandra . skip _ wait _ for _ gossip _ to _ settle . Gossip Stage active / pending / completed : { } / { } / { } " , 
 + logger . warn ( " Gossip not settled but startup forced by cassandra . skip _ wait _ for _ gossip _ to _ settle . Gossip Stage total / active / pending / completed : { } / { } / { } / { } " , 
 totalPolls , active , pending , completed ) ; 
 break ; 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 75b349f . . 8790518 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 1 . 1 . next 
 * Backport compaction exception handling from 1 . 2 
 + * Correctly validate sparse composite cells in scrub ( CASSANDRA - 5855 ) 
 
 
 1 . 1 . 12 
 diff - - git a / src / java / org / apache / cassandra / db / Column . java b / src / java / org / apache / cassandra / db / Column . java 
 index 97aece0 . . ea83146 100644 
 - - - a / src / java / org / apache / cassandra / db / Column . java 
 + + + b / src / java / org / apache / cassandra / db / Column . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . config . CFMetaData ; 
 + import org . apache . cassandra . cql3 . CFDefinition ; 
 import org . apache . cassandra . db . marshal . * ; 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 import org . apache . cassandra . utils . Allocator ; 
 @ @ - 277 , 7 + 278 , 23 @ @ public class Column implements IColumn 
 public void validateFields ( CFMetaData metadata ) throws MarshalException 
 { 
 validateName ( metadata ) ; 
 - AbstractType < ? > valueValidator = metadata . getValueValidator ( name ( ) ) ; 
 + CFDefinition cfdef = metadata . getCfDef ( ) ; 
 + 
 + / / If this is a CQL table , we need to pull out the CQL column name to look up the correct column type . 
 + / / ( Note that COMPACT composites are handled by validateName , above . ) 
 + ByteBuffer internalName ; 
 + if ( cfdef . isComposite & & ! cfdef . isCompact ) 
 + { 
 + AbstractCompositeType comparator = ( AbstractCompositeType ) metadata . comparator ; 
 + List < AbstractCompositeType . CompositeComponent > components = comparator . deconstruct ( name ) ; 
 + internalName = components . get ( components . size ( ) - 1 ) . value ; 
 + } 
 + else 
 + { 
 + internalName = name ; 
 + } 
 + 
 + AbstractType < ? > valueValidator = metadata . getValueValidator ( internalName ) ; 
 if ( valueValidator ! = null ) 
 valueValidator . validate ( value ( ) ) ; 
 }
