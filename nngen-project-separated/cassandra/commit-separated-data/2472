BLEU SCORE: 0.01898400888797787

TEST MSG: Remove ( buggy ) duplicate call to Frame . release
GENERATED MSG: Make sure we catch all exception during bin protocol snappy initialization

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / transport / FrameCompressor . java b / src / java / org / apache / cassandra / transport / FrameCompressor . java <nl> index 8312b90 . . 9617ec2 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / FrameCompressor . java <nl> + + + b / src / java / org / apache / cassandra / transport / FrameCompressor . java <nl> @ @ - 109 , 9 + 109 , 6 @ @ public interface FrameCompressor <nl> { <nl> int size = Snappy . uncompress ( input , 0 , input . length , output . array ( ) , output . arrayOffset ( ) ) ; <nl> output . writerIndex ( size ) ; <nl> - <nl> - / / release the old frame <nl> - frame . release ( ) ; <nl> } <nl> catch ( final Throwable e ) <nl> {
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f176742 . . 466dca6 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 15 , 6 + 15 , 7 @ @ <nl> * add UseCondCardMark XX jvm settings on jdk 1 . 7 ( CASSANDRA - 4366 ) <nl> * CQL3 refactor to allow conversion function ( CASSANDRA - 5226 ) <nl> * Fix drop of sstables in some circumstance ( CASSANDRA - 5232 ) <nl> + * Implement caching of authorization results ( CASSANDRA - 4295 ) <nl> <nl> <nl> 1 . 2 . 1 <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index 14f4e96 . . f027c15 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 60 , 6 + 60 , 11 @ @ authenticator : org . apache . cassandra . auth . AllowAllAuthenticator <nl> # authorization backend , implementing IAuthorizer ; used to limit access / provide permissions <nl> authorizer : org . apache . cassandra . auth . AllowAllAuthorizer <nl> <nl> + # Validity period for permissions cache ( fetching permissions can be an <nl> + # expensive operation depending on the authorizer ) . Defaults to 2000 , <nl> + # set to 0 to disable . Will be disabled automatically for AllowAllAuthorizer . <nl> + permissions _ validity _ in _ ms : 2000 <nl> + <nl> # The partitioner is responsible for distributing rows ( by key ) across <nl> # nodes in the cluster . Any IPartitioner may be used , including your <nl> # own as long as it is on the classpath . Out of the box , Cassandra <nl> diff - - git a / src / java / org / apache / cassandra / auth / AuthenticatedUser . java b / src / java / org / apache / cassandra / auth / AuthenticatedUser . java <nl> index cf208b8 . . f834878 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / AuthenticatedUser . java <nl> + + + b / src / java / org / apache / cassandra / auth / AuthenticatedUser . java <nl> @ @ - 17 , 6 + 17 , 8 @ @ <nl> * / <nl> package org . apache . cassandra . auth ; <nl> <nl> + import com . google . common . base . Objects ; <nl> + <nl> / * * <nl> * Returned from IAuthenticator # authenticate ( ) , represents an authenticated user everywhere internally . <nl> * / <nl> @ @ - 61 , 4 + 63 , 24 @ @ public class AuthenticatedUser <nl> { <nl> return String . format ( " # < User % s > " , name ) ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean equals ( Object o ) <nl> + { <nl> + if ( this = = o ) <nl> + return true ; <nl> + <nl> + if ( ! ( o instanceof AuthenticatedUser ) ) <nl> + return false ; <nl> + <nl> + AuthenticatedUser u = ( AuthenticatedUser ) o ; <nl> + <nl> + return Objects . equal ( this . name , u . name ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return Objects . hashCode ( name ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index d8a8afd . . 02324ee 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ public class Config <nl> public String authenticator ; <nl> public String authority ; / / for backwards compatibility - will log a warning . <nl> public String authorizer ; <nl> + public int permissions _ validity _ in _ ms = 2000 ; <nl> <nl> / * Hashing strategy Random or OPHF * / <nl> public String partitioner ; <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 42bff03 . . e0fb9b5 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 604 , 6 + 604 , 11 @ @ public class DatabaseDescriptor <nl> return authorizer ; <nl> } <nl> <nl> + public static int getPermissionsValidity ( ) <nl> + { <nl> + return conf . permissions _ validity _ in _ ms ; <nl> + } <nl> + <nl> public static int getThriftMaxMessageLength ( ) <nl> { <nl> return conf . thrift _ max _ message _ length _ in _ mb * 1024 * 1024 ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> index 69db6a5 . . 6200237 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> @ @ - 64 , 23 + 64 , 8 @ @ public class BatchStatement extends ModificationStatement <nl> @ Override <nl> public void checkAccess ( ClientState state ) throws InvalidRequestException , UnauthorizedException <nl> { <nl> - Map < String , Set < String > > cfamsSeen = new HashMap < String , Set < String > > ( ) ; <nl> for ( ModificationStatement statement : statements ) <nl> - { <nl> - String ks = statement . keyspace ( ) ; <nl> - String cf = statement . columnFamily ( ) ; <nl> - <nl> - if ( ! cfamsSeen . containsKey ( ks ) ) <nl> - cfamsSeen . put ( ks , new HashSet < String > ( ) ) ; <nl> - <nl> - / / Avoid unnecessary authorization . <nl> - Set < String > cfs = cfamsSeen . get ( ks ) ; <nl> - if ( ! ( cfs . contains ( cf ) ) ) <nl> - { <nl> - state . hasColumnFamilyAccess ( ks , cf , Permission . MODIFY ) ; <nl> - cfs . add ( cf ) ; <nl> - } <nl> - } <nl> + state . hasColumnFamilyAccess ( statement . keyspace ( ) , statement . columnFamily ( ) , Permission . MODIFY ) ; <nl> } <nl> <nl> public void validate ( ClientState state ) throws InvalidRequestException <nl> diff - - git a / src / java / org / apache / cassandra / service / ClientState . java b / src / java / org / apache / cassandra / service / ClientState . java <nl> index d7b394a . . 110e134 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ClientState . java <nl> + + + b / src / java / org / apache / cassandra / service / ClientState . java <nl> @ @ - 18 , 7 + 18 , 12 @ @ <nl> package org . apache . cassandra . service ; <nl> <nl> import java . util . * ; <nl> + import java . util . concurrent . ExecutionException ; <nl> + import java . util . concurrent . TimeUnit ; <nl> <nl> + import com . google . common . cache . CacheBuilder ; <nl> + import com . google . common . cache . CacheLoader ; <nl> + import com . google . common . cache . LoadingCache ; <nl> import org . apache . commons . lang . StringUtils ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 31 , 6 + 36 , 7 @ @ import org . apache . cassandra . db . Table ; <nl> import org . apache . cassandra . exceptions . AuthenticationException ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> import org . apache . cassandra . exceptions . UnauthorizedException ; <nl> + import org . apache . cassandra . utils . Pair ; <nl> import org . apache . cassandra . utils . SemanticVersion ; <nl> <nl> / * * <nl> @ @ - 44 , 6 + 50 , 9 @ @ public class ClientState <nl> private static final Set < IResource > READABLE _ SYSTEM _ RESOURCES = new HashSet < IResource > ( 5 ) ; <nl> private static final Set < IResource > PROTECTED _ AUTH _ RESOURCES = new HashSet < IResource > ( ) ; <nl> <nl> + / / User - level permissions cache . <nl> + private static final LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > permissionsCache = initPermissionsCache ( ) ; <nl> + <nl> static <nl> { <nl> / / We want these system cfs to be always readable since many tools rely on them ( nodetool , cqlsh , bulkloader , etc . ) <nl> @ @ - 239 , 8 + 248 , 39 @ @ public class ClientState <nl> return new SemanticVersion [ ] { cql , cql3 } ; <nl> } <nl> <nl> + private static LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > initPermissionsCache ( ) <nl> + { <nl> + if ( DatabaseDescriptor . getAuthorizer ( ) instanceof AllowAllAuthorizer ) <nl> + return null ; <nl> + <nl> + int validityPeriod = DatabaseDescriptor . getPermissionsValidity ( ) ; <nl> + if ( validityPeriod < = 0 ) <nl> + return null ; <nl> + <nl> + return CacheBuilder . newBuilder ( ) . expireAfterWrite ( validityPeriod , TimeUnit . MILLISECONDS ) <nl> + . build ( new CacheLoader < Pair < AuthenticatedUser , IResource > , Set < Permission > > ( ) <nl> + { <nl> + public Set < Permission > load ( Pair < AuthenticatedUser , IResource > userResource ) <nl> + { <nl> + return DatabaseDescriptor . getAuthorizer ( ) . authorize ( userResource . left , <nl> + userResource . right ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> private Set < Permission > authorize ( IResource resource ) <nl> { <nl> - return DatabaseDescriptor . getAuthorizer ( ) . authorize ( user , resource ) ; <nl> + / / AllowAllAuthorizer or manually disabled caching . <nl> + if ( permissionsCache = = null ) <nl> + return DatabaseDescriptor . getAuthorizer ( ) . authorize ( user , resource ) ; <nl> + <nl> + try <nl> + { <nl> + return permissionsCache . get ( Pair . create ( user , resource ) ) ; <nl> + } <nl> + catch ( ExecutionException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> index fbdf184 . . 7edaf2b 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> @ @ - 659 , 7 + 659 , 6 @ @ public class CassandraServer implements Cassandra . Iface <nl> boolean allowCounterMutations ) <nl> throws RequestValidationException <nl> { <nl> - List < String > cfamsSeen = new ArrayList < String > ( ) ; <nl> List < IMutation > rowMutations = new ArrayList < IMutation > ( ) ; <nl> ThriftClientState cState = state ( ) ; <nl> String keyspace = cState . getKeyspace ( ) ; <nl> @ @ - 678 , 12 + 677 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> { <nl> String cfName = columnFamilyMutations . getKey ( ) ; <nl> <nl> - / / Avoid unneeded authorizations <nl> - if ( ! ( cfamsSeen . contains ( cfName ) ) ) <nl> - { <nl> - cState . hasColumnFamilyAccess ( keyspace , cfName , Permission . MODIFY ) ; <nl> - cfamsSeen . add ( cfName ) ; <nl> - } <nl> + cState . hasColumnFamilyAccess ( keyspace , cfName , Permission . MODIFY ) ; <nl> <nl> CFMetaData metadata = ThriftValidation . validateColumnFamily ( keyspace , cfName ) ; <nl> ThriftValidation . validateKey ( metadata , key ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / transport / FrameCompressor . java b / src / java / org / apache / cassandra / transport / FrameCompressor . java 
 index 8312b90 . . 9617ec2 100644 
 - - - a / src / java / org / apache / cassandra / transport / FrameCompressor . java 
 + + + b / src / java / org / apache / cassandra / transport / FrameCompressor . java 
 @ @ - 109 , 9 + 109 , 6 @ @ public interface FrameCompressor 
 { 
 int size = Snappy . uncompress ( input , 0 , input . length , output . array ( ) , output . arrayOffset ( ) ) ; 
 output . writerIndex ( size ) ; 
 - 
 - / / release the old frame 
 - frame . release ( ) ; 
 } 
 catch ( final Throwable e ) 
 {

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f176742 . . 466dca6 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 15 , 6 + 15 , 7 @ @ 
 * add UseCondCardMark XX jvm settings on jdk 1 . 7 ( CASSANDRA - 4366 ) 
 * CQL3 refactor to allow conversion function ( CASSANDRA - 5226 ) 
 * Fix drop of sstables in some circumstance ( CASSANDRA - 5232 ) 
 + * Implement caching of authorization results ( CASSANDRA - 4295 ) 
 
 
 1 . 2 . 1 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index 14f4e96 . . f027c15 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 60 , 6 + 60 , 11 @ @ authenticator : org . apache . cassandra . auth . AllowAllAuthenticator 
 # authorization backend , implementing IAuthorizer ; used to limit access / provide permissions 
 authorizer : org . apache . cassandra . auth . AllowAllAuthorizer 
 
 + # Validity period for permissions cache ( fetching permissions can be an 
 + # expensive operation depending on the authorizer ) . Defaults to 2000 , 
 + # set to 0 to disable . Will be disabled automatically for AllowAllAuthorizer . 
 + permissions _ validity _ in _ ms : 2000 
 + 
 # The partitioner is responsible for distributing rows ( by key ) across 
 # nodes in the cluster . Any IPartitioner may be used , including your 
 # own as long as it is on the classpath . Out of the box , Cassandra 
 diff - - git a / src / java / org / apache / cassandra / auth / AuthenticatedUser . java b / src / java / org / apache / cassandra / auth / AuthenticatedUser . java 
 index cf208b8 . . f834878 100644 
 - - - a / src / java / org / apache / cassandra / auth / AuthenticatedUser . java 
 + + + b / src / java / org / apache / cassandra / auth / AuthenticatedUser . java 
 @ @ - 17 , 6 + 17 , 8 @ @ 
 * / 
 package org . apache . cassandra . auth ; 
 
 + import com . google . common . base . Objects ; 
 + 
 / * * 
 * Returned from IAuthenticator # authenticate ( ) , represents an authenticated user everywhere internally . 
 * / 
 @ @ - 61 , 4 + 63 , 24 @ @ public class AuthenticatedUser 
 { 
 return String . format ( " # < User % s > " , name ) ; 
 } 
 + 
 + @ Override 
 + public boolean equals ( Object o ) 
 + { 
 + if ( this = = o ) 
 + return true ; 
 + 
 + if ( ! ( o instanceof AuthenticatedUser ) ) 
 + return false ; 
 + 
 + AuthenticatedUser u = ( AuthenticatedUser ) o ; 
 + 
 + return Objects . equal ( this . name , u . name ) ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return Objects . hashCode ( name ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index d8a8afd . . 02324ee 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 33 , 6 + 33 , 7 @ @ public class Config 
 public String authenticator ; 
 public String authority ; / / for backwards compatibility - will log a warning . 
 public String authorizer ; 
 + public int permissions _ validity _ in _ ms = 2000 ; 
 
 / * Hashing strategy Random or OPHF * / 
 public String partitioner ; 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 42bff03 . . e0fb9b5 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 604 , 6 + 604 , 11 @ @ public class DatabaseDescriptor 
 return authorizer ; 
 } 
 
 + public static int getPermissionsValidity ( ) 
 + { 
 + return conf . permissions _ validity _ in _ ms ; 
 + } 
 + 
 public static int getThriftMaxMessageLength ( ) 
 { 
 return conf . thrift _ max _ message _ length _ in _ mb * 1024 * 1024 ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 index 69db6a5 . . 6200237 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 @ @ - 64 , 23 + 64 , 8 @ @ public class BatchStatement extends ModificationStatement 
 @ Override 
 public void checkAccess ( ClientState state ) throws InvalidRequestException , UnauthorizedException 
 { 
 - Map < String , Set < String > > cfamsSeen = new HashMap < String , Set < String > > ( ) ; 
 for ( ModificationStatement statement : statements ) 
 - { 
 - String ks = statement . keyspace ( ) ; 
 - String cf = statement . columnFamily ( ) ; 
 - 
 - if ( ! cfamsSeen . containsKey ( ks ) ) 
 - cfamsSeen . put ( ks , new HashSet < String > ( ) ) ; 
 - 
 - / / Avoid unnecessary authorization . 
 - Set < String > cfs = cfamsSeen . get ( ks ) ; 
 - if ( ! ( cfs . contains ( cf ) ) ) 
 - { 
 - state . hasColumnFamilyAccess ( ks , cf , Permission . MODIFY ) ; 
 - cfs . add ( cf ) ; 
 - } 
 - } 
 + state . hasColumnFamilyAccess ( statement . keyspace ( ) , statement . columnFamily ( ) , Permission . MODIFY ) ; 
 } 
 
 public void validate ( ClientState state ) throws InvalidRequestException 
 diff - - git a / src / java / org / apache / cassandra / service / ClientState . java b / src / java / org / apache / cassandra / service / ClientState . java 
 index d7b394a . . 110e134 100644 
 - - - a / src / java / org / apache / cassandra / service / ClientState . java 
 + + + b / src / java / org / apache / cassandra / service / ClientState . java 
 @ @ - 18 , 7 + 18 , 12 @ @ 
 package org . apache . cassandra . service ; 
 
 import java . util . * ; 
 + import java . util . concurrent . ExecutionException ; 
 + import java . util . concurrent . TimeUnit ; 
 
 + import com . google . common . cache . CacheBuilder ; 
 + import com . google . common . cache . CacheLoader ; 
 + import com . google . common . cache . LoadingCache ; 
 import org . apache . commons . lang . StringUtils ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 31 , 6 + 36 , 7 @ @ import org . apache . cassandra . db . Table ; 
 import org . apache . cassandra . exceptions . AuthenticationException ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 import org . apache . cassandra . exceptions . UnauthorizedException ; 
 + import org . apache . cassandra . utils . Pair ; 
 import org . apache . cassandra . utils . SemanticVersion ; 
 
 / * * 
 @ @ - 44 , 6 + 50 , 9 @ @ public class ClientState 
 private static final Set < IResource > READABLE _ SYSTEM _ RESOURCES = new HashSet < IResource > ( 5 ) ; 
 private static final Set < IResource > PROTECTED _ AUTH _ RESOURCES = new HashSet < IResource > ( ) ; 
 
 + / / User - level permissions cache . 
 + private static final LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > permissionsCache = initPermissionsCache ( ) ; 
 + 
 static 
 { 
 / / We want these system cfs to be always readable since many tools rely on them ( nodetool , cqlsh , bulkloader , etc . ) 
 @ @ - 239 , 8 + 248 , 39 @ @ public class ClientState 
 return new SemanticVersion [ ] { cql , cql3 } ; 
 } 
 
 + private static LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > initPermissionsCache ( ) 
 + { 
 + if ( DatabaseDescriptor . getAuthorizer ( ) instanceof AllowAllAuthorizer ) 
 + return null ; 
 + 
 + int validityPeriod = DatabaseDescriptor . getPermissionsValidity ( ) ; 
 + if ( validityPeriod < = 0 ) 
 + return null ; 
 + 
 + return CacheBuilder . newBuilder ( ) . expireAfterWrite ( validityPeriod , TimeUnit . MILLISECONDS ) 
 + . build ( new CacheLoader < Pair < AuthenticatedUser , IResource > , Set < Permission > > ( ) 
 + { 
 + public Set < Permission > load ( Pair < AuthenticatedUser , IResource > userResource ) 
 + { 
 + return DatabaseDescriptor . getAuthorizer ( ) . authorize ( userResource . left , 
 + userResource . right ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 private Set < Permission > authorize ( IResource resource ) 
 { 
 - return DatabaseDescriptor . getAuthorizer ( ) . authorize ( user , resource ) ; 
 + / / AllowAllAuthorizer or manually disabled caching . 
 + if ( permissionsCache = = null ) 
 + return DatabaseDescriptor . getAuthorizer ( ) . authorize ( user , resource ) ; 
 + 
 + try 
 + { 
 + return permissionsCache . get ( Pair . create ( user , resource ) ) ; 
 + } 
 + catch ( ExecutionException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 index fbdf184 . . 7edaf2b 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 @ @ - 659 , 7 + 659 , 6 @ @ public class CassandraServer implements Cassandra . Iface 
 boolean allowCounterMutations ) 
 throws RequestValidationException 
 { 
 - List < String > cfamsSeen = new ArrayList < String > ( ) ; 
 List < IMutation > rowMutations = new ArrayList < IMutation > ( ) ; 
 ThriftClientState cState = state ( ) ; 
 String keyspace = cState . getKeyspace ( ) ; 
 @ @ - 678 , 12 + 677 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 { 
 String cfName = columnFamilyMutations . getKey ( ) ; 
 
 - / / Avoid unneeded authorizations 
 - if ( ! ( cfamsSeen . contains ( cfName ) ) ) 
 - { 
 - cState . hasColumnFamilyAccess ( keyspace , cfName , Permission . MODIFY ) ; 
 - cfamsSeen . add ( cfName ) ; 
 - } 
 + cState . hasColumnFamilyAccess ( keyspace , cfName , Permission . MODIFY ) ; 
 
 CFMetaData metadata = ThriftValidation . validateColumnFamily ( keyspace , cfName ) ; 
 ThriftValidation . validateKey ( metadata , key ) ;
