BLEU SCORE: 0.013553186597469942

TEST MSG: Shorten SSTable path
GENERATED MSG: extract SSTable . Descriptor to top - level class . patch by jbellis

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e80ab9f . . 5cbf4bb 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 9 , 6 + 9 , 7 @ @ <nl> * Make incremental repair default ( CASSANDRA - 7250 ) <nl> * Enable code coverage thru JaCoCo ( CASSANDRA - 7226 ) <nl> * Switch external naming of ' column families ' to ' tables ' ( CASSANDRA - 4369 ) <nl> + * Shorten SSTable path ( CASSANDRA - 6962 ) <nl> <nl> <nl> 2 . 1 . 1 <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 232cdf7 . . b51faec 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 16 , 6 + 16 , 13 @ @ using the provided ' sstableupgrade ' tool . <nl> 3 . 0 <nl> = = = <nl> <nl> + New features <nl> + - - - - - - - - - - - - <nl> + - SSTable file name is changed . Now you don ' t have Keyspace / CF name <nl> + in file name . Also , secondary index has its own directory under parent ' s <nl> + directory . <nl> + <nl> + <nl> Upgrading <nl> - - - - - - - - - <nl> - CQL2 has been removed entirely in this release ( previously deprecated <nl> diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java <nl> index 4319481 . . d62ebeb 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Directories . java <nl> + + + b / src / java / org / apache / cassandra / db / Directories . java <nl> @ @ - 191 , 7 + 191 , 15 @ @ public class Directories <nl> String cfId = ByteBufferUtil . bytesToHex ( ByteBufferUtil . bytes ( metadata . cfId ) ) ; <nl> int idx = metadata . cfName . indexOf ( SECONDARY _ INDEX _ NAME _ SEPARATOR ) ; <nl> / / secondary indicies go in the same directory as the base cf <nl> - String directoryName = idx > 0 ? metadata . cfName . substring ( 0 , idx ) + " - " + cfId : metadata . cfName + " - " + cfId ; <nl> + String directoryName ; <nl> + if ( idx > = 0 ) <nl> + { <nl> + directoryName = metadata . cfName . substring ( 0 , idx ) + " - " + cfId + File . separator + metadata . cfName . substring ( idx ) ; <nl> + } <nl> + else <nl> + { <nl> + directoryName = metadata . cfName + " - " + cfId ; <nl> + } <nl> <nl> this . dataPaths = new File [ dataDirectories . length ] ; <nl> / / If upgraded from version less than 2 . 1 , use existing directories <nl> @ @ - 318 , 7 + 326 , 19 @ @ public class Directories <nl> <nl> public static File getSnapshotDirectory ( Descriptor desc , String snapshotName ) <nl> { <nl> - return getOrCreate ( desc . directory , SNAPSHOT _ SUBDIR , snapshotName ) ; <nl> + return getSnapshotDirectory ( desc . directory , snapshotName ) ; <nl> + } <nl> + <nl> + public static File getSnapshotDirectory ( File location , String snapshotName ) <nl> + { <nl> + if ( location . getName ( ) . startsWith ( SECONDARY _ INDEX _ NAME _ SEPARATOR ) ) <nl> + { <nl> + return getOrCreate ( location . getParentFile ( ) , SNAPSHOT _ SUBDIR , snapshotName , location . getName ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + return getOrCreate ( location , SNAPSHOT _ SUBDIR , snapshotName ) ; <nl> + } <nl> } <nl> <nl> public File getSnapshotManifestFile ( String snapshotName ) <nl> @ @ - 328 , 7 + 348 , 19 @ @ public class Directories <nl> <nl> public static File getBackupsDirectory ( Descriptor desc ) <nl> { <nl> - return getOrCreate ( desc . directory , BACKUPS _ SUBDIR ) ; <nl> + return getBackupsDirectory ( desc . directory ) ; <nl> + } <nl> + <nl> + public static File getBackupsDirectory ( File location ) <nl> + { <nl> + if ( location . getName ( ) . startsWith ( SECONDARY _ INDEX _ NAME _ SEPARATOR ) ) <nl> + { <nl> + return getOrCreate ( location . getParentFile ( ) , BACKUPS _ SUBDIR , location . getName ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + return getOrCreate ( location , BACKUPS _ SUBDIR ) ; <nl> + } <nl> } <nl> <nl> public SSTableLister sstableLister ( ) <nl> @ @ - 439 , 7 + 471 , 7 @ @ public class Directories <nl> <nl> if ( snapshotName ! = null ) <nl> { <nl> - new File ( location , join ( SNAPSHOT _ SUBDIR , snapshotName ) ) . listFiles ( getFilter ( ) ) ; <nl> + getSnapshotDirectory ( location , snapshotName ) . listFiles ( getFilter ( ) ) ; <nl> continue ; <nl> } <nl> <nl> @ @ - 447 , 28 + 479 , 29 @ @ public class Directories <nl> location . listFiles ( getFilter ( ) ) ; <nl> <nl> if ( includeBackups ) <nl> - new File ( location , BACKUPS _ SUBDIR ) . listFiles ( getFilter ( ) ) ; <nl> + getBackupsDirectory ( location ) . listFiles ( getFilter ( ) ) ; <nl> } <nl> filtered = true ; <nl> } <nl> <nl> private FileFilter getFilter ( ) <nl> { <nl> - / / Note : the prefix needs to include cfname + separator to distinguish between a cfs and it ' s secondary indexes <nl> - final String sstablePrefix = getSSTablePrefix ( ) ; <nl> return new FileFilter ( ) <nl> { <nl> / / This function always return false since accepts adds to the components map <nl> public boolean accept ( File file ) <nl> { <nl> - / / we are only interested in the SSTable files that belong to the specific ColumnFamily <nl> - if ( file . isDirectory ( ) | | ! file . getName ( ) . startsWith ( sstablePrefix ) ) <nl> + if ( file . isDirectory ( ) ) <nl> return false ; <nl> <nl> Pair < Descriptor , Component > pair = SSTable . tryComponentFromFilename ( file . getParentFile ( ) , file . getName ( ) ) ; <nl> if ( pair = = null ) <nl> return false ; <nl> <nl> + / / we are only interested in the SSTable files that belong to the specific ColumnFamily <nl> + if ( ! pair . left . ksname . equals ( metadata . ksName ) | | ! pair . left . cfname . equals ( metadata . cfName ) ) <nl> + return false ; <nl> + <nl> if ( skipTemporary & & pair . left . type . isTemporary ) <nl> return false ; <nl> <nl> @ @ - 569 , 11 + 602 , 6 @ @ public class Directories <nl> return result ; <nl> } <nl> <nl> - private String getSSTablePrefix ( ) <nl> - { <nl> - return metadata . ksName + Component . separator + metadata . cfName + Component . separator ; <nl> - } <nl> - <nl> public long getTrueAllocatedSizeIn ( File input ) <nl> { <nl> if ( ! input . isDirectory ( ) ) <nl> @ @ - 662 , 7 + 690 , 6 @ @ public class Directories <nl> private final AtomicLong size = new AtomicLong ( 0 ) ; <nl> private final Set < String > visited = newHashSet ( ) ; / / count each file only once <nl> private final Set < String > alive ; <nl> - private final String prefix = getSSTablePrefix ( ) ; <nl> <nl> public TrueFilesSizeVisitor ( ) <nl> { <nl> @ @ - 675 , 8 + 702 , 11 @ @ public class Directories <nl> <nl> private boolean isAcceptable ( Path file ) <nl> { <nl> - String fileName = file . toFile ( ) . getName ( ) ; <nl> - return fileName . startsWith ( prefix ) <nl> + String fileName = file . toFile ( ) . getName ( ) ; <nl> + Pair < Descriptor , Component > pair = SSTable . tryComponentFromFilename ( file . getParent ( ) . toFile ( ) , fileName ) ; <nl> + return pair ! = null <nl> + & & pair . left . ksname . equals ( metadata . ksName ) <nl> + & & pair . left . cfname . equals ( metadata . cfName ) <nl> & & ! visited . contains ( fileName ) <nl> & & ! alive . contains ( fileName ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 0f38e53 . . d571814 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 479 , 7 + 479 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> / / group by keyspace / columnfamily <nl> ColumnFamilyStore cfs = Keyspace . open ( desc . ksname ) . getColumnFamilyStore ( desc . cfname ) ; <nl> - descriptors . put ( cfs , cfs . directories . find ( filename . trim ( ) ) ) ; <nl> + descriptors . put ( cfs , cfs . directories . find ( new File ( filename . trim ( ) ) . getName ( ) ) ) ; <nl> } <nl> <nl> List < Future < ? > > futures = new ArrayList < > ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java b / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java <nl> index acf1e52 . . 6900b9f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java <nl> @ @ - 66 , 7 + 66 , 8 @ @ public interface CompactionManagerMBean <nl> * If you do so , user defined compaction is performed several times to the groups of files <nl> * in the same keyspace / columnfamily . <nl> * <nl> - * @ param dataFiles a comma separated list of sstable filename to compact <nl> + * @ param dataFiles a comma separated list of sstable file to compact . <nl> + * must contain keyspace and columnfamily name in path ( for 2 . 1 + ) or file name itself . <nl> * / <nl> public void forceUserDefinedCompaction ( String dataFiles ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / Descriptor . java b / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> index 4415db4 . . db5b60c 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> @ @ - 18 , 10 + 18 , 13 @ @ <nl> package org . apache . cassandra . io . sstable ; <nl> <nl> import java . io . File ; <nl> + import java . util . ArrayDeque ; <nl> + import java . util . Deque ; <nl> import java . util . StringTokenizer ; <nl> <nl> import com . google . common . base . Objects ; <nl> <nl> + import org . apache . cassandra . db . Directories ; <nl> import org . apache . cassandra . io . sstable . metadata . IMetadataSerializer ; <nl> import org . apache . cassandra . io . sstable . metadata . LegacyMetadataSerializer ; <nl> import org . apache . cassandra . io . sstable . metadata . MetadataSerializer ; <nl> @ @ - 60 , 6 + 63 , 7 @ @ public class Descriptor <nl> / / jb ( 2 . 0 . 1 ) : switch from crc32 to adler32 for compression checksums <nl> / / checksum the compressed data <nl> / / ka ( 2 . 1 . 0 ) : new Statistics . db file format <nl> + / / new file name format <nl> / / index summaries can be downsampled and the sampling level is persisted <nl> / / switch uncompressed checksums to adler32 <nl> / / tracks presense of legacy ( local and remote ) counter shards <nl> @ @ - 75 , 6 + 79 , 7 @ @ public class Descriptor <nl> public final boolean hasAllAdlerChecksums ; <nl> public final boolean hasRepairedAt ; <nl> public final boolean tracksLegacyCounterShards ; <nl> + public final boolean newFileName ; <nl> <nl> public Version ( String version ) <nl> { <nl> @ @ - 86 , 6 + 91 , 7 @ @ public class Descriptor <nl> hasAllAdlerChecksums = version . compareTo ( " ka " ) > = 0 ; <nl> hasRepairedAt = version . compareTo ( " ka " ) > = 0 ; <nl> tracksLegacyCounterShards = version . compareTo ( " ka " ) > = 0 ; <nl> + newFileName = version . compareTo ( " ka " ) > = 0 ; <nl> } <nl> <nl> / * * <nl> @ @ - 188 , 8 + 194 , 11 @ @ public class Descriptor <nl> <nl> private void appendFileName ( StringBuilder buff ) <nl> { <nl> - buff . append ( ksname ) . append ( separator ) ; <nl> - buff . append ( cfname ) . append ( separator ) ; <nl> + if ( ! version . newFileName ) <nl> + { <nl> + buff . append ( ksname ) . append ( separator ) ; <nl> + buff . append ( cfname ) . append ( separator ) ; <nl> + } <nl> if ( type . isTemporary ) <nl> buff . append ( type . marker ) . append ( separator ) ; <nl> buff . append ( version ) . append ( separator ) ; <nl> @ @ - 230 , 13 + 239 , 20 @ @ public class Descriptor <nl> return fromFilename ( file . getParentFile ( ) , file . getName ( ) , skipComponent ) . left ; <nl> } <nl> <nl> - public static Pair < Descriptor , String > fromFilename ( File directory , String name ) <nl> + public static Pair < Descriptor , String > fromFilename ( File directory , String name ) <nl> { <nl> return fromFilename ( directory , name , false ) ; <nl> } <nl> <nl> / * * <nl> - * Filename of the form " < ksname > - < cfname > - [ tmp - ] [ < version > - ] < gen > - < component > " <nl> + * Filename of the form is vary by version : <nl> + * <nl> + * < ul > <nl> + * < li > & lt ; ksname & gt ; - & lt ; cfname & gt ; - ( tmp - ) ? & lt ; version & gt ; - & lt ; gen & gt ; - & lt ; component & gt ; for cassandra 2 . 0 and before < / li > <nl> + * < li > ( & lt ; tmp marker & gt ; - ) ? & lt ; version & gt ; - & lt ; gen & gt ; - & lt ; component & gt ; for cassandra 2 . 1 and later < / li > <nl> + * < / ul > <nl> + * <nl> + * If this is for SSTable of secondary index , directory should ends with index name for 2 . 1 + . <nl> * <nl> * @ param directory The directory of the SSTable files <nl> * @ param name The name of the SSTable file <nl> @ @ - 244 , 43 + 260 , 79 @ @ public class Descriptor <nl> * <nl> * @ return A Descriptor for the SSTable , and the Component remainder . <nl> * / <nl> - public static Pair < Descriptor , String > fromFilename ( File directory , String name , boolean skipComponent ) <nl> + public static Pair < Descriptor , String > fromFilename ( File directory , String name , boolean skipComponent ) <nl> { <nl> + File parentDirectory = directory ! = null ? directory : new File ( " . " ) ; <nl> + <nl> / / tokenize the filename <nl> StringTokenizer st = new StringTokenizer ( name , String . valueOf ( separator ) ) ; <nl> String nexttok ; <nl> <nl> - / / all filenames must start with keyspace and column family <nl> - String ksname = st . nextToken ( ) ; <nl> - String cfname = st . nextToken ( ) ; <nl> + / / read tokens backwards to determine version <nl> + Deque < String > tokenStack = new ArrayDeque < > ( ) ; <nl> + while ( st . hasMoreTokens ( ) ) <nl> + { <nl> + tokenStack . push ( st . nextToken ( ) ) ; <nl> + } <nl> + <nl> + / / component suffix <nl> + String component = skipComponent ? null : tokenStack . pop ( ) ; <nl> + <nl> + / / generation <nl> + int generation = Integer . parseInt ( tokenStack . pop ( ) ) ; <nl> + <nl> + / / version <nl> + nexttok = tokenStack . pop ( ) ; <nl> + if ( ! Version . validate ( nexttok ) ) <nl> + throw new UnsupportedOperationException ( " SSTable " + name + " is too old to open . Upgrade to 2 . 0 first , and run upgradesstables " ) ; <nl> + Version version = new Version ( nexttok ) ; <nl> <nl> / / optional temporary marker <nl> - nexttok = st . nextToken ( ) ; <nl> Type type = Type . FINAL ; <nl> - if ( nexttok . equals ( Type . TEMP . marker ) ) <nl> + nexttok = tokenStack . peek ( ) ; <nl> + if ( Type . TEMP . marker . equals ( nexttok ) ) <nl> { <nl> type = Type . TEMP ; <nl> - nexttok = st . nextToken ( ) ; <nl> + tokenStack . pop ( ) ; <nl> } <nl> - else if ( nexttok . equals ( Type . TEMPLINK . marker ) ) <nl> + else if ( Type . TEMPLINK . marker . equals ( nexttok ) ) <nl> { <nl> type = Type . TEMPLINK ; <nl> - nexttok = st . nextToken ( ) ; <nl> + tokenStack . pop ( ) ; <nl> } <nl> <nl> - if ( ! Version . validate ( nexttok ) ) <nl> - throw new UnsupportedOperationException ( " SSTable " + name + " is too old to open . Upgrade to 2 . 0 first , and run upgradesstables " ) ; <nl> - Version version = new Version ( nexttok ) ; <nl> - <nl> - nexttok = st . nextToken ( ) ; <nl> - int generation = Integer . parseInt ( nexttok ) ; <nl> + / / ks / cf names <nl> + String ksname , cfname ; <nl> + if ( version . newFileName ) <nl> + { <nl> + / / for 2 . 1 + read ks and cf names from directory <nl> + File cfDirectory = parentDirectory ; <nl> + / / check if this is secondary index <nl> + String indexName = " " ; <nl> + if ( cfDirectory . getName ( ) . startsWith ( Directories . SECONDARY _ INDEX _ NAME _ SEPARATOR ) ) <nl> + { <nl> + indexName = cfDirectory . getName ( ) ; <nl> + cfDirectory = cfDirectory . getParentFile ( ) ; <nl> + } <nl> + if ( cfDirectory . getName ( ) . equals ( Directories . BACKUPS _ SUBDIR ) ) <nl> + { <nl> + cfDirectory = cfDirectory . getParentFile ( ) ; <nl> + } <nl> + else if ( cfDirectory . getParentFile ( ) . getName ( ) . equals ( Directories . SNAPSHOT _ SUBDIR ) ) <nl> + { <nl> + cfDirectory = cfDirectory . getParentFile ( ) . getParentFile ( ) ; <nl> + } <nl> + cfname = cfDirectory . getName ( ) . split ( " - " ) [ 0 ] + indexName ; <nl> + ksname = cfDirectory . getParentFile ( ) . getName ( ) ; <nl> + } <nl> + else <nl> + { <nl> + cfname = tokenStack . pop ( ) ; <nl> + ksname = tokenStack . pop ( ) ; <nl> + } <nl> + assert tokenStack . isEmpty ( ) : " Invalid file name " + name + " in " + directory ; <nl> <nl> - / / component suffix <nl> - String component = null ; <nl> - if ( ! skipComponent ) <nl> - component = st . nextToken ( ) ; <nl> - directory = directory ! = null ? directory : new File ( " . " ) ; <nl> - return Pair . create ( new Descriptor ( version , directory , ksname , cfname , generation , type ) , component ) ; <nl> + return Pair . create ( new Descriptor ( version , parentDirectory , ksname , cfname , generation , type ) , component ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTable . java b / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> index 6eff369 . . dee024a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> @ @ - 150 , 18 + 150 , 17 @ @ public abstract class SSTable <nl> } <nl> <nl> / * * <nl> - * @ return A Descriptor , Component pair . If component is of unknown type , returns CUSTOM component . <nl> + * @ return Descriptor and Component pair . null if given file is not acceptable as SSTable component . <nl> + * If component is of unknown type , returns CUSTOM component . <nl> * / <nl> - public static Pair < Descriptor , Component > tryComponentFromFilename ( File dir , String name ) <nl> + public static Pair < Descriptor , Component > tryComponentFromFilename ( File dir , String name ) <nl> { <nl> try <nl> { <nl> return Component . fromFilename ( dir , name ) ; <nl> } <nl> - catch ( NoSuchElementException e ) <nl> + catch ( Throwable e ) <nl> { <nl> - / / A NoSuchElementException is thrown if the name does not match the Descriptor format <nl> - / / This is the less impacting change ( all calls to this method test for null return ) <nl> return null ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / DirectoriesTest . java b / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> index 9e6b26b . . 3e29a89 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> @ @ - 173 , 7 + 173 , 7 @ @ public class DirectoriesTest <nl> { <nl> if ( f . getPath ( ) . contains ( Directories . SNAPSHOT _ SUBDIR ) | | f . getPath ( ) . contains ( Directories . BACKUPS _ SUBDIR ) ) <nl> assert ! listed . contains ( f ) : f + " should not be listed " ; <nl> - else if ( f . getName ( ) . contains ( " - tmp - " ) ) <nl> + else if ( f . getName ( ) . contains ( " tmp - " ) ) <nl> assert ! listed . contains ( f ) : f + " should not be listed " ; <nl> else <nl> assert listed . contains ( f ) : f + " is missing " ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java <nl> index e790005 . . e784051 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java <nl> @ @ - 367 , 7 + 367 , 7 @ @ public class CompactionsTest <nl> SSTableReader sstable = sstables . iterator ( ) . next ( ) ; <nl> <nl> int prevGeneration = sstable . descriptor . generation ; <nl> - String file = new File ( sstable . descriptor . filenameFor ( Component . DATA ) ) . getName ( ) ; <nl> + String file = new File ( sstable . descriptor . filenameFor ( Component . DATA ) ) . getAbsolutePath ( ) ; <nl> / / submit user defined compaction on flushed sstable <nl> CompactionManager . instance . forceUserDefinedCompaction ( file ) ; <nl> / / wait until user defined compaction finishes <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / DescriptorTest . java b / test / unit / org / apache / cassandra / io / sstable / DescriptorTest . java <nl> new file mode 100644 <nl> index 0000000 . . 71145f7 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / DescriptorTest . java <nl> @ @ - 0 , 0 + 1 , 120 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . io . sstable ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . util . UUID ; <nl> + <nl> + import org . apache . commons . lang3 . StringUtils ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . db . Directories ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . Pair ; <nl> + <nl> + import static org . junit . Assert . * ; <nl> + <nl> + public class DescriptorTest <nl> + { <nl> + private final String ksname = " ks " ; <nl> + private final String cfname = " cf " ; <nl> + private final String cfId = ByteBufferUtil . bytesToHex ( ByteBufferUtil . bytes ( UUID . randomUUID ( ) ) ) ; <nl> + private final File tempDataDir ; <nl> + <nl> + public DescriptorTest ( ) throws IOException <nl> + { <nl> + / / create CF directories , one without CFID and one with it <nl> + tempDataDir = File . createTempFile ( " DescriptorTest " , null ) . getParentFile ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testFromFilename ( ) throws Exception <nl> + { <nl> + File cfIdDir = new File ( tempDataDir . getAbsolutePath ( ) + File . separator + ksname + File . separator + cfname + ' - ' + cfId ) ; <nl> + testFromFilenameFor ( cfIdDir ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testFromFilenameInBackup ( ) throws Exception <nl> + { <nl> + File backupDir = new File ( StringUtils . join ( new String [ ] { tempDataDir . getAbsolutePath ( ) , ksname , cfname + ' - ' + cfId , Directories . BACKUPS _ SUBDIR } , File . separator ) ) ; <nl> + testFromFilenameFor ( backupDir ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testFromFilenameInSnapshot ( ) throws Exception <nl> + { <nl> + File snapshotDir = new File ( StringUtils . join ( new String [ ] { tempDataDir . getAbsolutePath ( ) , ksname , cfname + ' - ' + cfId , Directories . SNAPSHOT _ SUBDIR , " snapshot _ name " } , File . separator ) ) ; <nl> + testFromFilenameFor ( snapshotDir ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testFromFilenameInLegacyDirectory ( ) throws Exception <nl> + { <nl> + File cfDir = new File ( tempDataDir . getAbsolutePath ( ) + File . separator + ksname + File . separator + cfname ) ; <nl> + testFromFilenameFor ( cfDir ) ; <nl> + } <nl> + <nl> + private void testFromFilenameFor ( File dir ) <nl> + { <nl> + / / normal <nl> + checkFromFilename ( new Descriptor ( dir , ksname , cfname , 1 , Descriptor . Type . FINAL ) , false ) ; <nl> + / / skip component ( for streaming lock file ) <nl> + checkFromFilename ( new Descriptor ( dir , ksname , cfname , 2 , Descriptor . Type . FINAL ) , true ) ; <nl> + / / tmp <nl> + checkFromFilename ( new Descriptor ( dir , ksname , cfname , 3 , Descriptor . Type . TEMP ) , false ) ; <nl> + / / secondary index <nl> + String idxName = " myidx " ; <nl> + File idxDir = new File ( dir . getAbsolutePath ( ) + File . separator + Directories . SECONDARY _ INDEX _ NAME _ SEPARATOR + idxName ) ; <nl> + checkFromFilename ( new Descriptor ( idxDir , ksname , cfname + Directories . SECONDARY _ INDEX _ NAME _ SEPARATOR + idxName , 4 , Descriptor . Type . FINAL ) , false ) ; <nl> + / / secondary index tmp <nl> + checkFromFilename ( new Descriptor ( idxDir , ksname , cfname + Directories . SECONDARY _ INDEX _ NAME _ SEPARATOR + idxName , 5 , Descriptor . Type . TEMP ) , false ) ; <nl> + <nl> + / / legacy version <nl> + checkFromFilename ( new Descriptor ( " ja " , dir , ksname , cfname , 1 , Descriptor . Type . FINAL ) , false ) ; <nl> + / / legacy tmp <nl> + checkFromFilename ( new Descriptor ( " ja " , dir , ksname , cfname , 2 , Descriptor . Type . TEMP ) , false ) ; <nl> + / / legacy secondary index <nl> + checkFromFilename ( new Descriptor ( " ja " , dir , ksname , cfname + Directories . SECONDARY _ INDEX _ NAME _ SEPARATOR + idxName , 3 , Descriptor . Type . FINAL ) , false ) ; <nl> + } <nl> + <nl> + private void checkFromFilename ( Descriptor original , boolean skipComponent ) <nl> + { <nl> + File file = new File ( skipComponent ? original . baseFilename ( ) : original . filenameFor ( Component . DATA ) ) ; <nl> + <nl> + Pair < Descriptor , String > pair = Descriptor . fromFilename ( file . getParentFile ( ) , file . getName ( ) , skipComponent ) ; <nl> + Descriptor desc = pair . left ; <nl> + <nl> + assertEquals ( original . directory , desc . directory ) ; <nl> + assertEquals ( original . ksname , desc . ksname ) ; <nl> + assertEquals ( original . cfname , desc . cfname ) ; <nl> + assertEquals ( original . version , desc . version ) ; <nl> + assertEquals ( original . generation , desc . generation ) ; <nl> + assertEquals ( original . type , desc . type ) ; <nl> + <nl> + if ( skipComponent ) <nl> + { <nl> + assertNull ( pair . right ) ; <nl> + } <nl> + else <nl> + { <nl> + assertEquals ( Component . DATA . name ( ) , pair . right ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java b / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java <nl> index 32d07ac . . 157f89b 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java <nl> @ @ - 69 , 10 + 69 , 10 @ @ public class SSTableUtils <nl> if ( ! tempdir . delete ( ) | | ! tempdir . mkdir ( ) ) <nl> throw new IOException ( " Temporary directory creation failed . " ) ; <nl> tempdir . deleteOnExit ( ) ; <nl> - File keyspaceDir = new File ( tempdir , keyspaceName ) ; <nl> - keyspaceDir . mkdir ( ) ; <nl> - keyspaceDir . deleteOnExit ( ) ; <nl> - File datafile = new File ( new Descriptor ( keyspaceDir , keyspaceName , cfname , generation , Descriptor . Type . FINAL ) . filenameFor ( " Data . db " ) ) ; <nl> + File cfDir = new File ( tempdir , keyspaceName + File . separator + cfname ) ; <nl> + cfDir . mkdirs ( ) ; <nl> + cfDir . deleteOnExit ( ) ; <nl> + File datafile = new File ( new Descriptor ( cfDir , keyspaceName , cfname , generation , Descriptor . Type . FINAL ) . filenameFor ( " Data . db " ) ) ; <nl> if ( ! datafile . createNewFile ( ) ) <nl> throw new IOException ( " unable to create file " + datafile ) ; <nl> datafile . deleteOnExit ( ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 26bf765 . . 301dc94 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 33 , 7 + 33 , 6 @ @ import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> <nl> import org . apache . commons . collections . IteratorUtils ; <nl> - import org . apache . commons . lang . ArrayUtils ; <nl> <nl> import com . google . common . collect . Iterables ; <nl> import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; <nl> @ @ - 41 , 7 + 40 , 6 @ @ import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> import org . apache . cassandra . concurrent . StageManager ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . db . IClock ; <nl> import org . apache . cassandra . db . IClock . ClockRelationship ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . db . commitlog . CommitLogSegment ; <nl> @ @ - 54 , 7 + 52 , 6 @ @ import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . io . sstable . * ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . service . StorageService ; <nl> - import org . apache . cassandra . thrift . SliceRange ; <nl> import org . apache . cassandra . utils . * ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 307 , 12 + 304 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> private static String getColumnFamilyFromFileName ( String filename ) <nl> { <nl> - return SSTable . Descriptor . fromFilename ( filename ) . cfname ; <nl> + return Descriptor . fromFilename ( filename ) . cfname ; <nl> } <nl> <nl> public static int getGenerationFromFileName ( String filename ) <nl> { <nl> - return SSTable . Descriptor . fromFilename ( filename ) . generation ; <nl> + return Descriptor . fromFilename ( filename ) . generation ; <nl> } <nl> <nl> / * <nl> @ @ - 331 , 7 + 328 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> public String getTempSSTablePath ( String directory ) <nl> { <nl> - SSTable . Descriptor desc = new SSTable . Descriptor ( new File ( directory ) , <nl> + Descriptor desc = new Descriptor ( new File ( directory ) , <nl> table _ , <nl> columnFamily _ , <nl> fileIndexGenerator _ . incrementAndGet ( ) , <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / Descriptor . java b / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> new file mode 100644 <nl> index 0000000 . . 2dc6532 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> @ @ - 0 , 0 + 1 , 162 @ @ <nl> + package org . apache . cassandra . io . sstable ; <nl> + <nl> + import java . io . File ; <nl> + import java . util . StringTokenizer ; <nl> + <nl> + import com . google . common . base . Objects ; <nl> + <nl> + / * * <nl> + * A SSTable is described by the keyspace and column family it contains data <nl> + * for , a generation ( where higher generations contain more recent data ) and <nl> + * an alphabetic version string . <nl> + * <nl> + * A descriptor can be marked as temporary , which influences generated filenames . <nl> + * / <nl> + public class Descriptor <nl> + { <nl> + public static final String LEGACY _ VERSION = " a " ; <nl> + public static final String CURRENT _ VERSION = " d " ; <nl> + <nl> + public final File directory ; <nl> + public final String version ; <nl> + public final String ksname ; <nl> + public final String cfname ; <nl> + public final int generation ; <nl> + public final boolean temporary ; <nl> + private final int hashCode ; <nl> + <nl> + / * * <nl> + * A descriptor that assumes CURRENT _ VERSION . <nl> + * / <nl> + public Descriptor ( File directory , String ksname , String cfname , int generation , boolean temp ) <nl> + { <nl> + this ( CURRENT _ VERSION , directory , ksname , cfname , generation , temp ) ; <nl> + } <nl> + <nl> + public Descriptor ( String version , File directory , String ksname , String cfname , int generation , boolean temp ) <nl> + { <nl> + assert version ! = null & & directory ! = null & & ksname ! = null & & cfname ! = null ; <nl> + this . version = version ; <nl> + this . directory = directory ; <nl> + this . ksname = ksname ; <nl> + this . cfname = cfname ; <nl> + this . generation = generation ; <nl> + temporary = temp ; <nl> + hashCode = Objects . hashCode ( directory , generation , ksname , cfname ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ param suffix A component suffix , such as ' Data . db ' / ' Index . db ' / etc <nl> + * @ return A filename for this descriptor with the given suffix . <nl> + * / <nl> + public String filenameFor ( String suffix ) <nl> + { <nl> + StringBuilder buff = new StringBuilder ( ) ; <nl> + buff . append ( directory ) . append ( File . separatorChar ) ; <nl> + buff . append ( cfname ) . append ( " - " ) ; <nl> + if ( temporary ) <nl> + buff . append ( SSTable . TEMPFILE _ MARKER ) . append ( " - " ) ; <nl> + if ( ! LEGACY _ VERSION . equals ( version ) ) <nl> + buff . append ( version ) . append ( " - " ) ; <nl> + buff . append ( generation ) . append ( " - " ) ; <nl> + buff . append ( suffix ) ; <nl> + return buff . toString ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Filename of the form " < ksname > / < cfname > - [ tmp - ] [ < version > - ] < gen > - * " <nl> + * @ param filename A full SSTable filename , including the directory . <nl> + * @ return A SSTable . Descriptor for the filename . <nl> + * / <nl> + public static Descriptor fromFilename ( String filename ) <nl> + { <nl> + int separatorPos = filename . lastIndexOf ( File . separatorChar ) ; <nl> + assert separatorPos ! = - 1 : " Filename must include parent directory . " ; <nl> + File directory = new File ( filename . substring ( 0 , separatorPos ) ) ; <nl> + String name = filename . substring ( separatorPos + 1 , filename . length ( ) ) ; <nl> + <nl> + / / name of parent directory is keyspace name <nl> + String ksname = directory . getName ( ) ; <nl> + <nl> + / / tokenize the filename <nl> + StringTokenizer st = new StringTokenizer ( name , " - " ) ; <nl> + String nexttok = null ; <nl> + <nl> + / / all filenames must start with a column family <nl> + String cfname = st . nextToken ( ) ; <nl> + <nl> + / / optional temporary marker <nl> + nexttok = st . nextToken ( ) ; <nl> + boolean temporary = false ; <nl> + if ( nexttok . equals ( SSTable . TEMPFILE _ MARKER ) ) <nl> + { <nl> + temporary = true ; <nl> + nexttok = st . nextToken ( ) ; <nl> + } <nl> + <nl> + / / optional version string <nl> + String version = LEGACY _ VERSION ; <nl> + if ( versionValidate ( nexttok ) ) <nl> + { <nl> + version = nexttok ; <nl> + nexttok = st . nextToken ( ) ; <nl> + } <nl> + int generation = Integer . parseInt ( nexttok ) ; <nl> + <nl> + return new Descriptor ( version , directory , ksname , cfname , generation , temporary ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return A clone of this descriptor with the given ' temporary ' status . <nl> + * / <nl> + public Descriptor asTemporary ( boolean temporary ) <nl> + { <nl> + return new Descriptor ( version , directory , ksname , cfname , generation , temporary ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return True if the given version string is not empty , and <nl> + * contains all lowercase letters , as defined by java . lang . Character . <nl> + * / <nl> + private static boolean versionValidate ( String ver ) <nl> + { <nl> + if ( ver . length ( ) < 1 ) return false ; <nl> + for ( char ch : ver . toCharArray ( ) ) <nl> + if ( ! Character . isLetter ( ch ) | | ! Character . isLowerCase ( ch ) ) <nl> + return false ; <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return this . filenameFor ( " < > " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean equals ( Object o ) <nl> + { <nl> + if ( o = = this ) <nl> + return true ; <nl> + if ( ! ( o instanceof Descriptor ) ) <nl> + return false ; <nl> + Descriptor that = ( Descriptor ) o ; <nl> + return that . directory . equals ( this . directory ) & & that . generation = = this . generation & & that . ksname . equals ( this . ksname ) & & that . cfname . equals ( this . cfname ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return hashCode ; <nl> + } <nl> + <nl> + public boolean hasStringsInBloomFilter ( ) <nl> + { <nl> + return version . compareTo ( " c " ) < 0 ; <nl> + } <nl> + <nl> + public boolean hasIntRowSize ( ) <nl> + { <nl> + return version . compareTo ( " d " ) < 0 ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTable . java b / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> index fa103ba . . c6415b3 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> @ @ - 25 , 7 + 25 , 6 @ @ import java . io . IOException ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . Arrays ; <nl> - import java . util . StringTokenizer ; <nl> <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 34 , 8 + 33 , 6 @ @ import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . utils . BloomFilter ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> <nl> - import com . google . common . base . Objects ; <nl> - <nl> / * * <nl> * This class is built on top of the SequenceFile . It stores <nl> * data on disk in sorted fashion . However the sorting is upto <nl> @ @ - 167 , 11 + 164 , 6 @ @ public abstract class SSTable <nl> return desc . ksname ; <nl> } <nl> <nl> - public static String parseTableName ( String filename ) <nl> - { <nl> - return Descriptor . fromFilename ( filename ) . ksname ; <nl> - } <nl> - <nl> public static long getTotalBytes ( Iterable < SSTableReader > sstables ) <nl> { <nl> long sum = 0 ; <nl> @ @ - 199 , 160 + 191 , 4 @ @ public abstract class SSTable <nl> " path = ' " + getFilename ( ) + ' \ ' ' + <nl> ' ) ' ; <nl> } <nl> - <nl> - / * * <nl> - * A SSTable is described by the keyspace and column family it contains data <nl> - * for , a generation ( where higher generations contain more recent data ) and <nl> - * an alphabetic version string . <nl> - * <nl> - * A descriptor can be marked as temporary , which influences generated filenames . <nl> - * / <nl> - public static class Descriptor <nl> - { <nl> - public static final String LEGACY _ VERSION = " a " ; <nl> - public static final String CURRENT _ VERSION = " d " ; <nl> - <nl> - public final File directory ; <nl> - public final String version ; <nl> - public final String ksname ; <nl> - public final String cfname ; <nl> - public final int generation ; <nl> - public final boolean temporary ; <nl> - private final int hashCode ; <nl> - <nl> - / * * <nl> - * A descriptor that assumes CURRENT _ VERSION . <nl> - * / <nl> - public Descriptor ( File directory , String ksname , String cfname , int generation , boolean temp ) <nl> - { <nl> - this ( CURRENT _ VERSION , directory , ksname , cfname , generation , temp ) ; <nl> - } <nl> - <nl> - public Descriptor ( String version , File directory , String ksname , String cfname , int generation , boolean temp ) <nl> - { <nl> - assert version ! = null & & directory ! = null & & ksname ! = null & & cfname ! = null ; <nl> - this . version = version ; <nl> - this . directory = directory ; <nl> - this . ksname = ksname ; <nl> - this . cfname = cfname ; <nl> - this . generation = generation ; <nl> - temporary = temp ; <nl> - hashCode = Objects . hashCode ( directory , generation , ksname , cfname ) ; <nl> - } <nl> - <nl> - / * * <nl> - * @ param suffix A component suffix , such as ' Data . db ' / ' Index . db ' / etc <nl> - * @ return A filename for this descriptor with the given suffix . <nl> - * / <nl> - public String filenameFor ( String suffix ) <nl> - { <nl> - StringBuilder buff = new StringBuilder ( ) ; <nl> - buff . append ( directory ) . append ( File . separatorChar ) ; <nl> - buff . append ( cfname ) . append ( " - " ) ; <nl> - if ( temporary ) <nl> - buff . append ( TEMPFILE _ MARKER ) . append ( " - " ) ; <nl> - if ( ! LEGACY _ VERSION . equals ( version ) ) <nl> - buff . append ( version ) . append ( " - " ) ; <nl> - buff . append ( generation ) . append ( " - " ) ; <nl> - buff . append ( suffix ) ; <nl> - return buff . toString ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Filename of the form " < ksname > / < cfname > - [ tmp - ] [ < version > - ] < gen > - * " <nl> - * @ param filename A full SSTable filename , including the directory . <nl> - * @ return A SSTable . Descriptor for the filename . <nl> - * / <nl> - public static Descriptor fromFilename ( String filename ) <nl> - { <nl> - int separatorPos = filename . lastIndexOf ( File . separatorChar ) ; <nl> - assert separatorPos ! = - 1 : " Filename must include parent directory . " ; <nl> - File directory = new File ( filename . substring ( 0 , separatorPos ) ) ; <nl> - String name = filename . substring ( separatorPos + 1 , filename . length ( ) ) ; <nl> - <nl> - / / name of parent directory is keyspace name <nl> - String ksname = directory . getName ( ) ; <nl> - <nl> - / / tokenize the filename <nl> - StringTokenizer st = new StringTokenizer ( name , " - " ) ; <nl> - String nexttok = null ; <nl> - <nl> - / / all filenames must start with a column family <nl> - String cfname = st . nextToken ( ) ; <nl> - <nl> - / / optional temporary marker <nl> - nexttok = st . nextToken ( ) ; <nl> - boolean temporary = false ; <nl> - if ( nexttok . equals ( TEMPFILE _ MARKER ) ) <nl> - { <nl> - temporary = true ; <nl> - nexttok = st . nextToken ( ) ; <nl> - } <nl> - <nl> - / / optional version string <nl> - String version = LEGACY _ VERSION ; <nl> - if ( versionValidate ( nexttok ) ) <nl> - { <nl> - version = nexttok ; <nl> - nexttok = st . nextToken ( ) ; <nl> - } <nl> - int generation = Integer . parseInt ( nexttok ) ; <nl> - <nl> - return new Descriptor ( version , directory , ksname , cfname , generation , temporary ) ; <nl> - } <nl> - <nl> - / * * <nl> - * @ return A clone of this descriptor with the given ' temporary ' status . <nl> - * / <nl> - public Descriptor asTemporary ( boolean temporary ) <nl> - { <nl> - return new Descriptor ( version , directory , ksname , cfname , generation , temporary ) ; <nl> - } <nl> - <nl> - / * * <nl> - * @ return True if the given version string is not empty , and <nl> - * contains all lowercase letters , as defined by java . lang . Character . <nl> - * / <nl> - private static boolean versionValidate ( String ver ) <nl> - { <nl> - if ( ver . length ( ) < 1 ) return false ; <nl> - for ( char ch : ver . toCharArray ( ) ) <nl> - if ( ! Character . isLetter ( ch ) | | ! Character . isLowerCase ( ch ) ) <nl> - return false ; <nl> - return true ; <nl> - } <nl> - <nl> - @ Override <nl> - public String toString ( ) <nl> - { <nl> - return this . filenameFor ( " < > " ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean equals ( Object o ) <nl> - { <nl> - if ( o = = this ) <nl> - return true ; <nl> - if ( ! ( o instanceof Descriptor ) ) <nl> - return false ; <nl> - Descriptor that = ( Descriptor ) o ; <nl> - return that . directory . equals ( this . directory ) & & that . generation = = this . generation & & that . ksname . equals ( this . ksname ) & & that . cfname . equals ( this . cfname ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public int hashCode ( ) <nl> - { <nl> - return hashCode ; <nl> - } <nl> - <nl> - public boolean hasStringsInBloomFilter ( ) <nl> - { <nl> - return version . compareTo ( " c " ) < 0 ; <nl> - } <nl> - <nl> - public boolean hasIntRowSize ( ) <nl> - { <nl> - return version . compareTo ( " d " ) < 0 ; <nl> - } <nl> - } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java b / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java <nl> index 446f36b . . ef83f2b 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java <nl> @ @ - 42 , 7 + 42 , 7 @ @ public class SSTableTracker implements Iterable < SSTableReader > <nl> private final String ksname ; <nl> private final String cfname ; <nl> <nl> - private final JMXInstrumentedCache < Pair < SSTable . Descriptor , DecoratedKey > , Long > keyCache ; <nl> + private final JMXInstrumentedCache < Pair < Descriptor , DecoratedKey > , Long > keyCache ; <nl> private final JMXInstrumentedCache < DecoratedKey , ColumnFamily > rowCache ; <nl> <nl> public SSTableTracker ( String ksname , String cfname ) <nl> @ @ - 50 , 7 + 50 , 7 @ @ public class SSTableTracker implements Iterable < SSTableReader > <nl> this . ksname = ksname ; <nl> this . cfname = cfname ; <nl> sstables = Collections . emptySet ( ) ; <nl> - keyCache = new JMXInstrumentedCache < Pair < SSTable . Descriptor , DecoratedKey > , Long > ( ksname , cfname + " KeyCache " , 0 ) ; <nl> + keyCache = new JMXInstrumentedCache < Pair < Descriptor , DecoratedKey > , Long > ( ksname , cfname + " KeyCache " , 0 ) ; <nl> rowCache = new JMXInstrumentedCache < DecoratedKey , ColumnFamily > ( ksname , cfname + " RowCache " , 0 ) ; <nl> } <nl> <nl> @ @ - 176 , 7 + 176 , 7 @ @ public class SSTableTracker implements Iterable < SSTableReader > <nl> totalSize . addAndGet ( - size ) ; <nl> } <nl> <nl> - public JMXInstrumentedCache < Pair < SSTable . Descriptor , DecoratedKey > , Long > getKeyCache ( ) <nl> + public JMXInstrumentedCache < Pair < Descriptor , DecoratedKey > , Long > getKeyCache ( ) <nl> { <nl> return keyCache ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / streaming / PendingFile . java b / src / java / org / apache / cassandra / streaming / PendingFile . java <nl> index 9ebe238 . . 97966b4 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / PendingFile . java <nl> + + + b / src / java / org / apache / cassandra / streaming / PendingFile . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ import java . io . DataOutputStream ; <nl> import java . io . IOException ; <nl> <nl> import org . apache . cassandra . io . ICompactSerializer ; <nl> - import org . apache . cassandra . io . sstable . SSTable ; <nl> + import org . apache . cassandra . io . sstable . Descriptor ; <nl> <nl> class PendingFile <nl> { <nl> @ @ - 42 , 12 + 42 , 12 @ @ class PendingFile <nl> return serializer _ ; <nl> } <nl> <nl> - private SSTable . Descriptor desc ; <nl> + private Descriptor desc ; <nl> private String component ; <nl> private long expectedBytes ; <nl> private long ptr ; <nl> <nl> - public PendingFile ( SSTable . Descriptor desc , String component , long expectedBytes ) <nl> + public PendingFile ( Descriptor desc , String component , long expectedBytes ) <nl> { <nl> this . desc = desc ; <nl> this . component = component ; <nl> @ @ - 70 , 7 + 70 , 7 @ @ class PendingFile <nl> return component ; <nl> } <nl> <nl> - public SSTable . Descriptor getDescriptor ( ) <nl> + public Descriptor getDescriptor ( ) <nl> { <nl> return desc ; <nl> } <nl> @ @ - 115 , 7 + 115 , 7 @ @ class PendingFile <nl> <nl> public PendingFile deserialize ( DataInputStream dis ) throws IOException <nl> { <nl> - SSTable . Descriptor desc = SSTable . Descriptor . fromFilename ( dis . readUTF ( ) ) ; <nl> + Descriptor desc = Descriptor . fromFilename ( dis . readUTF ( ) ) ; <nl> String component = dis . readUTF ( ) ; <nl> long expectedBytes = dis . readLong ( ) ; <nl> return new PendingFile ( desc , component , expectedBytes ) ; <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamInitiateVerbHandler . java b / src / java / org / apache / cassandra / streaming / StreamInitiateVerbHandler . java <nl> index e3f2640 . . 601b3fb 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamInitiateVerbHandler . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamInitiateVerbHandler . java <nl> @ @ - 26 , 15 + 26 , 12 @ @ import java . util . * ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . Table ; <nl> - import org . apache . cassandra . io . sstable . SSTable ; <nl> + import org . apache . cassandra . io . sstable . Descriptor ; <nl> import org . apache . cassandra . net . IVerbHandler ; <nl> import org . apache . cassandra . net . Message ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> - import org . apache . cassandra . streaming . StreamInitiateMessage ; <nl> - import org . apache . cassandra . streaming . StreamInManager ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> @ @ - 106 , 18 + 103 , 18 @ @ public class StreamInitiateVerbHandler implements IVerbHandler <nl> { <nl> / * Create a local sstable for each remote sstable * / <nl> LinkedHashMap < PendingFile , PendingFile > mapping = new LinkedHashMap < PendingFile , PendingFile > ( ) ; <nl> - Map < SSTable . Descriptor , SSTable . Descriptor > sstables = new HashMap < SSTable . Descriptor , SSTable . Descriptor > ( ) ; <nl> + Map < Descriptor , Descriptor > sstables = new HashMap < Descriptor , Descriptor > ( ) ; <nl> for ( PendingFile remote : remoteFiles ) <nl> { <nl> - SSTable . Descriptor remotedesc = remote . getDescriptor ( ) ; <nl> - SSTable . Descriptor localdesc = sstables . get ( remotedesc ) ; <nl> + Descriptor remotedesc = remote . getDescriptor ( ) ; <nl> + Descriptor localdesc = sstables . get ( remotedesc ) ; <nl> if ( localdesc = = null ) <nl> { <nl> / / new local sstable <nl> Table table = Table . open ( remotedesc . ksname ) ; <nl> ColumnFamilyStore cfStore = table . getColumnFamilyStore ( remotedesc . cfname ) ; <nl> <nl> - localdesc = SSTable . Descriptor . fromFilename ( cfStore . getFlushPath ( ) ) ; <nl> + localdesc = Descriptor . fromFilename ( cfStore . getFlushPath ( ) ) ; <nl> sstables . put ( remotedesc , localdesc ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamOut . java b / src / java / org / apache / cassandra / streaming / StreamOut . java <nl> index 980feb7 . . 034c48c 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamOut . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamOut . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . commons . lang . StringUtils ; <nl> <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . db . Table ; <nl> + import org . apache . cassandra . io . sstable . Descriptor ; <nl> import org . apache . cassandra . io . sstable . SSTable ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> import org . apache . cassandra . net . Message ; <nl> @ @ - 122 , 7 + 123 , 7 @ @ public class StreamOut <nl> { <nl> for ( String component : SSTable . components ) <nl> { <nl> - SSTable . Descriptor desc = sstable . getDescriptor ( ) ; <nl> + Descriptor desc = sstable . getDescriptor ( ) ; <nl> long filelen = new File ( desc . filenameFor ( component ) ) . length ( ) ; <nl> pendingFiles [ i + + ] = new PendingFile ( desc , component , filelen ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> index 643c6ed . . b44b331 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> @ @ - 25 , 16 + 25 , 11 @ @ import java . util . * ; <nl> <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> - import static org . junit . Assert . * ; <nl> <nl> import org . apache . cassandra . CleanupHelper ; <nl> import org . apache . cassandra . io . util . BufferedRandomAccessFile ; <nl> - import org . apache . cassandra . db . DecoratedKey ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> - import com . google . common . base . Predicate ; <nl> - import com . google . common . base . Predicates ; <nl> - <nl> / * * <nl> * Tests backwards compatibility for SSTables . Requires that older SSTables match up with the existing config file , <nl> * and currently only tests specific cases for specific upgrades . <nl> @ @ - 66 , 10 + 61 , 10 @ @ public class LegacySSTableTest extends CleanupHelper <nl> / * * <nl> * Get a descriptor for the legacy sstable at the given version . <nl> * / <nl> - protected SSTable . Descriptor getDescriptor ( String ver ) throws IOException <nl> + protected Descriptor getDescriptor ( String ver ) throws IOException <nl> { <nl> File directory = new File ( LEGACY _ SSTABLE _ ROOT + File . separator + ver + File . separator + KSNAME ) ; <nl> - return new SSTable . Descriptor ( ver , directory , KSNAME , CFNAME , 0 , false ) ; <nl> + return new Descriptor ( ver , directory , KSNAME , CFNAME , 0 , false ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java b / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java <nl> index 97bf2bc . . 9818d364 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java <nl> @ @ - 52 , 7 + 52 , 7 @ @ public class SSTableUtils <nl> File tabledir = new File ( tempdir , tablename ) ; <nl> tabledir . mkdir ( ) ; <nl> tabledir . deleteOnExit ( ) ; <nl> - File datafile = new File ( new SSTable . Descriptor ( tabledir , tablename , cfname , 0 , <nl> + File datafile = new File ( new Descriptor ( tabledir , tablename , cfname , 0 , <nl> false ) . filenameFor ( " Data . db " ) ) ; <nl> assert datafile . createNewFile ( ) ; <nl> datafile . deleteOnExit ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java <nl> index 446b4e9 . . fb3fce3 100644 <nl> - - - a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java <nl> + + + b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java <nl> @ @ - 19 , 16 + 19 , 13 @ @ <nl> package org . apache . cassandra . streaming ; <nl> <nl> import static junit . framework . Assert . assertEquals ; <nl> - import static org . junit . Assert . * ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> - import java . util . HashMap ; <nl> import java . util . Map ; <nl> <nl> import org . apache . cassandra . SchemaLoader ; <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . io . sstable . SSTable ; <nl> + import org . apache . cassandra . io . sstable . Descriptor ; <nl> <nl> import org . junit . Test ; <nl> <nl> @ @ - 37 , 7 + 34 , 7 @ @ public class BootstrapTest extends SchemaLoader <nl> @ Test <nl> public void testGetNewNames ( ) throws IOException <nl> { <nl> - SSTable . Descriptor desc = SSTable . Descriptor . fromFilename ( new File ( " Keyspace1 " , " Standard1 - 500 - Data . db " ) . toString ( ) ) ; <nl> + Descriptor desc = Descriptor . fromFilename ( new File ( " Keyspace1 " , " Standard1 - 500 - Data . db " ) . toString ( ) ) ; <nl> PendingFile [ ] pendingFiles = new PendingFile [ ] { new PendingFile ( desc , " Data . db " , 100 ) , <nl> new PendingFile ( desc , " Index . db " , 100 ) , <nl> new PendingFile ( desc , " Filter . db " , 100 ) } ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e80ab9f . . 5cbf4bb 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 9 , 6 + 9 , 7 @ @ 
 * Make incremental repair default ( CASSANDRA - 7250 ) 
 * Enable code coverage thru JaCoCo ( CASSANDRA - 7226 ) 
 * Switch external naming of ' column families ' to ' tables ' ( CASSANDRA - 4369 ) 
 + * Shorten SSTable path ( CASSANDRA - 6962 ) 
 
 
 2 . 1 . 1 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 232cdf7 . . b51faec 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 16 , 6 + 16 , 13 @ @ using the provided ' sstableupgrade ' tool . 
 3 . 0 
 = = = 
 
 + New features 
 + - - - - - - - - - - - - 
 + - SSTable file name is changed . Now you don ' t have Keyspace / CF name 
 + in file name . Also , secondary index has its own directory under parent ' s 
 + directory . 
 + 
 + 
 Upgrading 
 - - - - - - - - - 
 - CQL2 has been removed entirely in this release ( previously deprecated 
 diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java 
 index 4319481 . . d62ebeb 100644 
 - - - a / src / java / org / apache / cassandra / db / Directories . java 
 + + + b / src / java / org / apache / cassandra / db / Directories . java 
 @ @ - 191 , 7 + 191 , 15 @ @ public class Directories 
 String cfId = ByteBufferUtil . bytesToHex ( ByteBufferUtil . bytes ( metadata . cfId ) ) ; 
 int idx = metadata . cfName . indexOf ( SECONDARY _ INDEX _ NAME _ SEPARATOR ) ; 
 / / secondary indicies go in the same directory as the base cf 
 - String directoryName = idx > 0 ? metadata . cfName . substring ( 0 , idx ) + " - " + cfId : metadata . cfName + " - " + cfId ; 
 + String directoryName ; 
 + if ( idx > = 0 ) 
 + { 
 + directoryName = metadata . cfName . substring ( 0 , idx ) + " - " + cfId + File . separator + metadata . cfName . substring ( idx ) ; 
 + } 
 + else 
 + { 
 + directoryName = metadata . cfName + " - " + cfId ; 
 + } 
 
 this . dataPaths = new File [ dataDirectories . length ] ; 
 / / If upgraded from version less than 2 . 1 , use existing directories 
 @ @ - 318 , 7 + 326 , 19 @ @ public class Directories 
 
 public static File getSnapshotDirectory ( Descriptor desc , String snapshotName ) 
 { 
 - return getOrCreate ( desc . directory , SNAPSHOT _ SUBDIR , snapshotName ) ; 
 + return getSnapshotDirectory ( desc . directory , snapshotName ) ; 
 + } 
 + 
 + public static File getSnapshotDirectory ( File location , String snapshotName ) 
 + { 
 + if ( location . getName ( ) . startsWith ( SECONDARY _ INDEX _ NAME _ SEPARATOR ) ) 
 + { 
 + return getOrCreate ( location . getParentFile ( ) , SNAPSHOT _ SUBDIR , snapshotName , location . getName ( ) ) ; 
 + } 
 + else 
 + { 
 + return getOrCreate ( location , SNAPSHOT _ SUBDIR , snapshotName ) ; 
 + } 
 } 
 
 public File getSnapshotManifestFile ( String snapshotName ) 
 @ @ - 328 , 7 + 348 , 19 @ @ public class Directories 
 
 public static File getBackupsDirectory ( Descriptor desc ) 
 { 
 - return getOrCreate ( desc . directory , BACKUPS _ SUBDIR ) ; 
 + return getBackupsDirectory ( desc . directory ) ; 
 + } 
 + 
 + public static File getBackupsDirectory ( File location ) 
 + { 
 + if ( location . getName ( ) . startsWith ( SECONDARY _ INDEX _ NAME _ SEPARATOR ) ) 
 + { 
 + return getOrCreate ( location . getParentFile ( ) , BACKUPS _ SUBDIR , location . getName ( ) ) ; 
 + } 
 + else 
 + { 
 + return getOrCreate ( location , BACKUPS _ SUBDIR ) ; 
 + } 
 } 
 
 public SSTableLister sstableLister ( ) 
 @ @ - 439 , 7 + 471 , 7 @ @ public class Directories 
 
 if ( snapshotName ! = null ) 
 { 
 - new File ( location , join ( SNAPSHOT _ SUBDIR , snapshotName ) ) . listFiles ( getFilter ( ) ) ; 
 + getSnapshotDirectory ( location , snapshotName ) . listFiles ( getFilter ( ) ) ; 
 continue ; 
 } 
 
 @ @ - 447 , 28 + 479 , 29 @ @ public class Directories 
 location . listFiles ( getFilter ( ) ) ; 
 
 if ( includeBackups ) 
 - new File ( location , BACKUPS _ SUBDIR ) . listFiles ( getFilter ( ) ) ; 
 + getBackupsDirectory ( location ) . listFiles ( getFilter ( ) ) ; 
 } 
 filtered = true ; 
 } 
 
 private FileFilter getFilter ( ) 
 { 
 - / / Note : the prefix needs to include cfname + separator to distinguish between a cfs and it ' s secondary indexes 
 - final String sstablePrefix = getSSTablePrefix ( ) ; 
 return new FileFilter ( ) 
 { 
 / / This function always return false since accepts adds to the components map 
 public boolean accept ( File file ) 
 { 
 - / / we are only interested in the SSTable files that belong to the specific ColumnFamily 
 - if ( file . isDirectory ( ) | | ! file . getName ( ) . startsWith ( sstablePrefix ) ) 
 + if ( file . isDirectory ( ) ) 
 return false ; 
 
 Pair < Descriptor , Component > pair = SSTable . tryComponentFromFilename ( file . getParentFile ( ) , file . getName ( ) ) ; 
 if ( pair = = null ) 
 return false ; 
 
 + / / we are only interested in the SSTable files that belong to the specific ColumnFamily 
 + if ( ! pair . left . ksname . equals ( metadata . ksName ) | | ! pair . left . cfname . equals ( metadata . cfName ) ) 
 + return false ; 
 + 
 if ( skipTemporary & & pair . left . type . isTemporary ) 
 return false ; 
 
 @ @ - 569 , 11 + 602 , 6 @ @ public class Directories 
 return result ; 
 } 
 
 - private String getSSTablePrefix ( ) 
 - { 
 - return metadata . ksName + Component . separator + metadata . cfName + Component . separator ; 
 - } 
 - 
 public long getTrueAllocatedSizeIn ( File input ) 
 { 
 if ( ! input . isDirectory ( ) ) 
 @ @ - 662 , 7 + 690 , 6 @ @ public class Directories 
 private final AtomicLong size = new AtomicLong ( 0 ) ; 
 private final Set < String > visited = newHashSet ( ) ; / / count each file only once 
 private final Set < String > alive ; 
 - private final String prefix = getSSTablePrefix ( ) ; 
 
 public TrueFilesSizeVisitor ( ) 
 { 
 @ @ - 675 , 8 + 702 , 11 @ @ public class Directories 
 
 private boolean isAcceptable ( Path file ) 
 { 
 - String fileName = file . toFile ( ) . getName ( ) ; 
 - return fileName . startsWith ( prefix ) 
 + String fileName = file . toFile ( ) . getName ( ) ; 
 + Pair < Descriptor , Component > pair = SSTable . tryComponentFromFilename ( file . getParent ( ) . toFile ( ) , fileName ) ; 
 + return pair ! = null 
 + & & pair . left . ksname . equals ( metadata . ksName ) 
 + & & pair . left . cfname . equals ( metadata . cfName ) 
 & & ! visited . contains ( fileName ) 
 & & ! alive . contains ( fileName ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 0f38e53 . . d571814 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 479 , 7 + 479 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 / / group by keyspace / columnfamily 
 ColumnFamilyStore cfs = Keyspace . open ( desc . ksname ) . getColumnFamilyStore ( desc . cfname ) ; 
 - descriptors . put ( cfs , cfs . directories . find ( filename . trim ( ) ) ) ; 
 + descriptors . put ( cfs , cfs . directories . find ( new File ( filename . trim ( ) ) . getName ( ) ) ) ; 
 } 
 
 List < Future < ? > > futures = new ArrayList < > ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java b / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java 
 index acf1e52 . . 6900b9f 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java 
 @ @ - 66 , 7 + 66 , 8 @ @ public interface CompactionManagerMBean 
 * If you do so , user defined compaction is performed several times to the groups of files 
 * in the same keyspace / columnfamily . 
 * 
 - * @ param dataFiles a comma separated list of sstable filename to compact 
 + * @ param dataFiles a comma separated list of sstable file to compact . 
 + * must contain keyspace and columnfamily name in path ( for 2 . 1 + ) or file name itself . 
 * / 
 public void forceUserDefinedCompaction ( String dataFiles ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / Descriptor . java b / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 index 4415db4 . . db5b60c 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 @ @ - 18 , 10 + 18 , 13 @ @ 
 package org . apache . cassandra . io . sstable ; 
 
 import java . io . File ; 
 + import java . util . ArrayDeque ; 
 + import java . util . Deque ; 
 import java . util . StringTokenizer ; 
 
 import com . google . common . base . Objects ; 
 
 + import org . apache . cassandra . db . Directories ; 
 import org . apache . cassandra . io . sstable . metadata . IMetadataSerializer ; 
 import org . apache . cassandra . io . sstable . metadata . LegacyMetadataSerializer ; 
 import org . apache . cassandra . io . sstable . metadata . MetadataSerializer ; 
 @ @ - 60 , 6 + 63 , 7 @ @ public class Descriptor 
 / / jb ( 2 . 0 . 1 ) : switch from crc32 to adler32 for compression checksums 
 / / checksum the compressed data 
 / / ka ( 2 . 1 . 0 ) : new Statistics . db file format 
 + / / new file name format 
 / / index summaries can be downsampled and the sampling level is persisted 
 / / switch uncompressed checksums to adler32 
 / / tracks presense of legacy ( local and remote ) counter shards 
 @ @ - 75 , 6 + 79 , 7 @ @ public class Descriptor 
 public final boolean hasAllAdlerChecksums ; 
 public final boolean hasRepairedAt ; 
 public final boolean tracksLegacyCounterShards ; 
 + public final boolean newFileName ; 
 
 public Version ( String version ) 
 { 
 @ @ - 86 , 6 + 91 , 7 @ @ public class Descriptor 
 hasAllAdlerChecksums = version . compareTo ( " ka " ) > = 0 ; 
 hasRepairedAt = version . compareTo ( " ka " ) > = 0 ; 
 tracksLegacyCounterShards = version . compareTo ( " ka " ) > = 0 ; 
 + newFileName = version . compareTo ( " ka " ) > = 0 ; 
 } 
 
 / * * 
 @ @ - 188 , 8 + 194 , 11 @ @ public class Descriptor 
 
 private void appendFileName ( StringBuilder buff ) 
 { 
 - buff . append ( ksname ) . append ( separator ) ; 
 - buff . append ( cfname ) . append ( separator ) ; 
 + if ( ! version . newFileName ) 
 + { 
 + buff . append ( ksname ) . append ( separator ) ; 
 + buff . append ( cfname ) . append ( separator ) ; 
 + } 
 if ( type . isTemporary ) 
 buff . append ( type . marker ) . append ( separator ) ; 
 buff . append ( version ) . append ( separator ) ; 
 @ @ - 230 , 13 + 239 , 20 @ @ public class Descriptor 
 return fromFilename ( file . getParentFile ( ) , file . getName ( ) , skipComponent ) . left ; 
 } 
 
 - public static Pair < Descriptor , String > fromFilename ( File directory , String name ) 
 + public static Pair < Descriptor , String > fromFilename ( File directory , String name ) 
 { 
 return fromFilename ( directory , name , false ) ; 
 } 
 
 / * * 
 - * Filename of the form " < ksname > - < cfname > - [ tmp - ] [ < version > - ] < gen > - < component > " 
 + * Filename of the form is vary by version : 
 + * 
 + * < ul > 
 + * < li > & lt ; ksname & gt ; - & lt ; cfname & gt ; - ( tmp - ) ? & lt ; version & gt ; - & lt ; gen & gt ; - & lt ; component & gt ; for cassandra 2 . 0 and before < / li > 
 + * < li > ( & lt ; tmp marker & gt ; - ) ? & lt ; version & gt ; - & lt ; gen & gt ; - & lt ; component & gt ; for cassandra 2 . 1 and later < / li > 
 + * < / ul > 
 + * 
 + * If this is for SSTable of secondary index , directory should ends with index name for 2 . 1 + . 
 * 
 * @ param directory The directory of the SSTable files 
 * @ param name The name of the SSTable file 
 @ @ - 244 , 43 + 260 , 79 @ @ public class Descriptor 
 * 
 * @ return A Descriptor for the SSTable , and the Component remainder . 
 * / 
 - public static Pair < Descriptor , String > fromFilename ( File directory , String name , boolean skipComponent ) 
 + public static Pair < Descriptor , String > fromFilename ( File directory , String name , boolean skipComponent ) 
 { 
 + File parentDirectory = directory ! = null ? directory : new File ( " . " ) ; 
 + 
 / / tokenize the filename 
 StringTokenizer st = new StringTokenizer ( name , String . valueOf ( separator ) ) ; 
 String nexttok ; 
 
 - / / all filenames must start with keyspace and column family 
 - String ksname = st . nextToken ( ) ; 
 - String cfname = st . nextToken ( ) ; 
 + / / read tokens backwards to determine version 
 + Deque < String > tokenStack = new ArrayDeque < > ( ) ; 
 + while ( st . hasMoreTokens ( ) ) 
 + { 
 + tokenStack . push ( st . nextToken ( ) ) ; 
 + } 
 + 
 + / / component suffix 
 + String component = skipComponent ? null : tokenStack . pop ( ) ; 
 + 
 + / / generation 
 + int generation = Integer . parseInt ( tokenStack . pop ( ) ) ; 
 + 
 + / / version 
 + nexttok = tokenStack . pop ( ) ; 
 + if ( ! Version . validate ( nexttok ) ) 
 + throw new UnsupportedOperationException ( " SSTable " + name + " is too old to open . Upgrade to 2 . 0 first , and run upgradesstables " ) ; 
 + Version version = new Version ( nexttok ) ; 
 
 / / optional temporary marker 
 - nexttok = st . nextToken ( ) ; 
 Type type = Type . FINAL ; 
 - if ( nexttok . equals ( Type . TEMP . marker ) ) 
 + nexttok = tokenStack . peek ( ) ; 
 + if ( Type . TEMP . marker . equals ( nexttok ) ) 
 { 
 type = Type . TEMP ; 
 - nexttok = st . nextToken ( ) ; 
 + tokenStack . pop ( ) ; 
 } 
 - else if ( nexttok . equals ( Type . TEMPLINK . marker ) ) 
 + else if ( Type . TEMPLINK . marker . equals ( nexttok ) ) 
 { 
 type = Type . TEMPLINK ; 
 - nexttok = st . nextToken ( ) ; 
 + tokenStack . pop ( ) ; 
 } 
 
 - if ( ! Version . validate ( nexttok ) ) 
 - throw new UnsupportedOperationException ( " SSTable " + name + " is too old to open . Upgrade to 2 . 0 first , and run upgradesstables " ) ; 
 - Version version = new Version ( nexttok ) ; 
 - 
 - nexttok = st . nextToken ( ) ; 
 - int generation = Integer . parseInt ( nexttok ) ; 
 + / / ks / cf names 
 + String ksname , cfname ; 
 + if ( version . newFileName ) 
 + { 
 + / / for 2 . 1 + read ks and cf names from directory 
 + File cfDirectory = parentDirectory ; 
 + / / check if this is secondary index 
 + String indexName = " " ; 
 + if ( cfDirectory . getName ( ) . startsWith ( Directories . SECONDARY _ INDEX _ NAME _ SEPARATOR ) ) 
 + { 
 + indexName = cfDirectory . getName ( ) ; 
 + cfDirectory = cfDirectory . getParentFile ( ) ; 
 + } 
 + if ( cfDirectory . getName ( ) . equals ( Directories . BACKUPS _ SUBDIR ) ) 
 + { 
 + cfDirectory = cfDirectory . getParentFile ( ) ; 
 + } 
 + else if ( cfDirectory . getParentFile ( ) . getName ( ) . equals ( Directories . SNAPSHOT _ SUBDIR ) ) 
 + { 
 + cfDirectory = cfDirectory . getParentFile ( ) . getParentFile ( ) ; 
 + } 
 + cfname = cfDirectory . getName ( ) . split ( " - " ) [ 0 ] + indexName ; 
 + ksname = cfDirectory . getParentFile ( ) . getName ( ) ; 
 + } 
 + else 
 + { 
 + cfname = tokenStack . pop ( ) ; 
 + ksname = tokenStack . pop ( ) ; 
 + } 
 + assert tokenStack . isEmpty ( ) : " Invalid file name " + name + " in " + directory ; 
 
 - / / component suffix 
 - String component = null ; 
 - if ( ! skipComponent ) 
 - component = st . nextToken ( ) ; 
 - directory = directory ! = null ? directory : new File ( " . " ) ; 
 - return Pair . create ( new Descriptor ( version , directory , ksname , cfname , generation , type ) , component ) ; 
 + return Pair . create ( new Descriptor ( version , parentDirectory , ksname , cfname , generation , type ) , component ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTable . java b / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 index 6eff369 . . dee024a 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 @ @ - 150 , 18 + 150 , 17 @ @ public abstract class SSTable 
 } 
 
 / * * 
 - * @ return A Descriptor , Component pair . If component is of unknown type , returns CUSTOM component . 
 + * @ return Descriptor and Component pair . null if given file is not acceptable as SSTable component . 
 + * If component is of unknown type , returns CUSTOM component . 
 * / 
 - public static Pair < Descriptor , Component > tryComponentFromFilename ( File dir , String name ) 
 + public static Pair < Descriptor , Component > tryComponentFromFilename ( File dir , String name ) 
 { 
 try 
 { 
 return Component . fromFilename ( dir , name ) ; 
 } 
 - catch ( NoSuchElementException e ) 
 + catch ( Throwable e ) 
 { 
 - / / A NoSuchElementException is thrown if the name does not match the Descriptor format 
 - / / This is the less impacting change ( all calls to this method test for null return ) 
 return null ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / DirectoriesTest . java b / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 index 9e6b26b . . 3e29a89 100644 
 - - - a / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 + + + b / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 @ @ - 173 , 7 + 173 , 7 @ @ public class DirectoriesTest 
 { 
 if ( f . getPath ( ) . contains ( Directories . SNAPSHOT _ SUBDIR ) | | f . getPath ( ) . contains ( Directories . BACKUPS _ SUBDIR ) ) 
 assert ! listed . contains ( f ) : f + " should not be listed " ; 
 - else if ( f . getName ( ) . contains ( " - tmp - " ) ) 
 + else if ( f . getName ( ) . contains ( " tmp - " ) ) 
 assert ! listed . contains ( f ) : f + " should not be listed " ; 
 else 
 assert listed . contains ( f ) : f + " is missing " ; 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java 
 index e790005 . . e784051 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionsTest . java 
 @ @ - 367 , 7 + 367 , 7 @ @ public class CompactionsTest 
 SSTableReader sstable = sstables . iterator ( ) . next ( ) ; 
 
 int prevGeneration = sstable . descriptor . generation ; 
 - String file = new File ( sstable . descriptor . filenameFor ( Component . DATA ) ) . getName ( ) ; 
 + String file = new File ( sstable . descriptor . filenameFor ( Component . DATA ) ) . getAbsolutePath ( ) ; 
 / / submit user defined compaction on flushed sstable 
 CompactionManager . instance . forceUserDefinedCompaction ( file ) ; 
 / / wait until user defined compaction finishes 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / DescriptorTest . java b / test / unit / org / apache / cassandra / io / sstable / DescriptorTest . java 
 new file mode 100644 
 index 0000000 . . 71145f7 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / io / sstable / DescriptorTest . java 
 @ @ - 0 , 0 + 1 , 120 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . io . sstable ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . util . UUID ; 
 + 
 + import org . apache . commons . lang3 . StringUtils ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . db . Directories ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . Pair ; 
 + 
 + import static org . junit . Assert . * ; 
 + 
 + public class DescriptorTest 
 + { 
 + private final String ksname = " ks " ; 
 + private final String cfname = " cf " ; 
 + private final String cfId = ByteBufferUtil . bytesToHex ( ByteBufferUtil . bytes ( UUID . randomUUID ( ) ) ) ; 
 + private final File tempDataDir ; 
 + 
 + public DescriptorTest ( ) throws IOException 
 + { 
 + / / create CF directories , one without CFID and one with it 
 + tempDataDir = File . createTempFile ( " DescriptorTest " , null ) . getParentFile ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testFromFilename ( ) throws Exception 
 + { 
 + File cfIdDir = new File ( tempDataDir . getAbsolutePath ( ) + File . separator + ksname + File . separator + cfname + ' - ' + cfId ) ; 
 + testFromFilenameFor ( cfIdDir ) ; 
 + } 
 + 
 + @ Test 
 + public void testFromFilenameInBackup ( ) throws Exception 
 + { 
 + File backupDir = new File ( StringUtils . join ( new String [ ] { tempDataDir . getAbsolutePath ( ) , ksname , cfname + ' - ' + cfId , Directories . BACKUPS _ SUBDIR } , File . separator ) ) ; 
 + testFromFilenameFor ( backupDir ) ; 
 + } 
 + 
 + @ Test 
 + public void testFromFilenameInSnapshot ( ) throws Exception 
 + { 
 + File snapshotDir = new File ( StringUtils . join ( new String [ ] { tempDataDir . getAbsolutePath ( ) , ksname , cfname + ' - ' + cfId , Directories . SNAPSHOT _ SUBDIR , " snapshot _ name " } , File . separator ) ) ; 
 + testFromFilenameFor ( snapshotDir ) ; 
 + } 
 + 
 + @ Test 
 + public void testFromFilenameInLegacyDirectory ( ) throws Exception 
 + { 
 + File cfDir = new File ( tempDataDir . getAbsolutePath ( ) + File . separator + ksname + File . separator + cfname ) ; 
 + testFromFilenameFor ( cfDir ) ; 
 + } 
 + 
 + private void testFromFilenameFor ( File dir ) 
 + { 
 + / / normal 
 + checkFromFilename ( new Descriptor ( dir , ksname , cfname , 1 , Descriptor . Type . FINAL ) , false ) ; 
 + / / skip component ( for streaming lock file ) 
 + checkFromFilename ( new Descriptor ( dir , ksname , cfname , 2 , Descriptor . Type . FINAL ) , true ) ; 
 + / / tmp 
 + checkFromFilename ( new Descriptor ( dir , ksname , cfname , 3 , Descriptor . Type . TEMP ) , false ) ; 
 + / / secondary index 
 + String idxName = " myidx " ; 
 + File idxDir = new File ( dir . getAbsolutePath ( ) + File . separator + Directories . SECONDARY _ INDEX _ NAME _ SEPARATOR + idxName ) ; 
 + checkFromFilename ( new Descriptor ( idxDir , ksname , cfname + Directories . SECONDARY _ INDEX _ NAME _ SEPARATOR + idxName , 4 , Descriptor . Type . FINAL ) , false ) ; 
 + / / secondary index tmp 
 + checkFromFilename ( new Descriptor ( idxDir , ksname , cfname + Directories . SECONDARY _ INDEX _ NAME _ SEPARATOR + idxName , 5 , Descriptor . Type . TEMP ) , false ) ; 
 + 
 + / / legacy version 
 + checkFromFilename ( new Descriptor ( " ja " , dir , ksname , cfname , 1 , Descriptor . Type . FINAL ) , false ) ; 
 + / / legacy tmp 
 + checkFromFilename ( new Descriptor ( " ja " , dir , ksname , cfname , 2 , Descriptor . Type . TEMP ) , false ) ; 
 + / / legacy secondary index 
 + checkFromFilename ( new Descriptor ( " ja " , dir , ksname , cfname + Directories . SECONDARY _ INDEX _ NAME _ SEPARATOR + idxName , 3 , Descriptor . Type . FINAL ) , false ) ; 
 + } 
 + 
 + private void checkFromFilename ( Descriptor original , boolean skipComponent ) 
 + { 
 + File file = new File ( skipComponent ? original . baseFilename ( ) : original . filenameFor ( Component . DATA ) ) ; 
 + 
 + Pair < Descriptor , String > pair = Descriptor . fromFilename ( file . getParentFile ( ) , file . getName ( ) , skipComponent ) ; 
 + Descriptor desc = pair . left ; 
 + 
 + assertEquals ( original . directory , desc . directory ) ; 
 + assertEquals ( original . ksname , desc . ksname ) ; 
 + assertEquals ( original . cfname , desc . cfname ) ; 
 + assertEquals ( original . version , desc . version ) ; 
 + assertEquals ( original . generation , desc . generation ) ; 
 + assertEquals ( original . type , desc . type ) ; 
 + 
 + if ( skipComponent ) 
 + { 
 + assertNull ( pair . right ) ; 
 + } 
 + else 
 + { 
 + assertEquals ( Component . DATA . name ( ) , pair . right ) ; 
 + } 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java b / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java 
 index 32d07ac . . 157f89b 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java 
 @ @ - 69 , 10 + 69 , 10 @ @ public class SSTableUtils 
 if ( ! tempdir . delete ( ) | | ! tempdir . mkdir ( ) ) 
 throw new IOException ( " Temporary directory creation failed . " ) ; 
 tempdir . deleteOnExit ( ) ; 
 - File keyspaceDir = new File ( tempdir , keyspaceName ) ; 
 - keyspaceDir . mkdir ( ) ; 
 - keyspaceDir . deleteOnExit ( ) ; 
 - File datafile = new File ( new Descriptor ( keyspaceDir , keyspaceName , cfname , generation , Descriptor . Type . FINAL ) . filenameFor ( " Data . db " ) ) ; 
 + File cfDir = new File ( tempdir , keyspaceName + File . separator + cfname ) ; 
 + cfDir . mkdirs ( ) ; 
 + cfDir . deleteOnExit ( ) ; 
 + File datafile = new File ( new Descriptor ( cfDir , keyspaceName , cfname , generation , Descriptor . Type . FINAL ) . filenameFor ( " Data . db " ) ) ; 
 if ( ! datafile . createNewFile ( ) ) 
 throw new IOException ( " unable to create file " + datafile ) ; 
 datafile . deleteOnExit ( ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 26bf765 . . 301dc94 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 33 , 7 + 33 , 6 @ @ import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 
 import org . apache . commons . collections . IteratorUtils ; 
 - import org . apache . commons . lang . ArrayUtils ; 
 
 import com . google . common . collect . Iterables ; 
 import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; 
 @ @ - 41 , 7 + 40 , 6 @ @ import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 import org . apache . cassandra . concurrent . StageManager ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . db . IClock ; 
 import org . apache . cassandra . db . IClock . ClockRelationship ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . db . commitlog . CommitLogSegment ; 
 @ @ - 54 , 7 + 52 , 6 @ @ import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . io . sstable . * ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . service . StorageService ; 
 - import org . apache . cassandra . thrift . SliceRange ; 
 import org . apache . cassandra . utils . * ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 307 , 12 + 304 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 private static String getColumnFamilyFromFileName ( String filename ) 
 { 
 - return SSTable . Descriptor . fromFilename ( filename ) . cfname ; 
 + return Descriptor . fromFilename ( filename ) . cfname ; 
 } 
 
 public static int getGenerationFromFileName ( String filename ) 
 { 
 - return SSTable . Descriptor . fromFilename ( filename ) . generation ; 
 + return Descriptor . fromFilename ( filename ) . generation ; 
 } 
 
 / * 
 @ @ - 331 , 7 + 328 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 public String getTempSSTablePath ( String directory ) 
 { 
 - SSTable . Descriptor desc = new SSTable . Descriptor ( new File ( directory ) , 
 + Descriptor desc = new Descriptor ( new File ( directory ) , 
 table _ , 
 columnFamily _ , 
 fileIndexGenerator _ . incrementAndGet ( ) , 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / Descriptor . java b / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 new file mode 100644 
 index 0000000 . . 2dc6532 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 @ @ - 0 , 0 + 1 , 162 @ @ 
 + package org . apache . cassandra . io . sstable ; 
 + 
 + import java . io . File ; 
 + import java . util . StringTokenizer ; 
 + 
 + import com . google . common . base . Objects ; 
 + 
 + / * * 
 + * A SSTable is described by the keyspace and column family it contains data 
 + * for , a generation ( where higher generations contain more recent data ) and 
 + * an alphabetic version string . 
 + * 
 + * A descriptor can be marked as temporary , which influences generated filenames . 
 + * / 
 + public class Descriptor 
 + { 
 + public static final String LEGACY _ VERSION = " a " ; 
 + public static final String CURRENT _ VERSION = " d " ; 
 + 
 + public final File directory ; 
 + public final String version ; 
 + public final String ksname ; 
 + public final String cfname ; 
 + public final int generation ; 
 + public final boolean temporary ; 
 + private final int hashCode ; 
 + 
 + / * * 
 + * A descriptor that assumes CURRENT _ VERSION . 
 + * / 
 + public Descriptor ( File directory , String ksname , String cfname , int generation , boolean temp ) 
 + { 
 + this ( CURRENT _ VERSION , directory , ksname , cfname , generation , temp ) ; 
 + } 
 + 
 + public Descriptor ( String version , File directory , String ksname , String cfname , int generation , boolean temp ) 
 + { 
 + assert version ! = null & & directory ! = null & & ksname ! = null & & cfname ! = null ; 
 + this . version = version ; 
 + this . directory = directory ; 
 + this . ksname = ksname ; 
 + this . cfname = cfname ; 
 + this . generation = generation ; 
 + temporary = temp ; 
 + hashCode = Objects . hashCode ( directory , generation , ksname , cfname ) ; 
 + } 
 + 
 + / * * 
 + * @ param suffix A component suffix , such as ' Data . db ' / ' Index . db ' / etc 
 + * @ return A filename for this descriptor with the given suffix . 
 + * / 
 + public String filenameFor ( String suffix ) 
 + { 
 + StringBuilder buff = new StringBuilder ( ) ; 
 + buff . append ( directory ) . append ( File . separatorChar ) ; 
 + buff . append ( cfname ) . append ( " - " ) ; 
 + if ( temporary ) 
 + buff . append ( SSTable . TEMPFILE _ MARKER ) . append ( " - " ) ; 
 + if ( ! LEGACY _ VERSION . equals ( version ) ) 
 + buff . append ( version ) . append ( " - " ) ; 
 + buff . append ( generation ) . append ( " - " ) ; 
 + buff . append ( suffix ) ; 
 + return buff . toString ( ) ; 
 + } 
 + 
 + / * * 
 + * Filename of the form " < ksname > / < cfname > - [ tmp - ] [ < version > - ] < gen > - * " 
 + * @ param filename A full SSTable filename , including the directory . 
 + * @ return A SSTable . Descriptor for the filename . 
 + * / 
 + public static Descriptor fromFilename ( String filename ) 
 + { 
 + int separatorPos = filename . lastIndexOf ( File . separatorChar ) ; 
 + assert separatorPos ! = - 1 : " Filename must include parent directory . " ; 
 + File directory = new File ( filename . substring ( 0 , separatorPos ) ) ; 
 + String name = filename . substring ( separatorPos + 1 , filename . length ( ) ) ; 
 + 
 + / / name of parent directory is keyspace name 
 + String ksname = directory . getName ( ) ; 
 + 
 + / / tokenize the filename 
 + StringTokenizer st = new StringTokenizer ( name , " - " ) ; 
 + String nexttok = null ; 
 + 
 + / / all filenames must start with a column family 
 + String cfname = st . nextToken ( ) ; 
 + 
 + / / optional temporary marker 
 + nexttok = st . nextToken ( ) ; 
 + boolean temporary = false ; 
 + if ( nexttok . equals ( SSTable . TEMPFILE _ MARKER ) ) 
 + { 
 + temporary = true ; 
 + nexttok = st . nextToken ( ) ; 
 + } 
 + 
 + / / optional version string 
 + String version = LEGACY _ VERSION ; 
 + if ( versionValidate ( nexttok ) ) 
 + { 
 + version = nexttok ; 
 + nexttok = st . nextToken ( ) ; 
 + } 
 + int generation = Integer . parseInt ( nexttok ) ; 
 + 
 + return new Descriptor ( version , directory , ksname , cfname , generation , temporary ) ; 
 + } 
 + 
 + / * * 
 + * @ return A clone of this descriptor with the given ' temporary ' status . 
 + * / 
 + public Descriptor asTemporary ( boolean temporary ) 
 + { 
 + return new Descriptor ( version , directory , ksname , cfname , generation , temporary ) ; 
 + } 
 + 
 + / * * 
 + * @ return True if the given version string is not empty , and 
 + * contains all lowercase letters , as defined by java . lang . Character . 
 + * / 
 + private static boolean versionValidate ( String ver ) 
 + { 
 + if ( ver . length ( ) < 1 ) return false ; 
 + for ( char ch : ver . toCharArray ( ) ) 
 + if ( ! Character . isLetter ( ch ) | | ! Character . isLowerCase ( ch ) ) 
 + return false ; 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return this . filenameFor ( " < > " ) ; 
 + } 
 + 
 + @ Override 
 + public boolean equals ( Object o ) 
 + { 
 + if ( o = = this ) 
 + return true ; 
 + if ( ! ( o instanceof Descriptor ) ) 
 + return false ; 
 + Descriptor that = ( Descriptor ) o ; 
 + return that . directory . equals ( this . directory ) & & that . generation = = this . generation & & that . ksname . equals ( this . ksname ) & & that . cfname . equals ( this . cfname ) ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return hashCode ; 
 + } 
 + 
 + public boolean hasStringsInBloomFilter ( ) 
 + { 
 + return version . compareTo ( " c " ) < 0 ; 
 + } 
 + 
 + public boolean hasIntRowSize ( ) 
 + { 
 + return version . compareTo ( " d " ) < 0 ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTable . java b / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 index fa103ba . . c6415b3 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 @ @ - 25 , 7 + 25 , 6 @ @ import java . io . IOException ; 
 import java . util . Collections ; 
 import java . util . List ; 
 import java . util . Arrays ; 
 - import java . util . StringTokenizer ; 
 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 34 , 8 + 33 , 6 @ @ import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . utils . BloomFilter ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 
 - import com . google . common . base . Objects ; 
 - 
 / * * 
 * This class is built on top of the SequenceFile . It stores 
 * data on disk in sorted fashion . However the sorting is upto 
 @ @ - 167 , 11 + 164 , 6 @ @ public abstract class SSTable 
 return desc . ksname ; 
 } 
 
 - public static String parseTableName ( String filename ) 
 - { 
 - return Descriptor . fromFilename ( filename ) . ksname ; 
 - } 
 - 
 public static long getTotalBytes ( Iterable < SSTableReader > sstables ) 
 { 
 long sum = 0 ; 
 @ @ - 199 , 160 + 191 , 4 @ @ public abstract class SSTable 
 " path = ' " + getFilename ( ) + ' \ ' ' + 
 ' ) ' ; 
 } 
 - 
 - / * * 
 - * A SSTable is described by the keyspace and column family it contains data 
 - * for , a generation ( where higher generations contain more recent data ) and 
 - * an alphabetic version string . 
 - * 
 - * A descriptor can be marked as temporary , which influences generated filenames . 
 - * / 
 - public static class Descriptor 
 - { 
 - public static final String LEGACY _ VERSION = " a " ; 
 - public static final String CURRENT _ VERSION = " d " ; 
 - 
 - public final File directory ; 
 - public final String version ; 
 - public final String ksname ; 
 - public final String cfname ; 
 - public final int generation ; 
 - public final boolean temporary ; 
 - private final int hashCode ; 
 - 
 - / * * 
 - * A descriptor that assumes CURRENT _ VERSION . 
 - * / 
 - public Descriptor ( File directory , String ksname , String cfname , int generation , boolean temp ) 
 - { 
 - this ( CURRENT _ VERSION , directory , ksname , cfname , generation , temp ) ; 
 - } 
 - 
 - public Descriptor ( String version , File directory , String ksname , String cfname , int generation , boolean temp ) 
 - { 
 - assert version ! = null & & directory ! = null & & ksname ! = null & & cfname ! = null ; 
 - this . version = version ; 
 - this . directory = directory ; 
 - this . ksname = ksname ; 
 - this . cfname = cfname ; 
 - this . generation = generation ; 
 - temporary = temp ; 
 - hashCode = Objects . hashCode ( directory , generation , ksname , cfname ) ; 
 - } 
 - 
 - / * * 
 - * @ param suffix A component suffix , such as ' Data . db ' / ' Index . db ' / etc 
 - * @ return A filename for this descriptor with the given suffix . 
 - * / 
 - public String filenameFor ( String suffix ) 
 - { 
 - StringBuilder buff = new StringBuilder ( ) ; 
 - buff . append ( directory ) . append ( File . separatorChar ) ; 
 - buff . append ( cfname ) . append ( " - " ) ; 
 - if ( temporary ) 
 - buff . append ( TEMPFILE _ MARKER ) . append ( " - " ) ; 
 - if ( ! LEGACY _ VERSION . equals ( version ) ) 
 - buff . append ( version ) . append ( " - " ) ; 
 - buff . append ( generation ) . append ( " - " ) ; 
 - buff . append ( suffix ) ; 
 - return buff . toString ( ) ; 
 - } 
 - 
 - / * * 
 - * Filename of the form " < ksname > / < cfname > - [ tmp - ] [ < version > - ] < gen > - * " 
 - * @ param filename A full SSTable filename , including the directory . 
 - * @ return A SSTable . Descriptor for the filename . 
 - * / 
 - public static Descriptor fromFilename ( String filename ) 
 - { 
 - int separatorPos = filename . lastIndexOf ( File . separatorChar ) ; 
 - assert separatorPos ! = - 1 : " Filename must include parent directory . " ; 
 - File directory = new File ( filename . substring ( 0 , separatorPos ) ) ; 
 - String name = filename . substring ( separatorPos + 1 , filename . length ( ) ) ; 
 - 
 - / / name of parent directory is keyspace name 
 - String ksname = directory . getName ( ) ; 
 - 
 - / / tokenize the filename 
 - StringTokenizer st = new StringTokenizer ( name , " - " ) ; 
 - String nexttok = null ; 
 - 
 - / / all filenames must start with a column family 
 - String cfname = st . nextToken ( ) ; 
 - 
 - / / optional temporary marker 
 - nexttok = st . nextToken ( ) ; 
 - boolean temporary = false ; 
 - if ( nexttok . equals ( TEMPFILE _ MARKER ) ) 
 - { 
 - temporary = true ; 
 - nexttok = st . nextToken ( ) ; 
 - } 
 - 
 - / / optional version string 
 - String version = LEGACY _ VERSION ; 
 - if ( versionValidate ( nexttok ) ) 
 - { 
 - version = nexttok ; 
 - nexttok = st . nextToken ( ) ; 
 - } 
 - int generation = Integer . parseInt ( nexttok ) ; 
 - 
 - return new Descriptor ( version , directory , ksname , cfname , generation , temporary ) ; 
 - } 
 - 
 - / * * 
 - * @ return A clone of this descriptor with the given ' temporary ' status . 
 - * / 
 - public Descriptor asTemporary ( boolean temporary ) 
 - { 
 - return new Descriptor ( version , directory , ksname , cfname , generation , temporary ) ; 
 - } 
 - 
 - / * * 
 - * @ return True if the given version string is not empty , and 
 - * contains all lowercase letters , as defined by java . lang . Character . 
 - * / 
 - private static boolean versionValidate ( String ver ) 
 - { 
 - if ( ver . length ( ) < 1 ) return false ; 
 - for ( char ch : ver . toCharArray ( ) ) 
 - if ( ! Character . isLetter ( ch ) | | ! Character . isLowerCase ( ch ) ) 
 - return false ; 
 - return true ; 
 - } 
 - 
 - @ Override 
 - public String toString ( ) 
 - { 
 - return this . filenameFor ( " < > " ) ; 
 - } 
 - 
 - @ Override 
 - public boolean equals ( Object o ) 
 - { 
 - if ( o = = this ) 
 - return true ; 
 - if ( ! ( o instanceof Descriptor ) ) 
 - return false ; 
 - Descriptor that = ( Descriptor ) o ; 
 - return that . directory . equals ( this . directory ) & & that . generation = = this . generation & & that . ksname . equals ( this . ksname ) & & that . cfname . equals ( this . cfname ) ; 
 - } 
 - 
 - @ Override 
 - public int hashCode ( ) 
 - { 
 - return hashCode ; 
 - } 
 - 
 - public boolean hasStringsInBloomFilter ( ) 
 - { 
 - return version . compareTo ( " c " ) < 0 ; 
 - } 
 - 
 - public boolean hasIntRowSize ( ) 
 - { 
 - return version . compareTo ( " d " ) < 0 ; 
 - } 
 - } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java b / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java 
 index 446f36b . . ef83f2b 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java 
 @ @ - 42 , 7 + 42 , 7 @ @ public class SSTableTracker implements Iterable < SSTableReader > 
 private final String ksname ; 
 private final String cfname ; 
 
 - private final JMXInstrumentedCache < Pair < SSTable . Descriptor , DecoratedKey > , Long > keyCache ; 
 + private final JMXInstrumentedCache < Pair < Descriptor , DecoratedKey > , Long > keyCache ; 
 private final JMXInstrumentedCache < DecoratedKey , ColumnFamily > rowCache ; 
 
 public SSTableTracker ( String ksname , String cfname ) 
 @ @ - 50 , 7 + 50 , 7 @ @ public class SSTableTracker implements Iterable < SSTableReader > 
 this . ksname = ksname ; 
 this . cfname = cfname ; 
 sstables = Collections . emptySet ( ) ; 
 - keyCache = new JMXInstrumentedCache < Pair < SSTable . Descriptor , DecoratedKey > , Long > ( ksname , cfname + " KeyCache " , 0 ) ; 
 + keyCache = new JMXInstrumentedCache < Pair < Descriptor , DecoratedKey > , Long > ( ksname , cfname + " KeyCache " , 0 ) ; 
 rowCache = new JMXInstrumentedCache < DecoratedKey , ColumnFamily > ( ksname , cfname + " RowCache " , 0 ) ; 
 } 
 
 @ @ - 176 , 7 + 176 , 7 @ @ public class SSTableTracker implements Iterable < SSTableReader > 
 totalSize . addAndGet ( - size ) ; 
 } 
 
 - public JMXInstrumentedCache < Pair < SSTable . Descriptor , DecoratedKey > , Long > getKeyCache ( ) 
 + public JMXInstrumentedCache < Pair < Descriptor , DecoratedKey > , Long > getKeyCache ( ) 
 { 
 return keyCache ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / streaming / PendingFile . java b / src / java / org / apache / cassandra / streaming / PendingFile . java 
 index 9ebe238 . . 97966b4 100644 
 - - - a / src / java / org / apache / cassandra / streaming / PendingFile . java 
 + + + b / src / java / org / apache / cassandra / streaming / PendingFile . java 
 @ @ - 26 , 7 + 26 , 7 @ @ import java . io . DataOutputStream ; 
 import java . io . IOException ; 
 
 import org . apache . cassandra . io . ICompactSerializer ; 
 - import org . apache . cassandra . io . sstable . SSTable ; 
 + import org . apache . cassandra . io . sstable . Descriptor ; 
 
 class PendingFile 
 { 
 @ @ - 42 , 12 + 42 , 12 @ @ class PendingFile 
 return serializer _ ; 
 } 
 
 - private SSTable . Descriptor desc ; 
 + private Descriptor desc ; 
 private String component ; 
 private long expectedBytes ; 
 private long ptr ; 
 
 - public PendingFile ( SSTable . Descriptor desc , String component , long expectedBytes ) 
 + public PendingFile ( Descriptor desc , String component , long expectedBytes ) 
 { 
 this . desc = desc ; 
 this . component = component ; 
 @ @ - 70 , 7 + 70 , 7 @ @ class PendingFile 
 return component ; 
 } 
 
 - public SSTable . Descriptor getDescriptor ( ) 
 + public Descriptor getDescriptor ( ) 
 { 
 return desc ; 
 } 
 @ @ - 115 , 7 + 115 , 7 @ @ class PendingFile 
 
 public PendingFile deserialize ( DataInputStream dis ) throws IOException 
 { 
 - SSTable . Descriptor desc = SSTable . Descriptor . fromFilename ( dis . readUTF ( ) ) ; 
 + Descriptor desc = Descriptor . fromFilename ( dis . readUTF ( ) ) ; 
 String component = dis . readUTF ( ) ; 
 long expectedBytes = dis . readLong ( ) ; 
 return new PendingFile ( desc , component , expectedBytes ) ; 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamInitiateVerbHandler . java b / src / java / org / apache / cassandra / streaming / StreamInitiateVerbHandler . java 
 index e3f2640 . . 601b3fb 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamInitiateVerbHandler . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamInitiateVerbHandler . java 
 @ @ - 26 , 15 + 26 , 12 @ @ import java . util . * ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . Table ; 
 - import org . apache . cassandra . io . sstable . SSTable ; 
 + import org . apache . cassandra . io . sstable . Descriptor ; 
 import org . apache . cassandra . net . IVerbHandler ; 
 import org . apache . cassandra . net . Message ; 
 import org . apache . cassandra . net . MessagingService ; 
 - import org . apache . cassandra . streaming . StreamInitiateMessage ; 
 - import org . apache . cassandra . streaming . StreamInManager ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 @ @ - 106 , 18 + 103 , 18 @ @ public class StreamInitiateVerbHandler implements IVerbHandler 
 { 
 / * Create a local sstable for each remote sstable * / 
 LinkedHashMap < PendingFile , PendingFile > mapping = new LinkedHashMap < PendingFile , PendingFile > ( ) ; 
 - Map < SSTable . Descriptor , SSTable . Descriptor > sstables = new HashMap < SSTable . Descriptor , SSTable . Descriptor > ( ) ; 
 + Map < Descriptor , Descriptor > sstables = new HashMap < Descriptor , Descriptor > ( ) ; 
 for ( PendingFile remote : remoteFiles ) 
 { 
 - SSTable . Descriptor remotedesc = remote . getDescriptor ( ) ; 
 - SSTable . Descriptor localdesc = sstables . get ( remotedesc ) ; 
 + Descriptor remotedesc = remote . getDescriptor ( ) ; 
 + Descriptor localdesc = sstables . get ( remotedesc ) ; 
 if ( localdesc = = null ) 
 { 
 / / new local sstable 
 Table table = Table . open ( remotedesc . ksname ) ; 
 ColumnFamilyStore cfStore = table . getColumnFamilyStore ( remotedesc . cfname ) ; 
 
 - localdesc = SSTable . Descriptor . fromFilename ( cfStore . getFlushPath ( ) ) ; 
 + localdesc = Descriptor . fromFilename ( cfStore . getFlushPath ( ) ) ; 
 sstables . put ( remotedesc , localdesc ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamOut . java b / src / java / org / apache / cassandra / streaming / StreamOut . java 
 index 980feb7 . . 034c48c 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamOut . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamOut . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . commons . lang . StringUtils ; 
 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . db . Table ; 
 + import org . apache . cassandra . io . sstable . Descriptor ; 
 import org . apache . cassandra . io . sstable . SSTable ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 import org . apache . cassandra . net . Message ; 
 @ @ - 122 , 7 + 123 , 7 @ @ public class StreamOut 
 { 
 for ( String component : SSTable . components ) 
 { 
 - SSTable . Descriptor desc = sstable . getDescriptor ( ) ; 
 + Descriptor desc = sstable . getDescriptor ( ) ; 
 long filelen = new File ( desc . filenameFor ( component ) ) . length ( ) ; 
 pendingFiles [ i + + ] = new PendingFile ( desc , component , filelen ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 index 643c6ed . . b44b331 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 @ @ - 25 , 16 + 25 , 11 @ @ import java . util . * ; 
 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 - import static org . junit . Assert . * ; 
 
 import org . apache . cassandra . CleanupHelper ; 
 import org . apache . cassandra . io . util . BufferedRandomAccessFile ; 
 - import org . apache . cassandra . db . DecoratedKey ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 - import com . google . common . base . Predicate ; 
 - import com . google . common . base . Predicates ; 
 - 
 / * * 
 * Tests backwards compatibility for SSTables . Requires that older SSTables match up with the existing config file , 
 * and currently only tests specific cases for specific upgrades . 
 @ @ - 66 , 10 + 61 , 10 @ @ public class LegacySSTableTest extends CleanupHelper 
 / * * 
 * Get a descriptor for the legacy sstable at the given version . 
 * / 
 - protected SSTable . Descriptor getDescriptor ( String ver ) throws IOException 
 + protected Descriptor getDescriptor ( String ver ) throws IOException 
 { 
 File directory = new File ( LEGACY _ SSTABLE _ ROOT + File . separator + ver + File . separator + KSNAME ) ; 
 - return new SSTable . Descriptor ( ver , directory , KSNAME , CFNAME , 0 , false ) ; 
 + return new Descriptor ( ver , directory , KSNAME , CFNAME , 0 , false ) ; 
 } 
 
 / * * 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java b / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java 
 index 97bf2bc . . 9818d364 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java 
 @ @ - 52 , 7 + 52 , 7 @ @ public class SSTableUtils 
 File tabledir = new File ( tempdir , tablename ) ; 
 tabledir . mkdir ( ) ; 
 tabledir . deleteOnExit ( ) ; 
 - File datafile = new File ( new SSTable . Descriptor ( tabledir , tablename , cfname , 0 , 
 + File datafile = new File ( new Descriptor ( tabledir , tablename , cfname , 0 , 
 false ) . filenameFor ( " Data . db " ) ) ; 
 assert datafile . createNewFile ( ) ; 
 datafile . deleteOnExit ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java 
 index 446b4e9 . . fb3fce3 100644 
 - - - a / test / unit / org / apache / cassandra / streaming / BootstrapTest . java 
 + + + b / test / unit / org / apache / cassandra / streaming / BootstrapTest . java 
 @ @ - 19 , 16 + 19 , 13 @ @ 
 package org . apache . cassandra . streaming ; 
 
 import static junit . framework . Assert . assertEquals ; 
 - import static org . junit . Assert . * ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 - import java . util . HashMap ; 
 import java . util . Map ; 
 
 import org . apache . cassandra . SchemaLoader ; 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . io . sstable . SSTable ; 
 + import org . apache . cassandra . io . sstable . Descriptor ; 
 
 import org . junit . Test ; 
 
 @ @ - 37 , 7 + 34 , 7 @ @ public class BootstrapTest extends SchemaLoader 
 @ Test 
 public void testGetNewNames ( ) throws IOException 
 { 
 - SSTable . Descriptor desc = SSTable . Descriptor . fromFilename ( new File ( " Keyspace1 " , " Standard1 - 500 - Data . db " ) . toString ( ) ) ; 
 + Descriptor desc = Descriptor . fromFilename ( new File ( " Keyspace1 " , " Standard1 - 500 - Data . db " ) . toString ( ) ) ; 
 PendingFile [ ] pendingFiles = new PendingFile [ ] { new PendingFile ( desc , " Data . db " , 100 ) , 
 new PendingFile ( desc , " Index . db " , 100 ) , 
 new PendingFile ( desc , " Filter . db " , 100 ) } ;
