BLEU SCORE: 0.06870636427700047

TEST MSG: Fix validation with multiple CONTAINS clauses
GENERATED MSG: Handle SliceQueryFilter with empty bounds in CompositesSearcher

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 815bce1 . . 09ab91b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 1 <nl> + * Fix validation with multiple CONTAINS clause ( CASSANDRA - 8131 ) <nl> * Fix validation of collections in TriggerExecutor ( CASSANDRA - 8146 ) <nl> * Fix IllegalArgumentException when a list of IN values containing tuples <nl> is passed as a single arg to a prepared statement with the v1 or v2 <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index a8c9d44 . . 233f3db 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import org . github . jamm . MemoryMeter ; <nl> <nl> import org . apache . cassandra . auth . Permission ; <nl> import org . apache . cassandra . cql3 . * ; <nl> + import org . apache . cassandra . cql3 . statements . SingleColumnRestriction . Contains ; <nl> import org . apache . cassandra . db . composites . * ; <nl> import org . apache . cassandra . transport . messages . ResultMessage ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> @ @ - 1349 , 6 + 1350 , 27 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> throw new InvalidRequestException ( String . format ( " SELECT DISTINCT queries must request all the partition key columns ( missing % s ) " , def . name ) ) ; <nl> } <nl> <nl> + / * * <nl> + * Checks if the specified column is restricted by multiple contains or contains key . <nl> + * <nl> + * @ param columnDef the definition of the column to check <nl> + * @ return < code > true < / code > the specified column is restricted by multiple contains or contains key , <nl> + * < code > false < / code > otherwise <nl> + * / <nl> + private boolean isRestrictedByMultipleContains ( ColumnDefinition columnDef ) <nl> + { <nl> + if ( ! columnDef . type . isCollection ( ) ) <nl> + return false ; <nl> + <nl> + Restriction restriction = metadataRestrictions . get ( columnDef . name ) ; <nl> + <nl> + if ( ! ( restriction instanceof Contains ) ) <nl> + return false ; <nl> + <nl> + Contains contains = ( Contains ) restriction ; <nl> + return ( contains . numberOfValues ( ) + contains . numberOfKeys ( ) ) > 1 ; <nl> + } <nl> + <nl> public static class RawStatement extends CFStatement <nl> { <nl> private final Parameters parameters ; <nl> @ @ - 2011 , 7 + 2033 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> / / We will potentially filter data if either : <nl> / / - Have more than one IndexExpression <nl> / / - Have no index expression and the column filter is not the identity <nl> - if ( stmt . restrictedColumns . size ( ) > 1 | | ( stmt . restrictedColumns . isEmpty ( ) & & ! stmt . columnFilterIsIdentity ( ) ) ) <nl> + if ( needFiltering ( stmt ) ) <nl> throw new InvalidRequestException ( " Cannot execute this query as it might involve data filtering and " + <nl> " thus may have unpredictable performance . If you want to execute " + <nl> " this query despite the performance unpredictability , use ALLOW FILTERING " ) ; <nl> @ @ - 2036 , 6 + 2058 , 21 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> } <nl> } <nl> <nl> + / * * <nl> + * Checks if the specified statement will need to filter the data . <nl> + * <nl> + * @ param stmt the statement to test . <nl> + * @ return < code > true < / code > if the specified statement will need to filter the data , < code > false < / code > <nl> + * otherwise . <nl> + * / <nl> + private static boolean needFiltering ( SelectStatement stmt ) <nl> + { <nl> + return stmt . restrictedColumns . size ( ) > 1 <nl> + | | ( stmt . restrictedColumns . isEmpty ( ) & & ! stmt . columnFilterIsIdentity ( ) ) <nl> + | | ( ! stmt . restrictedColumns . isEmpty ( ) <nl> + & & stmt . isRestrictedByMultipleContains ( Iterables . getOnlyElement ( stmt . restrictedColumns ) ) ) ; <nl> + } <nl> + <nl> private int indexOf ( ColumnDefinition def , Selection selection ) <nl> { <nl> return indexOf ( def , selection . getColumns ( ) . iterator ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SingleColumnRestriction . java b / src / java / org / apache / cassandra / cql3 / statements / SingleColumnRestriction . java <nl> index bc77357 . . 1ee0ebe 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SingleColumnRestriction . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SingleColumnRestriction . java <nl> @ @ - 334 , 6 + 334 , 16 @ @ public abstract class SingleColumnRestriction implements Restriction <nl> return keys ! = null ; <nl> } <nl> <nl> + public int numberOfValues ( ) <nl> + { <nl> + return values = = null ? 0 : values . size ( ) ; <nl> + } <nl> + <nl> + public int numberOfKeys ( ) <nl> + { <nl> + return keys = = null ? 0 : keys . size ( ) ; <nl> + } <nl> + <nl> public void add ( Term t , boolean isKey ) <nl> { <nl> if ( isKey ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java b / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java <nl> index 605f3ed . . f854ec6 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java <nl> @ @ - 42 , 6 + 42 , 9 @ @ public class ContainsRelationTest extends CQLTester <nl> assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , " lmn " ) , <nl> row ( " test " , 5 , set ( " lmn " ) ) <nl> ) ; <nl> + <nl> + assertInvalid ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS ? " , " xyz " , " lmn " , " notPresent " ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " , " xyz " , " lmn " , " notPresent " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 65 , 6 + 68 , 11 @ @ public class ContainsRelationTest extends CQLTester <nl> assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? ; " , " test " , 5 , " lmn " ) , <nl> row ( " test " , 5 , list ( " lmn " ) ) <nl> ) ; <nl> + <nl> + assertInvalid ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? " , <nl> + " test " , 5 , " lmn " , " notPresent " ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " , <nl> + " test " , 5 , " lmn " , " notPresent " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 87 , 6 + 95 , 14 @ @ public class ContainsRelationTest extends CQLTester <nl> assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? " , " test " , 5 , " lmn " ) , <nl> row ( " test " , 5 , map ( " lmn " , " foo " ) ) <nl> ) ; <nl> + <nl> + assertInvalid ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS KEY ? " , <nl> + " test " , 5 , " lmn " , " notPresent " ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS KEY ? ALLOW FILTERING " , <nl> + " test " , 5 , " lmn " , " notPresent " ) ) ; <nl> + <nl> + assertInvalid ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS ? " , <nl> + " test " , 5 , " lmn " , " foo " ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 110 , 6 + 126 , 12 @ @ public class ContainsRelationTest extends CQLTester <nl> assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , " foo " ) , <nl> row ( " test " , 5 , map ( " lmn " , " foo " ) ) <nl> ) ; <nl> + <nl> + assertInvalid ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? " <nl> + , " test " , 5 , " foo " , " notPresent " ) ; <nl> + <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " <nl> + , " test " , 5 , " foo " , " notPresent " ) ) ; <nl> } <nl> <nl> / / See CASSANDRA - 7525
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 815bce1 . . 09ab91b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 1 
 + * Fix validation with multiple CONTAINS clause ( CASSANDRA - 8131 ) 
 * Fix validation of collections in TriggerExecutor ( CASSANDRA - 8146 ) 
 * Fix IllegalArgumentException when a list of IN values containing tuples 
 is passed as a single arg to a prepared statement with the v1 or v2 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index a8c9d44 . . 233f3db 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import org . github . jamm . MemoryMeter ; 
 
 import org . apache . cassandra . auth . Permission ; 
 import org . apache . cassandra . cql3 . * ; 
 + import org . apache . cassandra . cql3 . statements . SingleColumnRestriction . Contains ; 
 import org . apache . cassandra . db . composites . * ; 
 import org . apache . cassandra . transport . messages . ResultMessage ; 
 import org . apache . cassandra . config . CFMetaData ; 
 @ @ - 1349 , 6 + 1350 , 27 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 throw new InvalidRequestException ( String . format ( " SELECT DISTINCT queries must request all the partition key columns ( missing % s ) " , def . name ) ) ; 
 } 
 
 + / * * 
 + * Checks if the specified column is restricted by multiple contains or contains key . 
 + * 
 + * @ param columnDef the definition of the column to check 
 + * @ return < code > true < / code > the specified column is restricted by multiple contains or contains key , 
 + * < code > false < / code > otherwise 
 + * / 
 + private boolean isRestrictedByMultipleContains ( ColumnDefinition columnDef ) 
 + { 
 + if ( ! columnDef . type . isCollection ( ) ) 
 + return false ; 
 + 
 + Restriction restriction = metadataRestrictions . get ( columnDef . name ) ; 
 + 
 + if ( ! ( restriction instanceof Contains ) ) 
 + return false ; 
 + 
 + Contains contains = ( Contains ) restriction ; 
 + return ( contains . numberOfValues ( ) + contains . numberOfKeys ( ) ) > 1 ; 
 + } 
 + 
 public static class RawStatement extends CFStatement 
 { 
 private final Parameters parameters ; 
 @ @ - 2011 , 7 + 2033 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 / / We will potentially filter data if either : 
 / / - Have more than one IndexExpression 
 / / - Have no index expression and the column filter is not the identity 
 - if ( stmt . restrictedColumns . size ( ) > 1 | | ( stmt . restrictedColumns . isEmpty ( ) & & ! stmt . columnFilterIsIdentity ( ) ) ) 
 + if ( needFiltering ( stmt ) ) 
 throw new InvalidRequestException ( " Cannot execute this query as it might involve data filtering and " + 
 " thus may have unpredictable performance . If you want to execute " + 
 " this query despite the performance unpredictability , use ALLOW FILTERING " ) ; 
 @ @ - 2036 , 6 + 2058 , 21 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 } 
 } 
 
 + / * * 
 + * Checks if the specified statement will need to filter the data . 
 + * 
 + * @ param stmt the statement to test . 
 + * @ return < code > true < / code > if the specified statement will need to filter the data , < code > false < / code > 
 + * otherwise . 
 + * / 
 + private static boolean needFiltering ( SelectStatement stmt ) 
 + { 
 + return stmt . restrictedColumns . size ( ) > 1 
 + | | ( stmt . restrictedColumns . isEmpty ( ) & & ! stmt . columnFilterIsIdentity ( ) ) 
 + | | ( ! stmt . restrictedColumns . isEmpty ( ) 
 + & & stmt . isRestrictedByMultipleContains ( Iterables . getOnlyElement ( stmt . restrictedColumns ) ) ) ; 
 + } 
 + 
 private int indexOf ( ColumnDefinition def , Selection selection ) 
 { 
 return indexOf ( def , selection . getColumns ( ) . iterator ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SingleColumnRestriction . java b / src / java / org / apache / cassandra / cql3 / statements / SingleColumnRestriction . java 
 index bc77357 . . 1ee0ebe 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SingleColumnRestriction . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SingleColumnRestriction . java 
 @ @ - 334 , 6 + 334 , 16 @ @ public abstract class SingleColumnRestriction implements Restriction 
 return keys ! = null ; 
 } 
 
 + public int numberOfValues ( ) 
 + { 
 + return values = = null ? 0 : values . size ( ) ; 
 + } 
 + 
 + public int numberOfKeys ( ) 
 + { 
 + return keys = = null ? 0 : keys . size ( ) ; 
 + } 
 + 
 public void add ( Term t , boolean isKey ) 
 { 
 if ( isKey ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java b / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java 
 index 605f3ed . . f854ec6 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / ContainsRelationTest . java 
 @ @ - 42 , 6 + 42 , 9 @ @ public class ContainsRelationTest extends CQLTester 
 assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , " lmn " ) , 
 row ( " test " , 5 , set ( " lmn " ) ) 
 ) ; 
 + 
 + assertInvalid ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS ? " , " xyz " , " lmn " , " notPresent " ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " , " xyz " , " lmn " , " notPresent " ) ) ; 
 } 
 
 @ Test 
 @ @ - 65 , 6 + 68 , 11 @ @ public class ContainsRelationTest extends CQLTester 
 assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? ; " , " test " , 5 , " lmn " ) , 
 row ( " test " , 5 , list ( " lmn " ) ) 
 ) ; 
 + 
 + assertInvalid ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? " , 
 + " test " , 5 , " lmn " , " notPresent " ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " , 
 + " test " , 5 , " lmn " , " notPresent " ) ) ; 
 } 
 
 @ Test 
 @ @ - 87 , 6 + 95 , 14 @ @ public class ContainsRelationTest extends CQLTester 
 assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? " , " test " , 5 , " lmn " ) , 
 row ( " test " , 5 , map ( " lmn " , " foo " ) ) 
 ) ; 
 + 
 + assertInvalid ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS KEY ? " , 
 + " test " , 5 , " lmn " , " notPresent " ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS KEY ? ALLOW FILTERING " , 
 + " test " , 5 , " lmn " , " notPresent " ) ) ; 
 + 
 + assertInvalid ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS KEY ? AND categories CONTAINS ? " , 
 + " test " , 5 , " lmn " , " foo " ) ; 
 } 
 
 @ Test 
 @ @ - 110 , 6 + 126 , 12 @ @ public class ContainsRelationTest extends CQLTester 
 assertRows ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? " , " test " , 5 , " foo " ) , 
 row ( " test " , 5 , map ( " lmn " , " foo " ) ) 
 ) ; 
 + 
 + assertInvalid ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? " 
 + , " test " , 5 , " foo " , " notPresent " ) ; 
 + 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE account = ? AND id = ? AND categories CONTAINS ? AND categories CONTAINS ? ALLOW FILTERING " 
 + , " test " , 5 , " foo " , " notPresent " ) ) ; 
 } 
 
 / / See CASSANDRA - 7525

NEAREST DIFF:
ELIMINATEDSENTENCE
