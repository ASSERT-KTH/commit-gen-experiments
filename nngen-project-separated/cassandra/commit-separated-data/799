BLEU SCORE: 0.2259005009024612

TEST MSG: Improve compaction log
GENERATED MSG: clean up CompactionTask

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f441f8b . . 12a6ddb 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 8 <nl> + * Improve details in compaction log message ( CASSANDRA - 12080 ) <nl> * Allow unset values in CQLSSTableWriter ( CASSANDRA - 11911 ) <nl> * Chunk cache to request compressor - compatible buffers if pool space is exhausted ( CASSANDRA - 11993 ) <nl> * Remove DatabaseDescriptor dependencies from SequentialWriter ( CASSANDRA - 11579 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java <nl> index d39da2a . . 0111aec 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java <nl> @ @ - 63 , 6 + 63 , 7 @ @ public class CompactionIterator extends CompactionInfo . Holder implements Unfilte <nl> <nl> private final long totalBytes ; <nl> private long bytesRead ; <nl> + private long totalSourceCQLRows ; <nl> <nl> / * <nl> * counters for merged rows . <nl> @ @ - 136 , 6 + 137 , 11 @ @ public class CompactionIterator extends CompactionInfo . Holder implements Unfilte <nl> return mergeCounters ; <nl> } <nl> <nl> + public long getTotalSourceCQLRows ( ) <nl> + { <nl> + return totalSourceCQLRows ; <nl> + } <nl> + <nl> private UnfilteredPartitionIterators . MergeListener listener ( ) <nl> { <nl> return new UnfilteredPartitionIterators . MergeListener ( ) <nl> @ @ - 287 , 6 + 293 , 7 @ @ public class CompactionIterator extends CompactionInfo . Holder implements Unfilte <nl> @ Override <nl> protected void updateProgress ( ) <nl> { <nl> + totalSourceCQLRows + + ; <nl> if ( ( + + compactedUnfiltered ) % UNFILTERED _ TO _ UPDATE _ PROGRESS = = 0 ) <nl> updateBytesRead ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> index b3a94bb . . cb6faab 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> @ @ - 160 , 6 + 160 , 7 @ @ public class CompactionTask extends AbstractCompactionTask <nl> Collection < SSTableReader > newSStables ; <nl> <nl> long [ ] mergedRowCounts ; <nl> + long totalSourceCQLRows ; <nl> <nl> / / SSTableScanners need to be closed before markCompactedSSTablesReplaced call as scanners contain references <nl> / / to both ifile and dfile and SSTR will throw deletion errors on Windows if it tries to delete before scanner is closed . <nl> @ @ - 203 , 6 + 204 , 8 @ @ public class CompactionTask extends AbstractCompactionTask <nl> collector . finishCompaction ( ci ) ; <nl> <nl> mergedRowCounts = ci . getMergedRowCounts ( ) ; <nl> + <nl> + totalSourceCQLRows = ci . getTotalSourceCQLRows ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 219 , 8 + 222 , 11 @ @ public class CompactionTask extends AbstractCompactionTask <nl> newSSTableNames . append ( reader . descriptor . baseFilename ( ) ) . append ( " , " ) ; <nl> <nl> long totalSourceRows = 0 ; <nl> + for ( int i = 0 ; i < mergedRowCounts . length ; i + + ) <nl> + totalSourceRows + = mergedRowCounts [ i ] * ( i + 1 ) ; <nl> + <nl> String mergeSummary = updateCompactionHistory ( cfs . keyspace . getName ( ) , cfs . getColumnFamilyName ( ) , mergedRowCounts , startsize , endsize ) ; <nl> - logger . debug ( String . format ( " Compacted ( % s ) % d sstables to [ % s ] to level = % d . % s to % s ( ~ % d % % of original ) in % , dms . Throughput = % s . % , d total partitions merged to % , d . Partition merge counts were { % s } " , <nl> + logger . debug ( String . format ( " Compacted ( % s ) % d sstables to [ % s ] to level = % d . % s to % s ( ~ % d % % of original ) in % , dms . Read Throughput = % s , Write Throughput = % s , Row Throughput = ~ % , d / s . % , d total partitions merged to % , d . Partition merge counts were { % s } " , <nl> taskId , <nl> transaction . originals ( ) . size ( ) , <nl> newSSTableNames . toString ( ) , <nl> @ @ - 229 , 7 + 235 , 9 @ @ public class CompactionTask extends AbstractCompactionTask <nl> FBUtilities . prettyPrintMemory ( endsize ) , <nl> ( int ) ( ratio * 100 ) , <nl> dTime , <nl> + FBUtilities . prettyPrintMemoryPerSecond ( startsize , durationInNano ) , <nl> FBUtilities . prettyPrintMemoryPerSecond ( endsize , durationInNano ) , <nl> + ( int ) totalSourceCQLRows / ( TimeUnit . NANOSECONDS . toSeconds ( durationInNano ) + 1 ) , <nl> totalSourceRows , <nl> totalKeysWritten , <nl> mergeSummary ) ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / concurrent / AIOExecutorService . java b / src / java / org / apache / cassandra / concurrent / AIOExecutorService . java <nl> deleted file mode 100644 <nl> index f265564 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / concurrent / AIOExecutorService . java <nl> + + + / dev / null <nl> @ @ - 1 , 309 + 0 , 0 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . concurrent ; <nl> - <nl> - import java . util . Collection ; <nl> - import java . util . List ; <nl> - import java . util . concurrent . * ; <nl> - <nl> - public class AIOExecutorService implements ExecutorService <nl> - { <nl> - private ExecutorService executorService _ ; <nl> - <nl> - public AIOExecutorService ( int corePoolSize , <nl> - int maximumPoolSize , <nl> - long keepAliveTime , <nl> - TimeUnit unit , <nl> - BlockingQueue < Runnable > workQueue , <nl> - ThreadFactory threadFactory ) <nl> - { <nl> - executorService _ = new ThreadPoolExecutor ( corePoolSize , maximumPoolSize , keepAliveTime , unit , workQueue , threadFactory ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Executes the given command at some time in the future . The command <nl> - * may execute in a new thread , in a pooled thread , or in the calling <nl> - * thread , at the discretion of the < tt > Executor < / tt > implementation . <nl> - * <nl> - * @ param command the runnable task <nl> - * @ throws RejectedExecutionException if this task cannot be <nl> - * accepted for execution . <nl> - * @ throws NullPointerException if command is null <nl> - * / <nl> - public void execute ( Runnable command ) <nl> - { <nl> - executorService _ . execute ( command ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Initiates an orderly shutdown in which previously submitted <nl> - * tasks are executed , but no new tasks will be accepted . <nl> - * Invocation has no additional effect if already shut down . <nl> - * <nl> - * < p > This method does not wait for previously submitted tasks to <nl> - * complete execution . Use { @ link # awaitTermination awaitTermination } <nl> - * to do that . <nl> - * <nl> - * @ throws SecurityException if a security manager exists and <nl> - * shutting down this ExecutorService may manipulate <nl> - * threads that the caller is not permitted to modify <nl> - * because it does not hold { @ link <nl> - * java . lang . RuntimePermission } < tt > ( " modifyThread " ) < / tt > , <nl> - * or the security manager ' s < tt > checkAccess < / tt > method <nl> - * denies access . <nl> - * / <nl> - public void shutdown ( ) <nl> - { <nl> - / * This is a noop . * / <nl> - } <nl> - <nl> - / * * <nl> - * Attempts to stop all actively executing tasks , halts the <nl> - * processing of waiting tasks , and returns a list of the tasks <nl> - * that were awaiting execution . <nl> - * <nl> - * < p > This method does not wait for actively executing tasks to <nl> - * terminate . Use { @ link # awaitTermination awaitTermination } to <nl> - * do that . <nl> - * <nl> - * < p > There are no guarantees beyond best - effort attempts to stop <nl> - * processing actively executing tasks . For example , typical <nl> - * implementations will cancel via { @ link Thread # interrupt } , so any <nl> - * task that fails to respond to interrupts may never terminate . <nl> - * <nl> - * @ return list of tasks that never commenced execution <nl> - * @ throws SecurityException if a security manager exists and <nl> - * shutting down this ExecutorService may manipulate <nl> - * threads that the caller is not permitted to modify <nl> - * because it does not hold { @ link <nl> - * java . lang . RuntimePermission } < tt > ( " modifyThread " ) < / tt > , <nl> - * or the security manager ' s < tt > checkAccess < / tt > method <nl> - * denies access . <nl> - * / <nl> - public List < Runnable > shutdownNow ( ) <nl> - { <nl> - return executorService _ . shutdownNow ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Returns < tt > true < / tt > if this executor has been shut down . <nl> - * <nl> - * @ return < tt > true < / tt > if this executor has been shut down <nl> - * / <nl> - public boolean isShutdown ( ) <nl> - { <nl> - return executorService _ . isShutdown ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Returns < tt > true < / tt > if all tasks have completed following shut down . <nl> - * Note that < tt > isTerminated < / tt > is never < tt > true < / tt > unless <nl> - * either < tt > shutdown < / tt > or < tt > shutdownNow < / tt > was called first . <nl> - * <nl> - * @ return < tt > true < / tt > if all tasks have completed following shut down <nl> - * / <nl> - public boolean isTerminated ( ) <nl> - { <nl> - return executorService _ . isTerminated ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Blocks until all tasks have completed execution after a shutdown <nl> - * request , or the timeout occurs , or the current thread is <nl> - * interrupted , whichever happens first . <nl> - * <nl> - * @ param timeout the maximum time to wait <nl> - * @ param unit the time unit of the timeout argument <nl> - * @ return < tt > true < / tt > if this executor terminated and <nl> - * < tt > false < / tt > if the timeout elapsed before termination <nl> - * @ throws InterruptedException if interrupted while waiting <nl> - * / <nl> - public boolean awaitTermination ( long timeout , TimeUnit unit ) throws InterruptedException <nl> - { <nl> - return executorService _ . awaitTermination ( timeout , unit ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Submits a value - returning task for execution and returns a <nl> - * Future representing the pending results of the task . The <nl> - * Future ' s < tt > get < / tt > method will return the task ' s result upon <nl> - * successful completion . <nl> - * <nl> - * < p > <nl> - * If you would like to immediately block waiting <nl> - * for a task , you can use constructions of the form <nl> - * < tt > result = exec . submit ( aCallable ) . get ( ) ; < / tt > <nl> - * <nl> - * < p > Note : The { @ link Executors } class includes a set of methods <nl> - * that can convert some other common closure - like objects , <nl> - * for example , { @ link java . security . PrivilegedAction } to <nl> - * { @ link Callable } form so they can be submitted . <nl> - * <nl> - * @ param task the task to submit <nl> - * @ return a Future representing pending completion of the task <nl> - * @ throws RejectedExecutionException if the task cannot be <nl> - * scheduled for execution <nl> - * @ throws NullPointerException if the task is null <nl> - * / <nl> - public < T > Future < T > submit ( Callable < T > task ) <nl> - { <nl> - return executorService _ . submit ( task ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Submits a Runnable task for execution and returns a Future <nl> - * representing that task . The Future ' s < tt > get < / tt > method will <nl> - * return the given result upon successful completion . <nl> - * <nl> - * @ param task the task to submit <nl> - * @ param result the result to return <nl> - * @ return a Future representing pending completion of the task <nl> - * @ throws RejectedExecutionException if the task cannot be <nl> - * scheduled for execution <nl> - * @ throws NullPointerException if the task is null <nl> - * / <nl> - public < T > Future < T > submit ( Runnable task , T result ) <nl> - { <nl> - return executorService _ . submit ( task , result ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Submits a Runnable task for execution and returns a Future <nl> - * representing that task . The Future ' s < tt > get < / tt > method will <nl> - * return < tt > null < / tt > upon < em > successful < / em > completion . <nl> - * <nl> - * @ param task the task to submit <nl> - * @ return a Future representing pending completion of the task <nl> - * @ throws RejectedExecutionException if the task cannot be <nl> - * scheduled for execution <nl> - * @ throws NullPointerException if the task is null <nl> - * / <nl> - public Future < ? > submit ( Runnable task ) <nl> - { <nl> - return executorService _ . submit ( task ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Executes the given tasks , returning a list of Futures holding <nl> - * their status and results when all complete . <nl> - * { @ link Future # isDone } is < tt > true < / tt > for each <nl> - * element of the returned list . <nl> - * Note that a < em > completed < / em > task could have <nl> - * terminated either normally or by throwing an exception . <nl> - * The results of this method are undefined if the given <nl> - * collection is modified while this operation is in progress . <nl> - * <nl> - * @ param tasks the collection of tasks <nl> - * @ return A list of Futures representing the tasks , in the same <nl> - * sequential order as produced by the iterator for the <nl> - * given task list , each of which has completed . <nl> - * @ throws InterruptedException if interrupted while waiting , in <nl> - * which case unfinished tasks are cancelled . <nl> - * @ throws NullPointerException if tasks or any of its elements are < tt > null < / tt > <nl> - * @ throws RejectedExecutionException if any task cannot be <nl> - * scheduled for execution <nl> - * / <nl> - <nl> - public < T > List < Future < T > > invokeAll ( Collection < ? extends Callable < T > > tasks ) throws InterruptedException <nl> - { <nl> - return executorService _ . invokeAll ( tasks ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Executes the given tasks , returning a list of Futures holding <nl> - * their status and results <nl> - * when all complete or the timeout expires , whichever happens first . <nl> - * { @ link Future # isDone } is < tt > true < / tt > for each <nl> - * element of the returned list . <nl> - * Upon return , tasks that have not completed are cancelled . <nl> - * Note that a < em > completed < / em > task could have <nl> - * terminated either normally or by throwing an exception . <nl> - * The results of this method are undefined if the given <nl> - * collection is modified while this operation is in progress . <nl> - * <nl> - * @ param tasks the collection of tasks <nl> - * @ param timeout the maximum time to wait <nl> - * @ param unit the time unit of the timeout argument <nl> - * @ return a list of Futures representing the tasks , in the same <nl> - * sequential order as produced by the iterator for the <nl> - * given task list . If the operation did not time out , <nl> - * each task will have completed . If it did time out , some <nl> - * of these tasks will not have completed . <nl> - * @ throws InterruptedException if interrupted while waiting , in <nl> - * which case unfinished tasks are cancelled <nl> - * @ throws NullPointerException if tasks , any of its elements , or <nl> - * unit are < tt > null < / tt > <nl> - * @ throws RejectedExecutionException if any task cannot be scheduled <nl> - * for execution <nl> - * / <nl> - public < T > List < Future < T > > invokeAll ( Collection < ? extends Callable < T > > tasks , long timeout , TimeUnit unit ) throws InterruptedException <nl> - { <nl> - return executorService _ . invokeAll ( tasks , timeout , unit ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Executes the given tasks , returning the result <nl> - * of one that has completed successfully ( i . e . , without throwing <nl> - * an exception ) , if any do . Upon normal or exceptional return , <nl> - * tasks that have not completed are cancelled . <nl> - * The results of this method are undefined if the given <nl> - * collection is modified while this operation is in progress . <nl> - * <nl> - * @ param tasks the collection of tasks <nl> - * @ return the result returned by one of the tasks <nl> - * @ throws InterruptedException if interrupted while waiting <nl> - * @ throws NullPointerException if tasks or any of its elements <nl> - * are < tt > null < / tt > <nl> - * @ throws IllegalArgumentException if tasks is empty <nl> - * @ throws ExecutionException if no task successfully completes <nl> - * @ throws RejectedExecutionException if tasks cannot be scheduled <nl> - * for execution <nl> - * / <nl> - public < T > T invokeAny ( Collection < ? extends Callable < T > > tasks ) throws InterruptedException , ExecutionException <nl> - { <nl> - return executorService _ . invokeAny ( tasks ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Executes the given tasks , returning the result <nl> - * of one that has completed successfully ( i . e . , without throwing <nl> - * an exception ) , if any do before the given timeout elapses . <nl> - * Upon normal or exceptional return , tasks that have not <nl> - * completed are cancelled . <nl> - * The results of this method are undefined if the given <nl> - * collection is modified while this operation is in progress . <nl> - * <nl> - * @ param tasks the collection of tasks <nl> - * @ param timeout the maximum time to wait <nl> - * @ param unit the time unit of the timeout argument <nl> - * @ return the result returned by one of the tasks . <nl> - * @ throws InterruptedException if interrupted while waiting <nl> - * @ throws NullPointerException if tasks , any of its elements , or <nl> - * unit are < tt > null < / tt > <nl> - * @ throws TimeoutException if the given timeout elapses before <nl> - * any task successfully completes <nl> - * @ throws ExecutionException if no task successfully completes <nl> - * @ throws RejectedExecutionException if tasks cannot be scheduled <nl> - * for execution <nl> - * / <nl> - public < T > T invokeAny ( Collection < ? extends Callable < T > > tasks , long timeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException <nl> - { <nl> - return executorService _ . invokeAny ( tasks , timeout , unit ) ; <nl> - } <nl> - }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f441f8b . . 12a6ddb 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 8 
 + * Improve details in compaction log message ( CASSANDRA - 12080 ) 
 * Allow unset values in CQLSSTableWriter ( CASSANDRA - 11911 ) 
 * Chunk cache to request compressor - compatible buffers if pool space is exhausted ( CASSANDRA - 11993 ) 
 * Remove DatabaseDescriptor dependencies from SequentialWriter ( CASSANDRA - 11579 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java 
 index d39da2a . . 0111aec 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java 
 @ @ - 63 , 6 + 63 , 7 @ @ public class CompactionIterator extends CompactionInfo . Holder implements Unfilte 
 
 private final long totalBytes ; 
 private long bytesRead ; 
 + private long totalSourceCQLRows ; 
 
 / * 
 * counters for merged rows . 
 @ @ - 136 , 6 + 137 , 11 @ @ public class CompactionIterator extends CompactionInfo . Holder implements Unfilte 
 return mergeCounters ; 
 } 
 
 + public long getTotalSourceCQLRows ( ) 
 + { 
 + return totalSourceCQLRows ; 
 + } 
 + 
 private UnfilteredPartitionIterators . MergeListener listener ( ) 
 { 
 return new UnfilteredPartitionIterators . MergeListener ( ) 
 @ @ - 287 , 6 + 293 , 7 @ @ public class CompactionIterator extends CompactionInfo . Holder implements Unfilte 
 @ Override 
 protected void updateProgress ( ) 
 { 
 + totalSourceCQLRows + + ; 
 if ( ( + + compactedUnfiltered ) % UNFILTERED _ TO _ UPDATE _ PROGRESS = = 0 ) 
 updateBytesRead ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 index b3a94bb . . cb6faab 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 @ @ - 160 , 6 + 160 , 7 @ @ public class CompactionTask extends AbstractCompactionTask 
 Collection < SSTableReader > newSStables ; 
 
 long [ ] mergedRowCounts ; 
 + long totalSourceCQLRows ; 
 
 / / SSTableScanners need to be closed before markCompactedSSTablesReplaced call as scanners contain references 
 / / to both ifile and dfile and SSTR will throw deletion errors on Windows if it tries to delete before scanner is closed . 
 @ @ - 203 , 6 + 204 , 8 @ @ public class CompactionTask extends AbstractCompactionTask 
 collector . finishCompaction ( ci ) ; 
 
 mergedRowCounts = ci . getMergedRowCounts ( ) ; 
 + 
 + totalSourceCQLRows = ci . getTotalSourceCQLRows ( ) ; 
 } 
 } 
 
 @ @ - 219 , 8 + 222 , 11 @ @ public class CompactionTask extends AbstractCompactionTask 
 newSSTableNames . append ( reader . descriptor . baseFilename ( ) ) . append ( " , " ) ; 
 
 long totalSourceRows = 0 ; 
 + for ( int i = 0 ; i < mergedRowCounts . length ; i + + ) 
 + totalSourceRows + = mergedRowCounts [ i ] * ( i + 1 ) ; 
 + 
 String mergeSummary = updateCompactionHistory ( cfs . keyspace . getName ( ) , cfs . getColumnFamilyName ( ) , mergedRowCounts , startsize , endsize ) ; 
 - logger . debug ( String . format ( " Compacted ( % s ) % d sstables to [ % s ] to level = % d . % s to % s ( ~ % d % % of original ) in % , dms . Throughput = % s . % , d total partitions merged to % , d . Partition merge counts were { % s } " , 
 + logger . debug ( String . format ( " Compacted ( % s ) % d sstables to [ % s ] to level = % d . % s to % s ( ~ % d % % of original ) in % , dms . Read Throughput = % s , Write Throughput = % s , Row Throughput = ~ % , d / s . % , d total partitions merged to % , d . Partition merge counts were { % s } " , 
 taskId , 
 transaction . originals ( ) . size ( ) , 
 newSSTableNames . toString ( ) , 
 @ @ - 229 , 7 + 235 , 9 @ @ public class CompactionTask extends AbstractCompactionTask 
 FBUtilities . prettyPrintMemory ( endsize ) , 
 ( int ) ( ratio * 100 ) , 
 dTime , 
 + FBUtilities . prettyPrintMemoryPerSecond ( startsize , durationInNano ) , 
 FBUtilities . prettyPrintMemoryPerSecond ( endsize , durationInNano ) , 
 + ( int ) totalSourceCQLRows / ( TimeUnit . NANOSECONDS . toSeconds ( durationInNano ) + 1 ) , 
 totalSourceRows , 
 totalKeysWritten , 
 mergeSummary ) ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / concurrent / AIOExecutorService . java b / src / java / org / apache / cassandra / concurrent / AIOExecutorService . java 
 deleted file mode 100644 
 index f265564 . . 0000000 
 - - - a / src / java / org / apache / cassandra / concurrent / AIOExecutorService . java 
 + + + / dev / null 
 @ @ - 1 , 309 + 0 , 0 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . concurrent ; 
 - 
 - import java . util . Collection ; 
 - import java . util . List ; 
 - import java . util . concurrent . * ; 
 - 
 - public class AIOExecutorService implements ExecutorService 
 - { 
 - private ExecutorService executorService _ ; 
 - 
 - public AIOExecutorService ( int corePoolSize , 
 - int maximumPoolSize , 
 - long keepAliveTime , 
 - TimeUnit unit , 
 - BlockingQueue < Runnable > workQueue , 
 - ThreadFactory threadFactory ) 
 - { 
 - executorService _ = new ThreadPoolExecutor ( corePoolSize , maximumPoolSize , keepAliveTime , unit , workQueue , threadFactory ) ; 
 - } 
 - 
 - / * * 
 - * Executes the given command at some time in the future . The command 
 - * may execute in a new thread , in a pooled thread , or in the calling 
 - * thread , at the discretion of the < tt > Executor < / tt > implementation . 
 - * 
 - * @ param command the runnable task 
 - * @ throws RejectedExecutionException if this task cannot be 
 - * accepted for execution . 
 - * @ throws NullPointerException if command is null 
 - * / 
 - public void execute ( Runnable command ) 
 - { 
 - executorService _ . execute ( command ) ; 
 - } 
 - 
 - / * * 
 - * Initiates an orderly shutdown in which previously submitted 
 - * tasks are executed , but no new tasks will be accepted . 
 - * Invocation has no additional effect if already shut down . 
 - * 
 - * < p > This method does not wait for previously submitted tasks to 
 - * complete execution . Use { @ link # awaitTermination awaitTermination } 
 - * to do that . 
 - * 
 - * @ throws SecurityException if a security manager exists and 
 - * shutting down this ExecutorService may manipulate 
 - * threads that the caller is not permitted to modify 
 - * because it does not hold { @ link 
 - * java . lang . RuntimePermission } < tt > ( " modifyThread " ) < / tt > , 
 - * or the security manager ' s < tt > checkAccess < / tt > method 
 - * denies access . 
 - * / 
 - public void shutdown ( ) 
 - { 
 - / * This is a noop . * / 
 - } 
 - 
 - / * * 
 - * Attempts to stop all actively executing tasks , halts the 
 - * processing of waiting tasks , and returns a list of the tasks 
 - * that were awaiting execution . 
 - * 
 - * < p > This method does not wait for actively executing tasks to 
 - * terminate . Use { @ link # awaitTermination awaitTermination } to 
 - * do that . 
 - * 
 - * < p > There are no guarantees beyond best - effort attempts to stop 
 - * processing actively executing tasks . For example , typical 
 - * implementations will cancel via { @ link Thread # interrupt } , so any 
 - * task that fails to respond to interrupts may never terminate . 
 - * 
 - * @ return list of tasks that never commenced execution 
 - * @ throws SecurityException if a security manager exists and 
 - * shutting down this ExecutorService may manipulate 
 - * threads that the caller is not permitted to modify 
 - * because it does not hold { @ link 
 - * java . lang . RuntimePermission } < tt > ( " modifyThread " ) < / tt > , 
 - * or the security manager ' s < tt > checkAccess < / tt > method 
 - * denies access . 
 - * / 
 - public List < Runnable > shutdownNow ( ) 
 - { 
 - return executorService _ . shutdownNow ( ) ; 
 - } 
 - 
 - / * * 
 - * Returns < tt > true < / tt > if this executor has been shut down . 
 - * 
 - * @ return < tt > true < / tt > if this executor has been shut down 
 - * / 
 - public boolean isShutdown ( ) 
 - { 
 - return executorService _ . isShutdown ( ) ; 
 - } 
 - 
 - / * * 
 - * Returns < tt > true < / tt > if all tasks have completed following shut down . 
 - * Note that < tt > isTerminated < / tt > is never < tt > true < / tt > unless 
 - * either < tt > shutdown < / tt > or < tt > shutdownNow < / tt > was called first . 
 - * 
 - * @ return < tt > true < / tt > if all tasks have completed following shut down 
 - * / 
 - public boolean isTerminated ( ) 
 - { 
 - return executorService _ . isTerminated ( ) ; 
 - } 
 - 
 - / * * 
 - * Blocks until all tasks have completed execution after a shutdown 
 - * request , or the timeout occurs , or the current thread is 
 - * interrupted , whichever happens first . 
 - * 
 - * @ param timeout the maximum time to wait 
 - * @ param unit the time unit of the timeout argument 
 - * @ return < tt > true < / tt > if this executor terminated and 
 - * < tt > false < / tt > if the timeout elapsed before termination 
 - * @ throws InterruptedException if interrupted while waiting 
 - * / 
 - public boolean awaitTermination ( long timeout , TimeUnit unit ) throws InterruptedException 
 - { 
 - return executorService _ . awaitTermination ( timeout , unit ) ; 
 - } 
 - 
 - / * * 
 - * Submits a value - returning task for execution and returns a 
 - * Future representing the pending results of the task . The 
 - * Future ' s < tt > get < / tt > method will return the task ' s result upon 
 - * successful completion . 
 - * 
 - * < p > 
 - * If you would like to immediately block waiting 
 - * for a task , you can use constructions of the form 
 - * < tt > result = exec . submit ( aCallable ) . get ( ) ; < / tt > 
 - * 
 - * < p > Note : The { @ link Executors } class includes a set of methods 
 - * that can convert some other common closure - like objects , 
 - * for example , { @ link java . security . PrivilegedAction } to 
 - * { @ link Callable } form so they can be submitted . 
 - * 
 - * @ param task the task to submit 
 - * @ return a Future representing pending completion of the task 
 - * @ throws RejectedExecutionException if the task cannot be 
 - * scheduled for execution 
 - * @ throws NullPointerException if the task is null 
 - * / 
 - public < T > Future < T > submit ( Callable < T > task ) 
 - { 
 - return executorService _ . submit ( task ) ; 
 - } 
 - 
 - / * * 
 - * Submits a Runnable task for execution and returns a Future 
 - * representing that task . The Future ' s < tt > get < / tt > method will 
 - * return the given result upon successful completion . 
 - * 
 - * @ param task the task to submit 
 - * @ param result the result to return 
 - * @ return a Future representing pending completion of the task 
 - * @ throws RejectedExecutionException if the task cannot be 
 - * scheduled for execution 
 - * @ throws NullPointerException if the task is null 
 - * / 
 - public < T > Future < T > submit ( Runnable task , T result ) 
 - { 
 - return executorService _ . submit ( task , result ) ; 
 - } 
 - 
 - / * * 
 - * Submits a Runnable task for execution and returns a Future 
 - * representing that task . The Future ' s < tt > get < / tt > method will 
 - * return < tt > null < / tt > upon < em > successful < / em > completion . 
 - * 
 - * @ param task the task to submit 
 - * @ return a Future representing pending completion of the task 
 - * @ throws RejectedExecutionException if the task cannot be 
 - * scheduled for execution 
 - * @ throws NullPointerException if the task is null 
 - * / 
 - public Future < ? > submit ( Runnable task ) 
 - { 
 - return executorService _ . submit ( task ) ; 
 - } 
 - 
 - / * * 
 - * Executes the given tasks , returning a list of Futures holding 
 - * their status and results when all complete . 
 - * { @ link Future # isDone } is < tt > true < / tt > for each 
 - * element of the returned list . 
 - * Note that a < em > completed < / em > task could have 
 - * terminated either normally or by throwing an exception . 
 - * The results of this method are undefined if the given 
 - * collection is modified while this operation is in progress . 
 - * 
 - * @ param tasks the collection of tasks 
 - * @ return A list of Futures representing the tasks , in the same 
 - * sequential order as produced by the iterator for the 
 - * given task list , each of which has completed . 
 - * @ throws InterruptedException if interrupted while waiting , in 
 - * which case unfinished tasks are cancelled . 
 - * @ throws NullPointerException if tasks or any of its elements are < tt > null < / tt > 
 - * @ throws RejectedExecutionException if any task cannot be 
 - * scheduled for execution 
 - * / 
 - 
 - public < T > List < Future < T > > invokeAll ( Collection < ? extends Callable < T > > tasks ) throws InterruptedException 
 - { 
 - return executorService _ . invokeAll ( tasks ) ; 
 - } 
 - 
 - / * * 
 - * Executes the given tasks , returning a list of Futures holding 
 - * their status and results 
 - * when all complete or the timeout expires , whichever happens first . 
 - * { @ link Future # isDone } is < tt > true < / tt > for each 
 - * element of the returned list . 
 - * Upon return , tasks that have not completed are cancelled . 
 - * Note that a < em > completed < / em > task could have 
 - * terminated either normally or by throwing an exception . 
 - * The results of this method are undefined if the given 
 - * collection is modified while this operation is in progress . 
 - * 
 - * @ param tasks the collection of tasks 
 - * @ param timeout the maximum time to wait 
 - * @ param unit the time unit of the timeout argument 
 - * @ return a list of Futures representing the tasks , in the same 
 - * sequential order as produced by the iterator for the 
 - * given task list . If the operation did not time out , 
 - * each task will have completed . If it did time out , some 
 - * of these tasks will not have completed . 
 - * @ throws InterruptedException if interrupted while waiting , in 
 - * which case unfinished tasks are cancelled 
 - * @ throws NullPointerException if tasks , any of its elements , or 
 - * unit are < tt > null < / tt > 
 - * @ throws RejectedExecutionException if any task cannot be scheduled 
 - * for execution 
 - * / 
 - public < T > List < Future < T > > invokeAll ( Collection < ? extends Callable < T > > tasks , long timeout , TimeUnit unit ) throws InterruptedException 
 - { 
 - return executorService _ . invokeAll ( tasks , timeout , unit ) ; 
 - } 
 - 
 - / * * 
 - * Executes the given tasks , returning the result 
 - * of one that has completed successfully ( i . e . , without throwing 
 - * an exception ) , if any do . Upon normal or exceptional return , 
 - * tasks that have not completed are cancelled . 
 - * The results of this method are undefined if the given 
 - * collection is modified while this operation is in progress . 
 - * 
 - * @ param tasks the collection of tasks 
 - * @ return the result returned by one of the tasks 
 - * @ throws InterruptedException if interrupted while waiting 
 - * @ throws NullPointerException if tasks or any of its elements 
 - * are < tt > null < / tt > 
 - * @ throws IllegalArgumentException if tasks is empty 
 - * @ throws ExecutionException if no task successfully completes 
 - * @ throws RejectedExecutionException if tasks cannot be scheduled 
 - * for execution 
 - * / 
 - public < T > T invokeAny ( Collection < ? extends Callable < T > > tasks ) throws InterruptedException , ExecutionException 
 - { 
 - return executorService _ . invokeAny ( tasks ) ; 
 - } 
 - 
 - / * * 
 - * Executes the given tasks , returning the result 
 - * of one that has completed successfully ( i . e . , without throwing 
 - * an exception ) , if any do before the given timeout elapses . 
 - * Upon normal or exceptional return , tasks that have not 
 - * completed are cancelled . 
 - * The results of this method are undefined if the given 
 - * collection is modified while this operation is in progress . 
 - * 
 - * @ param tasks the collection of tasks 
 - * @ param timeout the maximum time to wait 
 - * @ param unit the time unit of the timeout argument 
 - * @ return the result returned by one of the tasks . 
 - * @ throws InterruptedException if interrupted while waiting 
 - * @ throws NullPointerException if tasks , any of its elements , or 
 - * unit are < tt > null < / tt > 
 - * @ throws TimeoutException if the given timeout elapses before 
 - * any task successfully completes 
 - * @ throws ExecutionException if no task successfully completes 
 - * @ throws RejectedExecutionException if tasks cannot be scheduled 
 - * for execution 
 - * / 
 - public < T > T invokeAny ( Collection < ? extends Callable < T > > tasks , long timeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException 
 - { 
 - return executorService _ . invokeAny ( tasks , timeout , unit ) ; 
 - } 
 - }
