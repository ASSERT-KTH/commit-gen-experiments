BLEU SCORE: 0.013139808552042212

TEST MSG: Allow c * to be shutdown in an embedded mode - make SlabPoolCleaner a daemon
GENERATED MSG: Fix cassandra handing on stop

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 58c6277 . . 4abb285 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 9 , 6 + 9 , 7 @ @ <nl> * Upgrade NBHM lib ( CASSANDRA - 7128 ) <nl> * Optimize netty server ( CASSANDRA - 6861 ) <nl> * Fix repair hang when given CF does not exist ( CASSANDRA - 7189 ) <nl> + * Allow c * to be shutdown in an embedded mode ( CASSANDRA - 5635 ) <nl> Merged from 2 . 0 : <nl> * Correctly delete scheduled range xfers ( CASSANDRA - 7143 ) <nl> * Make batchlog replica selection rack - aware ( CASSANDRA - 6551 ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / memory / MemtableCleanerThread . java b / src / java / org / apache / cassandra / utils / memory / MemtableCleanerThread . java <nl> index 9950e49 . . 5a90463 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / memory / MemtableCleanerThread . java <nl> + + + b / src / java / org / apache / cassandra / utils / memory / MemtableCleanerThread . java <nl> @ @ - 40 , 6 + 40 , 7 @ @ class MemtableCleanerThread < P extends MemtablePool > extends Thread <nl> super ( pool . getClass ( ) . getSimpleName ( ) + " Cleaner " ) ; <nl> this . pool = pool ; <nl> this . cleaner = cleaner ; <nl> + setDaemon ( true ) ; <nl> } <nl> <nl> boolean needsCleaning ( )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6e9c555 . . aac28cc 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 26 , 6 + 26 , 7 @ @ <nl> ( CASSANDRA - 2997 ) <nl> * Break bloom filters up to avoid heap fragmentation ( CASSANDRA - 2466 ) <nl> * fix cassandra hanging on jsvc stop ( CASSANDRA - 3302 ) <nl> + * Avoid leveled compaction getting blocked on errors ( CASSANDRA - 3408 ) <nl> Merged from 0 . 8 : <nl> * ( CQL ) update grammar to require key clause in DELETE statement <nl> ( CASSANDRA - 3349 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java <nl> index bbc6701 . . dbcd8cd 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java <nl> @ @ - 67 , 7 + 67 , 10 @ @ public abstract class AbstractCompactionTask <nl> Set < SSTableReader > marked = cfs . getDataTracker ( ) . markCompacting ( sstables , min , max ) ; <nl> <nl> if ( marked = = null | | marked . isEmpty ( ) ) <nl> + { <nl> + cancel ( ) ; <nl> return false ; <nl> + } <nl> <nl> this . sstables = marked ; <nl> return true ; <nl> @ @ - 77 , 4 + 80 , 8 @ @ public abstract class AbstractCompactionTask <nl> { <nl> cfs . getDataTracker ( ) . unmarkCompacting ( sstables ) ; <nl> } <nl> + <nl> + / / Can be overriden for action that need to be performed if the task won ' t <nl> + / / execute ( if sstable can ' t be marked successfully ) <nl> + protected void cancel ( ) { } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> index 2571d93 . . b0b605a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> @ @ - 52 , 9 + 52 , 15 @ @ public class LeveledCompactionTask extends CompactionTask <nl> @ Override <nl> public int execute ( CompactionManager . CompactionExecutorStatsCollector collector ) throws IOException <nl> { <nl> - int n = super . execute ( collector ) ; <nl> - latch . countDown ( ) ; <nl> - return n ; <nl> + try <nl> + { <nl> + int n = super . execute ( collector ) ; <nl> + return n ; <nl> + } <nl> + finally <nl> + { <nl> + latch . countDown ( ) ; <nl> + } <nl> } <nl> <nl> public boolean isDone ( ) <nl> @ @ - 79 , 4 + 85 , 10 @ @ public class LeveledCompactionTask extends CompactionTask <nl> { <nl> return false ; <nl> } <nl> + <nl> + @ Override <nl> + protected void cancel ( ) <nl> + { <nl> + latch . countDown ( ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 58c6277 . . 4abb285 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 9 , 6 + 9 , 7 @ @ 
 * Upgrade NBHM lib ( CASSANDRA - 7128 ) 
 * Optimize netty server ( CASSANDRA - 6861 ) 
 * Fix repair hang when given CF does not exist ( CASSANDRA - 7189 ) 
 + * Allow c * to be shutdown in an embedded mode ( CASSANDRA - 5635 ) 
 Merged from 2 . 0 : 
 * Correctly delete scheduled range xfers ( CASSANDRA - 7143 ) 
 * Make batchlog replica selection rack - aware ( CASSANDRA - 6551 ) 
 diff - - git a / src / java / org / apache / cassandra / utils / memory / MemtableCleanerThread . java b / src / java / org / apache / cassandra / utils / memory / MemtableCleanerThread . java 
 index 9950e49 . . 5a90463 100644 
 - - - a / src / java / org / apache / cassandra / utils / memory / MemtableCleanerThread . java 
 + + + b / src / java / org / apache / cassandra / utils / memory / MemtableCleanerThread . java 
 @ @ - 40 , 6 + 40 , 7 @ @ class MemtableCleanerThread < P extends MemtablePool > extends Thread 
 super ( pool . getClass ( ) . getSimpleName ( ) + " Cleaner " ) ; 
 this . pool = pool ; 
 this . cleaner = cleaner ; 
 + setDaemon ( true ) ; 
 } 
 
 boolean needsCleaning ( )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6e9c555 . . aac28cc 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 26 , 6 + 26 , 7 @ @ 
 ( CASSANDRA - 2997 ) 
 * Break bloom filters up to avoid heap fragmentation ( CASSANDRA - 2466 ) 
 * fix cassandra hanging on jsvc stop ( CASSANDRA - 3302 ) 
 + * Avoid leveled compaction getting blocked on errors ( CASSANDRA - 3408 ) 
 Merged from 0 . 8 : 
 * ( CQL ) update grammar to require key clause in DELETE statement 
 ( CASSANDRA - 3349 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java 
 index bbc6701 . . dbcd8cd 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java 
 @ @ - 67 , 7 + 67 , 10 @ @ public abstract class AbstractCompactionTask 
 Set < SSTableReader > marked = cfs . getDataTracker ( ) . markCompacting ( sstables , min , max ) ; 
 
 if ( marked = = null | | marked . isEmpty ( ) ) 
 + { 
 + cancel ( ) ; 
 return false ; 
 + } 
 
 this . sstables = marked ; 
 return true ; 
 @ @ - 77 , 4 + 80 , 8 @ @ public abstract class AbstractCompactionTask 
 { 
 cfs . getDataTracker ( ) . unmarkCompacting ( sstables ) ; 
 } 
 + 
 + / / Can be overriden for action that need to be performed if the task won ' t 
 + / / execute ( if sstable can ' t be marked successfully ) 
 + protected void cancel ( ) { } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 index 2571d93 . . b0b605a 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 @ @ - 52 , 9 + 52 , 15 @ @ public class LeveledCompactionTask extends CompactionTask 
 @ Override 
 public int execute ( CompactionManager . CompactionExecutorStatsCollector collector ) throws IOException 
 { 
 - int n = super . execute ( collector ) ; 
 - latch . countDown ( ) ; 
 - return n ; 
 + try 
 + { 
 + int n = super . execute ( collector ) ; 
 + return n ; 
 + } 
 + finally 
 + { 
 + latch . countDown ( ) ; 
 + } 
 } 
 
 public boolean isDone ( ) 
 @ @ - 79 , 4 + 85 , 10 @ @ public class LeveledCompactionTask extends CompactionTask 
 { 
 return false ; 
 } 
 + 
 + @ Override 
 + protected void cancel ( ) 
 + { 
 + latch . countDown ( ) ; 
 + } 
 }
