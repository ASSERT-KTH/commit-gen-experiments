BLEU SCORE: 0.016932492841722675

TEST MSG: ninja - remove Ignored test file , due to CASSANDRA - 13530
GENERATED MSG: Update version and add missing license

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / commitlog / PeriodicCommitLogTest . java b / test / unit / org / apache / cassandra / db / commitlog / PeriodicCommitLogTest . java <nl> deleted file mode 100644 <nl> index 475412d . . 0000000 <nl> - - - a / test / unit / org / apache / cassandra / db / commitlog / PeriodicCommitLogTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 45 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package org . apache . cassandra . db . commitlog ; <nl> - <nl> - import org . junit . BeforeClass ; <nl> - import org . junit . Ignore ; <nl> - <nl> - import org . apache . cassandra . config . Config ; <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . config . ParameterizedClass ; <nl> - import org . apache . cassandra . security . EncryptionContext ; <nl> - <nl> - @ Ignore <nl> - public class PeriodicCommitLogTest extends CommitLogTest <nl> - { <nl> - public PeriodicCommitLogTest ( ParameterizedClass commitLogCompression , EncryptionContext encryptionContext ) <nl> - { <nl> - super ( commitLogCompression , encryptionContext ) ; <nl> - } <nl> - <nl> - @ BeforeClass <nl> - public static void setCommitLogModeDetails ( ) <nl> - { <nl> - DatabaseDescriptor . daemonInitialization ( ) ; <nl> - DatabaseDescriptor . setCommitLogSync ( Config . CommitLogSync . periodic ) ; <nl> - DatabaseDescriptor . setCommitLogSyncPeriod ( 10 * 1000 ) ; <nl> - beforeClass ( ) ; <nl> - } <nl> - }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 02385df . . b64237e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 52 , 6 + 52 , 7 @ @ <nl> * Don ' t allow prepared marker inside collections ( CASSANDRA - 4890 ) <nl> * Re - allow order by on non - selected columns ( CASSANDRA - 4645 ) <nl> * Bug when composite index is created in a table having collections ( CASSANDRA - 4909 ) <nl> + * log index scan subject in CompositesSearcher ( CASSANDRA - 4904 ) <nl> Merged from 1 . 1 : <nl> * add get [ Row | Key ] CacheEntries to CacheServiceMBean ( CASSANDRA - 4859 ) <nl> * fix get _ paged _ slice to wrap to next row correctly ( CASSANDRA - 4816 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> index ecabf23 . . 63af51b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . cassandra . dht . * ; <nl> + import org . apache . cassandra . thrift . IndexExpression ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> / * * <nl> @ @ - 73 , 6 + 74 , 18 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec <nl> <nl> protected abstract ByteBuffer makeIndexColumnName ( ByteBuffer rowKey , IColumn column ) ; <nl> <nl> + protected abstract AbstractType getExpressionComparator ( ) ; <nl> + <nl> + public String expressionString ( IndexExpression expr ) <nl> + { <nl> + return String . format ( " ' % s . % s % s % s ' " , <nl> + baseCfs . columnFamily , <nl> + getExpressionComparator ( ) . getString ( expr . column _ name ) , <nl> + expr . op , <nl> + baseCfs . metadata . getColumn _ metadata ( ) . get ( expr . column _ name ) . getValidator ( ) . getString ( expr . value ) ) ; <nl> + } <nl> + <nl> + <nl> public void delete ( ByteBuffer rowKey , IColumn column ) <nl> { <nl> if ( column . isMarkedForDelete ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesIndex . java b / src / java / org / apache / cassandra / db / index / composites / CompositesIndex . java <nl> index 552d75f . . f1aa4aa 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesIndex . java <nl> @ @ - 67 , 6 + 67 , 12 @ @ public class CompositesIndex extends AbstractSimplePerColumnSecondaryIndex <nl> return builder . build ( ) ; <nl> } <nl> <nl> + protected AbstractType getExpressionComparator ( ) <nl> + { <nl> + CompositeType baseComparator = ( CompositeType ) baseCfs . getComparator ( ) ; <nl> + return baseComparator . types . get ( prefixSize ) ; <nl> + } <nl> + <nl> @ Override <nl> public boolean indexes ( ByteBuffer name ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java <nl> index 5a08f49 . . caf375b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java <nl> + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . util . * ; <nl> <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . filter . * ; <nl> + import org . apache . cassandra . db . index . AbstractSimplePerColumnSecondaryIndex ; <nl> import org . apache . cassandra . db . index . PerColumnSecondaryIndex ; <nl> import org . apache . cassandra . db . index . SecondaryIndex ; <nl> import org . apache . cassandra . db . index . SecondaryIndexManager ; <nl> @ @ - 208 , 10 + 209 , 9 @ @ public class CompositesSearcher extends SecondaryIndexSearcher <nl> return makeReturn ( currentKey , data ) ; <nl> } <nl> <nl> - / / TODO : broken because we need to extract the component comparator rather than the whole name comparator <nl> - / / if ( logger . isDebugEnabled ( ) ) <nl> - / / logger . debug ( " Scanning index { } starting with { } " , <nl> - / / expressionString ( primary ) , indexComparator . getString ( startPrefix ) ) ; <nl> + if ( logger . isTraceEnabled ( ) & & ( index instanceof AbstractSimplePerColumnSecondaryIndex ) ) <nl> + logger . trace ( " Scanning index { } starting with { } " , <nl> + ( ( AbstractSimplePerColumnSecondaryIndex ) index ) . expressionString ( primary ) , indexComparator . getString ( startPrefix ) ) ; <nl> <nl> QueryFilter indexFilter = QueryFilter . getSliceFilter ( indexKey , <nl> new QueryPath ( index . getIndexCfs ( ) . getColumnFamilyName ( ) ) , <nl> diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> index 7174ffc . . 04c9946 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . db . IColumn ; <nl> import org . apache . cassandra . db . index . AbstractSimplePerColumnSecondaryIndex ; <nl> import org . apache . cassandra . db . index . SecondaryIndexSearcher ; <nl> + import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> <nl> / * * <nl> @ @ - 51 , 4 + 52 , 9 @ @ public class KeysIndex extends AbstractSimplePerColumnSecondaryIndex <nl> { <nl> / / no options used <nl> } <nl> + <nl> + protected AbstractType getExpressionComparator ( ) <nl> + { <nl> + return baseCfs . getComparator ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java b / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java <nl> index 590f629 . . bb03672 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java <nl> + + + b / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . util . * ; <nl> <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . filter . * ; <nl> + import org . apache . cassandra . db . index . AbstractSimplePerColumnSecondaryIndex ; <nl> import org . apache . cassandra . db . index . PerColumnSecondaryIndex ; <nl> import org . apache . cassandra . db . index . SecondaryIndex ; <nl> import org . apache . cassandra . db . index . SecondaryIndexManager ; <nl> @ @ - 68 , 15 + 69 , 6 @ @ public class KeysSearcher extends SecondaryIndexSearcher <nl> return best ; <nl> } <nl> <nl> - private String expressionString ( IndexExpression expr ) <nl> - { <nl> - return String . format ( " ' % s . % s % s % s ' " , <nl> - baseCfs . columnFamily , <nl> - baseCfs . getComparator ( ) . getString ( expr . column _ name ) , <nl> - expr . op , <nl> - baseCfs . metadata . getColumn _ metadata ( ) . get ( expr . column _ name ) . getValidator ( ) . getString ( expr . value ) ) ; <nl> - } <nl> - <nl> public boolean isIndexing ( List < IndexExpression > clause ) <nl> { <nl> return highestSelectivityPredicate ( clause ) ! = null ; <nl> @ @ - 133 , 9 + 125 , 9 @ @ public class KeysSearcher extends SecondaryIndexSearcher <nl> return endOfData ( ) ; <nl> } <nl> <nl> - if ( logger . isTraceEnabled ( ) ) <nl> + if ( logger . isTraceEnabled ( ) & & ( index instanceof AbstractSimplePerColumnSecondaryIndex ) ) <nl> logger . trace ( " Scanning index { } starting with { } " , <nl> - expressionString ( primary ) , index . getBaseCfs ( ) . metadata . getKeyValidator ( ) . getString ( startKey ) ) ; <nl> + ( ( AbstractSimplePerColumnSecondaryIndex ) index ) . expressionString ( primary ) , index . getBaseCfs ( ) . metadata . getKeyValidator ( ) . getString ( startKey ) ) ; <nl> <nl> QueryFilter indexFilter = QueryFilter . getSliceFilter ( indexKey , <nl> new QueryPath ( index . getIndexCfs ( ) . getColumnFamilyName ( ) ) ,

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / commitlog / PeriodicCommitLogTest . java b / test / unit / org / apache / cassandra / db / commitlog / PeriodicCommitLogTest . java 
 deleted file mode 100644 
 index 475412d . . 0000000 
 - - - a / test / unit / org / apache / cassandra / db / commitlog / PeriodicCommitLogTest . java 
 + + + / dev / null 
 @ @ - 1 , 45 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package org . apache . cassandra . db . commitlog ; 
 - 
 - import org . junit . BeforeClass ; 
 - import org . junit . Ignore ; 
 - 
 - import org . apache . cassandra . config . Config ; 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . config . ParameterizedClass ; 
 - import org . apache . cassandra . security . EncryptionContext ; 
 - 
 - @ Ignore 
 - public class PeriodicCommitLogTest extends CommitLogTest 
 - { 
 - public PeriodicCommitLogTest ( ParameterizedClass commitLogCompression , EncryptionContext encryptionContext ) 
 - { 
 - super ( commitLogCompression , encryptionContext ) ; 
 - } 
 - 
 - @ BeforeClass 
 - public static void setCommitLogModeDetails ( ) 
 - { 
 - DatabaseDescriptor . daemonInitialization ( ) ; 
 - DatabaseDescriptor . setCommitLogSync ( Config . CommitLogSync . periodic ) ; 
 - DatabaseDescriptor . setCommitLogSyncPeriod ( 10 * 1000 ) ; 
 - beforeClass ( ) ; 
 - } 
 - }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 02385df . . b64237e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 52 , 6 + 52 , 7 @ @ 
 * Don ' t allow prepared marker inside collections ( CASSANDRA - 4890 ) 
 * Re - allow order by on non - selected columns ( CASSANDRA - 4645 ) 
 * Bug when composite index is created in a table having collections ( CASSANDRA - 4909 ) 
 + * log index scan subject in CompositesSearcher ( CASSANDRA - 4904 ) 
 Merged from 1 . 1 : 
 * add get [ Row | Key ] CacheEntries to CacheServiceMBean ( CASSANDRA - 4859 ) 
 * fix get _ paged _ slice to wrap to next row correctly ( CASSANDRA - 4816 ) 
 diff - - git a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 index ecabf23 . . 63af51b 100644 
 - - - a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . marshal . * ; 
 import org . apache . cassandra . dht . * ; 
 + import org . apache . cassandra . thrift . IndexExpression ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 / * * 
 @ @ - 73 , 6 + 74 , 18 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec 
 
 protected abstract ByteBuffer makeIndexColumnName ( ByteBuffer rowKey , IColumn column ) ; 
 
 + protected abstract AbstractType getExpressionComparator ( ) ; 
 + 
 + public String expressionString ( IndexExpression expr ) 
 + { 
 + return String . format ( " ' % s . % s % s % s ' " , 
 + baseCfs . columnFamily , 
 + getExpressionComparator ( ) . getString ( expr . column _ name ) , 
 + expr . op , 
 + baseCfs . metadata . getColumn _ metadata ( ) . get ( expr . column _ name ) . getValidator ( ) . getString ( expr . value ) ) ; 
 + } 
 + 
 + 
 public void delete ( ByteBuffer rowKey , IColumn column ) 
 { 
 if ( column . isMarkedForDelete ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesIndex . java b / src / java / org / apache / cassandra / db / index / composites / CompositesIndex . java 
 index 552d75f . . f1aa4aa 100644 
 - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesIndex . java 
 @ @ - 67 , 6 + 67 , 12 @ @ public class CompositesIndex extends AbstractSimplePerColumnSecondaryIndex 
 return builder . build ( ) ; 
 } 
 
 + protected AbstractType getExpressionComparator ( ) 
 + { 
 + CompositeType baseComparator = ( CompositeType ) baseCfs . getComparator ( ) ; 
 + return baseComparator . types . get ( prefixSize ) ; 
 + } 
 + 
 @ Override 
 public boolean indexes ( ByteBuffer name ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java 
 index 5a08f49 . . caf375b 100644 
 - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java 
 + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . util . * ; 
 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . filter . * ; 
 + import org . apache . cassandra . db . index . AbstractSimplePerColumnSecondaryIndex ; 
 import org . apache . cassandra . db . index . PerColumnSecondaryIndex ; 
 import org . apache . cassandra . db . index . SecondaryIndex ; 
 import org . apache . cassandra . db . index . SecondaryIndexManager ; 
 @ @ - 208 , 10 + 209 , 9 @ @ public class CompositesSearcher extends SecondaryIndexSearcher 
 return makeReturn ( currentKey , data ) ; 
 } 
 
 - / / TODO : broken because we need to extract the component comparator rather than the whole name comparator 
 - / / if ( logger . isDebugEnabled ( ) ) 
 - / / logger . debug ( " Scanning index { } starting with { } " , 
 - / / expressionString ( primary ) , indexComparator . getString ( startPrefix ) ) ; 
 + if ( logger . isTraceEnabled ( ) & & ( index instanceof AbstractSimplePerColumnSecondaryIndex ) ) 
 + logger . trace ( " Scanning index { } starting with { } " , 
 + ( ( AbstractSimplePerColumnSecondaryIndex ) index ) . expressionString ( primary ) , indexComparator . getString ( startPrefix ) ) ; 
 
 QueryFilter indexFilter = QueryFilter . getSliceFilter ( indexKey , 
 new QueryPath ( index . getIndexCfs ( ) . getColumnFamilyName ( ) ) , 
 diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 index 7174ffc . . 04c9946 100644 
 - - - a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . db . IColumn ; 
 import org . apache . cassandra . db . index . AbstractSimplePerColumnSecondaryIndex ; 
 import org . apache . cassandra . db . index . SecondaryIndexSearcher ; 
 + import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 
 / * * 
 @ @ - 51 , 4 + 52 , 9 @ @ public class KeysIndex extends AbstractSimplePerColumnSecondaryIndex 
 { 
 / / no options used 
 } 
 + 
 + protected AbstractType getExpressionComparator ( ) 
 + { 
 + return baseCfs . getComparator ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java b / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java 
 index 590f629 . . bb03672 100644 
 - - - a / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java 
 + + + b / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . util . * ; 
 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . filter . * ; 
 + import org . apache . cassandra . db . index . AbstractSimplePerColumnSecondaryIndex ; 
 import org . apache . cassandra . db . index . PerColumnSecondaryIndex ; 
 import org . apache . cassandra . db . index . SecondaryIndex ; 
 import org . apache . cassandra . db . index . SecondaryIndexManager ; 
 @ @ - 68 , 15 + 69 , 6 @ @ public class KeysSearcher extends SecondaryIndexSearcher 
 return best ; 
 } 
 
 - private String expressionString ( IndexExpression expr ) 
 - { 
 - return String . format ( " ' % s . % s % s % s ' " , 
 - baseCfs . columnFamily , 
 - baseCfs . getComparator ( ) . getString ( expr . column _ name ) , 
 - expr . op , 
 - baseCfs . metadata . getColumn _ metadata ( ) . get ( expr . column _ name ) . getValidator ( ) . getString ( expr . value ) ) ; 
 - } 
 - 
 public boolean isIndexing ( List < IndexExpression > clause ) 
 { 
 return highestSelectivityPredicate ( clause ) ! = null ; 
 @ @ - 133 , 9 + 125 , 9 @ @ public class KeysSearcher extends SecondaryIndexSearcher 
 return endOfData ( ) ; 
 } 
 
 - if ( logger . isTraceEnabled ( ) ) 
 + if ( logger . isTraceEnabled ( ) & & ( index instanceof AbstractSimplePerColumnSecondaryIndex ) ) 
 logger . trace ( " Scanning index { } starting with { } " , 
 - expressionString ( primary ) , index . getBaseCfs ( ) . metadata . getKeyValidator ( ) . getString ( startKey ) ) ; 
 + ( ( AbstractSimplePerColumnSecondaryIndex ) index ) . expressionString ( primary ) , index . getBaseCfs ( ) . metadata . getKeyValidator ( ) . getString ( startKey ) ) ; 
 
 QueryFilter indexFilter = QueryFilter . getSliceFilter ( indexKey , 
 new QueryPath ( index . getIndexCfs ( ) . getColumnFamilyName ( ) ) ,
