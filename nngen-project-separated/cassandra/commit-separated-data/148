BLEU SCORE: 0.034353182138500235

TEST MSG: Remove StreamCoordinator . streamExecutor thread pool
GENERATED MSG: Fix error streaming section more than 2GB

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7d9769c . . 5902305 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Remove StreamCoordinator . streamExecutor thread pool ( CASSANDRA - 14402 ) <nl> * Rename nodetool - - with - port to - - print - port to disambiguate from - - port ( CASSANDRA - 14392 ) <nl> * Client TOPOLOGY _ CHANGE messages have wrong port . ( CASSANDRA - 14398 ) <nl> * Add ability to load new SSTables from a separate directory ( CASSANDRA - 6719 ) <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamCoordinator . java b / src / java / org / apache / cassandra / streaming / StreamCoordinator . java <nl> index 139488d . . 6b92dfe 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamCoordinator . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamCoordinator . java <nl> @ @ - 22 , 9 + 22 , 7 @ @ import java . util . * ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; <nl> import org . apache . cassandra . locator . InetAddressAndPort ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> / * * <nl> * { @ link StreamCoordinator } is a helper class that abstracts away maintaining multiple <nl> @ @ - 37 , 15 + 35 , 9 @ @ public class StreamCoordinator <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( StreamCoordinator . class ) ; <nl> <nl> - / * * <nl> - * Executor strictly for establishing the initial connections . Once we ' re connected to the other end the rest of the <nl> - * streaming is handled directly by the { @ link StreamingMessageSender } ' s incoming and outgoing threads . <nl> - * / <nl> - private static final DebuggableThreadPoolExecutor streamExecutor = DebuggableThreadPoolExecutor . createWithFixedPoolSize ( " StreamConnectionEstablisher " , <nl> - FBUtilities . getAvailableProcessors ( ) ) ; <nl> private final boolean connectSequentially ; <nl> <nl> - private Map < InetAddressAndPort , HostStreamingData > peerSessions = new HashMap < > ( ) ; <nl> + private final Map < InetAddressAndPort , HostStreamingData > peerSessions = new HashMap < > ( ) ; <nl> private final StreamOperation streamOperation ; <nl> private final int connectionsPerHost ; <nl> private StreamConnectionFactory factory ; <nl> @ @ - 144 , 7 + 136 , 7 @ @ public class StreamCoordinator <nl> { <nl> StreamSession next = sessionsToConnect . next ( ) ; <nl> logger . debug ( " Connecting next session { } with { } . " , next . planId ( ) , next . peer . toString ( ) ) ; <nl> - streamExecutor . execute ( new StreamSessionConnector ( next ) ) ; <nl> + startSession ( next ) ; <nl> } <nl> else <nl> logger . debug ( " Finished connecting all sessions " ) ; <nl> @ @ - 259 , 20 + 251 , 10 @ @ public class StreamCoordinator <nl> return pendingRepair ; <nl> } <nl> <nl> - private static class StreamSessionConnector implements Runnable <nl> + private void startSession ( StreamSession session ) <nl> { <nl> - private final StreamSession session ; <nl> - public StreamSessionConnector ( StreamSession session ) <nl> - { <nl> - this . session = session ; <nl> - } <nl> - <nl> - @ Override <nl> - public void run ( ) <nl> - { <nl> - session . start ( ) ; <nl> - logger . info ( " [ Stream # { } , ID # { } ] Beginning stream session with { } " , session . planId ( ) , session . sessionIndex ( ) , session . peer ) ; <nl> - } <nl> + session . start ( ) ; <nl> + logger . info ( " [ Stream # { } , ID # { } ] Beginning stream session with { } " , session . planId ( ) , session . sessionIndex ( ) , session . peer ) ; <nl> } <nl> <nl> private class HostStreamingData <nl> @ @ - 316 , 7 + 298 , 7 @ @ public class StreamCoordinator <nl> { <nl> for ( StreamSession session : streamSessions . values ( ) ) <nl> { <nl> - streamExecutor . execute ( new StreamSessionConnector ( session ) ) ; <nl> + startSession ( session ) ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7d9769c . . 5902305 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Remove StreamCoordinator . streamExecutor thread pool ( CASSANDRA - 14402 ) 
 * Rename nodetool - - with - port to - - print - port to disambiguate from - - port ( CASSANDRA - 14392 ) 
 * Client TOPOLOGY _ CHANGE messages have wrong port . ( CASSANDRA - 14398 ) 
 * Add ability to load new SSTables from a separate directory ( CASSANDRA - 6719 ) 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamCoordinator . java b / src / java / org / apache / cassandra / streaming / StreamCoordinator . java 
 index 139488d . . 6b92dfe 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamCoordinator . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamCoordinator . java 
 @ @ - 22 , 9 + 22 , 7 @ @ import java . util . * ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; 
 import org . apache . cassandra . locator . InetAddressAndPort ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 
 / * * 
 * { @ link StreamCoordinator } is a helper class that abstracts away maintaining multiple 
 @ @ - 37 , 15 + 35 , 9 @ @ public class StreamCoordinator 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( StreamCoordinator . class ) ; 
 
 - / * * 
 - * Executor strictly for establishing the initial connections . Once we ' re connected to the other end the rest of the 
 - * streaming is handled directly by the { @ link StreamingMessageSender } ' s incoming and outgoing threads . 
 - * / 
 - private static final DebuggableThreadPoolExecutor streamExecutor = DebuggableThreadPoolExecutor . createWithFixedPoolSize ( " StreamConnectionEstablisher " , 
 - FBUtilities . getAvailableProcessors ( ) ) ; 
 private final boolean connectSequentially ; 
 
 - private Map < InetAddressAndPort , HostStreamingData > peerSessions = new HashMap < > ( ) ; 
 + private final Map < InetAddressAndPort , HostStreamingData > peerSessions = new HashMap < > ( ) ; 
 private final StreamOperation streamOperation ; 
 private final int connectionsPerHost ; 
 private StreamConnectionFactory factory ; 
 @ @ - 144 , 7 + 136 , 7 @ @ public class StreamCoordinator 
 { 
 StreamSession next = sessionsToConnect . next ( ) ; 
 logger . debug ( " Connecting next session { } with { } . " , next . planId ( ) , next . peer . toString ( ) ) ; 
 - streamExecutor . execute ( new StreamSessionConnector ( next ) ) ; 
 + startSession ( next ) ; 
 } 
 else 
 logger . debug ( " Finished connecting all sessions " ) ; 
 @ @ - 259 , 20 + 251 , 10 @ @ public class StreamCoordinator 
 return pendingRepair ; 
 } 
 
 - private static class StreamSessionConnector implements Runnable 
 + private void startSession ( StreamSession session ) 
 { 
 - private final StreamSession session ; 
 - public StreamSessionConnector ( StreamSession session ) 
 - { 
 - this . session = session ; 
 - } 
 - 
 - @ Override 
 - public void run ( ) 
 - { 
 - session . start ( ) ; 
 - logger . info ( " [ Stream # { } , ID # { } ] Beginning stream session with { } " , session . planId ( ) , session . sessionIndex ( ) , session . peer ) ; 
 - } 
 + session . start ( ) ; 
 + logger . info ( " [ Stream # { } , ID # { } ] Beginning stream session with { } " , session . planId ( ) , session . sessionIndex ( ) , session . peer ) ; 
 } 
 
 private class HostStreamingData 
 @ @ - 316 , 7 + 298 , 7 @ @ public class StreamCoordinator 
 { 
 for ( StreamSession session : streamSessions . values ( ) ) 
 { 
 - streamExecutor . execute ( new StreamSessionConnector ( session ) ) ; 
 + startSession ( session ) ; 
 } 
 } 


NEAREST DIFF:
ELIMINATEDSENTENCE
