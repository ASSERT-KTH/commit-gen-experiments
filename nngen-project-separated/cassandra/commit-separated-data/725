BLEU SCORE: 0.04799810699119213

TEST MSG: Fix flaky test in IndexSummaryManagerTest
GENERATED MSG: Fix compaction of the same sstable by multiple thread

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java b / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java <nl> index ddda430 . . 95ade16 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java <nl> @ @ - 225 , 7 + 225 , 9 @ @ public class IndexSummaryManager implements IndexSummaryManagerMBean <nl> Pair < List < SSTableReader > , Map < UUID , LifecycleTransaction > > compactingAndNonCompacting = getCompactingAndNonCompactingSSTables ( ) ; <nl> try <nl> { <nl> - redistributeSummaries ( compactingAndNonCompacting . left , compactingAndNonCompacting . right , this . memoryPoolBytes ) ; <nl> + redistributeSummaries ( new IndexSummaryRedistribution ( compactingAndNonCompacting . left , <nl> + compactingAndNonCompacting . right , <nl> + this . memoryPoolBytes ) ) ; <nl> } <nl> finally <nl> { <nl> @ @ - 237 , 14 + 239 , 14 @ @ public class IndexSummaryManager implements IndexSummaryManagerMBean <nl> / * * <nl> * Attempts to fairly distribute a fixed pool of memory for index summaries across a set of SSTables based on <nl> * their recent read rates . <nl> - * @ param transactions containing the sstables we are to redistribute the memory pool across <nl> - * @ param memoryPoolBytes a size ( in bytes ) that the total index summary space usage should stay close to or <nl> - * under , if possible <nl> + * @ param redistribution encapsulating the transactions containing the sstables we are to redistribute the <nl> + * memory pool across and a size ( in bytes ) that the total index summary space usage <nl> + * should stay close to or under , if possible <nl> * @ return a list of new SSTableReader instances <nl> * / <nl> @ VisibleForTesting <nl> - public static List < SSTableReader > redistributeSummaries ( List < SSTableReader > compacting , Map < UUID , LifecycleTransaction > transactions , long memoryPoolBytes ) throws IOException <nl> + public static List < SSTableReader > redistributeSummaries ( IndexSummaryRedistribution redistribution ) throws IOException <nl> { <nl> - return CompactionManager . instance . runIndexSummaryRedistribution ( new IndexSummaryRedistribution ( compacting , transactions , memoryPoolBytes ) ) ; <nl> + return CompactionManager . instance . runIndexSummaryRedistribution ( redistribution ) ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / IndexSummaryManagerTest . java b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryManagerTest . java <nl> index 0498c68 . . c0445d5 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / IndexSummaryManagerTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryManagerTest . java <nl> @ @ - 19 , 16 + 19 , 8 @ @ package org . apache . cassandra . io . sstable ; <nl> <nl> import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> - import java . util . ArrayList ; <nl> - import java . util . Collections ; <nl> - import java . util . Comparator ; <nl> - import java . util . HashSet ; <nl> - import java . util . List ; <nl> - import java . util . Map ; <nl> - import java . util . Set ; <nl> - import java . util . concurrent . ExecutionException ; <nl> - import java . util . concurrent . Future ; <nl> - import java . util . concurrent . TimeUnit ; <nl> + import java . util . * ; <nl> + import java . util . concurrent . * ; <nl> import java . util . concurrent . atomic . AtomicReference ; <nl> <nl> import com . google . common . base . Joiner ; <nl> @ @ - 147 , 7 + 139 , 7 @ @ public class IndexSummaryManagerTest <nl> <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) <nl> { <nl> - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , originalOffHeapSize * sstables . size ( ) ) ; <nl> + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , originalOffHeapSize * sstables . size ( ) ) ) ; <nl> } <nl> for ( SSTableReader sstable : sstables ) <nl> assertEquals ( BASE _ SAMPLING _ LEVEL , sstable . getIndexSummarySamplingLevel ( ) ) ; <nl> @ @ - 255 , 7 + 247 , 7 @ @ public class IndexSummaryManagerTest <nl> long summarySpace = sstable . getIndexSummaryOffHeapSize ( ) ; <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( asList ( sstable ) , OperationType . UNKNOWN ) ) <nl> { <nl> - redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , summarySpace ) ; <nl> + redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , summarySpace ) ) ; <nl> } <nl> <nl> sstable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; <nl> @ @ - 267 , 7 + 259 , 7 @ @ public class IndexSummaryManagerTest <nl> int previousSize = sstable . getIndexSummarySize ( ) ; <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( asList ( sstable ) , OperationType . UNKNOWN ) ) <nl> { <nl> - redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( long ) Math . ceil ( summarySpace * 1 . 5 ) ) ; <nl> + redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( long ) Math . ceil ( summarySpace * 1 . 5 ) ) ) ; <nl> } <nl> sstable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; <nl> assertEquals ( previousSize * 1 . 5 , ( double ) sstable . getIndexSummarySize ( ) , 1 ) ; <nl> @ @ - 278 , 7 + 270 , 7 @ @ public class IndexSummaryManagerTest <nl> cfs . metadata . minIndexInterval ( originalMinIndexInterval ) ; <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( asList ( sstable ) , OperationType . UNKNOWN ) ) <nl> { <nl> - redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( long ) Math . ceil ( summarySpace / 2 . 0 ) ) ; <nl> + redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( long ) Math . ceil ( summarySpace / 2 . 0 ) ) ) ; <nl> } <nl> sstable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; <nl> assertEquals ( originalMinIndexInterval * 2 , sstable . getEffectiveIndexInterval ( ) , 0 . 001 ) ; <nl> @ @ - 291 , 7 + 283 , 7 @ @ public class IndexSummaryManagerTest <nl> cfs . metadata . maxIndexInterval ( originalMinIndexInterval * 4 ) ; <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( asList ( sstable ) , OperationType . UNKNOWN ) ) <nl> { <nl> - redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 10 ) ; <nl> + redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 10 ) ) ; <nl> } <nl> sstable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; <nl> assertEquals ( cfs . metadata . params . minIndexInterval , sstable . getEffectiveIndexInterval ( ) , 0 . 001 ) ; <nl> @ @ - 314 , 7 + 306 , 7 @ @ public class IndexSummaryManagerTest <nl> <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) <nl> { <nl> - redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 10 ) ; <nl> + redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 10 ) ) ; <nl> } <nl> sstables = new ArrayList < > ( cfs . getLiveSSTables ( ) ) ; <nl> for ( SSTableReader sstable : sstables ) <nl> @ @ - 324 , 7 + 316 , 7 @ @ public class IndexSummaryManagerTest <nl> cfs . metadata . maxIndexInterval ( cfs . metadata . params . maxIndexInterval / 2 ) ; <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) <nl> { <nl> - redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 1 ) ; <nl> + redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 1 ) ) ; <nl> } <nl> sstables = new ArrayList < > ( cfs . getLiveSSTables ( ) ) ; <nl> for ( SSTableReader sstable : sstables ) <nl> @ @ - 337 , 7 + 329 , 7 @ @ public class IndexSummaryManagerTest <nl> cfs . metadata . maxIndexInterval ( cfs . metadata . params . maxIndexInterval * 2 ) ; <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) <nl> { <nl> - redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 1 ) ; <nl> + redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 1 ) ) ; <nl> } <nl> for ( SSTableReader sstable : cfs . getLiveSSTables ( ) ) <nl> { <nl> @ @ - 368 , 7 + 360 , 7 @ @ public class IndexSummaryManagerTest <nl> / / there should be enough space to not downsample anything <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) <nl> { <nl> - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * numSSTables ) ) ; <nl> + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * numSSTables ) ) ) ; <nl> } <nl> for ( SSTableReader sstable : sstables ) <nl> assertEquals ( BASE _ SAMPLING _ LEVEL , sstable . getIndexSummarySamplingLevel ( ) ) ; <nl> @ @ - 379 , 7 + 371 , 7 @ @ public class IndexSummaryManagerTest <nl> assert sstables . size ( ) = = 4 ; <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) <nl> { <nl> - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * ( numSSTables / 2 ) ) ) ; <nl> + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * ( numSSTables / 2 ) ) ) ) ; <nl> } <nl> for ( SSTableReader sstable : sstables ) <nl> assertEquals ( BASE _ SAMPLING _ LEVEL / 2 , sstable . getIndexSummarySamplingLevel ( ) ) ; <nl> @ @ - 388 , 7 + 380 , 7 @ @ public class IndexSummaryManagerTest <nl> / / everything should get cut to a quarter <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) <nl> { <nl> - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * ( numSSTables / 4 ) ) ) ; <nl> + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * ( numSSTables / 4 ) ) ) ) ; <nl> } <nl> for ( SSTableReader sstable : sstables ) <nl> assertEquals ( BASE _ SAMPLING _ LEVEL / 4 , sstable . getIndexSummarySamplingLevel ( ) ) ; <nl> @ @ - 397 , 7 + 389 , 7 @ @ public class IndexSummaryManagerTest <nl> / / upsample back up to half <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) <nl> { <nl> - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * ( numSSTables / 2 ) + 4 ) ) ; <nl> + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * ( numSSTables / 2 ) + 4 ) ) ) ; <nl> } <nl> assert sstables . size ( ) = = 4 ; <nl> for ( SSTableReader sstable : sstables ) <nl> @ @ - 407 , 7 + 399 , 7 @ @ public class IndexSummaryManagerTest <nl> / / upsample back up to the original index summary <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) <nl> { <nl> - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * numSSTables ) ) ; <nl> + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * numSSTables ) ) ) ; <nl> } <nl> for ( SSTableReader sstable : sstables ) <nl> assertEquals ( BASE _ SAMPLING _ LEVEL , sstable . getIndexSummarySamplingLevel ( ) ) ; <nl> @ @ - 419 , 7 + 411 , 7 @ @ public class IndexSummaryManagerTest <nl> sstables . get ( 1 ) . overrideReadMeter ( new RestorableMeter ( 50 . 0 , 50 . 0 ) ) ; <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) <nl> { <nl> - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * 3 ) ) ; <nl> + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * 3 ) ) ) ; <nl> } <nl> Collections . sort ( sstables , hotnessComparator ) ; <nl> assertEquals ( BASE _ SAMPLING _ LEVEL / 2 , sstables . get ( 0 ) . getIndexSummarySamplingLevel ( ) ) ; <nl> @ @ - 435 , 7 + 427 , 7 @ @ public class IndexSummaryManagerTest <nl> sstables . get ( 1 ) . overrideReadMeter ( new RestorableMeter ( higherRate , higherRate ) ) ; <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) <nl> { <nl> - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * 3 ) ) ; <nl> + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * 3 ) ) ) ; <nl> } <nl> Collections . sort ( sstables , hotnessComparator ) ; <nl> assertEquals ( BASE _ SAMPLING _ LEVEL / 2 , sstables . get ( 0 ) . getIndexSummarySamplingLevel ( ) ) ; <nl> @ @ - 453 , 7 + 445 , 7 @ @ public class IndexSummaryManagerTest <nl> <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) <nl> { <nl> - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * 3 ) + 50 ) ; <nl> + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * 3 ) + 50 ) ) ; <nl> } <nl> Collections . sort ( sstables , hotnessComparator ) ; <nl> <nl> @ @ - 477 , 7 + 469 , 7 @ @ public class IndexSummaryManagerTest <nl> sstables . get ( 3 ) . overrideReadMeter ( new RestorableMeter ( 128 . 0 , 128 . 0 ) ) ; <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) <nl> { <nl> - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( long ) ( singleSummaryOffHeapSpace + ( singleSummaryOffHeapSpace * ( 92 . 0 / BASE _ SAMPLING _ LEVEL ) ) ) ) ; <nl> + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( long ) ( singleSummaryOffHeapSpace + ( singleSummaryOffHeapSpace * ( 92 . 0 / BASE _ SAMPLING _ LEVEL ) ) ) ) ) ; <nl> } <nl> Collections . sort ( sstables , hotnessComparator ) ; <nl> assertEquals ( 1 , sstables . get ( 0 ) . getIndexSummarySize ( ) ) ; / / at the min sampling level <nl> @ @ - 490 , 7 + 482 , 7 @ @ public class IndexSummaryManagerTest <nl> / / Don ' t leave enough space for even the minimal index summaries <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) <nl> { <nl> - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 10 ) ; <nl> + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 10 ) ) ; <nl> } <nl> for ( SSTableReader sstable : sstables ) <nl> assertEquals ( 1 , sstable . getIndexSummarySize ( ) ) ; / / at the min sampling level <nl> @ @ - 625 , 6 + 617 , 9 @ @ public class IndexSummaryManagerTest <nl> / / everything should get cut in half <nl> final AtomicReference < CompactionInterruptedException > exception = new AtomicReference < > ( ) ; <nl> <nl> + / / barrier to control when redistribution runs <nl> + final CountDownLatch barrier = new CountDownLatch ( 1 ) ; <nl> + <nl> Thread t = new Thread ( new Runnable ( ) <nl> { <nl> public void run ( ) <nl> @ @ - 634 , 7 + 629 , 10 @ @ public class IndexSummaryManagerTest <nl> / / Don ' t leave enough space for even the minimal index summaries <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) <nl> { <nl> - redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , singleSummaryOffHeapSpace ) ; <nl> + redistributeSummaries ( new ObservableRedistribution ( Collections . EMPTY _ LIST , <nl> + of ( cfs . metadata . cfId , txn ) , <nl> + singleSummaryOffHeapSpace , <nl> + barrier ) ) ; <nl> } <nl> } <nl> catch ( CompactionInterruptedException ex ) <nl> @ @ - 649 , 7 + 647 , 13 @ @ public class IndexSummaryManagerTest <nl> t . start ( ) ; <nl> while ( CompactionManager . instance . getActiveCompactions ( ) = = 0 & & t . isAlive ( ) ) <nl> Thread . sleep ( 1 ) ; <nl> + / / to ensure that the stop condition check in IndexSummaryRedistribution : : redistributeSummaries <nl> + / / is made * after * the halt request is made to the CompactionManager , don ' t allow the redistribution <nl> + / / to proceed until stopCompaction has been called . <nl> CompactionManager . instance . stopCompaction ( " INDEX _ SUMMARY " ) ; <nl> + / / allows the redistribution to proceed <nl> + barrier . countDown ( ) ; <nl> + <nl> t . join ( ) ; <nl> <nl> assertNotNull ( " Expected compaction interrupted exception " , exception . get ( ) ) ; <nl> @ @ - 664 , 4 + 668 , 37 @ @ public class IndexSummaryManagerTest <nl> <nl> validateData ( cfs , numRows ) ; <nl> } <nl> + <nl> + private static IndexSummaryRedistribution redistribution ( List < SSTableReader > compacting , <nl> + Map < UUID , LifecycleTransaction > transactions , <nl> + long memoryPoolBytes ) <nl> + { <nl> + return new IndexSummaryRedistribution ( compacting , transactions , memoryPoolBytes ) ; <nl> + } <nl> + <nl> + private static class ObservableRedistribution extends IndexSummaryRedistribution <nl> + { <nl> + CountDownLatch barrier ; <nl> + public ObservableRedistribution ( List < SSTableReader > compacting , <nl> + Map < UUID , LifecycleTransaction > transactions , <nl> + long memoryPoolBytes , <nl> + CountDownLatch barrier ) <nl> + { <nl> + super ( compacting , transactions , memoryPoolBytes ) ; <nl> + this . barrier = barrier ; <nl> + } <nl> + <nl> + public List < SSTableReader > redistributeSummaries ( ) throws IOException <nl> + { <nl> + try <nl> + { <nl> + barrier . await ( ) ; <nl> + } <nl> + catch ( InterruptedException e ) <nl> + { <nl> + throw new RuntimeException ( " Interrupted waiting on test barrier " ) ; <nl> + } <nl> + return super . redistributeSummaries ( ) ; <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / examples / hadoop _ word _ count / src / WordCount . java b / examples / hadoop _ word _ count / src / WordCount . java <nl> index ddda2c3 . . 86e19f8 100644 <nl> - - - a / examples / hadoop _ word _ count / src / WordCount . java <nl> + + + b / examples / hadoop _ word _ count / src / WordCount . java <nl> @ @ - 136 , 13 + 136 , 13 @ @ public class WordCount extends Configured implements Tool <nl> private static Mutation getMutation ( Text word , int sum ) <nl> { <nl> Column c = new Column ( ) ; <nl> - c . name = ByteBuffer . wrap ( Arrays . copyOf ( word . getBytes ( ) , word . getLength ( ) ) ) ; <nl> - c . value = ByteBufferUtil . bytes ( String . valueOf ( sum ) ) ; <nl> - c . timestamp = System . currentTimeMillis ( ) * 1000 ; <nl> + c . setName ( Arrays . copyOf ( word . getBytes ( ) , word . getLength ( ) ) ) ; <nl> + c . setValue ( ByteBufferUtil . bytes ( String . valueOf ( sum ) ) ; <nl> + c . setTimestamp ( System . currentTimeMillis ( ) ) ; <nl> <nl> Mutation m = new Mutation ( ) ; <nl> - m . column _ or _ supercolumn = new ColumnOrSuperColumn ( ) ; <nl> - m . column _ or _ supercolumn . column = c ; <nl> + m . setColumn _ or _ supercolumn ( new ColumnOrSuperColumn ( ) ) ; <nl> + m . column _ or _ supercolumn . setColumn ( c ) ; <nl> return m ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java b / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java 
 index ddda430 . . 95ade16 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummaryManager . java 
 @ @ - 225 , 7 + 225 , 9 @ @ public class IndexSummaryManager implements IndexSummaryManagerMBean 
 Pair < List < SSTableReader > , Map < UUID , LifecycleTransaction > > compactingAndNonCompacting = getCompactingAndNonCompactingSSTables ( ) ; 
 try 
 { 
 - redistributeSummaries ( compactingAndNonCompacting . left , compactingAndNonCompacting . right , this . memoryPoolBytes ) ; 
 + redistributeSummaries ( new IndexSummaryRedistribution ( compactingAndNonCompacting . left , 
 + compactingAndNonCompacting . right , 
 + this . memoryPoolBytes ) ) ; 
 } 
 finally 
 { 
 @ @ - 237 , 14 + 239 , 14 @ @ public class IndexSummaryManager implements IndexSummaryManagerMBean 
 / * * 
 * Attempts to fairly distribute a fixed pool of memory for index summaries across a set of SSTables based on 
 * their recent read rates . 
 - * @ param transactions containing the sstables we are to redistribute the memory pool across 
 - * @ param memoryPoolBytes a size ( in bytes ) that the total index summary space usage should stay close to or 
 - * under , if possible 
 + * @ param redistribution encapsulating the transactions containing the sstables we are to redistribute the 
 + * memory pool across and a size ( in bytes ) that the total index summary space usage 
 + * should stay close to or under , if possible 
 * @ return a list of new SSTableReader instances 
 * / 
 @ VisibleForTesting 
 - public static List < SSTableReader > redistributeSummaries ( List < SSTableReader > compacting , Map < UUID , LifecycleTransaction > transactions , long memoryPoolBytes ) throws IOException 
 + public static List < SSTableReader > redistributeSummaries ( IndexSummaryRedistribution redistribution ) throws IOException 
 { 
 - return CompactionManager . instance . runIndexSummaryRedistribution ( new IndexSummaryRedistribution ( compacting , transactions , memoryPoolBytes ) ) ; 
 + return CompactionManager . instance . runIndexSummaryRedistribution ( redistribution ) ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / IndexSummaryManagerTest . java b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryManagerTest . java 
 index 0498c68 . . c0445d5 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / IndexSummaryManagerTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryManagerTest . java 
 @ @ - 19 , 16 + 19 , 8 @ @ package org . apache . cassandra . io . sstable ; 
 
 import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 - import java . util . ArrayList ; 
 - import java . util . Collections ; 
 - import java . util . Comparator ; 
 - import java . util . HashSet ; 
 - import java . util . List ; 
 - import java . util . Map ; 
 - import java . util . Set ; 
 - import java . util . concurrent . ExecutionException ; 
 - import java . util . concurrent . Future ; 
 - import java . util . concurrent . TimeUnit ; 
 + import java . util . * ; 
 + import java . util . concurrent . * ; 
 import java . util . concurrent . atomic . AtomicReference ; 
 
 import com . google . common . base . Joiner ; 
 @ @ - 147 , 7 + 139 , 7 @ @ public class IndexSummaryManagerTest 
 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) 
 { 
 - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , originalOffHeapSize * sstables . size ( ) ) ; 
 + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , originalOffHeapSize * sstables . size ( ) ) ) ; 
 } 
 for ( SSTableReader sstable : sstables ) 
 assertEquals ( BASE _ SAMPLING _ LEVEL , sstable . getIndexSummarySamplingLevel ( ) ) ; 
 @ @ - 255 , 7 + 247 , 7 @ @ public class IndexSummaryManagerTest 
 long summarySpace = sstable . getIndexSummaryOffHeapSize ( ) ; 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( asList ( sstable ) , OperationType . UNKNOWN ) ) 
 { 
 - redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , summarySpace ) ; 
 + redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , summarySpace ) ) ; 
 } 
 
 sstable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; 
 @ @ - 267 , 7 + 259 , 7 @ @ public class IndexSummaryManagerTest 
 int previousSize = sstable . getIndexSummarySize ( ) ; 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( asList ( sstable ) , OperationType . UNKNOWN ) ) 
 { 
 - redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( long ) Math . ceil ( summarySpace * 1 . 5 ) ) ; 
 + redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( long ) Math . ceil ( summarySpace * 1 . 5 ) ) ) ; 
 } 
 sstable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; 
 assertEquals ( previousSize * 1 . 5 , ( double ) sstable . getIndexSummarySize ( ) , 1 ) ; 
 @ @ - 278 , 7 + 270 , 7 @ @ public class IndexSummaryManagerTest 
 cfs . metadata . minIndexInterval ( originalMinIndexInterval ) ; 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( asList ( sstable ) , OperationType . UNKNOWN ) ) 
 { 
 - redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( long ) Math . ceil ( summarySpace / 2 . 0 ) ) ; 
 + redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( long ) Math . ceil ( summarySpace / 2 . 0 ) ) ) ; 
 } 
 sstable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; 
 assertEquals ( originalMinIndexInterval * 2 , sstable . getEffectiveIndexInterval ( ) , 0 . 001 ) ; 
 @ @ - 291 , 7 + 283 , 7 @ @ public class IndexSummaryManagerTest 
 cfs . metadata . maxIndexInterval ( originalMinIndexInterval * 4 ) ; 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( asList ( sstable ) , OperationType . UNKNOWN ) ) 
 { 
 - redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 10 ) ; 
 + redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 10 ) ) ; 
 } 
 sstable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; 
 assertEquals ( cfs . metadata . params . minIndexInterval , sstable . getEffectiveIndexInterval ( ) , 0 . 001 ) ; 
 @ @ - 314 , 7 + 306 , 7 @ @ public class IndexSummaryManagerTest 
 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) 
 { 
 - redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 10 ) ; 
 + redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 10 ) ) ; 
 } 
 sstables = new ArrayList < > ( cfs . getLiveSSTables ( ) ) ; 
 for ( SSTableReader sstable : sstables ) 
 @ @ - 324 , 7 + 316 , 7 @ @ public class IndexSummaryManagerTest 
 cfs . metadata . maxIndexInterval ( cfs . metadata . params . maxIndexInterval / 2 ) ; 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) 
 { 
 - redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 1 ) ; 
 + redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 1 ) ) ; 
 } 
 sstables = new ArrayList < > ( cfs . getLiveSSTables ( ) ) ; 
 for ( SSTableReader sstable : sstables ) 
 @ @ - 337 , 7 + 329 , 7 @ @ public class IndexSummaryManagerTest 
 cfs . metadata . maxIndexInterval ( cfs . metadata . params . maxIndexInterval * 2 ) ; 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) 
 { 
 - redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 1 ) ; 
 + redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 1 ) ) ; 
 } 
 for ( SSTableReader sstable : cfs . getLiveSSTables ( ) ) 
 { 
 @ @ - 368 , 7 + 360 , 7 @ @ public class IndexSummaryManagerTest 
 / / there should be enough space to not downsample anything 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) 
 { 
 - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * numSSTables ) ) ; 
 + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * numSSTables ) ) ) ; 
 } 
 for ( SSTableReader sstable : sstables ) 
 assertEquals ( BASE _ SAMPLING _ LEVEL , sstable . getIndexSummarySamplingLevel ( ) ) ; 
 @ @ - 379 , 7 + 371 , 7 @ @ public class IndexSummaryManagerTest 
 assert sstables . size ( ) = = 4 ; 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) 
 { 
 - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * ( numSSTables / 2 ) ) ) ; 
 + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * ( numSSTables / 2 ) ) ) ) ; 
 } 
 for ( SSTableReader sstable : sstables ) 
 assertEquals ( BASE _ SAMPLING _ LEVEL / 2 , sstable . getIndexSummarySamplingLevel ( ) ) ; 
 @ @ - 388 , 7 + 380 , 7 @ @ public class IndexSummaryManagerTest 
 / / everything should get cut to a quarter 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) 
 { 
 - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * ( numSSTables / 4 ) ) ) ; 
 + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * ( numSSTables / 4 ) ) ) ) ; 
 } 
 for ( SSTableReader sstable : sstables ) 
 assertEquals ( BASE _ SAMPLING _ LEVEL / 4 , sstable . getIndexSummarySamplingLevel ( ) ) ; 
 @ @ - 397 , 7 + 389 , 7 @ @ public class IndexSummaryManagerTest 
 / / upsample back up to half 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) 
 { 
 - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * ( numSSTables / 2 ) + 4 ) ) ; 
 + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * ( numSSTables / 2 ) + 4 ) ) ) ; 
 } 
 assert sstables . size ( ) = = 4 ; 
 for ( SSTableReader sstable : sstables ) 
 @ @ - 407 , 7 + 399 , 7 @ @ public class IndexSummaryManagerTest 
 / / upsample back up to the original index summary 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) 
 { 
 - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * numSSTables ) ) ; 
 + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * numSSTables ) ) ) ; 
 } 
 for ( SSTableReader sstable : sstables ) 
 assertEquals ( BASE _ SAMPLING _ LEVEL , sstable . getIndexSummarySamplingLevel ( ) ) ; 
 @ @ - 419 , 7 + 411 , 7 @ @ public class IndexSummaryManagerTest 
 sstables . get ( 1 ) . overrideReadMeter ( new RestorableMeter ( 50 . 0 , 50 . 0 ) ) ; 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) 
 { 
 - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * 3 ) ) ; 
 + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * 3 ) ) ) ; 
 } 
 Collections . sort ( sstables , hotnessComparator ) ; 
 assertEquals ( BASE _ SAMPLING _ LEVEL / 2 , sstables . get ( 0 ) . getIndexSummarySamplingLevel ( ) ) ; 
 @ @ - 435 , 7 + 427 , 7 @ @ public class IndexSummaryManagerTest 
 sstables . get ( 1 ) . overrideReadMeter ( new RestorableMeter ( higherRate , higherRate ) ) ; 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) 
 { 
 - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * 3 ) ) ; 
 + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * 3 ) ) ) ; 
 } 
 Collections . sort ( sstables , hotnessComparator ) ; 
 assertEquals ( BASE _ SAMPLING _ LEVEL / 2 , sstables . get ( 0 ) . getIndexSummarySamplingLevel ( ) ) ; 
 @ @ - 453 , 7 + 445 , 7 @ @ public class IndexSummaryManagerTest 
 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) 
 { 
 - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * 3 ) + 50 ) ; 
 + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( singleSummaryOffHeapSpace * 3 ) + 50 ) ) ; 
 } 
 Collections . sort ( sstables , hotnessComparator ) ; 
 
 @ @ - 477 , 7 + 469 , 7 @ @ public class IndexSummaryManagerTest 
 sstables . get ( 3 ) . overrideReadMeter ( new RestorableMeter ( 128 . 0 , 128 . 0 ) ) ; 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) 
 { 
 - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( long ) ( singleSummaryOffHeapSpace + ( singleSummaryOffHeapSpace * ( 92 . 0 / BASE _ SAMPLING _ LEVEL ) ) ) ) ; 
 + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , ( long ) ( singleSummaryOffHeapSpace + ( singleSummaryOffHeapSpace * ( 92 . 0 / BASE _ SAMPLING _ LEVEL ) ) ) ) ) ; 
 } 
 Collections . sort ( sstables , hotnessComparator ) ; 
 assertEquals ( 1 , sstables . get ( 0 ) . getIndexSummarySize ( ) ) ; / / at the min sampling level 
 @ @ - 490 , 7 + 482 , 7 @ @ public class IndexSummaryManagerTest 
 / / Don ' t leave enough space for even the minimal index summaries 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) 
 { 
 - sstables = redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 10 ) ; 
 + sstables = redistributeSummaries ( redistribution ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , 10 ) ) ; 
 } 
 for ( SSTableReader sstable : sstables ) 
 assertEquals ( 1 , sstable . getIndexSummarySize ( ) ) ; / / at the min sampling level 
 @ @ - 625 , 6 + 617 , 9 @ @ public class IndexSummaryManagerTest 
 / / everything should get cut in half 
 final AtomicReference < CompactionInterruptedException > exception = new AtomicReference < > ( ) ; 
 
 + / / barrier to control when redistribution runs 
 + final CountDownLatch barrier = new CountDownLatch ( 1 ) ; 
 + 
 Thread t = new Thread ( new Runnable ( ) 
 { 
 public void run ( ) 
 @ @ - 634 , 7 + 629 , 10 @ @ public class IndexSummaryManagerTest 
 / / Don ' t leave enough space for even the minimal index summaries 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( sstables , OperationType . UNKNOWN ) ) 
 { 
 - redistributeSummaries ( Collections . EMPTY _ LIST , of ( cfs . metadata . cfId , txn ) , singleSummaryOffHeapSpace ) ; 
 + redistributeSummaries ( new ObservableRedistribution ( Collections . EMPTY _ LIST , 
 + of ( cfs . metadata . cfId , txn ) , 
 + singleSummaryOffHeapSpace , 
 + barrier ) ) ; 
 } 
 } 
 catch ( CompactionInterruptedException ex ) 
 @ @ - 649 , 7 + 647 , 13 @ @ public class IndexSummaryManagerTest 
 t . start ( ) ; 
 while ( CompactionManager . instance . getActiveCompactions ( ) = = 0 & & t . isAlive ( ) ) 
 Thread . sleep ( 1 ) ; 
 + / / to ensure that the stop condition check in IndexSummaryRedistribution : : redistributeSummaries 
 + / / is made * after * the halt request is made to the CompactionManager , don ' t allow the redistribution 
 + / / to proceed until stopCompaction has been called . 
 CompactionManager . instance . stopCompaction ( " INDEX _ SUMMARY " ) ; 
 + / / allows the redistribution to proceed 
 + barrier . countDown ( ) ; 
 + 
 t . join ( ) ; 
 
 assertNotNull ( " Expected compaction interrupted exception " , exception . get ( ) ) ; 
 @ @ - 664 , 4 + 668 , 37 @ @ public class IndexSummaryManagerTest 
 
 validateData ( cfs , numRows ) ; 
 } 
 + 
 + private static IndexSummaryRedistribution redistribution ( List < SSTableReader > compacting , 
 + Map < UUID , LifecycleTransaction > transactions , 
 + long memoryPoolBytes ) 
 + { 
 + return new IndexSummaryRedistribution ( compacting , transactions , memoryPoolBytes ) ; 
 + } 
 + 
 + private static class ObservableRedistribution extends IndexSummaryRedistribution 
 + { 
 + CountDownLatch barrier ; 
 + public ObservableRedistribution ( List < SSTableReader > compacting , 
 + Map < UUID , LifecycleTransaction > transactions , 
 + long memoryPoolBytes , 
 + CountDownLatch barrier ) 
 + { 
 + super ( compacting , transactions , memoryPoolBytes ) ; 
 + this . barrier = barrier ; 
 + } 
 + 
 + public List < SSTableReader > redistributeSummaries ( ) throws IOException 
 + { 
 + try 
 + { 
 + barrier . await ( ) ; 
 + } 
 + catch ( InterruptedException e ) 
 + { 
 + throw new RuntimeException ( " Interrupted waiting on test barrier " ) ; 
 + } 
 + return super . redistributeSummaries ( ) ; 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / examples / hadoop _ word _ count / src / WordCount . java b / examples / hadoop _ word _ count / src / WordCount . java 
 index ddda2c3 . . 86e19f8 100644 
 - - - a / examples / hadoop _ word _ count / src / WordCount . java 
 + + + b / examples / hadoop _ word _ count / src / WordCount . java 
 @ @ - 136 , 13 + 136 , 13 @ @ public class WordCount extends Configured implements Tool 
 private static Mutation getMutation ( Text word , int sum ) 
 { 
 Column c = new Column ( ) ; 
 - c . name = ByteBuffer . wrap ( Arrays . copyOf ( word . getBytes ( ) , word . getLength ( ) ) ) ; 
 - c . value = ByteBufferUtil . bytes ( String . valueOf ( sum ) ) ; 
 - c . timestamp = System . currentTimeMillis ( ) * 1000 ; 
 + c . setName ( Arrays . copyOf ( word . getBytes ( ) , word . getLength ( ) ) ) ; 
 + c . setValue ( ByteBufferUtil . bytes ( String . valueOf ( sum ) ) ; 
 + c . setTimestamp ( System . currentTimeMillis ( ) ) ; 
 
 Mutation m = new Mutation ( ) ; 
 - m . column _ or _ supercolumn = new ColumnOrSuperColumn ( ) ; 
 - m . column _ or _ supercolumn . column = c ; 
 + m . setColumn _ or _ supercolumn ( new ColumnOrSuperColumn ( ) ) ; 
 + m . column _ or _ supercolumn . setColumn ( c ) ; 
 return m ; 
 } 
 }
