BLEU SCORE: 0.016087046643979717

TEST MSG: Split CommitLogStressTest to avoid timeout
GENERATED MSG: Fix out - of - space error treatment in memtable flushing

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1b252f5 . . d6d8066 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 11 . 2 <nl> + * Split CommitLogStressTest to avoid timeout ( CASSANDRA - 14143 ) <nl> * Avoid invalidating disk boundaries unnecessarily ( CASSANDRA - 14083 ) <nl> * Avoid exposing compaction strategy index externally ( CASSANDRA - 14082 ) <nl> * Prevent continuous schema exchange between 3 . 0 and 3 . 11 nodes ( CASSANDRA - 14109 ) <nl> diff - - git a / test / long / org / apache / cassandra / db / commitlog / BatchCommitLogStressTest . java b / test / long / org / apache / cassandra / db / commitlog / BatchCommitLogStressTest . java <nl> new file mode 100644 <nl> index 0000000 . . 3665882 <nl> - - - / dev / null <nl> + + + b / test / long / org / apache / cassandra / db / commitlog / BatchCommitLogStressTest . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . db . commitlog ; <nl> + <nl> + import org . junit . runner . RunWith ; <nl> + import org . junit . runners . Parameterized ; <nl> + <nl> + import org . apache . cassandra . config . Config ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . config . ParameterizedClass ; <nl> + import org . apache . cassandra . security . EncryptionContext ; <nl> + <nl> + @ RunWith ( Parameterized . class ) <nl> + public class BatchCommitLogStressTest extends CommitLogStressTest <nl> + { <nl> + public BatchCommitLogStressTest ( ParameterizedClass commitLogCompression , EncryptionContext encryptionContext ) <nl> + { <nl> + super ( commitLogCompression , encryptionContext ) ; <nl> + DatabaseDescriptor . setCommitLogSync ( Config . CommitLogSync . batch ) ; <nl> + } <nl> + } <nl> diff - - git a / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java b / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java <nl> index 3f5be03 . . 2162d85 100644 <nl> - - - a / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java <nl> + + + b / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java <nl> @ @ - 33 , 25 + 33 , 30 @ @ import com . google . common . util . concurrent . RateLimiter ; <nl> import org . junit . Assert ; <nl> import org . junit . Before ; <nl> import org . junit . BeforeClass ; <nl> + import org . junit . Ignore ; <nl> import org . junit . Test ; <nl> + import org . junit . runners . Parameterized . Parameters ; <nl> <nl> import io . netty . util . concurrent . FastThreadLocalThread ; <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . UpdateBuilder ; <nl> - import org . apache . cassandra . config . Config . CommitLogSync ; <nl> import org . apache . cassandra . config . * ; <nl> import org . apache . cassandra . db . Mutation ; <nl> import org . apache . cassandra . db . marshal . UTF8Type ; <nl> import org . apache . cassandra . db . partitions . PartitionUpdate ; <nl> import org . apache . cassandra . db . rows . * ; <nl> + import org . apache . cassandra . io . compress . DeflateCompressor ; <nl> + import org . apache . cassandra . io . compress . LZ4Compressor ; <nl> + import org . apache . cassandra . io . compress . SnappyCompressor ; <nl> import org . apache . cassandra . io . util . DataInputBuffer ; <nl> import org . apache . cassandra . io . util . DataInputPlus ; <nl> import org . apache . cassandra . security . EncryptionContext ; <nl> import org . apache . cassandra . security . EncryptionContextGenerator ; <nl> <nl> <nl> - public class CommitLogStressTest <nl> + @ Ignore <nl> + public abstract class CommitLogStressTest <nl> { <nl> static <nl> { <nl> @ @ - 79 , 55 + 84 , 19 @ @ public class CommitLogStressTest <nl> return hash ; <nl> } <nl> <nl> - public static void main ( String [ ] args ) throws Exception <nl> - { <nl> - try <nl> - { <nl> - if ( args . length > = 1 ) <nl> - { <nl> - NUM _ THREADS = Integer . parseInt ( args [ 0 ] ) ; <nl> - System . out . println ( " Setting num threads to : " + NUM _ THREADS ) ; <nl> - } <nl> - <nl> - if ( args . length > = 2 ) <nl> - { <nl> - numCells = Integer . parseInt ( args [ 1 ] ) ; <nl> - System . out . println ( " Setting num cells to : " + numCells ) ; <nl> - } <nl> - <nl> - if ( args . length > = 3 ) <nl> - { <nl> - cellSize = Integer . parseInt ( args [ 1 ] ) ; <nl> - System . out . println ( " Setting cell size to : " + cellSize + " be aware the source corpus may be small " ) ; <nl> - } <nl> + private boolean failed = false ; <nl> + private volatile boolean stop = false ; <nl> + private boolean randomSize = false ; <nl> + private boolean discardedRun = false ; <nl> + private CommitLogPosition discardedPos ; <nl> <nl> - if ( args . length > = 4 ) <nl> - { <nl> - rateLimit = Integer . parseInt ( args [ 1 ] ) ; <nl> - System . out . println ( " Setting per thread rate limit to : " + rateLimit ) ; <nl> - } <nl> - initialize ( ) ; <nl> - <nl> - CommitLogStressTest tester = new CommitLogStressTest ( ) ; <nl> - tester . cleanDir ( ) ; <nl> - tester . testFixedSize ( ) ; <nl> - } <nl> - catch ( Throwable e ) <nl> - { <nl> - e . printStackTrace ( System . err ) ; <nl> - } <nl> - finally <nl> - { <nl> - System . exit ( 0 ) ; <nl> - } <nl> + public CommitLogStressTest ( ParameterizedClass commitLogCompression , EncryptionContext encryptionContext ) <nl> + { <nl> + DatabaseDescriptor . setCommitLogCompression ( commitLogCompression ) ; <nl> + DatabaseDescriptor . setEncryptionContext ( encryptionContext ) ; <nl> + DatabaseDescriptor . setCommitLogSegmentSize ( 32 ) ; <nl> } <nl> <nl> - boolean failed = false ; <nl> - volatile boolean stop = false ; <nl> - boolean randomSize = false ; <nl> - boolean discardedRun = false ; <nl> - CommitLogPosition discardedPos ; <nl> - <nl> @ BeforeClass <nl> static public void initialize ( ) throws IOException <nl> { <nl> @ @ - 165 , 12 + 134 , 23 @ @ public class CommitLogStressTest <nl> } <nl> } <nl> <nl> + @ Parameters ( ) <nl> + public static Collection < Object [ ] > buildParameterizedVariants ( ) <nl> + { <nl> + return Arrays . asList ( new Object [ ] [ ] { <nl> + { null , EncryptionContextGenerator . createDisabledContext ( ) } , / / No compression , no encryption <nl> + { null , EncryptionContextGenerator . createContext ( true ) } , / / Encryption <nl> + { new ParameterizedClass ( LZ4Compressor . class . getName ( ) , Collections . emptyMap ( ) ) , EncryptionContextGenerator . createDisabledContext ( ) } , <nl> + { new ParameterizedClass ( SnappyCompressor . class . getName ( ) , Collections . emptyMap ( ) ) , EncryptionContextGenerator . createDisabledContext ( ) } , <nl> + { new ParameterizedClass ( DeflateCompressor . class . getName ( ) , Collections . emptyMap ( ) ) , EncryptionContextGenerator . createDisabledContext ( ) } } ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testRandomSize ( ) throws Exception <nl> { <nl> randomSize = true ; <nl> discardedRun = false ; <nl> - testAllLogConfigs ( ) ; <nl> + testLog ( ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 178 , 8 + 158 , 7 @ @ public class CommitLogStressTest <nl> { <nl> randomSize = false ; <nl> discardedRun = false ; <nl> - <nl> - testAllLogConfigs ( ) ; <nl> + testLog ( ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 187 , 45 + 166 , 18 @ @ public class CommitLogStressTest <nl> { <nl> randomSize = true ; <nl> discardedRun = true ; <nl> - <nl> - testAllLogConfigs ( ) ; <nl> - } <nl> - <nl> - public void testAllLogConfigs ( ) throws IOException , InterruptedException <nl> - { <nl> - failed = false ; <nl> - DatabaseDescriptor . setCommitLogSyncBatchWindow ( 1 ) ; <nl> - DatabaseDescriptor . setCommitLogSyncPeriod ( 30 ) ; <nl> - DatabaseDescriptor . setCommitLogSegmentSize ( 32 ) ; <nl> - <nl> - / / test plain vanilla commit logs ( the choice of 98 % of users ) <nl> - testLog ( null , EncryptionContextGenerator . createDisabledContext ( ) ) ; <nl> - <nl> - / / test the compression types <nl> - testLog ( new ParameterizedClass ( " LZ4Compressor " , null ) , EncryptionContextGenerator . createDisabledContext ( ) ) ; <nl> - testLog ( new ParameterizedClass ( " SnappyCompressor " , null ) , EncryptionContextGenerator . createDisabledContext ( ) ) ; <nl> - testLog ( new ParameterizedClass ( " DeflateCompressor " , null ) , EncryptionContextGenerator . createDisabledContext ( ) ) ; <nl> - <nl> - / / test the encrypted commit log <nl> - testLog ( null , EncryptionContextGenerator . createContext ( true ) ) ; <nl> + testLog ( ) ; <nl> } <nl> <nl> - public void testLog ( ParameterizedClass compression , EncryptionContext encryptionContext ) throws IOException , InterruptedException <nl> + private void testLog ( ) throws IOException , InterruptedException <nl> { <nl> - DatabaseDescriptor . setCommitLogCompression ( compression ) ; <nl> - DatabaseDescriptor . setEncryptionContext ( encryptionContext ) ; <nl> - <nl> String originalDir = DatabaseDescriptor . getCommitLogLocation ( ) ; <nl> try <nl> { <nl> DatabaseDescriptor . setCommitLogLocation ( location ) ; <nl> - for ( CommitLogSync sync : CommitLogSync . values ( ) ) <nl> - { <nl> - DatabaseDescriptor . setCommitLogSync ( sync ) ; <nl> - CommitLog commitLog = new CommitLog ( CommitLogArchiver . disabled ( ) ) . start ( ) ; <nl> - testLog ( commitLog ) ; <nl> - assert ! failed ; <nl> - } <nl> + CommitLog commitLog = new CommitLog ( CommitLogArchiver . disabled ( ) ) . start ( ) ; <nl> + testLog ( commitLog ) ; <nl> + assert ! failed ; <nl> } <nl> finally <nl> { <nl> @ @ - 233 , 7 + 185 , 7 @ @ public class CommitLogStressTest <nl> } <nl> } <nl> <nl> - public void testLog ( CommitLog commitLog ) throws IOException , InterruptedException { <nl> + private void testLog ( CommitLog commitLog ) throws IOException , InterruptedException { <nl> System . out . format ( " \ nTesting commit log size % . 0fmb , compressor : % s , encryption enabled : % b , sync % s % s % s \ n " , <nl> mb ( DatabaseDescriptor . getCommitLogSegmentSize ( ) ) , <nl> commitLog . configuration . getCompressorName ( ) , <nl> @ @ - 345 , 7 + 297 , 7 @ @ public class CommitLogStressTest <nl> Assert . assertTrue ( ratios . isEmpty ( ) ) ; <nl> } <nl> <nl> - public ScheduledExecutorService startThreads ( final CommitLog commitLog , final List < CommitlogThread > threads ) <nl> + private ScheduledExecutorService startThreads ( final CommitLog commitLog , final List < CommitlogThread > threads ) <nl> { <nl> stop = false ; <nl> for ( int ii = 0 ; ii < NUM _ THREADS ; ii + + ) { <nl> @ @ - 404 , 7 + 356 , 7 @ @ public class CommitLogStressTest <nl> return maxMemory / ( 1024 * 1024 ) ; <nl> } <nl> <nl> - public static ByteBuffer randomBytes ( int quantity , Random tlr ) <nl> + private static ByteBuffer randomBytes ( int quantity , Random tlr ) <nl> { <nl> ByteBuffer slice = ByteBuffer . allocate ( quantity ) ; <nl> ByteBuffer source = dataSource . duplicate ( ) ; <nl> @ @ - 427 , 7 + 379 , 7 @ @ public class CommitLogStressTest <nl> <nl> volatile CommitLogPosition clsp ; <nl> <nl> - public CommitlogThread ( CommitLog commitLog , Random rand ) <nl> + CommitlogThread ( CommitLog commitLog , Random rand ) <nl> { <nl> this . commitLog = commitLog ; <nl> this . random = rand ; <nl> @ @ - 524 , 7 + 476 , 7 @ @ public class CommitLogStressTest <nl> } <nl> } <nl> <nl> - class DummyHandler implements CommitLogReadHandler <nl> + static class DummyHandler implements CommitLogReadHandler <nl> { <nl> public boolean shouldSkipSegmentOnError ( CommitLogReadException exception ) throws IOException { return false ; } <nl> <nl> diff - - git a / test / long / org / apache / cassandra / db / commitlog / PeriodicCommitLogStressTest . java b / test / long / org / apache / cassandra / db / commitlog / PeriodicCommitLogStressTest . java <nl> new file mode 100644 <nl> index 0000000 . . 509d46a <nl> - - - / dev / null <nl> + + + b / test / long / org / apache / cassandra / db / commitlog / PeriodicCommitLogStressTest . java <nl> @ @ - 0 , 0 + 1 , 39 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . db . commitlog ; <nl> + <nl> + import org . junit . runner . RunWith ; <nl> + import org . junit . runners . Parameterized ; <nl> + <nl> + import org . apache . cassandra . config . Config ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . config . ParameterizedClass ; <nl> + import org . apache . cassandra . security . EncryptionContext ; <nl> + <nl> + @ RunWith ( Parameterized . class ) <nl> + public class PeriodicCommitLogStressTest extends CommitLogStressTest <nl> + { <nl> + public PeriodicCommitLogStressTest ( ParameterizedClass commitLogCompression , EncryptionContext encryptionContext ) <nl> + { <nl> + super ( commitLogCompression , encryptionContext ) ; <nl> + DatabaseDescriptor . setCommitLogSync ( Config . CommitLogSync . periodic ) ; <nl> + DatabaseDescriptor . setCommitLogSyncPeriod ( 30 ) ; <nl> + } <nl> + <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1b252f5 . . d6d8066 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 11 . 2 
 + * Split CommitLogStressTest to avoid timeout ( CASSANDRA - 14143 ) 
 * Avoid invalidating disk boundaries unnecessarily ( CASSANDRA - 14083 ) 
 * Avoid exposing compaction strategy index externally ( CASSANDRA - 14082 ) 
 * Prevent continuous schema exchange between 3 . 0 and 3 . 11 nodes ( CASSANDRA - 14109 ) 
 diff - - git a / test / long / org / apache / cassandra / db / commitlog / BatchCommitLogStressTest . java b / test / long / org / apache / cassandra / db / commitlog / BatchCommitLogStressTest . java 
 new file mode 100644 
 index 0000000 . . 3665882 
 - - - / dev / null 
 + + + b / test / long / org / apache / cassandra / db / commitlog / BatchCommitLogStressTest . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . db . commitlog ; 
 + 
 + import org . junit . runner . RunWith ; 
 + import org . junit . runners . Parameterized ; 
 + 
 + import org . apache . cassandra . config . Config ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . config . ParameterizedClass ; 
 + import org . apache . cassandra . security . EncryptionContext ; 
 + 
 + @ RunWith ( Parameterized . class ) 
 + public class BatchCommitLogStressTest extends CommitLogStressTest 
 + { 
 + public BatchCommitLogStressTest ( ParameterizedClass commitLogCompression , EncryptionContext encryptionContext ) 
 + { 
 + super ( commitLogCompression , encryptionContext ) ; 
 + DatabaseDescriptor . setCommitLogSync ( Config . CommitLogSync . batch ) ; 
 + } 
 + } 
 diff - - git a / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java b / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java 
 index 3f5be03 . . 2162d85 100644 
 - - - a / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java 
 + + + b / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java 
 @ @ - 33 , 25 + 33 , 30 @ @ import com . google . common . util . concurrent . RateLimiter ; 
 import org . junit . Assert ; 
 import org . junit . Before ; 
 import org . junit . BeforeClass ; 
 + import org . junit . Ignore ; 
 import org . junit . Test ; 
 + import org . junit . runners . Parameterized . Parameters ; 
 
 import io . netty . util . concurrent . FastThreadLocalThread ; 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . Util ; 
 import org . apache . cassandra . UpdateBuilder ; 
 - import org . apache . cassandra . config . Config . CommitLogSync ; 
 import org . apache . cassandra . config . * ; 
 import org . apache . cassandra . db . Mutation ; 
 import org . apache . cassandra . db . marshal . UTF8Type ; 
 import org . apache . cassandra . db . partitions . PartitionUpdate ; 
 import org . apache . cassandra . db . rows . * ; 
 + import org . apache . cassandra . io . compress . DeflateCompressor ; 
 + import org . apache . cassandra . io . compress . LZ4Compressor ; 
 + import org . apache . cassandra . io . compress . SnappyCompressor ; 
 import org . apache . cassandra . io . util . DataInputBuffer ; 
 import org . apache . cassandra . io . util . DataInputPlus ; 
 import org . apache . cassandra . security . EncryptionContext ; 
 import org . apache . cassandra . security . EncryptionContextGenerator ; 
 
 
 - public class CommitLogStressTest 
 + @ Ignore 
 + public abstract class CommitLogStressTest 
 { 
 static 
 { 
 @ @ - 79 , 55 + 84 , 19 @ @ public class CommitLogStressTest 
 return hash ; 
 } 
 
 - public static void main ( String [ ] args ) throws Exception 
 - { 
 - try 
 - { 
 - if ( args . length > = 1 ) 
 - { 
 - NUM _ THREADS = Integer . parseInt ( args [ 0 ] ) ; 
 - System . out . println ( " Setting num threads to : " + NUM _ THREADS ) ; 
 - } 
 - 
 - if ( args . length > = 2 ) 
 - { 
 - numCells = Integer . parseInt ( args [ 1 ] ) ; 
 - System . out . println ( " Setting num cells to : " + numCells ) ; 
 - } 
 - 
 - if ( args . length > = 3 ) 
 - { 
 - cellSize = Integer . parseInt ( args [ 1 ] ) ; 
 - System . out . println ( " Setting cell size to : " + cellSize + " be aware the source corpus may be small " ) ; 
 - } 
 + private boolean failed = false ; 
 + private volatile boolean stop = false ; 
 + private boolean randomSize = false ; 
 + private boolean discardedRun = false ; 
 + private CommitLogPosition discardedPos ; 
 
 - if ( args . length > = 4 ) 
 - { 
 - rateLimit = Integer . parseInt ( args [ 1 ] ) ; 
 - System . out . println ( " Setting per thread rate limit to : " + rateLimit ) ; 
 - } 
 - initialize ( ) ; 
 - 
 - CommitLogStressTest tester = new CommitLogStressTest ( ) ; 
 - tester . cleanDir ( ) ; 
 - tester . testFixedSize ( ) ; 
 - } 
 - catch ( Throwable e ) 
 - { 
 - e . printStackTrace ( System . err ) ; 
 - } 
 - finally 
 - { 
 - System . exit ( 0 ) ; 
 - } 
 + public CommitLogStressTest ( ParameterizedClass commitLogCompression , EncryptionContext encryptionContext ) 
 + { 
 + DatabaseDescriptor . setCommitLogCompression ( commitLogCompression ) ; 
 + DatabaseDescriptor . setEncryptionContext ( encryptionContext ) ; 
 + DatabaseDescriptor . setCommitLogSegmentSize ( 32 ) ; 
 } 
 
 - boolean failed = false ; 
 - volatile boolean stop = false ; 
 - boolean randomSize = false ; 
 - boolean discardedRun = false ; 
 - CommitLogPosition discardedPos ; 
 - 
 @ BeforeClass 
 static public void initialize ( ) throws IOException 
 { 
 @ @ - 165 , 12 + 134 , 23 @ @ public class CommitLogStressTest 
 } 
 } 
 
 + @ Parameters ( ) 
 + public static Collection < Object [ ] > buildParameterizedVariants ( ) 
 + { 
 + return Arrays . asList ( new Object [ ] [ ] { 
 + { null , EncryptionContextGenerator . createDisabledContext ( ) } , / / No compression , no encryption 
 + { null , EncryptionContextGenerator . createContext ( true ) } , / / Encryption 
 + { new ParameterizedClass ( LZ4Compressor . class . getName ( ) , Collections . emptyMap ( ) ) , EncryptionContextGenerator . createDisabledContext ( ) } , 
 + { new ParameterizedClass ( SnappyCompressor . class . getName ( ) , Collections . emptyMap ( ) ) , EncryptionContextGenerator . createDisabledContext ( ) } , 
 + { new ParameterizedClass ( DeflateCompressor . class . getName ( ) , Collections . emptyMap ( ) ) , EncryptionContextGenerator . createDisabledContext ( ) } } ) ; 
 + } 
 + 
 @ Test 
 public void testRandomSize ( ) throws Exception 
 { 
 randomSize = true ; 
 discardedRun = false ; 
 - testAllLogConfigs ( ) ; 
 + testLog ( ) ; 
 } 
 
 @ Test 
 @ @ - 178 , 8 + 158 , 7 @ @ public class CommitLogStressTest 
 { 
 randomSize = false ; 
 discardedRun = false ; 
 - 
 - testAllLogConfigs ( ) ; 
 + testLog ( ) ; 
 } 
 
 @ Test 
 @ @ - 187 , 45 + 166 , 18 @ @ public class CommitLogStressTest 
 { 
 randomSize = true ; 
 discardedRun = true ; 
 - 
 - testAllLogConfigs ( ) ; 
 - } 
 - 
 - public void testAllLogConfigs ( ) throws IOException , InterruptedException 
 - { 
 - failed = false ; 
 - DatabaseDescriptor . setCommitLogSyncBatchWindow ( 1 ) ; 
 - DatabaseDescriptor . setCommitLogSyncPeriod ( 30 ) ; 
 - DatabaseDescriptor . setCommitLogSegmentSize ( 32 ) ; 
 - 
 - / / test plain vanilla commit logs ( the choice of 98 % of users ) 
 - testLog ( null , EncryptionContextGenerator . createDisabledContext ( ) ) ; 
 - 
 - / / test the compression types 
 - testLog ( new ParameterizedClass ( " LZ4Compressor " , null ) , EncryptionContextGenerator . createDisabledContext ( ) ) ; 
 - testLog ( new ParameterizedClass ( " SnappyCompressor " , null ) , EncryptionContextGenerator . createDisabledContext ( ) ) ; 
 - testLog ( new ParameterizedClass ( " DeflateCompressor " , null ) , EncryptionContextGenerator . createDisabledContext ( ) ) ; 
 - 
 - / / test the encrypted commit log 
 - testLog ( null , EncryptionContextGenerator . createContext ( true ) ) ; 
 + testLog ( ) ; 
 } 
 
 - public void testLog ( ParameterizedClass compression , EncryptionContext encryptionContext ) throws IOException , InterruptedException 
 + private void testLog ( ) throws IOException , InterruptedException 
 { 
 - DatabaseDescriptor . setCommitLogCompression ( compression ) ; 
 - DatabaseDescriptor . setEncryptionContext ( encryptionContext ) ; 
 - 
 String originalDir = DatabaseDescriptor . getCommitLogLocation ( ) ; 
 try 
 { 
 DatabaseDescriptor . setCommitLogLocation ( location ) ; 
 - for ( CommitLogSync sync : CommitLogSync . values ( ) ) 
 - { 
 - DatabaseDescriptor . setCommitLogSync ( sync ) ; 
 - CommitLog commitLog = new CommitLog ( CommitLogArchiver . disabled ( ) ) . start ( ) ; 
 - testLog ( commitLog ) ; 
 - assert ! failed ; 
 - } 
 + CommitLog commitLog = new CommitLog ( CommitLogArchiver . disabled ( ) ) . start ( ) ; 
 + testLog ( commitLog ) ; 
 + assert ! failed ; 
 } 
 finally 
 { 
 @ @ - 233 , 7 + 185 , 7 @ @ public class CommitLogStressTest 
 } 
 } 
 
 - public void testLog ( CommitLog commitLog ) throws IOException , InterruptedException { 
 + private void testLog ( CommitLog commitLog ) throws IOException , InterruptedException { 
 System . out . format ( " \ nTesting commit log size % . 0fmb , compressor : % s , encryption enabled : % b , sync % s % s % s \ n " , 
 mb ( DatabaseDescriptor . getCommitLogSegmentSize ( ) ) , 
 commitLog . configuration . getCompressorName ( ) , 
 @ @ - 345 , 7 + 297 , 7 @ @ public class CommitLogStressTest 
 Assert . assertTrue ( ratios . isEmpty ( ) ) ; 
 } 
 
 - public ScheduledExecutorService startThreads ( final CommitLog commitLog , final List < CommitlogThread > threads ) 
 + private ScheduledExecutorService startThreads ( final CommitLog commitLog , final List < CommitlogThread > threads ) 
 { 
 stop = false ; 
 for ( int ii = 0 ; ii < NUM _ THREADS ; ii + + ) { 
 @ @ - 404 , 7 + 356 , 7 @ @ public class CommitLogStressTest 
 return maxMemory / ( 1024 * 1024 ) ; 
 } 
 
 - public static ByteBuffer randomBytes ( int quantity , Random tlr ) 
 + private static ByteBuffer randomBytes ( int quantity , Random tlr ) 
 { 
 ByteBuffer slice = ByteBuffer . allocate ( quantity ) ; 
 ByteBuffer source = dataSource . duplicate ( ) ; 
 @ @ - 427 , 7 + 379 , 7 @ @ public class CommitLogStressTest 
 
 volatile CommitLogPosition clsp ; 
 
 - public CommitlogThread ( CommitLog commitLog , Random rand ) 
 + CommitlogThread ( CommitLog commitLog , Random rand ) 
 { 
 this . commitLog = commitLog ; 
 this . random = rand ; 
 @ @ - 524 , 7 + 476 , 7 @ @ public class CommitLogStressTest 
 } 
 } 
 
 - class DummyHandler implements CommitLogReadHandler 
 + static class DummyHandler implements CommitLogReadHandler 
 { 
 public boolean shouldSkipSegmentOnError ( CommitLogReadException exception ) throws IOException { return false ; } 
 
 diff - - git a / test / long / org / apache / cassandra / db / commitlog / PeriodicCommitLogStressTest . java b / test / long / org / apache / cassandra / db / commitlog / PeriodicCommitLogStressTest . java 
 new file mode 100644 
 index 0000000 . . 509d46a 
 - - - / dev / null 
 + + + b / test / long / org / apache / cassandra / db / commitlog / PeriodicCommitLogStressTest . java 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . db . commitlog ; 
 + 
 + import org . junit . runner . RunWith ; 
 + import org . junit . runners . Parameterized ; 
 + 
 + import org . apache . cassandra . config . Config ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . config . ParameterizedClass ; 
 + import org . apache . cassandra . security . EncryptionContext ; 
 + 
 + @ RunWith ( Parameterized . class ) 
 + public class PeriodicCommitLogStressTest extends CommitLogStressTest 
 + { 
 + public PeriodicCommitLogStressTest ( ParameterizedClass commitLogCompression , EncryptionContext encryptionContext ) 
 + { 
 + super ( commitLogCompression , encryptionContext ) ; 
 + DatabaseDescriptor . setCommitLogSync ( Config . CommitLogSync . periodic ) ; 
 + DatabaseDescriptor . setCommitLogSyncPeriod ( 30 ) ; 
 + } 
 + 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
