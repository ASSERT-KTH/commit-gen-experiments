BLEU SCORE: 0.10682175159905853

TEST MSG: Improve wording around partitioner selection
GENERATED MSG: clean up partitioner comments

TEST DIFF (one line): diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index feb9037 . . d72b2e8 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 182 , 14 + 182 , 14 @ @ credentials _ validity _ in _ ms : 2000 <nl> # credentials _ update _ interval _ in _ ms : 2000 <nl> <nl> # The partitioner is responsible for distributing groups of rows ( by <nl> - # partition key ) across nodes in the cluster . You should leave this <nl> - # alone for new clusters . The partitioner can NOT be changed without <nl> - # reloading all data , so when upgrading you should set this to the <nl> - # same partitioner you were already using . <nl> - # <nl> - # Besides Murmur3Partitioner , partitioners included for backwards <nl> - # compatibility include RandomPartitioner , ByteOrderedPartitioner , and <nl> - # OrderPreservingPartitioner . <nl> + # partition key ) across nodes in the cluster . The partitioner can NOT be <nl> + # changed without reloading all data . If you are adding nodes or upgrading , <nl> + # you should set this to the same partitioner that you are currently using . <nl> + # <nl> + # The default partitioner is the Murmur3Partitioner . Older partitioners <nl> + # such as the RandomPartitioner , ByteOrderedPartitioner , and <nl> + # OrderPreservingPartitioner have been included for backward compatibility only . <nl> + # For new clusters , you should NOT change this value . <nl> # <nl> partitioner : org . apache . cassandra . dht . Murmur3Partitioner <nl>
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / concurrent / Stage . java b / src / java / org / apache / cassandra / concurrent / Stage . java <nl> index 062bbe6 . . f2907e2 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / Stage . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / Stage . java <nl> @ @ - 21 , 7 + 21 , 6 @ @ public enum Stage <nl> { <nl> READ , <nl> MUTATION , <nl> - STREAM , <nl> GOSSIP , <nl> REQUEST _ RESPONSE , <nl> ANTI _ ENTROPY , <nl> @ @ - 41 , 7 + 40 , 6 @ @ public enum Stage <nl> case MIGRATION : <nl> case MISC : <nl> case TRACING : <nl> - case STREAM : <nl> case INTERNAL _ RESPONSE : <nl> return " internal " ; <nl> case MUTATION : <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / StageManager . java b / src / java / org / apache / cassandra / concurrent / StageManager . java <nl> index 8359346 . . 7ca45f4 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / StageManager . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / StageManager . java <nl> @ @ - 51 , 7 + 51 , 6 @ @ public class StageManager <nl> stages . put ( Stage . INTERNAL _ RESPONSE , multiThreadedStage ( Stage . INTERNAL _ RESPONSE , Runtime . getRuntime ( ) . availableProcessors ( ) ) ) ; <nl> stages . put ( Stage . REPLICATE _ ON _ WRITE , multiThreadedConfigurableStage ( Stage . REPLICATE _ ON _ WRITE , getConcurrentReplicators ( ) , MAX _ REPLICATE _ ON _ WRITE _ TASKS ) ) ; <nl> / / the rest are all single - threaded <nl> - stages . put ( Stage . STREAM , new JMXEnabledThreadPoolExecutor ( Stage . STREAM ) ) ; <nl> stages . put ( Stage . GOSSIP , new JMXEnabledThreadPoolExecutor ( Stage . GOSSIP ) ) ; <nl> stages . put ( Stage . ANTI _ ENTROPY , new JMXEnabledThreadPoolExecutor ( Stage . ANTI _ ENTROPY ) ) ; <nl> stages . put ( Stage . MIGRATION , new JMXEnabledThreadPoolExecutor ( Stage . MIGRATION ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 06a0270 . . 41a42ec 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 133 , 7 + 133 , 6 @ @ public final class MessagingService implements MessagingServiceMBean <nl> put ( Verb . READ , Stage . READ ) ; <nl> put ( Verb . REQUEST _ RESPONSE , Stage . REQUEST _ RESPONSE ) ; <nl> put ( Verb . STREAM _ REPLY , Stage . MISC ) ; / / TODO does this really belong on misc ? I ' ve just copied old behavior here <nl> - put ( Verb . STREAM _ REQUEST , Stage . STREAM ) ; <nl> put ( Verb . RANGE _ SLICE , Stage . READ ) ; <nl> put ( Verb . BOOTSTRAP _ TOKEN , Stage . MISC ) ; <nl> put ( Verb . TREE _ REQUEST , Stage . ANTI _ ENTROPY ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 4cc8581 . . 58ce112 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 3352 , 15 + 3352 , 8 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> } <nl> } ; <nl> <nl> - StageManager . getStage ( Stage . STREAM ) . execute ( new Runnable ( ) <nl> - { <nl> - public void run ( ) <nl> - { <nl> - / / TODO each call to transferRanges re - flushes , this is potentially a lot of waste <nl> - StreamOut . transferRanges ( newEndpoint , Table . open ( table ) , ranges , callback , <nl> - OperationType . UNBOOTSTRAP ) ; <nl> - } <nl> - } ) ; <nl> + / / TODO each call to transferRanges re - flushes , this is potentially a lot of waste <nl> + StreamOut . transferRanges ( newEndpoint , Table . open ( table ) , ranges , callback , OperationType . UNBOOTSTRAP ) ; <nl> } <nl> } <nl> return latch ;

TEST DIFF:
diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index feb9037 . . d72b2e8 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 182 , 14 + 182 , 14 @ @ credentials _ validity _ in _ ms : 2000 
 # credentials _ update _ interval _ in _ ms : 2000 
 
 # The partitioner is responsible for distributing groups of rows ( by 
 - # partition key ) across nodes in the cluster . You should leave this 
 - # alone for new clusters . The partitioner can NOT be changed without 
 - # reloading all data , so when upgrading you should set this to the 
 - # same partitioner you were already using . 
 - # 
 - # Besides Murmur3Partitioner , partitioners included for backwards 
 - # compatibility include RandomPartitioner , ByteOrderedPartitioner , and 
 - # OrderPreservingPartitioner . 
 + # partition key ) across nodes in the cluster . The partitioner can NOT be 
 + # changed without reloading all data . If you are adding nodes or upgrading , 
 + # you should set this to the same partitioner that you are currently using . 
 + # 
 + # The default partitioner is the Murmur3Partitioner . Older partitioners 
 + # such as the RandomPartitioner , ByteOrderedPartitioner , and 
 + # OrderPreservingPartitioner have been included for backward compatibility only . 
 + # For new clusters , you should NOT change this value . 
 # 
 partitioner : org . apache . cassandra . dht . Murmur3Partitioner 


NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / concurrent / Stage . java b / src / java / org / apache / cassandra / concurrent / Stage . java 
 index 062bbe6 . . f2907e2 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / Stage . java 
 + + + b / src / java / org / apache / cassandra / concurrent / Stage . java 
 @ @ - 21 , 7 + 21 , 6 @ @ public enum Stage 
 { 
 READ , 
 MUTATION , 
 - STREAM , 
 GOSSIP , 
 REQUEST _ RESPONSE , 
 ANTI _ ENTROPY , 
 @ @ - 41 , 7 + 40 , 6 @ @ public enum Stage 
 case MIGRATION : 
 case MISC : 
 case TRACING : 
 - case STREAM : 
 case INTERNAL _ RESPONSE : 
 return " internal " ; 
 case MUTATION : 
 diff - - git a / src / java / org / apache / cassandra / concurrent / StageManager . java b / src / java / org / apache / cassandra / concurrent / StageManager . java 
 index 8359346 . . 7ca45f4 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / StageManager . java 
 + + + b / src / java / org / apache / cassandra / concurrent / StageManager . java 
 @ @ - 51 , 7 + 51 , 6 @ @ public class StageManager 
 stages . put ( Stage . INTERNAL _ RESPONSE , multiThreadedStage ( Stage . INTERNAL _ RESPONSE , Runtime . getRuntime ( ) . availableProcessors ( ) ) ) ; 
 stages . put ( Stage . REPLICATE _ ON _ WRITE , multiThreadedConfigurableStage ( Stage . REPLICATE _ ON _ WRITE , getConcurrentReplicators ( ) , MAX _ REPLICATE _ ON _ WRITE _ TASKS ) ) ; 
 / / the rest are all single - threaded 
 - stages . put ( Stage . STREAM , new JMXEnabledThreadPoolExecutor ( Stage . STREAM ) ) ; 
 stages . put ( Stage . GOSSIP , new JMXEnabledThreadPoolExecutor ( Stage . GOSSIP ) ) ; 
 stages . put ( Stage . ANTI _ ENTROPY , new JMXEnabledThreadPoolExecutor ( Stage . ANTI _ ENTROPY ) ) ; 
 stages . put ( Stage . MIGRATION , new JMXEnabledThreadPoolExecutor ( Stage . MIGRATION ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 06a0270 . . 41a42ec 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 133 , 7 + 133 , 6 @ @ public final class MessagingService implements MessagingServiceMBean 
 put ( Verb . READ , Stage . READ ) ; 
 put ( Verb . REQUEST _ RESPONSE , Stage . REQUEST _ RESPONSE ) ; 
 put ( Verb . STREAM _ REPLY , Stage . MISC ) ; / / TODO does this really belong on misc ? I ' ve just copied old behavior here 
 - put ( Verb . STREAM _ REQUEST , Stage . STREAM ) ; 
 put ( Verb . RANGE _ SLICE , Stage . READ ) ; 
 put ( Verb . BOOTSTRAP _ TOKEN , Stage . MISC ) ; 
 put ( Verb . TREE _ REQUEST , Stage . ANTI _ ENTROPY ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 4cc8581 . . 58ce112 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 3352 , 15 + 3352 , 8 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 } 
 } ; 
 
 - StageManager . getStage ( Stage . STREAM ) . execute ( new Runnable ( ) 
 - { 
 - public void run ( ) 
 - { 
 - / / TODO each call to transferRanges re - flushes , this is potentially a lot of waste 
 - StreamOut . transferRanges ( newEndpoint , Table . open ( table ) , ranges , callback , 
 - OperationType . UNBOOTSTRAP ) ; 
 - } 
 - } ) ; 
 + / / TODO each call to transferRanges re - flushes , this is potentially a lot of waste 
 + StreamOut . transferRanges ( newEndpoint , Table . open ( table ) , ranges , callback , OperationType . UNBOOTSTRAP ) ; 
 } 
 } 
 return latch ;
