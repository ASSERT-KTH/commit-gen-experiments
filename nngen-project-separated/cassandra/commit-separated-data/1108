BLEU SCORE: 0.029083177105737566

TEST MSG: Support counter - columns for native aggregates ( sum , avg , max , min )
GENERATED MSG: Allow the selection of columns together with aggregates

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index fb0b151 . . c0fd4f6 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 5 <nl> + * Support counter - columns for native aggregates ( sum , avg , max , min ) ( CASSANDRA - 9977 ) <nl> * ( cqlsh ) show correct column names for empty result sets ( CASSANDRA - 9813 ) <nl> * Add new types to Stress ( CASSANDRA - 9556 ) <nl> * Add property to allow listening on broadcast interface ( CASSANDRA - 9748 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java b / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java <nl> index 41e43c0 . . 77be525 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import java . util . List ; <nl> <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . db . marshal . ByteType ; <nl> + import org . apache . cassandra . db . marshal . CounterColumnType ; <nl> import org . apache . cassandra . db . marshal . DecimalType ; <nl> import org . apache . cassandra . db . marshal . DoubleType ; <nl> import org . apache . cassandra . db . marshal . FloatType ; <nl> @ @ - 480 , 31 + 481 , 7 @ @ public abstract class AggregateFcts <nl> { <nl> public Aggregate newAggregate ( ) <nl> { <nl> - return new Aggregate ( ) <nl> - { <nl> - private long sum ; <nl> - <nl> - public void reset ( ) <nl> - { <nl> - sum = 0 ; <nl> - } <nl> - <nl> - public ByteBuffer compute ( int protocolVersion ) <nl> - { <nl> - return ( ( LongType ) returnType ( ) ) . decompose ( sum ) ; <nl> - } <nl> - <nl> - public void addInput ( int protocolVersion , List < ByteBuffer > values ) <nl> - { <nl> - ByteBuffer value = values . get ( 0 ) ; <nl> - <nl> - if ( value = = null ) <nl> - return ; <nl> - <nl> - Number number = ( ( Number ) argTypes ( ) . get ( 0 ) . compose ( value ) ) ; <nl> - sum + = number . longValue ( ) ; <nl> - } <nl> - } ; <nl> + return new LongSumAggregate ( ) ; <nl> } <nl> } ; <nl> <nl> @ @ - 516 , 37 + 493 , 7 @ @ public abstract class AggregateFcts <nl> { <nl> public Aggregate newAggregate ( ) <nl> { <nl> - return new Aggregate ( ) <nl> - { <nl> - private long sum ; <nl> - <nl> - private int count ; <nl> - <nl> - public void reset ( ) <nl> - { <nl> - count = 0 ; <nl> - sum = 0 ; <nl> - } <nl> - <nl> - public ByteBuffer compute ( int protocolVersion ) <nl> - { <nl> - long avg = count = = 0 ? 0 : sum / count ; <nl> - <nl> - return ( ( LongType ) returnType ( ) ) . decompose ( avg ) ; <nl> - } <nl> - <nl> - public void addInput ( int protocolVersion , List < ByteBuffer > values ) <nl> - { <nl> - ByteBuffer value = values . get ( 0 ) ; <nl> - <nl> - if ( value = = null ) <nl> - return ; <nl> - <nl> - count + + ; <nl> - Number number = ( ( Number ) argTypes ( ) . get ( 0 ) . compose ( value ) ) ; <nl> - sum + = number . longValue ( ) ; <nl> - } <nl> - } ; <nl> + return new LongAvgAggregate ( ) ; <nl> } <nl> } ; <nl> <nl> @ @ - 707 , 6 + 654 , 30 @ @ public abstract class AggregateFcts <nl> } ; <nl> <nl> / * * <nl> + * The SUM function for counter column values . <nl> + * / <nl> + public static final AggregateFunction sumFunctionForCounter = <nl> + new NativeAggregateFunction ( " sum " , CounterColumnType . instance , CounterColumnType . instance ) <nl> + { <nl> + public Aggregate newAggregate ( ) <nl> + { <nl> + return new LongSumAggregate ( ) ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> + * AVG function for counter column values . <nl> + * / <nl> + public static final AggregateFunction avgFunctionForCounter = <nl> + new NativeAggregateFunction ( " avg " , CounterColumnType . instance , CounterColumnType . instance ) <nl> + { <nl> + public Aggregate newAggregate ( ) <nl> + { <nl> + return new LongAvgAggregate ( ) ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> * Creates a MAX function for the specified type . <nl> * <nl> * @ param inputType the function input and output type <nl> @ @ - 827 , 4 + 798 , 62 @ @ public abstract class AggregateFcts <nl> } <nl> } ; <nl> } <nl> + <nl> + private static class LongSumAggregate implements AggregateFunction . Aggregate <nl> + { <nl> + private long sum ; <nl> + <nl> + public void reset ( ) <nl> + { <nl> + sum = 0 ; <nl> + } <nl> + <nl> + public ByteBuffer compute ( int protocolVersion ) <nl> + { <nl> + return LongType . instance . decompose ( sum ) ; <nl> + } <nl> + <nl> + public void addInput ( int protocolVersion , List < ByteBuffer > values ) <nl> + { <nl> + ByteBuffer value = values . get ( 0 ) ; <nl> + <nl> + if ( value = = null ) <nl> + return ; <nl> + <nl> + Number number = LongType . instance . compose ( value ) ; <nl> + sum + = number . longValue ( ) ; <nl> + } <nl> + } <nl> + <nl> + private static class LongAvgAggregate implements AggregateFunction . Aggregate <nl> + { <nl> + private long sum ; <nl> + <nl> + private int count ; <nl> + <nl> + public void reset ( ) <nl> + { <nl> + count = 0 ; <nl> + sum = 0 ; <nl> + } <nl> + <nl> + public ByteBuffer compute ( int protocolVersion ) <nl> + { <nl> + long avg = count = = 0 ? 0 : sum / count ; <nl> + <nl> + return LongType . instance . decompose ( avg ) ; <nl> + } <nl> + <nl> + public void addInput ( int protocolVersion , List < ByteBuffer > values ) <nl> + { <nl> + ByteBuffer value = values . get ( 0 ) ; <nl> + <nl> + if ( value = = null ) <nl> + return ; <nl> + <nl> + count + + ; <nl> + Number number = LongType . instance . compose ( value ) ; <nl> + sum + = number . longValue ( ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / Functions . java b / src / java / org / apache / cassandra / cql3 / functions / Functions . java <nl> index e31fc9f . . 0f1af19 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / Functions . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / Functions . java <nl> @ @ - 91 , 6 + 91 , 7 @ @ public abstract class Functions <nl> declare ( AggregateFcts . sumFunctionForDouble ) ; <nl> declare ( AggregateFcts . sumFunctionForDecimal ) ; <nl> declare ( AggregateFcts . sumFunctionForVarint ) ; <nl> + declare ( AggregateFcts . sumFunctionForCounter ) ; <nl> declare ( AggregateFcts . avgFunctionForByte ) ; <nl> declare ( AggregateFcts . avgFunctionForShort ) ; <nl> declare ( AggregateFcts . avgFunctionForInt32 ) ; <nl> @ @ - 99 , 6 + 100 , 7 @ @ public abstract class Functions <nl> declare ( AggregateFcts . avgFunctionForDouble ) ; <nl> declare ( AggregateFcts . avgFunctionForVarint ) ; <nl> declare ( AggregateFcts . avgFunctionForDecimal ) ; <nl> + declare ( AggregateFcts . avgFunctionForCounter ) ; <nl> <nl> MigrationManager . instance . register ( new FunctionsMigrationListener ( ) ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java <nl> index 0d11a82 . . bcfe871 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java <nl> @ @ - 716 , 6 + 716 , 32 @ @ public class UFTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> + public void testJavaFunctionCounter ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( key int primary key , val counter ) " ) ; <nl> + <nl> + String fName = createFunction ( KEYSPACE , " counter " , <nl> + " CREATE OR REPLACE FUNCTION % s ( val counter ) " + <nl> + " CALLED ON NULL INPUT " + <nl> + " RETURNS bigint " + <nl> + " LANGUAGE JAVA " + <nl> + " AS ' return val + 1 ; ' ; " ) ; <nl> + <nl> + execute ( " UPDATE % s SET val = val + 1 WHERE key = 1 " ) ; <nl> + assertRows ( execute ( " SELECT key , val , " + fName + " ( val ) FROM % s " ) , <nl> + row ( 1 , 1L , 2L ) ) ; <nl> + execute ( " UPDATE % s SET val = val + 1 WHERE key = 1 " ) ; <nl> + assertRows ( execute ( " SELECT key , val , " + fName + " ( val ) FROM % s " ) , <nl> + row ( 1 , 2L , 3L ) ) ; <nl> + execute ( " UPDATE % s SET val = val + 2 WHERE key = 1 " ) ; <nl> + assertRows ( execute ( " SELECT key , val , " + fName + " ( val ) FROM % s " ) , <nl> + row ( 1 , 4L , 5L ) ) ; <nl> + execute ( " UPDATE % s SET val = val - 2 WHERE key = 1 " ) ; <nl> + assertRows ( execute ( " SELECT key , val , " + fName + " ( val ) FROM % s " ) , <nl> + row ( 1 , 2L , 3L ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testFunctionInTargetKeyspace ( ) throws Throwable <nl> { <nl> createTable ( " CREATE TABLE % s ( key int primary key , val double ) " ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> index e661b4f . . 0e0313c 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> @ @ - 37 , 6 + 37 , 7 @ @ import org . apache . cassandra . db . SystemKeyspace ; <nl> import org . apache . cassandra . exceptions . FunctionExecutionException ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> import org . apache . cassandra . service . ClientState ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . transport . Event ; <nl> import org . apache . cassandra . transport . messages . ResultMessage ; <nl> <nl> @ @ - 172 , 6 + 173 , 47 @ @ public class AggregationTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> + public void testAggregateOnCounters ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a int , b counter , primary key ( a ) ) " ) ; <nl> + <nl> + / / Test with empty table <nl> + assertColumnNames ( execute ( " SELECT count ( b ) , max ( b ) as max , b FROM % s " ) , <nl> + " system . count ( b ) " , " max " , " b " ) ; <nl> + assertRows ( execute ( " SELECT count ( b ) , max ( b ) as max , b FROM % s " ) , <nl> + row ( 0L , null , null ) ) ; <nl> + <nl> + execute ( " UPDATE % s SET b = b + 1 WHERE a = 1 " ) ; <nl> + execute ( " UPDATE % s SET b = b + 1 WHERE a = 1 " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT count ( b ) , max ( b ) as max , min ( b ) as min , avg ( b ) as avg , sum ( b ) as sum FROM % s " ) , <nl> + row ( 1L , 2L , 2L , 2L , 2L ) ) ; <nl> + flush ( ) ; <nl> + assertRows ( execute ( " SELECT count ( b ) , max ( b ) as max , min ( b ) as min , avg ( b ) as avg , sum ( b ) as sum FROM % s " ) , <nl> + row ( 1L , 2L , 2L , 2L , 2L ) ) ; <nl> + <nl> + execute ( " UPDATE % s SET b = b + 2 WHERE a = 1 " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT count ( b ) , max ( b ) as max , min ( b ) as min , avg ( b ) as avg , sum ( b ) as sum FROM % s " ) , <nl> + row ( 1L , 4L , 4L , 4L , 4L ) ) ; <nl> + <nl> + execute ( " UPDATE % s SET b = b - 2 WHERE a = 1 " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT count ( b ) , max ( b ) as max , min ( b ) as min , avg ( b ) as avg , sum ( b ) as sum FROM % s " ) , <nl> + row ( 1L , 2L , 2L , 2L , 2L ) ) ; <nl> + flush ( ) ; <nl> + assertRows ( execute ( " SELECT count ( b ) , max ( b ) as max , min ( b ) as min , avg ( b ) as avg , sum ( b ) as sum FROM % s " ) , <nl> + row ( 1L , 2L , 2L , 2L , 2L ) ) ; <nl> + <nl> + execute ( " UPDATE % s SET b = b + 1 WHERE a = 2 " ) ; <nl> + execute ( " UPDATE % s SET b = b + 1 WHERE a = 2 " ) ; <nl> + execute ( " UPDATE % s SET b = b + 2 WHERE a = 2 " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT count ( b ) , max ( b ) as max , min ( b ) as min , avg ( b ) as avg , sum ( b ) as sum FROM % s " ) , <nl> + row ( 2L , 4L , 2L , 3L , 6L ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testAggregateWithUdtFields ( ) throws Throwable <nl> { <nl> String myType = createType ( " CREATE TYPE % s ( x int ) " ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index fb0b151 . . c0fd4f6 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 5 
 + * Support counter - columns for native aggregates ( sum , avg , max , min ) ( CASSANDRA - 9977 ) 
 * ( cqlsh ) show correct column names for empty result sets ( CASSANDRA - 9813 ) 
 * Add new types to Stress ( CASSANDRA - 9556 ) 
 * Add property to allow listening on broadcast interface ( CASSANDRA - 9748 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java b / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java 
 index 41e43c0 . . 77be525 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import java . util . List ; 
 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . db . marshal . ByteType ; 
 + import org . apache . cassandra . db . marshal . CounterColumnType ; 
 import org . apache . cassandra . db . marshal . DecimalType ; 
 import org . apache . cassandra . db . marshal . DoubleType ; 
 import org . apache . cassandra . db . marshal . FloatType ; 
 @ @ - 480 , 31 + 481 , 7 @ @ public abstract class AggregateFcts 
 { 
 public Aggregate newAggregate ( ) 
 { 
 - return new Aggregate ( ) 
 - { 
 - private long sum ; 
 - 
 - public void reset ( ) 
 - { 
 - sum = 0 ; 
 - } 
 - 
 - public ByteBuffer compute ( int protocolVersion ) 
 - { 
 - return ( ( LongType ) returnType ( ) ) . decompose ( sum ) ; 
 - } 
 - 
 - public void addInput ( int protocolVersion , List < ByteBuffer > values ) 
 - { 
 - ByteBuffer value = values . get ( 0 ) ; 
 - 
 - if ( value = = null ) 
 - return ; 
 - 
 - Number number = ( ( Number ) argTypes ( ) . get ( 0 ) . compose ( value ) ) ; 
 - sum + = number . longValue ( ) ; 
 - } 
 - } ; 
 + return new LongSumAggregate ( ) ; 
 } 
 } ; 
 
 @ @ - 516 , 37 + 493 , 7 @ @ public abstract class AggregateFcts 
 { 
 public Aggregate newAggregate ( ) 
 { 
 - return new Aggregate ( ) 
 - { 
 - private long sum ; 
 - 
 - private int count ; 
 - 
 - public void reset ( ) 
 - { 
 - count = 0 ; 
 - sum = 0 ; 
 - } 
 - 
 - public ByteBuffer compute ( int protocolVersion ) 
 - { 
 - long avg = count = = 0 ? 0 : sum / count ; 
 - 
 - return ( ( LongType ) returnType ( ) ) . decompose ( avg ) ; 
 - } 
 - 
 - public void addInput ( int protocolVersion , List < ByteBuffer > values ) 
 - { 
 - ByteBuffer value = values . get ( 0 ) ; 
 - 
 - if ( value = = null ) 
 - return ; 
 - 
 - count + + ; 
 - Number number = ( ( Number ) argTypes ( ) . get ( 0 ) . compose ( value ) ) ; 
 - sum + = number . longValue ( ) ; 
 - } 
 - } ; 
 + return new LongAvgAggregate ( ) ; 
 } 
 } ; 
 
 @ @ - 707 , 6 + 654 , 30 @ @ public abstract class AggregateFcts 
 } ; 
 
 / * * 
 + * The SUM function for counter column values . 
 + * / 
 + public static final AggregateFunction sumFunctionForCounter = 
 + new NativeAggregateFunction ( " sum " , CounterColumnType . instance , CounterColumnType . instance ) 
 + { 
 + public Aggregate newAggregate ( ) 
 + { 
 + return new LongSumAggregate ( ) ; 
 + } 
 + } ; 
 + 
 + / * * 
 + * AVG function for counter column values . 
 + * / 
 + public static final AggregateFunction avgFunctionForCounter = 
 + new NativeAggregateFunction ( " avg " , CounterColumnType . instance , CounterColumnType . instance ) 
 + { 
 + public Aggregate newAggregate ( ) 
 + { 
 + return new LongAvgAggregate ( ) ; 
 + } 
 + } ; 
 + 
 + / * * 
 * Creates a MAX function for the specified type . 
 * 
 * @ param inputType the function input and output type 
 @ @ - 827 , 4 + 798 , 62 @ @ public abstract class AggregateFcts 
 } 
 } ; 
 } 
 + 
 + private static class LongSumAggregate implements AggregateFunction . Aggregate 
 + { 
 + private long sum ; 
 + 
 + public void reset ( ) 
 + { 
 + sum = 0 ; 
 + } 
 + 
 + public ByteBuffer compute ( int protocolVersion ) 
 + { 
 + return LongType . instance . decompose ( sum ) ; 
 + } 
 + 
 + public void addInput ( int protocolVersion , List < ByteBuffer > values ) 
 + { 
 + ByteBuffer value = values . get ( 0 ) ; 
 + 
 + if ( value = = null ) 
 + return ; 
 + 
 + Number number = LongType . instance . compose ( value ) ; 
 + sum + = number . longValue ( ) ; 
 + } 
 + } 
 + 
 + private static class LongAvgAggregate implements AggregateFunction . Aggregate 
 + { 
 + private long sum ; 
 + 
 + private int count ; 
 + 
 + public void reset ( ) 
 + { 
 + count = 0 ; 
 + sum = 0 ; 
 + } 
 + 
 + public ByteBuffer compute ( int protocolVersion ) 
 + { 
 + long avg = count = = 0 ? 0 : sum / count ; 
 + 
 + return LongType . instance . decompose ( avg ) ; 
 + } 
 + 
 + public void addInput ( int protocolVersion , List < ByteBuffer > values ) 
 + { 
 + ByteBuffer value = values . get ( 0 ) ; 
 + 
 + if ( value = = null ) 
 + return ; 
 + 
 + count + + ; 
 + Number number = LongType . instance . compose ( value ) ; 
 + sum + = number . longValue ( ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / Functions . java b / src / java / org / apache / cassandra / cql3 / functions / Functions . java 
 index e31fc9f . . 0f1af19 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / Functions . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / Functions . java 
 @ @ - 91 , 6 + 91 , 7 @ @ public abstract class Functions 
 declare ( AggregateFcts . sumFunctionForDouble ) ; 
 declare ( AggregateFcts . sumFunctionForDecimal ) ; 
 declare ( AggregateFcts . sumFunctionForVarint ) ; 
 + declare ( AggregateFcts . sumFunctionForCounter ) ; 
 declare ( AggregateFcts . avgFunctionForByte ) ; 
 declare ( AggregateFcts . avgFunctionForShort ) ; 
 declare ( AggregateFcts . avgFunctionForInt32 ) ; 
 @ @ - 99 , 6 + 100 , 7 @ @ public abstract class Functions 
 declare ( AggregateFcts . avgFunctionForDouble ) ; 
 declare ( AggregateFcts . avgFunctionForVarint ) ; 
 declare ( AggregateFcts . avgFunctionForDecimal ) ; 
 + declare ( AggregateFcts . avgFunctionForCounter ) ; 
 
 MigrationManager . instance . register ( new FunctionsMigrationListener ( ) ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java 
 index 0d11a82 . . bcfe871 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java 
 @ @ - 716 , 6 + 716 , 32 @ @ public class UFTest extends CQLTester 
 } 
 
 @ Test 
 + public void testJavaFunctionCounter ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( key int primary key , val counter ) " ) ; 
 + 
 + String fName = createFunction ( KEYSPACE , " counter " , 
 + " CREATE OR REPLACE FUNCTION % s ( val counter ) " + 
 + " CALLED ON NULL INPUT " + 
 + " RETURNS bigint " + 
 + " LANGUAGE JAVA " + 
 + " AS ' return val + 1 ; ' ; " ) ; 
 + 
 + execute ( " UPDATE % s SET val = val + 1 WHERE key = 1 " ) ; 
 + assertRows ( execute ( " SELECT key , val , " + fName + " ( val ) FROM % s " ) , 
 + row ( 1 , 1L , 2L ) ) ; 
 + execute ( " UPDATE % s SET val = val + 1 WHERE key = 1 " ) ; 
 + assertRows ( execute ( " SELECT key , val , " + fName + " ( val ) FROM % s " ) , 
 + row ( 1 , 2L , 3L ) ) ; 
 + execute ( " UPDATE % s SET val = val + 2 WHERE key = 1 " ) ; 
 + assertRows ( execute ( " SELECT key , val , " + fName + " ( val ) FROM % s " ) , 
 + row ( 1 , 4L , 5L ) ) ; 
 + execute ( " UPDATE % s SET val = val - 2 WHERE key = 1 " ) ; 
 + assertRows ( execute ( " SELECT key , val , " + fName + " ( val ) FROM % s " ) , 
 + row ( 1 , 2L , 3L ) ) ; 
 + } 
 + 
 + @ Test 
 public void testFunctionInTargetKeyspace ( ) throws Throwable 
 { 
 createTable ( " CREATE TABLE % s ( key int primary key , val double ) " ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 index e661b4f . . 0e0313c 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 @ @ - 37 , 6 + 37 , 7 @ @ import org . apache . cassandra . db . SystemKeyspace ; 
 import org . apache . cassandra . exceptions . FunctionExecutionException ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 import org . apache . cassandra . service . ClientState ; 
 + import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . transport . Event ; 
 import org . apache . cassandra . transport . messages . ResultMessage ; 
 
 @ @ - 172 , 6 + 173 , 47 @ @ public class AggregationTest extends CQLTester 
 } 
 
 @ Test 
 + public void testAggregateOnCounters ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a int , b counter , primary key ( a ) ) " ) ; 
 + 
 + / / Test with empty table 
 + assertColumnNames ( execute ( " SELECT count ( b ) , max ( b ) as max , b FROM % s " ) , 
 + " system . count ( b ) " , " max " , " b " ) ; 
 + assertRows ( execute ( " SELECT count ( b ) , max ( b ) as max , b FROM % s " ) , 
 + row ( 0L , null , null ) ) ; 
 + 
 + execute ( " UPDATE % s SET b = b + 1 WHERE a = 1 " ) ; 
 + execute ( " UPDATE % s SET b = b + 1 WHERE a = 1 " ) ; 
 + 
 + assertRows ( execute ( " SELECT count ( b ) , max ( b ) as max , min ( b ) as min , avg ( b ) as avg , sum ( b ) as sum FROM % s " ) , 
 + row ( 1L , 2L , 2L , 2L , 2L ) ) ; 
 + flush ( ) ; 
 + assertRows ( execute ( " SELECT count ( b ) , max ( b ) as max , min ( b ) as min , avg ( b ) as avg , sum ( b ) as sum FROM % s " ) , 
 + row ( 1L , 2L , 2L , 2L , 2L ) ) ; 
 + 
 + execute ( " UPDATE % s SET b = b + 2 WHERE a = 1 " ) ; 
 + 
 + assertRows ( execute ( " SELECT count ( b ) , max ( b ) as max , min ( b ) as min , avg ( b ) as avg , sum ( b ) as sum FROM % s " ) , 
 + row ( 1L , 4L , 4L , 4L , 4L ) ) ; 
 + 
 + execute ( " UPDATE % s SET b = b - 2 WHERE a = 1 " ) ; 
 + 
 + assertRows ( execute ( " SELECT count ( b ) , max ( b ) as max , min ( b ) as min , avg ( b ) as avg , sum ( b ) as sum FROM % s " ) , 
 + row ( 1L , 2L , 2L , 2L , 2L ) ) ; 
 + flush ( ) ; 
 + assertRows ( execute ( " SELECT count ( b ) , max ( b ) as max , min ( b ) as min , avg ( b ) as avg , sum ( b ) as sum FROM % s " ) , 
 + row ( 1L , 2L , 2L , 2L , 2L ) ) ; 
 + 
 + execute ( " UPDATE % s SET b = b + 1 WHERE a = 2 " ) ; 
 + execute ( " UPDATE % s SET b = b + 1 WHERE a = 2 " ) ; 
 + execute ( " UPDATE % s SET b = b + 2 WHERE a = 2 " ) ; 
 + 
 + assertRows ( execute ( " SELECT count ( b ) , max ( b ) as max , min ( b ) as min , avg ( b ) as avg , sum ( b ) as sum FROM % s " ) , 
 + row ( 2L , 4L , 2L , 3L , 6L ) ) ; 
 + } 
 + 
 + @ Test 
 public void testAggregateWithUdtFields ( ) throws Throwable 
 { 
 String myType = createType ( " CREATE TYPE % s ( x int ) " ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
