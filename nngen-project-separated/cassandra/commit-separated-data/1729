BLEU SCORE: 1.0

TEST MSG: Do not load read meters for offline operations
GENERATED MSG: Do not load read meters for offline operations

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5cd914a . . c978d53 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 5 <nl> + * Do not load read meter for offline operations ( CASSANDRA - 9082 ) <nl> * cqlsh : Make CompositeType data readable ( CASSANDRA - 8919 ) <nl> * cqlsh : Fix display of triggers ( CASSANDRA - 9081 ) <nl> * Fix NullPointerException when deleting or setting an element by index on <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index 8fd7b85 . . c73d4a1 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 378 , 6 + 378 , 7 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead <nl> return open ( descriptor , components , metadata , partitioner , true ) ; <nl> } <nl> <nl> + / / use only for offline or " Standalone " operations <nl> public static SSTableReader openNoValidation ( Descriptor descriptor , Set < Component > components , CFMetaData metadata ) throws IOException <nl> { <nl> return open ( descriptor , components , metadata , StorageService . getPartitioner ( ) , false ) ; <nl> @ @ - 434 , 7 + 435 , 7 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead <nl> sstable . ifile = ibuilder . complete ( sstable . descriptor . filenameFor ( Component . PRIMARY _ INDEX ) ) ; <nl> sstable . dfile = dbuilder . complete ( sstable . descriptor . filenameFor ( Component . DATA ) ) ; <nl> sstable . bf = FilterFactory . AlwaysPresent ; <nl> - sstable . setup ( ) ; <nl> + sstable . setup ( true ) ; <nl> return sstable ; <nl> } <nl> <nl> @ @ - 478 , 7 + 479 , 7 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead <nl> sstable . load ( validationMetadata ) ; <nl> logger . debug ( " INDEX LOAD TIME for { } : { } ms . " , descriptor , TimeUnit . NANOSECONDS . toMillis ( System . nanoTime ( ) - start ) ) ; <nl> <nl> - sstable . setup ( ) ; <nl> + sstable . setup ( ! validate ) ; <nl> if ( validate ) <nl> sstable . validate ( ) ; <nl> <nl> @ @ - 599 , 7 + 600 , 7 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead <nl> this . dfile = dfile ; <nl> this . indexSummary = indexSummary ; <nl> this . bf = bloomFilter ; <nl> - this . setup ( ) ; <nl> + this . setup ( false ) ; <nl> } <nl> <nl> public static long getTotalBytes ( Iterable < SSTableReader > sstables ) <nl> @ @ - 2010 , 9 + 2011 , 9 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead <nl> return selfRef . ref ( ) ; <nl> } <nl> <nl> - void setup ( ) <nl> + void setup ( boolean isOffline ) <nl> { <nl> - tidy . setup ( this ) ; <nl> + tidy . setup ( this , isOffline ) ; <nl> this . readMeter = tidy . global . readMeter ; <nl> } <nl> <nl> @ @ - 2059 , 7 + 2060 , 7 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead <nl> <nl> private boolean setup ; <nl> <nl> - void setup ( SSTableReader reader ) <nl> + void setup ( SSTableReader reader , boolean isOffline ) <nl> { <nl> this . setup = true ; <nl> this . bf = reader . bf ; <nl> @ @ - 2070 , 6 + 2071 , 8 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead <nl> this . typeRef = DescriptorTypeTidy . get ( reader ) ; <nl> this . type = typeRef . get ( ) ; <nl> this . global = type . globalRef . get ( ) ; <nl> + if ( ! isOffline ) <nl> + global . ensureReadMeter ( ) ; <nl> } <nl> <nl> InstanceTidier ( Descriptor descriptor , CFMetaData metadata ) <nl> @ @ - 2212 , 7 + 2215 , 7 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead <nl> private RestorableMeter readMeter ; <nl> / / the scheduled persistence of the readMeter , that we will cancel once all instances of this logical <nl> / / sstable have been released <nl> - private final ScheduledFuture readMeterSyncFuture ; <nl> + private ScheduledFuture readMeterSyncFuture ; <nl> / / shared state managing if the logical sstable has been compacted ; this is used in cleanup both here <nl> / / and in the FINAL type tidier <nl> private final AtomicBoolean isCompacted ; <nl> @ @ - 2222 , 6 + 2225 , 13 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead <nl> this . desc = reader . descriptor ; <nl> this . isCompacted = new AtomicBoolean ( ) ; <nl> this . live = reader ; <nl> + } <nl> + <nl> + void ensureReadMeter ( ) <nl> + { <nl> + if ( readMeter ! = null ) <nl> + return ; <nl> + <nl> / / Don ' t track read rates for tables in the system keyspace and don ' t bother trying to load or persist <nl> / / the read meter when in client mode . <nl> if ( Keyspace . SYSTEM _ KS . equals ( desc . ksname ) | | Config . isClientMode ( ) )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5cd914a . . c978d53 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 5 
 + * Do not load read meter for offline operations ( CASSANDRA - 9082 ) 
 * cqlsh : Make CompositeType data readable ( CASSANDRA - 8919 ) 
 * cqlsh : Fix display of triggers ( CASSANDRA - 9081 ) 
 * Fix NullPointerException when deleting or setting an element by index on 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index 8fd7b85 . . c73d4a1 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 378 , 6 + 378 , 7 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead 
 return open ( descriptor , components , metadata , partitioner , true ) ; 
 } 
 
 + / / use only for offline or " Standalone " operations 
 public static SSTableReader openNoValidation ( Descriptor descriptor , Set < Component > components , CFMetaData metadata ) throws IOException 
 { 
 return open ( descriptor , components , metadata , StorageService . getPartitioner ( ) , false ) ; 
 @ @ - 434 , 7 + 435 , 7 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead 
 sstable . ifile = ibuilder . complete ( sstable . descriptor . filenameFor ( Component . PRIMARY _ INDEX ) ) ; 
 sstable . dfile = dbuilder . complete ( sstable . descriptor . filenameFor ( Component . DATA ) ) ; 
 sstable . bf = FilterFactory . AlwaysPresent ; 
 - sstable . setup ( ) ; 
 + sstable . setup ( true ) ; 
 return sstable ; 
 } 
 
 @ @ - 478 , 7 + 479 , 7 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead 
 sstable . load ( validationMetadata ) ; 
 logger . debug ( " INDEX LOAD TIME for { } : { } ms . " , descriptor , TimeUnit . NANOSECONDS . toMillis ( System . nanoTime ( ) - start ) ) ; 
 
 - sstable . setup ( ) ; 
 + sstable . setup ( ! validate ) ; 
 if ( validate ) 
 sstable . validate ( ) ; 
 
 @ @ - 599 , 7 + 600 , 7 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead 
 this . dfile = dfile ; 
 this . indexSummary = indexSummary ; 
 this . bf = bloomFilter ; 
 - this . setup ( ) ; 
 + this . setup ( false ) ; 
 } 
 
 public static long getTotalBytes ( Iterable < SSTableReader > sstables ) 
 @ @ - 2010 , 9 + 2011 , 9 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead 
 return selfRef . ref ( ) ; 
 } 
 
 - void setup ( ) 
 + void setup ( boolean isOffline ) 
 { 
 - tidy . setup ( this ) ; 
 + tidy . setup ( this , isOffline ) ; 
 this . readMeter = tidy . global . readMeter ; 
 } 
 
 @ @ - 2059 , 7 + 2060 , 7 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead 
 
 private boolean setup ; 
 
 - void setup ( SSTableReader reader ) 
 + void setup ( SSTableReader reader , boolean isOffline ) 
 { 
 this . setup = true ; 
 this . bf = reader . bf ; 
 @ @ - 2070 , 6 + 2071 , 8 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead 
 this . typeRef = DescriptorTypeTidy . get ( reader ) ; 
 this . type = typeRef . get ( ) ; 
 this . global = type . globalRef . get ( ) ; 
 + if ( ! isOffline ) 
 + global . ensureReadMeter ( ) ; 
 } 
 
 InstanceTidier ( Descriptor descriptor , CFMetaData metadata ) 
 @ @ - 2212 , 7 + 2215 , 7 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead 
 private RestorableMeter readMeter ; 
 / / the scheduled persistence of the readMeter , that we will cancel once all instances of this logical 
 / / sstable have been released 
 - private final ScheduledFuture readMeterSyncFuture ; 
 + private ScheduledFuture readMeterSyncFuture ; 
 / / shared state managing if the logical sstable has been compacted ; this is used in cleanup both here 
 / / and in the FINAL type tidier 
 private final AtomicBoolean isCompacted ; 
 @ @ - 2222 , 6 + 2225 , 13 @ @ public class SSTableReader extends SSTable implements SelfRefCounted < SSTableRead 
 this . desc = reader . descriptor ; 
 this . isCompacted = new AtomicBoolean ( ) ; 
 this . live = reader ; 
 + } 
 + 
 + void ensureReadMeter ( ) 
 + { 
 + if ( readMeter ! = null ) 
 + return ; 
 + 
 / / Don ' t track read rates for tables in the system keyspace and don ' t bother trying to load or persist 
 / / the read meter when in client mode . 
 if ( Keyspace . SYSTEM _ KS . equals ( desc . ksname ) | | Config . isClientMode ( ) )

NEAREST DIFF:
ELIMINATEDSENTENCE
