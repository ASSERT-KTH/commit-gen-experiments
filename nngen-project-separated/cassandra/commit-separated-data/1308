BLEU SCORE: 0.016932492841722675

TEST MSG: Ninja - fix ambigious ( and wrong , but harmless ) increment
GENERATED MSG: replace assert + cast w / checkedCast

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / RowIndexEntry . java b / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> index 7f361d9 . . 6cd6542 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> + + + b / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> @ @ - 150 , 7 + 150 , 8 @ @ public class RowIndexEntry < T > implements IMeasurableMemory <nl> int i = 0 ; <nl> for ( IndexHelper . IndexInfo info : rie . columnsIndex ( ) ) <nl> { <nl> - offsets [ i + + ] = i = = 0 ? 0 : ( int ) ( out . getFilePointer ( ) - start ) ; <nl> + offsets [ i ] = i = = 0 ? 0 : ( int ) ( out . getFilePointer ( ) - start ) ; <nl> + i + + ; <nl> idxSerializer . serialize ( info , out ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> index 46a3216 . . 665f0b0 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> @ @ - 266 , 7 + 266 , 7 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> public TraceSessionWrapper ( Callable < T > callable ) <nl> { <nl> super ( callable ) ; <nl> - state = Tracing . instance ( ) . get ( ) ; <nl> + state = Tracing . instance . get ( ) ; <nl> } <nl> <nl> public TraceSessionWrapper ( Runnable command , TraceState state ) <nl> @ @ - 277 , 12 + 277 , 12 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> <nl> private void setupContext ( ) <nl> { <nl> - Tracing . instance ( ) . set ( state ) ; <nl> + Tracing . instance . set ( state ) ; <nl> } <nl> <nl> private void reset ( ) <nl> { <nl> - Tracing . instance ( ) . set ( null ) ; <nl> + Tracing . instance . set ( null ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / net / MessageOut . java b / src / java / org / apache / cassandra / net / MessageOut . java <nl> index e10fcee . . dd6cae8 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessageOut . java <nl> + + + b / src / java / org / apache / cassandra / net / MessageOut . java <nl> @ @ - 57 , 7 + 57 , 7 @ @ public class MessageOut < T > <nl> this ( verb , <nl> payload , <nl> serializer , <nl> - isTracing ( ) ? ImmutableMap . of ( TRACE _ HEADER , UUIDGen . decompose ( Tracing . instance ( ) . getSessionId ( ) ) ) <nl> + isTracing ( ) ? ImmutableMap . of ( TRACE _ HEADER , UUIDGen . decompose ( Tracing . instance . getSessionId ( ) ) ) <nl> : Collections . < String , byte [ ] > emptyMap ( ) ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index e01183c . . 43e2cb2 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 680 , 7 + 680 , 7 @ @ public final class MessagingService implements MessagingServiceMBean <nl> <nl> public void receive ( MessageIn message , int id , long timestamp ) <nl> { <nl> - TraceState state = Tracing . instance ( ) . initializeFromMessage ( message ) ; <nl> + TraceState state = Tracing . instance . initializeFromMessage ( message ) ; <nl> if ( state ! = null ) <nl> state . trace ( " Message received from { } " , message . from ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> index ba13644 . . 4c6f498 100644 <nl> - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> @ @ - 181 , 7 + 181 , 7 @ @ public class OutboundTcpConnection extends Thread <nl> if ( sessionBytes ! = null ) <nl> { <nl> UUID sessionId = UUIDGen . getUUID ( ByteBuffer . wrap ( sessionBytes ) ) ; <nl> - TraceState state = Tracing . instance ( ) . get ( sessionId ) ; <nl> + TraceState state = Tracing . instance . get ( sessionId ) ; <nl> String message = String . format ( " Sending message to % s " , poolReference . endPoint ( ) ) ; <nl> / / session may have already finished ; see CASSANDRA - 5668 <nl> if ( state = = null ) <nl> @ @ - 192 , 7 + 192 , 7 @ @ public class OutboundTcpConnection extends Thread <nl> { <nl> state . trace ( message ) ; <nl> if ( qm . message . verb = = MessagingService . Verb . REQUEST _ RESPONSE ) <nl> - Tracing . instance ( ) . stopNonLocal ( state ) ; <nl> + Tracing . instance . stopNonLocal ( state ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / QueryState . java b / src / java / org / apache / cassandra / service / QueryState . java <nl> index 49feb3b . . 6483d9b 100644 <nl> - - - a / src / java / org / apache / cassandra / service / QueryState . java <nl> + + + b / src / java / org / apache / cassandra / service / QueryState . java <nl> @ @ - 72 , 13 + 72 , 13 @ @ public class QueryState <nl> { <nl> if ( this . preparedTracingSession = = null ) <nl> { <nl> - Tracing . instance ( ) . newSession ( ) ; <nl> + Tracing . instance . newSession ( ) ; <nl> } <nl> else <nl> { <nl> UUID session = this . preparedTracingSession ; <nl> this . preparedTracingSession = null ; <nl> - Tracing . instance ( ) . newSession ( session ) ; <nl> + Tracing . instance . newSession ( session ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 5e30207 . . accc2c5 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 878 , 7 + 878 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> / / Dont set any state for the node which is bootstrapping the existing token . . . <nl> tokenMetadata . updateNormalTokens ( tokens , FBUtilities . getBroadcastAddress ( ) ) ; <nl> } <nl> - Tracing . instance ( ) ; <nl> setMode ( Mode . JOINING , " Starting to bootstrap . . . " , true ) ; <nl> new BootStrapper ( FBUtilities . getBroadcastAddress ( ) , tokens , tokenMetadata ) . bootstrap ( ) ; / / handles token update <nl> logger . info ( " Bootstrap completed ! for the tokens { } " , tokens ) ; <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> index 4e71a84 . . 55688a8 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> @ @ - 297 , 7 + 297 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> " column _ parent " , column _ parent . toString ( ) , <nl> " predicate " , predicate . toString ( ) , <nl> " consistency _ level " , consistency _ level . name ( ) ) ; <nl> - Tracing . instance ( ) . begin ( " get _ slice " , traceParameters ) ; <nl> + Tracing . instance . begin ( " get _ slice " , traceParameters ) ; <nl> } <nl> else <nl> { <nl> @ @ - 317 , 7 + 317 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 344 , 7 + 344 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> " column _ parent " , column _ parent . toString ( ) , <nl> " predicate " , predicate . toString ( ) , <nl> " consistency _ level " , consistency _ level . name ( ) ) ; <nl> - Tracing . instance ( ) . begin ( " multiget _ slice " , traceParameters ) ; <nl> + Tracing . instance . begin ( " multiget _ slice " , traceParameters ) ; <nl> } <nl> else <nl> { <nl> @ @ - 364 , 7 + 364 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 428 , 7 + 428 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> Map < String , String > traceParameters = ImmutableMap . of ( " key " , ByteBufferUtil . bytesToHex ( key ) , <nl> " column _ path " , column _ path . toString ( ) , <nl> " consistency _ level " , consistency _ level . name ( ) ) ; <nl> - Tracing . instance ( ) . begin ( " get " , traceParameters ) ; <nl> + Tracing . instance . begin ( " get " , traceParameters ) ; <nl> } <nl> else <nl> { <nl> @ @ - 484 , 7 + 484 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 497 , 7 + 497 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> " column _ parent " , column _ parent . toString ( ) , <nl> " predicate " , predicate . toString ( ) , <nl> " consistency _ level " , consistency _ level . name ( ) ) ; <nl> - Tracing . instance ( ) . begin ( " get _ count " , traceParameters ) ; <nl> + Tracing . instance . begin ( " get _ count " , traceParameters ) ; <nl> } <nl> else <nl> { <nl> @ @ - 577 , 7 + 577 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 602 , 7 + 602 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> " column _ parent " , column _ parent . toString ( ) , <nl> " predicate " , predicate . toString ( ) , <nl> " consistency _ level " , consistency _ level . name ( ) ) ; <nl> - Tracing . instance ( ) . begin ( " multiget _ count " , traceParameters ) ; <nl> + Tracing . instance . begin ( " multiget _ count " , traceParameters ) ; <nl> } <nl> else <nl> { <nl> @ @ - 633 , 7 + 633 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 682 , 7 + 682 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> " column _ parent " , column _ parent . toString ( ) , <nl> " column " , column . toString ( ) , <nl> " consistency _ level " , consistency _ level . name ( ) ) ; <nl> - Tracing . instance ( ) . begin ( " insert " , traceParameters ) ; <nl> + Tracing . instance . begin ( " insert " , traceParameters ) ; <nl> } <nl> else <nl> { <nl> @ @ - 699 , 7 + 699 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 712 , 7 + 712 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> " column _ family " , column _ family , <nl> " old " , expected . toString ( ) , <nl> " updates " , updates . toString ( ) ) ; <nl> - Tracing . instance ( ) . begin ( " cas " , traceParameters ) ; <nl> + Tracing . instance . begin ( " cas " , traceParameters ) ; <nl> } <nl> else <nl> { <nl> @ @ - 779 , 7 + 779 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 914 , 7 + 914 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> Joiner . on ( " ; " ) . withKeyValueSeparator ( " : " ) . join ( mutationEntry . getValue ( ) ) ) ; <nl> } <nl> traceParameters . put ( " consistency _ level " , consistency _ level . name ( ) ) ; <nl> - Tracing . instance ( ) . begin ( " batch _ mutate " , traceParameters ) ; <nl> + Tracing . instance . begin ( " batch _ mutate " , traceParameters ) ; <nl> } <nl> else <nl> { <nl> @ @ - 931 , 7 + 931 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 947 , 7 + 947 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> Joiner . on ( " ; " ) . withKeyValueSeparator ( " : " ) . join ( mutationEntry . getValue ( ) ) ) ; <nl> } <nl> traceParameters . put ( " consistency _ level " , consistency _ level . name ( ) ) ; <nl> - Tracing . instance ( ) . begin ( " atomic _ batch _ mutate " , traceParameters ) ; <nl> + Tracing . instance . begin ( " atomic _ batch _ mutate " , traceParameters ) ; <nl> } <nl> else <nl> { <nl> @ @ - 964 , 7 + 964 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 1006 , 7 + 1006 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> " column _ path " , column _ path . toString ( ) , <nl> " timestamp " , timestamp + " " , <nl> " consistency _ level " , consistency _ level . name ( ) ) ; <nl> - Tracing . instance ( ) . begin ( " remove " , traceParameters ) ; <nl> + Tracing . instance . begin ( " remove " , traceParameters ) ; <nl> } <nl> else <nl> { <nl> @ @ - 1023 , 7 + 1023 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 1089 , 7 + 1089 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> " predicate " , predicate . toString ( ) , <nl> " range " , range . toString ( ) , <nl> " consistency _ level " , consistency _ level . name ( ) ) ; <nl> - Tracing . instance ( ) . begin ( " get _ range _ slices " , traceParameters ) ; <nl> + Tracing . instance . begin ( " get _ range _ slices " , traceParameters ) ; <nl> } <nl> else <nl> { <nl> @ @ - 1165 , 7 + 1165 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 1178 , 7 + 1178 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> " range " , range . toString ( ) , <nl> " start _ column " , ByteBufferUtil . bytesToHex ( start _ column ) , <nl> " consistency _ level " , consistency _ level . name ( ) ) ; <nl> - Tracing . instance ( ) . begin ( " get _ paged _ slice " , traceParameters ) ; <nl> + Tracing . instance . begin ( " get _ paged _ slice " , traceParameters ) ; <nl> } <nl> else <nl> { <nl> @ @ - 1258 , 7 + 1258 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 1284 , 7 + 1284 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> " index _ clause " , index _ clause . toString ( ) , <nl> " slice _ predicate " , column _ predicate . toString ( ) , <nl> " consistency _ level " , consistency _ level . name ( ) ) ; <nl> - Tracing . instance ( ) . begin ( " get _ indexed _ slices " , traceParameters ) ; <nl> + Tracing . instance . begin ( " get _ indexed _ slices " , traceParameters ) ; <nl> } <nl> else <nl> { <nl> @ @ - 1335 , 7 + 1335 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 1632 , 7 + 1632 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> <nl> if ( startSessionIfRequested ( ) ) <nl> { <nl> - Tracing . instance ( ) . begin ( " truncate " , ImmutableMap . of ( " cf " , cfname , " ks " , keyspace ) ) ; <nl> + Tracing . instance . begin ( " truncate " , ImmutableMap . of ( " cf " , cfname , " ks " , keyspace ) ) ; <nl> } <nl> else <nl> { <nl> @ @ - 1668 , 7 + 1668 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 1700 , 7 + 1700 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> Map < String , String > traceParameters = ImmutableMap . of ( " column _ parent " , column _ parent . toString ( ) , <nl> " column " , column . toString ( ) , <nl> " consistency _ level " , consistency _ level . name ( ) ) ; <nl> - Tracing . instance ( ) . begin ( " add " , traceParameters ) ; <nl> + Tracing . instance . begin ( " add " , traceParameters ) ; <nl> } <nl> else <nl> { <nl> @ @ - 1744 , 7 + 1744 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 1756 , 7 + 1756 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> Map < String , String > traceParameters = ImmutableMap . of ( " key " , ByteBufferUtil . bytesToHex ( key ) , <nl> " column _ path " , path . toString ( ) , <nl> " consistency _ level " , consistency _ level . name ( ) ) ; <nl> - Tracing . instance ( ) . begin ( " remove _ counter " , traceParameters ) ; <nl> + Tracing . instance . begin ( " remove _ counter " , traceParameters ) ; <nl> } <nl> else <nl> { <nl> @ @ - 1773 , 7 + 1773 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 1866 , 8 + 1866 , 8 @ @ public class CassandraServer implements Cassandra . Iface <nl> String queryString = uncompress ( query , compression ) ; <nl> if ( startSessionIfRequested ( ) ) <nl> { <nl> - Tracing . instance ( ) . begin ( " execute _ cql _ query " , <nl> - ImmutableMap . of ( " query " , queryString ) ) ; <nl> + Tracing . instance . begin ( " execute _ cql _ query " , <nl> + ImmutableMap . of ( " query " , queryString ) ) ; <nl> } <nl> else <nl> { <nl> @ @ - 1887 , 7 + 1887 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 1900 , 8 + 1900 , 8 @ @ public class CassandraServer implements Cassandra . Iface <nl> String queryString = uncompress ( query , compression ) ; <nl> if ( startSessionIfRequested ( ) ) <nl> { <nl> - Tracing . instance ( ) . begin ( " execute _ cql3 _ query " , <nl> - ImmutableMap . of ( " query " , queryString ) ) ; <nl> + Tracing . instance . begin ( " execute _ cql3 _ query " , <nl> + ImmutableMap . of ( " query " , queryString ) ) ; <nl> } <nl> else <nl> { <nl> @ @ - 1922 , 7 + 1922 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 1974 , 7 + 1974 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> if ( startSessionIfRequested ( ) ) <nl> { <nl> / / TODO we don ' t have [ typed ] access to CQL bind variables here . CASSANDRA - 4560 is open to add support . <nl> - Tracing . instance ( ) . begin ( " execute _ prepared _ cql _ query " , Collections . < String , String > emptyMap ( ) ) ; <nl> + Tracing . instance . begin ( " execute _ prepared _ cql _ query " , Collections . < String , String > emptyMap ( ) ) ; <nl> } <nl> else <nl> { <nl> @ @ - 2003 , 7 + 2003 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 2015 , 7 + 2015 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> if ( startSessionIfRequested ( ) ) <nl> { <nl> / / TODO we don ' t have [ typed ] access to CQL bind variables here . CASSANDRA - 4560 is open to add support . <nl> - Tracing . instance ( ) . begin ( " execute _ prepared _ cql3 _ query " , Collections . < String , String > emptyMap ( ) ) ; <nl> + Tracing . instance . begin ( " execute _ prepared _ cql3 _ query " , Collections . < String , String > emptyMap ( ) ) ; <nl> } <nl> else <nl> { <nl> @ @ - 2047 , 7 + 2047 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / tracing / Tracing . java b / src / java / org / apache / cassandra / tracing / Tracing . java <nl> index b67e06b . . 815c550 100644 <nl> - - - a / src / java / org / apache / cassandra / tracing / Tracing . java <nl> + + + b / src / java / org / apache / cassandra / tracing / Tracing . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . util . Arrays ; <nl> import java . util . Map ; <nl> import java . util . UUID ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> + import java . util . concurrent . ConcurrentMap ; <nl> <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 58 , 23 + 59 , 15 @ @ public class Tracing <nl> <nl> private static final int TTL = 24 * 3600 ; <nl> <nl> - private static Tracing instance = new Tracing ( ) ; <nl> + private static final Logger logger = LoggerFactory . getLogger ( Tracing . class ) ; <nl> <nl> - public static final Logger logger = LoggerFactory . getLogger ( Tracing . class ) ; <nl> - <nl> - / * * <nl> - * Fetches and lazy initializes the trace context . <nl> - * / <nl> - public static Tracing instance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> - private InetAddress localAddress = FBUtilities . getLocalAddress ( ) ; <nl> + private final InetAddress localAddress = FBUtilities . getLocalAddress ( ) ; <nl> <nl> private final ThreadLocal < TraceState > state = new ThreadLocal < TraceState > ( ) ; <nl> <nl> - private final Map < UUID , TraceState > sessions = new ConcurrentHashMap < UUID , TraceState > ( ) ; <nl> + private final ConcurrentMap < UUID , TraceState > sessions = new ConcurrentHashMap < UUID , TraceState > ( ) ; <nl> + <nl> + public static final Tracing instance = new Tracing ( ) ; <nl> <nl> public static void addColumn ( ColumnFamily cf , ByteBuffer name , InetAddress address ) <nl> { <nl> @ @ - 129 , 7 + 122 , 7 @ @ public class Tracing <nl> * / <nl> public static boolean isTracing ( ) <nl> { <nl> - return instance ! = null & & instance . state . get ( ) ! = null ; <nl> + return instance . state . get ( ) ! = null ; <nl> } <nl> <nl> public UUID newSession ( ) <nl> @ @ - 256 , 10 + 249 , 7 @ @ public class Tracing <nl> <nl> public static void trace ( String message ) <nl> { <nl> - if ( Tracing . instance ( ) = = null ) / / instance might not be built at the time this is called <nl> - return ; <nl> - <nl> - final TraceState state = Tracing . instance ( ) . get ( ) ; <nl> + final TraceState state = instance . get ( ) ; <nl> if ( state = = null ) / / inline isTracing to avoid implicit two calls to state . get ( ) <nl> return ; <nl> <nl> @ @ - 268 , 10 + 258 , 7 @ @ public class Tracing <nl> <nl> public static void trace ( String format , Object arg ) <nl> { <nl> - if ( Tracing . instance ( ) = = null ) / / instance might not be built at the time this is called <nl> - return ; <nl> - <nl> - final TraceState state = Tracing . instance ( ) . get ( ) ; <nl> + final TraceState state = instance . get ( ) ; <nl> if ( state = = null ) / / inline isTracing to avoid implicit two calls to state . get ( ) <nl> return ; <nl> <nl> @ @ - 280 , 10 + 267 , 7 @ @ public class Tracing <nl> <nl> public static void trace ( String format , Object arg1 , Object arg2 ) <nl> { <nl> - if ( Tracing . instance ( ) = = null ) / / instance might not be built at the time this is called <nl> - return ; <nl> - <nl> - final TraceState state = Tracing . instance ( ) . get ( ) ; <nl> + final TraceState state = instance . get ( ) ; <nl> if ( state = = null ) / / inline isTracing to avoid implicit two calls to state . get ( ) <nl> return ; <nl> <nl> @ @ - 292 , 10 + 276 , 7 @ @ public class Tracing <nl> <nl> public static void trace ( String format , Object [ ] args ) <nl> { <nl> - if ( Tracing . instance ( ) = = null ) / / instance might not be built at the time this is called <nl> - return ; <nl> - <nl> - final TraceState state = Tracing . instance ( ) . get ( ) ; <nl> + final TraceState state = instance . get ( ) ; <nl> if ( state = = null ) / / inline isTracing to avoid implicit two calls to state . get ( ) <nl> return ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / transport / messages / BatchMessage . java b / src / java / org / apache / cassandra / transport / messages / BatchMessage . java <nl> index ed8aaaf . . 299d8b8 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / messages / BatchMessage . java <nl> + + + b / src / java / org / apache / cassandra / transport / messages / BatchMessage . java <nl> @ @ - 178 , 7 + 178 , 7 @ @ public class BatchMessage extends Message . Request <nl> { <nl> state . createTracingSession ( ) ; <nl> / / TODO we don ' t have [ typed ] access to CQL bind variables here . CASSANDRA - 4560 is open to add support . <nl> - Tracing . instance ( ) . begin ( " Execute batch of CQL3 queries " , Collections . < String , String > emptyMap ( ) ) ; <nl> + Tracing . instance . begin ( " Execute batch of CQL3 queries " , Collections . < String , String > emptyMap ( ) ) ; <nl> } <nl> <nl> List < ModificationStatement > statements = new ArrayList < ModificationStatement > ( queryOrIdList . size ( ) ) ; <nl> @ @ - 235 , 7 + 235 , 7 @ @ public class BatchMessage extends Message . Request <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java b / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java <nl> index 62fa10a . . 8e2b761 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java <nl> + + + b / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java <nl> @ @ - 115 , 7 + 115 , 7 @ @ public class ExecuteMessage extends Message . Request <nl> { <nl> state . createTracingSession ( ) ; <nl> / / TODO we don ' t have [ typed ] access to CQL bind variables here . CASSANDRA - 4560 is open to add support . <nl> - Tracing . instance ( ) . begin ( " Execute CQL3 prepared query " , Collections . < String , String > emptyMap ( ) ) ; <nl> + Tracing . instance . begin ( " Execute CQL3 prepared query " , Collections . < String , String > emptyMap ( ) ) ; <nl> } <nl> <nl> Message . Response response = QueryProcessor . processPrepared ( statement , consistency , state , values ) ; <nl> @ @ - 131 , 7 + 131 , 7 @ @ public class ExecuteMessage extends Message . Request <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / transport / messages / PrepareMessage . java b / src / java / org / apache / cassandra / transport / messages / PrepareMessage . java <nl> index 13f6321 . . 3e7fe51 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / messages / PrepareMessage . java <nl> + + + b / src / java / org / apache / cassandra / transport / messages / PrepareMessage . java <nl> @ @ - 71 , 7 + 71 , 7 @ @ public class PrepareMessage extends Message . Request <nl> if ( state . traceNextQuery ( ) ) <nl> { <nl> state . createTracingSession ( ) ; <nl> - Tracing . instance ( ) . begin ( " Preparing CQL3 query " , ImmutableMap . of ( " query " , query ) ) ; <nl> + Tracing . instance . begin ( " Preparing CQL3 query " , ImmutableMap . of ( " query " , query ) ) ; <nl> } <nl> <nl> Message . Response response = QueryProcessor . prepare ( query , state . getClientState ( ) , false ) ; <nl> @ @ - 87 , 7 + 87 , 7 @ @ public class PrepareMessage extends Message . Request <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / transport / messages / QueryMessage . java b / src / java / org / apache / cassandra / transport / messages / QueryMessage . java <nl> index 9735654 . . e334b02 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / messages / QueryMessage . java <nl> + + + b / src / java / org / apache / cassandra / transport / messages / QueryMessage . java <nl> @ @ - 117 , 7 + 117 , 7 @ @ public class QueryMessage extends Message . Request <nl> if ( state . traceNextQuery ( ) ) <nl> { <nl> state . createTracingSession ( ) ; <nl> - Tracing . instance ( ) . begin ( " Execute CQL3 query " , ImmutableMap . of ( " query " , query ) ) ; <nl> + Tracing . instance . begin ( " Execute CQL3 query " , ImmutableMap . of ( " query " , query ) ) ; <nl> } <nl> <nl> Message . Response response = QueryProcessor . process ( query , values , consistency , state ) ; <nl> @ @ - 135 , 7 + 135 , 7 @ @ public class QueryMessage extends Message . Request <nl> } <nl> finally <nl> { <nl> - Tracing . instance ( ) . stopSession ( ) ; <nl> + Tracing . instance . stopSession ( ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / RowIndexEntry . java b / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 index 7f361d9 . . 6cd6542 100644 
 - - - a / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 + + + b / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 @ @ - 150 , 7 + 150 , 8 @ @ public class RowIndexEntry < T > implements IMeasurableMemory 
 int i = 0 ; 
 for ( IndexHelper . IndexInfo info : rie . columnsIndex ( ) ) 
 { 
 - offsets [ i + + ] = i = = 0 ? 0 : ( int ) ( out . getFilePointer ( ) - start ) ; 
 + offsets [ i ] = i = = 0 ? 0 : ( int ) ( out . getFilePointer ( ) - start ) ; 
 + i + + ; 
 idxSerializer . serialize ( info , out ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 index 46a3216 . . 665f0b0 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 @ @ - 266 , 7 + 266 , 7 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 public TraceSessionWrapper ( Callable < T > callable ) 
 { 
 super ( callable ) ; 
 - state = Tracing . instance ( ) . get ( ) ; 
 + state = Tracing . instance . get ( ) ; 
 } 
 
 public TraceSessionWrapper ( Runnable command , TraceState state ) 
 @ @ - 277 , 12 + 277 , 12 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 
 private void setupContext ( ) 
 { 
 - Tracing . instance ( ) . set ( state ) ; 
 + Tracing . instance . set ( state ) ; 
 } 
 
 private void reset ( ) 
 { 
 - Tracing . instance ( ) . set ( null ) ; 
 + Tracing . instance . set ( null ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / net / MessageOut . java b / src / java / org / apache / cassandra / net / MessageOut . java 
 index e10fcee . . dd6cae8 100644 
 - - - a / src / java / org / apache / cassandra / net / MessageOut . java 
 + + + b / src / java / org / apache / cassandra / net / MessageOut . java 
 @ @ - 57 , 7 + 57 , 7 @ @ public class MessageOut < T > 
 this ( verb , 
 payload , 
 serializer , 
 - isTracing ( ) ? ImmutableMap . of ( TRACE _ HEADER , UUIDGen . decompose ( Tracing . instance ( ) . getSessionId ( ) ) ) 
 + isTracing ( ) ? ImmutableMap . of ( TRACE _ HEADER , UUIDGen . decompose ( Tracing . instance . getSessionId ( ) ) ) 
 : Collections . < String , byte [ ] > emptyMap ( ) ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index e01183c . . 43e2cb2 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 680 , 7 + 680 , 7 @ @ public final class MessagingService implements MessagingServiceMBean 
 
 public void receive ( MessageIn message , int id , long timestamp ) 
 { 
 - TraceState state = Tracing . instance ( ) . initializeFromMessage ( message ) ; 
 + TraceState state = Tracing . instance . initializeFromMessage ( message ) ; 
 if ( state ! = null ) 
 state . trace ( " Message received from { } " , message . from ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 index ba13644 . . 4c6f498 100644 
 - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 @ @ - 181 , 7 + 181 , 7 @ @ public class OutboundTcpConnection extends Thread 
 if ( sessionBytes ! = null ) 
 { 
 UUID sessionId = UUIDGen . getUUID ( ByteBuffer . wrap ( sessionBytes ) ) ; 
 - TraceState state = Tracing . instance ( ) . get ( sessionId ) ; 
 + TraceState state = Tracing . instance . get ( sessionId ) ; 
 String message = String . format ( " Sending message to % s " , poolReference . endPoint ( ) ) ; 
 / / session may have already finished ; see CASSANDRA - 5668 
 if ( state = = null ) 
 @ @ - 192 , 7 + 192 , 7 @ @ public class OutboundTcpConnection extends Thread 
 { 
 state . trace ( message ) ; 
 if ( qm . message . verb = = MessagingService . Verb . REQUEST _ RESPONSE ) 
 - Tracing . instance ( ) . stopNonLocal ( state ) ; 
 + Tracing . instance . stopNonLocal ( state ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / service / QueryState . java b / src / java / org / apache / cassandra / service / QueryState . java 
 index 49feb3b . . 6483d9b 100644 
 - - - a / src / java / org / apache / cassandra / service / QueryState . java 
 + + + b / src / java / org / apache / cassandra / service / QueryState . java 
 @ @ - 72 , 13 + 72 , 13 @ @ public class QueryState 
 { 
 if ( this . preparedTracingSession = = null ) 
 { 
 - Tracing . instance ( ) . newSession ( ) ; 
 + Tracing . instance . newSession ( ) ; 
 } 
 else 
 { 
 UUID session = this . preparedTracingSession ; 
 this . preparedTracingSession = null ; 
 - Tracing . instance ( ) . newSession ( session ) ; 
 + Tracing . instance . newSession ( session ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 5e30207 . . accc2c5 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 878 , 7 + 878 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 / / Dont set any state for the node which is bootstrapping the existing token . . . 
 tokenMetadata . updateNormalTokens ( tokens , FBUtilities . getBroadcastAddress ( ) ) ; 
 } 
 - Tracing . instance ( ) ; 
 setMode ( Mode . JOINING , " Starting to bootstrap . . . " , true ) ; 
 new BootStrapper ( FBUtilities . getBroadcastAddress ( ) , tokens , tokenMetadata ) . bootstrap ( ) ; / / handles token update 
 logger . info ( " Bootstrap completed ! for the tokens { } " , tokens ) ; 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 index 4e71a84 . . 55688a8 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 @ @ - 297 , 7 + 297 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 " column _ parent " , column _ parent . toString ( ) , 
 " predicate " , predicate . toString ( ) , 
 " consistency _ level " , consistency _ level . name ( ) ) ; 
 - Tracing . instance ( ) . begin ( " get _ slice " , traceParameters ) ; 
 + Tracing . instance . begin ( " get _ slice " , traceParameters ) ; 
 } 
 else 
 { 
 @ @ - 317 , 7 + 317 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 344 , 7 + 344 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 " column _ parent " , column _ parent . toString ( ) , 
 " predicate " , predicate . toString ( ) , 
 " consistency _ level " , consistency _ level . name ( ) ) ; 
 - Tracing . instance ( ) . begin ( " multiget _ slice " , traceParameters ) ; 
 + Tracing . instance . begin ( " multiget _ slice " , traceParameters ) ; 
 } 
 else 
 { 
 @ @ - 364 , 7 + 364 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 428 , 7 + 428 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 Map < String , String > traceParameters = ImmutableMap . of ( " key " , ByteBufferUtil . bytesToHex ( key ) , 
 " column _ path " , column _ path . toString ( ) , 
 " consistency _ level " , consistency _ level . name ( ) ) ; 
 - Tracing . instance ( ) . begin ( " get " , traceParameters ) ; 
 + Tracing . instance . begin ( " get " , traceParameters ) ; 
 } 
 else 
 { 
 @ @ - 484 , 7 + 484 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 497 , 7 + 497 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 " column _ parent " , column _ parent . toString ( ) , 
 " predicate " , predicate . toString ( ) , 
 " consistency _ level " , consistency _ level . name ( ) ) ; 
 - Tracing . instance ( ) . begin ( " get _ count " , traceParameters ) ; 
 + Tracing . instance . begin ( " get _ count " , traceParameters ) ; 
 } 
 else 
 { 
 @ @ - 577 , 7 + 577 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 602 , 7 + 602 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 " column _ parent " , column _ parent . toString ( ) , 
 " predicate " , predicate . toString ( ) , 
 " consistency _ level " , consistency _ level . name ( ) ) ; 
 - Tracing . instance ( ) . begin ( " multiget _ count " , traceParameters ) ; 
 + Tracing . instance . begin ( " multiget _ count " , traceParameters ) ; 
 } 
 else 
 { 
 @ @ - 633 , 7 + 633 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 682 , 7 + 682 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 " column _ parent " , column _ parent . toString ( ) , 
 " column " , column . toString ( ) , 
 " consistency _ level " , consistency _ level . name ( ) ) ; 
 - Tracing . instance ( ) . begin ( " insert " , traceParameters ) ; 
 + Tracing . instance . begin ( " insert " , traceParameters ) ; 
 } 
 else 
 { 
 @ @ - 699 , 7 + 699 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 712 , 7 + 712 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 " column _ family " , column _ family , 
 " old " , expected . toString ( ) , 
 " updates " , updates . toString ( ) ) ; 
 - Tracing . instance ( ) . begin ( " cas " , traceParameters ) ; 
 + Tracing . instance . begin ( " cas " , traceParameters ) ; 
 } 
 else 
 { 
 @ @ - 779 , 7 + 779 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 914 , 7 + 914 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 Joiner . on ( " ; " ) . withKeyValueSeparator ( " : " ) . join ( mutationEntry . getValue ( ) ) ) ; 
 } 
 traceParameters . put ( " consistency _ level " , consistency _ level . name ( ) ) ; 
 - Tracing . instance ( ) . begin ( " batch _ mutate " , traceParameters ) ; 
 + Tracing . instance . begin ( " batch _ mutate " , traceParameters ) ; 
 } 
 else 
 { 
 @ @ - 931 , 7 + 931 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 947 , 7 + 947 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 Joiner . on ( " ; " ) . withKeyValueSeparator ( " : " ) . join ( mutationEntry . getValue ( ) ) ) ; 
 } 
 traceParameters . put ( " consistency _ level " , consistency _ level . name ( ) ) ; 
 - Tracing . instance ( ) . begin ( " atomic _ batch _ mutate " , traceParameters ) ; 
 + Tracing . instance . begin ( " atomic _ batch _ mutate " , traceParameters ) ; 
 } 
 else 
 { 
 @ @ - 964 , 7 + 964 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 1006 , 7 + 1006 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 " column _ path " , column _ path . toString ( ) , 
 " timestamp " , timestamp + " " , 
 " consistency _ level " , consistency _ level . name ( ) ) ; 
 - Tracing . instance ( ) . begin ( " remove " , traceParameters ) ; 
 + Tracing . instance . begin ( " remove " , traceParameters ) ; 
 } 
 else 
 { 
 @ @ - 1023 , 7 + 1023 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 1089 , 7 + 1089 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 " predicate " , predicate . toString ( ) , 
 " range " , range . toString ( ) , 
 " consistency _ level " , consistency _ level . name ( ) ) ; 
 - Tracing . instance ( ) . begin ( " get _ range _ slices " , traceParameters ) ; 
 + Tracing . instance . begin ( " get _ range _ slices " , traceParameters ) ; 
 } 
 else 
 { 
 @ @ - 1165 , 7 + 1165 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 1178 , 7 + 1178 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 " range " , range . toString ( ) , 
 " start _ column " , ByteBufferUtil . bytesToHex ( start _ column ) , 
 " consistency _ level " , consistency _ level . name ( ) ) ; 
 - Tracing . instance ( ) . begin ( " get _ paged _ slice " , traceParameters ) ; 
 + Tracing . instance . begin ( " get _ paged _ slice " , traceParameters ) ; 
 } 
 else 
 { 
 @ @ - 1258 , 7 + 1258 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 1284 , 7 + 1284 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 " index _ clause " , index _ clause . toString ( ) , 
 " slice _ predicate " , column _ predicate . toString ( ) , 
 " consistency _ level " , consistency _ level . name ( ) ) ; 
 - Tracing . instance ( ) . begin ( " get _ indexed _ slices " , traceParameters ) ; 
 + Tracing . instance . begin ( " get _ indexed _ slices " , traceParameters ) ; 
 } 
 else 
 { 
 @ @ - 1335 , 7 + 1335 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 1632 , 7 + 1632 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 
 if ( startSessionIfRequested ( ) ) 
 { 
 - Tracing . instance ( ) . begin ( " truncate " , ImmutableMap . of ( " cf " , cfname , " ks " , keyspace ) ) ; 
 + Tracing . instance . begin ( " truncate " , ImmutableMap . of ( " cf " , cfname , " ks " , keyspace ) ) ; 
 } 
 else 
 { 
 @ @ - 1668 , 7 + 1668 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 1700 , 7 + 1700 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 Map < String , String > traceParameters = ImmutableMap . of ( " column _ parent " , column _ parent . toString ( ) , 
 " column " , column . toString ( ) , 
 " consistency _ level " , consistency _ level . name ( ) ) ; 
 - Tracing . instance ( ) . begin ( " add " , traceParameters ) ; 
 + Tracing . instance . begin ( " add " , traceParameters ) ; 
 } 
 else 
 { 
 @ @ - 1744 , 7 + 1744 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 1756 , 7 + 1756 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 Map < String , String > traceParameters = ImmutableMap . of ( " key " , ByteBufferUtil . bytesToHex ( key ) , 
 " column _ path " , path . toString ( ) , 
 " consistency _ level " , consistency _ level . name ( ) ) ; 
 - Tracing . instance ( ) . begin ( " remove _ counter " , traceParameters ) ; 
 + Tracing . instance . begin ( " remove _ counter " , traceParameters ) ; 
 } 
 else 
 { 
 @ @ - 1773 , 7 + 1773 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 1866 , 8 + 1866 , 8 @ @ public class CassandraServer implements Cassandra . Iface 
 String queryString = uncompress ( query , compression ) ; 
 if ( startSessionIfRequested ( ) ) 
 { 
 - Tracing . instance ( ) . begin ( " execute _ cql _ query " , 
 - ImmutableMap . of ( " query " , queryString ) ) ; 
 + Tracing . instance . begin ( " execute _ cql _ query " , 
 + ImmutableMap . of ( " query " , queryString ) ) ; 
 } 
 else 
 { 
 @ @ - 1887 , 7 + 1887 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 1900 , 8 + 1900 , 8 @ @ public class CassandraServer implements Cassandra . Iface 
 String queryString = uncompress ( query , compression ) ; 
 if ( startSessionIfRequested ( ) ) 
 { 
 - Tracing . instance ( ) . begin ( " execute _ cql3 _ query " , 
 - ImmutableMap . of ( " query " , queryString ) ) ; 
 + Tracing . instance . begin ( " execute _ cql3 _ query " , 
 + ImmutableMap . of ( " query " , queryString ) ) ; 
 } 
 else 
 { 
 @ @ - 1922 , 7 + 1922 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 1974 , 7 + 1974 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 if ( startSessionIfRequested ( ) ) 
 { 
 / / TODO we don ' t have [ typed ] access to CQL bind variables here . CASSANDRA - 4560 is open to add support . 
 - Tracing . instance ( ) . begin ( " execute _ prepared _ cql _ query " , Collections . < String , String > emptyMap ( ) ) ; 
 + Tracing . instance . begin ( " execute _ prepared _ cql _ query " , Collections . < String , String > emptyMap ( ) ) ; 
 } 
 else 
 { 
 @ @ - 2003 , 7 + 2003 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 @ @ - 2015 , 7 + 2015 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 if ( startSessionIfRequested ( ) ) 
 { 
 / / TODO we don ' t have [ typed ] access to CQL bind variables here . CASSANDRA - 4560 is open to add support . 
 - Tracing . instance ( ) . begin ( " execute _ prepared _ cql3 _ query " , Collections . < String , String > emptyMap ( ) ) ; 
 + Tracing . instance . begin ( " execute _ prepared _ cql3 _ query " , Collections . < String , String > emptyMap ( ) ) ; 
 } 
 else 
 { 
 @ @ - 2047 , 7 + 2047 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / tracing / Tracing . java b / src / java / org / apache / cassandra / tracing / Tracing . java 
 index b67e06b . . 815c550 100644 
 - - - a / src / java / org / apache / cassandra / tracing / Tracing . java 
 + + + b / src / java / org / apache / cassandra / tracing / Tracing . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . util . Arrays ; 
 import java . util . Map ; 
 import java . util . UUID ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 + import java . util . concurrent . ConcurrentMap ; 
 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 58 , 23 + 59 , 15 @ @ public class Tracing 
 
 private static final int TTL = 24 * 3600 ; 
 
 - private static Tracing instance = new Tracing ( ) ; 
 + private static final Logger logger = LoggerFactory . getLogger ( Tracing . class ) ; 
 
 - public static final Logger logger = LoggerFactory . getLogger ( Tracing . class ) ; 
 - 
 - / * * 
 - * Fetches and lazy initializes the trace context . 
 - * / 
 - public static Tracing instance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 - private InetAddress localAddress = FBUtilities . getLocalAddress ( ) ; 
 + private final InetAddress localAddress = FBUtilities . getLocalAddress ( ) ; 
 
 private final ThreadLocal < TraceState > state = new ThreadLocal < TraceState > ( ) ; 
 
 - private final Map < UUID , TraceState > sessions = new ConcurrentHashMap < UUID , TraceState > ( ) ; 
 + private final ConcurrentMap < UUID , TraceState > sessions = new ConcurrentHashMap < UUID , TraceState > ( ) ; 
 + 
 + public static final Tracing instance = new Tracing ( ) ; 
 
 public static void addColumn ( ColumnFamily cf , ByteBuffer name , InetAddress address ) 
 { 
 @ @ - 129 , 7 + 122 , 7 @ @ public class Tracing 
 * / 
 public static boolean isTracing ( ) 
 { 
 - return instance ! = null & & instance . state . get ( ) ! = null ; 
 + return instance . state . get ( ) ! = null ; 
 } 
 
 public UUID newSession ( ) 
 @ @ - 256 , 10 + 249 , 7 @ @ public class Tracing 
 
 public static void trace ( String message ) 
 { 
 - if ( Tracing . instance ( ) = = null ) / / instance might not be built at the time this is called 
 - return ; 
 - 
 - final TraceState state = Tracing . instance ( ) . get ( ) ; 
 + final TraceState state = instance . get ( ) ; 
 if ( state = = null ) / / inline isTracing to avoid implicit two calls to state . get ( ) 
 return ; 
 
 @ @ - 268 , 10 + 258 , 7 @ @ public class Tracing 
 
 public static void trace ( String format , Object arg ) 
 { 
 - if ( Tracing . instance ( ) = = null ) / / instance might not be built at the time this is called 
 - return ; 
 - 
 - final TraceState state = Tracing . instance ( ) . get ( ) ; 
 + final TraceState state = instance . get ( ) ; 
 if ( state = = null ) / / inline isTracing to avoid implicit two calls to state . get ( ) 
 return ; 
 
 @ @ - 280 , 10 + 267 , 7 @ @ public class Tracing 
 
 public static void trace ( String format , Object arg1 , Object arg2 ) 
 { 
 - if ( Tracing . instance ( ) = = null ) / / instance might not be built at the time this is called 
 - return ; 
 - 
 - final TraceState state = Tracing . instance ( ) . get ( ) ; 
 + final TraceState state = instance . get ( ) ; 
 if ( state = = null ) / / inline isTracing to avoid implicit two calls to state . get ( ) 
 return ; 
 
 @ @ - 292 , 10 + 276 , 7 @ @ public class Tracing 
 
 public static void trace ( String format , Object [ ] args ) 
 { 
 - if ( Tracing . instance ( ) = = null ) / / instance might not be built at the time this is called 
 - return ; 
 - 
 - final TraceState state = Tracing . instance ( ) . get ( ) ; 
 + final TraceState state = instance . get ( ) ; 
 if ( state = = null ) / / inline isTracing to avoid implicit two calls to state . get ( ) 
 return ; 
 
 diff - - git a / src / java / org / apache / cassandra / transport / messages / BatchMessage . java b / src / java / org / apache / cassandra / transport / messages / BatchMessage . java 
 index ed8aaaf . . 299d8b8 100644 
 - - - a / src / java / org / apache / cassandra / transport / messages / BatchMessage . java 
 + + + b / src / java / org / apache / cassandra / transport / messages / BatchMessage . java 
 @ @ - 178 , 7 + 178 , 7 @ @ public class BatchMessage extends Message . Request 
 { 
 state . createTracingSession ( ) ; 
 / / TODO we don ' t have [ typed ] access to CQL bind variables here . CASSANDRA - 4560 is open to add support . 
 - Tracing . instance ( ) . begin ( " Execute batch of CQL3 queries " , Collections . < String , String > emptyMap ( ) ) ; 
 + Tracing . instance . begin ( " Execute batch of CQL3 queries " , Collections . < String , String > emptyMap ( ) ) ; 
 } 
 
 List < ModificationStatement > statements = new ArrayList < ModificationStatement > ( queryOrIdList . size ( ) ) ; 
 @ @ - 235 , 7 + 235 , 7 @ @ public class BatchMessage extends Message . Request 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java b / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java 
 index 62fa10a . . 8e2b761 100644 
 - - - a / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java 
 + + + b / src / java / org / apache / cassandra / transport / messages / ExecuteMessage . java 
 @ @ - 115 , 7 + 115 , 7 @ @ public class ExecuteMessage extends Message . Request 
 { 
 state . createTracingSession ( ) ; 
 / / TODO we don ' t have [ typed ] access to CQL bind variables here . CASSANDRA - 4560 is open to add support . 
 - Tracing . instance ( ) . begin ( " Execute CQL3 prepared query " , Collections . < String , String > emptyMap ( ) ) ; 
 + Tracing . instance . begin ( " Execute CQL3 prepared query " , Collections . < String , String > emptyMap ( ) ) ; 
 } 
 
 Message . Response response = QueryProcessor . processPrepared ( statement , consistency , state , values ) ; 
 @ @ - 131 , 7 + 131 , 7 @ @ public class ExecuteMessage extends Message . Request 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / transport / messages / PrepareMessage . java b / src / java / org / apache / cassandra / transport / messages / PrepareMessage . java 
 index 13f6321 . . 3e7fe51 100644 
 - - - a / src / java / org / apache / cassandra / transport / messages / PrepareMessage . java 
 + + + b / src / java / org / apache / cassandra / transport / messages / PrepareMessage . java 
 @ @ - 71 , 7 + 71 , 7 @ @ public class PrepareMessage extends Message . Request 
 if ( state . traceNextQuery ( ) ) 
 { 
 state . createTracingSession ( ) ; 
 - Tracing . instance ( ) . begin ( " Preparing CQL3 query " , ImmutableMap . of ( " query " , query ) ) ; 
 + Tracing . instance . begin ( " Preparing CQL3 query " , ImmutableMap . of ( " query " , query ) ) ; 
 } 
 
 Message . Response response = QueryProcessor . prepare ( query , state . getClientState ( ) , false ) ; 
 @ @ - 87 , 7 + 87 , 7 @ @ public class PrepareMessage extends Message . Request 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / transport / messages / QueryMessage . java b / src / java / org / apache / cassandra / transport / messages / QueryMessage . java 
 index 9735654 . . e334b02 100644 
 - - - a / src / java / org / apache / cassandra / transport / messages / QueryMessage . java 
 + + + b / src / java / org / apache / cassandra / transport / messages / QueryMessage . java 
 @ @ - 117 , 7 + 117 , 7 @ @ public class QueryMessage extends Message . Request 
 if ( state . traceNextQuery ( ) ) 
 { 
 state . createTracingSession ( ) ; 
 - Tracing . instance ( ) . begin ( " Execute CQL3 query " , ImmutableMap . of ( " query " , query ) ) ; 
 + Tracing . instance . begin ( " Execute CQL3 query " , ImmutableMap . of ( " query " , query ) ) ; 
 } 
 
 Message . Response response = QueryProcessor . process ( query , values , consistency , state ) ; 
 @ @ - 135 , 7 + 135 , 7 @ @ public class QueryMessage extends Message . Request 
 } 
 finally 
 { 
 - Tracing . instance ( ) . stopSession ( ) ; 
 + Tracing . instance . stopSession ( ) ; 
 } 
 } 

