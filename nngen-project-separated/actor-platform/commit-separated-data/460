BLEU SCORE: 0.3549481056010052

TEST MSG: test ( server : messaging ) : removed pendingUntilFixed
GENERATED MSG: test ( server : session ) : fixed spec

TEST DIFF (one line): diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / GlobalCountersSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / GlobalCountersSpec . scala < nl > index 78c39d4 . . f92f07a 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / GlobalCountersSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / GlobalCountersSpec . scala < nl > @ @ - 15 , 7 + 15 , 7 @ @ final class GlobalCountersSpec < nl > < nl > " Global counter " should " count unread messages in public groups " in publicGroups < nl > < nl > - it should " not count messages in public group , after user been kicked from it " in pendingUntilFixed ( publicGroupsAfterKick ) < nl > + it should " not count messages in public group , after user been kicked from it " in publicGroupsAfterKick < nl > < nl > private implicit lazy val msgService = MessagingServiceImpl ( ) < nl > private implicit lazy val groupsService = new GroupsServiceImpl ( GroupInviteConfig ( " " ) )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > index c7151f5 . . 94ffd56 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > @ @ - 45 , 7 + 45 , 7 @ @ final class SessionSpec extends BaseSessionSpec with BeforeAndAfterEach { < nl > it should " cache small results " in sessions ( ) . cacheSmallResults < nl > it should " not cache big requests " in sessions ( ) . notCacheBigRequests < nl > < nl > - var count = 0 < nl > + @ volatile var count = 0 < nl > < nl > override def beforeEach = { < nl > RawApiExtension ( system ) . register ( " echo " , new EchoService ( system ) { override def onEcho ( ) = count + = 1 } )

TEST DIFF:
diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / GlobalCountersSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / GlobalCountersSpec . scala 
 index 78c39d4 . . f92f07a 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / GlobalCountersSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / GlobalCountersSpec . scala 
 @ @ - 15 , 7 + 15 , 7 @ @ final class GlobalCountersSpec 
 
 " Global counter " should " count unread messages in public groups " in publicGroups 
 
 - it should " not count messages in public group , after user been kicked from it " in pendingUntilFixed ( publicGroupsAfterKick ) 
 + it should " not count messages in public group , after user been kicked from it " in publicGroupsAfterKick 
 
 private implicit lazy val msgService = MessagingServiceImpl ( ) 
 private implicit lazy val groupsService = new GroupsServiceImpl ( GroupInviteConfig ( " " ) )

NEAREST DIFF:
diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 index c7151f5 . . 94ffd56 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 @ @ - 45 , 7 + 45 , 7 @ @ final class SessionSpec extends BaseSessionSpec with BeforeAndAfterEach { 
 it should " cache small results " in sessions ( ) . cacheSmallResults 
 it should " not cache big requests " in sessions ( ) . notCacheBigRequests 
 
 - var count = 0 
 + @ volatile var count = 0 
 
 override def beforeEach = { 
 RawApiExtension ( system ) . register ( " echo " , new EchoService ( system ) { override def onEcho ( ) = count + = 1 } )
