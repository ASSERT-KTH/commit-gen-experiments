BLEU SCORE: 0.06143711383077495

TEST MSG: fix ( server ) : fixed race condition in modules startup
GENERATED MSG: feat ( server : sdk ) : ability to register rpc services and extensions using config file

TEST DIFF (one line): diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > index 473ba73 . . d2aff17 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > @ @ - 61 , 7 + 61 , 7 @ @ object ActorServer { < nl > def newBuilder : ActorServerBuilder = ActorServerBuilder ( ) < nl > } < nl > < nl > - final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( ) ) extends ActorServerModules { < nl > + final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( ) ) { < nl > / * * < nl > * < nl > * @ param config < nl > @ @ - 257 , 8 + 257 , 6 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > system . log . debug ( " Registering services " ) < nl > RpcApiExtension ( system ) . register ( services ) < nl > < nl > - startModules ( system ) < nl > - < nl > system . log . debug ( " Starting Actor CLI " ) < nl > ActorCliService . start ( system ) < nl > < nl > @ @ - 268 , 6 + 266 , 8 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > system . log . debug ( " Starting Http Api " ) < nl > HttpApi ( system ) . start ( ) < nl > < nl > + ActorServerModules ( system ) . startModules ( ) < nl > + < nl > ActorServer ( system ) < nl > } catch { < nl > case e : ConfigException ⇒ < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServerModules . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServerModules . scala < nl > index 581b885 . . 9df7932 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServerModules . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServerModules . scala < nl > @ @ - 1 , 24 + 1 , 29 @ @ < nl > package im . actor . server < nl > < nl > - import akka . actor . ActorSystem < nl > + import akka . actor . _ < nl > import com . typesafe . config . { ConfigException , ConfigObject , Config } < nl > import im . actor . server . api . rpc . RpcApiExtension < nl > < nl > import scala . collection . JavaConversions . _ < nl > import scala . util . { Failure , Success , Try } < nl > < nl > - private [ server ] trait ActorServerModules { < nl > + object ActorServerModules extends ExtensionId [ ActorServerModules ] with ExtensionIdProvider { < nl > + override def createExtension ( system : ExtendedActorSystem ) : ActorServerModules = new ActorServerModules ( system ) < nl > + < nl > + override def lookup ( ) : ExtensionId [ _ < : Extension ] = ActorServerModules < nl > + } < nl > + < nl > + final class ActorServerModules ( system : ExtendedActorSystem ) extends Extension { < nl > private val RpcServiceClazz = classOf [ im . actor . api . rpc . Service ] < nl > - private val AkkaExtensionClazz = classOf [ akka . actor . Extension ] < nl > < nl > - protected def startModules ( system : ActorSystem ) : Unit = < nl > + def startModules ( ) : Unit = < nl > system . settings . config . getObject ( " modules " ) foreach { < nl > - case ( n , c : ConfigObject ) ⇒ startModule ( system , n , c . toConfig ) < nl > + case ( n , c : ConfigObject ) ⇒ startModule ( n , c . toConfig ) < nl > case ( _ , c ) ⇒ < nl > throw new RuntimeException ( s " Module have to be a config but got : $ { c . getClass . getName } " ) < nl > } < nl > < nl > - private def startModule ( system : ActorSystem , name : String , config : Config ) : Unit = { < nl > + def startModule ( name : String , config : Config ) : Unit = { < nl > system . log . debug ( " Starting module { } " , name ) < nl > < nl > ( for { < nl > @ @ - 34 , 13 + 39 , 15 @ @ private [ server ] trait ActorServerModules { < nl > < nl > ( for { < nl > fqcn ← Try ( config . getString ( " extension " ) ) < nl > - clazz ← Try ( Class . forName ( fqcn ) . asSubclass ( AkkaExtensionClazz ) ) < nl > - } yield clazz . getDeclaredConstructor ( classOf [ ActorSystem ] ) . newInstance ( system ) ) match { < nl > - case Success ( _ ) ⇒ < nl > - case Failure ( _ : ConfigException . Missing ) ⇒ < nl > - case Failure ( _ : ClassCastException ) ⇒ < nl > + obj ← system . dynamicAccess . getObjectFor [ AnyRef ] ( fqcn ) < nl > + } yield obj ) match { < nl > + case Success ( eid : ExtensionId [ _ ] ) ⇒ startExtension ( eid ) < nl > + case Success ( _ ) ⇒ < nl > throw new RuntimeException ( s " extension should extend akka . actor . Extension " ) < nl > - case Failure ( e ) ⇒ throw e < nl > + case Failure ( _ : ConfigException . Missing ) ⇒ < nl > + case Failure ( e ) ⇒ throw e < nl > } < nl > } < nl > + < nl > + private def startExtension [ T < : Extension ] ( ext : ExtensionId [ T ] ) : T = ext . apply ( system ) < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - rpc - api / src / main / resources / reference . conf b / actor - server / actor - rpc - api / src / main / resources / reference . conf < nl > index 8bf8400 . . 52f92cc 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - rpc - api / src / main / resources / reference . conf < nl > @ @ - 16 , 4 + 16 , 8 @ @ modules { < nl > sequence { < nl > max - difference - size : 20 KiB < nl > } < nl > + < nl > + search { < nl > + rpc = " im . actor . server . api . rpc . service . search . SearchServiceImpl " < nl > + } < nl > } < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > index 88dbf40 . . 09f7eb2 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > @ @ - 1 , 12 + 1 , 9 @ @ < nl > package im . actor . server < nl > < nl > - import scala . language . existentials < nl > - < nl > import akka . actor . _ < nl > import akka . cluster . Cluster < nl > import akka . stream . ActorMaterializer < nl > - import com . typesafe . config . ConfigException < nl > - import im . actor . api . rpc . search . SearchService < nl > + import com . typesafe . config . { Config , ConfigFactory , ConfigException } < nl > import im . actor . config . ActorConfig < nl > import im . actor . server . activation . gate . { GateCodeActivation , GateConfig } < nl > import im . actor . server . activation . internal . { ActivationConfig , InternalCodeActivation } < nl > @ @ - 24 , 7 + 21 , 6 @ @ import im . actor . server . api . rpc . service . pubgroups . PubgroupsServiceImpl < nl > import im . actor . server . api . rpc . service . push . PushServiceImpl < nl > import im . actor . server . api . rpc . service . sequence . { SequenceServiceConfig , SequenceServiceImpl } < nl > import im . actor . server . api . rpc . service . users . UsersServiceImpl < nl > - import im . actor . server . api . rpc . service . search . SearchServiceImpl < nl > import im . actor . server . api . rpc . service . weak . WeakServiceImpl < nl > import im . actor . server . api . rpc . service . webactions . WebactionsServiceImpl < nl > import im . actor . server . api . rpc . service . webhooks . IntegrationsServiceImpl < nl > @ @ - 45 , 17 + 41 , 38 @ @ import im . actor . server . sms . { TelesignCallEngine , TelesignClient , TelesignSmsEngi < nl > import im . actor . server . social . SocialExtension < nl > import im . actor . server . user . _ < nl > < nl > - final case class StartedActorServer ( system : ActorSystem ) < nl > + import scala . language . existentials < nl > < nl > - final case class ActorServer ( searchServiceClass : Class [ _ < : SearchService ] = classOf [ SearchServiceImpl ] ) { < nl > - def start ( ) : StartedActorServer = { < nl > + final case class ActorServer ( system : ActorSystem ) < nl > + < nl > + object ActorServer { < nl > + / * * < nl > + * Creates a new Actor Server builder < nl > + * @ return < nl > + * / < nl > + def newBuilder : ActorServerBuilder = ActorServerBuilder ( ) < nl > + } < nl > + < nl > + final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( ) ) extends ActorServerModules { < nl > + / * * < nl > + * < nl > + * @ param config < nl > + * @ return a builder with provided default config < nl > + * / < nl > + def withDefaultConfig ( config : Config ) = this . copy ( defaultConfig = config ) < nl > + < nl > + / * * < nl > + * Starts a server < nl > + * @ return < nl > + * / < nl > + def start ( ) : ActorServer = { < nl > SessionMessage . register ( ) < nl > CommonSerialization . register ( ) < nl > UserProcessor . register ( ) < nl > GroupProcessor . register ( ) < nl > DialogProcessor . register ( ) < nl > < nl > - val serverConfig = ActorConfig . load ( ) < nl > + val serverConfig = ActorConfig . load ( defaultConfig ) < nl > < nl > implicit val system = ActorSystem ( serverConfig . getString ( " actor - system - name " ) , serverConfig ) < nl > < nl > @ @ - 214 , 7 + 231 , 8 @ @ final case class ActorServer ( searchServiceClass : Class [ _ < : SearchService ] = cla < nl > < nl > system . log . debug ( " Registering services " ) < nl > RpcApiExtension ( system ) . register ( services ) < nl > - RpcApiExtension ( system ) . register ( searchServiceClass ) < nl > + < nl > + startModules ( system ) < nl > < nl > system . log . debug ( " Starting Actor CLI " ) < nl > ActorCliService . start ( system ) < nl > @ @ - 225 , 7 + 243 , 7 @ @ final case class ActorServer ( searchServiceClass : Class [ _ < : SearchService ] = cla < nl > system . log . debug ( " Starting Http Api " ) < nl > HttpApiFrontend . start ( serverConfig ) < nl > < nl > - StartedActorServer ( system ) < nl > + ActorServer ( system ) < nl > } catch { < nl > case e : ConfigException ⇒ < nl > system . log . error ( e , " Failed to load server configuration " ) < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServerModules . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServerModules . scala < nl > new file mode 100644 < nl > index 0000000 . . 581b885 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServerModules . scala < nl > @ @ - 0 , 0 + 1 , 46 @ @ < nl > + package im . actor . server < nl > + < nl > + import akka . actor . ActorSystem < nl > + import com . typesafe . config . { ConfigException , ConfigObject , Config } < nl > + import im . actor . server . api . rpc . RpcApiExtension < nl > + < nl > + import scala . collection . JavaConversions . _ < nl > + import scala . util . { Failure , Success , Try } < nl > + < nl > + private [ server ] trait ActorServerModules { < nl > + private val RpcServiceClazz = classOf [ im . actor . api . rpc . Service ] < nl > + private val AkkaExtensionClazz = classOf [ akka . actor . Extension ] < nl > + < nl > + protected def startModules ( system : ActorSystem ) : Unit = < nl > + system . settings . config . getObject ( " modules " ) foreach { < nl > + case ( n , c : ConfigObject ) ⇒ startModule ( system , n , c . toConfig ) < nl > + case ( _ , c ) ⇒ < nl > + throw new RuntimeException ( s " Module have to be a config but got : $ { c . getClass . getName } " ) < nl > + } < nl > + < nl > + private def startModule ( system : ActorSystem , name : String , config : Config ) : Unit = { < nl > + system . log . debug ( " Starting module { } " , name ) < nl > + < nl > + ( for { < nl > + fqcn ← Try ( config . getString ( " rpc " ) ) < nl > + clazz ← Try ( Class . forName ( fqcn ) . asSubclass ( RpcServiceClazz ) ) < nl > + } yield RpcApiExtension ( system ) . register ( clazz ) ) match { < nl > + case Success ( _ ) ⇒ < nl > + case Failure ( _ : ConfigException . Missing ) ⇒ < nl > + case Failure ( _ : ClassCastException ) ⇒ < nl > + throw new RuntimeException ( s " rpc should extend im . actor . api . rpc . Service " ) < nl > + case Failure ( e ) ⇒ throw e < nl > + } < nl > + < nl > + ( for { < nl > + fqcn ← Try ( config . getString ( " extension " ) ) < nl > + clazz ← Try ( Class . forName ( fqcn ) . asSubclass ( AkkaExtensionClazz ) ) < nl > + } yield clazz . getDeclaredConstructor ( classOf [ ActorSystem ] ) . newInstance ( system ) ) match { < nl > + case Success ( _ ) ⇒ < nl > + case Failure ( _ : ConfigException . Missing ) ⇒ < nl > + case Failure ( _ : ClassCastException ) ⇒ < nl > + throw new RuntimeException ( s " extension should extend akka . actor . Extension " ) < nl > + case Failure ( e ) ⇒ throw e < nl > + } < nl > + } < nl > + } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 index 473ba73 . . d2aff17 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 @ @ - 61 , 7 + 61 , 7 @ @ object ActorServer { 
 def newBuilder : ActorServerBuilder = ActorServerBuilder ( ) 
 } 
 
 - final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( ) ) extends ActorServerModules { 
 + final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( ) ) { 
 / * * 
 * 
 * @ param config 
 @ @ - 257 , 8 + 257 , 6 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 system . log . debug ( " Registering services " ) 
 RpcApiExtension ( system ) . register ( services ) 
 
 - startModules ( system ) 
 - 
 system . log . debug ( " Starting Actor CLI " ) 
 ActorCliService . start ( system ) 
 
 @ @ - 268 , 6 + 266 , 8 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 system . log . debug ( " Starting Http Api " ) 
 HttpApi ( system ) . start ( ) 
 
 + ActorServerModules ( system ) . startModules ( ) 
 + 
 ActorServer ( system ) 
 } catch { 
 case e : ConfigException ⇒ 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServerModules . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServerModules . scala 
 index 581b885 . . 9df7932 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServerModules . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServerModules . scala 
 @ @ - 1 , 24 + 1 , 29 @ @ 
 package im . actor . server 
 
 - import akka . actor . ActorSystem 
 + import akka . actor . _ 
 import com . typesafe . config . { ConfigException , ConfigObject , Config } 
 import im . actor . server . api . rpc . RpcApiExtension 
 
 import scala . collection . JavaConversions . _ 
 import scala . util . { Failure , Success , Try } 
 
 - private [ server ] trait ActorServerModules { 
 + object ActorServerModules extends ExtensionId [ ActorServerModules ] with ExtensionIdProvider { 
 + override def createExtension ( system : ExtendedActorSystem ) : ActorServerModules = new ActorServerModules ( system ) 
 + 
 + override def lookup ( ) : ExtensionId [ _ < : Extension ] = ActorServerModules 
 + } 
 + 
 + final class ActorServerModules ( system : ExtendedActorSystem ) extends Extension { 
 private val RpcServiceClazz = classOf [ im . actor . api . rpc . Service ] 
 - private val AkkaExtensionClazz = classOf [ akka . actor . Extension ] 
 
 - protected def startModules ( system : ActorSystem ) : Unit = 
 + def startModules ( ) : Unit = 
 system . settings . config . getObject ( " modules " ) foreach { 
 - case ( n , c : ConfigObject ) ⇒ startModule ( system , n , c . toConfig ) 
 + case ( n , c : ConfigObject ) ⇒ startModule ( n , c . toConfig ) 
 case ( _ , c ) ⇒ 
 throw new RuntimeException ( s " Module have to be a config but got : $ { c . getClass . getName } " ) 
 } 
 
 - private def startModule ( system : ActorSystem , name : String , config : Config ) : Unit = { 
 + def startModule ( name : String , config : Config ) : Unit = { 
 system . log . debug ( " Starting module { } " , name ) 
 
 ( for { 
 @ @ - 34 , 13 + 39 , 15 @ @ private [ server ] trait ActorServerModules { 
 
 ( for { 
 fqcn ← Try ( config . getString ( " extension " ) ) 
 - clazz ← Try ( Class . forName ( fqcn ) . asSubclass ( AkkaExtensionClazz ) ) 
 - } yield clazz . getDeclaredConstructor ( classOf [ ActorSystem ] ) . newInstance ( system ) ) match { 
 - case Success ( _ ) ⇒ 
 - case Failure ( _ : ConfigException . Missing ) ⇒ 
 - case Failure ( _ : ClassCastException ) ⇒ 
 + obj ← system . dynamicAccess . getObjectFor [ AnyRef ] ( fqcn ) 
 + } yield obj ) match { 
 + case Success ( eid : ExtensionId [ _ ] ) ⇒ startExtension ( eid ) 
 + case Success ( _ ) ⇒ 
 throw new RuntimeException ( s " extension should extend akka . actor . Extension " ) 
 - case Failure ( e ) ⇒ throw e 
 + case Failure ( _ : ConfigException . Missing ) ⇒ 
 + case Failure ( e ) ⇒ throw e 
 } 
 } 
 + 
 + private def startExtension [ T < : Extension ] ( ext : ExtensionId [ T ] ) : T = ext . apply ( system ) 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - rpc - api / src / main / resources / reference . conf b / actor - server / actor - rpc - api / src / main / resources / reference . conf 
 index 8bf8400 . . 52f92cc 100644 
 - - - a / actor - server / actor - rpc - api / src / main / resources / reference . conf 
 + + + b / actor - server / actor - rpc - api / src / main / resources / reference . conf 
 @ @ - 16 , 4 + 16 , 8 @ @ modules { 
 sequence { 
 max - difference - size : 20 KiB 
 } 
 + 
 + search { 
 + rpc = " im . actor . server . api . rpc . service . search . SearchServiceImpl " 
 + } 
 } 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 index 88dbf40 . . 09f7eb2 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 @ @ - 1 , 12 + 1 , 9 @ @ 
 package im . actor . server 
 
 - import scala . language . existentials 
 - 
 import akka . actor . _ 
 import akka . cluster . Cluster 
 import akka . stream . ActorMaterializer 
 - import com . typesafe . config . ConfigException 
 - import im . actor . api . rpc . search . SearchService 
 + import com . typesafe . config . { Config , ConfigFactory , ConfigException } 
 import im . actor . config . ActorConfig 
 import im . actor . server . activation . gate . { GateCodeActivation , GateConfig } 
 import im . actor . server . activation . internal . { ActivationConfig , InternalCodeActivation } 
 @ @ - 24 , 7 + 21 , 6 @ @ import im . actor . server . api . rpc . service . pubgroups . PubgroupsServiceImpl 
 import im . actor . server . api . rpc . service . push . PushServiceImpl 
 import im . actor . server . api . rpc . service . sequence . { SequenceServiceConfig , SequenceServiceImpl } 
 import im . actor . server . api . rpc . service . users . UsersServiceImpl 
 - import im . actor . server . api . rpc . service . search . SearchServiceImpl 
 import im . actor . server . api . rpc . service . weak . WeakServiceImpl 
 import im . actor . server . api . rpc . service . webactions . WebactionsServiceImpl 
 import im . actor . server . api . rpc . service . webhooks . IntegrationsServiceImpl 
 @ @ - 45 , 17 + 41 , 38 @ @ import im . actor . server . sms . { TelesignCallEngine , TelesignClient , TelesignSmsEngi 
 import im . actor . server . social . SocialExtension 
 import im . actor . server . user . _ 
 
 - final case class StartedActorServer ( system : ActorSystem ) 
 + import scala . language . existentials 
 
 - final case class ActorServer ( searchServiceClass : Class [ _ < : SearchService ] = classOf [ SearchServiceImpl ] ) { 
 - def start ( ) : StartedActorServer = { 
 + final case class ActorServer ( system : ActorSystem ) 
 + 
 + object ActorServer { 
 + / * * 
 + * Creates a new Actor Server builder 
 + * @ return 
 + * / 
 + def newBuilder : ActorServerBuilder = ActorServerBuilder ( ) 
 + } 
 + 
 + final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( ) ) extends ActorServerModules { 
 + / * * 
 + * 
 + * @ param config 
 + * @ return a builder with provided default config 
 + * / 
 + def withDefaultConfig ( config : Config ) = this . copy ( defaultConfig = config ) 
 + 
 + / * * 
 + * Starts a server 
 + * @ return 
 + * / 
 + def start ( ) : ActorServer = { 
 SessionMessage . register ( ) 
 CommonSerialization . register ( ) 
 UserProcessor . register ( ) 
 GroupProcessor . register ( ) 
 DialogProcessor . register ( ) 
 
 - val serverConfig = ActorConfig . load ( ) 
 + val serverConfig = ActorConfig . load ( defaultConfig ) 
 
 implicit val system = ActorSystem ( serverConfig . getString ( " actor - system - name " ) , serverConfig ) 
 
 @ @ - 214 , 7 + 231 , 8 @ @ final case class ActorServer ( searchServiceClass : Class [ _ < : SearchService ] = cla 
 
 system . log . debug ( " Registering services " ) 
 RpcApiExtension ( system ) . register ( services ) 
 - RpcApiExtension ( system ) . register ( searchServiceClass ) 
 + 
 + startModules ( system ) 
 
 system . log . debug ( " Starting Actor CLI " ) 
 ActorCliService . start ( system ) 
 @ @ - 225 , 7 + 243 , 7 @ @ final case class ActorServer ( searchServiceClass : Class [ _ < : SearchService ] = cla 
 system . log . debug ( " Starting Http Api " ) 
 HttpApiFrontend . start ( serverConfig ) 
 
 - StartedActorServer ( system ) 
 + ActorServer ( system ) 
 } catch { 
 case e : ConfigException ⇒ 
 system . log . error ( e , " Failed to load server configuration " ) 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServerModules . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServerModules . scala 
 new file mode 100644 
 index 0000000 . . 581b885 
 - - - / dev / null 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServerModules . scala 
 @ @ - 0 , 0 + 1 , 46 @ @ 
 + package im . actor . server 
 + 
 + import akka . actor . ActorSystem 
 + import com . typesafe . config . { ConfigException , ConfigObject , Config } 
 + import im . actor . server . api . rpc . RpcApiExtension 
 + 
 + import scala . collection . JavaConversions . _ 
 + import scala . util . { Failure , Success , Try } 
 + 
 + private [ server ] trait ActorServerModules { 
 + private val RpcServiceClazz = classOf [ im . actor . api . rpc . Service ] 
 + private val AkkaExtensionClazz = classOf [ akka . actor . Extension ] 
 + 
 + protected def startModules ( system : ActorSystem ) : Unit = 
 + system . settings . config . getObject ( " modules " ) foreach { 
 + case ( n , c : ConfigObject ) ⇒ startModule ( system , n , c . toConfig ) 
 + case ( _ , c ) ⇒ 
 + throw new RuntimeException ( s " Module have to be a config but got : $ { c . getClass . getName } " ) 
 + } 
 + 
 + private def startModule ( system : ActorSystem , name : String , config : Config ) : Unit = { 
 + system . log . debug ( " Starting module { } " , name ) 
 + 
 + ( for { 
 + fqcn ← Try ( config . getString ( " rpc " ) ) 
 + clazz ← Try ( Class . forName ( fqcn ) . asSubclass ( RpcServiceClazz ) ) 
 + } yield RpcApiExtension ( system ) . register ( clazz ) ) match { 
 + case Success ( _ ) ⇒ 
 + case Failure ( _ : ConfigException . Missing ) ⇒ 
 + case Failure ( _ : ClassCastException ) ⇒ 
 + throw new RuntimeException ( s " rpc should extend im . actor . api . rpc . Service " ) 
 + case Failure ( e ) ⇒ throw e 
 + } 
 + 
 + ( for { 
 + fqcn ← Try ( config . getString ( " extension " ) ) 
 + clazz ← Try ( Class . forName ( fqcn ) . asSubclass ( AkkaExtensionClazz ) ) 
 + } yield clazz . getDeclaredConstructor ( classOf [ ActorSystem ] ) . newInstance ( system ) ) match { 
 + case Success ( _ ) ⇒ 
 + case Failure ( _ : ConfigException . Missing ) ⇒ 
 + case Failure ( _ : ClassCastException ) ⇒ 
 + throw new RuntimeException ( s " extension should extend akka . actor . Extension " ) 
 + case Failure ( e ) ⇒ throw e 
 + } 
 + } 
 + } 
 \ No newline at end of file
