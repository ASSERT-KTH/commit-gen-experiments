BLEU SCORE: 0.057259987315337754

TEST MSG: fix ( server : groups ) : seq optimization for new updates , remove service messages for inviter in channels
GENERATED MSG: wip ( server ) : push UpdateGroupMembersCountChanged in channel

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index 16c3ff6 . . 16eb72e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 271 , 9 + 271 , 9 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > deliveryId = s " useradded _ $ { groupId } _ $ { cmd . randomId } " < nl > ) < nl > < nl > - / / push service message to invitee and inviter < nl > - _ ← seqUpdExt . broadcastPeopleUpdate ( < nl > - userIds = Set ( cmd . inviterUserId , cmd . inviteeUserId ) , < nl > + / / push service message to invitee < nl > + _ ← seqUpdExt . deliverUserUpdate ( < nl > + userId = cmd . inviteeUserId , < nl > update = serviceMessageUpdate ( < nl > cmd . inviterUserId , < nl > dateMillis , < nl > @ @ - 330 , 7 + 330 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > / * * < nl > * User can join < nl > * • after invite ( was invited by other user previously ) . In this case he already have group on devices < nl > - * • via invite ling . In this case he doesn ' t have group , and we need to deliver it . < nl > + * • via invite link . In this case he doesn ' t have group , and we need to deliver it . < nl > * / < nl > protected def join ( cmd : Join ) : Unit = { < nl > / / user is already a member , and should not complete invitation process < nl > @ @ - 443 , 18 + 443 , 6 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > membersUpdateNew , < nl > deliveryId = s " userjoined _ $ { groupId } _ $ { randomId } " < nl > ) < nl > - < nl > - / / push service message only to inviter < nl > - _ ← seqUpdExt . deliverUserUpdate ( < nl > - userId = inviterUserId , < nl > - update = serviceMessageUpdate ( < nl > - cmd . joiningUserId , < nl > - dateMillis , < nl > - randomId , < nl > - serviceMessage < nl > - ) , < nl > - deliveryTag = Some ( Optimization . GroupV2 ) < nl > - ) < nl > } yield SeqStateDate ( seq , state , dateMillis ) < nl > < nl > val result : Future [ ( SeqStateDate , Vector [ Int ] , Long ) ] = < nl > @ @ - 574 , 21 + 562 , 6 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > membersUpdateNew < nl > ) < nl > < nl > - / / push service message to user , who invited leaving user < nl > - optInviter = state . members . get ( cmd . userId ) map ( _ . inviterUserId ) < nl > - _ ← optInviter map { inviter ⇒ < nl > - seqUpdExt . deliverUserUpdate ( < nl > - userId = cmd . userId , < nl > - update = serviceMessageUpdate ( < nl > - cmd . userId , < nl > - dateMillis , < nl > - cmd . randomId , < nl > - serviceMessage < nl > - ) , < nl > - deliveryTag = Some ( Optimization . GroupV2 ) < nl > - ) < nl > - } getOrElse FastFuture . successful ( ( ) ) < nl > - < nl > / / push left user that he is no longer a member < nl > SeqState ( seq , state ) ← seqUpdExt . deliverClientUpdate ( < nl > userId = cmd . userId , < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / Optimization . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / Optimization . scala < nl > index 6ae868a . . 838c33a 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / Optimization . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / Optimization . scala < nl > @ @ - 44 , 7 + 44 , 14 @ @ object Optimization extends MessageParsing { < nl > UpdateGroupMembersUpdated . header , < nl > UpdateGroupMemberDiff . header , < nl > UpdateGroupMembersCountChanged . header , < nl > - UpdateGroupMemberAdminChanged . header < nl > + UpdateGroupMemberAdminChanged . header , < nl > + UpdateGroupCanEditInfoChanged . header , < nl > + < nl > + UpdateGroupShortNameChanged . header , < nl > + UpdateGroupCanEditUsernameChanged . header , < nl > + UpdateGroupCanEditAdminsChanged . header , < nl > + UpdateGroupCanViewAdminsChanged . header , < nl > + UpdateGroupCanEditAdminSettingsChanged . header < nl > ) < nl > if ( deliveryTag = = GroupV2 ) < nl > emptyUpdate
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index 0a7aa53 . . c3fe238 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 268 , 6 + 268 , 12 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > deliveryId = s " useradded _ $ { groupId } _ $ { cmd . randomId } " < nl > ) < nl > < nl > + / / push UpdateGroupMembersCountChanged to all group members < nl > + _ ← seqUpdExt . broadcastPeopleUpdate ( < nl > + newState . memberIds , < nl > + UpdateGroupMembersCountChanged ( groupId , newState . membersCount ) < nl > + ) < nl > + < nl > / / push service message to invitee < nl > _ ← pushUpdateMessage ( < nl > userId = cmd . inviteeUserId , < nl > @ @ - 447 , 6 + 453 , 12 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > deliveryId = s " userjoined _ $ { groupId } _ $ { randomId } " < nl > ) < nl > < nl > + / / push UpdateGroupMembersCountChanged to all group members < nl > + _ ← seqUpdExt . broadcastPeopleUpdate ( < nl > + newState . memberIds , < nl > + UpdateGroupMembersCountChanged ( groupId , newState . membersCount ) < nl > + ) < nl > + < nl > / / push service message to joining user and return seqState < nl > _ ← pushUpdateMessage ( < nl > userId = cmd . joiningUserId , < nl > @ @ - 563 , 6 + 575 , 12 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > membersUpdateNew < nl > ) < nl > < nl > + / / push UpdateGroupMembersCountChanged to all group members < nl > + _ ← seqUpdExt . broadcastPeopleUpdate ( < nl > + state . memberIds - cmd . userId , < nl > + UpdateGroupMembersCountChanged ( groupId , state . membersCount - 1 ) < nl > + ) < nl > + < nl > / / push service message to left user < nl > _ ← pushUpdateMessage ( < nl > userId = cmd . userId , < nl > @ @ - 689 , 6 + 707 , 12 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > update = membersUpdateNew < nl > ) < nl > < nl > + / / push UpdateGroupMembersCountChanged to all group members < nl > + _ ← seqUpdExt . broadcastPeopleUpdate ( < nl > + newState . memberIds , < nl > + UpdateGroupMembersCountChanged ( groupId , newState . membersCount ) < nl > + ) < nl > + < nl > / / push service message to kicker user < nl > _ ← pushUpdateMessage ( < nl > userId = cmd . kickerUserId , < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > index 62655a9 . . 4fd40f4 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > @ @ - 119 , 8 + 119 , 8 @ @ trait GroupQueryHandlers { < nl > ownerUserId = state . creatorUserId , < nl > createDate = extractCreatedAtMillis ( state ) , < nl > ext = None , < nl > - canViewMembers = Some ( state . canViewMembers ( clientUserId ) ) , / / TODO : revisit < nl > - canInvitePeople = Some ( state . canInvitePeople ( clientUserId ) ) , / / TODO : revisit < nl > + canViewMembers = Some ( state . canViewMembers ( clientUserId ) ) , < nl > + canInvitePeople = Some ( state . canInvitePeople ( clientUserId ) ) , < nl > isSharedHistory = Some ( state . isHistoryShared ) , < nl > isAsyncMembers = Some ( state . members . size > 100 ) , < nl > members = membersAndCount ( state , clientUserId ) . _ 1 < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > index ac29c3c . . d6d4dbf 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > @ @ - 96 , 7 + 96 , 7 @ @ private [ group ] final case class GroupState ( < nl > / / in case of general / public can view members if user is member < nl > / / in case of channel can view members only if clientUserId is admin < nl > def canViewMembers ( clientUserId : Int ) = < nl > - ( ( typ . isGeneral | | typ . isPublic ) | | isAdmin ( clientUserId ) ) & & isMember ( clientUserId ) < nl > + isMember ( clientUserId ) & & ( ( typ . isGeneral | | typ . isPublic ) | | ( typ . isChannel & & isAdmin ( clientUserId ) ) ) < nl > < nl > / * * < nl > * For now , all members can invite other users to group < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala < nl > index 84b300d . . 5d070d5 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala < nl > @ @ - 72 , 11 + 72 , 11 @ @ final class GroupsServiceSpec < nl > < nl > it should " set ' about ' to empty when None comes " in e20 < nl > < nl > - it should " forbid to set invalid ' about ' field ( empty , or longer than 255 characters ) " in e21 < nl > + it should " forbid to set ' about ' field longer than 255 characters " in e21 < nl > < nl > " EditGroupTopic " should " allow any group member to change topic " in e22 < nl > < nl > - it should " forbid to set invalid topic ( empty , or longer than 255 characters ) " in e23 < nl > + it should " forbid to set topic longer than 255 characters " in e23 < nl > < nl > it should " set topic to empty when None comes " in e24 < nl > < nl > @ @ - 794 , 11 + 794 , 6 @ @ final class GroupsServiceSpec < nl > resp shouldEqual Error ( GroupRpcErrors . AboutTooLong ) < nl > } < nl > < nl > - val emptyAbout = " " < nl > - whenReady ( service . handleEditGroupAbout ( groupOutPeer , 1L , Some ( emptyAbout ) , Vector . empty ) ) { resp ⇒ < nl > - resp shouldEqual Error ( GroupRpcErrors . AboutTooLong ) < nl > - } < nl > - < nl > val groupAbout = groupExt . getApiFullStruct ( groupOutPeer . groupId , user . id ) . futureValue . about < nl > groupAbout shouldEqual None < nl > } < nl > @ @ - 845 , 11 + 840 , 6 @ @ final class GroupsServiceSpec < nl > resp shouldEqual Error ( GroupRpcErrors . TopicTooLong ) < nl > } < nl > < nl > - val emptyTopic = " " < nl > - whenReady ( service . handleEditGroupTopic ( groupOutPeer , 2L , Some ( emptyTopic ) , Vector . empty ) ) { resp ⇒ < nl > - resp shouldEqual Error ( GroupRpcErrors . TopicTooLong ) < nl > - } < nl > - < nl > val groupTopic = groupExt . getApiFullStruct ( groupOutPeer . groupId , user . id ) . futureValue . theme < nl > groupTopic shouldEqual None < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index 16c3ff6 . . 16eb72e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 271 , 9 + 271 , 9 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 deliveryId = s " useradded _ $ { groupId } _ $ { cmd . randomId } " 
 ) 
 
 - / / push service message to invitee and inviter 
 - _ ← seqUpdExt . broadcastPeopleUpdate ( 
 - userIds = Set ( cmd . inviterUserId , cmd . inviteeUserId ) , 
 + / / push service message to invitee 
 + _ ← seqUpdExt . deliverUserUpdate ( 
 + userId = cmd . inviteeUserId , 
 update = serviceMessageUpdate ( 
 cmd . inviterUserId , 
 dateMillis , 
 @ @ - 330 , 7 + 330 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 / * * 
 * User can join 
 * • after invite ( was invited by other user previously ) . In this case he already have group on devices 
 - * • via invite ling . In this case he doesn ' t have group , and we need to deliver it . 
 + * • via invite link . In this case he doesn ' t have group , and we need to deliver it . 
 * / 
 protected def join ( cmd : Join ) : Unit = { 
 / / user is already a member , and should not complete invitation process 
 @ @ - 443 , 18 + 443 , 6 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 membersUpdateNew , 
 deliveryId = s " userjoined _ $ { groupId } _ $ { randomId } " 
 ) 
 - 
 - / / push service message only to inviter 
 - _ ← seqUpdExt . deliverUserUpdate ( 
 - userId = inviterUserId , 
 - update = serviceMessageUpdate ( 
 - cmd . joiningUserId , 
 - dateMillis , 
 - randomId , 
 - serviceMessage 
 - ) , 
 - deliveryTag = Some ( Optimization . GroupV2 ) 
 - ) 
 } yield SeqStateDate ( seq , state , dateMillis ) 
 
 val result : Future [ ( SeqStateDate , Vector [ Int ] , Long ) ] = 
 @ @ - 574 , 21 + 562 , 6 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 membersUpdateNew 
 ) 
 
 - / / push service message to user , who invited leaving user 
 - optInviter = state . members . get ( cmd . userId ) map ( _ . inviterUserId ) 
 - _ ← optInviter map { inviter ⇒ 
 - seqUpdExt . deliverUserUpdate ( 
 - userId = cmd . userId , 
 - update = serviceMessageUpdate ( 
 - cmd . userId , 
 - dateMillis , 
 - cmd . randomId , 
 - serviceMessage 
 - ) , 
 - deliveryTag = Some ( Optimization . GroupV2 ) 
 - ) 
 - } getOrElse FastFuture . successful ( ( ) ) 
 - 
 / / push left user that he is no longer a member 
 SeqState ( seq , state ) ← seqUpdExt . deliverClientUpdate ( 
 userId = cmd . userId , 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / Optimization . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / Optimization . scala 
 index 6ae868a . . 838c33a 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / Optimization . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / Optimization . scala 
 @ @ - 44 , 7 + 44 , 14 @ @ object Optimization extends MessageParsing { 
 UpdateGroupMembersUpdated . header , 
 UpdateGroupMemberDiff . header , 
 UpdateGroupMembersCountChanged . header , 
 - UpdateGroupMemberAdminChanged . header 
 + UpdateGroupMemberAdminChanged . header , 
 + UpdateGroupCanEditInfoChanged . header , 
 + 
 + UpdateGroupShortNameChanged . header , 
 + UpdateGroupCanEditUsernameChanged . header , 
 + UpdateGroupCanEditAdminsChanged . header , 
 + UpdateGroupCanViewAdminsChanged . header , 
 + UpdateGroupCanEditAdminSettingsChanged . header 
 ) 
 if ( deliveryTag = = GroupV2 ) 
 emptyUpdate

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index 0a7aa53 . . c3fe238 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 268 , 6 + 268 , 12 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 deliveryId = s " useradded _ $ { groupId } _ $ { cmd . randomId } " 
 ) 
 
 + / / push UpdateGroupMembersCountChanged to all group members 
 + _ ← seqUpdExt . broadcastPeopleUpdate ( 
 + newState . memberIds , 
 + UpdateGroupMembersCountChanged ( groupId , newState . membersCount ) 
 + ) 
 + 
 / / push service message to invitee 
 _ ← pushUpdateMessage ( 
 userId = cmd . inviteeUserId , 
 @ @ - 447 , 6 + 453 , 12 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 deliveryId = s " userjoined _ $ { groupId } _ $ { randomId } " 
 ) 
 
 + / / push UpdateGroupMembersCountChanged to all group members 
 + _ ← seqUpdExt . broadcastPeopleUpdate ( 
 + newState . memberIds , 
 + UpdateGroupMembersCountChanged ( groupId , newState . membersCount ) 
 + ) 
 + 
 / / push service message to joining user and return seqState 
 _ ← pushUpdateMessage ( 
 userId = cmd . joiningUserId , 
 @ @ - 563 , 6 + 575 , 12 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 membersUpdateNew 
 ) 
 
 + / / push UpdateGroupMembersCountChanged to all group members 
 + _ ← seqUpdExt . broadcastPeopleUpdate ( 
 + state . memberIds - cmd . userId , 
 + UpdateGroupMembersCountChanged ( groupId , state . membersCount - 1 ) 
 + ) 
 + 
 / / push service message to left user 
 _ ← pushUpdateMessage ( 
 userId = cmd . userId , 
 @ @ - 689 , 6 + 707 , 12 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 update = membersUpdateNew 
 ) 
 
 + / / push UpdateGroupMembersCountChanged to all group members 
 + _ ← seqUpdExt . broadcastPeopleUpdate ( 
 + newState . memberIds , 
 + UpdateGroupMembersCountChanged ( groupId , newState . membersCount ) 
 + ) 
 + 
 / / push service message to kicker user 
 _ ← pushUpdateMessage ( 
 userId = cmd . kickerUserId , 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 index 62655a9 . . 4fd40f4 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 @ @ - 119 , 8 + 119 , 8 @ @ trait GroupQueryHandlers { 
 ownerUserId = state . creatorUserId , 
 createDate = extractCreatedAtMillis ( state ) , 
 ext = None , 
 - canViewMembers = Some ( state . canViewMembers ( clientUserId ) ) , / / TODO : revisit 
 - canInvitePeople = Some ( state . canInvitePeople ( clientUserId ) ) , / / TODO : revisit 
 + canViewMembers = Some ( state . canViewMembers ( clientUserId ) ) , 
 + canInvitePeople = Some ( state . canInvitePeople ( clientUserId ) ) , 
 isSharedHistory = Some ( state . isHistoryShared ) , 
 isAsyncMembers = Some ( state . members . size > 100 ) , 
 members = membersAndCount ( state , clientUserId ) . _ 1 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 index ac29c3c . . d6d4dbf 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 @ @ - 96 , 7 + 96 , 7 @ @ private [ group ] final case class GroupState ( 
 / / in case of general / public can view members if user is member 
 / / in case of channel can view members only if clientUserId is admin 
 def canViewMembers ( clientUserId : Int ) = 
 - ( ( typ . isGeneral | | typ . isPublic ) | | isAdmin ( clientUserId ) ) & & isMember ( clientUserId ) 
 + isMember ( clientUserId ) & & ( ( typ . isGeneral | | typ . isPublic ) | | ( typ . isChannel & & isAdmin ( clientUserId ) ) ) 
 
 / * * 
 * For now , all members can invite other users to group 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala 
 index 84b300d . . 5d070d5 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala 
 @ @ - 72 , 11 + 72 , 11 @ @ final class GroupsServiceSpec 
 
 it should " set ' about ' to empty when None comes " in e20 
 
 - it should " forbid to set invalid ' about ' field ( empty , or longer than 255 characters ) " in e21 
 + it should " forbid to set ' about ' field longer than 255 characters " in e21 
 
 " EditGroupTopic " should " allow any group member to change topic " in e22 
 
 - it should " forbid to set invalid topic ( empty , or longer than 255 characters ) " in e23 
 + it should " forbid to set topic longer than 255 characters " in e23 
 
 it should " set topic to empty when None comes " in e24 
 
 @ @ - 794 , 11 + 794 , 6 @ @ final class GroupsServiceSpec 
 resp shouldEqual Error ( GroupRpcErrors . AboutTooLong ) 
 } 
 
 - val emptyAbout = " " 
 - whenReady ( service . handleEditGroupAbout ( groupOutPeer , 1L , Some ( emptyAbout ) , Vector . empty ) ) { resp ⇒ 
 - resp shouldEqual Error ( GroupRpcErrors . AboutTooLong ) 
 - } 
 - 
 val groupAbout = groupExt . getApiFullStruct ( groupOutPeer . groupId , user . id ) . futureValue . about 
 groupAbout shouldEqual None 
 } 
 @ @ - 845 , 11 + 840 , 6 @ @ final class GroupsServiceSpec 
 resp shouldEqual Error ( GroupRpcErrors . TopicTooLong ) 
 } 
 
 - val emptyTopic = " " 
 - whenReady ( service . handleEditGroupTopic ( groupOutPeer , 2L , Some ( emptyTopic ) , Vector . empty ) ) { resp ⇒ 
 - resp shouldEqual Error ( GroupRpcErrors . TopicTooLong ) 
 - } 
 - 
 val groupTopic = groupExt . getApiFullStruct ( groupOutPeer . groupId , user . id ) . futureValue . theme 
 groupTopic shouldEqual None 
 }
