BLEU SCORE: 0.345720784641941

TEST MSG: fix ( iOS ) : Fixing iOS Audio
GENERATED MSG: feat ( iOS ) : Location preview cell

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index e39318a . . 96ba804 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 8 , 6 + 8 , 8 @ @ < nl > < nl > / * Begin PBXBuildFile section * / < nl > 	 	 06129AA61C8359FB0099286B / * CocoaLifecycleRuntime . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06129AA51C8359FB0099286B / * CocoaLifecycleRuntime . swift * / ; } ; < nl > + 	 	 06129AA91C8394700099286B / * AAAudioManager . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06129AA81C8394700099286B / * AAAudioManager . swift * / ; } ; < nl > + 	 	 06129AAB1C83B80B0099286B / * AAAudioRouter . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06129AAA1C83B80A0099286B / * AAAudioRouter . swift * / ; } ; < nl > 	 	 06230F411BC95BD200A4807B / * RMPhoneFormat . m in Sources * / = { isa = PBXBuildFile ; fileRef = 06230F3F1BC95BD200A4807B / * RMPhoneFormat . m * / ; } ; < nl > 	 	 06230F421BC95BD200A4807B / * RMPhoneFormat . h in Headers * / = { isa = PBXBuildFile ; fileRef = 06230F401BC95BD200A4807B / * RMPhoneFormat . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; < nl > 	 	 06230F451BC95C0E00A4807B / * ABPhoneFieldCodes . txt in Resources * / = { isa = PBXBuildFile ; fileRef = 06230F431BC95C0E00A4807B / * ABPhoneFieldCodes . txt * / ; } ; < nl > @ @ - 304 , 6 + 306 , 8 @ @ < nl > < nl > / * Begin PBXFileReference section * / < nl > 	 	 06129AA51C8359FB0099286B / * CocoaLifecycleRuntime . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = CocoaLifecycleRuntime . swift ; sourceTree = " < group > " ; } ; < nl > + 	 	 06129AA81C8394700099286B / * AAAudioManager . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAudioManager . swift ; sourceTree = " < group > " ; } ; < nl > + 	 	 06129AAA1C83B80A0099286B / * AAAudioRouter . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAudioRouter . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06230F3F1BC95BD200A4807B / * RMPhoneFormat . m * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . objc ; path = RMPhoneFormat . m ; sourceTree = " < group > " ; } ; < nl > 	 	 06230F401BC95BD200A4807B / * RMPhoneFormat . h * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . h ; path = RMPhoneFormat . h ; sourceTree = " < group > " ; } ; < nl > 	 	 06230F431BC95C0E00A4807B / * ABPhoneFieldCodes . txt * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = text ; path = ABPhoneFieldCodes . txt ; sourceTree = " < group > " ; } ; < nl > @ @ - 736 , 6 + 740 , 8 @ @ < nl > 	 	 	 children = ( < nl > 	 	 	 	 15D35F721C201B5300E3717A / * Categories * / , < nl > 	 	 	 	 152AA8901C29887A0030DEEE / * Extensions * / , < nl > + 	 	 	 	 06129AA81C8394700099286B / * AAAudioManager . swift * / , < nl > + 	 	 	 	 06129AAA1C83B80A0099286B / * AAAudioRouter . swift * / , < nl > 	 	 	 	 066A53311BC534F5000E606E / * AAFileTypes . swift * / , < nl > 	 	 	 	 066A515A1BC4C178000E606E / * AAHashMap . swift * / , < nl > 	 	 	 	 066A51581BC4C14A000E606E / * AASwiftlyLRU . swift * / , < nl > @ @ - 1824 , 6 + 1830 , 7 @ @ < nl > 	 	 	 	 066A52F31BC52B02000E606E / * AASettingsWallpapper . swift in Sources * / , < nl > 	 	 	 	 066A53041BC53177000E606E / * AAContactsViewController . swift in Sources * / , < nl > 	 	 	 	 066A51801BC4C373000E606E / * FMDatabasePool . m in Sources * / , < nl > + 	 	 	 	 06129AA91C8394700099286B / * AAAudioManager . swift in Sources * / , < nl > 	 	 	 	 066A518F1BC4C383000E606E / * iOSPhoneBookProvider . swift in Sources * / , < nl > 	 	 	 	 066A530B1BC531A2000E606E / * AAUserViewController . swift in Sources * / , < nl > 	 	 	 	 06E3C5B81C80EE21004776CD / * AACircleButton . swift in Sources * / , < nl > @ @ - 1861 , 6 + 1868 , 7 @ @ < nl > 	 	 	 	 066A52281BC4EEAC000E606E / * AAManagedTableController . swift in Sources * / , < nl > 	 	 	 	 065975541BC7DF5100B8C7DF / * CocoaAssetsRuntime . swift in Sources * / , < nl > 	 	 	 	 06E7B2521C1345E70090660C / * AAMapPinPointView . swift in Sources * / , < nl > + 	 	 	 	 06129AAB1C83B80B0099286B / * AAAudioRouter . swift in Sources * / , < nl > 	 	 	 	 066A53121BC53317000E606E / * AAPhotoPreviewController . swift in Sources * / , < nl > 	 	 	 	 066A52391BC4EEBA000E606E / * AAEditCell . swift in Sources * / , < nl > 	 	 	 	 066A526D1BC50E8B000E606E / * AAAuthCountryCell . swift in Sources * / , < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > index ff60c67 . . 74773a5 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > @ @ - 22 , 6 + 22 , 7 @ @ class CocoaWebRTCRuntime : NSObject , ARWebRTCRuntime { < nl > } < nl > < nl > func getUserAudio ( ) - > ARPromise { < nl > + print ( " ? ? getUserAudio " ) < nl > let audio = peerConnectionFactory . audioTrackWithID ( " audio0 " ) < nl > let mediaStream = peerConnectionFactory . mediaStreamWithLabel ( " ARDAMSa0 " ) < nl > mediaStream . addAudioTrack ( audio ) < nl > @ @ - 160 , 37 + 161 , 37 @ @ class CocoaWebRTCPeerConnection : NSObject , ARWebRTCPeerConnection , RTCPeerConnec < nl > / / < nl > < nl > func peerConnection ( peerConnection : RTCPeerConnection ! , signalingStateChanged stateChanged : RTCSignalingState ) { < nl > - print ( " signalingStateChanged \ ( stateChanged ) " ) < nl > + print ( " ? ? signalingStateChanged \ ( stateChanged ) " ) < nl > } < nl > < nl > func peerConnection ( peerConnection : RTCPeerConnection ! , addedStream stream : RTCMediaStream ! ) { < nl > - print ( " onStreamAdded " ) < nl > + print ( " ? ? onStreamAdded " ) < nl > for c in callbacks { < nl > c . onStreamAdded ( MediaStream ( stream : stream ! ) ) < nl > } < nl > } < nl > < nl > func peerConnection ( peerConnection : RTCPeerConnection ! , removedStream stream : RTCMediaStream ! ) { < nl > - print ( " onStreamRemoved " ) < nl > + print ( " ? ? onStreamRemoved " ) < nl > for c in callbacks { < nl > c . onStreamRemoved ( MediaStream ( stream : stream ! ) ) < nl > } < nl > } < nl > < nl > func peerConnectionOnRenegotiationNeeded ( peerConnection : RTCPeerConnection ! ) { < nl > - print ( " onRenegotiationNeeded " ) < nl > + print ( " ? ? onRenegotiationNeeded " ) < nl > } < nl > < nl > func peerConnection ( peerConnection : RTCPeerConnection ! , iceConnectionChanged newState : RTCICEConnectionState ) { < nl > - print ( " iceConnectionChanged \ ( newState ) " ) < nl > + print ( " ? ? iceConnectionChanged \ ( newState ) " ) < nl > } < nl > < nl > func peerConnection ( peerConnection : RTCPeerConnection ! , iceGatheringChanged newState : RTCICEGatheringState ) { < nl > - print ( " iceGatheringChanged \ ( newState ) " ) < nl > + print ( " ? ? iceGatheringChanged \ ( newState ) " ) < nl > } < nl > < nl > func peerConnection ( peerConnection : RTCPeerConnection ! , gotICECandidate candidate : RTCICECandidate ! ) { < nl > - print ( " gotICECandidate \ ( candidate ) " ) < nl > + print ( " ? ? gotICECandidate \ ( candidate ) " ) < nl > for c in callbacks { < nl > c . onCandidateWithLabel ( jint ( candidate . sdpMLineIndex ) , withId : candidate . sdpMid , withCandidate : candidate . sdp ) < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSCallsProvider . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSCallsProvider . swift < nl > index c1a5fd1 . . f8e3bfa 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSCallsProvider . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSCallsProvider . swift < nl > @ @ - 12 , 94 + 12 , 39 @ @ class iOSCallsProvider : NSObject , ACCallsProvider { < nl > var latestNotification : UILocalNotification ! < nl > < nl > func onCallStartWithCallId ( callId : jlong ) { < nl > + AAAudioManager . sharedAudio ( ) . callStart ( Actor . getCallWithCallId ( callId ) . isOutgoing ) < nl > dispatchOnUi ( ) { < nl > - < nl > - if ( ! Actor . getCallWithCallId ( callId ) . isOutgoing ) { < nl > - self . startRingtone ( ) < nl > - } else { < nl > - self . stopRingtone ( ) < nl > - } < nl > - < nl > let rootController = ActorSDK . sharedActor ( ) . bindedToWindow . rootViewController ! < nl > rootController . presentViewController ( AACallViewController ( callId : callId ) , animated : true , completion : nil ) < nl > } < nl > } < nl > < nl > func onCallAnsweredWithCallId ( callId : jlong ) { < nl > - dispatchOnUi ( ) { < nl > - self . stopRingtone ( ) < nl > - } < nl > + AAAudioManager . sharedAudio ( ) . callAnswered ( ) < nl > } < nl > < nl > func onCallEndWithCallId ( callId : jlong ) { < nl > - dispatchOnUi ( ) { < nl > - self . stopRingtone ( ) < nl > - } < nl > - } < nl > - < nl > - private func startRingtone ( ) { < nl > - < nl > - do { < nl > - try AVAudioSession . sharedInstance ( ) . setCategory ( AVAudioSessionCategorySoloAmbient , withOptions : < nl > - AVAudioSessionCategoryOptions . MixWithOthers ) < nl > - try AVAudioSession . sharedInstance ( ) . setMode ( AVAudioSessionModeDefault ) < nl > - try AVAudioSession . sharedInstance ( ) . overrideOutputAudioPort ( AVAudioSessionPortOverride . Speaker ) < nl > - try AVAudioSession . sharedInstance ( ) . setActive ( true ) < nl > - } catch let error as NSError { < nl > - print ( " Error : \ ( error . description ) " ) < nl > - } < nl > - < nl > - if ( self . ringtonePlayer = = nil ) { < nl > - do { < nl > - self . ringtonePlayer = try AVAudioPlayer ( contentsOfURL : NSURL ( fileURLWithPath : NSBundle . framework . pathForResource ( " ringtone " , ofType : " m4a " ) ! ) ) < nl > - self . ringtonePlayer . prepareToPlay ( ) < nl > - self . ringtonePlayer . numberOfLoops = - 1 < nl > - } catch { < nl > - < nl > - } < nl > - } < nl > - < nl > - AudioServicesPlaySystemSound ( 1352 ) < nl > - < nl > - self . ringtonePlayer . play ( ) < nl > - < nl > - if ( self . latestNotification ! = nil ) { < nl > - UIApplication . sharedApplication ( ) . cancelLocalNotification ( self . latestNotification ) < nl > - self . latestNotification = nil < nl > - } < nl > - self . latestNotification = UILocalNotification ( ) < nl > - self . latestNotification . alertBody = " Answer it ! " < nl > - UIApplication . sharedApplication ( ) . presentLocalNotificationNow ( self . latestNotification ) < nl > - } < nl > - < nl > - private func stopRingtone ( ) { < nl > - if ringtonePlayer ! = nil { < nl > - ringtonePlayer . pause ( ) < nl > - } < nl > - if ( self . latestNotification ! = nil ) { < nl > - UIApplication . sharedApplication ( ) . cancelLocalNotification ( self . latestNotification ) < nl > - self . latestNotification = nil < nl > - } < nl > + AAAudioManager . sharedAudio ( ) . callEnd ( ) < nl > } < nl > < nl > func startOutgoingBeep ( ) { < nl > - do { < nl > - try AVAudioSession . sharedInstance ( ) . setCategory ( AVAudioSessionCategoryPlayAndRecord , withOptions : < nl > - AVAudioSessionCategoryOptions . AllowBluetooth ) < nl > - try AVAudioSession . sharedInstance ( ) . setMode ( AVAudioSessionModeVoiceChat ) < nl > - try AVAudioSession . sharedInstance ( ) . overrideOutputAudioPort ( AVAudioSessionPortOverride . None ) < nl > - try AVAudioSession . sharedInstance ( ) . setActive ( true ) < nl > - } catch let error as NSError { < nl > - print ( " Error : \ ( error . description ) " ) < nl > - } < nl > - < nl > + / / do { < nl > + / / try AVAudioSession . sharedInstance ( ) . setCategory ( AVAudioSessionCategoryPlayAndRecord , withOptions : < nl > + / / AVAudioSessionCategoryOptions . AllowBluetooth ) < nl > + / / try AVAudioSession . sharedInstance ( ) . setMode ( AVAudioSessionModeVoiceChat ) < nl > + / / try AVAudioSession . sharedInstance ( ) . overrideOutputAudioPort ( AVAudioSessionPortOverride . None ) < nl > + / / try AVAudioSession . sharedInstance ( ) . setActive ( true ) < nl > + / / } catch let error as NSError { < nl > + / / print ( " Error : \ ( error . description ) " ) < nl > + / / } < nl > + / / < nl > if ( beepPlayer = = nil ) { < nl > do { < nl > beepPlayer = try AVAudioPlayer ( contentsOfURL : NSURL ( fileURLWithPath : NSBundle . framework . pathForResource ( " tone " , ofType : " m4a " ) ! ) ) < nl > beepPlayer . prepareToPlay ( ) < nl > beepPlayer . numberOfLoops = - 1 < nl > - } catch { < nl > - < nl > + } catch let error as NSError { < nl > + print ( " Error : \ ( error . description ) " ) < nl > } < nl > } < nl > < nl > @ @ - 109 , 13 + 54 , 13 @ @ class iOSCallsProvider : NSObject , ACCallsProvider { < nl > func stopOutgoingBeep ( ) { < nl > beepPlayer . stop ( ) < nl > < nl > - do { < nl > - try AVAudioSession . sharedInstance ( ) . setCategory ( AVAudioSessionCategoryPlayAndRecord ) < nl > - try AVAudioSession . sharedInstance ( ) . setMode ( AVAudioSessionModeVoiceChat ) < nl > - try AVAudioSession . sharedInstance ( ) . overrideOutputAudioPort ( AVAudioSessionPortOverride . None ) < nl > - try AVAudioSession . sharedInstance ( ) . setActive ( true ) < nl > - } catch let error as NSError { < nl > - print ( " Error : \ ( error . description ) " ) < nl > - } < nl > + / / do { < nl > + / / try AVAudioSession . sharedInstance ( ) . setCategory ( AVAudioSessionCategoryPlayAndRecord ) < nl > + / / try AVAudioSession . sharedInstance ( ) . setMode ( AVAudioSessionModeVoiceChat ) < nl > + / / try AVAudioSession . sharedInstance ( ) . overrideOutputAudioPort ( AVAudioSessionPortOverride . None ) < nl > + / / try AVAudioSession . sharedInstance ( ) . setActive ( true ) < nl > + / / } catch let error as NSError { < nl > + / / print ( " Error : \ ( error . description ) " ) < nl > + / / } < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > index 7b136d7 . . e31421e 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > @ @ - 687 , 7 + 687 , 7 @ @ import PushKit < nl > / / This event is fired when user press power button and lock screeen . < nl > / / In iOS power button also cancel ongoint call . < nl > / / < nl > - messenger . probablyEndCall ( ) < nl > + / / messenger . probablyEndCall ( ) < nl > < nl > checkAppState ( ) < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > index c9977a6 . . b275fbd 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > @ @ - 121 , 7 + 121 , 7 @ @ public class AAGroupViewController : AAContentTableController { < nl > < nl > / / Calls < nl > if ( ActorSDK . sharedActor ( ) . enableCalls ) { < nl > - let members = ( group . members . get ( ) as ! JavaUtilArrayList ) . size ( ) < nl > + let members = ( group . members . get ( ) as ! JavaUtilHashSet ) . size ( ) < nl > if ( members < = 20 ) { / / Temporary limitation < nl > section { ( s ) - > ( ) in < nl > s . action ( " CallsStartGroupAudio " ) { ( r ) - > ( ) in < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioManager . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioManager . swift < nl > new file mode 100644 < nl > index 0000000 . . 4d78e38 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioManager . swift < nl > @ @ - 0 , 0 + 1 , 87 @ @ < nl > + / / < nl > + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > < nl > + / / < nl > + < nl > + import Foundation < nl > + import AVFoundation < nl > + < nl > + public class AAAudioManager : NSObject , AVAudioPlayerDelegate { < nl > + < nl > + private static let sharedManager = AAAudioManager ( ) < nl > + < nl > + public static func sharedAudio ( ) - > AAAudioManager { < nl > + return sharedManager < nl > + } < nl > + < nl > + private var isCalling = false < nl > + private var isCallStarted = false < nl > + private var ringtonePlaying = false < nl > + private var ringtonePlayer : AVAudioPlayer ! = nil < nl > + private var audioRouter = AAAudioRouter ( ) < nl > + < nl > + public override init ( ) { < nl > + super . init ( ) < nl > + } < nl > + < nl > + public func callStart ( isOut : Bool ) { < nl > + audioRouter . category = AVAudioSessionCategoryPlayAndRecord < nl > + if ! isOut { < nl > + audioRouter . mode = AVAudioSessionModeDefault < nl > + audioRouter . currentRoute = . Speaker < nl > + ringtoneStart ( ) < nl > + } else { < nl > + audioRouter . mode = AVAudioSessionModeVoiceChat < nl > + audioRouter . currentRoute = . Receiver < nl > + } < nl > + } < nl > + < nl > + public func callAnswered ( ) { < nl > + ringtoneEnd ( ) < nl > + audioRouter . mode = AVAudioSessionModeVoiceChat < nl > + audioRouter . currentRoute = . Receiver < nl > + } < nl > + < nl > + public func callEnd ( ) { < nl > + ringtoneEnd ( ) < nl > + audioRouter . category = AVAudioSessionCategorySoloAmbient < nl > + audioRouter . mode = AVAudioSessionModeDefault < nl > + audioRouter . currentRoute = . Receiver < nl > + } < nl > + < nl > + < nl > + private func ringtoneStart ( ) { < nl > + if ringtonePlaying { < nl > + return < nl > + } < nl > + < nl > + ringtonePlaying = true < nl > + < nl > + do { < nl > + self . ringtonePlayer = try AVAudioPlayer ( contentsOfURL : NSURL ( fileURLWithPath : NSBundle . framework . pathForResource ( " ringtone " , ofType : " m4a " ) ! ) ) < nl > + self . ringtonePlayer . delegate = self < nl > + self . ringtonePlayer . numberOfLoops = - 1 < nl > + self . ringtonePlayer . volume = 1 . 0 < nl > + self . ringtonePlayer . play ( ) < nl > + } catch let error as NSError { < nl > + print ( " Unable to start Ringtone : \ ( error . description ) " ) < nl > + self . ringtonePlayer = nil < nl > + } < nl > + } < nl > + < nl > + private func ringtoneEnd ( ) { < nl > + if ! ringtonePlaying { < nl > + return < nl > + } < nl > + < nl > + if ringtonePlayer ! = nil { < nl > + ringtonePlayer . stop ( ) < nl > + ringtonePlayer = nil < nl > + } < nl > + < nl > + ringtonePlaying = false < nl > + } < nl > + } < nl > + < nl > + < nl > + < nl > + < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioRouter . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioRouter . swift < nl > new file mode 100644 < nl > index 0000000 . . 4103c61 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioRouter . swift < nl > @ @ - 0 , 0 + 1 , 131 @ @ < nl > + / / < nl > + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > < nl > + / / < nl > + < nl > + import Foundation < nl > + import AVFoundation < nl > + < nl > + public enum Route { < nl > + case Speaker < nl > + case Receiver < nl > + } < nl > + < nl > + public class AAAudioRouter { < nl > + < nl > + public var currentRoute = Route . Speaker { < nl > + didSet ( v ) { < nl > + fixSession ( ) < nl > + } < nl > + } < nl > + < nl > + public var mode = AVAudioSessionModeDefault { < nl > + didSet ( v ) { < nl > + fixSession ( ) < nl > + } < nl > + } < nl > + < nl > + public var category = AVAudioSessionCategoryPlayAndRecord { < nl > + didSet ( v ) { < nl > + fixSession ( ) < nl > + } < nl > + } < nl > + < nl > + public init ( ) { < nl > + NSNotificationCenter . defaultCenter ( ) . addObserverForName ( AVAudioSessionRouteChangeNotification , < nl > + object : nil , queue : NSOperationQueue . mainQueue ( ) ) { ( note ) - > Void in < nl > + let notification : NSNotification = note as NSNotification < nl > + if let info = notification . userInfo { < nl > + let numberReason : NSNumber = info [ AVAudioSessionRouteChangeReasonKey ] as ! NSNumber < nl > + if let reason = AVAudioSessionRouteChangeReason ( rawValue : UInt ( numberReason . integerValue ) ) { < nl > + self . routeChanged ( reason ) < nl > + } < nl > + } < nl > + } < nl > + fixSession ( ) < nl > + } < nl > + < nl > + func isHeadsetPluggedIn ( ) - > Bool { < nl > + let route : AVAudioSessionRouteDescription = AVAudioSession . sharedInstance ( ) . currentRoute < nl > + for port in route . outputs { < nl > + let portDescription : AVAudioSessionPortDescription = port as AVAudioSessionPortDescription < nl > + if portDescription . portType = = AVAudioSessionPortHeadphones | | portDescription . portType = = AVAudioSessionPortHeadsetMic { < nl > + return true < nl > + } < nl > + } < nl > + return false < nl > + } < nl > + < nl > + private func routeChanged ( reason : AVAudioSessionRouteChangeReason ) { < nl > + < nl > + / / switch ( reason ) { < nl > + / / case . NewDeviceAvailable : < nl > + / / print ( " Reason : device add " ) < nl > + / / break < nl > + / / case . OldDeviceUnavailable : < nl > + / / print ( " Reason : device remove " ) < nl > + / / break < nl > + / / case . CategoryChange : < nl > + / / print ( " Reason : category change to \ ( AVAudioSession . sharedInstance ( ) . category ) " ) < nl > + / / break < nl > + / / case . Override : < nl > + / / print ( " Reason : override to \ ( AVAudioSession . sharedInstance ( ) . currentRoute ) " ) < nl > + / / break < nl > + / / case . RouteConfigurationChange : < nl > + / / print ( " Reason : route config change to \ ( AVAudioSession . sharedInstance ( ) . currentRoute ) " ) < nl > + / / break < nl > + / / case . Unknown : < nl > + / / print ( " Reason : unknown " ) < nl > + / / break < nl > + / / case . WakeFromSleep : < nl > + / / print ( " Reason : wake from sleep " ) < nl > + / / break < nl > + / / default : < nl > + / / print ( " Reason : default " ) < nl > + / / break < nl > + / / } < nl > + < nl > + if reason = = . NewDeviceAvailable { < nl > + if isHeadsetPluggedIn ( ) { < nl > + self . currentRoute = . Receiver < nl > + return < nl > + } < nl > + } else if reason = = . OldDeviceUnavailable { < nl > + if ! isHeadsetPluggedIn ( ) { < nl > + self . currentRoute = . Receiver < nl > + return < nl > + } < nl > + } < nl > + < nl > + if reason = = . Override | | reason = = . RouteConfigurationChange { < nl > + fixSession ( ) < nl > + } < nl > + } < nl > + < nl > + private func fixSession ( ) { < nl > + let session = AVAudioSession . sharedInstance ( ) < nl > + do { < nl > + < nl > + if session . category ! = category { < nl > + try session . setCategory ( category ) < nl > + } < nl > + if session . mode ! = mode { < nl > + try AVAudioSession . sharedInstance ( ) . setMode ( mode ) < nl > + } < nl > + < nl > + if let route : AVAudioSessionRouteDescription = session . currentRoute { < nl > + for port in route . outputs { < nl > + let portDescription : AVAudioSessionPortDescription = port as AVAudioSessionPortDescription < nl > + if ( self . currentRoute = = . Receiver & & portDescription . portType ! = AVAudioSessionPortBuiltInReceiver ) { < nl > + try session . overrideOutputAudioPort ( . None ) < nl > + } else if ( self . currentRoute = = . Speaker & & portDescription . portType ! = AVAudioSessionPortBuiltInSpeaker ) { < nl > + try session . overrideOutputAudioPort ( AVAudioSessionPortOverride . Speaker ) < nl > + } < nl > + } < nl > + } < nl > + < nl > + try session . setActive ( true ) < nl > + } catch let error as NSError { < nl > + print ( " Audio Session : \ ( error . description ) " ) < nl > + } < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java < nl > index a561e18 . . a6cd74b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java < nl > @ @ - 85 , 7 + 85 , 7 @ @ public class CallBusActor extends EventBusActor implements PeerCallCallback { < nl > } < nl > < nl > @ Override < nl > - public void onNegotiationSuccessful ( long deviceId , long sessionId ) { < nl > + public void onNegotiationSuccessful ( final long deviceId , final long sessionId ) { < nl > if ( isMasterReady ) { < nl > sendSignal ( masterDeviceId , new ApiNegotinationSuccessful ( deviceId , sessionId ) ) ; < nl > } else { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > index 8a539b7 . . 74d59e5 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > @ @ - 194 , 10 + 194 , 12 @ @ public class PeerNodeActor extends ModuleActor implements PeerConnectionCallback < nl > } < nl > peerConnection . onResetState ( ) ; < nl > < nl > - PendingSession p = pendingSessions . remove ( 0 ) ; < nl > - if ( p ! = null ) { < nl > - for ( Object o : p . getMessages ( ) ) { < nl > - self ( ) . sendFirst ( o , self ( ) ) ; < nl > + if ( pendingSessions . size ( ) > 0 ) { < nl > + PendingSession p = pendingSessions . remove ( 0 ) ; < nl > + if ( p ! = null ) { < nl > + for ( Object o : p . getMessages ( ) ) { < nl > + self ( ) . sendFirst ( o , self ( ) ) ; < nl > + } < nl > } < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorApp / AppDelegate . swift b / actor - sdk / sdk - core - ios / ActorApp / AppDelegate . swift < nl > index c38d4cd . . 56b461b 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorApp / AppDelegate . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorApp / AppDelegate . swift < nl > @ @ - 22 , 6 + 22 , 9 @ @ import ActorSDK < nl > < nl > ActorSDK . sharedActor ( ) . style . searchStatusBarStyle = . Default < nl > < nl > + / / Enabling experimental features < nl > + ActorSDK . sharedActor ( ) . enableExperimentalFeatures = true < nl > + < nl > / / Creating Actor < nl > ActorSDK . sharedActor ( ) . createActor ( ) < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index 9bf41a2 . . f26bdd0 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 172 , 6 + 172 , 9 @ @ < nl > 	 	 06CE898A1BD8401C005A5530 / * Reachability . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06CE89891BD8401C005A5530 / * Reachability . swift * / ; } ; < nl > 	 	 06CE898C1BD841C9005A5530 / * SystemConfiguration . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / ; } ; < nl > 	 	 06CE89901BD84DF5005A5530 / * ActorSDKAnalytics . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06CE898F1BD84DF5005A5530 / * ActorSDKAnalytics . swift * / ; } ; < nl > + 	 	 06E7B2471C0F8D7A0090660C / * LocationPickerController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E7B2461C0F8D7A0090660C / * LocationPickerController . swift * / ; } ; < nl > + 	 	 06E7B24A1C0F92140090660C / * AABubbleLocationCell . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E7B2491C0F92140090660C / * AABubbleLocationCell . swift * / ; } ; < nl > + 	 	 06E7B24C1C0FAB500090660C / * AAMapFastView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E7B24B1C0FAB500090660C / * AAMapFastView . swift * / ; } ; < nl > 	 	 697B3A12994653F581459F63 / * Pods _ ActorSDK . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 9A22DF21664BBB34087283F6 / * Pods _ ActorSDK . framework * / ; } ; < nl > / * End PBXBuildFile section * / < nl > < nl > @ @ - 347 , 6 + 350 , 9 @ @ < nl > 	 	 06CE89891BD8401C005A5530 / * Reachability . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = Reachability . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / = { isa = PBXFileReference ; lastKnownFileType = wrapper . framework ; name = SystemConfiguration . framework ; path = System / Library / Frameworks / SystemConfiguration . framework ; sourceTree = SDKROOT ; } ; < nl > 	 	 06CE898F1BD84DF5005A5530 / * ActorSDKAnalytics . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = ActorSDKAnalytics . swift ; sourceTree = " < group > " ; } ; < nl > + 	 	 06E7B2461C0F8D7A0090660C / * LocationPickerController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = LocationPickerController . swift ; sourceTree = " < group > " ; } ; < nl > + 	 	 06E7B2491C0F92140090660C / * AABubbleLocationCell . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AABubbleLocationCell . swift ; sourceTree = " < group > " ; } ; < nl > + 	 	 06E7B24B1C0FAB500090660C / * AAMapFastView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAMapFastView . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 22BAEA363892E475F59B7E9F / * Pods - ActorSDK . debug . xcconfig * / = { isa = PBXFileReference ; includeInIndex = 1 ; lastKnownFileType = text . xcconfig ; name = " Pods - ActorSDK . debug . xcconfig " ; path = " Pods / Target Support Files / Pods - ActorSDK / Pods - ActorSDK . debug . xcconfig " ; sourceTree = " < group > " ; } ; < nl > 	 	 333F91AE5263DD450666CC87 / * Pods - ActorSDK . release . xcconfig * / = { isa = PBXFileReference ; includeInIndex = 1 ; lastKnownFileType = text . xcconfig ; name = " Pods - ActorSDK . release . xcconfig " ; path = " Pods / Target Support Files / Pods - ActorSDK / Pods - ActorSDK . release . xcconfig " ; sourceTree = " < group > " ; } ; < nl > 	 	 9A22DF21664BBB34087283F6 / * Pods _ ActorSDK . framework * / = { isa = PBXFileReference ; explicitFileType = wrapper . framework ; includeInIndex = 0 ; path = Pods _ ActorSDK . framework ; sourceTree = BUILT _ PRODUCTS _ DIR ; } ; < nl > @ @ - 530 , 6 + 536 , 7 @ @ < nl > 	 	 	 	 069CF4C31BCB908C00C66E12 / * CLTokenInputView * / , < nl > 	 	 	 	 066A52321BC4EEBA000E606E / * Cells * / , < nl > 	 	 	 	 066A52141BC4EE04000E606E / * AAAvatarView . swift * / , < nl > + 	 	 	 	 06E7B24B1C0FAB500090660C / * AAMapFastView . swift * / , < nl > 	 	 	 	 066A52461BC4EED5000E606E / * AAProgressView . swift * / , < nl > 	 	 	 	 066A523A1BC4EECD000E606E / * AABigPlaceholderView . swift * / , < nl > 	 	 	 	 066A523C1BC4EECD000E606E / * AATableViewHeader . swift * / , < nl > @ @ - 589 , 6 + 596 , 7 @ @ < nl > 	 	 	 	 066A52F91BC52FA0000E606E / * Compose * / , < nl > 	 	 	 	 066A52601BC50E6B000E606E / * Auth * / , < nl > 	 	 	 	 066A52C41BC521D5000E606E / * Content * / , < nl > + 	 	 	 	 06E7B2451C0F8D410090660C / * Location * / , < nl > 	 	 	 	 066A527B1BC51EC6000E606E / * Root * / , < nl > 	 	 	 	 066A52181BC4EE9A000E606E / * Managed Runtime * / , < nl > 	 	 	 ) ; < nl > @ @ - 832 , 6 + 840 , 7 @ @ < nl > 	 	 	 	 066A53281BC53406000E606E / * AABubbleBaseFileCell . swift * / , < nl > 	 	 	 	 066A53291BC53406000E606E / * AABubbleMediaCell . swift * / , < nl > 	 	 	 	 066A532A1BC53406000E606E / * AABubbleDocumentCell . swift * / , < nl > + 	 	 	 	 06E7B2491C0F92140090660C / * AABubbleLocationCell . swift * / , < nl > 	 	 	 ) ; < nl > 	 	 	 path = Cell ; < nl > 	 	 	 sourceTree = " < group > " ; < nl > @ @ - 878 , 6 + 887 , 14 @ @ < nl > 	 	 	 name = CLTokenInputView ; < nl > 	 	 	 sourceTree = " < group > " ; < nl > 	 	 } ; < nl > + 	 	 06E7B2451C0F8D410090660C / * Location * / = { < nl > + 	 	 	 isa = PBXGroup ; < nl > + 	 	 	 children = ( < nl > + 	 	 	 	 06E7B2461C0F8D7A0090660C / * LocationPickerController . swift * / , < nl > + 	 	 	 ) ; < nl > + 	 	 	 path = Location ; < nl > + 	 	 	 sourceTree = " < group > " ; < nl > + 	 	 } ; < nl > 	 	 2F428D134E194A828C3DF863 / * Frameworks * / = { < nl > 	 	 	 isa = PBXGroup ; < nl > 	 	 	 children = ( < nl > @ @ - 1107 , 6 + 1124 , 7 @ @ < nl > 	 	 	 	 066A53171BC533DD000E606E / * AABubbles . swift in Sources * / , < nl > 	 	 	 	 066A52081BC4E962000E606E / * Makefile in Sources * / , < nl > 	 	 	 	 066A53231BC533F5000E606E / * Caches . swift in Sources * / , < nl > + 	 	 	 	 06E7B2471C0F8D7A0090660C / * LocationPickerController . swift in Sources * / , < nl > 	 	 	 	 066A52691BC50E7B000E606E / * AAAuthRegisterViewController . swift in Sources * / , < nl > 	 	 	 	 066A51501BC4BE06000E606E / * AARegex . swift in Sources * / , < nl > 	 	 	 	 06CE89901BD84DF5005A5530 / * ActorSDKAnalytics . swift in Sources * / , < nl > @ @ - 1171 , 6 + 1189 , 7 @ @ < nl > 	 	 	 	 066A52241BC4EEAC000E606E / * AAManagedRange . swift in Sources * / , < nl > 	 	 	 	 066A50E21BC4AF9F000E606E / * ActorSDK . swift in Sources * / , < nl > 	 	 	 	 06CE898A1BD8401C005A5530 / * Reachability . swift in Sources * / , < nl > + 	 	 	 	 06E7B24C1C0FAB500090660C / * AAMapFastView . swift in Sources * / , < nl > 	 	 	 	 066A516D1BC4C366000E606E / * ActorCoreExt . swift in Sources * / , < nl > 	 	 	 	 066A517E1BC4C373000E606E / * FMDatabaseAdditions . m in Sources * / , < nl > 	 	 	 	 066A519A1BC4C390000E606E / * FMDBList . swift in Sources * / , < nl > @ @ - 1187 , 6 + 1206 , 7 @ @ < nl > 	 	 	 	 066A52231BC4EEAC000E606E / * AAManagedSection . swift in Sources * / , < nl > 	 	 	 	 066A52D11BC52204000E606E / * AADialogCell . swift in Sources * / , < nl > 	 	 	 	 066A51901BC4C383000E606E / * CocoaNetworkRuntime . swift in Sources * / , < nl > + 	 	 	 	 06E7B24A1C0F92140090660C / * AABubbleLocationCell . swift in Sources * / , < nl > 	 	 	 	 066A52581BC4EF61000E606E / * Alerts . swift in Sources * / , < nl > 	 	 	 	 066A51691BC4C366000E606E / * AATools . swift in Sources * / , < nl > 	 	 	 	 066A53201BC533F5000E606E / * AABubbleBackgroundProcessor . swift in Sources * / , < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / LocationPin . imageset / Contents . json b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / LocationPin . imageset / Contents . json < nl > new file mode 100644 < nl > index 0000000 . . 3f92572 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / LocationPin . imageset / Contents . json < nl > @ @ - 0 , 0 + 1 , 13 @ @ < nl > + { < nl > + " images " : [ < nl > + { < nl > + " idiom " : " universal " , < nl > + " filename " : " LocationPin @ 2x . png " , < nl > + " scale " : " 2x " < nl > + } < nl > + ] , < nl > + " info " : { < nl > + " version " : 1 , < nl > + " author " : " xcode " < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / LocationPin . imageset / LocationPin @ 2x . png b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / LocationPin . imageset / LocationPin @ 2x . png < nl > new file mode 100644 < nl > index 0000000 . . 709d3b0 < nl > Binary files / dev / null and b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / LocationPin . imageset / LocationPin @ 2x . png differ < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > index 587321a . . 9edb0ad 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > @ @ - 82 , 6 + 82 , 9 @ @ public class ActorSDK { < nl > / / / Extensions < nl > private var extensions = [ ActorExtension ] ( ) < nl > < nl > + / / / Enable experimental features < nl > + public var enableExperimentalFeatures : Bool = false < nl > + < nl > / / < nl > / / User Onlines < nl > / / < nl > @ @ - 91 , 7 + 94 , 7 @ @ public class ActorSDK { < nl > < nl > / / / Disable this if you want manually handle online states < nl > public var automaticOnlineHandling = true < nl > - < nl > + < nl > / / < nl > / / Internal State < nl > / / < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AABubbles . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AABubbles . swift < nl > index ca23c70 . . a98f2ef 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AABubbles . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AABubbles . swift < nl > @ @ - 10 , 11 + 10 , 13 @ @ class AABubbles { < nl > static let mediaLayouter = AABubbleMediaCellLayouter ( ) < nl > static let documentLayouter = AABubbleDocumentCellLayout ( ) < nl > static let serviceLayouter = AABubbleServiceCellLayouter ( ) < nl > + static let locationLayouter = AABubbleLocationCellLayouter ( ) < nl > < nl > static let builtInLayouters : [ AABubbleLayouter ] = [ < nl > serviceLayouter , < nl > mediaLayouter , < nl > documentLayouter , < nl > + locationLayouter , < nl > textLayouter < nl > ] < nl > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleLocationCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleLocationCell . swift < nl > new file mode 100644 < nl > index 0000000 . . 1c539ce < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleLocationCell . swift < nl > @ @ - 0 , 0 + 1 , 179 @ @ < nl > + / / < nl > + / / Copyright ( c ) 2014 - 2015 Actor LLC . < https : / / actor . im > < nl > + / / < nl > + < nl > + import Foundation < nl > + import MapKit < nl > + < nl > + private let mapWidth : CGFloat = 200 < nl > + private let mapHeight : CGFloat = 160 < nl > + < nl > + public class AABubbleLocationCell : AABubbleCell { < nl > + < nl > + private let map = AAMapFastView ( mapWidth : mapWidth , mapHeight : mapHeight ) < nl > + < nl > + private let pin = UIImageView ( ) < nl > + private let timeBg = UIImageView ( ) < nl > + private let timeLabel = UILabel ( ) < nl > + private let statusView = UIImageView ( ) < nl > + < nl > + private var bindedLat : Double ? = nil < nl > + private var bindedLon : Double ? = nil < nl > + < nl > + public init ( frame : CGRect ) { < nl > + super . init ( frame : frame , isFullSize : false ) < nl > + < nl > + timeBg . image = Imaging . imageWithColor ( appStyle . chatMediaDateBgColor , size : CGSize ( width : 1 , height : 1 ) ) < nl > + < nl > + timeLabel . font = UIFont . italicSystemFontOfSize ( 11 ) < nl > + timeLabel . textColor = appStyle . chatMediaDateColor < nl > + < nl > + statusView . contentMode = UIViewContentMode . Center < nl > + < nl > + pin . image = UIImage . bundled ( " LocationPin " ) < nl > + < nl > + contentView . addSubview ( map ) < nl > + map . addSubview ( pin ) < nl > + < nl > + contentView . addSubview ( timeBg ) < nl > + contentView . addSubview ( timeLabel ) < nl > + contentView . addSubview ( statusView ) < nl > + < nl > + contentInsets = UIEdgeInsets ( top : 1 , left : 1 , bottom : 1 , right : 1 ) < nl > + < nl > + map . addGestureRecognizer ( UITapGestureRecognizer ( target : self , action : " mapDidTap " ) ) < nl > + map . userInteractionEnabled = true < nl > + } < nl > + < nl > + public required init ( coder aDecoder : NSCoder ) { < nl > + fatalError ( " init ( coder : ) has not been implemented " ) < nl > + } < nl > + < nl > + func mapDidTap ( ) { < nl > + let url = " http : / / maps . apple . com / ? q = \ ( bindedLat ! ) , \ ( bindedLon ! ) " < nl > + / / print ( " url : \ ( url ) " ) < nl > + UIApplication . sharedApplication ( ) . openURL ( NSURL ( string : url ) ! ) < nl > + } < nl > + < nl > + public override func bind ( message : ACMessage , reuse : Bool , cellLayout : AACellLayout , setting : AACellSetting ) { < nl > + < nl > + let layout = cellLayout as ! AALocationCellLayout < nl > + < nl > + bindedLat = layout . latitude < nl > + bindedLon = layout . longitude < nl > + < nl > + bubbleInsets = UIEdgeInsets ( < nl > + top : setting . clenchTop ? AABubbleCell . bubbleTopCompact : AABubbleCell . bubbleTop , < nl > + left : 10 + ( AADevice . isiPad ? 16 : 0 ) , < nl > + bottom : setting . clenchBottom ? AABubbleCell . bubbleBottomCompact : AABubbleCell . bubbleBottom , < nl > + right : 10 + ( AADevice . isiPad ? 16 : 0 ) ) < nl > + < nl > + if ( ! reuse ) { < nl > + < nl > + / / Bind bubble < nl > + if ( self . isOut ) { < nl > + bindBubbleType ( BubbleType . MediaOut , isCompact : false ) < nl > + } else { < nl > + bindBubbleType ( BubbleType . MediaIn , isCompact : false ) < nl > + } < nl > + } < nl > + < nl > + map . bind ( layout . latitude , longitude : layout . longitude ) < nl > + < nl > + / / Update time < nl > + timeLabel . text = cellLayout . date < nl > + < nl > + / / Update status < nl > + if ( isOut ) { < nl > + statusView . hidden = false < nl > + switch ( UInt ( message . messageState . ordinal ( ) ) ) { < nl > + case ACMessageState . PENDING . rawValue : < nl > + self . statusView . image = appStyle . chatIconClock ; < nl > + self . statusView . tintColor = appStyle . chatStatusMediaSending < nl > + break ; < nl > + case ACMessageState . SENT . rawValue : < nl > + self . statusView . image = appStyle . chatIconCheck1 ; < nl > + self . statusView . tintColor = appStyle . chatStatusMediaSent < nl > + break ; < nl > + case ACMessageState . RECEIVED . rawValue : < nl > + self . statusView . image = appStyle . chatIconCheck2 ; < nl > + self . statusView . tintColor = appStyle . chatStatusMediaReceived < nl > + break ; < nl > + case ACMessageState . READ . rawValue : < nl > + self . statusView . image = appStyle . chatIconCheck2 ; < nl > + self . statusView . tintColor = appStyle . chatStatusMediaRead < nl > + break ; < nl > + case ACMessageState . ERROR . rawValue : < nl > + self . statusView . image = appStyle . chatIconError ; < nl > + self . statusView . tintColor = appStyle . chatStatusMediaError < nl > + break < nl > + default : < nl > + self . statusView . image = appStyle . chatIconClock ; < nl > + self . statusView . tintColor = appStyle . chatStatusMediaSending < nl > + break ; < nl > + } < nl > + } else { < nl > + statusView . hidden = true < nl > + } < nl > + } < nl > + < nl > + public override func layoutContent ( maxWidth : CGFloat , offsetX : CGFloat ) { < nl > + let insets = fullContentInsets < nl > + < nl > + layoutBubble ( mapWidth , contentHeight : mapHeight ) < nl > + < nl > + if isOut { < nl > + map . frame = CGRectMake ( maxWidth - insets . right - mapWidth , insets . top , mapWidth , mapHeight ) < nl > + } else { < nl > + map . frame = CGRectMake ( insets . left , insets . top , mapWidth , mapHeight ) < nl > + } < nl > + < nl > + timeLabel . frame = CGRectMake ( 0 , 0 , 1000 , 1000 ) < nl > + timeLabel . sizeToFit ( ) < nl > + < nl > + let timeWidth = ( isOut ? 23 : 0 ) + timeLabel . bounds . width < nl > + let timeHeight : CGFloat = 20 < nl > + < nl > + timeLabel . frame = CGRectMake ( map . frame . maxX - timeWidth - 18 , map . frame . maxY - timeHeight - 6 , timeLabel . frame . width , timeHeight ) < nl > + < nl > + if ( isOut ) { < nl > + statusView . frame = CGRectMake ( timeLabel . frame . maxX , timeLabel . frame . minY , 23 , timeHeight ) < nl > + } < nl > + < nl > + pin . frame = CGRectMake ( ( map . width - pin . image ! . size . width ) / 2 , ( map . height - pin . image ! . size . height ) / 2 , < nl > + pin . image ! . size . width , pin . image ! . size . height ) < nl > + < nl > + timeBg . frame = CGRectMake ( timeLabel . frame . minX - 3 , timeLabel . frame . minY - 1 , timeWidth + 6 , timeHeight + 2 ) < nl > + } < nl > + } < nl > + < nl > + public class AALocationCellLayout : AACellLayout { < nl > + < nl > + let latitude : Double < nl > + let longitude : Double < nl > + < nl > + init ( latitude : Double , longitude : Double , date : Int64 ) { < nl > + self . latitude = latitude < nl > + self . longitude = longitude < nl > + super . init ( height : mapHeight , date : date , key : " location " ) < nl > + } < nl > + } < nl > + < nl > + public class AABubbleLocationCellLayouter : AABubbleLayouter { < nl > + < nl > + public func isSuitable ( message : ACMessage ) - > Bool { < nl > + if ( message . content is ACLocationContent ) { < nl > + return true < nl > + } < nl > + return false < nl > + } < nl > + < nl > + public func buildLayout ( peer : ACPeer , message : ACMessage ) - > AACellLayout { < nl > + let content = message . content as ! ACLocationContent < nl > + return AALocationCellLayout ( latitude : Double ( content . getLatitude ( ) ) , longitude : Double ( content . getLongitude ( ) ) , date : Int64 ( message . date ) ) < nl > + } < nl > + < nl > + public func cellClass ( ) - > AnyClass { < nl > + return AABubbleLocationCell . self < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > index 7704094 . . af819ab 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > @ @ - 308 , 6 + 308 , 12 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > self . pickDocument ( ) < nl > } < nl > < nl > + if ( ActorSDK . sharedActor ( ) . enableExperimentalFeatures ) { < nl > + builder . add ( " Location " ) { ( ) - > ( ) in < nl > + self . pickLocation ( ) < nl > + } < nl > + } < nl > + < nl > showActionSheet ( builder . items , cancelButton : " AlertCancel " , destructButton : nil , sourceView : self . leftButton , sourceRect : self . leftButton . bounds , tapClosure : builder . tapClosure ) < nl > } < nl > < nl > @ @ - 452 , 4 + 458 , 10 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > func imagePickerControllerDidCancel ( picker : UIImagePickerController ) { < nl > picker . dismissViewControllerAnimated ( true , completion : nil ) < nl > } < nl > + < nl > + / / Location picking < nl > + < nl > + func pickLocation ( ) { < nl > + < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Location / LocationPickerController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Location / LocationPickerController . swift < nl > new file mode 100644 < nl > index 0000000 . . 123575a < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Location / LocationPickerController . swift < nl > @ @ - 0 , 0 + 1 , 24 @ @ < nl > + / / < nl > + / / Copyright ( c ) 2014 - 2015 Actor LLC . < https : / / actor . im > < nl > + / / < nl > + < nl > + import Foundation < nl > + import MapKit < nl > + < nl > + class AALocationPickerController : AAViewController { < nl > + < nl > + let map = MKMapView ( ) < nl > + < nl > + override func viewDidLoad ( ) { < nl > + super . viewDidLoad ( ) < nl > + < nl > + self . view . addSubview ( map ) < nl > + } < nl > + < nl > + < nl > + override func viewDidLayoutSubviews ( ) { < nl > + super . viewDidLayoutSubviews ( ) < nl > + < nl > + map . frame = self . view . bounds < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift < nl > index 3d7e2c7 . . bf761a5 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift < nl > @ @ - 17 , 8 + 17 , 8 @ @ public class AAAvatarView : UIImageView { < nl > < nl > var enableAnimation : Bool = false < nl > < nl > - private let cacheSize = 10 < nl > - private var avatarCache = Dictionary < Int , AASwiftlyLRU < Int64 , UIImage > > ( ) < nl > + private static let cacheSize = 10 < nl > + private static var avatarCache = Dictionary < Int , AASwiftlyLRU < Int64 , UIImage > > ( ) < nl > < nl > private var bindedFileId : jlong ! = nil < nl > private var bindedTitle : String ! = nil < nl > @ @ - 233 , 7 + 233 , 7 @ @ public class AAAvatarView : UIImageView { < nl > / / < nl > < nl > private func checkCache ( size : Int , id : Int64 ) - > UIImage ? { < nl > - if let cache = avatarCache [ size ] { < nl > + if let cache = AAAvatarView . avatarCache [ size ] { < nl > if let img = cache [ id ] { < nl > return img < nl > } < nl > @ @ - 242 , 12 + 242 , 12 @ @ public class AAAvatarView : UIImageView { < nl > } < nl > < nl > private func putToCache ( size : Int , id : Int64 , image : UIImage ) { < nl > - if let cache = avatarCache [ size ] { < nl > + if let cache = AAAvatarView . avatarCache [ size ] { < nl > cache [ id ] = image < nl > } else { < nl > - let cache = AASwiftlyLRU < jlong , UIImage > ( capacity : cacheSize ) ; < nl > + let cache = AASwiftlyLRU < jlong , UIImage > ( capacity : AAAvatarView . cacheSize ) ; < nl > cache [ id ] = image < nl > - avatarCache . updateValue ( cache , forKey : size ) < nl > + AAAvatarView . avatarCache . updateValue ( cache , forKey : size ) < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAMapFastView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAMapFastView . swift < nl > new file mode 100644 < nl > index 0000000 . . 217c38e < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAMapFastView . swift < nl > @ @ - 0 , 0 + 1 , 58 @ @ < nl > + / / < nl > + / / Copyright ( c ) 2014 - 2015 Actor LLC . < https : / / actor . im > < nl > + / / < nl > + < nl > + import Foundation < nl > + import MapKit < nl > + < nl > + public class AAMapFastView : UIImageView { < nl > + < nl > + static private var mapCache = AASwiftlyLRU < String , UIImage > ( capacity : 16 ) < nl > + < nl > + let mapWidth : CGFloat < nl > + let mapHeight : CGFloat < nl > + var mapKey : String ? = nil < nl > + < nl > + public init ( mapWidth : CGFloat , mapHeight : CGFloat ) { < nl > + self . mapWidth = mapWidth < nl > + self . mapHeight = mapHeight < nl > + super . init ( image : nil ) < nl > + } < nl > + < nl > + required public init ? ( coder aDecoder : NSCoder ) { < nl > + fatalError ( " init ( coder : ) has not been implemented " ) < nl > + } < nl > + < nl > + func bind ( latitude : Double , longitude : Double ) { < nl > + let key = " \ ( Int ( latitude * 1000000 ) ) _ \ ( Int ( longitude * 1000000 ) ) " < nl > + < nl > + / / Same Key < nl > + if ( self . mapKey = = key ) { < nl > + return < nl > + } < nl > + < nl > + self . mapKey = key < nl > + < nl > + let cached = AAMapFastView . mapCache [ key ] < nl > + if ( cached ! = nil ) { < nl > + self . image = cached < nl > + return < nl > + } < nl > + < nl > + let options = MKMapSnapshotOptions ( ) < nl > + options . region = MKCoordinateRegion ( center : CLLocationCoordinate2D ( latitude : latitude , longitude : longitude ) , span : MKCoordinateSpan ( latitudeDelta : 0 . 005 , longitudeDelta : 0 . 005 ) ) < nl > + options . size = CGSizeMake ( mapWidth , mapHeight ) < nl > + options . scale = UIScreen . mainScreen ( ) . scale < nl > + < nl > + let snapshotter = MKMapSnapshotter ( options : options ) < nl > + snapshotter . startWithCompletionHandler { snapshot , error in < nl > + if let img = snapshot ? . image { < nl > + let rounded = img . roundCorners ( img . size . width , h : img . size . height , roundSize : 14 ) < nl > + dispatchOnUi { < nl > + AAMapFastView . mapCache [ key ] = rounded < nl > + self . image = rounded < nl > + } < nl > + } < nl > + } < nl > + } < nl > + } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index e39318a . . 96ba804 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 8 , 6 + 8 , 8 @ @ 
 
 / * Begin PBXBuildFile section * / 
 	 	 06129AA61C8359FB0099286B / * CocoaLifecycleRuntime . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06129AA51C8359FB0099286B / * CocoaLifecycleRuntime . swift * / ; } ; 
 + 	 	 06129AA91C8394700099286B / * AAAudioManager . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06129AA81C8394700099286B / * AAAudioManager . swift * / ; } ; 
 + 	 	 06129AAB1C83B80B0099286B / * AAAudioRouter . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06129AAA1C83B80A0099286B / * AAAudioRouter . swift * / ; } ; 
 	 	 06230F411BC95BD200A4807B / * RMPhoneFormat . m in Sources * / = { isa = PBXBuildFile ; fileRef = 06230F3F1BC95BD200A4807B / * RMPhoneFormat . m * / ; } ; 
 	 	 06230F421BC95BD200A4807B / * RMPhoneFormat . h in Headers * / = { isa = PBXBuildFile ; fileRef = 06230F401BC95BD200A4807B / * RMPhoneFormat . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; 
 	 	 06230F451BC95C0E00A4807B / * ABPhoneFieldCodes . txt in Resources * / = { isa = PBXBuildFile ; fileRef = 06230F431BC95C0E00A4807B / * ABPhoneFieldCodes . txt * / ; } ; 
 @ @ - 304 , 6 + 306 , 8 @ @ 
 
 / * Begin PBXFileReference section * / 
 	 	 06129AA51C8359FB0099286B / * CocoaLifecycleRuntime . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = CocoaLifecycleRuntime . swift ; sourceTree = " < group > " ; } ; 
 + 	 	 06129AA81C8394700099286B / * AAAudioManager . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAudioManager . swift ; sourceTree = " < group > " ; } ; 
 + 	 	 06129AAA1C83B80A0099286B / * AAAudioRouter . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAudioRouter . swift ; sourceTree = " < group > " ; } ; 
 	 	 06230F3F1BC95BD200A4807B / * RMPhoneFormat . m * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . objc ; path = RMPhoneFormat . m ; sourceTree = " < group > " ; } ; 
 	 	 06230F401BC95BD200A4807B / * RMPhoneFormat . h * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . h ; path = RMPhoneFormat . h ; sourceTree = " < group > " ; } ; 
 	 	 06230F431BC95C0E00A4807B / * ABPhoneFieldCodes . txt * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = text ; path = ABPhoneFieldCodes . txt ; sourceTree = " < group > " ; } ; 
 @ @ - 736 , 6 + 740 , 8 @ @ 
 	 	 	 children = ( 
 	 	 	 	 15D35F721C201B5300E3717A / * Categories * / , 
 	 	 	 	 152AA8901C29887A0030DEEE / * Extensions * / , 
 + 	 	 	 	 06129AA81C8394700099286B / * AAAudioManager . swift * / , 
 + 	 	 	 	 06129AAA1C83B80A0099286B / * AAAudioRouter . swift * / , 
 	 	 	 	 066A53311BC534F5000E606E / * AAFileTypes . swift * / , 
 	 	 	 	 066A515A1BC4C178000E606E / * AAHashMap . swift * / , 
 	 	 	 	 066A51581BC4C14A000E606E / * AASwiftlyLRU . swift * / , 
 @ @ - 1824 , 6 + 1830 , 7 @ @ 
 	 	 	 	 066A52F31BC52B02000E606E / * AASettingsWallpapper . swift in Sources * / , 
 	 	 	 	 066A53041BC53177000E606E / * AAContactsViewController . swift in Sources * / , 
 	 	 	 	 066A51801BC4C373000E606E / * FMDatabasePool . m in Sources * / , 
 + 	 	 	 	 06129AA91C8394700099286B / * AAAudioManager . swift in Sources * / , 
 	 	 	 	 066A518F1BC4C383000E606E / * iOSPhoneBookProvider . swift in Sources * / , 
 	 	 	 	 066A530B1BC531A2000E606E / * AAUserViewController . swift in Sources * / , 
 	 	 	 	 06E3C5B81C80EE21004776CD / * AACircleButton . swift in Sources * / , 
 @ @ - 1861 , 6 + 1868 , 7 @ @ 
 	 	 	 	 066A52281BC4EEAC000E606E / * AAManagedTableController . swift in Sources * / , 
 	 	 	 	 065975541BC7DF5100B8C7DF / * CocoaAssetsRuntime . swift in Sources * / , 
 	 	 	 	 06E7B2521C1345E70090660C / * AAMapPinPointView . swift in Sources * / , 
 + 	 	 	 	 06129AAB1C83B80B0099286B / * AAAudioRouter . swift in Sources * / , 
 	 	 	 	 066A53121BC53317000E606E / * AAPhotoPreviewController . swift in Sources * / , 
 	 	 	 	 066A52391BC4EEBA000E606E / * AAEditCell . swift in Sources * / , 
 	 	 	 	 066A526D1BC50E8B000E606E / * AAAuthCountryCell . swift in Sources * / , 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 index ff60c67 . . 74773a5 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 @ @ - 22 , 6 + 22 , 7 @ @ class CocoaWebRTCRuntime : NSObject , ARWebRTCRuntime { 
 } 
 
 func getUserAudio ( ) - > ARPromise { 
 + print ( " ? ? getUserAudio " ) 
 let audio = peerConnectionFactory . audioTrackWithID ( " audio0 " ) 
 let mediaStream = peerConnectionFactory . mediaStreamWithLabel ( " ARDAMSa0 " ) 
 mediaStream . addAudioTrack ( audio ) 
 @ @ - 160 , 37 + 161 , 37 @ @ class CocoaWebRTCPeerConnection : NSObject , ARWebRTCPeerConnection , RTCPeerConnec 
 / / 
 
 func peerConnection ( peerConnection : RTCPeerConnection ! , signalingStateChanged stateChanged : RTCSignalingState ) { 
 - print ( " signalingStateChanged \ ( stateChanged ) " ) 
 + print ( " ? ? signalingStateChanged \ ( stateChanged ) " ) 
 } 
 
 func peerConnection ( peerConnection : RTCPeerConnection ! , addedStream stream : RTCMediaStream ! ) { 
 - print ( " onStreamAdded " ) 
 + print ( " ? ? onStreamAdded " ) 
 for c in callbacks { 
 c . onStreamAdded ( MediaStream ( stream : stream ! ) ) 
 } 
 } 
 
 func peerConnection ( peerConnection : RTCPeerConnection ! , removedStream stream : RTCMediaStream ! ) { 
 - print ( " onStreamRemoved " ) 
 + print ( " ? ? onStreamRemoved " ) 
 for c in callbacks { 
 c . onStreamRemoved ( MediaStream ( stream : stream ! ) ) 
 } 
 } 
 
 func peerConnectionOnRenegotiationNeeded ( peerConnection : RTCPeerConnection ! ) { 
 - print ( " onRenegotiationNeeded " ) 
 + print ( " ? ? onRenegotiationNeeded " ) 
 } 
 
 func peerConnection ( peerConnection : RTCPeerConnection ! , iceConnectionChanged newState : RTCICEConnectionState ) { 
 - print ( " iceConnectionChanged \ ( newState ) " ) 
 + print ( " ? ? iceConnectionChanged \ ( newState ) " ) 
 } 
 
 func peerConnection ( peerConnection : RTCPeerConnection ! , iceGatheringChanged newState : RTCICEGatheringState ) { 
 - print ( " iceGatheringChanged \ ( newState ) " ) 
 + print ( " ? ? iceGatheringChanged \ ( newState ) " ) 
 } 
 
 func peerConnection ( peerConnection : RTCPeerConnection ! , gotICECandidate candidate : RTCICECandidate ! ) { 
 - print ( " gotICECandidate \ ( candidate ) " ) 
 + print ( " ? ? gotICECandidate \ ( candidate ) " ) 
 for c in callbacks { 
 c . onCandidateWithLabel ( jint ( candidate . sdpMLineIndex ) , withId : candidate . sdpMid , withCandidate : candidate . sdp ) 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSCallsProvider . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSCallsProvider . swift 
 index c1a5fd1 . . f8e3bfa 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSCallsProvider . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSCallsProvider . swift 
 @ @ - 12 , 94 + 12 , 39 @ @ class iOSCallsProvider : NSObject , ACCallsProvider { 
 var latestNotification : UILocalNotification ! 
 
 func onCallStartWithCallId ( callId : jlong ) { 
 + AAAudioManager . sharedAudio ( ) . callStart ( Actor . getCallWithCallId ( callId ) . isOutgoing ) 
 dispatchOnUi ( ) { 
 - 
 - if ( ! Actor . getCallWithCallId ( callId ) . isOutgoing ) { 
 - self . startRingtone ( ) 
 - } else { 
 - self . stopRingtone ( ) 
 - } 
 - 
 let rootController = ActorSDK . sharedActor ( ) . bindedToWindow . rootViewController ! 
 rootController . presentViewController ( AACallViewController ( callId : callId ) , animated : true , completion : nil ) 
 } 
 } 
 
 func onCallAnsweredWithCallId ( callId : jlong ) { 
 - dispatchOnUi ( ) { 
 - self . stopRingtone ( ) 
 - } 
 + AAAudioManager . sharedAudio ( ) . callAnswered ( ) 
 } 
 
 func onCallEndWithCallId ( callId : jlong ) { 
 - dispatchOnUi ( ) { 
 - self . stopRingtone ( ) 
 - } 
 - } 
 - 
 - private func startRingtone ( ) { 
 - 
 - do { 
 - try AVAudioSession . sharedInstance ( ) . setCategory ( AVAudioSessionCategorySoloAmbient , withOptions : 
 - AVAudioSessionCategoryOptions . MixWithOthers ) 
 - try AVAudioSession . sharedInstance ( ) . setMode ( AVAudioSessionModeDefault ) 
 - try AVAudioSession . sharedInstance ( ) . overrideOutputAudioPort ( AVAudioSessionPortOverride . Speaker ) 
 - try AVAudioSession . sharedInstance ( ) . setActive ( true ) 
 - } catch let error as NSError { 
 - print ( " Error : \ ( error . description ) " ) 
 - } 
 - 
 - if ( self . ringtonePlayer = = nil ) { 
 - do { 
 - self . ringtonePlayer = try AVAudioPlayer ( contentsOfURL : NSURL ( fileURLWithPath : NSBundle . framework . pathForResource ( " ringtone " , ofType : " m4a " ) ! ) ) 
 - self . ringtonePlayer . prepareToPlay ( ) 
 - self . ringtonePlayer . numberOfLoops = - 1 
 - } catch { 
 - 
 - } 
 - } 
 - 
 - AudioServicesPlaySystemSound ( 1352 ) 
 - 
 - self . ringtonePlayer . play ( ) 
 - 
 - if ( self . latestNotification ! = nil ) { 
 - UIApplication . sharedApplication ( ) . cancelLocalNotification ( self . latestNotification ) 
 - self . latestNotification = nil 
 - } 
 - self . latestNotification = UILocalNotification ( ) 
 - self . latestNotification . alertBody = " Answer it ! " 
 - UIApplication . sharedApplication ( ) . presentLocalNotificationNow ( self . latestNotification ) 
 - } 
 - 
 - private func stopRingtone ( ) { 
 - if ringtonePlayer ! = nil { 
 - ringtonePlayer . pause ( ) 
 - } 
 - if ( self . latestNotification ! = nil ) { 
 - UIApplication . sharedApplication ( ) . cancelLocalNotification ( self . latestNotification ) 
 - self . latestNotification = nil 
 - } 
 + AAAudioManager . sharedAudio ( ) . callEnd ( ) 
 } 
 
 func startOutgoingBeep ( ) { 
 - do { 
 - try AVAudioSession . sharedInstance ( ) . setCategory ( AVAudioSessionCategoryPlayAndRecord , withOptions : 
 - AVAudioSessionCategoryOptions . AllowBluetooth ) 
 - try AVAudioSession . sharedInstance ( ) . setMode ( AVAudioSessionModeVoiceChat ) 
 - try AVAudioSession . sharedInstance ( ) . overrideOutputAudioPort ( AVAudioSessionPortOverride . None ) 
 - try AVAudioSession . sharedInstance ( ) . setActive ( true ) 
 - } catch let error as NSError { 
 - print ( " Error : \ ( error . description ) " ) 
 - } 
 - 
 + / / do { 
 + / / try AVAudioSession . sharedInstance ( ) . setCategory ( AVAudioSessionCategoryPlayAndRecord , withOptions : 
 + / / AVAudioSessionCategoryOptions . AllowBluetooth ) 
 + / / try AVAudioSession . sharedInstance ( ) . setMode ( AVAudioSessionModeVoiceChat ) 
 + / / try AVAudioSession . sharedInstance ( ) . overrideOutputAudioPort ( AVAudioSessionPortOverride . None ) 
 + / / try AVAudioSession . sharedInstance ( ) . setActive ( true ) 
 + / / } catch let error as NSError { 
 + / / print ( " Error : \ ( error . description ) " ) 
 + / / } 
 + / / 
 if ( beepPlayer = = nil ) { 
 do { 
 beepPlayer = try AVAudioPlayer ( contentsOfURL : NSURL ( fileURLWithPath : NSBundle . framework . pathForResource ( " tone " , ofType : " m4a " ) ! ) ) 
 beepPlayer . prepareToPlay ( ) 
 beepPlayer . numberOfLoops = - 1 
 - } catch { 
 - 
 + } catch let error as NSError { 
 + print ( " Error : \ ( error . description ) " ) 
 } 
 } 
 
 @ @ - 109 , 13 + 54 , 13 @ @ class iOSCallsProvider : NSObject , ACCallsProvider { 
 func stopOutgoingBeep ( ) { 
 beepPlayer . stop ( ) 
 
 - do { 
 - try AVAudioSession . sharedInstance ( ) . setCategory ( AVAudioSessionCategoryPlayAndRecord ) 
 - try AVAudioSession . sharedInstance ( ) . setMode ( AVAudioSessionModeVoiceChat ) 
 - try AVAudioSession . sharedInstance ( ) . overrideOutputAudioPort ( AVAudioSessionPortOverride . None ) 
 - try AVAudioSession . sharedInstance ( ) . setActive ( true ) 
 - } catch let error as NSError { 
 - print ( " Error : \ ( error . description ) " ) 
 - } 
 + / / do { 
 + / / try AVAudioSession . sharedInstance ( ) . setCategory ( AVAudioSessionCategoryPlayAndRecord ) 
 + / / try AVAudioSession . sharedInstance ( ) . setMode ( AVAudioSessionModeVoiceChat ) 
 + / / try AVAudioSession . sharedInstance ( ) . overrideOutputAudioPort ( AVAudioSessionPortOverride . None ) 
 + / / try AVAudioSession . sharedInstance ( ) . setActive ( true ) 
 + / / } catch let error as NSError { 
 + / / print ( " Error : \ ( error . description ) " ) 
 + / / } 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 index 7b136d7 . . e31421e 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 @ @ - 687 , 7 + 687 , 7 @ @ import PushKit 
 / / This event is fired when user press power button and lock screeen . 
 / / In iOS power button also cancel ongoint call . 
 / / 
 - messenger . probablyEndCall ( ) 
 + / / messenger . probablyEndCall ( ) 
 
 checkAppState ( ) 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 index c9977a6 . . b275fbd 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 @ @ - 121 , 7 + 121 , 7 @ @ public class AAGroupViewController : AAContentTableController { 
 
 / / Calls 
 if ( ActorSDK . sharedActor ( ) . enableCalls ) { 
 - let members = ( group . members . get ( ) as ! JavaUtilArrayList ) . size ( ) 
 + let members = ( group . members . get ( ) as ! JavaUtilHashSet ) . size ( ) 
 if ( members < = 20 ) { / / Temporary limitation 
 section { ( s ) - > ( ) in 
 s . action ( " CallsStartGroupAudio " ) { ( r ) - > ( ) in 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioManager . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioManager . swift 
 new file mode 100644 
 index 0000000 . . 4d78e38 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioManager . swift 
 @ @ - 0 , 0 + 1 , 87 @ @ 
 + / / 
 + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > 
 + / / 
 + 
 + import Foundation 
 + import AVFoundation 
 + 
 + public class AAAudioManager : NSObject , AVAudioPlayerDelegate { 
 + 
 + private static let sharedManager = AAAudioManager ( ) 
 + 
 + public static func sharedAudio ( ) - > AAAudioManager { 
 + return sharedManager 
 + } 
 + 
 + private var isCalling = false 
 + private var isCallStarted = false 
 + private var ringtonePlaying = false 
 + private var ringtonePlayer : AVAudioPlayer ! = nil 
 + private var audioRouter = AAAudioRouter ( ) 
 + 
 + public override init ( ) { 
 + super . init ( ) 
 + } 
 + 
 + public func callStart ( isOut : Bool ) { 
 + audioRouter . category = AVAudioSessionCategoryPlayAndRecord 
 + if ! isOut { 
 + audioRouter . mode = AVAudioSessionModeDefault 
 + audioRouter . currentRoute = . Speaker 
 + ringtoneStart ( ) 
 + } else { 
 + audioRouter . mode = AVAudioSessionModeVoiceChat 
 + audioRouter . currentRoute = . Receiver 
 + } 
 + } 
 + 
 + public func callAnswered ( ) { 
 + ringtoneEnd ( ) 
 + audioRouter . mode = AVAudioSessionModeVoiceChat 
 + audioRouter . currentRoute = . Receiver 
 + } 
 + 
 + public func callEnd ( ) { 
 + ringtoneEnd ( ) 
 + audioRouter . category = AVAudioSessionCategorySoloAmbient 
 + audioRouter . mode = AVAudioSessionModeDefault 
 + audioRouter . currentRoute = . Receiver 
 + } 
 + 
 + 
 + private func ringtoneStart ( ) { 
 + if ringtonePlaying { 
 + return 
 + } 
 + 
 + ringtonePlaying = true 
 + 
 + do { 
 + self . ringtonePlayer = try AVAudioPlayer ( contentsOfURL : NSURL ( fileURLWithPath : NSBundle . framework . pathForResource ( " ringtone " , ofType : " m4a " ) ! ) ) 
 + self . ringtonePlayer . delegate = self 
 + self . ringtonePlayer . numberOfLoops = - 1 
 + self . ringtonePlayer . volume = 1 . 0 
 + self . ringtonePlayer . play ( ) 
 + } catch let error as NSError { 
 + print ( " Unable to start Ringtone : \ ( error . description ) " ) 
 + self . ringtonePlayer = nil 
 + } 
 + } 
 + 
 + private func ringtoneEnd ( ) { 
 + if ! ringtonePlaying { 
 + return 
 + } 
 + 
 + if ringtonePlayer ! = nil { 
 + ringtonePlayer . stop ( ) 
 + ringtonePlayer = nil 
 + } 
 + 
 + ringtonePlaying = false 
 + } 
 + } 
 + 
 + 
 + 
 + 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioRouter . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioRouter . swift 
 new file mode 100644 
 index 0000000 . . 4103c61 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioRouter . swift 
 @ @ - 0 , 0 + 1 , 131 @ @ 
 + / / 
 + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > 
 + / / 
 + 
 + import Foundation 
 + import AVFoundation 
 + 
 + public enum Route { 
 + case Speaker 
 + case Receiver 
 + } 
 + 
 + public class AAAudioRouter { 
 + 
 + public var currentRoute = Route . Speaker { 
 + didSet ( v ) { 
 + fixSession ( ) 
 + } 
 + } 
 + 
 + public var mode = AVAudioSessionModeDefault { 
 + didSet ( v ) { 
 + fixSession ( ) 
 + } 
 + } 
 + 
 + public var category = AVAudioSessionCategoryPlayAndRecord { 
 + didSet ( v ) { 
 + fixSession ( ) 
 + } 
 + } 
 + 
 + public init ( ) { 
 + NSNotificationCenter . defaultCenter ( ) . addObserverForName ( AVAudioSessionRouteChangeNotification , 
 + object : nil , queue : NSOperationQueue . mainQueue ( ) ) { ( note ) - > Void in 
 + let notification : NSNotification = note as NSNotification 
 + if let info = notification . userInfo { 
 + let numberReason : NSNumber = info [ AVAudioSessionRouteChangeReasonKey ] as ! NSNumber 
 + if let reason = AVAudioSessionRouteChangeReason ( rawValue : UInt ( numberReason . integerValue ) ) { 
 + self . routeChanged ( reason ) 
 + } 
 + } 
 + } 
 + fixSession ( ) 
 + } 
 + 
 + func isHeadsetPluggedIn ( ) - > Bool { 
 + let route : AVAudioSessionRouteDescription = AVAudioSession . sharedInstance ( ) . currentRoute 
 + for port in route . outputs { 
 + let portDescription : AVAudioSessionPortDescription = port as AVAudioSessionPortDescription 
 + if portDescription . portType = = AVAudioSessionPortHeadphones | | portDescription . portType = = AVAudioSessionPortHeadsetMic { 
 + return true 
 + } 
 + } 
 + return false 
 + } 
 + 
 + private func routeChanged ( reason : AVAudioSessionRouteChangeReason ) { 
 + 
 + / / switch ( reason ) { 
 + / / case . NewDeviceAvailable : 
 + / / print ( " Reason : device add " ) 
 + / / break 
 + / / case . OldDeviceUnavailable : 
 + / / print ( " Reason : device remove " ) 
 + / / break 
 + / / case . CategoryChange : 
 + / / print ( " Reason : category change to \ ( AVAudioSession . sharedInstance ( ) . category ) " ) 
 + / / break 
 + / / case . Override : 
 + / / print ( " Reason : override to \ ( AVAudioSession . sharedInstance ( ) . currentRoute ) " ) 
 + / / break 
 + / / case . RouteConfigurationChange : 
 + / / print ( " Reason : route config change to \ ( AVAudioSession . sharedInstance ( ) . currentRoute ) " ) 
 + / / break 
 + / / case . Unknown : 
 + / / print ( " Reason : unknown " ) 
 + / / break 
 + / / case . WakeFromSleep : 
 + / / print ( " Reason : wake from sleep " ) 
 + / / break 
 + / / default : 
 + / / print ( " Reason : default " ) 
 + / / break 
 + / / } 
 + 
 + if reason = = . NewDeviceAvailable { 
 + if isHeadsetPluggedIn ( ) { 
 + self . currentRoute = . Receiver 
 + return 
 + } 
 + } else if reason = = . OldDeviceUnavailable { 
 + if ! isHeadsetPluggedIn ( ) { 
 + self . currentRoute = . Receiver 
 + return 
 + } 
 + } 
 + 
 + if reason = = . Override | | reason = = . RouteConfigurationChange { 
 + fixSession ( ) 
 + } 
 + } 
 + 
 + private func fixSession ( ) { 
 + let session = AVAudioSession . sharedInstance ( ) 
 + do { 
 + 
 + if session . category ! = category { 
 + try session . setCategory ( category ) 
 + } 
 + if session . mode ! = mode { 
 + try AVAudioSession . sharedInstance ( ) . setMode ( mode ) 
 + } 
 + 
 + if let route : AVAudioSessionRouteDescription = session . currentRoute { 
 + for port in route . outputs { 
 + let portDescription : AVAudioSessionPortDescription = port as AVAudioSessionPortDescription 
 + if ( self . currentRoute = = . Receiver & & portDescription . portType ! = AVAudioSessionPortBuiltInReceiver ) { 
 + try session . overrideOutputAudioPort ( . None ) 
 + } else if ( self . currentRoute = = . Speaker & & portDescription . portType ! = AVAudioSessionPortBuiltInSpeaker ) { 
 + try session . overrideOutputAudioPort ( AVAudioSessionPortOverride . Speaker ) 
 + } 
 + } 
 + } 
 + 
 + try session . setActive ( true ) 
 + } catch let error as NSError { 
 + print ( " Audio Session : \ ( error . description ) " ) 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java 
 index a561e18 . . a6cd74b 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java 
 @ @ - 85 , 7 + 85 , 7 @ @ public class CallBusActor extends EventBusActor implements PeerCallCallback { 
 } 
 
 @ Override 
 - public void onNegotiationSuccessful ( long deviceId , long sessionId ) { 
 + public void onNegotiationSuccessful ( final long deviceId , final long sessionId ) { 
 if ( isMasterReady ) { 
 sendSignal ( masterDeviceId , new ApiNegotinationSuccessful ( deviceId , sessionId ) ) ; 
 } else { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 index 8a539b7 . . 74d59e5 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 @ @ - 194 , 10 + 194 , 12 @ @ public class PeerNodeActor extends ModuleActor implements PeerConnectionCallback 
 } 
 peerConnection . onResetState ( ) ; 
 
 - PendingSession p = pendingSessions . remove ( 0 ) ; 
 - if ( p ! = null ) { 
 - for ( Object o : p . getMessages ( ) ) { 
 - self ( ) . sendFirst ( o , self ( ) ) ; 
 + if ( pendingSessions . size ( ) > 0 ) { 
 + PendingSession p = pendingSessions . remove ( 0 ) ; 
 + if ( p ! = null ) { 
 + for ( Object o : p . getMessages ( ) ) { 
 + self ( ) . sendFirst ( o , self ( ) ) ; 
 + } 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorApp / AppDelegate . swift b / actor - sdk / sdk - core - ios / ActorApp / AppDelegate . swift 
 index c38d4cd . . 56b461b 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorApp / AppDelegate . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorApp / AppDelegate . swift 
 @ @ - 22 , 6 + 22 , 9 @ @ import ActorSDK 
 
 ActorSDK . sharedActor ( ) . style . searchStatusBarStyle = . Default 
 
 + / / Enabling experimental features 
 + ActorSDK . sharedActor ( ) . enableExperimentalFeatures = true 
 + 
 / / Creating Actor 
 ActorSDK . sharedActor ( ) . createActor ( ) 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index 9bf41a2 . . f26bdd0 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 172 , 6 + 172 , 9 @ @ 
 	 	 06CE898A1BD8401C005A5530 / * Reachability . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06CE89891BD8401C005A5530 / * Reachability . swift * / ; } ; 
 	 	 06CE898C1BD841C9005A5530 / * SystemConfiguration . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / ; } ; 
 	 	 06CE89901BD84DF5005A5530 / * ActorSDKAnalytics . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06CE898F1BD84DF5005A5530 / * ActorSDKAnalytics . swift * / ; } ; 
 + 	 	 06E7B2471C0F8D7A0090660C / * LocationPickerController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E7B2461C0F8D7A0090660C / * LocationPickerController . swift * / ; } ; 
 + 	 	 06E7B24A1C0F92140090660C / * AABubbleLocationCell . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E7B2491C0F92140090660C / * AABubbleLocationCell . swift * / ; } ; 
 + 	 	 06E7B24C1C0FAB500090660C / * AAMapFastView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E7B24B1C0FAB500090660C / * AAMapFastView . swift * / ; } ; 
 	 	 697B3A12994653F581459F63 / * Pods _ ActorSDK . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 9A22DF21664BBB34087283F6 / * Pods _ ActorSDK . framework * / ; } ; 
 / * End PBXBuildFile section * / 
 
 @ @ - 347 , 6 + 350 , 9 @ @ 
 	 	 06CE89891BD8401C005A5530 / * Reachability . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = Reachability . swift ; sourceTree = " < group > " ; } ; 
 	 	 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / = { isa = PBXFileReference ; lastKnownFileType = wrapper . framework ; name = SystemConfiguration . framework ; path = System / Library / Frameworks / SystemConfiguration . framework ; sourceTree = SDKROOT ; } ; 
 	 	 06CE898F1BD84DF5005A5530 / * ActorSDKAnalytics . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = ActorSDKAnalytics . swift ; sourceTree = " < group > " ; } ; 
 + 	 	 06E7B2461C0F8D7A0090660C / * LocationPickerController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = LocationPickerController . swift ; sourceTree = " < group > " ; } ; 
 + 	 	 06E7B2491C0F92140090660C / * AABubbleLocationCell . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AABubbleLocationCell . swift ; sourceTree = " < group > " ; } ; 
 + 	 	 06E7B24B1C0FAB500090660C / * AAMapFastView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAMapFastView . swift ; sourceTree = " < group > " ; } ; 
 	 	 22BAEA363892E475F59B7E9F / * Pods - ActorSDK . debug . xcconfig * / = { isa = PBXFileReference ; includeInIndex = 1 ; lastKnownFileType = text . xcconfig ; name = " Pods - ActorSDK . debug . xcconfig " ; path = " Pods / Target Support Files / Pods - ActorSDK / Pods - ActorSDK . debug . xcconfig " ; sourceTree = " < group > " ; } ; 
 	 	 333F91AE5263DD450666CC87 / * Pods - ActorSDK . release . xcconfig * / = { isa = PBXFileReference ; includeInIndex = 1 ; lastKnownFileType = text . xcconfig ; name = " Pods - ActorSDK . release . xcconfig " ; path = " Pods / Target Support Files / Pods - ActorSDK / Pods - ActorSDK . release . xcconfig " ; sourceTree = " < group > " ; } ; 
 	 	 9A22DF21664BBB34087283F6 / * Pods _ ActorSDK . framework * / = { isa = PBXFileReference ; explicitFileType = wrapper . framework ; includeInIndex = 0 ; path = Pods _ ActorSDK . framework ; sourceTree = BUILT _ PRODUCTS _ DIR ; } ; 
 @ @ - 530 , 6 + 536 , 7 @ @ 
 	 	 	 	 069CF4C31BCB908C00C66E12 / * CLTokenInputView * / , 
 	 	 	 	 066A52321BC4EEBA000E606E / * Cells * / , 
 	 	 	 	 066A52141BC4EE04000E606E / * AAAvatarView . swift * / , 
 + 	 	 	 	 06E7B24B1C0FAB500090660C / * AAMapFastView . swift * / , 
 	 	 	 	 066A52461BC4EED5000E606E / * AAProgressView . swift * / , 
 	 	 	 	 066A523A1BC4EECD000E606E / * AABigPlaceholderView . swift * / , 
 	 	 	 	 066A523C1BC4EECD000E606E / * AATableViewHeader . swift * / , 
 @ @ - 589 , 6 + 596 , 7 @ @ 
 	 	 	 	 066A52F91BC52FA0000E606E / * Compose * / , 
 	 	 	 	 066A52601BC50E6B000E606E / * Auth * / , 
 	 	 	 	 066A52C41BC521D5000E606E / * Content * / , 
 + 	 	 	 	 06E7B2451C0F8D410090660C / * Location * / , 
 	 	 	 	 066A527B1BC51EC6000E606E / * Root * / , 
 	 	 	 	 066A52181BC4EE9A000E606E / * Managed Runtime * / , 
 	 	 	 ) ; 
 @ @ - 832 , 6 + 840 , 7 @ @ 
 	 	 	 	 066A53281BC53406000E606E / * AABubbleBaseFileCell . swift * / , 
 	 	 	 	 066A53291BC53406000E606E / * AABubbleMediaCell . swift * / , 
 	 	 	 	 066A532A1BC53406000E606E / * AABubbleDocumentCell . swift * / , 
 + 	 	 	 	 06E7B2491C0F92140090660C / * AABubbleLocationCell . swift * / , 
 	 	 	 ) ; 
 	 	 	 path = Cell ; 
 	 	 	 sourceTree = " < group > " ; 
 @ @ - 878 , 6 + 887 , 14 @ @ 
 	 	 	 name = CLTokenInputView ; 
 	 	 	 sourceTree = " < group > " ; 
 	 	 } ; 
 + 	 	 06E7B2451C0F8D410090660C / * Location * / = { 
 + 	 	 	 isa = PBXGroup ; 
 + 	 	 	 children = ( 
 + 	 	 	 	 06E7B2461C0F8D7A0090660C / * LocationPickerController . swift * / , 
 + 	 	 	 ) ; 
 + 	 	 	 path = Location ; 
 + 	 	 	 sourceTree = " < group > " ; 
 + 	 	 } ; 
 	 	 2F428D134E194A828C3DF863 / * Frameworks * / = { 
 	 	 	 isa = PBXGroup ; 
 	 	 	 children = ( 
 @ @ - 1107 , 6 + 1124 , 7 @ @ 
 	 	 	 	 066A53171BC533DD000E606E / * AABubbles . swift in Sources * / , 
 	 	 	 	 066A52081BC4E962000E606E / * Makefile in Sources * / , 
 	 	 	 	 066A53231BC533F5000E606E / * Caches . swift in Sources * / , 
 + 	 	 	 	 06E7B2471C0F8D7A0090660C / * LocationPickerController . swift in Sources * / , 
 	 	 	 	 066A52691BC50E7B000E606E / * AAAuthRegisterViewController . swift in Sources * / , 
 	 	 	 	 066A51501BC4BE06000E606E / * AARegex . swift in Sources * / , 
 	 	 	 	 06CE89901BD84DF5005A5530 / * ActorSDKAnalytics . swift in Sources * / , 
 @ @ - 1171 , 6 + 1189 , 7 @ @ 
 	 	 	 	 066A52241BC4EEAC000E606E / * AAManagedRange . swift in Sources * / , 
 	 	 	 	 066A50E21BC4AF9F000E606E / * ActorSDK . swift in Sources * / , 
 	 	 	 	 06CE898A1BD8401C005A5530 / * Reachability . swift in Sources * / , 
 + 	 	 	 	 06E7B24C1C0FAB500090660C / * AAMapFastView . swift in Sources * / , 
 	 	 	 	 066A516D1BC4C366000E606E / * ActorCoreExt . swift in Sources * / , 
 	 	 	 	 066A517E1BC4C373000E606E / * FMDatabaseAdditions . m in Sources * / , 
 	 	 	 	 066A519A1BC4C390000E606E / * FMDBList . swift in Sources * / , 
 @ @ - 1187 , 6 + 1206 , 7 @ @ 
 	 	 	 	 066A52231BC4EEAC000E606E / * AAManagedSection . swift in Sources * / , 
 	 	 	 	 066A52D11BC52204000E606E / * AADialogCell . swift in Sources * / , 
 	 	 	 	 066A51901BC4C383000E606E / * CocoaNetworkRuntime . swift in Sources * / , 
 + 	 	 	 	 06E7B24A1C0F92140090660C / * AABubbleLocationCell . swift in Sources * / , 
 	 	 	 	 066A52581BC4EF61000E606E / * Alerts . swift in Sources * / , 
 	 	 	 	 066A51691BC4C366000E606E / * AATools . swift in Sources * / , 
 	 	 	 	 066A53201BC533F5000E606E / * AABubbleBackgroundProcessor . swift in Sources * / , 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / LocationPin . imageset / Contents . json b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / LocationPin . imageset / Contents . json 
 new file mode 100644 
 index 0000000 . . 3f92572 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / LocationPin . imageset / Contents . json 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + { 
 + " images " : [ 
 + { 
 + " idiom " : " universal " , 
 + " filename " : " LocationPin @ 2x . png " , 
 + " scale " : " 2x " 
 + } 
 + ] , 
 + " info " : { 
 + " version " : 1 , 
 + " author " : " xcode " 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / LocationPin . imageset / LocationPin @ 2x . png b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / LocationPin . imageset / LocationPin @ 2x . png 
 new file mode 100644 
 index 0000000 . . 709d3b0 
 Binary files / dev / null and b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / LocationPin . imageset / LocationPin @ 2x . png differ 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 index 587321a . . 9edb0ad 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 @ @ - 82 , 6 + 82 , 9 @ @ public class ActorSDK { 
 / / / Extensions 
 private var extensions = [ ActorExtension ] ( ) 
 
 + / / / Enable experimental features 
 + public var enableExperimentalFeatures : Bool = false 
 + 
 / / 
 / / User Onlines 
 / / 
 @ @ - 91 , 7 + 94 , 7 @ @ public class ActorSDK { 
 
 / / / Disable this if you want manually handle online states 
 public var automaticOnlineHandling = true 
 - 
 + 
 / / 
 / / Internal State 
 / / 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AABubbles . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AABubbles . swift 
 index ca23c70 . . a98f2ef 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AABubbles . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AABubbles . swift 
 @ @ - 10 , 11 + 10 , 13 @ @ class AABubbles { 
 static let mediaLayouter = AABubbleMediaCellLayouter ( ) 
 static let documentLayouter = AABubbleDocumentCellLayout ( ) 
 static let serviceLayouter = AABubbleServiceCellLayouter ( ) 
 + static let locationLayouter = AABubbleLocationCellLayouter ( ) 
 
 static let builtInLayouters : [ AABubbleLayouter ] = [ 
 serviceLayouter , 
 mediaLayouter , 
 documentLayouter , 
 + locationLayouter , 
 textLayouter 
 ] 
 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleLocationCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleLocationCell . swift 
 new file mode 100644 
 index 0000000 . . 1c539ce 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleLocationCell . swift 
 @ @ - 0 , 0 + 1 , 179 @ @ 
 + / / 
 + / / Copyright ( c ) 2014 - 2015 Actor LLC . < https : / / actor . im > 
 + / / 
 + 
 + import Foundation 
 + import MapKit 
 + 
 + private let mapWidth : CGFloat = 200 
 + private let mapHeight : CGFloat = 160 
 + 
 + public class AABubbleLocationCell : AABubbleCell { 
 + 
 + private let map = AAMapFastView ( mapWidth : mapWidth , mapHeight : mapHeight ) 
 + 
 + private let pin = UIImageView ( ) 
 + private let timeBg = UIImageView ( ) 
 + private let timeLabel = UILabel ( ) 
 + private let statusView = UIImageView ( ) 
 + 
 + private var bindedLat : Double ? = nil 
 + private var bindedLon : Double ? = nil 
 + 
 + public init ( frame : CGRect ) { 
 + super . init ( frame : frame , isFullSize : false ) 
 + 
 + timeBg . image = Imaging . imageWithColor ( appStyle . chatMediaDateBgColor , size : CGSize ( width : 1 , height : 1 ) ) 
 + 
 + timeLabel . font = UIFont . italicSystemFontOfSize ( 11 ) 
 + timeLabel . textColor = appStyle . chatMediaDateColor 
 + 
 + statusView . contentMode = UIViewContentMode . Center 
 + 
 + pin . image = UIImage . bundled ( " LocationPin " ) 
 + 
 + contentView . addSubview ( map ) 
 + map . addSubview ( pin ) 
 + 
 + contentView . addSubview ( timeBg ) 
 + contentView . addSubview ( timeLabel ) 
 + contentView . addSubview ( statusView ) 
 + 
 + contentInsets = UIEdgeInsets ( top : 1 , left : 1 , bottom : 1 , right : 1 ) 
 + 
 + map . addGestureRecognizer ( UITapGestureRecognizer ( target : self , action : " mapDidTap " ) ) 
 + map . userInteractionEnabled = true 
 + } 
 + 
 + public required init ( coder aDecoder : NSCoder ) { 
 + fatalError ( " init ( coder : ) has not been implemented " ) 
 + } 
 + 
 + func mapDidTap ( ) { 
 + let url = " http : / / maps . apple . com / ? q = \ ( bindedLat ! ) , \ ( bindedLon ! ) " 
 + / / print ( " url : \ ( url ) " ) 
 + UIApplication . sharedApplication ( ) . openURL ( NSURL ( string : url ) ! ) 
 + } 
 + 
 + public override func bind ( message : ACMessage , reuse : Bool , cellLayout : AACellLayout , setting : AACellSetting ) { 
 + 
 + let layout = cellLayout as ! AALocationCellLayout 
 + 
 + bindedLat = layout . latitude 
 + bindedLon = layout . longitude 
 + 
 + bubbleInsets = UIEdgeInsets ( 
 + top : setting . clenchTop ? AABubbleCell . bubbleTopCompact : AABubbleCell . bubbleTop , 
 + left : 10 + ( AADevice . isiPad ? 16 : 0 ) , 
 + bottom : setting . clenchBottom ? AABubbleCell . bubbleBottomCompact : AABubbleCell . bubbleBottom , 
 + right : 10 + ( AADevice . isiPad ? 16 : 0 ) ) 
 + 
 + if ( ! reuse ) { 
 + 
 + / / Bind bubble 
 + if ( self . isOut ) { 
 + bindBubbleType ( BubbleType . MediaOut , isCompact : false ) 
 + } else { 
 + bindBubbleType ( BubbleType . MediaIn , isCompact : false ) 
 + } 
 + } 
 + 
 + map . bind ( layout . latitude , longitude : layout . longitude ) 
 + 
 + / / Update time 
 + timeLabel . text = cellLayout . date 
 + 
 + / / Update status 
 + if ( isOut ) { 
 + statusView . hidden = false 
 + switch ( UInt ( message . messageState . ordinal ( ) ) ) { 
 + case ACMessageState . PENDING . rawValue : 
 + self . statusView . image = appStyle . chatIconClock ; 
 + self . statusView . tintColor = appStyle . chatStatusMediaSending 
 + break ; 
 + case ACMessageState . SENT . rawValue : 
 + self . statusView . image = appStyle . chatIconCheck1 ; 
 + self . statusView . tintColor = appStyle . chatStatusMediaSent 
 + break ; 
 + case ACMessageState . RECEIVED . rawValue : 
 + self . statusView . image = appStyle . chatIconCheck2 ; 
 + self . statusView . tintColor = appStyle . chatStatusMediaReceived 
 + break ; 
 + case ACMessageState . READ . rawValue : 
 + self . statusView . image = appStyle . chatIconCheck2 ; 
 + self . statusView . tintColor = appStyle . chatStatusMediaRead 
 + break ; 
 + case ACMessageState . ERROR . rawValue : 
 + self . statusView . image = appStyle . chatIconError ; 
 + self . statusView . tintColor = appStyle . chatStatusMediaError 
 + break 
 + default : 
 + self . statusView . image = appStyle . chatIconClock ; 
 + self . statusView . tintColor = appStyle . chatStatusMediaSending 
 + break ; 
 + } 
 + } else { 
 + statusView . hidden = true 
 + } 
 + } 
 + 
 + public override func layoutContent ( maxWidth : CGFloat , offsetX : CGFloat ) { 
 + let insets = fullContentInsets 
 + 
 + layoutBubble ( mapWidth , contentHeight : mapHeight ) 
 + 
 + if isOut { 
 + map . frame = CGRectMake ( maxWidth - insets . right - mapWidth , insets . top , mapWidth , mapHeight ) 
 + } else { 
 + map . frame = CGRectMake ( insets . left , insets . top , mapWidth , mapHeight ) 
 + } 
 + 
 + timeLabel . frame = CGRectMake ( 0 , 0 , 1000 , 1000 ) 
 + timeLabel . sizeToFit ( ) 
 + 
 + let timeWidth = ( isOut ? 23 : 0 ) + timeLabel . bounds . width 
 + let timeHeight : CGFloat = 20 
 + 
 + timeLabel . frame = CGRectMake ( map . frame . maxX - timeWidth - 18 , map . frame . maxY - timeHeight - 6 , timeLabel . frame . width , timeHeight ) 
 + 
 + if ( isOut ) { 
 + statusView . frame = CGRectMake ( timeLabel . frame . maxX , timeLabel . frame . minY , 23 , timeHeight ) 
 + } 
 + 
 + pin . frame = CGRectMake ( ( map . width - pin . image ! . size . width ) / 2 , ( map . height - pin . image ! . size . height ) / 2 , 
 + pin . image ! . size . width , pin . image ! . size . height ) 
 + 
 + timeBg . frame = CGRectMake ( timeLabel . frame . minX - 3 , timeLabel . frame . minY - 1 , timeWidth + 6 , timeHeight + 2 ) 
 + } 
 + } 
 + 
 + public class AALocationCellLayout : AACellLayout { 
 + 
 + let latitude : Double 
 + let longitude : Double 
 + 
 + init ( latitude : Double , longitude : Double , date : Int64 ) { 
 + self . latitude = latitude 
 + self . longitude = longitude 
 + super . init ( height : mapHeight , date : date , key : " location " ) 
 + } 
 + } 
 + 
 + public class AABubbleLocationCellLayouter : AABubbleLayouter { 
 + 
 + public func isSuitable ( message : ACMessage ) - > Bool { 
 + if ( message . content is ACLocationContent ) { 
 + return true 
 + } 
 + return false 
 + } 
 + 
 + public func buildLayout ( peer : ACPeer , message : ACMessage ) - > AACellLayout { 
 + let content = message . content as ! ACLocationContent 
 + return AALocationCellLayout ( latitude : Double ( content . getLatitude ( ) ) , longitude : Double ( content . getLongitude ( ) ) , date : Int64 ( message . date ) ) 
 + } 
 + 
 + public func cellClass ( ) - > AnyClass { 
 + return AABubbleLocationCell . self 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 index 7704094 . . af819ab 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 @ @ - 308 , 6 + 308 , 12 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 self . pickDocument ( ) 
 } 
 
 + if ( ActorSDK . sharedActor ( ) . enableExperimentalFeatures ) { 
 + builder . add ( " Location " ) { ( ) - > ( ) in 
 + self . pickLocation ( ) 
 + } 
 + } 
 + 
 showActionSheet ( builder . items , cancelButton : " AlertCancel " , destructButton : nil , sourceView : self . leftButton , sourceRect : self . leftButton . bounds , tapClosure : builder . tapClosure ) 
 } 
 
 @ @ - 452 , 4 + 458 , 10 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 func imagePickerControllerDidCancel ( picker : UIImagePickerController ) { 
 picker . dismissViewControllerAnimated ( true , completion : nil ) 
 } 
 + 
 + / / Location picking 
 + 
 + func pickLocation ( ) { 
 + 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Location / LocationPickerController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Location / LocationPickerController . swift 
 new file mode 100644 
 index 0000000 . . 123575a 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Location / LocationPickerController . swift 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + / / 
 + / / Copyright ( c ) 2014 - 2015 Actor LLC . < https : / / actor . im > 
 + / / 
 + 
 + import Foundation 
 + import MapKit 
 + 
 + class AALocationPickerController : AAViewController { 
 + 
 + let map = MKMapView ( ) 
 + 
 + override func viewDidLoad ( ) { 
 + super . viewDidLoad ( ) 
 + 
 + self . view . addSubview ( map ) 
 + } 
 + 
 + 
 + override func viewDidLayoutSubviews ( ) { 
 + super . viewDidLayoutSubviews ( ) 
 + 
 + map . frame = self . view . bounds 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift 
 index 3d7e2c7 . . bf761a5 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift 
 @ @ - 17 , 8 + 17 , 8 @ @ public class AAAvatarView : UIImageView { 
 
 var enableAnimation : Bool = false 
 
 - private let cacheSize = 10 
 - private var avatarCache = Dictionary < Int , AASwiftlyLRU < Int64 , UIImage > > ( ) 
 + private static let cacheSize = 10 
 + private static var avatarCache = Dictionary < Int , AASwiftlyLRU < Int64 , UIImage > > ( ) 
 
 private var bindedFileId : jlong ! = nil 
 private var bindedTitle : String ! = nil 
 @ @ - 233 , 7 + 233 , 7 @ @ public class AAAvatarView : UIImageView { 
 / / 
 
 private func checkCache ( size : Int , id : Int64 ) - > UIImage ? { 
 - if let cache = avatarCache [ size ] { 
 + if let cache = AAAvatarView . avatarCache [ size ] { 
 if let img = cache [ id ] { 
 return img 
 } 
 @ @ - 242 , 12 + 242 , 12 @ @ public class AAAvatarView : UIImageView { 
 } 
 
 private func putToCache ( size : Int , id : Int64 , image : UIImage ) { 
 - if let cache = avatarCache [ size ] { 
 + if let cache = AAAvatarView . avatarCache [ size ] { 
 cache [ id ] = image 
 } else { 
 - let cache = AASwiftlyLRU < jlong , UIImage > ( capacity : cacheSize ) ; 
 + let cache = AASwiftlyLRU < jlong , UIImage > ( capacity : AAAvatarView . cacheSize ) ; 
 cache [ id ] = image 
 - avatarCache . updateValue ( cache , forKey : size ) 
 + AAAvatarView . avatarCache . updateValue ( cache , forKey : size ) 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAMapFastView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAMapFastView . swift 
 new file mode 100644 
 index 0000000 . . 217c38e 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAMapFastView . swift 
 @ @ - 0 , 0 + 1 , 58 @ @ 
 + / / 
 + / / Copyright ( c ) 2014 - 2015 Actor LLC . < https : / / actor . im > 
 + / / 
 + 
 + import Foundation 
 + import MapKit 
 + 
 + public class AAMapFastView : UIImageView { 
 + 
 + static private var mapCache = AASwiftlyLRU < String , UIImage > ( capacity : 16 ) 
 + 
 + let mapWidth : CGFloat 
 + let mapHeight : CGFloat 
 + var mapKey : String ? = nil 
 + 
 + public init ( mapWidth : CGFloat , mapHeight : CGFloat ) { 
 + self . mapWidth = mapWidth 
 + self . mapHeight = mapHeight 
 + super . init ( image : nil ) 
 + } 
 + 
 + required public init ? ( coder aDecoder : NSCoder ) { 
 + fatalError ( " init ( coder : ) has not been implemented " ) 
 + } 
 + 
 + func bind ( latitude : Double , longitude : Double ) { 
 + let key = " \ ( Int ( latitude * 1000000 ) ) _ \ ( Int ( longitude * 1000000 ) ) " 
 + 
 + / / Same Key 
 + if ( self . mapKey = = key ) { 
 + return 
 + } 
 + 
 + self . mapKey = key 
 + 
 + let cached = AAMapFastView . mapCache [ key ] 
 + if ( cached ! = nil ) { 
 + self . image = cached 
 + return 
 + } 
 + 
 + let options = MKMapSnapshotOptions ( ) 
 + options . region = MKCoordinateRegion ( center : CLLocationCoordinate2D ( latitude : latitude , longitude : longitude ) , span : MKCoordinateSpan ( latitudeDelta : 0 . 005 , longitudeDelta : 0 . 005 ) ) 
 + options . size = CGSizeMake ( mapWidth , mapHeight ) 
 + options . scale = UIScreen . mainScreen ( ) . scale 
 + 
 + let snapshotter = MKMapSnapshotter ( options : options ) 
 + snapshotter . startWithCompletionHandler { snapshot , error in 
 + if let img = snapshot ? . image { 
 + let rounded = img . roundCorners ( img . size . width , h : img . size . height , roundSize : 14 ) 
 + dispatchOnUi { 
 + AAMapFastView . mapCache [ key ] = rounded 
 + self . image = rounded 
 + } 
 + } 
 + } 
 + } 
 + } 
 \ No newline at end of file
