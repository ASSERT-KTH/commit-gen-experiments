BLEU SCORE: 0.21142141714303078

TEST MSG: fix ( server : dialog ) : handle queries when stashing to send message
GENERATED MSG: fix ( server : messaging ) : delete chat fix

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > index 21ae5fa . . 5dc25f5 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > @ @ - 40 , 7 + 40 , 7 @ @ trait DialogCommandHandlers extends PeersImplicits with UserAcl { < nl > replyTo forward fail < nl > context . become ( receiveCommand ) < nl > unstashAll ( ) < nl > - } : Receive ) orElse reactions , discardOld = true ) < nl > + } : Receive ) orElse reactions orElse queries , discardOld = true ) < nl > < nl > val optClientAuthId = sm . senderAuthId < nl > withValidAccessHash ( sm . getDest , optClientAuthId , sm . accessHash ) { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > index 4d0ad5e . . 7cc3885 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > @ @ - 218 , 7 + 218 , 7 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit < nl > < nl > / / DialogRootOperations < nl > def unarchive ( userId : Int , clientAuthId : Long , peer : Peer ) : Future [ SeqState ] = < nl > - withValidPeer ( peer , userId , failed = Future . failed [ SeqState ] ( DialogErrors . MessageToSelf ) ) { < nl > + withValidPeer ( peer , userId ) { < nl > ( userExt . processorRegion . ref ? < nl > UserEnvelope ( userId ) < nl > . withDialogRootEnvelope ( < nl > @ @ - 228 , 7 + 228 , 7 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit < nl > } < nl > < nl > def archive ( userId : Int , clientAuthId : Long , peer : Peer ) : Future [ SeqState ] = < nl > - withValidPeer ( peer , userId , failed = Future . failed [ SeqState ] ( DialogErrors . MessageToSelf ) ) { < nl > + withValidPeer ( peer , userId ) { < nl > ( userExt . processorRegion . ref ? < nl > UserEnvelope ( userId ) < nl > . withDialogRootEnvelope ( < nl > @ @ - 238 , 7 + 238 , 7 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit < nl > } < nl > < nl > def favourite ( userId : Int , clientAuthId : Long , peer : Peer ) : Future [ SeqState ] = < nl > - withValidPeer ( peer , userId , failed = Future . failed [ SeqState ] ( DialogErrors . MessageToSelf ) ) { < nl > + withValidPeer ( peer , userId ) { < nl > ( userExt . processorRegion . ref ? < nl > UserEnvelope ( userId ) < nl > . withDialogRootEnvelope ( < nl > @ @ - 248 , 7 + 248 , 7 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit < nl > } < nl > < nl > def unfavourite ( userId : Int , clientAuthId : Long , peer : Peer ) : Future [ SeqState ] = < nl > - withValidPeer ( peer , userId , failed = Future . failed [ SeqState ] ( DialogErrors . MessageToSelf ) ) { < nl > + withValidPeer ( peer , userId ) { < nl > ( userExt . processorRegion . ref ? < nl > UserEnvelope ( userId ) < nl > . withDialogRootEnvelope ( DialogRootEnvelope ( ) . withUnfavourite ( DialogRootCommands . Unfavourite ( Some ( peer ) , clientAuthId ) ) ) ) < nl > @ @ - 263 , 7 + 263 , 7 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit < nl > } < nl > < nl > def bump ( userId : Int , peer : Peer ) : Future [ Unit ] = < nl > - withValidPeer ( peer , userId , failed = Future . failed [ Unit ] ( DialogErrors . MessageToSelf ) ) { < nl > + withValidPeer ( peer , userId ) { < nl > ( userExt . processorRegion . ref ? < nl > UserEnvelope ( userId ) < nl > . withDialogRootEnvelope ( < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > index 19c4f30 . . 720885d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > @ @ - 1 , 8 + 1 , 8 @ @ < nl > package im . actor . server . dialog < nl > < nl > import akka . actor . _ < nl > - import akka . event . Logging < nl > import akka . http . scaladsl . util . FastFuture < nl > + import akka . pattern . pipe < nl > import akka . util . Timeout < nl > import com . github . benmanes . caffeine . cache . Cache < nl > import im . actor . api . rpc . misc . ApiExtension < nl > @ @ - 115 , 6 + 115 , 9 @ @ private [ dialog ] final class DialogProcessor ( val userId : Int , val peer : Peer , ext < nl > case WriteMessageSelf ( _ , senderUserId , date , randomId , message ) ⇒ writeMessageSelf ( senderUserId , date , randomId , message ) < nl > } < nl > < nl > + / / queries that dialog can actually reply when sending messages < nl > + def queries : Receive = handleQuery andThen ( _ pipeTo sender ( ) ) < nl > + < nl > / * * < nl > * dialog owner invokes ` dc ` < nl > * destination should be ` peer ` and origin should be ` selfPeer ` < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > index 00cfb77 . . d3f97ff 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > @ @ - 254 , 8 + 254 , 8 @ @ private [ user ] final class UserProcessor < nl > case query : GetLocalName ⇒ contacts . ref forward query < nl > case StopOffice ⇒ context stop self < nl > case ReceiveTimeout ⇒ context . parent ! ShardRegion . Passivate ( stopMessage = StopOffice ) < nl > - case e @ DialogRootEnvelope ( query , command ) ⇒ < nl > - val msg = e . getAllFields . values . head < nl > + case env : DialogRootEnvelope ⇒ < nl > + val msg = env . getAllFields . values . head < nl > < nl > ( dialogRoot ( state . internalExtensions ) ? msg ) pipeTo sender ( ) < nl > case de : DialogEnvelope ⇒
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / dialog . proto b / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > index 6ec13a8 . . ae2fd6a 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > @ @ - 21 , 6 + 21 , 7 @ @ message DialogCommands { < nl > MessageRead message _ read = 5 ; < nl > Show show = 6 ; < nl > Hide hide = 7 ; < nl > + Delete delete = 8 ; < nl > } < nl > } < nl > < nl > @ @ - 85 , 4 + 86 , 10 @ @ message DialogCommands { < nl > required Peer dest = 1 ; < nl > } < nl > < nl > + message Delete { < nl > + option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogCommand " ; < nl > + < nl > + required Peer dest = 1 ; < nl > + } < nl > + < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > index 0a7864f . . 41607a4 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > @ @ - 1 , 6 + 1 , 6 @ @ < nl > package im . actor . server . dialog < nl > < nl > - import akka . actor . { ActorRef , Status } < nl > + import akka . actor . { PoisonPill , ActorRef , Status } < nl > import akka . pattern . pipe < nl > import im . actor . api . rpc . PeersImplicits < nl > import im . actor . api . rpc . messaging . _ < nl > @ @ - 179 , 6 + 179 , 22 @ @ trait DialogCommandHandlers extends UpdateCounters with PeersImplicits { < nl > } < nl > } < nl > < nl > + protected def delete ( state : DialogState ) : Unit = { < nl > + val update = UpdateChatDelete ( peer . asStruct ) < nl > + < nl > + val future = < nl > + for { < nl > + _ ← db . run ( < nl > + HistoryMessageRepo . deleteAll ( userId , peer ) < nl > + andThen DialogRepo . delete ( userId , peer ) < nl > + ) < nl > + _ ← userExt . notifyDialogsChanged ( userId ) < nl > + seqstate ← seqUpdExt . deliverSingleUpdate ( userId , update ) < nl > + } yield seqstate < nl > + < nl > + future pipeTo sender ( ) onSuccess { case _ ⇒ self ! PoisonPill } < nl > + } < nl > + < nl > private def mustMakeReceive ( state : DialogState , mr : MessageReceived ) : Boolean = < nl > ( mr . date > state . lastReceiveDate ) & & / / receive date is later than last receive date < nl > ( mr . date < = mr . now ) & & / / and receive date is not in future < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > index 461366f . . 8deb88d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > @ @ - 23 , 6 + 23 , 7 @ @ import slick . dbio . DBIO < nl > < nl > import scala . concurrent . duration . _ < nl > import scala . concurrent . { ExecutionContext , Future } < nl > + import scala . reflect . ClassTag < nl > < nl > sealed trait DialogGroup { < nl > def key : String < nl > @ @ - 60 , 7 + 61 , 7 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit < nl > < nl > private val log = Logging ( system , getClass ) < nl > < nl > - private def withValidPeer [ A ] ( peer : Peer , senderUserId : Int , failed : ⇒ A ) ( f : ⇒ A ) : A = < nl > + private def withValidPeer [ A ] ( peer : Peer , senderUserId : Int , failed : ⇒ Future [ A ] = Future . failed [ A ] ( DialogErrors . MessageToSelf ) ) ( f : ⇒ Future [ A ] ) : Future [ A ] = < nl > peer match { < nl > case Peer ( PeerType . Private , id ) if id = = senderUserId ⇒ < nl > log . error ( s " Attempt to work with yourself , userId : $ senderUserId " ) < nl > @ @ - 124 , 6 + 125 , 11 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit < nl > ( userExt . processorRegion . ref ? Envelope ( Peer . privat ( userId ) ) . withHide ( Hide ( peer ) ) ) . mapTo [ SeqState ] < nl > } < nl > < nl > + def delete ( userId : Int , peer : Peer ) : Future [ SeqState ] = < nl > + withValidPeer ( peer , userId ) { < nl > + ( userExt . processorRegion . ref ? Envelope ( Peer . privat ( userId ) ) . withDelete ( Delete ( peer ) ) ) . mapTo [ SeqState ] < nl > + } < nl > + < nl > def getDeliveryExtension ( extensions : Seq [ ApiExtension ] ) : DeliveryExtension = { < nl > extensions match { < nl > case Seq ( ) ⇒ < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > index 78a18df . . b922722 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > @ @ - 13 , 7 + 13 , 7 @ @ import im . actor . server . cqrs . ProcessorState < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . model . { Dialog ⇒ DialogModel , Peer } < nl > import im . actor . server . persist . DialogRepo < nl > - import im . actor . server . sequence . SeqStateDate < nl > + import im . actor . server . sequence . { SeqUpdatesExtension , SeqStateDate } < nl > import im . actor . server . social . SocialExtension < nl > import im . actor . server . user . UserExtension < nl > import im . actor . util . cache . CacheHelpers . _ < nl > @ @ - 105 , 6 + 105 , 7 @ @ private [ dialog ] final class DialogProcessor ( val userId : Int , val peer : Peer , ext < nl > < nl > protected val dialogExt = DialogExtension ( system ) < nl > protected val deliveryExt = dialogExt . getDeliveryExtension ( extensions ) < nl > + protected val seqUpdExt = SeqUpdatesExtension ( context . system ) < nl > < nl > protected val selfPeer : Peer = Peer . privat ( userId ) < nl > < nl > @ @ - 134 , 6 + 135 , 7 @ @ private [ dialog ] final class DialogProcessor ( val userId : Int , val peer : Peer , ext < nl > case WriteMessage ( _ , _ , date , randomId , message ) ⇒ writeMessage ( date , randomId , message ) < nl > case Show ( _ ) ⇒ show ( state ) < nl > case Hide ( _ ) ⇒ hide ( state ) < nl > + case Delete ( _ ) ⇒ delete ( state ) < nl > } < nl > < nl > / * * < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > index 358c65b . . b759493 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > @ @ - 59 , 17 + 59 , 11 @ @ trait HistoryHandlers { < nl > } < nl > < nl > override def jhandleDeleteChat ( peer : ApiOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { < nl > - val action = requireAuth ( clientData ) . map { implicit client ⇒ < nl > - val update = UpdateChatDelete ( peer . asPeer ) < nl > - < nl > + authorized ( clientData ) { implicit client ⇒ < nl > for { < nl > - _ ← persist . HistoryMessageRepo . deleteAll ( client . userId , peer . asModel ) < nl > - _ ← persist . DialogRepo . delete ( client . userId , peer . asModel ) < nl > - seqstate ← DBIO . from ( userExt . broadcastClientUpdate ( update , None , isFat = false ) ) < nl > - } yield Ok ( ResponseSeq ( seqstate . seq , seqstate . state . toByteArray ) ) < nl > + SeqState ( seq , state ) ← dialogExt . delete ( client . userId , peer . asModel ) < nl > + } yield Ok ( ResponseSeq ( seq , state . toByteArray ) ) < nl > } < nl > - < nl > - db . run ( toDBIOAction ( action ) ) < nl > } < nl > < nl > override def jhandleLoadDialogs ( endDate : Long , limit : Int , clientData : ClientData ) : Future [ HandlerResult [ ResponseLoadDialogs ] ] = {

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 index 21ae5fa . . 5dc25f5 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 @ @ - 40 , 7 + 40 , 7 @ @ trait DialogCommandHandlers extends PeersImplicits with UserAcl { 
 replyTo forward fail 
 context . become ( receiveCommand ) 
 unstashAll ( ) 
 - } : Receive ) orElse reactions , discardOld = true ) 
 + } : Receive ) orElse reactions orElse queries , discardOld = true ) 
 
 val optClientAuthId = sm . senderAuthId 
 withValidAccessHash ( sm . getDest , optClientAuthId , sm . accessHash ) { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 index 4d0ad5e . . 7cc3885 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 @ @ - 218 , 7 + 218 , 7 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit 
 
 / / DialogRootOperations 
 def unarchive ( userId : Int , clientAuthId : Long , peer : Peer ) : Future [ SeqState ] = 
 - withValidPeer ( peer , userId , failed = Future . failed [ SeqState ] ( DialogErrors . MessageToSelf ) ) { 
 + withValidPeer ( peer , userId ) { 
 ( userExt . processorRegion . ref ? 
 UserEnvelope ( userId ) 
 . withDialogRootEnvelope ( 
 @ @ - 228 , 7 + 228 , 7 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit 
 } 
 
 def archive ( userId : Int , clientAuthId : Long , peer : Peer ) : Future [ SeqState ] = 
 - withValidPeer ( peer , userId , failed = Future . failed [ SeqState ] ( DialogErrors . MessageToSelf ) ) { 
 + withValidPeer ( peer , userId ) { 
 ( userExt . processorRegion . ref ? 
 UserEnvelope ( userId ) 
 . withDialogRootEnvelope ( 
 @ @ - 238 , 7 + 238 , 7 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit 
 } 
 
 def favourite ( userId : Int , clientAuthId : Long , peer : Peer ) : Future [ SeqState ] = 
 - withValidPeer ( peer , userId , failed = Future . failed [ SeqState ] ( DialogErrors . MessageToSelf ) ) { 
 + withValidPeer ( peer , userId ) { 
 ( userExt . processorRegion . ref ? 
 UserEnvelope ( userId ) 
 . withDialogRootEnvelope ( 
 @ @ - 248 , 7 + 248 , 7 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit 
 } 
 
 def unfavourite ( userId : Int , clientAuthId : Long , peer : Peer ) : Future [ SeqState ] = 
 - withValidPeer ( peer , userId , failed = Future . failed [ SeqState ] ( DialogErrors . MessageToSelf ) ) { 
 + withValidPeer ( peer , userId ) { 
 ( userExt . processorRegion . ref ? 
 UserEnvelope ( userId ) 
 . withDialogRootEnvelope ( DialogRootEnvelope ( ) . withUnfavourite ( DialogRootCommands . Unfavourite ( Some ( peer ) , clientAuthId ) ) ) ) 
 @ @ - 263 , 7 + 263 , 7 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit 
 } 
 
 def bump ( userId : Int , peer : Peer ) : Future [ Unit ] = 
 - withValidPeer ( peer , userId , failed = Future . failed [ Unit ] ( DialogErrors . MessageToSelf ) ) { 
 + withValidPeer ( peer , userId ) { 
 ( userExt . processorRegion . ref ? 
 UserEnvelope ( userId ) 
 . withDialogRootEnvelope ( 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 index 19c4f30 . . 720885d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 @ @ - 1 , 8 + 1 , 8 @ @ 
 package im . actor . server . dialog 
 
 import akka . actor . _ 
 - import akka . event . Logging 
 import akka . http . scaladsl . util . FastFuture 
 + import akka . pattern . pipe 
 import akka . util . Timeout 
 import com . github . benmanes . caffeine . cache . Cache 
 import im . actor . api . rpc . misc . ApiExtension 
 @ @ - 115 , 6 + 115 , 9 @ @ private [ dialog ] final class DialogProcessor ( val userId : Int , val peer : Peer , ext 
 case WriteMessageSelf ( _ , senderUserId , date , randomId , message ) ⇒ writeMessageSelf ( senderUserId , date , randomId , message ) 
 } 
 
 + / / queries that dialog can actually reply when sending messages 
 + def queries : Receive = handleQuery andThen ( _ pipeTo sender ( ) ) 
 + 
 / * * 
 * dialog owner invokes ` dc ` 
 * destination should be ` peer ` and origin should be ` selfPeer ` 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 index 00cfb77 . . d3f97ff 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 @ @ - 254 , 8 + 254 , 8 @ @ private [ user ] final class UserProcessor 
 case query : GetLocalName ⇒ contacts . ref forward query 
 case StopOffice ⇒ context stop self 
 case ReceiveTimeout ⇒ context . parent ! ShardRegion . Passivate ( stopMessage = StopOffice ) 
 - case e @ DialogRootEnvelope ( query , command ) ⇒ 
 - val msg = e . getAllFields . values . head 
 + case env : DialogRootEnvelope ⇒ 
 + val msg = env . getAllFields . values . head 
 
 ( dialogRoot ( state . internalExtensions ) ? msg ) pipeTo sender ( ) 
 case de : DialogEnvelope ⇒

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / dialog . proto b / actor - server / actor - core / src / main / protobuf / dialog . proto 
 index 6ec13a8 . . ae2fd6a 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / dialog . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / dialog . proto 
 @ @ - 21 , 6 + 21 , 7 @ @ message DialogCommands { 
 MessageRead message _ read = 5 ; 
 Show show = 6 ; 
 Hide hide = 7 ; 
 + Delete delete = 8 ; 
 } 
 } 
 
 @ @ - 85 , 4 + 86 , 10 @ @ message DialogCommands { 
 required Peer dest = 1 ; 
 } 
 
 + message Delete { 
 + option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogCommand " ; 
 + 
 + required Peer dest = 1 ; 
 + } 
 + 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 index 0a7864f . . 41607a4 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package im . actor . server . dialog 
 
 - import akka . actor . { ActorRef , Status } 
 + import akka . actor . { PoisonPill , ActorRef , Status } 
 import akka . pattern . pipe 
 import im . actor . api . rpc . PeersImplicits 
 import im . actor . api . rpc . messaging . _ 
 @ @ - 179 , 6 + 179 , 22 @ @ trait DialogCommandHandlers extends UpdateCounters with PeersImplicits { 
 } 
 } 
 
 + protected def delete ( state : DialogState ) : Unit = { 
 + val update = UpdateChatDelete ( peer . asStruct ) 
 + 
 + val future = 
 + for { 
 + _ ← db . run ( 
 + HistoryMessageRepo . deleteAll ( userId , peer ) 
 + andThen DialogRepo . delete ( userId , peer ) 
 + ) 
 + _ ← userExt . notifyDialogsChanged ( userId ) 
 + seqstate ← seqUpdExt . deliverSingleUpdate ( userId , update ) 
 + } yield seqstate 
 + 
 + future pipeTo sender ( ) onSuccess { case _ ⇒ self ! PoisonPill } 
 + } 
 + 
 private def mustMakeReceive ( state : DialogState , mr : MessageReceived ) : Boolean = 
 ( mr . date > state . lastReceiveDate ) & & / / receive date is later than last receive date 
 ( mr . date < = mr . now ) & & / / and receive date is not in future 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 index 461366f . . 8deb88d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 @ @ - 23 , 6 + 23 , 7 @ @ import slick . dbio . DBIO 
 
 import scala . concurrent . duration . _ 
 import scala . concurrent . { ExecutionContext , Future } 
 + import scala . reflect . ClassTag 
 
 sealed trait DialogGroup { 
 def key : String 
 @ @ - 60 , 7 + 61 , 7 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit 
 
 private val log = Logging ( system , getClass ) 
 
 - private def withValidPeer [ A ] ( peer : Peer , senderUserId : Int , failed : ⇒ A ) ( f : ⇒ A ) : A = 
 + private def withValidPeer [ A ] ( peer : Peer , senderUserId : Int , failed : ⇒ Future [ A ] = Future . failed [ A ] ( DialogErrors . MessageToSelf ) ) ( f : ⇒ Future [ A ] ) : Future [ A ] = 
 peer match { 
 case Peer ( PeerType . Private , id ) if id = = senderUserId ⇒ 
 log . error ( s " Attempt to work with yourself , userId : $ senderUserId " ) 
 @ @ - 124 , 6 + 125 , 11 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit 
 ( userExt . processorRegion . ref ? Envelope ( Peer . privat ( userId ) ) . withHide ( Hide ( peer ) ) ) . mapTo [ SeqState ] 
 } 
 
 + def delete ( userId : Int , peer : Peer ) : Future [ SeqState ] = 
 + withValidPeer ( peer , userId ) { 
 + ( userExt . processorRegion . ref ? Envelope ( Peer . privat ( userId ) ) . withDelete ( Delete ( peer ) ) ) . mapTo [ SeqState ] 
 + } 
 + 
 def getDeliveryExtension ( extensions : Seq [ ApiExtension ] ) : DeliveryExtension = { 
 extensions match { 
 case Seq ( ) ⇒ 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 index 78a18df . . b922722 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 @ @ - 13 , 7 + 13 , 7 @ @ import im . actor . server . cqrs . ProcessorState 
 import im . actor . server . db . DbExtension 
 import im . actor . server . model . { Dialog ⇒ DialogModel , Peer } 
 import im . actor . server . persist . DialogRepo 
 - import im . actor . server . sequence . SeqStateDate 
 + import im . actor . server . sequence . { SeqUpdatesExtension , SeqStateDate } 
 import im . actor . server . social . SocialExtension 
 import im . actor . server . user . UserExtension 
 import im . actor . util . cache . CacheHelpers . _ 
 @ @ - 105 , 6 + 105 , 7 @ @ private [ dialog ] final class DialogProcessor ( val userId : Int , val peer : Peer , ext 
 
 protected val dialogExt = DialogExtension ( system ) 
 protected val deliveryExt = dialogExt . getDeliveryExtension ( extensions ) 
 + protected val seqUpdExt = SeqUpdatesExtension ( context . system ) 
 
 protected val selfPeer : Peer = Peer . privat ( userId ) 
 
 @ @ - 134 , 6 + 135 , 7 @ @ private [ dialog ] final class DialogProcessor ( val userId : Int , val peer : Peer , ext 
 case WriteMessage ( _ , _ , date , randomId , message ) ⇒ writeMessage ( date , randomId , message ) 
 case Show ( _ ) ⇒ show ( state ) 
 case Hide ( _ ) ⇒ hide ( state ) 
 + case Delete ( _ ) ⇒ delete ( state ) 
 } 
 
 / * * 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 index 358c65b . . b759493 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 @ @ - 59 , 17 + 59 , 11 @ @ trait HistoryHandlers { 
 } 
 
 override def jhandleDeleteChat ( peer : ApiOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { 
 - val action = requireAuth ( clientData ) . map { implicit client ⇒ 
 - val update = UpdateChatDelete ( peer . asPeer ) 
 - 
 + authorized ( clientData ) { implicit client ⇒ 
 for { 
 - _ ← persist . HistoryMessageRepo . deleteAll ( client . userId , peer . asModel ) 
 - _ ← persist . DialogRepo . delete ( client . userId , peer . asModel ) 
 - seqstate ← DBIO . from ( userExt . broadcastClientUpdate ( update , None , isFat = false ) ) 
 - } yield Ok ( ResponseSeq ( seqstate . seq , seqstate . state . toByteArray ) ) 
 + SeqState ( seq , state ) ← dialogExt . delete ( client . userId , peer . asModel ) 
 + } yield Ok ( ResponseSeq ( seq , state . toByteArray ) ) 
 } 
 - 
 - db . run ( toDBIOAction ( action ) ) 
 } 
 
 override def jhandleLoadDialogs ( endDate : Long , limit : Int , clientData : ClientData ) : Future [ HandlerResult [ ResponseLoadDialogs ] ] = {
