BLEU SCORE: 0.3237722713145643

TEST MSG: refactor ( server : messaging ) : senderUserId in NewMessage event instead of boolean isIncoming
GENERATED MSG: feat ( server : messaging ) : implemented isOnlyForUser

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / dialog . proto b / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > index c1fc8f8 . . 01c3afc 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > @ @ - 294 , 7 + 294 , 7 @ @ message DialogEvents { < nl > < nl > int64 random _ id = 2 ; < nl > int64 date = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; < nl > - bool is _ incoming = 3 ; < nl > + int32 sender _ user _ id = 3 ; < nl > } < nl > < nl > message MessagesReceived { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > index ac13141 . . e02e96e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > @ @ - 30 , 7 + 30 , 7 @ @ trait DialogCommandHandlers extends PeersImplicits with UserACL { < nl > protected def sendMessage ( s : DialogState , sm : SendMessage ) : Unit = { < nl > becomeStashing ( replyTo ⇒ ( { < nl > case seq : SeqStateDate ⇒ < nl > - persist ( NewMessage ( sm . randomId , Instant . ofEpochMilli ( seq . date ) , isIncoming = false ) ) { e ⇒ < nl > + persist ( NewMessage ( sm . randomId , Instant . ofEpochMilli ( seq . date ) , sm . getOrigin . id ) ) { e ⇒ < nl > commit ( e ) < nl > replyTo ! seq < nl > unstashAll ( ) < nl > @ @ - 70 , 7 + 70 , 7 @ @ trait DialogCommandHandlers extends PeersImplicits with UserACL { < nl > throw new RuntimeException ( " No message date found in SendMessage " ) < nl > } < nl > < nl > - persist ( NewMessage ( sm . randomId , Instant . ofEpochMilli ( messageDate . value ) , isIncoming = true ) ) { e ⇒ < nl > + persist ( NewMessage ( sm . randomId , Instant . ofEpochMilli ( messageDate . value ) , sm . getOrigin . id ) ) { e ⇒ < nl > commit ( e ) < nl > < nl > if ( peer . typ = = PeerType . Private ) { < nl > @ @ - 97 , 7 + 97 , 7 @ @ trait DialogCommandHandlers extends PeersImplicits with UserACL { < nl > if ( peer . ` type ` = = PeerType . Private & & peer . id ! = senderUserId & & userId ! = senderUserId ) { < nl > sender ( ) ! Status . Failure ( new RuntimeException ( s " writeMessageSelf with senderUserId $ senderUserId in dialog of user $ userId with user $ { peer . id } " ) ) < nl > } else { < nl > - persist ( NewMessage ( randomId , Instant . ofEpochMilli ( dateMillis ) , isIncoming = userId ! = senderUserId ) ) { e ⇒ < nl > + persist ( NewMessage ( randomId , Instant . ofEpochMilli ( dateMillis ) , senderUserId ) ) { e ⇒ < nl > commit ( e ) < nl > db . run ( writeHistoryMessageSelf ( userId , peer , senderUserId , new DateTime ( dateMillis ) , randomId , message . header , message . toByteArray ) ) < nl > . map ( _ ⇒ WriteMessageSelfAck ( ) ) pipeTo sender ( ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > index b7c7e8a . . ae2bb79 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > @ @ - 55 , 8 + 55 , 8 @ @ private [ dialog ] final case class DialogState ( < nl > import DialogEvents . _ < nl > < nl > override def updated ( e : DialogEvent ) : DialogState = e match { < nl > - case NewMessage ( randomId , date , isIncoming ) ⇒ < nl > - if ( isIncoming ) { < nl > + case NewMessage ( randomId , date , senderUserId ) ⇒ < nl > + if ( senderUserId ! = userId ) { < nl > this . copy ( < nl > counter = counter + 1 , < nl > unreadMessages = unreadMessages + UnreadMessage ( date , randomId ) ,
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / dialog . proto b / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > index 6ffb082 . . 8bf0431 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > @ @ - 21 , 7 + 21 , 7 @ @ message DialogCommands { < nl > MessageReceived message _ received = 4 ; < nl > MessageRead message _ read = 5 ; < nl > Show show = 6 ; < nl > - Archive archive = 15 ; < nl > + Archive archive = 15 ; < nl > Delete delete = 8 ; < nl > SetReaction set _ reaction = 9 ; < nl > RemoveReaction remove _ reaction = 10 ; < nl > @ @ - 68 , 6 + 68 , 7 @ @ message DialogCommands { < nl > required bytes message = 5 [ ( scalapb . field ) . type = " im . actor . api . rpc . messaging . ApiMessage " ] ; < nl > optional int64 access _ hash = 10 ; < nl > required bool is _ fat = 6 ; < nl > + optional int32 for _ user _ id = 12 ; < nl > } < nl > < nl > message SendMessageAck { } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > index cb61c61 . . 1b18299 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . server . persist . HistoryMessageRepo < nl > import im . actor . server . pubsub . { PeerMessage , PubSubExtension } < nl > import im . actor . server . sequence . { SeqState , SeqStateDate } < nl > import im . actor . server . user . UserExtension < nl > + import im . actor . types . _ < nl > import org . joda . time . DateTime < nl > import slick . dbio . DBIO < nl > < nl > @ @ - 79 , 18 + 80 , 30 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit < nl > < nl > def sendMessage ( < nl > peer : ApiPeer , < nl > - senderUserId : Int , < nl > + senderUserId : UserId , < nl > senderAuthSid : Int , < nl > - senderAuthId : Option [ Long ] , / / required only in case of access hash check for private peer < nl > - randomId : Long , < nl > + senderAuthId : Option [ Long ] , / / required only in case of access hash check for private peer < nl > + randomId : RandomId , < nl > message : ApiMessage , < nl > - accessHash : Option [ Long ] = None , < nl > - isFat : Boolean = false < nl > + accessHash : Option [ Long ] = None , < nl > + isFat : Boolean = false , < nl > + forUserId : Option [ UserId ] = None < nl > ) : Future [ SeqStateDate ] = < nl > withValidPeer ( peer . asModel , senderUserId , Future . successful ( SeqStateDate ( ) ) ) { < nl > val sender = Peer . privat ( senderUserId ) < nl > / / we don ' t set date here , cause actual date set inside dialog processor < nl > - val sendMessage = SendMessage ( sender , peer . asModel , senderAuthSid , senderAuthId , date = None , randomId , message , accessHash , isFat ) < nl > + val sendMessage = SendMessage ( < nl > + origin = sender , < nl > + dest = peer . asModel , < nl > + senderAuthSid = senderAuthSid , < nl > + senderAuthId = senderAuthId , < nl > + date = None , < nl > + randomId = randomId , < nl > + message = message , < nl > + accessHash = accessHash , < nl > + isFat = isFat , < nl > + forUserId = forUserId < nl > + ) < nl > ( userExt . processorRegion . ref ? Envelope ( sender ) . withSendMessage ( sendMessage ) ) . mapTo [ SeqStateDate ] < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupPeerCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupPeerCommandHandlers . scala < nl > index 6094d9a . . 37df102 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupPeerCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupPeerCommandHandlers . scala < nl > @ @ - 18 , 8 + 18 , 13 @ @ trait GroupPeerCommandHandlers extends PeersImplicits { < nl > val senderUserId = sm . origin . id < nl > ( withMemberIds ( groupId ) { ( memberIds , _ , optBot ) ⇒ < nl > if ( canSend ( memberIds , optBot , senderUserId ) ) { < nl > + val receiverIds = sm . forUserId match { < nl > + case Some ( id ) if memberIds . contains ( id ) ⇒ Seq ( id ) < nl > + case _ ⇒ memberIds - senderUserId < nl > + } < nl > + < nl > for { < nl > - _ ← Future . traverse ( memberIds - senderUserId ) { userId ⇒ < nl > + _ ← Future . traverse ( receiverIds ) { userId ⇒ < nl > dialogExt . ackSendMessage ( Peer . privat ( userId ) , sm ) < nl > } < nl > } yield { < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala < nl > index b67f163 . . b216bce 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala < nl > @ @ - 36 , 7 + 36 , 13 @ @ private [ messaging ] trait MessagingHandlers extends PeersImplicits < nl > / / TODO : configurable < nl > private val editTimeWindow : Long = 5 . minutes . toMillis < nl > < nl > - override def doHandleSendMessage ( outPeer : ApiOutPeer , randomId : Long , message : ApiMessage , isOnlyForUser : Option [ Int ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeqDate ] ] = < nl > + override def doHandleSendMessage ( < nl > + outPeer : ApiOutPeer , < nl > + randomId : Long , < nl > + message : ApiMessage , < nl > + isOnlyForUser : Option [ Int ] , < nl > + clientData : ClientData < nl > + ) : Future [ HandlerResult [ ResponseSeqDate ] ] = < nl > authorized ( clientData ) { implicit client ⇒ < nl > ( for ( < nl > s ← fromFuture ( dialogExt . sendMessage ( < nl > @ @ - 46 , 7 + 52 , 8 @ @ private [ messaging ] trait MessagingHandlers extends PeersImplicits < nl > senderAuthId = Some ( client . authId ) , < nl > randomId = randomId , < nl > message = message , < nl > - accessHash = Some ( outPeer . accessHash ) < nl > + accessHash = Some ( outPeer . accessHash ) , < nl > + forUserId = isOnlyForUser < nl > ) ) < nl > ) yield ResponseSeqDate ( s . seq , s . state . toByteArray , s . date ) ) . value < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / dialog . proto b / actor - server / actor - core / src / main / protobuf / dialog . proto 
 index c1fc8f8 . . 01c3afc 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / dialog . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / dialog . proto 
 @ @ - 294 , 7 + 294 , 7 @ @ message DialogEvents { 
 
 int64 random _ id = 2 ; 
 int64 date = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; 
 - bool is _ incoming = 3 ; 
 + int32 sender _ user _ id = 3 ; 
 } 
 
 message MessagesReceived { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 index ac13141 . . e02e96e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 @ @ - 30 , 7 + 30 , 7 @ @ trait DialogCommandHandlers extends PeersImplicits with UserACL { 
 protected def sendMessage ( s : DialogState , sm : SendMessage ) : Unit = { 
 becomeStashing ( replyTo ⇒ ( { 
 case seq : SeqStateDate ⇒ 
 - persist ( NewMessage ( sm . randomId , Instant . ofEpochMilli ( seq . date ) , isIncoming = false ) ) { e ⇒ 
 + persist ( NewMessage ( sm . randomId , Instant . ofEpochMilli ( seq . date ) , sm . getOrigin . id ) ) { e ⇒ 
 commit ( e ) 
 replyTo ! seq 
 unstashAll ( ) 
 @ @ - 70 , 7 + 70 , 7 @ @ trait DialogCommandHandlers extends PeersImplicits with UserACL { 
 throw new RuntimeException ( " No message date found in SendMessage " ) 
 } 
 
 - persist ( NewMessage ( sm . randomId , Instant . ofEpochMilli ( messageDate . value ) , isIncoming = true ) ) { e ⇒ 
 + persist ( NewMessage ( sm . randomId , Instant . ofEpochMilli ( messageDate . value ) , sm . getOrigin . id ) ) { e ⇒ 
 commit ( e ) 
 
 if ( peer . typ = = PeerType . Private ) { 
 @ @ - 97 , 7 + 97 , 7 @ @ trait DialogCommandHandlers extends PeersImplicits with UserACL { 
 if ( peer . ` type ` = = PeerType . Private & & peer . id ! = senderUserId & & userId ! = senderUserId ) { 
 sender ( ) ! Status . Failure ( new RuntimeException ( s " writeMessageSelf with senderUserId $ senderUserId in dialog of user $ userId with user $ { peer . id } " ) ) 
 } else { 
 - persist ( NewMessage ( randomId , Instant . ofEpochMilli ( dateMillis ) , isIncoming = userId ! = senderUserId ) ) { e ⇒ 
 + persist ( NewMessage ( randomId , Instant . ofEpochMilli ( dateMillis ) , senderUserId ) ) { e ⇒ 
 commit ( e ) 
 db . run ( writeHistoryMessageSelf ( userId , peer , senderUserId , new DateTime ( dateMillis ) , randomId , message . header , message . toByteArray ) ) 
 . map ( _ ⇒ WriteMessageSelfAck ( ) ) pipeTo sender ( ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 index b7c7e8a . . ae2bb79 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 @ @ - 55 , 8 + 55 , 8 @ @ private [ dialog ] final case class DialogState ( 
 import DialogEvents . _ 
 
 override def updated ( e : DialogEvent ) : DialogState = e match { 
 - case NewMessage ( randomId , date , isIncoming ) ⇒ 
 - if ( isIncoming ) { 
 + case NewMessage ( randomId , date , senderUserId ) ⇒ 
 + if ( senderUserId ! = userId ) { 
 this . copy ( 
 counter = counter + 1 , 
 unreadMessages = unreadMessages + UnreadMessage ( date , randomId ) ,

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / dialog . proto b / actor - server / actor - core / src / main / protobuf / dialog . proto 
 index 6ffb082 . . 8bf0431 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / dialog . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / dialog . proto 
 @ @ - 21 , 7 + 21 , 7 @ @ message DialogCommands { 
 MessageReceived message _ received = 4 ; 
 MessageRead message _ read = 5 ; 
 Show show = 6 ; 
 - Archive archive = 15 ; 
 + Archive archive = 15 ; 
 Delete delete = 8 ; 
 SetReaction set _ reaction = 9 ; 
 RemoveReaction remove _ reaction = 10 ; 
 @ @ - 68 , 6 + 68 , 7 @ @ message DialogCommands { 
 required bytes message = 5 [ ( scalapb . field ) . type = " im . actor . api . rpc . messaging . ApiMessage " ] ; 
 optional int64 access _ hash = 10 ; 
 required bool is _ fat = 6 ; 
 + optional int32 for _ user _ id = 12 ; 
 } 
 
 message SendMessageAck { } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 index cb61c61 . . 1b18299 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . server . persist . HistoryMessageRepo 
 import im . actor . server . pubsub . { PeerMessage , PubSubExtension } 
 import im . actor . server . sequence . { SeqState , SeqStateDate } 
 import im . actor . server . user . UserExtension 
 + import im . actor . types . _ 
 import org . joda . time . DateTime 
 import slick . dbio . DBIO 
 
 @ @ - 79 , 18 + 80 , 30 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit 
 
 def sendMessage ( 
 peer : ApiPeer , 
 - senderUserId : Int , 
 + senderUserId : UserId , 
 senderAuthSid : Int , 
 - senderAuthId : Option [ Long ] , / / required only in case of access hash check for private peer 
 - randomId : Long , 
 + senderAuthId : Option [ Long ] , / / required only in case of access hash check for private peer 
 + randomId : RandomId , 
 message : ApiMessage , 
 - accessHash : Option [ Long ] = None , 
 - isFat : Boolean = false 
 + accessHash : Option [ Long ] = None , 
 + isFat : Boolean = false , 
 + forUserId : Option [ UserId ] = None 
 ) : Future [ SeqStateDate ] = 
 withValidPeer ( peer . asModel , senderUserId , Future . successful ( SeqStateDate ( ) ) ) { 
 val sender = Peer . privat ( senderUserId ) 
 / / we don ' t set date here , cause actual date set inside dialog processor 
 - val sendMessage = SendMessage ( sender , peer . asModel , senderAuthSid , senderAuthId , date = None , randomId , message , accessHash , isFat ) 
 + val sendMessage = SendMessage ( 
 + origin = sender , 
 + dest = peer . asModel , 
 + senderAuthSid = senderAuthSid , 
 + senderAuthId = senderAuthId , 
 + date = None , 
 + randomId = randomId , 
 + message = message , 
 + accessHash = accessHash , 
 + isFat = isFat , 
 + forUserId = forUserId 
 + ) 
 ( userExt . processorRegion . ref ? Envelope ( sender ) . withSendMessage ( sendMessage ) ) . mapTo [ SeqStateDate ] 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupPeerCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupPeerCommandHandlers . scala 
 index 6094d9a . . 37df102 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupPeerCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupPeerCommandHandlers . scala 
 @ @ - 18 , 8 + 18 , 13 @ @ trait GroupPeerCommandHandlers extends PeersImplicits { 
 val senderUserId = sm . origin . id 
 ( withMemberIds ( groupId ) { ( memberIds , _ , optBot ) ⇒ 
 if ( canSend ( memberIds , optBot , senderUserId ) ) { 
 + val receiverIds = sm . forUserId match { 
 + case Some ( id ) if memberIds . contains ( id ) ⇒ Seq ( id ) 
 + case _ ⇒ memberIds - senderUserId 
 + } 
 + 
 for { 
 - _ ← Future . traverse ( memberIds - senderUserId ) { userId ⇒ 
 + _ ← Future . traverse ( receiverIds ) { userId ⇒ 
 dialogExt . ackSendMessage ( Peer . privat ( userId ) , sm ) 
 } 
 } yield { 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala 
 index b67f163 . . b216bce 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala 
 @ @ - 36 , 7 + 36 , 13 @ @ private [ messaging ] trait MessagingHandlers extends PeersImplicits 
 / / TODO : configurable 
 private val editTimeWindow : Long = 5 . minutes . toMillis 
 
 - override def doHandleSendMessage ( outPeer : ApiOutPeer , randomId : Long , message : ApiMessage , isOnlyForUser : Option [ Int ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeqDate ] ] = 
 + override def doHandleSendMessage ( 
 + outPeer : ApiOutPeer , 
 + randomId : Long , 
 + message : ApiMessage , 
 + isOnlyForUser : Option [ Int ] , 
 + clientData : ClientData 
 + ) : Future [ HandlerResult [ ResponseSeqDate ] ] = 
 authorized ( clientData ) { implicit client ⇒ 
 ( for ( 
 s ← fromFuture ( dialogExt . sendMessage ( 
 @ @ - 46 , 7 + 52 , 8 @ @ private [ messaging ] trait MessagingHandlers extends PeersImplicits 
 senderAuthId = Some ( client . authId ) , 
 randomId = randomId , 
 message = message , 
 - accessHash = Some ( outPeer . accessHash ) 
 + accessHash = Some ( outPeer . accessHash ) , 
 + forUserId = isOnlyForUser 
 ) ) 
 ) yield ResponseSeqDate ( s . seq , s . state . toByteArray , s . date ) ) . value 
 }
