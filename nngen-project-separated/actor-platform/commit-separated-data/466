BLEU SCORE: 0.11868405219520975

TEST MSG: fix ( server : search ) : fixed groups search
GENERATED MSG: feat ( server ) : RequestArchiveDialog

TEST DIFF (one line): diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / search / SearchServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / search / SearchServiceImpl . scala < nl > index b6aa055 . . 8552412 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / search / SearchServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / search / SearchServiceImpl . scala < nl > @ @ - 8 , 10 + 8 , 10 @ @ import im . actor . api . rpc . search . _ < nl > import im . actor . api . rpc . users . ApiUser < nl > import im . actor . concurrent . FutureExt < nl > import im . actor . server . db . DbExtension < nl > + import im . actor . server . dialog . DialogExtension < nl > import im . actor . server . group . { GroupExtension , GroupUtils } < nl > import im . actor . server . persist . contact . UserContactRepo < nl > import im . actor . server . persist . GroupRepo < nl > - import im . actor . server . persist . dialog . DialogRepo < nl > import im . actor . server . user . UserExtension < nl > < nl > import scala . concurrent . { ExecutionContext , Future } < nl > @ @ - 121 , 7 + 121 , 7 @ @ class SearchServiceImpl ( implicit system : ActorSystem ) extends SearchService { < nl > / / TODO : rewrite it using async < nl > private def searchGroups ( text : Option [ String ] ) ( implicit client : AuthorizedClientData ) : Future [ IndexedSeq [ ApiGroup ] ] = { < nl > for { < nl > - ids ← db . run ( DialogRepo . findGroupIds ( client . userId ) ) < nl > + ids ← DialogExtension ( system ) . fetchGroupedDialogs ( client . userId ) map ( _ . filter ( _ . typ . isGroups ) . flatMap ( _ . dialogs . map ( _ . getPeer . id ) ) ) < nl > groupOpts ← FutureExt . ftraverse ( ids ) { id ⇒ < nl > groupExt . isPublic ( id ) flatMap { isPublic ⇒ < nl > if ( isPublic ) Future . successful ( None )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala < nl > index ffa59dc . . 0fd6855 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala < nl > @ @ - 224 , 6 + 224 , 9 @ @ object Dialog { < nl > } < nl > } < nl > < nl > + def makeArchived ( userId : Int , peer : models . Peer ) = < nl > + byPKC . applied ( ( userId , peer . typ . toInt , peer . id ) ) . map ( _ . isArchived ) . update ( true ) < nl > + < nl > def delete ( userId : Int , peer : models . Peer ) : FixedSqlAction [ Int , NoStream , Write ] = < nl > byPKC . applied ( ( userId , peer . typ . toInt , peer . id ) ) . delete < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > index 6400d86 . . 4ab07a5 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . server . api . rpc . service . messaging < nl > import im . actor . api . rpc . DBIOResult . _ < nl > import im . actor . api . rpc . PeerHelpers . _ < nl > import im . actor . api . rpc . _ < nl > + import im . actor . api . rpc . Implicits . _ < nl > import im . actor . api . rpc . messaging . _ < nl > import im . actor . api . rpc . misc . { ResponseSeq , ResponseVoid } < nl > import im . actor . api . rpc . peers . { ApiPeer , ApiOutPeer , ApiPeerType } < nl > @ @ - 10 , 6 + 11 , 7 @ @ import im . actor . concurrent . FutureExt < nl > import im . actor . server . dialog . { ReadFailed , ReceiveFailed } < nl > import im . actor . server . group . GroupUtils < nl > import im . actor . server . history . HistoryUtils < nl > + import im . actor . server . sequence . { SeqState , SeqUpdatesManager } < nl > import im . actor . server . user . UserUtils < nl > import im . actor . server . { models , persist } < nl > import org . joda . time . DateTime < nl > @ @ - 128 , 7 + 130 , 14 @ @ trait HistoryHandlers { < nl > < nl > override def jhandleArchiveDialog ( peer : ApiOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { < nl > val authorizedAction = requireAuth ( clientData ) map { implicit client ⇒ < nl > - throw new RuntimeException ( " Not implemented yet " ) < nl > + withOutPeer ( peer ) { < nl > + val update = UpdateChatArchived ( peer . asPeer ) < nl > + < nl > + for { < nl > + _ ← persist . Dialog . makeArchived ( client . userId , peer . asModel ) < nl > + SeqState ( seq , state ) ← DBIO . from ( userExt . broadcastClientUpdate ( update , pushText = None ) ) < nl > + } yield Ok ( ResponseSeq ( seq , state . toByteArray ) ) < nl > + } < nl > } < nl > < nl > db . run ( toDBIOAction ( authorizedAction ) )

TEST DIFF:
diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / search / SearchServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / search / SearchServiceImpl . scala 
 index b6aa055 . . 8552412 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / search / SearchServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / search / SearchServiceImpl . scala 
 @ @ - 8 , 10 + 8 , 10 @ @ import im . actor . api . rpc . search . _ 
 import im . actor . api . rpc . users . ApiUser 
 import im . actor . concurrent . FutureExt 
 import im . actor . server . db . DbExtension 
 + import im . actor . server . dialog . DialogExtension 
 import im . actor . server . group . { GroupExtension , GroupUtils } 
 import im . actor . server . persist . contact . UserContactRepo 
 import im . actor . server . persist . GroupRepo 
 - import im . actor . server . persist . dialog . DialogRepo 
 import im . actor . server . user . UserExtension 
 
 import scala . concurrent . { ExecutionContext , Future } 
 @ @ - 121 , 7 + 121 , 7 @ @ class SearchServiceImpl ( implicit system : ActorSystem ) extends SearchService { 
 / / TODO : rewrite it using async 
 private def searchGroups ( text : Option [ String ] ) ( implicit client : AuthorizedClientData ) : Future [ IndexedSeq [ ApiGroup ] ] = { 
 for { 
 - ids ← db . run ( DialogRepo . findGroupIds ( client . userId ) ) 
 + ids ← DialogExtension ( system ) . fetchGroupedDialogs ( client . userId ) map ( _ . filter ( _ . typ . isGroups ) . flatMap ( _ . dialogs . map ( _ . getPeer . id ) ) ) 
 groupOpts ← FutureExt . ftraverse ( ids ) { id ⇒ 
 groupExt . isPublic ( id ) flatMap { isPublic ⇒ 
 if ( isPublic ) Future . successful ( None )

NEAREST DIFF:
diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala 
 index ffa59dc . . 0fd6855 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala 
 @ @ - 224 , 6 + 224 , 9 @ @ object Dialog { 
 } 
 } 
 
 + def makeArchived ( userId : Int , peer : models . Peer ) = 
 + byPKC . applied ( ( userId , peer . typ . toInt , peer . id ) ) . map ( _ . isArchived ) . update ( true ) 
 + 
 def delete ( userId : Int , peer : models . Peer ) : FixedSqlAction [ Int , NoStream , Write ] = 
 byPKC . applied ( ( userId , peer . typ . toInt , peer . id ) ) . delete 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 index 6400d86 . . 4ab07a5 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . server . api . rpc . service . messaging 
 import im . actor . api . rpc . DBIOResult . _ 
 import im . actor . api . rpc . PeerHelpers . _ 
 import im . actor . api . rpc . _ 
 + import im . actor . api . rpc . Implicits . _ 
 import im . actor . api . rpc . messaging . _ 
 import im . actor . api . rpc . misc . { ResponseSeq , ResponseVoid } 
 import im . actor . api . rpc . peers . { ApiPeer , ApiOutPeer , ApiPeerType } 
 @ @ - 10 , 6 + 11 , 7 @ @ import im . actor . concurrent . FutureExt 
 import im . actor . server . dialog . { ReadFailed , ReceiveFailed } 
 import im . actor . server . group . GroupUtils 
 import im . actor . server . history . HistoryUtils 
 + import im . actor . server . sequence . { SeqState , SeqUpdatesManager } 
 import im . actor . server . user . UserUtils 
 import im . actor . server . { models , persist } 
 import org . joda . time . DateTime 
 @ @ - 128 , 7 + 130 , 14 @ @ trait HistoryHandlers { 
 
 override def jhandleArchiveDialog ( peer : ApiOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { 
 val authorizedAction = requireAuth ( clientData ) map { implicit client ⇒ 
 - throw new RuntimeException ( " Not implemented yet " ) 
 + withOutPeer ( peer ) { 
 + val update = UpdateChatArchived ( peer . asPeer ) 
 + 
 + for { 
 + _ ← persist . Dialog . makeArchived ( client . userId , peer . asModel ) 
 + SeqState ( seq , state ) ← DBIO . from ( userExt . broadcastClientUpdate ( update , pushText = None ) ) 
 + } yield Ok ( ResponseSeq ( seq , state . toByteArray ) ) 
 + } 
 } 
 
 db . run ( toDBIOAction ( authorizedAction ) )
