BLEU SCORE: 0.1786940056814559

TEST MSG: feat ( core + js ) : Working calls
GENERATED MSG: wip ( core ) : Working on decryption of ratchet messages

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > index cc9cf82 . . 64132a5 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > @ @ - 55 , 7 + 55 , 7 @ @ public class CallActor extends EventBusActor { < nl > } < nl > < nl > public final void sendSignalingMessage ( int uid , long deviceId , ApiWebRTCSignaling signaling ) { < nl > - Log . d ( TAG , " sendSignaling " ) ; < nl > + / / Log . d ( TAG , " sendSignaling " ) ; < nl > try { < nl > sendMessage ( uid , deviceId , signaling . buildContainer ( ) ) ; < nl > } catch ( IOException e ) { < nl > @ @ - 66 , 7 + 66 , 7 @ @ public class CallActor extends EventBusActor { < nl > < nl > @ Override < nl > public final void onMessageReceived ( @ Nullable Integer senderId , @ Nullable Long senderDeviceId , byte [ ] data ) { < nl > - Log . d ( TAG , " onMessageReceived : start " ) ; < nl > + / / Log . d ( TAG , " onMessageReceived : start " ) ; < nl > < nl > / / Ignoring messages without sender < nl > if ( senderId = = null | | senderDeviceId = = null ) { < nl > @ @ - 84 , 14 + 84 , 14 @ @ public class CallActor extends EventBusActor { < nl > < nl > Log . d ( TAG , " onMessageReceived : " + signaling ) ; < nl > onSignalingMessage ( senderId , senderDeviceId , signaling ) ; < nl > - Log . d ( TAG , " onMessageReceived : " + signaling + " : end " ) ; < nl > + / / Log . d ( TAG , " onMessageReceived : " + signaling + " : end " ) ; < nl > } < nl > < nl > @ Override < nl > public void onReceive ( Object message ) { < nl > - Log . d ( TAG , " onReceive " ) ; < nl > + / / Log . d ( TAG , " onReceive " ) ; < nl > if ( message instanceof PeerConnectionActor . DoAnswer ) { < nl > - Log . d ( TAG , " onReceive : doAnswer " ) ; < nl > + / / Log . d ( TAG , " onReceive : doAnswer " ) ; < nl > PeerConnectionActor . DoAnswer answer = ( PeerConnectionActor . DoAnswer ) message ; < nl > sendSignalingMessage ( answer . getUid ( ) , answer . getDeviceId ( ) , < nl > new ApiAnswer ( 0 , answer . getSdp ( ) ) ) ; < nl > @ @ - 106 , 7 + 106 , 7 @ @ public class CallActor extends EventBusActor { < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > - Log . d ( TAG , " onReceive : End " ) ; < nl > + / / Log . d ( TAG , " onReceive : End " ) ; < nl > } < nl > < nl > protected ActorRef getPeer ( int uid , long deviceId ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > index 09ddfc5 . . 83b0b87 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > @ @ - 1 , 25 + 1 , 21 @ @ < nl > package im . actor . core . modules . calls ; < nl > < nl > - import im . actor . core . api . ApiOffer ; < nl > - import im . actor . core . api . ApiWebRTCSignaling ; < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . core . api . ApiNeedOffer ; < nl > import im . actor . core . api . rpc . RequestDoCall ; < nl > import im . actor . core . api . rpc . ResponseDoCall ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . modules . ModuleContext ; < nl > - import im . actor . core . util . RandomUtils ; < nl > import im . actor . runtime . Log ; < nl > - import im . actor . runtime . WebRTC ; < nl > import im . actor . runtime . function . Consumer ; < nl > - import im . actor . runtime . function . Function ; < nl > - import im . actor . runtime . promise . Promise ; < nl > - import im . actor . runtime . webrtc . WebRTCLocalStream ; < nl > - import im . actor . runtime . webrtc . WebRTCPeerConnection ; < nl > < nl > public class CallMasterActor extends CallActor { < nl > < nl > private static final String TAG = " CallMasterActor " ; < nl > < nl > private final Peer peer ; < nl > + private ArrayList < ConnectedHolder > connectedDevices = new ArrayList < > ( ) ; < nl > < nl > public CallMasterActor ( Peer peer , ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 28 , 17 + 24 , 14 @ @ public class CallMasterActor extends CallActor { < nl > < nl > @ Override < nl > public void onBusCreated ( ) { < nl > - Log . d ( TAG , " onBusCreated " ) ; < nl > api ( new RequestDoCall ( buidOutPeer ( peer ) , getBusId ( ) ) ) . then ( new Consumer < ResponseDoCall > ( ) { < nl > @ Override < nl > public void apply ( ResponseDoCall responseDoCall ) { < nl > - Log . d ( TAG , " onBusCreated : result " ) ; < nl > onCallCreated ( ) ; < nl > } < nl > } ) . failure ( new Consumer < Exception > ( ) { < nl > @ Override < nl > public void apply ( Exception e ) { < nl > - Log . d ( TAG , " onBusCreated : error " ) ; < nl > dispose ( ) ; < nl > } < nl > } ) . done ( self ( ) ) ; < nl > @ @ - 50 , 27 + 43 , 45 @ @ public class CallMasterActor extends CallActor { < nl > < nl > @ Override < nl > public void onDeviceConnected ( final int uid , final long deviceId ) { < nl > - Log . d ( TAG , " onDeviceConnected " ) ; < nl > + ConnectedHolder connectedHolder = new ConnectedHolder ( uid , deviceId ) ; < nl > + if ( connectedDevices . contains ( connectedHolder ) ) { < nl > + return ; < nl > + } < nl > getPeer ( uid , deviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; < nl > + for ( ConnectedHolder c : connectedDevices ) { < nl > + / / sendSignalingMessage ( c . uid , c . deviceId , new ApiNeedOffer ( uid , deviceId ) ) ; < nl > + sendSignalingMessage ( uid , deviceId , new ApiNeedOffer ( c . uid , c . deviceId ) ) ; < nl > + } < nl > + connectedDevices . add ( connectedHolder ) ; < nl > } < nl > < nl > - @ Override < nl > - public void onDeviceDisconnected ( int uid , long deviceId ) { < nl > - Log . d ( TAG , " onDeviceDisconnected " ) ; < nl > - } < nl > + private static class ConnectedHolder { < nl > < nl > - @ Override < nl > - public void onBusShutdown ( ) { < nl > - Log . d ( TAG , " onBusShutdown " ) ; < nl > - } < nl > + private int uid ; < nl > + private long deviceId ; < nl > < nl > - @ Override < nl > - public void onBusDisposed ( ) { < nl > - Log . d ( TAG , " onBusDisposed " ) ; < nl > - } < nl > + public ConnectedHolder ( int uid , long deviceId ) { < nl > + this . uid = uid ; < nl > + this . deviceId = deviceId ; < nl > + } < nl > < nl > - @ Override < nl > - public void onBusStopped ( ) { < nl > - Log . d ( TAG , " onBusStopped " ) ; < nl > + @ Override < nl > + public boolean equals ( Object o ) { < nl > + if ( this = = o ) return true ; < nl > + if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; < nl > + < nl > + ConnectedHolder that = ( ConnectedHolder ) o ; < nl > + < nl > + if ( uid ! = that . uid ) return false ; < nl > + return deviceId = = that . deviceId ; < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public int hashCode ( ) { < nl > + int result = uid ; < nl > + result = 31 * result + ( int ) ( deviceId ^ ( deviceId > > > 32 ) ) ; < nl > + return result ; < nl > + } < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > index 9bc33b1 . . 909ad6b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > @ @ - 1 , 5 + 1 , 7 @ @ < nl > package im . actor . core . modules . calls ; < nl > < nl > + import im . actor . core . api . ApiNeedOffer ; < nl > + import im . actor . core . api . ApiWebRTCSignaling ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . runtime . Log ; < nl > < nl > @ @ - 12 , 39 + 14 , 13 @ @ public class CallSlaveActor extends CallActor { < nl > } < nl > < nl > @ Override < nl > - public void onBusJoined ( ) { < nl > - Log . d ( TAG , " onBusCreated " ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onDeviceConnected ( int uid , long deviceId ) { < nl > - Log . d ( TAG , " onDeviceConnected " ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onDeviceDisconnected ( int uid , long deviceId ) { < nl > - Log . d ( TAG , " onDeviceDisconnected " ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onBusShutdown ( ) { < nl > - Log . d ( TAG , " onBusShutdown " ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onBusDisposed ( ) { < nl > - Log . d ( TAG , " onBusDisposed " ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onBusStopped ( ) { < nl > - Log . d ( TAG , " onBusStopped " ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onReceive ( Object message ) { < nl > - Log . d ( TAG , " onReceive " ) ; < nl > - super . onReceive ( message ) ; < nl > - Log . d ( TAG , " onReceive : end " ) ; < nl > + public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { < nl > + if ( signaling instanceof ApiNeedOffer ) { < nl > + ApiNeedOffer needOffer = ( ApiNeedOffer ) signaling ; < nl > + Log . w ( TAG , " Need offer for : " + needOffer . getUid ( ) ) ; < nl > + getPeer ( needOffer . getUid ( ) , needOffer . getDevice ( ) ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; < nl > + } else { < nl > + super . onSignalingMessage ( fromUid , fromDeviceId , signaling ) ; < nl > + } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > index 343a3f6 . . 2355098 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > @ @ - 172 , 7 + 172 , 8 @ @ public class PeerConnectionActor extends ModuleActor { < nl > / / 5 . Enter READY mode < nl > / / < nl > < nl > - Log . d ( TAG , " onOffer " ) ; < nl > + Log . d ( TAG , " Received Offer " ) ; < nl > + < nl > isReady = false ; < nl > peerConnection . setRemoteDescription ( new WebRTCSessionDescription ( " offer " , sdp ) ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > @ Override < nl > @ @ - 187 , 15 + 188 , 12 @ @ public class PeerConnectionActor extends ModuleActor { < nl > } ) . then ( new Consumer < WebRTCSessionDescription > ( ) { < nl > @ Override < nl > public void apply ( WebRTCSessionDescription description ) { < nl > - Log . d ( TAG , " onOffer : then " ) ; < nl > root . send ( new DoAnswer ( uid , deviceId , description . getSdp ( ) ) ) ; < nl > - Log . d ( TAG , " onOffer : then : end " ) ; < nl > onHandShakeCompleted ( ) ; < nl > } < nl > } ) . failure ( new Consumer < Exception > ( ) { < nl > @ Override < nl > public void apply ( Exception e ) { < nl > - Log . d ( TAG , " onOffer : failure " ) ; < nl > e . printStackTrace ( ) ; < nl > / / TODO : Handle It < nl > } < nl > @ @ - 208 , 6 + 206 , 8 @ @ public class PeerConnectionActor extends ModuleActor { < nl > return ; < nl > } < nl > < nl > + Log . d ( TAG , " Received Answer " ) ; < nl > + < nl > / / < nl > / / Stages < nl > / / 1 . Set Remote Description < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusModule . java < nl > index 5b20c45 . . 390a58e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusModule . java < nl > @ @ - 50 , 9 + 50 , 9 @ @ public class EventBusModule extends AbsModule { < nl > busMessage . getSenderId ( ) , < nl > busMessage . getSenderDeviceId ( ) , < nl > busMessage . getMessage ( ) ) ) ; < nl > - Log . d ( " EVENTBUS " , " Delivered " ) ; < nl > + / / Log . d ( " EVENTBUS " , " Delivered " ) ; < nl > } else { < nl > - Log . d ( " EVENTBUS " , " Not Delivered " ) ; < nl > + / / Log . d ( " EVENTBUS " , " Not Delivered " ) ; < nl > if ( ! pendingMessages . containsKey ( busMessage . getId ( ) ) ) { < nl > pendingMessages . put ( busMessage . getId ( ) , new ArrayList < > ( ) ) ; < nl > } < nl > @ @ - 66 , 7 + 66 , 7 @ @ public class EventBusModule extends AbsModule { < nl > deviceConnected . getUserId ( ) , < nl > deviceConnected . getDeviceId ( ) ) ) ; < nl > } else { < nl > - Log . d ( " EVENTBUS " , " Not Delivered " ) ; < nl > + / / Log . d ( " EVENTBUS " , " Not Delivered " ) ; < nl > if ( ! pendingMessages . containsKey ( deviceConnected . getId ( ) ) ) { < nl > pendingMessages . put ( deviceConnected . getId ( ) , new ArrayList < > ( ) ) ; < nl > } < nl > @ @ - 91 , 7 + 91 , 7 @ @ public class EventBusModule extends AbsModule { < nl > if ( dest ! = null ) { < nl > dest . send ( new EventBusActor . EventBusDisposed ( ) ) ; < nl > } else { < nl > - Log . d ( " EVENTBUS " , " Not Delivered " ) ; < nl > + / / Log . d ( " EVENTBUS " , " Not Delivered " ) ; < nl > if ( ! pendingMessages . containsKey ( disposed . getId ( ) ) ) { < nl > pendingMessages . put ( disposed . getId ( ) , new ArrayList < > ( ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java < nl > index 42d13d6 . . c40389e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java < nl > @ @ - 73 , 7 + 73 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > return ; < nl > } < nl > < nl > - Log . d ( TAG , " Processing weak update : " + update ) ; < nl > + / / Log . d ( TAG , " Processing weak update : " + update ) ; < nl > this . processor . processWeakUpdate ( update , date ) ; < nl > } < nl > < nl > @ @ - 115 , 7 + 115 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > processor . applyRelated ( users , groups , true ) ; < nl > } < nl > < nl > - Log . d ( TAG , " Processing update success " ) ; < nl > + / / Log . d ( TAG , " Processing update success " ) ; < nl > return Promises . success ( new UpdateProcessed ( ) ) ; < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / PeerConnection . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / PeerConnection . java < nl > index 1904d1c . . 3bd1d08 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / PeerConnection . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / PeerConnection . java < nl > @ @ - 24 , 6 + 24 , 26 @ @ public class PeerConnection implements WebRTCPeerConnection { < nl > < nl > public PeerConnection ( JsPeerConnection peerConnection ) { < nl > this . peerConnection = peerConnection ; < nl > + this . peerConnection . setListener ( new JsPeerConnectionListener ( ) { < nl > + @ Override < nl > + public void onIceCandidate ( JsRTCIceCandidate candidate ) { < nl > + for ( WebRTCPeerConnectionCallback c : callbacks ) { < nl > + c . onCandidate ( candidate . getLabel ( ) , candidate . getId ( ) , candidate . getSDP ( ) ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void onIceCandidatesEnded ( ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onStreamAdded ( JsMediaStream stream ) { < nl > + JsAudio audio = JsAudio . create ( ) ; < nl > + audio . setStream ( stream ) ; < nl > + audio . play ( ) ; < nl > + } < nl > + } ) ; < nl > } < nl > < nl > @ Override
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index 2f54661 . . c33368d 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 1550 , 7 + 1550 , 7 @ @ < nl > 	 	 	 	 TargetAttributes = { < nl > 	 	 	 	 	 066A50D11BC4AE63000E606E = { < nl > 	 	 	 	 	 	 CreatedOnToolsVersion = 7 . 0 ; < nl > - 	 	 	 	 	 	 DevelopmentTeam = PR6635TQQ3 ; < nl > + 	 	 	 	 	 	 DevelopmentTeam = HVJR44Y5B6 ; < nl > 	 	 	 	 	 } ; < nl > 	 	 	 	 } ; < nl > 	 	 	 } ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java < nl > index 2d72521 . . 37809ce 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java < nl > @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . core . modules . encryption . entity . EncryptedBox ; < nl > import im . actor . core . modules . encryption . entity . EncryptedBoxKey ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > + import im . actor . core . util . Hex ; < nl > import im . actor . core . util . ModuleActor ; < nl > import im . actor . runtime . Crypto ; < nl > import im . actor . runtime . Log ; < nl > @ @ - 25 , 6 + 26 , 7 @ @ import im . actor . runtime . actors . ask . AskRequest ; < nl > import im . actor . runtime . crypto . IntegrityException ; < nl > import im . actor . runtime . crypto . box . ActorBox ; < nl > import im . actor . runtime . crypto . box . ActorBoxKey ; < nl > + import im . actor . runtime . crypto . primitives . util . ByteStrings ; < nl > < nl > public class EncryptedPeerActor extends ModuleActor { < nl > < nl > @ @ - 34 , 6 + 36 , 7 @ @ public class EncryptedPeerActor extends ModuleActor { < nl > private ArrayList < ApiEncryptionKeyGroup > keyGroups ; < nl > private HashMap < Integer , ActorRef > sessions = new HashMap < Integer , ActorRef > ( ) ; < nl > private boolean isReady = false ; < nl > + private int ownKeyGroupId ; < nl > < nl > public EncryptedPeerActor ( int uid , ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 78 , 14 + 81 , 29 @ @ public class EncryptedPeerActor extends ModuleActor { < nl > } < nl > } ) , getPath ( ) + " / k _ " + g . getKeyGroupId ( ) ) ) ; < nl > } < nl > + ask ( context ( ) . getEncryption ( ) . getKeyManager ( ) , new KeyManagerActor . FetchOwnKeyGroup ( ) , new AskCallback ( ) { < nl > + @ Override < nl > + public void onResult ( Object obj ) { < nl > + KeyManagerActor . FetchOwnKeyGroupResult res = ( KeyManagerActor . FetchOwnKeyGroupResult ) obj ; < nl > + ownKeyGroupId = res . getKeyGroupId ( ) ; < nl > + onOwnKeysReady ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + / / Do nothing < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + private void onOwnKeysReady ( ) { < nl > + Log . w ( TAG , " onOwnKeysReady " ) ; < nl > isReady = true ; < nl > unstashAll ( ) ; < nl > } < nl > < nl > private void doEncrypt ( final byte [ ] data , final Future future ) { < nl > - < nl > Log . d ( TAG , " doEncrypt " ) ; < nl > - < nl > final byte [ ] encKey = Crypto . randomBytes ( 128 ) ; < nl > < nl > final ArrayList < EncryptedBoxKey > encryptedKeys = new ArrayList < EncryptedBoxKey > ( ) ; < nl > @ @ - 112 , 19 + 130 , 61 @ @ public class EncryptedPeerActor extends ModuleActor { < nl > Log . d ( TAG , " doEncrypt2 " ) ; < nl > byte [ ] encData ; < nl > try { < nl > - encData = ActorBox . closeBox ( new byte [ 0 ] , data , Crypto . randomBytes ( 32 ) , new ActorBoxKey ( encKey ) ) ; < nl > + encData = ActorBox . closeBox ( ByteStrings . intToBytes ( ownKeyGroupId ) , data , Crypto . randomBytes ( 32 ) , new ActorBoxKey ( encKey ) ) ; < nl > } catch ( IntegrityException e ) { < nl > e . printStackTrace ( ) ; < nl > future . onError ( e ) ; < nl > return ; < nl > } < nl > < nl > - EncryptedBox encryptedBox = new EncryptedBox ( encryptedKeys . toArray ( new EncryptedBoxKey [ 0 ] ) , encData ) ; < nl > + EncryptedBox encryptedBox = new EncryptedBox ( < nl > + encryptedKeys . toArray ( new EncryptedBoxKey [ encryptedKeys . size ( ) ] ) , < nl > + ByteStrings . merge ( ByteStrings . intToBytes ( ownKeyGroupId ) , encData ) ) ; < nl > + < nl > + Log . d ( TAG , " doEncrypt : EncPackage : " + Hex . toHex ( encData ) ) ; < nl > + for ( EncryptedBoxKey k : encryptedKeys ) { < nl > + Log . d ( TAG , " Key : " + Hex . toHex ( k . getEncryptedKey ( ) ) ) ; < nl > + } < nl > + < nl > future . onResult ( encryptedBox ) ; < nl > } < nl > < nl > - private void doDecrypt ( EncryptedBox data , Future future ) { < nl > + private void doDecrypt ( EncryptedBox data , final Future future ) { < nl > + int senderKeyGroup = ByteStrings . bytesToInt ( ByteStrings . substring ( data . getEncryptedPackage ( ) , 0 , 4 ) ) ; < nl > + byte [ ] encPackage = ByteStrings . substring ( data . getEncryptedPackage ( ) , 4 , data . getEncryptedPackage ( ) . length - 4 ) ; < nl > + < nl > + if ( sessions . containsKey ( senderKeyGroup ) ) { < nl > + Log . d ( TAG , " Decryption with key group " ) ; < nl > + byte [ ] encKey = null ; < nl > + for ( EncryptedBoxKey k : data . getKeys ( ) ) { < nl > + if ( k . getKeyGroupId ( ) = = ownKeyGroupId & & k . getUid ( ) = = myUid ( ) ) { < nl > + encKey = k . getEncryptedKey ( ) ; < nl > + break ; < nl > + } < nl > + } < nl > + < nl > + Log . d ( TAG , " EncPackage : " + Hex . toHex ( encPackage ) ) ; < nl > + for ( EncryptedBoxKey k : data . getKeys ( ) ) { < nl > + Log . d ( TAG , " Key : " + Hex . toHex ( k . getEncryptedKey ( ) ) ) ; < nl > + } < nl > + < nl > + ask ( sessions . get ( senderKeyGroup ) , new EncryptionSessionActor . DecryptPackage ( encKey ) , new AskCallback ( ) { < nl > + @ Override < nl > + public void onResult ( Object obj ) { < nl > + Log . d ( TAG , " Decryption with key group : onResult " ) ; < nl > + future . onResult ( ) ; < nl > + } < nl > < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + Log . d ( TAG , " Decryption with key group : onError " ) ; < nl > + future . onError ( e ) ; < nl > + } < nl > + } ) ; < nl > + } else { < nl > + Log . w ( TAG , " Unable to find appropriate session # " + senderKeyGroup ) ; < nl > + future . onError ( new RuntimeException ( ) ) ; < nl > + } < nl > } < nl > < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptionSessionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptionSessionActor . java < nl > index 7f57506 . . 5d65dd8 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptionSessionActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptionSessionActor . java < nl > @ @ - 8 , 9 + 8 , 11 @ @ import im . actor . core . api . ApiUserOutPeer ; < nl > import im . actor . core . api . rpc . RequestLoadEphermalPublicKeys ; < nl > import im . actor . core . api . rpc . ResponsePublicKeys ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . encryption . entity . EncryptedBoxKey ; < nl > import im . actor . core . modules . encryption . entity . EncryptionKey ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > + import im . actor . core . util . Hex ; < nl > import im . actor . core . util . ModuleActor ; < nl > import im . actor . core . util . RandomUtils ; < nl > import im . actor . runtime . Crypto ; < nl > @ @ - 101 , 7 + 103 , 7 @ @ public class EncryptionSessionActor extends ModuleActor { < nl > return ; < nl > } < nl > < nl > - ApiEncryptionKey encryptionKey = response . getPublicKey ( ) . get ( 0 ) ; < nl > + ApiEncryptionKey encryptionKey = response . getPublicKey ( ) . get ( RandomUtils . randomId ( response . getPublicKey ( ) . size ( ) ) ) ; < nl > theirEphermalKey0 = new EncryptionKey ( encryptionKey . getKeyId ( ) , encryptionKey . getKeyAlg ( ) , encryptionKey . getKeyMaterial ( ) , null ) ; < nl > onTheirReady0 ( ) ; < nl > } < nl > @ @ - 169 , 6 + 171 , 7 @ @ public class EncryptionSessionActor extends ModuleActor { < nl > ActorBoxKey ratchetMessageKey = RatchetMessageKey . buildKey ( rootChainKey , 0 ) ; < nl > < nl > byte [ ] header = ByteStrings . merge ( < nl > + ByteStrings . intToBytes ( encryptionKeyGroup . getKeyGroupId ( ) ) , < nl > ByteStrings . longToBytes ( ownEphermalKey0 . getKeyId ( ) ) , / * Alice Initial Ephermal * / < nl > ByteStrings . longToBytes ( theirEphermalKey0 . getKeyId ( ) ) , / * Bob Initial Ephermal * / < nl > currentOwnKey . getPublicKey ( ) , < nl > @ @ - 186 , 9 + 189 , 46 @ @ public class EncryptionSessionActor extends ModuleActor { < nl > < nl > byte [ ] pkg = ByteStrings . merge ( header , encrypted ) ; < nl > < nl > + < nl > + int keyGroupId = ByteStrings . bytesToInt ( pkg , 0 ) ; < nl > + long ownEphermalKey0Id = ByteStrings . bytesToLong ( pkg , 4 ) ; < nl > + long theirEphermalKey0Id = ByteStrings . bytesToLong ( pkg , 12 ) ; < nl > + byte [ ] ownEphermalKey = ByteStrings . substring ( pkg , 20 , 32 ) ; < nl > + byte [ ] theirEphermalKey = ByteStrings . substring ( pkg , 52 , 32 ) ; < nl > + int messageIndex = ByteStrings . bytesToInt ( pkg , 84 ) ; < nl > + < nl > + Log . d ( TAG , " onEncrypt : " + Hex . toHex ( pkg ) ) ; < nl > + Log . d ( TAG , " onEncrypt : key group id : " + encryptionKeyGroup . getKeyGroupId ( ) ) ; < nl > + Log . d ( TAG , " onEncrypt : ownEphermalKey0Id : " + ownEphermalKey0 . getKeyId ( ) ) ; < nl > + Log . d ( TAG , " onEncrypt : theirEphermalKey0Id : " + theirEphermalKey0 . getKeyId ( ) ) ; < nl > + Log . d ( TAG , " onEncrypt : messageIndex : " + outIndex ) ; < nl > + < nl > + < nl > + Log . d ( TAG , " onEncrypt : 2key group id : " + keyGroupId ) ; < nl > + Log . d ( TAG , " onEncrypt : 2ownEphermalKey0Id : " + ownEphermalKey0Id ) ; < nl > + Log . d ( TAG , " onEncrypt : 2theirEphermalKey0Id : " + theirEphermalKey0Id ) ; < nl > + Log . d ( TAG , " onEncrypt : 2messageIndex : " + messageIndex ) ; < nl > + < nl > future . onResult ( new EncryptedPackageRes ( pkg ) ) ; < nl > } < nl > < nl > + private void onDecrypt ( byte [ ] data , Future future ) { < nl > + int keyGroupId = ByteStrings . bytesToInt ( data , 0 ) ; < nl > + long ownEphermalKey0Id = ByteStrings . bytesToLong ( data , 4 ) ; < nl > + long theirEphermalKey0Id = ByteStrings . bytesToLong ( data , 12 ) ; < nl > + byte [ ] ownEphermalKey = ByteStrings . substring ( data , 20 , 32 ) ; < nl > + byte [ ] theirEphermalKey = ByteStrings . substring ( data , 52 , 32 ) ; < nl > + int messageIndex = ByteStrings . bytesToInt ( data , 84 ) ; < nl > + < nl > + Log . d ( TAG , " onDecrypt : " + Hex . toHex ( data ) ) ; < nl > + Log . d ( TAG , " onDecrypt : key group id : " + keyGroupId + " , " + data . length ) ; < nl > + Log . d ( TAG , " onDecrypt : ownEphermalKey0Id : " + ownEphermalKey0Id ) ; < nl > + Log . d ( TAG , " onDecrypt : theirEphermalKey0Id : " + theirEphermalKey0Id ) ; < nl > + Log . d ( TAG , " onDecrypt : messageIndex : " + messageIndex ) ; < nl > + < nl > + / / future . onResult ( ) ; < nl > + } < nl > + < nl > @ Override < nl > public void onReceive ( Object message ) { < nl > if ( ! isReady & & message instanceof AskRequest ) { < nl > @ @ - 203 , 6 + 243 , 10 @ @ public class EncryptionSessionActor extends ModuleActor { < nl > if ( message instanceof EncryptPackage ) { < nl > onEncrypt ( ( ( EncryptPackage ) message ) . getData ( ) , future ) ; < nl > return false ; < nl > + } else if ( message instanceof DecryptPackage ) { < nl > + DecryptPackage decryptPackage = ( DecryptPackage ) message ; < nl > + onDecrypt ( decryptPackage . getData ( ) , future ) ; < nl > + return false ; < nl > } else { < nl > return super . onAsk ( message , future ) ; < nl > } < nl > @ @ - 232 , 4 + 276 , 17 @ @ public class EncryptionSessionActor extends ModuleActor { < nl > return data ; < nl > } < nl > } < nl > + < nl > + public static class DecryptPackage { < nl > + < nl > + private byte [ ] data ; < nl > + < nl > + public DecryptPackage ( byte [ ] data ) { < nl > + this . data = data ; < nl > + } < nl > + < nl > + public byte [ ] getData ( ) { < nl > + return data ; < nl > + } < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java < nl > index f4eb042 . . 58c2383 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java < nl > @ @ - 230 , 6 + 230 , 10 @ @ public class KeyManagerActor extends ModuleActor { < nl > future . onResult ( new FetchOwnKeyResult ( privateKeyStorage . getIdentityKey ( ) , ephemeralEncryptionKey . getEncryptionKey ( ) ) ) ; < nl > } < nl > < nl > + private void fetchKeyGroup ( Future future ) { < nl > + future . onResult ( new FetchOwnKeyGroupResult ( privateKeyStorage . getKeyGroupId ( ) ) ) ; < nl > + } < nl > + < nl > @ Override < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof AskRequest & & ! isReady ) { < nl > @ @ - 244 , 6 + 248 , 9 @ @ public class KeyManagerActor extends ModuleActor { < nl > if ( message instanceof FetchOwnKey ) { < nl > fetchOwnKey ( future ) ; < nl > return false ; < nl > + } else if ( message instanceof FetchOwnKeyGroup ) { < nl > + fetchKeyGroup ( future ) ; < nl > + return false ; < nl > } < nl > return super . onAsk ( message , future ) ; < nl > } < nl > @ @ - 270 , 4 + 277 , 20 @ @ public class KeyManagerActor extends ModuleActor { < nl > return ephemeralKey ; < nl > } < nl > } < nl > + < nl > + public static class FetchOwnKeyGroup { < nl > + < nl > + } < nl > + < nl > + public static class FetchOwnKeyGroupResult { < nl > + private int keyGroupId ; < nl > + < nl > + public FetchOwnKeyGroupResult ( int keyGroupId ) { < nl > + this . keyGroupId = keyGroupId ; < nl > + } < nl > + < nl > + public int getKeyGroupId ( ) { < nl > + return keyGroupId ; < nl > + } < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / MessageEncryptionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / MessageEncryptionActor . java < nl > index 815d4ba . . 6d0d54d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / MessageEncryptionActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / MessageEncryptionActor . java < nl > @ @ - 48 , 6 + 48 , 29 @ @ public class MessageEncryptionActor extends ModuleActor { < nl > } ) ; < nl > } < nl > < nl > + public void onDecrypt ( int uid , ApiEncryptedMessage message ) { < nl > + Log . d ( TAG , " onDecrypt : " + uid ) ; < nl > + ArrayList < EncryptedBoxKey > encryptedBoxKeys = new ArrayList < EncryptedBoxKey > ( ) ; < nl > + for ( ApiEncyptedBoxKey key : message . getBox ( ) . getKeys ( ) ) { < nl > + if ( key . getUsersId ( ) = = myUid ( ) ) { < nl > + encryptedBoxKeys . add ( new EncryptedBoxKey ( key . getUsersId ( ) , key . getKeyGroupId ( ) , < nl > + key . getEncryptedKey ( ) ) ) ; < nl > + } < nl > + } < nl > + EncryptedBox encryptedBox = new EncryptedBox ( encryptedBoxKeys . toArray ( new EncryptedBoxKey [ 0 ] ) , message . getBox ( ) . getEncPackage ( ) ) ; < nl > + ask ( context ( ) . getEncryption ( ) . getEncryptedChatManager ( uid ) , new EncryptedPeerActor . DecryptPackage ( encryptedBox ) , new AskCallback ( ) { < nl > + @ Override < nl > + public void onResult ( Object obj ) { < nl > + Log . d ( TAG , " onDecrypt : onResult " ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + Log . d ( TAG , " onDecrypt : onError " ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > @ Override < nl > public boolean onAsk ( Object message , Future future ) { < nl > if ( message instanceof EncryptMessage ) { < nl > @ @ - 58 , 6 + 81 , 16 @ @ public class MessageEncryptionActor extends ModuleActor { < nl > return super . onAsk ( message , future ) ; < nl > } < nl > < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof InMessage ) { < nl > + InMessage inMessage = ( InMessage ) message ; < nl > + onDecrypt ( inMessage . senderUid , inMessage . encryptedMessage ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > + } < nl > + } < nl > + < nl > public static class InMessage { < nl > < nl > private Peer peer ; < nl > @ @ - 105 , 4 + 138 , 17 @ @ public class MessageEncryptionActor extends ModuleActor { < nl > return encryptedMessage ; < nl > } < nl > } < nl > + < nl > + public static class DecryptMessage { < nl > + < nl > + private ApiEncryptedMessage encryptedMessage ; < nl > + < nl > + public DecryptMessage ( ApiEncryptedMessage encryptedMessage ) { < nl > + this . encryptedMessage = encryptedMessage ; < nl > + } < nl > + < nl > + public ApiEncryptedMessage getEncryptedMessage ( ) { < nl > + return encryptedMessage ; < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java < nl > index 9da4c36 . . 8a8877a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java < nl > @ @ - 27 , 6 + 27 , 7 @ @ import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . core . entity . content . ServiceUserRegistered ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . encryption . MessageEncryptionActor ; < nl > import im . actor . core . modules . internal . messages . ConversationActor ; < nl > import im . actor . core . modules . internal . messages . ConversationHistoryActor ; < nl > import im . actor . core . modules . internal . messages . CursorReceiverActor ; < nl > @ @ - 53 , 11 + 54 , 13 @ @ public class MessagesProcessor extends AbsModule { < nl > long intMessageSortDate = 0 ; < nl > Peer peer = convert ( _ peer ) ; < nl > < nl > - ArrayList < Message > nMesages = new ArrayList < Message > ( ) ; < nl > + ArrayList < Message > nMessages = new ArrayList < Message > ( ) ; < nl > for ( UpdateMessage u : messages ) { < nl > < nl > if ( u . getMessage ( ) instanceof ApiEncryptedMessage ) { < nl > - / / TODO : Decrypt message < nl > + / / TODO : Proper decrypt message < nl > + context ( ) . getEncryption ( ) . getMessageEncryptor ( ) . send ( new MessageEncryptionActor . InMessage ( peer , < nl > + u . getDate ( ) , u . getSenderUid ( ) , u . getRid ( ) , ( ApiEncryptedMessage ) u . getMessage ( ) ) ) ; < nl > continue ; < nl > } < nl > < nl > @ @ - 72 , 7 + 75 , 7 @ @ public class MessagesProcessor extends AbsModule { < nl > boolean isOut = myUid ( ) = = u . getSenderUid ( ) ; < nl > < nl > / / Sending message to conversation < nl > - nMesages . add ( new Message ( u . getRid ( ) , u . getDate ( ) , u . getDate ( ) , u . getSenderUid ( ) , < nl > + nMessages . add ( new Message ( u . getRid ( ) , u . getDate ( ) , u . getDate ( ) , u . getSenderUid ( ) , < nl > isOut ? MessageState . SENT : MessageState . UNKNOWN , msgContent , < nl > new ArrayList < Reaction > ( ) ) ) ; < nl > < nl > @ @ - 84 , 7 + 87 , 7 @ @ public class MessagesProcessor extends AbsModule { < nl > } < nl > } < nl > < nl > - conversationActor ( peer ) . send ( new ConversationActor . Messages ( nMesages ) ) ; < nl > + conversationActor ( peer ) . send ( new ConversationActor . Messages ( nMessages ) ) ; < nl > < nl > if ( intMessageSortDate > 0 ) { < nl > plainReceiveActor ( ) . send ( new CursorReceiverActor . MarkReceived ( peer , intMessageSortDate ) ) ; < nl > @ @ - 95 , 7 + 98 , 7 @ @ public class MessagesProcessor extends AbsModule { < nl > } < nl > < nl > / / OwnReadActor < nl > - for ( Message m : nMesages ) { < nl > + for ( Message m : nMessages ) { < nl > if ( m . getSenderId ( ) ! = myUid ( ) ) { < nl > ownReadActor ( ) . send ( new OwnReadActor . InMessage ( peer , m ) ) ; < nl > } < nl > @ @ - 107 , 6 + 110 , 13 @ @ public class MessagesProcessor extends AbsModule { < nl > ApiMessage content ) { < nl > < nl > Peer peer = convert ( _ peer ) ; < nl > + < nl > + if ( content instanceof ApiEncryptedMessage ) { < nl > + / / TODO : Proper decrypt message < nl > + context ( ) . getEncryption ( ) . getMessageEncryptor ( ) . send ( new MessageEncryptionActor . InMessage ( peer , < nl > + date , senderUid , rid , ( ApiEncryptedMessage ) content ) ) ; < nl > + } < nl > + < nl > AbsContent msgContent ; < nl > try { < nl > msgContent = AbsContent . fromMessage ( content ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / util / ByteStrings . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / util / ByteStrings . java < nl > index 7ff7e50 . . e4aff27 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / util / ByteStrings . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / util / ByteStrings . java < nl > @ @ - 22 , 7 + 22 , 7 @ @ public class ByteStrings { < nl > } < nl > < nl > public static byte [ ] intToBytes ( int v ) { < nl > - byte [ ] data = new byte [ 8 ] ; < nl > + byte [ ] data = new byte [ 4 ] ; < nl > int offset = 0 ; < nl > data [ offset + + ] = ( byte ) ( ( v > > 24 ) & 0xFF ) ; < nl > data [ offset + + ] = ( byte ) ( ( v > > 16 ) & 0xFF ) ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 index cc9cf82 . . 64132a5 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 @ @ - 55 , 7 + 55 , 7 @ @ public class CallActor extends EventBusActor { 
 } 
 
 public final void sendSignalingMessage ( int uid , long deviceId , ApiWebRTCSignaling signaling ) { 
 - Log . d ( TAG , " sendSignaling " ) ; 
 + / / Log . d ( TAG , " sendSignaling " ) ; 
 try { 
 sendMessage ( uid , deviceId , signaling . buildContainer ( ) ) ; 
 } catch ( IOException e ) { 
 @ @ - 66 , 7 + 66 , 7 @ @ public class CallActor extends EventBusActor { 
 
 @ Override 
 public final void onMessageReceived ( @ Nullable Integer senderId , @ Nullable Long senderDeviceId , byte [ ] data ) { 
 - Log . d ( TAG , " onMessageReceived : start " ) ; 
 + / / Log . d ( TAG , " onMessageReceived : start " ) ; 
 
 / / Ignoring messages without sender 
 if ( senderId = = null | | senderDeviceId = = null ) { 
 @ @ - 84 , 14 + 84 , 14 @ @ public class CallActor extends EventBusActor { 
 
 Log . d ( TAG , " onMessageReceived : " + signaling ) ; 
 onSignalingMessage ( senderId , senderDeviceId , signaling ) ; 
 - Log . d ( TAG , " onMessageReceived : " + signaling + " : end " ) ; 
 + / / Log . d ( TAG , " onMessageReceived : " + signaling + " : end " ) ; 
 } 
 
 @ Override 
 public void onReceive ( Object message ) { 
 - Log . d ( TAG , " onReceive " ) ; 
 + / / Log . d ( TAG , " onReceive " ) ; 
 if ( message instanceof PeerConnectionActor . DoAnswer ) { 
 - Log . d ( TAG , " onReceive : doAnswer " ) ; 
 + / / Log . d ( TAG , " onReceive : doAnswer " ) ; 
 PeerConnectionActor . DoAnswer answer = ( PeerConnectionActor . DoAnswer ) message ; 
 sendSignalingMessage ( answer . getUid ( ) , answer . getDeviceId ( ) , 
 new ApiAnswer ( 0 , answer . getSdp ( ) ) ) ; 
 @ @ - 106 , 7 + 106 , 7 @ @ public class CallActor extends EventBusActor { 
 } else { 
 super . onReceive ( message ) ; 
 } 
 - Log . d ( TAG , " onReceive : End " ) ; 
 + / / Log . d ( TAG , " onReceive : End " ) ; 
 } 
 
 protected ActorRef getPeer ( int uid , long deviceId ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 index 09ddfc5 . . 83b0b87 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 @ @ - 1 , 25 + 1 , 21 @ @ 
 package im . actor . core . modules . calls ; 
 
 - import im . actor . core . api . ApiOffer ; 
 - import im . actor . core . api . ApiWebRTCSignaling ; 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . core . api . ApiNeedOffer ; 
 import im . actor . core . api . rpc . RequestDoCall ; 
 import im . actor . core . api . rpc . ResponseDoCall ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . modules . ModuleContext ; 
 - import im . actor . core . util . RandomUtils ; 
 import im . actor . runtime . Log ; 
 - import im . actor . runtime . WebRTC ; 
 import im . actor . runtime . function . Consumer ; 
 - import im . actor . runtime . function . Function ; 
 - import im . actor . runtime . promise . Promise ; 
 - import im . actor . runtime . webrtc . WebRTCLocalStream ; 
 - import im . actor . runtime . webrtc . WebRTCPeerConnection ; 
 
 public class CallMasterActor extends CallActor { 
 
 private static final String TAG = " CallMasterActor " ; 
 
 private final Peer peer ; 
 + private ArrayList < ConnectedHolder > connectedDevices = new ArrayList < > ( ) ; 
 
 public CallMasterActor ( Peer peer , ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 28 , 17 + 24 , 14 @ @ public class CallMasterActor extends CallActor { 
 
 @ Override 
 public void onBusCreated ( ) { 
 - Log . d ( TAG , " onBusCreated " ) ; 
 api ( new RequestDoCall ( buidOutPeer ( peer ) , getBusId ( ) ) ) . then ( new Consumer < ResponseDoCall > ( ) { 
 @ Override 
 public void apply ( ResponseDoCall responseDoCall ) { 
 - Log . d ( TAG , " onBusCreated : result " ) ; 
 onCallCreated ( ) ; 
 } 
 } ) . failure ( new Consumer < Exception > ( ) { 
 @ Override 
 public void apply ( Exception e ) { 
 - Log . d ( TAG , " onBusCreated : error " ) ; 
 dispose ( ) ; 
 } 
 } ) . done ( self ( ) ) ; 
 @ @ - 50 , 27 + 43 , 45 @ @ public class CallMasterActor extends CallActor { 
 
 @ Override 
 public void onDeviceConnected ( final int uid , final long deviceId ) { 
 - Log . d ( TAG , " onDeviceConnected " ) ; 
 + ConnectedHolder connectedHolder = new ConnectedHolder ( uid , deviceId ) ; 
 + if ( connectedDevices . contains ( connectedHolder ) ) { 
 + return ; 
 + } 
 getPeer ( uid , deviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; 
 + for ( ConnectedHolder c : connectedDevices ) { 
 + / / sendSignalingMessage ( c . uid , c . deviceId , new ApiNeedOffer ( uid , deviceId ) ) ; 
 + sendSignalingMessage ( uid , deviceId , new ApiNeedOffer ( c . uid , c . deviceId ) ) ; 
 + } 
 + connectedDevices . add ( connectedHolder ) ; 
 } 
 
 - @ Override 
 - public void onDeviceDisconnected ( int uid , long deviceId ) { 
 - Log . d ( TAG , " onDeviceDisconnected " ) ; 
 - } 
 + private static class ConnectedHolder { 
 
 - @ Override 
 - public void onBusShutdown ( ) { 
 - Log . d ( TAG , " onBusShutdown " ) ; 
 - } 
 + private int uid ; 
 + private long deviceId ; 
 
 - @ Override 
 - public void onBusDisposed ( ) { 
 - Log . d ( TAG , " onBusDisposed " ) ; 
 - } 
 + public ConnectedHolder ( int uid , long deviceId ) { 
 + this . uid = uid ; 
 + this . deviceId = deviceId ; 
 + } 
 
 - @ Override 
 - public void onBusStopped ( ) { 
 - Log . d ( TAG , " onBusStopped " ) ; 
 + @ Override 
 + public boolean equals ( Object o ) { 
 + if ( this = = o ) return true ; 
 + if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; 
 + 
 + ConnectedHolder that = ( ConnectedHolder ) o ; 
 + 
 + if ( uid ! = that . uid ) return false ; 
 + return deviceId = = that . deviceId ; 
 + 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) { 
 + int result = uid ; 
 + result = 31 * result + ( int ) ( deviceId ^ ( deviceId > > > 32 ) ) ; 
 + return result ; 
 + } 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 index 9bc33b1 . . 909ad6b 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 @ @ - 1 , 5 + 1 , 7 @ @ 
 package im . actor . core . modules . calls ; 
 
 + import im . actor . core . api . ApiNeedOffer ; 
 + import im . actor . core . api . ApiWebRTCSignaling ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . runtime . Log ; 
 
 @ @ - 12 , 39 + 14 , 13 @ @ public class CallSlaveActor extends CallActor { 
 } 
 
 @ Override 
 - public void onBusJoined ( ) { 
 - Log . d ( TAG , " onBusCreated " ) ; 
 - } 
 - 
 - @ Override 
 - public void onDeviceConnected ( int uid , long deviceId ) { 
 - Log . d ( TAG , " onDeviceConnected " ) ; 
 - } 
 - 
 - @ Override 
 - public void onDeviceDisconnected ( int uid , long deviceId ) { 
 - Log . d ( TAG , " onDeviceDisconnected " ) ; 
 - } 
 - 
 - @ Override 
 - public void onBusShutdown ( ) { 
 - Log . d ( TAG , " onBusShutdown " ) ; 
 - } 
 - 
 - @ Override 
 - public void onBusDisposed ( ) { 
 - Log . d ( TAG , " onBusDisposed " ) ; 
 - } 
 - 
 - @ Override 
 - public void onBusStopped ( ) { 
 - Log . d ( TAG , " onBusStopped " ) ; 
 - } 
 - 
 - @ Override 
 - public void onReceive ( Object message ) { 
 - Log . d ( TAG , " onReceive " ) ; 
 - super . onReceive ( message ) ; 
 - Log . d ( TAG , " onReceive : end " ) ; 
 + public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { 
 + if ( signaling instanceof ApiNeedOffer ) { 
 + ApiNeedOffer needOffer = ( ApiNeedOffer ) signaling ; 
 + Log . w ( TAG , " Need offer for : " + needOffer . getUid ( ) ) ; 
 + getPeer ( needOffer . getUid ( ) , needOffer . getDevice ( ) ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; 
 + } else { 
 + super . onSignalingMessage ( fromUid , fromDeviceId , signaling ) ; 
 + } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 index 343a3f6 . . 2355098 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 @ @ - 172 , 7 + 172 , 8 @ @ public class PeerConnectionActor extends ModuleActor { 
 / / 5 . Enter READY mode 
 / / 
 
 - Log . d ( TAG , " onOffer " ) ; 
 + Log . d ( TAG , " Received Offer " ) ; 
 + 
 isReady = false ; 
 peerConnection . setRemoteDescription ( new WebRTCSessionDescription ( " offer " , sdp ) ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 @ Override 
 @ @ - 187 , 15 + 188 , 12 @ @ public class PeerConnectionActor extends ModuleActor { 
 } ) . then ( new Consumer < WebRTCSessionDescription > ( ) { 
 @ Override 
 public void apply ( WebRTCSessionDescription description ) { 
 - Log . d ( TAG , " onOffer : then " ) ; 
 root . send ( new DoAnswer ( uid , deviceId , description . getSdp ( ) ) ) ; 
 - Log . d ( TAG , " onOffer : then : end " ) ; 
 onHandShakeCompleted ( ) ; 
 } 
 } ) . failure ( new Consumer < Exception > ( ) { 
 @ Override 
 public void apply ( Exception e ) { 
 - Log . d ( TAG , " onOffer : failure " ) ; 
 e . printStackTrace ( ) ; 
 / / TODO : Handle It 
 } 
 @ @ - 208 , 6 + 206 , 8 @ @ public class PeerConnectionActor extends ModuleActor { 
 return ; 
 } 
 
 + Log . d ( TAG , " Received Answer " ) ; 
 + 
 / / 
 / / Stages 
 / / 1 . Set Remote Description 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusModule . java 
 index 5b20c45 . . 390a58e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusModule . java 
 @ @ - 50 , 9 + 50 , 9 @ @ public class EventBusModule extends AbsModule { 
 busMessage . getSenderId ( ) , 
 busMessage . getSenderDeviceId ( ) , 
 busMessage . getMessage ( ) ) ) ; 
 - Log . d ( " EVENTBUS " , " Delivered " ) ; 
 + / / Log . d ( " EVENTBUS " , " Delivered " ) ; 
 } else { 
 - Log . d ( " EVENTBUS " , " Not Delivered " ) ; 
 + / / Log . d ( " EVENTBUS " , " Not Delivered " ) ; 
 if ( ! pendingMessages . containsKey ( busMessage . getId ( ) ) ) { 
 pendingMessages . put ( busMessage . getId ( ) , new ArrayList < > ( ) ) ; 
 } 
 @ @ - 66 , 7 + 66 , 7 @ @ public class EventBusModule extends AbsModule { 
 deviceConnected . getUserId ( ) , 
 deviceConnected . getDeviceId ( ) ) ) ; 
 } else { 
 - Log . d ( " EVENTBUS " , " Not Delivered " ) ; 
 + / / Log . d ( " EVENTBUS " , " Not Delivered " ) ; 
 if ( ! pendingMessages . containsKey ( deviceConnected . getId ( ) ) ) { 
 pendingMessages . put ( deviceConnected . getId ( ) , new ArrayList < > ( ) ) ; 
 } 
 @ @ - 91 , 7 + 91 , 7 @ @ public class EventBusModule extends AbsModule { 
 if ( dest ! = null ) { 
 dest . send ( new EventBusActor . EventBusDisposed ( ) ) ; 
 } else { 
 - Log . d ( " EVENTBUS " , " Not Delivered " ) ; 
 + / / Log . d ( " EVENTBUS " , " Not Delivered " ) ; 
 if ( ! pendingMessages . containsKey ( disposed . getId ( ) ) ) { 
 pendingMessages . put ( disposed . getId ( ) , new ArrayList < > ( ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java 
 index 42d13d6 . . c40389e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java 
 @ @ - 73 , 7 + 73 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { 
 return ; 
 } 
 
 - Log . d ( TAG , " Processing weak update : " + update ) ; 
 + / / Log . d ( TAG , " Processing weak update : " + update ) ; 
 this . processor . processWeakUpdate ( update , date ) ; 
 } 
 
 @ @ - 115 , 7 + 115 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { 
 processor . applyRelated ( users , groups , true ) ; 
 } 
 
 - Log . d ( TAG , " Processing update success " ) ; 
 + / / Log . d ( TAG , " Processing update success " ) ; 
 return Promises . success ( new UpdateProcessed ( ) ) ; 
 } 
 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / PeerConnection . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / PeerConnection . java 
 index 1904d1c . . 3bd1d08 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / PeerConnection . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / PeerConnection . java 
 @ @ - 24 , 6 + 24 , 26 @ @ public class PeerConnection implements WebRTCPeerConnection { 
 
 public PeerConnection ( JsPeerConnection peerConnection ) { 
 this . peerConnection = peerConnection ; 
 + this . peerConnection . setListener ( new JsPeerConnectionListener ( ) { 
 + @ Override 
 + public void onIceCandidate ( JsRTCIceCandidate candidate ) { 
 + for ( WebRTCPeerConnectionCallback c : callbacks ) { 
 + c . onCandidate ( candidate . getLabel ( ) , candidate . getId ( ) , candidate . getSDP ( ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void onIceCandidatesEnded ( ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onStreamAdded ( JsMediaStream stream ) { 
 + JsAudio audio = JsAudio . create ( ) ; 
 + audio . setStream ( stream ) ; 
 + audio . play ( ) ; 
 + } 
 + } ) ; 
 } 
 
 @ Override

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index 2f54661 . . c33368d 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 1550 , 7 + 1550 , 7 @ @ 
 	 	 	 	 TargetAttributes = { 
 	 	 	 	 	 066A50D11BC4AE63000E606E = { 
 	 	 	 	 	 	 CreatedOnToolsVersion = 7 . 0 ; 
 - 	 	 	 	 	 	 DevelopmentTeam = PR6635TQQ3 ; 
 + 	 	 	 	 	 	 DevelopmentTeam = HVJR44Y5B6 ; 
 	 	 	 	 	 } ; 
 	 	 	 	 } ; 
 	 	 	 } ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java 
 index 2d72521 . . 37809ce 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java 
 @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . core . modules . encryption . entity . EncryptedBox ; 
 import im . actor . core . modules . encryption . entity . EncryptedBoxKey ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 + import im . actor . core . util . Hex ; 
 import im . actor . core . util . ModuleActor ; 
 import im . actor . runtime . Crypto ; 
 import im . actor . runtime . Log ; 
 @ @ - 25 , 6 + 26 , 7 @ @ import im . actor . runtime . actors . ask . AskRequest ; 
 import im . actor . runtime . crypto . IntegrityException ; 
 import im . actor . runtime . crypto . box . ActorBox ; 
 import im . actor . runtime . crypto . box . ActorBoxKey ; 
 + import im . actor . runtime . crypto . primitives . util . ByteStrings ; 
 
 public class EncryptedPeerActor extends ModuleActor { 
 
 @ @ - 34 , 6 + 36 , 7 @ @ public class EncryptedPeerActor extends ModuleActor { 
 private ArrayList < ApiEncryptionKeyGroup > keyGroups ; 
 private HashMap < Integer , ActorRef > sessions = new HashMap < Integer , ActorRef > ( ) ; 
 private boolean isReady = false ; 
 + private int ownKeyGroupId ; 
 
 public EncryptedPeerActor ( int uid , ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 78 , 14 + 81 , 29 @ @ public class EncryptedPeerActor extends ModuleActor { 
 } 
 } ) , getPath ( ) + " / k _ " + g . getKeyGroupId ( ) ) ) ; 
 } 
 + ask ( context ( ) . getEncryption ( ) . getKeyManager ( ) , new KeyManagerActor . FetchOwnKeyGroup ( ) , new AskCallback ( ) { 
 + @ Override 
 + public void onResult ( Object obj ) { 
 + KeyManagerActor . FetchOwnKeyGroupResult res = ( KeyManagerActor . FetchOwnKeyGroupResult ) obj ; 
 + ownKeyGroupId = res . getKeyGroupId ( ) ; 
 + onOwnKeysReady ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( Exception e ) { 
 + / / Do nothing 
 + } 
 + } ) ; 
 + } 
 + 
 + private void onOwnKeysReady ( ) { 
 + Log . w ( TAG , " onOwnKeysReady " ) ; 
 isReady = true ; 
 unstashAll ( ) ; 
 } 
 
 private void doEncrypt ( final byte [ ] data , final Future future ) { 
 - 
 Log . d ( TAG , " doEncrypt " ) ; 
 - 
 final byte [ ] encKey = Crypto . randomBytes ( 128 ) ; 
 
 final ArrayList < EncryptedBoxKey > encryptedKeys = new ArrayList < EncryptedBoxKey > ( ) ; 
 @ @ - 112 , 19 + 130 , 61 @ @ public class EncryptedPeerActor extends ModuleActor { 
 Log . d ( TAG , " doEncrypt2 " ) ; 
 byte [ ] encData ; 
 try { 
 - encData = ActorBox . closeBox ( new byte [ 0 ] , data , Crypto . randomBytes ( 32 ) , new ActorBoxKey ( encKey ) ) ; 
 + encData = ActorBox . closeBox ( ByteStrings . intToBytes ( ownKeyGroupId ) , data , Crypto . randomBytes ( 32 ) , new ActorBoxKey ( encKey ) ) ; 
 } catch ( IntegrityException e ) { 
 e . printStackTrace ( ) ; 
 future . onError ( e ) ; 
 return ; 
 } 
 
 - EncryptedBox encryptedBox = new EncryptedBox ( encryptedKeys . toArray ( new EncryptedBoxKey [ 0 ] ) , encData ) ; 
 + EncryptedBox encryptedBox = new EncryptedBox ( 
 + encryptedKeys . toArray ( new EncryptedBoxKey [ encryptedKeys . size ( ) ] ) , 
 + ByteStrings . merge ( ByteStrings . intToBytes ( ownKeyGroupId ) , encData ) ) ; 
 + 
 + Log . d ( TAG , " doEncrypt : EncPackage : " + Hex . toHex ( encData ) ) ; 
 + for ( EncryptedBoxKey k : encryptedKeys ) { 
 + Log . d ( TAG , " Key : " + Hex . toHex ( k . getEncryptedKey ( ) ) ) ; 
 + } 
 + 
 future . onResult ( encryptedBox ) ; 
 } 
 
 - private void doDecrypt ( EncryptedBox data , Future future ) { 
 + private void doDecrypt ( EncryptedBox data , final Future future ) { 
 + int senderKeyGroup = ByteStrings . bytesToInt ( ByteStrings . substring ( data . getEncryptedPackage ( ) , 0 , 4 ) ) ; 
 + byte [ ] encPackage = ByteStrings . substring ( data . getEncryptedPackage ( ) , 4 , data . getEncryptedPackage ( ) . length - 4 ) ; 
 + 
 + if ( sessions . containsKey ( senderKeyGroup ) ) { 
 + Log . d ( TAG , " Decryption with key group " ) ; 
 + byte [ ] encKey = null ; 
 + for ( EncryptedBoxKey k : data . getKeys ( ) ) { 
 + if ( k . getKeyGroupId ( ) = = ownKeyGroupId & & k . getUid ( ) = = myUid ( ) ) { 
 + encKey = k . getEncryptedKey ( ) ; 
 + break ; 
 + } 
 + } 
 + 
 + Log . d ( TAG , " EncPackage : " + Hex . toHex ( encPackage ) ) ; 
 + for ( EncryptedBoxKey k : data . getKeys ( ) ) { 
 + Log . d ( TAG , " Key : " + Hex . toHex ( k . getEncryptedKey ( ) ) ) ; 
 + } 
 + 
 + ask ( sessions . get ( senderKeyGroup ) , new EncryptionSessionActor . DecryptPackage ( encKey ) , new AskCallback ( ) { 
 + @ Override 
 + public void onResult ( Object obj ) { 
 + Log . d ( TAG , " Decryption with key group : onResult " ) ; 
 + future . onResult ( ) ; 
 + } 
 
 + @ Override 
 + public void onError ( Exception e ) { 
 + Log . d ( TAG , " Decryption with key group : onError " ) ; 
 + future . onError ( e ) ; 
 + } 
 + } ) ; 
 + } else { 
 + Log . w ( TAG , " Unable to find appropriate session # " + senderKeyGroup ) ; 
 + future . onError ( new RuntimeException ( ) ) ; 
 + } 
 } 
 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptionSessionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptionSessionActor . java 
 index 7f57506 . . 5d65dd8 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptionSessionActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptionSessionActor . java 
 @ @ - 8 , 9 + 8 , 11 @ @ import im . actor . core . api . ApiUserOutPeer ; 
 import im . actor . core . api . rpc . RequestLoadEphermalPublicKeys ; 
 import im . actor . core . api . rpc . ResponsePublicKeys ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . encryption . entity . EncryptedBoxKey ; 
 import im . actor . core . modules . encryption . entity . EncryptionKey ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 + import im . actor . core . util . Hex ; 
 import im . actor . core . util . ModuleActor ; 
 import im . actor . core . util . RandomUtils ; 
 import im . actor . runtime . Crypto ; 
 @ @ - 101 , 7 + 103 , 7 @ @ public class EncryptionSessionActor extends ModuleActor { 
 return ; 
 } 
 
 - ApiEncryptionKey encryptionKey = response . getPublicKey ( ) . get ( 0 ) ; 
 + ApiEncryptionKey encryptionKey = response . getPublicKey ( ) . get ( RandomUtils . randomId ( response . getPublicKey ( ) . size ( ) ) ) ; 
 theirEphermalKey0 = new EncryptionKey ( encryptionKey . getKeyId ( ) , encryptionKey . getKeyAlg ( ) , encryptionKey . getKeyMaterial ( ) , null ) ; 
 onTheirReady0 ( ) ; 
 } 
 @ @ - 169 , 6 + 171 , 7 @ @ public class EncryptionSessionActor extends ModuleActor { 
 ActorBoxKey ratchetMessageKey = RatchetMessageKey . buildKey ( rootChainKey , 0 ) ; 
 
 byte [ ] header = ByteStrings . merge ( 
 + ByteStrings . intToBytes ( encryptionKeyGroup . getKeyGroupId ( ) ) , 
 ByteStrings . longToBytes ( ownEphermalKey0 . getKeyId ( ) ) , / * Alice Initial Ephermal * / 
 ByteStrings . longToBytes ( theirEphermalKey0 . getKeyId ( ) ) , / * Bob Initial Ephermal * / 
 currentOwnKey . getPublicKey ( ) , 
 @ @ - 186 , 9 + 189 , 46 @ @ public class EncryptionSessionActor extends ModuleActor { 
 
 byte [ ] pkg = ByteStrings . merge ( header , encrypted ) ; 
 
 + 
 + int keyGroupId = ByteStrings . bytesToInt ( pkg , 0 ) ; 
 + long ownEphermalKey0Id = ByteStrings . bytesToLong ( pkg , 4 ) ; 
 + long theirEphermalKey0Id = ByteStrings . bytesToLong ( pkg , 12 ) ; 
 + byte [ ] ownEphermalKey = ByteStrings . substring ( pkg , 20 , 32 ) ; 
 + byte [ ] theirEphermalKey = ByteStrings . substring ( pkg , 52 , 32 ) ; 
 + int messageIndex = ByteStrings . bytesToInt ( pkg , 84 ) ; 
 + 
 + Log . d ( TAG , " onEncrypt : " + Hex . toHex ( pkg ) ) ; 
 + Log . d ( TAG , " onEncrypt : key group id : " + encryptionKeyGroup . getKeyGroupId ( ) ) ; 
 + Log . d ( TAG , " onEncrypt : ownEphermalKey0Id : " + ownEphermalKey0 . getKeyId ( ) ) ; 
 + Log . d ( TAG , " onEncrypt : theirEphermalKey0Id : " + theirEphermalKey0 . getKeyId ( ) ) ; 
 + Log . d ( TAG , " onEncrypt : messageIndex : " + outIndex ) ; 
 + 
 + 
 + Log . d ( TAG , " onEncrypt : 2key group id : " + keyGroupId ) ; 
 + Log . d ( TAG , " onEncrypt : 2ownEphermalKey0Id : " + ownEphermalKey0Id ) ; 
 + Log . d ( TAG , " onEncrypt : 2theirEphermalKey0Id : " + theirEphermalKey0Id ) ; 
 + Log . d ( TAG , " onEncrypt : 2messageIndex : " + messageIndex ) ; 
 + 
 future . onResult ( new EncryptedPackageRes ( pkg ) ) ; 
 } 
 
 + private void onDecrypt ( byte [ ] data , Future future ) { 
 + int keyGroupId = ByteStrings . bytesToInt ( data , 0 ) ; 
 + long ownEphermalKey0Id = ByteStrings . bytesToLong ( data , 4 ) ; 
 + long theirEphermalKey0Id = ByteStrings . bytesToLong ( data , 12 ) ; 
 + byte [ ] ownEphermalKey = ByteStrings . substring ( data , 20 , 32 ) ; 
 + byte [ ] theirEphermalKey = ByteStrings . substring ( data , 52 , 32 ) ; 
 + int messageIndex = ByteStrings . bytesToInt ( data , 84 ) ; 
 + 
 + Log . d ( TAG , " onDecrypt : " + Hex . toHex ( data ) ) ; 
 + Log . d ( TAG , " onDecrypt : key group id : " + keyGroupId + " , " + data . length ) ; 
 + Log . d ( TAG , " onDecrypt : ownEphermalKey0Id : " + ownEphermalKey0Id ) ; 
 + Log . d ( TAG , " onDecrypt : theirEphermalKey0Id : " + theirEphermalKey0Id ) ; 
 + Log . d ( TAG , " onDecrypt : messageIndex : " + messageIndex ) ; 
 + 
 + / / future . onResult ( ) ; 
 + } 
 + 
 @ Override 
 public void onReceive ( Object message ) { 
 if ( ! isReady & & message instanceof AskRequest ) { 
 @ @ - 203 , 6 + 243 , 10 @ @ public class EncryptionSessionActor extends ModuleActor { 
 if ( message instanceof EncryptPackage ) { 
 onEncrypt ( ( ( EncryptPackage ) message ) . getData ( ) , future ) ; 
 return false ; 
 + } else if ( message instanceof DecryptPackage ) { 
 + DecryptPackage decryptPackage = ( DecryptPackage ) message ; 
 + onDecrypt ( decryptPackage . getData ( ) , future ) ; 
 + return false ; 
 } else { 
 return super . onAsk ( message , future ) ; 
 } 
 @ @ - 232 , 4 + 276 , 17 @ @ public class EncryptionSessionActor extends ModuleActor { 
 return data ; 
 } 
 } 
 + 
 + public static class DecryptPackage { 
 + 
 + private byte [ ] data ; 
 + 
 + public DecryptPackage ( byte [ ] data ) { 
 + this . data = data ; 
 + } 
 + 
 + public byte [ ] getData ( ) { 
 + return data ; 
 + } 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java 
 index f4eb042 . . 58c2383 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java 
 @ @ - 230 , 6 + 230 , 10 @ @ public class KeyManagerActor extends ModuleActor { 
 future . onResult ( new FetchOwnKeyResult ( privateKeyStorage . getIdentityKey ( ) , ephemeralEncryptionKey . getEncryptionKey ( ) ) ) ; 
 } 
 
 + private void fetchKeyGroup ( Future future ) { 
 + future . onResult ( new FetchOwnKeyGroupResult ( privateKeyStorage . getKeyGroupId ( ) ) ) ; 
 + } 
 + 
 @ Override 
 public void onReceive ( Object message ) { 
 if ( message instanceof AskRequest & & ! isReady ) { 
 @ @ - 244 , 6 + 248 , 9 @ @ public class KeyManagerActor extends ModuleActor { 
 if ( message instanceof FetchOwnKey ) { 
 fetchOwnKey ( future ) ; 
 return false ; 
 + } else if ( message instanceof FetchOwnKeyGroup ) { 
 + fetchKeyGroup ( future ) ; 
 + return false ; 
 } 
 return super . onAsk ( message , future ) ; 
 } 
 @ @ - 270 , 4 + 277 , 20 @ @ public class KeyManagerActor extends ModuleActor { 
 return ephemeralKey ; 
 } 
 } 
 + 
 + public static class FetchOwnKeyGroup { 
 + 
 + } 
 + 
 + public static class FetchOwnKeyGroupResult { 
 + private int keyGroupId ; 
 + 
 + public FetchOwnKeyGroupResult ( int keyGroupId ) { 
 + this . keyGroupId = keyGroupId ; 
 + } 
 + 
 + public int getKeyGroupId ( ) { 
 + return keyGroupId ; 
 + } 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / MessageEncryptionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / MessageEncryptionActor . java 
 index 815d4ba . . 6d0d54d 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / MessageEncryptionActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / MessageEncryptionActor . java 
 @ @ - 48 , 6 + 48 , 29 @ @ public class MessageEncryptionActor extends ModuleActor { 
 } ) ; 
 } 
 
 + public void onDecrypt ( int uid , ApiEncryptedMessage message ) { 
 + Log . d ( TAG , " onDecrypt : " + uid ) ; 
 + ArrayList < EncryptedBoxKey > encryptedBoxKeys = new ArrayList < EncryptedBoxKey > ( ) ; 
 + for ( ApiEncyptedBoxKey key : message . getBox ( ) . getKeys ( ) ) { 
 + if ( key . getUsersId ( ) = = myUid ( ) ) { 
 + encryptedBoxKeys . add ( new EncryptedBoxKey ( key . getUsersId ( ) , key . getKeyGroupId ( ) , 
 + key . getEncryptedKey ( ) ) ) ; 
 + } 
 + } 
 + EncryptedBox encryptedBox = new EncryptedBox ( encryptedBoxKeys . toArray ( new EncryptedBoxKey [ 0 ] ) , message . getBox ( ) . getEncPackage ( ) ) ; 
 + ask ( context ( ) . getEncryption ( ) . getEncryptedChatManager ( uid ) , new EncryptedPeerActor . DecryptPackage ( encryptedBox ) , new AskCallback ( ) { 
 + @ Override 
 + public void onResult ( Object obj ) { 
 + Log . d ( TAG , " onDecrypt : onResult " ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( Exception e ) { 
 + Log . d ( TAG , " onDecrypt : onError " ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 @ Override 
 public boolean onAsk ( Object message , Future future ) { 
 if ( message instanceof EncryptMessage ) { 
 @ @ - 58 , 6 + 81 , 16 @ @ public class MessageEncryptionActor extends ModuleActor { 
 return super . onAsk ( message , future ) ; 
 } 
 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof InMessage ) { 
 + InMessage inMessage = ( InMessage ) message ; 
 + onDecrypt ( inMessage . senderUid , inMessage . encryptedMessage ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 + } 
 + } 
 + 
 public static class InMessage { 
 
 private Peer peer ; 
 @ @ - 105 , 4 + 138 , 17 @ @ public class MessageEncryptionActor extends ModuleActor { 
 return encryptedMessage ; 
 } 
 } 
 + 
 + public static class DecryptMessage { 
 + 
 + private ApiEncryptedMessage encryptedMessage ; 
 + 
 + public DecryptMessage ( ApiEncryptedMessage encryptedMessage ) { 
 + this . encryptedMessage = encryptedMessage ; 
 + } 
 + 
 + public ApiEncryptedMessage getEncryptedMessage ( ) { 
 + return encryptedMessage ; 
 + } 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java 
 index 9da4c36 . . 8a8877a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import im . actor . core . entity . content . AbsContent ; 
 import im . actor . core . entity . content . ServiceUserRegistered ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . encryption . MessageEncryptionActor ; 
 import im . actor . core . modules . internal . messages . ConversationActor ; 
 import im . actor . core . modules . internal . messages . ConversationHistoryActor ; 
 import im . actor . core . modules . internal . messages . CursorReceiverActor ; 
 @ @ - 53 , 11 + 54 , 13 @ @ public class MessagesProcessor extends AbsModule { 
 long intMessageSortDate = 0 ; 
 Peer peer = convert ( _ peer ) ; 
 
 - ArrayList < Message > nMesages = new ArrayList < Message > ( ) ; 
 + ArrayList < Message > nMessages = new ArrayList < Message > ( ) ; 
 for ( UpdateMessage u : messages ) { 
 
 if ( u . getMessage ( ) instanceof ApiEncryptedMessage ) { 
 - / / TODO : Decrypt message 
 + / / TODO : Proper decrypt message 
 + context ( ) . getEncryption ( ) . getMessageEncryptor ( ) . send ( new MessageEncryptionActor . InMessage ( peer , 
 + u . getDate ( ) , u . getSenderUid ( ) , u . getRid ( ) , ( ApiEncryptedMessage ) u . getMessage ( ) ) ) ; 
 continue ; 
 } 
 
 @ @ - 72 , 7 + 75 , 7 @ @ public class MessagesProcessor extends AbsModule { 
 boolean isOut = myUid ( ) = = u . getSenderUid ( ) ; 
 
 / / Sending message to conversation 
 - nMesages . add ( new Message ( u . getRid ( ) , u . getDate ( ) , u . getDate ( ) , u . getSenderUid ( ) , 
 + nMessages . add ( new Message ( u . getRid ( ) , u . getDate ( ) , u . getDate ( ) , u . getSenderUid ( ) , 
 isOut ? MessageState . SENT : MessageState . UNKNOWN , msgContent , 
 new ArrayList < Reaction > ( ) ) ) ; 
 
 @ @ - 84 , 7 + 87 , 7 @ @ public class MessagesProcessor extends AbsModule { 
 } 
 } 
 
 - conversationActor ( peer ) . send ( new ConversationActor . Messages ( nMesages ) ) ; 
 + conversationActor ( peer ) . send ( new ConversationActor . Messages ( nMessages ) ) ; 
 
 if ( intMessageSortDate > 0 ) { 
 plainReceiveActor ( ) . send ( new CursorReceiverActor . MarkReceived ( peer , intMessageSortDate ) ) ; 
 @ @ - 95 , 7 + 98 , 7 @ @ public class MessagesProcessor extends AbsModule { 
 } 
 
 / / OwnReadActor 
 - for ( Message m : nMesages ) { 
 + for ( Message m : nMessages ) { 
 if ( m . getSenderId ( ) ! = myUid ( ) ) { 
 ownReadActor ( ) . send ( new OwnReadActor . InMessage ( peer , m ) ) ; 
 } 
 @ @ - 107 , 6 + 110 , 13 @ @ public class MessagesProcessor extends AbsModule { 
 ApiMessage content ) { 
 
 Peer peer = convert ( _ peer ) ; 
 + 
 + if ( content instanceof ApiEncryptedMessage ) { 
 + / / TODO : Proper decrypt message 
 + context ( ) . getEncryption ( ) . getMessageEncryptor ( ) . send ( new MessageEncryptionActor . InMessage ( peer , 
 + date , senderUid , rid , ( ApiEncryptedMessage ) content ) ) ; 
 + } 
 + 
 AbsContent msgContent ; 
 try { 
 msgContent = AbsContent . fromMessage ( content ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / util / ByteStrings . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / util / ByteStrings . java 
 index 7ff7e50 . . e4aff27 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / util / ByteStrings . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / util / ByteStrings . java 
 @ @ - 22 , 7 + 22 , 7 @ @ public class ByteStrings { 
 } 
 
 public static byte [ ] intToBytes ( int v ) { 
 - byte [ ] data = new byte [ 8 ] ; 
 + byte [ ] data = new byte [ 4 ] ; 
 int offset = 0 ; 
 data [ offset + + ] = ( byte ) ( ( v > > 24 ) & 0xFF ) ; 
 data [ offset + + ] = ( byte ) ( ( v > > 16 ) & 0xFF ) ;
