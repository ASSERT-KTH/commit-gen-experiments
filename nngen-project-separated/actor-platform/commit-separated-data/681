BLEU SCORE: 0.05816635421147513

TEST MSG: fix ( core ) : Fixing redownloading of files , fixing mixing dialog cells content
GENERATED MSG: perf ( iOS ) : Fixed row tables performance optimizations

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift < nl > index dd0946f . . 99c380f 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 	 < nl > @ @ - 59 , 23 + 59 , 23 @ @ public class AADialogCell : AATableViewCell , AABindedCell { < nl > < nl > titleView . displaysAsynchronously = true < nl > titleView . ignoreCommonProperties = true < nl > - titleView . fadeOnAsynchronouslyDisplay = false < nl > - titleView . clearContentsBeforeAsynchronouslyDisplay = false < nl > + / / titleView . fadeOnAsynchronouslyDisplay = true < nl > + titleView . clearContentsBeforeAsynchronouslyDisplay = true < nl > < nl > messageView . displaysAsynchronously = true < nl > messageView . ignoreCommonProperties = true < nl > - messageView . fadeOnAsynchronouslyDisplay = false < nl > - messageView . clearContentsBeforeAsynchronouslyDisplay = false < nl > + / / messageView . fadeOnAsynchronouslyDisplay = true < nl > + messageView . clearContentsBeforeAsynchronouslyDisplay = true < nl > < nl > dateView . displaysAsynchronously = true < nl > dateView . ignoreCommonProperties = true < nl > - dateView . fadeOnAsynchronouslyDisplay = false < nl > - dateView . clearContentsBeforeAsynchronouslyDisplay = false < nl > + / / dateView . fadeOnAsynchronouslyDisplay = true < nl > + dateView . clearContentsBeforeAsynchronouslyDisplay = true < nl > < nl > counterView . displaysAsynchronously = true < nl > counterView . ignoreCommonProperties = true < nl > - counterView . fadeOnAsynchronouslyDisplay = false < nl > - counterView . clearContentsBeforeAsynchronouslyDisplay = false < nl > + / / counterView . fadeOnAsynchronouslyDisplay = true < nl > + counterView . clearContentsBeforeAsynchronouslyDisplay = true < nl > < nl > counterViewBg . image = AADialogCell . counterBgImage < nl > < nl > @ @ - 100 , 6 + 100 , 11 @ @ public class AADialogCell : AATableViewCell , AABindedCell { < nl > / / Checking dialog rebinding < nl > / / < nl > < nl > + / / Nothing changed < nl > + if bindedItem = = item { < nl > + return < nl > + } < nl > + < nl > var isRebind : Bool = false < nl > if let b = bindedItem { < nl > if b . peer . isEqual ( item . peer ) . boolValue { < nl > @ @ - 126 , 19 + 131 , 25 @ @ public class AADialogCell : AATableViewCell , AABindedCell { < nl > < nl > / / Reseting Text Layout on new peer binding < nl > if ! isRebind { < nl > - / / < nl > - / / Uncommenting this produces small lags < nl > - / / < nl > < nl > - / / titleView . textLayout = nil < nl > - / / messageView . textLayout = nil < nl > - / / dateView . textLayout = nil < nl > + counterView . alpha = 0 < nl > + counterViewBg . alpha = 0 < nl > < nl > - / / < nl > - / / Hiding Counter untill full layout is performed < nl > - / / < nl > - self . counterView . alpha = 0 < nl > - self . counterViewBg . alpha = 0 < nl > + titleView . alpha = 0 < nl > + messageView . alpha = 0 < nl > + dateView . alpha = 0 < nl > + < nl > + / / titleView . clearContentsBeforeAsynchronouslyDisplay = true < nl > + / / titleView . textLayout = nil < nl > + / / titleView . clearContentsBeforeAsynchronouslyDisplay = false < nl > + / / < nl > + / / messageView . clearContentsBeforeAsynchronouslyDisplay = true < nl > + / / messageView . textLayout = nil < nl > + / / messageView . clearContentsBeforeAsynchronouslyDisplay = false < nl > + / / < nl > + / / dateView . clearContentsBeforeAsynchronouslyDisplay = true < nl > + / / dateView . textLayout = nil < nl > + / / dateView . clearContentsBeforeAsynchronouslyDisplay = false < nl > } < nl > < nl > / / < nl > @ @ - 309 , 6 + 320 , 7 @ @ public class AADialogCell : AATableViewCell , AABindedCell { < nl > / / Title < nl > / / < nl > self . titleView . textLayout = render . titleLayout < nl > + self . titleView . alpha = 1 < nl > < nl > / / < nl > / / Date < nl > @ @ - 316 , 6 + 328 , 7 @ @ public class AADialogCell : AATableViewCell , AABindedCell { < nl > < nl > dateView . textLayout = render . dateLayout < nl > dateView . frame = CGRectMake ( contentView . width - render . dateLayout . textBoundingSize . width - 14 , 18 , render . dateLayout . textBoundingSize . width , 18 ) < nl > + dateView . alpha = 1 < nl > < nl > / / < nl > / / Message < nl > @ @ - 328 , 7 + 341 , 8 @ @ public class AADialogCell : AATableViewCell , AABindedCell { < nl > UIView . performWithoutAnimation { < nl > self . messageView . frame = messageViewFrame < nl > } < nl > - self . messageView . textLayout = render . messageLayout < nl > + messageView . textLayout = render . messageLayout < nl > + messageView . alpha = 1 < nl > < nl > / / < nl > / / Counter < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java < nl > index 897eb6b . . b6d1eab 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java < nl > @ @ - 228 , 6 + 228 , 13 @ @ public class DownloadManager extends ModuleActor { < nl > if ( LOG ) { < nl > Log . d ( TAG , " Starting download # " + fileReference . getFileId ( ) ) ; < nl > } < nl > + < nl > + Downloaded downloaded1 = downloaded . getValue ( fileReference . getFileId ( ) ) ; < nl > + if ( downloaded1 ! = null ) { < nl > + / / Already downloaded < nl > + return ; < nl > + } < nl > + < nl > QueueItem queueItem = findItem ( fileReference . getFileId ( ) ) ; < nl > if ( queueItem = = null ) { < nl > if ( LOG ) {
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentController . swift < nl > index 85bd03f . . 40c87ec 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentController . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentController . swift 	 < nl > @ @ - 23 , 7 + 23 , 11 @ @ public class AADialogsListContentController : AAContentTableController , UISearchB < nl > < nl > public override func tableDidLoad ( ) { < nl > < nl > + managedTable . canEditAll = true < nl > + managedTable . canDeleteAll = true < nl > + managedTable . fixedHeight = 76 < nl > tableView . estimatedRowHeight = 76 < nl > + tableView . rowHeight = 76 < nl > < nl > if enableSearch { < nl > search ( AADialogSearchCell . self ) { ( s ) - > ( ) in < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift < nl > index eef09c7 . . ccf30bf 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 	 < nl > @ @ - 20 , 14 + 20 , 19 @ @ public class AADialogCell : AATableViewCell , AABindedCell { < nl > < nl > / / Views < nl > < nl > + private static let counterBgImage = Imaging . imageWithColor ( ActorSDK . sharedActor ( ) . style . dialogCounterBgColor , size : CGSizeMake ( 18 , 18 ) ) < nl > + . roundImage ( 18 ) . resizableImageWithCapInsets ( UIEdgeInsetsMake ( 9 , 9 , 9 , 9 ) ) < nl > + < nl > public let avatarView = AAAvatarView ( frameSize : 48 ) < nl > public let titleView = YYLabel ( ) < nl > public let messageView = YYLabel ( ) < nl > - public let dateView = UILabel ( ) < nl > + public let dateView = YYLabel ( ) < nl > public let statusView = UIImageView ( ) < nl > public let counterView = UILabel ( ) < nl > public let counterViewBg = UIImageView ( ) < nl > < nl > + private var bindedPeer : ACPeer ? < nl > + < nl > public override init ( style : UITableViewCellStyle , reuseIdentifier : String ? ) { < nl > super . init ( style : style , reuseIdentifier : reuseIdentifier ) < nl > < nl > @ @ - 35 , 20 + 40 , 24 @ @ public class AADialogCell : AATableViewCell , AABindedCell { < nl > titleView . textColor = appStyle . dialogTitleColor < nl > titleView . displaysAsynchronously = true < nl > titleView . clearContentsBeforeAsynchronouslyDisplay = false < nl > + titleView . fadeOnAsynchronouslyDisplay = true < nl > < nl > messageView . font = UIFont . systemFontOfSize ( 16 ) < nl > messageView . textColor = appStyle . dialogTextColor < nl > messageView . displaysAsynchronously = true < nl > messageView . clearContentsBeforeAsynchronouslyDisplay = false < nl > + messageView . fadeOnAsynchronouslyDisplay = true < nl > < nl > dateView . font = UIFont . systemFontOfSize ( 14 ) < nl > dateView . textColor = appStyle . dialogDateColor < nl > dateView . textAlignment = . Right < nl > + dateView . displaysAsynchronously = true < nl > + dateView . clearContentsBeforeAsynchronouslyDisplay = false < nl > + dateView . fadeOnAsynchronouslyDisplay = false < nl > < nl > statusView . contentMode = . Center < nl > < nl > - counterViewBg . image = Imaging . imageWithColor ( appStyle . dialogCounterBgColor , size : CGSizeMake ( 18 , 18 ) ) < nl > - . roundImage ( 18 ) . resizableImageWithCapInsets ( UIEdgeInsetsMake ( 9 , 9 , 9 , 9 ) ) < nl > + counterViewBg . image = AADialogCell . counterBgImage < nl > < nl > counterView . font = UIFont . systemFontOfSize ( 14 ) < nl > counterView . textColor = appStyle . dialogCounterColor < nl > @ @ - 69 , 60 + 78 , 129 @ @ public class AADialogCell : AATableViewCell , AABindedCell { < nl > < nl > public func bind ( item : ACDialog , table : AAManagedTable , index : Int , totalCount : Int ) { < nl > < nl > - self . avatarView . bind ( item . dialogTitle , id : item . peer . peerId , avatar : item . dialogAvatar ) < nl > < nl > - self . titleView . text = item . dialogTitle < nl > + / / < nl > + / / Checking dialog rebinding < nl > + / / < nl > + var isCleanBind : Bool = false < nl > + if bindedPeer ! = nil { < nl > + if bindedPeer ! . isEqual ( item . peer ) . boolValue { < nl > + isCleanBind = true < nl > + } < nl > + } < nl > + bindedPeer = item . peer < nl > + < nl > + < nl > + / / < nl > + / / Avatar View < nl > + / / < nl > + avatarView . bind ( item . dialogTitle , id : item . peer . peerId , avatar : item . dialogAvatar ) < nl > + < nl > + < nl > + / / < nl > + / / Title View < nl > + / / < nl > + titleView . displaysAsynchronously = true < nl > + titleView . fadeOnAsynchronouslyDisplay = true < nl > + titleView . clearContentsBeforeAsynchronouslyDisplay = ! isCleanBind < nl > + titleView . text = item . dialogTitle < nl > + < nl > < nl > - self . messageView . text = Actor . getFormatter ( ) . formatDialogText ( item ) < nl > + / / < nl > + / / Message Content < nl > + / / < nl > + messageView . displaysAsynchronously = true < nl > + messageView . fadeOnAsynchronouslyDisplay = true < nl > + messageView . clearContentsBeforeAsynchronouslyDisplay = ! isCleanBind < nl > + messageView . text = Actor . getFormatter ( ) . formatDialogText ( item ) < nl > if item . messageType . ordinal ( ) ! = ACContentType . TEXT ( ) . ordinal ( ) { < nl > - self . messageView . textColor = appStyle . dialogTextActiveColor < nl > + messageView . textColor = appStyle . dialogTextActiveColor < nl > } else { < nl > - self . messageView . textColor = appStyle . dialogTextColor < nl > + messageView . textColor = appStyle . dialogTextColor < nl > } < nl > < nl > + < nl > + / / < nl > + / / Date < nl > + / / < nl > if ( item . date > 0 ) { < nl > - self . dateView . text = Actor . getFormatter ( ) . formatShortDate ( item . date ) < nl > - self . dateView . hidden = false < nl > + dateView . text = Actor . getFormatter ( ) . formatShortDate ( item . date ) < nl > + if dateView . hidden { < nl > + setNeedsLayout ( ) < nl > + } < nl > + dateView . hidden = false < nl > } else { < nl > - self . dateView . hidden = true < nl > + if ! dateView . hidden { < nl > + setNeedsLayout ( ) < nl > + } < nl > + dateView . hidden = true < nl > } < nl > < nl > + < nl > + / / < nl > + / / Counter View < nl > + / / < nl > if ( item . unreadCount ! = 0 ) { < nl > self . counterView . text = " \ ( item . unreadCount ) " < nl > + if counterView . hidden { < nl > + setNeedsLayout ( ) < nl > + } < nl > self . counterView . hidden = false < nl > self . counterViewBg . hidden = false < nl > } else { < nl > + if ! counterView . hidden { < nl > + setNeedsLayout ( ) < nl > + } < nl > self . counterView . hidden = true < nl > self . counterViewBg . hidden = true < nl > } < nl > < nl > - let messageState = item . status . ordinal ( ) < nl > < nl > + / / < nl > + / / Message State < nl > + / / < nl > + let messageState = item . status . ordinal ( ) < nl > if ( messageState = = ACMessageState . PENDING ( ) . ordinal ( ) ) { < nl > self . statusView . tintColor = appStyle . dialogStatusSending < nl > self . statusView . image = appStyle . chatIconClock < nl > + if self . statusView . hidden { < nl > + setNeedsLayout ( ) < nl > + } < nl > self . statusView . hidden = false < nl > } else if ( messageState = = ACMessageState . READ ( ) . ordinal ( ) ) { < nl > self . statusView . tintColor = appStyle . dialogStatusRead < nl > self . statusView . image = appStyle . chatIconCheck2 < nl > + if self . statusView . hidden { < nl > + setNeedsLayout ( ) < nl > + } < nl > self . statusView . hidden = false < nl > } else if ( messageState = = ACMessageState . RECEIVED ( ) . ordinal ( ) ) { < nl > self . statusView . tintColor = appStyle . dialogStatusReceived < nl > self . statusView . image = appStyle . chatIconCheck2 < nl > + if self . statusView . hidden { < nl > + setNeedsLayout ( ) < nl > + } < nl > self . statusView . hidden = false < nl > } else if ( messageState = = ACMessageState . SENT ( ) . ordinal ( ) ) { < nl > self . statusView . tintColor = appStyle . dialogStatusSent < nl > self . statusView . image = appStyle . chatIconCheck1 < nl > + if self . statusView . hidden { < nl > + setNeedsLayout ( ) < nl > + } < nl > self . statusView . hidden = false < nl > } else if ( messageState = = ACMessageState . ERROR ( ) . ordinal ( ) ) { < nl > self . statusView . tintColor = appStyle . dialogStatusError < nl > self . statusView . image = appStyle . chatIconError < nl > + if self . statusView . hidden { < nl > + setNeedsLayout ( ) < nl > + } < nl > self . statusView . hidden = false < nl > } else { < nl > + if ! self . statusView . hidden { < nl > + setNeedsLayout ( ) < nl > + } < nl > self . statusView . hidden = true < nl > } < nl > - < nl > - setNeedsLayout ( ) < nl > } < nl > < nl > public override func prepareForReuse ( ) { < nl > @ @ - 141 , 8 + 219 , 14 @ @ public class AADialogCell : AATableViewCell , AABindedCell { < nl > < nl > avatarView . frame = CGRectMake ( padding , padding , 48 , 48 ) < nl > < nl > - UIView . performWithoutAnimation { < nl > - self . titleView . frame = CGRectMake ( leftPadding , 16 , width - leftPadding - / * paddingRight * / ( padding + 50 ) , 21 ) < nl > + let titleFrame = CGRectMake ( leftPadding , 16 , width - leftPadding - / * paddingRight * / ( padding + 50 ) , 21 ) < nl > + if titleView . frame ! = titleFrame { < nl > + / / Instantly update view on cell resize < nl > + titleView . displaysAsynchronously = false < nl > + titleView . fadeOnAsynchronouslyDisplay = false < nl > + UIView . performWithoutAnimation { < nl > + self . titleView . frame = titleFrame < nl > + } < nl > } < nl > < nl > var messagePadding : CGFloat = 0 < nl > @ @ - 160 , 9 + 244 , 15 @ @ public class AADialogCell : AATableViewCell , AABindedCell { < nl > counterViewBg . frame = counterView . frame < nl > unreadPadding = unreadW < nl > } < nl > - < nl > - UIView . performWithoutAnimation { < nl > - self . messageView . frame = CGRectMake ( leftPadding + messagePadding , 44 , width - leftPadding - / * paddingRight * / padding - messagePadding - unreadPadding , 18 ) < nl > + < nl > + let messageViewFrame = CGRectMake ( leftPadding + messagePadding , 44 , width - leftPadding - / * paddingRight * / padding - messagePadding - unreadPadding , 18 ) < nl > + if messageView . frame ! = messageViewFrame { < nl > + / / Instantly update view on cell resize < nl > + messageView . displaysAsynchronously = false < nl > + messageView . fadeOnAsynchronouslyDisplay = false < nl > + UIView . performWithoutAnimation { < nl > + self . messageView . frame = messageViewFrame < nl > + } < nl > } < nl > < nl > dateView . frame = CGRectMake ( width - / * width * / 60 - / * paddingRight * / padding , 18 , 60 , 18 ) < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogListProcessor . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogListProcessor . swift < nl > index 21b73df . . 4962685 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogListProcessor . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogListProcessor . swift 	 < nl > @ @ - 15 , 6 + 15 , 9 @ @ class AADialogListProcessor : NSObject , ARListProcessor { < nl > if d . senderId ! = 0 { < nl > uids . insert ( d . senderId ) < nl > } < nl > + if d . relatedUid ! = 0 { < nl > + uids . insert ( d . relatedUid ) < nl > + } < nl > } < nl > < nl > for i in uids { < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAContentTableController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAContentTableController . swift < nl > index 029d95a . . 4f245fe 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAContentTableController . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAContentTableController . swift 	 < nl > @ @ - 61 , 6 + 61 , 10 @ @ public class AAContentTableController : AAManagedTableController , AAManagedTableC < nl > } < nl > < nl > / / Implement it in subclass < nl > + < nl > + public func tableWillLoad ( ) { < nl > + < nl > + } < nl > < nl > public func tableDidLoad ( ) { < nl > < nl > @ @ - 92 , 4 + 96 , 8 @ @ public class AAContentTableController : AAManagedTableController , AAManagedTableC < nl > public func managedTableUnbind ( controller : AAManagedTableController , table : AAManagedTable , binder : AABinder ) { < nl > tableWillUnbind ( binder ) < nl > } < nl > + < nl > + public func managedTableWillLoad ( controller : AAManagedTableController ) { < nl > + tableWillLoad ( ) < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift < nl > index 018280a . . eaed3dc 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift 	 < nl > @ @ - 31 , 6 + 31 , 18 @ @ public class AAManagedTable { < nl > < nl > public var sections : [ AAManagedSection ] = [ AAManagedSection ] ( ) < nl > < nl > + / / Fixed Height < nl > + < nl > + public var fixedHeight : CGFloat ? < nl > + < nl > + / / Can Edit All rows < nl > + < nl > + public var canEditAll : Bool ? < nl > + < nl > + / / Can Delete All rows < nl > + < nl > + public var canDeleteAll : Bool ? < nl > + < nl > / / Is Table in editing mode < nl > < nl > public var isEditing : Bool { < nl > @ @ - 316 , 10 + 328 , 16 @ @ private class AMBaseTableDelegate : NSObject , UITableViewDelegate , UITableViewDat < nl > } < nl > < nl > @ objc func tableView ( tableView : UITableView , heightForRowAtIndexPath indexPath : NSIndexPath ) - > CGFloat { < nl > + if data . fixedHeight ! = nil { < nl > + return data . fixedHeight ! < nl > + } < nl > return data . sections [ indexPath . section ] . cellHeightForItem ( data , indexPath : indexPath ) < nl > } < nl > < nl > @ objc func tableView ( tableView : UITableView , canEditRowAtIndexPath indexPath : NSIndexPath ) - > Bool { < nl > + if data . canEditAll ! = nil { < nl > + return data . canEditAll ! < nl > + } < nl > return ( data . sections [ indexPath . section ] . numberOfItems ( data ) > 0 ? data . sections [ indexPath . section ] . canDelete ( data , indexPath : indexPath ) : false ) < nl > } < nl > < nl > @ @ - 328 , 6 + 346 , 15 @ @ private class AMBaseTableDelegate : NSObject , UITableViewDelegate , UITableViewDat < nl > } < nl > < nl > @ objc func tableView ( tableView : UITableView , editingStyleForRowAtIndexPath indexPath : NSIndexPath ) - > UITableViewCellEditingStyle { < nl > + < nl > + if data . canDeleteAll ! = nil { < nl > + if data . canDeleteAll ! { < nl > + return . Delete < nl > + } else { < nl > + return . None < nl > + } < nl > + } < nl > + < nl > return data . sections [ indexPath . section ] . canDelete ( data , indexPath : indexPath ) ? . Delete : . None < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTableController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTableController . swift < nl > index 892a4f0 . . 685b21b 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTableController . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTableController . swift 	 < nl > @ @ - 56 , 6 + 56 , 11 @ @ public class AAManagedTableController : AAViewController { < nl > tableView . backgroundColor = style = = . Plain ? appStyle . vcBgColor : appStyle . vcBackyardColor < nl > view . backgroundColor = tableView . backgroundColor < nl > < nl > + / / Useful for making table view with fixed row height < nl > + if let d = managedTableDelegate { < nl > + d . managedTableWillLoad ( self ) < nl > + } < nl > + < nl > managedTable = AAManagedTable ( style : style , tableView : tableView , controller : self ) < nl > view . addSubview ( tableView ) < nl > < nl > @ @ - 144 , 6 + 149 , 7 @ @ public class AAManagedTableController : AAViewController { < nl > } < nl > < nl > public protocol AAManagedTableControllerDelegate { < nl > + func managedTableWillLoad ( controller : AAManagedTableController ) < nl > func managedTableLoad ( controller : AAManagedTableController , table : AAManagedTable ) < nl > func managedTableBind ( controller : AAManagedTableController , table : AAManagedTable , binder : AABinder ) < nl > func managedTableUnbind ( controller : AAManagedTableController , table : AAManagedTable , binder : AABinder ) < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedBindedCells . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedBindedCells . swift < nl > index 3b11bee . . f1e99e4 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedBindedCells . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedBindedCells . swift 	 < nl > @ @ - 43 , 10 + 43 , 12 @ @ public class AABindedRows < BindCell where BindCell : UITableViewCell , BindCell : AA < nl > < nl > private var lastItemsCount : Int = 0 < nl > < nl > + private let cellReuseId = " Bind : \ ( BindCell . self ) " < nl > + < nl > / / Total items count < nl > < nl > public func rangeNumberOfItems ( table : AAManagedTable ) - > Int { < nl > - return Int ( displayList . size ( ) ) < nl > + return lastItemsCount < nl > } < nl > < nl > / / Cells < nl > @ @ - 58 , 8 + 60 , 8 @ @ public class AABindedRows < BindCell where BindCell : UITableViewCell , BindCell : AA < nl > < nl > public func rangeCellForItem ( table : AAManagedTable , indexPath : AARangeIndexPath ) - > UITableViewCell { < nl > let data = displayList . itemWithIndex ( jint ( indexPath . item ) ) as ! BindCell . BindData < nl > - let cell = table . dequeueCell ( indexPath . indexPath ) as BindCell < nl > - cell . bind ( data , table : table , index : indexPath . item , totalCount : rangeNumberOfItems ( table ) ) < nl > + let cell = self . table . tableView . dequeueReusableCellWithIdentifier ( cellReuseId ) as ! BindCell < nl > + cell . bind ( data , table : table , index : indexPath . item , totalCount : lastItemsCount ) < nl > displayList . touchWithIndex ( jint ( indexPath . item ) ) < nl > didBind ? ( cell , data ) < nl > return cell < nl > @ @ - 95 , 6 + 97 , 7 @ @ public class AABindedRows < BindCell where BindCell : UITableViewCell , BindCell : AA < nl > public func rangeBind ( table : AAManagedTable , binder : AABinder ) { < nl > < nl > self . table = table < nl > + self . table . tableView . registerClass ( BindCell . self , forCellReuseIdentifier : cellReuseId ) < nl > < nl > if animated { < nl > displayList . addAppleListener ( self ) < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AATableViewCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AATableViewCell . swift < nl > index 844a767 . . 27972b3 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AATableViewCell . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AATableViewCell . swift < nl > @ @ - 6 , 6 + 6 , 8 @ @ import Foundation < nl > < nl > public class AATableViewCell : UITableViewCell { < nl > < nl > + private static let separatorColor = ActorSDK . sharedActor ( ) . style . vcSeparatorColor < nl > + < nl > private var topSeparator : UIView = UIView ( ) < nl > private var bottomSeparator : UIView = UIView ( ) < nl > < nl > @ @ - 18 , 8 + 20 , 8 @ @ public class AATableViewCell : UITableViewCell { < nl > public override init ( style : UITableViewCellStyle , reuseIdentifier : String ? ) { < nl > super . init ( style : style , reuseIdentifier : reuseIdentifier ) < nl > < nl > - bottomSeparator . backgroundColor = appStyle . vcSeparatorColor < nl > - topSeparator . backgroundColor = appStyle . vcSeparatorColor < nl > + bottomSeparator . backgroundColor = AATableViewCell . separatorColor < nl > + topSeparator . backgroundColor = AATableViewCell . separatorColor < nl > < nl > backgroundColor = appStyle . cellBgColor < nl > < nl > @ @ - 96 , 8 + 98 , 12 @ @ public class AATableViewCell : UITableViewCell { < nl > super . setHighlighted ( highlighted , animated : animated ) < nl > < nl > if ! highlighted { < nl > - topSeparator . backgroundColor = appStyle . vcSeparatorColor < nl > - bottomSeparator . backgroundColor = appStyle . vcSeparatorColor < nl > + if topSeparator . backgroundColor ! = AATableViewCell . separatorColor { < nl > + topSeparator . backgroundColor = AATableViewCell . separatorColor < nl > + } < nl > + if bottomSeparator . backgroundColor ! = AATableViewCell . separatorColor { < nl > + bottomSeparator . backgroundColor = AATableViewCell . separatorColor < nl > + } < nl > } < nl > } < nl > < nl > @ @ - 105 , 8 + 111 , 12 @ @ public class AATableViewCell : UITableViewCell { < nl > super . setSelected ( selected , animated : animated ) < nl > < nl > if ! selected { < nl > - topSeparator . backgroundColor = appStyle . vcSeparatorColor < nl > - bottomSeparator . backgroundColor = appStyle . vcSeparatorColor < nl > + if topSeparator . backgroundColor ! = AATableViewCell . separatorColor { < nl > + topSeparator . backgroundColor = AATableViewCell . separatorColor < nl > + } < nl > + if bottomSeparator . backgroundColor ! = AATableViewCell . separatorColor { < nl > + bottomSeparator . backgroundColor = AATableViewCell . separatorColor < nl > + } < nl > } < nl > } < nl > } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 
 index dd0946f . . 99c380f 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 	 
 @ @ - 59 , 23 + 59 , 23 @ @ public class AADialogCell : AATableViewCell , AABindedCell { 
 
 titleView . displaysAsynchronously = true 
 titleView . ignoreCommonProperties = true 
 - titleView . fadeOnAsynchronouslyDisplay = false 
 - titleView . clearContentsBeforeAsynchronouslyDisplay = false 
 + / / titleView . fadeOnAsynchronouslyDisplay = true 
 + titleView . clearContentsBeforeAsynchronouslyDisplay = true 
 
 messageView . displaysAsynchronously = true 
 messageView . ignoreCommonProperties = true 
 - messageView . fadeOnAsynchronouslyDisplay = false 
 - messageView . clearContentsBeforeAsynchronouslyDisplay = false 
 + / / messageView . fadeOnAsynchronouslyDisplay = true 
 + messageView . clearContentsBeforeAsynchronouslyDisplay = true 
 
 dateView . displaysAsynchronously = true 
 dateView . ignoreCommonProperties = true 
 - dateView . fadeOnAsynchronouslyDisplay = false 
 - dateView . clearContentsBeforeAsynchronouslyDisplay = false 
 + / / dateView . fadeOnAsynchronouslyDisplay = true 
 + dateView . clearContentsBeforeAsynchronouslyDisplay = true 
 
 counterView . displaysAsynchronously = true 
 counterView . ignoreCommonProperties = true 
 - counterView . fadeOnAsynchronouslyDisplay = false 
 - counterView . clearContentsBeforeAsynchronouslyDisplay = false 
 + / / counterView . fadeOnAsynchronouslyDisplay = true 
 + counterView . clearContentsBeforeAsynchronouslyDisplay = true 
 
 counterViewBg . image = AADialogCell . counterBgImage 
 
 @ @ - 100 , 6 + 100 , 11 @ @ public class AADialogCell : AATableViewCell , AABindedCell { 
 / / Checking dialog rebinding 
 / / 
 
 + / / Nothing changed 
 + if bindedItem = = item { 
 + return 
 + } 
 + 
 var isRebind : Bool = false 
 if let b = bindedItem { 
 if b . peer . isEqual ( item . peer ) . boolValue { 
 @ @ - 126 , 19 + 131 , 25 @ @ public class AADialogCell : AATableViewCell , AABindedCell { 
 
 / / Reseting Text Layout on new peer binding 
 if ! isRebind { 
 - / / 
 - / / Uncommenting this produces small lags 
 - / / 
 
 - / / titleView . textLayout = nil 
 - / / messageView . textLayout = nil 
 - / / dateView . textLayout = nil 
 + counterView . alpha = 0 
 + counterViewBg . alpha = 0 
 
 - / / 
 - / / Hiding Counter untill full layout is performed 
 - / / 
 - self . counterView . alpha = 0 
 - self . counterViewBg . alpha = 0 
 + titleView . alpha = 0 
 + messageView . alpha = 0 
 + dateView . alpha = 0 
 + 
 + / / titleView . clearContentsBeforeAsynchronouslyDisplay = true 
 + / / titleView . textLayout = nil 
 + / / titleView . clearContentsBeforeAsynchronouslyDisplay = false 
 + / / 
 + / / messageView . clearContentsBeforeAsynchronouslyDisplay = true 
 + / / messageView . textLayout = nil 
 + / / messageView . clearContentsBeforeAsynchronouslyDisplay = false 
 + / / 
 + / / dateView . clearContentsBeforeAsynchronouslyDisplay = true 
 + / / dateView . textLayout = nil 
 + / / dateView . clearContentsBeforeAsynchronouslyDisplay = false 
 } 
 
 / / 
 @ @ - 309 , 6 + 320 , 7 @ @ public class AADialogCell : AATableViewCell , AABindedCell { 
 / / Title 
 / / 
 self . titleView . textLayout = render . titleLayout 
 + self . titleView . alpha = 1 
 
 / / 
 / / Date 
 @ @ - 316 , 6 + 328 , 7 @ @ public class AADialogCell : AATableViewCell , AABindedCell { 
 
 dateView . textLayout = render . dateLayout 
 dateView . frame = CGRectMake ( contentView . width - render . dateLayout . textBoundingSize . width - 14 , 18 , render . dateLayout . textBoundingSize . width , 18 ) 
 + dateView . alpha = 1 
 
 / / 
 / / Message 
 @ @ - 328 , 7 + 341 , 8 @ @ public class AADialogCell : AATableViewCell , AABindedCell { 
 UIView . performWithoutAnimation { 
 self . messageView . frame = messageViewFrame 
 } 
 - self . messageView . textLayout = render . messageLayout 
 + messageView . textLayout = render . messageLayout 
 + messageView . alpha = 1 
 
 / / 
 / / Counter 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java 
 index 897eb6b . . b6d1eab 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java 
 @ @ - 228 , 6 + 228 , 13 @ @ public class DownloadManager extends ModuleActor { 
 if ( LOG ) { 
 Log . d ( TAG , " Starting download # " + fileReference . getFileId ( ) ) ; 
 } 
 + 
 + Downloaded downloaded1 = downloaded . getValue ( fileReference . getFileId ( ) ) ; 
 + if ( downloaded1 ! = null ) { 
 + / / Already downloaded 
 + return ; 
 + } 
 + 
 QueueItem queueItem = findItem ( fileReference . getFileId ( ) ) ; 
 if ( queueItem = = null ) { 
 if ( LOG ) {

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentController . swift 
 index 85bd03f . . 40c87ec 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentController . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentController . swift 	 
 @ @ - 23 , 7 + 23 , 11 @ @ public class AADialogsListContentController : AAContentTableController , UISearchB 
 
 public override func tableDidLoad ( ) { 
 
 + managedTable . canEditAll = true 
 + managedTable . canDeleteAll = true 
 + managedTable . fixedHeight = 76 
 tableView . estimatedRowHeight = 76 
 + tableView . rowHeight = 76 
 
 if enableSearch { 
 search ( AADialogSearchCell . self ) { ( s ) - > ( ) in 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 
 index eef09c7 . . ccf30bf 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 	 
 @ @ - 20 , 14 + 20 , 19 @ @ public class AADialogCell : AATableViewCell , AABindedCell { 
 
 / / Views 
 
 + private static let counterBgImage = Imaging . imageWithColor ( ActorSDK . sharedActor ( ) . style . dialogCounterBgColor , size : CGSizeMake ( 18 , 18 ) ) 
 + . roundImage ( 18 ) . resizableImageWithCapInsets ( UIEdgeInsetsMake ( 9 , 9 , 9 , 9 ) ) 
 + 
 public let avatarView = AAAvatarView ( frameSize : 48 ) 
 public let titleView = YYLabel ( ) 
 public let messageView = YYLabel ( ) 
 - public let dateView = UILabel ( ) 
 + public let dateView = YYLabel ( ) 
 public let statusView = UIImageView ( ) 
 public let counterView = UILabel ( ) 
 public let counterViewBg = UIImageView ( ) 
 
 + private var bindedPeer : ACPeer ? 
 + 
 public override init ( style : UITableViewCellStyle , reuseIdentifier : String ? ) { 
 super . init ( style : style , reuseIdentifier : reuseIdentifier ) 
 
 @ @ - 35 , 20 + 40 , 24 @ @ public class AADialogCell : AATableViewCell , AABindedCell { 
 titleView . textColor = appStyle . dialogTitleColor 
 titleView . displaysAsynchronously = true 
 titleView . clearContentsBeforeAsynchronouslyDisplay = false 
 + titleView . fadeOnAsynchronouslyDisplay = true 
 
 messageView . font = UIFont . systemFontOfSize ( 16 ) 
 messageView . textColor = appStyle . dialogTextColor 
 messageView . displaysAsynchronously = true 
 messageView . clearContentsBeforeAsynchronouslyDisplay = false 
 + messageView . fadeOnAsynchronouslyDisplay = true 
 
 dateView . font = UIFont . systemFontOfSize ( 14 ) 
 dateView . textColor = appStyle . dialogDateColor 
 dateView . textAlignment = . Right 
 + dateView . displaysAsynchronously = true 
 + dateView . clearContentsBeforeAsynchronouslyDisplay = false 
 + dateView . fadeOnAsynchronouslyDisplay = false 
 
 statusView . contentMode = . Center 
 
 - counterViewBg . image = Imaging . imageWithColor ( appStyle . dialogCounterBgColor , size : CGSizeMake ( 18 , 18 ) ) 
 - . roundImage ( 18 ) . resizableImageWithCapInsets ( UIEdgeInsetsMake ( 9 , 9 , 9 , 9 ) ) 
 + counterViewBg . image = AADialogCell . counterBgImage 
 
 counterView . font = UIFont . systemFontOfSize ( 14 ) 
 counterView . textColor = appStyle . dialogCounterColor 
 @ @ - 69 , 60 + 78 , 129 @ @ public class AADialogCell : AATableViewCell , AABindedCell { 
 
 public func bind ( item : ACDialog , table : AAManagedTable , index : Int , totalCount : Int ) { 
 
 - self . avatarView . bind ( item . dialogTitle , id : item . peer . peerId , avatar : item . dialogAvatar ) 
 
 - self . titleView . text = item . dialogTitle 
 + / / 
 + / / Checking dialog rebinding 
 + / / 
 + var isCleanBind : Bool = false 
 + if bindedPeer ! = nil { 
 + if bindedPeer ! . isEqual ( item . peer ) . boolValue { 
 + isCleanBind = true 
 + } 
 + } 
 + bindedPeer = item . peer 
 + 
 + 
 + / / 
 + / / Avatar View 
 + / / 
 + avatarView . bind ( item . dialogTitle , id : item . peer . peerId , avatar : item . dialogAvatar ) 
 + 
 + 
 + / / 
 + / / Title View 
 + / / 
 + titleView . displaysAsynchronously = true 
 + titleView . fadeOnAsynchronouslyDisplay = true 
 + titleView . clearContentsBeforeAsynchronouslyDisplay = ! isCleanBind 
 + titleView . text = item . dialogTitle 
 + 
 
 - self . messageView . text = Actor . getFormatter ( ) . formatDialogText ( item ) 
 + / / 
 + / / Message Content 
 + / / 
 + messageView . displaysAsynchronously = true 
 + messageView . fadeOnAsynchronouslyDisplay = true 
 + messageView . clearContentsBeforeAsynchronouslyDisplay = ! isCleanBind 
 + messageView . text = Actor . getFormatter ( ) . formatDialogText ( item ) 
 if item . messageType . ordinal ( ) ! = ACContentType . TEXT ( ) . ordinal ( ) { 
 - self . messageView . textColor = appStyle . dialogTextActiveColor 
 + messageView . textColor = appStyle . dialogTextActiveColor 
 } else { 
 - self . messageView . textColor = appStyle . dialogTextColor 
 + messageView . textColor = appStyle . dialogTextColor 
 } 
 
 + 
 + / / 
 + / / Date 
 + / / 
 if ( item . date > 0 ) { 
 - self . dateView . text = Actor . getFormatter ( ) . formatShortDate ( item . date ) 
 - self . dateView . hidden = false 
 + dateView . text = Actor . getFormatter ( ) . formatShortDate ( item . date ) 
 + if dateView . hidden { 
 + setNeedsLayout ( ) 
 + } 
 + dateView . hidden = false 
 } else { 
 - self . dateView . hidden = true 
 + if ! dateView . hidden { 
 + setNeedsLayout ( ) 
 + } 
 + dateView . hidden = true 
 } 
 
 + 
 + / / 
 + / / Counter View 
 + / / 
 if ( item . unreadCount ! = 0 ) { 
 self . counterView . text = " \ ( item . unreadCount ) " 
 + if counterView . hidden { 
 + setNeedsLayout ( ) 
 + } 
 self . counterView . hidden = false 
 self . counterViewBg . hidden = false 
 } else { 
 + if ! counterView . hidden { 
 + setNeedsLayout ( ) 
 + } 
 self . counterView . hidden = true 
 self . counterViewBg . hidden = true 
 } 
 
 - let messageState = item . status . ordinal ( ) 
 
 + / / 
 + / / Message State 
 + / / 
 + let messageState = item . status . ordinal ( ) 
 if ( messageState = = ACMessageState . PENDING ( ) . ordinal ( ) ) { 
 self . statusView . tintColor = appStyle . dialogStatusSending 
 self . statusView . image = appStyle . chatIconClock 
 + if self . statusView . hidden { 
 + setNeedsLayout ( ) 
 + } 
 self . statusView . hidden = false 
 } else if ( messageState = = ACMessageState . READ ( ) . ordinal ( ) ) { 
 self . statusView . tintColor = appStyle . dialogStatusRead 
 self . statusView . image = appStyle . chatIconCheck2 
 + if self . statusView . hidden { 
 + setNeedsLayout ( ) 
 + } 
 self . statusView . hidden = false 
 } else if ( messageState = = ACMessageState . RECEIVED ( ) . ordinal ( ) ) { 
 self . statusView . tintColor = appStyle . dialogStatusReceived 
 self . statusView . image = appStyle . chatIconCheck2 
 + if self . statusView . hidden { 
 + setNeedsLayout ( ) 
 + } 
 self . statusView . hidden = false 
 } else if ( messageState = = ACMessageState . SENT ( ) . ordinal ( ) ) { 
 self . statusView . tintColor = appStyle . dialogStatusSent 
 self . statusView . image = appStyle . chatIconCheck1 
 + if self . statusView . hidden { 
 + setNeedsLayout ( ) 
 + } 
 self . statusView . hidden = false 
 } else if ( messageState = = ACMessageState . ERROR ( ) . ordinal ( ) ) { 
 self . statusView . tintColor = appStyle . dialogStatusError 
 self . statusView . image = appStyle . chatIconError 
 + if self . statusView . hidden { 
 + setNeedsLayout ( ) 
 + } 
 self . statusView . hidden = false 
 } else { 
 + if ! self . statusView . hidden { 
 + setNeedsLayout ( ) 
 + } 
 self . statusView . hidden = true 
 } 
 - 
 - setNeedsLayout ( ) 
 } 
 
 public override func prepareForReuse ( ) { 
 @ @ - 141 , 8 + 219 , 14 @ @ public class AADialogCell : AATableViewCell , AABindedCell { 
 
 avatarView . frame = CGRectMake ( padding , padding , 48 , 48 ) 
 
 - UIView . performWithoutAnimation { 
 - self . titleView . frame = CGRectMake ( leftPadding , 16 , width - leftPadding - / * paddingRight * / ( padding + 50 ) , 21 ) 
 + let titleFrame = CGRectMake ( leftPadding , 16 , width - leftPadding - / * paddingRight * / ( padding + 50 ) , 21 ) 
 + if titleView . frame ! = titleFrame { 
 + / / Instantly update view on cell resize 
 + titleView . displaysAsynchronously = false 
 + titleView . fadeOnAsynchronouslyDisplay = false 
 + UIView . performWithoutAnimation { 
 + self . titleView . frame = titleFrame 
 + } 
 } 
 
 var messagePadding : CGFloat = 0 
 @ @ - 160 , 9 + 244 , 15 @ @ public class AADialogCell : AATableViewCell , AABindedCell { 
 counterViewBg . frame = counterView . frame 
 unreadPadding = unreadW 
 } 
 - 
 - UIView . performWithoutAnimation { 
 - self . messageView . frame = CGRectMake ( leftPadding + messagePadding , 44 , width - leftPadding - / * paddingRight * / padding - messagePadding - unreadPadding , 18 ) 
 + 
 + let messageViewFrame = CGRectMake ( leftPadding + messagePadding , 44 , width - leftPadding - / * paddingRight * / padding - messagePadding - unreadPadding , 18 ) 
 + if messageView . frame ! = messageViewFrame { 
 + / / Instantly update view on cell resize 
 + messageView . displaysAsynchronously = false 
 + messageView . fadeOnAsynchronouslyDisplay = false 
 + UIView . performWithoutAnimation { 
 + self . messageView . frame = messageViewFrame 
 + } 
 } 
 
 dateView . frame = CGRectMake ( width - / * width * / 60 - / * paddingRight * / padding , 18 , 60 , 18 ) 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogListProcessor . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogListProcessor . swift 
 index 21b73df . . 4962685 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogListProcessor . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogListProcessor . swift 	 
 @ @ - 15 , 6 + 15 , 9 @ @ class AADialogListProcessor : NSObject , ARListProcessor { 
 if d . senderId ! = 0 { 
 uids . insert ( d . senderId ) 
 } 
 + if d . relatedUid ! = 0 { 
 + uids . insert ( d . relatedUid ) 
 + } 
 } 
 
 for i in uids { 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAContentTableController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAContentTableController . swift 
 index 029d95a . . 4f245fe 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAContentTableController . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAContentTableController . swift 	 
 @ @ - 61 , 6 + 61 , 10 @ @ public class AAContentTableController : AAManagedTableController , AAManagedTableC 
 } 
 
 / / Implement it in subclass 
 + 
 + public func tableWillLoad ( ) { 
 + 
 + } 
 
 public func tableDidLoad ( ) { 
 
 @ @ - 92 , 4 + 96 , 8 @ @ public class AAContentTableController : AAManagedTableController , AAManagedTableC 
 public func managedTableUnbind ( controller : AAManagedTableController , table : AAManagedTable , binder : AABinder ) { 
 tableWillUnbind ( binder ) 
 } 
 + 
 + public func managedTableWillLoad ( controller : AAManagedTableController ) { 
 + tableWillLoad ( ) 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift 
 index 018280a . . eaed3dc 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift 	 
 @ @ - 31 , 6 + 31 , 18 @ @ public class AAManagedTable { 
 
 public var sections : [ AAManagedSection ] = [ AAManagedSection ] ( ) 
 
 + / / Fixed Height 
 + 
 + public var fixedHeight : CGFloat ? 
 + 
 + / / Can Edit All rows 
 + 
 + public var canEditAll : Bool ? 
 + 
 + / / Can Delete All rows 
 + 
 + public var canDeleteAll : Bool ? 
 + 
 / / Is Table in editing mode 
 
 public var isEditing : Bool { 
 @ @ - 316 , 10 + 328 , 16 @ @ private class AMBaseTableDelegate : NSObject , UITableViewDelegate , UITableViewDat 
 } 
 
 @ objc func tableView ( tableView : UITableView , heightForRowAtIndexPath indexPath : NSIndexPath ) - > CGFloat { 
 + if data . fixedHeight ! = nil { 
 + return data . fixedHeight ! 
 + } 
 return data . sections [ indexPath . section ] . cellHeightForItem ( data , indexPath : indexPath ) 
 } 
 
 @ objc func tableView ( tableView : UITableView , canEditRowAtIndexPath indexPath : NSIndexPath ) - > Bool { 
 + if data . canEditAll ! = nil { 
 + return data . canEditAll ! 
 + } 
 return ( data . sections [ indexPath . section ] . numberOfItems ( data ) > 0 ? data . sections [ indexPath . section ] . canDelete ( data , indexPath : indexPath ) : false ) 
 } 
 
 @ @ - 328 , 6 + 346 , 15 @ @ private class AMBaseTableDelegate : NSObject , UITableViewDelegate , UITableViewDat 
 } 
 
 @ objc func tableView ( tableView : UITableView , editingStyleForRowAtIndexPath indexPath : NSIndexPath ) - > UITableViewCellEditingStyle { 
 + 
 + if data . canDeleteAll ! = nil { 
 + if data . canDeleteAll ! { 
 + return . Delete 
 + } else { 
 + return . None 
 + } 
 + } 
 + 
 return data . sections [ indexPath . section ] . canDelete ( data , indexPath : indexPath ) ? . Delete : . None 
 } 
 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTableController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTableController . swift 
 index 892a4f0 . . 685b21b 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTableController . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTableController . swift 	 
 @ @ - 56 , 6 + 56 , 11 @ @ public class AAManagedTableController : AAViewController { 
 tableView . backgroundColor = style = = . Plain ? appStyle . vcBgColor : appStyle . vcBackyardColor 
 view . backgroundColor = tableView . backgroundColor 
 
 + / / Useful for making table view with fixed row height 
 + if let d = managedTableDelegate { 
 + d . managedTableWillLoad ( self ) 
 + } 
 + 
 managedTable = AAManagedTable ( style : style , tableView : tableView , controller : self ) 
 view . addSubview ( tableView ) 
 
 @ @ - 144 , 6 + 149 , 7 @ @ public class AAManagedTableController : AAViewController { 
 } 
 
 public protocol AAManagedTableControllerDelegate { 
 + func managedTableWillLoad ( controller : AAManagedTableController ) 
 func managedTableLoad ( controller : AAManagedTableController , table : AAManagedTable ) 
 func managedTableBind ( controller : AAManagedTableController , table : AAManagedTable , binder : AABinder ) 
 func managedTableUnbind ( controller : AAManagedTableController , table : AAManagedTable , binder : AABinder ) 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedBindedCells . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedBindedCells . swift 
 index 3b11bee . . f1e99e4 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedBindedCells . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedBindedCells . swift 	 
 @ @ - 43 , 10 + 43 , 12 @ @ public class AABindedRows < BindCell where BindCell : UITableViewCell , BindCell : AA 
 
 private var lastItemsCount : Int = 0 
 
 + private let cellReuseId = " Bind : \ ( BindCell . self ) " 
 + 
 / / Total items count 
 
 public func rangeNumberOfItems ( table : AAManagedTable ) - > Int { 
 - return Int ( displayList . size ( ) ) 
 + return lastItemsCount 
 } 
 
 / / Cells 
 @ @ - 58 , 8 + 60 , 8 @ @ public class AABindedRows < BindCell where BindCell : UITableViewCell , BindCell : AA 
 
 public func rangeCellForItem ( table : AAManagedTable , indexPath : AARangeIndexPath ) - > UITableViewCell { 
 let data = displayList . itemWithIndex ( jint ( indexPath . item ) ) as ! BindCell . BindData 
 - let cell = table . dequeueCell ( indexPath . indexPath ) as BindCell 
 - cell . bind ( data , table : table , index : indexPath . item , totalCount : rangeNumberOfItems ( table ) ) 
 + let cell = self . table . tableView . dequeueReusableCellWithIdentifier ( cellReuseId ) as ! BindCell 
 + cell . bind ( data , table : table , index : indexPath . item , totalCount : lastItemsCount ) 
 displayList . touchWithIndex ( jint ( indexPath . item ) ) 
 didBind ? ( cell , data ) 
 return cell 
 @ @ - 95 , 6 + 97 , 7 @ @ public class AABindedRows < BindCell where BindCell : UITableViewCell , BindCell : AA 
 public func rangeBind ( table : AAManagedTable , binder : AABinder ) { 
 
 self . table = table 
 + self . table . tableView . registerClass ( BindCell . self , forCellReuseIdentifier : cellReuseId ) 
 
 if animated { 
 displayList . addAppleListener ( self ) 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AATableViewCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AATableViewCell . swift 
 index 844a767 . . 27972b3 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AATableViewCell . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AATableViewCell . swift 
 @ @ - 6 , 6 + 6 , 8 @ @ import Foundation 
 
 public class AATableViewCell : UITableViewCell { 
 
 + private static let separatorColor = ActorSDK . sharedActor ( ) . style . vcSeparatorColor 
 + 
 private var topSeparator : UIView = UIView ( ) 
 private var bottomSeparator : UIView = UIView ( ) 
 
 @ @ - 18 , 8 + 20 , 8 @ @ public class AATableViewCell : UITableViewCell { 
 public override init ( style : UITableViewCellStyle , reuseIdentifier : String ? ) { 
 super . init ( style : style , reuseIdentifier : reuseIdentifier ) 
 
 - bottomSeparator . backgroundColor = appStyle . vcSeparatorColor 
 - topSeparator . backgroundColor = appStyle . vcSeparatorColor 
 + bottomSeparator . backgroundColor = AATableViewCell . separatorColor 
 + topSeparator . backgroundColor = AATableViewCell . separatorColor 
 
 backgroundColor = appStyle . cellBgColor 
 
 @ @ - 96 , 8 + 98 , 12 @ @ public class AATableViewCell : UITableViewCell { 
 super . setHighlighted ( highlighted , animated : animated ) 
 
 if ! highlighted { 
 - topSeparator . backgroundColor = appStyle . vcSeparatorColor 
 - bottomSeparator . backgroundColor = appStyle . vcSeparatorColor 
 + if topSeparator . backgroundColor ! = AATableViewCell . separatorColor { 
 + topSeparator . backgroundColor = AATableViewCell . separatorColor 
 + } 
 + if bottomSeparator . backgroundColor ! = AATableViewCell . separatorColor { 
 + bottomSeparator . backgroundColor = AATableViewCell . separatorColor 
 + } 
 } 
 } 
 
 @ @ - 105 , 8 + 111 , 12 @ @ public class AATableViewCell : UITableViewCell { 
 super . setSelected ( selected , animated : animated ) 
 
 if ! selected { 
 - topSeparator . backgroundColor = appStyle . vcSeparatorColor 
 - bottomSeparator . backgroundColor = appStyle . vcSeparatorColor 
 + if topSeparator . backgroundColor ! = AATableViewCell . separatorColor { 
 + topSeparator . backgroundColor = AATableViewCell . separatorColor 
 + } 
 + if bottomSeparator . backgroundColor ! = AATableViewCell . separatorColor { 
 + bottomSeparator . backgroundColor = AATableViewCell . separatorColor 
 + } 
 } 
 } 
 } 
 \ No newline at end of file
