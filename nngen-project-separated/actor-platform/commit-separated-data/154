BLEU SCORE: 0.24601372576927535

TEST MSG: feat ( iOS ) : Localized group type and administration controllers , respect new permissions
GENERATED MSG: feat ( iOS ) : Updated GroupInfo controller

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / group / MembersFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / group / MembersFragment . java < nl > index 2dc940d . . f2be836 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / group / MembersFragment . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / group / MembersFragment . java < nl > @ @ - 69 , 12 + 69 , 9 @ @ public class MembersFragment extends BaseFragment { < nl > addMmemberTV . setGravity ( Gravity . CENTER _ VERTICAL ) ; < nl > addMmemberTV . setText ( R . string . group _ add _ member ) ; < nl > addMmemberTV . setTextColor ( ActorSDK . sharedActor ( ) . style . getTextPrimaryColor ( ) ) ; < nl > - addMmemberTV . setOnClickListener ( new View . OnClickListener ( ) { < nl > - @ Override < nl > - public void onClick ( View view ) { < nl > - startActivity ( new Intent ( getActivity ( ) , AddMemberActivity . class ) < nl > - . putExtra ( Intents . EXTRA _ GROUP _ ID , groupId ) ) ; < nl > - } < nl > + addMmemberTV . setOnClickListener ( view - > { < nl > + startActivity ( new Intent ( getActivity ( ) , AddMemberActivity . class ) < nl > + . putExtra ( Intents . EXTRA _ GROUP _ ID , groupId ) ) ; < nl > } ) ; < nl > < nl > header . addView ( addMmemberTV , ViewGroup . LayoutParams . MATCH _ PARENT , Screen . dp ( 58 ) ) ; < nl > @ @ - 92 , 12 + 89 , 7 @ @ public class MembersFragment extends BaseFragment { < nl > shareLinkTV . setGravity ( Gravity . CENTER _ VERTICAL ) ; < nl > shareLinkTV . setTextColor ( ActorSDK . sharedActor ( ) . style . getTextPrimaryColor ( ) ) ; < nl > shareLinkTV . setText ( R . string . invite _ link _ action _ share ) ; < nl > - shareLinkTV . setOnClickListener ( new View . OnClickListener ( ) { < nl > - @ Override < nl > - public void onClick ( View view ) { < nl > - Intents . inviteLink ( groupId , getActivity ( ) ) ; < nl > - } < nl > - } ) ; < nl > + shareLinkTV . setOnClickListener ( view - > Intents . inviteLink ( groupId , getActivity ( ) ) ) ; < nl > < nl > header . addView ( shareLinkTV , ViewGroup . LayoutParams . MATCH _ PARENT , Screen . dp ( 58 ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > index 848b3e9 . . cfccc2d 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > @ @ - 300 , 6 + 300 , 65 @ @ < nl > < nl > " GroupTypeTitleChannel " = " Channel Type " ; < nl > < nl > + " GroupPermissionsHint " = " Control what is possible in this group " ; < nl > + < nl > + " GroupPermissionsHintChannel " = " Control what is possible in this channel " ; < nl > + < nl > + " GroupTypeHintPublic " = " Public groups can be found in search and anyone can join " ; < nl > + < nl > + " GroupTypeHintPrivate " = " Private groups can be joined only via personal invitation " ; < nl > + < nl > + " GroupTypeHintPublicChannel " = " Public channels can be found in search and anyone can join " ; < nl > + < nl > + " GroupTypeHintPrivateChannel " = " Private channels can be joined only via personal invitation " ; < nl > + < nl > + " GroupTypeLinkHint " = " People can share this link with others and find your group using search " ; < nl > + < nl > + " GroupTypeLinkHintChannel " = " People can share this link with others and find your channel using search " ; < nl > + < nl > + " GroupTypePublic " = " Public " ; < nl > + < nl > + " GroupTypePrivate " = " Private " ; < nl > + < nl > + " ChannelTypePublic " = " Public " ; < nl > + < nl > + " ChannelTypePrivate " = " Private " ; < nl > + < nl > + " GroupTypePublicFull " = " Public Group " ; < nl > + < nl > + " GroupTypePrivateFull " = " Private Group " ; < nl > + < nl > + " ChannelTypePublicFull " = " Public Channel " ; < nl > + < nl > + " ChannelTypePrivateFull " = " Private Channel " ; < nl > + < nl > + < nl > + " GroupShareTitle " = " Shared History " ; < nl > + < nl > + " GroupShareEnabled " = " Shared " ; < nl > + < nl > + " GroupShareHint " = " All members will see all messages " ; < nl > + < nl > + " GroupShareMessage " = " Are you sure want to share all messages to all members ? This action is irreversible . " ; < nl > + < nl > + " GroupShareAction " = " Share " ; < nl > + < nl > + < nl > + " GroupDeleteTitle " = " Delete Group " ; < nl > + < nl > + " GroupDeleteTitleChannel " = " Delete Channel " ; < nl > + < nl > + " GroupDeleteHint " = " You will lose all messages in this group " ; < nl > + < nl > + " GroupDeleteHintChannel " = " You will lose all messages in this channel " ; < nl > + < nl > + " GroupDeleteMessage " = " Are you sure want to DELETE group and ALL messages in it ? This action irreversible . " ; < nl > + < nl > + " GroupDeleteMessageChannel " = " Are you sure want to DELETE channel and ALL messages in it ? This action irreversible . " ; < nl > + < nl > + " GroupDeleteAction " = " Delete ALL " ; < nl > + < nl > + < nl > " GroupMemberAdmin " = " admin " ; < nl > < nl > " GroupMemberInfo " = " Profile " ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings < nl > index f255c96 . . b925b5c 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings < nl > @ @ - 293 , 10 + 293 , 74 @ @ < nl > < nl > " GroupAdministration " = " Administration " ; < nl > < nl > + < nl > + < nl > " GroupTypeTitle " = " Group Type " ; < nl > < nl > " GroupTypeTitleChannel " = " Channel Type " ; < nl > < nl > + " GroupTypePublic " = " Public " ; < nl > + < nl > + " GroupTypePrivate " = " Private " ; < nl > + < nl > + " ChannelTypePublic " = " Public " ; < nl > + < nl > + " ChannelTypePrivate " = " Private " ; < nl > + < nl > + " GroupTypePublicFull " = " Public Group " ; < nl > + < nl > + " GroupTypePrivateFull " = " Private Group " ; < nl > + < nl > + " ChannelTypePublicFull " = " Public Channel " ; < nl > + < nl > + " ChannelTypePrivateFull " = " Private Channel " ; < nl > + < nl > + " GroupPermissionsHint " = " Control what is possible in this group " ; < nl > + < nl > + " GroupPermissionsHintChannel " = " Control what is possible in this channel " ; < nl > + < nl > + " GroupTypeHintPublic " = " Public groups can be found in search and anyone can join " ; < nl > + < nl > + " GroupTypeHintPrivate " = " Private groups can be joined only via personal invitation " ; < nl > + < nl > + " GroupTypeHintPublicChannel " = " Public channels can be found in search and anyone can join " ; < nl > + < nl > + " GroupTypeHintPrivateChannel " = " Private channels can be joined only via personal invitation " ; < nl > + < nl > + " GroupTypeLinkHint " = " People can share this link with others and find your group using search " ; < nl > + < nl > + " GroupTypeLinkHintChannel " = " People can share this link with others and find your channel using search " ; < nl > + < nl > + < nl > + < nl > + " GroupShareTitle " = " Shared History " ; < nl > + < nl > + " GroupShareEnabled " = " Shared " ; < nl > + < nl > + " GroupShareHint " = " All members will see all messages " ; < nl > + < nl > + " GroupShareMessage " = " Are you sure want to share all messages to all members ? This action is irreversible . " ; < nl > + < nl > + " GroupShareAction " = " Share " ; < nl > + < nl > + < nl > + < nl > + " GroupDeleteTitle " = " Delete Group " ; < nl > + < nl > + " GroupDeleteTitleChannel " = " Delete Channel " ; < nl > + < nl > + " GroupDeleteHint " = " You will lose all messages in this group " ; < nl > + < nl > + " GroupDeleteHintChannel " = " You will lose all messages in this channel " ; < nl > + < nl > + " GroupDeleteMessage " = " Are you sure want to DELETE group and ALL messages in it ? This action irreversible . " ; < nl > + < nl > + " GroupDeleteMessageChannel " = " Are you sure want to DELETE channel and ALL messages in it ? This action irreversible . " ; < nl > + < nl > + " GroupDeleteAction " = " Delete ALL " ; < nl > + < nl > + < nl > + < nl > " GroupMemberAdmin " = " admin " ; < nl > < nl > " GroupMemberInfo " = " Perfil " ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings < nl > index 297a9db . . 6c455d9 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings < nl > @ @ - 286 , 6 + 286 , 65 @ @ < nl > < nl > " GroupTypeTitleChannel " = " Channel Type " ; < nl > < nl > + " GroupTypePublic " = " Public " ; < nl > + < nl > + " GroupTypePrivate " = " Private " ; < nl > + < nl > + " ChannelTypePublic " = " Public " ; < nl > + < nl > + " ChannelTypePrivate " = " Private " ; < nl > + < nl > + " GroupTypePublicFull " = " Public Group " ; < nl > + < nl > + " GroupTypePrivateFull " = " Private Group " ; < nl > + < nl > + " ChannelTypePublicFull " = " Public Channel " ; < nl > + < nl > + " ChannelTypePrivateFull " = " Private Channel " ; < nl > + < nl > + " GroupPermissionsHint " = " Control what is possible in this group " ; < nl > + < nl > + " GroupPermissionsHintChannel " = " Control what is possible in this channel " ; < nl > + < nl > + " GroupTypeHintPublic " = " Public groups can be found in search and anyone can join " ; < nl > + < nl > + " GroupTypeHintPrivate " = " Private groups can be joined only via personal invitation " ; < nl > + < nl > + " GroupTypeHintPublicChannel " = " Public channels can be found in search and anyone can join " ; < nl > + < nl > + " GroupTypeHintPrivateChannel " = " Private channels can be joined only via personal invitation " ; < nl > + < nl > + " GroupTypeLinkHint " = " People can share this link with others and find your group using search " ; < nl > + < nl > + " GroupTypeLinkHintChannel " = " People can share this link with others and find your channel using search " ; < nl > + < nl > + < nl > + " GroupShareTitle " = " Shared History " ; < nl > + < nl > + " GroupShareEnabled " = " Shared " ; < nl > + < nl > + " GroupShareHint " = " All members will see all messages " ; < nl > + < nl > + " GroupShareMessage " = " Are you sure want to share all messages to all members ? This action is irreversible . " ; < nl > + < nl > + " GroupShareAction " = " Share " ; < nl > + < nl > + < nl > + " GroupDeleteTitle " = " Delete Group " ; < nl > + < nl > + " GroupDeleteTitleChannel " = " Delete Channel " ; < nl > + < nl > + " GroupDeleteHint " = " You will lose all messages in this group " ; < nl > + < nl > + " GroupDeleteHintChannel " = " You will lose all messages in this channel " ; < nl > + < nl > + " GroupDeleteMessage " = " Are you sure want to DELETE group and ALL messages in it ? This action irreversible . " ; < nl > + < nl > + " GroupDeleteMessageChannel " = " Are you sure want to DELETE channel and ALL messages in it ? This action irreversible . " ; < nl > + < nl > + " GroupDeleteAction " = " Delete ALL " ; < nl > + < nl > + < nl > " GroupViewMembers " = " Membros " ; < nl > < nl > " GroupMemberAdmin " = " admin " ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings < nl > index 1036d7b . . 38492e2 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings < nl > @ @ - 280 , 6 + 280 , 7 @ @ < nl > < nl > " GroupEditConfirm " = " В ы у в е р е н ы , ч т о х о т и т е и з м е н и т ь т е м у г р у п п ы ? " ; < nl > < nl > + < nl > " GroupEditConfirmAction " = " И з м е н и т ь т е м у " ; < nl > < nl > " GroupNotifications " = " О п о в е щ е н и я " ; < nl > @ @ - 298 , 6 + 299 , 66 @ @ < nl > < nl > " GroupTypeTitleChannel " = " Т и п к а н а л а " ; < nl > < nl > + " GroupTypePublic " = " П у б л и ч н а я " ; < nl > + < nl > + " GroupTypePrivate " = " П р и в а т н а я " ; < nl > + < nl > + " ChannelTypePublic " = " П у б л и ч н ы й " ; < nl > + < nl > + " ChannelTypePrivate " = " П р и в а т н ы й " ; < nl > + < nl > + " GroupTypePublicFull " = " П у б л и ч н а я г р у п п а " ; < nl > + < nl > + " GroupTypePrivateFull " = " П р и в а т н а я г р у п п а " ; < nl > + < nl > + " ChannelTypePublicFull " = " П у б л и ч н ы й к а н а л " ; < nl > + < nl > + " ChannelTypePrivateFull " = " П р и в а т н ы й к а н а л " ; < nl > + < nl > + " GroupPermissionsHint " = " У п р а в л е н и е т е м ч т о в о з м о ж н о д е л а т ь в э т о й г р у п п е " ; < nl > + < nl > + " GroupPermissionsHintChannel " = " У п р а в л е н и е т е м ч т о в о з м о ж н о д е л а т ь в э т о м к а н а л е " ; < nl > + < nl > + " GroupTypeHintPublic " = " П у б л и ч н ы е г у р п п ы м о г у т б ы т ь н а й д е н ы в п о и с к е и к т о у г о д н о м о ж е т в о й т и в н е е " ; < nl > + < nl > + " GroupTypeHintPrivate " = " В с т у п и т ь в п р и в а т н у ю г р у п п у м о ж н о т о л ь к о п о л и ч н о м у п р и г л а ш е н и ю " ; < nl > + < nl > + " GroupTypeHintPublicChannel " = " П у б л и ч н ы е к а н а л ы м о г у т б ы т ь н а й д е н ы в п о и с к е и к т о у г о д н о м о ж е т п о д п и с а т ь с я н а н е г о " ; < nl > + < nl > + " GroupTypeHintPrivateChannel " = " В с т у п и т ь в п р и в а т н ы й к а н а л м о ж н о т о л ь к о п о л и ч н о м у п р и г л а ш е н и ю " ; < nl > + < nl > + " GroupTypeLinkHint " = " В а ш и д р у з ь я м о г у т д е л и т ь с я э т о й с с ы л к о й и л и н а х о д и т ь г р у п п у в п о и с к е " ; < nl > + < nl > + " GroupTypeLinkHintChannel " = " В а ш и д р у з ь я м о г у т д е л и т ь с я э т о й с с ы л к о й и л и н а х о д и т ь к а н а л в п о и с к е " ; < nl > + < nl > + < nl > + " GroupShareTitle " = " О б щ а я и с т о р и я " ; < nl > + < nl > + " GroupShareEnabled " = " В к л ю ч е н о " ; < nl > + < nl > + " GroupShareHint " = " В с е у ч а с т н и к и у в и д я т в с е с о о б щ е н и я г р у п п ы " ; < nl > + < nl > + " GroupShareMessage " = " В ы у в е р е н ы ч т о х о т и т е с д е л а т ь в с е с о о б щ е н и я м о б щ и м и ? Э т о д е й с т в и е н е о б р а т и м о . " ; < nl > + < nl > + " GroupShareAction " = " С д е л а т ь О б щ и м и " ; < nl > + < nl > + < nl > + " GroupDeleteTitle " = " У д а л и т ь г р у п п у " ; < nl > + < nl > + " GroupDeleteTitleChannel " = " У д а л и т ь к а н а л " ; < nl > + < nl > + " GroupDeleteHint " = " В ы п о т е р я е т е в с е с о о б щ е н и я в э т о й г р у п п е " ; < nl > + < nl > + " GroupDeleteHintChannel " = " В ы п о т е р я е т е в с е с о о б щ е н и я в э т о м к а н а л е " ; < nl > + < nl > + " GroupDeleteMessage " = " В ы у в е р е н ы ч т о х о т и т е У Д А Л И Т Ь г р у п п у и В С Е с о о б щ е н и я в н е й ? Э т о д е й с т в и е н е о б р а т и м о . " ; < nl > + < nl > + " GroupDeleteMessageChannel " = " В ы у в е р е н ы ч т о х о т и т е У Д А Л И Т Ь к а н а л и В С Е с о о б щ е н и я в н е м ? Э т о д е й с т в и е н е о б р а т и м о . " ; < nl > + < nl > + " GroupDeleteAction " = " У д а л и т ь В С Е " ; < nl > + < nl > + < nl > + < nl > " GroupViewMembers " = " У ч а с т н и к и " ; < nl > < nl > " GroupMemberAdmin " = " а д м и н . " ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings < nl > index 258aa99 . . 0390f81 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings < nl > @ @ - 286 , 6 + 286 , 61 @ @ < nl > < nl > " GroupTypeTitleChannel " = " Channel Type " ; < nl > < nl > + " ChannelTypePublic " = " Public " ; < nl > + < nl > + " ChannelTypePrivate " = " Private " ; < nl > + < nl > + " GroupTypePublicFull " = " Public Group " ; < nl > + < nl > + " GroupTypePrivateFull " = " Private Group " ; < nl > + < nl > + " ChannelTypePublicFull " = " Public Channel " ; < nl > + < nl > + " ChannelTypePrivateFull " = " Private Channel " ; < nl > + < nl > + " GroupPermissionsHint " = " Control what is possible in this group " ; < nl > + < nl > + " GroupPermissionsHintChannel " = " Control what is possible in this channel " ; < nl > + < nl > + " GroupTypeHintPublic " = " Public groups can be found in search and anyone can join " ; < nl > + < nl > + " GroupTypeHintPrivate " = " Private groups can be joined only via personal invitation " ; < nl > + < nl > + " GroupTypeHintPublicChannel " = " Public channels can be found in search and anyone can join " ; < nl > + < nl > + " GroupTypeHintPrivateChannel " = " Private channels can be joined only via personal invitation " ; < nl > + < nl > + " GroupTypeLinkHint " = " People can share this link with others and find your group using search " ; < nl > + < nl > + " GroupTypeLinkHintChannel " = " People can share this link with others and find your channel using search " ; < nl > + < nl > + < nl > + " GroupShareTitle " = " Shared History " ; < nl > + < nl > + " GroupShareEnabled " = " Shared " ; < nl > + < nl > + " GroupShareHint " = " All members will see all messages " ; < nl > + < nl > + " GroupShareMessage " = " Are you sure want to share all messages to all members ? This action is irreversible . " ; < nl > + < nl > + " GroupShareAction " = " Share " ; < nl > + < nl > + < nl > + " GroupDeleteTitle " = " Delete Group " ; < nl > + < nl > + " GroupDeleteTitleChannel " = " Delete Channel " ; < nl > + < nl > + " GroupDeleteHint " = " You will lose all messages in this group " ; < nl > + < nl > + " GroupDeleteHintChannel " = " You will lose all messages in this channel " ; < nl > + < nl > + " GroupDeleteMessage " = " Are you sure want to DELETE group and ALL messages in it ? This action irreversible . " ; < nl > + < nl > + " GroupDeleteMessageChannel " = " Are you sure want to DELETE channel and ALL messages in it ? This action irreversible . " ; < nl > + < nl > + " GroupDeleteAction " = " Delete ALL " ; < nl > + < nl > + < nl > " GroupMemberMakeAdmin " = " 设 为 群 组 管 理 员 " ; < nl > < nl > " GroupMemberMakeMessage " = " 确 定 将 { name } 设 为 群 组 管 理 员 吗 ? " ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > index 427782a . . 8c2f8eb 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > @ @ - 83 , 6 + 83 , 9 @ @ import DZNWebViewController < nl > < nl > / / / Invitation URL for apps < nl > public var invitePrefix : String ? = " https : / / actor . im / join / " < nl > + < nl > + / / / Invitation URL for apps < nl > + public var invitePrefixShort : String ? = " actor . im / join / " < nl > < nl > / / / Privacy Policy URL < nl > public var privacyPolicyUrl : String ? = nil < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAAddParticipantViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAAddParticipantViewController . swift < nl > index 154f045 . . ffb5491 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAAddParticipantViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAAddParticipantViewController . swift < nl > @ @ - 29 , 14 + 29 , 16 @ @ public class AAAddParticipantViewController : AAContactsListContentController , AA < nl > } < nl > < nl > public func willAddContacts ( controller : AAContactsListContentController , section : AAManagedSection ) { < nl > - section . custom { ( r : AACustomRow < AAContactActionCell > ) - > ( ) in < nl > - r . height = 56 < nl > - r . closure = { ( cell ) - > ( ) in < nl > - cell . bind ( " ic _ invite _ user " , actionTitle : AALocalized ( " GroupAddParticipantUrl " ) ) < nl > - } < nl > - r . selectAction = { ( ) - > Bool in < nl > - self . navigateNext ( AAInviteLinkViewController ( gid : self . gid ) , removeCurrent : false ) < nl > - return false < nl > + if group . isCanInviteViaLink . get ( ) . booleanValue ( ) { < nl > + section . custom { ( r : AACustomRow < AAContactActionCell > ) - > ( ) in < nl > + r . height = 56 < nl > + r . closure = { ( cell ) - > ( ) in < nl > + cell . bind ( " ic _ invite _ user " , actionTitle : AALocalized ( " GroupAddParticipantUrl " ) ) < nl > + } < nl > + r . selectAction = { ( ) - > Bool in < nl > + self . navigateNext ( AAInviteLinkViewController ( gid : self . gid ) , removeCurrent : false ) < nl > + return false < nl > + } < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupAdministrationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupAdministrationViewController . swift < nl > index 6722ed2 . . 70e789f 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupAdministrationViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupAdministrationViewController . swift < nl > @ @ - 24 , 7 + 24 , 11 @ @ public class AAGroupAdministrationViewController : AAContentTableController { < nl > public override func tableDidLoad ( ) { < nl > < nl > section { ( s ) in < nl > - s . footerText = " Control what is possible in this group " < nl > + if isChannel { < nl > + s . footerText = AALocalized ( " GroupPermissionsHintChannel " ) < nl > + } else { < nl > + s . footerText = AALocalized ( " GroupPermissionsHint " ) < nl > + } < nl > self . shortNameRow = s . common ( { ( r ) in < nl > < nl > if ( self . isChannel ) { < nl > @ @ - 35 , 9 + 39 , 17 @ @ public class AAGroupAdministrationViewController : AAContentTableController { < nl > < nl > r . bindAction = { ( r ) in < nl > if self . group . shortName . get ( ) ! = nil { < nl > - r . hint = " Public " < nl > + if self . isChannel { < nl > + r . hint = AALocalized ( " ChannelTypePublic " ) < nl > + } else { < nl > + r . hint = AALocalized ( " GroupTypePublic " ) < nl > + } < nl > } else { < nl > - r . hint = " Private " < nl > + if self . isChannel { < nl > + r . hint = AALocalized ( " ChannelTypePrivate " ) < nl > + } else { < nl > + r . hint = AALocalized ( " GroupTypePrivate " ) < nl > + } < nl > } < nl > } < nl > < nl > @ @ - 53 , 30 + 65 , 45 @ @ public class AAGroupAdministrationViewController : AAContentTableController { < nl > < nl > if group . isCanEditAdministration . get ( ) . booleanValue ( ) & & ! isChannel { < nl > section { ( s ) in < nl > - s . footerText = " All members will see all messages " < nl > + s . footerText = AALocalized ( " GroupShareHint " ) < nl > self . shareHistoryRow = s . common ( { ( r ) in < nl > - r . content = " Share History " < nl > + r . content = AALocalized ( " GroupShareTitle " ) < nl > r . bindAction = { ( r ) in < nl > if self . group . isHistoryShared . get ( ) . booleanValue ( ) { < nl > - r . hint = " Shared " < nl > + r . hint = AALocalized ( " GroupShareEnabled " ) < nl > + r . selectAction = nil < nl > } else { < nl > r . hint = nil < nl > + r . selectAction = { ( ) - > Bool in < nl > + self . confirmAlertUser ( " GroupShareMessage " , action : " GroupShareAction " , tapYes : { < nl > + self . executePromise ( Actor . shareHistoryWithGid ( jint ( self . gid ) ) ) < nl > + } ) < nl > + return true < nl > + } < nl > } < nl > } < nl > - < nl > } ) < nl > } < nl > } < nl > < nl > if group . isCanDelete . get ( ) . booleanValue ( ) { < nl > section { ( s ) in < nl > - s . footerText = " You will lose all messages in this group " < nl > - s . danger ( " Delete Group " , closure : { ( r ) in < nl > + let action : String < nl > + if isChannel { < nl > + s . footerText = AALocalized ( " GroupDeleteHintChannel " ) < nl > + action = AALocalized ( " GroupDeleteTitleChannel " ) < nl > + } else { < nl > + s . footerText = AALocalized ( " GroupDeleteHint " ) < nl > + action = AALocalized ( " GroupDeleteTitle " ) < nl > + } < nl > + s . danger ( action , closure : { ( r ) in < nl > r . selectAction = { ( ) - > Bool in < nl > - self . executePromise ( Actor . deleteGroupWithGid ( jint ( self . gid ) ) ) . after { < nl > - let first = self . navigationController ! . viewControllers . first ! < nl > - self . navigationController ! . setViewControllers ( [ first ] , animated : true ) < nl > - } < nl > + self . confirmAlertUserDanger ( self . isChannel ? " GroupDeleteMessageChannel " : " GroupDeleteMessage " , action : " GroupDeleteAction " , tapYes : { < nl > + self . executePromise ( Actor . deleteGroupWithGid ( jint ( self . gid ) ) ) . after { < nl > + let first = self . navigationController ! . viewControllers . first ! < nl > + self . navigationController ! . setViewControllers ( [ first ] , animated : true ) < nl > + } < nl > + } ) < nl > return true < nl > } < nl > } ) < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupTypeController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupTypeController . swift < nl > index fdb97b8 . . 88b13d0 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupTypeController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupTypeController . swift < nl > @ @ - 41 , 20 + 41 , 38 @ @ public class AAGroupTypeViewController : AAContentTableController { < nl > < nl > section { ( s ) in < nl > < nl > - s . headerText = " Group Type " . uppercaseString < nl > - if self . isPublic { < nl > - s . footerText = " Public groups can be found in search and anyone can joing " < nl > + if isChannel { < nl > + s . headerText = AALocalized ( " GroupTypeTitleChannel " ) . uppercaseString < nl > + if self . isPublic { < nl > + s . footerText = AALocalized ( " GroupTypeHintPublicChannel " ) < nl > + } else { < nl > + s . footerText = AALocalized ( " GroupTypeHintPrivateChannel " ) < nl > + } < nl > } else { < nl > - s . footerText = " Private groups can be joined only via personal invitation " < nl > + s . headerText = AALocalized ( " GroupTypeTitle " ) . uppercaseString < nl > + if self . isPublic { < nl > + s . footerText = AALocalized ( " GroupTypeHintPublic " ) < nl > + } else { < nl > + s . footerText = AALocalized ( " GroupTypeHintPrivate " ) < nl > + } < nl > } < nl > self . publicRow = s . common ( { ( r ) in < nl > - r . content = " Public Group " < nl > + if isChannel { < nl > + r . content = AALocalized ( " ChannelTypePublicFull " ) < nl > + } else { < nl > + r . content = AALocalized ( " GroupTypePublicFull " ) < nl > + } < nl > + < nl > r . selectAction = { ( ) - > Bool in < nl > if ! self . isPublic { < nl > self . isPublic = true < nl > self . publicRow . rebind ( ) < nl > self . privateRow . rebind ( ) < nl > - s . footerText = " Public groups can be found in search and anyone can joing " < nl > + if self . isChannel { < nl > + s . footerText = AALocalized ( " GroupTypeHintPublicChannel " ) < nl > + } else { < nl > + s . footerText = AALocalized ( " GroupTypeHintPublic " ) < nl > + } < nl > self . tableView . reloadSection ( 0 , withRowAnimation : . Automatic ) < nl > self . managedTable . sections . append ( self . linkSection ) < nl > self . tableView . insertSection ( 1 , withRowAnimation : . Fade ) < nl > @ @ - 71 , 13 + 89 , 22 @ @ public class AAGroupTypeViewController : AAContentTableController { < nl > } ) < nl > < nl > self . privateRow = s . common ( { ( r ) in < nl > - r . content = " Private Group " < nl > + if isChannel { < nl > + r . content = AALocalized ( " ChannelTypePrivateFull " ) < nl > + } else { < nl > + r . content = AALocalized ( " GroupTypePrivateFull " ) < nl > + } < nl > + < nl > r . selectAction = { ( ) - > Bool in < nl > if self . isPublic { < nl > self . isPublic = false < nl > self . publicRow . rebind ( ) < nl > self . privateRow . rebind ( ) < nl > - s . footerText = " Private groups can be joined only via personal invitation " < nl > + if self . isChannel { < nl > + s . footerText = AALocalized ( " GroupTypeHintPrivateChannel " ) < nl > + } else { < nl > + s . footerText = AALocalized ( " GroupTypeHintPrivate " ) < nl > + } < nl > self . tableView . reloadSection ( 0 , withRowAnimation : . Automatic ) < nl > self . managedTable . sections . removeAtIndex ( 1 ) < nl > self . tableView . deleteSection ( 1 , withRowAnimation : . Fade ) < nl > @ @ - 95 , 10 + 122 , 15 @ @ public class AAGroupTypeViewController : AAContentTableController { < nl > } < nl > < nl > self . linkSection = section { ( s ) in < nl > - s . footerText = " People can share this link with others and find your channel using search . " < nl > + if self . isChannel { < nl > + s . footerText = AALocalized ( " GroupTypeLinkHintChannel " ) < nl > + } else { < nl > + s . footerText = AALocalized ( " GroupTypeLinkHint " ) < nl > + } < nl > + < nl > self . shortNameRow = s . edit ( { ( r ) in < nl > r . autocapitalizationType = . None < nl > - r . prefix = " actor . im / join / " < nl > + r . prefix = ActorSDK . sharedActor ( ) . invitePrefixShort < nl > r . text = self . group . shortName . get ( ) < nl > } ) < nl > } < nl > @ @ - 110 , 8 + 142 , 12 @ @ public class AAGroupTypeViewController : AAContentTableController { < nl > public func saveDidTap ( ) { < nl > let nShortName : String ? < nl > if self . isPublic { < nl > - if self . shortNameRow . text ! . trim ( ) . length > 0 { < nl > - nShortName = self . shortNameRow . text ! . trim ( ) < nl > + if let shortNameVal = self . shortNameRow . text ? . trim ( ) { < nl > + if shortNameVal . length > 0 { < nl > + nShortName = shortNameVal < nl > + } else { < nl > + nShortName = nil < nl > + } < nl > } else { < nl > nShortName = nil < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > index 9cb838e . . 4ccc5bc 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > @ @ - 281 , 41 + 281 , 18 @ @ public class AAGroupViewController : AAContentTableController { < nl > } ) < nl > } < nl > } ) < nl > - < nl > - / / Detect if we are admin < nl > - let members : [ ACGroupMember ] = self . group . members . get ( ) . toArray ( ) . toSwiftArray ( ) < nl > - var isAdmin = self . group . ownerId . get ( ) ? . intValue ( ) = = Actor . myUid ( ) < nl > - if ! isAdmin { < nl > - for m in members { < nl > - if m . uid = = Actor . myUid ( ) { < nl > - isAdmin = m . isAdministrator < nl > - } < nl > - } < nl > - } < nl > - < nl > - / / < nl > - / / / / Can mark as admin < nl > - / / let canMarkAdmin = isAdmin & & ! d . isAdministrator < nl > - / / < nl > - / / if canMarkAdmin { < nl > - / / a . action ( " GroupMemberMakeAdmin " ) { ( ) - > ( ) in < nl > - / / < nl > - / / self . confirmDestructive ( AALocalized ( " GroupMemberMakeMessage " ) . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberMakeAction " ) ) { < nl > - / / < nl > - / / self . executeSafe ( Actor . makeAdminCommandWithGid ( jint ( self . gid ) , withUid : jint ( user . getId ( ) ) ) ! ) < nl > - / / } < nl > - / / } < nl > - / / } < nl > < nl > / / Can kick user < nl > - let canKick = isAdmin | | d . inviterUid = = Actor . myUid ( ) < nl > - let name = Actor . getUserWithUid ( d . uid ) . getNameModel ( ) . get ( ) < nl > + let canKick : Bool = < nl > + ( self . group . isCanKickAnyone . get ( ) . booleanValue ( ) | | < nl > + ( self . group . isCanKickInvited . get ( ) . booleanValue ( ) & & d . inviterUid = = Actor . myUid ( ) ) ) < nl > + < nl > if canKick { < nl > + let name = Actor . getUserWithUid ( d . uid ) . getNameModel ( ) . get ( ) < nl > a . destructive ( " GroupMemberKick " ) { ( ) - > ( ) in < nl > self . confirmDestructive ( AALocalized ( " GroupMemberKickMessage " ) < nl > . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberKickAction " ) ) { < nl > - < nl > - / / self . executeSafe ( Actor . kickMemberCommandWithGid ( jint ( self . gid ) , withUid : user . getId ( ) ) ! ) < nl > + self . executeSafe ( Actor . kickMemberCommandWithGid ( jint ( self . gid ) , withUid : user . getId ( ) ) ) < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Alerts . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Alerts . swift < nl > index 215e68e . . b2c444b 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Alerts . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Alerts . swift 	 < nl > @ @ - 26 , 6 + 26 , 17 @ @ public extension UIViewController { < nl > self . presentViewController ( controller , animated : true , completion : nil ) < nl > } < nl > < nl > + public func confirmAlertUserDanger ( message : String , action : String , tapYes : ( ) - > ( ) , tapNo : ( ( ) - > ( ) ) ? = nil ) { < nl > + let controller = UIAlertController ( title : nil , message : AALocalized ( message ) , preferredStyle : UIAlertControllerStyle . Alert ) < nl > + controller . addAction ( UIAlertAction ( title : AALocalized ( action ) , style : UIAlertActionStyle . Destructive , handler : { ( alertView ) - > ( ) in < nl > + tapYes ( ) < nl > + } ) ) < nl > + controller . addAction ( UIAlertAction ( title : AALocalized ( " AlertCancel " ) , style : UIAlertActionStyle . Cancel , handler : { ( alertView ) - > ( ) in < nl > + tapNo ? ( ) < nl > + } ) ) < nl > + self . presentViewController ( controller , animated : true , completion : nil ) < nl > + } < nl > + < nl > public func confirmDangerSheetUser ( action : String , tapYes : ( ) - > ( ) , tapNo : ( ( ) - > ( ) ) ? ) { < nl > showActionSheet ( nil , buttons : [ ] , cancelButton : " AlertCancel " , destructButton : action , sourceView : UIView ( ) , sourceRect : CGRectZero ) { ( index ) - > ( ) in < nl > if index = = - 2 { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Group . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Group . java < nl > index f34565a . . 39603d0 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Group . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Group . java < nl > @ @ - 62 , 6 + 62 , 8 @ @ public class Group extends WrapperExtEntity < ApiGroupFull , ApiGroup > implements K < nl > private boolean isCanLeave ; < nl > @ Property ( " readonly , nonatomic " ) < nl > private boolean isCanDelete ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private boolean isDeleted ; < nl > @ NotNull < nl > @ Property ( " readonly , nonatomic " ) < nl > @ SuppressWarnings ( " NullableProblems " ) < nl > @ @ - 168 , 6 + 170 , 10 @ @ public class Group extends WrapperExtEntity < ApiGroupFull , ApiGroup > implements K < nl > return isMember ; < nl > } < nl > < nl > + public boolean isDeleted ( ) { < nl > + return isDeleted ; < nl > + } < nl > + < nl > public boolean isCanSendMessage ( ) { < nl > return isCanSendMessage ; < nl > } < nl > @ @ - 728 , 6 + 734 , 7 @ @ public class Group extends WrapperExtEntity < ApiGroupFull , ApiGroup > implements K < nl > this . isHidden = wrapped . isHidden ( ) ! = null ? wrapped . isHidden ( ) : false ; < nl > this . membersCount = wrapped . getMembersCount ( ) ! = null ? wrapped . getMembersCount ( ) : 0 ; < nl > this . isMember = wrapped . isMember ( ) ! = null ? wrapped . isMember ( ) : true ; < nl > + this . isDeleted = wrapped . isDeleted ( ) ! = null ? wrapped . isDeleted ( ) : false ; < nl > < nl > if ( wrapped . getGroupType ( ) = = null ) { < nl > this . groupType = GroupType . GROUP ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java < nl > index 08f844c . . 66872e6 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java < nl > @ @ - 6 , 6 + 6 , 7 @ @ package im . actor . core . modules . groups ; < nl > < nl > import im . actor . core . api . updates . UpdateGroupAboutChanged ; < nl > import im . actor . core . api . updates . UpdateGroupAvatarChanged ; < nl > + import im . actor . core . api . updates . UpdateGroupDeleted ; < nl > import im . actor . core . api . updates . UpdateGroupExtChanged ; < nl > import im . actor . core . api . updates . UpdateGroupFullExtChanged ; < nl > import im . actor . core . api . updates . UpdateGroupFullPermissionsChanged ; < nl > @ @ - 40 , 6 + 41 , 7 @ @ public class GroupsProcessor extends AbsModule implements SequenceProcessor { < nl > update instanceof UpdateGroupMemberChanged | | < nl > update instanceof UpdateGroupAvatarChanged | | < nl > update instanceof UpdateGroupPermissionsChanged | | < nl > + update instanceof UpdateGroupDeleted | | < nl > update instanceof UpdateGroupExtChanged | | < nl > < nl > update instanceof UpdateGroupMembersUpdated | | < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / router / GroupRouter . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / router / GroupRouter . java < nl > index 9861166 . . e2291fb 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / router / GroupRouter . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / router / GroupRouter . java < nl > @ @ - 14 , 6 + 14 , 7 @ @ import im . actor . core . api . ApiMember ; < nl > import im . actor . core . api . rpc . RequestLoadFullGroups ; < nl > import im . actor . core . api . updates . UpdateGroupAboutChanged ; < nl > import im . actor . core . api . updates . UpdateGroupAvatarChanged ; < nl > + import im . actor . core . api . updates . UpdateGroupDeleted ; < nl > import im . actor . core . api . updates . UpdateGroupExtChanged ; < nl > import im . actor . core . api . updates . UpdateGroupFullExtChanged ; < nl > import im . actor . core . api . updates . UpdateGroupFullPermissionsChanged ; < nl > @ @ - 82 , 6 + 83 , 11 @ @ public class GroupRouter extends ModuleActor { < nl > } < nl > < nl > @ Verified < nl > + public Promise < Void > onGroupDeleted ( int groupId ) { < nl > + return editGroup ( groupId , group - > group . editIsDeleted ( true ) ) ; < nl > + } < nl > + < nl > + @ Verified < nl > public Promise < Void > onExtChanged ( int groupId , ApiMapValue ext ) { < nl > return editGroup ( groupId , group - > group . editExt ( ext ) ) ; < nl > } < nl > @ @ - 298 , 6 + 304 , 9 @ @ public class GroupRouter extends ModuleActor { < nl > } else if ( update instanceof UpdateGroupPermissionsChanged ) { < nl > UpdateGroupPermissionsChanged permissionsChanged = ( UpdateGroupPermissionsChanged ) update ; < nl > return onPermissionsChanged ( permissionsChanged . getGroupId ( ) , permissionsChanged . getPermissions ( ) ) ; < nl > + } else if ( update instanceof UpdateGroupDeleted ) { < nl > + UpdateGroupDeleted groupDeleted = ( UpdateGroupDeleted ) update ; < nl > + return onGroupDeleted ( groupDeleted . getGroupId ( ) ) ; < nl > } else if ( update instanceof UpdateGroupExtChanged ) { < nl > UpdateGroupExtChanged extChanged = ( UpdateGroupExtChanged ) update ; < nl > return onExtChanged ( extChanged . getGroupId ( ) , extChanged . getExt ( ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / GroupVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / GroupVM . java < nl > index a6d5454 . . fe5e5ab 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / GroupVM . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / GroupVM . java < nl > @ @ - 105 , 6 + 105 , 9 @ @ public class GroupVM extends BaseValueModel < Group > { < nl > @ NotNull < nl > @ Property ( " nonatomic , readonly " ) < nl > private BooleanValueModel isCanDeleteForeign ; < nl > + @ NotNull < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private BooleanValueModel isDeleted ; < nl > < nl > @ NotNull < nl > @ Property ( " nonatomic , readonly " ) < nl > @ @ - 155 , 6 + 158 , 7 @ @ public class GroupVM extends BaseValueModel < Group > { < nl > this . isCanKickAnyone = new BooleanValueModel ( " group . " + groupId + " . isCanKickAnyone " , rawObj . isCanKickAnyone ( ) ) ; < nl > this . isCanEditForeign = new BooleanValueModel ( " group . " + groupId + " . isCanEditForeign " , rawObj . isCanEditForeign ( ) ) ; < nl > this . isCanDeleteForeign = new BooleanValueModel ( " group . " + groupId + " . isCanDeleteForeign " , rawObj . isCanDeleteForeign ( ) ) ; < nl > + this . isDeleted = new BooleanValueModel ( " group . " + groupId + " . isDeleted " , rawObj . isDeleted ( ) ) ; < nl > < nl > this . ownerId = new IntValueModel ( " group . " + groupId + " . membersCount " , rawObj . getOwnerId ( ) ) ; < nl > this . members = new ValueModel < > ( " group . " + groupId + " . members " , new HashSet < > ( rawObj . getMembers ( ) ) ) ; < nl > @ @ - 429 , 6 + 433 , 17 @ @ public class GroupVM extends BaseValueModel < Group > { < nl > } < nl > < nl > / * * < nl > + * Is group deleted < nl > + * < nl > + * @ return is this group deleted model < nl > + * / < nl > + @ NotNull < nl > + @ ObjectiveCName ( " getIsDeletedModel " ) < nl > + public BooleanValueModel getIsDeleted ( ) { < nl > + return isDeleted ; < nl > + } < nl > + < nl > + / * * < nl > * Get Group owner user id model < nl > * < nl > * @ return creator owner id model < nl > @ @ - 537 , 6 + 552 , 7 @ @ public class GroupVM extends BaseValueModel < Group > { < nl > isChanged | = isCanKickAnyone . change ( rawObj . isCanKickAnyone ( ) ) ; < nl > isChanged | = isCanEditForeign . change ( rawObj . isCanEditForeign ( ) ) ; < nl > isChanged | = isCanDeleteForeign . change ( rawObj . isCanDeleteForeign ( ) ) ; < nl > + isChanged | = isDeleted . change ( rawObj . isDeleted ( ) ) ; < nl > < nl > if ( isChanged ) { < nl > notifyIfNeeded ( ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index 88db792 . . ca90813 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 1236 , 8 + 1236 , 8 @ @ < nl > 	 	 	 	 066A52E81BC52A25000E606E / * Cells * / , < nl > 	 	 	 	 066A52E31BC52A20000E606E / * AAAddParticipantViewController . swift * / , < nl > 	 	 	 	 066A52E21BC52A20000E606E / * AAGroupViewController . swift * / , < nl > - 	 	 	 	 066A52E41BC52A20000E606E / * AAInviteLinkViewController . swift * / , < nl > 	 	 	 	 06ABFE371D3FCCE30031A0D6 / * AAGroupEditInfoViewController . swift * / , < nl > + 	 	 	 	 066A52E41BC52A20000E606E / * AAInviteLinkViewController . swift * / , < nl > 	 	 	 ) ; < nl > 	 	 	 path = Group ; < nl > 	 	 	 sourceTree = " < group > " ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > index d689cea . . 8af0acf 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > @ @ - 290 , 6 + 290 , 12 @ @ < nl > < nl > " GroupMembers " = " { 0 } MEMBERS " ; < nl > < nl > + " GroupViewMembers " = " Members " ; < nl > + < nl > + " GroupAbout " = " About " ; < nl > + < nl > + " GroupAboutChannel " = " About " ; < nl > + < nl > " GroupMemberAdmin " = " admin " ; < nl > < nl > " GroupMemberInfo " = " Profile " ; < nl > @ @ - 320 , 8 + 326 , 12 @ @ < nl > < nl > " GroupLeave " = " Leave group " ; < nl > < nl > + " GroupLeaveChannel " = " Leave channel " ; < nl > + < nl > " GroupLeaveConfirm " = " Are you sure you want to leave group ? " ; < nl > < nl > + " GroupLeaveConfirmChannel " = " Are you sure you want to leave channel ? " ; < nl > + < nl > " GroupLeaveConfirmAction " = " Leave " ; < nl > < nl > " GroupInviteLinkPageTitle " = " Invite Link " ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings < nl > index 9768793 . . aa69898 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings < nl > @ @ - 287 , 6 + 287 , 12 @ @ < nl > < nl > " GroupMembers " = " { 0 } MIEMBROS " ; < nl > < nl > + " GroupViewMembers " = " Miembros " ; < nl > + < nl > + " GroupAbout " = " About " ; < nl > + < nl > + " GroupAboutChannel " = " About " ; < nl > + < nl > " GroupMemberAdmin " = " admin " ; < nl > < nl > " GroupMemberInfo " = " Perfil " ; < nl > @ @ - 317 , 8 + 323 , 12 @ @ < nl > < nl > " GroupLeave " = " Salir de grupo " ; < nl > < nl > + " GroupLeaveChannel " = " Leave channel " ; < nl > + < nl > " GroupLeaveConfirm " = " ¿ Seguro que quieres dejar de grupo ? " ; < nl > < nl > + " GroupLeaveConfirmChannel " = " Are you sure you want to leave channel ? " ; < nl > + < nl > " GroupLeaveConfirmAction " = " Salir " ; < nl > < nl > " GroupInviteLinkPageTitle " = " invitar por Enlace " ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings < nl > index e35ff1c . . 0196f12 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings < nl > @ @ - 278 , 6 + 278 , 12 @ @ < nl > < nl > " GroupMembers " = " { 0 } MEMBROS " ; < nl > < nl > + " GroupAbout " = " About " ; < nl > + < nl > + " GroupAboutChannel " = " About " ; < nl > + < nl > + " GroupViewMembers " = " Membros " ; < nl > + < nl > " GroupMemberAdmin " = " admin " ; < nl > < nl > " GroupMemberInfo " = " Perfil " ; < nl > @ @ - 308 , 8 + 314 , 12 @ @ < nl > < nl > " GroupLeave " = " Sair do grupo " ; < nl > < nl > + " GroupLeaveChannel " = " Leave channel " ; < nl > + < nl > " GroupLeaveConfirm " = " Voc ê tem certeza que quer sair do grupo ? " ; < nl > < nl > + " GroupLeaveConfirmChannel " = " Are you sure you want to leave channel ? " ; < nl > + < nl > " GroupLeaveConfirmAction " = " Sair " ; < nl > < nl > " GroupInviteLinkPageTitle " = " Link de Convite " ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings < nl > index 894dc49 . . de2c9a5 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings < nl > @ @ - 290 , 6 + 290 , 12 @ @ < nl > < nl > " GroupMembers " = " { 0 } У Ч А С Т Н И К И " ; < nl > < nl > + " GroupAbout " = " О г р у п п е " ; < nl > + < nl > + " GroupAboutChannel " = " О к а н а л е " ; < nl > + < nl > + " GroupViewMembers " = " У ч а с т н и к и " ; < nl > + < nl > " GroupMemberAdmin " = " а д м и н . " ; < nl > < nl > " GroupMemberInfo " = " П р о ф и л ь " ; < nl > @ @ - 320 , 6 + 326 , 8 @ @ < nl > < nl > " GroupLeave " = " П о к и н у т ь г р у п п у " ; < nl > < nl > + " GroupLeaveChannel " = " Leave channel " ; < nl > + < nl > " GroupLeaveConfirm " = " В ы у в е р е н ы , ч т о х о т и т е п о к и н у т ь г р у п п у ? " ; < nl > < nl > " GroupLeaveConfirmAction " = " П о к и н у т ь " ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings < nl > index 857ad6e . . d4c935f 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings < nl > @ @ - 272 , 10 + 272 , 16 @ @ < nl > < nl > " GroupMembers " = " { 0 } 个 成 员 " ; < nl > < nl > + " GroupViewMembers " = " 个 成 员 " ; < nl > + < nl > " GroupMemberAdmin " = " 管 理 员 " ; < nl > < nl > " GroupMemberInfo " = " 成 员 信 息 " ; < nl > < nl > + " GroupAbout " = " About " ; < nl > + < nl > + " GroupAboutChannel " = " About " ; < nl > + < nl > " GroupMemberMakeAdmin " = " 设 为 群 组 管 理 员 " ; < nl > < nl > " GroupMemberMakeMessage " = " 确 定 将 { name } 设 为 群 组 管 理 员 吗 ? " ; < nl > @ @ - 302 , 6 + 308 , 8 @ @ < nl > < nl > " GroupLeave " = " 退 出 群 组 " ; < nl > < nl > + " GroupLeaveChannel " = " Leave channel " ; < nl > + < nl > " GroupLeaveConfirm " = " 你 确 定 要 退 出 群 组 吗 ？ " ; < nl > < nl > " GroupLeaveConfirmAction " = " 退 出 " ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupEditInfoViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupEditInfoViewController . swift < nl > index 6a8dfc5 . . b92beff 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupEditInfoViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupEditInfoViewController . swift < nl > @ @ - 6 , 6 + 6 , 14 @ @ import Foundation < nl > < nl > public class AAGroupEditInfoController : AAViewController { < nl > < nl > + private let scrollView = UIScrollView ( ) < nl > + private let bgContainer = UIView ( ) < nl > + private let topSeparator = UIView ( ) < nl > + private let bottomSeparator = UIView ( ) < nl > + < nl > + private let nameInput = UITextField ( ) < nl > + private let separator = UIView ( ) < nl > + < nl > public init ( gid : Int ) { < nl > super . init ( ) < nl > self . gid = gid < nl > @ @ - 18 , 6 + 26 , 32 @ @ public class AAGroupEditInfoController : AAViewController { < nl > public override func viewDidLoad ( ) { < nl > super . viewDidLoad ( ) < nl > < nl > + view . backgroundColor = appStyle . vcBackyardColor < nl > + < nl > + scrollView . alwaysBounceVertical = true < nl > + < nl > + separator . backgroundColor = appStyle . vcSeparatorColor < nl > + topSeparator . backgroundColor = appStyle . vcSeparatorColor < nl > + bottomSeparator . backgroundColor = appStyle . vcSeparatorColor < nl > + < nl > + bgContainer . backgroundColor = appStyle . vcBgColor < nl > + < nl > + scrollView . addSubview ( bgContainer ) < nl > + bgContainer . addSubview ( nameInput ) < nl > + bgContainer . addSubview ( separator ) < nl > + bgContainer . addSubview ( topSeparator ) < nl > + bgContainer . addSubview ( bottomSeparator ) < nl > + view . addSubview ( scrollView ) < nl > + } < nl > + < nl > + public override func viewWillLayoutSubviews ( ) { < nl > + super . viewWillLayoutSubviews ( ) < nl > < nl > + scrollView . frame = CGRectMake ( 0 , 0 , view . width , view . height ) < nl > + nameInput . frame = CGRectMake ( 72 , 22 , view . width - 72 - 10 , 44 ) < nl > + separator . frame = CGRectMake ( 72 , 66 , view . width - 72 , 0 . 5 ) < nl > + bgContainer . frame = CGRectMake ( 0 , 0 , view . width , 144 ) < nl > + topSeparator . frame = CGRectMake ( 0 , 0 , bgContainer . width , 0 . 5 ) < nl > + bottomSeparator . frame = CGRectMake ( 0 , bgContainer . height - 0 . 5 , bgContainer . width , 0 . 5 ) < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > index 82659eb . . 65a94f4 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > @ @ - 31 , 6 + 31 , 13 @ @ public class AAGroupViewController : AAContentTableController { < nl > < nl > public override func tableDidLoad ( ) { < nl > < nl > + / / NavigationBar < nl > + if self . group . isCanEditInfo . get ( ) . booleanValue ( ) { < nl > + self . navigationItem . rightBarButtonItem = UIBarButtonItem ( title : AALocalized ( " NavigationEdit " ) , style : . Plain , target : self , action : # selector ( editDidPressed ) ) < nl > + } else { < nl > + self . navigationItem . rightBarButtonItem = nil < nl > + } < nl > + < nl > / / Header < nl > section { ( s ) - > ( ) in < nl > < nl > @ @ - 38 , 11 + 45 , 12 @ @ public class AAGroupViewController : AAContentTableController { < nl > self . headerRow = s . avatar { ( r ) - > ( ) in < nl > < nl > r . id = self . gid < nl > - r . subtitleHidden = true < nl > < nl > r . bindAction = { ( r ) - > ( ) in < nl > r . avatar = self . group . getAvatarModel ( ) . get ( ) < nl > r . title = self . group . getNameModel ( ) . get ( ) < nl > + r . subtitle = Actor . getFormatter ( ) . formatGroupMembers ( self . group . getMembersCountModel ( ) . get ( ) . intValue ( ) ) < nl > + self . group . getPresenceModel ( ) . get ( ) < nl > } < nl > < nl > r . avatarDidTap = { ( view ) - > ( ) in < nl > @ @ - 58 , 66 + 66 , 75 @ @ public class AAGroupViewController : AAContentTableController { < nl > } < nl > } < nl > < nl > - if self . group . isCanEditInfo . get ( ) . booleanValue ( ) { < nl > - < nl > - / / Header : Change photo < nl > - s . action ( " GroupSetPhoto " ) { ( r ) - > ( ) in < nl > - r . selectAction = { ( ) - > Bool in < nl > - let hasCamera = UIImagePickerController . isSourceTypeAvailable ( UIImagePickerControllerSourceType . Camera ) < nl > - self . showActionSheet ( hasCamera ? [ " PhotoCamera " , " PhotoLibrary " ] : [ " PhotoLibrary " ] , < nl > - cancelButton : " AlertCancel " , < nl > - destructButton : self . group . getAvatarModel ( ) . get ( ) ! = nil ? " PhotoRemove " : nil , < nl > - sourceView : self . view , < nl > - sourceRect : self . view . bounds , < nl > - tapClosure : { ( index ) - > ( ) in < nl > - if ( index = = - 2 ) { < nl > - self . confirmAlertUser ( " PhotoRemoveGroupMessage " , < nl > - action : " PhotoRemove " , < nl > - tapYes : { ( ) - > ( ) in < nl > - Actor . removeGroupAvatarWithGid ( jint ( self . gid ) ) < nl > - } , tapNo : nil ) < nl > - } else if ( index > = 0 ) { < nl > - let takePhoto : Bool = ( index = = 0 ) & & hasCamera < nl > - self . pickAvatar ( takePhoto , closure : { ( image ) - > ( ) in < nl > - Actor . changeGroupAvatar ( jint ( self . gid ) , image : image ) < nl > - } ) < nl > - } < nl > - } ) < nl > - < nl > - return true < nl > - } < nl > - } < nl > - < nl > - / / Header : Change title < nl > - s . action ( " GroupSetTitle " ) { ( r ) - > ( ) in < nl > - r . selectAction = { ( ) - > Bool in < nl > - self . startEditField { ( c ) - > ( ) in < nl > - < nl > - c . title = " GroupEditHeader " < nl > - < nl > - c . fieldHint = " GroupEditHint " < nl > - < nl > - c . actionTitle = " NavigationSave " < nl > - < nl > - c . initialText = self . group . getNameModel ( ) . get ( ) < nl > - < nl > - c . didDoneTap = { ( t , c ) - > ( ) in < nl > - < nl > - if t . length = = 0 { < nl > - return < nl > - } < nl > - < nl > - / / c . executeSafeOnlySuccess ( Actor . editGroupTitleCommandWithGid ( jint ( self . gid ) , withTitle : t ) ! , successBlock : { ( val ) - > Void in < nl > - / / c . dismiss ( ) < nl > - / / } ) < nl > - } < nl > - } < nl > - < nl > - return true < nl > - } < nl > + / / About < nl > + if let about = self . group . about . get ( ) { < nl > + if self . group . groupType = = ACGroupType . CHANNEL ( ) { < nl > + s . text ( " GroupAboutChannel " , content : about ) < nl > + } else { < nl > + s . text ( " GroupAbout " , content : about ) < nl > } < nl > } < nl > < nl > + / / if self . group . isCanEditInfo . get ( ) . booleanValue ( ) { < nl > + / / < nl > + / / / / Header : Change photo < nl > + / / s . action ( " GroupSetPhoto " ) { ( r ) - > ( ) in < nl > + / / r . selectAction = { ( ) - > Bool in < nl > + / / let hasCamera = UIImagePickerController . isSourceTypeAvailable ( UIImagePickerControllerSourceType . Camera ) < nl > + / / self . showActionSheet ( hasCamera ? [ " PhotoCamera " , " PhotoLibrary " ] : [ " PhotoLibrary " ] , < nl > + / / cancelButton : " AlertCancel " , < nl > + / / destructButton : self . group . getAvatarModel ( ) . get ( ) ! = nil ? " PhotoRemove " : nil , < nl > + / / sourceView : self . view , < nl > + / / sourceRect : self . view . bounds , < nl > + / / tapClosure : { ( index ) - > ( ) in < nl > + / / if ( index = = - 2 ) { < nl > + / / self . confirmAlertUser ( " PhotoRemoveGroupMessage " , < nl > + / / action : " PhotoRemove " , < nl > + / / tapYes : { ( ) - > ( ) in < nl > + / / Actor . removeGroupAvatarWithGid ( jint ( self . gid ) ) < nl > + / / } , tapNo : nil ) < nl > + / / } else if ( index > = 0 ) { < nl > + / / let takePhoto : Bool = ( index = = 0 ) & & hasCamera < nl > + / / self . pickAvatar ( takePhoto , closure : { ( image ) - > ( ) in < nl > + / / Actor . changeGroupAvatar ( jint ( self . gid ) , image : image ) < nl > + / / } ) < nl > + / / } < nl > + / / } ) < nl > + / / < nl > + / / return true < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / / / Header : Change title < nl > + / / s . action ( " GroupSetTitle " ) { ( r ) - > ( ) in < nl > + / / r . selectAction = { ( ) - > Bool in < nl > + / / self . startEditField { ( c ) - > ( ) in < nl > + / / < nl > + / / c . title = " GroupEditHeader " < nl > + / / < nl > + / / c . fieldHint = " GroupEditHint " < nl > + / / < nl > + / / c . actionTitle = " NavigationSave " < nl > + / / < nl > + / / c . initialText = self . group . getNameModel ( ) . get ( ) < nl > + / / < nl > + / / c . didDoneTap = { ( t , c ) - > ( ) in < nl > + / / < nl > + / / if t . length = = 0 { < nl > + / / return < nl > + / / } < nl > + / / < nl > + / / / / c . executeSafeOnlySuccess ( Actor . editGroupTitleCommandWithGid ( jint ( self . gid ) , withTitle : t ) ! , successBlock : { ( val ) - > Void in < nl > + / / / / c . dismiss ( ) < nl > + / / / / } ) < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / return true < nl > + / / } < nl > + / / } < nl > + / / } < nl > + < nl > } < nl > < nl > / / Calls < nl > @ @ - 170 , 26 + 187 , 67 @ @ public class AAGroupViewController : AAContentTableController { < nl > navigationController . modalInPopover = true < nl > navigationController . modalPresentationStyle = UIModalPresentationStyle . CurrentContext < nl > } < nl > - self . presentViewController ( navigationController , animated : true , completion : { < nl > - } < nl > - ) < nl > + self . presentViewController ( navigationController , animated : true , completion : nil ) < nl > < nl > return false < nl > } < nl > } < nl > } < nl > } < nl > + < nl > + / / View Members < nl > + if self . group . isCanViewMembers . get ( ) . booleanValue ( ) & & self . group . isAsyncMembers . get ( ) . booleanValue ( ) { < nl > + / / section { ( s ) - > ( ) in < nl > + < nl > + s . common ( { ( r ) - > ( ) in < nl > + r . content = AALocalized ( " GroupViewMembers " ) < nl > + r . style = . Normal < nl > + r . selectAction = { ( ) - > Bool in < nl > + / / TODO : Implement < nl > + return false < nl > + } < nl > + } ) < nl > + < nl > + s . action ( " GroupAddParticipant " ) { ( r ) - > ( ) in < nl > + < nl > + r . selectAction = { ( ) - > Bool in < nl > + let addParticipantController = AAAddParticipantViewController ( gid : self . gid ) < nl > + let navigationController = AANavigationController ( rootViewController : addParticipantController ) < nl > + if ( AADevice . isiPad ) { < nl > + navigationController . modalInPopover = true < nl > + navigationController . modalPresentationStyle = UIModalPresentationStyle . CurrentContext < nl > + } < nl > + self . presentViewController ( navigationController , animated : true , completion : nil ) < nl > + return false < nl > + } < nl > + } < nl > + / / } < nl > + } < nl > + < nl > } < nl > < nl > + < nl > + / / Leave group < nl > if group . isCanLeave . get ( ) . booleanValue ( ) { < nl > - / / Leave group < nl > section { ( s ) - > ( ) in < nl > s . common ( { ( r ) - > ( ) in < nl > - r . content = AALocalized ( " GroupLeave " ) < nl > + < nl > + if self . group . groupType = = ACGroupType . CHANNEL ( ) { < nl > + r . content = AALocalized ( " GroupLeaveChannel " ) < nl > + } else { < nl > + r . content = AALocalized ( " GroupLeave " ) < nl > + } < nl > + < nl > r . style = . Destructive < nl > r . selectAction = { ( ) - > Bool in < nl > < nl > - self . confirmDestructive ( AALocalized ( " GroupLeaveConfirm " ) , action : AALocalized ( " GroupLeaveConfirmAction " ) , yes : { ( ) - > ( ) in < nl > + let title : String < nl > + if self . group . groupType = = ACGroupType . CHANNEL ( ) { < nl > + title = AALocalized ( " GroupLeaveConfirmChannel " ) < nl > + } else { < nl > + title = AALocalized ( " GroupLeaveConfirm " ) < nl > + } < nl > + self . confirmDestructive ( title , action : AALocalized ( " GroupLeaveConfirmAction " ) , yes : { ( ) - > ( ) in < nl > / / self . executeSafe ( Actor . leaveGroupCommandWithGid ( jint ( self . gid ) ) ! ) < nl > } ) < nl > < nl > @ @ - 200 , 142 + 258 , 146 @ @ public class AAGroupViewController : AAContentTableController { < nl > } < nl > < nl > / / Members < nl > - section { ( s ) - > ( ) in < nl > - < nl > - s . autoSeparatorsInset = 65 < nl > - s . autoSeparatorTopOffset = 1 < nl > - s . headerHeight = 0 < nl > - < nl > - / / Members : Header < nl > - s . header ( AALocalized ( " GroupMembers " ) . uppercaseString ) < nl > + < nl > + if group . isCanViewMembers . get ( ) . booleanValue ( ) & & ! group . isAsyncMembers . get ( ) . booleanValue ( ) { < nl > < nl > - / / Members : Add < nl > - s . action ( " GroupAddParticipant " ) { ( r ) - > ( ) in < nl > + section { ( s ) - > ( ) in < nl > < nl > - r . contentInset = 65 < nl > + s . autoSeparatorsInset = 65 < nl > + s . autoSeparatorTopOffset = 1 < nl > + s . headerHeight = 0 < nl > < nl > - r . selectAction = { ( ) - > Bool in < nl > - let addParticipantController = AAAddParticipantViewController ( gid : self . gid ) < nl > - let navigationController = AANavigationController ( rootViewController : addParticipantController ) < nl > - if ( AADevice . isiPad ) { < nl > - navigationController . modalInPopover = true < nl > - navigationController . modalPresentationStyle = UIModalPresentationStyle . CurrentContext < nl > - } < nl > - self . presentViewController ( navigationController , animated : true , completion : nil ) < nl > - return false < nl > - } < nl > - } < nl > - < nl > - / / Members : List < nl > - self . memberRows = s . arrays { ( r : AAManagedArrayRows < ACGroupMember , AAGroupMemberCell > ) - > ( ) in < nl > - r . height = 48 < nl > - r . data = self . group . members . get ( ) . toArray ( ) . toSwiftArray ( ) < nl > - r . data . sortInPlace ( self . membersSort ) < nl > + / / Members : Header < nl > + s . header ( AALocalized ( " GroupMembers " ) . uppercaseString ) < nl > < nl > - r . bindData = { ( c , d ) - > ( ) in < nl > - let user = Actor . getUserWithUid ( d . uid ) < nl > - c . bind ( user , isAdmin : d . isAdministrator ) < nl > + / / Members : Add < nl > + s . action ( " GroupAddParticipant " ) { ( r ) - > ( ) in < nl > < nl > - / / Notify to request onlines < nl > - Actor . onUserVisibleWithUid ( d . uid ) < nl > + r . contentInset = 65 < nl > + < nl > + r . selectAction = { ( ) - > Bool in < nl > + let addParticipantController = AAAddParticipantViewController ( gid : self . gid ) < nl > + let navigationController = AANavigationController ( rootViewController : addParticipantController ) < nl > + if ( AADevice . isiPad ) { < nl > + navigationController . modalInPopover = true < nl > + navigationController . modalPresentationStyle = UIModalPresentationStyle . CurrentContext < nl > + } < nl > + self . presentViewController ( navigationController , animated : true , completion : nil ) < nl > + return false < nl > + } < nl > } < nl > < nl > - r . selectAction = { ( d ) - > Bool in < nl > - let user = Actor . getUserWithUid ( d . uid ) < nl > - if ( user . getId ( ) = = Actor . myUid ( ) ) { < nl > - return true < nl > - } < nl > - < nl > - let name = user . getNameModel ( ) . get ( ) < nl > + / / Members : List < nl > + self . memberRows = s . arrays { ( r : AAManagedArrayRows < ACGroupMember , AAGroupMemberCell > ) - > ( ) in < nl > + r . height = 48 < nl > + r . data = self . group . members . get ( ) . toArray ( ) . toSwiftArray ( ) < nl > + r . data . sortInPlace ( self . membersSort ) < nl > < nl > - self . alertSheet { ( a : AAAlertSetting ) - > ( ) in < nl > + r . bindData = { ( c , d ) - > ( ) in < nl > + let user = Actor . getUserWithUid ( d . uid ) < nl > + c . bind ( user , isAdmin : d . isAdministrator ) < nl > < nl > - a . cancel = " AlertCancel " < nl > - < nl > - a . action ( " GroupMemberInfo " ) { ( ) - > ( ) in < nl > - var controller : AAViewController ! = ActorSDK . sharedActor ( ) . delegate . actorControllerForUser ( Int ( user . getId ( ) ) ) < nl > - if controller = = nil { < nl > - controller = AAUserViewController ( uid : Int ( user . getId ( ) ) ) < nl > - } < nl > - self . navigateNext ( controller , removeCurrent : false ) < nl > + / / Notify to request onlines < nl > + Actor . onUserVisibleWithUid ( d . uid ) < nl > + } < nl > + < nl > + r . selectAction = { ( d ) - > Bool in < nl > + let user = Actor . getUserWithUid ( d . uid ) < nl > + if ( user . getId ( ) = = Actor . myUid ( ) ) { < nl > + return true < nl > } < nl > < nl > - a . action ( " GroupMemberWrite " ) { ( ) - > ( ) in < nl > - if let customController = ActorSDK . sharedActor ( ) . delegate . actorControllerForConversation ( ACPeer . userWithInt ( user . getId ( ) ) ) { < nl > - self . navigateDetail ( customController ) < nl > - } else { < nl > - self . navigateDetail ( ConversationViewController ( peer : ACPeer . userWithInt ( user . getId ( ) ) ) ) < nl > - } < nl > - self . popover ? . dismissPopoverAnimated ( true ) < nl > - } < nl > + let name = user . getNameModel ( ) . get ( ) < nl > < nl > - a . action ( " GroupMemberCall " , closure : { ( ) - > ( ) in < nl > - let phones = user . getPhonesModel ( ) . get ( ) < nl > - if phones . size ( ) = = 0 { < nl > - self . alertUser ( " GroupMemberCallNoPhones " ) < nl > - } else if phones . size ( ) = = 1 { < nl > - let number = phones . getWithInt ( 0 ) < nl > - ActorSDK . sharedActor ( ) . openUrl ( " telprompt : / / + \ ( number . phone ) " ) < nl > - } else { < nl > - < nl > - var numbers = [ String ] ( ) < nl > - for i in 0 . . < phones . size ( ) { < nl > - let p = phones . getWithInt ( i ) < nl > - numbers . append ( " \ ( p . title ) : + \ ( p . phone ) " ) < nl > + self . alertSheet { ( a : AAAlertSetting ) - > ( ) in < nl > + < nl > + a . cancel = " AlertCancel " < nl > + < nl > + a . action ( " GroupMemberInfo " ) { ( ) - > ( ) in < nl > + var controller : AAViewController ! = ActorSDK . sharedActor ( ) . delegate . actorControllerForUser ( Int ( user . getId ( ) ) ) < nl > + if controller = = nil { < nl > + controller = AAUserViewController ( uid : Int ( user . getId ( ) ) ) < nl > } < nl > - self . showActionSheet ( numbers , < nl > - cancelButton : " AlertCancel " , < nl > - destructButton : nil , < nl > - sourceView : self . view , < nl > - sourceRect : self . view . bounds , < nl > - tapClosure : { ( index ) - > ( ) in < nl > - if ( index > = 0 ) { < nl > - let number = phones . getWithInt ( jint ( index ) ) < nl > - ActorSDK . sharedActor ( ) . openUrl ( " telprompt : / / + \ ( number . phone ) " ) < nl > - } < nl > - } ) < nl > + self . navigateNext ( controller , removeCurrent : false ) < nl > } < nl > - } ) < nl > + < nl > + a . action ( " GroupMemberWrite " ) { ( ) - > ( ) in < nl > + if let customController = ActorSDK . sharedActor ( ) . delegate . actorControllerForConversation ( ACPeer . userWithInt ( user . getId ( ) ) ) { < nl > + self . navigateDetail ( customController ) < nl > + } else { < nl > + self . navigateDetail ( ConversationViewController ( peer : ACPeer . userWithInt ( user . getId ( ) ) ) ) < nl > + } < nl > + self . popover ? . dismissPopoverAnimated ( true ) < nl > + } < nl > + < nl > + a . action ( " GroupMemberCall " , closure : { ( ) - > ( ) in < nl > + let phones = user . getPhonesModel ( ) . get ( ) < nl > + if phones . size ( ) = = 0 { < nl > + self . alertUser ( " GroupMemberCallNoPhones " ) < nl > + } else if phones . size ( ) = = 1 { < nl > + let number = phones . getWithInt ( 0 ) < nl > + ActorSDK . sharedActor ( ) . openUrl ( " telprompt : / / + \ ( number . phone ) " ) < nl > + } else { < nl > + < nl > + var numbers = [ String ] ( ) < nl > + for i in 0 . . < phones . size ( ) { < nl > + let p = phones . getWithInt ( i ) < nl > + numbers . append ( " \ ( p . title ) : + \ ( p . phone ) " ) < nl > + } < nl > + self . showActionSheet ( numbers , < nl > + cancelButton : " AlertCancel " , < nl > + destructButton : nil , < nl > + sourceView : self . view , < nl > + sourceRect : self . view . bounds , < nl > + tapClosure : { ( index ) - > ( ) in < nl > + if ( index > = 0 ) { < nl > + let number = phones . getWithInt ( jint ( index ) ) < nl > + ActorSDK . sharedActor ( ) . openUrl ( " telprompt : / / + \ ( number . phone ) " ) < nl > + } < nl > + } ) < nl > + } < nl > + } ) < nl > + < nl > + / / / / Detect if we are admin < nl > + / / let members : [ ACGroupMember ] = self . group . members . get ( ) . toArray ( ) . toSwiftArray ( ) < nl > + / / var isAdmin = self . group . creatorId = = Actor . myUid ( ) < nl > + / / if ! isAdmin { < nl > + / / for m in members { < nl > + / / if m . uid = = Actor . myUid ( ) { < nl > + / / isAdmin = m . isAdministrator < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / / / Can mark as admin < nl > + / / let canMarkAdmin = isAdmin & & ! d . isAdministrator < nl > + / / < nl > + / / if canMarkAdmin { < nl > + / / a . action ( " GroupMemberMakeAdmin " ) { ( ) - > ( ) in < nl > + / / < nl > + / / self . confirmDestructive ( AALocalized ( " GroupMemberMakeMessage " ) . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberMakeAction " ) ) { < nl > + / / < nl > + / / self . executeSafe ( Actor . makeAdminCommandWithGid ( jint ( self . gid ) , withUid : jint ( user . getId ( ) ) ) ! ) < nl > + / / } < nl > + / / } < nl > + / / } < nl > + < nl > + / / Can kick user < nl > + / / let canKick = isAdmin | | d . inviterUid = = Actor . myUid ( ) < nl > + / / < nl > + / / if canKick { < nl > + / / a . destructive ( " GroupMemberKick " ) { ( ) - > ( ) in < nl > + / / self . confirmDestructive ( AALocalized ( " GroupMemberKickMessage " ) < nl > + / / . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberKickAction " ) ) { < nl > + / / < nl > + / / self . executeSafe ( Actor . kickMemberCommandWithGid ( jint ( self . gid ) , withUid : user . getId ( ) ) ! ) < nl > + / / } < nl > + / / } < nl > + / / } < nl > + } < nl > < nl > - / / / / Detect if we are admin < nl > - / / let members : [ ACGroupMember ] = self . group . members . get ( ) . toArray ( ) . toSwiftArray ( ) < nl > - / / var isAdmin = self . group . creatorId = = Actor . myUid ( ) < nl > - / / if ! isAdmin { < nl > - / / for m in members { < nl > - / / if m . uid = = Actor . myUid ( ) { < nl > - / / isAdmin = m . isAdministrator < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / / / Can mark as admin < nl > - / / let canMarkAdmin = isAdmin & & ! d . isAdministrator < nl > - / / < nl > - / / if canMarkAdmin { < nl > - / / a . action ( " GroupMemberMakeAdmin " ) { ( ) - > ( ) in < nl > - / / < nl > - / / self . confirmDestructive ( AALocalized ( " GroupMemberMakeMessage " ) . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberMakeAction " ) ) { < nl > - / / < nl > - / / self . executeSafe ( Actor . makeAdminCommandWithGid ( jint ( self . gid ) , withUid : jint ( user . getId ( ) ) ) ! ) < nl > - / / } < nl > - / / } < nl > - / / } < nl > - < nl > - / / Can kick user < nl > - / / let canKick = isAdmin | | d . inviterUid = = Actor . myUid ( ) < nl > - / / < nl > - / / if canKick { < nl > - / / a . destructive ( " GroupMemberKick " ) { ( ) - > ( ) in < nl > - / / self . confirmDestructive ( AALocalized ( " GroupMemberKickMessage " ) < nl > - / / . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberKickAction " ) ) { < nl > - / / < nl > - / / self . executeSafe ( Actor . kickMemberCommandWithGid ( jint ( self . gid ) , withUid : user . getId ( ) ) ! ) < nl > - / / } < nl > - / / } < nl > - / / } < nl > + return true < nl > } < nl > - < nl > - return true < nl > } < nl > } < nl > } < nl > @ @ - 354 , 12 + 416 , 13 @ @ public class AAGroupViewController : AAContentTableController { < nl > } < nl > < nl > / / Bind members < nl > - < nl > - binder . bind ( group . getMembersModel ( ) ) { ( value : JavaUtilHashSet ? ) - > ( ) in < nl > - if let v = value { < nl > - self . memberRows . data = v . toArray ( ) . toSwiftArray ( ) < nl > - self . memberRows . data . sortInPlace ( self . membersSort ) < nl > - self . memberRows . reload ( ) < nl > + if memberRows ! = nil { < nl > + binder . bind ( group . getMembersModel ( ) ) { ( value : JavaUtilHashSet ? ) - > ( ) in < nl > + if let v = value { < nl > + self . memberRows . data = v . toArray ( ) . toSwiftArray ( ) < nl > + self . memberRows . data . sortInPlace ( self . membersSort ) < nl > + self . memberRows . reload ( ) < nl > + } < nl > } < nl > } < nl > < nl > @ @ - 380 , 4 + 443 , 8 @ @ public class AAGroupViewController : AAContentTableController { < nl > } < nl > } < nl > } < nl > + < nl > + public func editDidPressed ( ) { < nl > + self . navigateNext ( AAGroupEditInfoController ( gid : gid ) ) < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAContentTableController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAContentTableController . swift < nl > index 4f245fe . . 6849f81 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAContentTableController . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAContentTableController . swift 	 < nl > @ @ - 33 , 7 + 33 , 7 @ @ public class AAContentTableController : AAManagedTableController , AAManagedTableC < nl > < nl > / / DSL Implementation < nl > < nl > - public func section ( closure : ( s : AAManagedSection ) - > ( ) ) { < nl > + public func section ( @ noescape closure : ( s : AAManagedSection ) - > ( ) ) { < nl > if ! isInLoad { < nl > fatalError ( " Unable to change sections not during tableDidLoad method call " ) < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / group / MembersFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / group / MembersFragment . java 
 index 2dc940d . . f2be836 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / group / MembersFragment . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / group / MembersFragment . java 
 @ @ - 69 , 12 + 69 , 9 @ @ public class MembersFragment extends BaseFragment { 
 addMmemberTV . setGravity ( Gravity . CENTER _ VERTICAL ) ; 
 addMmemberTV . setText ( R . string . group _ add _ member ) ; 
 addMmemberTV . setTextColor ( ActorSDK . sharedActor ( ) . style . getTextPrimaryColor ( ) ) ; 
 - addMmemberTV . setOnClickListener ( new View . OnClickListener ( ) { 
 - @ Override 
 - public void onClick ( View view ) { 
 - startActivity ( new Intent ( getActivity ( ) , AddMemberActivity . class ) 
 - . putExtra ( Intents . EXTRA _ GROUP _ ID , groupId ) ) ; 
 - } 
 + addMmemberTV . setOnClickListener ( view - > { 
 + startActivity ( new Intent ( getActivity ( ) , AddMemberActivity . class ) 
 + . putExtra ( Intents . EXTRA _ GROUP _ ID , groupId ) ) ; 
 } ) ; 
 
 header . addView ( addMmemberTV , ViewGroup . LayoutParams . MATCH _ PARENT , Screen . dp ( 58 ) ) ; 
 @ @ - 92 , 12 + 89 , 7 @ @ public class MembersFragment extends BaseFragment { 
 shareLinkTV . setGravity ( Gravity . CENTER _ VERTICAL ) ; 
 shareLinkTV . setTextColor ( ActorSDK . sharedActor ( ) . style . getTextPrimaryColor ( ) ) ; 
 shareLinkTV . setText ( R . string . invite _ link _ action _ share ) ; 
 - shareLinkTV . setOnClickListener ( new View . OnClickListener ( ) { 
 - @ Override 
 - public void onClick ( View view ) { 
 - Intents . inviteLink ( groupId , getActivity ( ) ) ; 
 - } 
 - } ) ; 
 + shareLinkTV . setOnClickListener ( view - > Intents . inviteLink ( groupId , getActivity ( ) ) ) ; 
 
 header . addView ( shareLinkTV , ViewGroup . LayoutParams . MATCH _ PARENT , Screen . dp ( 58 ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 index 848b3e9 . . cfccc2d 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 @ @ - 300 , 6 + 300 , 65 @ @ 
 
 " GroupTypeTitleChannel " = " Channel Type " ; 
 
 + " GroupPermissionsHint " = " Control what is possible in this group " ; 
 + 
 + " GroupPermissionsHintChannel " = " Control what is possible in this channel " ; 
 + 
 + " GroupTypeHintPublic " = " Public groups can be found in search and anyone can join " ; 
 + 
 + " GroupTypeHintPrivate " = " Private groups can be joined only via personal invitation " ; 
 + 
 + " GroupTypeHintPublicChannel " = " Public channels can be found in search and anyone can join " ; 
 + 
 + " GroupTypeHintPrivateChannel " = " Private channels can be joined only via personal invitation " ; 
 + 
 + " GroupTypeLinkHint " = " People can share this link with others and find your group using search " ; 
 + 
 + " GroupTypeLinkHintChannel " = " People can share this link with others and find your channel using search " ; 
 + 
 + " GroupTypePublic " = " Public " ; 
 + 
 + " GroupTypePrivate " = " Private " ; 
 + 
 + " ChannelTypePublic " = " Public " ; 
 + 
 + " ChannelTypePrivate " = " Private " ; 
 + 
 + " GroupTypePublicFull " = " Public Group " ; 
 + 
 + " GroupTypePrivateFull " = " Private Group " ; 
 + 
 + " ChannelTypePublicFull " = " Public Channel " ; 
 + 
 + " ChannelTypePrivateFull " = " Private Channel " ; 
 + 
 + 
 + " GroupShareTitle " = " Shared History " ; 
 + 
 + " GroupShareEnabled " = " Shared " ; 
 + 
 + " GroupShareHint " = " All members will see all messages " ; 
 + 
 + " GroupShareMessage " = " Are you sure want to share all messages to all members ? This action is irreversible . " ; 
 + 
 + " GroupShareAction " = " Share " ; 
 + 
 + 
 + " GroupDeleteTitle " = " Delete Group " ; 
 + 
 + " GroupDeleteTitleChannel " = " Delete Channel " ; 
 + 
 + " GroupDeleteHint " = " You will lose all messages in this group " ; 
 + 
 + " GroupDeleteHintChannel " = " You will lose all messages in this channel " ; 
 + 
 + " GroupDeleteMessage " = " Are you sure want to DELETE group and ALL messages in it ? This action irreversible . " ; 
 + 
 + " GroupDeleteMessageChannel " = " Are you sure want to DELETE channel and ALL messages in it ? This action irreversible . " ; 
 + 
 + " GroupDeleteAction " = " Delete ALL " ; 
 + 
 + 
 " GroupMemberAdmin " = " admin " ; 
 
 " GroupMemberInfo " = " Profile " ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings 
 index f255c96 . . b925b5c 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings 
 @ @ - 293 , 10 + 293 , 74 @ @ 
 
 " GroupAdministration " = " Administration " ; 
 
 + 
 + 
 " GroupTypeTitle " = " Group Type " ; 
 
 " GroupTypeTitleChannel " = " Channel Type " ; 
 
 + " GroupTypePublic " = " Public " ; 
 + 
 + " GroupTypePrivate " = " Private " ; 
 + 
 + " ChannelTypePublic " = " Public " ; 
 + 
 + " ChannelTypePrivate " = " Private " ; 
 + 
 + " GroupTypePublicFull " = " Public Group " ; 
 + 
 + " GroupTypePrivateFull " = " Private Group " ; 
 + 
 + " ChannelTypePublicFull " = " Public Channel " ; 
 + 
 + " ChannelTypePrivateFull " = " Private Channel " ; 
 + 
 + " GroupPermissionsHint " = " Control what is possible in this group " ; 
 + 
 + " GroupPermissionsHintChannel " = " Control what is possible in this channel " ; 
 + 
 + " GroupTypeHintPublic " = " Public groups can be found in search and anyone can join " ; 
 + 
 + " GroupTypeHintPrivate " = " Private groups can be joined only via personal invitation " ; 
 + 
 + " GroupTypeHintPublicChannel " = " Public channels can be found in search and anyone can join " ; 
 + 
 + " GroupTypeHintPrivateChannel " = " Private channels can be joined only via personal invitation " ; 
 + 
 + " GroupTypeLinkHint " = " People can share this link with others and find your group using search " ; 
 + 
 + " GroupTypeLinkHintChannel " = " People can share this link with others and find your channel using search " ; 
 + 
 + 
 + 
 + " GroupShareTitle " = " Shared History " ; 
 + 
 + " GroupShareEnabled " = " Shared " ; 
 + 
 + " GroupShareHint " = " All members will see all messages " ; 
 + 
 + " GroupShareMessage " = " Are you sure want to share all messages to all members ? This action is irreversible . " ; 
 + 
 + " GroupShareAction " = " Share " ; 
 + 
 + 
 + 
 + " GroupDeleteTitle " = " Delete Group " ; 
 + 
 + " GroupDeleteTitleChannel " = " Delete Channel " ; 
 + 
 + " GroupDeleteHint " = " You will lose all messages in this group " ; 
 + 
 + " GroupDeleteHintChannel " = " You will lose all messages in this channel " ; 
 + 
 + " GroupDeleteMessage " = " Are you sure want to DELETE group and ALL messages in it ? This action irreversible . " ; 
 + 
 + " GroupDeleteMessageChannel " = " Are you sure want to DELETE channel and ALL messages in it ? This action irreversible . " ; 
 + 
 + " GroupDeleteAction " = " Delete ALL " ; 
 + 
 + 
 + 
 " GroupMemberAdmin " = " admin " ; 
 
 " GroupMemberInfo " = " Perfil " ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings 
 index 297a9db . . 6c455d9 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings 
 @ @ - 286 , 6 + 286 , 65 @ @ 
 
 " GroupTypeTitleChannel " = " Channel Type " ; 
 
 + " GroupTypePublic " = " Public " ; 
 + 
 + " GroupTypePrivate " = " Private " ; 
 + 
 + " ChannelTypePublic " = " Public " ; 
 + 
 + " ChannelTypePrivate " = " Private " ; 
 + 
 + " GroupTypePublicFull " = " Public Group " ; 
 + 
 + " GroupTypePrivateFull " = " Private Group " ; 
 + 
 + " ChannelTypePublicFull " = " Public Channel " ; 
 + 
 + " ChannelTypePrivateFull " = " Private Channel " ; 
 + 
 + " GroupPermissionsHint " = " Control what is possible in this group " ; 
 + 
 + " GroupPermissionsHintChannel " = " Control what is possible in this channel " ; 
 + 
 + " GroupTypeHintPublic " = " Public groups can be found in search and anyone can join " ; 
 + 
 + " GroupTypeHintPrivate " = " Private groups can be joined only via personal invitation " ; 
 + 
 + " GroupTypeHintPublicChannel " = " Public channels can be found in search and anyone can join " ; 
 + 
 + " GroupTypeHintPrivateChannel " = " Private channels can be joined only via personal invitation " ; 
 + 
 + " GroupTypeLinkHint " = " People can share this link with others and find your group using search " ; 
 + 
 + " GroupTypeLinkHintChannel " = " People can share this link with others and find your channel using search " ; 
 + 
 + 
 + " GroupShareTitle " = " Shared History " ; 
 + 
 + " GroupShareEnabled " = " Shared " ; 
 + 
 + " GroupShareHint " = " All members will see all messages " ; 
 + 
 + " GroupShareMessage " = " Are you sure want to share all messages to all members ? This action is irreversible . " ; 
 + 
 + " GroupShareAction " = " Share " ; 
 + 
 + 
 + " GroupDeleteTitle " = " Delete Group " ; 
 + 
 + " GroupDeleteTitleChannel " = " Delete Channel " ; 
 + 
 + " GroupDeleteHint " = " You will lose all messages in this group " ; 
 + 
 + " GroupDeleteHintChannel " = " You will lose all messages in this channel " ; 
 + 
 + " GroupDeleteMessage " = " Are you sure want to DELETE group and ALL messages in it ? This action irreversible . " ; 
 + 
 + " GroupDeleteMessageChannel " = " Are you sure want to DELETE channel and ALL messages in it ? This action irreversible . " ; 
 + 
 + " GroupDeleteAction " = " Delete ALL " ; 
 + 
 + 
 " GroupViewMembers " = " Membros " ; 
 
 " GroupMemberAdmin " = " admin " ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings 
 index 1036d7b . . 38492e2 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings 
 @ @ - 280 , 6 + 280 , 7 @ @ 
 
 " GroupEditConfirm " = " В ы у в е р е н ы , ч т о х о т и т е и з м е н и т ь т е м у г р у п п ы ? " ; 
 
 + 
 " GroupEditConfirmAction " = " И з м е н и т ь т е м у " ; 
 
 " GroupNotifications " = " О п о в е щ е н и я " ; 
 @ @ - 298 , 6 + 299 , 66 @ @ 
 
 " GroupTypeTitleChannel " = " Т и п к а н а л а " ; 
 
 + " GroupTypePublic " = " П у б л и ч н а я " ; 
 + 
 + " GroupTypePrivate " = " П р и в а т н а я " ; 
 + 
 + " ChannelTypePublic " = " П у б л и ч н ы й " ; 
 + 
 + " ChannelTypePrivate " = " П р и в а т н ы й " ; 
 + 
 + " GroupTypePublicFull " = " П у б л и ч н а я г р у п п а " ; 
 + 
 + " GroupTypePrivateFull " = " П р и в а т н а я г р у п п а " ; 
 + 
 + " ChannelTypePublicFull " = " П у б л и ч н ы й к а н а л " ; 
 + 
 + " ChannelTypePrivateFull " = " П р и в а т н ы й к а н а л " ; 
 + 
 + " GroupPermissionsHint " = " У п р а в л е н и е т е м ч т о в о з м о ж н о д е л а т ь в э т о й г р у п п е " ; 
 + 
 + " GroupPermissionsHintChannel " = " У п р а в л е н и е т е м ч т о в о з м о ж н о д е л а т ь в э т о м к а н а л е " ; 
 + 
 + " GroupTypeHintPublic " = " П у б л и ч н ы е г у р п п ы м о г у т б ы т ь н а й д е н ы в п о и с к е и к т о у г о д н о м о ж е т в о й т и в н е е " ; 
 + 
 + " GroupTypeHintPrivate " = " В с т у п и т ь в п р и в а т н у ю г р у п п у м о ж н о т о л ь к о п о л и ч н о м у п р и г л а ш е н и ю " ; 
 + 
 + " GroupTypeHintPublicChannel " = " П у б л и ч н ы е к а н а л ы м о г у т б ы т ь н а й д е н ы в п о и с к е и к т о у г о д н о м о ж е т п о д п и с а т ь с я н а н е г о " ; 
 + 
 + " GroupTypeHintPrivateChannel " = " В с т у п и т ь в п р и в а т н ы й к а н а л м о ж н о т о л ь к о п о л и ч н о м у п р и г л а ш е н и ю " ; 
 + 
 + " GroupTypeLinkHint " = " В а ш и д р у з ь я м о г у т д е л и т ь с я э т о й с с ы л к о й и л и н а х о д и т ь г р у п п у в п о и с к е " ; 
 + 
 + " GroupTypeLinkHintChannel " = " В а ш и д р у з ь я м о г у т д е л и т ь с я э т о й с с ы л к о й и л и н а х о д и т ь к а н а л в п о и с к е " ; 
 + 
 + 
 + " GroupShareTitle " = " О б щ а я и с т о р и я " ; 
 + 
 + " GroupShareEnabled " = " В к л ю ч е н о " ; 
 + 
 + " GroupShareHint " = " В с е у ч а с т н и к и у в и д я т в с е с о о б щ е н и я г р у п п ы " ; 
 + 
 + " GroupShareMessage " = " В ы у в е р е н ы ч т о х о т и т е с д е л а т ь в с е с о о б щ е н и я м о б щ и м и ? Э т о д е й с т в и е н е о б р а т и м о . " ; 
 + 
 + " GroupShareAction " = " С д е л а т ь О б щ и м и " ; 
 + 
 + 
 + " GroupDeleteTitle " = " У д а л и т ь г р у п п у " ; 
 + 
 + " GroupDeleteTitleChannel " = " У д а л и т ь к а н а л " ; 
 + 
 + " GroupDeleteHint " = " В ы п о т е р я е т е в с е с о о б щ е н и я в э т о й г р у п п е " ; 
 + 
 + " GroupDeleteHintChannel " = " В ы п о т е р я е т е в с е с о о б щ е н и я в э т о м к а н а л е " ; 
 + 
 + " GroupDeleteMessage " = " В ы у в е р е н ы ч т о х о т и т е У Д А Л И Т Ь г р у п п у и В С Е с о о б щ е н и я в н е й ? Э т о д е й с т в и е н е о б р а т и м о . " ; 
 + 
 + " GroupDeleteMessageChannel " = " В ы у в е р е н ы ч т о х о т и т е У Д А Л И Т Ь к а н а л и В С Е с о о б щ е н и я в н е м ? Э т о д е й с т в и е н е о б р а т и м о . " ; 
 + 
 + " GroupDeleteAction " = " У д а л и т ь В С Е " ; 
 + 
 + 
 + 
 " GroupViewMembers " = " У ч а с т н и к и " ; 
 
 " GroupMemberAdmin " = " а д м и н . " ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings 
 index 258aa99 . . 0390f81 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings 
 @ @ - 286 , 6 + 286 , 61 @ @ 
 
 " GroupTypeTitleChannel " = " Channel Type " ; 
 
 + " ChannelTypePublic " = " Public " ; 
 + 
 + " ChannelTypePrivate " = " Private " ; 
 + 
 + " GroupTypePublicFull " = " Public Group " ; 
 + 
 + " GroupTypePrivateFull " = " Private Group " ; 
 + 
 + " ChannelTypePublicFull " = " Public Channel " ; 
 + 
 + " ChannelTypePrivateFull " = " Private Channel " ; 
 + 
 + " GroupPermissionsHint " = " Control what is possible in this group " ; 
 + 
 + " GroupPermissionsHintChannel " = " Control what is possible in this channel " ; 
 + 
 + " GroupTypeHintPublic " = " Public groups can be found in search and anyone can join " ; 
 + 
 + " GroupTypeHintPrivate " = " Private groups can be joined only via personal invitation " ; 
 + 
 + " GroupTypeHintPublicChannel " = " Public channels can be found in search and anyone can join " ; 
 + 
 + " GroupTypeHintPrivateChannel " = " Private channels can be joined only via personal invitation " ; 
 + 
 + " GroupTypeLinkHint " = " People can share this link with others and find your group using search " ; 
 + 
 + " GroupTypeLinkHintChannel " = " People can share this link with others and find your channel using search " ; 
 + 
 + 
 + " GroupShareTitle " = " Shared History " ; 
 + 
 + " GroupShareEnabled " = " Shared " ; 
 + 
 + " GroupShareHint " = " All members will see all messages " ; 
 + 
 + " GroupShareMessage " = " Are you sure want to share all messages to all members ? This action is irreversible . " ; 
 + 
 + " GroupShareAction " = " Share " ; 
 + 
 + 
 + " GroupDeleteTitle " = " Delete Group " ; 
 + 
 + " GroupDeleteTitleChannel " = " Delete Channel " ; 
 + 
 + " GroupDeleteHint " = " You will lose all messages in this group " ; 
 + 
 + " GroupDeleteHintChannel " = " You will lose all messages in this channel " ; 
 + 
 + " GroupDeleteMessage " = " Are you sure want to DELETE group and ALL messages in it ? This action irreversible . " ; 
 + 
 + " GroupDeleteMessageChannel " = " Are you sure want to DELETE channel and ALL messages in it ? This action irreversible . " ; 
 + 
 + " GroupDeleteAction " = " Delete ALL " ; 
 + 
 + 
 " GroupMemberMakeAdmin " = " 设 为 群 组 管 理 员 " ; 
 
 " GroupMemberMakeMessage " = " 确 定 将 { name } 设 为 群 组 管 理 员 吗 ? " ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 index 427782a . . 8c2f8eb 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 @ @ - 83 , 6 + 83 , 9 @ @ import DZNWebViewController 
 
 / / / Invitation URL for apps 
 public var invitePrefix : String ? = " https : / / actor . im / join / " 
 + 
 + / / / Invitation URL for apps 
 + public var invitePrefixShort : String ? = " actor . im / join / " 
 
 / / / Privacy Policy URL 
 public var privacyPolicyUrl : String ? = nil 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAAddParticipantViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAAddParticipantViewController . swift 
 index 154f045 . . ffb5491 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAAddParticipantViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAAddParticipantViewController . swift 
 @ @ - 29 , 14 + 29 , 16 @ @ public class AAAddParticipantViewController : AAContactsListContentController , AA 
 } 
 
 public func willAddContacts ( controller : AAContactsListContentController , section : AAManagedSection ) { 
 - section . custom { ( r : AACustomRow < AAContactActionCell > ) - > ( ) in 
 - r . height = 56 
 - r . closure = { ( cell ) - > ( ) in 
 - cell . bind ( " ic _ invite _ user " , actionTitle : AALocalized ( " GroupAddParticipantUrl " ) ) 
 - } 
 - r . selectAction = { ( ) - > Bool in 
 - self . navigateNext ( AAInviteLinkViewController ( gid : self . gid ) , removeCurrent : false ) 
 - return false 
 + if group . isCanInviteViaLink . get ( ) . booleanValue ( ) { 
 + section . custom { ( r : AACustomRow < AAContactActionCell > ) - > ( ) in 
 + r . height = 56 
 + r . closure = { ( cell ) - > ( ) in 
 + cell . bind ( " ic _ invite _ user " , actionTitle : AALocalized ( " GroupAddParticipantUrl " ) ) 
 + } 
 + r . selectAction = { ( ) - > Bool in 
 + self . navigateNext ( AAInviteLinkViewController ( gid : self . gid ) , removeCurrent : false ) 
 + return false 
 + } 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupAdministrationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupAdministrationViewController . swift 
 index 6722ed2 . . 70e789f 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupAdministrationViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupAdministrationViewController . swift 
 @ @ - 24 , 7 + 24 , 11 @ @ public class AAGroupAdministrationViewController : AAContentTableController { 
 public override func tableDidLoad ( ) { 
 
 section { ( s ) in 
 - s . footerText = " Control what is possible in this group " 
 + if isChannel { 
 + s . footerText = AALocalized ( " GroupPermissionsHintChannel " ) 
 + } else { 
 + s . footerText = AALocalized ( " GroupPermissionsHint " ) 
 + } 
 self . shortNameRow = s . common ( { ( r ) in 
 
 if ( self . isChannel ) { 
 @ @ - 35 , 9 + 39 , 17 @ @ public class AAGroupAdministrationViewController : AAContentTableController { 
 
 r . bindAction = { ( r ) in 
 if self . group . shortName . get ( ) ! = nil { 
 - r . hint = " Public " 
 + if self . isChannel { 
 + r . hint = AALocalized ( " ChannelTypePublic " ) 
 + } else { 
 + r . hint = AALocalized ( " GroupTypePublic " ) 
 + } 
 } else { 
 - r . hint = " Private " 
 + if self . isChannel { 
 + r . hint = AALocalized ( " ChannelTypePrivate " ) 
 + } else { 
 + r . hint = AALocalized ( " GroupTypePrivate " ) 
 + } 
 } 
 } 
 
 @ @ - 53 , 30 + 65 , 45 @ @ public class AAGroupAdministrationViewController : AAContentTableController { 
 
 if group . isCanEditAdministration . get ( ) . booleanValue ( ) & & ! isChannel { 
 section { ( s ) in 
 - s . footerText = " All members will see all messages " 
 + s . footerText = AALocalized ( " GroupShareHint " ) 
 self . shareHistoryRow = s . common ( { ( r ) in 
 - r . content = " Share History " 
 + r . content = AALocalized ( " GroupShareTitle " ) 
 r . bindAction = { ( r ) in 
 if self . group . isHistoryShared . get ( ) . booleanValue ( ) { 
 - r . hint = " Shared " 
 + r . hint = AALocalized ( " GroupShareEnabled " ) 
 + r . selectAction = nil 
 } else { 
 r . hint = nil 
 + r . selectAction = { ( ) - > Bool in 
 + self . confirmAlertUser ( " GroupShareMessage " , action : " GroupShareAction " , tapYes : { 
 + self . executePromise ( Actor . shareHistoryWithGid ( jint ( self . gid ) ) ) 
 + } ) 
 + return true 
 + } 
 } 
 } 
 - 
 } ) 
 } 
 } 
 
 if group . isCanDelete . get ( ) . booleanValue ( ) { 
 section { ( s ) in 
 - s . footerText = " You will lose all messages in this group " 
 - s . danger ( " Delete Group " , closure : { ( r ) in 
 + let action : String 
 + if isChannel { 
 + s . footerText = AALocalized ( " GroupDeleteHintChannel " ) 
 + action = AALocalized ( " GroupDeleteTitleChannel " ) 
 + } else { 
 + s . footerText = AALocalized ( " GroupDeleteHint " ) 
 + action = AALocalized ( " GroupDeleteTitle " ) 
 + } 
 + s . danger ( action , closure : { ( r ) in 
 r . selectAction = { ( ) - > Bool in 
 - self . executePromise ( Actor . deleteGroupWithGid ( jint ( self . gid ) ) ) . after { 
 - let first = self . navigationController ! . viewControllers . first ! 
 - self . navigationController ! . setViewControllers ( [ first ] , animated : true ) 
 - } 
 + self . confirmAlertUserDanger ( self . isChannel ? " GroupDeleteMessageChannel " : " GroupDeleteMessage " , action : " GroupDeleteAction " , tapYes : { 
 + self . executePromise ( Actor . deleteGroupWithGid ( jint ( self . gid ) ) ) . after { 
 + let first = self . navigationController ! . viewControllers . first ! 
 + self . navigationController ! . setViewControllers ( [ first ] , animated : true ) 
 + } 
 + } ) 
 return true 
 } 
 } ) 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupTypeController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupTypeController . swift 
 index fdb97b8 . . 88b13d0 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupTypeController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupTypeController . swift 
 @ @ - 41 , 20 + 41 , 38 @ @ public class AAGroupTypeViewController : AAContentTableController { 
 
 section { ( s ) in 
 
 - s . headerText = " Group Type " . uppercaseString 
 - if self . isPublic { 
 - s . footerText = " Public groups can be found in search and anyone can joing " 
 + if isChannel { 
 + s . headerText = AALocalized ( " GroupTypeTitleChannel " ) . uppercaseString 
 + if self . isPublic { 
 + s . footerText = AALocalized ( " GroupTypeHintPublicChannel " ) 
 + } else { 
 + s . footerText = AALocalized ( " GroupTypeHintPrivateChannel " ) 
 + } 
 } else { 
 - s . footerText = " Private groups can be joined only via personal invitation " 
 + s . headerText = AALocalized ( " GroupTypeTitle " ) . uppercaseString 
 + if self . isPublic { 
 + s . footerText = AALocalized ( " GroupTypeHintPublic " ) 
 + } else { 
 + s . footerText = AALocalized ( " GroupTypeHintPrivate " ) 
 + } 
 } 
 self . publicRow = s . common ( { ( r ) in 
 - r . content = " Public Group " 
 + if isChannel { 
 + r . content = AALocalized ( " ChannelTypePublicFull " ) 
 + } else { 
 + r . content = AALocalized ( " GroupTypePublicFull " ) 
 + } 
 + 
 r . selectAction = { ( ) - > Bool in 
 if ! self . isPublic { 
 self . isPublic = true 
 self . publicRow . rebind ( ) 
 self . privateRow . rebind ( ) 
 - s . footerText = " Public groups can be found in search and anyone can joing " 
 + if self . isChannel { 
 + s . footerText = AALocalized ( " GroupTypeHintPublicChannel " ) 
 + } else { 
 + s . footerText = AALocalized ( " GroupTypeHintPublic " ) 
 + } 
 self . tableView . reloadSection ( 0 , withRowAnimation : . Automatic ) 
 self . managedTable . sections . append ( self . linkSection ) 
 self . tableView . insertSection ( 1 , withRowAnimation : . Fade ) 
 @ @ - 71 , 13 + 89 , 22 @ @ public class AAGroupTypeViewController : AAContentTableController { 
 } ) 
 
 self . privateRow = s . common ( { ( r ) in 
 - r . content = " Private Group " 
 + if isChannel { 
 + r . content = AALocalized ( " ChannelTypePrivateFull " ) 
 + } else { 
 + r . content = AALocalized ( " GroupTypePrivateFull " ) 
 + } 
 + 
 r . selectAction = { ( ) - > Bool in 
 if self . isPublic { 
 self . isPublic = false 
 self . publicRow . rebind ( ) 
 self . privateRow . rebind ( ) 
 - s . footerText = " Private groups can be joined only via personal invitation " 
 + if self . isChannel { 
 + s . footerText = AALocalized ( " GroupTypeHintPrivateChannel " ) 
 + } else { 
 + s . footerText = AALocalized ( " GroupTypeHintPrivate " ) 
 + } 
 self . tableView . reloadSection ( 0 , withRowAnimation : . Automatic ) 
 self . managedTable . sections . removeAtIndex ( 1 ) 
 self . tableView . deleteSection ( 1 , withRowAnimation : . Fade ) 
 @ @ - 95 , 10 + 122 , 15 @ @ public class AAGroupTypeViewController : AAContentTableController { 
 } 
 
 self . linkSection = section { ( s ) in 
 - s . footerText = " People can share this link with others and find your channel using search . " 
 + if self . isChannel { 
 + s . footerText = AALocalized ( " GroupTypeLinkHintChannel " ) 
 + } else { 
 + s . footerText = AALocalized ( " GroupTypeLinkHint " ) 
 + } 
 + 
 self . shortNameRow = s . edit ( { ( r ) in 
 r . autocapitalizationType = . None 
 - r . prefix = " actor . im / join / " 
 + r . prefix = ActorSDK . sharedActor ( ) . invitePrefixShort 
 r . text = self . group . shortName . get ( ) 
 } ) 
 } 
 @ @ - 110 , 8 + 142 , 12 @ @ public class AAGroupTypeViewController : AAContentTableController { 
 public func saveDidTap ( ) { 
 let nShortName : String ? 
 if self . isPublic { 
 - if self . shortNameRow . text ! . trim ( ) . length > 0 { 
 - nShortName = self . shortNameRow . text ! . trim ( ) 
 + if let shortNameVal = self . shortNameRow . text ? . trim ( ) { 
 + if shortNameVal . length > 0 { 
 + nShortName = shortNameVal 
 + } else { 
 + nShortName = nil 
 + } 
 } else { 
 nShortName = nil 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 index 9cb838e . . 4ccc5bc 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 @ @ - 281 , 41 + 281 , 18 @ @ public class AAGroupViewController : AAContentTableController { 
 } ) 
 } 
 } ) 
 - 
 - / / Detect if we are admin 
 - let members : [ ACGroupMember ] = self . group . members . get ( ) . toArray ( ) . toSwiftArray ( ) 
 - var isAdmin = self . group . ownerId . get ( ) ? . intValue ( ) = = Actor . myUid ( ) 
 - if ! isAdmin { 
 - for m in members { 
 - if m . uid = = Actor . myUid ( ) { 
 - isAdmin = m . isAdministrator 
 - } 
 - } 
 - } 
 - 
 - / / 
 - / / / / Can mark as admin 
 - / / let canMarkAdmin = isAdmin & & ! d . isAdministrator 
 - / / 
 - / / if canMarkAdmin { 
 - / / a . action ( " GroupMemberMakeAdmin " ) { ( ) - > ( ) in 
 - / / 
 - / / self . confirmDestructive ( AALocalized ( " GroupMemberMakeMessage " ) . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberMakeAction " ) ) { 
 - / / 
 - / / self . executeSafe ( Actor . makeAdminCommandWithGid ( jint ( self . gid ) , withUid : jint ( user . getId ( ) ) ) ! ) 
 - / / } 
 - / / } 
 - / / } 
 
 / / Can kick user 
 - let canKick = isAdmin | | d . inviterUid = = Actor . myUid ( ) 
 - let name = Actor . getUserWithUid ( d . uid ) . getNameModel ( ) . get ( ) 
 + let canKick : Bool = 
 + ( self . group . isCanKickAnyone . get ( ) . booleanValue ( ) | | 
 + ( self . group . isCanKickInvited . get ( ) . booleanValue ( ) & & d . inviterUid = = Actor . myUid ( ) ) ) 
 + 
 if canKick { 
 + let name = Actor . getUserWithUid ( d . uid ) . getNameModel ( ) . get ( ) 
 a . destructive ( " GroupMemberKick " ) { ( ) - > ( ) in 
 self . confirmDestructive ( AALocalized ( " GroupMemberKickMessage " ) 
 . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberKickAction " ) ) { 
 - 
 - / / self . executeSafe ( Actor . kickMemberCommandWithGid ( jint ( self . gid ) , withUid : user . getId ( ) ) ! ) 
 + self . executeSafe ( Actor . kickMemberCommandWithGid ( jint ( self . gid ) , withUid : user . getId ( ) ) ) 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Alerts . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Alerts . swift 
 index 215e68e . . b2c444b 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Alerts . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Alerts . swift 	 
 @ @ - 26 , 6 + 26 , 17 @ @ public extension UIViewController { 
 self . presentViewController ( controller , animated : true , completion : nil ) 
 } 
 
 + public func confirmAlertUserDanger ( message : String , action : String , tapYes : ( ) - > ( ) , tapNo : ( ( ) - > ( ) ) ? = nil ) { 
 + let controller = UIAlertController ( title : nil , message : AALocalized ( message ) , preferredStyle : UIAlertControllerStyle . Alert ) 
 + controller . addAction ( UIAlertAction ( title : AALocalized ( action ) , style : UIAlertActionStyle . Destructive , handler : { ( alertView ) - > ( ) in 
 + tapYes ( ) 
 + } ) ) 
 + controller . addAction ( UIAlertAction ( title : AALocalized ( " AlertCancel " ) , style : UIAlertActionStyle . Cancel , handler : { ( alertView ) - > ( ) in 
 + tapNo ? ( ) 
 + } ) ) 
 + self . presentViewController ( controller , animated : true , completion : nil ) 
 + } 
 + 
 public func confirmDangerSheetUser ( action : String , tapYes : ( ) - > ( ) , tapNo : ( ( ) - > ( ) ) ? ) { 
 showActionSheet ( nil , buttons : [ ] , cancelButton : " AlertCancel " , destructButton : action , sourceView : UIView ( ) , sourceRect : CGRectZero ) { ( index ) - > ( ) in 
 if index = = - 2 { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Group . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Group . java 
 index f34565a . . 39603d0 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Group . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Group . java 
 @ @ - 62 , 6 + 62 , 8 @ @ public class Group extends WrapperExtEntity < ApiGroupFull , ApiGroup > implements K 
 private boolean isCanLeave ; 
 @ Property ( " readonly , nonatomic " ) 
 private boolean isCanDelete ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private boolean isDeleted ; 
 @ NotNull 
 @ Property ( " readonly , nonatomic " ) 
 @ SuppressWarnings ( " NullableProblems " ) 
 @ @ - 168 , 6 + 170 , 10 @ @ public class Group extends WrapperExtEntity < ApiGroupFull , ApiGroup > implements K 
 return isMember ; 
 } 
 
 + public boolean isDeleted ( ) { 
 + return isDeleted ; 
 + } 
 + 
 public boolean isCanSendMessage ( ) { 
 return isCanSendMessage ; 
 } 
 @ @ - 728 , 6 + 734 , 7 @ @ public class Group extends WrapperExtEntity < ApiGroupFull , ApiGroup > implements K 
 this . isHidden = wrapped . isHidden ( ) ! = null ? wrapped . isHidden ( ) : false ; 
 this . membersCount = wrapped . getMembersCount ( ) ! = null ? wrapped . getMembersCount ( ) : 0 ; 
 this . isMember = wrapped . isMember ( ) ! = null ? wrapped . isMember ( ) : true ; 
 + this . isDeleted = wrapped . isDeleted ( ) ! = null ? wrapped . isDeleted ( ) : false ; 
 
 if ( wrapped . getGroupType ( ) = = null ) { 
 this . groupType = GroupType . GROUP ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java 
 index 08f844c . . 66872e6 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java 
 @ @ - 6 , 6 + 6 , 7 @ @ package im . actor . core . modules . groups ; 
 
 import im . actor . core . api . updates . UpdateGroupAboutChanged ; 
 import im . actor . core . api . updates . UpdateGroupAvatarChanged ; 
 + import im . actor . core . api . updates . UpdateGroupDeleted ; 
 import im . actor . core . api . updates . UpdateGroupExtChanged ; 
 import im . actor . core . api . updates . UpdateGroupFullExtChanged ; 
 import im . actor . core . api . updates . UpdateGroupFullPermissionsChanged ; 
 @ @ - 40 , 6 + 41 , 7 @ @ public class GroupsProcessor extends AbsModule implements SequenceProcessor { 
 update instanceof UpdateGroupMemberChanged | | 
 update instanceof UpdateGroupAvatarChanged | | 
 update instanceof UpdateGroupPermissionsChanged | | 
 + update instanceof UpdateGroupDeleted | | 
 update instanceof UpdateGroupExtChanged | | 
 
 update instanceof UpdateGroupMembersUpdated | | 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / router / GroupRouter . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / router / GroupRouter . java 
 index 9861166 . . e2291fb 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / router / GroupRouter . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / router / GroupRouter . java 
 @ @ - 14 , 6 + 14 , 7 @ @ import im . actor . core . api . ApiMember ; 
 import im . actor . core . api . rpc . RequestLoadFullGroups ; 
 import im . actor . core . api . updates . UpdateGroupAboutChanged ; 
 import im . actor . core . api . updates . UpdateGroupAvatarChanged ; 
 + import im . actor . core . api . updates . UpdateGroupDeleted ; 
 import im . actor . core . api . updates . UpdateGroupExtChanged ; 
 import im . actor . core . api . updates . UpdateGroupFullExtChanged ; 
 import im . actor . core . api . updates . UpdateGroupFullPermissionsChanged ; 
 @ @ - 82 , 6 + 83 , 11 @ @ public class GroupRouter extends ModuleActor { 
 } 
 
 @ Verified 
 + public Promise < Void > onGroupDeleted ( int groupId ) { 
 + return editGroup ( groupId , group - > group . editIsDeleted ( true ) ) ; 
 + } 
 + 
 + @ Verified 
 public Promise < Void > onExtChanged ( int groupId , ApiMapValue ext ) { 
 return editGroup ( groupId , group - > group . editExt ( ext ) ) ; 
 } 
 @ @ - 298 , 6 + 304 , 9 @ @ public class GroupRouter extends ModuleActor { 
 } else if ( update instanceof UpdateGroupPermissionsChanged ) { 
 UpdateGroupPermissionsChanged permissionsChanged = ( UpdateGroupPermissionsChanged ) update ; 
 return onPermissionsChanged ( permissionsChanged . getGroupId ( ) , permissionsChanged . getPermissions ( ) ) ; 
 + } else if ( update instanceof UpdateGroupDeleted ) { 
 + UpdateGroupDeleted groupDeleted = ( UpdateGroupDeleted ) update ; 
 + return onGroupDeleted ( groupDeleted . getGroupId ( ) ) ; 
 } else if ( update instanceof UpdateGroupExtChanged ) { 
 UpdateGroupExtChanged extChanged = ( UpdateGroupExtChanged ) update ; 
 return onExtChanged ( extChanged . getGroupId ( ) , extChanged . getExt ( ) ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / GroupVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / GroupVM . java 
 index a6d5454 . . fe5e5ab 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / GroupVM . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / GroupVM . java 
 @ @ - 105 , 6 + 105 , 9 @ @ public class GroupVM extends BaseValueModel < Group > { 
 @ NotNull 
 @ Property ( " nonatomic , readonly " ) 
 private BooleanValueModel isCanDeleteForeign ; 
 + @ NotNull 
 + @ Property ( " nonatomic , readonly " ) 
 + private BooleanValueModel isDeleted ; 
 
 @ NotNull 
 @ Property ( " nonatomic , readonly " ) 
 @ @ - 155 , 6 + 158 , 7 @ @ public class GroupVM extends BaseValueModel < Group > { 
 this . isCanKickAnyone = new BooleanValueModel ( " group . " + groupId + " . isCanKickAnyone " , rawObj . isCanKickAnyone ( ) ) ; 
 this . isCanEditForeign = new BooleanValueModel ( " group . " + groupId + " . isCanEditForeign " , rawObj . isCanEditForeign ( ) ) ; 
 this . isCanDeleteForeign = new BooleanValueModel ( " group . " + groupId + " . isCanDeleteForeign " , rawObj . isCanDeleteForeign ( ) ) ; 
 + this . isDeleted = new BooleanValueModel ( " group . " + groupId + " . isDeleted " , rawObj . isDeleted ( ) ) ; 
 
 this . ownerId = new IntValueModel ( " group . " + groupId + " . membersCount " , rawObj . getOwnerId ( ) ) ; 
 this . members = new ValueModel < > ( " group . " + groupId + " . members " , new HashSet < > ( rawObj . getMembers ( ) ) ) ; 
 @ @ - 429 , 6 + 433 , 17 @ @ public class GroupVM extends BaseValueModel < Group > { 
 } 
 
 / * * 
 + * Is group deleted 
 + * 
 + * @ return is this group deleted model 
 + * / 
 + @ NotNull 
 + @ ObjectiveCName ( " getIsDeletedModel " ) 
 + public BooleanValueModel getIsDeleted ( ) { 
 + return isDeleted ; 
 + } 
 + 
 + / * * 
 * Get Group owner user id model 
 * 
 * @ return creator owner id model 
 @ @ - 537 , 6 + 552 , 7 @ @ public class GroupVM extends BaseValueModel < Group > { 
 isChanged | = isCanKickAnyone . change ( rawObj . isCanKickAnyone ( ) ) ; 
 isChanged | = isCanEditForeign . change ( rawObj . isCanEditForeign ( ) ) ; 
 isChanged | = isCanDeleteForeign . change ( rawObj . isCanDeleteForeign ( ) ) ; 
 + isChanged | = isDeleted . change ( rawObj . isDeleted ( ) ) ; 
 
 if ( isChanged ) { 
 notifyIfNeeded ( ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index 88db792 . . ca90813 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 1236 , 8 + 1236 , 8 @ @ 
 	 	 	 	 066A52E81BC52A25000E606E / * Cells * / , 
 	 	 	 	 066A52E31BC52A20000E606E / * AAAddParticipantViewController . swift * / , 
 	 	 	 	 066A52E21BC52A20000E606E / * AAGroupViewController . swift * / , 
 - 	 	 	 	 066A52E41BC52A20000E606E / * AAInviteLinkViewController . swift * / , 
 	 	 	 	 06ABFE371D3FCCE30031A0D6 / * AAGroupEditInfoViewController . swift * / , 
 + 	 	 	 	 066A52E41BC52A20000E606E / * AAInviteLinkViewController . swift * / , 
 	 	 	 ) ; 
 	 	 	 path = Group ; 
 	 	 	 sourceTree = " < group > " ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 index d689cea . . 8af0acf 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 @ @ - 290 , 6 + 290 , 12 @ @ 
 
 " GroupMembers " = " { 0 } MEMBERS " ; 
 
 + " GroupViewMembers " = " Members " ; 
 + 
 + " GroupAbout " = " About " ; 
 + 
 + " GroupAboutChannel " = " About " ; 
 + 
 " GroupMemberAdmin " = " admin " ; 
 
 " GroupMemberInfo " = " Profile " ; 
 @ @ - 320 , 8 + 326 , 12 @ @ 
 
 " GroupLeave " = " Leave group " ; 
 
 + " GroupLeaveChannel " = " Leave channel " ; 
 + 
 " GroupLeaveConfirm " = " Are you sure you want to leave group ? " ; 
 
 + " GroupLeaveConfirmChannel " = " Are you sure you want to leave channel ? " ; 
 + 
 " GroupLeaveConfirmAction " = " Leave " ; 
 
 " GroupInviteLinkPageTitle " = " Invite Link " ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings 
 index 9768793 . . aa69898 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings 
 @ @ - 287 , 6 + 287 , 12 @ @ 
 
 " GroupMembers " = " { 0 } MIEMBROS " ; 
 
 + " GroupViewMembers " = " Miembros " ; 
 + 
 + " GroupAbout " = " About " ; 
 + 
 + " GroupAboutChannel " = " About " ; 
 + 
 " GroupMemberAdmin " = " admin " ; 
 
 " GroupMemberInfo " = " Perfil " ; 
 @ @ - 317 , 8 + 323 , 12 @ @ 
 
 " GroupLeave " = " Salir de grupo " ; 
 
 + " GroupLeaveChannel " = " Leave channel " ; 
 + 
 " GroupLeaveConfirm " = " ¿ Seguro que quieres dejar de grupo ? " ; 
 
 + " GroupLeaveConfirmChannel " = " Are you sure you want to leave channel ? " ; 
 + 
 " GroupLeaveConfirmAction " = " Salir " ; 
 
 " GroupInviteLinkPageTitle " = " invitar por Enlace " ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings 
 index e35ff1c . . 0196f12 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings 
 @ @ - 278 , 6 + 278 , 12 @ @ 
 
 " GroupMembers " = " { 0 } MEMBROS " ; 
 
 + " GroupAbout " = " About " ; 
 + 
 + " GroupAboutChannel " = " About " ; 
 + 
 + " GroupViewMembers " = " Membros " ; 
 + 
 " GroupMemberAdmin " = " admin " ; 
 
 " GroupMemberInfo " = " Perfil " ; 
 @ @ - 308 , 8 + 314 , 12 @ @ 
 
 " GroupLeave " = " Sair do grupo " ; 
 
 + " GroupLeaveChannel " = " Leave channel " ; 
 + 
 " GroupLeaveConfirm " = " Voc ê tem certeza que quer sair do grupo ? " ; 
 
 + " GroupLeaveConfirmChannel " = " Are you sure you want to leave channel ? " ; 
 + 
 " GroupLeaveConfirmAction " = " Sair " ; 
 
 " GroupInviteLinkPageTitle " = " Link de Convite " ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings 
 index 894dc49 . . de2c9a5 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings 
 @ @ - 290 , 6 + 290 , 12 @ @ 
 
 " GroupMembers " = " { 0 } У Ч А С Т Н И К И " ; 
 
 + " GroupAbout " = " О г р у п п е " ; 
 + 
 + " GroupAboutChannel " = " О к а н а л е " ; 
 + 
 + " GroupViewMembers " = " У ч а с т н и к и " ; 
 + 
 " GroupMemberAdmin " = " а д м и н . " ; 
 
 " GroupMemberInfo " = " П р о ф и л ь " ; 
 @ @ - 320 , 6 + 326 , 8 @ @ 
 
 " GroupLeave " = " П о к и н у т ь г р у п п у " ; 
 
 + " GroupLeaveChannel " = " Leave channel " ; 
 + 
 " GroupLeaveConfirm " = " В ы у в е р е н ы , ч т о х о т и т е п о к и н у т ь г р у п п у ? " ; 
 
 " GroupLeaveConfirmAction " = " П о к и н у т ь " ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings 
 index 857ad6e . . d4c935f 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings 
 @ @ - 272 , 10 + 272 , 16 @ @ 
 
 " GroupMembers " = " { 0 } 个 成 员 " ; 
 
 + " GroupViewMembers " = " 个 成 员 " ; 
 + 
 " GroupMemberAdmin " = " 管 理 员 " ; 
 
 " GroupMemberInfo " = " 成 员 信 息 " ; 
 
 + " GroupAbout " = " About " ; 
 + 
 + " GroupAboutChannel " = " About " ; 
 + 
 " GroupMemberMakeAdmin " = " 设 为 群 组 管 理 员 " ; 
 
 " GroupMemberMakeMessage " = " 确 定 将 { name } 设 为 群 组 管 理 员 吗 ? " ; 
 @ @ - 302 , 6 + 308 , 8 @ @ 
 
 " GroupLeave " = " 退 出 群 组 " ; 
 
 + " GroupLeaveChannel " = " Leave channel " ; 
 + 
 " GroupLeaveConfirm " = " 你 确 定 要 退 出 群 组 吗 ？ " ; 
 
 " GroupLeaveConfirmAction " = " 退 出 " ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupEditInfoViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupEditInfoViewController . swift 
 index 6a8dfc5 . . b92beff 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupEditInfoViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupEditInfoViewController . swift 
 @ @ - 6 , 6 + 6 , 14 @ @ import Foundation 
 
 public class AAGroupEditInfoController : AAViewController { 
 
 + private let scrollView = UIScrollView ( ) 
 + private let bgContainer = UIView ( ) 
 + private let topSeparator = UIView ( ) 
 + private let bottomSeparator = UIView ( ) 
 + 
 + private let nameInput = UITextField ( ) 
 + private let separator = UIView ( ) 
 + 
 public init ( gid : Int ) { 
 super . init ( ) 
 self . gid = gid 
 @ @ - 18 , 6 + 26 , 32 @ @ public class AAGroupEditInfoController : AAViewController { 
 public override func viewDidLoad ( ) { 
 super . viewDidLoad ( ) 
 
 + view . backgroundColor = appStyle . vcBackyardColor 
 + 
 + scrollView . alwaysBounceVertical = true 
 + 
 + separator . backgroundColor = appStyle . vcSeparatorColor 
 + topSeparator . backgroundColor = appStyle . vcSeparatorColor 
 + bottomSeparator . backgroundColor = appStyle . vcSeparatorColor 
 + 
 + bgContainer . backgroundColor = appStyle . vcBgColor 
 + 
 + scrollView . addSubview ( bgContainer ) 
 + bgContainer . addSubview ( nameInput ) 
 + bgContainer . addSubview ( separator ) 
 + bgContainer . addSubview ( topSeparator ) 
 + bgContainer . addSubview ( bottomSeparator ) 
 + view . addSubview ( scrollView ) 
 + } 
 + 
 + public override func viewWillLayoutSubviews ( ) { 
 + super . viewWillLayoutSubviews ( ) 
 
 + scrollView . frame = CGRectMake ( 0 , 0 , view . width , view . height ) 
 + nameInput . frame = CGRectMake ( 72 , 22 , view . width - 72 - 10 , 44 ) 
 + separator . frame = CGRectMake ( 72 , 66 , view . width - 72 , 0 . 5 ) 
 + bgContainer . frame = CGRectMake ( 0 , 0 , view . width , 144 ) 
 + topSeparator . frame = CGRectMake ( 0 , 0 , bgContainer . width , 0 . 5 ) 
 + bottomSeparator . frame = CGRectMake ( 0 , bgContainer . height - 0 . 5 , bgContainer . width , 0 . 5 ) 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 index 82659eb . . 65a94f4 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 @ @ - 31 , 6 + 31 , 13 @ @ public class AAGroupViewController : AAContentTableController { 
 
 public override func tableDidLoad ( ) { 
 
 + / / NavigationBar 
 + if self . group . isCanEditInfo . get ( ) . booleanValue ( ) { 
 + self . navigationItem . rightBarButtonItem = UIBarButtonItem ( title : AALocalized ( " NavigationEdit " ) , style : . Plain , target : self , action : # selector ( editDidPressed ) ) 
 + } else { 
 + self . navigationItem . rightBarButtonItem = nil 
 + } 
 + 
 / / Header 
 section { ( s ) - > ( ) in 
 
 @ @ - 38 , 11 + 45 , 12 @ @ public class AAGroupViewController : AAContentTableController { 
 self . headerRow = s . avatar { ( r ) - > ( ) in 
 
 r . id = self . gid 
 - r . subtitleHidden = true 
 
 r . bindAction = { ( r ) - > ( ) in 
 r . avatar = self . group . getAvatarModel ( ) . get ( ) 
 r . title = self . group . getNameModel ( ) . get ( ) 
 + r . subtitle = Actor . getFormatter ( ) . formatGroupMembers ( self . group . getMembersCountModel ( ) . get ( ) . intValue ( ) ) 
 + self . group . getPresenceModel ( ) . get ( ) 
 } 
 
 r . avatarDidTap = { ( view ) - > ( ) in 
 @ @ - 58 , 66 + 66 , 75 @ @ public class AAGroupViewController : AAContentTableController { 
 } 
 } 
 
 - if self . group . isCanEditInfo . get ( ) . booleanValue ( ) { 
 - 
 - / / Header : Change photo 
 - s . action ( " GroupSetPhoto " ) { ( r ) - > ( ) in 
 - r . selectAction = { ( ) - > Bool in 
 - let hasCamera = UIImagePickerController . isSourceTypeAvailable ( UIImagePickerControllerSourceType . Camera ) 
 - self . showActionSheet ( hasCamera ? [ " PhotoCamera " , " PhotoLibrary " ] : [ " PhotoLibrary " ] , 
 - cancelButton : " AlertCancel " , 
 - destructButton : self . group . getAvatarModel ( ) . get ( ) ! = nil ? " PhotoRemove " : nil , 
 - sourceView : self . view , 
 - sourceRect : self . view . bounds , 
 - tapClosure : { ( index ) - > ( ) in 
 - if ( index = = - 2 ) { 
 - self . confirmAlertUser ( " PhotoRemoveGroupMessage " , 
 - action : " PhotoRemove " , 
 - tapYes : { ( ) - > ( ) in 
 - Actor . removeGroupAvatarWithGid ( jint ( self . gid ) ) 
 - } , tapNo : nil ) 
 - } else if ( index > = 0 ) { 
 - let takePhoto : Bool = ( index = = 0 ) & & hasCamera 
 - self . pickAvatar ( takePhoto , closure : { ( image ) - > ( ) in 
 - Actor . changeGroupAvatar ( jint ( self . gid ) , image : image ) 
 - } ) 
 - } 
 - } ) 
 - 
 - return true 
 - } 
 - } 
 - 
 - / / Header : Change title 
 - s . action ( " GroupSetTitle " ) { ( r ) - > ( ) in 
 - r . selectAction = { ( ) - > Bool in 
 - self . startEditField { ( c ) - > ( ) in 
 - 
 - c . title = " GroupEditHeader " 
 - 
 - c . fieldHint = " GroupEditHint " 
 - 
 - c . actionTitle = " NavigationSave " 
 - 
 - c . initialText = self . group . getNameModel ( ) . get ( ) 
 - 
 - c . didDoneTap = { ( t , c ) - > ( ) in 
 - 
 - if t . length = = 0 { 
 - return 
 - } 
 - 
 - / / c . executeSafeOnlySuccess ( Actor . editGroupTitleCommandWithGid ( jint ( self . gid ) , withTitle : t ) ! , successBlock : { ( val ) - > Void in 
 - / / c . dismiss ( ) 
 - / / } ) 
 - } 
 - } 
 - 
 - return true 
 - } 
 + / / About 
 + if let about = self . group . about . get ( ) { 
 + if self . group . groupType = = ACGroupType . CHANNEL ( ) { 
 + s . text ( " GroupAboutChannel " , content : about ) 
 + } else { 
 + s . text ( " GroupAbout " , content : about ) 
 } 
 } 
 
 + / / if self . group . isCanEditInfo . get ( ) . booleanValue ( ) { 
 + / / 
 + / / / / Header : Change photo 
 + / / s . action ( " GroupSetPhoto " ) { ( r ) - > ( ) in 
 + / / r . selectAction = { ( ) - > Bool in 
 + / / let hasCamera = UIImagePickerController . isSourceTypeAvailable ( UIImagePickerControllerSourceType . Camera ) 
 + / / self . showActionSheet ( hasCamera ? [ " PhotoCamera " , " PhotoLibrary " ] : [ " PhotoLibrary " ] , 
 + / / cancelButton : " AlertCancel " , 
 + / / destructButton : self . group . getAvatarModel ( ) . get ( ) ! = nil ? " PhotoRemove " : nil , 
 + / / sourceView : self . view , 
 + / / sourceRect : self . view . bounds , 
 + / / tapClosure : { ( index ) - > ( ) in 
 + / / if ( index = = - 2 ) { 
 + / / self . confirmAlertUser ( " PhotoRemoveGroupMessage " , 
 + / / action : " PhotoRemove " , 
 + / / tapYes : { ( ) - > ( ) in 
 + / / Actor . removeGroupAvatarWithGid ( jint ( self . gid ) ) 
 + / / } , tapNo : nil ) 
 + / / } else if ( index > = 0 ) { 
 + / / let takePhoto : Bool = ( index = = 0 ) & & hasCamera 
 + / / self . pickAvatar ( takePhoto , closure : { ( image ) - > ( ) in 
 + / / Actor . changeGroupAvatar ( jint ( self . gid ) , image : image ) 
 + / / } ) 
 + / / } 
 + / / } ) 
 + / / 
 + / / return true 
 + / / } 
 + / / } 
 + / / 
 + / / / / Header : Change title 
 + / / s . action ( " GroupSetTitle " ) { ( r ) - > ( ) in 
 + / / r . selectAction = { ( ) - > Bool in 
 + / / self . startEditField { ( c ) - > ( ) in 
 + / / 
 + / / c . title = " GroupEditHeader " 
 + / / 
 + / / c . fieldHint = " GroupEditHint " 
 + / / 
 + / / c . actionTitle = " NavigationSave " 
 + / / 
 + / / c . initialText = self . group . getNameModel ( ) . get ( ) 
 + / / 
 + / / c . didDoneTap = { ( t , c ) - > ( ) in 
 + / / 
 + / / if t . length = = 0 { 
 + / / return 
 + / / } 
 + / / 
 + / / / / c . executeSafeOnlySuccess ( Actor . editGroupTitleCommandWithGid ( jint ( self . gid ) , withTitle : t ) ! , successBlock : { ( val ) - > Void in 
 + / / / / c . dismiss ( ) 
 + / / / / } ) 
 + / / } 
 + / / } 
 + / / 
 + / / return true 
 + / / } 
 + / / } 
 + / / } 
 + 
 } 
 
 / / Calls 
 @ @ - 170 , 26 + 187 , 67 @ @ public class AAGroupViewController : AAContentTableController { 
 navigationController . modalInPopover = true 
 navigationController . modalPresentationStyle = UIModalPresentationStyle . CurrentContext 
 } 
 - self . presentViewController ( navigationController , animated : true , completion : { 
 - } 
 - ) 
 + self . presentViewController ( navigationController , animated : true , completion : nil ) 
 
 return false 
 } 
 } 
 } 
 } 
 + 
 + / / View Members 
 + if self . group . isCanViewMembers . get ( ) . booleanValue ( ) & & self . group . isAsyncMembers . get ( ) . booleanValue ( ) { 
 + / / section { ( s ) - > ( ) in 
 + 
 + s . common ( { ( r ) - > ( ) in 
 + r . content = AALocalized ( " GroupViewMembers " ) 
 + r . style = . Normal 
 + r . selectAction = { ( ) - > Bool in 
 + / / TODO : Implement 
 + return false 
 + } 
 + } ) 
 + 
 + s . action ( " GroupAddParticipant " ) { ( r ) - > ( ) in 
 + 
 + r . selectAction = { ( ) - > Bool in 
 + let addParticipantController = AAAddParticipantViewController ( gid : self . gid ) 
 + let navigationController = AANavigationController ( rootViewController : addParticipantController ) 
 + if ( AADevice . isiPad ) { 
 + navigationController . modalInPopover = true 
 + navigationController . modalPresentationStyle = UIModalPresentationStyle . CurrentContext 
 + } 
 + self . presentViewController ( navigationController , animated : true , completion : nil ) 
 + return false 
 + } 
 + } 
 + / / } 
 + } 
 + 
 } 
 
 + 
 + / / Leave group 
 if group . isCanLeave . get ( ) . booleanValue ( ) { 
 - / / Leave group 
 section { ( s ) - > ( ) in 
 s . common ( { ( r ) - > ( ) in 
 - r . content = AALocalized ( " GroupLeave " ) 
 + 
 + if self . group . groupType = = ACGroupType . CHANNEL ( ) { 
 + r . content = AALocalized ( " GroupLeaveChannel " ) 
 + } else { 
 + r . content = AALocalized ( " GroupLeave " ) 
 + } 
 + 
 r . style = . Destructive 
 r . selectAction = { ( ) - > Bool in 
 
 - self . confirmDestructive ( AALocalized ( " GroupLeaveConfirm " ) , action : AALocalized ( " GroupLeaveConfirmAction " ) , yes : { ( ) - > ( ) in 
 + let title : String 
 + if self . group . groupType = = ACGroupType . CHANNEL ( ) { 
 + title = AALocalized ( " GroupLeaveConfirmChannel " ) 
 + } else { 
 + title = AALocalized ( " GroupLeaveConfirm " ) 
 + } 
 + self . confirmDestructive ( title , action : AALocalized ( " GroupLeaveConfirmAction " ) , yes : { ( ) - > ( ) in 
 / / self . executeSafe ( Actor . leaveGroupCommandWithGid ( jint ( self . gid ) ) ! ) 
 } ) 
 
 @ @ - 200 , 142 + 258 , 146 @ @ public class AAGroupViewController : AAContentTableController { 
 } 
 
 / / Members 
 - section { ( s ) - > ( ) in 
 - 
 - s . autoSeparatorsInset = 65 
 - s . autoSeparatorTopOffset = 1 
 - s . headerHeight = 0 
 - 
 - / / Members : Header 
 - s . header ( AALocalized ( " GroupMembers " ) . uppercaseString ) 
 + 
 + if group . isCanViewMembers . get ( ) . booleanValue ( ) & & ! group . isAsyncMembers . get ( ) . booleanValue ( ) { 
 
 - / / Members : Add 
 - s . action ( " GroupAddParticipant " ) { ( r ) - > ( ) in 
 + section { ( s ) - > ( ) in 
 
 - r . contentInset = 65 
 + s . autoSeparatorsInset = 65 
 + s . autoSeparatorTopOffset = 1 
 + s . headerHeight = 0 
 
 - r . selectAction = { ( ) - > Bool in 
 - let addParticipantController = AAAddParticipantViewController ( gid : self . gid ) 
 - let navigationController = AANavigationController ( rootViewController : addParticipantController ) 
 - if ( AADevice . isiPad ) { 
 - navigationController . modalInPopover = true 
 - navigationController . modalPresentationStyle = UIModalPresentationStyle . CurrentContext 
 - } 
 - self . presentViewController ( navigationController , animated : true , completion : nil ) 
 - return false 
 - } 
 - } 
 - 
 - / / Members : List 
 - self . memberRows = s . arrays { ( r : AAManagedArrayRows < ACGroupMember , AAGroupMemberCell > ) - > ( ) in 
 - r . height = 48 
 - r . data = self . group . members . get ( ) . toArray ( ) . toSwiftArray ( ) 
 - r . data . sortInPlace ( self . membersSort ) 
 + / / Members : Header 
 + s . header ( AALocalized ( " GroupMembers " ) . uppercaseString ) 
 
 - r . bindData = { ( c , d ) - > ( ) in 
 - let user = Actor . getUserWithUid ( d . uid ) 
 - c . bind ( user , isAdmin : d . isAdministrator ) 
 + / / Members : Add 
 + s . action ( " GroupAddParticipant " ) { ( r ) - > ( ) in 
 
 - / / Notify to request onlines 
 - Actor . onUserVisibleWithUid ( d . uid ) 
 + r . contentInset = 65 
 + 
 + r . selectAction = { ( ) - > Bool in 
 + let addParticipantController = AAAddParticipantViewController ( gid : self . gid ) 
 + let navigationController = AANavigationController ( rootViewController : addParticipantController ) 
 + if ( AADevice . isiPad ) { 
 + navigationController . modalInPopover = true 
 + navigationController . modalPresentationStyle = UIModalPresentationStyle . CurrentContext 
 + } 
 + self . presentViewController ( navigationController , animated : true , completion : nil ) 
 + return false 
 + } 
 } 
 
 - r . selectAction = { ( d ) - > Bool in 
 - let user = Actor . getUserWithUid ( d . uid ) 
 - if ( user . getId ( ) = = Actor . myUid ( ) ) { 
 - return true 
 - } 
 - 
 - let name = user . getNameModel ( ) . get ( ) 
 + / / Members : List 
 + self . memberRows = s . arrays { ( r : AAManagedArrayRows < ACGroupMember , AAGroupMemberCell > ) - > ( ) in 
 + r . height = 48 
 + r . data = self . group . members . get ( ) . toArray ( ) . toSwiftArray ( ) 
 + r . data . sortInPlace ( self . membersSort ) 
 
 - self . alertSheet { ( a : AAAlertSetting ) - > ( ) in 
 + r . bindData = { ( c , d ) - > ( ) in 
 + let user = Actor . getUserWithUid ( d . uid ) 
 + c . bind ( user , isAdmin : d . isAdministrator ) 
 
 - a . cancel = " AlertCancel " 
 - 
 - a . action ( " GroupMemberInfo " ) { ( ) - > ( ) in 
 - var controller : AAViewController ! = ActorSDK . sharedActor ( ) . delegate . actorControllerForUser ( Int ( user . getId ( ) ) ) 
 - if controller = = nil { 
 - controller = AAUserViewController ( uid : Int ( user . getId ( ) ) ) 
 - } 
 - self . navigateNext ( controller , removeCurrent : false ) 
 + / / Notify to request onlines 
 + Actor . onUserVisibleWithUid ( d . uid ) 
 + } 
 + 
 + r . selectAction = { ( d ) - > Bool in 
 + let user = Actor . getUserWithUid ( d . uid ) 
 + if ( user . getId ( ) = = Actor . myUid ( ) ) { 
 + return true 
 } 
 
 - a . action ( " GroupMemberWrite " ) { ( ) - > ( ) in 
 - if let customController = ActorSDK . sharedActor ( ) . delegate . actorControllerForConversation ( ACPeer . userWithInt ( user . getId ( ) ) ) { 
 - self . navigateDetail ( customController ) 
 - } else { 
 - self . navigateDetail ( ConversationViewController ( peer : ACPeer . userWithInt ( user . getId ( ) ) ) ) 
 - } 
 - self . popover ? . dismissPopoverAnimated ( true ) 
 - } 
 + let name = user . getNameModel ( ) . get ( ) 
 
 - a . action ( " GroupMemberCall " , closure : { ( ) - > ( ) in 
 - let phones = user . getPhonesModel ( ) . get ( ) 
 - if phones . size ( ) = = 0 { 
 - self . alertUser ( " GroupMemberCallNoPhones " ) 
 - } else if phones . size ( ) = = 1 { 
 - let number = phones . getWithInt ( 0 ) 
 - ActorSDK . sharedActor ( ) . openUrl ( " telprompt : / / + \ ( number . phone ) " ) 
 - } else { 
 - 
 - var numbers = [ String ] ( ) 
 - for i in 0 . . < phones . size ( ) { 
 - let p = phones . getWithInt ( i ) 
 - numbers . append ( " \ ( p . title ) : + \ ( p . phone ) " ) 
 + self . alertSheet { ( a : AAAlertSetting ) - > ( ) in 
 + 
 + a . cancel = " AlertCancel " 
 + 
 + a . action ( " GroupMemberInfo " ) { ( ) - > ( ) in 
 + var controller : AAViewController ! = ActorSDK . sharedActor ( ) . delegate . actorControllerForUser ( Int ( user . getId ( ) ) ) 
 + if controller = = nil { 
 + controller = AAUserViewController ( uid : Int ( user . getId ( ) ) ) 
 } 
 - self . showActionSheet ( numbers , 
 - cancelButton : " AlertCancel " , 
 - destructButton : nil , 
 - sourceView : self . view , 
 - sourceRect : self . view . bounds , 
 - tapClosure : { ( index ) - > ( ) in 
 - if ( index > = 0 ) { 
 - let number = phones . getWithInt ( jint ( index ) ) 
 - ActorSDK . sharedActor ( ) . openUrl ( " telprompt : / / + \ ( number . phone ) " ) 
 - } 
 - } ) 
 + self . navigateNext ( controller , removeCurrent : false ) 
 } 
 - } ) 
 + 
 + a . action ( " GroupMemberWrite " ) { ( ) - > ( ) in 
 + if let customController = ActorSDK . sharedActor ( ) . delegate . actorControllerForConversation ( ACPeer . userWithInt ( user . getId ( ) ) ) { 
 + self . navigateDetail ( customController ) 
 + } else { 
 + self . navigateDetail ( ConversationViewController ( peer : ACPeer . userWithInt ( user . getId ( ) ) ) ) 
 + } 
 + self . popover ? . dismissPopoverAnimated ( true ) 
 + } 
 + 
 + a . action ( " GroupMemberCall " , closure : { ( ) - > ( ) in 
 + let phones = user . getPhonesModel ( ) . get ( ) 
 + if phones . size ( ) = = 0 { 
 + self . alertUser ( " GroupMemberCallNoPhones " ) 
 + } else if phones . size ( ) = = 1 { 
 + let number = phones . getWithInt ( 0 ) 
 + ActorSDK . sharedActor ( ) . openUrl ( " telprompt : / / + \ ( number . phone ) " ) 
 + } else { 
 + 
 + var numbers = [ String ] ( ) 
 + for i in 0 . . < phones . size ( ) { 
 + let p = phones . getWithInt ( i ) 
 + numbers . append ( " \ ( p . title ) : + \ ( p . phone ) " ) 
 + } 
 + self . showActionSheet ( numbers , 
 + cancelButton : " AlertCancel " , 
 + destructButton : nil , 
 + sourceView : self . view , 
 + sourceRect : self . view . bounds , 
 + tapClosure : { ( index ) - > ( ) in 
 + if ( index > = 0 ) { 
 + let number = phones . getWithInt ( jint ( index ) ) 
 + ActorSDK . sharedActor ( ) . openUrl ( " telprompt : / / + \ ( number . phone ) " ) 
 + } 
 + } ) 
 + } 
 + } ) 
 + 
 + / / / / Detect if we are admin 
 + / / let members : [ ACGroupMember ] = self . group . members . get ( ) . toArray ( ) . toSwiftArray ( ) 
 + / / var isAdmin = self . group . creatorId = = Actor . myUid ( ) 
 + / / if ! isAdmin { 
 + / / for m in members { 
 + / / if m . uid = = Actor . myUid ( ) { 
 + / / isAdmin = m . isAdministrator 
 + / / } 
 + / / } 
 + / / } 
 + / / 
 + / / / / Can mark as admin 
 + / / let canMarkAdmin = isAdmin & & ! d . isAdministrator 
 + / / 
 + / / if canMarkAdmin { 
 + / / a . action ( " GroupMemberMakeAdmin " ) { ( ) - > ( ) in 
 + / / 
 + / / self . confirmDestructive ( AALocalized ( " GroupMemberMakeMessage " ) . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberMakeAction " ) ) { 
 + / / 
 + / / self . executeSafe ( Actor . makeAdminCommandWithGid ( jint ( self . gid ) , withUid : jint ( user . getId ( ) ) ) ! ) 
 + / / } 
 + / / } 
 + / / } 
 + 
 + / / Can kick user 
 + / / let canKick = isAdmin | | d . inviterUid = = Actor . myUid ( ) 
 + / / 
 + / / if canKick { 
 + / / a . destructive ( " GroupMemberKick " ) { ( ) - > ( ) in 
 + / / self . confirmDestructive ( AALocalized ( " GroupMemberKickMessage " ) 
 + / / . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberKickAction " ) ) { 
 + / / 
 + / / self . executeSafe ( Actor . kickMemberCommandWithGid ( jint ( self . gid ) , withUid : user . getId ( ) ) ! ) 
 + / / } 
 + / / } 
 + / / } 
 + } 
 
 - / / / / Detect if we are admin 
 - / / let members : [ ACGroupMember ] = self . group . members . get ( ) . toArray ( ) . toSwiftArray ( ) 
 - / / var isAdmin = self . group . creatorId = = Actor . myUid ( ) 
 - / / if ! isAdmin { 
 - / / for m in members { 
 - / / if m . uid = = Actor . myUid ( ) { 
 - / / isAdmin = m . isAdministrator 
 - / / } 
 - / / } 
 - / / } 
 - / / 
 - / / / / Can mark as admin 
 - / / let canMarkAdmin = isAdmin & & ! d . isAdministrator 
 - / / 
 - / / if canMarkAdmin { 
 - / / a . action ( " GroupMemberMakeAdmin " ) { ( ) - > ( ) in 
 - / / 
 - / / self . confirmDestructive ( AALocalized ( " GroupMemberMakeMessage " ) . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberMakeAction " ) ) { 
 - / / 
 - / / self . executeSafe ( Actor . makeAdminCommandWithGid ( jint ( self . gid ) , withUid : jint ( user . getId ( ) ) ) ! ) 
 - / / } 
 - / / } 
 - / / } 
 - 
 - / / Can kick user 
 - / / let canKick = isAdmin | | d . inviterUid = = Actor . myUid ( ) 
 - / / 
 - / / if canKick { 
 - / / a . destructive ( " GroupMemberKick " ) { ( ) - > ( ) in 
 - / / self . confirmDestructive ( AALocalized ( " GroupMemberKickMessage " ) 
 - / / . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberKickAction " ) ) { 
 - / / 
 - / / self . executeSafe ( Actor . kickMemberCommandWithGid ( jint ( self . gid ) , withUid : user . getId ( ) ) ! ) 
 - / / } 
 - / / } 
 - / / } 
 + return true 
 } 
 - 
 - return true 
 } 
 } 
 } 
 @ @ - 354 , 12 + 416 , 13 @ @ public class AAGroupViewController : AAContentTableController { 
 } 
 
 / / Bind members 
 - 
 - binder . bind ( group . getMembersModel ( ) ) { ( value : JavaUtilHashSet ? ) - > ( ) in 
 - if let v = value { 
 - self . memberRows . data = v . toArray ( ) . toSwiftArray ( ) 
 - self . memberRows . data . sortInPlace ( self . membersSort ) 
 - self . memberRows . reload ( ) 
 + if memberRows ! = nil { 
 + binder . bind ( group . getMembersModel ( ) ) { ( value : JavaUtilHashSet ? ) - > ( ) in 
 + if let v = value { 
 + self . memberRows . data = v . toArray ( ) . toSwiftArray ( ) 
 + self . memberRows . data . sortInPlace ( self . membersSort ) 
 + self . memberRows . reload ( ) 
 + } 
 } 
 } 
 
 @ @ - 380 , 4 + 443 , 8 @ @ public class AAGroupViewController : AAContentTableController { 
 } 
 } 
 } 
 + 
 + public func editDidPressed ( ) { 
 + self . navigateNext ( AAGroupEditInfoController ( gid : gid ) ) 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAContentTableController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAContentTableController . swift 
 index 4f245fe . . 6849f81 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAContentTableController . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAContentTableController . swift 	 
 @ @ - 33 , 7 + 33 , 7 @ @ public class AAContentTableController : AAManagedTableController , AAManagedTableC 
 
 / / DSL Implementation 
 
 - public func section ( closure : ( s : AAManagedSection ) - > ( ) ) { 
 + public func section ( @ noescape closure : ( s : AAManagedSection ) - > ( ) ) { 
 if ! isInLoad { 
 fatalError ( " Unable to change sections not during tableDidLoad method call " ) 
 }
