BLEU SCORE: 0.09287528999566796

TEST MSG: fix ( iOS ) : Fixing recent view counter binding
GENERATED MSG: feat ( IOS ) : ringtones on chat and group

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > index de2d2a9 . . 0c7bd11 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > @ @ - 346 , 15 + 346 , 8 @ @ import DZNWebViewController < nl > tab . viewControllers = self . getMainNavigations ( ) < nl > < nl > if let index = self . delegate . actorRootInitialControllerIndex ( ) { < nl > - if index ! = 0 { < nl > - tab . selectedIndex = 0 < nl > - tab . selectedIndex = index < nl > - } else { < nl > - tab . selectedIndex = 1 < nl > - tab . selectedIndex = 0 < nl > - } < nl > + tab . selectedIndex = index < nl > } else { < nl > - tab . selectedIndex = 0 < nl > tab . selectedIndex = 1 < nl > } < nl > < nl > @ @ - 514 , 15 + 507 , 8 @ @ import DZNWebViewController < nl > tab . viewControllers = self . getMainNavigations ( ) < nl > < nl > if let index = self . delegate . actorRootInitialControllerIndex ( ) { < nl > - if index ! = 0 { < nl > - tab . selectedIndex = 0 < nl > - tab . selectedIndex = index < nl > - } else { < nl > - tab . selectedIndex = 1 < nl > - tab . selectedIndex = 0 < nl > - } < nl > + tab . selectedIndex = index < nl > } else { < nl > - tab . selectedIndex = 0 < nl > tab . selectedIndex = 1 < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Recent / AARecentViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Recent / AARecentViewController . swift < nl > index 79db86b . . d6a1cb4 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Recent / AARecentViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Recent / AARecentViewController . swift < nl > @ @ - 6 , 6 + 6 , 8 @ @ import UIKit < nl > < nl > public class AARecentViewController : AADialogsListContentController , AADialogsListContentControllerDelegate { < nl > < nl > + private var isBinded = true < nl > + < nl > public override init ( ) { < nl > < nl > super . init ( ) < nl > @ @ - 17 , 14 + 19 , 6 @ @ public class AARecentViewController : AADialogsListContentController , AADialogsLi < nl > / / Setting delegate < nl > < nl > self . delegate = self < nl > - } < nl > - < nl > - public required init ( coder aDecoder : NSCoder ) { < nl > - fatalError ( " init ( coder : ) has not been implemented " ) < nl > - } < nl > - < nl > - public override func viewDidLoad ( ) { < nl > - super . viewDidLoad ( ) < nl > < nl > / / Setting UITabBarItem < nl > < nl > @ @ - 36 , 6 + 30 , 12 @ @ public class AARecentViewController : AADialogsListContentController , AADialogsLi < nl > navigationItem . leftBarButtonItem = editButtonItem ( ) < nl > navigationItem . leftBarButtonItem ! . title = AALocalized ( " NavigationEdit " ) < nl > navigationItem . rightBarButtonItem = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . Compose , target : self , action : # selector ( AARecentViewController . compose ) ) < nl > + < nl > + bindCounter ( ) < nl > + } < nl > + < nl > + public required init ( coder aDecoder : NSCoder ) { < nl > + fatalError ( " init ( coder : ) has not been implemented " ) < nl > } < nl > < nl > / / Implemention of editing < nl > @ @ - 76 , 18 + 76 , 31 @ @ public class AARecentViewController : AADialogsListContentController , AADialogsLi < nl > < nl > public override func viewWillAppear ( animated : Bool ) { < nl > super . viewWillAppear ( animated ) < nl > - < nl > - binder . bind ( Actor . getGlobalState ( ) . globalCounter , closure : { ( value : JavaLangInteger ? ) - > ( ) in < nl > - if value ! = nil { < nl > - if value ! . integerValue > 0 { < nl > - self . tabBarItem . badgeValue = " \ ( value ! . integerValue ) " < nl > + bindCounter ( ) < nl > + } < nl > + < nl > + func bindCounter ( ) { < nl > + if ! isBinded { < nl > + isBinded = true < nl > + binder . bind ( Actor . getGlobalState ( ) . globalCounter , closure : { ( value : JavaLangInteger ? ) - > ( ) in < nl > + if value ! = nil { < nl > + if value ! . integerValue > 0 { < nl > + self . tabBarItem . badgeValue = " \ ( value ! . integerValue ) " < nl > + } else { < nl > + self . tabBarItem . badgeValue = nil < nl > + } < nl > } else { < nl > self . tabBarItem . badgeValue = nil < nl > } < nl > - } else { < nl > - self . tabBarItem . badgeValue = nil < nl > - } < nl > - } ) < nl > + } ) < nl > + < nl > + } < nl > + < nl > + } < nl > + < nl > + public override func viewWillDisappear ( animated : Bool ) { < nl > + super . viewWillDisappear ( animated ) < nl > + isBinded = false < nl > } < nl > < nl > public override func viewDidAppear ( animated : Bool ) {
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index 2cbe2a9 . . c631634 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 336 , 6 + 336 , 7 @ @ < nl > 	 	 15F89F091C211FED00776ACD / * opus _ types . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15F89F051C211FED00776ACD / * opus _ types . h * / ; } ; < nl > 	 	 15F89F0A1C211FED00776ACD / * opus . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15F89F061C211FED00776ACD / * opus . h * / ; } ; < nl > 	 	 9A680E1B1CC3A34800E3CF59 / * AAUnblockActionSheet . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 9A680E1A1CC3A34800E3CF59 / * AAUnblockActionSheet . swift * / ; } ; < nl > + 	 	 9AAE96481CF81F140092E366 / * AARingtonesViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 9AAE96471CF81F140092E366 / * AARingtonesViewController . swift * / ; } ; < nl > 	 	 BDF21708B376E212CEAEC43D / * Pods _ ActorSDK . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 354C3EFA48FBFAEAD0DEEE17 / * Pods _ ActorSDK . framework * / ; } ; < nl > 	 	 BE237C9D1C422FFA00060648 / * AAStickersKeyboard . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE237C9C1C422FFA00060648 / * AAStickersKeyboard . swift * / ; } ; < nl > 	 	 BE2621571C4656D700A817AB / * AAConvActionSheet . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / ; } ; < nl > @ @ - 715 , 6 + 716 , 7 @ @ < nl > 	 	 15F89F0F1C21317400776ACD / * es * / = { isa = PBXFileReference ; lastKnownFileType = text . plist . strings ; name = es ; path = es . lproj / Localizable . strings ; sourceTree = " < group > " ; } ; < nl > 	 	 354C3EFA48FBFAEAD0DEEE17 / * Pods _ ActorSDK . framework * / = { isa = PBXFileReference ; explicitFileType = wrapper . framework ; includeInIndex = 0 ; path = Pods _ ActorSDK . framework ; sourceTree = BUILT _ PRODUCTS _ DIR ; } ; < nl > 	 	 9A680E1A1CC3A34800E3CF59 / * AAUnblockActionSheet . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAUnblockActionSheet . swift ; sourceTree = " < group > " ; } ; < nl > + 	 	 9AAE96471CF81F140092E366 / * AARingtonesViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AARingtonesViewController . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 BE237C9C1C422FFA00060648 / * AAStickersKeyboard . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAStickersKeyboard . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAConvActionSheet . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 BE2621581C4656EE00A817AB / * AAThumbnailView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAThumbnailView . swift ; sourceTree = " < group > " ; } ; < nl > @ @ - 1092 , 6 + 1094 , 7 @ @ < nl > 	 	 066A525F1BC50E53000E606E / * Controllers * / = { < nl > 	 	 	 isa = PBXGroup ; < nl > 	 	 	 children = ( < nl > + 	 	 	 	 9AAE96461CF81F140092E366 / * Ringtones * / , < nl > 	 	 	 	 06C1D0751C8BC55100B73632 / * Welcome * / , < nl > 	 	 	 	 066A52601BC50E6B000E606E / * Auth * / , < nl > 	 	 	 	 066A52F91BC52FA0000E606E / * Compose * / , < nl > @ @ - 1655 , 6 + 1658 , 14 @ @ < nl > 	 	 	 name = Frameworks ; < nl > 	 	 	 sourceTree = " < group > " ; < nl > 	 	 } ; < nl > + 	 	 9AAE96461CF81F140092E366 / * Ringtones * / = { < nl > + 	 	 	 isa = PBXGroup ; < nl > + 	 	 	 children = ( < nl > + 	 	 	 	 9AAE96471CF81F140092E366 / * AARingtonesViewController . swift * / , < nl > + 	 	 	 ) ; < nl > + 	 	 	 path = Ringtones ; < nl > + 	 	 	 sourceTree = " < group > " ; < nl > + 	 	 } ; < nl > 	 	 BE2621551C46569800A817AB / * AttachmentView * / = { < nl > 	 	 	 isa = PBXGroup ; < nl > 	 	 	 children = ( < nl > @ @ - 2134 , 6 + 2145 , 7 @ @ < nl > 	 	 	 	 066A52591BC4EF61000E606E / * Executions . swift in Sources * / , < nl > 	 	 	 	 153F6B8A1C2D7BA300C0B960 / * AATapLabelDelegate . swift in Sources * / , < nl > 	 	 	 	 15D35F5E1C20187E00E3717A / * AANativeAudioPlayer . m in Sources * / , < nl > + 	 	 	 	 9AAE96481CF81F140092E366 / * AARingtonesViewController . swift in Sources * / , < nl > 	 	 	 	 066A52DB1BC52385000E606E / * AAContactActionCell . swift in Sources * / , < nl > 	 	 	 	 15D35F331C20187200E3717A / * opusfile . c in Sources * / , < nl > 	 	 	 	 065975391BC7CA7B00B8C7DF / * Bundle . swift in Sources * / , < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > index ce8f5b3 . . c22b65a 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > @ @ - 191 , 6 + 191 , 8 @ @ < nl > < nl > " GroupSetTitle " = " Set Group Title " ; < nl > < nl > + " GroupSetSound " = " Set Group Sound " ; < nl > + < nl > " GroupEditConfirm " = " Are you sure you want to change the group title ? " ; < nl > < nl > " GroupEditConfirmAction " = " Change Theme " ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > index 477cf6b . . e357baa 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > @ @ - 123 , 6 + 123 , 8 @ @ import DZNWebViewController < nl > / / / Enable voice calls feature < nl > public var enableCalls : Bool = true < nl > < nl > + / / / Enable custom sound on Groups and Chats < nl > + public var enableChatGroupSound : Bool = false < nl > < nl > / / / Enable experimental features < nl > public var enableExperimentalFeatures : Bool = false < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > index a411d05 . . eb17d8f 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > @ @ - 23 , 17 + 23 , 17 @ @ public class AAGroupViewController : AAContentTableController { < nl > < nl > self . title = AALocalized ( " ProfileTitle " ) < nl > } < nl > - < nl > + < nl > public required init ( coder aDecoder : NSCoder ) { < nl > fatalError ( " init ( coder : ) has not been implemented " ) < nl > } < nl > < nl > < nl > public override func tableDidLoad ( ) { < nl > - < nl > + < nl > / / Header < nl > section { ( s ) - > ( ) in < nl > - < nl > + < nl > / / Header : Avatar < nl > self . headerRow = s . avatar { ( r ) - > ( ) in < nl > < nl > @ @ - 73 , 7 + 73 , 7 @ @ public class AAGroupViewController : AAContentTableController { < nl > action : " PhotoRemove " , < nl > tapYes : { ( ) - > ( ) in < nl > Actor . removeGroupAvatarWithGid ( jint ( self . gid ) ) < nl > - } , tapNo : nil ) < nl > + } , tapNo : nil ) < nl > } else if ( index > = 0 ) { < nl > let takePhoto : Bool = ( index = = 0 ) & & hasCamera < nl > self . pickAvatar ( takePhoto , closure : { ( image ) - > ( ) in < nl > @ @ - 104 , 7 + 104 , 7 @ @ public class AAGroupViewController : AAContentTableController { < nl > if t . length = = 0 { < nl > return < nl > } < nl > - < nl > + < nl > c . executeSafeOnlySuccess ( Actor . editGroupTitleCommandWithGid ( jint ( self . gid ) , withTitle : t ) ! , successBlock : { ( val ) - > Void in < nl > c . dismiss ( ) < nl > } ) < nl > @ @ - 114 , 6 + 114 , 7 @ @ public class AAGroupViewController : AAContentTableController { < nl > return true < nl > } < nl > } < nl > + < nl > } < nl > < nl > / / Calls < nl > @ @ - 133 , 8 + 134 , 10 @ @ public class AAGroupViewController : AAContentTableController { < nl > < nl > / / Notifications < nl > section { ( s ) - > ( ) in < nl > + < nl > + let groupPeer : ACPeer ! = ACPeer . groupWithInt ( jint ( self . gid ) ) < nl > + < nl > s . common { ( r ) - > ( ) in < nl > - let groupPeer : ACPeer ! = ACPeer . groupWithInt ( jint ( self . gid ) ) < nl > < nl > r . style = . Switch < nl > r . content = AALocalized ( " GroupNotifications " ) < nl > @ @ - 146 , 6 + 149 , 27 @ @ public class AAGroupViewController : AAContentTableController { < nl > r . switchAction = { ( on : Bool ) - > ( ) in < nl > Actor . changeNotificationsEnabledWithPeer ( groupPeer , withValue : on ) < nl > } < nl > + if ( ActorSDK . sharedActor ( ) . enableChatGroupSound ) { < nl > + if ( Actor . isNotificationsEnabledWithPeer ( groupPeer ) ) { < nl > + r . selectAction = { ( ) - > Bool in < nl > + / / Sound : Choose sound < nl > + let setRingtoneController = AARingtonesViewController ( ) < nl > + let navigationController = AANavigationController ( rootViewController : setRingtoneController ) < nl > + if ( AADevice . isiPad ) { < nl > + navigationController . modalInPopover = true < nl > + navigationController . modalPresentationStyle = UIModalPresentationStyle . CurrentContext < nl > + } < nl > + self . presentViewController ( navigationController , animated : true , completion : { < nl > + print ( setRingtoneController . selectedRingtone ) < nl > + / / TODO : add - ( void ) changeNotificationSoundWithACPeer : ( ACPeer * ) peer < nl > + / / withNSString : ( NSString * ) sound into Messenger . h < nl > + } < nl > + ) < nl > + < nl > + return false < nl > + } < nl > + } < nl > + } < nl > } < nl > } < nl > < nl > @ @ - 185 , 7 + 209 , 7 @ @ public class AAGroupViewController : AAContentTableController { < nl > r . bindData = { ( c , d ) - > ( ) in < nl > let user = Actor . getUserWithUid ( d . uid ) < nl > c . bind ( user , isAdmin : d . isAdministrator ) < nl > - < nl > + < nl > / / Notify to request onlines < nl > Actor . onUserVisibleWithUid ( d . uid ) < nl > } < nl > @ @ - 195 , 13 + 219 , 13 @ @ public class AAGroupViewController : AAContentTableController { < nl > if ( user . getId ( ) = = Actor . myUid ( ) ) { < nl > return true < nl > } < nl > - < nl > + < nl > let name = user . getNameModel ( ) . get ( ) < nl > - < nl > + < nl > self . alertSheet { ( a : AAAlertSetting ) - > ( ) in < nl > - < nl > + < nl > a . cancel = " AlertCancel " < nl > - < nl > + < nl > a . action ( " GroupMemberInfo " ) { ( ) - > ( ) in < nl > var controller : AAViewController ! = ActorSDK . sharedActor ( ) . delegate . actorControllerForUser ( Int ( user . getId ( ) ) ) < nl > if controller = = nil { < nl > @ @ - 209 , 16 + 233 , 16 @ @ public class AAGroupViewController : AAContentTableController { < nl > } < nl > self . navigateNext ( controller , removeCurrent : false ) < nl > } < nl > - < nl > + < nl > a . action ( " GroupMemberWrite " ) { ( ) - > ( ) in < nl > if let customController = ActorSDK . sharedActor ( ) . delegate . actorControllerForConversation ( ACPeer . userWithInt ( user . getId ( ) ) ) { < nl > self . navigateDetail ( customController ) < nl > } else { < nl > self . navigateDetail ( ConversationViewController ( peer : ACPeer . userWithInt ( user . getId ( ) ) ) ) < nl > - } < nl > + } < nl > self . popover ? . dismissPopoverAnimated ( true ) < nl > } < nl > - < nl > + < nl > a . action ( " GroupMemberCall " , closure : { ( ) - > ( ) in < nl > let phones = user . getPhonesModel ( ) . get ( ) < nl > if phones . size ( ) = = 0 { < nl > @ @ - 227 , 7 + 251 , 7 @ @ public class AAGroupViewController : AAContentTableController { < nl > let number = phones . getWithInt ( 0 ) < nl > ActorSDK . sharedActor ( ) . openUrl ( " telprompt : / / + \ ( number . phone ) " ) < nl > } else { < nl > - < nl > + < nl > var numbers = [ String ] ( ) < nl > for i in 0 . . < phones . size ( ) { < nl > let p = phones . getWithInt ( i ) < nl > @ @ - 243 , 47 + 267 , 47 @ @ public class AAGroupViewController : AAContentTableController { < nl > let number = phones . getWithInt ( jint ( index ) ) < nl > ActorSDK . sharedActor ( ) . openUrl ( " telprompt : / / + \ ( number . phone ) " ) < nl > } < nl > - } ) < nl > - } < nl > - } ) < nl > - < nl > - / / Detect if we are admin < nl > - let members : [ ACGroupMember ] = self . group . members . get ( ) . toArray ( ) . toSwiftArray ( ) < nl > - var isAdmin = self . group . creatorId = = Actor . myUid ( ) < nl > - if ! isAdmin { < nl > - for m in members { < nl > - if m . uid = = Actor . myUid ( ) { < nl > - isAdmin = m . isAdministrator < nl > - } < nl > + } ) < nl > + } < nl > + } ) < nl > + < nl > + / / Detect if we are admin < nl > + let members : [ ACGroupMember ] = self . group . members . get ( ) . toArray ( ) . toSwiftArray ( ) < nl > + var isAdmin = self . group . creatorId = = Actor . myUid ( ) < nl > + if ! isAdmin { < nl > + for m in members { < nl > + if m . uid = = Actor . myUid ( ) { < nl > + isAdmin = m . isAdministrator < nl > } < nl > } < nl > - < nl > - / / Can mark as admin < nl > - let canMarkAdmin = isAdmin & & ! d . isAdministrator < nl > - < nl > - if canMarkAdmin { < nl > - a . action ( " GroupMemberMakeAdmin " ) { ( ) - > ( ) in < nl > + } < nl > + < nl > + / / Can mark as admin < nl > + let canMarkAdmin = isAdmin & & ! d . isAdministrator < nl > + < nl > + if canMarkAdmin { < nl > + a . action ( " GroupMemberMakeAdmin " ) { ( ) - > ( ) in < nl > + < nl > + self . confirmDestructive ( AALocalized ( " GroupMemberMakeMessage " ) . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberMakeAction " ) ) { < nl > < nl > - self . confirmDestructive ( AALocalized ( " GroupMemberMakeMessage " ) . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberMakeAction " ) ) { < nl > - < nl > - self . executeSafe ( Actor . makeAdminCommandWithGid ( jint ( self . gid ) , withUid : jint ( user . getId ( ) ) ) ! ) < nl > - } < nl > + self . executeSafe ( Actor . makeAdminCommandWithGid ( jint ( self . gid ) , withUid : jint ( user . getId ( ) ) ) ! ) < nl > } < nl > } < nl > - < nl > - / / Can kick user < nl > - let canKick = isAdmin | | d . inviterUid = = Actor . myUid ( ) < nl > - < nl > - if canKick { < nl > - a . destructive ( " GroupMemberKick " ) { ( ) - > ( ) in < nl > - self . confirmDestructive ( AALocalized ( " GroupMemberKickMessage " ) < nl > - . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberKickAction " ) ) { < nl > - < nl > + } < nl > + < nl > + / / Can kick user < nl > + let canKick = isAdmin | | d . inviterUid = = Actor . myUid ( ) < nl > + < nl > + if canKick { < nl > + a . destructive ( " GroupMemberKick " ) { ( ) - > ( ) in < nl > + self . confirmDestructive ( AALocalized ( " GroupMemberKickMessage " ) < nl > + . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberKickAction " ) ) { < nl > + < nl > self . executeSafe ( Actor . kickMemberCommandWithGid ( jint ( self . gid ) , withUid : user . getId ( ) ) ! ) < nl > - } < nl > } < nl > } < nl > } < nl > + } < nl > < nl > return true < nl > } < nl > @ @ - 326 , 7 + 350 , 6 @ @ public class AAGroupViewController : AAContentTableController { < nl > self . memberRows . data = v . toArray ( ) . toSwiftArray ( ) < nl > self . memberRows . data . sortInPlace ( self . membersSort ) < nl > self . memberRows . reload ( ) < nl > - < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Ringtones / AARingtonesViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Ringtones / AARingtonesViewController . swift < nl > new file mode 100644 < nl > index 0000000 . . 42dc43a < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Ringtones / AARingtonesViewController . swift < nl > @ @ - 0 , 0 + 1 , 169 @ @ < nl > + / / < nl > + / / AARingtonesViewController . swift < nl > + / / ActorSDK < nl > + / / < nl > + / / Created by Alexey Galaev on 5 / 27 / 16 . < nl > + / / Copyright © 2016 Steve Kite . All rights reserved . < nl > + / / < nl > + < nl > + import Foundation < nl > + import UIKit < nl > + import AVFoundation < nl > + < nl > + public class AARingtonesViewController : AATableViewController { < nl > + < nl > + var audioPlayer : AVAudioPlayer ! < nl > + var selectedRingtone : String = " " < nl > + < nl > + init ( ) { < nl > + super . init ( style : UITableViewStyle . Plain ) < nl > + < nl > + self . title = AALocalized ( " Ringtones " ) < nl > + < nl > + let cancelButtonItem = UIBarButtonItem ( title : AALocalized ( " NavigationCancel " ) , style : UIBarButtonItemStyle . Plain , target : self , action : Selector ( " dismiss " ) ) < nl > + let doneButtonItem = UIBarButtonItem ( title : AALocalized ( " NavigationDone " ) , style : UIBarButtonItemStyle . Plain , target : self , action : Selector ( " dismiss " ) ) < nl > + self . navigationItem . setLeftBarButtonItem ( cancelButtonItem , animated : false ) < nl > + self . navigationItem . setRightBarButtonItem ( doneButtonItem , animated : false ) < nl > + } < nl > + < nl > + required public init ( coder aDecoder : NSCoder ) { < nl > + fatalError ( " init ( coder : ) has not been implemented " ) < nl > + } < nl > + < nl > + override public func viewWillDisappear ( animated : Bool ) { < nl > + super . viewWillDisappear ( true ) < nl > + if ( audioPlayer ! = nil & & audioPlayer . playing ) { < nl > + audioPlayer . stop ( ) < nl > + } < nl > + } < nl > + < nl > + override public func viewDidLoad ( ) { < nl > + super . viewDidLoad ( ) < nl > + for directory in rootSoundDirectories { < nl > + directories . append ( directory ) < nl > + < nl > + let newSoundFile : ( directory : String , files : [ String ] ) = ( directory , [ ] ) < nl > + soundFiles . append ( newSoundFile ) < nl > + } < nl > + getDirectories ( ) < nl > + loadSoundFiles ( ) < nl > + tableView . rowHeight = 44 . 0 < nl > + tableView . sectionIndexBackgroundColor = UIColor . clearColor ( ) < nl > + } < nl > + < nl > + let rootSoundDirectories : [ String ] = [ " / Library / Ringtones " / * , " / System / Library / Audio / UISounds " * / ] < nl > + < nl > + var directories : [ String ] = [ ] < nl > + < nl > + var soundFiles : [ ( directory : String , files : [ String ] ) ] = [ ] < nl > + < nl > + override public func didReceiveMemoryWarning ( ) { < nl > + super . didReceiveMemoryWarning ( ) < nl > + } < nl > + < nl > + func getDirectories ( ) { < nl > + let fileManager : NSFileManager = NSFileManager ( ) < nl > + for directory in rootSoundDirectories { < nl > + let directoryURL : NSURL = NSURL ( fileURLWithPath : " \ ( directory ) " , isDirectory : true ) < nl > + < nl > + do { < nl > + if let URLs : [ NSURL ] = try fileManager . contentsOfDirectoryAtURL ( directoryURL , includingPropertiesForKeys : [ NSURLIsDirectoryKey ] , options : NSDirectoryEnumerationOptions ( ) ) { < nl > + var urlIsaDirectory : ObjCBool = ObjCBool ( false ) < nl > + for url in URLs { < nl > + if fileManager . fileExistsAtPath ( url . path ! , isDirectory : & urlIsaDirectory ) { < nl > + if urlIsaDirectory { < nl > + let directory : String = " \ ( url . relativePath ! ) " < nl > + let files : [ String ] = [ ] < nl > + let newSoundFile : ( directory : String , files : [ String ] ) = ( directory , files ) < nl > + directories . append ( " \ ( directory ) " ) < nl > + soundFiles . append ( newSoundFile ) < nl > + } < nl > + } < nl > + } < nl > + } < nl > + } catch { < nl > + debugPrint ( " \ ( error ) " ) < nl > + } < nl > + } < nl > + } < nl > + < nl > + func loadSoundFiles ( ) { < nl > + < nl > + for i in 0 . . . directories . count - 1 { < nl > + let fileManager : NSFileManager = NSFileManager ( ) < nl > + let directoryURL : NSURL = NSURL ( fileURLWithPath : directories [ i ] , isDirectory : true ) < nl > + < nl > + do { < nl > + if let URLs : [ NSURL ] = try fileManager . contentsOfDirectoryAtURL ( directoryURL , includingPropertiesForKeys : [ NSURLIsDirectoryKey ] , options : NSDirectoryEnumerationOptions ( ) ) { < nl > + var urlIsaDirectory : ObjCBool = ObjCBool ( false ) < nl > + for url in URLs { < nl > + if fileManager . fileExistsAtPath ( url . path ! , isDirectory : & urlIsaDirectory ) { < nl > + if ! urlIsaDirectory { < nl > + soundFiles [ i ] . files . append ( " \ ( url . lastPathComponent ! ) " ) < nl > + } < nl > + } < nl > + } < nl > + } < nl > + } catch { < nl > + debugPrint ( " \ ( error ) " ) < nl > + } < nl > + } < nl > + } < nl > + < nl > + override public func numberOfSectionsInTableView ( tableView : UITableView ) - > Int { < nl > + return 1 < nl > + } < nl > + < nl > + override public func tableView ( tableView : UITableView , numberOfRowsInSection section : Int ) - > Int { < nl > + return soundFiles [ section ] . files . count < nl > + } < nl > + < nl > + func tableView ( tableView : UITableView , titleForHeaderInSection section : Int ) - > String ? { < nl > + return " Ringtones " < nl > + } < nl > + < nl > + func tableView ( tableView : UITableView , estimatedHeightForRowAtIndexPath indexPath : NSIndexPath ) - > CGFloat { < nl > + return 44 < nl > + } < nl > + < nl > + func tableView ( tableView : UITableView , heightForRowAtIndexPath indexPath : NSIndexPath ) - > CGFloat { < nl > + return UITableViewAutomaticDimension < nl > + } < nl > + < nl > + override public func tableView ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) - > UITableViewCell { < nl > + < nl > + let fileName : String = soundFiles [ indexPath . section ] . files [ indexPath . row ] < nl > + let cell : AACommonCell = tableView . dequeueCell ( indexPath ) < nl > + cell . style = . Normal < nl > + let name = fileName . componentsSeparatedByString ( " . m4r " ) < nl > + cell . textLabel ? . text = name . first < nl > + return cell < nl > + } < nl > + < nl > + func tableView ( tableView : UITableView , didDeselectRowAtIndexPath indexPath : NSIndexPath ) { < nl > + if let cell = tableView . cellForRowAtIndexPath ( indexPath ) as ? AACommonCell { < nl > + cell . style = . Normal < nl > + } < nl > + } < nl > + < nl > + func tableView ( tableView : UITableView , didSelectRowAtIndexPath indexPath : NSIndexPath ) { < nl > + < nl > + let directory : String = soundFiles [ indexPath . section ] . directory < nl > + let fileName : String = soundFiles [ indexPath . section ] . files [ indexPath . row ] < nl > + let fileURL : NSURL = NSURL ( fileURLWithPath : " \ ( directory ) / \ ( fileName ) " ) < nl > + do { < nl > + audioPlayer = try AVAudioPlayer ( contentsOfURL : fileURL ) < nl > + audioPlayer . play ( ) < nl > + } catch { < nl > + debugPrint ( " \ ( error ) " ) < nl > + } < nl > + let cell = tableView . cellForRowAtIndexPath ( indexPath ) as ! AACommonCell < nl > + selectedRingtone = soundFiles [ indexPath . section ] . files [ indexPath . row ] < nl > + cell . style = . Checkmark < nl > + } < nl > + < nl > + / / func dismissAndSave ( ) { < nl > + / / delegate ? . ringtonesController ( self , currentRingtone : selectedRingtone ) < nl > + / / dismiss ( ) < nl > + / / } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift < nl > index 0313e7d . . 991da1e 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift < nl > @ @ - 170 , 10 + 170 , 29 @ @ class AAUserViewController : AAContentTableController { < nl > } < nl > Actor . changeNotificationsEnabledWithPeer ( peer , withValue : on ) < nl > } < nl > + < nl > + if ( ActorSDK . sharedActor ( ) . enableChatGroupSound ) { < nl > + if ( Actor . isNotificationsEnabledWithPeer ( peer ) ) { < nl > + r . selectAction = { ( ) - > Bool in < nl > + / / Sound : Choose sound < nl > + let setRingtoneController = AARingtonesViewController ( ) < nl > + let navigationController = AANavigationController ( rootViewController : setRingtoneController ) < nl > + if ( AADevice . isiPad ) { < nl > + navigationController . modalInPopover = true < nl > + navigationController . modalPresentationStyle = UIModalPresentationStyle . CurrentContext < nl > + } < nl > + self . presentViewController ( navigationController , animated : true , completion : { < nl > + print ( setRingtoneController . selectedRingtone ) < nl > + / / TODO : implement method to setSond with peer in Messendger . m < nl > + } < nl > + ) < nl > + return false < nl > + } < nl > + } < nl > + } < nl > } < nl > } < nl > - < nl > - < nl > + < nl > / / Edit contact < nl > section { ( s ) - > ( ) in

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 index de2d2a9 . . 0c7bd11 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 @ @ - 346 , 15 + 346 , 8 @ @ import DZNWebViewController 
 tab . viewControllers = self . getMainNavigations ( ) 
 
 if let index = self . delegate . actorRootInitialControllerIndex ( ) { 
 - if index ! = 0 { 
 - tab . selectedIndex = 0 
 - tab . selectedIndex = index 
 - } else { 
 - tab . selectedIndex = 1 
 - tab . selectedIndex = 0 
 - } 
 + tab . selectedIndex = index 
 } else { 
 - tab . selectedIndex = 0 
 tab . selectedIndex = 1 
 } 
 
 @ @ - 514 , 15 + 507 , 8 @ @ import DZNWebViewController 
 tab . viewControllers = self . getMainNavigations ( ) 
 
 if let index = self . delegate . actorRootInitialControllerIndex ( ) { 
 - if index ! = 0 { 
 - tab . selectedIndex = 0 
 - tab . selectedIndex = index 
 - } else { 
 - tab . selectedIndex = 1 
 - tab . selectedIndex = 0 
 - } 
 + tab . selectedIndex = index 
 } else { 
 - tab . selectedIndex = 0 
 tab . selectedIndex = 1 
 } 
 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Recent / AARecentViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Recent / AARecentViewController . swift 
 index 79db86b . . d6a1cb4 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Recent / AARecentViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Recent / AARecentViewController . swift 
 @ @ - 6 , 6 + 6 , 8 @ @ import UIKit 
 
 public class AARecentViewController : AADialogsListContentController , AADialogsListContentControllerDelegate { 
 
 + private var isBinded = true 
 + 
 public override init ( ) { 
 
 super . init ( ) 
 @ @ - 17 , 14 + 19 , 6 @ @ public class AARecentViewController : AADialogsListContentController , AADialogsLi 
 / / Setting delegate 
 
 self . delegate = self 
 - } 
 - 
 - public required init ( coder aDecoder : NSCoder ) { 
 - fatalError ( " init ( coder : ) has not been implemented " ) 
 - } 
 - 
 - public override func viewDidLoad ( ) { 
 - super . viewDidLoad ( ) 
 
 / / Setting UITabBarItem 
 
 @ @ - 36 , 6 + 30 , 12 @ @ public class AARecentViewController : AADialogsListContentController , AADialogsLi 
 navigationItem . leftBarButtonItem = editButtonItem ( ) 
 navigationItem . leftBarButtonItem ! . title = AALocalized ( " NavigationEdit " ) 
 navigationItem . rightBarButtonItem = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . Compose , target : self , action : # selector ( AARecentViewController . compose ) ) 
 + 
 + bindCounter ( ) 
 + } 
 + 
 + public required init ( coder aDecoder : NSCoder ) { 
 + fatalError ( " init ( coder : ) has not been implemented " ) 
 } 
 
 / / Implemention of editing 
 @ @ - 76 , 18 + 76 , 31 @ @ public class AARecentViewController : AADialogsListContentController , AADialogsLi 
 
 public override func viewWillAppear ( animated : Bool ) { 
 super . viewWillAppear ( animated ) 
 - 
 - binder . bind ( Actor . getGlobalState ( ) . globalCounter , closure : { ( value : JavaLangInteger ? ) - > ( ) in 
 - if value ! = nil { 
 - if value ! . integerValue > 0 { 
 - self . tabBarItem . badgeValue = " \ ( value ! . integerValue ) " 
 + bindCounter ( ) 
 + } 
 + 
 + func bindCounter ( ) { 
 + if ! isBinded { 
 + isBinded = true 
 + binder . bind ( Actor . getGlobalState ( ) . globalCounter , closure : { ( value : JavaLangInteger ? ) - > ( ) in 
 + if value ! = nil { 
 + if value ! . integerValue > 0 { 
 + self . tabBarItem . badgeValue = " \ ( value ! . integerValue ) " 
 + } else { 
 + self . tabBarItem . badgeValue = nil 
 + } 
 } else { 
 self . tabBarItem . badgeValue = nil 
 } 
 - } else { 
 - self . tabBarItem . badgeValue = nil 
 - } 
 - } ) 
 + } ) 
 + 
 + } 
 + 
 + } 
 + 
 + public override func viewWillDisappear ( animated : Bool ) { 
 + super . viewWillDisappear ( animated ) 
 + isBinded = false 
 } 
 
 public override func viewDidAppear ( animated : Bool ) {

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index 2cbe2a9 . . c631634 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 336 , 6 + 336 , 7 @ @ 
 	 	 15F89F091C211FED00776ACD / * opus _ types . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15F89F051C211FED00776ACD / * opus _ types . h * / ; } ; 
 	 	 15F89F0A1C211FED00776ACD / * opus . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15F89F061C211FED00776ACD / * opus . h * / ; } ; 
 	 	 9A680E1B1CC3A34800E3CF59 / * AAUnblockActionSheet . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 9A680E1A1CC3A34800E3CF59 / * AAUnblockActionSheet . swift * / ; } ; 
 + 	 	 9AAE96481CF81F140092E366 / * AARingtonesViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 9AAE96471CF81F140092E366 / * AARingtonesViewController . swift * / ; } ; 
 	 	 BDF21708B376E212CEAEC43D / * Pods _ ActorSDK . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 354C3EFA48FBFAEAD0DEEE17 / * Pods _ ActorSDK . framework * / ; } ; 
 	 	 BE237C9D1C422FFA00060648 / * AAStickersKeyboard . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE237C9C1C422FFA00060648 / * AAStickersKeyboard . swift * / ; } ; 
 	 	 BE2621571C4656D700A817AB / * AAConvActionSheet . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / ; } ; 
 @ @ - 715 , 6 + 716 , 7 @ @ 
 	 	 15F89F0F1C21317400776ACD / * es * / = { isa = PBXFileReference ; lastKnownFileType = text . plist . strings ; name = es ; path = es . lproj / Localizable . strings ; sourceTree = " < group > " ; } ; 
 	 	 354C3EFA48FBFAEAD0DEEE17 / * Pods _ ActorSDK . framework * / = { isa = PBXFileReference ; explicitFileType = wrapper . framework ; includeInIndex = 0 ; path = Pods _ ActorSDK . framework ; sourceTree = BUILT _ PRODUCTS _ DIR ; } ; 
 	 	 9A680E1A1CC3A34800E3CF59 / * AAUnblockActionSheet . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAUnblockActionSheet . swift ; sourceTree = " < group > " ; } ; 
 + 	 	 9AAE96471CF81F140092E366 / * AARingtonesViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AARingtonesViewController . swift ; sourceTree = " < group > " ; } ; 
 	 	 BE237C9C1C422FFA00060648 / * AAStickersKeyboard . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAStickersKeyboard . swift ; sourceTree = " < group > " ; } ; 
 	 	 BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAConvActionSheet . swift ; sourceTree = " < group > " ; } ; 
 	 	 BE2621581C4656EE00A817AB / * AAThumbnailView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAThumbnailView . swift ; sourceTree = " < group > " ; } ; 
 @ @ - 1092 , 6 + 1094 , 7 @ @ 
 	 	 066A525F1BC50E53000E606E / * Controllers * / = { 
 	 	 	 isa = PBXGroup ; 
 	 	 	 children = ( 
 + 	 	 	 	 9AAE96461CF81F140092E366 / * Ringtones * / , 
 	 	 	 	 06C1D0751C8BC55100B73632 / * Welcome * / , 
 	 	 	 	 066A52601BC50E6B000E606E / * Auth * / , 
 	 	 	 	 066A52F91BC52FA0000E606E / * Compose * / , 
 @ @ - 1655 , 6 + 1658 , 14 @ @ 
 	 	 	 name = Frameworks ; 
 	 	 	 sourceTree = " < group > " ; 
 	 	 } ; 
 + 	 	 9AAE96461CF81F140092E366 / * Ringtones * / = { 
 + 	 	 	 isa = PBXGroup ; 
 + 	 	 	 children = ( 
 + 	 	 	 	 9AAE96471CF81F140092E366 / * AARingtonesViewController . swift * / , 
 + 	 	 	 ) ; 
 + 	 	 	 path = Ringtones ; 
 + 	 	 	 sourceTree = " < group > " ; 
 + 	 	 } ; 
 	 	 BE2621551C46569800A817AB / * AttachmentView * / = { 
 	 	 	 isa = PBXGroup ; 
 	 	 	 children = ( 
 @ @ - 2134 , 6 + 2145 , 7 @ @ 
 	 	 	 	 066A52591BC4EF61000E606E / * Executions . swift in Sources * / , 
 	 	 	 	 153F6B8A1C2D7BA300C0B960 / * AATapLabelDelegate . swift in Sources * / , 
 	 	 	 	 15D35F5E1C20187E00E3717A / * AANativeAudioPlayer . m in Sources * / , 
 + 	 	 	 	 9AAE96481CF81F140092E366 / * AARingtonesViewController . swift in Sources * / , 
 	 	 	 	 066A52DB1BC52385000E606E / * AAContactActionCell . swift in Sources * / , 
 	 	 	 	 15D35F331C20187200E3717A / * opusfile . c in Sources * / , 
 	 	 	 	 065975391BC7CA7B00B8C7DF / * Bundle . swift in Sources * / , 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 index ce8f5b3 . . c22b65a 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 @ @ - 191 , 6 + 191 , 8 @ @ 
 
 " GroupSetTitle " = " Set Group Title " ; 
 
 + " GroupSetSound " = " Set Group Sound " ; 
 + 
 " GroupEditConfirm " = " Are you sure you want to change the group title ? " ; 
 
 " GroupEditConfirmAction " = " Change Theme " ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 index 477cf6b . . e357baa 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 @ @ - 123 , 6 + 123 , 8 @ @ import DZNWebViewController 
 / / / Enable voice calls feature 
 public var enableCalls : Bool = true 
 
 + / / / Enable custom sound on Groups and Chats 
 + public var enableChatGroupSound : Bool = false 
 
 / / / Enable experimental features 
 public var enableExperimentalFeatures : Bool = false 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 index a411d05 . . eb17d8f 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 @ @ - 23 , 17 + 23 , 17 @ @ public class AAGroupViewController : AAContentTableController { 
 
 self . title = AALocalized ( " ProfileTitle " ) 
 } 
 - 
 + 
 public required init ( coder aDecoder : NSCoder ) { 
 fatalError ( " init ( coder : ) has not been implemented " ) 
 } 
 
 
 public override func tableDidLoad ( ) { 
 - 
 + 
 / / Header 
 section { ( s ) - > ( ) in 
 - 
 + 
 / / Header : Avatar 
 self . headerRow = s . avatar { ( r ) - > ( ) in 
 
 @ @ - 73 , 7 + 73 , 7 @ @ public class AAGroupViewController : AAContentTableController { 
 action : " PhotoRemove " , 
 tapYes : { ( ) - > ( ) in 
 Actor . removeGroupAvatarWithGid ( jint ( self . gid ) ) 
 - } , tapNo : nil ) 
 + } , tapNo : nil ) 
 } else if ( index > = 0 ) { 
 let takePhoto : Bool = ( index = = 0 ) & & hasCamera 
 self . pickAvatar ( takePhoto , closure : { ( image ) - > ( ) in 
 @ @ - 104 , 7 + 104 , 7 @ @ public class AAGroupViewController : AAContentTableController { 
 if t . length = = 0 { 
 return 
 } 
 - 
 + 
 c . executeSafeOnlySuccess ( Actor . editGroupTitleCommandWithGid ( jint ( self . gid ) , withTitle : t ) ! , successBlock : { ( val ) - > Void in 
 c . dismiss ( ) 
 } ) 
 @ @ - 114 , 6 + 114 , 7 @ @ public class AAGroupViewController : AAContentTableController { 
 return true 
 } 
 } 
 + 
 } 
 
 / / Calls 
 @ @ - 133 , 8 + 134 , 10 @ @ public class AAGroupViewController : AAContentTableController { 
 
 / / Notifications 
 section { ( s ) - > ( ) in 
 + 
 + let groupPeer : ACPeer ! = ACPeer . groupWithInt ( jint ( self . gid ) ) 
 + 
 s . common { ( r ) - > ( ) in 
 - let groupPeer : ACPeer ! = ACPeer . groupWithInt ( jint ( self . gid ) ) 
 
 r . style = . Switch 
 r . content = AALocalized ( " GroupNotifications " ) 
 @ @ - 146 , 6 + 149 , 27 @ @ public class AAGroupViewController : AAContentTableController { 
 r . switchAction = { ( on : Bool ) - > ( ) in 
 Actor . changeNotificationsEnabledWithPeer ( groupPeer , withValue : on ) 
 } 
 + if ( ActorSDK . sharedActor ( ) . enableChatGroupSound ) { 
 + if ( Actor . isNotificationsEnabledWithPeer ( groupPeer ) ) { 
 + r . selectAction = { ( ) - > Bool in 
 + / / Sound : Choose sound 
 + let setRingtoneController = AARingtonesViewController ( ) 
 + let navigationController = AANavigationController ( rootViewController : setRingtoneController ) 
 + if ( AADevice . isiPad ) { 
 + navigationController . modalInPopover = true 
 + navigationController . modalPresentationStyle = UIModalPresentationStyle . CurrentContext 
 + } 
 + self . presentViewController ( navigationController , animated : true , completion : { 
 + print ( setRingtoneController . selectedRingtone ) 
 + / / TODO : add - ( void ) changeNotificationSoundWithACPeer : ( ACPeer * ) peer 
 + / / withNSString : ( NSString * ) sound into Messenger . h 
 + } 
 + ) 
 + 
 + return false 
 + } 
 + } 
 + } 
 } 
 } 
 
 @ @ - 185 , 7 + 209 , 7 @ @ public class AAGroupViewController : AAContentTableController { 
 r . bindData = { ( c , d ) - > ( ) in 
 let user = Actor . getUserWithUid ( d . uid ) 
 c . bind ( user , isAdmin : d . isAdministrator ) 
 - 
 + 
 / / Notify to request onlines 
 Actor . onUserVisibleWithUid ( d . uid ) 
 } 
 @ @ - 195 , 13 + 219 , 13 @ @ public class AAGroupViewController : AAContentTableController { 
 if ( user . getId ( ) = = Actor . myUid ( ) ) { 
 return true 
 } 
 - 
 + 
 let name = user . getNameModel ( ) . get ( ) 
 - 
 + 
 self . alertSheet { ( a : AAAlertSetting ) - > ( ) in 
 - 
 + 
 a . cancel = " AlertCancel " 
 - 
 + 
 a . action ( " GroupMemberInfo " ) { ( ) - > ( ) in 
 var controller : AAViewController ! = ActorSDK . sharedActor ( ) . delegate . actorControllerForUser ( Int ( user . getId ( ) ) ) 
 if controller = = nil { 
 @ @ - 209 , 16 + 233 , 16 @ @ public class AAGroupViewController : AAContentTableController { 
 } 
 self . navigateNext ( controller , removeCurrent : false ) 
 } 
 - 
 + 
 a . action ( " GroupMemberWrite " ) { ( ) - > ( ) in 
 if let customController = ActorSDK . sharedActor ( ) . delegate . actorControllerForConversation ( ACPeer . userWithInt ( user . getId ( ) ) ) { 
 self . navigateDetail ( customController ) 
 } else { 
 self . navigateDetail ( ConversationViewController ( peer : ACPeer . userWithInt ( user . getId ( ) ) ) ) 
 - } 
 + } 
 self . popover ? . dismissPopoverAnimated ( true ) 
 } 
 - 
 + 
 a . action ( " GroupMemberCall " , closure : { ( ) - > ( ) in 
 let phones = user . getPhonesModel ( ) . get ( ) 
 if phones . size ( ) = = 0 { 
 @ @ - 227 , 7 + 251 , 7 @ @ public class AAGroupViewController : AAContentTableController { 
 let number = phones . getWithInt ( 0 ) 
 ActorSDK . sharedActor ( ) . openUrl ( " telprompt : / / + \ ( number . phone ) " ) 
 } else { 
 - 
 + 
 var numbers = [ String ] ( ) 
 for i in 0 . . < phones . size ( ) { 
 let p = phones . getWithInt ( i ) 
 @ @ - 243 , 47 + 267 , 47 @ @ public class AAGroupViewController : AAContentTableController { 
 let number = phones . getWithInt ( jint ( index ) ) 
 ActorSDK . sharedActor ( ) . openUrl ( " telprompt : / / + \ ( number . phone ) " ) 
 } 
 - } ) 
 - } 
 - } ) 
 - 
 - / / Detect if we are admin 
 - let members : [ ACGroupMember ] = self . group . members . get ( ) . toArray ( ) . toSwiftArray ( ) 
 - var isAdmin = self . group . creatorId = = Actor . myUid ( ) 
 - if ! isAdmin { 
 - for m in members { 
 - if m . uid = = Actor . myUid ( ) { 
 - isAdmin = m . isAdministrator 
 - } 
 + } ) 
 + } 
 + } ) 
 + 
 + / / Detect if we are admin 
 + let members : [ ACGroupMember ] = self . group . members . get ( ) . toArray ( ) . toSwiftArray ( ) 
 + var isAdmin = self . group . creatorId = = Actor . myUid ( ) 
 + if ! isAdmin { 
 + for m in members { 
 + if m . uid = = Actor . myUid ( ) { 
 + isAdmin = m . isAdministrator 
 } 
 } 
 - 
 - / / Can mark as admin 
 - let canMarkAdmin = isAdmin & & ! d . isAdministrator 
 - 
 - if canMarkAdmin { 
 - a . action ( " GroupMemberMakeAdmin " ) { ( ) - > ( ) in 
 + } 
 + 
 + / / Can mark as admin 
 + let canMarkAdmin = isAdmin & & ! d . isAdministrator 
 + 
 + if canMarkAdmin { 
 + a . action ( " GroupMemberMakeAdmin " ) { ( ) - > ( ) in 
 + 
 + self . confirmDestructive ( AALocalized ( " GroupMemberMakeMessage " ) . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberMakeAction " ) ) { 
 
 - self . confirmDestructive ( AALocalized ( " GroupMemberMakeMessage " ) . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberMakeAction " ) ) { 
 - 
 - self . executeSafe ( Actor . makeAdminCommandWithGid ( jint ( self . gid ) , withUid : jint ( user . getId ( ) ) ) ! ) 
 - } 
 + self . executeSafe ( Actor . makeAdminCommandWithGid ( jint ( self . gid ) , withUid : jint ( user . getId ( ) ) ) ! ) 
 } 
 } 
 - 
 - / / Can kick user 
 - let canKick = isAdmin | | d . inviterUid = = Actor . myUid ( ) 
 - 
 - if canKick { 
 - a . destructive ( " GroupMemberKick " ) { ( ) - > ( ) in 
 - self . confirmDestructive ( AALocalized ( " GroupMemberKickMessage " ) 
 - . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberKickAction " ) ) { 
 - 
 + } 
 + 
 + / / Can kick user 
 + let canKick = isAdmin | | d . inviterUid = = Actor . myUid ( ) 
 + 
 + if canKick { 
 + a . destructive ( " GroupMemberKick " ) { ( ) - > ( ) in 
 + self . confirmDestructive ( AALocalized ( " GroupMemberKickMessage " ) 
 + . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberKickAction " ) ) { 
 + 
 self . executeSafe ( Actor . kickMemberCommandWithGid ( jint ( self . gid ) , withUid : user . getId ( ) ) ! ) 
 - } 
 } 
 } 
 } 
 + } 
 
 return true 
 } 
 @ @ - 326 , 7 + 350 , 6 @ @ public class AAGroupViewController : AAContentTableController { 
 self . memberRows . data = v . toArray ( ) . toSwiftArray ( ) 
 self . memberRows . data . sortInPlace ( self . membersSort ) 
 self . memberRows . reload ( ) 
 - 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Ringtones / AARingtonesViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Ringtones / AARingtonesViewController . swift 
 new file mode 100644 
 index 0000000 . . 42dc43a 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Ringtones / AARingtonesViewController . swift 
 @ @ - 0 , 0 + 1 , 169 @ @ 
 + / / 
 + / / AARingtonesViewController . swift 
 + / / ActorSDK 
 + / / 
 + / / Created by Alexey Galaev on 5 / 27 / 16 . 
 + / / Copyright © 2016 Steve Kite . All rights reserved . 
 + / / 
 + 
 + import Foundation 
 + import UIKit 
 + import AVFoundation 
 + 
 + public class AARingtonesViewController : AATableViewController { 
 + 
 + var audioPlayer : AVAudioPlayer ! 
 + var selectedRingtone : String = " " 
 + 
 + init ( ) { 
 + super . init ( style : UITableViewStyle . Plain ) 
 + 
 + self . title = AALocalized ( " Ringtones " ) 
 + 
 + let cancelButtonItem = UIBarButtonItem ( title : AALocalized ( " NavigationCancel " ) , style : UIBarButtonItemStyle . Plain , target : self , action : Selector ( " dismiss " ) ) 
 + let doneButtonItem = UIBarButtonItem ( title : AALocalized ( " NavigationDone " ) , style : UIBarButtonItemStyle . Plain , target : self , action : Selector ( " dismiss " ) ) 
 + self . navigationItem . setLeftBarButtonItem ( cancelButtonItem , animated : false ) 
 + self . navigationItem . setRightBarButtonItem ( doneButtonItem , animated : false ) 
 + } 
 + 
 + required public init ( coder aDecoder : NSCoder ) { 
 + fatalError ( " init ( coder : ) has not been implemented " ) 
 + } 
 + 
 + override public func viewWillDisappear ( animated : Bool ) { 
 + super . viewWillDisappear ( true ) 
 + if ( audioPlayer ! = nil & & audioPlayer . playing ) { 
 + audioPlayer . stop ( ) 
 + } 
 + } 
 + 
 + override public func viewDidLoad ( ) { 
 + super . viewDidLoad ( ) 
 + for directory in rootSoundDirectories { 
 + directories . append ( directory ) 
 + 
 + let newSoundFile : ( directory : String , files : [ String ] ) = ( directory , [ ] ) 
 + soundFiles . append ( newSoundFile ) 
 + } 
 + getDirectories ( ) 
 + loadSoundFiles ( ) 
 + tableView . rowHeight = 44 . 0 
 + tableView . sectionIndexBackgroundColor = UIColor . clearColor ( ) 
 + } 
 + 
 + let rootSoundDirectories : [ String ] = [ " / Library / Ringtones " / * , " / System / Library / Audio / UISounds " * / ] 
 + 
 + var directories : [ String ] = [ ] 
 + 
 + var soundFiles : [ ( directory : String , files : [ String ] ) ] = [ ] 
 + 
 + override public func didReceiveMemoryWarning ( ) { 
 + super . didReceiveMemoryWarning ( ) 
 + } 
 + 
 + func getDirectories ( ) { 
 + let fileManager : NSFileManager = NSFileManager ( ) 
 + for directory in rootSoundDirectories { 
 + let directoryURL : NSURL = NSURL ( fileURLWithPath : " \ ( directory ) " , isDirectory : true ) 
 + 
 + do { 
 + if let URLs : [ NSURL ] = try fileManager . contentsOfDirectoryAtURL ( directoryURL , includingPropertiesForKeys : [ NSURLIsDirectoryKey ] , options : NSDirectoryEnumerationOptions ( ) ) { 
 + var urlIsaDirectory : ObjCBool = ObjCBool ( false ) 
 + for url in URLs { 
 + if fileManager . fileExistsAtPath ( url . path ! , isDirectory : & urlIsaDirectory ) { 
 + if urlIsaDirectory { 
 + let directory : String = " \ ( url . relativePath ! ) " 
 + let files : [ String ] = [ ] 
 + let newSoundFile : ( directory : String , files : [ String ] ) = ( directory , files ) 
 + directories . append ( " \ ( directory ) " ) 
 + soundFiles . append ( newSoundFile ) 
 + } 
 + } 
 + } 
 + } 
 + } catch { 
 + debugPrint ( " \ ( error ) " ) 
 + } 
 + } 
 + } 
 + 
 + func loadSoundFiles ( ) { 
 + 
 + for i in 0 . . . directories . count - 1 { 
 + let fileManager : NSFileManager = NSFileManager ( ) 
 + let directoryURL : NSURL = NSURL ( fileURLWithPath : directories [ i ] , isDirectory : true ) 
 + 
 + do { 
 + if let URLs : [ NSURL ] = try fileManager . contentsOfDirectoryAtURL ( directoryURL , includingPropertiesForKeys : [ NSURLIsDirectoryKey ] , options : NSDirectoryEnumerationOptions ( ) ) { 
 + var urlIsaDirectory : ObjCBool = ObjCBool ( false ) 
 + for url in URLs { 
 + if fileManager . fileExistsAtPath ( url . path ! , isDirectory : & urlIsaDirectory ) { 
 + if ! urlIsaDirectory { 
 + soundFiles [ i ] . files . append ( " \ ( url . lastPathComponent ! ) " ) 
 + } 
 + } 
 + } 
 + } 
 + } catch { 
 + debugPrint ( " \ ( error ) " ) 
 + } 
 + } 
 + } 
 + 
 + override public func numberOfSectionsInTableView ( tableView : UITableView ) - > Int { 
 + return 1 
 + } 
 + 
 + override public func tableView ( tableView : UITableView , numberOfRowsInSection section : Int ) - > Int { 
 + return soundFiles [ section ] . files . count 
 + } 
 + 
 + func tableView ( tableView : UITableView , titleForHeaderInSection section : Int ) - > String ? { 
 + return " Ringtones " 
 + } 
 + 
 + func tableView ( tableView : UITableView , estimatedHeightForRowAtIndexPath indexPath : NSIndexPath ) - > CGFloat { 
 + return 44 
 + } 
 + 
 + func tableView ( tableView : UITableView , heightForRowAtIndexPath indexPath : NSIndexPath ) - > CGFloat { 
 + return UITableViewAutomaticDimension 
 + } 
 + 
 + override public func tableView ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) - > UITableViewCell { 
 + 
 + let fileName : String = soundFiles [ indexPath . section ] . files [ indexPath . row ] 
 + let cell : AACommonCell = tableView . dequeueCell ( indexPath ) 
 + cell . style = . Normal 
 + let name = fileName . componentsSeparatedByString ( " . m4r " ) 
 + cell . textLabel ? . text = name . first 
 + return cell 
 + } 
 + 
 + func tableView ( tableView : UITableView , didDeselectRowAtIndexPath indexPath : NSIndexPath ) { 
 + if let cell = tableView . cellForRowAtIndexPath ( indexPath ) as ? AACommonCell { 
 + cell . style = . Normal 
 + } 
 + } 
 + 
 + func tableView ( tableView : UITableView , didSelectRowAtIndexPath indexPath : NSIndexPath ) { 
 + 
 + let directory : String = soundFiles [ indexPath . section ] . directory 
 + let fileName : String = soundFiles [ indexPath . section ] . files [ indexPath . row ] 
 + let fileURL : NSURL = NSURL ( fileURLWithPath : " \ ( directory ) / \ ( fileName ) " ) 
 + do { 
 + audioPlayer = try AVAudioPlayer ( contentsOfURL : fileURL ) 
 + audioPlayer . play ( ) 
 + } catch { 
 + debugPrint ( " \ ( error ) " ) 
 + } 
 + let cell = tableView . cellForRowAtIndexPath ( indexPath ) as ! AACommonCell 
 + selectedRingtone = soundFiles [ indexPath . section ] . files [ indexPath . row ] 
 + cell . style = . Checkmark 
 + } 
 + 
 + / / func dismissAndSave ( ) { 
 + / / delegate ? . ringtonesController ( self , currentRingtone : selectedRingtone ) 
 + / / dismiss ( ) 
 + / / } 
 + } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift 
 index 0313e7d . . 991da1e 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift 
 @ @ - 170 , 10 + 170 , 29 @ @ class AAUserViewController : AAContentTableController { 
 } 
 Actor . changeNotificationsEnabledWithPeer ( peer , withValue : on ) 
 } 
 + 
 + if ( ActorSDK . sharedActor ( ) . enableChatGroupSound ) { 
 + if ( Actor . isNotificationsEnabledWithPeer ( peer ) ) { 
 + r . selectAction = { ( ) - > Bool in 
 + / / Sound : Choose sound 
 + let setRingtoneController = AARingtonesViewController ( ) 
 + let navigationController = AANavigationController ( rootViewController : setRingtoneController ) 
 + if ( AADevice . isiPad ) { 
 + navigationController . modalInPopover = true 
 + navigationController . modalPresentationStyle = UIModalPresentationStyle . CurrentContext 
 + } 
 + self . presentViewController ( navigationController , animated : true , completion : { 
 + print ( setRingtoneController . selectedRingtone ) 
 + / / TODO : implement method to setSond with peer in Messendger . m 
 + } 
 + ) 
 + return false 
 + } 
 + } 
 + } 
 } 
 } 
 - 
 - 
 + 
 / / Edit contact 
 section { ( s ) - > ( ) in
