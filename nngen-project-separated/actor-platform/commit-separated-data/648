BLEU SCORE: 0.20969025558524573

TEST MSG: test ( server ) : fixed compilation error
GENERATED MSG: feat ( server ) : don ' t require authIds for bots

TEST DIFF (one line): diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala < nl > index d21d070 . . e031df9 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala < nl > @ @ - 145 , 16 + 145 , 16 @ @ class WebhookHandlerSpec < nl > object Parser extends CommandParser < nl > val commands = sendText map Parser . parseCommand < nl > < nl > - whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 1L , ApiTextMessage ( sendText . head , Vector . empty , None ) ) ) ( _ ⇒ ( ) ) < nl > - whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 2L , GroupServiceMessages . changedTitle ( " xx " ) ) ) ( _ ⇒ ( ) ) < nl > + whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 1L , ApiTextMessage ( sendText . head , Vector . empty , None ) , None ) ) ( _ ⇒ ( ) ) < nl > + whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 2L , GroupServiceMessages . changedTitle ( " xx " ) , None ) ) ( _ ⇒ ( ) ) < nl > < nl > - whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 3L , ApiTextMessage ( sendText ( 1 ) , Vector . empty , None ) ) ) ( _ ⇒ ( ) ) < nl > - whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 4L , ApiJsonMessage ( " Some info " ) ) ) ( _ ⇒ ( ) ) < nl > + whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 3L , ApiTextMessage ( sendText ( 1 ) , Vector . empty , None ) , None ) ) ( _ ⇒ ( ) ) < nl > + whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 4L , ApiJsonMessage ( " Some info " ) , None ) ) ( _ ⇒ ( ) ) < nl > < nl > - whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 5L , ApiTextMessage ( sendText ( 2 ) , Vector . empty , None ) ) ) ( _ ⇒ ( ) ) < nl > - whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 6L , ApiDocumentMessage ( 1L , 2L , 1 , " " , " " , None , None ) ) ) ( _ ⇒ ( ) ) < nl > + whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 5L , ApiTextMessage ( sendText ( 2 ) , Vector . empty , None ) , None ) ) ( _ ⇒ ( ) ) < nl > + whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 6L , ApiDocumentMessage ( 1L , 2L , 1 , " " , " " , None , None ) , None ) ) ( _ ⇒ ( ) ) < nl > < nl > - whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 7L , ApiTextMessage ( sendText ( 3 ) , Vector . empty , None ) ) ) ( _ ⇒ ( ) ) < nl > + whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 7L , ApiTextMessage ( sendText ( 3 ) , Vector . empty , None ) , None ) ) ( _ ⇒ ( ) ) < nl > Thread . sleep ( 4000 ) < nl > < nl > val messages3000 = hook3000 . getMessages
NEAREST DIFF (one line): diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / webhooks / WebhooksHandler . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / webhooks / WebhooksHandler . scala < nl > index 891a5a0 . . 48809f7 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / webhooks / WebhooksHandler . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / webhooks / WebhooksHandler . scala < nl > @ @ - 56 , 19 + 56 , 11 @ @ class WebhooksHandler ( ) ( < nl > userAuth ← optBot . map { bot ⇒ < nl > for { < nl > optGroup ← persist . Group . find ( bot . groupId ) < nl > - authIds ← persist . AuthId . findByUserId ( bot . userId ) < nl > - < nl > - authId ← ( optGroup , authIds ) match { < nl > - case ( None , _ ) ⇒ DBIO . successful ( None ) < nl > - case ( Some ( group ) , auth + : _ ) ⇒ < nl > - DBIO . from ( GroupOffice . sendMessage ( group . id , bot . userId , auth . id , group . accessHash , ThreadLocalRandom . current ( ) . nextLong ( ) , message ) ) < nl > - case ( Some ( group ) , Seq ( ) ) ⇒ < nl > + _ ← optGroup match { < nl > + case None ⇒ DBIO . successful ( None ) < nl > + case Some ( group ) ⇒ < nl > val rng = ThreadLocalRandom . current ( ) < nl > - val authId = rng . nextLong ( ) < nl > - for { < nl > - _ ← persist . AuthId . create ( authId , Some ( bot . userId ) , None ) < nl > - _ ← DBIO . from ( GroupOffice . sendMessage ( group . id , bot . userId , authId , group . accessHash , rng . nextLong ( ) , message ) ) < nl > - } yield ( ) < nl > + DBIO . from ( GroupOffice . sendMessage ( group . id , bot . userId , 0 , group . accessHash , rng . nextLong ( ) , message ) ) < nl > } < nl > } yield ( ) < nl > } . getOrElse ( DBIO . successful ( None ) ) < nl > diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index 54893fc . . df907db 100644 < nl > - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 8 , 6 + 8 , 7 @ @ import scala . concurrent . forkjoin . ThreadLocalRandom < nl > import akka . actor . Status < nl > import akka . pattern . pipe < nl > import akka . util . Timeout < nl > + import com . google . protobuf . ByteString < nl > import com . trueaccord . scalapb . GeneratedMessage < nl > import org . joda . time . DateTime < nl > import slick . driver . PostgresDriver . api . _ < nl > @ @ - 125 , 7 + 126 , 10 @ @ private [ group ] trait GroupCommandHandlers { < nl > } < nl > < nl > for { < nl > - SeqState ( seq , state ) ← UserOffice . deliverOwnMessage ( senderUserId , groupPeer , senderAuthId , randomId , date , message , isFat ) < nl > + SeqState ( seq , state ) ← if ( isBot ( group , senderUserId ) ) < nl > + Future . successful ( SeqState ( 0 , ByteString . EMPTY ) ) < nl > + else < nl > + UserOffice . deliverOwnMessage ( senderUserId , groupPeer , senderAuthId , randomId , date , message , isFat ) < nl > } yield { < nl > db . run ( writeHistoryMessage ( models . Peer . privat ( senderUserId ) , models . Peer . group ( groupPeer . id ) , date , randomId , message . header , message . toByteArray ) ) < nl > SeqStateDate ( seq , state , date . getMillis ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala < nl > index e5b0e9e . . 5945c5d 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala < nl > @ @ - 64 , 7 + 64 , 7 @ @ class WebhookHandlerSpec extends BaseAppSuite with GroupsServiceHelpers with Mes < nl > Thread . sleep ( 1000 ) / / Let peer managers write to db < nl > < nl > whenReady ( db . run ( persist . HistoryMessage . find ( user1 . id , Peer . group ( groupOutPeer . groupId ) ) ) ) { messages ⇒ < nl > - messages should have length 2 < nl > + messages should have length 3 < nl > val botMessage = messages . head < nl > botMessage . senderUserId shouldEqual bot . userId < nl > parseMessage ( botMessage . messageContentData ) shouldEqual Right ( TextMessage ( firstMessage . text , Vector . empty , None ) ) < nl > @ @ - 76 , 7 + 76 , 7 @ @ class WebhookHandlerSpec extends BaseAppSuite with GroupsServiceHelpers with Mes < nl > Thread . sleep ( 100 ) / / Let peer managers write to db < nl > < nl > whenReady ( db . run ( persist . HistoryMessage . find ( user1 . id , Peer . group ( groupOutPeer . groupId ) ) ) ) { messages ⇒ < nl > - messages should have length 3 < nl > + messages should have length 4 < nl > val botMessage = messages . head < nl > botMessage . senderUserId shouldEqual bot . userId < nl > parseMessage ( botMessage . messageContentData ) shouldEqual Right ( TextMessage ( secondMessage . text , Vector . empty , None ) )

TEST DIFF:
diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala 
 index d21d070 . . e031df9 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala 
 @ @ - 145 , 16 + 145 , 16 @ @ class WebhookHandlerSpec 
 object Parser extends CommandParser 
 val commands = sendText map Parser . parseCommand 
 
 - whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 1L , ApiTextMessage ( sendText . head , Vector . empty , None ) ) ) ( _ ⇒ ( ) ) 
 - whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 2L , GroupServiceMessages . changedTitle ( " xx " ) ) ) ( _ ⇒ ( ) ) 
 + whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 1L , ApiTextMessage ( sendText . head , Vector . empty , None ) , None ) ) ( _ ⇒ ( ) ) 
 + whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 2L , GroupServiceMessages . changedTitle ( " xx " ) , None ) ) ( _ ⇒ ( ) ) 
 
 - whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 3L , ApiTextMessage ( sendText ( 1 ) , Vector . empty , None ) ) ) ( _ ⇒ ( ) ) 
 - whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 4L , ApiJsonMessage ( " Some info " ) ) ) ( _ ⇒ ( ) ) 
 + whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 3L , ApiTextMessage ( sendText ( 1 ) , Vector . empty , None ) , None ) ) ( _ ⇒ ( ) ) 
 + whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 4L , ApiJsonMessage ( " Some info " ) , None ) ) ( _ ⇒ ( ) ) 
 
 - whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 5L , ApiTextMessage ( sendText ( 2 ) , Vector . empty , None ) ) ) ( _ ⇒ ( ) ) 
 - whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 6L , ApiDocumentMessage ( 1L , 2L , 1 , " " , " " , None , None ) ) ) ( _ ⇒ ( ) ) 
 + whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 5L , ApiTextMessage ( sendText ( 2 ) , Vector . empty , None ) , None ) ) ( _ ⇒ ( ) ) 
 + whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 6L , ApiDocumentMessage ( 1L , 2L , 1 , " " , " " , None , None ) , None ) ) ( _ ⇒ ( ) ) 
 
 - whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 7L , ApiTextMessage ( sendText ( 3 ) , Vector . empty , None ) ) ) ( _ ⇒ ( ) ) 
 + whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 7L , ApiTextMessage ( sendText ( 3 ) , Vector . empty , None ) , None ) ) ( _ ⇒ ( ) ) 
 Thread . sleep ( 4000 ) 
 
 val messages3000 = hook3000 . getMessages

NEAREST DIFF:
diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / webhooks / WebhooksHandler . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / webhooks / WebhooksHandler . scala 
 index 891a5a0 . . 48809f7 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / webhooks / WebhooksHandler . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / webhooks / WebhooksHandler . scala 
 @ @ - 56 , 19 + 56 , 11 @ @ class WebhooksHandler ( ) ( 
 userAuth ← optBot . map { bot ⇒ 
 for { 
 optGroup ← persist . Group . find ( bot . groupId ) 
 - authIds ← persist . AuthId . findByUserId ( bot . userId ) 
 - 
 - authId ← ( optGroup , authIds ) match { 
 - case ( None , _ ) ⇒ DBIO . successful ( None ) 
 - case ( Some ( group ) , auth + : _ ) ⇒ 
 - DBIO . from ( GroupOffice . sendMessage ( group . id , bot . userId , auth . id , group . accessHash , ThreadLocalRandom . current ( ) . nextLong ( ) , message ) ) 
 - case ( Some ( group ) , Seq ( ) ) ⇒ 
 + _ ← optGroup match { 
 + case None ⇒ DBIO . successful ( None ) 
 + case Some ( group ) ⇒ 
 val rng = ThreadLocalRandom . current ( ) 
 - val authId = rng . nextLong ( ) 
 - for { 
 - _ ← persist . AuthId . create ( authId , Some ( bot . userId ) , None ) 
 - _ ← DBIO . from ( GroupOffice . sendMessage ( group . id , bot . userId , authId , group . accessHash , rng . nextLong ( ) , message ) ) 
 - } yield ( ) 
 + DBIO . from ( GroupOffice . sendMessage ( group . id , bot . userId , 0 , group . accessHash , rng . nextLong ( ) , message ) ) 
 } 
 } yield ( ) 
 } . getOrElse ( DBIO . successful ( None ) ) 
 diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index 54893fc . . df907db 100644 
 - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 8 , 6 + 8 , 7 @ @ import scala . concurrent . forkjoin . ThreadLocalRandom 
 import akka . actor . Status 
 import akka . pattern . pipe 
 import akka . util . Timeout 
 + import com . google . protobuf . ByteString 
 import com . trueaccord . scalapb . GeneratedMessage 
 import org . joda . time . DateTime 
 import slick . driver . PostgresDriver . api . _ 
 @ @ - 125 , 7 + 126 , 10 @ @ private [ group ] trait GroupCommandHandlers { 
 } 
 
 for { 
 - SeqState ( seq , state ) ← UserOffice . deliverOwnMessage ( senderUserId , groupPeer , senderAuthId , randomId , date , message , isFat ) 
 + SeqState ( seq , state ) ← if ( isBot ( group , senderUserId ) ) 
 + Future . successful ( SeqState ( 0 , ByteString . EMPTY ) ) 
 + else 
 + UserOffice . deliverOwnMessage ( senderUserId , groupPeer , senderAuthId , randomId , date , message , isFat ) 
 } yield { 
 db . run ( writeHistoryMessage ( models . Peer . privat ( senderUserId ) , models . Peer . group ( groupPeer . id ) , date , randomId , message . header , message . toByteArray ) ) 
 SeqStateDate ( seq , state , date . getMillis ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala 
 index e5b0e9e . . 5945c5d 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala 
 @ @ - 64 , 7 + 64 , 7 @ @ class WebhookHandlerSpec extends BaseAppSuite with GroupsServiceHelpers with Mes 
 Thread . sleep ( 1000 ) / / Let peer managers write to db 
 
 whenReady ( db . run ( persist . HistoryMessage . find ( user1 . id , Peer . group ( groupOutPeer . groupId ) ) ) ) { messages ⇒ 
 - messages should have length 2 
 + messages should have length 3 
 val botMessage = messages . head 
 botMessage . senderUserId shouldEqual bot . userId 
 parseMessage ( botMessage . messageContentData ) shouldEqual Right ( TextMessage ( firstMessage . text , Vector . empty , None ) ) 
 @ @ - 76 , 7 + 76 , 7 @ @ class WebhookHandlerSpec extends BaseAppSuite with GroupsServiceHelpers with Mes 
 Thread . sleep ( 100 ) / / Let peer managers write to db 
 
 whenReady ( db . run ( persist . HistoryMessage . find ( user1 . id , Peer . group ( groupOutPeer . groupId ) ) ) ) { messages ⇒ 
 - messages should have length 3 
 + messages should have length 4 
 val botMessage = messages . head 
 botMessage . senderUserId shouldEqual bot . userId 
 parseMessage ( botMessage . messageContentData ) shouldEqual Right ( TextMessage ( secondMessage . text , Vector . empty , None ) )
