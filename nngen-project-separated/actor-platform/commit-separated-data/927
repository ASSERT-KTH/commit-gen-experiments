BLEU SCORE: 0.07495553473355841

TEST MSG: wip ( js ) : Working one - way audio in webrtc
GENERATED MSG: feat ( core ) : Implemented peer search methods

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 56efe78 . . cecfeda 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 135 , 25 + 135 , 6 @ @ public class JsFacade implements Exportable { < nl > < nl > messenger = new JsMessenger ( configuration . build ( ) ) ; < nl > < nl > - JsPeerConnection peerConnection = JsPeerConnection . create ( null ) ; < nl > - peerConnection . setListener ( new JsPeerConnectionListener ( ) { < nl > - @ Override < nl > - public void onIceCandidate ( String candidate ) { < nl > - Log . d ( TAG , " OnCandidate : " + candidate ) ; < nl > - } < nl > - } ) ; < nl > - peerConnection . createOffer ( ) . then ( new Consumer < JsSessionDescription > ( ) { < nl > - @ Override < nl > - public void apply ( JsSessionDescription offer ) { < nl > - Log . d ( TAG , " Offer Ok : " + offer ) ; < nl > - } < nl > - } ) . failure ( new Consumer < Exception > ( ) { < nl > - @ Override < nl > - public void apply ( Exception e ) { < nl > - Log . d ( TAG , " Offer failure " ) ; < nl > - } < nl > - } ) ; < nl > - < nl > Log . d ( TAG , " JsMessenger created " ) ; < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java < nl > index c1e728f . . 5f71441 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java < nl > @ @ - 1 , 12 + 1 , 20 @ @ < nl > package im . actor . core . js . providers ; < nl > < nl > + import com . google . gwt . core . client . JsArray ; < nl > + import com . google . gwt . core . client . JsonUtils ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > import im . actor . core . WebRTCProvider ; < nl > import im . actor . core . entity . signals . AbsSignal ; < nl > import im . actor . core . entity . signals . AnswerSignal ; < nl > import im . actor . core . entity . signals . CandidateSignal ; < nl > import im . actor . core . entity . signals . OfferSignal ; < nl > import im . actor . core . js . JsMessenger ; < nl > + import im . actor . core . js . providers . webrtc . JsIceCandidateEvent ; < nl > + import im . actor . core . js . providers . webrtc . JsIceServer ; < nl > import im . actor . core . js . providers . webrtc . JsPeerConnection ; < nl > + import im . actor . core . js . providers . webrtc . JsPeerConnectionConfig ; < nl > import im . actor . core . js . providers . webrtc . JsPeerConnectionListener ; < nl > import im . actor . core . js . providers . webrtc . JsSessionDescription ; < nl > import im . actor . core . js . providers . webrtc . JsStreaming ; < nl > @ @ - 20 , 23 + 28 , 32 @ @ public class JsWebRTCProvider implements WebRTCProvider { < nl > < nl > private JsPeerConnection peerConnection ; < nl > private JsUserMediaStream mediaStream ; < nl > + private boolean isReady = false ; < nl > + private ArrayList < AbsSignal > pendingSignals ; < nl > < nl > @ Override < nl > public void onIncomingCall ( ) { < nl > Log . d ( TAG , " onIncomingCall " ) ; < nl > + pendingSignals = new ArrayList < > ( ) ; < nl > JsMessenger . getInstance ( ) . callAnswer ( ) ; < nl > - peerConnection = JsPeerConnection . create ( null ) ; < nl > + JsArray < JsIceServer > servers = JsArray . createArray ( ) . cast ( ) ; < nl > + servers . push ( JsIceServer . create ( " stun : 62 . 4 . 22 . 219 : 3478 " ) ) ; < nl > + servers . push ( JsIceServer . create ( " turn : 62 . 4 . 22 . 219 : 3478 ? transport = tcp " , " actor " , " password " ) ) ; < nl > + servers . push ( JsIceServer . create ( " turn : 62 . 4 . 22 . 219 : 3478 ? transport = udp " , " actor " , " password " ) ) ; < nl > + peerConnection = JsPeerConnection . create ( JsPeerConnectionConfig . create ( servers ) ) ; < nl > peerConnection . setListener ( new JsPeerConnectionListener ( ) { < nl > @ Override < nl > - public void onIceCandidate ( String candidate ) { < nl > - Log . d ( TAG , " onIceCandidate : " + candidate ) ; < nl > + public void onIceCandidate ( JsIceCandidateEvent candidate ) { < nl > + Log . d ( TAG , " onIceCandidate : " + JsonUtils . stringify ( candidate ) ) ; < nl > + JsMessenger . getInstance ( ) . callSendSignaling ( new CandidateSignal ( candidate . getId ( ) , < nl > + candidate . getLabel ( ) , candidate . getCandidate ( ) ) ) ; < nl > } < nl > } ) ; < nl > JsStreaming . getUserAudio ( ) . then ( new Consumer < JsUserMediaStream > ( ) { < nl > @ Override < nl > public void apply ( JsUserMediaStream jsUserMediaStream ) { < nl > Log . d ( TAG , " Audio is created " ) ; < nl > - peerConnection . setLocalDescription ( JsSessionDescription . create ( jsUserMediaStream ) ) ; < nl > + peerConnection . addStream ( jsUserMediaStream ) ; < nl > } < nl > } ) . failure ( new Consumer < Exception > ( ) { < nl > @ Override < nl > @ @ - 69 , 6 + 86 , 7 @ @ public class JsWebRTCProvider implements WebRTCProvider { < nl > peerConnection . createAnswer ( ) . then ( new Consumer < JsSessionDescription > ( ) { < nl > @ Override < nl > public void apply ( JsSessionDescription jsSessionDescription ) { < nl > + peerConnection . setLocalDescription ( jsSessionDescription ) ; < nl > Log . d ( TAG , " Session desc : " + jsSessionDescription ) ; < nl > JsMessenger . getInstance ( ) . callSendSignaling ( new AnswerSignal ( jsSessionDescription . getSDP ( ) ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsIceCandidateEvent . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsIceCandidateEvent . java < nl > new file mode 100644 < nl > index 0000000 . . 854b8ff < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsIceCandidateEvent . java < nl > @ @ - 0 , 0 + 1 , 24 @ @ < nl > + package im . actor . core . js . providers . webrtc ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsIceCandidateEvent extends JavaScriptObject { < nl > + protected JsIceCandidateEvent ( ) { < nl > + < nl > + } < nl > + < nl > + public final native String getId ( ) / * - { < nl > + if ( this . id = = undefined ) { < nl > + return " " ; < nl > + } < nl > + return this . id ; < nl > + } - * / ; < nl > + < nl > + public final native int getLabel ( ) / * - { < nl > + return this . label ; < nl > + } - * / ; < nl > + < nl > + public final native String getCandidate ( ) / * - { < nl > + return this . candidate ; < nl > + } - * / ; < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java < nl > index 34f9f9c . . 716e2ca 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java < nl > @ @ - 21 , 13 + 21 , 28 @ @ public class JsPeerConnection extends JavaScriptObject { < nl > < nl > public final native void setListener ( JsPeerConnectionListener listener ) / * - { < nl > this . peerConnection . onicecandidate = function ( candidate ) { < nl > - callback . @ im . actor . core . js . providers . webrtc . JsPeerConnectionListener : : onIceCandidate ( * ) ( candidate ) ; < nl > + listener . @ im . actor . core . js . providers . webrtc . JsPeerConnectionListener : : onIceCandidate ( * ) ( candidate ) ; < nl > } ; < nl > } - * / ; < nl > < nl > - public final native void setLocalDescription ( JsSessionDescription description ) / * - { < nl > - this . peerConnection . setLocalDescription ( description ) ; < nl > - } - * / ; < nl > + public final Promise < String > setLocalDescription ( final JsSessionDescription description ) { < nl > + return new Promise < > ( new PromiseFunc < String > ( ) { < nl > + @ Override < nl > + public void exec ( final PromiseResolver < String > resolver ) { < nl > + setLocalDescription ( description , new JsClosure ( ) { < nl > + @ Override < nl > + public void callback ( ) { < nl > + resolver . result ( null ) ; < nl > + } < nl > + } , new JsClosureError ( ) { < nl > + @ Override < nl > + public void onError ( JavaScriptObject error ) { < nl > + resolver . error ( new RuntimeException ( ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) . done ( JsScheduller . scheduller ( ) ) ; < nl > + } < nl > < nl > public final Promise < String > setRemoteDescription ( final JsSessionDescription description ) { < nl > return new Promise < > ( new PromiseFunc < String > ( ) { < nl > @ @ - 48 , 6 + 63 , 10 @ @ public class JsPeerConnection extends JavaScriptObject { < nl > } ) . done ( JsScheduller . scheduller ( ) ) ; < nl > } < nl > < nl > + public final native void addStream ( JsUserMediaStream stream ) / * - { < nl > + this . peerConnection . addStream ( stream ) ; < nl > + } - * / ; < nl > + < nl > public final native void addIceCandidate ( int label , String candidate ) / * - { < nl > this . peerConnection . addIceCandidate ( new RTCIceCandidate ( { sdpMLineIndex : label , candidate : candidate } ) ) ; < nl > } - * / ; < nl > @ @ - 117 , 4 + 136 , 13 @ @ public class JsPeerConnection extends JavaScriptObject { < nl > error . @ im . actor . core . js . entity . JsClosureError : : onError ( * ) ( e ) ; < nl > } ) ; < nl > } - * / ; < nl > + < nl > + public final native void setLocalDescription ( JsSessionDescription description , JsClosure closure , JsClosureError error ) / * - { < nl > + this . peerConnection . setLocalDescription ( description , function ( ) { < nl > + closure . @ im . actor . core . js . entity . JsClosure : : callback ( * ) ( ) ; < nl > + } , function ( e ) { < nl > + $ wnd . console . warn ( e ) ; < nl > + error . @ im . actor . core . js . entity . JsClosureError : : onError ( * ) ( e ) ; < nl > + } ) ; < nl > + } - * / ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java < nl > index 8bdb242 . . 350e482 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java < nl > @ @ - 1 , 5 + 1 , 5 @ @ < nl > package im . actor . core . js . providers . webrtc ; < nl > < nl > public interface JsPeerConnectionListener { < nl > - void onIceCandidate ( String candidate ) ; < nl > + void onIceCandidate ( JsIceCandidateEvent candidate ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java < nl > index 7df0909 . . a6fdb4b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java < nl > @ @ - 8 , 10 + 8 , 6 @ @ public class JsSessionDescription extends JavaScriptObject { < nl > return new RTCSessionDescription ( { type : ' offer ' , sdp : sdp } ) ; < nl > } - * / ; < nl > < nl > - public static native JsSessionDescription create ( JsUserMediaStream stream ) / * - { < nl > - return new RTCSessionDescription ( stream ) ; < nl > - } - * / ; < nl > - < nl > protected JsSessionDescription ( ) { < nl > < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 4583c31 . . 174a996 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 14 , 6 + 14 , 9 @ @ import im . actor . core . * ; < nl > import im . actor . core . api . ApiAuthSession ; < nl > import im . actor . core . entity . MentionFilterResult ; < nl > import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . PeerSearchEntity ; < nl > + import im . actor . core . entity . PeerSearchType ; < nl > + import im . actor . core . entity . PeerType ; < nl > import im . actor . core . js . entity . * ; < nl > import im . actor . core . js . modules . JsBindedValueCallback ; < nl > import im . actor . core . js . providers . JsNotificationsProvider ; < nl > @ @ - 710 , 6 + 713 , 38 @ @ public class JsFacade implements Exportable { < nl > } ) ; < nl > } < nl > < nl > + public JsPromise findGroups ( ) { < nl > + return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > + @ Override < nl > + public void execute ( ) { < nl > + messenger . findPeers ( PeerSearchType . GROUPS ) . start ( new CommandCallback < List < PeerSearchEntity > > ( ) { < nl > + @ Override < nl > + public void onResult ( List < PeerSearchEntity > res ) { < nl > + Log . d ( TAG , " findGroups : result " ) ; < nl > + JsArray < JsPeerSearchResult > jsRes = JsArray . createArray ( ) . cast ( ) ; < nl > + for ( PeerSearchEntity s : res ) { < nl > + if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . GROUP ) { < nl > + jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) , < nl > + s . getDescription ( ) , s . getMembersCount ( ) , ( int ) ( s . getDate ( ) / 1000L ) , < nl > + messenger . buildPeerInfo ( Peer . user ( s . getCreatorUid ( ) ) ) , s . isPublic ( ) , < nl > + s . isJoined ( ) ) ) ; < nl > + } else if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) ) ) ; < nl > + } < nl > + / / jsRes . push ( ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + Log . d ( TAG , " findGroups : error " ) ; < nl > + reject ( e . getMessage ( ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > public void changeMyAvatar ( final JsFile file ) { < nl > String descriptor = provider . registerUploadFile ( file ) ; < nl > messenger . changeMyAvatar ( descriptor ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java < nl > new file mode 100644 < nl > index 0000000 . . d88fe40 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java < nl > @ @ - 0 , 0 + 1 , 21 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsPeerSearchResult extends JavaScriptObject { < nl > + < nl > + public native static JsPeerSearchResult create ( JsPeerInfo peerInfo , String description , < nl > + int membersCount , int created , JsPeerInfo creator , < nl > + boolean isPublic , boolean isJoined ) / * - { < nl > + return { peerInfo : peerInfo , description : description , membersCount : membersCount , created : created , < nl > + isPublic : isPublic , isJoined : isJoined } ; < nl > + } - * / ; < nl > + < nl > + public native static JsPeerSearchResult create ( JsPeerInfo peerInfo ) / * - { < nl > + return { peerInfo : peerInfo } ; < nl > + } - * / ; < nl > + < nl > + protected JsPeerSearchResult ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 63dbbc4 . . b59506e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 18 , 6 + 18 , 8 @ @ import im . actor . core . entity . FileReference ; < nl > import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . MentionFilterResult ; < nl > import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . PeerSearchEntity ; < nl > + import im . actor . core . entity . PeerSearchType ; < nl > import im . actor . core . entity . PublicGroup ; < nl > import im . actor . core . entity . Sex ; < nl > import im . actor . core . entity . User ; < nl > @ @ - 746 , 6 + 748 , 17 @ @ public class Messenger { < nl > return modules . getMentions ( ) . findMentions ( gid , query ) ; < nl > } < nl > < nl > + / * * < nl > + * Finding peers by type < nl > + * < nl > + * @ param type type of peer < nl > + * @ return found peers < nl > + * / < nl > + @ ObjectiveCName ( " findPeersWithType : " ) < nl > + public Command < List < PeerSearchEntity > > findPeers ( PeerSearchType type ) { < nl > + return modules . getSearchModule ( ) . findPeers ( type ) ; < nl > + } < nl > + < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Peer operations < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java < nl > new file mode 100644 < nl > index 0000000 . . 53e6fed < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java < nl > @ @ - 0 , 0 + 1 , 57 @ @ < nl > + package im . actor . core . entity ; < nl > + < nl > + public class PeerSearchEntity { < nl > + < nl > + private Peer peer ; < nl > + private String title ; < nl > + private String description ; < nl > + private Integer membersCount ; < nl > + private Long date ; < nl > + private Integer creatorUid ; < nl > + private Boolean isPublic ; < nl > + private Boolean isJoined ; < nl > + < nl > + public PeerSearchEntity ( Peer peer , String title , String description , Integer membersCount , < nl > + Long date , Integer creatorUid , Boolean isPublic , Boolean isJoined ) { < nl > + this . peer = peer ; < nl > + this . title = title ; < nl > + this . description = description ; < nl > + this . membersCount = membersCount ; < nl > + this . date = date ; < nl > + this . creatorUid = creatorUid ; < nl > + this . isPublic = isPublic ; < nl > + this . isJoined = isJoined ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public String getTitle ( ) { < nl > + return title ; < nl > + } < nl > + < nl > + public String getDescription ( ) { < nl > + return description ; < nl > + } < nl > + < nl > + public Integer getMembersCount ( ) { < nl > + return membersCount ; < nl > + } < nl > + < nl > + public Long getDate ( ) { < nl > + return date ; < nl > + } < nl > + < nl > + public Integer getCreatorUid ( ) { < nl > + return creatorUid ; < nl > + } < nl > + < nl > + public Boolean isPublic ( ) { < nl > + return isPublic ; < nl > + } < nl > + < nl > + public Boolean isJoined ( ) { < nl > + return isJoined ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java < nl > new file mode 100644 < nl > index 0000000 . . 14b4f2b < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java < nl > @ @ - 0 , 0 + 1 , 5 @ @ < nl > + package im . actor . core . entity ; < nl > + < nl > + public enum PeerSearchType { < nl > + CONTACTS , GROUPS , PUBLIC < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java < nl > index 42c9383 . . 6b74816 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java < nl > @ @ - 4 , 19 + 4 , 33 @ @ < nl > < nl > package im . actor . core . modules . internal ; < nl > < nl > + import java . util . ArrayList ; < nl > import java . util . List ; < nl > < nl > + import im . actor . core . api . ApiPeerSearchResult ; < nl > + import im . actor . core . api . ApiSearchCondition ; < nl > + import im . actor . core . api . ApiSearchPeerType ; < nl > + import im . actor . core . api . ApiSearchPeerTypeCondition ; < nl > + import im . actor . core . api . rpc . RequestPeerSearch ; < nl > + import im . actor . core . api . rpc . ResponsePeerSearch ; < nl > import im . actor . core . entity . Dialog ; < nl > + import im . actor . core . entity . PeerSearchEntity ; < nl > + import im . actor . core . entity . PeerSearchType ; < nl > import im . actor . core . entity . SearchEntity ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . Modules ; < nl > import im . actor . core . modules . internal . search . SearchActor ; < nl > + import im . actor . core . network . RpcCallback ; < nl > + import im . actor . core . network . RpcException ; < nl > + import im . actor . core . viewmodel . Command ; < nl > + import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . actors . Props ; < nl > import im . actor . runtime . storage . ListEngine ; < nl > < nl > + import static im . actor . core . modules . internal . messages . entity . EntityConverter . convert ; < nl > import static im . actor . runtime . actors . ActorSystem . system ; < nl > < nl > public class SearchModule extends AbsModule { < nl > @ @ - 55 , 6 + 69 , 57 @ @ public class SearchModule extends AbsModule { < nl > actorRef . send ( new SearchActor . OnContactsUpdated ( res ) ) ; < nl > } < nl > < nl > + public Command < List < PeerSearchEntity > > findPeers ( final PeerSearchType type ) { < nl > + final ApiSearchPeerType apiType ; < nl > + if ( type = = PeerSearchType . GROUPS ) { < nl > + apiType = ApiSearchPeerType . GROUPS ; < nl > + } else if ( type = = PeerSearchType . PUBLIC ) { < nl > + apiType = ApiSearchPeerType . PUBLIC ; < nl > + } else { < nl > + apiType = ApiSearchPeerType . CONTACTS ; < nl > + } < nl > + return new Command < List < PeerSearchEntity > > ( ) { < nl > + @ Override < nl > + public void start ( final CommandCallback < List < PeerSearchEntity > > callback ) { < nl > + ArrayList < ApiSearchCondition > conditions = new ArrayList < ApiSearchCondition > ( ) ; < nl > + conditions . add ( new ApiSearchPeerTypeCondition ( apiType ) ) ; < nl > + request ( new RequestPeerSearch ( conditions ) , new RpcCallback < ResponsePeerSearch > ( ) { < nl > + @ Override < nl > + public void onResult ( final ResponsePeerSearch response ) { < nl > + updates ( ) . executeRelatedResponse ( response . getUsers ( ) , < nl > + response . getGroups ( ) , new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + final ArrayList < PeerSearchEntity > res = new ArrayList < PeerSearchEntity > ( ) ; < nl > + for ( ApiPeerSearchResult r : response . getSearchResults ( ) ) { < nl > + res . add ( new PeerSearchEntity ( convert ( r . getPeer ( ) ) , r . getTitle ( ) , < nl > + r . getDescription ( ) , r . getMembersCount ( ) , r . getDateCreated ( ) , < nl > + r . getCreator ( ) , r . isPublic ( ) , r . isJoined ( ) ) ) ; < nl > + } < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onResult ( res ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( final RpcException e ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( e ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ; < nl > + } < nl > + < nl > public void resetModule ( ) { < nl > actorRef . send ( new SearchActor . Clear ( ) ) ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 56efe78 . . cecfeda 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 135 , 25 + 135 , 6 @ @ public class JsFacade implements Exportable { 
 
 messenger = new JsMessenger ( configuration . build ( ) ) ; 
 
 - JsPeerConnection peerConnection = JsPeerConnection . create ( null ) ; 
 - peerConnection . setListener ( new JsPeerConnectionListener ( ) { 
 - @ Override 
 - public void onIceCandidate ( String candidate ) { 
 - Log . d ( TAG , " OnCandidate : " + candidate ) ; 
 - } 
 - } ) ; 
 - peerConnection . createOffer ( ) . then ( new Consumer < JsSessionDescription > ( ) { 
 - @ Override 
 - public void apply ( JsSessionDescription offer ) { 
 - Log . d ( TAG , " Offer Ok : " + offer ) ; 
 - } 
 - } ) . failure ( new Consumer < Exception > ( ) { 
 - @ Override 
 - public void apply ( Exception e ) { 
 - Log . d ( TAG , " Offer failure " ) ; 
 - } 
 - } ) ; 
 - 
 Log . d ( TAG , " JsMessenger created " ) ; 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java 
 index c1e728f . . 5f71441 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java 
 @ @ - 1 , 12 + 1 , 20 @ @ 
 package im . actor . core . js . providers ; 
 
 + import com . google . gwt . core . client . JsArray ; 
 + import com . google . gwt . core . client . JsonUtils ; 
 + 
 + import java . util . ArrayList ; 
 + 
 import im . actor . core . WebRTCProvider ; 
 import im . actor . core . entity . signals . AbsSignal ; 
 import im . actor . core . entity . signals . AnswerSignal ; 
 import im . actor . core . entity . signals . CandidateSignal ; 
 import im . actor . core . entity . signals . OfferSignal ; 
 import im . actor . core . js . JsMessenger ; 
 + import im . actor . core . js . providers . webrtc . JsIceCandidateEvent ; 
 + import im . actor . core . js . providers . webrtc . JsIceServer ; 
 import im . actor . core . js . providers . webrtc . JsPeerConnection ; 
 + import im . actor . core . js . providers . webrtc . JsPeerConnectionConfig ; 
 import im . actor . core . js . providers . webrtc . JsPeerConnectionListener ; 
 import im . actor . core . js . providers . webrtc . JsSessionDescription ; 
 import im . actor . core . js . providers . webrtc . JsStreaming ; 
 @ @ - 20 , 23 + 28 , 32 @ @ public class JsWebRTCProvider implements WebRTCProvider { 
 
 private JsPeerConnection peerConnection ; 
 private JsUserMediaStream mediaStream ; 
 + private boolean isReady = false ; 
 + private ArrayList < AbsSignal > pendingSignals ; 
 
 @ Override 
 public void onIncomingCall ( ) { 
 Log . d ( TAG , " onIncomingCall " ) ; 
 + pendingSignals = new ArrayList < > ( ) ; 
 JsMessenger . getInstance ( ) . callAnswer ( ) ; 
 - peerConnection = JsPeerConnection . create ( null ) ; 
 + JsArray < JsIceServer > servers = JsArray . createArray ( ) . cast ( ) ; 
 + servers . push ( JsIceServer . create ( " stun : 62 . 4 . 22 . 219 : 3478 " ) ) ; 
 + servers . push ( JsIceServer . create ( " turn : 62 . 4 . 22 . 219 : 3478 ? transport = tcp " , " actor " , " password " ) ) ; 
 + servers . push ( JsIceServer . create ( " turn : 62 . 4 . 22 . 219 : 3478 ? transport = udp " , " actor " , " password " ) ) ; 
 + peerConnection = JsPeerConnection . create ( JsPeerConnectionConfig . create ( servers ) ) ; 
 peerConnection . setListener ( new JsPeerConnectionListener ( ) { 
 @ Override 
 - public void onIceCandidate ( String candidate ) { 
 - Log . d ( TAG , " onIceCandidate : " + candidate ) ; 
 + public void onIceCandidate ( JsIceCandidateEvent candidate ) { 
 + Log . d ( TAG , " onIceCandidate : " + JsonUtils . stringify ( candidate ) ) ; 
 + JsMessenger . getInstance ( ) . callSendSignaling ( new CandidateSignal ( candidate . getId ( ) , 
 + candidate . getLabel ( ) , candidate . getCandidate ( ) ) ) ; 
 } 
 } ) ; 
 JsStreaming . getUserAudio ( ) . then ( new Consumer < JsUserMediaStream > ( ) { 
 @ Override 
 public void apply ( JsUserMediaStream jsUserMediaStream ) { 
 Log . d ( TAG , " Audio is created " ) ; 
 - peerConnection . setLocalDescription ( JsSessionDescription . create ( jsUserMediaStream ) ) ; 
 + peerConnection . addStream ( jsUserMediaStream ) ; 
 } 
 } ) . failure ( new Consumer < Exception > ( ) { 
 @ Override 
 @ @ - 69 , 6 + 86 , 7 @ @ public class JsWebRTCProvider implements WebRTCProvider { 
 peerConnection . createAnswer ( ) . then ( new Consumer < JsSessionDescription > ( ) { 
 @ Override 
 public void apply ( JsSessionDescription jsSessionDescription ) { 
 + peerConnection . setLocalDescription ( jsSessionDescription ) ; 
 Log . d ( TAG , " Session desc : " + jsSessionDescription ) ; 
 JsMessenger . getInstance ( ) . callSendSignaling ( new AnswerSignal ( jsSessionDescription . getSDP ( ) ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsIceCandidateEvent . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsIceCandidateEvent . java 
 new file mode 100644 
 index 0000000 . . 854b8ff 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsIceCandidateEvent . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package im . actor . core . js . providers . webrtc ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsIceCandidateEvent extends JavaScriptObject { 
 + protected JsIceCandidateEvent ( ) { 
 + 
 + } 
 + 
 + public final native String getId ( ) / * - { 
 + if ( this . id = = undefined ) { 
 + return " " ; 
 + } 
 + return this . id ; 
 + } - * / ; 
 + 
 + public final native int getLabel ( ) / * - { 
 + return this . label ; 
 + } - * / ; 
 + 
 + public final native String getCandidate ( ) / * - { 
 + return this . candidate ; 
 + } - * / ; 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java 
 index 34f9f9c . . 716e2ca 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java 
 @ @ - 21 , 13 + 21 , 28 @ @ public class JsPeerConnection extends JavaScriptObject { 
 
 public final native void setListener ( JsPeerConnectionListener listener ) / * - { 
 this . peerConnection . onicecandidate = function ( candidate ) { 
 - callback . @ im . actor . core . js . providers . webrtc . JsPeerConnectionListener : : onIceCandidate ( * ) ( candidate ) ; 
 + listener . @ im . actor . core . js . providers . webrtc . JsPeerConnectionListener : : onIceCandidate ( * ) ( candidate ) ; 
 } ; 
 } - * / ; 
 
 - public final native void setLocalDescription ( JsSessionDescription description ) / * - { 
 - this . peerConnection . setLocalDescription ( description ) ; 
 - } - * / ; 
 + public final Promise < String > setLocalDescription ( final JsSessionDescription description ) { 
 + return new Promise < > ( new PromiseFunc < String > ( ) { 
 + @ Override 
 + public void exec ( final PromiseResolver < String > resolver ) { 
 + setLocalDescription ( description , new JsClosure ( ) { 
 + @ Override 
 + public void callback ( ) { 
 + resolver . result ( null ) ; 
 + } 
 + } , new JsClosureError ( ) { 
 + @ Override 
 + public void onError ( JavaScriptObject error ) { 
 + resolver . error ( new RuntimeException ( ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) . done ( JsScheduller . scheduller ( ) ) ; 
 + } 
 
 public final Promise < String > setRemoteDescription ( final JsSessionDescription description ) { 
 return new Promise < > ( new PromiseFunc < String > ( ) { 
 @ @ - 48 , 6 + 63 , 10 @ @ public class JsPeerConnection extends JavaScriptObject { 
 } ) . done ( JsScheduller . scheduller ( ) ) ; 
 } 
 
 + public final native void addStream ( JsUserMediaStream stream ) / * - { 
 + this . peerConnection . addStream ( stream ) ; 
 + } - * / ; 
 + 
 public final native void addIceCandidate ( int label , String candidate ) / * - { 
 this . peerConnection . addIceCandidate ( new RTCIceCandidate ( { sdpMLineIndex : label , candidate : candidate } ) ) ; 
 } - * / ; 
 @ @ - 117 , 4 + 136 , 13 @ @ public class JsPeerConnection extends JavaScriptObject { 
 error . @ im . actor . core . js . entity . JsClosureError : : onError ( * ) ( e ) ; 
 } ) ; 
 } - * / ; 
 + 
 + public final native void setLocalDescription ( JsSessionDescription description , JsClosure closure , JsClosureError error ) / * - { 
 + this . peerConnection . setLocalDescription ( description , function ( ) { 
 + closure . @ im . actor . core . js . entity . JsClosure : : callback ( * ) ( ) ; 
 + } , function ( e ) { 
 + $ wnd . console . warn ( e ) ; 
 + error . @ im . actor . core . js . entity . JsClosureError : : onError ( * ) ( e ) ; 
 + } ) ; 
 + } - * / ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java 
 index 8bdb242 . . 350e482 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 package im . actor . core . js . providers . webrtc ; 
 
 public interface JsPeerConnectionListener { 
 - void onIceCandidate ( String candidate ) ; 
 + void onIceCandidate ( JsIceCandidateEvent candidate ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java 
 index 7df0909 . . a6fdb4b 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java 
 @ @ - 8 , 10 + 8 , 6 @ @ public class JsSessionDescription extends JavaScriptObject { 
 return new RTCSessionDescription ( { type : ' offer ' , sdp : sdp } ) ; 
 } - * / ; 
 
 - public static native JsSessionDescription create ( JsUserMediaStream stream ) / * - { 
 - return new RTCSessionDescription ( stream ) ; 
 - } - * / ; 
 - 
 protected JsSessionDescription ( ) { 
 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 4583c31 . . 174a996 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 14 , 6 + 14 , 9 @ @ import im . actor . core . * ; 
 import im . actor . core . api . ApiAuthSession ; 
 import im . actor . core . entity . MentionFilterResult ; 
 import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . PeerSearchEntity ; 
 + import im . actor . core . entity . PeerSearchType ; 
 + import im . actor . core . entity . PeerType ; 
 import im . actor . core . js . entity . * ; 
 import im . actor . core . js . modules . JsBindedValueCallback ; 
 import im . actor . core . js . providers . JsNotificationsProvider ; 
 @ @ - 710 , 6 + 713 , 38 @ @ public class JsFacade implements Exportable { 
 } ) ; 
 } 
 
 + public JsPromise findGroups ( ) { 
 + return JsPromise . create ( new JsPromiseExecutor ( ) { 
 + @ Override 
 + public void execute ( ) { 
 + messenger . findPeers ( PeerSearchType . GROUPS ) . start ( new CommandCallback < List < PeerSearchEntity > > ( ) { 
 + @ Override 
 + public void onResult ( List < PeerSearchEntity > res ) { 
 + Log . d ( TAG , " findGroups : result " ) ; 
 + JsArray < JsPeerSearchResult > jsRes = JsArray . createArray ( ) . cast ( ) ; 
 + for ( PeerSearchEntity s : res ) { 
 + if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . GROUP ) { 
 + jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) , 
 + s . getDescription ( ) , s . getMembersCount ( ) , ( int ) ( s . getDate ( ) / 1000L ) , 
 + messenger . buildPeerInfo ( Peer . user ( s . getCreatorUid ( ) ) ) , s . isPublic ( ) , 
 + s . isJoined ( ) ) ) ; 
 + } else if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) ) ) ; 
 + } 
 + / / jsRes . push ( ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void onError ( Exception e ) { 
 + Log . d ( TAG , " findGroups : error " ) ; 
 + reject ( e . getMessage ( ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 public void changeMyAvatar ( final JsFile file ) { 
 String descriptor = provider . registerUploadFile ( file ) ; 
 messenger . changeMyAvatar ( descriptor ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java 
 new file mode 100644 
 index 0000000 . . d88fe40 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsPeerSearchResult extends JavaScriptObject { 
 + 
 + public native static JsPeerSearchResult create ( JsPeerInfo peerInfo , String description , 
 + int membersCount , int created , JsPeerInfo creator , 
 + boolean isPublic , boolean isJoined ) / * - { 
 + return { peerInfo : peerInfo , description : description , membersCount : membersCount , created : created , 
 + isPublic : isPublic , isJoined : isJoined } ; 
 + } - * / ; 
 + 
 + public native static JsPeerSearchResult create ( JsPeerInfo peerInfo ) / * - { 
 + return { peerInfo : peerInfo } ; 
 + } - * / ; 
 + 
 + protected JsPeerSearchResult ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 63dbbc4 . . b59506e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 18 , 6 + 18 , 8 @ @ import im . actor . core . entity . FileReference ; 
 import im . actor . core . entity . Group ; 
 import im . actor . core . entity . MentionFilterResult ; 
 import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . PeerSearchEntity ; 
 + import im . actor . core . entity . PeerSearchType ; 
 import im . actor . core . entity . PublicGroup ; 
 import im . actor . core . entity . Sex ; 
 import im . actor . core . entity . User ; 
 @ @ - 746 , 6 + 748 , 17 @ @ public class Messenger { 
 return modules . getMentions ( ) . findMentions ( gid , query ) ; 
 } 
 
 + / * * 
 + * Finding peers by type 
 + * 
 + * @ param type type of peer 
 + * @ return found peers 
 + * / 
 + @ ObjectiveCName ( " findPeersWithType : " ) 
 + public Command < List < PeerSearchEntity > > findPeers ( PeerSearchType type ) { 
 + return modules . getSearchModule ( ) . findPeers ( type ) ; 
 + } 
 + 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Peer operations 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java 
 new file mode 100644 
 index 0000000 . . 53e6fed 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + package im . actor . core . entity ; 
 + 
 + public class PeerSearchEntity { 
 + 
 + private Peer peer ; 
 + private String title ; 
 + private String description ; 
 + private Integer membersCount ; 
 + private Long date ; 
 + private Integer creatorUid ; 
 + private Boolean isPublic ; 
 + private Boolean isJoined ; 
 + 
 + public PeerSearchEntity ( Peer peer , String title , String description , Integer membersCount , 
 + Long date , Integer creatorUid , Boolean isPublic , Boolean isJoined ) { 
 + this . peer = peer ; 
 + this . title = title ; 
 + this . description = description ; 
 + this . membersCount = membersCount ; 
 + this . date = date ; 
 + this . creatorUid = creatorUid ; 
 + this . isPublic = isPublic ; 
 + this . isJoined = isJoined ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public String getTitle ( ) { 
 + return title ; 
 + } 
 + 
 + public String getDescription ( ) { 
 + return description ; 
 + } 
 + 
 + public Integer getMembersCount ( ) { 
 + return membersCount ; 
 + } 
 + 
 + public Long getDate ( ) { 
 + return date ; 
 + } 
 + 
 + public Integer getCreatorUid ( ) { 
 + return creatorUid ; 
 + } 
 + 
 + public Boolean isPublic ( ) { 
 + return isPublic ; 
 + } 
 + 
 + public Boolean isJoined ( ) { 
 + return isJoined ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java 
 new file mode 100644 
 index 0000000 . . 14b4f2b 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package im . actor . core . entity ; 
 + 
 + public enum PeerSearchType { 
 + CONTACTS , GROUPS , PUBLIC 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java 
 index 42c9383 . . 6b74816 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java 
 @ @ - 4 , 19 + 4 , 33 @ @ 
 
 package im . actor . core . modules . internal ; 
 
 + import java . util . ArrayList ; 
 import java . util . List ; 
 
 + import im . actor . core . api . ApiPeerSearchResult ; 
 + import im . actor . core . api . ApiSearchCondition ; 
 + import im . actor . core . api . ApiSearchPeerType ; 
 + import im . actor . core . api . ApiSearchPeerTypeCondition ; 
 + import im . actor . core . api . rpc . RequestPeerSearch ; 
 + import im . actor . core . api . rpc . ResponsePeerSearch ; 
 import im . actor . core . entity . Dialog ; 
 + import im . actor . core . entity . PeerSearchEntity ; 
 + import im . actor . core . entity . PeerSearchType ; 
 import im . actor . core . entity . SearchEntity ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . Modules ; 
 import im . actor . core . modules . internal . search . SearchActor ; 
 + import im . actor . core . network . RpcCallback ; 
 + import im . actor . core . network . RpcException ; 
 + import im . actor . core . viewmodel . Command ; 
 + import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . actors . Props ; 
 import im . actor . runtime . storage . ListEngine ; 
 
 + import static im . actor . core . modules . internal . messages . entity . EntityConverter . convert ; 
 import static im . actor . runtime . actors . ActorSystem . system ; 
 
 public class SearchModule extends AbsModule { 
 @ @ - 55 , 6 + 69 , 57 @ @ public class SearchModule extends AbsModule { 
 actorRef . send ( new SearchActor . OnContactsUpdated ( res ) ) ; 
 } 
 
 + public Command < List < PeerSearchEntity > > findPeers ( final PeerSearchType type ) { 
 + final ApiSearchPeerType apiType ; 
 + if ( type = = PeerSearchType . GROUPS ) { 
 + apiType = ApiSearchPeerType . GROUPS ; 
 + } else if ( type = = PeerSearchType . PUBLIC ) { 
 + apiType = ApiSearchPeerType . PUBLIC ; 
 + } else { 
 + apiType = ApiSearchPeerType . CONTACTS ; 
 + } 
 + return new Command < List < PeerSearchEntity > > ( ) { 
 + @ Override 
 + public void start ( final CommandCallback < List < PeerSearchEntity > > callback ) { 
 + ArrayList < ApiSearchCondition > conditions = new ArrayList < ApiSearchCondition > ( ) ; 
 + conditions . add ( new ApiSearchPeerTypeCondition ( apiType ) ) ; 
 + request ( new RequestPeerSearch ( conditions ) , new RpcCallback < ResponsePeerSearch > ( ) { 
 + @ Override 
 + public void onResult ( final ResponsePeerSearch response ) { 
 + updates ( ) . executeRelatedResponse ( response . getUsers ( ) , 
 + response . getGroups ( ) , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + final ArrayList < PeerSearchEntity > res = new ArrayList < PeerSearchEntity > ( ) ; 
 + for ( ApiPeerSearchResult r : response . getSearchResults ( ) ) { 
 + res . add ( new PeerSearchEntity ( convert ( r . getPeer ( ) ) , r . getTitle ( ) , 
 + r . getDescription ( ) , r . getMembersCount ( ) , r . getDateCreated ( ) , 
 + r . getCreator ( ) , r . isPublic ( ) , r . isJoined ( ) ) ) ; 
 + } 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onResult ( res ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( final RpcException e ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( e ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + } ; 
 + } 
 + 
 public void resetModule ( ) { 
 actorRef . send ( new SearchActor . Clear ( ) ) ; 
 }
