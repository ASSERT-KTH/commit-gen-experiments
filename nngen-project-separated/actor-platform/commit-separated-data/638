BLEU SCORE: 0.41722614486115056

TEST MSG: fix ( server : rpc ) : add event type to stats
GENERATED MSG: feat ( server : rpc ) : StatsService implementation

TEST DIFF (one line): diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / model / ClientStats . scala b / actor - server / actor - models / src / main / scala / im / actor / server / model / ClientStats . scala < nl > index 127b90d . . 6eafd62 100644 < nl > - - - a / actor - server / actor - models / src / main / scala / im / actor / server / model / ClientStats . scala < nl > + + + b / actor - server / actor - models / src / main / scala / im / actor / server / model / ClientStats . scala < nl > @ @ - 1 , 6 + 1 , 6 @ @ < nl > package im . actor . server . model < nl > < nl > / * * < nl > - * @ param event event type , followed by all other fields , separated by semicolon ( ; ) < nl > + * @ param event event fields , separated by semicolon ( ; ) < nl > * / < nl > - final case class ClientStats ( id : Long , userId : Int , authId : Long , event : String ) < nl > \ No newline at end of file < nl > + final case class ClientStats ( id : Long , userId : Int , authId : Long , eventType : String , event : String ) < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20160321155639 _ _ AddEventTypeToClientStats . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20160321155639 _ _ AddEventTypeToClientStats . sql < nl > new file mode 100644 < nl > index 0000000 . . 8d48d2e < nl > - - - / dev / null < nl > + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20160321155639 _ _ AddEventTypeToClientStats . sql < nl > @ @ - 0 , 0 + 1 , 2 @ @ < nl > + alter table client _ stats add column event _ type varchar ( 255 ) not null ; < nl > + alter table client _ stats rename column event to event _ data ; < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / ClientStatsRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / ClientStatsRepo . scala < nl > index 7c35ef4 . . d7e87a9 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / ClientStatsRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / ClientStatsRepo . scala < nl > @ @ - 7 , 9 + 7 , 10 @ @ final class ClientStatsTable ( tag : Tag ) extends Table [ ClientStats ] ( tag , " client _ s < nl > def id = column [ Long ] ( " id " , O . PrimaryKey ) < nl > def userId = column [ Int ] ( " user _ id " ) < nl > def authId = column [ Long ] ( " auth _ id " ) < nl > - def event = column [ String ] ( " event " ) < nl > + def eventType = column [ String ] ( " event _ type " ) < nl > + def eventData = column [ String ] ( " event _ data " ) < nl > < nl > - def * = ( id , userId , authId , event ) < > ( ClientStats . tupled , ClientStats . unapply ) < nl > + def * = ( id , userId , authId , eventType , eventData ) < > ( ClientStats . tupled , ClientStats . unapply ) < nl > } < nl > < nl > object ClientStatsRepo { < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stats / StatsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stats / StatsServiceImpl . scala < nl > index dc2b1e3 . . 12f9bcb 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stats / StatsServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stats / StatsServiceImpl . scala < nl > @ @ - 27 , 15 + 27 , 15 @ @ final class StatsServiceImpl ( ) ( implicit system : ActorSystem ) extends StatsServic < nl > < nl > private def apiEventToStat ( event : ApiEvent ) ( implicit client : AuthorizedClientData ) : ClientStats = event match { < nl > case ApiAppVisibleChanged ( visible ) ⇒ < nl > - stats ( csv ( List ( " VisibleChanged " , visible . toString ) ) ) < nl > + stats ( " VisibleChanged " , csv ( List ( visible . toString ) ) ) < nl > case ApiContentViewChanged ( contentType , contentId , visible , params ) ⇒ < nl > - stats ( csv ( List ( " ContentViewChanged " , contentType , contentId , visible . toString ) + + stringList ( params ) ) ) < nl > + stats ( " ContentViewChanged " , csv ( List ( contentType , contentId , visible . toString ) + + stringList ( params ) ) ) < nl > case ApiUntypedEvent ( eventType , params ) ⇒ < nl > - stats ( csv ( List ( eventType ) + + stringList ( params ) ) ) < nl > + stats ( eventType , csv ( stringList ( params ) ) ) < nl > } < nl > < nl > - private def stats ( event : String ) ( implicit client : AuthorizedClientData ) = < nl > - ClientStats ( ACLUtils . randomLong ( ) , client . userId , client . authId , event ) < nl > + private def stats ( eventType : String , eventData : String ) ( implicit client : AuthorizedClientData ) = < nl > + ClientStats ( ACLUtils . randomLong ( ) , client . userId , client . authId , eventType , eventData ) < nl > < nl > private def csv ( items : List [ String ] ) = items mkString " ; " < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / StatsServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / StatsServiceSpec . scala < nl > index a11582d . . 77c24cf 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / StatsServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / StatsServiceSpec . scala < nl > @ @ - 34 , 7 + 34 , 7 @ @ class StatsServiceSpec extends BaseAppSuite < nl > stats foreach { s ⇒ < nl > s . userId shouldEqual user . id < nl > s . authId shouldEqual userAuthId < nl > - assert ( s . event . contains ( " VisibleChanged " ) , " Event should contain VisibleChanged " ) < nl > + s . eventType shouldEqual " VisibleChanged " < nl > } < nl > } < nl > } < nl > @ @ - 53 , 10 + 53 , 10 @ @ class StatsServiceSpec extends BaseAppSuite < nl > whenReady ( db . run ( ClientStatsRepo . findByUserId ( user . id ) ) ) { stats ⇒ < nl > stats should have length 1 < nl > val stat = stats . head < nl > + stat . eventType shouldEqual " AppCrash " < nl > < nl > val parts = stat . event split " ; " < nl > - parts ( 0 ) shouldEqual " AppCrash " < nl > - val json = Json . parse ( parts ( 1 ) ) < nl > + val json = Json . parse ( parts ( 0 ) ) < nl > ( json \ " exception " ) . validate [ String ] . asOpt shouldEqual Some ( " NullPointerException " ) < nl > ( json \ " line " ) . validate [ Int ] . asOpt shouldEqual Some ( 24 ) < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / model / ClientStats . scala b / actor - server / actor - models / src / main / scala / im / actor / server / model / ClientStats . scala < nl > new file mode 100644 < nl > index 0000000 . . 127b90d < nl > - - - / dev / null < nl > + + + b / actor - server / actor - models / src / main / scala / im / actor / server / model / ClientStats . scala < nl > @ @ - 0 , 0 + 1 , 6 @ @ < nl > + package im . actor . server . model < nl > + < nl > + / * * < nl > + * @ param event event type , followed by all other fields , separated by semicolon ( ; ) < nl > + * / < nl > + final case class ClientStats ( id : Long , userId : Int , authId : Long , event : String ) < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20160311221657 _ _ AddClientStats . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20160311221657 _ _ AddClientStats . sql < nl > new file mode 100644 < nl > index 0000000 . . a91dea7 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20160311221657 _ _ AddClientStats . sql < nl > @ @ - 0 , 0 + 1 , 9 @ @ < nl > + create table client _ stats ( < nl > + id bigint not null , < nl > + user _ id int not null , < nl > + auth _ id bigint not null , < nl > + event varchar ( 1024 ) not null , < nl > + primary key ( id ) < nl > + ) ; < nl > + create index on client _ stats ( user _ id ) ; < nl > + create index on client _ stats ( auth _ id ) ; < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / ClientStatsRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / ClientStatsRepo . scala < nl > new file mode 100644 < nl > index 0000000 . . 7c35ef4 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / ClientStatsRepo . scala < nl > @ @ - 0 , 0 + 1 , 28 @ @ < nl > + package im . actor . server . persist < nl > + < nl > + import im . actor . server . db . ActorPostgresDriver . api . _ < nl > + import im . actor . server . model . ClientStats < nl > + < nl > + final class ClientStatsTable ( tag : Tag ) extends Table [ ClientStats ] ( tag , " client _ stats " ) { < nl > + def id = column [ Long ] ( " id " , O . PrimaryKey ) < nl > + def userId = column [ Int ] ( " user _ id " ) < nl > + def authId = column [ Long ] ( " auth _ id " ) < nl > + def event = column [ String ] ( " event " ) < nl > + < nl > + def * = ( id , userId , authId , event ) < > ( ClientStats . tupled , ClientStats . unapply ) < nl > + } < nl > + < nl > + object ClientStatsRepo { < nl > + val stats = TableQuery [ ClientStatsTable ] < nl > + < nl > + private def byUserId ( userId : Rep [ Int ] ) = stats . filter ( _ . userId = = = userId ) < nl > + private def byAuthId ( authId : Rep [ Long ] ) = stats . filter ( _ . authId = = = authId ) < nl > + < nl > + private val byUserIdC = Compiled ( byUserId _ ) < nl > + private val byAuthIdC = Compiled ( byAuthId _ ) < nl > + < nl > + def create ( s : Seq [ ClientStats ] ) = stats + + = s < nl > + < nl > + def findByUserId ( userId : Int ) : DBIO [ Seq [ ClientStats ] ] = byUserIdC ( userId ) . result < nl > + def findByAuthId ( authId : Long ) : DBIO [ Seq [ ClientStats ] ] = byAuthIdC ( authId ) . result < nl > + } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stats / StatsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stats / StatsServiceImpl . scala < nl > new file mode 100644 < nl > index 0000000 . . dc2b1e3 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stats / StatsServiceImpl . scala < nl > @ @ - 0 , 0 + 1 , 56 @ @ < nl > + package im . actor . server . api . rpc . service . stats < nl > + < nl > + import akka . actor . ActorSystem < nl > + import im . actor . api . rpc . _ < nl > + import im . actor . api . rpc . ClientData < nl > + import im . actor . api . rpc . collections . ApiRawValue < nl > + import im . actor . api . rpc . collections . { ApiArrayValue , ApiInt32Value , ApiInt64Value , _ } < nl > + import im . actor . api . rpc . misc . ResponseVoid < nl > + import im . actor . api . rpc . stats . _ < nl > + import im . actor . server . acl . ACLUtils < nl > + import im . actor . server . db . DbExtension < nl > + import im . actor . server . model . ClientStats < nl > + import im . actor . server . persist . ClientStatsRepo < nl > + import play . api . libs . json . _ < nl > + < nl > + import scala . concurrent . { ExecutionContext , Future } < nl > + < nl > + final class StatsServiceImpl ( ) ( implicit system : ActorSystem ) extends StatsService { < nl > + implicit protected val ec : ExecutionContext = system . dispatcher < nl > + private val db = DbExtension ( system ) . db < nl > + < nl > + protected def doHandleStoreEvents ( events : IndexedSeq [ ApiEvent ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { < nl > + authorized ( clientData ) { implicit client ⇒ < nl > + db . run ( ClientStatsRepo . create ( events map apiEventToStat ) ) map ( _ ⇒ Ok ( ResponseVoid ) ) < nl > + } < nl > + } < nl > + < nl > + private def apiEventToStat ( event : ApiEvent ) ( implicit client : AuthorizedClientData ) : ClientStats = event match { < nl > + case ApiAppVisibleChanged ( visible ) ⇒ < nl > + stats ( csv ( List ( " VisibleChanged " , visible . toString ) ) ) < nl > + case ApiContentViewChanged ( contentType , contentId , visible , params ) ⇒ < nl > + stats ( csv ( List ( " ContentViewChanged " , contentType , contentId , visible . toString ) + + stringList ( params ) ) ) < nl > + case ApiUntypedEvent ( eventType , params ) ⇒ < nl > + stats ( csv ( List ( eventType ) + + stringList ( params ) ) ) < nl > + } < nl > + < nl > + private def stats ( event : String ) ( implicit client : AuthorizedClientData ) = < nl > + ClientStats ( ACLUtils . randomLong ( ) , client . userId , client . authId , event ) < nl > + < nl > + private def csv ( items : List [ String ] ) = items mkString " ; " < nl > + < nl > + private def stringList ( params : Option [ ApiRawValue ] ) = < nl > + params map ( p ⇒ List ( toJs ( p ) . toString ) ) getOrElse List . empty [ String ] < nl > + < nl > + private def toJs ( raw : ApiRawValue ) : JsValue = raw match { < nl > + case ApiMapValue ( items ) ⇒ < nl > + val fields = items map { case ApiMapValueItem ( key , value ) ⇒ key → toJs ( value ) } < nl > + JsObject ( fields ) < nl > + case ApiStringValue ( t ) ⇒ JsString ( t ) < nl > + case ApiDoubleValue ( d ) ⇒ JsNumber ( d ) < nl > + case ApiInt32Value ( i ) ⇒ JsNumber ( i ) < nl > + case ApiInt64Value ( l ) ⇒ JsNumber ( l ) < nl > + case ApiArrayValue ( values ) ⇒ JsArray ( values map toJs ) < nl > + } < nl > + < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / StatsServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / StatsServiceSpec . scala < nl > new file mode 100644 < nl > index 0000000 . . a11582d < nl > - - - / dev / null < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / StatsServiceSpec . scala < nl > @ @ - 0 , 0 + 1 , 65 @ @ < nl > + package im . actor . server . api . rpc . service < nl > + < nl > + import im . actor . api . rpc . collections . { ApiInt32Value , ApiMapValue , ApiMapValueItem , ApiStringValue } < nl > + import im . actor . api . rpc . stats . { ApiAppVisibleChanged , ApiUntypedEvent } < nl > + import im . actor . api . rpc . { AuthData , ClientData } < nl > + import im . actor . server . api . rpc . service . stats . StatsServiceImpl < nl > + import im . actor . server . persist . ClientStatsRepo < nl > + import im . actor . server . { BaseAppSuite , ImplicitAuthService , ImplicitSessionRegion } < nl > + import play . api . libs . json . Json < nl > + < nl > + class StatsServiceSpec extends BaseAppSuite < nl > + with ImplicitSessionRegion < nl > + with ImplicitAuthService { < nl > + < nl > + behavior of " StatsService " < nl > + < nl > + it should " store events in database " in storeEvents ( ) < nl > + < nl > + it should " store params as json " in storeParamsAsJson ( ) < nl > + < nl > + val service = new StatsServiceImpl < nl > + < nl > + def storeEvents ( ) = { < nl > + val ( user , userAuthId , userAuthSid , _ ) = createUser ( ) < nl > + implicit val aliceClientData = ClientData ( userAuthId , 1 , Some ( AuthData ( user . id , userAuthSid ) ) ) < nl > + < nl > + whenReady ( service . handleStoreEvents ( Vector ( < nl > + ApiAppVisibleChanged ( visible = true ) , < nl > + ApiAppVisibleChanged ( visible = false ) < nl > + ) ) ) ( identity ) < nl > + < nl > + whenReady ( db . run ( ClientStatsRepo . findByUserId ( user . id ) ) ) { stats ⇒ < nl > + stats should have length 2 < nl > + stats foreach { s ⇒ < nl > + s . userId shouldEqual user . id < nl > + s . authId shouldEqual userAuthId < nl > + assert ( s . event . contains ( " VisibleChanged " ) , " Event should contain VisibleChanged " ) < nl > + } < nl > + } < nl > + } < nl > + < nl > + def storeParamsAsJson ( ) = { < nl > + val ( user , userAuthId , userAuthSid , _ ) = createUser ( ) < nl > + implicit val aliceClientData = ClientData ( userAuthId , 1 , Some ( AuthData ( user . id , userAuthSid ) ) ) < nl > + < nl > + whenReady ( service . handleStoreEvents ( Vector ( < nl > + ApiUntypedEvent ( " AppCrash " , Some ( ApiMapValue ( Vector ( < nl > + ApiMapValueItem ( " exception " , ApiStringValue ( " NullPointerException " ) ) , < nl > + ApiMapValueItem ( " line " , ApiInt32Value ( 24 ) ) < nl > + ) ) ) ) < nl > + ) ) ) ( identity ) < nl > + < nl > + whenReady ( db . run ( ClientStatsRepo . findByUserId ( user . id ) ) ) { stats ⇒ < nl > + stats should have length 1 < nl > + val stat = stats . head < nl > + < nl > + val parts = stat . event split " ; " < nl > + parts ( 0 ) shouldEqual " AppCrash " < nl > + val json = Json . parse ( parts ( 1 ) ) < nl > + ( json \ " exception " ) . validate [ String ] . asOpt shouldEqual Some ( " NullPointerException " ) < nl > + ( json \ " line " ) . validate [ Int ] . asOpt shouldEqual Some ( 24 ) < nl > + } < nl > + } < nl > + < nl > + }

TEST DIFF:
diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / model / ClientStats . scala b / actor - server / actor - models / src / main / scala / im / actor / server / model / ClientStats . scala 
 index 127b90d . . 6eafd62 100644 
 - - - a / actor - server / actor - models / src / main / scala / im / actor / server / model / ClientStats . scala 
 + + + b / actor - server / actor - models / src / main / scala / im / actor / server / model / ClientStats . scala 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package im . actor . server . model 
 
 / * * 
 - * @ param event event type , followed by all other fields , separated by semicolon ( ; ) 
 + * @ param event event fields , separated by semicolon ( ; ) 
 * / 
 - final case class ClientStats ( id : Long , userId : Int , authId : Long , event : String ) 
 \ No newline at end of file 
 + final case class ClientStats ( id : Long , userId : Int , authId : Long , eventType : String , event : String ) 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20160321155639 _ _ AddEventTypeToClientStats . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20160321155639 _ _ AddEventTypeToClientStats . sql 
 new file mode 100644 
 index 0000000 . . 8d48d2e 
 - - - / dev / null 
 + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20160321155639 _ _ AddEventTypeToClientStats . sql 
 @ @ - 0 , 0 + 1 , 2 @ @ 
 + alter table client _ stats add column event _ type varchar ( 255 ) not null ; 
 + alter table client _ stats rename column event to event _ data ; 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / ClientStatsRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / ClientStatsRepo . scala 
 index 7c35ef4 . . d7e87a9 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / ClientStatsRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / ClientStatsRepo . scala 
 @ @ - 7 , 9 + 7 , 10 @ @ final class ClientStatsTable ( tag : Tag ) extends Table [ ClientStats ] ( tag , " client _ s 
 def id = column [ Long ] ( " id " , O . PrimaryKey ) 
 def userId = column [ Int ] ( " user _ id " ) 
 def authId = column [ Long ] ( " auth _ id " ) 
 - def event = column [ String ] ( " event " ) 
 + def eventType = column [ String ] ( " event _ type " ) 
 + def eventData = column [ String ] ( " event _ data " ) 
 
 - def * = ( id , userId , authId , event ) < > ( ClientStats . tupled , ClientStats . unapply ) 
 + def * = ( id , userId , authId , eventType , eventData ) < > ( ClientStats . tupled , ClientStats . unapply ) 
 } 
 
 object ClientStatsRepo { 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stats / StatsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stats / StatsServiceImpl . scala 
 index dc2b1e3 . . 12f9bcb 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stats / StatsServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stats / StatsServiceImpl . scala 
 @ @ - 27 , 15 + 27 , 15 @ @ final class StatsServiceImpl ( ) ( implicit system : ActorSystem ) extends StatsServic 
 
 private def apiEventToStat ( event : ApiEvent ) ( implicit client : AuthorizedClientData ) : ClientStats = event match { 
 case ApiAppVisibleChanged ( visible ) ⇒ 
 - stats ( csv ( List ( " VisibleChanged " , visible . toString ) ) ) 
 + stats ( " VisibleChanged " , csv ( List ( visible . toString ) ) ) 
 case ApiContentViewChanged ( contentType , contentId , visible , params ) ⇒ 
 - stats ( csv ( List ( " ContentViewChanged " , contentType , contentId , visible . toString ) + + stringList ( params ) ) ) 
 + stats ( " ContentViewChanged " , csv ( List ( contentType , contentId , visible . toString ) + + stringList ( params ) ) ) 
 case ApiUntypedEvent ( eventType , params ) ⇒ 
 - stats ( csv ( List ( eventType ) + + stringList ( params ) ) ) 
 + stats ( eventType , csv ( stringList ( params ) ) ) 
 } 
 
 - private def stats ( event : String ) ( implicit client : AuthorizedClientData ) = 
 - ClientStats ( ACLUtils . randomLong ( ) , client . userId , client . authId , event ) 
 + private def stats ( eventType : String , eventData : String ) ( implicit client : AuthorizedClientData ) = 
 + ClientStats ( ACLUtils . randomLong ( ) , client . userId , client . authId , eventType , eventData ) 
 
 private def csv ( items : List [ String ] ) = items mkString " ; " 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / StatsServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / StatsServiceSpec . scala 
 index a11582d . . 77c24cf 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / StatsServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / StatsServiceSpec . scala 
 @ @ - 34 , 7 + 34 , 7 @ @ class StatsServiceSpec extends BaseAppSuite 
 stats foreach { s ⇒ 
 s . userId shouldEqual user . id 
 s . authId shouldEqual userAuthId 
 - assert ( s . event . contains ( " VisibleChanged " ) , " Event should contain VisibleChanged " ) 
 + s . eventType shouldEqual " VisibleChanged " 
 } 
 } 
 } 
 @ @ - 53 , 10 + 53 , 10 @ @ class StatsServiceSpec extends BaseAppSuite 
 whenReady ( db . run ( ClientStatsRepo . findByUserId ( user . id ) ) ) { stats ⇒ 
 stats should have length 1 
 val stat = stats . head 
 + stat . eventType shouldEqual " AppCrash " 
 
 val parts = stat . event split " ; " 
 - parts ( 0 ) shouldEqual " AppCrash " 
 - val json = Json . parse ( parts ( 1 ) ) 
 + val json = Json . parse ( parts ( 0 ) ) 
 ( json \ " exception " ) . validate [ String ] . asOpt shouldEqual Some ( " NullPointerException " ) 
 ( json \ " line " ) . validate [ Int ] . asOpt shouldEqual Some ( 24 ) 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / model / ClientStats . scala b / actor - server / actor - models / src / main / scala / im / actor / server / model / ClientStats . scala 
 new file mode 100644 
 index 0000000 . . 127b90d 
 - - - / dev / null 
 + + + b / actor - server / actor - models / src / main / scala / im / actor / server / model / ClientStats . scala 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + package im . actor . server . model 
 + 
 + / * * 
 + * @ param event event type , followed by all other fields , separated by semicolon ( ; ) 
 + * / 
 + final case class ClientStats ( id : Long , userId : Int , authId : Long , event : String ) 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20160311221657 _ _ AddClientStats . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20160311221657 _ _ AddClientStats . sql 
 new file mode 100644 
 index 0000000 . . a91dea7 
 - - - / dev / null 
 + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20160311221657 _ _ AddClientStats . sql 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + create table client _ stats ( 
 + id bigint not null , 
 + user _ id int not null , 
 + auth _ id bigint not null , 
 + event varchar ( 1024 ) not null , 
 + primary key ( id ) 
 + ) ; 
 + create index on client _ stats ( user _ id ) ; 
 + create index on client _ stats ( auth _ id ) ; 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / ClientStatsRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / ClientStatsRepo . scala 
 new file mode 100644 
 index 0000000 . . 7c35ef4 
 - - - / dev / null 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / ClientStatsRepo . scala 
 @ @ - 0 , 0 + 1 , 28 @ @ 
 + package im . actor . server . persist 
 + 
 + import im . actor . server . db . ActorPostgresDriver . api . _ 
 + import im . actor . server . model . ClientStats 
 + 
 + final class ClientStatsTable ( tag : Tag ) extends Table [ ClientStats ] ( tag , " client _ stats " ) { 
 + def id = column [ Long ] ( " id " , O . PrimaryKey ) 
 + def userId = column [ Int ] ( " user _ id " ) 
 + def authId = column [ Long ] ( " auth _ id " ) 
 + def event = column [ String ] ( " event " ) 
 + 
 + def * = ( id , userId , authId , event ) < > ( ClientStats . tupled , ClientStats . unapply ) 
 + } 
 + 
 + object ClientStatsRepo { 
 + val stats = TableQuery [ ClientStatsTable ] 
 + 
 + private def byUserId ( userId : Rep [ Int ] ) = stats . filter ( _ . userId = = = userId ) 
 + private def byAuthId ( authId : Rep [ Long ] ) = stats . filter ( _ . authId = = = authId ) 
 + 
 + private val byUserIdC = Compiled ( byUserId _ ) 
 + private val byAuthIdC = Compiled ( byAuthId _ ) 
 + 
 + def create ( s : Seq [ ClientStats ] ) = stats + + = s 
 + 
 + def findByUserId ( userId : Int ) : DBIO [ Seq [ ClientStats ] ] = byUserIdC ( userId ) . result 
 + def findByAuthId ( authId : Long ) : DBIO [ Seq [ ClientStats ] ] = byAuthIdC ( authId ) . result 
 + } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stats / StatsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stats / StatsServiceImpl . scala 
 new file mode 100644 
 index 0000000 . . dc2b1e3 
 - - - / dev / null 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stats / StatsServiceImpl . scala 
 @ @ - 0 , 0 + 1 , 56 @ @ 
 + package im . actor . server . api . rpc . service . stats 
 + 
 + import akka . actor . ActorSystem 
 + import im . actor . api . rpc . _ 
 + import im . actor . api . rpc . ClientData 
 + import im . actor . api . rpc . collections . ApiRawValue 
 + import im . actor . api . rpc . collections . { ApiArrayValue , ApiInt32Value , ApiInt64Value , _ } 
 + import im . actor . api . rpc . misc . ResponseVoid 
 + import im . actor . api . rpc . stats . _ 
 + import im . actor . server . acl . ACLUtils 
 + import im . actor . server . db . DbExtension 
 + import im . actor . server . model . ClientStats 
 + import im . actor . server . persist . ClientStatsRepo 
 + import play . api . libs . json . _ 
 + 
 + import scala . concurrent . { ExecutionContext , Future } 
 + 
 + final class StatsServiceImpl ( ) ( implicit system : ActorSystem ) extends StatsService { 
 + implicit protected val ec : ExecutionContext = system . dispatcher 
 + private val db = DbExtension ( system ) . db 
 + 
 + protected def doHandleStoreEvents ( events : IndexedSeq [ ApiEvent ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { 
 + authorized ( clientData ) { implicit client ⇒ 
 + db . run ( ClientStatsRepo . create ( events map apiEventToStat ) ) map ( _ ⇒ Ok ( ResponseVoid ) ) 
 + } 
 + } 
 + 
 + private def apiEventToStat ( event : ApiEvent ) ( implicit client : AuthorizedClientData ) : ClientStats = event match { 
 + case ApiAppVisibleChanged ( visible ) ⇒ 
 + stats ( csv ( List ( " VisibleChanged " , visible . toString ) ) ) 
 + case ApiContentViewChanged ( contentType , contentId , visible , params ) ⇒ 
 + stats ( csv ( List ( " ContentViewChanged " , contentType , contentId , visible . toString ) + + stringList ( params ) ) ) 
 + case ApiUntypedEvent ( eventType , params ) ⇒ 
 + stats ( csv ( List ( eventType ) + + stringList ( params ) ) ) 
 + } 
 + 
 + private def stats ( event : String ) ( implicit client : AuthorizedClientData ) = 
 + ClientStats ( ACLUtils . randomLong ( ) , client . userId , client . authId , event ) 
 + 
 + private def csv ( items : List [ String ] ) = items mkString " ; " 
 + 
 + private def stringList ( params : Option [ ApiRawValue ] ) = 
 + params map ( p ⇒ List ( toJs ( p ) . toString ) ) getOrElse List . empty [ String ] 
 + 
 + private def toJs ( raw : ApiRawValue ) : JsValue = raw match { 
 + case ApiMapValue ( items ) ⇒ 
 + val fields = items map { case ApiMapValueItem ( key , value ) ⇒ key → toJs ( value ) } 
 + JsObject ( fields ) 
 + case ApiStringValue ( t ) ⇒ JsString ( t ) 
 + case ApiDoubleValue ( d ) ⇒ JsNumber ( d ) 
 + case ApiInt32Value ( i ) ⇒ JsNumber ( i ) 
 + case ApiInt64Value ( l ) ⇒ JsNumber ( l ) 
 + case ApiArrayValue ( values ) ⇒ JsArray ( values map toJs ) 
 + } 
 + 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / StatsServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / StatsServiceSpec . scala 
 new file mode 100644 
 index 0000000 . . a11582d 
 - - - / dev / null 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / StatsServiceSpec . scala 
 @ @ - 0 , 0 + 1 , 65 @ @ 
 + package im . actor . server . api . rpc . service 
 + 
 + import im . actor . api . rpc . collections . { ApiInt32Value , ApiMapValue , ApiMapValueItem , ApiStringValue } 
 + import im . actor . api . rpc . stats . { ApiAppVisibleChanged , ApiUntypedEvent } 
 + import im . actor . api . rpc . { AuthData , ClientData } 
 + import im . actor . server . api . rpc . service . stats . StatsServiceImpl 
 + import im . actor . server . persist . ClientStatsRepo 
 + import im . actor . server . { BaseAppSuite , ImplicitAuthService , ImplicitSessionRegion } 
 + import play . api . libs . json . Json 
 + 
 + class StatsServiceSpec extends BaseAppSuite 
 + with ImplicitSessionRegion 
 + with ImplicitAuthService { 
 + 
 + behavior of " StatsService " 
 + 
 + it should " store events in database " in storeEvents ( ) 
 + 
 + it should " store params as json " in storeParamsAsJson ( ) 
 + 
 + val service = new StatsServiceImpl 
 + 
 + def storeEvents ( ) = { 
 + val ( user , userAuthId , userAuthSid , _ ) = createUser ( ) 
 + implicit val aliceClientData = ClientData ( userAuthId , 1 , Some ( AuthData ( user . id , userAuthSid ) ) ) 
 + 
 + whenReady ( service . handleStoreEvents ( Vector ( 
 + ApiAppVisibleChanged ( visible = true ) , 
 + ApiAppVisibleChanged ( visible = false ) 
 + ) ) ) ( identity ) 
 + 
 + whenReady ( db . run ( ClientStatsRepo . findByUserId ( user . id ) ) ) { stats ⇒ 
 + stats should have length 2 
 + stats foreach { s ⇒ 
 + s . userId shouldEqual user . id 
 + s . authId shouldEqual userAuthId 
 + assert ( s . event . contains ( " VisibleChanged " ) , " Event should contain VisibleChanged " ) 
 + } 
 + } 
 + } 
 + 
 + def storeParamsAsJson ( ) = { 
 + val ( user , userAuthId , userAuthSid , _ ) = createUser ( ) 
 + implicit val aliceClientData = ClientData ( userAuthId , 1 , Some ( AuthData ( user . id , userAuthSid ) ) ) 
 + 
 + whenReady ( service . handleStoreEvents ( Vector ( 
 + ApiUntypedEvent ( " AppCrash " , Some ( ApiMapValue ( Vector ( 
 + ApiMapValueItem ( " exception " , ApiStringValue ( " NullPointerException " ) ) , 
 + ApiMapValueItem ( " line " , ApiInt32Value ( 24 ) ) 
 + ) ) ) ) 
 + ) ) ) ( identity ) 
 + 
 + whenReady ( db . run ( ClientStatsRepo . findByUserId ( user . id ) ) ) { stats ⇒ 
 + stats should have length 1 
 + val stat = stats . head 
 + 
 + val parts = stat . event split " ; " 
 + parts ( 0 ) shouldEqual " AppCrash " 
 + val json = Json . parse ( parts ( 1 ) ) 
 + ( json \ " exception " ) . validate [ String ] . asOpt shouldEqual Some ( " NullPointerException " ) 
 + ( json \ " line " ) . validate [ Int ] . asOpt shouldEqual Some ( 24 ) 
 + } 
 + } 
 + 
 + }
