BLEU SCORE: 0.16451929399933107

TEST MSG: fix ( server ) : make possible to set empty about and topic for group
GENERATED MSG: feat ( server ) : isHistorySharedgroup flag

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index d11c8c3 . . 9fa5cb7 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 678 , 9 + 678 , 9 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > } < nl > < nl > protected def updateTopic ( cmd : UpdateTopic ) : Unit = { < nl > - def isValidTopic ( topic : Option [ String ] ) = topic . forall ( t ⇒ t . nonEmpty & & t . length < 255 ) < nl > + def isValidTopic ( topic : Option [ String ] ) = topic . forall ( _ . length < 255 ) < nl > < nl > - val topic = cmd . topic map ( _ . trim ) < nl > + val topic = trimToEmpty ( cmd . topic ) < nl > < nl > if ( state . nonMember ( cmd . clientUserId ) ) { < nl > sender ( ) ! notMember < nl > @ @ - 748 , 9 + 748 , 9 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > } < nl > < nl > protected def updateAbout ( cmd : UpdateAbout ) : Unit = { < nl > - def isValidAbout ( about : Option [ String ] ) = about . forall ( a ⇒ a . nonEmpty & & a . length < 255 ) < nl > + def isValidAbout ( about : Option [ String ] ) = about . forall ( _ . length < 255 ) < nl > < nl > - val about = cmd . about map ( _ . trim ) < nl > + val about = trimToEmpty ( cmd . about ) < nl > < nl > if ( ! state . isAdmin ( cmd . clientUserId ) ) { < nl > sender ( ) ! notAdmin < nl > @ @ - 915 , 6 + 915 , 9 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > } < nl > } < nl > < nl > + private def trimToEmpty ( s : Option [ String ] ) : Option [ String ] = < nl > + s map ( _ . trim ) filter ( _ . nonEmpty ) < nl > + < nl > private def getAvatarData ( avatar : Option [ Avatar ] ) : AvatarData = < nl > avatar < nl > . map ( ImageUtils . getAvatarData ( AvatarData . OfGroup , groupId , _ ) )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto < nl > index 36269ae . . 884c72a 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / group . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / group . proto < nl > @ @ - 44 , 6 + 44 , 7 @ @ message GroupCommands { < nl > required string title = 4 ; < nl > repeated int32 user _ ids = 5 ; < nl > optional bool is _ hidden = 7 ; < nl > + optional bool is _ history _ shared = 8 ; < nl > repeated bytes extensions = 6 [ ( scalapb . field ) . type = " im . actor . api . rpc . misc . Extension " ] ; < nl > } < nl > < nl > @ @ - 234 , 6 + 235 , 16 @ @ message GroupQueries { < nl > required bool is _ public = 1 ; < nl > } < nl > < nl > + message IsHistoryShared { < nl > + option ( scalapb . message ) . extends = " im . actor . server . group . GroupQuery " ; < nl > + < nl > + required int32 group _ id = 1 ; < nl > + } < nl > + < nl > + message IsHistorySharedResponse { < nl > + required bool is _ history _ shared = 1 ; < nl > + } < nl > + < nl > message GetAccessHash { < nl > option ( scalapb . message ) . extends = " im . actor . server . group . GroupQuery " ; < nl > < nl > @ @ - 256 , 6 + 267 , 7 @ @ message GroupEvents { < nl > required string title = 4 ; < nl > repeated int32 user _ ids = 6 ; < nl > optional bool is _ hidden = 8 ; < nl > + optional bool is _ history _ shared = 9 ; < nl > repeated bytes extensions = 7 [ ( scalapb . field ) . type = " im . actor . api . rpc . misc . Extension " ] ; < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index f1d804e . . 413e487 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 37 , 11 + 37 , 11 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > import GroupCommands . _ < nl > import GroupEvents . _ < nl > < nl > - protected def createInternal ( typ : GroupType , creatorUserId : Int , title : String , userIds : Seq [ Int ] , isHidden : Option [ Boolean ] , extensions : Seq [ Extension ] = Seq . empty ) : Unit = { < nl > + protected def createInternal ( typ : GroupType , creatorUserId : Int , title : String , userIds : Seq [ Int ] , isHidden : Option [ Boolean ] , isHistoryShared : Option [ Boolean ] , extensions : Seq [ Extension ] = Seq . empty ) : Unit = { < nl > val accessHash = genAccessHash ( ) < nl > < nl > val date = now ( ) < nl > - val created = GroupEvents . Created ( groupId , Some ( typ ) , creatorUserId , accessHash , title , ( userIds . toSet + creatorUserId ) . toSeq , isHidden , extensions ) < nl > + val created = GroupEvents . Created ( groupId , Some ( typ ) , creatorUserId , accessHash , title , ( userIds . toSet + creatorUserId ) . toSeq , isHidden , isHistoryShared , extensions ) < nl > val state = initState ( date , created ) < nl > < nl > persist ( TSEvent ( date , created ) ) { _ ⇒ < nl > @ @ - 75 , 7 + 75 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > < nl > val date = now ( ) < nl > < nl > - val created = GroupEvents . Created ( groupId , Some ( typ ) , creatorUserId , accessHash , title , Seq ( creatorUserId ) , isHidden = Some ( false ) ) < nl > + val created = GroupEvents . Created ( groupId , Some ( typ ) , creatorUserId , accessHash , title , Seq ( creatorUserId ) , isHidden = Some ( false ) , isHistoryShared = Some ( false ) ) < nl > val state = initState ( date , created ) < nl > < nl > persist ( TSEvent ( date , created ) ) { _ ⇒ < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > index 571d9d5 . . 2803b95 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > @ @ - 163 , 6 + 163 , 13 @ @ private [ group ] sealed trait Queries { < nl > ec : ExecutionContext < nl > ) : Future [ Boolean ] = ( region . ref ? IsPublic ( groupId ) ) . mapTo [ IsPublicResponse ] map ( _ . isPublic ) < nl > < nl > + def isHistoryShared ( groupId : Int ) ( < nl > + implicit < nl > + region : GroupViewRegion , < nl > + timeout : Timeout , < nl > + ec : ExecutionContext < nl > + ) : Future [ Boolean ] = ( region . ref ? IsHistoryShared ( groupId ) ) . mapTo [ IsHistorySharedResponse ] map ( _ . isHistoryShared ) < nl > + < nl > def checkAccessHash ( groupId : Int , hash : Long ) ( < nl > implicit < nl > region : GroupViewRegion , < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > index 7c0312d . . 4148774 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > @ @ - 36 , 20 + 36 , 21 @ @ private [ group ] case class Bot ( < nl > ) < nl > < nl > private [ group ] case class Group ( < nl > - id : Int , < nl > - typ : GroupType , < nl > - accessHash : Long , < nl > - creatorUserId : Int , < nl > - createdAt : DateTime , < nl > - members : Map [ Int , Member ] , < nl > - invitedUserIds : Set [ Int ] , < nl > - title : String , < nl > - about : Option [ String ] , < nl > - bot : Option [ Bot ] , < nl > - avatar : Option [ Avatar ] , < nl > - topic : Option [ String ] , < nl > - isHidden : Boolean , < nl > - extensions : Seq [ Extension ] < nl > + id : Int , < nl > + typ : GroupType , < nl > + accessHash : Long , < nl > + creatorUserId : Int , < nl > + createdAt : DateTime , < nl > + members : Map [ Int , Member ] , < nl > + invitedUserIds : Set [ Int ] , < nl > + title : String , < nl > + about : Option [ String ] , < nl > + bot : Option [ Bot ] , < nl > + avatar : Option [ Avatar ] , < nl > + topic : Option [ String ] , < nl > + isHidden : Boolean , < nl > + isHistoryShared : Boolean , < nl > + extensions : Seq [ Extension ] < nl > ) extends ProcessorState < nl > < nl > trait GroupCommand { < nl > @ @ - 98 , 6 + 99 , 8 @ @ object GroupProcessor { < nl > 21011 → classOf [ GroupQueries . GetIntegrationTokenInternal ] , < nl > 21012 → classOf [ GroupQueries . GetAccessHash ] , < nl > 21013 → classOf [ GroupQueries . GetAccessHashResponse ] , < nl > + 21014 → classOf [ GroupQueries . IsHistoryShared ] , < nl > + 21015 → classOf [ GroupQueries . IsHistorySharedResponse ] , < nl > < nl > 22003 → classOf [ GroupEvents . UserInvited ] , < nl > 22004 → classOf [ GroupEvents . UserJoined ] , < nl > @ @ - 175 , 7 + 178 , 7 @ @ private [ group ] final class GroupProcessor < nl > case TSEvent ( _ , GroupEvents . TitleUpdated ( title ) ) ⇒ < nl > state . copy ( title = title ) < nl > case TSEvent ( _ , GroupEvents . BecamePublic ( ) ) ⇒ < nl > - state . copy ( typ = GroupType . Public ) < nl > + state . copy ( typ = GroupType . Public , isHistoryShared = true ) < nl > case TSEvent ( _ , GroupEvents . AboutUpdated ( about ) ) ⇒ < nl > state . copy ( about = about ) < nl > case TSEvent ( _ , GroupEvents . TopicUpdated ( topic ) ) ⇒ < nl > @ @ - 195 , 13 + 198 , 14 @ @ private [ group ] final class GroupProcessor < nl > case GroupQueries . GetMembers ( _ ) ⇒ getMembers ( state ) < nl > case GroupQueries . IsPublic ( _ ) ⇒ isPublic ( state ) < nl > case GroupQueries . GetAccessHash ( _ ) ⇒ getAccessHash ( state ) < nl > + case GroupQueries . IsHistoryShared ( _ ) ⇒ isHistoryShared ( state ) < nl > } < nl > < nl > override def handleInitCommand : Receive = { < nl > case Create ( _ , typ , creatorUserId , creatorAuthId , title , randomId , userIds ) ⇒ < nl > create ( groupId , typ , creatorUserId , creatorAuthId , title , randomId , userIds . toSet ) < nl > - case CreateInternal ( _ , typ , creatorUserId , title , userIds , isHidden , extensions ) ⇒ < nl > - createInternal ( typ , creatorUserId , title , userIds , isHidden , extensions ) < nl > + case CreateInternal ( _ , typ , creatorUserId , title , userIds , isHidden , isHistoryShared , extensions ) ⇒ < nl > + createInternal ( typ , creatorUserId , title , userIds , isHidden , isHistoryShared , extensions ) < nl > } < nl > < nl > override def handleCommand ( state : Group ) : Receive = { < nl > @ @ - 279 , 6 + 283 , 7 @ @ private [ group ] final class GroupProcessor < nl > avatar = None , < nl > topic = None , < nl > isHidden = evt . isHidden . getOrElse ( false ) , < nl > + isHistoryShared = evt . isHistoryShared . getOrElse ( false ) , < nl > extensions = evt . extensions < nl > ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > index a2cc6b8 . . 8719ec4 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > @ @ - 65 , 4 + 65 , 6 @ @ private [ group ] trait GroupQueryHandlers extends GroupCommandHelpers { < nl > def getAccessHash ( group : Group ) : Unit = < nl > sender ( ) ! GetAccessHashResponse ( group . accessHash ) < nl > < nl > + def isHistoryShared ( group : Group ) : Unit = < nl > + sender ( ) ! IsHistorySharedResponse ( group . isHistoryShared ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / history / HistoryUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / history / HistoryUtils . scala < nl > index cbce5bd . . c3fce5d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / history / HistoryUtils . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / history / HistoryUtils . scala < nl > @ @ - 1 , 7 + 1 , 9 @ @ < nl > package im . actor . server . history < nl > < nl > + import akka . actor . ActorSystem < nl > + import akka . util . Timeout < nl > import im . actor . api . rpc . AuthorizedClientData < nl > - import im . actor . server . group . GroupUtils < nl > + import im . actor . server . group . { GroupExtension , GroupOffice , GroupUtils } < nl > import im . actor . server . { models , persist } < nl > import org . joda . time . DateTime < nl > import slick . dbio . DBIO < nl > @ @ - 25 , 7 + 27 , 9 @ @ object HistoryUtils { < nl > messageContentData : Array [ Byte ] < nl > ) ( < nl > implicit < nl > - ec : ExecutionContext < nl > + ec : ExecutionContext , < nl > + system : ActorSystem , < nl > + timeout : Timeout < nl > ) : DBIO [ Unit ] = { < nl > requirePrivatePeer ( fromPeer ) < nl > / / requireDifferentPeers ( fromPeer , toPeer ) < nl > @ @ - 58 , 9 + 62 , 10 @ @ object HistoryUtils { < nl > res ← persist . Dialog . updateLastMessageDate ( toPeer . id , fromPeer , date ) < nl > } yield ( ) < nl > } else if ( toPeer . typ = = models . PeerType . Group ) { < nl > - withGroup ( toPeer . id ) { group ⇒ < nl > - withGroupUserIds ( group . id ) { groupUserIds ⇒ < nl > - if ( group . isPublic ) { < nl > + implicit val groupViewRegion = GroupExtension ( system ) . viewRegion < nl > + DBIO . from ( GroupOffice . isHistoryShared ( toPeer . id ) ) flatMap { isHistoryShared ⇒ < nl > + withGroupUserIds ( toPeer . id ) { groupUserIds ⇒ < nl > + if ( isHistoryShared ) { < nl > val historyMessage = models . HistoryMessage ( sharedUserId , toPeer , date , fromPeer . id , randomId , messageContentHeader , messageContentData , None ) < nl > < nl > for { < nl > @ @ - 137 , 14 + 142 , 17 @ @ object HistoryUtils { < nl > < nl > def withHistoryOwner [ A ] ( peer : models . Peer ) ( f : Int ⇒ DBIO [ A ] ) ( < nl > implicit < nl > - ec : ExecutionContext , < nl > - client : AuthorizedClientData < nl > + ec : ExecutionContext , < nl > + system : ActorSystem , < nl > + timeout : Timeout , < nl > + client : AuthorizedClientData < nl > ) : DBIO [ A ] = { < nl > ( peer . typ match { < nl > case models . PeerType . Private ⇒ DBIO . successful ( client . userId ) < nl > case models . PeerType . Group ⇒ < nl > - withGroup ( peer . id ) { group ⇒ < nl > - if ( group . isPublic ) { < nl > + implicit val groupViewRegion = GroupExtension ( system ) . viewRegion < nl > + DBIO . from ( GroupOffice . isHistoryShared ( peer . id ) ) flatMap { isHistoryShared ⇒ < nl > + if ( isHistoryShared ) { < nl > DBIO . successful ( sharedUserId ) < nl > } else { < nl > DBIO . successful ( client . userId ) < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > index a829577 . . fbb7a0a 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > @ @ - 84 , 7 + 84 , 7 @ @ trait HistoryHandlers { < nl > if ( peer . ` type ` = = PeerType . Private ) { < nl > DBIO . successful ( true ) < nl > } else { < nl > - withGroup ( peer . id ) ( g ⇒ DBIO . successful ( ! g . isPublic ) ) < nl > + DBIO . from ( GroupOffice . isHistoryShared ( peer . id ) ) flatMap ( isHistoryShared ⇒ DBIO . successful ( ! isHistoryShared ) ) < nl > } < nl > } < nl > _ ← fromDBIO ( persist . HistoryMessage . deleteAll ( client . userId , peer . asModel ) )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index d11c8c3 . . 9fa5cb7 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 678 , 9 + 678 , 9 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 } 
 
 protected def updateTopic ( cmd : UpdateTopic ) : Unit = { 
 - def isValidTopic ( topic : Option [ String ] ) = topic . forall ( t ⇒ t . nonEmpty & & t . length < 255 ) 
 + def isValidTopic ( topic : Option [ String ] ) = topic . forall ( _ . length < 255 ) 
 
 - val topic = cmd . topic map ( _ . trim ) 
 + val topic = trimToEmpty ( cmd . topic ) 
 
 if ( state . nonMember ( cmd . clientUserId ) ) { 
 sender ( ) ! notMember 
 @ @ - 748 , 9 + 748 , 9 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 } 
 
 protected def updateAbout ( cmd : UpdateAbout ) : Unit = { 
 - def isValidAbout ( about : Option [ String ] ) = about . forall ( a ⇒ a . nonEmpty & & a . length < 255 ) 
 + def isValidAbout ( about : Option [ String ] ) = about . forall ( _ . length < 255 ) 
 
 - val about = cmd . about map ( _ . trim ) 
 + val about = trimToEmpty ( cmd . about ) 
 
 if ( ! state . isAdmin ( cmd . clientUserId ) ) { 
 sender ( ) ! notAdmin 
 @ @ - 915 , 6 + 915 , 9 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 } 
 } 
 
 + private def trimToEmpty ( s : Option [ String ] ) : Option [ String ] = 
 + s map ( _ . trim ) filter ( _ . nonEmpty ) 
 + 
 private def getAvatarData ( avatar : Option [ Avatar ] ) : AvatarData = 
 avatar 
 . map ( ImageUtils . getAvatarData ( AvatarData . OfGroup , groupId , _ ) )

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto 
 index 36269ae . . 884c72a 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / group . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / group . proto 
 @ @ - 44 , 6 + 44 , 7 @ @ message GroupCommands { 
 required string title = 4 ; 
 repeated int32 user _ ids = 5 ; 
 optional bool is _ hidden = 7 ; 
 + optional bool is _ history _ shared = 8 ; 
 repeated bytes extensions = 6 [ ( scalapb . field ) . type = " im . actor . api . rpc . misc . Extension " ] ; 
 } 
 
 @ @ - 234 , 6 + 235 , 16 @ @ message GroupQueries { 
 required bool is _ public = 1 ; 
 } 
 
 + message IsHistoryShared { 
 + option ( scalapb . message ) . extends = " im . actor . server . group . GroupQuery " ; 
 + 
 + required int32 group _ id = 1 ; 
 + } 
 + 
 + message IsHistorySharedResponse { 
 + required bool is _ history _ shared = 1 ; 
 + } 
 + 
 message GetAccessHash { 
 option ( scalapb . message ) . extends = " im . actor . server . group . GroupQuery " ; 
 
 @ @ - 256 , 6 + 267 , 7 @ @ message GroupEvents { 
 required string title = 4 ; 
 repeated int32 user _ ids = 6 ; 
 optional bool is _ hidden = 8 ; 
 + optional bool is _ history _ shared = 9 ; 
 repeated bytes extensions = 7 [ ( scalapb . field ) . type = " im . actor . api . rpc . misc . Extension " ] ; 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index f1d804e . . 413e487 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 37 , 11 + 37 , 11 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 import GroupCommands . _ 
 import GroupEvents . _ 
 
 - protected def createInternal ( typ : GroupType , creatorUserId : Int , title : String , userIds : Seq [ Int ] , isHidden : Option [ Boolean ] , extensions : Seq [ Extension ] = Seq . empty ) : Unit = { 
 + protected def createInternal ( typ : GroupType , creatorUserId : Int , title : String , userIds : Seq [ Int ] , isHidden : Option [ Boolean ] , isHistoryShared : Option [ Boolean ] , extensions : Seq [ Extension ] = Seq . empty ) : Unit = { 
 val accessHash = genAccessHash ( ) 
 
 val date = now ( ) 
 - val created = GroupEvents . Created ( groupId , Some ( typ ) , creatorUserId , accessHash , title , ( userIds . toSet + creatorUserId ) . toSeq , isHidden , extensions ) 
 + val created = GroupEvents . Created ( groupId , Some ( typ ) , creatorUserId , accessHash , title , ( userIds . toSet + creatorUserId ) . toSeq , isHidden , isHistoryShared , extensions ) 
 val state = initState ( date , created ) 
 
 persist ( TSEvent ( date , created ) ) { _ ⇒ 
 @ @ - 75 , 7 + 75 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 
 val date = now ( ) 
 
 - val created = GroupEvents . Created ( groupId , Some ( typ ) , creatorUserId , accessHash , title , Seq ( creatorUserId ) , isHidden = Some ( false ) ) 
 + val created = GroupEvents . Created ( groupId , Some ( typ ) , creatorUserId , accessHash , title , Seq ( creatorUserId ) , isHidden = Some ( false ) , isHistoryShared = Some ( false ) ) 
 val state = initState ( date , created ) 
 
 persist ( TSEvent ( date , created ) ) { _ ⇒ 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 index 571d9d5 . . 2803b95 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 @ @ - 163 , 6 + 163 , 13 @ @ private [ group ] sealed trait Queries { 
 ec : ExecutionContext 
 ) : Future [ Boolean ] = ( region . ref ? IsPublic ( groupId ) ) . mapTo [ IsPublicResponse ] map ( _ . isPublic ) 
 
 + def isHistoryShared ( groupId : Int ) ( 
 + implicit 
 + region : GroupViewRegion , 
 + timeout : Timeout , 
 + ec : ExecutionContext 
 + ) : Future [ Boolean ] = ( region . ref ? IsHistoryShared ( groupId ) ) . mapTo [ IsHistorySharedResponse ] map ( _ . isHistoryShared ) 
 + 
 def checkAccessHash ( groupId : Int , hash : Long ) ( 
 implicit 
 region : GroupViewRegion , 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 index 7c0312d . . 4148774 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 @ @ - 36 , 20 + 36 , 21 @ @ private [ group ] case class Bot ( 
 ) 
 
 private [ group ] case class Group ( 
 - id : Int , 
 - typ : GroupType , 
 - accessHash : Long , 
 - creatorUserId : Int , 
 - createdAt : DateTime , 
 - members : Map [ Int , Member ] , 
 - invitedUserIds : Set [ Int ] , 
 - title : String , 
 - about : Option [ String ] , 
 - bot : Option [ Bot ] , 
 - avatar : Option [ Avatar ] , 
 - topic : Option [ String ] , 
 - isHidden : Boolean , 
 - extensions : Seq [ Extension ] 
 + id : Int , 
 + typ : GroupType , 
 + accessHash : Long , 
 + creatorUserId : Int , 
 + createdAt : DateTime , 
 + members : Map [ Int , Member ] , 
 + invitedUserIds : Set [ Int ] , 
 + title : String , 
 + about : Option [ String ] , 
 + bot : Option [ Bot ] , 
 + avatar : Option [ Avatar ] , 
 + topic : Option [ String ] , 
 + isHidden : Boolean , 
 + isHistoryShared : Boolean , 
 + extensions : Seq [ Extension ] 
 ) extends ProcessorState 
 
 trait GroupCommand { 
 @ @ - 98 , 6 + 99 , 8 @ @ object GroupProcessor { 
 21011 → classOf [ GroupQueries . GetIntegrationTokenInternal ] , 
 21012 → classOf [ GroupQueries . GetAccessHash ] , 
 21013 → classOf [ GroupQueries . GetAccessHashResponse ] , 
 + 21014 → classOf [ GroupQueries . IsHistoryShared ] , 
 + 21015 → classOf [ GroupQueries . IsHistorySharedResponse ] , 
 
 22003 → classOf [ GroupEvents . UserInvited ] , 
 22004 → classOf [ GroupEvents . UserJoined ] , 
 @ @ - 175 , 7 + 178 , 7 @ @ private [ group ] final class GroupProcessor 
 case TSEvent ( _ , GroupEvents . TitleUpdated ( title ) ) ⇒ 
 state . copy ( title = title ) 
 case TSEvent ( _ , GroupEvents . BecamePublic ( ) ) ⇒ 
 - state . copy ( typ = GroupType . Public ) 
 + state . copy ( typ = GroupType . Public , isHistoryShared = true ) 
 case TSEvent ( _ , GroupEvents . AboutUpdated ( about ) ) ⇒ 
 state . copy ( about = about ) 
 case TSEvent ( _ , GroupEvents . TopicUpdated ( topic ) ) ⇒ 
 @ @ - 195 , 13 + 198 , 14 @ @ private [ group ] final class GroupProcessor 
 case GroupQueries . GetMembers ( _ ) ⇒ getMembers ( state ) 
 case GroupQueries . IsPublic ( _ ) ⇒ isPublic ( state ) 
 case GroupQueries . GetAccessHash ( _ ) ⇒ getAccessHash ( state ) 
 + case GroupQueries . IsHistoryShared ( _ ) ⇒ isHistoryShared ( state ) 
 } 
 
 override def handleInitCommand : Receive = { 
 case Create ( _ , typ , creatorUserId , creatorAuthId , title , randomId , userIds ) ⇒ 
 create ( groupId , typ , creatorUserId , creatorAuthId , title , randomId , userIds . toSet ) 
 - case CreateInternal ( _ , typ , creatorUserId , title , userIds , isHidden , extensions ) ⇒ 
 - createInternal ( typ , creatorUserId , title , userIds , isHidden , extensions ) 
 + case CreateInternal ( _ , typ , creatorUserId , title , userIds , isHidden , isHistoryShared , extensions ) ⇒ 
 + createInternal ( typ , creatorUserId , title , userIds , isHidden , isHistoryShared , extensions ) 
 } 
 
 override def handleCommand ( state : Group ) : Receive = { 
 @ @ - 279 , 6 + 283 , 7 @ @ private [ group ] final class GroupProcessor 
 avatar = None , 
 topic = None , 
 isHidden = evt . isHidden . getOrElse ( false ) , 
 + isHistoryShared = evt . isHistoryShared . getOrElse ( false ) , 
 extensions = evt . extensions 
 ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 index a2cc6b8 . . 8719ec4 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 @ @ - 65 , 4 + 65 , 6 @ @ private [ group ] trait GroupQueryHandlers extends GroupCommandHelpers { 
 def getAccessHash ( group : Group ) : Unit = 
 sender ( ) ! GetAccessHashResponse ( group . accessHash ) 
 
 + def isHistoryShared ( group : Group ) : Unit = 
 + sender ( ) ! IsHistorySharedResponse ( group . isHistoryShared ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / history / HistoryUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / history / HistoryUtils . scala 
 index cbce5bd . . c3fce5d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / history / HistoryUtils . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / history / HistoryUtils . scala 
 @ @ - 1 , 7 + 1 , 9 @ @ 
 package im . actor . server . history 
 
 + import akka . actor . ActorSystem 
 + import akka . util . Timeout 
 import im . actor . api . rpc . AuthorizedClientData 
 - import im . actor . server . group . GroupUtils 
 + import im . actor . server . group . { GroupExtension , GroupOffice , GroupUtils } 
 import im . actor . server . { models , persist } 
 import org . joda . time . DateTime 
 import slick . dbio . DBIO 
 @ @ - 25 , 7 + 27 , 9 @ @ object HistoryUtils { 
 messageContentData : Array [ Byte ] 
 ) ( 
 implicit 
 - ec : ExecutionContext 
 + ec : ExecutionContext , 
 + system : ActorSystem , 
 + timeout : Timeout 
 ) : DBIO [ Unit ] = { 
 requirePrivatePeer ( fromPeer ) 
 / / requireDifferentPeers ( fromPeer , toPeer ) 
 @ @ - 58 , 9 + 62 , 10 @ @ object HistoryUtils { 
 res ← persist . Dialog . updateLastMessageDate ( toPeer . id , fromPeer , date ) 
 } yield ( ) 
 } else if ( toPeer . typ = = models . PeerType . Group ) { 
 - withGroup ( toPeer . id ) { group ⇒ 
 - withGroupUserIds ( group . id ) { groupUserIds ⇒ 
 - if ( group . isPublic ) { 
 + implicit val groupViewRegion = GroupExtension ( system ) . viewRegion 
 + DBIO . from ( GroupOffice . isHistoryShared ( toPeer . id ) ) flatMap { isHistoryShared ⇒ 
 + withGroupUserIds ( toPeer . id ) { groupUserIds ⇒ 
 + if ( isHistoryShared ) { 
 val historyMessage = models . HistoryMessage ( sharedUserId , toPeer , date , fromPeer . id , randomId , messageContentHeader , messageContentData , None ) 
 
 for { 
 @ @ - 137 , 14 + 142 , 17 @ @ object HistoryUtils { 
 
 def withHistoryOwner [ A ] ( peer : models . Peer ) ( f : Int ⇒ DBIO [ A ] ) ( 
 implicit 
 - ec : ExecutionContext , 
 - client : AuthorizedClientData 
 + ec : ExecutionContext , 
 + system : ActorSystem , 
 + timeout : Timeout , 
 + client : AuthorizedClientData 
 ) : DBIO [ A ] = { 
 ( peer . typ match { 
 case models . PeerType . Private ⇒ DBIO . successful ( client . userId ) 
 case models . PeerType . Group ⇒ 
 - withGroup ( peer . id ) { group ⇒ 
 - if ( group . isPublic ) { 
 + implicit val groupViewRegion = GroupExtension ( system ) . viewRegion 
 + DBIO . from ( GroupOffice . isHistoryShared ( peer . id ) ) flatMap { isHistoryShared ⇒ 
 + if ( isHistoryShared ) { 
 DBIO . successful ( sharedUserId ) 
 } else { 
 DBIO . successful ( client . userId ) 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 index a829577 . . fbb7a0a 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 @ @ - 84 , 7 + 84 , 7 @ @ trait HistoryHandlers { 
 if ( peer . ` type ` = = PeerType . Private ) { 
 DBIO . successful ( true ) 
 } else { 
 - withGroup ( peer . id ) ( g ⇒ DBIO . successful ( ! g . isPublic ) ) 
 + DBIO . from ( GroupOffice . isHistoryShared ( peer . id ) ) flatMap ( isHistoryShared ⇒ DBIO . successful ( ! isHistoryShared ) ) 
 } 
 } 
 _ ← fromDBIO ( persist . HistoryMessage . deleteAll ( client . userId , peer . asModel ) )
