BLEU SCORE: 0.026172496070245056

TEST MSG: refactor ( server ) : mark deprecated methods with @ silent
GENERATED MSG: feat ( server : groups ) : delete group , make group with shared history , correct push updates on join / leave , more FullGroup flags

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > index df37b3b . . 2e145fc 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > @ @ - 5 , 6 + 5 , 7 @ @ import java . time . Instant < nl > import akka . actor . Status < nl > import akka . pattern . pipe < nl > import akka . http . scaladsl . util . FastFuture < nl > + import com . github . ghik . silencer . silent < nl > import im . actor . api . rpc . Update < nl > import im . actor . api . rpc . groups . _ < nl > import im . actor . api . rpc . messaging . UpdateChatClear < nl > @ @ - 35 , 7 + 36 , 7 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { < nl > val newState = commit ( evt ) < nl > < nl > / / TODO : remove deprecated < nl > - db . run ( GroupBotRepo . updateToken ( groupId , newToken ) ) < nl > + db . run ( GroupBotRepo . updateToken ( groupId , newToken ) : @ silent ) < nl > < nl > val result : Future [ RevokeIntegrationTokenAck ] = for { < nl > _ ← oldToken match { < nl > @ @ - 75 , 7 + 76 , 7 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { < nl > val updateObsolete = UpdateGroupMembersUpdateObsolete ( groupId , members ) < nl > < nl > / / TODO : remove deprecated < nl > - db . run ( GroupUserRepo . makeAdmin ( groupId , cmd . candidateUserId ) ) < nl > + db . run ( GroupUserRepo . makeAdmin ( groupId , cmd . candidateUserId ) : @ silent ) < nl > < nl > val adminGROUPUpdates : Future [ SeqStateDate ] = < nl > for { < nl > @ @ - 160 , 7 + 161 , 7 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { < nl > val updateObsolete = UpdateGroupMembersUpdateObsolete ( groupId , members ) < nl > < nl > / / TODO : remove deprecated < nl > - db . run ( GroupUserRepo . dismissAdmin ( groupId , cmd . targetUserId ) ) < nl > + db . run ( GroupUserRepo . dismissAdmin ( groupId , cmd . targetUserId ) : @ silent ) < nl > < nl > val adminGROUPUpdates : Future [ SeqState ] = < nl > for { < nl > @ @ - 340 , 8 + 341 , 8 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { < nl > exMemberIds foreach { userId ⇒ < nl > db . run ( < nl > for { < nl > - _ ← GroupUserRepo . delete ( groupId , userId ) < nl > - _ ← GroupInviteTokenRepo . revoke ( groupId , userId ) < nl > + _ ← GroupUserRepo . delete ( groupId , userId ) : @ silent < nl > + _ ← GroupInviteTokenRepo . revoke ( groupId , userId ) : @ silent < nl > } yield ( ) < nl > ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index 0eb5380 . . dc3d858 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 5 , 6 + 5 , 7 @ @ import java . time . Instant < nl > import akka . actor . Status < nl > import akka . http . scaladsl . util . FastFuture < nl > import akka . pattern . pipe < nl > + import com . github . ghik . silencer . silent < nl > import im . actor . api . rpc . Update < nl > import im . actor . api . rpc . groups . _ < nl > import im . actor . api . rpc . users . ApiSex < nl > @ @ - 103 , 8 + 104 , 8 @ @ private [ group ] trait GroupCommandHandlers < nl > ) , < nl > cmd . randomId , < nl > isHidden = false < nl > - ) < nl > - _ ← GroupUserRepo . create ( groupId , cmd . creatorUserId , cmd . creatorUserId , createdAt , None , isAdmin = true ) < nl > + ) : @ silent < nl > + _ ← GroupUserRepo . create ( groupId , cmd . creatorUserId , cmd . creatorUserId , createdAt , None , isAdmin = true ) : @ silent < nl > } yield ( ) < nl > ) < nl > < nl > @ @ - 151 , 7 + 152 , 7 @ @ private [ group ] trait GroupCommandHandlers < nl > val newState = commit ( evt ) < nl > < nl > / / TODO : remove deprecated < nl > - db . run ( GroupBotRepo . create ( groupId , botUserId , botToken ) ) < nl > + db . run ( GroupBotRepo . create ( groupId , botUserId , botToken ) : @ silent ) < nl > < nl > ( for { < nl > _ ← userExt . create ( botUserId , ACLUtils . nextAccessSalt ( ) , None , " Bot " , " US " , ApiSex . Unknown , isBot = true ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala < nl > index d2e06a8 . . 5080d09 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala < nl > @ @ - 42 , 4 + 42 , 6 @ @ object GroupErrors { < nl > case object NoPermission extends Exception with NoStackTrace < nl > < nl > case object CantLeaveGroup extends Exception with NoStackTrace < nl > + < nl > + final case class IncorrectGroupType ( value : Int ) extends Exception with NoStackTrace < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupMigrator . scala < nl > index ab83851 . . 4ccea6d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupMigrator . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupMigrator . scala < nl > @ @ - 9 , 6 + 9 , 7 @ @ import scala . concurrent . { ExecutionContext , Future , Promise } < nl > import akka . actor . { ActorSystem , Props } < nl > import akka . pattern . pipe < nl > import akka . persistence . RecoveryCompleted < nl > + import com . github . ghik . silencer . silent < nl > import im . actor . server . db . DbExtension < nl > import org . joda . time . DateTime < nl > import im . actor . server . event . TSEvent < nl > @ @ - 49 , 12 + 50 , 12 @ @ private final class GroupMigrator ( promise : Promise [ Unit ] , groupId : Int ) extends < nl > override def persistenceId = GroupProcessor . persistenceIdFor ( groupId ) < nl > < nl > private def migrate ( ) : Unit = { < nl > - db . run ( GroupRepo . findFull ( groupId ) ) foreach { < nl > + db . run ( GroupRepo . findFull ( groupId ) : @ silent ) foreach { < nl > case Some ( group ) ⇒ < nl > db . run ( for { < nl > avatarOpt ← AvatarDataRepo . findByGroupId ( groupId ) < nl > - bots ← GroupBotRepo . findByGroup ( groupId ) map ( _ . map ( Seq ( _ ) ) . getOrElse ( Seq . empty ) ) < nl > - users ← GroupUserRepo . find ( groupId ) < nl > + bots ← ( GroupBotRepo . findByGroup ( groupId ) : @ silent ) map ( _ . map ( Seq ( _ ) ) . getOrElse ( Seq . empty ) ) < nl > + users ← GroupUserRepo . find ( groupId ) : @ silent < nl > } yield Migrate ( < nl > group = group , < nl > avatarData = avatarOpt , < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > index 65bf91f . . 3b3e769 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > @ @ - 6 , 7 + 6 , 7 @ @ import akka . stream . scaladsl . Source < nl > import com . google . protobuf . ByteString < nl > import com . google . protobuf . wrappers . Int32Value < nl > import im . actor . api . rpc . groups . _ < nl > - import im . actor . server . group . GroupErrors . { NoPermission , NotOwner } < nl > + import im . actor . server . group . GroupErrors . { IncorrectGroupType , NoPermission , NotOwner } < nl > import im . actor . server . group . GroupQueries . _ < nl > import im . actor . server . group . GroupType . { Channel , General , Unrecognized } < nl > < nl > @ @ - 77 , 6 + 77 , 7 @ @ trait GroupQueryHandlers { < nl > case Channel ⇒ < nl > if ( state . isAdmin ( clientUserId ) ) load < nl > else FastFuture . successful ( LoadMembersResponse ( Seq . empty , offsetBs ) ) < nl > + case Unrecognized ( v ) ⇒ throw IncorrectGroupType ( v ) < nl > } < nl > } < nl > < nl > @ @ - 110 , 8 + 111 , 9 @ @ trait GroupQueryHandlers { < nl > ext = None , < nl > membersCount = Some ( count ) , < nl > groupType = Some ( state . groupType match { < nl > - case Channel ⇒ ApiGroupType . CHANNEL < nl > - case General | Unrecognized ( _ ) ⇒ ApiGroupType . GROUP < nl > + case Channel ⇒ ApiGroupType . CHANNEL < nl > + case General ⇒ ApiGroupType . GROUP < nl > + case Unrecognized ( v ) ⇒ throw IncorrectGroupType ( v ) < nl > } ) , < nl > permissions = Some ( state . permissions . groupFor ( clientUserId ) ) , < nl > isDeleted = Some ( state . isDeleted ) < nl > @ @ - 147 , 8 + 149 , 9 @ @ trait GroupQueryHandlers { < nl > FastFuture . successful { < nl > val canSend = state . bot . exists ( _ . userId = = clientUserId ) | | { < nl > state . groupType match { < nl > - case General ⇒ state . isMember ( clientUserId ) < nl > - case Channel ⇒ state . isAdmin ( clientUserId ) < nl > + case General ⇒ state . isMember ( clientUserId ) < nl > + case Channel ⇒ state . isAdmin ( clientUserId ) < nl > + case Unrecognized ( v ) ⇒ throw IncorrectGroupType ( v ) < nl > } < nl > } < nl > CanSendMessageResponse ( < nl > @ @ - 201 , 6 + 204 , 7 @ @ trait GroupQueryHandlers { < nl > apiMembers → group . membersCount < nl > else < nl > apiMembers . find ( _ . userId = = clientUserId ) . toVector → group . membersCount < nl > + case Unrecognized ( v ) ⇒ throw IncorrectGroupType ( v ) < nl > } < nl > } else { < nl > Vector . empty [ ApiMember ] → 0 < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > index 01bc29d . . e124305 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > @ @ - 7 , 8 + 7 , 9 @ @ import im . actor . api . rpc . groups . ApiAdminSettings < nl > import im . actor . api . rpc . misc . ApiExtension < nl > import im . actor . server . cqrs . { Event , ProcessorState } < nl > import im . actor . server . file . Avatar < nl > + import im . actor . server . group . GroupErrors . IncorrectGroupType < nl > import im . actor . server . group . GroupEvents . _ < nl > - import im . actor . server . group . GroupType . { Channel , General } < nl > + import im . actor . server . group . GroupType . { Channel , General , Unrecognized } < nl > < nl > private [ group ] final case class Member ( < nl > userId : Int , < nl > @ @ - 159 , 8 + 160 , 9 @ @ private [ group ] final case class GroupState ( < nl > < nl > def getShowableOwner ( clientUserId : Int ) : Option [ Int ] = < nl > groupType match { < nl > - case General ⇒ Some ( creatorUserId ) < nl > - case Channel ⇒ if ( isAdmin ( clientUserId ) ) Some ( creatorUserId ) else None < nl > + case General ⇒ Some ( creatorUserId ) < nl > + case Channel ⇒ if ( isAdmin ( clientUserId ) ) Some ( creatorUserId ) else None < nl > + case Unrecognized ( v ) ⇒ throw IncorrectGroupType ( v ) < nl > } < nl > < nl > override def updated ( e : Event ) : GroupState = e match { < nl > @ @ - 332 , 8 + 334 , 9 @ @ private [ group ] final case class GroupState ( < nl > private def canSendMessage ( clientUserId : Int ) = < nl > { < nl > groupType match { < nl > - case General ⇒ isMember ( clientUserId ) < nl > - case Channel ⇒ isAdmin ( clientUserId ) | | isOwner ( clientUserId ) < nl > + case General ⇒ isMember ( clientUserId ) < nl > + case Channel ⇒ isAdmin ( clientUserId ) | | isOwner ( clientUserId ) < nl > + case Unrecognized ( v ) ⇒ throw IncorrectGroupType ( v ) < nl > } < nl > } | | bot . exists ( _ . userId = = clientUserId ) < nl > < nl > @ @ - 412 , 8 + 415 , 9 @ @ private [ group ] final case class GroupState ( < nl > * / < nl > def canViewMembers ( clientUserId : Int ) = < nl > groupType match { < nl > - case General ⇒ isMember ( clientUserId ) < nl > - case Channel ⇒ isAdmin ( clientUserId ) | | isOwner ( clientUserId ) < nl > + case General ⇒ isMember ( clientUserId ) < nl > + case Channel ⇒ isAdmin ( clientUserId ) | | isOwner ( clientUserId ) < nl > + case Unrecognized ( v ) ⇒ throw IncorrectGroupType ( v ) < nl > } < nl > < nl > / * * < nl > @ @ - 455 , 8 + 459 , 9 @ @ private [ group ] final case class GroupState ( < nl > * / < nl > def canKickInvited ( userId : Int ) : Boolean = < nl > groupType match { < nl > - case General ⇒ isMember ( userId ) < nl > - case Channel ⇒ isAdmin ( userId ) | | isOwner ( userId ) < nl > + case General ⇒ isMember ( userId ) < nl > + case Channel ⇒ isAdmin ( userId ) | | isOwner ( userId ) < nl > + case Unrecognized ( v ) ⇒ throw IncorrectGroupType ( v ) < nl > } < nl > < nl > / * * < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala < nl > index 389cfc7 . . 462075a 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala < nl > @ @ - 5 , 6 + 5 , 7 @ @ import java . time . Instant < nl > import akka . actor . Status < nl > import akka . pattern . pipe < nl > import akka . http . scaladsl . util . FastFuture < nl > + import com . github . ghik . silencer . silent < nl > import im . actor . api . rpc . files . ApiAvatar < nl > import im . actor . api . rpc . groups . _ < nl > import im . actor . server . file . { Avatar , ImageUtils } < nl > @ @ - 97 , 7 + 98 , 7 @ @ private [ group ] trait InfoCommandHandlers { < nl > val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . titleChanged ( newState . groupType ) ) ) < nl > < nl > / / TODO : remove deprecated < nl > - db . run ( GroupRepo . updateTitle ( groupId , title , cmd . clientUserId , cmd . randomId , date = evt . ts ) ) < nl > + db . run ( GroupRepo . updateTitle ( groupId , title , cmd . clientUserId , cmd . randomId , date = evt . ts ) : @ silent ) < nl > < nl > val result : Future [ SeqStateDate ] = for { < nl > < nl > @ @ - 171 , 7 + 172 , 7 @ @ private [ group ] trait InfoCommandHandlers { < nl > val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . topicChanged ( newState . groupType ) ) ) < nl > < nl > / / TODO : remove deprecated < nl > - db . run ( GroupRepo . updateTopic ( groupId , topic ) ) < nl > + db . run ( GroupRepo . updateTopic ( groupId , topic ) : @ silent ) < nl > < nl > val result : Future [ SeqStateDate ] = for { < nl > < nl > @ @ - 235 , 7 + 236 , 7 @ @ private [ group ] trait InfoCommandHandlers { < nl > val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . topicChanged ( newState . groupType ) ) ) < nl > < nl > / / TODO : remove deprecated < nl > - db . run ( GroupRepo . updateAbout ( groupId , about ) ) < nl > + db . run ( GroupRepo . updateAbout ( groupId , about ) : @ silent ) < nl > < nl > val result : Future [ SeqStateDate ] = for { < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala < nl > index 16a4b64 . . 9d105b3 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala < nl > @ @ - 5 , 6 + 5 , 7 @ @ import java . time . { Instant , LocalDateTime , ZoneOffset } < nl > import akka . actor . Status < nl > import akka . http . scaladsl . util . FastFuture < nl > import akka . pattern . pipe < nl > + import com . github . ghik . silencer . silent < nl > import im . actor . api . rpc . Update < nl > import im . actor . api . rpc . groups . _ < nl > import im . actor . api . rpc . messaging . { ApiServiceMessage , UpdateChatDropCache , UpdateMessage } < nl > @ @ - 83 , 7 + 84 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > val serviceMessage = GroupServiceMessages . userInvited ( cmd . inviteeUserId ) < nl > < nl > / / TODO : remove deprecated < nl > - db . run ( GroupUserRepo . create ( groupId , cmd . inviteeUserId , cmd . inviterUserId , evt . ts , None , isAdmin = false ) ) < nl > + db . run ( GroupUserRepo . create ( groupId , cmd . inviteeUserId , cmd . inviterUserId , evt . ts , None , isAdmin = false ) : @ silent ) < nl > < nl > def inviteGROUPUpdates : Future [ SeqStateDate ] = < nl > for { < nl > @ @ - 215 , 7 + 216 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > val wasInvited = state . isInvited ( cmd . joiningUserId ) < nl > < nl > / / trying to figure out who invited joining user . < nl > - / / Descdending priority : < nl > + / / Descending priority : < nl > / / • inviter defined in ` Join ` command ( when invited via token ) < nl > / / • inviter from members list ( when invited by other user ) < nl > / / • group creator ( safe fallback ) < nl > @ @ - 292 , 7 + 293 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > invitedAt = optMember . map ( _ . invitedAt ) . getOrElse ( date ) , < nl > joinedAt = Some ( LocalDateTime . now ( ZoneOffset . UTC ) ) , < nl > isAdmin = false < nl > - ) ) < nl > + ) : @ silent ) < nl > < nl > def joinGROUPUpdates : Future [ SeqStateDate ] = < nl > for { < nl > @ @ - 447 , 8 + 448 , 8 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > / / TODO : remove deprecated . GroupInviteTokenRepo don ' t have replacement yet . < nl > db . run ( < nl > for { < nl > - _ ← GroupUserRepo . delete ( groupId , cmd . userId ) < nl > - _ ← GroupInviteTokenRepo . revoke ( groupId , cmd . userId ) < nl > + _ ← GroupUserRepo . delete ( groupId , cmd . userId ) : @ silent < nl > + _ ← GroupInviteTokenRepo . revoke ( groupId , cmd . userId ) : @ silent < nl > } yield ( ) < nl > ) < nl > < nl > @ @ - 582 , 8 + 583 , 8 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > / / TODO : remove deprecated . GroupInviteTokenRepo don ' t have replacement yet . < nl > db . run ( < nl > for { < nl > - _ ← GroupUserRepo . delete ( groupId , cmd . kickedUserId ) < nl > - _ ← GroupInviteTokenRepo . revoke ( groupId , cmd . kickedUserId ) < nl > + _ ← GroupUserRepo . delete ( groupId , cmd . kickedUserId ) : @ silent < nl > + _ ← GroupInviteTokenRepo . revoke ( groupId , cmd . kickedUserId ) : @ silent < nl > } yield ( ) < nl > ) < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / http / GroupsHttpHandler . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / http / GroupsHttpHandler . scala < nl > index e8d3b80 . . a34d0b4 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / http / GroupsHttpHandler . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / http / GroupsHttpHandler . scala < nl > @ @ - 6 , 6 + 6 , 7 @ @ import akka . http . scaladsl . model . StatusCodes . _ < nl > import akka . http . scaladsl . server . Directives . _ < nl > import akka . http . scaladsl . server . Route < nl > import akka . http . scaladsl . util . FastFuture < nl > + import com . github . ghik . silencer . silent < nl > import im . actor . server . api . http . json . JsonFormatters . { errorsFormat , groupInviteInfoFormat } < nl > import im . actor . server . api . http . { HttpHandler , json } < nl > import im . actor . server . db . DbExtension < nl > @ @ - 50 , 7 + 51 , 7 @ @ private [ group ] final class GroupsHttpHandler ( ) ( implicit system : ActorSystem ) ext < nl > } < nl > < nl > private def retrieve ( tokenOrShortName : String ) : Future [ Either [ json . Errors , json . GroupInviteInfo ] ] = for { < nl > - byToken ← db . run ( GroupInviteTokenRepo . findByToken ( tokenOrShortName ) ) < nl > + byToken ← db . run ( GroupInviteTokenRepo . findByToken ( tokenOrShortName ) : @ silent ) < nl > byGroupId ← globalNamesStorage . getGroupId ( tokenOrShortName ) < nl > optInviteData = ( byToken , byGroupId ) match { < nl > case ( Some ( tokenInfo ) , _ ) ⇒ Some ( tokenInfo . groupId → Some ( tokenInfo . creatorId ) ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala < nl > index 1ee8689 . . 37bb78b 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala < nl > @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . migrations < nl > < nl > import akka . actor . { ActorLogging , ActorSystem , PoisonPill , Props } < nl > import akka . persistence . { PersistentActor , RecoveryCompleted } < nl > + import com . github . ghik . silencer . silent < nl > import im . actor . concurrent . FutureExt < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . event . TSEvent < nl > @ @ - 52 , 7 + 53 , 7 @ @ private final class HiddenGroupMigrator ( promise : Promise [ Unit ] , groupId : Int ) ex < nl > < nl > private def migrate ( ) : Unit = { < nl > if ( isHidden ) { < nl > - db . run ( GroupRepo . makeHidden ( groupId ) ) onComplete { < nl > + db . run ( GroupRepo . makeHidden ( groupId ) : @ silent ) onComplete { < nl > case Failure ( e ) ⇒ < nl > promise . failure ( e ) < nl > self ! PoisonPill < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala b / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala < nl > index a78b47e . . 207af1e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala < nl > @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . names < nl > < nl > import akka . actor . ActorSystem < nl > import akka . http . scaladsl . util . FastFuture < nl > + import com . github . ghik . silencer . silent < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . persist . UserRepo < nl > import im . actor . storage . SimpleStorage < nl > @ @ - 58 , 7 + 59 , 7 @ @ final class GlobalNamesStorageKeyValueStorage ( implicit system : ActorSystem ) { < nl > Some ( GlobalNameOwner . parseFrom ( bytes ) ) filter ( _ . ownerType . isUser ) map ( o ⇒ o . ownerId → fullName ) < nl > } < nl > } < nl > - val compatSearch = db . run ( UserRepo . findByNicknamePrefix ( namePrefix ) ) map { users ⇒ < nl > + val compatSearch = db . run ( UserRepo . findByNicknamePrefix ( namePrefix ) : @ silent ) map { users ⇒ < nl > users flatMap { user ⇒ < nl > user . nickname map ( user . id → _ ) < nl > } < nl > @ @ - 82 , 7 + 83 , 7 @ @ final class GlobalNamesStorageKeyValueStorage ( implicit system : ActorSystem ) { < nl > < nl > existsInKV flatMap { < nl > case true ⇒ FastFuture . successful ( true ) < nl > - case false ⇒ db . run ( UserRepo . nicknameExists ( name ) ) < nl > + case false ⇒ db . run ( UserRepo . nicknameExists ( name ) : @ silent ) < nl > } < nl > } < nl > < nl > @ @ - 111 , 7 + 112 , 7 @ @ final class GlobalNamesStorageKeyValueStorage ( implicit system : ActorSystem ) { < nl > < nl > optOwner flatMap { < nl > case o @ Some ( _ ) ⇒ FastFuture . successful ( o ) < nl > - case None ⇒ db . run ( UserRepo . findByNickname ( name ) ) map ( _ . map ( u ⇒ GlobalNameOwner ( OwnerType . User , u . id ) ) ) < nl > + case None ⇒ db . run ( UserRepo . findByNickname ( name ) : @ silent ) map ( _ . map ( u ⇒ GlobalNameOwner ( OwnerType . User , u . id ) ) ) < nl > } < nl > } < nl > < nl > @ @ - 130 , 9 + 131 , 9 @ @ final class GlobalNamesStorageKeyValueStorage ( implicit system : ActorSystem ) { < nl > if ( count = = 0 ) { < nl > db . run { < nl > for { < nl > - optUser ← UserRepo . findByNickname ( name ) < nl > + optUser ← UserRepo . findByNickname ( name ) : @ silent < nl > _ ← optUser match { < nl > - case Some ( u ) ⇒ UserRepo . setNickname ( u . id , None ) < nl > + case Some ( u ) ⇒ UserRepo . setNickname ( u . id , None ) : @ silent < nl > case None ⇒ DBIO . successful ( 0 ) < nl > } < nl > } yield ( ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > index cfcbfd7 . . 3988b2e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > @ @ - 22 , 7 + 22 , 7 @ @ case object StopOffice < nl > < nl > trait ProcessorState < nl > < nl > - @ deprecated ( " use im . actor . server . cqrs . Processor instead " , " 2016 - 07 - 07 " ) < nl > + / / TODO : replace with im . actor . server . cqrs . Processor < nl > trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorFutures with AlertingActor { < nl > < nl > case class BreakStashing ( ts : Instant , evts : Seq [ Event ] , state : State ) < nl > diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala < nl > index 19f20eb . . a34a5ab998 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala < nl > @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . server . frontend < nl > import java . net . InetAddress < nl > < nl > import akka . stream . FlowShape < nl > + import com . github . ghik . silencer . silent < nl > import kamon . metric . instrument . { MinMaxCounter , Histogram } < nl > < nl > import scala . util . { Failure , Success } < nl > @ @ - 32 , 11 + 33 , 11 @ @ object MTProtoBlueprint { < nl > < nl > val sessionClientSource = Source . fromPublisher ( ActorPublisher [ MTProto ] ( sessionClient ) ) < nl > < nl > - val mtprotoFlow = Flow . fromGraph ( new PackageParseStage ( ) ) < nl > + @ silent val mtprotoFlow = Flow . fromGraph ( new PackageParseStage ( ) ) < nl > . transform ( ( ) ⇒ new PackageCheckStage ) < nl > . via ( new PackageHandleStage ( protoVersions , apiMajorVersions , authManager , sessionClient ) ) < nl > < nl > - val mapRespFlow : Flow [ MTProto , ByteString , akka . NotUsed ] = Flow [ MTProto ] < nl > + @ silent val mapRespFlow : Flow [ MTProto , ByteString , akka . NotUsed ] = Flow [ MTProto ] < nl > . transform ( ( ) ⇒ mapResponse ( system ) ) < nl > < nl > val connStartTime = System . currentTimeMillis ( ) < nl > @ @ - 82 , 7 + 83 , 7 @ @ object MTProtoBlueprint { < nl > } ) < nl > } < nl > < nl > - def mapResponse ( system : ActorSystem ) = new PushStage [ MTProto , ByteString ] { < nl > + @ silent def mapResponse ( system : ActorSystem ) = new PushStage [ MTProto , ByteString ] { < nl > private [ this ] var packageIndex : Int = - 1 < nl > < nl > override def onPush ( elem : MTProto , ctx : Context [ ByteString ] ) = { < nl > diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageCheckStage . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageCheckStage . scala < nl > index 489f130 . . 8829655 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageCheckStage . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageCheckStage . scala < nl > @ @ - 1 , 9 + 1 , 10 @ @ < nl > package im . actor . server . frontend < nl > < nl > import akka . stream . stage . { Context , PushStage , SyncDirective } < nl > - < nl > + import com . github . ghik . silencer . silent < nl > import im . actor . server . mtproto . transport . { Handshake , TransportPackage } < nl > < nl > + @ silent < nl > private [ frontend ] final class PackageCheckStage extends PushStage [ TransportPackage , TransportPackage ] { < nl > < nl > private trait State < nl > diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala < nl > index 0f62209 . . 8849da1 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala < nl > @ @ - 10 , 6 + 10 , 7 @ @ import akka . stream . { ActorMaterializer , Materializer } < nl > import akka . stream . scaladsl . _ < nl > import akka . stream . stage . { Context , PushStage , SyncDirective , TerminationDirective } < nl > import akka . util . ByteString < nl > + import com . github . ghik . silencer . silent < nl > import im . actor . server . session . SessionRegion < nl > < nl > import scala . concurrent . duration . _ < nl > @ @ - 66 , 6 + 67 , 7 @ @ object WsFrontend extends Frontend ( " ws " ) { < nl > . via ( completionFlow ( System . currentTimeMillis ( ) ) ) < nl > } < nl > < nl > + @ silent < nl > def completionFlow [ T ] ( connStartTime : Long ) ( implicit system : ActorSystem ) : Flow [ T , T , akka . NotUsed ] = < nl > Flow [ T ] < nl > . transform ( ( ) ⇒ new PushStage [ T , T ] { < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > index 86bb7cc . . 79e4dec 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > @ @ - 93 , 7 + 93 , 7 @ @ object GroupRepo { < nl > ) < nl > } < nl > < nl > - @ deprecated ( " Replace with some sort of key - value maybe ? " , " 2016 - 06 - 05 " ) < nl > + / / TODO : Replace with key value < nl > def findAllIds = allIds . result < nl > < nl > @ deprecated ( " Remove , only used in tests " , " 2016 - 06 - 05 " ) < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala < nl > index af4797e . . 52e6b8d 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala < nl > @ @ - 62 , 15 + 62 , 6 @ @ object PeerHelpers { < nl > accessHashCheck ( checkGroupOutPeers ( groupOutPeers ) , authorizedAction ) < nl > } < nl > < nl > - / / TODO : remove in future < nl > - @ deprecated ( " Use Future inner type instead " , " 2016 - 07 - 07 " ) < nl > - def withOutPeerDBIO [ R < : RpcResponse ] ( outPeer : ApiOutPeer ) ( f : ⇒ DBIO [ RpcError Xor R ] ) ( < nl > - implicit < nl > - client : AuthorizedClientData , < nl > - system : ActorSystem < nl > - ) : DBIO [ RpcError Xor R ] = < nl > - DBIO . from ( withOutPeer ( outPeer ) ( DbExtension ( system ) . db . run ( f ) ) ) < nl > - < nl > private def accessHashCheck [ R < : RpcResponse ] ( check : Future [ Boolean ] , authorizedAction : ⇒ Future [ RpcError Xor R ] ) ( implicit ec : ExecutionContext ) = < nl > check flatMap { isValid ⇒ < nl > if ( isValid ) { < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > index c6876f8 . . e2de35d 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > @ @ - 5 , 6 + 5 , 7 @ @ import java . time . Instant < nl > import akka . actor . ActorSystem < nl > import akka . http . scaladsl . util . FastFuture < nl > import cats . data . Xor < nl > + import com . github . ghik . silencer . silent < nl > import im . actor . api . rpc . PeerHelpers . _ < nl > import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . files . ApiFileLocation < nl > @ @ - 356 , 12 + 357 , 12 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act < nl > } else { < nl > withGroupOutPeer ( groupPeer ) { < nl > db . run ( for { < nl > - token ← GroupInviteTokenRepo . find ( groupPeer . groupId , client . userId ) . headOption . flatMap { < nl > + token ← ( GroupInviteTokenRepo . find ( groupPeer . groupId , client . userId ) : @ silent ) . headOption . flatMap { < nl > case Some ( invToken ) ⇒ DBIO . successful ( invToken . token ) < nl > case None ⇒ < nl > val token = ACLUtils . accessToken ( ThreadLocalSecureRandom . current ( ) ) < nl > val inviteToken = GroupInviteToken ( groupPeer . groupId , client . userId , token ) < nl > - for ( _ ← GroupInviteTokenRepo . create ( inviteToken ) ) yield token < nl > + for ( _ ← GroupInviteTokenRepo . create ( inviteToken ) : @ silent ) yield token < nl > } < nl > } yield Ok ( ResponseInviteUrl ( genInviteUrl ( token ) ) ) ) < nl > } < nl > @ @ - 383 , 7 + 384 , 7 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act < nl > joinInfo ← joinSting match { < nl > case Xor . Left ( token ) ⇒ < nl > for { < nl > - info ← fromFutureOption ( GroupRpcErrors . InvalidInviteToken ) ( db . run ( GroupInviteTokenRepo . findByToken ( token ) ) ) < nl > + info ← fromFutureOption ( GroupRpcErrors . InvalidInviteToken ) ( db . run ( GroupInviteTokenRepo . findByToken ( token ) : @ silent ) ) < nl > } yield info . groupId → Some ( info . creatorId ) < nl > case Xor . Right ( groupName ) ⇒ < nl > for { < nl > @ @ - 441 , 10 + 442 , 10 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act < nl > val token = ACLUtils . accessToken ( ) < nl > db . run ( < nl > for { < nl > - _ ← GroupInviteTokenRepo . revoke ( groupPeer . groupId , client . userId ) < nl > + _ ← GroupInviteTokenRepo . revoke ( groupPeer . groupId , client . userId ) : @ silent < nl > _ ← GroupInviteTokenRepo . create ( < nl > GroupInviteToken ( groupPeer . groupId , client . userId , token ) < nl > - ) < nl > + ) : @ silent < nl > } yield Ok ( ResponseInviteUrl ( genInviteUrl ( token ) ) ) < nl > ) < nl > } < nl > @ @ - 591 , 7 + 592 , 7 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act < nl > result ← if ( isHistoryShared ) { < nl > db . run ( < nl > for { < nl > - member ← GroupUserRepo . find ( groupPeer . groupId , client . userId ) < nl > + member ← GroupUserRepo . find ( groupPeer . groupId , client . userId ) : @ silent < nl > response ← member match { < nl > case Some ( _ ) ⇒ DBIO . successful ( Error ( GroupRpcErrors . AlreadyInvited ) ) < nl > case None ⇒ < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > index fb55eed . . 7ad08bd 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > @ @ - 10 , 16 + 10 , 13 @ @ import im . actor . api . rpc . misc . { ResponseSeq , ResponseVoid } < nl > import im . actor . api . rpc . peers . { ApiGroupOutPeer , ApiOutPeer , ApiPeerType , ApiUserOutPeer } < nl > import im . actor . api . rpc . sequence . ApiUpdateOptimization < nl > import im . actor . server . dialog . HistoryUtils < nl > - import im . actor . server . group . GroupQueries . CanSendMessageResponse < nl > import im . actor . server . group . { CanSendMessageInfo , GroupUtils } < nl > - import im . actor . server . model . { DialogObsolete , HistoryMessage , Peer , PeerType } < nl > + import im . actor . server . model . Peer < nl > import im . actor . server . persist . contact . UserContactRepo < nl > - import im . actor . server . persist . dialog . DialogRepo < nl > - import im . actor . server . persist . { GroupUserRepo , HistoryMessageRepo } < nl > + import im . actor . server . persist . HistoryMessageRepo < nl > import im . actor . server . sequence . SeqState < nl > import im . actor . server . user . UserUtils < nl > import org . joda . time . DateTime < nl > - import slick . dbio < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > import scala . concurrent . Future < nl > @ @ - 196 , 9 + 193 , 9 @ @ trait HistoryHandlers { < nl > clientData : ClientData < nl > ) : Future [ HandlerResult [ ResponseLoadHistory ] ] = < nl > authorized ( clientData ) { implicit client ⇒ < nl > - val action = withOutPeerDBIO ( peer ) { < nl > + withOutPeer ( peer ) { < nl > val modelPeer = peer . asModel < nl > - for { < nl > + val action = for { < nl > historyOwner ← DBIO . from ( getHistoryOwner ( modelPeer , client . userId ) ) < nl > ( lastReceivedAt , lastReadAt ) ← getLastReceiveReadDates ( modelPeer ) < nl > messageModels ← mode match { < nl > @ @ - 240 , 8 + 237 , 8 @ @ trait HistoryHandlers { < nl > groupPeers = groups map ( g ⇒ ApiGroupOutPeer ( g . id , g . accessHash ) ) < nl > ) ) < nl > } < nl > + db . run ( action ) < nl > } < nl > - db . run ( action ) < nl > } < nl > < nl > override def doHandleDeleteMessage ( outPeer : ApiOutPeer , randomIds : IndexedSeq [ Long ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = < nl > diff - - git a / actor - server / project / Build . scala b / actor - server / project / Build . scala < nl > index f35f67f . . ab7842b 100644 < nl > - - - a / actor - server / project / Build . scala < nl > + + + b / actor - server / project / Build . scala < nl > @ @ - 82 , 7 + 82 , 8 @ @ object Build extends sbt . Build with Versioning with Releasing with Packaging { < nl > } , < nl > resolvers + + = Resolvers . seq , < nl > fork in Test : = false , < nl > - updateOptions : = updateOptions . value . withCachedResolution ( true ) < nl > + updateOptions : = updateOptions . value . withCachedResolution ( true ) , < nl > + addCompilerPlugin ( " com . github . ghik " % " silencer - plugin " % " 0 . 4 " ) < nl > ) < nl > < nl > lazy val root = Project ( < nl > @ @ - 174 , 8 + 175 , 7 @ @ object Build extends sbt . Build with Versioning with Releasing with Packaging { < nl > id = " actor - core " , < nl > base = file ( " actor - core " ) , < nl > settings = defaultSettingsServer + + SbtActorApi . settings + + Seq ( < nl > - libraryDependencies + + = Dependencies . core , < nl > - scalacOptions in Compile : = ( scalacOptions in Compile ) . value . filterNot ( _ = = " - Xfatal - warnings " ) < nl > + libraryDependencies + + = Dependencies . core < nl > ) < nl > ) < nl > . dependsOn ( actorCodecs , actorFileAdapter , actorModels , actorPersist , actorRuntime ) < nl > @ @ - 194 , 8 + 194 , 7 @ @ object Build extends sbt . Build with Versioning with Releasing with Packaging { < nl > id = " actor - enrich " , < nl > base = file ( " actor - enrich " ) , < nl > settings = defaultSettingsServer + + Seq ( < nl > - libraryDependencies + + = Dependencies . enrich , < nl > - scalacOptions in Compile : = ( scalacOptions in Compile ) . value . filterNot ( _ = = " - Xfatal - warnings " ) < nl > + libraryDependencies + + = Dependencies . enrich < nl > ) < nl > ) < nl > . dependsOn ( actorRpcApi , actorRuntime ) < nl > @ @ - 247 , 8 + 246 , 7 @ @ object Build extends sbt . Build with Versioning with Releasing with Packaging { < nl > id = " actor - rpc - api " , < nl > base = file ( " actor - rpc - api " ) , < nl > settings = defaultSettingsServer + + Seq ( < nl > - libraryDependencies + + = Dependencies . rpcApi , < nl > - scalacOptions in Compile : = ( scalacOptions in Compile ) . value . filterNot ( _ = = " - Xfatal - warnings " ) < nl > + libraryDependencies + + = Dependencies . rpcApi < nl > ) < nl > ) < nl > . dependsOn ( < nl > @ @ - 269 , 8 + 267 , 7 @ @ object Build extends sbt . Build with Versioning with Releasing with Packaging { < nl > id = " actor - fs - adapters " , < nl > base = file ( " actor - fs - adapters " ) , < nl > settings = defaultSettingsServer + + Seq ( < nl > - libraryDependencies + + = Dependencies . fileAdapter , < nl > - scalacOptions in Compile : = ( scalacOptions in Compile ) . value . filterNot ( _ = = " - Xfatal - warnings " ) < nl > + libraryDependencies + + = Dependencies . fileAdapter < nl > ) < nl > ) < nl > . dependsOn ( actorHttpApi , actorPersist ) < nl > @ @ - 279 , 8 + 276 , 7 @ @ object Build extends sbt . Build with Versioning with Releasing with Packaging { < nl > id = " actor - frontend " , < nl > base = file ( " actor - frontend " ) , < nl > settings = defaultSettingsServer + + Seq ( < nl > - libraryDependencies + + = Dependencies . frontend , < nl > - scalacOptions in Compile : = ( scalacOptions in Compile ) . value . filterNot ( _ = = " - Xfatal - warnings " ) < nl > + libraryDependencies + + = Dependencies . frontend < nl > ) < nl > ) < nl > . dependsOn ( actorCore , actorSession ) < nl > diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala < nl > index e466c43 . . 446beaa 100644 < nl > - - - a / actor - server / project / Dependencies . scala < nl > + + + b / actor - server / project / Dependencies . scala < nl > @ @ - 109 , 6 + 109 , 7 @ @ object Dependencies { < nl > val guava = " com . google . guava " % " guava " % " 19 . 0 " < nl > val alpn = " org . eclipse . jetty . alpn " % " alpn - api " % " 1 . 1 . 2 . v20150522 " % " runtime " < nl > val tcnative = " io . netty " % " netty - tcnative " % " 1 . 1 . 33 . Fork15 " classifier " linux - x86 _ 64 " < nl > + val silencer = " com . github . ghik " % " silencer - lib " % " 0 . 4 " < nl > } < nl > < nl > object Testing { < nl > @ @ - 134 , 7 + 135 , 8 @ @ object Dependencies { < nl > scalaLogging , < nl > tyrex , < nl > kamonCore , < nl > - kamonDatadog < nl > + kamonDatadog , < nl > + silencer < nl > ) < nl > < nl > val root = shared + + Seq (
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto < nl > index bfc8566 . . 654125b 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / group . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / group . proto < nl > @ @ - 155 , 4 + 155 , 11 @ @ message GroupEvents { < nl > required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; < nl > required int32 executor _ user _ id = 2 ; < nl > } < nl > + < nl > + message GroupDeleted { < nl > + option ( scalapb . message ) . extends = " im . actor . server . group . GroupEvent " ; < nl > + < nl > + required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; < nl > + required int32 executor _ user _ id = 2 ; < nl > + } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / protobuf / groupV2 . proto b / actor - server / actor - core / src / main / protobuf / groupV2 . proto < nl > index 2f8eaee . . 3d524d5 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / groupV2 . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / groupV2 . proto < nl > @ @ - 37 , 6 + 37 , 7 @ @ message GroupEnvelope { < nl > GroupCommands . DismissUserAdmin dismiss _ user _ admin = 28 ; < nl > GroupCommands . TransferOwnership transfer _ ownership = 14 ; < nl > GroupCommands . UpdateAdminSettings update _ admin _ settings = 30 ; < nl > + GroupCommands . DeleteGroup delete _ group = 33 ; < nl > } < nl > oneof query { < nl > GroupQueries . GetAccessHash get _ access _ hash = 15 ; < nl > @ @ - 204 , 6 + 205 , 13 @ @ message GroupCommands { < nl > int32 client _ user _ id = 1 ; < nl > int64 client _ auth _ id = 2 ; < nl > } < nl > + < nl > + message DeleteGroup { < nl > + option ( scalapb . message ) . extends = " GroupCommand " ; < nl > + < nl > + int32 client _ user _ id = 1 ; < nl > + int64 client _ auth _ id = 2 ; < nl > + } < nl > } < nl > < nl > message GroupQueries { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala < nl > index 66cb42f . . 3647567 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala < nl > @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . api < nl > import akka . http . scaladsl . util . FastFuture < nl > import cats . data . Xor < nl > import im . actor . server . CommonErrors < nl > - import im . actor . server . group . GroupErrors . GroupNotFound < nl > + import im . actor . server . group . GroupErrors . { GroupAlreadyDeleted , GroupNotFound } < nl > import im . actor . server . office . EntityNotFoundError < nl > import im . actor . server . user . UserErrors . UserNotFound < nl > < nl > @ @ - 16 , 6 + 16 , 7 @ @ package object rpc extends PeersImplicits with HistoryImplicits with DialogConve < nl > < nl > object CommonRpcErrors { < nl > val GroupNotFound = RpcError ( 404 , " GROUP _ NOT _ FOUND " , " " , false , None ) < nl > + val GroupDeleted = RpcError ( 404 , " GROUP _ DELETED " , " " , false , None ) < nl > val InvalidAccessHash = RpcError ( 403 , " INVALID _ ACCESS _ HASH " , " " , false , None ) < nl > val UnsupportedRequest = RpcError ( 400 , " REQUEST _ NOT _ SUPPORTED " , " Operation not supported . " , false , None ) < nl > val UserNotAuthorized = RpcError ( 403 , " USER _ NOT _ AUTHORIZED " , " " , false , None ) < nl > @ @ - 23 , 14 + 24 , 15 @ @ package object rpc extends PeersImplicits with HistoryImplicits with DialogConve < nl > val UserPhoneNotFound = RpcError ( 404 , " USER _ PHONE _ NOT _ FOUND " , " " , false , None ) < nl > val EntityNotFound = RpcError ( 404 , " ENTITY _ NOT _ FOUND " , " " , false , None ) < nl > val NotSupportedInOss = RpcError ( 400 , " NOT _ SUPPORTED _ IN _ OSS " , " Feature is not supported in the Open - Source version . " , canTryAgain = false , None ) < nl > - val IntenalError = RpcError ( 500 , " INTERNAL _ ERROR " , " " , false , None ) < nl > + val InternalError = RpcError ( 500 , " INTERNAL _ ERROR " , " " , false , None ) < nl > < nl > def forbidden ( userMessage : String = " You are not allowed to do this . " ) = RpcError ( 403 , " FORBIDDEN " , userMessage , false , None ) < nl > } < nl > < nl > def recoverCommon : PartialFunction [ Throwable , RpcError ] = { < nl > - case UserNotFound ( _ ) ⇒ CommonRpcErrors . UserNotFound < nl > - case GroupNotFound ( _ ) ⇒ CommonRpcErrors . GroupNotFound < nl > + case _ : UserNotFound ⇒ CommonRpcErrors . UserNotFound < nl > + case _ : GroupNotFound ⇒ CommonRpcErrors . GroupNotFound < nl > + case _ : GroupAlreadyDeleted ⇒ CommonRpcErrors . GroupDeleted < nl > case EntityNotFoundError ⇒ CommonRpcErrors . EntityNotFound < nl > case CommonErrors . Forbidden ( message ) ⇒ CommonRpcErrors . forbidden ( message ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > index 6d304ea . . e3dda14 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > @ @ - 7 , 13 + 7 , 14 @ @ import akka . pattern . pipe < nl > import akka . http . scaladsl . util . FastFuture < nl > import im . actor . api . rpc . { PeersImplicits , Update } < nl > import im . actor . api . rpc . groups . _ < nl > + import im . actor . api . rpc . messaging . UpdateChatClear < nl > import im . actor . concurrent . FutureExt < nl > import im . actor . server . CommonErrors < nl > import im . actor . server . acl . ACLUtils < nl > - import im . actor . server . group . GroupCommands . { DismissUserAdmin , MakeHistoryShared , MakeUserAdmin , RevokeIntegrationToken , RevokeIntegrationTokenAck , TransferOwnership , UpdateAdminSettings , UpdateAdminSettingsAck } < nl > + import im . actor . server . group . GroupCommands . { DeleteGroup , DismissUserAdmin , MakeHistoryShared , MakeUserAdmin , RevokeIntegrationToken , RevokeIntegrationTokenAck , TransferOwnership , UpdateAdminSettings , UpdateAdminSettingsAck } < nl > import im . actor . server . group . GroupErrors . { NotAMember , NotAdmin , UserAlreadyAdmin , UserAlreadyNotAdmin } < nl > - import im . actor . server . group . GroupEvents . { AdminSettingsUpdated , AdminStatusChanged , HistoryBecameShared , IntegrationTokenRevoked , OwnerChanged } < nl > - import im . actor . server . persist . { GroupBotRepo , GroupUserRepo } < nl > + import im . actor . server . group . GroupEvents . { AdminSettingsUpdated , AdminStatusChanged , GroupDeleted , HistoryBecameShared , IntegrationTokenRevoked , OwnerChanged } < nl > + import im . actor . server . persist . { GroupBotRepo , GroupUserRepo , HistoryMessageRepo } < nl > import im . actor . server . sequence . { SeqState , SeqStateDate } < nl > < nl > import scala . concurrent . Future < nl > @ @ - 225 , 7 + 226 , 25 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { < nl > val newState = commit ( evt ) < nl > val memberIds = newState . memberIds < nl > < nl > + val prevOwnerUpdates = List ( < nl > + UpdateGroupCanLeaveChanged ( groupId , canLeaveChanged = true ) , < nl > + UpdateGroupCanDeleteChanged ( groupId , canDeleteChanged = false ) < nl > + ) < nl > + < nl > + val newOwnerUpdates = List ( < nl > + UpdateGroupCanLeaveChanged ( groupId , canLeaveChanged = false ) , < nl > + UpdateGroupCanDeleteChanged ( groupId , canDeleteChanged = true ) < nl > + ) < nl > + < nl > val result : Future [ SeqState ] = for { < nl > + / / push updates to previous owner < nl > + _ ← FutureExt . ftraverse ( prevOwnerUpdates ) { update ⇒ < nl > + seqUpdExt . deliverUserUpdate ( cmd . clientUserId , update ) < nl > + } < nl > + / / push updates to new owner < nl > + _ ← FutureExt . ftraverse ( newOwnerUpdates ) { update ⇒ < nl > + seqUpdExt . deliverUserUpdate ( cmd . newOwnerId , update ) < nl > + } < nl > seqState ← seqUpdExt . broadcastClientUpdate ( < nl > userId = cmd . clientUserId , < nl > authId = cmd . clientAuthId , < nl > @ @ - 320 , 4 + 339 , 49 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { < nl > } < nl > } < nl > < nl > + protected def deleteGroup ( cmd : DeleteGroup ) : Unit = { < nl > + if ( ! state . permissions . canDelete ( cmd . clientUserId ) ) { < nl > + sender ( ) ! noPermission < nl > + } else { < nl > + persist ( GroupDeleted ( Instant . now , cmd . clientUserId ) ) { evt ⇒ < nl > + val newState = commit ( evt ) < nl > + < nl > + val deleteGroupMembersUpdates : Vector [ Update ] = Vector ( < nl > + UpdateGroupCanSendMessagesChanged ( groupId , canSendMessages = false ) , < nl > + UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = false ) , < nl > + UpdateGroupCanEditInfoChanged ( groupId , canEditGroup = false ) , < nl > + UpdateGroupCanEditUsernameChanged ( groupId , canEditUsername = false ) , < nl > + UpdateGroupCanEditAdminsChanged ( groupId , canAssignAdmins = false ) , < nl > + UpdateGroupCanViewAdminsChanged ( groupId , canViewAdmins = false ) , < nl > + UpdateGroupCanEditAdminSettingsChanged ( groupId , canEditAdminSettings = false ) , < nl > + UpdateGroupCanInviteMembersChanged ( groupId , canInviteMembers = false ) , < nl > + UpdateGroupCanInviteViaLink ( groupId , canInviteViaLink = false ) , < nl > + UpdateGroupCanLeaveChanged ( groupId , canLeaveChanged = false ) , < nl > + UpdateGroupCanDeleteChanged ( groupId , canDeleteChanged = false ) , < nl > + UpdateGroupMemberChanged ( groupId , isMember = false ) , < nl > + / / if channel , or group is big enough < nl > + if ( newState . groupType . isChannel ) < nl > + UpdateGroupMembersCountChanged ( groupId , membersCount = 0 ) < nl > + else < nl > + UpdateGroupMembersUpdated ( groupId , members = Vector . empty ) < nl > + ) < nl > + < nl > + val result : Future [ SeqState ] = for { < nl > + _ ← db . run ( HistoryMessageRepo . deleteAll ( cmd . clientUserId , apiGroupPeer . asModel ) ) < nl > + _ ← Future . traverse ( deleteGroupMembersUpdates ) { update ⇒ < nl > + seqUpdExt . broadcastPeopleUpdate ( newState . memberIds , update ) < nl > + } < nl > + seqState ← seqUpdExt . broadcastClientUpdate ( < nl > + cmd . clientUserId , < nl > + cmd . clientAuthId , < nl > + bcastUserIds = state . memberIds - cmd . clientUserId , < nl > + update = UpdateChatClear ( apiGroupPeer ) < nl > + ) < nl > + } yield seqState < nl > + < nl > + result pipeTo sender ( ) < nl > + } < nl > + } < nl > + } < nl > + < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala < nl > index 06174a9 . . d2e06a8 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala < nl > @ @ - 7 , 6 + 7 , 8 @ @ import scala . util . control . NoStackTrace < nl > object GroupErrors { < nl > final case class GroupNotFound ( id : Int ) extends EntityNotFound ( s " Group $ id not found " ) < nl > < nl > + final case class GroupAlreadyDeleted ( id : Int ) extends EntityNotFound ( s " Group $ id deleted " ) < nl > + < nl > final case class GroupIdAlreadyExists ( id : Int ) extends Exception with NoStackTrace < nl > < nl > object NotAMember extends Exception ( " Not a group member " ) with NoStackTrace < nl > @ @ - 38 , 4 + 40 , 6 @ @ object GroupErrors { < nl > case object BlockedByUser extends Exception with NoStackTrace < nl > < nl > case object NoPermission extends Exception with NoStackTrace < nl > + < nl > + case object CantLeaveGroup extends Exception with NoStackTrace < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > index f9cca5f . . fdbb22e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > @ @ - 122 , 6 + 122 , 11 @ @ private [ group ] sealed trait Commands extends UserAcl { < nl > GroupEnvelope ( groupId ) < nl > . withMakeHistoryShared ( MakeHistoryShared ( clientUserId , clientAuthId ) ) ) . mapTo [ SeqState ] < nl > < nl > + def deleteGroup ( groupId : Int , clientUserId : Int , clientAuthId : Long ) : Future [ SeqState ] = < nl > + ( processorRegion . ref ? < nl > + GroupEnvelope ( groupId ) < nl > + . withDeleteGroup ( DeleteGroup ( clientUserId , clientAuthId ) ) ) . mapTo [ SeqState ] < nl > + < nl > } < nl > < nl > private [ group ] sealed trait Queries { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > index b6c9c45 . . 3e24dc5 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > @ @ - 50 , 6 + 50 , 7 @ @ object GroupProcessor { < nl > 20023 → classOf [ GroupCommands . DismissUserAdmin ] , < nl > 20024 → classOf [ GroupCommands . UpdateAdminSettings ] , < nl > 20025 → classOf [ GroupCommands . MakeHistoryShared ] , < nl > + 20026 → classOf [ GroupCommands . DeleteGroup ] , < nl > < nl > 21001 → classOf [ GroupQueries . GetIntegrationToken ] , < nl > 21002 → classOf [ GroupQueries . GetIntegrationTokenResponse ] , < nl > @ @ - 90 , 7 + 91 , 8 @ @ object GroupProcessor { < nl > 22018 → classOf [ GroupEvents . ShortNameUpdated ] , < nl > 22019 → classOf [ GroupEvents . AdminSettingsUpdated ] , < nl > 22020 → classOf [ GroupEvents . AdminStatusChanged ] , < nl > - 22021 → classOf [ GroupEvents . HistoryBecameShared ] < nl > + 22021 → classOf [ GroupEvents . HistoryBecameShared ] , < nl > + 22022 → classOf [ GroupEvents . GroupDeleted ] < nl > ) < nl > < nl > def persistenceIdFor ( groupId : Int ) : String = s " Group - $ { groupId } " < nl > @ @ - 125 , 6 + 127 , 7 @ @ private [ group ] final class GroupProcessor < nl > case c : Create if state . isNotCreated ⇒ create ( c ) < nl > case _ : Create ⇒ sender ( ) ! Status . Failure ( GroupIdAlreadyExists ( groupId ) ) < nl > case _ : GroupCommand if state . isNotCreated ⇒ sender ( ) ! Status . Failure ( GroupNotFound ( groupId ) ) < nl > + case _ : GroupCommand if state . isDeleted ⇒ sender ( ) ! Status . Failure ( GroupAlreadyDeleted ( groupId ) ) < nl > < nl > / / members actions < nl > case i : Invite ⇒ invite ( i ) < nl > @ @ - 146 , 15 + 149 , 15 @ @ private [ group ] final class GroupProcessor < nl > case t : TransferOwnership ⇒ transferOwnership ( t ) < nl > case s : UpdateAdminSettings ⇒ updateAdminSettings ( s ) < nl > case m : MakeHistoryShared ⇒ makeHistoryShared ( m ) < nl > - < nl > - / / termination actions < nl > - case StopProcessor ⇒ context stop self < nl > - case ReceiveTimeout ⇒ context . parent ! ShardRegion . Passivate ( stopMessage = StopProcessor ) < nl > + case d : DeleteGroup ⇒ deleteGroup ( d ) < nl > < nl > / / dialogs envelopes coming through group . < nl > case de : DialogEnvelope ⇒ < nl > groupPeerActor forward de . getAllFields . values . head < nl > < nl > + / / actor ' s lifecycle < nl > + case StopProcessor ⇒ context stop self < nl > + case ReceiveTimeout ⇒ context . parent ! ShardRegion . Passivate ( stopMessage = StopProcessor ) < nl > } < nl > < nl > / / TODO : add backoff < nl > @ @ - 165 , 6 + 168 , 7 @ @ private [ group ] final class GroupProcessor < nl > < nl > protected def handleQuery : PartialFunction [ Any , Future [ Any ] ] = { < nl > case _ : GroupQuery if state . isNotCreated ⇒ FastFuture . failed ( GroupNotFound ( groupId ) ) < nl > + case _ : GroupQuery if state . isDeleted ⇒ FastFuture . failed ( GroupAlreadyDeleted ( groupId ) ) < nl > case GetAccessHash ( ) ⇒ getAccessHash < nl > case GetTitle ( ) ⇒ getTitle < nl > case GetIntegrationToken ( optClient ) ⇒ getIntegrationToken ( optClient ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > index e6de46c . . b6527fb 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > @ @ - 136 , 9 + 136 , 9 @ @ trait GroupQueryHandlers { < nl > canEditAdminList = Some ( state . permissions . canEditAdmins ( clientUserId ) ) , < nl > canViewAdminList = Some ( state . permissions . canViewAdmins ( clientUserId ) ) , < nl > canEditAdminSettings = Some ( state . permissions . canEditAdminSettings ( clientUserId ) ) , < nl > - canInviteViaLink = None , < nl > - canDelete = None , < nl > - canLeave = None < nl > + canInviteViaLink = Some ( state . permissions . canInviteViaLink ( clientUserId ) ) , < nl > + canDelete = Some ( state . permissions . canDelete ( clientUserId ) ) , < nl > + canLeave = Some ( state . permissions . canLeave ( clientUserId ) ) < nl > ) < nl > ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > index 77ec517 . . fa51af8 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > @ @ - 88 , 6 + 88 , 7 @ @ private [ group ] object GroupState { < nl > accessHash = 0L , < nl > adminSettings = AdminSettings . PlainDefault , < nl > bot = None , < nl > + deletedAt = None , < nl > < nl > / / ? ? ? < nl > extensions = Map . empty < nl > @ @ - 120 , 6 + 121 , 7 @ @ private [ group ] final case class GroupState ( < nl > accessHash : Long , < nl > adminSettings : AdminSettings , < nl > bot : Option [ Bot ] , < nl > + deletedAt : Option [ Instant ] , < nl > extensions : Map [ Int , Array [ Byte ] ] < nl > ) extends ProcessorState [ GroupState ] { < nl > < nl > @ @ - 148 , 6 + 150 , 8 @ @ private [ group ] final case class GroupState ( < nl > < nl > val isCreated = createdAt . nonEmpty < nl > < nl > + val isDeleted = deletedAt . nonEmpty < nl > + < nl > / / TODO : add on commit ( not during recovery ! ) hook to make group with async members , when more than 100 < nl > def isAsyncMembers = < nl > groupType match { < nl > @ @ - 262 , 6 + 266 , 8 @ @ private [ group ] final case class GroupState ( < nl > this . copy ( adminSettings = AdminSettings . fromBitMask ( bitMask ) ) < nl > case HistoryBecameShared ( _ , _ ) ⇒ < nl > this . copy ( isHistoryShared = true ) < nl > + case GroupDeleted ( ts , _ ) ⇒ < nl > + this . copy ( deletedAt = Some ( ts ) ) < nl > < nl > / / deprecated events < nl > case UserBecameAdmin ( _ , userId , _ ) ⇒ < nl > @ @ - 310 , 6 + 316 , 12 @ @ private [ group ] final case class GroupState ( < nl > ( isMember ( clientUserId ) & & adminSettings . canMembersInvite ) < nl > < nl > / * * < nl > + * only owner and admins can invite via link < nl > + * / < nl > + def canInviteViaLink ( clientUserId : Int ) = < nl > + isOwner ( clientUserId ) | | isAdmin ( clientUserId ) < nl > + < nl > + / * * < nl > * owner and admins can kick members < nl > * / < nl > def canKickMember ( clientUserId : Int ) = < nl > @ @ - 344 , 5 + 356 , 16 @ @ private [ group ] final case class GroupState ( < nl > < nl > / / only owner can change admin settings < nl > def canEditAdminSettings ( clientUserId : Int ) : Boolean = isOwner ( clientUserId ) < nl > + < nl > + / / only owner can delete group < nl > + def canDelete ( clientUserId : Int ) : Boolean = isOwner ( clientUserId ) < nl > + < nl > + / * * < nl > + * for now , owner can ' t leave group . < nl > + * He can either transfer ownership and leave group < nl > + * or delete group completely . < nl > + * / < nl > + def canLeave ( clientUserId : Int ) : Boolean = ! isOwner ( clientUserId ) < nl > + < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala < nl > index e974152 . . b4df43f 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala < nl > @ @ - 10 , 6 + 10 , 7 @ @ import im . actor . api . rpc . messaging . { ApiServiceMessage , UpdateMessage } < nl > import im . actor . concurrent . FutureExt < nl > import im . actor . server . acl . ACLUtils < nl > import im . actor . server . group . GroupCommands . { Invite , Join , Kick , Leave } < nl > + import im . actor . server . group . GroupErrors . CantLeaveGroup < nl > import im . actor . server . group . GroupEvents . { UserInvited , UserJoined , UserKicked , UserLeft } < nl > import im . actor . server . persist . { GroupInviteTokenRepo , GroupUserRepo } < nl > import im . actor . server . sequence . { Optimization , SeqState , SeqStateDate } < nl > @ @ - 336 , 6 + 337 , 8 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > protected def leave ( cmd : Leave ) : Unit = { < nl > if ( state . nonMember ( cmd . userId ) ) { < nl > sender ( ) ! notMember < nl > + } else if ( ! state . permissions . canLeave ( cmd . userId ) ) { < nl > + sender ( ) ! Status . Failure ( CantLeaveGroup ) < nl > } else { < nl > persist ( UserLeft ( Instant . now , cmd . userId ) ) { evt ⇒ < nl > / / no commit here . it will be after service message sent < nl > @ @ - 344 , 28 + 347 , 32 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > < nl > val updateObsolete = UpdateGroupUserLeaveObsolete ( groupId , cmd . userId , dateMillis , cmd . randomId ) < nl > < nl > - / / TODO : merge , they are almost identical < nl > - val leftUserUpdatesNew = < nl > - if ( state . groupType . isChannel ) List ( < nl > - UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = false ) , < nl > - UpdateGroupCanEditInfoChanged ( groupId , canEditGroup = false ) , < nl > - UpdateGroupCanEditUsernameChanged ( groupId , canEditUsername = false ) , < nl > - UpdateGroupCanEditAdminsChanged ( groupId , canAssignAdmins = false ) , < nl > - UpdateGroupCanViewAdminsChanged ( groupId , canViewAdmins = false ) , < nl > - UpdateGroupCanEditAdminSettingsChanged ( groupId , canEditAdminSettings = false ) , < nl > - UpdateGroupCanInviteMembersChanged ( groupId , canInviteMembers = false ) < nl > - ) < nl > - else List ( < nl > + val leftUserUpdatesNew : Vector [ Update ] = { < nl > + val commonUpdates = Vector ( < nl > + UpdateGroupCanSendMessagesChanged ( groupId , canSendMessages = false ) , < nl > UpdateGroupCanEditInfoChanged ( groupId , canEditGroup = false ) , < nl > UpdateGroupCanEditUsernameChanged ( groupId , canEditUsername = false ) , < nl > UpdateGroupCanEditAdminsChanged ( groupId , canAssignAdmins = false ) , < nl > UpdateGroupCanViewAdminsChanged ( groupId , canViewAdmins = false ) , < nl > UpdateGroupCanEditAdminSettingsChanged ( groupId , canEditAdminSettings = false ) , < nl > - UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = false ) , < nl > - UpdateGroupMembersUpdated ( groupId , members = Vector . empty ) , < nl > - UpdateGroupCanInviteMembersChanged ( groupId , canInviteMembers = false ) < nl > + UpdateGroupCanInviteViaLink ( groupId , canInviteViaLink = false ) , < nl > + UpdateGroupCanLeaveChanged ( groupId , canLeaveChanged = false ) , < nl > + UpdateGroupCanDeleteChanged ( groupId , canDeleteChanged = false ) < nl > ) < nl > < nl > + if ( state . groupType . isChannel ) { < nl > + ( UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = false ) + : < nl > + commonUpdates ) : + < nl > + UpdateGroupCanInviteMembersChanged ( groupId , canInviteMembers = false ) < nl > + } else { < nl > + commonUpdates + + Vector ( < nl > + UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = false ) , < nl > + UpdateGroupMembersUpdated ( groupId , members = Vector . empty ) , < nl > + UpdateGroupCanInviteMembersChanged ( groupId , canInviteMembers = false ) < nl > + ) < nl > + } < nl > + } < nl > + < nl > val membersUpdateNew = < nl > if ( state . groupType . isChannel ) { / / if channel , or group is big enough < nl > UpdateGroupMembersCountChanged ( < nl > @ @ - 485 , 30 + 492 , 31 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > < nl > val updateObsolete = UpdateGroupUserKickObsolete ( groupId , cmd . kickedUserId , cmd . kickerUserId , dateMillis , cmd . randomId ) < nl > < nl > - / / TODO : merge , they are almost identical < nl > - val kickedUserUpdatesNew : List [ Update ] = < nl > - if ( state . groupType . isChannel ) List ( < nl > + val kickedUserUpdatesNew : Vector [ Update ] = { < nl > + val commonUpdates = Vector ( < nl > UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = false ) , < nl > + UpdateGroupCanSendMessagesChanged ( groupId , canSendMessages = false ) , < nl > UpdateGroupCanEditInfoChanged ( groupId , canEditGroup = false ) , < nl > UpdateGroupCanEditUsernameChanged ( groupId , canEditUsername = false ) , < nl > UpdateGroupCanEditAdminsChanged ( groupId , canAssignAdmins = false ) , < nl > UpdateGroupCanViewAdminsChanged ( groupId , canViewAdmins = false ) , < nl > UpdateGroupCanEditAdminSettingsChanged ( groupId , canEditAdminSettings = false ) , < nl > UpdateGroupCanInviteMembersChanged ( groupId , canInviteMembers = false ) , < nl > - UpdateGroupMemberChanged ( groupId , isMember = false ) < nl > - ) < nl > - else List ( < nl > - UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = false ) , < nl > - UpdateGroupCanEditInfoChanged ( groupId , canEditGroup = false ) , < nl > - UpdateGroupCanEditUsernameChanged ( groupId , canEditUsername = false ) , < nl > - UpdateGroupCanEditAdminsChanged ( groupId , canAssignAdmins = false ) , < nl > - UpdateGroupCanViewAdminsChanged ( groupId , canViewAdmins = false ) , < nl > - UpdateGroupCanEditAdminSettingsChanged ( groupId , canEditAdminSettings = false ) , < nl > - UpdateGroupCanInviteMembersChanged ( groupId , canInviteMembers = false ) , < nl > - UpdateGroupMembersUpdated ( groupId , members = Vector . empty ) , < nl > - UpdateGroupMemberChanged ( groupId , isMember = false ) < nl > + UpdateGroupCanInviteViaLink ( groupId , canInviteViaLink = false ) , < nl > + UpdateGroupCanLeaveChanged ( groupId , canLeaveChanged = false ) , < nl > + UpdateGroupCanDeleteChanged ( groupId , canDeleteChanged = false ) < nl > ) < nl > < nl > + if ( state . groupType . isChannel ) { < nl > + commonUpdates : + UpdateGroupMemberChanged ( groupId , isMember = false ) < nl > + } else { < nl > + commonUpdates + + Vector ( < nl > + UpdateGroupMembersUpdated ( groupId , members = Vector . empty ) , < nl > + UpdateGroupMemberChanged ( groupId , isMember = false ) < nl > + ) < nl > + } < nl > + } < nl > + < nl > val membersUpdateNew : Update = < nl > if ( newState . groupType . isChannel ) { / / if channel , or group is big enough < nl > UpdateGroupMembersCountChanged ( < nl > @ @ - 618 , 7 + 626 , 6 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > < nl > / / Updates that will be sent to user , when he enters group . < nl > / / Helps clients that have this group to refresh it ' s data . < nl > - / / TODO : review when channels will be added < nl > private def refreshGroupUpdates ( newState : GroupState , userId : Int ) : List [ Update ] = List ( < nl > UpdateGroupMemberChanged ( groupId , isMember = true ) , < nl > UpdateGroupAboutChanged ( groupId , newState . about ) , < nl > @ @ - 626 , 8 + 633 , 17 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > UpdateGroupTopicChanged ( groupId , newState . topic ) , < nl > UpdateGroupTitleChanged ( groupId , newState . title ) , < nl > UpdateGroupOwnerChanged ( groupId , newState . ownerUserId ) , < nl > - UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = newState . permissions . canViewMembers ( userId ) ) , < nl > - UpdateGroupCanInviteMembersChanged ( groupId , canInviteMembers = true ) / / TODO : figure out right value < nl > + UpdateGroupCanSendMessagesChanged ( groupId , newState . permissions . canSendMessage ( userId ) ) , < nl > + UpdateGroupCanViewMembersChanged ( groupId , newState . permissions . canViewMembers ( userId ) ) , < nl > + UpdateGroupCanInviteMembersChanged ( groupId , newState . permissions . canInvitePeople ( userId ) ) , < nl > + UpdateGroupCanEditInfoChanged ( groupId , newState . permissions . canEditInfo ( userId ) ) , < nl > + UpdateGroupCanEditUsernameChanged ( groupId , newState . permissions . canEditShortName ( userId ) ) , < nl > + UpdateGroupCanEditAdminsChanged ( groupId , newState . permissions . canEditAdmins ( userId ) ) , < nl > + UpdateGroupCanViewAdminsChanged ( groupId , newState . permissions . canViewAdmins ( userId ) ) , < nl > + UpdateGroupCanInviteViaLink ( groupId , newState . permissions . canInviteViaLink ( userId ) ) , < nl > + UpdateGroupCanLeaveChanged ( groupId , newState . permissions . canLeave ( userId ) ) , < nl > + UpdateGroupCanDeleteChanged ( groupId , newState . permissions . canDelete ( userId ) ) , < nl > + UpdateGroupCanEditAdminSettingsChanged ( groupId , newState . permissions . canEditAdminSettings ( userId ) ) < nl > / / UpdateGroupExtChanged ( groupId , newState . extension ) / / TODO : figure out and fix < nl > / / if ( bigGroup ) UpdateGroupMembersCountChanged ( groupId , newState . extension ) < nl > ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / Optimization . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / Optimization . scala < nl > index 7f51787 . . e74b725 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / Optimization . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / Optimization . scala < nl > @ @ - 50 , 7 + 50 , 10 @ @ object Optimization extends MessageParsing { < nl > UpdateGroupCanEditUsernameChanged . header , < nl > UpdateGroupCanEditAdminsChanged . header , < nl > UpdateGroupCanViewAdminsChanged . header , < nl > - UpdateGroupCanEditAdminSettingsChanged . header < nl > + UpdateGroupCanEditAdminSettingsChanged . header , < nl > + UpdateGroupCanInviteViaLink . header , < nl > + UpdateGroupCanLeaveChanged . header , < nl > + UpdateGroupCanDeleteChanged . header < nl > ) < nl > if ( deliveryTag = = GroupV2 ) < nl > emptyUpdate < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala < nl > index 6d67738 . . af4797e 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala < nl > @ @ - 7 , 7 + 7 , 7 @ @ import im . actor . api . rpc . CommonRpcErrors . InvalidAccessHash < nl > import im . actor . api . rpc . peers . _ < nl > import im . actor . server . acl . ACLUtils . _ < nl > import im . actor . server . db . DbExtension < nl > - import im . actor . server . group . GroupErrors . GroupNotFound < nl > + import im . actor . server . group . GroupErrors . { GroupAlreadyDeleted , GroupNotFound } < nl > import im . actor . server . user . UserErrors . UserNotFound < nl > import slick . dbio . DBIO < nl > < nl > @ @ - 83 , 8 + 83 , 9 @ @ object PeerHelpers { < nl > } < nl > < nl > private def handleNotFound : PartialFunction [ Throwable , RpcError ] = { < nl > - case _ : UserNotFound ⇒ CommonRpcErrors . UserNotFound < nl > - case _ : GroupNotFound ⇒ CommonRpcErrors . GroupNotFound < nl > - case e ⇒ throw e < nl > + case _ : UserNotFound ⇒ CommonRpcErrors . UserNotFound < nl > + case _ : GroupNotFound ⇒ CommonRpcErrors . GroupNotFound < nl > + case _ : GroupAlreadyDeleted ⇒ CommonRpcErrors . GroupDeleted < nl > + case e ⇒ throw e < nl > } < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala < nl > index ec63b7c . . f75bfaf 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala < nl > @ @ - 6 , 7 + 6 , 7 @ @ import java . time . temporal . ChronoUnit < nl > import akka . actor . _ < nl > import akka . http . scaladsl . util . FastFuture < nl > import cats . data . Xor < nl > - import im . actor . api . rpc . CommonRpcErrors . IntenalError < nl > + import im . actor . api . rpc . CommonRpcErrors . InternalError < nl > import im . actor . api . rpc . FileRpcErrors . UnsupportedSignatureAlgorithm < nl > import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . files . _ < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala < nl > index 83e425b . . ecf61be 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala < nl > @ @ - 18 , 6 + 18 , 7 @ @ object GroupRpcErrors { < nl > val InvalidInviteToken = RpcError ( 403 , " INVALID _ INVITE _ TOKEN " , " Invalid invite token ! " , false , None ) < nl > val InvalidInviteGroup = RpcError ( 403 , " INVALID _ INVITE _ GROUP " , " Invalid group name provided ! " , false , None ) < nl > val GroupNotPublic = RpcError ( 400 , " GROUP _ IS _ NOT _ PUBLIC " , " The group is not public . " , false , None ) < nl > + val CantLeaveGroup = RpcError ( 403 , " CANT _ LEAVE _ GROUP " , " You can ' t leave this group ! " , false , None ) < nl > val InvalidShortName = RpcError ( 400 , " GROUP _ SHORT _ NAME _ INVALID " , < nl > " Invalid group short name . Valid short name should contain from 5 to 32 characters , and may consist of latin characters , numbers and underscores " , false , None ) < nl > val ShortNameTaken = RpcError ( 400 , " GROUP _ SHORT _ NAME _ TAKEN " , " This short name already belongs to other user or group , we are sorry ! " , false , None ) < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > index fc654f9 . . 7e03397 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > @ @ - 16 , 7 + 16 , 7 @ @ import im . actor . api . rpc . users . ApiUser < nl > import im . actor . concurrent . FutureExt < nl > import im . actor . server . acl . ACLUtils < nl > import im . actor . server . db . DbExtension < nl > - import im . actor . server . file . { FileErrors , FileStorageAdapter , FileStorageExtension , ImageUtils } < nl > + import im . actor . server . file . { FileErrors , ImageUtils } < nl > import im . actor . server . group . _ < nl > import im . actor . server . model . GroupInviteToken < nl > import im . actor . server . names . GlobalNamesStorageKeyValueStorage < nl > @ @ - 459 , 7 + 459 , 23 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act < nl > } < nl > } < nl > < nl > - protected def doHandleDeleteGroup ( groupPeer : ApiGroupOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = ? ? ? < nl > + protected def doHandleDeleteGroup ( groupPeer : ApiGroupOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = < nl > + authorized ( clientData ) { client ⇒ < nl > + withGroupOutPeer ( groupPeer ) { < nl > + for { < nl > + SeqState ( seq , state ) ← groupExt . deleteGroup ( groupPeer . groupId , client . userId , client . authId ) < nl > + } yield Ok ( ResponseSeq ( seq , state . toByteArray ) ) < nl > + } < nl > + } < nl > + < nl > + protected def doHandleShareHistory ( groupPeer : ApiGroupOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = < nl > + authorized ( clientData ) { client ⇒ < nl > + withGroupOutPeer ( groupPeer ) { < nl > + for { < nl > + SeqState ( seq , state ) ← groupExt . makeHistoryShared ( groupPeer . groupId , client . userId , client . authId ) < nl > + } yield Ok ( ResponseSeq ( seq , state . toByteArray ) ) < nl > + } < nl > + } < nl > < nl > private def usersOrPeers ( userIds : Vector [ Int ] , stripEntities : Boolean ) ( implicit client : AuthorizedClientData ) : Future [ ( Vector [ ApiUser ] , Vector [ ApiUserOutPeer ] ) ] = < nl > if ( stripEntities ) { < nl > @ @ - 594 , 6 + 610 , 7 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act < nl > case GroupErrors . InvalidShortName ⇒ GroupRpcErrors . InvalidShortName < nl > case GroupErrors . ShortNameTaken ⇒ GroupRpcErrors . ShortNameTaken < nl > case GroupErrors . NoPermission ⇒ GroupRpcErrors . NoPermission < nl > + case GroupErrors . CantLeaveGroup ⇒ GroupRpcErrors . CantLeaveGroup < nl > } < nl > < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > index 1800806 . . affe506 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > @ @ - 46 , 6 + 46 , 7 @ @ trait HistoryHandlers { < nl > } < nl > } < nl > < nl > + / / FIXME : handle clear chat for groups with shared history < nl > override def doHandleClearChat ( peer : ApiOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = < nl > authorized ( clientData ) { implicit client ⇒ < nl > val update = UpdateChatClear ( peer . asPeer ) < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala < nl > index 7715069 . . 83a27e0 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala < nl > @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . server . api . rpc . service . messaging < nl > import akka . http . scaladsl . util . FastFuture < nl > import akka . util . Timeout < nl > import cats . data . Xor < nl > - import im . actor . api . rpc . CommonRpcErrors . IntenalError < nl > + import im . actor . api . rpc . CommonRpcErrors . InternalError < nl > import im . actor . api . rpc . { CommonRpcErrors , _ } < nl > import im . actor . api . rpc . messaging . _ < nl > import im . actor . api . rpc . misc . _ < nl > @ @ - 71 , 7 + 71 , 7 @ @ private [ messaging ] trait MessagingHandlers extends PeersImplicits < nl > ( for { < nl > histMessage ← fromFutureOption ( NotAllowedToEdit ) ( getEditableHistoryMessage ( peer , randomId ) ) < nl > _ ← fromBoolean ( NotInTimeWindow ) ( inTimeWindow ( histMessage . date . getMillis ) ) < nl > - apiMessage ← fromXor ( ( e : Any ) ⇒ IntenalError ) ( Xor . fromEither ( parseMessage ( histMessage . messageContentData ) ) ) < nl > + apiMessage ← fromXor ( ( e : Any ) ⇒ InternalError ) ( Xor . fromEither ( parseMessage ( histMessage . messageContentData ) ) ) < nl > _ ← fromBoolean ( NotTextMessage ) ( apiMessage match { < nl > case _ : ApiTextMessage ⇒ true < nl > case _ ⇒ false

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 index df37b3b . . 2e145fc 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 @ @ - 5 , 6 + 5 , 7 @ @ import java . time . Instant 
 import akka . actor . Status 
 import akka . pattern . pipe 
 import akka . http . scaladsl . util . FastFuture 
 + import com . github . ghik . silencer . silent 
 import im . actor . api . rpc . Update 
 import im . actor . api . rpc . groups . _ 
 import im . actor . api . rpc . messaging . UpdateChatClear 
 @ @ - 35 , 7 + 36 , 7 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { 
 val newState = commit ( evt ) 
 
 / / TODO : remove deprecated 
 - db . run ( GroupBotRepo . updateToken ( groupId , newToken ) ) 
 + db . run ( GroupBotRepo . updateToken ( groupId , newToken ) : @ silent ) 
 
 val result : Future [ RevokeIntegrationTokenAck ] = for { 
 _ ← oldToken match { 
 @ @ - 75 , 7 + 76 , 7 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { 
 val updateObsolete = UpdateGroupMembersUpdateObsolete ( groupId , members ) 
 
 / / TODO : remove deprecated 
 - db . run ( GroupUserRepo . makeAdmin ( groupId , cmd . candidateUserId ) ) 
 + db . run ( GroupUserRepo . makeAdmin ( groupId , cmd . candidateUserId ) : @ silent ) 
 
 val adminGROUPUpdates : Future [ SeqStateDate ] = 
 for { 
 @ @ - 160 , 7 + 161 , 7 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { 
 val updateObsolete = UpdateGroupMembersUpdateObsolete ( groupId , members ) 
 
 / / TODO : remove deprecated 
 - db . run ( GroupUserRepo . dismissAdmin ( groupId , cmd . targetUserId ) ) 
 + db . run ( GroupUserRepo . dismissAdmin ( groupId , cmd . targetUserId ) : @ silent ) 
 
 val adminGROUPUpdates : Future [ SeqState ] = 
 for { 
 @ @ - 340 , 8 + 341 , 8 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { 
 exMemberIds foreach { userId ⇒ 
 db . run ( 
 for { 
 - _ ← GroupUserRepo . delete ( groupId , userId ) 
 - _ ← GroupInviteTokenRepo . revoke ( groupId , userId ) 
 + _ ← GroupUserRepo . delete ( groupId , userId ) : @ silent 
 + _ ← GroupInviteTokenRepo . revoke ( groupId , userId ) : @ silent 
 } yield ( ) 
 ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index 0eb5380 . . dc3d858 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 5 , 6 + 5 , 7 @ @ import java . time . Instant 
 import akka . actor . Status 
 import akka . http . scaladsl . util . FastFuture 
 import akka . pattern . pipe 
 + import com . github . ghik . silencer . silent 
 import im . actor . api . rpc . Update 
 import im . actor . api . rpc . groups . _ 
 import im . actor . api . rpc . users . ApiSex 
 @ @ - 103 , 8 + 104 , 8 @ @ private [ group ] trait GroupCommandHandlers 
 ) , 
 cmd . randomId , 
 isHidden = false 
 - ) 
 - _ ← GroupUserRepo . create ( groupId , cmd . creatorUserId , cmd . creatorUserId , createdAt , None , isAdmin = true ) 
 + ) : @ silent 
 + _ ← GroupUserRepo . create ( groupId , cmd . creatorUserId , cmd . creatorUserId , createdAt , None , isAdmin = true ) : @ silent 
 } yield ( ) 
 ) 
 
 @ @ - 151 , 7 + 152 , 7 @ @ private [ group ] trait GroupCommandHandlers 
 val newState = commit ( evt ) 
 
 / / TODO : remove deprecated 
 - db . run ( GroupBotRepo . create ( groupId , botUserId , botToken ) ) 
 + db . run ( GroupBotRepo . create ( groupId , botUserId , botToken ) : @ silent ) 
 
 ( for { 
 _ ← userExt . create ( botUserId , ACLUtils . nextAccessSalt ( ) , None , " Bot " , " US " , ApiSex . Unknown , isBot = true ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala 
 index d2e06a8 . . 5080d09 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala 
 @ @ - 42 , 4 + 42 , 6 @ @ object GroupErrors { 
 case object NoPermission extends Exception with NoStackTrace 
 
 case object CantLeaveGroup extends Exception with NoStackTrace 
 + 
 + final case class IncorrectGroupType ( value : Int ) extends Exception with NoStackTrace 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupMigrator . scala 
 index ab83851 . . 4ccea6d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupMigrator . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupMigrator . scala 
 @ @ - 9 , 6 + 9 , 7 @ @ import scala . concurrent . { ExecutionContext , Future , Promise } 
 import akka . actor . { ActorSystem , Props } 
 import akka . pattern . pipe 
 import akka . persistence . RecoveryCompleted 
 + import com . github . ghik . silencer . silent 
 import im . actor . server . db . DbExtension 
 import org . joda . time . DateTime 
 import im . actor . server . event . TSEvent 
 @ @ - 49 , 12 + 50 , 12 @ @ private final class GroupMigrator ( promise : Promise [ Unit ] , groupId : Int ) extends 
 override def persistenceId = GroupProcessor . persistenceIdFor ( groupId ) 
 
 private def migrate ( ) : Unit = { 
 - db . run ( GroupRepo . findFull ( groupId ) ) foreach { 
 + db . run ( GroupRepo . findFull ( groupId ) : @ silent ) foreach { 
 case Some ( group ) ⇒ 
 db . run ( for { 
 avatarOpt ← AvatarDataRepo . findByGroupId ( groupId ) 
 - bots ← GroupBotRepo . findByGroup ( groupId ) map ( _ . map ( Seq ( _ ) ) . getOrElse ( Seq . empty ) ) 
 - users ← GroupUserRepo . find ( groupId ) 
 + bots ← ( GroupBotRepo . findByGroup ( groupId ) : @ silent ) map ( _ . map ( Seq ( _ ) ) . getOrElse ( Seq . empty ) ) 
 + users ← GroupUserRepo . find ( groupId ) : @ silent 
 } yield Migrate ( 
 group = group , 
 avatarData = avatarOpt , 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 index 65bf91f . . 3b3e769 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 @ @ - 6 , 7 + 6 , 7 @ @ import akka . stream . scaladsl . Source 
 import com . google . protobuf . ByteString 
 import com . google . protobuf . wrappers . Int32Value 
 import im . actor . api . rpc . groups . _ 
 - import im . actor . server . group . GroupErrors . { NoPermission , NotOwner } 
 + import im . actor . server . group . GroupErrors . { IncorrectGroupType , NoPermission , NotOwner } 
 import im . actor . server . group . GroupQueries . _ 
 import im . actor . server . group . GroupType . { Channel , General , Unrecognized } 
 
 @ @ - 77 , 6 + 77 , 7 @ @ trait GroupQueryHandlers { 
 case Channel ⇒ 
 if ( state . isAdmin ( clientUserId ) ) load 
 else FastFuture . successful ( LoadMembersResponse ( Seq . empty , offsetBs ) ) 
 + case Unrecognized ( v ) ⇒ throw IncorrectGroupType ( v ) 
 } 
 } 
 
 @ @ - 110 , 8 + 111 , 9 @ @ trait GroupQueryHandlers { 
 ext = None , 
 membersCount = Some ( count ) , 
 groupType = Some ( state . groupType match { 
 - case Channel ⇒ ApiGroupType . CHANNEL 
 - case General | Unrecognized ( _ ) ⇒ ApiGroupType . GROUP 
 + case Channel ⇒ ApiGroupType . CHANNEL 
 + case General ⇒ ApiGroupType . GROUP 
 + case Unrecognized ( v ) ⇒ throw IncorrectGroupType ( v ) 
 } ) , 
 permissions = Some ( state . permissions . groupFor ( clientUserId ) ) , 
 isDeleted = Some ( state . isDeleted ) 
 @ @ - 147 , 8 + 149 , 9 @ @ trait GroupQueryHandlers { 
 FastFuture . successful { 
 val canSend = state . bot . exists ( _ . userId = = clientUserId ) | | { 
 state . groupType match { 
 - case General ⇒ state . isMember ( clientUserId ) 
 - case Channel ⇒ state . isAdmin ( clientUserId ) 
 + case General ⇒ state . isMember ( clientUserId ) 
 + case Channel ⇒ state . isAdmin ( clientUserId ) 
 + case Unrecognized ( v ) ⇒ throw IncorrectGroupType ( v ) 
 } 
 } 
 CanSendMessageResponse ( 
 @ @ - 201 , 6 + 204 , 7 @ @ trait GroupQueryHandlers { 
 apiMembers → group . membersCount 
 else 
 apiMembers . find ( _ . userId = = clientUserId ) . toVector → group . membersCount 
 + case Unrecognized ( v ) ⇒ throw IncorrectGroupType ( v ) 
 } 
 } else { 
 Vector . empty [ ApiMember ] → 0 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 index 01bc29d . . e124305 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 @ @ - 7 , 8 + 7 , 9 @ @ import im . actor . api . rpc . groups . ApiAdminSettings 
 import im . actor . api . rpc . misc . ApiExtension 
 import im . actor . server . cqrs . { Event , ProcessorState } 
 import im . actor . server . file . Avatar 
 + import im . actor . server . group . GroupErrors . IncorrectGroupType 
 import im . actor . server . group . GroupEvents . _ 
 - import im . actor . server . group . GroupType . { Channel , General } 
 + import im . actor . server . group . GroupType . { Channel , General , Unrecognized } 
 
 private [ group ] final case class Member ( 
 userId : Int , 
 @ @ - 159 , 8 + 160 , 9 @ @ private [ group ] final case class GroupState ( 
 
 def getShowableOwner ( clientUserId : Int ) : Option [ Int ] = 
 groupType match { 
 - case General ⇒ Some ( creatorUserId ) 
 - case Channel ⇒ if ( isAdmin ( clientUserId ) ) Some ( creatorUserId ) else None 
 + case General ⇒ Some ( creatorUserId ) 
 + case Channel ⇒ if ( isAdmin ( clientUserId ) ) Some ( creatorUserId ) else None 
 + case Unrecognized ( v ) ⇒ throw IncorrectGroupType ( v ) 
 } 
 
 override def updated ( e : Event ) : GroupState = e match { 
 @ @ - 332 , 8 + 334 , 9 @ @ private [ group ] final case class GroupState ( 
 private def canSendMessage ( clientUserId : Int ) = 
 { 
 groupType match { 
 - case General ⇒ isMember ( clientUserId ) 
 - case Channel ⇒ isAdmin ( clientUserId ) | | isOwner ( clientUserId ) 
 + case General ⇒ isMember ( clientUserId ) 
 + case Channel ⇒ isAdmin ( clientUserId ) | | isOwner ( clientUserId ) 
 + case Unrecognized ( v ) ⇒ throw IncorrectGroupType ( v ) 
 } 
 } | | bot . exists ( _ . userId = = clientUserId ) 
 
 @ @ - 412 , 8 + 415 , 9 @ @ private [ group ] final case class GroupState ( 
 * / 
 def canViewMembers ( clientUserId : Int ) = 
 groupType match { 
 - case General ⇒ isMember ( clientUserId ) 
 - case Channel ⇒ isAdmin ( clientUserId ) | | isOwner ( clientUserId ) 
 + case General ⇒ isMember ( clientUserId ) 
 + case Channel ⇒ isAdmin ( clientUserId ) | | isOwner ( clientUserId ) 
 + case Unrecognized ( v ) ⇒ throw IncorrectGroupType ( v ) 
 } 
 
 / * * 
 @ @ - 455 , 8 + 459 , 9 @ @ private [ group ] final case class GroupState ( 
 * / 
 def canKickInvited ( userId : Int ) : Boolean = 
 groupType match { 
 - case General ⇒ isMember ( userId ) 
 - case Channel ⇒ isAdmin ( userId ) | | isOwner ( userId ) 
 + case General ⇒ isMember ( userId ) 
 + case Channel ⇒ isAdmin ( userId ) | | isOwner ( userId ) 
 + case Unrecognized ( v ) ⇒ throw IncorrectGroupType ( v ) 
 } 
 
 / * * 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala 
 index 389cfc7 . . 462075a 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala 
 @ @ - 5 , 6 + 5 , 7 @ @ import java . time . Instant 
 import akka . actor . Status 
 import akka . pattern . pipe 
 import akka . http . scaladsl . util . FastFuture 
 + import com . github . ghik . silencer . silent 
 import im . actor . api . rpc . files . ApiAvatar 
 import im . actor . api . rpc . groups . _ 
 import im . actor . server . file . { Avatar , ImageUtils } 
 @ @ - 97 , 7 + 98 , 7 @ @ private [ group ] trait InfoCommandHandlers { 
 val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . titleChanged ( newState . groupType ) ) ) 
 
 / / TODO : remove deprecated 
 - db . run ( GroupRepo . updateTitle ( groupId , title , cmd . clientUserId , cmd . randomId , date = evt . ts ) ) 
 + db . run ( GroupRepo . updateTitle ( groupId , title , cmd . clientUserId , cmd . randomId , date = evt . ts ) : @ silent ) 
 
 val result : Future [ SeqStateDate ] = for { 
 
 @ @ - 171 , 7 + 172 , 7 @ @ private [ group ] trait InfoCommandHandlers { 
 val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . topicChanged ( newState . groupType ) ) ) 
 
 / / TODO : remove deprecated 
 - db . run ( GroupRepo . updateTopic ( groupId , topic ) ) 
 + db . run ( GroupRepo . updateTopic ( groupId , topic ) : @ silent ) 
 
 val result : Future [ SeqStateDate ] = for { 
 
 @ @ - 235 , 7 + 236 , 7 @ @ private [ group ] trait InfoCommandHandlers { 
 val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . topicChanged ( newState . groupType ) ) ) 
 
 / / TODO : remove deprecated 
 - db . run ( GroupRepo . updateAbout ( groupId , about ) ) 
 + db . run ( GroupRepo . updateAbout ( groupId , about ) : @ silent ) 
 
 val result : Future [ SeqStateDate ] = for { 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala 
 index 16a4b64 . . 9d105b3 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala 
 @ @ - 5 , 6 + 5 , 7 @ @ import java . time . { Instant , LocalDateTime , ZoneOffset } 
 import akka . actor . Status 
 import akka . http . scaladsl . util . FastFuture 
 import akka . pattern . pipe 
 + import com . github . ghik . silencer . silent 
 import im . actor . api . rpc . Update 
 import im . actor . api . rpc . groups . _ 
 import im . actor . api . rpc . messaging . { ApiServiceMessage , UpdateChatDropCache , UpdateMessage } 
 @ @ - 83 , 7 + 84 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 val serviceMessage = GroupServiceMessages . userInvited ( cmd . inviteeUserId ) 
 
 / / TODO : remove deprecated 
 - db . run ( GroupUserRepo . create ( groupId , cmd . inviteeUserId , cmd . inviterUserId , evt . ts , None , isAdmin = false ) ) 
 + db . run ( GroupUserRepo . create ( groupId , cmd . inviteeUserId , cmd . inviterUserId , evt . ts , None , isAdmin = false ) : @ silent ) 
 
 def inviteGROUPUpdates : Future [ SeqStateDate ] = 
 for { 
 @ @ - 215 , 7 + 216 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 val wasInvited = state . isInvited ( cmd . joiningUserId ) 
 
 / / trying to figure out who invited joining user . 
 - / / Descdending priority : 
 + / / Descending priority : 
 / / • inviter defined in ` Join ` command ( when invited via token ) 
 / / • inviter from members list ( when invited by other user ) 
 / / • group creator ( safe fallback ) 
 @ @ - 292 , 7 + 293 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 invitedAt = optMember . map ( _ . invitedAt ) . getOrElse ( date ) , 
 joinedAt = Some ( LocalDateTime . now ( ZoneOffset . UTC ) ) , 
 isAdmin = false 
 - ) ) 
 + ) : @ silent ) 
 
 def joinGROUPUpdates : Future [ SeqStateDate ] = 
 for { 
 @ @ - 447 , 8 + 448 , 8 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 / / TODO : remove deprecated . GroupInviteTokenRepo don ' t have replacement yet . 
 db . run ( 
 for { 
 - _ ← GroupUserRepo . delete ( groupId , cmd . userId ) 
 - _ ← GroupInviteTokenRepo . revoke ( groupId , cmd . userId ) 
 + _ ← GroupUserRepo . delete ( groupId , cmd . userId ) : @ silent 
 + _ ← GroupInviteTokenRepo . revoke ( groupId , cmd . userId ) : @ silent 
 } yield ( ) 
 ) 
 
 @ @ - 582 , 8 + 583 , 8 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 / / TODO : remove deprecated . GroupInviteTokenRepo don ' t have replacement yet . 
 db . run ( 
 for { 
 - _ ← GroupUserRepo . delete ( groupId , cmd . kickedUserId ) 
 - _ ← GroupInviteTokenRepo . revoke ( groupId , cmd . kickedUserId ) 
 + _ ← GroupUserRepo . delete ( groupId , cmd . kickedUserId ) : @ silent 
 + _ ← GroupInviteTokenRepo . revoke ( groupId , cmd . kickedUserId ) : @ silent 
 } yield ( ) 
 ) 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / http / GroupsHttpHandler . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / http / GroupsHttpHandler . scala 
 index e8d3b80 . . a34d0b4 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / http / GroupsHttpHandler . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / http / GroupsHttpHandler . scala 
 @ @ - 6 , 6 + 6 , 7 @ @ import akka . http . scaladsl . model . StatusCodes . _ 
 import akka . http . scaladsl . server . Directives . _ 
 import akka . http . scaladsl . server . Route 
 import akka . http . scaladsl . util . FastFuture 
 + import com . github . ghik . silencer . silent 
 import im . actor . server . api . http . json . JsonFormatters . { errorsFormat , groupInviteInfoFormat } 
 import im . actor . server . api . http . { HttpHandler , json } 
 import im . actor . server . db . DbExtension 
 @ @ - 50 , 7 + 51 , 7 @ @ private [ group ] final class GroupsHttpHandler ( ) ( implicit system : ActorSystem ) ext 
 } 
 
 private def retrieve ( tokenOrShortName : String ) : Future [ Either [ json . Errors , json . GroupInviteInfo ] ] = for { 
 - byToken ← db . run ( GroupInviteTokenRepo . findByToken ( tokenOrShortName ) ) 
 + byToken ← db . run ( GroupInviteTokenRepo . findByToken ( tokenOrShortName ) : @ silent ) 
 byGroupId ← globalNamesStorage . getGroupId ( tokenOrShortName ) 
 optInviteData = ( byToken , byGroupId ) match { 
 case ( Some ( tokenInfo ) , _ ) ⇒ Some ( tokenInfo . groupId → Some ( tokenInfo . creatorId ) ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala 
 index 1ee8689 . . 37bb78b 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala 
 @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . migrations 
 
 import akka . actor . { ActorLogging , ActorSystem , PoisonPill , Props } 
 import akka . persistence . { PersistentActor , RecoveryCompleted } 
 + import com . github . ghik . silencer . silent 
 import im . actor . concurrent . FutureExt 
 import im . actor . server . db . DbExtension 
 import im . actor . server . event . TSEvent 
 @ @ - 52 , 7 + 53 , 7 @ @ private final class HiddenGroupMigrator ( promise : Promise [ Unit ] , groupId : Int ) ex 
 
 private def migrate ( ) : Unit = { 
 if ( isHidden ) { 
 - db . run ( GroupRepo . makeHidden ( groupId ) ) onComplete { 
 + db . run ( GroupRepo . makeHidden ( groupId ) : @ silent ) onComplete { 
 case Failure ( e ) ⇒ 
 promise . failure ( e ) 
 self ! PoisonPill 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala b / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala 
 index a78b47e . . 207af1e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala 
 @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . names 
 
 import akka . actor . ActorSystem 
 import akka . http . scaladsl . util . FastFuture 
 + import com . github . ghik . silencer . silent 
 import im . actor . server . db . DbExtension 
 import im . actor . server . persist . UserRepo 
 import im . actor . storage . SimpleStorage 
 @ @ - 58 , 7 + 59 , 7 @ @ final class GlobalNamesStorageKeyValueStorage ( implicit system : ActorSystem ) { 
 Some ( GlobalNameOwner . parseFrom ( bytes ) ) filter ( _ . ownerType . isUser ) map ( o ⇒ o . ownerId → fullName ) 
 } 
 } 
 - val compatSearch = db . run ( UserRepo . findByNicknamePrefix ( namePrefix ) ) map { users ⇒ 
 + val compatSearch = db . run ( UserRepo . findByNicknamePrefix ( namePrefix ) : @ silent ) map { users ⇒ 
 users flatMap { user ⇒ 
 user . nickname map ( user . id → _ ) 
 } 
 @ @ - 82 , 7 + 83 , 7 @ @ final class GlobalNamesStorageKeyValueStorage ( implicit system : ActorSystem ) { 
 
 existsInKV flatMap { 
 case true ⇒ FastFuture . successful ( true ) 
 - case false ⇒ db . run ( UserRepo . nicknameExists ( name ) ) 
 + case false ⇒ db . run ( UserRepo . nicknameExists ( name ) : @ silent ) 
 } 
 } 
 
 @ @ - 111 , 7 + 112 , 7 @ @ final class GlobalNamesStorageKeyValueStorage ( implicit system : ActorSystem ) { 
 
 optOwner flatMap { 
 case o @ Some ( _ ) ⇒ FastFuture . successful ( o ) 
 - case None ⇒ db . run ( UserRepo . findByNickname ( name ) ) map ( _ . map ( u ⇒ GlobalNameOwner ( OwnerType . User , u . id ) ) ) 
 + case None ⇒ db . run ( UserRepo . findByNickname ( name ) : @ silent ) map ( _ . map ( u ⇒ GlobalNameOwner ( OwnerType . User , u . id ) ) ) 
 } 
 } 
 
 @ @ - 130 , 9 + 131 , 9 @ @ final class GlobalNamesStorageKeyValueStorage ( implicit system : ActorSystem ) { 
 if ( count = = 0 ) { 
 db . run { 
 for { 
 - optUser ← UserRepo . findByNickname ( name ) 
 + optUser ← UserRepo . findByNickname ( name ) : @ silent 
 _ ← optUser match { 
 - case Some ( u ) ⇒ UserRepo . setNickname ( u . id , None ) 
 + case Some ( u ) ⇒ UserRepo . setNickname ( u . id , None ) : @ silent 
 case None ⇒ DBIO . successful ( 0 ) 
 } 
 } yield ( ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 index cfcbfd7 . . 3988b2e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 @ @ - 22 , 7 + 22 , 7 @ @ case object StopOffice 
 
 trait ProcessorState 
 
 - @ deprecated ( " use im . actor . server . cqrs . Processor instead " , " 2016 - 07 - 07 " ) 
 + / / TODO : replace with im . actor . server . cqrs . Processor 
 trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorFutures with AlertingActor { 
 
 case class BreakStashing ( ts : Instant , evts : Seq [ Event ] , state : State ) 
 diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala 
 index 19f20eb . . a34a5ab998 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala 
 @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . server . frontend 
 import java . net . InetAddress 
 
 import akka . stream . FlowShape 
 + import com . github . ghik . silencer . silent 
 import kamon . metric . instrument . { MinMaxCounter , Histogram } 
 
 import scala . util . { Failure , Success } 
 @ @ - 32 , 11 + 33 , 11 @ @ object MTProtoBlueprint { 
 
 val sessionClientSource = Source . fromPublisher ( ActorPublisher [ MTProto ] ( sessionClient ) ) 
 
 - val mtprotoFlow = Flow . fromGraph ( new PackageParseStage ( ) ) 
 + @ silent val mtprotoFlow = Flow . fromGraph ( new PackageParseStage ( ) ) 
 . transform ( ( ) ⇒ new PackageCheckStage ) 
 . via ( new PackageHandleStage ( protoVersions , apiMajorVersions , authManager , sessionClient ) ) 
 
 - val mapRespFlow : Flow [ MTProto , ByteString , akka . NotUsed ] = Flow [ MTProto ] 
 + @ silent val mapRespFlow : Flow [ MTProto , ByteString , akka . NotUsed ] = Flow [ MTProto ] 
 . transform ( ( ) ⇒ mapResponse ( system ) ) 
 
 val connStartTime = System . currentTimeMillis ( ) 
 @ @ - 82 , 7 + 83 , 7 @ @ object MTProtoBlueprint { 
 } ) 
 } 
 
 - def mapResponse ( system : ActorSystem ) = new PushStage [ MTProto , ByteString ] { 
 + @ silent def mapResponse ( system : ActorSystem ) = new PushStage [ MTProto , ByteString ] { 
 private [ this ] var packageIndex : Int = - 1 
 
 override def onPush ( elem : MTProto , ctx : Context [ ByteString ] ) = { 
 diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageCheckStage . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageCheckStage . scala 
 index 489f130 . . 8829655 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageCheckStage . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageCheckStage . scala 
 @ @ - 1 , 9 + 1 , 10 @ @ 
 package im . actor . server . frontend 
 
 import akka . stream . stage . { Context , PushStage , SyncDirective } 
 - 
 + import com . github . ghik . silencer . silent 
 import im . actor . server . mtproto . transport . { Handshake , TransportPackage } 
 
 + @ silent 
 private [ frontend ] final class PackageCheckStage extends PushStage [ TransportPackage , TransportPackage ] { 
 
 private trait State 
 diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala 
 index 0f62209 . . 8849da1 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala 
 @ @ - 10 , 6 + 10 , 7 @ @ import akka . stream . { ActorMaterializer , Materializer } 
 import akka . stream . scaladsl . _ 
 import akka . stream . stage . { Context , PushStage , SyncDirective , TerminationDirective } 
 import akka . util . ByteString 
 + import com . github . ghik . silencer . silent 
 import im . actor . server . session . SessionRegion 
 
 import scala . concurrent . duration . _ 
 @ @ - 66 , 6 + 67 , 7 @ @ object WsFrontend extends Frontend ( " ws " ) { 
 . via ( completionFlow ( System . currentTimeMillis ( ) ) ) 
 } 
 
 + @ silent 
 def completionFlow [ T ] ( connStartTime : Long ) ( implicit system : ActorSystem ) : Flow [ T , T , akka . NotUsed ] = 
 Flow [ T ] 
 . transform ( ( ) ⇒ new PushStage [ T , T ] { 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 index 86bb7cc . . 79e4dec 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 @ @ - 93 , 7 + 93 , 7 @ @ object GroupRepo { 
 ) 
 } 
 
 - @ deprecated ( " Replace with some sort of key - value maybe ? " , " 2016 - 06 - 05 " ) 
 + / / TODO : Replace with key value 
 def findAllIds = allIds . result 
 
 @ deprecated ( " Remove , only used in tests " , " 2016 - 06 - 05 " ) 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala 
 index af4797e . . 52e6b8d 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala 
 @ @ - 62 , 15 + 62 , 6 @ @ object PeerHelpers { 
 accessHashCheck ( checkGroupOutPeers ( groupOutPeers ) , authorizedAction ) 
 } 
 
 - / / TODO : remove in future 
 - @ deprecated ( " Use Future inner type instead " , " 2016 - 07 - 07 " ) 
 - def withOutPeerDBIO [ R < : RpcResponse ] ( outPeer : ApiOutPeer ) ( f : ⇒ DBIO [ RpcError Xor R ] ) ( 
 - implicit 
 - client : AuthorizedClientData , 
 - system : ActorSystem 
 - ) : DBIO [ RpcError Xor R ] = 
 - DBIO . from ( withOutPeer ( outPeer ) ( DbExtension ( system ) . db . run ( f ) ) ) 
 - 
 private def accessHashCheck [ R < : RpcResponse ] ( check : Future [ Boolean ] , authorizedAction : ⇒ Future [ RpcError Xor R ] ) ( implicit ec : ExecutionContext ) = 
 check flatMap { isValid ⇒ 
 if ( isValid ) { 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 index c6876f8 . . e2de35d 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 @ @ - 5 , 6 + 5 , 7 @ @ import java . time . Instant 
 import akka . actor . ActorSystem 
 import akka . http . scaladsl . util . FastFuture 
 import cats . data . Xor 
 + import com . github . ghik . silencer . silent 
 import im . actor . api . rpc . PeerHelpers . _ 
 import im . actor . api . rpc . _ 
 import im . actor . api . rpc . files . ApiFileLocation 
 @ @ - 356 , 12 + 357 , 12 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act 
 } else { 
 withGroupOutPeer ( groupPeer ) { 
 db . run ( for { 
 - token ← GroupInviteTokenRepo . find ( groupPeer . groupId , client . userId ) . headOption . flatMap { 
 + token ← ( GroupInviteTokenRepo . find ( groupPeer . groupId , client . userId ) : @ silent ) . headOption . flatMap { 
 case Some ( invToken ) ⇒ DBIO . successful ( invToken . token ) 
 case None ⇒ 
 val token = ACLUtils . accessToken ( ThreadLocalSecureRandom . current ( ) ) 
 val inviteToken = GroupInviteToken ( groupPeer . groupId , client . userId , token ) 
 - for ( _ ← GroupInviteTokenRepo . create ( inviteToken ) ) yield token 
 + for ( _ ← GroupInviteTokenRepo . create ( inviteToken ) : @ silent ) yield token 
 } 
 } yield Ok ( ResponseInviteUrl ( genInviteUrl ( token ) ) ) ) 
 } 
 @ @ - 383 , 7 + 384 , 7 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act 
 joinInfo ← joinSting match { 
 case Xor . Left ( token ) ⇒ 
 for { 
 - info ← fromFutureOption ( GroupRpcErrors . InvalidInviteToken ) ( db . run ( GroupInviteTokenRepo . findByToken ( token ) ) ) 
 + info ← fromFutureOption ( GroupRpcErrors . InvalidInviteToken ) ( db . run ( GroupInviteTokenRepo . findByToken ( token ) : @ silent ) ) 
 } yield info . groupId → Some ( info . creatorId ) 
 case Xor . Right ( groupName ) ⇒ 
 for { 
 @ @ - 441 , 10 + 442 , 10 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act 
 val token = ACLUtils . accessToken ( ) 
 db . run ( 
 for { 
 - _ ← GroupInviteTokenRepo . revoke ( groupPeer . groupId , client . userId ) 
 + _ ← GroupInviteTokenRepo . revoke ( groupPeer . groupId , client . userId ) : @ silent 
 _ ← GroupInviteTokenRepo . create ( 
 GroupInviteToken ( groupPeer . groupId , client . userId , token ) 
 - ) 
 + ) : @ silent 
 } yield Ok ( ResponseInviteUrl ( genInviteUrl ( token ) ) ) 
 ) 
 } 
 @ @ - 591 , 7 + 592 , 7 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act 
 result ← if ( isHistoryShared ) { 
 db . run ( 
 for { 
 - member ← GroupUserRepo . find ( groupPeer . groupId , client . userId ) 
 + member ← GroupUserRepo . find ( groupPeer . groupId , client . userId ) : @ silent 
 response ← member match { 
 case Some ( _ ) ⇒ DBIO . successful ( Error ( GroupRpcErrors . AlreadyInvited ) ) 
 case None ⇒ 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 index fb55eed . . 7ad08bd 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 @ @ - 10 , 16 + 10 , 13 @ @ import im . actor . api . rpc . misc . { ResponseSeq , ResponseVoid } 
 import im . actor . api . rpc . peers . { ApiGroupOutPeer , ApiOutPeer , ApiPeerType , ApiUserOutPeer } 
 import im . actor . api . rpc . sequence . ApiUpdateOptimization 
 import im . actor . server . dialog . HistoryUtils 
 - import im . actor . server . group . GroupQueries . CanSendMessageResponse 
 import im . actor . server . group . { CanSendMessageInfo , GroupUtils } 
 - import im . actor . server . model . { DialogObsolete , HistoryMessage , Peer , PeerType } 
 + import im . actor . server . model . Peer 
 import im . actor . server . persist . contact . UserContactRepo 
 - import im . actor . server . persist . dialog . DialogRepo 
 - import im . actor . server . persist . { GroupUserRepo , HistoryMessageRepo } 
 + import im . actor . server . persist . HistoryMessageRepo 
 import im . actor . server . sequence . SeqState 
 import im . actor . server . user . UserUtils 
 import org . joda . time . DateTime 
 - import slick . dbio 
 import slick . driver . PostgresDriver . api . _ 
 
 import scala . concurrent . Future 
 @ @ - 196 , 9 + 193 , 9 @ @ trait HistoryHandlers { 
 clientData : ClientData 
 ) : Future [ HandlerResult [ ResponseLoadHistory ] ] = 
 authorized ( clientData ) { implicit client ⇒ 
 - val action = withOutPeerDBIO ( peer ) { 
 + withOutPeer ( peer ) { 
 val modelPeer = peer . asModel 
 - for { 
 + val action = for { 
 historyOwner ← DBIO . from ( getHistoryOwner ( modelPeer , client . userId ) ) 
 ( lastReceivedAt , lastReadAt ) ← getLastReceiveReadDates ( modelPeer ) 
 messageModels ← mode match { 
 @ @ - 240 , 8 + 237 , 8 @ @ trait HistoryHandlers { 
 groupPeers = groups map ( g ⇒ ApiGroupOutPeer ( g . id , g . accessHash ) ) 
 ) ) 
 } 
 + db . run ( action ) 
 } 
 - db . run ( action ) 
 } 
 
 override def doHandleDeleteMessage ( outPeer : ApiOutPeer , randomIds : IndexedSeq [ Long ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = 
 diff - - git a / actor - server / project / Build . scala b / actor - server / project / Build . scala 
 index f35f67f . . ab7842b 100644 
 - - - a / actor - server / project / Build . scala 
 + + + b / actor - server / project / Build . scala 
 @ @ - 82 , 7 + 82 , 8 @ @ object Build extends sbt . Build with Versioning with Releasing with Packaging { 
 } , 
 resolvers + + = Resolvers . seq , 
 fork in Test : = false , 
 - updateOptions : = updateOptions . value . withCachedResolution ( true ) 
 + updateOptions : = updateOptions . value . withCachedResolution ( true ) , 
 + addCompilerPlugin ( " com . github . ghik " % " silencer - plugin " % " 0 . 4 " ) 
 ) 
 
 lazy val root = Project ( 
 @ @ - 174 , 8 + 175 , 7 @ @ object Build extends sbt . Build with Versioning with Releasing with Packaging { 
 id = " actor - core " , 
 base = file ( " actor - core " ) , 
 settings = defaultSettingsServer + + SbtActorApi . settings + + Seq ( 
 - libraryDependencies + + = Dependencies . core , 
 - scalacOptions in Compile : = ( scalacOptions in Compile ) . value . filterNot ( _ = = " - Xfatal - warnings " ) 
 + libraryDependencies + + = Dependencies . core 
 ) 
 ) 
 . dependsOn ( actorCodecs , actorFileAdapter , actorModels , actorPersist , actorRuntime ) 
 @ @ - 194 , 8 + 194 , 7 @ @ object Build extends sbt . Build with Versioning with Releasing with Packaging { 
 id = " actor - enrich " , 
 base = file ( " actor - enrich " ) , 
 settings = defaultSettingsServer + + Seq ( 
 - libraryDependencies + + = Dependencies . enrich , 
 - scalacOptions in Compile : = ( scalacOptions in Compile ) . value . filterNot ( _ = = " - Xfatal - warnings " ) 
 + libraryDependencies + + = Dependencies . enrich 
 ) 
 ) 
 . dependsOn ( actorRpcApi , actorRuntime ) 
 @ @ - 247 , 8 + 246 , 7 @ @ object Build extends sbt . Build with Versioning with Releasing with Packaging { 
 id = " actor - rpc - api " , 
 base = file ( " actor - rpc - api " ) , 
 settings = defaultSettingsServer + + Seq ( 
 - libraryDependencies + + = Dependencies . rpcApi , 
 - scalacOptions in Compile : = ( scalacOptions in Compile ) . value . filterNot ( _ = = " - Xfatal - warnings " ) 
 + libraryDependencies + + = Dependencies . rpcApi 
 ) 
 ) 
 . dependsOn ( 
 @ @ - 269 , 8 + 267 , 7 @ @ object Build extends sbt . Build with Versioning with Releasing with Packaging { 
 id = " actor - fs - adapters " , 
 base = file ( " actor - fs - adapters " ) , 
 settings = defaultSettingsServer + + Seq ( 
 - libraryDependencies + + = Dependencies . fileAdapter , 
 - scalacOptions in Compile : = ( scalacOptions in Compile ) . value . filterNot ( _ = = " - Xfatal - warnings " ) 
 + libraryDependencies + + = Dependencies . fileAdapter 
 ) 
 ) 
 . dependsOn ( actorHttpApi , actorPersist ) 
 @ @ - 279 , 8 + 276 , 7 @ @ object Build extends sbt . Build with Versioning with Releasing with Packaging { 
 id = " actor - frontend " , 
 base = file ( " actor - frontend " ) , 
 settings = defaultSettingsServer + + Seq ( 
 - libraryDependencies + + = Dependencies . frontend , 
 - scalacOptions in Compile : = ( scalacOptions in Compile ) . value . filterNot ( _ = = " - Xfatal - warnings " ) 
 + libraryDependencies + + = Dependencies . frontend 
 ) 
 ) 
 . dependsOn ( actorCore , actorSession ) 
 diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala 
 index e466c43 . . 446beaa 100644 
 - - - a / actor - server / project / Dependencies . scala 
 + + + b / actor - server / project / Dependencies . scala 
 @ @ - 109 , 6 + 109 , 7 @ @ object Dependencies { 
 val guava = " com . google . guava " % " guava " % " 19 . 0 " 
 val alpn = " org . eclipse . jetty . alpn " % " alpn - api " % " 1 . 1 . 2 . v20150522 " % " runtime " 
 val tcnative = " io . netty " % " netty - tcnative " % " 1 . 1 . 33 . Fork15 " classifier " linux - x86 _ 64 " 
 + val silencer = " com . github . ghik " % " silencer - lib " % " 0 . 4 " 
 } 
 
 object Testing { 
 @ @ - 134 , 7 + 135 , 8 @ @ object Dependencies { 
 scalaLogging , 
 tyrex , 
 kamonCore , 
 - kamonDatadog 
 + kamonDatadog , 
 + silencer 
 ) 
 
 val root = shared + + Seq (

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto 
 index bfc8566 . . 654125b 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / group . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / group . proto 
 @ @ - 155 , 4 + 155 , 11 @ @ message GroupEvents { 
 required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; 
 required int32 executor _ user _ id = 2 ; 
 } 
 + 
 + message GroupDeleted { 
 + option ( scalapb . message ) . extends = " im . actor . server . group . GroupEvent " ; 
 + 
 + required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; 
 + required int32 executor _ user _ id = 2 ; 
 + } 
 } 
 diff - - git a / actor - server / actor - core / src / main / protobuf / groupV2 . proto b / actor - server / actor - core / src / main / protobuf / groupV2 . proto 
 index 2f8eaee . . 3d524d5 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / groupV2 . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / groupV2 . proto 
 @ @ - 37 , 6 + 37 , 7 @ @ message GroupEnvelope { 
 GroupCommands . DismissUserAdmin dismiss _ user _ admin = 28 ; 
 GroupCommands . TransferOwnership transfer _ ownership = 14 ; 
 GroupCommands . UpdateAdminSettings update _ admin _ settings = 30 ; 
 + GroupCommands . DeleteGroup delete _ group = 33 ; 
 } 
 oneof query { 
 GroupQueries . GetAccessHash get _ access _ hash = 15 ; 
 @ @ - 204 , 6 + 205 , 13 @ @ message GroupCommands { 
 int32 client _ user _ id = 1 ; 
 int64 client _ auth _ id = 2 ; 
 } 
 + 
 + message DeleteGroup { 
 + option ( scalapb . message ) . extends = " GroupCommand " ; 
 + 
 + int32 client _ user _ id = 1 ; 
 + int64 client _ auth _ id = 2 ; 
 + } 
 } 
 
 message GroupQueries { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala 
 index 66cb42f . . 3647567 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala 
 @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . api 
 import akka . http . scaladsl . util . FastFuture 
 import cats . data . Xor 
 import im . actor . server . CommonErrors 
 - import im . actor . server . group . GroupErrors . GroupNotFound 
 + import im . actor . server . group . GroupErrors . { GroupAlreadyDeleted , GroupNotFound } 
 import im . actor . server . office . EntityNotFoundError 
 import im . actor . server . user . UserErrors . UserNotFound 
 
 @ @ - 16 , 6 + 16 , 7 @ @ package object rpc extends PeersImplicits with HistoryImplicits with DialogConve 
 
 object CommonRpcErrors { 
 val GroupNotFound = RpcError ( 404 , " GROUP _ NOT _ FOUND " , " " , false , None ) 
 + val GroupDeleted = RpcError ( 404 , " GROUP _ DELETED " , " " , false , None ) 
 val InvalidAccessHash = RpcError ( 403 , " INVALID _ ACCESS _ HASH " , " " , false , None ) 
 val UnsupportedRequest = RpcError ( 400 , " REQUEST _ NOT _ SUPPORTED " , " Operation not supported . " , false , None ) 
 val UserNotAuthorized = RpcError ( 403 , " USER _ NOT _ AUTHORIZED " , " " , false , None ) 
 @ @ - 23 , 14 + 24 , 15 @ @ package object rpc extends PeersImplicits with HistoryImplicits with DialogConve 
 val UserPhoneNotFound = RpcError ( 404 , " USER _ PHONE _ NOT _ FOUND " , " " , false , None ) 
 val EntityNotFound = RpcError ( 404 , " ENTITY _ NOT _ FOUND " , " " , false , None ) 
 val NotSupportedInOss = RpcError ( 400 , " NOT _ SUPPORTED _ IN _ OSS " , " Feature is not supported in the Open - Source version . " , canTryAgain = false , None ) 
 - val IntenalError = RpcError ( 500 , " INTERNAL _ ERROR " , " " , false , None ) 
 + val InternalError = RpcError ( 500 , " INTERNAL _ ERROR " , " " , false , None ) 
 
 def forbidden ( userMessage : String = " You are not allowed to do this . " ) = RpcError ( 403 , " FORBIDDEN " , userMessage , false , None ) 
 } 
 
 def recoverCommon : PartialFunction [ Throwable , RpcError ] = { 
 - case UserNotFound ( _ ) ⇒ CommonRpcErrors . UserNotFound 
 - case GroupNotFound ( _ ) ⇒ CommonRpcErrors . GroupNotFound 
 + case _ : UserNotFound ⇒ CommonRpcErrors . UserNotFound 
 + case _ : GroupNotFound ⇒ CommonRpcErrors . GroupNotFound 
 + case _ : GroupAlreadyDeleted ⇒ CommonRpcErrors . GroupDeleted 
 case EntityNotFoundError ⇒ CommonRpcErrors . EntityNotFound 
 case CommonErrors . Forbidden ( message ) ⇒ CommonRpcErrors . forbidden ( message ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 index 6d304ea . . e3dda14 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 @ @ - 7 , 13 + 7 , 14 @ @ import akka . pattern . pipe 
 import akka . http . scaladsl . util . FastFuture 
 import im . actor . api . rpc . { PeersImplicits , Update } 
 import im . actor . api . rpc . groups . _ 
 + import im . actor . api . rpc . messaging . UpdateChatClear 
 import im . actor . concurrent . FutureExt 
 import im . actor . server . CommonErrors 
 import im . actor . server . acl . ACLUtils 
 - import im . actor . server . group . GroupCommands . { DismissUserAdmin , MakeHistoryShared , MakeUserAdmin , RevokeIntegrationToken , RevokeIntegrationTokenAck , TransferOwnership , UpdateAdminSettings , UpdateAdminSettingsAck } 
 + import im . actor . server . group . GroupCommands . { DeleteGroup , DismissUserAdmin , MakeHistoryShared , MakeUserAdmin , RevokeIntegrationToken , RevokeIntegrationTokenAck , TransferOwnership , UpdateAdminSettings , UpdateAdminSettingsAck } 
 import im . actor . server . group . GroupErrors . { NotAMember , NotAdmin , UserAlreadyAdmin , UserAlreadyNotAdmin } 
 - import im . actor . server . group . GroupEvents . { AdminSettingsUpdated , AdminStatusChanged , HistoryBecameShared , IntegrationTokenRevoked , OwnerChanged } 
 - import im . actor . server . persist . { GroupBotRepo , GroupUserRepo } 
 + import im . actor . server . group . GroupEvents . { AdminSettingsUpdated , AdminStatusChanged , GroupDeleted , HistoryBecameShared , IntegrationTokenRevoked , OwnerChanged } 
 + import im . actor . server . persist . { GroupBotRepo , GroupUserRepo , HistoryMessageRepo } 
 import im . actor . server . sequence . { SeqState , SeqStateDate } 
 
 import scala . concurrent . Future 
 @ @ - 225 , 7 + 226 , 25 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { 
 val newState = commit ( evt ) 
 val memberIds = newState . memberIds 
 
 + val prevOwnerUpdates = List ( 
 + UpdateGroupCanLeaveChanged ( groupId , canLeaveChanged = true ) , 
 + UpdateGroupCanDeleteChanged ( groupId , canDeleteChanged = false ) 
 + ) 
 + 
 + val newOwnerUpdates = List ( 
 + UpdateGroupCanLeaveChanged ( groupId , canLeaveChanged = false ) , 
 + UpdateGroupCanDeleteChanged ( groupId , canDeleteChanged = true ) 
 + ) 
 + 
 val result : Future [ SeqState ] = for { 
 + / / push updates to previous owner 
 + _ ← FutureExt . ftraverse ( prevOwnerUpdates ) { update ⇒ 
 + seqUpdExt . deliverUserUpdate ( cmd . clientUserId , update ) 
 + } 
 + / / push updates to new owner 
 + _ ← FutureExt . ftraverse ( newOwnerUpdates ) { update ⇒ 
 + seqUpdExt . deliverUserUpdate ( cmd . newOwnerId , update ) 
 + } 
 seqState ← seqUpdExt . broadcastClientUpdate ( 
 userId = cmd . clientUserId , 
 authId = cmd . clientAuthId , 
 @ @ - 320 , 4 + 339 , 49 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { 
 } 
 } 
 
 + protected def deleteGroup ( cmd : DeleteGroup ) : Unit = { 
 + if ( ! state . permissions . canDelete ( cmd . clientUserId ) ) { 
 + sender ( ) ! noPermission 
 + } else { 
 + persist ( GroupDeleted ( Instant . now , cmd . clientUserId ) ) { evt ⇒ 
 + val newState = commit ( evt ) 
 + 
 + val deleteGroupMembersUpdates : Vector [ Update ] = Vector ( 
 + UpdateGroupCanSendMessagesChanged ( groupId , canSendMessages = false ) , 
 + UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = false ) , 
 + UpdateGroupCanEditInfoChanged ( groupId , canEditGroup = false ) , 
 + UpdateGroupCanEditUsernameChanged ( groupId , canEditUsername = false ) , 
 + UpdateGroupCanEditAdminsChanged ( groupId , canAssignAdmins = false ) , 
 + UpdateGroupCanViewAdminsChanged ( groupId , canViewAdmins = false ) , 
 + UpdateGroupCanEditAdminSettingsChanged ( groupId , canEditAdminSettings = false ) , 
 + UpdateGroupCanInviteMembersChanged ( groupId , canInviteMembers = false ) , 
 + UpdateGroupCanInviteViaLink ( groupId , canInviteViaLink = false ) , 
 + UpdateGroupCanLeaveChanged ( groupId , canLeaveChanged = false ) , 
 + UpdateGroupCanDeleteChanged ( groupId , canDeleteChanged = false ) , 
 + UpdateGroupMemberChanged ( groupId , isMember = false ) , 
 + / / if channel , or group is big enough 
 + if ( newState . groupType . isChannel ) 
 + UpdateGroupMembersCountChanged ( groupId , membersCount = 0 ) 
 + else 
 + UpdateGroupMembersUpdated ( groupId , members = Vector . empty ) 
 + ) 
 + 
 + val result : Future [ SeqState ] = for { 
 + _ ← db . run ( HistoryMessageRepo . deleteAll ( cmd . clientUserId , apiGroupPeer . asModel ) ) 
 + _ ← Future . traverse ( deleteGroupMembersUpdates ) { update ⇒ 
 + seqUpdExt . broadcastPeopleUpdate ( newState . memberIds , update ) 
 + } 
 + seqState ← seqUpdExt . broadcastClientUpdate ( 
 + cmd . clientUserId , 
 + cmd . clientAuthId , 
 + bcastUserIds = state . memberIds - cmd . clientUserId , 
 + update = UpdateChatClear ( apiGroupPeer ) 
 + ) 
 + } yield seqState 
 + 
 + result pipeTo sender ( ) 
 + } 
 + } 
 + } 
 + 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala 
 index 06174a9 . . d2e06a8 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala 
 @ @ - 7 , 6 + 7 , 8 @ @ import scala . util . control . NoStackTrace 
 object GroupErrors { 
 final case class GroupNotFound ( id : Int ) extends EntityNotFound ( s " Group $ id not found " ) 
 
 + final case class GroupAlreadyDeleted ( id : Int ) extends EntityNotFound ( s " Group $ id deleted " ) 
 + 
 final case class GroupIdAlreadyExists ( id : Int ) extends Exception with NoStackTrace 
 
 object NotAMember extends Exception ( " Not a group member " ) with NoStackTrace 
 @ @ - 38 , 4 + 40 , 6 @ @ object GroupErrors { 
 case object BlockedByUser extends Exception with NoStackTrace 
 
 case object NoPermission extends Exception with NoStackTrace 
 + 
 + case object CantLeaveGroup extends Exception with NoStackTrace 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 index f9cca5f . . fdbb22e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 @ @ - 122 , 6 + 122 , 11 @ @ private [ group ] sealed trait Commands extends UserAcl { 
 GroupEnvelope ( groupId ) 
 . withMakeHistoryShared ( MakeHistoryShared ( clientUserId , clientAuthId ) ) ) . mapTo [ SeqState ] 
 
 + def deleteGroup ( groupId : Int , clientUserId : Int , clientAuthId : Long ) : Future [ SeqState ] = 
 + ( processorRegion . ref ? 
 + GroupEnvelope ( groupId ) 
 + . withDeleteGroup ( DeleteGroup ( clientUserId , clientAuthId ) ) ) . mapTo [ SeqState ] 
 + 
 } 
 
 private [ group ] sealed trait Queries { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 index b6c9c45 . . 3e24dc5 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 @ @ - 50 , 6 + 50 , 7 @ @ object GroupProcessor { 
 20023 → classOf [ GroupCommands . DismissUserAdmin ] , 
 20024 → classOf [ GroupCommands . UpdateAdminSettings ] , 
 20025 → classOf [ GroupCommands . MakeHistoryShared ] , 
 + 20026 → classOf [ GroupCommands . DeleteGroup ] , 
 
 21001 → classOf [ GroupQueries . GetIntegrationToken ] , 
 21002 → classOf [ GroupQueries . GetIntegrationTokenResponse ] , 
 @ @ - 90 , 7 + 91 , 8 @ @ object GroupProcessor { 
 22018 → classOf [ GroupEvents . ShortNameUpdated ] , 
 22019 → classOf [ GroupEvents . AdminSettingsUpdated ] , 
 22020 → classOf [ GroupEvents . AdminStatusChanged ] , 
 - 22021 → classOf [ GroupEvents . HistoryBecameShared ] 
 + 22021 → classOf [ GroupEvents . HistoryBecameShared ] , 
 + 22022 → classOf [ GroupEvents . GroupDeleted ] 
 ) 
 
 def persistenceIdFor ( groupId : Int ) : String = s " Group - $ { groupId } " 
 @ @ - 125 , 6 + 127 , 7 @ @ private [ group ] final class GroupProcessor 
 case c : Create if state . isNotCreated ⇒ create ( c ) 
 case _ : Create ⇒ sender ( ) ! Status . Failure ( GroupIdAlreadyExists ( groupId ) ) 
 case _ : GroupCommand if state . isNotCreated ⇒ sender ( ) ! Status . Failure ( GroupNotFound ( groupId ) ) 
 + case _ : GroupCommand if state . isDeleted ⇒ sender ( ) ! Status . Failure ( GroupAlreadyDeleted ( groupId ) ) 
 
 / / members actions 
 case i : Invite ⇒ invite ( i ) 
 @ @ - 146 , 15 + 149 , 15 @ @ private [ group ] final class GroupProcessor 
 case t : TransferOwnership ⇒ transferOwnership ( t ) 
 case s : UpdateAdminSettings ⇒ updateAdminSettings ( s ) 
 case m : MakeHistoryShared ⇒ makeHistoryShared ( m ) 
 - 
 - / / termination actions 
 - case StopProcessor ⇒ context stop self 
 - case ReceiveTimeout ⇒ context . parent ! ShardRegion . Passivate ( stopMessage = StopProcessor ) 
 + case d : DeleteGroup ⇒ deleteGroup ( d ) 
 
 / / dialogs envelopes coming through group . 
 case de : DialogEnvelope ⇒ 
 groupPeerActor forward de . getAllFields . values . head 
 
 + / / actor ' s lifecycle 
 + case StopProcessor ⇒ context stop self 
 + case ReceiveTimeout ⇒ context . parent ! ShardRegion . Passivate ( stopMessage = StopProcessor ) 
 } 
 
 / / TODO : add backoff 
 @ @ - 165 , 6 + 168 , 7 @ @ private [ group ] final class GroupProcessor 
 
 protected def handleQuery : PartialFunction [ Any , Future [ Any ] ] = { 
 case _ : GroupQuery if state . isNotCreated ⇒ FastFuture . failed ( GroupNotFound ( groupId ) ) 
 + case _ : GroupQuery if state . isDeleted ⇒ FastFuture . failed ( GroupAlreadyDeleted ( groupId ) ) 
 case GetAccessHash ( ) ⇒ getAccessHash 
 case GetTitle ( ) ⇒ getTitle 
 case GetIntegrationToken ( optClient ) ⇒ getIntegrationToken ( optClient ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 index e6de46c . . b6527fb 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 @ @ - 136 , 9 + 136 , 9 @ @ trait GroupQueryHandlers { 
 canEditAdminList = Some ( state . permissions . canEditAdmins ( clientUserId ) ) , 
 canViewAdminList = Some ( state . permissions . canViewAdmins ( clientUserId ) ) , 
 canEditAdminSettings = Some ( state . permissions . canEditAdminSettings ( clientUserId ) ) , 
 - canInviteViaLink = None , 
 - canDelete = None , 
 - canLeave = None 
 + canInviteViaLink = Some ( state . permissions . canInviteViaLink ( clientUserId ) ) , 
 + canDelete = Some ( state . permissions . canDelete ( clientUserId ) ) , 
 + canLeave = Some ( state . permissions . canLeave ( clientUserId ) ) 
 ) 
 ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 index 77ec517 . . fa51af8 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 @ @ - 88 , 6 + 88 , 7 @ @ private [ group ] object GroupState { 
 accessHash = 0L , 
 adminSettings = AdminSettings . PlainDefault , 
 bot = None , 
 + deletedAt = None , 
 
 / / ? ? ? 
 extensions = Map . empty 
 @ @ - 120 , 6 + 121 , 7 @ @ private [ group ] final case class GroupState ( 
 accessHash : Long , 
 adminSettings : AdminSettings , 
 bot : Option [ Bot ] , 
 + deletedAt : Option [ Instant ] , 
 extensions : Map [ Int , Array [ Byte ] ] 
 ) extends ProcessorState [ GroupState ] { 
 
 @ @ - 148 , 6 + 150 , 8 @ @ private [ group ] final case class GroupState ( 
 
 val isCreated = createdAt . nonEmpty 
 
 + val isDeleted = deletedAt . nonEmpty 
 + 
 / / TODO : add on commit ( not during recovery ! ) hook to make group with async members , when more than 100 
 def isAsyncMembers = 
 groupType match { 
 @ @ - 262 , 6 + 266 , 8 @ @ private [ group ] final case class GroupState ( 
 this . copy ( adminSettings = AdminSettings . fromBitMask ( bitMask ) ) 
 case HistoryBecameShared ( _ , _ ) ⇒ 
 this . copy ( isHistoryShared = true ) 
 + case GroupDeleted ( ts , _ ) ⇒ 
 + this . copy ( deletedAt = Some ( ts ) ) 
 
 / / deprecated events 
 case UserBecameAdmin ( _ , userId , _ ) ⇒ 
 @ @ - 310 , 6 + 316 , 12 @ @ private [ group ] final case class GroupState ( 
 ( isMember ( clientUserId ) & & adminSettings . canMembersInvite ) 
 
 / * * 
 + * only owner and admins can invite via link 
 + * / 
 + def canInviteViaLink ( clientUserId : Int ) = 
 + isOwner ( clientUserId ) | | isAdmin ( clientUserId ) 
 + 
 + / * * 
 * owner and admins can kick members 
 * / 
 def canKickMember ( clientUserId : Int ) = 
 @ @ - 344 , 5 + 356 , 16 @ @ private [ group ] final case class GroupState ( 
 
 / / only owner can change admin settings 
 def canEditAdminSettings ( clientUserId : Int ) : Boolean = isOwner ( clientUserId ) 
 + 
 + / / only owner can delete group 
 + def canDelete ( clientUserId : Int ) : Boolean = isOwner ( clientUserId ) 
 + 
 + / * * 
 + * for now , owner can ' t leave group . 
 + * He can either transfer ownership and leave group 
 + * or delete group completely . 
 + * / 
 + def canLeave ( clientUserId : Int ) : Boolean = ! isOwner ( clientUserId ) 
 + 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala 
 index e974152 . . b4df43f 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala 
 @ @ - 10 , 6 + 10 , 7 @ @ import im . actor . api . rpc . messaging . { ApiServiceMessage , UpdateMessage } 
 import im . actor . concurrent . FutureExt 
 import im . actor . server . acl . ACLUtils 
 import im . actor . server . group . GroupCommands . { Invite , Join , Kick , Leave } 
 + import im . actor . server . group . GroupErrors . CantLeaveGroup 
 import im . actor . server . group . GroupEvents . { UserInvited , UserJoined , UserKicked , UserLeft } 
 import im . actor . server . persist . { GroupInviteTokenRepo , GroupUserRepo } 
 import im . actor . server . sequence . { Optimization , SeqState , SeqStateDate } 
 @ @ - 336 , 6 + 337 , 8 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 protected def leave ( cmd : Leave ) : Unit = { 
 if ( state . nonMember ( cmd . userId ) ) { 
 sender ( ) ! notMember 
 + } else if ( ! state . permissions . canLeave ( cmd . userId ) ) { 
 + sender ( ) ! Status . Failure ( CantLeaveGroup ) 
 } else { 
 persist ( UserLeft ( Instant . now , cmd . userId ) ) { evt ⇒ 
 / / no commit here . it will be after service message sent 
 @ @ - 344 , 28 + 347 , 32 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 
 val updateObsolete = UpdateGroupUserLeaveObsolete ( groupId , cmd . userId , dateMillis , cmd . randomId ) 
 
 - / / TODO : merge , they are almost identical 
 - val leftUserUpdatesNew = 
 - if ( state . groupType . isChannel ) List ( 
 - UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = false ) , 
 - UpdateGroupCanEditInfoChanged ( groupId , canEditGroup = false ) , 
 - UpdateGroupCanEditUsernameChanged ( groupId , canEditUsername = false ) , 
 - UpdateGroupCanEditAdminsChanged ( groupId , canAssignAdmins = false ) , 
 - UpdateGroupCanViewAdminsChanged ( groupId , canViewAdmins = false ) , 
 - UpdateGroupCanEditAdminSettingsChanged ( groupId , canEditAdminSettings = false ) , 
 - UpdateGroupCanInviteMembersChanged ( groupId , canInviteMembers = false ) 
 - ) 
 - else List ( 
 + val leftUserUpdatesNew : Vector [ Update ] = { 
 + val commonUpdates = Vector ( 
 + UpdateGroupCanSendMessagesChanged ( groupId , canSendMessages = false ) , 
 UpdateGroupCanEditInfoChanged ( groupId , canEditGroup = false ) , 
 UpdateGroupCanEditUsernameChanged ( groupId , canEditUsername = false ) , 
 UpdateGroupCanEditAdminsChanged ( groupId , canAssignAdmins = false ) , 
 UpdateGroupCanViewAdminsChanged ( groupId , canViewAdmins = false ) , 
 UpdateGroupCanEditAdminSettingsChanged ( groupId , canEditAdminSettings = false ) , 
 - UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = false ) , 
 - UpdateGroupMembersUpdated ( groupId , members = Vector . empty ) , 
 - UpdateGroupCanInviteMembersChanged ( groupId , canInviteMembers = false ) 
 + UpdateGroupCanInviteViaLink ( groupId , canInviteViaLink = false ) , 
 + UpdateGroupCanLeaveChanged ( groupId , canLeaveChanged = false ) , 
 + UpdateGroupCanDeleteChanged ( groupId , canDeleteChanged = false ) 
 ) 
 
 + if ( state . groupType . isChannel ) { 
 + ( UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = false ) + : 
 + commonUpdates ) : + 
 + UpdateGroupCanInviteMembersChanged ( groupId , canInviteMembers = false ) 
 + } else { 
 + commonUpdates + + Vector ( 
 + UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = false ) , 
 + UpdateGroupMembersUpdated ( groupId , members = Vector . empty ) , 
 + UpdateGroupCanInviteMembersChanged ( groupId , canInviteMembers = false ) 
 + ) 
 + } 
 + } 
 + 
 val membersUpdateNew = 
 if ( state . groupType . isChannel ) { / / if channel , or group is big enough 
 UpdateGroupMembersCountChanged ( 
 @ @ - 485 , 30 + 492 , 31 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 
 val updateObsolete = UpdateGroupUserKickObsolete ( groupId , cmd . kickedUserId , cmd . kickerUserId , dateMillis , cmd . randomId ) 
 
 - / / TODO : merge , they are almost identical 
 - val kickedUserUpdatesNew : List [ Update ] = 
 - if ( state . groupType . isChannel ) List ( 
 + val kickedUserUpdatesNew : Vector [ Update ] = { 
 + val commonUpdates = Vector ( 
 UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = false ) , 
 + UpdateGroupCanSendMessagesChanged ( groupId , canSendMessages = false ) , 
 UpdateGroupCanEditInfoChanged ( groupId , canEditGroup = false ) , 
 UpdateGroupCanEditUsernameChanged ( groupId , canEditUsername = false ) , 
 UpdateGroupCanEditAdminsChanged ( groupId , canAssignAdmins = false ) , 
 UpdateGroupCanViewAdminsChanged ( groupId , canViewAdmins = false ) , 
 UpdateGroupCanEditAdminSettingsChanged ( groupId , canEditAdminSettings = false ) , 
 UpdateGroupCanInviteMembersChanged ( groupId , canInviteMembers = false ) , 
 - UpdateGroupMemberChanged ( groupId , isMember = false ) 
 - ) 
 - else List ( 
 - UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = false ) , 
 - UpdateGroupCanEditInfoChanged ( groupId , canEditGroup = false ) , 
 - UpdateGroupCanEditUsernameChanged ( groupId , canEditUsername = false ) , 
 - UpdateGroupCanEditAdminsChanged ( groupId , canAssignAdmins = false ) , 
 - UpdateGroupCanViewAdminsChanged ( groupId , canViewAdmins = false ) , 
 - UpdateGroupCanEditAdminSettingsChanged ( groupId , canEditAdminSettings = false ) , 
 - UpdateGroupCanInviteMembersChanged ( groupId , canInviteMembers = false ) , 
 - UpdateGroupMembersUpdated ( groupId , members = Vector . empty ) , 
 - UpdateGroupMemberChanged ( groupId , isMember = false ) 
 + UpdateGroupCanInviteViaLink ( groupId , canInviteViaLink = false ) , 
 + UpdateGroupCanLeaveChanged ( groupId , canLeaveChanged = false ) , 
 + UpdateGroupCanDeleteChanged ( groupId , canDeleteChanged = false ) 
 ) 
 
 + if ( state . groupType . isChannel ) { 
 + commonUpdates : + UpdateGroupMemberChanged ( groupId , isMember = false ) 
 + } else { 
 + commonUpdates + + Vector ( 
 + UpdateGroupMembersUpdated ( groupId , members = Vector . empty ) , 
 + UpdateGroupMemberChanged ( groupId , isMember = false ) 
 + ) 
 + } 
 + } 
 + 
 val membersUpdateNew : Update = 
 if ( newState . groupType . isChannel ) { / / if channel , or group is big enough 
 UpdateGroupMembersCountChanged ( 
 @ @ - 618 , 7 + 626 , 6 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 
 / / Updates that will be sent to user , when he enters group . 
 / / Helps clients that have this group to refresh it ' s data . 
 - / / TODO : review when channels will be added 
 private def refreshGroupUpdates ( newState : GroupState , userId : Int ) : List [ Update ] = List ( 
 UpdateGroupMemberChanged ( groupId , isMember = true ) , 
 UpdateGroupAboutChanged ( groupId , newState . about ) , 
 @ @ - 626 , 8 + 633 , 17 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 UpdateGroupTopicChanged ( groupId , newState . topic ) , 
 UpdateGroupTitleChanged ( groupId , newState . title ) , 
 UpdateGroupOwnerChanged ( groupId , newState . ownerUserId ) , 
 - UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = newState . permissions . canViewMembers ( userId ) ) , 
 - UpdateGroupCanInviteMembersChanged ( groupId , canInviteMembers = true ) / / TODO : figure out right value 
 + UpdateGroupCanSendMessagesChanged ( groupId , newState . permissions . canSendMessage ( userId ) ) , 
 + UpdateGroupCanViewMembersChanged ( groupId , newState . permissions . canViewMembers ( userId ) ) , 
 + UpdateGroupCanInviteMembersChanged ( groupId , newState . permissions . canInvitePeople ( userId ) ) , 
 + UpdateGroupCanEditInfoChanged ( groupId , newState . permissions . canEditInfo ( userId ) ) , 
 + UpdateGroupCanEditUsernameChanged ( groupId , newState . permissions . canEditShortName ( userId ) ) , 
 + UpdateGroupCanEditAdminsChanged ( groupId , newState . permissions . canEditAdmins ( userId ) ) , 
 + UpdateGroupCanViewAdminsChanged ( groupId , newState . permissions . canViewAdmins ( userId ) ) , 
 + UpdateGroupCanInviteViaLink ( groupId , newState . permissions . canInviteViaLink ( userId ) ) , 
 + UpdateGroupCanLeaveChanged ( groupId , newState . permissions . canLeave ( userId ) ) , 
 + UpdateGroupCanDeleteChanged ( groupId , newState . permissions . canDelete ( userId ) ) , 
 + UpdateGroupCanEditAdminSettingsChanged ( groupId , newState . permissions . canEditAdminSettings ( userId ) ) 
 / / UpdateGroupExtChanged ( groupId , newState . extension ) / / TODO : figure out and fix 
 / / if ( bigGroup ) UpdateGroupMembersCountChanged ( groupId , newState . extension ) 
 ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / Optimization . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / Optimization . scala 
 index 7f51787 . . e74b725 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / Optimization . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / Optimization . scala 
 @ @ - 50 , 7 + 50 , 10 @ @ object Optimization extends MessageParsing { 
 UpdateGroupCanEditUsernameChanged . header , 
 UpdateGroupCanEditAdminsChanged . header , 
 UpdateGroupCanViewAdminsChanged . header , 
 - UpdateGroupCanEditAdminSettingsChanged . header 
 + UpdateGroupCanEditAdminSettingsChanged . header , 
 + UpdateGroupCanInviteViaLink . header , 
 + UpdateGroupCanLeaveChanged . header , 
 + UpdateGroupCanDeleteChanged . header 
 ) 
 if ( deliveryTag = = GroupV2 ) 
 emptyUpdate 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala 
 index 6d67738 . . af4797e 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala 
 @ @ - 7 , 7 + 7 , 7 @ @ import im . actor . api . rpc . CommonRpcErrors . InvalidAccessHash 
 import im . actor . api . rpc . peers . _ 
 import im . actor . server . acl . ACLUtils . _ 
 import im . actor . server . db . DbExtension 
 - import im . actor . server . group . GroupErrors . GroupNotFound 
 + import im . actor . server . group . GroupErrors . { GroupAlreadyDeleted , GroupNotFound } 
 import im . actor . server . user . UserErrors . UserNotFound 
 import slick . dbio . DBIO 
 
 @ @ - 83 , 8 + 83 , 9 @ @ object PeerHelpers { 
 } 
 
 private def handleNotFound : PartialFunction [ Throwable , RpcError ] = { 
 - case _ : UserNotFound ⇒ CommonRpcErrors . UserNotFound 
 - case _ : GroupNotFound ⇒ CommonRpcErrors . GroupNotFound 
 - case e ⇒ throw e 
 + case _ : UserNotFound ⇒ CommonRpcErrors . UserNotFound 
 + case _ : GroupNotFound ⇒ CommonRpcErrors . GroupNotFound 
 + case _ : GroupAlreadyDeleted ⇒ CommonRpcErrors . GroupDeleted 
 + case e ⇒ throw e 
 } 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala 
 index ec63b7c . . f75bfaf 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala 
 @ @ - 6 , 7 + 6 , 7 @ @ import java . time . temporal . ChronoUnit 
 import akka . actor . _ 
 import akka . http . scaladsl . util . FastFuture 
 import cats . data . Xor 
 - import im . actor . api . rpc . CommonRpcErrors . IntenalError 
 + import im . actor . api . rpc . CommonRpcErrors . InternalError 
 import im . actor . api . rpc . FileRpcErrors . UnsupportedSignatureAlgorithm 
 import im . actor . api . rpc . _ 
 import im . actor . api . rpc . files . _ 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala 
 index 83e425b . . ecf61be 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala 
 @ @ - 18 , 6 + 18 , 7 @ @ object GroupRpcErrors { 
 val InvalidInviteToken = RpcError ( 403 , " INVALID _ INVITE _ TOKEN " , " Invalid invite token ! " , false , None ) 
 val InvalidInviteGroup = RpcError ( 403 , " INVALID _ INVITE _ GROUP " , " Invalid group name provided ! " , false , None ) 
 val GroupNotPublic = RpcError ( 400 , " GROUP _ IS _ NOT _ PUBLIC " , " The group is not public . " , false , None ) 
 + val CantLeaveGroup = RpcError ( 403 , " CANT _ LEAVE _ GROUP " , " You can ' t leave this group ! " , false , None ) 
 val InvalidShortName = RpcError ( 400 , " GROUP _ SHORT _ NAME _ INVALID " , 
 " Invalid group short name . Valid short name should contain from 5 to 32 characters , and may consist of latin characters , numbers and underscores " , false , None ) 
 val ShortNameTaken = RpcError ( 400 , " GROUP _ SHORT _ NAME _ TAKEN " , " This short name already belongs to other user or group , we are sorry ! " , false , None ) 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 index fc654f9 . . 7e03397 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 @ @ - 16 , 7 + 16 , 7 @ @ import im . actor . api . rpc . users . ApiUser 
 import im . actor . concurrent . FutureExt 
 import im . actor . server . acl . ACLUtils 
 import im . actor . server . db . DbExtension 
 - import im . actor . server . file . { FileErrors , FileStorageAdapter , FileStorageExtension , ImageUtils } 
 + import im . actor . server . file . { FileErrors , ImageUtils } 
 import im . actor . server . group . _ 
 import im . actor . server . model . GroupInviteToken 
 import im . actor . server . names . GlobalNamesStorageKeyValueStorage 
 @ @ - 459 , 7 + 459 , 23 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act 
 } 
 } 
 
 - protected def doHandleDeleteGroup ( groupPeer : ApiGroupOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = ? ? ? 
 + protected def doHandleDeleteGroup ( groupPeer : ApiGroupOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = 
 + authorized ( clientData ) { client ⇒ 
 + withGroupOutPeer ( groupPeer ) { 
 + for { 
 + SeqState ( seq , state ) ← groupExt . deleteGroup ( groupPeer . groupId , client . userId , client . authId ) 
 + } yield Ok ( ResponseSeq ( seq , state . toByteArray ) ) 
 + } 
 + } 
 + 
 + protected def doHandleShareHistory ( groupPeer : ApiGroupOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = 
 + authorized ( clientData ) { client ⇒ 
 + withGroupOutPeer ( groupPeer ) { 
 + for { 
 + SeqState ( seq , state ) ← groupExt . makeHistoryShared ( groupPeer . groupId , client . userId , client . authId ) 
 + } yield Ok ( ResponseSeq ( seq , state . toByteArray ) ) 
 + } 
 + } 
 
 private def usersOrPeers ( userIds : Vector [ Int ] , stripEntities : Boolean ) ( implicit client : AuthorizedClientData ) : Future [ ( Vector [ ApiUser ] , Vector [ ApiUserOutPeer ] ) ] = 
 if ( stripEntities ) { 
 @ @ - 594 , 6 + 610 , 7 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act 
 case GroupErrors . InvalidShortName ⇒ GroupRpcErrors . InvalidShortName 
 case GroupErrors . ShortNameTaken ⇒ GroupRpcErrors . ShortNameTaken 
 case GroupErrors . NoPermission ⇒ GroupRpcErrors . NoPermission 
 + case GroupErrors . CantLeaveGroup ⇒ GroupRpcErrors . CantLeaveGroup 
 } 
 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 index 1800806 . . affe506 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 @ @ - 46 , 6 + 46 , 7 @ @ trait HistoryHandlers { 
 } 
 } 
 
 + / / FIXME : handle clear chat for groups with shared history 
 override def doHandleClearChat ( peer : ApiOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = 
 authorized ( clientData ) { implicit client ⇒ 
 val update = UpdateChatClear ( peer . asPeer ) 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala 
 index 7715069 . . 83a27e0 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala 
 @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . server . api . rpc . service . messaging 
 import akka . http . scaladsl . util . FastFuture 
 import akka . util . Timeout 
 import cats . data . Xor 
 - import im . actor . api . rpc . CommonRpcErrors . IntenalError 
 + import im . actor . api . rpc . CommonRpcErrors . InternalError 
 import im . actor . api . rpc . { CommonRpcErrors , _ } 
 import im . actor . api . rpc . messaging . _ 
 import im . actor . api . rpc . misc . _ 
 @ @ - 71 , 7 + 71 , 7 @ @ private [ messaging ] trait MessagingHandlers extends PeersImplicits 
 ( for { 
 histMessage ← fromFutureOption ( NotAllowedToEdit ) ( getEditableHistoryMessage ( peer , randomId ) ) 
 _ ← fromBoolean ( NotInTimeWindow ) ( inTimeWindow ( histMessage . date . getMillis ) ) 
 - apiMessage ← fromXor ( ( e : Any ) ⇒ IntenalError ) ( Xor . fromEither ( parseMessage ( histMessage . messageContentData ) ) ) 
 + apiMessage ← fromXor ( ( e : Any ) ⇒ InternalError ) ( Xor . fromEither ( parseMessage ( histMessage . messageContentData ) ) ) 
 _ ← fromBoolean ( NotTextMessage ) ( apiMessage match { 
 case _ : ApiTextMessage ⇒ true 
 case _ ⇒ false
