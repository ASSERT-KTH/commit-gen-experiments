BLEU SCORE: 0.42610827239170174

TEST MSG: fix ( server : messaging ) : dont allow ts collisions in activePeers and archived
GENERATED MSG: fix ( server : messaging ) : include archived peers in LoadDialogs

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > index 8f19016 . . 86fa57e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > @ @ - 118 , 19 + 118 , 23 @ @ private final case class DialogRootState ( < nl > ) < nl > } < nl > < nl > - private def withArchivedPeer ( ts : Instant , peer : Peer ) = { < nl > + private def withArchivedPeer ( ts : Instant , peer : Peer ) : DialogRootState = { < nl > val sortableDialog = SortableDialog ( ts , peer ) < nl > < nl > - copy ( < nl > - activePeers = this . activePeers - sortableDialog , < nl > - active = this . active mapValues ( _ - sortableDialog ) , < nl > - archived = this . archived + sortableDialog < nl > - ) < nl > + if ( archived . exists ( _ . ts = = ts ) ) withArchivedPeer ( ts . plusMillis ( 1 ) , peer ) < nl > + else < nl > + copy ( < nl > + activePeers = this . activePeers - sortableDialog , < nl > + active = this . active mapValues ( _ - sortableDialog ) , < nl > + archived = this . archived + sortableDialog < nl > + ) < nl > } < nl > < nl > - private def withFavouritedPeer ( ts : Instant , peer : Peer ) = { < nl > + private def withFavouritedPeer ( ts : Instant , peer : Peer ) : DialogRootState = { < nl > val sortableDialog = SortableDialog ( ts , peer ) < nl > < nl > + if ( activePeers . exists ( _ . ts = = ts ) ) withFavouritedPeer ( ts . plusMillis ( 1 ) , peer ) < nl > + else < nl > copy ( < nl > activePeers = this . activePeers + sortableDialog , < nl > active = this . active . mapValues ( _ . filterNot ( _ . peer = = peer ) ) + dialogGroup ( sortableDialog , isFavourite = true ) , < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > index 6afdaae . . ce70d26 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > @ @ - 86 , 6 + 86 , 7 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { < nl > probe . commit ( Archived ( Instant . now , Some ( bob ) ) ) < nl > < nl > getArchivedPeers should be ( Seq ( bob , alice ) ) < nl > + checkSnapshot < nl > } < nl > < nl > private def getGroupPeers ( typ : DialogGroupType ) ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) =
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > index dacaf2d . . 8f19016 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > @ @ - 78 , 6 + 78 , 8 @ @ private final case class DialogRootState ( < nl > case Unfavourited ( ts , Some ( peer ) ) ⇒ withUnfavouritedPeer ( ts , peer ) < nl > } < nl > < nl > + lazy val allPeers = activePeers + + archived < nl > + < nl > override def withSnapshot ( metadata : SnapshotMetadata , snapshot : Any ) : DialogRootState = snapshot match { < nl > case DialogRootStateSnapshot ( dialogGroups , _ archived ) ⇒ { < nl > val state = DialogRootState . initial . copy ( < nl > @ @ - 201 , 8 + 203 , 8 @ @ private trait DialogRootQueryHandlers { < nl > def getDialogs ( endDate : Instant , limit : Int ) : Future [ GetDialogsResponse ] = { < nl > val dialogs = < nl > endDateTimeFrom ( endDate ) match { < nl > - case Some ( _ ) ⇒ state . activePeers . view . filter ( sd ⇒ sd . ts . isBefore ( endDate ) | | sd . ts = = endDate ) . take ( limit ) < nl > - case None ⇒ state . activePeers . takeRight ( limit ) < nl > + case Some ( _ ) ⇒ state . allPeers . view . filter ( sd ⇒ sd . ts . isBefore ( endDate ) | | sd . ts = = endDate ) . take ( limit ) < nl > + case None ⇒ state . allPeers . takeRight ( limit ) < nl > } < nl > < nl > for { < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > index 382cd29 . . da11a6c 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > @ @ - 135 , 6 + 135 , 9 @ @ final class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceH < nl > { < nl > implicit val clientData = clientData1 < nl > < nl > + / / Archiving should not hide from LoadDialogs < nl > + whenReady ( service . handleArchiveChat ( user2Peer ) ) ( identity ) < nl > + < nl > whenReady ( service . handleLoadDialogs ( 0 , 100 ) ) { resp ⇒ < nl > resp should matchPattern { < nl > case Ok ( _ ) ⇒

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 index 8f19016 . . 86fa57e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 @ @ - 118 , 19 + 118 , 23 @ @ private final case class DialogRootState ( 
 ) 
 } 
 
 - private def withArchivedPeer ( ts : Instant , peer : Peer ) = { 
 + private def withArchivedPeer ( ts : Instant , peer : Peer ) : DialogRootState = { 
 val sortableDialog = SortableDialog ( ts , peer ) 
 
 - copy ( 
 - activePeers = this . activePeers - sortableDialog , 
 - active = this . active mapValues ( _ - sortableDialog ) , 
 - archived = this . archived + sortableDialog 
 - ) 
 + if ( archived . exists ( _ . ts = = ts ) ) withArchivedPeer ( ts . plusMillis ( 1 ) , peer ) 
 + else 
 + copy ( 
 + activePeers = this . activePeers - sortableDialog , 
 + active = this . active mapValues ( _ - sortableDialog ) , 
 + archived = this . archived + sortableDialog 
 + ) 
 } 
 
 - private def withFavouritedPeer ( ts : Instant , peer : Peer ) = { 
 + private def withFavouritedPeer ( ts : Instant , peer : Peer ) : DialogRootState = { 
 val sortableDialog = SortableDialog ( ts , peer ) 
 
 + if ( activePeers . exists ( _ . ts = = ts ) ) withFavouritedPeer ( ts . plusMillis ( 1 ) , peer ) 
 + else 
 copy ( 
 activePeers = this . activePeers + sortableDialog , 
 active = this . active . mapValues ( _ . filterNot ( _ . peer = = peer ) ) + dialogGroup ( sortableDialog , isFavourite = true ) , 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 index 6afdaae . . ce70d26 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 @ @ - 86 , 6 + 86 , 7 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { 
 probe . commit ( Archived ( Instant . now , Some ( bob ) ) ) 
 
 getArchivedPeers should be ( Seq ( bob , alice ) ) 
 + checkSnapshot 
 } 
 
 private def getGroupPeers ( typ : DialogGroupType ) ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) =

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 index dacaf2d . . 8f19016 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 @ @ - 78 , 6 + 78 , 8 @ @ private final case class DialogRootState ( 
 case Unfavourited ( ts , Some ( peer ) ) ⇒ withUnfavouritedPeer ( ts , peer ) 
 } 
 
 + lazy val allPeers = activePeers + + archived 
 + 
 override def withSnapshot ( metadata : SnapshotMetadata , snapshot : Any ) : DialogRootState = snapshot match { 
 case DialogRootStateSnapshot ( dialogGroups , _ archived ) ⇒ { 
 val state = DialogRootState . initial . copy ( 
 @ @ - 201 , 8 + 203 , 8 @ @ private trait DialogRootQueryHandlers { 
 def getDialogs ( endDate : Instant , limit : Int ) : Future [ GetDialogsResponse ] = { 
 val dialogs = 
 endDateTimeFrom ( endDate ) match { 
 - case Some ( _ ) ⇒ state . activePeers . view . filter ( sd ⇒ sd . ts . isBefore ( endDate ) | | sd . ts = = endDate ) . take ( limit ) 
 - case None ⇒ state . activePeers . takeRight ( limit ) 
 + case Some ( _ ) ⇒ state . allPeers . view . filter ( sd ⇒ sd . ts . isBefore ( endDate ) | | sd . ts = = endDate ) . take ( limit ) 
 + case None ⇒ state . allPeers . takeRight ( limit ) 
 } 
 
 for { 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 index 382cd29 . . da11a6c 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 @ @ - 135 , 6 + 135 , 9 @ @ final class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceH 
 { 
 implicit val clientData = clientData1 
 
 + / / Archiving should not hide from LoadDialogs 
 + whenReady ( service . handleArchiveChat ( user2Peer ) ) ( identity ) 
 + 
 whenReady ( service . handleLoadDialogs ( 0 , 100 ) ) { resp ⇒ 
 resp should matchPattern { 
 case Ok ( _ ) ⇒
