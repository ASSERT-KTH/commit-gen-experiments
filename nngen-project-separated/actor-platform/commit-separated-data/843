BLEU SCORE: 0.20684088400488973

TEST MSG: wip ( core ) : Working on updated master call actor
GENERATED MSG: feat ( core ) : Implemented sharing members from master to slave calls

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json < nl > index 0bab21b . . 7bb525b 100644 < nl > - - - a / actor - sdk / sdk - api / actor . json < nl > + + + b / actor - sdk / sdk - api / actor . json < nl > @ @ - 13241 , 6 + 13241 , 12 @ @ < nl > " argument " : " canBeAudioRelay " , < nl > " category " : " full " , < nl > " description " : " If peer can audio relay . Default is false . " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " canPreConnect " , < nl > + " category " : " full " , < nl > + " description " : " If peer can preconnect before answer " < nl > } < nl > ] , < nl > " attributes " : [ < nl > @ @ - 13274 , 7 + 13280 , 7 @ @ < nl > " childType " : " bool " < nl > } , < nl > " id " : 4 , < nl > - " name " : " canConnect " < nl > + " name " : " canPreConnect " < nl > } < nl > ] < nl > } < nl > diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > index d2ebb86 . . 6562d62 100644 < nl > - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > @ @ - 11368 , 7 + 11368 , 7 @ @ < nl > < / node > < nl > < node concept = " 2m7Kf5 " id = " 3xEfKBqKDn $ " role = " 2m0hLx " > < nl > < property role = " 2m7DUN " value = " 4 " / > < nl > - < property role = " TrG5h " value = " canConnect " / > < nl > + < property role = " TrG5h " value = " canPreConnect " / > < nl > < node concept = " 2m5nlT " id = " 3xEfKBqKDnL " role = " 2m7DVh " > < nl > < node concept = " 2m5ndN " id = " 3xEfKBqKDnR " role = " 3GH5xg " / > < nl > < / node > < nl > @ @ - 11391 , 6 + 11391 , 11 @ @ < nl > < property role = " NX6R2 " value = " If peer can audio relay . Default is false . " / > < nl > < ref role = " NX6Kv " node = " 3xEfKBqKs _ o " resolve = " canBeAudioRelay " / > < nl > < / node > < nl > + < node concept = " NX1gA " id = " 3xEfKBqL87R " role = " NXodf " > < nl > + < property role = " 1GSvIU " value = " full " / > < nl > + < property role = " NX6R2 " value = " If peer can preconnect before answer " / > < nl > + < ref role = " NX6Kv " node = " 3xEfKBqKDn $ " resolve = " canPreConnect " / > < nl > + < / node > < nl > < / node > < nl > < node concept = " 1Dx9M1 " id = " 6tgpW9bxpK8 " role = " 1Dx9rD " > < nl > < property role = " 1Dx9K7 " value = " WebRTC package that enables support to audio and video calls " / > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiPeerSettings . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiPeerSettings . java < nl > index eddbb61 . . 5d2a205 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiPeerSettings . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiPeerSettings . java < nl > @ @ - 19 , 13 + 19 , 13 @ @ public class ApiPeerSettings extends BserObject { < nl > private Boolean is3DESSupported ; < nl > private Boolean isMobile ; < nl > private Boolean canBeAudioRelay ; < nl > - private Boolean canConnect ; < nl > + private Boolean canPreConnect ; < nl > < nl > - public ApiPeerSettings ( @ Nullable Boolean is3DESSupported , @ Nullable Boolean isMobile , @ Nullable Boolean canBeAudioRelay , @ Nullable Boolean canConnect ) { < nl > + public ApiPeerSettings ( @ Nullable Boolean is3DESSupported , @ Nullable Boolean isMobile , @ Nullable Boolean canBeAudioRelay , @ Nullable Boolean canPreConnect ) { < nl > this . is3DESSupported = is3DESSupported ; < nl > this . isMobile = isMobile ; < nl > this . canBeAudioRelay = canBeAudioRelay ; < nl > - this . canConnect = canConnect ; < nl > + this . canPreConnect = canPreConnect ; < nl > } < nl > < nl > public ApiPeerSettings ( ) { < nl > @ @ - 48 , 8 + 48 , 8 @ @ public class ApiPeerSettings extends BserObject { < nl > } < nl > < nl > @ Nullable < nl > - public Boolean canConnect ( ) { < nl > - return this . canConnect ; < nl > + public Boolean canPreConnect ( ) { < nl > + return this . canPreConnect ; < nl > } < nl > < nl > @ Override < nl > @ @ - 57 , 7 + 57 , 7 @ @ public class ApiPeerSettings extends BserObject { < nl > this . is3DESSupported = values . optBool ( 1 ) ; < nl > this . isMobile = values . optBool ( 2 ) ; < nl > this . canBeAudioRelay = values . optBool ( 3 ) ; < nl > - this . canConnect = values . optBool ( 4 ) ; < nl > + this . canPreConnect = values . optBool ( 4 ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 71 , 8 + 71 , 8 @ @ public class ApiPeerSettings extends BserObject { < nl > if ( this . canBeAudioRelay ! = null ) { < nl > writer . writeBool ( 3 , this . canBeAudioRelay ) ; < nl > } < nl > - if ( this . canConnect ! = null ) { < nl > - writer . writeBool ( 4 , this . canConnect ) ; < nl > + if ( this . canPreConnect ! = null ) { < nl > + writer . writeBool ( 4 , this . canPreConnect ) ; < nl > } < nl > } < nl > < nl > @ @ - 82 , 6 + 82 , 7 @ @ public class ApiPeerSettings extends BserObject { < nl > res + = " is3DESSupported = " + this . is3DESSupported ; < nl > res + = " , isMobile = " + this . isMobile ; < nl > res + = " , canBeAudioRelay = " + this . canBeAudioRelay ; < nl > + res + = " , canPreConnect = " + this . canPreConnect ; < nl > res + = " } " ; < nl > return res ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java < nl > index 3769985 . . bde73b4 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java < nl > @ @ - 17 , 6 + 17 , 7 @ @ import im . actor . core . viewmodel . CallVM ; < nl > public class AbsCallActor extends PeerCallActor { < nl > < nl > private final HashMap < Long , CallVM > callModels ; < nl > + private CallVM callVM ; < nl > < nl > public AbsCallActor ( boolean isSlaveMode , ModuleContext context ) { < nl > super ( isSlaveMode , context ) ; < nl > @ @ - 29 , 9 + 30 , 11 @ @ public class AbsCallActor extends PeerCallActor { < nl > / / < nl > public CallVM spawnNewVM ( long callId , Peer peer , boolean isOutgoing , ArrayList < CallMember > members , CallState callState ) { < nl > CallVM callVM = new CallVM ( callId , peer , isOutgoing , members , callState ) ; < nl > + callVM . getIsMuted ( ) . change ( isMuted ( ) ) ; < nl > synchronized ( callModels ) { < nl > callModels . put ( callId , callVM ) ; < nl > } < nl > + this . callVM = callVM ; < nl > return callVM ; < nl > } < nl > < nl > @ @ - 50 , 4 + 53 , 12 @ @ public class AbsCallActor extends PeerCallActor { < nl > } < nl > return spawnNewVM ( callId , peer , true , members , CallState . RINGING ) ; < nl > } < nl > + < nl > + @ Override < nl > + public void onMute ( boolean isMuted ) { < nl > + super . onMute ( isMuted ) ; < nl > + if ( callVM ! = null ) { < nl > + callVM . getIsMuted ( ) . change ( isMuted ) ; < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > index 4f31edf . . 8983a25 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > @ @ - 73 , 8 + 73 , 7 @ @ public class CallManagerActor extends ModuleActor { < nl > system ( ) . actorOf ( " actor / master / " + RandomUtils . nextRid ( ) , new ActorCreator ( ) { < nl > @ Override < nl > public Actor create ( ) { < nl > - / / return new CallMasterActor ( peer , context ( ) , callback ) ; < nl > - return null ; < nl > + return new PeerCallMasterActor ( peer , callback , context ( ) ) ; < nl > } < nl > } ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > index 81d5ca1 . . 094cbff 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > @ @ - 69 , 7 + 69 , 6 @ @ public class CallSlaveActor extends AbsCallActor { < nl > / / Creating Call VM < nl > / / < nl > callVM = spawnNewVM ( callId , peer , false , new ArrayList < CallMember > ( ) , CallState . RINGING ) ; < nl > - callVM . getIsMuted ( ) . change ( isMuted ( ) ) ; < nl > < nl > / / < nl > / / Notify call manager to trigger ringing < nl > @ @ - 78 , 14 + 77 , 6 @ @ public class CallSlaveActor extends AbsCallActor { < nl > } < nl > < nl > @ Override < nl > - public void onMute ( boolean isMuted ) { < nl > - super . onMute ( isMuted ) ; < nl > - if ( callVM ! = null ) { < nl > - callVM . getIsMuted ( ) . change ( isMuted ) ; < nl > - } < nl > - } < nl > - < nl > - @ Override < nl > public void onFirstPeerStarted ( ) { < nl > < nl > isConnected = true ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerCallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerCallMasterActor . java < nl > new file mode 100644 < nl > index 0000000 . . a5564d6 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerCallMasterActor . java < nl > @ @ - 0 , 0 + 1 , 274 @ @ < nl > + package im . actor . core . modules . calls ; < nl > + < nl > + import java . util . HashMap ; < nl > + import java . util . HashSet ; < nl > + < nl > + import im . actor . core . api . ApiPeerSettings ; < nl > + import im . actor . core . api . rpc . RequestDoCall ; < nl > + import im . actor . core . api . rpc . ResponseDoCall ; < nl > + import im . actor . core . entity . GroupMember ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . PeerType ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . calls . peers . PeerNodeInt ; < nl > + import im . actor . core . modules . calls . peers . PeerNodeSettings ; < nl > + import im . actor . core . viewmodel . CallState ; < nl > + import im . actor . core . viewmodel . CallVM ; < nl > + import im . actor . core . viewmodel . CommandCallback ; < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . function . Consumer ; < nl > + < nl > + public class PeerCallMasterActor extends AbsCallActor { < nl > + < nl > + private static final String TAG = " CallMasterActor " ; < nl > + private static final long MASTER _ CALL _ TIMEOUT = 8000 ; < nl > + < nl > + private final Peer peer ; < nl > + private ActorRef callManager ; < nl > + private CommandCallback < Long > callback ; < nl > + private HashSet < Integer > members ; < nl > + private HashMap < Long , Node > nodes ; < nl > + private long callId ; < nl > + private CallVM callVM ; < nl > + < nl > + public PeerCallMasterActor ( Peer peer , CommandCallback < Long > callback , ModuleContext context ) { < nl > + super ( false , context ) ; < nl > + this . peer = peer ; < nl > + this . callback = callback ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + super . preStart ( ) ; < nl > + getSelfSettings ( ) . setIsPreConnectionEnabled ( true ) ; < nl > + callManager = context ( ) . getCallsModule ( ) . getCallManager ( ) ; < nl > + createBus ( MASTER _ CALL _ TIMEOUT ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onBusCreated ( ) { < nl > + api ( new RequestDoCall ( buidOutPeer ( peer ) , getBusId ( ) ) ) . then ( new Consumer < ResponseDoCall > ( ) { < nl > + @ Override < nl > + public void apply ( ResponseDoCall responseDoCall ) { < nl > + < nl > + / / < nl > + / / Initialization of Call State < nl > + / / < nl > + / / TODO : Possible race conditions when members changed during call initiation < nl > + / / Need to return explicit callers in response < nl > + < nl > + members = new HashSet < > ( ) ; < nl > + if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + for ( GroupMember gm : getGroup ( peer . getPeerId ( ) ) . getMembers ( ) ) { < nl > + members . add ( gm . getUid ( ) ) ; < nl > + } < nl > + } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + members . add ( peer . getPeerId ( ) ) ; < nl > + members . add ( myUid ( ) ) ; < nl > + } else { < nl > + throw new RuntimeException ( " Unsupported Peer Type group " ) ; < nl > + } < nl > + < nl > + / / < nl > + / / Initialization of CallVM < nl > + / / < nl > + callId = responseDoCall . getCallId ( ) ; < nl > + callVM = spanNewOutgoingVM ( responseDoCall . getCallId ( ) , peer ) ; < nl > + < nl > + / / < nl > + / / Notifying about successful call creation < nl > + / / < nl > + callManager . send ( new CallManagerActor . DoCallComplete ( responseDoCall . getCallId ( ) ) , self ( ) ) ; < nl > + callback . onResult ( responseDoCall . getCallId ( ) ) ; < nl > + callback = null ; < nl > + < nl > + / / < nl > + / / Create New Node Collection < nl > + / / < nl > + nodes = new HashMap < > ( ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + callback . onError ( e ) ; < nl > + callback = null ; < nl > + dispose ( ) ; < nl > + } < nl > + } ) . done ( self ( ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onDeviceConnected ( int uid , long deviceId ) { < nl > + if ( ! members . contains ( uid ) | | uid = = 0 ) { < nl > + return ; < nl > + } < nl > + < nl > + Log . d ( TAG , " onDeviceConnected : " + deviceId ) ; < nl > + < nl > + sendSwitchMaster ( uid , deviceId ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onAdvertised ( int uid , long deviceId , ApiPeerSettings settings ) { < nl > + if ( nodes . containsKey ( deviceId ) ) { < nl > + return ; < nl > + } < nl > + < nl > + Log . d ( TAG , " onAdvertised : " + deviceId + " , " + settings ) ; < nl > + < nl > + PeerNodeSettings nodeSettings = new PeerNodeSettings ( settings ) ; < nl > + Node node = new Node ( uid , deviceId , getPeer ( uid , deviceId ) , nodeSettings , settings ) ; < nl > + nodes . put ( deviceId , node ) ; < nl > + < nl > + / / < nl > + / / Starting Pre Connections < nl > + / / < nl > + if ( nodeSettings . isPreConnectionEnabled ( ) ) { < nl > + < nl > + for ( Node n : nodes . values ( ) ) { < nl > + if ( n . getDeviceId ( ) = = deviceId ) { < nl > + continue ; < nl > + } < nl > + if ( n . isAnswered ( ) | | n . getPeerSettings ( ) . isPreConnectionEnabled ( ) ) { < nl > + sendNeedOffer ( n . getUid ( ) , n . getDeviceId ( ) , uid , deviceId , settings , true ) ; < nl > + node . getConnectedDevices ( ) . put ( n . getDeviceId ( ) , ConnectionState . SILENT ) ; < nl > + n . getConnectedDevices ( ) . put ( node . getDeviceId ( ) , ConnectionState . SILENT ) ; < nl > + } < nl > + } < nl > + < nl > + if ( getSelfSettings ( ) . isPreConnectionEnabled ( ) ) { < nl > + getPeer ( uid , deviceId ) . onAdvertised ( nodeSettings ) ; < nl > + getPeer ( uid , deviceId ) . onOfferNeeded ( ) ; < nl > + } < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void onAnswered ( int uid , long deviceId ) { < nl > + super . onAnswered ( uid , deviceId ) ; < nl > + < nl > + Log . d ( TAG , " onAnswered : " + deviceId ) ; < nl > + < nl > + if ( ! nodes . containsKey ( deviceId ) ) { < nl > + return ; < nl > + } < nl > + < nl > + Node node = nodes . get ( deviceId ) ; < nl > + if ( node . getPeerSettings ( ) . isPreConnectionEnabled ( ) & & getSelfSettings ( ) . isPreConnectionEnabled ( ) ) { < nl > + getPeer ( uid , deviceId ) . onAnswered ( ) ; < nl > + } else { < nl > + getPeer ( uid , deviceId ) . onAdvertised ( node . getPeerSettings ( ) ) ; < nl > + getPeer ( uid , deviceId ) . onOfferNeeded ( ) ; < nl > + getPeer ( uid , deviceId ) . onAnswered ( ) ; < nl > + } < nl > + < nl > + / / < nl > + / / Starting Pre Connections < nl > + / / < nl > + for ( Node n : nodes . values ( ) ) { < nl > + if ( n . getDeviceId ( ) = = deviceId ) { < nl > + continue ; < nl > + } < nl > + if ( n . isAnswered ( ) | | n . getPeerSettings ( ) . isPreConnectionEnabled ( ) ) { < nl > + ConnectionState connectionState = n . getConnectedDevices ( ) . get ( deviceId ) ; < nl > + if ( connectionState = = null ) { < nl > + sendNeedOffer ( n . getUid ( ) , n . getDeviceId ( ) , uid , deviceId , n . getApiPeerSettings ( ) , false ) ; < nl > + } else if ( connectionState = = ConnectionState . SILENT ) { < nl > + sendOnAnswered ( n . getUid ( ) , n . getDeviceId ( ) , uid , deviceId ) ; < nl > + n . getConnectedDevices ( ) . put ( deviceId , ConnectionState . CONNECTED ) ; < nl > + } else { < nl > + / / Already connected < nl > + } < nl > + } < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void onPeerConnected ( int uid , long deviceId ) { < nl > + super . onPeerConnected ( uid , deviceId ) ; < nl > + Log . d ( TAG , " onPeerConnected : " + deviceId ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onPeerStarted ( int uid , long deviceId ) { < nl > + super . onPeerStarted ( uid , deviceId ) ; < nl > + Log . d ( TAG , " onPeerStarted : " + deviceId ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onDeviceDisconnected ( int uid , long deviceId ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void postStop ( ) { < nl > + super . postStop ( ) ; < nl > + < nl > + if ( callback ! = null ) { < nl > + callback . onError ( new RuntimeException ( " Internal Error " ) ) ; < nl > + } < nl > + < nl > + if ( callVM ! = null ) { < nl > + callVM . getState ( ) . change ( CallState . ENDED ) ; < nl > + callManager . send ( new CallManagerActor . OnCallEnded ( callId ) ) ; < nl > + } < nl > + } < nl > + < nl > + private enum ConnectionState { < nl > + SILENT , CONNECTED < nl > + } < nl > + < nl > + private class Node { < nl > + < nl > + private int uid ; < nl > + private long deviceId ; < nl > + private PeerNodeInt nodeInt ; < nl > + private PeerNodeSettings peerSettings ; < nl > + private ApiPeerSettings apiPeerSettings ; < nl > + private boolean isAnswered ; < nl > + private HashMap < Long , ConnectionState > connectedDevices = new HashMap < > ( ) ; < nl > + < nl > + public Node ( int uid , long deviceId , PeerNodeInt nodeInt , PeerNodeSettings peerSettings , < nl > + ApiPeerSettings apiPeerSettings ) { < nl > + this . uid = uid ; < nl > + this . deviceId = deviceId ; < nl > + this . nodeInt = nodeInt ; < nl > + this . peerSettings = peerSettings ; < nl > + this . isAnswered = false ; < nl > + this . apiPeerSettings = apiPeerSettings ; < nl > + } < nl > + < nl > + public HashMap < Long , ConnectionState > getConnectedDevices ( ) { < nl > + return connectedDevices ; < nl > + } < nl > + < nl > + public ApiPeerSettings getApiPeerSettings ( ) { < nl > + return apiPeerSettings ; < nl > + } < nl > + < nl > + public int getUid ( ) { < nl > + return uid ; < nl > + } < nl > + < nl > + public long getDeviceId ( ) { < nl > + return deviceId ; < nl > + } < nl > + < nl > + public boolean isAnswered ( ) { < nl > + return isAnswered ; < nl > + } < nl > + < nl > + public void setIsAnswered ( boolean isAnswered ) { < nl > + this . isAnswered = isAnswered ; < nl > + } < nl > + < nl > + public PeerNodeInt getNodeInt ( ) { < nl > + return nodeInt ; < nl > + } < nl > + < nl > + public PeerNodeSettings getPeerSettings ( ) { < nl > + return peerSettings ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > index 88d7513 . . 4b47c58 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . core . api . ApiCallMember ; < nl > import im . actor . core . api . ApiCandidate ; < nl > import im . actor . core . api . ApiNeedOffer ; < nl > import im . actor . core . api . ApiOffer ; < nl > + import im . actor . core . api . ApiOnAnswer ; < nl > import im . actor . core . api . ApiPeerSettings ; < nl > import im . actor . core . api . ApiRejectCall ; < nl > import im . actor . core . api . ApiSwitchMaster ; < nl > @ @ - 106 , 10 + 107 , 16 @ @ public class PeerCallActor extends EventBusActor { < nl > } < nl > < nl > public void startSignaling ( String busId ) { < nl > + if ( ! isSlaveMode ) { < nl > + throw new RuntimeException ( " This operation is only for slave mode " ) ; < nl > + } < nl > joinBus ( busId ) ; < nl > } < nl > < nl > public void onMasterSwitched ( int uid , long deviceId ) { < nl > + if ( ! isSlaveMode ) { < nl > + throw new RuntimeException ( " This operation is only for slave mode " ) ; < nl > + } < nl > this . masterUid = uid ; < nl > this . masterDeviceId = deviceId ; < nl > this . haveMaster = true ; < nl > @ @ - 163 , 10 + 170 , 27 @ @ public class PeerCallActor extends EventBusActor { < nl > < nl > } < nl > < nl > + public void onAdvertised ( int uid , long deviceId , ApiPeerSettings settings ) { < nl > + < nl > + } < nl > + < nl > + public void onAnswered ( int uid , long deviceId ) { < nl > + < nl > + } < nl > + < nl > public void sendAdvertise ( int uid , long deviceId , ApiPeerSettings settings ) { < nl > sendSignaling ( uid , deviceId , new ApiAdvertiseSelf ( settings ) ) ; < nl > } < nl > < nl > + public void sendNeedOffer ( int uid , long deviceId , int destUid , long destDeviceId , < nl > + ApiPeerSettings settings , boolean isSilent ) { < nl > + sendSignaling ( uid , deviceId , new ApiNeedOffer ( destUid , destDeviceId , settings , isSilent ) ) ; < nl > + } < nl > + < nl > + public void sendOnAnswered ( int uid , long deviceId , int destUid , long destDeviceId ) { < nl > + sendSignaling ( uid , deviceId , new ApiOnAnswer ( destUid , destDeviceId ) ) ; < nl > + } < nl > + < nl > public void sendAnswer ( ) { < nl > if ( isAnswered ) { < nl > return ; < nl > @ @ - 195 , 13 + 219 , 17 @ @ public class PeerCallActor extends EventBusActor { < nl > } < nl > < nl > public void sendRTCOffer ( int uid , long deviceId , String sdp ) { < nl > - sendSignaling ( uid , deviceId , new ApiAnswer ( 0 , sdp ) ) ; < nl > + sendSignaling ( uid , deviceId , new ApiOffer ( 0 , sdp , getSelfSettings ( ) . toApi ( ) ) ) ; < nl > } < nl > < nl > public void sendRTCCandidate ( int uid , long deviceId , int index , String id , String sdp ) { < nl > sendSignaling ( uid , deviceId , new ApiCandidate ( 0 , index , id , sdp ) ) ; < nl > } < nl > < nl > + public void sendSwitchMaster ( int uid , long deviceId ) { < nl > + sendSignaling ( uid , deviceId , new ApiSwitchMaster ( ) ) ; < nl > + } < nl > + < nl > public void sendSignaling ( int uid , long deviceId , ApiWebRTCSignaling signaling ) { < nl > byte [ ] msg ; < nl > try { < nl > @ @ - 260 , 6 + 288 , 11 @ @ public class PeerCallActor extends EventBusActor { < nl > } else if ( signaling instanceof ApiNeedOffer ) { < nl > ApiNeedOffer needOffer = ( ApiNeedOffer ) signaling ; < nl > getPeer ( needOffer . getUid ( ) , needOffer . getDevice ( ) ) . onOfferNeeded ( ) ; < nl > + } else if ( signaling instanceof ApiAdvertiseSelf ) { < nl > + ApiAdvertiseSelf advertiseSelf = ( ApiAdvertiseSelf ) signaling ; < nl > + onAdvertised ( senderId , senderDeviceId , advertiseSelf . getPeerSettings ( ) ) ; < nl > + } else if ( signaling instanceof ApiAnswerCall ) { < nl > + onAnswered ( senderId , senderDeviceId ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > index 3697a4c . . 5d46cb3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > @ @ - 110 , 7 + 110 , 7 @ @ public class PeerNodeActor extends ModuleActor { < nl > < nl > @ ActorMessage < nl > public void onOfferNeeded ( ) { < nl > - < nl > + peerConnection . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; < nl > } < nl > < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeSettings . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeSettings . java < nl > index c803d87 . . ff4c1b0 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeSettings . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeSettings . java < nl > @ @ - 13 , 8 + 13 , 8 @ @ public class PeerNodeSettings { < nl > < nl > public PeerNodeSettings ( ApiPeerSettings peerSettings ) { < nl > if ( peerSettings ! = null ) { < nl > - if ( peerSettings . canConnect ( ) ! = null ) { < nl > - isPreConnectionEnabled = peerSettings . canConnect ( ) ; < nl > + if ( peerSettings . canPreConnect ( ) ! = null ) { < nl > + isPreConnectionEnabled = peerSettings . canPreConnect ( ) ; < nl > } < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json < nl > index e2881c1 . . 0bab21b 100644 < nl > - - - a / actor - sdk / sdk - api / actor . json < nl > + + + b / actor - sdk / sdk - api / actor . json < nl > @ @ - 13066 , 12 + 13066 , 20 @ @ < nl > " id " : 1 < nl > } , < nl > { < nl > + " name " : " RINGING _ REACHED " , < nl > + " id " : 4 < nl > + } , < nl > + { < nl > " name " : " CONNECTING " , < nl > " id " : 2 < nl > } , < nl > { < nl > " name " : " CONNECTED " , < nl > " id " : 3 < nl > + } , < nl > + { < nl > + " name " : " ENDED " , < nl > + " id " : 5 < nl > } < nl > ] < nl > } < nl > @ @ - 13105 , 6 + 13113 , 18 @ @ < nl > " argument " : " fallbackIsConnecting " , < nl > " category " : " full " , < nl > " description " : " Fallback flag for future compatibility of state " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " fallbackIsRingingReached " , < nl > + " category " : " full " , < nl > + " description " : " Fallback flag for future compatibility of state " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " fallbackIsEnded " , < nl > + " category " : " full " , < nl > + " description " : " Fallback flag for future compatibility of state " < nl > } < nl > ] , < nl > " attributes " : [ < nl > @ @ - 13139 , 6 + 13159 , 22 @ @ < nl > } , < nl > " id " : 4 , < nl > " name " : " fallbackIsConnecting " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " opt " , < nl > + " childType " : " bool " < nl > + } , < nl > + " id " : 5 , < nl > + " name " : " fallbackIsRingingReached " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " opt " , < nl > + " childType " : " bool " < nl > + } , < nl > + " id " : 6 , < nl > + " name " : " fallbackIsEnded " < nl > } < nl > ] < nl > } < nl > @ @ - 13157 , 12 + 13193 , 6 @ @ < nl > } , < nl > { < nl > " type " : " reference " , < nl > - " argument " : " deviceId " , < nl > - " category " : " full " , < nl > - " description " : " Member Device Id " < nl > - } , < nl > - { < nl > - " type " : " reference " , < nl > " argument " : " state " , < nl > " category " : " full " , < nl > " description " : " State of member " < nl > @ @ - 13179 , 14 + 13209 , 6 @ @ < nl > } , < nl > { < nl > " type " : { < nl > - " type " : " alias " , < nl > - " childType " : " randomId " < nl > - } , < nl > - " id " : 2 , < nl > - " name " : " deviceId " < nl > - } , < nl > - { < nl > - " type " : { < nl > " type " : " struct " , < nl > " childType " : " CallMemberStateHolder " < nl > } , < nl > diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > index a26b0e8 . . d2ebb86 100644 < nl > - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > @ @ - 11218 , 6 + 11218 , 10 @ @ < nl > < property role = " TrG5h " value = " RINGING " / > < nl > < property role = " 2m7y0m " value = " 1 " / > < nl > < / node > < nl > + < node concept = " 2m7y0F " id = " 3xEfKBqKUs2 " role = " 2m7ymf " > < nl > + < property role = " TrG5h " value = " RINGING _ REACHED " / > < nl > + < property role = " 2m7y0m " value = " 4 " / > < nl > + < / node > < nl > < node concept = " 2m7y0F " id = " 3xEfKBqJSuX " role = " 2m7ymf " > < nl > < property role = " TrG5h " value = " CONNECTING " / > < nl > < property role = " 2m7y0m " value = " 2 " / > < nl > @ @ - 11226 , 6 + 11230 , 10 @ @ < nl > < property role = " TrG5h " value = " CONNECTED " / > < nl > < property role = " 2m7y0m " value = " 3 " / > < nl > < / node > < nl > + < node concept = " 2m7y0F " id = " 3xEfKBqKZGJ " role = " 2m7ymf " > < nl > + < property role = " TrG5h " value = " ENDED " / > < nl > + < property role = " 2m7y0m " value = " 5 " / > < nl > + < / node > < nl > < / node > < nl > < node concept = " 2m5naR " id = " 3xEfKBqJTzW " role = " 2m5mJr " > < nl > < property role = " TrG5h " value = " CallMemberStateHolder " / > < nl > @ @ - 11257 , 6 + 11265 , 20 @ @ < nl > < node concept = " 2m5ndN " id = " 3xEfKBqJTBe " role = " 3GH5xg " / > < nl > < / node > < nl > < / node > < nl > + < node concept = " 2m7Kf5 " id = " 3xEfKBqKVvh " role = " 2m0hLx " > < nl > + < property role = " 2m7DUN " value = " 5 " / > < nl > + < property role = " TrG5h " value = " fallbackIsRingingReached " / > < nl > + < node concept = " 2m5nlT " id = " 3xEfKBqKVvw " role = " 2m7DVh " > < nl > + < node concept = " 2m5ndN " id = " 3xEfKBqKVvA " role = " 3GH5xg " / > < nl > + < / node > < nl > + < / node > < nl > + < node concept = " 2m7Kf5 " id = " 3xEfKBqKZGP " role = " 2m0hLx " > < nl > + < property role = " 2m7DUN " value = " 6 " / > < nl > + < property role = " TrG5h " value = " fallbackIsEnded " / > < nl > + < node concept = " 2m5nlT " id = " 3xEfKBqKZH7 " role = " 2m7DVh " > < nl > + < node concept = " 2m5ndN " id = " 3xEfKBqKZHd " role = " 3GH5xg " / > < nl > + < / node > < nl > + < / node > < nl > < node concept = " NXeRC " id = " 3xEfKBqJUDo " role = " NXodf " > < nl > < property role = " NXePf " value = " Call Member state holder " / > < nl > < / node > < nl > @ @ - 11280 , 6 + 11302 , 16 @ @ < nl > < property role = " NX6R2 " value = " Fallback flag for future compatibility of state " / > < nl > < ref role = " NX6Kv " node = " 3xEfKBqJTAW " resolve = " fallbackIsConnecting " / > < nl > < / node > < nl > + < node concept = " NX1gA " id = " 3xEfKBqKWyX " role = " NXodf " > < nl > + < property role = " 1GSvIU " value = " full " / > < nl > + < property role = " NX6R2 " value = " Fallback flag for future compatibility of state " / > < nl > + < ref role = " NX6Kv " node = " 3xEfKBqKVvh " resolve = " fallbackIsRingingReached " / > < nl > + < / node > < nl > + < node concept = " NX1gA " id = " 3xEfKBqKZHo " role = " NXodf " > < nl > + < property role = " 1GSvIU " value = " full " / > < nl > + < property role = " NX6R2 " value = " Fallback flag for future compatibility of state " / > < nl > + < ref role = " NX6Kv " node = " 3xEfKBqKZGP " resolve = " fallbackIsEnded " / > < nl > + < / node > < nl > < / node > < nl > < node concept = " 2m5naR " id = " 3xEfKBqJRkx " role = " 2m5mJr " > < nl > < property role = " TrG5h " value = " CallMember " / > < nl > @ @ - 11290 , 13 + 11322 , 6 @ @ < nl > < ref role = " wb18D " node = " 5qm50Y0e3uz " resolve = " userId " / > < nl > < / node > < nl > < / node > < nl > - < node concept = " 2m7Kf5 " id = " 3xEfKBqJRmU " role = " 2m0hLx " > < nl > - < property role = " 2m7DUN " value = " 2 " / > < nl > - < property role = " TrG5h " value = " deviceId " / > < nl > - < node concept = " wb0Ql " id = " 3xEfKBqJRn0 " role = " 2m7DVh " > < nl > - < ref role = " wb18D " node = " 2vxDjotnUB8 " resolve = " randomId " / > < nl > - < / node > < nl > - < / node > < nl > < node concept = " 2m7Kf5 " id = " 3xEfKBqJVGe " role = " 2m0hLx " > < nl > < property role = " 2m7DUN " value = " 3 " / > < nl > < property role = " TrG5h " value = " state " / > < nl > @ @ - 11312 , 11 + 11337 , 6 @ @ < nl > < property role = " 1GSvIU " value = " full " / > < nl > < ref role = " NX6Kv " node = " 3xEfKBqJRmK " resolve = " userId " / > < nl > < / node > < nl > - < node concept = " NX1gA " id = " 3xEfKBqJVGA " role = " NXodf " > < nl > - < property role = " NX6R2 " value = " Member Device Id " / > < nl > - < property role = " 1GSvIU " value = " full " / > < nl > - < ref role = " NX6Kv " node = " 3xEfKBqJRmU " resolve = " deviceId " / > < nl > - < / node > < nl > < node concept = " NX1gA " id = " 3xEfKBqJVGK " role = " NXodf " > < nl > < property role = " NX6R2 " value = " State of member " / > < nl > < property role = " 1GSvIU " value = " full " / > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMember . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMember . java < nl > index 9da41a0 . . 943f681 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMember . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMember . java < nl > @ @ - 17 , 12 + 17 , 10 @ @ import java . util . ArrayList ; < nl > public class ApiCallMember extends BserObject { < nl > < nl > private int userId ; < nl > - private long deviceId ; < nl > private ApiCallMemberStateHolder state ; < nl > < nl > - public ApiCallMember ( int userId , long deviceId , @ NotNull ApiCallMemberStateHolder state ) { < nl > + public ApiCallMember ( int userId , @ NotNull ApiCallMemberStateHolder state ) { < nl > this . userId = userId ; < nl > - this . deviceId = deviceId ; < nl > this . state = state ; < nl > } < nl > < nl > @ @ - 34 , 10 + 32 , 6 @ @ public class ApiCallMember extends BserObject { < nl > return this . userId ; < nl > } < nl > < nl > - public long getDeviceId ( ) { < nl > - return this . deviceId ; < nl > - } < nl > - < nl > @ NotNull < nl > public ApiCallMemberStateHolder getState ( ) { < nl > return this . state ; < nl > @ @ - 46 , 14 + 40 , 12 @ @ public class ApiCallMember extends BserObject { < nl > @ Override < nl > public void parse ( BserValues values ) throws IOException { < nl > this . userId = values . getInt ( 1 ) ; < nl > - this . deviceId = values . getLong ( 2 ) ; < nl > this . state = values . getObj ( 3 , new ApiCallMemberStateHolder ( ) ) ; < nl > } < nl > < nl > @ Override < nl > public void serialize ( BserWriter writer ) throws IOException { < nl > writer . writeInt ( 1 , this . userId ) ; < nl > - writer . writeLong ( 2 , this . deviceId ) ; < nl > if ( this . state = = null ) { < nl > throw new IOException ( ) ; < nl > } < nl > @ @ - 64 , 7 + 56 , 6 @ @ public class ApiCallMember extends BserObject { < nl > public String toString ( ) { < nl > String res = " struct CallMember { " ; < nl > res + = " userId = " + this . userId ; < nl > - res + = " , deviceId = " + this . deviceId ; < nl > res + = " , state = " + this . state ; < nl > res + = " } " ; < nl > return res ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMemberState . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMemberState . java < nl > index 6539ad4 . . 2cedc05 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMemberState . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMemberState . java < nl > @ @ - 8 , 8 + 8 , 10 @ @ import java . io . IOException ; < nl > public enum ApiCallMemberState { < nl > < nl > RINGING ( 1 ) , < nl > + RINGING _ REACHED ( 4 ) , < nl > CONNECTING ( 2 ) , < nl > CONNECTED ( 3 ) , < nl > + ENDED ( 5 ) , < nl > UNSUPPORTED _ VALUE ( - 1 ) ; < nl > < nl > private int value ; < nl > @ @ - 25 , 8 + 27 , 10 @ @ public enum ApiCallMemberState { < nl > public static ApiCallMemberState parse ( int value ) throws IOException { < nl > switch ( value ) { < nl > case 1 : return ApiCallMemberState . RINGING ; < nl > + case 4 : return ApiCallMemberState . RINGING _ REACHED ; < nl > case 2 : return ApiCallMemberState . CONNECTING ; < nl > case 3 : return ApiCallMemberState . CONNECTED ; < nl > + case 5 : return ApiCallMemberState . ENDED ; < nl > default : return ApiCallMemberState . UNSUPPORTED _ VALUE ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMemberStateHolder . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMemberStateHolder . java < nl > index f53e8fa . . 84313df 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMemberStateHolder . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMemberStateHolder . java < nl > @ @ - 20 , 12 + 20 , 16 @ @ public class ApiCallMemberStateHolder extends BserObject { < nl > private Boolean fallbackIsRinging ; < nl > private Boolean fallbackIsConnected ; < nl > private Boolean fallbackIsConnecting ; < nl > + private Boolean fallbackIsRingingReached ; < nl > + private Boolean fallbackIsEnded ; < nl > < nl > - public ApiCallMemberStateHolder ( @ NotNull ApiCallMemberState state , @ Nullable Boolean fallbackIsRinging , @ Nullable Boolean fallbackIsConnected , @ Nullable Boolean fallbackIsConnecting ) { < nl > + public ApiCallMemberStateHolder ( @ NotNull ApiCallMemberState state , @ Nullable Boolean fallbackIsRinging , @ Nullable Boolean fallbackIsConnected , @ Nullable Boolean fallbackIsConnecting , @ Nullable Boolean fallbackIsRingingReached , @ Nullable Boolean fallbackIsEnded ) { < nl > this . state = state ; < nl > this . fallbackIsRinging = fallbackIsRinging ; < nl > this . fallbackIsConnected = fallbackIsConnected ; < nl > this . fallbackIsConnecting = fallbackIsConnecting ; < nl > + this . fallbackIsRingingReached = fallbackIsRingingReached ; < nl > + this . fallbackIsEnded = fallbackIsEnded ; < nl > } < nl > < nl > public ApiCallMemberStateHolder ( ) { < nl > @ @ - 52 , 12 + 56 , 24 @ @ public class ApiCallMemberStateHolder extends BserObject { < nl > return this . fallbackIsConnecting ; < nl > } < nl > < nl > + @ Nullable < nl > + public Boolean fallbackIsRingingReached ( ) { < nl > + return this . fallbackIsRingingReached ; < nl > + } < nl > + < nl > + @ Nullable < nl > + public Boolean fallbackIsEnded ( ) { < nl > + return this . fallbackIsEnded ; < nl > + } < nl > + < nl > @ Override < nl > public void parse ( BserValues values ) throws IOException { < nl > this . state = ApiCallMemberState . parse ( values . getInt ( 1 ) ) ; < nl > this . fallbackIsRinging = values . optBool ( 2 ) ; < nl > this . fallbackIsConnected = values . optBool ( 3 ) ; < nl > this . fallbackIsConnecting = values . optBool ( 4 ) ; < nl > + this . fallbackIsRingingReached = values . optBool ( 5 ) ; < nl > + this . fallbackIsEnded = values . optBool ( 6 ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 75 , 6 + 91 , 12 @ @ public class ApiCallMemberStateHolder extends BserObject { < nl > if ( this . fallbackIsConnecting ! = null ) { < nl > writer . writeBool ( 4 , this . fallbackIsConnecting ) ; < nl > } < nl > + if ( this . fallbackIsRingingReached ! = null ) { < nl > + writer . writeBool ( 5 , this . fallbackIsRingingReached ) ; < nl > + } < nl > + if ( this . fallbackIsEnded ! = null ) { < nl > + writer . writeBool ( 6 , this . fallbackIsEnded ) ; < nl > + } < nl > } < nl > < nl > @ Override < nl > @ @ - 84 , 6 + 106 , 8 @ @ public class ApiCallMemberStateHolder extends BserObject { < nl > res + = " , fallbackIsRinging = " + this . fallbackIsRinging ; < nl > res + = " , fallbackIsConnected = " + this . fallbackIsConnected ; < nl > res + = " , fallbackIsConnecting = " + this . fallbackIsConnecting ; < nl > + res + = " , fallbackIsRingingReached = " + this . fallbackIsRingingReached ; < nl > + res + = " , fallbackIsEnded = " + this . fallbackIsEnded ; < nl > res + = " } " ; < nl > return res ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > index 84a7ae7 . . f7d850c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > @ @ - 5 , 6 + 5 , 8 @ @ import java . util . ArrayList ; < nl > import im . actor . core . api . ApiAdvertiseSelf ; < nl > import im . actor . core . api . ApiAnswerCall ; < nl > import im . actor . core . api . ApiCallMember ; < nl > + import im . actor . core . api . ApiCallMemberState ; < nl > + import im . actor . core . api . ApiCallMemberStateHolder ; < nl > import im . actor . core . api . ApiMembersChanged ; < nl > import im . actor . core . api . ApiNeedOffer ; < nl > import im . actor . core . api . ApiOnAnswer ; < nl > @ @ - 122 , 6 + 124 , 11 @ @ public class CallMasterActor extends CallActor { < nl > sendSignalingMessage ( uid , deviceId , new ApiSwitchMaster ( ) ) ; < nl > < nl > / / < nl > + / / Advertise members < nl > + / / < nl > + sendSignalingMessage ( uid , deviceId , buildMembersList ( ) ) ; < nl > + < nl > + / / < nl > / / Update State < nl > / / < nl > updateCallVMState ( ) ; < nl > @ @ - 345 , 7 + 352 , 7 @ @ public class CallMasterActor extends CallActor { < nl > private void updateMembers ( ) { < nl > < nl > / / < nl > - / / Update Calls VM < nl > + / / Build Updated member lists < nl > / / < nl > ArrayList < im . actor . core . viewmodel . CallMember > callMembers = new ArrayList < > ( ) ; < nl > for ( MasterCallMember callMember : state . getConnectedMembers ( ) ) { < nl > @ @ - 370 , 20 + 377 , 55 @ @ public class CallMasterActor extends CallActor { < nl > } < nl > callMembers . add ( new CallMember ( callMember . getUid ( ) , callMemberState ) ) ; < nl > } < nl > + < nl > + / / < nl > + / / Update CallVM < nl > + / / < nl > callVM . getMembers ( ) . change ( callMembers ) ; < nl > < nl > / / < nl > / / Broadcast new members < nl > / / < nl > - / / sendSignalingMessage ( createMembersChanged ( ) ) ; < nl > + sendSignalingMessage ( buildMembersList ( ) ) ; < nl > } < nl > < nl > - private ApiMembersChanged createMembersChanged ( ) { < nl > - ArrayList < ApiCallMember > callMembers = new ArrayList < > ( ) ; < nl > - / / for ( CallMember m : members ) { < nl > - / / callMembers . add ( new ApiCallMember ( m . getUid ( ) , 0 , m . getState ( ) . toApiState ( ) ) ) ; < nl > - / / } < nl > - return new ApiMembersChanged ( callMembers ) ; < nl > + private ApiMembersChanged buildMembersList ( ) { < nl > + ArrayList < ApiCallMember > apiCallMembers = new ArrayList < > ( ) ; < nl > + apiCallMembers . add ( new ApiCallMember ( myUid ( ) , new ApiCallMemberStateHolder ( ApiCallMemberState . CONNECTED , < nl > + false , true , false , false , false ) ) ) ; < nl > + for ( MasterCallMember callMember : state . getConnectedMembers ( ) ) { < nl > + ApiCallMemberStateHolder callMemberStateHolder ; < nl > + switch ( callMember . getState ( ) ) { < nl > + case RINGING _ REACHED : < nl > + callMemberStateHolder = new ApiCallMemberStateHolder ( < nl > + ApiCallMemberState . RINGING _ REACHED , < nl > + true , false , false , true , false ) ; < nl > + break ; < nl > + case RINGING : < nl > + callMemberStateHolder = new ApiCallMemberStateHolder ( < nl > + ApiCallMemberState . RINGING , < nl > + true , false , false , false , false ) ; < nl > + break ; < nl > + case CONNECTING : < nl > + callMemberStateHolder = new ApiCallMemberStateHolder ( < nl > + ApiCallMemberState . CONNECTING , < nl > + false , false , true , false , false ) ; < nl > + break ; < nl > + case IN _ PROGRESS : < nl > + callMemberStateHolder = new ApiCallMemberStateHolder ( < nl > + ApiCallMemberState . CONNECTED , < nl > + false , true , false , false , false ) ; < nl > + break ; < nl > + default : < nl > + case ENDED : < nl > + callMemberStateHolder = new ApiCallMemberStateHolder ( < nl > + ApiCallMemberState . ENDED , < nl > + false , false , false , false , true ) ; < nl > + break ; < nl > + } < nl > + apiCallMembers . add ( new ApiCallMember ( callMember . getUid ( ) , callMemberStateHolder ) ) ; < nl > + } < nl > + return new ApiMembersChanged ( apiCallMembers ) ; < nl > } < nl > < nl > private void debugState ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > index 391d6fe . . ee436cc 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > @ @ - 1 , 9 + 1 , 13 @ @ < nl > package im . actor . core . modules . calls ; < nl > < nl > import java . util . ArrayList ; < nl > + import java . util . List ; < nl > < nl > import im . actor . core . api . ApiAdvertiseSelf ; < nl > import im . actor . core . api . ApiAnswerCall ; < nl > + import im . actor . core . api . ApiCallMember ; < nl > + import im . actor . core . api . ApiCallMemberStateHolder ; < nl > + import im . actor . core . api . ApiMembersChanged ; < nl > import im . actor . core . api . ApiNeedOffer ; < nl > import im . actor . core . api . ApiPeerSettings ; < nl > import im . actor . core . api . ApiRejectCall ; < nl > @ @ - 14 , 6 + 18 , 7 @ @ import im . actor . core . api . rpc . ResponseGetCallInfo ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . viewmodel . CallMember ; < nl > + import im . actor . core . viewmodel . CallMemberState ; < nl > import im . actor . core . viewmodel . CallState ; < nl > import im . actor . core . viewmodel . CallVM ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > @ @ - 75 , 6 + 80 , 67 @ @ public class CallSlaveActor extends CallActor { < nl > callManager . send ( new CallManagerActor . IncomingCallReady ( callId ) , self ( ) ) ; < nl > } < nl > < nl > + public void onMembersChanged ( List < ApiCallMember > allMembers ) { < nl > + < nl > + / / < nl > + / / Handling Members < nl > + / / < nl > + ArrayList < CallMember > members = new ArrayList < > ( ) ; < nl > + for ( ApiCallMember apiCallMember : allMembers ) { < nl > + if ( getUser ( apiCallMember . getUserId ( ) ) = = null ) { < nl > + continue ; < nl > + } < nl > + if ( apiCallMember . getUserId ( ) = = myUid ( ) ) { < nl > + continue ; < nl > + } < nl > + ApiCallMemberStateHolder stateHolder = apiCallMember . getState ( ) ; < nl > + CallMemberState state ; < nl > + switch ( stateHolder . getState ( ) ) { < nl > + case RINGING : < nl > + state = CallMemberState . RINGING ; < nl > + break ; < nl > + case RINGING _ REACHED : < nl > + state = CallMemberState . RINGING _ REACHED ; < nl > + break ; < nl > + case CONNECTING : < nl > + state = CallMemberState . CONNECTING ; < nl > + break ; < nl > + case CONNECTED : < nl > + state = CallMemberState . IN _ PROGRESS ; < nl > + break ; < nl > + case ENDED : < nl > + state = CallMemberState . ENDED ; < nl > + break ; < nl > + default : < nl > + if ( stateHolder . fallbackIsRingingReached ( ) ! = null & & stateHolder . fallbackIsRingingReached ( ) ) { < nl > + state = CallMemberState . RINGING _ REACHED ; < nl > + break ; < nl > + } < nl > + if ( stateHolder . fallbackIsEnded ( ) ! = null & & stateHolder . fallbackIsEnded ( ) ) { < nl > + state = CallMemberState . ENDED ; < nl > + break ; < nl > + } < nl > + if ( stateHolder . fallbackIsRinging ( ) ! = null & & stateHolder . fallbackIsRinging ( ) ) { < nl > + state = CallMemberState . RINGING ; < nl > + break ; < nl > + } < nl > + < nl > + if ( stateHolder . fallbackIsConnecting ( ) ! = null & & stateHolder . fallbackIsConnecting ( ) ) { < nl > + state = CallMemberState . CONNECTING ; < nl > + break ; < nl > + } < nl > + < nl > + if ( stateHolder . fallbackIsConnected ( ) ! = null & & stateHolder . fallbackIsConnected ( ) ) { < nl > + state = CallMemberState . IN _ PROGRESS ; < nl > + break ; < nl > + } < nl > + state = CallMemberState . RINGING ; < nl > + } < nl > + members . add ( new CallMember ( apiCallMember . getUserId ( ) , state ) ) ; < nl > + } < nl > + callVM . getMembers ( ) . change ( members ) ; < nl > + } < nl > + < nl > public void onNeedOffer ( int destUid , long destDeviceId , Boolean isSilent , ApiPeerSettings peerSettings ) { < nl > getPeer ( destUid , destDeviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; < nl > } < nl > @ @ - 124 , 6 + 190 , 8 @ @ public class CallSlaveActor extends CallActor { < nl > onNeedOffer ( needOffer . getUid ( ) , needOffer . getDevice ( ) , needOffer . isSilent ( ) , needOffer . getPeerSettings ( ) ) ; < nl > } else if ( signaling instanceof ApiSwitchMaster ) { < nl > onMasterNodeChanged ( fromUid , fromDeviceId ) ; < nl > + } else if ( signaling instanceof ApiMembersChanged ) { < nl > + onMembersChanged ( ( ( ApiMembersChanged ) signaling ) . getAllMembers ( ) ) ; < nl > } else { < nl > super . onSignalingMessage ( fromUid , fromDeviceId , signaling ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / CallMember . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / CallMember . java < nl > deleted file mode 100644 < nl > index 4251e44 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / CallMember . java < nl > + + + / dev / null < nl > @ @ - 1 , 24 + 0 , 0 @ @ < nl > - package im . actor . core . modules . calls . entity ; < nl > - < nl > - public class CallMember { < nl > - < nl > - private int uid ; < nl > - private CallMemberState state ; < nl > - < nl > - public CallMember ( int uid , CallMemberState state ) { < nl > - this . uid = uid ; < nl > - this . state = state ; < nl > - } < nl > - < nl > - public int getUid ( ) { < nl > - return uid ; < nl > - } < nl > - < nl > - public CallMemberState getState ( ) { < nl > - return state ; < nl > - } < nl > - < nl > - public void setState ( CallMemberState state ) { < nl > - this . state = state ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / CallMemberState . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / CallMemberState . java < nl > deleted file mode 100644 < nl > index c347d59 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / CallMemberState . java < nl > + + + / dev / null < nl > @ @ - 1 , 53 + 0 , 0 @ @ < nl > - package im . actor . core . modules . calls . entity ; < nl > - < nl > - import im . actor . core . api . ApiCallMemberState ; < nl > - import im . actor . core . api . ApiCallMemberStateHolder ; < nl > - < nl > - public enum CallMemberState { < nl > - RINGING , CONNECTING , CONNECTED ; < nl > - < nl > - public ApiCallMemberStateHolder toApiState ( ) { < nl > - ApiCallMemberState state ; < nl > - Boolean isConnected = null ; < nl > - Boolean isConnecting = null ; < nl > - Boolean isRinging = null ; < nl > - switch ( this ) { < nl > - case CONNECTED : < nl > - state = ApiCallMemberState . CONNECTED ; < nl > - isConnected = true ; < nl > - break ; < nl > - default : < nl > - case CONNECTING : < nl > - state = ApiCallMemberState . CONNECTING ; < nl > - isConnecting = true ; < nl > - break ; < nl > - case RINGING : < nl > - state = ApiCallMemberState . RINGING ; < nl > - isRinging = true ; < nl > - break ; < nl > - } < nl > - return new ApiCallMemberStateHolder ( state , isRinging , isConnected , isConnecting ) ; < nl > - } < nl > - < nl > - public static CallMemberState fromApi ( ApiCallMemberStateHolder stateHolder ) { < nl > - switch ( stateHolder . getState ( ) ) { < nl > - case CONNECTED : < nl > - return CONNECTED ; < nl > - case CONNECTING : < nl > - return CONNECTING ; < nl > - case RINGING : < nl > - return RINGING ; < nl > - default : < nl > - if ( stateHolder . fallbackIsConnected ( ) ! = null & & stateHolder . fallbackIsConnected ( ) ) { < nl > - return CONNECTED ; < nl > - } < nl > - if ( stateHolder . fallbackIsConnecting ( ) ! = null & & stateHolder . fallbackIsConnecting ( ) ) { < nl > - return CONNECTING ; < nl > - } < nl > - if ( stateHolder . fallbackIsRinging ( ) ! = null & & stateHolder . fallbackIsRinging ( ) ) { < nl > - return RINGING ; < nl > - } < nl > - return RINGING ; < nl > - } < nl > - } < nl > - }

TEST DIFF:
diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json 
 index 0bab21b . . 7bb525b 100644 
 - - - a / actor - sdk / sdk - api / actor . json 
 + + + b / actor - sdk / sdk - api / actor . json 
 @ @ - 13241 , 6 + 13241 , 12 @ @ 
 " argument " : " canBeAudioRelay " , 
 " category " : " full " , 
 " description " : " If peer can audio relay . Default is false . " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " canPreConnect " , 
 + " category " : " full " , 
 + " description " : " If peer can preconnect before answer " 
 } 
 ] , 
 " attributes " : [ 
 @ @ - 13274 , 7 + 13280 , 7 @ @ 
 " childType " : " bool " 
 } , 
 " id " : 4 , 
 - " name " : " canConnect " 
 + " name " : " canPreConnect " 
 } 
 ] 
 } 
 diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 index d2ebb86 . . 6562d62 100644 
 - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 @ @ - 11368 , 7 + 11368 , 7 @ @ 
 < / node > 
 < node concept = " 2m7Kf5 " id = " 3xEfKBqKDn $ " role = " 2m0hLx " > 
 < property role = " 2m7DUN " value = " 4 " / > 
 - < property role = " TrG5h " value = " canConnect " / > 
 + < property role = " TrG5h " value = " canPreConnect " / > 
 < node concept = " 2m5nlT " id = " 3xEfKBqKDnL " role = " 2m7DVh " > 
 < node concept = " 2m5ndN " id = " 3xEfKBqKDnR " role = " 3GH5xg " / > 
 < / node > 
 @ @ - 11391 , 6 + 11391 , 11 @ @ 
 < property role = " NX6R2 " value = " If peer can audio relay . Default is false . " / > 
 < ref role = " NX6Kv " node = " 3xEfKBqKs _ o " resolve = " canBeAudioRelay " / > 
 < / node > 
 + < node concept = " NX1gA " id = " 3xEfKBqL87R " role = " NXodf " > 
 + < property role = " 1GSvIU " value = " full " / > 
 + < property role = " NX6R2 " value = " If peer can preconnect before answer " / > 
 + < ref role = " NX6Kv " node = " 3xEfKBqKDn $ " resolve = " canPreConnect " / > 
 + < / node > 
 < / node > 
 < node concept = " 1Dx9M1 " id = " 6tgpW9bxpK8 " role = " 1Dx9rD " > 
 < property role = " 1Dx9K7 " value = " WebRTC package that enables support to audio and video calls " / > 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiPeerSettings . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiPeerSettings . java 
 index eddbb61 . . 5d2a205 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiPeerSettings . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiPeerSettings . java 
 @ @ - 19 , 13 + 19 , 13 @ @ public class ApiPeerSettings extends BserObject { 
 private Boolean is3DESSupported ; 
 private Boolean isMobile ; 
 private Boolean canBeAudioRelay ; 
 - private Boolean canConnect ; 
 + private Boolean canPreConnect ; 
 
 - public ApiPeerSettings ( @ Nullable Boolean is3DESSupported , @ Nullable Boolean isMobile , @ Nullable Boolean canBeAudioRelay , @ Nullable Boolean canConnect ) { 
 + public ApiPeerSettings ( @ Nullable Boolean is3DESSupported , @ Nullable Boolean isMobile , @ Nullable Boolean canBeAudioRelay , @ Nullable Boolean canPreConnect ) { 
 this . is3DESSupported = is3DESSupported ; 
 this . isMobile = isMobile ; 
 this . canBeAudioRelay = canBeAudioRelay ; 
 - this . canConnect = canConnect ; 
 + this . canPreConnect = canPreConnect ; 
 } 
 
 public ApiPeerSettings ( ) { 
 @ @ - 48 , 8 + 48 , 8 @ @ public class ApiPeerSettings extends BserObject { 
 } 
 
 @ Nullable 
 - public Boolean canConnect ( ) { 
 - return this . canConnect ; 
 + public Boolean canPreConnect ( ) { 
 + return this . canPreConnect ; 
 } 
 
 @ Override 
 @ @ - 57 , 7 + 57 , 7 @ @ public class ApiPeerSettings extends BserObject { 
 this . is3DESSupported = values . optBool ( 1 ) ; 
 this . isMobile = values . optBool ( 2 ) ; 
 this . canBeAudioRelay = values . optBool ( 3 ) ; 
 - this . canConnect = values . optBool ( 4 ) ; 
 + this . canPreConnect = values . optBool ( 4 ) ; 
 } 
 
 @ Override 
 @ @ - 71 , 8 + 71 , 8 @ @ public class ApiPeerSettings extends BserObject { 
 if ( this . canBeAudioRelay ! = null ) { 
 writer . writeBool ( 3 , this . canBeAudioRelay ) ; 
 } 
 - if ( this . canConnect ! = null ) { 
 - writer . writeBool ( 4 , this . canConnect ) ; 
 + if ( this . canPreConnect ! = null ) { 
 + writer . writeBool ( 4 , this . canPreConnect ) ; 
 } 
 } 
 
 @ @ - 82 , 6 + 82 , 7 @ @ public class ApiPeerSettings extends BserObject { 
 res + = " is3DESSupported = " + this . is3DESSupported ; 
 res + = " , isMobile = " + this . isMobile ; 
 res + = " , canBeAudioRelay = " + this . canBeAudioRelay ; 
 + res + = " , canPreConnect = " + this . canPreConnect ; 
 res + = " } " ; 
 return res ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java 
 index 3769985 . . bde73b4 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java 
 @ @ - 17 , 6 + 17 , 7 @ @ import im . actor . core . viewmodel . CallVM ; 
 public class AbsCallActor extends PeerCallActor { 
 
 private final HashMap < Long , CallVM > callModels ; 
 + private CallVM callVM ; 
 
 public AbsCallActor ( boolean isSlaveMode , ModuleContext context ) { 
 super ( isSlaveMode , context ) ; 
 @ @ - 29 , 9 + 30 , 11 @ @ public class AbsCallActor extends PeerCallActor { 
 / / 
 public CallVM spawnNewVM ( long callId , Peer peer , boolean isOutgoing , ArrayList < CallMember > members , CallState callState ) { 
 CallVM callVM = new CallVM ( callId , peer , isOutgoing , members , callState ) ; 
 + callVM . getIsMuted ( ) . change ( isMuted ( ) ) ; 
 synchronized ( callModels ) { 
 callModels . put ( callId , callVM ) ; 
 } 
 + this . callVM = callVM ; 
 return callVM ; 
 } 
 
 @ @ - 50 , 4 + 53 , 12 @ @ public class AbsCallActor extends PeerCallActor { 
 } 
 return spawnNewVM ( callId , peer , true , members , CallState . RINGING ) ; 
 } 
 + 
 + @ Override 
 + public void onMute ( boolean isMuted ) { 
 + super . onMute ( isMuted ) ; 
 + if ( callVM ! = null ) { 
 + callVM . getIsMuted ( ) . change ( isMuted ) ; 
 + } 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 index 4f31edf . . 8983a25 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 @ @ - 73 , 8 + 73 , 7 @ @ public class CallManagerActor extends ModuleActor { 
 system ( ) . actorOf ( " actor / master / " + RandomUtils . nextRid ( ) , new ActorCreator ( ) { 
 @ Override 
 public Actor create ( ) { 
 - / / return new CallMasterActor ( peer , context ( ) , callback ) ; 
 - return null ; 
 + return new PeerCallMasterActor ( peer , callback , context ( ) ) ; 
 } 
 } ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 index 81d5ca1 . . 094cbff 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 @ @ - 69 , 7 + 69 , 6 @ @ public class CallSlaveActor extends AbsCallActor { 
 / / Creating Call VM 
 / / 
 callVM = spawnNewVM ( callId , peer , false , new ArrayList < CallMember > ( ) , CallState . RINGING ) ; 
 - callVM . getIsMuted ( ) . change ( isMuted ( ) ) ; 
 
 / / 
 / / Notify call manager to trigger ringing 
 @ @ - 78 , 14 + 77 , 6 @ @ public class CallSlaveActor extends AbsCallActor { 
 } 
 
 @ Override 
 - public void onMute ( boolean isMuted ) { 
 - super . onMute ( isMuted ) ; 
 - if ( callVM ! = null ) { 
 - callVM . getIsMuted ( ) . change ( isMuted ) ; 
 - } 
 - } 
 - 
 - @ Override 
 public void onFirstPeerStarted ( ) { 
 
 isConnected = true ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerCallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerCallMasterActor . java 
 new file mode 100644 
 index 0000000 . . a5564d6 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerCallMasterActor . java 
 @ @ - 0 , 0 + 1 , 274 @ @ 
 + package im . actor . core . modules . calls ; 
 + 
 + import java . util . HashMap ; 
 + import java . util . HashSet ; 
 + 
 + import im . actor . core . api . ApiPeerSettings ; 
 + import im . actor . core . api . rpc . RequestDoCall ; 
 + import im . actor . core . api . rpc . ResponseDoCall ; 
 + import im . actor . core . entity . GroupMember ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . PeerType ; 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . calls . peers . PeerNodeInt ; 
 + import im . actor . core . modules . calls . peers . PeerNodeSettings ; 
 + import im . actor . core . viewmodel . CallState ; 
 + import im . actor . core . viewmodel . CallVM ; 
 + import im . actor . core . viewmodel . CommandCallback ; 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . function . Consumer ; 
 + 
 + public class PeerCallMasterActor extends AbsCallActor { 
 + 
 + private static final String TAG = " CallMasterActor " ; 
 + private static final long MASTER _ CALL _ TIMEOUT = 8000 ; 
 + 
 + private final Peer peer ; 
 + private ActorRef callManager ; 
 + private CommandCallback < Long > callback ; 
 + private HashSet < Integer > members ; 
 + private HashMap < Long , Node > nodes ; 
 + private long callId ; 
 + private CallVM callVM ; 
 + 
 + public PeerCallMasterActor ( Peer peer , CommandCallback < Long > callback , ModuleContext context ) { 
 + super ( false , context ) ; 
 + this . peer = peer ; 
 + this . callback = callback ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + super . preStart ( ) ; 
 + getSelfSettings ( ) . setIsPreConnectionEnabled ( true ) ; 
 + callManager = context ( ) . getCallsModule ( ) . getCallManager ( ) ; 
 + createBus ( MASTER _ CALL _ TIMEOUT ) ; 
 + } 
 + 
 + @ Override 
 + public void onBusCreated ( ) { 
 + api ( new RequestDoCall ( buidOutPeer ( peer ) , getBusId ( ) ) ) . then ( new Consumer < ResponseDoCall > ( ) { 
 + @ Override 
 + public void apply ( ResponseDoCall responseDoCall ) { 
 + 
 + / / 
 + / / Initialization of Call State 
 + / / 
 + / / TODO : Possible race conditions when members changed during call initiation 
 + / / Need to return explicit callers in response 
 + 
 + members = new HashSet < > ( ) ; 
 + if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + for ( GroupMember gm : getGroup ( peer . getPeerId ( ) ) . getMembers ( ) ) { 
 + members . add ( gm . getUid ( ) ) ; 
 + } 
 + } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + members . add ( peer . getPeerId ( ) ) ; 
 + members . add ( myUid ( ) ) ; 
 + } else { 
 + throw new RuntimeException ( " Unsupported Peer Type group " ) ; 
 + } 
 + 
 + / / 
 + / / Initialization of CallVM 
 + / / 
 + callId = responseDoCall . getCallId ( ) ; 
 + callVM = spanNewOutgoingVM ( responseDoCall . getCallId ( ) , peer ) ; 
 + 
 + / / 
 + / / Notifying about successful call creation 
 + / / 
 + callManager . send ( new CallManagerActor . DoCallComplete ( responseDoCall . getCallId ( ) ) , self ( ) ) ; 
 + callback . onResult ( responseDoCall . getCallId ( ) ) ; 
 + callback = null ; 
 + 
 + / / 
 + / / Create New Node Collection 
 + / / 
 + nodes = new HashMap < > ( ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + callback . onError ( e ) ; 
 + callback = null ; 
 + dispose ( ) ; 
 + } 
 + } ) . done ( self ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onDeviceConnected ( int uid , long deviceId ) { 
 + if ( ! members . contains ( uid ) | | uid = = 0 ) { 
 + return ; 
 + } 
 + 
 + Log . d ( TAG , " onDeviceConnected : " + deviceId ) ; 
 + 
 + sendSwitchMaster ( uid , deviceId ) ; 
 + } 
 + 
 + @ Override 
 + public void onAdvertised ( int uid , long deviceId , ApiPeerSettings settings ) { 
 + if ( nodes . containsKey ( deviceId ) ) { 
 + return ; 
 + } 
 + 
 + Log . d ( TAG , " onAdvertised : " + deviceId + " , " + settings ) ; 
 + 
 + PeerNodeSettings nodeSettings = new PeerNodeSettings ( settings ) ; 
 + Node node = new Node ( uid , deviceId , getPeer ( uid , deviceId ) , nodeSettings , settings ) ; 
 + nodes . put ( deviceId , node ) ; 
 + 
 + / / 
 + / / Starting Pre Connections 
 + / / 
 + if ( nodeSettings . isPreConnectionEnabled ( ) ) { 
 + 
 + for ( Node n : nodes . values ( ) ) { 
 + if ( n . getDeviceId ( ) = = deviceId ) { 
 + continue ; 
 + } 
 + if ( n . isAnswered ( ) | | n . getPeerSettings ( ) . isPreConnectionEnabled ( ) ) { 
 + sendNeedOffer ( n . getUid ( ) , n . getDeviceId ( ) , uid , deviceId , settings , true ) ; 
 + node . getConnectedDevices ( ) . put ( n . getDeviceId ( ) , ConnectionState . SILENT ) ; 
 + n . getConnectedDevices ( ) . put ( node . getDeviceId ( ) , ConnectionState . SILENT ) ; 
 + } 
 + } 
 + 
 + if ( getSelfSettings ( ) . isPreConnectionEnabled ( ) ) { 
 + getPeer ( uid , deviceId ) . onAdvertised ( nodeSettings ) ; 
 + getPeer ( uid , deviceId ) . onOfferNeeded ( ) ; 
 + } 
 + } 
 + } 
 + 
 + @ Override 
 + public void onAnswered ( int uid , long deviceId ) { 
 + super . onAnswered ( uid , deviceId ) ; 
 + 
 + Log . d ( TAG , " onAnswered : " + deviceId ) ; 
 + 
 + if ( ! nodes . containsKey ( deviceId ) ) { 
 + return ; 
 + } 
 + 
 + Node node = nodes . get ( deviceId ) ; 
 + if ( node . getPeerSettings ( ) . isPreConnectionEnabled ( ) & & getSelfSettings ( ) . isPreConnectionEnabled ( ) ) { 
 + getPeer ( uid , deviceId ) . onAnswered ( ) ; 
 + } else { 
 + getPeer ( uid , deviceId ) . onAdvertised ( node . getPeerSettings ( ) ) ; 
 + getPeer ( uid , deviceId ) . onOfferNeeded ( ) ; 
 + getPeer ( uid , deviceId ) . onAnswered ( ) ; 
 + } 
 + 
 + / / 
 + / / Starting Pre Connections 
 + / / 
 + for ( Node n : nodes . values ( ) ) { 
 + if ( n . getDeviceId ( ) = = deviceId ) { 
 + continue ; 
 + } 
 + if ( n . isAnswered ( ) | | n . getPeerSettings ( ) . isPreConnectionEnabled ( ) ) { 
 + ConnectionState connectionState = n . getConnectedDevices ( ) . get ( deviceId ) ; 
 + if ( connectionState = = null ) { 
 + sendNeedOffer ( n . getUid ( ) , n . getDeviceId ( ) , uid , deviceId , n . getApiPeerSettings ( ) , false ) ; 
 + } else if ( connectionState = = ConnectionState . SILENT ) { 
 + sendOnAnswered ( n . getUid ( ) , n . getDeviceId ( ) , uid , deviceId ) ; 
 + n . getConnectedDevices ( ) . put ( deviceId , ConnectionState . CONNECTED ) ; 
 + } else { 
 + / / Already connected 
 + } 
 + } 
 + } 
 + } 
 + 
 + @ Override 
 + public void onPeerConnected ( int uid , long deviceId ) { 
 + super . onPeerConnected ( uid , deviceId ) ; 
 + Log . d ( TAG , " onPeerConnected : " + deviceId ) ; 
 + } 
 + 
 + @ Override 
 + public void onPeerStarted ( int uid , long deviceId ) { 
 + super . onPeerStarted ( uid , deviceId ) ; 
 + Log . d ( TAG , " onPeerStarted : " + deviceId ) ; 
 + } 
 + 
 + @ Override 
 + public void onDeviceDisconnected ( int uid , long deviceId ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void postStop ( ) { 
 + super . postStop ( ) ; 
 + 
 + if ( callback ! = null ) { 
 + callback . onError ( new RuntimeException ( " Internal Error " ) ) ; 
 + } 
 + 
 + if ( callVM ! = null ) { 
 + callVM . getState ( ) . change ( CallState . ENDED ) ; 
 + callManager . send ( new CallManagerActor . OnCallEnded ( callId ) ) ; 
 + } 
 + } 
 + 
 + private enum ConnectionState { 
 + SILENT , CONNECTED 
 + } 
 + 
 + private class Node { 
 + 
 + private int uid ; 
 + private long deviceId ; 
 + private PeerNodeInt nodeInt ; 
 + private PeerNodeSettings peerSettings ; 
 + private ApiPeerSettings apiPeerSettings ; 
 + private boolean isAnswered ; 
 + private HashMap < Long , ConnectionState > connectedDevices = new HashMap < > ( ) ; 
 + 
 + public Node ( int uid , long deviceId , PeerNodeInt nodeInt , PeerNodeSettings peerSettings , 
 + ApiPeerSettings apiPeerSettings ) { 
 + this . uid = uid ; 
 + this . deviceId = deviceId ; 
 + this . nodeInt = nodeInt ; 
 + this . peerSettings = peerSettings ; 
 + this . isAnswered = false ; 
 + this . apiPeerSettings = apiPeerSettings ; 
 + } 
 + 
 + public HashMap < Long , ConnectionState > getConnectedDevices ( ) { 
 + return connectedDevices ; 
 + } 
 + 
 + public ApiPeerSettings getApiPeerSettings ( ) { 
 + return apiPeerSettings ; 
 + } 
 + 
 + public int getUid ( ) { 
 + return uid ; 
 + } 
 + 
 + public long getDeviceId ( ) { 
 + return deviceId ; 
 + } 
 + 
 + public boolean isAnswered ( ) { 
 + return isAnswered ; 
 + } 
 + 
 + public void setIsAnswered ( boolean isAnswered ) { 
 + this . isAnswered = isAnswered ; 
 + } 
 + 
 + public PeerNodeInt getNodeInt ( ) { 
 + return nodeInt ; 
 + } 
 + 
 + public PeerNodeSettings getPeerSettings ( ) { 
 + return peerSettings ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 index 88d7513 . . 4b47c58 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . core . api . ApiCallMember ; 
 import im . actor . core . api . ApiCandidate ; 
 import im . actor . core . api . ApiNeedOffer ; 
 import im . actor . core . api . ApiOffer ; 
 + import im . actor . core . api . ApiOnAnswer ; 
 import im . actor . core . api . ApiPeerSettings ; 
 import im . actor . core . api . ApiRejectCall ; 
 import im . actor . core . api . ApiSwitchMaster ; 
 @ @ - 106 , 10 + 107 , 16 @ @ public class PeerCallActor extends EventBusActor { 
 } 
 
 public void startSignaling ( String busId ) { 
 + if ( ! isSlaveMode ) { 
 + throw new RuntimeException ( " This operation is only for slave mode " ) ; 
 + } 
 joinBus ( busId ) ; 
 } 
 
 public void onMasterSwitched ( int uid , long deviceId ) { 
 + if ( ! isSlaveMode ) { 
 + throw new RuntimeException ( " This operation is only for slave mode " ) ; 
 + } 
 this . masterUid = uid ; 
 this . masterDeviceId = deviceId ; 
 this . haveMaster = true ; 
 @ @ - 163 , 10 + 170 , 27 @ @ public class PeerCallActor extends EventBusActor { 
 
 } 
 
 + public void onAdvertised ( int uid , long deviceId , ApiPeerSettings settings ) { 
 + 
 + } 
 + 
 + public void onAnswered ( int uid , long deviceId ) { 
 + 
 + } 
 + 
 public void sendAdvertise ( int uid , long deviceId , ApiPeerSettings settings ) { 
 sendSignaling ( uid , deviceId , new ApiAdvertiseSelf ( settings ) ) ; 
 } 
 
 + public void sendNeedOffer ( int uid , long deviceId , int destUid , long destDeviceId , 
 + ApiPeerSettings settings , boolean isSilent ) { 
 + sendSignaling ( uid , deviceId , new ApiNeedOffer ( destUid , destDeviceId , settings , isSilent ) ) ; 
 + } 
 + 
 + public void sendOnAnswered ( int uid , long deviceId , int destUid , long destDeviceId ) { 
 + sendSignaling ( uid , deviceId , new ApiOnAnswer ( destUid , destDeviceId ) ) ; 
 + } 
 + 
 public void sendAnswer ( ) { 
 if ( isAnswered ) { 
 return ; 
 @ @ - 195 , 13 + 219 , 17 @ @ public class PeerCallActor extends EventBusActor { 
 } 
 
 public void sendRTCOffer ( int uid , long deviceId , String sdp ) { 
 - sendSignaling ( uid , deviceId , new ApiAnswer ( 0 , sdp ) ) ; 
 + sendSignaling ( uid , deviceId , new ApiOffer ( 0 , sdp , getSelfSettings ( ) . toApi ( ) ) ) ; 
 } 
 
 public void sendRTCCandidate ( int uid , long deviceId , int index , String id , String sdp ) { 
 sendSignaling ( uid , deviceId , new ApiCandidate ( 0 , index , id , sdp ) ) ; 
 } 
 
 + public void sendSwitchMaster ( int uid , long deviceId ) { 
 + sendSignaling ( uid , deviceId , new ApiSwitchMaster ( ) ) ; 
 + } 
 + 
 public void sendSignaling ( int uid , long deviceId , ApiWebRTCSignaling signaling ) { 
 byte [ ] msg ; 
 try { 
 @ @ - 260 , 6 + 288 , 11 @ @ public class PeerCallActor extends EventBusActor { 
 } else if ( signaling instanceof ApiNeedOffer ) { 
 ApiNeedOffer needOffer = ( ApiNeedOffer ) signaling ; 
 getPeer ( needOffer . getUid ( ) , needOffer . getDevice ( ) ) . onOfferNeeded ( ) ; 
 + } else if ( signaling instanceof ApiAdvertiseSelf ) { 
 + ApiAdvertiseSelf advertiseSelf = ( ApiAdvertiseSelf ) signaling ; 
 + onAdvertised ( senderId , senderDeviceId , advertiseSelf . getPeerSettings ( ) ) ; 
 + } else if ( signaling instanceof ApiAnswerCall ) { 
 + onAnswered ( senderId , senderDeviceId ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 index 3697a4c . . 5d46cb3 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 @ @ - 110 , 7 + 110 , 7 @ @ public class PeerNodeActor extends ModuleActor { 
 
 @ ActorMessage 
 public void onOfferNeeded ( ) { 
 - 
 + peerConnection . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; 
 } 
 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeSettings . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeSettings . java 
 index c803d87 . . ff4c1b0 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeSettings . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeSettings . java 
 @ @ - 13 , 8 + 13 , 8 @ @ public class PeerNodeSettings { 
 
 public PeerNodeSettings ( ApiPeerSettings peerSettings ) { 
 if ( peerSettings ! = null ) { 
 - if ( peerSettings . canConnect ( ) ! = null ) { 
 - isPreConnectionEnabled = peerSettings . canConnect ( ) ; 
 + if ( peerSettings . canPreConnect ( ) ! = null ) { 
 + isPreConnectionEnabled = peerSettings . canPreConnect ( ) ; 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json 
 index e2881c1 . . 0bab21b 100644 
 - - - a / actor - sdk / sdk - api / actor . json 
 + + + b / actor - sdk / sdk - api / actor . json 
 @ @ - 13066 , 12 + 13066 , 20 @ @ 
 " id " : 1 
 } , 
 { 
 + " name " : " RINGING _ REACHED " , 
 + " id " : 4 
 + } , 
 + { 
 " name " : " CONNECTING " , 
 " id " : 2 
 } , 
 { 
 " name " : " CONNECTED " , 
 " id " : 3 
 + } , 
 + { 
 + " name " : " ENDED " , 
 + " id " : 5 
 } 
 ] 
 } 
 @ @ - 13105 , 6 + 13113 , 18 @ @ 
 " argument " : " fallbackIsConnecting " , 
 " category " : " full " , 
 " description " : " Fallback flag for future compatibility of state " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " fallbackIsRingingReached " , 
 + " category " : " full " , 
 + " description " : " Fallback flag for future compatibility of state " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " fallbackIsEnded " , 
 + " category " : " full " , 
 + " description " : " Fallback flag for future compatibility of state " 
 } 
 ] , 
 " attributes " : [ 
 @ @ - 13139 , 6 + 13159 , 22 @ @ 
 } , 
 " id " : 4 , 
 " name " : " fallbackIsConnecting " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " opt " , 
 + " childType " : " bool " 
 + } , 
 + " id " : 5 , 
 + " name " : " fallbackIsRingingReached " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " opt " , 
 + " childType " : " bool " 
 + } , 
 + " id " : 6 , 
 + " name " : " fallbackIsEnded " 
 } 
 ] 
 } 
 @ @ - 13157 , 12 + 13193 , 6 @ @ 
 } , 
 { 
 " type " : " reference " , 
 - " argument " : " deviceId " , 
 - " category " : " full " , 
 - " description " : " Member Device Id " 
 - } , 
 - { 
 - " type " : " reference " , 
 " argument " : " state " , 
 " category " : " full " , 
 " description " : " State of member " 
 @ @ - 13179 , 14 + 13209 , 6 @ @ 
 } , 
 { 
 " type " : { 
 - " type " : " alias " , 
 - " childType " : " randomId " 
 - } , 
 - " id " : 2 , 
 - " name " : " deviceId " 
 - } , 
 - { 
 - " type " : { 
 " type " : " struct " , 
 " childType " : " CallMemberStateHolder " 
 } , 
 diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 index a26b0e8 . . d2ebb86 100644 
 - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 @ @ - 11218 , 6 + 11218 , 10 @ @ 
 < property role = " TrG5h " value = " RINGING " / > 
 < property role = " 2m7y0m " value = " 1 " / > 
 < / node > 
 + < node concept = " 2m7y0F " id = " 3xEfKBqKUs2 " role = " 2m7ymf " > 
 + < property role = " TrG5h " value = " RINGING _ REACHED " / > 
 + < property role = " 2m7y0m " value = " 4 " / > 
 + < / node > 
 < node concept = " 2m7y0F " id = " 3xEfKBqJSuX " role = " 2m7ymf " > 
 < property role = " TrG5h " value = " CONNECTING " / > 
 < property role = " 2m7y0m " value = " 2 " / > 
 @ @ - 11226 , 6 + 11230 , 10 @ @ 
 < property role = " TrG5h " value = " CONNECTED " / > 
 < property role = " 2m7y0m " value = " 3 " / > 
 < / node > 
 + < node concept = " 2m7y0F " id = " 3xEfKBqKZGJ " role = " 2m7ymf " > 
 + < property role = " TrG5h " value = " ENDED " / > 
 + < property role = " 2m7y0m " value = " 5 " / > 
 + < / node > 
 < / node > 
 < node concept = " 2m5naR " id = " 3xEfKBqJTzW " role = " 2m5mJr " > 
 < property role = " TrG5h " value = " CallMemberStateHolder " / > 
 @ @ - 11257 , 6 + 11265 , 20 @ @ 
 < node concept = " 2m5ndN " id = " 3xEfKBqJTBe " role = " 3GH5xg " / > 
 < / node > 
 < / node > 
 + < node concept = " 2m7Kf5 " id = " 3xEfKBqKVvh " role = " 2m0hLx " > 
 + < property role = " 2m7DUN " value = " 5 " / > 
 + < property role = " TrG5h " value = " fallbackIsRingingReached " / > 
 + < node concept = " 2m5nlT " id = " 3xEfKBqKVvw " role = " 2m7DVh " > 
 + < node concept = " 2m5ndN " id = " 3xEfKBqKVvA " role = " 3GH5xg " / > 
 + < / node > 
 + < / node > 
 + < node concept = " 2m7Kf5 " id = " 3xEfKBqKZGP " role = " 2m0hLx " > 
 + < property role = " 2m7DUN " value = " 6 " / > 
 + < property role = " TrG5h " value = " fallbackIsEnded " / > 
 + < node concept = " 2m5nlT " id = " 3xEfKBqKZH7 " role = " 2m7DVh " > 
 + < node concept = " 2m5ndN " id = " 3xEfKBqKZHd " role = " 3GH5xg " / > 
 + < / node > 
 + < / node > 
 < node concept = " NXeRC " id = " 3xEfKBqJUDo " role = " NXodf " > 
 < property role = " NXePf " value = " Call Member state holder " / > 
 < / node > 
 @ @ - 11280 , 6 + 11302 , 16 @ @ 
 < property role = " NX6R2 " value = " Fallback flag for future compatibility of state " / > 
 < ref role = " NX6Kv " node = " 3xEfKBqJTAW " resolve = " fallbackIsConnecting " / > 
 < / node > 
 + < node concept = " NX1gA " id = " 3xEfKBqKWyX " role = " NXodf " > 
 + < property role = " 1GSvIU " value = " full " / > 
 + < property role = " NX6R2 " value = " Fallback flag for future compatibility of state " / > 
 + < ref role = " NX6Kv " node = " 3xEfKBqKVvh " resolve = " fallbackIsRingingReached " / > 
 + < / node > 
 + < node concept = " NX1gA " id = " 3xEfKBqKZHo " role = " NXodf " > 
 + < property role = " 1GSvIU " value = " full " / > 
 + < property role = " NX6R2 " value = " Fallback flag for future compatibility of state " / > 
 + < ref role = " NX6Kv " node = " 3xEfKBqKZGP " resolve = " fallbackIsEnded " / > 
 + < / node > 
 < / node > 
 < node concept = " 2m5naR " id = " 3xEfKBqJRkx " role = " 2m5mJr " > 
 < property role = " TrG5h " value = " CallMember " / > 
 @ @ - 11290 , 13 + 11322 , 6 @ @ 
 < ref role = " wb18D " node = " 5qm50Y0e3uz " resolve = " userId " / > 
 < / node > 
 < / node > 
 - < node concept = " 2m7Kf5 " id = " 3xEfKBqJRmU " role = " 2m0hLx " > 
 - < property role = " 2m7DUN " value = " 2 " / > 
 - < property role = " TrG5h " value = " deviceId " / > 
 - < node concept = " wb0Ql " id = " 3xEfKBqJRn0 " role = " 2m7DVh " > 
 - < ref role = " wb18D " node = " 2vxDjotnUB8 " resolve = " randomId " / > 
 - < / node > 
 - < / node > 
 < node concept = " 2m7Kf5 " id = " 3xEfKBqJVGe " role = " 2m0hLx " > 
 < property role = " 2m7DUN " value = " 3 " / > 
 < property role = " TrG5h " value = " state " / > 
 @ @ - 11312 , 11 + 11337 , 6 @ @ 
 < property role = " 1GSvIU " value = " full " / > 
 < ref role = " NX6Kv " node = " 3xEfKBqJRmK " resolve = " userId " / > 
 < / node > 
 - < node concept = " NX1gA " id = " 3xEfKBqJVGA " role = " NXodf " > 
 - < property role = " NX6R2 " value = " Member Device Id " / > 
 - < property role = " 1GSvIU " value = " full " / > 
 - < ref role = " NX6Kv " node = " 3xEfKBqJRmU " resolve = " deviceId " / > 
 - < / node > 
 < node concept = " NX1gA " id = " 3xEfKBqJVGK " role = " NXodf " > 
 < property role = " NX6R2 " value = " State of member " / > 
 < property role = " 1GSvIU " value = " full " / > 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMember . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMember . java 
 index 9da41a0 . . 943f681 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMember . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMember . java 
 @ @ - 17 , 12 + 17 , 10 @ @ import java . util . ArrayList ; 
 public class ApiCallMember extends BserObject { 
 
 private int userId ; 
 - private long deviceId ; 
 private ApiCallMemberStateHolder state ; 
 
 - public ApiCallMember ( int userId , long deviceId , @ NotNull ApiCallMemberStateHolder state ) { 
 + public ApiCallMember ( int userId , @ NotNull ApiCallMemberStateHolder state ) { 
 this . userId = userId ; 
 - this . deviceId = deviceId ; 
 this . state = state ; 
 } 
 
 @ @ - 34 , 10 + 32 , 6 @ @ public class ApiCallMember extends BserObject { 
 return this . userId ; 
 } 
 
 - public long getDeviceId ( ) { 
 - return this . deviceId ; 
 - } 
 - 
 @ NotNull 
 public ApiCallMemberStateHolder getState ( ) { 
 return this . state ; 
 @ @ - 46 , 14 + 40 , 12 @ @ public class ApiCallMember extends BserObject { 
 @ Override 
 public void parse ( BserValues values ) throws IOException { 
 this . userId = values . getInt ( 1 ) ; 
 - this . deviceId = values . getLong ( 2 ) ; 
 this . state = values . getObj ( 3 , new ApiCallMemberStateHolder ( ) ) ; 
 } 
 
 @ Override 
 public void serialize ( BserWriter writer ) throws IOException { 
 writer . writeInt ( 1 , this . userId ) ; 
 - writer . writeLong ( 2 , this . deviceId ) ; 
 if ( this . state = = null ) { 
 throw new IOException ( ) ; 
 } 
 @ @ - 64 , 7 + 56 , 6 @ @ public class ApiCallMember extends BserObject { 
 public String toString ( ) { 
 String res = " struct CallMember { " ; 
 res + = " userId = " + this . userId ; 
 - res + = " , deviceId = " + this . deviceId ; 
 res + = " , state = " + this . state ; 
 res + = " } " ; 
 return res ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMemberState . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMemberState . java 
 index 6539ad4 . . 2cedc05 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMemberState . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMemberState . java 
 @ @ - 8 , 8 + 8 , 10 @ @ import java . io . IOException ; 
 public enum ApiCallMemberState { 
 
 RINGING ( 1 ) , 
 + RINGING _ REACHED ( 4 ) , 
 CONNECTING ( 2 ) , 
 CONNECTED ( 3 ) , 
 + ENDED ( 5 ) , 
 UNSUPPORTED _ VALUE ( - 1 ) ; 
 
 private int value ; 
 @ @ - 25 , 8 + 27 , 10 @ @ public enum ApiCallMemberState { 
 public static ApiCallMemberState parse ( int value ) throws IOException { 
 switch ( value ) { 
 case 1 : return ApiCallMemberState . RINGING ; 
 + case 4 : return ApiCallMemberState . RINGING _ REACHED ; 
 case 2 : return ApiCallMemberState . CONNECTING ; 
 case 3 : return ApiCallMemberState . CONNECTED ; 
 + case 5 : return ApiCallMemberState . ENDED ; 
 default : return ApiCallMemberState . UNSUPPORTED _ VALUE ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMemberStateHolder . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMemberStateHolder . java 
 index f53e8fa . . 84313df 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMemberStateHolder . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCallMemberStateHolder . java 
 @ @ - 20 , 12 + 20 , 16 @ @ public class ApiCallMemberStateHolder extends BserObject { 
 private Boolean fallbackIsRinging ; 
 private Boolean fallbackIsConnected ; 
 private Boolean fallbackIsConnecting ; 
 + private Boolean fallbackIsRingingReached ; 
 + private Boolean fallbackIsEnded ; 
 
 - public ApiCallMemberStateHolder ( @ NotNull ApiCallMemberState state , @ Nullable Boolean fallbackIsRinging , @ Nullable Boolean fallbackIsConnected , @ Nullable Boolean fallbackIsConnecting ) { 
 + public ApiCallMemberStateHolder ( @ NotNull ApiCallMemberState state , @ Nullable Boolean fallbackIsRinging , @ Nullable Boolean fallbackIsConnected , @ Nullable Boolean fallbackIsConnecting , @ Nullable Boolean fallbackIsRingingReached , @ Nullable Boolean fallbackIsEnded ) { 
 this . state = state ; 
 this . fallbackIsRinging = fallbackIsRinging ; 
 this . fallbackIsConnected = fallbackIsConnected ; 
 this . fallbackIsConnecting = fallbackIsConnecting ; 
 + this . fallbackIsRingingReached = fallbackIsRingingReached ; 
 + this . fallbackIsEnded = fallbackIsEnded ; 
 } 
 
 public ApiCallMemberStateHolder ( ) { 
 @ @ - 52 , 12 + 56 , 24 @ @ public class ApiCallMemberStateHolder extends BserObject { 
 return this . fallbackIsConnecting ; 
 } 
 
 + @ Nullable 
 + public Boolean fallbackIsRingingReached ( ) { 
 + return this . fallbackIsRingingReached ; 
 + } 
 + 
 + @ Nullable 
 + public Boolean fallbackIsEnded ( ) { 
 + return this . fallbackIsEnded ; 
 + } 
 + 
 @ Override 
 public void parse ( BserValues values ) throws IOException { 
 this . state = ApiCallMemberState . parse ( values . getInt ( 1 ) ) ; 
 this . fallbackIsRinging = values . optBool ( 2 ) ; 
 this . fallbackIsConnected = values . optBool ( 3 ) ; 
 this . fallbackIsConnecting = values . optBool ( 4 ) ; 
 + this . fallbackIsRingingReached = values . optBool ( 5 ) ; 
 + this . fallbackIsEnded = values . optBool ( 6 ) ; 
 } 
 
 @ Override 
 @ @ - 75 , 6 + 91 , 12 @ @ public class ApiCallMemberStateHolder extends BserObject { 
 if ( this . fallbackIsConnecting ! = null ) { 
 writer . writeBool ( 4 , this . fallbackIsConnecting ) ; 
 } 
 + if ( this . fallbackIsRingingReached ! = null ) { 
 + writer . writeBool ( 5 , this . fallbackIsRingingReached ) ; 
 + } 
 + if ( this . fallbackIsEnded ! = null ) { 
 + writer . writeBool ( 6 , this . fallbackIsEnded ) ; 
 + } 
 } 
 
 @ Override 
 @ @ - 84 , 6 + 106 , 8 @ @ public class ApiCallMemberStateHolder extends BserObject { 
 res + = " , fallbackIsRinging = " + this . fallbackIsRinging ; 
 res + = " , fallbackIsConnected = " + this . fallbackIsConnected ; 
 res + = " , fallbackIsConnecting = " + this . fallbackIsConnecting ; 
 + res + = " , fallbackIsRingingReached = " + this . fallbackIsRingingReached ; 
 + res + = " , fallbackIsEnded = " + this . fallbackIsEnded ; 
 res + = " } " ; 
 return res ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 index 84a7ae7 . . f7d850c 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 @ @ - 5 , 6 + 5 , 8 @ @ import java . util . ArrayList ; 
 import im . actor . core . api . ApiAdvertiseSelf ; 
 import im . actor . core . api . ApiAnswerCall ; 
 import im . actor . core . api . ApiCallMember ; 
 + import im . actor . core . api . ApiCallMemberState ; 
 + import im . actor . core . api . ApiCallMemberStateHolder ; 
 import im . actor . core . api . ApiMembersChanged ; 
 import im . actor . core . api . ApiNeedOffer ; 
 import im . actor . core . api . ApiOnAnswer ; 
 @ @ - 122 , 6 + 124 , 11 @ @ public class CallMasterActor extends CallActor { 
 sendSignalingMessage ( uid , deviceId , new ApiSwitchMaster ( ) ) ; 
 
 / / 
 + / / Advertise members 
 + / / 
 + sendSignalingMessage ( uid , deviceId , buildMembersList ( ) ) ; 
 + 
 + / / 
 / / Update State 
 / / 
 updateCallVMState ( ) ; 
 @ @ - 345 , 7 + 352 , 7 @ @ public class CallMasterActor extends CallActor { 
 private void updateMembers ( ) { 
 
 / / 
 - / / Update Calls VM 
 + / / Build Updated member lists 
 / / 
 ArrayList < im . actor . core . viewmodel . CallMember > callMembers = new ArrayList < > ( ) ; 
 for ( MasterCallMember callMember : state . getConnectedMembers ( ) ) { 
 @ @ - 370 , 20 + 377 , 55 @ @ public class CallMasterActor extends CallActor { 
 } 
 callMembers . add ( new CallMember ( callMember . getUid ( ) , callMemberState ) ) ; 
 } 
 + 
 + / / 
 + / / Update CallVM 
 + / / 
 callVM . getMembers ( ) . change ( callMembers ) ; 
 
 / / 
 / / Broadcast new members 
 / / 
 - / / sendSignalingMessage ( createMembersChanged ( ) ) ; 
 + sendSignalingMessage ( buildMembersList ( ) ) ; 
 } 
 
 - private ApiMembersChanged createMembersChanged ( ) { 
 - ArrayList < ApiCallMember > callMembers = new ArrayList < > ( ) ; 
 - / / for ( CallMember m : members ) { 
 - / / callMembers . add ( new ApiCallMember ( m . getUid ( ) , 0 , m . getState ( ) . toApiState ( ) ) ) ; 
 - / / } 
 - return new ApiMembersChanged ( callMembers ) ; 
 + private ApiMembersChanged buildMembersList ( ) { 
 + ArrayList < ApiCallMember > apiCallMembers = new ArrayList < > ( ) ; 
 + apiCallMembers . add ( new ApiCallMember ( myUid ( ) , new ApiCallMemberStateHolder ( ApiCallMemberState . CONNECTED , 
 + false , true , false , false , false ) ) ) ; 
 + for ( MasterCallMember callMember : state . getConnectedMembers ( ) ) { 
 + ApiCallMemberStateHolder callMemberStateHolder ; 
 + switch ( callMember . getState ( ) ) { 
 + case RINGING _ REACHED : 
 + callMemberStateHolder = new ApiCallMemberStateHolder ( 
 + ApiCallMemberState . RINGING _ REACHED , 
 + true , false , false , true , false ) ; 
 + break ; 
 + case RINGING : 
 + callMemberStateHolder = new ApiCallMemberStateHolder ( 
 + ApiCallMemberState . RINGING , 
 + true , false , false , false , false ) ; 
 + break ; 
 + case CONNECTING : 
 + callMemberStateHolder = new ApiCallMemberStateHolder ( 
 + ApiCallMemberState . CONNECTING , 
 + false , false , true , false , false ) ; 
 + break ; 
 + case IN _ PROGRESS : 
 + callMemberStateHolder = new ApiCallMemberStateHolder ( 
 + ApiCallMemberState . CONNECTED , 
 + false , true , false , false , false ) ; 
 + break ; 
 + default : 
 + case ENDED : 
 + callMemberStateHolder = new ApiCallMemberStateHolder ( 
 + ApiCallMemberState . ENDED , 
 + false , false , false , false , true ) ; 
 + break ; 
 + } 
 + apiCallMembers . add ( new ApiCallMember ( callMember . getUid ( ) , callMemberStateHolder ) ) ; 
 + } 
 + return new ApiMembersChanged ( apiCallMembers ) ; 
 } 
 
 private void debugState ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 index 391d6fe . . ee436cc 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 @ @ - 1 , 9 + 1 , 13 @ @ 
 package im . actor . core . modules . calls ; 
 
 import java . util . ArrayList ; 
 + import java . util . List ; 
 
 import im . actor . core . api . ApiAdvertiseSelf ; 
 import im . actor . core . api . ApiAnswerCall ; 
 + import im . actor . core . api . ApiCallMember ; 
 + import im . actor . core . api . ApiCallMemberStateHolder ; 
 + import im . actor . core . api . ApiMembersChanged ; 
 import im . actor . core . api . ApiNeedOffer ; 
 import im . actor . core . api . ApiPeerSettings ; 
 import im . actor . core . api . ApiRejectCall ; 
 @ @ - 14 , 6 + 18 , 7 @ @ import im . actor . core . api . rpc . ResponseGetCallInfo ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . viewmodel . CallMember ; 
 + import im . actor . core . viewmodel . CallMemberState ; 
 import im . actor . core . viewmodel . CallState ; 
 import im . actor . core . viewmodel . CallVM ; 
 import im . actor . runtime . actors . ActorRef ; 
 @ @ - 75 , 6 + 80 , 67 @ @ public class CallSlaveActor extends CallActor { 
 callManager . send ( new CallManagerActor . IncomingCallReady ( callId ) , self ( ) ) ; 
 } 
 
 + public void onMembersChanged ( List < ApiCallMember > allMembers ) { 
 + 
 + / / 
 + / / Handling Members 
 + / / 
 + ArrayList < CallMember > members = new ArrayList < > ( ) ; 
 + for ( ApiCallMember apiCallMember : allMembers ) { 
 + if ( getUser ( apiCallMember . getUserId ( ) ) = = null ) { 
 + continue ; 
 + } 
 + if ( apiCallMember . getUserId ( ) = = myUid ( ) ) { 
 + continue ; 
 + } 
 + ApiCallMemberStateHolder stateHolder = apiCallMember . getState ( ) ; 
 + CallMemberState state ; 
 + switch ( stateHolder . getState ( ) ) { 
 + case RINGING : 
 + state = CallMemberState . RINGING ; 
 + break ; 
 + case RINGING _ REACHED : 
 + state = CallMemberState . RINGING _ REACHED ; 
 + break ; 
 + case CONNECTING : 
 + state = CallMemberState . CONNECTING ; 
 + break ; 
 + case CONNECTED : 
 + state = CallMemberState . IN _ PROGRESS ; 
 + break ; 
 + case ENDED : 
 + state = CallMemberState . ENDED ; 
 + break ; 
 + default : 
 + if ( stateHolder . fallbackIsRingingReached ( ) ! = null & & stateHolder . fallbackIsRingingReached ( ) ) { 
 + state = CallMemberState . RINGING _ REACHED ; 
 + break ; 
 + } 
 + if ( stateHolder . fallbackIsEnded ( ) ! = null & & stateHolder . fallbackIsEnded ( ) ) { 
 + state = CallMemberState . ENDED ; 
 + break ; 
 + } 
 + if ( stateHolder . fallbackIsRinging ( ) ! = null & & stateHolder . fallbackIsRinging ( ) ) { 
 + state = CallMemberState . RINGING ; 
 + break ; 
 + } 
 + 
 + if ( stateHolder . fallbackIsConnecting ( ) ! = null & & stateHolder . fallbackIsConnecting ( ) ) { 
 + state = CallMemberState . CONNECTING ; 
 + break ; 
 + } 
 + 
 + if ( stateHolder . fallbackIsConnected ( ) ! = null & & stateHolder . fallbackIsConnected ( ) ) { 
 + state = CallMemberState . IN _ PROGRESS ; 
 + break ; 
 + } 
 + state = CallMemberState . RINGING ; 
 + } 
 + members . add ( new CallMember ( apiCallMember . getUserId ( ) , state ) ) ; 
 + } 
 + callVM . getMembers ( ) . change ( members ) ; 
 + } 
 + 
 public void onNeedOffer ( int destUid , long destDeviceId , Boolean isSilent , ApiPeerSettings peerSettings ) { 
 getPeer ( destUid , destDeviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; 
 } 
 @ @ - 124 , 6 + 190 , 8 @ @ public class CallSlaveActor extends CallActor { 
 onNeedOffer ( needOffer . getUid ( ) , needOffer . getDevice ( ) , needOffer . isSilent ( ) , needOffer . getPeerSettings ( ) ) ; 
 } else if ( signaling instanceof ApiSwitchMaster ) { 
 onMasterNodeChanged ( fromUid , fromDeviceId ) ; 
 + } else if ( signaling instanceof ApiMembersChanged ) { 
 + onMembersChanged ( ( ( ApiMembersChanged ) signaling ) . getAllMembers ( ) ) ; 
 } else { 
 super . onSignalingMessage ( fromUid , fromDeviceId , signaling ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / CallMember . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / CallMember . java 
 deleted file mode 100644 
 index 4251e44 . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / CallMember . java 
 + + + / dev / null 
 @ @ - 1 , 24 + 0 , 0 @ @ 
 - package im . actor . core . modules . calls . entity ; 
 - 
 - public class CallMember { 
 - 
 - private int uid ; 
 - private CallMemberState state ; 
 - 
 - public CallMember ( int uid , CallMemberState state ) { 
 - this . uid = uid ; 
 - this . state = state ; 
 - } 
 - 
 - public int getUid ( ) { 
 - return uid ; 
 - } 
 - 
 - public CallMemberState getState ( ) { 
 - return state ; 
 - } 
 - 
 - public void setState ( CallMemberState state ) { 
 - this . state = state ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / CallMemberState . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / CallMemberState . java 
 deleted file mode 100644 
 index c347d59 . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / CallMemberState . java 
 + + + / dev / null 
 @ @ - 1 , 53 + 0 , 0 @ @ 
 - package im . actor . core . modules . calls . entity ; 
 - 
 - import im . actor . core . api . ApiCallMemberState ; 
 - import im . actor . core . api . ApiCallMemberStateHolder ; 
 - 
 - public enum CallMemberState { 
 - RINGING , CONNECTING , CONNECTED ; 
 - 
 - public ApiCallMemberStateHolder toApiState ( ) { 
 - ApiCallMemberState state ; 
 - Boolean isConnected = null ; 
 - Boolean isConnecting = null ; 
 - Boolean isRinging = null ; 
 - switch ( this ) { 
 - case CONNECTED : 
 - state = ApiCallMemberState . CONNECTED ; 
 - isConnected = true ; 
 - break ; 
 - default : 
 - case CONNECTING : 
 - state = ApiCallMemberState . CONNECTING ; 
 - isConnecting = true ; 
 - break ; 
 - case RINGING : 
 - state = ApiCallMemberState . RINGING ; 
 - isRinging = true ; 
 - break ; 
 - } 
 - return new ApiCallMemberStateHolder ( state , isRinging , isConnected , isConnecting ) ; 
 - } 
 - 
 - public static CallMemberState fromApi ( ApiCallMemberStateHolder stateHolder ) { 
 - switch ( stateHolder . getState ( ) ) { 
 - case CONNECTED : 
 - return CONNECTED ; 
 - case CONNECTING : 
 - return CONNECTING ; 
 - case RINGING : 
 - return RINGING ; 
 - default : 
 - if ( stateHolder . fallbackIsConnected ( ) ! = null & & stateHolder . fallbackIsConnected ( ) ) { 
 - return CONNECTED ; 
 - } 
 - if ( stateHolder . fallbackIsConnecting ( ) ! = null & & stateHolder . fallbackIsConnecting ( ) ) { 
 - return CONNECTING ; 
 - } 
 - if ( stateHolder . fallbackIsRinging ( ) ! = null & & stateHolder . fallbackIsRinging ( ) ) { 
 - return RINGING ; 
 - } 
 - return RINGING ; 
 - } 
 - } 
 - }
