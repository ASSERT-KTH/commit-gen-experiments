BLEU SCORE: 0.07966506956353646

TEST MSG: fix ( server ) : fixed tests compilation
GENERATED MSG: tests ( * ) : traits for services Implicits ; UserUtilsSpec draft

TEST DIFF (one line): diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > index 5815768 . . ce295a8 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > @ @ - 104 , 7 + 104 , 7 @ @ final class SimpleServerE2eSpec extends ActorSuite ( < nl > < nl > val messageId = Random . nextLong ( ) < nl > < nl > - val requestBytes = RequestCodec . encode ( Request ( RequestGetDifference ( 999 , Array ( ) ) ) ) . require < nl > + val requestBytes = RequestCodec . encode ( Request ( RequestGetDifference ( 999 , Array ( ) , Vector . empty ) ) ) . require < nl > val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , ProtoRpcRequest ( requestBytes ) ) ) . require < nl > val mtPackage = MTPackage ( authId , sessionId , mbBytes ) < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala < nl > index d45b646 . . 7e097a1 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala < nl > @ @ - 1020 , 8 + 1020 , 8 @ @ final class GroupsServiceSpec < nl > } < nl > } < nl > < nl > - val user1Seq = whenReady ( sequenceService . jhandleGetState ( clientData1 ) ) ( _ . toOption . get . seq ) < nl > - val user2Seq = whenReady ( sequenceService . jhandleGetState ( clientData2 ) ) ( _ . toOption . get . seq ) < nl > + val user1Seq = whenReady ( sequenceService . jhandleGetState ( Vector . empty , clientData1 ) ) ( _ . toOption . get . seq ) < nl > + val user2Seq = whenReady ( sequenceService . jhandleGetState ( Vector . empty , clientData2 ) ) ( _ . toOption . get . seq ) < nl > < nl > { < nl > implicit val clientData = clientData2 < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingReadsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingReadsSpec . scala < nl > index 3362a86 . . bd48cc9 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingReadsSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingReadsSpec . scala < nl > @ @ - 69 , 7 + 69 , 7 @ @ class MessagingReadsSpec < nl > dialog . lastReadAt shouldEqual new DateTime ( 0 ) < nl > dialog . ownerLastReadAt shouldEqual new DateTime ( 0 ) < nl > < nl > - val seq = whenReady ( sequenceService . handleGetState ( ) ) { < nl > + val seq = whenReady ( sequenceService . handleGetState ( Vector . empty ) ) { < nl > _ . toOption . get . seq < nl > } < nl > < nl > @ @ - 127 , 7 + 127 , 7 @ @ class MessagingReadsSpec < nl > dialog . lastReadAt shouldEqual new DateTime ( 0 ) < nl > dialog . ownerLastReadAt shouldEqual new DateTime ( 0 ) < nl > < nl > - val currentSeq = whenReady ( sequenceService . handleGetState ( ) ) { _ . toOption . get . seq } < nl > + val currentSeq = whenReady ( sequenceService . handleGetState ( Vector . empty ) ) { _ . toOption . get . seq } < nl > < nl > whenReady ( service . handleMessageRead ( user2OutPeer , messageDate ) ) ( identity ) < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > index e4722dc . . 6c02087 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > @ @ - 381 , 7 + 381 , 7 @ @ final class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceH < nl > Thread . sleep ( 300 ) < nl > < nl > val ResponseSeq ( seq , state ) = { < nl > - whenReady ( sequenceService . handleGetState ( ) ) { resp ⇒ < nl > + whenReady ( sequenceService . handleGetState ( Vector . empty ) ) { resp ⇒ < nl > resp . toOption . get < nl > } < nl > } < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / RawServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / RawServiceSpec . scala < nl > index 20c4246 . . 4dbfe5d 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / RawServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / RawServiceSpec . scala < nl > @ @ - 4 , 8 + 4 , 7 @ @ import akka . actor . ActorSystem < nl > import cats . data . Xor < nl > import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . collections . _ < nl > - import im . actor . api . rpc . raw . { RawApiService , MapStyleRawApiService } < nl > - import im . actor . rpc . raw . RawApiService < nl > + import im . actor . api . rpc . raw . { RawApiService , MapStyleRawApiService } < nl > import im . actor . server . api . rpc . RawApiExtension < nl > import im . actor . server . api . rpc . service . raw . RawServiceImpl < nl > import im . actor . server . { BaseAppSuite , ImplicitAuthService , ImplicitSessionRegion } < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala < nl > index 3491bd9 . . e466cef 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala < nl > @ @ - 6 , 7 + 6 , 7 @ @ import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . messaging . { ApiTextMessage , UpdateMessageContentChanged } < nl > import im . actor . api . rpc . misc . ResponseSeq < nl > import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } < nl > - import im . actor . api . rpc . sequence . { ApiDifferenceUpdate , ResponseGetDifference } < nl > + import im . actor . api . rpc . sequence . { ApiUpdateContainer , ApiDifferenceUpdate , ResponseGetDifference } < nl > import im . actor . server . _ < nl > import im . actor . server . api . rpc . service . sequence . SequenceServiceConfig < nl > import im . actor . server . sequence . SeqUpdatesExtension < nl > @ @ - 41 , 7 + 41 , 7 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { < nl > val sessionId = createSessionId ( ) < nl > implicit val clientData = ClientData ( authId , sessionId , Some ( AuthData ( user . id , authSid ) ) ) < nl > < nl > - whenReady ( service . handleGetState ( ) ) { res ⇒ < nl > + whenReady ( service . handleGetState ( Vector . empty ) ) { res ⇒ < nl > res should matchPattern { case Ok ( ResponseSeq ( 0 , _ ) ) ⇒ } < nl > } < nl > } < nl > @ @ - 69 , 12 + 69 , 12 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { < nl > seqUpdExt . deliverSingleUpdate ( user . id , update ) < nl > } ) , 10 . seconds ) < nl > < nl > - var totalUpdates : Seq [ ApiDifferenceUpdate ] = Seq . empty < nl > + var totalUpdates : Seq [ ApiUpdateContainer ] = Seq . empty < nl > < nl > - val ( seq1 , state1 ) = whenReady ( service . handleGetDifference ( 0 , Array . empty ) ) { res ⇒ < nl > + val ( seq1 , state1 ) = whenReady ( service . handleGetDifference ( 0 , Array . empty , Vector . empty ) ) { res ⇒ < nl > val diff = res . toOption . get < nl > inside ( res ) { < nl > - case Ok ( ResponseGetDifference ( seq , state , users , updates , needMore , groups ) ) ⇒ < nl > + case Ok ( ResponseGetDifference ( seq , state , users , updates , needMore , groups , _ , _ , _ ) ) ⇒ < nl > println ( user2 . id ) < nl > println ( updates . map ( _ . update . length ) ) < nl > updates . map ( _ . toByteArray . length ) . sum should be < = withError ( config . maxDifferenceSize ) < nl > @ @ - 85 , 10 + 85 , 10 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { < nl > ( diff . seq , diff . state ) < nl > } < nl > < nl > - val ( seq2 , state2 ) = whenReady ( service . handleGetDifference ( seq1 , state1 ) ) { res ⇒ < nl > + val ( seq2 , state2 ) = whenReady ( service . handleGetDifference ( seq1 , state1 , Vector . empty ) ) { res ⇒ < nl > val diff = res . toOption . get < nl > inside ( res ) { < nl > - case Ok ( ResponseGetDifference ( seq , state , users , updates , needMore , groups ) ) ⇒ < nl > + case Ok ( ResponseGetDifference ( seq , state , users , updates , needMore , groups , _ , _ , _ ) ) ⇒ < nl > ( updates . map ( _ . toByteArray . length ) . sum < = withError ( config . maxDifferenceSize ) ) shouldEqual true < nl > needMore shouldEqual true < nl > totalUpdates + + = updates < nl > @ @ - 97 , 10 + 97 , 10 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { < nl > ( diff . seq , diff . state ) < nl > } < nl > < nl > - val finalSeq = whenReady ( service . handleGetDifference ( seq2 , state2 ) ) { res ⇒ < nl > + val finalSeq = whenReady ( service . handleGetDifference ( seq2 , state2 , Vector . empty ) ) { res ⇒ < nl > val diff = res . toOption . get < nl > inside ( res ) { < nl > - case Ok ( ResponseGetDifference ( seq , state , users , updates , needMore , groups ) ) ⇒ < nl > + case Ok ( ResponseGetDifference ( seq , state , users , updates , needMore , groups , _ , _ , _ ) ) ⇒ < nl > ( updates . map ( _ . toByteArray . length ) . sum < = withError ( config . maxDifferenceSize ) ) shouldEqual true < nl > needMore shouldEqual false < nl > totalUpdates + + = updates < nl > @ @ - 142 , 9 + 142 , 9 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { < nl > whenReady ( seqUpdExt . deliverSingleUpdate ( user . id , bigUpdate ) ) ( identity ) < nl > < nl > / / expect first small update and needMore = = true < nl > - val ( seq1 , state1 ) = whenReady ( service . handleGetDifference ( 0 , Array . empty ) ) { res ⇒ < nl > + val ( seq1 , state1 ) = whenReady ( service . handleGetDifference ( 0 , Array . empty , Vector . empty ) ) { res ⇒ < nl > inside ( res ) { < nl > - case Ok ( ResponseGetDifference ( _ , _ , _ , updates , true , _ ) ) ⇒ < nl > + case Ok ( ResponseGetDifference ( _ , _ , _ , updates , true , _ , _ , _ , _ ) ) ⇒ < nl > updates . size shouldEqual 1 < nl > } < nl > < nl > @ @ - 153 , 9 + 153 , 9 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { < nl > } < nl > < nl > / / expect first big update and needMore = = true < nl > - val ( seq2 , state2 ) = whenReady ( service . handleGetDifference ( seq1 , state1 ) ) { res ⇒ < nl > + val ( seq2 , state2 ) = whenReady ( service . handleGetDifference ( seq1 , state1 , Vector . empty ) ) { res ⇒ < nl > inside ( res ) { < nl > - case Ok ( ResponseGetDifference ( _ , _ , _ , updates , true , _ ) ) ⇒ < nl > + case Ok ( ResponseGetDifference ( _ , _ , _ , updates , true , _ , _ , _ , _ ) ) ⇒ < nl > updates . size shouldEqual 1 < nl > } < nl > < nl > @ @ - 164 , 9 + 164 , 9 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { < nl > } < nl > < nl > / / expect second big update and needMore = = false < nl > - whenReady ( service . handleGetDifference ( seq2 , state2 ) ) { res ⇒ < nl > + whenReady ( service . handleGetDifference ( seq2 , state2 , Vector . empty ) ) { res ⇒ < nl > inside ( res ) { < nl > - case Ok ( ResponseGetDifference ( _ , _ , _ , updates , false , _ ) ) ⇒ < nl > + case Ok ( ResponseGetDifference ( _ , _ , _ , updates , false , _ , _ , _ , _ ) ) ⇒ < nl > updates . size shouldEqual 1 < nl > } < nl > } < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala < nl > index 8c48d5c . . d21d070 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala < nl > @ @ - 85 , 7 + 85 , 7 @ @ class WebhookHandlerSpec < nl > expectUpdate ( initSeq , classOf [ UpdateCountersChanged ] ) ( identity ) < nl > } < nl > < nl > - val ( seq1 , state1 ) = whenReady ( sequenceService . handleGetState ( ) ) { resp ⇒ < nl > + val ( seq1 , state1 ) = whenReady ( sequenceService . handleGetState ( Vector . empty ) ) { resp ⇒ < nl > val ResponseSeq ( seq , state ) = resp . toOption . get < nl > ( seq , state ) < nl > } < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > index a0a5c26 . . c373890 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > @ @ - 280 , 7 + 280 , 7 @ @ final class SessionResendSpec extends BaseSessionSpec ( < nl > } < nl > < nl > private def subscribeToSeq ( authId : Long , sessionId : Long , userId : Int ) ( implicit probe : TestProbe ) : Unit = { < nl > - val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ) ) . require < nl > + val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ( Vector . empty ) ) ) . require < nl > < nl > val getSeqMessageId = Random . nextLong ( ) < nl > sendMessageBox ( authId , sessionId , sessionRegion . ref , getSeqMessageId , ProtoRpcRequest ( encodedGetSeqRequest ) ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > index 369beba . . aaf0d01 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > @ @ - 171 , 7 + 171 , 7 @ @ final class SessionSpec extends BaseSessionSpec { < nl > val authSession = Await . result ( db . run ( AuthSessionRepo . findByAuthId ( authId ) ) , 5 . seconds ) . get < nl > implicit val clientData = AuthorizedClientData ( authId , sessionId , authResult . asInstanceOf [ RpcOk ] . response . asInstanceOf [ ResponseAuth ] . user . id , authSession . id ) < nl > < nl > - val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ) ) . require < nl > + val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ( Vector . empty ) ) ) . require < nl > < nl > val thirdMessageId = Random . nextLong ( ) < nl > sendMessageBox ( authId , sessionId , sessionRegion . ref , thirdMessageId , ProtoRpcRequest ( encodedGetSeqRequest ) ) < nl > @ @ - 193 , 7 + 193 , 7 @ @ final class SessionSpec extends BaseSessionSpec { < nl > < nl > implicit val clientData = AuthorizedClientData ( authId , sessionId , user . id , authSid ) < nl > < nl > - val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ) ) . require < nl > + val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ( Vector . empty ) ) ) . require < nl > < nl > val thirdMessageId = Random . nextLong ( ) < nl > sendMessageBox ( authId , sessionId , sessionRegion . ref , thirdMessageId , ProtoRpcRequest ( encodedGetSeqRequest ) )
NEAREST DIFF (one line): diff - - git a / actor - tests / src / test / scala / im / actor / server / BaseAppSuite . scala b / actor - tests / src / test / scala / im / actor / server / BaseAppSuite . scala < nl > index bdf1de6 . . c894ba9 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / BaseAppSuite . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / BaseAppSuite . scala < nl > @ @ - 1 , 11 + 1 , 15 @ @ < nl > package im . actor . server < nl > < nl > + import scala . concurrent . ExecutionContext < nl > + < nl > import akka . actor . ActorSystem < nl > import akka . contrib . pattern . DistributedPubSubExtension < nl > import akka . stream . ActorFlowMaterializer < nl > import org . scalatest . concurrent . ScalaFutures < nl > import org . scalatest . time . { Seconds , Span } < nl > import org . scalatest . { FlatSpecLike , Matchers } < nl > + import slick . driver . PostgresDriver < nl > + import slick . jdbc . JdbcDataSource < nl > < nl > import im . actor . server . api . ActorSpecHelpers < nl > import im . actor . server . api . rpc . service . ServiceSpecHelpers < nl > @ @ - 21 , 8 + 25 , 10 @ @ abstract class BaseAppSuite ( _ system : ActorSystem = { ActorSpecification . createSy < nl > with SqlSpecHelpers < nl > with ServiceSpecHelpers < nl > with ActorSpecHelpers { < nl > - implicit lazy val ( ds , db ) = migrateAndInitDb ( ) < nl > - implicit val flowMaterializer = ActorFlowMaterializer ( ) < nl > + implicit lazy val ( ds : JdbcDataSource , db : PostgresDriver . api . Database ) = migrateAndInitDb ( ) < nl > + implicit val flowMaterializer : ActorFlowMaterializer = ActorFlowMaterializer ( ) < nl > + implicit lazy val ec : ExecutionContext = _ system . dispatcher < nl > + < nl > lazy val mediator = DistributedPubSubExtension ( system ) . mediator < nl > < nl > override implicit def patienceConfig : PatienceConfig = < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / ImplicitRegions . scala b / actor - tests / src / test / scala / im / actor / server / ImplicitRegions . scala < nl > new file mode 100644 < nl > index 0000000 . . 9bb15c0 < nl > - - - / dev / null < nl > + + + b / actor - tests / src / test / scala / im / actor / server / ImplicitRegions . scala < nl > @ @ - 0 , 0 + 1 , 36 @ @ < nl > + package im . actor . server < nl > + < nl > + import akka . actor . { ActorRef , ActorSystem } < nl > + import slick . driver . PostgresDriver . api . Database < nl > + < nl > + import im . actor . server . api . ActorSpecHelpers < nl > + import im . actor . server . push . SeqUpdatesManagerRegion < nl > + import im . actor . server . session . { Session , SessionRegion } < nl > + import im . actor . server . social . { SocialManagerRegion , SocialManager } < nl > + < nl > + trait ImplicitSeqUpdatesManagerRegion extends ActorSpecHelpers { < nl > + implicit val system : ActorSystem < nl > + implicit val db : Database < nl > + < nl > + implicit lazy val seqUpdManagerRegion : SeqUpdatesManagerRegion = buildSeqUpdManagerRegion ( ) < nl > + } < nl > + < nl > + trait ImplicitSocialManagerRegion { < nl > + implicit val system : ActorSystem < nl > + implicit val db : Database < nl > + < nl > + implicit lazy val socialManagerRegion : SocialManagerRegion = SocialManager . startRegion ( ) < nl > + } < nl > + < nl > + trait ImplicitSessionRegionProxy { < nl > + implicit val system : ActorSystem < nl > + < nl > + val mediator : ActorRef < nl > + < nl > + implicit lazy val sessionRegion : SessionRegion = Session . startRegionProxy ( ) < nl > + } < nl > + < nl > + trait ImplicitRegions < nl > + extends ImplicitSeqUpdatesManagerRegion < nl > + with ImplicitSessionRegionProxy < nl > + with ImplicitSocialManagerRegion < nl > \ No newline at end of file < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AvatarsSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AvatarsSpec . scala < nl > index 5004187 . . 4be6f18 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AvatarsSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AvatarsSpec . scala < nl > @ @ - 28 , 8 + 28 , 6 @ @ class AvatarsSpec extends BaseAppSuite { < nl > < nl > import FileUtils . _ < nl > < nl > - implicit val ec = system . dispatcher < nl > - < nl > implicit val sessionRegion = buildSessionRegionProxy ( ) < nl > < nl > implicit val seqUpdManagerRegion = buildSeqUpdManagerRegion ( ) < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala < nl > index 5bf1037 . . 722467e 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala < nl > @ @ - 67 , 7 + 67 , 6 @ @ class GroupsServiceSpec extends BaseAppSuite with GroupsServiceHelpers with Mess < nl > val messagingService = messaging . MessagingServiceImpl ( mediator ) < nl > implicit val service = new GroupsServiceImpl ( bucketName , groupInviteConfig ) < nl > implicit val authService = buildAuthService ( ) < nl > - implicit val ec = system . dispatcher < nl > < nl > def e1 ( ) = { < nl > val ( user1 , authId1 , _ ) = createUser ( ) < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > index 7264756 . . 426cae1 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > @ @ - 50 , 7 + 50 , 6 @ @ class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceHelpers < nl > implicit val service = messaging . MessagingServiceImpl ( mediator ) < nl > implicit val groupsService = new GroupsServiceImpl ( bucketName , groupInviteConfig ) < nl > implicit val authService = buildAuthService ( ) < nl > - implicit val ec = system . dispatcher < nl > < nl > object s { < nl > val ( user1 , authId1 , _ ) = createUser ( ) < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala < nl > index f7ec834 . . 0967195 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala < nl > @ @ - 50 , 7 + 50 , 6 @ @ class SequenceServiceSpec extends BaseAppSuite ( { < nl > implicit val service = new sequence . SequenceServiceImpl < nl > implicit val msgService = messaging . MessagingServiceImpl ( mediator ) < nl > implicit val authService = buildAuthService ( ) < nl > - implicit val ec = system . dispatcher < nl > < nl > import SeqUpdatesManager . _ < nl > < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ServiceSpecHelpers . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ServiceSpecHelpers . scala < nl > index d79fe37 . . 0405f4f 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ServiceSpecHelpers . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ServiceSpecHelpers . scala < nl > @ @ - 10 , 8 + 10 , 10 @ @ import eu . codearte . jfairy . Fairy < nl > import org . scalatest . Suite < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > + import im . actor . api . rpc . auth . AuthService < nl > import im . actor . api . { rpc ⇒ api } < nl > import im . actor . server . api . rpc . RpcApiService < nl > + import im . actor . server . api . rpc . service . auth . AuthServiceImpl < nl > import im . actor . server . models < nl > import im . actor . server . persist < nl > import im . actor . server . presences . { GroupPresenceManagerRegion , PresenceManagerRegion } < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala b / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > index 5cbf88f . . 3e649b3 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > @ @ - 61 , 8 + 61 , 6 @ @ class HttpApiFrontendSpec extends BaseAppSuite with GroupsServiceHelpers { < nl > implicit val authService = buildAuthService ( ) < nl > implicit val groupsService = new GroupsServiceImpl ( " " , groupInviteConfig ) < nl > < nl > - implicit val ec = system . dispatcher < nl > - < nl > object t { < nl > val ( user1 , authId1 , _ ) = createUser ( ) < nl > val ( user2 , authId2 , _ ) = createUser ( ) < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala b / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala < nl > index 6de22f7 . . f2717ca 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala < nl > @ @ - 38 , 7 + 38 , 6 @ @ class WebhookHandlerSpec extends BaseAppSuite with GroupsServiceHelpers with Mes < nl > < nl > implicit val groupsService = new GroupsServiceImpl ( " " , groupInviteConfig ) < nl > implicit val authService = buildAuthService ( ) < nl > - implicit val ec = system . dispatcher < nl > < nl > object t { < nl > val ( user1 , authId1 , _ ) = createUser ( ) < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / notifications / UnreadWatcherGroupSpec . scala b / actor - tests / src / test / scala / im / actor / server / notifications / UnreadWatcherGroupSpec . scala < nl > index a9e2219 . . c828c79 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / notifications / UnreadWatcherGroupSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / notifications / UnreadWatcherGroupSpec . scala < nl > @ @ - 39 , 7 + 39 , 6 @ @ class UnreadWatcherGroupSpec extends BaseAppSuite with GroupsServiceHelpers { < nl > < nl > implicit val sessionRegion = buildSessionRegionProxy ( ) < nl > implicit val authService = buildAuthService ( ) < nl > - implicit val ec = system . dispatcher < nl > < nl > implicit val notifier = new Notifier { < nl > def processTask ( task : Notification ) = ( ) < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / notifications / UnreadWatcherPrivateSpec . scala b / actor - tests / src / test / scala / im / actor / server / notifications / UnreadWatcherPrivateSpec . scala < nl > index 107eaa5 . . d25bc6a 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / notifications / UnreadWatcherPrivateSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / notifications / UnreadWatcherPrivateSpec . scala < nl > @ @ - 37 , 7 + 37 , 6 @ @ class UnreadWatcherPrivateSpec extends BaseAppSuite with GroupsServiceHelpers { < nl > < nl > implicit val sessionRegion = buildSessionRegionProxy ( ) < nl > implicit val authService = buildAuthService ( ) < nl > - implicit val ec = system . dispatcher < nl > < nl > implicit val notifier = new Notifier { < nl > def processTask ( task : Notification ) = ( ) < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / util / UserUtilsSpec . scala b / actor - tests / src / test / scala / im / actor / server / util / UserUtilsSpec . scala < nl > new file mode 100644 < nl > index 0000000 . . e5b5637 < nl > - - - / dev / null < nl > + + + b / actor - tests / src / test / scala / im / actor / server / util / UserUtilsSpec . scala < nl > @ @ - 0 , 0 + 1 , 30 @ @ < nl > + package im . actor . server . util < nl > + < nl > + import scala . language . postfixOps < nl > + < nl > + import im . actor . api . rpc . auth . AuthService < nl > + import im . actor . api . rpc . users . User < nl > + import im . actor . server . { ImplicitRegions , BaseAppSuite } < nl > + < nl > + class UserUtilsSpec extends BaseAppSuite with ImplicitRegions { < nl > + < nl > + import UserUtils . _ < nl > + < nl > + it should " generate proper User struct " in e1 < nl > + < nl > + implicit val authService : AuthService = buildAuthService ( ) < nl > + < nl > + val ( users , authIds , phones ) = < nl > + Seq ( createUser ( ) , createUser ( ) ) . foldLeft ( Seq . empty [ User ] , Seq . empty [ Long ] , Seq . empty [ Long ] ) { < nl > + case ( ( uacc , aacc , pacc ) , ( u , a , p ) ) ⇒ < nl > + ( uacc : + u , aacc : + a , pacc : + p ) < nl > + } < nl > + < nl > + val userIds = users map ( _ . id ) toSet < nl > + < nl > + def e1 ( ) = { < nl > + val ( requestingUser , requestingAuthId , _ ) = createUser ( ) < nl > + < nl > + val structs = userStructs ( userIds , requestingUser . id , requestingAuthId ) < nl > + } < nl > + } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 index 5815768 . . ce295a8 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 @ @ - 104 , 7 + 104 , 7 @ @ final class SimpleServerE2eSpec extends ActorSuite ( 
 
 val messageId = Random . nextLong ( ) 
 
 - val requestBytes = RequestCodec . encode ( Request ( RequestGetDifference ( 999 , Array ( ) ) ) ) . require 
 + val requestBytes = RequestCodec . encode ( Request ( RequestGetDifference ( 999 , Array ( ) , Vector . empty ) ) ) . require 
 val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , ProtoRpcRequest ( requestBytes ) ) ) . require 
 val mtPackage = MTPackage ( authId , sessionId , mbBytes ) 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala 
 index d45b646 . . 7e097a1 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala 
 @ @ - 1020 , 8 + 1020 , 8 @ @ final class GroupsServiceSpec 
 } 
 } 
 
 - val user1Seq = whenReady ( sequenceService . jhandleGetState ( clientData1 ) ) ( _ . toOption . get . seq ) 
 - val user2Seq = whenReady ( sequenceService . jhandleGetState ( clientData2 ) ) ( _ . toOption . get . seq ) 
 + val user1Seq = whenReady ( sequenceService . jhandleGetState ( Vector . empty , clientData1 ) ) ( _ . toOption . get . seq ) 
 + val user2Seq = whenReady ( sequenceService . jhandleGetState ( Vector . empty , clientData2 ) ) ( _ . toOption . get . seq ) 
 
 { 
 implicit val clientData = clientData2 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingReadsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingReadsSpec . scala 
 index 3362a86 . . bd48cc9 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingReadsSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingReadsSpec . scala 
 @ @ - 69 , 7 + 69 , 7 @ @ class MessagingReadsSpec 
 dialog . lastReadAt shouldEqual new DateTime ( 0 ) 
 dialog . ownerLastReadAt shouldEqual new DateTime ( 0 ) 
 
 - val seq = whenReady ( sequenceService . handleGetState ( ) ) { 
 + val seq = whenReady ( sequenceService . handleGetState ( Vector . empty ) ) { 
 _ . toOption . get . seq 
 } 
 
 @ @ - 127 , 7 + 127 , 7 @ @ class MessagingReadsSpec 
 dialog . lastReadAt shouldEqual new DateTime ( 0 ) 
 dialog . ownerLastReadAt shouldEqual new DateTime ( 0 ) 
 
 - val currentSeq = whenReady ( sequenceService . handleGetState ( ) ) { _ . toOption . get . seq } 
 + val currentSeq = whenReady ( sequenceService . handleGetState ( Vector . empty ) ) { _ . toOption . get . seq } 
 
 whenReady ( service . handleMessageRead ( user2OutPeer , messageDate ) ) ( identity ) 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 index e4722dc . . 6c02087 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 @ @ - 381 , 7 + 381 , 7 @ @ final class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceH 
 Thread . sleep ( 300 ) 
 
 val ResponseSeq ( seq , state ) = { 
 - whenReady ( sequenceService . handleGetState ( ) ) { resp ⇒ 
 + whenReady ( sequenceService . handleGetState ( Vector . empty ) ) { resp ⇒ 
 resp . toOption . get 
 } 
 } 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / RawServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / RawServiceSpec . scala 
 index 20c4246 . . 4dbfe5d 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / RawServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / RawServiceSpec . scala 
 @ @ - 4 , 8 + 4 , 7 @ @ import akka . actor . ActorSystem 
 import cats . data . Xor 
 import im . actor . api . rpc . _ 
 import im . actor . api . rpc . collections . _ 
 - import im . actor . api . rpc . raw . { RawApiService , MapStyleRawApiService } 
 - import im . actor . rpc . raw . RawApiService 
 + import im . actor . api . rpc . raw . { RawApiService , MapStyleRawApiService } 
 import im . actor . server . api . rpc . RawApiExtension 
 import im . actor . server . api . rpc . service . raw . RawServiceImpl 
 import im . actor . server . { BaseAppSuite , ImplicitAuthService , ImplicitSessionRegion } 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala 
 index 3491bd9 . . e466cef 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala 
 @ @ - 6 , 7 + 6 , 7 @ @ import im . actor . api . rpc . _ 
 import im . actor . api . rpc . messaging . { ApiTextMessage , UpdateMessageContentChanged } 
 import im . actor . api . rpc . misc . ResponseSeq 
 import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } 
 - import im . actor . api . rpc . sequence . { ApiDifferenceUpdate , ResponseGetDifference } 
 + import im . actor . api . rpc . sequence . { ApiUpdateContainer , ApiDifferenceUpdate , ResponseGetDifference } 
 import im . actor . server . _ 
 import im . actor . server . api . rpc . service . sequence . SequenceServiceConfig 
 import im . actor . server . sequence . SeqUpdatesExtension 
 @ @ - 41 , 7 + 41 , 7 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { 
 val sessionId = createSessionId ( ) 
 implicit val clientData = ClientData ( authId , sessionId , Some ( AuthData ( user . id , authSid ) ) ) 
 
 - whenReady ( service . handleGetState ( ) ) { res ⇒ 
 + whenReady ( service . handleGetState ( Vector . empty ) ) { res ⇒ 
 res should matchPattern { case Ok ( ResponseSeq ( 0 , _ ) ) ⇒ } 
 } 
 } 
 @ @ - 69 , 12 + 69 , 12 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { 
 seqUpdExt . deliverSingleUpdate ( user . id , update ) 
 } ) , 10 . seconds ) 
 
 - var totalUpdates : Seq [ ApiDifferenceUpdate ] = Seq . empty 
 + var totalUpdates : Seq [ ApiUpdateContainer ] = Seq . empty 
 
 - val ( seq1 , state1 ) = whenReady ( service . handleGetDifference ( 0 , Array . empty ) ) { res ⇒ 
 + val ( seq1 , state1 ) = whenReady ( service . handleGetDifference ( 0 , Array . empty , Vector . empty ) ) { res ⇒ 
 val diff = res . toOption . get 
 inside ( res ) { 
 - case Ok ( ResponseGetDifference ( seq , state , users , updates , needMore , groups ) ) ⇒ 
 + case Ok ( ResponseGetDifference ( seq , state , users , updates , needMore , groups , _ , _ , _ ) ) ⇒ 
 println ( user2 . id ) 
 println ( updates . map ( _ . update . length ) ) 
 updates . map ( _ . toByteArray . length ) . sum should be < = withError ( config . maxDifferenceSize ) 
 @ @ - 85 , 10 + 85 , 10 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { 
 ( diff . seq , diff . state ) 
 } 
 
 - val ( seq2 , state2 ) = whenReady ( service . handleGetDifference ( seq1 , state1 ) ) { res ⇒ 
 + val ( seq2 , state2 ) = whenReady ( service . handleGetDifference ( seq1 , state1 , Vector . empty ) ) { res ⇒ 
 val diff = res . toOption . get 
 inside ( res ) { 
 - case Ok ( ResponseGetDifference ( seq , state , users , updates , needMore , groups ) ) ⇒ 
 + case Ok ( ResponseGetDifference ( seq , state , users , updates , needMore , groups , _ , _ , _ ) ) ⇒ 
 ( updates . map ( _ . toByteArray . length ) . sum < = withError ( config . maxDifferenceSize ) ) shouldEqual true 
 needMore shouldEqual true 
 totalUpdates + + = updates 
 @ @ - 97 , 10 + 97 , 10 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { 
 ( diff . seq , diff . state ) 
 } 
 
 - val finalSeq = whenReady ( service . handleGetDifference ( seq2 , state2 ) ) { res ⇒ 
 + val finalSeq = whenReady ( service . handleGetDifference ( seq2 , state2 , Vector . empty ) ) { res ⇒ 
 val diff = res . toOption . get 
 inside ( res ) { 
 - case Ok ( ResponseGetDifference ( seq , state , users , updates , needMore , groups ) ) ⇒ 
 + case Ok ( ResponseGetDifference ( seq , state , users , updates , needMore , groups , _ , _ , _ ) ) ⇒ 
 ( updates . map ( _ . toByteArray . length ) . sum < = withError ( config . maxDifferenceSize ) ) shouldEqual true 
 needMore shouldEqual false 
 totalUpdates + + = updates 
 @ @ - 142 , 9 + 142 , 9 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { 
 whenReady ( seqUpdExt . deliverSingleUpdate ( user . id , bigUpdate ) ) ( identity ) 
 
 / / expect first small update and needMore = = true 
 - val ( seq1 , state1 ) = whenReady ( service . handleGetDifference ( 0 , Array . empty ) ) { res ⇒ 
 + val ( seq1 , state1 ) = whenReady ( service . handleGetDifference ( 0 , Array . empty , Vector . empty ) ) { res ⇒ 
 inside ( res ) { 
 - case Ok ( ResponseGetDifference ( _ , _ , _ , updates , true , _ ) ) ⇒ 
 + case Ok ( ResponseGetDifference ( _ , _ , _ , updates , true , _ , _ , _ , _ ) ) ⇒ 
 updates . size shouldEqual 1 
 } 
 
 @ @ - 153 , 9 + 153 , 9 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { 
 } 
 
 / / expect first big update and needMore = = true 
 - val ( seq2 , state2 ) = whenReady ( service . handleGetDifference ( seq1 , state1 ) ) { res ⇒ 
 + val ( seq2 , state2 ) = whenReady ( service . handleGetDifference ( seq1 , state1 , Vector . empty ) ) { res ⇒ 
 inside ( res ) { 
 - case Ok ( ResponseGetDifference ( _ , _ , _ , updates , true , _ ) ) ⇒ 
 + case Ok ( ResponseGetDifference ( _ , _ , _ , updates , true , _ , _ , _ , _ ) ) ⇒ 
 updates . size shouldEqual 1 
 } 
 
 @ @ - 164 , 9 + 164 , 9 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { 
 } 
 
 / / expect second big update and needMore = = false 
 - whenReady ( service . handleGetDifference ( seq2 , state2 ) ) { res ⇒ 
 + whenReady ( service . handleGetDifference ( seq2 , state2 , Vector . empty ) ) { res ⇒ 
 inside ( res ) { 
 - case Ok ( ResponseGetDifference ( _ , _ , _ , updates , false , _ ) ) ⇒ 
 + case Ok ( ResponseGetDifference ( _ , _ , _ , updates , false , _ , _ , _ , _ ) ) ⇒ 
 updates . size shouldEqual 1 
 } 
 } 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala 
 index 8c48d5c . . d21d070 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala 
 @ @ - 85 , 7 + 85 , 7 @ @ class WebhookHandlerSpec 
 expectUpdate ( initSeq , classOf [ UpdateCountersChanged ] ) ( identity ) 
 } 
 
 - val ( seq1 , state1 ) = whenReady ( sequenceService . handleGetState ( ) ) { resp ⇒ 
 + val ( seq1 , state1 ) = whenReady ( sequenceService . handleGetState ( Vector . empty ) ) { resp ⇒ 
 val ResponseSeq ( seq , state ) = resp . toOption . get 
 ( seq , state ) 
 } 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 index a0a5c26 . . c373890 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 @ @ - 280 , 7 + 280 , 7 @ @ final class SessionResendSpec extends BaseSessionSpec ( 
 } 
 
 private def subscribeToSeq ( authId : Long , sessionId : Long , userId : Int ) ( implicit probe : TestProbe ) : Unit = { 
 - val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ) ) . require 
 + val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ( Vector . empty ) ) ) . require 
 
 val getSeqMessageId = Random . nextLong ( ) 
 sendMessageBox ( authId , sessionId , sessionRegion . ref , getSeqMessageId , ProtoRpcRequest ( encodedGetSeqRequest ) ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 index 369beba . . aaf0d01 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 @ @ - 171 , 7 + 171 , 7 @ @ final class SessionSpec extends BaseSessionSpec { 
 val authSession = Await . result ( db . run ( AuthSessionRepo . findByAuthId ( authId ) ) , 5 . seconds ) . get 
 implicit val clientData = AuthorizedClientData ( authId , sessionId , authResult . asInstanceOf [ RpcOk ] . response . asInstanceOf [ ResponseAuth ] . user . id , authSession . id ) 
 
 - val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ) ) . require 
 + val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ( Vector . empty ) ) ) . require 
 
 val thirdMessageId = Random . nextLong ( ) 
 sendMessageBox ( authId , sessionId , sessionRegion . ref , thirdMessageId , ProtoRpcRequest ( encodedGetSeqRequest ) ) 
 @ @ - 193 , 7 + 193 , 7 @ @ final class SessionSpec extends BaseSessionSpec { 
 
 implicit val clientData = AuthorizedClientData ( authId , sessionId , user . id , authSid ) 
 
 - val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ) ) . require 
 + val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ( Vector . empty ) ) ) . require 
 
 val thirdMessageId = Random . nextLong ( ) 
 sendMessageBox ( authId , sessionId , sessionRegion . ref , thirdMessageId , ProtoRpcRequest ( encodedGetSeqRequest ) )

NEAREST DIFF:
diff - - git a / actor - tests / src / test / scala / im / actor / server / BaseAppSuite . scala b / actor - tests / src / test / scala / im / actor / server / BaseAppSuite . scala 
 index bdf1de6 . . c894ba9 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / BaseAppSuite . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / BaseAppSuite . scala 
 @ @ - 1 , 11 + 1 , 15 @ @ 
 package im . actor . server 
 
 + import scala . concurrent . ExecutionContext 
 + 
 import akka . actor . ActorSystem 
 import akka . contrib . pattern . DistributedPubSubExtension 
 import akka . stream . ActorFlowMaterializer 
 import org . scalatest . concurrent . ScalaFutures 
 import org . scalatest . time . { Seconds , Span } 
 import org . scalatest . { FlatSpecLike , Matchers } 
 + import slick . driver . PostgresDriver 
 + import slick . jdbc . JdbcDataSource 
 
 import im . actor . server . api . ActorSpecHelpers 
 import im . actor . server . api . rpc . service . ServiceSpecHelpers 
 @ @ - 21 , 8 + 25 , 10 @ @ abstract class BaseAppSuite ( _ system : ActorSystem = { ActorSpecification . createSy 
 with SqlSpecHelpers 
 with ServiceSpecHelpers 
 with ActorSpecHelpers { 
 - implicit lazy val ( ds , db ) = migrateAndInitDb ( ) 
 - implicit val flowMaterializer = ActorFlowMaterializer ( ) 
 + implicit lazy val ( ds : JdbcDataSource , db : PostgresDriver . api . Database ) = migrateAndInitDb ( ) 
 + implicit val flowMaterializer : ActorFlowMaterializer = ActorFlowMaterializer ( ) 
 + implicit lazy val ec : ExecutionContext = _ system . dispatcher 
 + 
 lazy val mediator = DistributedPubSubExtension ( system ) . mediator 
 
 override implicit def patienceConfig : PatienceConfig = 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / ImplicitRegions . scala b / actor - tests / src / test / scala / im / actor / server / ImplicitRegions . scala 
 new file mode 100644 
 index 0000000 . . 9bb15c0 
 - - - / dev / null 
 + + + b / actor - tests / src / test / scala / im / actor / server / ImplicitRegions . scala 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + package im . actor . server 
 + 
 + import akka . actor . { ActorRef , ActorSystem } 
 + import slick . driver . PostgresDriver . api . Database 
 + 
 + import im . actor . server . api . ActorSpecHelpers 
 + import im . actor . server . push . SeqUpdatesManagerRegion 
 + import im . actor . server . session . { Session , SessionRegion } 
 + import im . actor . server . social . { SocialManagerRegion , SocialManager } 
 + 
 + trait ImplicitSeqUpdatesManagerRegion extends ActorSpecHelpers { 
 + implicit val system : ActorSystem 
 + implicit val db : Database 
 + 
 + implicit lazy val seqUpdManagerRegion : SeqUpdatesManagerRegion = buildSeqUpdManagerRegion ( ) 
 + } 
 + 
 + trait ImplicitSocialManagerRegion { 
 + implicit val system : ActorSystem 
 + implicit val db : Database 
 + 
 + implicit lazy val socialManagerRegion : SocialManagerRegion = SocialManager . startRegion ( ) 
 + } 
 + 
 + trait ImplicitSessionRegionProxy { 
 + implicit val system : ActorSystem 
 + 
 + val mediator : ActorRef 
 + 
 + implicit lazy val sessionRegion : SessionRegion = Session . startRegionProxy ( ) 
 + } 
 + 
 + trait ImplicitRegions 
 + extends ImplicitSeqUpdatesManagerRegion 
 + with ImplicitSessionRegionProxy 
 + with ImplicitSocialManagerRegion 
 \ No newline at end of file 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AvatarsSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AvatarsSpec . scala 
 index 5004187 . . 4be6f18 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AvatarsSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AvatarsSpec . scala 
 @ @ - 28 , 8 + 28 , 6 @ @ class AvatarsSpec extends BaseAppSuite { 
 
 import FileUtils . _ 
 
 - implicit val ec = system . dispatcher 
 - 
 implicit val sessionRegion = buildSessionRegionProxy ( ) 
 
 implicit val seqUpdManagerRegion = buildSeqUpdManagerRegion ( ) 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala 
 index 5bf1037 . . 722467e 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala 
 @ @ - 67 , 7 + 67 , 6 @ @ class GroupsServiceSpec extends BaseAppSuite with GroupsServiceHelpers with Mess 
 val messagingService = messaging . MessagingServiceImpl ( mediator ) 
 implicit val service = new GroupsServiceImpl ( bucketName , groupInviteConfig ) 
 implicit val authService = buildAuthService ( ) 
 - implicit val ec = system . dispatcher 
 
 def e1 ( ) = { 
 val ( user1 , authId1 , _ ) = createUser ( ) 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 index 7264756 . . 426cae1 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 @ @ - 50 , 7 + 50 , 6 @ @ class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceHelpers 
 implicit val service = messaging . MessagingServiceImpl ( mediator ) 
 implicit val groupsService = new GroupsServiceImpl ( bucketName , groupInviteConfig ) 
 implicit val authService = buildAuthService ( ) 
 - implicit val ec = system . dispatcher 
 
 object s { 
 val ( user1 , authId1 , _ ) = createUser ( ) 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala 
 index f7ec834 . . 0967195 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala 
 @ @ - 50 , 7 + 50 , 6 @ @ class SequenceServiceSpec extends BaseAppSuite ( { 
 implicit val service = new sequence . SequenceServiceImpl 
 implicit val msgService = messaging . MessagingServiceImpl ( mediator ) 
 implicit val authService = buildAuthService ( ) 
 - implicit val ec = system . dispatcher 
 
 import SeqUpdatesManager . _ 
 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ServiceSpecHelpers . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ServiceSpecHelpers . scala 
 index d79fe37 . . 0405f4f 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ServiceSpecHelpers . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ServiceSpecHelpers . scala 
 @ @ - 10 , 8 + 10 , 10 @ @ import eu . codearte . jfairy . Fairy 
 import org . scalatest . Suite 
 import slick . driver . PostgresDriver . api . _ 
 
 + import im . actor . api . rpc . auth . AuthService 
 import im . actor . api . { rpc ⇒ api } 
 import im . actor . server . api . rpc . RpcApiService 
 + import im . actor . server . api . rpc . service . auth . AuthServiceImpl 
 import im . actor . server . models 
 import im . actor . server . persist 
 import im . actor . server . presences . { GroupPresenceManagerRegion , PresenceManagerRegion } 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala b / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 index 5cbf88f . . 3e649b3 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 @ @ - 61 , 8 + 61 , 6 @ @ class HttpApiFrontendSpec extends BaseAppSuite with GroupsServiceHelpers { 
 implicit val authService = buildAuthService ( ) 
 implicit val groupsService = new GroupsServiceImpl ( " " , groupInviteConfig ) 
 
 - implicit val ec = system . dispatcher 
 - 
 object t { 
 val ( user1 , authId1 , _ ) = createUser ( ) 
 val ( user2 , authId2 , _ ) = createUser ( ) 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala b / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala 
 index 6de22f7 . . f2717ca 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala 
 @ @ - 38 , 7 + 38 , 6 @ @ class WebhookHandlerSpec extends BaseAppSuite with GroupsServiceHelpers with Mes 
 
 implicit val groupsService = new GroupsServiceImpl ( " " , groupInviteConfig ) 
 implicit val authService = buildAuthService ( ) 
 - implicit val ec = system . dispatcher 
 
 object t { 
 val ( user1 , authId1 , _ ) = createUser ( ) 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / notifications / UnreadWatcherGroupSpec . scala b / actor - tests / src / test / scala / im / actor / server / notifications / UnreadWatcherGroupSpec . scala 
 index a9e2219 . . c828c79 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / notifications / UnreadWatcherGroupSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / notifications / UnreadWatcherGroupSpec . scala 
 @ @ - 39 , 7 + 39 , 6 @ @ class UnreadWatcherGroupSpec extends BaseAppSuite with GroupsServiceHelpers { 
 
 implicit val sessionRegion = buildSessionRegionProxy ( ) 
 implicit val authService = buildAuthService ( ) 
 - implicit val ec = system . dispatcher 
 
 implicit val notifier = new Notifier { 
 def processTask ( task : Notification ) = ( ) 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / notifications / UnreadWatcherPrivateSpec . scala b / actor - tests / src / test / scala / im / actor / server / notifications / UnreadWatcherPrivateSpec . scala 
 index 107eaa5 . . d25bc6a 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / notifications / UnreadWatcherPrivateSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / notifications / UnreadWatcherPrivateSpec . scala 
 @ @ - 37 , 7 + 37 , 6 @ @ class UnreadWatcherPrivateSpec extends BaseAppSuite with GroupsServiceHelpers { 
 
 implicit val sessionRegion = buildSessionRegionProxy ( ) 
 implicit val authService = buildAuthService ( ) 
 - implicit val ec = system . dispatcher 
 
 implicit val notifier = new Notifier { 
 def processTask ( task : Notification ) = ( ) 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / util / UserUtilsSpec . scala b / actor - tests / src / test / scala / im / actor / server / util / UserUtilsSpec . scala 
 new file mode 100644 
 index 0000000 . . e5b5637 
 - - - / dev / null 
 + + + b / actor - tests / src / test / scala / im / actor / server / util / UserUtilsSpec . scala 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + package im . actor . server . util 
 + 
 + import scala . language . postfixOps 
 + 
 + import im . actor . api . rpc . auth . AuthService 
 + import im . actor . api . rpc . users . User 
 + import im . actor . server . { ImplicitRegions , BaseAppSuite } 
 + 
 + class UserUtilsSpec extends BaseAppSuite with ImplicitRegions { 
 + 
 + import UserUtils . _ 
 + 
 + it should " generate proper User struct " in e1 
 + 
 + implicit val authService : AuthService = buildAuthService ( ) 
 + 
 + val ( users , authIds , phones ) = 
 + Seq ( createUser ( ) , createUser ( ) ) . foldLeft ( Seq . empty [ User ] , Seq . empty [ Long ] , Seq . empty [ Long ] ) { 
 + case ( ( uacc , aacc , pacc ) , ( u , a , p ) ) ⇒ 
 + ( uacc : + u , aacc : + a , pacc : + p ) 
 + } 
 + 
 + val userIds = users map ( _ . id ) toSet 
 + 
 + def e1 ( ) = { 
 + val ( requestingUser , requestingAuthId , _ ) = createUser ( ) 
 + 
 + val structs = userStructs ( userIds , requestingUser . id , requestingAuthId ) 
 + } 
 + } 
 \ No newline at end of file
