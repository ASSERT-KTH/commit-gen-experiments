BLEU SCORE: 0.16515821590069035

TEST MSG: wip ( android ) : render local video
GENERATED MSG: wip ( adnroid ) : video calls

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallActivity . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallActivity . java < nl > index 02600a8 . . 377f1e7 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallActivity . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallActivity . java < nl > @ @ - 25 , 6 + 25 , 9 @ @ public class CallActivity extends BaseFragmentActivity { < nl > protected void onCreate ( Bundle savedInstanceState ) { < nl > super . onCreate ( savedInstanceState ) ; < nl > < nl > + Thread . setDefaultUncaughtExceptionHandler ( < nl > + new UnhandledExceptionHandler ( this ) ) ; < nl > + < nl > getSupportActionBar ( ) . setTitle ( " Call " ) ; < nl > getSupportActionBar ( ) . hide ( ) ; < nl > getSupportActionBar ( ) . setBackgroundDrawable ( new ColorDrawable ( Color . TRANSPARENT ) ) ; < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > index a8e2b5a . . 814f4b2 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > @ @ - 9 , 7 + 9 , 6 @ @ import android . content . Context ; < nl > import android . content . Intent ; < nl > import android . content . pm . PackageManager ; < nl > import android . graphics . Color ; < nl > - import android . graphics . Point ; < nl > import android . graphics . drawable . GradientDrawable ; < nl > import android . media . AudioManager ; < nl > import android . media . Ringtone ; < nl > @ @ - 31 , 7 + 30 , 9 @ @ import android . widget . FrameLayout ; < nl > import android . widget . ImageButton ; < nl > import android . widget . TextView ; < nl > < nl > + import org . webrtc . EglBase ; < nl > import org . webrtc . RendererCommon ; < nl > + import org . webrtc . SurfaceViewRenderer ; < nl > import org . webrtc . VideoRenderer ; < nl > import org . webrtc . VideoRendererGui ; < nl > import org . webrtc . VideoSource ; < nl > @ @ - 64 , 7 + 65 , 6 @ @ import im . actor . runtime . mvvm . ValueChangedListener ; < nl > import im . actor . runtime . mvvm . ValueModel ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . R ; < nl > - import im . actor . sdk . controllers . calls . view . AppRTCGLView ; < nl > import im . actor . sdk . controllers . calls . view . CallAvatarLayerAnimator ; < nl > import im . actor . sdk . controllers . calls . view . TimerActor ; < nl > import im . actor . sdk . controllers . fragment . BaseFragment ; < nl > @ @ - 108 , 7 + 108 , 9 @ @ public class CallFragment extends BaseFragment { < nl > private View layer2 ; < nl > private View layer3 ; < nl > private VideoSource source ; < nl > - private GLSurfaceView vsv ; < nl > + private boolean renderredAdded = false ; < nl > + private EglBase rootEglBase ; < nl > + private SurfaceViewRenderer localRender ; < nl > < nl > public CallFragment ( ) { < nl > < nl > @ @ - 308 , 43 + 310 , 36 @ @ public class CallFragment extends BaseFragment { < nl > addTv . setTextColor ( getResources ( ) . getColor ( R . color . picker _ grey ) ) ; < nl > add . setTint ( getResources ( ) . getColor ( R . color . picker _ grey ) ) ; < nl > < nl > - / / AndroidWebRTCRuntimeProvider . bindPeerConnection ( new AndroidWebRTCRuntimeProvider . PeerConnectionCallback ( ) { < nl > - / / @ Override < nl > - / / public void onPeerConncetionAvailable ( AndroidPeerConnection peerConnection ) { < nl > - / / peerConnection . bind ( new AndroidPeerConnection . OwnStreamCallback ( ) { < nl > - / / @ Override < nl > - / / public void onAvailable ( AndroidMediaStream stream ) { < nl > - / / if ( stream . getVideoTrack ( ) ! = null ) { < nl > - / / source = stream . getVideoSource ( ) ; < nl > - / / vsv = new GLSurfaceView ( getActivity ( ) ) ; < nl > - / / VideoRendererGui . setView ( vsv , ( ) - > { < nl > - / / / / VideoRenderer . Callbacks remoteRender = VideoRendererGui . createGuiRenderer ( 0 , 0 , 100 , 100 , RendererCommon . ScalingType . SCALE _ ASPECT _ FIT , false ) ; < nl > - / / VideoRenderer . Callbacks localRender = VideoRendererGui . create ( 0 , 0 , 100 , 100 , RendererCommon . ScalingType . SCALE _ ASPECT _ FIT , false ) ; < nl > - / / < nl > - / / stream . getVideoTrack ( ) . addRenderer ( new VideoRenderer ( localRender ) ) ; < nl > - / / < nl > - / / cont . post ( new Runnable ( ) { < nl > - / / @ Override < nl > - / / public void run ( ) { < nl > - / / cont . addView ( vsv , Screen . getWidth ( ) / 2 , Screen . getHeight ( ) / 2 ) ; < nl > - / / < nl > - / / } < nl > - / / } ) ; < nl > - / / < nl > - / / < nl > - / / } ) ; < nl > - / / < nl > - / / < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / @ Override < nl > - / / public void onRemoved ( ) { < nl > - / / < nl > - / / } < nl > - / / } ) ; < nl > - / / } < nl > - / / } ) ; < nl > + AndroidWebRTCRuntimeProvider . bindPeerConnection ( new AndroidWebRTCRuntimeProvider . PeerConnectionCallback ( ) { < nl > + @ Override < nl > + public void onPeerConncetionAvailable ( AndroidPeerConnection peerConnection ) { < nl > + peerConnection . bind ( new AndroidPeerConnection . OwnStreamCallback ( ) { < nl > + @ Override < nl > + public void onAvailable ( AndroidMediaStream stream ) { < nl > + if ( stream . getVideoTrack ( ) ! = null ) { < nl > + source = stream . getVideoSource ( ) ; < nl > + rootEglBase = EglBase . create ( ) ; < nl > + localRender = new SurfaceViewRenderer ( getActivity ( ) ) ; < nl > + localRender . init ( rootEglBase . getEglBaseContext ( ) , null ) ; < nl > + < nl > + stream . getVideoTrack ( ) . addRenderer ( new VideoRenderer ( localRender ) ) ; < nl > + < nl > + getActivity ( ) . runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + container . addView ( localRender , Screen . dp ( 200 ) , Screen . dp ( 200 ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void onRemoved ( ) { < nl > + < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > < nl > if ( call ! = null ) { < nl > call . getIsMuted ( ) . subscribe ( new ValueChangedListener < Boolean > ( ) { < nl > @ @ - 597 , 9 + 592 , 6 @ @ public class CallFragment extends BaseFragment { < nl > @ Override < nl > public void onPause ( ) { < nl > super . onPause ( ) ; < nl > - / / if ( vsv ! = null ) { < nl > - / / vsv . onPause ( ) ; < nl > - / / } < nl > if ( source ! = null ) { < nl > source . stop ( ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / UnhandledExceptionHandler . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / UnhandledExceptionHandler . java < nl > new file mode 100644 < nl > index 0000000 . . 17aac35 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / UnhandledExceptionHandler . java < nl > @ @ - 0 , 0 + 1 , 105 @ @ < nl > + / * < nl > + * libjingle < nl > + * Copyright 2013 , Google Inc . < nl > + * < nl > + * Redistribution and use in source and binary forms , with or without < nl > + * modification , are permitted provided that the following conditions are met : < nl > + * < nl > + * 1 . Redistributions of source code must retain the above copyright notice , < nl > + * this list of conditions and the following disclaimer . < nl > + * 2 . Redistributions in binary form must reproduce the above copyright notice , < nl > + * this list of conditions and the following disclaimer in the documentation < nl > + * and / or other materials provided with the distribution . < nl > + * 3 . The name of the author may not be used to endorse or promote products < nl > + * derived from this software without specific prior written permission . < nl > + * < nl > + * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ` ` AS IS ' ' AND ANY EXPRESS OR IMPLIED < nl > + * WARRANTIES , INCLUDING , BUT NOT LIMITED TO , THE IMPLIED WARRANTIES OF < nl > + * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED . IN NO < nl > + * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT , INDIRECT , INCIDENTAL , < nl > + * SPECIAL , EXEMPLARY , OR CONSEQUENTIAL DAMAGES ( INCLUDING , BUT NOT LIMITED TO , < nl > + * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES ; LOSS OF USE , DATA , OR PROFITS ; < nl > + * OR BUSINESS INTERRUPTION ) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY , < nl > + * WHETHER IN CONTRACT , STRICT LIABILITY , OR TORT ( INCLUDING NEGLIGENCE OR < nl > + * OTHERWISE ) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE , EVEN IF < nl > + * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE . < nl > + * / < nl > + < nl > + package im . actor . sdk . controllers . calls ; < nl > + < nl > + import android . app . Activity ; < nl > + import android . app . AlertDialog ; < nl > + import android . content . DialogInterface ; < nl > + import android . util . Log ; < nl > + import android . util . TypedValue ; < nl > + import android . widget . ScrollView ; < nl > + import android . widget . TextView ; < nl > + < nl > + import java . io . PrintWriter ; < nl > + import java . io . StringWriter ; < nl > + < nl > + / * * < nl > + * Singleton helper : install a default unhandled exception handler which shows < nl > + * an informative dialog and kills the app . Useful for apps whose < nl > + * error - handling consists of throwing RuntimeExceptions . < nl > + * NOTE : almost always more useful to < nl > + * Thread . setDefaultUncaughtExceptionHandler ( ) rather than < nl > + * Thread . setUncaughtExceptionHandler ( ) , to apply to background threads as well . < nl > + * / < nl > + public class UnhandledExceptionHandler < nl > + implements Thread . UncaughtExceptionHandler { < nl > + private static final String TAG = " AppRTCDemoActivity " ; < nl > + private final Activity activity ; < nl > + < nl > + public UnhandledExceptionHandler ( final Activity activity ) { < nl > + this . activity = activity ; < nl > + } < nl > + < nl > + public void uncaughtException ( Thread unusedThread , final Throwable e ) { < nl > + activity . runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + String title = " Fatal error : " + getTopLevelCauseMessage ( e ) ; < nl > + String msg = getRecursiveStackTrace ( e ) ; < nl > + TextView errorView = new TextView ( activity ) ; < nl > + errorView . setText ( msg ) ; < nl > + errorView . setTextSize ( TypedValue . COMPLEX _ UNIT _ SP , 8 ) ; < nl > + ScrollView scrollingContainer = new ScrollView ( activity ) ; < nl > + scrollingContainer . addView ( errorView ) ; < nl > + Log . e ( TAG , title + " \ n \ n " + msg ) ; < nl > + DialogInterface . OnClickListener listener = < nl > + new DialogInterface . OnClickListener ( ) { < nl > + @ Override < nl > + public void onClick ( < nl > + DialogInterface dialog , int which ) { < nl > + dialog . dismiss ( ) ; < nl > + System . exit ( 1 ) ; < nl > + } < nl > + } ; < nl > + AlertDialog . Builder builder = < nl > + new AlertDialog . Builder ( activity ) ; < nl > + builder < nl > + . setTitle ( title ) < nl > + . setView ( scrollingContainer ) < nl > + . setPositiveButton ( " Exit " , listener ) . show ( ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + / / Returns the Message attached to the original Cause of | t | . < nl > + private static String getTopLevelCauseMessage ( Throwable t ) { < nl > + Throwable topLevelCause = t ; < nl > + while ( topLevelCause . getCause ( ) ! = null ) { < nl > + topLevelCause = topLevelCause . getCause ( ) ; < nl > + } < nl > + return topLevelCause . getMessage ( ) ; < nl > + } < nl > + < nl > + / / Returns a human - readable String of the stacktrace in | t | , recursively < nl > + / / through all Causes that led to | t | . < nl > + private static String getRecursiveStackTrace ( Throwable t ) { < nl > + StringWriter writer = new StringWriter ( ) ; < nl > + t . printStackTrace ( new PrintWriter ( writer ) ) ; < nl > + return writer . toString ( ) ; < nl > + } < nl > + }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > index c421f91 . . a8e2b5a 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > @ @ - 9 , 11 + 9 , 13 @ @ import android . content . Context ; < nl > import android . content . Intent ; < nl > import android . content . pm . PackageManager ; < nl > import android . graphics . Color ; < nl > + import android . graphics . Point ; < nl > import android . graphics . drawable . GradientDrawable ; < nl > import android . media . AudioManager ; < nl > import android . media . Ringtone ; < nl > import android . media . RingtoneManager ; < nl > import android . net . Uri ; < nl > + import android . opengl . GLSurfaceView ; < nl > import android . os . Bundle ; < nl > import android . os . PowerManager ; < nl > import android . os . Vibrator ; < nl > @ @ - 27 , 10 + 29 , 12 @ @ import android . view . WindowManager ; < nl > import android . widget . AdapterView ; < nl > import android . widget . FrameLayout ; < nl > import android . widget . ImageButton ; < nl > - import android . widget . ListView ; < nl > import android . widget . TextView ; < nl > < nl > + import org . webrtc . RendererCommon ; < nl > import org . webrtc . VideoRenderer ; < nl > + import org . webrtc . VideoRendererGui ; < nl > + import org . webrtc . VideoSource ; < nl > < nl > import java . text . DateFormat ; < nl > import java . text . SimpleDateFormat ; < nl > @ @ - 60 , 6 + 64 , 7 @ @ import im . actor . runtime . mvvm . ValueChangedListener ; < nl > import im . actor . runtime . mvvm . ValueModel ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . R ; < nl > + import im . actor . sdk . controllers . calls . view . AppRTCGLView ; < nl > import im . actor . sdk . controllers . calls . view . CallAvatarLayerAnimator ; < nl > import im . actor . sdk . controllers . calls . view . TimerActor ; < nl > import im . actor . sdk . controllers . fragment . BaseFragment ; < nl > @ @ - 102 , 6 + 107 , 8 @ @ public class CallFragment extends BaseFragment { < nl > private View layer1 ; < nl > private View layer2 ; < nl > private View layer3 ; < nl > + private VideoSource source ; < nl > + private GLSurfaceView vsv ; < nl > < nl > public CallFragment ( ) { < nl > < nl > @ @ - 301 , 6 + 308 , 44 @ @ public class CallFragment extends BaseFragment { < nl > addTv . setTextColor ( getResources ( ) . getColor ( R . color . picker _ grey ) ) ; < nl > add . setTint ( getResources ( ) . getColor ( R . color . picker _ grey ) ) ; < nl > < nl > + / / AndroidWebRTCRuntimeProvider . bindPeerConnection ( new AndroidWebRTCRuntimeProvider . PeerConnectionCallback ( ) { < nl > + / / @ Override < nl > + / / public void onPeerConncetionAvailable ( AndroidPeerConnection peerConnection ) { < nl > + / / peerConnection . bind ( new AndroidPeerConnection . OwnStreamCallback ( ) { < nl > + / / @ Override < nl > + / / public void onAvailable ( AndroidMediaStream stream ) { < nl > + / / if ( stream . getVideoTrack ( ) ! = null ) { < nl > + / / source = stream . getVideoSource ( ) ; < nl > + / / vsv = new GLSurfaceView ( getActivity ( ) ) ; < nl > + / / VideoRendererGui . setView ( vsv , ( ) - > { < nl > + / / / / VideoRenderer . Callbacks remoteRender = VideoRendererGui . createGuiRenderer ( 0 , 0 , 100 , 100 , RendererCommon . ScalingType . SCALE _ ASPECT _ FIT , false ) ; < nl > + / / VideoRenderer . Callbacks localRender = VideoRendererGui . create ( 0 , 0 , 100 , 100 , RendererCommon . ScalingType . SCALE _ ASPECT _ FIT , false ) ; < nl > + / / < nl > + / / stream . getVideoTrack ( ) . addRenderer ( new VideoRenderer ( localRender ) ) ; < nl > + / / < nl > + / / cont . post ( new Runnable ( ) { < nl > + / / @ Override < nl > + / / public void run ( ) { < nl > + / / cont . addView ( vsv , Screen . getWidth ( ) / 2 , Screen . getHeight ( ) / 2 ) ; < nl > + / / < nl > + / / } < nl > + / / } ) ; < nl > + / / < nl > + / / < nl > + / / } ) ; < nl > + / / < nl > + / / < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / @ Override < nl > + / / public void onRemoved ( ) { < nl > + / / < nl > + / / } < nl > + / / } ) ; < nl > + / / } < nl > + / / } ) ; < nl > + < nl > if ( call ! = null ) { < nl > call . getIsMuted ( ) . subscribe ( new ValueChangedListener < Boolean > ( ) { < nl > @ Override < nl > @ @ - 552 , 6 + 597 , 14 @ @ public class CallFragment extends BaseFragment { < nl > @ Override < nl > public void onPause ( ) { < nl > super . onPause ( ) ; < nl > + / / if ( vsv ! = null ) { < nl > + / / vsv . onPause ( ) ; < nl > + / / } < nl > + if ( source ! = null ) { < nl > + source . stop ( ) ; < nl > + } < nl > + < nl > + < nl > if ( call ! = null & & call . getState ( ) . get ( ) ! = CallState . ENDED ) { < nl > final NotificationCompat . Builder builder = new NotificationCompat . Builder ( getActivity ( ) ) ; < nl > builder . setAutoCancel ( true ) ; < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / view / AppRTCGLView . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / view / AppRTCGLView . java < nl > new file mode 100644 < nl > index 0000000 . . fae8039 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / view / AppRTCGLView . java < nl > @ @ - 0 , 0 + 1 , 58 @ @ < nl > + / * < nl > + * libjingle < nl > + * Copyright 2014 , Google Inc . < nl > + * < nl > + * Redistribution and use in source and binary forms , with or without < nl > + * modification , are permitted provided that the following conditions are met : < nl > + * < nl > + * 1 . Redistributions of source code must retain the above copyright notice , < nl > + * this list of conditions and the following disclaimer . < nl > + * 2 . Redistributions in binary form must reproduce the above copyright notice , < nl > + * this list of conditions and the following disclaimer in the documentation < nl > + * and / or other materials provided with the distribution . < nl > + * 3 . The name of the author may not be used to endorse or promote products < nl > + * derived from this software without specific prior written permission . < nl > + * < nl > + * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ` ` AS IS ' ' AND ANY EXPRESS OR IMPLIED < nl > + * WARRANTIES , INCLUDING , BUT NOT LIMITED TO , THE IMPLIED WARRANTIES OF < nl > + * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED . IN NO < nl > + * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT , INDIRECT , INCIDENTAL , < nl > + * SPECIAL , EXEMPLARY , OR CONSEQUENTIAL DAMAGES ( INCLUDING , BUT NOT LIMITED TO , < nl > + * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES ; LOSS OF USE , DATA , OR PROFITS ; < nl > + * OR BUSINESS INTERRUPTION ) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY , < nl > + * WHETHER IN CONTRACT , STRICT LIABILITY , OR TORT ( INCLUDING NEGLIGENCE OR < nl > + * OTHERWISE ) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE , EVEN IF < nl > + * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE . < nl > + * / < nl > + < nl > + package im . actor . sdk . controllers . calls . view ; < nl > + < nl > + import android . content . Context ; < nl > + import android . graphics . Point ; < nl > + import android . opengl . GLSurfaceView ; < nl > + < nl > + public class AppRTCGLView extends GLSurfaceView { < nl > + private Point screenDimensions ; < nl > + < nl > + public AppRTCGLView ( Context c , Point screenDimensions ) { < nl > + super ( c ) ; < nl > + this . screenDimensions = screenDimensions ; < nl > + } < nl > + < nl > + public void updateDisplaySize ( Point screenDimensions ) { < nl > + this . screenDimensions = screenDimensions ; < nl > + } < nl > + < nl > + @ Override < nl > + protected void onMeasure ( int unusedX , int unusedY ) { < nl > + / / Go big or go home ! < nl > + setMeasuredDimension ( screenDimensions . x , screenDimensions . y ) ; < nl > + } < nl > + < nl > + @ Override < nl > + protected void onAttachedToWindow ( ) { < nl > + super . onAttachedToWindow ( ) ; < nl > + setSystemUiVisibility ( SYSTEM _ UI _ FLAG _ HIDE _ NAVIGATION | < nl > + SYSTEM _ UI _ FLAG _ FULLSCREEN | SYSTEM _ UI _ FLAG _ IMMERSIVE _ STICKY ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / ActorSDKMessenger . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / ActorSDKMessenger . java < nl > index deb790d . . a4778ac 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / ActorSDKMessenger . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / ActorSDKMessenger . java < nl > @ @ - 15 , 6 + 15 , 7 @ @ public class ActorSDKMessenger { < nl > } < nl > < nl > public static MVVMCollection < User , UserVM > users ( ) { < nl > + ActorSDK . sharedActor ( ) . waitForReady ( ) ; < nl > return messenger ( ) . getUsers ( ) ; < nl > } < nl > < nl > @ @ - 23 , 6 + 24 , 7 @ @ public class ActorSDKMessenger { < nl > } < nl > < nl > public static int myUid ( ) { < nl > + ActorSDK . sharedActor ( ) . waitForReady ( ) ; < nl > return messenger ( ) . myUid ( ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidWebRTCRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidWebRTCRuntimeProvider . java < nl > index aee3326 . . 81b0cc6 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidWebRTCRuntimeProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidWebRTCRuntimeProvider . java < nl > @ @ - 25 , 6 + 25 , 8 @ @ public class AndroidWebRTCRuntimeProvider implements WebRTCRuntime { < nl > public static final PeerConnectionFactory FACTORY ; < nl > private static Object sVcLock = new Object ( ) ; < nl > private static Handler sVcHandler = null ; < nl > + private static PeerConnectionCallback connectionCallback ; < nl > + private static AndroidPeerConnection currentPeerConnection ; < nl > < nl > static { < nl > PeerConnectionFactory . initializeAndroidGlobals ( AndroidContext . getContext ( ) , true , true , true ) ; < nl > @ @ - 39 , 13 + 41 , 19 @ @ public class AndroidWebRTCRuntimeProvider implements WebRTCRuntime { < nl > } < nl > } < nl > < nl > + < nl > @ NotNull < nl > @ Override < nl > public Promise < WebRTCPeerConnection > createPeerConnection ( final WebRTCIceServer [ ] webRTCIceServers , final WebRTCSettings settings ) { < nl > return new Promise < > ( new PromiseFunc < WebRTCPeerConnection > ( ) { < nl > @ Override < nl > public void exec ( @ NonNull @ NotNull final PromiseResolver < WebRTCPeerConnection > resolver ) { < nl > - resolver . result ( new AndroidPeerConnection ( webRTCIceServers , settings ) ) ; < nl > + currentPeerConnection = new AndroidPeerConnection ( webRTCIceServers , settings ) ; < nl > + resolver . result ( currentPeerConnection ) ; < nl > + if ( connectionCallback ! = null ) { < nl > + connectionCallback . onPeerConncetionAvailable ( currentPeerConnection ) ; < nl > + connectionCallback = null ; < nl > + } < nl > < nl > } < nl > } ) ; < nl > @ @ - 75 , 4 + 83 , 27 @ @ public class AndroidWebRTCRuntimeProvider implements WebRTCRuntime { < nl > public static void postToHandler ( Runnable r ) { < nl > sVcHandler . post ( r ) ; < nl > } < nl > + < nl > + public AndroidPeerConnection getCurrentPeerConnection ( ) { < nl > + return currentPeerConnection ; < nl > + } < nl > + < nl > + public static void bindPeerConnection ( PeerConnectionCallback callback ) { < nl > + if ( currentPeerConnection ! = null ) { < nl > + callback . onPeerConncetionAvailable ( currentPeerConnection ) ; < nl > + } else { < nl > + connectionCallback = callback ; < nl > + } < nl > + } < nl > + < nl > + public void unbindPeerConnection ( ) { < nl > + if ( currentPeerConnection ! = null ) { < nl > + currentPeerConnection . unbind ( ) ; < nl > + } < nl > + currentPeerConnection = null ; < nl > + } < nl > + < nl > + public interface PeerConnectionCallback { < nl > + void onPeerConncetionAvailable ( AndroidPeerConnection peerConnection ) ; < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / webrtc / AndroidMediaStream . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / webrtc / AndroidMediaStream . java < nl > index 586f007 . . b00cd12 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / webrtc / AndroidMediaStream . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / webrtc / AndroidMediaStream . java < nl > @ @ - 1 , 9 + 1 , 14 @ @ < nl > package im . actor . runtime . android . webrtc ; < nl > < nl > + import android . media . MediaRecorder ; < nl > + < nl > import org . webrtc . AudioSource ; < nl > import org . webrtc . AudioTrack ; < nl > import org . webrtc . MediaConstraints ; < nl > import org . webrtc . MediaStream ; < nl > + import org . webrtc . VideoCapturer ; < nl > + import org . webrtc . VideoSource ; < nl > + import org . webrtc . VideoTrack ; < nl > < nl > import im . actor . runtime . android . AndroidWebRTCRuntimeProvider ; < nl > import im . actor . runtime . webrtc . WebRTCMediaStream ; < nl > @ @ - 11 , 10 + 16 , 12 @ @ import im . actor . runtime . webrtc . WebRTCMediaStream ; < nl > public class AndroidMediaStream implements WebRTCMediaStream { < nl > < nl > private AudioTrack audioTrack ; < nl > + private VideoTrack videoTrack ; < nl > private MediaStream stream ; < nl > private boolean isEnabled = false ; < nl > private boolean local ; < nl > private boolean diposed = false ; < nl > + private VideoSource videoSource ; < nl > < nl > public AndroidMediaStream ( MediaStream stream ) { < nl > this ( stream , true , false ) ; < nl > @ @ - 25 , 6 + 32 , 11 @ @ public class AndroidMediaStream implements WebRTCMediaStream { < nl > this . stream = stream ; < nl > if ( ! local ) { < nl > audioTrack = stream . audioTracks . get ( 0 ) ; < nl > + try { < nl > + videoTrack = stream . videoTracks . get ( 0 ) ; < nl > + } catch ( Exception e ) { < nl > + / / Ignore < nl > + } < nl > } else { < nl > AndroidWebRTCRuntimeProvider . postToHandler ( new Runnable ( ) { < nl > @ Override < nl > @ @ - 33 , 8 + 45 , 11 @ @ public class AndroidMediaStream implements WebRTCMediaStream { < nl > audioConstarints . mandatory . add ( new MediaConstraints . KeyValuePair ( " googNoiseSuppression " , " true " ) ) ; < nl > audioConstarints . mandatory . add ( new MediaConstraints . KeyValuePair ( " googEchoCancellation " , " true " ) ) ; < nl > AudioSource audioSource = AndroidWebRTCRuntimeProvider . FACTORY . createAudioSource ( audioConstarints ) ; < nl > + videoSource = AndroidWebRTCRuntimeProvider . FACTORY . createVideoSource ( getVideoCapturer ( ) , new MediaConstraints ( ) ) ; < nl > + videoTrack = AndroidWebRTCRuntimeProvider . FACTORY . createVideoTrack ( " ARDAMSv0 " , videoSource ) ; < nl > audioTrack = AndroidWebRTCRuntimeProvider . FACTORY . createAudioTrack ( " ARDAMSa0 " , audioSource ) ; < nl > stream . addTrack ( audioTrack ) ; < nl > + stream . addTrack ( videoTrack ) ; < nl > } < nl > } ) ; < nl > < nl > @ @ - 68 , 4 + 83 , 43 @ @ public class AndroidMediaStream implements WebRTCMediaStream { < nl > public boolean isLocal ( ) { < nl > return local ; < nl > } < nl > + < nl > + / / Cycle through likely device names for the camera and return the first < nl > + / / capturer that works , or crash if none do . < nl > + private VideoCapturer getVideoCapturer ( ) { < nl > + String [ ] cameraFacing = { " front " , " back " } ; < nl > + int [ ] cameraIndex = { 0 , 1 } ; < nl > + int [ ] cameraOrientation = { 0 , 90 , 180 , 270 } ; < nl > + for ( String facing : cameraFacing ) { < nl > + for ( int index : cameraIndex ) { < nl > + for ( int orientation : cameraOrientation ) { < nl > + String name = " Camera " + index + " , Facing " + facing + < nl > + " , Orientation " + orientation ; < nl > + VideoCapturer capturer = VideoCapturer . create ( name ) ; < nl > + if ( capturer ! = null ) { < nl > + return capturer ; < nl > + } < nl > + } < nl > + } < nl > + } < nl > + throw new RuntimeException ( " Failed to open capturer " ) ; < nl > + } < nl > + < nl > + public AudioTrack getAudioTrack ( ) { < nl > + return audioTrack ; < nl > + } < nl > + < nl > + public VideoTrack getVideoTrack ( ) { < nl > + return videoTrack ; < nl > + } < nl > + < nl > + public VideoSource getVideoSource ( ) { < nl > + return videoSource ; < nl > + } < nl > + < nl > + public void disposeVideo ( ) { < nl > + if ( videoSource ! = null ) { < nl > + videoSource . dispose ( ) ; < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / webrtc / AndroidPeerConnection . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / webrtc / AndroidPeerConnection . java < nl > index 6b6f74d . . 91a0a78 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / webrtc / AndroidPeerConnection . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / webrtc / AndroidPeerConnection . java < nl > @ @ - 1 , 7 + 1 , 5 @ @ < nl > package im . actor . runtime . android . webrtc ; < nl > < nl > - import android . os . Handler ; < nl > - import android . os . HandlerThread ; < nl > import android . support . annotation . NonNull ; < nl > < nl > import org . jetbrains . annotations . NotNull ; < nl > @ @ - 13 , 7 + 11 , 6 @ @ import org . webrtc . Logging ; < nl > import org . webrtc . MediaConstraints ; < nl > import org . webrtc . MediaStream ; < nl > import org . webrtc . PeerConnection ; < nl > - import org . webrtc . PeerConnectionFactory ; < nl > import org . webrtc . SdpObserver ; < nl > import org . webrtc . SessionDescription ; < nl > < nl > @ @ - 21 , 7 + 18 , 6 @ @ import java . util . ArrayList ; < nl > import java . util . EnumSet ; < nl > import java . util . HashMap ; < nl > < nl > - import im . actor . runtime . android . AndroidContext ; < nl > import im . actor . runtime . android . AndroidWebRTCRuntimeProvider ; < nl > import im . actor . runtime . promise . Promise ; < nl > import im . actor . runtime . promise . PromiseFunc ; < nl > @ @ - 35 , 7 + 31 , 10 @ @ import im . actor . runtime . webrtc . WebRTCSettings ; < nl > < nl > public class AndroidPeerConnection implements WebRTCPeerConnection { < nl > < nl > - private static final boolean LIBJINGLE _ LOGS = false ; < nl > + private static final boolean LIBJINGLE _ LOGS = true ; < nl > + < nl > + private OwnStreamCallback mediaStreamCallback ; < nl > + private AndroidMediaStream stream ; < nl > < nl > public AndroidPeerConnection ( WebRTCIceServer [ ] webRTCIceServers , WebRTCSettings settings ) { < nl > < nl > @ @ - 102 , 6 + 101 , 11 @ @ public class AndroidPeerConnection implements WebRTCPeerConnection { < nl > < nl > @ Override < nl > public void onRemoveStream ( MediaStream stream ) { < nl > + try { < nl > + stream . videoTracks . get ( 0 ) . dispose ( ) ; < nl > + } catch ( Exception e ) { < nl > + < nl > + } < nl > AndroidMediaStream stream1 = streams . get ( stream ) ; < nl > if ( stream1 ! = null ) { < nl > for ( WebRTCPeerConnectionCallback c : callbacks ) { < nl > @ @ - 158 , 7 + 162 , 11 @ @ public class AndroidPeerConnection implements WebRTCPeerConnection { < nl > AndroidWebRTCRuntimeProvider . postToHandler ( new Runnable ( ) { < nl > @ Override < nl > public void run ( ) { < nl > - peerConnection . addStream ( ( ( AndroidMediaStream ) stream ) . getStream ( ) ) ; < nl > + AndroidPeerConnection . this . stream = ( AndroidMediaStream ) stream ; < nl > + if ( mediaStreamCallback ! = null ) { < nl > + mediaStreamCallback . onAvailable ( ( AndroidMediaStream ) stream ) ; < nl > + } < nl > + peerConnection . addStream ( AndroidPeerConnection . this . stream . getStream ( ) ) ; < nl > } < nl > } ) ; < nl > } < nl > @ @ - 168 , 6 + 176 , 9 @ @ public class AndroidPeerConnection implements WebRTCPeerConnection { < nl > AndroidWebRTCRuntimeProvider . postToHandler ( new Runnable ( ) { < nl > @ Override < nl > public void run ( ) { < nl > + if ( mediaStreamCallback ! = null ) { < nl > + mediaStreamCallback . onRemoved ( ) ; < nl > + } < nl > peerConnection . removeStream ( ( ( AndroidMediaStream ) stream ) . getStream ( ) ) ; < nl > } < nl > } ) ; < nl > @ @ - 329 , 9 + 340 , 30 @ @ public class AndroidPeerConnection implements WebRTCPeerConnection { < nl > @ Override < nl > public void run ( ) { < nl > peerConnection . dispose ( ) ; < nl > + < nl > + if ( stream ! = null & & stream . isLocal ( ) ) { < nl > + stream . disposeVideo ( ) ; < nl > + } < nl > } < nl > } ) ; < nl > < nl > < nl > } < nl > + < nl > + public void bind ( OwnStreamCallback callback ) { < nl > + if ( stream ! = null ) { < nl > + callback . onAvailable ( stream ) ; < nl > + } < nl > + mediaStreamCallback = callback ; < nl > + } < nl > + < nl > + public void unbind ( ) { < nl > + mediaStreamCallback = null ; < nl > + } < nl > + < nl > + public interface OwnStreamCallback { < nl > + void onAvailable ( AndroidMediaStream stream ) ; < nl > + < nl > + void onRemoved ( ) ; < nl > + } < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallActivity . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallActivity . java 
 index 02600a8 . . 377f1e7 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallActivity . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallActivity . java 
 @ @ - 25 , 6 + 25 , 9 @ @ public class CallActivity extends BaseFragmentActivity { 
 protected void onCreate ( Bundle savedInstanceState ) { 
 super . onCreate ( savedInstanceState ) ; 
 
 + Thread . setDefaultUncaughtExceptionHandler ( 
 + new UnhandledExceptionHandler ( this ) ) ; 
 + 
 getSupportActionBar ( ) . setTitle ( " Call " ) ; 
 getSupportActionBar ( ) . hide ( ) ; 
 getSupportActionBar ( ) . setBackgroundDrawable ( new ColorDrawable ( Color . TRANSPARENT ) ) ; 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 index a8e2b5a . . 814f4b2 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 @ @ - 9 , 7 + 9 , 6 @ @ import android . content . Context ; 
 import android . content . Intent ; 
 import android . content . pm . PackageManager ; 
 import android . graphics . Color ; 
 - import android . graphics . Point ; 
 import android . graphics . drawable . GradientDrawable ; 
 import android . media . AudioManager ; 
 import android . media . Ringtone ; 
 @ @ - 31 , 7 + 30 , 9 @ @ import android . widget . FrameLayout ; 
 import android . widget . ImageButton ; 
 import android . widget . TextView ; 
 
 + import org . webrtc . EglBase ; 
 import org . webrtc . RendererCommon ; 
 + import org . webrtc . SurfaceViewRenderer ; 
 import org . webrtc . VideoRenderer ; 
 import org . webrtc . VideoRendererGui ; 
 import org . webrtc . VideoSource ; 
 @ @ - 64 , 7 + 65 , 6 @ @ import im . actor . runtime . mvvm . ValueChangedListener ; 
 import im . actor . runtime . mvvm . ValueModel ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . R ; 
 - import im . actor . sdk . controllers . calls . view . AppRTCGLView ; 
 import im . actor . sdk . controllers . calls . view . CallAvatarLayerAnimator ; 
 import im . actor . sdk . controllers . calls . view . TimerActor ; 
 import im . actor . sdk . controllers . fragment . BaseFragment ; 
 @ @ - 108 , 7 + 108 , 9 @ @ public class CallFragment extends BaseFragment { 
 private View layer2 ; 
 private View layer3 ; 
 private VideoSource source ; 
 - private GLSurfaceView vsv ; 
 + private boolean renderredAdded = false ; 
 + private EglBase rootEglBase ; 
 + private SurfaceViewRenderer localRender ; 
 
 public CallFragment ( ) { 
 
 @ @ - 308 , 43 + 310 , 36 @ @ public class CallFragment extends BaseFragment { 
 addTv . setTextColor ( getResources ( ) . getColor ( R . color . picker _ grey ) ) ; 
 add . setTint ( getResources ( ) . getColor ( R . color . picker _ grey ) ) ; 
 
 - / / AndroidWebRTCRuntimeProvider . bindPeerConnection ( new AndroidWebRTCRuntimeProvider . PeerConnectionCallback ( ) { 
 - / / @ Override 
 - / / public void onPeerConncetionAvailable ( AndroidPeerConnection peerConnection ) { 
 - / / peerConnection . bind ( new AndroidPeerConnection . OwnStreamCallback ( ) { 
 - / / @ Override 
 - / / public void onAvailable ( AndroidMediaStream stream ) { 
 - / / if ( stream . getVideoTrack ( ) ! = null ) { 
 - / / source = stream . getVideoSource ( ) ; 
 - / / vsv = new GLSurfaceView ( getActivity ( ) ) ; 
 - / / VideoRendererGui . setView ( vsv , ( ) - > { 
 - / / / / VideoRenderer . Callbacks remoteRender = VideoRendererGui . createGuiRenderer ( 0 , 0 , 100 , 100 , RendererCommon . ScalingType . SCALE _ ASPECT _ FIT , false ) ; 
 - / / VideoRenderer . Callbacks localRender = VideoRendererGui . create ( 0 , 0 , 100 , 100 , RendererCommon . ScalingType . SCALE _ ASPECT _ FIT , false ) ; 
 - / / 
 - / / stream . getVideoTrack ( ) . addRenderer ( new VideoRenderer ( localRender ) ) ; 
 - / / 
 - / / cont . post ( new Runnable ( ) { 
 - / / @ Override 
 - / / public void run ( ) { 
 - / / cont . addView ( vsv , Screen . getWidth ( ) / 2 , Screen . getHeight ( ) / 2 ) ; 
 - / / 
 - / / } 
 - / / } ) ; 
 - / / 
 - / / 
 - / / } ) ; 
 - / / 
 - / / 
 - / / } 
 - / / } 
 - / / 
 - / / @ Override 
 - / / public void onRemoved ( ) { 
 - / / 
 - / / } 
 - / / } ) ; 
 - / / } 
 - / / } ) ; 
 + AndroidWebRTCRuntimeProvider . bindPeerConnection ( new AndroidWebRTCRuntimeProvider . PeerConnectionCallback ( ) { 
 + @ Override 
 + public void onPeerConncetionAvailable ( AndroidPeerConnection peerConnection ) { 
 + peerConnection . bind ( new AndroidPeerConnection . OwnStreamCallback ( ) { 
 + @ Override 
 + public void onAvailable ( AndroidMediaStream stream ) { 
 + if ( stream . getVideoTrack ( ) ! = null ) { 
 + source = stream . getVideoSource ( ) ; 
 + rootEglBase = EglBase . create ( ) ; 
 + localRender = new SurfaceViewRenderer ( getActivity ( ) ) ; 
 + localRender . init ( rootEglBase . getEglBaseContext ( ) , null ) ; 
 + 
 + stream . getVideoTrack ( ) . addRenderer ( new VideoRenderer ( localRender ) ) ; 
 + 
 + getActivity ( ) . runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + container . addView ( localRender , Screen . dp ( 200 ) , Screen . dp ( 200 ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void onRemoved ( ) { 
 + 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 
 if ( call ! = null ) { 
 call . getIsMuted ( ) . subscribe ( new ValueChangedListener < Boolean > ( ) { 
 @ @ - 597 , 9 + 592 , 6 @ @ public class CallFragment extends BaseFragment { 
 @ Override 
 public void onPause ( ) { 
 super . onPause ( ) ; 
 - / / if ( vsv ! = null ) { 
 - / / vsv . onPause ( ) ; 
 - / / } 
 if ( source ! = null ) { 
 source . stop ( ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / UnhandledExceptionHandler . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / UnhandledExceptionHandler . java 
 new file mode 100644 
 index 0000000 . . 17aac35 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / UnhandledExceptionHandler . java 
 @ @ - 0 , 0 + 1 , 105 @ @ 
 + / * 
 + * libjingle 
 + * Copyright 2013 , Google Inc . 
 + * 
 + * Redistribution and use in source and binary forms , with or without 
 + * modification , are permitted provided that the following conditions are met : 
 + * 
 + * 1 . Redistributions of source code must retain the above copyright notice , 
 + * this list of conditions and the following disclaimer . 
 + * 2 . Redistributions in binary form must reproduce the above copyright notice , 
 + * this list of conditions and the following disclaimer in the documentation 
 + * and / or other materials provided with the distribution . 
 + * 3 . The name of the author may not be used to endorse or promote products 
 + * derived from this software without specific prior written permission . 
 + * 
 + * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ` ` AS IS ' ' AND ANY EXPRESS OR IMPLIED 
 + * WARRANTIES , INCLUDING , BUT NOT LIMITED TO , THE IMPLIED WARRANTIES OF 
 + * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED . IN NO 
 + * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT , INDIRECT , INCIDENTAL , 
 + * SPECIAL , EXEMPLARY , OR CONSEQUENTIAL DAMAGES ( INCLUDING , BUT NOT LIMITED TO , 
 + * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES ; LOSS OF USE , DATA , OR PROFITS ; 
 + * OR BUSINESS INTERRUPTION ) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY , 
 + * WHETHER IN CONTRACT , STRICT LIABILITY , OR TORT ( INCLUDING NEGLIGENCE OR 
 + * OTHERWISE ) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE , EVEN IF 
 + * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE . 
 + * / 
 + 
 + package im . actor . sdk . controllers . calls ; 
 + 
 + import android . app . Activity ; 
 + import android . app . AlertDialog ; 
 + import android . content . DialogInterface ; 
 + import android . util . Log ; 
 + import android . util . TypedValue ; 
 + import android . widget . ScrollView ; 
 + import android . widget . TextView ; 
 + 
 + import java . io . PrintWriter ; 
 + import java . io . StringWriter ; 
 + 
 + / * * 
 + * Singleton helper : install a default unhandled exception handler which shows 
 + * an informative dialog and kills the app . Useful for apps whose 
 + * error - handling consists of throwing RuntimeExceptions . 
 + * NOTE : almost always more useful to 
 + * Thread . setDefaultUncaughtExceptionHandler ( ) rather than 
 + * Thread . setUncaughtExceptionHandler ( ) , to apply to background threads as well . 
 + * / 
 + public class UnhandledExceptionHandler 
 + implements Thread . UncaughtExceptionHandler { 
 + private static final String TAG = " AppRTCDemoActivity " ; 
 + private final Activity activity ; 
 + 
 + public UnhandledExceptionHandler ( final Activity activity ) { 
 + this . activity = activity ; 
 + } 
 + 
 + public void uncaughtException ( Thread unusedThread , final Throwable e ) { 
 + activity . runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + String title = " Fatal error : " + getTopLevelCauseMessage ( e ) ; 
 + String msg = getRecursiveStackTrace ( e ) ; 
 + TextView errorView = new TextView ( activity ) ; 
 + errorView . setText ( msg ) ; 
 + errorView . setTextSize ( TypedValue . COMPLEX _ UNIT _ SP , 8 ) ; 
 + ScrollView scrollingContainer = new ScrollView ( activity ) ; 
 + scrollingContainer . addView ( errorView ) ; 
 + Log . e ( TAG , title + " \ n \ n " + msg ) ; 
 + DialogInterface . OnClickListener listener = 
 + new DialogInterface . OnClickListener ( ) { 
 + @ Override 
 + public void onClick ( 
 + DialogInterface dialog , int which ) { 
 + dialog . dismiss ( ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + } ; 
 + AlertDialog . Builder builder = 
 + new AlertDialog . Builder ( activity ) ; 
 + builder 
 + . setTitle ( title ) 
 + . setView ( scrollingContainer ) 
 + . setPositiveButton ( " Exit " , listener ) . show ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + / / Returns the Message attached to the original Cause of | t | . 
 + private static String getTopLevelCauseMessage ( Throwable t ) { 
 + Throwable topLevelCause = t ; 
 + while ( topLevelCause . getCause ( ) ! = null ) { 
 + topLevelCause = topLevelCause . getCause ( ) ; 
 + } 
 + return topLevelCause . getMessage ( ) ; 
 + } 
 + 
 + / / Returns a human - readable String of the stacktrace in | t | , recursively 
 + / / through all Causes that led to | t | . 
 + private static String getRecursiveStackTrace ( Throwable t ) { 
 + StringWriter writer = new StringWriter ( ) ; 
 + t . printStackTrace ( new PrintWriter ( writer ) ) ; 
 + return writer . toString ( ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 index c421f91 . . a8e2b5a 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 @ @ - 9 , 11 + 9 , 13 @ @ import android . content . Context ; 
 import android . content . Intent ; 
 import android . content . pm . PackageManager ; 
 import android . graphics . Color ; 
 + import android . graphics . Point ; 
 import android . graphics . drawable . GradientDrawable ; 
 import android . media . AudioManager ; 
 import android . media . Ringtone ; 
 import android . media . RingtoneManager ; 
 import android . net . Uri ; 
 + import android . opengl . GLSurfaceView ; 
 import android . os . Bundle ; 
 import android . os . PowerManager ; 
 import android . os . Vibrator ; 
 @ @ - 27 , 10 + 29 , 12 @ @ import android . view . WindowManager ; 
 import android . widget . AdapterView ; 
 import android . widget . FrameLayout ; 
 import android . widget . ImageButton ; 
 - import android . widget . ListView ; 
 import android . widget . TextView ; 
 
 + import org . webrtc . RendererCommon ; 
 import org . webrtc . VideoRenderer ; 
 + import org . webrtc . VideoRendererGui ; 
 + import org . webrtc . VideoSource ; 
 
 import java . text . DateFormat ; 
 import java . text . SimpleDateFormat ; 
 @ @ - 60 , 6 + 64 , 7 @ @ import im . actor . runtime . mvvm . ValueChangedListener ; 
 import im . actor . runtime . mvvm . ValueModel ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . R ; 
 + import im . actor . sdk . controllers . calls . view . AppRTCGLView ; 
 import im . actor . sdk . controllers . calls . view . CallAvatarLayerAnimator ; 
 import im . actor . sdk . controllers . calls . view . TimerActor ; 
 import im . actor . sdk . controllers . fragment . BaseFragment ; 
 @ @ - 102 , 6 + 107 , 8 @ @ public class CallFragment extends BaseFragment { 
 private View layer1 ; 
 private View layer2 ; 
 private View layer3 ; 
 + private VideoSource source ; 
 + private GLSurfaceView vsv ; 
 
 public CallFragment ( ) { 
 
 @ @ - 301 , 6 + 308 , 44 @ @ public class CallFragment extends BaseFragment { 
 addTv . setTextColor ( getResources ( ) . getColor ( R . color . picker _ grey ) ) ; 
 add . setTint ( getResources ( ) . getColor ( R . color . picker _ grey ) ) ; 
 
 + / / AndroidWebRTCRuntimeProvider . bindPeerConnection ( new AndroidWebRTCRuntimeProvider . PeerConnectionCallback ( ) { 
 + / / @ Override 
 + / / public void onPeerConncetionAvailable ( AndroidPeerConnection peerConnection ) { 
 + / / peerConnection . bind ( new AndroidPeerConnection . OwnStreamCallback ( ) { 
 + / / @ Override 
 + / / public void onAvailable ( AndroidMediaStream stream ) { 
 + / / if ( stream . getVideoTrack ( ) ! = null ) { 
 + / / source = stream . getVideoSource ( ) ; 
 + / / vsv = new GLSurfaceView ( getActivity ( ) ) ; 
 + / / VideoRendererGui . setView ( vsv , ( ) - > { 
 + / / / / VideoRenderer . Callbacks remoteRender = VideoRendererGui . createGuiRenderer ( 0 , 0 , 100 , 100 , RendererCommon . ScalingType . SCALE _ ASPECT _ FIT , false ) ; 
 + / / VideoRenderer . Callbacks localRender = VideoRendererGui . create ( 0 , 0 , 100 , 100 , RendererCommon . ScalingType . SCALE _ ASPECT _ FIT , false ) ; 
 + / / 
 + / / stream . getVideoTrack ( ) . addRenderer ( new VideoRenderer ( localRender ) ) ; 
 + / / 
 + / / cont . post ( new Runnable ( ) { 
 + / / @ Override 
 + / / public void run ( ) { 
 + / / cont . addView ( vsv , Screen . getWidth ( ) / 2 , Screen . getHeight ( ) / 2 ) ; 
 + / / 
 + / / } 
 + / / } ) ; 
 + / / 
 + / / 
 + / / } ) ; 
 + / / 
 + / / 
 + / / } 
 + / / } 
 + / / 
 + / / @ Override 
 + / / public void onRemoved ( ) { 
 + / / 
 + / / } 
 + / / } ) ; 
 + / / } 
 + / / } ) ; 
 + 
 if ( call ! = null ) { 
 call . getIsMuted ( ) . subscribe ( new ValueChangedListener < Boolean > ( ) { 
 @ Override 
 @ @ - 552 , 6 + 597 , 14 @ @ public class CallFragment extends BaseFragment { 
 @ Override 
 public void onPause ( ) { 
 super . onPause ( ) ; 
 + / / if ( vsv ! = null ) { 
 + / / vsv . onPause ( ) ; 
 + / / } 
 + if ( source ! = null ) { 
 + source . stop ( ) ; 
 + } 
 + 
 + 
 if ( call ! = null & & call . getState ( ) . get ( ) ! = CallState . ENDED ) { 
 final NotificationCompat . Builder builder = new NotificationCompat . Builder ( getActivity ( ) ) ; 
 builder . setAutoCancel ( true ) ; 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / view / AppRTCGLView . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / view / AppRTCGLView . java 
 new file mode 100644 
 index 0000000 . . fae8039 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / view / AppRTCGLView . java 
 @ @ - 0 , 0 + 1 , 58 @ @ 
 + / * 
 + * libjingle 
 + * Copyright 2014 , Google Inc . 
 + * 
 + * Redistribution and use in source and binary forms , with or without 
 + * modification , are permitted provided that the following conditions are met : 
 + * 
 + * 1 . Redistributions of source code must retain the above copyright notice , 
 + * this list of conditions and the following disclaimer . 
 + * 2 . Redistributions in binary form must reproduce the above copyright notice , 
 + * this list of conditions and the following disclaimer in the documentation 
 + * and / or other materials provided with the distribution . 
 + * 3 . The name of the author may not be used to endorse or promote products 
 + * derived from this software without specific prior written permission . 
 + * 
 + * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ` ` AS IS ' ' AND ANY EXPRESS OR IMPLIED 
 + * WARRANTIES , INCLUDING , BUT NOT LIMITED TO , THE IMPLIED WARRANTIES OF 
 + * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED . IN NO 
 + * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT , INDIRECT , INCIDENTAL , 
 + * SPECIAL , EXEMPLARY , OR CONSEQUENTIAL DAMAGES ( INCLUDING , BUT NOT LIMITED TO , 
 + * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES ; LOSS OF USE , DATA , OR PROFITS ; 
 + * OR BUSINESS INTERRUPTION ) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY , 
 + * WHETHER IN CONTRACT , STRICT LIABILITY , OR TORT ( INCLUDING NEGLIGENCE OR 
 + * OTHERWISE ) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE , EVEN IF 
 + * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE . 
 + * / 
 + 
 + package im . actor . sdk . controllers . calls . view ; 
 + 
 + import android . content . Context ; 
 + import android . graphics . Point ; 
 + import android . opengl . GLSurfaceView ; 
 + 
 + public class AppRTCGLView extends GLSurfaceView { 
 + private Point screenDimensions ; 
 + 
 + public AppRTCGLView ( Context c , Point screenDimensions ) { 
 + super ( c ) ; 
 + this . screenDimensions = screenDimensions ; 
 + } 
 + 
 + public void updateDisplaySize ( Point screenDimensions ) { 
 + this . screenDimensions = screenDimensions ; 
 + } 
 + 
 + @ Override 
 + protected void onMeasure ( int unusedX , int unusedY ) { 
 + / / Go big or go home ! 
 + setMeasuredDimension ( screenDimensions . x , screenDimensions . y ) ; 
 + } 
 + 
 + @ Override 
 + protected void onAttachedToWindow ( ) { 
 + super . onAttachedToWindow ( ) ; 
 + setSystemUiVisibility ( SYSTEM _ UI _ FLAG _ HIDE _ NAVIGATION | 
 + SYSTEM _ UI _ FLAG _ FULLSCREEN | SYSTEM _ UI _ FLAG _ IMMERSIVE _ STICKY ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / ActorSDKMessenger . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / ActorSDKMessenger . java 
 index deb790d . . a4778ac 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / ActorSDKMessenger . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / ActorSDKMessenger . java 
 @ @ - 15 , 6 + 15 , 7 @ @ public class ActorSDKMessenger { 
 } 
 
 public static MVVMCollection < User , UserVM > users ( ) { 
 + ActorSDK . sharedActor ( ) . waitForReady ( ) ; 
 return messenger ( ) . getUsers ( ) ; 
 } 
 
 @ @ - 23 , 6 + 24 , 7 @ @ public class ActorSDKMessenger { 
 } 
 
 public static int myUid ( ) { 
 + ActorSDK . sharedActor ( ) . waitForReady ( ) ; 
 return messenger ( ) . myUid ( ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidWebRTCRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidWebRTCRuntimeProvider . java 
 index aee3326 . . 81b0cc6 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidWebRTCRuntimeProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidWebRTCRuntimeProvider . java 
 @ @ - 25 , 6 + 25 , 8 @ @ public class AndroidWebRTCRuntimeProvider implements WebRTCRuntime { 
 public static final PeerConnectionFactory FACTORY ; 
 private static Object sVcLock = new Object ( ) ; 
 private static Handler sVcHandler = null ; 
 + private static PeerConnectionCallback connectionCallback ; 
 + private static AndroidPeerConnection currentPeerConnection ; 
 
 static { 
 PeerConnectionFactory . initializeAndroidGlobals ( AndroidContext . getContext ( ) , true , true , true ) ; 
 @ @ - 39 , 13 + 41 , 19 @ @ public class AndroidWebRTCRuntimeProvider implements WebRTCRuntime { 
 } 
 } 
 
 + 
 @ NotNull 
 @ Override 
 public Promise < WebRTCPeerConnection > createPeerConnection ( final WebRTCIceServer [ ] webRTCIceServers , final WebRTCSettings settings ) { 
 return new Promise < > ( new PromiseFunc < WebRTCPeerConnection > ( ) { 
 @ Override 
 public void exec ( @ NonNull @ NotNull final PromiseResolver < WebRTCPeerConnection > resolver ) { 
 - resolver . result ( new AndroidPeerConnection ( webRTCIceServers , settings ) ) ; 
 + currentPeerConnection = new AndroidPeerConnection ( webRTCIceServers , settings ) ; 
 + resolver . result ( currentPeerConnection ) ; 
 + if ( connectionCallback ! = null ) { 
 + connectionCallback . onPeerConncetionAvailable ( currentPeerConnection ) ; 
 + connectionCallback = null ; 
 + } 
 
 } 
 } ) ; 
 @ @ - 75 , 4 + 83 , 27 @ @ public class AndroidWebRTCRuntimeProvider implements WebRTCRuntime { 
 public static void postToHandler ( Runnable r ) { 
 sVcHandler . post ( r ) ; 
 } 
 + 
 + public AndroidPeerConnection getCurrentPeerConnection ( ) { 
 + return currentPeerConnection ; 
 + } 
 + 
 + public static void bindPeerConnection ( PeerConnectionCallback callback ) { 
 + if ( currentPeerConnection ! = null ) { 
 + callback . onPeerConncetionAvailable ( currentPeerConnection ) ; 
 + } else { 
 + connectionCallback = callback ; 
 + } 
 + } 
 + 
 + public void unbindPeerConnection ( ) { 
 + if ( currentPeerConnection ! = null ) { 
 + currentPeerConnection . unbind ( ) ; 
 + } 
 + currentPeerConnection = null ; 
 + } 
 + 
 + public interface PeerConnectionCallback { 
 + void onPeerConncetionAvailable ( AndroidPeerConnection peerConnection ) ; 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / webrtc / AndroidMediaStream . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / webrtc / AndroidMediaStream . java 
 index 586f007 . . b00cd12 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / webrtc / AndroidMediaStream . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / webrtc / AndroidMediaStream . java 
 @ @ - 1 , 9 + 1 , 14 @ @ 
 package im . actor . runtime . android . webrtc ; 
 
 + import android . media . MediaRecorder ; 
 + 
 import org . webrtc . AudioSource ; 
 import org . webrtc . AudioTrack ; 
 import org . webrtc . MediaConstraints ; 
 import org . webrtc . MediaStream ; 
 + import org . webrtc . VideoCapturer ; 
 + import org . webrtc . VideoSource ; 
 + import org . webrtc . VideoTrack ; 
 
 import im . actor . runtime . android . AndroidWebRTCRuntimeProvider ; 
 import im . actor . runtime . webrtc . WebRTCMediaStream ; 
 @ @ - 11 , 10 + 16 , 12 @ @ import im . actor . runtime . webrtc . WebRTCMediaStream ; 
 public class AndroidMediaStream implements WebRTCMediaStream { 
 
 private AudioTrack audioTrack ; 
 + private VideoTrack videoTrack ; 
 private MediaStream stream ; 
 private boolean isEnabled = false ; 
 private boolean local ; 
 private boolean diposed = false ; 
 + private VideoSource videoSource ; 
 
 public AndroidMediaStream ( MediaStream stream ) { 
 this ( stream , true , false ) ; 
 @ @ - 25 , 6 + 32 , 11 @ @ public class AndroidMediaStream implements WebRTCMediaStream { 
 this . stream = stream ; 
 if ( ! local ) { 
 audioTrack = stream . audioTracks . get ( 0 ) ; 
 + try { 
 + videoTrack = stream . videoTracks . get ( 0 ) ; 
 + } catch ( Exception e ) { 
 + / / Ignore 
 + } 
 } else { 
 AndroidWebRTCRuntimeProvider . postToHandler ( new Runnable ( ) { 
 @ Override 
 @ @ - 33 , 8 + 45 , 11 @ @ public class AndroidMediaStream implements WebRTCMediaStream { 
 audioConstarints . mandatory . add ( new MediaConstraints . KeyValuePair ( " googNoiseSuppression " , " true " ) ) ; 
 audioConstarints . mandatory . add ( new MediaConstraints . KeyValuePair ( " googEchoCancellation " , " true " ) ) ; 
 AudioSource audioSource = AndroidWebRTCRuntimeProvider . FACTORY . createAudioSource ( audioConstarints ) ; 
 + videoSource = AndroidWebRTCRuntimeProvider . FACTORY . createVideoSource ( getVideoCapturer ( ) , new MediaConstraints ( ) ) ; 
 + videoTrack = AndroidWebRTCRuntimeProvider . FACTORY . createVideoTrack ( " ARDAMSv0 " , videoSource ) ; 
 audioTrack = AndroidWebRTCRuntimeProvider . FACTORY . createAudioTrack ( " ARDAMSa0 " , audioSource ) ; 
 stream . addTrack ( audioTrack ) ; 
 + stream . addTrack ( videoTrack ) ; 
 } 
 } ) ; 
 
 @ @ - 68 , 4 + 83 , 43 @ @ public class AndroidMediaStream implements WebRTCMediaStream { 
 public boolean isLocal ( ) { 
 return local ; 
 } 
 + 
 + / / Cycle through likely device names for the camera and return the first 
 + / / capturer that works , or crash if none do . 
 + private VideoCapturer getVideoCapturer ( ) { 
 + String [ ] cameraFacing = { " front " , " back " } ; 
 + int [ ] cameraIndex = { 0 , 1 } ; 
 + int [ ] cameraOrientation = { 0 , 90 , 180 , 270 } ; 
 + for ( String facing : cameraFacing ) { 
 + for ( int index : cameraIndex ) { 
 + for ( int orientation : cameraOrientation ) { 
 + String name = " Camera " + index + " , Facing " + facing + 
 + " , Orientation " + orientation ; 
 + VideoCapturer capturer = VideoCapturer . create ( name ) ; 
 + if ( capturer ! = null ) { 
 + return capturer ; 
 + } 
 + } 
 + } 
 + } 
 + throw new RuntimeException ( " Failed to open capturer " ) ; 
 + } 
 + 
 + public AudioTrack getAudioTrack ( ) { 
 + return audioTrack ; 
 + } 
 + 
 + public VideoTrack getVideoTrack ( ) { 
 + return videoTrack ; 
 + } 
 + 
 + public VideoSource getVideoSource ( ) { 
 + return videoSource ; 
 + } 
 + 
 + public void disposeVideo ( ) { 
 + if ( videoSource ! = null ) { 
 + videoSource . dispose ( ) ; 
 + } 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / webrtc / AndroidPeerConnection . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / webrtc / AndroidPeerConnection . java 
 index 6b6f74d . . 91a0a78 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / webrtc / AndroidPeerConnection . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / webrtc / AndroidPeerConnection . java 
 @ @ - 1 , 7 + 1 , 5 @ @ 
 package im . actor . runtime . android . webrtc ; 
 
 - import android . os . Handler ; 
 - import android . os . HandlerThread ; 
 import android . support . annotation . NonNull ; 
 
 import org . jetbrains . annotations . NotNull ; 
 @ @ - 13 , 7 + 11 , 6 @ @ import org . webrtc . Logging ; 
 import org . webrtc . MediaConstraints ; 
 import org . webrtc . MediaStream ; 
 import org . webrtc . PeerConnection ; 
 - import org . webrtc . PeerConnectionFactory ; 
 import org . webrtc . SdpObserver ; 
 import org . webrtc . SessionDescription ; 
 
 @ @ - 21 , 7 + 18 , 6 @ @ import java . util . ArrayList ; 
 import java . util . EnumSet ; 
 import java . util . HashMap ; 
 
 - import im . actor . runtime . android . AndroidContext ; 
 import im . actor . runtime . android . AndroidWebRTCRuntimeProvider ; 
 import im . actor . runtime . promise . Promise ; 
 import im . actor . runtime . promise . PromiseFunc ; 
 @ @ - 35 , 7 + 31 , 10 @ @ import im . actor . runtime . webrtc . WebRTCSettings ; 
 
 public class AndroidPeerConnection implements WebRTCPeerConnection { 
 
 - private static final boolean LIBJINGLE _ LOGS = false ; 
 + private static final boolean LIBJINGLE _ LOGS = true ; 
 + 
 + private OwnStreamCallback mediaStreamCallback ; 
 + private AndroidMediaStream stream ; 
 
 public AndroidPeerConnection ( WebRTCIceServer [ ] webRTCIceServers , WebRTCSettings settings ) { 
 
 @ @ - 102 , 6 + 101 , 11 @ @ public class AndroidPeerConnection implements WebRTCPeerConnection { 
 
 @ Override 
 public void onRemoveStream ( MediaStream stream ) { 
 + try { 
 + stream . videoTracks . get ( 0 ) . dispose ( ) ; 
 + } catch ( Exception e ) { 
 + 
 + } 
 AndroidMediaStream stream1 = streams . get ( stream ) ; 
 if ( stream1 ! = null ) { 
 for ( WebRTCPeerConnectionCallback c : callbacks ) { 
 @ @ - 158 , 7 + 162 , 11 @ @ public class AndroidPeerConnection implements WebRTCPeerConnection { 
 AndroidWebRTCRuntimeProvider . postToHandler ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 - peerConnection . addStream ( ( ( AndroidMediaStream ) stream ) . getStream ( ) ) ; 
 + AndroidPeerConnection . this . stream = ( AndroidMediaStream ) stream ; 
 + if ( mediaStreamCallback ! = null ) { 
 + mediaStreamCallback . onAvailable ( ( AndroidMediaStream ) stream ) ; 
 + } 
 + peerConnection . addStream ( AndroidPeerConnection . this . stream . getStream ( ) ) ; 
 } 
 } ) ; 
 } 
 @ @ - 168 , 6 + 176 , 9 @ @ public class AndroidPeerConnection implements WebRTCPeerConnection { 
 AndroidWebRTCRuntimeProvider . postToHandler ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 + if ( mediaStreamCallback ! = null ) { 
 + mediaStreamCallback . onRemoved ( ) ; 
 + } 
 peerConnection . removeStream ( ( ( AndroidMediaStream ) stream ) . getStream ( ) ) ; 
 } 
 } ) ; 
 @ @ - 329 , 9 + 340 , 30 @ @ public class AndroidPeerConnection implements WebRTCPeerConnection { 
 @ Override 
 public void run ( ) { 
 peerConnection . dispose ( ) ; 
 + 
 + if ( stream ! = null & & stream . isLocal ( ) ) { 
 + stream . disposeVideo ( ) ; 
 + } 
 } 
 } ) ; 
 
 
 } 
 + 
 + public void bind ( OwnStreamCallback callback ) { 
 + if ( stream ! = null ) { 
 + callback . onAvailable ( stream ) ; 
 + } 
 + mediaStreamCallback = callback ; 
 + } 
 + 
 + public void unbind ( ) { 
 + mediaStreamCallback = null ; 
 + } 
 + 
 + public interface OwnStreamCallback { 
 + void onAvailable ( AndroidMediaStream stream ) ; 
 + 
 + void onRemoved ( ) ; 
 + } 
 }
