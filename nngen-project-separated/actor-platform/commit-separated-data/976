BLEU SCORE: 0.28592291256793106

TEST MSG: fix ( server : files ) : write files in separate thread pool , get rid of akka ' s FileIO
GENERATED MSG: fix ( server : files ) : attempt to work - around akka bug

TEST DIFF (one line): diff - - git a / actor - server / actor - fs - adapters / src / main / resources / reference . conf b / actor - server / actor - fs - adapters / src / main / resources / reference . conf < nl > index 7bfce78 . . a09d101 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - fs - adapters / src / main / resources / reference . conf < nl > @ @ - 2 , 6 + 2 , 7 @ @ services { < nl > file - storage { < nl > # provide your own path to directory with read and write permissions for user ` actor ` < nl > location : " / var / lib / actor / files " < nl > + thread - pool - size : 20 < nl > } < nl > < nl > aws { < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > index 6efaa70 . . 80cf1e5 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > @ @ - 1 , 5 + 1 , 7 @ @ < nl > package im . actor . server . file . local < nl > < nl > + import java . util . concurrent . Executors < nl > + < nl > import akka . actor . ActorSystem < nl > import akka . event . Logging < nl > import akka . http . scaladsl . util . FastFuture < nl > @ @ - 20 , 6 + 22 , 9 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { < nl > protected implicit val mat : Materializer < nl > protected val storageLocation : String < nl > < nl > + private lazy val poolSize = system . settings . config . getInt ( " services . file - storage . thread - pool - size " ) < nl > + private lazy val ecPool = ExecutionContext . fromExecutor ( Executors . newFixedThreadPool ( poolSize ) ) < nl > + < nl > private lazy val log = Logging ( system , getClass ) < nl > private lazy val db = DbExtension ( system ) . db < nl > < nl > @ @ - 50 , 7 + 55 , 8 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { < nl > dir ← getOrCreateFileDir ( fileId ) < nl > partFile ← Future { blocking { dir . createChild ( LocalUploadKey . partKey ( fileId , partNumber ) . key ) } } < nl > _ = log . debug ( " Appending bytes to part number : { } , fileId : { } , target file : { } " , partNumber , fileId , partFile ) < nl > - _ ← bs . runWith ( FileIO . toFile ( partFile . toJava , append = true ) ) < nl > + bytes ← bs . runFold ( ByteString . empty ) ( _ + + _ ) < nl > + _ ← Future ( { partFile . write ( bytes . toArray ) } ) ( ecPool ) < nl > } yield ( ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala < nl > index 709baae . . 7afefb8 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > package im . actor . server . file . local . http < nl > < nl > import java . time . { Duration , Instant } < nl > + import java . util . concurrent . Executors < nl > < nl > import akka . actor . ActorSystem < nl > import akka . event . Logging < nl > @ @ - 13 , 7 + 14 , 7 @ @ import im . actor . server . api . http . HttpHandler < nl > import im . actor . server . file . local . { FileStorageOperations , LocalFileStorageConfig , RequestSigning } < nl > import im . actor . util . log . AnyRefLogSource < nl > < nl > - import scala . concurrent . { Future , ExecutionContext } < nl > + import scala . concurrent . { Future , ExecutionContext } < nl > import scala . util . { Failure , Success } < nl > < nl > private [ local ] final class FilesHttpHandler ( storageConfig : LocalFileStorageConfig ) ( implicit val system : ActorSystem )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala < nl > index 2b84fbe . . 709baae 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala < nl > @ @ - 13 , 7 + 13 , 7 @ @ import im . actor . server . api . http . HttpHandler < nl > import im . actor . server . file . local . { FileStorageOperations , LocalFileStorageConfig , RequestSigning } < nl > import im . actor . util . log . AnyRefLogSource < nl > < nl > - import scala . concurrent . ExecutionContext < nl > + import scala . concurrent . { Future , ExecutionContext } < nl > import scala . util . { Failure , Success } < nl > < nl > private [ local ] final class FilesHttpHandler ( storageConfig : LocalFileStorageConfig ) ( implicit val system : ActorSystem ) < nl > @ @ - 73 , 6 + 73 , 7 @ @ private [ local ] final class FilesHttpHandler ( storageConfig : LocalFileStorageConfi < nl > val writeFu = for { < nl > _ < - prepareForPartWrite ( fileId , partNumber ) < nl > _ < - appendPartBytes ( req . entity . dataBytes , fileId , partNumber ) < nl > + _ < - Future { } < nl > } yield ( ) < nl > onComplete ( writeFu ) { < nl > case Success ( _ ) = >

TEST DIFF:
diff - - git a / actor - server / actor - fs - adapters / src / main / resources / reference . conf b / actor - server / actor - fs - adapters / src / main / resources / reference . conf 
 index 7bfce78 . . a09d101 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / resources / reference . conf 
 + + + b / actor - server / actor - fs - adapters / src / main / resources / reference . conf 
 @ @ - 2 , 6 + 2 , 7 @ @ services { 
 file - storage { 
 # provide your own path to directory with read and write permissions for user ` actor ` 
 location : " / var / lib / actor / files " 
 + thread - pool - size : 20 
 } 
 
 aws { 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 index 6efaa70 . . 80cf1e5 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 @ @ - 1 , 5 + 1 , 7 @ @ 
 package im . actor . server . file . local 
 
 + import java . util . concurrent . Executors 
 + 
 import akka . actor . ActorSystem 
 import akka . event . Logging 
 import akka . http . scaladsl . util . FastFuture 
 @ @ - 20 , 6 + 22 , 9 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { 
 protected implicit val mat : Materializer 
 protected val storageLocation : String 
 
 + private lazy val poolSize = system . settings . config . getInt ( " services . file - storage . thread - pool - size " ) 
 + private lazy val ecPool = ExecutionContext . fromExecutor ( Executors . newFixedThreadPool ( poolSize ) ) 
 + 
 private lazy val log = Logging ( system , getClass ) 
 private lazy val db = DbExtension ( system ) . db 
 
 @ @ - 50 , 7 + 55 , 8 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { 
 dir ← getOrCreateFileDir ( fileId ) 
 partFile ← Future { blocking { dir . createChild ( LocalUploadKey . partKey ( fileId , partNumber ) . key ) } } 
 _ = log . debug ( " Appending bytes to part number : { } , fileId : { } , target file : { } " , partNumber , fileId , partFile ) 
 - _ ← bs . runWith ( FileIO . toFile ( partFile . toJava , append = true ) ) 
 + bytes ← bs . runFold ( ByteString . empty ) ( _ + + _ ) 
 + _ ← Future ( { partFile . write ( bytes . toArray ) } ) ( ecPool ) 
 } yield ( ) 
 } 
 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala 
 index 709baae . . 7afefb8 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package im . actor . server . file . local . http 
 
 import java . time . { Duration , Instant } 
 + import java . util . concurrent . Executors 
 
 import akka . actor . ActorSystem 
 import akka . event . Logging 
 @ @ - 13 , 7 + 14 , 7 @ @ import im . actor . server . api . http . HttpHandler 
 import im . actor . server . file . local . { FileStorageOperations , LocalFileStorageConfig , RequestSigning } 
 import im . actor . util . log . AnyRefLogSource 
 
 - import scala . concurrent . { Future , ExecutionContext } 
 + import scala . concurrent . { Future , ExecutionContext } 
 import scala . util . { Failure , Success } 
 
 private [ local ] final class FilesHttpHandler ( storageConfig : LocalFileStorageConfig ) ( implicit val system : ActorSystem )

NEAREST DIFF:
diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala 
 index 2b84fbe . . 709baae 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala 
 @ @ - 13 , 7 + 13 , 7 @ @ import im . actor . server . api . http . HttpHandler 
 import im . actor . server . file . local . { FileStorageOperations , LocalFileStorageConfig , RequestSigning } 
 import im . actor . util . log . AnyRefLogSource 
 
 - import scala . concurrent . ExecutionContext 
 + import scala . concurrent . { Future , ExecutionContext } 
 import scala . util . { Failure , Success } 
 
 private [ local ] final class FilesHttpHandler ( storageConfig : LocalFileStorageConfig ) ( implicit val system : ActorSystem ) 
 @ @ - 73 , 6 + 73 , 7 @ @ private [ local ] final class FilesHttpHandler ( storageConfig : LocalFileStorageConfi 
 val writeFu = for { 
 _ < - prepareForPartWrite ( fileId , partNumber ) 
 _ < - appendPartBytes ( req . entity . dataBytes , fileId , partNumber ) 
 + _ < - Future { } 
 } yield ( ) 
 onComplete ( writeFu ) { 
 case Success ( _ ) = >
