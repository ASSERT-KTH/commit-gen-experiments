BLEU SCORE: 0.1235622127262679

TEST MSG: fix ( android - sdk ) : MainPhoneController show / hide custom view
GENERATED MSG: wip ( sdk ) : Loading grouped dialogs

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / controllers / MainPhoneController . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / controllers / MainPhoneController . java < nl > index 0178ac3 . . 9f23a2a 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / controllers / MainPhoneController . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / controllers / MainPhoneController . java < nl > @ @ - 345 , 7 + 345 , 7 @ @ public class MainPhoneController extends MainBaseController { < nl > < nl > onConfigireToolbarCustomView ( ab ) ; < nl > < nl > - barTabs . setVisibility ( View . VISIBLE ) ; < nl > + onShowToolbarCustomView ( ) ; < nl > emptyContactsView . setVisibility ( View . GONE ) ; < nl > syncInProgressView . setVisibility ( View . GONE ) ; < nl > < nl > @ @ - 357 , 18 + 357 , 18 @ @ public class MainPhoneController extends MainBaseController { < nl > Boolean isAppEmpty , Value < Boolean > Value2 ) { < nl > if ( isAppEmpty ) { < nl > if ( isAppLoaded ) { < nl > - barTabs . setVisibility ( View . GONE ) ; < nl > + onHideToolbarCustomView ( ) ; < nl > emptyContactsView . setVisibility ( View . VISIBLE ) ; < nl > syncInProgressView . setVisibility ( View . GONE ) ; < nl > getActivity ( ) . invalidateOptionsMenu ( ) ; < nl > } else { < nl > - barTabs . setVisibility ( View . GONE ) ; < nl > + onHideToolbarCustomView ( ) ; < nl > emptyContactsView . setVisibility ( View . GONE ) ; < nl > syncInProgressView . setVisibility ( View . VISIBLE ) ; < nl > getActivity ( ) . invalidateOptionsMenu ( ) ; < nl > } < nl > } else { < nl > - barTabs . setVisibility ( View . VISIBLE ) ; < nl > + onShowToolbarCustomView ( ) ; < nl > emptyContactsView . setVisibility ( View . GONE ) ; < nl > syncInProgressView . setVisibility ( View . GONE ) ; < nl > getActivity ( ) . invalidateOptionsMenu ( ) ; < nl > @ @ - 377 , 6 + 377 , 14 @ @ public class MainPhoneController extends MainBaseController { < nl > } ) ; < nl > } < nl > < nl > + private void onShowToolbarCustomView ( ) { < nl > + barTabs . setVisibility ( View . VISIBLE ) ; < nl > + } < nl > + < nl > + private void onHideToolbarCustomView ( ) { < nl > + barTabs . setVisibility ( View . GONE ) ; < nl > + } < nl > + < nl > protected void onConfigireToolbarCustomView ( ActionBar ab ) { < nl > FrameLayout tabsContainer = new FrameLayout ( getActivity ( ) ) ; < nl > barTabs = new PagerSlidingTabStrip ( getActivity ( ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > index 1bcb5fc . . da3d7f3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > @ @ - 26 , 6 + 26 , 7 @ @ import im . actor . core . api . ApiServiceExUserLeft ; < nl > import im . actor . core . api . ApiServiceMessage ; < nl > import im . actor . core . api . ApiStickerMessage ; < nl > import im . actor . core . api . ApiTextMessage ; < nl > + import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . content . internal . AbsContentContainer ; < nl > import im . actor . core . entity . content . internal . AbsLocalContent ; < nl > import im . actor . core . entity . content . internal . ContentLocalContainer ; < nl > @ @ - 35 , 6 + 36 , 7 @ @ import im . actor . core . entity . content . internal . LocalPhoto ; < nl > import im . actor . core . entity . content . internal . LocalVideo ; < nl > import im . actor . core . entity . content . internal . LocalVoice ; < nl > import im . actor . core . entity . content . internal . Sticker ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > import im . actor . runtime . bser . BserParser ; < nl > import im . actor . runtime . bser . BserValues ; < nl > import im . actor . runtime . bser . BserWriter ; < nl > @ @ - 186 , 4 + 188 , 7 @ @ public abstract class AbsContent { < nl > public AbsContentContainer getContentContainer ( ) { < nl > return contentContainer ; < nl > } < nl > + < nl > + public void onIncoming ( Peer peer , ModuleContext context ) { < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java < nl > index 5203b69 . . ce3fd85 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java < nl > @ @ - 123 , 6 + 123 , 7 @ @ public class MessagesProcessor extends AbsModule { < nl > < nl > / / Send to own read actor < nl > ownReadActor ( ) . send ( new OwnReadActor . InMessage ( peer , message ) ) ; < nl > + msgContent . onIncoming ( peer , context ( ) ) ; < nl > } else { < nl > / / Send to own read actor < nl > ownReadActor ( ) . send ( new OwnReadActor . OutMessage ( peer , message . getSortDate ( ) ) ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Updates . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Updates . java < nl > index b86f140 . . 8ce7757 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Updates . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Updates . java < nl > @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . core . api . base . SeqUpdate ; < nl > import im . actor . core . modules . events . NewSessionCreated ; < nl > import im . actor . core . modules . updates . SequenceActor ; < nl > import im . actor . core . modules . updates . internal . ExecuteAfter ; < nl > + import im . actor . core . modules . updates . internal . RelatedResponse ; < nl > import im . actor . core . network . parser . Update ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > @ @ - 67 , 6 + 68 , 19 @ @ public class Updates extends AbsModule implements BusSubscriber { < nl > updateActor . send ( new ExecuteAfter ( seq , runnable ) ) ; < nl > } < nl > < nl > + public void executeRelatedResponse ( List < ApiUser > users , List < ApiGroup > groups , Runnable runnable ) { < nl > + updateActor . send ( new RelatedResponse ( users , groups , runnable ) ) ; < nl > + } < nl > + < nl > + public void executeRelatedResponse ( List < ApiUser > users , List < ApiGroup > groups , final ActorRef ref , final Runnable runnable ) { < nl > + updateActor . send ( new RelatedResponse ( users , groups , new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + ref . send ( runnable ) ; < nl > + } < nl > + } ) ) ; < nl > + } < nl > + < nl > public void resetModule ( ) { < nl > / / TODO : Implement < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > index b6d002a . . 638a2bb 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > @ @ - 2 , 7 + 2 , 11 @ @ package im . actor . core . modules . internal . messages ; < nl > < nl > import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > + import java . util . List ; < nl > < nl > + import im . actor . core . api . ApiDialogGroup ; < nl > + import im . actor . core . api . rpc . RequestLoadGroupedDialogs ; < nl > + import im . actor . core . api . rpc . ResponseLoadGroupedDialogs ; < nl > import im . actor . core . entity . Avatar ; < nl > import im . actor . core . entity . DialogSpec ; < nl > import im . actor . core . entity . Group ; < nl > @ @ - 12 , 6 + 16 , 8 @ @ import im . actor . core . entity . User ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . internal . messages . entity . GroupedStorage ; < nl > import im . actor . core . modules . utils . ModuleActor ; < nl > + import im . actor . core . network . RpcCallback ; < nl > + import im . actor . core . network . RpcException ; < nl > import im . actor . core . viewmodel . DialogGroup ; < nl > import im . actor . core . viewmodel . DialogSmall ; < nl > import im . actor . core . viewmodel . DialogSpecVM ; < nl > @ @ - 21 , 7 + 27 , 9 @ @ import im . actor . runtime . mvvm . MVVMCollection ; < nl > public class GroupedDialogsActor extends ModuleActor { < nl > < nl > private static final String PREFERENCE _ GROUPED = " dialogs . grouped " ; < nl > + private static final String PREFERENCE _ GROUPED _ LOADED = " dialogs . grouped . loaded " ; < nl > < nl > + private boolean isLoaded = false ; < nl > private GroupedStorage storage ; < nl > private MVVMCollection < DialogSpec , DialogSpecVM > specs ; < nl > < nl > @ @ - 44 , 6 + 52 , 30 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > } < nl > } < nl > notifyVM ( ) ; < nl > + < nl > + isLoaded = preferences ( ) . getBool ( PREFERENCE _ GROUPED _ LOADED , false ) ; < nl > + < nl > + if ( ! isLoaded ) { < nl > + request ( new RequestLoadGroupedDialogs ( ) , new RpcCallback < ResponseLoadGroupedDialogs > ( ) { < nl > + @ Override < nl > + public void onResult ( final ResponseLoadGroupedDialogs response ) { < nl > + updates ( ) . executeRelatedResponse ( response . getUsers ( ) , response . getGroups ( ) , < nl > + self ( ) , < nl > + new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + List < ApiDialogGroup > dialogGroups = response . getDialogs ( ) ; < nl > + storage . getGroupPeers ( ) . clear ( ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( RpcException e ) { < nl > + / / Ignore < nl > + } < nl > + } ) ; < nl > + } < nl > } < nl > < nl > private void onNewMessage ( Peer peer , long sortDate , int counter ) { < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > index 6c8f986 . . df0f9a1 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > @ @ - 55 , 6 + 55 , 7 @ @ import im . actor . core . modules . updates . internal . GroupCreated ; < nl > import im . actor . core . modules . updates . internal . InternalUpdate ; < nl > import im . actor . core . modules . updates . internal . LoggedIn ; < nl > import im . actor . core . modules . updates . internal . MessagesHistoryLoaded ; < nl > + import im . actor . core . modules . updates . internal . RelatedResponse ; < nl > import im . actor . core . modules . updates . internal . UsersFounded ; < nl > import im . actor . core . network . parser . Update ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > @ @ - 132 , 6 + 133 , 10 @ @ public class UpdateProcessor extends AbsModule { < nl > created . getCallback ( ) . onResult ( created . getGroup ( ) . getId ( ) ) ; < nl > } < nl > } ) ; < nl > + } else if ( update instanceof RelatedResponse ) { < nl > + RelatedResponse relatedResponse = ( RelatedResponse ) update ; < nl > + applyRelated ( relatedResponse . getRelatedUsers ( ) , relatedResponse . getRelatedGroups ( ) , false ) ; < nl > + relatedResponse . getAfterApply ( ) . run ( ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / internal / RelatedResponse . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / internal / RelatedResponse . java < nl > new file mode 100644 < nl > index 0000000 . . a4280f9 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / internal / RelatedResponse . java < nl > @ @ - 0 , 0 + 1 , 32 @ @ < nl > + package im . actor . core . modules . updates . internal ; < nl > + < nl > + import java . util . ArrayList ; < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . api . ApiGroup ; < nl > + import im . actor . core . api . ApiUser ; < nl > + < nl > + public class RelatedResponse extends InternalUpdate { < nl > + < nl > + private List < ApiUser > relatedUsers ; < nl > + private List < ApiGroup > relatedGroups ; < nl > + private Runnable afterApply ; < nl > + < nl > + public RelatedResponse ( List < ApiUser > relatedUsers , List < ApiGroup > relatedGroups , Runnable afterApply ) { < nl > + this . relatedUsers = relatedUsers ; < nl > + this . relatedGroups = relatedGroups ; < nl > + this . afterApply = afterApply ; < nl > + } < nl > + < nl > + public List < ApiUser > getRelatedUsers ( ) { < nl > + return relatedUsers ; < nl > + } < nl > + < nl > + public List < ApiGroup > getRelatedGroups ( ) { < nl > + return relatedGroups ; < nl > + } < nl > + < nl > + public Runnable getAfterApply ( ) { < nl > + return afterApply ; < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / controllers / MainPhoneController . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / controllers / MainPhoneController . java 
 index 0178ac3 . . 9f23a2a 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / controllers / MainPhoneController . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / controllers / MainPhoneController . java 
 @ @ - 345 , 7 + 345 , 7 @ @ public class MainPhoneController extends MainBaseController { 
 
 onConfigireToolbarCustomView ( ab ) ; 
 
 - barTabs . setVisibility ( View . VISIBLE ) ; 
 + onShowToolbarCustomView ( ) ; 
 emptyContactsView . setVisibility ( View . GONE ) ; 
 syncInProgressView . setVisibility ( View . GONE ) ; 
 
 @ @ - 357 , 18 + 357 , 18 @ @ public class MainPhoneController extends MainBaseController { 
 Boolean isAppEmpty , Value < Boolean > Value2 ) { 
 if ( isAppEmpty ) { 
 if ( isAppLoaded ) { 
 - barTabs . setVisibility ( View . GONE ) ; 
 + onHideToolbarCustomView ( ) ; 
 emptyContactsView . setVisibility ( View . VISIBLE ) ; 
 syncInProgressView . setVisibility ( View . GONE ) ; 
 getActivity ( ) . invalidateOptionsMenu ( ) ; 
 } else { 
 - barTabs . setVisibility ( View . GONE ) ; 
 + onHideToolbarCustomView ( ) ; 
 emptyContactsView . setVisibility ( View . GONE ) ; 
 syncInProgressView . setVisibility ( View . VISIBLE ) ; 
 getActivity ( ) . invalidateOptionsMenu ( ) ; 
 } 
 } else { 
 - barTabs . setVisibility ( View . VISIBLE ) ; 
 + onShowToolbarCustomView ( ) ; 
 emptyContactsView . setVisibility ( View . GONE ) ; 
 syncInProgressView . setVisibility ( View . GONE ) ; 
 getActivity ( ) . invalidateOptionsMenu ( ) ; 
 @ @ - 377 , 6 + 377 , 14 @ @ public class MainPhoneController extends MainBaseController { 
 } ) ; 
 } 
 
 + private void onShowToolbarCustomView ( ) { 
 + barTabs . setVisibility ( View . VISIBLE ) ; 
 + } 
 + 
 + private void onHideToolbarCustomView ( ) { 
 + barTabs . setVisibility ( View . GONE ) ; 
 + } 
 + 
 protected void onConfigireToolbarCustomView ( ActionBar ab ) { 
 FrameLayout tabsContainer = new FrameLayout ( getActivity ( ) ) ; 
 barTabs = new PagerSlidingTabStrip ( getActivity ( ) ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 index 1bcb5fc . . da3d7f3 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import im . actor . core . api . ApiServiceExUserLeft ; 
 import im . actor . core . api . ApiServiceMessage ; 
 import im . actor . core . api . ApiStickerMessage ; 
 import im . actor . core . api . ApiTextMessage ; 
 + import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . content . internal . AbsContentContainer ; 
 import im . actor . core . entity . content . internal . AbsLocalContent ; 
 import im . actor . core . entity . content . internal . ContentLocalContainer ; 
 @ @ - 35 , 6 + 36 , 7 @ @ import im . actor . core . entity . content . internal . LocalPhoto ; 
 import im . actor . core . entity . content . internal . LocalVideo ; 
 import im . actor . core . entity . content . internal . LocalVoice ; 
 import im . actor . core . entity . content . internal . Sticker ; 
 + import im . actor . core . modules . ModuleContext ; 
 import im . actor . runtime . bser . BserParser ; 
 import im . actor . runtime . bser . BserValues ; 
 import im . actor . runtime . bser . BserWriter ; 
 @ @ - 186 , 4 + 188 , 7 @ @ public abstract class AbsContent { 
 public AbsContentContainer getContentContainer ( ) { 
 return contentContainer ; 
 } 
 + 
 + public void onIncoming ( Peer peer , ModuleContext context ) { 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java 
 index 5203b69 . . ce3fd85 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java 
 @ @ - 123 , 6 + 123 , 7 @ @ public class MessagesProcessor extends AbsModule { 
 
 / / Send to own read actor 
 ownReadActor ( ) . send ( new OwnReadActor . InMessage ( peer , message ) ) ; 
 + msgContent . onIncoming ( peer , context ( ) ) ; 
 } else { 
 / / Send to own read actor 
 ownReadActor ( ) . send ( new OwnReadActor . OutMessage ( peer , message . getSortDate ( ) ) ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Updates . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Updates . java 
 index b86f140 . . 8ce7757 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Updates . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Updates . java 
 @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . core . api . base . SeqUpdate ; 
 import im . actor . core . modules . events . NewSessionCreated ; 
 import im . actor . core . modules . updates . SequenceActor ; 
 import im . actor . core . modules . updates . internal . ExecuteAfter ; 
 + import im . actor . core . modules . updates . internal . RelatedResponse ; 
 import im . actor . core . network . parser . Update ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 @ @ - 67 , 6 + 68 , 19 @ @ public class Updates extends AbsModule implements BusSubscriber { 
 updateActor . send ( new ExecuteAfter ( seq , runnable ) ) ; 
 } 
 
 + public void executeRelatedResponse ( List < ApiUser > users , List < ApiGroup > groups , Runnable runnable ) { 
 + updateActor . send ( new RelatedResponse ( users , groups , runnable ) ) ; 
 + } 
 + 
 + public void executeRelatedResponse ( List < ApiUser > users , List < ApiGroup > groups , final ActorRef ref , final Runnable runnable ) { 
 + updateActor . send ( new RelatedResponse ( users , groups , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + ref . send ( runnable ) ; 
 + } 
 + } ) ) ; 
 + } 
 + 
 public void resetModule ( ) { 
 / / TODO : Implement 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 index b6d002a . . 638a2bb 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 @ @ - 2 , 7 + 2 , 11 @ @ package im . actor . core . modules . internal . messages ; 
 
 import java . io . IOException ; 
 import java . util . ArrayList ; 
 + import java . util . List ; 
 
 + import im . actor . core . api . ApiDialogGroup ; 
 + import im . actor . core . api . rpc . RequestLoadGroupedDialogs ; 
 + import im . actor . core . api . rpc . ResponseLoadGroupedDialogs ; 
 import im . actor . core . entity . Avatar ; 
 import im . actor . core . entity . DialogSpec ; 
 import im . actor . core . entity . Group ; 
 @ @ - 12 , 6 + 16 , 8 @ @ import im . actor . core . entity . User ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . internal . messages . entity . GroupedStorage ; 
 import im . actor . core . modules . utils . ModuleActor ; 
 + import im . actor . core . network . RpcCallback ; 
 + import im . actor . core . network . RpcException ; 
 import im . actor . core . viewmodel . DialogGroup ; 
 import im . actor . core . viewmodel . DialogSmall ; 
 import im . actor . core . viewmodel . DialogSpecVM ; 
 @ @ - 21 , 7 + 27 , 9 @ @ import im . actor . runtime . mvvm . MVVMCollection ; 
 public class GroupedDialogsActor extends ModuleActor { 
 
 private static final String PREFERENCE _ GROUPED = " dialogs . grouped " ; 
 + private static final String PREFERENCE _ GROUPED _ LOADED = " dialogs . grouped . loaded " ; 
 
 + private boolean isLoaded = false ; 
 private GroupedStorage storage ; 
 private MVVMCollection < DialogSpec , DialogSpecVM > specs ; 
 
 @ @ - 44 , 6 + 52 , 30 @ @ public class GroupedDialogsActor extends ModuleActor { 
 } 
 } 
 notifyVM ( ) ; 
 + 
 + isLoaded = preferences ( ) . getBool ( PREFERENCE _ GROUPED _ LOADED , false ) ; 
 + 
 + if ( ! isLoaded ) { 
 + request ( new RequestLoadGroupedDialogs ( ) , new RpcCallback < ResponseLoadGroupedDialogs > ( ) { 
 + @ Override 
 + public void onResult ( final ResponseLoadGroupedDialogs response ) { 
 + updates ( ) . executeRelatedResponse ( response . getUsers ( ) , response . getGroups ( ) , 
 + self ( ) , 
 + new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + List < ApiDialogGroup > dialogGroups = response . getDialogs ( ) ; 
 + storage . getGroupPeers ( ) . clear ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( RpcException e ) { 
 + / / Ignore 
 + } 
 + } ) ; 
 + } 
 } 
 
 private void onNewMessage ( Peer peer , long sortDate , int counter ) { 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 index 6c8f986 . . df0f9a1 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 @ @ - 55 , 6 + 55 , 7 @ @ import im . actor . core . modules . updates . internal . GroupCreated ; 
 import im . actor . core . modules . updates . internal . InternalUpdate ; 
 import im . actor . core . modules . updates . internal . LoggedIn ; 
 import im . actor . core . modules . updates . internal . MessagesHistoryLoaded ; 
 + import im . actor . core . modules . updates . internal . RelatedResponse ; 
 import im . actor . core . modules . updates . internal . UsersFounded ; 
 import im . actor . core . network . parser . Update ; 
 import im . actor . core . viewmodel . UserVM ; 
 @ @ - 132 , 6 + 133 , 10 @ @ public class UpdateProcessor extends AbsModule { 
 created . getCallback ( ) . onResult ( created . getGroup ( ) . getId ( ) ) ; 
 } 
 } ) ; 
 + } else if ( update instanceof RelatedResponse ) { 
 + RelatedResponse relatedResponse = ( RelatedResponse ) update ; 
 + applyRelated ( relatedResponse . getRelatedUsers ( ) , relatedResponse . getRelatedGroups ( ) , false ) ; 
 + relatedResponse . getAfterApply ( ) . run ( ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / internal / RelatedResponse . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / internal / RelatedResponse . java 
 new file mode 100644 
 index 0000000 . . a4280f9 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / internal / RelatedResponse . java 
 @ @ - 0 , 0 + 1 , 32 @ @ 
 + package im . actor . core . modules . updates . internal ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import im . actor . core . api . ApiGroup ; 
 + import im . actor . core . api . ApiUser ; 
 + 
 + public class RelatedResponse extends InternalUpdate { 
 + 
 + private List < ApiUser > relatedUsers ; 
 + private List < ApiGroup > relatedGroups ; 
 + private Runnable afterApply ; 
 + 
 + public RelatedResponse ( List < ApiUser > relatedUsers , List < ApiGroup > relatedGroups , Runnable afterApply ) { 
 + this . relatedUsers = relatedUsers ; 
 + this . relatedGroups = relatedGroups ; 
 + this . afterApply = afterApply ; 
 + } 
 + 
 + public List < ApiUser > getRelatedUsers ( ) { 
 + return relatedUsers ; 
 + } 
 + 
 + public List < ApiGroup > getRelatedGroups ( ) { 
 + return relatedGroups ; 
 + } 
 + 
 + public Runnable getAfterApply ( ) { 
 + return afterApply ; 
 + } 
 + }
