BLEU SCORE: 0.101471040084519

TEST MSG: feat ( iOS ) : Completed New Avatar implementation
GENERATED MSG: wip ( core + ios ) : Better Avatar prformance

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Suggestion / AAAutoCompleteCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Suggestion / AAAutoCompleteCell . swift < nl > index fe5d64b . . effd077 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Suggestion / AAAutoCompleteCell . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Suggestion / AAAutoCompleteCell . swift < nl > @ @ - 31 , 7 + 31 , 8 @ @ class AAAutoCompleteCell : AATableViewCell { < nl > } < nl > < nl > func bindData ( user : ACMentionFilterResult , highlightWord : String ) { < nl > - avatarView . bind ( user . mentionString , id : Int ( user . uid ) , avatar : user . avatar , clearPrev : true ) < nl > + < nl > + avatarView . bind ( user . mentionString , id : Int ( user . uid ) , avatar : user . avatar ) < nl > < nl > var nickText : String < nl > var nameText : String < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift < nl > index 99c380f . . 9582f31 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 	 < nl > @ @ - 364 , 12 + 364 , 6 @ @ public class AADialogCell : AATableViewCell , AABindedCell { < nl > self . counterViewBg . alpha = 0 < nl > } < nl > } < nl > - < nl > - public override func prepareForReuse ( ) { < nl > - super . prepareForReuse ( ) < nl > - < nl > - self . avatarView . unbind ( true ) < nl > - } < nl > } < nl > < nl > / / < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogListProcessor . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogListProcessor . swift < nl > index e04f5c9 . . fefaef7 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogListProcessor . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogListProcessor . swift 	 < nl > @ @ - 17 , 9 + 17 , 9 @ @ class AADialogListProcessor : NSObject , ARListProcessor { < nl > if d . senderId ! = 0 { < nl > uids . insert ( d . senderId ) < nl > } < nl > - if d . relatedUid ! = 0 { < nl > - uids . insert ( d . relatedUid ) < nl > - } < nl > + } < nl > + if d . relatedUid ! = 0 { < nl > + uids . insert ( d . relatedUid ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift < nl > index 649a8ac . . 638c2d2 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift 	 < nl > @ @ - 560 , 7 + 560 , 7 @ @ public class AAAvatarRow : AAManagedRow { < nl > if avatarPath ! = nil { < nl > res . avatarView . bind ( title ! , id : id ! , fileName : avatarPath ! ) < nl > } else { < nl > - res . avatarView . bind ( title ! , id : id ! , avatar : avatar , clearPrev : false ) < nl > + res . avatarView . bind ( title ! , id : id ! , avatar : avatar ) < nl > } < nl > < nl > if subtitleColor ! = nil { < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift < nl > index ee6acae . . 8095ecf 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift < nl > @ @ - 5 , 38 + 5 , 11 @ @ < nl > import UIKit < nl > import YYImage < nl > < nl > - public enum AAAvatarType { < nl > - case Rounded < nl > - case Square < nl > - } < nl > - < nl > public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { < nl > - < nl > - var avatarTyle : AAAvatarType = . Rounded { < nl > - didSet ( v ) { < nl > - self . layer . setNeedsDisplay ( ) < nl > - } < nl > - } < nl > - < nl > - / / var frameSize : Int = 0 < nl > - / / var avatarType : AAAvatarType = . Rounded < nl > - / / var placeholderImage : UIImage ? < nl > - / / < nl > - / / var enableAnimation : Bool = false < nl > - / / < nl > - / / private static let cacheSize = 10 < nl > - / / private static var avatarCache = Dictionary < Int , AASwiftlyLRU < Int64 , UIImage > > ( ) < nl > - / / < nl > - / / private var bindedFileId : jlong ! = nil < nl > - / / private var bindedTitle : String ! = nil < nl > - / / private var bindedId : jint ! = nil < nl > - / / < nl > - / / private var requestId : Int = 0 < nl > - / / private var callback : AAFileCallback ? = nil < nl > - < nl > + < nl > private var title : String ? < nl > private var id : Int ? < nl > - private var fileId : jlong ? < nl > + private var file : ACFileReference ? < nl > private var fileName : String ? < nl > private var showPlaceholder : Bool = false < nl > < nl > @ @ - 48 , 7 + 21 , 9 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { < nl > self . backgroundColor = UIColor . clearColor ( ) < nl > self . opaque = false < nl > self . contentMode = . Redraw ; < nl > - Actor . subscribeToDownloads ( self ) < nl > + if Actor . isLoggedIn ( ) { < nl > + Actor . subscribeToDownloads ( self ) < nl > + } < nl > } < nl > < nl > public required init ? ( coder aDecoder : NSCoder ) { < nl > @ @ - 56 , 13 + 31 , 15 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { < nl > } < nl > < nl > deinit { < nl > - Actor . unsubscribeFromDownloads ( self ) < nl > + if Actor . isLoggedIn ( ) { < nl > + Actor . unsubscribeFromDownloads ( self ) < nl > + } < nl > } < nl > < nl > public func onDownloadedWithLong ( fileId : jlong ) { < nl > - if self . fileId = = fileId { < nl > + if self . file ? . getFileId ( ) = = fileId { < nl > dispatchOnUi { < nl > - if self . fileId = = fileId { < nl > + if self . file ? . getFileId ( ) = = fileId { < nl > self . layer . setNeedsDisplay ( ) < nl > } < nl > } < nl > @ @ - 74 , 44 + 51 , 28 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { < nl > / / < nl > < nl > public func bind ( title : String , id : Int , fileName : String ? ) { < nl > - / / unbind ( ) < nl > - / / < nl > - / / title = title . smallValue ( ) < nl > - / / < nl > - / / self . bindedTitle = title < nl > - / / self . bindedId = - 1 < nl > - / / < nl > - / / image = nil < nl > - / / if ( fileName ! = nil ) { < nl > - / / image = UIImage ( contentsOfFile : CocoaFiles . pathFromDescriptor ( fileName ! ) ) < nl > - / / < nl > - / / if ( image ! = nil & & self . avatarType = = . Rounded ) { < nl > - / / image = image ! . roundImage ( self . frameSize ) < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / if ( image = = nil ) { < nl > - / / if ( self . placeholderImage = = nil ) { < nl > - / / self . image = Placeholders . avatarPlaceholder ( bindedId , size : frameSize , title : title , rounded : avatarType = = . Rounded ) ; < nl > - / / } < nl > - / / return < nl > - / / } < nl > + < nl > + self . title = title < nl > + self . id = id < nl > + < nl > + self . fileName = fileName < nl > + self . file = nil < nl > + self . showPlaceholder = false < nl > + < nl > + self . layer . setNeedsDisplay ( ) < nl > } < nl > < nl > - public func bind ( title : String , id : Int , avatar : ACAvatar ? , clearPrev : Bool = true ) { < nl > - < nl > + public func bind ( title : String , id : Int , avatar : ACAvatar ? ) { < nl > < nl > self . title = title < nl > self . id = id < nl > - self . fileName = nil < nl > < nl > + self . fileName = nil < nl > if avatar ? . smallImage ! = nil { < nl > - let fileRef = avatar ! . smallImage . fileReference ! < nl > - self . fileId = fileRef . getFileId ( ) < nl > + self . file = avatar ! . smallImage . fileReference ! < nl > self . showPlaceholder = false < nl > - Actor . startDownloadingWithReference ( fileRef ) < nl > } else { < nl > - self . fileId = nil < nl > + self . file = nil < nl > self . showPlaceholder = true < nl > } < nl > < nl > @ @ - 119 , 51 + 80 , 16 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { < nl > } < nl > < nl > public func unbind ( ) { < nl > - self . unbind ( true ) < nl > + self . title = nil < nl > + self . id = nil < nl > + < nl > + self . fileName = nil < nl > + self . file = nil < nl > + self . showPlaceholder = false < nl > + < nl > + self . layer . setNeedsDisplay ( ) < nl > } < nl > < nl > - public func unbind ( clearPrev : Bool ) { < nl > - / / if ( clearPrev ) { < nl > - / / self . image = ( self . placeholderImage ! = nil ) ? self . placeholderImage : nil < nl > - / / } < nl > - / / self . bindedId = nil < nl > - / / self . bindedTitle = nil < nl > - / / < nl > - / / if ( bindedFileId ! = nil ) { < nl > - / / let bfid = bindedFileId < nl > - / / let c = callback < nl > - / / dispatchBackground { < nl > - / / Actor . unbindRawFileWithFileId ( bfid ! , autoCancel : false , withCallback : c ) < nl > - / / } < nl > - / / bindedFileId = nil < nl > - / / callback = nil < nl > - / / requestId + + ; < nl > - / / } < nl > - } < nl > - / / < nl > - / / / / < nl > - / / / / Caching < nl > - / / / / < nl > - / / < nl > - / / private func checkCache ( size : Int , id : Int64 ) - > UIImage ? { < nl > - / / if let cache = AAAvatarView . avatarCache [ size ] { < nl > - / / if let img = cache [ id ] { < nl > - / / return img < nl > - / / } < nl > - / / } < nl > - / / return nil < nl > - / / } < nl > - / / < nl > - / / private func putToCache ( size : Int , id : Int64 , image : UIImage ) { < nl > - / / if let cache = AAAvatarView . avatarCache [ size ] { < nl > - / / cache [ id ] = image < nl > - / / } else { < nl > - / / let cache = AASwiftlyLRU < jlong , UIImage > ( capacity : AAAvatarView . cacheSize ) ; < nl > - / / cache [ id ] = image < nl > - / / AAAvatarView . avatarCache . updateValue ( cache , forKey : size ) < nl > - / / } < nl > - / / } < nl > - < nl > public override class func layerClass ( ) - > AnyClass { < nl > return YYAsyncLayer . self < nl > } < nl > @ @ - 171 , 10 + 97 , 10 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { < nl > public func newAsyncDisplayTask ( ) - > YYAsyncLayerDisplayTask { < nl > let res = YYAsyncLayerDisplayTask ( ) < nl > < nl > - let _ id = id ! < nl > - let _ title = title ! < nl > + let _ id = id < nl > + let _ title = title < nl > let _ fileName = fileName < nl > - let _ fileId = fileId < nl > + let _ file = file < nl > let _ showPlaceholder = showPlaceholder < nl > < nl > res . display = { ( context : CGContext , size : CGSize , isCancelled : ( ) - > Bool ) - > ( ) in < nl > @ @ - 183 , 14 + 109 , 16 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { < nl > let filePath : String ? < nl > if _ fileName ! = nil { < nl > filePath = _ fileName < nl > - } else if _ fileId ! = nil { < nl > - let desc = Actor . findDownloadedDescriptorWithFileId ( _ fileId ! ) < nl > + } else if _ file ! = nil { < nl > + let desc = Actor . findDownloadedDescriptorWithFileId ( _ file ! . getFileId ( ) ) < nl > if isCancelled ( ) { < nl > return < nl > } < nl > if desc ! = nil { < nl > filePath = CocoaFiles . pathFromDescriptor ( desc ! ) < nl > } else { < nl > + / / Request if not available < nl > + Actor . startDownloadingWithReference ( _ file ! ) < nl > filePath = nil < nl > } < nl > } else { < nl > @ @ - 202 , 10 + 130 , 10 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { < nl > } < nl > < nl > < nl > - if filePath = = nil & & _ showPlaceholder { < nl > + if filePath = = nil & & _ showPlaceholder & & _ id ! = nil & & _ title ! = nil { < nl > < nl > let colors = ActorSDK . sharedActor ( ) . style . avatarColors < nl > - let color = colors [ _ id % colors . count ] . CGColor < nl > + let color = colors [ _ id ! % colors . count ] . CGColor < nl > < nl > / / Background < nl > < nl > @ @ - 239 , 7 + 167 , 7 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { < nl > style . alignment = NSTextAlignment . Center < nl > style . lineBreakMode = NSLineBreakMode . ByWordWrapping < nl > < nl > - let short = _ title . trim ( ) . smallValue ( ) < nl > + let short = _ title ! . trim ( ) . smallValue ( ) < nl > < nl > short . drawInRect ( rect , withAttributes : [ NSParagraphStyleAttributeName : style , NSFontAttributeName : font , < nl > NSForegroundColorAttributeName : ActorSDK . sharedActor ( ) . style . avatarTextColor ] ) < nl > @ @ - 260 , 8 + 188 , 6 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { < nl > / / Background < nl > UIBezierPath ( roundedRect : CGRectMake ( 0 , 0 , r * 2 , r * 2 ) , cornerRadius : r ) . addClip ( ) < nl > < nl > - / / let resized = image ! . resize ( r * 2 , h : r * 2 ) < nl > - < nl > if isCancelled ( ) { < nl > return < nl > } < nl > @ @ - 324 , 62 + 250 , 3 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { < nl > return res < nl > } < nl > } < nl > - / / < nl > - / / class Placeholders { < nl > - / / < nl > - / / class func avatarPlaceholder ( index : jint , size : Int , title : NSString , rounded : Bool ) - > UIImage { < nl > - / / let colors = ActorSDK . sharedActor ( ) . style . avatarColors < nl > - / / let color = colors [ Int ( abs ( index ) ) % colors . count ] . CGColor < nl > - / / < nl > - / / UIGraphicsBeginImageContextWithOptions ( CGSize ( width : size , height : size ) , false , UIScreen . mainScreen ( ) . scale ) ; < nl > - / / let context = UIGraphicsGetCurrentContext ( ) ; < nl > - / / < nl > - / / / / Background < nl > - / / < nl > - / / CGContextSetFillColorWithColor ( context , color ) ; < nl > - / / < nl > - / / if rounded { < nl > - / / CGContextAddArc ( context , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) ; < nl > - / / } else { < nl > - / / CGContextAddRect ( context , CGRect ( x : 0 , y : 0 , width : size , height : size ) ) < nl > - / / } < nl > - / / < nl > - / / CGContextDrawPath ( context , . Fill ) ; < nl > - / / < nl > - / / / / Text < nl > - / / < nl > - / / UIColor . whiteColor ( ) . set ( ) < nl > - / / < nl > - / / let font = UIFont . systemFontOfSize ( CGFloat ( size / 2 ) ) ; < nl > - / / var rect = CGRectMake ( 0 , 0 , CGFloat ( size ) , CGFloat ( size ) ) < nl > - / / rect . origin . y = round ( CGFloat ( size * 47 / 100 ) - font . pointSize / 2 ) ; < nl > - / / < nl > - / / let style : NSMutableParagraphStyle = NSParagraphStyle . defaultParagraphStyle ( ) . mutableCopy ( ) as ! NSMutableParagraphStyle < nl > - / / style . alignment = NSTextAlignment . Center < nl > - / / style . lineBreakMode = NSLineBreakMode . ByWordWrapping ; < nl > - / / < nl > - / / title . drawInRect ( rect , withAttributes : [ NSParagraphStyleAttributeName : style , NSFontAttributeName : font , < nl > - / / NSForegroundColorAttributeName : ActorSDK . sharedActor ( ) . style . avatarTextColor ] ) < nl > - / / < nl > - / / / / Border < nl > - / / < nl > - / / if rounded { < nl > - / / CGContextSetStrokeColorWithColor ( context , UIColor ( red : 0 , green : 0 , blue : 0 , alpha : 0x10 / 255 . 0 ) . CGColor ) ; < nl > - / / CGContextAddArc ( context , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) ; < nl > - / / CGContextDrawPath ( context , . Stroke ) ; < nl > - / / } < nl > - / / < nl > - / / let image = UIGraphicsGetImageFromCurrentImageContext ( ) ; < nl > - / / UIGraphicsEndImageContext ( ) ; < nl > - / / return image ; < nl > - / / } < nl > - / / < nl > - / / } < nl > - / / < nl > - / / private class AvatarLayer : YYAsyncLayer { < nl > - / / < nl > - / / } < nl > - / / < nl > - / / private class AvatarRender { < nl > - / / < nl > - / / }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift < nl > index 67b8ab1 . . d123257 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift < nl > @ @ - 10 , 7 + 10 , 7 @ @ public enum AAAvatarType { < nl > case Square < nl > } < nl > < nl > - public class AAAvatarView : UIView , YYAsyncLayerDelegate { < nl > + public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { < nl > < nl > var avatarTyle : AAAvatarType = . Rounded { < nl > didSet ( v ) { < nl > @ @ - 36 , 6 + 36 , 7 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate { < nl > < nl > private var title : String ? < nl > private var id : Int ? < nl > + private var fileId : jlong ? < nl > private var fileName : String ? < nl > private var showPlaceholder : Bool = false < nl > < nl > @ @ - 47 , 12 + 48 , 27 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate { < nl > self . backgroundColor = UIColor . clearColor ( ) < nl > self . opaque = false < nl > self . contentMode = . Redraw ; < nl > + Actor . subscribeToDownloads ( self ) < nl > } < nl > < nl > public required init ? ( coder aDecoder : NSCoder ) { < nl > fatalError ( " init ( coder : ) has not been implemented " ) < nl > } < nl > < nl > + deinit { < nl > + Actor . unsubscribeFromDownloads ( self ) < nl > + } < nl > + < nl > + public func onDownloadedWithLong ( fileId : jlong ) { < nl > + if self . fileId = = fileId { < nl > + dispatchOnUi { < nl > + if self . fileId = = fileId { < nl > + self . layer . setNeedsDisplay ( ) < nl > + } < nl > + } < nl > + } < nl > + } < nl > + < nl > / / < nl > / / Databinding < nl > / / < nl > @ @ - 82 , 141 + 98 , 24 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate { < nl > / / } < nl > } < nl > < nl > - public func bind ( title : String , id : Int , avatar : ACAvatar ! , clearPrev : Bool = true ) { < nl > + public func bind ( title : String , id : Int , avatar : ACAvatar ? , clearPrev : Bool = true ) { < nl > < nl > < nl > self . title = title < nl > self . id = id < nl > self . fileName = nil < nl > - self . showPlaceholder = false < nl > < nl > - self . layer . setNeedsDisplay ( ) < nl > + if avatar ? . smallImage ! = nil { < nl > + let fileRef = avatar ! . smallImage . fileReference ! < nl > + self . fileId = fileRef . getFileId ( ) < nl > + self . showPlaceholder = false < nl > + Actor . startDownloadingWithReference ( fileRef ) < nl > + } else { < nl > + self . fileId = nil < nl > + self . showPlaceholder = true < nl > + } < nl > < nl > - / / < nl > - / / title = title . smallValue ( ) < nl > - / / < nl > - / / let needSmallAvatar : Bool = frameSize < 100 < nl > - / / < nl > - / / var fileLocation : ACFileReference ? < nl > - / / if needSmallAvatar = = true { < nl > - / / fileLocation = avatar ? . smallImage ? . fileReference < nl > - / / } else { < nl > - / / fileLocation = avatar ? . smallImage ? . fileReference < nl > - / / } < nl > - / / < nl > - / / if ( bindedId ! = nil & & bindedId = = id ) { < nl > - / / var notChanged = true ; < nl > - / / < nl > - / / / / Is Preview changed < nl > - / / notChanged = notChanged & & bindedTitle = = title < nl > - / / < nl > - / / / / Is avatar changed < nl > - / / if ( fileLocation = = nil ) { < nl > - / / if ( bindedFileId ! = nil ) { < nl > - / / notChanged = false < nl > - / / } < nl > - / / } else if ( bindedFileId = = nil ) { < nl > - / / if ( fileLocation ! = nil ) { < nl > - / / notChanged = false < nl > - / / } < nl > - / / } else { < nl > - / / if ( bindedFileId ! = fileLocation ? . getFileId ( ) ) { < nl > - / / notChanged = false < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / if ( notChanged ) { < nl > - / / return < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / unbind ( clearPrev ) < nl > - / / < nl > - / / self . bindedId = id < nl > - / / self . bindedTitle = title < nl > - / / < nl > - / / if ( fileLocation = = nil ) { < nl > - / / < nl > - / / requestId + + < nl > - / / < nl > - / / self . image = nil < nl > - / / let callbackRequestId = requestId < nl > - / / let callbackBindedId = bindedId < nl > - / / dispatchBackground ( ) { < nl > - / / if callbackRequestId = = self . requestId { < nl > - / / < nl > - / / let image = Placeholders . avatarPlaceholder ( callbackBindedId , size : self . frameSize , title : title , rounded : self . avatarType = = . Rounded ) < nl > - / / < nl > - / / dispatchOnUi ( ) { < nl > - / / if callbackRequestId = = self . requestId { < nl > - / / self . image = image < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / return < nl > - / / } < nl > - / / < nl > - / / / / Load avatar < nl > - / / < nl > - / / let cached = checkCache ( frameSize , id : Int64 ( fileLocation ! . getFileId ( ) ) ) < nl > - / / if ( cached ! = nil ) { < nl > - / / self . image = cached < nl > - / / return < nl > - / / } < nl > - / / < nl > - / / if needSmallAvatar = = false { < nl > - / / let smallFileLocation = avatar ? . smallImage ? . fileReference < nl > - / / var smallAvatarCached = checkCache ( 40 , id : Int64 ( smallFileLocation ! . getFileId ( ) ) ) < nl > - / / if smallAvatarCached = = nil { < nl > - / / smallAvatarCached = checkCache ( 48 , id : Int64 ( smallFileLocation ! . getFileId ( ) ) ) < nl > - / / } < nl > - / / if smallAvatarCached ! = nil { < nl > - / / image = smallAvatarCached < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / requestId + + < nl > - / / < nl > - / / let callbackRequestId = requestId < nl > - / / self . bindedFileId = fileLocation ? . getFileId ( ) < nl > - / / self . callback = AAFileCallback ( onDownloaded : { ( reference ) - > ( ) in < nl > - / / < nl > - / / if ( callbackRequestId ! = self . requestId ) { < nl > - / / return ; < nl > - / / } < nl > - / / < nl > - / / var image = UIImage ( contentsOfFile : CocoaFiles . pathFromDescriptor ( reference ) ) ; < nl > - / / < nl > - / / if ( image = = nil ) { < nl > - / / return < nl > - / / } < nl > - / / < nl > - / / if ( self . avatarType = = . Rounded ) { < nl > - / / image = image ! . roundImage ( self . frameSize ) < nl > - / / } < nl > - / / < nl > - / / dispatchOnUi { < nl > - / / if ( callbackRequestId ! = self . requestId ) { < nl > - / / return ; < nl > - / / } < nl > - / / < nl > - / / self . putToCache ( self . frameSize , id : Int64 ( self . bindedFileId ! ) , image : image ! ) < nl > - / / if ( self . enableAnimation ) { < nl > - / / UIView . transitionWithView ( self , duration : 0 . 4 , options : UIViewAnimationOptions . TransitionCrossDissolve , animations : { ( ) - > Void in < nl > - / / self . image = image ; < nl > - / / } , completion : nil ) < nl > - / / } else { < nl > - / / self . image = image ; < nl > - / / } < nl > - / / } < nl > - / / } ) < nl > - / / let fl = fileLocation < nl > - / / let c = callback < nl > - / / dispatchBackground { < nl > - / / Actor . bindRawFileWithReference ( fl , autoStart : true , withCallback : c ) < nl > - / / } < nl > + self . layer . setNeedsDisplay ( ) < nl > } < nl > < nl > public func unbind ( ) { < nl > @ @ - 274 , 102 + 173 , 167 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate { < nl > < nl > let _ id = id ! < nl > let _ title = title ! < nl > + let _ fileName = fileName < nl > + let _ fileId = fileId < nl > + let _ showPlaceholder = showPlaceholder < nl > < nl > res . display = { ( context : CGContext , size : CGSize , isCancelled : ( ) - > Bool ) - > ( ) in < nl > - let r = min ( size . width , size . height ) / 2 < nl > - let colors = ActorSDK . sharedActor ( ) . style . avatarColors < nl > - let color = colors [ _ id % colors . count ] . CGColor < nl > < nl > - / / Background < nl > - < nl > - CGContextSetFillColorWithColor ( context , color ) < nl > - < nl > - CGContextAddArc ( context , r , r , r , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) < nl > - < nl > - CGContextDrawPath ( context , . Fill ) < nl > - < nl > - / / Text < nl > + let r = min ( size . width , size . height ) / 2 < nl > + let filePath : String ? < nl > + if _ fileName ! = nil { < nl > + filePath = _ fileName < nl > + } else if _ fileId ! = nil { < nl > + let desc = Actor . findDownloadedDescriptorWithFileId ( _ fileId ! ) < nl > + if desc ! = nil { < nl > + filePath = CocoaFiles . pathFromDescriptor ( desc ! ) < nl > + } else { < nl > + filePath = nil < nl > + } < nl > + } else { < nl > + filePath = nil < nl > + } < nl > < nl > - UIColor . whiteColor ( ) . set ( ) < nl > + if isCancelled ( ) { < nl > + return < nl > + } < nl > < nl > - let font = UIFont . systemFontOfSize ( r ) < nl > - var rect = CGRectMake ( 0 , 0 , r * 2 , r * 2 ) < nl > - rect . origin . y = round ( CGFloat ( r * 2 * 47 / 100 ) - font . pointSize / 2 ) ; < nl > < nl > - let style : NSMutableParagraphStyle = NSParagraphStyle . defaultParagraphStyle ( ) . mutableCopy ( ) as ! NSMutableParagraphStyle < nl > - style . alignment = NSTextAlignment . Center < nl > - style . lineBreakMode = NSLineBreakMode . ByWordWrapping ; < nl > + if filePath = = nil & & _ showPlaceholder { < nl > < nl > - let short = _ title . trim ( ) . smallValue ( ) < nl > + let colors = ActorSDK . sharedActor ( ) . style . avatarColors < nl > + let color = colors [ _ id % colors . count ] . CGColor < nl > + < nl > + / / Background < nl > + < nl > + CGContextSetFillColorWithColor ( context , color ) < nl > + < nl > + CGContextAddArc ( context , r , r , r , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) < nl > + < nl > + CGContextDrawPath ( context , . Fill ) < nl > + < nl > + / / Text < nl > + < nl > + UIColor . whiteColor ( ) . set ( ) < nl > + < nl > + let font = UIFont . systemFontOfSize ( r ) < nl > + var rect = CGRectMake ( 0 , 0 , r * 2 , r * 2 ) < nl > + rect . origin . y = round ( CGFloat ( r * 2 * 47 / 100 ) - font . pointSize / 2 ) < nl > + < nl > + let style : NSMutableParagraphStyle = NSParagraphStyle . defaultParagraphStyle ( ) . mutableCopy ( ) as ! NSMutableParagraphStyle < nl > + style . alignment = NSTextAlignment . Center < nl > + style . lineBreakMode = NSLineBreakMode . ByWordWrapping < nl > + < nl > + let short = _ title . trim ( ) . smallValue ( ) < nl > + < nl > + short . drawInRect ( rect , withAttributes : [ NSParagraphStyleAttributeName : style , NSFontAttributeName : font , < nl > + NSForegroundColorAttributeName : ActorSDK . sharedActor ( ) . style . avatarTextColor ] ) < nl > + < nl > + if isCancelled ( ) { < nl > + return < nl > + } < nl > + } else if let fp = filePath { < nl > + < nl > + / / TODO : Load Image < nl > + < nl > + let image = UIImage ( contentsOfFile : fp ) < nl > + < nl > + if isCancelled ( ) { < nl > + return < nl > + } < nl > + < nl > + if image ! = nil { < nl > + image ! . drawInRect ( CGRectMake ( 0 , 0 , r * 2 , r * 2 ) ) < nl > + } else { < nl > + / / Clean BG < nl > + CGContextSetFillColorWithColor ( context , UIColor . whiteColor ( ) . CGColor ) < nl > + < nl > + CGContextAddArc ( context , r , r , r , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) < nl > + < nl > + CGContextDrawPath ( context , . Fill ) < nl > + } < nl > + < nl > + if isCancelled ( ) { < nl > + return < nl > + } < nl > + } else { < nl > + / / Clean BG < nl > + CGContextSetFillColorWithColor ( context , UIColor . whiteColor ( ) . CGColor ) < nl > + < nl > + CGContextAddArc ( context , r , r , r , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) < nl > + < nl > + CGContextDrawPath ( context , . Fill ) < nl > + < nl > + if isCancelled ( ) { < nl > + return < nl > + } < nl > + } < nl > < nl > - short . drawInRect ( rect , withAttributes : [ NSParagraphStyleAttributeName : style , NSFontAttributeName : font , < nl > - NSForegroundColorAttributeName : ActorSDK . sharedActor ( ) . style . avatarTextColor ] ) < nl > - < nl > / / Border < nl > < nl > - CGContextSetStrokeColorWithColor ( context , UIColor ( red : 0 , green : 0 , blue : 0 , alpha : 0x10 / 255 . 0 ) . CGColor ) ; < nl > - CGContextAddArc ( context , r , r , r , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) ; < nl > - CGContextDrawPath ( context , . Stroke ) ; < nl > + CGContextSetStrokeColorWithColor ( context , UIColor ( red : 0 , green : 0 , blue : 0 , alpha : 0x10 / 255 . 0 ) . CGColor ) < nl > + CGContextAddArc ( context , r , r , r , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) < nl > + CGContextDrawPath ( context , . Stroke ) < nl > } < nl > return res < nl > } < nl > } < nl > - < nl > - class Placeholders { < nl > - < nl > - class func avatarPlaceholder ( index : jint , size : Int , title : NSString , rounded : Bool ) - > UIImage { < nl > - let colors = ActorSDK . sharedActor ( ) . style . avatarColors < nl > - let color = colors [ Int ( abs ( index ) ) % colors . count ] . CGColor < nl > - < nl > - UIGraphicsBeginImageContextWithOptions ( CGSize ( width : size , height : size ) , false , UIScreen . mainScreen ( ) . scale ) ; < nl > - let context = UIGraphicsGetCurrentContext ( ) ; < nl > - < nl > - / / Background < nl > - < nl > - CGContextSetFillColorWithColor ( context , color ) ; < nl > - < nl > - if rounded { < nl > - CGContextAddArc ( context , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) ; < nl > - } else { < nl > - CGContextAddRect ( context , CGRect ( x : 0 , y : 0 , width : size , height : size ) ) < nl > - } < nl > - < nl > - CGContextDrawPath ( context , . Fill ) ; < nl > - < nl > - / / Text < nl > - < nl > - UIColor . whiteColor ( ) . set ( ) < nl > - < nl > - let font = UIFont . systemFontOfSize ( CGFloat ( size / 2 ) ) ; < nl > - var rect = CGRectMake ( 0 , 0 , CGFloat ( size ) , CGFloat ( size ) ) < nl > - rect . origin . y = round ( CGFloat ( size * 47 / 100 ) - font . pointSize / 2 ) ; < nl > - < nl > - let style : NSMutableParagraphStyle = NSParagraphStyle . defaultParagraphStyle ( ) . mutableCopy ( ) as ! NSMutableParagraphStyle < nl > - style . alignment = NSTextAlignment . Center < nl > - style . lineBreakMode = NSLineBreakMode . ByWordWrapping ; < nl > - < nl > - title . drawInRect ( rect , withAttributes : [ NSParagraphStyleAttributeName : style , NSFontAttributeName : font , < nl > - NSForegroundColorAttributeName : ActorSDK . sharedActor ( ) . style . avatarTextColor ] ) < nl > - < nl > - / / Border < nl > - < nl > - if rounded { < nl > - CGContextSetStrokeColorWithColor ( context , UIColor ( red : 0 , green : 0 , blue : 0 , alpha : 0x10 / 255 . 0 ) . CGColor ) ; < nl > - CGContextAddArc ( context , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) ; < nl > - CGContextDrawPath ( context , . Stroke ) ; < nl > - } < nl > - < nl > - let image = UIGraphicsGetImageFromCurrentImageContext ( ) ; < nl > - UIGraphicsEndImageContext ( ) ; < nl > - return image ; < nl > - } < nl > - < nl > - } < nl > - < nl > - private class AvatarLayer : YYAsyncLayer { < nl > - < nl > - } < nl > - < nl > - private class AvatarRender { < nl > - < nl > - } < nl > + / / < nl > + / / class Placeholders { < nl > + / / < nl > + / / class func avatarPlaceholder ( index : jint , size : Int , title : NSString , rounded : Bool ) - > UIImage { < nl > + / / let colors = ActorSDK . sharedActor ( ) . style . avatarColors < nl > + / / let color = colors [ Int ( abs ( index ) ) % colors . count ] . CGColor < nl > + / / < nl > + / / UIGraphicsBeginImageContextWithOptions ( CGSize ( width : size , height : size ) , false , UIScreen . mainScreen ( ) . scale ) ; < nl > + / / let context = UIGraphicsGetCurrentContext ( ) ; < nl > + / / < nl > + / / / / Background < nl > + / / < nl > + / / CGContextSetFillColorWithColor ( context , color ) ; < nl > + / / < nl > + / / if rounded { < nl > + / / CGContextAddArc ( context , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) ; < nl > + / / } else { < nl > + / / CGContextAddRect ( context , CGRect ( x : 0 , y : 0 , width : size , height : size ) ) < nl > + / / } < nl > + / / < nl > + / / CGContextDrawPath ( context , . Fill ) ; < nl > + / / < nl > + / / / / Text < nl > + / / < nl > + / / UIColor . whiteColor ( ) . set ( ) < nl > + / / < nl > + / / let font = UIFont . systemFontOfSize ( CGFloat ( size / 2 ) ) ; < nl > + / / var rect = CGRectMake ( 0 , 0 , CGFloat ( size ) , CGFloat ( size ) ) < nl > + / / rect . origin . y = round ( CGFloat ( size * 47 / 100 ) - font . pointSize / 2 ) ; < nl > + / / < nl > + / / let style : NSMutableParagraphStyle = NSParagraphStyle . defaultParagraphStyle ( ) . mutableCopy ( ) as ! NSMutableParagraphStyle < nl > + / / style . alignment = NSTextAlignment . Center < nl > + / / style . lineBreakMode = NSLineBreakMode . ByWordWrapping ; < nl > + / / < nl > + / / title . drawInRect ( rect , withAttributes : [ NSParagraphStyleAttributeName : style , NSFontAttributeName : font , < nl > + / / NSForegroundColorAttributeName : ActorSDK . sharedActor ( ) . style . avatarTextColor ] ) < nl > + / / < nl > + / / / / Border < nl > + / / < nl > + / / if rounded { < nl > + / / CGContextSetStrokeColorWithColor ( context , UIColor ( red : 0 , green : 0 , blue : 0 , alpha : 0x10 / 255 . 0 ) . CGColor ) ; < nl > + / / CGContextAddArc ( context , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) ; < nl > + / / CGContextDrawPath ( context , . Stroke ) ; < nl > + / / } < nl > + / / < nl > + / / let image = UIGraphicsGetImageFromCurrentImageContext ( ) ; < nl > + / / UIGraphicsEndImageContext ( ) ; < nl > + / / return image ; < nl > + / / } < nl > + / / < nl > + / / } < nl > + / / < nl > + / / private class AvatarLayer : YYAsyncLayer { < nl > + / / < nl > + / / } < nl > + / / < nl > + / / private class AvatarRender { < nl > + / / < nl > + / / } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 7e507d0 . . a003626 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 56 , 6 + 56 , 7 @ @ import im . actor . core . viewmodel . Command ; < nl > import im . actor . core . viewmodel . ConversationVM ; < nl > import im . actor . core . viewmodel . DialogGroupsVM ; < nl > import im . actor . core . viewmodel . FileCallback ; < nl > + import im . actor . core . viewmodel . FileEventCallback ; < nl > import im . actor . core . viewmodel . FileVM ; < nl > import im . actor . core . viewmodel . FileVMCallback ; < nl > import im . actor . core . viewmodel . GroupAvatarVM ; < nl > @ @ - 1667 , 6 + 1668 , 26 @ @ public class Messenger { < nl > return modules . getFilesModule ( ) . getDownloadedDescriptor ( fileId ) ; < nl > } < nl > < nl > + / * * < nl > + * Subscribing to download events < nl > + * < nl > + * @ param callback subscribe callback < nl > + * / < nl > + @ ObjectiveCName ( " subscribeToDownloads : " ) < nl > + public void subscribeToDownloads ( FileEventCallback callback ) { < nl > + modules . getFilesModule ( ) . subscribe ( callback ) ; < nl > + } < nl > + < nl > + / * * < nl > + * Unsubscribing from download events < nl > + * < nl > + * @ param callback unsubscribe callback < nl > + * / < nl > + @ ObjectiveCName ( " unsubscribeFromDownloads : " ) < nl > + public void unsubscribeFromDownloads ( FileEventCallback callback ) { < nl > + modules . getFilesModule ( ) . unsubscribe ( callback ) ; < nl > + } < nl > + < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Settings < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / FilesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / FilesModule . java < nl > index 3941b36 . . c7b5d94 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / FilesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / FilesModule . java < nl > @ @ - 14 , 6 + 14 , 7 @ @ import im . actor . core . modules . internal . file . UploadManager ; < nl > import im . actor . core . modules . internal . file . entity . Downloaded ; < nl > import im . actor . core . util . BaseKeyValueEngine ; < nl > import im . actor . core . viewmodel . FileCallback ; < nl > + import im . actor . core . viewmodel . FileEventCallback ; < nl > import im . actor . core . viewmodel . UploadFileCallback ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > @ @ - 70 , 6 + 71 , 14 @ @ public class FilesModule extends AbsModule { < nl > return downloadedEngine ; < nl > } < nl > < nl > + public void subscribe ( FileEventCallback callback ) { < nl > + downloadManager . send ( new DownloadManager . SubscribeToDownloads ( callback ) ) ; < nl > + } < nl > + < nl > + public void unsubscribe ( FileEventCallback callback ) { < nl > + downloadManager . send ( new DownloadManager . UnsubscribeToDownloads ( callback ) ) ; < nl > + } < nl > + < nl > public void bindFile ( FileReference fileReference , boolean isAutostart , FileCallback callback ) { < nl > downloadManager . send ( new DownloadManager . BindDownload ( fileReference , isAutostart , callback ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java < nl > index 678084a . . 5f8926c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java < nl > @ @ - 4 , 6 + 4 , 7 @ @ < nl > < nl > package im . actor . core . modules . internal . file ; < nl > < nl > + import java . lang . ref . WeakReference ; < nl > import java . util . ArrayList ; < nl > < nl > import im . actor . core . entity . FileReference ; < nl > @ @ - 12 , 6 + 13 , 7 @ @ import im . actor . core . modules . internal . file . entity . Downloaded ; < nl > import im . actor . core . util . ModuleActor ; < nl > import im . actor . core . util . RandomUtils ; < nl > import im . actor . core . viewmodel . FileCallback ; < nl > + import im . actor . core . viewmodel . FileEventCallback ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > @ @ - 28 , 7 + 30 , 9 @ @ public class DownloadManager extends ModuleActor { < nl > < nl > private boolean LOG ; < nl > < nl > - private ArrayList < QueueItem > queue = new ArrayList < QueueItem > ( ) ; < nl > + private ArrayList < WeakCallbackHolder > callbacks = new ArrayList < > ( ) ; < nl > + < nl > + private ArrayList < QueueItem > queue = new ArrayList < > ( ) ; < nl > < nl > private KeyValueEngine < Downloaded > downloaded ; < nl > < nl > @ @ - 339 , 6 + 343 , 33 @ @ public class DownloadManager extends ModuleActor { < nl > checkQueue ( ) ; < nl > } < nl > < nl > + / / Callback < nl > + < nl > + private void subscribe ( FileEventCallback callback ) { < nl > + callbacks . add ( new WeakCallbackHolder ( callback ) ) ; < nl > + cleanWeakSubscribers ( ) ; < nl > + } < nl > + < nl > + private void unsubscribe ( FileEventCallback callback ) { < nl > + for ( WeakCallbackHolder callbackHolder : callbacks ) { < nl > + if ( callbackHolder . getCallbackWeakReference ( ) = = callback ) { < nl > + callbacks . remove ( callbackHolder ) ; < nl > + break ; < nl > + } < nl > + } < nl > + cleanWeakSubscribers ( ) ; < nl > + } < nl > + < nl > + private void cleanWeakSubscribers ( ) { < nl > + ArrayList < WeakCallbackHolder > toRemove = new ArrayList < > ( ) ; < nl > + for ( WeakCallbackHolder callbackHolder : callbacks ) { < nl > + if ( callbackHolder . getCallbackWeakReference ( ) = = null ) { < nl > + toRemove . add ( callbackHolder ) ; < nl > + } < nl > + } < nl > + callbacks . removeAll ( toRemove ) ; < nl > + } < nl > + < nl > / / Queue processing < nl > < nl > private void checkQueue ( ) { < nl > @ @ - 413 , 7 + 444 , 7 @ @ public class DownloadManager extends ModuleActor { < nl > } < nl > } < nl > < nl > - public void onDownloaded ( long fileId , final FileSystemReference reference ) { < nl > + public void onDownloaded ( final long fileId , final FileSystemReference reference ) { < nl > if ( LOG ) { < nl > Log . d ( TAG , " onDownloaded file # " + fileId ) ; < nl > } < nl > @ @ - 432 , 6 + 463 , 18 @ @ public class DownloadManager extends ModuleActor { < nl > queue . remove ( queueItem ) ; < nl > queueItem . taskRef . send ( PoisonPill . INSTANCE ) ; < nl > < nl > + for ( final WeakCallbackHolder weakReference : callbacks ) { < nl > + final FileEventCallback callback = weakReference . getCallbackWeakReference ( ) . get ( ) ; < nl > + if ( callback ! = null ) { < nl > + im . actor . runtime . Runtime . dispatch ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onDownloaded ( fileId ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } < nl > + < nl > for ( final FileCallback fileCallback : queueItem . callbacks ) { < nl > im . actor . runtime . Runtime . dispatch ( new Runnable ( ) { < nl > @ Override < nl > @ @ - 540 , 6 + 583 , 10 @ @ public class DownloadManager extends ModuleActor { < nl > } else if ( message instanceof RequestState ) { < nl > RequestState requestState = ( RequestState ) message ; < nl > requestState ( requestState . getFileId ( ) , requestState . getCallback ( ) ) ; < nl > + } else if ( message instanceof SubscribeToDownloads ) { < nl > + subscribe ( ( ( SubscribeToDownloads ) message ) . getCallback ( ) ) ; < nl > + } else if ( message instanceof UnsubscribeToDownloads ) { < nl > + unsubscribe ( ( ( UnsubscribeToDownloads ) message ) . getCallback ( ) ) ; < nl > } else { < nl > drop ( message ) ; < nl > } < nl > @ @ - 683 , 5 + 730 , 40 @ @ public class DownloadManager extends ModuleActor { < nl > } < nl > } < nl > < nl > + public static class SubscribeToDownloads { < nl > + private FileEventCallback callback ; < nl > + < nl > + public SubscribeToDownloads ( FileEventCallback callback ) { < nl > + this . callback = callback ; < nl > + } < nl > + < nl > + public FileEventCallback getCallback ( ) { < nl > + return callback ; < nl > + } < nl > + } < nl > + < nl > + public static class UnsubscribeToDownloads { < nl > + private FileEventCallback callback ; < nl > + < nl > + public UnsubscribeToDownloads ( FileEventCallback callback ) { < nl > + this . callback = callback ; < nl > + } < nl > + < nl > + public FileEventCallback getCallback ( ) { < nl > + return callback ; < nl > + } < nl > + } < nl > + < nl > + private class WeakCallbackHolder { < nl > + private WeakReference < FileEventCallback > callbackWeakReference ; < nl > + < nl > + public WeakCallbackHolder ( FileEventCallback callbackWeakReference ) { < nl > + this . callbackWeakReference = new WeakReference < > ( callbackWeakReference ) ; < nl > + } < nl > + < nl > + public WeakReference < FileEventCallback > getCallbackWeakReference ( ) { < nl > + return callbackWeakReference ; < nl > + } < nl > + } < nl > / / endregion < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / FileEventCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / FileEventCallback . java < nl > new file mode 100644 < nl > index 0000000 . . 661096e < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / FileEventCallback . java < nl > @ @ - 0 , 0 + 1 , 5 @ @ < nl > + package im . actor . core . viewmodel ; < nl > + < nl > + public interface FileEventCallback { < nl > + void onDownloaded ( long fileId ) ; < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Suggestion / AAAutoCompleteCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Suggestion / AAAutoCompleteCell . swift 
 index fe5d64b . . effd077 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Suggestion / AAAutoCompleteCell . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Suggestion / AAAutoCompleteCell . swift 
 @ @ - 31 , 7 + 31 , 8 @ @ class AAAutoCompleteCell : AATableViewCell { 
 } 
 
 func bindData ( user : ACMentionFilterResult , highlightWord : String ) { 
 - avatarView . bind ( user . mentionString , id : Int ( user . uid ) , avatar : user . avatar , clearPrev : true ) 
 + 
 + avatarView . bind ( user . mentionString , id : Int ( user . uid ) , avatar : user . avatar ) 
 
 var nickText : String 
 var nameText : String 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 
 index 99c380f . . 9582f31 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 	 
 @ @ - 364 , 12 + 364 , 6 @ @ public class AADialogCell : AATableViewCell , AABindedCell { 
 self . counterViewBg . alpha = 0 
 } 
 } 
 - 
 - public override func prepareForReuse ( ) { 
 - super . prepareForReuse ( ) 
 - 
 - self . avatarView . unbind ( true ) 
 - } 
 } 
 
 / / 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogListProcessor . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogListProcessor . swift 
 index e04f5c9 . . fefaef7 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogListProcessor . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogListProcessor . swift 	 
 @ @ - 17 , 9 + 17 , 9 @ @ class AADialogListProcessor : NSObject , ARListProcessor { 
 if d . senderId ! = 0 { 
 uids . insert ( d . senderId ) 
 } 
 - if d . relatedUid ! = 0 { 
 - uids . insert ( d . relatedUid ) 
 - } 
 + } 
 + if d . relatedUid ! = 0 { 
 + uids . insert ( d . relatedUid ) 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift 
 index 649a8ac . . 638c2d2 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift 	 
 @ @ - 560 , 7 + 560 , 7 @ @ public class AAAvatarRow : AAManagedRow { 
 if avatarPath ! = nil { 
 res . avatarView . bind ( title ! , id : id ! , fileName : avatarPath ! ) 
 } else { 
 - res . avatarView . bind ( title ! , id : id ! , avatar : avatar , clearPrev : false ) 
 + res . avatarView . bind ( title ! , id : id ! , avatar : avatar ) 
 } 
 
 if subtitleColor ! = nil { 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift 
 index ee6acae . . 8095ecf 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift 
 @ @ - 5 , 38 + 5 , 11 @ @ 
 import UIKit 
 import YYImage 
 
 - public enum AAAvatarType { 
 - case Rounded 
 - case Square 
 - } 
 - 
 public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { 
 - 
 - var avatarTyle : AAAvatarType = . Rounded { 
 - didSet ( v ) { 
 - self . layer . setNeedsDisplay ( ) 
 - } 
 - } 
 - 
 - / / var frameSize : Int = 0 
 - / / var avatarType : AAAvatarType = . Rounded 
 - / / var placeholderImage : UIImage ? 
 - / / 
 - / / var enableAnimation : Bool = false 
 - / / 
 - / / private static let cacheSize = 10 
 - / / private static var avatarCache = Dictionary < Int , AASwiftlyLRU < Int64 , UIImage > > ( ) 
 - / / 
 - / / private var bindedFileId : jlong ! = nil 
 - / / private var bindedTitle : String ! = nil 
 - / / private var bindedId : jint ! = nil 
 - / / 
 - / / private var requestId : Int = 0 
 - / / private var callback : AAFileCallback ? = nil 
 - 
 + 
 private var title : String ? 
 private var id : Int ? 
 - private var fileId : jlong ? 
 + private var file : ACFileReference ? 
 private var fileName : String ? 
 private var showPlaceholder : Bool = false 
 
 @ @ - 48 , 7 + 21 , 9 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { 
 self . backgroundColor = UIColor . clearColor ( ) 
 self . opaque = false 
 self . contentMode = . Redraw ; 
 - Actor . subscribeToDownloads ( self ) 
 + if Actor . isLoggedIn ( ) { 
 + Actor . subscribeToDownloads ( self ) 
 + } 
 } 
 
 public required init ? ( coder aDecoder : NSCoder ) { 
 @ @ - 56 , 13 + 31 , 15 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { 
 } 
 
 deinit { 
 - Actor . unsubscribeFromDownloads ( self ) 
 + if Actor . isLoggedIn ( ) { 
 + Actor . unsubscribeFromDownloads ( self ) 
 + } 
 } 
 
 public func onDownloadedWithLong ( fileId : jlong ) { 
 - if self . fileId = = fileId { 
 + if self . file ? . getFileId ( ) = = fileId { 
 dispatchOnUi { 
 - if self . fileId = = fileId { 
 + if self . file ? . getFileId ( ) = = fileId { 
 self . layer . setNeedsDisplay ( ) 
 } 
 } 
 @ @ - 74 , 44 + 51 , 28 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { 
 / / 
 
 public func bind ( title : String , id : Int , fileName : String ? ) { 
 - / / unbind ( ) 
 - / / 
 - / / title = title . smallValue ( ) 
 - / / 
 - / / self . bindedTitle = title 
 - / / self . bindedId = - 1 
 - / / 
 - / / image = nil 
 - / / if ( fileName ! = nil ) { 
 - / / image = UIImage ( contentsOfFile : CocoaFiles . pathFromDescriptor ( fileName ! ) ) 
 - / / 
 - / / if ( image ! = nil & & self . avatarType = = . Rounded ) { 
 - / / image = image ! . roundImage ( self . frameSize ) 
 - / / } 
 - / / } 
 - / / 
 - / / if ( image = = nil ) { 
 - / / if ( self . placeholderImage = = nil ) { 
 - / / self . image = Placeholders . avatarPlaceholder ( bindedId , size : frameSize , title : title , rounded : avatarType = = . Rounded ) ; 
 - / / } 
 - / / return 
 - / / } 
 + 
 + self . title = title 
 + self . id = id 
 + 
 + self . fileName = fileName 
 + self . file = nil 
 + self . showPlaceholder = false 
 + 
 + self . layer . setNeedsDisplay ( ) 
 } 
 
 - public func bind ( title : String , id : Int , avatar : ACAvatar ? , clearPrev : Bool = true ) { 
 - 
 + public func bind ( title : String , id : Int , avatar : ACAvatar ? ) { 
 
 self . title = title 
 self . id = id 
 - self . fileName = nil 
 
 + self . fileName = nil 
 if avatar ? . smallImage ! = nil { 
 - let fileRef = avatar ! . smallImage . fileReference ! 
 - self . fileId = fileRef . getFileId ( ) 
 + self . file = avatar ! . smallImage . fileReference ! 
 self . showPlaceholder = false 
 - Actor . startDownloadingWithReference ( fileRef ) 
 } else { 
 - self . fileId = nil 
 + self . file = nil 
 self . showPlaceholder = true 
 } 
 
 @ @ - 119 , 51 + 80 , 16 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { 
 } 
 
 public func unbind ( ) { 
 - self . unbind ( true ) 
 + self . title = nil 
 + self . id = nil 
 + 
 + self . fileName = nil 
 + self . file = nil 
 + self . showPlaceholder = false 
 + 
 + self . layer . setNeedsDisplay ( ) 
 } 
 
 - public func unbind ( clearPrev : Bool ) { 
 - / / if ( clearPrev ) { 
 - / / self . image = ( self . placeholderImage ! = nil ) ? self . placeholderImage : nil 
 - / / } 
 - / / self . bindedId = nil 
 - / / self . bindedTitle = nil 
 - / / 
 - / / if ( bindedFileId ! = nil ) { 
 - / / let bfid = bindedFileId 
 - / / let c = callback 
 - / / dispatchBackground { 
 - / / Actor . unbindRawFileWithFileId ( bfid ! , autoCancel : false , withCallback : c ) 
 - / / } 
 - / / bindedFileId = nil 
 - / / callback = nil 
 - / / requestId + + ; 
 - / / } 
 - } 
 - / / 
 - / / / / 
 - / / / / Caching 
 - / / / / 
 - / / 
 - / / private func checkCache ( size : Int , id : Int64 ) - > UIImage ? { 
 - / / if let cache = AAAvatarView . avatarCache [ size ] { 
 - / / if let img = cache [ id ] { 
 - / / return img 
 - / / } 
 - / / } 
 - / / return nil 
 - / / } 
 - / / 
 - / / private func putToCache ( size : Int , id : Int64 , image : UIImage ) { 
 - / / if let cache = AAAvatarView . avatarCache [ size ] { 
 - / / cache [ id ] = image 
 - / / } else { 
 - / / let cache = AASwiftlyLRU < jlong , UIImage > ( capacity : AAAvatarView . cacheSize ) ; 
 - / / cache [ id ] = image 
 - / / AAAvatarView . avatarCache . updateValue ( cache , forKey : size ) 
 - / / } 
 - / / } 
 - 
 public override class func layerClass ( ) - > AnyClass { 
 return YYAsyncLayer . self 
 } 
 @ @ - 171 , 10 + 97 , 10 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { 
 public func newAsyncDisplayTask ( ) - > YYAsyncLayerDisplayTask { 
 let res = YYAsyncLayerDisplayTask ( ) 
 
 - let _ id = id ! 
 - let _ title = title ! 
 + let _ id = id 
 + let _ title = title 
 let _ fileName = fileName 
 - let _ fileId = fileId 
 + let _ file = file 
 let _ showPlaceholder = showPlaceholder 
 
 res . display = { ( context : CGContext , size : CGSize , isCancelled : ( ) - > Bool ) - > ( ) in 
 @ @ - 183 , 14 + 109 , 16 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { 
 let filePath : String ? 
 if _ fileName ! = nil { 
 filePath = _ fileName 
 - } else if _ fileId ! = nil { 
 - let desc = Actor . findDownloadedDescriptorWithFileId ( _ fileId ! ) 
 + } else if _ file ! = nil { 
 + let desc = Actor . findDownloadedDescriptorWithFileId ( _ file ! . getFileId ( ) ) 
 if isCancelled ( ) { 
 return 
 } 
 if desc ! = nil { 
 filePath = CocoaFiles . pathFromDescriptor ( desc ! ) 
 } else { 
 + / / Request if not available 
 + Actor . startDownloadingWithReference ( _ file ! ) 
 filePath = nil 
 } 
 } else { 
 @ @ - 202 , 10 + 130 , 10 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { 
 } 
 
 
 - if filePath = = nil & & _ showPlaceholder { 
 + if filePath = = nil & & _ showPlaceholder & & _ id ! = nil & & _ title ! = nil { 
 
 let colors = ActorSDK . sharedActor ( ) . style . avatarColors 
 - let color = colors [ _ id % colors . count ] . CGColor 
 + let color = colors [ _ id ! % colors . count ] . CGColor 
 
 / / Background 
 
 @ @ - 239 , 7 + 167 , 7 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { 
 style . alignment = NSTextAlignment . Center 
 style . lineBreakMode = NSLineBreakMode . ByWordWrapping 
 
 - let short = _ title . trim ( ) . smallValue ( ) 
 + let short = _ title ! . trim ( ) . smallValue ( ) 
 
 short . drawInRect ( rect , withAttributes : [ NSParagraphStyleAttributeName : style , NSFontAttributeName : font , 
 NSForegroundColorAttributeName : ActorSDK . sharedActor ( ) . style . avatarTextColor ] ) 
 @ @ - 260 , 8 + 188 , 6 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { 
 / / Background 
 UIBezierPath ( roundedRect : CGRectMake ( 0 , 0 , r * 2 , r * 2 ) , cornerRadius : r ) . addClip ( ) 
 
 - / / let resized = image ! . resize ( r * 2 , h : r * 2 ) 
 - 
 if isCancelled ( ) { 
 return 
 } 
 @ @ - 324 , 62 + 250 , 3 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { 
 return res 
 } 
 } 
 - / / 
 - / / class Placeholders { 
 - / / 
 - / / class func avatarPlaceholder ( index : jint , size : Int , title : NSString , rounded : Bool ) - > UIImage { 
 - / / let colors = ActorSDK . sharedActor ( ) . style . avatarColors 
 - / / let color = colors [ Int ( abs ( index ) ) % colors . count ] . CGColor 
 - / / 
 - / / UIGraphicsBeginImageContextWithOptions ( CGSize ( width : size , height : size ) , false , UIScreen . mainScreen ( ) . scale ) ; 
 - / / let context = UIGraphicsGetCurrentContext ( ) ; 
 - / / 
 - / / / / Background 
 - / / 
 - / / CGContextSetFillColorWithColor ( context , color ) ; 
 - / / 
 - / / if rounded { 
 - / / CGContextAddArc ( context , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) ; 
 - / / } else { 
 - / / CGContextAddRect ( context , CGRect ( x : 0 , y : 0 , width : size , height : size ) ) 
 - / / } 
 - / / 
 - / / CGContextDrawPath ( context , . Fill ) ; 
 - / / 
 - / / / / Text 
 - / / 
 - / / UIColor . whiteColor ( ) . set ( ) 
 - / / 
 - / / let font = UIFont . systemFontOfSize ( CGFloat ( size / 2 ) ) ; 
 - / / var rect = CGRectMake ( 0 , 0 , CGFloat ( size ) , CGFloat ( size ) ) 
 - / / rect . origin . y = round ( CGFloat ( size * 47 / 100 ) - font . pointSize / 2 ) ; 
 - / / 
 - / / let style : NSMutableParagraphStyle = NSParagraphStyle . defaultParagraphStyle ( ) . mutableCopy ( ) as ! NSMutableParagraphStyle 
 - / / style . alignment = NSTextAlignment . Center 
 - / / style . lineBreakMode = NSLineBreakMode . ByWordWrapping ; 
 - / / 
 - / / title . drawInRect ( rect , withAttributes : [ NSParagraphStyleAttributeName : style , NSFontAttributeName : font , 
 - / / NSForegroundColorAttributeName : ActorSDK . sharedActor ( ) . style . avatarTextColor ] ) 
 - / / 
 - / / / / Border 
 - / / 
 - / / if rounded { 
 - / / CGContextSetStrokeColorWithColor ( context , UIColor ( red : 0 , green : 0 , blue : 0 , alpha : 0x10 / 255 . 0 ) . CGColor ) ; 
 - / / CGContextAddArc ( context , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) ; 
 - / / CGContextDrawPath ( context , . Stroke ) ; 
 - / / } 
 - / / 
 - / / let image = UIGraphicsGetImageFromCurrentImageContext ( ) ; 
 - / / UIGraphicsEndImageContext ( ) ; 
 - / / return image ; 
 - / / } 
 - / / 
 - / / } 
 - / / 
 - / / private class AvatarLayer : YYAsyncLayer { 
 - / / 
 - / / } 
 - / / 
 - / / private class AvatarRender { 
 - / / 
 - / / }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift 
 index 67b8ab1 . . d123257 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift 
 @ @ - 10 , 7 + 10 , 7 @ @ public enum AAAvatarType { 
 case Square 
 } 
 
 - public class AAAvatarView : UIView , YYAsyncLayerDelegate { 
 + public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { 
 
 var avatarTyle : AAAvatarType = . Rounded { 
 didSet ( v ) { 
 @ @ - 36 , 6 + 36 , 7 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate { 
 
 private var title : String ? 
 private var id : Int ? 
 + private var fileId : jlong ? 
 private var fileName : String ? 
 private var showPlaceholder : Bool = false 
 
 @ @ - 47 , 12 + 48 , 27 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate { 
 self . backgroundColor = UIColor . clearColor ( ) 
 self . opaque = false 
 self . contentMode = . Redraw ; 
 + Actor . subscribeToDownloads ( self ) 
 } 
 
 public required init ? ( coder aDecoder : NSCoder ) { 
 fatalError ( " init ( coder : ) has not been implemented " ) 
 } 
 
 + deinit { 
 + Actor . unsubscribeFromDownloads ( self ) 
 + } 
 + 
 + public func onDownloadedWithLong ( fileId : jlong ) { 
 + if self . fileId = = fileId { 
 + dispatchOnUi { 
 + if self . fileId = = fileId { 
 + self . layer . setNeedsDisplay ( ) 
 + } 
 + } 
 + } 
 + } 
 + 
 / / 
 / / Databinding 
 / / 
 @ @ - 82 , 141 + 98 , 24 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate { 
 / / } 
 } 
 
 - public func bind ( title : String , id : Int , avatar : ACAvatar ! , clearPrev : Bool = true ) { 
 + public func bind ( title : String , id : Int , avatar : ACAvatar ? , clearPrev : Bool = true ) { 
 
 
 self . title = title 
 self . id = id 
 self . fileName = nil 
 - self . showPlaceholder = false 
 
 - self . layer . setNeedsDisplay ( ) 
 + if avatar ? . smallImage ! = nil { 
 + let fileRef = avatar ! . smallImage . fileReference ! 
 + self . fileId = fileRef . getFileId ( ) 
 + self . showPlaceholder = false 
 + Actor . startDownloadingWithReference ( fileRef ) 
 + } else { 
 + self . fileId = nil 
 + self . showPlaceholder = true 
 + } 
 
 - / / 
 - / / title = title . smallValue ( ) 
 - / / 
 - / / let needSmallAvatar : Bool = frameSize < 100 
 - / / 
 - / / var fileLocation : ACFileReference ? 
 - / / if needSmallAvatar = = true { 
 - / / fileLocation = avatar ? . smallImage ? . fileReference 
 - / / } else { 
 - / / fileLocation = avatar ? . smallImage ? . fileReference 
 - / / } 
 - / / 
 - / / if ( bindedId ! = nil & & bindedId = = id ) { 
 - / / var notChanged = true ; 
 - / / 
 - / / / / Is Preview changed 
 - / / notChanged = notChanged & & bindedTitle = = title 
 - / / 
 - / / / / Is avatar changed 
 - / / if ( fileLocation = = nil ) { 
 - / / if ( bindedFileId ! = nil ) { 
 - / / notChanged = false 
 - / / } 
 - / / } else if ( bindedFileId = = nil ) { 
 - / / if ( fileLocation ! = nil ) { 
 - / / notChanged = false 
 - / / } 
 - / / } else { 
 - / / if ( bindedFileId ! = fileLocation ? . getFileId ( ) ) { 
 - / / notChanged = false 
 - / / } 
 - / / } 
 - / / 
 - / / if ( notChanged ) { 
 - / / return 
 - / / } 
 - / / } 
 - / / 
 - / / unbind ( clearPrev ) 
 - / / 
 - / / self . bindedId = id 
 - / / self . bindedTitle = title 
 - / / 
 - / / if ( fileLocation = = nil ) { 
 - / / 
 - / / requestId + + 
 - / / 
 - / / self . image = nil 
 - / / let callbackRequestId = requestId 
 - / / let callbackBindedId = bindedId 
 - / / dispatchBackground ( ) { 
 - / / if callbackRequestId = = self . requestId { 
 - / / 
 - / / let image = Placeholders . avatarPlaceholder ( callbackBindedId , size : self . frameSize , title : title , rounded : self . avatarType = = . Rounded ) 
 - / / 
 - / / dispatchOnUi ( ) { 
 - / / if callbackRequestId = = self . requestId { 
 - / / self . image = image 
 - / / } 
 - / / } 
 - / / } 
 - / / } 
 - / / 
 - / / return 
 - / / } 
 - / / 
 - / / / / Load avatar 
 - / / 
 - / / let cached = checkCache ( frameSize , id : Int64 ( fileLocation ! . getFileId ( ) ) ) 
 - / / if ( cached ! = nil ) { 
 - / / self . image = cached 
 - / / return 
 - / / } 
 - / / 
 - / / if needSmallAvatar = = false { 
 - / / let smallFileLocation = avatar ? . smallImage ? . fileReference 
 - / / var smallAvatarCached = checkCache ( 40 , id : Int64 ( smallFileLocation ! . getFileId ( ) ) ) 
 - / / if smallAvatarCached = = nil { 
 - / / smallAvatarCached = checkCache ( 48 , id : Int64 ( smallFileLocation ! . getFileId ( ) ) ) 
 - / / } 
 - / / if smallAvatarCached ! = nil { 
 - / / image = smallAvatarCached 
 - / / } 
 - / / } 
 - / / 
 - / / requestId + + 
 - / / 
 - / / let callbackRequestId = requestId 
 - / / self . bindedFileId = fileLocation ? . getFileId ( ) 
 - / / self . callback = AAFileCallback ( onDownloaded : { ( reference ) - > ( ) in 
 - / / 
 - / / if ( callbackRequestId ! = self . requestId ) { 
 - / / return ; 
 - / / } 
 - / / 
 - / / var image = UIImage ( contentsOfFile : CocoaFiles . pathFromDescriptor ( reference ) ) ; 
 - / / 
 - / / if ( image = = nil ) { 
 - / / return 
 - / / } 
 - / / 
 - / / if ( self . avatarType = = . Rounded ) { 
 - / / image = image ! . roundImage ( self . frameSize ) 
 - / / } 
 - / / 
 - / / dispatchOnUi { 
 - / / if ( callbackRequestId ! = self . requestId ) { 
 - / / return ; 
 - / / } 
 - / / 
 - / / self . putToCache ( self . frameSize , id : Int64 ( self . bindedFileId ! ) , image : image ! ) 
 - / / if ( self . enableAnimation ) { 
 - / / UIView . transitionWithView ( self , duration : 0 . 4 , options : UIViewAnimationOptions . TransitionCrossDissolve , animations : { ( ) - > Void in 
 - / / self . image = image ; 
 - / / } , completion : nil ) 
 - / / } else { 
 - / / self . image = image ; 
 - / / } 
 - / / } 
 - / / } ) 
 - / / let fl = fileLocation 
 - / / let c = callback 
 - / / dispatchBackground { 
 - / / Actor . bindRawFileWithReference ( fl , autoStart : true , withCallback : c ) 
 - / / } 
 + self . layer . setNeedsDisplay ( ) 
 } 
 
 public func unbind ( ) { 
 @ @ - 274 , 102 + 173 , 167 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate { 
 
 let _ id = id ! 
 let _ title = title ! 
 + let _ fileName = fileName 
 + let _ fileId = fileId 
 + let _ showPlaceholder = showPlaceholder 
 
 res . display = { ( context : CGContext , size : CGSize , isCancelled : ( ) - > Bool ) - > ( ) in 
 - let r = min ( size . width , size . height ) / 2 
 - let colors = ActorSDK . sharedActor ( ) . style . avatarColors 
 - let color = colors [ _ id % colors . count ] . CGColor 
 
 - / / Background 
 - 
 - CGContextSetFillColorWithColor ( context , color ) 
 - 
 - CGContextAddArc ( context , r , r , r , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) 
 - 
 - CGContextDrawPath ( context , . Fill ) 
 - 
 - / / Text 
 + let r = min ( size . width , size . height ) / 2 
 + let filePath : String ? 
 + if _ fileName ! = nil { 
 + filePath = _ fileName 
 + } else if _ fileId ! = nil { 
 + let desc = Actor . findDownloadedDescriptorWithFileId ( _ fileId ! ) 
 + if desc ! = nil { 
 + filePath = CocoaFiles . pathFromDescriptor ( desc ! ) 
 + } else { 
 + filePath = nil 
 + } 
 + } else { 
 + filePath = nil 
 + } 
 
 - UIColor . whiteColor ( ) . set ( ) 
 + if isCancelled ( ) { 
 + return 
 + } 
 
 - let font = UIFont . systemFontOfSize ( r ) 
 - var rect = CGRectMake ( 0 , 0 , r * 2 , r * 2 ) 
 - rect . origin . y = round ( CGFloat ( r * 2 * 47 / 100 ) - font . pointSize / 2 ) ; 
 
 - let style : NSMutableParagraphStyle = NSParagraphStyle . defaultParagraphStyle ( ) . mutableCopy ( ) as ! NSMutableParagraphStyle 
 - style . alignment = NSTextAlignment . Center 
 - style . lineBreakMode = NSLineBreakMode . ByWordWrapping ; 
 + if filePath = = nil & & _ showPlaceholder { 
 
 - let short = _ title . trim ( ) . smallValue ( ) 
 + let colors = ActorSDK . sharedActor ( ) . style . avatarColors 
 + let color = colors [ _ id % colors . count ] . CGColor 
 + 
 + / / Background 
 + 
 + CGContextSetFillColorWithColor ( context , color ) 
 + 
 + CGContextAddArc ( context , r , r , r , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) 
 + 
 + CGContextDrawPath ( context , . Fill ) 
 + 
 + / / Text 
 + 
 + UIColor . whiteColor ( ) . set ( ) 
 + 
 + let font = UIFont . systemFontOfSize ( r ) 
 + var rect = CGRectMake ( 0 , 0 , r * 2 , r * 2 ) 
 + rect . origin . y = round ( CGFloat ( r * 2 * 47 / 100 ) - font . pointSize / 2 ) 
 + 
 + let style : NSMutableParagraphStyle = NSParagraphStyle . defaultParagraphStyle ( ) . mutableCopy ( ) as ! NSMutableParagraphStyle 
 + style . alignment = NSTextAlignment . Center 
 + style . lineBreakMode = NSLineBreakMode . ByWordWrapping 
 + 
 + let short = _ title . trim ( ) . smallValue ( ) 
 + 
 + short . drawInRect ( rect , withAttributes : [ NSParagraphStyleAttributeName : style , NSFontAttributeName : font , 
 + NSForegroundColorAttributeName : ActorSDK . sharedActor ( ) . style . avatarTextColor ] ) 
 + 
 + if isCancelled ( ) { 
 + return 
 + } 
 + } else if let fp = filePath { 
 + 
 + / / TODO : Load Image 
 + 
 + let image = UIImage ( contentsOfFile : fp ) 
 + 
 + if isCancelled ( ) { 
 + return 
 + } 
 + 
 + if image ! = nil { 
 + image ! . drawInRect ( CGRectMake ( 0 , 0 , r * 2 , r * 2 ) ) 
 + } else { 
 + / / Clean BG 
 + CGContextSetFillColorWithColor ( context , UIColor . whiteColor ( ) . CGColor ) 
 + 
 + CGContextAddArc ( context , r , r , r , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) 
 + 
 + CGContextDrawPath ( context , . Fill ) 
 + } 
 + 
 + if isCancelled ( ) { 
 + return 
 + } 
 + } else { 
 + / / Clean BG 
 + CGContextSetFillColorWithColor ( context , UIColor . whiteColor ( ) . CGColor ) 
 + 
 + CGContextAddArc ( context , r , r , r , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) 
 + 
 + CGContextDrawPath ( context , . Fill ) 
 + 
 + if isCancelled ( ) { 
 + return 
 + } 
 + } 
 
 - short . drawInRect ( rect , withAttributes : [ NSParagraphStyleAttributeName : style , NSFontAttributeName : font , 
 - NSForegroundColorAttributeName : ActorSDK . sharedActor ( ) . style . avatarTextColor ] ) 
 - 
 / / Border 
 
 - CGContextSetStrokeColorWithColor ( context , UIColor ( red : 0 , green : 0 , blue : 0 , alpha : 0x10 / 255 . 0 ) . CGColor ) ; 
 - CGContextAddArc ( context , r , r , r , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) ; 
 - CGContextDrawPath ( context , . Stroke ) ; 
 + CGContextSetStrokeColorWithColor ( context , UIColor ( red : 0 , green : 0 , blue : 0 , alpha : 0x10 / 255 . 0 ) . CGColor ) 
 + CGContextAddArc ( context , r , r , r , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) 
 + CGContextDrawPath ( context , . Stroke ) 
 } 
 return res 
 } 
 } 
 - 
 - class Placeholders { 
 - 
 - class func avatarPlaceholder ( index : jint , size : Int , title : NSString , rounded : Bool ) - > UIImage { 
 - let colors = ActorSDK . sharedActor ( ) . style . avatarColors 
 - let color = colors [ Int ( abs ( index ) ) % colors . count ] . CGColor 
 - 
 - UIGraphicsBeginImageContextWithOptions ( CGSize ( width : size , height : size ) , false , UIScreen . mainScreen ( ) . scale ) ; 
 - let context = UIGraphicsGetCurrentContext ( ) ; 
 - 
 - / / Background 
 - 
 - CGContextSetFillColorWithColor ( context , color ) ; 
 - 
 - if rounded { 
 - CGContextAddArc ( context , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) ; 
 - } else { 
 - CGContextAddRect ( context , CGRect ( x : 0 , y : 0 , width : size , height : size ) ) 
 - } 
 - 
 - CGContextDrawPath ( context , . Fill ) ; 
 - 
 - / / Text 
 - 
 - UIColor . whiteColor ( ) . set ( ) 
 - 
 - let font = UIFont . systemFontOfSize ( CGFloat ( size / 2 ) ) ; 
 - var rect = CGRectMake ( 0 , 0 , CGFloat ( size ) , CGFloat ( size ) ) 
 - rect . origin . y = round ( CGFloat ( size * 47 / 100 ) - font . pointSize / 2 ) ; 
 - 
 - let style : NSMutableParagraphStyle = NSParagraphStyle . defaultParagraphStyle ( ) . mutableCopy ( ) as ! NSMutableParagraphStyle 
 - style . alignment = NSTextAlignment . Center 
 - style . lineBreakMode = NSLineBreakMode . ByWordWrapping ; 
 - 
 - title . drawInRect ( rect , withAttributes : [ NSParagraphStyleAttributeName : style , NSFontAttributeName : font , 
 - NSForegroundColorAttributeName : ActorSDK . sharedActor ( ) . style . avatarTextColor ] ) 
 - 
 - / / Border 
 - 
 - if rounded { 
 - CGContextSetStrokeColorWithColor ( context , UIColor ( red : 0 , green : 0 , blue : 0 , alpha : 0x10 / 255 . 0 ) . CGColor ) ; 
 - CGContextAddArc ( context , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) ; 
 - CGContextDrawPath ( context , . Stroke ) ; 
 - } 
 - 
 - let image = UIGraphicsGetImageFromCurrentImageContext ( ) ; 
 - UIGraphicsEndImageContext ( ) ; 
 - return image ; 
 - } 
 - 
 - } 
 - 
 - private class AvatarLayer : YYAsyncLayer { 
 - 
 - } 
 - 
 - private class AvatarRender { 
 - 
 - } 
 + / / 
 + / / class Placeholders { 
 + / / 
 + / / class func avatarPlaceholder ( index : jint , size : Int , title : NSString , rounded : Bool ) - > UIImage { 
 + / / let colors = ActorSDK . sharedActor ( ) . style . avatarColors 
 + / / let color = colors [ Int ( abs ( index ) ) % colors . count ] . CGColor 
 + / / 
 + / / UIGraphicsBeginImageContextWithOptions ( CGSize ( width : size , height : size ) , false , UIScreen . mainScreen ( ) . scale ) ; 
 + / / let context = UIGraphicsGetCurrentContext ( ) ; 
 + / / 
 + / / / / Background 
 + / / 
 + / / CGContextSetFillColorWithColor ( context , color ) ; 
 + / / 
 + / / if rounded { 
 + / / CGContextAddArc ( context , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) ; 
 + / / } else { 
 + / / CGContextAddRect ( context , CGRect ( x : 0 , y : 0 , width : size , height : size ) ) 
 + / / } 
 + / / 
 + / / CGContextDrawPath ( context , . Fill ) ; 
 + / / 
 + / / / / Text 
 + / / 
 + / / UIColor . whiteColor ( ) . set ( ) 
 + / / 
 + / / let font = UIFont . systemFontOfSize ( CGFloat ( size / 2 ) ) ; 
 + / / var rect = CGRectMake ( 0 , 0 , CGFloat ( size ) , CGFloat ( size ) ) 
 + / / rect . origin . y = round ( CGFloat ( size * 47 / 100 ) - font . pointSize / 2 ) ; 
 + / / 
 + / / let style : NSMutableParagraphStyle = NSParagraphStyle . defaultParagraphStyle ( ) . mutableCopy ( ) as ! NSMutableParagraphStyle 
 + / / style . alignment = NSTextAlignment . Center 
 + / / style . lineBreakMode = NSLineBreakMode . ByWordWrapping ; 
 + / / 
 + / / title . drawInRect ( rect , withAttributes : [ NSParagraphStyleAttributeName : style , NSFontAttributeName : font , 
 + / / NSForegroundColorAttributeName : ActorSDK . sharedActor ( ) . style . avatarTextColor ] ) 
 + / / 
 + / / / / Border 
 + / / 
 + / / if rounded { 
 + / / CGContextSetStrokeColorWithColor ( context , UIColor ( red : 0 , green : 0 , blue : 0 , alpha : 0x10 / 255 . 0 ) . CGColor ) ; 
 + / / CGContextAddArc ( context , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( size ) / 2 , CGFloat ( M _ PI * 0 ) , CGFloat ( M _ PI * 2 ) , 0 ) ; 
 + / / CGContextDrawPath ( context , . Stroke ) ; 
 + / / } 
 + / / 
 + / / let image = UIGraphicsGetImageFromCurrentImageContext ( ) ; 
 + / / UIGraphicsEndImageContext ( ) ; 
 + / / return image ; 
 + / / } 
 + / / 
 + / / } 
 + / / 
 + / / private class AvatarLayer : YYAsyncLayer { 
 + / / 
 + / / } 
 + / / 
 + / / private class AvatarRender { 
 + / / 
 + / / } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 7e507d0 . . a003626 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 56 , 6 + 56 , 7 @ @ import im . actor . core . viewmodel . Command ; 
 import im . actor . core . viewmodel . ConversationVM ; 
 import im . actor . core . viewmodel . DialogGroupsVM ; 
 import im . actor . core . viewmodel . FileCallback ; 
 + import im . actor . core . viewmodel . FileEventCallback ; 
 import im . actor . core . viewmodel . FileVM ; 
 import im . actor . core . viewmodel . FileVMCallback ; 
 import im . actor . core . viewmodel . GroupAvatarVM ; 
 @ @ - 1667 , 6 + 1668 , 26 @ @ public class Messenger { 
 return modules . getFilesModule ( ) . getDownloadedDescriptor ( fileId ) ; 
 } 
 
 + / * * 
 + * Subscribing to download events 
 + * 
 + * @ param callback subscribe callback 
 + * / 
 + @ ObjectiveCName ( " subscribeToDownloads : " ) 
 + public void subscribeToDownloads ( FileEventCallback callback ) { 
 + modules . getFilesModule ( ) . subscribe ( callback ) ; 
 + } 
 + 
 + / * * 
 + * Unsubscribing from download events 
 + * 
 + * @ param callback unsubscribe callback 
 + * / 
 + @ ObjectiveCName ( " unsubscribeFromDownloads : " ) 
 + public void unsubscribeFromDownloads ( FileEventCallback callback ) { 
 + modules . getFilesModule ( ) . unsubscribe ( callback ) ; 
 + } 
 + 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Settings 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / FilesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / FilesModule . java 
 index 3941b36 . . c7b5d94 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / FilesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / FilesModule . java 
 @ @ - 14 , 6 + 14 , 7 @ @ import im . actor . core . modules . internal . file . UploadManager ; 
 import im . actor . core . modules . internal . file . entity . Downloaded ; 
 import im . actor . core . util . BaseKeyValueEngine ; 
 import im . actor . core . viewmodel . FileCallback ; 
 + import im . actor . core . viewmodel . FileEventCallback ; 
 import im . actor . core . viewmodel . UploadFileCallback ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . actors . ActorCreator ; 
 @ @ - 70 , 6 + 71 , 14 @ @ public class FilesModule extends AbsModule { 
 return downloadedEngine ; 
 } 
 
 + public void subscribe ( FileEventCallback callback ) { 
 + downloadManager . send ( new DownloadManager . SubscribeToDownloads ( callback ) ) ; 
 + } 
 + 
 + public void unsubscribe ( FileEventCallback callback ) { 
 + downloadManager . send ( new DownloadManager . UnsubscribeToDownloads ( callback ) ) ; 
 + } 
 + 
 public void bindFile ( FileReference fileReference , boolean isAutostart , FileCallback callback ) { 
 downloadManager . send ( new DownloadManager . BindDownload ( fileReference , isAutostart , callback ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java 
 index 678084a . . 5f8926c 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java 
 @ @ - 4 , 6 + 4 , 7 @ @ 
 
 package im . actor . core . modules . internal . file ; 
 
 + import java . lang . ref . WeakReference ; 
 import java . util . ArrayList ; 
 
 import im . actor . core . entity . FileReference ; 
 @ @ - 12 , 6 + 13 , 7 @ @ import im . actor . core . modules . internal . file . entity . Downloaded ; 
 import im . actor . core . util . ModuleActor ; 
 import im . actor . core . util . RandomUtils ; 
 import im . actor . core . viewmodel . FileCallback ; 
 + import im . actor . core . viewmodel . FileEventCallback ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . actors . ActorCreator ; 
 @ @ - 28 , 7 + 30 , 9 @ @ public class DownloadManager extends ModuleActor { 
 
 private boolean LOG ; 
 
 - private ArrayList < QueueItem > queue = new ArrayList < QueueItem > ( ) ; 
 + private ArrayList < WeakCallbackHolder > callbacks = new ArrayList < > ( ) ; 
 + 
 + private ArrayList < QueueItem > queue = new ArrayList < > ( ) ; 
 
 private KeyValueEngine < Downloaded > downloaded ; 
 
 @ @ - 339 , 6 + 343 , 33 @ @ public class DownloadManager extends ModuleActor { 
 checkQueue ( ) ; 
 } 
 
 + / / Callback 
 + 
 + private void subscribe ( FileEventCallback callback ) { 
 + callbacks . add ( new WeakCallbackHolder ( callback ) ) ; 
 + cleanWeakSubscribers ( ) ; 
 + } 
 + 
 + private void unsubscribe ( FileEventCallback callback ) { 
 + for ( WeakCallbackHolder callbackHolder : callbacks ) { 
 + if ( callbackHolder . getCallbackWeakReference ( ) = = callback ) { 
 + callbacks . remove ( callbackHolder ) ; 
 + break ; 
 + } 
 + } 
 + cleanWeakSubscribers ( ) ; 
 + } 
 + 
 + private void cleanWeakSubscribers ( ) { 
 + ArrayList < WeakCallbackHolder > toRemove = new ArrayList < > ( ) ; 
 + for ( WeakCallbackHolder callbackHolder : callbacks ) { 
 + if ( callbackHolder . getCallbackWeakReference ( ) = = null ) { 
 + toRemove . add ( callbackHolder ) ; 
 + } 
 + } 
 + callbacks . removeAll ( toRemove ) ; 
 + } 
 + 
 / / Queue processing 
 
 private void checkQueue ( ) { 
 @ @ - 413 , 7 + 444 , 7 @ @ public class DownloadManager extends ModuleActor { 
 } 
 } 
 
 - public void onDownloaded ( long fileId , final FileSystemReference reference ) { 
 + public void onDownloaded ( final long fileId , final FileSystemReference reference ) { 
 if ( LOG ) { 
 Log . d ( TAG , " onDownloaded file # " + fileId ) ; 
 } 
 @ @ - 432 , 6 + 463 , 18 @ @ public class DownloadManager extends ModuleActor { 
 queue . remove ( queueItem ) ; 
 queueItem . taskRef . send ( PoisonPill . INSTANCE ) ; 
 
 + for ( final WeakCallbackHolder weakReference : callbacks ) { 
 + final FileEventCallback callback = weakReference . getCallbackWeakReference ( ) . get ( ) ; 
 + if ( callback ! = null ) { 
 + im . actor . runtime . Runtime . dispatch ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onDownloaded ( fileId ) ; 
 + } 
 + } ) ; 
 + } 
 + } 
 + 
 for ( final FileCallback fileCallback : queueItem . callbacks ) { 
 im . actor . runtime . Runtime . dispatch ( new Runnable ( ) { 
 @ Override 
 @ @ - 540 , 6 + 583 , 10 @ @ public class DownloadManager extends ModuleActor { 
 } else if ( message instanceof RequestState ) { 
 RequestState requestState = ( RequestState ) message ; 
 requestState ( requestState . getFileId ( ) , requestState . getCallback ( ) ) ; 
 + } else if ( message instanceof SubscribeToDownloads ) { 
 + subscribe ( ( ( SubscribeToDownloads ) message ) . getCallback ( ) ) ; 
 + } else if ( message instanceof UnsubscribeToDownloads ) { 
 + unsubscribe ( ( ( UnsubscribeToDownloads ) message ) . getCallback ( ) ) ; 
 } else { 
 drop ( message ) ; 
 } 
 @ @ - 683 , 5 + 730 , 40 @ @ public class DownloadManager extends ModuleActor { 
 } 
 } 
 
 + public static class SubscribeToDownloads { 
 + private FileEventCallback callback ; 
 + 
 + public SubscribeToDownloads ( FileEventCallback callback ) { 
 + this . callback = callback ; 
 + } 
 + 
 + public FileEventCallback getCallback ( ) { 
 + return callback ; 
 + } 
 + } 
 + 
 + public static class UnsubscribeToDownloads { 
 + private FileEventCallback callback ; 
 + 
 + public UnsubscribeToDownloads ( FileEventCallback callback ) { 
 + this . callback = callback ; 
 + } 
 + 
 + public FileEventCallback getCallback ( ) { 
 + return callback ; 
 + } 
 + } 
 + 
 + private class WeakCallbackHolder { 
 + private WeakReference < FileEventCallback > callbackWeakReference ; 
 + 
 + public WeakCallbackHolder ( FileEventCallback callbackWeakReference ) { 
 + this . callbackWeakReference = new WeakReference < > ( callbackWeakReference ) ; 
 + } 
 + 
 + public WeakReference < FileEventCallback > getCallbackWeakReference ( ) { 
 + return callbackWeakReference ; 
 + } 
 + } 
 / / endregion 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / FileEventCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / FileEventCallback . java 
 new file mode 100644 
 index 0000000 . . 661096e 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / FileEventCallback . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package im . actor . core . viewmodel ; 
 + 
 + public interface FileEventCallback { 
 + void onDownloaded ( long fileId ) ; 
 + }
