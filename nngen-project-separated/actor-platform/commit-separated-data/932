BLEU SCORE: 0.345720784641941

TEST MSG: wip ( core ) : Refactoring of calls
GENERATED MSG: feat ( core ) : Added extensions support

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index c294e30 . . 6553608 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 24 , 6 + 24 , 7 @ @ import im . actor . core . js . modules . JsBindedValueCallback ; < nl > import im . actor . core . js . modules . JsIdleModule ; < nl > import im . actor . core . js . providers . JsNotificationsProvider ; < nl > import im . actor . core . js . providers . JsPhoneBookProvider ; < nl > + import im . actor . core . js . providers . JsWebRTCProvider ; < nl > import im . actor . core . js . providers . electron . JsElectronApp ; < nl > import im . actor . core . js . providers . electron . JsElectronListener ; < nl > import im . actor . core . js . utils . HtmlMarkdownUtils ; < nl > @ @ - 99 , 6 + 100 , 7 @ @ public class JsFacade implements Exportable { < nl > configuration . setApiConfiguration ( new ApiConfiguration ( APP _ NAME , APP _ ID , APP _ KEY , clientName , uniqueId ) ) ; < nl > configuration . setPhoneBookProvider ( new JsPhoneBookProvider ( ) ) ; < nl > configuration . setNotificationProvider ( new JsNotificationsProvider ( ) ) ; < nl > + configuration . setWebRTCProvider ( new JsWebRTCProvider ( ) ) ; < nl > < nl > / / Setting locale < nl > String locale = LocaleInfo . getCurrentLocale ( ) . getLocaleName ( ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 2f01f33 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java < nl > @ @ - 0 , 0 + 1 , 31 @ @ < nl > + package im . actor . core . js . providers ; < nl > + < nl > + import im . actor . core . WebRTCProvider ; < nl > + < nl > + public class JsWebRTCProvider implements WebRTCProvider { < nl > + < nl > + @ Override < nl > + public void onIncomingCall ( ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onOutgoingCall ( ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onCallStarted ( ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onSignalingReceived ( byte [ ] data ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onCallEnded ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Configuration . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Configuration . java < nl > index 1d73500 . . 1e71b1c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Configuration . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Configuration . java < nl > @ @ - 4 , 6 + 4 , 8 @ @ < nl > < nl > package im . actor . core ; < nl > < nl > + import org . jetbrains . annotations . Nullable ; < nl > + < nl > import im . actor . core . network . TrustedKey ; < nl > import im . actor . runtime . mtproto . ConnectionEndpoint ; < nl > < nl > @ @ - 45 , 6 + 47 , 8 @ @ public class Configuration { < nl > < nl > private boolean enablePhoneBookImport ; < nl > < nl > + private WebRTCProvider webRTCProvider ; < nl > + < nl > Configuration ( ConnectionEndpoint [ ] endpoints , < nl > PhoneBookProvider phoneBookProvider , < nl > NotificationProvider notificationProvider , < nl > @ @ - 62 , 7 + 66 , 8 @ @ public class Configuration { < nl > String [ ] preferredLanguages , < nl > String customAppName , < nl > TrustedKey [ ] trustedKeys , < nl > - boolean enablePhoneBookImport ) { < nl > + boolean enablePhoneBookImport , < nl > + WebRTCProvider webRTCProvider ) { < nl > this . endpoints = endpoints ; < nl > this . phoneBookProvider = phoneBookProvider ; < nl > this . enableContactsLogging = enableContactsLogging ; < nl > @ @ - 81 , 6 + 86 , 17 @ @ public class Configuration { < nl > this . customAppName = customAppName ; < nl > this . trustedKeys = trustedKeys ; < nl > this . enablePhoneBookImport = enablePhoneBookImport ; < nl > + this . webRTCProvider = webRTCProvider ; < nl > + } < nl > + < nl > + / * * < nl > + * Getting Web RTC provider if set < nl > + * < nl > + * @ return WebRTC provider < nl > + * / < nl > + @ Nullable < nl > + public WebRTCProvider getWebRTCProvider ( ) { < nl > + return webRTCProvider ; < nl > } < nl > < nl > / * * < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java < nl > index 2fdf665 . . 9ed0087 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java < nl > @ @ - 48 , 6 + 48 , 8 @ @ public class ConfigurationBuilder { < nl > < nl > private boolean isPhoneBookImportEnabled = true ; < nl > < nl > + private WebRTCProvider webRTCProvider ; < nl > + < nl > / * * < nl > * Setting if application need to upload phone book to server < nl > * < nl > @ @ - 62 , 6 + 64 , 19 @ @ public class ConfigurationBuilder { < nl > } < nl > < nl > / * * < nl > + * Setting Web RTC support provider < nl > + * < nl > + * @ param webRTCProvider WebRTC provider < nl > + * @ return this < nl > + * / < nl > + @ NotNull < nl > + @ ObjectiveCName ( " setWebRTCProvider : " ) < nl > + public ConfigurationBuilder setWebRTCProvider ( WebRTCProvider webRTCProvider ) { < nl > + this . webRTCProvider = webRTCProvider ; < nl > + return this ; < nl > + } < nl > + < nl > + / * * < nl > * Adding Trusted key for protocol encryption securing < nl > * < nl > * @ param trustedKey hex representation of trusted key < nl > @ @ - 356 , 6 + 371 , 7 @ @ public class ConfigurationBuilder { < nl > timeZone , preferredLanguages . toArray ( new String [ preferredLanguages . size ( ) ] ) , < nl > customAppName , < nl > trustedKeys . toArray ( new TrustedKey [ trustedKeys . size ( ) ] ) , < nl > - isPhoneBookImportEnabled ) ; < nl > + isPhoneBookImportEnabled , < nl > + webRTCProvider ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / WebRTCProvider . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / WebRTCProvider . java < nl > new file mode 100644 < nl > index 0000000 . . e278409 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / WebRTCProvider . java < nl > @ @ - 0 , 0 + 1 , 14 @ @ < nl > + package im . actor . core ; < nl > + < nl > + public interface WebRTCProvider { < nl > + < nl > + void onIncomingCall ( ) ; < nl > + < nl > + void onOutgoingCall ( ) ; < nl > + < nl > + void onCallStarted ( ) ; < nl > + < nl > + void onSignalingReceived ( byte [ ] data ) ; < nl > + < nl > + void onCallEnded ( ) ; < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > new file mode 100644 < nl > index 0000000 . . 4293e4f < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > @ @ - 0 , 0 + 1 , 86 @ @ < nl > + package im . actor . core . modules . calls ; < nl > + < nl > + import im . actor . core . api . rpc . RequestSubscribeToCalls ; < nl > + import im . actor . core . events . NewSessionCreated ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . util . ModuleActor ; < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . eventbus . Event ; < nl > + import im . actor . runtime . function . Constructor ; < nl > + < nl > + public class CallManagerActor extends ModuleActor { < nl > + < nl > + public static Constructor < CallManagerActor > CONSTRUCTOR ( final ModuleContext context ) { < nl > + return new Constructor < CallManagerActor > ( ) { < nl > + @ Override < nl > + public CallManagerActor create ( ) { < nl > + return new CallManagerActor ( context ) ; < nl > + } < nl > + } ; < nl > + } < nl > + < nl > + private static final String TAG = " CallManagerActor " ; < nl > + < nl > + private long subscribeRequest = - 1 ; < nl > + < nl > + public CallManagerActor ( ModuleContext context ) { < nl > + super ( context ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + super . preStart ( ) ; < nl > + subscribeForCalls ( ) ; < nl > + subscribe ( NewSessionCreated . EVENT ) ; < nl > + } < nl > + < nl > + private void onIncomingCall ( long callId , int uid ) { < nl > + Log . d ( TAG , " onIncomingCall ( " + callId + " , " + uid + " ) " ) ; < nl > + } < nl > + < nl > + private void subscribeForCalls ( ) { < nl > + if ( subscribeRequest ! = - 1 ) { < nl > + context ( ) . getActorApi ( ) . cancelRequest ( subscribeRequest ) ; < nl > + subscribeRequest = - 1 ; < nl > + } < nl > + subscribeRequest = request ( new RequestSubscribeToCalls ( ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onBusEvent ( Event event ) { < nl > + if ( NewSessionCreated . EVENT . equals ( event . getType ( ) ) ) { < nl > + subscribeForCalls ( ) ; < nl > + } else { < nl > + super . onBusEvent ( event ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof OnIncomingCall ) { < nl > + OnIncomingCall call = ( OnIncomingCall ) message ; < nl > + onIncomingCall ( call . getCallId ( ) , call . getUid ( ) ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > + } < nl > + } < nl > + < nl > + public static class OnIncomingCall { < nl > + < nl > + private long callId ; < nl > + private int uid ; < nl > + < nl > + public OnIncomingCall ( long callId , int uid ) { < nl > + this . callId = callId ; < nl > + this . uid = uid ; < nl > + } < nl > + < nl > + public long getCallId ( ) { < nl > + return callId ; < nl > + } < nl > + < nl > + public int getUid ( ) { < nl > + return uid ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > index 2b3bc7c . . 695288e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . core . modules . calls ; < nl > < nl > import java . util . HashMap ; < nl > < nl > + import im . actor . core . WebRTCProvider ; < nl > import im . actor . core . api . ApiOutPeer ; < nl > import im . actor . core . api . ApiPeerType ; < nl > import im . actor . core . api . rpc . RequestCallInProgress ; < nl > @ @ - 30 , 149 + 31 , 150 @ @ import im . actor . runtime . actors . Props ; < nl > import im . actor . runtime . eventbus . BusSubscriber ; < nl > import im . actor . runtime . eventbus . Event ; < nl > < nl > + import static im . actor . runtime . actors . ActorSystem . system ; < nl > + < nl > public class CallsModule extends AbsModule { < nl > < nl > public static final int MAX _ CALLS _ COUNT = 1 ; < nl > - private static final String TAG = " CALLS " ; < nl > + public static final int CALL _ TIMEOUT = 10 ; < nl > + public static boolean CALLS _ ENABLED = false ; < nl > + public static boolean MULTIPLE _ CALLS _ ENABLED = false ; < nl > + < nl > + public static final String TAG = " CALLS " ; < nl > + < nl > + private HashMap < Long , ActorRef > calls = new HashMap < > ( ) ; < nl > + private WebRTCProvider provider ; < nl > + private ActorRef callManager ; < nl > < nl > public CallsModule ( ModuleContext context ) { < nl > super ( context ) ; < nl > - } < nl > - < nl > < nl > - public static final int CALL _ TIMEOUT = 10 ; < nl > - public static boolean CALLS _ ENABLED = false ; < nl > - public static boolean MULTIPLE _ CALLS _ ENABLED = false ; < nl > - HashMap < Long , ActorRef > calls = new HashMap < > ( ) ; < nl > + provider = context ( ) . getConfiguration ( ) . getWebRTCProvider ( ) ; < nl > + } < nl > < nl > public void run ( ) { < nl > - if ( CALLS _ ENABLED ) { < nl > - request ( new RequestSubscribeToCalls ( ) ) ; < nl > - context ( ) . getEvents ( ) . subscribe ( new BusSubscriber ( ) { < nl > - @ Override < nl > - public void onBusEvent ( Event event ) { < nl > - request ( new RequestSubscribeToCalls ( ) ) ; < nl > - } < nl > - } , NewSessionCreated . EVENT ) ; < nl > + if ( provider = = null ) { < nl > + return ; < nl > } < nl > + < nl > + callManager = system ( ) . actorOf ( " calls / manager " , CallManagerActor . CONSTRUCTOR ( context ( ) ) ) ; < nl > + < nl > + / / if ( CALLS _ ENABLED ) { < nl > + / / request ( new RequestSubscribeToCalls ( ) ) ; < nl > + / / context ( ) . getEvents ( ) . subscribe ( new BusSubscriber ( ) { < nl > + / / @ Override < nl > + / / public void onBusEvent ( Event event ) { < nl > + / / request ( new RequestSubscribeToCalls ( ) ) ; < nl > + / / } < nl > + / / } , NewSessionCreated . EVENT ) ; < nl > + / / } < nl > } < nl > < nl > public Command < ResponseDoCall > makeCall ( final int uid , final CallCallback callCallback ) { < nl > - return new Command < ResponseDoCall > ( ) { < nl > - @ Override < nl > - public void start ( final CommandCallback < ResponseDoCall > callback ) { < nl > - User u = users ( ) . getValue ( uid ) ; < nl > - request ( new RequestDoCall ( new ApiOutPeer ( ApiPeerType . PRIVATE , u . getUid ( ) , u . getAccessHash ( ) ) , CALL _ TIMEOUT ) , new RpcCallback < ResponseDoCall > ( ) { < nl > - @ Override < nl > - public void onResult ( final ResponseDoCall response ) { < nl > - callback . onResult ( response ) ; < nl > - < nl > - Log . d ( TAG , " make call " + response . getCallId ( ) ) ; < nl > - calls . put ( response . getCallId ( ) , < nl > - ActorSystem . system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { < nl > - @ Override < nl > - public Actor create ( ) { < nl > - return new CallActor ( response . getCallId ( ) , callCallback , context ( ) ) ; < nl > - } < nl > - } ) , " actor / call _ " + response . getCallId ( ) ) ) ; < nl > - < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - public void onError ( RpcException e ) { < nl > - callback . onError ( e ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ; < nl > + / / return new Command < ResponseDoCall > ( ) { < nl > + / / @ Override < nl > + / / public void start ( final CommandCallback < ResponseDoCall > callback ) { < nl > + / / User u = users ( ) . getValue ( uid ) ; < nl > + / / request ( new RequestDoCall ( new ApiOutPeer ( ApiPeerType . PRIVATE , u . getUid ( ) , u . getAccessHash ( ) ) , CALL _ TIMEOUT ) , new RpcCallback < ResponseDoCall > ( ) { < nl > + / / @ Override < nl > + / / public void onResult ( final ResponseDoCall response ) { < nl > + / / callback . onResult ( response ) ; < nl > + / / < nl > + / / Log . d ( TAG , " make call " + response . getCallId ( ) ) ; < nl > + / / calls . put ( response . getCallId ( ) , < nl > + / / system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { < nl > + / / @ Override < nl > + / / public Actor create ( ) { < nl > + / / return new CallActor ( response . getCallId ( ) , callCallback , context ( ) ) ; < nl > + / / } < nl > + / / } ) , " actor / call _ " + response . getCallId ( ) ) ) ; < nl > + / / < nl > + / / < nl > + / / } < nl > + / / < nl > + / / @ Override < nl > + / / public void onError ( RpcException e ) { < nl > + / / callback . onError ( e ) ; < nl > + / / } < nl > + / / } ) ; < nl > + / / } < nl > + / / } ; < nl > + return null ; < nl > } < nl > < nl > public void callInProgress ( long callId ) { < nl > - request ( new RequestCallInProgress ( callId , CALL _ TIMEOUT ) ) ; < nl > + / / request ( new RequestCallInProgress ( callId , CALL _ TIMEOUT ) ) ; < nl > } < nl > < nl > public void handleCall ( final long callId , final CallCallback callback ) { < nl > - ActorRef call = calls . get ( callId ) ; < nl > - if ( call ! = null ) { < nl > - call . send ( new CallActor . HandleCall ( callback ) ) ; < nl > - } else { < nl > - / / can ' t find call - close fragment < nl > - callback . onCallEnd ( ) ; < nl > - } < nl > + / / ActorRef call = calls . get ( callId ) ; < nl > + / / if ( call ! = null ) { < nl > + / / call . send ( new CallActor . HandleCall ( callback ) ) ; < nl > + / / } else { < nl > + / / / / can ' t find call - close fragment < nl > + / / callback . onCallEnd ( ) ; < nl > + / / } < nl > } < nl > < nl > / / do end call < nl > public void endCall ( long callId ) { < nl > - Log . d ( TAG , " do end call " + callId ) ; < nl > - < nl > - request ( new RequestEndCall ( callId ) ) ; < nl > - ActorRef call = calls . get ( callId ) ; < nl > - if ( call ! = null ) { < nl > - Log . d ( TAG , " call exist - end it " ) ; < nl > - < nl > - call . send ( new CallActor . EndCall ( ) ) ; < nl > - } else { < nl > - Log . d ( TAG , " call not exist - remove it " ) ; < nl > - onCallEnded ( callId ) ; < nl > - } < nl > + / / Log . d ( TAG , " do end call " + callId ) ; < nl > + / / < nl > + / / request ( new RequestEndCall ( callId ) ) ; < nl > + / / ActorRef call = calls . get ( callId ) ; < nl > + / / if ( call ! = null ) { < nl > + / / Log . d ( TAG , " call exist - end it " ) ; < nl > + / / < nl > + / / call . send ( new CallActor . EndCall ( ) ) ; < nl > + / / } else { < nl > + / / Log . d ( TAG , " call not exist - remove it " ) ; < nl > + / / onCallEnded ( callId ) ; < nl > + / / } < nl > } < nl > < nl > - public void onIncomingCall ( final long callId , int uid ) { < nl > - Log . d ( TAG , " incoming call " + callId ) ; < nl > - < nl > - if ( ! calls . keySet ( ) . contains ( callId ) ) { < nl > - calls . put ( callId , < nl > - ActorSystem . system ( ) . actorOf ( " actor / call _ " + callId , new ActorCreator ( ) { < nl > - @ Override < nl > - public Actor create ( ) { < nl > - return new CallActor ( callId , context ( ) ) ; < nl > - } < nl > - } ) ) ; < nl > - if ( ! MULTIPLE _ CALLS _ ENABLED & calls . keySet ( ) . size ( ) > MAX _ CALLS _ COUNT ) { < nl > - calls . get ( callId ) . send ( new CallActor . EndCall ( ) ) ; < nl > - } else { < nl > - context ( ) . getEvents ( ) . post ( new IncomingCall ( callId , uid ) ) ; < nl > - } < nl > + public void onIncomingCall ( long callId , int uid ) { < nl > + if ( provider = = null ) { < nl > + return ; < nl > } < nl > < nl > + callManager . send ( new CallManagerActor . OnIncomingCall ( callId , uid ) ) ; < nl > } < nl > < nl > / / on end call update < nl > public void onEndCall ( long callId ) { < nl > - Log . d ( TAG , " end call update : " + callId ) ; < nl > - ActorRef call = calls . get ( callId ) ; < nl > - if ( call ! = null ) { < nl > - Log . d ( TAG , " call exist - end it " ) ; < nl > - call . send ( new CallActor . EndCall ( ) ) ; < nl > - } else { < nl > - Log . d ( TAG , " call not exist - remove it " ) ; < nl > - calls . remove ( callId ) ; < nl > - } < nl > + / / Log . d ( TAG , " end call update : " + callId ) ; < nl > + / / ActorRef call = calls . get ( callId ) ; < nl > + / / if ( call ! = null ) { < nl > + / / Log . d ( TAG , " call exist - end it " ) ; < nl > + / / call . send ( new CallActor . EndCall ( ) ) ; < nl > + / / } else { < nl > + / / Log . d ( TAG , " call not exist - remove it " ) ; < nl > + / / calls . remove ( callId ) ; < nl > + / / } < nl > } < nl > < nl > / / after end call update processed by CallActor < nl > public void onCallEnded ( long callId ) { < nl > - Log . d ( TAG , " on callActor ended call : " + callId ) ; < nl > - calls . remove ( callId ) ; < nl > + / / Log . d ( TAG , " on callActor ended call : " + callId ) ; < nl > + / / calls . remove ( callId ) ; < nl > } < nl > < nl > public void onCallInProgress ( long callId , int timeout ) { < nl > - ActorRef call = calls . get ( callId ) ; < nl > - if ( call ! = null ) { < nl > - call . send ( new CallActor . CallInProgress ( timeout ) ) ; < nl > - } < nl > + / / ActorRef call = calls . get ( callId ) ; < nl > + / / if ( call ! = null ) { < nl > + / / call . send ( new CallActor . CallInProgress ( timeout ) ) ; < nl > + / / } < nl > } < nl > < nl > public void sendSignal ( long callId , AbsSignal signal ) { < nl > - request ( new RequestSendCallSignal ( callId , signal . toByteArray ( ) ) ) ; < nl > + / / request ( new RequestSendCallSignal ( callId , signal . toByteArray ( ) ) ) ; < nl > } < nl > < nl > public void onSignal ( long callId , byte [ ] data ) { < nl > - ActorRef call = calls . get ( callId ) ; < nl > - if ( call ! = null ) { < nl > - call . send ( new CallActor . Signal ( data ) ) ; < nl > - } < nl > + / / ActorRef call = calls . get ( callId ) ; < nl > + / / if ( call ! = null ) { < nl > + / / call . send ( new CallActor . Signal ( data ) ) ; < nl > + / / } < nl > } < nl > < nl > public interface CallCallback { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java < nl > new file mode 100644 < nl > index 0000000 . . 45e5015 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java < nl > @ @ - 0 , 0 + 1 , 30 @ @ < nl > + package im . actor . core . modules . calls ; < nl > + < nl > + import im . actor . core . api . updates . UpdateCallEnded ; < nl > + import im . actor . core . api . updates . UpdateCallInProgress ; < nl > + import im . actor . core . api . updates . UpdateCallSignal ; < nl > + import im . actor . core . api . updates . UpdateIncomingCall ; < nl > + import im . actor . core . modules . AbsModule ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + < nl > + public class CallsProcessor extends AbsModule { < nl > + public CallsProcessor ( ModuleContext context ) { < nl > + super ( context ) ; < nl > + } < nl > + < nl > + public void onIncomingCall ( UpdateIncomingCall call ) { < nl > + context ( ) . getCallsModule ( ) . onIncomingCall ( call . getCallId ( ) , call . getUid ( ) ) ; < nl > + } < nl > + < nl > + public void onCallInProgress ( UpdateCallInProgress inProgress ) { < nl > + context ( ) . getCallsModule ( ) . onCallInProgress ( inProgress . getCallId ( ) , inProgress . getTimeout ( ) ) ; < nl > + } < nl > + < nl > + public void onCallEnd ( UpdateCallEnded callEnd ) { < nl > + context ( ) . getCallsModule ( ) . onEndCall ( callEnd . getCallId ( ) ) ; < nl > + } < nl > + < nl > + public void onSignal ( UpdateCallSignal signal ) { < nl > + context ( ) . getCallsModule ( ) . onSignal ( signal . getCallId ( ) , signal . getContent ( ) ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / CallsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / CallsProcessor . java < nl > deleted file mode 100644 < nl > index 412d2fd . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / CallsProcessor . java < nl > + + + / dev / null < nl > @ @ - 1 , 30 + 0 , 0 @ @ < nl > - package im . actor . core . modules . updates ; < nl > - < nl > - import im . actor . core . api . updates . UpdateCallEnded ; < nl > - import im . actor . core . api . updates . UpdateCallInProgress ; < nl > - import im . actor . core . api . updates . UpdateCallSignal ; < nl > - import im . actor . core . api . updates . UpdateIncomingCall ; < nl > - import im . actor . core . modules . AbsModule ; < nl > - import im . actor . core . modules . ModuleContext ; < nl > - < nl > - public class CallsProcessor extends AbsModule { < nl > - public CallsProcessor ( ModuleContext context ) { < nl > - super ( context ) ; < nl > - } < nl > - < nl > - public void onIncomingCall ( UpdateIncomingCall call ) { < nl > - context ( ) . getCallsModule ( ) . onIncomingCall ( call . getCallId ( ) , call . getUid ( ) ) ; < nl > - } < nl > - < nl > - public void onCallInProgress ( UpdateCallInProgress inProgress ) { < nl > - context ( ) . getCallsModule ( ) . onCallInProgress ( inProgress . getCallId ( ) , inProgress . getTimeout ( ) ) ; < nl > - } < nl > - < nl > - public void onCallEnd ( UpdateCallEnded callEnd ) { < nl > - context ( ) . getCallsModule ( ) . onEndCall ( callEnd . getCallId ( ) ) ; < nl > - } < nl > - < nl > - public void onSignal ( UpdateCallSignal signal ) { < nl > - context ( ) . getCallsModule ( ) . onSignal ( signal . getCallId ( ) , signal . getContent ( ) ) ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > index 15b78e9 . . 5b7501d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > @ @ - 42 , 8 + 42 , 6 @ @ import im . actor . core . api . updates . UpdateMessageReceived ; < nl > import im . actor . core . api . updates . UpdateMessageSent ; < nl > import im . actor . core . api . updates . UpdateOwnStickersChanged ; < nl > import im . actor . core . api . updates . UpdateParameterChanged ; < nl > - import im . actor . core . api . updates . UpdatePublicKeyGroupAdded ; < nl > - import im . actor . core . api . updates . UpdatePublicKeyGroupRemoved ; < nl > import im . actor . core . api . updates . UpdateReactionsUpdate ; < nl > import im . actor . core . api . updates . UpdateStickerCollectionsChanged ; < nl > import im . actor . core . api . updates . UpdateTyping ; < nl > @ @ - 55 , 7 + 53 , 7 @ @ import im . actor . core . api . updates . UpdateUserOnline ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > - import im . actor . core . modules . encryption . KeyManagerActor ; < nl > + import im . actor . core . modules . calls . CallsProcessor ; < nl > import im . actor . core . modules . internal . contacts . ContactsSyncActor ; < nl > import im . actor . core . modules . internal . messages . OwnReadActor ; < nl > import im . actor . core . modules . updates . internal . ChangeContent ;
NEAREST DIFF (one line): diff - - git a / . gitignore b / . gitignore < nl > index a882b44 . . 59a9cde 100644 < nl > - - - a / . gitignore < nl > + + + b / . gitignore < nl > @ @ - 114 , 3 + 114 , 4 @ @ actor - sdk / sdk - ios / ActorSDK . xcworkspace / xcuserdata < nl > actor - sdk / sdk - ios / Pods < nl > actor - sdk / sdk - ios / ActorSDK . xcodeproj / xcuserdata < nl > actor - sdk / sdk - ios / ActorSDK . xcworkspace < nl > + actor - sdk / sdk - extension / ext / build < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Configuration . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Configuration . java < nl > index 7aadc31 . . 29d746f 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Configuration . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Configuration . java < nl > @ @ - 11 , 6 + 11 , 8 @ @ import im . actor . runtime . mtproto . ConnectionEndpoint ; < nl > * / < nl > public class Configuration { < nl > < nl > + private final ConfigurationExtension [ ] extensions ; < nl > + < nl > private final ConnectionEndpoint [ ] endpoints ; < nl > < nl > private PhoneBookProvider phoneBookProvider ; < nl > @ @ - 44 , 7 + 46 , 8 @ @ public class Configuration { < nl > PlatformType platformType , < nl > int minDelay , < nl > int maxDelay , < nl > - int maxFailureCount ) { < nl > + int maxFailureCount , < nl > + ConfigurationExtension [ ] extensions ) { < nl > this . endpoints = endpoints ; < nl > this . phoneBookProvider = phoneBookProvider ; < nl > this . enableContactsLogging = enableContactsLogging ; < nl > @ @ - 57 , 6 + 60 , 16 @ @ public class Configuration { < nl > this . minDelay = minDelay ; < nl > this . maxDelay = maxDelay ; < nl > this . maxFailureCount = maxFailureCount ; < nl > + this . extensions = extensions ; < nl > + } < nl > + < nl > + / * * < nl > + * Get configured extensions < nl > + * < nl > + * @ return extensions < nl > + * / < nl > + public ConfigurationExtension [ ] getExtensions ( ) { < nl > + return extensions ; < nl > } < nl > < nl > / * * < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationBuilder . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationBuilder . java < nl > index b3fba86 . . dff56cb 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationBuilder . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationBuilder . java < nl > @ @ - 17 , 6 + 17 , 7 @ @ import im . actor . runtime . mtproto . ConnectionEndpoint ; < nl > * / < nl > public class ConfigurationBuilder { < nl > < nl > + private ArrayList < ConfigurationExtension > extensions = new ArrayList < ConfigurationExtension > ( ) ; < nl > private ArrayList < ConnectionEndpoint > endpoints = new ArrayList < ConnectionEndpoint > ( ) ; < nl > < nl > private PhoneBookProvider phoneBookProvider ; < nl > @ @ - 178 , 6 + 179 , 18 @ @ public class ConfigurationBuilder { < nl > } < nl > < nl > / * * < nl > + * Adding app extension < nl > + * < nl > + * @ param key extension key < nl > + * @ param extension extension < nl > + * @ return this < nl > + * / < nl > + public ConfigurationBuilder addExtension ( String key , Extension extension ) { < nl > + this . extensions . add ( new ConfigurationExtension ( key , extension ) ) ; < nl > + return this ; < nl > + } < nl > + < nl > + / * * < nl > * Adding Endpoint for API < nl > * Valid URLs are : < nl > * tcp : / / [ host ] : [ port ] < nl > @ @ - 258 , 6 + 271 , 7 @ @ public class ConfigurationBuilder { < nl > phoneBookProvider , notificationProvider , < nl > apiConfiguration , enableContactsLogging , enableNetworkLogging , < nl > enableFilesLogging , deviceCategory , platformType , < nl > - minDelay , maxDelay , maxFailureCount ) ; < nl > + minDelay , maxDelay , maxFailureCount , < nl > + extensions . toArray ( new ConfigurationExtension [ extensions . size ( ) ] ) ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationExtension . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationExtension . java < nl > new file mode 100644 < nl > index 0000000 . . e964a7d < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationExtension . java < nl > @ @ - 0 , 0 + 1 , 20 @ @ < nl > + package im . actor . core ; < nl > + < nl > + public class ConfigurationExtension { < nl > + < nl > + private String key ; < nl > + private Extension extension ; < nl > + < nl > + public ConfigurationExtension ( String key , Extension extension ) { < nl > + this . key = key ; < nl > + this . extension = extension ; < nl > + } < nl > + < nl > + public String getKey ( ) { < nl > + return key ; < nl > + } < nl > + < nl > + public Extension getExtension ( ) { < nl > + return extension ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Extension . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Extension . java < nl > index f251256 . . ea6736b 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Extension . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Extension . java < nl > @ @ - 8 , 13 + 8 , 6 @ @ import im . actor . core . modules . ModuleContext ; < nl > public interface Extension { < nl > < nl > / * * < nl > - * Get unique extension key < nl > - * < nl > - * @ return extension key < nl > - * / < nl > - String getExtensionKey ( ) ; < nl > - < nl > - / * * < nl > * Performing registration of extension before Messenger run < nl > * < nl > * @ param context Module context < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ApiModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ApiModule . java < nl > index 9088883 . . f97ea13 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ApiModule . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ApiModule . java < nl > @ @ - 8 , 6 + 8 , 7 @ @ import im . actor . core . modules . utils . PreferenceApiStorage ; < nl > import im . actor . core . network . ActorApi ; < nl > import im . actor . core . network . ActorApiCallback ; < nl > import im . actor . core . network . Endpoints ; < nl > + import im . actor . core . network . parser . ApiParserConfig ; < nl > import im . actor . core . network . parser . Request ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > @ @ - 21 , 6 + 22 , 7 @ @ public class ApiModule extends AbsModule implements BusSubscriber { < nl > < nl > private final ActorApi actorApi ; < nl > private final ActorRef persistentRequests ; < nl > + private final ApiParserConfig parserConfig = new ApiParserConfig ( ) ; < nl > < nl > public ApiModule ( Modules context ) { < nl > super ( context ) ; < nl > @ @ - 31 , 7 + 33 , 7 @ @ public class ApiModule extends AbsModule implements BusSubscriber { < nl > context ( ) . getConfiguration ( ) . isEnableNetworkLogging ( ) , < nl > context ( ) . getConfiguration ( ) . getMinDelay ( ) , < nl > context ( ) . getConfiguration ( ) . getMaxDelay ( ) , < nl > - context ( ) . getConfiguration ( ) . getMaxFailureCount ( ) ) ; < nl > + context ( ) . getConfiguration ( ) . getMaxFailureCount ( ) , parserConfig ) ; < nl > < nl > context . getEvents ( ) . subscribe ( this , AppVisibleChanged . EVENT ) ; < nl > < nl > @ @ - 43 , 12 + 45 , 25 @ @ public class ApiModule extends AbsModule implements BusSubscriber { < nl > } ) , " api / persistence " ) ; < nl > } < nl > < nl > - < nl > + / * * < nl > + * Get Actor API instance < nl > + * < nl > + * @ return Actor API instance < nl > + * / < nl > public ActorApi getActorApi ( ) { < nl > return actorApi ; < nl > } < nl > < nl > / * * < nl > + * Get API Parser configuration < nl > + * < nl > + * @ return Actor API parser config < nl > + * / < nl > + public ApiParserConfig getParserConfig ( ) { < nl > + return parserConfig ; < nl > + } < nl > + < nl > + / * * < nl > * Performing persist request . Keep repeating request even after application restart < nl > * < nl > * @ param request request < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Extensions . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Extensions . java < nl > new file mode 100644 < nl > index 0000000 . . 6877c1d < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Extensions . java < nl > @ @ - 0 , 0 + 1 , 57 @ @ < nl > + package im . actor . core . modules ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . core . Extension ; < nl > + < nl > + public class Extensions extends AbsModule { < nl > + < nl > + private ArrayList < ExtensionRef > extensionRefs = new ArrayList < ExtensionRef > ( ) ; < nl > + < nl > + public Extensions ( ModuleContext context ) { < nl > + super ( context ) ; < nl > + } < nl > + < nl > + public void registerExtension ( String key , Extension extension ) { < nl > + extensionRefs . add ( new ExtensionRef ( key , extension ) ) ; < nl > + } < nl > + < nl > + public Extension findExtension ( String key ) { < nl > + for ( ExtensionRef r : extensionRefs ) { < nl > + if ( r . getKey ( ) . equals ( key ) ) { < nl > + return r . getExtension ( ) ; < nl > + } < nl > + } < nl > + return null ; < nl > + } < nl > + < nl > + public void registerExtensions ( ) { < nl > + for ( ExtensionRef r : extensionRefs ) { < nl > + r . getExtension ( ) . registerExtension ( context ( ) ) ; < nl > + } < nl > + } < nl > + < nl > + public void runExtensions ( ) { < nl > + for ( ExtensionRef r : extensionRefs ) { < nl > + r . getExtension ( ) . runExtension ( ) ; < nl > + } < nl > + } < nl > + < nl > + private class ExtensionRef { < nl > + private String key ; < nl > + private Extension extension ; < nl > + < nl > + public ExtensionRef ( String key , Extension extension ) { < nl > + this . key = key ; < nl > + this . extension = extension ; < nl > + } < nl > + < nl > + public String getKey ( ) { < nl > + return key ; < nl > + } < nl > + < nl > + public Extension getExtension ( ) { < nl > + return extension ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ModuleContext . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ModuleContext . java < nl > index 36a6d73 . . f5c5862 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ModuleContext . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ModuleContext . java < nl > @ @ - 83 , 4 + 83 , 6 @ @ public interface ModuleContext { < nl > Messenger getMessenger ( ) ; < nl > < nl > MentionsModule getMentions ( ) ; < nl > + < nl > + Extensions getExtensions ( ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Modules . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Modules . java < nl > index a82d6b9 . . 9f80b34 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Modules . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Modules . java < nl > @ @ - 5 , 7 + 5 , 7 @ @ < nl > package im . actor . core . modules ; < nl > < nl > import im . actor . core . Configuration ; < nl > - import im . actor . core . Extension ; < nl > + import im . actor . core . ConfigurationExtension ; < nl > import im . actor . core . Messenger ; < nl > import im . actor . core . i18n . I18nEngine ; < nl > import im . actor . core . modules . internal . AppStateModule ; < nl > @ @ - 49 , 6 + 49 , 7 @ @ public class Modules implements ModuleContext { < nl > private final AppStateModule appStateModule ; < nl > private final ExternalModule external ; < nl > private final Authentication authentication ; < nl > + private final Extensions extensions ; < nl > < nl > / / Modules for authenticated users < nl > private volatile Updates updates ; < nl > @ @ - 86 , 6 + 87 , 9 @ @ public class Modules implements ModuleContext { < nl > timing . section ( " API " ) ; < nl > this . api = new ApiModule ( this ) ; < nl > < nl > + timing . section ( " Extensions " ) ; < nl > + this . extensions = new Extensions ( this ) ; < nl > + < nl > timing . section ( " App State " ) ; < nl > this . appStateModule = new AppStateModule ( this ) ; < nl > < nl > @ @ - 95 , 6 + 99 , 12 @ @ public class Modules implements ModuleContext { < nl > timing . section ( " Pushes " ) ; < nl > this . pushes = new PushesModule ( this ) ; < nl > < nl > + timing . section ( " Extensions " ) ; < nl > + for ( ConfigurationExtension e : configuration . getExtensions ( ) ) { < nl > + this . extensions . registerExtension ( e . getKey ( ) , e . getExtension ( ) ) ; < nl > + } < nl > + this . extensions . registerExtensions ( ) ; < nl > + < nl > timing . section ( " Auth " ) ; < nl > this . authentication = new Authentication ( this ) ; < nl > this . authentication . run ( ) ; < nl > @ @ - 153 , 6 + 163 , 8 @ @ public class Modules implements ModuleContext { < nl > messages . run ( ) ; < nl > timing . section ( " Updates " ) ; < nl > updates . run ( ) ; < nl > + timing . section ( " Extensions " ) ; < nl > + extensions . runExtensions ( ) ; < nl > timing . end ( ) ; < nl > < nl > messenger . onLoggedIn ( ) ; < nl > @ @ - 271 , 6 + 283 , 11 @ @ public class Modules implements ModuleContext { < nl > return mentions ; < nl > } < nl > < nl > + @ Override < nl > + public Extensions getExtensions ( ) { < nl > + return extensions ; < nl > + } < nl > + < nl > public EventBus getEvents ( ) { < nl > return events ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / ActorApi . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / ActorApi . java < nl > index e0f2058 . . a019d60 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / ActorApi . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / ActorApi . java < nl > @ @ - 5 , 6 + 5 , 7 @ @ < nl > package im . actor . core . network ; < nl > < nl > import im . actor . core . api . ApiVersion ; < nl > + import im . actor . core . network . parser . ApiParserConfig ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . core . network . api . ApiBroker ; < nl > import im . actor . core . network . parser . Request ; < nl > @ @ - 42 , 7 + 43 , 8 @ @ public class ActorApi { < nl > public ActorApi ( Endpoints endpoints , AuthKeyStorage keyStorage , ActorApiCallback callback , < nl > boolean isEnableLog , int minDelay , < nl > int maxDelay , < nl > - int maxFailureCount ) { < nl > + int maxFailureCount , < nl > + ApiParserConfig parserConfig ) { < nl > this . endpoints = endpoints ; < nl > this . keyStorage = keyStorage ; < nl > this . callback = callback ; < nl > @ @ - 51 , 7 + 53 , 7 @ @ public class ActorApi { < nl > this . maxDelay = maxDelay ; < nl > this . maxFailureCount = maxFailureCount ; < nl > this . apiBroker = ApiBroker . get ( endpoints , keyStorage , callback , isEnableLog , < nl > - NEXT _ ID . get ( ) , minDelay , maxDelay , maxFailureCount ) ; < nl > + NEXT _ ID . get ( ) , minDelay , maxDelay , maxFailureCount , parserConfig ) ; < nl > } < nl > < nl > / * * < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / api / ApiBroker . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / api / ApiBroker . java < nl > index 9786886 . . 207ffca 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / api / ApiBroker . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / api / ApiBroker . java < nl > @ @ - 8 , 6 + 8 , 7 @ @ import java . io . IOException ; < nl > import java . util . HashMap ; < nl > < nl > import im . actor . core . api . parser . RpcParser ; < nl > + import im . actor . core . network . parser . ApiParserConfig ; < nl > import im . actor . runtime . * ; < nl > import im . actor . runtime . Runtime ; < nl > import im . actor . runtime . actors . Actor ; < nl > @ @ - 46 , 13 + 47 , 14 @ @ public class ApiBroker extends Actor { < nl > public static ActorRef get ( final Endpoints endpoints , final AuthKeyStorage keyStorage , final ActorApiCallback callback , < nl > final boolean isEnableLog , int id , final int minDelay , < nl > final int maxDelay , < nl > - final int maxFailureCount ) { < nl > + final int maxFailureCount , < nl > + final ApiParserConfig parserConfig ) { < nl > return ActorSystem . system ( ) . actorOf ( Props . create ( ApiBroker . class , new ActorCreator < ApiBroker > ( ) { < nl > @ Override < nl > public ApiBroker create ( ) { < nl > return new ApiBroker ( endpoints , keyStorage , callback , isEnableLog , minDelay , < nl > maxDelay , < nl > - maxFailureCount ) ; < nl > + maxFailureCount , parserConfig ) ; < nl > } < nl > } ) . changeDispatcher ( " network " ) , " api / broker # " + id ) ; < nl > } < nl > @ @ - 77 , 9 + 79 , 12 @ @ public class ApiBroker extends Actor { < nl > < nl > private ExponentialBackoff authIdBackOff ; < nl > < nl > + private ApiParserConfig parserConfig ; < nl > + < nl > public ApiBroker ( Endpoints endpoints , AuthKeyStorage keyStorage , < nl > ActorApiCallback callback , < nl > - boolean isEnableLog , int minDelay , int maxDelay , int maxFailureCount ) { < nl > + boolean isEnableLog , int minDelay , int maxDelay , int maxFailureCount , < nl > + ApiParserConfig parserConfig ) { < nl > this . isEnableLog = isEnableLog ; < nl > this . endpoints = endpoints ; < nl > this . keyStorage = keyStorage ; < nl > @ @ - 87 , 7 + 92 , 8 @ @ public class ApiBroker extends Actor { < nl > this . minDelay = minDelay ; < nl > this . maxDelay = maxDelay ; < nl > this . maxFailureCount = maxFailureCount ; < nl > - authIdBackOff = new ExponentialBackoff ( minDelay , maxDelay , maxFailureCount ) ; < nl > + this . authIdBackOff = new ExponentialBackoff ( minDelay , maxDelay , maxFailureCount ) ; < nl > + this . parserConfig = parserConfig ; < nl > } < nl > < nl > @ Override < nl > @ @ - 249 , 7 + 255 , 7 @ @ public class ApiBroker extends Actor { < nl > < nl > Response response ; < nl > try { < nl > - response = ( Response ) new RpcParser ( ) . read ( ok . responseType , ok . payload ) ; < nl > + response = ( Response ) parserConfig . parseRpc ( ok . responseType , ok . payload ) ; < nl > } catch ( IOException e ) { < nl > e . printStackTrace ( ) ; < nl > return ; < nl > @ @ - 337 , 7 + 343 , 7 @ @ public class ApiBroker extends Actor { < nl > < nl > RpcScope updateBox ; < nl > try { < nl > - updateBox = new RpcParser ( ) . read ( type , body ) ; < nl > + updateBox = parserConfig . parseRpc ( type , body ) ; < nl > } catch ( IOException e ) { < nl > e . printStackTrace ( ) ; < nl > Log . w ( TAG , " Broken update box " ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ApiParserConfig . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ApiParserConfig . java < nl > new file mode 100644 < nl > index 0000000 . . d54fc83 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ApiParserConfig . java < nl > @ @ - 0 , 0 + 1 , 30 @ @ < nl > + package im . actor . core . network . parser ; < nl > + < nl > + import java . io . IOException ; < nl > + import java . util . concurrent . CopyOnWriteArrayList ; < nl > + < nl > + import im . actor . core . api . parser . RpcParser ; < nl > + import im . actor . core . api . parser . UpdatesParser ; < nl > + < nl > + public class ApiParserConfig { < nl > + < nl > + private RpcParser rpcRarser = new RpcParser ( ) ; < nl > + private UpdatesParser updatesParser = new UpdatesParser ( ) ; < nl > + private CopyOnWriteArrayList < ParsingExtension > extensions = new CopyOnWriteArrayList < ParsingExtension > ( ) ; < nl > + < nl > + public void addExtension ( ParsingExtension extension ) { < nl > + extensions . add ( extension ) ; < nl > + } < nl > + < nl > + public RpcScope parseRpc ( int header , byte [ ] content ) throws IOException { < nl > + for ( ParsingExtension ex : extensions ) { < nl > + try { < nl > + return ex . getRpcScopeParser ( ) . read ( header , content ) ; < nl > + } catch ( Exception e ) { < nl > + / / Ignore < nl > + } < nl > + } < nl > + < nl > + return rpcRarser . read ( header , content ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ParsingExtension . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ParsingExtension . java < nl > new file mode 100644 < nl > index 0000000 . . dbcbf08 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ParsingExtension . java < nl > @ @ - 0 , 0 + 1 , 21 @ @ < nl > + package im . actor . core . network . parser ; < nl > + < nl > + public class ParsingExtension { < nl > + < nl > + private BaseParser < RpcScope > rpcScopeParser ; < nl > + < nl > + private BaseParser < Update > updateScopeParser ; < nl > + < nl > + public ParsingExtension ( BaseParser < RpcScope > rpcScopeParser , BaseParser < Update > updateScopeParser ) { < nl > + this . rpcScopeParser = rpcScopeParser ; < nl > + this . updateScopeParser = updateScopeParser ; < nl > + } < nl > + < nl > + public BaseParser < RpcScope > getRpcScopeParser ( ) { < nl > + return rpcScopeParser ; < nl > + } < nl > + < nl > + public BaseParser < Update > getUpdateScopeParser ( ) { < nl > + return updateScopeParser ; < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index c294e30 . . 6553608 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import im . actor . core . js . modules . JsBindedValueCallback ; 
 import im . actor . core . js . modules . JsIdleModule ; 
 import im . actor . core . js . providers . JsNotificationsProvider ; 
 import im . actor . core . js . providers . JsPhoneBookProvider ; 
 + import im . actor . core . js . providers . JsWebRTCProvider ; 
 import im . actor . core . js . providers . electron . JsElectronApp ; 
 import im . actor . core . js . providers . electron . JsElectronListener ; 
 import im . actor . core . js . utils . HtmlMarkdownUtils ; 
 @ @ - 99 , 6 + 100 , 7 @ @ public class JsFacade implements Exportable { 
 configuration . setApiConfiguration ( new ApiConfiguration ( APP _ NAME , APP _ ID , APP _ KEY , clientName , uniqueId ) ) ; 
 configuration . setPhoneBookProvider ( new JsPhoneBookProvider ( ) ) ; 
 configuration . setNotificationProvider ( new JsNotificationsProvider ( ) ) ; 
 + configuration . setWebRTCProvider ( new JsWebRTCProvider ( ) ) ; 
 
 / / Setting locale 
 String locale = LocaleInfo . getCurrentLocale ( ) . getLocaleName ( ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java 
 new file mode 100644 
 index 0000000 . . 2f01f33 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + package im . actor . core . js . providers ; 
 + 
 + import im . actor . core . WebRTCProvider ; 
 + 
 + public class JsWebRTCProvider implements WebRTCProvider { 
 + 
 + @ Override 
 + public void onIncomingCall ( ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onOutgoingCall ( ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onCallStarted ( ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onSignalingReceived ( byte [ ] data ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onCallEnded ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Configuration . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Configuration . java 
 index 1d73500 . . 1e71b1c 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Configuration . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Configuration . java 
 @ @ - 4 , 6 + 4 , 8 @ @ 
 
 package im . actor . core ; 
 
 + import org . jetbrains . annotations . Nullable ; 
 + 
 import im . actor . core . network . TrustedKey ; 
 import im . actor . runtime . mtproto . ConnectionEndpoint ; 
 
 @ @ - 45 , 6 + 47 , 8 @ @ public class Configuration { 
 
 private boolean enablePhoneBookImport ; 
 
 + private WebRTCProvider webRTCProvider ; 
 + 
 Configuration ( ConnectionEndpoint [ ] endpoints , 
 PhoneBookProvider phoneBookProvider , 
 NotificationProvider notificationProvider , 
 @ @ - 62 , 7 + 66 , 8 @ @ public class Configuration { 
 String [ ] preferredLanguages , 
 String customAppName , 
 TrustedKey [ ] trustedKeys , 
 - boolean enablePhoneBookImport ) { 
 + boolean enablePhoneBookImport , 
 + WebRTCProvider webRTCProvider ) { 
 this . endpoints = endpoints ; 
 this . phoneBookProvider = phoneBookProvider ; 
 this . enableContactsLogging = enableContactsLogging ; 
 @ @ - 81 , 6 + 86 , 17 @ @ public class Configuration { 
 this . customAppName = customAppName ; 
 this . trustedKeys = trustedKeys ; 
 this . enablePhoneBookImport = enablePhoneBookImport ; 
 + this . webRTCProvider = webRTCProvider ; 
 + } 
 + 
 + / * * 
 + * Getting Web RTC provider if set 
 + * 
 + * @ return WebRTC provider 
 + * / 
 + @ Nullable 
 + public WebRTCProvider getWebRTCProvider ( ) { 
 + return webRTCProvider ; 
 } 
 
 / * * 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java 
 index 2fdf665 . . 9ed0087 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java 
 @ @ - 48 , 6 + 48 , 8 @ @ public class ConfigurationBuilder { 
 
 private boolean isPhoneBookImportEnabled = true ; 
 
 + private WebRTCProvider webRTCProvider ; 
 + 
 / * * 
 * Setting if application need to upload phone book to server 
 * 
 @ @ - 62 , 6 + 64 , 19 @ @ public class ConfigurationBuilder { 
 } 
 
 / * * 
 + * Setting Web RTC support provider 
 + * 
 + * @ param webRTCProvider WebRTC provider 
 + * @ return this 
 + * / 
 + @ NotNull 
 + @ ObjectiveCName ( " setWebRTCProvider : " ) 
 + public ConfigurationBuilder setWebRTCProvider ( WebRTCProvider webRTCProvider ) { 
 + this . webRTCProvider = webRTCProvider ; 
 + return this ; 
 + } 
 + 
 + / * * 
 * Adding Trusted key for protocol encryption securing 
 * 
 * @ param trustedKey hex representation of trusted key 
 @ @ - 356 , 6 + 371 , 7 @ @ public class ConfigurationBuilder { 
 timeZone , preferredLanguages . toArray ( new String [ preferredLanguages . size ( ) ] ) , 
 customAppName , 
 trustedKeys . toArray ( new TrustedKey [ trustedKeys . size ( ) ] ) , 
 - isPhoneBookImportEnabled ) ; 
 + isPhoneBookImportEnabled , 
 + webRTCProvider ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / WebRTCProvider . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / WebRTCProvider . java 
 new file mode 100644 
 index 0000000 . . e278409 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / WebRTCProvider . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package im . actor . core ; 
 + 
 + public interface WebRTCProvider { 
 + 
 + void onIncomingCall ( ) ; 
 + 
 + void onOutgoingCall ( ) ; 
 + 
 + void onCallStarted ( ) ; 
 + 
 + void onSignalingReceived ( byte [ ] data ) ; 
 + 
 + void onCallEnded ( ) ; 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 new file mode 100644 
 index 0000000 . . 4293e4f 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 @ @ - 0 , 0 + 1 , 86 @ @ 
 + package im . actor . core . modules . calls ; 
 + 
 + import im . actor . core . api . rpc . RequestSubscribeToCalls ; 
 + import im . actor . core . events . NewSessionCreated ; 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . util . ModuleActor ; 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . eventbus . Event ; 
 + import im . actor . runtime . function . Constructor ; 
 + 
 + public class CallManagerActor extends ModuleActor { 
 + 
 + public static Constructor < CallManagerActor > CONSTRUCTOR ( final ModuleContext context ) { 
 + return new Constructor < CallManagerActor > ( ) { 
 + @ Override 
 + public CallManagerActor create ( ) { 
 + return new CallManagerActor ( context ) ; 
 + } 
 + } ; 
 + } 
 + 
 + private static final String TAG = " CallManagerActor " ; 
 + 
 + private long subscribeRequest = - 1 ; 
 + 
 + public CallManagerActor ( ModuleContext context ) { 
 + super ( context ) ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + super . preStart ( ) ; 
 + subscribeForCalls ( ) ; 
 + subscribe ( NewSessionCreated . EVENT ) ; 
 + } 
 + 
 + private void onIncomingCall ( long callId , int uid ) { 
 + Log . d ( TAG , " onIncomingCall ( " + callId + " , " + uid + " ) " ) ; 
 + } 
 + 
 + private void subscribeForCalls ( ) { 
 + if ( subscribeRequest ! = - 1 ) { 
 + context ( ) . getActorApi ( ) . cancelRequest ( subscribeRequest ) ; 
 + subscribeRequest = - 1 ; 
 + } 
 + subscribeRequest = request ( new RequestSubscribeToCalls ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onBusEvent ( Event event ) { 
 + if ( NewSessionCreated . EVENT . equals ( event . getType ( ) ) ) { 
 + subscribeForCalls ( ) ; 
 + } else { 
 + super . onBusEvent ( event ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof OnIncomingCall ) { 
 + OnIncomingCall call = ( OnIncomingCall ) message ; 
 + onIncomingCall ( call . getCallId ( ) , call . getUid ( ) ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 + } 
 + } 
 + 
 + public static class OnIncomingCall { 
 + 
 + private long callId ; 
 + private int uid ; 
 + 
 + public OnIncomingCall ( long callId , int uid ) { 
 + this . callId = callId ; 
 + this . uid = uid ; 
 + } 
 + 
 + public long getCallId ( ) { 
 + return callId ; 
 + } 
 + 
 + public int getUid ( ) { 
 + return uid ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 index 2b3bc7c . . 695288e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . core . modules . calls ; 
 
 import java . util . HashMap ; 
 
 + import im . actor . core . WebRTCProvider ; 
 import im . actor . core . api . ApiOutPeer ; 
 import im . actor . core . api . ApiPeerType ; 
 import im . actor . core . api . rpc . RequestCallInProgress ; 
 @ @ - 30 , 149 + 31 , 150 @ @ import im . actor . runtime . actors . Props ; 
 import im . actor . runtime . eventbus . BusSubscriber ; 
 import im . actor . runtime . eventbus . Event ; 
 
 + import static im . actor . runtime . actors . ActorSystem . system ; 
 + 
 public class CallsModule extends AbsModule { 
 
 public static final int MAX _ CALLS _ COUNT = 1 ; 
 - private static final String TAG = " CALLS " ; 
 + public static final int CALL _ TIMEOUT = 10 ; 
 + public static boolean CALLS _ ENABLED = false ; 
 + public static boolean MULTIPLE _ CALLS _ ENABLED = false ; 
 + 
 + public static final String TAG = " CALLS " ; 
 + 
 + private HashMap < Long , ActorRef > calls = new HashMap < > ( ) ; 
 + private WebRTCProvider provider ; 
 + private ActorRef callManager ; 
 
 public CallsModule ( ModuleContext context ) { 
 super ( context ) ; 
 - } 
 - 
 
 - public static final int CALL _ TIMEOUT = 10 ; 
 - public static boolean CALLS _ ENABLED = false ; 
 - public static boolean MULTIPLE _ CALLS _ ENABLED = false ; 
 - HashMap < Long , ActorRef > calls = new HashMap < > ( ) ; 
 + provider = context ( ) . getConfiguration ( ) . getWebRTCProvider ( ) ; 
 + } 
 
 public void run ( ) { 
 - if ( CALLS _ ENABLED ) { 
 - request ( new RequestSubscribeToCalls ( ) ) ; 
 - context ( ) . getEvents ( ) . subscribe ( new BusSubscriber ( ) { 
 - @ Override 
 - public void onBusEvent ( Event event ) { 
 - request ( new RequestSubscribeToCalls ( ) ) ; 
 - } 
 - } , NewSessionCreated . EVENT ) ; 
 + if ( provider = = null ) { 
 + return ; 
 } 
 + 
 + callManager = system ( ) . actorOf ( " calls / manager " , CallManagerActor . CONSTRUCTOR ( context ( ) ) ) ; 
 + 
 + / / if ( CALLS _ ENABLED ) { 
 + / / request ( new RequestSubscribeToCalls ( ) ) ; 
 + / / context ( ) . getEvents ( ) . subscribe ( new BusSubscriber ( ) { 
 + / / @ Override 
 + / / public void onBusEvent ( Event event ) { 
 + / / request ( new RequestSubscribeToCalls ( ) ) ; 
 + / / } 
 + / / } , NewSessionCreated . EVENT ) ; 
 + / / } 
 } 
 
 public Command < ResponseDoCall > makeCall ( final int uid , final CallCallback callCallback ) { 
 - return new Command < ResponseDoCall > ( ) { 
 - @ Override 
 - public void start ( final CommandCallback < ResponseDoCall > callback ) { 
 - User u = users ( ) . getValue ( uid ) ; 
 - request ( new RequestDoCall ( new ApiOutPeer ( ApiPeerType . PRIVATE , u . getUid ( ) , u . getAccessHash ( ) ) , CALL _ TIMEOUT ) , new RpcCallback < ResponseDoCall > ( ) { 
 - @ Override 
 - public void onResult ( final ResponseDoCall response ) { 
 - callback . onResult ( response ) ; 
 - 
 - Log . d ( TAG , " make call " + response . getCallId ( ) ) ; 
 - calls . put ( response . getCallId ( ) , 
 - ActorSystem . system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { 
 - @ Override 
 - public Actor create ( ) { 
 - return new CallActor ( response . getCallId ( ) , callCallback , context ( ) ) ; 
 - } 
 - } ) , " actor / call _ " + response . getCallId ( ) ) ) ; 
 - 
 - 
 - } 
 - 
 - @ Override 
 - public void onError ( RpcException e ) { 
 - callback . onError ( e ) ; 
 - } 
 - } ) ; 
 - } 
 - } ; 
 + / / return new Command < ResponseDoCall > ( ) { 
 + / / @ Override 
 + / / public void start ( final CommandCallback < ResponseDoCall > callback ) { 
 + / / User u = users ( ) . getValue ( uid ) ; 
 + / / request ( new RequestDoCall ( new ApiOutPeer ( ApiPeerType . PRIVATE , u . getUid ( ) , u . getAccessHash ( ) ) , CALL _ TIMEOUT ) , new RpcCallback < ResponseDoCall > ( ) { 
 + / / @ Override 
 + / / public void onResult ( final ResponseDoCall response ) { 
 + / / callback . onResult ( response ) ; 
 + / / 
 + / / Log . d ( TAG , " make call " + response . getCallId ( ) ) ; 
 + / / calls . put ( response . getCallId ( ) , 
 + / / system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { 
 + / / @ Override 
 + / / public Actor create ( ) { 
 + / / return new CallActor ( response . getCallId ( ) , callCallback , context ( ) ) ; 
 + / / } 
 + / / } ) , " actor / call _ " + response . getCallId ( ) ) ) ; 
 + / / 
 + / / 
 + / / } 
 + / / 
 + / / @ Override 
 + / / public void onError ( RpcException e ) { 
 + / / callback . onError ( e ) ; 
 + / / } 
 + / / } ) ; 
 + / / } 
 + / / } ; 
 + return null ; 
 } 
 
 public void callInProgress ( long callId ) { 
 - request ( new RequestCallInProgress ( callId , CALL _ TIMEOUT ) ) ; 
 + / / request ( new RequestCallInProgress ( callId , CALL _ TIMEOUT ) ) ; 
 } 
 
 public void handleCall ( final long callId , final CallCallback callback ) { 
 - ActorRef call = calls . get ( callId ) ; 
 - if ( call ! = null ) { 
 - call . send ( new CallActor . HandleCall ( callback ) ) ; 
 - } else { 
 - / / can ' t find call - close fragment 
 - callback . onCallEnd ( ) ; 
 - } 
 + / / ActorRef call = calls . get ( callId ) ; 
 + / / if ( call ! = null ) { 
 + / / call . send ( new CallActor . HandleCall ( callback ) ) ; 
 + / / } else { 
 + / / / / can ' t find call - close fragment 
 + / / callback . onCallEnd ( ) ; 
 + / / } 
 } 
 
 / / do end call 
 public void endCall ( long callId ) { 
 - Log . d ( TAG , " do end call " + callId ) ; 
 - 
 - request ( new RequestEndCall ( callId ) ) ; 
 - ActorRef call = calls . get ( callId ) ; 
 - if ( call ! = null ) { 
 - Log . d ( TAG , " call exist - end it " ) ; 
 - 
 - call . send ( new CallActor . EndCall ( ) ) ; 
 - } else { 
 - Log . d ( TAG , " call not exist - remove it " ) ; 
 - onCallEnded ( callId ) ; 
 - } 
 + / / Log . d ( TAG , " do end call " + callId ) ; 
 + / / 
 + / / request ( new RequestEndCall ( callId ) ) ; 
 + / / ActorRef call = calls . get ( callId ) ; 
 + / / if ( call ! = null ) { 
 + / / Log . d ( TAG , " call exist - end it " ) ; 
 + / / 
 + / / call . send ( new CallActor . EndCall ( ) ) ; 
 + / / } else { 
 + / / Log . d ( TAG , " call not exist - remove it " ) ; 
 + / / onCallEnded ( callId ) ; 
 + / / } 
 } 
 
 - public void onIncomingCall ( final long callId , int uid ) { 
 - Log . d ( TAG , " incoming call " + callId ) ; 
 - 
 - if ( ! calls . keySet ( ) . contains ( callId ) ) { 
 - calls . put ( callId , 
 - ActorSystem . system ( ) . actorOf ( " actor / call _ " + callId , new ActorCreator ( ) { 
 - @ Override 
 - public Actor create ( ) { 
 - return new CallActor ( callId , context ( ) ) ; 
 - } 
 - } ) ) ; 
 - if ( ! MULTIPLE _ CALLS _ ENABLED & calls . keySet ( ) . size ( ) > MAX _ CALLS _ COUNT ) { 
 - calls . get ( callId ) . send ( new CallActor . EndCall ( ) ) ; 
 - } else { 
 - context ( ) . getEvents ( ) . post ( new IncomingCall ( callId , uid ) ) ; 
 - } 
 + public void onIncomingCall ( long callId , int uid ) { 
 + if ( provider = = null ) { 
 + return ; 
 } 
 
 + callManager . send ( new CallManagerActor . OnIncomingCall ( callId , uid ) ) ; 
 } 
 
 / / on end call update 
 public void onEndCall ( long callId ) { 
 - Log . d ( TAG , " end call update : " + callId ) ; 
 - ActorRef call = calls . get ( callId ) ; 
 - if ( call ! = null ) { 
 - Log . d ( TAG , " call exist - end it " ) ; 
 - call . send ( new CallActor . EndCall ( ) ) ; 
 - } else { 
 - Log . d ( TAG , " call not exist - remove it " ) ; 
 - calls . remove ( callId ) ; 
 - } 
 + / / Log . d ( TAG , " end call update : " + callId ) ; 
 + / / ActorRef call = calls . get ( callId ) ; 
 + / / if ( call ! = null ) { 
 + / / Log . d ( TAG , " call exist - end it " ) ; 
 + / / call . send ( new CallActor . EndCall ( ) ) ; 
 + / / } else { 
 + / / Log . d ( TAG , " call not exist - remove it " ) ; 
 + / / calls . remove ( callId ) ; 
 + / / } 
 } 
 
 / / after end call update processed by CallActor 
 public void onCallEnded ( long callId ) { 
 - Log . d ( TAG , " on callActor ended call : " + callId ) ; 
 - calls . remove ( callId ) ; 
 + / / Log . d ( TAG , " on callActor ended call : " + callId ) ; 
 + / / calls . remove ( callId ) ; 
 } 
 
 public void onCallInProgress ( long callId , int timeout ) { 
 - ActorRef call = calls . get ( callId ) ; 
 - if ( call ! = null ) { 
 - call . send ( new CallActor . CallInProgress ( timeout ) ) ; 
 - } 
 + / / ActorRef call = calls . get ( callId ) ; 
 + / / if ( call ! = null ) { 
 + / / call . send ( new CallActor . CallInProgress ( timeout ) ) ; 
 + / / } 
 } 
 
 public void sendSignal ( long callId , AbsSignal signal ) { 
 - request ( new RequestSendCallSignal ( callId , signal . toByteArray ( ) ) ) ; 
 + / / request ( new RequestSendCallSignal ( callId , signal . toByteArray ( ) ) ) ; 
 } 
 
 public void onSignal ( long callId , byte [ ] data ) { 
 - ActorRef call = calls . get ( callId ) ; 
 - if ( call ! = null ) { 
 - call . send ( new CallActor . Signal ( data ) ) ; 
 - } 
 + / / ActorRef call = calls . get ( callId ) ; 
 + / / if ( call ! = null ) { 
 + / / call . send ( new CallActor . Signal ( data ) ) ; 
 + / / } 
 } 
 
 public interface CallCallback { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java 
 new file mode 100644 
 index 0000000 . . 45e5015 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + package im . actor . core . modules . calls ; 
 + 
 + import im . actor . core . api . updates . UpdateCallEnded ; 
 + import im . actor . core . api . updates . UpdateCallInProgress ; 
 + import im . actor . core . api . updates . UpdateCallSignal ; 
 + import im . actor . core . api . updates . UpdateIncomingCall ; 
 + import im . actor . core . modules . AbsModule ; 
 + import im . actor . core . modules . ModuleContext ; 
 + 
 + public class CallsProcessor extends AbsModule { 
 + public CallsProcessor ( ModuleContext context ) { 
 + super ( context ) ; 
 + } 
 + 
 + public void onIncomingCall ( UpdateIncomingCall call ) { 
 + context ( ) . getCallsModule ( ) . onIncomingCall ( call . getCallId ( ) , call . getUid ( ) ) ; 
 + } 
 + 
 + public void onCallInProgress ( UpdateCallInProgress inProgress ) { 
 + context ( ) . getCallsModule ( ) . onCallInProgress ( inProgress . getCallId ( ) , inProgress . getTimeout ( ) ) ; 
 + } 
 + 
 + public void onCallEnd ( UpdateCallEnded callEnd ) { 
 + context ( ) . getCallsModule ( ) . onEndCall ( callEnd . getCallId ( ) ) ; 
 + } 
 + 
 + public void onSignal ( UpdateCallSignal signal ) { 
 + context ( ) . getCallsModule ( ) . onSignal ( signal . getCallId ( ) , signal . getContent ( ) ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / CallsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / CallsProcessor . java 
 deleted file mode 100644 
 index 412d2fd . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / CallsProcessor . java 
 + + + / dev / null 
 @ @ - 1 , 30 + 0 , 0 @ @ 
 - package im . actor . core . modules . updates ; 
 - 
 - import im . actor . core . api . updates . UpdateCallEnded ; 
 - import im . actor . core . api . updates . UpdateCallInProgress ; 
 - import im . actor . core . api . updates . UpdateCallSignal ; 
 - import im . actor . core . api . updates . UpdateIncomingCall ; 
 - import im . actor . core . modules . AbsModule ; 
 - import im . actor . core . modules . ModuleContext ; 
 - 
 - public class CallsProcessor extends AbsModule { 
 - public CallsProcessor ( ModuleContext context ) { 
 - super ( context ) ; 
 - } 
 - 
 - public void onIncomingCall ( UpdateIncomingCall call ) { 
 - context ( ) . getCallsModule ( ) . onIncomingCall ( call . getCallId ( ) , call . getUid ( ) ) ; 
 - } 
 - 
 - public void onCallInProgress ( UpdateCallInProgress inProgress ) { 
 - context ( ) . getCallsModule ( ) . onCallInProgress ( inProgress . getCallId ( ) , inProgress . getTimeout ( ) ) ; 
 - } 
 - 
 - public void onCallEnd ( UpdateCallEnded callEnd ) { 
 - context ( ) . getCallsModule ( ) . onEndCall ( callEnd . getCallId ( ) ) ; 
 - } 
 - 
 - public void onSignal ( UpdateCallSignal signal ) { 
 - context ( ) . getCallsModule ( ) . onSignal ( signal . getCallId ( ) , signal . getContent ( ) ) ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 index 15b78e9 . . 5b7501d 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 @ @ - 42 , 8 + 42 , 6 @ @ import im . actor . core . api . updates . UpdateMessageReceived ; 
 import im . actor . core . api . updates . UpdateMessageSent ; 
 import im . actor . core . api . updates . UpdateOwnStickersChanged ; 
 import im . actor . core . api . updates . UpdateParameterChanged ; 
 - import im . actor . core . api . updates . UpdatePublicKeyGroupAdded ; 
 - import im . actor . core . api . updates . UpdatePublicKeyGroupRemoved ; 
 import im . actor . core . api . updates . UpdateReactionsUpdate ; 
 import im . actor . core . api . updates . UpdateStickerCollectionsChanged ; 
 import im . actor . core . api . updates . UpdateTyping ; 
 @ @ - 55 , 7 + 53 , 7 @ @ import im . actor . core . api . updates . UpdateUserOnline ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 - import im . actor . core . modules . encryption . KeyManagerActor ; 
 + import im . actor . core . modules . calls . CallsProcessor ; 
 import im . actor . core . modules . internal . contacts . ContactsSyncActor ; 
 import im . actor . core . modules . internal . messages . OwnReadActor ; 
 import im . actor . core . modules . updates . internal . ChangeContent ;

NEAREST DIFF:
diff - - git a / . gitignore b / . gitignore 
 index a882b44 . . 59a9cde 100644 
 - - - a / . gitignore 
 + + + b / . gitignore 
 @ @ - 114 , 3 + 114 , 4 @ @ actor - sdk / sdk - ios / ActorSDK . xcworkspace / xcuserdata 
 actor - sdk / sdk - ios / Pods 
 actor - sdk / sdk - ios / ActorSDK . xcodeproj / xcuserdata 
 actor - sdk / sdk - ios / ActorSDK . xcworkspace 
 + actor - sdk / sdk - extension / ext / build 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Configuration . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Configuration . java 
 index 7aadc31 . . 29d746f 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Configuration . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Configuration . java 
 @ @ - 11 , 6 + 11 , 8 @ @ import im . actor . runtime . mtproto . ConnectionEndpoint ; 
 * / 
 public class Configuration { 
 
 + private final ConfigurationExtension [ ] extensions ; 
 + 
 private final ConnectionEndpoint [ ] endpoints ; 
 
 private PhoneBookProvider phoneBookProvider ; 
 @ @ - 44 , 7 + 46 , 8 @ @ public class Configuration { 
 PlatformType platformType , 
 int minDelay , 
 int maxDelay , 
 - int maxFailureCount ) { 
 + int maxFailureCount , 
 + ConfigurationExtension [ ] extensions ) { 
 this . endpoints = endpoints ; 
 this . phoneBookProvider = phoneBookProvider ; 
 this . enableContactsLogging = enableContactsLogging ; 
 @ @ - 57 , 6 + 60 , 16 @ @ public class Configuration { 
 this . minDelay = minDelay ; 
 this . maxDelay = maxDelay ; 
 this . maxFailureCount = maxFailureCount ; 
 + this . extensions = extensions ; 
 + } 
 + 
 + / * * 
 + * Get configured extensions 
 + * 
 + * @ return extensions 
 + * / 
 + public ConfigurationExtension [ ] getExtensions ( ) { 
 + return extensions ; 
 } 
 
 / * * 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationBuilder . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationBuilder . java 
 index b3fba86 . . dff56cb 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationBuilder . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationBuilder . java 
 @ @ - 17 , 6 + 17 , 7 @ @ import im . actor . runtime . mtproto . ConnectionEndpoint ; 
 * / 
 public class ConfigurationBuilder { 
 
 + private ArrayList < ConfigurationExtension > extensions = new ArrayList < ConfigurationExtension > ( ) ; 
 private ArrayList < ConnectionEndpoint > endpoints = new ArrayList < ConnectionEndpoint > ( ) ; 
 
 private PhoneBookProvider phoneBookProvider ; 
 @ @ - 178 , 6 + 179 , 18 @ @ public class ConfigurationBuilder { 
 } 
 
 / * * 
 + * Adding app extension 
 + * 
 + * @ param key extension key 
 + * @ param extension extension 
 + * @ return this 
 + * / 
 + public ConfigurationBuilder addExtension ( String key , Extension extension ) { 
 + this . extensions . add ( new ConfigurationExtension ( key , extension ) ) ; 
 + return this ; 
 + } 
 + 
 + / * * 
 * Adding Endpoint for API 
 * Valid URLs are : 
 * tcp : / / [ host ] : [ port ] 
 @ @ - 258 , 6 + 271 , 7 @ @ public class ConfigurationBuilder { 
 phoneBookProvider , notificationProvider , 
 apiConfiguration , enableContactsLogging , enableNetworkLogging , 
 enableFilesLogging , deviceCategory , platformType , 
 - minDelay , maxDelay , maxFailureCount ) ; 
 + minDelay , maxDelay , maxFailureCount , 
 + extensions . toArray ( new ConfigurationExtension [ extensions . size ( ) ] ) ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationExtension . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationExtension . java 
 new file mode 100644 
 index 0000000 . . e964a7d 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationExtension . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package im . actor . core ; 
 + 
 + public class ConfigurationExtension { 
 + 
 + private String key ; 
 + private Extension extension ; 
 + 
 + public ConfigurationExtension ( String key , Extension extension ) { 
 + this . key = key ; 
 + this . extension = extension ; 
 + } 
 + 
 + public String getKey ( ) { 
 + return key ; 
 + } 
 + 
 + public Extension getExtension ( ) { 
 + return extension ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Extension . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Extension . java 
 index f251256 . . ea6736b 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Extension . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Extension . java 
 @ @ - 8 , 13 + 8 , 6 @ @ import im . actor . core . modules . ModuleContext ; 
 public interface Extension { 
 
 / * * 
 - * Get unique extension key 
 - * 
 - * @ return extension key 
 - * / 
 - String getExtensionKey ( ) ; 
 - 
 - / * * 
 * Performing registration of extension before Messenger run 
 * 
 * @ param context Module context 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ApiModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ApiModule . java 
 index 9088883 . . f97ea13 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ApiModule . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ApiModule . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import im . actor . core . modules . utils . PreferenceApiStorage ; 
 import im . actor . core . network . ActorApi ; 
 import im . actor . core . network . ActorApiCallback ; 
 import im . actor . core . network . Endpoints ; 
 + import im . actor . core . network . parser . ApiParserConfig ; 
 import im . actor . core . network . parser . Request ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 @ @ - 21 , 6 + 22 , 7 @ @ public class ApiModule extends AbsModule implements BusSubscriber { 
 
 private final ActorApi actorApi ; 
 private final ActorRef persistentRequests ; 
 + private final ApiParserConfig parserConfig = new ApiParserConfig ( ) ; 
 
 public ApiModule ( Modules context ) { 
 super ( context ) ; 
 @ @ - 31 , 7 + 33 , 7 @ @ public class ApiModule extends AbsModule implements BusSubscriber { 
 context ( ) . getConfiguration ( ) . isEnableNetworkLogging ( ) , 
 context ( ) . getConfiguration ( ) . getMinDelay ( ) , 
 context ( ) . getConfiguration ( ) . getMaxDelay ( ) , 
 - context ( ) . getConfiguration ( ) . getMaxFailureCount ( ) ) ; 
 + context ( ) . getConfiguration ( ) . getMaxFailureCount ( ) , parserConfig ) ; 
 
 context . getEvents ( ) . subscribe ( this , AppVisibleChanged . EVENT ) ; 
 
 @ @ - 43 , 12 + 45 , 25 @ @ public class ApiModule extends AbsModule implements BusSubscriber { 
 } ) , " api / persistence " ) ; 
 } 
 
 - 
 + / * * 
 + * Get Actor API instance 
 + * 
 + * @ return Actor API instance 
 + * / 
 public ActorApi getActorApi ( ) { 
 return actorApi ; 
 } 
 
 / * * 
 + * Get API Parser configuration 
 + * 
 + * @ return Actor API parser config 
 + * / 
 + public ApiParserConfig getParserConfig ( ) { 
 + return parserConfig ; 
 + } 
 + 
 + / * * 
 * Performing persist request . Keep repeating request even after application restart 
 * 
 * @ param request request 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Extensions . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Extensions . java 
 new file mode 100644 
 index 0000000 . . 6877c1d 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Extensions . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + package im . actor . core . modules ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . core . Extension ; 
 + 
 + public class Extensions extends AbsModule { 
 + 
 + private ArrayList < ExtensionRef > extensionRefs = new ArrayList < ExtensionRef > ( ) ; 
 + 
 + public Extensions ( ModuleContext context ) { 
 + super ( context ) ; 
 + } 
 + 
 + public void registerExtension ( String key , Extension extension ) { 
 + extensionRefs . add ( new ExtensionRef ( key , extension ) ) ; 
 + } 
 + 
 + public Extension findExtension ( String key ) { 
 + for ( ExtensionRef r : extensionRefs ) { 
 + if ( r . getKey ( ) . equals ( key ) ) { 
 + return r . getExtension ( ) ; 
 + } 
 + } 
 + return null ; 
 + } 
 + 
 + public void registerExtensions ( ) { 
 + for ( ExtensionRef r : extensionRefs ) { 
 + r . getExtension ( ) . registerExtension ( context ( ) ) ; 
 + } 
 + } 
 + 
 + public void runExtensions ( ) { 
 + for ( ExtensionRef r : extensionRefs ) { 
 + r . getExtension ( ) . runExtension ( ) ; 
 + } 
 + } 
 + 
 + private class ExtensionRef { 
 + private String key ; 
 + private Extension extension ; 
 + 
 + public ExtensionRef ( String key , Extension extension ) { 
 + this . key = key ; 
 + this . extension = extension ; 
 + } 
 + 
 + public String getKey ( ) { 
 + return key ; 
 + } 
 + 
 + public Extension getExtension ( ) { 
 + return extension ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ModuleContext . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ModuleContext . java 
 index 36a6d73 . . f5c5862 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ModuleContext . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ModuleContext . java 
 @ @ - 83 , 4 + 83 , 6 @ @ public interface ModuleContext { 
 Messenger getMessenger ( ) ; 
 
 MentionsModule getMentions ( ) ; 
 + 
 + Extensions getExtensions ( ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Modules . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Modules . java 
 index a82d6b9 . . 9f80b34 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Modules . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Modules . java 
 @ @ - 5 , 7 + 5 , 7 @ @ 
 package im . actor . core . modules ; 
 
 import im . actor . core . Configuration ; 
 - import im . actor . core . Extension ; 
 + import im . actor . core . ConfigurationExtension ; 
 import im . actor . core . Messenger ; 
 import im . actor . core . i18n . I18nEngine ; 
 import im . actor . core . modules . internal . AppStateModule ; 
 @ @ - 49 , 6 + 49 , 7 @ @ public class Modules implements ModuleContext { 
 private final AppStateModule appStateModule ; 
 private final ExternalModule external ; 
 private final Authentication authentication ; 
 + private final Extensions extensions ; 
 
 / / Modules for authenticated users 
 private volatile Updates updates ; 
 @ @ - 86 , 6 + 87 , 9 @ @ public class Modules implements ModuleContext { 
 timing . section ( " API " ) ; 
 this . api = new ApiModule ( this ) ; 
 
 + timing . section ( " Extensions " ) ; 
 + this . extensions = new Extensions ( this ) ; 
 + 
 timing . section ( " App State " ) ; 
 this . appStateModule = new AppStateModule ( this ) ; 
 
 @ @ - 95 , 6 + 99 , 12 @ @ public class Modules implements ModuleContext { 
 timing . section ( " Pushes " ) ; 
 this . pushes = new PushesModule ( this ) ; 
 
 + timing . section ( " Extensions " ) ; 
 + for ( ConfigurationExtension e : configuration . getExtensions ( ) ) { 
 + this . extensions . registerExtension ( e . getKey ( ) , e . getExtension ( ) ) ; 
 + } 
 + this . extensions . registerExtensions ( ) ; 
 + 
 timing . section ( " Auth " ) ; 
 this . authentication = new Authentication ( this ) ; 
 this . authentication . run ( ) ; 
 @ @ - 153 , 6 + 163 , 8 @ @ public class Modules implements ModuleContext { 
 messages . run ( ) ; 
 timing . section ( " Updates " ) ; 
 updates . run ( ) ; 
 + timing . section ( " Extensions " ) ; 
 + extensions . runExtensions ( ) ; 
 timing . end ( ) ; 
 
 messenger . onLoggedIn ( ) ; 
 @ @ - 271 , 6 + 283 , 11 @ @ public class Modules implements ModuleContext { 
 return mentions ; 
 } 
 
 + @ Override 
 + public Extensions getExtensions ( ) { 
 + return extensions ; 
 + } 
 + 
 public EventBus getEvents ( ) { 
 return events ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / ActorApi . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / ActorApi . java 
 index e0f2058 . . a019d60 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / ActorApi . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / ActorApi . java 
 @ @ - 5 , 6 + 5 , 7 @ @ 
 package im . actor . core . network ; 
 
 import im . actor . core . api . ApiVersion ; 
 + import im . actor . core . network . parser . ApiParserConfig ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . core . network . api . ApiBroker ; 
 import im . actor . core . network . parser . Request ; 
 @ @ - 42 , 7 + 43 , 8 @ @ public class ActorApi { 
 public ActorApi ( Endpoints endpoints , AuthKeyStorage keyStorage , ActorApiCallback callback , 
 boolean isEnableLog , int minDelay , 
 int maxDelay , 
 - int maxFailureCount ) { 
 + int maxFailureCount , 
 + ApiParserConfig parserConfig ) { 
 this . endpoints = endpoints ; 
 this . keyStorage = keyStorage ; 
 this . callback = callback ; 
 @ @ - 51 , 7 + 53 , 7 @ @ public class ActorApi { 
 this . maxDelay = maxDelay ; 
 this . maxFailureCount = maxFailureCount ; 
 this . apiBroker = ApiBroker . get ( endpoints , keyStorage , callback , isEnableLog , 
 - NEXT _ ID . get ( ) , minDelay , maxDelay , maxFailureCount ) ; 
 + NEXT _ ID . get ( ) , minDelay , maxDelay , maxFailureCount , parserConfig ) ; 
 } 
 
 / * * 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / api / ApiBroker . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / api / ApiBroker . java 
 index 9786886 . . 207ffca 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / api / ApiBroker . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / api / ApiBroker . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import java . io . IOException ; 
 import java . util . HashMap ; 
 
 import im . actor . core . api . parser . RpcParser ; 
 + import im . actor . core . network . parser . ApiParserConfig ; 
 import im . actor . runtime . * ; 
 import im . actor . runtime . Runtime ; 
 import im . actor . runtime . actors . Actor ; 
 @ @ - 46 , 13 + 47 , 14 @ @ public class ApiBroker extends Actor { 
 public static ActorRef get ( final Endpoints endpoints , final AuthKeyStorage keyStorage , final ActorApiCallback callback , 
 final boolean isEnableLog , int id , final int minDelay , 
 final int maxDelay , 
 - final int maxFailureCount ) { 
 + final int maxFailureCount , 
 + final ApiParserConfig parserConfig ) { 
 return ActorSystem . system ( ) . actorOf ( Props . create ( ApiBroker . class , new ActorCreator < ApiBroker > ( ) { 
 @ Override 
 public ApiBroker create ( ) { 
 return new ApiBroker ( endpoints , keyStorage , callback , isEnableLog , minDelay , 
 maxDelay , 
 - maxFailureCount ) ; 
 + maxFailureCount , parserConfig ) ; 
 } 
 } ) . changeDispatcher ( " network " ) , " api / broker # " + id ) ; 
 } 
 @ @ - 77 , 9 + 79 , 12 @ @ public class ApiBroker extends Actor { 
 
 private ExponentialBackoff authIdBackOff ; 
 
 + private ApiParserConfig parserConfig ; 
 + 
 public ApiBroker ( Endpoints endpoints , AuthKeyStorage keyStorage , 
 ActorApiCallback callback , 
 - boolean isEnableLog , int minDelay , int maxDelay , int maxFailureCount ) { 
 + boolean isEnableLog , int minDelay , int maxDelay , int maxFailureCount , 
 + ApiParserConfig parserConfig ) { 
 this . isEnableLog = isEnableLog ; 
 this . endpoints = endpoints ; 
 this . keyStorage = keyStorage ; 
 @ @ - 87 , 7 + 92 , 8 @ @ public class ApiBroker extends Actor { 
 this . minDelay = minDelay ; 
 this . maxDelay = maxDelay ; 
 this . maxFailureCount = maxFailureCount ; 
 - authIdBackOff = new ExponentialBackoff ( minDelay , maxDelay , maxFailureCount ) ; 
 + this . authIdBackOff = new ExponentialBackoff ( minDelay , maxDelay , maxFailureCount ) ; 
 + this . parserConfig = parserConfig ; 
 } 
 
 @ Override 
 @ @ - 249 , 7 + 255 , 7 @ @ public class ApiBroker extends Actor { 
 
 Response response ; 
 try { 
 - response = ( Response ) new RpcParser ( ) . read ( ok . responseType , ok . payload ) ; 
 + response = ( Response ) parserConfig . parseRpc ( ok . responseType , ok . payload ) ; 
 } catch ( IOException e ) { 
 e . printStackTrace ( ) ; 
 return ; 
 @ @ - 337 , 7 + 343 , 7 @ @ public class ApiBroker extends Actor { 
 
 RpcScope updateBox ; 
 try { 
 - updateBox = new RpcParser ( ) . read ( type , body ) ; 
 + updateBox = parserConfig . parseRpc ( type , body ) ; 
 } catch ( IOException e ) { 
 e . printStackTrace ( ) ; 
 Log . w ( TAG , " Broken update box " ) ; 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ApiParserConfig . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ApiParserConfig . java 
 new file mode 100644 
 index 0000000 . . d54fc83 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ApiParserConfig . java 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + package im . actor . core . network . parser ; 
 + 
 + import java . io . IOException ; 
 + import java . util . concurrent . CopyOnWriteArrayList ; 
 + 
 + import im . actor . core . api . parser . RpcParser ; 
 + import im . actor . core . api . parser . UpdatesParser ; 
 + 
 + public class ApiParserConfig { 
 + 
 + private RpcParser rpcRarser = new RpcParser ( ) ; 
 + private UpdatesParser updatesParser = new UpdatesParser ( ) ; 
 + private CopyOnWriteArrayList < ParsingExtension > extensions = new CopyOnWriteArrayList < ParsingExtension > ( ) ; 
 + 
 + public void addExtension ( ParsingExtension extension ) { 
 + extensions . add ( extension ) ; 
 + } 
 + 
 + public RpcScope parseRpc ( int header , byte [ ] content ) throws IOException { 
 + for ( ParsingExtension ex : extensions ) { 
 + try { 
 + return ex . getRpcScopeParser ( ) . read ( header , content ) ; 
 + } catch ( Exception e ) { 
 + / / Ignore 
 + } 
 + } 
 + 
 + return rpcRarser . read ( header , content ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ParsingExtension . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ParsingExtension . java 
 new file mode 100644 
 index 0000000 . . dbcbf08 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ParsingExtension . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package im . actor . core . network . parser ; 
 + 
 + public class ParsingExtension { 
 + 
 + private BaseParser < RpcScope > rpcScopeParser ; 
 + 
 + private BaseParser < Update > updateScopeParser ; 
 + 
 + public ParsingExtension ( BaseParser < RpcScope > rpcScopeParser , BaseParser < Update > updateScopeParser ) { 
 + this . rpcScopeParser = rpcScopeParser ; 
 + this . updateScopeParser = updateScopeParser ; 
 + } 
 + 
 + public BaseParser < RpcScope > getRpcScopeParser ( ) { 
 + return rpcScopeParser ; 
 + } 
 + 
 + public BaseParser < Update > getUpdateScopeParser ( ) { 
 + return updateScopeParser ; 
 + } 
 + }
