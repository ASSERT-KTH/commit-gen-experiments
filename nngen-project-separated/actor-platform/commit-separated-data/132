BLEU SCORE: 0.08896962872669695

TEST MSG: fix ( server : groups ) : tests , group permissions , let users of plain groups to change group topic
GENERATED MSG: fix ( server ) : doubling Status . Failure after pipeTo , closes # 115

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index 6b8e259 . . d07382b 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 879 , 13 + 879 , 16 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > } < nl > } < nl > < nl > + / / TODO : who can update topic ? ? ? < nl > protected def updateTopic ( cmd : UpdateTopic ) : Unit = { < nl > def isValidTopic ( topic : Option [ String ] ) = topic . forall ( _ . length < 255 ) < nl > < nl > val topic = trimToEmpty ( cmd . topic ) < nl > < nl > - if ( ! state . permissions . canEditInfo ( cmd . clientUserId ) ) { < nl > - sender ( ) ! noPermission < nl > + if ( state . groupType . isChannel & & ! state . isAdmin ( cmd . clientUserId ) ) { < nl > + sender ( ) ! notAdmin < nl > + } else if ( state . nonMember ( cmd . clientUserId ) ) { < nl > + sender ( ) ! notMember < nl > } else if ( ! isValidTopic ( topic ) ) { < nl > sender ( ) ! Status . Failure ( TopicTooLong ) < nl > } else { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > index dbf2f94 . . cea7d2d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > @ @ - 87 , 7 + 87 , 8 @ @ object GroupProcessor { < nl > 22016 → classOf [ GroupEvents . IntegrationTokenRevoked ] , < nl > 22017 → classOf [ GroupEvents . OwnerChanged ] , < nl > 22018 → classOf [ GroupEvents . ShortNameUpdated ] , < nl > - 22019 → classOf [ GroupEvents . AdminSettingsUpdated ] < nl > + 22019 → classOf [ GroupEvents . AdminSettingsUpdated ] , < nl > + 22020 → classOf [ GroupEvents . AdminStatusChanged ] < nl > ) < nl > < nl > def persistenceIdFor ( groupId : Int ) : String = s " Group - $ { groupId } " < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > index 094895c . . 3404476 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > @ @ - 26 , 8 + 26 , 8 @ @ object AdminSettings { < nl > val Default = AdminSettings ( < nl > showAdminsToMembers = true , < nl > canMembersInvite = true , < nl > - canMembersEditGroupInfo = true , < nl > - canAdminsEditGroupInfo = false < nl > + canMembersEditGroupInfo = false , < nl > + canAdminsEditGroupInfo = true < nl > ) < nl > < nl > / / format : OFF < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala < nl > index 5d070d5 . . 2a78c86 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala < nl > @ @ - 703 , 7 + 703 , 7 @ @ final class GroupsServiceSpec < nl > } < nl > < nl > whenReady ( service . handleMakeUserAdmin ( groupOutPeer , user3OutPeer ) ( clientData2 ) ) { resp ⇒ < nl > - resp shouldEqual Error ( CommonRpcErrors . forbidden ( " Only admin can perform this action . " ) ) < nl > + resp shouldEqual Error ( GroupRpcErrors . NoPermission ) < nl > } < nl > } < nl > < nl > @ @ - 761 , 7 + 761 , 7 @ @ final class GroupsServiceSpec < nl > } < nl > < nl > whenReady ( service . handleEditGroupAbout ( groupOutPeer , 1L , Some ( " It is group for fun " ) , Vector . empty ) ( clientData2 ) ) { resp ⇒ < nl > - resp shouldEqual Error ( CommonRpcErrors . forbidden ( " Only admin can perform this action . " ) ) < nl > + resp shouldEqual Error ( GroupRpcErrors . NoPermission ) < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala < nl > index f2324fa . . 3c6c640 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala < nl > @ @ - 79 , 7 + 79 , 6 @ @ trait GroupDialogHandlers extends UpdateCounters { < nl > } < nl > } else Future . successful ( MessageReceivedAck ( ) ) ) pipeTo replyTo onFailure { < nl > case e ⇒ < nl > - replyTo ! Status . Failure ( ReceiveFailed ) < nl > log . error ( e , " Failed to mark messages received " ) < nl > } < nl > } < nl > @ @ - 135 , 7 + 134 , 6 @ @ trait GroupDialogHandlers extends UpdateCounters { < nl > _ ← readerAckF < nl > } yield MessageReadAck ( ) ) pipeTo replyTo onFailure { < nl > case e ⇒ < nl > - replyTo ! Status . Failure ( ReadFailed ) < nl > log . error ( e , " Failed to mark messages read " ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogHandlers . scala < nl > index d466e17 . . c3ab212 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogHandlers . scala < nl > @ @ - 68 , 7 + 68 , 6 @ @ trait PrivateDialogHandlers extends UpdateCounters { < nl > Future . successful ( MessageReceivedAck ( ) ) < nl > } ) pipeTo replyTo onFailure { < nl > case e ⇒ < nl > - replyTo ! Status . Failure ( ReceiveFailed ) < nl > log . error ( e , " Failed to mark messages received " ) < nl > } < nl > } < nl > @ @ - 98 , 7 + 97 , 6 @ @ trait PrivateDialogHandlers extends UpdateCounters { < nl > Future . successful ( MessageReadAck ( ) ) < nl > } ) pipeTo replyTo onFailure { < nl > case e ⇒ < nl > - replyTo ! Status . Failure ( ReadFailed ) < nl > log . error ( e , " Failed to mark messages read " ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index 09c9c81 . . c07b0d7 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 197 , 10 + 197 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > } yield updates < nl > } < nl > < nl > - db . run ( action ) pipeTo replyTo onFailure { < nl > - case e ⇒ < nl > - replyTo ! Status . Failure ( e ) < nl > - } < nl > + db . run ( action ) pipeTo replyTo < nl > } < nl > } else { < nl > sender ( ) ! Status . Failure ( GroupErrors . UserAlreadyInvited ) < nl > @ @ - 217 , 9 + 214 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > val update = UpdateGroupUserKick ( groupId , kickedUserId , kickerUserId , date . getMillis , randomId ) < nl > val serviceMessage = GroupServiceMessages . userKicked ( kickedUserId ) < nl > < nl > - db . run ( removeUser ( kickedUserId , group . members . keySet , kickerAuthId , serviceMessage , update , date , randomId ) ) pipeTo replyTo onFailure { < nl > - case e ⇒ replyTo ! Status . Failure ( e ) < nl > - } < nl > + db . run ( removeUser ( kickedUserId , group . members . keySet , kickerAuthId , serviceMessage , update , date , randomId ) ) pipeTo replyTo < nl > } < nl > } < nl > < nl > @ @ - 232 , 9 + 227 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > < nl > val update = UpdateGroupUserLeave ( groupId , userId , date . getMillis , randomId ) < nl > val serviceMessage = GroupServiceMessages . userLeft ( userId ) < nl > - db . run ( removeUser ( userId , group . members . keySet , authId , serviceMessage , update , date , randomId ) ) pipeTo replyTo onFailure { < nl > - case e ⇒ replyTo ! Status . Failure ( e ) < nl > - } < nl > + db . run ( removeUser ( userId , group . members . keySet , authId , serviceMessage , update , date , randomId ) ) pipeTo replyTo < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > index cb8d5fb . . ef173a8 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > @ @ - 206 , 9 + 206 , 7 @ @ private [ group ] final class GroupProcessor < nl > < nl > val replyTo = sender ( ) < nl > < nl > - invite ( state , inviteeUserId , inviterUserId , inviterAuthId , randomId , evt . ts ) pipeTo replyTo onFailure { < nl > - case e ⇒ replyTo ! Status . Failure ( e ) < nl > - } < nl > + invite ( state , inviteeUserId , inviterUserId , inviterAuthId , randomId , evt . ts ) pipeTo replyTo < nl > } < nl > } else { < nl > sender ( ) ! Status . Failure ( GroupErrors . UserAlreadyInvited ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > index 4bec2b8 . . 7a5017c 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > @ @ - 119 , 8 + 119 , 6 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorLoggin < nl > unstashAndWork ( e , state ) < nl > case Failure ( f ) ⇒ < nl > log . error ( f , " Failure while processing event { } " , e ) < nl > - replyTo ! Status . Failure ( f ) < nl > - < nl > unstashAndWork ( e , state ) < nl > } < nl > } < nl > @ @ - 140 , 8 + 138 , 6 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorLoggin < nl > unstashAndWorkBatch ( es , state ) < nl > case Failure ( e ) ⇒ < nl > log . error ( e , " Failure while processing event { } " , e ) < nl > - replyTo ! Status . Failure ( e ) < nl > - < nl > unstashAndWorkBatch ( es , state ) < nl > } < nl > } < nl > @ @ - 158 , 8 + 154 , 6 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorLoggin < nl > unstashAndWork ( e , state ) < nl > case Failure ( f ) ⇒ < nl > log . error ( f , " Failure while processing event { } " , e ) < nl > - replyTo ! Status . Failure ( f ) < nl > - < nl > unstashAndWork ( e , state ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > index 8f4d368 . . 15379ca 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > @ @ - 15 , 12 + 15 , 6 @ @ import slick . driver . PostgresDriver . api . _ < nl > < nl > import scala . concurrent . Future < nl > < nl > - object HistoryErrors { < nl > - val ReceiveFailed = RpcError ( 500 , " RECEIVE _ FAILED " , " " , true , None ) < nl > - val ReadFailed = RpcError ( 500 , " READ _ FAILED " , " " , true , None ) < nl > - < nl > - } < nl > - < nl > trait HistoryHandlers { < nl > self : MessagingServiceImpl ⇒ < nl > < nl > @ @ - 34 , 9 + 28 , 7 @ @ trait HistoryHandlers { < nl > } < nl > } < nl > < nl > - db . run ( toDBIOAction ( action ) ) recover { < nl > - case ReceiveFailed ⇒ Error ( HistoryErrors . ReceiveFailed ) < nl > - } < nl > + db . run ( toDBIOAction ( action ) ) < nl > } < nl > < nl > override def jhandleMessageRead ( peer : ApiOutPeer , date : Long , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { < nl > @ @ - 46 , 9 + 38 , 7 @ @ trait HistoryHandlers { < nl > } < nl > } < nl > < nl > - db . run ( toDBIOAction ( action ) ) recover { < nl > - case ReadFailed ⇒ Error ( HistoryErrors . ReadFailed ) < nl > - } < nl > + db . run ( toDBIOAction ( action ) ) < nl > } < nl > < nl > override def jhandleClearChat ( peer : ApiOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > index 01ee7e7 . . 6deafc6 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > @ @ - 3 , 13 + 3 , 13 @ @ package im . actor . server . session < nl > import akka . testkit . TestProbe < nl > import com . typesafe . config . ConfigFactory < nl > import im . actor . api . rpc . _ < nl > - import im . actor . api . rpc . auth . { RequestSendAuthCodeObsolete , ResponseSendAuthCodeObsolete } < nl > + import im . actor . api . rpc . auth . { RequestSendAuthCodeObsolete , ResponseSendAuthCodeObsolete } < nl > import im . actor . api . rpc . codecs . RequestCodec < nl > import im . actor . api . rpc . contacts . UpdateContactRegistered < nl > import im . actor . api . rpc . weak . UpdateUserOffline < nl > import im . actor . server . ActorSpecification < nl > import im . actor . server . mtproto . protocol . _ < nl > - import im . actor . server . sequence . { SeqUpdatesManager , WeakUpdatesManager } < nl > + import im . actor . server . sequence . { SeqUpdatesManager , WeakUpdatesManager } < nl > < nl > import scala . concurrent . duration . _ < nl > import scala . util . Random

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index 6b8e259 . . d07382b 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 879 , 13 + 879 , 16 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 } 
 } 
 
 + / / TODO : who can update topic ? ? ? 
 protected def updateTopic ( cmd : UpdateTopic ) : Unit = { 
 def isValidTopic ( topic : Option [ String ] ) = topic . forall ( _ . length < 255 ) 
 
 val topic = trimToEmpty ( cmd . topic ) 
 
 - if ( ! state . permissions . canEditInfo ( cmd . clientUserId ) ) { 
 - sender ( ) ! noPermission 
 + if ( state . groupType . isChannel & & ! state . isAdmin ( cmd . clientUserId ) ) { 
 + sender ( ) ! notAdmin 
 + } else if ( state . nonMember ( cmd . clientUserId ) ) { 
 + sender ( ) ! notMember 
 } else if ( ! isValidTopic ( topic ) ) { 
 sender ( ) ! Status . Failure ( TopicTooLong ) 
 } else { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 index dbf2f94 . . cea7d2d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 @ @ - 87 , 7 + 87 , 8 @ @ object GroupProcessor { 
 22016 → classOf [ GroupEvents . IntegrationTokenRevoked ] , 
 22017 → classOf [ GroupEvents . OwnerChanged ] , 
 22018 → classOf [ GroupEvents . ShortNameUpdated ] , 
 - 22019 → classOf [ GroupEvents . AdminSettingsUpdated ] 
 + 22019 → classOf [ GroupEvents . AdminSettingsUpdated ] , 
 + 22020 → classOf [ GroupEvents . AdminStatusChanged ] 
 ) 
 
 def persistenceIdFor ( groupId : Int ) : String = s " Group - $ { groupId } " 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 index 094895c . . 3404476 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 @ @ - 26 , 8 + 26 , 8 @ @ object AdminSettings { 
 val Default = AdminSettings ( 
 showAdminsToMembers = true , 
 canMembersInvite = true , 
 - canMembersEditGroupInfo = true , 
 - canAdminsEditGroupInfo = false 
 + canMembersEditGroupInfo = false , 
 + canAdminsEditGroupInfo = true 
 ) 
 
 / / format : OFF 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala 
 index 5d070d5 . . 2a78c86 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala 
 @ @ - 703 , 7 + 703 , 7 @ @ final class GroupsServiceSpec 
 } 
 
 whenReady ( service . handleMakeUserAdmin ( groupOutPeer , user3OutPeer ) ( clientData2 ) ) { resp ⇒ 
 - resp shouldEqual Error ( CommonRpcErrors . forbidden ( " Only admin can perform this action . " ) ) 
 + resp shouldEqual Error ( GroupRpcErrors . NoPermission ) 
 } 
 } 
 
 @ @ - 761 , 7 + 761 , 7 @ @ final class GroupsServiceSpec 
 } 
 
 whenReady ( service . handleEditGroupAbout ( groupOutPeer , 1L , Some ( " It is group for fun " ) , Vector . empty ) ( clientData2 ) ) { resp ⇒ 
 - resp shouldEqual Error ( CommonRpcErrors . forbidden ( " Only admin can perform this action . " ) ) 
 + resp shouldEqual Error ( GroupRpcErrors . NoPermission ) 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala 
 index f2324fa . . 3c6c640 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala 
 @ @ - 79 , 7 + 79 , 6 @ @ trait GroupDialogHandlers extends UpdateCounters { 
 } 
 } else Future . successful ( MessageReceivedAck ( ) ) ) pipeTo replyTo onFailure { 
 case e ⇒ 
 - replyTo ! Status . Failure ( ReceiveFailed ) 
 log . error ( e , " Failed to mark messages received " ) 
 } 
 } 
 @ @ - 135 , 7 + 134 , 6 @ @ trait GroupDialogHandlers extends UpdateCounters { 
 _ ← readerAckF 
 } yield MessageReadAck ( ) ) pipeTo replyTo onFailure { 
 case e ⇒ 
 - replyTo ! Status . Failure ( ReadFailed ) 
 log . error ( e , " Failed to mark messages read " ) 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogHandlers . scala 
 index d466e17 . . c3ab212 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogHandlers . scala 
 @ @ - 68 , 7 + 68 , 6 @ @ trait PrivateDialogHandlers extends UpdateCounters { 
 Future . successful ( MessageReceivedAck ( ) ) 
 } ) pipeTo replyTo onFailure { 
 case e ⇒ 
 - replyTo ! Status . Failure ( ReceiveFailed ) 
 log . error ( e , " Failed to mark messages received " ) 
 } 
 } 
 @ @ - 98 , 7 + 97 , 6 @ @ trait PrivateDialogHandlers extends UpdateCounters { 
 Future . successful ( MessageReadAck ( ) ) 
 } ) pipeTo replyTo onFailure { 
 case e ⇒ 
 - replyTo ! Status . Failure ( ReadFailed ) 
 log . error ( e , " Failed to mark messages read " ) 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index 09c9c81 . . c07b0d7 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 197 , 10 + 197 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 } yield updates 
 } 
 
 - db . run ( action ) pipeTo replyTo onFailure { 
 - case e ⇒ 
 - replyTo ! Status . Failure ( e ) 
 - } 
 + db . run ( action ) pipeTo replyTo 
 } 
 } else { 
 sender ( ) ! Status . Failure ( GroupErrors . UserAlreadyInvited ) 
 @ @ - 217 , 9 + 214 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 val update = UpdateGroupUserKick ( groupId , kickedUserId , kickerUserId , date . getMillis , randomId ) 
 val serviceMessage = GroupServiceMessages . userKicked ( kickedUserId ) 
 
 - db . run ( removeUser ( kickedUserId , group . members . keySet , kickerAuthId , serviceMessage , update , date , randomId ) ) pipeTo replyTo onFailure { 
 - case e ⇒ replyTo ! Status . Failure ( e ) 
 - } 
 + db . run ( removeUser ( kickedUserId , group . members . keySet , kickerAuthId , serviceMessage , update , date , randomId ) ) pipeTo replyTo 
 } 
 } 
 
 @ @ - 232 , 9 + 227 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 
 val update = UpdateGroupUserLeave ( groupId , userId , date . getMillis , randomId ) 
 val serviceMessage = GroupServiceMessages . userLeft ( userId ) 
 - db . run ( removeUser ( userId , group . members . keySet , authId , serviceMessage , update , date , randomId ) ) pipeTo replyTo onFailure { 
 - case e ⇒ replyTo ! Status . Failure ( e ) 
 - } 
 + db . run ( removeUser ( userId , group . members . keySet , authId , serviceMessage , update , date , randomId ) ) pipeTo replyTo 
 } 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 index cb8d5fb . . ef173a8 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 @ @ - 206 , 9 + 206 , 7 @ @ private [ group ] final class GroupProcessor 
 
 val replyTo = sender ( ) 
 
 - invite ( state , inviteeUserId , inviterUserId , inviterAuthId , randomId , evt . ts ) pipeTo replyTo onFailure { 
 - case e ⇒ replyTo ! Status . Failure ( e ) 
 - } 
 + invite ( state , inviteeUserId , inviterUserId , inviterAuthId , randomId , evt . ts ) pipeTo replyTo 
 } 
 } else { 
 sender ( ) ! Status . Failure ( GroupErrors . UserAlreadyInvited ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 index 4bec2b8 . . 7a5017c 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 @ @ - 119 , 8 + 119 , 6 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorLoggin 
 unstashAndWork ( e , state ) 
 case Failure ( f ) ⇒ 
 log . error ( f , " Failure while processing event { } " , e ) 
 - replyTo ! Status . Failure ( f ) 
 - 
 unstashAndWork ( e , state ) 
 } 
 } 
 @ @ - 140 , 8 + 138 , 6 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorLoggin 
 unstashAndWorkBatch ( es , state ) 
 case Failure ( e ) ⇒ 
 log . error ( e , " Failure while processing event { } " , e ) 
 - replyTo ! Status . Failure ( e ) 
 - 
 unstashAndWorkBatch ( es , state ) 
 } 
 } 
 @ @ - 158 , 8 + 154 , 6 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorLoggin 
 unstashAndWork ( e , state ) 
 case Failure ( f ) ⇒ 
 log . error ( f , " Failure while processing event { } " , e ) 
 - replyTo ! Status . Failure ( f ) 
 - 
 unstashAndWork ( e , state ) 
 } 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 index 8f4d368 . . 15379ca 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 @ @ - 15 , 12 + 15 , 6 @ @ import slick . driver . PostgresDriver . api . _ 
 
 import scala . concurrent . Future 
 
 - object HistoryErrors { 
 - val ReceiveFailed = RpcError ( 500 , " RECEIVE _ FAILED " , " " , true , None ) 
 - val ReadFailed = RpcError ( 500 , " READ _ FAILED " , " " , true , None ) 
 - 
 - } 
 - 
 trait HistoryHandlers { 
 self : MessagingServiceImpl ⇒ 
 
 @ @ - 34 , 9 + 28 , 7 @ @ trait HistoryHandlers { 
 } 
 } 
 
 - db . run ( toDBIOAction ( action ) ) recover { 
 - case ReceiveFailed ⇒ Error ( HistoryErrors . ReceiveFailed ) 
 - } 
 + db . run ( toDBIOAction ( action ) ) 
 } 
 
 override def jhandleMessageRead ( peer : ApiOutPeer , date : Long , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { 
 @ @ - 46 , 9 + 38 , 7 @ @ trait HistoryHandlers { 
 } 
 } 
 
 - db . run ( toDBIOAction ( action ) ) recover { 
 - case ReadFailed ⇒ Error ( HistoryErrors . ReadFailed ) 
 - } 
 + db . run ( toDBIOAction ( action ) ) 
 } 
 
 override def jhandleClearChat ( peer : ApiOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 index 01ee7e7 . . 6deafc6 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 @ @ - 3 , 13 + 3 , 13 @ @ package im . actor . server . session 
 import akka . testkit . TestProbe 
 import com . typesafe . config . ConfigFactory 
 import im . actor . api . rpc . _ 
 - import im . actor . api . rpc . auth . { RequestSendAuthCodeObsolete , ResponseSendAuthCodeObsolete } 
 + import im . actor . api . rpc . auth . { RequestSendAuthCodeObsolete , ResponseSendAuthCodeObsolete } 
 import im . actor . api . rpc . codecs . RequestCodec 
 import im . actor . api . rpc . contacts . UpdateContactRegistered 
 import im . actor . api . rpc . weak . UpdateUserOffline 
 import im . actor . server . ActorSpecification 
 import im . actor . server . mtproto . protocol . _ 
 - import im . actor . server . sequence . { SeqUpdatesManager , WeakUpdatesManager } 
 + import im . actor . server . sequence . { SeqUpdatesManager , WeakUpdatesManager } 
 
 import scala . concurrent . duration . _ 
 import scala . util . Random
