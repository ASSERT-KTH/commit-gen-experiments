BLEU SCORE: 0.10786826322527471

TEST MSG: fix ( runtime ) : add hex provider
GENERATED MSG: feat ( js ) : Enable stack trace logging

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java < nl > index 8d1c65e . . 7553b50 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java < nl > @ @ - 11 , 7 + 11 , 8 @ @ import org . jetbrains . annotations . NotNull ; < nl > import java . util . ArrayList ; < nl > < nl > import im . actor . core . network . TrustedKey ; < nl > - import im . actor . core . util . Hex ; < nl > + import im . actor . runtime . HexRuntime ; < nl > + import im . actor . runtime . HexRuntimeProvider ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . mtproto . ConnectionEndpoint ; < nl > < nl > @ @ - 19 , 7 + 20 , 7 @ @ import im . actor . runtime . mtproto . ConnectionEndpoint ; < nl > * Configuration builder for starting up messenger object < nl > * / < nl > public class ConfigurationBuilder { < nl > - < nl > + private static final HexRuntime hex = new HexRuntimeProvider ( ) ; < nl > private ArrayList < TrustedKey > trustedKeys = new ArrayList < TrustedKey > ( ) ; < nl > private ArrayList < ConfigurationExtension > extensions = new ArrayList < ConfigurationExtension > ( ) ; < nl > private ArrayList < ConnectionEndpoint > endpoints = new ArrayList < ConnectionEndpoint > ( ) ; < nl > @ @ - 71 , 7 + 72 , 7 @ @ public class ConfigurationBuilder { < nl > @ NotNull < nl > @ ObjectiveCName ( " addTrustedKey : " ) < nl > public ConfigurationBuilder addTrustedKey ( String trustedKey ) { < nl > - trustedKeys . add ( new TrustedKey ( Hex . fromHex ( trustedKey ) ) ) ; < nl > + trustedKeys . add ( new TrustedKey ( hex . fromHex ( trustedKey ) ) ) ; < nl > return this ; < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / Hex . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / Hex . java < nl > deleted file mode 100644 < nl > index 6131fdc . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / Hex . java < nl > + + + / dev / null < nl > @ @ - 1 , 31 + 0 , 0 @ @ < nl > - package im . actor . core . util ; < nl > - < nl > - public class Hex { < nl > - public static byte [ ] fromHex ( String hex ) { < nl > - byte [ ] res = new byte [ hex . length ( ) / 2 ] ; < nl > - for ( int j = 0 ; j < hex . length ( ) / 2 ; j + + ) { < nl > - String dg = hex . charAt ( j * 2 ) + " " + hex . charAt ( j * 2 + 1 ) ; < nl > - res [ j ] = ( byte ) Integer . parseInt ( dg , 16 ) ; < nl > - } < nl > - return res ; < nl > - } < nl > - < nl > - public static byte [ ] fromHexReverse ( String hex ) { < nl > - byte [ ] res = new byte [ hex . length ( ) / 2 ] ; < nl > - for ( int j = 0 ; j < hex . length ( ) / 2 ; j + + ) { < nl > - String dg = hex . charAt ( j * 2 ) + " " + hex . charAt ( j * 2 + 1 ) ; < nl > - res [ res . length - j - 1 ] = ( byte ) Integer . parseInt ( dg , 16 ) ; < nl > - } < nl > - return res ; < nl > - } < nl > - < nl > - private static final String HEXES = " 0123456789ABCDEF " ; < nl > - < nl > - public static String toHex ( byte [ ] raw ) { < nl > - final StringBuilder hex = new StringBuilder ( 2 * raw . length ) ; < nl > - for ( final byte b : raw ) { < nl > - hex . append ( HEXES . charAt ( ( b & 0xF0 ) > > 4 ) ) . append ( HEXES . charAt ( ( b & 0x0F ) ) ) ; < nl > - } < nl > - return hex . toString ( ) ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / HexRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / HexRuntimeProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 44f5bcd < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / HexRuntimeProvider . java < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + import im . actor . runtime . generic . GenericHexProvider ; < nl > + < nl > + public class HexRuntimeProvider extends GenericHexProvider { < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericHexProvider . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericHexProvider . java < nl > new file mode 100644 < nl > index 0000000 . . f3270fa < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericHexProvider . java < nl > @ @ - 0 , 0 + 1 , 40 @ @ < nl > + package im . actor . runtime . generic ; < nl > + < nl > + import im . actor . runtime . HexRuntime ; < nl > + < nl > + / * * < nl > + * Created by root on 2 / 1 / 16 . < nl > + * / < nl > + public class GenericHexProvider implements HexRuntime { < nl > + < nl > + @ Override < nl > + public byte [ ] fromHex ( String hex ) { < nl > + byte [ ] res = new byte [ hex . length ( ) / 2 ] ; < nl > + for ( int j = 0 ; j < hex . length ( ) / 2 ; j + + ) { < nl > + String dg = hex . charAt ( j * 2 ) + " " + hex . charAt ( j * 2 + 1 ) ; < nl > + res [ j ] = ( byte ) Integer . parseInt ( dg , 16 ) ; < nl > + } < nl > + return res ; < nl > + } < nl > + < nl > + @ Override < nl > + public byte [ ] fromHexReverse ( String hex ) { < nl > + byte [ ] res = new byte [ hex . length ( ) / 2 ] ; < nl > + for ( int j = 0 ; j < hex . length ( ) / 2 ; j + + ) { < nl > + String dg = hex . charAt ( j * 2 ) + " " + hex . charAt ( j * 2 + 1 ) ; < nl > + res [ res . length - j - 1 ] = ( byte ) Integer . parseInt ( dg , 16 ) ; < nl > + } < nl > + return res ; < nl > + } < nl > + < nl > + private static final String HEXES = " 0123456789ABCDEF " ; < nl > + < nl > + @ Override < nl > + public String toHex ( byte [ ] raw ) { < nl > + final StringBuilder hex = new StringBuilder ( 2 * raw . length ) ; < nl > + for ( final byte b : raw ) { < nl > + hex . append ( HEXES . charAt ( ( b & 0xF0 ) > > 4 ) ) . append ( HEXES . charAt ( ( b & 0x0F ) ) ) ; < nl > + } < nl > + return hex . toString ( ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericRandomProvider . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericRandomProvider . java < nl > index 85e1af9 . . ac7f6b8 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericRandomProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericRandomProvider . java < nl > @ @ - 36 , 6 + 36 , 13 @ @ public class GenericRandomProvider implements RandomRuntime { < nl > } < nl > < nl > @ Override < nl > + public long randomLong ( ) { < nl > + synchronized ( random ) { < nl > + return random . nextLong ( ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > public BigInteger generateBigInteger ( int numBits ) { < nl > return new BigInteger ( numBits , random ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / build . gradle b / actor - sdk / sdk - core / runtime / runtime - shared / build . gradle < nl > index 0a96a08 . . e2cb1ec 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / build . gradle < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / build . gradle < nl > @ @ - 12 , 7 + 12 , 6 @ @ sourceSets { < nl > ' src / template / java ' ] < nl > } < nl > } < nl > - < nl > generic { < nl > java { < nl > srcDirs = [ ' src / main / java ' , < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java < nl > index c3998f5 . . 0804463 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java < nl > @ @ - 6 , 7 + 6 , 6 @ @ package im . actor . runtime ; < nl > < nl > import java . math . BigInteger ; < nl > < nl > - import im . actor . core . util . Hex ; < nl > import im . actor . runtime . crypto . primitives . digest . KeyDigest ; < nl > import im . actor . runtime . crypto . primitives . digest . SHA256 ; < nl > < nl > @ @ - 16 , 6 + 15 , 7 @ @ public class Crypto { < nl > < nl > private static final CryptoRuntime provider = new CryptoRuntimeProvider ( ) ; < nl > private static final RandomRuntime random = new RandomRuntimeProvider ( ) ; < nl > + private static final HexRuntime hex = new HexRuntimeProvider ( ) ; < nl > < nl > public static byte [ ] MD5 ( byte [ ] data ) { < nl > return provider . MD5 ( data ) ; < nl > @ @ - 26 , 7 + 26 , 7 @ @ public class Crypto { < nl > keyDigest . update ( publicKey , 0 , publicKey . length ) ; < nl > byte [ ] res = new byte [ 8 ] ; < nl > keyDigest . doFinal ( res , 0 ) ; < nl > - return Hex . toHex ( res ) ; < nl > + return hex . toHex ( res ) ; < nl > } < nl > < nl > / * * < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / HexRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / HexRuntime . java < nl > new file mode 100644 < nl > index 0000000 . . 892d174 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / HexRuntime . java < nl > @ @ - 0 , 0 + 1 , 9 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + public interface HexRuntime { < nl > + byte [ ] fromHex ( String hex ) ; < nl > + < nl > + byte [ ] fromHexReverse ( String hex ) ; < nl > + < nl > + String toHex ( byte [ ] raw ) ; < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / RandomRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / RandomRuntime . java < nl > index 5cefaca . . e4fe1cd 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / RandomRuntime . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / RandomRuntime . java < nl > @ @ - 9 , 6 + 9 , 8 @ @ public interface RandomRuntime { < nl > < nl > void nextBytes ( byte [ ] data ) ; < nl > < nl > + long randomLong ( ) ; < nl > + < nl > BigInteger generateBigInteger ( int numBits ) ; < nl > < nl > BigInteger generateBigInteger ( int numBits , int certanity ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java < nl > index 97fb500 . . db2a0b5 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java < nl > @ @ - 6 , 8 + 6 , 9 @ @ import java . util . Collection ; < nl > import java . util . Collections ; < nl > import java . util . Comparator ; < nl > < nl > - import im . actor . core . util . RandomUtils ; < nl > import im . actor . runtime . Log ; < nl > + import im . actor . runtime . RandomRuntime ; < nl > + import im . actor . runtime . RandomRuntimeProvider ; < nl > import im . actor . runtime . function . ArrayFunction ; < nl > import im . actor . runtime . function . Consumer ; < nl > import im . actor . runtime . function . Function ; < nl > @ @ - 21 , 7 + 22 , 7 @ @ import im . actor . runtime . function . Predicates ; < nl > * @ param < T > type of array < nl > * / < nl > public class PromisesArray < T > { < nl > - < nl > + private static final RandomRuntime rundom = new RandomRuntimeProvider ( ) ; < nl > / * * < nl > * Create PromisesArray from collection < nl > * < nl > @ @ - 315 , 7 + 316 , 7 @ @ public class PromisesArray < T > { < nl > if ( ts . length = = 0 ) { < nl > throw new RuntimeException ( " Array is empty " ) ; < nl > } < nl > - return ( T [ ] ) new Object [ ] { ts [ RandomUtils . randomId ( ts . length ) ] } ; < nl > + return ( T [ ] ) new Object [ ] { ts [ rundom . randomInt ( ts . length ) ] } ; < nl > } < nl > } ) . first ( ) ; < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index f60dff5 . . cb3bc8f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 249 , 7 + 249 , 7 @ @ public class JsFacade implements Exportable { < nl > } < nl > } ) ; < nl > } catch ( Exception e ) { < nl > - e . printStackTrace ( ) ; < nl > + Log . e ( TAG , e ) ; < nl > im . actor . runtime . Runtime . postToMainThread ( new Runnable ( ) { < nl > @ Override < nl > public void run ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java < nl > index d47abf7 . . 109599c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java < nl > @ @ - 65 , 7 + 65 , 7 @ @ public class JsFilesModule extends AbsModule { < nl > try { < nl > return CachedFileUrl . fromBytes ( data ) ; < nl > } catch ( IOException e ) { < nl > - e . printStackTrace ( ) ; < nl > + Log . e ( TAG , e ) ; < nl > return null ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsLogProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsLogProvider . java < nl > index ff0d4a0 . . 6672fe1 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsLogProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsLogProvider . java < nl > @ @ - 25 , 7 + 25 , 12 @ @ public class JsLogProvider implements LogRuntime { < nl > < nl > @ Override < nl > public void e ( String tag , Throwable throwable ) { < nl > - error ( formatTime ( ) + " [ E ] " + tag + " : " + throwable ) ; < nl > + String stackTrace = " " ; < nl > + for ( StackTraceElement element : throwable . getStackTrace ( ) ) { < nl > + stackTrace + = element + " \ n " ; < nl > + } < nl > + < nl > + error ( formatTime ( ) + " [ E ] " + tag + " : " + throwable + " \ n " + stackTrace ) ; < nl > } < nl > < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsIndexStorage . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsIndexStorage . java < nl > index 27d0af1 . . e8f198d 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsIndexStorage . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsIndexStorage . java < nl > @ @ - 7 , 6 + 7 , 7 @ @ import java . util . HashSet ; < nl > import java . util . List ; < nl > import java . util . Set ; < nl > < nl > + import im . actor . runtime . Log ; < nl > import im . actor . runtime . bser . DataInput ; < nl > import im . actor . runtime . bser . DataOutput ; < nl > import im . actor . runtime . storage . IndexStorage ; < nl > @ @ - 16 , 6 + 17 , 8 @ @ import static im . actor . runtime . crypto . Base64Utils . toBase64 ; < nl > < nl > public class JsIndexStorage implements IndexStorage { < nl > < nl > + private static final String TAG = " JsIndexStorage " ; < nl > + < nl > private Storage storage ; < nl > private String prefix ; < nl > private Set < Item > items = new HashSet < Item > ( ) ; < nl > @ @ - 37 , 7 + 40 , 7 @ @ public class JsIndexStorage implements IndexStorage { < nl > } < nl > } < nl > } catch ( Exception e ) { < nl > - e . printStackTrace ( ) ; < nl > + Log . e ( TAG , e ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsKeyValueStorage . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsKeyValueStorage . java < nl > index 8846506 . . d00ddb6 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsKeyValueStorage . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsKeyValueStorage . java < nl > @ @ - 10 , 6 + 10 , 7 @ @ import java . util . HashSet ; < nl > import java . util . List ; < nl > import java . util . Set ; < nl > < nl > + import im . actor . runtime . Log ; < nl > import im . actor . runtime . bser . DataInput ; < nl > import im . actor . runtime . bser . DataOutput ; < nl > import im . actor . runtime . storage . KeyValueRecord ; < nl > @ @ - 20 , 6 + 21 , 8 @ @ import static im . actor . runtime . crypto . Base64Utils . toBase64 ; < nl > < nl > public class JsKeyValueStorage implements KeyValueStorage { < nl > < nl > + private static final String TAG = " JsKeyValueStorage " ; < nl > + < nl > private Storage storage ; < nl > private String prefix ; < nl > private Set < Long > items = new HashSet < Long > ( ) ; < nl > @ @ - 39 , 7 + 42 , 7 @ @ public class JsKeyValueStorage implements KeyValueStorage { < nl > } < nl > } < nl > } catch ( Exception e ) { < nl > - e . printStackTrace ( ) ; < nl > + Log . e ( TAG , e ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsListEngine . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsListEngine . java < nl > index fe4de7f . . 878ff80 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsListEngine . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsListEngine . java < nl > @ @ - 43 , 7 + 43 , 7 @ @ public class JsListEngine < T extends BserObject & ListEngineItem > implements List < nl > callback . onItemAddedOrUpdated ( item ) ; < nl > } catch ( Exception e ) { < nl > Log . d ( TAG , " Exception during update ( addOrUpdateItem ) " ) ; < nl > - e . printStackTrace ( ) ; < nl > + Log . e ( TAG , e ) ; < nl > } < nl > } < nl > < nl > @ @ - 65 , 7 + 65 , 7 @ @ public class JsListEngine < T extends BserObject & ListEngineItem > implements List < nl > callback . onItemsAddedOrUpdated ( items ) ; < nl > } catch ( Exception e ) { < nl > Log . d ( TAG , " Exception during update ( addOrUpdateItems ) " ) ; < nl > - e . printStackTrace ( ) ; < nl > + Log . e ( TAG , e ) ; < nl > } < nl > } < nl > } < nl > @ @ - 87 , 7 + 87 , 7 @ @ public class JsListEngine < T extends BserObject & ListEngineItem > implements List < nl > callback . onItemsReplaced ( items ) ; < nl > } catch ( Exception e ) { < nl > Log . d ( TAG , " Exception during update ( replaceItems ) " ) ; < nl > - e . printStackTrace ( ) ; < nl > + Log . e ( TAG , e ) ; < nl > } < nl > } < nl > } < nl > @ @ - 102 , 7 + 102 , 7 @ @ public class JsListEngine < T extends BserObject & ListEngineItem > implements List < nl > callback . onItemRemoved ( key ) ; < nl > } catch ( Exception e ) { < nl > Log . d ( TAG , " Exception during update ( removeItem ) " ) ; < nl > - e . printStackTrace ( ) ; < nl > + Log . e ( TAG , e ) ; < nl > } < nl > } < nl > } < nl > @ @ - 118 , 7 + 118 , 7 @ @ public class JsListEngine < T extends BserObject & ListEngineItem > implements List < nl > callback . onItemsRemoved ( keys ) ; < nl > } catch ( Exception e ) { < nl > Log . d ( TAG , " Exception during update ( removeItems ) " ) ; < nl > - e . printStackTrace ( ) ; < nl > + Log . e ( TAG , e ) ; < nl > } < nl > } < nl > } < nl > @ @ - 132 , 7 + 132 , 7 @ @ public class JsListEngine < T extends BserObject & ListEngineItem > implements List < nl > callback . onClear ( ) ; < nl > } catch ( Exception e ) { < nl > Log . d ( TAG , " Exception during update ( clear ) " ) ; < nl > - e . printStackTrace ( ) ; < nl > + Log . e ( TAG , e ) ; < nl > } < nl > } < nl > } < nl > @ @ - 150 , 7 + 150 , 7 @ @ public class JsListEngine < T extends BserObject & ListEngineItem > implements List < nl > return res ; < nl > } catch ( IOException e ) { < nl > Log . d ( " JsListEngine " , " Unable to decode : " + e . getMessage ( ) ) ; < nl > - e . printStackTrace ( ) ; < nl > + Log . e ( TAG , e ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsListStorage . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsListStorage . java < nl > index 99a11a0 . . 06935e0 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsListStorage . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsListStorage . java < nl > @ @ - 11 , 6 + 11 , 7 @ @ import java . util . Collections ; < nl > import java . util . Comparator ; < nl > import java . util . List ; < nl > < nl > + import im . actor . runtime . Log ; < nl > import im . actor . runtime . bser . DataInput ; < nl > import im . actor . runtime . bser . DataOutput ; < nl > import im . actor . runtime . storage . ListEngineRecord ; < nl > @ @ - 21 , 6 + 22 , 8 @ @ import static im . actor . runtime . crypto . Base64Utils . toBase64 ; < nl > < nl > public class JsListStorage implements ListStorage { < nl > < nl > + private static final String TAG = " JsListStorage " ; < nl > + < nl > private final Storage storage ; < nl > private final String prefix ; < nl > private final ArrayList < Index > index = new ArrayList < Index > ( ) ; < nl > @ @ - 51 , 7 + 54 , 7 @ @ public class JsListStorage implements ListStorage { < nl > index . add ( new Index ( id , order ) ) ; < nl > } < nl > } catch ( Exception e ) { < nl > - e . printStackTrace ( ) ; < nl > + Log . e ( TAG , e ) ; < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java 
 index 8d1c65e . . 7553b50 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java 
 @ @ - 11 , 7 + 11 , 8 @ @ import org . jetbrains . annotations . NotNull ; 
 import java . util . ArrayList ; 
 
 import im . actor . core . network . TrustedKey ; 
 - import im . actor . core . util . Hex ; 
 + import im . actor . runtime . HexRuntime ; 
 + import im . actor . runtime . HexRuntimeProvider ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . mtproto . ConnectionEndpoint ; 
 
 @ @ - 19 , 7 + 20 , 7 @ @ import im . actor . runtime . mtproto . ConnectionEndpoint ; 
 * Configuration builder for starting up messenger object 
 * / 
 public class ConfigurationBuilder { 
 - 
 + private static final HexRuntime hex = new HexRuntimeProvider ( ) ; 
 private ArrayList < TrustedKey > trustedKeys = new ArrayList < TrustedKey > ( ) ; 
 private ArrayList < ConfigurationExtension > extensions = new ArrayList < ConfigurationExtension > ( ) ; 
 private ArrayList < ConnectionEndpoint > endpoints = new ArrayList < ConnectionEndpoint > ( ) ; 
 @ @ - 71 , 7 + 72 , 7 @ @ public class ConfigurationBuilder { 
 @ NotNull 
 @ ObjectiveCName ( " addTrustedKey : " ) 
 public ConfigurationBuilder addTrustedKey ( String trustedKey ) { 
 - trustedKeys . add ( new TrustedKey ( Hex . fromHex ( trustedKey ) ) ) ; 
 + trustedKeys . add ( new TrustedKey ( hex . fromHex ( trustedKey ) ) ) ; 
 return this ; 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / Hex . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / Hex . java 
 deleted file mode 100644 
 index 6131fdc . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / Hex . java 
 + + + / dev / null 
 @ @ - 1 , 31 + 0 , 0 @ @ 
 - package im . actor . core . util ; 
 - 
 - public class Hex { 
 - public static byte [ ] fromHex ( String hex ) { 
 - byte [ ] res = new byte [ hex . length ( ) / 2 ] ; 
 - for ( int j = 0 ; j < hex . length ( ) / 2 ; j + + ) { 
 - String dg = hex . charAt ( j * 2 ) + " " + hex . charAt ( j * 2 + 1 ) ; 
 - res [ j ] = ( byte ) Integer . parseInt ( dg , 16 ) ; 
 - } 
 - return res ; 
 - } 
 - 
 - public static byte [ ] fromHexReverse ( String hex ) { 
 - byte [ ] res = new byte [ hex . length ( ) / 2 ] ; 
 - for ( int j = 0 ; j < hex . length ( ) / 2 ; j + + ) { 
 - String dg = hex . charAt ( j * 2 ) + " " + hex . charAt ( j * 2 + 1 ) ; 
 - res [ res . length - j - 1 ] = ( byte ) Integer . parseInt ( dg , 16 ) ; 
 - } 
 - return res ; 
 - } 
 - 
 - private static final String HEXES = " 0123456789ABCDEF " ; 
 - 
 - public static String toHex ( byte [ ] raw ) { 
 - final StringBuilder hex = new StringBuilder ( 2 * raw . length ) ; 
 - for ( final byte b : raw ) { 
 - hex . append ( HEXES . charAt ( ( b & 0xF0 ) > > 4 ) ) . append ( HEXES . charAt ( ( b & 0x0F ) ) ) ; 
 - } 
 - return hex . toString ( ) ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / HexRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / HexRuntimeProvider . java 
 new file mode 100644 
 index 0000000 . . 44f5bcd 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / HexRuntimeProvider . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package im . actor . runtime ; 
 + 
 + import im . actor . runtime . generic . GenericHexProvider ; 
 + 
 + public class HexRuntimeProvider extends GenericHexProvider { 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericHexProvider . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericHexProvider . java 
 new file mode 100644 
 index 0000000 . . f3270fa 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericHexProvider . java 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + package im . actor . runtime . generic ; 
 + 
 + import im . actor . runtime . HexRuntime ; 
 + 
 + / * * 
 + * Created by root on 2 / 1 / 16 . 
 + * / 
 + public class GenericHexProvider implements HexRuntime { 
 + 
 + @ Override 
 + public byte [ ] fromHex ( String hex ) { 
 + byte [ ] res = new byte [ hex . length ( ) / 2 ] ; 
 + for ( int j = 0 ; j < hex . length ( ) / 2 ; j + + ) { 
 + String dg = hex . charAt ( j * 2 ) + " " + hex . charAt ( j * 2 + 1 ) ; 
 + res [ j ] = ( byte ) Integer . parseInt ( dg , 16 ) ; 
 + } 
 + return res ; 
 + } 
 + 
 + @ Override 
 + public byte [ ] fromHexReverse ( String hex ) { 
 + byte [ ] res = new byte [ hex . length ( ) / 2 ] ; 
 + for ( int j = 0 ; j < hex . length ( ) / 2 ; j + + ) { 
 + String dg = hex . charAt ( j * 2 ) + " " + hex . charAt ( j * 2 + 1 ) ; 
 + res [ res . length - j - 1 ] = ( byte ) Integer . parseInt ( dg , 16 ) ; 
 + } 
 + return res ; 
 + } 
 + 
 + private static final String HEXES = " 0123456789ABCDEF " ; 
 + 
 + @ Override 
 + public String toHex ( byte [ ] raw ) { 
 + final StringBuilder hex = new StringBuilder ( 2 * raw . length ) ; 
 + for ( final byte b : raw ) { 
 + hex . append ( HEXES . charAt ( ( b & 0xF0 ) > > 4 ) ) . append ( HEXES . charAt ( ( b & 0x0F ) ) ) ; 
 + } 
 + return hex . toString ( ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericRandomProvider . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericRandomProvider . java 
 index 85e1af9 . . ac7f6b8 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericRandomProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericRandomProvider . java 
 @ @ - 36 , 6 + 36 , 13 @ @ public class GenericRandomProvider implements RandomRuntime { 
 } 
 
 @ Override 
 + public long randomLong ( ) { 
 + synchronized ( random ) { 
 + return random . nextLong ( ) ; 
 + } 
 + } 
 + 
 + @ Override 
 public BigInteger generateBigInteger ( int numBits ) { 
 return new BigInteger ( numBits , random ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / build . gradle b / actor - sdk / sdk - core / runtime / runtime - shared / build . gradle 
 index 0a96a08 . . e2cb1ec 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / build . gradle 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / build . gradle 
 @ @ - 12 , 7 + 12 , 6 @ @ sourceSets { 
 ' src / template / java ' ] 
 } 
 } 
 - 
 generic { 
 java { 
 srcDirs = [ ' src / main / java ' , 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java 
 index c3998f5 . . 0804463 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java 
 @ @ - 6 , 7 + 6 , 6 @ @ package im . actor . runtime ; 
 
 import java . math . BigInteger ; 
 
 - import im . actor . core . util . Hex ; 
 import im . actor . runtime . crypto . primitives . digest . KeyDigest ; 
 import im . actor . runtime . crypto . primitives . digest . SHA256 ; 
 
 @ @ - 16 , 6 + 15 , 7 @ @ public class Crypto { 
 
 private static final CryptoRuntime provider = new CryptoRuntimeProvider ( ) ; 
 private static final RandomRuntime random = new RandomRuntimeProvider ( ) ; 
 + private static final HexRuntime hex = new HexRuntimeProvider ( ) ; 
 
 public static byte [ ] MD5 ( byte [ ] data ) { 
 return provider . MD5 ( data ) ; 
 @ @ - 26 , 7 + 26 , 7 @ @ public class Crypto { 
 keyDigest . update ( publicKey , 0 , publicKey . length ) ; 
 byte [ ] res = new byte [ 8 ] ; 
 keyDigest . doFinal ( res , 0 ) ; 
 - return Hex . toHex ( res ) ; 
 + return hex . toHex ( res ) ; 
 } 
 
 / * * 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / HexRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / HexRuntime . java 
 new file mode 100644 
 index 0000000 . . 892d174 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / HexRuntime . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package im . actor . runtime ; 
 + 
 + public interface HexRuntime { 
 + byte [ ] fromHex ( String hex ) ; 
 + 
 + byte [ ] fromHexReverse ( String hex ) ; 
 + 
 + String toHex ( byte [ ] raw ) ; 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / RandomRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / RandomRuntime . java 
 index 5cefaca . . e4fe1cd 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / RandomRuntime . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / RandomRuntime . java 
 @ @ - 9 , 6 + 9 , 8 @ @ public interface RandomRuntime { 
 
 void nextBytes ( byte [ ] data ) ; 
 
 + long randomLong ( ) ; 
 + 
 BigInteger generateBigInteger ( int numBits ) ; 
 
 BigInteger generateBigInteger ( int numBits , int certanity ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java 
 index 97fb500 . . db2a0b5 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java 
 @ @ - 6 , 8 + 6 , 9 @ @ import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . Comparator ; 
 
 - import im . actor . core . util . RandomUtils ; 
 import im . actor . runtime . Log ; 
 + import im . actor . runtime . RandomRuntime ; 
 + import im . actor . runtime . RandomRuntimeProvider ; 
 import im . actor . runtime . function . ArrayFunction ; 
 import im . actor . runtime . function . Consumer ; 
 import im . actor . runtime . function . Function ; 
 @ @ - 21 , 7 + 22 , 7 @ @ import im . actor . runtime . function . Predicates ; 
 * @ param < T > type of array 
 * / 
 public class PromisesArray < T > { 
 - 
 + private static final RandomRuntime rundom = new RandomRuntimeProvider ( ) ; 
 / * * 
 * Create PromisesArray from collection 
 * 
 @ @ - 315 , 7 + 316 , 7 @ @ public class PromisesArray < T > { 
 if ( ts . length = = 0 ) { 
 throw new RuntimeException ( " Array is empty " ) ; 
 } 
 - return ( T [ ] ) new Object [ ] { ts [ RandomUtils . randomId ( ts . length ) ] } ; 
 + return ( T [ ] ) new Object [ ] { ts [ rundom . randomInt ( ts . length ) ] } ; 
 } 
 } ) . first ( ) ; 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index f60dff5 . . cb3bc8f 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 249 , 7 + 249 , 7 @ @ public class JsFacade implements Exportable { 
 } 
 } ) ; 
 } catch ( Exception e ) { 
 - e . printStackTrace ( ) ; 
 + Log . e ( TAG , e ) ; 
 im . actor . runtime . Runtime . postToMainThread ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java 
 index d47abf7 . . 109599c 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java 
 @ @ - 65 , 7 + 65 , 7 @ @ public class JsFilesModule extends AbsModule { 
 try { 
 return CachedFileUrl . fromBytes ( data ) ; 
 } catch ( IOException e ) { 
 - e . printStackTrace ( ) ; 
 + Log . e ( TAG , e ) ; 
 return null ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsLogProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsLogProvider . java 
 index ff0d4a0 . . 6672fe1 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsLogProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsLogProvider . java 
 @ @ - 25 , 7 + 25 , 12 @ @ public class JsLogProvider implements LogRuntime { 
 
 @ Override 
 public void e ( String tag , Throwable throwable ) { 
 - error ( formatTime ( ) + " [ E ] " + tag + " : " + throwable ) ; 
 + String stackTrace = " " ; 
 + for ( StackTraceElement element : throwable . getStackTrace ( ) ) { 
 + stackTrace + = element + " \ n " ; 
 + } 
 + 
 + error ( formatTime ( ) + " [ E ] " + tag + " : " + throwable + " \ n " + stackTrace ) ; 
 } 
 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsIndexStorage . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsIndexStorage . java 
 index 27d0af1 . . e8f198d 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsIndexStorage . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsIndexStorage . java 
 @ @ - 7 , 6 + 7 , 7 @ @ import java . util . HashSet ; 
 import java . util . List ; 
 import java . util . Set ; 
 
 + import im . actor . runtime . Log ; 
 import im . actor . runtime . bser . DataInput ; 
 import im . actor . runtime . bser . DataOutput ; 
 import im . actor . runtime . storage . IndexStorage ; 
 @ @ - 16 , 6 + 17 , 8 @ @ import static im . actor . runtime . crypto . Base64Utils . toBase64 ; 
 
 public class JsIndexStorage implements IndexStorage { 
 
 + private static final String TAG = " JsIndexStorage " ; 
 + 
 private Storage storage ; 
 private String prefix ; 
 private Set < Item > items = new HashSet < Item > ( ) ; 
 @ @ - 37 , 7 + 40 , 7 @ @ public class JsIndexStorage implements IndexStorage { 
 } 
 } 
 } catch ( Exception e ) { 
 - e . printStackTrace ( ) ; 
 + Log . e ( TAG , e ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsKeyValueStorage . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsKeyValueStorage . java 
 index 8846506 . . d00ddb6 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsKeyValueStorage . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsKeyValueStorage . java 
 @ @ - 10 , 6 + 10 , 7 @ @ import java . util . HashSet ; 
 import java . util . List ; 
 import java . util . Set ; 
 
 + import im . actor . runtime . Log ; 
 import im . actor . runtime . bser . DataInput ; 
 import im . actor . runtime . bser . DataOutput ; 
 import im . actor . runtime . storage . KeyValueRecord ; 
 @ @ - 20 , 6 + 21 , 8 @ @ import static im . actor . runtime . crypto . Base64Utils . toBase64 ; 
 
 public class JsKeyValueStorage implements KeyValueStorage { 
 
 + private static final String TAG = " JsKeyValueStorage " ; 
 + 
 private Storage storage ; 
 private String prefix ; 
 private Set < Long > items = new HashSet < Long > ( ) ; 
 @ @ - 39 , 7 + 42 , 7 @ @ public class JsKeyValueStorage implements KeyValueStorage { 
 } 
 } 
 } catch ( Exception e ) { 
 - e . printStackTrace ( ) ; 
 + Log . e ( TAG , e ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsListEngine . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsListEngine . java 
 index fe4de7f . . 878ff80 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsListEngine . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsListEngine . java 
 @ @ - 43 , 7 + 43 , 7 @ @ public class JsListEngine < T extends BserObject & ListEngineItem > implements List 
 callback . onItemAddedOrUpdated ( item ) ; 
 } catch ( Exception e ) { 
 Log . d ( TAG , " Exception during update ( addOrUpdateItem ) " ) ; 
 - e . printStackTrace ( ) ; 
 + Log . e ( TAG , e ) ; 
 } 
 } 
 
 @ @ - 65 , 7 + 65 , 7 @ @ public class JsListEngine < T extends BserObject & ListEngineItem > implements List 
 callback . onItemsAddedOrUpdated ( items ) ; 
 } catch ( Exception e ) { 
 Log . d ( TAG , " Exception during update ( addOrUpdateItems ) " ) ; 
 - e . printStackTrace ( ) ; 
 + Log . e ( TAG , e ) ; 
 } 
 } 
 } 
 @ @ - 87 , 7 + 87 , 7 @ @ public class JsListEngine < T extends BserObject & ListEngineItem > implements List 
 callback . onItemsReplaced ( items ) ; 
 } catch ( Exception e ) { 
 Log . d ( TAG , " Exception during update ( replaceItems ) " ) ; 
 - e . printStackTrace ( ) ; 
 + Log . e ( TAG , e ) ; 
 } 
 } 
 } 
 @ @ - 102 , 7 + 102 , 7 @ @ public class JsListEngine < T extends BserObject & ListEngineItem > implements List 
 callback . onItemRemoved ( key ) ; 
 } catch ( Exception e ) { 
 Log . d ( TAG , " Exception during update ( removeItem ) " ) ; 
 - e . printStackTrace ( ) ; 
 + Log . e ( TAG , e ) ; 
 } 
 } 
 } 
 @ @ - 118 , 7 + 118 , 7 @ @ public class JsListEngine < T extends BserObject & ListEngineItem > implements List 
 callback . onItemsRemoved ( keys ) ; 
 } catch ( Exception e ) { 
 Log . d ( TAG , " Exception during update ( removeItems ) " ) ; 
 - e . printStackTrace ( ) ; 
 + Log . e ( TAG , e ) ; 
 } 
 } 
 } 
 @ @ - 132 , 7 + 132 , 7 @ @ public class JsListEngine < T extends BserObject & ListEngineItem > implements List 
 callback . onClear ( ) ; 
 } catch ( Exception e ) { 
 Log . d ( TAG , " Exception during update ( clear ) " ) ; 
 - e . printStackTrace ( ) ; 
 + Log . e ( TAG , e ) ; 
 } 
 } 
 } 
 @ @ - 150 , 7 + 150 , 7 @ @ public class JsListEngine < T extends BserObject & ListEngineItem > implements List 
 return res ; 
 } catch ( IOException e ) { 
 Log . d ( " JsListEngine " , " Unable to decode : " + e . getMessage ( ) ) ; 
 - e . printStackTrace ( ) ; 
 + Log . e ( TAG , e ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsListStorage . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsListStorage . java 
 index 99a11a0 . . 06935e0 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsListStorage . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / storage / JsListStorage . java 
 @ @ - 11 , 6 + 11 , 7 @ @ import java . util . Collections ; 
 import java . util . Comparator ; 
 import java . util . List ; 
 
 + import im . actor . runtime . Log ; 
 import im . actor . runtime . bser . DataInput ; 
 import im . actor . runtime . bser . DataOutput ; 
 import im . actor . runtime . storage . ListEngineRecord ; 
 @ @ - 21 , 6 + 22 , 8 @ @ import static im . actor . runtime . crypto . Base64Utils . toBase64 ; 
 
 public class JsListStorage implements ListStorage { 
 
 + private static final String TAG = " JsListStorage " ; 
 + 
 private final Storage storage ; 
 private final String prefix ; 
 private final ArrayList < Index > index = new ArrayList < Index > ( ) ; 
 @ @ - 51 , 7 + 54 , 7 @ @ public class JsListStorage implements ListStorage { 
 index . add ( new Index ( id , order ) ) ; 
 } 
 } catch ( Exception e ) { 
 - e . printStackTrace ( ) ; 
 + Log . e ( TAG , e ) ; 
 } 
 }
