BLEU SCORE: 0.22741221234802106

TEST MSG: fix ( js ) : loadMoreArchivedDialogs reject , add logs
GENERATED MSG: feat ( js ) : add answer / end call to facade

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 4fa4bf1 . . f14677c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 851 , 12 + 851 , 14 @ @ public class JsFacade implements Exportable { < nl > for ( ApiDialog d : response . getDialogs ( ) ) { < nl > res . push ( JsDialogShort . create ( messenger . buildPeerInfo ( EntityConverter . convert ( d . getPeer ( ) ) ) , d . getUnreadCount ( ) ) ) ; < nl > } < nl > + Log . d ( TAG , " loadMoreArchivedDialogs : result " ) ; < nl > resolve ( res ) ; < nl > } < nl > < nl > @ Override < nl > public void onError ( RpcException e ) { < nl > - < nl > + Log . d ( TAG , " loadMoreArchivedDialogs : error " ) ; < nl > + reject ( e . getMessage ( ) ) ; < nl > } < nl > } ) ; < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 756db74 . . a5199e7 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 647 , 6 + 647 , 14 @ @ public class JsFacade implements Exportable { < nl > } ) ; < nl > } < nl > < nl > + public void answerCall ( long callId ) { < nl > + messenger . answerCall ( callId ) ; < nl > + } < nl > + < nl > + public void endCall ( long callId ) { < nl > + messenger . endCall ( callId ) ; < nl > + } < nl > + < nl > public void bindCall ( String id , JsBindedValueCallback callback ) { < nl > if ( callback = = null ) { < nl > return ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 4fa4bf1 . . f14677c 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 851 , 12 + 851 , 14 @ @ public class JsFacade implements Exportable { 
 for ( ApiDialog d : response . getDialogs ( ) ) { 
 res . push ( JsDialogShort . create ( messenger . buildPeerInfo ( EntityConverter . convert ( d . getPeer ( ) ) ) , d . getUnreadCount ( ) ) ) ; 
 } 
 + Log . d ( TAG , " loadMoreArchivedDialogs : result " ) ; 
 resolve ( res ) ; 
 } 
 
 @ Override 
 public void onError ( RpcException e ) { 
 - 
 + Log . d ( TAG , " loadMoreArchivedDialogs : error " ) ; 
 + reject ( e . getMessage ( ) ) ; 
 } 
 } ) ; 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 756db74 . . a5199e7 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 647 , 6 + 647 , 14 @ @ public class JsFacade implements Exportable { 
 } ) ; 
 } 
 
 + public void answerCall ( long callId ) { 
 + messenger . answerCall ( callId ) ; 
 + } 
 + 
 + public void endCall ( long callId ) { 
 + messenger . endCall ( callId ) ; 
 + } 
 + 
 public void bindCall ( String id , JsBindedValueCallback callback ) { 
 if ( callback = = null ) { 
 return ;
