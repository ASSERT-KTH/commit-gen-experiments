BLEU SCORE: 0.2777619034011791

TEST MSG: test ( server : session ) : fixed session spec
GENERATED MSG: fix ( session ) : fixed SessionHello structure

TEST DIFF (one line): diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > index 7265349 . . 4c18fb6 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > @ @ - 196 , 10 + 196 , 12 @ @ final class SessionSpec extends BaseSessionSpec { < nl > } < nl > < nl > def seq ( ) = { < nl > + val phoneNumber = 75550000000L + Random . nextInt ( 100000 ) < nl > + val user = createUser ( phoneNumber ) . _ 1 < nl > + < nl > val authId = createAuthId ( ) < nl > val sessionId = Random . nextLong ( ) < nl > < nl > - val phoneNumber = 75550000000L < nl > val code = phoneNumber . toString . charAt ( 4 ) . toString * 4 < nl > < nl > val firstMessageId = Random . nextLong ( ) < nl > @ @ - 239 , 8 + 241 , 7 @ @ final class SessionSpec extends BaseSessionSpec { < nl > } < nl > < nl > val update = UpdateContactRegistered ( 1 , true , 1L , 2L ) < nl > - Await . result ( UserExtension ( system ) . broadcastClientUpdate ( update , None , isFat = false ) , 5 . seconds ) < nl > - < nl > + seqUpdExt . deliverSingleUpdate ( user . id , update ) < nl > expectSeqUpdate ( authId , sessionId ) . update should = = = ( update . toByteArray ) < nl > }
NEAREST DIFF (one line): diff - - git a / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / package . scala b / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / package . scala < nl > index 02ac599 . . d4a181c 100644 < nl > - - - a / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / package . scala < nl > + + + b / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / package . scala < nl > @ @ - 6 , 7 + 6 , 7 @ @ import scodec . codecs . _ < nl > package object protocol { < nl > val MessageAckCodec = longs . as [ MessageAck ] < nl > val NewSessionCodec = ( int64 : : int64 ) . as [ NewSession ] < nl > - val SessionHelloCodec = ( int64 : : int64 ) . as [ SessionHello ] < nl > + val SessionHelloCodec = provide [ SessionHello ] ( SessionHello ) < nl > val RequestAuthIdCodec = provide ( RequestAuthId ( ) ) < nl > val RequestResendCodec = int64 . as [ RequestResend ] < nl > val ResponseAuthIdCodec = int64 . as [ ResponseAuthId ] < nl > diff - - git a / actor - models / src / main / scala / im / actor / server / mtproto / protocol / ProtoMessage . scala b / actor - models / src / main / scala / im / actor / server / mtproto / protocol / ProtoMessage . scala < nl > index 8dbebe8 . . 7e634f3 100644 < nl > - - - a / actor - models / src / main / scala / im / actor / server / mtproto / protocol / ProtoMessage . scala < nl > + + + b / actor - models / src / main / scala / im / actor / server / mtproto / protocol / ProtoMessage . scala < nl > @ @ - 55 , 16 + 55 , 14 @ @ object NewSession { < nl > val header = 0x0C < nl > } < nl > < nl > - @ SerialVersionUID ( 1L ) < nl > - case class SessionHello ( sessionId : Long , messageId : Long ) extends ProtoMessage with IncomingProtoMessage { < nl > - val header = SessionHello . header < nl > - } < nl > - < nl > - object SessionHello { < nl > + trait SessionHello extends ProtoMessage with IncomingProtoMessage { < nl > val header = 0x0F < nl > } < nl > < nl > @ SerialVersionUID ( 1L ) < nl > + case object SessionHello extends SessionHello < nl > + < nl > + @ SerialVersionUID ( 1L ) < nl > case class RequestAuthId ( ) extends ProtoMessage { < nl > val header = RequestAuthId . header < nl > } < nl > diff - - git a / actor - session / src / main / scala / im / actor / server / session / SessionMessagePublisher . scala b / actor - session / src / main / scala / im / actor / server / session / SessionMessagePublisher . scala < nl > index 8a9a44d . . d50a9d4 100644 < nl > - - - a / actor - session / src / main / scala / im / actor / server / session / SessionMessagePublisher . scala < nl > + + + b / actor - session / src / main / scala / im / actor / server / session / SessionMessagePublisher . scala < nl > @ @ - 53 , 6 + 53 , 8 @ @ private [ session ] class SessionMessagePublisher extends ActorPublisher [ SessionStr < nl > } < nl > < nl > private def publishMessage ( message : SessionStreamMessage ) : Unit = { < nl > + log . debug ( " Publish message { } " , message ) < nl > + < nl > if ( messageQueue . isEmpty & & totalDemand > 0 ) < nl > onNext ( message ) < nl > else { < nl > @ @ - 62 , 6 + 64 , 9 @ @ private [ session ] class SessionMessagePublisher extends ActorPublisher [ SessionStr < nl > } < nl > < nl > private def publishMessages ( messages : immutable . Iterable [ SessionStreamMessage ] ) : Unit = { < nl > + messages foreach { message â‡’ < nl > + log . debug ( " Publish message { } " , message ) < nl > + } < nl > messageQueue = messageQueue . enqueue ( messages ) < nl > deliverBuf ( ) < nl > } < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > index 26635f6 . . 789f3d7 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > @ @ - 91 , 7 + 91 , 7 @ @ class SimpleServerE2eSpec extends ActorFlatSuite with DbInit with KafkaSpec with < nl > < nl > val smsHash = { < nl > val helloMessageId = 4L < nl > - val helloMbBytes = MessageBoxCodec . encode ( MessageBox ( helloMessageId , SessionHello ( sessionId , 0L ) ) ) . require < nl > + val helloMbBytes = MessageBoxCodec . encode ( MessageBox ( helloMessageId , SessionHello ) ) . require < nl > val helloMtPackage = MTPackage ( authId , sessionId , helloMbBytes ) < nl > client . send ( helloMtPackage ) < nl > expectNewSession ( sessionId , helloMessageId ) < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala b / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > index 0145aa9 . . adf41dc 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > @ @ - 92 , 8 + 92 , 7 @ @ class SessionResendSpec extends BaseSessionSpec ( < nl > { < nl > implicit val probe = TestProbe ( ) < nl > < nl > - val helloMessageId = Random . nextLong ( ) < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , SessionHello ( sessionId , helloMessageId ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , SessionHello ) < nl > < nl > / / response to previous request < nl > expectRpcResult ( ) should matchPattern { < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala b / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > index c047013 . . 4b329eb 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > @ @ - 282 , 7 + 282 , 7 @ @ class SessionSpec extends BaseSessionSpec { < nl > val sessionId = Random . nextLong ( ) < nl > val messageId = Random . nextLong ( ) < nl > < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , SessionHello ( authId , sessionId ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , SessionHello ) < nl > expectNewSession ( authId , sessionId , messageId ) < nl > expectMessageAck ( authId , sessionId , messageId )

TEST DIFF:
diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 index 7265349 . . 4c18fb6 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 @ @ - 196 , 10 + 196 , 12 @ @ final class SessionSpec extends BaseSessionSpec { 
 } 
 
 def seq ( ) = { 
 + val phoneNumber = 75550000000L + Random . nextInt ( 100000 ) 
 + val user = createUser ( phoneNumber ) . _ 1 
 + 
 val authId = createAuthId ( ) 
 val sessionId = Random . nextLong ( ) 
 
 - val phoneNumber = 75550000000L 
 val code = phoneNumber . toString . charAt ( 4 ) . toString * 4 
 
 val firstMessageId = Random . nextLong ( ) 
 @ @ - 239 , 8 + 241 , 7 @ @ final class SessionSpec extends BaseSessionSpec { 
 } 
 
 val update = UpdateContactRegistered ( 1 , true , 1L , 2L ) 
 - Await . result ( UserExtension ( system ) . broadcastClientUpdate ( update , None , isFat = false ) , 5 . seconds ) 
 - 
 + seqUpdExt . deliverSingleUpdate ( user . id , update ) 
 expectSeqUpdate ( authId , sessionId ) . update should = = = ( update . toByteArray ) 
 }

NEAREST DIFF:
diff - - git a / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / package . scala b / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / package . scala 
 index 02ac599 . . d4a181c 100644 
 - - - a / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / package . scala 
 + + + b / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / package . scala 
 @ @ - 6 , 7 + 6 , 7 @ @ import scodec . codecs . _ 
 package object protocol { 
 val MessageAckCodec = longs . as [ MessageAck ] 
 val NewSessionCodec = ( int64 : : int64 ) . as [ NewSession ] 
 - val SessionHelloCodec = ( int64 : : int64 ) . as [ SessionHello ] 
 + val SessionHelloCodec = provide [ SessionHello ] ( SessionHello ) 
 val RequestAuthIdCodec = provide ( RequestAuthId ( ) ) 
 val RequestResendCodec = int64 . as [ RequestResend ] 
 val ResponseAuthIdCodec = int64 . as [ ResponseAuthId ] 
 diff - - git a / actor - models / src / main / scala / im / actor / server / mtproto / protocol / ProtoMessage . scala b / actor - models / src / main / scala / im / actor / server / mtproto / protocol / ProtoMessage . scala 
 index 8dbebe8 . . 7e634f3 100644 
 - - - a / actor - models / src / main / scala / im / actor / server / mtproto / protocol / ProtoMessage . scala 
 + + + b / actor - models / src / main / scala / im / actor / server / mtproto / protocol / ProtoMessage . scala 
 @ @ - 55 , 16 + 55 , 14 @ @ object NewSession { 
 val header = 0x0C 
 } 
 
 - @ SerialVersionUID ( 1L ) 
 - case class SessionHello ( sessionId : Long , messageId : Long ) extends ProtoMessage with IncomingProtoMessage { 
 - val header = SessionHello . header 
 - } 
 - 
 - object SessionHello { 
 + trait SessionHello extends ProtoMessage with IncomingProtoMessage { 
 val header = 0x0F 
 } 
 
 @ SerialVersionUID ( 1L ) 
 + case object SessionHello extends SessionHello 
 + 
 + @ SerialVersionUID ( 1L ) 
 case class RequestAuthId ( ) extends ProtoMessage { 
 val header = RequestAuthId . header 
 } 
 diff - - git a / actor - session / src / main / scala / im / actor / server / session / SessionMessagePublisher . scala b / actor - session / src / main / scala / im / actor / server / session / SessionMessagePublisher . scala 
 index 8a9a44d . . d50a9d4 100644 
 - - - a / actor - session / src / main / scala / im / actor / server / session / SessionMessagePublisher . scala 
 + + + b / actor - session / src / main / scala / im / actor / server / session / SessionMessagePublisher . scala 
 @ @ - 53 , 6 + 53 , 8 @ @ private [ session ] class SessionMessagePublisher extends ActorPublisher [ SessionStr 
 } 
 
 private def publishMessage ( message : SessionStreamMessage ) : Unit = { 
 + log . debug ( " Publish message { } " , message ) 
 + 
 if ( messageQueue . isEmpty & & totalDemand > 0 ) 
 onNext ( message ) 
 else { 
 @ @ - 62 , 6 + 64 , 9 @ @ private [ session ] class SessionMessagePublisher extends ActorPublisher [ SessionStr 
 } 
 
 private def publishMessages ( messages : immutable . Iterable [ SessionStreamMessage ] ) : Unit = { 
 + messages foreach { message â‡’ 
 + log . debug ( " Publish message { } " , message ) 
 + } 
 messageQueue = messageQueue . enqueue ( messages ) 
 deliverBuf ( ) 
 } 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 index 26635f6 . . 789f3d7 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 @ @ - 91 , 7 + 91 , 7 @ @ class SimpleServerE2eSpec extends ActorFlatSuite with DbInit with KafkaSpec with 
 
 val smsHash = { 
 val helloMessageId = 4L 
 - val helloMbBytes = MessageBoxCodec . encode ( MessageBox ( helloMessageId , SessionHello ( sessionId , 0L ) ) ) . require 
 + val helloMbBytes = MessageBoxCodec . encode ( MessageBox ( helloMessageId , SessionHello ) ) . require 
 val helloMtPackage = MTPackage ( authId , sessionId , helloMbBytes ) 
 client . send ( helloMtPackage ) 
 expectNewSession ( sessionId , helloMessageId ) 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala b / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 index 0145aa9 . . adf41dc 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 @ @ - 92 , 8 + 92 , 7 @ @ class SessionResendSpec extends BaseSessionSpec ( 
 { 
 implicit val probe = TestProbe ( ) 
 
 - val helloMessageId = Random . nextLong ( ) 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , SessionHello ( sessionId , helloMessageId ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , SessionHello ) 
 
 / / response to previous request 
 expectRpcResult ( ) should matchPattern { 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala b / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 index c047013 . . 4b329eb 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 @ @ - 282 , 7 + 282 , 7 @ @ class SessionSpec extends BaseSessionSpec { 
 val sessionId = Random . nextLong ( ) 
 val messageId = Random . nextLong ( ) 
 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , SessionHello ( authId , sessionId ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , SessionHello ) 
 expectNewSession ( authId , sessionId , messageId ) 
 expectMessageAck ( authId , sessionId , messageId )
