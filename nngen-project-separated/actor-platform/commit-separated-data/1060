BLEU SCORE: 0.26708679784499234

TEST MSG: fix ( core ) : Fixing initial message read
GENERATED MSG: feat ( core ) : Avoiding unnecessary device info upload

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > index 3955ee7 . . c3af854 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > @ @ - 538 , 6 + 538 , 8 @ @ public class ConversationActor extends ModuleActor { < nl > ArrayList < Message > updated = new ArrayList < Message > ( ) ; < nl > ArrayList < Message > updatedDocs = new ArrayList < Message > ( ) ; < nl > < nl > + long maxReadMessage = 0 ; < nl > + < nl > / / Processing all new messages < nl > for ( Message historyMessage : history ) { < nl > / / Ignore already present messages < nl > @ @ - 549 , 6 + 551 , 10 @ @ public class ConversationActor extends ModuleActor { < nl > if ( historyMessage . getContent ( ) instanceof DocumentContent ) { < nl > updatedDocs . add ( historyMessage ) ; < nl > } < nl > + < nl > + if ( historyMessage . getSenderId ( ) ! = myUid ( ) ) { < nl > + maxReadMessage = Math . max ( maxReadMessage , historyMessage . getSortDate ( ) ) ; < nl > + } < nl > } < nl > < nl > / / Updating messages < nl > @ @ - 560 , 9 + 566 , 12 @ @ public class ConversationActor extends ModuleActor { < nl > docs . addOrUpdateItems ( updatedDocs ) ; < nl > } < nl > < nl > - / / TODO : Implement intial message read state < nl > + inReadStateNew = Math . max ( inReadStateNew , maxReadMessage ) ; < nl > + preferences ( ) . putLong ( IN _ READ _ STATE _ NEW _ PREF , inReadStateNew ) ; < nl > < nl > - / / No need to update dialogs : all history messages are always too old < nl > + if ( isConversationAutoRead ( ) ) { < nl > + checkReadState ( true ) ; < nl > + } < nl > } < nl > < nl > / / Messages
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / DeviceInfoModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / DeviceInfoModule . java < nl > index b991f5e . . 6334a91 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / DeviceInfoModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / DeviceInfoModule . java < nl > @ @ - 1 , 23 + 1 , 28 @ @ < nl > package im . actor . core . modules . internal ; < nl > < nl > - import java . util . ArrayList ; < nl > - < nl > - import im . actor . core . api . rpc . RequestNotifyAboutDeviceInfo ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . internal . device . DeviceInfoActor ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . actors . Props ; < nl > + < nl > + import static im . actor . runtime . actors . ActorSystem . system ; < nl > < nl > public class DeviceInfoModule extends AbsModule { < nl > < nl > + private ActorRef actorRef ; < nl > + < nl > public DeviceInfoModule ( ModuleContext context ) { < nl > super ( context ) ; < nl > } < nl > < nl > public void run ( ) { < nl > - ArrayList < String > langs = new ArrayList < String > ( ) ; < nl > - for ( String s : context ( ) . getConfiguration ( ) . getPreferredLanguages ( ) ) { < nl > - langs . add ( s ) ; < nl > - } < nl > - String timeZone = context ( ) . getConfiguration ( ) . getTimeZone ( ) ; < nl > - request ( new RequestNotifyAboutDeviceInfo ( langs , timeZone ) ) ; < nl > + actorRef = system ( ) . actorOf ( Props . create ( DeviceInfoActor . class , new ActorCreator < DeviceInfoActor > ( ) { < nl > + @ Override < nl > + public DeviceInfoActor create ( ) { < nl > + return new DeviceInfoActor ( context ( ) ) ; < nl > + } < nl > + } ) , " device _ info / notifier " ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / ContactsSyncActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / ContactsSyncActor . java < nl > index cb19e9f . . 52217bf 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / ContactsSyncActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / ContactsSyncActor . java < nl > @ @ - 61 , 7 + 61 , 7 @ @ public class ContactsSyncActor extends ModuleActor { < nl > } < nl > } < nl > notifyState ( ) ; < nl > - self ( ) . send ( new PerformSync ( ) ) ; < nl > + / / self ( ) . send ( new PerformSync ( ) ) ; < nl > } < nl > < nl > public void performSync ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / device / DeviceInfoActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / device / DeviceInfoActor . java < nl > new file mode 100644 < nl > index 0000000 . . b7838f2 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / device / DeviceInfoActor . java < nl > @ @ - 0 , 0 + 1 , 68 @ @ < nl > + package im . actor . core . modules . internal . device ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . core . api . rpc . RequestNotifyAboutDeviceInfo ; < nl > + import im . actor . core . api . rpc . ResponseVoid ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . utils . ModuleActor ; < nl > + import im . actor . core . network . RpcCallback ; < nl > + import im . actor . core . network . RpcException ; < nl > + import im . actor . core . util . JavaUtil ; < nl > + < nl > + public class DeviceInfoActor extends ModuleActor { < nl > + < nl > + public DeviceInfoActor ( ModuleContext context ) { < nl > + super ( context ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + super . preStart ( ) ; < nl > + < nl > + / / < nl > + / / Loading Information < nl > + / / < nl > + ArrayList < String > langs = new ArrayList < String > ( ) ; < nl > + for ( String s : context ( ) . getConfiguration ( ) . getPreferredLanguages ( ) ) { < nl > + langs . add ( s ) ; < nl > + } < nl > + final String timeZone = context ( ) . getConfiguration ( ) . getTimeZone ( ) ; < nl > + < nl > + / / < nl > + / / Checking if information changed < nl > + / / < nl > + String expectedLangs = " " ; < nl > + for ( String s : langs ) { < nl > + if ( ! " " . equals ( expectedLangs ) ) { < nl > + expectedLangs + = " , " ; < nl > + } < nl > + expectedLangs + = s . toLowerCase ( ) ; < nl > + } < nl > + < nl > + if ( expectedLangs . equals ( preferences ( ) . getString ( " device _ info _ langs " ) ) & & < nl > + JavaUtil . equalsE ( timeZone , preferences ( ) . getString ( " device _ info _ timezone " ) ) ) { < nl > + / / Already sent < nl > + return ; < nl > + } < nl > + < nl > + / / < nl > + / / Performing Notification < nl > + / / < nl > + final String finalExpectedLangs = expectedLangs ; < nl > + request ( new RequestNotifyAboutDeviceInfo ( langs , timeZone ) , new RpcCallback < ResponseVoid > ( ) { < nl > + @ Override < nl > + public void onResult ( ResponseVoid response ) { < nl > + < nl > + / / Mark as sent < nl > + preferences ( ) . putString ( " device _ info _ langs " , finalExpectedLangs ) ; < nl > + preferences ( ) . putString ( " device _ info _ timezone " , timeZone ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( RpcException e ) { < nl > + / / Ignoring error < nl > + } < nl > + } ) ; < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 index 3955ee7 . . c3af854 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 @ @ - 538 , 6 + 538 , 8 @ @ public class ConversationActor extends ModuleActor { 
 ArrayList < Message > updated = new ArrayList < Message > ( ) ; 
 ArrayList < Message > updatedDocs = new ArrayList < Message > ( ) ; 
 
 + long maxReadMessage = 0 ; 
 + 
 / / Processing all new messages 
 for ( Message historyMessage : history ) { 
 / / Ignore already present messages 
 @ @ - 549 , 6 + 551 , 10 @ @ public class ConversationActor extends ModuleActor { 
 if ( historyMessage . getContent ( ) instanceof DocumentContent ) { 
 updatedDocs . add ( historyMessage ) ; 
 } 
 + 
 + if ( historyMessage . getSenderId ( ) ! = myUid ( ) ) { 
 + maxReadMessage = Math . max ( maxReadMessage , historyMessage . getSortDate ( ) ) ; 
 + } 
 } 
 
 / / Updating messages 
 @ @ - 560 , 9 + 566 , 12 @ @ public class ConversationActor extends ModuleActor { 
 docs . addOrUpdateItems ( updatedDocs ) ; 
 } 
 
 - / / TODO : Implement intial message read state 
 + inReadStateNew = Math . max ( inReadStateNew , maxReadMessage ) ; 
 + preferences ( ) . putLong ( IN _ READ _ STATE _ NEW _ PREF , inReadStateNew ) ; 
 
 - / / No need to update dialogs : all history messages are always too old 
 + if ( isConversationAutoRead ( ) ) { 
 + checkReadState ( true ) ; 
 + } 
 } 
 
 / / Messages

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / DeviceInfoModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / DeviceInfoModule . java 
 index b991f5e . . 6334a91 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / DeviceInfoModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / DeviceInfoModule . java 
 @ @ - 1 , 23 + 1 , 28 @ @ 
 package im . actor . core . modules . internal ; 
 
 - import java . util . ArrayList ; 
 - 
 - import im . actor . core . api . rpc . RequestNotifyAboutDeviceInfo ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . internal . device . DeviceInfoActor ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . actors . Props ; 
 + 
 + import static im . actor . runtime . actors . ActorSystem . system ; 
 
 public class DeviceInfoModule extends AbsModule { 
 
 + private ActorRef actorRef ; 
 + 
 public DeviceInfoModule ( ModuleContext context ) { 
 super ( context ) ; 
 } 
 
 public void run ( ) { 
 - ArrayList < String > langs = new ArrayList < String > ( ) ; 
 - for ( String s : context ( ) . getConfiguration ( ) . getPreferredLanguages ( ) ) { 
 - langs . add ( s ) ; 
 - } 
 - String timeZone = context ( ) . getConfiguration ( ) . getTimeZone ( ) ; 
 - request ( new RequestNotifyAboutDeviceInfo ( langs , timeZone ) ) ; 
 + actorRef = system ( ) . actorOf ( Props . create ( DeviceInfoActor . class , new ActorCreator < DeviceInfoActor > ( ) { 
 + @ Override 
 + public DeviceInfoActor create ( ) { 
 + return new DeviceInfoActor ( context ( ) ) ; 
 + } 
 + } ) , " device _ info / notifier " ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / ContactsSyncActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / ContactsSyncActor . java 
 index cb19e9f . . 52217bf 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / ContactsSyncActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / ContactsSyncActor . java 
 @ @ - 61 , 7 + 61 , 7 @ @ public class ContactsSyncActor extends ModuleActor { 
 } 
 } 
 notifyState ( ) ; 
 - self ( ) . send ( new PerformSync ( ) ) ; 
 + / / self ( ) . send ( new PerformSync ( ) ) ; 
 } 
 
 public void performSync ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / device / DeviceInfoActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / device / DeviceInfoActor . java 
 new file mode 100644 
 index 0000000 . . b7838f2 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / device / DeviceInfoActor . java 
 @ @ - 0 , 0 + 1 , 68 @ @ 
 + package im . actor . core . modules . internal . device ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . core . api . rpc . RequestNotifyAboutDeviceInfo ; 
 + import im . actor . core . api . rpc . ResponseVoid ; 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . utils . ModuleActor ; 
 + import im . actor . core . network . RpcCallback ; 
 + import im . actor . core . network . RpcException ; 
 + import im . actor . core . util . JavaUtil ; 
 + 
 + public class DeviceInfoActor extends ModuleActor { 
 + 
 + public DeviceInfoActor ( ModuleContext context ) { 
 + super ( context ) ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + super . preStart ( ) ; 
 + 
 + / / 
 + / / Loading Information 
 + / / 
 + ArrayList < String > langs = new ArrayList < String > ( ) ; 
 + for ( String s : context ( ) . getConfiguration ( ) . getPreferredLanguages ( ) ) { 
 + langs . add ( s ) ; 
 + } 
 + final String timeZone = context ( ) . getConfiguration ( ) . getTimeZone ( ) ; 
 + 
 + / / 
 + / / Checking if information changed 
 + / / 
 + String expectedLangs = " " ; 
 + for ( String s : langs ) { 
 + if ( ! " " . equals ( expectedLangs ) ) { 
 + expectedLangs + = " , " ; 
 + } 
 + expectedLangs + = s . toLowerCase ( ) ; 
 + } 
 + 
 + if ( expectedLangs . equals ( preferences ( ) . getString ( " device _ info _ langs " ) ) & & 
 + JavaUtil . equalsE ( timeZone , preferences ( ) . getString ( " device _ info _ timezone " ) ) ) { 
 + / / Already sent 
 + return ; 
 + } 
 + 
 + / / 
 + / / Performing Notification 
 + / / 
 + final String finalExpectedLangs = expectedLangs ; 
 + request ( new RequestNotifyAboutDeviceInfo ( langs , timeZone ) , new RpcCallback < ResponseVoid > ( ) { 
 + @ Override 
 + public void onResult ( ResponseVoid response ) { 
 + 
 + / / Mark as sent 
 + preferences ( ) . putString ( " device _ info _ langs " , finalExpectedLangs ) ; 
 + preferences ( ) . putString ( " device _ info _ timezone " , timeZone ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( RpcException e ) { 
 + / / Ignoring error 
 + } 
 + } ) ; 
 + } 
 + }
