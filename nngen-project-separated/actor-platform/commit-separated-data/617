BLEU SCORE: 0.5781396287180781

TEST MSG: refactor ( server : session ) : removed unnessesary logging
GENERATED MSG: refactor ( server : session ) : added messageId to log

TEST DIFF (one line): diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > index 669bf71 . . 849d3f0 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > @ @ - 75 , 15 + 75 , 12 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf < nl > < nl > Option ( responseCache . getIfPresent ( messageId ) ) match { < nl > case Some ( rspFuture ) ⇒ < nl > - log . debug ( " Publishing cached RpcResponse for messageId : { } " , messageId ) < nl > rspFuture map ( CachedResponse ( messageId , _ , clientData ) ) pipeTo self < nl > case None ⇒ < nl > val scheduledAck = context . system . scheduler . scheduleOnce ( config . ackDelay , self , Ack ( messageId ) ) < nl > requestQueue + = ( messageId → scheduledAck ) < nl > assert ( requestQueue . size < = MaxRequestQueueSize , s " queued too many : $ { requestQueue . size } " ) < nl > < nl > - log . debug ( " Making an rpc request for messageId { } " , messageId ) < nl > - < nl > val responseFuture = < nl > RequestCodec . decode ( requestBytes ) match { < nl > case Attempt . Successful ( DecodeResult ( request , _ ) ) ⇒
NEAREST DIFF (one line): diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > index d48e08f . . 669bf71 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > @ @ - 125 , 7 + 125 , 7 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf < nl > enqueue ( Some ( rsp ) , messageId ) < nl > case ResponseFailure ( messageId , request , failure , clientData ) ⇒ < nl > markFailure { < nl > - log . error ( failure , " Failed to process request : { } " , request ) < nl > + log . error ( failure , " Failed to process request messageId : { } : { } " , messageId , request ) < nl > responseCache . invalidate ( messageId ) < nl > removeFromQueue ( messageId ) < nl > enqueue ( Some ( RpcErrors . InternalError ) , messageId )

TEST DIFF:
diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 index 669bf71 . . 849d3f0 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 @ @ - 75 , 15 + 75 , 12 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf 
 
 Option ( responseCache . getIfPresent ( messageId ) ) match { 
 case Some ( rspFuture ) ⇒ 
 - log . debug ( " Publishing cached RpcResponse for messageId : { } " , messageId ) 
 rspFuture map ( CachedResponse ( messageId , _ , clientData ) ) pipeTo self 
 case None ⇒ 
 val scheduledAck = context . system . scheduler . scheduleOnce ( config . ackDelay , self , Ack ( messageId ) ) 
 requestQueue + = ( messageId → scheduledAck ) 
 assert ( requestQueue . size < = MaxRequestQueueSize , s " queued too many : $ { requestQueue . size } " ) 
 
 - log . debug ( " Making an rpc request for messageId { } " , messageId ) 
 - 
 val responseFuture = 
 RequestCodec . decode ( requestBytes ) match { 
 case Attempt . Successful ( DecodeResult ( request , _ ) ) ⇒

NEAREST DIFF:
diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 index d48e08f . . 669bf71 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 @ @ - 125 , 7 + 125 , 7 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf 
 enqueue ( Some ( rsp ) , messageId ) 
 case ResponseFailure ( messageId , request , failure , clientData ) ⇒ 
 markFailure { 
 - log . error ( failure , " Failed to process request : { } " , request ) 
 + log . error ( failure , " Failed to process request messageId : { } : { } " , messageId , request ) 
 responseCache . invalidate ( messageId ) 
 removeFromQueue ( messageId ) 
 enqueue ( Some ( RpcErrors . InternalError ) , messageId )
