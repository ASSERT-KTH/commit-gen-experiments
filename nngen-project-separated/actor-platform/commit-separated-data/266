BLEU SCORE: 0.09072069007511598

TEST MSG: feat ( server ) : upgrade akka - persistence - jdbc 2 . 2 . 23 - > 2 . 3 . 3 , upgrade akka 2 . 4 . 5 - > 2 . 4 . 7
GENERATED MSG: feat ( server ) : new sql configuration

TEST DIFF (one line): diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala < nl > index 0b083e0 . . d5971f3 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala < nl > @ @ - 61 , 20 + 61 , 6 @ @ object DbExtension extends ExtensionId [ DbExtensionImpl ] with ExtensionIdProvider < nl > ext < nl > } < nl > < nl > - private def initDs ( sqlConfig : Config ) : Try [ HikariCPJdbcDataSource ] = { < nl > - for { < nl > - host ← sqlConfig . get [ Try [ String ] ] ( " host " ) < nl > - port ← sqlConfig . get [ Try [ Int ] ] ( " port " ) < nl > - db ← sqlConfig . get [ Try [ String ] ] ( " db " ) < nl > - _ ← sqlConfig . get [ Try [ String ] ] ( " user " ) < nl > - _ ← sqlConfig . get [ Try [ String ] ] ( " password " ) < nl > - } yield HikariCPJdbcDataSource . forConfig ( sqlConfig . withFallback ( ConfigFactory . parseString ( < nl > - s " " " < nl > - | url : " jdbc : postgresql : / / " $ { host } " : " $ { port } " / " $ { db } < nl > - " " " . stripMargin < nl > - ) ) . resolve ( ) , null , " main " , getClass . getClassLoader ) < nl > - } < nl > - < nl > private def initDb ( appConfig : Config ) : Database = { < nl > val sqlConfig = appConfig . getConfig ( " services . postgresql " ) < nl > < nl > diff - - git a / actor - server / actor - runtime / src / main / resources / reference . conf b / actor - server / actor - runtime / src / main / resources / reference . conf < nl > index a09f074 . . d1de692 100644 < nl > - - - a / actor - server / actor - runtime / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - runtime / src / main / resources / reference . conf < nl > @ @ - 23 , 10 + 23 , 4 @ @ jdbc - journal { < nl > " im . actor . server . event . TSEvent " = actor < nl > " im . actor . server . cqrs . Event " = actor < nl > } < nl > - } < nl > - < nl > - akka - persistence - jdbc { < nl > - slick { < nl > - jndiDbName = " DefaultDatabase " < nl > - } < nl > - } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala < nl > index 43d87b0 . . d1041fd 100644 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala < nl > @ @ - 45 , 7 + 45 , 11 @ @ object ActorConfig { < nl > | } < nl > | } < nl > | < nl > - | akka - persistence - jdbc { < nl > + | jdbc - journal { < nl > + | slick { < nl > + | driver : " slick . driver . PostgresDriver $ $ " < nl > + | jndiDbName : " DefaultDatabase " < nl > + | } < nl > | tables { < nl > | journal { < nl > | tableName = " persistence _ journal " < nl > @ @ - 53 , 6 + 57 , 15 @ @ object ActorConfig { < nl > | deletedTo { < nl > | tableName = " persistence _ deleted _ to " < nl > | } < nl > + | } < nl > + | } < nl > + | < nl > + | jdbc - snapshot - store { < nl > + | slick { < nl > + | driver : " slick . driver . PostgresDriver $ $ " < nl > + | jndiDbName : " DefaultDatabase " < nl > + | } < nl > + | tables { < nl > | snapshot { < nl > | tableName = " persistence _ snapshot " < nl > | } < nl > diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala < nl > index 30f04e5 . . 7eb5d9c 100644 < nl > - - - a / actor - server / project / Dependencies . scala < nl > + + + b / actor - server / project / Dependencies . scala < nl > @ @ - 6 , 7 + 6 , 7 @ @ object Dependencies { < nl > object V { < nl > val actorCommons = " 0 . 0 . 15 " < nl > val actorBotkit = " 1 . 0 . 109 " < nl > - val akka = " 2 . 4 . 5 " < nl > + val akka = " 2 . 4 . 7 " < nl > val akkaHttpJson = " 1 . 5 . 0 " < nl > val cats = " 0 . 3 . 0 " < nl > val circe = " 0 . 2 . 1 " < nl > @ @ - 40 , 7 + 40 , 7 @ @ object Dependencies { < nl > val sprayClient = " io . spray " % % " spray - client " % " 1 . 3 . 3 " < nl > val sprayWebsocket = " com . wandoulabs . akka " % % " spray - websocket " % " 0 . 1 . 4 " < nl > < nl > - val akkaPersistenceJdbc = " com . github . dnvriend " % % " akka - persistence - jdbc " % " 2 . 2 . 23 " < nl > + val akkaPersistenceJdbc = " com . github . dnvriend " % % " akka - persistence - jdbc " % " 2 . 3 . 3 " < nl > val apacheEmail = " org . apache . commons " % " commons - email " % " 1 . 4 " < nl > < nl > val betterFiles = " com . github . pathikrit " % % " better - files " % " 2 . 13 . 0 "
NEAREST DIFF (one line): diff - - git a / actor - server / actor - persist / src / main / resources / reference . conf b / actor - server / actor - persist / src / main / resources / reference . conf < nl > index 7d4a618 . . f0c309e 100644 < nl > - - - a / actor - server / actor - persist / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - persist / src / main / resources / reference . conf < nl > @ @ - 1 , 12 + 1 , 12 @ @ < nl > - actor - server . persist { < nl > - sql { < nl > - url = " jdbc : postgresql : / / localhost : 5432 / actor " < nl > - url = $ { ? JDBC _ URL } < nl > - user = " postgres " < nl > - user = $ { ? JDBC _ USER } < nl > - password = " " < nl > - password = $ { ? JDBC _ PASSWORD } < nl > - driverClassName = " org . postgresql . Driver " < nl > - driverClassName = $ { ? JDBC _ DRIVER _ CLASS _ NAME } < nl > + actor - server { < nl > + services { < nl > + postgresql { < nl > + driverClassName = " org . postgresql . Driver " < nl > + host : " localhost " < nl > + port : 5432 < nl > + db : actor < nl > + user : " postgres " < nl > + password : " " < nl > + } < nl > } < nl > } < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbInit . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbInit . scala < nl > index 8a523bd . . 8014262 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbInit . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbInit . scala < nl > @ @ - 1 , 12 + 1 , 31 @ @ < nl > package im . actor . server . db < nl > < nl > + import scala . util . Try < nl > + < nl > + import com . github . kxbmap . configs . _ < nl > import com . typesafe . config . _ < nl > import slick . driver . PostgresDriver . api . Database < nl > import slick . jdbc . { HikariCPJdbcDataSource , JdbcDataSource } < nl > < nl > trait DbInit { < nl > - def initDs ( sqlConfig : Config ) : HikariCPJdbcDataSource = { < nl > - HikariCPJdbcDataSource . forConfig ( sqlConfig , null , " " ) < nl > + def initDs ( sqlConfig : Config ) : Try [ HikariCPJdbcDataSource ] = { < nl > + for { < nl > + host ← sqlConfig . get [ Try [ String ] ] ( " host " ) < nl > + port ← sqlConfig . get [ Try [ Int ] ] ( " port " ) < nl > + db ← sqlConfig . get [ Try [ String ] ] ( " db " ) < nl > + _ ← sqlConfig . get [ Try [ String ] ] ( " user " ) < nl > + _ ← sqlConfig . get [ Try [ String ] ] ( " password " ) < nl > + } yield { < nl > + val conf = sqlConfig . withFallback ( ConfigFactory . parseString ( < nl > + s " " " < nl > + | { < nl > + | url : " jdbc : postgresql : / / $ { host } : $ { port } / $ { db } " < nl > + | } < nl > + " " " . stripMargin < nl > + ) ) < nl > + < nl > + HikariCPJdbcDataSource . forConfig ( conf , null , " " ) < nl > + } < nl > } < nl > < nl > def initDb ( source : JdbcDataSource ) = < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SqlSpecHelpers . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SqlSpecHelpers . scala < nl > index 1fbc35c . . 6c6a0eb 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SqlSpecHelpers . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SqlSpecHelpers . scala < nl > @ @ - 1 , 20 + 1 , 25 @ @ < nl > package im . actor . server < nl > < nl > + import scala . util . { Failure , Success } < nl > + < nl > import com . typesafe . config . _ < nl > - import slick . jdbc . JdbcDataSource < nl > - import im . actor . server . db . { FlywayInit , DbInit } < nl > import slick . driver . PostgresDriver . api . Database < nl > + import slick . jdbc . JdbcDataSource < nl > + < nl > + import im . actor . server . db . { DbInit , FlywayInit } < nl > < nl > trait SqlSpecHelpers extends FlywayInit with DbInit { < nl > - final val sqlConfig = ConfigFactory . load ( ) . getConfig ( " actor - server . persist . sql " ) < nl > + final val sqlConfig = ConfigFactory . load ( ) . getConfig ( " actor - server . services . postgresql " ) < nl > < nl > def migrateAndInitDb ( ) : ( JdbcDataSource , Database ) = { < nl > - val ds = initDs ( sqlConfig ) < nl > - < nl > - val flyway = initFlyway ( ds . ds ) < nl > - flyway . clean ( ) < nl > - flyway . migrate ( ) < nl > + initDs ( sqlConfig ) match { < nl > + case Success ( ds ) ⇒ < nl > + val flyway = initFlyway ( ds . ds ) < nl > + flyway . clean ( ) < nl > + flyway . migrate ( ) < nl > < nl > - ( ds , initDb ( ds ) ) < nl > + ( ds , initDb ( ds ) ) < nl > + case Failure ( e ) ⇒ throw e < nl > + } < nl > } < nl > } < nl > diff - - git a / actor - server / src / main / scala / im / actor / server / Main . scala b / actor - server / src / main / scala / im / actor / server / Main . scala < nl > index d28c8e3 . . 62ec0f6 100644 < nl > - - - a / actor - server / src / main / scala / im / actor / server / Main . scala < nl > + + + b / actor - server / src / main / scala / im / actor / server / Main . scala < nl > @ @ - 57 , 7 + 57 , 7 @ @ class Main extends Bootable with DbInit with FlywayInit { < nl > val oauth2GmailConfig = OAuth2GmailConfig . fromConfig ( serverConfig . getConfig ( " oauth . v2 . gmail " ) ) < nl > val richMessageConfig = RichMessageConfig . fromConfig ( serverConfig . getConfig ( " enrich " ) ) < nl > val s3Config = serverConfig . getConfig ( " files . s3 " ) < nl > - val sqlConfig = serverConfig . getConfig ( " persist . sql " ) < nl > + val sqlConfig = serverConfig . getConfig ( " services . postgresql " ) < nl > val smsConfig = serverConfig . getConfig ( " sms " ) < nl > implicit val sessionConfig = SessionConfig . fromConfig ( serverConfig . getConfig ( " session " ) ) < nl > < nl > @ @ - 65 , 7 + 65 , 7 @ @ class Main extends Bootable with DbInit with FlywayInit { < nl > implicit val executor = system . dispatcher < nl > implicit val materializer = ActorMaterializer ( ) < nl > < nl > - val ds = initDs ( sqlConfig ) < nl > + val ds = initDs ( sqlConfig ) . toOption . get < nl > implicit val db = initDb ( ds ) < nl > < nl > def startup ( ) = {

TEST DIFF:
diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala 
 index 0b083e0 . . d5971f3 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala 
 @ @ - 61 , 20 + 61 , 6 @ @ object DbExtension extends ExtensionId [ DbExtensionImpl ] with ExtensionIdProvider 
 ext 
 } 
 
 - private def initDs ( sqlConfig : Config ) : Try [ HikariCPJdbcDataSource ] = { 
 - for { 
 - host ← sqlConfig . get [ Try [ String ] ] ( " host " ) 
 - port ← sqlConfig . get [ Try [ Int ] ] ( " port " ) 
 - db ← sqlConfig . get [ Try [ String ] ] ( " db " ) 
 - _ ← sqlConfig . get [ Try [ String ] ] ( " user " ) 
 - _ ← sqlConfig . get [ Try [ String ] ] ( " password " ) 
 - } yield HikariCPJdbcDataSource . forConfig ( sqlConfig . withFallback ( ConfigFactory . parseString ( 
 - s " " " 
 - | url : " jdbc : postgresql : / / " $ { host } " : " $ { port } " / " $ { db } 
 - " " " . stripMargin 
 - ) ) . resolve ( ) , null , " main " , getClass . getClassLoader ) 
 - } 
 - 
 private def initDb ( appConfig : Config ) : Database = { 
 val sqlConfig = appConfig . getConfig ( " services . postgresql " ) 
 
 diff - - git a / actor - server / actor - runtime / src / main / resources / reference . conf b / actor - server / actor - runtime / src / main / resources / reference . conf 
 index a09f074 . . d1de692 100644 
 - - - a / actor - server / actor - runtime / src / main / resources / reference . conf 
 + + + b / actor - server / actor - runtime / src / main / resources / reference . conf 
 @ @ - 23 , 10 + 23 , 4 @ @ jdbc - journal { 
 " im . actor . server . event . TSEvent " = actor 
 " im . actor . server . cqrs . Event " = actor 
 } 
 - } 
 - 
 - akka - persistence - jdbc { 
 - slick { 
 - jndiDbName = " DefaultDatabase " 
 - } 
 - } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala 
 index 43d87b0 . . d1041fd 100644 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala 
 @ @ - 45 , 7 + 45 , 11 @ @ object ActorConfig { 
 | } 
 | } 
 | 
 - | akka - persistence - jdbc { 
 + | jdbc - journal { 
 + | slick { 
 + | driver : " slick . driver . PostgresDriver $ $ " 
 + | jndiDbName : " DefaultDatabase " 
 + | } 
 | tables { 
 | journal { 
 | tableName = " persistence _ journal " 
 @ @ - 53 , 6 + 57 , 15 @ @ object ActorConfig { 
 | deletedTo { 
 | tableName = " persistence _ deleted _ to " 
 | } 
 + | } 
 + | } 
 + | 
 + | jdbc - snapshot - store { 
 + | slick { 
 + | driver : " slick . driver . PostgresDriver $ $ " 
 + | jndiDbName : " DefaultDatabase " 
 + | } 
 + | tables { 
 | snapshot { 
 | tableName = " persistence _ snapshot " 
 | } 
 diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala 
 index 30f04e5 . . 7eb5d9c 100644 
 - - - a / actor - server / project / Dependencies . scala 
 + + + b / actor - server / project / Dependencies . scala 
 @ @ - 6 , 7 + 6 , 7 @ @ object Dependencies { 
 object V { 
 val actorCommons = " 0 . 0 . 15 " 
 val actorBotkit = " 1 . 0 . 109 " 
 - val akka = " 2 . 4 . 5 " 
 + val akka = " 2 . 4 . 7 " 
 val akkaHttpJson = " 1 . 5 . 0 " 
 val cats = " 0 . 3 . 0 " 
 val circe = " 0 . 2 . 1 " 
 @ @ - 40 , 7 + 40 , 7 @ @ object Dependencies { 
 val sprayClient = " io . spray " % % " spray - client " % " 1 . 3 . 3 " 
 val sprayWebsocket = " com . wandoulabs . akka " % % " spray - websocket " % " 0 . 1 . 4 " 
 
 - val akkaPersistenceJdbc = " com . github . dnvriend " % % " akka - persistence - jdbc " % " 2 . 2 . 23 " 
 + val akkaPersistenceJdbc = " com . github . dnvriend " % % " akka - persistence - jdbc " % " 2 . 3 . 3 " 
 val apacheEmail = " org . apache . commons " % " commons - email " % " 1 . 4 " 
 
 val betterFiles = " com . github . pathikrit " % % " better - files " % " 2 . 13 . 0 "

NEAREST DIFF:
diff - - git a / actor - server / actor - persist / src / main / resources / reference . conf b / actor - server / actor - persist / src / main / resources / reference . conf 
 index 7d4a618 . . f0c309e 100644 
 - - - a / actor - server / actor - persist / src / main / resources / reference . conf 
 + + + b / actor - server / actor - persist / src / main / resources / reference . conf 
 @ @ - 1 , 12 + 1 , 12 @ @ 
 - actor - server . persist { 
 - sql { 
 - url = " jdbc : postgresql : / / localhost : 5432 / actor " 
 - url = $ { ? JDBC _ URL } 
 - user = " postgres " 
 - user = $ { ? JDBC _ USER } 
 - password = " " 
 - password = $ { ? JDBC _ PASSWORD } 
 - driverClassName = " org . postgresql . Driver " 
 - driverClassName = $ { ? JDBC _ DRIVER _ CLASS _ NAME } 
 + actor - server { 
 + services { 
 + postgresql { 
 + driverClassName = " org . postgresql . Driver " 
 + host : " localhost " 
 + port : 5432 
 + db : actor 
 + user : " postgres " 
 + password : " " 
 + } 
 } 
 } 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbInit . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbInit . scala 
 index 8a523bd . . 8014262 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbInit . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbInit . scala 
 @ @ - 1 , 12 + 1 , 31 @ @ 
 package im . actor . server . db 
 
 + import scala . util . Try 
 + 
 + import com . github . kxbmap . configs . _ 
 import com . typesafe . config . _ 
 import slick . driver . PostgresDriver . api . Database 
 import slick . jdbc . { HikariCPJdbcDataSource , JdbcDataSource } 
 
 trait DbInit { 
 - def initDs ( sqlConfig : Config ) : HikariCPJdbcDataSource = { 
 - HikariCPJdbcDataSource . forConfig ( sqlConfig , null , " " ) 
 + def initDs ( sqlConfig : Config ) : Try [ HikariCPJdbcDataSource ] = { 
 + for { 
 + host ← sqlConfig . get [ Try [ String ] ] ( " host " ) 
 + port ← sqlConfig . get [ Try [ Int ] ] ( " port " ) 
 + db ← sqlConfig . get [ Try [ String ] ] ( " db " ) 
 + _ ← sqlConfig . get [ Try [ String ] ] ( " user " ) 
 + _ ← sqlConfig . get [ Try [ String ] ] ( " password " ) 
 + } yield { 
 + val conf = sqlConfig . withFallback ( ConfigFactory . parseString ( 
 + s " " " 
 + | { 
 + | url : " jdbc : postgresql : / / $ { host } : $ { port } / $ { db } " 
 + | } 
 + " " " . stripMargin 
 + ) ) 
 + 
 + HikariCPJdbcDataSource . forConfig ( conf , null , " " ) 
 + } 
 } 
 
 def initDb ( source : JdbcDataSource ) = 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SqlSpecHelpers . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SqlSpecHelpers . scala 
 index 1fbc35c . . 6c6a0eb 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SqlSpecHelpers . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SqlSpecHelpers . scala 
 @ @ - 1 , 20 + 1 , 25 @ @ 
 package im . actor . server 
 
 + import scala . util . { Failure , Success } 
 + 
 import com . typesafe . config . _ 
 - import slick . jdbc . JdbcDataSource 
 - import im . actor . server . db . { FlywayInit , DbInit } 
 import slick . driver . PostgresDriver . api . Database 
 + import slick . jdbc . JdbcDataSource 
 + 
 + import im . actor . server . db . { DbInit , FlywayInit } 
 
 trait SqlSpecHelpers extends FlywayInit with DbInit { 
 - final val sqlConfig = ConfigFactory . load ( ) . getConfig ( " actor - server . persist . sql " ) 
 + final val sqlConfig = ConfigFactory . load ( ) . getConfig ( " actor - server . services . postgresql " ) 
 
 def migrateAndInitDb ( ) : ( JdbcDataSource , Database ) = { 
 - val ds = initDs ( sqlConfig ) 
 - 
 - val flyway = initFlyway ( ds . ds ) 
 - flyway . clean ( ) 
 - flyway . migrate ( ) 
 + initDs ( sqlConfig ) match { 
 + case Success ( ds ) ⇒ 
 + val flyway = initFlyway ( ds . ds ) 
 + flyway . clean ( ) 
 + flyway . migrate ( ) 
 
 - ( ds , initDb ( ds ) ) 
 + ( ds , initDb ( ds ) ) 
 + case Failure ( e ) ⇒ throw e 
 + } 
 } 
 } 
 diff - - git a / actor - server / src / main / scala / im / actor / server / Main . scala b / actor - server / src / main / scala / im / actor / server / Main . scala 
 index d28c8e3 . . 62ec0f6 100644 
 - - - a / actor - server / src / main / scala / im / actor / server / Main . scala 
 + + + b / actor - server / src / main / scala / im / actor / server / Main . scala 
 @ @ - 57 , 7 + 57 , 7 @ @ class Main extends Bootable with DbInit with FlywayInit { 
 val oauth2GmailConfig = OAuth2GmailConfig . fromConfig ( serverConfig . getConfig ( " oauth . v2 . gmail " ) ) 
 val richMessageConfig = RichMessageConfig . fromConfig ( serverConfig . getConfig ( " enrich " ) ) 
 val s3Config = serverConfig . getConfig ( " files . s3 " ) 
 - val sqlConfig = serverConfig . getConfig ( " persist . sql " ) 
 + val sqlConfig = serverConfig . getConfig ( " services . postgresql " ) 
 val smsConfig = serverConfig . getConfig ( " sms " ) 
 implicit val sessionConfig = SessionConfig . fromConfig ( serverConfig . getConfig ( " session " ) ) 
 
 @ @ - 65 , 7 + 65 , 7 @ @ class Main extends Bootable with DbInit with FlywayInit { 
 implicit val executor = system . dispatcher 
 implicit val materializer = ActorMaterializer ( ) 
 
 - val ds = initDs ( sqlConfig ) 
 + val ds = initDs ( sqlConfig ) . toOption . get 
 implicit val db = initDb ( ds ) 
 
 def startup ( ) = {
