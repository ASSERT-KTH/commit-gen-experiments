BLEU SCORE: 0.26970156334232565

TEST MSG: fix ( iOS ) : Fixing stickers button on ipad and attaches menu
GENERATED MSG: fix ( iOS ) : fix upload video and save point for new attachment menu

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift < nl > index 10ee57a . . 4386865 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift < nl > @ @ - 5 , 145 + 5 , 109 @ @ < nl > import UIKit < nl > import Photos < nl > < nl > - let screenWidth = UIScreen . mainScreen ( ) . bounds . size . width < nl > - let screenHeigth = UIScreen . mainScreen ( ) . bounds . size . height < nl > + public protocol AAConvActionSheetDelegate { < nl > + func actionSheetPickedImages ( images : [ UIImage ] ) < nl > + func actionSheetPickCamera ( ) < nl > + func actionSheetPickGallery ( ) < nl > + func actionSheetPickDocument ( ) < nl > + func actionSheetPickLocation ( ) < nl > + func actionSheetPickContact ( ) < nl > + } < nl > < nl > - class AAConvActionSheet : UIView { < nl > - < nl > - var sheetView : UIView ! < nl > - var backgroundView : UIView ! < nl > + public class AAConvActionSheet : UIView , AAThumbnailViewDelegate { < nl > < nl > - var btnCamera : UIButton ! < nl > - var btnLibrary : UIButton ! < nl > - var btnDocuments : UIButton ! < nl > - var btnLocation : UIButton ! < nl > - var btnContact : UIButton ! < nl > - var btnCancel : UIButton ! < nl > + public var delegate : AAConvActionSheetDelegate ? < nl > < nl > - var thumbnailView : AAThumbnailView ! < nl > + private let sheetView = UIView ( ) < nl > + private let backgroundView = UIView ( ) < nl > < nl > - weak var weakSuper : ConversationViewController ! < nl > + private var thumbnailView : AAThumbnailView ! < nl > + private var btnCamera = UIButton ( type : UIButtonType . System ) < nl > + private var btnLibrary = UIButton ( type : UIButtonType . System ) < nl > + private var btnDocuments = UIButton ( type : UIButtonType . System ) < nl > + private var btnLocation = UIButton ( type : UIButtonType . System ) < nl > + private var btnContact = UIButton ( type : UIButtonType . System ) < nl > + private var btnCancel = UIButton ( type : UIButtonType . System ) < nl > < nl > - var superWidth : CGFloat ! < nl > + private weak var presentedInController : UIViewController ! = nil < nl > < nl > - init ( maxSelected : Int , weakSuperIn : ConversationViewController ) { < nl > + public init ( ) { < nl > super . init ( frame : CGRectZero ) < nl > < nl > - superWidth = weakSuperIn . view . frame . size . width < nl > - self . setupAllViews ( ) < nl > - self . configUI ( ) < nl > - self . weakSuper = weakSuperIn < nl > - < nl > + self . backgroundColor = UIColor . clearColor ( ) < nl > } < nl > < nl > - required init ? ( coder aDecoder : NSCoder ) { < nl > + public required init ? ( coder aDecoder : NSCoder ) { < nl > fatalError ( " init ( coder : ) has not been implemented " ) < nl > } < nl > < nl > - / / / / / < nl > - < nl > - func configUI ( ) { < nl > + public func presentInController ( controller : UIViewController ) { < nl > < nl > - self . alpha = 0 < nl > - self . frame = CGRectMake ( 0 , 0 , screenWidth , screenHeigth ) < nl > - self . backgroundColor = UIColor . clearColor ( ) < nl > + if controller . navigationController ! = nil { < nl > + self . presentedInController = controller . navigationController < nl > + } else { < nl > + self . presentedInController = controller < nl > + } < nl > < nl > - } < nl > - < nl > - < nl > - deinit { < nl > + if let navigation = presentedInController as ? UINavigationController { < nl > + navigation . interactivePopGestureRecognizer ? . enabled = false < nl > + } else if let navigation = presentedInController . navigationController { < nl > + navigation . interactivePopGestureRecognizer ? . enabled = false < nl > + } < nl > < nl > - self . weakSuper = nil < nl > + frame = presentedInController . view . bounds < nl > + presentedInController . view . addSubview ( self ) < nl > < nl > - } < nl > - < nl > - < nl > - func showAnimation ( ) { < nl > + setupAllViews ( ) < nl > < nl > - self . alpha = 1 < nl > + self . sheetView . frame = CGRectMake ( 0 , self . frame . height , self . frame . width , 400 ) < nl > self . backgroundView . alpha = 0 < nl > - < nl > - var frame = self . sheetView . frame < nl > - frame . origin . y = screenHeigth - 400 < nl > - < nl > - self . weakSuper . navigationController ! . interactivePopGestureRecognizer ! . enabled = false < nl > - < nl > - if ( self . thumbnailView = = nil ) { < nl > - < nl > - self . thumbnailView = AAThumbnailView ( ) < nl > - self . sheetView . addSubview ( self . thumbnailView ) < nl > - self . thumbnailView . frame = CGRectMake ( 0 , 5 , superWidth , 90 ) < nl > - self . thumbnailView . bindedConvSheet = self < nl > - < nl > + dispatchOnUi { ( ) - > Void in < nl > + UIView . animateWithDuration ( 0 . 4 , delay : 0 . 0 , usingSpringWithDamping : 0 . 7 , < nl > + initialSpringVelocity : 0 . 6 , options : . CurveEaseInOut , animations : { < nl > + self . sheetView . frame = CGRectMake ( 0 , self . frame . height - 400 , self . frame . width , 400 ) < nl > + self . backgroundView . alpha = 1 < nl > + } , completion : nil ) < nl > } < nl > - < nl > - self . thumbnailView . open ( ) < nl > - < nl > - UIView . animateWithDuration ( 0 . 4 , delay : 0 . 0 , usingSpringWithDamping : 0 . 7 , initialSpringVelocity : 0 . 6 , options : UIViewAnimationOptions . CurveEaseInOut , animations : { ( ) - > Void in < nl > - < nl > - self . sheetView . frame = frame < nl > - self . backgroundView . alpha = 1 < nl > - < nl > - < nl > - } , completion : { ( complite ) - > Void in < nl > - < nl > - / / animation complite < nl > - < nl > - } ) < nl > - < nl > - < nl > } < nl > < nl > - func cancelAnimation ( ) { < nl > - < nl > - < nl > - var frame = self . sheetView . frame < nl > - frame . origin . y = screenHeigth < nl > + public func dismiss ( ) { < nl > + var nextFrame = self . sheetView . frame < nl > + nextFrame . origin . y = self . presentedInController . view . height < nl > + < nl > + if let navigation = presentedInController as ? UINavigationController { < nl > + navigation . interactivePopGestureRecognizer ? . enabled = true < nl > + } else if let navigation = presentedInController . navigationController { < nl > + navigation . interactivePopGestureRecognizer ? . enabled = true < nl > + } < nl > < nl > - self . weakSuper . rightButton . layoutIfNeeded ( ) < nl > UIView . animateWithDuration ( 0 . 25 , animations : { ( ) - > Void in < nl > - self . weakSuper . rightButton . layoutIfNeeded ( ) < nl > - self . sheetView . frame = frame < nl > - < nl > - self . backgroundView . alpha = 0 < nl > - < nl > - } ) { ( bool ) - > Void in < nl > - < nl > - self . weakSuper . navigationController ! . interactivePopGestureRecognizer ! . enabled = true < nl > - < nl > - self . alpha = 0 < nl > - < nl > - self . thumbnailView . selectedAssets = [ PHAsset ] ( ) < nl > - self . thumbnailView . reloadView ( ) < nl > - self . updateSelectedPhotos ( ) < nl > - < nl > - < nl > + self . sheetView . frame = nextFrame < nl > + self . backgroundView . alpha = 0 } ) { ( bool ) - > Void in < nl > + self . removeFromSuperview ( ) < nl > } < nl > - < nl > } < nl > - < nl > - override func touchesBegan ( touches : Set < UITouch > , withEvent event : UIEvent ? ) { < nl > - cancelAnimation ( ) < nl > - } < nl > - < nl > - func setupAllViews ( ) { < nl > + < nl > + private func setupAllViews ( ) { < nl > < nl > < nl > / / sheet view < nl > < nl > - self . backgroundView = UIView ( ) < nl > - self . backgroundView . frame = CGRectMake ( 0 , 0 , screenWidth , screenHeigth ) < nl > - self . backgroundView . backgroundColor = UIColor . blackColor ( ) . colorWithAlphaComponent ( 0 . 7 ) < nl > - self . backgroundView . alpha = 0 < nl > + let superWidth = presentedInController . view . width < nl > + let superHeight = presentedInController . view . height < nl > < nl > + self . backgroundView . frame = presentedInController . view . bounds < nl > + self . backgroundView . backgroundColor = UIColor . alphaBlack ( 0 . 7 ) < nl > + self . backgroundView . alpha = 0 < nl > self . addSubview ( self . backgroundView ) < nl > < nl > - let frame = CGRectMake ( 0 , screenHeigth , screenWidth , 1000 ) < nl > - self . sheetView = UIView ( frame : frame ) < nl > + self . sheetView . frame = CGRectMake ( 0 , superHeight - 400 , superWidth , 400 ) < nl > self . sheetView . backgroundColor = UIColor . whiteColor ( ) < nl > - < nl > self . addSubview ( self . sheetView ) < nl > < nl > + self . thumbnailView = AAThumbnailView ( frame : CGRectMake ( 0 , 5 , superWidth , 90 ) ) < nl > + self . thumbnailView . delegate = self < nl > + self . thumbnailView . open ( ) < nl > self . btnCamera = UIButton ( type : UIButtonType . System ) < nl > self . btnLibrary = UIButton ( type : UIButtonType . System ) < nl > self . btnDocuments = UIButton ( type : UIButtonType . System ) < nl > @ @ - 177 , 9 + 141 , 9 @ @ class AAConvActionSheet : UIView { < nl > self . sheetView . addSubview ( self . btnLocation ) < nl > self . sheetView . addSubview ( self . btnContact ) < nl > self . sheetView . addSubview ( self . btnCancel ) < nl > - / / self . sheetView . addSubview ( self . thumbnailView ) < nl > + self . sheetView . addSubview ( self . thumbnailView ) < nl > < nl > - / / self . thumbnailView . frame = CGRectMake ( 0 , 5 , screenWidth , 90 ) < nl > + self . thumbnailView . frame = CGRectMake ( 0 , 5 , superWidth , 90 ) < nl > self . btnCamera . frame = CGRectMake ( 0 , 100 , superWidth , 50 ) < nl > self . btnLibrary . frame = CGRectMake ( 0 , 150 , superWidth , 50 ) < nl > self . btnDocuments . frame = CGRectMake ( 0 , 200 , superWidth , 50 ) < nl > @ @ - 189 , 17 + 153 , 17 @ @ class AAConvActionSheet : UIView { < nl > < nl > / / separators < nl > < nl > - let spearator1 = UIView ( frame : CGRectMake ( 0 , 99 , screenWidth , 1 ) ) < nl > + let spearator1 = UIView ( frame : CGRectMake ( 0 , 99 , superWidth , 1 ) ) < nl > spearator1 . backgroundColor = UIColor ( red : 223 . 9 / 255 . 0 , green : 223 . 9 / 255 . 0 , blue : 223 . 9 / 255 . 0 , alpha : 0 . 6 ) < nl > - let spearator2 = UIView ( frame : CGRectMake ( 10 , 149 , screenWidth - 20 , 1 ) ) < nl > + let spearator2 = UIView ( frame : CGRectMake ( 10 , 149 , superWidth - 20 , 1 ) ) < nl > spearator2 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) < nl > - let spearator3 = UIView ( frame : CGRectMake ( 10 , 199 , screenWidth - 20 , 1 ) ) < nl > + let spearator3 = UIView ( frame : CGRectMake ( 10 , 199 , superWidth - 20 , 1 ) ) < nl > spearator3 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) < nl > - let spearator4 = UIView ( frame : CGRectMake ( 10 , 249 , screenWidth - 20 , 1 ) ) < nl > + let spearator4 = UIView ( frame : CGRectMake ( 10 , 249 , superWidth - 20 , 1 ) ) < nl > spearator4 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) < nl > - let spearator5 = UIView ( frame : CGRectMake ( 10 , 299 , screenWidth - 20 , 1 ) ) < nl > + let spearator5 = UIView ( frame : CGRectMake ( 10 , 299 , superWidth - 20 , 1 ) ) < nl > spearator5 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) < nl > - let spearator6 = UIView ( frame : CGRectMake ( 10 , 349 , screenWidth - 20 , 1 ) ) < nl > + let spearator6 = UIView ( frame : CGRectMake ( 10 , 349 , superWidth - 20 , 1 ) ) < nl > spearator6 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) < nl > < nl > / / add separatos as subview < nl > @ @ - 228 , 64 + 192 , 26 @ @ class AAConvActionSheet : UIView { < nl > self . btnLocation . addTarget ( self , action : " btnLocationAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > self . btnContact . addTarget ( self , action : " btnContactAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > self . btnCancel . addTarget ( self , action : " btnCloseAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > - < nl > - / / bineded self < nl > - < nl > - / / self . thumbnailView . bindedConvSheet = self < nl > - < nl > - } < nl > - < nl > - / / MARK : - Button ' s actions < nl > - < nl > - func btnCameraAction ( ) { < nl > - cancelAnimation ( ) < nl > - self . weakSuper . pickImage ( . Camera ) < nl > } < nl > < nl > - func btnLibraryAction ( ) { < nl > - cancelAnimation ( ) < nl > - self . weakSuper . pickImage ( . PhotoLibrary ) < nl > - } < nl > - < nl > - func btnDocumentAction ( ) { < nl > - cancelAnimation ( ) < nl > - < nl > - if ( NSFileManager . defaultManager ( ) . ubiquityIdentityToken ! = nil ) { < nl > - self . weakSuper . pickDocument ( ) < nl > - } < nl > - < nl > - } < nl > - < nl > - func btnLocationAction ( ) { < nl > - cancelAnimation ( ) < nl > - self . weakSuper . pickLocation ( ) < nl > - } < nl > - < nl > - func btnContactAction ( ) { < nl > - cancelAnimation ( ) < nl > - self . weakSuper . pickContact ( ) < nl > - } < nl > - < nl > - func btnCloseAction ( ) { < nl > - cancelAnimation ( ) < nl > - } < nl > - < nl > - func updateSelectedPhotos ( ) { < nl > - < nl > - if self . thumbnailView . selectedAssets . count > 0 { < nl > + public func thumbnailSelectedUpdated ( selectedAssets : [ PHAsset ] ) { < nl > + if selectedAssets . count > 0 { < nl > < nl > - var sendString : String ! < nl > - < nl > - if self . thumbnailView . selectedAssets . count = = 1 { < nl > - sendString = AALocalized ( " AttachmentsSendPhoto " ) . replace ( " { count } " , dest : " \ ( self . thumbnailView . selectedAssets . count ) " ) < nl > + var sendString : String < nl > + if selectedAssets . count = = 1 { < nl > + sendString = AALocalized ( " AttachmentsSendPhoto " ) . replace ( " { count } " , dest : " \ ( selectedAssets . count ) " ) < nl > } else { < nl > - sendString = AALocalized ( " AttachmentsSendPhotos " ) . replace ( " { count } " , dest : " \ ( self . thumbnailView . selectedAssets . count ) " ) < nl > + sendString = AALocalized ( " AttachmentsSendPhotos " ) . replace ( " { count } " , dest : " \ ( selectedAssets . count ) " ) < nl > } < nl > < nl > + / / < nl > / / remove target < nl > + / / < nl > self . btnCamera . removeTarget ( self , action : " btnCameraAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > < nl > + / / < nl > / / add new target < nl > + / / < nl > self . btnCamera . setTitle ( sendString , forState : UIControlState . Normal ) < nl > self . btnCamera . addTarget ( self , action : " sendPhotos " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > self . btnCamera . titleLabel ? . font = UIFont ( name : " HelveticaNeue - Medium " , size : 17 ) < nl > @ @ - 293 , 45 + 219 , 62 @ @ class AAConvActionSheet : UIView { < nl > < nl > } else { < nl > < nl > + / / < nl > / / remove target < nl > + / / < nl > self . btnCamera . removeTarget ( self , action : " sendPhotos " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > < nl > - < nl > + / / < nl > / / add new target < nl > + / / < nl > self . btnCamera . setTitle ( AALocalized ( " PhotoCamera " ) , forState : UIControlState . Normal ) < nl > self . btnCamera . addTarget ( self , action : " btnCameraAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > self . btnCamera . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) < nl > < nl > } < nl > - < nl > } < nl > + < nl > + / / < nl > + / / Actions < nl > + / / < nl > < nl > func sendPhotos ( ) { < nl > - < nl > - self . cancelAnimation ( ) < nl > - < nl > - let priority = DISPATCH _ QUEUE _ PRIORITY _ DEFAULT < nl > - dispatch _ async ( dispatch _ get _ global _ queue ( priority , 0 ) ) { < nl > - < nl > - self . thumbnailView . getSelectedAsImages ( { ( images ) - > ( ) in < nl > - let arrayModelsForSend = images < nl > - self . thumbnailView . selectedAssets = [ PHAsset ] ( ) < nl > - < nl > - for ( _ , image ) in arrayModelsForSend . enumerate ( ) { < nl > - < nl > - self . weakSuper . sendImageFromActionSheet ( image ) < nl > - < nl > - } < nl > - < nl > - dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { < nl > - self . updateSelectedPhotos ( ) < nl > - } < nl > - } ) < nl > - < nl > - < nl > + self . thumbnailView . getSelectedAsImages { ( images ) - > ( ) in < nl > + self . delegate ? . actionSheetPickedImages ( images ) < nl > } < nl > - < nl > + dismiss ( ) < nl > } < nl > - < nl > < nl > + func btnCameraAction ( ) { < nl > + delegate ? . actionSheetPickCamera ( ) < nl > + dismiss ( ) < nl > + } < nl > + < nl > + func btnLibraryAction ( ) { < nl > + delegate ? . actionSheetPickGallery ( ) < nl > + dismiss ( ) < nl > + } < nl > + < nl > + func btnDocumentAction ( ) { < nl > + delegate ? . actionSheetPickDocument ( ) < nl > + dismiss ( ) < nl > + } < nl > + < nl > + func btnLocationAction ( ) { < nl > + delegate ? . actionSheetPickLocation ( ) < nl > + dismiss ( ) < nl > + } < nl > + < nl > + func btnContactAction ( ) { < nl > + delegate ? . actionSheetPickContact ( ) < nl > + dismiss ( ) < nl > + } < nl > + < nl > + func btnCloseAction ( ) { < nl > + dismiss ( ) < nl > + } < nl > + < nl > + public override func touchesBegan ( touches : Set < UITouch > , withEvent event : UIEvent ? ) { < nl > + dismiss ( ) < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift < nl > index 5338598 . . 0469978 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift < nl > @ @ - 11 , 19 + 11 , 26 @ @ public enum ImagePickerMediaType { < nl > case ImageAndVideo < nl > } < nl > < nl > - class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSource { < nl > + public protocol AAThumbnailViewDelegate { < nl > + func thumbnailSelectedUpdated ( selectedAssets : [ PHAsset ] ) < nl > + } < nl > + < nl > + public class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSource { < nl > < nl > - var collectionView : UICollectionView ! < nl > - weak var bindedConvSheet : AAConvActionSheet ! < nl > - let mediaType : ImagePickerMediaType = ImagePickerMediaType . Image < nl > + public var delegate : AAThumbnailViewDelegate ? < nl > + < nl > + private var collectionView : UICollectionView ! < nl > + private let mediaType : ImagePickerMediaType = ImagePickerMediaType . Image < nl > < nl > private var assets = [ PHAsset ] ( ) < nl > - var selectedAssets = [ PHAsset ] ( ) < nl > + private var selectedAssets = [ PHAsset ] ( ) < nl > private var imageManager : PHCachingImageManager ! < nl > < nl > private let minimumPreviewHeight : CGFloat = 90 < nl > private var maximumPreviewHeight : CGFloat = 90 < nl > < nl > + private let previewCollectionViewInset : CGFloat = 5 < nl > + < nl > private lazy var requestOptions : PHImageRequestOptions = { < nl > let options = PHImageRequestOptions ( ) < nl > options . deliveryMode = . HighQualityFormat < nl > @ @ - 32 , 23 + 39 , 20 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > return options < nl > } ( ) < nl > < nl > - private let previewCollectionViewInset : CGFloat = 5 < nl > - < nl > < nl > - override init ( frame : CGRect ) { < nl > + public override init ( frame : CGRect ) { < nl > super . init ( frame : frame ) < nl > < nl > self . collectionViewSetup ( ) < nl > - < nl > } < nl > < nl > - required init ? ( coder aDecoder : NSCoder ) { < nl > + public required init ? ( coder aDecoder : NSCoder ) { < nl > fatalError ( " init ( coder : ) has not been implemented " ) < nl > } < nl > < nl > / / / < nl > < nl > - func open ( ) { < nl > + public func open ( ) { < nl > < nl > dispatchBackground { ( ) - > Void in < nl > < nl > @ @ - 162 , 15 + 166 , 15 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > < nl > / / / collection view delegate < nl > < nl > - func numberOfSectionsInCollectionView ( collectionView : UICollectionView ) - > Int { < nl > + public func numberOfSectionsInCollectionView ( collectionView : UICollectionView ) - > Int { < nl > return 1 < nl > } < nl > < nl > - func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) - > Int { < nl > + public func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) - > Int { < nl > return self . assets . count < nl > } < nl > < nl > - func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) - > UICollectionViewCell { < nl > + public func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) - > UICollectionViewCell { < nl > < nl > let cell = self . collectionView . dequeueReusableCellWithReuseIdentifier ( " AAThumbnailCollectionCell " , forIndexPath : indexPath ) as ! AAThumbnailCollectionCell < nl > < nl > @ @ - 215 , 17 + 219 , 16 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > < nl > / / / < nl > < nl > - func reloadView ( ) { < nl > + public func reloadView ( ) { < nl > self . collectionView . reloadData ( ) < nl > } < nl > < nl > - func collectionViewSetup ( ) { < nl > + public func collectionViewSetup ( ) { < nl > < nl > let flowLayout = UICollectionViewFlowLayout ( ) < nl > flowLayout . scrollDirection = . Horizontal < nl > flowLayout . minimumLineSpacing = 4 < nl > flowLayout . sectionInset = UIEdgeInsetsMake ( 5 . 0 , 4 . 0 , 5 . 0 , 4 . 0 ) < nl > - < nl > flowLayout . itemSize = CGSizeMake ( 90 , 90 ) < nl > < nl > self . collectionView = UICollectionView ( frame : self . bounds , collectionViewLayout : flowLayout ) < nl > @ @ - 233 , 15 + 236 , 11 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > self . collectionView . showsHorizontalScrollIndicator = false < nl > self . collectionView . delegate = self < nl > self . collectionView . dataSource = self < nl > - self . collectionView . frame = CGRectMake ( 0 , 0 , screenWidth , 90 ) < nl > - < nl > self . collectionView . registerClass ( AAThumbnailCollectionCell . self , forCellWithReuseIdentifier : " AAThumbnailCollectionCell " ) < nl > - < nl > self . addSubview ( self . collectionView ) < nl > - < nl > } < nl > < nl > - func imageByCroppingImage ( image : UIImage , toSize : CGSize ) - > UIImage { < nl > + public func imageByCroppingImage ( image : UIImage , toSize : CGSize ) - > UIImage { < nl > < nl > let refWidth = CGImageGetWidth ( image . CGImage ) < nl > let refHeight = CGImageGetHeight ( image . CGImage ) < nl > @ @ - 254 , 31 + 253 , 28 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > < nl > let cropped = UIImage ( CGImage : imageRef , scale : 0 . 0 , orientation : UIImageOrientation . Up ) < nl > < nl > - return cropped ; < nl > + return cropped < nl > } < nl > < nl > - func addSelectedModel ( model : PHAsset ) { < nl > - < nl > + public func addSelectedModel ( model : PHAsset ) { < nl > self . selectedAssets . append ( model ) < nl > - self . bindedConvSheet . updateSelectedPhotos ( ) < nl > - < nl > + self . delegate ? . thumbnailSelectedUpdated ( self . selectedAssets ) < nl > } < nl > < nl > - func removeSelectedModel ( model : PHAsset ) { < nl > + public func removeSelectedModel ( model : PHAsset ) { < nl > if let index = self . selectedAssets . indexOf ( model ) { < nl > self . selectedAssets . removeAtIndex ( index ) < nl > - self . bindedConvSheet . updateSelectedPhotos ( ) < nl > + self . delegate ? . thumbnailSelectedUpdated ( self . selectedAssets ) < nl > } < nl > } < nl > < nl > - func getSelectedAsImages ( completion : ( images : [ UIImage ] ) - > ( ) ) { < nl > + public func getSelectedAsImages ( completion : ( images : [ UIImage ] ) - > ( ) ) { < nl > < nl > let arrayModelsForSend = self . selectedAssets < nl > < nl > var compliedArray = [ UIImage ] ( ) < nl > < nl > for ( _ , model ) in arrayModelsForSend . enumerate ( ) { < nl > - < nl > self . imageManager . requestImageDataForAsset ( model , options : requestOptions , resultHandler : { ( data , _ , _ , _ ) - > Void in < nl > if data ! = nil { < nl > compliedArray . append ( UIImage ( data : data ! ) ! ) < nl > @ @ - 287 , 11 + 283 , 11 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > } < nl > } < nl > } ) < nl > - < nl > } < nl > - < nl > } < nl > < nl > - < nl > - < nl > + public func dismiss ( ) { < nl > + self . selectedAssets = [ ] < nl > + self . reloadView ( ) < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > index a32e35d . . 5d473f1 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > @ @ - 9 , 8 + 9 , 16 @ @ import AddressBook < nl > import AddressBookUI < nl > import SVProgressHUD < nl > < nl > - public class ConversationViewController : AAConversationContentController , UIDocumentMenuDelegate , UIDocumentPickerDelegate , UIImagePickerControllerDelegate , UINavigationControllerDelegate , AALocationPickerControllerDelegate , < nl > - ABPeoplePickerNavigationControllerDelegate , AAAudioRecorderDelegate { < nl > + public class ConversationViewController : < nl > + AAConversationContentController , < nl > + UIDocumentMenuDelegate , < nl > + UIDocumentPickerDelegate , < nl > + UIImagePickerControllerDelegate , < nl > + UINavigationControllerDelegate , < nl > + AALocationPickerControllerDelegate , < nl > + ABPeoplePickerNavigationControllerDelegate , < nl > + AAAudioRecorderDelegate , < nl > + AAConvActionSheetDelegate { < nl > < nl > / / Data binder < nl > private let binder = AABinder ( ) < nl > @ @ - 21 , 33 + 29 , 44 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > let content : ACPage ! < nl > var appStyle : ActorStyle { get { return ActorSDK . sharedActor ( ) . style } } < nl > < nl > - / / States < nl > - < nl > - private var micOn : Bool ! = true < nl > < nl > + / / < nl > / / Views < nl > + / / < nl > + < nl > private let titleView : UILabel = UILabel ( ) < nl > private let subtitleView : UILabel = UILabel ( ) < nl > private let navigationView : UIView = UIView ( ) < nl > private let avatarView = AABarAvatarView ( frameSize : 36 , type : . Rounded ) < nl > private let backgroundView = UIImageView ( ) < nl > private var audioButton : UIButton = UIButton ( ) < nl > - private var actionSheet : AAConvActionSheet ! < nl > private var voiceRecorderView : AAVoiceRecorderView ! < nl > < nl > + < nl > + / / < nl > / / Stickers < nl > + / / < nl > < nl > private var stickersView : AAStickersView ! < nl > private var stickersButton : UIButton ! < nl > private var stickersOpen = false < nl > < nl > - / / Mode < nl > < nl > - private var textMode : Bool ! < nl > + / / < nl > + / / Audio Recorder < nl > + / / < nl > < nl > + public var audioRecorder : AAAudioRecorder ! < nl > < nl > < nl > - var audioRecorder : AAAudioRecorder ! < nl > + / / < nl > + / / Mode < nl > + / / < nl > + < nl > + private var textMode : Bool ! < nl > + private var micOn : Bool ! = true < nl > + < nl > + < nl > < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / MARK : - Init < nl > @ @ - 63 , 7 + 82 , 10 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > < nl > super . init ( peer : peer ) < nl > < nl > + < nl > + / / < nl > / / Background < nl > + / / < nl > < nl > backgroundView . clipsToBounds = true < nl > backgroundView . contentMode = . ScaleAspectFill < nl > @ @ - 78 , 32 + 100 , 45 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > backgroundView . image = UIImage ( contentsOfFile : path ) < nl > } < nl > } < nl > - < nl > view . insertSubview ( backgroundView , atIndex : 0 ) < nl > < nl > + < nl > + / / < nl > / / slk settings < nl > + / / < nl > self . bounces = false < nl > + self . keyboardPanningEnabled = true < nl > + self . registerPrefixesForAutoCompletion ( [ " @ " ] ) < nl > < nl > < nl > + / / < nl > / / Text Input < nl > - < nl > + / / < nl > self . textInputbar . backgroundColor = appStyle . chatInputFieldBgColor < nl > self . textInputbar . autoHideRightButton = false ; < nl > self . textInputbar . translucent = false < nl > < nl > - / / Text view placeholder < nl > + < nl > + / / < nl > + / / Text view < nl > + / / < nl > self . textView . placeholder = AALocalized ( " ChatPlaceholder " ) < nl > + self . textView . keyboardAppearance = ActorSDK . sharedActor ( ) . style . isDarkApp ? . Dark : . Light < nl > < nl > + < nl > + / / < nl > / / Add stickers button < nl > + / / < nl > self . stickersButton = UIButton ( type : UIButtonType . System ) < nl > self . stickersButton . tintColor = UIColor . lightGrayColor ( ) . colorWithAlphaComponent ( 0 . 5 ) < nl > self . stickersButton . setImage ( UIImage . bundled ( " sticker _ button " ) , forState : UIControlState . Normal ) < nl > - self . stickersButton . frame = CGRectMake ( self . view . frame . size . width - 67 , 12 , 20 , 20 ) < nl > self . stickersButton . addTarget ( self , action : " changeKeyboard " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > - < nl > self . textInputbar . addSubview ( stickersButton ) < nl > < nl > + < nl > + / / < nl > / / Check text for set right button < nl > + / / < nl > let checkText = Actor . loadDraftWithPeer ( peer ) ! . stringByTrimmingCharactersInSet ( NSCharacterSet . whitespaceAndNewlineCharacterSet ( ) ) < nl > < nl > if ( checkText . isEmpty ) { < nl > @ @ - 134 , 22 + 169 , 21 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > self . rightButton . enabled = true < nl > < nl > self . rightButton . layoutIfNeeded ( ) < nl > - < nl > } < nl > < nl > - / / voice recorder delegate < nl > + < nl > + / / < nl > + / / Voice Recorder < nl > + / / < nl > self . audioRecorder = AAAudioRecorder ( ) < nl > self . audioRecorder . delegate = self < nl > < nl > - self . keyboardPanningEnabled = true < nl > - < nl > - self . registerPrefixesForAutoCompletion ( [ " @ " ] ) < nl > - < nl > - self . textView . keyboardAppearance = ActorSDK . sharedActor ( ) . style . isDarkApp ? . Dark : . Light < nl > - < nl > self . leftButton . setImage ( UIImage . tinted ( " conv _ attach " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) < nl > < nl > + < nl > + / / < nl > / / Navigation Title < nl > + / / < nl > < nl > navigationView . frame = CGRectMake ( 0 , 0 , 200 , 44 ) < nl > navigationView . autoresizingMask = UIViewAutoresizing . FlexibleWidth < nl > @ @ - 172 , 8 + 206 , 10 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > < nl > self . navigationItem . titleView = navigationView < nl > < nl > - / / Navigation Avatar < nl > < nl > + / / < nl > + / / Navigation Avatar < nl > + / / < nl > avatarView . frame = CGRectMake ( 0 , 0 , 36 , 36 ) < nl > avatarView . viewDidTap = onAvatarTap < nl > < nl > @ @ - 198 , 9 + 234 , 6 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > fatalError ( " init ( coder : ) has not been implemented " ) < nl > } < nl > < nl > - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > - / / MARK : - Lifecycle < nl > - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > override public func viewDidLoad ( ) { < nl > super . viewDidLoad ( ) < nl > < nl > @ @ - 214 , 17 + 247 , 24 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > let frame = CGRectMake ( 0 , 0 , self . view . frame . size . width , 216 ) < nl > self . stickersView = AAStickersView ( frame : frame , convController : self ) < nl > < nl > - < nl > NSNotificationCenter . defaultCenter ( ) . addObserver ( < nl > self , < nl > selector : " updateStickersStateOnCloseKeyboard " , < nl > name : SLKKeyboardWillHideNotification , < nl > object : nil ) < nl > + } < nl > + < nl > + public override func viewDidLayoutSubviews ( ) { < nl > + super . viewDidLayoutSubviews ( ) < nl > < nl > - / / navigationController ? . view . layer . speed = 1 . 5 < nl > - < nl > + self . stickersButton . frame = CGRectMake ( self . view . frame . size . width - 67 , 12 , 20 , 20 ) < nl > } < nl > < nl > + < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > + / / MARK : - Lifecycle < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > + < nl > override public func viewWillAppear ( animated : Bool ) { < nl > super . viewWillAppear ( animated ) < nl > < nl > @ @ - 322 , 17 + 362 , 18 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > < nl > override public func viewWillLayoutSubviews ( ) { < nl > super . viewWillLayoutSubviews ( ) < nl > - backgroundView . frame = CGRect ( x : 0 , y : 0 , width : view . bounds . width , height : view . bounds . height ) < nl > + < nl > + backgroundView . frame = view . bounds < nl > < nl > titleView . frame = CGRectMake ( 0 , 4 , ( navigationView . frame . width - 0 ) , 20 ) < nl > subtitleView . frame = CGRectMake ( 0 , 22 , ( navigationView . frame . width - 0 ) , 20 ) < nl > + < nl > + stickersView . frame = CGRectMake ( 0 , 0 , self . view . frame . size . width , 216 ) < nl > } < nl > < nl > override public func viewDidAppear ( animated : Bool ) { < nl > super . viewDidAppear ( animated ) < nl > < nl > - / / navigationController ? . view . layer . speed = 1 < nl > - < nl > if navigationController ! . viewControllers . count > 2 { < nl > let firstController = navigationController ! . viewControllers [ 0 ] < nl > let currentController = navigationController ! . viewControllers [ navigationController ! . viewControllers . count - 1 ] < nl > @ @ - 342 , 18 + 383 , 11 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > if ! AADevice . isiPad { < nl > AANavigationBadge . showBadge ( ) < nl > } < nl > - < nl > - / / action sheet init < nl > - self . actionSheet = AAConvActionSheet ( maxSelected : 9 , weakSuperIn : self ) < nl > - < nl > - self . navigationController ? . view . addSubview ( self . actionSheet ) < nl > } < nl > < nl > override public func viewWillDisappear ( animated : Bool ) { < nl > super . viewWillDisappear ( animated ) < nl > < nl > - / / navigationController ? . view . layer . speed = 1 . 5 < nl > - < nl > Actor . onConversationClosedWithPeer ( peer ) < nl > ActorSDK . sharedActor ( ) . trackPageHidden ( content ) < nl > < nl > @ @ - 367 , 17 + 401 , 11 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > < nl > override public func viewDidDisappear ( animated : Bool ) { < nl > super . viewDidDisappear ( animated ) < nl > - / / navigationController ? . view . layer . speed = 1 < nl > < nl > Actor . saveDraftWithPeer ( peer , withDraft : textView . text ) < nl > < nl > / / Releasing bindings < nl > binder . unbindAll ( ) < nl > - < nl > - if self . actionSheet ! = nil { < nl > - self . actionSheet . removeFromSuperview ( ) < nl > - self . actionSheet = nil < nl > - } < nl > } < nl > < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > @ @ - 426 , 24 + 454 , 14 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > / / MARK : - Text bar actions < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > < nl > - override public func textWillUpdate ( ) { < nl > - super . textWillUpdate ( ) ; < nl > - < nl > - Actor . onTypingWithPeer ( peer ) ; < nl > - } < nl > - < nl > - < nl > - < nl > override public func textDidUpdate ( animated : Bool ) { < nl > super . textDidUpdate ( animated ) < nl > - < nl > - self . checkTextInTextView ( ) < nl > - < nl > + Actor . onTypingWithPeer ( peer ) < nl > + checkTextInTextView ( ) < nl > } < nl > < nl > func checkTextInTextView ( ) { < nl > < nl > - < nl > let text = self . textView . text . stringByTrimmingCharactersInSet ( NSCharacterSet . whitespaceAndNewlineCharacterSet ( ) ) < nl > self . rightButton . enabled = true < nl > < nl > @ @ - 498 , 14 + 516 , 10 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > < nl > override public func didPressRightButton ( sender : AnyObject ! ) { < nl > - < nl > if ! self . textView . text . isEmpty { < nl > - < nl > Actor . sendMessageWithMentionsDetect ( peer , withText : textView . text ) < nl > super . didPressRightButton ( sender ) < nl > - < nl > } < nl > - < nl > } < nl > < nl > override public func didPressLeftButton ( sender : AnyObject ! ) { < nl > @ @ - 513 , 9 + 527 , 11 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > < nl > self . textInputbar . textView . resignFirstResponder ( ) < nl > < nl > - self . actionSheet . showAnimation ( ) < nl > - < nl > self . rightButton . layoutIfNeeded ( ) < nl > + < nl > + let actionSheet = AAConvActionSheet ( ) < nl > + actionSheet . delegate = self < nl > + actionSheet . presentInController ( self ) < nl > } < nl > < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > @ @ - 585 , 18 + 601 , 48 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > cell . preservesSuperviewLayoutMargins = false < nl > cell . layoutMargins = UIEdgeInsetsZero < nl > } < nl > - < nl > + < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > - / / MARK : - Document picking < nl > + / / MARK : - Picker < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > < nl > - func pickDocument ( ) { < nl > + public func actionSheetPickCamera ( ) { < nl > + pickImage ( . Camera ) < nl > + } < nl > + < nl > + public func actionSheetPickGallery ( ) { < nl > + pickImage ( . PhotoLibrary ) < nl > + } < nl > + < nl > + public func actionSheetPickContact ( ) { < nl > + let pickerController = ABPeoplePickerNavigationController ( ) < nl > + pickerController . peoplePickerDelegate = self < nl > + self . presentViewController ( pickerController , animated : true , completion : nil ) < nl > + } < nl > + < nl > + public func actionSheetPickLocation ( ) { < nl > + let pickerController = AALocationPickerController ( ) < nl > + pickerController . delegate = self < nl > + self . presentViewController ( AANavigationController ( rootViewController : pickerController ) , animated : true , completion : nil ) < nl > + } < nl > + < nl > + public func actionSheetPickedImages ( images : [ UIImage ] ) { < nl > + for i in images { < nl > + Actor . sendUIImage ( i , peer : peer ) < nl > + } < nl > + } < nl > + < nl > + public func actionSheetPickDocument ( ) { < nl > let documentPicker = UIDocumentMenuViewController ( documentTypes : UTTAll as ! [ String ] , inMode : UIDocumentPickerMode . Import ) < nl > documentPicker . view . backgroundColor = UIColor . clearColor ( ) < nl > documentPicker . delegate = self < nl > self . presentViewController ( documentPicker , animated : true , completion : nil ) < nl > } < nl > < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > + / / MARK : - Document picking < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > + < nl > public func documentMenu ( documentMenu : UIDocumentMenuViewController , didPickDocumentPicker documentPicker : UIDocumentPickerViewController ) { < nl > documentPicker . delegate = self < nl > self . presentViewController ( documentPicker , animated : true , completion : nil ) < nl > @ @ - 670 , 20 + 716 , 10 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > picker . dismissViewControllerAnimated ( true , completion : nil ) < nl > } < nl > < nl > - func sendImageFromActionSheet ( image : UIImage ) { < nl > - Actor . sendUIImage ( image , peer : peer ) < nl > - } < nl > - < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / MARK : - Location picking < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > - < nl > - func pickLocation ( ) { < nl > - let pickerController = AALocationPickerController ( ) < nl > - pickerController . delegate = self < nl > - self . presentViewController ( AANavigationController ( rootViewController : pickerController ) , animated : true , completion : nil ) < nl > - } < nl > - < nl > + < nl > public func locationPickerDidCancelled ( controller : AALocationPickerController ) { < nl > controller . dismissViewControllerAnimated ( true , completion : nil ) < nl > } < nl > @ @ - 697 , 12 + 733 , 6 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > / / MARK : - Contact picking < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > < nl > - func pickContact ( ) { < nl > - let pickerController = ABPeoplePickerNavigationController ( ) < nl > - pickerController . peoplePickerDelegate = self < nl > - self . presentViewController ( pickerController , animated : true , completion : nil ) < nl > - } < nl > - < nl > public func peoplePickerNavigationController ( peoplePicker : ABPeoplePickerNavigationController , didSelectPerson person : ABRecord ) { < nl > < nl > / / Dismissing picker < nl > @ @ - 777 , 7 + 807 , 7 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > func onAudioRecordingFinished ( ) { < nl > print ( " onAudioRecordingFinished \ n " ) < nl > < nl > - audioRecorder . finish ( { ( path : String ! , duration : NSTimeInterval ) - > Void in < nl > + audioRecorder . finish { ( path : String ! , duration : NSTimeInterval ) - > Void in < nl > < nl > if ( nil = = path ) { < nl > print ( " onAudioRecordingFinished : empty path " ) < nl > @ @ - 792 , 8 + 822 , 7 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > Actor . sendAudioWithPeer ( self . peer , withName : NSString . localizedStringWithFormat ( " % @ . ogg " , NSUUID ( ) . UUIDString ) as String , < nl > withDuration : jint ( duration * 1000 ) , withDescriptor : descriptor ) < nl > < nl > - } ) < nl > - < nl > + } < nl > } < nl > < nl > public func audioRecorderDidStartRecording ( ) { < nl > @ @ - 802 , 14 + 831 , 11 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > } < nl > < nl > func onAudioRecordingCancelled ( ) { < nl > - print ( " onAudioRecordingCancelled \ n " ) < nl > stopAudioRecording ( ) < nl > } < nl > < nl > - func stopAudioRecording ( ) < nl > - { < nl > - if ( audioRecorder ! = nil ) < nl > - { < nl > + func stopAudioRecording ( ) { < nl > + if ( audioRecorder ! = nil ) { < nl > audioRecorder . delegate = nil < nl > audioRecorder . cancel ( ) < nl > } < nl > @ @ - 892 , 7 + 918 , 6 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > } < nl > < nl > func finishRecord ( button : UIButton , event : UIEvent ) { < nl > - < nl > closeRecorderAnimation ( ) < nl > self . voiceRecorderView . hidden = true < nl > self . stickersButton . hidden = false < nl > @ @ - 906 , 16 + 931 , 12 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > < nl > func updateStickersStateOnCloseKeyboard ( ) { < nl > - < nl > self . stickersOpen = false < nl > self . stickersButton . setImage ( UIImage . bundled ( " sticker _ button " ) , forState : UIControlState . Normal ) < nl > self . textInputbar . textView . inputView = nil < nl > - < nl > } < nl > < nl > func changeKeyboard ( ) { < nl > - < nl > - < nl > if self . stickersOpen = = false { < nl > self . stickersView . loadStickers ( ) < nl > < nl > @ @ - 926 , 17 + 947 , 10 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > self . textInputbar . textView . refreshInputViews ( ) < nl > self . textInputbar . textView . becomeFirstResponder ( ) < nl > < nl > - < nl > self . stickersButton . setImage ( UIImage . bundled ( " keyboard _ button " ) , forState : UIControlState . Normal ) < nl > < nl > self . stickersOpen = true < nl > - < nl > - self . textInputbar . layoutIfNeeded ( ) < nl > - self . view . layoutIfNeeded ( ) < nl > - < nl > - < nl > } else { < nl > - < nl > self . textInputbar . textView . inputView = nil < nl > < nl > self . textInputbar . textView . refreshFirstResponder ( ) < nl > @ @ - 946 , 25 + 960 , 14 @ @ public class ConversationViewController : AAConversationContentController , UIDocu < nl > self . stickersButton . setImage ( UIImage . bundled ( " sticker _ button " ) , forState : UIControlState . Normal ) < nl > < nl > self . stickersOpen = false < nl > - < nl > - self . textInputbar . layoutIfNeeded ( ) < nl > - self . view . layoutIfNeeded ( ) < nl > - < nl > } < nl > - < nl > + self . textInputbar . layoutIfNeeded ( ) < nl > + self . view . layoutIfNeeded ( ) < nl > } < nl > < nl > - func sendSticker ( sticker : ACSticker ) { < nl > - < nl > + func sendSticker ( sticker : ACSticker ) { < nl > Actor . sendStickerWithPeer ( self . peer , withSticker : sticker ) < nl > - < nl > } < nl > - < nl > - deinit { < nl > - print ( " conversation controller deinit ' ed " ) < nl > - } < nl > - < nl > - < nl > } < nl > < nl > class AABarAvatarView : AAAvatarView {
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index 0428791 . . 706ac5f 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 273 , 7 + 273 , 6 @ @ < nl > 	 	 BE2621571C4656D700A817AB / * AAConvActionSheet . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / ; } ; < nl > 	 	 BE2621591C4656EE00A817AB / * AAThumbnailView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE2621581C4656EE00A817AB / * AAThumbnailView . swift * / ; } ; < nl > 	 	 BEAC2B311C42D683007F7A2F / * libopus . a in Frameworks * / = { isa = PBXBuildFile ; fileRef = 15F89F001C211FDE00776ACD / * libopus . a * / ; } ; < nl > - 	 	 BEF11DB51C4657D20076400A / * AAASAssetManager . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / ; } ; < nl > 	 	 BEF11DB61C466D800076400A / * begin _ record . caf in Resources * / = { isa = PBXBuildFile ; fileRef = 153F6B3C1C2A9B1900C0B960 / * begin _ record . caf * / ; } ; < nl > 	 	 BEFE68D51C4657360001F2D6 / * AAThumbnailCollectionCell . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BEFE68D41C4657360001F2D6 / * AAThumbnailCollectionCell . swift * / ; } ; < nl > / * End PBXBuildFile section * / < nl > @ @ - 555 , 7 + 554 , 6 @ @ < nl > 	 	 BE237C9C1C422FFA00060648 / * AAStickersView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAStickersView . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAConvActionSheet . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 BE2621581C4656EE00A817AB / * AAThumbnailView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAThumbnailView . swift ; sourceTree = " < group > " ; } ; < nl > - 	 	 BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAASAssetManager . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 BEFE68D41C4657360001F2D6 / * AAThumbnailCollectionCell . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAThumbnailCollectionCell . swift ; sourceTree = " < group > " ; } ; < nl > / * End PBXFileReference section * / < nl > < nl > @ @ - 1320 , 7 + 1318 , 6 @ @ < nl > 	 	 BE26215A1C4656F100A817AB / * Manager * / = { < nl > 	 	 	 isa = PBXGroup ; < nl > 	 	 	 children = ( < nl > - 	 	 	 	 BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / , < nl > 	 	 	 ) ; < nl > 	 	 	 name = Manager ; < nl > 	 	 	 sourceTree = " < group > " ; < nl > @ @ - 1692 , 7 + 1689 , 6 @ @ < nl > 	 	 	 	 15D35F671C20187E00E3717A / * NSObject + TGLock . m in Sources * / , < nl > 	 	 	 	 15D35F5C1C20187E00E3717A / * AAAudioPlayer . m in Sources * / , < nl > 	 	 	 	 152AA8BF1C298C4B0030DEEE / * AASettingsLastSeenController . swift in Sources * / , < nl > - 	 	 	 	 BEF11DB51C4657D20076400A / * AAASAssetManager . swift in Sources * / , < nl > 	 	 	 	 066A51561BC4BEF5000E606E / * AALocalized . swift in Sources * / , < nl > 	 	 	 	 069CF4CF1BCB909A00C66E12 / * CLToken . m in Sources * / , < nl > 	 	 	 	 15D35F751C201B6B00E3717A / * AACustomPresentationController . swift in Sources * / , < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > index b6bf9c5 . . 006ea4f 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > @ @ - 37 , 7 + 37 , 6 @ @ public extension ACCocoaMessenger { < nl > let path = CocoaFiles . pathFromDescriptor ( descriptor ) ; < nl > < nl > videoData . writeToFile ( path , atomically : true ) / / write to file < nl > - < nl > < nl > / / get video duration < nl > < nl > @ @ - 55 , 8 + 54 , 9 @ @ public extension ACCocoaMessenger { < nl > do { < nl > let imageRef = try imageGenerator . copyCGImageAtTime ( thumbnailTime , actualTime : nil ) < nl > let thumbnail = UIImage ( CGImage : imageRef ) < nl > - let thumbData = UIImageJPEGRepresentation ( thumbnail , 0 . 55 ) ; / / thumbnail binary data < nl > - let fastThumb = ACFastThumb ( int : jint ( thumbnail . size . width ) , withInt : jint ( thumbnail . size . height ) , withByteArray : thumbData ! . toJavaBytes ( ) ) < nl > + let thumb = thumbnail . resizeSquare ( 90 , maxH : 90 ) ; < nl > + let thumbData = UIImageJPEGRepresentation ( thumb , 0 . 55 ) ; / / thumbnail binary data < nl > + let fastThumb = ACFastThumb ( int : jint ( thumb . size . width ) , withInt : jint ( thumb . size . height ) , withByteArray : thumbData ! . toJavaBytes ( ) ) < nl > < nl > print ( " video upload imageRef = \ ( imageRef ) " ) < nl > print ( " video upload thumbnail = \ ( thumbnail ) " ) < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > index a70b6c6 . . 01a0edb 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > @ @ - 40 , 11 + 40 , 8 @ @ public class ActorSDK { < nl > / / / Server Endpoints < nl > public var endpoints = [ < nl > " tls : / / front1 - mtproto - api - rev2 . actor . im " , < nl > - " tls : / / front2 - mtproto - api - rev2 . actor . im " , < nl > + " tls : / / front2 - mtproto - api - rev2 . actor . im " < nl > < nl > - " tcp : / / front1 - mtproto - api - rev3 . actor . im : 443 " , < nl > - " tcp : / / front2 - mtproto - api - rev3 . actor . im : 443 " , < nl > - " tcp : / / front3 - mtproto - api - rev3 . actor . im : 443 " < nl > ] { < nl > didSet { < nl > trustedKeys = [ ] < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift < nl > deleted file mode 100644 < nl > index 1850eeb . . 0000000 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift < nl > + + + / dev / null < nl > @ @ - 1 , 250 + 0 , 0 @ @ < nl > - / / < nl > - / / AAASAssetManager . swift < nl > - / / ActorSDK < nl > - / / < nl > - / / Created by kioshimafx on 1 / 13 / 16 . < nl > - / / Copyright © 2016 Steve Kite . All rights reserved . < nl > - / / < nl > - < nl > - import UIKit < nl > - import AssetsLibrary < nl > - < nl > - let ASSET _ PHOTO _ THUMBNAIL : Int = 0 < nl > - let ASSET _ PHOTO _ ASPECT _ THUMBNAIL : Int = 1 < nl > - let ASSET _ PHOTO _ SCREEN _ SIZE : Int = 2 < nl > - let ASSET _ PHOTO _ FULL _ RESOLUTION : Int = 3 < nl > - < nl > - let kNotificationSendPhotos = " NotificationSendPhotos " < nl > - let kNotificationUpdateSelected = " NotificationUpdateSelected " < nl > - < nl > - class AAAssetPhoto { < nl > - < nl > - var asset : ALAsset ! < nl > - var index : Int ! < nl > - var isSelected : Bool ! < nl > - var groupIndex : String ! < nl > - < nl > - var group : Int ! < nl > - < nl > - init ( groupIn : Int , indexIn : Int , assetIn : ALAsset ) { < nl > - < nl > - self . group = groupIn < nl > - self . index = indexIn < nl > - self . asset = assetIn < nl > - self . isSelected = true < nl > - < nl > - self . groupIndex = " \ ( group ) - \ ( index ) " < nl > - < nl > - } < nl > - < nl > - } < nl > - < nl > - class AAASAssetManager : NSObject { < nl > - < nl > - / / # # # singleton # # # < nl > - static let sharedInstance = AAASAssetManager ( ) < nl > - < nl > - var maxSelected : Int ! < nl > - var currentGroupIndex : Int ! < nl > - < nl > - / / / < nl > - < nl > - var assetPhotos : Array < ALAsset > ! < nl > - var selectedPhotos : Array < AAAssetPhoto > ! < nl > - < nl > - / / / < nl > - < nl > - var assetsLibrary : ALAssetsLibrary ! < nl > - var assetGroups : Array < ALAssetsGroup > ! < nl > - var selectedAsset : ALAsset ! < nl > - < nl > - override init ( ) { < nl > - < nl > - self . selectedPhotos = Array < AAAssetPhoto > ( ) < nl > - self . assetsLibrary = ALAssetsLibrary ( ) < nl > - self . assetsLibrary . writeImageToSavedPhotosAlbum ( nil , metadata : nil ) { ( _ , _ ) - > Void in < nl > - / / < nl > - } < nl > - < nl > - } < nl > - < nl > - / / messages _ setActivity ( user _ id : Int , reqResponse : ( VKResponse ! ) - > ( ) < nl > - < nl > - func getSavedPhotoList ( result : ( Array < AnyObject > ! ) - > ( ) , error : ( String ) - > ( ) ) { < nl > - < nl > - < nl > - dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { ( ) - > Void in < nl > - / / < nl > - } < nl > - < nl > - < nl > - } < nl > - < nl > - < nl > - func getGroupCount ( ) - > Int { < nl > - return self . assetGroups . count < nl > - } < nl > - < nl > - func getPhotoCountOfCurrentGroup ( ) - > Int { < nl > - return self . assetPhotos . count < nl > - } < nl > - < nl > - func getSelectedPhotoCount ( ) - > Int { < nl > - < nl > - let selectedArray = self . selectedPhotos . filter ( { < nl > - $ 0 . isSelected = = true < nl > - } ) < nl > - < nl > - return selectedArray . count < nl > - } < nl > - < nl > - func clearData ( ) { < nl > - < nl > - self . selectedPhotos . removeAll ( ) < nl > - self . assetGroups . removeAll ( ) < nl > - self . assetPhotos . removeAll ( ) < nl > - < nl > - < nl > - self . selectedPhotos = nil < nl > - self . assetGroups = nil < nl > - self . assetPhotos = nil < nl > - < nl > - } < nl > - < nl > - / / / / < nl > - < nl > - < nl > - func getImageFromAsset ( asset : ALAsset , type : Int ) - > UIImage { < nl > - / * < nl > - NSString * strXMP = asset . defaultRepresentation . metadata [ @ " AdjustmentXMP " ] ; < nl > - if ( strXMP = = nil | | [ strXMP isKindOfClass : [ NSNull class ] ] ) < nl > - { < nl > - iRef = [ asset . defaultRepresentation fullResolutionImage ] ; < nl > - return [ UIImage imageWithCGImage : iRef scale : 1 . 0 orientation : ( UIImageOrientation ) asset . defaultRepresentation . orientation ] ; < nl > - } < nl > - else < nl > - { < nl > - NSData * dXMP = [ strXMP dataUsingEncoding : NSUTF8StringEncoding ] ; < nl > - < nl > - CIImage * image = [ CIImage imageWithCGImage : asset . defaultRepresentation . fullResolutionImage ] ; < nl > - < nl > - NSError * error = nil ; < nl > - NSArray * filterArray = [ CIFilter filterArrayFromSerializedXMP : dXMP < nl > - inputImageExtent : image . extent < nl > - error : & error ] ; < nl > - if ( error ) { < nl > - NSLog ( @ " Error during CIFilter creation : % @ " , [ error localizedDescription ] ) ; < nl > - } < nl > - < nl > - for ( CIFilter * filter in filterArray ) { < nl > - [ filter setValue : image forKey : kCIInputImageKey ] ; < nl > - image = [ filter outputImage ] ; < nl > - } < nl > - CIContext * context = [ CIContext contextWithOptions : nil ] ; < nl > - CGImageRef cgimage = [ context createCGImage : image fromRect : [ image extent ] ] ; < nl > - UIImage * iImage = [ UIImage imageWithCGImage : cgimage scale : 1 . 0 orientation : ( UIImageOrientation ) asset . defaultRepresentation . orientation ] ; < nl > - return iImage ; < nl > - * / < nl > - < nl > - var imageRef : CGImageRef ! < nl > - < nl > - if ( type = = ASSET _ PHOTO _ THUMBNAIL ) { < nl > - imageRef = asset . thumbnail ( ) as ! CGImageRef < nl > - } else if ( type = = ASSET _ PHOTO _ ASPECT _ THUMBNAIL ) { < nl > - imageRef = asset . aspectRatioThumbnail ( ) as ! CGImageRef < nl > - } else if ( type = = ASSET _ PHOTO _ SCREEN _ SIZE ) { < nl > - imageRef = asset . defaultRepresentation ( ) as ! CGImageRef < nl > - } else if ( type = = ASSET _ PHOTO _ FULL _ RESOLUTION ) { < nl > - imageRef = asset . defaultRepresentation ( ) as ! CGImageRef < nl > - / / let strXMP = asset . defaultRepresentation ( ) . metadata ( ) [ " AdjustmentXMP " ] < nl > - < nl > - < nl > - < nl > - < nl > - } < nl > - < nl > - return UIImage ( CGImage : imageRef ) < nl > - } < nl > - < nl > - func getImageAtIndex ( nIndex : Int , nType : Int ) - > UIImage { < nl > - return getImageFromAsset ( self . assetPhotos [ nIndex ] , type : nType ) < nl > - } < nl > - < nl > - func getImagePreviewAtIndex ( nIndex : Int , nType : Int ) - > UIImage { < nl > - let photoObj = self . selectedPhotos [ nIndex ] < nl > - return getImageFromAsset ( photoObj . asset , type : nType ) < nl > - } < nl > - < nl > - func getAssetAtIndex ( index : Int ) - > ALAsset { < nl > - return self . assetPhotos [ index ] < nl > - } < nl > - < nl > - func getGroupAtIndex ( index : Int ) - > ALAssetsGroup { < nl > - return self . assetGroups [ index ] < nl > - } < nl > - < nl > - func sendSelectedPhotos ( type : Int ) - > Array < UIImage > { < nl > - < nl > - var sendArray = Array < UIImage > ( ) < nl > - < nl > - for ( _ , photoObj ) in self . selectedPhotos . enumerate ( ) { < nl > - < nl > - let image = self . getImageFromAsset ( photoObj . asset , type : type ) < nl > - sendArray . append ( image ) < nl > - < nl > - } < nl > - < nl > - self . selectedPhotos . removeAll ( ) < nl > - < nl > - return sendArray < nl > - } < nl > - < nl > - func addObjectWithIndex ( index : Int ) { < nl > - < nl > - let model = AAAssetPhoto ( groupIn : self . currentGroupIndex , indexIn : index , assetIn : self . assetPhotos [ index ] ) < nl > - < nl > - self . selectedPhotos . append ( model ) < nl > - < nl > - / / [ [ NSNotificationCenter defaultCenter ] postNotificationName : kNotificationUpdateSelected object : nil ] ; < nl > - < nl > - } < nl > - < nl > - < nl > - func removeObjectWithIndex ( index : Int ) { < nl > - < nl > - let groupIndex = " \ ( self . currentGroupIndex ! ) - \ ( index ) " < nl > - < nl > - let results = self . selectedPhotos . filter ( { < nl > - $ 0 . groupIndex = = groupIndex < nl > - } ) < nl > - < nl > - if ( results . count > 0 ) { < nl > - < nl > - / / let model = results [ 0 ] < nl > - < nl > - < nl > - } < nl > - < nl > - < nl > - } < nl > - < nl > - < nl > - func currentGroupFirstIndex ( ) - > Int { < nl > - < nl > - let results = self . selectedPhotos . filter ( { < nl > - $ 0 . group = = self . currentGroupIndex < nl > - } ) < nl > - < nl > - if ( results . count > 0 ) { < nl > - < nl > - let model = results [ 0 ] < nl > - return model . index < nl > - < nl > - } < nl > - < nl > - return 0 < nl > - } < nl > - < nl > - < nl > - < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift < nl > index d235ec3 . . d0bc182 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift < nl > @ @ - 12 , 21 + 12 , 27 @ @ protocol AAActionSheetDelegate { < nl > func actionSheetDidFinished ( selectedObjs : Array < AnyObject > ) < nl > } < nl > < nl > + let screenWidth = UIScreen . mainScreen ( ) . bounds . size . width < nl > + let screenHeigth = UIScreen . mainScreen ( ) . bounds . size . height < nl > + < nl > class AAConvActionSheet : UIView { < nl > < nl > var delegate : AAActionSheetDelegate ? < nl > < nl > var sheetView : UIView ! < nl > - var btnAlbum : UIButton ! < nl > + < nl > var btnCamera : UIButton ! < nl > + var btnLibrary : UIButton ! < nl > + var btnDocuments : UIButton ! < nl > + var btnLocation : UIButton ! < nl > + var btnContact : UIButton ! < nl > var btnCancel : UIButton ! < nl > - var thumbnailView : AAThumbnailView ! < nl > + < nl > + var thumbnailView = AAThumbnailView ( ) < nl > < nl > weak var weakSuper : ConversationViewController ! < nl > < nl > < nl > - let screenWidth = UIScreen . mainScreen ( ) . bounds . size . width < nl > - let screenHeigth = UIScreen . mainScreen ( ) . bounds . size . height < nl > < nl > init ( maxSelected : Int , weakSuperIn : ConversationViewController ) { < nl > super . init ( frame : CGRectZero ) < nl > @ @ - 48 , 14 + 54 , 12 @ @ class AAConvActionSheet : UIView { < nl > < nl > self . alpha = 0 < nl > self . frame = CGRectMake ( 0 , 0 , screenWidth , screenHeigth ) < nl > - self . backgroundColor = UIColor . clearColor ( ) < nl > + self . backgroundColor = UIColor . blackColor ( ) . colorWithAlphaComponent ( 0 . 5 ) < nl > + < nl > < nl > - self . addSubview ( self . sheetView ) < nl > < nl > - / / self . sheetView . addSubview ( self . btnCancel ) < nl > - / / self . sheetView . addSubview ( self . btnAlbum ) < nl > - / / self . sheetView . addSubview ( self . btnCamera ) < nl > - / / self . sheetView . addSubview ( self . thumbnailView ) < nl > + / / make photo < nl > + < nl > < nl > self . configNotification ( ) < nl > < nl > @ @ - 63 , 17 + 67 , 13 @ @ class AAConvActionSheet : UIView { < nl > < nl > func configNotification ( ) { < nl > < nl > - NSNotificationCenter . defaultCenter ( ) . addObserver ( self , selector : " " , name : kNotificationSendPhotos , object : nil ) < nl > - NSNotificationCenter . defaultCenter ( ) . addObserver ( self , selector : " " , name : kNotificationUpdateSelected , object : nil ) < nl > < nl > } < nl > < nl > deinit { < nl > < nl > self . weakSuper = nil < nl > - < nl > - AAASAssetManager . sharedInstance . clearData ( ) < nl > - NSNotificationCenter . defaultCenter ( ) . removeObserver ( self ) < nl > + < nl > < nl > } < nl > < nl > @ @ - 81 , 19 + 81 , 22 @ @ class AAConvActionSheet : UIView { < nl > func showAnimation ( ) { < nl > < nl > / / self . btnCamera . selected = true < nl > - / / self . thumbnailView . reloadView ( ) < nl > / / self . btnCamera . setTitle ( " Camera " , forState : UIControlState . Normal ) < nl > < nl > var frame = self . sheetView . frame < nl > - frame . origin . y = screenHeigth - 350 < nl > + frame . origin . y = screenHeigth - 400 < nl > < nl > UIView . animateWithDuration ( 0 . 25 ) { ( ) - > Void in < nl > self . sheetView . frame = frame < nl > self . alpha = 1 < nl > < nl > + self . thumbnailView . open ( ) < nl > + self . thumbnailView . reloadView ( ) < nl > + < nl > } < nl > < nl > < nl > + < nl > } < nl > < nl > func cancelAnimation ( ) { < nl > @ @ - 101 , 10 + 104 , 10 @ @ class AAConvActionSheet : UIView { < nl > var frame = self . sheetView . frame < nl > frame . origin . y = screenHeigth < nl > < nl > - UIView . animateWithDuration ( 0 . 25 ) { ( ) - > Void in < nl > + UIView . animateWithDuration ( 0 . 25 , animations : { ( ) - > Void in < nl > self . sheetView . frame = frame < nl > self . alpha = 0 < nl > - < nl > + } ) { ( bool ) - > Void in < nl > } < nl > < nl > } < nl > @ @ - 117 , 21 + 120 , 128 @ @ class AAConvActionSheet : UIView { < nl > < nl > < nl > / / sheet view < nl > - let frame = CGRectMake ( 0 , screenHeigth , screenWidth , 350 ) < nl > + let frame = CGRectMake ( 0 , screenHeigth , screenWidth , 400 ) < nl > self . sheetView = UIView ( frame : frame ) < nl > - self . sheetView . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 231 . 0 / 255 . 0 , blue : 234 . 0 / 255 . 0 , alpha : 1 ) < nl > - < nl > - < nl > - / / button cancel < nl > - < nl > - self . btnCancel = UIButton ( type : UIButtonType . Custom ) < nl > - < nl > - / / thumbnail view < nl > - < nl > - < nl > + self . sheetView . backgroundColor = UIColor . whiteColor ( ) < nl > < nl > + self . addSubview ( self . sheetView ) < nl > < nl > + self . btnCamera = UIButton ( type : UIButtonType . System ) < nl > + self . btnLibrary = UIButton ( type : UIButtonType . System ) < nl > + self . btnDocuments = UIButton ( type : UIButtonType . System ) < nl > + self . btnLocation = UIButton ( type : UIButtonType . System ) < nl > + self . btnContact = UIButton ( type : UIButtonType . System ) < nl > + self . btnCancel = UIButton ( type : UIButtonType . System ) < nl > + < nl > + / / color < nl > + < nl > + self . btnCamera . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) < nl > + self . btnLibrary . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) < nl > + self . btnDocuments . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) < nl > + self . btnLocation . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) < nl > + self . btnContact . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) < nl > + self . btnCancel . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) < nl > + < nl > + / / font size < nl > + < nl > + self . btnCamera . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) < nl > + self . btnLibrary . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) < nl > + self . btnDocuments . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) < nl > + self . btnLocation . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) < nl > + self . btnContact . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) < nl > + self . btnCancel . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) < nl > + < nl > + / / add buttons as subivews < nl > + < nl > + self . sheetView . addSubview ( self . btnCamera ) < nl > + self . sheetView . addSubview ( self . btnLibrary ) < nl > + self . sheetView . addSubview ( self . btnDocuments ) < nl > + self . sheetView . addSubview ( self . btnLocation ) < nl > + self . sheetView . addSubview ( self . btnContact ) < nl > + self . sheetView . addSubview ( self . btnCancel ) < nl > + self . sheetView . addSubview ( self . thumbnailView ) < nl > + < nl > + self . thumbnailView . frame = CGRectMake ( 0 , 5 , screenWidth , 100 ) < nl > + self . btnCamera . frame = CGRectMake ( 0 , 100 , screenWidth , 50 ) < nl > + self . btnLibrary . frame = CGRectMake ( 0 , 150 , screenWidth , 50 ) < nl > + self . btnDocuments . frame = CGRectMake ( 0 , 200 , screenWidth , 50 ) < nl > + self . btnLocation . frame = CGRectMake ( 0 , 250 , screenWidth , 50 ) < nl > + self . btnContact . frame = CGRectMake ( 0 , 300 , screenWidth , 50 ) < nl > + self . btnCancel . frame = CGRectMake ( 0 , 350 , screenWidth , 50 ) < nl > + < nl > + / / separators < nl > + < nl > + let spearator1 = UIView ( frame : CGRectMake ( 0 , 99 , screenWidth , 1 ) ) < nl > + spearator1 . backgroundColor = UIColor ( red : 223 . 9 / 255 . 0 , green : 223 . 9 / 255 . 0 , blue : 223 . 9 / 255 . 0 , alpha : 0 . 6 ) < nl > + let spearator2 = UIView ( frame : CGRectMake ( 10 , 149 , screenWidth - 20 , 1 ) ) < nl > + spearator2 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) < nl > + let spearator3 = UIView ( frame : CGRectMake ( 10 , 199 , screenWidth - 20 , 1 ) ) < nl > + spearator3 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) < nl > + let spearator4 = UIView ( frame : CGRectMake ( 10 , 249 , screenWidth - 20 , 1 ) ) < nl > + spearator4 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) < nl > + let spearator5 = UIView ( frame : CGRectMake ( 10 , 299 , screenWidth - 20 , 1 ) ) < nl > + spearator5 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) < nl > + let spearator6 = UIView ( frame : CGRectMake ( 10 , 349 , screenWidth - 20 , 1 ) ) < nl > + spearator6 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) < nl > + < nl > + / / add separatos as subview < nl > + < nl > + self . sheetView . addSubview ( spearator1 ) < nl > + self . sheetView . addSubview ( spearator2 ) < nl > + self . sheetView . addSubview ( spearator3 ) < nl > + self . sheetView . addSubview ( spearator4 ) < nl > + self . sheetView . addSubview ( spearator5 ) < nl > + self . sheetView . addSubview ( spearator6 ) < nl > + < nl > + / / set title for buttons < nl > + < nl > + self . btnCamera . setTitle ( AALocalized ( " PhotoCamera " ) , forState : UIControlState . Normal ) < nl > + self . btnLibrary . setTitle ( AALocalized ( " PhotoLibrary " ) , forState : UIControlState . Normal ) < nl > + self . btnDocuments . setTitle ( AALocalized ( " SendDocument " ) , forState : UIControlState . Normal ) < nl > + self . btnLocation . setTitle ( AALocalized ( " ShareLocation " ) , forState : UIControlState . Normal ) < nl > + self . btnContact . setTitle ( AALocalized ( " ShareContact " ) , forState : UIControlState . Normal ) < nl > + self . btnCancel . setTitle ( AALocalized ( " AlertCancel " ) , forState : UIControlState . Normal ) < nl > + < nl > + / / add actins < nl > + < nl > + self . btnCamera . addTarget ( self , action : " btnCameraAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + self . btnLibrary . addTarget ( self , action : " btnLibraryAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + self . btnDocuments . addTarget ( self , action : " btnDocumentAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + self . btnLocation . addTarget ( self , action : " btnLocationAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + self . btnContact . addTarget ( self , action : " btnContactAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + self . btnCancel . addTarget ( self , action : " btnCloseAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + < nl > + } < nl > + < nl > + / / MARK : - Button ' s actions < nl > + < nl > + func btnCameraAction ( ) { < nl > + cancelAnimation ( ) < nl > + self . weakSuper . pickImage ( . Camera ) < nl > } < nl > < nl > + func btnLibraryAction ( ) { < nl > + cancelAnimation ( ) < nl > + self . weakSuper . pickImage ( . PhotoLibrary ) < nl > + } < nl > + < nl > + func btnDocumentAction ( ) { < nl > + cancelAnimation ( ) < nl > + self . weakSuper . pickDocument ( ) < nl > + } < nl > + < nl > + func btnLocationAction ( ) { < nl > + cancelAnimation ( ) < nl > + self . weakSuper . pickLocation ( ) < nl > + } < nl > + < nl > + func btnContactAction ( ) { < nl > + cancelAnimation ( ) < nl > + self . weakSuper . pickContact ( ) < nl > + } < nl > + < nl > + func btnCloseAction ( ) { < nl > + cancelAnimation ( ) < nl > + } < nl > < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift < nl > index 41da72f . . d53eb8e 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift < nl > @ @ - 47 , 12 + 47 , 16 @ @ class AAThumbnailCollectionCell : UICollectionViewCell { < nl > override func layoutSubviews ( ) { < nl > super . layoutSubviews ( ) < nl > < nl > + self . imgThumbnails . frame = CGRectMake ( 0 , 0 , self . contentView . frame . size . width , self . contentView . frame . size . height ) < nl > + self . imgSelected . frame = CGRectMake ( 0 , 0 , self . contentView . frame . size . width , self . contentView . frame . size . height ) < nl > + < nl > < nl > } < nl > < nl > override func prepareForReuse ( ) { < nl > super . prepareForReuse ( ) < nl > < nl > + self . imgSelected . image = nil < nl > < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift < nl > index 8267e7a . . bb33b2e 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift < nl > @ @ - 7 , 16 + 7 , 40 @ @ < nl > / / < nl > < nl > import UIKit < nl > + import Photos < nl > + < nl > + public enum ImagePickerMediaType { < nl > + case Image < nl > + case Video < nl > + case ImageAndVideo < nl > + } < nl > < nl > class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSource { < nl > < nl > var collectionView : UICollectionView ! < nl > + let mediaType : ImagePickerMediaType = ImagePickerMediaType . Image < nl > + < nl > + private var assets = [ PHAsset ] ( ) < nl > + private let imageManager = PHCachingImageManager ( ) < nl > + < nl > + private let minimumPreviewHeight : CGFloat = 70 < nl > + private var maximumPreviewHeight : CGFloat = 70 < nl > + < nl > + private lazy var requestOptions : PHImageRequestOptions = { < nl > + let options = PHImageRequestOptions ( ) < nl > + options . deliveryMode = . HighQualityFormat < nl > + options . resizeMode = . Fast < nl > + < nl > + return options < nl > + } ( ) < nl > + < nl > + private let previewCollectionViewInset : CGFloat = 5 < nl > < nl > < nl > override init ( frame : CGRect ) { < nl > super . init ( frame : frame ) < nl > < nl > - self . configUI ( ) < nl > + self . collectionViewSetup ( ) < nl > < nl > } < nl > < nl > @ @ - 26 , 23 + 50 , 123 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > < nl > / / / < nl > < nl > - func configUI ( ) { < nl > - self . collectionViewSetup ( ) < nl > - self . addSubview ( self . collectionView ) < nl > + func open ( ) { < nl > + < nl > + if PHPhotoLibrary . authorizationStatus ( ) = = . Authorized { < nl > + fetchAssets ( ) < nl > + self . collectionView . reloadData ( ) < nl > + } else if PHPhotoLibrary . authorizationStatus ( ) = = . NotDetermined { < nl > + PHPhotoLibrary . requestAuthorization ( ) { status in < nl > + if status = = . Authorized { < nl > + dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { < nl > + self . fetchAssets ( ) < nl > + self . collectionView . reloadData ( ) < nl > + } < nl > + } < nl > + } < nl > + } < nl > + < nl > + } < nl > + < nl > + private func fetchAssets ( ) { < nl > + let options = PHFetchOptions ( ) < nl > + options . sortDescriptors = [ NSSortDescriptor ( key : " creationDate " , ascending : false ) ] < nl > + < nl > + / / switch mediaType { < nl > + / / case . Image : < nl > + / / options . predicate = NSPredicate ( format : " mediaType = % d " , PHAssetMediaType . Image . rawValue ) < nl > + / / case . Video : < nl > + / / options . predicate = NSPredicate ( format : " mediaType = % d " , PHAssetMediaType . Video . rawValue ) < nl > + / / case . ImageAndVideo : < nl > + / / options . predicate = NSPredicate ( format : " mediaType = % d OR mediaType = % d " , PHAssetMediaType . Image . rawValue , PHAssetMediaType . Video . rawValue ) < nl > + / / } < nl > + < nl > + options . predicate = NSPredicate ( format : " mediaType = % d " , PHAssetMediaType . Image . rawValue ) < nl > + < nl > + let fetchLimit = 50 < nl > + if # available ( iOS 9 , * ) { < nl > + options . fetchLimit = fetchLimit < nl > + } < nl > + < nl > + let result = PHAsset . fetchAssetsWithOptions ( options ) < nl > + let requestOptions = PHImageRequestOptions ( ) < nl > + requestOptions . synchronous = true < nl > + requestOptions . deliveryMode = . FastFormat < nl > + < nl > + result . enumerateObjectsUsingBlock { asset , _ , stop in < nl > + defer { < nl > + if self . assets . count > fetchLimit { < nl > + stop . initialize ( true ) < nl > + } < nl > + } < nl > + < nl > + if let asset = asset as ? PHAsset { < nl > + self . imageManager . requestImageDataForAsset ( asset , options : requestOptions ) { data , _ , _ , info in < nl > + if data ! = nil { < nl > + self . assets . append ( asset ) < nl > + } < nl > + } < nl > + } < nl > + } < nl > + } < nl > + < nl > + private func prefetchImagesForAsset ( asset : PHAsset ) { < nl > + let targetSize = sizeForAsset ( asset , scale : UIScreen . mainScreen ( ) . scale ) < nl > + imageManager . startCachingImagesForAssets ( [ asset ] , targetSize : targetSize , contentMode : . AspectFill , options : requestOptions ) < nl > + } < nl > + < nl > + private func requestImageForAsset ( asset : PHAsset , completion : ( image : UIImage ? ) - > ( ) ) { < nl > + let targetSize = sizeForAsset ( asset , scale : UIScreen . mainScreen ( ) . scale ) < nl > + requestOptions . synchronous = true < nl > + < nl > + / / Workaround because PHImageManager . requestImageForAsset doesn ' t work for burst images < nl > + if asset . representsBurst { < nl > + imageManager . requestImageDataForAsset ( asset , options : requestOptions ) { data , _ , _ , _ in < nl > + let image = data . flatMap { UIImage ( data : $ 0 ) } < nl > + completion ( image : image ) < nl > + } < nl > + } < nl > + else { < nl > + imageManager . requestImageForAsset ( asset , targetSize : targetSize , contentMode : . AspectFill , options : requestOptions ) { image , _ in < nl > + completion ( image : image ) < nl > + } < nl > + } < nl > + } < nl > + < nl > + private func sizeForAsset ( asset : PHAsset , scale : CGFloat = 1 ) - > CGSize { < nl > + let proportion = CGFloat ( asset . pixelWidth ) / CGFloat ( asset . pixelHeight ) < nl > + < nl > + let imageHeight = maximumPreviewHeight - 2 * previewCollectionViewInset < nl > + let imageWidth = floor ( proportion * imageHeight ) < nl > + < nl > + return CGSize ( width : imageWidth * scale , height : imageHeight * scale ) < nl > } < nl > < nl > / / / collection view delegate < nl > < nl > func numberOfSectionsInCollectionView ( collectionView : UICollectionView ) - > Int { < nl > - return 0 < nl > + return 1 < nl > } < nl > < nl > func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) - > Int { < nl > - return 0 < nl > + print ( " ASSSEEETS = = = \ ( self . assets . count ) " ) < nl > + return self . assets . count < nl > } < nl > < nl > func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) - > UICollectionViewCell { < nl > - return UICollectionViewCell ( ) < nl > + < nl > + let cell = self . collectionView . dequeueReusableCellWithReuseIdentifier ( " AAThumbnailCollectionCell " , forIndexPath : indexPath ) as ! AAThumbnailCollectionCell < nl > + < nl > + cell . backgroundColor = UIColor . whiteColor ( ) < nl > + < nl > + let asset = assets [ indexPath . row ] < nl > + < nl > + requestImageForAsset ( asset ) { image in < nl > + cell . imgSelected . image = image < nl > + } < nl > + < nl > + < nl > + return cell < nl > } < nl > < nl > / / / < nl > @ @ - 52 , 43 + 176 , 41 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > } < nl > < nl > func collectionViewSetup ( ) { < nl > - < nl > - if ( self . collectionView = = nil ) { < nl > - < nl > - let flowLayout = UICollectionViewFlowLayout ( ) < nl > - flowLayout . scrollDirection = . Horizontal < nl > - flowLayout . minimumLineSpacing = 4 < nl > - flowLayout . sectionInset = UIEdgeInsetsMake ( 5 . 0 , 4 . 0 , 5 . 0 , 4 . 0 ) < nl > - < nl > - flowLayout . itemSize = CGSizeMake ( 105 , 180 ) < nl > - < nl > - self . collectionView = UICollectionView ( frame : self . bounds , collectionViewLayout : flowLayout ) < nl > - self . collectionView . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 231 . 0 / 255 . 0 , blue : 234 . 0 / 255 . 0 , alpha : 1 . 0 ) < nl > - self . collectionView . showsHorizontalScrollIndicator = false < nl > - self . collectionView . delegate = self < nl > - self . collectionView . dataSource = self < nl > - < nl > - self . collectionView . registerClass ( AAThumbnailCollectionCell . self , forCellWithReuseIdentifier : " AAThumbnailCollectionCell " ) < nl > - < nl > - / / AAASAssetManager . sharedInstance < nl > - < nl > - / * < nl > - < nl > - [ [ UUAssetManager sharedInstance ] getGroupList : ^ ( NSArray * obj ) { < nl > - < nl > - [ [ UUAssetManager sharedInstance ] getPhotoListOfGroupByIndex : [ UUAssetManager sharedInstance ] . currentGroupIndex result : ^ ( NSArray * obj ) { < nl > - < nl > - [ _ collectionView reloadData ] ; < nl > - < nl > - } ] ; < nl > - } ] ; < nl > < nl > - * / < nl > - < nl > - < nl > - < nl > - } < nl > + let flowLayout = UICollectionViewFlowLayout ( ) < nl > + flowLayout . scrollDirection = . Horizontal < nl > + flowLayout . minimumLineSpacing = 4 < nl > + flowLayout . sectionInset = UIEdgeInsetsMake ( 5 . 0 , 4 . 0 , 5 . 0 , 4 . 0 ) < nl > + < nl > + flowLayout . itemSize = CGSizeMake ( 90 , 90 ) < nl > + < nl > + self . collectionView = UICollectionView ( frame : self . bounds , collectionViewLayout : flowLayout ) < nl > + self . collectionView . backgroundColor = UIColor . clearColor ( ) < nl > + self . collectionView . showsHorizontalScrollIndicator = false < nl > + self . collectionView . delegate = self < nl > + self . collectionView . dataSource = self < nl > + self . collectionView . frame = CGRectMake ( 0 , 0 , screenWidth , 80 ) < nl > + < nl > + self . collectionView . registerClass ( AAThumbnailCollectionCell . self , forCellWithReuseIdentifier : " AAThumbnailCollectionCell " ) < nl > + < nl > + self . addSubview ( self . collectionView ) < nl > < nl > } < nl > < nl > + func imageByCroppingImage ( image : UIImage , toSize : CGSize ) - > UIImage { < nl > + < nl > + let refWidth = CGImageGetWidth ( image . CGImage ) < nl > + let refHeight = CGImageGetHeight ( image . CGImage ) < nl > + < nl > + let x = CGFloat ( ( refWidth - Int ( toSize . width ) ) / 2 ) < nl > + let y = CGFloat ( ( refHeight - Int ( toSize . height ) ) / 2 ) < nl > + < nl > + let cropRect = CGRectMake ( x , y , toSize . height , toSize . width ) < nl > + let imageRef = CGImageCreateWithImageInRect ( image . CGImage , cropRect ) ! as CGImageRef < nl > + < nl > + let cropped = UIImage ( CGImage : imageRef , scale : 0 . 0 , orientation : UIImageOrientation . Up ) < nl > + < nl > + return cropped ; < nl > + } < nl > + < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > index 119c94c . . e34b500 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > @ @ - 88 , 11 + 88 , 6 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > self . rightButton . enabled = true < nl > self . rightButton . layoutIfNeeded ( ) < nl > < nl > - / / self . rightButton . setTitle ( AALocalized ( " ChatSend " ) , forState : UIControlState . Normal ) < nl > - / / self . rightButton . setTitleColor ( appStyle . chatSendColor , forState : UIControlState . Normal ) < nl > - / / self . rightButton . setTitleColor ( appStyle . chatSendDisabledColor , forState : UIControlState . Disabled ) < nl > - / / self . rightButton . setImage ( nil , forState : UIControlState . Normal ) < nl > - < nl > / / < nl > < nl > self . audioButton = UIButton ( type : UIButtonType . Custom ) < nl > @ @ - 496 , 7 + 491 , 7 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > < nl > showActionSheet ( builder . items , cancelButton : " AlertCancel " , destructButton : nil , sourceView : self . leftButton , sourceRect : self . leftButton . bounds , tapClosure : builder . tapClosure ) < nl > < nl > - / / self . actionSheet . showAnimation ( ) < nl > + / / self . actionSheet . showAnimation ( ) < nl > < nl > self . rightButton . layoutIfNeeded ( ) < nl > } < nl > @ @ - 615 , 7 + 610 , 9 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > func pickImage ( source : UIImagePickerControllerSourceType ) { < nl > let pickerController = AAImagePickerController ( ) < nl > pickerController . sourceType = source < nl > - pickerController . mediaTypes = [ kUTTypeImage as String , kUTTypeMovie as String ] < nl > + pickerController . mediaTypes = [ kUTTypeImage as String ] < nl > + < nl > + / / [ kUTTypeImage as String , kUTTypeMovie as String ] < nl > < nl > / / / / Style controller bg < nl > / / pickerController . view . backgroundColor = appStyle . vcBgColor

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift 
 index 10ee57a . . 4386865 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift 
 @ @ - 5 , 145 + 5 , 109 @ @ 
 import UIKit 
 import Photos 
 
 - let screenWidth = UIScreen . mainScreen ( ) . bounds . size . width 
 - let screenHeigth = UIScreen . mainScreen ( ) . bounds . size . height 
 + public protocol AAConvActionSheetDelegate { 
 + func actionSheetPickedImages ( images : [ UIImage ] ) 
 + func actionSheetPickCamera ( ) 
 + func actionSheetPickGallery ( ) 
 + func actionSheetPickDocument ( ) 
 + func actionSheetPickLocation ( ) 
 + func actionSheetPickContact ( ) 
 + } 
 
 - class AAConvActionSheet : UIView { 
 - 
 - var sheetView : UIView ! 
 - var backgroundView : UIView ! 
 + public class AAConvActionSheet : UIView , AAThumbnailViewDelegate { 
 
 - var btnCamera : UIButton ! 
 - var btnLibrary : UIButton ! 
 - var btnDocuments : UIButton ! 
 - var btnLocation : UIButton ! 
 - var btnContact : UIButton ! 
 - var btnCancel : UIButton ! 
 + public var delegate : AAConvActionSheetDelegate ? 
 
 - var thumbnailView : AAThumbnailView ! 
 + private let sheetView = UIView ( ) 
 + private let backgroundView = UIView ( ) 
 
 - weak var weakSuper : ConversationViewController ! 
 + private var thumbnailView : AAThumbnailView ! 
 + private var btnCamera = UIButton ( type : UIButtonType . System ) 
 + private var btnLibrary = UIButton ( type : UIButtonType . System ) 
 + private var btnDocuments = UIButton ( type : UIButtonType . System ) 
 + private var btnLocation = UIButton ( type : UIButtonType . System ) 
 + private var btnContact = UIButton ( type : UIButtonType . System ) 
 + private var btnCancel = UIButton ( type : UIButtonType . System ) 
 
 - var superWidth : CGFloat ! 
 + private weak var presentedInController : UIViewController ! = nil 
 
 - init ( maxSelected : Int , weakSuperIn : ConversationViewController ) { 
 + public init ( ) { 
 super . init ( frame : CGRectZero ) 
 
 - superWidth = weakSuperIn . view . frame . size . width 
 - self . setupAllViews ( ) 
 - self . configUI ( ) 
 - self . weakSuper = weakSuperIn 
 - 
 + self . backgroundColor = UIColor . clearColor ( ) 
 } 
 
 - required init ? ( coder aDecoder : NSCoder ) { 
 + public required init ? ( coder aDecoder : NSCoder ) { 
 fatalError ( " init ( coder : ) has not been implemented " ) 
 } 
 
 - / / / / / 
 - 
 - func configUI ( ) { 
 + public func presentInController ( controller : UIViewController ) { 
 
 - self . alpha = 0 
 - self . frame = CGRectMake ( 0 , 0 , screenWidth , screenHeigth ) 
 - self . backgroundColor = UIColor . clearColor ( ) 
 + if controller . navigationController ! = nil { 
 + self . presentedInController = controller . navigationController 
 + } else { 
 + self . presentedInController = controller 
 + } 
 
 - } 
 - 
 - 
 - deinit { 
 + if let navigation = presentedInController as ? UINavigationController { 
 + navigation . interactivePopGestureRecognizer ? . enabled = false 
 + } else if let navigation = presentedInController . navigationController { 
 + navigation . interactivePopGestureRecognizer ? . enabled = false 
 + } 
 
 - self . weakSuper = nil 
 + frame = presentedInController . view . bounds 
 + presentedInController . view . addSubview ( self ) 
 
 - } 
 - 
 - 
 - func showAnimation ( ) { 
 + setupAllViews ( ) 
 
 - self . alpha = 1 
 + self . sheetView . frame = CGRectMake ( 0 , self . frame . height , self . frame . width , 400 ) 
 self . backgroundView . alpha = 0 
 - 
 - var frame = self . sheetView . frame 
 - frame . origin . y = screenHeigth - 400 
 - 
 - self . weakSuper . navigationController ! . interactivePopGestureRecognizer ! . enabled = false 
 - 
 - if ( self . thumbnailView = = nil ) { 
 - 
 - self . thumbnailView = AAThumbnailView ( ) 
 - self . sheetView . addSubview ( self . thumbnailView ) 
 - self . thumbnailView . frame = CGRectMake ( 0 , 5 , superWidth , 90 ) 
 - self . thumbnailView . bindedConvSheet = self 
 - 
 + dispatchOnUi { ( ) - > Void in 
 + UIView . animateWithDuration ( 0 . 4 , delay : 0 . 0 , usingSpringWithDamping : 0 . 7 , 
 + initialSpringVelocity : 0 . 6 , options : . CurveEaseInOut , animations : { 
 + self . sheetView . frame = CGRectMake ( 0 , self . frame . height - 400 , self . frame . width , 400 ) 
 + self . backgroundView . alpha = 1 
 + } , completion : nil ) 
 } 
 - 
 - self . thumbnailView . open ( ) 
 - 
 - UIView . animateWithDuration ( 0 . 4 , delay : 0 . 0 , usingSpringWithDamping : 0 . 7 , initialSpringVelocity : 0 . 6 , options : UIViewAnimationOptions . CurveEaseInOut , animations : { ( ) - > Void in 
 - 
 - self . sheetView . frame = frame 
 - self . backgroundView . alpha = 1 
 - 
 - 
 - } , completion : { ( complite ) - > Void in 
 - 
 - / / animation complite 
 - 
 - } ) 
 - 
 - 
 } 
 
 - func cancelAnimation ( ) { 
 - 
 - 
 - var frame = self . sheetView . frame 
 - frame . origin . y = screenHeigth 
 + public func dismiss ( ) { 
 + var nextFrame = self . sheetView . frame 
 + nextFrame . origin . y = self . presentedInController . view . height 
 + 
 + if let navigation = presentedInController as ? UINavigationController { 
 + navigation . interactivePopGestureRecognizer ? . enabled = true 
 + } else if let navigation = presentedInController . navigationController { 
 + navigation . interactivePopGestureRecognizer ? . enabled = true 
 + } 
 
 - self . weakSuper . rightButton . layoutIfNeeded ( ) 
 UIView . animateWithDuration ( 0 . 25 , animations : { ( ) - > Void in 
 - self . weakSuper . rightButton . layoutIfNeeded ( ) 
 - self . sheetView . frame = frame 
 - 
 - self . backgroundView . alpha = 0 
 - 
 - } ) { ( bool ) - > Void in 
 - 
 - self . weakSuper . navigationController ! . interactivePopGestureRecognizer ! . enabled = true 
 - 
 - self . alpha = 0 
 - 
 - self . thumbnailView . selectedAssets = [ PHAsset ] ( ) 
 - self . thumbnailView . reloadView ( ) 
 - self . updateSelectedPhotos ( ) 
 - 
 - 
 + self . sheetView . frame = nextFrame 
 + self . backgroundView . alpha = 0 } ) { ( bool ) - > Void in 
 + self . removeFromSuperview ( ) 
 } 
 - 
 } 
 - 
 - override func touchesBegan ( touches : Set < UITouch > , withEvent event : UIEvent ? ) { 
 - cancelAnimation ( ) 
 - } 
 - 
 - func setupAllViews ( ) { 
 + 
 + private func setupAllViews ( ) { 
 
 
 / / sheet view 
 
 - self . backgroundView = UIView ( ) 
 - self . backgroundView . frame = CGRectMake ( 0 , 0 , screenWidth , screenHeigth ) 
 - self . backgroundView . backgroundColor = UIColor . blackColor ( ) . colorWithAlphaComponent ( 0 . 7 ) 
 - self . backgroundView . alpha = 0 
 + let superWidth = presentedInController . view . width 
 + let superHeight = presentedInController . view . height 
 
 + self . backgroundView . frame = presentedInController . view . bounds 
 + self . backgroundView . backgroundColor = UIColor . alphaBlack ( 0 . 7 ) 
 + self . backgroundView . alpha = 0 
 self . addSubview ( self . backgroundView ) 
 
 - let frame = CGRectMake ( 0 , screenHeigth , screenWidth , 1000 ) 
 - self . sheetView = UIView ( frame : frame ) 
 + self . sheetView . frame = CGRectMake ( 0 , superHeight - 400 , superWidth , 400 ) 
 self . sheetView . backgroundColor = UIColor . whiteColor ( ) 
 - 
 self . addSubview ( self . sheetView ) 
 
 + self . thumbnailView = AAThumbnailView ( frame : CGRectMake ( 0 , 5 , superWidth , 90 ) ) 
 + self . thumbnailView . delegate = self 
 + self . thumbnailView . open ( ) 
 self . btnCamera = UIButton ( type : UIButtonType . System ) 
 self . btnLibrary = UIButton ( type : UIButtonType . System ) 
 self . btnDocuments = UIButton ( type : UIButtonType . System ) 
 @ @ - 177 , 9 + 141 , 9 @ @ class AAConvActionSheet : UIView { 
 self . sheetView . addSubview ( self . btnLocation ) 
 self . sheetView . addSubview ( self . btnContact ) 
 self . sheetView . addSubview ( self . btnCancel ) 
 - / / self . sheetView . addSubview ( self . thumbnailView ) 
 + self . sheetView . addSubview ( self . thumbnailView ) 
 
 - / / self . thumbnailView . frame = CGRectMake ( 0 , 5 , screenWidth , 90 ) 
 + self . thumbnailView . frame = CGRectMake ( 0 , 5 , superWidth , 90 ) 
 self . btnCamera . frame = CGRectMake ( 0 , 100 , superWidth , 50 ) 
 self . btnLibrary . frame = CGRectMake ( 0 , 150 , superWidth , 50 ) 
 self . btnDocuments . frame = CGRectMake ( 0 , 200 , superWidth , 50 ) 
 @ @ - 189 , 17 + 153 , 17 @ @ class AAConvActionSheet : UIView { 
 
 / / separators 
 
 - let spearator1 = UIView ( frame : CGRectMake ( 0 , 99 , screenWidth , 1 ) ) 
 + let spearator1 = UIView ( frame : CGRectMake ( 0 , 99 , superWidth , 1 ) ) 
 spearator1 . backgroundColor = UIColor ( red : 223 . 9 / 255 . 0 , green : 223 . 9 / 255 . 0 , blue : 223 . 9 / 255 . 0 , alpha : 0 . 6 ) 
 - let spearator2 = UIView ( frame : CGRectMake ( 10 , 149 , screenWidth - 20 , 1 ) ) 
 + let spearator2 = UIView ( frame : CGRectMake ( 10 , 149 , superWidth - 20 , 1 ) ) 
 spearator2 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) 
 - let spearator3 = UIView ( frame : CGRectMake ( 10 , 199 , screenWidth - 20 , 1 ) ) 
 + let spearator3 = UIView ( frame : CGRectMake ( 10 , 199 , superWidth - 20 , 1 ) ) 
 spearator3 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) 
 - let spearator4 = UIView ( frame : CGRectMake ( 10 , 249 , screenWidth - 20 , 1 ) ) 
 + let spearator4 = UIView ( frame : CGRectMake ( 10 , 249 , superWidth - 20 , 1 ) ) 
 spearator4 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) 
 - let spearator5 = UIView ( frame : CGRectMake ( 10 , 299 , screenWidth - 20 , 1 ) ) 
 + let spearator5 = UIView ( frame : CGRectMake ( 10 , 299 , superWidth - 20 , 1 ) ) 
 spearator5 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) 
 - let spearator6 = UIView ( frame : CGRectMake ( 10 , 349 , screenWidth - 20 , 1 ) ) 
 + let spearator6 = UIView ( frame : CGRectMake ( 10 , 349 , superWidth - 20 , 1 ) ) 
 spearator6 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) 
 
 / / add separatos as subview 
 @ @ - 228 , 64 + 192 , 26 @ @ class AAConvActionSheet : UIView { 
 self . btnLocation . addTarget ( self , action : " btnLocationAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 self . btnContact . addTarget ( self , action : " btnContactAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 self . btnCancel . addTarget ( self , action : " btnCloseAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 - 
 - / / bineded self 
 - 
 - / / self . thumbnailView . bindedConvSheet = self 
 - 
 - } 
 - 
 - / / MARK : - Button ' s actions 
 - 
 - func btnCameraAction ( ) { 
 - cancelAnimation ( ) 
 - self . weakSuper . pickImage ( . Camera ) 
 } 
 
 - func btnLibraryAction ( ) { 
 - cancelAnimation ( ) 
 - self . weakSuper . pickImage ( . PhotoLibrary ) 
 - } 
 - 
 - func btnDocumentAction ( ) { 
 - cancelAnimation ( ) 
 - 
 - if ( NSFileManager . defaultManager ( ) . ubiquityIdentityToken ! = nil ) { 
 - self . weakSuper . pickDocument ( ) 
 - } 
 - 
 - } 
 - 
 - func btnLocationAction ( ) { 
 - cancelAnimation ( ) 
 - self . weakSuper . pickLocation ( ) 
 - } 
 - 
 - func btnContactAction ( ) { 
 - cancelAnimation ( ) 
 - self . weakSuper . pickContact ( ) 
 - } 
 - 
 - func btnCloseAction ( ) { 
 - cancelAnimation ( ) 
 - } 
 - 
 - func updateSelectedPhotos ( ) { 
 - 
 - if self . thumbnailView . selectedAssets . count > 0 { 
 + public func thumbnailSelectedUpdated ( selectedAssets : [ PHAsset ] ) { 
 + if selectedAssets . count > 0 { 
 
 - var sendString : String ! 
 - 
 - if self . thumbnailView . selectedAssets . count = = 1 { 
 - sendString = AALocalized ( " AttachmentsSendPhoto " ) . replace ( " { count } " , dest : " \ ( self . thumbnailView . selectedAssets . count ) " ) 
 + var sendString : String 
 + if selectedAssets . count = = 1 { 
 + sendString = AALocalized ( " AttachmentsSendPhoto " ) . replace ( " { count } " , dest : " \ ( selectedAssets . count ) " ) 
 } else { 
 - sendString = AALocalized ( " AttachmentsSendPhotos " ) . replace ( " { count } " , dest : " \ ( self . thumbnailView . selectedAssets . count ) " ) 
 + sendString = AALocalized ( " AttachmentsSendPhotos " ) . replace ( " { count } " , dest : " \ ( selectedAssets . count ) " ) 
 } 
 
 + / / 
 / / remove target 
 + / / 
 self . btnCamera . removeTarget ( self , action : " btnCameraAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 
 + / / 
 / / add new target 
 + / / 
 self . btnCamera . setTitle ( sendString , forState : UIControlState . Normal ) 
 self . btnCamera . addTarget ( self , action : " sendPhotos " , forControlEvents : UIControlEvents . TouchUpInside ) 
 self . btnCamera . titleLabel ? . font = UIFont ( name : " HelveticaNeue - Medium " , size : 17 ) 
 @ @ - 293 , 45 + 219 , 62 @ @ class AAConvActionSheet : UIView { 
 
 } else { 
 
 + / / 
 / / remove target 
 + / / 
 self . btnCamera . removeTarget ( self , action : " sendPhotos " , forControlEvents : UIControlEvents . TouchUpInside ) 
 
 - 
 + / / 
 / / add new target 
 + / / 
 self . btnCamera . setTitle ( AALocalized ( " PhotoCamera " ) , forState : UIControlState . Normal ) 
 self . btnCamera . addTarget ( self , action : " btnCameraAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 self . btnCamera . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) 
 
 } 
 - 
 } 
 + 
 + / / 
 + / / Actions 
 + / / 
 
 func sendPhotos ( ) { 
 - 
 - self . cancelAnimation ( ) 
 - 
 - let priority = DISPATCH _ QUEUE _ PRIORITY _ DEFAULT 
 - dispatch _ async ( dispatch _ get _ global _ queue ( priority , 0 ) ) { 
 - 
 - self . thumbnailView . getSelectedAsImages ( { ( images ) - > ( ) in 
 - let arrayModelsForSend = images 
 - self . thumbnailView . selectedAssets = [ PHAsset ] ( ) 
 - 
 - for ( _ , image ) in arrayModelsForSend . enumerate ( ) { 
 - 
 - self . weakSuper . sendImageFromActionSheet ( image ) 
 - 
 - } 
 - 
 - dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { 
 - self . updateSelectedPhotos ( ) 
 - } 
 - } ) 
 - 
 - 
 + self . thumbnailView . getSelectedAsImages { ( images ) - > ( ) in 
 + self . delegate ? . actionSheetPickedImages ( images ) 
 } 
 - 
 + dismiss ( ) 
 } 
 - 
 
 + func btnCameraAction ( ) { 
 + delegate ? . actionSheetPickCamera ( ) 
 + dismiss ( ) 
 + } 
 + 
 + func btnLibraryAction ( ) { 
 + delegate ? . actionSheetPickGallery ( ) 
 + dismiss ( ) 
 + } 
 + 
 + func btnDocumentAction ( ) { 
 + delegate ? . actionSheetPickDocument ( ) 
 + dismiss ( ) 
 + } 
 + 
 + func btnLocationAction ( ) { 
 + delegate ? . actionSheetPickLocation ( ) 
 + dismiss ( ) 
 + } 
 + 
 + func btnContactAction ( ) { 
 + delegate ? . actionSheetPickContact ( ) 
 + dismiss ( ) 
 + } 
 + 
 + func btnCloseAction ( ) { 
 + dismiss ( ) 
 + } 
 + 
 + public override func touchesBegan ( touches : Set < UITouch > , withEvent event : UIEvent ? ) { 
 + dismiss ( ) 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift 
 index 5338598 . . 0469978 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift 
 @ @ - 11 , 19 + 11 , 26 @ @ public enum ImagePickerMediaType { 
 case ImageAndVideo 
 } 
 
 - class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSource { 
 + public protocol AAThumbnailViewDelegate { 
 + func thumbnailSelectedUpdated ( selectedAssets : [ PHAsset ] ) 
 + } 
 + 
 + public class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSource { 
 
 - var collectionView : UICollectionView ! 
 - weak var bindedConvSheet : AAConvActionSheet ! 
 - let mediaType : ImagePickerMediaType = ImagePickerMediaType . Image 
 + public var delegate : AAThumbnailViewDelegate ? 
 + 
 + private var collectionView : UICollectionView ! 
 + private let mediaType : ImagePickerMediaType = ImagePickerMediaType . Image 
 
 private var assets = [ PHAsset ] ( ) 
 - var selectedAssets = [ PHAsset ] ( ) 
 + private var selectedAssets = [ PHAsset ] ( ) 
 private var imageManager : PHCachingImageManager ! 
 
 private let minimumPreviewHeight : CGFloat = 90 
 private var maximumPreviewHeight : CGFloat = 90 
 
 + private let previewCollectionViewInset : CGFloat = 5 
 + 
 private lazy var requestOptions : PHImageRequestOptions = { 
 let options = PHImageRequestOptions ( ) 
 options . deliveryMode = . HighQualityFormat 
 @ @ - 32 , 23 + 39 , 20 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 return options 
 } ( ) 
 
 - private let previewCollectionViewInset : CGFloat = 5 
 - 
 
 - override init ( frame : CGRect ) { 
 + public override init ( frame : CGRect ) { 
 super . init ( frame : frame ) 
 
 self . collectionViewSetup ( ) 
 - 
 } 
 
 - required init ? ( coder aDecoder : NSCoder ) { 
 + public required init ? ( coder aDecoder : NSCoder ) { 
 fatalError ( " init ( coder : ) has not been implemented " ) 
 } 
 
 / / / 
 
 - func open ( ) { 
 + public func open ( ) { 
 
 dispatchBackground { ( ) - > Void in 
 
 @ @ - 162 , 15 + 166 , 15 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 
 / / / collection view delegate 
 
 - func numberOfSectionsInCollectionView ( collectionView : UICollectionView ) - > Int { 
 + public func numberOfSectionsInCollectionView ( collectionView : UICollectionView ) - > Int { 
 return 1 
 } 
 
 - func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) - > Int { 
 + public func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) - > Int { 
 return self . assets . count 
 } 
 
 - func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) - > UICollectionViewCell { 
 + public func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) - > UICollectionViewCell { 
 
 let cell = self . collectionView . dequeueReusableCellWithReuseIdentifier ( " AAThumbnailCollectionCell " , forIndexPath : indexPath ) as ! AAThumbnailCollectionCell 
 
 @ @ - 215 , 17 + 219 , 16 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 
 / / / 
 
 - func reloadView ( ) { 
 + public func reloadView ( ) { 
 self . collectionView . reloadData ( ) 
 } 
 
 - func collectionViewSetup ( ) { 
 + public func collectionViewSetup ( ) { 
 
 let flowLayout = UICollectionViewFlowLayout ( ) 
 flowLayout . scrollDirection = . Horizontal 
 flowLayout . minimumLineSpacing = 4 
 flowLayout . sectionInset = UIEdgeInsetsMake ( 5 . 0 , 4 . 0 , 5 . 0 , 4 . 0 ) 
 - 
 flowLayout . itemSize = CGSizeMake ( 90 , 90 ) 
 
 self . collectionView = UICollectionView ( frame : self . bounds , collectionViewLayout : flowLayout ) 
 @ @ - 233 , 15 + 236 , 11 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 self . collectionView . showsHorizontalScrollIndicator = false 
 self . collectionView . delegate = self 
 self . collectionView . dataSource = self 
 - self . collectionView . frame = CGRectMake ( 0 , 0 , screenWidth , 90 ) 
 - 
 self . collectionView . registerClass ( AAThumbnailCollectionCell . self , forCellWithReuseIdentifier : " AAThumbnailCollectionCell " ) 
 - 
 self . addSubview ( self . collectionView ) 
 - 
 } 
 
 - func imageByCroppingImage ( image : UIImage , toSize : CGSize ) - > UIImage { 
 + public func imageByCroppingImage ( image : UIImage , toSize : CGSize ) - > UIImage { 
 
 let refWidth = CGImageGetWidth ( image . CGImage ) 
 let refHeight = CGImageGetHeight ( image . CGImage ) 
 @ @ - 254 , 31 + 253 , 28 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 
 let cropped = UIImage ( CGImage : imageRef , scale : 0 . 0 , orientation : UIImageOrientation . Up ) 
 
 - return cropped ; 
 + return cropped 
 } 
 
 - func addSelectedModel ( model : PHAsset ) { 
 - 
 + public func addSelectedModel ( model : PHAsset ) { 
 self . selectedAssets . append ( model ) 
 - self . bindedConvSheet . updateSelectedPhotos ( ) 
 - 
 + self . delegate ? . thumbnailSelectedUpdated ( self . selectedAssets ) 
 } 
 
 - func removeSelectedModel ( model : PHAsset ) { 
 + public func removeSelectedModel ( model : PHAsset ) { 
 if let index = self . selectedAssets . indexOf ( model ) { 
 self . selectedAssets . removeAtIndex ( index ) 
 - self . bindedConvSheet . updateSelectedPhotos ( ) 
 + self . delegate ? . thumbnailSelectedUpdated ( self . selectedAssets ) 
 } 
 } 
 
 - func getSelectedAsImages ( completion : ( images : [ UIImage ] ) - > ( ) ) { 
 + public func getSelectedAsImages ( completion : ( images : [ UIImage ] ) - > ( ) ) { 
 
 let arrayModelsForSend = self . selectedAssets 
 
 var compliedArray = [ UIImage ] ( ) 
 
 for ( _ , model ) in arrayModelsForSend . enumerate ( ) { 
 - 
 self . imageManager . requestImageDataForAsset ( model , options : requestOptions , resultHandler : { ( data , _ , _ , _ ) - > Void in 
 if data ! = nil { 
 compliedArray . append ( UIImage ( data : data ! ) ! ) 
 @ @ - 287 , 11 + 283 , 11 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 } 
 } 
 } ) 
 - 
 } 
 - 
 } 
 
 - 
 - 
 + public func dismiss ( ) { 
 + self . selectedAssets = [ ] 
 + self . reloadView ( ) 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 index a32e35d . . 5d473f1 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 @ @ - 9 , 8 + 9 , 16 @ @ import AddressBook 
 import AddressBookUI 
 import SVProgressHUD 
 
 - public class ConversationViewController : AAConversationContentController , UIDocumentMenuDelegate , UIDocumentPickerDelegate , UIImagePickerControllerDelegate , UINavigationControllerDelegate , AALocationPickerControllerDelegate , 
 - ABPeoplePickerNavigationControllerDelegate , AAAudioRecorderDelegate { 
 + public class ConversationViewController : 
 + AAConversationContentController , 
 + UIDocumentMenuDelegate , 
 + UIDocumentPickerDelegate , 
 + UIImagePickerControllerDelegate , 
 + UINavigationControllerDelegate , 
 + AALocationPickerControllerDelegate , 
 + ABPeoplePickerNavigationControllerDelegate , 
 + AAAudioRecorderDelegate , 
 + AAConvActionSheetDelegate { 
 
 / / Data binder 
 private let binder = AABinder ( ) 
 @ @ - 21 , 33 + 29 , 44 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 let content : ACPage ! 
 var appStyle : ActorStyle { get { return ActorSDK . sharedActor ( ) . style } } 
 
 - / / States 
 - 
 - private var micOn : Bool ! = true 
 
 + / / 
 / / Views 
 + / / 
 + 
 private let titleView : UILabel = UILabel ( ) 
 private let subtitleView : UILabel = UILabel ( ) 
 private let navigationView : UIView = UIView ( ) 
 private let avatarView = AABarAvatarView ( frameSize : 36 , type : . Rounded ) 
 private let backgroundView = UIImageView ( ) 
 private var audioButton : UIButton = UIButton ( ) 
 - private var actionSheet : AAConvActionSheet ! 
 private var voiceRecorderView : AAVoiceRecorderView ! 
 
 + 
 + / / 
 / / Stickers 
 + / / 
 
 private var stickersView : AAStickersView ! 
 private var stickersButton : UIButton ! 
 private var stickersOpen = false 
 
 - / / Mode 
 
 - private var textMode : Bool ! 
 + / / 
 + / / Audio Recorder 
 + / / 
 
 + public var audioRecorder : AAAudioRecorder ! 
 
 
 - var audioRecorder : AAAudioRecorder ! 
 + / / 
 + / / Mode 
 + / / 
 + 
 + private var textMode : Bool ! 
 + private var micOn : Bool ! = true 
 + 
 + 
 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / MARK : - Init 
 @ @ - 63 , 7 + 82 , 10 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 
 super . init ( peer : peer ) 
 
 + 
 + / / 
 / / Background 
 + / / 
 
 backgroundView . clipsToBounds = true 
 backgroundView . contentMode = . ScaleAspectFill 
 @ @ - 78 , 32 + 100 , 45 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 backgroundView . image = UIImage ( contentsOfFile : path ) 
 } 
 } 
 - 
 view . insertSubview ( backgroundView , atIndex : 0 ) 
 
 + 
 + / / 
 / / slk settings 
 + / / 
 self . bounces = false 
 + self . keyboardPanningEnabled = true 
 + self . registerPrefixesForAutoCompletion ( [ " @ " ] ) 
 
 
 + / / 
 / / Text Input 
 - 
 + / / 
 self . textInputbar . backgroundColor = appStyle . chatInputFieldBgColor 
 self . textInputbar . autoHideRightButton = false ; 
 self . textInputbar . translucent = false 
 
 - / / Text view placeholder 
 + 
 + / / 
 + / / Text view 
 + / / 
 self . textView . placeholder = AALocalized ( " ChatPlaceholder " ) 
 + self . textView . keyboardAppearance = ActorSDK . sharedActor ( ) . style . isDarkApp ? . Dark : . Light 
 
 + 
 + / / 
 / / Add stickers button 
 + / / 
 self . stickersButton = UIButton ( type : UIButtonType . System ) 
 self . stickersButton . tintColor = UIColor . lightGrayColor ( ) . colorWithAlphaComponent ( 0 . 5 ) 
 self . stickersButton . setImage ( UIImage . bundled ( " sticker _ button " ) , forState : UIControlState . Normal ) 
 - self . stickersButton . frame = CGRectMake ( self . view . frame . size . width - 67 , 12 , 20 , 20 ) 
 self . stickersButton . addTarget ( self , action : " changeKeyboard " , forControlEvents : UIControlEvents . TouchUpInside ) 
 - 
 self . textInputbar . addSubview ( stickersButton ) 
 
 + 
 + / / 
 / / Check text for set right button 
 + / / 
 let checkText = Actor . loadDraftWithPeer ( peer ) ! . stringByTrimmingCharactersInSet ( NSCharacterSet . whitespaceAndNewlineCharacterSet ( ) ) 
 
 if ( checkText . isEmpty ) { 
 @ @ - 134 , 22 + 169 , 21 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 self . rightButton . enabled = true 
 
 self . rightButton . layoutIfNeeded ( ) 
 - 
 } 
 
 - / / voice recorder delegate 
 + 
 + / / 
 + / / Voice Recorder 
 + / / 
 self . audioRecorder = AAAudioRecorder ( ) 
 self . audioRecorder . delegate = self 
 
 - self . keyboardPanningEnabled = true 
 - 
 - self . registerPrefixesForAutoCompletion ( [ " @ " ] ) 
 - 
 - self . textView . keyboardAppearance = ActorSDK . sharedActor ( ) . style . isDarkApp ? . Dark : . Light 
 - 
 self . leftButton . setImage ( UIImage . tinted ( " conv _ attach " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) 
 
 + 
 + / / 
 / / Navigation Title 
 + / / 
 
 navigationView . frame = CGRectMake ( 0 , 0 , 200 , 44 ) 
 navigationView . autoresizingMask = UIViewAutoresizing . FlexibleWidth 
 @ @ - 172 , 8 + 206 , 10 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 
 self . navigationItem . titleView = navigationView 
 
 - / / Navigation Avatar 
 
 + / / 
 + / / Navigation Avatar 
 + / / 
 avatarView . frame = CGRectMake ( 0 , 0 , 36 , 36 ) 
 avatarView . viewDidTap = onAvatarTap 
 
 @ @ - 198 , 9 + 234 , 6 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 fatalError ( " init ( coder : ) has not been implemented " ) 
 } 
 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / MARK : - Lifecycle 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 override public func viewDidLoad ( ) { 
 super . viewDidLoad ( ) 
 
 @ @ - 214 , 17 + 247 , 24 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 let frame = CGRectMake ( 0 , 0 , self . view . frame . size . width , 216 ) 
 self . stickersView = AAStickersView ( frame : frame , convController : self ) 
 
 - 
 NSNotificationCenter . defaultCenter ( ) . addObserver ( 
 self , 
 selector : " updateStickersStateOnCloseKeyboard " , 
 name : SLKKeyboardWillHideNotification , 
 object : nil ) 
 + } 
 + 
 + public override func viewDidLayoutSubviews ( ) { 
 + super . viewDidLayoutSubviews ( ) 
 
 - / / navigationController ? . view . layer . speed = 1 . 5 
 - 
 + self . stickersButton . frame = CGRectMake ( self . view . frame . size . width - 67 , 12 , 20 , 20 ) 
 } 
 
 + 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / MARK : - Lifecycle 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 override public func viewWillAppear ( animated : Bool ) { 
 super . viewWillAppear ( animated ) 
 
 @ @ - 322 , 17 + 362 , 18 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 
 override public func viewWillLayoutSubviews ( ) { 
 super . viewWillLayoutSubviews ( ) 
 - backgroundView . frame = CGRect ( x : 0 , y : 0 , width : view . bounds . width , height : view . bounds . height ) 
 + 
 + backgroundView . frame = view . bounds 
 
 titleView . frame = CGRectMake ( 0 , 4 , ( navigationView . frame . width - 0 ) , 20 ) 
 subtitleView . frame = CGRectMake ( 0 , 22 , ( navigationView . frame . width - 0 ) , 20 ) 
 + 
 + stickersView . frame = CGRectMake ( 0 , 0 , self . view . frame . size . width , 216 ) 
 } 
 
 override public func viewDidAppear ( animated : Bool ) { 
 super . viewDidAppear ( animated ) 
 
 - / / navigationController ? . view . layer . speed = 1 
 - 
 if navigationController ! . viewControllers . count > 2 { 
 let firstController = navigationController ! . viewControllers [ 0 ] 
 let currentController = navigationController ! . viewControllers [ navigationController ! . viewControllers . count - 1 ] 
 @ @ - 342 , 18 + 383 , 11 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 if ! AADevice . isiPad { 
 AANavigationBadge . showBadge ( ) 
 } 
 - 
 - / / action sheet init 
 - self . actionSheet = AAConvActionSheet ( maxSelected : 9 , weakSuperIn : self ) 
 - 
 - self . navigationController ? . view . addSubview ( self . actionSheet ) 
 } 
 
 override public func viewWillDisappear ( animated : Bool ) { 
 super . viewWillDisappear ( animated ) 
 
 - / / navigationController ? . view . layer . speed = 1 . 5 
 - 
 Actor . onConversationClosedWithPeer ( peer ) 
 ActorSDK . sharedActor ( ) . trackPageHidden ( content ) 
 
 @ @ - 367 , 17 + 401 , 11 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 
 override public func viewDidDisappear ( animated : Bool ) { 
 super . viewDidDisappear ( animated ) 
 - / / navigationController ? . view . layer . speed = 1 
 
 Actor . saveDraftWithPeer ( peer , withDraft : textView . text ) 
 
 / / Releasing bindings 
 binder . unbindAll ( ) 
 - 
 - if self . actionSheet ! = nil { 
 - self . actionSheet . removeFromSuperview ( ) 
 - self . actionSheet = nil 
 - } 
 } 
 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 @ @ - 426 , 24 + 454 , 14 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 / / MARK : - Text bar actions 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 - override public func textWillUpdate ( ) { 
 - super . textWillUpdate ( ) ; 
 - 
 - Actor . onTypingWithPeer ( peer ) ; 
 - } 
 - 
 - 
 - 
 override public func textDidUpdate ( animated : Bool ) { 
 super . textDidUpdate ( animated ) 
 - 
 - self . checkTextInTextView ( ) 
 - 
 + Actor . onTypingWithPeer ( peer ) 
 + checkTextInTextView ( ) 
 } 
 
 func checkTextInTextView ( ) { 
 
 - 
 let text = self . textView . text . stringByTrimmingCharactersInSet ( NSCharacterSet . whitespaceAndNewlineCharacterSet ( ) ) 
 self . rightButton . enabled = true 
 
 @ @ - 498 , 14 + 516 , 10 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 override public func didPressRightButton ( sender : AnyObject ! ) { 
 - 
 if ! self . textView . text . isEmpty { 
 - 
 Actor . sendMessageWithMentionsDetect ( peer , withText : textView . text ) 
 super . didPressRightButton ( sender ) 
 - 
 } 
 - 
 } 
 
 override public func didPressLeftButton ( sender : AnyObject ! ) { 
 @ @ - 513 , 9 + 527 , 11 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 
 self . textInputbar . textView . resignFirstResponder ( ) 
 
 - self . actionSheet . showAnimation ( ) 
 - 
 self . rightButton . layoutIfNeeded ( ) 
 + 
 + let actionSheet = AAConvActionSheet ( ) 
 + actionSheet . delegate = self 
 + actionSheet . presentInController ( self ) 
 } 
 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 @ @ - 585 , 18 + 601 , 48 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 cell . preservesSuperviewLayoutMargins = false 
 cell . layoutMargins = UIEdgeInsetsZero 
 } 
 - 
 + 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / MARK : - Document picking 
 + / / MARK : - Picker 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 - func pickDocument ( ) { 
 + public func actionSheetPickCamera ( ) { 
 + pickImage ( . Camera ) 
 + } 
 + 
 + public func actionSheetPickGallery ( ) { 
 + pickImage ( . PhotoLibrary ) 
 + } 
 + 
 + public func actionSheetPickContact ( ) { 
 + let pickerController = ABPeoplePickerNavigationController ( ) 
 + pickerController . peoplePickerDelegate = self 
 + self . presentViewController ( pickerController , animated : true , completion : nil ) 
 + } 
 + 
 + public func actionSheetPickLocation ( ) { 
 + let pickerController = AALocationPickerController ( ) 
 + pickerController . delegate = self 
 + self . presentViewController ( AANavigationController ( rootViewController : pickerController ) , animated : true , completion : nil ) 
 + } 
 + 
 + public func actionSheetPickedImages ( images : [ UIImage ] ) { 
 + for i in images { 
 + Actor . sendUIImage ( i , peer : peer ) 
 + } 
 + } 
 + 
 + public func actionSheetPickDocument ( ) { 
 let documentPicker = UIDocumentMenuViewController ( documentTypes : UTTAll as ! [ String ] , inMode : UIDocumentPickerMode . Import ) 
 documentPicker . view . backgroundColor = UIColor . clearColor ( ) 
 documentPicker . delegate = self 
 self . presentViewController ( documentPicker , animated : true , completion : nil ) 
 } 
 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / MARK : - Document picking 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 public func documentMenu ( documentMenu : UIDocumentMenuViewController , didPickDocumentPicker documentPicker : UIDocumentPickerViewController ) { 
 documentPicker . delegate = self 
 self . presentViewController ( documentPicker , animated : true , completion : nil ) 
 @ @ - 670 , 20 + 716 , 10 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 picker . dismissViewControllerAnimated ( true , completion : nil ) 
 } 
 
 - func sendImageFromActionSheet ( image : UIImage ) { 
 - Actor . sendUIImage ( image , peer : peer ) 
 - } 
 - 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / MARK : - Location picking 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - func pickLocation ( ) { 
 - let pickerController = AALocationPickerController ( ) 
 - pickerController . delegate = self 
 - self . presentViewController ( AANavigationController ( rootViewController : pickerController ) , animated : true , completion : nil ) 
 - } 
 - 
 + 
 public func locationPickerDidCancelled ( controller : AALocationPickerController ) { 
 controller . dismissViewControllerAnimated ( true , completion : nil ) 
 } 
 @ @ - 697 , 12 + 733 , 6 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 / / MARK : - Contact picking 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 - func pickContact ( ) { 
 - let pickerController = ABPeoplePickerNavigationController ( ) 
 - pickerController . peoplePickerDelegate = self 
 - self . presentViewController ( pickerController , animated : true , completion : nil ) 
 - } 
 - 
 public func peoplePickerNavigationController ( peoplePicker : ABPeoplePickerNavigationController , didSelectPerson person : ABRecord ) { 
 
 / / Dismissing picker 
 @ @ - 777 , 7 + 807 , 7 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 func onAudioRecordingFinished ( ) { 
 print ( " onAudioRecordingFinished \ n " ) 
 
 - audioRecorder . finish ( { ( path : String ! , duration : NSTimeInterval ) - > Void in 
 + audioRecorder . finish { ( path : String ! , duration : NSTimeInterval ) - > Void in 
 
 if ( nil = = path ) { 
 print ( " onAudioRecordingFinished : empty path " ) 
 @ @ - 792 , 8 + 822 , 7 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 Actor . sendAudioWithPeer ( self . peer , withName : NSString . localizedStringWithFormat ( " % @ . ogg " , NSUUID ( ) . UUIDString ) as String , 
 withDuration : jint ( duration * 1000 ) , withDescriptor : descriptor ) 
 
 - } ) 
 - 
 + } 
 } 
 
 public func audioRecorderDidStartRecording ( ) { 
 @ @ - 802 , 14 + 831 , 11 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 } 
 
 func onAudioRecordingCancelled ( ) { 
 - print ( " onAudioRecordingCancelled \ n " ) 
 stopAudioRecording ( ) 
 } 
 
 - func stopAudioRecording ( ) 
 - { 
 - if ( audioRecorder ! = nil ) 
 - { 
 + func stopAudioRecording ( ) { 
 + if ( audioRecorder ! = nil ) { 
 audioRecorder . delegate = nil 
 audioRecorder . cancel ( ) 
 } 
 @ @ - 892 , 7 + 918 , 6 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 } 
 
 func finishRecord ( button : UIButton , event : UIEvent ) { 
 - 
 closeRecorderAnimation ( ) 
 self . voiceRecorderView . hidden = true 
 self . stickersButton . hidden = false 
 @ @ - 906 , 16 + 931 , 12 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 func updateStickersStateOnCloseKeyboard ( ) { 
 - 
 self . stickersOpen = false 
 self . stickersButton . setImage ( UIImage . bundled ( " sticker _ button " ) , forState : UIControlState . Normal ) 
 self . textInputbar . textView . inputView = nil 
 - 
 } 
 
 func changeKeyboard ( ) { 
 - 
 - 
 if self . stickersOpen = = false { 
 self . stickersView . loadStickers ( ) 
 
 @ @ - 926 , 17 + 947 , 10 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 self . textInputbar . textView . refreshInputViews ( ) 
 self . textInputbar . textView . becomeFirstResponder ( ) 
 
 - 
 self . stickersButton . setImage ( UIImage . bundled ( " keyboard _ button " ) , forState : UIControlState . Normal ) 
 
 self . stickersOpen = true 
 - 
 - self . textInputbar . layoutIfNeeded ( ) 
 - self . view . layoutIfNeeded ( ) 
 - 
 - 
 } else { 
 - 
 self . textInputbar . textView . inputView = nil 
 
 self . textInputbar . textView . refreshFirstResponder ( ) 
 @ @ - 946 , 25 + 960 , 14 @ @ public class ConversationViewController : AAConversationContentController , UIDocu 
 self . stickersButton . setImage ( UIImage . bundled ( " sticker _ button " ) , forState : UIControlState . Normal ) 
 
 self . stickersOpen = false 
 - 
 - self . textInputbar . layoutIfNeeded ( ) 
 - self . view . layoutIfNeeded ( ) 
 - 
 } 
 - 
 + self . textInputbar . layoutIfNeeded ( ) 
 + self . view . layoutIfNeeded ( ) 
 } 
 
 - func sendSticker ( sticker : ACSticker ) { 
 - 
 + func sendSticker ( sticker : ACSticker ) { 
 Actor . sendStickerWithPeer ( self . peer , withSticker : sticker ) 
 - 
 } 
 - 
 - deinit { 
 - print ( " conversation controller deinit ' ed " ) 
 - } 
 - 
 - 
 } 
 
 class AABarAvatarView : AAAvatarView {

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index 0428791 . . 706ac5f 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 273 , 7 + 273 , 6 @ @ 
 	 	 BE2621571C4656D700A817AB / * AAConvActionSheet . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / ; } ; 
 	 	 BE2621591C4656EE00A817AB / * AAThumbnailView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE2621581C4656EE00A817AB / * AAThumbnailView . swift * / ; } ; 
 	 	 BEAC2B311C42D683007F7A2F / * libopus . a in Frameworks * / = { isa = PBXBuildFile ; fileRef = 15F89F001C211FDE00776ACD / * libopus . a * / ; } ; 
 - 	 	 BEF11DB51C4657D20076400A / * AAASAssetManager . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / ; } ; 
 	 	 BEF11DB61C466D800076400A / * begin _ record . caf in Resources * / = { isa = PBXBuildFile ; fileRef = 153F6B3C1C2A9B1900C0B960 / * begin _ record . caf * / ; } ; 
 	 	 BEFE68D51C4657360001F2D6 / * AAThumbnailCollectionCell . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BEFE68D41C4657360001F2D6 / * AAThumbnailCollectionCell . swift * / ; } ; 
 / * End PBXBuildFile section * / 
 @ @ - 555 , 7 + 554 , 6 @ @ 
 	 	 BE237C9C1C422FFA00060648 / * AAStickersView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAStickersView . swift ; sourceTree = " < group > " ; } ; 
 	 	 BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAConvActionSheet . swift ; sourceTree = " < group > " ; } ; 
 	 	 BE2621581C4656EE00A817AB / * AAThumbnailView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAThumbnailView . swift ; sourceTree = " < group > " ; } ; 
 - 	 	 BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAASAssetManager . swift ; sourceTree = " < group > " ; } ; 
 	 	 BEFE68D41C4657360001F2D6 / * AAThumbnailCollectionCell . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAThumbnailCollectionCell . swift ; sourceTree = " < group > " ; } ; 
 / * End PBXFileReference section * / 
 
 @ @ - 1320 , 7 + 1318 , 6 @ @ 
 	 	 BE26215A1C4656F100A817AB / * Manager * / = { 
 	 	 	 isa = PBXGroup ; 
 	 	 	 children = ( 
 - 	 	 	 	 BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / , 
 	 	 	 ) ; 
 	 	 	 name = Manager ; 
 	 	 	 sourceTree = " < group > " ; 
 @ @ - 1692 , 7 + 1689 , 6 @ @ 
 	 	 	 	 15D35F671C20187E00E3717A / * NSObject + TGLock . m in Sources * / , 
 	 	 	 	 15D35F5C1C20187E00E3717A / * AAAudioPlayer . m in Sources * / , 
 	 	 	 	 152AA8BF1C298C4B0030DEEE / * AASettingsLastSeenController . swift in Sources * / , 
 - 	 	 	 	 BEF11DB51C4657D20076400A / * AAASAssetManager . swift in Sources * / , 
 	 	 	 	 066A51561BC4BEF5000E606E / * AALocalized . swift in Sources * / , 
 	 	 	 	 069CF4CF1BCB909A00C66E12 / * CLToken . m in Sources * / , 
 	 	 	 	 15D35F751C201B6B00E3717A / * AACustomPresentationController . swift in Sources * / , 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 index b6bf9c5 . . 006ea4f 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 @ @ - 37 , 7 + 37 , 6 @ @ public extension ACCocoaMessenger { 
 let path = CocoaFiles . pathFromDescriptor ( descriptor ) ; 
 
 videoData . writeToFile ( path , atomically : true ) / / write to file 
 - 
 
 / / get video duration 
 
 @ @ - 55 , 8 + 54 , 9 @ @ public extension ACCocoaMessenger { 
 do { 
 let imageRef = try imageGenerator . copyCGImageAtTime ( thumbnailTime , actualTime : nil ) 
 let thumbnail = UIImage ( CGImage : imageRef ) 
 - let thumbData = UIImageJPEGRepresentation ( thumbnail , 0 . 55 ) ; / / thumbnail binary data 
 - let fastThumb = ACFastThumb ( int : jint ( thumbnail . size . width ) , withInt : jint ( thumbnail . size . height ) , withByteArray : thumbData ! . toJavaBytes ( ) ) 
 + let thumb = thumbnail . resizeSquare ( 90 , maxH : 90 ) ; 
 + let thumbData = UIImageJPEGRepresentation ( thumb , 0 . 55 ) ; / / thumbnail binary data 
 + let fastThumb = ACFastThumb ( int : jint ( thumb . size . width ) , withInt : jint ( thumb . size . height ) , withByteArray : thumbData ! . toJavaBytes ( ) ) 
 
 print ( " video upload imageRef = \ ( imageRef ) " ) 
 print ( " video upload thumbnail = \ ( thumbnail ) " ) 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 index a70b6c6 . . 01a0edb 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 @ @ - 40 , 11 + 40 , 8 @ @ public class ActorSDK { 
 / / / Server Endpoints 
 public var endpoints = [ 
 " tls : / / front1 - mtproto - api - rev2 . actor . im " , 
 - " tls : / / front2 - mtproto - api - rev2 . actor . im " , 
 + " tls : / / front2 - mtproto - api - rev2 . actor . im " 
 
 - " tcp : / / front1 - mtproto - api - rev3 . actor . im : 443 " , 
 - " tcp : / / front2 - mtproto - api - rev3 . actor . im : 443 " , 
 - " tcp : / / front3 - mtproto - api - rev3 . actor . im : 443 " 
 ] { 
 didSet { 
 trustedKeys = [ ] 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift 
 deleted file mode 100644 
 index 1850eeb . . 0000000 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift 
 + + + / dev / null 
 @ @ - 1 , 250 + 0 , 0 @ @ 
 - / / 
 - / / AAASAssetManager . swift 
 - / / ActorSDK 
 - / / 
 - / / Created by kioshimafx on 1 / 13 / 16 . 
 - / / Copyright © 2016 Steve Kite . All rights reserved . 
 - / / 
 - 
 - import UIKit 
 - import AssetsLibrary 
 - 
 - let ASSET _ PHOTO _ THUMBNAIL : Int = 0 
 - let ASSET _ PHOTO _ ASPECT _ THUMBNAIL : Int = 1 
 - let ASSET _ PHOTO _ SCREEN _ SIZE : Int = 2 
 - let ASSET _ PHOTO _ FULL _ RESOLUTION : Int = 3 
 - 
 - let kNotificationSendPhotos = " NotificationSendPhotos " 
 - let kNotificationUpdateSelected = " NotificationUpdateSelected " 
 - 
 - class AAAssetPhoto { 
 - 
 - var asset : ALAsset ! 
 - var index : Int ! 
 - var isSelected : Bool ! 
 - var groupIndex : String ! 
 - 
 - var group : Int ! 
 - 
 - init ( groupIn : Int , indexIn : Int , assetIn : ALAsset ) { 
 - 
 - self . group = groupIn 
 - self . index = indexIn 
 - self . asset = assetIn 
 - self . isSelected = true 
 - 
 - self . groupIndex = " \ ( group ) - \ ( index ) " 
 - 
 - } 
 - 
 - } 
 - 
 - class AAASAssetManager : NSObject { 
 - 
 - / / # # # singleton # # # 
 - static let sharedInstance = AAASAssetManager ( ) 
 - 
 - var maxSelected : Int ! 
 - var currentGroupIndex : Int ! 
 - 
 - / / / 
 - 
 - var assetPhotos : Array < ALAsset > ! 
 - var selectedPhotos : Array < AAAssetPhoto > ! 
 - 
 - / / / 
 - 
 - var assetsLibrary : ALAssetsLibrary ! 
 - var assetGroups : Array < ALAssetsGroup > ! 
 - var selectedAsset : ALAsset ! 
 - 
 - override init ( ) { 
 - 
 - self . selectedPhotos = Array < AAAssetPhoto > ( ) 
 - self . assetsLibrary = ALAssetsLibrary ( ) 
 - self . assetsLibrary . writeImageToSavedPhotosAlbum ( nil , metadata : nil ) { ( _ , _ ) - > Void in 
 - / / 
 - } 
 - 
 - } 
 - 
 - / / messages _ setActivity ( user _ id : Int , reqResponse : ( VKResponse ! ) - > ( ) 
 - 
 - func getSavedPhotoList ( result : ( Array < AnyObject > ! ) - > ( ) , error : ( String ) - > ( ) ) { 
 - 
 - 
 - dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { ( ) - > Void in 
 - / / 
 - } 
 - 
 - 
 - } 
 - 
 - 
 - func getGroupCount ( ) - > Int { 
 - return self . assetGroups . count 
 - } 
 - 
 - func getPhotoCountOfCurrentGroup ( ) - > Int { 
 - return self . assetPhotos . count 
 - } 
 - 
 - func getSelectedPhotoCount ( ) - > Int { 
 - 
 - let selectedArray = self . selectedPhotos . filter ( { 
 - $ 0 . isSelected = = true 
 - } ) 
 - 
 - return selectedArray . count 
 - } 
 - 
 - func clearData ( ) { 
 - 
 - self . selectedPhotos . removeAll ( ) 
 - self . assetGroups . removeAll ( ) 
 - self . assetPhotos . removeAll ( ) 
 - 
 - 
 - self . selectedPhotos = nil 
 - self . assetGroups = nil 
 - self . assetPhotos = nil 
 - 
 - } 
 - 
 - / / / / 
 - 
 - 
 - func getImageFromAsset ( asset : ALAsset , type : Int ) - > UIImage { 
 - / * 
 - NSString * strXMP = asset . defaultRepresentation . metadata [ @ " AdjustmentXMP " ] ; 
 - if ( strXMP = = nil | | [ strXMP isKindOfClass : [ NSNull class ] ] ) 
 - { 
 - iRef = [ asset . defaultRepresentation fullResolutionImage ] ; 
 - return [ UIImage imageWithCGImage : iRef scale : 1 . 0 orientation : ( UIImageOrientation ) asset . defaultRepresentation . orientation ] ; 
 - } 
 - else 
 - { 
 - NSData * dXMP = [ strXMP dataUsingEncoding : NSUTF8StringEncoding ] ; 
 - 
 - CIImage * image = [ CIImage imageWithCGImage : asset . defaultRepresentation . fullResolutionImage ] ; 
 - 
 - NSError * error = nil ; 
 - NSArray * filterArray = [ CIFilter filterArrayFromSerializedXMP : dXMP 
 - inputImageExtent : image . extent 
 - error : & error ] ; 
 - if ( error ) { 
 - NSLog ( @ " Error during CIFilter creation : % @ " , [ error localizedDescription ] ) ; 
 - } 
 - 
 - for ( CIFilter * filter in filterArray ) { 
 - [ filter setValue : image forKey : kCIInputImageKey ] ; 
 - image = [ filter outputImage ] ; 
 - } 
 - CIContext * context = [ CIContext contextWithOptions : nil ] ; 
 - CGImageRef cgimage = [ context createCGImage : image fromRect : [ image extent ] ] ; 
 - UIImage * iImage = [ UIImage imageWithCGImage : cgimage scale : 1 . 0 orientation : ( UIImageOrientation ) asset . defaultRepresentation . orientation ] ; 
 - return iImage ; 
 - * / 
 - 
 - var imageRef : CGImageRef ! 
 - 
 - if ( type = = ASSET _ PHOTO _ THUMBNAIL ) { 
 - imageRef = asset . thumbnail ( ) as ! CGImageRef 
 - } else if ( type = = ASSET _ PHOTO _ ASPECT _ THUMBNAIL ) { 
 - imageRef = asset . aspectRatioThumbnail ( ) as ! CGImageRef 
 - } else if ( type = = ASSET _ PHOTO _ SCREEN _ SIZE ) { 
 - imageRef = asset . defaultRepresentation ( ) as ! CGImageRef 
 - } else if ( type = = ASSET _ PHOTO _ FULL _ RESOLUTION ) { 
 - imageRef = asset . defaultRepresentation ( ) as ! CGImageRef 
 - / / let strXMP = asset . defaultRepresentation ( ) . metadata ( ) [ " AdjustmentXMP " ] 
 - 
 - 
 - 
 - 
 - } 
 - 
 - return UIImage ( CGImage : imageRef ) 
 - } 
 - 
 - func getImageAtIndex ( nIndex : Int , nType : Int ) - > UIImage { 
 - return getImageFromAsset ( self . assetPhotos [ nIndex ] , type : nType ) 
 - } 
 - 
 - func getImagePreviewAtIndex ( nIndex : Int , nType : Int ) - > UIImage { 
 - let photoObj = self . selectedPhotos [ nIndex ] 
 - return getImageFromAsset ( photoObj . asset , type : nType ) 
 - } 
 - 
 - func getAssetAtIndex ( index : Int ) - > ALAsset { 
 - return self . assetPhotos [ index ] 
 - } 
 - 
 - func getGroupAtIndex ( index : Int ) - > ALAssetsGroup { 
 - return self . assetGroups [ index ] 
 - } 
 - 
 - func sendSelectedPhotos ( type : Int ) - > Array < UIImage > { 
 - 
 - var sendArray = Array < UIImage > ( ) 
 - 
 - for ( _ , photoObj ) in self . selectedPhotos . enumerate ( ) { 
 - 
 - let image = self . getImageFromAsset ( photoObj . asset , type : type ) 
 - sendArray . append ( image ) 
 - 
 - } 
 - 
 - self . selectedPhotos . removeAll ( ) 
 - 
 - return sendArray 
 - } 
 - 
 - func addObjectWithIndex ( index : Int ) { 
 - 
 - let model = AAAssetPhoto ( groupIn : self . currentGroupIndex , indexIn : index , assetIn : self . assetPhotos [ index ] ) 
 - 
 - self . selectedPhotos . append ( model ) 
 - 
 - / / [ [ NSNotificationCenter defaultCenter ] postNotificationName : kNotificationUpdateSelected object : nil ] ; 
 - 
 - } 
 - 
 - 
 - func removeObjectWithIndex ( index : Int ) { 
 - 
 - let groupIndex = " \ ( self . currentGroupIndex ! ) - \ ( index ) " 
 - 
 - let results = self . selectedPhotos . filter ( { 
 - $ 0 . groupIndex = = groupIndex 
 - } ) 
 - 
 - if ( results . count > 0 ) { 
 - 
 - / / let model = results [ 0 ] 
 - 
 - 
 - } 
 - 
 - 
 - } 
 - 
 - 
 - func currentGroupFirstIndex ( ) - > Int { 
 - 
 - let results = self . selectedPhotos . filter ( { 
 - $ 0 . group = = self . currentGroupIndex 
 - } ) 
 - 
 - if ( results . count > 0 ) { 
 - 
 - let model = results [ 0 ] 
 - return model . index 
 - 
 - } 
 - 
 - return 0 
 - } 
 - 
 - 
 - 
 - } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift 
 index d235ec3 . . d0bc182 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift 
 @ @ - 12 , 21 + 12 , 27 @ @ protocol AAActionSheetDelegate { 
 func actionSheetDidFinished ( selectedObjs : Array < AnyObject > ) 
 } 
 
 + let screenWidth = UIScreen . mainScreen ( ) . bounds . size . width 
 + let screenHeigth = UIScreen . mainScreen ( ) . bounds . size . height 
 + 
 class AAConvActionSheet : UIView { 
 
 var delegate : AAActionSheetDelegate ? 
 
 var sheetView : UIView ! 
 - var btnAlbum : UIButton ! 
 + 
 var btnCamera : UIButton ! 
 + var btnLibrary : UIButton ! 
 + var btnDocuments : UIButton ! 
 + var btnLocation : UIButton ! 
 + var btnContact : UIButton ! 
 var btnCancel : UIButton ! 
 - var thumbnailView : AAThumbnailView ! 
 + 
 + var thumbnailView = AAThumbnailView ( ) 
 
 weak var weakSuper : ConversationViewController ! 
 
 
 - let screenWidth = UIScreen . mainScreen ( ) . bounds . size . width 
 - let screenHeigth = UIScreen . mainScreen ( ) . bounds . size . height 
 
 init ( maxSelected : Int , weakSuperIn : ConversationViewController ) { 
 super . init ( frame : CGRectZero ) 
 @ @ - 48 , 14 + 54 , 12 @ @ class AAConvActionSheet : UIView { 
 
 self . alpha = 0 
 self . frame = CGRectMake ( 0 , 0 , screenWidth , screenHeigth ) 
 - self . backgroundColor = UIColor . clearColor ( ) 
 + self . backgroundColor = UIColor . blackColor ( ) . colorWithAlphaComponent ( 0 . 5 ) 
 + 
 
 - self . addSubview ( self . sheetView ) 
 
 - / / self . sheetView . addSubview ( self . btnCancel ) 
 - / / self . sheetView . addSubview ( self . btnAlbum ) 
 - / / self . sheetView . addSubview ( self . btnCamera ) 
 - / / self . sheetView . addSubview ( self . thumbnailView ) 
 + / / make photo 
 + 
 
 self . configNotification ( ) 
 
 @ @ - 63 , 17 + 67 , 13 @ @ class AAConvActionSheet : UIView { 
 
 func configNotification ( ) { 
 
 - NSNotificationCenter . defaultCenter ( ) . addObserver ( self , selector : " " , name : kNotificationSendPhotos , object : nil ) 
 - NSNotificationCenter . defaultCenter ( ) . addObserver ( self , selector : " " , name : kNotificationUpdateSelected , object : nil ) 
 
 } 
 
 deinit { 
 
 self . weakSuper = nil 
 - 
 - AAASAssetManager . sharedInstance . clearData ( ) 
 - NSNotificationCenter . defaultCenter ( ) . removeObserver ( self ) 
 + 
 
 } 
 
 @ @ - 81 , 19 + 81 , 22 @ @ class AAConvActionSheet : UIView { 
 func showAnimation ( ) { 
 
 / / self . btnCamera . selected = true 
 - / / self . thumbnailView . reloadView ( ) 
 / / self . btnCamera . setTitle ( " Camera " , forState : UIControlState . Normal ) 
 
 var frame = self . sheetView . frame 
 - frame . origin . y = screenHeigth - 350 
 + frame . origin . y = screenHeigth - 400 
 
 UIView . animateWithDuration ( 0 . 25 ) { ( ) - > Void in 
 self . sheetView . frame = frame 
 self . alpha = 1 
 
 + self . thumbnailView . open ( ) 
 + self . thumbnailView . reloadView ( ) 
 + 
 } 
 
 
 + 
 } 
 
 func cancelAnimation ( ) { 
 @ @ - 101 , 10 + 104 , 10 @ @ class AAConvActionSheet : UIView { 
 var frame = self . sheetView . frame 
 frame . origin . y = screenHeigth 
 
 - UIView . animateWithDuration ( 0 . 25 ) { ( ) - > Void in 
 + UIView . animateWithDuration ( 0 . 25 , animations : { ( ) - > Void in 
 self . sheetView . frame = frame 
 self . alpha = 0 
 - 
 + } ) { ( bool ) - > Void in 
 } 
 
 } 
 @ @ - 117 , 21 + 120 , 128 @ @ class AAConvActionSheet : UIView { 
 
 
 / / sheet view 
 - let frame = CGRectMake ( 0 , screenHeigth , screenWidth , 350 ) 
 + let frame = CGRectMake ( 0 , screenHeigth , screenWidth , 400 ) 
 self . sheetView = UIView ( frame : frame ) 
 - self . sheetView . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 231 . 0 / 255 . 0 , blue : 234 . 0 / 255 . 0 , alpha : 1 ) 
 - 
 - 
 - / / button cancel 
 - 
 - self . btnCancel = UIButton ( type : UIButtonType . Custom ) 
 - 
 - / / thumbnail view 
 - 
 - 
 + self . sheetView . backgroundColor = UIColor . whiteColor ( ) 
 
 + self . addSubview ( self . sheetView ) 
 
 + self . btnCamera = UIButton ( type : UIButtonType . System ) 
 + self . btnLibrary = UIButton ( type : UIButtonType . System ) 
 + self . btnDocuments = UIButton ( type : UIButtonType . System ) 
 + self . btnLocation = UIButton ( type : UIButtonType . System ) 
 + self . btnContact = UIButton ( type : UIButtonType . System ) 
 + self . btnCancel = UIButton ( type : UIButtonType . System ) 
 + 
 + / / color 
 + 
 + self . btnCamera . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) 
 + self . btnLibrary . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) 
 + self . btnDocuments . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) 
 + self . btnLocation . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) 
 + self . btnContact . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) 
 + self . btnCancel . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) 
 + 
 + / / font size 
 + 
 + self . btnCamera . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) 
 + self . btnLibrary . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) 
 + self . btnDocuments . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) 
 + self . btnLocation . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) 
 + self . btnContact . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) 
 + self . btnCancel . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) 
 + 
 + / / add buttons as subivews 
 + 
 + self . sheetView . addSubview ( self . btnCamera ) 
 + self . sheetView . addSubview ( self . btnLibrary ) 
 + self . sheetView . addSubview ( self . btnDocuments ) 
 + self . sheetView . addSubview ( self . btnLocation ) 
 + self . sheetView . addSubview ( self . btnContact ) 
 + self . sheetView . addSubview ( self . btnCancel ) 
 + self . sheetView . addSubview ( self . thumbnailView ) 
 + 
 + self . thumbnailView . frame = CGRectMake ( 0 , 5 , screenWidth , 100 ) 
 + self . btnCamera . frame = CGRectMake ( 0 , 100 , screenWidth , 50 ) 
 + self . btnLibrary . frame = CGRectMake ( 0 , 150 , screenWidth , 50 ) 
 + self . btnDocuments . frame = CGRectMake ( 0 , 200 , screenWidth , 50 ) 
 + self . btnLocation . frame = CGRectMake ( 0 , 250 , screenWidth , 50 ) 
 + self . btnContact . frame = CGRectMake ( 0 , 300 , screenWidth , 50 ) 
 + self . btnCancel . frame = CGRectMake ( 0 , 350 , screenWidth , 50 ) 
 + 
 + / / separators 
 + 
 + let spearator1 = UIView ( frame : CGRectMake ( 0 , 99 , screenWidth , 1 ) ) 
 + spearator1 . backgroundColor = UIColor ( red : 223 . 9 / 255 . 0 , green : 223 . 9 / 255 . 0 , blue : 223 . 9 / 255 . 0 , alpha : 0 . 6 ) 
 + let spearator2 = UIView ( frame : CGRectMake ( 10 , 149 , screenWidth - 20 , 1 ) ) 
 + spearator2 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) 
 + let spearator3 = UIView ( frame : CGRectMake ( 10 , 199 , screenWidth - 20 , 1 ) ) 
 + spearator3 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) 
 + let spearator4 = UIView ( frame : CGRectMake ( 10 , 249 , screenWidth - 20 , 1 ) ) 
 + spearator4 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) 
 + let spearator5 = UIView ( frame : CGRectMake ( 10 , 299 , screenWidth - 20 , 1 ) ) 
 + spearator5 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) 
 + let spearator6 = UIView ( frame : CGRectMake ( 10 , 349 , screenWidth - 20 , 1 ) ) 
 + spearator6 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) 
 + 
 + / / add separatos as subview 
 + 
 + self . sheetView . addSubview ( spearator1 ) 
 + self . sheetView . addSubview ( spearator2 ) 
 + self . sheetView . addSubview ( spearator3 ) 
 + self . sheetView . addSubview ( spearator4 ) 
 + self . sheetView . addSubview ( spearator5 ) 
 + self . sheetView . addSubview ( spearator6 ) 
 + 
 + / / set title for buttons 
 + 
 + self . btnCamera . setTitle ( AALocalized ( " PhotoCamera " ) , forState : UIControlState . Normal ) 
 + self . btnLibrary . setTitle ( AALocalized ( " PhotoLibrary " ) , forState : UIControlState . Normal ) 
 + self . btnDocuments . setTitle ( AALocalized ( " SendDocument " ) , forState : UIControlState . Normal ) 
 + self . btnLocation . setTitle ( AALocalized ( " ShareLocation " ) , forState : UIControlState . Normal ) 
 + self . btnContact . setTitle ( AALocalized ( " ShareContact " ) , forState : UIControlState . Normal ) 
 + self . btnCancel . setTitle ( AALocalized ( " AlertCancel " ) , forState : UIControlState . Normal ) 
 + 
 + / / add actins 
 + 
 + self . btnCamera . addTarget ( self , action : " btnCameraAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + self . btnLibrary . addTarget ( self , action : " btnLibraryAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + self . btnDocuments . addTarget ( self , action : " btnDocumentAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + self . btnLocation . addTarget ( self , action : " btnLocationAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + self . btnContact . addTarget ( self , action : " btnContactAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + self . btnCancel . addTarget ( self , action : " btnCloseAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + 
 + } 
 + 
 + / / MARK : - Button ' s actions 
 + 
 + func btnCameraAction ( ) { 
 + cancelAnimation ( ) 
 + self . weakSuper . pickImage ( . Camera ) 
 } 
 
 + func btnLibraryAction ( ) { 
 + cancelAnimation ( ) 
 + self . weakSuper . pickImage ( . PhotoLibrary ) 
 + } 
 + 
 + func btnDocumentAction ( ) { 
 + cancelAnimation ( ) 
 + self . weakSuper . pickDocument ( ) 
 + } 
 + 
 + func btnLocationAction ( ) { 
 + cancelAnimation ( ) 
 + self . weakSuper . pickLocation ( ) 
 + } 
 + 
 + func btnContactAction ( ) { 
 + cancelAnimation ( ) 
 + self . weakSuper . pickContact ( ) 
 + } 
 + 
 + func btnCloseAction ( ) { 
 + cancelAnimation ( ) 
 + } 
 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift 
 index 41da72f . . d53eb8e 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift 
 @ @ - 47 , 12 + 47 , 16 @ @ class AAThumbnailCollectionCell : UICollectionViewCell { 
 override func layoutSubviews ( ) { 
 super . layoutSubviews ( ) 
 
 + self . imgThumbnails . frame = CGRectMake ( 0 , 0 , self . contentView . frame . size . width , self . contentView . frame . size . height ) 
 + self . imgSelected . frame = CGRectMake ( 0 , 0 , self . contentView . frame . size . width , self . contentView . frame . size . height ) 
 + 
 
 } 
 
 override func prepareForReuse ( ) { 
 super . prepareForReuse ( ) 
 
 + self . imgSelected . image = nil 
 
 } 
 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift 
 index 8267e7a . . bb33b2e 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift 
 @ @ - 7 , 16 + 7 , 40 @ @ 
 / / 
 
 import UIKit 
 + import Photos 
 + 
 + public enum ImagePickerMediaType { 
 + case Image 
 + case Video 
 + case ImageAndVideo 
 + } 
 
 class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSource { 
 
 var collectionView : UICollectionView ! 
 + let mediaType : ImagePickerMediaType = ImagePickerMediaType . Image 
 + 
 + private var assets = [ PHAsset ] ( ) 
 + private let imageManager = PHCachingImageManager ( ) 
 + 
 + private let minimumPreviewHeight : CGFloat = 70 
 + private var maximumPreviewHeight : CGFloat = 70 
 + 
 + private lazy var requestOptions : PHImageRequestOptions = { 
 + let options = PHImageRequestOptions ( ) 
 + options . deliveryMode = . HighQualityFormat 
 + options . resizeMode = . Fast 
 + 
 + return options 
 + } ( ) 
 + 
 + private let previewCollectionViewInset : CGFloat = 5 
 
 
 override init ( frame : CGRect ) { 
 super . init ( frame : frame ) 
 
 - self . configUI ( ) 
 + self . collectionViewSetup ( ) 
 
 } 
 
 @ @ - 26 , 23 + 50 , 123 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 
 / / / 
 
 - func configUI ( ) { 
 - self . collectionViewSetup ( ) 
 - self . addSubview ( self . collectionView ) 
 + func open ( ) { 
 + 
 + if PHPhotoLibrary . authorizationStatus ( ) = = . Authorized { 
 + fetchAssets ( ) 
 + self . collectionView . reloadData ( ) 
 + } else if PHPhotoLibrary . authorizationStatus ( ) = = . NotDetermined { 
 + PHPhotoLibrary . requestAuthorization ( ) { status in 
 + if status = = . Authorized { 
 + dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { 
 + self . fetchAssets ( ) 
 + self . collectionView . reloadData ( ) 
 + } 
 + } 
 + } 
 + } 
 + 
 + } 
 + 
 + private func fetchAssets ( ) { 
 + let options = PHFetchOptions ( ) 
 + options . sortDescriptors = [ NSSortDescriptor ( key : " creationDate " , ascending : false ) ] 
 + 
 + / / switch mediaType { 
 + / / case . Image : 
 + / / options . predicate = NSPredicate ( format : " mediaType = % d " , PHAssetMediaType . Image . rawValue ) 
 + / / case . Video : 
 + / / options . predicate = NSPredicate ( format : " mediaType = % d " , PHAssetMediaType . Video . rawValue ) 
 + / / case . ImageAndVideo : 
 + / / options . predicate = NSPredicate ( format : " mediaType = % d OR mediaType = % d " , PHAssetMediaType . Image . rawValue , PHAssetMediaType . Video . rawValue ) 
 + / / } 
 + 
 + options . predicate = NSPredicate ( format : " mediaType = % d " , PHAssetMediaType . Image . rawValue ) 
 + 
 + let fetchLimit = 50 
 + if # available ( iOS 9 , * ) { 
 + options . fetchLimit = fetchLimit 
 + } 
 + 
 + let result = PHAsset . fetchAssetsWithOptions ( options ) 
 + let requestOptions = PHImageRequestOptions ( ) 
 + requestOptions . synchronous = true 
 + requestOptions . deliveryMode = . FastFormat 
 + 
 + result . enumerateObjectsUsingBlock { asset , _ , stop in 
 + defer { 
 + if self . assets . count > fetchLimit { 
 + stop . initialize ( true ) 
 + } 
 + } 
 + 
 + if let asset = asset as ? PHAsset { 
 + self . imageManager . requestImageDataForAsset ( asset , options : requestOptions ) { data , _ , _ , info in 
 + if data ! = nil { 
 + self . assets . append ( asset ) 
 + } 
 + } 
 + } 
 + } 
 + } 
 + 
 + private func prefetchImagesForAsset ( asset : PHAsset ) { 
 + let targetSize = sizeForAsset ( asset , scale : UIScreen . mainScreen ( ) . scale ) 
 + imageManager . startCachingImagesForAssets ( [ asset ] , targetSize : targetSize , contentMode : . AspectFill , options : requestOptions ) 
 + } 
 + 
 + private func requestImageForAsset ( asset : PHAsset , completion : ( image : UIImage ? ) - > ( ) ) { 
 + let targetSize = sizeForAsset ( asset , scale : UIScreen . mainScreen ( ) . scale ) 
 + requestOptions . synchronous = true 
 + 
 + / / Workaround because PHImageManager . requestImageForAsset doesn ' t work for burst images 
 + if asset . representsBurst { 
 + imageManager . requestImageDataForAsset ( asset , options : requestOptions ) { data , _ , _ , _ in 
 + let image = data . flatMap { UIImage ( data : $ 0 ) } 
 + completion ( image : image ) 
 + } 
 + } 
 + else { 
 + imageManager . requestImageForAsset ( asset , targetSize : targetSize , contentMode : . AspectFill , options : requestOptions ) { image , _ in 
 + completion ( image : image ) 
 + } 
 + } 
 + } 
 + 
 + private func sizeForAsset ( asset : PHAsset , scale : CGFloat = 1 ) - > CGSize { 
 + let proportion = CGFloat ( asset . pixelWidth ) / CGFloat ( asset . pixelHeight ) 
 + 
 + let imageHeight = maximumPreviewHeight - 2 * previewCollectionViewInset 
 + let imageWidth = floor ( proportion * imageHeight ) 
 + 
 + return CGSize ( width : imageWidth * scale , height : imageHeight * scale ) 
 } 
 
 / / / collection view delegate 
 
 func numberOfSectionsInCollectionView ( collectionView : UICollectionView ) - > Int { 
 - return 0 
 + return 1 
 } 
 
 func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) - > Int { 
 - return 0 
 + print ( " ASSSEEETS = = = \ ( self . assets . count ) " ) 
 + return self . assets . count 
 } 
 
 func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) - > UICollectionViewCell { 
 - return UICollectionViewCell ( ) 
 + 
 + let cell = self . collectionView . dequeueReusableCellWithReuseIdentifier ( " AAThumbnailCollectionCell " , forIndexPath : indexPath ) as ! AAThumbnailCollectionCell 
 + 
 + cell . backgroundColor = UIColor . whiteColor ( ) 
 + 
 + let asset = assets [ indexPath . row ] 
 + 
 + requestImageForAsset ( asset ) { image in 
 + cell . imgSelected . image = image 
 + } 
 + 
 + 
 + return cell 
 } 
 
 / / / 
 @ @ - 52 , 43 + 176 , 41 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 } 
 
 func collectionViewSetup ( ) { 
 - 
 - if ( self . collectionView = = nil ) { 
 - 
 - let flowLayout = UICollectionViewFlowLayout ( ) 
 - flowLayout . scrollDirection = . Horizontal 
 - flowLayout . minimumLineSpacing = 4 
 - flowLayout . sectionInset = UIEdgeInsetsMake ( 5 . 0 , 4 . 0 , 5 . 0 , 4 . 0 ) 
 - 
 - flowLayout . itemSize = CGSizeMake ( 105 , 180 ) 
 - 
 - self . collectionView = UICollectionView ( frame : self . bounds , collectionViewLayout : flowLayout ) 
 - self . collectionView . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 231 . 0 / 255 . 0 , blue : 234 . 0 / 255 . 0 , alpha : 1 . 0 ) 
 - self . collectionView . showsHorizontalScrollIndicator = false 
 - self . collectionView . delegate = self 
 - self . collectionView . dataSource = self 
 - 
 - self . collectionView . registerClass ( AAThumbnailCollectionCell . self , forCellWithReuseIdentifier : " AAThumbnailCollectionCell " ) 
 - 
 - / / AAASAssetManager . sharedInstance 
 - 
 - / * 
 - 
 - [ [ UUAssetManager sharedInstance ] getGroupList : ^ ( NSArray * obj ) { 
 - 
 - [ [ UUAssetManager sharedInstance ] getPhotoListOfGroupByIndex : [ UUAssetManager sharedInstance ] . currentGroupIndex result : ^ ( NSArray * obj ) { 
 - 
 - [ _ collectionView reloadData ] ; 
 - 
 - } ] ; 
 - } ] ; 
 
 - * / 
 - 
 - 
 - 
 - } 
 + let flowLayout = UICollectionViewFlowLayout ( ) 
 + flowLayout . scrollDirection = . Horizontal 
 + flowLayout . minimumLineSpacing = 4 
 + flowLayout . sectionInset = UIEdgeInsetsMake ( 5 . 0 , 4 . 0 , 5 . 0 , 4 . 0 ) 
 + 
 + flowLayout . itemSize = CGSizeMake ( 90 , 90 ) 
 + 
 + self . collectionView = UICollectionView ( frame : self . bounds , collectionViewLayout : flowLayout ) 
 + self . collectionView . backgroundColor = UIColor . clearColor ( ) 
 + self . collectionView . showsHorizontalScrollIndicator = false 
 + self . collectionView . delegate = self 
 + self . collectionView . dataSource = self 
 + self . collectionView . frame = CGRectMake ( 0 , 0 , screenWidth , 80 ) 
 + 
 + self . collectionView . registerClass ( AAThumbnailCollectionCell . self , forCellWithReuseIdentifier : " AAThumbnailCollectionCell " ) 
 + 
 + self . addSubview ( self . collectionView ) 
 
 } 
 
 + func imageByCroppingImage ( image : UIImage , toSize : CGSize ) - > UIImage { 
 + 
 + let refWidth = CGImageGetWidth ( image . CGImage ) 
 + let refHeight = CGImageGetHeight ( image . CGImage ) 
 + 
 + let x = CGFloat ( ( refWidth - Int ( toSize . width ) ) / 2 ) 
 + let y = CGFloat ( ( refHeight - Int ( toSize . height ) ) / 2 ) 
 + 
 + let cropRect = CGRectMake ( x , y , toSize . height , toSize . width ) 
 + let imageRef = CGImageCreateWithImageInRect ( image . CGImage , cropRect ) ! as CGImageRef 
 + 
 + let cropped = UIImage ( CGImage : imageRef , scale : 0 . 0 , orientation : UIImageOrientation . Up ) 
 + 
 + return cropped ; 
 + } 
 + 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 index 119c94c . . e34b500 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 @ @ - 88 , 11 + 88 , 6 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 self . rightButton . enabled = true 
 self . rightButton . layoutIfNeeded ( ) 
 
 - / / self . rightButton . setTitle ( AALocalized ( " ChatSend " ) , forState : UIControlState . Normal ) 
 - / / self . rightButton . setTitleColor ( appStyle . chatSendColor , forState : UIControlState . Normal ) 
 - / / self . rightButton . setTitleColor ( appStyle . chatSendDisabledColor , forState : UIControlState . Disabled ) 
 - / / self . rightButton . setImage ( nil , forState : UIControlState . Normal ) 
 - 
 / / 
 
 self . audioButton = UIButton ( type : UIButtonType . Custom ) 
 @ @ - 496 , 7 + 491 , 7 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 
 showActionSheet ( builder . items , cancelButton : " AlertCancel " , destructButton : nil , sourceView : self . leftButton , sourceRect : self . leftButton . bounds , tapClosure : builder . tapClosure ) 
 
 - / / self . actionSheet . showAnimation ( ) 
 + / / self . actionSheet . showAnimation ( ) 
 
 self . rightButton . layoutIfNeeded ( ) 
 } 
 @ @ - 615 , 7 + 610 , 9 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 func pickImage ( source : UIImagePickerControllerSourceType ) { 
 let pickerController = AAImagePickerController ( ) 
 pickerController . sourceType = source 
 - pickerController . mediaTypes = [ kUTTypeImage as String , kUTTypeMovie as String ] 
 + pickerController . mediaTypes = [ kUTTypeImage as String ] 
 + 
 + / / [ kUTTypeImage as String , kUTTypeMovie as String ] 
 
 / / / / Style controller bg 
 / / pickerController . view . backgroundColor = appStyle . vcBgColor
