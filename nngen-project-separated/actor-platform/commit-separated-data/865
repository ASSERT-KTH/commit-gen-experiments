BLEU SCORE: 0.11223910575107081

TEST MSG: fix ( server ) : fixed compilation error
GENERATED MSG: perf ( server ) : dissable fusing in HttpApiFrontend due to high cpu usage on connection upgrade

TEST DIFF (one line): diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > index fc709b4 . . 77c18a1 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > @ @ - 12 , 7 + 12 , 6 @ @ import im . actor . server . api . http . app . AppFilesHttpHandler < nl > import im . actor . server . api . http . status . StatusHttpHandler < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . persist . HttpApiTokenRepo < nl > - import im . actor . tls . TlsContext < nl > < nl > import scala . concurrent . Future < nl > import scala . concurrent . duration . _ < nl > @ @ - 72 , 14 + 71 , 13 @ @ private object HttpApiFrontend { < nl > ) : Unit = { < nl > HttpApiConfig . load ( serverConfig . getConfig ( " http " ) ) match { < nl > case Success ( apiConfig ) ⇒ < nl > - val tlsContext = TlsContext . load ( serverConfig . getConfig ( " tls . keystores " ) ) . right . toOption < nl > - start ( apiConfig , tlsContext ) < nl > + start ( apiConfig ) < nl > case Failure ( e ) ⇒ < nl > throw e < nl > } < nl > } < nl > < nl > - def start ( config : HttpApiConfig , tlsContext : Option [ TlsContext ] ) ( implicit system : ActorSystem ) : Unit = { < nl > + def start ( config : HttpApiConfig ) ( implicit system : ActorSystem ) : Unit = { < nl > implicit val mat = ActorMaterializer ( ) < nl > < nl > val status = new StatusHttpHandler < nl > @ @ - 94 , 7 + 92 , 7 @ @ private object HttpApiFrontend { < nl > Http ( ) . bind ( < nl > config . interface , < nl > config . port , < nl > - connectionContext = tlsContext map ( _ . asHttpsContext ) getOrElse Http ( ) . defaultServerHttpContext , < nl > + connectionContext = Http ( ) . defaultServerHttpContext , < nl > settings = defaultSettings . withTimeouts ( defaultSettings . timeouts . withIdleTimeout ( IdleTimeout ) ) < nl > ) < nl > . runForeach { conn ⇒
NEAREST DIFF (one line): diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > index 7c94e1a . . d1605f3 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > @ @ - 6 , 7 + 6 , 7 @ @ import akka . http . scaladsl . Http < nl > import akka . http . scaladsl . server . Directives . _ < nl > import akka . http . scaladsl . server . Route < nl > import akka . http . scaladsl . server . directives . Credentials < nl > - import akka . stream . { ActorMaterializer , Materializer } < nl > + import akka . stream . { ActorMaterializerSettings , ActorMaterializer , Materializer } < nl > import com . typesafe . config . Config < nl > import im . actor . server . api . http . app . AppFilesHttpHandler < nl > import im . actor . server . api . http . status . StatusHttpHandler < nl > @ @ - 67 , 8 + 67 , 7 @ @ private object HttpApiFrontend { < nl > < nl > def start ( serverConfig : Config ) ( < nl > implicit < nl > - system : ActorSystem , < nl > - materializer : Materializer < nl > + system : ActorSystem < nl > ) : Unit = { < nl > HttpApiConfig . load ( serverConfig . getConfig ( " http " ) ) match { < nl > case Success ( apiConfig ) ⇒ < nl > @ @ - 80 , 7 + 79 , 7 @ @ private object HttpApiFrontend { < nl > } < nl > < nl > def start ( config : HttpApiConfig , tlsContext : Option [ TlsContext ] ) ( implicit system : ActorSystem ) : Unit = { < nl > - implicit val mat = ActorMaterializer ( ) < nl > + implicit val mat = ActorMaterializer ( ActorMaterializerSettings ( system ) . withAutoFusing ( false ) ) < nl > < nl > val status = new StatusHttpHandler < nl > val app = new AppFilesHttpHandler ( config . staticFiles )

TEST DIFF:
diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 index fc709b4 . . 77c18a1 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 @ @ - 12 , 7 + 12 , 6 @ @ import im . actor . server . api . http . app . AppFilesHttpHandler 
 import im . actor . server . api . http . status . StatusHttpHandler 
 import im . actor . server . db . DbExtension 
 import im . actor . server . persist . HttpApiTokenRepo 
 - import im . actor . tls . TlsContext 
 
 import scala . concurrent . Future 
 import scala . concurrent . duration . _ 
 @ @ - 72 , 14 + 71 , 13 @ @ private object HttpApiFrontend { 
 ) : Unit = { 
 HttpApiConfig . load ( serverConfig . getConfig ( " http " ) ) match { 
 case Success ( apiConfig ) ⇒ 
 - val tlsContext = TlsContext . load ( serverConfig . getConfig ( " tls . keystores " ) ) . right . toOption 
 - start ( apiConfig , tlsContext ) 
 + start ( apiConfig ) 
 case Failure ( e ) ⇒ 
 throw e 
 } 
 } 
 
 - def start ( config : HttpApiConfig , tlsContext : Option [ TlsContext ] ) ( implicit system : ActorSystem ) : Unit = { 
 + def start ( config : HttpApiConfig ) ( implicit system : ActorSystem ) : Unit = { 
 implicit val mat = ActorMaterializer ( ) 
 
 val status = new StatusHttpHandler 
 @ @ - 94 , 7 + 92 , 7 @ @ private object HttpApiFrontend { 
 Http ( ) . bind ( 
 config . interface , 
 config . port , 
 - connectionContext = tlsContext map ( _ . asHttpsContext ) getOrElse Http ( ) . defaultServerHttpContext , 
 + connectionContext = Http ( ) . defaultServerHttpContext , 
 settings = defaultSettings . withTimeouts ( defaultSettings . timeouts . withIdleTimeout ( IdleTimeout ) ) 
 ) 
 . runForeach { conn ⇒

NEAREST DIFF:
diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 index 7c94e1a . . d1605f3 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 @ @ - 6 , 7 + 6 , 7 @ @ import akka . http . scaladsl . Http 
 import akka . http . scaladsl . server . Directives . _ 
 import akka . http . scaladsl . server . Route 
 import akka . http . scaladsl . server . directives . Credentials 
 - import akka . stream . { ActorMaterializer , Materializer } 
 + import akka . stream . { ActorMaterializerSettings , ActorMaterializer , Materializer } 
 import com . typesafe . config . Config 
 import im . actor . server . api . http . app . AppFilesHttpHandler 
 import im . actor . server . api . http . status . StatusHttpHandler 
 @ @ - 67 , 8 + 67 , 7 @ @ private object HttpApiFrontend { 
 
 def start ( serverConfig : Config ) ( 
 implicit 
 - system : ActorSystem , 
 - materializer : Materializer 
 + system : ActorSystem 
 ) : Unit = { 
 HttpApiConfig . load ( serverConfig . getConfig ( " http " ) ) match { 
 case Success ( apiConfig ) ⇒ 
 @ @ - 80 , 7 + 79 , 7 @ @ private object HttpApiFrontend { 
 } 
 
 def start ( config : HttpApiConfig , tlsContext : Option [ TlsContext ] ) ( implicit system : ActorSystem ) : Unit = { 
 - implicit val mat = ActorMaterializer ( ) 
 + implicit val mat = ActorMaterializer ( ActorMaterializerSettings ( system ) . withAutoFusing ( false ) ) 
 
 val status = new StatusHttpHandler 
 val app = new AppFilesHttpHandler ( config . staticFiles )
