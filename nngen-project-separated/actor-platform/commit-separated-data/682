BLEU SCORE: 0.020244462660665517

TEST MSG: Merge branch ' master ' of https : / / github . com / actorapp / actor - platform
GENERATED MSG: perf ( server : session ) : reduce memory pressure by resend buffers

TEST DIFF (one line): diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > index cddb549 . . dc0ec61 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > @ @ - 5 , 11 + 5 , 12 @ @ import java . util . concurrent . TimeUnit < nl > import akka . actor . { ActorLogging , ActorRef , Cancellable , Props } < nl > import akka . stream . actor . _ < nl > import com . typesafe . config . Config < nl > - import im . actor . api . rpc . { UpdateBox , RpcResult ⇒ ApiRpcResult } < nl > + import im . actor . api . rpc . { RpcOk , UpdateBox , RpcResult ⇒ ApiRpcResult } < nl > import im . actor . api . rpc . codecs . UpdateBoxCodec < nl > import im . actor . api . rpc . sequence . _ < nl > import im . actor . server . api . rpc . RpcResultCodec < nl > import im . actor . server . mtproto . protocol . _ < nl > + import scodec . bits . BitVector < nl > < nl > import scala . annotation . tailrec < nl > import scala . collection . { immutable , mutable } < nl > @ @ - 58 , 20 + 59 , 27 @ @ private [ session ] object ReSender { < nl > val size = bitsSize / 8 < nl > val priority : Priority < nl > } < nl > - private final case class RpcItem ( result : ApiRpcResult , requestMessageId : Long ) extends ResendableItem { < nl > - lazy val body = RpcResultCodec . encode ( result ) . require < nl > + < nl > + private object RpcItem { < nl > + def apply ( result : ApiRpcResult , requestMessageId : Long ) : RpcItem = < nl > + RpcItem ( RpcResultCodec . encode ( result ) . require , requestMessageId ) < nl > + } < nl > + private final case class RpcItem ( body : BitVector , requestMessageId : Long ) extends ResendableItem { < nl > override lazy val bitsSize = body . size < nl > - val reduceKeyOpt = None < nl > override val priority = Priority . RPC < nl > } < nl > - private final case class PushItem ( ub : UpdateBox , reduceKeyOpt : Option [ String ] ) extends ResendableItem { < nl > - lazy val body = UpdateBoxCodec . encode ( ub ) . require < nl > - override lazy val bitsSize = body . size < nl > - override val priority = ub match { < nl > - case _ : SeqUpdate | _ : FatSeqUpdate ⇒ Priority . SeqPush < nl > - case _ : WeakUpdate ⇒ Priority . WeakPush < nl > + private object PushItem { < nl > + def apply ( ub : UpdateBox , reduceKeyOpt : Option [ String ] ) : PushItem = { < nl > + val priority = ub match { < nl > + case _ : SeqUpdate | _ : FatSeqUpdate ⇒ Priority . SeqPush < nl > + case _ : WeakUpdate ⇒ Priority . WeakPush < nl > + } < nl > + PushItem ( UpdateBoxCodec . encode ( ub ) . require , reduceKeyOpt , priority ) < nl > } < nl > } < nl > + private final case class PushItem ( body : BitVector , reduceKeyOpt : Option [ String ] , priority : Priority ) extends ResendableItem { < nl > + override lazy val bitsSize = body . size < nl > + } < nl > private final case class NewSessionItem ( newSession : NewSession ) extends ResendableItem { < nl > override val bitsSize = 0L < nl > override val priority = Priority . NewSession < nl > @ @ - 187 , 7 + 195 , 7 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long , firstMessageId : L < nl > scheduledResend . cancel ( ) < nl > < nl > item match { < nl > - case PushItem ( _ , reduceKeyOpt ) ⇒ < nl > + case PushItem ( _ , reduceKeyOpt , _ ) ⇒ < nl > reduceKeyOpt foreach { reduceKey ⇒ < nl > if ( pushReduceMap . get ( reduceKey ) . contains ( messageId ) ) < nl > pushReduceMap - = reduceKey < nl > @ @ - 370 , 7 + 378 , 7 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long , firstMessageId : L < nl > val scheduled = context . system . scheduler . scheduleOnce ( delay , self , ScheduledResend ( messageId , item ) ) < nl > < nl > item match { < nl > - case pi @ PushItem ( _ , reduceKeyOpt ) ⇒ < nl > + case pi @ PushItem ( _ , reduceKeyOpt , _ ) ⇒ < nl > reduceKeyOpt foreach { reduceKey ⇒ < nl > for { < nl > msgId ← pushReduceMap . get ( reduceKey ) < nl > diff - - git a / actor - server / project / plugins . sbt b / actor - server / project / plugins . sbt < nl > index d6a7c1f . . fc092ef 100644 < nl > - - - a / actor - server / project / plugins . sbt < nl > + + + b / actor - server / project / plugins . sbt < nl > @ @ - 14 , 7 + 14 , 7 @ @ addSbtPlugin ( " io . spray " % " sbt - revolver " % " 0 . 7 . 2 " ) < nl > < nl > addSbtPlugin ( " org . flywaydb " % " flyway - sbt " % " 3 . 1 " ) < nl > < nl > - addSbtPlugin ( " im . actor " % % " sbt - actor - api " % " 0 . 7 . 9 " ) < nl > + addSbtPlugin ( " im . actor " % % " sbt - actor - api " % " 0 . 7 . 11 " ) < nl > < nl > addSbtPlugin ( " com . trueaccord . scalapb " % " sbt - scalapb " % " 0 . 5 . 21 " ) < nl > < nl > diff - - git a / actor - server / version . sbt b / actor - server / version . sbt < nl > index 87b0a39 . . 0d34142 100644 < nl > - - - a / actor - server / version . sbt < nl > + + + b / actor - server / version . sbt < nl > @ @ - 1 + 1 @ @ < nl > - version in ThisBuild : = " 1 . 0 . 152 " < nl > \ No newline at end of file < nl > + version in ThisBuild : = " 1 . 0 . 153 - SNAPSHOT " < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > index cddb549 . . dc0ec61 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > @ @ - 5 , 11 + 5 , 12 @ @ import java . util . concurrent . TimeUnit < nl > import akka . actor . { ActorLogging , ActorRef , Cancellable , Props } < nl > import akka . stream . actor . _ < nl > import com . typesafe . config . Config < nl > - import im . actor . api . rpc . { UpdateBox , RpcResult ⇒ ApiRpcResult } < nl > + import im . actor . api . rpc . { RpcOk , UpdateBox , RpcResult ⇒ ApiRpcResult } < nl > import im . actor . api . rpc . codecs . UpdateBoxCodec < nl > import im . actor . api . rpc . sequence . _ < nl > import im . actor . server . api . rpc . RpcResultCodec < nl > import im . actor . server . mtproto . protocol . _ < nl > + import scodec . bits . BitVector < nl > < nl > import scala . annotation . tailrec < nl > import scala . collection . { immutable , mutable } < nl > @ @ - 58 , 20 + 59 , 27 @ @ private [ session ] object ReSender { < nl > val size = bitsSize / 8 < nl > val priority : Priority < nl > } < nl > - private final case class RpcItem ( result : ApiRpcResult , requestMessageId : Long ) extends ResendableItem { < nl > - lazy val body = RpcResultCodec . encode ( result ) . require < nl > + < nl > + private object RpcItem { < nl > + def apply ( result : ApiRpcResult , requestMessageId : Long ) : RpcItem = < nl > + RpcItem ( RpcResultCodec . encode ( result ) . require , requestMessageId ) < nl > + } < nl > + private final case class RpcItem ( body : BitVector , requestMessageId : Long ) extends ResendableItem { < nl > override lazy val bitsSize = body . size < nl > - val reduceKeyOpt = None < nl > override val priority = Priority . RPC < nl > } < nl > - private final case class PushItem ( ub : UpdateBox , reduceKeyOpt : Option [ String ] ) extends ResendableItem { < nl > - lazy val body = UpdateBoxCodec . encode ( ub ) . require < nl > - override lazy val bitsSize = body . size < nl > - override val priority = ub match { < nl > - case _ : SeqUpdate | _ : FatSeqUpdate ⇒ Priority . SeqPush < nl > - case _ : WeakUpdate ⇒ Priority . WeakPush < nl > + private object PushItem { < nl > + def apply ( ub : UpdateBox , reduceKeyOpt : Option [ String ] ) : PushItem = { < nl > + val priority = ub match { < nl > + case _ : SeqUpdate | _ : FatSeqUpdate ⇒ Priority . SeqPush < nl > + case _ : WeakUpdate ⇒ Priority . WeakPush < nl > + } < nl > + PushItem ( UpdateBoxCodec . encode ( ub ) . require , reduceKeyOpt , priority ) < nl > } < nl > } < nl > + private final case class PushItem ( body : BitVector , reduceKeyOpt : Option [ String ] , priority : Priority ) extends ResendableItem { < nl > + override lazy val bitsSize = body . size < nl > + } < nl > private final case class NewSessionItem ( newSession : NewSession ) extends ResendableItem { < nl > override val bitsSize = 0L < nl > override val priority = Priority . NewSession < nl > @ @ - 187 , 7 + 195 , 7 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long , firstMessageId : L < nl > scheduledResend . cancel ( ) < nl > < nl > item match { < nl > - case PushItem ( _ , reduceKeyOpt ) ⇒ < nl > + case PushItem ( _ , reduceKeyOpt , _ ) ⇒ < nl > reduceKeyOpt foreach { reduceKey ⇒ < nl > if ( pushReduceMap . get ( reduceKey ) . contains ( messageId ) ) < nl > pushReduceMap - = reduceKey < nl > @ @ - 370 , 7 + 378 , 7 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long , firstMessageId : L < nl > val scheduled = context . system . scheduler . scheduleOnce ( delay , self , ScheduledResend ( messageId , item ) ) < nl > < nl > item match { < nl > - case pi @ PushItem ( _ , reduceKeyOpt ) ⇒ < nl > + case pi @ PushItem ( _ , reduceKeyOpt , _ ) ⇒ < nl > reduceKeyOpt foreach { reduceKey ⇒ < nl > for { < nl > msgId ← pushReduceMap . get ( reduceKey ) < nl > diff - - git a / actor - server / project / plugins . sbt b / actor - server / project / plugins . sbt < nl > index d6a7c1f . . fc092ef 100644 < nl > - - - a / actor - server / project / plugins . sbt < nl > + + + b / actor - server / project / plugins . sbt < nl > @ @ - 14 , 7 + 14 , 7 @ @ addSbtPlugin ( " io . spray " % " sbt - revolver " % " 0 . 7 . 2 " ) < nl > < nl > addSbtPlugin ( " org . flywaydb " % " flyway - sbt " % " 3 . 1 " ) < nl > < nl > - addSbtPlugin ( " im . actor " % % " sbt - actor - api " % " 0 . 7 . 9 " ) < nl > + addSbtPlugin ( " im . actor " % % " sbt - actor - api " % " 0 . 7 . 11 " ) < nl > < nl > addSbtPlugin ( " com . trueaccord . scalapb " % " sbt - scalapb " % " 0 . 5 . 21 " )

TEST DIFF:
diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 index cddb549 . . dc0ec61 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 @ @ - 5 , 11 + 5 , 12 @ @ import java . util . concurrent . TimeUnit 
 import akka . actor . { ActorLogging , ActorRef , Cancellable , Props } 
 import akka . stream . actor . _ 
 import com . typesafe . config . Config 
 - import im . actor . api . rpc . { UpdateBox , RpcResult ⇒ ApiRpcResult } 
 + import im . actor . api . rpc . { RpcOk , UpdateBox , RpcResult ⇒ ApiRpcResult } 
 import im . actor . api . rpc . codecs . UpdateBoxCodec 
 import im . actor . api . rpc . sequence . _ 
 import im . actor . server . api . rpc . RpcResultCodec 
 import im . actor . server . mtproto . protocol . _ 
 + import scodec . bits . BitVector 
 
 import scala . annotation . tailrec 
 import scala . collection . { immutable , mutable } 
 @ @ - 58 , 20 + 59 , 27 @ @ private [ session ] object ReSender { 
 val size = bitsSize / 8 
 val priority : Priority 
 } 
 - private final case class RpcItem ( result : ApiRpcResult , requestMessageId : Long ) extends ResendableItem { 
 - lazy val body = RpcResultCodec . encode ( result ) . require 
 + 
 + private object RpcItem { 
 + def apply ( result : ApiRpcResult , requestMessageId : Long ) : RpcItem = 
 + RpcItem ( RpcResultCodec . encode ( result ) . require , requestMessageId ) 
 + } 
 + private final case class RpcItem ( body : BitVector , requestMessageId : Long ) extends ResendableItem { 
 override lazy val bitsSize = body . size 
 - val reduceKeyOpt = None 
 override val priority = Priority . RPC 
 } 
 - private final case class PushItem ( ub : UpdateBox , reduceKeyOpt : Option [ String ] ) extends ResendableItem { 
 - lazy val body = UpdateBoxCodec . encode ( ub ) . require 
 - override lazy val bitsSize = body . size 
 - override val priority = ub match { 
 - case _ : SeqUpdate | _ : FatSeqUpdate ⇒ Priority . SeqPush 
 - case _ : WeakUpdate ⇒ Priority . WeakPush 
 + private object PushItem { 
 + def apply ( ub : UpdateBox , reduceKeyOpt : Option [ String ] ) : PushItem = { 
 + val priority = ub match { 
 + case _ : SeqUpdate | _ : FatSeqUpdate ⇒ Priority . SeqPush 
 + case _ : WeakUpdate ⇒ Priority . WeakPush 
 + } 
 + PushItem ( UpdateBoxCodec . encode ( ub ) . require , reduceKeyOpt , priority ) 
 } 
 } 
 + private final case class PushItem ( body : BitVector , reduceKeyOpt : Option [ String ] , priority : Priority ) extends ResendableItem { 
 + override lazy val bitsSize = body . size 
 + } 
 private final case class NewSessionItem ( newSession : NewSession ) extends ResendableItem { 
 override val bitsSize = 0L 
 override val priority = Priority . NewSession 
 @ @ - 187 , 7 + 195 , 7 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long , firstMessageId : L 
 scheduledResend . cancel ( ) 
 
 item match { 
 - case PushItem ( _ , reduceKeyOpt ) ⇒ 
 + case PushItem ( _ , reduceKeyOpt , _ ) ⇒ 
 reduceKeyOpt foreach { reduceKey ⇒ 
 if ( pushReduceMap . get ( reduceKey ) . contains ( messageId ) ) 
 pushReduceMap - = reduceKey 
 @ @ - 370 , 7 + 378 , 7 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long , firstMessageId : L 
 val scheduled = context . system . scheduler . scheduleOnce ( delay , self , ScheduledResend ( messageId , item ) ) 
 
 item match { 
 - case pi @ PushItem ( _ , reduceKeyOpt ) ⇒ 
 + case pi @ PushItem ( _ , reduceKeyOpt , _ ) ⇒ 
 reduceKeyOpt foreach { reduceKey ⇒ 
 for { 
 msgId ← pushReduceMap . get ( reduceKey ) 
 diff - - git a / actor - server / project / plugins . sbt b / actor - server / project / plugins . sbt 
 index d6a7c1f . . fc092ef 100644 
 - - - a / actor - server / project / plugins . sbt 
 + + + b / actor - server / project / plugins . sbt 
 @ @ - 14 , 7 + 14 , 7 @ @ addSbtPlugin ( " io . spray " % " sbt - revolver " % " 0 . 7 . 2 " ) 
 
 addSbtPlugin ( " org . flywaydb " % " flyway - sbt " % " 3 . 1 " ) 
 
 - addSbtPlugin ( " im . actor " % % " sbt - actor - api " % " 0 . 7 . 9 " ) 
 + addSbtPlugin ( " im . actor " % % " sbt - actor - api " % " 0 . 7 . 11 " ) 
 
 addSbtPlugin ( " com . trueaccord . scalapb " % " sbt - scalapb " % " 0 . 5 . 21 " ) 
 
 diff - - git a / actor - server / version . sbt b / actor - server / version . sbt 
 index 87b0a39 . . 0d34142 100644 
 - - - a / actor - server / version . sbt 
 + + + b / actor - server / version . sbt 
 @ @ - 1 + 1 @ @ 
 - version in ThisBuild : = " 1 . 0 . 152 " 
 \ No newline at end of file 
 + version in ThisBuild : = " 1 . 0 . 153 - SNAPSHOT " 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 index cddb549 . . dc0ec61 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 @ @ - 5 , 11 + 5 , 12 @ @ import java . util . concurrent . TimeUnit 
 import akka . actor . { ActorLogging , ActorRef , Cancellable , Props } 
 import akka . stream . actor . _ 
 import com . typesafe . config . Config 
 - import im . actor . api . rpc . { UpdateBox , RpcResult ⇒ ApiRpcResult } 
 + import im . actor . api . rpc . { RpcOk , UpdateBox , RpcResult ⇒ ApiRpcResult } 
 import im . actor . api . rpc . codecs . UpdateBoxCodec 
 import im . actor . api . rpc . sequence . _ 
 import im . actor . server . api . rpc . RpcResultCodec 
 import im . actor . server . mtproto . protocol . _ 
 + import scodec . bits . BitVector 
 
 import scala . annotation . tailrec 
 import scala . collection . { immutable , mutable } 
 @ @ - 58 , 20 + 59 , 27 @ @ private [ session ] object ReSender { 
 val size = bitsSize / 8 
 val priority : Priority 
 } 
 - private final case class RpcItem ( result : ApiRpcResult , requestMessageId : Long ) extends ResendableItem { 
 - lazy val body = RpcResultCodec . encode ( result ) . require 
 + 
 + private object RpcItem { 
 + def apply ( result : ApiRpcResult , requestMessageId : Long ) : RpcItem = 
 + RpcItem ( RpcResultCodec . encode ( result ) . require , requestMessageId ) 
 + } 
 + private final case class RpcItem ( body : BitVector , requestMessageId : Long ) extends ResendableItem { 
 override lazy val bitsSize = body . size 
 - val reduceKeyOpt = None 
 override val priority = Priority . RPC 
 } 
 - private final case class PushItem ( ub : UpdateBox , reduceKeyOpt : Option [ String ] ) extends ResendableItem { 
 - lazy val body = UpdateBoxCodec . encode ( ub ) . require 
 - override lazy val bitsSize = body . size 
 - override val priority = ub match { 
 - case _ : SeqUpdate | _ : FatSeqUpdate ⇒ Priority . SeqPush 
 - case _ : WeakUpdate ⇒ Priority . WeakPush 
 + private object PushItem { 
 + def apply ( ub : UpdateBox , reduceKeyOpt : Option [ String ] ) : PushItem = { 
 + val priority = ub match { 
 + case _ : SeqUpdate | _ : FatSeqUpdate ⇒ Priority . SeqPush 
 + case _ : WeakUpdate ⇒ Priority . WeakPush 
 + } 
 + PushItem ( UpdateBoxCodec . encode ( ub ) . require , reduceKeyOpt , priority ) 
 } 
 } 
 + private final case class PushItem ( body : BitVector , reduceKeyOpt : Option [ String ] , priority : Priority ) extends ResendableItem { 
 + override lazy val bitsSize = body . size 
 + } 
 private final case class NewSessionItem ( newSession : NewSession ) extends ResendableItem { 
 override val bitsSize = 0L 
 override val priority = Priority . NewSession 
 @ @ - 187 , 7 + 195 , 7 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long , firstMessageId : L 
 scheduledResend . cancel ( ) 
 
 item match { 
 - case PushItem ( _ , reduceKeyOpt ) ⇒ 
 + case PushItem ( _ , reduceKeyOpt , _ ) ⇒ 
 reduceKeyOpt foreach { reduceKey ⇒ 
 if ( pushReduceMap . get ( reduceKey ) . contains ( messageId ) ) 
 pushReduceMap - = reduceKey 
 @ @ - 370 , 7 + 378 , 7 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long , firstMessageId : L 
 val scheduled = context . system . scheduler . scheduleOnce ( delay , self , ScheduledResend ( messageId , item ) ) 
 
 item match { 
 - case pi @ PushItem ( _ , reduceKeyOpt ) ⇒ 
 + case pi @ PushItem ( _ , reduceKeyOpt , _ ) ⇒ 
 reduceKeyOpt foreach { reduceKey ⇒ 
 for { 
 msgId ← pushReduceMap . get ( reduceKey ) 
 diff - - git a / actor - server / project / plugins . sbt b / actor - server / project / plugins . sbt 
 index d6a7c1f . . fc092ef 100644 
 - - - a / actor - server / project / plugins . sbt 
 + + + b / actor - server / project / plugins . sbt 
 @ @ - 14 , 7 + 14 , 7 @ @ addSbtPlugin ( " io . spray " % " sbt - revolver " % " 0 . 7 . 2 " ) 
 
 addSbtPlugin ( " org . flywaydb " % " flyway - sbt " % " 3 . 1 " ) 
 
 - addSbtPlugin ( " im . actor " % % " sbt - actor - api " % " 0 . 7 . 9 " ) 
 + addSbtPlugin ( " im . actor " % % " sbt - actor - api " % " 0 . 7 . 11 " ) 
 
 addSbtPlugin ( " com . trueaccord . scalapb " % " sbt - scalapb " % " 0 . 5 . 21 " )
