BLEU SCORE: 0.355310106137518

TEST MSG: feat ( iOS ) : Showing async members
GENERATED MSG: feat ( iOS ) : Respect permissions on group info edit

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / dialogs / DialogsDefaultFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / dialogs / DialogsDefaultFragment . java < nl > index b64b9b6 . . 205a0a7 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / dialogs / DialogsDefaultFragment . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / dialogs / DialogsDefaultFragment . java < nl > @ @ - 88 , 18 + 88 , 9 @ @ public class DialogsDefaultFragment extends BaseDialogFragment { < nl > . setMessage ( getString ( R . string . alert _ leave _ group _ message , dialog . getDialogTitle ( ) ) ) < nl > . setNegativeButton ( R . string . dialog _ cancel , null ) < nl > . setPositiveButton ( R . string . alert _ leave _ group _ yes , ( d1 , which1 ) - > { < nl > - execute ( messenger ( ) . leaveGroup ( dialog . getPeer ( ) . getPeerId ( ) ) , R . string . progress _ common , < nl > - new CommandCallback < Void > ( ) { < nl > - @ Override < nl > - public void onResult ( Void res ) { < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - public void onError ( Exception e ) { < nl > - Toast . makeText ( getActivity ( ) , R . string . toast _ unable _ leave , Toast . LENGTH _ LONG ) . show ( ) ; < nl > - } < nl > - } ) ; < nl > + execute ( messenger ( ) . leaveGroup ( dialog . getPeer ( ) . getPeerId ( ) ) , R . string . progress _ common ) . failure ( e - > { < nl > + Toast . makeText ( getActivity ( ) , R . string . toast _ unable _ leave , Toast . LENGTH _ LONG ) . show ( ) ; < nl > + } ) ; < nl > } ) < nl > . show ( ) ; < nl > } else { < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index ae2aefb . . f096cb3 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 224 , 6 + 224 , 7 @ @ < nl > 	 	 066A53371BC537CA000E606E / * ConversationViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066A53361BC537CA000E606E / * ConversationViewController . swift * / ; } ; < nl > 	 	 066A53391BC5456B000E606E / * ActorStyle . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066A53381BC5456B000E606E / * ActorStyle . swift * / ; } ; < nl > 	 	 066CBCDC1C8D419F004507E2 / * AAAuthEmailViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066CBCDB1C8D419F004507E2 / * AAAuthEmailViewController . swift * / ; } ; < nl > + 	 	 067B67541D45341D00B9A238 / * AAGroupViewMembersController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 067B67531D45341D00B9A238 / * AAGroupViewMembersController . swift * / ; } ; < nl > 	 	 068AFC391C94A0050055F503 / * AADialogListProcessor . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 068AFC381C94A0050055F503 / * AADialogListProcessor . swift * / ; } ; < nl > 	 	 069CF4CC1BCB909A00C66E12 / * CLBackspaceDetectingTextField . h in Headers * / = { isa = PBXBuildFile ; fileRef = 069CF4C41BCB909A00C66E12 / * CLBackspaceDetectingTextField . h * / ; } ; < nl > 	 	 069CF4CD1BCB909A00C66E12 / * CLBackspaceDetectingTextField . m in Sources * / = { isa = PBXBuildFile ; fileRef = 069CF4C51BCB909A00C66E12 / * CLBackspaceDetectingTextField . m * / ; } ; < nl > @ @ - 601 , 6 + 602 , 7 @ @ < nl > 	 	 066A53361BC537CA000E606E / * ConversationViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = ConversationViewController . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 066A53381BC5456B000E606E / * ActorStyle . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = ActorStyle . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 066CBCDB1C8D419F004507E2 / * AAAuthEmailViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAuthEmailViewController . swift ; sourceTree = " < group > " ; } ; < nl > + 	 	 067B67531D45341D00B9A238 / * AAGroupViewMembersController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAGroupViewMembersController . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 068AFC381C94A0050055F503 / * AADialogListProcessor . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AADialogListProcessor . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 069CF4C41BCB909A00C66E12 / * CLBackspaceDetectingTextField . h * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . h ; path = CLBackspaceDetectingTextField . h ; sourceTree = " < group > " ; } ; < nl > 	 	 069CF4C51BCB909A00C66E12 / * CLBackspaceDetectingTextField . m * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . objc ; path = CLBackspaceDetectingTextField . m ; sourceTree = " < group > " ; } ; < nl > @ @ - 1240 , 6 + 1242 , 7 @ @ < nl > 	 	 	 	 066A52E81BC52A25000E606E / * Cells * / , < nl > 	 	 	 	 066A52E21BC52A20000E606E / * AAGroupViewController . swift * / , < nl > 	 	 	 	 06ABFE371D3FCCE30031A0D6 / * AAGroupEditInfoViewController . swift * / , < nl > + 	 	 	 	 067B67531D45341D00B9A238 / * AAGroupViewMembersController . swift * / , < nl > 	 	 	 	 06ABFE3C1D41283A0031A0D6 / * AAGroupAdministrationViewController . swift * / , < nl > 	 	 	 	 06ABFE391D410D2D0031A0D6 / * AAGroupTypeController . swift * / , < nl > 	 	 	 	 066A52E31BC52A20000E606E / * AAAddParticipantViewController . swift * / , < nl > @ @ - 2289 , 6 + 2292 , 7 @ @ < nl > 	 	 	 	 066A51901BC4C383000E606E / * CocoaNetworkRuntime . swift in Sources * / , < nl > 	 	 	 	 06ABFE381D3FCCE30031A0D6 / * AAGroupEditInfoViewController . swift in Sources * / , < nl > 	 	 	 	 06E7B24A1C0F92140090660C / * AABubbleLocationCell . swift in Sources * / , < nl > + 	 	 	 	 067B67541D45341D00B9A238 / * AAGroupViewMembersController . swift in Sources * / , < nl > 	 	 	 	 066A52581BC4EF61000E606E / * Alerts . swift in Sources * / , < nl > 	 	 	 	 066A51691BC4C366000E606E / * AATools . swift in Sources * / , < nl > 	 	 	 	 066A53201BC533F5000E606E / * AABubbleBackgroundProcessor . swift in Sources * / , < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > index f5bc14c . . d012a60 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > @ @ - 402 , 8 + 402 , 10 @ @ public class ConversationViewController : < nl > < nl > binder . bind ( group . isDeleted ) { ( isDeleted : JavaLangBoolean ! ) in < nl > if isDeleted . booleanValue ( ) { < nl > - self . alertUser ( " ChatDeleted " ) { < nl > - self . navigateBack ( ) < nl > + self . alertUser ( AALocalized ( " ChatDeleted " ) ) { < nl > + self . execute ( Actor . deleteChatCommandWithPeer ( self . peer ) , successBlock : { ( r ) in < nl > + self . navigateBack ( ) < nl > + } ) < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > index 828dfdc . . 4c1eeec 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > @ @ - 160 , 7 + 160 , 7 @ @ public class AAGroupViewController : AAContentTableController { < nl > r . content = AALocalized ( " GroupViewMembers " ) < nl > r . style = . Normal < nl > r . selectAction = { ( ) - > Bool in < nl > - / / TODO : Implement < nl > + self . navigateNext ( AAGroupViewMembersController ( gid : self . gid ) ) < nl > return false < nl > } < nl > } ) < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewMembersController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewMembersController . swift < nl > new file mode 100644 < nl > index 0000000 . . 85ab8c9 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewMembersController . swift < nl > @ @ - 0 , 0 + 1 , 154 @ @ < nl > + / / < nl > + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > < nl > + / / < nl > + < nl > + import Foundation < nl > + < nl > + public class AAGroupViewMembersController : AAContentTableController { < nl > + < nl > + private var membersRow : AAManagedArrayRows < ACGroupMember , AAGroupMemberCell > ! < nl > + < nl > + private var isLoaded = false < nl > + private var isLoading = false < nl > + private var next : IOSByteArray ! = nil < nl > + < nl > + public init ( gid : Int ) { < nl > + super . init ( style : . Plain ) < nl > + self . gid = gid < nl > + < nl > + navigationItem . title = AALocalized ( " GroupMembers " ) < nl > + < nl > + if group . isCanInviteMembers . get ( ) . booleanValue ( ) { < nl > + navigationItem . rightBarButtonItem = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . Add , target : self , action : # selector ( didAddPressed ) ) < nl > + } < nl > + } < nl > + < nl > + public required init ( coder aDecoder : NSCoder ) { < nl > + fatalError ( " init ( coder : ) has not been implemented " ) < nl > + } < nl > + < nl > + public override func tableDidLoad ( ) { < nl > + section { ( s ) in < nl > + self . membersRow = s . arrays ( { ( r : AAManagedArrayRows < ACGroupMember , AAGroupMemberCell > ) - > ( ) in < nl > + r . height = 48 < nl > + r . data = [ ACGroupMember ] ( ) < nl > + < nl > + r . bindData = { ( c , d ) - > ( ) in < nl > + let user = Actor . getUserWithUid ( d . uid ) < nl > + c . bind ( user , isAdmin : d . isAdministrator ) < nl > + < nl > + / / Notify to request onlines < nl > + Actor . onUserVisibleWithUid ( d . uid ) < nl > + } < nl > + < nl > + r . itemShown = { ( index , d ) in < nl > + if index > r . data . count - 10 { < nl > + self . loadMore ( ) < nl > + } < nl > + } < nl > + < nl > + r . selectAction = { ( d ) - > Bool in < nl > + let user = Actor . getUserWithUid ( d . uid ) < nl > + if ( user . getId ( ) = = Actor . myUid ( ) ) { < nl > + return true < nl > + } < nl > + < nl > + self . alertSheet { ( a : AAAlertSetting ) - > ( ) in < nl > + < nl > + a . cancel = " AlertCancel " < nl > + < nl > + a . action ( " GroupMemberInfo " ) { ( ) - > ( ) in < nl > + var controller : AAViewController ! = ActorSDK . sharedActor ( ) . delegate . actorControllerForUser ( Int ( user . getId ( ) ) ) < nl > + if controller = = nil { < nl > + controller = AAUserViewController ( uid : Int ( user . getId ( ) ) ) < nl > + } < nl > + self . navigateNext ( controller , removeCurrent : false ) < nl > + } < nl > + < nl > + a . action ( " GroupMemberWrite " ) { ( ) - > ( ) in < nl > + if let customController = ActorSDK . sharedActor ( ) . delegate . actorControllerForConversation ( ACPeer . userWithInt ( user . getId ( ) ) ) { < nl > + self . navigateDetail ( customController ) < nl > + } else { < nl > + self . navigateDetail ( ConversationViewController ( peer : ACPeer . userWithInt ( user . getId ( ) ) ) ) < nl > + } < nl > + self . popover ? . dismissPopoverAnimated ( true ) < nl > + } < nl > + < nl > + a . action ( " GroupMemberCall " , closure : { ( ) - > ( ) in < nl > + let phones = user . getPhonesModel ( ) . get ( ) < nl > + if phones . size ( ) = = 0 { < nl > + self . alertUser ( " GroupMemberCallNoPhones " ) < nl > + } else if phones . size ( ) = = 1 { < nl > + let number = phones . getWithInt ( 0 ) < nl > + ActorSDK . sharedActor ( ) . openUrl ( " telprompt : / / + \ ( number . phone ) " ) < nl > + } else { < nl > + < nl > + var numbers = [ String ] ( ) < nl > + for i in 0 . . < phones . size ( ) { < nl > + let p = phones . getWithInt ( i ) < nl > + numbers . append ( " \ ( p . title ) : + \ ( p . phone ) " ) < nl > + } < nl > + self . showActionSheet ( numbers , < nl > + cancelButton : " AlertCancel " , < nl > + destructButton : nil , < nl > + sourceView : self . view , < nl > + sourceRect : self . view . bounds , < nl > + tapClosure : { ( index ) - > ( ) in < nl > + if ( index > = 0 ) { < nl > + let number = phones . getWithInt ( jint ( index ) ) < nl > + ActorSDK . sharedActor ( ) . openUrl ( " telprompt : / / + \ ( number . phone ) " ) < nl > + } < nl > + } ) < nl > + } < nl > + } ) < nl > + < nl > + / / Can kick user < nl > + let canKick : Bool = < nl > + ( self . group . isCanKickAnyone . get ( ) . booleanValue ( ) | | < nl > + ( self . group . isCanKickInvited . get ( ) . booleanValue ( ) & & d . inviterUid = = Actor . myUid ( ) ) ) < nl > + < nl > + if canKick { < nl > + let name = Actor . getUserWithUid ( d . uid ) . getNameModel ( ) . get ( ) < nl > + a . destructive ( " GroupMemberKick " ) { ( ) - > ( ) in < nl > + self . confirmDestructive ( AALocalized ( " GroupMemberKickMessage " ) < nl > + . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberKickAction " ) ) { < nl > + self . executeSafe ( Actor . kickMemberCommandWithGid ( jint ( self . gid ) , withUid : user . getId ( ) ) ) < nl > + } < nl > + } < nl > + } < nl > + } < nl > + < nl > + return true < nl > + } < nl > + } ) < nl > + } < nl > + < nl > + loadMore ( ) < nl > + } < nl > + < nl > + private func loadMore ( ) { < nl > + if isLoading { < nl > + return < nl > + } < nl > + if isLoaded { < nl > + return < nl > + } < nl > + < nl > + isLoading = true < nl > + Actor . loadMembersWithGid ( jint ( gid ) , withLimit : 20 , withNext : next ) . then { ( slice : ACGroupMembersSlice ! ) in < nl > + for i in 0 . . < slice . members . size ( ) { < nl > + self . membersRow . data . append ( slice . members . getWithInt ( i ) as ! ACGroupMember ) < nl > + } < nl > + self . tableView . reloadData ( ) < nl > + if slice . next = = nil { < nl > + self . next = nil < nl > + self . isLoaded = true < nl > + } < nl > + self . isLoading = false < nl > + } < nl > + } < nl > + < nl > + func didAddPressed ( ) { < nl > + navigateNext ( AAAddParticipantViewController ( gid : self . gid ) ) < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift < nl > index 38b8f7b . . 8446d32 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift 	 < nl > @ @ - 650 , 6 + 650 , 8 @ @ public class AAManagedArrayRows < T , R where R : UITableViewCell > : AAManagedRange { < nl > < nl > public var bindData : ( ( cell : R , item : T ) - > ( ) ) ? < nl > < nl > + public var itemShown : ( ( index : Int , item : T ) - > ( ) ) ? < nl > + < nl > public var data = [ T ] ( ) < nl > < nl > public func initTable ( table : AAManagedTable ) { < nl > @ @ - 670 , 7 + 672 , 13 @ @ public class AAManagedArrayRows < T , R where R : UITableViewCell > : AAManagedRange { < nl > < nl > public func rangeCellForItem ( table : AAManagedTable , indexPath : AARangeIndexPath ) - > UITableViewCell { < nl > let res : R = table . dequeueCell ( indexPath . indexPath ) < nl > - rangeBindData ( table , indexPath : indexPath , cell : res , item : data [ indexPath . item ] ) < nl > + let item = data [ indexPath . item ] < nl > + rangeBindData ( table , indexPath : indexPath , cell : res , item : item ) < nl > + < nl > + if let shown = itemShown { < nl > + shown ( index : indexPath . item , item : item ) < nl > + } < nl > + < nl > return res < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / GroupMembersSlice . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / GroupMembersSlice . java < nl > index b8e0571 . . 6eb17d2 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / GroupMembersSlice . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / GroupMembersSlice . java < nl > @ @ - 1 , 19 + 1 , 23 @ @ < nl > package im . actor . core . entity ; < nl > < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > import java . util . ArrayList ; < nl > < nl > public class GroupMembersSlice { < nl > - < nl > - private ArrayList < Integer > uids ; < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private ArrayList < GroupMember > members ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > private byte [ ] next ; < nl > < nl > - public GroupMembersSlice ( ArrayList < Integer > uids , byte [ ] next ) { < nl > - this . uids = uids ; < nl > + public GroupMembersSlice ( ArrayList < GroupMember > members , byte [ ] next ) { < nl > + this . members = members ; < nl > this . next = next ; < nl > } < nl > < nl > - public ArrayList < Integer > getUids ( ) { < nl > - return uids ; < nl > + public ArrayList < GroupMember > getMembers ( ) { < nl > + return members ; < nl > } < nl > < nl > public byte [ ] getNext ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsModule . java < nl > index 919d036 . . e7117ea 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsModule . java < nl > @ @ - 11 , 6 + 11 , 7 @ @ import java . util . List ; < nl > import im . actor . core . api . ApiAdminSettings ; < nl > import im . actor . core . api . ApiGroupOutPeer ; < nl > import im . actor . core . api . ApiGroupType ; < nl > + import im . actor . core . api . ApiMember ; < nl > import im . actor . core . api . ApiOutPeer ; < nl > import im . actor . core . api . ApiPeerType ; < nl > import im . actor . core . api . ApiUserOutPeer ; < nl > @ @ - 39 , 6 + 40 , 7 @ @ import im . actor . core . api . rpc . ResponseIntegrationToken ; < nl > import im . actor . core . api . rpc . ResponseInviteUrl ; < nl > import im . actor . core . api . rpc . ResponseVoid ; < nl > import im . actor . core . entity . Group ; < nl > + import im . actor . core . entity . GroupMember ; < nl > import im . actor . core . entity . GroupMembersSlice ; < nl > import im . actor . core . entity . GroupPermissions ; < nl > import im . actor . core . entity . Peer ; < nl > @ @ - 295 , 9 + 297 , 11 @ @ public class GroupsModule extends AbsModule implements BusSubscriber { < nl > limit , next ) ) ) < nl > . chain ( r - > updates ( ) . loadRequiredPeers ( r . getUsers ( ) , new ArrayList < > ( ) ) ) < nl > . map ( r - > { < nl > - ArrayList < Integer > members = new ArrayList < > ( ) ; < nl > - for ( ApiUserOutPeer p : r . getUsers ( ) ) { < nl > - members . add ( p . getUid ( ) ) ; < nl > + ArrayList < GroupMember > members = new ArrayList < > ( ) ; < nl > + for ( ApiMember p : r . getMembers ( ) ) { < nl > + boolean isAdmin = p . isAdmin ( ) ! = null ? p . isAdmin ( ) : false ; < nl > + members . add ( new GroupMember ( p . getUid ( ) , < nl > + p . getInviterUid ( ) , p . getInviterUid ( ) , isAdmin ) ) ; < nl > } < nl > return new GroupMembersSlice ( members , r . getNext ( ) ) ; < nl > } ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index 1b08a8b . . 88db792 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 235 , 6 + 235 , 7 @ @ < nl > 	 	 069CF4D31BCB909A00C66E12 / * CLTokenView . m in Sources * / = { isa = PBXBuildFile ; fileRef = 069CF4CB1BCB909A00C66E12 / * CLTokenView . m * / ; } ; < nl > 	 	 06ABFE331D3FAF800031A0D6 / * GCDAsyncSocket . h in Headers * / = { isa = PBXBuildFile ; fileRef = 06ABFE2F1D3FAF800031A0D6 / * GCDAsyncSocket . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; < nl > 	 	 06ABFE341D3FAF800031A0D6 / * GCDAsyncSocket . m in Sources * / = { isa = PBXBuildFile ; fileRef = 06ABFE301D3FAF800031A0D6 / * GCDAsyncSocket . m * / ; } ; < nl > + 	 	 06ABFE381D3FCCE30031A0D6 / * AAGroupEditInfoViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06ABFE371D3FCCE30031A0D6 / * AAGroupEditInfoViewController . swift * / ; } ; < nl > 	 	 06B489ED1C9F6EBD0054245B / * AAStickerView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06B489EC1C9F6EBC0054245B / * AAStickerView . swift * / ; } ; < nl > 	 	 06C1D0771C8BC9FC00B73632 / * AAAuthNameViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06C1D0761C8BC9FC00B73632 / * AAAuthNameViewController . swift * / ; } ; < nl > 	 	 06C1D07B1C8BFE5C00B73632 / * AAAuthPhoneViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06C1D07A1C8BFE5C00B73632 / * AAAuthPhoneViewController . swift * / ; } ; < nl > @ @ - 609 , 6 + 610 , 7 @ @ < nl > 	 	 069CF4CB1BCB909A00C66E12 / * CLTokenView . m * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . objc ; path = CLTokenView . m ; sourceTree = " < group > " ; } ; < nl > 	 	 06ABFE2F1D3FAF800031A0D6 / * GCDAsyncSocket . h * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . h ; path = GCDAsyncSocket . h ; sourceTree = " < group > " ; } ; < nl > 	 	 06ABFE301D3FAF800031A0D6 / * GCDAsyncSocket . m * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . objc ; path = GCDAsyncSocket . m ; sourceTree = " < group > " ; } ; < nl > + 	 	 06ABFE371D3FCCE30031A0D6 / * AAGroupEditInfoViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAGroupEditInfoViewController . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06B489EC1C9F6EBC0054245B / * AAStickerView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAStickerView . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06C1D0761C8BC9FC00B73632 / * AAAuthNameViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAuthNameViewController . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06C1D07A1C8BFE5C00B73632 / * AAAuthPhoneViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAuthPhoneViewController . swift ; sourceTree = " < group > " ; } ; < nl > @ @ - 1235 , 6 + 1237 , 7 @ @ < nl > 	 	 	 	 066A52E31BC52A20000E606E / * AAAddParticipantViewController . swift * / , < nl > 	 	 	 	 066A52E21BC52A20000E606E / * AAGroupViewController . swift * / , < nl > 	 	 	 	 066A52E41BC52A20000E606E / * AAInviteLinkViewController . swift * / , < nl > + 	 	 	 	 06ABFE371D3FCCE30031A0D6 / * AAGroupEditInfoViewController . swift * / , < nl > 	 	 	 ) ; < nl > 	 	 	 path = Group ; < nl > 	 	 	 sourceTree = " < group > " ; < nl > @ @ - 2276 , 6 + 2279 , 7 @ @ < nl > 	 	 	 	 066A52231BC4EEAC000E606E / * AAManagedSection . swift in Sources * / , < nl > 	 	 	 	 066A52D11BC52204000E606E / * AADialogCell . swift in Sources * / , < nl > 	 	 	 	 066A51901BC4C383000E606E / * CocoaNetworkRuntime . swift in Sources * / , < nl > + 	 	 	 	 06ABFE381D3FCCE30031A0D6 / * AAGroupEditInfoViewController . swift in Sources * / , < nl > 	 	 	 	 06E7B24A1C0F92140090660C / * AABubbleLocationCell . swift in Sources * / , < nl > 	 	 	 	 066A52581BC4EF61000E606E / * Alerts . swift in Sources * / , < nl > 	 	 	 	 066A51691BC4C366000E606E / * AATools . swift in Sources * / , < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupEditInfoViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupEditInfoViewController . swift < nl > new file mode 100644 < nl > index 0000000 . . 6a8dfc5 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupEditInfoViewController . swift < nl > @ @ - 0 , 0 + 1 , 23 @ @ < nl > + / / < nl > + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > < nl > + / / < nl > + < nl > + import Foundation < nl > + < nl > + public class AAGroupEditInfoController : AAViewController { < nl > + < nl > + public init ( gid : Int ) { < nl > + super . init ( ) < nl > + self . gid = gid < nl > + } < nl > + < nl > + public required init ( coder aDecoder : NSCoder ) { < nl > + fatalError ( " init ( coder : ) has not been implemented " ) < nl > + } < nl > + < nl > + public override func viewDidLoad ( ) { < nl > + super . viewDidLoad ( ) < nl > + < nl > + < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > index 0e4358f . . 82659eb 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > @ @ - 58 , 60 + 58 , 63 @ @ public class AAGroupViewController : AAContentTableController { < nl > } < nl > } < nl > < nl > - / / Header : Change photo < nl > - s . action ( " GroupSetPhoto " ) { ( r ) - > ( ) in < nl > - r . selectAction = { ( ) - > Bool in < nl > - let hasCamera = UIImagePickerController . isSourceTypeAvailable ( UIImagePickerControllerSourceType . Camera ) < nl > - self . showActionSheet ( hasCamera ? [ " PhotoCamera " , " PhotoLibrary " ] : [ " PhotoLibrary " ] , < nl > - cancelButton : " AlertCancel " , < nl > - destructButton : self . group . getAvatarModel ( ) . get ( ) ! = nil ? " PhotoRemove " : nil , < nl > - sourceView : self . view , < nl > - sourceRect : self . view . bounds , < nl > - tapClosure : { ( index ) - > ( ) in < nl > - if ( index = = - 2 ) { < nl > - self . confirmAlertUser ( " PhotoRemoveGroupMessage " , < nl > - action : " PhotoRemove " , < nl > - tapYes : { ( ) - > ( ) in < nl > - Actor . removeGroupAvatarWithGid ( jint ( self . gid ) ) < nl > - } , tapNo : nil ) < nl > - } else if ( index > = 0 ) { < nl > - let takePhoto : Bool = ( index = = 0 ) & & hasCamera < nl > - self . pickAvatar ( takePhoto , closure : { ( image ) - > ( ) in < nl > - Actor . changeGroupAvatar ( jint ( self . gid ) , image : image ) < nl > - } ) < nl > - } < nl > - } ) < nl > - < nl > - return true < nl > - } < nl > - } < nl > - < nl > - / / Header : Change title < nl > - s . action ( " GroupSetTitle " ) { ( r ) - > ( ) in < nl > - r . selectAction = { ( ) - > Bool in < nl > - self . startEditField { ( c ) - > ( ) in < nl > - < nl > - c . title = " GroupEditHeader " < nl > - < nl > - c . fieldHint = " GroupEditHint " < nl > - < nl > - c . actionTitle = " NavigationSave " < nl > - < nl > - c . initialText = self . group . getNameModel ( ) . get ( ) < nl > + if self . group . isCanEditInfo . get ( ) . booleanValue ( ) { < nl > + < nl > + / / Header : Change photo < nl > + s . action ( " GroupSetPhoto " ) { ( r ) - > ( ) in < nl > + r . selectAction = { ( ) - > Bool in < nl > + let hasCamera = UIImagePickerController . isSourceTypeAvailable ( UIImagePickerControllerSourceType . Camera ) < nl > + self . showActionSheet ( hasCamera ? [ " PhotoCamera " , " PhotoLibrary " ] : [ " PhotoLibrary " ] , < nl > + cancelButton : " AlertCancel " , < nl > + destructButton : self . group . getAvatarModel ( ) . get ( ) ! = nil ? " PhotoRemove " : nil , < nl > + sourceView : self . view , < nl > + sourceRect : self . view . bounds , < nl > + tapClosure : { ( index ) - > ( ) in < nl > + if ( index = = - 2 ) { < nl > + self . confirmAlertUser ( " PhotoRemoveGroupMessage " , < nl > + action : " PhotoRemove " , < nl > + tapYes : { ( ) - > ( ) in < nl > + Actor . removeGroupAvatarWithGid ( jint ( self . gid ) ) < nl > + } , tapNo : nil ) < nl > + } else if ( index > = 0 ) { < nl > + let takePhoto : Bool = ( index = = 0 ) & & hasCamera < nl > + self . pickAvatar ( takePhoto , closure : { ( image ) - > ( ) in < nl > + Actor . changeGroupAvatar ( jint ( self . gid ) , image : image ) < nl > + } ) < nl > + } < nl > + } ) < nl > < nl > - c . didDoneTap = { ( t , c ) - > ( ) in < nl > + return true < nl > + } < nl > + } < nl > + < nl > + / / Header : Change title < nl > + s . action ( " GroupSetTitle " ) { ( r ) - > ( ) in < nl > + r . selectAction = { ( ) - > Bool in < nl > + self . startEditField { ( c ) - > ( ) in < nl > < nl > - if t . length = = 0 { < nl > - return < nl > - } < nl > + c . title = " GroupEditHeader " < nl > + < nl > + c . fieldHint = " GroupEditHint " < nl > < nl > - / / c . executeSafeOnlySuccess ( Actor . editGroupTitleCommandWithGid ( jint ( self . gid ) , withTitle : t ) ! , successBlock : { ( val ) - > Void in < nl > - / / c . dismiss ( ) < nl > - / / } ) < nl > + c . actionTitle = " NavigationSave " < nl > + < nl > + c . initialText = self . group . getNameModel ( ) . get ( ) < nl > + < nl > + c . didDoneTap = { ( t , c ) - > ( ) in < nl > + < nl > + if t . length = = 0 { < nl > + return < nl > + } < nl > + < nl > + / / c . executeSafeOnlySuccess ( Actor . editGroupTitleCommandWithGid ( jint ( self . gid ) , withTitle : t ) ! , successBlock : { ( val ) - > Void in < nl > + / / c . dismiss ( ) < nl > + / / } ) < nl > + } < nl > } < nl > + < nl > + return true < nl > } < nl > - < nl > - return true < nl > } < nl > } < nl > < nl > @ @ - 121 , 11 + 124 , 13 @ @ public class AAGroupViewController : AAContentTableController { < nl > if ( ActorSDK . sharedActor ( ) . enableCalls ) { < nl > let members = ( group . members . get ( ) as ! JavaUtilHashSet ) . size ( ) < nl > if ( members < = 20 ) { / / Temporary limitation < nl > - section { ( s ) - > ( ) in < nl > - s . action ( " CallsStartGroupAudio " ) { ( r ) - > ( ) in < nl > - r . selectAction = { ( ) - > Bool in < nl > - self . execute ( Actor . doCallWithGid ( jint ( self . gid ) ) ) < nl > - return true < nl > + if group . groupType = = ACGroupType . GROUP ( ) { < nl > + section { ( s ) - > ( ) in < nl > + s . action ( " CallsStartGroupAudio " ) { ( r ) - > ( ) in < nl > + r . selectAction = { ( ) - > Bool in < nl > + self . execute ( Actor . doCallWithGid ( jint ( self . gid ) ) ) < nl > + return true < nl > + } < nl > } < nl > } < nl > } < nl > @ @ - 176 , 6 + 181 , 24 @ @ public class AAGroupViewController : AAContentTableController { < nl > } < nl > } < nl > < nl > + if group . isCanLeave . get ( ) . booleanValue ( ) { < nl > + / / Leave group < nl > + section { ( s ) - > ( ) in < nl > + s . common ( { ( r ) - > ( ) in < nl > + r . content = AALocalized ( " GroupLeave " ) < nl > + r . style = . Destructive < nl > + r . selectAction = { ( ) - > Bool in < nl > + < nl > + self . confirmDestructive ( AALocalized ( " GroupLeaveConfirm " ) , action : AALocalized ( " GroupLeaveConfirmAction " ) , yes : { ( ) - > ( ) in < nl > + / / self . executeSafe ( Actor . leaveGroupCommandWithGid ( jint ( self . gid ) ) ! ) < nl > + } ) < nl > + < nl > + return true < nl > + } < nl > + } ) < nl > + } < nl > + } < nl > + < nl > / / Members < nl > section { ( s ) - > ( ) in < nl > < nl > @ @ - 316 , 22 + 339 , 6 @ @ public class AAGroupViewController : AAContentTableController { < nl > } < nl > } < nl > } < nl > - < nl > - / / Leave group < nl > - section { ( s ) - > ( ) in < nl > - s . common ( { ( r ) - > ( ) in < nl > - r . content = AALocalized ( " GroupLeave " ) < nl > - r . style = . DestructiveCentered < nl > - r . selectAction = { ( ) - > Bool in < nl > - < nl > - self . confirmDestructive ( AALocalized ( " GroupLeaveConfirm " ) , action : AALocalized ( " GroupLeaveConfirmAction " ) , yes : { ( ) - > ( ) in < nl > - / / self . executeSafe ( Actor . leaveGroupCommandWithGid ( jint ( self . gid ) ) ! ) < nl > - } ) < nl > - < nl > - return true < nl > - } < nl > - } ) < nl > - } < nl > } < nl > < nl > public override func tableWillBind ( binder : AABinder ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > index b13be8d . . 1b4831b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > @ @ - 227 , 7 + 227 , 7 @ @ public class I18nEngine extends IntlEngine { < nl > String contentText = formatContentText ( dialog . getSenderId ( ) , < nl > dialog . getMessageType ( ) , dialog . getText ( ) , dialog . getRelatedUid ( ) , < nl > dialog . isChannel ( ) ) ; < nl > - if ( dialog . getPeer ( ) . getPeerType ( ) = = PeerType . GROUP ) { < nl > + if ( dialog . getPeer ( ) . getPeerType ( ) = = PeerType . GROUP & & ! dialog . isChannel ( ) ) { < nl > if ( ! isLargeDialogMessage ( dialog . getMessageType ( ) ) ) { < nl > return formatPerformerName ( dialog . getSenderId ( ) ) + " : " + contentText ; < nl > } else {

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / dialogs / DialogsDefaultFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / dialogs / DialogsDefaultFragment . java 
 index b64b9b6 . . 205a0a7 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / dialogs / DialogsDefaultFragment . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / dialogs / DialogsDefaultFragment . java 
 @ @ - 88 , 18 + 88 , 9 @ @ public class DialogsDefaultFragment extends BaseDialogFragment { 
 . setMessage ( getString ( R . string . alert _ leave _ group _ message , dialog . getDialogTitle ( ) ) ) 
 . setNegativeButton ( R . string . dialog _ cancel , null ) 
 . setPositiveButton ( R . string . alert _ leave _ group _ yes , ( d1 , which1 ) - > { 
 - execute ( messenger ( ) . leaveGroup ( dialog . getPeer ( ) . getPeerId ( ) ) , R . string . progress _ common , 
 - new CommandCallback < Void > ( ) { 
 - @ Override 
 - public void onResult ( Void res ) { 
 - 
 - } 
 - 
 - @ Override 
 - public void onError ( Exception e ) { 
 - Toast . makeText ( getActivity ( ) , R . string . toast _ unable _ leave , Toast . LENGTH _ LONG ) . show ( ) ; 
 - } 
 - } ) ; 
 + execute ( messenger ( ) . leaveGroup ( dialog . getPeer ( ) . getPeerId ( ) ) , R . string . progress _ common ) . failure ( e - > { 
 + Toast . makeText ( getActivity ( ) , R . string . toast _ unable _ leave , Toast . LENGTH _ LONG ) . show ( ) ; 
 + } ) ; 
 } ) 
 . show ( ) ; 
 } else { 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index ae2aefb . . f096cb3 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 224 , 6 + 224 , 7 @ @ 
 	 	 066A53371BC537CA000E606E / * ConversationViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066A53361BC537CA000E606E / * ConversationViewController . swift * / ; } ; 
 	 	 066A53391BC5456B000E606E / * ActorStyle . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066A53381BC5456B000E606E / * ActorStyle . swift * / ; } ; 
 	 	 066CBCDC1C8D419F004507E2 / * AAAuthEmailViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066CBCDB1C8D419F004507E2 / * AAAuthEmailViewController . swift * / ; } ; 
 + 	 	 067B67541D45341D00B9A238 / * AAGroupViewMembersController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 067B67531D45341D00B9A238 / * AAGroupViewMembersController . swift * / ; } ; 
 	 	 068AFC391C94A0050055F503 / * AADialogListProcessor . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 068AFC381C94A0050055F503 / * AADialogListProcessor . swift * / ; } ; 
 	 	 069CF4CC1BCB909A00C66E12 / * CLBackspaceDetectingTextField . h in Headers * / = { isa = PBXBuildFile ; fileRef = 069CF4C41BCB909A00C66E12 / * CLBackspaceDetectingTextField . h * / ; } ; 
 	 	 069CF4CD1BCB909A00C66E12 / * CLBackspaceDetectingTextField . m in Sources * / = { isa = PBXBuildFile ; fileRef = 069CF4C51BCB909A00C66E12 / * CLBackspaceDetectingTextField . m * / ; } ; 
 @ @ - 601 , 6 + 602 , 7 @ @ 
 	 	 066A53361BC537CA000E606E / * ConversationViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = ConversationViewController . swift ; sourceTree = " < group > " ; } ; 
 	 	 066A53381BC5456B000E606E / * ActorStyle . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = ActorStyle . swift ; sourceTree = " < group > " ; } ; 
 	 	 066CBCDB1C8D419F004507E2 / * AAAuthEmailViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAuthEmailViewController . swift ; sourceTree = " < group > " ; } ; 
 + 	 	 067B67531D45341D00B9A238 / * AAGroupViewMembersController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAGroupViewMembersController . swift ; sourceTree = " < group > " ; } ; 
 	 	 068AFC381C94A0050055F503 / * AADialogListProcessor . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AADialogListProcessor . swift ; sourceTree = " < group > " ; } ; 
 	 	 069CF4C41BCB909A00C66E12 / * CLBackspaceDetectingTextField . h * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . h ; path = CLBackspaceDetectingTextField . h ; sourceTree = " < group > " ; } ; 
 	 	 069CF4C51BCB909A00C66E12 / * CLBackspaceDetectingTextField . m * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . objc ; path = CLBackspaceDetectingTextField . m ; sourceTree = " < group > " ; } ; 
 @ @ - 1240 , 6 + 1242 , 7 @ @ 
 	 	 	 	 066A52E81BC52A25000E606E / * Cells * / , 
 	 	 	 	 066A52E21BC52A20000E606E / * AAGroupViewController . swift * / , 
 	 	 	 	 06ABFE371D3FCCE30031A0D6 / * AAGroupEditInfoViewController . swift * / , 
 + 	 	 	 	 067B67531D45341D00B9A238 / * AAGroupViewMembersController . swift * / , 
 	 	 	 	 06ABFE3C1D41283A0031A0D6 / * AAGroupAdministrationViewController . swift * / , 
 	 	 	 	 06ABFE391D410D2D0031A0D6 / * AAGroupTypeController . swift * / , 
 	 	 	 	 066A52E31BC52A20000E606E / * AAAddParticipantViewController . swift * / , 
 @ @ - 2289 , 6 + 2292 , 7 @ @ 
 	 	 	 	 066A51901BC4C383000E606E / * CocoaNetworkRuntime . swift in Sources * / , 
 	 	 	 	 06ABFE381D3FCCE30031A0D6 / * AAGroupEditInfoViewController . swift in Sources * / , 
 	 	 	 	 06E7B24A1C0F92140090660C / * AABubbleLocationCell . swift in Sources * / , 
 + 	 	 	 	 067B67541D45341D00B9A238 / * AAGroupViewMembersController . swift in Sources * / , 
 	 	 	 	 066A52581BC4EF61000E606E / * Alerts . swift in Sources * / , 
 	 	 	 	 066A51691BC4C366000E606E / * AATools . swift in Sources * / , 
 	 	 	 	 066A53201BC533F5000E606E / * AABubbleBackgroundProcessor . swift in Sources * / , 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 index f5bc14c . . d012a60 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 @ @ - 402 , 8 + 402 , 10 @ @ public class ConversationViewController : 
 
 binder . bind ( group . isDeleted ) { ( isDeleted : JavaLangBoolean ! ) in 
 if isDeleted . booleanValue ( ) { 
 - self . alertUser ( " ChatDeleted " ) { 
 - self . navigateBack ( ) 
 + self . alertUser ( AALocalized ( " ChatDeleted " ) ) { 
 + self . execute ( Actor . deleteChatCommandWithPeer ( self . peer ) , successBlock : { ( r ) in 
 + self . navigateBack ( ) 
 + } ) 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 index 828dfdc . . 4c1eeec 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 @ @ - 160 , 7 + 160 , 7 @ @ public class AAGroupViewController : AAContentTableController { 
 r . content = AALocalized ( " GroupViewMembers " ) 
 r . style = . Normal 
 r . selectAction = { ( ) - > Bool in 
 - / / TODO : Implement 
 + self . navigateNext ( AAGroupViewMembersController ( gid : self . gid ) ) 
 return false 
 } 
 } ) 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewMembersController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewMembersController . swift 
 new file mode 100644 
 index 0000000 . . 85ab8c9 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewMembersController . swift 
 @ @ - 0 , 0 + 1 , 154 @ @ 
 + / / 
 + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > 
 + / / 
 + 
 + import Foundation 
 + 
 + public class AAGroupViewMembersController : AAContentTableController { 
 + 
 + private var membersRow : AAManagedArrayRows < ACGroupMember , AAGroupMemberCell > ! 
 + 
 + private var isLoaded = false 
 + private var isLoading = false 
 + private var next : IOSByteArray ! = nil 
 + 
 + public init ( gid : Int ) { 
 + super . init ( style : . Plain ) 
 + self . gid = gid 
 + 
 + navigationItem . title = AALocalized ( " GroupMembers " ) 
 + 
 + if group . isCanInviteMembers . get ( ) . booleanValue ( ) { 
 + navigationItem . rightBarButtonItem = UIBarButtonItem ( barButtonSystemItem : UIBarButtonSystemItem . Add , target : self , action : # selector ( didAddPressed ) ) 
 + } 
 + } 
 + 
 + public required init ( coder aDecoder : NSCoder ) { 
 + fatalError ( " init ( coder : ) has not been implemented " ) 
 + } 
 + 
 + public override func tableDidLoad ( ) { 
 + section { ( s ) in 
 + self . membersRow = s . arrays ( { ( r : AAManagedArrayRows < ACGroupMember , AAGroupMemberCell > ) - > ( ) in 
 + r . height = 48 
 + r . data = [ ACGroupMember ] ( ) 
 + 
 + r . bindData = { ( c , d ) - > ( ) in 
 + let user = Actor . getUserWithUid ( d . uid ) 
 + c . bind ( user , isAdmin : d . isAdministrator ) 
 + 
 + / / Notify to request onlines 
 + Actor . onUserVisibleWithUid ( d . uid ) 
 + } 
 + 
 + r . itemShown = { ( index , d ) in 
 + if index > r . data . count - 10 { 
 + self . loadMore ( ) 
 + } 
 + } 
 + 
 + r . selectAction = { ( d ) - > Bool in 
 + let user = Actor . getUserWithUid ( d . uid ) 
 + if ( user . getId ( ) = = Actor . myUid ( ) ) { 
 + return true 
 + } 
 + 
 + self . alertSheet { ( a : AAAlertSetting ) - > ( ) in 
 + 
 + a . cancel = " AlertCancel " 
 + 
 + a . action ( " GroupMemberInfo " ) { ( ) - > ( ) in 
 + var controller : AAViewController ! = ActorSDK . sharedActor ( ) . delegate . actorControllerForUser ( Int ( user . getId ( ) ) ) 
 + if controller = = nil { 
 + controller = AAUserViewController ( uid : Int ( user . getId ( ) ) ) 
 + } 
 + self . navigateNext ( controller , removeCurrent : false ) 
 + } 
 + 
 + a . action ( " GroupMemberWrite " ) { ( ) - > ( ) in 
 + if let customController = ActorSDK . sharedActor ( ) . delegate . actorControllerForConversation ( ACPeer . userWithInt ( user . getId ( ) ) ) { 
 + self . navigateDetail ( customController ) 
 + } else { 
 + self . navigateDetail ( ConversationViewController ( peer : ACPeer . userWithInt ( user . getId ( ) ) ) ) 
 + } 
 + self . popover ? . dismissPopoverAnimated ( true ) 
 + } 
 + 
 + a . action ( " GroupMemberCall " , closure : { ( ) - > ( ) in 
 + let phones = user . getPhonesModel ( ) . get ( ) 
 + if phones . size ( ) = = 0 { 
 + self . alertUser ( " GroupMemberCallNoPhones " ) 
 + } else if phones . size ( ) = = 1 { 
 + let number = phones . getWithInt ( 0 ) 
 + ActorSDK . sharedActor ( ) . openUrl ( " telprompt : / / + \ ( number . phone ) " ) 
 + } else { 
 + 
 + var numbers = [ String ] ( ) 
 + for i in 0 . . < phones . size ( ) { 
 + let p = phones . getWithInt ( i ) 
 + numbers . append ( " \ ( p . title ) : + \ ( p . phone ) " ) 
 + } 
 + self . showActionSheet ( numbers , 
 + cancelButton : " AlertCancel " , 
 + destructButton : nil , 
 + sourceView : self . view , 
 + sourceRect : self . view . bounds , 
 + tapClosure : { ( index ) - > ( ) in 
 + if ( index > = 0 ) { 
 + let number = phones . getWithInt ( jint ( index ) ) 
 + ActorSDK . sharedActor ( ) . openUrl ( " telprompt : / / + \ ( number . phone ) " ) 
 + } 
 + } ) 
 + } 
 + } ) 
 + 
 + / / Can kick user 
 + let canKick : Bool = 
 + ( self . group . isCanKickAnyone . get ( ) . booleanValue ( ) | | 
 + ( self . group . isCanKickInvited . get ( ) . booleanValue ( ) & & d . inviterUid = = Actor . myUid ( ) ) ) 
 + 
 + if canKick { 
 + let name = Actor . getUserWithUid ( d . uid ) . getNameModel ( ) . get ( ) 
 + a . destructive ( " GroupMemberKick " ) { ( ) - > ( ) in 
 + self . confirmDestructive ( AALocalized ( " GroupMemberKickMessage " ) 
 + . replace ( " { name } " , dest : name ) , action : AALocalized ( " GroupMemberKickAction " ) ) { 
 + self . executeSafe ( Actor . kickMemberCommandWithGid ( jint ( self . gid ) , withUid : user . getId ( ) ) ) 
 + } 
 + } 
 + } 
 + } 
 + 
 + return true 
 + } 
 + } ) 
 + } 
 + 
 + loadMore ( ) 
 + } 
 + 
 + private func loadMore ( ) { 
 + if isLoading { 
 + return 
 + } 
 + if isLoaded { 
 + return 
 + } 
 + 
 + isLoading = true 
 + Actor . loadMembersWithGid ( jint ( gid ) , withLimit : 20 , withNext : next ) . then { ( slice : ACGroupMembersSlice ! ) in 
 + for i in 0 . . < slice . members . size ( ) { 
 + self . membersRow . data . append ( slice . members . getWithInt ( i ) as ! ACGroupMember ) 
 + } 
 + self . tableView . reloadData ( ) 
 + if slice . next = = nil { 
 + self . next = nil 
 + self . isLoaded = true 
 + } 
 + self . isLoading = false 
 + } 
 + } 
 + 
 + func didAddPressed ( ) { 
 + navigateNext ( AAAddParticipantViewController ( gid : self . gid ) ) 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift 
 index 38b8f7b . . 8446d32 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift 	 
 @ @ - 650 , 6 + 650 , 8 @ @ public class AAManagedArrayRows < T , R where R : UITableViewCell > : AAManagedRange { 
 
 public var bindData : ( ( cell : R , item : T ) - > ( ) ) ? 
 
 + public var itemShown : ( ( index : Int , item : T ) - > ( ) ) ? 
 + 
 public var data = [ T ] ( ) 
 
 public func initTable ( table : AAManagedTable ) { 
 @ @ - 670 , 7 + 672 , 13 @ @ public class AAManagedArrayRows < T , R where R : UITableViewCell > : AAManagedRange { 
 
 public func rangeCellForItem ( table : AAManagedTable , indexPath : AARangeIndexPath ) - > UITableViewCell { 
 let res : R = table . dequeueCell ( indexPath . indexPath ) 
 - rangeBindData ( table , indexPath : indexPath , cell : res , item : data [ indexPath . item ] ) 
 + let item = data [ indexPath . item ] 
 + rangeBindData ( table , indexPath : indexPath , cell : res , item : item ) 
 + 
 + if let shown = itemShown { 
 + shown ( index : indexPath . item , item : item ) 
 + } 
 + 
 return res 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / GroupMembersSlice . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / GroupMembersSlice . java 
 index b8e0571 . . 6eb17d2 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / GroupMembersSlice . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / GroupMembersSlice . java 
 @ @ - 1 , 19 + 1 , 23 @ @ 
 package im . actor . core . entity ; 
 
 + import com . google . j2objc . annotations . Property ; 
 + 
 import java . util . ArrayList ; 
 
 public class GroupMembersSlice { 
 - 
 - private ArrayList < Integer > uids ; 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private ArrayList < GroupMember > members ; 
 + @ Property ( " readonly , nonatomic " ) 
 private byte [ ] next ; 
 
 - public GroupMembersSlice ( ArrayList < Integer > uids , byte [ ] next ) { 
 - this . uids = uids ; 
 + public GroupMembersSlice ( ArrayList < GroupMember > members , byte [ ] next ) { 
 + this . members = members ; 
 this . next = next ; 
 } 
 
 - public ArrayList < Integer > getUids ( ) { 
 - return uids ; 
 + public ArrayList < GroupMember > getMembers ( ) { 
 + return members ; 
 } 
 
 public byte [ ] getNext ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsModule . java 
 index 919d036 . . e7117ea 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsModule . java 
 @ @ - 11 , 6 + 11 , 7 @ @ import java . util . List ; 
 import im . actor . core . api . ApiAdminSettings ; 
 import im . actor . core . api . ApiGroupOutPeer ; 
 import im . actor . core . api . ApiGroupType ; 
 + import im . actor . core . api . ApiMember ; 
 import im . actor . core . api . ApiOutPeer ; 
 import im . actor . core . api . ApiPeerType ; 
 import im . actor . core . api . ApiUserOutPeer ; 
 @ @ - 39 , 6 + 40 , 7 @ @ import im . actor . core . api . rpc . ResponseIntegrationToken ; 
 import im . actor . core . api . rpc . ResponseInviteUrl ; 
 import im . actor . core . api . rpc . ResponseVoid ; 
 import im . actor . core . entity . Group ; 
 + import im . actor . core . entity . GroupMember ; 
 import im . actor . core . entity . GroupMembersSlice ; 
 import im . actor . core . entity . GroupPermissions ; 
 import im . actor . core . entity . Peer ; 
 @ @ - 295 , 9 + 297 , 11 @ @ public class GroupsModule extends AbsModule implements BusSubscriber { 
 limit , next ) ) ) 
 . chain ( r - > updates ( ) . loadRequiredPeers ( r . getUsers ( ) , new ArrayList < > ( ) ) ) 
 . map ( r - > { 
 - ArrayList < Integer > members = new ArrayList < > ( ) ; 
 - for ( ApiUserOutPeer p : r . getUsers ( ) ) { 
 - members . add ( p . getUid ( ) ) ; 
 + ArrayList < GroupMember > members = new ArrayList < > ( ) ; 
 + for ( ApiMember p : r . getMembers ( ) ) { 
 + boolean isAdmin = p . isAdmin ( ) ! = null ? p . isAdmin ( ) : false ; 
 + members . add ( new GroupMember ( p . getUid ( ) , 
 + p . getInviterUid ( ) , p . getInviterUid ( ) , isAdmin ) ) ; 
 } 
 return new GroupMembersSlice ( members , r . getNext ( ) ) ; 
 } ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index 1b08a8b . . 88db792 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 235 , 6 + 235 , 7 @ @ 
 	 	 069CF4D31BCB909A00C66E12 / * CLTokenView . m in Sources * / = { isa = PBXBuildFile ; fileRef = 069CF4CB1BCB909A00C66E12 / * CLTokenView . m * / ; } ; 
 	 	 06ABFE331D3FAF800031A0D6 / * GCDAsyncSocket . h in Headers * / = { isa = PBXBuildFile ; fileRef = 06ABFE2F1D3FAF800031A0D6 / * GCDAsyncSocket . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; 
 	 	 06ABFE341D3FAF800031A0D6 / * GCDAsyncSocket . m in Sources * / = { isa = PBXBuildFile ; fileRef = 06ABFE301D3FAF800031A0D6 / * GCDAsyncSocket . m * / ; } ; 
 + 	 	 06ABFE381D3FCCE30031A0D6 / * AAGroupEditInfoViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06ABFE371D3FCCE30031A0D6 / * AAGroupEditInfoViewController . swift * / ; } ; 
 	 	 06B489ED1C9F6EBD0054245B / * AAStickerView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06B489EC1C9F6EBC0054245B / * AAStickerView . swift * / ; } ; 
 	 	 06C1D0771C8BC9FC00B73632 / * AAAuthNameViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06C1D0761C8BC9FC00B73632 / * AAAuthNameViewController . swift * / ; } ; 
 	 	 06C1D07B1C8BFE5C00B73632 / * AAAuthPhoneViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06C1D07A1C8BFE5C00B73632 / * AAAuthPhoneViewController . swift * / ; } ; 
 @ @ - 609 , 6 + 610 , 7 @ @ 
 	 	 069CF4CB1BCB909A00C66E12 / * CLTokenView . m * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . objc ; path = CLTokenView . m ; sourceTree = " < group > " ; } ; 
 	 	 06ABFE2F1D3FAF800031A0D6 / * GCDAsyncSocket . h * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . h ; path = GCDAsyncSocket . h ; sourceTree = " < group > " ; } ; 
 	 	 06ABFE301D3FAF800031A0D6 / * GCDAsyncSocket . m * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . objc ; path = GCDAsyncSocket . m ; sourceTree = " < group > " ; } ; 
 + 	 	 06ABFE371D3FCCE30031A0D6 / * AAGroupEditInfoViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAGroupEditInfoViewController . swift ; sourceTree = " < group > " ; } ; 
 	 	 06B489EC1C9F6EBC0054245B / * AAStickerView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAStickerView . swift ; sourceTree = " < group > " ; } ; 
 	 	 06C1D0761C8BC9FC00B73632 / * AAAuthNameViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAuthNameViewController . swift ; sourceTree = " < group > " ; } ; 
 	 	 06C1D07A1C8BFE5C00B73632 / * AAAuthPhoneViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAuthPhoneViewController . swift ; sourceTree = " < group > " ; } ; 
 @ @ - 1235 , 6 + 1237 , 7 @ @ 
 	 	 	 	 066A52E31BC52A20000E606E / * AAAddParticipantViewController . swift * / , 
 	 	 	 	 066A52E21BC52A20000E606E / * AAGroupViewController . swift * / , 
 	 	 	 	 066A52E41BC52A20000E606E / * AAInviteLinkViewController . swift * / , 
 + 	 	 	 	 06ABFE371D3FCCE30031A0D6 / * AAGroupEditInfoViewController . swift * / , 
 	 	 	 ) ; 
 	 	 	 path = Group ; 
 	 	 	 sourceTree = " < group > " ; 
 @ @ - 2276 , 6 + 2279 , 7 @ @ 
 	 	 	 	 066A52231BC4EEAC000E606E / * AAManagedSection . swift in Sources * / , 
 	 	 	 	 066A52D11BC52204000E606E / * AADialogCell . swift in Sources * / , 
 	 	 	 	 066A51901BC4C383000E606E / * CocoaNetworkRuntime . swift in Sources * / , 
 + 	 	 	 	 06ABFE381D3FCCE30031A0D6 / * AAGroupEditInfoViewController . swift in Sources * / , 
 	 	 	 	 06E7B24A1C0F92140090660C / * AABubbleLocationCell . swift in Sources * / , 
 	 	 	 	 066A52581BC4EF61000E606E / * Alerts . swift in Sources * / , 
 	 	 	 	 066A51691BC4C366000E606E / * AATools . swift in Sources * / , 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupEditInfoViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupEditInfoViewController . swift 
 new file mode 100644 
 index 0000000 . . 6a8dfc5 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupEditInfoViewController . swift 
 @ @ - 0 , 0 + 1 , 23 @ @ 
 + / / 
 + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > 
 + / / 
 + 
 + import Foundation 
 + 
 + public class AAGroupEditInfoController : AAViewController { 
 + 
 + public init ( gid : Int ) { 
 + super . init ( ) 
 + self . gid = gid 
 + } 
 + 
 + public required init ( coder aDecoder : NSCoder ) { 
 + fatalError ( " init ( coder : ) has not been implemented " ) 
 + } 
 + 
 + public override func viewDidLoad ( ) { 
 + super . viewDidLoad ( ) 
 + 
 + 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 index 0e4358f . . 82659eb 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 @ @ - 58 , 60 + 58 , 63 @ @ public class AAGroupViewController : AAContentTableController { 
 } 
 } 
 
 - / / Header : Change photo 
 - s . action ( " GroupSetPhoto " ) { ( r ) - > ( ) in 
 - r . selectAction = { ( ) - > Bool in 
 - let hasCamera = UIImagePickerController . isSourceTypeAvailable ( UIImagePickerControllerSourceType . Camera ) 
 - self . showActionSheet ( hasCamera ? [ " PhotoCamera " , " PhotoLibrary " ] : [ " PhotoLibrary " ] , 
 - cancelButton : " AlertCancel " , 
 - destructButton : self . group . getAvatarModel ( ) . get ( ) ! = nil ? " PhotoRemove " : nil , 
 - sourceView : self . view , 
 - sourceRect : self . view . bounds , 
 - tapClosure : { ( index ) - > ( ) in 
 - if ( index = = - 2 ) { 
 - self . confirmAlertUser ( " PhotoRemoveGroupMessage " , 
 - action : " PhotoRemove " , 
 - tapYes : { ( ) - > ( ) in 
 - Actor . removeGroupAvatarWithGid ( jint ( self . gid ) ) 
 - } , tapNo : nil ) 
 - } else if ( index > = 0 ) { 
 - let takePhoto : Bool = ( index = = 0 ) & & hasCamera 
 - self . pickAvatar ( takePhoto , closure : { ( image ) - > ( ) in 
 - Actor . changeGroupAvatar ( jint ( self . gid ) , image : image ) 
 - } ) 
 - } 
 - } ) 
 - 
 - return true 
 - } 
 - } 
 - 
 - / / Header : Change title 
 - s . action ( " GroupSetTitle " ) { ( r ) - > ( ) in 
 - r . selectAction = { ( ) - > Bool in 
 - self . startEditField { ( c ) - > ( ) in 
 - 
 - c . title = " GroupEditHeader " 
 - 
 - c . fieldHint = " GroupEditHint " 
 - 
 - c . actionTitle = " NavigationSave " 
 - 
 - c . initialText = self . group . getNameModel ( ) . get ( ) 
 + if self . group . isCanEditInfo . get ( ) . booleanValue ( ) { 
 + 
 + / / Header : Change photo 
 + s . action ( " GroupSetPhoto " ) { ( r ) - > ( ) in 
 + r . selectAction = { ( ) - > Bool in 
 + let hasCamera = UIImagePickerController . isSourceTypeAvailable ( UIImagePickerControllerSourceType . Camera ) 
 + self . showActionSheet ( hasCamera ? [ " PhotoCamera " , " PhotoLibrary " ] : [ " PhotoLibrary " ] , 
 + cancelButton : " AlertCancel " , 
 + destructButton : self . group . getAvatarModel ( ) . get ( ) ! = nil ? " PhotoRemove " : nil , 
 + sourceView : self . view , 
 + sourceRect : self . view . bounds , 
 + tapClosure : { ( index ) - > ( ) in 
 + if ( index = = - 2 ) { 
 + self . confirmAlertUser ( " PhotoRemoveGroupMessage " , 
 + action : " PhotoRemove " , 
 + tapYes : { ( ) - > ( ) in 
 + Actor . removeGroupAvatarWithGid ( jint ( self . gid ) ) 
 + } , tapNo : nil ) 
 + } else if ( index > = 0 ) { 
 + let takePhoto : Bool = ( index = = 0 ) & & hasCamera 
 + self . pickAvatar ( takePhoto , closure : { ( image ) - > ( ) in 
 + Actor . changeGroupAvatar ( jint ( self . gid ) , image : image ) 
 + } ) 
 + } 
 + } ) 
 
 - c . didDoneTap = { ( t , c ) - > ( ) in 
 + return true 
 + } 
 + } 
 + 
 + / / Header : Change title 
 + s . action ( " GroupSetTitle " ) { ( r ) - > ( ) in 
 + r . selectAction = { ( ) - > Bool in 
 + self . startEditField { ( c ) - > ( ) in 
 
 - if t . length = = 0 { 
 - return 
 - } 
 + c . title = " GroupEditHeader " 
 + 
 + c . fieldHint = " GroupEditHint " 
 
 - / / c . executeSafeOnlySuccess ( Actor . editGroupTitleCommandWithGid ( jint ( self . gid ) , withTitle : t ) ! , successBlock : { ( val ) - > Void in 
 - / / c . dismiss ( ) 
 - / / } ) 
 + c . actionTitle = " NavigationSave " 
 + 
 + c . initialText = self . group . getNameModel ( ) . get ( ) 
 + 
 + c . didDoneTap = { ( t , c ) - > ( ) in 
 + 
 + if t . length = = 0 { 
 + return 
 + } 
 + 
 + / / c . executeSafeOnlySuccess ( Actor . editGroupTitleCommandWithGid ( jint ( self . gid ) , withTitle : t ) ! , successBlock : { ( val ) - > Void in 
 + / / c . dismiss ( ) 
 + / / } ) 
 + } 
 } 
 + 
 + return true 
 } 
 - 
 - return true 
 } 
 } 
 
 @ @ - 121 , 11 + 124 , 13 @ @ public class AAGroupViewController : AAContentTableController { 
 if ( ActorSDK . sharedActor ( ) . enableCalls ) { 
 let members = ( group . members . get ( ) as ! JavaUtilHashSet ) . size ( ) 
 if ( members < = 20 ) { / / Temporary limitation 
 - section { ( s ) - > ( ) in 
 - s . action ( " CallsStartGroupAudio " ) { ( r ) - > ( ) in 
 - r . selectAction = { ( ) - > Bool in 
 - self . execute ( Actor . doCallWithGid ( jint ( self . gid ) ) ) 
 - return true 
 + if group . groupType = = ACGroupType . GROUP ( ) { 
 + section { ( s ) - > ( ) in 
 + s . action ( " CallsStartGroupAudio " ) { ( r ) - > ( ) in 
 + r . selectAction = { ( ) - > Bool in 
 + self . execute ( Actor . doCallWithGid ( jint ( self . gid ) ) ) 
 + return true 
 + } 
 } 
 } 
 } 
 @ @ - 176 , 6 + 181 , 24 @ @ public class AAGroupViewController : AAContentTableController { 
 } 
 } 
 
 + if group . isCanLeave . get ( ) . booleanValue ( ) { 
 + / / Leave group 
 + section { ( s ) - > ( ) in 
 + s . common ( { ( r ) - > ( ) in 
 + r . content = AALocalized ( " GroupLeave " ) 
 + r . style = . Destructive 
 + r . selectAction = { ( ) - > Bool in 
 + 
 + self . confirmDestructive ( AALocalized ( " GroupLeaveConfirm " ) , action : AALocalized ( " GroupLeaveConfirmAction " ) , yes : { ( ) - > ( ) in 
 + / / self . executeSafe ( Actor . leaveGroupCommandWithGid ( jint ( self . gid ) ) ! ) 
 + } ) 
 + 
 + return true 
 + } 
 + } ) 
 + } 
 + } 
 + 
 / / Members 
 section { ( s ) - > ( ) in 
 
 @ @ - 316 , 22 + 339 , 6 @ @ public class AAGroupViewController : AAContentTableController { 
 } 
 } 
 } 
 - 
 - / / Leave group 
 - section { ( s ) - > ( ) in 
 - s . common ( { ( r ) - > ( ) in 
 - r . content = AALocalized ( " GroupLeave " ) 
 - r . style = . DestructiveCentered 
 - r . selectAction = { ( ) - > Bool in 
 - 
 - self . confirmDestructive ( AALocalized ( " GroupLeaveConfirm " ) , action : AALocalized ( " GroupLeaveConfirmAction " ) , yes : { ( ) - > ( ) in 
 - / / self . executeSafe ( Actor . leaveGroupCommandWithGid ( jint ( self . gid ) ) ! ) 
 - } ) 
 - 
 - return true 
 - } 
 - } ) 
 - } 
 } 
 
 public override func tableWillBind ( binder : AABinder ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 index b13be8d . . 1b4831b 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 @ @ - 227 , 7 + 227 , 7 @ @ public class I18nEngine extends IntlEngine { 
 String contentText = formatContentText ( dialog . getSenderId ( ) , 
 dialog . getMessageType ( ) , dialog . getText ( ) , dialog . getRelatedUid ( ) , 
 dialog . isChannel ( ) ) ; 
 - if ( dialog . getPeer ( ) . getPeerType ( ) = = PeerType . GROUP ) { 
 + if ( dialog . getPeer ( ) . getPeerType ( ) = = PeerType . GROUP & & ! dialog . isChannel ( ) ) { 
 if ( ! isLargeDialogMessage ( dialog . getMessageType ( ) ) ) { 
 return formatPerformerName ( dialog . getSenderId ( ) ) + " : " + contentText ; 
 } else {
