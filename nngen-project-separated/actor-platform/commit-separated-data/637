BLEU SCORE: 0.23588448106534202

TEST MSG: fix ( server : activation ) : don ' t fail when sms gate responds with failure ; log failure
GENERATED MSG: feat ( server : activation ) : add auth token to requests

TEST DIFF (one line): diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationContext . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationContext . scala < nl > index 6589f5e . . 7bbfdfe 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationContext . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationContext . scala < nl > @ @ - 37 , 10 + 37 , 12 @ @ final class ActivationContext ( implicit system : ActorSystem ) { < nl > case c : CallCode ⇒ trySend ( optCallProvider , txHash , c ) < nl > } < nl > } yield result ) map { < nl > - case Xor . Left ( BadRequest ( _ ) ) ⇒ < nl > - system . log . warning ( " Too frequent code sent . Tx hash : { } , code : { } " , txHash , code ) < nl > + case Xor . Left ( BadRequest ( message ) ) ⇒ < nl > + system . log . warning ( " Bad request . Message : { } . Tx hash : { } , code : { } " , message , txHash , code ) < nl > Xor . Right ( ( ) ) < nl > - case error : Xor . Left [ _ ] ⇒ error < nl > + case error @ Xor . Left ( SendFailure ( message ) ) ⇒ < nl > + system . log . error ( " Send failure . Message : { } . Tx hash : { } , code : { } " , message , txHash , code ) < nl > + error < nl > case result : Xor . Right [ _ ] ⇒ result < nl > } < nl > < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationStateActor . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationStateActor . scala < nl > index c66177a . . f6c8f68 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationStateActor . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationStateActor . scala < nl > @ @ - 59 , 7 + 59 , 7 @ @ class ActivationStateActor [ Id , CodeType < : Code ] ( repeatLimit : Duration , send : Co < nl > } < nl > } else { < nl > log . debug ( s " Ignoring send $ code " ) < nl > - Future . successful ( Xor . left ( BadRequest ( " Try to request code later " ) ) ) < nl > + Future . successful ( Xor . left ( BadRequest ( " Too frequent code requests " ) ) ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / messages . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / messages . scala < nl > index 5dd8a85 . . f72c7a3 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / messages . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / messages . scala < nl > @ @ - 7 , 7 + 7 , 7 @ @ sealed trait CodeFailure < nl > final case class CodeHash ( hash : String ) extends CodeResponse < nl > / / activation server failure . client should retry to send activation code < nl > final case class SendFailure ( message : String ) extends CodeResponse with CodeFailure < nl > - / / invalid client request . User should react to message provided in error response ( for example wait one minute and resend code ) < nl > + / / invalid request . User should react to message provided in error response < nl > final case class BadRequest ( message : String ) extends CodeResponse with CodeFailure < nl > < nl > sealed trait ValidationResponse < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / ActorGateSmsProvider . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / ActorGateSmsProvider . scala < nl > index 8f177d6 . . 82cddd8 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / ActorGateSmsProvider . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / ActorGateSmsProvider . scala < nl > @ @ - 2 , 8 + 2 , 8 @ @ package im . actor . server . activation . gate < nl > < nl > import akka . actor . ActorSystem < nl > import akka . event . Logging < nl > + import akka . http . scaladsl . util . FastFuture < nl > import cats . data . Xor < nl > - import im . actor . server . activation . _ < nl > import im . actor . server . activation . common . _ < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . persist . auth . GateAuthCodeRepo < nl > @ @ - 39 , 14 + 39 , 18 @ @ private [ activation ] final class ActorGateSmsProvider ( implicit system : ActorSyste < nl > request = HttpRequest ( method = POST , uri = s " $ { config . uri } / v1 / codes / send " , entity = entity ) < nl > _ = log . debug ( " Requesting code send with { } " , request ) < nl > resp ← pipeline ( request ) < nl > - codeResp ← unmarshal [ CodeResponse ] ( resp ) < nl > + codeResp ← if ( resp . status . isFailure ) { < nl > + FastFuture . successful ( SendFailure ( resp . entity . asString ) ) < nl > + } else { < nl > + unmarshal [ CodeResponse ] ( resp ) < nl > + } < nl > } yield codeResp < nl > < nl > for { < nl > codeResponse ← codeSendRequest < nl > result ← codeResponse match { < nl > case CodeHash ( codeHash ) ⇒ for ( _ ← db . run ( GateAuthCodeRepo . createOrUpdate ( txHash , codeHash ) ) ) yield Xor . right ( ( ) ) < nl > - case failure : CodeFailure ⇒ Future . successful ( Xor . left ( failure ) ) < nl > + case failure : CodeFailure ⇒ FastFuture . successful ( Xor . left ( failure ) ) < nl > } < nl > } yield result < nl > } < nl > @ @ - 63 , 7 + 67 , 7 @ @ private [ activation ] final class ActorGateSmsProvider ( implicit system : ActorSyste < nl > response ← pipeline ( request ) < nl > vr ← unmarshal [ ValidationResponse ] ( response ) < nl > } yield vr < nl > - } getOrElse Future . successful ( InvalidHash ) < nl > + } getOrElse FastFuture . successful ( InvalidHash ) < nl > } yield validationResponse < nl > } < nl > < nl > @ @ - 74 , 13 + 78 , 13 @ @ private [ activation ] final class ActorGateSmsProvider ( implicit system : ActorSyste < nl > case Left ( e ) ⇒ < nl > log . warning ( " Failed to marshal value : { } " , e ) < nl > Future . failed ( e ) < nl > - case Right ( entity ) ⇒ Future . successful ( entity ) < nl > + case Right ( entity ) ⇒ FastFuture . successful ( entity ) < nl > } < nl > < nl > private def unmarshal [ T : ClassTag ] ( response : HttpResponse ) ( implicit um : FromResponseUnmarshaller [ T ] ) : Future [ T ] = < nl > response . as [ T ] match { < nl > - case Left ( e ) ⇒ Future . failed ( new Exception ( s " Failed to parse json : $ { response . entity . asString } " ) ) < nl > - case Right ( result ) ⇒ Future . successful ( result ) < nl > + case Left ( e ) ⇒ FastFuture . failed ( new Exception ( s " Failed to parse json : $ { response . entity . asString } " ) ) < nl > + case Right ( result ) ⇒ FastFuture . successful ( result ) < nl > } < nl > < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - activation / src / main / resources / reference . conf b / actor - server / actor - activation / src / main / resources / reference . conf < nl > index 758ca58 . . 46d4164 100644 < nl > - - - a / actor - server / actor - activation / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - activation / src / main / resources / reference . conf < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > services { < nl > < nl > activation { < nl > + default - service : internal < nl > repeat - limit : 1m < nl > code - expiration : 1 day < nl > code - attempts : 3 < nl > @ @ - 8 , 6 + 9 , 7 @ @ services { < nl > < nl > activation - gate { < nl > uri : " https : / / gate . actor . im " < nl > + auth - token : " 2173fc216dc95641g3137825g59d5gg228237 " < nl > } < nl > < nl > telesign { < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala < nl > index 12d3c86 . . 88523c9 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala < nl > @ @ - 31 , 7 + 31 , 13 @ @ class GateCodeActivation ( config : GateConfig ) ( < nl > override def send ( optTransactionHash : Option [ String ] , code : Code ) : DBIO [ String \ / Unit ] = < nl > optTransactionHash . map { transactionHash ⇒ < nl > val codeResponse : Future [ CodeResponse ] = for { < nl > - resp ← http . singleRequest ( HttpRequest ( method = POST , uri = s " $ { config . uri } / v1 / codes / send " , entity = Json . toJson ( code ) . toString ) ) < nl > + resp ← http . singleRequest ( < nl > + HttpRequest ( < nl > + method = POST , < nl > + uri = s " $ { config . uri } / v1 / codes / send " , < nl > + entity = Json . toJson ( code ) . toString < nl > + ) . withHeaders ( ` X - Auth - Token ` ( config . authToken ) ) < nl > + ) < nl > codeResp ← Unmarshal ( resp ) . to [ CodeResponse ] < nl > } yield codeResp < nl > < nl > @ @ - 53 , 7 + 59 , 7 @ @ class GateCodeActivation ( config : GateConfig ) ( < nl > validationResponse ← optCodeHash map { codeHash ⇒ < nl > val validationUri = Uri ( s " $ { config . uri } / v1 / codes / validate / $ codeHash " ) . withQuery ( " code " → Json . toJson ( code ) . toString ) < nl > for { < nl > - response ← http . singleRequest ( HttpRequest ( GET , validationUri ) ) < nl > + response ← http . singleRequest ( HttpRequest ( GET , validationUri ) . withHeaders ( ` X - Auth - Token ` ( config . authToken ) ) ) < nl > vr ← Unmarshal ( response ) . to [ ValidationResponse ] < nl > } yield vr < nl > } getOrElse Future . successful ( InvalidHash ) < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala < nl > index 5a0102d . . ffedefa 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala < nl > @ @ - 5 , 13 + 5 , 14 @ @ import scala . util . Try < nl > import com . github . kxbmap . configs . _ < nl > import com . typesafe . config . { Config , ConfigFactory } < nl > < nl > - case class GateConfig ( uri : String ) < nl > + case class GateConfig ( uri : String , authToken : String ) < nl > < nl > object GateConfig { < nl > def load ( config : Config ) : Try [ GateConfig ] = < nl > for { < nl > uri ← config . get [ Try [ String ] ] ( " uri " ) < nl > - } yield GateConfig ( uri ) < nl > + authToken ← config . get [ Try [ String ] ] ( " auth - token " ) < nl > + } yield GateConfig ( uri , authToken ) < nl > < nl > def load : Try [ GateConfig ] = { < nl > load ( ConfigFactory . load ( ) . getConfig ( " services . activation - gate " ) ) < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / customHeaders . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / customHeaders . scala < nl > new file mode 100644 < nl > index 0000000 . . d3e8bc0 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / customHeaders . scala < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + package im . actor . server . activation . gate < nl > + < nl > + import akka . http . scaladsl . model . headers . CustomHeader < nl > + < nl > + case class ` X - Auth - Token ` ( value : String ) extends CustomHeader { < nl > + override def name : String = " X - Auth - Token " < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / src / main / resources / application . conf . example b / actor - server / src / main / resources / application . conf . example < nl > index 77add9a . . d24f0a7 100644 < nl > - - - a / actor - server / src / main / resources / application . conf . example < nl > + + + b / actor - server / src / main / resources / application . conf . example < nl > @ @ - 197 , 6 + 197 , 7 @ @ services { < nl > < nl > activation - gate { < nl > uri : " https : / / gate . actor . im " < nl > + auth - token : " 2173fc216dc95641g3137825g59d5gg228237 " < nl > } < nl > < nl > # Email configuration

TEST DIFF:
diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationContext . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationContext . scala 
 index 6589f5e . . 7bbfdfe 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationContext . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationContext . scala 
 @ @ - 37 , 10 + 37 , 12 @ @ final class ActivationContext ( implicit system : ActorSystem ) { 
 case c : CallCode ⇒ trySend ( optCallProvider , txHash , c ) 
 } 
 } yield result ) map { 
 - case Xor . Left ( BadRequest ( _ ) ) ⇒ 
 - system . log . warning ( " Too frequent code sent . Tx hash : { } , code : { } " , txHash , code ) 
 + case Xor . Left ( BadRequest ( message ) ) ⇒ 
 + system . log . warning ( " Bad request . Message : { } . Tx hash : { } , code : { } " , message , txHash , code ) 
 Xor . Right ( ( ) ) 
 - case error : Xor . Left [ _ ] ⇒ error 
 + case error @ Xor . Left ( SendFailure ( message ) ) ⇒ 
 + system . log . error ( " Send failure . Message : { } . Tx hash : { } , code : { } " , message , txHash , code ) 
 + error 
 case result : Xor . Right [ _ ] ⇒ result 
 } 
 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationStateActor . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationStateActor . scala 
 index c66177a . . f6c8f68 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationStateActor . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationStateActor . scala 
 @ @ - 59 , 7 + 59 , 7 @ @ class ActivationStateActor [ Id , CodeType < : Code ] ( repeatLimit : Duration , send : Co 
 } 
 } else { 
 log . debug ( s " Ignoring send $ code " ) 
 - Future . successful ( Xor . left ( BadRequest ( " Try to request code later " ) ) ) 
 + Future . successful ( Xor . left ( BadRequest ( " Too frequent code requests " ) ) ) 
 } 
 } 
 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / messages . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / messages . scala 
 index 5dd8a85 . . f72c7a3 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / messages . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / messages . scala 
 @ @ - 7 , 7 + 7 , 7 @ @ sealed trait CodeFailure 
 final case class CodeHash ( hash : String ) extends CodeResponse 
 / / activation server failure . client should retry to send activation code 
 final case class SendFailure ( message : String ) extends CodeResponse with CodeFailure 
 - / / invalid client request . User should react to message provided in error response ( for example wait one minute and resend code ) 
 + / / invalid request . User should react to message provided in error response 
 final case class BadRequest ( message : String ) extends CodeResponse with CodeFailure 
 
 sealed trait ValidationResponse 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / ActorGateSmsProvider . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / ActorGateSmsProvider . scala 
 index 8f177d6 . . 82cddd8 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / ActorGateSmsProvider . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / ActorGateSmsProvider . scala 
 @ @ - 2 , 8 + 2 , 8 @ @ package im . actor . server . activation . gate 
 
 import akka . actor . ActorSystem 
 import akka . event . Logging 
 + import akka . http . scaladsl . util . FastFuture 
 import cats . data . Xor 
 - import im . actor . server . activation . _ 
 import im . actor . server . activation . common . _ 
 import im . actor . server . db . DbExtension 
 import im . actor . server . persist . auth . GateAuthCodeRepo 
 @ @ - 39 , 14 + 39 , 18 @ @ private [ activation ] final class ActorGateSmsProvider ( implicit system : ActorSyste 
 request = HttpRequest ( method = POST , uri = s " $ { config . uri } / v1 / codes / send " , entity = entity ) 
 _ = log . debug ( " Requesting code send with { } " , request ) 
 resp ← pipeline ( request ) 
 - codeResp ← unmarshal [ CodeResponse ] ( resp ) 
 + codeResp ← if ( resp . status . isFailure ) { 
 + FastFuture . successful ( SendFailure ( resp . entity . asString ) ) 
 + } else { 
 + unmarshal [ CodeResponse ] ( resp ) 
 + } 
 } yield codeResp 
 
 for { 
 codeResponse ← codeSendRequest 
 result ← codeResponse match { 
 case CodeHash ( codeHash ) ⇒ for ( _ ← db . run ( GateAuthCodeRepo . createOrUpdate ( txHash , codeHash ) ) ) yield Xor . right ( ( ) ) 
 - case failure : CodeFailure ⇒ Future . successful ( Xor . left ( failure ) ) 
 + case failure : CodeFailure ⇒ FastFuture . successful ( Xor . left ( failure ) ) 
 } 
 } yield result 
 } 
 @ @ - 63 , 7 + 67 , 7 @ @ private [ activation ] final class ActorGateSmsProvider ( implicit system : ActorSyste 
 response ← pipeline ( request ) 
 vr ← unmarshal [ ValidationResponse ] ( response ) 
 } yield vr 
 - } getOrElse Future . successful ( InvalidHash ) 
 + } getOrElse FastFuture . successful ( InvalidHash ) 
 } yield validationResponse 
 } 
 
 @ @ - 74 , 13 + 78 , 13 @ @ private [ activation ] final class ActorGateSmsProvider ( implicit system : ActorSyste 
 case Left ( e ) ⇒ 
 log . warning ( " Failed to marshal value : { } " , e ) 
 Future . failed ( e ) 
 - case Right ( entity ) ⇒ Future . successful ( entity ) 
 + case Right ( entity ) ⇒ FastFuture . successful ( entity ) 
 } 
 
 private def unmarshal [ T : ClassTag ] ( response : HttpResponse ) ( implicit um : FromResponseUnmarshaller [ T ] ) : Future [ T ] = 
 response . as [ T ] match { 
 - case Left ( e ) ⇒ Future . failed ( new Exception ( s " Failed to parse json : $ { response . entity . asString } " ) ) 
 - case Right ( result ) ⇒ Future . successful ( result ) 
 + case Left ( e ) ⇒ FastFuture . failed ( new Exception ( s " Failed to parse json : $ { response . entity . asString } " ) ) 
 + case Right ( result ) ⇒ FastFuture . successful ( result ) 
 } 
 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - activation / src / main / resources / reference . conf b / actor - server / actor - activation / src / main / resources / reference . conf 
 index 758ca58 . . 46d4164 100644 
 - - - a / actor - server / actor - activation / src / main / resources / reference . conf 
 + + + b / actor - server / actor - activation / src / main / resources / reference . conf 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 services { 
 
 activation { 
 + default - service : internal 
 repeat - limit : 1m 
 code - expiration : 1 day 
 code - attempts : 3 
 @ @ - 8 , 6 + 9 , 7 @ @ services { 
 
 activation - gate { 
 uri : " https : / / gate . actor . im " 
 + auth - token : " 2173fc216dc95641g3137825g59d5gg228237 " 
 } 
 
 telesign { 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala 
 index 12d3c86 . . 88523c9 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala 
 @ @ - 31 , 7 + 31 , 13 @ @ class GateCodeActivation ( config : GateConfig ) ( 
 override def send ( optTransactionHash : Option [ String ] , code : Code ) : DBIO [ String \ / Unit ] = 
 optTransactionHash . map { transactionHash ⇒ 
 val codeResponse : Future [ CodeResponse ] = for { 
 - resp ← http . singleRequest ( HttpRequest ( method = POST , uri = s " $ { config . uri } / v1 / codes / send " , entity = Json . toJson ( code ) . toString ) ) 
 + resp ← http . singleRequest ( 
 + HttpRequest ( 
 + method = POST , 
 + uri = s " $ { config . uri } / v1 / codes / send " , 
 + entity = Json . toJson ( code ) . toString 
 + ) . withHeaders ( ` X - Auth - Token ` ( config . authToken ) ) 
 + ) 
 codeResp ← Unmarshal ( resp ) . to [ CodeResponse ] 
 } yield codeResp 
 
 @ @ - 53 , 7 + 59 , 7 @ @ class GateCodeActivation ( config : GateConfig ) ( 
 validationResponse ← optCodeHash map { codeHash ⇒ 
 val validationUri = Uri ( s " $ { config . uri } / v1 / codes / validate / $ codeHash " ) . withQuery ( " code " → Json . toJson ( code ) . toString ) 
 for { 
 - response ← http . singleRequest ( HttpRequest ( GET , validationUri ) ) 
 + response ← http . singleRequest ( HttpRequest ( GET , validationUri ) . withHeaders ( ` X - Auth - Token ` ( config . authToken ) ) ) 
 vr ← Unmarshal ( response ) . to [ ValidationResponse ] 
 } yield vr 
 } getOrElse Future . successful ( InvalidHash ) 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala 
 index 5a0102d . . ffedefa 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala 
 @ @ - 5 , 13 + 5 , 14 @ @ import scala . util . Try 
 import com . github . kxbmap . configs . _ 
 import com . typesafe . config . { Config , ConfigFactory } 
 
 - case class GateConfig ( uri : String ) 
 + case class GateConfig ( uri : String , authToken : String ) 
 
 object GateConfig { 
 def load ( config : Config ) : Try [ GateConfig ] = 
 for { 
 uri ← config . get [ Try [ String ] ] ( " uri " ) 
 - } yield GateConfig ( uri ) 
 + authToken ← config . get [ Try [ String ] ] ( " auth - token " ) 
 + } yield GateConfig ( uri , authToken ) 
 
 def load : Try [ GateConfig ] = { 
 load ( ConfigFactory . load ( ) . getConfig ( " services . activation - gate " ) ) 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / customHeaders . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / customHeaders . scala 
 new file mode 100644 
 index 0000000 . . d3e8bc0 
 - - - / dev / null 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / customHeaders . scala 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package im . actor . server . activation . gate 
 + 
 + import akka . http . scaladsl . model . headers . CustomHeader 
 + 
 + case class ` X - Auth - Token ` ( value : String ) extends CustomHeader { 
 + override def name : String = " X - Auth - Token " 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / src / main / resources / application . conf . example b / actor - server / src / main / resources / application . conf . example 
 index 77add9a . . d24f0a7 100644 
 - - - a / actor - server / src / main / resources / application . conf . example 
 + + + b / actor - server / src / main / resources / application . conf . example 
 @ @ - 197 , 6 + 197 , 7 @ @ services { 
 
 activation - gate { 
 uri : " https : / / gate . actor . im " 
 + auth - token : " 2173fc216dc95641g3137825g59d5gg228237 " 
 } 
 
 # Email configuration
