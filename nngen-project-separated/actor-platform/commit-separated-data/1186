BLEU SCORE: 0.22612164703205964

TEST MSG: fix + feat ( iOS ) : fix some stickers stuff and save point for new attachment menu
GENERATED MSG: feat ( iOS ) : first version for stickers and voice notes

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorApp / begin _ record . caf b / actor - sdk / sdk - core - ios / ActorApp / begin _ record . caf < nl > new file mode 100644 < nl > index 0000000 . . 3d2e9c4 < nl > Binary files / dev / null and b / actor - sdk / sdk - core - ios / ActorApp / begin _ record . caf differ < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index e17baaf . . 0428791 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 199 , 7 + 199 , 6 @ @ < nl > 	 	 152AA8B91C2989270030DEEE / * UIView + SLKAdditions . m in Sources * / = { isa = PBXBuildFile ; fileRef = 152AA8A51C2989270030DEEE / * UIView + SLKAdditions . m * / ; } ; < nl > 	 	 152AA8BD1C298BF00030DEEE / * AASettingsSessionsController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 152AA8BC1C298BF00030DEEE / * AASettingsSessionsController . swift * / ; } ; < nl > 	 	 152AA8BF1C298C4B0030DEEE / * AASettingsLastSeenController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 152AA8BE1C298C4B0030DEEE / * AASettingsLastSeenController . swift * / ; } ; < nl > - 	 	 153F6B3D1C2A9B3D00C0B960 / * begin _ record . caf in Resources * / = { isa = PBXBuildFile ; fileRef = 153F6B3C1C2A9B1900C0B960 / * begin _ record . caf * / ; } ; < nl > 	 	 153F6B4D1C2B03D600C0B960 / * FBShimmering . h in Headers * / = { isa = PBXBuildFile ; fileRef = 153F6B481C2B03D600C0B960 / * FBShimmering . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; < nl > 	 	 153F6B4E1C2B03D600C0B960 / * FBShimmeringLayer . h in Headers * / = { isa = PBXBuildFile ; fileRef = 153F6B491C2B03D600C0B960 / * FBShimmeringLayer . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; < nl > 	 	 153F6B4F1C2B03D600C0B960 / * FBShimmeringLayer . m in Sources * / = { isa = PBXBuildFile ; fileRef = 153F6B4A1C2B03D600C0B960 / * FBShimmeringLayer . m * / ; } ; < nl > @ @ - 271 , 7 + 270 , 12 @ @ < nl > 	 	 15F89F0A1C211FED00776ACD / * opus . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15F89F061C211FED00776ACD / * opus . h * / ; } ; < nl > 	 	 697B3A12994653F581459F63 / * Pods _ ActorSDK . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 9A22DF21664BBB34087283F6 / * Pods _ ActorSDK . framework * / ; } ; < nl > 	 	 BE237C9D1C422FFA00060648 / * AAStickersView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE237C9C1C422FFA00060648 / * AAStickersView . swift * / ; } ; < nl > + 	 	 BE2621571C4656D700A817AB / * AAConvActionSheet . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / ; } ; < nl > + 	 	 BE2621591C4656EE00A817AB / * AAThumbnailView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE2621581C4656EE00A817AB / * AAThumbnailView . swift * / ; } ; < nl > 	 	 BEAC2B311C42D683007F7A2F / * libopus . a in Frameworks * / = { isa = PBXBuildFile ; fileRef = 15F89F001C211FDE00776ACD / * libopus . a * / ; } ; < nl > + 	 	 BEF11DB51C4657D20076400A / * AAASAssetManager . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / ; } ; < nl > + 	 	 BEF11DB61C466D800076400A / * begin _ record . caf in Resources * / = { isa = PBXBuildFile ; fileRef = 153F6B3C1C2A9B1900C0B960 / * begin _ record . caf * / ; } ; < nl > + 	 	 BEFE68D51C4657360001F2D6 / * AAThumbnailCollectionCell . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BEFE68D41C4657360001F2D6 / * AAThumbnailCollectionCell . swift * / ; } ; < nl > / * End PBXBuildFile section * / < nl > < nl > / * Begin PBXFileReference section * / < nl > @ @ - 549 , 6 + 553 , 10 @ @ < nl > 	 	 333F91AE5263DD450666CC87 / * Pods - ActorSDK . release . xcconfig * / = { isa = PBXFileReference ; includeInIndex = 1 ; lastKnownFileType = text . xcconfig ; name = " Pods - ActorSDK . release . xcconfig " ; path = " Pods / Target Support Files / Pods - ActorSDK / Pods - ActorSDK . release . xcconfig " ; sourceTree = " < group > " ; } ; < nl > 	 	 9A22DF21664BBB34087283F6 / * Pods _ ActorSDK . framework * / = { isa = PBXFileReference ; explicitFileType = wrapper . framework ; includeInIndex = 0 ; path = Pods _ ActorSDK . framework ; sourceTree = BUILT _ PRODUCTS _ DIR ; } ; < nl > 	 	 BE237C9C1C422FFA00060648 / * AAStickersView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAStickersView . swift ; sourceTree = " < group > " ; } ; < nl > + 	 	 BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAConvActionSheet . swift ; sourceTree = " < group > " ; } ; < nl > + 	 	 BE2621581C4656EE00A817AB / * AAThumbnailView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAThumbnailView . swift ; sourceTree = " < group > " ; } ; < nl > + 	 	 BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAASAssetManager . swift ; sourceTree = " < group > " ; } ; < nl > + 	 	 BEFE68D41C4657360001F2D6 / * AAThumbnailCollectionCell . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAThumbnailCollectionCell . swift ; sourceTree = " < group > " ; } ; < nl > / * End PBXFileReference section * / < nl > < nl > / * Begin PBXFrameworksBuildPhase section * / < nl > @ @ - 1244 , 6 + 1252 , 7 @ @ < nl > 	 	 15D35F6D1C20196700E3717A / * Views * / = { < nl > 	 	 	 isa = PBXGroup ; < nl > 	 	 	 children = ( < nl > + 	 	 	 	 BE2621551C46569800A817AB / * AttachmentView * / , < nl > 	 	 	 	 15D35F6E1C20196E00E3717A / * AARecordAudioController . swift * / , < nl > 	 	 	 	 BE237C9C1C422FFA00060648 / * AAStickersView . swift * / , < nl > 	 	 	 ) ; < nl > @ @ - 1297 , 6 + 1306 , 25 @ @ < nl > 	 	 	 name = Frameworks ; < nl > 	 	 	 sourceTree = " < group > " ; < nl > 	 	 } ; < nl > + 	 	 BE2621551C46569800A817AB / * AttachmentView * / = { < nl > + 	 	 	 isa = PBXGroup ; < nl > + 	 	 	 children = ( < nl > + 	 	 	 	 BE26215A1C4656F100A817AB / * Manager * / , < nl > + 	 	 	 	 BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / , < nl > + 	 	 	 	 BE2621581C4656EE00A817AB / * AAThumbnailView . swift * / , < nl > + 	 	 	 	 BEFE68D41C4657360001F2D6 / * AAThumbnailCollectionCell . swift * / , < nl > + 	 	 	 ) ; < nl > + 	 	 	 name = AttachmentView ; < nl > + 	 	 	 sourceTree = " < group > " ; < nl > + 	 	 } ; < nl > + 	 	 BE26215A1C4656F100A817AB / * Manager * / = { < nl > + 	 	 	 isa = PBXGroup ; < nl > + 	 	 	 children = ( < nl > + 	 	 	 	 BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / , < nl > + 	 	 	 ) ; < nl > + 	 	 	 name = Manager ; < nl > + 	 	 	 sourceTree = " < group > " ; < nl > + 	 	 } ; < nl > 	 	 FB42EA44E242A3F8E680012E / * Pods * / = { < nl > 	 	 	 isa = PBXGroup ; < nl > 	 	 	 children = ( < nl > @ @ - 1408 , 7 + 1436 , 7 @ @ < nl > 	 	 	 	 TargetAttributes = { < nl > 	 	 	 	 	 066A50D11BC4AE63000E606E = { < nl > 	 	 	 	 	 	 CreatedOnToolsVersion = 7 . 0 ; < nl > - 	 	 	 	 	 	 DevelopmentTeam = HVJR44Y5B6 ; < nl > + 	 	 	 	 	 	 DevelopmentTeam = PR6635TQQ3 ; < nl > 	 	 	 	 	 } ; < nl > 	 	 	 	 } ; < nl > 	 	 	 } ; < nl > @ @ - 1451 , 7 + 1479 , 7 @ @ < nl > 	 	 	 	 065975521BC7DD3C00B8C7DF / * highlight . min . js in Resources * / , < nl > 	 	 	 	 065975441BC7D34200B8C7DF / * Localizable . strings in Resources * / , < nl > 	 	 	 	 0659754C1BC7DBA000B8C7DF / * notification . caf in Resources * / , < nl > - 	 	 	 	 153F6B3D1C2A9B3D00C0B960 / * begin _ record . caf in Resources * / , < nl > + 	 	 	 	 BEF11DB61C466D800076400A / * begin _ record . caf in Resources * / , < nl > 	 	 	 	 063074191BD68E370053DEAF / * bg _ 3 _ preview . jpg in Resources * / , < nl > 	 	 	 ) ; < nl > 	 	 	 runOnlyForDeploymentPostprocessing = 0 ; < nl > @ @ - 1513 , 6 + 1541 , 7 @ @ < nl > 	 	 	 	 15D35F781C20273D00E3717A / * AAAudioRecorder . m in Sources * / , < nl > 	 	 	 	 15D35F181C20185500E3717A / * opus _ header . c in Sources * / , < nl > 	 	 	 	 066A52F81BC52B13000E606E / * AAWallpapperSettingsCell . swift in Sources * / , < nl > + 	 	 	 	 BEFE68D51C4657360001F2D6 / * AAThumbnailCollectionCell . swift in Sources * / , < nl > 	 	 	 	 066A51591BC4C14A000E606E / * AASwiftlyLRU . swift in Sources * / , < nl > 	 	 	 	 15D35F161C20185500E3717A / * diag _ range . c in Sources * / , < nl > 	 	 	 	 066A525E1BC503BB000E606E / * ActorApplicationDelegate . swift in Sources * / , < nl > @ @ - 1623 , 6 + 1652 , 7 @ @ < nl > 	 	 	 	 066A531A1BC533E7000E606E / * AAAutoCompleteCell . swift in Sources * / , < nl > 	 	 	 	 065975051BC757A300B8C7DF / * ActorRuntime . swift in Sources * / , < nl > 	 	 	 	 066A517B1BC4C373000E606E / * FMDatabase . m in Sources * / , < nl > + 	 	 	 	 BE2621591C4656EE00A817AB / * AAThumbnailView . swift in Sources * / , < nl > 	 	 	 	 066A52561BC4EF61000E606E / * AATableViewController . swift in Sources * / , < nl > 	 	 	 	 152AA8AB1C2989270030DEEE / * SLKTextView . m in Sources * / , < nl > 	 	 	 	 153F6B511C2B03D600C0B960 / * FBShimmeringView . m in Sources * / , < nl > @ @ - 1633 , 6 + 1663 , 7 @ @ < nl > 	 	 	 	 066A52E61BC52A20000E606E / * AAAddParticipantViewController . swift in Sources * / , < nl > 	 	 	 	 066A52C81BC521EA000E606E / * AAEditFieldController . swift in Sources * / , < nl > 	 	 	 	 066A532C1BC53406000E606E / * AABubbleTextCell . swift in Sources * / , < nl > + 	 	 	 	 BE2621571C4656D700A817AB / * AAConvActionSheet . swift in Sources * / , < nl > 	 	 	 	 066A52261BC4EEAC000E606E / * ManagedCells . swift in Sources * / , < nl > 	 	 	 	 066A53221BC533F5000E606E / * AAMessagesFlowLayout . swift in Sources * / , < nl > 	 	 	 	 15D35F541C20187E00E3717A / * AAOpusAudioRecorder . m in Sources * / , < nl > @ @ - 1661 , 6 + 1692 , 7 @ @ < nl > 	 	 	 	 15D35F671C20187E00E3717A / * NSObject + TGLock . m in Sources * / , < nl > 	 	 	 	 15D35F5C1C20187E00E3717A / * AAAudioPlayer . m in Sources * / , < nl > 	 	 	 	 152AA8BF1C298C4B0030DEEE / * AASettingsLastSeenController . swift in Sources * / , < nl > + 	 	 	 	 BEF11DB51C4657D20076400A / * AAASAssetManager . swift in Sources * / , < nl > 	 	 	 	 066A51561BC4BEF5000E606E / * AALocalized . swift in Sources * / , < nl > 	 	 	 	 069CF4CF1BCB909A00C66E12 / * CLToken . m in Sources * / , < nl > 	 	 	 	 15D35F751C201B6B00E3717A / * AACustomPresentationController . swift in Sources * / , < nl > @ @ - 1857 , 7 + 1889 , 7 @ @ < nl > 	 	 	 	 SKIP _ INSTALL = YES ; < nl > 	 	 	 	 STRIP _ INSTALLED _ PRODUCT = YES ; < nl > 	 	 	 	 SWIFT _ OBJC _ BRIDGING _ HEADER = " " ; < nl > - 	 	 	 	 SWIFT _ OPTIMIZATION _ LEVEL = " - Owholemodule " ; < nl > + 	 	 	 	 SWIFT _ OPTIMIZATION _ LEVEL = " - Onone " ; < nl > 	 	 	 } ; < nl > 	 	 	 name = Debug ; < nl > 	 	 } ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > index ea63c7b . . b6bf9c5 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > @ @ - 31 , 31 + 31 , 42 @ @ public extension ACCocoaMessenger { < nl > < nl > public func sendVideo ( url : NSURL , peer : ACPeer ) { < nl > < nl > - if let videoData = NSData ( contentsOfURL : url ) { < nl > + if let videoData = NSData ( contentsOfURL : url ) { / / if data have on this local path url go to upload < nl > < nl > let descriptor = " / tmp / " + NSUUID ( ) . UUIDString < nl > let path = CocoaFiles . pathFromDescriptor ( descriptor ) ; < nl > < nl > - videoData . writeToFile ( path , atomically : true ) < nl > - < nl > - let movieAsset = AVAsset ( URL : url ) / / video asset < nl > - let imageGenerator = AVAssetImageGenerator ( asset : movieAsset ) < nl > - let time = CMTimeMake ( 1 , 1 ) < nl > + videoData . writeToFile ( path , atomically : true ) / / write to file < nl > + < nl > < nl > - / / time < nl > + / / get video duration < nl > < nl > let assetforduration = AVURLAsset ( URL : url ) < nl > let videoDuration = assetforduration . duration < nl > let videoDurationSeconds = CMTimeGetSeconds ( videoDuration ) < nl > < nl > + / / get thubnail and upload < nl > + < nl > + let movieAsset = AVAsset ( URL : url ) / / video asset < nl > + let imageGenerator = AVAssetImageGenerator ( asset : movieAsset ) < nl > + var thumbnailTime = movieAsset . duration < nl > + thumbnailTime . value = 25 < nl > + < nl > do { < nl > - let imageRef = try imageGenerator . copyCGImageAtTime ( time , actualTime : nil ) < nl > + let imageRef = try imageGenerator . copyCGImageAtTime ( thumbnailTime , actualTime : nil ) < nl > let thumbnail = UIImage ( CGImage : imageRef ) < nl > - let resized = thumbnail . resizeOptimize ( 1200 * 1200 ) ; < nl > - let thumbData = UIImageJPEGRepresentation ( thumbnail , 0 . 55 ) ; < nl > + let thumbData = UIImageJPEGRepresentation ( thumbnail , 0 . 55 ) ; / / thumbnail binary data < nl > let fastThumb = ACFastThumb ( int : jint ( thumbnail . size . width ) , withInt : jint ( thumbnail . size . height ) , withByteArray : thumbData ! . toJavaBytes ( ) ) < nl > < nl > - sendVideoWithPeer ( peer , withName : " video . mov " , withW : jint ( resized . size . width ) , withH : jint ( resized . size . height ) , withDuration : jint ( videoDurationSeconds ) , withThumb : fastThumb , withDescriptor : descriptor ) < nl > + print ( " video upload imageRef = \ ( imageRef ) " ) < nl > + print ( " video upload thumbnail = \ ( thumbnail ) " ) < nl > + / / print ( " video upload thumbData = \ ( thumbData ) " ) < nl > + print ( " video upload fastThumb = \ ( fastThumb ) " ) < nl > + print ( " video upload videoDurationSeconds = \ ( videoDurationSeconds ) " ) < nl > + print ( " video upload width = \ ( thumbnail . size . width ) " ) < nl > + print ( " video upload height = \ ( thumbnail . size . height ) " ) < nl > + < nl > + sendVideoWithPeer ( peer , withName : " video . mp4 " , withW : jint ( thumbnail . size . width ) , withH : jint ( thumbnail . size . height ) , withDuration : jint ( videoDurationSeconds ) , withThumb : fastThumb , withDescriptor : descriptor ) < nl > < nl > } catch { < nl > print ( " can ' t get thumbnail image " ) < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleStickerCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleStickerCell . swift < nl > index 0408224 . . e24c466 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleStickerCell . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleStickerCell . swift < nl > @ @ - 91 , 11 + 91 , 7 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { < nl > } < nl > < nl > dispatchOnUi { < nl > - < nl > - UIView . transitionWithView ( self , duration : 0 . 3 , options : UIViewAnimationOptions . TransitionCrossDissolve , animations : { ( ) - > Void in < nl > - self . preview . image = image ; < nl > - } , completion : nil ) < nl > - < nl > + self . preview . image = image ; < nl > } < nl > } ) ; < nl > Actor . bindRawFileWithReference ( fileLocation , autoStart : true , withCallback : self . callback ) < nl > @ @ - 313 , 7 + 309 , 7 @ @ public class StikerCellLayout : AACellLayout { < nl > Creating layout for sticker content < nl > * / < nl > public convenience init ( id : Int64 , stickerContent : ACStickerContent , date : Int64 ) { < nl > - self . init ( id : id , width : CGFloat ( 200 ) , height : CGFloat ( 200 ) , date : date , sticker : stickerContent . getSticker ( ) , autoDownload : true ) < nl > + self . init ( id : id , width : CGFloat ( 150 ) , height : CGFloat ( 150 ) , date : date , sticker : stickerContent . getSticker ( ) , autoDownload : true ) < nl > < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift < nl > new file mode 100644 < nl > index 0000000 . . 1850eeb < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift < nl > @ @ - 0 , 0 + 1 , 250 @ @ < nl > + / / < nl > + / / AAASAssetManager . swift < nl > + / / ActorSDK < nl > + / / < nl > + / / Created by kioshimafx on 1 / 13 / 16 . < nl > + / / Copyright © 2016 Steve Kite . All rights reserved . < nl > + / / < nl > + < nl > + import UIKit < nl > + import AssetsLibrary < nl > + < nl > + let ASSET _ PHOTO _ THUMBNAIL : Int = 0 < nl > + let ASSET _ PHOTO _ ASPECT _ THUMBNAIL : Int = 1 < nl > + let ASSET _ PHOTO _ SCREEN _ SIZE : Int = 2 < nl > + let ASSET _ PHOTO _ FULL _ RESOLUTION : Int = 3 < nl > + < nl > + let kNotificationSendPhotos = " NotificationSendPhotos " < nl > + let kNotificationUpdateSelected = " NotificationUpdateSelected " < nl > + < nl > + class AAAssetPhoto { < nl > + < nl > + var asset : ALAsset ! < nl > + var index : Int ! < nl > + var isSelected : Bool ! < nl > + var groupIndex : String ! < nl > + < nl > + var group : Int ! < nl > + < nl > + init ( groupIn : Int , indexIn : Int , assetIn : ALAsset ) { < nl > + < nl > + self . group = groupIn < nl > + self . index = indexIn < nl > + self . asset = assetIn < nl > + self . isSelected = true < nl > + < nl > + self . groupIndex = " \ ( group ) - \ ( index ) " < nl > + < nl > + } < nl > + < nl > + } < nl > + < nl > + class AAASAssetManager : NSObject { < nl > + < nl > + / / # # # singleton # # # < nl > + static let sharedInstance = AAASAssetManager ( ) < nl > + < nl > + var maxSelected : Int ! < nl > + var currentGroupIndex : Int ! < nl > + < nl > + / / / < nl > + < nl > + var assetPhotos : Array < ALAsset > ! < nl > + var selectedPhotos : Array < AAAssetPhoto > ! < nl > + < nl > + / / / < nl > + < nl > + var assetsLibrary : ALAssetsLibrary ! < nl > + var assetGroups : Array < ALAssetsGroup > ! < nl > + var selectedAsset : ALAsset ! < nl > + < nl > + override init ( ) { < nl > + < nl > + self . selectedPhotos = Array < AAAssetPhoto > ( ) < nl > + self . assetsLibrary = ALAssetsLibrary ( ) < nl > + self . assetsLibrary . writeImageToSavedPhotosAlbum ( nil , metadata : nil ) { ( _ , _ ) - > Void in < nl > + / / < nl > + } < nl > + < nl > + } < nl > + < nl > + / / messages _ setActivity ( user _ id : Int , reqResponse : ( VKResponse ! ) - > ( ) < nl > + < nl > + func getSavedPhotoList ( result : ( Array < AnyObject > ! ) - > ( ) , error : ( String ) - > ( ) ) { < nl > + < nl > + < nl > + dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { ( ) - > Void in < nl > + / / < nl > + } < nl > + < nl > + < nl > + } < nl > + < nl > + < nl > + func getGroupCount ( ) - > Int { < nl > + return self . assetGroups . count < nl > + } < nl > + < nl > + func getPhotoCountOfCurrentGroup ( ) - > Int { < nl > + return self . assetPhotos . count < nl > + } < nl > + < nl > + func getSelectedPhotoCount ( ) - > Int { < nl > + < nl > + let selectedArray = self . selectedPhotos . filter ( { < nl > + $ 0 . isSelected = = true < nl > + } ) < nl > + < nl > + return selectedArray . count < nl > + } < nl > + < nl > + func clearData ( ) { < nl > + < nl > + self . selectedPhotos . removeAll ( ) < nl > + self . assetGroups . removeAll ( ) < nl > + self . assetPhotos . removeAll ( ) < nl > + < nl > + < nl > + self . selectedPhotos = nil < nl > + self . assetGroups = nil < nl > + self . assetPhotos = nil < nl > + < nl > + } < nl > + < nl > + / / / / < nl > + < nl > + < nl > + func getImageFromAsset ( asset : ALAsset , type : Int ) - > UIImage { < nl > + / * < nl > + NSString * strXMP = asset . defaultRepresentation . metadata [ @ " AdjustmentXMP " ] ; < nl > + if ( strXMP = = nil | | [ strXMP isKindOfClass : [ NSNull class ] ] ) < nl > + { < nl > + iRef = [ asset . defaultRepresentation fullResolutionImage ] ; < nl > + return [ UIImage imageWithCGImage : iRef scale : 1 . 0 orientation : ( UIImageOrientation ) asset . defaultRepresentation . orientation ] ; < nl > + } < nl > + else < nl > + { < nl > + NSData * dXMP = [ strXMP dataUsingEncoding : NSUTF8StringEncoding ] ; < nl > + < nl > + CIImage * image = [ CIImage imageWithCGImage : asset . defaultRepresentation . fullResolutionImage ] ; < nl > + < nl > + NSError * error = nil ; < nl > + NSArray * filterArray = [ CIFilter filterArrayFromSerializedXMP : dXMP < nl > + inputImageExtent : image . extent < nl > + error : & error ] ; < nl > + if ( error ) { < nl > + NSLog ( @ " Error during CIFilter creation : % @ " , [ error localizedDescription ] ) ; < nl > + } < nl > + < nl > + for ( CIFilter * filter in filterArray ) { < nl > + [ filter setValue : image forKey : kCIInputImageKey ] ; < nl > + image = [ filter outputImage ] ; < nl > + } < nl > + CIContext * context = [ CIContext contextWithOptions : nil ] ; < nl > + CGImageRef cgimage = [ context createCGImage : image fromRect : [ image extent ] ] ; < nl > + UIImage * iImage = [ UIImage imageWithCGImage : cgimage scale : 1 . 0 orientation : ( UIImageOrientation ) asset . defaultRepresentation . orientation ] ; < nl > + return iImage ; < nl > + * / < nl > + < nl > + var imageRef : CGImageRef ! < nl > + < nl > + if ( type = = ASSET _ PHOTO _ THUMBNAIL ) { < nl > + imageRef = asset . thumbnail ( ) as ! CGImageRef < nl > + } else if ( type = = ASSET _ PHOTO _ ASPECT _ THUMBNAIL ) { < nl > + imageRef = asset . aspectRatioThumbnail ( ) as ! CGImageRef < nl > + } else if ( type = = ASSET _ PHOTO _ SCREEN _ SIZE ) { < nl > + imageRef = asset . defaultRepresentation ( ) as ! CGImageRef < nl > + } else if ( type = = ASSET _ PHOTO _ FULL _ RESOLUTION ) { < nl > + imageRef = asset . defaultRepresentation ( ) as ! CGImageRef < nl > + / / let strXMP = asset . defaultRepresentation ( ) . metadata ( ) [ " AdjustmentXMP " ] < nl > + < nl > + < nl > + < nl > + < nl > + } < nl > + < nl > + return UIImage ( CGImage : imageRef ) < nl > + } < nl > + < nl > + func getImageAtIndex ( nIndex : Int , nType : Int ) - > UIImage { < nl > + return getImageFromAsset ( self . assetPhotos [ nIndex ] , type : nType ) < nl > + } < nl > + < nl > + func getImagePreviewAtIndex ( nIndex : Int , nType : Int ) - > UIImage { < nl > + let photoObj = self . selectedPhotos [ nIndex ] < nl > + return getImageFromAsset ( photoObj . asset , type : nType ) < nl > + } < nl > + < nl > + func getAssetAtIndex ( index : Int ) - > ALAsset { < nl > + return self . assetPhotos [ index ] < nl > + } < nl > + < nl > + func getGroupAtIndex ( index : Int ) - > ALAssetsGroup { < nl > + return self . assetGroups [ index ] < nl > + } < nl > + < nl > + func sendSelectedPhotos ( type : Int ) - > Array < UIImage > { < nl > + < nl > + var sendArray = Array < UIImage > ( ) < nl > + < nl > + for ( _ , photoObj ) in self . selectedPhotos . enumerate ( ) { < nl > + < nl > + let image = self . getImageFromAsset ( photoObj . asset , type : type ) < nl > + sendArray . append ( image ) < nl > + < nl > + } < nl > + < nl > + self . selectedPhotos . removeAll ( ) < nl > + < nl > + return sendArray < nl > + } < nl > + < nl > + func addObjectWithIndex ( index : Int ) { < nl > + < nl > + let model = AAAssetPhoto ( groupIn : self . currentGroupIndex , indexIn : index , assetIn : self . assetPhotos [ index ] ) < nl > + < nl > + self . selectedPhotos . append ( model ) < nl > + < nl > + / / [ [ NSNotificationCenter defaultCenter ] postNotificationName : kNotificationUpdateSelected object : nil ] ; < nl > + < nl > + } < nl > + < nl > + < nl > + func removeObjectWithIndex ( index : Int ) { < nl > + < nl > + let groupIndex = " \ ( self . currentGroupIndex ! ) - \ ( index ) " < nl > + < nl > + let results = self . selectedPhotos . filter ( { < nl > + $ 0 . groupIndex = = groupIndex < nl > + } ) < nl > + < nl > + if ( results . count > 0 ) { < nl > + < nl > + / / let model = results [ 0 ] < nl > + < nl > + < nl > + } < nl > + < nl > + < nl > + } < nl > + < nl > + < nl > + func currentGroupFirstIndex ( ) - > Int { < nl > + < nl > + let results = self . selectedPhotos . filter ( { < nl > + $ 0 . group = = self . currentGroupIndex < nl > + } ) < nl > + < nl > + if ( results . count > 0 ) { < nl > + < nl > + let model = results [ 0 ] < nl > + return model . index < nl > + < nl > + } < nl > + < nl > + return 0 < nl > + } < nl > + < nl > + < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift < nl > new file mode 100644 < nl > index 0000000 . . d235ec3 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift < nl > @ @ - 0 , 0 + 1 , 137 @ @ < nl > + / / < nl > + / / AAConvActionSheet . swift < nl > + / / ActorSDK < nl > + / / < nl > + / / Created by kioshimafx on 1 / 13 / 16 . < nl > + / / Copyright © 2016 Steve Kite . All rights reserved . < nl > + / / < nl > + < nl > + import UIKit < nl > + < nl > + protocol AAActionSheetDelegate { < nl > + func actionSheetDidFinished ( selectedObjs : Array < AnyObject > ) < nl > + } < nl > + < nl > + class AAConvActionSheet : UIView { < nl > + < nl > + var delegate : AAActionSheetDelegate ? < nl > + < nl > + var sheetView : UIView ! < nl > + var btnAlbum : UIButton ! < nl > + var btnCamera : UIButton ! < nl > + var btnCancel : UIButton ! < nl > + var thumbnailView : AAThumbnailView ! < nl > + < nl > + weak var weakSuper : ConversationViewController ! < nl > + < nl > + < nl > + let screenWidth = UIScreen . mainScreen ( ) . bounds . size . width < nl > + let screenHeigth = UIScreen . mainScreen ( ) . bounds . size . height < nl > + < nl > + init ( maxSelected : Int , weakSuperIn : ConversationViewController ) { < nl > + super . init ( frame : CGRectZero ) < nl > + < nl > + < nl > + self . setupAllViews ( ) < nl > + self . configUI ( ) < nl > + self . weakSuper = weakSuperIn < nl > + < nl > + } < nl > + < nl > + required init ? ( coder aDecoder : NSCoder ) { < nl > + fatalError ( " init ( coder : ) has not been implemented " ) < nl > + } < nl > + < nl > + / / / / / < nl > + < nl > + func configUI ( ) { < nl > + < nl > + self . alpha = 0 < nl > + self . frame = CGRectMake ( 0 , 0 , screenWidth , screenHeigth ) < nl > + self . backgroundColor = UIColor . clearColor ( ) < nl > + < nl > + self . addSubview ( self . sheetView ) < nl > + < nl > + / / self . sheetView . addSubview ( self . btnCancel ) < nl > + / / self . sheetView . addSubview ( self . btnAlbum ) < nl > + / / self . sheetView . addSubview ( self . btnCamera ) < nl > + / / self . sheetView . addSubview ( self . thumbnailView ) < nl > + < nl > + self . configNotification ( ) < nl > + < nl > + } < nl > + < nl > + func configNotification ( ) { < nl > + < nl > + NSNotificationCenter . defaultCenter ( ) . addObserver ( self , selector : " " , name : kNotificationSendPhotos , object : nil ) < nl > + NSNotificationCenter . defaultCenter ( ) . addObserver ( self , selector : " " , name : kNotificationUpdateSelected , object : nil ) < nl > + < nl > + } < nl > + < nl > + deinit { < nl > + < nl > + self . weakSuper = nil < nl > + < nl > + AAASAssetManager . sharedInstance . clearData ( ) < nl > + NSNotificationCenter . defaultCenter ( ) . removeObserver ( self ) < nl > + < nl > + } < nl > + < nl > + < nl > + func showAnimation ( ) { < nl > + < nl > + / / self . btnCamera . selected = true < nl > + / / self . thumbnailView . reloadView ( ) < nl > + / / self . btnCamera . setTitle ( " Camera " , forState : UIControlState . Normal ) < nl > + < nl > + var frame = self . sheetView . frame < nl > + frame . origin . y = screenHeigth - 350 < nl > + < nl > + UIView . animateWithDuration ( 0 . 25 ) { ( ) - > Void in < nl > + self . sheetView . frame = frame < nl > + self . alpha = 1 < nl > + < nl > + } < nl > + < nl > + < nl > + } < nl > + < nl > + func cancelAnimation ( ) { < nl > + < nl > + var frame = self . sheetView . frame < nl > + frame . origin . y = screenHeigth < nl > + < nl > + UIView . animateWithDuration ( 0 . 25 ) { ( ) - > Void in < nl > + self . sheetView . frame = frame < nl > + self . alpha = 0 < nl > + < nl > + } < nl > + < nl > + } < nl > + < nl > + override func touchesBegan ( touches : Set < UITouch > , withEvent event : UIEvent ? ) { < nl > + cancelAnimation ( ) < nl > + } < nl > + < nl > + func setupAllViews ( ) { < nl > + < nl > + < nl > + / / sheet view < nl > + let frame = CGRectMake ( 0 , screenHeigth , screenWidth , 350 ) < nl > + self . sheetView = UIView ( frame : frame ) < nl > + self . sheetView . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 231 . 0 / 255 . 0 , blue : 234 . 0 / 255 . 0 , alpha : 1 ) < nl > + < nl > + < nl > + / / button cancel < nl > + < nl > + self . btnCancel = UIButton ( type : UIButtonType . Custom ) < nl > + < nl > + / / thumbnail view < nl > + < nl > + < nl > + < nl > + < nl > + } < nl > + < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAStickersView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAStickersView . swift < nl > index d63011e . . 1018daf 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAStickersView . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAStickersView . swift < nl > @ @ - 58 , 8 + 58 , 6 @ @ public class AAStickersViewCell : UICollectionViewCell { < nl > var fileLocation : ACFileReference ? < nl > fileLocation = sticker . getFileReference128 ( ) < nl > < nl > - print ( " file name = = = \ ( fileLocation ! . fileName ) " ) < nl > - < nl > let cached = checkCache ( 512 , id : Int64 ( fileLocation ! . getFileId ( ) ) ) < nl > if ( cached ! = nil ) { < nl > self . stickerImage . image = cached < nl > @ @ - 255 , 9 + 253 , 11 @ @ class AAStickersView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > parsedStickerPack . stickers . append ( stickerModel ) < nl > } < nl > < nl > - self . stickersPacks . append ( parsedStickerPack ) < nl > + if ( parsedStickerPack . stickers . count > 0 ) { < nl > + self . stickersPacks . append ( parsedStickerPack ) < nl > + } < nl > < nl > - print ( " stickers list = = = \ ( sickers ) " ) < nl > + print ( " stickers list = = = \ ( sickers ) " ) < nl > < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift < nl > new file mode 100644 < nl > index 0000000 . . 41da72f < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift < nl > @ @ - 0 , 0 + 1 , 64 @ @ < nl > + / / < nl > + / / AAThumbnailCollectionCell . swift < nl > + / / ActorSDK < nl > + / / < nl > + / / Created by kioshimafx on 1 / 13 / 16 . < nl > + / / Copyright © 2016 Steve Kite . All rights reserved . < nl > + / / < nl > + < nl > + import UIKit < nl > + < nl > + class AAThumbnailCollectionCell : UICollectionViewCell { < nl > + let imgThumbnails : UIImageView ! < nl > + let imgSelected : UIImageView ! < nl > + < nl > + var indexPath : NSIndexPath ! < nl > + let isCheckSelected : Bool ! < nl > + < nl > + override init ( frame : CGRect ) { < nl > + < nl > + self . imgThumbnails = UIImageView ( ) < nl > + self . imgThumbnails . backgroundColor = UIColor . clearColor ( ) < nl > + < nl > + self . imgSelected = UIImageView ( ) < nl > + self . imgSelected . backgroundColor = UIColor . clearColor ( ) < nl > + < nl > + self . isCheckSelected = false < nl > + < nl > + super . init ( frame : frame ) < nl > + < nl > + self . configUI ( ) < nl > + < nl > + } < nl > + < nl > + required init ? ( coder aDecoder : NSCoder ) { < nl > + fatalError ( " init ( coder : ) has not been implemented " ) < nl > + } < nl > + < nl > + / / / < nl > + < nl > + func configUI ( ) { < nl > + < nl > + self . addSubview ( self . imgThumbnails ) < nl > + self . addSubview ( self . imgSelected ) < nl > + < nl > + } < nl > + < nl > + override func layoutSubviews ( ) { < nl > + super . layoutSubviews ( ) < nl > + < nl > + < nl > + } < nl > + < nl > + override func prepareForReuse ( ) { < nl > + super . prepareForReuse ( ) < nl > + < nl > + < nl > + } < nl > + < nl > + / / < nl > + < nl > + func cellReuseIdentifier ( ) - > String { < nl > + return " VMThumbnailCollectionCell " < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift < nl > new file mode 100644 < nl > index 0000000 . . 8267e7a < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift < nl > @ @ - 0 , 0 + 1 , 94 @ @ < nl > + / / < nl > + / / AAThumbnailView . swift < nl > + / / ActorSDK < nl > + / / < nl > + / / Created by kioshimafx on 1 / 13 / 16 . < nl > + / / Copyright © 2016 Steve Kite . All rights reserved . < nl > + / / < nl > + < nl > + import UIKit < nl > + < nl > + class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSource { < nl > + < nl > + var collectionView : UICollectionView ! < nl > + < nl > + < nl > + override init ( frame : CGRect ) { < nl > + super . init ( frame : frame ) < nl > + < nl > + self . configUI ( ) < nl > + < nl > + } < nl > + < nl > + required init ? ( coder aDecoder : NSCoder ) { < nl > + fatalError ( " init ( coder : ) has not been implemented " ) < nl > + } < nl > + < nl > + / / / < nl > + < nl > + func configUI ( ) { < nl > + self . collectionViewSetup ( ) < nl > + self . addSubview ( self . collectionView ) < nl > + } < nl > + < nl > + / / / collection view delegate < nl > + < nl > + func numberOfSectionsInCollectionView ( collectionView : UICollectionView ) - > Int { < nl > + return 0 < nl > + } < nl > + < nl > + func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) - > Int { < nl > + return 0 < nl > + } < nl > + < nl > + func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) - > UICollectionViewCell { < nl > + return UICollectionViewCell ( ) < nl > + } < nl > + < nl > + / / / < nl > + < nl > + func reloadView ( ) { < nl > + self . collectionView . reloadData ( ) < nl > + } < nl > + < nl > + func collectionViewSetup ( ) { < nl > + < nl > + if ( self . collectionView = = nil ) { < nl > + < nl > + let flowLayout = UICollectionViewFlowLayout ( ) < nl > + flowLayout . scrollDirection = . Horizontal < nl > + flowLayout . minimumLineSpacing = 4 < nl > + flowLayout . sectionInset = UIEdgeInsetsMake ( 5 . 0 , 4 . 0 , 5 . 0 , 4 . 0 ) < nl > + < nl > + flowLayout . itemSize = CGSizeMake ( 105 , 180 ) < nl > + < nl > + self . collectionView = UICollectionView ( frame : self . bounds , collectionViewLayout : flowLayout ) < nl > + self . collectionView . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 231 . 0 / 255 . 0 , blue : 234 . 0 / 255 . 0 , alpha : 1 . 0 ) < nl > + self . collectionView . showsHorizontalScrollIndicator = false < nl > + self . collectionView . delegate = self < nl > + self . collectionView . dataSource = self < nl > + < nl > + self . collectionView . registerClass ( AAThumbnailCollectionCell . self , forCellWithReuseIdentifier : " AAThumbnailCollectionCell " ) < nl > + < nl > + / / AAASAssetManager . sharedInstance < nl > + < nl > + / * < nl > + < nl > + [ [ UUAssetManager sharedInstance ] getGroupList : ^ ( NSArray * obj ) { < nl > + < nl > + [ [ UUAssetManager sharedInstance ] getPhotoListOfGroupByIndex : [ UUAssetManager sharedInstance ] . currentGroupIndex result : ^ ( NSArray * obj ) { < nl > + < nl > + [ _ collectionView reloadData ] ; < nl > + < nl > + } ] ; < nl > + } ] ; < nl > + < nl > + * / < nl > + < nl > + < nl > + < nl > + } < nl > + < nl > + } < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > index fc51180 . . 7bda6f1 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > @ @ - 10 , 7 + 10 , 7 @ @ import AddressBookUI < nl > import SVProgressHUD < nl > < nl > class ConversationViewController : AAConversationContentController , UIDocumentMenuDelegate , UIDocumentPickerDelegate , UIImagePickerControllerDelegate , UINavigationControllerDelegate , AALocationPickerControllerDelegate , < nl > - ABPeoplePickerNavigationControllerDelegate { < nl > + ABPeoplePickerNavigationControllerDelegate , AAActionSheetDelegate { < nl > < nl > / / Data binder < nl > private let binder = AABinder ( ) < nl > @ @ - 32 , 6 + 32 , 7 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > private let avatarView = AABarAvatarView ( frameSize : 36 , type : . Rounded ) < nl > private let backgroundView = UIImageView ( ) < nl > private var audioButton : UIButton = UIButton ( ) < nl > + private var actionSheet : AAConvActionSheet ! < nl > < nl > / / Stickers < nl > < nl > @ @ - 69 , 6 + 70 , 7 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > / / slk settings < nl > self . bounces = true < nl > < nl > + < nl > / / Text Input < nl > < nl > self . textInputbar . backgroundColor = appStyle . chatInputFieldBgColor < nl > @ @ - 176 , 6 + 178 , 7 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > let frame = CGRectMake ( 0 , 0 , self . view . frame . size . width , 216 ) < nl > self . stickersView = AAStickersView ( frame : frame , convContrller : self ) < nl > < nl > + < nl > NSNotificationCenter . defaultCenter ( ) . addObserver ( < nl > self , < nl > selector : " updateStickersStateOnCloseKeyboard " , < nl > @ @ - 294 , 6 + 297 , 14 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > if ! AADevice . isiPad { < nl > AANavigationBadge . showBadge ( ) < nl > } < nl > + < nl > + / / action sheet < nl > + < nl > + self . actionSheet = AAConvActionSheet ( maxSelected : 9 , weakSuperIn : self ) < nl > + self . actionSheet . delegate = self < nl > + / / self . navigationController ! . view . addSubview ( self . actionSheet ) < nl > + < nl > + self . navigationController ? . view . addSubview ( self . actionSheet ) < nl > } < nl > < nl > override func viewWillDisappear ( animated : Bool ) { < nl > @ @ - 455 , 6 + 466 , 8 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > override func didPressLeftButton ( sender : AnyObject ! ) { < nl > super . didPressLeftButton ( sender ) < nl > < nl > + self . textInputbar . textView . resignFirstResponder ( ) < nl > + < nl > let hasCamera = UIImagePickerController . isSourceTypeAvailable ( UIImagePickerControllerSourceType . Camera ) < nl > < nl > let builder = AAMenuBuilder ( ) < nl > @ @ - 483 , 6 + 496 , 8 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > < nl > showActionSheet ( builder . items , cancelButton : " AlertCancel " , destructButton : nil , sourceView : self . leftButton , sourceRect : self . leftButton . bounds , tapClosure : builder . tapClosure ) < nl > < nl > + / / self . actionSheet . showAnimation ( ) < nl > + < nl > self . rightButton . layoutIfNeeded ( ) < nl > } < nl > < nl > @ @ - 627 , 7 + 642 , 7 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > Actor . sendUIImage ( image , peer : peer ) < nl > < nl > } else { < nl > - / / Actor . sendVideo ( info [ UIImagePickerControllerMediaURL ] as ! NSURL , peer : peer ) < nl > + Actor . sendVideo ( info [ UIImagePickerControllerMediaURL ] as ! NSURL , peer : peer ) < nl > } < nl > < nl > } < nl > @ @ - 813 , 4 + 828 , 10 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > < nl > } < nl > < nl > + / / / < nl > + < nl > + func actionSheetDidFinished ( selectedObjs : Array < AnyObject > ) { < nl > + < nl > + } < nl > + < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index 4fa03d0 . . 356a5a1 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 271 , 6 + 271 , 7 @ @ < nl > 	 	 15F89F091C211FED00776ACD / * opus _ types . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15F89F051C211FED00776ACD / * opus _ types . h * / ; } ; < nl > 	 	 15F89F0A1C211FED00776ACD / * opus . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15F89F061C211FED00776ACD / * opus . h * / ; } ; < nl > 	 	 697B3A12994653F581459F63 / * Pods _ ActorSDK . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 9A22DF21664BBB34087283F6 / * Pods _ ActorSDK . framework * / ; } ; < nl > + 	 	 BE237C9D1C422FFA00060648 / * AAStickersView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE237C9C1C422FFA00060648 / * AAStickersView . swift * / ; } ; < nl > / * End PBXBuildFile section * / < nl > < nl > / * Begin PBXFileReference section * / < nl > @ @ - 547 , 6 + 548 , 7 @ @ < nl > 	 	 22BAEA363892E475F59B7E9F / * Pods - ActorSDK . debug . xcconfig * / = { isa = PBXFileReference ; includeInIndex = 1 ; lastKnownFileType = text . xcconfig ; name = " Pods - ActorSDK . debug . xcconfig " ; path = " Pods / Target Support Files / Pods - ActorSDK / Pods - ActorSDK . debug . xcconfig " ; sourceTree = " < group > " ; } ; < nl > 	 	 333F91AE5263DD450666CC87 / * Pods - ActorSDK . release . xcconfig * / = { isa = PBXFileReference ; includeInIndex = 1 ; lastKnownFileType = text . xcconfig ; name = " Pods - ActorSDK . release . xcconfig " ; path = " Pods / Target Support Files / Pods - ActorSDK / Pods - ActorSDK . release . xcconfig " ; sourceTree = " < group > " ; } ; < nl > 	 	 9A22DF21664BBB34087283F6 / * Pods _ ActorSDK . framework * / = { isa = PBXFileReference ; explicitFileType = wrapper . framework ; includeInIndex = 0 ; path = Pods _ ActorSDK . framework ; sourceTree = BUILT _ PRODUCTS _ DIR ; } ; < nl > + 	 	 BE237C9C1C422FFA00060648 / * AAStickersView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAStickersView . swift ; sourceTree = " < group > " ; } ; < nl > / * End PBXFileReference section * / < nl > < nl > / * Begin PBXFrameworksBuildPhase section * / < nl > @ @ - 1245 , 6 + 1247 , 7 @ @ < nl > 	 	 	 isa = PBXGroup ; < nl > 	 	 	 children = ( < nl > 	 	 	 	 15D35F6E1C20196E00E3717A / * AARecordAudioController . swift * / , < nl > + 	 	 	 	 BE237C9C1C422FFA00060648 / * AAStickersView . swift * / , < nl > 	 	 	 ) ; < nl > 	 	 	 name = Views ; < nl > 	 	 	 sourceTree = " < group > " ; < nl > @ @ - 1594 , 6 + 1597 , 7 @ @ < nl > 	 	 	 	 066A522A1BC4EEAC000E606E / * ManagedAlerts . swift in Sources * / , < nl > 	 	 	 	 069CF4D11BCB909A00C66E12 / * CLTokenInputView . m in Sources * / , < nl > 	 	 	 	 066A52451BC4EECD000E606E / * AAAvatarCell . swift in Sources * / , < nl > + 	 	 	 	 BE237C9D1C422FFA00060648 / * AAStickersView . swift in Sources * / , < nl > 	 	 	 	 066A52D21BC52204000E606E / * AADialogSearchCell . swift in Sources * / , < nl > 	 	 	 	 066A52371BC4EEBA000E606E / * AATableViewCell . swift in Sources * / , < nl > 	 	 	 	 066A51481BC4BBF4000E606E / * Views . swift in Sources * / , < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / keyboard _ button . imageset / Contents . json b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / keyboard _ button . imageset / Contents . json < nl > new file mode 100644 < nl > index 0000000 . . fabb155 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / keyboard _ button . imageset / Contents . json < nl > @ @ - 0 , 0 + 1 , 21 @ @ < nl > + { < nl > + " images " : [ < nl > + { < nl > + " idiom " : " universal " , < nl > + " scale " : " 1x " < nl > + } , < nl > + { < nl > + " idiom " : " universal " , < nl > + " scale " : " 2x " < nl > + } , < nl > + { < nl > + " idiom " : " universal " , < nl > + " filename " : " keys40 . png " , < nl > + " scale " : " 3x " < nl > + } < nl > + ] , < nl > + " info " : { < nl > + " version " : 1 , < nl > + " author " : " xcode " < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / keyboard _ button . imageset / keys40 . png b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / keyboard _ button . imageset / keys40 . png < nl > new file mode 100644 < nl > index 0000000 . . 2619dde < nl > Binary files / dev / null and b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / keyboard _ button . imageset / keys40 . png differ < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / sticker _ button . imageset / Contents . json b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / sticker _ button . imageset / Contents . json < nl > new file mode 100644 < nl > index 0000000 . . e388e6c < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / sticker _ button . imageset / Contents . json < nl > @ @ - 0 , 0 + 1 , 21 @ @ < nl > + { < nl > + " images " : [ < nl > + { < nl > + " idiom " : " universal " , < nl > + " scale " : " 1x " < nl > + } , < nl > + { < nl > + " idiom " : " universal " , < nl > + " scale " : " 2x " < nl > + } , < nl > + { < nl > + " idiom " : " universal " , < nl > + " filename " : " emoticon82 . png " , < nl > + " scale " : " 3x " < nl > + } < nl > + ] , < nl > + " info " : { < nl > + " version " : 1 , < nl > + " author " : " xcode " < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / sticker _ button . imageset / emoticon82 . png b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / sticker _ button . imageset / emoticon82 . png < nl > new file mode 100644 < nl > index 0000000 . . 7dd5faa < nl > Binary files / dev / null and b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / sticker _ button . imageset / emoticon82 . png differ < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorStyle . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorStyle . swift < nl > index 1327b5d . . ff12b40 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorStyle . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorStyle . swift < nl > @ @ - 42 , 6 + 42 , 8 @ @ public class ActorStyle { < nl > / / / View Controller background color for settings < nl > public var vcBackyardColor = UIColor ( red : 238 / 255 . 0 , green : 238 / 255 . 0 , blue : 238 / 255 . 0 , alpha : 1 ) < nl > < nl > + < nl > + < nl > / / < nl > / / UINavigationBar < nl > / / < nl > @ @ - 368 , 6 + 370 , 8 @ @ public class ActorStyle { < nl > public var chatServiceBubbleColor = UIColor ( rgb : 0x2D394A , alpha : 0 . 56 ) < nl > < nl > public var chatUnreadBgColor = UIColor . alphaBlack ( 0 . 3 ) < nl > + < nl > + public var chatReadMediaColor = UIColor ( red : 46 . 6 / 255 . 0 , green : 211 . 3 / 255 . 0 , blue : 253 . 6 / 255 . 0 , alpha : 1 . 0 ) < nl > < nl > / / Status Colors < nl > < nl > @ @ - 402 , 7 + 406 , 7 @ @ public class ActorStyle { < nl > < nl > private var _ chatStatusMediaActive : UIColor ? < nl > public var chatStatusMediaActive : UIColor { < nl > - get { return _ chatStatusMediaActive ! = nil ? _ chatStatusMediaActive ! : chatStatusActive } < nl > + get { return _ chatStatusMediaActive ! = nil ? _ chatStatusMediaActive ! : chatReadMediaColor } < nl > set ( v ) { _ chatStatusMediaActive = v } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AABubbles . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AABubbles . swift < nl > index 276ab22 . . 240abba 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AABubbles . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AABubbles . swift < nl > @ @ - 19 , 7 + 19 , 7 @ @ class AABubbles { < nl > serviceLayouter , < nl > mediaLayouter , < nl > voiceLayouter , < nl > - / / stickerLayouter , < nl > + stickerLayouter , < nl > documentLayouter , < nl > locationLayouter , < nl > contactLayouter , < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAStickersView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAStickersView . swift < nl > new file mode 100644 < nl > index 0000000 . . f87ad8c < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAStickersView . swift < nl > @ @ - 0 , 0 + 1 , 233 @ @ < nl > + / / < nl > + / / AAStickersView . swift < nl > + / / ActorSDK < nl > + / / < nl > + / / Created by kioshimafx on 1 / 10 / 16 . < nl > + / / Copyright © 2016 Steve Kite . All rights reserved . < nl > + / / < nl > + < nl > + import UIKit < nl > + import SDWebImage < nl > + < nl > + public class AAStickersViewCell : UICollectionViewCell { < nl > + < nl > + let stickerImage : UIImageView ! < nl > + private var callback : AAFileCallback ? = nil < nl > + private static var stickerCache = Dictionary < Int , AASwiftlyLRU < Int64 , UIImage > > ( ) < nl > + private static let cacheSize = 30 < nl > + < nl > + override init ( frame : CGRect ) { < nl > + < nl > + self . stickerImage = UIImageView ( ) < nl > + self . stickerImage . backgroundColor = UIColor . clearColor ( ) < nl > + < nl > + super . init ( frame : frame ) < nl > + < nl > + < nl > + self . addSubview ( self . stickerImage ) < nl > + < nl > + } < nl > + < nl > + required public init ? ( coder aDecoder : NSCoder ) { < nl > + fatalError ( " init ( coder : ) has not been implemented " ) < nl > + } < nl > + < nl > + override public func layoutSubviews ( ) { < nl > + super . layoutSubviews ( ) < nl > + < nl > + self . stickerImage . frame = self . contentView . frame < nl > + < nl > + } < nl > + < nl > + override public func prepareForReuse ( ) { < nl > + super . prepareForReuse ( ) < nl > + < nl > + self . stickerImage . image = nil < nl > + < nl > + } < nl > + < nl > + func bind ( sticker : ACSticker ! , clearPrev : Bool ) { < nl > + < nl > + < nl > + var fileLocation : ACFileReference ? < nl > + fileLocation = sticker . getFileReference128 ( ) < nl > + < nl > + let cached = checkCache ( 512 , id : Int64 ( fileLocation ! . getFileId ( ) ) ) < nl > + if ( cached ! = nil ) { < nl > + self . stickerImage . image = cached < nl > + return < nl > + } < nl > + < nl > + < nl > + self . callback = AAFileCallback ( onDownloaded : { ( reference ) - > ( ) in < nl > + < nl > + < nl > + let data = NSFileManager . defaultManager ( ) . contentsAtPath ( CocoaFiles . pathFromDescriptor ( reference ) ) < nl > + let image = UIImage . sd _ imageWithWebPData ( data ) < nl > + < nl > + < nl > + if ( image = = nil ) { < nl > + return < nl > + } < nl > + < nl > + dispatchOnUi { < nl > + < nl > + self . putToCache ( 512 , id : Int64 ( ( fileLocation ? . getFileId ( ) ) ! ) , image : image ! ) < nl > + < nl > + UIView . transitionWithView ( self , duration : 0 . 3 , options : UIViewAnimationOptions . TransitionCrossDissolve , animations : { ( ) - > Void in < nl > + self . stickerImage . image = image ; < nl > + } , completion : nil ) < nl > + < nl > + } < nl > + } ) ; < nl > + Actor . bindRawFileWithReference ( fileLocation , autoStart : true , withCallback : self . callback ) < nl > + } < nl > + < nl > + / / < nl > + / / Caching < nl > + / / < nl > + < nl > + private func checkCache ( size : Int , id : Int64 ) - > UIImage ? { < nl > + if let cache = AAStickersViewCell . stickerCache [ size ] { < nl > + if let img = cache [ id ] { < nl > + return img < nl > + } < nl > + } < nl > + return nil < nl > + } < nl > + < nl > + private func putToCache ( size : Int , id : Int64 , image : UIImage ) { < nl > + if let cache = AAStickersViewCell . stickerCache [ size ] { < nl > + cache [ id ] = image < nl > + } else { < nl > + let cache = AASwiftlyLRU < jlong , UIImage > ( capacity : AAStickersViewCell . cacheSize ) ; < nl > + cache [ id ] = image < nl > + AAStickersViewCell . stickerCache . updateValue ( cache , forKey : size ) < nl > + } < nl > + } < nl > + < nl > + < nl > + } < nl > + < nl > + class AAStickersView : UIView , UICollectionViewDelegate , UICollectionViewDataSource { < nl > + < nl > + private let collectionView : UICollectionView ! < nl > + private weak var conv : ConversationViewController ! < nl > + private var visualEffectView : UIVisualEffectView ! < nl > + < nl > + private var stickersArray = Array < ACSticker > ( ) < nl > + < nl > + private let binder = AABinder ( ) < nl > + < nl > + init ( frame : CGRect , convContrller : ConversationViewController ) { < nl > + < nl > + / / one item size < nl > + let widthHightItem = frame . width / 4 - 20 ; < nl > + < nl > + / / layout for collection view < nl > + let layoutCV = UICollectionViewFlowLayout ( ) < nl > + layoutCV . scrollDirection = . Vertical < nl > + layoutCV . itemSize = CGSizeMake ( widthHightItem , widthHightItem ) < nl > + < nl > + / / init collection view < nl > + self . collectionView = UICollectionView ( frame : frame , collectionViewLayout : layoutCV ) < nl > + < nl > + < nl > + / / init self view < nl > + super . init ( frame : frame ) < nl > + < nl > + / / bind convController < nl > + self . conv = convContrller < nl > + < nl > + self . visualEffectView = UIVisualEffectView ( effect : UIBlurEffect ( style : . Light ) ) < nl > + < nl > + visualEffectView . frame = frame < nl > + < nl > + self . addSubview ( visualEffectView ) < nl > + < nl > + / / delegate / datasource < nl > + < nl > + < nl > + self . collectionView . delegate = self < nl > + self . collectionView . dataSource = self < nl > + self . collectionView . backgroundColor = UIColor . clearColor ( ) < nl > + < nl > + self . collectionView . registerClass ( AAStickersViewCell . self , forCellWithReuseIdentifier : " AAStickersViewCell " ) < nl > + < nl > + self . collectionView . contentInset = UIEdgeInsetsMake ( 15 , 10 , 15 , 10 ) < nl > + < nl > + < nl > + / / add collection view as subview < nl > + self . visualEffectView . addSubview ( self . collectionView ) < nl > + < nl > + self . backgroundColor = UIColor . clearColor ( ) < nl > + < nl > + self . loadStickers ( ) < nl > + < nl > + } < nl > + < nl > + required init ? ( coder aDecoder : NSCoder ) { < nl > + fatalError ( " init ( coder : ) has not been implemented " ) < nl > + } < nl > + < nl > + override func layoutSubviews ( ) { < nl > + super . layoutSubviews ( ) < nl > + < nl > + self . collectionView . frame = self . frame < nl > + self . visualEffectView . frame = self . frame < nl > + < nl > + } < nl > + < nl > + < nl > + / / / collectionView < nl > + < nl > + func numberOfSectionsInCollectionView ( collectionView : UICollectionView ) - > Int { < nl > + return 1 < nl > + } < nl > + < nl > + func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) - > Int { < nl > + return self . stickersArray . count < nl > + } < nl > + < nl > + func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) - > UICollectionViewCell { < nl > + < nl > + let stickerCell = self . collectionView . dequeueReusableCellWithReuseIdentifier ( " AAStickersViewCell " , forIndexPath : indexPath ) as ! AAStickersViewCell < nl > + < nl > + stickerCell . stickerImage . backgroundColor = UIColor . clearColor ( ) < nl > + stickerCell . bind ( self . stickersArray [ indexPath . row ] , clearPrev : true ) < nl > + < nl > + return stickerCell ; < nl > + < nl > + } < nl > + < nl > + func collectionView ( collectionView : UICollectionView , didSelectItemAtIndexPath indexPath : NSIndexPath ) { < nl > + < nl > + let stickerModel = self . stickersArray [ indexPath . row ] < nl > + < nl > + self . conv . sendSticker ( stickerModel ) < nl > + < nl > + } < nl > + < nl > + < nl > + func loadStickers ( ) { < nl > + < nl > + self . stickersArray = Array < ACSticker > ( ) < nl > + < nl > + Actor . loadStickers ( ) < nl > + < nl > + let packsArray = Actor . getOwnStickerPacksIdsVM ( ) ! . get ( ) as ! JavaUtilArrayList < nl > + let sickersPack = packsArray . getWithInt ( 0 ) as ! ACStickerPackVM < nl > + let sickers = sickersPack . stickers . get ( ) as ! JavaUtilArrayList < nl > + < nl > + for i in 0 . . < sickers . size ( ) { < nl > + let stickerModel = sickers . getWithInt ( i ) as ! ACSticker < nl > + self . stickersArray . append ( stickerModel ) < nl > + } < nl > + < nl > + print ( " packs class = = = \ ( sickers ) " ) < nl > + < nl > + self . collectionView . reloadData ( ) < nl > + < nl > + } < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleStickerCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleStickerCell . swift < nl > index 03b3f66 . . 9e05117 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleStickerCell . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleStickerCell . swift < nl > @ @ - 4 , 13 + 4 , 13 @ @ < nl > < nl > import UIKit < nl > import VBFPopFlatButton < nl > + import SDWebImage < nl > < nl > public class AABubbleStickerCell : AABubbleBaseFileCell { < nl > < nl > / / Views < nl > < nl > let preview = UIImageView ( ) < nl > - let progress = AAProgressView ( size : CGSizeMake ( 64 , 64 ) ) < nl > let timeBg = UIImageView ( ) < nl > let timeLabel = UILabel ( ) < nl > let statusView = UIImageView ( ) < nl > @ @ - 21 , 12 + 21 , 14 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { < nl > var thumbLoaded = false < nl > var contentLoaded = false < nl > < nl > + private var callback : AAFileCallback ? = nil < nl > + < nl > / / Constructors < nl > < nl > public init ( frame : CGRect ) { < nl > super . init ( frame : frame , isFullSize : false ) < nl > < nl > - timeBg . image = Imaging . imageWithColor ( appStyle . chatMediaDateBgColor , size : CGSize ( width : 1 , height : 1 ) ) < nl > + timeBg . image = ActorSDK . sharedActor ( ) . style . statusBackgroundImage < nl > < nl > timeLabel . font = UIFont . italicSystemFontOfSize ( 11 ) < nl > timeLabel . textColor = appStyle . chatMediaDateColor < nl > @ @ - 34 , 7 + 36 , 6 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { < nl > statusView . contentMode = UIViewContentMode . Center < nl > < nl > contentView . addSubview ( preview ) < nl > - contentView . addSubview ( progress ) < nl > < nl > contentView . addSubview ( timeBg ) < nl > contentView . addSubview ( timeLabel ) < nl > @ @ - 63 , 12 + 64 , 6 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { < nl > < nl > if ( ! reuse ) { < nl > < nl > - / / Bind bubble < nl > - / / if ( self . isOut ) { < nl > - / / bindBubbleType ( BubbleType . MediaOut , isCompact : false ) < nl > - / / } else { < nl > - / / bindBubbleType ( BubbleType . MediaIn , isCompact : false ) < nl > - / / } < nl > < nl > bindBubbleType ( BubbleType . Sticker , isCompact : false ) < nl > < nl > @ @ - 78 , 14 + 73 , 35 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { < nl > thumbLoaded = false < nl > < nl > / / Reset progress < nl > - self . progress . hideButton ( ) < nl > - UIView . animateWithDuration ( 0 , animations : { ( ) - > Void in < nl > - self . progress . alpha = 0 < nl > - self . preview . alpha = 0 < nl > - } ) < nl > + < nl > + let sticker = message . content as ! ACStickerContent < nl > + < nl > + var fileLocation : ACFileReference ? < nl > + fileLocation = sticker . getSticker ( ) . getFileReference512 ( ) < nl > + < nl > + self . callback = AAFileCallback ( onDownloaded : { ( reference ) - > ( ) in < nl > + < nl > + let data = NSFileManager . defaultManager ( ) . contentsAtPath ( CocoaFiles . pathFromDescriptor ( reference ) ) < nl > + let image = UIImage . sd _ imageWithWebPData ( data ) < nl > + < nl > + if ( image = = nil ) { < nl > + return < nl > + } < nl > + < nl > + dispatchOnUi { < nl > + < nl > + UIView . transitionWithView ( self , duration : 0 . 3 , options : UIViewAnimationOptions . TransitionCrossDissolve , animations : { ( ) - > Void in < nl > + self . preview . image = image ; < nl > + } , completion : nil ) < nl > + < nl > + } < nl > + } ) ; < nl > + Actor . bindRawFileWithReference ( fileLocation , autoStart : true , withCallback : self . callback ) < nl > + < nl > < nl > / / Bind file < nl > - fileBind ( message , autoDownload : bindedLayout . autoDownload ) < nl > + / / fileBind ( message , autoDownload : bindedLayout . autoDownload ) < nl > + < nl > } < nl > < nl > / / Update time < nl > @ @ - 131 , 9 + 147 , 9 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { < nl > bgLoadReference ( reference , selfGeneration : selfGeneration ) < nl > < nl > runOnUiThread ( selfGeneration ) { ( ) - > ( ) in < nl > - self . progress . showView ( ) < nl > - self . progress . setButtonType ( FlatButtonType . buttonUpBasicType , animated : true ) < nl > - self . progress . hideProgress ( ) < nl > + / / self . progress . showView ( ) < nl > + / / self . progress . setButtonType ( FlatButtonType . buttonUpBasicType , animated : true ) < nl > + / / self . progress . hideProgress ( ) < nl > } < nl > } < nl > < nl > @ @ - 141 , 9 + 157 , 9 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { < nl > bgLoadReference ( reference , selfGeneration : selfGeneration ) < nl > < nl > runOnUiThread ( selfGeneration ) { ( ) - > ( ) in < nl > - self . progress . showView ( ) < nl > - self . progress . setButtonType ( FlatButtonType . buttonPausedType , animated : true ) < nl > - self . progress . setProgress ( progress ) < nl > + / / self . progress . showView ( ) < nl > + / / self . progress . setButtonType ( FlatButtonType . buttonPausedType , animated : true ) < nl > + / / self . progress . setProgress ( progress ) < nl > } < nl > } < nl > < nl > @ @ - 151 , 9 + 167 , 9 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { < nl > bgLoadThumb ( selfGeneration ) < nl > < nl > runOnUiThread ( selfGeneration ) { ( ) - > ( ) in < nl > - self . progress . showView ( ) < nl > - self . progress . setButtonType ( FlatButtonType . buttonDownloadType , animated : true ) < nl > - self . progress . hideProgress ( ) < nl > + / / self . progress . showView ( ) < nl > + / / self . progress . setButtonType ( FlatButtonType . buttonDownloadType , animated : true ) < nl > + / / self . progress . hideProgress ( ) < nl > } < nl > } < nl > < nl > @ @ - 161 , 9 + 177 , 9 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { < nl > bgLoadThumb ( selfGeneration ) < nl > < nl > runOnUiThread ( selfGeneration ) { ( ) - > ( ) in < nl > - self . progress . showView ( ) < nl > - self . progress . setButtonType ( FlatButtonType . buttonPausedType , animated : true ) < nl > - self . progress . setProgress ( progress ) < nl > + / / self . progress . showView ( ) < nl > + / / self . progress . setButtonType ( FlatButtonType . buttonPausedType , animated : true ) < nl > + / / self . progress . setProgress ( progress ) < nl > } < nl > } < nl > < nl > @ @ - 171 , 8 + 187 , 8 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { < nl > bgLoadReference ( reference , selfGeneration : selfGeneration ) < nl > < nl > runOnUiThread ( selfGeneration ) { ( ) - > ( ) in < nl > - self . progress . setProgress ( 1 ) < nl > - self . progress . hideView ( ) < nl > + / / self . progress . setProgress ( 1 ) < nl > + / / self . progress . hideView ( ) < nl > } < nl > } < nl > < nl > @ @ - 221 , 38 + 237 , 8 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { < nl > / / Media Action < nl > < nl > public func mediaDidTap ( ) { < nl > - / / let content = bindedMessage ! . content as ! ACDocumentContent < nl > - / / if let fileSource = content . getSource ( ) as ? ACFileRemoteSource { < nl > - / / Actor . requestStateWithFileId ( fileSource . getFileReference ( ) . getFileId ( ) , withCallback : AAFileCallback ( < nl > - / / notDownloaded : { ( ) - > ( ) in < nl > - / / Actor . startDownloadingWithReference ( fileSource . getFileReference ( ) ) < nl > - / / } , onDownloading : { ( progress ) - > ( ) in < nl > - / / Actor . cancelDownloadingWithFileId ( fileSource . getFileReference ( ) . getFileId ( ) ) < nl > - / / } , onDownloaded : { ( reference ) - > ( ) in < nl > - / / / / if let img = UIImage ( contentsOfFile : CocoaFiles . pathFromDescriptor ( reference ) ) { < nl > - / / / / let previewImage = PreviewImage ( image : img ) < nl > - / / / / let previewController = AAPhotoPreviewController ( photo : previewImage , fromView : self . preview ) < nl > - / / / / previewController . autoShowBadge = true < nl > - / / / / self . controller . presentViewController ( previewController , animated : true , completion : nil ) < nl > - / / / / } < nl > - / / } ) ) < nl > - / / } else if let fileSource = content . getSource ( ) as ? ACFileLocalSource { < nl > - / / let rid = bindedMessage ! . rid < nl > - / / Actor . requestUploadStateWithRid ( rid , withCallback : AAUploadFileCallback ( < nl > - / / notUploaded : { ( ) - > ( ) in < nl > - / / Actor . resumeUploadWithRid ( rid ) < nl > - / / } , onUploading : { ( progress ) - > ( ) in < nl > - / / Actor . pauseUploadWithRid ( rid ) < nl > - / / } , onUploadedClosure : { ( ) - > ( ) in < nl > - / / < nl > - / / / / if let img = UIImage ( contentsOfFile : CocoaFiles . pathFromDescriptor ( CocoaFiles . pathFromDescriptor ( fileSource . getFileDescriptor ( ) ) ) ) { < nl > - / / / / let previewImage = PreviewImage ( image : img ) < nl > - / / / / let previewController = AAPhotoPreviewController ( photo : previewImage , fromView : self . preview ) < nl > - / / / / previewController . autoShowBadge = true < nl > - / / / / self . controller . presentViewController ( previewController , animated : true , completion : nil ) < nl > - / / / / } < nl > - / / } ) ) < nl > - / / } < nl > + < nl > + < nl > } < nl > < nl > / / Layouting < nl > @ @ - 272 , 7 + 258 , 7 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { < nl > preview . frame = CGRectMake ( insets . left , insets . top , bubbleWidth , bubbleHeight ) < nl > } < nl > < nl > - progress . frame = CGRectMake ( preview . frame . origin . x + preview . frame . width / 2 - 32 , preview . frame . origin . y + preview . frame . height / 2 - 32 , 64 , 64 ) < nl > + / / progress . frame = CGRectMake ( preview . frame . origin . x + preview . frame . width / 2 - 32 , preview . frame . origin . y + preview . frame . height / 2 - 32 , 64 , 64 ) < nl > < nl > timeLabel . frame = CGRectMake ( 0 , 0 , 1000 , 1000 ) < nl > timeLabel . sizeToFit ( ) < nl > @ @ - 286 , 7 + 272 , 7 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { < nl > statusView . frame = CGRectMake ( timeLabel . frame . maxX , timeLabel . frame . minY , 23 , timeHeight ) < nl > } < nl > < nl > - timeBg . frame = CGRectMake ( timeLabel . frame . minX - 3 , timeLabel . frame . minY - 1 , timeWidth + 6 , timeHeight + 2 ) < nl > + timeBg . frame = CGRectMake ( timeLabel . frame . minX - 4 , timeLabel . frame . minY - 1 , timeWidth + 8 , timeHeight + 2 ) < nl > } < nl > < nl > } < nl > @ @ - 316 , 7 + 302 , 6 @ @ public class StikerCellLayout : AACellLayout { < nl > < nl > / / Prepare fast thumb < nl > self . fastThumb = sticker ? . getFileReference256 ( ) . toByteArray ( ) . toNSData ( ) < nl > - / / . getImage ( ) . toNSData ( ) < nl > < nl > / / Creating layout < nl > super . init ( height : self . screenSize . height + 2 , date : date , key : " media " ) < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > index 90ceaca . . 1a03d01 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > @ @ - 33 , 6 + 33 , 12 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > private let backgroundView = UIImageView ( ) < nl > private var audioButton : UIButton = UIButton ( ) < nl > < nl > + / / Stickers < nl > + < nl > + private var stickersView : AAStickersView ! < nl > + private var stickersButton : UIButton ! < nl > + private var stickersOpen = false < nl > + < nl > private let audioRecorder : AAAudioRecorder ! = AAAudioRecorder ( ) < nl > < nl > override init ( peer : ACPeer ) { < nl > @ @ - 74 , 16 + 80 , 16 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > < nl > < nl > / / right button < nl > - / / self . rightButton . tintColor = appStyle . chatSendColor < nl > - / / self . rightButton . setImage ( UIImage . tinted ( " aa _ micbutton " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) < nl > - / / self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) < nl > - / / self . rightButton . enabled = true < nl > - / / self . rightButton . layoutIfNeeded ( ) < nl > + self . rightButton . tintColor = appStyle . chatSendColor < nl > + self . rightButton . setImage ( UIImage . tinted ( " aa _ micbutton " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) < nl > + self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) < nl > + self . rightButton . enabled = true < nl > + self . rightButton . layoutIfNeeded ( ) < nl > < nl > - self . rightButton . setTitle ( AALocalized ( " ChatSend " ) , forState : UIControlState . Normal ) < nl > - self . rightButton . setTitleColor ( appStyle . chatSendColor , forState : UIControlState . Normal ) < nl > - self . rightButton . setTitleColor ( appStyle . chatSendDisabledColor , forState : UIControlState . Disabled ) < nl > - self . rightButton . setImage ( nil , forState : UIControlState . Normal ) < nl > + / / self . rightButton . setTitle ( AALocalized ( " ChatSend " ) , forState : UIControlState . Normal ) < nl > + / / self . rightButton . setTitleColor ( appStyle . chatSendColor , forState : UIControlState . Normal ) < nl > + / / self . rightButton . setTitleColor ( appStyle . chatSendDisabledColor , forState : UIControlState . Disabled ) < nl > + / / self . rightButton . setImage ( nil , forState : UIControlState . Normal ) < nl > < nl > / / < nl > < nl > @ @ - 104 , 6 + 110 , 15 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > self . audioButton . addTarget ( self , action : " onAudioRecordingCancelled : " , forControlEvents : UIControlEvents . TouchDragOutside ) < nl > self . audioButton . addTarget ( self , action : " onAudioRecordingCancelled : " , forControlEvents : UIControlEvents . TouchDragExit ) < nl > < nl > + / / add stickers button < nl > + self . stickersButton = UIButton ( type : UIButtonType . System ) < nl > + self . stickersButton . tintColor = UIColor . lightGrayColor ( ) . colorWithAlphaComponent ( 0 . 5 ) < nl > + self . stickersButton . setImage ( UIImage . bundled ( " sticker _ button " ) , forState : UIControlState . Normal ) < nl > + self . stickersButton . frame = CGRectMake ( self . view . frame . size . width - 67 , 12 , 20 , 20 ) < nl > + self . stickersButton . addTarget ( self , action : " changeKeyboard " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + < nl > + self . textInputbar . addSubview ( stickersButton ) < nl > + < nl > self . keyboardPanningEnabled = true < nl > < nl > self . registerPrefixesForAutoCompletion ( [ " @ " ] ) < nl > @ @ - 157 , 6 + 172 , 16 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > super . viewDidLoad ( ) < nl > < nl > navigationItem . backBarButtonItem = UIBarButtonItem ( title : " " , style : UIBarButtonItemStyle . Plain , target : nil , action : nil ) < nl > + < nl > + let frame = CGRectMake ( 0 , 0 , self . view . frame . size . width , 216 ) < nl > + self . stickersView = AAStickersView ( frame : frame , convContrller : self ) < nl > + < nl > + NSNotificationCenter . defaultCenter ( ) . addObserver ( < nl > + self , < nl > + selector : " updateStickersStateOnCloseKeyboard " , < nl > + name : SLKKeyboardWillHideNotification , < nl > + object : nil ) < nl > + < nl > } < nl > < nl > override func viewWillAppear ( animated : Bool ) { < nl > @ @ - 342 , 6 + 367 , 7 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > / / change button < nl > < nl > if ! text . isEmpty { < nl > + self . stickersButton . hidden = true < nl > < nl > self . rightButton . setTitle ( AALocalized ( " ChatSend " ) , forState : UIControlState . Normal ) < nl > self . rightButton . setTitleColor ( appStyle . chatSendColor , forState : UIControlState . Normal ) < nl > @ @ - 353 , 24 + 379 , 24 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > } < nl > < nl > } else { < nl > + self . stickersButton . hidden = false < nl > + if ( self . audioButton . hidden ) { < nl > + < nl > + self . rightButton . tintColor = appStyle . chatSendColor < nl > + self . rightButton . setImage ( UIImage . tinted ( " aa _ micbutton " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) < nl > + self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) < nl > + self . rightButton . enabled = true < nl > + < nl > + } else { < nl > + < nl > + self . rightButton . tintColor = appStyle . chatSendColor < nl > + self . rightButton . setImage ( UIImage . tinted ( " aa _ keyboard " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) < nl > + self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) < nl > + self . rightButton . enabled = true < nl > + < nl > + } < nl > < nl > - / / if ( self . audioButton . hidden ) { < nl > - / / < nl > - / / self . rightButton . tintColor = appStyle . chatSendColor < nl > - / / self . rightButton . setImage ( UIImage . tinted ( " aa _ micbutton " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) < nl > - / / self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) < nl > - / / self . rightButton . enabled = true < nl > - / / < nl > - / / } else { < nl > - / / < nl > - / / self . rightButton . tintColor = appStyle . chatSendColor < nl > - / / self . rightButton . setImage ( UIImage . tinted ( " aa _ keyboard " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) < nl > - / / self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) < nl > - / / self . rightButton . enabled = true < nl > - / / < nl > - / / } < nl > - / / < nl > - / / self . micOn = true < nl > + self . micOn = true < nl > < nl > } < nl > < nl > @ @ - 392 , 32 + 418 , 32 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > < nl > } else { < nl > < nl > - / / if ( self . audioButton . hidden ) { < nl > - / / / / self . textView . resignFirstResponder ( ) < nl > - / / < nl > - / / self . rightButton . tintColor = appStyle . chatSendColor < nl > - / / self . rightButton . setImage ( UIImage . tinted ( " aa _ keyboard " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) < nl > - / / self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) < nl > - / / self . rightButton . enabled = true < nl > - / / < nl > - / / self . textInputbar . layoutIfNeeded ( ) < nl > - / / self . rightButton . layoutIfNeeded ( ) < nl > - / / < nl > - / / self . audioButton . frame = textView . frame < nl > - / / self . audioButton . hidden = false ; < nl > - / / < nl > - / / < nl > - / / } else { < nl > - / / self . audioButton . hidden = true ; < nl > - / / < nl > - / / self . rightButton . tintColor = appStyle . chatSendColor < nl > - / / self . rightButton . setImage ( UIImage . tinted ( " aa _ micbutton " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) < nl > - / / self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) < nl > - / / self . rightButton . enabled = true < nl > - / / < nl > - / / self . textInputbar . layoutIfNeeded ( ) < nl > - / / self . rightButton . layoutIfNeeded ( ) < nl > - / / } < nl > + if ( self . audioButton . hidden ) { < nl > + / / self . textView . resignFirstResponder ( ) < nl > + < nl > + self . rightButton . tintColor = appStyle . chatSendColor < nl > + self . rightButton . setImage ( UIImage . tinted ( " aa _ keyboard " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) < nl > + self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) < nl > + self . rightButton . enabled = true < nl > + < nl > + self . textInputbar . layoutIfNeeded ( ) < nl > + self . rightButton . layoutIfNeeded ( ) < nl > + < nl > + self . audioButton . frame = textView . frame < nl > + self . audioButton . hidden = false ; < nl > + < nl > + < nl > + } else { < nl > + self . audioButton . hidden = true ; < nl > + < nl > + self . rightButton . tintColor = appStyle . chatSendColor < nl > + self . rightButton . setImage ( UIImage . tinted ( " aa _ micbutton " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) < nl > + self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) < nl > + self . rightButton . enabled = true < nl > + < nl > + self . textInputbar . layoutIfNeeded ( ) < nl > + self . rightButton . layoutIfNeeded ( ) < nl > + } < nl > < nl > } < nl > < nl > @ @ - 721 , 5 + 747 , 51 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > } < nl > } < nl > < nl > + / / MARK : - Stickers actions < nl > + < nl > + func updateStickersStateOnCloseKeyboard ( ) { < nl > + < nl > + self . stickersOpen = false < nl > + self . stickersButton . setImage ( UIImage . bundled ( " sticker _ button " ) , forState : UIControlState . Normal ) < nl > + self . textInputbar . textView . inputView = nil < nl > + < nl > + } < nl > + < nl > + func changeKeyboard ( ) { < nl > + < nl > + self . stickersView . loadStickers ( ) < nl > + < nl > + if self . stickersOpen = = false { < nl > + < nl > + self . textInputbar . textView . becomeFirstResponder ( ) < nl > + self . textInputbar . textView . inputView = self . stickersView < nl > + self . textInputbar . textView . refreshFirstResponder ( ) < nl > + self . textInputbar . textView . refreshInputViews ( ) < nl > + < nl > + self . stickersButton . setImage ( UIImage . bundled ( " keyboard _ button " ) , forState : UIControlState . Normal ) < nl > + < nl > + self . stickersOpen = true < nl > + < nl > + < nl > + } else { < nl > + < nl > + / / self . textInputbar . textView . resignFirstResponder ( ) < nl > + self . textInputbar . textView . inputView = nil < nl > + self . textInputbar . textView . refreshFirstResponder ( ) < nl > + self . textInputbar . textView . refreshInputViews ( ) < nl > + < nl > + self . stickersButton . setImage ( UIImage . bundled ( " sticker _ button " ) , forState : UIControlState . Normal ) < nl > + < nl > + self . stickersOpen = false < nl > + < nl > + } < nl > + < nl > + } < nl > + < nl > + func sendSticker ( sticker : ACSticker ) { < nl > + < nl > + Actor . sendStickerWithPeer ( self . peer , withSticker : sticker ) < nl > + < nl > + } < nl > < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / Podfile b / actor - sdk / sdk - core - ios / Podfile < nl > index 4bfa04c . . d5f8f5a 100644 < nl > - - - a / actor - sdk / sdk - core - ios / Podfile < nl > + + + b / actor - sdk / sdk - core - ios / Podfile < nl > @ @ - 21 , 6 + 21 , 7 @ @ target ' ActorApp ' do < nl > pod ' RegexKitLite ' < nl > pod ' CocoaAsyncSocket ' < nl > pod ' zipzap ' < nl > + pod ' SDWebImage / WebP ' < nl > < nl > # Main UI < nl > pod ' NYTPhotoViewer ' < nl > @ @ - 54 , 6 + 55 , 7 @ @ target ' ActorSDK ' do < nl > pod ' RegexKitLite ' < nl > pod ' CocoaAsyncSocket ' < nl > pod ' zipzap ' < nl > + pod ' SDWebImage / WebP ' < nl > < nl > # Main UI < nl > pod ' NYTPhotoViewer '

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorApp / begin _ record . caf b / actor - sdk / sdk - core - ios / ActorApp / begin _ record . caf 
 new file mode 100644 
 index 0000000 . . 3d2e9c4 
 Binary files / dev / null and b / actor - sdk / sdk - core - ios / ActorApp / begin _ record . caf differ 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index e17baaf . . 0428791 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 199 , 7 + 199 , 6 @ @ 
 	 	 152AA8B91C2989270030DEEE / * UIView + SLKAdditions . m in Sources * / = { isa = PBXBuildFile ; fileRef = 152AA8A51C2989270030DEEE / * UIView + SLKAdditions . m * / ; } ; 
 	 	 152AA8BD1C298BF00030DEEE / * AASettingsSessionsController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 152AA8BC1C298BF00030DEEE / * AASettingsSessionsController . swift * / ; } ; 
 	 	 152AA8BF1C298C4B0030DEEE / * AASettingsLastSeenController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 152AA8BE1C298C4B0030DEEE / * AASettingsLastSeenController . swift * / ; } ; 
 - 	 	 153F6B3D1C2A9B3D00C0B960 / * begin _ record . caf in Resources * / = { isa = PBXBuildFile ; fileRef = 153F6B3C1C2A9B1900C0B960 / * begin _ record . caf * / ; } ; 
 	 	 153F6B4D1C2B03D600C0B960 / * FBShimmering . h in Headers * / = { isa = PBXBuildFile ; fileRef = 153F6B481C2B03D600C0B960 / * FBShimmering . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; 
 	 	 153F6B4E1C2B03D600C0B960 / * FBShimmeringLayer . h in Headers * / = { isa = PBXBuildFile ; fileRef = 153F6B491C2B03D600C0B960 / * FBShimmeringLayer . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; 
 	 	 153F6B4F1C2B03D600C0B960 / * FBShimmeringLayer . m in Sources * / = { isa = PBXBuildFile ; fileRef = 153F6B4A1C2B03D600C0B960 / * FBShimmeringLayer . m * / ; } ; 
 @ @ - 271 , 7 + 270 , 12 @ @ 
 	 	 15F89F0A1C211FED00776ACD / * opus . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15F89F061C211FED00776ACD / * opus . h * / ; } ; 
 	 	 697B3A12994653F581459F63 / * Pods _ ActorSDK . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 9A22DF21664BBB34087283F6 / * Pods _ ActorSDK . framework * / ; } ; 
 	 	 BE237C9D1C422FFA00060648 / * AAStickersView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE237C9C1C422FFA00060648 / * AAStickersView . swift * / ; } ; 
 + 	 	 BE2621571C4656D700A817AB / * AAConvActionSheet . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / ; } ; 
 + 	 	 BE2621591C4656EE00A817AB / * AAThumbnailView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE2621581C4656EE00A817AB / * AAThumbnailView . swift * / ; } ; 
 	 	 BEAC2B311C42D683007F7A2F / * libopus . a in Frameworks * / = { isa = PBXBuildFile ; fileRef = 15F89F001C211FDE00776ACD / * libopus . a * / ; } ; 
 + 	 	 BEF11DB51C4657D20076400A / * AAASAssetManager . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / ; } ; 
 + 	 	 BEF11DB61C466D800076400A / * begin _ record . caf in Resources * / = { isa = PBXBuildFile ; fileRef = 153F6B3C1C2A9B1900C0B960 / * begin _ record . caf * / ; } ; 
 + 	 	 BEFE68D51C4657360001F2D6 / * AAThumbnailCollectionCell . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BEFE68D41C4657360001F2D6 / * AAThumbnailCollectionCell . swift * / ; } ; 
 / * End PBXBuildFile section * / 
 
 / * Begin PBXFileReference section * / 
 @ @ - 549 , 6 + 553 , 10 @ @ 
 	 	 333F91AE5263DD450666CC87 / * Pods - ActorSDK . release . xcconfig * / = { isa = PBXFileReference ; includeInIndex = 1 ; lastKnownFileType = text . xcconfig ; name = " Pods - ActorSDK . release . xcconfig " ; path = " Pods / Target Support Files / Pods - ActorSDK / Pods - ActorSDK . release . xcconfig " ; sourceTree = " < group > " ; } ; 
 	 	 9A22DF21664BBB34087283F6 / * Pods _ ActorSDK . framework * / = { isa = PBXFileReference ; explicitFileType = wrapper . framework ; includeInIndex = 0 ; path = Pods _ ActorSDK . framework ; sourceTree = BUILT _ PRODUCTS _ DIR ; } ; 
 	 	 BE237C9C1C422FFA00060648 / * AAStickersView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAStickersView . swift ; sourceTree = " < group > " ; } ; 
 + 	 	 BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAConvActionSheet . swift ; sourceTree = " < group > " ; } ; 
 + 	 	 BE2621581C4656EE00A817AB / * AAThumbnailView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAThumbnailView . swift ; sourceTree = " < group > " ; } ; 
 + 	 	 BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAASAssetManager . swift ; sourceTree = " < group > " ; } ; 
 + 	 	 BEFE68D41C4657360001F2D6 / * AAThumbnailCollectionCell . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAThumbnailCollectionCell . swift ; sourceTree = " < group > " ; } ; 
 / * End PBXFileReference section * / 
 
 / * Begin PBXFrameworksBuildPhase section * / 
 @ @ - 1244 , 6 + 1252 , 7 @ @ 
 	 	 15D35F6D1C20196700E3717A / * Views * / = { 
 	 	 	 isa = PBXGroup ; 
 	 	 	 children = ( 
 + 	 	 	 	 BE2621551C46569800A817AB / * AttachmentView * / , 
 	 	 	 	 15D35F6E1C20196E00E3717A / * AARecordAudioController . swift * / , 
 	 	 	 	 BE237C9C1C422FFA00060648 / * AAStickersView . swift * / , 
 	 	 	 ) ; 
 @ @ - 1297 , 6 + 1306 , 25 @ @ 
 	 	 	 name = Frameworks ; 
 	 	 	 sourceTree = " < group > " ; 
 	 	 } ; 
 + 	 	 BE2621551C46569800A817AB / * AttachmentView * / = { 
 + 	 	 	 isa = PBXGroup ; 
 + 	 	 	 children = ( 
 + 	 	 	 	 BE26215A1C4656F100A817AB / * Manager * / , 
 + 	 	 	 	 BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / , 
 + 	 	 	 	 BE2621581C4656EE00A817AB / * AAThumbnailView . swift * / , 
 + 	 	 	 	 BEFE68D41C4657360001F2D6 / * AAThumbnailCollectionCell . swift * / , 
 + 	 	 	 ) ; 
 + 	 	 	 name = AttachmentView ; 
 + 	 	 	 sourceTree = " < group > " ; 
 + 	 	 } ; 
 + 	 	 BE26215A1C4656F100A817AB / * Manager * / = { 
 + 	 	 	 isa = PBXGroup ; 
 + 	 	 	 children = ( 
 + 	 	 	 	 BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / , 
 + 	 	 	 ) ; 
 + 	 	 	 name = Manager ; 
 + 	 	 	 sourceTree = " < group > " ; 
 + 	 	 } ; 
 	 	 FB42EA44E242A3F8E680012E / * Pods * / = { 
 	 	 	 isa = PBXGroup ; 
 	 	 	 children = ( 
 @ @ - 1408 , 7 + 1436 , 7 @ @ 
 	 	 	 	 TargetAttributes = { 
 	 	 	 	 	 066A50D11BC4AE63000E606E = { 
 	 	 	 	 	 	 CreatedOnToolsVersion = 7 . 0 ; 
 - 	 	 	 	 	 	 DevelopmentTeam = HVJR44Y5B6 ; 
 + 	 	 	 	 	 	 DevelopmentTeam = PR6635TQQ3 ; 
 	 	 	 	 	 } ; 
 	 	 	 	 } ; 
 	 	 	 } ; 
 @ @ - 1451 , 7 + 1479 , 7 @ @ 
 	 	 	 	 065975521BC7DD3C00B8C7DF / * highlight . min . js in Resources * / , 
 	 	 	 	 065975441BC7D34200B8C7DF / * Localizable . strings in Resources * / , 
 	 	 	 	 0659754C1BC7DBA000B8C7DF / * notification . caf in Resources * / , 
 - 	 	 	 	 153F6B3D1C2A9B3D00C0B960 / * begin _ record . caf in Resources * / , 
 + 	 	 	 	 BEF11DB61C466D800076400A / * begin _ record . caf in Resources * / , 
 	 	 	 	 063074191BD68E370053DEAF / * bg _ 3 _ preview . jpg in Resources * / , 
 	 	 	 ) ; 
 	 	 	 runOnlyForDeploymentPostprocessing = 0 ; 
 @ @ - 1513 , 6 + 1541 , 7 @ @ 
 	 	 	 	 15D35F781C20273D00E3717A / * AAAudioRecorder . m in Sources * / , 
 	 	 	 	 15D35F181C20185500E3717A / * opus _ header . c in Sources * / , 
 	 	 	 	 066A52F81BC52B13000E606E / * AAWallpapperSettingsCell . swift in Sources * / , 
 + 	 	 	 	 BEFE68D51C4657360001F2D6 / * AAThumbnailCollectionCell . swift in Sources * / , 
 	 	 	 	 066A51591BC4C14A000E606E / * AASwiftlyLRU . swift in Sources * / , 
 	 	 	 	 15D35F161C20185500E3717A / * diag _ range . c in Sources * / , 
 	 	 	 	 066A525E1BC503BB000E606E / * ActorApplicationDelegate . swift in Sources * / , 
 @ @ - 1623 , 6 + 1652 , 7 @ @ 
 	 	 	 	 066A531A1BC533E7000E606E / * AAAutoCompleteCell . swift in Sources * / , 
 	 	 	 	 065975051BC757A300B8C7DF / * ActorRuntime . swift in Sources * / , 
 	 	 	 	 066A517B1BC4C373000E606E / * FMDatabase . m in Sources * / , 
 + 	 	 	 	 BE2621591C4656EE00A817AB / * AAThumbnailView . swift in Sources * / , 
 	 	 	 	 066A52561BC4EF61000E606E / * AATableViewController . swift in Sources * / , 
 	 	 	 	 152AA8AB1C2989270030DEEE / * SLKTextView . m in Sources * / , 
 	 	 	 	 153F6B511C2B03D600C0B960 / * FBShimmeringView . m in Sources * / , 
 @ @ - 1633 , 6 + 1663 , 7 @ @ 
 	 	 	 	 066A52E61BC52A20000E606E / * AAAddParticipantViewController . swift in Sources * / , 
 	 	 	 	 066A52C81BC521EA000E606E / * AAEditFieldController . swift in Sources * / , 
 	 	 	 	 066A532C1BC53406000E606E / * AABubbleTextCell . swift in Sources * / , 
 + 	 	 	 	 BE2621571C4656D700A817AB / * AAConvActionSheet . swift in Sources * / , 
 	 	 	 	 066A52261BC4EEAC000E606E / * ManagedCells . swift in Sources * / , 
 	 	 	 	 066A53221BC533F5000E606E / * AAMessagesFlowLayout . swift in Sources * / , 
 	 	 	 	 15D35F541C20187E00E3717A / * AAOpusAudioRecorder . m in Sources * / , 
 @ @ - 1661 , 6 + 1692 , 7 @ @ 
 	 	 	 	 15D35F671C20187E00E3717A / * NSObject + TGLock . m in Sources * / , 
 	 	 	 	 15D35F5C1C20187E00E3717A / * AAAudioPlayer . m in Sources * / , 
 	 	 	 	 152AA8BF1C298C4B0030DEEE / * AASettingsLastSeenController . swift in Sources * / , 
 + 	 	 	 	 BEF11DB51C4657D20076400A / * AAASAssetManager . swift in Sources * / , 
 	 	 	 	 066A51561BC4BEF5000E606E / * AALocalized . swift in Sources * / , 
 	 	 	 	 069CF4CF1BCB909A00C66E12 / * CLToken . m in Sources * / , 
 	 	 	 	 15D35F751C201B6B00E3717A / * AACustomPresentationController . swift in Sources * / , 
 @ @ - 1857 , 7 + 1889 , 7 @ @ 
 	 	 	 	 SKIP _ INSTALL = YES ; 
 	 	 	 	 STRIP _ INSTALLED _ PRODUCT = YES ; 
 	 	 	 	 SWIFT _ OBJC _ BRIDGING _ HEADER = " " ; 
 - 	 	 	 	 SWIFT _ OPTIMIZATION _ LEVEL = " - Owholemodule " ; 
 + 	 	 	 	 SWIFT _ OPTIMIZATION _ LEVEL = " - Onone " ; 
 	 	 	 } ; 
 	 	 	 name = Debug ; 
 	 	 } ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 index ea63c7b . . b6bf9c5 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 @ @ - 31 , 31 + 31 , 42 @ @ public extension ACCocoaMessenger { 
 
 public func sendVideo ( url : NSURL , peer : ACPeer ) { 
 
 - if let videoData = NSData ( contentsOfURL : url ) { 
 + if let videoData = NSData ( contentsOfURL : url ) { / / if data have on this local path url go to upload 
 
 let descriptor = " / tmp / " + NSUUID ( ) . UUIDString 
 let path = CocoaFiles . pathFromDescriptor ( descriptor ) ; 
 
 - videoData . writeToFile ( path , atomically : true ) 
 - 
 - let movieAsset = AVAsset ( URL : url ) / / video asset 
 - let imageGenerator = AVAssetImageGenerator ( asset : movieAsset ) 
 - let time = CMTimeMake ( 1 , 1 ) 
 + videoData . writeToFile ( path , atomically : true ) / / write to file 
 + 
 
 - / / time 
 + / / get video duration 
 
 let assetforduration = AVURLAsset ( URL : url ) 
 let videoDuration = assetforduration . duration 
 let videoDurationSeconds = CMTimeGetSeconds ( videoDuration ) 
 
 + / / get thubnail and upload 
 + 
 + let movieAsset = AVAsset ( URL : url ) / / video asset 
 + let imageGenerator = AVAssetImageGenerator ( asset : movieAsset ) 
 + var thumbnailTime = movieAsset . duration 
 + thumbnailTime . value = 25 
 + 
 do { 
 - let imageRef = try imageGenerator . copyCGImageAtTime ( time , actualTime : nil ) 
 + let imageRef = try imageGenerator . copyCGImageAtTime ( thumbnailTime , actualTime : nil ) 
 let thumbnail = UIImage ( CGImage : imageRef ) 
 - let resized = thumbnail . resizeOptimize ( 1200 * 1200 ) ; 
 - let thumbData = UIImageJPEGRepresentation ( thumbnail , 0 . 55 ) ; 
 + let thumbData = UIImageJPEGRepresentation ( thumbnail , 0 . 55 ) ; / / thumbnail binary data 
 let fastThumb = ACFastThumb ( int : jint ( thumbnail . size . width ) , withInt : jint ( thumbnail . size . height ) , withByteArray : thumbData ! . toJavaBytes ( ) ) 
 
 - sendVideoWithPeer ( peer , withName : " video . mov " , withW : jint ( resized . size . width ) , withH : jint ( resized . size . height ) , withDuration : jint ( videoDurationSeconds ) , withThumb : fastThumb , withDescriptor : descriptor ) 
 + print ( " video upload imageRef = \ ( imageRef ) " ) 
 + print ( " video upload thumbnail = \ ( thumbnail ) " ) 
 + / / print ( " video upload thumbData = \ ( thumbData ) " ) 
 + print ( " video upload fastThumb = \ ( fastThumb ) " ) 
 + print ( " video upload videoDurationSeconds = \ ( videoDurationSeconds ) " ) 
 + print ( " video upload width = \ ( thumbnail . size . width ) " ) 
 + print ( " video upload height = \ ( thumbnail . size . height ) " ) 
 + 
 + sendVideoWithPeer ( peer , withName : " video . mp4 " , withW : jint ( thumbnail . size . width ) , withH : jint ( thumbnail . size . height ) , withDuration : jint ( videoDurationSeconds ) , withThumb : fastThumb , withDescriptor : descriptor ) 
 
 } catch { 
 print ( " can ' t get thumbnail image " ) 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleStickerCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleStickerCell . swift 
 index 0408224 . . e24c466 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleStickerCell . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleStickerCell . swift 
 @ @ - 91 , 11 + 91 , 7 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { 
 } 
 
 dispatchOnUi { 
 - 
 - UIView . transitionWithView ( self , duration : 0 . 3 , options : UIViewAnimationOptions . TransitionCrossDissolve , animations : { ( ) - > Void in 
 - self . preview . image = image ; 
 - } , completion : nil ) 
 - 
 + self . preview . image = image ; 
 } 
 } ) ; 
 Actor . bindRawFileWithReference ( fileLocation , autoStart : true , withCallback : self . callback ) 
 @ @ - 313 , 7 + 309 , 7 @ @ public class StikerCellLayout : AACellLayout { 
 Creating layout for sticker content 
 * / 
 public convenience init ( id : Int64 , stickerContent : ACStickerContent , date : Int64 ) { 
 - self . init ( id : id , width : CGFloat ( 200 ) , height : CGFloat ( 200 ) , date : date , sticker : stickerContent . getSticker ( ) , autoDownload : true ) 
 + self . init ( id : id , width : CGFloat ( 150 ) , height : CGFloat ( 150 ) , date : date , sticker : stickerContent . getSticker ( ) , autoDownload : true ) 
 
 } 
 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift 
 new file mode 100644 
 index 0000000 . . 1850eeb 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift 
 @ @ - 0 , 0 + 1 , 250 @ @ 
 + / / 
 + / / AAASAssetManager . swift 
 + / / ActorSDK 
 + / / 
 + / / Created by kioshimafx on 1 / 13 / 16 . 
 + / / Copyright © 2016 Steve Kite . All rights reserved . 
 + / / 
 + 
 + import UIKit 
 + import AssetsLibrary 
 + 
 + let ASSET _ PHOTO _ THUMBNAIL : Int = 0 
 + let ASSET _ PHOTO _ ASPECT _ THUMBNAIL : Int = 1 
 + let ASSET _ PHOTO _ SCREEN _ SIZE : Int = 2 
 + let ASSET _ PHOTO _ FULL _ RESOLUTION : Int = 3 
 + 
 + let kNotificationSendPhotos = " NotificationSendPhotos " 
 + let kNotificationUpdateSelected = " NotificationUpdateSelected " 
 + 
 + class AAAssetPhoto { 
 + 
 + var asset : ALAsset ! 
 + var index : Int ! 
 + var isSelected : Bool ! 
 + var groupIndex : String ! 
 + 
 + var group : Int ! 
 + 
 + init ( groupIn : Int , indexIn : Int , assetIn : ALAsset ) { 
 + 
 + self . group = groupIn 
 + self . index = indexIn 
 + self . asset = assetIn 
 + self . isSelected = true 
 + 
 + self . groupIndex = " \ ( group ) - \ ( index ) " 
 + 
 + } 
 + 
 + } 
 + 
 + class AAASAssetManager : NSObject { 
 + 
 + / / # # # singleton # # # 
 + static let sharedInstance = AAASAssetManager ( ) 
 + 
 + var maxSelected : Int ! 
 + var currentGroupIndex : Int ! 
 + 
 + / / / 
 + 
 + var assetPhotos : Array < ALAsset > ! 
 + var selectedPhotos : Array < AAAssetPhoto > ! 
 + 
 + / / / 
 + 
 + var assetsLibrary : ALAssetsLibrary ! 
 + var assetGroups : Array < ALAssetsGroup > ! 
 + var selectedAsset : ALAsset ! 
 + 
 + override init ( ) { 
 + 
 + self . selectedPhotos = Array < AAAssetPhoto > ( ) 
 + self . assetsLibrary = ALAssetsLibrary ( ) 
 + self . assetsLibrary . writeImageToSavedPhotosAlbum ( nil , metadata : nil ) { ( _ , _ ) - > Void in 
 + / / 
 + } 
 + 
 + } 
 + 
 + / / messages _ setActivity ( user _ id : Int , reqResponse : ( VKResponse ! ) - > ( ) 
 + 
 + func getSavedPhotoList ( result : ( Array < AnyObject > ! ) - > ( ) , error : ( String ) - > ( ) ) { 
 + 
 + 
 + dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { ( ) - > Void in 
 + / / 
 + } 
 + 
 + 
 + } 
 + 
 + 
 + func getGroupCount ( ) - > Int { 
 + return self . assetGroups . count 
 + } 
 + 
 + func getPhotoCountOfCurrentGroup ( ) - > Int { 
 + return self . assetPhotos . count 
 + } 
 + 
 + func getSelectedPhotoCount ( ) - > Int { 
 + 
 + let selectedArray = self . selectedPhotos . filter ( { 
 + $ 0 . isSelected = = true 
 + } ) 
 + 
 + return selectedArray . count 
 + } 
 + 
 + func clearData ( ) { 
 + 
 + self . selectedPhotos . removeAll ( ) 
 + self . assetGroups . removeAll ( ) 
 + self . assetPhotos . removeAll ( ) 
 + 
 + 
 + self . selectedPhotos = nil 
 + self . assetGroups = nil 
 + self . assetPhotos = nil 
 + 
 + } 
 + 
 + / / / / 
 + 
 + 
 + func getImageFromAsset ( asset : ALAsset , type : Int ) - > UIImage { 
 + / * 
 + NSString * strXMP = asset . defaultRepresentation . metadata [ @ " AdjustmentXMP " ] ; 
 + if ( strXMP = = nil | | [ strXMP isKindOfClass : [ NSNull class ] ] ) 
 + { 
 + iRef = [ asset . defaultRepresentation fullResolutionImage ] ; 
 + return [ UIImage imageWithCGImage : iRef scale : 1 . 0 orientation : ( UIImageOrientation ) asset . defaultRepresentation . orientation ] ; 
 + } 
 + else 
 + { 
 + NSData * dXMP = [ strXMP dataUsingEncoding : NSUTF8StringEncoding ] ; 
 + 
 + CIImage * image = [ CIImage imageWithCGImage : asset . defaultRepresentation . fullResolutionImage ] ; 
 + 
 + NSError * error = nil ; 
 + NSArray * filterArray = [ CIFilter filterArrayFromSerializedXMP : dXMP 
 + inputImageExtent : image . extent 
 + error : & error ] ; 
 + if ( error ) { 
 + NSLog ( @ " Error during CIFilter creation : % @ " , [ error localizedDescription ] ) ; 
 + } 
 + 
 + for ( CIFilter * filter in filterArray ) { 
 + [ filter setValue : image forKey : kCIInputImageKey ] ; 
 + image = [ filter outputImage ] ; 
 + } 
 + CIContext * context = [ CIContext contextWithOptions : nil ] ; 
 + CGImageRef cgimage = [ context createCGImage : image fromRect : [ image extent ] ] ; 
 + UIImage * iImage = [ UIImage imageWithCGImage : cgimage scale : 1 . 0 orientation : ( UIImageOrientation ) asset . defaultRepresentation . orientation ] ; 
 + return iImage ; 
 + * / 
 + 
 + var imageRef : CGImageRef ! 
 + 
 + if ( type = = ASSET _ PHOTO _ THUMBNAIL ) { 
 + imageRef = asset . thumbnail ( ) as ! CGImageRef 
 + } else if ( type = = ASSET _ PHOTO _ ASPECT _ THUMBNAIL ) { 
 + imageRef = asset . aspectRatioThumbnail ( ) as ! CGImageRef 
 + } else if ( type = = ASSET _ PHOTO _ SCREEN _ SIZE ) { 
 + imageRef = asset . defaultRepresentation ( ) as ! CGImageRef 
 + } else if ( type = = ASSET _ PHOTO _ FULL _ RESOLUTION ) { 
 + imageRef = asset . defaultRepresentation ( ) as ! CGImageRef 
 + / / let strXMP = asset . defaultRepresentation ( ) . metadata ( ) [ " AdjustmentXMP " ] 
 + 
 + 
 + 
 + 
 + } 
 + 
 + return UIImage ( CGImage : imageRef ) 
 + } 
 + 
 + func getImageAtIndex ( nIndex : Int , nType : Int ) - > UIImage { 
 + return getImageFromAsset ( self . assetPhotos [ nIndex ] , type : nType ) 
 + } 
 + 
 + func getImagePreviewAtIndex ( nIndex : Int , nType : Int ) - > UIImage { 
 + let photoObj = self . selectedPhotos [ nIndex ] 
 + return getImageFromAsset ( photoObj . asset , type : nType ) 
 + } 
 + 
 + func getAssetAtIndex ( index : Int ) - > ALAsset { 
 + return self . assetPhotos [ index ] 
 + } 
 + 
 + func getGroupAtIndex ( index : Int ) - > ALAssetsGroup { 
 + return self . assetGroups [ index ] 
 + } 
 + 
 + func sendSelectedPhotos ( type : Int ) - > Array < UIImage > { 
 + 
 + var sendArray = Array < UIImage > ( ) 
 + 
 + for ( _ , photoObj ) in self . selectedPhotos . enumerate ( ) { 
 + 
 + let image = self . getImageFromAsset ( photoObj . asset , type : type ) 
 + sendArray . append ( image ) 
 + 
 + } 
 + 
 + self . selectedPhotos . removeAll ( ) 
 + 
 + return sendArray 
 + } 
 + 
 + func addObjectWithIndex ( index : Int ) { 
 + 
 + let model = AAAssetPhoto ( groupIn : self . currentGroupIndex , indexIn : index , assetIn : self . assetPhotos [ index ] ) 
 + 
 + self . selectedPhotos . append ( model ) 
 + 
 + / / [ [ NSNotificationCenter defaultCenter ] postNotificationName : kNotificationUpdateSelected object : nil ] ; 
 + 
 + } 
 + 
 + 
 + func removeObjectWithIndex ( index : Int ) { 
 + 
 + let groupIndex = " \ ( self . currentGroupIndex ! ) - \ ( index ) " 
 + 
 + let results = self . selectedPhotos . filter ( { 
 + $ 0 . groupIndex = = groupIndex 
 + } ) 
 + 
 + if ( results . count > 0 ) { 
 + 
 + / / let model = results [ 0 ] 
 + 
 + 
 + } 
 + 
 + 
 + } 
 + 
 + 
 + func currentGroupFirstIndex ( ) - > Int { 
 + 
 + let results = self . selectedPhotos . filter ( { 
 + $ 0 . group = = self . currentGroupIndex 
 + } ) 
 + 
 + if ( results . count > 0 ) { 
 + 
 + let model = results [ 0 ] 
 + return model . index 
 + 
 + } 
 + 
 + return 0 
 + } 
 + 
 + 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift 
 new file mode 100644 
 index 0000000 . . d235ec3 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift 
 @ @ - 0 , 0 + 1 , 137 @ @ 
 + / / 
 + / / AAConvActionSheet . swift 
 + / / ActorSDK 
 + / / 
 + / / Created by kioshimafx on 1 / 13 / 16 . 
 + / / Copyright © 2016 Steve Kite . All rights reserved . 
 + / / 
 + 
 + import UIKit 
 + 
 + protocol AAActionSheetDelegate { 
 + func actionSheetDidFinished ( selectedObjs : Array < AnyObject > ) 
 + } 
 + 
 + class AAConvActionSheet : UIView { 
 + 
 + var delegate : AAActionSheetDelegate ? 
 + 
 + var sheetView : UIView ! 
 + var btnAlbum : UIButton ! 
 + var btnCamera : UIButton ! 
 + var btnCancel : UIButton ! 
 + var thumbnailView : AAThumbnailView ! 
 + 
 + weak var weakSuper : ConversationViewController ! 
 + 
 + 
 + let screenWidth = UIScreen . mainScreen ( ) . bounds . size . width 
 + let screenHeigth = UIScreen . mainScreen ( ) . bounds . size . height 
 + 
 + init ( maxSelected : Int , weakSuperIn : ConversationViewController ) { 
 + super . init ( frame : CGRectZero ) 
 + 
 + 
 + self . setupAllViews ( ) 
 + self . configUI ( ) 
 + self . weakSuper = weakSuperIn 
 + 
 + } 
 + 
 + required init ? ( coder aDecoder : NSCoder ) { 
 + fatalError ( " init ( coder : ) has not been implemented " ) 
 + } 
 + 
 + / / / / / 
 + 
 + func configUI ( ) { 
 + 
 + self . alpha = 0 
 + self . frame = CGRectMake ( 0 , 0 , screenWidth , screenHeigth ) 
 + self . backgroundColor = UIColor . clearColor ( ) 
 + 
 + self . addSubview ( self . sheetView ) 
 + 
 + / / self . sheetView . addSubview ( self . btnCancel ) 
 + / / self . sheetView . addSubview ( self . btnAlbum ) 
 + / / self . sheetView . addSubview ( self . btnCamera ) 
 + / / self . sheetView . addSubview ( self . thumbnailView ) 
 + 
 + self . configNotification ( ) 
 + 
 + } 
 + 
 + func configNotification ( ) { 
 + 
 + NSNotificationCenter . defaultCenter ( ) . addObserver ( self , selector : " " , name : kNotificationSendPhotos , object : nil ) 
 + NSNotificationCenter . defaultCenter ( ) . addObserver ( self , selector : " " , name : kNotificationUpdateSelected , object : nil ) 
 + 
 + } 
 + 
 + deinit { 
 + 
 + self . weakSuper = nil 
 + 
 + AAASAssetManager . sharedInstance . clearData ( ) 
 + NSNotificationCenter . defaultCenter ( ) . removeObserver ( self ) 
 + 
 + } 
 + 
 + 
 + func showAnimation ( ) { 
 + 
 + / / self . btnCamera . selected = true 
 + / / self . thumbnailView . reloadView ( ) 
 + / / self . btnCamera . setTitle ( " Camera " , forState : UIControlState . Normal ) 
 + 
 + var frame = self . sheetView . frame 
 + frame . origin . y = screenHeigth - 350 
 + 
 + UIView . animateWithDuration ( 0 . 25 ) { ( ) - > Void in 
 + self . sheetView . frame = frame 
 + self . alpha = 1 
 + 
 + } 
 + 
 + 
 + } 
 + 
 + func cancelAnimation ( ) { 
 + 
 + var frame = self . sheetView . frame 
 + frame . origin . y = screenHeigth 
 + 
 + UIView . animateWithDuration ( 0 . 25 ) { ( ) - > Void in 
 + self . sheetView . frame = frame 
 + self . alpha = 0 
 + 
 + } 
 + 
 + } 
 + 
 + override func touchesBegan ( touches : Set < UITouch > , withEvent event : UIEvent ? ) { 
 + cancelAnimation ( ) 
 + } 
 + 
 + func setupAllViews ( ) { 
 + 
 + 
 + / / sheet view 
 + let frame = CGRectMake ( 0 , screenHeigth , screenWidth , 350 ) 
 + self . sheetView = UIView ( frame : frame ) 
 + self . sheetView . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 231 . 0 / 255 . 0 , blue : 234 . 0 / 255 . 0 , alpha : 1 ) 
 + 
 + 
 + / / button cancel 
 + 
 + self . btnCancel = UIButton ( type : UIButtonType . Custom ) 
 + 
 + / / thumbnail view 
 + 
 + 
 + 
 + 
 + } 
 + 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAStickersView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAStickersView . swift 
 index d63011e . . 1018daf 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAStickersView . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAStickersView . swift 
 @ @ - 58 , 8 + 58 , 6 @ @ public class AAStickersViewCell : UICollectionViewCell { 
 var fileLocation : ACFileReference ? 
 fileLocation = sticker . getFileReference128 ( ) 
 
 - print ( " file name = = = \ ( fileLocation ! . fileName ) " ) 
 - 
 let cached = checkCache ( 512 , id : Int64 ( fileLocation ! . getFileId ( ) ) ) 
 if ( cached ! = nil ) { 
 self . stickerImage . image = cached 
 @ @ - 255 , 9 + 253 , 11 @ @ class AAStickersView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 parsedStickerPack . stickers . append ( stickerModel ) 
 } 
 
 - self . stickersPacks . append ( parsedStickerPack ) 
 + if ( parsedStickerPack . stickers . count > 0 ) { 
 + self . stickersPacks . append ( parsedStickerPack ) 
 + } 
 
 - print ( " stickers list = = = \ ( sickers ) " ) 
 + print ( " stickers list = = = \ ( sickers ) " ) 
 
 } 
 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift 
 new file mode 100644 
 index 0000000 . . 41da72f 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift 
 @ @ - 0 , 0 + 1 , 64 @ @ 
 + / / 
 + / / AAThumbnailCollectionCell . swift 
 + / / ActorSDK 
 + / / 
 + / / Created by kioshimafx on 1 / 13 / 16 . 
 + / / Copyright © 2016 Steve Kite . All rights reserved . 
 + / / 
 + 
 + import UIKit 
 + 
 + class AAThumbnailCollectionCell : UICollectionViewCell { 
 + let imgThumbnails : UIImageView ! 
 + let imgSelected : UIImageView ! 
 + 
 + var indexPath : NSIndexPath ! 
 + let isCheckSelected : Bool ! 
 + 
 + override init ( frame : CGRect ) { 
 + 
 + self . imgThumbnails = UIImageView ( ) 
 + self . imgThumbnails . backgroundColor = UIColor . clearColor ( ) 
 + 
 + self . imgSelected = UIImageView ( ) 
 + self . imgSelected . backgroundColor = UIColor . clearColor ( ) 
 + 
 + self . isCheckSelected = false 
 + 
 + super . init ( frame : frame ) 
 + 
 + self . configUI ( ) 
 + 
 + } 
 + 
 + required init ? ( coder aDecoder : NSCoder ) { 
 + fatalError ( " init ( coder : ) has not been implemented " ) 
 + } 
 + 
 + / / / 
 + 
 + func configUI ( ) { 
 + 
 + self . addSubview ( self . imgThumbnails ) 
 + self . addSubview ( self . imgSelected ) 
 + 
 + } 
 + 
 + override func layoutSubviews ( ) { 
 + super . layoutSubviews ( ) 
 + 
 + 
 + } 
 + 
 + override func prepareForReuse ( ) { 
 + super . prepareForReuse ( ) 
 + 
 + 
 + } 
 + 
 + / / 
 + 
 + func cellReuseIdentifier ( ) - > String { 
 + return " VMThumbnailCollectionCell " 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift 
 new file mode 100644 
 index 0000000 . . 8267e7a 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift 
 @ @ - 0 , 0 + 1 , 94 @ @ 
 + / / 
 + / / AAThumbnailView . swift 
 + / / ActorSDK 
 + / / 
 + / / Created by kioshimafx on 1 / 13 / 16 . 
 + / / Copyright © 2016 Steve Kite . All rights reserved . 
 + / / 
 + 
 + import UIKit 
 + 
 + class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSource { 
 + 
 + var collectionView : UICollectionView ! 
 + 
 + 
 + override init ( frame : CGRect ) { 
 + super . init ( frame : frame ) 
 + 
 + self . configUI ( ) 
 + 
 + } 
 + 
 + required init ? ( coder aDecoder : NSCoder ) { 
 + fatalError ( " init ( coder : ) has not been implemented " ) 
 + } 
 + 
 + / / / 
 + 
 + func configUI ( ) { 
 + self . collectionViewSetup ( ) 
 + self . addSubview ( self . collectionView ) 
 + } 
 + 
 + / / / collection view delegate 
 + 
 + func numberOfSectionsInCollectionView ( collectionView : UICollectionView ) - > Int { 
 + return 0 
 + } 
 + 
 + func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) - > Int { 
 + return 0 
 + } 
 + 
 + func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) - > UICollectionViewCell { 
 + return UICollectionViewCell ( ) 
 + } 
 + 
 + / / / 
 + 
 + func reloadView ( ) { 
 + self . collectionView . reloadData ( ) 
 + } 
 + 
 + func collectionViewSetup ( ) { 
 + 
 + if ( self . collectionView = = nil ) { 
 + 
 + let flowLayout = UICollectionViewFlowLayout ( ) 
 + flowLayout . scrollDirection = . Horizontal 
 + flowLayout . minimumLineSpacing = 4 
 + flowLayout . sectionInset = UIEdgeInsetsMake ( 5 . 0 , 4 . 0 , 5 . 0 , 4 . 0 ) 
 + 
 + flowLayout . itemSize = CGSizeMake ( 105 , 180 ) 
 + 
 + self . collectionView = UICollectionView ( frame : self . bounds , collectionViewLayout : flowLayout ) 
 + self . collectionView . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 231 . 0 / 255 . 0 , blue : 234 . 0 / 255 . 0 , alpha : 1 . 0 ) 
 + self . collectionView . showsHorizontalScrollIndicator = false 
 + self . collectionView . delegate = self 
 + self . collectionView . dataSource = self 
 + 
 + self . collectionView . registerClass ( AAThumbnailCollectionCell . self , forCellWithReuseIdentifier : " AAThumbnailCollectionCell " ) 
 + 
 + / / AAASAssetManager . sharedInstance 
 + 
 + / * 
 + 
 + [ [ UUAssetManager sharedInstance ] getGroupList : ^ ( NSArray * obj ) { 
 + 
 + [ [ UUAssetManager sharedInstance ] getPhotoListOfGroupByIndex : [ UUAssetManager sharedInstance ] . currentGroupIndex result : ^ ( NSArray * obj ) { 
 + 
 + [ _ collectionView reloadData ] ; 
 + 
 + } ] ; 
 + } ] ; 
 + 
 + * / 
 + 
 + 
 + 
 + } 
 + 
 + } 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 index fc51180 . . 7bda6f1 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 @ @ - 10 , 7 + 10 , 7 @ @ import AddressBookUI 
 import SVProgressHUD 
 
 class ConversationViewController : AAConversationContentController , UIDocumentMenuDelegate , UIDocumentPickerDelegate , UIImagePickerControllerDelegate , UINavigationControllerDelegate , AALocationPickerControllerDelegate , 
 - ABPeoplePickerNavigationControllerDelegate { 
 + ABPeoplePickerNavigationControllerDelegate , AAActionSheetDelegate { 
 
 / / Data binder 
 private let binder = AABinder ( ) 
 @ @ - 32 , 6 + 32 , 7 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 private let avatarView = AABarAvatarView ( frameSize : 36 , type : . Rounded ) 
 private let backgroundView = UIImageView ( ) 
 private var audioButton : UIButton = UIButton ( ) 
 + private var actionSheet : AAConvActionSheet ! 
 
 / / Stickers 
 
 @ @ - 69 , 6 + 70 , 7 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 / / slk settings 
 self . bounces = true 
 
 + 
 / / Text Input 
 
 self . textInputbar . backgroundColor = appStyle . chatInputFieldBgColor 
 @ @ - 176 , 6 + 178 , 7 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 let frame = CGRectMake ( 0 , 0 , self . view . frame . size . width , 216 ) 
 self . stickersView = AAStickersView ( frame : frame , convContrller : self ) 
 
 + 
 NSNotificationCenter . defaultCenter ( ) . addObserver ( 
 self , 
 selector : " updateStickersStateOnCloseKeyboard " , 
 @ @ - 294 , 6 + 297 , 14 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 if ! AADevice . isiPad { 
 AANavigationBadge . showBadge ( ) 
 } 
 + 
 + / / action sheet 
 + 
 + self . actionSheet = AAConvActionSheet ( maxSelected : 9 , weakSuperIn : self ) 
 + self . actionSheet . delegate = self 
 + / / self . navigationController ! . view . addSubview ( self . actionSheet ) 
 + 
 + self . navigationController ? . view . addSubview ( self . actionSheet ) 
 } 
 
 override func viewWillDisappear ( animated : Bool ) { 
 @ @ - 455 , 6 + 466 , 8 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 override func didPressLeftButton ( sender : AnyObject ! ) { 
 super . didPressLeftButton ( sender ) 
 
 + self . textInputbar . textView . resignFirstResponder ( ) 
 + 
 let hasCamera = UIImagePickerController . isSourceTypeAvailable ( UIImagePickerControllerSourceType . Camera ) 
 
 let builder = AAMenuBuilder ( ) 
 @ @ - 483 , 6 + 496 , 8 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 
 showActionSheet ( builder . items , cancelButton : " AlertCancel " , destructButton : nil , sourceView : self . leftButton , sourceRect : self . leftButton . bounds , tapClosure : builder . tapClosure ) 
 
 + / / self . actionSheet . showAnimation ( ) 
 + 
 self . rightButton . layoutIfNeeded ( ) 
 } 
 
 @ @ - 627 , 7 + 642 , 7 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 Actor . sendUIImage ( image , peer : peer ) 
 
 } else { 
 - / / Actor . sendVideo ( info [ UIImagePickerControllerMediaURL ] as ! NSURL , peer : peer ) 
 + Actor . sendVideo ( info [ UIImagePickerControllerMediaURL ] as ! NSURL , peer : peer ) 
 } 
 
 } 
 @ @ - 813 , 4 + 828 , 10 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 
 } 
 
 + / / / 
 + 
 + func actionSheetDidFinished ( selectedObjs : Array < AnyObject > ) { 
 + 
 + } 
 + 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index 4fa03d0 . . 356a5a1 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 271 , 6 + 271 , 7 @ @ 
 	 	 15F89F091C211FED00776ACD / * opus _ types . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15F89F051C211FED00776ACD / * opus _ types . h * / ; } ; 
 	 	 15F89F0A1C211FED00776ACD / * opus . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15F89F061C211FED00776ACD / * opus . h * / ; } ; 
 	 	 697B3A12994653F581459F63 / * Pods _ ActorSDK . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 9A22DF21664BBB34087283F6 / * Pods _ ActorSDK . framework * / ; } ; 
 + 	 	 BE237C9D1C422FFA00060648 / * AAStickersView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE237C9C1C422FFA00060648 / * AAStickersView . swift * / ; } ; 
 / * End PBXBuildFile section * / 
 
 / * Begin PBXFileReference section * / 
 @ @ - 547 , 6 + 548 , 7 @ @ 
 	 	 22BAEA363892E475F59B7E9F / * Pods - ActorSDK . debug . xcconfig * / = { isa = PBXFileReference ; includeInIndex = 1 ; lastKnownFileType = text . xcconfig ; name = " Pods - ActorSDK . debug . xcconfig " ; path = " Pods / Target Support Files / Pods - ActorSDK / Pods - ActorSDK . debug . xcconfig " ; sourceTree = " < group > " ; } ; 
 	 	 333F91AE5263DD450666CC87 / * Pods - ActorSDK . release . xcconfig * / = { isa = PBXFileReference ; includeInIndex = 1 ; lastKnownFileType = text . xcconfig ; name = " Pods - ActorSDK . release . xcconfig " ; path = " Pods / Target Support Files / Pods - ActorSDK / Pods - ActorSDK . release . xcconfig " ; sourceTree = " < group > " ; } ; 
 	 	 9A22DF21664BBB34087283F6 / * Pods _ ActorSDK . framework * / = { isa = PBXFileReference ; explicitFileType = wrapper . framework ; includeInIndex = 0 ; path = Pods _ ActorSDK . framework ; sourceTree = BUILT _ PRODUCTS _ DIR ; } ; 
 + 	 	 BE237C9C1C422FFA00060648 / * AAStickersView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAStickersView . swift ; sourceTree = " < group > " ; } ; 
 / * End PBXFileReference section * / 
 
 / * Begin PBXFrameworksBuildPhase section * / 
 @ @ - 1245 , 6 + 1247 , 7 @ @ 
 	 	 	 isa = PBXGroup ; 
 	 	 	 children = ( 
 	 	 	 	 15D35F6E1C20196E00E3717A / * AARecordAudioController . swift * / , 
 + 	 	 	 	 BE237C9C1C422FFA00060648 / * AAStickersView . swift * / , 
 	 	 	 ) ; 
 	 	 	 name = Views ; 
 	 	 	 sourceTree = " < group > " ; 
 @ @ - 1594 , 6 + 1597 , 7 @ @ 
 	 	 	 	 066A522A1BC4EEAC000E606E / * ManagedAlerts . swift in Sources * / , 
 	 	 	 	 069CF4D11BCB909A00C66E12 / * CLTokenInputView . m in Sources * / , 
 	 	 	 	 066A52451BC4EECD000E606E / * AAAvatarCell . swift in Sources * / , 
 + 	 	 	 	 BE237C9D1C422FFA00060648 / * AAStickersView . swift in Sources * / , 
 	 	 	 	 066A52D21BC52204000E606E / * AADialogSearchCell . swift in Sources * / , 
 	 	 	 	 066A52371BC4EEBA000E606E / * AATableViewCell . swift in Sources * / , 
 	 	 	 	 066A51481BC4BBF4000E606E / * Views . swift in Sources * / , 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / keyboard _ button . imageset / Contents . json b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / keyboard _ button . imageset / Contents . json 
 new file mode 100644 
 index 0000000 . . fabb155 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / keyboard _ button . imageset / Contents . json 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + { 
 + " images " : [ 
 + { 
 + " idiom " : " universal " , 
 + " scale " : " 1x " 
 + } , 
 + { 
 + " idiom " : " universal " , 
 + " scale " : " 2x " 
 + } , 
 + { 
 + " idiom " : " universal " , 
 + " filename " : " keys40 . png " , 
 + " scale " : " 3x " 
 + } 
 + ] , 
 + " info " : { 
 + " version " : 1 , 
 + " author " : " xcode " 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / keyboard _ button . imageset / keys40 . png b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / keyboard _ button . imageset / keys40 . png 
 new file mode 100644 
 index 0000000 . . 2619dde 
 Binary files / dev / null and b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / keyboard _ button . imageset / keys40 . png differ 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / sticker _ button . imageset / Contents . json b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / sticker _ button . imageset / Contents . json 
 new file mode 100644 
 index 0000000 . . e388e6c 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / sticker _ button . imageset / Contents . json 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + { 
 + " images " : [ 
 + { 
 + " idiom " : " universal " , 
 + " scale " : " 1x " 
 + } , 
 + { 
 + " idiom " : " universal " , 
 + " scale " : " 2x " 
 + } , 
 + { 
 + " idiom " : " universal " , 
 + " filename " : " emoticon82 . png " , 
 + " scale " : " 3x " 
 + } 
 + ] , 
 + " info " : { 
 + " version " : 1 , 
 + " author " : " xcode " 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / sticker _ button . imageset / emoticon82 . png b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / sticker _ button . imageset / emoticon82 . png 
 new file mode 100644 
 index 0000000 . . 7dd5faa 
 Binary files / dev / null and b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / sticker _ button . imageset / emoticon82 . png differ 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorStyle . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorStyle . swift 
 index 1327b5d . . ff12b40 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorStyle . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorStyle . swift 
 @ @ - 42 , 6 + 42 , 8 @ @ public class ActorStyle { 
 / / / View Controller background color for settings 
 public var vcBackyardColor = UIColor ( red : 238 / 255 . 0 , green : 238 / 255 . 0 , blue : 238 / 255 . 0 , alpha : 1 ) 
 
 + 
 + 
 / / 
 / / UINavigationBar 
 / / 
 @ @ - 368 , 6 + 370 , 8 @ @ public class ActorStyle { 
 public var chatServiceBubbleColor = UIColor ( rgb : 0x2D394A , alpha : 0 . 56 ) 
 
 public var chatUnreadBgColor = UIColor . alphaBlack ( 0 . 3 ) 
 + 
 + public var chatReadMediaColor = UIColor ( red : 46 . 6 / 255 . 0 , green : 211 . 3 / 255 . 0 , blue : 253 . 6 / 255 . 0 , alpha : 1 . 0 ) 
 
 / / Status Colors 
 
 @ @ - 402 , 7 + 406 , 7 @ @ public class ActorStyle { 
 
 private var _ chatStatusMediaActive : UIColor ? 
 public var chatStatusMediaActive : UIColor { 
 - get { return _ chatStatusMediaActive ! = nil ? _ chatStatusMediaActive ! : chatStatusActive } 
 + get { return _ chatStatusMediaActive ! = nil ? _ chatStatusMediaActive ! : chatReadMediaColor } 
 set ( v ) { _ chatStatusMediaActive = v } 
 } 
 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AABubbles . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AABubbles . swift 
 index 276ab22 . . 240abba 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AABubbles . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AABubbles . swift 
 @ @ - 19 , 7 + 19 , 7 @ @ class AABubbles { 
 serviceLayouter , 
 mediaLayouter , 
 voiceLayouter , 
 - / / stickerLayouter , 
 + stickerLayouter , 
 documentLayouter , 
 locationLayouter , 
 contactLayouter , 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAStickersView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAStickersView . swift 
 new file mode 100644 
 index 0000000 . . f87ad8c 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAStickersView . swift 
 @ @ - 0 , 0 + 1 , 233 @ @ 
 + / / 
 + / / AAStickersView . swift 
 + / / ActorSDK 
 + / / 
 + / / Created by kioshimafx on 1 / 10 / 16 . 
 + / / Copyright © 2016 Steve Kite . All rights reserved . 
 + / / 
 + 
 + import UIKit 
 + import SDWebImage 
 + 
 + public class AAStickersViewCell : UICollectionViewCell { 
 + 
 + let stickerImage : UIImageView ! 
 + private var callback : AAFileCallback ? = nil 
 + private static var stickerCache = Dictionary < Int , AASwiftlyLRU < Int64 , UIImage > > ( ) 
 + private static let cacheSize = 30 
 + 
 + override init ( frame : CGRect ) { 
 + 
 + self . stickerImage = UIImageView ( ) 
 + self . stickerImage . backgroundColor = UIColor . clearColor ( ) 
 + 
 + super . init ( frame : frame ) 
 + 
 + 
 + self . addSubview ( self . stickerImage ) 
 + 
 + } 
 + 
 + required public init ? ( coder aDecoder : NSCoder ) { 
 + fatalError ( " init ( coder : ) has not been implemented " ) 
 + } 
 + 
 + override public func layoutSubviews ( ) { 
 + super . layoutSubviews ( ) 
 + 
 + self . stickerImage . frame = self . contentView . frame 
 + 
 + } 
 + 
 + override public func prepareForReuse ( ) { 
 + super . prepareForReuse ( ) 
 + 
 + self . stickerImage . image = nil 
 + 
 + } 
 + 
 + func bind ( sticker : ACSticker ! , clearPrev : Bool ) { 
 + 
 + 
 + var fileLocation : ACFileReference ? 
 + fileLocation = sticker . getFileReference128 ( ) 
 + 
 + let cached = checkCache ( 512 , id : Int64 ( fileLocation ! . getFileId ( ) ) ) 
 + if ( cached ! = nil ) { 
 + self . stickerImage . image = cached 
 + return 
 + } 
 + 
 + 
 + self . callback = AAFileCallback ( onDownloaded : { ( reference ) - > ( ) in 
 + 
 + 
 + let data = NSFileManager . defaultManager ( ) . contentsAtPath ( CocoaFiles . pathFromDescriptor ( reference ) ) 
 + let image = UIImage . sd _ imageWithWebPData ( data ) 
 + 
 + 
 + if ( image = = nil ) { 
 + return 
 + } 
 + 
 + dispatchOnUi { 
 + 
 + self . putToCache ( 512 , id : Int64 ( ( fileLocation ? . getFileId ( ) ) ! ) , image : image ! ) 
 + 
 + UIView . transitionWithView ( self , duration : 0 . 3 , options : UIViewAnimationOptions . TransitionCrossDissolve , animations : { ( ) - > Void in 
 + self . stickerImage . image = image ; 
 + } , completion : nil ) 
 + 
 + } 
 + } ) ; 
 + Actor . bindRawFileWithReference ( fileLocation , autoStart : true , withCallback : self . callback ) 
 + } 
 + 
 + / / 
 + / / Caching 
 + / / 
 + 
 + private func checkCache ( size : Int , id : Int64 ) - > UIImage ? { 
 + if let cache = AAStickersViewCell . stickerCache [ size ] { 
 + if let img = cache [ id ] { 
 + return img 
 + } 
 + } 
 + return nil 
 + } 
 + 
 + private func putToCache ( size : Int , id : Int64 , image : UIImage ) { 
 + if let cache = AAStickersViewCell . stickerCache [ size ] { 
 + cache [ id ] = image 
 + } else { 
 + let cache = AASwiftlyLRU < jlong , UIImage > ( capacity : AAStickersViewCell . cacheSize ) ; 
 + cache [ id ] = image 
 + AAStickersViewCell . stickerCache . updateValue ( cache , forKey : size ) 
 + } 
 + } 
 + 
 + 
 + } 
 + 
 + class AAStickersView : UIView , UICollectionViewDelegate , UICollectionViewDataSource { 
 + 
 + private let collectionView : UICollectionView ! 
 + private weak var conv : ConversationViewController ! 
 + private var visualEffectView : UIVisualEffectView ! 
 + 
 + private var stickersArray = Array < ACSticker > ( ) 
 + 
 + private let binder = AABinder ( ) 
 + 
 + init ( frame : CGRect , convContrller : ConversationViewController ) { 
 + 
 + / / one item size 
 + let widthHightItem = frame . width / 4 - 20 ; 
 + 
 + / / layout for collection view 
 + let layoutCV = UICollectionViewFlowLayout ( ) 
 + layoutCV . scrollDirection = . Vertical 
 + layoutCV . itemSize = CGSizeMake ( widthHightItem , widthHightItem ) 
 + 
 + / / init collection view 
 + self . collectionView = UICollectionView ( frame : frame , collectionViewLayout : layoutCV ) 
 + 
 + 
 + / / init self view 
 + super . init ( frame : frame ) 
 + 
 + / / bind convController 
 + self . conv = convContrller 
 + 
 + self . visualEffectView = UIVisualEffectView ( effect : UIBlurEffect ( style : . Light ) ) 
 + 
 + visualEffectView . frame = frame 
 + 
 + self . addSubview ( visualEffectView ) 
 + 
 + / / delegate / datasource 
 + 
 + 
 + self . collectionView . delegate = self 
 + self . collectionView . dataSource = self 
 + self . collectionView . backgroundColor = UIColor . clearColor ( ) 
 + 
 + self . collectionView . registerClass ( AAStickersViewCell . self , forCellWithReuseIdentifier : " AAStickersViewCell " ) 
 + 
 + self . collectionView . contentInset = UIEdgeInsetsMake ( 15 , 10 , 15 , 10 ) 
 + 
 + 
 + / / add collection view as subview 
 + self . visualEffectView . addSubview ( self . collectionView ) 
 + 
 + self . backgroundColor = UIColor . clearColor ( ) 
 + 
 + self . loadStickers ( ) 
 + 
 + } 
 + 
 + required init ? ( coder aDecoder : NSCoder ) { 
 + fatalError ( " init ( coder : ) has not been implemented " ) 
 + } 
 + 
 + override func layoutSubviews ( ) { 
 + super . layoutSubviews ( ) 
 + 
 + self . collectionView . frame = self . frame 
 + self . visualEffectView . frame = self . frame 
 + 
 + } 
 + 
 + 
 + / / / collectionView 
 + 
 + func numberOfSectionsInCollectionView ( collectionView : UICollectionView ) - > Int { 
 + return 1 
 + } 
 + 
 + func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) - > Int { 
 + return self . stickersArray . count 
 + } 
 + 
 + func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) - > UICollectionViewCell { 
 + 
 + let stickerCell = self . collectionView . dequeueReusableCellWithReuseIdentifier ( " AAStickersViewCell " , forIndexPath : indexPath ) as ! AAStickersViewCell 
 + 
 + stickerCell . stickerImage . backgroundColor = UIColor . clearColor ( ) 
 + stickerCell . bind ( self . stickersArray [ indexPath . row ] , clearPrev : true ) 
 + 
 + return stickerCell ; 
 + 
 + } 
 + 
 + func collectionView ( collectionView : UICollectionView , didSelectItemAtIndexPath indexPath : NSIndexPath ) { 
 + 
 + let stickerModel = self . stickersArray [ indexPath . row ] 
 + 
 + self . conv . sendSticker ( stickerModel ) 
 + 
 + } 
 + 
 + 
 + func loadStickers ( ) { 
 + 
 + self . stickersArray = Array < ACSticker > ( ) 
 + 
 + Actor . loadStickers ( ) 
 + 
 + let packsArray = Actor . getOwnStickerPacksIdsVM ( ) ! . get ( ) as ! JavaUtilArrayList 
 + let sickersPack = packsArray . getWithInt ( 0 ) as ! ACStickerPackVM 
 + let sickers = sickersPack . stickers . get ( ) as ! JavaUtilArrayList 
 + 
 + for i in 0 . . < sickers . size ( ) { 
 + let stickerModel = sickers . getWithInt ( i ) as ! ACSticker 
 + self . stickersArray . append ( stickerModel ) 
 + } 
 + 
 + print ( " packs class = = = \ ( sickers ) " ) 
 + 
 + self . collectionView . reloadData ( ) 
 + 
 + } 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleStickerCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleStickerCell . swift 
 index 03b3f66 . . 9e05117 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleStickerCell . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleStickerCell . swift 
 @ @ - 4 , 13 + 4 , 13 @ @ 
 
 import UIKit 
 import VBFPopFlatButton 
 + import SDWebImage 
 
 public class AABubbleStickerCell : AABubbleBaseFileCell { 
 
 / / Views 
 
 let preview = UIImageView ( ) 
 - let progress = AAProgressView ( size : CGSizeMake ( 64 , 64 ) ) 
 let timeBg = UIImageView ( ) 
 let timeLabel = UILabel ( ) 
 let statusView = UIImageView ( ) 
 @ @ - 21 , 12 + 21 , 14 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { 
 var thumbLoaded = false 
 var contentLoaded = false 
 
 + private var callback : AAFileCallback ? = nil 
 + 
 / / Constructors 
 
 public init ( frame : CGRect ) { 
 super . init ( frame : frame , isFullSize : false ) 
 
 - timeBg . image = Imaging . imageWithColor ( appStyle . chatMediaDateBgColor , size : CGSize ( width : 1 , height : 1 ) ) 
 + timeBg . image = ActorSDK . sharedActor ( ) . style . statusBackgroundImage 
 
 timeLabel . font = UIFont . italicSystemFontOfSize ( 11 ) 
 timeLabel . textColor = appStyle . chatMediaDateColor 
 @ @ - 34 , 7 + 36 , 6 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { 
 statusView . contentMode = UIViewContentMode . Center 
 
 contentView . addSubview ( preview ) 
 - contentView . addSubview ( progress ) 
 
 contentView . addSubview ( timeBg ) 
 contentView . addSubview ( timeLabel ) 
 @ @ - 63 , 12 + 64 , 6 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { 
 
 if ( ! reuse ) { 
 
 - / / Bind bubble 
 - / / if ( self . isOut ) { 
 - / / bindBubbleType ( BubbleType . MediaOut , isCompact : false ) 
 - / / } else { 
 - / / bindBubbleType ( BubbleType . MediaIn , isCompact : false ) 
 - / / } 
 
 bindBubbleType ( BubbleType . Sticker , isCompact : false ) 
 
 @ @ - 78 , 14 + 73 , 35 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { 
 thumbLoaded = false 
 
 / / Reset progress 
 - self . progress . hideButton ( ) 
 - UIView . animateWithDuration ( 0 , animations : { ( ) - > Void in 
 - self . progress . alpha = 0 
 - self . preview . alpha = 0 
 - } ) 
 + 
 + let sticker = message . content as ! ACStickerContent 
 + 
 + var fileLocation : ACFileReference ? 
 + fileLocation = sticker . getSticker ( ) . getFileReference512 ( ) 
 + 
 + self . callback = AAFileCallback ( onDownloaded : { ( reference ) - > ( ) in 
 + 
 + let data = NSFileManager . defaultManager ( ) . contentsAtPath ( CocoaFiles . pathFromDescriptor ( reference ) ) 
 + let image = UIImage . sd _ imageWithWebPData ( data ) 
 + 
 + if ( image = = nil ) { 
 + return 
 + } 
 + 
 + dispatchOnUi { 
 + 
 + UIView . transitionWithView ( self , duration : 0 . 3 , options : UIViewAnimationOptions . TransitionCrossDissolve , animations : { ( ) - > Void in 
 + self . preview . image = image ; 
 + } , completion : nil ) 
 + 
 + } 
 + } ) ; 
 + Actor . bindRawFileWithReference ( fileLocation , autoStart : true , withCallback : self . callback ) 
 + 
 
 / / Bind file 
 - fileBind ( message , autoDownload : bindedLayout . autoDownload ) 
 + / / fileBind ( message , autoDownload : bindedLayout . autoDownload ) 
 + 
 } 
 
 / / Update time 
 @ @ - 131 , 9 + 147 , 9 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { 
 bgLoadReference ( reference , selfGeneration : selfGeneration ) 
 
 runOnUiThread ( selfGeneration ) { ( ) - > ( ) in 
 - self . progress . showView ( ) 
 - self . progress . setButtonType ( FlatButtonType . buttonUpBasicType , animated : true ) 
 - self . progress . hideProgress ( ) 
 + / / self . progress . showView ( ) 
 + / / self . progress . setButtonType ( FlatButtonType . buttonUpBasicType , animated : true ) 
 + / / self . progress . hideProgress ( ) 
 } 
 } 
 
 @ @ - 141 , 9 + 157 , 9 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { 
 bgLoadReference ( reference , selfGeneration : selfGeneration ) 
 
 runOnUiThread ( selfGeneration ) { ( ) - > ( ) in 
 - self . progress . showView ( ) 
 - self . progress . setButtonType ( FlatButtonType . buttonPausedType , animated : true ) 
 - self . progress . setProgress ( progress ) 
 + / / self . progress . showView ( ) 
 + / / self . progress . setButtonType ( FlatButtonType . buttonPausedType , animated : true ) 
 + / / self . progress . setProgress ( progress ) 
 } 
 } 
 
 @ @ - 151 , 9 + 167 , 9 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { 
 bgLoadThumb ( selfGeneration ) 
 
 runOnUiThread ( selfGeneration ) { ( ) - > ( ) in 
 - self . progress . showView ( ) 
 - self . progress . setButtonType ( FlatButtonType . buttonDownloadType , animated : true ) 
 - self . progress . hideProgress ( ) 
 + / / self . progress . showView ( ) 
 + / / self . progress . setButtonType ( FlatButtonType . buttonDownloadType , animated : true ) 
 + / / self . progress . hideProgress ( ) 
 } 
 } 
 
 @ @ - 161 , 9 + 177 , 9 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { 
 bgLoadThumb ( selfGeneration ) 
 
 runOnUiThread ( selfGeneration ) { ( ) - > ( ) in 
 - self . progress . showView ( ) 
 - self . progress . setButtonType ( FlatButtonType . buttonPausedType , animated : true ) 
 - self . progress . setProgress ( progress ) 
 + / / self . progress . showView ( ) 
 + / / self . progress . setButtonType ( FlatButtonType . buttonPausedType , animated : true ) 
 + / / self . progress . setProgress ( progress ) 
 } 
 } 
 
 @ @ - 171 , 8 + 187 , 8 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { 
 bgLoadReference ( reference , selfGeneration : selfGeneration ) 
 
 runOnUiThread ( selfGeneration ) { ( ) - > ( ) in 
 - self . progress . setProgress ( 1 ) 
 - self . progress . hideView ( ) 
 + / / self . progress . setProgress ( 1 ) 
 + / / self . progress . hideView ( ) 
 } 
 } 
 
 @ @ - 221 , 38 + 237 , 8 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { 
 / / Media Action 
 
 public func mediaDidTap ( ) { 
 - / / let content = bindedMessage ! . content as ! ACDocumentContent 
 - / / if let fileSource = content . getSource ( ) as ? ACFileRemoteSource { 
 - / / Actor . requestStateWithFileId ( fileSource . getFileReference ( ) . getFileId ( ) , withCallback : AAFileCallback ( 
 - / / notDownloaded : { ( ) - > ( ) in 
 - / / Actor . startDownloadingWithReference ( fileSource . getFileReference ( ) ) 
 - / / } , onDownloading : { ( progress ) - > ( ) in 
 - / / Actor . cancelDownloadingWithFileId ( fileSource . getFileReference ( ) . getFileId ( ) ) 
 - / / } , onDownloaded : { ( reference ) - > ( ) in 
 - / / / / if let img = UIImage ( contentsOfFile : CocoaFiles . pathFromDescriptor ( reference ) ) { 
 - / / / / let previewImage = PreviewImage ( image : img ) 
 - / / / / let previewController = AAPhotoPreviewController ( photo : previewImage , fromView : self . preview ) 
 - / / / / previewController . autoShowBadge = true 
 - / / / / self . controller . presentViewController ( previewController , animated : true , completion : nil ) 
 - / / / / } 
 - / / } ) ) 
 - / / } else if let fileSource = content . getSource ( ) as ? ACFileLocalSource { 
 - / / let rid = bindedMessage ! . rid 
 - / / Actor . requestUploadStateWithRid ( rid , withCallback : AAUploadFileCallback ( 
 - / / notUploaded : { ( ) - > ( ) in 
 - / / Actor . resumeUploadWithRid ( rid ) 
 - / / } , onUploading : { ( progress ) - > ( ) in 
 - / / Actor . pauseUploadWithRid ( rid ) 
 - / / } , onUploadedClosure : { ( ) - > ( ) in 
 - / / 
 - / / / / if let img = UIImage ( contentsOfFile : CocoaFiles . pathFromDescriptor ( CocoaFiles . pathFromDescriptor ( fileSource . getFileDescriptor ( ) ) ) ) { 
 - / / / / let previewImage = PreviewImage ( image : img ) 
 - / / / / let previewController = AAPhotoPreviewController ( photo : previewImage , fromView : self . preview ) 
 - / / / / previewController . autoShowBadge = true 
 - / / / / self . controller . presentViewController ( previewController , animated : true , completion : nil ) 
 - / / / / } 
 - / / } ) ) 
 - / / } 
 + 
 + 
 } 
 
 / / Layouting 
 @ @ - 272 , 7 + 258 , 7 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { 
 preview . frame = CGRectMake ( insets . left , insets . top , bubbleWidth , bubbleHeight ) 
 } 
 
 - progress . frame = CGRectMake ( preview . frame . origin . x + preview . frame . width / 2 - 32 , preview . frame . origin . y + preview . frame . height / 2 - 32 , 64 , 64 ) 
 + / / progress . frame = CGRectMake ( preview . frame . origin . x + preview . frame . width / 2 - 32 , preview . frame . origin . y + preview . frame . height / 2 - 32 , 64 , 64 ) 
 
 timeLabel . frame = CGRectMake ( 0 , 0 , 1000 , 1000 ) 
 timeLabel . sizeToFit ( ) 
 @ @ - 286 , 7 + 272 , 7 @ @ public class AABubbleStickerCell : AABubbleBaseFileCell { 
 statusView . frame = CGRectMake ( timeLabel . frame . maxX , timeLabel . frame . minY , 23 , timeHeight ) 
 } 
 
 - timeBg . frame = CGRectMake ( timeLabel . frame . minX - 3 , timeLabel . frame . minY - 1 , timeWidth + 6 , timeHeight + 2 ) 
 + timeBg . frame = CGRectMake ( timeLabel . frame . minX - 4 , timeLabel . frame . minY - 1 , timeWidth + 8 , timeHeight + 2 ) 
 } 
 
 } 
 @ @ - 316 , 7 + 302 , 6 @ @ public class StikerCellLayout : AACellLayout { 
 
 / / Prepare fast thumb 
 self . fastThumb = sticker ? . getFileReference256 ( ) . toByteArray ( ) . toNSData ( ) 
 - / / . getImage ( ) . toNSData ( ) 
 
 / / Creating layout 
 super . init ( height : self . screenSize . height + 2 , date : date , key : " media " ) 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 index 90ceaca . . 1a03d01 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 @ @ - 33 , 6 + 33 , 12 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 private let backgroundView = UIImageView ( ) 
 private var audioButton : UIButton = UIButton ( ) 
 
 + / / Stickers 
 + 
 + private var stickersView : AAStickersView ! 
 + private var stickersButton : UIButton ! 
 + private var stickersOpen = false 
 + 
 private let audioRecorder : AAAudioRecorder ! = AAAudioRecorder ( ) 
 
 override init ( peer : ACPeer ) { 
 @ @ - 74 , 16 + 80 , 16 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 
 
 / / right button 
 - / / self . rightButton . tintColor = appStyle . chatSendColor 
 - / / self . rightButton . setImage ( UIImage . tinted ( " aa _ micbutton " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) 
 - / / self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) 
 - / / self . rightButton . enabled = true 
 - / / self . rightButton . layoutIfNeeded ( ) 
 + self . rightButton . tintColor = appStyle . chatSendColor 
 + self . rightButton . setImage ( UIImage . tinted ( " aa _ micbutton " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) 
 + self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) 
 + self . rightButton . enabled = true 
 + self . rightButton . layoutIfNeeded ( ) 
 
 - self . rightButton . setTitle ( AALocalized ( " ChatSend " ) , forState : UIControlState . Normal ) 
 - self . rightButton . setTitleColor ( appStyle . chatSendColor , forState : UIControlState . Normal ) 
 - self . rightButton . setTitleColor ( appStyle . chatSendDisabledColor , forState : UIControlState . Disabled ) 
 - self . rightButton . setImage ( nil , forState : UIControlState . Normal ) 
 + / / self . rightButton . setTitle ( AALocalized ( " ChatSend " ) , forState : UIControlState . Normal ) 
 + / / self . rightButton . setTitleColor ( appStyle . chatSendColor , forState : UIControlState . Normal ) 
 + / / self . rightButton . setTitleColor ( appStyle . chatSendDisabledColor , forState : UIControlState . Disabled ) 
 + / / self . rightButton . setImage ( nil , forState : UIControlState . Normal ) 
 
 / / 
 
 @ @ - 104 , 6 + 110 , 15 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 self . audioButton . addTarget ( self , action : " onAudioRecordingCancelled : " , forControlEvents : UIControlEvents . TouchDragOutside ) 
 self . audioButton . addTarget ( self , action : " onAudioRecordingCancelled : " , forControlEvents : UIControlEvents . TouchDragExit ) 
 
 + / / add stickers button 
 + self . stickersButton = UIButton ( type : UIButtonType . System ) 
 + self . stickersButton . tintColor = UIColor . lightGrayColor ( ) . colorWithAlphaComponent ( 0 . 5 ) 
 + self . stickersButton . setImage ( UIImage . bundled ( " sticker _ button " ) , forState : UIControlState . Normal ) 
 + self . stickersButton . frame = CGRectMake ( self . view . frame . size . width - 67 , 12 , 20 , 20 ) 
 + self . stickersButton . addTarget ( self , action : " changeKeyboard " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + 
 + self . textInputbar . addSubview ( stickersButton ) 
 + 
 self . keyboardPanningEnabled = true 
 
 self . registerPrefixesForAutoCompletion ( [ " @ " ] ) 
 @ @ - 157 , 6 + 172 , 16 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 super . viewDidLoad ( ) 
 
 navigationItem . backBarButtonItem = UIBarButtonItem ( title : " " , style : UIBarButtonItemStyle . Plain , target : nil , action : nil ) 
 + 
 + let frame = CGRectMake ( 0 , 0 , self . view . frame . size . width , 216 ) 
 + self . stickersView = AAStickersView ( frame : frame , convContrller : self ) 
 + 
 + NSNotificationCenter . defaultCenter ( ) . addObserver ( 
 + self , 
 + selector : " updateStickersStateOnCloseKeyboard " , 
 + name : SLKKeyboardWillHideNotification , 
 + object : nil ) 
 + 
 } 
 
 override func viewWillAppear ( animated : Bool ) { 
 @ @ - 342 , 6 + 367 , 7 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 / / change button 
 
 if ! text . isEmpty { 
 + self . stickersButton . hidden = true 
 
 self . rightButton . setTitle ( AALocalized ( " ChatSend " ) , forState : UIControlState . Normal ) 
 self . rightButton . setTitleColor ( appStyle . chatSendColor , forState : UIControlState . Normal ) 
 @ @ - 353 , 24 + 379 , 24 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 } 
 
 } else { 
 + self . stickersButton . hidden = false 
 + if ( self . audioButton . hidden ) { 
 + 
 + self . rightButton . tintColor = appStyle . chatSendColor 
 + self . rightButton . setImage ( UIImage . tinted ( " aa _ micbutton " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) 
 + self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) 
 + self . rightButton . enabled = true 
 + 
 + } else { 
 + 
 + self . rightButton . tintColor = appStyle . chatSendColor 
 + self . rightButton . setImage ( UIImage . tinted ( " aa _ keyboard " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) 
 + self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) 
 + self . rightButton . enabled = true 
 + 
 + } 
 
 - / / if ( self . audioButton . hidden ) { 
 - / / 
 - / / self . rightButton . tintColor = appStyle . chatSendColor 
 - / / self . rightButton . setImage ( UIImage . tinted ( " aa _ micbutton " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) 
 - / / self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) 
 - / / self . rightButton . enabled = true 
 - / / 
 - / / } else { 
 - / / 
 - / / self . rightButton . tintColor = appStyle . chatSendColor 
 - / / self . rightButton . setImage ( UIImage . tinted ( " aa _ keyboard " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) 
 - / / self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) 
 - / / self . rightButton . enabled = true 
 - / / 
 - / / } 
 - / / 
 - / / self . micOn = true 
 + self . micOn = true 
 
 } 
 
 @ @ - 392 , 32 + 418 , 32 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 
 } else { 
 
 - / / if ( self . audioButton . hidden ) { 
 - / / / / self . textView . resignFirstResponder ( ) 
 - / / 
 - / / self . rightButton . tintColor = appStyle . chatSendColor 
 - / / self . rightButton . setImage ( UIImage . tinted ( " aa _ keyboard " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) 
 - / / self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) 
 - / / self . rightButton . enabled = true 
 - / / 
 - / / self . textInputbar . layoutIfNeeded ( ) 
 - / / self . rightButton . layoutIfNeeded ( ) 
 - / / 
 - / / self . audioButton . frame = textView . frame 
 - / / self . audioButton . hidden = false ; 
 - / / 
 - / / 
 - / / } else { 
 - / / self . audioButton . hidden = true ; 
 - / / 
 - / / self . rightButton . tintColor = appStyle . chatSendColor 
 - / / self . rightButton . setImage ( UIImage . tinted ( " aa _ micbutton " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) 
 - / / self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) 
 - / / self . rightButton . enabled = true 
 - / / 
 - / / self . textInputbar . layoutIfNeeded ( ) 
 - / / self . rightButton . layoutIfNeeded ( ) 
 - / / } 
 + if ( self . audioButton . hidden ) { 
 + / / self . textView . resignFirstResponder ( ) 
 + 
 + self . rightButton . tintColor = appStyle . chatSendColor 
 + self . rightButton . setImage ( UIImage . tinted ( " aa _ keyboard " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) 
 + self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) 
 + self . rightButton . enabled = true 
 + 
 + self . textInputbar . layoutIfNeeded ( ) 
 + self . rightButton . layoutIfNeeded ( ) 
 + 
 + self . audioButton . frame = textView . frame 
 + self . audioButton . hidden = false ; 
 + 
 + 
 + } else { 
 + self . audioButton . hidden = true ; 
 + 
 + self . rightButton . tintColor = appStyle . chatSendColor 
 + self . rightButton . setImage ( UIImage . tinted ( " aa _ micbutton " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) 
 + self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) 
 + self . rightButton . enabled = true 
 + 
 + self . textInputbar . layoutIfNeeded ( ) 
 + self . rightButton . layoutIfNeeded ( ) 
 + } 
 
 } 
 
 @ @ - 721 , 5 + 747 , 51 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 } 
 } 
 
 + / / MARK : - Stickers actions 
 + 
 + func updateStickersStateOnCloseKeyboard ( ) { 
 + 
 + self . stickersOpen = false 
 + self . stickersButton . setImage ( UIImage . bundled ( " sticker _ button " ) , forState : UIControlState . Normal ) 
 + self . textInputbar . textView . inputView = nil 
 + 
 + } 
 + 
 + func changeKeyboard ( ) { 
 + 
 + self . stickersView . loadStickers ( ) 
 + 
 + if self . stickersOpen = = false { 
 + 
 + self . textInputbar . textView . becomeFirstResponder ( ) 
 + self . textInputbar . textView . inputView = self . stickersView 
 + self . textInputbar . textView . refreshFirstResponder ( ) 
 + self . textInputbar . textView . refreshInputViews ( ) 
 + 
 + self . stickersButton . setImage ( UIImage . bundled ( " keyboard _ button " ) , forState : UIControlState . Normal ) 
 + 
 + self . stickersOpen = true 
 + 
 + 
 + } else { 
 + 
 + / / self . textInputbar . textView . resignFirstResponder ( ) 
 + self . textInputbar . textView . inputView = nil 
 + self . textInputbar . textView . refreshFirstResponder ( ) 
 + self . textInputbar . textView . refreshInputViews ( ) 
 + 
 + self . stickersButton . setImage ( UIImage . bundled ( " sticker _ button " ) , forState : UIControlState . Normal ) 
 + 
 + self . stickersOpen = false 
 + 
 + } 
 + 
 + } 
 + 
 + func sendSticker ( sticker : ACSticker ) { 
 + 
 + Actor . sendStickerWithPeer ( self . peer , withSticker : sticker ) 
 + 
 + } 
 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / Podfile b / actor - sdk / sdk - core - ios / Podfile 
 index 4bfa04c . . d5f8f5a 100644 
 - - - a / actor - sdk / sdk - core - ios / Podfile 
 + + + b / actor - sdk / sdk - core - ios / Podfile 
 @ @ - 21 , 6 + 21 , 7 @ @ target ' ActorApp ' do 
 pod ' RegexKitLite ' 
 pod ' CocoaAsyncSocket ' 
 pod ' zipzap ' 
 + pod ' SDWebImage / WebP ' 
 
 # Main UI 
 pod ' NYTPhotoViewer ' 
 @ @ - 54 , 6 + 55 , 7 @ @ target ' ActorSDK ' do 
 pod ' RegexKitLite ' 
 pod ' CocoaAsyncSocket ' 
 pod ' zipzap ' 
 + pod ' SDWebImage / WebP ' 
 
 # Main UI 
 pod ' NYTPhotoViewer '
