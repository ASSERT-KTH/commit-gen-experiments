BLEU SCORE: 0.5156626918239822

TEST MSG: fix ( server : encryption ) : load aphermal keys in LoadPublicKeys
GENERATED MSG: fix ( server : encryption ) : adoption to encryption api changes

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala < nl > index 1f61354 . . 54958ea 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala < nl > @ @ - 165 , 6 + 165 , 16 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { < nl > } yield ekeys ) < nl > } < nl > < nl > + def fetchEphermalKeys ( < nl > + userId : Int , < nl > + keyGroupId : Int , < nl > + keyIds : Set [ Long ] < nl > + ) : Future [ Seq [ EphermalPublicKey ] ] = { < nl > + db . run ( for { < nl > + ekeys ← EphermalPublicKeyRepo . fetch ( userId , keyGroupId , keyIds ) < nl > + } yield ekeys ) < nl > + } < nl > + < nl > def fetchApiEphermalKeys ( < nl > userId : Int , < nl > keyGroupId : Int < nl > @ @ - 177 , 6 + 187 , 20 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { < nl > < nl > actionT . value map ( _ . valueOr ( throw _ ) ) < nl > } < nl > + < nl > + def fetchApiEphermalKeys ( < nl > + userId : Int , < nl > + keyGroupId : Int , < nl > + keyIds : Set [ Long ] < nl > + ) : Future [ ( Vector [ ApiEncryptionKey ] , Vector [ ApiEncryptionKeySignature ] ) ] = { < nl > + val actionT = < nl > + for { < nl > + ekeys ← XorT . right [ Future , Exception , Seq [ EphermalPublicKey ] ] ( fetchEphermalKeys ( userId , keyGroupId , keyIds ) ) < nl > + apiEKeys ← XorT . fromXor [ Future ] ( toApi ( ekeys . toVector ) : Xor [ Exception , ApiEphermalPublicKeys ] ) < nl > + } yield apiEKeys < nl > + < nl > + actionT . value map ( _ . valueOr ( throw _ ) ) < nl > + } < nl > } < nl > < nl > object EncryptionExtension extends ExtensionId [ EncryptionExtension ] with ExtensionIdProvider { < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / encryption / EphermalPublicKeyRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / encryption / EphermalPublicKeyRepo . scala < nl > index 6fe59fe . . a5b08a2 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / encryption / EphermalPublicKeyRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / encryption / EphermalPublicKeyRepo . scala < nl > @ @ - 41 , 4 + 41 , 7 @ @ object EphermalPublicKeyRepo { < nl > def fetch ( userId : Int ) = byUserIdC ( userId ) < nl > < nl > def fetch ( userId : Int , keyGroupId : Int ) = byUserIdKeyGroupC ( userId → keyGroupId ) . result < nl > + < nl > + def fetch ( userId : Int , keyGroupId : Int , keyIds : Set [ Long ] ) = < nl > + byUserIdKeyGroupC . applied ( userId → keyGroupId ) . filter ( _ . keyId inSet keyIds ) . result < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > index 4e20092 . . a00d294 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > @ @ - 59 , 9 + 59 , 12 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti < nl > ) : Future [ HandlerResult [ ResponsePublicKeys ] ] = < nl > authorized ( clientData ) { implicit client ⇒ < nl > withUserOutPeerF ( userPeer ) { < nl > + val keyIdsSet = keyIds . toSet < nl > + < nl > for { < nl > - ( kgs , signs ) ← encExt . fetchApiKeys ( userPeer . userId , keyGroupId , keyIds . toSet ) < nl > - } yield Ok ( ResponsePublicKeys ( kgs , signs ) ) < nl > + ( ks , signs ) ← encExt . fetchApiKeys ( userPeer . userId , keyGroupId , keyIdsSet ) < nl > + ( eks , esigns ) ← encExt . fetchApiEphermalKeys ( userPeer . userId , keyGroupId , keyIdsSet ) < nl > + } yield Ok ( ResponsePublicKeys ( ks + + eks , signs + + esigns ) ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala < nl > index 76f713b . . e8ed483 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala < nl > @ @ - 120 , 6 + 120 , 18 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService < nl > sigs . map ( _ . keyId ) . distinct shouldBe Vector ( k . keyId ) < nl > } < nl > } < nl > + < nl > + whenReady ( service . handleLoadPublicKey ( < nl > + getUserOutPeer ( alice . id , bobAuthId ) , < nl > + keyGroupId , < nl > + Vector ( ephKeys . head . keyId ) < nl > + ) ) { resp ⇒ < nl > + inside ( resp ) { < nl > + case Ok ( ResponsePublicKeys ( Vector ( k ) , signs ) ) ⇒ < nl > + k . keyId shouldBe ephKeys . head . keyId < nl > + signs . map ( _ . keyId ) shouldBe ephSignatures . take ( 2 ) . map ( _ . keyId ) < nl > + } < nl > + } < nl > } < nl > } < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json < nl > index f39d9d4 . . 10924a5 100644 < nl > - - - a / actor - server / actor - core / src / main / actor - api / actor . json < nl > + + + b / actor - server / actor - core / src / main / actor - api / actor . json < nl > @ @ - 13066 , 6 + 13066 , 12 @ @ < nl > } , < nl > { < nl > " type " : " reference " , < nl > + " argument " : " supportedEncryptions " , < nl > + " category " : " full " , < nl > + " description " : " Supported encryption methods " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > " argument " : " keys " , < nl > " category " : " full " , < nl > " description " : " keys of current group " < nl > @ @ - 13087 , 9 + 13093 , 12 @ @ < nl > " name " : " identityKey " < nl > } , < nl > { < nl > - " type " : " int32 " , < nl > + " type " : { < nl > + " type " : " list " , < nl > + " childType " : " string " < nl > + } , < nl > " id " : 2 , < nl > - " name " : " encryptionVersion " < nl > + " name " : " supportedEncryptions " < nl > } , < nl > { < nl > " type " : { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionApiConverters . scala b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionApiConverters . scala < nl > index 56e833a . . 40ef212 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionApiConverters . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionApiConverters . scala < nl > @ @ - 40 , 6 + 40 , 7 @ @ trait EncryptionApiConverters { < nl > } yield EncryptionKeyGroup ( < nl > userId = userId , < nl > id = kg . keyGroupId , < nl > + supportedEncryptions = kg . supportedEncryption , < nl > identityKey = Some ( identityKey ) , < nl > keys = keys , < nl > signatures = signs < nl > @ @ - 65 , 7 + 66 , 7 @ @ trait EncryptionApiConverters { < nl > signs ← kg . signatures . toVector . traverseU ( toApi ) < nl > } yield ApiEncryptionKeyGroup ( < nl > keyGroupId = kg . id , < nl > - supportedEncryption = kg . keys . toIndexedSeq map ( _ . alg ) , < nl > + supportedEncryption = kg . supportedEncryptions . toVector , < nl > identityKey = identity , < nl > keys = keys , < nl > signatures = signs < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala < nl > index 1ccf8a9 . . 1f61354 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala < nl > @ @ - 66 , 15 + 66 , 17 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { < nl > } < nl > < nl > def createKeyGroup ( < nl > - userId : Int , < nl > - identityKey : EncryptionKey , < nl > - keys : Seq [ EncryptionKey ] , < nl > - signatures : Seq [ EncryptionKeySignature ] < nl > + userId : Int , < nl > + supportedEncryptions : Seq [ String ] , < nl > + identityKey : EncryptionKey , < nl > + keys : Seq [ EncryptionKey ] , < nl > + signatures : Seq [ EncryptionKeySignature ] < nl > ) : Future [ Int ] = { < nl > val id = IdUtils . nextIntId ( ) < nl > val keyGroup = EncryptionKeyGroup ( < nl > userId = userId , < nl > id = id , < nl > + supportedEncryptions = supportedEncryptions , < nl > identityKey = Some ( identityKey ) , < nl > keys = keys , < nl > signatures = signatures < nl > @ @ - 97 , 16 + 99 , 17 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { < nl > } < nl > < nl > def createKeyGroup ( < nl > - userId : Int , < nl > - apiIdentityKey : ApiEncryptionKey , < nl > - apiKeys : Seq [ ApiEncryptionKey ] , < nl > - apiSignatures : Seq [ ApiEncryptionKeySignature ] < nl > + userId : Int , < nl > + supportedEncryptions : Seq [ String ] , < nl > + apiIdentityKey : ApiEncryptionKey , < nl > + apiKeys : Seq [ ApiEncryptionKey ] , < nl > + apiSignatures : Seq [ ApiEncryptionKeySignature ] < nl > ) : Future [ Int ] = { < nl > val futureT = for { < nl > identityKey ← XorT . fromXor [ Future ] ( toModel ( apiIdentityKey ) ) < nl > keys ← XorT . fromXor [ Future ] ( apiKeys . toVector . traverseU ( toModel ) ) < nl > signs ← XorT ( FastFuture . successful ( apiSignatures . toVector . traverseU ( toModel ) ) ) < nl > - id ← XorT . right [ Future , Exception , Int ] ( createKeyGroup ( userId , identityKey , keys , signs ) ) < nl > + id ← XorT . right [ Future , Exception , Int ] ( createKeyGroup ( userId , supportedEncryptions , identityKey , keys , signs ) ) < nl > } yield id < nl > < nl > futureT . value map ( _ . valueOr ( throw _ ) ) < nl > diff - - git a / actor - server / actor - models / src / main / protobuf / model / encryption . proto b / actor - server / actor - models / src / main / protobuf / model / encryption . proto < nl > index 2034b48 . . de9b2c3 100644 < nl > - - - a / actor - server / actor - models / src / main / protobuf / model / encryption . proto < nl > + + + b / actor - server / actor - models / src / main / protobuf / model / encryption . proto < nl > @ @ - 20 , 6 + 20 , 7 @ @ message EncryptionKeySignature { < nl > message EncryptionKeyGroup { < nl > int32 user _ id = 1 ; < nl > int32 id = 2 ; < nl > + repeated string supported _ encryptions = 6 ; < nl > EncryptionKey identity _ key = 3 ; < nl > repeated EncryptionKey keys = 4 ; < nl > repeated EncryptionKeySignature signatures = 5 ; < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > index f3c9360 . . b075953 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > @ @ - 28 , 15 + 28 , 15 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti < nl > } < nl > < nl > override def jhandleCreateNewKeyGroup ( < nl > - identityKey : ApiEncryptionKey , < nl > - encryptionVersion : Int , < nl > - keys : IndexedSeq [ ApiEncryptionKey ] , < nl > - signatures : IndexedSeq [ ApiEncryptionKeySignature ] , < nl > - clientData : ClientData < nl > + identityKey : ApiEncryptionKey , < nl > + supportedEncryptions : IndexedSeq [ String ] , < nl > + keys : IndexedSeq [ ApiEncryptionKey ] , < nl > + signatures : IndexedSeq [ ApiEncryptionKeySignature ] , < nl > + clientData : ClientData < nl > ) : Future [ HandlerResult [ ResponseCreateNewKeyGroup ] ] = < nl > authorized ( clientData ) { client ⇒ < nl > for { < nl > - id ← encExt . createKeyGroup ( client . userId , identityKey , keys , signatures ) < nl > + id ← encExt . createKeyGroup ( client . userId , supportedEncryptions , identityKey , keys , signatures ) < nl > } yield Ok ( ResponseCreateNewKeyGroup ( id ) ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala < nl > index bc1e1a6 . . 0722656 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala < nl > @ @ - 17 , 6 + 17 , 7 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService < nl > val aliceClientData = ClientData ( aliceAuthId , 1 , Some ( AuthData ( alice . id , aliceAuthSid ) ) ) < nl > val bobClientData = ClientData ( bobAuthId , 1 , Some ( AuthData ( bob . id , bobAuthSid ) ) ) < nl > < nl > + val supportedEncryptions = Vector ( " sup1 " , " sup2 " , " sup3 " ) < nl > val identityKey = ApiEncryptionKey ( 1L , " idalg " , Some ( Array [ Byte ] ( 1 , 2 , 3 ) ) , Some ( Array [ Byte ] ( 1 ) ) ) < nl > val keys = Vector ( ApiEncryptionKey ( 2L , " keyalg " , Some ( Array [ Byte ] ( 3 , 4 , 5 ) ) , Some ( Array [ Byte ] ( 3 ) ) ) ) < nl > val signatures = Vector ( < nl > @ @ - 30 , 7 + 31 , 7 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService < nl > < nl > whenReady ( service . handleCreateNewKeyGroup ( < nl > identityKey = identityKey , < nl > - encryptionVersion = 0 , < nl > + supportedEncryptions = supportedEncryptions , < nl > keys = keys , < nl > signatures = signatures < nl > ) ) ( _ . toOption . get . keyGroupId ) < nl > @ @ - 44 , 6 + 45 , 7 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService < nl > kg . keyGroupId shouldBe keyGroupId < nl > kg . keys . map ( _ . keyId ) shouldBe keys . map ( _ . keyId ) < nl > kg . signatures . map ( _ . keyId ) shouldBe signatures . map ( _ . keyId ) < nl > + kg . supportedEncryption shouldBe supportedEncryptions < nl > } < nl > } < nl > < nl > @ @ - 67 , 6 + 69 , 7 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService < nl > val aliceClientData = ClientData ( aliceAuthId , 1 , Some ( AuthData ( alice . id , aliceAuthSid ) ) ) < nl > val bobClientData = ClientData ( bobAuthId , 1 , Some ( AuthData ( bob . id , bobAuthSid ) ) ) < nl > < nl > + val supportedEncryptions = Vector ( " sup1 " , " sup2 " , " sup3 " ) < nl > val identityKey = ApiEncryptionKey ( 1L , " idalg " , Some ( Array [ Byte ] ( 1 , 2 , 3 ) ) , Some ( Array [ Byte ] ( 1 ) ) ) < nl > val keys = Vector ( ApiEncryptionKey ( 2L , " keyalg " , Some ( Array [ Byte ] ( 3 , 4 , 5 ) ) , Some ( Array [ Byte ] ( 3 ) ) ) ) < nl > val signatures = Vector ( < nl > @ @ - 86 , 7 + 89 , 7 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService < nl > < nl > val keyGroupId = whenReady ( service . handleCreateNewKeyGroup ( < nl > identityKey = identityKey , < nl > - encryptionVersion = 0 , < nl > + supportedEncryptions = supportedEncryptions , < nl > keys = keys , < nl > signatures = signatures < nl > ) ) ( _ . toOption . get . keyGroupId ) < nl > @ @ - 110 , 7 + 113 , 7 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService < nl > inside ( resp ) { < nl > case Ok ( ResponsePublicKeys ( ks , sigs ) ) ⇒ < nl > ks . map ( _ . keyId ) shouldBe ephKeys . map ( _ . keyId ) < nl > - sigs . map ( _ . keyId ) shouldBe ephSignatures . map ( _ . keyId ) < nl > + sigs . map ( _ . keyId ) shouldBe ephSignatures . take ( 1 ) . map ( _ . keyId ) < nl > } < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala 
 index 1f61354 . . 54958ea 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala 
 @ @ - 165 , 6 + 165 , 16 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { 
 } yield ekeys ) 
 } 
 
 + def fetchEphermalKeys ( 
 + userId : Int , 
 + keyGroupId : Int , 
 + keyIds : Set [ Long ] 
 + ) : Future [ Seq [ EphermalPublicKey ] ] = { 
 + db . run ( for { 
 + ekeys ← EphermalPublicKeyRepo . fetch ( userId , keyGroupId , keyIds ) 
 + } yield ekeys ) 
 + } 
 + 
 def fetchApiEphermalKeys ( 
 userId : Int , 
 keyGroupId : Int 
 @ @ - 177 , 6 + 187 , 20 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { 
 
 actionT . value map ( _ . valueOr ( throw _ ) ) 
 } 
 + 
 + def fetchApiEphermalKeys ( 
 + userId : Int , 
 + keyGroupId : Int , 
 + keyIds : Set [ Long ] 
 + ) : Future [ ( Vector [ ApiEncryptionKey ] , Vector [ ApiEncryptionKeySignature ] ) ] = { 
 + val actionT = 
 + for { 
 + ekeys ← XorT . right [ Future , Exception , Seq [ EphermalPublicKey ] ] ( fetchEphermalKeys ( userId , keyGroupId , keyIds ) ) 
 + apiEKeys ← XorT . fromXor [ Future ] ( toApi ( ekeys . toVector ) : Xor [ Exception , ApiEphermalPublicKeys ] ) 
 + } yield apiEKeys 
 + 
 + actionT . value map ( _ . valueOr ( throw _ ) ) 
 + } 
 } 
 
 object EncryptionExtension extends ExtensionId [ EncryptionExtension ] with ExtensionIdProvider { 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / encryption / EphermalPublicKeyRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / encryption / EphermalPublicKeyRepo . scala 
 index 6fe59fe . . a5b08a2 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / encryption / EphermalPublicKeyRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / encryption / EphermalPublicKeyRepo . scala 
 @ @ - 41 , 4 + 41 , 7 @ @ object EphermalPublicKeyRepo { 
 def fetch ( userId : Int ) = byUserIdC ( userId ) 
 
 def fetch ( userId : Int , keyGroupId : Int ) = byUserIdKeyGroupC ( userId → keyGroupId ) . result 
 + 
 + def fetch ( userId : Int , keyGroupId : Int , keyIds : Set [ Long ] ) = 
 + byUserIdKeyGroupC . applied ( userId → keyGroupId ) . filter ( _ . keyId inSet keyIds ) . result 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 index 4e20092 . . a00d294 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 @ @ - 59 , 9 + 59 , 12 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti 
 ) : Future [ HandlerResult [ ResponsePublicKeys ] ] = 
 authorized ( clientData ) { implicit client ⇒ 
 withUserOutPeerF ( userPeer ) { 
 + val keyIdsSet = keyIds . toSet 
 + 
 for { 
 - ( kgs , signs ) ← encExt . fetchApiKeys ( userPeer . userId , keyGroupId , keyIds . toSet ) 
 - } yield Ok ( ResponsePublicKeys ( kgs , signs ) ) 
 + ( ks , signs ) ← encExt . fetchApiKeys ( userPeer . userId , keyGroupId , keyIdsSet ) 
 + ( eks , esigns ) ← encExt . fetchApiEphermalKeys ( userPeer . userId , keyGroupId , keyIdsSet ) 
 + } yield Ok ( ResponsePublicKeys ( ks + + eks , signs + + esigns ) ) 
 } 
 } 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala 
 index 76f713b . . e8ed483 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala 
 @ @ - 120 , 6 + 120 , 18 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService 
 sigs . map ( _ . keyId ) . distinct shouldBe Vector ( k . keyId ) 
 } 
 } 
 + 
 + whenReady ( service . handleLoadPublicKey ( 
 + getUserOutPeer ( alice . id , bobAuthId ) , 
 + keyGroupId , 
 + Vector ( ephKeys . head . keyId ) 
 + ) ) { resp ⇒ 
 + inside ( resp ) { 
 + case Ok ( ResponsePublicKeys ( Vector ( k ) , signs ) ) ⇒ 
 + k . keyId shouldBe ephKeys . head . keyId 
 + signs . map ( _ . keyId ) shouldBe ephSignatures . take ( 2 ) . map ( _ . keyId ) 
 + } 
 + } 
 } 
 } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json 
 index f39d9d4 . . 10924a5 100644 
 - - - a / actor - server / actor - core / src / main / actor - api / actor . json 
 + + + b / actor - server / actor - core / src / main / actor - api / actor . json 
 @ @ - 13066 , 6 + 13066 , 12 @ @ 
 } , 
 { 
 " type " : " reference " , 
 + " argument " : " supportedEncryptions " , 
 + " category " : " full " , 
 + " description " : " Supported encryption methods " 
 + } , 
 + { 
 + " type " : " reference " , 
 " argument " : " keys " , 
 " category " : " full " , 
 " description " : " keys of current group " 
 @ @ - 13087 , 9 + 13093 , 12 @ @ 
 " name " : " identityKey " 
 } , 
 { 
 - " type " : " int32 " , 
 + " type " : { 
 + " type " : " list " , 
 + " childType " : " string " 
 + } , 
 " id " : 2 , 
 - " name " : " encryptionVersion " 
 + " name " : " supportedEncryptions " 
 } , 
 { 
 " type " : { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionApiConverters . scala b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionApiConverters . scala 
 index 56e833a . . 40ef212 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionApiConverters . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionApiConverters . scala 
 @ @ - 40 , 6 + 40 , 7 @ @ trait EncryptionApiConverters { 
 } yield EncryptionKeyGroup ( 
 userId = userId , 
 id = kg . keyGroupId , 
 + supportedEncryptions = kg . supportedEncryption , 
 identityKey = Some ( identityKey ) , 
 keys = keys , 
 signatures = signs 
 @ @ - 65 , 7 + 66 , 7 @ @ trait EncryptionApiConverters { 
 signs ← kg . signatures . toVector . traverseU ( toApi ) 
 } yield ApiEncryptionKeyGroup ( 
 keyGroupId = kg . id , 
 - supportedEncryption = kg . keys . toIndexedSeq map ( _ . alg ) , 
 + supportedEncryption = kg . supportedEncryptions . toVector , 
 identityKey = identity , 
 keys = keys , 
 signatures = signs 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala 
 index 1ccf8a9 . . 1f61354 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala 
 @ @ - 66 , 15 + 66 , 17 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { 
 } 
 
 def createKeyGroup ( 
 - userId : Int , 
 - identityKey : EncryptionKey , 
 - keys : Seq [ EncryptionKey ] , 
 - signatures : Seq [ EncryptionKeySignature ] 
 + userId : Int , 
 + supportedEncryptions : Seq [ String ] , 
 + identityKey : EncryptionKey , 
 + keys : Seq [ EncryptionKey ] , 
 + signatures : Seq [ EncryptionKeySignature ] 
 ) : Future [ Int ] = { 
 val id = IdUtils . nextIntId ( ) 
 val keyGroup = EncryptionKeyGroup ( 
 userId = userId , 
 id = id , 
 + supportedEncryptions = supportedEncryptions , 
 identityKey = Some ( identityKey ) , 
 keys = keys , 
 signatures = signatures 
 @ @ - 97 , 16 + 99 , 17 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { 
 } 
 
 def createKeyGroup ( 
 - userId : Int , 
 - apiIdentityKey : ApiEncryptionKey , 
 - apiKeys : Seq [ ApiEncryptionKey ] , 
 - apiSignatures : Seq [ ApiEncryptionKeySignature ] 
 + userId : Int , 
 + supportedEncryptions : Seq [ String ] , 
 + apiIdentityKey : ApiEncryptionKey , 
 + apiKeys : Seq [ ApiEncryptionKey ] , 
 + apiSignatures : Seq [ ApiEncryptionKeySignature ] 
 ) : Future [ Int ] = { 
 val futureT = for { 
 identityKey ← XorT . fromXor [ Future ] ( toModel ( apiIdentityKey ) ) 
 keys ← XorT . fromXor [ Future ] ( apiKeys . toVector . traverseU ( toModel ) ) 
 signs ← XorT ( FastFuture . successful ( apiSignatures . toVector . traverseU ( toModel ) ) ) 
 - id ← XorT . right [ Future , Exception , Int ] ( createKeyGroup ( userId , identityKey , keys , signs ) ) 
 + id ← XorT . right [ Future , Exception , Int ] ( createKeyGroup ( userId , supportedEncryptions , identityKey , keys , signs ) ) 
 } yield id 
 
 futureT . value map ( _ . valueOr ( throw _ ) ) 
 diff - - git a / actor - server / actor - models / src / main / protobuf / model / encryption . proto b / actor - server / actor - models / src / main / protobuf / model / encryption . proto 
 index 2034b48 . . de9b2c3 100644 
 - - - a / actor - server / actor - models / src / main / protobuf / model / encryption . proto 
 + + + b / actor - server / actor - models / src / main / protobuf / model / encryption . proto 
 @ @ - 20 , 6 + 20 , 7 @ @ message EncryptionKeySignature { 
 message EncryptionKeyGroup { 
 int32 user _ id = 1 ; 
 int32 id = 2 ; 
 + repeated string supported _ encryptions = 6 ; 
 EncryptionKey identity _ key = 3 ; 
 repeated EncryptionKey keys = 4 ; 
 repeated EncryptionKeySignature signatures = 5 ; 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 index f3c9360 . . b075953 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 @ @ - 28 , 15 + 28 , 15 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti 
 } 
 
 override def jhandleCreateNewKeyGroup ( 
 - identityKey : ApiEncryptionKey , 
 - encryptionVersion : Int , 
 - keys : IndexedSeq [ ApiEncryptionKey ] , 
 - signatures : IndexedSeq [ ApiEncryptionKeySignature ] , 
 - clientData : ClientData 
 + identityKey : ApiEncryptionKey , 
 + supportedEncryptions : IndexedSeq [ String ] , 
 + keys : IndexedSeq [ ApiEncryptionKey ] , 
 + signatures : IndexedSeq [ ApiEncryptionKeySignature ] , 
 + clientData : ClientData 
 ) : Future [ HandlerResult [ ResponseCreateNewKeyGroup ] ] = 
 authorized ( clientData ) { client ⇒ 
 for { 
 - id ← encExt . createKeyGroup ( client . userId , identityKey , keys , signatures ) 
 + id ← encExt . createKeyGroup ( client . userId , supportedEncryptions , identityKey , keys , signatures ) 
 } yield Ok ( ResponseCreateNewKeyGroup ( id ) ) 
 } 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala 
 index bc1e1a6 . . 0722656 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala 
 @ @ - 17 , 6 + 17 , 7 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService 
 val aliceClientData = ClientData ( aliceAuthId , 1 , Some ( AuthData ( alice . id , aliceAuthSid ) ) ) 
 val bobClientData = ClientData ( bobAuthId , 1 , Some ( AuthData ( bob . id , bobAuthSid ) ) ) 
 
 + val supportedEncryptions = Vector ( " sup1 " , " sup2 " , " sup3 " ) 
 val identityKey = ApiEncryptionKey ( 1L , " idalg " , Some ( Array [ Byte ] ( 1 , 2 , 3 ) ) , Some ( Array [ Byte ] ( 1 ) ) ) 
 val keys = Vector ( ApiEncryptionKey ( 2L , " keyalg " , Some ( Array [ Byte ] ( 3 , 4 , 5 ) ) , Some ( Array [ Byte ] ( 3 ) ) ) ) 
 val signatures = Vector ( 
 @ @ - 30 , 7 + 31 , 7 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService 
 
 whenReady ( service . handleCreateNewKeyGroup ( 
 identityKey = identityKey , 
 - encryptionVersion = 0 , 
 + supportedEncryptions = supportedEncryptions , 
 keys = keys , 
 signatures = signatures 
 ) ) ( _ . toOption . get . keyGroupId ) 
 @ @ - 44 , 6 + 45 , 7 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService 
 kg . keyGroupId shouldBe keyGroupId 
 kg . keys . map ( _ . keyId ) shouldBe keys . map ( _ . keyId ) 
 kg . signatures . map ( _ . keyId ) shouldBe signatures . map ( _ . keyId ) 
 + kg . supportedEncryption shouldBe supportedEncryptions 
 } 
 } 
 
 @ @ - 67 , 6 + 69 , 7 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService 
 val aliceClientData = ClientData ( aliceAuthId , 1 , Some ( AuthData ( alice . id , aliceAuthSid ) ) ) 
 val bobClientData = ClientData ( bobAuthId , 1 , Some ( AuthData ( bob . id , bobAuthSid ) ) ) 
 
 + val supportedEncryptions = Vector ( " sup1 " , " sup2 " , " sup3 " ) 
 val identityKey = ApiEncryptionKey ( 1L , " idalg " , Some ( Array [ Byte ] ( 1 , 2 , 3 ) ) , Some ( Array [ Byte ] ( 1 ) ) ) 
 val keys = Vector ( ApiEncryptionKey ( 2L , " keyalg " , Some ( Array [ Byte ] ( 3 , 4 , 5 ) ) , Some ( Array [ Byte ] ( 3 ) ) ) ) 
 val signatures = Vector ( 
 @ @ - 86 , 7 + 89 , 7 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService 
 
 val keyGroupId = whenReady ( service . handleCreateNewKeyGroup ( 
 identityKey = identityKey , 
 - encryptionVersion = 0 , 
 + supportedEncryptions = supportedEncryptions , 
 keys = keys , 
 signatures = signatures 
 ) ) ( _ . toOption . get . keyGroupId ) 
 @ @ - 110 , 7 + 113 , 7 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService 
 inside ( resp ) { 
 case Ok ( ResponsePublicKeys ( ks , sigs ) ) ⇒ 
 ks . map ( _ . keyId ) shouldBe ephKeys . map ( _ . keyId ) 
 - sigs . map ( _ . keyId ) shouldBe ephSignatures . map ( _ . keyId ) 
 + sigs . map ( _ . keyId ) shouldBe ephSignatures . take ( 1 ) . map ( _ . keyId ) 
 } 
 } 
 }
