BLEU SCORE: 0.07882750221706718

TEST MSG: fix ( server ) : compilation error
GENERATED MSG: perf ( server : messaging ) : make DialogProcessorMigration more ram - effective

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / v2 / MigrationTsActions . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / v2 / MigrationTsActions . scala < nl > index 94a022c . . c455b86 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / v2 / MigrationTsActions . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / v2 / MigrationTsActions . scala < nl > @ @ - 37 , 7 + 37 , 7 @ @ object MigrationTsActions { < nl > def insertTimestamp ( migrationName : String , ts : Long ) ( implicit conn : Connector ) : Unit = { < nl > val alreadyRun = conn . runSync ( MigrationTsStorage . get ( migrationName ) ) . isDefined < nl > if ( alreadyRun ) { < nl > - log . info ( " Migration { } already run at { } , skipping " , migrationName , Instant . ofEpochMilli ( ts ) ) < nl > + log . info ( s " Migration $ migrationName already run at $ { Instant . ofEpochMilli ( ts ) } , skipping . " ) < nl > } else { < nl > conn . runSync ( < nl > MigrationTsStorage . upsert ( < nl > @ @ - 45 , 7 + 45 , 7 @ @ object MigrationTsActions { < nl > Int64Value ( ts ) . toByteArray < nl > ) < nl > ) < nl > - log . info ( " Wrote migration timestamp for : { } , date : { } " , migrationName , Instant . ofEpochMilli ( ts ) ) < nl > + log . info ( s " Wrote migration timestamp for : $ migrationName , date : $ { Instant . ofEpochMilli ( ts ) } " ) < nl > } < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > index 0ce236c . . e72d32e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > @ @ - 5 , 9 + 5 , 9 @ @ import java . time . Instant < nl > import akka . actor . Status < nl > import akka . pattern . pipe < nl > import akka . persistence . SnapshotMetadata < nl > - import im . actor . server . cqrs . { Event , Processor } < nl > + import im . actor . server . cqrs . { Event , Processor } < nl > import im . actor . server . db . DbExtension < nl > - import im . actor . server . model . { DialogObsolete , Peer } < nl > + import im . actor . server . model . { DialogObsolete , Peer } < nl > import im . actor . server . persist . HistoryMessageRepo < nl > import im . actor . server . persist . dialog . DialogRepo < nl > < nl > @ @ - 46 , 15 + 46 , 16 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { < nl > case d : DialogObsolete ⇒ < nl > log . warning ( " Finding messages " ) < nl > ( for { < nl > - models ← db . run ( HistoryMessageRepo . findAfter ( userId , peer , d . ownerLastReadAt , Long . MaxValue ) ) < nl > - _ = log . warning ( " Found { } messages " , models . size ) < nl > - newMessages = models map { m ⇒ < nl > - NewMessage ( < nl > - randomId = m . randomId , < nl > - date = Instant . ofEpochMilli ( m . date . getMillis ) , < nl > - senderUserId = m . senderUserId , < nl > - messageHeader = m . messageContentHeader < nl > - ) < nl > + metas ← db . run ( HistoryMessageRepo . findMetaAfter ( userId , peer , d . ownerLastReadAt , Long . MaxValue ) ) < nl > + _ = log . warning ( " Found { } messages " , metas . size ) < nl > + newMessages = metas map { < nl > + case ( randomId , date , senderUserId , header ) ⇒ < nl > + NewMessage ( < nl > + randomId = randomId , < nl > + date = Instant . ofEpochMilli ( date . getMillis ) , < nl > + senderUserId = senderUserId , < nl > + messageHeader = header < nl > + ) < nl > } < nl > } yield PersistEvents ( < nl > Initialized ( ) + : < nl > @ @ - 63 , 11 + 64 , 11 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { < nl > ) ) pipeTo self < nl > case PersistEvents ( events ) ⇒ < nl > log . warning ( " Persisting events " ) < nl > - persistAll ( events ) ( _ = > ( ) ) < nl > + persistAll ( events ) ( _ ⇒ ( ) ) < nl > < nl > deferAsync ( ( ) ) { _ ⇒ < nl > log . warning ( " Persisted events , commiting " ) < nl > - events foreach ( e = > commit ( e ) ) < nl > + events foreach ( e ⇒ commit ( e ) ) < nl > log . warning ( " Migration completed " ) < nl > unstashAll ( ) < nl > context become receiveCommand < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > index fddb9a8 . . 62495e2 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > @ @ - 5 , 7 + 5 , 7 @ @ import java . time . Instant < nl > import akka . actor . Status < nl > import akka . pattern . pipe < nl > import akka . persistence . SnapshotMetadata < nl > - import im . actor . server . cqrs . { Event , Processor } < nl > + import im . actor . server . cqrs . { Event , Processor } < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . model . DialogObsolete < nl > import im . actor . server . persist . dialog . DialogRepo < nl > @ @ - 78 , 8 + 78 , 8 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { < nl > } < nl > < nl > val events : List [ Event ] = Initialized ( Instant . now ( ) ) + : ( created + + archived + + favourited ) . toList < nl > - persistAll ( events ) ( _ = > ( ) ) < nl > - deferAsync ( ( ) ) { _ = > < nl > + persistAll ( events ) ( _ ⇒ ( ) ) < nl > + deferAsync ( ( ) ) { _ ⇒ < nl > events foreach ( e ⇒ commit ( e ) ) < nl > onComplete < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > index af782e8 . . c43a8bb 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > @ @ - 62 , 7 + 62 , 7 @ @ private [ dialog ] final case class DialogRootState ( < nl > case Unarchived ( ts , Some ( peer ) ) ⇒ withShownPeer ( ts , peer ) < nl > case Favourited ( ts , Some ( peer ) ) ⇒ withFavouritedPeer ( ts , peer ) < nl > case Unfavourited ( ts , Some ( peer ) ) ⇒ withUnfavouritedPeer ( ts , peer ) < nl > - case Initialized ( _ ) = > this < nl > + case Initialized ( _ ) ⇒ this < nl > } < nl > < nl > lazy val allPeers = activePeers + + archived < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > index 5db57e9 . . a1bde0b 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > @ @ - 80 , 7 + 80 , 7 @ @ private [ dialog ] final case class DialogState ( < nl > case MessagesReceived ( date ) if date . isAfter ( lastReceiveDate ) ⇒ this . copy ( lastReceiveDate = date ) < nl > case CounterReset ( ) ⇒ < nl > this . copy ( counter = 0 , unreadMessages = SortedSet . empty ( UnreadMessage . OrderingAsc ) , unreadMessagesMap = Map . empty ) < nl > - case Initialized ( ) = > this < nl > + case Initialized ( ) ⇒ this < nl > } < nl > < nl > override def withSnapshot ( metadata : SnapshotMetadata , snapshot : Any ) : DialogState = snapshot match { < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > index e8a9489 . . c8ee715 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > @ @ - 101 , 6 + 101 , 17 @ @ object HistoryMessageRepo { < nl > def findAfter ( userId : Int , peer : Peer , date : DateTime , limit : Long ) = < nl > afterC ( ( userId , peer . typ . value , peer . id , date , limit ) ) . result < nl > < nl > + private val metaAfterC = Compiled { ( userId : Rep [ Int ] , peerType : Rep [ Int ] , peerId : Rep [ Int ] , date : Rep [ DateTime ] , limit : ConstColumn [ Long ] ) ⇒ < nl > + byUserIdPeer ( userId , peerType , peerId ) < nl > + . filter ( _ . date > = date ) < nl > + . sortBy ( _ . date . asc ) < nl > + . take ( limit ) < nl > + . map ( hm ⇒ ( hm . randomId , hm . date , hm . senderUserId , hm . messageContentHeader ) ) < nl > + } < nl > + < nl > + def findMetaAfter ( userId : Int , peer : Peer , date : DateTime , limit : Long ) = < nl > + metaAfterC ( ( userId , peer . typ . value , peer . id , date , limit ) ) . result < nl > + < nl > private val beforeC = Compiled { ( userId : Rep [ Int ] , peerId : Rep [ Int ] , peerType : Rep [ Int ] , date : Rep [ DateTime ] , limit : ConstColumn [ Long ] ) ⇒ < nl > byUserIdPeer ( userId , peerType , peerId ) < nl > . filter ( _ . date < = date )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / v2 / MigrationTsActions . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / v2 / MigrationTsActions . scala 
 index 94a022c . . c455b86 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / v2 / MigrationTsActions . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / v2 / MigrationTsActions . scala 
 @ @ - 37 , 7 + 37 , 7 @ @ object MigrationTsActions { 
 def insertTimestamp ( migrationName : String , ts : Long ) ( implicit conn : Connector ) : Unit = { 
 val alreadyRun = conn . runSync ( MigrationTsStorage . get ( migrationName ) ) . isDefined 
 if ( alreadyRun ) { 
 - log . info ( " Migration { } already run at { } , skipping " , migrationName , Instant . ofEpochMilli ( ts ) ) 
 + log . info ( s " Migration $ migrationName already run at $ { Instant . ofEpochMilli ( ts ) } , skipping . " ) 
 } else { 
 conn . runSync ( 
 MigrationTsStorage . upsert ( 
 @ @ - 45 , 7 + 45 , 7 @ @ object MigrationTsActions { 
 Int64Value ( ts ) . toByteArray 
 ) 
 ) 
 - log . info ( " Wrote migration timestamp for : { } , date : { } " , migrationName , Instant . ofEpochMilli ( ts ) ) 
 + log . info ( s " Wrote migration timestamp for : $ migrationName , date : $ { Instant . ofEpochMilli ( ts ) } " ) 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 index 0ce236c . . e72d32e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 @ @ - 5 , 9 + 5 , 9 @ @ import java . time . Instant 
 import akka . actor . Status 
 import akka . pattern . pipe 
 import akka . persistence . SnapshotMetadata 
 - import im . actor . server . cqrs . { Event , Processor } 
 + import im . actor . server . cqrs . { Event , Processor } 
 import im . actor . server . db . DbExtension 
 - import im . actor . server . model . { DialogObsolete , Peer } 
 + import im . actor . server . model . { DialogObsolete , Peer } 
 import im . actor . server . persist . HistoryMessageRepo 
 import im . actor . server . persist . dialog . DialogRepo 
 
 @ @ - 46 , 15 + 46 , 16 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { 
 case d : DialogObsolete ⇒ 
 log . warning ( " Finding messages " ) 
 ( for { 
 - models ← db . run ( HistoryMessageRepo . findAfter ( userId , peer , d . ownerLastReadAt , Long . MaxValue ) ) 
 - _ = log . warning ( " Found { } messages " , models . size ) 
 - newMessages = models map { m ⇒ 
 - NewMessage ( 
 - randomId = m . randomId , 
 - date = Instant . ofEpochMilli ( m . date . getMillis ) , 
 - senderUserId = m . senderUserId , 
 - messageHeader = m . messageContentHeader 
 - ) 
 + metas ← db . run ( HistoryMessageRepo . findMetaAfter ( userId , peer , d . ownerLastReadAt , Long . MaxValue ) ) 
 + _ = log . warning ( " Found { } messages " , metas . size ) 
 + newMessages = metas map { 
 + case ( randomId , date , senderUserId , header ) ⇒ 
 + NewMessage ( 
 + randomId = randomId , 
 + date = Instant . ofEpochMilli ( date . getMillis ) , 
 + senderUserId = senderUserId , 
 + messageHeader = header 
 + ) 
 } 
 } yield PersistEvents ( 
 Initialized ( ) + : 
 @ @ - 63 , 11 + 64 , 11 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { 
 ) ) pipeTo self 
 case PersistEvents ( events ) ⇒ 
 log . warning ( " Persisting events " ) 
 - persistAll ( events ) ( _ = > ( ) ) 
 + persistAll ( events ) ( _ ⇒ ( ) ) 
 
 deferAsync ( ( ) ) { _ ⇒ 
 log . warning ( " Persisted events , commiting " ) 
 - events foreach ( e = > commit ( e ) ) 
 + events foreach ( e ⇒ commit ( e ) ) 
 log . warning ( " Migration completed " ) 
 unstashAll ( ) 
 context become receiveCommand 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 index fddb9a8 . . 62495e2 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 @ @ - 5 , 7 + 5 , 7 @ @ import java . time . Instant 
 import akka . actor . Status 
 import akka . pattern . pipe 
 import akka . persistence . SnapshotMetadata 
 - import im . actor . server . cqrs . { Event , Processor } 
 + import im . actor . server . cqrs . { Event , Processor } 
 import im . actor . server . db . DbExtension 
 import im . actor . server . model . DialogObsolete 
 import im . actor . server . persist . dialog . DialogRepo 
 @ @ - 78 , 8 + 78 , 8 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { 
 } 
 
 val events : List [ Event ] = Initialized ( Instant . now ( ) ) + : ( created + + archived + + favourited ) . toList 
 - persistAll ( events ) ( _ = > ( ) ) 
 - deferAsync ( ( ) ) { _ = > 
 + persistAll ( events ) ( _ ⇒ ( ) ) 
 + deferAsync ( ( ) ) { _ ⇒ 
 events foreach ( e ⇒ commit ( e ) ) 
 onComplete 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 index af782e8 . . c43a8bb 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 @ @ - 62 , 7 + 62 , 7 @ @ private [ dialog ] final case class DialogRootState ( 
 case Unarchived ( ts , Some ( peer ) ) ⇒ withShownPeer ( ts , peer ) 
 case Favourited ( ts , Some ( peer ) ) ⇒ withFavouritedPeer ( ts , peer ) 
 case Unfavourited ( ts , Some ( peer ) ) ⇒ withUnfavouritedPeer ( ts , peer ) 
 - case Initialized ( _ ) = > this 
 + case Initialized ( _ ) ⇒ this 
 } 
 
 lazy val allPeers = activePeers + + archived 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 index 5db57e9 . . a1bde0b 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 @ @ - 80 , 7 + 80 , 7 @ @ private [ dialog ] final case class DialogState ( 
 case MessagesReceived ( date ) if date . isAfter ( lastReceiveDate ) ⇒ this . copy ( lastReceiveDate = date ) 
 case CounterReset ( ) ⇒ 
 this . copy ( counter = 0 , unreadMessages = SortedSet . empty ( UnreadMessage . OrderingAsc ) , unreadMessagesMap = Map . empty ) 
 - case Initialized ( ) = > this 
 + case Initialized ( ) ⇒ this 
 } 
 
 override def withSnapshot ( metadata : SnapshotMetadata , snapshot : Any ) : DialogState = snapshot match { 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 index e8a9489 . . c8ee715 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 @ @ - 101 , 6 + 101 , 17 @ @ object HistoryMessageRepo { 
 def findAfter ( userId : Int , peer : Peer , date : DateTime , limit : Long ) = 
 afterC ( ( userId , peer . typ . value , peer . id , date , limit ) ) . result 
 
 + private val metaAfterC = Compiled { ( userId : Rep [ Int ] , peerType : Rep [ Int ] , peerId : Rep [ Int ] , date : Rep [ DateTime ] , limit : ConstColumn [ Long ] ) ⇒ 
 + byUserIdPeer ( userId , peerType , peerId ) 
 + . filter ( _ . date > = date ) 
 + . sortBy ( _ . date . asc ) 
 + . take ( limit ) 
 + . map ( hm ⇒ ( hm . randomId , hm . date , hm . senderUserId , hm . messageContentHeader ) ) 
 + } 
 + 
 + def findMetaAfter ( userId : Int , peer : Peer , date : DateTime , limit : Long ) = 
 + metaAfterC ( ( userId , peer . typ . value , peer . id , date , limit ) ) . result 
 + 
 private val beforeC = Compiled { ( userId : Rep [ Int ] , peerId : Rep [ Int ] , peerType : Rep [ Int ] , date : Rep [ DateTime ] , limit : ConstColumn [ Long ] ) ⇒ 
 byUserIdPeer ( userId , peerType , peerId ) 
 . filter ( _ . date < = date )
