BLEU SCORE: 0.337019838632122

TEST MSG: feat ( server : webrtc ) : session renegotiation
GENERATED MSG: fix ( server : webrtc ) : send UpdateIncomingCall every 5 seconds until answer

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index cfbd0f7 . . 8f6e45b 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 72 , 7 + 72 , 6 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > private val groupExt = GroupExtension ( context . system ) < nl > private val valuesExt = ValuesExtension ( context . system ) < nl > private val apnsExt = ApplePushExtension ( context . system ) < nl > - private val db = DbExtension ( context . system ) . db < nl > < nl > case class Device ( < nl > deviceId : EventBus . DeviceId , < nl > @ @ - 259 , 6 + 258 , 21 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > putParticipant ( userId , ApiCallMemberState . CONNECTED ) < nl > broadcastSyncedSet ( ) < nl > } < nl > + case msg : ApiOnRenegotiationNeeded ⇒ < nl > + / / TODO : # perf remove filterNot < nl > + for { < nl > + deviceId ← ebMessage . deviceId < nl > + ( pair , sessionId ) ← sessions find ( _ = = msg . sessionId ) < nl > + leftDevice ← devices get pair . left < nl > + rightDevice ← devices get pair . right < nl > + } yield { < nl > + if ( pair = = Pair ( deviceId , msg . device ) ) { < nl > + sessions - = sessionId < nl > + eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( pair . left ) , ApiCloseSession ( pair . right , sessionId ) . toByteArray ) < nl > + eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( pair . right ) , ApiCloseSession ( pair . left , sessionId ) . toByteArray ) < nl > + connect ( leftDevice , rightDevice ) < nl > + } else log . warning ( " Received OnRenegotiationNeeded for a wrong deviceId " ) < nl > + } < nl > case _ ⇒ < nl > } < nl > case EventBus . Disconnected ( _ , client , deviceId ) ⇒
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index 87df1ac . . 4989c9d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . server . persist . webrtc . WebrtcCallRepo < nl > import im . actor . server . sequence . WeakUpdatesExtension < nl > import im . actor . types . _ < nl > < nl > + import scala . concurrent . duration . _ < nl > import scala . concurrent . forkjoin . ThreadLocalRandom < nl > < nl > sealed abstract class WebrtcCallError ( message : String ) extends RuntimeException ( message ) < nl > @ @ - 54 , 6 + 55 , 8 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > private lazy val eventBusExt = EventBusExtension ( context . system ) < nl > private val db = DbExtension ( context . system ) . db < nl > < nl > + private var scheduledUpd : Option [ Cancellable ] = None < nl > + < nl > def receive = waitForStart < nl > < nl > def waitForStart : Receive = { < nl > @ @ - 62 , 18 + 65 , 20 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > < nl > ( for { < nl > _ ← db . run ( WebrtcCallRepo . create ( WebrtcCall ( id , callerUserId , receiverUserId ) ) ) < nl > - _ ← weakUpdExt . broadcastUserWeakUpdate ( receiverUserId , update , None , None ) < nl > _ ← eventBusExt . subscribe ( eventBusId , self ) < nl > - } yield ( ) ) pipeTo self < nl > + } yield context . system . scheduler . schedule ( 0 . seconds , 5 . seconds ) { < nl > + weakUpdExt . broadcastUserWeakUpdate ( receiverUserId , update , None , None ) < nl > + } ) pipeTo self < nl > < nl > becomeStashing ( replyTo ⇒ { < nl > - case ( ) ⇒ < nl > + case schedUpd : Cancellable ⇒ < nl > + this . scheduledUpd = Some ( schedUpd ) < nl > replyTo ! StartCallAck < nl > context become callInProgress ( eventBusId , System . currentTimeMillis ( ) , callerUserId , receiverUserId ) < nl > unstashAll ( ) < nl > case failure : Status . Failure ⇒ < nl > replyTo forward failure < nl > - throw failure . cause < nl > + context stop self < nl > } , discardOld = true ) < nl > case _ ⇒ sender ( ) ! Status . Failure ( WebrtcCallErrors . CallNotStarted ) < nl > } < nl > @ @ - 117 , 8 + 122 , 10 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > case EventBus . Message ( _ , userId , message ) ⇒ < nl > ApiWebRTCSignaling . parseFrom ( message ) . right foreach { < nl > case ApiAnswerCall ⇒ < nl > + scheduledUpd foreach ( _ . cancel ( ) ) < nl > context become callInProgress ( eventBusId , System . currentTimeMillis ( ) , callerUserId , receiverUserId ) < nl > case ApiEndCall ⇒ < nl > + scheduledUpd foreach ( _ . cancel ( ) ) < nl > withOrigin ( userId ) ( _ ⇒ end ( ) ) < nl > case _ ⇒ < nl > } < nl > @ @ - 128 , 6 + 135 , 12 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > } < nl > } < nl > < nl > + < nl > + override def postStop ( ) : Unit = { < nl > + scheduledUpd foreach ( _ . cancel ( ) ) < nl > + super . postStop ( ) < nl > + } < nl > + < nl > override def preRestart ( reason : Throwable , message : Option [ Any ] ) : Unit = { < nl > super . preRestart ( reason , message ) < nl > log . error ( reason , " Failure on message : { } " , message )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index cfbd0f7 . . 8f6e45b 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 72 , 7 + 72 , 6 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 private val groupExt = GroupExtension ( context . system ) 
 private val valuesExt = ValuesExtension ( context . system ) 
 private val apnsExt = ApplePushExtension ( context . system ) 
 - private val db = DbExtension ( context . system ) . db 
 
 case class Device ( 
 deviceId : EventBus . DeviceId , 
 @ @ - 259 , 6 + 258 , 21 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 putParticipant ( userId , ApiCallMemberState . CONNECTED ) 
 broadcastSyncedSet ( ) 
 } 
 + case msg : ApiOnRenegotiationNeeded ⇒ 
 + / / TODO : # perf remove filterNot 
 + for { 
 + deviceId ← ebMessage . deviceId 
 + ( pair , sessionId ) ← sessions find ( _ = = msg . sessionId ) 
 + leftDevice ← devices get pair . left 
 + rightDevice ← devices get pair . right 
 + } yield { 
 + if ( pair = = Pair ( deviceId , msg . device ) ) { 
 + sessions - = sessionId 
 + eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( pair . left ) , ApiCloseSession ( pair . right , sessionId ) . toByteArray ) 
 + eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( pair . right ) , ApiCloseSession ( pair . left , sessionId ) . toByteArray ) 
 + connect ( leftDevice , rightDevice ) 
 + } else log . warning ( " Received OnRenegotiationNeeded for a wrong deviceId " ) 
 + } 
 case _ ⇒ 
 } 
 case EventBus . Disconnected ( _ , client , deviceId ) ⇒

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index 87df1ac . . 4989c9d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . server . persist . webrtc . WebrtcCallRepo 
 import im . actor . server . sequence . WeakUpdatesExtension 
 import im . actor . types . _ 
 
 + import scala . concurrent . duration . _ 
 import scala . concurrent . forkjoin . ThreadLocalRandom 
 
 sealed abstract class WebrtcCallError ( message : String ) extends RuntimeException ( message ) 
 @ @ - 54 , 6 + 55 , 8 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 private lazy val eventBusExt = EventBusExtension ( context . system ) 
 private val db = DbExtension ( context . system ) . db 
 
 + private var scheduledUpd : Option [ Cancellable ] = None 
 + 
 def receive = waitForStart 
 
 def waitForStart : Receive = { 
 @ @ - 62 , 18 + 65 , 20 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 
 ( for { 
 _ ← db . run ( WebrtcCallRepo . create ( WebrtcCall ( id , callerUserId , receiverUserId ) ) ) 
 - _ ← weakUpdExt . broadcastUserWeakUpdate ( receiverUserId , update , None , None ) 
 _ ← eventBusExt . subscribe ( eventBusId , self ) 
 - } yield ( ) ) pipeTo self 
 + } yield context . system . scheduler . schedule ( 0 . seconds , 5 . seconds ) { 
 + weakUpdExt . broadcastUserWeakUpdate ( receiverUserId , update , None , None ) 
 + } ) pipeTo self 
 
 becomeStashing ( replyTo ⇒ { 
 - case ( ) ⇒ 
 + case schedUpd : Cancellable ⇒ 
 + this . scheduledUpd = Some ( schedUpd ) 
 replyTo ! StartCallAck 
 context become callInProgress ( eventBusId , System . currentTimeMillis ( ) , callerUserId , receiverUserId ) 
 unstashAll ( ) 
 case failure : Status . Failure ⇒ 
 replyTo forward failure 
 - throw failure . cause 
 + context stop self 
 } , discardOld = true ) 
 case _ ⇒ sender ( ) ! Status . Failure ( WebrtcCallErrors . CallNotStarted ) 
 } 
 @ @ - 117 , 8 + 122 , 10 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 case EventBus . Message ( _ , userId , message ) ⇒ 
 ApiWebRTCSignaling . parseFrom ( message ) . right foreach { 
 case ApiAnswerCall ⇒ 
 + scheduledUpd foreach ( _ . cancel ( ) ) 
 context become callInProgress ( eventBusId , System . currentTimeMillis ( ) , callerUserId , receiverUserId ) 
 case ApiEndCall ⇒ 
 + scheduledUpd foreach ( _ . cancel ( ) ) 
 withOrigin ( userId ) ( _ ⇒ end ( ) ) 
 case _ ⇒ 
 } 
 @ @ - 128 , 6 + 135 , 12 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 } 
 } 
 
 + 
 + override def postStop ( ) : Unit = { 
 + scheduledUpd foreach ( _ . cancel ( ) ) 
 + super . postStop ( ) 
 + } 
 + 
 override def preRestart ( reason : Throwable , message : Option [ Any ] ) : Unit = { 
 super . preRestart ( reason , message ) 
 log . error ( reason , " Failure on message : { } " , message )
