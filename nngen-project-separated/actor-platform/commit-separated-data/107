BLEU SCORE: 0.078594386815106

TEST MSG: feat ( server : groups ) : admin setting to show join / leave messages
GENERATED MSG: fix ( server ) : fix service messages in channels

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > index 71fad35 . . 65bf91f 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > @ @ - 167 , 7 + 167 , 8 @ @ trait GroupQueryHandlers { < nl > showAdminsToMembers = state . adminSettings . showAdminsToMembers , < nl > canMembersInvite = state . adminSettings . canMembersInvite , < nl > canMembersEditGroupInfo = state . adminSettings . canMembersEditGroupInfo , < nl > - canAdminsEditGroupInfo = state . adminSettings . canAdminsEditGroupInfo < nl > + canAdminsEditGroupInfo = state . adminSettings . canAdminsEditGroupInfo , < nl > + showJoinLeaveMessages = state . adminSettings . showJoinLeaveMessages < nl > ) < nl > ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > index 2cd8548 . . b5799b9 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > @ @ - 27 , 26 + 27 , 27 @ @ object AdminSettings { < nl > showAdminsToMembers = true , < nl > canMembersInvite = true , < nl > canMembersEditGroupInfo = true , < nl > - canAdminsEditGroupInfo = true < nl > + canAdminsEditGroupInfo = true , < nl > + showJoinLeaveMessages = true < nl > ) < nl > < nl > val ChannelsDefault = AdminSettings ( < nl > showAdminsToMembers = false , < nl > canMembersInvite = false , < nl > canMembersEditGroupInfo = false , < nl > - canAdminsEditGroupInfo = true < nl > + canAdminsEditGroupInfo = true , < nl > + showJoinLeaveMessages = false / / TODO : figure it out . We don ' t use it by default < nl > ) < nl > < nl > / / format : OFF < nl > def apiToBitMask ( settings : ApiAdminSettings ) : Int = { < nl > - def toInt ( b : Boolean ) = if ( b ) 1 else 0 < nl > - < nl > - List ( < nl > - toInt ( settings . showAdminsToMembers ) < < 0 , < nl > - toInt ( settings . canMembersInvite ) < < 1 , < nl > - toInt ( settings . canMembersEditGroupInfo ) < < 2 , < nl > - toInt ( settings . canAdminsEditGroupInfo ) < < 3 < nl > - ) . sum < nl > + def toInt ( b : Boolean ) = if ( b ) 1 else 0 < nl > + < nl > + ( toInt ( settings . showAdminsToMembers ) < < 0 ) + < nl > + ( toInt ( settings . canMembersInvite ) < < 1 ) + < nl > + ( toInt ( settings . canMembersEditGroupInfo ) < < 2 ) + < nl > + ( toInt ( settings . canAdminsEditGroupInfo ) < < 3 ) + < nl > + ( toInt ( settings . showJoinLeaveMessages ) < < 4 ) < nl > } < nl > < nl > def fromBitMask ( mask : Int ) : AdminSettings = { < nl > @ @ - 54 , 7 + 55 , 8 @ @ object AdminSettings { < nl > showAdminsToMembers = ( mask & ( 1 < < 0 ) ) ! = 0 , < nl > canMembersInvite = ( mask & ( 1 < < 1 ) ) ! = 0 , < nl > canMembersEditGroupInfo = ( mask & ( 1 < < 2 ) ) ! = 0 , < nl > - canAdminsEditGroupInfo = ( mask & ( 1 < < 3 ) ) ! = 0 < nl > + canAdminsEditGroupInfo = ( mask & ( 1 < < 3 ) ) ! = 0 , < nl > + showJoinLeaveMessages = ( mask & ( 1 < < 4 ) ) ! = 0 < nl > ) < nl > } < nl > / / format : ON < nl > @ @ - 64 , 7 + 66 , 8 @ @ private [ group ] final case class AdminSettings ( < nl > showAdminsToMembers : Boolean , / / 1 < nl > canMembersInvite : Boolean , / / 2 < nl > canMembersEditGroupInfo : Boolean , / / 4 < nl > - canAdminsEditGroupInfo : Boolean / / 8 < nl > + canAdminsEditGroupInfo : Boolean , / / 8 < nl > + showJoinLeaveMessages : Boolean / / 16 < nl > ) < nl > < nl > private [ group ] object GroupState { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala < nl > index 271d936 . . fa4cf0a 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala < nl > @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . server . group < nl > import java . time . { Instant , LocalDateTime , ZoneOffset } < nl > < nl > import akka . actor . Status < nl > + import akka . http . scaladsl . util . FastFuture < nl > import akka . pattern . pipe < nl > import im . actor . api . rpc . Update < nl > import im . actor . api . rpc . groups . _ < nl > @ @ - 228 , 6 + 229 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > < nl > val date = evt . ts < nl > val dateMillis = date . toEpochMilli < nl > + val showJoinMessage = newState . adminSettings . showJoinLeaveMessages < nl > val memberIds = newState . memberIds < nl > val apiMembers = newState . members . values . map ( _ . asStruct ) . toVector < nl > val randomId = ACLUtils . randomLong ( ) < nl > @ @ - 318 , 13 + 320 , 17 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > deliveryId = s " userjoined _ $ { groupId } _ $ { randomId } " < nl > ) < nl > < nl > - SeqStateDate ( _ , _ , date ) ← dialogExt . sendServerMessage ( < nl > - apiGroupPeer , < nl > - senderUserId = cmd . joiningUserId , < nl > - senderAuthId = cmd . joiningUserAuthId , < nl > - randomId = randomId , < nl > - serviceMessage / / no delivery tag . This updated handled this way in Groups V1 < nl > - ) < nl > + date ← if ( showJoinMessage ) { < nl > + dialogExt . sendServerMessage ( < nl > + apiGroupPeer , < nl > + senderUserId = cmd . joiningUserId , < nl > + senderAuthId = cmd . joiningUserAuthId , < nl > + randomId = randomId , < nl > + serviceMessage / / no delivery tag . This updated handled this way in Groups V1 < nl > + ) map ( _ . date ) < nl > + } else { < nl > + FastFuture . successful ( dateMillis ) < nl > + } < nl > } yield SeqStateDate ( seq , state , date ) < nl > < nl > def joinCHANNELUpdates : Future [ SeqStateDate ] = < nl > @ @ - 393 , 6 + 399 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > / / no commit here . it will be after service message sent < nl > < nl > val dateMillis = evt . ts . toEpochMilli < nl > + val showLeaveMessage = state . adminSettings . showJoinLeaveMessages < nl > < nl > val updateObsolete = UpdateGroupUserLeaveObsolete ( groupId , cmd . userId , dateMillis , cmd . randomId ) < nl > < nl > @ @ - 432 , 14 + 439 , 18 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > ) < nl > < nl > / / send service message < nl > - SeqStateDate ( _ , _ , date ) ← dialogExt . sendServerMessage ( < nl > - apiGroupPeer , < nl > - senderUserId = cmd . userId , < nl > - senderAuthId = cmd . authId , < nl > - randomId = cmd . randomId , < nl > - message = serviceMessage , < nl > - deliveryTag = Some ( Optimization . GroupV2 ) < nl > - ) < nl > + date ← if ( showLeaveMessage ) { < nl > + dialogExt . sendServerMessage ( < nl > + apiGroupPeer , < nl > + senderUserId = cmd . userId , < nl > + senderAuthId = cmd . authId , < nl > + randomId = cmd . randomId , < nl > + message = serviceMessage , < nl > + deliveryTag = Some ( Optimization . GroupV2 ) < nl > + ) map ( _ . date ) < nl > + } else { < nl > + FastFuture . successful ( dateMillis ) < nl > + } < nl > < nl > / / push left user that he is no longer a member < nl > SeqState ( seq , state ) ← seqUpdExt . deliverClientUpdate (
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index c3fe238 . . 9794afa 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 8 , 7 + 8 , 7 @ @ import akka . pattern . pipe < nl > import im . actor . api . rpc . Update < nl > import im . actor . api . rpc . files . ApiAvatar < nl > import im . actor . api . rpc . groups . _ < nl > - import im . actor . api . rpc . messaging . { ApiMessage , UpdateMessage } < nl > + import im . actor . api . rpc . messaging . { ApiMessage , ApiServiceMessage , UpdateMessage } < nl > import im . actor . api . rpc . users . ApiSex < nl > import im . actor . concurrent . FutureExt < nl > import im . actor . server . CommonErrors < nl > @ @ - 274 , 22 + 274 , 17 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > UpdateGroupMembersCountChanged ( groupId , newState . membersCount ) < nl > ) < nl > < nl > - / / push service message to invitee < nl > - _ ← pushUpdateMessage ( < nl > - userId = cmd . inviteeUserId , < nl > - authId = 0L , < nl > - ts = dateMillis , < nl > - randomId = cmd . randomId , < nl > - serviceMessage < nl > - ) < nl > - < nl > - / / push service message to inviter and return seqState < nl > - SeqState ( seq , state ) ← pushUpdateMessage ( < nl > + / / push service message to invitee and inviter < nl > + SeqState ( seq , state ) ← seqUpdExt . broadcastClientUpdate ( < nl > userId = cmd . inviterUserId , < nl > authId = cmd . inviterAuthId , < nl > - ts = dateMillis , < nl > - randomId = cmd . randomId , < nl > - serviceMessage < nl > + Set ( cmd . inviteeUserId ) , < nl > + update = serviceMessageUpdate ( < nl > + cmd . inviterUserId , < nl > + dateMillis , < nl > + cmd . randomId , < nl > + serviceMessage < nl > + ) < nl > ) < nl > } yield SeqStateDate ( seq , state , dateMillis ) < nl > < nl > @ @ - 349 , 6 + 344 , 11 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > / / user was invited in group by other group user < nl > val wasInvited = state . isInvited ( cmd . joiningUserId ) < nl > < nl > + / / trying to figure out who invited joining user . < nl > + / / Descdending priority : < nl > + / / • inviter defined in ` Join ` command ( when invited via token ) < nl > + / / • inviter from members list ( when invited by other user ) < nl > + / / • group creator ( safe fallback ) < nl > val optMember = state . members . get ( cmd . joiningUserId ) < nl > val inviterUserId = cmd . invitingUserId < nl > . orElse ( optMember . map ( _ . inviterUserId ) ) < nl > @ @ - 459 , 13 + 459 , 15 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > UpdateGroupMembersCountChanged ( groupId , newState . membersCount ) < nl > ) < nl > < nl > - / / push service message to joining user and return seqState < nl > - _ ← pushUpdateMessage ( < nl > - userId = cmd . joiningUserId , < nl > - authId = cmd . joiningUserAuthId , < nl > - ts = dateMillis , < nl > - randomId = randomId , < nl > - serviceMessage < nl > + / / push service message only to inviter < nl > + _ ← seqUpdExt . deliverUserUpdate ( < nl > + userId = inviterUserId , < nl > + update = serviceMessageUpdate ( < nl > + cmd . joiningUserId , < nl > + dateMillis , < nl > + randomId , < nl > + serviceMessage < nl > + ) < nl > ) < nl > } yield SeqStateDate ( seq , state , dateMillis ) < nl > < nl > @ @ - 581 , 14 + 583 , 19 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > UpdateGroupMembersCountChanged ( groupId , state . membersCount - 1 ) < nl > ) < nl > < nl > - / / push service message to left user < nl > - _ ← pushUpdateMessage ( < nl > - userId = cmd . userId , < nl > - authId = cmd . authId , < nl > - ts = dateMillis , < nl > - randomId = cmd . randomId , < nl > - message = serviceMessage < nl > - ) < nl > + / / push service message to user , who invited leaving user < nl > + optInviter = state . members . get ( cmd . userId ) map ( _ . inviterUserId ) < nl > + _ ← optInviter map { inviter ⇒ < nl > + seqUpdExt . deliverUserUpdate ( < nl > + userId = cmd . userId , < nl > + update = serviceMessageUpdate ( < nl > + cmd . userId , < nl > + dateMillis , < nl > + cmd . randomId , < nl > + serviceMessage < nl > + ) < nl > + ) < nl > + } getOrElse FastFuture . successful ( ( ) ) < nl > < nl > / / push left user that he is no longer a member < nl > SeqState ( seq , state ) ← seqUpdExt . deliverClientUpdate ( < nl > @ @ - 713 , 22 + 720 , 15 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > UpdateGroupMembersCountChanged ( groupId , newState . membersCount ) < nl > ) < nl > < nl > - / / push service message to kicker user < nl > - _ ← pushUpdateMessage ( < nl > - userId = cmd . kickerUserId , < nl > - authId = cmd . kickerAuthId , / / ? ? ? what ' s a point ? < nl > - ts = dateMillis , < nl > - randomId = cmd . randomId , < nl > - serviceMessage < nl > - ) < nl > - < nl > - / / push service message to kicked user < nl > - _ ← pushUpdateMessage ( < nl > - userId = cmd . kickedUserId , < nl > - authId = 0L , < nl > - ts = dateMillis , < nl > - randomId = cmd . randomId , < nl > - serviceMessage < nl > + / / push service message to kicker and kicked users . < nl > + _ ← seqUpdExt . broadcastPeopleUpdate ( < nl > + userIds = Set ( cmd . kickedUserId , cmd . kickerUserId ) , < nl > + update = serviceMessageUpdate ( < nl > + cmd . kickerUserId , < nl > + dateMillis , < nl > + cmd . randomId , < nl > + serviceMessage < nl > + ) < nl > ) < nl > < nl > / / push kicked user updates < nl > @ @ - 1147 , 25 + 1147 , 16 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > } < nl > } < nl > < nl > - / / и л и в с е т а к и б у д е т broadcast ? < nl > - private def pushUpdateMessage ( userId : Int , authId : Long , ts : Long , randomId : Long , message : ApiMessage ) : Future [ SeqState ] = { < nl > - val messUpdate = UpdateMessage ( < nl > + private def serviceMessageUpdate ( senderUserId : Int , date : Long , randomId : Long , message : ApiServiceMessage ) = < nl > + UpdateMessage ( < nl > peer = apiGroupPeer , < nl > - senderUserId = userId , < nl > - date = ts , < nl > + senderUserId = senderUserId , < nl > + date = date , < nl > randomId = randomId , < nl > message = message , < nl > attributes = None , < nl > quotedMessage = None < nl > ) < nl > - seqUpdExt . deliverClientUpdate ( < nl > - userId = userId , < nl > - authId = authId , < nl > - update = messUpdate , < nl > - deliveryId = seqUpdExt . msgDeliveryId ( apiGroupPeer . asModel , randomId ) , < nl > - deliveryTag = Some ( Optimization . GroupV2 ) < nl > - ) < nl > - } < nl > < nl > private def trimToEmpty ( s : Option [ String ] ) : Option [ String ] = < nl > s map ( _ . trim ) filter ( _ . nonEmpty ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > index b599ef8 . . adcfb28 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > @ @ - 46 , 8 + 46 , 7 @ @ private [ group ] sealed trait Commands extends UserAcl { < nl > def joinGroup ( groupId : Int , joiningUserId : Int , joiningUserAuthId : Long , invitingUserId : Option [ Int ] ) : Future [ ( SeqStateDate , Vector [ Int ] , Long ) ] = < nl > ( processorRegion . ref ? < nl > GroupEnvelope ( groupId ) < nl > - . withJoin ( Join ( joiningUserId , joiningUserAuthId , invitingUserId = None ) ) / / None ? < nl > - ) . mapTo [ ( SeqStateDate , Vector [ Int ] , Long ) ] < nl > + . withJoin ( Join ( joiningUserId , joiningUserAuthId , invitingUserId = invitingUserId ) ) ) . mapTo [ ( SeqStateDate , Vector [ Int ] , Long ) ] < nl > < nl > def inviteToGroup ( groupId : Int , inviteeUserId : Int , randomId : Long ) ( implicit client : AuthorizedClientData ) : Future [ SeqStateDate ] = < nl > inviteToGroup ( client . userId , client . authId , groupId , inviteeUserId , randomId ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > index 1500067 . . 2e390f8 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > @ @ - 122 , 7 + 122 , 7 @ @ trait GroupQueryHandlers { < nl > canViewMembers = Some ( state . canViewMembers ( clientUserId ) ) , < nl > canInvitePeople = Some ( state . canInvitePeople ( clientUserId ) ) , < nl > isSharedHistory = Some ( state . isHistoryShared ) , < nl > - isAsyncMembers = Some ( state . members . size > 100 ) , < nl > + isAsyncMembers = Some ( state . isAsyncMembers ) , < nl > members = membersAndCount ( state , clientUserId ) . _ 1 < nl > ) < nl > ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > index 5844d86 . . 77ed12f 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > @ @ - 116 , 6 + 116 , 12 @ @ private [ group ] final case class GroupState ( < nl > < nl > def isCreated = createdAt . nonEmpty / / TODO : Maybe val . immutable anyway < nl > < nl > + def isAsyncMembers = < nl > + typ match { < nl > + case General | Public ⇒ members . size > 100 < nl > + case Channel ⇒ true < nl > + } < nl > + < nl > override def updated ( e : Event ) : GroupState = e match { < nl > case evt : Created ⇒ < nl > this . copy (

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 index 71fad35 . . 65bf91f 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 @ @ - 167 , 7 + 167 , 8 @ @ trait GroupQueryHandlers { 
 showAdminsToMembers = state . adminSettings . showAdminsToMembers , 
 canMembersInvite = state . adminSettings . canMembersInvite , 
 canMembersEditGroupInfo = state . adminSettings . canMembersEditGroupInfo , 
 - canAdminsEditGroupInfo = state . adminSettings . canAdminsEditGroupInfo 
 + canAdminsEditGroupInfo = state . adminSettings . canAdminsEditGroupInfo , 
 + showJoinLeaveMessages = state . adminSettings . showJoinLeaveMessages 
 ) 
 ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 index 2cd8548 . . b5799b9 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 @ @ - 27 , 26 + 27 , 27 @ @ object AdminSettings { 
 showAdminsToMembers = true , 
 canMembersInvite = true , 
 canMembersEditGroupInfo = true , 
 - canAdminsEditGroupInfo = true 
 + canAdminsEditGroupInfo = true , 
 + showJoinLeaveMessages = true 
 ) 
 
 val ChannelsDefault = AdminSettings ( 
 showAdminsToMembers = false , 
 canMembersInvite = false , 
 canMembersEditGroupInfo = false , 
 - canAdminsEditGroupInfo = true 
 + canAdminsEditGroupInfo = true , 
 + showJoinLeaveMessages = false / / TODO : figure it out . We don ' t use it by default 
 ) 
 
 / / format : OFF 
 def apiToBitMask ( settings : ApiAdminSettings ) : Int = { 
 - def toInt ( b : Boolean ) = if ( b ) 1 else 0 
 - 
 - List ( 
 - toInt ( settings . showAdminsToMembers ) < < 0 , 
 - toInt ( settings . canMembersInvite ) < < 1 , 
 - toInt ( settings . canMembersEditGroupInfo ) < < 2 , 
 - toInt ( settings . canAdminsEditGroupInfo ) < < 3 
 - ) . sum 
 + def toInt ( b : Boolean ) = if ( b ) 1 else 0 
 + 
 + ( toInt ( settings . showAdminsToMembers ) < < 0 ) + 
 + ( toInt ( settings . canMembersInvite ) < < 1 ) + 
 + ( toInt ( settings . canMembersEditGroupInfo ) < < 2 ) + 
 + ( toInt ( settings . canAdminsEditGroupInfo ) < < 3 ) + 
 + ( toInt ( settings . showJoinLeaveMessages ) < < 4 ) 
 } 
 
 def fromBitMask ( mask : Int ) : AdminSettings = { 
 @ @ - 54 , 7 + 55 , 8 @ @ object AdminSettings { 
 showAdminsToMembers = ( mask & ( 1 < < 0 ) ) ! = 0 , 
 canMembersInvite = ( mask & ( 1 < < 1 ) ) ! = 0 , 
 canMembersEditGroupInfo = ( mask & ( 1 < < 2 ) ) ! = 0 , 
 - canAdminsEditGroupInfo = ( mask & ( 1 < < 3 ) ) ! = 0 
 + canAdminsEditGroupInfo = ( mask & ( 1 < < 3 ) ) ! = 0 , 
 + showJoinLeaveMessages = ( mask & ( 1 < < 4 ) ) ! = 0 
 ) 
 } 
 / / format : ON 
 @ @ - 64 , 7 + 66 , 8 @ @ private [ group ] final case class AdminSettings ( 
 showAdminsToMembers : Boolean , / / 1 
 canMembersInvite : Boolean , / / 2 
 canMembersEditGroupInfo : Boolean , / / 4 
 - canAdminsEditGroupInfo : Boolean / / 8 
 + canAdminsEditGroupInfo : Boolean , / / 8 
 + showJoinLeaveMessages : Boolean / / 16 
 ) 
 
 private [ group ] object GroupState { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala 
 index 271d936 . . fa4cf0a 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala 
 @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . server . group 
 import java . time . { Instant , LocalDateTime , ZoneOffset } 
 
 import akka . actor . Status 
 + import akka . http . scaladsl . util . FastFuture 
 import akka . pattern . pipe 
 import im . actor . api . rpc . Update 
 import im . actor . api . rpc . groups . _ 
 @ @ - 228 , 6 + 229 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 
 val date = evt . ts 
 val dateMillis = date . toEpochMilli 
 + val showJoinMessage = newState . adminSettings . showJoinLeaveMessages 
 val memberIds = newState . memberIds 
 val apiMembers = newState . members . values . map ( _ . asStruct ) . toVector 
 val randomId = ACLUtils . randomLong ( ) 
 @ @ - 318 , 13 + 320 , 17 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 deliveryId = s " userjoined _ $ { groupId } _ $ { randomId } " 
 ) 
 
 - SeqStateDate ( _ , _ , date ) ← dialogExt . sendServerMessage ( 
 - apiGroupPeer , 
 - senderUserId = cmd . joiningUserId , 
 - senderAuthId = cmd . joiningUserAuthId , 
 - randomId = randomId , 
 - serviceMessage / / no delivery tag . This updated handled this way in Groups V1 
 - ) 
 + date ← if ( showJoinMessage ) { 
 + dialogExt . sendServerMessage ( 
 + apiGroupPeer , 
 + senderUserId = cmd . joiningUserId , 
 + senderAuthId = cmd . joiningUserAuthId , 
 + randomId = randomId , 
 + serviceMessage / / no delivery tag . This updated handled this way in Groups V1 
 + ) map ( _ . date ) 
 + } else { 
 + FastFuture . successful ( dateMillis ) 
 + } 
 } yield SeqStateDate ( seq , state , date ) 
 
 def joinCHANNELUpdates : Future [ SeqStateDate ] = 
 @ @ - 393 , 6 + 399 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 / / no commit here . it will be after service message sent 
 
 val dateMillis = evt . ts . toEpochMilli 
 + val showLeaveMessage = state . adminSettings . showJoinLeaveMessages 
 
 val updateObsolete = UpdateGroupUserLeaveObsolete ( groupId , cmd . userId , dateMillis , cmd . randomId ) 
 
 @ @ - 432 , 14 + 439 , 18 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 ) 
 
 / / send service message 
 - SeqStateDate ( _ , _ , date ) ← dialogExt . sendServerMessage ( 
 - apiGroupPeer , 
 - senderUserId = cmd . userId , 
 - senderAuthId = cmd . authId , 
 - randomId = cmd . randomId , 
 - message = serviceMessage , 
 - deliveryTag = Some ( Optimization . GroupV2 ) 
 - ) 
 + date ← if ( showLeaveMessage ) { 
 + dialogExt . sendServerMessage ( 
 + apiGroupPeer , 
 + senderUserId = cmd . userId , 
 + senderAuthId = cmd . authId , 
 + randomId = cmd . randomId , 
 + message = serviceMessage , 
 + deliveryTag = Some ( Optimization . GroupV2 ) 
 + ) map ( _ . date ) 
 + } else { 
 + FastFuture . successful ( dateMillis ) 
 + } 
 
 / / push left user that he is no longer a member 
 SeqState ( seq , state ) ← seqUpdExt . deliverClientUpdate (

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index c3fe238 . . 9794afa 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 8 , 7 + 8 , 7 @ @ import akka . pattern . pipe 
 import im . actor . api . rpc . Update 
 import im . actor . api . rpc . files . ApiAvatar 
 import im . actor . api . rpc . groups . _ 
 - import im . actor . api . rpc . messaging . { ApiMessage , UpdateMessage } 
 + import im . actor . api . rpc . messaging . { ApiMessage , ApiServiceMessage , UpdateMessage } 
 import im . actor . api . rpc . users . ApiSex 
 import im . actor . concurrent . FutureExt 
 import im . actor . server . CommonErrors 
 @ @ - 274 , 22 + 274 , 17 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 UpdateGroupMembersCountChanged ( groupId , newState . membersCount ) 
 ) 
 
 - / / push service message to invitee 
 - _ ← pushUpdateMessage ( 
 - userId = cmd . inviteeUserId , 
 - authId = 0L , 
 - ts = dateMillis , 
 - randomId = cmd . randomId , 
 - serviceMessage 
 - ) 
 - 
 - / / push service message to inviter and return seqState 
 - SeqState ( seq , state ) ← pushUpdateMessage ( 
 + / / push service message to invitee and inviter 
 + SeqState ( seq , state ) ← seqUpdExt . broadcastClientUpdate ( 
 userId = cmd . inviterUserId , 
 authId = cmd . inviterAuthId , 
 - ts = dateMillis , 
 - randomId = cmd . randomId , 
 - serviceMessage 
 + Set ( cmd . inviteeUserId ) , 
 + update = serviceMessageUpdate ( 
 + cmd . inviterUserId , 
 + dateMillis , 
 + cmd . randomId , 
 + serviceMessage 
 + ) 
 ) 
 } yield SeqStateDate ( seq , state , dateMillis ) 
 
 @ @ - 349 , 6 + 344 , 11 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 / / user was invited in group by other group user 
 val wasInvited = state . isInvited ( cmd . joiningUserId ) 
 
 + / / trying to figure out who invited joining user . 
 + / / Descdending priority : 
 + / / • inviter defined in ` Join ` command ( when invited via token ) 
 + / / • inviter from members list ( when invited by other user ) 
 + / / • group creator ( safe fallback ) 
 val optMember = state . members . get ( cmd . joiningUserId ) 
 val inviterUserId = cmd . invitingUserId 
 . orElse ( optMember . map ( _ . inviterUserId ) ) 
 @ @ - 459 , 13 + 459 , 15 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 UpdateGroupMembersCountChanged ( groupId , newState . membersCount ) 
 ) 
 
 - / / push service message to joining user and return seqState 
 - _ ← pushUpdateMessage ( 
 - userId = cmd . joiningUserId , 
 - authId = cmd . joiningUserAuthId , 
 - ts = dateMillis , 
 - randomId = randomId , 
 - serviceMessage 
 + / / push service message only to inviter 
 + _ ← seqUpdExt . deliverUserUpdate ( 
 + userId = inviterUserId , 
 + update = serviceMessageUpdate ( 
 + cmd . joiningUserId , 
 + dateMillis , 
 + randomId , 
 + serviceMessage 
 + ) 
 ) 
 } yield SeqStateDate ( seq , state , dateMillis ) 
 
 @ @ - 581 , 14 + 583 , 19 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 UpdateGroupMembersCountChanged ( groupId , state . membersCount - 1 ) 
 ) 
 
 - / / push service message to left user 
 - _ ← pushUpdateMessage ( 
 - userId = cmd . userId , 
 - authId = cmd . authId , 
 - ts = dateMillis , 
 - randomId = cmd . randomId , 
 - message = serviceMessage 
 - ) 
 + / / push service message to user , who invited leaving user 
 + optInviter = state . members . get ( cmd . userId ) map ( _ . inviterUserId ) 
 + _ ← optInviter map { inviter ⇒ 
 + seqUpdExt . deliverUserUpdate ( 
 + userId = cmd . userId , 
 + update = serviceMessageUpdate ( 
 + cmd . userId , 
 + dateMillis , 
 + cmd . randomId , 
 + serviceMessage 
 + ) 
 + ) 
 + } getOrElse FastFuture . successful ( ( ) ) 
 
 / / push left user that he is no longer a member 
 SeqState ( seq , state ) ← seqUpdExt . deliverClientUpdate ( 
 @ @ - 713 , 22 + 720 , 15 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 UpdateGroupMembersCountChanged ( groupId , newState . membersCount ) 
 ) 
 
 - / / push service message to kicker user 
 - _ ← pushUpdateMessage ( 
 - userId = cmd . kickerUserId , 
 - authId = cmd . kickerAuthId , / / ? ? ? what ' s a point ? 
 - ts = dateMillis , 
 - randomId = cmd . randomId , 
 - serviceMessage 
 - ) 
 - 
 - / / push service message to kicked user 
 - _ ← pushUpdateMessage ( 
 - userId = cmd . kickedUserId , 
 - authId = 0L , 
 - ts = dateMillis , 
 - randomId = cmd . randomId , 
 - serviceMessage 
 + / / push service message to kicker and kicked users . 
 + _ ← seqUpdExt . broadcastPeopleUpdate ( 
 + userIds = Set ( cmd . kickedUserId , cmd . kickerUserId ) , 
 + update = serviceMessageUpdate ( 
 + cmd . kickerUserId , 
 + dateMillis , 
 + cmd . randomId , 
 + serviceMessage 
 + ) 
 ) 
 
 / / push kicked user updates 
 @ @ - 1147 , 25 + 1147 , 16 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 } 
 } 
 
 - / / и л и в с е т а к и б у д е т broadcast ? 
 - private def pushUpdateMessage ( userId : Int , authId : Long , ts : Long , randomId : Long , message : ApiMessage ) : Future [ SeqState ] = { 
 - val messUpdate = UpdateMessage ( 
 + private def serviceMessageUpdate ( senderUserId : Int , date : Long , randomId : Long , message : ApiServiceMessage ) = 
 + UpdateMessage ( 
 peer = apiGroupPeer , 
 - senderUserId = userId , 
 - date = ts , 
 + senderUserId = senderUserId , 
 + date = date , 
 randomId = randomId , 
 message = message , 
 attributes = None , 
 quotedMessage = None 
 ) 
 - seqUpdExt . deliverClientUpdate ( 
 - userId = userId , 
 - authId = authId , 
 - update = messUpdate , 
 - deliveryId = seqUpdExt . msgDeliveryId ( apiGroupPeer . asModel , randomId ) , 
 - deliveryTag = Some ( Optimization . GroupV2 ) 
 - ) 
 - } 
 
 private def trimToEmpty ( s : Option [ String ] ) : Option [ String ] = 
 s map ( _ . trim ) filter ( _ . nonEmpty ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 index b599ef8 . . adcfb28 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 @ @ - 46 , 8 + 46 , 7 @ @ private [ group ] sealed trait Commands extends UserAcl { 
 def joinGroup ( groupId : Int , joiningUserId : Int , joiningUserAuthId : Long , invitingUserId : Option [ Int ] ) : Future [ ( SeqStateDate , Vector [ Int ] , Long ) ] = 
 ( processorRegion . ref ? 
 GroupEnvelope ( groupId ) 
 - . withJoin ( Join ( joiningUserId , joiningUserAuthId , invitingUserId = None ) ) / / None ? 
 - ) . mapTo [ ( SeqStateDate , Vector [ Int ] , Long ) ] 
 + . withJoin ( Join ( joiningUserId , joiningUserAuthId , invitingUserId = invitingUserId ) ) ) . mapTo [ ( SeqStateDate , Vector [ Int ] , Long ) ] 
 
 def inviteToGroup ( groupId : Int , inviteeUserId : Int , randomId : Long ) ( implicit client : AuthorizedClientData ) : Future [ SeqStateDate ] = 
 inviteToGroup ( client . userId , client . authId , groupId , inviteeUserId , randomId ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 index 1500067 . . 2e390f8 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 @ @ - 122 , 7 + 122 , 7 @ @ trait GroupQueryHandlers { 
 canViewMembers = Some ( state . canViewMembers ( clientUserId ) ) , 
 canInvitePeople = Some ( state . canInvitePeople ( clientUserId ) ) , 
 isSharedHistory = Some ( state . isHistoryShared ) , 
 - isAsyncMembers = Some ( state . members . size > 100 ) , 
 + isAsyncMembers = Some ( state . isAsyncMembers ) , 
 members = membersAndCount ( state , clientUserId ) . _ 1 
 ) 
 ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 index 5844d86 . . 77ed12f 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 @ @ - 116 , 6 + 116 , 12 @ @ private [ group ] final case class GroupState ( 
 
 def isCreated = createdAt . nonEmpty / / TODO : Maybe val . immutable anyway 
 
 + def isAsyncMembers = 
 + typ match { 
 + case General | Public ⇒ members . size > 100 
 + case Channel ⇒ true 
 + } 
 + 
 override def updated ( e : Event ) : GroupState = e match { 
 case evt : Created ⇒ 
 this . copy (
