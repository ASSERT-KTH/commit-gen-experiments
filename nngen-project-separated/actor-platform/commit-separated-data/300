BLEU SCORE: 0.22997519112894443

TEST MSG: feat ( server : core ) : update schema , bump botkit version
GENERATED MSG: feat ( server : encryption ) : new encryption api

TEST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala < nl > index a1d4cfe . . b563976 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala < nl > @ @ - 27 , 9 + 27 , 11 @ @ trait ApiToBotConversions { < nl > < nl > implicit def toDocumentEx ( ex : ApiDocumentEx ) : DocumentEx = < nl > ex match { < nl > - case ApiDocumentExPhoto ( w , h ) ⇒ DocumentExPhoto ( w , h ) < nl > - case ApiDocumentExVideo ( w , h , duration ) ⇒ DocumentExVideo ( w , h , duration ) < nl > - case ApiDocumentExVoice ( duration ) ⇒ DocumentExVoice ( duration ) < nl > + case ApiDocumentExPhoto ( w , h ) ⇒ DocumentExPhoto ( w , h ) < nl > + case ApiDocumentExVideo ( w , h , duration ) ⇒ DocumentExVideo ( w , h , duration ) < nl > + case ApiDocumentExVoice ( duration ) ⇒ DocumentExVoice ( duration ) < nl > + case ApiDocumentExAnimation ( w , h ) ⇒ DocumentExAnimation ( w , h ) < nl > + case ApiDocumentExAnimationVid ( w , h , duration ) ⇒ DocumentExAnimationVid ( w , h , duration ) < nl > } < nl > < nl > implicit def toDocumentEx ( ex : Option [ ApiDocumentEx ] ) : Option [ DocumentEx ] = < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala < nl > index 02131ab . . 6ecf86e 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala < nl > @ @ - 20 , 6 + 20 , 8 @ @ trait BotToApiConversions { < nl > case DocumentExPhoto ( width , height ) ⇒ ApiDocumentExPhoto ( width , height ) < nl > case DocumentExVideo ( width , height , duration ) ⇒ ApiDocumentExVideo ( width , height , duration ) < nl > case DocumentExVoice ( duration ) ⇒ ApiDocumentExVoice ( duration ) < nl > + case DocumentExAnimation ( w , h ) ⇒ ApiDocumentExAnimation ( w , h ) < nl > + case DocumentExAnimationVid ( w , h , duration ) ⇒ ApiDocumentExAnimationVid ( w , h , duration ) < nl > } < nl > < nl > implicit def toDocumentExt ( ex : Option [ DocumentEx ] ) : Option [ ApiDocumentEx ] = ex map toDocumentExt < nl > diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json < nl > index e230ddd . . 6572527 100644 < nl > - - - a / actor - server / actor - core / src / main / actor - api / actor . json < nl > + + + b / actor - server / actor - core / src / main / actor - api / actor . json < nl > @ @ - 4856 , 7 + 4856 , 7 @ @ < nl > " content " : { < nl > " name " : " DocumentExPhoto " , < nl > " doc " : [ < nl > - " File photo extension " , < nl > + " File photo extension . Can be set ONLY for JPEG . " , < nl > { < nl > " type " : " reference " , < nl > " argument " : " w " , < nl > @ @ - 4968 , 6 + 4968 , 94 @ @ < nl > { < nl > " type " : " struct " , < nl > " content " : { < nl > + " name " : " DocumentExAnimation " , < nl > + " doc " : [ < nl > + " Animation extension . Can be set ONLY for GIF . " , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " w " , < nl > + " category " : " full " , < nl > + " description " : " Animation width " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " h " , < nl > + " category " : " full " , < nl > + " description " : " Animation height " < nl > + } < nl > + ] , < nl > + " trait " : { < nl > + " name " : " DocumentEx " , < nl > + " key " : 6 < nl > + } , < nl > + " expandable " : " true " , < nl > + " attributes " : [ < nl > + { < nl > + " type " : " int32 " , < nl > + " id " : 1 , < nl > + " name " : " w " < nl > + } , < nl > + { < nl > + " type " : " int32 " , < nl > + " id " : 2 , < nl > + " name " : " h " < nl > + } < nl > + ] < nl > + } < nl > + } , < nl > + { < nl > + " type " : " struct " , < nl > + " content " : { < nl > + " name " : " DocumentExAnimationVid " , < nl > + " doc " : [ < nl > + " Animation video extension . More compact version of Animation with video codec instead of GIF . " , < nl > + " Can be set ONLY for MP4 . " , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " w " , < nl > + " category " : " full " , < nl > + " description " : " Animation width " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " h " , < nl > + " category " : " full " , < nl > + " description " : " Animation height " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " duration " , < nl > + " category " : " full " , < nl > + " description " : " Animation duration " < nl > + } < nl > + ] , < nl > + " trait " : { < nl > + " name " : " DocumentEx " , < nl > + " key " : 7 < nl > + } , < nl > + " expandable " : " true " , < nl > + " attributes " : [ < nl > + { < nl > + " type " : " int32 " , < nl > + " id " : 1 , < nl > + " name " : " w " < nl > + } , < nl > + { < nl > + " type " : " int32 " , < nl > + " id " : 2 , < nl > + " name " : " h " < nl > + } , < nl > + { < nl > + " type " : " int32 " , < nl > + " id " : 3 , < nl > + " name " : " duration " < nl > + } < nl > + ] < nl > + } < nl > + } , < nl > + { < nl > + " type " : " struct " , < nl > + " content " : { < nl > " name " : " JsonMessage " , < nl > " doc " : [ < nl > " Custom - data JsonMessage " , < nl > @ @ - 7982 , 8 + 8070 , 7 @ @ < nl > " childType " : " bool " < nl > } , < nl > " id " : 16 , < nl > - " name " : " isAdmin " , < nl > - " deprecated " : " true " < nl > + " name " : " isAdmin " < nl > } , < nl > { < nl > " type " : { < nl > @ @ - 7991 , 8 + 8078 , 7 @ @ < nl > " childType " : " userId " < nl > } , < nl > " id " : 8 , < nl > - " name " : " creatorUid " , < nl > - " deprecated " : " true " < nl > + " name " : " creatorUid " < nl > } , < nl > { < nl > " type " : { < nl > @ @ - 8003 , 8 + 8089 , 7 @ @ < nl > } < nl > } , < nl > " id " : 9 , < nl > - " name " : " members " , < nl > - " deprecated " : " true " < nl > + " name " : " members " < nl > } , < nl > { < nl > " type " : { < nl > @ @ - 8012 , 8 + 8097 , 7 @ @ < nl > " childType " : " date " < nl > } , < nl > " id " : 10 , < nl > - " name " : " createDate " , < nl > - " deprecated " : " true " < nl > + " name " : " createDate " < nl > } , < nl > { < nl > " type " : { < nl > @ @ - 8021 , 8 + 8105 , 7 @ @ < nl > " childType " : " string " < nl > } , < nl > " id " : 17 , < nl > - " name " : " theme " , < nl > - " deprecated " : " true " < nl > + " name " : " theme " < nl > } , < nl > { < nl > " type " : { < nl > @ @ - 8030 , 8 + 8113 , 7 @ @ < nl > " childType " : " string " < nl > } , < nl > " id " : 18 , < nl > - " name " : " about " , < nl > - " deprecated " : " true " < nl > + " name " : " about " < nl > } < nl > ] < nl > } < nl > diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala < nl > index 57a67ef . . d9af726 100644 < nl > - - - a / actor - server / project / Dependencies . scala < nl > + + + b / actor - server / project / Dependencies . scala < nl > @ @ - 5 , 7 + 5 , 7 @ @ import sbt . _ < nl > object Dependencies { < nl > object V { < nl > val actorCommons = " 0 . 0 . 15 " < nl > - val actorBotkit = " 1 . 0 . 107 " < nl > + val actorBotkit = " 1 . 0 . 109 " < nl > val akka = " 2 . 4 . 5 " < nl > val akkaHttpJson = " 1 . 5 . 0 " < nl > val cats = " 0 . 3 . 0 "
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json < nl > index 310bbd8 . . 64db0ec 100644 < nl > - - - a / actor - server / actor - core / src / main / actor - api / actor . json < nl > + + + b / actor - server / actor - core / src / main / actor - api / actor . json < nl > @ @ - 12739 , 7 + 12739 , 7 @ @ < nl > { < nl > " type " : " rpc " , < nl > " content " : { < nl > - " name " : " LoadEphermalPublicKeys " , < nl > + " name " : " LoadPrePublicKeys " , < nl > " header " : 2603 , < nl > " response " : { < nl > " type " : " reference " , < nl > @ @ - 13218 , 7 + 13218 , 7 @ @ < nl > { < nl > " type " : " rpc " , < nl > " content " : { < nl > - " name " : " UploadEphermalKey " , < nl > + " name " : " UploadPreKey " , < nl > " header " : 2612 , < nl > " response " : { < nl > " type " : " reference " , < nl > @ @ - 13306 , 11 + 13306 , 32 @ @ < nl > " argument " : " encPackage " , < nl > " category " : " full " , < nl > " description " : " Encrypted package " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " senderKeyGroupId " , < nl > + " category " : " full " , < nl > + " description " : " Sender key group " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " signatures " , < nl > + " category " : " full " , < nl > + " description " : " Encrypted box signature " < nl > } < nl > ] , < nl > + " expandable " : " true " , < nl > " attributes " : [ < nl > { < nl > " type " : { < nl > + " type " : " alias " , < nl > + " childType " : " keyGroupId " < nl > + } , < nl > + " id " : 4 , < nl > + " name " : " senderKeyGroupId " < nl > + } , < nl > + { < nl > + " type " : { < nl > " type " : " list " , < nl > " childType " : { < nl > " type " : " struct " , < nl > @ @ - 13329 , 6 + 13350 , 50 @ @ < nl > " type " : " bytes " , < nl > " id " : 3 , < nl > " name " : " encPackage " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " list " , < nl > + " childType " : { < nl > + " type " : " struct " , < nl > + " childType " : " EncryptedBoxSignature " < nl > + } < nl > + } , < nl > + " id " : 5 , < nl > + " name " : " signatures " < nl > + } < nl > + ] < nl > + } < nl > + } , < nl > + { < nl > + " type " : " struct " , < nl > + " content " : { < nl > + " name " : " EncryptedBoxSignature " , < nl > + " doc " : [ < nl > + " Signature for encrypted package " , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " algType " , < nl > + " category " : " full " , < nl > + " description " : " Alg Type " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " signature " , < nl > + " category " : " full " , < nl > + " description " : " Signature of encrypted package " < nl > + } < nl > + ] , < nl > + " attributes " : [ < nl > + { < nl > + " type " : " string " , < nl > + " id " : 1 , < nl > + " name " : " algType " < nl > + } , < nl > + { < nl > + " type " : " bytes " , < nl > + " id " : 2 , < nl > + " name " : " signature " < nl > } < nl > ] < nl > } < nl > @ @ - 13358 , 6 + 13423 , 7 @ @ < nl > " description " : " Encrypted encryption key " < nl > } < nl > ] , < nl > + " expandable " : " true " , < nl > " attributes " : [ < nl > { < nl > " type " : { < nl > @ @ - 13387 , 6 + 13453 , 228 @ @ < nl > } < nl > ] < nl > } < nl > + } , < nl > + { < nl > + " type " : " struct " , < nl > + " content " : { < nl > + " name " : " KeyGroupId " , < nl > + " doc " : [ < nl > + " References to key groups " , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " uid " , < nl > + " category " : " full " , < nl > + " description " : " User ' s id " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " keyGroupId " , < nl > + " category " : " hidden " , < nl > + " description " : " Key Group Id " < nl > + } < nl > + ] , < nl > + " attributes " : [ < nl > + { < nl > + " type " : { < nl > + " type " : " alias " , < nl > + " childType " : " userId " < nl > + } , < nl > + " id " : 1 , < nl > + " name " : " uid " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " alias " , < nl > + " childType " : " keyGroupId " < nl > + } , < nl > + " id " : 2 , < nl > + " name " : " keyGroupId " < nl > + } < nl > + ] < nl > + } < nl > + } , < nl > + { < nl > + " type " : " rpc " , < nl > + " content " : { < nl > + " name " : " SendEncryptedPackage " , < nl > + " header " : 2657 , < nl > + " response " : { < nl > + " type " : " anonymous " , < nl > + " header " : 2664 , < nl > + " doc " : [ ] , < nl > + " attributes " : [ < nl > + { < nl > + " type " : { < nl > + " type " : " opt " , < nl > + " childType " : " int32 " < nl > + } , < nl > + " id " : 1 , < nl > + " name " : " seq " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " opt " , < nl > + " childType " : { < nl > + " type " : " alias " , < nl > + " childType " : " seq _ state " < nl > + } < nl > + } , < nl > + " id " : 2 , < nl > + " name " : " state " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " opt " , < nl > + " childType " : { < nl > + " type " : " alias " , < nl > + " childType " : " date " < nl > + } < nl > + } , < nl > + " id " : 3 , < nl > + " name " : " date " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " list " , < nl > + " childType " : { < nl > + " type " : " struct " , < nl > + " childType " : " KeyGroupId " < nl > + } < nl > + } , < nl > + " id " : 4 , < nl > + " name " : " obsoleteKeyGroups " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " list " , < nl > + " childType " : { < nl > + " type " : " struct " , < nl > + " childType " : " KeyGroupId " < nl > + } < nl > + } , < nl > + " id " : 5 , < nl > + " name " : " missedKeyGroups " < nl > + } < nl > + ] < nl > + } , < nl > + " doc " : [ < nl > + " Sending encrypted package " , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " randomId " , < nl > + " category " : " hidden " , < nl > + " description " : " Random id " < nl > + } < nl > + ] , < nl > + " attributes " : [ < nl > + { < nl > + " type " : { < nl > + " type " : " alias " , < nl > + " childType " : " randomId " < nl > + } , < nl > + " id " : 1 , < nl > + " name " : " randomId " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " list " , < nl > + " childType " : { < nl > + " type " : " struct " , < nl > + " childType " : " UserOutPeer " < nl > + } < nl > + } , < nl > + " id " : 2 , < nl > + " name " : " destPeers " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " list " , < nl > + " childType " : { < nl > + " type " : " struct " , < nl > + " childType " : " KeyGroupId " < nl > + } < nl > + } , < nl > + " id " : 3 , < nl > + " name " : " ignoredKeyGroups " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " struct " , < nl > + " childType " : " EncryptedBox " < nl > + } , < nl > + " id " : 4 , < nl > + " name " : " encryptedBox " < nl > + } < nl > + ] < nl > + } < nl > + } , < nl > + { < nl > + " type " : " update " , < nl > + " content " : { < nl > + " name " : " EncryptedPackage " , < nl > + " header " : 177 , < nl > + " doc " : [ < nl > + " Update about encrypted package " , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " randomId " , < nl > + " category " : " full " , < nl > + " description " : " Random Id of package " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " date " , < nl > + " category " : " full " , < nl > + " description " : " Sending date of package " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " senderId " , < nl > + " category " : " full " , < nl > + " description " : " Sender id of package " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " encryptedBox " , < nl > + " category " : " full " , < nl > + " description " : " Encrypted box " < nl > + } < nl > + ] , < nl > + " attributes " : [ < nl > + { < nl > + " type " : { < nl > + " type " : " alias " , < nl > + " childType " : " randomId " < nl > + } , < nl > + " id " : 1 , < nl > + " name " : " randomId " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " alias " , < nl > + " childType " : " date " < nl > + } , < nl > + " id " : 2 , < nl > + " name " : " date " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " alias " , < nl > + " childType " : " userId " < nl > + } , < nl > + " id " : 3 , < nl > + " name " : " senderId " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " struct " , < nl > + " childType " : " EncryptedBox " < nl > + } , < nl > + " id " : 4 , < nl > + " name " : " encryptedBox " < nl > + } < nl > + ] < nl > + } < nl > } < nl > ] < nl > } , < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala < nl > index 54958ea . . be6db900 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala < nl > @ @ - 5 , 6 + 5 , 7 @ @ import akka . http . scaladsl . util . FastFuture < nl > import cats . std . all . _ < nl > import cats . syntax . all . _ < nl > import cats . data . { Xor , XorT } < nl > + import com . google . protobuf . wrappers . Int32Value < nl > import im . actor . api . rpc . encryption . _ < nl > import im . actor . cats . dbio . _ < nl > import im . actor . server . db . DbExtension < nl > @ @ - 15 , 6 + 16 , 7 @ @ import im . actor . server . social . SocialExtension < nl > import im . actor . util . misc . IdUtils < nl > import im . actor . server . db . ActorPostgresDriver . api . _ < nl > < nl > + import scala . collection . immutable . Iterable < nl > import scala . concurrent . Future < nl > < nl > final class EncryptionExtension ( system : ActorSystem ) extends Extension { < nl > @ @ - 67 , 6 + 69 , 7 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { < nl > < nl > def createKeyGroup ( < nl > userId : Int , < nl > + authSid : Int , < nl > supportedEncryptions : Seq [ String ] , < nl > identityKey : EncryptionKey , < nl > keys : Seq [ EncryptionKey ] , < nl > @ @ - 76 , 6 + 79 , 7 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { < nl > val keyGroup = EncryptionKeyGroup ( < nl > userId = userId , < nl > id = id , < nl > + authSid = Some ( Int32Value ( authSid ) ) , < nl > supportedEncryptions = supportedEncryptions , < nl > identityKey = Some ( identityKey ) , < nl > keys = keys , < nl > @ @ - 100 , 6 + 104 , 7 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { < nl > < nl > def createKeyGroup ( < nl > userId : Int , < nl > + authSid : Int , < nl > supportedEncryptions : Seq [ String ] , < nl > apiIdentityKey : ApiEncryptionKey , < nl > apiKeys : Seq [ ApiEncryptionKey ] , < nl > @ @ - 109 , 7 + 114 , 7 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { < nl > identityKey ← XorT . fromXor [ Future ] ( toModel ( apiIdentityKey ) ) < nl > keys ← XorT . fromXor [ Future ] ( apiKeys . toVector . traverseU ( toModel ) ) < nl > signs ← XorT ( FastFuture . successful ( apiSignatures . toVector . traverseU ( toModel ) ) ) < nl > - id ← XorT . right [ Future , Exception , Int ] ( createKeyGroup ( userId , supportedEncryptions , identityKey , keys , signs ) ) < nl > + id ← XorT . right [ Future , Exception , Int ] ( createKeyGroup ( userId , authSid , supportedEncryptions , identityKey , keys , signs ) ) < nl > } yield id < nl > < nl > futureT . value map ( _ . valueOr ( throw _ ) ) < nl > @ @ - 201 , 6 + 206 , 48 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { < nl > < nl > actionT . value map ( _ . valueOr ( throw _ ) ) < nl > } < nl > + < nl > + def checkBox ( box : ApiEncryptedBox ) : Future [ Either [ ( Vector [ ApiKeyGroupId ] , Vector [ ApiKeyGroupId ] ) , Map [ Int , Vector [ ( Int , ApiEncryptedBox ) ] ] ] ] = { < nl > + val userChecksFu : Iterable [ Future [ ( Seq [ ApiKeyGroupId ] , Seq [ ApiKeyGroupId ] , Seq [ EncryptionKeyGroup ] ) ] ] = < nl > + box . keys . groupBy ( _ . usersId ) map { < nl > + case ( userId , keys ) ⇒ < nl > + db . run ( EncryptionKeyGroupRepo . fetch ( userId ) ) map { kgs ⇒ < nl > + / / kgs not presented in box < nl > + val missingKgs = kgs . view < nl > + . filterNot ( kg ⇒ keys . exists ( _ . keyGroupId = = kg . id ) ) < nl > + . map ( kg ⇒ ApiKeyGroupId ( userId , kg . id ) ) . force < nl > + < nl > + / / kgs presented in box but deleted by receiver < nl > + val obsKgs = keys . view < nl > + . filterNot ( kg ⇒ kgs . exists ( _ . id = = kg . keyGroupId ) ) < nl > + . map ( k ⇒ ApiKeyGroupId ( userId , k . keyGroupId ) ) . force < nl > + < nl > + ( missingKgs , obsKgs , kgs ) < nl > + } < nl > + } < nl > + < nl > + Future . sequence ( userChecksFu ) map { checks ⇒ < nl > + val ( missing , obs , kgs ) = < nl > + checks . foldLeft ( ( Vector . empty [ ApiKeyGroupId ] , Vector . empty [ ApiKeyGroupId ] , Vector . empty [ EncryptionKeyGroup ] ) ) { < nl > + case ( ( macc , oacc , kgacc ) , ( m , o , kg ) ) ⇒ < nl > + ( macc + + m , oacc + + o , kgacc + + kg ) < nl > + } < nl > + < nl > + if ( missing . nonEmpty | | obs . nonEmpty ) Left ( missing → obs ) < nl > + else Right ( < nl > + kgs < nl > + . groupBy ( _ . userId ) < nl > + . map { < nl > + case ( userId , ukgs ) ⇒ < nl > + ( userId , < nl > + ukgs map { kg ⇒ < nl > + val keys = box . keys . filter ( _ . keyGroupId = = kg . id ) < nl > + ( kg . authSid . get . value , box . copy ( keys = keys ) ) < nl > + } ) < nl > + } . toMap < nl > + ) < nl > + } < nl > + } < nl > } < nl > < nl > object EncryptionExtension extends ExtensionId [ EncryptionExtension ] with ExtensionIdProvider { < nl > diff - - git a / actor - server / actor - models / src / main / protobuf / model / encryption . proto b / actor - server / actor - models / src / main / protobuf / model / encryption . proto < nl > index de9b2c3 . . 58eccda 100644 < nl > - - - a / actor - server / actor - models / src / main / protobuf / model / encryption . proto < nl > + + + b / actor - server / actor - models / src / main / protobuf / model / encryption . proto < nl > @ @ - 3 , 6 + 3 , 7 @ @ syntax = ' proto3 ' ; < nl > package im . actor . server . model ; < nl > < nl > import " scalapb / scalapb . proto " ; < nl > + import " google / protobuf / wrappers . proto " ; < nl > < nl > message EncryptionKey { < nl > int64 id = 1 ; < nl > @ @ - 20 , 6 + 21 , 7 @ @ message EncryptionKeySignature { < nl > message EncryptionKeyGroup { < nl > int32 user _ id = 1 ; < nl > int32 id = 2 ; < nl > + google . protobuf . Int32Value auth _ sid = 7 ; < nl > repeated string supported _ encryptions = 6 ; < nl > EncryptionKey identity _ key = 3 ; < nl > repeated EncryptionKey keys = 4 ; < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala < nl > index bf8a60a . . 432cf6e 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala < nl > @ @ - 256 , 4 + 256 , 16 @ @ object PeerHelpers { < nl > } < nl > } < nl > } < nl > + < nl > + private def renderCheckResultF [ R < : RpcResponse ] ( checkOptsActions : Seq [ Future [ Option [ Boolean ] ] ] , f : ⇒ Future [ RpcError \ / R ] ) ( implicit ec : ExecutionContext ) : Future [ RpcError \ / R ] = { < nl > + Future . sequence ( checkOptsActions ) flatMap { checkOpts ⇒ < nl > + if ( checkOpts . contains ( None ) ) { < nl > + Future . successful ( Error ( RpcError ( 404 , " PEER _ NOT _ FOUND " , " Peer not found . " , false , None ) ) ) < nl > + } else if ( checkOpts . flatten . contains ( false ) ) { < nl > + Future . successful ( Error ( RpcError ( 401 , " ACCESS _ HASH _ INVALID " , " Invalid access hash . " , false , None ) ) ) < nl > + } else { < nl > + f < nl > + } < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > index a00d294 . . 2a6c396 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > @ @ - 1 , 20 + 1 , 31 @ @ < nl > package im . actor . server . api . rpc . service . encryption < nl > < nl > import akka . actor . ActorSystem < nl > + import akka . http . scaladsl . util . FastFuture < nl > import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . encryption . _ < nl > import im . actor . api . rpc . misc . ResponseVoid < nl > import im . actor . api . rpc . peers . ApiUserOutPeer < nl > + import im . actor . api . rpc . sequence . UpdateEmptyUpdate < nl > + import im . actor . server . db . ActorPostgresDriver . api . _ < nl > + import im . actor . server . db . DbExtension < nl > import im . actor . server . encryption . EncryptionExtension < nl > + import im . actor . server . sequence . SeqUpdatesExtension < nl > < nl > import scala . concurrent . forkjoin . ThreadLocalRandom < nl > import scala . concurrent . { ExecutionContext , Future } < nl > < nl > + object EncryptionServiceErrors { < nl > + val OwnNotPresent = RpcError ( 400 , " OWN _ KEYS _ NOT _ PRESENT " , " Own keys are not present " , canTryAgain = false , None ) < nl > + } < nl > + < nl > final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends EncryptionService { < nl > import PeerHelpers . _ < nl > < nl > override implicit protected val ec : ExecutionContext = system . dispatcher < nl > private val encExt = EncryptionExtension ( system ) < nl > + private val db = DbExtension ( system ) . db < nl > + private val updExt = SeqUpdatesExtension ( system ) < nl > < nl > override def jhandleLoadPublicKeyGroups ( < nl > userPeer : ApiUserOutPeer , < nl > @ @ - 37 , 7 + 48 , 7 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti < nl > ) : Future [ HandlerResult [ ResponseCreateNewKeyGroup ] ] = < nl > authorized ( clientData ) { client ⇒ < nl > for { < nl > - id ← encExt . createKeyGroup ( client . userId , supportedEncryptions , identityKey , keys , signatures ) < nl > + id ← encExt . createKeyGroup ( client . userId , client . authSid , supportedEncryptions , identityKey , keys , signatures ) < nl > } yield Ok ( ResponseCreateNewKeyGroup ( id ) ) < nl > } < nl > < nl > @ @ - 68 , 7 + 79 , 7 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti < nl > } < nl > } < nl > < nl > - override def jhandleUploadEphermalKey ( < nl > + override def jhandleUploadPreKey ( < nl > keyGroupId : Int , < nl > keys : IndexedSeq [ ApiEncryptionKey ] , < nl > signatures : IndexedSeq [ ApiEncryptionKeySignature ] , < nl > @ @ - 80 , 7 + 91 , 7 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti < nl > } yield Ok ( ResponseVoid ) < nl > } < nl > < nl > - override def jhandleLoadEphermalPublicKeys ( < nl > + override def jhandleLoadPrePublicKeys ( < nl > userPeer : ApiUserOutPeer , < nl > keyGroupId : Int , < nl > clientData : ClientData < nl > @ @ - 102 , 6 + 113 , 68 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti < nl > } < nl > } < nl > < nl > + override def jhandleSendEncryptedPackage ( < nl > + randomId : Long , < nl > + destPeers : IndexedSeq [ ApiUserOutPeer ] , < nl > + ignoredKeyGroups : IndexedSeq [ ApiKeyGroupId ] , < nl > + encryptedBox : ApiEncryptedBox , < nl > + clientData : ClientData < nl > + ) : Future [ HandlerResult [ ResponseSendEncryptedPackage ] ] = < nl > + authorized ( clientData ) { implicit client ⇒ < nl > + db . run { < nl > + withUserOutPeers ( destPeers ) { < nl > + DBIO . from { < nl > + encExt . checkBox ( encryptedBox ) flatMap { < nl > + case Left ( ( missing , obs ) ) ⇒ < nl > + FastFuture . successful ( Ok ( ResponseSendEncryptedPackage ( < nl > + seq = None , < nl > + state = None , < nl > + date = None , < nl > + obsoleteKeyGroups = obs , < nl > + missedKeyGroups = missing < nl > + ) ) ) < nl > + case Right ( mappedBoxes ) ⇒ < nl > + val date = System . currentTimeMillis ( ) < nl > + val mappings = mappedBoxes < nl > + . map { < nl > + case ( userId , authIdsBoxes ) ⇒ < nl > + ( < nl > + userId , < nl > + authIdsBoxes . map { < nl > + case ( authId , box ) ⇒ ( authId , UpdateEncryptedPackage ( randomId , date , client . userId , box ) ) < nl > + } . toMap < nl > + ) < nl > + } < nl > + < nl > + val ( owns , peers ) = mappings . partition ( _ . _ 1 = = client . userId ) < nl > + < nl > + owns . headOption match { < nl > + case Some ( ( _ , ownMapping ) ) ⇒ < nl > + val peersFu = < nl > + Future . sequence ( peers map { < nl > + case ( userId , mapping ) ⇒ < nl > + updExt . deliverMappedUpdate ( userId , Some ( UpdateEmptyUpdate ) , mapping . toMap ) < nl > + } ) < nl > + < nl > + for { < nl > + _ ← peersFu < nl > + seqstate ← updExt . deliverMappedUpdate ( client . userId , Some ( UpdateEmptyUpdate ) , ownMapping ) < nl > + } yield Ok ( ResponseSendEncryptedPackage ( < nl > + seq = Some ( seqstate . seq ) , < nl > + state = Some ( seqstate . state . toByteArray ) , < nl > + date = Some ( date ) , < nl > + Vector . empty , < nl > + Vector . empty < nl > + ) ) < nl > + case None ⇒ < nl > + Future . successful ( Error ( EncryptionServiceErrors . OwnNotPresent ) ) < nl > + } < nl > + } < nl > + } < nl > + } < nl > + } < nl > + } < nl > + < nl > override def jhandleDisconnectKeyGroup ( < nl > keyGroupId : Int , < nl > clientData : ClientData

TEST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala 
 index a1d4cfe . . b563976 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala 
 @ @ - 27 , 9 + 27 , 11 @ @ trait ApiToBotConversions { 
 
 implicit def toDocumentEx ( ex : ApiDocumentEx ) : DocumentEx = 
 ex match { 
 - case ApiDocumentExPhoto ( w , h ) ⇒ DocumentExPhoto ( w , h ) 
 - case ApiDocumentExVideo ( w , h , duration ) ⇒ DocumentExVideo ( w , h , duration ) 
 - case ApiDocumentExVoice ( duration ) ⇒ DocumentExVoice ( duration ) 
 + case ApiDocumentExPhoto ( w , h ) ⇒ DocumentExPhoto ( w , h ) 
 + case ApiDocumentExVideo ( w , h , duration ) ⇒ DocumentExVideo ( w , h , duration ) 
 + case ApiDocumentExVoice ( duration ) ⇒ DocumentExVoice ( duration ) 
 + case ApiDocumentExAnimation ( w , h ) ⇒ DocumentExAnimation ( w , h ) 
 + case ApiDocumentExAnimationVid ( w , h , duration ) ⇒ DocumentExAnimationVid ( w , h , duration ) 
 } 
 
 implicit def toDocumentEx ( ex : Option [ ApiDocumentEx ] ) : Option [ DocumentEx ] = 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala 
 index 02131ab . . 6ecf86e 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala 
 @ @ - 20 , 6 + 20 , 8 @ @ trait BotToApiConversions { 
 case DocumentExPhoto ( width , height ) ⇒ ApiDocumentExPhoto ( width , height ) 
 case DocumentExVideo ( width , height , duration ) ⇒ ApiDocumentExVideo ( width , height , duration ) 
 case DocumentExVoice ( duration ) ⇒ ApiDocumentExVoice ( duration ) 
 + case DocumentExAnimation ( w , h ) ⇒ ApiDocumentExAnimation ( w , h ) 
 + case DocumentExAnimationVid ( w , h , duration ) ⇒ ApiDocumentExAnimationVid ( w , h , duration ) 
 } 
 
 implicit def toDocumentExt ( ex : Option [ DocumentEx ] ) : Option [ ApiDocumentEx ] = ex map toDocumentExt 
 diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json 
 index e230ddd . . 6572527 100644 
 - - - a / actor - server / actor - core / src / main / actor - api / actor . json 
 + + + b / actor - server / actor - core / src / main / actor - api / actor . json 
 @ @ - 4856 , 7 + 4856 , 7 @ @ 
 " content " : { 
 " name " : " DocumentExPhoto " , 
 " doc " : [ 
 - " File photo extension " , 
 + " File photo extension . Can be set ONLY for JPEG . " , 
 { 
 " type " : " reference " , 
 " argument " : " w " , 
 @ @ - 4968 , 6 + 4968 , 94 @ @ 
 { 
 " type " : " struct " , 
 " content " : { 
 + " name " : " DocumentExAnimation " , 
 + " doc " : [ 
 + " Animation extension . Can be set ONLY for GIF . " , 
 + { 
 + " type " : " reference " , 
 + " argument " : " w " , 
 + " category " : " full " , 
 + " description " : " Animation width " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " h " , 
 + " category " : " full " , 
 + " description " : " Animation height " 
 + } 
 + ] , 
 + " trait " : { 
 + " name " : " DocumentEx " , 
 + " key " : 6 
 + } , 
 + " expandable " : " true " , 
 + " attributes " : [ 
 + { 
 + " type " : " int32 " , 
 + " id " : 1 , 
 + " name " : " w " 
 + } , 
 + { 
 + " type " : " int32 " , 
 + " id " : 2 , 
 + " name " : " h " 
 + } 
 + ] 
 + } 
 + } , 
 + { 
 + " type " : " struct " , 
 + " content " : { 
 + " name " : " DocumentExAnimationVid " , 
 + " doc " : [ 
 + " Animation video extension . More compact version of Animation with video codec instead of GIF . " , 
 + " Can be set ONLY for MP4 . " , 
 + { 
 + " type " : " reference " , 
 + " argument " : " w " , 
 + " category " : " full " , 
 + " description " : " Animation width " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " h " , 
 + " category " : " full " , 
 + " description " : " Animation height " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " duration " , 
 + " category " : " full " , 
 + " description " : " Animation duration " 
 + } 
 + ] , 
 + " trait " : { 
 + " name " : " DocumentEx " , 
 + " key " : 7 
 + } , 
 + " expandable " : " true " , 
 + " attributes " : [ 
 + { 
 + " type " : " int32 " , 
 + " id " : 1 , 
 + " name " : " w " 
 + } , 
 + { 
 + " type " : " int32 " , 
 + " id " : 2 , 
 + " name " : " h " 
 + } , 
 + { 
 + " type " : " int32 " , 
 + " id " : 3 , 
 + " name " : " duration " 
 + } 
 + ] 
 + } 
 + } , 
 + { 
 + " type " : " struct " , 
 + " content " : { 
 " name " : " JsonMessage " , 
 " doc " : [ 
 " Custom - data JsonMessage " , 
 @ @ - 7982 , 8 + 8070 , 7 @ @ 
 " childType " : " bool " 
 } , 
 " id " : 16 , 
 - " name " : " isAdmin " , 
 - " deprecated " : " true " 
 + " name " : " isAdmin " 
 } , 
 { 
 " type " : { 
 @ @ - 7991 , 8 + 8078 , 7 @ @ 
 " childType " : " userId " 
 } , 
 " id " : 8 , 
 - " name " : " creatorUid " , 
 - " deprecated " : " true " 
 + " name " : " creatorUid " 
 } , 
 { 
 " type " : { 
 @ @ - 8003 , 8 + 8089 , 7 @ @ 
 } 
 } , 
 " id " : 9 , 
 - " name " : " members " , 
 - " deprecated " : " true " 
 + " name " : " members " 
 } , 
 { 
 " type " : { 
 @ @ - 8012 , 8 + 8097 , 7 @ @ 
 " childType " : " date " 
 } , 
 " id " : 10 , 
 - " name " : " createDate " , 
 - " deprecated " : " true " 
 + " name " : " createDate " 
 } , 
 { 
 " type " : { 
 @ @ - 8021 , 8 + 8105 , 7 @ @ 
 " childType " : " string " 
 } , 
 " id " : 17 , 
 - " name " : " theme " , 
 - " deprecated " : " true " 
 + " name " : " theme " 
 } , 
 { 
 " type " : { 
 @ @ - 8030 , 8 + 8113 , 7 @ @ 
 " childType " : " string " 
 } , 
 " id " : 18 , 
 - " name " : " about " , 
 - " deprecated " : " true " 
 + " name " : " about " 
 } 
 ] 
 } 
 diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala 
 index 57a67ef . . d9af726 100644 
 - - - a / actor - server / project / Dependencies . scala 
 + + + b / actor - server / project / Dependencies . scala 
 @ @ - 5 , 7 + 5 , 7 @ @ import sbt . _ 
 object Dependencies { 
 object V { 
 val actorCommons = " 0 . 0 . 15 " 
 - val actorBotkit = " 1 . 0 . 107 " 
 + val actorBotkit = " 1 . 0 . 109 " 
 val akka = " 2 . 4 . 5 " 
 val akkaHttpJson = " 1 . 5 . 0 " 
 val cats = " 0 . 3 . 0 "

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json 
 index 310bbd8 . . 64db0ec 100644 
 - - - a / actor - server / actor - core / src / main / actor - api / actor . json 
 + + + b / actor - server / actor - core / src / main / actor - api / actor . json 
 @ @ - 12739 , 7 + 12739 , 7 @ @ 
 { 
 " type " : " rpc " , 
 " content " : { 
 - " name " : " LoadEphermalPublicKeys " , 
 + " name " : " LoadPrePublicKeys " , 
 " header " : 2603 , 
 " response " : { 
 " type " : " reference " , 
 @ @ - 13218 , 7 + 13218 , 7 @ @ 
 { 
 " type " : " rpc " , 
 " content " : { 
 - " name " : " UploadEphermalKey " , 
 + " name " : " UploadPreKey " , 
 " header " : 2612 , 
 " response " : { 
 " type " : " reference " , 
 @ @ - 13306 , 11 + 13306 , 32 @ @ 
 " argument " : " encPackage " , 
 " category " : " full " , 
 " description " : " Encrypted package " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " senderKeyGroupId " , 
 + " category " : " full " , 
 + " description " : " Sender key group " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " signatures " , 
 + " category " : " full " , 
 + " description " : " Encrypted box signature " 
 } 
 ] , 
 + " expandable " : " true " , 
 " attributes " : [ 
 { 
 " type " : { 
 + " type " : " alias " , 
 + " childType " : " keyGroupId " 
 + } , 
 + " id " : 4 , 
 + " name " : " senderKeyGroupId " 
 + } , 
 + { 
 + " type " : { 
 " type " : " list " , 
 " childType " : { 
 " type " : " struct " , 
 @ @ - 13329 , 6 + 13350 , 50 @ @ 
 " type " : " bytes " , 
 " id " : 3 , 
 " name " : " encPackage " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " list " , 
 + " childType " : { 
 + " type " : " struct " , 
 + " childType " : " EncryptedBoxSignature " 
 + } 
 + } , 
 + " id " : 5 , 
 + " name " : " signatures " 
 + } 
 + ] 
 + } 
 + } , 
 + { 
 + " type " : " struct " , 
 + " content " : { 
 + " name " : " EncryptedBoxSignature " , 
 + " doc " : [ 
 + " Signature for encrypted package " , 
 + { 
 + " type " : " reference " , 
 + " argument " : " algType " , 
 + " category " : " full " , 
 + " description " : " Alg Type " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " signature " , 
 + " category " : " full " , 
 + " description " : " Signature of encrypted package " 
 + } 
 + ] , 
 + " attributes " : [ 
 + { 
 + " type " : " string " , 
 + " id " : 1 , 
 + " name " : " algType " 
 + } , 
 + { 
 + " type " : " bytes " , 
 + " id " : 2 , 
 + " name " : " signature " 
 } 
 ] 
 } 
 @ @ - 13358 , 6 + 13423 , 7 @ @ 
 " description " : " Encrypted encryption key " 
 } 
 ] , 
 + " expandable " : " true " , 
 " attributes " : [ 
 { 
 " type " : { 
 @ @ - 13387 , 6 + 13453 , 228 @ @ 
 } 
 ] 
 } 
 + } , 
 + { 
 + " type " : " struct " , 
 + " content " : { 
 + " name " : " KeyGroupId " , 
 + " doc " : [ 
 + " References to key groups " , 
 + { 
 + " type " : " reference " , 
 + " argument " : " uid " , 
 + " category " : " full " , 
 + " description " : " User ' s id " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " keyGroupId " , 
 + " category " : " hidden " , 
 + " description " : " Key Group Id " 
 + } 
 + ] , 
 + " attributes " : [ 
 + { 
 + " type " : { 
 + " type " : " alias " , 
 + " childType " : " userId " 
 + } , 
 + " id " : 1 , 
 + " name " : " uid " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " alias " , 
 + " childType " : " keyGroupId " 
 + } , 
 + " id " : 2 , 
 + " name " : " keyGroupId " 
 + } 
 + ] 
 + } 
 + } , 
 + { 
 + " type " : " rpc " , 
 + " content " : { 
 + " name " : " SendEncryptedPackage " , 
 + " header " : 2657 , 
 + " response " : { 
 + " type " : " anonymous " , 
 + " header " : 2664 , 
 + " doc " : [ ] , 
 + " attributes " : [ 
 + { 
 + " type " : { 
 + " type " : " opt " , 
 + " childType " : " int32 " 
 + } , 
 + " id " : 1 , 
 + " name " : " seq " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " opt " , 
 + " childType " : { 
 + " type " : " alias " , 
 + " childType " : " seq _ state " 
 + } 
 + } , 
 + " id " : 2 , 
 + " name " : " state " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " opt " , 
 + " childType " : { 
 + " type " : " alias " , 
 + " childType " : " date " 
 + } 
 + } , 
 + " id " : 3 , 
 + " name " : " date " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " list " , 
 + " childType " : { 
 + " type " : " struct " , 
 + " childType " : " KeyGroupId " 
 + } 
 + } , 
 + " id " : 4 , 
 + " name " : " obsoleteKeyGroups " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " list " , 
 + " childType " : { 
 + " type " : " struct " , 
 + " childType " : " KeyGroupId " 
 + } 
 + } , 
 + " id " : 5 , 
 + " name " : " missedKeyGroups " 
 + } 
 + ] 
 + } , 
 + " doc " : [ 
 + " Sending encrypted package " , 
 + { 
 + " type " : " reference " , 
 + " argument " : " randomId " , 
 + " category " : " hidden " , 
 + " description " : " Random id " 
 + } 
 + ] , 
 + " attributes " : [ 
 + { 
 + " type " : { 
 + " type " : " alias " , 
 + " childType " : " randomId " 
 + } , 
 + " id " : 1 , 
 + " name " : " randomId " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " list " , 
 + " childType " : { 
 + " type " : " struct " , 
 + " childType " : " UserOutPeer " 
 + } 
 + } , 
 + " id " : 2 , 
 + " name " : " destPeers " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " list " , 
 + " childType " : { 
 + " type " : " struct " , 
 + " childType " : " KeyGroupId " 
 + } 
 + } , 
 + " id " : 3 , 
 + " name " : " ignoredKeyGroups " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " struct " , 
 + " childType " : " EncryptedBox " 
 + } , 
 + " id " : 4 , 
 + " name " : " encryptedBox " 
 + } 
 + ] 
 + } 
 + } , 
 + { 
 + " type " : " update " , 
 + " content " : { 
 + " name " : " EncryptedPackage " , 
 + " header " : 177 , 
 + " doc " : [ 
 + " Update about encrypted package " , 
 + { 
 + " type " : " reference " , 
 + " argument " : " randomId " , 
 + " category " : " full " , 
 + " description " : " Random Id of package " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " date " , 
 + " category " : " full " , 
 + " description " : " Sending date of package " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " senderId " , 
 + " category " : " full " , 
 + " description " : " Sender id of package " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " encryptedBox " , 
 + " category " : " full " , 
 + " description " : " Encrypted box " 
 + } 
 + ] , 
 + " attributes " : [ 
 + { 
 + " type " : { 
 + " type " : " alias " , 
 + " childType " : " randomId " 
 + } , 
 + " id " : 1 , 
 + " name " : " randomId " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " alias " , 
 + " childType " : " date " 
 + } , 
 + " id " : 2 , 
 + " name " : " date " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " alias " , 
 + " childType " : " userId " 
 + } , 
 + " id " : 3 , 
 + " name " : " senderId " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " struct " , 
 + " childType " : " EncryptedBox " 
 + } , 
 + " id " : 4 , 
 + " name " : " encryptedBox " 
 + } 
 + ] 
 + } 
 } 
 ] 
 } , 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala 
 index 54958ea . . be6db900 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala 
 @ @ - 5 , 6 + 5 , 7 @ @ import akka . http . scaladsl . util . FastFuture 
 import cats . std . all . _ 
 import cats . syntax . all . _ 
 import cats . data . { Xor , XorT } 
 + import com . google . protobuf . wrappers . Int32Value 
 import im . actor . api . rpc . encryption . _ 
 import im . actor . cats . dbio . _ 
 import im . actor . server . db . DbExtension 
 @ @ - 15 , 6 + 16 , 7 @ @ import im . actor . server . social . SocialExtension 
 import im . actor . util . misc . IdUtils 
 import im . actor . server . db . ActorPostgresDriver . api . _ 
 
 + import scala . collection . immutable . Iterable 
 import scala . concurrent . Future 
 
 final class EncryptionExtension ( system : ActorSystem ) extends Extension { 
 @ @ - 67 , 6 + 69 , 7 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { 
 
 def createKeyGroup ( 
 userId : Int , 
 + authSid : Int , 
 supportedEncryptions : Seq [ String ] , 
 identityKey : EncryptionKey , 
 keys : Seq [ EncryptionKey ] , 
 @ @ - 76 , 6 + 79 , 7 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { 
 val keyGroup = EncryptionKeyGroup ( 
 userId = userId , 
 id = id , 
 + authSid = Some ( Int32Value ( authSid ) ) , 
 supportedEncryptions = supportedEncryptions , 
 identityKey = Some ( identityKey ) , 
 keys = keys , 
 @ @ - 100 , 6 + 104 , 7 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { 
 
 def createKeyGroup ( 
 userId : Int , 
 + authSid : Int , 
 supportedEncryptions : Seq [ String ] , 
 apiIdentityKey : ApiEncryptionKey , 
 apiKeys : Seq [ ApiEncryptionKey ] , 
 @ @ - 109 , 7 + 114 , 7 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { 
 identityKey ← XorT . fromXor [ Future ] ( toModel ( apiIdentityKey ) ) 
 keys ← XorT . fromXor [ Future ] ( apiKeys . toVector . traverseU ( toModel ) ) 
 signs ← XorT ( FastFuture . successful ( apiSignatures . toVector . traverseU ( toModel ) ) ) 
 - id ← XorT . right [ Future , Exception , Int ] ( createKeyGroup ( userId , supportedEncryptions , identityKey , keys , signs ) ) 
 + id ← XorT . right [ Future , Exception , Int ] ( createKeyGroup ( userId , authSid , supportedEncryptions , identityKey , keys , signs ) ) 
 } yield id 
 
 futureT . value map ( _ . valueOr ( throw _ ) ) 
 @ @ - 201 , 6 + 206 , 48 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { 
 
 actionT . value map ( _ . valueOr ( throw _ ) ) 
 } 
 + 
 + def checkBox ( box : ApiEncryptedBox ) : Future [ Either [ ( Vector [ ApiKeyGroupId ] , Vector [ ApiKeyGroupId ] ) , Map [ Int , Vector [ ( Int , ApiEncryptedBox ) ] ] ] ] = { 
 + val userChecksFu : Iterable [ Future [ ( Seq [ ApiKeyGroupId ] , Seq [ ApiKeyGroupId ] , Seq [ EncryptionKeyGroup ] ) ] ] = 
 + box . keys . groupBy ( _ . usersId ) map { 
 + case ( userId , keys ) ⇒ 
 + db . run ( EncryptionKeyGroupRepo . fetch ( userId ) ) map { kgs ⇒ 
 + / / kgs not presented in box 
 + val missingKgs = kgs . view 
 + . filterNot ( kg ⇒ keys . exists ( _ . keyGroupId = = kg . id ) ) 
 + . map ( kg ⇒ ApiKeyGroupId ( userId , kg . id ) ) . force 
 + 
 + / / kgs presented in box but deleted by receiver 
 + val obsKgs = keys . view 
 + . filterNot ( kg ⇒ kgs . exists ( _ . id = = kg . keyGroupId ) ) 
 + . map ( k ⇒ ApiKeyGroupId ( userId , k . keyGroupId ) ) . force 
 + 
 + ( missingKgs , obsKgs , kgs ) 
 + } 
 + } 
 + 
 + Future . sequence ( userChecksFu ) map { checks ⇒ 
 + val ( missing , obs , kgs ) = 
 + checks . foldLeft ( ( Vector . empty [ ApiKeyGroupId ] , Vector . empty [ ApiKeyGroupId ] , Vector . empty [ EncryptionKeyGroup ] ) ) { 
 + case ( ( macc , oacc , kgacc ) , ( m , o , kg ) ) ⇒ 
 + ( macc + + m , oacc + + o , kgacc + + kg ) 
 + } 
 + 
 + if ( missing . nonEmpty | | obs . nonEmpty ) Left ( missing → obs ) 
 + else Right ( 
 + kgs 
 + . groupBy ( _ . userId ) 
 + . map { 
 + case ( userId , ukgs ) ⇒ 
 + ( userId , 
 + ukgs map { kg ⇒ 
 + val keys = box . keys . filter ( _ . keyGroupId = = kg . id ) 
 + ( kg . authSid . get . value , box . copy ( keys = keys ) ) 
 + } ) 
 + } . toMap 
 + ) 
 + } 
 + } 
 } 
 
 object EncryptionExtension extends ExtensionId [ EncryptionExtension ] with ExtensionIdProvider { 
 diff - - git a / actor - server / actor - models / src / main / protobuf / model / encryption . proto b / actor - server / actor - models / src / main / protobuf / model / encryption . proto 
 index de9b2c3 . . 58eccda 100644 
 - - - a / actor - server / actor - models / src / main / protobuf / model / encryption . proto 
 + + + b / actor - server / actor - models / src / main / protobuf / model / encryption . proto 
 @ @ - 3 , 6 + 3 , 7 @ @ syntax = ' proto3 ' ; 
 package im . actor . server . model ; 
 
 import " scalapb / scalapb . proto " ; 
 + import " google / protobuf / wrappers . proto " ; 
 
 message EncryptionKey { 
 int64 id = 1 ; 
 @ @ - 20 , 6 + 21 , 7 @ @ message EncryptionKeySignature { 
 message EncryptionKeyGroup { 
 int32 user _ id = 1 ; 
 int32 id = 2 ; 
 + google . protobuf . Int32Value auth _ sid = 7 ; 
 repeated string supported _ encryptions = 6 ; 
 EncryptionKey identity _ key = 3 ; 
 repeated EncryptionKey keys = 4 ; 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala 
 index bf8a60a . . 432cf6e 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala 
 @ @ - 256 , 4 + 256 , 16 @ @ object PeerHelpers { 
 } 
 } 
 } 
 + 
 + private def renderCheckResultF [ R < : RpcResponse ] ( checkOptsActions : Seq [ Future [ Option [ Boolean ] ] ] , f : ⇒ Future [ RpcError \ / R ] ) ( implicit ec : ExecutionContext ) : Future [ RpcError \ / R ] = { 
 + Future . sequence ( checkOptsActions ) flatMap { checkOpts ⇒ 
 + if ( checkOpts . contains ( None ) ) { 
 + Future . successful ( Error ( RpcError ( 404 , " PEER _ NOT _ FOUND " , " Peer not found . " , false , None ) ) ) 
 + } else if ( checkOpts . flatten . contains ( false ) ) { 
 + Future . successful ( Error ( RpcError ( 401 , " ACCESS _ HASH _ INVALID " , " Invalid access hash . " , false , None ) ) ) 
 + } else { 
 + f 
 + } 
 + } 
 + } 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 index a00d294 . . 2a6c396 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 @ @ - 1 , 20 + 1 , 31 @ @ 
 package im . actor . server . api . rpc . service . encryption 
 
 import akka . actor . ActorSystem 
 + import akka . http . scaladsl . util . FastFuture 
 import im . actor . api . rpc . _ 
 import im . actor . api . rpc . encryption . _ 
 import im . actor . api . rpc . misc . ResponseVoid 
 import im . actor . api . rpc . peers . ApiUserOutPeer 
 + import im . actor . api . rpc . sequence . UpdateEmptyUpdate 
 + import im . actor . server . db . ActorPostgresDriver . api . _ 
 + import im . actor . server . db . DbExtension 
 import im . actor . server . encryption . EncryptionExtension 
 + import im . actor . server . sequence . SeqUpdatesExtension 
 
 import scala . concurrent . forkjoin . ThreadLocalRandom 
 import scala . concurrent . { ExecutionContext , Future } 
 
 + object EncryptionServiceErrors { 
 + val OwnNotPresent = RpcError ( 400 , " OWN _ KEYS _ NOT _ PRESENT " , " Own keys are not present " , canTryAgain = false , None ) 
 + } 
 + 
 final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends EncryptionService { 
 import PeerHelpers . _ 
 
 override implicit protected val ec : ExecutionContext = system . dispatcher 
 private val encExt = EncryptionExtension ( system ) 
 + private val db = DbExtension ( system ) . db 
 + private val updExt = SeqUpdatesExtension ( system ) 
 
 override def jhandleLoadPublicKeyGroups ( 
 userPeer : ApiUserOutPeer , 
 @ @ - 37 , 7 + 48 , 7 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti 
 ) : Future [ HandlerResult [ ResponseCreateNewKeyGroup ] ] = 
 authorized ( clientData ) { client ⇒ 
 for { 
 - id ← encExt . createKeyGroup ( client . userId , supportedEncryptions , identityKey , keys , signatures ) 
 + id ← encExt . createKeyGroup ( client . userId , client . authSid , supportedEncryptions , identityKey , keys , signatures ) 
 } yield Ok ( ResponseCreateNewKeyGroup ( id ) ) 
 } 
 
 @ @ - 68 , 7 + 79 , 7 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti 
 } 
 } 
 
 - override def jhandleUploadEphermalKey ( 
 + override def jhandleUploadPreKey ( 
 keyGroupId : Int , 
 keys : IndexedSeq [ ApiEncryptionKey ] , 
 signatures : IndexedSeq [ ApiEncryptionKeySignature ] , 
 @ @ - 80 , 7 + 91 , 7 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti 
 } yield Ok ( ResponseVoid ) 
 } 
 
 - override def jhandleLoadEphermalPublicKeys ( 
 + override def jhandleLoadPrePublicKeys ( 
 userPeer : ApiUserOutPeer , 
 keyGroupId : Int , 
 clientData : ClientData 
 @ @ - 102 , 6 + 113 , 68 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti 
 } 
 } 
 
 + override def jhandleSendEncryptedPackage ( 
 + randomId : Long , 
 + destPeers : IndexedSeq [ ApiUserOutPeer ] , 
 + ignoredKeyGroups : IndexedSeq [ ApiKeyGroupId ] , 
 + encryptedBox : ApiEncryptedBox , 
 + clientData : ClientData 
 + ) : Future [ HandlerResult [ ResponseSendEncryptedPackage ] ] = 
 + authorized ( clientData ) { implicit client ⇒ 
 + db . run { 
 + withUserOutPeers ( destPeers ) { 
 + DBIO . from { 
 + encExt . checkBox ( encryptedBox ) flatMap { 
 + case Left ( ( missing , obs ) ) ⇒ 
 + FastFuture . successful ( Ok ( ResponseSendEncryptedPackage ( 
 + seq = None , 
 + state = None , 
 + date = None , 
 + obsoleteKeyGroups = obs , 
 + missedKeyGroups = missing 
 + ) ) ) 
 + case Right ( mappedBoxes ) ⇒ 
 + val date = System . currentTimeMillis ( ) 
 + val mappings = mappedBoxes 
 + . map { 
 + case ( userId , authIdsBoxes ) ⇒ 
 + ( 
 + userId , 
 + authIdsBoxes . map { 
 + case ( authId , box ) ⇒ ( authId , UpdateEncryptedPackage ( randomId , date , client . userId , box ) ) 
 + } . toMap 
 + ) 
 + } 
 + 
 + val ( owns , peers ) = mappings . partition ( _ . _ 1 = = client . userId ) 
 + 
 + owns . headOption match { 
 + case Some ( ( _ , ownMapping ) ) ⇒ 
 + val peersFu = 
 + Future . sequence ( peers map { 
 + case ( userId , mapping ) ⇒ 
 + updExt . deliverMappedUpdate ( userId , Some ( UpdateEmptyUpdate ) , mapping . toMap ) 
 + } ) 
 + 
 + for { 
 + _ ← peersFu 
 + seqstate ← updExt . deliverMappedUpdate ( client . userId , Some ( UpdateEmptyUpdate ) , ownMapping ) 
 + } yield Ok ( ResponseSendEncryptedPackage ( 
 + seq = Some ( seqstate . seq ) , 
 + state = Some ( seqstate . state . toByteArray ) , 
 + date = Some ( date ) , 
 + Vector . empty , 
 + Vector . empty 
 + ) ) 
 + case None ⇒ 
 + Future . successful ( Error ( EncryptionServiceErrors . OwnNotPresent ) ) 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + 
 override def jhandleDisconnectKeyGroup ( 
 keyGroupId : Int , 
 clientData : ClientData
