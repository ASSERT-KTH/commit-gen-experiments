BLEU SCORE: 0.041961149062965476

TEST MSG: wip ( core ) : Working on master actor state
GENERATED MSG: Merge branch ' core / perf / contacts '

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > index d9de46f . . 09e0ce3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > @ @ - 1 , 5 + 1 , 7 @ @ < nl > package im . actor . core . modules . calls ; < nl > < nl > + import java . util . ArrayList ; < nl > + import java . util . HashMap ; < nl > import java . util . HashSet ; < nl > < nl > import im . actor . core . api . ApiNeedOffer ; < nl > @ @ - 15 , 7 + 17 , 6 @ @ import im . actor . core . modules . calls . peers . PeerSettings ; < nl > import im . actor . core . modules . calls . peers . PeerState ; < nl > import im . actor . core . viewmodel . CallVM ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > - import im . actor . runtime . Log ; < nl > import im . actor . runtime . function . Consumer ; < nl > < nl > public class CallMasterActor extends AbsCallActor { < nl > @ @ - 23 , 6 + 24 , 8 @ @ public class CallMasterActor extends AbsCallActor { < nl > private final Peer peer ; < nl > private long callId ; < nl > private CallVM callVM ; < nl > + private ArrayList < PeerStateHolder > peerStates = new ArrayList < > ( ) ; < nl > + private HashMap < Integer , PeerStateHolder > statesMap = new HashMap < > ( ) ; < nl > private CommandCallback < Long > callback ; < nl > private HashSet < Long > readyDevices = new HashSet < > ( ) ; < nl > < nl > @ @ - 53 , 11 + 56 , 15 @ @ public class CallMasterActor extends AbsCallActor { < nl > if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > for ( GroupMember gm : getGroup ( peer . getPeerId ( ) ) . getMembers ( ) ) { < nl > if ( gm . getUid ( ) ! = myUid ( ) ) { < nl > - / / state . addMember ( gm . getUid ( ) , MasterCallMemberState . RINGING ) ; < nl > + PeerStateHolder st = new PeerStateHolder ( gm . getUid ( ) ) ; < nl > + peerStates . add ( st ) ; < nl > + statesMap . put ( st . getUid ( ) , st ) ; < nl > } < nl > } < nl > } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > - / / state . addMember ( peer . getPeerId ( ) , MasterCallMemberState . RINGING ) ; < nl > + PeerStateHolder st = new PeerStateHolder ( peer . getPeerId ( ) ) ; < nl > + peerStates . add ( st ) ; < nl > + statesMap . put ( st . getUid ( ) , st ) ; < nl > } else { < nl > throw new RuntimeException ( " Unsupported Peer Type group " ) ; < nl > } < nl > @ @ - 88 , 7 + 95 , 14 @ @ public class CallMasterActor extends AbsCallActor { < nl > < nl > @ Override < nl > public void onAnswered ( int uid , long deviceId , PeerSettings settings ) { < nl > - Log . d ( " CallMasterActor " , " onAnswered : " + deviceId ) ; < nl > + < nl > + / / TODO : Handle own calls < nl > + PeerStateHolder peerState = statesMap . get ( uid ) ; < nl > + if ( peerState = = null ) { < nl > + return ; < nl > + } < nl > + peerState . setWasAnswered ( true ) ; < nl > + < nl > peerCall . onTheirStarted ( deviceId ) ; < nl > onPeerStarted ( uid , deviceId , settings ) ; < nl > for ( long d : readyDevices ) { < nl > @ @ - 96 , 19 + 110 , 29 @ @ public class CallMasterActor extends AbsCallActor { < nl > callBus . sendSignal ( d , new ApiOnAnswer ( uid , deviceId ) ) ; < nl > } < nl > } < nl > + < nl > + broadcastMembers ( ) ; < nl > } < nl > < nl > @ Override < nl > public void onAdvertised ( int uid , long deviceId , PeerSettings settings ) { < nl > - Log . d ( " CallMasterActor " , " onAdvertised : " + deviceId ) ; < nl > + < nl > + / / TODO : Handle own calls < nl > + PeerStateHolder peerState = statesMap . get ( uid ) ; < nl > + if ( peerState = = null ) { < nl > + return ; < nl > + } < nl > + peerState . setIsConnected ( true ) ; < nl > + < nl > peerCall . onAdvertised ( deviceId , settings ) ; < nl > if ( selfSettings . isPreConnectionEnabled ( ) & & settings . isPreConnectionEnabled ( ) ) { < nl > onPeerStarted ( uid , deviceId , settings ) ; < nl > } < nl > + < nl > + broadcastMembers ( ) ; < nl > } < nl > < nl > private void onPeerStarted ( int uid , long deviceId , PeerSettings settings ) { < nl > - Log . d ( " CallMasterActor " , " onPeerStarted : " + deviceId ) ; < nl > < nl > if ( readyDevices . contains ( deviceId ) ) { < nl > return ; < nl > @ @ - 122 , 11 + 146 , 37 @ @ public class CallMasterActor extends AbsCallActor { < nl > readyDevices . add ( deviceId ) ; < nl > } < nl > < nl > + private void broadcastMembers ( ) { < nl > + < nl > + } < nl > + < nl > @ Override < nl > public void onPeerStateChanged ( int uid , long deviceId , PeerState state ) { < nl > - if ( state = = PeerState . DISPOSED ) { < nl > - readyDevices . remove ( deviceId ) ; < nl > + PeerStateHolder peerState = statesMap . get ( uid ) ; < nl > + if ( peerState = = null ) { < nl > + return ; < nl > } < nl > + < nl > + switch ( state ) { < nl > + case PENDING : < nl > + / / Do Nothing < nl > + break ; < nl > + case CONNECTING : < nl > + break ; < nl > + case CONNECTED : < nl > + break ; < nl > + case ACTIVE : < nl > + / / peerState . setIsAnswered ( true ) ; < nl > + break ; < nl > + case DISPOSED : < nl > + / / if ( peerState . isAnswered ( ) ) { < nl > + / / peerState . setIsRejected ( true ) ; < nl > + / / } < nl > + readyDevices . remove ( deviceId ) ; < nl > + break ; < nl > + } < nl > + < nl > + broadcastMembers ( ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 137 , 4 + 187 , 44 @ @ public class CallMasterActor extends AbsCallActor { < nl > callback = null ; < nl > } < nl > } < nl > + < nl > + private class PeerStateHolder { < nl > + < nl > + private int uid ; < nl > + private boolean isConnected = false ; < nl > + private boolean wasAnswered = false ; < nl > + private boolean isRejected = false ; < nl > + < nl > + public PeerStateHolder ( int uid ) { < nl > + this . uid = uid ; < nl > + } < nl > + < nl > + public int getUid ( ) { < nl > + return uid ; < nl > + } < nl > + < nl > + public boolean isConnected ( ) { < nl > + return isConnected ; < nl > + } < nl > + < nl > + public void setIsConnected ( boolean isConnected ) { < nl > + this . isConnected = isConnected ; < nl > + } < nl > + < nl > + public boolean isWasAnswered ( ) { < nl > + return wasAnswered ; < nl > + } < nl > + < nl > + public void setWasAnswered ( boolean wasAnswered ) { < nl > + this . wasAnswered = wasAnswered ; < nl > + } < nl > + < nl > + public boolean isRejected ( ) { < nl > + return isRejected ; < nl > + } < nl > + < nl > + public void setIsRejected ( boolean isRejected ) { < nl > + this . isRejected = isRejected ; < nl > + } < nl > + } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > index fa94c49 . . 91325c6 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > @ @ - 33 , 6 + 33 , 8 @ @ public abstract class AbsModule { < nl > public static final String STORAGE _ NOTIFICATIONS = " notifications " ; < nl > public static final String STORAGE _ SEARCH = " search " ; < nl > < nl > + public static final String STORAGE _ BOOK _ IMPORT = " book _ import " ; < nl > + < nl > public static final String STORAGE _ CHAT _ PREFIX = " chat _ " ; < nl > public static final String STORAGE _ CHAT _ MEDIA _ PREFIX = " chat _ media _ " ; < nl > public static final String STORAGE _ CHAT _ DOCS _ PREFIX = " chat _ docs _ " ; < nl > @ @ - 40 , 6 + 42 , 7 @ @ public abstract class AbsModule { < nl > public static final String STORAGE _ CHAT _ OUT = " chat _ pending _ out " ; < nl > public static final String STORAGE _ CURSOR = " chat _ cursor " ; < nl > < nl > + < nl > private ModuleContext context ; < nl > < nl > public AbsModule ( ModuleContext context ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / ContactsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / ContactsModule . java < nl > index e942cdc . . a7e3240 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / ContactsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / ContactsModule . java < nl > @ @ - 32 , 6 + 32 , 7 @ @ import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > import im . actor . core . network . RpcInternalException ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > + import im . actor . runtime . storage . SyncKeyValue ; < nl > < nl > import static im . actor . runtime . actors . ActorSystem . system ; < nl > < nl > @ @ - 40 , 11 + 41 , 13 @ @ public class ContactsModule extends AbsModule { < nl > private ListEngine < Contact > contacts ; < nl > private ActorRef bookImportActor ; < nl > private ActorRef contactSyncActor ; < nl > + private SyncKeyValue bookImportState ; < nl > < nl > public ContactsModule ( final Modules modules ) { < nl > super ( modules ) ; < nl > < nl > contacts = Storage . createList ( STORAGE _ CONTACTS , Contact . CREATOR ) ; < nl > + bookImportState = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ BOOK _ IMPORT ) ) ; < nl > } < nl > < nl > public void run ( ) { < nl > @ @ - 62 , 6 + 65 , 10 @ @ public class ContactsModule extends AbsModule { < nl > } ) . changeDispatcher ( " heavy " ) , " actor / contacts _ sync " ) ; < nl > } < nl > < nl > + public SyncKeyValue getBookImportState ( ) { < nl > + return bookImportState ; < nl > + } < nl > + < nl > public ListEngine < Contact > getContacts ( ) { < nl > return contacts ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / BookImportActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / BookImportActor . java < nl > index d06466a . . 2f23fc3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / BookImportActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / BookImportActor . java < nl > @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . core . entity . PhoneBookContact ; < nl > import im . actor . core . entity . PhoneBookEmail ; < nl > import im . actor . core . entity . PhoneBookPhone ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . internal . contacts . entity . BookImportStorage ; < nl > import im . actor . core . modules . utils . ModuleActor ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > @ @ - 34 , 10 + 35 , 19 @ @ public class BookImportActor extends ModuleActor { < nl > < nl > private static final int MAX _ IMPORT _ SIZE = 50 ; < nl > < nl > + / / Reading Phone Book < nl > + private boolean phoneBookReadingIsInProgress = false ; < nl > + < nl > + / / Import Queue < nl > + private boolean isUploadingContacts = false ; < nl > + private ArrayList < ImportQueueItem > importQueue = new ArrayList < ImportQueueItem > ( ) ; < nl > + < nl > + / / Currently importing phones and emails < nl > private HashSet < Long > importingPhones = new HashSet < Long > ( ) ; < nl > private HashSet < String > importingEmails = new HashSet < String > ( ) ; < nl > < nl > - private boolean isSyncInProgress = false ; < nl > + / / Imported phones and emails < nl > + private BookImportStorage storage = new BookImportStorage ( ) ; < nl > < nl > public BookImportActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 47 , 6 + 57 , 14 @ @ public class BookImportActor extends ModuleActor { < nl > @ Override < nl > public void preStart ( ) { < nl > super . preStart ( ) ; < nl > + byte [ ] data = context ( ) . getContactsModule ( ) . getBookImportState ( ) . get ( 0 ) ; < nl > + if ( data ! = null ) { < nl > + try { < nl > + storage = new BookImportStorage ( data ) ; < nl > + } catch ( Exception e ) { < nl > + e . getLocalizedMessage ( ) ; < nl > + } < nl > + } < nl > self ( ) . send ( new PerformSync ( ) ) ; < nl > } < nl > < nl > @ @ - 54 , 13 + 72 , 13 @ @ public class BookImportActor extends ModuleActor { < nl > if ( ENABLE _ LOG ) { < nl > Log . d ( TAG , " Checking sync . . . " ) ; < nl > } < nl > - if ( isSyncInProgress ) { < nl > + if ( phoneBookReadingIsInProgress ) { < nl > if ( ENABLE _ LOG ) { < nl > Log . d ( TAG , " Sync already in progress " ) ; < nl > } < nl > return ; < nl > } < nl > - isSyncInProgress = true ; < nl > + phoneBookReadingIsInProgress = true ; < nl > if ( ENABLE _ LOG ) { < nl > Log . d ( TAG , " Starting book loading . . . " ) ; < nl > } < nl > @ @ - 75 , 161 + 93 , 161 @ @ public class BookImportActor extends ModuleActor { < nl > } < nl > < nl > private void onPhoneBookLoaded ( List < PhoneBookContact > phoneBook ) { < nl > - isSyncInProgress = false ; < nl > + phoneBookReadingIsInProgress = false ; < nl > if ( ENABLE _ LOG ) { < nl > Log . d ( TAG , " Book load completed " ) ; < nl > } < nl > < nl > - ArrayList < ApiPhoneToImport > phoneToImports = new ArrayList < ApiPhoneToImport > ( ) ; < nl > - ArrayList < ApiEmailToImport > emailToImports = new ArrayList < ApiEmailToImport > ( ) ; < nl > + int newPhones = 0 ; < nl > + int newEmails = 0 ; < nl > for ( PhoneBookContact record : phoneBook ) { < nl > for ( PhoneBookPhone phone : record . getPhones ( ) ) { < nl > - if ( isImported ( phone . getNumber ( ) ) ) { < nl > + if ( storage . isImported ( phone . getNumber ( ) ) ) { < nl > continue ; < nl > } < nl > if ( importingPhones . contains ( phone . getNumber ( ) ) ) { < nl > continue ; < nl > } < nl > importingPhones . add ( phone . getNumber ( ) ) ; < nl > - phoneToImports . add ( new ApiPhoneToImport ( phone . getNumber ( ) , record . getName ( ) ) ) ; < nl > + importQueue . add ( new ImportPhoneQueueItem ( phone . getNumber ( ) , record . getName ( ) ) ) ; < nl > + newPhones + + ; < nl > } < nl > < nl > for ( PhoneBookEmail email : record . getEmails ( ) ) { < nl > - if ( isImported ( email . getEmail ( ) . toLowerCase ( ) ) ) { < nl > + if ( storage . isImported ( email . getEmail ( ) . toLowerCase ( ) ) ) { < nl > continue ; < nl > } < nl > if ( importingEmails . contains ( email . getEmail ( ) . toLowerCase ( ) ) ) { < nl > continue ; < nl > } < nl > importingEmails . add ( email . getEmail ( ) . toLowerCase ( ) ) ; < nl > - emailToImports . add ( new ApiEmailToImport ( email . getEmail ( ) . toLowerCase ( ) , record . getName ( ) ) ) ; < nl > + importQueue . add ( new ImportEmailQueueItem ( email . getEmail ( ) . toLowerCase ( ) , record . getName ( ) ) ) ; < nl > + newEmails + + ; < nl > } < nl > } < nl > < nl > - if ( phoneToImports . size ( ) = = 0 & & emailToImports . size ( ) = = 0 ) { < nl > - if ( ENABLE _ LOG ) { < nl > + if ( ENABLE _ LOG ) { < nl > + if ( newPhones = = 0 & & newEmails = = 0 ) { < nl > Log . d ( TAG , " No new contacts found " ) ; < nl > - } < nl > - markImported ( ) ; < nl > - return ; < nl > - } else { < nl > - if ( ENABLE _ LOG ) { < nl > - Log . d ( TAG , " Founded new " + ( phoneToImports . size ( ) + emailToImports . size ( ) ) + " contact records " ) ; < nl > + } else { < nl > + Log . d ( TAG , " Founded new " + ( newPhones + newEmails ) + " contact records " ) ; < nl > } < nl > } < nl > < nl > - ArrayList < ApiPhoneToImport > phoneToImportsPart = new ArrayList < ApiPhoneToImport > ( ) ; < nl > - ArrayList < ApiEmailToImport > emailToImportsPart = new ArrayList < ApiEmailToImport > ( ) ; < nl > - int count = 0 ; < nl > - for ( ApiPhoneToImport phoneToImport : phoneToImports ) { < nl > - phoneToImportsPart . add ( phoneToImport ) ; < nl > - count + + ; < nl > - if ( count > = MAX _ IMPORT _ SIZE ) { < nl > - performImport ( phoneToImportsPart , emailToImportsPart ) ; < nl > - phoneToImportsPart . clear ( ) ; < nl > - emailToImportsPart . clear ( ) ; < nl > - count = 0 ; < nl > - } < nl > - } < nl > - < nl > - for ( ApiEmailToImport emailToImport : emailToImports ) { < nl > - emailToImportsPart . add ( emailToImport ) ; < nl > - count + + ; < nl > - if ( count > = MAX _ IMPORT _ SIZE ) { < nl > - performImport ( phoneToImportsPart , emailToImportsPart ) ; < nl > - phoneToImportsPart . clear ( ) ; < nl > - emailToImportsPart . clear ( ) ; < nl > - count = 0 ; < nl > - } < nl > - } < nl > - < nl > - if ( count > 0 ) { < nl > - performImport ( phoneToImportsPart , emailToImportsPart ) ; < nl > - } < nl > + performImportIfRequired ( ) ; < nl > } < nl > < nl > - private void performImport ( ArrayList < ApiPhoneToImport > phoneToImportsPart , < nl > - ArrayList < ApiEmailToImport > emailToImportsPart ) { < nl > + private void performImportIfRequired ( ) { < nl > + < nl > + / / < nl > + / / Checking state < nl > + / / < nl > < nl > if ( ENABLE _ LOG ) { < nl > - Log . d ( TAG , " Performing import part with " + phoneToImportsPart . size ( ) + < nl > - " phones and " + emailToImportsPart . size ( ) + " emails " ) ; < nl > + Log . d ( TAG , " performImportIfRequired called " ) ; < nl > + } < nl > + if ( isUploadingContacts ) { < nl > + if ( ENABLE _ LOG ) { < nl > + Log . d ( TAG , " performImportIfRequired : exiting : already importing " ) ; < nl > + } < nl > + return ; < nl > } < nl > < nl > - final ApiPhoneToImport [ ] phones = phoneToImportsPart . toArray ( new ApiPhoneToImport [ phoneToImportsPart . size ( ) ] ) ; < nl > - final ApiEmailToImport [ ] emailToImports = emailToImportsPart . toArray ( new ApiEmailToImport [ emailToImportsPart . size ( ) ] ) ; < nl > + if ( importQueue . size ( ) = = 0 ) { < nl > + if ( ENABLE _ LOG ) { < nl > + Log . d ( TAG , " performImportIfRequired : exiting : nothing to import " ) ; < nl > + } < nl > + / / Marking as everything is imported < nl > + context ( ) . getAppStateModule ( ) . onBookImported ( ) ; < nl > + return ; < nl > + } < nl > < nl > - request ( new RequestImportContacts ( ( java . util . List < ApiPhoneToImport > ) phoneToImportsPart . clone ( ) , < nl > - ( java . util . List < ApiEmailToImport > ) emailToImportsPart . clone ( ) ) , new RpcCallback < ResponseImportContacts > ( ) { < nl > + / / < nl > + / / Performing import < nl > + / / < nl > + < nl > + isUploadingContacts = true ; < nl > + final ArrayList < ApiPhoneToImport > phoneToImports = new ArrayList < ApiPhoneToImport > ( ) ; < nl > + final ArrayList < ApiEmailToImport > emailToImports = new ArrayList < ApiEmailToImport > ( ) ; < nl > + for ( int i = 0 ; i < 50 & & importQueue . size ( ) > 0 ; i + + ) { < nl > + ImportQueueItem importQueueItem = importQueue . remove ( 0 ) ; < nl > + if ( importQueueItem instanceof ImportEmailQueueItem ) { < nl > + emailToImports . add ( new ApiEmailToImport ( ( ( ImportEmailQueueItem ) importQueueItem ) . getEmail ( ) , < nl > + ( ( ImportEmailQueueItem ) importQueueItem ) . getName ( ) ) ) ; < nl > + } else if ( importQueueItem instanceof ImportPhoneQueueItem ) { < nl > + phoneToImports . add ( new ApiPhoneToImport ( ( ( ImportPhoneQueueItem ) importQueueItem ) . getPhoneNumber ( ) , < nl > + ( ( ImportPhoneQueueItem ) importQueueItem ) . getName ( ) ) ) ; < nl > + } else { < nl > + throw new RuntimeException ( ) ; < nl > + } < nl > + } < nl > + request ( new RequestImportContacts ( phoneToImports , emailToImports ) , new RpcCallback < ResponseImportContacts > ( ) { < nl > @ Override < nl > public void onResult ( ResponseImportContacts response ) { < nl > - for ( ApiPhoneToImport phoneToImport : phones ) { < nl > - markImported ( phoneToImport . getPhoneNumber ( ) ) ; < nl > + < nl > + / / < nl > + / / Saving imported state < nl > + / / < nl > + < nl > + for ( ApiPhoneToImport phoneToImport : phoneToImports ) { < nl > + storage . markAsImported ( phoneToImport . getPhoneNumber ( ) ) ; < nl > importingPhones . remove ( phoneToImport . getPhoneNumber ( ) ) ; < nl > } < nl > for ( ApiEmailToImport emailToImport : emailToImports ) { < nl > - markImported ( emailToImport . getEmail ( ) ) ; < nl > + storage . markAsImported ( emailToImport . getEmail ( ) ) ; < nl > importingEmails . remove ( emailToImport . getEmail ( ) ) ; < nl > } < nl > + context ( ) . getContactsModule ( ) . getBookImportState ( ) . put ( 0 , storage . toByteArray ( ) ) ; < nl > < nl > - if ( importingEmails . size ( ) = = 0 & & importingPhones . size ( ) = = 0 ) { < nl > - markImported ( ) ; < nl > - } < nl > + / / < nl > + / / Generating update < nl > + / / < nl > + if ( response . getUsers ( ) . size ( ) ! = 0 ) { < nl > + if ( ENABLE _ LOG ) { < nl > + Log . d ( TAG , " Import success with " + response . getUsers ( ) . size ( ) + " new contacts " ) ; < nl > + } < nl > < nl > - if ( response . getUsers ( ) . size ( ) = = 0 ) { < nl > + ArrayList < Integer > uids = new ArrayList < Integer > ( ) ; < nl > + for ( ApiUser u : response . getUsers ( ) ) { < nl > + uids . add ( u . getId ( ) ) ; < nl > + } < nl > + updates ( ) . onUpdateReceived ( new FatSeqUpdate ( < nl > + response . getSeq ( ) , response . getState ( ) , < nl > + UpdateContactsAdded . HEADER , < nl > + new UpdateContactsAdded ( uids ) . toByteArray ( ) , < nl > + response . getUsers ( ) , < nl > + new ArrayList < ApiGroup > ( ) ) ) ; < nl > + } else { < nl > if ( ENABLE _ LOG ) { < nl > Log . d ( TAG , " Import success , but no new contacts found " ) ; < nl > } < nl > - return ; < nl > - } < nl > - < nl > - if ( ENABLE _ LOG ) { < nl > - Log . d ( TAG , " Import success with " + response . getUsers ( ) . size ( ) + " new contacts " ) ; < nl > } < nl > < nl > - ArrayList < Integer > uids = new ArrayList < Integer > ( ) ; < nl > - for ( ApiUser u : response . getUsers ( ) ) { < nl > - uids . add ( u . getId ( ) ) ; < nl > - } < nl > - updates ( ) . onUpdateReceived ( new FatSeqUpdate ( < nl > - response . getSeq ( ) , response . getState ( ) , < nl > - UpdateContactsAdded . HEADER , < nl > - new UpdateContactsAdded ( uids ) . toByteArray ( ) , < nl > - response . getUsers ( ) , < nl > - new ArrayList < ApiGroup > ( ) ) ) ; < nl > + / / < nl > + / / Launching next iteration < nl > + / / < nl > + isUploadingContacts = false ; < nl > + performImportIfRequired ( ) ; < nl > } < nl > < nl > @ Override < nl > public void onError ( RpcException e ) { < nl > + < nl > / / TODO : Better error handling < nl > if ( ENABLE _ LOG ) { < nl > Log . d ( TAG , " Import failure " ) ; < nl > } < nl > e . printStackTrace ( ) ; < nl > + < nl > + / / < nl > + / / Launching next iteration < nl > + / / < nl > + isUploadingContacts = false ; < nl > + performImportIfRequired ( ) ; < nl > } < nl > } ) ; < nl > } < nl > < nl > - private boolean isImported ( long phone ) { < nl > - return preferences ( ) . getBool ( " book _ phone _ " + phone , false ) ; < nl > - } < nl > - < nl > - private boolean isImported ( String email ) { < nl > - return preferences ( ) . getBool ( " book _ email _ " + email . toLowerCase ( ) , false ) ; < nl > - } < nl > - < nl > - private void markImported ( long phone ) { < nl > - preferences ( ) . putBool ( " book _ phone _ " + phone , true ) ; < nl > - } < nl > - < nl > - private void markImported ( String email ) { < nl > - preferences ( ) . putBool ( " book _ email _ " + email . toLowerCase ( ) , true ) ; < nl > - } < nl > - < nl > - private void markImported ( ) { < nl > - context ( ) . getAppStateModule ( ) . onBookImported ( ) ; < nl > - } < nl > - < nl > @ Override < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof PerformSync ) { < nl > @ @ - 256 , 4 + 274 , 45 @ @ public class BookImportActor extends ModuleActor { < nl > return phoneBook ; < nl > } < nl > } < nl > + < nl > + private static abstract class ImportQueueItem { < nl > + < nl > + } < nl > + < nl > + private static class ImportPhoneQueueItem extends ImportQueueItem { < nl > + < nl > + private long phoneNumber ; < nl > + private String name ; < nl > + < nl > + public ImportPhoneQueueItem ( long phoneNumber , String name ) { < nl > + this . phoneNumber = phoneNumber ; < nl > + this . name = name ; < nl > + } < nl > + < nl > + public long getPhoneNumber ( ) { < nl > + return phoneNumber ; < nl > + } < nl > + < nl > + public String getName ( ) { < nl > + return name ; < nl > + } < nl > + } < nl > + < nl > + private static class ImportEmailQueueItem extends ImportQueueItem { < nl > + private String email ; < nl > + private String name ; < nl > + < nl > + public ImportEmailQueueItem ( String email , String name ) { < nl > + this . email = email ; < nl > + this . name = name ; < nl > + } < nl > + < nl > + public String getEmail ( ) { < nl > + return email ; < nl > + } < nl > + < nl > + public String getName ( ) { < nl > + return name ; < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / entity / BookImportStorage . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / entity / BookImportStorage . java < nl > new file mode 100644 < nl > index 0000000 . . 093eb8f < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / entity / BookImportStorage . java < nl > @ @ - 0 , 0 + 1 , 68 @ @ < nl > + package im . actor . core . modules . internal . contacts . entity ; < nl > + < nl > + import java . io . IOException ; < nl > + import java . util . HashSet ; < nl > + < nl > + import im . actor . runtime . bser . BserObject ; < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + < nl > + public class BookImportStorage extends BserObject { < nl > + < nl > + private HashSet < String > importedEmails = new HashSet < String > ( ) ; < nl > + private HashSet < Long > importedPhones = new HashSet < Long > ( ) ; < nl > + < nl > + public BookImportStorage ( ) { < nl > + } < nl > + < nl > + public BookImportStorage ( byte [ ] data ) { < nl > + super ( ) ; < nl > + try { < nl > + super . load ( data ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + importedEmails = new HashSet < String > ( ) ; < nl > + importedPhones = new HashSet < Long > ( ) ; < nl > + } < nl > + } < nl > + < nl > + public void markAsImported ( String email ) { < nl > + importedEmails . add ( email ) ; < nl > + } < nl > + < nl > + public void markAsImported ( long phone ) { < nl > + importedPhones . add ( ( Long ) phone ) ; < nl > + } < nl > + < nl > + public boolean isImported ( String email ) { < nl > + return importedEmails . contains ( email ) ; < nl > + } < nl > + < nl > + public boolean isImported ( long phone ) { < nl > + return importedPhones . contains ( phone ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + importedEmails = new HashSet < String > ( ) ; < nl > + importedPhones = new HashSet < Long > ( ) ; < nl > + < nl > + for ( String s : values . getRepeatedString ( 1 ) ) { < nl > + importedEmails . add ( s ) ; < nl > + } < nl > + < nl > + for ( Long p : values . getRepeatedLong ( 2 ) ) { < nl > + importedPhones . add ( p ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + for ( String s : importedEmails ) { < nl > + writer . writeString ( 1 , s ) ; < nl > + } < nl > + for ( Long p : importedPhones ) { < nl > + writer . writeLong ( 2 , p ) ; < nl > + } < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 index d9de46f . . 09e0ce3 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 @ @ - 1 , 5 + 1 , 7 @ @ 
 package im . actor . core . modules . calls ; 
 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 import java . util . HashSet ; 
 
 import im . actor . core . api . ApiNeedOffer ; 
 @ @ - 15 , 7 + 17 , 6 @ @ import im . actor . core . modules . calls . peers . PeerSettings ; 
 import im . actor . core . modules . calls . peers . PeerState ; 
 import im . actor . core . viewmodel . CallVM ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 - import im . actor . runtime . Log ; 
 import im . actor . runtime . function . Consumer ; 
 
 public class CallMasterActor extends AbsCallActor { 
 @ @ - 23 , 6 + 24 , 8 @ @ public class CallMasterActor extends AbsCallActor { 
 private final Peer peer ; 
 private long callId ; 
 private CallVM callVM ; 
 + private ArrayList < PeerStateHolder > peerStates = new ArrayList < > ( ) ; 
 + private HashMap < Integer , PeerStateHolder > statesMap = new HashMap < > ( ) ; 
 private CommandCallback < Long > callback ; 
 private HashSet < Long > readyDevices = new HashSet < > ( ) ; 
 
 @ @ - 53 , 11 + 56 , 15 @ @ public class CallMasterActor extends AbsCallActor { 
 if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 for ( GroupMember gm : getGroup ( peer . getPeerId ( ) ) . getMembers ( ) ) { 
 if ( gm . getUid ( ) ! = myUid ( ) ) { 
 - / / state . addMember ( gm . getUid ( ) , MasterCallMemberState . RINGING ) ; 
 + PeerStateHolder st = new PeerStateHolder ( gm . getUid ( ) ) ; 
 + peerStates . add ( st ) ; 
 + statesMap . put ( st . getUid ( ) , st ) ; 
 } 
 } 
 } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 - / / state . addMember ( peer . getPeerId ( ) , MasterCallMemberState . RINGING ) ; 
 + PeerStateHolder st = new PeerStateHolder ( peer . getPeerId ( ) ) ; 
 + peerStates . add ( st ) ; 
 + statesMap . put ( st . getUid ( ) , st ) ; 
 } else { 
 throw new RuntimeException ( " Unsupported Peer Type group " ) ; 
 } 
 @ @ - 88 , 7 + 95 , 14 @ @ public class CallMasterActor extends AbsCallActor { 
 
 @ Override 
 public void onAnswered ( int uid , long deviceId , PeerSettings settings ) { 
 - Log . d ( " CallMasterActor " , " onAnswered : " + deviceId ) ; 
 + 
 + / / TODO : Handle own calls 
 + PeerStateHolder peerState = statesMap . get ( uid ) ; 
 + if ( peerState = = null ) { 
 + return ; 
 + } 
 + peerState . setWasAnswered ( true ) ; 
 + 
 peerCall . onTheirStarted ( deviceId ) ; 
 onPeerStarted ( uid , deviceId , settings ) ; 
 for ( long d : readyDevices ) { 
 @ @ - 96 , 19 + 110 , 29 @ @ public class CallMasterActor extends AbsCallActor { 
 callBus . sendSignal ( d , new ApiOnAnswer ( uid , deviceId ) ) ; 
 } 
 } 
 + 
 + broadcastMembers ( ) ; 
 } 
 
 @ Override 
 public void onAdvertised ( int uid , long deviceId , PeerSettings settings ) { 
 - Log . d ( " CallMasterActor " , " onAdvertised : " + deviceId ) ; 
 + 
 + / / TODO : Handle own calls 
 + PeerStateHolder peerState = statesMap . get ( uid ) ; 
 + if ( peerState = = null ) { 
 + return ; 
 + } 
 + peerState . setIsConnected ( true ) ; 
 + 
 peerCall . onAdvertised ( deviceId , settings ) ; 
 if ( selfSettings . isPreConnectionEnabled ( ) & & settings . isPreConnectionEnabled ( ) ) { 
 onPeerStarted ( uid , deviceId , settings ) ; 
 } 
 + 
 + broadcastMembers ( ) ; 
 } 
 
 private void onPeerStarted ( int uid , long deviceId , PeerSettings settings ) { 
 - Log . d ( " CallMasterActor " , " onPeerStarted : " + deviceId ) ; 
 
 if ( readyDevices . contains ( deviceId ) ) { 
 return ; 
 @ @ - 122 , 11 + 146 , 37 @ @ public class CallMasterActor extends AbsCallActor { 
 readyDevices . add ( deviceId ) ; 
 } 
 
 + private void broadcastMembers ( ) { 
 + 
 + } 
 + 
 @ Override 
 public void onPeerStateChanged ( int uid , long deviceId , PeerState state ) { 
 - if ( state = = PeerState . DISPOSED ) { 
 - readyDevices . remove ( deviceId ) ; 
 + PeerStateHolder peerState = statesMap . get ( uid ) ; 
 + if ( peerState = = null ) { 
 + return ; 
 } 
 + 
 + switch ( state ) { 
 + case PENDING : 
 + / / Do Nothing 
 + break ; 
 + case CONNECTING : 
 + break ; 
 + case CONNECTED : 
 + break ; 
 + case ACTIVE : 
 + / / peerState . setIsAnswered ( true ) ; 
 + break ; 
 + case DISPOSED : 
 + / / if ( peerState . isAnswered ( ) ) { 
 + / / peerState . setIsRejected ( true ) ; 
 + / / } 
 + readyDevices . remove ( deviceId ) ; 
 + break ; 
 + } 
 + 
 + broadcastMembers ( ) ; 
 } 
 
 @ Override 
 @ @ - 137 , 4 + 187 , 44 @ @ public class CallMasterActor extends AbsCallActor { 
 callback = null ; 
 } 
 } 
 + 
 + private class PeerStateHolder { 
 + 
 + private int uid ; 
 + private boolean isConnected = false ; 
 + private boolean wasAnswered = false ; 
 + private boolean isRejected = false ; 
 + 
 + public PeerStateHolder ( int uid ) { 
 + this . uid = uid ; 
 + } 
 + 
 + public int getUid ( ) { 
 + return uid ; 
 + } 
 + 
 + public boolean isConnected ( ) { 
 + return isConnected ; 
 + } 
 + 
 + public void setIsConnected ( boolean isConnected ) { 
 + this . isConnected = isConnected ; 
 + } 
 + 
 + public boolean isWasAnswered ( ) { 
 + return wasAnswered ; 
 + } 
 + 
 + public void setWasAnswered ( boolean wasAnswered ) { 
 + this . wasAnswered = wasAnswered ; 
 + } 
 + 
 + public boolean isRejected ( ) { 
 + return isRejected ; 
 + } 
 + 
 + public void setIsRejected ( boolean isRejected ) { 
 + this . isRejected = isRejected ; 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java 
 index fa94c49 . . 91325c6 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java 
 @ @ - 33 , 6 + 33 , 8 @ @ public abstract class AbsModule { 
 public static final String STORAGE _ NOTIFICATIONS = " notifications " ; 
 public static final String STORAGE _ SEARCH = " search " ; 
 
 + public static final String STORAGE _ BOOK _ IMPORT = " book _ import " ; 
 + 
 public static final String STORAGE _ CHAT _ PREFIX = " chat _ " ; 
 public static final String STORAGE _ CHAT _ MEDIA _ PREFIX = " chat _ media _ " ; 
 public static final String STORAGE _ CHAT _ DOCS _ PREFIX = " chat _ docs _ " ; 
 @ @ - 40 , 6 + 42 , 7 @ @ public abstract class AbsModule { 
 public static final String STORAGE _ CHAT _ OUT = " chat _ pending _ out " ; 
 public static final String STORAGE _ CURSOR = " chat _ cursor " ; 
 
 + 
 private ModuleContext context ; 
 
 public AbsModule ( ModuleContext context ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / ContactsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / ContactsModule . java 
 index e942cdc . . a7e3240 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / ContactsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / ContactsModule . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 import im . actor . core . network . RpcInternalException ; 
 import im . actor . core . viewmodel . UserVM ; 
 + import im . actor . runtime . storage . SyncKeyValue ; 
 
 import static im . actor . runtime . actors . ActorSystem . system ; 
 
 @ @ - 40 , 11 + 41 , 13 @ @ public class ContactsModule extends AbsModule { 
 private ListEngine < Contact > contacts ; 
 private ActorRef bookImportActor ; 
 private ActorRef contactSyncActor ; 
 + private SyncKeyValue bookImportState ; 
 
 public ContactsModule ( final Modules modules ) { 
 super ( modules ) ; 
 
 contacts = Storage . createList ( STORAGE _ CONTACTS , Contact . CREATOR ) ; 
 + bookImportState = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ BOOK _ IMPORT ) ) ; 
 } 
 
 public void run ( ) { 
 @ @ - 62 , 6 + 65 , 10 @ @ public class ContactsModule extends AbsModule { 
 } ) . changeDispatcher ( " heavy " ) , " actor / contacts _ sync " ) ; 
 } 
 
 + public SyncKeyValue getBookImportState ( ) { 
 + return bookImportState ; 
 + } 
 + 
 public ListEngine < Contact > getContacts ( ) { 
 return contacts ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / BookImportActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / BookImportActor . java 
 index d06466a . . 2f23fc3 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / BookImportActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / BookImportActor . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . core . entity . PhoneBookContact ; 
 import im . actor . core . entity . PhoneBookEmail ; 
 import im . actor . core . entity . PhoneBookPhone ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . internal . contacts . entity . BookImportStorage ; 
 import im . actor . core . modules . utils . ModuleActor ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 @ @ - 34 , 10 + 35 , 19 @ @ public class BookImportActor extends ModuleActor { 
 
 private static final int MAX _ IMPORT _ SIZE = 50 ; 
 
 + / / Reading Phone Book 
 + private boolean phoneBookReadingIsInProgress = false ; 
 + 
 + / / Import Queue 
 + private boolean isUploadingContacts = false ; 
 + private ArrayList < ImportQueueItem > importQueue = new ArrayList < ImportQueueItem > ( ) ; 
 + 
 + / / Currently importing phones and emails 
 private HashSet < Long > importingPhones = new HashSet < Long > ( ) ; 
 private HashSet < String > importingEmails = new HashSet < String > ( ) ; 
 
 - private boolean isSyncInProgress = false ; 
 + / / Imported phones and emails 
 + private BookImportStorage storage = new BookImportStorage ( ) ; 
 
 public BookImportActor ( ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 47 , 6 + 57 , 14 @ @ public class BookImportActor extends ModuleActor { 
 @ Override 
 public void preStart ( ) { 
 super . preStart ( ) ; 
 + byte [ ] data = context ( ) . getContactsModule ( ) . getBookImportState ( ) . get ( 0 ) ; 
 + if ( data ! = null ) { 
 + try { 
 + storage = new BookImportStorage ( data ) ; 
 + } catch ( Exception e ) { 
 + e . getLocalizedMessage ( ) ; 
 + } 
 + } 
 self ( ) . send ( new PerformSync ( ) ) ; 
 } 
 
 @ @ - 54 , 13 + 72 , 13 @ @ public class BookImportActor extends ModuleActor { 
 if ( ENABLE _ LOG ) { 
 Log . d ( TAG , " Checking sync . . . " ) ; 
 } 
 - if ( isSyncInProgress ) { 
 + if ( phoneBookReadingIsInProgress ) { 
 if ( ENABLE _ LOG ) { 
 Log . d ( TAG , " Sync already in progress " ) ; 
 } 
 return ; 
 } 
 - isSyncInProgress = true ; 
 + phoneBookReadingIsInProgress = true ; 
 if ( ENABLE _ LOG ) { 
 Log . d ( TAG , " Starting book loading . . . " ) ; 
 } 
 @ @ - 75 , 161 + 93 , 161 @ @ public class BookImportActor extends ModuleActor { 
 } 
 
 private void onPhoneBookLoaded ( List < PhoneBookContact > phoneBook ) { 
 - isSyncInProgress = false ; 
 + phoneBookReadingIsInProgress = false ; 
 if ( ENABLE _ LOG ) { 
 Log . d ( TAG , " Book load completed " ) ; 
 } 
 
 - ArrayList < ApiPhoneToImport > phoneToImports = new ArrayList < ApiPhoneToImport > ( ) ; 
 - ArrayList < ApiEmailToImport > emailToImports = new ArrayList < ApiEmailToImport > ( ) ; 
 + int newPhones = 0 ; 
 + int newEmails = 0 ; 
 for ( PhoneBookContact record : phoneBook ) { 
 for ( PhoneBookPhone phone : record . getPhones ( ) ) { 
 - if ( isImported ( phone . getNumber ( ) ) ) { 
 + if ( storage . isImported ( phone . getNumber ( ) ) ) { 
 continue ; 
 } 
 if ( importingPhones . contains ( phone . getNumber ( ) ) ) { 
 continue ; 
 } 
 importingPhones . add ( phone . getNumber ( ) ) ; 
 - phoneToImports . add ( new ApiPhoneToImport ( phone . getNumber ( ) , record . getName ( ) ) ) ; 
 + importQueue . add ( new ImportPhoneQueueItem ( phone . getNumber ( ) , record . getName ( ) ) ) ; 
 + newPhones + + ; 
 } 
 
 for ( PhoneBookEmail email : record . getEmails ( ) ) { 
 - if ( isImported ( email . getEmail ( ) . toLowerCase ( ) ) ) { 
 + if ( storage . isImported ( email . getEmail ( ) . toLowerCase ( ) ) ) { 
 continue ; 
 } 
 if ( importingEmails . contains ( email . getEmail ( ) . toLowerCase ( ) ) ) { 
 continue ; 
 } 
 importingEmails . add ( email . getEmail ( ) . toLowerCase ( ) ) ; 
 - emailToImports . add ( new ApiEmailToImport ( email . getEmail ( ) . toLowerCase ( ) , record . getName ( ) ) ) ; 
 + importQueue . add ( new ImportEmailQueueItem ( email . getEmail ( ) . toLowerCase ( ) , record . getName ( ) ) ) ; 
 + newEmails + + ; 
 } 
 } 
 
 - if ( phoneToImports . size ( ) = = 0 & & emailToImports . size ( ) = = 0 ) { 
 - if ( ENABLE _ LOG ) { 
 + if ( ENABLE _ LOG ) { 
 + if ( newPhones = = 0 & & newEmails = = 0 ) { 
 Log . d ( TAG , " No new contacts found " ) ; 
 - } 
 - markImported ( ) ; 
 - return ; 
 - } else { 
 - if ( ENABLE _ LOG ) { 
 - Log . d ( TAG , " Founded new " + ( phoneToImports . size ( ) + emailToImports . size ( ) ) + " contact records " ) ; 
 + } else { 
 + Log . d ( TAG , " Founded new " + ( newPhones + newEmails ) + " contact records " ) ; 
 } 
 } 
 
 - ArrayList < ApiPhoneToImport > phoneToImportsPart = new ArrayList < ApiPhoneToImport > ( ) ; 
 - ArrayList < ApiEmailToImport > emailToImportsPart = new ArrayList < ApiEmailToImport > ( ) ; 
 - int count = 0 ; 
 - for ( ApiPhoneToImport phoneToImport : phoneToImports ) { 
 - phoneToImportsPart . add ( phoneToImport ) ; 
 - count + + ; 
 - if ( count > = MAX _ IMPORT _ SIZE ) { 
 - performImport ( phoneToImportsPart , emailToImportsPart ) ; 
 - phoneToImportsPart . clear ( ) ; 
 - emailToImportsPart . clear ( ) ; 
 - count = 0 ; 
 - } 
 - } 
 - 
 - for ( ApiEmailToImport emailToImport : emailToImports ) { 
 - emailToImportsPart . add ( emailToImport ) ; 
 - count + + ; 
 - if ( count > = MAX _ IMPORT _ SIZE ) { 
 - performImport ( phoneToImportsPart , emailToImportsPart ) ; 
 - phoneToImportsPart . clear ( ) ; 
 - emailToImportsPart . clear ( ) ; 
 - count = 0 ; 
 - } 
 - } 
 - 
 - if ( count > 0 ) { 
 - performImport ( phoneToImportsPart , emailToImportsPart ) ; 
 - } 
 + performImportIfRequired ( ) ; 
 } 
 
 - private void performImport ( ArrayList < ApiPhoneToImport > phoneToImportsPart , 
 - ArrayList < ApiEmailToImport > emailToImportsPart ) { 
 + private void performImportIfRequired ( ) { 
 + 
 + / / 
 + / / Checking state 
 + / / 
 
 if ( ENABLE _ LOG ) { 
 - Log . d ( TAG , " Performing import part with " + phoneToImportsPart . size ( ) + 
 - " phones and " + emailToImportsPart . size ( ) + " emails " ) ; 
 + Log . d ( TAG , " performImportIfRequired called " ) ; 
 + } 
 + if ( isUploadingContacts ) { 
 + if ( ENABLE _ LOG ) { 
 + Log . d ( TAG , " performImportIfRequired : exiting : already importing " ) ; 
 + } 
 + return ; 
 } 
 
 - final ApiPhoneToImport [ ] phones = phoneToImportsPart . toArray ( new ApiPhoneToImport [ phoneToImportsPart . size ( ) ] ) ; 
 - final ApiEmailToImport [ ] emailToImports = emailToImportsPart . toArray ( new ApiEmailToImport [ emailToImportsPart . size ( ) ] ) ; 
 + if ( importQueue . size ( ) = = 0 ) { 
 + if ( ENABLE _ LOG ) { 
 + Log . d ( TAG , " performImportIfRequired : exiting : nothing to import " ) ; 
 + } 
 + / / Marking as everything is imported 
 + context ( ) . getAppStateModule ( ) . onBookImported ( ) ; 
 + return ; 
 + } 
 
 - request ( new RequestImportContacts ( ( java . util . List < ApiPhoneToImport > ) phoneToImportsPart . clone ( ) , 
 - ( java . util . List < ApiEmailToImport > ) emailToImportsPart . clone ( ) ) , new RpcCallback < ResponseImportContacts > ( ) { 
 + / / 
 + / / Performing import 
 + / / 
 + 
 + isUploadingContacts = true ; 
 + final ArrayList < ApiPhoneToImport > phoneToImports = new ArrayList < ApiPhoneToImport > ( ) ; 
 + final ArrayList < ApiEmailToImport > emailToImports = new ArrayList < ApiEmailToImport > ( ) ; 
 + for ( int i = 0 ; i < 50 & & importQueue . size ( ) > 0 ; i + + ) { 
 + ImportQueueItem importQueueItem = importQueue . remove ( 0 ) ; 
 + if ( importQueueItem instanceof ImportEmailQueueItem ) { 
 + emailToImports . add ( new ApiEmailToImport ( ( ( ImportEmailQueueItem ) importQueueItem ) . getEmail ( ) , 
 + ( ( ImportEmailQueueItem ) importQueueItem ) . getName ( ) ) ) ; 
 + } else if ( importQueueItem instanceof ImportPhoneQueueItem ) { 
 + phoneToImports . add ( new ApiPhoneToImport ( ( ( ImportPhoneQueueItem ) importQueueItem ) . getPhoneNumber ( ) , 
 + ( ( ImportPhoneQueueItem ) importQueueItem ) . getName ( ) ) ) ; 
 + } else { 
 + throw new RuntimeException ( ) ; 
 + } 
 + } 
 + request ( new RequestImportContacts ( phoneToImports , emailToImports ) , new RpcCallback < ResponseImportContacts > ( ) { 
 @ Override 
 public void onResult ( ResponseImportContacts response ) { 
 - for ( ApiPhoneToImport phoneToImport : phones ) { 
 - markImported ( phoneToImport . getPhoneNumber ( ) ) ; 
 + 
 + / / 
 + / / Saving imported state 
 + / / 
 + 
 + for ( ApiPhoneToImport phoneToImport : phoneToImports ) { 
 + storage . markAsImported ( phoneToImport . getPhoneNumber ( ) ) ; 
 importingPhones . remove ( phoneToImport . getPhoneNumber ( ) ) ; 
 } 
 for ( ApiEmailToImport emailToImport : emailToImports ) { 
 - markImported ( emailToImport . getEmail ( ) ) ; 
 + storage . markAsImported ( emailToImport . getEmail ( ) ) ; 
 importingEmails . remove ( emailToImport . getEmail ( ) ) ; 
 } 
 + context ( ) . getContactsModule ( ) . getBookImportState ( ) . put ( 0 , storage . toByteArray ( ) ) ; 
 
 - if ( importingEmails . size ( ) = = 0 & & importingPhones . size ( ) = = 0 ) { 
 - markImported ( ) ; 
 - } 
 + / / 
 + / / Generating update 
 + / / 
 + if ( response . getUsers ( ) . size ( ) ! = 0 ) { 
 + if ( ENABLE _ LOG ) { 
 + Log . d ( TAG , " Import success with " + response . getUsers ( ) . size ( ) + " new contacts " ) ; 
 + } 
 
 - if ( response . getUsers ( ) . size ( ) = = 0 ) { 
 + ArrayList < Integer > uids = new ArrayList < Integer > ( ) ; 
 + for ( ApiUser u : response . getUsers ( ) ) { 
 + uids . add ( u . getId ( ) ) ; 
 + } 
 + updates ( ) . onUpdateReceived ( new FatSeqUpdate ( 
 + response . getSeq ( ) , response . getState ( ) , 
 + UpdateContactsAdded . HEADER , 
 + new UpdateContactsAdded ( uids ) . toByteArray ( ) , 
 + response . getUsers ( ) , 
 + new ArrayList < ApiGroup > ( ) ) ) ; 
 + } else { 
 if ( ENABLE _ LOG ) { 
 Log . d ( TAG , " Import success , but no new contacts found " ) ; 
 } 
 - return ; 
 - } 
 - 
 - if ( ENABLE _ LOG ) { 
 - Log . d ( TAG , " Import success with " + response . getUsers ( ) . size ( ) + " new contacts " ) ; 
 } 
 
 - ArrayList < Integer > uids = new ArrayList < Integer > ( ) ; 
 - for ( ApiUser u : response . getUsers ( ) ) { 
 - uids . add ( u . getId ( ) ) ; 
 - } 
 - updates ( ) . onUpdateReceived ( new FatSeqUpdate ( 
 - response . getSeq ( ) , response . getState ( ) , 
 - UpdateContactsAdded . HEADER , 
 - new UpdateContactsAdded ( uids ) . toByteArray ( ) , 
 - response . getUsers ( ) , 
 - new ArrayList < ApiGroup > ( ) ) ) ; 
 + / / 
 + / / Launching next iteration 
 + / / 
 + isUploadingContacts = false ; 
 + performImportIfRequired ( ) ; 
 } 
 
 @ Override 
 public void onError ( RpcException e ) { 
 + 
 / / TODO : Better error handling 
 if ( ENABLE _ LOG ) { 
 Log . d ( TAG , " Import failure " ) ; 
 } 
 e . printStackTrace ( ) ; 
 + 
 + / / 
 + / / Launching next iteration 
 + / / 
 + isUploadingContacts = false ; 
 + performImportIfRequired ( ) ; 
 } 
 } ) ; 
 } 
 
 - private boolean isImported ( long phone ) { 
 - return preferences ( ) . getBool ( " book _ phone _ " + phone , false ) ; 
 - } 
 - 
 - private boolean isImported ( String email ) { 
 - return preferences ( ) . getBool ( " book _ email _ " + email . toLowerCase ( ) , false ) ; 
 - } 
 - 
 - private void markImported ( long phone ) { 
 - preferences ( ) . putBool ( " book _ phone _ " + phone , true ) ; 
 - } 
 - 
 - private void markImported ( String email ) { 
 - preferences ( ) . putBool ( " book _ email _ " + email . toLowerCase ( ) , true ) ; 
 - } 
 - 
 - private void markImported ( ) { 
 - context ( ) . getAppStateModule ( ) . onBookImported ( ) ; 
 - } 
 - 
 @ Override 
 public void onReceive ( Object message ) { 
 if ( message instanceof PerformSync ) { 
 @ @ - 256 , 4 + 274 , 45 @ @ public class BookImportActor extends ModuleActor { 
 return phoneBook ; 
 } 
 } 
 + 
 + private static abstract class ImportQueueItem { 
 + 
 + } 
 + 
 + private static class ImportPhoneQueueItem extends ImportQueueItem { 
 + 
 + private long phoneNumber ; 
 + private String name ; 
 + 
 + public ImportPhoneQueueItem ( long phoneNumber , String name ) { 
 + this . phoneNumber = phoneNumber ; 
 + this . name = name ; 
 + } 
 + 
 + public long getPhoneNumber ( ) { 
 + return phoneNumber ; 
 + } 
 + 
 + public String getName ( ) { 
 + return name ; 
 + } 
 + } 
 + 
 + private static class ImportEmailQueueItem extends ImportQueueItem { 
 + private String email ; 
 + private String name ; 
 + 
 + public ImportEmailQueueItem ( String email , String name ) { 
 + this . email = email ; 
 + this . name = name ; 
 + } 
 + 
 + public String getEmail ( ) { 
 + return email ; 
 + } 
 + 
 + public String getName ( ) { 
 + return name ; 
 + } 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / entity / BookImportStorage . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / entity / BookImportStorage . java 
 new file mode 100644 
 index 0000000 . . 093eb8f 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / contacts / entity / BookImportStorage . java 
 @ @ - 0 , 0 + 1 , 68 @ @ 
 + package im . actor . core . modules . internal . contacts . entity ; 
 + 
 + import java . io . IOException ; 
 + import java . util . HashSet ; 
 + 
 + import im . actor . runtime . bser . BserObject ; 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + 
 + public class BookImportStorage extends BserObject { 
 + 
 + private HashSet < String > importedEmails = new HashSet < String > ( ) ; 
 + private HashSet < Long > importedPhones = new HashSet < Long > ( ) ; 
 + 
 + public BookImportStorage ( ) { 
 + } 
 + 
 + public BookImportStorage ( byte [ ] data ) { 
 + super ( ) ; 
 + try { 
 + super . load ( data ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + importedEmails = new HashSet < String > ( ) ; 
 + importedPhones = new HashSet < Long > ( ) ; 
 + } 
 + } 
 + 
 + public void markAsImported ( String email ) { 
 + importedEmails . add ( email ) ; 
 + } 
 + 
 + public void markAsImported ( long phone ) { 
 + importedPhones . add ( ( Long ) phone ) ; 
 + } 
 + 
 + public boolean isImported ( String email ) { 
 + return importedEmails . contains ( email ) ; 
 + } 
 + 
 + public boolean isImported ( long phone ) { 
 + return importedPhones . contains ( phone ) ; 
 + } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + importedEmails = new HashSet < String > ( ) ; 
 + importedPhones = new HashSet < Long > ( ) ; 
 + 
 + for ( String s : values . getRepeatedString ( 1 ) ) { 
 + importedEmails . add ( s ) ; 
 + } 
 + 
 + for ( Long p : values . getRepeatedLong ( 2 ) ) { 
 + importedPhones . add ( p ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + for ( String s : importedEmails ) { 
 + writer . writeString ( 1 , s ) ; 
 + } 
 + for ( Long p : importedPhones ) { 
 + writer . writeLong ( 2 , p ) ; 
 + } 
 + } 
 + }
