BLEU SCORE: 0.09287528999566796

TEST MSG: fix ( core ) : Fixing promises array on android
GENERATED MSG: feat ( webrtc ) : Switching of media stream mode

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java < nl > index eba3bf6 . . fcd5047 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java < nl > @ @ - 4 , 6 + 4 , 7 @ @ import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > import java . util . HashMap ; < nl > import java . util . HashSet ; < nl > + import java . util . List ; < nl > < nl > import im . actor . core . api . ApiMessage ; < nl > import im . actor . core . entity . encryption . PeerSession ; < nl > @ @ - 142 , 11 + 143 , 11 @ @ public class EncryptedPeerActor extends ModuleActor { < nl > } ) < nl > . mapOptional ( encrypt ( encKeyExtended ) ) < nl > . zip ( ) < nl > - . map ( new Function < EncryptedSessionActor . EncryptedPackageRes [ ] , EncryptBoxResponse > ( ) { < nl > + . map ( new Function < List < EncryptedSessionActor . EncryptedPackageRes > , EncryptBoxResponse > ( ) { < nl > @ Override < nl > - public EncryptBoxResponse apply ( EncryptedSessionActor . EncryptedPackageRes [ ] src ) { < nl > + public EncryptBoxResponse apply ( List < EncryptedSessionActor . EncryptedPackageRes > src ) { < nl > < nl > - if ( src . length = = 0 ) { < nl > + if ( src . size ( ) = = 0 ) { < nl > throw new RuntimeException ( " No sessions available " ) ; < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / presence / PresenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / presence / PresenceActor . java < nl > index b41e2ee . . 413f500 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / presence / PresenceActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / presence / PresenceActor . java < nl > @ @ - 7 , 6 + 7 , 7 @ @ package im . actor . core . modules . presence ; < nl > import java . util . ArrayList ; < nl > import java . util . HashMap ; < nl > import java . util . HashSet ; < nl > + import java . util . List ; < nl > < nl > import im . actor . core . api . ApiGroupOutPeer ; < nl > import im . actor . core . api . ApiUserOutPeer ; < nl > @ @ - 284 , 9 + 285 , 9 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { < nl > < nl > if ( requests . size ( ) > 0 ) { < nl > isRequesting = true ; < nl > - PromisesArray . ofPromises ( requests ) . zip ( ) . then ( new Consumer < ResponseVoid [ ] > ( ) { < nl > + PromisesArray . ofPromises ( requests ) . zip ( ) . then ( new Consumer < List < ResponseVoid > > ( ) { < nl > @ Override < nl > - public void apply ( ResponseVoid [ ] responseVoids ) { < nl > + public void apply ( List < ResponseVoid > responseVoids ) { < nl > isRequesting = false ; < nl > onCheckQueue ( ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / ListFunction . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / ListFunction . java < nl > new file mode 100644 < nl > index 0000000 . . 3a9f48b < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / ListFunction . java < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + package im . actor . runtime . function ; < nl > + < nl > + import java . util . List ; < nl > + < nl > + public interface ListFunction < T , R > { < nl > + R apply ( List < T > t ) ; < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promises . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promises . java < nl > index 5f384dc . . fe34906 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promises . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promises . java < nl > @ @ - 2 , 6 + 2 , 8 @ @ package im . actor . runtime . promise ; < nl > < nl > import com . google . j2objc . annotations . ObjectiveCName ; < nl > < nl > + import java . util . List ; < nl > + < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . function . Consumer ; < nl > import im . actor . runtime . function . Function ; < nl > @ @ - 83 , 10 + 85 , 10 @ @ public class Promises { < nl > < nl > return PromisesArray . ofPromises ( t1 . cast ( ) , t2 . cast ( ) ) < nl > . zip ( ) < nl > - . map ( new Function < Object [ ] , Tuple2 < T1 , T2 > > ( ) { < nl > + . map ( new Function < List < Object > , Tuple2 < T1 , T2 > > ( ) { < nl > @ Override < nl > - public Tuple2 < T1 , T2 > apply ( Object [ ] src ) { < nl > - return new Tuple2 < > ( ( T1 ) src [ 0 ] , ( T2 ) src [ 1 ] ) ; < nl > + public Tuple2 < T1 , T2 > apply ( List < Object > src ) { < nl > + return new Tuple2 < > ( ( T1 ) src . get ( 0 ) , ( T2 ) src . get ( 1 ) ) ; < nl > } < nl > } ) ; < nl > } < nl > @ @ - 106 , 10 + 108 , 10 @ @ public class Promises { < nl > public static < T1 , T2 , T3 > Promise < Tuple3 < T1 , T2 , T3 > > tuple ( Promise < T1 > t1 , Promise < T2 > t2 , Promise < T3 > t3 ) { < nl > return PromisesArray . ofPromises ( t1 . cast ( ) , t2 . cast ( ) , t3 . cast ( ) ) < nl > . zip ( ) < nl > - . map ( new Function < Object [ ] , Tuple3 < T1 , T2 , T3 > > ( ) { < nl > + . map ( new Function < List < Object > , Tuple3 < T1 , T2 , T3 > > ( ) { < nl > @ Override < nl > - public Tuple3 < T1 , T2 , T3 > apply ( Object [ ] src ) { < nl > - return new Tuple3 < > ( ( T1 ) src [ 0 ] , ( T2 ) src [ 1 ] , ( T3 ) src [ 2 ] ) ; < nl > + public Tuple3 < T1 , T2 , T3 > apply ( List < Object > src ) { < nl > + return new Tuple3 < > ( ( T1 ) src . get ( 0 ) , ( T2 ) src . get ( 1 ) , ( T3 ) src . get ( 3 ) ) ; < nl > } < nl > } ) ; < nl > } < nl > @ @ - 135 , 10 + 137 , 10 @ @ public class Promises { < nl > < nl > return PromisesArray . ofPromises ( t1 . cast ( ) , t2 . cast ( ) , t3 . cast ( ) , t4 . cast ( ) ) < nl > . zip ( ) < nl > - . map ( new Function < Object [ ] , Tuple4 < T1 , T2 , T3 , T4 > > ( ) { < nl > + . map ( new Function < List < Object > , Tuple4 < T1 , T2 , T3 , T4 > > ( ) { < nl > @ Override < nl > - public Tuple4 < T1 , T2 , T3 , T4 > apply ( Object [ ] src ) { < nl > - return new Tuple4 < > ( ( T1 ) src [ 0 ] , ( T2 ) src [ 1 ] , ( T3 ) src [ 2 ] , ( T4 ) src [ 3 ] ) ; < nl > + public Tuple4 < T1 , T2 , T3 , T4 > apply ( List < Object > src ) { < nl > + return new Tuple4 < > ( ( T1 ) src . get ( 0 ) , ( T2 ) src . get ( 1 ) , ( T3 ) src . get ( 2 ) , ( T4 ) src . get ( 3 ) ) ; < nl > } < nl > } ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java < nl > index 65d9cf8 . . e862d50 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java < nl > @ @ - 5 , 6 + 5 , 7 @ @ import java . util . Arrays ; < nl > import java . util . Collection ; < nl > import java . util . Collections ; < nl > import java . util . Comparator ; < nl > + import java . util . List ; < nl > < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . RandomRuntime ; < nl > @ @ - 12 , 6 + 13 , 7 @ @ import im . actor . runtime . RandomRuntimeProvider ; < nl > import im . actor . runtime . function . ArrayFunction ; < nl > import im . actor . runtime . function . Consumer ; < nl > import im . actor . runtime . function . Function ; < nl > + import im . actor . runtime . function . ListFunction ; < nl > import im . actor . runtime . function . Predicate ; < nl > import im . actor . runtime . function . Predicates ; < nl > < nl > @ @ - 23 , 6 + 25 , 7 @ @ import im . actor . runtime . function . Predicates ; < nl > * / < nl > public class PromisesArray < T > { < nl > private static final RandomRuntime rundom = new RandomRuntimeProvider ( ) ; < nl > + < nl > / * * < nl > * Create PromisesArray from collection < nl > * < nl > @ @ - 310 , 13 + 313 , 13 @ @ public class PromisesArray < T > { < nl > public Promise < T > first ( ) { < nl > return first ( 1 ) < nl > . zip ( ) < nl > - . map ( new Function < T [ ] , T > ( ) { < nl > + . map ( new Function < List < T > , T > ( ) { < nl > @ Override < nl > - public T apply ( T [ ] src ) { < nl > - if ( src . length = = 0 ) { < nl > + public T apply ( List < T > src ) { < nl > + if ( src . size ( ) = = 0 ) { < nl > throw new RuntimeException ( " Array is empty ( first ) " ) ; < nl > } < nl > - return src [ 0 ] ; < nl > + return src . get ( 0 ) ; < nl > } < nl > } ) ; < nl > } < nl > @ @ - 486 , 14 + 489 , 17 @ @ public class PromisesArray < T > { < nl > * @ param < R > type of result < nl > * @ return promise < nl > * / < nl > - public < R > Promise < R > zipPromise ( final ArrayFunction < T , Promise < R > > fuc ) { < nl > + public < R > Promise < R > zipPromise ( final ListFunction < T , Promise < R > > fuc ) { < nl > return new Promise < R > ( ) { < nl > @ Override < nl > - void exec ( final PromiseResolver resolver ) { < nl > + void exec ( final PromiseResolver < R > resolver ) { < nl > promises . then ( new Consumer < Promise < T > [ ] > ( ) { < nl > @ Override < nl > public void apply ( final Promise < T > [ ] promises1 ) { < nl > - final Object [ ] res = new Object [ promises1 . length ] ; < nl > + final ArrayList < T > res = new ArrayList < T > ( ) ; < nl > + for ( int i = 0 ; i < promises1 . length ; i + + ) { < nl > + res . add ( null ) ; < nl > + } < nl > final Boolean [ ] ended = new Boolean [ promises1 . length ] ; < nl > < nl > for ( int i = 0 ; i < promises1 . length ; i + + ) { < nl > @ @ - 501 , 7 + 507 , 7 @ @ public class PromisesArray < T > { < nl > promises1 [ i ] . then ( new Consumer < T > ( ) { < nl > @ Override < nl > public void apply ( T t ) { < nl > - res [ finalI ] = t ; < nl > + res . set ( finalI , t ) ; < nl > ended [ finalI ] = true ; < nl > < nl > for ( int i1 = 0 ; i1 < promises1 . length ; i1 + + ) { < nl > @ @ - 510 , 7 + 516 , 7 @ @ public class PromisesArray < T > { < nl > } < nl > } < nl > < nl > - Promise < R > promise = fuc . apply ( ( T [ ] ) res ) ; < nl > + Promise < R > promise = fuc . apply ( res ) ; < nl > promise . then ( new Consumer < R > ( ) { < nl > @ Override < nl > public void apply ( R r ) { < nl > @ @ - 536 , 7 + 542 , 7 @ @ public class PromisesArray < T > { < nl > } < nl > < nl > if ( promises1 . length = = 0 ) { < nl > - Promise < R > promise = fuc . apply ( ( T [ ] ) new Object [ 0 ] ) ; < nl > + Promise < R > promise = fuc . apply ( res ) ; < nl > promise . then ( new Consumer < R > ( ) { < nl > @ Override < nl > public void apply ( R r ) { < nl > @ @ - 570 , 10 + 576 , 10 @ @ public class PromisesArray < T > { < nl > * < nl > * @ return promise < nl > * / < nl > - public Promise < T [ ] > zip ( ) { < nl > - return zipPromise ( new ArrayFunction < T , Promise < T [ ] > > ( ) { < nl > + public Promise < List < T > > zip ( ) { < nl > + return zipPromise ( new ListFunction < T , Promise < List < T > > > ( ) { < nl > @ Override < nl > - public Promise < T [ ] > apply ( T [ ] t ) { < nl > + public Promise < List < T > > apply ( List < T > t ) { < nl > return Promises . success ( t ) ; < nl > } < nl > } ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > index 276d705 . . bea137c 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > @ @ - 88 , 11 + 88 , 8 @ @ class CocoaWebRTCPeerConnection : NSObject , ARWebRTCPeerConnection , RTCPeerConnec < nl > } < nl > < nl > func addOwnStream ( stream : ARWebRTCMediaStream ) { < nl > - if let audio = stream as ? RTCAudioTrack { < nl > - print ( " addOwnStream " ) < nl > - let mediaStream = peerConnectionFactory . mediaStreamWithLabel ( " ARDAMSa0 " ) < nl > - mediaStream . addAudioTrack ( audio ) < nl > - peerConnection . addStream ( mediaStream ) < nl > + if let str = stream as ? MediaStream { < nl > + peerConnection . addStream ( str . stream ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > index c6215ac . . 1facad3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > @ @ - 21 , 6 + 21 , 11 @ @ import im . actor . runtime . webrtc . WebRTCMediaStream ; < nl > import im . actor . runtime . webrtc . WebRTCPeerConnection ; < nl > import im . actor . runtime . webrtc . WebRTCPeerConnectionCallback ; < nl > import im . actor . runtime . webrtc . WebRTCSessionDescription ; < nl > + import im . actor . runtime . webrtc . sdp . SDP ; < nl > + import im . actor . runtime . webrtc . sdp . SDPScheme ; < nl > + import im . actor . runtime . webrtc . sdp . entities . SDPCodec ; < nl > + import im . actor . runtime . webrtc . sdp . entities . SDPMedia ; < nl > + import im . actor . runtime . webrtc . sdp . entities . SDPMediaMode ; < nl > < nl > public class PeerConnectionActor extends ModuleActor { < nl > < nl > @ @ - 113 , 10 + 118 , 9 @ @ public class PeerConnectionActor extends ModuleActor { < nl > } ) . failure ( new Consumer < Exception > ( ) { < nl > @ Override < nl > public void apply ( Exception e ) { < nl > - e . printStackTrace ( ) ; < nl > - / / TODO : Handle It < nl > - < nl > Log . d ( TAG , " preStart : error " ) ; < nl > + e . printStackTrace ( ) ; < nl > + onHandshakeFailure ( ) ; < nl > } < nl > } ) . done ( self ( ) ) ; < nl > } < nl > @ @ - 136 , 7 + 140 , 7 @ @ public class PeerConnectionActor extends ModuleActor { < nl > < nl > Log . d ( TAG , " onOfferNeeded " ) ; < nl > isReady = false ; < nl > - peerConnection . createOffer ( ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > + peerConnection . createOffer ( ) . map ( OPTIMIZE _ SDP ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > @ Override < nl > public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > return peerConnection . setLocalDescription ( description ) ; < nl > @ @ - 155 , 7 + 159 , 7 @ @ public class PeerConnectionActor extends ModuleActor { < nl > public void apply ( Exception e ) { < nl > Log . d ( TAG , " onOfferNeeded : failure " ) ; < nl > e . printStackTrace ( ) ; < nl > - / / TODO : Handle It < nl > + onHandshakeFailure ( ) ; < nl > } < nl > } ) . done ( self ( ) ) ; < nl > } < nl > @ @ - 183 , 7 + 187 , 7 @ @ public class PeerConnectionActor extends ModuleActor { < nl > public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > return peerConnection . createAnswer ( ) ; < nl > } < nl > - } ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > + } ) . map ( OPTIMIZE _ SDP ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > @ Override < nl > public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > return peerConnection . setLocalDescription ( description ) ; < nl > @ @ - 197 , 8 + 201 , 9 @ @ public class PeerConnectionActor extends ModuleActor { < nl > } ) . failure ( new Consumer < Exception > ( ) { < nl > @ Override < nl > public void apply ( Exception e ) { < nl > + Log . d ( TAG , " onOffer : failure " ) ; < nl > e . printStackTrace ( ) ; < nl > - / / TODO : Handle It < nl > + onHandshakeFailure ( ) ; < nl > } < nl > } ) . done ( self ( ) ) ; < nl > } < nl > @ @ - 228 , 11 + 233 , 28 @ @ public class PeerConnectionActor extends ModuleActor { < nl > public void apply ( Exception e ) { < nl > Log . d ( TAG , " onAnswer : failure " ) ; < nl > e . printStackTrace ( ) ; < nl > - / / TODO : Handle It < nl > + onHandshakeFailure ( ) ; < nl > } < nl > } ) . done ( self ( ) ) ; < nl > } < nl > < nl > + private void onHandshakeFailure ( ) { < nl > + isReady = false ; < nl > + isReadyForCandidates = false ; < nl > + state = State . CLOSED ; < nl > + if ( peerConnection ! = null ) { < nl > + peerConnection . close ( ) ; < nl > + peerConnection = null ; < nl > + } < nl > + if ( stream ! = null ) { < nl > + stream . close ( ) ; < nl > + stream = null ; < nl > + } < nl > + self ( ) . send ( PoisonPill . INSTANCE ) ; < nl > + < nl > + / / TODO : Notify Root < nl > + } < nl > + < nl > private void onHandShakeCompleted ( ) { < nl > isReady = true ; < nl > isReadyForCandidates = true ; < nl > @ @ - 252 , 6 + 274 , 39 @ @ public class PeerConnectionActor extends ModuleActor { < nl > self ( ) . send ( PoisonPill . INSTANCE ) ; < nl > } < nl > < nl > + / / < nl > + / / Configuration < nl > + / / < nl > + < nl > + private static Function < WebRTCSessionDescription , WebRTCSessionDescription > OPTIMIZE _ SDP < nl > + = new Function < WebRTCSessionDescription , WebRTCSessionDescription > ( ) { < nl > + @ Override < nl > + public WebRTCSessionDescription apply ( WebRTCSessionDescription description ) { < nl > + SDPScheme sdpScheme = SDP . parse ( description . getSdp ( ) ) ; < nl > + < nl > + for ( SDPMedia m : sdpScheme . getMediaLevel ( ) ) { < nl > + < nl > + / / Disabling media streams < nl > + m . setMode ( SDPMediaMode . INACTIVE ) ; < nl > + < nl > + / / Optimizing opus < nl > + if ( " audio " . equals ( m . getType ( ) ) ) { < nl > + for ( SDPCodec codec : m . getCodecs ( ) ) { < nl > + if ( " opus " . equals ( codec . getName ( ) ) ) { < nl > + < nl > + } < nl > + } < nl > + } < nl > + } < nl > + < nl > + return new WebRTCSessionDescription ( description . getType ( ) , sdpScheme . toSDP ( ) ) ; < nl > + } < nl > + } ; < nl > + < nl > + / / < nl > + / / Messages < nl > + / / < nl > + < nl > @ Override < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof OnOffer ) { < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaWebRTCProxyProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaWebRTCProxyProvider . java < nl > index c4c00e3 . . c73258b 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaWebRTCProxyProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaWebRTCProxyProvider . java < nl > @ @ - 7 , 7 + 7 , 7 @ @ import org . jetbrains . annotations . NotNull ; < nl > import im . actor . runtime . WebRTCRuntime ; < nl > import im . actor . runtime . promise . Promise ; < nl > import im . actor . runtime . promise . Promises ; < nl > - import im . actor . runtime . webrtc . WebRTCLocalStream ; < nl > + import im . actor . runtime . webrtc . WebRTCMediaStream ; < nl > import im . actor . runtime . webrtc . WebRTCPeerConnection ; < nl > < nl > public class CocoaWebRTCProxyProvider implements WebRTCRuntime { < nl > @ @ - 30 , 7 + 30 , 7 @ @ public class CocoaWebRTCProxyProvider implements WebRTCRuntime { < nl > < nl > @ NotNull < nl > @ Override < nl > - public Promise < WebRTCLocalStream > getUserAudio ( ) { < nl > + public Promise < WebRTCMediaStream > getUserAudio ( ) { < nl > if ( rtcRuntime = = null ) { < nl > return Promises . failure ( new RuntimeException ( " WebRTC Runtime not set " ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / sdp / entities / SDPMedia . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / sdp / entities / SDPMedia . java < nl > index 0eac2ec . . b3786f5 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / sdp / entities / SDPMedia . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / sdp / entities / SDPMedia . java < nl > @ @ - 46 , 6 + 46 , 10 @ @ public class SDPMedia { < nl > return mode ; < nl > } < nl > < nl > + public void setMode ( SDPMediaMode mode ) { < nl > + this . mode = mode ; < nl > + } < nl > + < nl > public String toSDP ( ) { < nl > String res = " m = " + type + " " + port + " " + protocol ; < nl > for ( SDPCodec codec : codecs ) {

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java 
 index eba3bf6 . . fcd5047 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java 
 @ @ - 4 , 6 + 4 , 7 @ @ import java . io . IOException ; 
 import java . util . ArrayList ; 
 import java . util . HashMap ; 
 import java . util . HashSet ; 
 + import java . util . List ; 
 
 import im . actor . core . api . ApiMessage ; 
 import im . actor . core . entity . encryption . PeerSession ; 
 @ @ - 142 , 11 + 143 , 11 @ @ public class EncryptedPeerActor extends ModuleActor { 
 } ) 
 . mapOptional ( encrypt ( encKeyExtended ) ) 
 . zip ( ) 
 - . map ( new Function < EncryptedSessionActor . EncryptedPackageRes [ ] , EncryptBoxResponse > ( ) { 
 + . map ( new Function < List < EncryptedSessionActor . EncryptedPackageRes > , EncryptBoxResponse > ( ) { 
 @ Override 
 - public EncryptBoxResponse apply ( EncryptedSessionActor . EncryptedPackageRes [ ] src ) { 
 + public EncryptBoxResponse apply ( List < EncryptedSessionActor . EncryptedPackageRes > src ) { 
 
 - if ( src . length = = 0 ) { 
 + if ( src . size ( ) = = 0 ) { 
 throw new RuntimeException ( " No sessions available " ) ; 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / presence / PresenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / presence / PresenceActor . java 
 index b41e2ee . . 413f500 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / presence / PresenceActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / presence / PresenceActor . java 
 @ @ - 7 , 6 + 7 , 7 @ @ package im . actor . core . modules . presence ; 
 import java . util . ArrayList ; 
 import java . util . HashMap ; 
 import java . util . HashSet ; 
 + import java . util . List ; 
 
 import im . actor . core . api . ApiGroupOutPeer ; 
 import im . actor . core . api . ApiUserOutPeer ; 
 @ @ - 284 , 9 + 285 , 9 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { 
 
 if ( requests . size ( ) > 0 ) { 
 isRequesting = true ; 
 - PromisesArray . ofPromises ( requests ) . zip ( ) . then ( new Consumer < ResponseVoid [ ] > ( ) { 
 + PromisesArray . ofPromises ( requests ) . zip ( ) . then ( new Consumer < List < ResponseVoid > > ( ) { 
 @ Override 
 - public void apply ( ResponseVoid [ ] responseVoids ) { 
 + public void apply ( List < ResponseVoid > responseVoids ) { 
 isRequesting = false ; 
 onCheckQueue ( ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / ListFunction . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / ListFunction . java 
 new file mode 100644 
 index 0000000 . . 3a9f48b 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / ListFunction . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package im . actor . runtime . function ; 
 + 
 + import java . util . List ; 
 + 
 + public interface ListFunction < T , R > { 
 + R apply ( List < T > t ) ; 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promises . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promises . java 
 index 5f384dc . . fe34906 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promises . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promises . java 
 @ @ - 2 , 6 + 2 , 8 @ @ package im . actor . runtime . promise ; 
 
 import com . google . j2objc . annotations . ObjectiveCName ; 
 
 + import java . util . List ; 
 + 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . function . Consumer ; 
 import im . actor . runtime . function . Function ; 
 @ @ - 83 , 10 + 85 , 10 @ @ public class Promises { 
 
 return PromisesArray . ofPromises ( t1 . cast ( ) , t2 . cast ( ) ) 
 . zip ( ) 
 - . map ( new Function < Object [ ] , Tuple2 < T1 , T2 > > ( ) { 
 + . map ( new Function < List < Object > , Tuple2 < T1 , T2 > > ( ) { 
 @ Override 
 - public Tuple2 < T1 , T2 > apply ( Object [ ] src ) { 
 - return new Tuple2 < > ( ( T1 ) src [ 0 ] , ( T2 ) src [ 1 ] ) ; 
 + public Tuple2 < T1 , T2 > apply ( List < Object > src ) { 
 + return new Tuple2 < > ( ( T1 ) src . get ( 0 ) , ( T2 ) src . get ( 1 ) ) ; 
 } 
 } ) ; 
 } 
 @ @ - 106 , 10 + 108 , 10 @ @ public class Promises { 
 public static < T1 , T2 , T3 > Promise < Tuple3 < T1 , T2 , T3 > > tuple ( Promise < T1 > t1 , Promise < T2 > t2 , Promise < T3 > t3 ) { 
 return PromisesArray . ofPromises ( t1 . cast ( ) , t2 . cast ( ) , t3 . cast ( ) ) 
 . zip ( ) 
 - . map ( new Function < Object [ ] , Tuple3 < T1 , T2 , T3 > > ( ) { 
 + . map ( new Function < List < Object > , Tuple3 < T1 , T2 , T3 > > ( ) { 
 @ Override 
 - public Tuple3 < T1 , T2 , T3 > apply ( Object [ ] src ) { 
 - return new Tuple3 < > ( ( T1 ) src [ 0 ] , ( T2 ) src [ 1 ] , ( T3 ) src [ 2 ] ) ; 
 + public Tuple3 < T1 , T2 , T3 > apply ( List < Object > src ) { 
 + return new Tuple3 < > ( ( T1 ) src . get ( 0 ) , ( T2 ) src . get ( 1 ) , ( T3 ) src . get ( 3 ) ) ; 
 } 
 } ) ; 
 } 
 @ @ - 135 , 10 + 137 , 10 @ @ public class Promises { 
 
 return PromisesArray . ofPromises ( t1 . cast ( ) , t2 . cast ( ) , t3 . cast ( ) , t4 . cast ( ) ) 
 . zip ( ) 
 - . map ( new Function < Object [ ] , Tuple4 < T1 , T2 , T3 , T4 > > ( ) { 
 + . map ( new Function < List < Object > , Tuple4 < T1 , T2 , T3 , T4 > > ( ) { 
 @ Override 
 - public Tuple4 < T1 , T2 , T3 , T4 > apply ( Object [ ] src ) { 
 - return new Tuple4 < > ( ( T1 ) src [ 0 ] , ( T2 ) src [ 1 ] , ( T3 ) src [ 2 ] , ( T4 ) src [ 3 ] ) ; 
 + public Tuple4 < T1 , T2 , T3 , T4 > apply ( List < Object > src ) { 
 + return new Tuple4 < > ( ( T1 ) src . get ( 0 ) , ( T2 ) src . get ( 1 ) , ( T3 ) src . get ( 2 ) , ( T4 ) src . get ( 3 ) ) ; 
 } 
 } ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java 
 index 65d9cf8 . . e862d50 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java 
 @ @ - 5 , 6 + 5 , 7 @ @ import java . util . Arrays ; 
 import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . Comparator ; 
 + import java . util . List ; 
 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . RandomRuntime ; 
 @ @ - 12 , 6 + 13 , 7 @ @ import im . actor . runtime . RandomRuntimeProvider ; 
 import im . actor . runtime . function . ArrayFunction ; 
 import im . actor . runtime . function . Consumer ; 
 import im . actor . runtime . function . Function ; 
 + import im . actor . runtime . function . ListFunction ; 
 import im . actor . runtime . function . Predicate ; 
 import im . actor . runtime . function . Predicates ; 
 
 @ @ - 23 , 6 + 25 , 7 @ @ import im . actor . runtime . function . Predicates ; 
 * / 
 public class PromisesArray < T > { 
 private static final RandomRuntime rundom = new RandomRuntimeProvider ( ) ; 
 + 
 / * * 
 * Create PromisesArray from collection 
 * 
 @ @ - 310 , 13 + 313 , 13 @ @ public class PromisesArray < T > { 
 public Promise < T > first ( ) { 
 return first ( 1 ) 
 . zip ( ) 
 - . map ( new Function < T [ ] , T > ( ) { 
 + . map ( new Function < List < T > , T > ( ) { 
 @ Override 
 - public T apply ( T [ ] src ) { 
 - if ( src . length = = 0 ) { 
 + public T apply ( List < T > src ) { 
 + if ( src . size ( ) = = 0 ) { 
 throw new RuntimeException ( " Array is empty ( first ) " ) ; 
 } 
 - return src [ 0 ] ; 
 + return src . get ( 0 ) ; 
 } 
 } ) ; 
 } 
 @ @ - 486 , 14 + 489 , 17 @ @ public class PromisesArray < T > { 
 * @ param < R > type of result 
 * @ return promise 
 * / 
 - public < R > Promise < R > zipPromise ( final ArrayFunction < T , Promise < R > > fuc ) { 
 + public < R > Promise < R > zipPromise ( final ListFunction < T , Promise < R > > fuc ) { 
 return new Promise < R > ( ) { 
 @ Override 
 - void exec ( final PromiseResolver resolver ) { 
 + void exec ( final PromiseResolver < R > resolver ) { 
 promises . then ( new Consumer < Promise < T > [ ] > ( ) { 
 @ Override 
 public void apply ( final Promise < T > [ ] promises1 ) { 
 - final Object [ ] res = new Object [ promises1 . length ] ; 
 + final ArrayList < T > res = new ArrayList < T > ( ) ; 
 + for ( int i = 0 ; i < promises1 . length ; i + + ) { 
 + res . add ( null ) ; 
 + } 
 final Boolean [ ] ended = new Boolean [ promises1 . length ] ; 
 
 for ( int i = 0 ; i < promises1 . length ; i + + ) { 
 @ @ - 501 , 7 + 507 , 7 @ @ public class PromisesArray < T > { 
 promises1 [ i ] . then ( new Consumer < T > ( ) { 
 @ Override 
 public void apply ( T t ) { 
 - res [ finalI ] = t ; 
 + res . set ( finalI , t ) ; 
 ended [ finalI ] = true ; 
 
 for ( int i1 = 0 ; i1 < promises1 . length ; i1 + + ) { 
 @ @ - 510 , 7 + 516 , 7 @ @ public class PromisesArray < T > { 
 } 
 } 
 
 - Promise < R > promise = fuc . apply ( ( T [ ] ) res ) ; 
 + Promise < R > promise = fuc . apply ( res ) ; 
 promise . then ( new Consumer < R > ( ) { 
 @ Override 
 public void apply ( R r ) { 
 @ @ - 536 , 7 + 542 , 7 @ @ public class PromisesArray < T > { 
 } 
 
 if ( promises1 . length = = 0 ) { 
 - Promise < R > promise = fuc . apply ( ( T [ ] ) new Object [ 0 ] ) ; 
 + Promise < R > promise = fuc . apply ( res ) ; 
 promise . then ( new Consumer < R > ( ) { 
 @ Override 
 public void apply ( R r ) { 
 @ @ - 570 , 10 + 576 , 10 @ @ public class PromisesArray < T > { 
 * 
 * @ return promise 
 * / 
 - public Promise < T [ ] > zip ( ) { 
 - return zipPromise ( new ArrayFunction < T , Promise < T [ ] > > ( ) { 
 + public Promise < List < T > > zip ( ) { 
 + return zipPromise ( new ListFunction < T , Promise < List < T > > > ( ) { 
 @ Override 
 - public Promise < T [ ] > apply ( T [ ] t ) { 
 + public Promise < List < T > > apply ( List < T > t ) { 
 return Promises . success ( t ) ; 
 } 
 } ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 index 276d705 . . bea137c 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 @ @ - 88 , 11 + 88 , 8 @ @ class CocoaWebRTCPeerConnection : NSObject , ARWebRTCPeerConnection , RTCPeerConnec 
 } 
 
 func addOwnStream ( stream : ARWebRTCMediaStream ) { 
 - if let audio = stream as ? RTCAudioTrack { 
 - print ( " addOwnStream " ) 
 - let mediaStream = peerConnectionFactory . mediaStreamWithLabel ( " ARDAMSa0 " ) 
 - mediaStream . addAudioTrack ( audio ) 
 - peerConnection . addStream ( mediaStream ) 
 + if let str = stream as ? MediaStream { 
 + peerConnection . addStream ( str . stream ) 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 index c6215ac . . 1facad3 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 @ @ - 21 , 6 + 21 , 11 @ @ import im . actor . runtime . webrtc . WebRTCMediaStream ; 
 import im . actor . runtime . webrtc . WebRTCPeerConnection ; 
 import im . actor . runtime . webrtc . WebRTCPeerConnectionCallback ; 
 import im . actor . runtime . webrtc . WebRTCSessionDescription ; 
 + import im . actor . runtime . webrtc . sdp . SDP ; 
 + import im . actor . runtime . webrtc . sdp . SDPScheme ; 
 + import im . actor . runtime . webrtc . sdp . entities . SDPCodec ; 
 + import im . actor . runtime . webrtc . sdp . entities . SDPMedia ; 
 + import im . actor . runtime . webrtc . sdp . entities . SDPMediaMode ; 
 
 public class PeerConnectionActor extends ModuleActor { 
 
 @ @ - 113 , 10 + 118 , 9 @ @ public class PeerConnectionActor extends ModuleActor { 
 } ) . failure ( new Consumer < Exception > ( ) { 
 @ Override 
 public void apply ( Exception e ) { 
 - e . printStackTrace ( ) ; 
 - / / TODO : Handle It 
 - 
 Log . d ( TAG , " preStart : error " ) ; 
 + e . printStackTrace ( ) ; 
 + onHandshakeFailure ( ) ; 
 } 
 } ) . done ( self ( ) ) ; 
 } 
 @ @ - 136 , 7 + 140 , 7 @ @ public class PeerConnectionActor extends ModuleActor { 
 
 Log . d ( TAG , " onOfferNeeded " ) ; 
 isReady = false ; 
 - peerConnection . createOffer ( ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 + peerConnection . createOffer ( ) . map ( OPTIMIZE _ SDP ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 @ Override 
 public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 return peerConnection . setLocalDescription ( description ) ; 
 @ @ - 155 , 7 + 159 , 7 @ @ public class PeerConnectionActor extends ModuleActor { 
 public void apply ( Exception e ) { 
 Log . d ( TAG , " onOfferNeeded : failure " ) ; 
 e . printStackTrace ( ) ; 
 - / / TODO : Handle It 
 + onHandshakeFailure ( ) ; 
 } 
 } ) . done ( self ( ) ) ; 
 } 
 @ @ - 183 , 7 + 187 , 7 @ @ public class PeerConnectionActor extends ModuleActor { 
 public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 return peerConnection . createAnswer ( ) ; 
 } 
 - } ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 + } ) . map ( OPTIMIZE _ SDP ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 @ Override 
 public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 return peerConnection . setLocalDescription ( description ) ; 
 @ @ - 197 , 8 + 201 , 9 @ @ public class PeerConnectionActor extends ModuleActor { 
 } ) . failure ( new Consumer < Exception > ( ) { 
 @ Override 
 public void apply ( Exception e ) { 
 + Log . d ( TAG , " onOffer : failure " ) ; 
 e . printStackTrace ( ) ; 
 - / / TODO : Handle It 
 + onHandshakeFailure ( ) ; 
 } 
 } ) . done ( self ( ) ) ; 
 } 
 @ @ - 228 , 11 + 233 , 28 @ @ public class PeerConnectionActor extends ModuleActor { 
 public void apply ( Exception e ) { 
 Log . d ( TAG , " onAnswer : failure " ) ; 
 e . printStackTrace ( ) ; 
 - / / TODO : Handle It 
 + onHandshakeFailure ( ) ; 
 } 
 } ) . done ( self ( ) ) ; 
 } 
 
 + private void onHandshakeFailure ( ) { 
 + isReady = false ; 
 + isReadyForCandidates = false ; 
 + state = State . CLOSED ; 
 + if ( peerConnection ! = null ) { 
 + peerConnection . close ( ) ; 
 + peerConnection = null ; 
 + } 
 + if ( stream ! = null ) { 
 + stream . close ( ) ; 
 + stream = null ; 
 + } 
 + self ( ) . send ( PoisonPill . INSTANCE ) ; 
 + 
 + / / TODO : Notify Root 
 + } 
 + 
 private void onHandShakeCompleted ( ) { 
 isReady = true ; 
 isReadyForCandidates = true ; 
 @ @ - 252 , 6 + 274 , 39 @ @ public class PeerConnectionActor extends ModuleActor { 
 self ( ) . send ( PoisonPill . INSTANCE ) ; 
 } 
 
 + / / 
 + / / Configuration 
 + / / 
 + 
 + private static Function < WebRTCSessionDescription , WebRTCSessionDescription > OPTIMIZE _ SDP 
 + = new Function < WebRTCSessionDescription , WebRTCSessionDescription > ( ) { 
 + @ Override 
 + public WebRTCSessionDescription apply ( WebRTCSessionDescription description ) { 
 + SDPScheme sdpScheme = SDP . parse ( description . getSdp ( ) ) ; 
 + 
 + for ( SDPMedia m : sdpScheme . getMediaLevel ( ) ) { 
 + 
 + / / Disabling media streams 
 + m . setMode ( SDPMediaMode . INACTIVE ) ; 
 + 
 + / / Optimizing opus 
 + if ( " audio " . equals ( m . getType ( ) ) ) { 
 + for ( SDPCodec codec : m . getCodecs ( ) ) { 
 + if ( " opus " . equals ( codec . getName ( ) ) ) { 
 + 
 + } 
 + } 
 + } 
 + } 
 + 
 + return new WebRTCSessionDescription ( description . getType ( ) , sdpScheme . toSDP ( ) ) ; 
 + } 
 + } ; 
 + 
 + / / 
 + / / Messages 
 + / / 
 + 
 @ Override 
 public void onReceive ( Object message ) { 
 if ( message instanceof OnOffer ) { 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaWebRTCProxyProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaWebRTCProxyProvider . java 
 index c4c00e3 . . c73258b 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaWebRTCProxyProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaWebRTCProxyProvider . java 
 @ @ - 7 , 7 + 7 , 7 @ @ import org . jetbrains . annotations . NotNull ; 
 import im . actor . runtime . WebRTCRuntime ; 
 import im . actor . runtime . promise . Promise ; 
 import im . actor . runtime . promise . Promises ; 
 - import im . actor . runtime . webrtc . WebRTCLocalStream ; 
 + import im . actor . runtime . webrtc . WebRTCMediaStream ; 
 import im . actor . runtime . webrtc . WebRTCPeerConnection ; 
 
 public class CocoaWebRTCProxyProvider implements WebRTCRuntime { 
 @ @ - 30 , 7 + 30 , 7 @ @ public class CocoaWebRTCProxyProvider implements WebRTCRuntime { 
 
 @ NotNull 
 @ Override 
 - public Promise < WebRTCLocalStream > getUserAudio ( ) { 
 + public Promise < WebRTCMediaStream > getUserAudio ( ) { 
 if ( rtcRuntime = = null ) { 
 return Promises . failure ( new RuntimeException ( " WebRTC Runtime not set " ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / sdp / entities / SDPMedia . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / sdp / entities / SDPMedia . java 
 index 0eac2ec . . b3786f5 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / sdp / entities / SDPMedia . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / sdp / entities / SDPMedia . java 
 @ @ - 46 , 6 + 46 , 10 @ @ public class SDPMedia { 
 return mode ; 
 } 
 
 + public void setMode ( SDPMediaMode mode ) { 
 + this . mode = mode ; 
 + } 
 + 
 public String toSDP ( ) { 
 String res = " m = " + type + " " + port + " " + protocol ; 
 for ( SDPCodec codec : codecs ) {
