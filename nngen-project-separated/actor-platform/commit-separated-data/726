BLEU SCORE: 0.21386638885976572

TEST MSG: feat ( iOS ) : Implemented Asynchronous text rendering
GENERATED MSG: fix ( iOS ) : Fixing shrinked messages , restored bubble layouts

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > index 4c5960f . . 7750c32 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > @ @ - 287 , 7 + 287 , 11 @ @ public extension ARMarkdownParser { < nl > < nl > let doc = self . processDocumentWithNSString ( text ) < nl > if doc . isTrivial ( ) { < nl > - return ARMDFormattedText ( attributedText : NSAttributedString ( string : text ) , isTrivial : true , code : [ ] ) < nl > + let nAttrText = NSMutableAttributedString ( string : text ) < nl > + let range = NSRange ( location : 0 , length : nAttrText . length ) < nl > + nAttrText . yy _ setColor ( textColor , range : range ) < nl > + nAttrText . yy _ setFont ( UIFont . textFontOfSize ( fontSize ) , range : range ) < nl > + return ARMDFormattedText ( attributedText : nAttrText , isTrivial : true , code : [ ] ) < nl > } < nl > < nl > var sources = [ String ] ( ) < nl > @ @ - 316 , 13 + 320 , 18 @ @ public extension ARMarkdownParser { < nl > } < nl > } < nl > < nl > - nAttrText . appendColor ( textColor ) < nl > + let range = NSRange ( location : 0 , length : nAttrText . length ) < nl > + nAttrText . yy _ setColor ( textColor , range : range ) < nl > + nAttrText . yy _ setFont ( UIFont . textFontOfSize ( fontSize ) , range : range ) < nl > < nl > return ARMDFormattedText ( attributedText : nAttrText , isTrivial : false , code : sources ) < nl > } < nl > < nl > private func buildText ( text : ARMDText , fontSize : CGFloat ) - > NSAttributedString { < nl > if let raw = text as ? ARMDRawText { < nl > + / / let res = NSMutableAttributedString ( string : raw . getRawText ( ) ) < nl > + / / res . yy _ setFont ( UIFont . textFontOfSize ( fontSize ) , range : NSRange ( location : 0 , length : raw . getRawText ( ) . length ) ) < nl > + / / return res < nl > return NSAttributedString ( string : raw . getRawText ( ) , font : UIFont . textFontOfSize ( fontSize ) ) < nl > } else if let span = text as ? ARMDSpan { < nl > let res = NSMutableAttributedString ( ) < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleTextCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleTextCell . swift < nl > index a3596c3 . . 4aa5ff2 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleTextCell . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleTextCell . swift < nl > @ @ - 4 , 11 + 4 , 10 @ @ < nl > < nl > import Foundation < nl > import UIKit < nl > - import TTTAttributedLabel < nl > import YYText < nl > import YYImage < nl > < nl > - public class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { < nl > + public class AABubbleTextCell : AABubbleCell { < nl > < nl > / / TODO : Better max width calculations < nl > < nl > @ @ - 24 , 12 + 23 , 13 @ @ public class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { < nl > static let bubbleFontUnsupported = fontItalic < nl > static let senderHeight = CGFloat ( 20 ) < nl > < nl > - let messageText = TTTAttributedLabel ( frame : CGRectZero ) < nl > + let messageText = YYLabel ( ) < nl > + let senderNameLabel = YYLabel ( ) ; < nl > let statusView = UIImageView ( ) ; < nl > - let senderNameLabel = AttributedLabel ( ) ; < nl > - var needRelayout = true < nl > - var isClanchTop : Bool = false < nl > - var isClanchBottom : Bool = false < nl > + < nl > + private var needRelayout = true < nl > + private var isClanchTop : Bool = false < nl > + private var isClanchBottom : Bool = false < nl > < nl > private let dateText = AttributedLabel ( ) < nl > private var messageState = ACMessageState . UNKNOWN ( ) . ordinal ( ) < nl > @ @ - 38 , 19 + 38 , 11 @ @ public class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { < nl > public init ( frame : CGRect ) { < nl > super . init ( frame : frame , isFullSize : false ) < nl > < nl > - senderNameLabel . font = AABubbleTextCell . senderFont < nl > - < nl > - messageText . font = AABubbleTextCell . bubbleFont < nl > - messageText . lineBreakMode = . ByWordWrapping < nl > - messageText . numberOfLines = 0 < nl > - messageText . userInteractionEnabled = true < nl > - messageText . delegate = self < nl > - messageText . linkAttributes = [ kCTForegroundColorAttributeName : appStyle . chatUrlColor , < nl > - kCTUnderlineStyleAttributeName : NSNumber ( bool : false ) ] < nl > - messageText . activeLinkAttributes = [ kCTForegroundColorAttributeName : appStyle . chatUrlColor , < nl > - kCTUnderlineStyleAttributeName : NSNumber ( bool : false ) ] < nl > - messageText . verticalAlignment = TTTAttributedLabelVerticalAlignment . Center < nl > + messageText . displaysAsynchronously = true < nl > + messageText . ignoreCommonProperties = true < nl > < nl > + senderNameLabel . displaysAsynchronously = true < nl > + senderNameLabel . ignoreCommonProperties = true < nl > < nl > dateText . font = AABubbleTextCell . dateFont < nl > dateText . lineBreakMode = . ByClipping < nl > @ @ - 63 , 6 + 55 , 7 @ @ public class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { < nl > contentView . addSubview ( messageText ) < nl > contentView . addSubview ( dateText ) < nl > contentView . addSubview ( statusView ) < nl > + contentView . addSubview ( senderNameLabel ) < nl > } < nl > < nl > public required init ( coder aDecoder : NSCoder ) { < nl > @ @ - 83 , 39 + 76 , 18 @ @ public class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { < nl > / / When not reusing force to relayout view < nl > needRelayout = true < nl > < nl > - / / Setting text ' s font size and color < nl > - messageText . textColor = self . cellLayout . textColor < nl > + / / Text Layout < nl > + messageText . textLayout = self . cellLayout . textLayout < nl > < nl > - if self . cellLayout . text ! = nil { < nl > - < nl > - / / Setting text < nl > - messageText . text = self . cellLayout . text < nl > - } else { < nl > - < nl > - / / Setting attributed text < nl > - messageText . setText ( self . cellLayout . attrText ) < nl > - } < nl > + self . cellLayout . textLayout < nl > < nl > / / Setting sender name if needed < nl > if isGroup & & ! isOut { < nl > - < nl > - let user = Actor . getUserWithUid ( message . senderId ) < nl > - < nl > - let colors = ActorSDK . sharedActor ( ) . style . nameColors < nl > - < nl > - if user . isBot ( ) & & user . getNameModel ( ) . get ( ) = = " Bot " { < nl > - let group = Actor . getGroupWithGid ( self . peer . peerId ) < nl > - senderNameLabel . text = group . getNameModel ( ) . get ( ) < nl > - senderNameLabel . textColor = colors [ Int ( abs ( group . getId ( ) ) ) % colors . count ] < nl > - < nl > - } else { < nl > - senderNameLabel . text = user . getNameModel ( ) . get ( ) < nl > - senderNameLabel . textColor = colors [ Int ( abs ( user . getId ( ) ) ) % colors . count ] < nl > - } < nl > - < nl > - contentView . addSubview ( senderNameLabel ) < nl > + senderNameLabel . hidden = false < nl > + senderNameLabel . textLayout = self . cellLayout . senderLayout < nl > } else { < nl > - senderNameLabel . removeFromSuperview ( ) < nl > + senderNameLabel . hidden = true < nl > + senderNameLabel . textLayout = nil < nl > } < nl > } < nl > < nl > @ @ - 205 , 71 + 177 , 64 @ @ public class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { < nl > < nl > / / Url open handling < nl > < nl > - public func attributedLabel ( label : TTTAttributedLabel ! , didLongPressLinkWithURL url : NSURL ! , atPoint point : CGPoint ) { < nl > - let actionSheet : UIAlertController = UIAlertController ( title : nil , message : url . absoluteString , preferredStyle : . ActionSheet ) < nl > - actionSheet . addAction ( UIAlertAction ( title : AALocalized ( " ActionOpenLink " ) , style : . Default , handler : { action in < nl > - self . openUrl ( url ) < nl > - } ) ) < nl > - actionSheet . addAction ( UIAlertAction ( title : AALocalized ( " ActionCopyLink " ) , style : . Default , handler : { action in < nl > - UIPasteboard . generalPasteboard ( ) . string = url . absoluteString < nl > - self . controller . alertUser ( " AlertLinkCopied " ) < nl > - } ) ) < nl > - actionSheet . addAction ( UIAlertAction ( title : AALocalized ( " ActionCancel " ) , style : . Cancel , handler : nil ) ) < nl > - self . controller . presentViewController ( actionSheet , animated : true , completion : nil ) < nl > - } < nl > - < nl > - public func attributedLabel ( label : TTTAttributedLabel ! , didSelectLinkWithURL url : NSURL ! ) { < nl > - openUrl ( url ) < nl > - } < nl > - < nl > - public func openUrl ( url : NSURL ) { < nl > - if url . scheme = = " source " { < nl > - let path = url . path ! < nl > - let index = Int ( path . substringFromIndex ( path . startIndex . advancedBy ( 1 ) ) ) ! < nl > - let code = self . cellLayout . sources [ index ] < nl > - self . controller . navigateNext ( AACodePreviewController ( code : code ) , removeCurrent : false ) < nl > - } else { < nl > - ActorSDK . sharedActor ( ) . openUrl ( url . absoluteString ) < nl > - } < nl > - } < nl > + / / public func attributedLabel ( label : TTTAttributedLabel ! , didLongPressLinkWithURL url : NSURL ! , atPoint point : CGPoint ) { < nl > + / / let actionSheet : UIAlertController = UIAlertController ( title : nil , message : url . absoluteString , preferredStyle : . ActionSheet ) < nl > + / / actionSheet . addAction ( UIAlertAction ( title : AALocalized ( " ActionOpenLink " ) , style : . Default , handler : { action in < nl > + / / self . openUrl ( url ) < nl > + / / } ) ) < nl > + / / actionSheet . addAction ( UIAlertAction ( title : AALocalized ( " ActionCopyLink " ) , style : . Default , handler : { action in < nl > + / / UIPasteboard . generalPasteboard ( ) . string = url . absoluteString < nl > + / / self . controller . alertUser ( " AlertLinkCopied " ) < nl > + / / } ) ) < nl > + / / actionSheet . addAction ( UIAlertAction ( title : AALocalized ( " ActionCancel " ) , style : . Cancel , handler : nil ) ) < nl > + / / self . controller . presentViewController ( actionSheet , animated : true , completion : nil ) < nl > + / / } < nl > + / / < nl > + / / public func attributedLabel ( label : TTTAttributedLabel ! , didSelectLinkWithURL url : NSURL ! ) { < nl > + / / openUrl ( url ) < nl > + / / } < nl > + / / < nl > + / / public func openUrl ( url : NSURL ) { < nl > + / / if url . scheme = = " source " { < nl > + / / let path = url . path ! < nl > + / / let index = Int ( path . substringFromIndex ( path . startIndex . advancedBy ( 1 ) ) ) ! < nl > + / / let code = self . cellLayout . sources [ index ] < nl > + / / self . controller . navigateNext ( AACodePreviewController ( code : code ) , removeCurrent : false ) < nl > + / / } else { < nl > + / / ActorSDK . sharedActor ( ) . openUrl ( url . absoluteString ) < nl > + / / } < nl > + / / } < nl > < nl > / / Layouting < nl > < nl > public override func layoutContent ( maxWidth : CGFloat , offsetX : CGFloat ) { < nl > + < nl > / / Convenience < nl > let insets = fullContentInsets < nl > let contentWidth = self . contentView . frame . width < nl > + let textSize = self . cellLayout . textLayout . textBoundingSize < nl > + let bubbleWidth = round ( self . cellLayout . bubbleSize . width ) < nl > + let bubbleHeight = round ( self . cellLayout . bubbleSize . height ) < nl > < nl > - / / Measure Text < nl > - let senderNameBounds = self . senderNameLabel . sizeThatFits ( CGSize ( width : CGFloat . max , height : CGFloat . max ) ) < nl > - < nl > - self . messageText . frame = CGRectMake ( 0 , 0 , self . cellLayout . textSize . width , self . cellLayout . textSize . height ) < nl > - < nl > - var textWidth = round ( self . cellLayout . textSizeWithPadding . width ) < nl > - let textHeight = round ( self . cellLayout . textSizeWithPadding . height ) < nl > - < nl > - if textWidth < senderNameBounds . width { < nl > - textWidth = senderNameBounds . width + 5 < nl > - } < nl > - < nl > + self . messageText . frame = CGRectMake ( 0 , 0 , textSize . width , textSize . height ) < nl > + < nl > / / Layout elements < nl > - let topPadding : CGFloat = self . cellLayout . attrText ! = nil ? - 0 . 5 : 0 < nl > if ( self . isOut ) { < nl > - self . messageText . frame . origin = CGPoint ( x : contentWidth - textWidth - insets . right , y : insets . top + topPadding ) < nl > - self . dateText . frame = CGRectMake ( contentWidth - insets . right - 70 , textHeight + insets . top - 20 , 46 , 26 ) < nl > - self . statusView . frame = CGRectMake ( contentWidth - insets . right - 24 , textHeight + insets . top - 20 , 20 , 26 ) < nl > + self . messageText . frame . origin = CGPoint ( x : contentWidth - bubbleWidth - insets . right , y : insets . top / * + topPadding * / ) < nl > + self . dateText . frame = CGRectMake ( contentWidth - insets . right - 70 , bubbleHeight + insets . top - 20 , 46 , 26 ) < nl > + self . statusView . frame = CGRectMake ( contentWidth - insets . right - 24 , bubbleHeight + insets . top - 20 , 20 , 26 ) < nl > self . statusView . hidden = false < nl > } else { < nl > - self . messageText . frame . origin = CGPoint ( x : insets . left , y : insets . top + topPadding ) < nl > - self . dateText . frame = CGRectMake ( insets . left + textWidth - 47 , textHeight + insets . top - 20 , 46 , 26 ) < nl > + self . messageText . frame . origin = CGPoint ( x : insets . left , y : insets . top / * + topPadding * / ) < nl > + self . dateText . frame = CGRectMake ( insets . left + contentWidth - 47 , bubbleHeight + insets . top - 20 , 46 , 26 ) < nl > self . statusView . hidden = true < nl > } < nl > < nl > if self . isGroup & & ! self . isOut { < nl > - self . senderNameLabel . frame = CGRect ( x : insets . left , y : insets . top - 18 , width : textWidth , height : 20 ) < nl > + self . senderNameLabel . frame = CGRect ( x : insets . left , y : insets . top - 18 , width : contentWidth , height : 20 ) < nl > } < nl > < nl > - layoutBubble ( textWidth , contentHeight : textHeight ) < nl > + layoutBubble ( bubbleWidth , contentHeight : bubbleHeight ) < nl > } < nl > } < nl > < nl > @ @ - 294 , 6 + 259 , 14 @ @ public class TextCellLayout : AACellLayout { < nl > } < nl > } < nl > < nl > + private class func timeWidth ( isOut : Bool ) - > CGFloat { < nl > + if isOut { < nl > + return 60 < nl > + } else { < nl > + return 36 < nl > + } < nl > + } < nl > + < nl > private static let textKey = " text " < nl > private static let unsupportedKey = " unsupported " < nl > < nl > @ @ - 301 , 69 + 274 , 114 @ @ public class TextCellLayout : AACellLayout { < nl > private static let stringInPadding = " " + ( " _ " . repeatString ( 4 ) ) ; < nl > private static let parser = ARMarkdownParser ( int : ARMarkdownParser _ MODE _ FULL ) < nl > < nl > - var text : String ? < nl > - var attrText : NSAttributedString ? < nl > - var textColor : UIColor < nl > + var text : String < nl > + var attrText : NSAttributedString < nl > + var textLayout : YYTextLayout < nl > + var senderLayout : YYTextLayout ? < nl > < nl > var isUnsupported : Bool = false < nl > - var textSizeWithPadding : CGSize < nl > - var textSize : CGSize < nl > + var bubbleSize : CGSize < nl > var sources = [ String ] ( ) < nl > < nl > / * * < nl > - Plain text layout < nl > - * / < nl > - public init ( text : String , textColor : UIColor , date : Int64 , isOut : Bool , peer : ACPeer , layoutKey : String = TextCellLayout . textKey ) { < nl > - < nl > - / / Setting text < nl > - self . text = text < nl > - self . textColor = textColor < nl > - < nl > - / / Calculating maximum text width < nl > - let maxTextWidth = TextCellLayout . maxTextWidth ( isOut , peer : peer ) < nl > - < nl > - / / Building padded text to make place for date and status checkmark < nl > - let paddedText = ( text + ( isOut ? TextCellLayout . stringOutPadding : TextCellLayout . stringInPadding ) ) < nl > - < nl > - / / Measuring text and padded text heights < nl > - textSize = UIViewMeasure . measureText ( text , width : maxTextWidth , font : AABubbleTextCell . bubbleFont ) < nl > - textSizeWithPadding = UIViewMeasure . measureText ( paddedText , width : maxTextWidth , font : AABubbleTextCell . bubbleFont ) < nl > - < nl > - / / Calculating bubble height < nl > - var height = textSizeWithPadding . height + AABubbleCell . bubbleContentTop + AABubbleCell . bubbleContentBottom < nl > - < nl > - if peer . isGroup & & ! isOut { < nl > - height + = AABubbleTextCell . senderHeight < nl > - } < nl > - < nl > - / / Creating layout < nl > - super . init ( height : height , date : date , key : layoutKey ) < nl > - } < nl > - < nl > - / * * < nl > - NSAttributedString layout < nl > - * / < nl > - public init ( attributedText : NSAttributedString , textColor : UIColor , date : Int64 , isOut : Bool , peer : ACPeer , layoutKey : String = TextCellLayout . textKey ) { < nl > + NSAttributedString layout < nl > + * / < nl > + public init ( senderId : Int , text : String , attributedText : NSAttributedString , date : Int64 , isOut : Bool , peer : ACPeer , layoutKey : String = TextCellLayout . textKey ) { < nl > < nl > / / Setting attributed text < nl > + self . text = text < nl > self . attrText = attributedText < nl > - self . textColor = textColor < nl > self . isUnsupported = false < nl > < nl > / / Calculating maximum text width < nl > let maxTextWidth = TextCellLayout . maxTextWidth ( isOut , peer : peer ) < nl > + let timeWidth = TextCellLayout . timeWidth ( isOut ) < nl > + < nl > + let container = YYTextContainer ( size : CGSizeMake ( maxTextWidth , CGFloat . max ) ) < nl > < nl > - / / Building padded text < nl > - let paddedText = attributedText . append ( isOut ? TextCellLayout . stringOutPadding : TextCellLayout . stringInPadding , font : AABubbleTextCell . bubbleFont ) < nl > + textLayout = YYTextLayout ( container : container , text : attributedText ) ! < nl > < nl > / / Measuring text and padded text heights < nl > - textSize = UIViewMeasure . measureText ( attributedText , width : maxTextWidth ) < nl > - textSizeWithPadding = UIViewMeasure . measureText ( paddedText , width : maxTextWidth ) < nl > + let textSize = textLayout . textBoundingSize < nl > + < nl > + if textLayout . lines . count = = 1 { < nl > + if textLayout . textBoundingSize . width < maxTextWidth - timeWidth { < nl > + / / < nl > + / / < line _ 0 > < date > < nl > + / / < nl > + bubbleSize = CGSize ( width : textSize . width + timeWidth , height : textSize . height ) < nl > + } else { < nl > + < nl > + / / < nl > + / / < line _ _ _ _ _ _ _ _ _ 0 > < nl > + / / < date > < nl > + / / < nl > + bubbleSize = CGSize ( width : textSize . width , height : textSize . height + 16 ) < nl > + } < nl > + } else { < nl > + let maxWidth = textSize . width < nl > + let lastLine = textLayout . lines . last ! . width < nl > + if lastLine + timeWidth < maxWidth { < nl > + / / < nl > + / / < line _ _ _ _ _ _ _ _ _ 0 > < nl > + / / < line _ _ _ _ _ _ _ _ _ 1 > < nl > + / / . . < nl > + / / < line _ n > < date > < nl > + / / < nl > + bubbleSize = textSize < nl > + } else if lastLine + timeWidth < maxTextWidth { < nl > + / / < nl > + / / | - - - - - - - - - - - - - - - - - - | < nl > + / / < line _ _ _ _ _ _ 0 > < nl > + / / < line _ _ _ _ _ _ 1 > < nl > + / / . . < nl > + / / < line _ _ _ _ _ _ n > < date > < nl > + / / < nl > + bubbleSize = CGSize ( width : max ( lastLine + timeWidth , maxWidth ) , height : textSize . height ) < nl > + } else { < nl > + / / < nl > + / / < line _ _ _ _ _ _ _ _ _ 0 > < nl > + / / < line _ _ _ _ _ _ _ _ _ 1 > < nl > + / / . . < nl > + / / < line _ _ _ _ _ _ _ _ _ n > < nl > + / / < date > < nl > + / / < nl > + bubbleSize = CGSize ( width : max ( timeWidth , maxWidth ) , height : textSize . height + 16 ) < nl > + } < nl > + } < nl > + < nl > < nl > / / Calculating bubble height < nl > - var height = textSizeWithPadding . height + AABubbleCell . bubbleContentTop + AABubbleCell . bubbleContentBottom < nl > + var height = bubbleSize . height + AABubbleCell . bubbleContentTop + AABubbleCell . bubbleContentBottom < nl > < nl > if peer . isGroup & & ! isOut { < nl > + < nl > + / / Getting Name of sender < nl > + let sender = Actor . getUserWithUid ( jint ( senderId ) ) < nl > + let colors = ActorSDK . sharedActor ( ) . style . nameColors < nl > + var senderName : String < nl > + var color : UIColor < nl > + if sender . isBot ( ) & & sender . getNameModel ( ) . get ( ) = = " Bot " { < nl > + senderName = Actor . getGroupWithGid ( peer . peerId ) . getNameModel ( ) . get ( ) < nl > + color = colors [ Int ( abs ( peer . peerId ) ) % colors . count ] < nl > + } else { < nl > + senderName = sender . getNameModel ( ) . get ( ) < nl > + color = colors [ Int ( abs ( senderId ) ) % colors . count ] < nl > + } < nl > + < nl > + / / Building Layout < nl > + let attributedSender = NSMutableAttributedString ( string : senderName ) < nl > + let range = NSRange ( location : 0 , length : senderName . length ) < nl > + attributedSender . yy _ setFont ( AABubbleTextCell . senderFont , range : range ) < nl > + attributedSender . yy _ setColor ( color , range : range ) < nl > + senderLayout = YYTextLayout ( container : container , text : attributedSender ) ! < nl > + < nl > + / / Fixing too small width < nl > + let senderWidth = senderLayout ! . textBoundingSize . width < nl > + if bubbleSize . width < senderWidth + 5 { < nl > + bubbleSize = CGSize ( width : senderWidth , height : bubbleSize . height ) < nl > + } < nl > + < nl > height + = AABubbleTextCell . senderHeight < nl > } < nl > < nl > @ @ - 374 , 25 + 392 , 16 @ @ public class TextCellLayout : AACellLayout { < nl > / * * < nl > Formatted text layout . Automatically parse text and detect formatting . < nl > * / < nl > - public convenience init ( formattedText : String , textColor : UIColor , date : Int64 , isOut : Bool , peer : ACPeer , layoutKey : String = TextCellLayout . textKey ) { < nl > + public convenience init ( senderId : Int , formattedText : String , textColor : UIColor , date : Int64 , isOut : Bool , peer : ACPeer , layoutKey : String = TextCellLayout . textKey ) { < nl > < nl > / / Parsing markdown formatted text < nl > let text = TextCellLayout . parser . parse ( formattedText , textColor : textColor , fontSize : AABubbleTextCell . fontSize ) < nl > < nl > - / / If text is trivial don ' t use NSAttributedText < nl > - if text . isTrivial { < nl > - < nl > - / / Creating simple text layout < nl > - self . init ( text : formattedText , textColor : textColor , date : date , isOut : isOut , peer : peer , layoutKey : layoutKey ) < nl > - < nl > - } else { < nl > - < nl > - / / Creating attributed text layout < nl > - self . init ( attributedText : text . attributedText , textColor : textColor , date : date , isOut : isOut , peer : peer , layoutKey : layoutKey ) < nl > - < nl > - / / Setting source code references < nl > - self . sources = text . code < nl > - } < nl > + / / Creating attributed text layout < nl > + self . init ( senderId : senderId , text : formattedText , attributedText : text . attributedText , date : date , isOut : isOut , peer : peer , layoutKey : layoutKey ) < nl > + < nl > + / / Setting source code references < nl > + self . sources = text . code < nl > } < nl > < nl > / * * < nl > @ @ - 405 , 6 + 414 , 7 @ @ public class TextCellLayout : AACellLayout { < nl > < nl > / / Creating generic layout < nl > self . init ( < nl > + senderId : Int ( message . senderId ) , < nl > formattedText : content . text , < nl > textColor : message . isOut ? style . chatTextOutColor : style . chatTextInColor , < nl > date : Int64 ( message . date ) , < nl > @ @ - 418 , 6 + 428 , 7 @ @ public class TextCellLayout : AACellLayout { < nl > let unsupportedText = AALocalized ( " UnsupportedContent " ) < nl > < nl > self . init ( < nl > + senderId : Int ( message . senderId ) , < nl > formattedText : " _ \ ( unsupportedText ) _ " , < nl > textColor : message . isOut ? style . chatTextOutUnsupportedColor : style . chatTextInUnsupportedColor , < nl > date : Int64 ( message . date ) , < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift < nl > index 4386865 . . 2afae64 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift < nl > @ @ - 84 , 7 + 84 , 10 @ @ public class AAConvActionSheet : UIView , AAThumbnailViewDelegate { < nl > UIView . animateWithDuration ( 0 . 25 , animations : { ( ) - > Void in < nl > self . sheetView . frame = nextFrame < nl > self . backgroundView . alpha = 0 } ) { ( bool ) - > Void in < nl > - self . removeFromSuperview ( ) < nl > + self . delegate = nil < nl > + self . thumbnailView . dismiss ( ) < nl > + self . thumbnailView = nil < nl > + self . removeFromSuperview ( ) < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - apps / app - ios / ActorClient / AABubbleAdCell . swift b / actor - apps / app - ios / ActorClient / AABubbleAdCell . swift < nl > index 54c2b14 . . 63b7191 100644 < nl > - - - a / actor - apps / app - ios / ActorClient / AABubbleAdCell . swift < nl > + + + b / actor - apps / app - ios / ActorClient / AABubbleAdCell . swift < nl > @ @ - 28 , 7 + 28 , 7 @ @ class AABubbleAdCell : AABubbleCell { < nl > fatalError ( " init ( coder : ) has not been implemented " ) < nl > } < nl > < nl > - override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , isPreferCompact : Bool ) { < nl > + override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , setting : CellSetting ) { < nl > var content = message . getContent ( ) as ! AMBannerContent < nl > < nl > } < nl > diff - - git a / actor - apps / app - ios / ActorClient / AABubbleCell . swift b / actor - apps / app - ios / ActorClient / AABubbleCell . swift < nl > index 93b9510 . . a934d93 100644 < nl > - - - a / actor - apps / app - ios / ActorClient / AABubbleCell . swift < nl > + + + b / actor - apps / app - ios / ActorClient / AABubbleCell . swift < nl > @ @ - 13 , 9 + 13 , 9 @ @ class AABubbleCell : UICollectionViewCell { < nl > static let bubbleContentTop : CGFloat = 6 < nl > static let bubbleContentBottom : CGFloat = 6 < nl > static let bubbleTop : CGFloat = 3 < nl > - static let bubbleTopCompact : CGFloat = 3 < nl > + static let bubbleTopCompact : CGFloat = 1 < nl > static let bubbleBottom : CGFloat = 3 < nl > - static let bubbleBottomCompact : CGFloat = 3 < nl > + static let bubbleBottomCompact : CGFloat = 1 < nl > static let avatarPadding : CGFloat = 39 < nl > static let dateSize : CGFloat = 30 < nl > static let newMessageSize : CGFloat = 30 < nl > @ @ - 76 , 6 + 76 , 7 @ @ class AABubbleCell : UICollectionViewCell { < nl > var peer : AMPeer ! < nl > var isGroup : Bool = false < nl > var isFullSize : Bool ! < nl > + var bindedSetting : CellSetting ? < nl > < nl > var bindedMessage : AMMessage ? = nil < nl > var bubbleType : BubbleType ? = nil < nl > @ @ - 106 , 9 + 107 , 8 @ @ class AABubbleCell : UICollectionViewCell { < nl > < nl > bubble . userInteractionEnabled = true < nl > < nl > - mainView . transform = CGAffineTransformMake ( 1 , 0 , 0 , - 1 , 0 , 0 ) < nl > < nl > - / / mainView . transform = CGAffineTransformIdentity < nl > + mainView . transform = CGAffineTransformMake ( 1 , 0 , 0 , - 1 , 0 , 0 ) < nl > < nl > mainView . addSubview ( bubble ) < nl > mainView . addSubview ( bubbleBorder ) < nl > @ @ - 118 , 12 + 118 , 9 @ @ class AABubbleCell : UICollectionViewCell { < nl > < nl > contentView . addSubview ( mainView ) < nl > < nl > - / / if ( peer . getPeerType ( ) . ordinal ( ) = = jint ( AMPeerType . GROUP . rawValue ) & & ! isFullSize ) { < nl > - / / self . isGroup = true < nl > - / / } < nl > - < nl > backgroundColor = UIColor . clearColor ( ) < nl > < nl > + / / Speed up animations < nl > self . layer . speed = 1 . 5 < nl > } < nl > < nl > @ @ - 131 , 6 + 128 , 13 @ @ class AABubbleCell : UICollectionViewCell { < nl > fatalError ( " init ( coder : ) has not been implemented " ) < nl > } < nl > < nl > + func setConfig ( peer : AMPeer ) { < nl > + self . peer = peer < nl > + if ( peer . getPeerType ( ) . ordinal ( ) = = jint ( AMPeerType . GROUP . rawValue ) & & ! isFullSize ) { < nl > + self . isGroup = true < nl > + } < nl > + } < nl > + < nl > override func canBecomeFirstResponder ( ) - > Bool { < nl > return true < nl > } < nl > @ @ - 139 , 8 + 143 , 7 @ @ class AABubbleCell : UICollectionViewCell { < nl > return false < nl > } < nl > < nl > - func performBind ( message : AMMessage , isPreferCompact : Bool , isShowDate : Bool , isShowNewMessages : Bool , < nl > - layoutCache : LayoutCache ) { < nl > + func performBind ( message : AMMessage , setting : CellSetting , layoutCache : LayoutCache ) { < nl > self . clipsToBounds = false < nl > self . contentView . clipsToBounds = false < nl > < nl > @ @ - 150 , 23 + 153 , 23 @ @ class AABubbleCell : UICollectionViewCell { < nl > } < nl > isOut = message . getSenderId ( ) = = MSG . myUid ( ) ; < nl > bindedMessage = message < nl > - self . isShowNewMessages = isShowNewMessages < nl > + self . isShowNewMessages = setting . showNewMessages < nl > if ( ! reuse ) { < nl > if ( ! isFullSize ) { < nl > - / / if ( ! isOut & & isGroup ) { < nl > - / / if let user = MSG . getUserWithUid ( message . getSenderId ( ) ) { < nl > - / / let avatar : AMAvatar ? = user . getAvatarModel ( ) . get ( ) < nl > - / / let name = user . getNameModel ( ) . get ( ) < nl > - / / / / avatarView . bind ( name , id : user . getId ( ) , avatar : avatar ) < nl > - / / } < nl > - / / contentView . addSubview ( avatarView ) < nl > - / / } else { < nl > - / / avatarView . removeFromSuperview ( ) < nl > - / / } < nl > + if ( ! isOut & & isGroup ) { < nl > + if let user = MSG . getUserWithUid ( message . getSenderId ( ) ) { < nl > + let avatar : AMAvatar ? = user . getAvatarModel ( ) . get ( ) < nl > + let name = user . getNameModel ( ) . get ( ) < nl > + avatarView . bind ( name , id : user . getId ( ) , avatar : avatar ) < nl > + } < nl > + mainView . addSubview ( avatarView ) < nl > + } else { < nl > + avatarView . removeFromSuperview ( ) < nl > + } < nl > } < nl > } < nl > < nl > - self . isShowDate = isShowDate < nl > + self . isShowDate = setting . showDate < nl > if ( isShowDate ) { < nl > self . dateText . text = MSG . getFormatter ( ) . formatDate ( message . getDate ( ) ) < nl > } < nl > @ @ - 177 , 8 + 180 , 10 @ @ class AABubbleCell : UICollectionViewCell { < nl > layout = MessagesLayouting . buildLayout ( message , layoutCache : layoutCache ) < nl > layoutCache . cache ( message . getRid ( ) , layout : layout ! ) < nl > } < nl > - < nl > - bind ( message , reuse : reuse , cellLayout : layout ! , isPreferCompact : isPreferCompact ) < nl > + < nl > + self . bindedSetting = setting < nl > + < nl > + bind ( message , reuse : reuse , cellLayout : layout ! , setting : setting ) < nl > < nl > if ( ! reuse ) { < nl > needLayout = true < nl > @ @ - 186 , 7 + 191 , 7 @ @ class AABubbleCell : UICollectionViewCell { < nl > } < nl > } < nl > < nl > - func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , isPreferCompact : Bool ) { < nl > + func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , setting : CellSetting ) { < nl > fatalError ( " bind ( message : ) has not been implemented " ) < nl > } < nl > < nl > diff - - git a / actor - apps / app - ios / ActorClient / AABubbleMediaCell . swift b / actor - apps / app - ios / ActorClient / AABubbleMediaCell . swift < nl > index dea0d7e . . ba8aca2 100644 < nl > - - - a / actor - apps / app - ios / ActorClient / AABubbleMediaCell . swift < nl > + + + b / actor - apps / app - ios / ActorClient / AABubbleMediaCell . swift < nl > @ @ - 52 , 11 + 52 , 6 @ @ class AABubbleMediaCell : AABubbleBaseFileCell { < nl > mainView . addSubview ( timeLabel ) < nl > mainView . addSubview ( statusView ) < nl > < nl > - bubbleInsets = UIEdgeInsets ( < nl > - top : 3 , < nl > - left : 10 , < nl > - bottom : 3 , < nl > - right : 10 ) < nl > contentInsets = UIEdgeInsets ( top : 1 , left : 1 , bottom : 1 , right : 1 ) < nl > } < nl > < nl > @ @ - 66 , 7 + 61 , 14 @ @ class AABubbleMediaCell : AABubbleBaseFileCell { < nl > < nl > / / MARK : - < nl > < nl > - override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , isPreferCompact : Bool ) { < nl > + override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , setting : CellSetting ) { < nl > + < nl > + bubbleInsets = UIEdgeInsets ( < nl > + top : setting . clenchTop ? AABubbleCell . bubbleTopCompact : AABubbleCell . bubbleTop , < nl > + left : 10 , < nl > + bottom : setting . clenchBottom ? AABubbleCell . bubbleBottomCompact : AABubbleCell . bubbleBottom , < nl > + right : 10 ) < nl > + < nl > if ( ! reuse ) { < nl > < nl > / / Bind bubble < nl > @ @ - 107 , 7 + 109 , 7 @ @ class AABubbleMediaCell : AABubbleBaseFileCell { < nl > } ) < nl > < nl > / / Bind file < nl > - / / fileBind ( message , autoDownload : message . getContent ( ) is AMPhotoContent ) < nl > + fileBind ( message , autoDownload : message . getContent ( ) is AMPhotoContent ) < nl > } < nl > < nl > / / Update time < nl > diff - - git a / actor - apps / app - ios / ActorClient / AABubbleServiceCell . swift b / actor - apps / app - ios / ActorClient / AABubbleServiceCell . swift < nl > index aaeaeee . . 300310f 100644 < nl > - - - a / actor - apps / app - ios / ActorClient / AABubbleServiceCell . swift < nl > + + + b / actor - apps / app - ios / ActorClient / AABubbleServiceCell . swift < nl > @ @ - 51 , 7 + 51 , 7 @ @ class AABubbleServiceCell : AABubbleCell { < nl > / / MARK : - < nl > / / MARK : Bind < nl > < nl > - override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , isPreferCompact : Bool ) { < nl > + override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , setting : CellSetting ) { < nl > if ( ! reuse ) { < nl > serviceText . text = MSG . getFormatter ( ) . formatFullServiceMessageWithSenderId ( message . getSenderId ( ) , withContent : message . getContent ( ) as ! AMServiceContent ) < nl > } < nl > diff - - git a / actor - apps / app - ios / ActorClient / AABubbleTextCell . swift b / actor - apps / app - ios / ActorClient / AABubbleTextCell . swift < nl > index 2c3ea8e . . ebc0dfe 100644 < nl > - - - a / actor - apps / app - ios / ActorClient / AABubbleTextCell . swift < nl > + + + b / actor - apps / app - ios / ActorClient / AABubbleTextCell . swift < nl > @ @ - 9 , 11 + 9 , 12 @ @ class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { < nl > < nl > private static let dateFont = UIFont ( name : " HelveticaNeue - Italic " , size : 11 ) ! < nl > < nl > - let messageText = TTTAttributedLabel ( frame : CGRectZero ) < nl > + let messageText = UILabel ( ) < nl > let statusView = UIImageView ( ) ; < nl > let senderNameLabel = UILabel ( ) ; < nl > var needRelayout = true < nl > - var isCompact : Bool = false < nl > + var isClanchTop : Bool = false < nl > + var isClanchBottom : Bool = false < nl > < nl > private let dateText = UILabel ( ) < nl > private var messageState : UInt = AMMessageState . UNKNOWN . rawValue < nl > @ @ - 26 , 8 + 27 , 6 @ @ class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { < nl > < nl > messageText . lineBreakMode = . ByWordWrapping < nl > messageText . numberOfLines = 0 < nl > - messageText . enabledTextCheckingTypes = NSTextCheckingType . Link . rawValue < nl > - messageText . delegate = self < nl > messageText . userInteractionEnabled = true < nl > < nl > dateText . font = AABubbleTextCell . dateFont < nl > @ @ - 55 , 8 + 54 , 11 @ @ class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { < nl > UIApplication . sharedApplication ( ) . openURL ( url ) < nl > } < nl > < nl > - override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , isPreferCompact : Bool ) { < nl > + override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , setting : CellSetting ) { < nl > self . cellLayout = cellLayout as ! TextCellLayout < nl > + isClanchTop = setting . clenchTop < nl > + isClanchBottom = setting . clenchBottom < nl > + < nl > if ( ! reuse ) { < nl > needRelayout = true < nl > < nl > @ @ - 79 , 37 + 81 , 6 @ @ class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { < nl > } < nl > } < nl > < nl > - isCompact = isPreferCompact < nl > - < nl > - if ( isOut ) { < nl > - bindBubbleType ( . TextOut , isCompact : isPreferCompact ) < nl > - dateText . textColor = MainAppTheme . bubbles . textDateOut < nl > - < nl > - bubbleInsets = UIEdgeInsets ( < nl > - top : ( isPreferCompact ? AABubbleCell . bubbleTopCompact : AABubbleCell . bubbleTop ) , < nl > - left : 0 + ( isIPad ? 16 : 0 ) , < nl > - bottom : ( isPreferCompact ? AABubbleCell . bubbleBottomCompact : AABubbleCell . bubbleBottom ) , < nl > - right : ( isPreferCompact ? 10 : 4 ) + ( isIPad ? 16 : 0 ) ) < nl > - contentInsets = UIEdgeInsets ( < nl > - top : AABubbleCell . bubbleContentTop , < nl > - left : 10 , < nl > - bottom : AABubbleCell . bubbleContentBottom , < nl > - right : ( isPreferCompact ? 4 : 10 ) ) < nl > - } else { < nl > - bindBubbleType ( . TextIn , isCompact : isPreferCompact ) < nl > - dateText . textColor = MainAppTheme . bubbles . textDateIn < nl > - < nl > - bubbleInsets = UIEdgeInsets ( < nl > - top : ( isPreferCompact ? AABubbleCell . bubbleTopCompact : AABubbleCell . bubbleTop ) , < nl > - left : ( isPreferCompact ? 10 : 4 ) + ( isIPad ? 16 : 0 ) , < nl > - bottom : ( isPreferCompact ? AABubbleCell . bubbleBottomCompact : AABubbleCell . bubbleBottom ) , < nl > - right : 0 + ( isIPad ? 16 : 0 ) ) < nl > - contentInsets = UIEdgeInsets ( < nl > - top : ( isGroup ? 18 : 0 ) + AABubbleCell . bubbleContentTop , < nl > - left : ( isPreferCompact ? 11 : 17 ) , < nl > - bottom : AABubbleCell . bubbleContentBottom , < nl > - right : 10 ) < nl > - } < nl > < nl > if isGroup & & ! isOut { < nl > if let user = MSG . getUserWithUid ( message . getSenderId ( ) ) { < nl > @ @ - 117 , 13 + 88 , 44 @ @ class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { < nl > var color = Resources . placeHolderColors [ Int ( abs ( user . getId ( ) ) ) % Resources . placeHolderColors . count ] ; < nl > senderNameLabel . textColor = color < nl > } < nl > - contentView . addSubview ( senderNameLabel ) < nl > - < nl > + mainView . addSubview ( senderNameLabel ) < nl > } else { < nl > senderNameLabel . removeFromSuperview ( ) < nl > } < nl > } < nl > < nl > + / / Always update bubble insets < nl > + if ( isOut ) { < nl > + bindBubbleType ( . TextOut , isCompact : isClanchBottom ) < nl > + dateText . textColor = MainAppTheme . bubbles . textDateOut < nl > + < nl > + bubbleInsets = UIEdgeInsets ( < nl > + top : ( isClanchTop ? AABubbleCell . bubbleTopCompact : AABubbleCell . bubbleTop ) , < nl > + left : 0 + ( isIPad ? 16 : 0 ) , < nl > + bottom : ( isClanchBottom ? AABubbleCell . bubbleBottomCompact : AABubbleCell . bubbleBottom ) , < nl > + right : ( isClanchBottom ? 10 : 4 ) + ( isIPad ? 16 : 0 ) ) < nl > + contentInsets = UIEdgeInsets ( < nl > + top : AABubbleCell . bubbleContentTop , < nl > + left : 10 , < nl > + bottom : AABubbleCell . bubbleContentBottom , < nl > + right : ( isClanchBottom ? 4 : 10 ) ) < nl > + } else { < nl > + bindBubbleType ( . TextIn , isCompact : isClanchBottom ) < nl > + dateText . textColor = MainAppTheme . bubbles . textDateIn < nl > + < nl > + bubbleInsets = UIEdgeInsets ( < nl > + top : ( isClanchTop ? AABubbleCell . bubbleTopCompact : AABubbleCell . bubbleTop ) , < nl > + left : ( isClanchBottom ? 10 : 4 ) + ( isIPad ? 16 : 0 ) , < nl > + bottom : ( isClanchBottom ? AABubbleCell . bubbleBottomCompact : AABubbleCell . bubbleBottom ) , < nl > + right : 0 + ( isIPad ? 16 : 0 ) ) < nl > + contentInsets = UIEdgeInsets ( < nl > + top : ( isGroup ? 18 : 0 ) + AABubbleCell . bubbleContentTop , < nl > + left : ( isClanchBottom ? 11 : 17 ) , < nl > + bottom : AABubbleCell . bubbleContentBottom , < nl > + right : 10 ) < nl > + } < nl > + < nl > + < nl > / / Always update date and state < nl > dateText . text = cellLayout . date < nl > messageState = UInt ( message . getMessageState ( ) . ordinal ( ) ) ; < nl > @ @ - 156 , 30 + 158 , 10 @ @ class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { < nl > break ; < nl > } < nl > } < nl > + < nl > + setNeedsLayout ( ) < nl > } < nl > < nl > - / / MARK : - < nl > - / / MARK : Getters < nl > - < nl > - / / class func measureTextHeight ( message : AMMessage , isPreferCompact : Bool , heightCache : HeightCache ) - > CGFloat { < nl > - / / var messageContent = " " < nl > - / / if let content = message . getContent ( ) as ? AMTextContent { < nl > - / / messageContent = content . getText ( ) < nl > - / / } else { < nl > - / / messageContent = NSLocalizedString ( " UnsupportedContent " , comment : " Unsupported text " ) < nl > - / / } < nl > - / / let contentHeight = AABubbleTextCell . measureText ( message . getRid ( ) , message : messageContent , isOut : message . getSenderId ( ) = = MSG . myUid ( ) , heightCache : heightCache ) . height < nl > - / / < nl > - / / if ( isPreferCompact ) { < nl > - / / return contentHeight + bubbleBottomCompact + bubbleContentBottom + bubbleContentTop + bubbleTopCompact < nl > - / / } else { < nl > - / / return contentHeight + bubbleBottom + bubbleContentBottom + bubbleContentTop + bubbleTop < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / MARK : - < nl > - / / MARK : MenuController < nl > - < nl > override func canPerformAction ( action : Selector , withSender sender : AnyObject ? ) - > Bool { < nl > if NSStringFromSelector ( action ) = = " copy : " { < nl > return true < nl > @ @ - 201 , 14 + 183 , 13 @ @ class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { < nl > var contentHeight = self . contentView . frame . height < nl > < nl > / / Measure Text < nl > - / / var textBounds = AABubbleTextCell . measureText ( self . bindedMessage ! . getRid ( ) , message : self . messageText . text ! , isOut : self . isOut , heightCache : heightCache ) < nl > var senderNameBounds = self . senderNameLabel . sizeThatFits ( CGSize ( width : CGFloat . max , height : CGFloat . max ) ) < nl > < nl > - self . messageText . frame = CGRectMake ( 0 , 0 , self . cellLayout . textSize . width , self . cellLayout . textSize . height ) < nl > - / / self . messageText . sizeToFit ( ) < nl > + self . messageText . frame = CGRectMake ( 0 , 0 , self . cellLayout . textSizeWithPadding . width , self . cellLayout . textSizeWithPadding . height ) < nl > + self . messageText . sizeToFit ( ) < nl > < nl > - var textWidth = round ( self . cellLayout . textSize . width ) < nl > - var textHeight = round ( self . cellLayout . textSize . height ) < nl > + var textWidth = round ( self . cellLayout . textSizeWithPadding . width ) < nl > + var textHeight = round ( self . cellLayout . textSizeWithPadding . height ) < nl > < nl > if textWidth < senderNameBounds . width { < nl > textWidth = senderNameBounds . width + 5 < nl > @ @ - 232 , 32 + 213 , 4 @ @ class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { < nl > < nl > layoutBubble ( textWidth , contentHeight : textHeight ) < nl > } < nl > - < nl > - / / / / Using padding for proper date align . < nl > - / / / / One space + 16 non - breakable spases for out messages < nl > - / / private static let stringOutPadding = " \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } " ; < nl > - / / < nl > - / / / / One space + 6 non - breakable spaces for in messages < nl > - / / private static let stringInPadding = " \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } " ; < nl > - / / < nl > - / / private static let maxTextWidth = 210 < nl > - / / < nl > - / / private class func measureText ( rid : jlong , message : String , isOut : Bool , heightCache : HeightCache ) - > CGSize { < nl > - / / var cached = heightCache . pick ( rid ) < nl > - / / if ( cached ! = nil ) { < nl > - / / println ( " measureText : cached " ) < nl > - / / return cached ! < nl > - / / } < nl > - / / println ( " measureText " ) < nl > - / / var style = NSMutableParagraphStyle ( ) ; < nl > - / / style . lineBreakMode = NSLineBreakMode . ByWordWrapping ; < nl > - / / < nl > - / / var text = ( message + ( isOut ? stringOutPadding : stringInPadding ) ) as NSString ; < nl > - / / < nl > - / / var size = CGSize ( width : maxTextWidth , height : 0 ) ; < nl > - / / var rect = text . boundingRectWithSize ( size , options : NSStringDrawingOptions . UsesLineFragmentOrigin , attributes : [ NSFontAttributeName : bubbleFont , NSParagraphStyleAttributeName : style ] , context : nil ) ; < nl > - / / var res = CGSizeMake ( round ( rect . width ) , round ( rect . height ) ) < nl > - / / heightCache . cache ( rid , size : res ) < nl > - / / return res < nl > - / / } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - apps / app - ios / ActorClient / BubbleLayouts . swift b / actor - apps / app - ios / ActorClient / BubbleLayouts . swift < nl > index 8e2f94f . . a418194 100644 < nl > - - - a / actor - apps / app - ios / ActorClient / BubbleLayouts . swift < nl > + + + b / actor - apps / app - ios / ActorClient / BubbleLayouts . swift < nl > @ @ - 10 , 27 + 10 , 27 @ @ import Foundation < nl > < nl > class MessagesLayouting { < nl > < nl > - class func measureHeight ( message : AMMessage , group : Bool , isPreferCompact : Bool , isShowDate : Bool , isShowNewMessages : Bool , layoutCache : LayoutCache ) - > CGFloat { < nl > + class func measureHeight ( message : AMMessage , group : Bool , setting : CellSetting , layoutCache : LayoutCache ) - > CGFloat { < nl > var content = message . getContent ( ) ! < nl > < nl > var layout = layoutCache . pick ( message . getRid ( ) ) < nl > if ( layout = = nil ) { < nl > + / / Usually never happens < nl > layout = buildLayout ( message , layoutCache : layoutCache ) < nl > layoutCache . cache ( message . getRid ( ) , layout : layout ! ) < nl > - println ( " Build in UI thread " ) < nl > } < nl > < nl > var height = layout ! . height < nl > - if isPreferCompact & & ! ( content is AMServiceContent ) { < nl > - height + = AABubbleCell . bubbleBottomCompact + < nl > - AABubbleCell . bubbleContentBottom + < nl > - AABubbleCell . bubbleContentTop + < nl > - AABubbleCell . bubbleTopCompact < nl > + if content is AMServiceContent { < nl > + height + = AABubbleCell . bubbleTop < nl > + height + = AABubbleCell . bubbleBottom < nl > + height + = AABubbleCell . bubbleContentTop < nl > + height + = AABubbleCell . bubbleContentBottom < nl > } else { < nl > - height + = AABubbleCell . bubbleBottom + < nl > - AABubbleCell . bubbleContentBottom + < nl > - AABubbleCell . bubbleContentTop + < nl > - AABubbleCell . bubbleTop < nl > + height + = ( setting . clenchTop ? AABubbleCell . bubbleTopCompact : AABubbleCell . bubbleTop ) < nl > + height + = ( setting . clenchBottom ? AABubbleCell . bubbleBottomCompact : AABubbleCell . bubbleBottom ) < nl > + height + = AABubbleCell . bubbleContentTop < nl > + height + = AABubbleCell . bubbleContentBottom < nl > } < nl > < nl > / / Sender name < nl > @ @ - 40 , 12 + 40 , 12 @ @ class MessagesLayouting { < nl > } < nl > < nl > / / Date separator < nl > - if ( isShowDate ) { < nl > + if ( setting . showDate ) { < nl > height + = AABubbleCell . dateSize < nl > } < nl > < nl > / / New message separator < nl > - if ( isShowNewMessages ) { < nl > + if ( setting . showNewMessages ) { < nl > height + = AABubbleCell . newMessageSize < nl > } < nl > < nl > @ @ - 78 , 12 + 78 , 26 @ @ class MessagesLayouting { < nl > } < nl > } < nl > < nl > + class CellSetting { < nl > + let showNewMessages : Bool < nl > + let showDate : Bool < nl > + let clenchTop : Bool < nl > + let clenchBottom : Bool < nl > + < nl > + init ( showDate : Bool , clenchTop : Bool , clenchBottom : Bool , showNewMessages : Bool ) { < nl > + self . showDate = showDate < nl > + self . clenchTop = clenchTop < nl > + self . clenchBottom = clenchBottom < nl > + self . showNewMessages = showNewMessages < nl > + } < nl > + } < nl > + < nl > class CellLayout { < nl > var height : CGFloat = 0 < nl > var date : String < nl > < nl > init ( message : AMMessage ) { < nl > - date = CellLayout . formatDate ( Int64 ( message . getDate ( ) ) ) < nl > + self . date = CellLayout . formatDate ( Int64 ( message . getDate ( ) ) ) < nl > } < nl > < nl > class func formatDate ( date : Int64 ) - > String { < nl > @ @ - 104 , 6 + 118 , 7 @ @ class TextCellLayout : CellLayout { < nl > < nl > var text : String < nl > var isUnsupported : Bool < nl > + var textSizeWithPadding : CGSize < nl > var textSize : CGSize < nl > < nl > override init ( message : AMMessage ) { < nl > @ @ - 127 , 10 + 142 , 16 @ @ class TextCellLayout : CellLayout { < nl > options : NSStringDrawingOptions . UsesLineFragmentOrigin , < nl > attributes : [ NSFontAttributeName : isUnsupported ? TextCellLayout . bubbleFontUnsupported : TextCellLayout . bubbleFont , NSParagraphStyleAttributeName : style ] , < nl > context : nil ) ; < nl > + textSizeWithPadding = CGSizeMake ( round ( rect . width ) , round ( rect . height ) ) < nl > < nl > + rect = text . boundingRectWithSize ( size , < nl > + options : NSStringDrawingOptions . UsesLineFragmentOrigin , < nl > + attributes : [ NSFontAttributeName : isUnsupported ? TextCellLayout . bubbleFontUnsupported : TextCellLayout . bubbleFont , NSParagraphStyleAttributeName : style ] , < nl > + context : nil ) ; < nl > textSize = CGSizeMake ( round ( rect . width ) , round ( rect . height ) ) < nl > + < nl > super . init ( message : message ) < nl > - height = textSize . height < nl > + height = textSizeWithPadding . height < nl > } < nl > } < nl > < nl > diff - - git a / actor - apps / app - ios / ActorClient / ConversationMessagesController . swift b / actor - apps / app - ios / ActorClient / ConversationMessagesController . swift < nl > index c8726e2 . . 5d164e8 100644 < nl > - - - a / actor - apps / app - ios / ActorClient / ConversationMessagesController . swift < nl > + + + b / actor - apps / app - ios / ActorClient / ConversationMessagesController . swift < nl > @ @ - 114 , 15 + 114 , 15 @ @ class ConversationMessagesController : SLKTextViewController , UICollectionViewDel < nl > return false < nl > } < nl > < nl > - func onItemAdded ( index : Int ) { < nl > + func onItemsAdded ( indexes : [ Int ] ) { < nl > < nl > } < nl > < nl > - func onItemRemoved ( index : Int ) { < nl > + func onItemsRemoved ( indexes : [ Int ] ) { < nl > < nl > } < nl > < nl > - func onItemUpdated ( index : Int ) { < nl > + func onItemsUpdated ( indexes : [ Int ] ) { < nl > < nl > } < nl > < nl > @ @ - 130 , 17 + 130 , 11 @ @ class ConversationMessagesController : SLKTextViewController , UICollectionViewDel < nl > < nl > } < nl > < nl > - / / override func didRotateFromInterfaceOrientation ( fromInterfaceOrientation : UIInterfaceOrientation ) { < nl > - / / super . didRotateFromInterfaceOrientation ( fromInterfaceOrientation ) < nl > - / / < nl > - / / self . collectionView . collectionViewLayout . invalidateLayout ( ) < nl > - / / } < nl > - < nl > override func willRotateToInterfaceOrientation ( toInterfaceOrientation : UIInterfaceOrientation , duration : NSTimeInterval ) { < nl > super . willRotateToInterfaceOrientation ( toInterfaceOrientation , duration : duration ) < nl > < nl > dispatch _ async ( dispatch _ get _ main _ queue ( ) , { ( ) - > Void in < nl > - self . collectionView . collectionViewLayout . invalidateLayout ( ) < nl > + self . collectionView . collectionViewLayout . invalidateLayout ( ) < nl > } ) < nl > } < nl > < nl > @ @ - 155 , 10 + 149 , 13 @ @ class ConversationMessagesController : SLKTextViewController , UICollectionViewDel < nl > case AMChangeDescription _ OperationType . ADD . rawValue : < nl > var startIndex = Int ( mod . getIndex ( ) ) < nl > var rows = [ NSIndexPath ] ( ) < nl > + var indexes = [ Int ] ( ) < nl > for ind in 0 . . < mod . getLength ( ) { < nl > + indexes . append ( Int ( startIndex + ind ) ) < nl > rows . append ( NSIndexPath ( forRow : Int ( startIndex + ind ) , inSection : 0 ) ) < nl > } < nl > self . collectionView . insertItemsAtIndexPaths ( rows ) < nl > + self . onItemsAdded ( indexes ) < nl > break < nl > case AMChangeDescription _ OperationType . REMOVE . rawValue : < nl > var startIndex = Int ( mod . getIndex ( ) ) < nl > @ @ - 172 , 29 + 169 , 12 @ @ class ConversationMessagesController : SLKTextViewController , UICollectionViewDel < nl > self . collectionView . moveItemAtIndexPath ( NSIndexPath ( forItem : Int ( mod . getIndex ( ) ) , inSection : 0 ) , toIndexPath : NSIndexPath ( forItem : Int ( mod . getDestIndex ( ) ) , inSection : 0 ) ) < nl > break < nl > case AMChangeDescription _ OperationType . UPDATE . rawValue : < nl > - < nl > - var forcedRows = [ NSIndexPath ] ( ) < nl > - < nl > - var visibleIndexes = self . collectionView . indexPathsForVisibleItems ( ) as ! [ NSIndexPath ] < nl > + var rows = [ Int ] ( ) < nl > var startIndex = Int ( mod . getIndex ( ) ) < nl > for ind in 0 . . < mod . getLength ( ) { < nl > - var indexPath = NSIndexPath ( forRow : Int ( startIndex + ind ) , inSection : 0 ) < nl > - if visibleIndexes . contains ( indexPath ) { < nl > - var cell = self . collectionView . cellForItemAtIndexPath ( indexPath ) < nl > - var item : AnyObject ? = objectAtIndexPath ( indexPath ) < nl > - if ! needFullReload ( item , cell : cell ! ) { < nl > - bindCell ( collectionView , cellForRowAtIndexPath : indexPath , item : objectAtIndexPath ( indexPath ) , cell : cell ! ) < nl > - continue < nl > - } < nl > - } < nl > - < nl > - forcedRows . append ( indexPath ) < nl > - } < nl > - < nl > - if ( forcedRows . count > 0 ) { < nl > - println ( " forced update " ) < nl > - self . collectionView . reloadItemsAtIndexPaths ( forcedRows ) < nl > + rows . append ( Int ( startIndex + ind ) ) < nl > } < nl > + self . updateRows ( rows ) < nl > break < nl > default : < nl > break < nl > @ @ - 209 , 6 + 189 , 29 @ @ class ConversationMessagesController : SLKTextViewController , UICollectionViewDel < nl > afterUpdated ( ) < nl > } < nl > < nl > + func updateRows ( indexes : [ Int ] ) { < nl > + var forcedRows = [ NSIndexPath ] ( ) < nl > + < nl > + var visibleIndexes = self . collectionView . indexPathsForVisibleItems ( ) as ! [ NSIndexPath ] < nl > + for ind in indexes { < nl > + var indexPath = NSIndexPath ( forRow : ind , inSection : 0 ) < nl > + if visibleIndexes . contains ( indexPath ) { < nl > + var cell = self . collectionView . cellForItemAtIndexPath ( indexPath ) < nl > + var item : AnyObject ? = self . objectAtIndexPath ( indexPath ) < nl > + if ! self . needFullReload ( item , cell : cell ! ) { < nl > + self . bindCell ( self . collectionView , cellForRowAtIndexPath : indexPath , item : item , cell : cell ! ) < nl > + continue < nl > + } < nl > + } < nl > + < nl > + forcedRows . append ( indexPath ) < nl > + } < nl > + < nl > + if ( forcedRows . count > 0 ) { < nl > + self . collectionView . reloadItemsAtIndexPaths ( forcedRows ) < nl > + } < nl > + } < nl > + < nl > func afterUpdated ( ) { < nl > < nl > } < nl > diff - - git a / actor - apps / app - ios / ActorClient / Screens / Conversation / ConversationController . swift b / actor - apps / app - ios / ActorClient / Screens / Conversation / ConversationController . swift < nl > index 51c340a . . d4f0e56 100644 < nl > - - - a / actor - apps / app - ios / ActorClient / Screens / Conversation / ConversationController . swift < nl > + + + b / actor - apps / app - ios / ActorClient / Screens / Conversation / ConversationController . swift < nl > @ @ - 519 , 26 + 519 , 6 @ @ class ConversationController : ConversationMessagesController { < nl > } else { < nl > showActionSheetFast ( buttons , cancelButton : " AlertCancel " , tapClosure : tapBlock ) < nl > } < nl > - < nl > - / / showActionSheetFast ( hasCamera ? [ " PhotoCamera " , " PhotoLibrary " , " SendDocument " ] : [ " PhotoLibrary " , " SendDocument " ] , cancelButton : " AlertCancel " ) { ( index ) - > ( ) in < nl > - / / if index = = 0 | | ( hasCamera & & index = = 1 ) { < nl > - / / var pickerController = AAImagePickerController ( ) < nl > - / / pickerController . sourceType = ( hasCamera & & index = = 0 ) ? < nl > - / / UIImagePickerControllerSourceType . Camera : UIImagePickerControllerSourceType . PhotoLibrary < nl > - / / pickerController . mediaTypes = [ kUTTypeImage ] < nl > - / / pickerController . view . backgroundColor = MainAppTheme . list . bgColor < nl > - / / pickerController . navigationBar . tintColor = MainAppTheme . navigation . barColor < nl > - / / pickerController . delegate = self < nl > - / / pickerController . navigationBar . tintColor = MainAppTheme . navigation . titleColor < nl > - / / pickerController . navigationBar . titleTextAttributes = [ NSForegroundColorAttributeName : MainAppTheme . navigation . titleColor ] < nl > - / / self . presentViewController ( pickerController , animated : true , completion : nil ) < nl > - / / } else if index > = 0 { < nl > - / / var documentPicker = UIDocumentMenuViewController ( documentTypes : UTTAll , inMode : UIDocumentPickerMode . Import ) < nl > - / / documentPicker . view . backgroundColor = UIColor . clearColor ( ) < nl > - / / documentPicker . delegate = self < nl > - / / self . presentViewController ( documentPicker , animated : true , completion : nil ) < nl > - / / } < nl > - / / } < nl > } < nl > < nl > override func buildCell ( collectionView : UICollectionView , cellForRowAtIndexPath indexPath : NSIndexPath , item : AnyObject ? ) - > UICollectionViewCell { < nl > @ @ - 555 , 42 + 535 , 15 @ @ class ConversationController : ConversationMessagesController { < nl > } else { < nl > cell = collectionView . dequeueReusableCellWithReuseIdentifier ( BubbleTextIdentifier , forIndexPath : indexPath ) as ! AABubbleTextCell < nl > } < nl > - cell . peer = peer < nl > + cell . setConfig ( peer ) < nl > return cell < nl > } < nl > < nl > override func bindCell ( collectionView : UICollectionView , cellForRowAtIndexPath indexPath : NSIndexPath , item : AnyObject ? , cell : UICollectionViewCell ) { < nl > var message = item as ! AMMessage < nl > var bubbleCell = ( cell as ! AABubbleCell ) < nl > - < nl > - var preferCompact = false < nl > - var isShowDate = true < nl > - if ( indexPath . row > 0 ) { < nl > - var next = objectAtIndex ( indexPath . row - 1 ) as ! AMMessage < nl > - preferCompact = useCompact ( message , next : next ) < nl > - } < nl > - if ( indexPath . row + 1 < getCount ( ) ) { < nl > - var prev = objectAtIndex ( indexPath . row + 1 ) as ! AMMessage < nl > - isShowDate = showDate ( message , prev : prev ) < nl > - } < nl > - if ( isShowDate ) { < nl > - isShowDate = true < nl > - preferCompact = false < nl > - } < nl > - < nl > - bubbleCell . performBind ( message , isPreferCompact : preferCompact , isShowDate : isShowDate , isShowNewMessages : ( unreadMessageId = = message . getRid ( ) ) , < nl > - layoutCache : layoutCache ) < nl > - } < nl > - < nl > - override func needFullReload ( item : AnyObject ? , cell : UICollectionViewCell ) - > Bool { < nl > - var message = ( item as ! AMMessage ) ; < nl > - if cell is AABubbleTextCell { < nl > - if ( message . getContent ( ) is AMPhotoContent ) { < nl > - return true < nl > - } < nl > - } < nl > - < nl > - return false < nl > + var setting = buildCellSetting ( indexPath . row ) < nl > + bubbleCell . performBind ( message , setting : setting , layoutCache : layoutCache ) < nl > } < nl > < nl > func collectionView ( collectionView : UICollectionView , layout collectionViewLayout : UICollectionViewLayout , insetForSectionAtIndex section : Int ) - > UIEdgeInsets { < nl > @ @ - 606 , 27 + 559 , 68 @ @ class ConversationController : ConversationMessagesController { < nl > } < nl > < nl > func collectionView ( collectionView : UICollectionView , layout collectionViewLayout : UICollectionViewLayout , sizeForItemAtIndexPath indexPath : NSIndexPath ) - > CGSize { < nl > - var message = objectAtIndexPath ( indexPath ) as ! AMMessage ; < nl > < nl > - var preferCompact = false < nl > - var isShowDate = true < nl > - if ( indexPath . row > 0 ) { < nl > - var next = objectAtIndex ( indexPath . row - 1 ) as ! AMMessage < nl > - preferCompact = useCompact ( message , next : next ) < nl > + var message = objectAtIndexPath ( indexPath ) as ! AMMessage ; < nl > + var setting = buildCellSetting ( indexPath . row ) < nl > + let group = peer . getPeerType ( ) . ordinal ( ) = = jint ( AMPeerType . GROUP . rawValue ) < nl > + var height = MessagesLayouting . measureHeight ( message , group : group , setting : setting , layoutCache : layoutCache ) < nl > + return CGSizeMake ( self . view . bounds . width , height ) < nl > + } < nl > + < nl > + override func onItemsAdded ( indexes : [ Int ] ) { < nl > + var toUpdate = [ Int ] ( ) < nl > + for ind in indexes { < nl > + if ! indexes . contains ( ind + 1 ) { < nl > + if ind + 1 < getCount ( ) { < nl > + toUpdate . append ( ind + 1 ) < nl > + } < nl > + } < nl > + if ! indexes . contains ( ind - 1 ) { < nl > + if ind > 0 { < nl > + toUpdate . append ( ind - 1 ) < nl > + } < nl > + } < nl > } < nl > - if ( indexPath . row + 1 < getCount ( ) ) { < nl > - var prev = objectAtIndex ( indexPath . row + 1 ) as ! AMMessage < nl > - isShowDate = showDate ( message , prev : prev ) < nl > + updateRows ( toUpdate ) < nl > + } < nl > + < nl > + override func needFullReload ( item : AnyObject ? , cell : UICollectionViewCell ) - > Bool { < nl > + var message = ( item as ! AMMessage ) ; < nl > + if cell is AABubbleTextCell { < nl > + if ( message . getContent ( ) is AMPhotoContent ) { < nl > + return true < nl > + } < nl > } < nl > - if ( isShowDate ) { < nl > - isShowDate = true < nl > - preferCompact = false < nl > + < nl > + return false < nl > + } < nl > + < nl > + func buildCellSetting ( index : Int ) - > CellSetting { < nl > + < nl > + var current = objectAtIndex ( index ) as ! AMMessage < nl > + var next : AMMessage ! = index > 0 ? objectAtIndex ( index - 1 ) as ! AMMessage : nil < nl > + var prev : AMMessage ! = index + 1 < getCount ( ) ? objectAtIndex ( index + 1 ) as ! AMMessage : nil < nl > + < nl > + var isShowDate = true < nl > + var isShowDateNext = true < nl > + var isShowNewMessages = ( unreadMessageId = = current . getRid ( ) ) < nl > + var clenchTop = false < nl > + var clenchBottom = false < nl > + < nl > + if ( prev ! = nil ) { < nl > + isShowDate = ! areSameDate ( current , prev : prev ) < nl > + if ! isShowDate { < nl > + clenchTop = useCompact ( current , next : prev ) < nl > + } < nl > } < nl > < nl > - let group = peer . getPeerType ( ) . ordinal ( ) = = jint ( AMPeerType . GROUP . rawValue ) < nl > + if ( next ! = nil ) { < nl > + if areSameDate ( next , prev : current ) { < nl > + clenchBottom = useCompact ( current , next : next ) < nl > + } < nl > + } < nl > < nl > - var height = MessagesLayouting . measureHeight ( message , group : group , isPreferCompact : preferCompact , isShowDate : isShowDate , isShowNewMessages : ( unreadMessageId = = message . getRid ( ) ) , layoutCache : layoutCache ) < nl > - return CGSizeMake ( self . view . bounds . width , height ) < nl > + return CellSetting ( showDate : isShowDate , clenchTop : clenchTop , clenchBottom : clenchBottom , showNewMessages : isShowNewMessages ) < nl > } < nl > < nl > func useCompact ( source : AMMessage , next : AMMessage ) - > Bool { < nl > @ @ - 646 , 10 + 640 , 10 @ @ class ConversationController : ConversationMessagesController { < nl > return false < nl > } < nl > < nl > - func showDate ( source : AMMessage , prev : AMMessage ) - > Bool { < nl > + func areSameDate ( source : AMMessage , prev : AMMessage ) - > Bool { < nl > var currentDate = source . getDate ( ) / ( 1000 * 60 * 60 * 24 ) < nl > var nextDate = prev . getDate ( ) / ( 1000 * 60 * 60 * 24 ) < nl > - return currentDate ! = nextDate < nl > + return currentDate = = nextDate < nl > } < nl > < nl > override func displayListForController ( ) - > AMBindedDisplayList { < nl > diff - - git a / actor - apps / app - ios / ActorClient / Views / Bubbles / AABubbleDocumentCell . swift b / actor - apps / app - ios / ActorClient / Views / Bubbles / AABubbleDocumentCell . swift < nl > index 22f9f28 . . 5c401bc 100644 < nl > - - - a / actor - apps / app - ios / ActorClient / Views / Bubbles / AABubbleDocumentCell . swift < nl > + + + b / actor - apps / app - ios / ActorClient / Views / Bubbles / AABubbleDocumentCell . swift < nl > @ @ - 74 , 7 + 74 , 7 @ @ class AABubbleDocumentCell : AABubbleBaseFileCell { < nl > / / MARK : - < nl > / / MARK : Bind < nl > < nl > - override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , isPreferCompact : Bool ) { < nl > + override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , setting : CellSetting ) { < nl > let document = message . getContent ( ) as ! AMDocumentContent < nl > < nl > if ( ! reuse ) {

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 index 4c5960f . . 7750c32 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 @ @ - 287 , 7 + 287 , 11 @ @ public extension ARMarkdownParser { 
 
 let doc = self . processDocumentWithNSString ( text ) 
 if doc . isTrivial ( ) { 
 - return ARMDFormattedText ( attributedText : NSAttributedString ( string : text ) , isTrivial : true , code : [ ] ) 
 + let nAttrText = NSMutableAttributedString ( string : text ) 
 + let range = NSRange ( location : 0 , length : nAttrText . length ) 
 + nAttrText . yy _ setColor ( textColor , range : range ) 
 + nAttrText . yy _ setFont ( UIFont . textFontOfSize ( fontSize ) , range : range ) 
 + return ARMDFormattedText ( attributedText : nAttrText , isTrivial : true , code : [ ] ) 
 } 
 
 var sources = [ String ] ( ) 
 @ @ - 316 , 13 + 320 , 18 @ @ public extension ARMarkdownParser { 
 } 
 } 
 
 - nAttrText . appendColor ( textColor ) 
 + let range = NSRange ( location : 0 , length : nAttrText . length ) 
 + nAttrText . yy _ setColor ( textColor , range : range ) 
 + nAttrText . yy _ setFont ( UIFont . textFontOfSize ( fontSize ) , range : range ) 
 
 return ARMDFormattedText ( attributedText : nAttrText , isTrivial : false , code : sources ) 
 } 
 
 private func buildText ( text : ARMDText , fontSize : CGFloat ) - > NSAttributedString { 
 if let raw = text as ? ARMDRawText { 
 + / / let res = NSMutableAttributedString ( string : raw . getRawText ( ) ) 
 + / / res . yy _ setFont ( UIFont . textFontOfSize ( fontSize ) , range : NSRange ( location : 0 , length : raw . getRawText ( ) . length ) ) 
 + / / return res 
 return NSAttributedString ( string : raw . getRawText ( ) , font : UIFont . textFontOfSize ( fontSize ) ) 
 } else if let span = text as ? ARMDSpan { 
 let res = NSMutableAttributedString ( ) 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleTextCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleTextCell . swift 
 index a3596c3 . . 4aa5ff2 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleTextCell . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleTextCell . swift 
 @ @ - 4 , 11 + 4 , 10 @ @ 
 
 import Foundation 
 import UIKit 
 - import TTTAttributedLabel 
 import YYText 
 import YYImage 
 
 - public class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { 
 + public class AABubbleTextCell : AABubbleCell { 
 
 / / TODO : Better max width calculations 
 
 @ @ - 24 , 12 + 23 , 13 @ @ public class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { 
 static let bubbleFontUnsupported = fontItalic 
 static let senderHeight = CGFloat ( 20 ) 
 
 - let messageText = TTTAttributedLabel ( frame : CGRectZero ) 
 + let messageText = YYLabel ( ) 
 + let senderNameLabel = YYLabel ( ) ; 
 let statusView = UIImageView ( ) ; 
 - let senderNameLabel = AttributedLabel ( ) ; 
 - var needRelayout = true 
 - var isClanchTop : Bool = false 
 - var isClanchBottom : Bool = false 
 + 
 + private var needRelayout = true 
 + private var isClanchTop : Bool = false 
 + private var isClanchBottom : Bool = false 
 
 private let dateText = AttributedLabel ( ) 
 private var messageState = ACMessageState . UNKNOWN ( ) . ordinal ( ) 
 @ @ - 38 , 19 + 38 , 11 @ @ public class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { 
 public init ( frame : CGRect ) { 
 super . init ( frame : frame , isFullSize : false ) 
 
 - senderNameLabel . font = AABubbleTextCell . senderFont 
 - 
 - messageText . font = AABubbleTextCell . bubbleFont 
 - messageText . lineBreakMode = . ByWordWrapping 
 - messageText . numberOfLines = 0 
 - messageText . userInteractionEnabled = true 
 - messageText . delegate = self 
 - messageText . linkAttributes = [ kCTForegroundColorAttributeName : appStyle . chatUrlColor , 
 - kCTUnderlineStyleAttributeName : NSNumber ( bool : false ) ] 
 - messageText . activeLinkAttributes = [ kCTForegroundColorAttributeName : appStyle . chatUrlColor , 
 - kCTUnderlineStyleAttributeName : NSNumber ( bool : false ) ] 
 - messageText . verticalAlignment = TTTAttributedLabelVerticalAlignment . Center 
 + messageText . displaysAsynchronously = true 
 + messageText . ignoreCommonProperties = true 
 
 + senderNameLabel . displaysAsynchronously = true 
 + senderNameLabel . ignoreCommonProperties = true 
 
 dateText . font = AABubbleTextCell . dateFont 
 dateText . lineBreakMode = . ByClipping 
 @ @ - 63 , 6 + 55 , 7 @ @ public class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { 
 contentView . addSubview ( messageText ) 
 contentView . addSubview ( dateText ) 
 contentView . addSubview ( statusView ) 
 + contentView . addSubview ( senderNameLabel ) 
 } 
 
 public required init ( coder aDecoder : NSCoder ) { 
 @ @ - 83 , 39 + 76 , 18 @ @ public class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { 
 / / When not reusing force to relayout view 
 needRelayout = true 
 
 - / / Setting text ' s font size and color 
 - messageText . textColor = self . cellLayout . textColor 
 + / / Text Layout 
 + messageText . textLayout = self . cellLayout . textLayout 
 
 - if self . cellLayout . text ! = nil { 
 - 
 - / / Setting text 
 - messageText . text = self . cellLayout . text 
 - } else { 
 - 
 - / / Setting attributed text 
 - messageText . setText ( self . cellLayout . attrText ) 
 - } 
 + self . cellLayout . textLayout 
 
 / / Setting sender name if needed 
 if isGroup & & ! isOut { 
 - 
 - let user = Actor . getUserWithUid ( message . senderId ) 
 - 
 - let colors = ActorSDK . sharedActor ( ) . style . nameColors 
 - 
 - if user . isBot ( ) & & user . getNameModel ( ) . get ( ) = = " Bot " { 
 - let group = Actor . getGroupWithGid ( self . peer . peerId ) 
 - senderNameLabel . text = group . getNameModel ( ) . get ( ) 
 - senderNameLabel . textColor = colors [ Int ( abs ( group . getId ( ) ) ) % colors . count ] 
 - 
 - } else { 
 - senderNameLabel . text = user . getNameModel ( ) . get ( ) 
 - senderNameLabel . textColor = colors [ Int ( abs ( user . getId ( ) ) ) % colors . count ] 
 - } 
 - 
 - contentView . addSubview ( senderNameLabel ) 
 + senderNameLabel . hidden = false 
 + senderNameLabel . textLayout = self . cellLayout . senderLayout 
 } else { 
 - senderNameLabel . removeFromSuperview ( ) 
 + senderNameLabel . hidden = true 
 + senderNameLabel . textLayout = nil 
 } 
 } 
 
 @ @ - 205 , 71 + 177 , 64 @ @ public class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { 
 
 / / Url open handling 
 
 - public func attributedLabel ( label : TTTAttributedLabel ! , didLongPressLinkWithURL url : NSURL ! , atPoint point : CGPoint ) { 
 - let actionSheet : UIAlertController = UIAlertController ( title : nil , message : url . absoluteString , preferredStyle : . ActionSheet ) 
 - actionSheet . addAction ( UIAlertAction ( title : AALocalized ( " ActionOpenLink " ) , style : . Default , handler : { action in 
 - self . openUrl ( url ) 
 - } ) ) 
 - actionSheet . addAction ( UIAlertAction ( title : AALocalized ( " ActionCopyLink " ) , style : . Default , handler : { action in 
 - UIPasteboard . generalPasteboard ( ) . string = url . absoluteString 
 - self . controller . alertUser ( " AlertLinkCopied " ) 
 - } ) ) 
 - actionSheet . addAction ( UIAlertAction ( title : AALocalized ( " ActionCancel " ) , style : . Cancel , handler : nil ) ) 
 - self . controller . presentViewController ( actionSheet , animated : true , completion : nil ) 
 - } 
 - 
 - public func attributedLabel ( label : TTTAttributedLabel ! , didSelectLinkWithURL url : NSURL ! ) { 
 - openUrl ( url ) 
 - } 
 - 
 - public func openUrl ( url : NSURL ) { 
 - if url . scheme = = " source " { 
 - let path = url . path ! 
 - let index = Int ( path . substringFromIndex ( path . startIndex . advancedBy ( 1 ) ) ) ! 
 - let code = self . cellLayout . sources [ index ] 
 - self . controller . navigateNext ( AACodePreviewController ( code : code ) , removeCurrent : false ) 
 - } else { 
 - ActorSDK . sharedActor ( ) . openUrl ( url . absoluteString ) 
 - } 
 - } 
 + / / public func attributedLabel ( label : TTTAttributedLabel ! , didLongPressLinkWithURL url : NSURL ! , atPoint point : CGPoint ) { 
 + / / let actionSheet : UIAlertController = UIAlertController ( title : nil , message : url . absoluteString , preferredStyle : . ActionSheet ) 
 + / / actionSheet . addAction ( UIAlertAction ( title : AALocalized ( " ActionOpenLink " ) , style : . Default , handler : { action in 
 + / / self . openUrl ( url ) 
 + / / } ) ) 
 + / / actionSheet . addAction ( UIAlertAction ( title : AALocalized ( " ActionCopyLink " ) , style : . Default , handler : { action in 
 + / / UIPasteboard . generalPasteboard ( ) . string = url . absoluteString 
 + / / self . controller . alertUser ( " AlertLinkCopied " ) 
 + / / } ) ) 
 + / / actionSheet . addAction ( UIAlertAction ( title : AALocalized ( " ActionCancel " ) , style : . Cancel , handler : nil ) ) 
 + / / self . controller . presentViewController ( actionSheet , animated : true , completion : nil ) 
 + / / } 
 + / / 
 + / / public func attributedLabel ( label : TTTAttributedLabel ! , didSelectLinkWithURL url : NSURL ! ) { 
 + / / openUrl ( url ) 
 + / / } 
 + / / 
 + / / public func openUrl ( url : NSURL ) { 
 + / / if url . scheme = = " source " { 
 + / / let path = url . path ! 
 + / / let index = Int ( path . substringFromIndex ( path . startIndex . advancedBy ( 1 ) ) ) ! 
 + / / let code = self . cellLayout . sources [ index ] 
 + / / self . controller . navigateNext ( AACodePreviewController ( code : code ) , removeCurrent : false ) 
 + / / } else { 
 + / / ActorSDK . sharedActor ( ) . openUrl ( url . absoluteString ) 
 + / / } 
 + / / } 
 
 / / Layouting 
 
 public override func layoutContent ( maxWidth : CGFloat , offsetX : CGFloat ) { 
 + 
 / / Convenience 
 let insets = fullContentInsets 
 let contentWidth = self . contentView . frame . width 
 + let textSize = self . cellLayout . textLayout . textBoundingSize 
 + let bubbleWidth = round ( self . cellLayout . bubbleSize . width ) 
 + let bubbleHeight = round ( self . cellLayout . bubbleSize . height ) 
 
 - / / Measure Text 
 - let senderNameBounds = self . senderNameLabel . sizeThatFits ( CGSize ( width : CGFloat . max , height : CGFloat . max ) ) 
 - 
 - self . messageText . frame = CGRectMake ( 0 , 0 , self . cellLayout . textSize . width , self . cellLayout . textSize . height ) 
 - 
 - var textWidth = round ( self . cellLayout . textSizeWithPadding . width ) 
 - let textHeight = round ( self . cellLayout . textSizeWithPadding . height ) 
 - 
 - if textWidth < senderNameBounds . width { 
 - textWidth = senderNameBounds . width + 5 
 - } 
 - 
 + self . messageText . frame = CGRectMake ( 0 , 0 , textSize . width , textSize . height ) 
 + 
 / / Layout elements 
 - let topPadding : CGFloat = self . cellLayout . attrText ! = nil ? - 0 . 5 : 0 
 if ( self . isOut ) { 
 - self . messageText . frame . origin = CGPoint ( x : contentWidth - textWidth - insets . right , y : insets . top + topPadding ) 
 - self . dateText . frame = CGRectMake ( contentWidth - insets . right - 70 , textHeight + insets . top - 20 , 46 , 26 ) 
 - self . statusView . frame = CGRectMake ( contentWidth - insets . right - 24 , textHeight + insets . top - 20 , 20 , 26 ) 
 + self . messageText . frame . origin = CGPoint ( x : contentWidth - bubbleWidth - insets . right , y : insets . top / * + topPadding * / ) 
 + self . dateText . frame = CGRectMake ( contentWidth - insets . right - 70 , bubbleHeight + insets . top - 20 , 46 , 26 ) 
 + self . statusView . frame = CGRectMake ( contentWidth - insets . right - 24 , bubbleHeight + insets . top - 20 , 20 , 26 ) 
 self . statusView . hidden = false 
 } else { 
 - self . messageText . frame . origin = CGPoint ( x : insets . left , y : insets . top + topPadding ) 
 - self . dateText . frame = CGRectMake ( insets . left + textWidth - 47 , textHeight + insets . top - 20 , 46 , 26 ) 
 + self . messageText . frame . origin = CGPoint ( x : insets . left , y : insets . top / * + topPadding * / ) 
 + self . dateText . frame = CGRectMake ( insets . left + contentWidth - 47 , bubbleHeight + insets . top - 20 , 46 , 26 ) 
 self . statusView . hidden = true 
 } 
 
 if self . isGroup & & ! self . isOut { 
 - self . senderNameLabel . frame = CGRect ( x : insets . left , y : insets . top - 18 , width : textWidth , height : 20 ) 
 + self . senderNameLabel . frame = CGRect ( x : insets . left , y : insets . top - 18 , width : contentWidth , height : 20 ) 
 } 
 
 - layoutBubble ( textWidth , contentHeight : textHeight ) 
 + layoutBubble ( bubbleWidth , contentHeight : bubbleHeight ) 
 } 
 } 
 
 @ @ - 294 , 6 + 259 , 14 @ @ public class TextCellLayout : AACellLayout { 
 } 
 } 
 
 + private class func timeWidth ( isOut : Bool ) - > CGFloat { 
 + if isOut { 
 + return 60 
 + } else { 
 + return 36 
 + } 
 + } 
 + 
 private static let textKey = " text " 
 private static let unsupportedKey = " unsupported " 
 
 @ @ - 301 , 69 + 274 , 114 @ @ public class TextCellLayout : AACellLayout { 
 private static let stringInPadding = " " + ( " _ " . repeatString ( 4 ) ) ; 
 private static let parser = ARMarkdownParser ( int : ARMarkdownParser _ MODE _ FULL ) 
 
 - var text : String ? 
 - var attrText : NSAttributedString ? 
 - var textColor : UIColor 
 + var text : String 
 + var attrText : NSAttributedString 
 + var textLayout : YYTextLayout 
 + var senderLayout : YYTextLayout ? 
 
 var isUnsupported : Bool = false 
 - var textSizeWithPadding : CGSize 
 - var textSize : CGSize 
 + var bubbleSize : CGSize 
 var sources = [ String ] ( ) 
 
 / * * 
 - Plain text layout 
 - * / 
 - public init ( text : String , textColor : UIColor , date : Int64 , isOut : Bool , peer : ACPeer , layoutKey : String = TextCellLayout . textKey ) { 
 - 
 - / / Setting text 
 - self . text = text 
 - self . textColor = textColor 
 - 
 - / / Calculating maximum text width 
 - let maxTextWidth = TextCellLayout . maxTextWidth ( isOut , peer : peer ) 
 - 
 - / / Building padded text to make place for date and status checkmark 
 - let paddedText = ( text + ( isOut ? TextCellLayout . stringOutPadding : TextCellLayout . stringInPadding ) ) 
 - 
 - / / Measuring text and padded text heights 
 - textSize = UIViewMeasure . measureText ( text , width : maxTextWidth , font : AABubbleTextCell . bubbleFont ) 
 - textSizeWithPadding = UIViewMeasure . measureText ( paddedText , width : maxTextWidth , font : AABubbleTextCell . bubbleFont ) 
 - 
 - / / Calculating bubble height 
 - var height = textSizeWithPadding . height + AABubbleCell . bubbleContentTop + AABubbleCell . bubbleContentBottom 
 - 
 - if peer . isGroup & & ! isOut { 
 - height + = AABubbleTextCell . senderHeight 
 - } 
 - 
 - / / Creating layout 
 - super . init ( height : height , date : date , key : layoutKey ) 
 - } 
 - 
 - / * * 
 - NSAttributedString layout 
 - * / 
 - public init ( attributedText : NSAttributedString , textColor : UIColor , date : Int64 , isOut : Bool , peer : ACPeer , layoutKey : String = TextCellLayout . textKey ) { 
 + NSAttributedString layout 
 + * / 
 + public init ( senderId : Int , text : String , attributedText : NSAttributedString , date : Int64 , isOut : Bool , peer : ACPeer , layoutKey : String = TextCellLayout . textKey ) { 
 
 / / Setting attributed text 
 + self . text = text 
 self . attrText = attributedText 
 - self . textColor = textColor 
 self . isUnsupported = false 
 
 / / Calculating maximum text width 
 let maxTextWidth = TextCellLayout . maxTextWidth ( isOut , peer : peer ) 
 + let timeWidth = TextCellLayout . timeWidth ( isOut ) 
 + 
 + let container = YYTextContainer ( size : CGSizeMake ( maxTextWidth , CGFloat . max ) ) 
 
 - / / Building padded text 
 - let paddedText = attributedText . append ( isOut ? TextCellLayout . stringOutPadding : TextCellLayout . stringInPadding , font : AABubbleTextCell . bubbleFont ) 
 + textLayout = YYTextLayout ( container : container , text : attributedText ) ! 
 
 / / Measuring text and padded text heights 
 - textSize = UIViewMeasure . measureText ( attributedText , width : maxTextWidth ) 
 - textSizeWithPadding = UIViewMeasure . measureText ( paddedText , width : maxTextWidth ) 
 + let textSize = textLayout . textBoundingSize 
 + 
 + if textLayout . lines . count = = 1 { 
 + if textLayout . textBoundingSize . width < maxTextWidth - timeWidth { 
 + / / 
 + / / < line _ 0 > < date > 
 + / / 
 + bubbleSize = CGSize ( width : textSize . width + timeWidth , height : textSize . height ) 
 + } else { 
 + 
 + / / 
 + / / < line _ _ _ _ _ _ _ _ _ 0 > 
 + / / < date > 
 + / / 
 + bubbleSize = CGSize ( width : textSize . width , height : textSize . height + 16 ) 
 + } 
 + } else { 
 + let maxWidth = textSize . width 
 + let lastLine = textLayout . lines . last ! . width 
 + if lastLine + timeWidth < maxWidth { 
 + / / 
 + / / < line _ _ _ _ _ _ _ _ _ 0 > 
 + / / < line _ _ _ _ _ _ _ _ _ 1 > 
 + / / . . 
 + / / < line _ n > < date > 
 + / / 
 + bubbleSize = textSize 
 + } else if lastLine + timeWidth < maxTextWidth { 
 + / / 
 + / / | - - - - - - - - - - - - - - - - - - | 
 + / / < line _ _ _ _ _ _ 0 > 
 + / / < line _ _ _ _ _ _ 1 > 
 + / / . . 
 + / / < line _ _ _ _ _ _ n > < date > 
 + / / 
 + bubbleSize = CGSize ( width : max ( lastLine + timeWidth , maxWidth ) , height : textSize . height ) 
 + } else { 
 + / / 
 + / / < line _ _ _ _ _ _ _ _ _ 0 > 
 + / / < line _ _ _ _ _ _ _ _ _ 1 > 
 + / / . . 
 + / / < line _ _ _ _ _ _ _ _ _ n > 
 + / / < date > 
 + / / 
 + bubbleSize = CGSize ( width : max ( timeWidth , maxWidth ) , height : textSize . height + 16 ) 
 + } 
 + } 
 + 
 
 / / Calculating bubble height 
 - var height = textSizeWithPadding . height + AABubbleCell . bubbleContentTop + AABubbleCell . bubbleContentBottom 
 + var height = bubbleSize . height + AABubbleCell . bubbleContentTop + AABubbleCell . bubbleContentBottom 
 
 if peer . isGroup & & ! isOut { 
 + 
 + / / Getting Name of sender 
 + let sender = Actor . getUserWithUid ( jint ( senderId ) ) 
 + let colors = ActorSDK . sharedActor ( ) . style . nameColors 
 + var senderName : String 
 + var color : UIColor 
 + if sender . isBot ( ) & & sender . getNameModel ( ) . get ( ) = = " Bot " { 
 + senderName = Actor . getGroupWithGid ( peer . peerId ) . getNameModel ( ) . get ( ) 
 + color = colors [ Int ( abs ( peer . peerId ) ) % colors . count ] 
 + } else { 
 + senderName = sender . getNameModel ( ) . get ( ) 
 + color = colors [ Int ( abs ( senderId ) ) % colors . count ] 
 + } 
 + 
 + / / Building Layout 
 + let attributedSender = NSMutableAttributedString ( string : senderName ) 
 + let range = NSRange ( location : 0 , length : senderName . length ) 
 + attributedSender . yy _ setFont ( AABubbleTextCell . senderFont , range : range ) 
 + attributedSender . yy _ setColor ( color , range : range ) 
 + senderLayout = YYTextLayout ( container : container , text : attributedSender ) ! 
 + 
 + / / Fixing too small width 
 + let senderWidth = senderLayout ! . textBoundingSize . width 
 + if bubbleSize . width < senderWidth + 5 { 
 + bubbleSize = CGSize ( width : senderWidth , height : bubbleSize . height ) 
 + } 
 + 
 height + = AABubbleTextCell . senderHeight 
 } 
 
 @ @ - 374 , 25 + 392 , 16 @ @ public class TextCellLayout : AACellLayout { 
 / * * 
 Formatted text layout . Automatically parse text and detect formatting . 
 * / 
 - public convenience init ( formattedText : String , textColor : UIColor , date : Int64 , isOut : Bool , peer : ACPeer , layoutKey : String = TextCellLayout . textKey ) { 
 + public convenience init ( senderId : Int , formattedText : String , textColor : UIColor , date : Int64 , isOut : Bool , peer : ACPeer , layoutKey : String = TextCellLayout . textKey ) { 
 
 / / Parsing markdown formatted text 
 let text = TextCellLayout . parser . parse ( formattedText , textColor : textColor , fontSize : AABubbleTextCell . fontSize ) 
 
 - / / If text is trivial don ' t use NSAttributedText 
 - if text . isTrivial { 
 - 
 - / / Creating simple text layout 
 - self . init ( text : formattedText , textColor : textColor , date : date , isOut : isOut , peer : peer , layoutKey : layoutKey ) 
 - 
 - } else { 
 - 
 - / / Creating attributed text layout 
 - self . init ( attributedText : text . attributedText , textColor : textColor , date : date , isOut : isOut , peer : peer , layoutKey : layoutKey ) 
 - 
 - / / Setting source code references 
 - self . sources = text . code 
 - } 
 + / / Creating attributed text layout 
 + self . init ( senderId : senderId , text : formattedText , attributedText : text . attributedText , date : date , isOut : isOut , peer : peer , layoutKey : layoutKey ) 
 + 
 + / / Setting source code references 
 + self . sources = text . code 
 } 
 
 / * * 
 @ @ - 405 , 6 + 414 , 7 @ @ public class TextCellLayout : AACellLayout { 
 
 / / Creating generic layout 
 self . init ( 
 + senderId : Int ( message . senderId ) , 
 formattedText : content . text , 
 textColor : message . isOut ? style . chatTextOutColor : style . chatTextInColor , 
 date : Int64 ( message . date ) , 
 @ @ - 418 , 6 + 428 , 7 @ @ public class TextCellLayout : AACellLayout { 
 let unsupportedText = AALocalized ( " UnsupportedContent " ) 
 
 self . init ( 
 + senderId : Int ( message . senderId ) , 
 formattedText : " _ \ ( unsupportedText ) _ " , 
 textColor : message . isOut ? style . chatTextOutUnsupportedColor : style . chatTextInUnsupportedColor , 
 date : Int64 ( message . date ) , 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift 
 index 4386865 . . 2afae64 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift 
 @ @ - 84 , 7 + 84 , 10 @ @ public class AAConvActionSheet : UIView , AAThumbnailViewDelegate { 
 UIView . animateWithDuration ( 0 . 25 , animations : { ( ) - > Void in 
 self . sheetView . frame = nextFrame 
 self . backgroundView . alpha = 0 } ) { ( bool ) - > Void in 
 - self . removeFromSuperview ( ) 
 + self . delegate = nil 
 + self . thumbnailView . dismiss ( ) 
 + self . thumbnailView = nil 
 + self . removeFromSuperview ( ) 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - apps / app - ios / ActorClient / AABubbleAdCell . swift b / actor - apps / app - ios / ActorClient / AABubbleAdCell . swift 
 index 54c2b14 . . 63b7191 100644 
 - - - a / actor - apps / app - ios / ActorClient / AABubbleAdCell . swift 
 + + + b / actor - apps / app - ios / ActorClient / AABubbleAdCell . swift 
 @ @ - 28 , 7 + 28 , 7 @ @ class AABubbleAdCell : AABubbleCell { 
 fatalError ( " init ( coder : ) has not been implemented " ) 
 } 
 
 - override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , isPreferCompact : Bool ) { 
 + override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , setting : CellSetting ) { 
 var content = message . getContent ( ) as ! AMBannerContent 
 
 } 
 diff - - git a / actor - apps / app - ios / ActorClient / AABubbleCell . swift b / actor - apps / app - ios / ActorClient / AABubbleCell . swift 
 index 93b9510 . . a934d93 100644 
 - - - a / actor - apps / app - ios / ActorClient / AABubbleCell . swift 
 + + + b / actor - apps / app - ios / ActorClient / AABubbleCell . swift 
 @ @ - 13 , 9 + 13 , 9 @ @ class AABubbleCell : UICollectionViewCell { 
 static let bubbleContentTop : CGFloat = 6 
 static let bubbleContentBottom : CGFloat = 6 
 static let bubbleTop : CGFloat = 3 
 - static let bubbleTopCompact : CGFloat = 3 
 + static let bubbleTopCompact : CGFloat = 1 
 static let bubbleBottom : CGFloat = 3 
 - static let bubbleBottomCompact : CGFloat = 3 
 + static let bubbleBottomCompact : CGFloat = 1 
 static let avatarPadding : CGFloat = 39 
 static let dateSize : CGFloat = 30 
 static let newMessageSize : CGFloat = 30 
 @ @ - 76 , 6 + 76 , 7 @ @ class AABubbleCell : UICollectionViewCell { 
 var peer : AMPeer ! 
 var isGroup : Bool = false 
 var isFullSize : Bool ! 
 + var bindedSetting : CellSetting ? 
 
 var bindedMessage : AMMessage ? = nil 
 var bubbleType : BubbleType ? = nil 
 @ @ - 106 , 9 + 107 , 8 @ @ class AABubbleCell : UICollectionViewCell { 
 
 bubble . userInteractionEnabled = true 
 
 - mainView . transform = CGAffineTransformMake ( 1 , 0 , 0 , - 1 , 0 , 0 ) 
 
 - / / mainView . transform = CGAffineTransformIdentity 
 + mainView . transform = CGAffineTransformMake ( 1 , 0 , 0 , - 1 , 0 , 0 ) 
 
 mainView . addSubview ( bubble ) 
 mainView . addSubview ( bubbleBorder ) 
 @ @ - 118 , 12 + 118 , 9 @ @ class AABubbleCell : UICollectionViewCell { 
 
 contentView . addSubview ( mainView ) 
 
 - / / if ( peer . getPeerType ( ) . ordinal ( ) = = jint ( AMPeerType . GROUP . rawValue ) & & ! isFullSize ) { 
 - / / self . isGroup = true 
 - / / } 
 - 
 backgroundColor = UIColor . clearColor ( ) 
 
 + / / Speed up animations 
 self . layer . speed = 1 . 5 
 } 
 
 @ @ - 131 , 6 + 128 , 13 @ @ class AABubbleCell : UICollectionViewCell { 
 fatalError ( " init ( coder : ) has not been implemented " ) 
 } 
 
 + func setConfig ( peer : AMPeer ) { 
 + self . peer = peer 
 + if ( peer . getPeerType ( ) . ordinal ( ) = = jint ( AMPeerType . GROUP . rawValue ) & & ! isFullSize ) { 
 + self . isGroup = true 
 + } 
 + } 
 + 
 override func canBecomeFirstResponder ( ) - > Bool { 
 return true 
 } 
 @ @ - 139 , 8 + 143 , 7 @ @ class AABubbleCell : UICollectionViewCell { 
 return false 
 } 
 
 - func performBind ( message : AMMessage , isPreferCompact : Bool , isShowDate : Bool , isShowNewMessages : Bool , 
 - layoutCache : LayoutCache ) { 
 + func performBind ( message : AMMessage , setting : CellSetting , layoutCache : LayoutCache ) { 
 self . clipsToBounds = false 
 self . contentView . clipsToBounds = false 
 
 @ @ - 150 , 23 + 153 , 23 @ @ class AABubbleCell : UICollectionViewCell { 
 } 
 isOut = message . getSenderId ( ) = = MSG . myUid ( ) ; 
 bindedMessage = message 
 - self . isShowNewMessages = isShowNewMessages 
 + self . isShowNewMessages = setting . showNewMessages 
 if ( ! reuse ) { 
 if ( ! isFullSize ) { 
 - / / if ( ! isOut & & isGroup ) { 
 - / / if let user = MSG . getUserWithUid ( message . getSenderId ( ) ) { 
 - / / let avatar : AMAvatar ? = user . getAvatarModel ( ) . get ( ) 
 - / / let name = user . getNameModel ( ) . get ( ) 
 - / / / / avatarView . bind ( name , id : user . getId ( ) , avatar : avatar ) 
 - / / } 
 - / / contentView . addSubview ( avatarView ) 
 - / / } else { 
 - / / avatarView . removeFromSuperview ( ) 
 - / / } 
 + if ( ! isOut & & isGroup ) { 
 + if let user = MSG . getUserWithUid ( message . getSenderId ( ) ) { 
 + let avatar : AMAvatar ? = user . getAvatarModel ( ) . get ( ) 
 + let name = user . getNameModel ( ) . get ( ) 
 + avatarView . bind ( name , id : user . getId ( ) , avatar : avatar ) 
 + } 
 + mainView . addSubview ( avatarView ) 
 + } else { 
 + avatarView . removeFromSuperview ( ) 
 + } 
 } 
 } 
 
 - self . isShowDate = isShowDate 
 + self . isShowDate = setting . showDate 
 if ( isShowDate ) { 
 self . dateText . text = MSG . getFormatter ( ) . formatDate ( message . getDate ( ) ) 
 } 
 @ @ - 177 , 8 + 180 , 10 @ @ class AABubbleCell : UICollectionViewCell { 
 layout = MessagesLayouting . buildLayout ( message , layoutCache : layoutCache ) 
 layoutCache . cache ( message . getRid ( ) , layout : layout ! ) 
 } 
 - 
 - bind ( message , reuse : reuse , cellLayout : layout ! , isPreferCompact : isPreferCompact ) 
 + 
 + self . bindedSetting = setting 
 + 
 + bind ( message , reuse : reuse , cellLayout : layout ! , setting : setting ) 
 
 if ( ! reuse ) { 
 needLayout = true 
 @ @ - 186 , 7 + 191 , 7 @ @ class AABubbleCell : UICollectionViewCell { 
 } 
 } 
 
 - func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , isPreferCompact : Bool ) { 
 + func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , setting : CellSetting ) { 
 fatalError ( " bind ( message : ) has not been implemented " ) 
 } 
 
 diff - - git a / actor - apps / app - ios / ActorClient / AABubbleMediaCell . swift b / actor - apps / app - ios / ActorClient / AABubbleMediaCell . swift 
 index dea0d7e . . ba8aca2 100644 
 - - - a / actor - apps / app - ios / ActorClient / AABubbleMediaCell . swift 
 + + + b / actor - apps / app - ios / ActorClient / AABubbleMediaCell . swift 
 @ @ - 52 , 11 + 52 , 6 @ @ class AABubbleMediaCell : AABubbleBaseFileCell { 
 mainView . addSubview ( timeLabel ) 
 mainView . addSubview ( statusView ) 
 
 - bubbleInsets = UIEdgeInsets ( 
 - top : 3 , 
 - left : 10 , 
 - bottom : 3 , 
 - right : 10 ) 
 contentInsets = UIEdgeInsets ( top : 1 , left : 1 , bottom : 1 , right : 1 ) 
 } 
 
 @ @ - 66 , 7 + 61 , 14 @ @ class AABubbleMediaCell : AABubbleBaseFileCell { 
 
 / / MARK : - 
 
 - override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , isPreferCompact : Bool ) { 
 + override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , setting : CellSetting ) { 
 + 
 + bubbleInsets = UIEdgeInsets ( 
 + top : setting . clenchTop ? AABubbleCell . bubbleTopCompact : AABubbleCell . bubbleTop , 
 + left : 10 , 
 + bottom : setting . clenchBottom ? AABubbleCell . bubbleBottomCompact : AABubbleCell . bubbleBottom , 
 + right : 10 ) 
 + 
 if ( ! reuse ) { 
 
 / / Bind bubble 
 @ @ - 107 , 7 + 109 , 7 @ @ class AABubbleMediaCell : AABubbleBaseFileCell { 
 } ) 
 
 / / Bind file 
 - / / fileBind ( message , autoDownload : message . getContent ( ) is AMPhotoContent ) 
 + fileBind ( message , autoDownload : message . getContent ( ) is AMPhotoContent ) 
 } 
 
 / / Update time 
 diff - - git a / actor - apps / app - ios / ActorClient / AABubbleServiceCell . swift b / actor - apps / app - ios / ActorClient / AABubbleServiceCell . swift 
 index aaeaeee . . 300310f 100644 
 - - - a / actor - apps / app - ios / ActorClient / AABubbleServiceCell . swift 
 + + + b / actor - apps / app - ios / ActorClient / AABubbleServiceCell . swift 
 @ @ - 51 , 7 + 51 , 7 @ @ class AABubbleServiceCell : AABubbleCell { 
 / / MARK : - 
 / / MARK : Bind 
 
 - override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , isPreferCompact : Bool ) { 
 + override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , setting : CellSetting ) { 
 if ( ! reuse ) { 
 serviceText . text = MSG . getFormatter ( ) . formatFullServiceMessageWithSenderId ( message . getSenderId ( ) , withContent : message . getContent ( ) as ! AMServiceContent ) 
 } 
 diff - - git a / actor - apps / app - ios / ActorClient / AABubbleTextCell . swift b / actor - apps / app - ios / ActorClient / AABubbleTextCell . swift 
 index 2c3ea8e . . ebc0dfe 100644 
 - - - a / actor - apps / app - ios / ActorClient / AABubbleTextCell . swift 
 + + + b / actor - apps / app - ios / ActorClient / AABubbleTextCell . swift 
 @ @ - 9 , 11 + 9 , 12 @ @ class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { 
 
 private static let dateFont = UIFont ( name : " HelveticaNeue - Italic " , size : 11 ) ! 
 
 - let messageText = TTTAttributedLabel ( frame : CGRectZero ) 
 + let messageText = UILabel ( ) 
 let statusView = UIImageView ( ) ; 
 let senderNameLabel = UILabel ( ) ; 
 var needRelayout = true 
 - var isCompact : Bool = false 
 + var isClanchTop : Bool = false 
 + var isClanchBottom : Bool = false 
 
 private let dateText = UILabel ( ) 
 private var messageState : UInt = AMMessageState . UNKNOWN . rawValue 
 @ @ - 26 , 8 + 27 , 6 @ @ class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { 
 
 messageText . lineBreakMode = . ByWordWrapping 
 messageText . numberOfLines = 0 
 - messageText . enabledTextCheckingTypes = NSTextCheckingType . Link . rawValue 
 - messageText . delegate = self 
 messageText . userInteractionEnabled = true 
 
 dateText . font = AABubbleTextCell . dateFont 
 @ @ - 55 , 8 + 54 , 11 @ @ class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { 
 UIApplication . sharedApplication ( ) . openURL ( url ) 
 } 
 
 - override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , isPreferCompact : Bool ) { 
 + override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , setting : CellSetting ) { 
 self . cellLayout = cellLayout as ! TextCellLayout 
 + isClanchTop = setting . clenchTop 
 + isClanchBottom = setting . clenchBottom 
 + 
 if ( ! reuse ) { 
 needRelayout = true 
 
 @ @ - 79 , 37 + 81 , 6 @ @ class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { 
 } 
 } 
 
 - isCompact = isPreferCompact 
 - 
 - if ( isOut ) { 
 - bindBubbleType ( . TextOut , isCompact : isPreferCompact ) 
 - dateText . textColor = MainAppTheme . bubbles . textDateOut 
 - 
 - bubbleInsets = UIEdgeInsets ( 
 - top : ( isPreferCompact ? AABubbleCell . bubbleTopCompact : AABubbleCell . bubbleTop ) , 
 - left : 0 + ( isIPad ? 16 : 0 ) , 
 - bottom : ( isPreferCompact ? AABubbleCell . bubbleBottomCompact : AABubbleCell . bubbleBottom ) , 
 - right : ( isPreferCompact ? 10 : 4 ) + ( isIPad ? 16 : 0 ) ) 
 - contentInsets = UIEdgeInsets ( 
 - top : AABubbleCell . bubbleContentTop , 
 - left : 10 , 
 - bottom : AABubbleCell . bubbleContentBottom , 
 - right : ( isPreferCompact ? 4 : 10 ) ) 
 - } else { 
 - bindBubbleType ( . TextIn , isCompact : isPreferCompact ) 
 - dateText . textColor = MainAppTheme . bubbles . textDateIn 
 - 
 - bubbleInsets = UIEdgeInsets ( 
 - top : ( isPreferCompact ? AABubbleCell . bubbleTopCompact : AABubbleCell . bubbleTop ) , 
 - left : ( isPreferCompact ? 10 : 4 ) + ( isIPad ? 16 : 0 ) , 
 - bottom : ( isPreferCompact ? AABubbleCell . bubbleBottomCompact : AABubbleCell . bubbleBottom ) , 
 - right : 0 + ( isIPad ? 16 : 0 ) ) 
 - contentInsets = UIEdgeInsets ( 
 - top : ( isGroup ? 18 : 0 ) + AABubbleCell . bubbleContentTop , 
 - left : ( isPreferCompact ? 11 : 17 ) , 
 - bottom : AABubbleCell . bubbleContentBottom , 
 - right : 10 ) 
 - } 
 
 if isGroup & & ! isOut { 
 if let user = MSG . getUserWithUid ( message . getSenderId ( ) ) { 
 @ @ - 117 , 13 + 88 , 44 @ @ class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { 
 var color = Resources . placeHolderColors [ Int ( abs ( user . getId ( ) ) ) % Resources . placeHolderColors . count ] ; 
 senderNameLabel . textColor = color 
 } 
 - contentView . addSubview ( senderNameLabel ) 
 - 
 + mainView . addSubview ( senderNameLabel ) 
 } else { 
 senderNameLabel . removeFromSuperview ( ) 
 } 
 } 
 
 + / / Always update bubble insets 
 + if ( isOut ) { 
 + bindBubbleType ( . TextOut , isCompact : isClanchBottom ) 
 + dateText . textColor = MainAppTheme . bubbles . textDateOut 
 + 
 + bubbleInsets = UIEdgeInsets ( 
 + top : ( isClanchTop ? AABubbleCell . bubbleTopCompact : AABubbleCell . bubbleTop ) , 
 + left : 0 + ( isIPad ? 16 : 0 ) , 
 + bottom : ( isClanchBottom ? AABubbleCell . bubbleBottomCompact : AABubbleCell . bubbleBottom ) , 
 + right : ( isClanchBottom ? 10 : 4 ) + ( isIPad ? 16 : 0 ) ) 
 + contentInsets = UIEdgeInsets ( 
 + top : AABubbleCell . bubbleContentTop , 
 + left : 10 , 
 + bottom : AABubbleCell . bubbleContentBottom , 
 + right : ( isClanchBottom ? 4 : 10 ) ) 
 + } else { 
 + bindBubbleType ( . TextIn , isCompact : isClanchBottom ) 
 + dateText . textColor = MainAppTheme . bubbles . textDateIn 
 + 
 + bubbleInsets = UIEdgeInsets ( 
 + top : ( isClanchTop ? AABubbleCell . bubbleTopCompact : AABubbleCell . bubbleTop ) , 
 + left : ( isClanchBottom ? 10 : 4 ) + ( isIPad ? 16 : 0 ) , 
 + bottom : ( isClanchBottom ? AABubbleCell . bubbleBottomCompact : AABubbleCell . bubbleBottom ) , 
 + right : 0 + ( isIPad ? 16 : 0 ) ) 
 + contentInsets = UIEdgeInsets ( 
 + top : ( isGroup ? 18 : 0 ) + AABubbleCell . bubbleContentTop , 
 + left : ( isClanchBottom ? 11 : 17 ) , 
 + bottom : AABubbleCell . bubbleContentBottom , 
 + right : 10 ) 
 + } 
 + 
 + 
 / / Always update date and state 
 dateText . text = cellLayout . date 
 messageState = UInt ( message . getMessageState ( ) . ordinal ( ) ) ; 
 @ @ - 156 , 30 + 158 , 10 @ @ class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { 
 break ; 
 } 
 } 
 + 
 + setNeedsLayout ( ) 
 } 
 
 - / / MARK : - 
 - / / MARK : Getters 
 - 
 - / / class func measureTextHeight ( message : AMMessage , isPreferCompact : Bool , heightCache : HeightCache ) - > CGFloat { 
 - / / var messageContent = " " 
 - / / if let content = message . getContent ( ) as ? AMTextContent { 
 - / / messageContent = content . getText ( ) 
 - / / } else { 
 - / / messageContent = NSLocalizedString ( " UnsupportedContent " , comment : " Unsupported text " ) 
 - / / } 
 - / / let contentHeight = AABubbleTextCell . measureText ( message . getRid ( ) , message : messageContent , isOut : message . getSenderId ( ) = = MSG . myUid ( ) , heightCache : heightCache ) . height 
 - / / 
 - / / if ( isPreferCompact ) { 
 - / / return contentHeight + bubbleBottomCompact + bubbleContentBottom + bubbleContentTop + bubbleTopCompact 
 - / / } else { 
 - / / return contentHeight + bubbleBottom + bubbleContentBottom + bubbleContentTop + bubbleTop 
 - / / } 
 - / / } 
 - / / 
 - / / MARK : - 
 - / / MARK : MenuController 
 - 
 override func canPerformAction ( action : Selector , withSender sender : AnyObject ? ) - > Bool { 
 if NSStringFromSelector ( action ) = = " copy : " { 
 return true 
 @ @ - 201 , 14 + 183 , 13 @ @ class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { 
 var contentHeight = self . contentView . frame . height 
 
 / / Measure Text 
 - / / var textBounds = AABubbleTextCell . measureText ( self . bindedMessage ! . getRid ( ) , message : self . messageText . text ! , isOut : self . isOut , heightCache : heightCache ) 
 var senderNameBounds = self . senderNameLabel . sizeThatFits ( CGSize ( width : CGFloat . max , height : CGFloat . max ) ) 
 
 - self . messageText . frame = CGRectMake ( 0 , 0 , self . cellLayout . textSize . width , self . cellLayout . textSize . height ) 
 - / / self . messageText . sizeToFit ( ) 
 + self . messageText . frame = CGRectMake ( 0 , 0 , self . cellLayout . textSizeWithPadding . width , self . cellLayout . textSizeWithPadding . height ) 
 + self . messageText . sizeToFit ( ) 
 
 - var textWidth = round ( self . cellLayout . textSize . width ) 
 - var textHeight = round ( self . cellLayout . textSize . height ) 
 + var textWidth = round ( self . cellLayout . textSizeWithPadding . width ) 
 + var textHeight = round ( self . cellLayout . textSizeWithPadding . height ) 
 
 if textWidth < senderNameBounds . width { 
 textWidth = senderNameBounds . width + 5 
 @ @ - 232 , 32 + 213 , 4 @ @ class AABubbleTextCell : AABubbleCell , TTTAttributedLabelDelegate { 
 
 layoutBubble ( textWidth , contentHeight : textHeight ) 
 } 
 - 
 - / / / / Using padding for proper date align . 
 - / / / / One space + 16 non - breakable spases for out messages 
 - / / private static let stringOutPadding = " \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } " ; 
 - / / 
 - / / / / One space + 6 non - breakable spaces for in messages 
 - / / private static let stringInPadding = " \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } \ u { 00A0 } " ; 
 - / / 
 - / / private static let maxTextWidth = 210 
 - / / 
 - / / private class func measureText ( rid : jlong , message : String , isOut : Bool , heightCache : HeightCache ) - > CGSize { 
 - / / var cached = heightCache . pick ( rid ) 
 - / / if ( cached ! = nil ) { 
 - / / println ( " measureText : cached " ) 
 - / / return cached ! 
 - / / } 
 - / / println ( " measureText " ) 
 - / / var style = NSMutableParagraphStyle ( ) ; 
 - / / style . lineBreakMode = NSLineBreakMode . ByWordWrapping ; 
 - / / 
 - / / var text = ( message + ( isOut ? stringOutPadding : stringInPadding ) ) as NSString ; 
 - / / 
 - / / var size = CGSize ( width : maxTextWidth , height : 0 ) ; 
 - / / var rect = text . boundingRectWithSize ( size , options : NSStringDrawingOptions . UsesLineFragmentOrigin , attributes : [ NSFontAttributeName : bubbleFont , NSParagraphStyleAttributeName : style ] , context : nil ) ; 
 - / / var res = CGSizeMake ( round ( rect . width ) , round ( rect . height ) ) 
 - / / heightCache . cache ( rid , size : res ) 
 - / / return res 
 - / / } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - apps / app - ios / ActorClient / BubbleLayouts . swift b / actor - apps / app - ios / ActorClient / BubbleLayouts . swift 
 index 8e2f94f . . a418194 100644 
 - - - a / actor - apps / app - ios / ActorClient / BubbleLayouts . swift 
 + + + b / actor - apps / app - ios / ActorClient / BubbleLayouts . swift 
 @ @ - 10 , 27 + 10 , 27 @ @ import Foundation 
 
 class MessagesLayouting { 
 
 - class func measureHeight ( message : AMMessage , group : Bool , isPreferCompact : Bool , isShowDate : Bool , isShowNewMessages : Bool , layoutCache : LayoutCache ) - > CGFloat { 
 + class func measureHeight ( message : AMMessage , group : Bool , setting : CellSetting , layoutCache : LayoutCache ) - > CGFloat { 
 var content = message . getContent ( ) ! 
 
 var layout = layoutCache . pick ( message . getRid ( ) ) 
 if ( layout = = nil ) { 
 + / / Usually never happens 
 layout = buildLayout ( message , layoutCache : layoutCache ) 
 layoutCache . cache ( message . getRid ( ) , layout : layout ! ) 
 - println ( " Build in UI thread " ) 
 } 
 
 var height = layout ! . height 
 - if isPreferCompact & & ! ( content is AMServiceContent ) { 
 - height + = AABubbleCell . bubbleBottomCompact + 
 - AABubbleCell . bubbleContentBottom + 
 - AABubbleCell . bubbleContentTop + 
 - AABubbleCell . bubbleTopCompact 
 + if content is AMServiceContent { 
 + height + = AABubbleCell . bubbleTop 
 + height + = AABubbleCell . bubbleBottom 
 + height + = AABubbleCell . bubbleContentTop 
 + height + = AABubbleCell . bubbleContentBottom 
 } else { 
 - height + = AABubbleCell . bubbleBottom + 
 - AABubbleCell . bubbleContentBottom + 
 - AABubbleCell . bubbleContentTop + 
 - AABubbleCell . bubbleTop 
 + height + = ( setting . clenchTop ? AABubbleCell . bubbleTopCompact : AABubbleCell . bubbleTop ) 
 + height + = ( setting . clenchBottom ? AABubbleCell . bubbleBottomCompact : AABubbleCell . bubbleBottom ) 
 + height + = AABubbleCell . bubbleContentTop 
 + height + = AABubbleCell . bubbleContentBottom 
 } 
 
 / / Sender name 
 @ @ - 40 , 12 + 40 , 12 @ @ class MessagesLayouting { 
 } 
 
 / / Date separator 
 - if ( isShowDate ) { 
 + if ( setting . showDate ) { 
 height + = AABubbleCell . dateSize 
 } 
 
 / / New message separator 
 - if ( isShowNewMessages ) { 
 + if ( setting . showNewMessages ) { 
 height + = AABubbleCell . newMessageSize 
 } 
 
 @ @ - 78 , 12 + 78 , 26 @ @ class MessagesLayouting { 
 } 
 } 
 
 + class CellSetting { 
 + let showNewMessages : Bool 
 + let showDate : Bool 
 + let clenchTop : Bool 
 + let clenchBottom : Bool 
 + 
 + init ( showDate : Bool , clenchTop : Bool , clenchBottom : Bool , showNewMessages : Bool ) { 
 + self . showDate = showDate 
 + self . clenchTop = clenchTop 
 + self . clenchBottom = clenchBottom 
 + self . showNewMessages = showNewMessages 
 + } 
 + } 
 + 
 class CellLayout { 
 var height : CGFloat = 0 
 var date : String 
 
 init ( message : AMMessage ) { 
 - date = CellLayout . formatDate ( Int64 ( message . getDate ( ) ) ) 
 + self . date = CellLayout . formatDate ( Int64 ( message . getDate ( ) ) ) 
 } 
 
 class func formatDate ( date : Int64 ) - > String { 
 @ @ - 104 , 6 + 118 , 7 @ @ class TextCellLayout : CellLayout { 
 
 var text : String 
 var isUnsupported : Bool 
 + var textSizeWithPadding : CGSize 
 var textSize : CGSize 
 
 override init ( message : AMMessage ) { 
 @ @ - 127 , 10 + 142 , 16 @ @ class TextCellLayout : CellLayout { 
 options : NSStringDrawingOptions . UsesLineFragmentOrigin , 
 attributes : [ NSFontAttributeName : isUnsupported ? TextCellLayout . bubbleFontUnsupported : TextCellLayout . bubbleFont , NSParagraphStyleAttributeName : style ] , 
 context : nil ) ; 
 + textSizeWithPadding = CGSizeMake ( round ( rect . width ) , round ( rect . height ) ) 
 
 + rect = text . boundingRectWithSize ( size , 
 + options : NSStringDrawingOptions . UsesLineFragmentOrigin , 
 + attributes : [ NSFontAttributeName : isUnsupported ? TextCellLayout . bubbleFontUnsupported : TextCellLayout . bubbleFont , NSParagraphStyleAttributeName : style ] , 
 + context : nil ) ; 
 textSize = CGSizeMake ( round ( rect . width ) , round ( rect . height ) ) 
 + 
 super . init ( message : message ) 
 - height = textSize . height 
 + height = textSizeWithPadding . height 
 } 
 } 
 
 diff - - git a / actor - apps / app - ios / ActorClient / ConversationMessagesController . swift b / actor - apps / app - ios / ActorClient / ConversationMessagesController . swift 
 index c8726e2 . . 5d164e8 100644 
 - - - a / actor - apps / app - ios / ActorClient / ConversationMessagesController . swift 
 + + + b / actor - apps / app - ios / ActorClient / ConversationMessagesController . swift 
 @ @ - 114 , 15 + 114 , 15 @ @ class ConversationMessagesController : SLKTextViewController , UICollectionViewDel 
 return false 
 } 
 
 - func onItemAdded ( index : Int ) { 
 + func onItemsAdded ( indexes : [ Int ] ) { 
 
 } 
 
 - func onItemRemoved ( index : Int ) { 
 + func onItemsRemoved ( indexes : [ Int ] ) { 
 
 } 
 
 - func onItemUpdated ( index : Int ) { 
 + func onItemsUpdated ( indexes : [ Int ] ) { 
 
 } 
 
 @ @ - 130 , 17 + 130 , 11 @ @ class ConversationMessagesController : SLKTextViewController , UICollectionViewDel 
 
 } 
 
 - / / override func didRotateFromInterfaceOrientation ( fromInterfaceOrientation : UIInterfaceOrientation ) { 
 - / / super . didRotateFromInterfaceOrientation ( fromInterfaceOrientation ) 
 - / / 
 - / / self . collectionView . collectionViewLayout . invalidateLayout ( ) 
 - / / } 
 - 
 override func willRotateToInterfaceOrientation ( toInterfaceOrientation : UIInterfaceOrientation , duration : NSTimeInterval ) { 
 super . willRotateToInterfaceOrientation ( toInterfaceOrientation , duration : duration ) 
 
 dispatch _ async ( dispatch _ get _ main _ queue ( ) , { ( ) - > Void in 
 - self . collectionView . collectionViewLayout . invalidateLayout ( ) 
 + self . collectionView . collectionViewLayout . invalidateLayout ( ) 
 } ) 
 } 
 
 @ @ - 155 , 10 + 149 , 13 @ @ class ConversationMessagesController : SLKTextViewController , UICollectionViewDel 
 case AMChangeDescription _ OperationType . ADD . rawValue : 
 var startIndex = Int ( mod . getIndex ( ) ) 
 var rows = [ NSIndexPath ] ( ) 
 + var indexes = [ Int ] ( ) 
 for ind in 0 . . < mod . getLength ( ) { 
 + indexes . append ( Int ( startIndex + ind ) ) 
 rows . append ( NSIndexPath ( forRow : Int ( startIndex + ind ) , inSection : 0 ) ) 
 } 
 self . collectionView . insertItemsAtIndexPaths ( rows ) 
 + self . onItemsAdded ( indexes ) 
 break 
 case AMChangeDescription _ OperationType . REMOVE . rawValue : 
 var startIndex = Int ( mod . getIndex ( ) ) 
 @ @ - 172 , 29 + 169 , 12 @ @ class ConversationMessagesController : SLKTextViewController , UICollectionViewDel 
 self . collectionView . moveItemAtIndexPath ( NSIndexPath ( forItem : Int ( mod . getIndex ( ) ) , inSection : 0 ) , toIndexPath : NSIndexPath ( forItem : Int ( mod . getDestIndex ( ) ) , inSection : 0 ) ) 
 break 
 case AMChangeDescription _ OperationType . UPDATE . rawValue : 
 - 
 - var forcedRows = [ NSIndexPath ] ( ) 
 - 
 - var visibleIndexes = self . collectionView . indexPathsForVisibleItems ( ) as ! [ NSIndexPath ] 
 + var rows = [ Int ] ( ) 
 var startIndex = Int ( mod . getIndex ( ) ) 
 for ind in 0 . . < mod . getLength ( ) { 
 - var indexPath = NSIndexPath ( forRow : Int ( startIndex + ind ) , inSection : 0 ) 
 - if visibleIndexes . contains ( indexPath ) { 
 - var cell = self . collectionView . cellForItemAtIndexPath ( indexPath ) 
 - var item : AnyObject ? = objectAtIndexPath ( indexPath ) 
 - if ! needFullReload ( item , cell : cell ! ) { 
 - bindCell ( collectionView , cellForRowAtIndexPath : indexPath , item : objectAtIndexPath ( indexPath ) , cell : cell ! ) 
 - continue 
 - } 
 - } 
 - 
 - forcedRows . append ( indexPath ) 
 - } 
 - 
 - if ( forcedRows . count > 0 ) { 
 - println ( " forced update " ) 
 - self . collectionView . reloadItemsAtIndexPaths ( forcedRows ) 
 + rows . append ( Int ( startIndex + ind ) ) 
 } 
 + self . updateRows ( rows ) 
 break 
 default : 
 break 
 @ @ - 209 , 6 + 189 , 29 @ @ class ConversationMessagesController : SLKTextViewController , UICollectionViewDel 
 afterUpdated ( ) 
 } 
 
 + func updateRows ( indexes : [ Int ] ) { 
 + var forcedRows = [ NSIndexPath ] ( ) 
 + 
 + var visibleIndexes = self . collectionView . indexPathsForVisibleItems ( ) as ! [ NSIndexPath ] 
 + for ind in indexes { 
 + var indexPath = NSIndexPath ( forRow : ind , inSection : 0 ) 
 + if visibleIndexes . contains ( indexPath ) { 
 + var cell = self . collectionView . cellForItemAtIndexPath ( indexPath ) 
 + var item : AnyObject ? = self . objectAtIndexPath ( indexPath ) 
 + if ! self . needFullReload ( item , cell : cell ! ) { 
 + self . bindCell ( self . collectionView , cellForRowAtIndexPath : indexPath , item : item , cell : cell ! ) 
 + continue 
 + } 
 + } 
 + 
 + forcedRows . append ( indexPath ) 
 + } 
 + 
 + if ( forcedRows . count > 0 ) { 
 + self . collectionView . reloadItemsAtIndexPaths ( forcedRows ) 
 + } 
 + } 
 + 
 func afterUpdated ( ) { 
 
 } 
 diff - - git a / actor - apps / app - ios / ActorClient / Screens / Conversation / ConversationController . swift b / actor - apps / app - ios / ActorClient / Screens / Conversation / ConversationController . swift 
 index 51c340a . . d4f0e56 100644 
 - - - a / actor - apps / app - ios / ActorClient / Screens / Conversation / ConversationController . swift 
 + + + b / actor - apps / app - ios / ActorClient / Screens / Conversation / ConversationController . swift 
 @ @ - 519 , 26 + 519 , 6 @ @ class ConversationController : ConversationMessagesController { 
 } else { 
 showActionSheetFast ( buttons , cancelButton : " AlertCancel " , tapClosure : tapBlock ) 
 } 
 - 
 - / / showActionSheetFast ( hasCamera ? [ " PhotoCamera " , " PhotoLibrary " , " SendDocument " ] : [ " PhotoLibrary " , " SendDocument " ] , cancelButton : " AlertCancel " ) { ( index ) - > ( ) in 
 - / / if index = = 0 | | ( hasCamera & & index = = 1 ) { 
 - / / var pickerController = AAImagePickerController ( ) 
 - / / pickerController . sourceType = ( hasCamera & & index = = 0 ) ? 
 - / / UIImagePickerControllerSourceType . Camera : UIImagePickerControllerSourceType . PhotoLibrary 
 - / / pickerController . mediaTypes = [ kUTTypeImage ] 
 - / / pickerController . view . backgroundColor = MainAppTheme . list . bgColor 
 - / / pickerController . navigationBar . tintColor = MainAppTheme . navigation . barColor 
 - / / pickerController . delegate = self 
 - / / pickerController . navigationBar . tintColor = MainAppTheme . navigation . titleColor 
 - / / pickerController . navigationBar . titleTextAttributes = [ NSForegroundColorAttributeName : MainAppTheme . navigation . titleColor ] 
 - / / self . presentViewController ( pickerController , animated : true , completion : nil ) 
 - / / } else if index > = 0 { 
 - / / var documentPicker = UIDocumentMenuViewController ( documentTypes : UTTAll , inMode : UIDocumentPickerMode . Import ) 
 - / / documentPicker . view . backgroundColor = UIColor . clearColor ( ) 
 - / / documentPicker . delegate = self 
 - / / self . presentViewController ( documentPicker , animated : true , completion : nil ) 
 - / / } 
 - / / } 
 } 
 
 override func buildCell ( collectionView : UICollectionView , cellForRowAtIndexPath indexPath : NSIndexPath , item : AnyObject ? ) - > UICollectionViewCell { 
 @ @ - 555 , 42 + 535 , 15 @ @ class ConversationController : ConversationMessagesController { 
 } else { 
 cell = collectionView . dequeueReusableCellWithReuseIdentifier ( BubbleTextIdentifier , forIndexPath : indexPath ) as ! AABubbleTextCell 
 } 
 - cell . peer = peer 
 + cell . setConfig ( peer ) 
 return cell 
 } 
 
 override func bindCell ( collectionView : UICollectionView , cellForRowAtIndexPath indexPath : NSIndexPath , item : AnyObject ? , cell : UICollectionViewCell ) { 
 var message = item as ! AMMessage 
 var bubbleCell = ( cell as ! AABubbleCell ) 
 - 
 - var preferCompact = false 
 - var isShowDate = true 
 - if ( indexPath . row > 0 ) { 
 - var next = objectAtIndex ( indexPath . row - 1 ) as ! AMMessage 
 - preferCompact = useCompact ( message , next : next ) 
 - } 
 - if ( indexPath . row + 1 < getCount ( ) ) { 
 - var prev = objectAtIndex ( indexPath . row + 1 ) as ! AMMessage 
 - isShowDate = showDate ( message , prev : prev ) 
 - } 
 - if ( isShowDate ) { 
 - isShowDate = true 
 - preferCompact = false 
 - } 
 - 
 - bubbleCell . performBind ( message , isPreferCompact : preferCompact , isShowDate : isShowDate , isShowNewMessages : ( unreadMessageId = = message . getRid ( ) ) , 
 - layoutCache : layoutCache ) 
 - } 
 - 
 - override func needFullReload ( item : AnyObject ? , cell : UICollectionViewCell ) - > Bool { 
 - var message = ( item as ! AMMessage ) ; 
 - if cell is AABubbleTextCell { 
 - if ( message . getContent ( ) is AMPhotoContent ) { 
 - return true 
 - } 
 - } 
 - 
 - return false 
 + var setting = buildCellSetting ( indexPath . row ) 
 + bubbleCell . performBind ( message , setting : setting , layoutCache : layoutCache ) 
 } 
 
 func collectionView ( collectionView : UICollectionView , layout collectionViewLayout : UICollectionViewLayout , insetForSectionAtIndex section : Int ) - > UIEdgeInsets { 
 @ @ - 606 , 27 + 559 , 68 @ @ class ConversationController : ConversationMessagesController { 
 } 
 
 func collectionView ( collectionView : UICollectionView , layout collectionViewLayout : UICollectionViewLayout , sizeForItemAtIndexPath indexPath : NSIndexPath ) - > CGSize { 
 - var message = objectAtIndexPath ( indexPath ) as ! AMMessage ; 
 
 - var preferCompact = false 
 - var isShowDate = true 
 - if ( indexPath . row > 0 ) { 
 - var next = objectAtIndex ( indexPath . row - 1 ) as ! AMMessage 
 - preferCompact = useCompact ( message , next : next ) 
 + var message = objectAtIndexPath ( indexPath ) as ! AMMessage ; 
 + var setting = buildCellSetting ( indexPath . row ) 
 + let group = peer . getPeerType ( ) . ordinal ( ) = = jint ( AMPeerType . GROUP . rawValue ) 
 + var height = MessagesLayouting . measureHeight ( message , group : group , setting : setting , layoutCache : layoutCache ) 
 + return CGSizeMake ( self . view . bounds . width , height ) 
 + } 
 + 
 + override func onItemsAdded ( indexes : [ Int ] ) { 
 + var toUpdate = [ Int ] ( ) 
 + for ind in indexes { 
 + if ! indexes . contains ( ind + 1 ) { 
 + if ind + 1 < getCount ( ) { 
 + toUpdate . append ( ind + 1 ) 
 + } 
 + } 
 + if ! indexes . contains ( ind - 1 ) { 
 + if ind > 0 { 
 + toUpdate . append ( ind - 1 ) 
 + } 
 + } 
 } 
 - if ( indexPath . row + 1 < getCount ( ) ) { 
 - var prev = objectAtIndex ( indexPath . row + 1 ) as ! AMMessage 
 - isShowDate = showDate ( message , prev : prev ) 
 + updateRows ( toUpdate ) 
 + } 
 + 
 + override func needFullReload ( item : AnyObject ? , cell : UICollectionViewCell ) - > Bool { 
 + var message = ( item as ! AMMessage ) ; 
 + if cell is AABubbleTextCell { 
 + if ( message . getContent ( ) is AMPhotoContent ) { 
 + return true 
 + } 
 } 
 - if ( isShowDate ) { 
 - isShowDate = true 
 - preferCompact = false 
 + 
 + return false 
 + } 
 + 
 + func buildCellSetting ( index : Int ) - > CellSetting { 
 + 
 + var current = objectAtIndex ( index ) as ! AMMessage 
 + var next : AMMessage ! = index > 0 ? objectAtIndex ( index - 1 ) as ! AMMessage : nil 
 + var prev : AMMessage ! = index + 1 < getCount ( ) ? objectAtIndex ( index + 1 ) as ! AMMessage : nil 
 + 
 + var isShowDate = true 
 + var isShowDateNext = true 
 + var isShowNewMessages = ( unreadMessageId = = current . getRid ( ) ) 
 + var clenchTop = false 
 + var clenchBottom = false 
 + 
 + if ( prev ! = nil ) { 
 + isShowDate = ! areSameDate ( current , prev : prev ) 
 + if ! isShowDate { 
 + clenchTop = useCompact ( current , next : prev ) 
 + } 
 } 
 
 - let group = peer . getPeerType ( ) . ordinal ( ) = = jint ( AMPeerType . GROUP . rawValue ) 
 + if ( next ! = nil ) { 
 + if areSameDate ( next , prev : current ) { 
 + clenchBottom = useCompact ( current , next : next ) 
 + } 
 + } 
 
 - var height = MessagesLayouting . measureHeight ( message , group : group , isPreferCompact : preferCompact , isShowDate : isShowDate , isShowNewMessages : ( unreadMessageId = = message . getRid ( ) ) , layoutCache : layoutCache ) 
 - return CGSizeMake ( self . view . bounds . width , height ) 
 + return CellSetting ( showDate : isShowDate , clenchTop : clenchTop , clenchBottom : clenchBottom , showNewMessages : isShowNewMessages ) 
 } 
 
 func useCompact ( source : AMMessage , next : AMMessage ) - > Bool { 
 @ @ - 646 , 10 + 640 , 10 @ @ class ConversationController : ConversationMessagesController { 
 return false 
 } 
 
 - func showDate ( source : AMMessage , prev : AMMessage ) - > Bool { 
 + func areSameDate ( source : AMMessage , prev : AMMessage ) - > Bool { 
 var currentDate = source . getDate ( ) / ( 1000 * 60 * 60 * 24 ) 
 var nextDate = prev . getDate ( ) / ( 1000 * 60 * 60 * 24 ) 
 - return currentDate ! = nextDate 
 + return currentDate = = nextDate 
 } 
 
 override func displayListForController ( ) - > AMBindedDisplayList { 
 diff - - git a / actor - apps / app - ios / ActorClient / Views / Bubbles / AABubbleDocumentCell . swift b / actor - apps / app - ios / ActorClient / Views / Bubbles / AABubbleDocumentCell . swift 
 index 22f9f28 . . 5c401bc 100644 
 - - - a / actor - apps / app - ios / ActorClient / Views / Bubbles / AABubbleDocumentCell . swift 
 + + + b / actor - apps / app - ios / ActorClient / Views / Bubbles / AABubbleDocumentCell . swift 
 @ @ - 74 , 7 + 74 , 7 @ @ class AABubbleDocumentCell : AABubbleBaseFileCell { 
 / / MARK : - 
 / / MARK : Bind 
 
 - override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , isPreferCompact : Bool ) { 
 + override func bind ( message : AMMessage , reuse : Bool , cellLayout : CellLayout , setting : CellSetting ) { 
 let document = message . getContent ( ) as ! AMDocumentContent 
 
 if ( ! reuse ) {
