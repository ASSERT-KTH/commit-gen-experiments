BLEU SCORE: 0.014199193612838947

TEST MSG: fix ( server : files ) : try to fix too many open files
GENERATED MSG: Merge commit ' c15b06b12d70fafebb40421b89849baebc1e148a '

TEST DIFF (one line): diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > index d93866a . . 8d68406 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > @ @ - 78 , 14 + 78 , 17 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { < nl > blocking { < nl > log . debug ( " Concatenating file : { } , parts number : { } " , fileName , partNames . length ) < nl > val concatFile = dir . createChild ( getFileName ( fileName ) ) < nl > + val groupedPartNames = partNames . grouped ( 100 ) < nl > for { < nl > out ← concatFile . outputStream < nl > - _ ← for { < nl > - iss ← partNames map { name ⇒ < nl > - log . debug ( " Concatenating part : { } " , name ) < nl > - ( dir / name ) . inputStream < nl > - } < nl > - } yield iss . foreach ( _ . pipeTo ( out , closeOutputStream = false ) ) < nl > + _ = groupedPartNames foreach { names ⇒ < nl > + for { < nl > + iss ← names map { name ⇒ < nl > + log . debug ( " Concatenating part : { } " , name ) < nl > + ( dir / name ) . inputStream < nl > + } < nl > + } yield iss . foreach ( _ . pipeTo ( out , closeOutputStream = false ) ) < nl > + } < nl > } yield ( ) < nl > concatFile < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > index 1772deb . . 7f9df65 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > @ @ - 69 , 10 + 69 , 12 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { < nl > getFile ( fileId , optName getOrElse " " ) < nl > < nl > protected def getFile ( fileId : Long , name : String ) : Future [ File ] = < nl > - Future ( file " $ storageLocation / $ fileId / $ { getFileName ( name ) } " ) < nl > + Future ( fileDirectory ( fileId ) / getFileName ( name ) ) < nl > < nl > protected def getFileName ( name : String ) = if ( name . trim . isEmpty ) " file " else name < nl > < nl > - private def getOrCreateFileDir ( fileId : Long ) = file " $ storageLocation / $ fileId " . createIfNotExists ( asDirectory = true ) < nl > + protected def fileDirectory ( fileId : Long ) : File = file " $ storageLocation / file _ $ { fileId } " < nl > + < nl > + private def getOrCreateFileDir ( fileId : Long ) = fileDirectory ( fileId ) . createIfNotExists ( asDirectory = true ) < nl > < nl > } < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > index 4ec8905 . . 16995c0 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > @ @ - 106 , 7 + 106 , 7 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) < nl > } < nl > < nl > override def completeFileUpload ( fileId : Long , fileSize : Long , fileName : String , partNames : Seq [ String ] ) : Future [ Unit ] = { < nl > - val fileDir = File ( s " $ storageLocation / $ fileId " ) < nl > + val fileDir = fileDirectory ( fileId ) < nl > for { < nl > isComplete ← haveAllParts ( fileDir , partNames , fileSize ) < nl > result ← concatFiles ( fileDir , partNames , fileName , fileSize ) < nl > diff - - git a / actor - server / notes / 1 . 0 . 84 . markdown b / actor - server / notes / 1 . 0 . 84 . markdown < nl > new file mode 100644 < nl > index 0000000 . . 7051d4d < nl > - - - / dev / null < nl > + + + b / actor - server / notes / 1 . 0 . 84 . markdown < nl > @ @ - 0 , 0 + 1 @ @ < nl > + * fix file directories prefix < nl > \ No newline at end of file < nl > diff - - git a / actor - server / version . sbt b / actor - server / version . sbt < nl > index 61a5930 . . 34afdcc 100644 < nl > - - - a / actor - server / version . sbt < nl > + + + b / actor - server / version . sbt < nl > @ @ - 1 + 1 @ @ < nl > - version in ThisBuild : = " 1 . 0 . 84 - SNAPSHOT " < nl > + version in ThisBuild : = " 1 . 0 . 85 - SNAPSHOT " < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 index d93866a . . 8d68406 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 @ @ - 78 , 14 + 78 , 17 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { 
 blocking { 
 log . debug ( " Concatenating file : { } , parts number : { } " , fileName , partNames . length ) 
 val concatFile = dir . createChild ( getFileName ( fileName ) ) 
 + val groupedPartNames = partNames . grouped ( 100 ) 
 for { 
 out ← concatFile . outputStream 
 - _ ← for { 
 - iss ← partNames map { name ⇒ 
 - log . debug ( " Concatenating part : { } " , name ) 
 - ( dir / name ) . inputStream 
 - } 
 - } yield iss . foreach ( _ . pipeTo ( out , closeOutputStream = false ) ) 
 + _ = groupedPartNames foreach { names ⇒ 
 + for { 
 + iss ← names map { name ⇒ 
 + log . debug ( " Concatenating part : { } " , name ) 
 + ( dir / name ) . inputStream 
 + } 
 + } yield iss . foreach ( _ . pipeTo ( out , closeOutputStream = false ) ) 
 + } 
 } yield ( ) 
 concatFile 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 index 1772deb . . 7f9df65 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 @ @ - 69 , 10 + 69 , 12 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { 
 getFile ( fileId , optName getOrElse " " ) 
 
 protected def getFile ( fileId : Long , name : String ) : Future [ File ] = 
 - Future ( file " $ storageLocation / $ fileId / $ { getFileName ( name ) } " ) 
 + Future ( fileDirectory ( fileId ) / getFileName ( name ) ) 
 
 protected def getFileName ( name : String ) = if ( name . trim . isEmpty ) " file " else name 
 
 - private def getOrCreateFileDir ( fileId : Long ) = file " $ storageLocation / $ fileId " . createIfNotExists ( asDirectory = true ) 
 + protected def fileDirectory ( fileId : Long ) : File = file " $ storageLocation / file _ $ { fileId } " 
 + 
 + private def getOrCreateFileDir ( fileId : Long ) = fileDirectory ( fileId ) . createIfNotExists ( asDirectory = true ) 
 
 } 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 index 4ec8905 . . 16995c0 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 @ @ - 106 , 7 + 106 , 7 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) 
 } 
 
 override def completeFileUpload ( fileId : Long , fileSize : Long , fileName : String , partNames : Seq [ String ] ) : Future [ Unit ] = { 
 - val fileDir = File ( s " $ storageLocation / $ fileId " ) 
 + val fileDir = fileDirectory ( fileId ) 
 for { 
 isComplete ← haveAllParts ( fileDir , partNames , fileSize ) 
 result ← concatFiles ( fileDir , partNames , fileName , fileSize ) 
 diff - - git a / actor - server / notes / 1 . 0 . 84 . markdown b / actor - server / notes / 1 . 0 . 84 . markdown 
 new file mode 100644 
 index 0000000 . . 7051d4d 
 - - - / dev / null 
 + + + b / actor - server / notes / 1 . 0 . 84 . markdown 
 @ @ - 0 , 0 + 1 @ @ 
 + * fix file directories prefix 
 \ No newline at end of file 
 diff - - git a / actor - server / version . sbt b / actor - server / version . sbt 
 index 61a5930 . . 34afdcc 100644 
 - - - a / actor - server / version . sbt 
 + + + b / actor - server / version . sbt 
 @ @ - 1 + 1 @ @ 
 - version in ThisBuild : = " 1 . 0 . 84 - SNAPSHOT " 
 + version in ThisBuild : = " 1 . 0 . 85 - SNAPSHOT " 
 \ No newline at end of file
