BLEU SCORE: 0.09287528999566796

TEST MSG: feat ( server : files ) : transliterate file names
GENERATED MSG: fix ( notifications ) : improve message sending

TEST DIFF (one line): diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala < nl > index b88f191 . . 67e29ec 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala < nl > @ @ - 4 , 6 + 4 , 7 @ @ import java . io . File < nl > < nl > import im . actor . server . model < nl > import im . actor . server . db . ActorPostgresDriver . api . _ < nl > + import im . actor . util . misc . StringUtils . { isAsciiString , transliterate , toAsciiString } < nl > < nl > import scala . concurrent . _ , duration . _ < nl > < nl > @ @ - 14 , 7 + 15 , 11 @ @ object FileStorageAdapter { < nl > trait FileStorageAdapter extends UploadActions with DownloadActions with UploadKeyParsing < nl > < nl > final case class UnsafeFileName ( fileName : String ) { < nl > - lazy val safe : String = new File ( fileName . replace ( " \ u0000 " , " " ) ) . toPath . normalize ( ) . getFileName . toString < nl > + lazy val safe : String = { < nl > + val noWhitespace = fileName . replace ( " \ u0000 " , " " ) . replaceAll ( " \ \ s + " , " _ " ) < nl > + val validName = if ( isAsciiString ( noWhitespace ) ) noWhitespace else toAsciiString ( transliterate ( noWhitespace ) ) < nl > + new File ( validName ) . toPath . normalize ( ) . getFileName . toString < nl > + } < nl > } < nl > < nl > private [ file ] trait UploadActions { < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / util / misc / StringUtils . scala b / actor - server / actor - runtime / src / main / scala / im / actor / util / misc / StringUtils . scala < nl > index f27a82c . . 0323c5d 100644 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / util / misc / StringUtils . scala < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / util / misc / StringUtils . scala < nl > @ @ - 1 , 6 + 1 , 9 @ @ < nl > package im . actor . util . misc < nl > < nl > + import com . ibm . icu . text . Transliterator < nl > + < nl > import java . nio . charset . Charset < nl > + import java . text . Normalizer < nl > import java . util . regex . Pattern < nl > < nl > import scalaz . _ , Scalaz . _ < nl > @ @ - 11 , 10 + 14 , 16 @ @ object StringUtils { < nl > < nl > private val usernamePattern = Pattern . compile ( " " " ^ [ 0 - 9a - zA - Z _ ] { 5 , 32 } " " " , Pattern . UNICODE _ CHARACTER _ CLASS ) < nl > < nl > + private val transliterator = Transliterator . getInstance ( " Latin ; Latin - ASCII ; Lower " ) < nl > + < nl > def utfToHexString ( s : String ) : String = { s . map ( ch ⇒ f " $ { ch . toInt } % 04X " ) . mkString } < nl > < nl > def isAsciiString ( c : CharSequence ) : Boolean = encoder . canEncode ( c ) < nl > < nl > + def toAsciiString ( s : String ) : String = Normalizer . normalize ( s , Normalizer . Form . NFD ) filter ( _ < = ' \ u007F ' ) < nl > + < nl > + def transliterate ( s : String ) : String = transliterator . transliterate ( s ) < nl > + < nl > def nonEmptyString ( s : String ) : \ / [ NonEmptyList [ String ] , String ] = { < nl > val trimmed = s . trim < nl > if ( trimmed . isEmpty ) " Should be nonempty " . wrapNel . left else trimmed . right < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > index 2bf351a . . 4c8f6b3 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > @ @ - 111 , 7 + 111 , 7 @ @ final class FilesServiceSpec < nl > resp . toOption . get . url < nl > } < nl > < nl > - urlStr should include ( " The . Fil % C3 % AB % 2500 + % E2 % 80 % 93 + ' Fear + and + Loathing + in + Las + Vegas ' ? " ) < nl > + urlStr should include ( " the . file % 2500 _ - _ ' fear _ and _ loathing _ in _ las _ vegas " ) < nl > urlStr shouldNot include ( " / / The " ) < nl > urlStr shouldNot include ( " etc " ) < nl > urlStr shouldNot include ( " passwd " ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / util / StringUtilsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / util / StringUtilsSpec . scala < nl > index 3d6dbb2 . . 7b25b68 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / util / StringUtilsSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / util / StringUtilsSpec . scala < nl > @ @ - 1 , 13 + 1 , 15 @ @ < nl > package im . actor . util < nl > < nl > - import im . actor . util . misc . StringUtils . validUsername < nl > + import im . actor . util . misc . StringUtils . { transliterate , validUsername } < nl > import org . scalatest . { Matchers , FlatSpecLike } < nl > < nl > class StringUtilsSpec extends FlatSpecLike with Matchers { < nl > < nl > - " validNickName " should " validate nicknames " in e1 < nl > + " validNickName " should " validate nicknames " in nicknames < nl > < nl > - def e1 ( ) = { < nl > + " transliterate " should " transform string to lower - cased string with only latin chars " in translit < nl > + < nl > + def nicknames ( ) = { < nl > validUsername ( " rockjam " ) shouldEqual true < nl > validUsername ( " abcde " ) shouldEqual true < nl > validUsername ( " rock _ jam " ) shouldEqual true < nl > @ @ - 23 , 4 + 25 , 19 @ @ class StringUtilsSpec extends FlatSpecLike with Matchers { < nl > validUsername ( " rock & ^ ^ jam " ) shouldEqual false < nl > } < nl > < nl > + def translit ( ) = { < nl > + transliterate ( " actor " ) shouldEqual " actor " < nl > + < nl > + transliterate ( " а к т ё р " ) shouldEqual " akter " < nl > + transliterate ( " а к т е р " ) shouldEqual " akter " < nl > + < nl > + transliterate ( " 俳 優 " ) shouldEqual " pai you " < nl > + transliterate ( " n ä yttelij ä " ) shouldEqual " nayttelija " < nl > + transliterate ( " 演 員 " ) shouldEqual " yan yuan " < nl > + < nl > + transliterate ( " ا ل م م ث ل " ) shouldEqual " almmthl " < nl > + < nl > + transliterate ( " actor а к т ё р 俳 優 n ä yttelij ä 演 員 ا ل م م ث ل " ) shouldEqual " actor akter pai you nayttelija yan yuan almmthl " < nl > + } < nl > + < nl > } < nl > diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala < nl > index a7e0349 . . d1c05a8 100644 < nl > - - - a / actor - server / project / Dependencies . scala < nl > + + + b / actor - server / project / Dependencies . scala < nl > @ @ - 89 , 6 + 89 , 7 @ @ object Dependencies { < nl > val kamonDatadog = " io . kamon " % % " kamon - datadog " % V . kamon < nl > < nl > val libPhoneNumber = " com . googlecode . libphonenumber " % " libphonenumber " % " 7 . 0 . + " < nl > + val icu4j = " com . ibm . icu " % " icu4j " % " 56 . 1 " < nl > < nl > val scodecBits = " org . scodec " % % " scodec - bits " % " 1 . 0 . 9 " < nl > val scodecCore = " org . scodec " % % " scodec - core " % " 1 . 8 . 1 " < nl > @ @ - 217 , 7 + 218 , 7 @ @ object Dependencies { < nl > < nl > val sdk = Seq ( aspectj ) < nl > < nl > - val runtime = shared + + Seq ( akkaActor , actorConcurrent , akkaHttp , akkaStream , akkaPersistenceJdbc , caffeine , cats , concmap , jodaConvert , jodaTime , libPhoneNumber , scalapbSer , scalazCore , akkaTestkit % " test " , scalatest % " test " ) < nl > + val runtime = shared + + Seq ( akkaActor , actorConcurrent , akkaHttp , akkaStream , akkaPersistenceJdbc , caffeine , cats , concmap , jodaConvert , jodaTime , icu4j , libPhoneNumber , scalapbSer , scalazCore , akkaTestkit % " test " , scalatest % " test " ) < nl > < nl > val voximplant = shared + + Seq ( akkaActor , dispatch , playJson )
NEAREST DIFF (one line): diff - - git a / actor - notifications / src / main / scala / im / actor / server / notifications / Notifiers . scala b / actor - notifications / src / main / scala / im / actor / server / notifications / Notifiers . scala < nl > index 7fca101 . . 6b25fe8 100644 < nl > - - - a / actor - notifications / src / main / scala / im / actor / server / notifications / Notifiers . scala < nl > + + + b / actor - notifications / src / main / scala / im / actor / server / notifications / Notifiers . scala < nl > @ @ - 8 , 20 + 8 , 31 @ @ import im . actor . server . persist < nl > import im . actor . server . sms . SmsEngine < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > + import im . actor . server . util . StringUtils . _ < nl > + < nl > trait Notifier { < nl > def processTask ( task : Notification ) : Unit < nl > } < nl > < nl > class PhoneNotifier ( engine : SmsEngine ) ( implicit db : Database , ec : ExecutionContext ) extends Notifier { < nl > - def processTask ( task : Notification ) : Unit = { < nl > - val total = task . data . values . sum < nl > - val senders = task . data . keySet . flatten mkString " , " < nl > - val message = s " You got $ total messages from $ senders . " < nl > + def processTask ( task : Notification ) : Unit = < nl > db . run { < nl > for { < nl > optPhone ← persist . UserPhone . findByUserId ( task . userId ) . headOption < nl > - _ ← DBIO . successful ( optPhone . map { phone ⇒ engine . send ( phone . number , message ) } ) < nl > + _ ← DBIO . successful ( optPhone . map { phone ⇒ engine . send ( phone . number , makeMessage ( task . data ) ) } ) < nl > } yield ( ) < nl > } < nl > + < nl > + private def makeMessage ( data : Map [ Option [ String ] , Int ] ) : String = { < nl > + val total = data . values . sum < nl > + val senders = data . keySet . flatten < nl > + < nl > + val message = s " You got $ total messages from $ { senders mkString " , " } in Actor . " < nl > + isAsciiString ( message ) match { < nl > + case true if message . length < = 140 ⇒ message < nl > + case false if message . length < = 70 ⇒ message < nl > + case _ ⇒ s " You got $ total messages in $ { senders . size } dialogs in Actor . " < nl > + } < nl > } < nl > + < nl > } < nl > diff - - git a / actor - sms / src / main / scala / im / actor / server / sms / ClickatellSmsEngine . scala b / actor - sms / src / main / scala / im / actor / server / sms / ClickatellSmsEngine . scala < nl > index e9e2d5b . . 98ec3b3 100644 < nl > - - - a / actor - sms / src / main / scala / im / actor / server / sms / ClickatellSmsEngine . scala < nl > + + + b / actor - sms / src / main / scala / im / actor / server / sms / ClickatellSmsEngine . scala < nl > @ @ - 8 , 27 + 8 , 34 @ @ import akka . http . scaladsl . model . _ < nl > import akka . stream . FlowMaterializer < nl > import com . typesafe . config . _ < nl > < nl > + import im . actor . server . util . StringUtils . _ < nl > + < nl > class ClickatellSmsEngine ( config : Config ) ( implicit system : ActorSystem , flowMaterializer : FlowMaterializer , http : HttpExt ) extends SmsEngine { < nl > private val user = config . getString ( " user " ) < nl > private val password = config . getString ( " password " ) < nl > private val apiId = config . getString ( " api - id " ) < nl > private val baseUri = Uri ( " http : / / api . clickatell . com / http / sendmsg " ) < nl > < nl > + private val baseParams = Map ( < nl > + " user " → user , < nl > + " password " → password , < nl > + " api _ id " → apiId < nl > + ) < nl > + < nl > implicit val ec : ExecutionContext = system . dispatcher < nl > < nl > override def send ( phoneNumber : Long , message : String ) : Future [ Unit ] = { < nl > - val uri = baseUri . withQuery ( Map ( < nl > - " user " → user , < nl > - " password " → password , < nl > - " api _ id " → apiId , < nl > - " to " → phoneNumber . toString , < nl > - " text " → utfToHexString ( message ) , < nl > - " unicode " → 1 . toString < nl > - ) ) < nl > - < nl > - val request = HttpRequest ( uri = uri ) < nl > - < nl > - val f = http . singleRequest ( request ) map { < nl > + val params = baseParams + ( " to " → phoneNumber . toString ) < nl > + < nl > + val uri = if ( isAsciiString ( message ) ) < nl > + baseUri . withQuery ( params + ( " text " → message ) ) < nl > + else < nl > + baseUri . withQuery ( params + + Map ( < nl > + " text " → utfToHexString ( message ) , < nl > + " unicode " → 1 . toString < nl > + ) ) < nl > + < nl > + val f = http . singleRequest ( HttpRequest ( uri = uri ) ) map { < nl > case HttpResponse ( StatusCodes . OK , _ , entity , _ ) ⇒ < nl > / / FIXME : check if body starts with OK < nl > ( ) < nl > @ @ - 44 , 5 + 51 , 4 @ @ class ClickatellSmsEngine ( config : Config ) ( implicit system : ActorSystem , flowMate < nl > f < nl > } < nl > < nl > - private def utfToHexString ( from : String ) = { from . map ( ch ⇒ f " $ { ch . toInt } % 04X " ) . mkString } < nl > } < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / webhooks / WebhooksFrontendSpec . scala b / actor - tests / src / test / scala / im / actor / server / webhooks / WebhooksFrontendSpec . scala < nl > index 3365b2e . . 5468504 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / webhooks / WebhooksFrontendSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / webhooks / WebhooksFrontendSpec . scala < nl > @ @ - 9 , 11 + 9 , 9 @ @ import im . actor . api . rpc . ClientData < nl > import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } < nl > import im . actor . server . api . rpc . service . { GroupsServiceHelpers , messaging } < nl > import im . actor . server . peermanagers . { GroupPeerManager , PrivatePeerManager } < nl > - import im . actor . server . { BaseAppSuite , persist } < nl > - import im . actor . server . api . rpc . service . { GroupsServiceHelpers , messaging } < nl > - import im . actor . server . { BaseAppSuite , persist } < nl > import im . actor . server . presences . { GroupPresenceManager , PresenceManager } < nl > import im . actor . server . social . SocialManager < nl > + import im . actor . server . { BaseAppSuite , persist } < nl > < nl > class WebhooksFrontendSpec extends BaseAppSuite with GroupsServiceHelpers { < nl > behavior of " Webhooks frontend " < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / webhooks / WebhooksHandlerSpec . scala b / actor - tests / src / test / scala / im / actor / server / webhooks / WebhooksHandlerSpec . scala < nl > index daf30db . . 0f9585e 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / webhooks / WebhooksHandlerSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / webhooks / WebhooksHandlerSpec . scala < nl > @ @ - 5 , 11 + 5 , 10 @ @ import com . amazonaws . services . s3 . transfer . TransferManager < nl > < nl > import im . actor . api . rpc . ClientData < nl > import im . actor . api . rpc . messaging . TextMessage < nl > + import im . actor . server . api . rpc . service . GroupsServiceHelpers < nl > import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } < nl > - import im . actor . server . api . rpc . service . { GroupsServiceHelpers , messaging } < nl > import im . actor . server . models . Peer < nl > import im . actor . server . peermanagers . { GroupPeerManager , PrivatePeerManager } < nl > - import im . actor . server . { BaseAppSuite , MessageParsing , persist } < nl > import im . actor . server . presences . { GroupPresenceManager , PresenceManager } < nl > import im . actor . server . social . SocialManager < nl > import im . actor . server . { BaseAppSuite , MessageParsing , persist } < nl > diff - - git a / actor - utils / src / main / scala / im / actor / server / util / StringUtils . scala b / actor - utils / src / main / scala / im / actor / server / util / StringUtils . scala < nl > new file mode 100644 < nl > index 0000000 . . bd4d449 < nl > - - - / dev / null < nl > + + + b / actor - utils / src / main / scala / im / actor / server / util / StringUtils . scala < nl > @ @ - 0 , 0 + 1 , 13 @ @ < nl > + package im . actor . server . util < nl > + < nl > + import java . nio . charset . Charset < nl > + < nl > + object StringUtils { < nl > + < nl > + private val encoder = Charset . forName ( " US - ASCII " ) . newEncoder ( ) < nl > + < nl > + def utfToHexString ( s : String ) : String = { s . map ( ch ⇒ f " $ { ch . toInt } % 04X " ) . mkString } < nl > + < nl > + def isAsciiString ( c : CharSequence ) : Boolean = encoder . canEncode ( c ) < nl > + < nl > + } < nl > diff - - git a / project / Build . scala b / project / Build . scala < nl > index 48a5302 . . 67b4241 100644 < nl > - - - a / project / Build . scala < nl > + + + b / project / Build . scala < nl > @ @ - 201 , 7 + 201 , 7 @ @ object Build extends sbt . Build { < nl > id = " actor - sms " , < nl > base = file ( " actor - sms " ) , < nl > settings = defaultSettings + + Seq ( libraryDependencies + + = Dependencies . sms ) < nl > - ) < nl > + ) . dependsOn ( actorUtils ) < nl > < nl > lazy val actorSocial = Project ( < nl > id = " actor - social " , < nl > @ @ - 271 , 7 + 271 , 7 @ @ object Build extends sbt . Build { < nl > libraryDependencies + + = Dependencies . utils < nl > ) < nl > ) < nl > - . dependsOn ( actorCommonsApi , actorModels , actorPersist , actorSms ) < nl > + . dependsOn ( actorCommonsApi , actorModels , actorPersist ) < nl > < nl > lazy val actorUtilsHttp = Project ( < nl > id = " actor - utils - http " ,

TEST DIFF:
diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala 
 index b88f191 . . 67e29ec 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala 
 @ @ - 4 , 6 + 4 , 7 @ @ import java . io . File 
 
 import im . actor . server . model 
 import im . actor . server . db . ActorPostgresDriver . api . _ 
 + import im . actor . util . misc . StringUtils . { isAsciiString , transliterate , toAsciiString } 
 
 import scala . concurrent . _ , duration . _ 
 
 @ @ - 14 , 7 + 15 , 11 @ @ object FileStorageAdapter { 
 trait FileStorageAdapter extends UploadActions with DownloadActions with UploadKeyParsing 
 
 final case class UnsafeFileName ( fileName : String ) { 
 - lazy val safe : String = new File ( fileName . replace ( " \ u0000 " , " " ) ) . toPath . normalize ( ) . getFileName . toString 
 + lazy val safe : String = { 
 + val noWhitespace = fileName . replace ( " \ u0000 " , " " ) . replaceAll ( " \ \ s + " , " _ " ) 
 + val validName = if ( isAsciiString ( noWhitespace ) ) noWhitespace else toAsciiString ( transliterate ( noWhitespace ) ) 
 + new File ( validName ) . toPath . normalize ( ) . getFileName . toString 
 + } 
 } 
 
 private [ file ] trait UploadActions { 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / util / misc / StringUtils . scala b / actor - server / actor - runtime / src / main / scala / im / actor / util / misc / StringUtils . scala 
 index f27a82c . . 0323c5d 100644 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / util / misc / StringUtils . scala 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / util / misc / StringUtils . scala 
 @ @ - 1 , 6 + 1 , 9 @ @ 
 package im . actor . util . misc 
 
 + import com . ibm . icu . text . Transliterator 
 + 
 import java . nio . charset . Charset 
 + import java . text . Normalizer 
 import java . util . regex . Pattern 
 
 import scalaz . _ , Scalaz . _ 
 @ @ - 11 , 10 + 14 , 16 @ @ object StringUtils { 
 
 private val usernamePattern = Pattern . compile ( " " " ^ [ 0 - 9a - zA - Z _ ] { 5 , 32 } " " " , Pattern . UNICODE _ CHARACTER _ CLASS ) 
 
 + private val transliterator = Transliterator . getInstance ( " Latin ; Latin - ASCII ; Lower " ) 
 + 
 def utfToHexString ( s : String ) : String = { s . map ( ch ⇒ f " $ { ch . toInt } % 04X " ) . mkString } 
 
 def isAsciiString ( c : CharSequence ) : Boolean = encoder . canEncode ( c ) 
 
 + def toAsciiString ( s : String ) : String = Normalizer . normalize ( s , Normalizer . Form . NFD ) filter ( _ < = ' \ u007F ' ) 
 + 
 + def transliterate ( s : String ) : String = transliterator . transliterate ( s ) 
 + 
 def nonEmptyString ( s : String ) : \ / [ NonEmptyList [ String ] , String ] = { 
 val trimmed = s . trim 
 if ( trimmed . isEmpty ) " Should be nonempty " . wrapNel . left else trimmed . right 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 index 2bf351a . . 4c8f6b3 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 @ @ - 111 , 7 + 111 , 7 @ @ final class FilesServiceSpec 
 resp . toOption . get . url 
 } 
 
 - urlStr should include ( " The . Fil % C3 % AB % 2500 + % E2 % 80 % 93 + ' Fear + and + Loathing + in + Las + Vegas ' ? " ) 
 + urlStr should include ( " the . file % 2500 _ - _ ' fear _ and _ loathing _ in _ las _ vegas " ) 
 urlStr shouldNot include ( " / / The " ) 
 urlStr shouldNot include ( " etc " ) 
 urlStr shouldNot include ( " passwd " ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / util / StringUtilsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / util / StringUtilsSpec . scala 
 index 3d6dbb2 . . 7b25b68 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / util / StringUtilsSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / util / StringUtilsSpec . scala 
 @ @ - 1 , 13 + 1 , 15 @ @ 
 package im . actor . util 
 
 - import im . actor . util . misc . StringUtils . validUsername 
 + import im . actor . util . misc . StringUtils . { transliterate , validUsername } 
 import org . scalatest . { Matchers , FlatSpecLike } 
 
 class StringUtilsSpec extends FlatSpecLike with Matchers { 
 
 - " validNickName " should " validate nicknames " in e1 
 + " validNickName " should " validate nicknames " in nicknames 
 
 - def e1 ( ) = { 
 + " transliterate " should " transform string to lower - cased string with only latin chars " in translit 
 + 
 + def nicknames ( ) = { 
 validUsername ( " rockjam " ) shouldEqual true 
 validUsername ( " abcde " ) shouldEqual true 
 validUsername ( " rock _ jam " ) shouldEqual true 
 @ @ - 23 , 4 + 25 , 19 @ @ class StringUtilsSpec extends FlatSpecLike with Matchers { 
 validUsername ( " rock & ^ ^ jam " ) shouldEqual false 
 } 
 
 + def translit ( ) = { 
 + transliterate ( " actor " ) shouldEqual " actor " 
 + 
 + transliterate ( " а к т ё р " ) shouldEqual " akter " 
 + transliterate ( " а к т е р " ) shouldEqual " akter " 
 + 
 + transliterate ( " 俳 優 " ) shouldEqual " pai you " 
 + transliterate ( " n ä yttelij ä " ) shouldEqual " nayttelija " 
 + transliterate ( " 演 員 " ) shouldEqual " yan yuan " 
 + 
 + transliterate ( " ا ل م م ث ل " ) shouldEqual " almmthl " 
 + 
 + transliterate ( " actor а к т ё р 俳 優 n ä yttelij ä 演 員 ا ل م م ث ل " ) shouldEqual " actor akter pai you nayttelija yan yuan almmthl " 
 + } 
 + 
 } 
 diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala 
 index a7e0349 . . d1c05a8 100644 
 - - - a / actor - server / project / Dependencies . scala 
 + + + b / actor - server / project / Dependencies . scala 
 @ @ - 89 , 6 + 89 , 7 @ @ object Dependencies { 
 val kamonDatadog = " io . kamon " % % " kamon - datadog " % V . kamon 
 
 val libPhoneNumber = " com . googlecode . libphonenumber " % " libphonenumber " % " 7 . 0 . + " 
 + val icu4j = " com . ibm . icu " % " icu4j " % " 56 . 1 " 
 
 val scodecBits = " org . scodec " % % " scodec - bits " % " 1 . 0 . 9 " 
 val scodecCore = " org . scodec " % % " scodec - core " % " 1 . 8 . 1 " 
 @ @ - 217 , 7 + 218 , 7 @ @ object Dependencies { 
 
 val sdk = Seq ( aspectj ) 
 
 - val runtime = shared + + Seq ( akkaActor , actorConcurrent , akkaHttp , akkaStream , akkaPersistenceJdbc , caffeine , cats , concmap , jodaConvert , jodaTime , libPhoneNumber , scalapbSer , scalazCore , akkaTestkit % " test " , scalatest % " test " ) 
 + val runtime = shared + + Seq ( akkaActor , actorConcurrent , akkaHttp , akkaStream , akkaPersistenceJdbc , caffeine , cats , concmap , jodaConvert , jodaTime , icu4j , libPhoneNumber , scalapbSer , scalazCore , akkaTestkit % " test " , scalatest % " test " ) 
 
 val voximplant = shared + + Seq ( akkaActor , dispatch , playJson )

NEAREST DIFF:
diff - - git a / actor - notifications / src / main / scala / im / actor / server / notifications / Notifiers . scala b / actor - notifications / src / main / scala / im / actor / server / notifications / Notifiers . scala 
 index 7fca101 . . 6b25fe8 100644 
 - - - a / actor - notifications / src / main / scala / im / actor / server / notifications / Notifiers . scala 
 + + + b / actor - notifications / src / main / scala / im / actor / server / notifications / Notifiers . scala 
 @ @ - 8 , 20 + 8 , 31 @ @ import im . actor . server . persist 
 import im . actor . server . sms . SmsEngine 
 import slick . driver . PostgresDriver . api . _ 
 
 + import im . actor . server . util . StringUtils . _ 
 + 
 trait Notifier { 
 def processTask ( task : Notification ) : Unit 
 } 
 
 class PhoneNotifier ( engine : SmsEngine ) ( implicit db : Database , ec : ExecutionContext ) extends Notifier { 
 - def processTask ( task : Notification ) : Unit = { 
 - val total = task . data . values . sum 
 - val senders = task . data . keySet . flatten mkString " , " 
 - val message = s " You got $ total messages from $ senders . " 
 + def processTask ( task : Notification ) : Unit = 
 db . run { 
 for { 
 optPhone ← persist . UserPhone . findByUserId ( task . userId ) . headOption 
 - _ ← DBIO . successful ( optPhone . map { phone ⇒ engine . send ( phone . number , message ) } ) 
 + _ ← DBIO . successful ( optPhone . map { phone ⇒ engine . send ( phone . number , makeMessage ( task . data ) ) } ) 
 } yield ( ) 
 } 
 + 
 + private def makeMessage ( data : Map [ Option [ String ] , Int ] ) : String = { 
 + val total = data . values . sum 
 + val senders = data . keySet . flatten 
 + 
 + val message = s " You got $ total messages from $ { senders mkString " , " } in Actor . " 
 + isAsciiString ( message ) match { 
 + case true if message . length < = 140 ⇒ message 
 + case false if message . length < = 70 ⇒ message 
 + case _ ⇒ s " You got $ total messages in $ { senders . size } dialogs in Actor . " 
 + } 
 } 
 + 
 } 
 diff - - git a / actor - sms / src / main / scala / im / actor / server / sms / ClickatellSmsEngine . scala b / actor - sms / src / main / scala / im / actor / server / sms / ClickatellSmsEngine . scala 
 index e9e2d5b . . 98ec3b3 100644 
 - - - a / actor - sms / src / main / scala / im / actor / server / sms / ClickatellSmsEngine . scala 
 + + + b / actor - sms / src / main / scala / im / actor / server / sms / ClickatellSmsEngine . scala 
 @ @ - 8 , 27 + 8 , 34 @ @ import akka . http . scaladsl . model . _ 
 import akka . stream . FlowMaterializer 
 import com . typesafe . config . _ 
 
 + import im . actor . server . util . StringUtils . _ 
 + 
 class ClickatellSmsEngine ( config : Config ) ( implicit system : ActorSystem , flowMaterializer : FlowMaterializer , http : HttpExt ) extends SmsEngine { 
 private val user = config . getString ( " user " ) 
 private val password = config . getString ( " password " ) 
 private val apiId = config . getString ( " api - id " ) 
 private val baseUri = Uri ( " http : / / api . clickatell . com / http / sendmsg " ) 
 
 + private val baseParams = Map ( 
 + " user " → user , 
 + " password " → password , 
 + " api _ id " → apiId 
 + ) 
 + 
 implicit val ec : ExecutionContext = system . dispatcher 
 
 override def send ( phoneNumber : Long , message : String ) : Future [ Unit ] = { 
 - val uri = baseUri . withQuery ( Map ( 
 - " user " → user , 
 - " password " → password , 
 - " api _ id " → apiId , 
 - " to " → phoneNumber . toString , 
 - " text " → utfToHexString ( message ) , 
 - " unicode " → 1 . toString 
 - ) ) 
 - 
 - val request = HttpRequest ( uri = uri ) 
 - 
 - val f = http . singleRequest ( request ) map { 
 + val params = baseParams + ( " to " → phoneNumber . toString ) 
 + 
 + val uri = if ( isAsciiString ( message ) ) 
 + baseUri . withQuery ( params + ( " text " → message ) ) 
 + else 
 + baseUri . withQuery ( params + + Map ( 
 + " text " → utfToHexString ( message ) , 
 + " unicode " → 1 . toString 
 + ) ) 
 + 
 + val f = http . singleRequest ( HttpRequest ( uri = uri ) ) map { 
 case HttpResponse ( StatusCodes . OK , _ , entity , _ ) ⇒ 
 / / FIXME : check if body starts with OK 
 ( ) 
 @ @ - 44 , 5 + 51 , 4 @ @ class ClickatellSmsEngine ( config : Config ) ( implicit system : ActorSystem , flowMate 
 f 
 } 
 
 - private def utfToHexString ( from : String ) = { from . map ( ch ⇒ f " $ { ch . toInt } % 04X " ) . mkString } 
 } 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / webhooks / WebhooksFrontendSpec . scala b / actor - tests / src / test / scala / im / actor / server / webhooks / WebhooksFrontendSpec . scala 
 index 3365b2e . . 5468504 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / webhooks / WebhooksFrontendSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / webhooks / WebhooksFrontendSpec . scala 
 @ @ - 9 , 11 + 9 , 9 @ @ import im . actor . api . rpc . ClientData 
 import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } 
 import im . actor . server . api . rpc . service . { GroupsServiceHelpers , messaging } 
 import im . actor . server . peermanagers . { GroupPeerManager , PrivatePeerManager } 
 - import im . actor . server . { BaseAppSuite , persist } 
 - import im . actor . server . api . rpc . service . { GroupsServiceHelpers , messaging } 
 - import im . actor . server . { BaseAppSuite , persist } 
 import im . actor . server . presences . { GroupPresenceManager , PresenceManager } 
 import im . actor . server . social . SocialManager 
 + import im . actor . server . { BaseAppSuite , persist } 
 
 class WebhooksFrontendSpec extends BaseAppSuite with GroupsServiceHelpers { 
 behavior of " Webhooks frontend " 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / webhooks / WebhooksHandlerSpec . scala b / actor - tests / src / test / scala / im / actor / server / webhooks / WebhooksHandlerSpec . scala 
 index daf30db . . 0f9585e 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / webhooks / WebhooksHandlerSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / webhooks / WebhooksHandlerSpec . scala 
 @ @ - 5 , 11 + 5 , 10 @ @ import com . amazonaws . services . s3 . transfer . TransferManager 
 
 import im . actor . api . rpc . ClientData 
 import im . actor . api . rpc . messaging . TextMessage 
 + import im . actor . server . api . rpc . service . GroupsServiceHelpers 
 import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } 
 - import im . actor . server . api . rpc . service . { GroupsServiceHelpers , messaging } 
 import im . actor . server . models . Peer 
 import im . actor . server . peermanagers . { GroupPeerManager , PrivatePeerManager } 
 - import im . actor . server . { BaseAppSuite , MessageParsing , persist } 
 import im . actor . server . presences . { GroupPresenceManager , PresenceManager } 
 import im . actor . server . social . SocialManager 
 import im . actor . server . { BaseAppSuite , MessageParsing , persist } 
 diff - - git a / actor - utils / src / main / scala / im / actor / server / util / StringUtils . scala b / actor - utils / src / main / scala / im / actor / server / util / StringUtils . scala 
 new file mode 100644 
 index 0000000 . . bd4d449 
 - - - / dev / null 
 + + + b / actor - utils / src / main / scala / im / actor / server / util / StringUtils . scala 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package im . actor . server . util 
 + 
 + import java . nio . charset . Charset 
 + 
 + object StringUtils { 
 + 
 + private val encoder = Charset . forName ( " US - ASCII " ) . newEncoder ( ) 
 + 
 + def utfToHexString ( s : String ) : String = { s . map ( ch ⇒ f " $ { ch . toInt } % 04X " ) . mkString } 
 + 
 + def isAsciiString ( c : CharSequence ) : Boolean = encoder . canEncode ( c ) 
 + 
 + } 
 diff - - git a / project / Build . scala b / project / Build . scala 
 index 48a5302 . . 67b4241 100644 
 - - - a / project / Build . scala 
 + + + b / project / Build . scala 
 @ @ - 201 , 7 + 201 , 7 @ @ object Build extends sbt . Build { 
 id = " actor - sms " , 
 base = file ( " actor - sms " ) , 
 settings = defaultSettings + + Seq ( libraryDependencies + + = Dependencies . sms ) 
 - ) 
 + ) . dependsOn ( actorUtils ) 
 
 lazy val actorSocial = Project ( 
 id = " actor - social " , 
 @ @ - 271 , 7 + 271 , 7 @ @ object Build extends sbt . Build { 
 libraryDependencies + + = Dependencies . utils 
 ) 
 ) 
 - . dependsOn ( actorCommonsApi , actorModels , actorPersist , actorSms ) 
 + . dependsOn ( actorCommonsApi , actorModels , actorPersist ) 
 
 lazy val actorUtilsHttp = Project ( 
 id = " actor - utils - http " ,
