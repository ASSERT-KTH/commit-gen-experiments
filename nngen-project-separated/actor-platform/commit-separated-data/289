BLEU SCORE: 0.16133948681475338

TEST MSG: fix ( core ) : notify notifications actor on chat read by opening , mark as read if unread counter is non zero
GENERATED MSG: fix ( core ) : update read state in new auth

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > index 2671cba . . c7546ed 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > @ @ - 615 , 18 + 615 , 22 @ @ public class RouterActor extends ModuleActor { < nl > private void markAsReadIfNeeded ( Peer peer ) { < nl > if ( isConversationVisible ( peer ) ) { < nl > ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; < nl > - if ( state . getInReadDate ( ) < state . getInMaxMessageDate ( ) ) { < nl > + long inMaxMessageDate = state . getInMaxMessageDate ( ) ; < nl > + / / check UnreadCount for zero , because it can be loaded from server ( after login ) < nl > + if ( state . getUnreadCount ( ) ! = 0 | | state . getInReadDate ( ) < inMaxMessageDate ) { < nl > state = state < nl > . changeCounter ( 0 ) < nl > - . changeInReadDate ( state . getInMaxMessageDate ( ) ) ; < nl > + . changeInReadDate ( inMaxMessageDate ) ; < nl > conversationStates . addOrUpdateItem ( state ) ; < nl > < nl > context ( ) . getMessagesModule ( ) . getPlainReadActor ( ) < nl > - . send ( new CursorReaderActor . MarkRead ( peer , state . getInMaxMessageDate ( ) ) ) ; < nl > + . send ( new CursorReaderActor . MarkRead ( peer , inMaxMessageDate ) ) ; < nl > < nl > notifyActiveDialogsVM ( ) ; < nl > < nl > getDialogsRouter ( ) . onCounterChanged ( peer , 0 ) ; < nl > + < nl > + context ( ) . getNotificationsModule ( ) . onOwnRead ( peer , inMaxMessageDate ) ; < nl > } < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java < nl > index 8e83214 . . 3dfb65b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java < nl > @ @ - 492 , 13 + 492 , 14 @ @ public class ConversationActor extends ModuleActor { < nl > < nl > private void checkReadState ( boolean updateDialogs ) { < nl > if ( state . getInMaxMessageDate ( ) > state . getInReadDate ( ) ) { < nl > + boolean inReadStateWasNull = state . getInReadDate ( ) = = 0 ; < nl > state = state . changeInReadDate ( state . getInMaxMessageDate ( ) ) ; < nl > conversationState . addOrUpdateItem ( state ) ; < nl > < nl > boolean wasNotNull = inPendingIndex . getCount ( ) ! = 0 ; < nl > inPendingIndex . clear ( ) ; < nl > readerActor . send ( new OwnReadActor . MessageRead ( peer , state . getInReadDate ( ) ) ) ; < nl > - if ( wasNotNull & & updateDialogs ) { < nl > + if ( ( wasNotNull | | inReadStateWasNull ) & & updateDialogs ) { < nl > if ( ! isHiddenPeer ) { < nl > dialogsActor . send ( new DialogsActor . CounterChanged ( peer , 0 ) ) ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 index 2671cba . . c7546ed 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 @ @ - 615 , 18 + 615 , 22 @ @ public class RouterActor extends ModuleActor { 
 private void markAsReadIfNeeded ( Peer peer ) { 
 if ( isConversationVisible ( peer ) ) { 
 ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; 
 - if ( state . getInReadDate ( ) < state . getInMaxMessageDate ( ) ) { 
 + long inMaxMessageDate = state . getInMaxMessageDate ( ) ; 
 + / / check UnreadCount for zero , because it can be loaded from server ( after login ) 
 + if ( state . getUnreadCount ( ) ! = 0 | | state . getInReadDate ( ) < inMaxMessageDate ) { 
 state = state 
 . changeCounter ( 0 ) 
 - . changeInReadDate ( state . getInMaxMessageDate ( ) ) ; 
 + . changeInReadDate ( inMaxMessageDate ) ; 
 conversationStates . addOrUpdateItem ( state ) ; 
 
 context ( ) . getMessagesModule ( ) . getPlainReadActor ( ) 
 - . send ( new CursorReaderActor . MarkRead ( peer , state . getInMaxMessageDate ( ) ) ) ; 
 + . send ( new CursorReaderActor . MarkRead ( peer , inMaxMessageDate ) ) ; 
 
 notifyActiveDialogsVM ( ) ; 
 
 getDialogsRouter ( ) . onCounterChanged ( peer , 0 ) ; 
 + 
 + context ( ) . getNotificationsModule ( ) . onOwnRead ( peer , inMaxMessageDate ) ; 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java 
 index 8e83214 . . 3dfb65b 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java 
 @ @ - 492 , 13 + 492 , 14 @ @ public class ConversationActor extends ModuleActor { 
 
 private void checkReadState ( boolean updateDialogs ) { 
 if ( state . getInMaxMessageDate ( ) > state . getInReadDate ( ) ) { 
 + boolean inReadStateWasNull = state . getInReadDate ( ) = = 0 ; 
 state = state . changeInReadDate ( state . getInMaxMessageDate ( ) ) ; 
 conversationState . addOrUpdateItem ( state ) ; 
 
 boolean wasNotNull = inPendingIndex . getCount ( ) ! = 0 ; 
 inPendingIndex . clear ( ) ; 
 readerActor . send ( new OwnReadActor . MessageRead ( peer , state . getInReadDate ( ) ) ) ; 
 - if ( wasNotNull & & updateDialogs ) { 
 + if ( ( wasNotNull | | inReadStateWasNull ) & & updateDialogs ) { 
 if ( ! isHiddenPeer ) { 
 dialogsActor . send ( new DialogsActor . CounterChanged ( peer , 0 ) ) ; 
 }
