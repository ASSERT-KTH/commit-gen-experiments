BLEU SCORE: 0.10552670315936319

TEST MSG: fix ( android ) : recover AbsContent updated counter
GENERATED MSG: feat ( core ) : Handling peer changes

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / preprocessor / ChatListProcessor . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / preprocessor / ChatListProcessor . java < nl > index 7eab24c . . fa32786 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / preprocessor / ChatListProcessor . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / preprocessor / ChatListProcessor . java < nl > @ @ - 15 , 7 + 15 , 6 @ @ import org . jetbrains . annotations . Nullable ; < nl > < nl > import java . util . ArrayList ; < nl > import java . util . HashMap ; < nl > - import java . util . HashSet ; < nl > import java . util . List ; < nl > import java . util . regex . Matcher ; < nl > import java . util . regex . Pattern ; < nl > @ @ - 34 , 9 + 33 , 6 @ @ import im . actor . core . viewmodel . GroupVM ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . R ; < nl > - import im . actor . sdk . controllers . conversation . messages . preprocessor . PreprocessedData ; < nl > - import im . actor . sdk . controllers . conversation . messages . preprocessor . PreprocessedList ; < nl > - import im . actor . sdk . controllers . conversation . messages . preprocessor . PreprocessedTextData ; < nl > import im . actor . sdk . controllers . conversation . view . MentionSpan ; < nl > import im . actor . sdk . controllers . conversation . view . ReactionSpan ; < nl > import im . actor . sdk . view . BaseUrlSpan ; < nl > @ @ - 53 , 7 + 49 , 7 @ @ import static im . actor . sdk . util . ActorSDKMessenger . users ; < nl > public class ChatListProcessor implements ListProcessor < Message > { < nl > < nl > private HashMap < Long , PreprocessedTextData > preprocessedTexts = new HashMap < Long , PreprocessedTextData > ( ) ; < nl > - private HashSet < Integer > updatedTexts = new HashSet < Integer > ( ) ; < nl > + private HashMap < Long , Integer > updatedTexts = new HashMap < Long , Integer > ( ) ; < nl > < nl > private Peer peer ; < nl > private boolean isGroup ; < nl > @ @ - 135 , 8 + 131 , 8 @ @ public class ChatListProcessor implements ListProcessor < Message > { < nl > < nl > / / Process Content < nl > if ( msg . getContent ( ) instanceof TextContent ) { < nl > - int updatedCounter = 0 ; / / msg . getContent ( ) . getUpdatedCounter ( ) ; < nl > - if ( ! preprocessedTexts . containsKey ( msg . getRid ( ) ) | | ! updatedTexts . contains ( updatedCounter ) ) { < nl > + int updatedCounter = msg . getContent ( ) . getUpdatedCounter ( ) ; < nl > + if ( ! preprocessedTexts . containsKey ( msg . getRid ( ) ) | | ( ! updatedTexts . containsKey ( msg . getRid ( ) ) | | updatedTexts . get ( msg . getRid ( ) ) ! = updatedCounter ) ) { < nl > TextContent text = ( TextContent ) msg . getContent ( ) ; < nl > Spannable spannableString = new SpannableString ( text . getText ( ) ) ; < nl > boolean hasSpannable = false ; < nl > @ @ - 197 , 7 + 193 , 7 @ @ public class ChatListProcessor implements ListProcessor < Message > { < nl > spannableString = emoji ( ) . processEmojiCompatMutable ( spannableString , SmileProcessor . CONFIGURATION _ BUBBLES ) ; < nl > hasSpannable = true ; < nl > } < nl > - updatedTexts . add ( updatedCounter ) ; < nl > + updatedTexts . put ( msg . getRid ( ) , updatedCounter ) ; < nl > preprocessedTexts . put ( msg . getRid ( ) , new PreprocessedTextData ( reactions , text . getText ( ) , < nl > hasSpannable ? spannableString : null ) ) ; < nl > } else { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > index bbc641f . . 629b73b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > @ @ - 36 , 8 + 36 , 6 @ @ import im . actor . core . entity . content . internal . LocalDocument ; < nl > import im . actor . core . entity . content . internal . LocalPhoto ; < nl > import im . actor . core . entity . content . internal . LocalVideo ; < nl > import im . actor . core . entity . content . internal . LocalVoice ; < nl > - import im . actor . core . entity . Sticker ; < nl > - import im . actor . runtime . Runtime ; < nl > import im . actor . runtime . bser . BserParser ; < nl > import im . actor . runtime . bser . BserValues ; < nl > import im . actor . runtime . bser . BserWriter ; < nl > @ @ - 53 , 6 + 51 , 8 @ @ import im . actor . runtime . json . JSONObject ; < nl > < nl > public abstract class AbsContent { < nl > < nl > + int updatedCounter = 0 ; < nl > + < nl > public static byte [ ] serialize ( AbsContent content ) throws IOException { < nl > DataOutput dataOutput = new DataOutput ( ) ; < nl > BserWriter writer = new BserWriter ( dataOutput ) ; < nl > @ @ - 186 , 4 + 186 , 13 @ @ public abstract class AbsContent { < nl > protected void setContentContainer ( AbsContentContainer contentContainer ) { < nl > this . contentContainer = contentContainer ; < nl > } < nl > + < nl > + public int getUpdatedCounter ( ) { < nl > + return updatedCounter ; < nl > + } < nl > + < nl > + public AbsContent incrementUpdatedCounter ( int oldCounter ) { < nl > + updatedCounter = + + oldCounter ; < nl > + return this ; < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > index 887e33d . . e6ef775 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > @ @ - 39 , 16 + 39 , 6 @ @ import im . actor . core . modules . messaging . actions . CursorReaderActor ; < nl > import im . actor . core . modules . messaging . actions . CursorReceiverActor ; < nl > import im . actor . core . modules . messaging . actions . SenderActor ; < nl > import im . actor . core . modules . messaging . dialogs . DialogsInt ; < nl > - import im . actor . core . modules . messaging . dialogs . entity . ChatClear ; < nl > - import im . actor . core . modules . messaging . dialogs . entity . ChatDelete ; < nl > - import im . actor . core . modules . messaging . dialogs . entity . CounterChanged ; < nl > - import im . actor . core . modules . messaging . dialogs . entity . GroupChanged ; < nl > - import im . actor . core . modules . messaging . dialogs . entity . InMessage ; < nl > - import im . actor . core . modules . messaging . dialogs . entity . MessageDeleted ; < nl > - import im . actor . core . modules . messaging . dialogs . entity . PeerReadChanged ; < nl > - import im . actor . core . modules . messaging . dialogs . entity . PeerReceiveChanged ; < nl > - import im . actor . core . modules . messaging . dialogs . entity . UserChanged ; < nl > - import im . actor . core . modules . messaging . dialogs . entity . HistoryLoaded ; < nl > import im . actor . core . modules . messaging . history . entity . DialogHistory ; < nl > import im . actor . core . modules . messaging . router . entity . ActiveDialogGroup ; < nl > import im . actor . core . modules . messaging . router . entity . ActiveDialogStorage ; < nl > @ @ - 437 , 7 + 427 , 7 @ @ public class RouterActor extends ModuleActor { < nl > Message message = conversation ( peer ) . getValue ( rid ) ; < nl > < nl > if ( message ! = null ) { < nl > - conversation ( peer ) . addOrUpdateItem ( message . changeContent ( content ) ) ; < nl > + conversation ( peer ) . addOrUpdateItem ( message . changeContent ( content . incrementUpdatedCounter ( message . getContent ( ) . getUpdatedCounter ( ) ) ) ) ; < nl > return getDialogsRouter ( ) . onMessageContentChanged ( peer , rid , content ) ; < nl > } else { < nl > return Promise . success ( null ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java < nl > index 4f83a26 . . eba9119 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java < nl > @ @ - 293 , 8 + 293 , 7 @ @ public class GroupsProcessor extends AbsModule { < nl > < nl > @ Verified < nl > private void onGroupDescChanged ( Group group ) { < nl > - context ( ) . getMessagesModule ( ) . getDialogsActor ( ) < nl > - . send ( new DialogsActor . GroupChanged ( group ) ) ; < nl > + getRouter ( ) . onGroupChanged ( group ) ; < nl > } < nl > < nl > private RouterInt getRouter ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > index 263e8aa . . dd7f8c2 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > @ @ - 48 , 6 + 48 , 7 @ @ import im . actor . core . modules . messaging . router . entity . RouterNewMessages ; < nl > import im . actor . core . modules . messaging . router . entity . RouterOutgoingError ; < nl > import im . actor . core . modules . messaging . router . entity . RouterOutgoingMessage ; < nl > import im . actor . core . modules . messaging . router . entity . RouterOutgoingSent ; < nl > + import im . actor . core . modules . messaging . router . entity . RouterPeersChanged ; < nl > import im . actor . core . util . JavaUtil ; < nl > import im . actor . core . viewmodel . DialogGroup ; < nl > import im . actor . core . viewmodel . DialogSmall ; < nl > @ @ - 471 , 6 + 472 , 40 @ @ public class RouterActor extends ModuleActor { < nl > < nl > < nl > / / < nl > + / / Peer Changed < nl > + / / < nl > + < nl > + private void onPeersChanged ( List < User > users , List < Group > groups ) { < nl > + boolean isActiveNeedUpdate = false ; < nl > + for ( User u : users ) { < nl > + if ( ! isActiveNeedUpdate ) { < nl > + for ( ActiveDialogGroup g : activeDialogStorage . getGroups ( ) ) { < nl > + if ( g . getPeers ( ) . contains ( u . peer ( ) ) ) { < nl > + isActiveNeedUpdate = true ; < nl > + break ; < nl > + } < nl > + } < nl > + } < nl > + dialogsActor ( new DialogsActor . UserChanged ( u ) ) ; < nl > + } < nl > + for ( Group group : groups ) { < nl > + if ( ! isActiveNeedUpdate ) { < nl > + for ( ActiveDialogGroup g : activeDialogStorage . getGroups ( ) ) { < nl > + if ( g . getPeers ( ) . contains ( group . peer ( ) ) ) { < nl > + isActiveNeedUpdate = true ; < nl > + break ; < nl > + } < nl > + } < nl > + } < nl > + dialogsActor ( new DialogsActor . GroupChanged ( group ) ) ; < nl > + } < nl > + < nl > + if ( isActiveNeedUpdate ) { < nl > + notifyActiveDialogsVM ( ) ; < nl > + } < nl > + } < nl > + < nl > + / / < nl > / / Auto Messages Read < nl > / / < nl > < nl > @ @ - 624 , 6 + 659 , 9 @ @ public class RouterActor extends ModuleActor { < nl > } else if ( message instanceof RouterChatDelete ) { < nl > RouterChatDelete chatDelete = ( RouterChatDelete ) message ; < nl > onChatDelete ( chatDelete . getPeer ( ) ) ; < nl > + } else if ( message instanceof RouterPeersChanged ) { < nl > + RouterPeersChanged peersChanged = ( RouterPeersChanged ) message ; < nl > + onPeersChanged ( peersChanged . getUsers ( ) , peersChanged . getGroups ( ) ) ; < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterInt . java < nl > index 96a8e7b . . 5f6f0a1 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterInt . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterInt . java < nl > @ @ - 3 , 9 + 3 , 11 @ @ package im . actor . core . modules . messaging . router ; < nl > import java . util . ArrayList ; < nl > import java . util . List ; < nl > < nl > + import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . Reaction ; < nl > + import im . actor . core . entity . User ; < nl > import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . core . events . AppVisibleChanged ; < nl > import im . actor . core . events . PeerChatClosed ; < nl > @ @ - 29 , 6 + 31 , 7 @ @ import im . actor . core . modules . messaging . router . entity . RouterNewMessages ; < nl > import im . actor . core . modules . messaging . router . entity . RouterOutgoingError ; < nl > import im . actor . core . modules . messaging . router . entity . RouterOutgoingMessage ; < nl > import im . actor . core . modules . messaging . router . entity . RouterOutgoingSent ; < nl > + import im . actor . core . modules . messaging . router . entity . RouterPeersChanged ; < nl > import im . actor . runtime . actors . Actor ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorInterface ; < nl > @ @ - 117 , 6 + 120 , 30 @ @ public class RouterInt extends ActorInterface implements BusSubscriber { < nl > send ( new RouterChatDelete ( peer ) ) ; < nl > } < nl > < nl > + public void onUserChanged ( User user ) { < nl > + ArrayList < User > users = new ArrayList < > ( ) ; < nl > + users . add ( user ) ; < nl > + onUsersChanged ( users ) ; < nl > + } < nl > + < nl > + public void onGroupChanged ( Group group ) { < nl > + ArrayList < Group > groups = new ArrayList < > ( ) ; < nl > + groups . add ( group ) ; < nl > + onGroupsChanged ( groups ) ; < nl > + } < nl > + < nl > + public void onUsersChanged ( List < User > users ) { < nl > + onPeersChanged ( users , new ArrayList < Group > ( ) ) ; < nl > + } < nl > + < nl > + public void onGroupsChanged ( List < Group > groups ) { < nl > + onPeersChanged ( new ArrayList < User > ( ) , groups ) ; < nl > + } < nl > + < nl > + public void onPeersChanged ( List < User > users , List < Group > groups ) { < nl > + send ( new RouterPeersChanged ( users , groups ) ) ; < nl > + } < nl > + < nl > @ Override < nl > public void onBusEvent ( Event event ) { < nl > if ( event instanceof PeerChatOpened ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / RouterPeersChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / RouterPeersChanged . java < nl > new file mode 100644 < nl > index 0000000 . . a61093c < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / RouterPeersChanged . java < nl > @ @ - 0 , 0 + 1 , 25 @ @ < nl > + package im . actor . core . modules . messaging . router . entity ; < nl > + < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . entity . Group ; < nl > + import im . actor . core . entity . User ; < nl > + < nl > + public class RouterPeersChanged { < nl > + < nl > + private List < User > users ; < nl > + private List < Group > groups ; < nl > + < nl > + public RouterPeersChanged ( List < User > users , List < Group > groups ) { < nl > + this . users = users ; < nl > + this . groups = groups ; < nl > + } < nl > + < nl > + public List < User > getUsers ( ) { < nl > + return users ; < nl > + } < nl > + < nl > + public List < Group > getGroups ( ) { < nl > + return groups ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java < nl > index 11764fd . . da8b1ed 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java < nl > @ @ - 217 , 8 + 217 , 7 @ @ public class UsersProcessor extends AbsModule implements Processor { < nl > < nl > @ Verified < nl > private void onUserDescChanged ( User u ) { < nl > - context ( ) . getMessagesModule ( ) . getDialogsActor ( ) . send ( < nl > - new DialogsActor . UserChanged ( u ) ) ; < nl > + context ( ) . getMessagesModule ( ) . getRouter ( ) . onUserChanged ( u ) ; < nl > context ( ) . getContactsModule ( ) . getContactSyncActor ( ) < nl > . send ( new ContactsSyncActor . UserChanged ( u ) ) ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / preprocessor / ChatListProcessor . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / preprocessor / ChatListProcessor . java 
 index 7eab24c . . fa32786 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / preprocessor / ChatListProcessor . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / preprocessor / ChatListProcessor . java 
 @ @ - 15 , 7 + 15 , 6 @ @ import org . jetbrains . annotations . Nullable ; 
 
 import java . util . ArrayList ; 
 import java . util . HashMap ; 
 - import java . util . HashSet ; 
 import java . util . List ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 @ @ - 34 , 9 + 33 , 6 @ @ import im . actor . core . viewmodel . GroupVM ; 
 import im . actor . core . viewmodel . UserVM ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . R ; 
 - import im . actor . sdk . controllers . conversation . messages . preprocessor . PreprocessedData ; 
 - import im . actor . sdk . controllers . conversation . messages . preprocessor . PreprocessedList ; 
 - import im . actor . sdk . controllers . conversation . messages . preprocessor . PreprocessedTextData ; 
 import im . actor . sdk . controllers . conversation . view . MentionSpan ; 
 import im . actor . sdk . controllers . conversation . view . ReactionSpan ; 
 import im . actor . sdk . view . BaseUrlSpan ; 
 @ @ - 53 , 7 + 49 , 7 @ @ import static im . actor . sdk . util . ActorSDKMessenger . users ; 
 public class ChatListProcessor implements ListProcessor < Message > { 
 
 private HashMap < Long , PreprocessedTextData > preprocessedTexts = new HashMap < Long , PreprocessedTextData > ( ) ; 
 - private HashSet < Integer > updatedTexts = new HashSet < Integer > ( ) ; 
 + private HashMap < Long , Integer > updatedTexts = new HashMap < Long , Integer > ( ) ; 
 
 private Peer peer ; 
 private boolean isGroup ; 
 @ @ - 135 , 8 + 131 , 8 @ @ public class ChatListProcessor implements ListProcessor < Message > { 
 
 / / Process Content 
 if ( msg . getContent ( ) instanceof TextContent ) { 
 - int updatedCounter = 0 ; / / msg . getContent ( ) . getUpdatedCounter ( ) ; 
 - if ( ! preprocessedTexts . containsKey ( msg . getRid ( ) ) | | ! updatedTexts . contains ( updatedCounter ) ) { 
 + int updatedCounter = msg . getContent ( ) . getUpdatedCounter ( ) ; 
 + if ( ! preprocessedTexts . containsKey ( msg . getRid ( ) ) | | ( ! updatedTexts . containsKey ( msg . getRid ( ) ) | | updatedTexts . get ( msg . getRid ( ) ) ! = updatedCounter ) ) { 
 TextContent text = ( TextContent ) msg . getContent ( ) ; 
 Spannable spannableString = new SpannableString ( text . getText ( ) ) ; 
 boolean hasSpannable = false ; 
 @ @ - 197 , 7 + 193 , 7 @ @ public class ChatListProcessor implements ListProcessor < Message > { 
 spannableString = emoji ( ) . processEmojiCompatMutable ( spannableString , SmileProcessor . CONFIGURATION _ BUBBLES ) ; 
 hasSpannable = true ; 
 } 
 - updatedTexts . add ( updatedCounter ) ; 
 + updatedTexts . put ( msg . getRid ( ) , updatedCounter ) ; 
 preprocessedTexts . put ( msg . getRid ( ) , new PreprocessedTextData ( reactions , text . getText ( ) , 
 hasSpannable ? spannableString : null ) ) ; 
 } else { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 index bbc641f . . 629b73b 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 @ @ - 36 , 8 + 36 , 6 @ @ import im . actor . core . entity . content . internal . LocalDocument ; 
 import im . actor . core . entity . content . internal . LocalPhoto ; 
 import im . actor . core . entity . content . internal . LocalVideo ; 
 import im . actor . core . entity . content . internal . LocalVoice ; 
 - import im . actor . core . entity . Sticker ; 
 - import im . actor . runtime . Runtime ; 
 import im . actor . runtime . bser . BserParser ; 
 import im . actor . runtime . bser . BserValues ; 
 import im . actor . runtime . bser . BserWriter ; 
 @ @ - 53 , 6 + 51 , 8 @ @ import im . actor . runtime . json . JSONObject ; 
 
 public abstract class AbsContent { 
 
 + int updatedCounter = 0 ; 
 + 
 public static byte [ ] serialize ( AbsContent content ) throws IOException { 
 DataOutput dataOutput = new DataOutput ( ) ; 
 BserWriter writer = new BserWriter ( dataOutput ) ; 
 @ @ - 186 , 4 + 186 , 13 @ @ public abstract class AbsContent { 
 protected void setContentContainer ( AbsContentContainer contentContainer ) { 
 this . contentContainer = contentContainer ; 
 } 
 + 
 + public int getUpdatedCounter ( ) { 
 + return updatedCounter ; 
 + } 
 + 
 + public AbsContent incrementUpdatedCounter ( int oldCounter ) { 
 + updatedCounter = + + oldCounter ; 
 + return this ; 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 index 887e33d . . e6ef775 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 @ @ - 39 , 16 + 39 , 6 @ @ import im . actor . core . modules . messaging . actions . CursorReaderActor ; 
 import im . actor . core . modules . messaging . actions . CursorReceiverActor ; 
 import im . actor . core . modules . messaging . actions . SenderActor ; 
 import im . actor . core . modules . messaging . dialogs . DialogsInt ; 
 - import im . actor . core . modules . messaging . dialogs . entity . ChatClear ; 
 - import im . actor . core . modules . messaging . dialogs . entity . ChatDelete ; 
 - import im . actor . core . modules . messaging . dialogs . entity . CounterChanged ; 
 - import im . actor . core . modules . messaging . dialogs . entity . GroupChanged ; 
 - import im . actor . core . modules . messaging . dialogs . entity . InMessage ; 
 - import im . actor . core . modules . messaging . dialogs . entity . MessageDeleted ; 
 - import im . actor . core . modules . messaging . dialogs . entity . PeerReadChanged ; 
 - import im . actor . core . modules . messaging . dialogs . entity . PeerReceiveChanged ; 
 - import im . actor . core . modules . messaging . dialogs . entity . UserChanged ; 
 - import im . actor . core . modules . messaging . dialogs . entity . HistoryLoaded ; 
 import im . actor . core . modules . messaging . history . entity . DialogHistory ; 
 import im . actor . core . modules . messaging . router . entity . ActiveDialogGroup ; 
 import im . actor . core . modules . messaging . router . entity . ActiveDialogStorage ; 
 @ @ - 437 , 7 + 427 , 7 @ @ public class RouterActor extends ModuleActor { 
 Message message = conversation ( peer ) . getValue ( rid ) ; 
 
 if ( message ! = null ) { 
 - conversation ( peer ) . addOrUpdateItem ( message . changeContent ( content ) ) ; 
 + conversation ( peer ) . addOrUpdateItem ( message . changeContent ( content . incrementUpdatedCounter ( message . getContent ( ) . getUpdatedCounter ( ) ) ) ) ; 
 return getDialogsRouter ( ) . onMessageContentChanged ( peer , rid , content ) ; 
 } else { 
 return Promise . success ( null ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java 
 index 4f83a26 . . eba9119 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java 
 @ @ - 293 , 8 + 293 , 7 @ @ public class GroupsProcessor extends AbsModule { 
 
 @ Verified 
 private void onGroupDescChanged ( Group group ) { 
 - context ( ) . getMessagesModule ( ) . getDialogsActor ( ) 
 - . send ( new DialogsActor . GroupChanged ( group ) ) ; 
 + getRouter ( ) . onGroupChanged ( group ) ; 
 } 
 
 private RouterInt getRouter ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 index 263e8aa . . dd7f8c2 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 @ @ - 48 , 6 + 48 , 7 @ @ import im . actor . core . modules . messaging . router . entity . RouterNewMessages ; 
 import im . actor . core . modules . messaging . router . entity . RouterOutgoingError ; 
 import im . actor . core . modules . messaging . router . entity . RouterOutgoingMessage ; 
 import im . actor . core . modules . messaging . router . entity . RouterOutgoingSent ; 
 + import im . actor . core . modules . messaging . router . entity . RouterPeersChanged ; 
 import im . actor . core . util . JavaUtil ; 
 import im . actor . core . viewmodel . DialogGroup ; 
 import im . actor . core . viewmodel . DialogSmall ; 
 @ @ - 471 , 6 + 472 , 40 @ @ public class RouterActor extends ModuleActor { 
 
 
 / / 
 + / / Peer Changed 
 + / / 
 + 
 + private void onPeersChanged ( List < User > users , List < Group > groups ) { 
 + boolean isActiveNeedUpdate = false ; 
 + for ( User u : users ) { 
 + if ( ! isActiveNeedUpdate ) { 
 + for ( ActiveDialogGroup g : activeDialogStorage . getGroups ( ) ) { 
 + if ( g . getPeers ( ) . contains ( u . peer ( ) ) ) { 
 + isActiveNeedUpdate = true ; 
 + break ; 
 + } 
 + } 
 + } 
 + dialogsActor ( new DialogsActor . UserChanged ( u ) ) ; 
 + } 
 + for ( Group group : groups ) { 
 + if ( ! isActiveNeedUpdate ) { 
 + for ( ActiveDialogGroup g : activeDialogStorage . getGroups ( ) ) { 
 + if ( g . getPeers ( ) . contains ( group . peer ( ) ) ) { 
 + isActiveNeedUpdate = true ; 
 + break ; 
 + } 
 + } 
 + } 
 + dialogsActor ( new DialogsActor . GroupChanged ( group ) ) ; 
 + } 
 + 
 + if ( isActiveNeedUpdate ) { 
 + notifyActiveDialogsVM ( ) ; 
 + } 
 + } 
 + 
 + / / 
 / / Auto Messages Read 
 / / 
 
 @ @ - 624 , 6 + 659 , 9 @ @ public class RouterActor extends ModuleActor { 
 } else if ( message instanceof RouterChatDelete ) { 
 RouterChatDelete chatDelete = ( RouterChatDelete ) message ; 
 onChatDelete ( chatDelete . getPeer ( ) ) ; 
 + } else if ( message instanceof RouterPeersChanged ) { 
 + RouterPeersChanged peersChanged = ( RouterPeersChanged ) message ; 
 + onPeersChanged ( peersChanged . getUsers ( ) , peersChanged . getGroups ( ) ) ; 
 } else { 
 super . onReceive ( message ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterInt . java 
 index 96a8e7b . . 5f6f0a1 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterInt . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterInt . java 
 @ @ - 3 , 9 + 3 , 11 @ @ package im . actor . core . modules . messaging . router ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 
 + import im . actor . core . entity . Group ; 
 import im . actor . core . entity . Message ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . Reaction ; 
 + import im . actor . core . entity . User ; 
 import im . actor . core . entity . content . AbsContent ; 
 import im . actor . core . events . AppVisibleChanged ; 
 import im . actor . core . events . PeerChatClosed ; 
 @ @ - 29 , 6 + 31 , 7 @ @ import im . actor . core . modules . messaging . router . entity . RouterNewMessages ; 
 import im . actor . core . modules . messaging . router . entity . RouterOutgoingError ; 
 import im . actor . core . modules . messaging . router . entity . RouterOutgoingMessage ; 
 import im . actor . core . modules . messaging . router . entity . RouterOutgoingSent ; 
 + import im . actor . core . modules . messaging . router . entity . RouterPeersChanged ; 
 import im . actor . runtime . actors . Actor ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorInterface ; 
 @ @ - 117 , 6 + 120 , 30 @ @ public class RouterInt extends ActorInterface implements BusSubscriber { 
 send ( new RouterChatDelete ( peer ) ) ; 
 } 
 
 + public void onUserChanged ( User user ) { 
 + ArrayList < User > users = new ArrayList < > ( ) ; 
 + users . add ( user ) ; 
 + onUsersChanged ( users ) ; 
 + } 
 + 
 + public void onGroupChanged ( Group group ) { 
 + ArrayList < Group > groups = new ArrayList < > ( ) ; 
 + groups . add ( group ) ; 
 + onGroupsChanged ( groups ) ; 
 + } 
 + 
 + public void onUsersChanged ( List < User > users ) { 
 + onPeersChanged ( users , new ArrayList < Group > ( ) ) ; 
 + } 
 + 
 + public void onGroupsChanged ( List < Group > groups ) { 
 + onPeersChanged ( new ArrayList < User > ( ) , groups ) ; 
 + } 
 + 
 + public void onPeersChanged ( List < User > users , List < Group > groups ) { 
 + send ( new RouterPeersChanged ( users , groups ) ) ; 
 + } 
 + 
 @ Override 
 public void onBusEvent ( Event event ) { 
 if ( event instanceof PeerChatOpened ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / RouterPeersChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / RouterPeersChanged . java 
 new file mode 100644 
 index 0000000 . . a61093c 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / RouterPeersChanged . java 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + package im . actor . core . modules . messaging . router . entity ; 
 + 
 + import java . util . List ; 
 + 
 + import im . actor . core . entity . Group ; 
 + import im . actor . core . entity . User ; 
 + 
 + public class RouterPeersChanged { 
 + 
 + private List < User > users ; 
 + private List < Group > groups ; 
 + 
 + public RouterPeersChanged ( List < User > users , List < Group > groups ) { 
 + this . users = users ; 
 + this . groups = groups ; 
 + } 
 + 
 + public List < User > getUsers ( ) { 
 + return users ; 
 + } 
 + 
 + public List < Group > getGroups ( ) { 
 + return groups ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java 
 index 11764fd . . da8b1ed 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java 
 @ @ - 217 , 8 + 217 , 7 @ @ public class UsersProcessor extends AbsModule implements Processor { 
 
 @ Verified 
 private void onUserDescChanged ( User u ) { 
 - context ( ) . getMessagesModule ( ) . getDialogsActor ( ) . send ( 
 - new DialogsActor . UserChanged ( u ) ) ; 
 + context ( ) . getMessagesModule ( ) . getRouter ( ) . onUserChanged ( u ) ; 
 context ( ) . getContactsModule ( ) . getContactSyncActor ( ) 
 . send ( new ContactsSyncActor . UserChanged ( u ) ) ; 
 }
