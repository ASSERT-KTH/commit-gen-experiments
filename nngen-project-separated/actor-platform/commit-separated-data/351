BLEU SCORE: 0.2013095485643692

TEST MSG: feat ( server : group ) : TransferOwnership
GENERATED MSG: feat ( server ) : moved pubgroups state to GroupOffice

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto < nl > index 3886c9a . . beb8ced 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / group . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / group . proto < nl > @ @ - 173 , 6 + 173 , 15 @ @ message GroupCommands { < nl > required int32 joining _ user _ id = 2 ; < nl > required int32 joining _ user _ auth _ sid = 3 ; < nl > } < nl > + < nl > + message TransferOwnership { < nl > + option ( scalapb . message ) . extends = " im . actor . server . group . GroupCommand " ; < nl > + < nl > + required int32 group _ id = 1 ; < nl > + required int32 client _ user _ id = 2 ; < nl > + required int32 client _ auth _ sid = 4 ; < nl > + required int32 user _ id = 3 ; < nl > + } < nl > } < nl > < nl > message GroupQueries { < nl > @ @ - 396 , 5 + 405 , 12 @ @ message GroupEvents { < nl > required int64 ts = 2 [ ( scalapb . field ) . type = " java . time . Instant " ] ; < nl > required string token = 1 ; < nl > } < nl > + < nl > + message OwnerChanged { < nl > + option ( scalapb . message ) . extends = " im . actor . server . group . GroupEvent " ; < nl > + < nl > + required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; < nl > + required int32 user _ id = 2 ; < nl > + } < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala < nl > index 4bea9f8 . . c13aaac 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > package im . actor . api < nl > < nl > import cats . data . Xor < nl > + import im . actor . server . CommonErrors < nl > import im . actor . server . group . GroupErrors . GroupNotFound < nl > import im . actor . server . office . EntityNotFoundError < nl > import im . actor . server . user . UserErrors . UserNotFound < nl > @ @ - 23 , 13 + 24 , 14 @ @ package object rpc extends PeersImplicits with HistoryImplicits with DialogConve < nl > val NotSupportedInOss = RpcError ( 400 , " NOT _ SUPPORTED _ IN _ OSS " , " Feature is not supported in the Open - Source version . " , canTryAgain = false , None ) < nl > val IntenalError = RpcError ( 500 , " INTERNAL _ ERROR " , " " , false , None ) < nl > < nl > - def forbidden ( userMessage : String ) = RpcError ( 403 , " FORBIDDEN " , userMessage , false , None ) < nl > + def forbidden ( userMessage : String = " You are not allowed to do this . " ) = RpcError ( 403 , " FORBIDDEN " , userMessage , false , None ) < nl > } < nl > < nl > def recoverCommon : PartialFunction [ Throwable , RpcError ] = { < nl > - case UserNotFound ( _ ) ⇒ CommonRpcErrors . UserNotFound < nl > - case GroupNotFound ( _ ) ⇒ CommonRpcErrors . GroupNotFound < nl > - case EntityNotFoundError ⇒ CommonRpcErrors . EntityNotFound < nl > + case UserNotFound ( _ ) ⇒ CommonRpcErrors . UserNotFound < nl > + case GroupNotFound ( _ ) ⇒ CommonRpcErrors . GroupNotFound < nl > + case EntityNotFoundError ⇒ CommonRpcErrors . EntityNotFound < nl > + case CommonErrors . Forbidden ( message ) ⇒ CommonRpcErrors . forbidden ( message ) < nl > } < nl > < nl > type OkResp [ + A ] = A < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / FutureResultRpc . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / FutureResultRpc . scala < nl > index 3b3c080 . . 60f2782 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / FutureResultRpc . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / FutureResultRpc . scala < nl > @ @ - 2 , 4 + 2 , 6 @ @ package im . actor . api . rpc < nl > < nl > import im . actor . concurrent . FutureResult < nl > < nl > - object FutureResultRpc extends FutureResult [ RpcError ] < nl > \ No newline at end of file < nl > + trait FutureResultRpc extends FutureResult [ RpcError ] < nl > + < nl > + object FutureResultRpc extends FutureResultRpc < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / CommonErrors . scala b / actor - server / actor - core / src / main / scala / im / actor / server / CommonErrors . scala < nl > new file mode 100644 < nl > index 0000000 . . cd654cb < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / CommonErrors . scala < nl > @ @ - 0 , 0 + 1 , 6 @ @ < nl > + package im . actor . server < nl > + < nl > + object CommonErrors { < nl > + case class Forbidden ( message : String ) extends RuntimeException ( message ) < nl > + object Forbidden extends Forbidden ( " You are not allowed to do this . " ) < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index 2f0582a . . 8bc2b4a 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 1 , 6 + 1 , 6 @ @ < nl > package im . actor . server . group < nl > < nl > - import java . time . { Instant , LocalDateTime , ZoneOffset } < nl > + import java . time . { Instant , LocalDateTime , ZoneOffset } < nl > < nl > import akka . actor . Status < nl > import akka . pattern . pipe < nl > @ @ - 9 , 23 + 9 , 24 @ @ import im . actor . api . rpc . Update < nl > import im . actor . api . rpc . groups . _ < nl > import im . actor . api . rpc . messaging . ApiServiceMessage < nl > import im . actor . api . rpc . misc . ApiExtension < nl > - import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } < nl > + import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } < nl > import im . actor . api . rpc . users . ApiSex < nl > import im . actor . server . ApiConversions . _ < nl > import im . actor . server . acl . ACLUtils < nl > - import im . actor . server . dialog . { DialogExtension , UserAcl } < nl > - import im . actor . server . model . { AvatarData , Group , Peer , PeerType } < nl > + import im . actor . server . dialog . { DialogExtension , UserAcl } < nl > + import im . actor . server . model . { AvatarData , Group , Peer , PeerType } < nl > import im . actor . server . persist . _ < nl > - import im . actor . server . file . { Avatar , ImageUtils } < nl > + import im . actor . server . file . { Avatar , ImageUtils } < nl > import im . actor . server . group . GroupErrors . _ < nl > import im . actor . server . office . PushTexts < nl > - import im . actor . server . sequence . { PushData , PushRules , SeqState , SeqStateDate } < nl > + import im . actor . server . sequence . { PushData , PushRules , SeqState , SeqStateDate } < nl > import im . actor . util . ThreadLocalSecureRandom < nl > import ACLUtils . _ < nl > import im . actor . util . misc . IdUtils . _ < nl > import ImageUtils . _ < nl > import akka . http . scaladsl . util . FastFuture < nl > import im . actor . concurrent . FutureExt < nl > + import im . actor . server . CommonErrors < nl > import org . joda . time . DateTime < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > @ @ - 430 , 6 + 431 , 21 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > } < nl > } < nl > < nl > + protected def transferOwnership ( group : GroupState , clientUserId : Int , clientAuthSid : Int , userId : Int ) : Unit = { < nl > + if ( group . ownerUserId = = clientUserId ) { < nl > + persistReply ( OwnerChanged ( Instant . now , userId ) , group ) { _ ⇒ < nl > + for { < nl > + ( reply , _ ) ← seqUpdExt . broadcastOwnSingleUpdate ( < nl > + userId = clientUserId , < nl > + bcastUserIds = group . members . keySet . filterNot ( _ = = clientUserId ) , < nl > + update = UpdateGroupOwnerChanged ( group . id , userId ) , < nl > + pushRules = PushRules ( ) . withExcludeAuthSids ( Seq ( clientAuthSid ) ) < nl > + ) < nl > + } yield reply < nl > + } < nl > + } else sender ( ) ! Status . Failure ( CommonErrors . Forbidden ) < nl > + } < nl > + < nl > private def removeUser ( initiatorId : Int , userId : Int , memberIds : Set [ Int ] , clientAuthSid : Int , serviceMessage : ApiServiceMessage , update : Update , date : Instant , randomId : Long ) : DBIO [ SeqStateDate ] = { < nl > val groupPeer = Peer ( PeerType . Group , groupId ) < nl > for { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > index d0c790a . . 7956436 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > @ @ - 83 , 6 + 83 , 9 @ @ private [ group ] sealed trait Commands extends UserAcl { < nl > < nl > def revokeIntegrationToken ( groupId : Int , clientUserId : Int ) : Future [ String ] = < nl > ( processorRegion . ref ? RevokeIntegrationToken ( groupId , clientUserId ) ) . mapTo [ RevokeIntegrationTokenAck ] map ( _ . token ) < nl > + < nl > + def transferOwnership ( groupId : Int , clientUserId : Int , userId : Int ) : Future [ SeqState ] = < nl > + ( processorRegion . ref ? TransferOwnership ( groupId , clientUserId , userId ) ) . mapTo [ SeqState ] < nl > } < nl > < nl > private [ group ] sealed trait Queries { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > index 82b80d4 . . 6ca913a 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > @ @ - 9 , 6 + 9 , 7 @ @ import akka . persistence . RecoveryCompleted < nl > import akka . stream . { ActorMaterializer , ActorMaterializerSettings , Materializer } < nl > import akka . util . Timeout < nl > import im . actor . api . rpc . collections . ApiMapValue < nl > + import im . actor . api . rpc . groups . ApiMember < nl > import im . actor . serialization . ActorSerializer < nl > import im . actor . server . KeyValueMappings < nl > import im . actor . server . cqrs . TaggedEvent < nl > @ @ - 42 , 6 + 43 , 7 @ @ private [ group ] case class GroupState ( < nl > typ : GroupType , < nl > accessHash : Long , < nl > creatorUserId : Int , < nl > + ownerUserId : Int , < nl > createdAt : Instant , < nl > members : Map [ Int , Member ] , < nl > invitedUserIds : Set [ Int ] , < nl > @ @ - 120 , 7 + 122 , 8 @ @ object GroupProcessor { < nl > 22012 → classOf [ GroupEvents . TitleUpdated ] , < nl > 22013 → classOf [ GroupEvents . TopicUpdated ] , < nl > 22015 → classOf [ GroupEvents . UserBecameAdmin ] , < nl > - 22016 → classOf [ GroupEvents . IntegrationTokenRevoked ] < nl > + 22016 → classOf [ GroupEvents . IntegrationTokenRevoked ] , < nl > + 22017 → classOf [ GroupEvents . OwnerChanged ] < nl > ) < nl > < nl > def props : Props = Props ( classOf [ GroupProcessor ] ) < nl > @ @ - 189 , 6 + 192 , 8 @ @ private [ group ] final class GroupProcessor < nl > state . copy ( members = state . members . updated ( userId , state . members ( userId ) . copy ( isAdmin = true ) ) ) < nl > case GroupEvents . IntegrationTokenRevoked ( _ , token ) ⇒ < nl > state . copy ( bot = state . bot . map ( _ . copy ( token = token ) ) ) < nl > + case GroupEvents . OwnerChanged ( _ , userId ) ⇒ < nl > + state . copy ( ownerUserId = userId ) < nl > } < nl > } < nl > < nl > @ @ - 249 , 6 + 254 , 8 @ @ private [ group ] final class GroupProcessor < nl > makeUserAdmin ( state , clientUserId , candidateId ) < nl > case RevokeIntegrationToken ( _ , userId ) ⇒ < nl > revokeIntegrationToken ( state , userId ) < nl > + case TransferOwnership ( _ , clientUserId , clientAuthSid , userId ) ⇒ < nl > + transferOwnership ( state , clientUserId , clientAuthSid , userId ) < nl > case StopOffice ⇒ context stop self < nl > case ReceiveTimeout ⇒ context . parent ! ShardRegion . Passivate ( stopMessage = StopOffice ) < nl > case de : DialogEnvelope ⇒ < nl > @ @ - 259 , 7 + 266 , 7 @ @ private [ group ] final class GroupProcessor < nl > < nl > override def receiveRecover = { < nl > case created : GroupEvents . Created ⇒ < nl > - groupStateMaybe = Some ( initState ( created ) . copy ( isHistoryShared = created . typ . exists ( t = > t . isChannel | | t . isPublic ) ) ) < nl > + groupStateMaybe = Some ( initState ( created ) . copy ( isHistoryShared = created . typ . exists ( t ⇒ t . isChannel | | t . isPublic ) ) ) < nl > case evt : GroupEvent ⇒ < nl > groupStateMaybe = groupStateMaybe map ( updatedState ( evt , _ ) ) < nl > case RecoveryCompleted ⇒ < nl > @ @ - 279 , 6 + 286 , 7 @ @ private [ group ] final class GroupProcessor < nl > title = evt . title , < nl > about = None , < nl > creatorUserId = evt . creatorUserId , < nl > + ownerUserId = evt . creatorUserId , < nl > createdAt = evt . ts , < nl > members = ( evt . userIds map ( userId ⇒ userId → Member ( userId , evt . creatorUserId , evt . ts , isAdmin = userId = = evt . creatorUserId ) ) ) . toMap , < nl > bot = None , < nl > @ @ - 303 , 4 + 311 , 12 @ @ private [ group ] final class GroupProcessor < nl > protected def isBot ( group : GroupState , userId : Int ) : Boolean = userId = = 0 | | ( group . bot exists ( _ . userId = = userId ) ) < nl > < nl > protected def isAdmin ( group : GroupState , userId : Int ) : Boolean = group . members . get ( userId ) exists ( _ . isAdmin ) < nl > + < nl > + protected def canInvitePeople ( group : GroupState , clientUserId : Int ) = < nl > + isMember ( group , clientUserId ) < nl > + < nl > + protected def isMember ( group : GroupState , clientUserId : Int ) = hasMember ( group , clientUserId ) < nl > + < nl > + protected def canViewMembers ( group : GroupState , clientUserId : Int ) = < nl > + ( group . typ . isGeneral | | group . typ . isPublic ) & & isMember ( group , clientUserId ) < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > index 6fa29f4 . . dcff5a0 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > @ @ - 120 , 12 + 120 , 4 @ @ private [ group ] trait GroupQueryHandlers extends GroupCommandHelpers { < nl > } < nl > } else Vector . empty [ ApiMember ] < nl > } < nl > - < nl > - private def canInvitePeople ( group : GroupState , clientUserId : Int ) = < nl > - isMember ( group , clientUserId ) < nl > - < nl > - private def isMember ( group : GroupState , clientUserId : Int ) = hasMember ( group , clientUserId ) < nl > - < nl > - private def canViewMembers ( group : GroupState , clientUserId : Int ) = < nl > - ( group . typ . isGeneral | | group . typ . isPublic ) & & isMember ( group , clientUserId ) < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala < nl > index dde5c2f . . 31b6afd 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala < nl > @ @ - 8 , 6 + 8 , 7 @ @ import im . actor . server . acl . ACLUtils < nl > import im . actor . server . api . rpc . service . groups . GroupRpcErrors < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . group . GroupErrors . GroupNotFound < nl > + import im . actor . server . group . GroupExtension < nl > import im . actor . server . model . _ < nl > import im . actor . server . persist . _ < nl > import im . actor . server . user . UserErrors . UserNotFound < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala < nl > index 0a66e5f . . 35c2cd2 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala < nl > @ @ - 4 , 6 + 4 , 7 @ @ import im . actor . api . rpc . RpcError < nl > < nl > object GroupRpcErrors { < nl > val YouAlreadyAMember = RpcError ( 400 , " USER _ ALREADY _ INVITED " , " You are already a member of this group . " , false , None ) < nl > + val NotAMember = RpcError ( 403 , " FORBIDDEN " , " You are not a group member . " , false , None ) < nl > val WrongGroupTitle = RpcError ( 400 , " WRONG _ GROUP _ TITLE " , " Can ' t create group with such title . " , false , None ) < nl > val TopicTooLong = RpcError ( 400 , " GROUP _ TOPIC _ TOO _ LONG " , " Group topic is too long . It should be no longer then 255 characters " , false , None ) < nl > val AboutTooLong = RpcError ( 400 , " GROUP _ ABOUT _ TOO _ LONG " , " Group about is too long . It should be no longer then 255 characters " , false , None ) < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > index a754ea8 . . 8ba2452 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > @ @ - 104 , 7 + 104 , 13 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act < nl > * @ param newOwner New group ' s owner < nl > * / < nl > override protected def doHandleTransferOwnership ( groupPeer : ApiGroupOutPeer , newOwner : Int , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeqDate ] ] = < nl > - Future . failed ( new RuntimeException ( " Not implemented " ) ) < nl > + authorized ( clientData ) { implicit client ⇒ < nl > + withGroupOutPeerF ( groupPeer ) { _ ⇒ < nl > + for { < nl > + SeqState ( seq , state ) ← groupExt . transferOwnership ( groupPeer . groupId , client . userId , newOwner ) < nl > + } yield Ok ( ResponseSeqDate ( seq , state . toByteArray , 0 ) ) < nl > + } < nl > + } < nl > < nl > override def doHandleEditGroupAvatar ( < nl > groupOutPeer : ApiGroupOutPeer ,
NEAREST DIFF (one line): diff - - git a / actor - server / actor - peer - managers / src / main / protobuf / group . proto b / actor - server / actor - peer - managers / src / main / protobuf / group . proto < nl > index 089851f . . 17113d1 100644 < nl > - - - a / actor - server / actor - peer - managers / src / main / protobuf / group . proto < nl > + + + b / actor - server / actor - peer - managers / src / main / protobuf / group . proto < nl > @ @ - 23 , 7 + 23 , 7 @ @ message GroupCommands { < nl > repeated int32 user _ ids = 5 ; < nl > } < nl > < nl > - message CreateResponse { < nl > + message CreateAck { < nl > required int64 access _ hash = 1 ; < nl > required int32 seq = 2 ; < nl > required bytes state = 3 ; < nl > @ @ - 114 , 6 + 114 , 16 @ @ message GroupCommands { < nl > optional bytes avatar = 1 [ ( scalapb . field ) . type = " im . actor . api . rpc . files . Avatar " ] ; < nl > required SeqStateDate seqstatedate = 2 ; < nl > } < nl > + < nl > + message MakePublic { < nl > + option ( scalapb . message ) . extends = " im . actor . server . group . GroupCommand " ; < nl > + < nl > + required int32 group _ id = 1 ; < nl > + < nl > + optional string descrption = 2 ; < nl > + } < nl > + < nl > + message MakePublicAck { } < nl > } < nl > < nl > message GroupEvents { < nl > @ @ - 182 , 5 + 192 , 15 @ @ message GroupEvents { < nl > < nl > optional Avatar avatar = 1 ; < nl > } < nl > + < nl > + message BecamePublic { < nl > + option ( scalapb . message ) . extends = " im . actor . server . group . GroupEvent " ; < nl > + } < nl > + < nl > + message DescriptionUpdated { < nl > + option ( scalapb . message ) . extends = " im . actor . server . group . GroupEvent " ; < nl > + < nl > + required string description = 1 ; < nl > + } < nl > } < nl > < nl > diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index 2b48b44 . . 82fcaec 100644 < nl > - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 6 , 7 + 6 , 6 @ @ import slick . driver . PostgresDriver . api . _ < nl > import im . actor . api . rpc . groups . UpdateGroupAvatarChanged < nl > import im . actor . server . api . ApiConversions . _ < nl > import im . actor . server . file . Avatar < nl > - import im . actor . server . group . GroupEvents . AvatarUpdated < nl > import im . actor . server . push . SeqUpdatesManager . _ < nl > import im . actor . server . push . SeqUpdatesManagerRegion < nl > import im . actor . server . sequence . SeqStateDate < nl > @ @ - 18 , 6 + 17 , 7 @ @ private [ group ] trait GroupCommandHandlers { < nl > self : GroupOfficeActor ⇒ < nl > < nl > import GroupCommands . _ < nl > + import GroupEvents . _ < nl > < nl > private implicit val system = context . system < nl > private implicit val ec = context . dispatcher < nl > @ @ - 53 , 4 + 53 , 13 @ @ private [ group ] trait GroupCommandHandlers { < nl > } ) < nl > } < nl > } < nl > + < nl > + protected def makePublic ( group : Group , description : String ) ( implicit db : Database ) : Unit = { < nl > + persistStashingReply ( Vector ( BecamePublic ( ) , DescriptionUpdated ( description ) ) ) ( workWith ( _ , group ) ) { _ ⇒ < nl > + db . run ( DBIO . sequence ( Seq ( < nl > + p . Group . makePublic ( groupId ) , < nl > + p . Group . updateDescription ( groupId , description ) < nl > + ) ) ) map ( _ ⇒ MakePublicAck ( ) ) < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOfficeActor . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOfficeActor . scala < nl > index 2021d59 . . 874d345 100644 < nl > - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOfficeActor . scala < nl > + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOfficeActor . scala < nl > @ @ - 52 , 6 + 52 , 7 @ @ private [ group ] case class Group ( < nl > members : Map [ Int , Member ] , < nl > invitedUserIds : Set [ Int ] , < nl > title : String , < nl > + description : String , < nl > isPublic : Boolean , < nl > lastSenderId : Option [ Int ] , < nl > lastReceivedDate : Option [ DateTime ] , < nl > @ @ - 67 , 7 + 68 , 7 @ @ private [ group ] object GroupOfficeActor { < nl > private case class Initialized ( groupUsersIds : Set [ Int ] , invitedUsersIds : Set [ Int ] , isPublic : Boolean ) < nl > < nl > ActorSerializer . register ( 5001 , classOf [ GroupCommands . Create ] ) < nl > - ActorSerializer . register ( 5002 , classOf [ GroupCommands . CreateResponse ] ) < nl > + ActorSerializer . register ( 5002 , classOf [ GroupCommands . CreateAck ] ) < nl > ActorSerializer . register ( 5003 , classOf [ GroupCommands . Invite ] ) < nl > ActorSerializer . register ( 5004 , classOf [ GroupCommands . Join ] ) < nl > ActorSerializer . register ( 5005 , classOf [ GroupCommands . Kick ] ) < nl > @ @ - 76 , 6 + 77 , 8 @ @ private [ group ] object GroupOfficeActor { < nl > ActorSerializer . register ( 5008 , classOf [ GroupCommands . MessageReceived ] ) < nl > ActorSerializer . register ( 5009 , classOf [ GroupCommands . MessageRead ] ) < nl > ActorSerializer . register ( 5010 , classOf [ GroupCommands . UpdateAvatar ] ) < nl > + ActorSerializer . register ( 5011 , classOf [ GroupCommands . MakePublic ] ) < nl > + ActorSerializer . register ( 5012 , classOf [ GroupCommands . MakePublicAck ] ) < nl > < nl > ActorSerializer . register ( 6001 , classOf [ GroupEvents . MessageRead ] ) < nl > ActorSerializer . register ( 6002 , classOf [ GroupEvents . MessageReceived ] ) < nl > @ @ - 86 , 6 + 89 , 8 @ @ private [ group ] object GroupOfficeActor { < nl > ActorSerializer . register ( 6007 , classOf [ GroupEvents . UserKicked ] ) < nl > ActorSerializer . register ( 6008 , classOf [ GroupEvents . UserLeft ] ) < nl > ActorSerializer . register ( 6009 , classOf [ GroupEvents . AvatarUpdated ] ) < nl > + ActorSerializer . register ( 6010 , classOf [ GroupEvents . BecamePublic ] ) < nl > + ActorSerializer . register ( 6011 , classOf [ GroupEvents . DescriptionUpdated ] ) < nl > < nl > def props ( < nl > implicit < nl > @ @ - 178 , 7 + 183 , 7 @ @ private [ group ] final class GroupOfficeActor ( < nl > serviceMessage . toByteArray < nl > ) < nl > SeqState ( seq , state ) ← broadcastClientUpdate ( creatorUserId , creatorAuthId , update , None , false ) < nl > - } yield CreateResponse ( group . accessHash , seq , state , date . getMillis ) < nl > + } yield CreateAck ( group . accessHash , seq , state , date . getMillis ) < nl > ) pipeTo sender ( ) < nl > < nl > case evt @ GroupEvents . BotAdded ( userId , token ) ⇒ < nl > @ @ - 313 , 8 + 318 , 6 @ @ private [ group ] final class GroupOfficeActor ( < nl > val memberIds = group . members . keySet < nl > < nl > val action : DBIO [ ( SeqStateDate , Vector [ Sequence ] , Long ) ] = { < nl > - context become working ( updateState ( evt , group ) ) < nl > - < nl > val isMember = memberIds . contains ( joiningUserId ) < nl > < nl > / / TODO : Move to view < nl > @ @ - 402 , 6 + 405 , 8 @ @ private [ group ] final class GroupOfficeActor ( < nl > } < nl > case UpdateAvatar ( groupId , clientUserId , clientAuthId , avatarOpt , randomId ) ⇒ < nl > updateAvatar ( group , clientUserId , clientAuthId , avatarOpt , randomId ) < nl > + case MakePublic ( groupId , description ) ⇒ < nl > + makePublic ( group , description . getOrElse ( " " ) ) < nl > case StopOffice ⇒ context stop self < nl > case ReceiveTimeout ⇒ context . parent ! ShardRegion . Passivate ( stopMessage = StopOffice ) < nl > } < nl > @ @ - 431 , 6 + 436 , 7 @ @ private [ group ] final class GroupOfficeActor ( < nl > id = groupId , < nl > accessHash = evt . accessHash , < nl > title = evt . title , < nl > + description = " " , < nl > creatorUserId = evt . creatorUserId , < nl > createdAt = evt . createdAt , < nl > members = Map ( evt . creatorUserId → Member ( evt . creatorUserId , evt . creatorUserId , evt . createdAt ) ) , < nl > @ @ - 470 , 6 + 476 , 10 @ @ private [ group ] final class GroupOfficeActor ( < nl > state . copy ( members = state . members - userId ) < nl > case GroupEvents . AvatarUpdated ( avatar ) ⇒ < nl > state . copy ( avatar = avatar ) < nl > + case GroupEvents . BecamePublic ( ) ⇒ < nl > + state . copy ( isPublic = true ) < nl > + case GroupEvents . DescriptionUpdated ( desc ) ⇒ < nl > + state . copy ( description = desc ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > index dfcb529 . . 8abdaaa 100644 < nl > - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > @ @ - 21 , 9 + 21 , 23 @ @ trait GroupOperations { < nl > timeout : Timeout , < nl > ec : ExecutionContext , < nl > client : AuthorizedClientData < nl > - ) : Future [ CreateResponse ] = < nl > - ( peerManagerRegion . ref ? Create ( groupId , client . userId , client . authId , title , randomId , userIds . toSeq ) ) < nl > - . mapTo [ CreateResponse ] < nl > + ) : Future [ CreateAck ] = create ( groupId , client . userId , client . authId , title , randomId , userIds ) < nl > + < nl > + def create ( groupId : Int , clientUserId : Int , clientAuthId : Long , title : String , randomId : Long , userIds : Set [ Int ] ) ( < nl > + implicit < nl > + peerManagerRegion : GroupOfficeRegion , < nl > + timeout : Timeout , < nl > + ec : ExecutionContext < nl > + ) : Future [ CreateAck ] = < nl > + ( peerManagerRegion . ref ? Create ( groupId , clientUserId , clientAuthId , title , randomId , userIds . toSeq ) ) . mapTo [ CreateAck ] < nl > + < nl > + def makePublic ( groupId : Int , description : String ) ( < nl > + implicit < nl > + region : GroupOfficeRegion , < nl > + timeout : Timeout , < nl > + ec : ExecutionContext < nl > + ) : Future [ MakePublicAck ] = < nl > + ( region . ref ? MakePublic ( groupId , Some ( description ) ) ) . mapTo [ MakePublicAck ] < nl > < nl > def sendMessage ( groupId : Int , senderUserId : Int , senderAuthId : Long , accessHash : Long , randomId : Long , message : ApiMessage , isFat : Boolean = false ) ( < nl > implicit < nl > diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / office / Office . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / office / Office . scala < nl > index 6bdbeb9 . . 7c48f2a 100644 < nl > - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / office / Office . scala < nl > + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / office / Office . scala < nl > @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . office < nl > < nl > import java . util . concurrent . TimeUnit < nl > < nl > + import scala . collection . immutable < nl > import scala . concurrent . Future < nl > import scala . concurrent . duration . _ < nl > import scala . language . postfixOps < nl > @ @ - 24 , 10 + 25 , 17 @ @ trait Office extends PersistentActor with ActorLogging { < nl > log . error ( reason , " Failure while processing message { } " , message ) < nl > } < nl > < nl > - def stashing : Receive = { < nl > + protected def stashing : Receive = { < nl > case msg ⇒ stash ( ) < nl > } < nl > < nl > + def persistReply [ E , R ] ( e : E ) ( onComplete : E ⇒ Any ) ( f : E ⇒ R ) : Unit = { < nl > + persist ( e ) { evt ⇒ < nl > + sender ( ) ! f ( e ) < nl > + onComplete ( evt ) < nl > + } < nl > + } < nl > + < nl > def persistStashing [ E , R ] ( e : E ) ( onComplete : E ⇒ Any ) ( f : E ⇒ Future [ R ] ) : Unit = { < nl > context become stashing < nl > < nl > @ @ - 64 , 6 + 72 , 28 @ @ trait Office extends PersistentActor with ActorLogging { < nl > } < nl > } < nl > < nl > + def persistStashingReply [ E , R ] ( es : immutable . Seq [ E ] ) ( onComplete : E ⇒ Any ) ( f : immutable . Seq [ E ] ⇒ Future [ R ] ) : Unit = { < nl > + val replyTo = sender ( ) < nl > + < nl > + context become stashing < nl > + < nl > + persistAsync ( es ) ( _ ⇒ ( ) ) < nl > + < nl > + defer ( ( ) ) { _ ⇒ < nl > + f ( es ) pipeTo replyTo onComplete { < nl > + case Success ( _ ) ⇒ < nl > + es foreach onComplete < nl > + unstashAll ( ) < nl > + case Failure ( e ) ⇒ < nl > + log . error ( e , " Failure while processing event { } " , e ) < nl > + replyTo ! Status . Failure ( e ) < nl > + < nl > + es foreach onComplete < nl > + unstashAll ( ) < nl > + } < nl > + } < nl > + } < nl > + < nl > if ( passivationIntervalMs > 0 ) { < nl > log . warning ( " Passivating in { } ms " , passivationIntervalMs ) < nl > < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > index 9d89b96 . . 247c8fc 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > @ @ - 99 , 4 + 99 , 11 @ @ object Group { < nl > byIdC . applied ( id ) < nl > . map ( g ⇒ ( g . title , g . titleChangerUserId , g . titleChangedAt , g . titleChangeRandomId ) ) < nl > . update ( ( title , changerUserId , date , randomId ) ) < nl > + < nl > + def updateDescription ( id : Int , description : String ) = < nl > + byIdC . applied ( id ) < nl > + . map ( _ . description ) < nl > + . update ( description ) < nl > + < nl > + def makePublic ( id : Int ) = byIdC . applied ( id ) . map ( _ . isPublic ) . update ( true ) < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala < nl > index d7aa06b . . 8f6c13d 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala < nl > @ @ - 1 , 22 + 1 , 13 @ @ < nl > package im . actor . server . api . rpc . service . pubgroups < nl > < nl > - import im . actor . server . group . GroupOfficeRegion < nl > - < nl > import scala . concurrent . { ExecutionContext , Future } < nl > < nl > import akka . actor . ActorSystem < nl > - import com . amazonaws . services . s3 . transfer . TransferManager < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > import im . actor . api . rpc . _ < nl > - import im . actor . api . rpc . groups . { ResponseCreateGroup , ResponseJoinGroup , ResponseJoinGroupDirect , GroupsService } < nl > - import im . actor . api . rpc . pubgroups . { PublicGroup , ResponseGetPublicGroups , PubgroupsService } < nl > - import im . actor . server . api . rpc . service . groups . GroupInviteConfig < nl > - import im . actor . server . models < nl > + import im . actor . api . rpc . pubgroups . { PubgroupsService , ResponseGetPublicGroups } < nl > import im . actor . server . persist < nl > - import im . actor . server . presences . GroupPresenceManagerRegion < nl > - import im . actor . server . push . SeqUpdatesManagerRegion < nl > - import im . actor . server . util . GroupUtils < nl > import im . actor . server . util . GroupUtils . getPubgroupStructUnsafe < nl > < nl > class PubgroupsServiceImpl ( < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala < nl > index a2bfb1f . . 2cd7688 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala < nl > @ @ - 1 , 15 + 1 , 17 @ @ < nl > package im . actor . server . api . rpc . service < nl > < nl > - import scala . concurrent . Await < nl > + import scala . concurrent . { ExecutionContext , Await } < nl > import scala . concurrent . duration . _ < nl > import scala . util . Random < nl > < nl > import akka . actor . ActorSystem < nl > + import akka . util . Timeout < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > import im . actor . api . rpc . ClientData < nl > import im . actor . api . rpc . groups . { GroupsService , ResponseCreateGroup } < nl > import im . actor . api . rpc . peers . UserOutPeer < nl > + import im . actor . server . group . { GroupOfficeRegion , GroupOffice } < nl > import im . actor . server . persist < nl > import im . actor . server . util . ACLUtils < nl > < nl > @ @ - 32 , 14 + 34 , 13 @ @ trait GroupsServiceHelpers { < nl > clientData : ClientData , < nl > db : Database , < nl > service : GroupsService , < nl > - actorSystem : ActorSystem < nl > + actorSystem : ActorSystem , < nl > + region : GroupOfficeRegion , < nl > + timeout : Timeout , < nl > + ec : ExecutionContext < nl > ) : ResponseCreateGroup = { < nl > val resp = createGroup ( title , userIds ) < nl > - / / TODO : delete after proper service implementation < nl > - Await . result ( db . run ( persist . Group . groups < nl > - . filter ( _ . id = = = resp . groupPeer . groupId ) < nl > - . map ( g ⇒ ( g . isPublic , g . description ) ) < nl > - . update ( ( true , description ) ) ) , 5 . seconds ) < nl > + Await . result ( GroupOffice . makePublic ( resp . groupPeer . groupId , description ) , 5 . seconds ) < nl > resp < nl > } < nl > } < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > index 544eb9e . . 8d085c2 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > @ @ - 173 , 10 + 173 , 12 @ @ class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceHelpers < nl > < nl > def public ( ) = { < nl > val group = models . Group ( Random . nextInt , 0 , Random . nextLong , " Public group " , isPublic = true , new DateTime , " A public group " ) < nl > + val groupId = Random . nextInt < nl > < nl > - whenReady ( db . run ( persist . Group . create ( group , Random . nextLong ) ) ) ( identity ) < nl > + val accessHash = whenReady ( GroupOffice . create ( groupId , 0 , 0L , " Public group " , Random . nextLong , Set . empty ) ) ( _ . accessHash ) < nl > + whenReady ( GroupOffice . makePublic ( groupId , " Public group description " ) ) ( identity ) < nl > < nl > - val groupOutPeer = GroupOutPeer ( group . id , group . accessHash ) < nl > + val groupOutPeer = GroupOutPeer ( groupId , accessHash ) < nl > < nl > { < nl > implicit val clientData = clientData1

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto 
 index 3886c9a . . beb8ced 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / group . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / group . proto 
 @ @ - 173 , 6 + 173 , 15 @ @ message GroupCommands { 
 required int32 joining _ user _ id = 2 ; 
 required int32 joining _ user _ auth _ sid = 3 ; 
 } 
 + 
 + message TransferOwnership { 
 + option ( scalapb . message ) . extends = " im . actor . server . group . GroupCommand " ; 
 + 
 + required int32 group _ id = 1 ; 
 + required int32 client _ user _ id = 2 ; 
 + required int32 client _ auth _ sid = 4 ; 
 + required int32 user _ id = 3 ; 
 + } 
 } 
 
 message GroupQueries { 
 @ @ - 396 , 5 + 405 , 12 @ @ message GroupEvents { 
 required int64 ts = 2 [ ( scalapb . field ) . type = " java . time . Instant " ] ; 
 required string token = 1 ; 
 } 
 + 
 + message OwnerChanged { 
 + option ( scalapb . message ) . extends = " im . actor . server . group . GroupEvent " ; 
 + 
 + required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; 
 + required int32 user _ id = 2 ; 
 + } 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala 
 index 4bea9f8 . . c13aaac 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package im . actor . api 
 
 import cats . data . Xor 
 + import im . actor . server . CommonErrors 
 import im . actor . server . group . GroupErrors . GroupNotFound 
 import im . actor . server . office . EntityNotFoundError 
 import im . actor . server . user . UserErrors . UserNotFound 
 @ @ - 23 , 13 + 24 , 14 @ @ package object rpc extends PeersImplicits with HistoryImplicits with DialogConve 
 val NotSupportedInOss = RpcError ( 400 , " NOT _ SUPPORTED _ IN _ OSS " , " Feature is not supported in the Open - Source version . " , canTryAgain = false , None ) 
 val IntenalError = RpcError ( 500 , " INTERNAL _ ERROR " , " " , false , None ) 
 
 - def forbidden ( userMessage : String ) = RpcError ( 403 , " FORBIDDEN " , userMessage , false , None ) 
 + def forbidden ( userMessage : String = " You are not allowed to do this . " ) = RpcError ( 403 , " FORBIDDEN " , userMessage , false , None ) 
 } 
 
 def recoverCommon : PartialFunction [ Throwable , RpcError ] = { 
 - case UserNotFound ( _ ) ⇒ CommonRpcErrors . UserNotFound 
 - case GroupNotFound ( _ ) ⇒ CommonRpcErrors . GroupNotFound 
 - case EntityNotFoundError ⇒ CommonRpcErrors . EntityNotFound 
 + case UserNotFound ( _ ) ⇒ CommonRpcErrors . UserNotFound 
 + case GroupNotFound ( _ ) ⇒ CommonRpcErrors . GroupNotFound 
 + case EntityNotFoundError ⇒ CommonRpcErrors . EntityNotFound 
 + case CommonErrors . Forbidden ( message ) ⇒ CommonRpcErrors . forbidden ( message ) 
 } 
 
 type OkResp [ + A ] = A 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / FutureResultRpc . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / FutureResultRpc . scala 
 index 3b3c080 . . 60f2782 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / FutureResultRpc . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / FutureResultRpc . scala 
 @ @ - 2 , 4 + 2 , 6 @ @ package im . actor . api . rpc 
 
 import im . actor . concurrent . FutureResult 
 
 - object FutureResultRpc extends FutureResult [ RpcError ] 
 \ No newline at end of file 
 + trait FutureResultRpc extends FutureResult [ RpcError ] 
 + 
 + object FutureResultRpc extends FutureResultRpc 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / CommonErrors . scala b / actor - server / actor - core / src / main / scala / im / actor / server / CommonErrors . scala 
 new file mode 100644 
 index 0000000 . . cd654cb 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / CommonErrors . scala 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + package im . actor . server 
 + 
 + object CommonErrors { 
 + case class Forbidden ( message : String ) extends RuntimeException ( message ) 
 + object Forbidden extends Forbidden ( " You are not allowed to do this . " ) 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index 2f0582a . . 8bc2b4a 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package im . actor . server . group 
 
 - import java . time . { Instant , LocalDateTime , ZoneOffset } 
 + import java . time . { Instant , LocalDateTime , ZoneOffset } 
 
 import akka . actor . Status 
 import akka . pattern . pipe 
 @ @ - 9 , 23 + 9 , 24 @ @ import im . actor . api . rpc . Update 
 import im . actor . api . rpc . groups . _ 
 import im . actor . api . rpc . messaging . ApiServiceMessage 
 import im . actor . api . rpc . misc . ApiExtension 
 - import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } 
 + import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } 
 import im . actor . api . rpc . users . ApiSex 
 import im . actor . server . ApiConversions . _ 
 import im . actor . server . acl . ACLUtils 
 - import im . actor . server . dialog . { DialogExtension , UserAcl } 
 - import im . actor . server . model . { AvatarData , Group , Peer , PeerType } 
 + import im . actor . server . dialog . { DialogExtension , UserAcl } 
 + import im . actor . server . model . { AvatarData , Group , Peer , PeerType } 
 import im . actor . server . persist . _ 
 - import im . actor . server . file . { Avatar , ImageUtils } 
 + import im . actor . server . file . { Avatar , ImageUtils } 
 import im . actor . server . group . GroupErrors . _ 
 import im . actor . server . office . PushTexts 
 - import im . actor . server . sequence . { PushData , PushRules , SeqState , SeqStateDate } 
 + import im . actor . server . sequence . { PushData , PushRules , SeqState , SeqStateDate } 
 import im . actor . util . ThreadLocalSecureRandom 
 import ACLUtils . _ 
 import im . actor . util . misc . IdUtils . _ 
 import ImageUtils . _ 
 import akka . http . scaladsl . util . FastFuture 
 import im . actor . concurrent . FutureExt 
 + import im . actor . server . CommonErrors 
 import org . joda . time . DateTime 
 import slick . driver . PostgresDriver . api . _ 
 
 @ @ - 430 , 6 + 431 , 21 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 } 
 } 
 
 + protected def transferOwnership ( group : GroupState , clientUserId : Int , clientAuthSid : Int , userId : Int ) : Unit = { 
 + if ( group . ownerUserId = = clientUserId ) { 
 + persistReply ( OwnerChanged ( Instant . now , userId ) , group ) { _ ⇒ 
 + for { 
 + ( reply , _ ) ← seqUpdExt . broadcastOwnSingleUpdate ( 
 + userId = clientUserId , 
 + bcastUserIds = group . members . keySet . filterNot ( _ = = clientUserId ) , 
 + update = UpdateGroupOwnerChanged ( group . id , userId ) , 
 + pushRules = PushRules ( ) . withExcludeAuthSids ( Seq ( clientAuthSid ) ) 
 + ) 
 + } yield reply 
 + } 
 + } else sender ( ) ! Status . Failure ( CommonErrors . Forbidden ) 
 + } 
 + 
 private def removeUser ( initiatorId : Int , userId : Int , memberIds : Set [ Int ] , clientAuthSid : Int , serviceMessage : ApiServiceMessage , update : Update , date : Instant , randomId : Long ) : DBIO [ SeqStateDate ] = { 
 val groupPeer = Peer ( PeerType . Group , groupId ) 
 for { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 index d0c790a . . 7956436 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 @ @ - 83 , 6 + 83 , 9 @ @ private [ group ] sealed trait Commands extends UserAcl { 
 
 def revokeIntegrationToken ( groupId : Int , clientUserId : Int ) : Future [ String ] = 
 ( processorRegion . ref ? RevokeIntegrationToken ( groupId , clientUserId ) ) . mapTo [ RevokeIntegrationTokenAck ] map ( _ . token ) 
 + 
 + def transferOwnership ( groupId : Int , clientUserId : Int , userId : Int ) : Future [ SeqState ] = 
 + ( processorRegion . ref ? TransferOwnership ( groupId , clientUserId , userId ) ) . mapTo [ SeqState ] 
 } 
 
 private [ group ] sealed trait Queries { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 index 82b80d4 . . 6ca913a 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 @ @ - 9 , 6 + 9 , 7 @ @ import akka . persistence . RecoveryCompleted 
 import akka . stream . { ActorMaterializer , ActorMaterializerSettings , Materializer } 
 import akka . util . Timeout 
 import im . actor . api . rpc . collections . ApiMapValue 
 + import im . actor . api . rpc . groups . ApiMember 
 import im . actor . serialization . ActorSerializer 
 import im . actor . server . KeyValueMappings 
 import im . actor . server . cqrs . TaggedEvent 
 @ @ - 42 , 6 + 43 , 7 @ @ private [ group ] case class GroupState ( 
 typ : GroupType , 
 accessHash : Long , 
 creatorUserId : Int , 
 + ownerUserId : Int , 
 createdAt : Instant , 
 members : Map [ Int , Member ] , 
 invitedUserIds : Set [ Int ] , 
 @ @ - 120 , 7 + 122 , 8 @ @ object GroupProcessor { 
 22012 → classOf [ GroupEvents . TitleUpdated ] , 
 22013 → classOf [ GroupEvents . TopicUpdated ] , 
 22015 → classOf [ GroupEvents . UserBecameAdmin ] , 
 - 22016 → classOf [ GroupEvents . IntegrationTokenRevoked ] 
 + 22016 → classOf [ GroupEvents . IntegrationTokenRevoked ] , 
 + 22017 → classOf [ GroupEvents . OwnerChanged ] 
 ) 
 
 def props : Props = Props ( classOf [ GroupProcessor ] ) 
 @ @ - 189 , 6 + 192 , 8 @ @ private [ group ] final class GroupProcessor 
 state . copy ( members = state . members . updated ( userId , state . members ( userId ) . copy ( isAdmin = true ) ) ) 
 case GroupEvents . IntegrationTokenRevoked ( _ , token ) ⇒ 
 state . copy ( bot = state . bot . map ( _ . copy ( token = token ) ) ) 
 + case GroupEvents . OwnerChanged ( _ , userId ) ⇒ 
 + state . copy ( ownerUserId = userId ) 
 } 
 } 
 
 @ @ - 249 , 6 + 254 , 8 @ @ private [ group ] final class GroupProcessor 
 makeUserAdmin ( state , clientUserId , candidateId ) 
 case RevokeIntegrationToken ( _ , userId ) ⇒ 
 revokeIntegrationToken ( state , userId ) 
 + case TransferOwnership ( _ , clientUserId , clientAuthSid , userId ) ⇒ 
 + transferOwnership ( state , clientUserId , clientAuthSid , userId ) 
 case StopOffice ⇒ context stop self 
 case ReceiveTimeout ⇒ context . parent ! ShardRegion . Passivate ( stopMessage = StopOffice ) 
 case de : DialogEnvelope ⇒ 
 @ @ - 259 , 7 + 266 , 7 @ @ private [ group ] final class GroupProcessor 
 
 override def receiveRecover = { 
 case created : GroupEvents . Created ⇒ 
 - groupStateMaybe = Some ( initState ( created ) . copy ( isHistoryShared = created . typ . exists ( t = > t . isChannel | | t . isPublic ) ) ) 
 + groupStateMaybe = Some ( initState ( created ) . copy ( isHistoryShared = created . typ . exists ( t ⇒ t . isChannel | | t . isPublic ) ) ) 
 case evt : GroupEvent ⇒ 
 groupStateMaybe = groupStateMaybe map ( updatedState ( evt , _ ) ) 
 case RecoveryCompleted ⇒ 
 @ @ - 279 , 6 + 286 , 7 @ @ private [ group ] final class GroupProcessor 
 title = evt . title , 
 about = None , 
 creatorUserId = evt . creatorUserId , 
 + ownerUserId = evt . creatorUserId , 
 createdAt = evt . ts , 
 members = ( evt . userIds map ( userId ⇒ userId → Member ( userId , evt . creatorUserId , evt . ts , isAdmin = userId = = evt . creatorUserId ) ) ) . toMap , 
 bot = None , 
 @ @ - 303 , 4 + 311 , 12 @ @ private [ group ] final class GroupProcessor 
 protected def isBot ( group : GroupState , userId : Int ) : Boolean = userId = = 0 | | ( group . bot exists ( _ . userId = = userId ) ) 
 
 protected def isAdmin ( group : GroupState , userId : Int ) : Boolean = group . members . get ( userId ) exists ( _ . isAdmin ) 
 + 
 + protected def canInvitePeople ( group : GroupState , clientUserId : Int ) = 
 + isMember ( group , clientUserId ) 
 + 
 + protected def isMember ( group : GroupState , clientUserId : Int ) = hasMember ( group , clientUserId ) 
 + 
 + protected def canViewMembers ( group : GroupState , clientUserId : Int ) = 
 + ( group . typ . isGeneral | | group . typ . isPublic ) & & isMember ( group , clientUserId ) 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 index 6fa29f4 . . dcff5a0 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 @ @ - 120 , 12 + 120 , 4 @ @ private [ group ] trait GroupQueryHandlers extends GroupCommandHelpers { 
 } 
 } else Vector . empty [ ApiMember ] 
 } 
 - 
 - private def canInvitePeople ( group : GroupState , clientUserId : Int ) = 
 - isMember ( group , clientUserId ) 
 - 
 - private def isMember ( group : GroupState , clientUserId : Int ) = hasMember ( group , clientUserId ) 
 - 
 - private def canViewMembers ( group : GroupState , clientUserId : Int ) = 
 - ( group . typ . isGeneral | | group . typ . isPublic ) & & isMember ( group , clientUserId ) 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala 
 index dde5c2f . . 31b6afd 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala 
 @ @ - 8 , 6 + 8 , 7 @ @ import im . actor . server . acl . ACLUtils 
 import im . actor . server . api . rpc . service . groups . GroupRpcErrors 
 import im . actor . server . db . DbExtension 
 import im . actor . server . group . GroupErrors . GroupNotFound 
 + import im . actor . server . group . GroupExtension 
 import im . actor . server . model . _ 
 import im . actor . server . persist . _ 
 import im . actor . server . user . UserErrors . UserNotFound 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala 
 index 0a66e5f . . 35c2cd2 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala 
 @ @ - 4 , 6 + 4 , 7 @ @ import im . actor . api . rpc . RpcError 
 
 object GroupRpcErrors { 
 val YouAlreadyAMember = RpcError ( 400 , " USER _ ALREADY _ INVITED " , " You are already a member of this group . " , false , None ) 
 + val NotAMember = RpcError ( 403 , " FORBIDDEN " , " You are not a group member . " , false , None ) 
 val WrongGroupTitle = RpcError ( 400 , " WRONG _ GROUP _ TITLE " , " Can ' t create group with such title . " , false , None ) 
 val TopicTooLong = RpcError ( 400 , " GROUP _ TOPIC _ TOO _ LONG " , " Group topic is too long . It should be no longer then 255 characters " , false , None ) 
 val AboutTooLong = RpcError ( 400 , " GROUP _ ABOUT _ TOO _ LONG " , " Group about is too long . It should be no longer then 255 characters " , false , None ) 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 index a754ea8 . . 8ba2452 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 @ @ - 104 , 7 + 104 , 13 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act 
 * @ param newOwner New group ' s owner 
 * / 
 override protected def doHandleTransferOwnership ( groupPeer : ApiGroupOutPeer , newOwner : Int , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeqDate ] ] = 
 - Future . failed ( new RuntimeException ( " Not implemented " ) ) 
 + authorized ( clientData ) { implicit client ⇒ 
 + withGroupOutPeerF ( groupPeer ) { _ ⇒ 
 + for { 
 + SeqState ( seq , state ) ← groupExt . transferOwnership ( groupPeer . groupId , client . userId , newOwner ) 
 + } yield Ok ( ResponseSeqDate ( seq , state . toByteArray , 0 ) ) 
 + } 
 + } 
 
 override def doHandleEditGroupAvatar ( 
 groupOutPeer : ApiGroupOutPeer ,

NEAREST DIFF:
diff - - git a / actor - server / actor - peer - managers / src / main / protobuf / group . proto b / actor - server / actor - peer - managers / src / main / protobuf / group . proto 
 index 089851f . . 17113d1 100644 
 - - - a / actor - server / actor - peer - managers / src / main / protobuf / group . proto 
 + + + b / actor - server / actor - peer - managers / src / main / protobuf / group . proto 
 @ @ - 23 , 7 + 23 , 7 @ @ message GroupCommands { 
 repeated int32 user _ ids = 5 ; 
 } 
 
 - message CreateResponse { 
 + message CreateAck { 
 required int64 access _ hash = 1 ; 
 required int32 seq = 2 ; 
 required bytes state = 3 ; 
 @ @ - 114 , 6 + 114 , 16 @ @ message GroupCommands { 
 optional bytes avatar = 1 [ ( scalapb . field ) . type = " im . actor . api . rpc . files . Avatar " ] ; 
 required SeqStateDate seqstatedate = 2 ; 
 } 
 + 
 + message MakePublic { 
 + option ( scalapb . message ) . extends = " im . actor . server . group . GroupCommand " ; 
 + 
 + required int32 group _ id = 1 ; 
 + 
 + optional string descrption = 2 ; 
 + } 
 + 
 + message MakePublicAck { } 
 } 
 
 message GroupEvents { 
 @ @ - 182 , 5 + 192 , 15 @ @ message GroupEvents { 
 
 optional Avatar avatar = 1 ; 
 } 
 + 
 + message BecamePublic { 
 + option ( scalapb . message ) . extends = " im . actor . server . group . GroupEvent " ; 
 + } 
 + 
 + message DescriptionUpdated { 
 + option ( scalapb . message ) . extends = " im . actor . server . group . GroupEvent " ; 
 + 
 + required string description = 1 ; 
 + } 
 } 
 
 diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index 2b48b44 . . 82fcaec 100644 
 - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 6 , 7 + 6 , 6 @ @ import slick . driver . PostgresDriver . api . _ 
 import im . actor . api . rpc . groups . UpdateGroupAvatarChanged 
 import im . actor . server . api . ApiConversions . _ 
 import im . actor . server . file . Avatar 
 - import im . actor . server . group . GroupEvents . AvatarUpdated 
 import im . actor . server . push . SeqUpdatesManager . _ 
 import im . actor . server . push . SeqUpdatesManagerRegion 
 import im . actor . server . sequence . SeqStateDate 
 @ @ - 18 , 6 + 17 , 7 @ @ private [ group ] trait GroupCommandHandlers { 
 self : GroupOfficeActor ⇒ 
 
 import GroupCommands . _ 
 + import GroupEvents . _ 
 
 private implicit val system = context . system 
 private implicit val ec = context . dispatcher 
 @ @ - 53 , 4 + 53 , 13 @ @ private [ group ] trait GroupCommandHandlers { 
 } ) 
 } 
 } 
 + 
 + protected def makePublic ( group : Group , description : String ) ( implicit db : Database ) : Unit = { 
 + persistStashingReply ( Vector ( BecamePublic ( ) , DescriptionUpdated ( description ) ) ) ( workWith ( _ , group ) ) { _ ⇒ 
 + db . run ( DBIO . sequence ( Seq ( 
 + p . Group . makePublic ( groupId ) , 
 + p . Group . updateDescription ( groupId , description ) 
 + ) ) ) map ( _ ⇒ MakePublicAck ( ) ) 
 + } 
 + } 
 } 
 diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOfficeActor . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOfficeActor . scala 
 index 2021d59 . . 874d345 100644 
 - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOfficeActor . scala 
 + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOfficeActor . scala 
 @ @ - 52 , 6 + 52 , 7 @ @ private [ group ] case class Group ( 
 members : Map [ Int , Member ] , 
 invitedUserIds : Set [ Int ] , 
 title : String , 
 + description : String , 
 isPublic : Boolean , 
 lastSenderId : Option [ Int ] , 
 lastReceivedDate : Option [ DateTime ] , 
 @ @ - 67 , 7 + 68 , 7 @ @ private [ group ] object GroupOfficeActor { 
 private case class Initialized ( groupUsersIds : Set [ Int ] , invitedUsersIds : Set [ Int ] , isPublic : Boolean ) 
 
 ActorSerializer . register ( 5001 , classOf [ GroupCommands . Create ] ) 
 - ActorSerializer . register ( 5002 , classOf [ GroupCommands . CreateResponse ] ) 
 + ActorSerializer . register ( 5002 , classOf [ GroupCommands . CreateAck ] ) 
 ActorSerializer . register ( 5003 , classOf [ GroupCommands . Invite ] ) 
 ActorSerializer . register ( 5004 , classOf [ GroupCommands . Join ] ) 
 ActorSerializer . register ( 5005 , classOf [ GroupCommands . Kick ] ) 
 @ @ - 76 , 6 + 77 , 8 @ @ private [ group ] object GroupOfficeActor { 
 ActorSerializer . register ( 5008 , classOf [ GroupCommands . MessageReceived ] ) 
 ActorSerializer . register ( 5009 , classOf [ GroupCommands . MessageRead ] ) 
 ActorSerializer . register ( 5010 , classOf [ GroupCommands . UpdateAvatar ] ) 
 + ActorSerializer . register ( 5011 , classOf [ GroupCommands . MakePublic ] ) 
 + ActorSerializer . register ( 5012 , classOf [ GroupCommands . MakePublicAck ] ) 
 
 ActorSerializer . register ( 6001 , classOf [ GroupEvents . MessageRead ] ) 
 ActorSerializer . register ( 6002 , classOf [ GroupEvents . MessageReceived ] ) 
 @ @ - 86 , 6 + 89 , 8 @ @ private [ group ] object GroupOfficeActor { 
 ActorSerializer . register ( 6007 , classOf [ GroupEvents . UserKicked ] ) 
 ActorSerializer . register ( 6008 , classOf [ GroupEvents . UserLeft ] ) 
 ActorSerializer . register ( 6009 , classOf [ GroupEvents . AvatarUpdated ] ) 
 + ActorSerializer . register ( 6010 , classOf [ GroupEvents . BecamePublic ] ) 
 + ActorSerializer . register ( 6011 , classOf [ GroupEvents . DescriptionUpdated ] ) 
 
 def props ( 
 implicit 
 @ @ - 178 , 7 + 183 , 7 @ @ private [ group ] final class GroupOfficeActor ( 
 serviceMessage . toByteArray 
 ) 
 SeqState ( seq , state ) ← broadcastClientUpdate ( creatorUserId , creatorAuthId , update , None , false ) 
 - } yield CreateResponse ( group . accessHash , seq , state , date . getMillis ) 
 + } yield CreateAck ( group . accessHash , seq , state , date . getMillis ) 
 ) pipeTo sender ( ) 
 
 case evt @ GroupEvents . BotAdded ( userId , token ) ⇒ 
 @ @ - 313 , 8 + 318 , 6 @ @ private [ group ] final class GroupOfficeActor ( 
 val memberIds = group . members . keySet 
 
 val action : DBIO [ ( SeqStateDate , Vector [ Sequence ] , Long ) ] = { 
 - context become working ( updateState ( evt , group ) ) 
 - 
 val isMember = memberIds . contains ( joiningUserId ) 
 
 / / TODO : Move to view 
 @ @ - 402 , 6 + 405 , 8 @ @ private [ group ] final class GroupOfficeActor ( 
 } 
 case UpdateAvatar ( groupId , clientUserId , clientAuthId , avatarOpt , randomId ) ⇒ 
 updateAvatar ( group , clientUserId , clientAuthId , avatarOpt , randomId ) 
 + case MakePublic ( groupId , description ) ⇒ 
 + makePublic ( group , description . getOrElse ( " " ) ) 
 case StopOffice ⇒ context stop self 
 case ReceiveTimeout ⇒ context . parent ! ShardRegion . Passivate ( stopMessage = StopOffice ) 
 } 
 @ @ - 431 , 6 + 436 , 7 @ @ private [ group ] final class GroupOfficeActor ( 
 id = groupId , 
 accessHash = evt . accessHash , 
 title = evt . title , 
 + description = " " , 
 creatorUserId = evt . creatorUserId , 
 createdAt = evt . createdAt , 
 members = Map ( evt . creatorUserId → Member ( evt . creatorUserId , evt . creatorUserId , evt . createdAt ) ) , 
 @ @ - 470 , 6 + 476 , 10 @ @ private [ group ] final class GroupOfficeActor ( 
 state . copy ( members = state . members - userId ) 
 case GroupEvents . AvatarUpdated ( avatar ) ⇒ 
 state . copy ( avatar = avatar ) 
 + case GroupEvents . BecamePublic ( ) ⇒ 
 + state . copy ( isPublic = true ) 
 + case GroupEvents . DescriptionUpdated ( desc ) ⇒ 
 + state . copy ( description = desc ) 
 } 
 } 
 
 diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOperations . scala 
 index dfcb529 . . 8abdaaa 100644 
 - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOperations . scala 
 + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOperations . scala 
 @ @ - 21 , 9 + 21 , 23 @ @ trait GroupOperations { 
 timeout : Timeout , 
 ec : ExecutionContext , 
 client : AuthorizedClientData 
 - ) : Future [ CreateResponse ] = 
 - ( peerManagerRegion . ref ? Create ( groupId , client . userId , client . authId , title , randomId , userIds . toSeq ) ) 
 - . mapTo [ CreateResponse ] 
 + ) : Future [ CreateAck ] = create ( groupId , client . userId , client . authId , title , randomId , userIds ) 
 + 
 + def create ( groupId : Int , clientUserId : Int , clientAuthId : Long , title : String , randomId : Long , userIds : Set [ Int ] ) ( 
 + implicit 
 + peerManagerRegion : GroupOfficeRegion , 
 + timeout : Timeout , 
 + ec : ExecutionContext 
 + ) : Future [ CreateAck ] = 
 + ( peerManagerRegion . ref ? Create ( groupId , clientUserId , clientAuthId , title , randomId , userIds . toSeq ) ) . mapTo [ CreateAck ] 
 + 
 + def makePublic ( groupId : Int , description : String ) ( 
 + implicit 
 + region : GroupOfficeRegion , 
 + timeout : Timeout , 
 + ec : ExecutionContext 
 + ) : Future [ MakePublicAck ] = 
 + ( region . ref ? MakePublic ( groupId , Some ( description ) ) ) . mapTo [ MakePublicAck ] 
 
 def sendMessage ( groupId : Int , senderUserId : Int , senderAuthId : Long , accessHash : Long , randomId : Long , message : ApiMessage , isFat : Boolean = false ) ( 
 implicit 
 diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / office / Office . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / office / Office . scala 
 index 6bdbeb9 . . 7c48f2a 100644 
 - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / office / Office . scala 
 + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / office / Office . scala 
 @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . office 
 
 import java . util . concurrent . TimeUnit 
 
 + import scala . collection . immutable 
 import scala . concurrent . Future 
 import scala . concurrent . duration . _ 
 import scala . language . postfixOps 
 @ @ - 24 , 10 + 25 , 17 @ @ trait Office extends PersistentActor with ActorLogging { 
 log . error ( reason , " Failure while processing message { } " , message ) 
 } 
 
 - def stashing : Receive = { 
 + protected def stashing : Receive = { 
 case msg ⇒ stash ( ) 
 } 
 
 + def persistReply [ E , R ] ( e : E ) ( onComplete : E ⇒ Any ) ( f : E ⇒ R ) : Unit = { 
 + persist ( e ) { evt ⇒ 
 + sender ( ) ! f ( e ) 
 + onComplete ( evt ) 
 + } 
 + } 
 + 
 def persistStashing [ E , R ] ( e : E ) ( onComplete : E ⇒ Any ) ( f : E ⇒ Future [ R ] ) : Unit = { 
 context become stashing 
 
 @ @ - 64 , 6 + 72 , 28 @ @ trait Office extends PersistentActor with ActorLogging { 
 } 
 } 
 
 + def persistStashingReply [ E , R ] ( es : immutable . Seq [ E ] ) ( onComplete : E ⇒ Any ) ( f : immutable . Seq [ E ] ⇒ Future [ R ] ) : Unit = { 
 + val replyTo = sender ( ) 
 + 
 + context become stashing 
 + 
 + persistAsync ( es ) ( _ ⇒ ( ) ) 
 + 
 + defer ( ( ) ) { _ ⇒ 
 + f ( es ) pipeTo replyTo onComplete { 
 + case Success ( _ ) ⇒ 
 + es foreach onComplete 
 + unstashAll ( ) 
 + case Failure ( e ) ⇒ 
 + log . error ( e , " Failure while processing event { } " , e ) 
 + replyTo ! Status . Failure ( e ) 
 + 
 + es foreach onComplete 
 + unstashAll ( ) 
 + } 
 + } 
 + } 
 + 
 if ( passivationIntervalMs > 0 ) { 
 log . warning ( " Passivating in { } ms " , passivationIntervalMs ) 
 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 index 9d89b96 . . 247c8fc 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 @ @ - 99 , 4 + 99 , 11 @ @ object Group { 
 byIdC . applied ( id ) 
 . map ( g ⇒ ( g . title , g . titleChangerUserId , g . titleChangedAt , g . titleChangeRandomId ) ) 
 . update ( ( title , changerUserId , date , randomId ) ) 
 + 
 + def updateDescription ( id : Int , description : String ) = 
 + byIdC . applied ( id ) 
 + . map ( _ . description ) 
 + . update ( description ) 
 + 
 + def makePublic ( id : Int ) = byIdC . applied ( id ) . map ( _ . isPublic ) . update ( true ) 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala 
 index d7aa06b . . 8f6c13d 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala 
 @ @ - 1 , 22 + 1 , 13 @ @ 
 package im . actor . server . api . rpc . service . pubgroups 
 
 - import im . actor . server . group . GroupOfficeRegion 
 - 
 import scala . concurrent . { ExecutionContext , Future } 
 
 import akka . actor . ActorSystem 
 - import com . amazonaws . services . s3 . transfer . TransferManager 
 import slick . driver . PostgresDriver . api . _ 
 
 import im . actor . api . rpc . _ 
 - import im . actor . api . rpc . groups . { ResponseCreateGroup , ResponseJoinGroup , ResponseJoinGroupDirect , GroupsService } 
 - import im . actor . api . rpc . pubgroups . { PublicGroup , ResponseGetPublicGroups , PubgroupsService } 
 - import im . actor . server . api . rpc . service . groups . GroupInviteConfig 
 - import im . actor . server . models 
 + import im . actor . api . rpc . pubgroups . { PubgroupsService , ResponseGetPublicGroups } 
 import im . actor . server . persist 
 - import im . actor . server . presences . GroupPresenceManagerRegion 
 - import im . actor . server . push . SeqUpdatesManagerRegion 
 - import im . actor . server . util . GroupUtils 
 import im . actor . server . util . GroupUtils . getPubgroupStructUnsafe 
 
 class PubgroupsServiceImpl ( 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala 
 index a2bfb1f . . 2cd7688 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala 
 @ @ - 1 , 15 + 1 , 17 @ @ 
 package im . actor . server . api . rpc . service 
 
 - import scala . concurrent . Await 
 + import scala . concurrent . { ExecutionContext , Await } 
 import scala . concurrent . duration . _ 
 import scala . util . Random 
 
 import akka . actor . ActorSystem 
 + import akka . util . Timeout 
 import slick . driver . PostgresDriver . api . _ 
 
 import im . actor . api . rpc . ClientData 
 import im . actor . api . rpc . groups . { GroupsService , ResponseCreateGroup } 
 import im . actor . api . rpc . peers . UserOutPeer 
 + import im . actor . server . group . { GroupOfficeRegion , GroupOffice } 
 import im . actor . server . persist 
 import im . actor . server . util . ACLUtils 
 
 @ @ - 32 , 14 + 34 , 13 @ @ trait GroupsServiceHelpers { 
 clientData : ClientData , 
 db : Database , 
 service : GroupsService , 
 - actorSystem : ActorSystem 
 + actorSystem : ActorSystem , 
 + region : GroupOfficeRegion , 
 + timeout : Timeout , 
 + ec : ExecutionContext 
 ) : ResponseCreateGroup = { 
 val resp = createGroup ( title , userIds ) 
 - / / TODO : delete after proper service implementation 
 - Await . result ( db . run ( persist . Group . groups 
 - . filter ( _ . id = = = resp . groupPeer . groupId ) 
 - . map ( g ⇒ ( g . isPublic , g . description ) ) 
 - . update ( ( true , description ) ) ) , 5 . seconds ) 
 + Await . result ( GroupOffice . makePublic ( resp . groupPeer . groupId , description ) , 5 . seconds ) 
 resp 
 } 
 } 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 index 544eb9e . . 8d085c2 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 @ @ - 173 , 10 + 173 , 12 @ @ class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceHelpers 
 
 def public ( ) = { 
 val group = models . Group ( Random . nextInt , 0 , Random . nextLong , " Public group " , isPublic = true , new DateTime , " A public group " ) 
 + val groupId = Random . nextInt 
 
 - whenReady ( db . run ( persist . Group . create ( group , Random . nextLong ) ) ) ( identity ) 
 + val accessHash = whenReady ( GroupOffice . create ( groupId , 0 , 0L , " Public group " , Random . nextLong , Set . empty ) ) ( _ . accessHash ) 
 + whenReady ( GroupOffice . makePublic ( groupId , " Public group description " ) ) ( identity ) 
 
 - val groupOutPeer = GroupOutPeer ( group . id , group . accessHash ) 
 + val groupOutPeer = GroupOutPeer ( groupId , accessHash ) 
 
 { 
 implicit val clientData = clientData1
