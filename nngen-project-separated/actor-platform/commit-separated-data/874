BLEU SCORE: 0.09442944296079735

TEST MSG: perf ( core ) : Precached Kuznechik encryption tables
GENERATED MSG: feat ( sdk ) : New methods in storage engines

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift < nl > index e93bb35 . . 0f8fcf6 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift < nl > @ @ - 6 , 7 + 6 , 7 @ @ import Foundation < nl > < nl > class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { < nl > < nl > - @ objc func hasAssetWithNSString ( name : String ! ) - > jboolean { < nl > + func hasAssetWithNSString ( name : String ! ) - > jboolean { < nl > if NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) ! = nil { < nl > return true < nl > } < nl > @ @ - 16 , 7 + 16 , 7 @ @ class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { < nl > return false < nl > } < nl > < nl > - @ objc func loadAssetWithNSString ( name : String ! ) - > String ! { < nl > + func loadAssetWithNSString ( name : String ! ) - > String ! { < nl > var path : String ? < nl > path = NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) < nl > if path ! = nil { < nl > @ @ - 36 , 6 + 36 , 25 @ @ class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { < nl > } < nl > } < nl > < nl > - fatalError ( " Unable to find resource \ ( name ) " ) < nl > + return nil < nl > + } < nl > + < nl > + func loadBinAssetWithNSString ( name : String ! ) - > IOSByteArray ! { < nl > + var path : String ? < nl > + path = NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) < nl > + if path ! = nil { < nl > + if let data = NSData ( contentsOfFile : path ! ) { < nl > + return data . toJavaBytes ( ) < nl > + } < nl > + } < nl > + < nl > + path = NSBundle . framework . pathForResource ( name , ofType : nil ) < nl > + if path ! = nil { < nl > + if let data = NSData ( contentsOfFile : path ! ) { < nl > + return data . toJavaBytes ( ) < nl > + } < nl > + } < nl > + < nl > + return nil < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index ce1cbce . . c29b63e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 60 , 7 + 60 , 9 @ @ import im . actor . core . viewmodel . UploadFileCallback ; < nl > import im . actor . core . viewmodel . UploadFileVM ; < nl > import im . actor . core . viewmodel . UploadFileVMCallback ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > + import im . actor . runtime . * ; < nl > import im . actor . runtime . actors . ActorSystem ; < nl > + import im . actor . runtime . crypto . primitives . kuznechik . KuznechikFastEngine ; < nl > import im . actor . runtime . mvvm . MVVMCollection ; < nl > import im . actor . runtime . mvvm . ValueModel ; < nl > import im . actor . runtime . storage . PreferencesStorage ; < nl > @ @ - 86 , 6 + 88 , 15 @ @ public class Messenger { < nl > / / Start Messenger initialization < nl > Timing timing = new Timing ( " MESSENGER _ INIT " ) ; < nl > < nl > + / / Encryption < nl > + timing . section ( " Encryption " ) ; < nl > + byte [ ] asset = Assets . loadBinAsset ( " kuz _ tables . bin " ) ; < nl > + if ( asset ! = null ) { < nl > + KuznechikFastEngine . initDump ( asset ) ; < nl > + } else { < nl > + KuznechikFastEngine . initCalc ( ) ; < nl > + } < nl > + < nl > / / Actor system < nl > timing . section ( " Actors " ) ; < nl > ActorSystem . system ( ) . setTraceInterface ( new ActorTrace ( ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin b / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin < nl > new file mode 100644 < nl > index 0000000 . . 64eb2ae < nl > Binary files / dev / null and b / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin differ < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java < nl > index 016ceac . . b72203f 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java < nl > @ @ - 20 , 6 + 20 , 11 @ @ public class CocoaAssetsProxyProvider implements AssetsRuntime { < nl > return assetsRuntime . loadAsset ( name ) ; < nl > } < nl > < nl > + @ Override < nl > + public byte [ ] loadBinAsset ( String name ) { < nl > + return assetsRuntime . loadBinAsset ( name ) ; < nl > + } < nl > + < nl > / / @ Override < nl > / / public native boolean hasAsset ( String name ) / * - [ < nl > / / NSBundle * mainBundle = [ NSBundle mainBundle ] ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java < nl > index fb991d0 . . 532b2d4 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java < nl > @ @ - 6 , 9 + 6 , 6 @ @ import java . io . InputStream ; < nl > < nl > import im . actor . runtime . AssetsRuntime ; < nl > < nl > - / * * < nl > - * Created by ex3ndr on 07 . 08 . 15 . < nl > - * / < nl > public class GenericAssetsProvider implements AssetsRuntime { < nl > < nl > @ Override < nl > @ @ - 35 , 6 + 32 , 25 @ @ public class GenericAssetsProvider implements AssetsRuntime { < nl > return null ; < nl > } < nl > < nl > + @ Override < nl > + public byte [ ] loadBinAsset ( String name ) { < nl > + InputStream stream = getClass ( ) . getClassLoader ( ) . getResourceAsStream ( name ) ; < nl > + try { < nl > + return readFully ( stream ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } finally { < nl > + if ( stream ! = null ) { < nl > + try { < nl > + stream . close ( ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + } < nl > + return null ; < nl > + } < nl > + < nl > public String readFully ( InputStream inputStream , String encoding ) throws IOException { < nl > return new String ( readFully ( inputStream ) , encoding ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java < nl > index ca613d8 . . d40fa1a 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java < nl > @ @ - 45 , 4 + 45 , 9 @ @ public class JsAssetsProvider implements AssetsRuntime { < nl > < nl > return null ; < nl > } < nl > + < nl > + @ Override < nl > + public byte [ ] loadBinAsset ( String name ) { < nl > + return null ; < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java < nl > index 2f400cc . . 0cb9fe1 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java < nl > @ @ - 11 , 4 + 11 , 8 @ @ public class Assets { < nl > public static String loadAsset ( String name ) { < nl > return assetsRuntime . loadAsset ( name ) ; < nl > } < nl > + < nl > + public static byte [ ] loadBinAsset ( String name ) { < nl > + return assetsRuntime . loadBinAsset ( name ) ; < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java < nl > index 30e28ca . . 1237cc0 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java < nl > @ @ - 4 , 4 + 4 , 6 @ @ public interface AssetsRuntime { < nl > boolean hasAsset ( String name ) ; < nl > < nl > String loadAsset ( String name ) ; < nl > + < nl > + byte [ ] loadBinAsset ( String name ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java < nl > index 73484fc . . d319adf 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java < nl > @ @ - 122 , 10 + 122 , 14 @ @ public class KuznechikFastEngine implements BlockCipher { < nl > ( byte ) 0x37 , ( byte ) 0xc4 , ( byte ) 0xaf , ( byte ) 0x24 , ( byte ) 0x2e , ( byte ) 0x6f , ( byte ) 0x8a , ( byte ) 0xa8 , ( byte ) 0xf7 , ( byte ) 0x60 , ( byte ) 0x49 , ( byte ) 0xe3 , ( byte ) 0x80 , ( byte ) 0x86 , ( byte ) 0x59 , ( byte ) 0x07 , < nl > } ; < nl > < nl > - private static final int [ ] gf256res ; < nl > - private static final int [ ] gf256resInv ; < nl > + private static volatile int [ ] gf256res ; < nl > + private static volatile int [ ] gf256resInv ; < nl > < nl > - static { < nl > + public static void initCalc ( ) { < nl > + if ( gf256res ! = null | | gf256resInv ! = null ) { < nl > + return ; < nl > + } < nl > + < nl > gf256res = new int [ 16 * 256 * 4 ] ; < nl > gf256resInv = new int [ 16 * 256 * 4 ] ; < nl > < nl > @ @ - 149 , 6 + 153 , 15 @ @ public class KuznechikFastEngine implements BlockCipher { < nl > } < nl > } < nl > < nl > + public static void initDump ( byte [ ] data ) { < nl > + if ( gf256res ! = null | | gf256resInv ! = null ) { < nl > + return ; < nl > + } < nl > + gf256res = new int [ 16 * 256 * 4 ] ; < nl > + gf256resInv = new int [ 16 * 256 * 4 ] ; < nl > + Pack . bigEndianToInt ( data , 0 , gf256res ) ; < nl > + Pack . bigEndianToInt ( data , gf256res . length * 4 , gf256resInv ) ; < nl > + } < nl > < nl > static void kuz _ l _ fast ( int [ ] w ) { < nl > int a0 = 0 , a1 = 0 , a2 = 0 , a3 = 0 ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java < nl > index 4603abc . . 19fdb7f 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java < nl > @ @ - 158 , 7 + 158 , 7 @ @ public class MVVMCollection < T extends BserObject & KeyValueItem , V extends BaseV < nl > return cache . get ( id ) ; < nl > } < nl > < nl > - byte [ ] data = collectionStorage . getValue ( id ) ; < nl > + byte [ ] data = collectionStorage . loadItem ( id ) ; < nl > < nl > if ( data ! = null ) { < nl > try { < nl > diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java < nl > index 3efd294 . . 4bf8fb8 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java < nl > @ @ - 9 , 21 + 9 , 69 @ @ import com . google . j2objc . annotations . ObjectiveCName ; < nl > import java . util . List ; < nl > < nl > public interface KeyValueStorage { < nl > + < nl > + / * * < nl > + * Adding new or replacing old record < nl > + * < nl > + * @ param key record key < nl > + * @ param data record raw data < nl > + * / < nl > @ ObjectiveCName ( " addOrUpdateItemWithKey : withData : " ) < nl > void addOrUpdateItem ( long key , byte [ ] data ) ; < nl > < nl > + / * * < nl > + * Adding new or replacing old records < nl > + * < nl > + * @ param values records < nl > + * / < nl > @ ObjectiveCName ( " addOrUpdateItems : " ) < nl > void addOrUpdateItems ( List < KeyValueRecord > values ) ; < nl > < nl > + / * * < nl > + * Removing record by key < nl > + * < nl > + * @ param key record key < nl > + * / < nl > @ ObjectiveCName ( " removeItemWithKey : " ) < nl > void removeItem ( long key ) ; < nl > < nl > + / * * < nl > + * Removing records by keys < nl > + * < nl > + * @ param keys record keys < nl > + * / < nl > @ ObjectiveCName ( " removeItemsWithKeys : " ) < nl > void removeItems ( long [ ] keys ) ; < nl > < nl > + / * * < nl > + * Loading item by key < nl > + * < nl > + * @ param key record key < nl > + * @ return result or null if not found < nl > + * / < nl > + @ ObjectiveCName ( " loadItemWithKey : " ) < nl > + byte [ ] loadItem ( long key ) ; < nl > + < nl > + / * * < nl > + * Loading items by keys < nl > + * < nl > + * @ param keys record keys < nl > + * @ return all loaded items < nl > + * / < nl > + @ ObjectiveCName ( " loadItems : " ) < nl > + List < KeyValueRecord > loadItems ( long [ ] keys ) ; < nl > + < nl > + / * * < nl > + * Loading all items from storage < nl > + * < nl > + * @ return all items < nl > + * / < nl > + @ ObjectiveCName ( " loadAllItems " ) < nl > + List < KeyValueRecord > loadAllItems ( ) ; < nl > + < nl > + / * * < nl > + * Clearing storage < nl > + * / < nl > @ ObjectiveCName ( " clear " ) < nl > void clear ( ) ; < nl > - < nl > - @ ObjectiveCName ( " getValueWithKey : " ) < nl > - byte [ ] getValue ( long key ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java < nl > index dff9c2b . . 19d8315 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java < nl > @ @ - 32 , 6 + 32 , 9 @ @ public interface ListStorage { < nl > @ ObjectiveCName ( " loadItemWithKey : " ) < nl > ListEngineRecord loadItem ( long key ) ; < nl > < nl > + @ ObjectiveCName ( " loadAllItems " ) < nl > + List < ListEngineRecord > loadAllItems ( ) ; < nl > + < nl > @ ObjectiveCName ( " isEmpty " ) < nl > boolean isEmpty ( ) ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java < nl > index 0081db1 . . a54f1ec 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java < nl > @ @ - 21 , 6 + 21 , 6 @ @ public class SyncKeyValue { < nl > } < nl > < nl > public synchronized byte [ ] get ( long key ) { < nl > - return storage . getValue ( key ) ; < nl > + return storage . loadItem ( key ) ; < nl > } < nl > - } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java < nl > index 05b4ca8 . . 5e9f694 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java < nl > @ @ - 1 , 5 + 1 , 6 @ @ < nl > package im . actor . runtime . storage . memory ; < nl > < nl > + import java . util . ArrayList ; < nl > import java . util . HashMap ; < nl > import java . util . List ; < nl > < nl > @ @ - 35 , 12 + 36 , 33 @ @ public class MemoryKeyValueStorage implements KeyValueStorage { < nl > } < nl > < nl > @ Override < nl > - public void clear ( ) { < nl > - records . clear ( ) ; < nl > + public byte [ ] loadItem ( long key ) { < nl > + return records . get ( key ) ; < nl > } < nl > < nl > @ Override < nl > - public byte [ ] getValue ( long key ) { < nl > - return records . get ( key ) ; < nl > + public List < KeyValueRecord > loadItems ( long [ ] keys ) { < nl > + ArrayList < KeyValueRecord > res = new ArrayList < KeyValueRecord > ( ) ; < nl > + for ( long id : keys ) { < nl > + byte [ ] data = loadItem ( id ) ; < nl > + if ( data ! = null ) { < nl > + res . add ( new KeyValueRecord ( id , data ) ) ; < nl > + } < nl > + } < nl > + return res ; < nl > + } < nl > + < nl > + @ Override < nl > + public List < KeyValueRecord > loadAllItems ( ) { < nl > + ArrayList < KeyValueRecord > res = new ArrayList < KeyValueRecord > ( ) ; < nl > + for ( long id : records . keySet ( ) ) { < nl > + res . add ( new KeyValueRecord ( id , records . get ( id ) ) ) ; < nl > + } < nl > + return res ; < nl > + } < nl > + < nl > + @ Override < nl > + public void clear ( ) { < nl > + records . clear ( ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java < nl > index b3455d6 . . 188f5c0 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java < nl > @ @ - 1 , 14 + 1 , 12 @ @ < nl > package im . actor . runtime . storage . memory ; < nl > < nl > + import java . util . ArrayList ; < nl > import java . util . HashMap ; < nl > import java . util . List ; < nl > < nl > import im . actor . runtime . storage . ListEngineRecord ; < nl > import im . actor . runtime . storage . ListStorage ; < nl > < nl > - / * * < nl > - * Created by ex3ndr on 28 . 07 . 15 . < nl > - * / < nl > public class MemoryListStorage implements ListStorage { < nl > < nl > private HashMap < Long , Record > records = new HashMap < Long , Record > ( ) ; < nl > @ @ - 54 , 6 + 52 , 16 @ @ public class MemoryListStorage implements ListStorage { < nl > } < nl > < nl > @ Override < nl > + public List < ListEngineRecord > loadAllItems ( ) { < nl > + ArrayList < ListEngineRecord > res = new ArrayList < ListEngineRecord > ( ) ; < nl > + for ( long id : records . keySet ( ) ) { < nl > + Record record = records . get ( id ) ; < nl > + res . add ( new ListEngineRecord ( id , record . getOrder ( ) , record . getQuery ( ) , record . getData ( ) ) ) ; < nl > + } < nl > + return res ; < nl > + } < nl > + < nl > + @ Override < nl > public boolean isEmpty ( ) { < nl > return getCount ( ) = = 0 ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift 
 index e93bb35 . . 0f8fcf6 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift 
 @ @ - 6 , 7 + 6 , 7 @ @ import Foundation 
 
 class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { 
 
 - @ objc func hasAssetWithNSString ( name : String ! ) - > jboolean { 
 + func hasAssetWithNSString ( name : String ! ) - > jboolean { 
 if NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) ! = nil { 
 return true 
 } 
 @ @ - 16 , 7 + 16 , 7 @ @ class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { 
 return false 
 } 
 
 - @ objc func loadAssetWithNSString ( name : String ! ) - > String ! { 
 + func loadAssetWithNSString ( name : String ! ) - > String ! { 
 var path : String ? 
 path = NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) 
 if path ! = nil { 
 @ @ - 36 , 6 + 36 , 25 @ @ class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { 
 } 
 } 
 
 - fatalError ( " Unable to find resource \ ( name ) " ) 
 + return nil 
 + } 
 + 
 + func loadBinAssetWithNSString ( name : String ! ) - > IOSByteArray ! { 
 + var path : String ? 
 + path = NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) 
 + if path ! = nil { 
 + if let data = NSData ( contentsOfFile : path ! ) { 
 + return data . toJavaBytes ( ) 
 + } 
 + } 
 + 
 + path = NSBundle . framework . pathForResource ( name , ofType : nil ) 
 + if path ! = nil { 
 + if let data = NSData ( contentsOfFile : path ! ) { 
 + return data . toJavaBytes ( ) 
 + } 
 + } 
 + 
 + return nil 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index ce1cbce . . c29b63e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 60 , 7 + 60 , 9 @ @ import im . actor . core . viewmodel . UploadFileCallback ; 
 import im . actor . core . viewmodel . UploadFileVM ; 
 import im . actor . core . viewmodel . UploadFileVMCallback ; 
 import im . actor . core . viewmodel . UserVM ; 
 + import im . actor . runtime . * ; 
 import im . actor . runtime . actors . ActorSystem ; 
 + import im . actor . runtime . crypto . primitives . kuznechik . KuznechikFastEngine ; 
 import im . actor . runtime . mvvm . MVVMCollection ; 
 import im . actor . runtime . mvvm . ValueModel ; 
 import im . actor . runtime . storage . PreferencesStorage ; 
 @ @ - 86 , 6 + 88 , 15 @ @ public class Messenger { 
 / / Start Messenger initialization 
 Timing timing = new Timing ( " MESSENGER _ INIT " ) ; 
 
 + / / Encryption 
 + timing . section ( " Encryption " ) ; 
 + byte [ ] asset = Assets . loadBinAsset ( " kuz _ tables . bin " ) ; 
 + if ( asset ! = null ) { 
 + KuznechikFastEngine . initDump ( asset ) ; 
 + } else { 
 + KuznechikFastEngine . initCalc ( ) ; 
 + } 
 + 
 / / Actor system 
 timing . section ( " Actors " ) ; 
 ActorSystem . system ( ) . setTraceInterface ( new ActorTrace ( ) ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin b / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin 
 new file mode 100644 
 index 0000000 . . 64eb2ae 
 Binary files / dev / null and b / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin differ 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java 
 index 016ceac . . b72203f 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java 
 @ @ - 20 , 6 + 20 , 11 @ @ public class CocoaAssetsProxyProvider implements AssetsRuntime { 
 return assetsRuntime . loadAsset ( name ) ; 
 } 
 
 + @ Override 
 + public byte [ ] loadBinAsset ( String name ) { 
 + return assetsRuntime . loadBinAsset ( name ) ; 
 + } 
 + 
 / / @ Override 
 / / public native boolean hasAsset ( String name ) / * - [ 
 / / NSBundle * mainBundle = [ NSBundle mainBundle ] ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java 
 index fb991d0 . . 532b2d4 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java 
 @ @ - 6 , 9 + 6 , 6 @ @ import java . io . InputStream ; 
 
 import im . actor . runtime . AssetsRuntime ; 
 
 - / * * 
 - * Created by ex3ndr on 07 . 08 . 15 . 
 - * / 
 public class GenericAssetsProvider implements AssetsRuntime { 
 
 @ Override 
 @ @ - 35 , 6 + 32 , 25 @ @ public class GenericAssetsProvider implements AssetsRuntime { 
 return null ; 
 } 
 
 + @ Override 
 + public byte [ ] loadBinAsset ( String name ) { 
 + InputStream stream = getClass ( ) . getClassLoader ( ) . getResourceAsStream ( name ) ; 
 + try { 
 + return readFully ( stream ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } finally { 
 + if ( stream ! = null ) { 
 + try { 
 + stream . close ( ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + } 
 + return null ; 
 + } 
 + 
 public String readFully ( InputStream inputStream , String encoding ) throws IOException { 
 return new String ( readFully ( inputStream ) , encoding ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java 
 index ca613d8 . . d40fa1a 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java 
 @ @ - 45 , 4 + 45 , 9 @ @ public class JsAssetsProvider implements AssetsRuntime { 
 
 return null ; 
 } 
 + 
 + @ Override 
 + public byte [ ] loadBinAsset ( String name ) { 
 + return null ; 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java 
 index 2f400cc . . 0cb9fe1 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java 
 @ @ - 11 , 4 + 11 , 8 @ @ public class Assets { 
 public static String loadAsset ( String name ) { 
 return assetsRuntime . loadAsset ( name ) ; 
 } 
 + 
 + public static byte [ ] loadBinAsset ( String name ) { 
 + return assetsRuntime . loadBinAsset ( name ) ; 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java 
 index 30e28ca . . 1237cc0 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java 
 @ @ - 4 , 4 + 4 , 6 @ @ public interface AssetsRuntime { 
 boolean hasAsset ( String name ) ; 
 
 String loadAsset ( String name ) ; 
 + 
 + byte [ ] loadBinAsset ( String name ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java 
 index 73484fc . . d319adf 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java 
 @ @ - 122 , 10 + 122 , 14 @ @ public class KuznechikFastEngine implements BlockCipher { 
 ( byte ) 0x37 , ( byte ) 0xc4 , ( byte ) 0xaf , ( byte ) 0x24 , ( byte ) 0x2e , ( byte ) 0x6f , ( byte ) 0x8a , ( byte ) 0xa8 , ( byte ) 0xf7 , ( byte ) 0x60 , ( byte ) 0x49 , ( byte ) 0xe3 , ( byte ) 0x80 , ( byte ) 0x86 , ( byte ) 0x59 , ( byte ) 0x07 , 
 } ; 
 
 - private static final int [ ] gf256res ; 
 - private static final int [ ] gf256resInv ; 
 + private static volatile int [ ] gf256res ; 
 + private static volatile int [ ] gf256resInv ; 
 
 - static { 
 + public static void initCalc ( ) { 
 + if ( gf256res ! = null | | gf256resInv ! = null ) { 
 + return ; 
 + } 
 + 
 gf256res = new int [ 16 * 256 * 4 ] ; 
 gf256resInv = new int [ 16 * 256 * 4 ] ; 
 
 @ @ - 149 , 6 + 153 , 15 @ @ public class KuznechikFastEngine implements BlockCipher { 
 } 
 } 
 
 + public static void initDump ( byte [ ] data ) { 
 + if ( gf256res ! = null | | gf256resInv ! = null ) { 
 + return ; 
 + } 
 + gf256res = new int [ 16 * 256 * 4 ] ; 
 + gf256resInv = new int [ 16 * 256 * 4 ] ; 
 + Pack . bigEndianToInt ( data , 0 , gf256res ) ; 
 + Pack . bigEndianToInt ( data , gf256res . length * 4 , gf256resInv ) ; 
 + } 
 
 static void kuz _ l _ fast ( int [ ] w ) { 
 int a0 = 0 , a1 = 0 , a2 = 0 , a3 = 0 ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java 
 index 4603abc . . 19fdb7f 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java 
 @ @ - 158 , 7 + 158 , 7 @ @ public class MVVMCollection < T extends BserObject & KeyValueItem , V extends BaseV 
 return cache . get ( id ) ; 
 } 
 
 - byte [ ] data = collectionStorage . getValue ( id ) ; 
 + byte [ ] data = collectionStorage . loadItem ( id ) ; 
 
 if ( data ! = null ) { 
 try { 
 diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java 
 index 3efd294 . . 4bf8fb8 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java 
 @ @ - 9 , 21 + 9 , 69 @ @ import com . google . j2objc . annotations . ObjectiveCName ; 
 import java . util . List ; 
 
 public interface KeyValueStorage { 
 + 
 + / * * 
 + * Adding new or replacing old record 
 + * 
 + * @ param key record key 
 + * @ param data record raw data 
 + * / 
 @ ObjectiveCName ( " addOrUpdateItemWithKey : withData : " ) 
 void addOrUpdateItem ( long key , byte [ ] data ) ; 
 
 + / * * 
 + * Adding new or replacing old records 
 + * 
 + * @ param values records 
 + * / 
 @ ObjectiveCName ( " addOrUpdateItems : " ) 
 void addOrUpdateItems ( List < KeyValueRecord > values ) ; 
 
 + / * * 
 + * Removing record by key 
 + * 
 + * @ param key record key 
 + * / 
 @ ObjectiveCName ( " removeItemWithKey : " ) 
 void removeItem ( long key ) ; 
 
 + / * * 
 + * Removing records by keys 
 + * 
 + * @ param keys record keys 
 + * / 
 @ ObjectiveCName ( " removeItemsWithKeys : " ) 
 void removeItems ( long [ ] keys ) ; 
 
 + / * * 
 + * Loading item by key 
 + * 
 + * @ param key record key 
 + * @ return result or null if not found 
 + * / 
 + @ ObjectiveCName ( " loadItemWithKey : " ) 
 + byte [ ] loadItem ( long key ) ; 
 + 
 + / * * 
 + * Loading items by keys 
 + * 
 + * @ param keys record keys 
 + * @ return all loaded items 
 + * / 
 + @ ObjectiveCName ( " loadItems : " ) 
 + List < KeyValueRecord > loadItems ( long [ ] keys ) ; 
 + 
 + / * * 
 + * Loading all items from storage 
 + * 
 + * @ return all items 
 + * / 
 + @ ObjectiveCName ( " loadAllItems " ) 
 + List < KeyValueRecord > loadAllItems ( ) ; 
 + 
 + / * * 
 + * Clearing storage 
 + * / 
 @ ObjectiveCName ( " clear " ) 
 void clear ( ) ; 
 - 
 - @ ObjectiveCName ( " getValueWithKey : " ) 
 - byte [ ] getValue ( long key ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java 
 index dff9c2b . . 19d8315 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java 
 @ @ - 32 , 6 + 32 , 9 @ @ public interface ListStorage { 
 @ ObjectiveCName ( " loadItemWithKey : " ) 
 ListEngineRecord loadItem ( long key ) ; 
 
 + @ ObjectiveCName ( " loadAllItems " ) 
 + List < ListEngineRecord > loadAllItems ( ) ; 
 + 
 @ ObjectiveCName ( " isEmpty " ) 
 boolean isEmpty ( ) ; 
 
 diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java 
 index 0081db1 . . a54f1ec 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java 
 @ @ - 21 , 6 + 21 , 6 @ @ public class SyncKeyValue { 
 } 
 
 public synchronized byte [ ] get ( long key ) { 
 - return storage . getValue ( key ) ; 
 + return storage . loadItem ( key ) ; 
 } 
 - } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java 
 index 05b4ca8 . . 5e9f694 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package im . actor . runtime . storage . memory ; 
 
 + import java . util . ArrayList ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 
 @ @ - 35 , 12 + 36 , 33 @ @ public class MemoryKeyValueStorage implements KeyValueStorage { 
 } 
 
 @ Override 
 - public void clear ( ) { 
 - records . clear ( ) ; 
 + public byte [ ] loadItem ( long key ) { 
 + return records . get ( key ) ; 
 } 
 
 @ Override 
 - public byte [ ] getValue ( long key ) { 
 - return records . get ( key ) ; 
 + public List < KeyValueRecord > loadItems ( long [ ] keys ) { 
 + ArrayList < KeyValueRecord > res = new ArrayList < KeyValueRecord > ( ) ; 
 + for ( long id : keys ) { 
 + byte [ ] data = loadItem ( id ) ; 
 + if ( data ! = null ) { 
 + res . add ( new KeyValueRecord ( id , data ) ) ; 
 + } 
 + } 
 + return res ; 
 + } 
 + 
 + @ Override 
 + public List < KeyValueRecord > loadAllItems ( ) { 
 + ArrayList < KeyValueRecord > res = new ArrayList < KeyValueRecord > ( ) ; 
 + for ( long id : records . keySet ( ) ) { 
 + res . add ( new KeyValueRecord ( id , records . get ( id ) ) ) ; 
 + } 
 + return res ; 
 + } 
 + 
 + @ Override 
 + public void clear ( ) { 
 + records . clear ( ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java 
 index b3455d6 . . 188f5c0 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java 
 @ @ - 1 , 14 + 1 , 12 @ @ 
 package im . actor . runtime . storage . memory ; 
 
 + import java . util . ArrayList ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 
 import im . actor . runtime . storage . ListEngineRecord ; 
 import im . actor . runtime . storage . ListStorage ; 
 
 - / * * 
 - * Created by ex3ndr on 28 . 07 . 15 . 
 - * / 
 public class MemoryListStorage implements ListStorage { 
 
 private HashMap < Long , Record > records = new HashMap < Long , Record > ( ) ; 
 @ @ - 54 , 6 + 52 , 16 @ @ public class MemoryListStorage implements ListStorage { 
 } 
 
 @ Override 
 + public List < ListEngineRecord > loadAllItems ( ) { 
 + ArrayList < ListEngineRecord > res = new ArrayList < ListEngineRecord > ( ) ; 
 + for ( long id : records . keySet ( ) ) { 
 + Record record = records . get ( id ) ; 
 + res . add ( new ListEngineRecord ( id , record . getOrder ( ) , record . getQuery ( ) , record . getData ( ) ) ) ; 
 + } 
 + return res ; 
 + } 
 + 
 + @ Override 
 public boolean isEmpty ( ) { 
 return getCount ( ) = = 0 ; 
 }
