BLEU SCORE: 0.10735252131161191

TEST MSG: fix ( core ) : send callInProgress x3
GENERATED MSG: fix ( android ) : incoming call event - add uid

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > index a29dabe . . e480d6b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > @ @ - 32 , 7 + 32 , 7 @ @ public class CallsModule extends AbsModule { < nl > } < nl > < nl > < nl > - public static final int CALL _ TIMEOUT = 5000 ; < nl > + public static final int CALL _ TIMEOUT = 10 ; < nl > public boolean callsEnabled = true ; < nl > HashMap < Long , ActorRef > calls = new HashMap < Long , ActorRef > ( ) ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > index 210a1ae . . ec324ff 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > @ @ - 13 , 7 + 13 , 6 @ @ public class CallActor extends ModuleActor { < nl > private int timeout = 0 ; < nl > private boolean alive = false ; < nl > private long callId ; < nl > - private static final long SAFE _ TIMEOUT = 100 ; < nl > private CallsModule . CallCallback callback ; < nl > < nl > public CallActor ( long callId , CallsModule . CallCallback callback , ModuleContext context ) { < nl > @ @ - 56 , 16 + 55 , 17 @ @ public class CallActor extends ModuleActor { < nl > public void checkAlive ( ) { < nl > if ( alive ) { < nl > alive = false ; < nl > + self ( ) . send ( new CheckAlive ( ) , timeout * 1000 ) ; < nl > } else { < nl > - Log . d ( TAG , " call probably dead , ignore for now " ) ; < nl > - / / context ( ) . getCallsModule ( ) . endCall ( callId ) ; < nl > - / / self ( ) . send ( PoisonPill . INSTANCE ) ; < nl > + Log . d ( TAG , " no call in progress - call is dead " ) ; < nl > + context ( ) . getCallsModule ( ) . endCall ( callId ) ; < nl > + self ( ) . send ( PoisonPill . INSTANCE ) ; < nl > } < nl > } < nl > < nl > private void sendCallInProgress ( ) { < nl > context ( ) . getCallsModule ( ) . callInProgress ( callId ) ; < nl > - self ( ) . send ( new SendCallInProgress ( ) , CallsModule . CALL _ TIMEOUT ) ; < nl > + self ( ) . send ( new SendCallInProgress ( ) , CallsModule . CALL _ TIMEOUT * 1000 / 3 ) ; < nl > < nl > } < nl > < nl > @ @ - 75 , 8 + 75 , 8 @ @ public class CallActor extends ModuleActor { < nl > if ( ! inited ) { < nl > inited = true ; < nl > alive = false ; < nl > + self ( ) . send ( new CheckAlive ( ) , timeout * 1000 ) ; < nl > } < nl > - self ( ) . send ( new CheckAlive ( ) , CallsModule . CALL _ TIMEOUT + SAFE _ TIMEOUT ) ; < nl > } < nl > < nl > public static class EndCall {
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / events / IncomingCall . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / events / IncomingCall . java < nl > index 41d4fcb . . f63a5c0 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / events / IncomingCall . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / events / IncomingCall . java < nl > @ @ - 7 , 15 + 7 , 21 @ @ public class IncomingCall extends Event { < nl > public static final String EVENT = " incoming _ call " ; < nl > < nl > private long callId ; < nl > + private int uid ; < nl > < nl > - public IncomingCall ( long callId ) { < nl > + public IncomingCall ( long callId , int uid ) { < nl > this . callId = callId ; < nl > + this . uid = uid ; < nl > } < nl > < nl > public long getCall ( ) { < nl > return callId ; < nl > } < nl > < nl > + public int getUid ( ) { < nl > + return uid ; < nl > + } < nl > + < nl > @ Override < nl > public String getType ( ) { < nl > return EVENT ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > index 4788cbb . . 6af1423 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > @ @ - 95 , 7 + 95 , 7 @ @ public class CallsModule extends AbsModule { < nl > < nl > public void onIncomingCall ( long callId , int uid ) { < nl > if ( ! calls . keySet ( ) . contains ( callId ) ) { < nl > - context ( ) . getEvents ( ) . post ( new IncomingCall ( callId ) ) ; < nl > + context ( ) . getEvents ( ) . post ( new IncomingCall ( callId , uid ) ) ; < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 index a29dabe . . e480d6b 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 @ @ - 32 , 7 + 32 , 7 @ @ public class CallsModule extends AbsModule { 
 } 
 
 
 - public static final int CALL _ TIMEOUT = 5000 ; 
 + public static final int CALL _ TIMEOUT = 10 ; 
 public boolean callsEnabled = true ; 
 HashMap < Long , ActorRef > calls = new HashMap < Long , ActorRef > ( ) ; 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 index 210a1ae . . ec324ff 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 @ @ - 13 , 7 + 13 , 6 @ @ public class CallActor extends ModuleActor { 
 private int timeout = 0 ; 
 private boolean alive = false ; 
 private long callId ; 
 - private static final long SAFE _ TIMEOUT = 100 ; 
 private CallsModule . CallCallback callback ; 
 
 public CallActor ( long callId , CallsModule . CallCallback callback , ModuleContext context ) { 
 @ @ - 56 , 16 + 55 , 17 @ @ public class CallActor extends ModuleActor { 
 public void checkAlive ( ) { 
 if ( alive ) { 
 alive = false ; 
 + self ( ) . send ( new CheckAlive ( ) , timeout * 1000 ) ; 
 } else { 
 - Log . d ( TAG , " call probably dead , ignore for now " ) ; 
 - / / context ( ) . getCallsModule ( ) . endCall ( callId ) ; 
 - / / self ( ) . send ( PoisonPill . INSTANCE ) ; 
 + Log . d ( TAG , " no call in progress - call is dead " ) ; 
 + context ( ) . getCallsModule ( ) . endCall ( callId ) ; 
 + self ( ) . send ( PoisonPill . INSTANCE ) ; 
 } 
 } 
 
 private void sendCallInProgress ( ) { 
 context ( ) . getCallsModule ( ) . callInProgress ( callId ) ; 
 - self ( ) . send ( new SendCallInProgress ( ) , CallsModule . CALL _ TIMEOUT ) ; 
 + self ( ) . send ( new SendCallInProgress ( ) , CallsModule . CALL _ TIMEOUT * 1000 / 3 ) ; 
 
 } 
 
 @ @ - 75 , 8 + 75 , 8 @ @ public class CallActor extends ModuleActor { 
 if ( ! inited ) { 
 inited = true ; 
 alive = false ; 
 + self ( ) . send ( new CheckAlive ( ) , timeout * 1000 ) ; 
 } 
 - self ( ) . send ( new CheckAlive ( ) , CallsModule . CALL _ TIMEOUT + SAFE _ TIMEOUT ) ; 
 } 
 
 public static class EndCall {

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / events / IncomingCall . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / events / IncomingCall . java 
 index 41d4fcb . . f63a5c0 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / events / IncomingCall . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / events / IncomingCall . java 
 @ @ - 7 , 15 + 7 , 21 @ @ public class IncomingCall extends Event { 
 public static final String EVENT = " incoming _ call " ; 
 
 private long callId ; 
 + private int uid ; 
 
 - public IncomingCall ( long callId ) { 
 + public IncomingCall ( long callId , int uid ) { 
 this . callId = callId ; 
 + this . uid = uid ; 
 } 
 
 public long getCall ( ) { 
 return callId ; 
 } 
 
 + public int getUid ( ) { 
 + return uid ; 
 + } 
 + 
 @ Override 
 public String getType ( ) { 
 return EVENT ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 index 4788cbb . . 6af1423 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 @ @ - 95 , 7 + 95 , 7 @ @ public class CallsModule extends AbsModule { 
 
 public void onIncomingCall ( long callId , int uid ) { 
 if ( ! calls . keySet ( ) . contains ( callId ) ) { 
 - context ( ) . getEvents ( ) . post ( new IncomingCall ( callId ) ) ; 
 + context ( ) . getEvents ( ) . post ( new IncomingCall ( callId , uid ) ) ; 
 } 
 }
