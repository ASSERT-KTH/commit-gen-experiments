BLEU SCORE: 0.06917184228205472

TEST MSG: refactor ( server : activation ) : better error logging , add custom . conf
GENERATED MSG: fix ( activation , email ) : change to new server configuration style

TEST DIFF (one line): diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / smtp / SMTPProvider . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / smtp / SMTPProvider . scala < nl > index 459d9d9 . . bdea067 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / smtp / SMTPProvider . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / smtp / SMTPProvider . scala < nl > @ @ - 12 , 13 + 12 , 14 @ @ import im . actor . env . ActorEnv < nl > import im . actor . server . activation . common . ActivationStateActor . { ForgetSentCode , Send , SendAck } < nl > import im . actor . server . activation . common . _ < nl > import im . actor . server . db . DbExtension < nl > - import im . actor . server . email . { Content , EmailConfig , Message , SmtpEmailSender } < nl > + import im . actor . server . email . _ < nl > import im . actor . server . model . AuthEmailTransaction < nl > import im . actor . server . persist . auth . AuthTransactionRepo < nl > import im . actor . util . misc . EmailUtils . isTestEmail < nl > < nl > import scala . concurrent . Future < nl > import scala . concurrent . duration . _ < nl > + import scala . util . Try < nl > < nl > private [ activation ] final class SMTPProvider ( system : ActorSystem ) extends ActivationProvider with CommonAuthCodes { < nl > < nl > @ @ - 28 , 12 + 29 , 14 @ @ private [ activation ] final class SMTPProvider ( system : ActorSystem ) extends Activa < nl > < nl > private implicit val timeout = Timeout ( 20 . seconds ) < nl > < nl > - private val emailConfig = EmailConfig . load . getOrElse ( throw new RuntimeException ( " Failed to load email config " ) ) < nl > - private val emailSender = new SmtpEmailSender ( emailConfig ) < nl > + private val emailSender = EmailExtension ( system ) . sender < nl > + < nl > private val emailTemplateLocation = < nl > ActorEnv . getAbsolutePath ( Paths . get ( ActorConfig . load ( ) . getString ( " services . activation . email . template " ) ) ) < nl > < nl > - private val emailTemplate = new String ( Files . readAllBytes ( emailTemplateLocation ) ) < nl > + private val emailTemplate = < nl > + Try ( new String ( Files . readAllBytes ( emailTemplateLocation ) ) ) < nl > + . getOrElse ( throw new RuntimeException ( s " Failed to read template file . Make sure you put it in $ { emailTemplateLocation } " ) ) < nl > < nl > private val smtpStateActor = system . actorOf ( ActivationStateActor . props [ String , EmailCode ] ( < nl > repeatLimit = activationConfig . repeatLimit , < nl > diff - - git a / actor - server / actor - email / src / main / resources / reference . conf b / actor - server / actor - email / src / main / resources / reference . conf < nl > index 1edcf9a . . 7972935 100644 < nl > - - - a / actor - server / actor - email / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - email / src / main / resources / reference . conf < nl > @ @ - 10 , 9 + 10 , 9 @ @ services { < nl > host : " smtp . gmail . com " < nl > port : 465 < nl > username : " no - reply @ actor . im " < nl > - username : $ { ? SMTP _ USERNAME } < nl > + username : $ { ? ACTOR _ SMTP _ USERNAME } < nl > password : " pass " < nl > - password = $ { ? SMTP _ PASSWORD } < nl > + password : $ { ? ACTOR _ SMTP _ PASSWORD } < nl > tls : true < nl > } < nl > } < nl > diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailExtension . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailExtension . scala < nl > index eb95967 . . b58b77e 100644 < nl > - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailExtension . scala < nl > + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailExtension . scala < nl > @ @ - 6 , 7 + 6 , 7 @ @ sealed trait EmailExtension extends Extension < nl > < nl > final class EmailExtensionImpl ( system : ActorSystem ) extends EmailExtension { < nl > import system . dispatcher < nl > - private val config = EmailConfig . load . get < nl > + private val config = EmailConfig . load . getOrElse ( throw new RuntimeException ( " Failed to load email config " ) ) < nl > val sender : EmailSender = new SmtpEmailSender ( config ) < nl > } < nl > < nl > diff - - git a / actor - server / src / docker / var / lib / actor / conf / custom . conf b / actor - server / src / docker / var / lib / actor / conf / custom . conf < nl > new file mode 100644 < nl > index 0000000 . . cee6a29 < nl > - - - / dev / null < nl > + + + b / actor - server / src / docker / var / lib / actor / conf / custom . conf < nl > @ @ - 0 , 0 + 1 @ @ < nl > + # file to include custom configuration , alongside with server . conf < nl > diff - - git a / actor - server / src / docker / var / lib / actor / conf / server . conf b / actor - server / src / docker / var / lib / actor / conf / server . conf < nl > index 7cf2dd6 . . 6f62ce9 100644 < nl > - - - a / actor - server / src / docker / var / lib / actor / conf / server . conf < nl > + + + b / actor - server / src / docker / var / lib / actor / conf / server . conf < nl > @ @ - 1 , 4 + 1 , 4 @ @ < nl > - / / We need it in application . conf because reference . conf can ' t refer to application . conf , this is a work - around < nl > + include file ( " conf / custom . conf " ) < nl > < nl > secret : $ { ? ACTOR _ SECRET } < nl > < nl > @ @ - 33 , 6 + 33 , 30 @ @ services { < nl > location : " / files " < nl > location : $ { ? ACTOR _ FILESTORAGE _ LOCATION } < nl > } < nl > + < nl > + email { < nl > + sender { < nl > + address : " " < nl > + address : $ { ? ACTOR _ EMAIL _ SENDER _ ADDRESS } < nl > + name : " Actor " < nl > + name : $ { ? ACTOR _ EMAIL _ SENDER _ NAME } < nl > + prefix : " [ Actor ] " < nl > + } < nl > + < nl > + smtp { < nl > + host : " " < nl > + host : $ { ? ACTOR _ SMTP _ HOST } < nl > + port : 465 < nl > + port : $ { ? ACTOR _ SMTP _ PORT } < nl > + username : " " < nl > + username : $ { ? ACTOR _ SMTP _ USERNAME } < nl > + password : " " < nl > + password : $ { ? ACTOR _ SMTP _ PASSWORD } < nl > + tls : true < nl > + password : $ { ? ACTOR _ SMTP _ TLS } < nl > + } < nl > + } < nl > + < nl > } < nl > < nl > http {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - activation / src / main / resources / reference . conf b / actor - server / actor - activation / src / main / resources / reference . conf < nl > index 1c0593b . . beb13e5 100644 < nl > - - - a / actor - server / actor - activation / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - activation / src / main / resources / reference . conf < nl > @ @ - 1 , 5 + 1 , 5 @ @ < nl > - actor - server { < nl > + services { < nl > activation { < nl > - wait - interval = 1m < nl > + code - send - interval : 1m < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / Activation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / Activation . scala < nl > index 116455c . . 1830cd1 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / Activation . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / Activation . scala < nl > @ @ - 1 , 6 + 1 , 6 @ @ < nl > package im . actor . server . activation < nl > < nl > - import scala . concurrent . duration . FiniteDuration < nl > + import scala . concurrent . duration . _ < nl > < nl > import akka . actor . _ < nl > import akka . stream . Materializer < nl > @ @ - 32 , 7 + 32 , 7 @ @ case class ActivationContextImpl ( activationActor : ActorRef ) extends ActivationCo < nl > } < nl > } < nl > < nl > - class Activation ( waitInterval : FiniteDuration , smsEngine : AuthSmsEngine , emailSender : EmailSender ) ( implicit materializer : Materializer ) extends Actor with ActorLogging { < nl > + class Activation ( waitInterval : Duration , smsEngine : AuthSmsEngine , emailSender : EmailSender ) ( implicit materializer : Materializer ) extends Actor with ActorLogging { < nl > import Activation . _ < nl > < nl > implicit val system = context . system < nl > @ @ - 44 , 7 + 44 , 7 @ @ class Activation ( waitInterval : FiniteDuration , smsEngine : AuthSmsEngine , emailSe < nl > def rememberSentCode ( code : Code ) = sentCodes + = code < nl > def forgetSentCode ( code : Code ) = sentCodes - = code < nl > def forgetSentCodeAfterDelay ( code : Code ) = < nl > - system . scheduler . scheduleOnce ( waitInterval , self , ForgetSentCode ( code ) ) < nl > + system . scheduler . scheduleOnce ( waitInterval . toMillis . millis , self , ForgetSentCode ( code ) ) < nl > < nl > override def receive : Receive = { < nl > case Send ( authId , code ) ⇒ sendCode ( authId , code ) < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationConfig . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationConfig . scala < nl > index b4f97a6 . . 968f6fe 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationConfig . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationConfig . scala < nl > @ @ - 1 , 14 + 1 , 16 @ @ < nl > package im . actor . server . activation < nl > < nl > - import java . util . concurrent . TimeUnit < nl > - < nl > import scala . concurrent . duration . _ < nl > + import scala . util . Try < nl > < nl > + import com . github . kxbmap . configs . _ < nl > import com . typesafe . config . Config < nl > < nl > object ActivationConfig { < nl > - def fromConfig ( config : Config ) : ActivationConfig = < nl > - ActivationConfig ( config . getDuration ( " wait - interval " , TimeUnit . MILLISECONDS ) . millis ) < nl > + def fromConfig ( config : Config ) : Try [ ActivationConfig ] = < nl > + for { < nl > + waitInterval ← config . get [ Try [ Duration ] ] ( " code - send - interval " ) < nl > + } yield ActivationConfig ( waitInterval ) < nl > } < nl > < nl > - case class ActivationConfig ( waitInterval : FiniteDuration ) < nl > + case class ActivationConfig ( waitInterval : Duration ) < nl > diff - - git a / actor - server / actor - email / src / main / resources / reference . conf b / actor - server / actor - email / src / main / resources / reference . conf < nl > index daa5c45 . . ec4bd7d 100644 < nl > - - - a / actor - server / actor - email / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - email / src / main / resources / reference . conf < nl > @ @ - 1 , 12 + 1 , 19 @ @ < nl > - actor - server { < nl > + services { < nl > email { < nl > - hostname = " smtp . gmail . com " < nl > - smtp - port = 465 < nl > - username = " no - reply @ actor . im " < nl > - username = $ { ? EMAIL _ ACTIVATION _ USERNAME } < nl > - password = " pass " < nl > - password = $ { ? EMAIL _ ACTIVATION _ PASSWORD } < nl > - from = " no - reply @ actor . im " < nl > - from = $ { ? EMAIL _ ACTIVATION _ FROM } < nl > + sender { < nl > + address : " no - reply @ actor . im " < nl > + name : " Actor " < nl > + prefix : " Actor activation code " < nl > + } < nl > + < nl > + smtp { < nl > + host : " smtp . gmail . com " < nl > + port : 465 < nl > + username : " no - reply @ actor . im " < nl > + username : $ { ? SMTP _ USERNAME } < nl > + password : " pass " < nl > + password = $ { ? SMTP _ PASSWORD } < nl > + tls : true < nl > + } < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailConfig . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailConfig . scala < nl > index 37e598b . . 8605d79 100644 < nl > - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailConfig . scala < nl > + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailConfig . scala < nl > @ @ - 1 , 22 + 1 , 34 @ @ < nl > package im . actor . server . email < nl > < nl > + import scala . util . Try < nl > + import com . github . kxbmap . configs . _ < nl > import com . typesafe . config . Config < nl > < nl > case class EmailConfig ( < nl > - hostname : String , < nl > - smtpPort : Int , < nl > + / / sender part < nl > + address : String , < nl > + name : String , < nl > + prefix : String , < nl > + < nl > + / / smtp part < nl > + host : String , < nl > + port : Int , < nl > username : String , < nl > password : String , < nl > - from : String < nl > + tls : Boolean < nl > ) < nl > < nl > object EmailConfig { < nl > - def fromConfig ( config : Config ) : EmailConfig = < nl > - EmailConfig ( < nl > - config . getString ( " hostname " ) , < nl > - config . getInt ( " smtp - port " ) , < nl > - config . getString ( " username " ) , < nl > - config . getString ( " password " ) , < nl > - config . getString ( " from " ) < nl > - ) < nl > - } < nl > + def fromConfig ( config : Config ) : Try [ EmailConfig ] = < nl > + for { < nl > + address ← config . get [ Try [ String ] ] ( " sender . address " ) < nl > + name ← config . get [ Try [ String ] ] ( " sender . name " ) < nl > + prefix ← config . get [ Try [ String ] ] ( " sender . prefix " ) < nl > + < nl > + host ← config . get [ Try [ String ] ] ( " smtp . host " ) < nl > + port ← config . get [ Try [ Int ] ] ( " smtp . port " ) < nl > + username ← config . get [ Try [ String ] ] ( " smtp . username " ) < nl > + password ← config . get [ Try [ String ] ] ( " smtp . password " ) < nl > + tls ← config . get [ Try [ Boolean ] ] ( " smtp . tls " ) < nl > + } yield EmailConfig ( address , name , prefix , host , port , username , password , tls ) < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > index 4104c4c . . 1e517a5 100644 < nl > - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > @ @ - 9 , 12 + 9 , 12 @ @ case class Message ( to : String , subject : String , content : String ) < nl > class EmailSender ( config : EmailConfig ) { < nl > def send ( message : Message ) ( implicit ec : ExecutionContext ) = Future { < nl > val email = new SimpleEmail ( ) < nl > - email . setHostName ( config . hostname ) < nl > - email . setSmtpPort ( config . smtpPort ) < nl > + email . setHostName ( config . host ) < nl > + email . setSmtpPort ( config . port ) < nl > email . setAuthenticator ( new DefaultAuthenticator ( config . username , config . password ) ) < nl > - email . setSSLOnConnect ( true ) < nl > + email . setStartTLSEnabled ( config . tls ) < nl > < nl > - email . setFrom ( config . from ) < nl > + email . setFrom ( config . address ) < nl > email . setSubject ( message . subject ) < nl > email . setMsg ( message . content ) < nl > email . addTo ( message . to ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > index 1361a77 . . b1f7145 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > @ @ - 291 , 7 + 291 , 8 @ @ class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceHelpers < nl > < nl > Thread . sleep ( 100 ) / / Let peer managers write to db < nl > < nl > - whenReady ( db . run ( persist . Dialog . find ( user1 . id , models . Peer . privat ( user2 . id ) ) . head ) ) { dialog ⇒ < nl > + whenReady ( db . run ( persist . Dialog . find ( user1 . id , models . Peer . privat ( user2 . id ) ) ) ) { optDialog ⇒ < nl > + val dialog = optDialog . get < nl > dialog . lastReadAt . getMillis should be < startDate + 3000 < nl > dialog . lastReadAt . getMillis should be > startDate + 1000 < nl > } < nl > diff - - git a / actor - server / src / main / resources / application . conf . example b / actor - server / src / main / resources / application . conf . example < nl > index ced0e0d . . 844fd01 100644 < nl > - - - a / actor - server / src / main / resources / application . conf . example < nl > + + + b / actor - server / src / main / resources / application . conf . example < nl > @ @ - 174 , 6 + 174 , 13 @ @ services { < nl > } < nl > } < nl > < nl > + # Service used for sending activation codes < nl > + activation { < nl > + # Allow client to repeat code sending after this interval < nl > + code - send - interval = 1m < nl > + } < nl > + < nl > + < nl > # Email configuration < nl > email { < nl > < nl > diff - - git a / actor - server / src / main / scala / im / actor / server / Main . scala b / actor - server / src / main / scala / im / actor / server / Main . scala < nl > index e489c94 . . 81ac9f8 100644 < nl > - - - a / actor - server / src / main / scala / im / actor / server / Main . scala < nl > + + + b / actor - server / src / main / scala / im / actor / server / Main . scala < nl > @ @ - 49 , 12 + 49 , 15 @ @ class Main extends Bootable with DbInit with FlywayInit { < nl > val config = ConfigFactory . load ( ) < nl > val serverConfig = config . getConfig ( " actor - server " ) < nl > < nl > - val activationConfig = ActivationConfig . fromConfig ( serverConfig . getConfig ( " activation " ) ) < nl > + / / FIXME : get rid of Option . get < nl > + val activationConfig = ActivationConfig . fromConfig ( serverConfig . getConfig ( " services . activation " ) ) . toOption . get < nl > val applePushConfig = ApplePushManagerConfig . fromConfig ( serverConfig . getConfig ( " push . apple " ) ) < nl > val authConfig = AuthConfig . fromConfig ( serverConfig . getConfig ( " auth " ) ) < nl > val googlePushConfig = serverConfig . getConfig ( " push . google " ) < nl > val groupInviteConfig = GroupInviteConfig . fromConfig ( serverConfig . getConfig ( " messaging . groups . invite " ) ) < nl > - val emailConfig = EmailConfig . fromConfig ( serverConfig . getConfig ( " email " ) ) < nl > + < nl > + / / FIXME : get rid of Option . get < nl > + val emailConfig = EmailConfig . fromConfig ( serverConfig . getConfig ( " services . email " ) ) . toOption . get < nl > / / FIXME : get rid of Option . get < nl > val webappConfig = HttpApiConfig . fromConfig ( serverConfig . getConfig ( " webapp " ) ) . toOption . get < nl > val ilectroInterceptionConfig = LlectroInterceptionConfig . fromConfig ( serverConfig . getConfig ( " messaging . llectro " ) )

TEST DIFF:
diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / smtp / SMTPProvider . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / smtp / SMTPProvider . scala 
 index 459d9d9 . . bdea067 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / smtp / SMTPProvider . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / smtp / SMTPProvider . scala 
 @ @ - 12 , 13 + 12 , 14 @ @ import im . actor . env . ActorEnv 
 import im . actor . server . activation . common . ActivationStateActor . { ForgetSentCode , Send , SendAck } 
 import im . actor . server . activation . common . _ 
 import im . actor . server . db . DbExtension 
 - import im . actor . server . email . { Content , EmailConfig , Message , SmtpEmailSender } 
 + import im . actor . server . email . _ 
 import im . actor . server . model . AuthEmailTransaction 
 import im . actor . server . persist . auth . AuthTransactionRepo 
 import im . actor . util . misc . EmailUtils . isTestEmail 
 
 import scala . concurrent . Future 
 import scala . concurrent . duration . _ 
 + import scala . util . Try 
 
 private [ activation ] final class SMTPProvider ( system : ActorSystem ) extends ActivationProvider with CommonAuthCodes { 
 
 @ @ - 28 , 12 + 29 , 14 @ @ private [ activation ] final class SMTPProvider ( system : ActorSystem ) extends Activa 
 
 private implicit val timeout = Timeout ( 20 . seconds ) 
 
 - private val emailConfig = EmailConfig . load . getOrElse ( throw new RuntimeException ( " Failed to load email config " ) ) 
 - private val emailSender = new SmtpEmailSender ( emailConfig ) 
 + private val emailSender = EmailExtension ( system ) . sender 
 + 
 private val emailTemplateLocation = 
 ActorEnv . getAbsolutePath ( Paths . get ( ActorConfig . load ( ) . getString ( " services . activation . email . template " ) ) ) 
 
 - private val emailTemplate = new String ( Files . readAllBytes ( emailTemplateLocation ) ) 
 + private val emailTemplate = 
 + Try ( new String ( Files . readAllBytes ( emailTemplateLocation ) ) ) 
 + . getOrElse ( throw new RuntimeException ( s " Failed to read template file . Make sure you put it in $ { emailTemplateLocation } " ) ) 
 
 private val smtpStateActor = system . actorOf ( ActivationStateActor . props [ String , EmailCode ] ( 
 repeatLimit = activationConfig . repeatLimit , 
 diff - - git a / actor - server / actor - email / src / main / resources / reference . conf b / actor - server / actor - email / src / main / resources / reference . conf 
 index 1edcf9a . . 7972935 100644 
 - - - a / actor - server / actor - email / src / main / resources / reference . conf 
 + + + b / actor - server / actor - email / src / main / resources / reference . conf 
 @ @ - 10 , 9 + 10 , 9 @ @ services { 
 host : " smtp . gmail . com " 
 port : 465 
 username : " no - reply @ actor . im " 
 - username : $ { ? SMTP _ USERNAME } 
 + username : $ { ? ACTOR _ SMTP _ USERNAME } 
 password : " pass " 
 - password = $ { ? SMTP _ PASSWORD } 
 + password : $ { ? ACTOR _ SMTP _ PASSWORD } 
 tls : true 
 } 
 } 
 diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailExtension . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailExtension . scala 
 index eb95967 . . b58b77e 100644 
 - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailExtension . scala 
 + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailExtension . scala 
 @ @ - 6 , 7 + 6 , 7 @ @ sealed trait EmailExtension extends Extension 
 
 final class EmailExtensionImpl ( system : ActorSystem ) extends EmailExtension { 
 import system . dispatcher 
 - private val config = EmailConfig . load . get 
 + private val config = EmailConfig . load . getOrElse ( throw new RuntimeException ( " Failed to load email config " ) ) 
 val sender : EmailSender = new SmtpEmailSender ( config ) 
 } 
 
 diff - - git a / actor - server / src / docker / var / lib / actor / conf / custom . conf b / actor - server / src / docker / var / lib / actor / conf / custom . conf 
 new file mode 100644 
 index 0000000 . . cee6a29 
 - - - / dev / null 
 + + + b / actor - server / src / docker / var / lib / actor / conf / custom . conf 
 @ @ - 0 , 0 + 1 @ @ 
 + # file to include custom configuration , alongside with server . conf 
 diff - - git a / actor - server / src / docker / var / lib / actor / conf / server . conf b / actor - server / src / docker / var / lib / actor / conf / server . conf 
 index 7cf2dd6 . . 6f62ce9 100644 
 - - - a / actor - server / src / docker / var / lib / actor / conf / server . conf 
 + + + b / actor - server / src / docker / var / lib / actor / conf / server . conf 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - / / We need it in application . conf because reference . conf can ' t refer to application . conf , this is a work - around 
 + include file ( " conf / custom . conf " ) 
 
 secret : $ { ? ACTOR _ SECRET } 
 
 @ @ - 33 , 6 + 33 , 30 @ @ services { 
 location : " / files " 
 location : $ { ? ACTOR _ FILESTORAGE _ LOCATION } 
 } 
 + 
 + email { 
 + sender { 
 + address : " " 
 + address : $ { ? ACTOR _ EMAIL _ SENDER _ ADDRESS } 
 + name : " Actor " 
 + name : $ { ? ACTOR _ EMAIL _ SENDER _ NAME } 
 + prefix : " [ Actor ] " 
 + } 
 + 
 + smtp { 
 + host : " " 
 + host : $ { ? ACTOR _ SMTP _ HOST } 
 + port : 465 
 + port : $ { ? ACTOR _ SMTP _ PORT } 
 + username : " " 
 + username : $ { ? ACTOR _ SMTP _ USERNAME } 
 + password : " " 
 + password : $ { ? ACTOR _ SMTP _ PASSWORD } 
 + tls : true 
 + password : $ { ? ACTOR _ SMTP _ TLS } 
 + } 
 + } 
 + 
 } 
 
 http {

NEAREST DIFF:
diff - - git a / actor - server / actor - activation / src / main / resources / reference . conf b / actor - server / actor - activation / src / main / resources / reference . conf 
 index 1c0593b . . beb13e5 100644 
 - - - a / actor - server / actor - activation / src / main / resources / reference . conf 
 + + + b / actor - server / actor - activation / src / main / resources / reference . conf 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 - actor - server { 
 + services { 
 activation { 
 - wait - interval = 1m 
 + code - send - interval : 1m 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / Activation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / Activation . scala 
 index 116455c . . 1830cd1 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / Activation . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / Activation . scala 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package im . actor . server . activation 
 
 - import scala . concurrent . duration . FiniteDuration 
 + import scala . concurrent . duration . _ 
 
 import akka . actor . _ 
 import akka . stream . Materializer 
 @ @ - 32 , 7 + 32 , 7 @ @ case class ActivationContextImpl ( activationActor : ActorRef ) extends ActivationCo 
 } 
 } 
 
 - class Activation ( waitInterval : FiniteDuration , smsEngine : AuthSmsEngine , emailSender : EmailSender ) ( implicit materializer : Materializer ) extends Actor with ActorLogging { 
 + class Activation ( waitInterval : Duration , smsEngine : AuthSmsEngine , emailSender : EmailSender ) ( implicit materializer : Materializer ) extends Actor with ActorLogging { 
 import Activation . _ 
 
 implicit val system = context . system 
 @ @ - 44 , 7 + 44 , 7 @ @ class Activation ( waitInterval : FiniteDuration , smsEngine : AuthSmsEngine , emailSe 
 def rememberSentCode ( code : Code ) = sentCodes + = code 
 def forgetSentCode ( code : Code ) = sentCodes - = code 
 def forgetSentCodeAfterDelay ( code : Code ) = 
 - system . scheduler . scheduleOnce ( waitInterval , self , ForgetSentCode ( code ) ) 
 + system . scheduler . scheduleOnce ( waitInterval . toMillis . millis , self , ForgetSentCode ( code ) ) 
 
 override def receive : Receive = { 
 case Send ( authId , code ) ⇒ sendCode ( authId , code ) 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationConfig . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationConfig . scala 
 index b4f97a6 . . 968f6fe 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationConfig . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationConfig . scala 
 @ @ - 1 , 14 + 1 , 16 @ @ 
 package im . actor . server . activation 
 
 - import java . util . concurrent . TimeUnit 
 - 
 import scala . concurrent . duration . _ 
 + import scala . util . Try 
 
 + import com . github . kxbmap . configs . _ 
 import com . typesafe . config . Config 
 
 object ActivationConfig { 
 - def fromConfig ( config : Config ) : ActivationConfig = 
 - ActivationConfig ( config . getDuration ( " wait - interval " , TimeUnit . MILLISECONDS ) . millis ) 
 + def fromConfig ( config : Config ) : Try [ ActivationConfig ] = 
 + for { 
 + waitInterval ← config . get [ Try [ Duration ] ] ( " code - send - interval " ) 
 + } yield ActivationConfig ( waitInterval ) 
 } 
 
 - case class ActivationConfig ( waitInterval : FiniteDuration ) 
 + case class ActivationConfig ( waitInterval : Duration ) 
 diff - - git a / actor - server / actor - email / src / main / resources / reference . conf b / actor - server / actor - email / src / main / resources / reference . conf 
 index daa5c45 . . ec4bd7d 100644 
 - - - a / actor - server / actor - email / src / main / resources / reference . conf 
 + + + b / actor - server / actor - email / src / main / resources / reference . conf 
 @ @ - 1 , 12 + 1 , 19 @ @ 
 - actor - server { 
 + services { 
 email { 
 - hostname = " smtp . gmail . com " 
 - smtp - port = 465 
 - username = " no - reply @ actor . im " 
 - username = $ { ? EMAIL _ ACTIVATION _ USERNAME } 
 - password = " pass " 
 - password = $ { ? EMAIL _ ACTIVATION _ PASSWORD } 
 - from = " no - reply @ actor . im " 
 - from = $ { ? EMAIL _ ACTIVATION _ FROM } 
 + sender { 
 + address : " no - reply @ actor . im " 
 + name : " Actor " 
 + prefix : " Actor activation code " 
 + } 
 + 
 + smtp { 
 + host : " smtp . gmail . com " 
 + port : 465 
 + username : " no - reply @ actor . im " 
 + username : $ { ? SMTP _ USERNAME } 
 + password : " pass " 
 + password = $ { ? SMTP _ PASSWORD } 
 + tls : true 
 + } 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailConfig . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailConfig . scala 
 index 37e598b . . 8605d79 100644 
 - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailConfig . scala 
 + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailConfig . scala 
 @ @ - 1 , 22 + 1 , 34 @ @ 
 package im . actor . server . email 
 
 + import scala . util . Try 
 + import com . github . kxbmap . configs . _ 
 import com . typesafe . config . Config 
 
 case class EmailConfig ( 
 - hostname : String , 
 - smtpPort : Int , 
 + / / sender part 
 + address : String , 
 + name : String , 
 + prefix : String , 
 + 
 + / / smtp part 
 + host : String , 
 + port : Int , 
 username : String , 
 password : String , 
 - from : String 
 + tls : Boolean 
 ) 
 
 object EmailConfig { 
 - def fromConfig ( config : Config ) : EmailConfig = 
 - EmailConfig ( 
 - config . getString ( " hostname " ) , 
 - config . getInt ( " smtp - port " ) , 
 - config . getString ( " username " ) , 
 - config . getString ( " password " ) , 
 - config . getString ( " from " ) 
 - ) 
 - } 
 + def fromConfig ( config : Config ) : Try [ EmailConfig ] = 
 + for { 
 + address ← config . get [ Try [ String ] ] ( " sender . address " ) 
 + name ← config . get [ Try [ String ] ] ( " sender . name " ) 
 + prefix ← config . get [ Try [ String ] ] ( " sender . prefix " ) 
 + 
 + host ← config . get [ Try [ String ] ] ( " smtp . host " ) 
 + port ← config . get [ Try [ Int ] ] ( " smtp . port " ) 
 + username ← config . get [ Try [ String ] ] ( " smtp . username " ) 
 + password ← config . get [ Try [ String ] ] ( " smtp . password " ) 
 + tls ← config . get [ Try [ Boolean ] ] ( " smtp . tls " ) 
 + } yield EmailConfig ( address , name , prefix , host , port , username , password , tls ) 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 index 4104c4c . . 1e517a5 100644 
 - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 @ @ - 9 , 12 + 9 , 12 @ @ case class Message ( to : String , subject : String , content : String ) 
 class EmailSender ( config : EmailConfig ) { 
 def send ( message : Message ) ( implicit ec : ExecutionContext ) = Future { 
 val email = new SimpleEmail ( ) 
 - email . setHostName ( config . hostname ) 
 - email . setSmtpPort ( config . smtpPort ) 
 + email . setHostName ( config . host ) 
 + email . setSmtpPort ( config . port ) 
 email . setAuthenticator ( new DefaultAuthenticator ( config . username , config . password ) ) 
 - email . setSSLOnConnect ( true ) 
 + email . setStartTLSEnabled ( config . tls ) 
 
 - email . setFrom ( config . from ) 
 + email . setFrom ( config . address ) 
 email . setSubject ( message . subject ) 
 email . setMsg ( message . content ) 
 email . addTo ( message . to ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 index 1361a77 . . b1f7145 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 @ @ - 291 , 7 + 291 , 8 @ @ class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceHelpers 
 
 Thread . sleep ( 100 ) / / Let peer managers write to db 
 
 - whenReady ( db . run ( persist . Dialog . find ( user1 . id , models . Peer . privat ( user2 . id ) ) . head ) ) { dialog ⇒ 
 + whenReady ( db . run ( persist . Dialog . find ( user1 . id , models . Peer . privat ( user2 . id ) ) ) ) { optDialog ⇒ 
 + val dialog = optDialog . get 
 dialog . lastReadAt . getMillis should be < startDate + 3000 
 dialog . lastReadAt . getMillis should be > startDate + 1000 
 } 
 diff - - git a / actor - server / src / main / resources / application . conf . example b / actor - server / src / main / resources / application . conf . example 
 index ced0e0d . . 844fd01 100644 
 - - - a / actor - server / src / main / resources / application . conf . example 
 + + + b / actor - server / src / main / resources / application . conf . example 
 @ @ - 174 , 6 + 174 , 13 @ @ services { 
 } 
 } 
 
 + # Service used for sending activation codes 
 + activation { 
 + # Allow client to repeat code sending after this interval 
 + code - send - interval = 1m 
 + } 
 + 
 + 
 # Email configuration 
 email { 
 
 diff - - git a / actor - server / src / main / scala / im / actor / server / Main . scala b / actor - server / src / main / scala / im / actor / server / Main . scala 
 index e489c94 . . 81ac9f8 100644 
 - - - a / actor - server / src / main / scala / im / actor / server / Main . scala 
 + + + b / actor - server / src / main / scala / im / actor / server / Main . scala 
 @ @ - 49 , 12 + 49 , 15 @ @ class Main extends Bootable with DbInit with FlywayInit { 
 val config = ConfigFactory . load ( ) 
 val serverConfig = config . getConfig ( " actor - server " ) 
 
 - val activationConfig = ActivationConfig . fromConfig ( serverConfig . getConfig ( " activation " ) ) 
 + / / FIXME : get rid of Option . get 
 + val activationConfig = ActivationConfig . fromConfig ( serverConfig . getConfig ( " services . activation " ) ) . toOption . get 
 val applePushConfig = ApplePushManagerConfig . fromConfig ( serverConfig . getConfig ( " push . apple " ) ) 
 val authConfig = AuthConfig . fromConfig ( serverConfig . getConfig ( " auth " ) ) 
 val googlePushConfig = serverConfig . getConfig ( " push . google " ) 
 val groupInviteConfig = GroupInviteConfig . fromConfig ( serverConfig . getConfig ( " messaging . groups . invite " ) ) 
 - val emailConfig = EmailConfig . fromConfig ( serverConfig . getConfig ( " email " ) ) 
 + 
 + / / FIXME : get rid of Option . get 
 + val emailConfig = EmailConfig . fromConfig ( serverConfig . getConfig ( " services . email " ) ) . toOption . get 
 / / FIXME : get rid of Option . get 
 val webappConfig = HttpApiConfig . fromConfig ( serverConfig . getConfig ( " webapp " ) ) . toOption . get 
 val ilectroInterceptionConfig = LlectroInterceptionConfig . fromConfig ( serverConfig . getConfig ( " messaging . llectro " ) )
