BLEU SCORE: 1.0

TEST MSG: Update actor - ratchet . md
GENERATED MSG: Update actor - ratchet . md

TEST DIFF (one line): diff - - git a / docs / e2e / actor - ratchet . md b / docs / e2e / actor - ratchet . md < nl > index 4a713ea . . 43959ac 100644 < nl > - - - a / docs / e2e / actor - ratchet . md < nl > + + + b / docs / e2e / actor - ratchet . md < nl > @ @ - 67 , 7 + 67 , 7 @ @ Client ' s * MUST * create new ecnryption chains when they receive new ephermal key < nl > < nl > Chain is * one - side * entity , that mean that only sender use it * * only * * for encryption and receiver use it * * only * * for decryption . < nl > < nl > - Let ' s say we pick A1 and B1 keys to our new Chain then we will calculate * root _ chain _ key * : < nl > + Let ' s say we pick A1 and B1 keys to our new Chain then we will calculate * root _ chain _ key * ( * * TODO : key size ? * * ) : < nl > ` ` ` < nl > root _ chain _ key = HKDF ( key = ECDH ( A1 ' , B1 ) , salt = master _ secret , info = " ActorRatchet " . getBytes ( ) ) < nl > ` ` `
NEAREST DIFF (one line): diff - - git a / docs / e2e / actor - ratchet . md b / docs / e2e / actor - ratchet . md < nl > index bf6a24d . . 4a713ea 100644 < nl > - - - a / docs / e2e / actor - ratchet . md < nl > + + + b / docs / e2e / actor - ratchet . md < nl > @ @ - 85 , 21 + 85 , 23 @ @ mac _ key = message _ key _ extendend [ 32 . . 63 ] < nl > < nl > # # Encryption < nl > < nl > - Binary plain - text message is encrypted and MACed : < nl > + For each message random iv ( 16 bytes ) is generated and then message encrypted and MACed : < nl > ` ` ` < nl > iv = random [ 0 . . 16 ] < nl > cipher _ text = AES - 128 - CBC ( iv , cipher _ key , plain _ text ) < nl > cipher _ mac = HMAC _ SHA256 ( mac _ key , cipher _ text ) < nl > ` ` ` < nl > < nl > - # # Packing Result < nl > + # # Outgoing Package < nl > < nl > Encrypted Result is serialized to : < nl > < nl > ` ` ` < nl > PreMessage { < nl > - identity : bytes = AI < nl > - used _ ephermal _ id : int63 = B0 . id < nl > + sender _ ephermal _ id : int64 = A0 . id < nl > + receiver _ ephermal _ id : int64 = A0 . id < nl > + sender _ ephermal _ key : bytes = A1 < nl > + receiver _ ephermal _ key : bytes = B1 < nl > iv : bytes < nl > cipher _ text : bytes < nl > cipher _ mac : bytes

TEST DIFF:
diff - - git a / docs / e2e / actor - ratchet . md b / docs / e2e / actor - ratchet . md 
 index 4a713ea . . 43959ac 100644 
 - - - a / docs / e2e / actor - ratchet . md 
 + + + b / docs / e2e / actor - ratchet . md 
 @ @ - 67 , 7 + 67 , 7 @ @ Client ' s * MUST * create new ecnryption chains when they receive new ephermal key 
 
 Chain is * one - side * entity , that mean that only sender use it * * only * * for encryption and receiver use it * * only * * for decryption . 
 
 - Let ' s say we pick A1 and B1 keys to our new Chain then we will calculate * root _ chain _ key * : 
 + Let ' s say we pick A1 and B1 keys to our new Chain then we will calculate * root _ chain _ key * ( * * TODO : key size ? * * ) : 
 ` ` ` 
 root _ chain _ key = HKDF ( key = ECDH ( A1 ' , B1 ) , salt = master _ secret , info = " ActorRatchet " . getBytes ( ) ) 
 ` ` `

NEAREST DIFF:
diff - - git a / docs / e2e / actor - ratchet . md b / docs / e2e / actor - ratchet . md 
 index bf6a24d . . 4a713ea 100644 
 - - - a / docs / e2e / actor - ratchet . md 
 + + + b / docs / e2e / actor - ratchet . md 
 @ @ - 85 , 21 + 85 , 23 @ @ mac _ key = message _ key _ extendend [ 32 . . 63 ] 
 
 # # Encryption 
 
 - Binary plain - text message is encrypted and MACed : 
 + For each message random iv ( 16 bytes ) is generated and then message encrypted and MACed : 
 ` ` ` 
 iv = random [ 0 . . 16 ] 
 cipher _ text = AES - 128 - CBC ( iv , cipher _ key , plain _ text ) 
 cipher _ mac = HMAC _ SHA256 ( mac _ key , cipher _ text ) 
 ` ` ` 
 
 - # # Packing Result 
 + # # Outgoing Package 
 
 Encrypted Result is serialized to : 
 
 ` ` ` 
 PreMessage { 
 - identity : bytes = AI 
 - used _ ephermal _ id : int63 = B0 . id 
 + sender _ ephermal _ id : int64 = A0 . id 
 + receiver _ ephermal _ id : int64 = A0 . id 
 + sender _ ephermal _ key : bytes = A1 
 + receiver _ ephermal _ key : bytes = B1 
 iv : bytes 
 cipher _ text : bytes 
 cipher _ mac : bytes
