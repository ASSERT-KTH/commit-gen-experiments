BLEU SCORE: 0.02378850384826639

TEST MSG: Merge branch ' master ' into core / conversations - v2
GENERATED MSG: fix ( server : messaging ) : dialog ' s counter instead of global in UpdateReadByMe

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > index d634104 . . a442d40 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > @ @ - 150 , 14 + 150 , 16 @ @ trait DialogCommandHandlers extends PeersImplicits { < nl > < nl > protected def messageRead ( state : DialogState , mr : MessageRead ) : Unit = { < nl > val mustRead = mustMakeRead ( state , mr ) < nl > + val readDate = new DateTime ( mr . date ) < nl > < nl > ( if ( mustRead ) { < nl > for { < nl > _ ← dialogExt . ackMessageRead ( peer , mr ) < nl > - _ ← db . run ( markMessagesRead ( selfPeer , peer , new DateTime ( mr . date ) ) ) < nl > - unreadCount ← db . run ( dialogExt . getUnreadTotal ( userId ) ) < nl > + _ ← db . run ( markMessagesRead ( selfPeer , peer , readDate ) ) < nl > + historyOwner < - HistoryUtils . getHistoryOwner ( peer , userId ) < nl > + unreadCount ← db . run ( dialogExt . getUnreadCount ( userId , historyOwner , peer , readDate ) ) < nl > _ ← deliveryExt . read ( userId , mr . readerAuthSid , peer , mr . date , Some ( unreadCount ) ) < nl > - _ ← deliveryExt . sendCountersUpdate ( userId , unreadCount ) < nl > + _ ← deliveryExt . sendCountersUpdate ( userId ) < nl > } yield MessageReadAck ( ) < nl > } else { < nl > Future . successful ( MessageReadAck ( ) )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > index d634104 . . a442d40 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > @ @ - 150 , 14 + 150 , 16 @ @ trait DialogCommandHandlers extends PeersImplicits { < nl > < nl > protected def messageRead ( state : DialogState , mr : MessageRead ) : Unit = { < nl > val mustRead = mustMakeRead ( state , mr ) < nl > + val readDate = new DateTime ( mr . date ) < nl > < nl > ( if ( mustRead ) { < nl > for { < nl > _ ← dialogExt . ackMessageRead ( peer , mr ) < nl > - _ ← db . run ( markMessagesRead ( selfPeer , peer , new DateTime ( mr . date ) ) ) < nl > - unreadCount ← db . run ( dialogExt . getUnreadTotal ( userId ) ) < nl > + _ ← db . run ( markMessagesRead ( selfPeer , peer , readDate ) ) < nl > + historyOwner < - HistoryUtils . getHistoryOwner ( peer , userId ) < nl > + unreadCount ← db . run ( dialogExt . getUnreadCount ( userId , historyOwner , peer , readDate ) ) < nl > _ ← deliveryExt . read ( userId , mr . readerAuthSid , peer , mr . date , Some ( unreadCount ) ) < nl > - _ ← deliveryExt . sendCountersUpdate ( userId , unreadCount ) < nl > + _ ← deliveryExt . sendCountersUpdate ( userId ) < nl > } yield MessageReadAck ( ) < nl > } else { < nl > Future . successful ( MessageReadAck ( ) )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 index d634104 . . a442d40 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 @ @ - 150 , 14 + 150 , 16 @ @ trait DialogCommandHandlers extends PeersImplicits { 
 
 protected def messageRead ( state : DialogState , mr : MessageRead ) : Unit = { 
 val mustRead = mustMakeRead ( state , mr ) 
 + val readDate = new DateTime ( mr . date ) 
 
 ( if ( mustRead ) { 
 for { 
 _ ← dialogExt . ackMessageRead ( peer , mr ) 
 - _ ← db . run ( markMessagesRead ( selfPeer , peer , new DateTime ( mr . date ) ) ) 
 - unreadCount ← db . run ( dialogExt . getUnreadTotal ( userId ) ) 
 + _ ← db . run ( markMessagesRead ( selfPeer , peer , readDate ) ) 
 + historyOwner < - HistoryUtils . getHistoryOwner ( peer , userId ) 
 + unreadCount ← db . run ( dialogExt . getUnreadCount ( userId , historyOwner , peer , readDate ) ) 
 _ ← deliveryExt . read ( userId , mr . readerAuthSid , peer , mr . date , Some ( unreadCount ) ) 
 - _ ← deliveryExt . sendCountersUpdate ( userId , unreadCount ) 
 + _ ← deliveryExt . sendCountersUpdate ( userId ) 
 } yield MessageReadAck ( ) 
 } else { 
 Future . successful ( MessageReadAck ( ) )

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 index d634104 . . a442d40 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 @ @ - 150 , 14 + 150 , 16 @ @ trait DialogCommandHandlers extends PeersImplicits { 
 
 protected def messageRead ( state : DialogState , mr : MessageRead ) : Unit = { 
 val mustRead = mustMakeRead ( state , mr ) 
 + val readDate = new DateTime ( mr . date ) 
 
 ( if ( mustRead ) { 
 for { 
 _ ← dialogExt . ackMessageRead ( peer , mr ) 
 - _ ← db . run ( markMessagesRead ( selfPeer , peer , new DateTime ( mr . date ) ) ) 
 - unreadCount ← db . run ( dialogExt . getUnreadTotal ( userId ) ) 
 + _ ← db . run ( markMessagesRead ( selfPeer , peer , readDate ) ) 
 + historyOwner < - HistoryUtils . getHistoryOwner ( peer , userId ) 
 + unreadCount ← db . run ( dialogExt . getUnreadCount ( userId , historyOwner , peer , readDate ) ) 
 _ ← deliveryExt . read ( userId , mr . readerAuthSid , peer , mr . date , Some ( unreadCount ) ) 
 - _ ← deliveryExt . sendCountersUpdate ( userId , unreadCount ) 
 + _ ← deliveryExt . sendCountersUpdate ( userId ) 
 } yield MessageReadAck ( ) 
 } else { 
 Future . successful ( MessageReadAck ( ) )
