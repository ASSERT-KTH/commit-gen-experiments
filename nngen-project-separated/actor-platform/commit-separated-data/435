BLEU SCORE: 0.41722614486115056

TEST MSG: fix ( server : messaging ) : reorder chat groups on renames
GENERATED MSG: chore ( server : messaging ) : DialogRoot migrator to eventsourcing

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / dialog . proto b / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > index a6b122f . . bccf85d 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > @ @ - 122 , 6 + 122 , 10 @ @ message DialogRootCommands { < nl > < nl > Peer dest = 1 ; < nl > } < nl > + < nl > + message SendChatGroupsChanged { < nl > + option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogRootCommand " ; < nl > + } < nl > } < nl > < nl > message DialogRootQueries { < nl > @ @ - 187 , 6 + 191 , 7 @ @ message DialogRootEnvelope { < nl > DialogRootCommands . Favourite favourite = 7 ; < nl > DialogRootCommands . Unfavourite unfavourite = 8 ; < nl > DialogRootCommands . Delete delete = 9 ; < nl > + DialogRootCommands . SendChatGroupsChanged send _ chat _ groups _ changed = 12 ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > index c091d83 . . 33457e8 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > @ @ - 181 , 6 + 181 , 11 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit < nl > . mapTo [ SeqState ] < nl > } < nl > < nl > + def sendChatGroupsChanged ( userId : Int ) : Future [ SeqState ] = < nl > + ( userExt . processorRegion . ref ? < nl > + UserEnvelope ( userId ) . withDialogRootEnvelope ( DialogRootEnvelope ( ) . withSendChatGroupsChanged ( DialogRootCommands . SendChatGroupsChanged ( ) ) ) ) < nl > + . mapTo [ SeqState ] < nl > + < nl > def setReaction ( userId : Int , authSid : Int , peer : Peer , randomId : Long , code : String ) : Future [ SetReactionAck ] = < nl > withValidPeer ( peer , userId ) { < nl > ( userExt . processorRegion . ref ? UserEnvelope ( userId ) . withDialogEnvelope ( DialogEnvelope ( ) . withSetReaction ( SetReaction ( < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > index 5d4e650 . . f11648d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > @ @ - 144 , 7 + 144 , 7 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > handleDialogCommand ( dc ) < nl > < nl > if ( ! isCreated | | ! isShown ) < nl > - sendChatGroupsChanged ( ) < nl > + deliverChatGroupsChanged ( ) < nl > } < nl > case None ⇒ < nl > handleDialogCommand ( dc ) < nl > @ @ - 153 , 6 + 153 , 7 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > case Unarchive ( Some ( peer ) , clientAuthSid ) ⇒ unarchive ( peer , clientAuthSid map ( _ . value ) ) < nl > case Favourite ( Some ( peer ) , clientAuthSid ) ⇒ favourite ( peer , clientAuthSid map ( _ . value ) ) < nl > case Unfavourite ( Some ( peer ) , clientAuthSid ) ⇒ unfavourite ( peer , clientAuthSid map ( _ . value ) ) < nl > + case SendChatGroupsChanged ( ) ⇒ sendChatGroupsChanged ( ) < nl > case dc : DialogCommand ⇒ handleDialogCommand ( dc ) < nl > case dq : DialogQuery ⇒ handleDialogQuery ( dq ) < nl > } < nl > @ @ - 167 , 34 + 168 , 34 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > } < nl > < nl > private def archive ( peer : Peer , clientAuthSid : Option [ Int ] ) = { < nl > - if ( isArchived ( peer ) ) sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) < nl > + if ( isArchived ( peer ) ) deliverChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) < nl > else persist ( Archived ( Instant . now ( ) , Some ( peer ) ) ) { e ⇒ < nl > commit ( e ) < nl > - sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) < nl > + deliverChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) < nl > } < nl > } < nl > < nl > private def unarchive ( peer : Peer , clientAuthSid : Option [ Int ] ) = { < nl > - if ( ! isArchived ( peer ) ) sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) < nl > + if ( ! isArchived ( peer ) ) deliverChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) < nl > else persist ( Unarchived ( Instant . now ( ) , Some ( peer ) ) ) { e ⇒ < nl > commit ( e ) < nl > - sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) < nl > + deliverChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) < nl > } < nl > } < nl > < nl > private def favourite ( peer : Peer , clientAuthSid : Option [ Int ] ) = { < nl > - if ( isFavourited ( peer ) ) sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) < nl > + if ( isFavourited ( peer ) ) deliverChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) < nl > else persist ( Favourited ( Instant . now ( ) , Some ( peer ) ) ) { e ⇒ < nl > commit ( e ) < nl > - sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) < nl > + deliverChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) < nl > } < nl > } < nl > < nl > private def unfavourite ( peer : Peer , clientAuthSid : Option [ Int ] ) = { < nl > - if ( ! isFavourited ( peer ) ) sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) < nl > + if ( ! isFavourited ( peer ) ) deliverChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) < nl > else persist ( Unfavourited ( Instant . now ( ) , Some ( peer ) ) ) { e ⇒ < nl > commit ( e ) < nl > - sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) < nl > + deliverChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) < nl > } < nl > } < nl > < nl > @ @ - 213 , 6 + 214 , 8 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > } < nl > } < nl > < nl > + private def sendChatGroupsChanged ( ) = deliverChatGroupsChanged ( ) pipeTo sender ( ) < nl > + < nl > private def isArchived ( peer : Peer ) : Boolean = state . archived . exists ( _ . peer = = peer ) < nl > < nl > private def isFavourited ( peer : Peer ) : Boolean = state . active . favourites . exists ( _ . peer = = peer ) < nl > @ @ - 256 , 7 + 259 , 7 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > } < nl > } < nl > < nl > - private def sendChatGroupsChanged ( ignoreAuthSid : Option [ Int ] = None ) : Future [ SeqState ] = { < nl > + private def deliverChatGroupsChanged ( ignoreAuthSid : Option [ Int ] = None ) : Future [ SeqState ] = { < nl > for { < nl > groups ← DialogExtension ( context . system ) . fetchApiGroupedDialogs ( userId ) < nl > update = UpdateChatGroupsChanged ( groups ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index eff32f7 . . 2cb6451 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 30 , 6 + 30 , 7 @ @ import org . joda . time . DateTime < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > import scala . concurrent . Future < nl > + import scala . util . Success < nl > < nl > private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupCommandHelpers with UserACL { < nl > this : GroupProcessor ⇒ < nl > @ @ - 307 , 7 + 308 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > val update = UpdateGroupTitleChanged ( groupId = groupId , userId = clientUserId , title = title , date = date . toEpochMilli , randomId = randomId ) < nl > val serviceMessage = GroupServiceMessages . changedTitle ( title ) < nl > < nl > - for { < nl > + ( for { < nl > _ ← db . run ( GroupRepo . updateTitle ( groupId , title , clientUserId , randomId , date ) ) < nl > _ ← dialogExt . writeMessage ( < nl > ApiPeer ( ApiPeerType . Group , groupId ) , < nl > @ @ - 322 , 7 + 323 , 9 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > update , < nl > PushRules ( ) . withData ( PushData ( ) . withText ( PushTexts . TitleChanged ) ) < nl > ) < nl > - } yield SeqStateDate ( seqstate . seq , seqstate . state , date . toEpochMilli ) < nl > + } yield SeqStateDate ( seqstate . seq , seqstate . state , date . toEpochMilli ) ) andThen { < nl > + case Success ( _ ) ⇒ group . members . map ( _ . _ 1 ) foreach ( dialogExt . sendChatGroupsChanged ( _ ) ) < nl > + } < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > index 7d8f59b . . efe82d6 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > @ @ - 160 , 7 + 160 , 10 @ @ private [ user ] trait UserCommandHandlers { < nl > relatedUserIds ← getRelations ( userId ) < nl > ( seqstate , _ ) ← seqUpdatesExt . broadcastOwnSingleUpdate ( userId , relatedUserIds , update ) < nl > _ ← db . run ( UserRepo . setName ( userId , name ) ) < nl > - } yield seqstate < nl > + } yield { < nl > + relatedUserIds foreach ( dialogExt . sendChatGroupsChanged ( _ ) ) < nl > + seqstate < nl > + } < nl > } < nl > } else { < nl > replyTo ! Status . Failure ( UserErrors . InvalidName ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserContacts . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserContacts . scala < nl > index 431c5e6 . . fc2ea73 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserContacts . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserContacts . scala < nl > @ @ - 9 , 11 + 9 , 13 @ @ import akka . util . Timeout < nl > import im . actor . api . rpc . users . UpdateUserLocalNameChanged < nl > import im . actor . server . cqrs . { Event , Processor , ProcessorState } < nl > import im . actor . server . db . DbExtension < nl > + import im . actor . server . dialog . DialogExtension < nl > import im . actor . server . persist . contact . UserContactRepo < nl > import im . actor . server . sequence . SeqState < nl > import im . actor . server . user . UserCommands . EditLocalName < nl > < nl > import scala . concurrent . Future < nl > + import scala . util . Success < nl > < nl > private final case class UserContactsState ( localNames : Map [ Int , String ] = Map . empty ) extends ProcessorState [ UserContactsState ] { < nl > import UserEvents . _ < nl > @ @ - 42 , 11 + 44 , 14 @ @ private [ user ] final class UserContactsActor ( userId : Int ) extends Processor [ UserC < nl > import UserQueries . _ < nl > import UserEvents . _ < nl > < nl > + import context . dispatcher < nl > + < nl > override def persistenceId : String = s " User _ $ { userId } _ Contacts " < nl > < nl > override def getInitialState : UserContactsState = UserContactsState ( ) < nl > < nl > private val userExt = UserExtension ( context . system ) < nl > + private val dialogExt = DialogExtension ( context . system ) < nl > private val db = DbExtension ( context . system ) . db < nl > < nl > override protected def handleCommand : Receive = { < nl > @ @ - 56 , 7 + 61 , 9 @ @ private [ user ] final class UserContactsActor ( userId : Int ) extends Processor [ UserC < nl > < nl > override protected def handleQuery : QueryHandler = { < nl > case GetLocalName ( _ , contactUserId ) ⇒ < nl > - Future . successful ( GetLocalNameResponse ( state . localNames . get ( contactUserId ) ) ) < nl > + Future . successful ( GetLocalNameResponse ( state . localNames . get ( contactUserId ) ) ) andThen { < nl > + case Success ( _ ) ⇒ dialogExt . sendChatGroupsChanged ( userId ) < nl > + } < nl > } < nl > < nl > private def editLocalName ( contactUserId : Int , nameOpt : Option [ String ] , supressUpdate : Boolean ) : Unit = {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / dialog . proto b / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > index 549754f . . 1c70ec7 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > @ @ - 79 , 6 + 79 , 12 @ @ message DialogRootEvents { < nl > int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; < nl > Peer peer = 2 ; < nl > } < nl > + < nl > + message Initialized { < nl > + option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogRootEvent " ; < nl > + < nl > + int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; < nl > + } < nl > } < nl > < nl > message DialogRootCommands { < nl > @ @ - 340 , 4 + 346 , 8 @ @ message DialogEvents { < nl > message CounterReset { < nl > option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogEvent " ; < nl > } < nl > + < nl > + message Initialized { < nl > + option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogEvent " ; < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala < nl > index d4b028a . . 2d2b249 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala < nl > @ @ - 36 , 8 + 36 , 8 @ @ trait IncrementalSnapshots [ S < : ProcessorState [ S ] ] extends ProcessorStateControl < nl > < nl > val SnapshotCommitsThreshold = 100 < nl > < nl > - override protected def afterCommit ( ) : Unit = { < nl > - super . afterCommit ( ) < nl > + override protected def afterCommit ( e : Event ) : Unit = { < nl > + super . afterCommit ( e ) < nl > _ commitsNum + = 1 < nl > if ( _ commitsNum = = SnapshotCommitsThreshold ) { < nl > log . debug ( " Saving snapshot due to threshold hit " ) < nl > @ @ - 56 , 15 + 56 , 15 @ @ trait ProcessorStateControl [ S < : ProcessorState [ S ] ] { < nl > def setState ( state : S ) = this . _ state = state < nl > < nl > def commit ( e : Event ) : S = { < nl > - beforeCommit ( ) < nl > + beforeCommit ( e ) < nl > setState ( state . updated ( e ) ) < nl > - afterCommit ( ) < nl > + afterCommit ( e ) < nl > state < nl > } < nl > < nl > - protected def beforeCommit ( ) = { } < nl > + protected def beforeCommit ( e : Event ) = { } < nl > < nl > - protected def afterCommit ( ) = { } < nl > + protected def afterCommit ( e : Event ) = { } < nl > } < nl > < nl > object ProcessorStateProbe { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > index 6a0b95e . . bb01b2d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > @ @ - 92 , 10 + 92 , 11 @ @ private trait DialogRootQueryHandlers { < nl > } < nl > } < nl > < nl > - private class DialogRoot ( userId : Int , extensions : Seq [ ApiExtension ] ) < nl > + private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > extends Processor [ DialogRootState ] < nl > with IncrementalSnapshots [ DialogRootState ] < nl > - with DialogRootQueryHandlers { < nl > + with DialogRootQueryHandlers < nl > + with DialogRootMigration { < nl > import DialogRootEvents . _ < nl > import DialogRootQueries . _ < nl > import DialogRootCommands . _ < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > new file mode 100644 < nl > index 0000000 . . ca7ffd9 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > @ @ - 0 , 0 + 1 , 72 @ @ < nl > + package im . actor . server . dialog < nl > + < nl > + import java . time . Instant < nl > + < nl > + import akka . actor . Status < nl > + import akka . pattern . pipe < nl > + import im . actor . server . cqrs . { Event , Processor } < nl > + import im . actor . server . db . DbExtension < nl > + import im . actor . server . model . DialogObsolete < nl > + import im . actor . server . persist . dialog . DialogRepo < nl > + < nl > + private case class CreateEvents ( models : Seq [ DialogObsolete ] ) < nl > + < nl > + trait DialogRootMigration extends Processor [ DialogRootState ] { < nl > + < nl > + import DialogRootEvents . _ < nl > + import context . dispatcher < nl > + < nl > + val userId : Int < nl > + private val db = DbExtension ( context . system ) . db < nl > + private var needMigrate = true < nl > + < nl > + override def afterCommit ( e : Event ) : Unit = e match { < nl > + case Initialized ( _ ) ⇒ needMigrate = false < nl > + case _ ⇒ < nl > + } < nl > + < nl > + override protected def onRecoveryCompleted ( ) : Unit = { < nl > + super . onRecoveryCompleted ( ) < nl > + if ( needMigrate ) < nl > + migrate ( ) < nl > + } < nl > + < nl > + private def migrating : Receive = { < nl > + case CreateEvents ( models ) ⇒ < nl > + createEvents ( models ) { < nl > + context become receiveCommand < nl > + } < nl > + case Status . Failure ( e ) ⇒ < nl > + log . error ( e , " Failed to migrate " ) < nl > + throw e < nl > + case _ ⇒ stash ( ) < nl > + } < nl > + < nl > + private def migrate ( ) : Unit = { < nl > + context . become ( migrating ) < nl > + < nl > + ( for { < nl > + models ← db . run ( DialogRepo . fetchDialogs ( userId ) ) < nl > + } yield CreateEvents ( models ) ) pipeTo self < nl > + } < nl > + < nl > + private def createEvents ( models : Seq [ DialogObsolete ] ) ( onComplete : ⇒ Unit ) : Unit = { < nl > + val created = models map { dialog ⇒ < nl > + Created ( Instant . ofEpochMilli ( dialog . createdAt . getMillis ) , Some ( dialog . peer ) ) < nl > + } < nl > + < nl > + val archived = models . view . filter ( _ . archivedAt . isDefined ) map { dialog ⇒ < nl > + Archived ( Instant . ofEpochMilli ( dialog . archivedAt . get . getMillis ) , Some ( dialog . peer ) ) < nl > + } < nl > + < nl > + var ts = Instant . now ( ) < nl > + val favourited = models . view . filter ( _ . isFavourite ) map { dialog ⇒ < nl > + ts = ts . plusMillis ( 1 ) < nl > + Favourited ( ts , Some ( dialog . peer ) ) < nl > + } < nl > + < nl > + persistAll ( Initialized ( Instant . now ( ) ) + : ( created + + archived + + favourited ) . toList ) { _ ⇒ < nl > + onComplete < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > index 58b76bc . . de032bc 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > @ @ - 49 , 7 + 49 , 7 @ @ private object DialogRootState { < nl > ) < nl > } < nl > < nl > - private final case class DialogRootState ( < nl > + private [ dialog ] final case class DialogRootState ( < nl > active : Map [ DialogGroupType , SortedSet [ SortableDialog ] ] , < nl > activePeers : SortedSet [ SortableDialog ] , < nl > archived : SortedSet [ SortableDialog ] < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala < nl > index dfd8365 . . 00247f7 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala < nl > @ @ - 4 , 10 + 4 , 13 @ @ import com . github . tototoshi . slick . PostgresJodaSupport . _ < nl > import im . actor . server . db . ActorPostgresDriver . api . _ < nl > import im . actor . server . model . _ < nl > import org . joda . time . DateTime < nl > + import slick . dbio . DBIOAction < nl > + import slick . dbio . Effect . Read < nl > import slick . lifted . ColumnOrdered < nl > + import slick . profile . FixedSqlStreamingAction < nl > < nl > import scala . concurrent . ExecutionContext < nl > - import scala . util . { Success , Failure } < nl > + import scala . util . { Failure , Success } < nl > < nl > final class DialogCommonTable ( tag : Tag ) extends Table [ DialogCommon ] ( tag , " dialog _ commons " ) { < nl > < nl > @ @ - 115 , 6 + 118 , 8 @ @ object DialogRepo extends UserDialogOperations with DialogCommonOperations { < nl > < nl > private val byPKC = Compiled ( byPKSimple _ ) < nl > < nl > + private val byUserC = Compiled ( byUserId _ ) < nl > + < nl > private val archived = DialogRepo . dialogs . filter ( _ . _ 2 . archivedAt . isDefined ) < nl > < nl > private val notArchived = DialogRepo . dialogs . filter ( _ . _ 2 . archivedAt . isEmpty ) < nl > @ @ - 134 , 6 + 139 , 12 @ @ object DialogRepo extends UserDialogOperations with DialogCommonOperations { < nl > private def byPKSimple ( userId : Rep [ Int ] , peerType : Rep [ Int ] , peerId : Rep [ Int ] ) = < nl > dialogs . filter ( { case ( _ , u ) ⇒ u . userId = = = userId & & u . peerType = = = peerType & & u . peerId = = = peerId } ) < nl > < nl > + private def byUserId ( userId : Rep [ Int ] ) = < nl > + dialogs . filter ( { case ( _ , u ) ⇒ u . userId = = = userId } ) < nl > + < nl > def findDialog ( userId : Int , peer : Peer ) ( implicit ec : ExecutionContext ) : DBIO [ Option [ DialogObsolete ] ] = < nl > byPKC ( ( userId , peer . typ . value , peer . id ) ) . result . headOption map ( _ . map { case ( c , u ) ⇒ DialogObsolete . fromCommonAndUser ( c , u ) } ) < nl > + < nl > + def fetchDialogs ( userId : Int ) ( implicit ec : ExecutionContext ) : DBIO [ Seq [ DialogObsolete ] ] = < nl > + byUserId ( userId ) . result map ( _ . map { case ( c , u ) ⇒ DialogObsolete . fromCommonAndUser ( c , u ) } ) < nl > } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / dialog . proto b / actor - server / actor - core / src / main / protobuf / dialog . proto 
 index a6b122f . . bccf85d 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / dialog . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / dialog . proto 
 @ @ - 122 , 6 + 122 , 10 @ @ message DialogRootCommands { 
 
 Peer dest = 1 ; 
 } 
 + 
 + message SendChatGroupsChanged { 
 + option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogRootCommand " ; 
 + } 
 } 
 
 message DialogRootQueries { 
 @ @ - 187 , 6 + 191 , 7 @ @ message DialogRootEnvelope { 
 DialogRootCommands . Favourite favourite = 7 ; 
 DialogRootCommands . Unfavourite unfavourite = 8 ; 
 DialogRootCommands . Delete delete = 9 ; 
 + DialogRootCommands . SendChatGroupsChanged send _ chat _ groups _ changed = 12 ; 
 } 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 index c091d83 . . 33457e8 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 @ @ - 181 , 6 + 181 , 11 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit 
 . mapTo [ SeqState ] 
 } 
 
 + def sendChatGroupsChanged ( userId : Int ) : Future [ SeqState ] = 
 + ( userExt . processorRegion . ref ? 
 + UserEnvelope ( userId ) . withDialogRootEnvelope ( DialogRootEnvelope ( ) . withSendChatGroupsChanged ( DialogRootCommands . SendChatGroupsChanged ( ) ) ) ) 
 + . mapTo [ SeqState ] 
 + 
 def setReaction ( userId : Int , authSid : Int , peer : Peer , randomId : Long , code : String ) : Future [ SetReactionAck ] = 
 withValidPeer ( peer , userId ) { 
 ( userExt . processorRegion . ref ? UserEnvelope ( userId ) . withDialogEnvelope ( DialogEnvelope ( ) . withSetReaction ( SetReaction ( 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 index 5d4e650 . . f11648d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 @ @ - 144 , 7 + 144 , 7 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 handleDialogCommand ( dc ) 
 
 if ( ! isCreated | | ! isShown ) 
 - sendChatGroupsChanged ( ) 
 + deliverChatGroupsChanged ( ) 
 } 
 case None ⇒ 
 handleDialogCommand ( dc ) 
 @ @ - 153 , 6 + 153 , 7 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 case Unarchive ( Some ( peer ) , clientAuthSid ) ⇒ unarchive ( peer , clientAuthSid map ( _ . value ) ) 
 case Favourite ( Some ( peer ) , clientAuthSid ) ⇒ favourite ( peer , clientAuthSid map ( _ . value ) ) 
 case Unfavourite ( Some ( peer ) , clientAuthSid ) ⇒ unfavourite ( peer , clientAuthSid map ( _ . value ) ) 
 + case SendChatGroupsChanged ( ) ⇒ sendChatGroupsChanged ( ) 
 case dc : DialogCommand ⇒ handleDialogCommand ( dc ) 
 case dq : DialogQuery ⇒ handleDialogQuery ( dq ) 
 } 
 @ @ - 167 , 34 + 168 , 34 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 } 
 
 private def archive ( peer : Peer , clientAuthSid : Option [ Int ] ) = { 
 - if ( isArchived ( peer ) ) sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) 
 + if ( isArchived ( peer ) ) deliverChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) 
 else persist ( Archived ( Instant . now ( ) , Some ( peer ) ) ) { e ⇒ 
 commit ( e ) 
 - sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) 
 + deliverChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) 
 } 
 } 
 
 private def unarchive ( peer : Peer , clientAuthSid : Option [ Int ] ) = { 
 - if ( ! isArchived ( peer ) ) sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) 
 + if ( ! isArchived ( peer ) ) deliverChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) 
 else persist ( Unarchived ( Instant . now ( ) , Some ( peer ) ) ) { e ⇒ 
 commit ( e ) 
 - sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) 
 + deliverChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) 
 } 
 } 
 
 private def favourite ( peer : Peer , clientAuthSid : Option [ Int ] ) = { 
 - if ( isFavourited ( peer ) ) sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) 
 + if ( isFavourited ( peer ) ) deliverChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) 
 else persist ( Favourited ( Instant . now ( ) , Some ( peer ) ) ) { e ⇒ 
 commit ( e ) 
 - sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) 
 + deliverChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) 
 } 
 } 
 
 private def unfavourite ( peer : Peer , clientAuthSid : Option [ Int ] ) = { 
 - if ( ! isFavourited ( peer ) ) sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) 
 + if ( ! isFavourited ( peer ) ) deliverChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) 
 else persist ( Unfavourited ( Instant . now ( ) , Some ( peer ) ) ) { e ⇒ 
 commit ( e ) 
 - sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) 
 + deliverChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) 
 } 
 } 
 
 @ @ - 213 , 6 + 214 , 8 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 } 
 } 
 
 + private def sendChatGroupsChanged ( ) = deliverChatGroupsChanged ( ) pipeTo sender ( ) 
 + 
 private def isArchived ( peer : Peer ) : Boolean = state . archived . exists ( _ . peer = = peer ) 
 
 private def isFavourited ( peer : Peer ) : Boolean = state . active . favourites . exists ( _ . peer = = peer ) 
 @ @ - 256 , 7 + 259 , 7 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 } 
 } 
 
 - private def sendChatGroupsChanged ( ignoreAuthSid : Option [ Int ] = None ) : Future [ SeqState ] = { 
 + private def deliverChatGroupsChanged ( ignoreAuthSid : Option [ Int ] = None ) : Future [ SeqState ] = { 
 for { 
 groups ← DialogExtension ( context . system ) . fetchApiGroupedDialogs ( userId ) 
 update = UpdateChatGroupsChanged ( groups ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index eff32f7 . . 2cb6451 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 30 , 6 + 30 , 7 @ @ import org . joda . time . DateTime 
 import slick . driver . PostgresDriver . api . _ 
 
 import scala . concurrent . Future 
 + import scala . util . Success 
 
 private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupCommandHelpers with UserACL { 
 this : GroupProcessor ⇒ 
 @ @ - 307 , 7 + 308 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 val update = UpdateGroupTitleChanged ( groupId = groupId , userId = clientUserId , title = title , date = date . toEpochMilli , randomId = randomId ) 
 val serviceMessage = GroupServiceMessages . changedTitle ( title ) 
 
 - for { 
 + ( for { 
 _ ← db . run ( GroupRepo . updateTitle ( groupId , title , clientUserId , randomId , date ) ) 
 _ ← dialogExt . writeMessage ( 
 ApiPeer ( ApiPeerType . Group , groupId ) , 
 @ @ - 322 , 7 + 323 , 9 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 update , 
 PushRules ( ) . withData ( PushData ( ) . withText ( PushTexts . TitleChanged ) ) 
 ) 
 - } yield SeqStateDate ( seqstate . seq , seqstate . state , date . toEpochMilli ) 
 + } yield SeqStateDate ( seqstate . seq , seqstate . state , date . toEpochMilli ) ) andThen { 
 + case Success ( _ ) ⇒ group . members . map ( _ . _ 1 ) foreach ( dialogExt . sendChatGroupsChanged ( _ ) ) 
 + } 
 } 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 index 7d8f59b . . efe82d6 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 @ @ - 160 , 7 + 160 , 10 @ @ private [ user ] trait UserCommandHandlers { 
 relatedUserIds ← getRelations ( userId ) 
 ( seqstate , _ ) ← seqUpdatesExt . broadcastOwnSingleUpdate ( userId , relatedUserIds , update ) 
 _ ← db . run ( UserRepo . setName ( userId , name ) ) 
 - } yield seqstate 
 + } yield { 
 + relatedUserIds foreach ( dialogExt . sendChatGroupsChanged ( _ ) ) 
 + seqstate 
 + } 
 } 
 } else { 
 replyTo ! Status . Failure ( UserErrors . InvalidName ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserContacts . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserContacts . scala 
 index 431c5e6 . . fc2ea73 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserContacts . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserContacts . scala 
 @ @ - 9 , 11 + 9 , 13 @ @ import akka . util . Timeout 
 import im . actor . api . rpc . users . UpdateUserLocalNameChanged 
 import im . actor . server . cqrs . { Event , Processor , ProcessorState } 
 import im . actor . server . db . DbExtension 
 + import im . actor . server . dialog . DialogExtension 
 import im . actor . server . persist . contact . UserContactRepo 
 import im . actor . server . sequence . SeqState 
 import im . actor . server . user . UserCommands . EditLocalName 
 
 import scala . concurrent . Future 
 + import scala . util . Success 
 
 private final case class UserContactsState ( localNames : Map [ Int , String ] = Map . empty ) extends ProcessorState [ UserContactsState ] { 
 import UserEvents . _ 
 @ @ - 42 , 11 + 44 , 14 @ @ private [ user ] final class UserContactsActor ( userId : Int ) extends Processor [ UserC 
 import UserQueries . _ 
 import UserEvents . _ 
 
 + import context . dispatcher 
 + 
 override def persistenceId : String = s " User _ $ { userId } _ Contacts " 
 
 override def getInitialState : UserContactsState = UserContactsState ( ) 
 
 private val userExt = UserExtension ( context . system ) 
 + private val dialogExt = DialogExtension ( context . system ) 
 private val db = DbExtension ( context . system ) . db 
 
 override protected def handleCommand : Receive = { 
 @ @ - 56 , 7 + 61 , 9 @ @ private [ user ] final class UserContactsActor ( userId : Int ) extends Processor [ UserC 
 
 override protected def handleQuery : QueryHandler = { 
 case GetLocalName ( _ , contactUserId ) ⇒ 
 - Future . successful ( GetLocalNameResponse ( state . localNames . get ( contactUserId ) ) ) 
 + Future . successful ( GetLocalNameResponse ( state . localNames . get ( contactUserId ) ) ) andThen { 
 + case Success ( _ ) ⇒ dialogExt . sendChatGroupsChanged ( userId ) 
 + } 
 } 
 
 private def editLocalName ( contactUserId : Int , nameOpt : Option [ String ] , supressUpdate : Boolean ) : Unit = {

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / dialog . proto b / actor - server / actor - core / src / main / protobuf / dialog . proto 
 index 549754f . . 1c70ec7 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / dialog . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / dialog . proto 
 @ @ - 79 , 6 + 79 , 12 @ @ message DialogRootEvents { 
 int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; 
 Peer peer = 2 ; 
 } 
 + 
 + message Initialized { 
 + option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogRootEvent " ; 
 + 
 + int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; 
 + } 
 } 
 
 message DialogRootCommands { 
 @ @ - 340 , 4 + 346 , 8 @ @ message DialogEvents { 
 message CounterReset { 
 option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogEvent " ; 
 } 
 + 
 + message Initialized { 
 + option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogEvent " ; 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala 
 index d4b028a . . 2d2b249 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala 
 @ @ - 36 , 8 + 36 , 8 @ @ trait IncrementalSnapshots [ S < : ProcessorState [ S ] ] extends ProcessorStateControl 
 
 val SnapshotCommitsThreshold = 100 
 
 - override protected def afterCommit ( ) : Unit = { 
 - super . afterCommit ( ) 
 + override protected def afterCommit ( e : Event ) : Unit = { 
 + super . afterCommit ( e ) 
 _ commitsNum + = 1 
 if ( _ commitsNum = = SnapshotCommitsThreshold ) { 
 log . debug ( " Saving snapshot due to threshold hit " ) 
 @ @ - 56 , 15 + 56 , 15 @ @ trait ProcessorStateControl [ S < : ProcessorState [ S ] ] { 
 def setState ( state : S ) = this . _ state = state 
 
 def commit ( e : Event ) : S = { 
 - beforeCommit ( ) 
 + beforeCommit ( e ) 
 setState ( state . updated ( e ) ) 
 - afterCommit ( ) 
 + afterCommit ( e ) 
 state 
 } 
 
 - protected def beforeCommit ( ) = { } 
 + protected def beforeCommit ( e : Event ) = { } 
 
 - protected def afterCommit ( ) = { } 
 + protected def afterCommit ( e : Event ) = { } 
 } 
 
 object ProcessorStateProbe { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 index 6a0b95e . . bb01b2d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 @ @ - 92 , 10 + 92 , 11 @ @ private trait DialogRootQueryHandlers { 
 } 
 } 
 
 - private class DialogRoot ( userId : Int , extensions : Seq [ ApiExtension ] ) 
 + private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 extends Processor [ DialogRootState ] 
 with IncrementalSnapshots [ DialogRootState ] 
 - with DialogRootQueryHandlers { 
 + with DialogRootQueryHandlers 
 + with DialogRootMigration { 
 import DialogRootEvents . _ 
 import DialogRootQueries . _ 
 import DialogRootCommands . _ 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 new file mode 100644 
 index 0000000 . . ca7ffd9 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 @ @ - 0 , 0 + 1 , 72 @ @ 
 + package im . actor . server . dialog 
 + 
 + import java . time . Instant 
 + 
 + import akka . actor . Status 
 + import akka . pattern . pipe 
 + import im . actor . server . cqrs . { Event , Processor } 
 + import im . actor . server . db . DbExtension 
 + import im . actor . server . model . DialogObsolete 
 + import im . actor . server . persist . dialog . DialogRepo 
 + 
 + private case class CreateEvents ( models : Seq [ DialogObsolete ] ) 
 + 
 + trait DialogRootMigration extends Processor [ DialogRootState ] { 
 + 
 + import DialogRootEvents . _ 
 + import context . dispatcher 
 + 
 + val userId : Int 
 + private val db = DbExtension ( context . system ) . db 
 + private var needMigrate = true 
 + 
 + override def afterCommit ( e : Event ) : Unit = e match { 
 + case Initialized ( _ ) ⇒ needMigrate = false 
 + case _ ⇒ 
 + } 
 + 
 + override protected def onRecoveryCompleted ( ) : Unit = { 
 + super . onRecoveryCompleted ( ) 
 + if ( needMigrate ) 
 + migrate ( ) 
 + } 
 + 
 + private def migrating : Receive = { 
 + case CreateEvents ( models ) ⇒ 
 + createEvents ( models ) { 
 + context become receiveCommand 
 + } 
 + case Status . Failure ( e ) ⇒ 
 + log . error ( e , " Failed to migrate " ) 
 + throw e 
 + case _ ⇒ stash ( ) 
 + } 
 + 
 + private def migrate ( ) : Unit = { 
 + context . become ( migrating ) 
 + 
 + ( for { 
 + models ← db . run ( DialogRepo . fetchDialogs ( userId ) ) 
 + } yield CreateEvents ( models ) ) pipeTo self 
 + } 
 + 
 + private def createEvents ( models : Seq [ DialogObsolete ] ) ( onComplete : ⇒ Unit ) : Unit = { 
 + val created = models map { dialog ⇒ 
 + Created ( Instant . ofEpochMilli ( dialog . createdAt . getMillis ) , Some ( dialog . peer ) ) 
 + } 
 + 
 + val archived = models . view . filter ( _ . archivedAt . isDefined ) map { dialog ⇒ 
 + Archived ( Instant . ofEpochMilli ( dialog . archivedAt . get . getMillis ) , Some ( dialog . peer ) ) 
 + } 
 + 
 + var ts = Instant . now ( ) 
 + val favourited = models . view . filter ( _ . isFavourite ) map { dialog ⇒ 
 + ts = ts . plusMillis ( 1 ) 
 + Favourited ( ts , Some ( dialog . peer ) ) 
 + } 
 + 
 + persistAll ( Initialized ( Instant . now ( ) ) + : ( created + + archived + + favourited ) . toList ) { _ ⇒ 
 + onComplete 
 + } 
 + } 
 + } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 index 58b76bc . . de032bc 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 @ @ - 49 , 7 + 49 , 7 @ @ private object DialogRootState { 
 ) 
 } 
 
 - private final case class DialogRootState ( 
 + private [ dialog ] final case class DialogRootState ( 
 active : Map [ DialogGroupType , SortedSet [ SortableDialog ] ] , 
 activePeers : SortedSet [ SortableDialog ] , 
 archived : SortedSet [ SortableDialog ] 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala 
 index dfd8365 . . 00247f7 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala 
 @ @ - 4 , 10 + 4 , 13 @ @ import com . github . tototoshi . slick . PostgresJodaSupport . _ 
 import im . actor . server . db . ActorPostgresDriver . api . _ 
 import im . actor . server . model . _ 
 import org . joda . time . DateTime 
 + import slick . dbio . DBIOAction 
 + import slick . dbio . Effect . Read 
 import slick . lifted . ColumnOrdered 
 + import slick . profile . FixedSqlStreamingAction 
 
 import scala . concurrent . ExecutionContext 
 - import scala . util . { Success , Failure } 
 + import scala . util . { Failure , Success } 
 
 final class DialogCommonTable ( tag : Tag ) extends Table [ DialogCommon ] ( tag , " dialog _ commons " ) { 
 
 @ @ - 115 , 6 + 118 , 8 @ @ object DialogRepo extends UserDialogOperations with DialogCommonOperations { 
 
 private val byPKC = Compiled ( byPKSimple _ ) 
 
 + private val byUserC = Compiled ( byUserId _ ) 
 + 
 private val archived = DialogRepo . dialogs . filter ( _ . _ 2 . archivedAt . isDefined ) 
 
 private val notArchived = DialogRepo . dialogs . filter ( _ . _ 2 . archivedAt . isEmpty ) 
 @ @ - 134 , 6 + 139 , 12 @ @ object DialogRepo extends UserDialogOperations with DialogCommonOperations { 
 private def byPKSimple ( userId : Rep [ Int ] , peerType : Rep [ Int ] , peerId : Rep [ Int ] ) = 
 dialogs . filter ( { case ( _ , u ) ⇒ u . userId = = = userId & & u . peerType = = = peerType & & u . peerId = = = peerId } ) 
 
 + private def byUserId ( userId : Rep [ Int ] ) = 
 + dialogs . filter ( { case ( _ , u ) ⇒ u . userId = = = userId } ) 
 + 
 def findDialog ( userId : Int , peer : Peer ) ( implicit ec : ExecutionContext ) : DBIO [ Option [ DialogObsolete ] ] = 
 byPKC ( ( userId , peer . typ . value , peer . id ) ) . result . headOption map ( _ . map { case ( c , u ) ⇒ DialogObsolete . fromCommonAndUser ( c , u ) } ) 
 + 
 + def fetchDialogs ( userId : Int ) ( implicit ec : ExecutionContext ) : DBIO [ Seq [ DialogObsolete ] ] = 
 + byUserId ( userId ) . result map ( _ . map { case ( c , u ) ⇒ DialogObsolete . fromCommonAndUser ( c , u ) } ) 
 } 
 \ No newline at end of file
