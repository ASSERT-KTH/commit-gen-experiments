BLEU SCORE: 0.1354599427337814

TEST MSG: refactor ( server : session ) : move resender debug to enqueue
GENERATED MSG: feat ( session ) : log acks

TEST DIFF (one line): diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > index bdf6a40 . . c7a7b95 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > @ @ - 281 , 7 + 281 , 6 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long , firstMessageId : L < nl > } < nl > < nl > @ tailrec final def deliverBuf ( ) : Unit = { < nl > - log . debug ( " Delivering buf , queue size : { } , bufferSize : { } , pushBufferSize : { } " , mbQueue . size , resendBufferSize , resendPushBufferSize ) < nl > if ( isActive & & totalDemand > 0 & & mbQueue . nonEmpty ) < nl > mbQueue . dequeue ( ) match { < nl > case ( mb , _ ) ⇒ < nl > @ @ - 402 , 6 + 401 , 8 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long , firstMessageId : L < nl > } < nl > < nl > private def enqueue ( mb : MessageBox , priority : Priority ) : Unit = { < nl > + log . debug ( " Queue size : { } , bufferSize : { } , pushBufferSize : { } " , mbQueue . size , resendBufferSize , resendPushBufferSize ) < nl > + < nl > if ( isActive & & totalDemand > 0 & & mbQueue . isEmpty ) { < nl > onNext ( mb ) < nl > } else {
NEAREST DIFF (one line): diff - - git a / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > index 253b2da . . 0f7c6eb 100644 < nl > - - - a / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > + + + b / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > @ @ - 15 , 6 + 15 , 8 @ @ import im . actor . server . mtproto . codecs . protocol . MessageBoxCodec < nl > import im . actor . server . mtproto . protocol . _ < nl > import im . actor . server . mtproto . transport . MTPackage < nl > < nl > + import scala . util . control . NoStackTrace < nl > + < nl > sealed trait ReSenderMessage < nl > < nl > object ReSenderMessage { < nl > @ @ - 87 , 6 + 89 , 7 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : < nl > resendBuffer . get ( messageId ) foreach { < nl > case ( message , scheduledResend ) ⇒ < nl > resendBufferSize - = message . bodySize < nl > + log . debug ( " Received Ack { } , cancelling resend " , messageId ) < nl > scheduledResend . cancel ( ) < nl > } < nl > } < nl > @ @ - 164 , 7 + 167 , 7 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : < nl > } else { < nl > val msg = " Completing stream due to maximum buffer size reached " < nl > log . warning ( msg ) < nl > - onErrorThenStop ( new Exception ( msg ) ) < nl > + onErrorThenStop ( new Exception ( msg ) with NoStackTrace ) < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 index bdf6a40 . . c7a7b95 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 @ @ - 281 , 7 + 281 , 6 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long , firstMessageId : L 
 } 
 
 @ tailrec final def deliverBuf ( ) : Unit = { 
 - log . debug ( " Delivering buf , queue size : { } , bufferSize : { } , pushBufferSize : { } " , mbQueue . size , resendBufferSize , resendPushBufferSize ) 
 if ( isActive & & totalDemand > 0 & & mbQueue . nonEmpty ) 
 mbQueue . dequeue ( ) match { 
 case ( mb , _ ) ⇒ 
 @ @ - 402 , 6 + 401 , 8 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long , firstMessageId : L 
 } 
 
 private def enqueue ( mb : MessageBox , priority : Priority ) : Unit = { 
 + log . debug ( " Queue size : { } , bufferSize : { } , pushBufferSize : { } " , mbQueue . size , resendBufferSize , resendPushBufferSize ) 
 + 
 if ( isActive & & totalDemand > 0 & & mbQueue . isEmpty ) { 
 onNext ( mb ) 
 } else {

NEAREST DIFF:
diff - - git a / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 index 253b2da . . 0f7c6eb 100644 
 - - - a / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 + + + b / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 @ @ - 15 , 6 + 15 , 8 @ @ import im . actor . server . mtproto . codecs . protocol . MessageBoxCodec 
 import im . actor . server . mtproto . protocol . _ 
 import im . actor . server . mtproto . transport . MTPackage 
 
 + import scala . util . control . NoStackTrace 
 + 
 sealed trait ReSenderMessage 
 
 object ReSenderMessage { 
 @ @ - 87 , 6 + 89 , 7 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : 
 resendBuffer . get ( messageId ) foreach { 
 case ( message , scheduledResend ) ⇒ 
 resendBufferSize - = message . bodySize 
 + log . debug ( " Received Ack { } , cancelling resend " , messageId ) 
 scheduledResend . cancel ( ) 
 } 
 } 
 @ @ - 164 , 7 + 167 , 7 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : 
 } else { 
 val msg = " Completing stream due to maximum buffer size reached " 
 log . warning ( msg ) 
 - onErrorThenStop ( new Exception ( msg ) ) 
 + onErrorThenStop ( new Exception ( msg ) with NoStackTrace ) 
 } 
 }
