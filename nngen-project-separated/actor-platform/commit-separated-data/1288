BLEU SCORE: 0.08392229812593097

TEST MSG: Rename getting - started . md to README . md
GENERATED MSG: Create encoding . md

TEST DIFF (one line): diff - - git a / docs / protocol / README . md b / docs / protocol / README . md < nl > new file mode 100644 < nl > index 0000000 . . 8ded8d7 < nl > - - - / dev / null < nl > + + + b / docs / protocol / README . md < nl > @ @ - 0 , 0 + 1 , 11 @ @ < nl > + MTProto V2 is binary protocol that is optimized for mobile networks . MTProto V2 doesn ' t contain any kind of encryption and securing data is implemented by encapsulating of MTProto V2 in TLS . < nl > + < nl > + Main goal of MTProto V2 is providing fast and reliable communication with server . MTProto V2 is not compatable with protobuf and doesn ' t contain any API definitions . For learning more about API read another page . < nl > + < nl > + MTProto V2 now have two revisions : rev 1 and rev 2 . They are incompatible and rev 1 currently not in production . This document is about rev 2 . < nl > + < nl > + MTProto V2 consist of some layers : < nl > + * [ Encoding ] ( encoding . md ) < nl > + * [ Connection Level ] ( level - connection . md ) < nl > + * [ Transport Level ] ( level - transport . md ) < nl > + * [ Basic Sync Level ] ( level - basic - sync . md ) < nl > diff - - git a / docs / protocol / getting - started . md b / docs / protocol / getting - started . md < nl > deleted file mode 100644 < nl > index 8ded8d7 . . 0000000 < nl > - - - a / docs / protocol / getting - started . md < nl > + + + / dev / null < nl > @ @ - 1 , 11 + 0 , 0 @ @ < nl > - MTProto V2 is binary protocol that is optimized for mobile networks . MTProto V2 doesn ' t contain any kind of encryption and securing data is implemented by encapsulating of MTProto V2 in TLS . < nl > - < nl > - Main goal of MTProto V2 is providing fast and reliable communication with server . MTProto V2 is not compatable with protobuf and doesn ' t contain any API definitions . For learning more about API read another page . < nl > - < nl > - MTProto V2 now have two revisions : rev 1 and rev 2 . They are incompatible and rev 1 currently not in production . This document is about rev 2 . < nl > - < nl > - MTProto V2 consist of some layers : < nl > - * [ Encoding ] ( encoding . md ) < nl > - * [ Connection Level ] ( level - connection . md ) < nl > - * [ Transport Level ] ( level - transport . md ) < nl > - * [ Basic Sync Level ] ( level - basic - sync . md )
NEAREST DIFF (one line): diff - - git a / docs / protocol / encoding . md b / docs / protocol / encoding . md < nl > new file mode 100644 < nl > index 0000000 . . ea5ea00 < nl > - - - / dev / null < nl > + + + b / docs / protocol / encoding . md < nl > @ @ - 0 , 0 + 1 , 46 @ @ < nl > + # Encoding < nl > + < nl > + Type encoding actually is taken from protobuf , but we describe it in details . Protocol encoding has this serialization primitives : < nl > + < nl > + ` ` varint ` ` - unsigned integer < nl > + < nl > + Each byte in a varint , except the last byte , has the most significant bit ( msb ) set – this indicates that there are further bytes to come . The lower 7 bits of each byte are used to store the two ' s complement representation of the number in groups of 7 bits , least significant group first . < nl > + < nl > + ` ` int ` ` - signed 32bit integer < nl > + < nl > + int value is encoded as 4 - byte big endian signed integer < nl > + < nl > + ` ` long ` ` - signed 64bit intenger < nl > + < nl > + long value is encoded as 8 - byte big endian signed integer < nl > + < nl > + ` ` byte ` ` - unsigned byte < nl > + < nl > + byte value is encoded as single big endian byte < nl > + < nl > + ` ` bytes ` ` - byte array < nl > + < nl > + bytes is encoded as varint of bytes length and raw bytes < nl > + < nl > + ` ` longs ` ` - long array < nl > + < nl > + bytes is encoded as varint of longs length and then raw long values < nl > + < nl > + ` ` string ` ` - byte array that contains UTF - 8 text < nl > + < nl > + string is encoded in the same way as bytes < nl > + < nl > + # # # Structure < nl > + < nl > + ` ` ` < nl > + < struct _ name > { < nl > + HEADER = < header _ id > ; / / optional < nl > + < arg1 > : < argType1 > < nl > + < arg3 > : < argType2 > < nl > + . . . . < nl > + < argN > : < argTypeN > < nl > + } < nl > + ` ` ` < nl > + < nl > + If structure contains HEADER than serialize HEADER value as single unsigned byte . < nl > + After HEADER scrutrure parameters is encoded in order from structure descr

TEST DIFF:
diff - - git a / docs / protocol / README . md b / docs / protocol / README . md 
 new file mode 100644 
 index 0000000 . . 8ded8d7 
 - - - / dev / null 
 + + + b / docs / protocol / README . md 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + MTProto V2 is binary protocol that is optimized for mobile networks . MTProto V2 doesn ' t contain any kind of encryption and securing data is implemented by encapsulating of MTProto V2 in TLS . 
 + 
 + Main goal of MTProto V2 is providing fast and reliable communication with server . MTProto V2 is not compatable with protobuf and doesn ' t contain any API definitions . For learning more about API read another page . 
 + 
 + MTProto V2 now have two revisions : rev 1 and rev 2 . They are incompatible and rev 1 currently not in production . This document is about rev 2 . 
 + 
 + MTProto V2 consist of some layers : 
 + * [ Encoding ] ( encoding . md ) 
 + * [ Connection Level ] ( level - connection . md ) 
 + * [ Transport Level ] ( level - transport . md ) 
 + * [ Basic Sync Level ] ( level - basic - sync . md ) 
 diff - - git a / docs / protocol / getting - started . md b / docs / protocol / getting - started . md 
 deleted file mode 100644 
 index 8ded8d7 . . 0000000 
 - - - a / docs / protocol / getting - started . md 
 + + + / dev / null 
 @ @ - 1 , 11 + 0 , 0 @ @ 
 - MTProto V2 is binary protocol that is optimized for mobile networks . MTProto V2 doesn ' t contain any kind of encryption and securing data is implemented by encapsulating of MTProto V2 in TLS . 
 - 
 - Main goal of MTProto V2 is providing fast and reliable communication with server . MTProto V2 is not compatable with protobuf and doesn ' t contain any API definitions . For learning more about API read another page . 
 - 
 - MTProto V2 now have two revisions : rev 1 and rev 2 . They are incompatible and rev 1 currently not in production . This document is about rev 2 . 
 - 
 - MTProto V2 consist of some layers : 
 - * [ Encoding ] ( encoding . md ) 
 - * [ Connection Level ] ( level - connection . md ) 
 - * [ Transport Level ] ( level - transport . md ) 
 - * [ Basic Sync Level ] ( level - basic - sync . md )

NEAREST DIFF:
diff - - git a / docs / protocol / encoding . md b / docs / protocol / encoding . md 
 new file mode 100644 
 index 0000000 . . ea5ea00 
 - - - / dev / null 
 + + + b / docs / protocol / encoding . md 
 @ @ - 0 , 0 + 1 , 46 @ @ 
 + # Encoding 
 + 
 + Type encoding actually is taken from protobuf , but we describe it in details . Protocol encoding has this serialization primitives : 
 + 
 + ` ` varint ` ` - unsigned integer 
 + 
 + Each byte in a varint , except the last byte , has the most significant bit ( msb ) set – this indicates that there are further bytes to come . The lower 7 bits of each byte are used to store the two ' s complement representation of the number in groups of 7 bits , least significant group first . 
 + 
 + ` ` int ` ` - signed 32bit integer 
 + 
 + int value is encoded as 4 - byte big endian signed integer 
 + 
 + ` ` long ` ` - signed 64bit intenger 
 + 
 + long value is encoded as 8 - byte big endian signed integer 
 + 
 + ` ` byte ` ` - unsigned byte 
 + 
 + byte value is encoded as single big endian byte 
 + 
 + ` ` bytes ` ` - byte array 
 + 
 + bytes is encoded as varint of bytes length and raw bytes 
 + 
 + ` ` longs ` ` - long array 
 + 
 + bytes is encoded as varint of longs length and then raw long values 
 + 
 + ` ` string ` ` - byte array that contains UTF - 8 text 
 + 
 + string is encoded in the same way as bytes 
 + 
 + # # # Structure 
 + 
 + ` ` ` 
 + < struct _ name > { 
 + HEADER = < header _ id > ; / / optional 
 + < arg1 > : < argType1 > 
 + < arg3 > : < argType2 > 
 + . . . . 
 + < argN > : < argTypeN > 
 + } 
 + ` ` ` 
 + 
 + If structure contains HEADER than serialize HEADER value as single unsigned byte . 
 + After HEADER scrutrure parameters is encoded in order from structure descr
