BLEU SCORE: 0.057259987315337754

TEST MSG: chore ( server ) : upgrade akka 2 . 4 . 4 - > 2 . 4 . 5
GENERATED MSG: fix ( server : files ) : more security and bug fixes

TEST DIFF (one line): diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileUtils . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileUtils . scala < nl > index 8bb14ce . . ff05b7d 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileUtils . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileUtils . scala < nl > @ @ - 49 , 7 + 49 , 7 @ @ object FileUtils { < nl > def writeBytes ( bytes : ByteString ) ( implicit system : ActorSystem , materializer : Materializer , ec : ExecutionContext ) : Future [ ( Path , Long ) ] = { < nl > for { < nl > file ← createTempFile < nl > - ioRes ← Source . single ( bytes ) . runWith ( FileIO . toFile ( file . toFile ) ) < nl > + ioRes ← Source . single ( bytes ) . runWith ( FileIO . toPath ( file ) ) < nl > } yield { < nl > ioRes . status match { < nl > case Success ( _ ) ⇒ ( file , ioRes . count ) < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > index 8d68406 . . 61df1e7 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > @ @ - 33 , 7 + 33 , 7 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { < nl > dir ← getOrCreateFileDir ( fileId ) < nl > file = dir / name < nl > _ ← Future { blocking { file . createIfNotExists ( ) } } < nl > - ioRes ← Source ( List ( ByteString ( data ) ) ) . runWith ( FileIO . toFile ( file . toJava ) ) < nl > + ioRes ← Source ( List ( ByteString ( data ) ) ) . runWith ( FileIO . toPath ( file . path ) ) < nl > } yield ioRes . status match { < nl > case Success ( _ ) ⇒ ( ) < nl > case Failure ( cause ) ⇒ throw cause < nl > @ @ - 114 , 7 + 114 , 7 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { < nl > } < nl > < nl > protected def getFileData ( file : File ) : Future [ ByteString ] = < nl > - FileIO . fromFile ( file . toJava ) . runFold ( ByteString . empty ) ( _ + + _ ) < nl > + FileIO . fromPath ( file . path ) . runFold ( ByteString . empty ) ( _ + + _ ) < nl > < nl > protected def getFileName ( name : String ) = if ( name . trim . isEmpty ) " file " else name < nl > < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala < nl > index d1a792e . . 9a9a702 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala < nl > @ @ - 82 , 9 + 82 , 9 @ @ final class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { < nl > private def downloadFile ( bucketName : String , id : Long , name : String ) = { < nl > for { < nl > dirFile ← DBIO . from ( FileUtils . createTempDir ( ) ) < nl > - file = dirFile . toPath . resolve ( " file " ) . toFile < nl > - _ ← DBIO . from ( FutureTransfer . listenFor ( transferManager . download ( bucketName , s3Key ( id , name ) , file ) ) map ( _ . waitForCompletion ( ) ) ) < nl > - data ← DBIO . from ( FileIO . fromFile ( file ) . runFold ( ByteString . empty ) ( _ + + _ ) ) < nl > + path = dirFile . toPath . resolve ( " file " ) < nl > + _ ← DBIO . from ( FutureTransfer . listenFor ( transferManager . download ( bucketName , s3Key ( id , name ) , path . toFile ) ) map ( _ . waitForCompletion ( ) ) ) < nl > + data ← DBIO . from ( FileIO . fromPath ( path ) . runFold ( ByteString . empty ) ( _ + + _ ) ) < nl > } yield data . toArray < nl > } < nl > < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / util / http / DownloadManager . scala b / actor - server / actor - runtime / src / main / scala / im / actor / util / http / DownloadManager . scala < nl > index 91ec168 . . b038d28 100644 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / util / http / DownloadManager . scala < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / util / http / DownloadManager . scala < nl > @ @ - 25 , 7 + 25 , 7 @ @ class DownloadManager ( implicit system : ActorSystem , materializer : Materializer ) < nl > for { < nl > filePath ← tempFileFuture < nl > response ← responseFuture < nl > - ioRes ← response . entity . dataBytes . runWith ( FileIO . toFile ( filePath . toFile ) ) < nl > + ioRes ← response . entity . dataBytes . runWith ( FileIO . toPath ( filePath ) ) < nl > } yield { < nl > ioRes . status match { < nl > case Success ( _ ) ⇒ ( filePath , ioRes . count ) < nl > diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala < nl > index 60b15d0 . . 9cabcd0 100644 < nl > - - - a / actor - server / project / Dependencies . scala < nl > + + + b / actor - server / project / Dependencies . scala < nl > @ @ - 6 , 7 + 6 , 7 @ @ object Dependencies { < nl > object V { < nl > val actorCommons = " 0 . 0 . 15 " < nl > val actorBotkit = " 1 . 0 . 107 " < nl > - val akka = " 2 . 4 . 4 " < nl > + val akka = " 2 . 4 . 5 " < nl > val akkaHttpJson = " 1 . 5 . 0 " < nl > val cats = " 0 . 3 . 0 " < nl > val circe = " 0 . 2 . 1 "
NEAREST DIFF (one line): diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala < nl > index dba71a2 . . caf83d9 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala < nl > @ @ - 14 , 7 + 14 , 7 @ @ object FileStorageAdapter { < nl > trait FileStorageAdapter extends UploadActions with DownloadActions with UploadKeyParsing < nl > < nl > final case class UnsafeFileName ( fileName : String ) { < nl > - lazy val safe : String = new File ( fileName ) . toPath . normalize ( ) . getFileName . toString < nl > + lazy val safe : String = new File ( fileName . replace ( " \ u0000 " , " " ) ) . toPath . normalize ( ) . getFileName . toString < nl > } < nl > < nl > private [ file ] trait UploadActions { < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > index c2a2435 . . 7e81296 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > @ @ - 3 , 6 + 3 , 8 @ @ package im . actor . server . file . local < nl > import akka . actor . ActorSystem < nl > import akka . event . Logging < nl > import better . files . { File , _ } < nl > + import im . actor . server . db . DbExtension < nl > + import im . actor . server . persist . FileRepo < nl > < nl > import scala . concurrent . { ExecutionContext , Future , blocking } < nl > < nl > @ @ - 13 , 6 + 15 , 7 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { < nl > protected val storageLocation : String < nl > < nl > private lazy val log = Logging ( system , getClass ) < nl > + private lazy val db = DbExtension ( system ) . db < nl > < nl > protected def createFile ( fileId : Long , name : String , file : File ) : Future [ File ] = < nl > Future ( file . copyTo ( getOrCreateFileDir ( fileId ) / getFileName ( name ) ) ) < nl > @ @ - 65 , 11 + 68 , 14 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { < nl > protected def deleteUploadedParts ( dir : File , partNames : Seq [ String ] ) : Future [ Unit ] = < nl > Future . sequence ( partNames map { part ⇒ Future ( ( dir / part ) . delete ( ) ) } ) map ( _ ⇒ ( ) ) < nl > < nl > - protected def getFile ( fileId : Long , optName : Option [ String ] ) : Future [ File ] = < nl > - getFile ( fileId , optName getOrElse " " ) < nl > + protected def getFile ( fileId : Long ) : Future [ File ] = < nl > + db . run ( FileRepo . find ( fileId ) ) flatMap { < nl > + case Some ( model ) ⇒ getFile ( fileId , model . name ) < nl > + case None ⇒ Future . failed ( new RuntimeException ( " File not found " ) ) / / TODO : throw an exception convertable to 404 response < nl > + } < nl > < nl > - protected def getFile ( fileId : Long , name : String ) : Future [ File ] = < nl > - Future ( fileDirectory ( fileId ) / getFileName ( name ) ) < nl > + protected def getFile ( fileId : Long , fileName : String ) : Future [ File ] = < nl > + Future ( fileDirectory ( fileId ) / getFileName ( fileName ) ) < nl > < nl > protected def getFileName ( name : String ) = if ( name . trim . isEmpty ) " file " else name < nl > < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > index 6b35f4a . . 183c0dd 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . file . local < nl > < nl > import java . io < nl > import java . io . IOException < nl > + import java . net . URLEncoder < nl > import java . time . { Duration , Instant } < nl > < nl > import akka . actor . ActorSystem < nl > @ @ - 137 , 7 + 138 , 7 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) < nl > * / < nl > override def getFileDownloadUrl ( file : model . File , accessHash : Long ) : Future [ Option [ String ] ] = { < nl > if ( ACLFiles . fileAccessHash ( file . id , file . accessSalt ) = = accessHash ) { < nl > - val filePart = Option ( file . name ) filter ( _ . trim . nonEmpty ) map ( n ⇒ s " / $ n " ) getOrElse " " < nl > + val filePart = Option ( file . name ) filter ( _ . trim . nonEmpty ) map ( n ⇒ s " / $ { URLEncoder . encode ( n , " UTF - 8 " ) } " ) getOrElse " " < nl > val query = baseUri < nl > . withPath ( Uri . Path ( s " / v1 / files / $ { file . id } " + filePart ) ) < nl > . withQuery ( Uri . Query ( " expires " → expiresAt ( ) . toString ) ) < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala < nl > index 0ac07b8 . . c475cd1 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala < nl > @ @ - 50 , 10 + 50 , 9 @ @ private [ local ] final class FilesHttpHandler ( storageConfig : LocalFileStorageConfi < nl > / / v1 / files / : fileId / : fileName < nl > / / v1 / files / : fileId < nl > path ( Segments ( 0 , 1 ) ) { seqName = > < nl > - val optName = seqName . headOption < nl > - log . debug ( " Download file request , fileId : { } , fileName : { } " , fileId , optName ) < nl > + log . debug ( " Download file request , fileId : { } " , fileId ) < nl > withRangeSupport { < nl > - onComplete ( getFile ( fileId , optName ) ) { < nl > + onComplete ( getFile ( fileId ) ) { < nl > case Success ( file ) = > < nl > log . debug ( " Serving file : { } parts " , fileId ) < nl > complete ( file . loadBytes ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > index 838ca2e . . 17aea85 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > @ @ - 93 , 7 + 93 , 7 @ @ final class FilesServiceSpec < nl > } < nl > < nl > def completeUpload ( ) = { < nl > - whenReady ( service . handleCommitFileUpload ( uploadKey , " / etc / passwd / The . Fil ë % 00 – ' Fear and Loathing in Las Vegas ' " ) ) { resp ⇒ < nl > + whenReady ( service . handleCommitFileUpload ( uploadKey , " / etc / passwd / The . Fil ë % 00 \ u0000 – ' Fear and Loathing in Las Vegas ' " ) ) { resp ⇒ < nl > resp should matchPattern { < nl > case Ok ( ResponseCommitFileUpload ( _ ) ) ⇒ < nl > } < nl > @ @ - 111 , 7 + 111 , 7 @ @ final class FilesServiceSpec < nl > resp . toOption . get . url < nl > } < nl > < nl > - urlStr should include ( " The . Fil % C3 % AB % 00 % 20 % E2 % 80 % 93 % 20 ' Fear % 20and % 20Loathing % 20in % 20Las % 20Vegas ' ? " ) < nl > + urlStr should include ( " The . Fil % C3 % AB % 2500 + % E2 % 80 % 93 + ' Fear + and + Loathing + in + Las + Vegas ' ? " ) < nl > urlStr shouldNot include ( " / / The " ) < nl > urlStr shouldNot include ( " etc " ) < nl > urlStr shouldNot include ( " passwd " )

TEST DIFF:
diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileUtils . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileUtils . scala 
 index 8bb14ce . . ff05b7d 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileUtils . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileUtils . scala 
 @ @ - 49 , 7 + 49 , 7 @ @ object FileUtils { 
 def writeBytes ( bytes : ByteString ) ( implicit system : ActorSystem , materializer : Materializer , ec : ExecutionContext ) : Future [ ( Path , Long ) ] = { 
 for { 
 file ← createTempFile 
 - ioRes ← Source . single ( bytes ) . runWith ( FileIO . toFile ( file . toFile ) ) 
 + ioRes ← Source . single ( bytes ) . runWith ( FileIO . toPath ( file ) ) 
 } yield { 
 ioRes . status match { 
 case Success ( _ ) ⇒ ( file , ioRes . count ) 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 index 8d68406 . . 61df1e7 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 @ @ - 33 , 7 + 33 , 7 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { 
 dir ← getOrCreateFileDir ( fileId ) 
 file = dir / name 
 _ ← Future { blocking { file . createIfNotExists ( ) } } 
 - ioRes ← Source ( List ( ByteString ( data ) ) ) . runWith ( FileIO . toFile ( file . toJava ) ) 
 + ioRes ← Source ( List ( ByteString ( data ) ) ) . runWith ( FileIO . toPath ( file . path ) ) 
 } yield ioRes . status match { 
 case Success ( _ ) ⇒ ( ) 
 case Failure ( cause ) ⇒ throw cause 
 @ @ - 114 , 7 + 114 , 7 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { 
 } 
 
 protected def getFileData ( file : File ) : Future [ ByteString ] = 
 - FileIO . fromFile ( file . toJava ) . runFold ( ByteString . empty ) ( _ + + _ ) 
 + FileIO . fromPath ( file . path ) . runFold ( ByteString . empty ) ( _ + + _ ) 
 
 protected def getFileName ( name : String ) = if ( name . trim . isEmpty ) " file " else name 
 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala 
 index d1a792e . . 9a9a702 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala 
 @ @ - 82 , 9 + 82 , 9 @ @ final class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { 
 private def downloadFile ( bucketName : String , id : Long , name : String ) = { 
 for { 
 dirFile ← DBIO . from ( FileUtils . createTempDir ( ) ) 
 - file = dirFile . toPath . resolve ( " file " ) . toFile 
 - _ ← DBIO . from ( FutureTransfer . listenFor ( transferManager . download ( bucketName , s3Key ( id , name ) , file ) ) map ( _ . waitForCompletion ( ) ) ) 
 - data ← DBIO . from ( FileIO . fromFile ( file ) . runFold ( ByteString . empty ) ( _ + + _ ) ) 
 + path = dirFile . toPath . resolve ( " file " ) 
 + _ ← DBIO . from ( FutureTransfer . listenFor ( transferManager . download ( bucketName , s3Key ( id , name ) , path . toFile ) ) map ( _ . waitForCompletion ( ) ) ) 
 + data ← DBIO . from ( FileIO . fromPath ( path ) . runFold ( ByteString . empty ) ( _ + + _ ) ) 
 } yield data . toArray 
 } 
 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / util / http / DownloadManager . scala b / actor - server / actor - runtime / src / main / scala / im / actor / util / http / DownloadManager . scala 
 index 91ec168 . . b038d28 100644 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / util / http / DownloadManager . scala 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / util / http / DownloadManager . scala 
 @ @ - 25 , 7 + 25 , 7 @ @ class DownloadManager ( implicit system : ActorSystem , materializer : Materializer ) 
 for { 
 filePath ← tempFileFuture 
 response ← responseFuture 
 - ioRes ← response . entity . dataBytes . runWith ( FileIO . toFile ( filePath . toFile ) ) 
 + ioRes ← response . entity . dataBytes . runWith ( FileIO . toPath ( filePath ) ) 
 } yield { 
 ioRes . status match { 
 case Success ( _ ) ⇒ ( filePath , ioRes . count ) 
 diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala 
 index 60b15d0 . . 9cabcd0 100644 
 - - - a / actor - server / project / Dependencies . scala 
 + + + b / actor - server / project / Dependencies . scala 
 @ @ - 6 , 7 + 6 , 7 @ @ object Dependencies { 
 object V { 
 val actorCommons = " 0 . 0 . 15 " 
 val actorBotkit = " 1 . 0 . 107 " 
 - val akka = " 2 . 4 . 4 " 
 + val akka = " 2 . 4 . 5 " 
 val akkaHttpJson = " 1 . 5 . 0 " 
 val cats = " 0 . 3 . 0 " 
 val circe = " 0 . 2 . 1 "

NEAREST DIFF:
diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala 
 index dba71a2 . . caf83d9 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala 
 @ @ - 14 , 7 + 14 , 7 @ @ object FileStorageAdapter { 
 trait FileStorageAdapter extends UploadActions with DownloadActions with UploadKeyParsing 
 
 final case class UnsafeFileName ( fileName : String ) { 
 - lazy val safe : String = new File ( fileName ) . toPath . normalize ( ) . getFileName . toString 
 + lazy val safe : String = new File ( fileName . replace ( " \ u0000 " , " " ) ) . toPath . normalize ( ) . getFileName . toString 
 } 
 
 private [ file ] trait UploadActions { 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 index c2a2435 . . 7e81296 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 @ @ - 3 , 6 + 3 , 8 @ @ package im . actor . server . file . local 
 import akka . actor . ActorSystem 
 import akka . event . Logging 
 import better . files . { File , _ } 
 + import im . actor . server . db . DbExtension 
 + import im . actor . server . persist . FileRepo 
 
 import scala . concurrent . { ExecutionContext , Future , blocking } 
 
 @ @ - 13 , 6 + 15 , 7 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { 
 protected val storageLocation : String 
 
 private lazy val log = Logging ( system , getClass ) 
 + private lazy val db = DbExtension ( system ) . db 
 
 protected def createFile ( fileId : Long , name : String , file : File ) : Future [ File ] = 
 Future ( file . copyTo ( getOrCreateFileDir ( fileId ) / getFileName ( name ) ) ) 
 @ @ - 65 , 11 + 68 , 14 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { 
 protected def deleteUploadedParts ( dir : File , partNames : Seq [ String ] ) : Future [ Unit ] = 
 Future . sequence ( partNames map { part ⇒ Future ( ( dir / part ) . delete ( ) ) } ) map ( _ ⇒ ( ) ) 
 
 - protected def getFile ( fileId : Long , optName : Option [ String ] ) : Future [ File ] = 
 - getFile ( fileId , optName getOrElse " " ) 
 + protected def getFile ( fileId : Long ) : Future [ File ] = 
 + db . run ( FileRepo . find ( fileId ) ) flatMap { 
 + case Some ( model ) ⇒ getFile ( fileId , model . name ) 
 + case None ⇒ Future . failed ( new RuntimeException ( " File not found " ) ) / / TODO : throw an exception convertable to 404 response 
 + } 
 
 - protected def getFile ( fileId : Long , name : String ) : Future [ File ] = 
 - Future ( fileDirectory ( fileId ) / getFileName ( name ) ) 
 + protected def getFile ( fileId : Long , fileName : String ) : Future [ File ] = 
 + Future ( fileDirectory ( fileId ) / getFileName ( fileName ) ) 
 
 protected def getFileName ( name : String ) = if ( name . trim . isEmpty ) " file " else name 
 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 index 6b35f4a . . 183c0dd 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . file . local 
 
 import java . io 
 import java . io . IOException 
 + import java . net . URLEncoder 
 import java . time . { Duration , Instant } 
 
 import akka . actor . ActorSystem 
 @ @ - 137 , 7 + 138 , 7 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) 
 * / 
 override def getFileDownloadUrl ( file : model . File , accessHash : Long ) : Future [ Option [ String ] ] = { 
 if ( ACLFiles . fileAccessHash ( file . id , file . accessSalt ) = = accessHash ) { 
 - val filePart = Option ( file . name ) filter ( _ . trim . nonEmpty ) map ( n ⇒ s " / $ n " ) getOrElse " " 
 + val filePart = Option ( file . name ) filter ( _ . trim . nonEmpty ) map ( n ⇒ s " / $ { URLEncoder . encode ( n , " UTF - 8 " ) } " ) getOrElse " " 
 val query = baseUri 
 . withPath ( Uri . Path ( s " / v1 / files / $ { file . id } " + filePart ) ) 
 . withQuery ( Uri . Query ( " expires " → expiresAt ( ) . toString ) ) 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala 
 index 0ac07b8 . . c475cd1 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala 
 @ @ - 50 , 10 + 50 , 9 @ @ private [ local ] final class FilesHttpHandler ( storageConfig : LocalFileStorageConfi 
 / / v1 / files / : fileId / : fileName 
 / / v1 / files / : fileId 
 path ( Segments ( 0 , 1 ) ) { seqName = > 
 - val optName = seqName . headOption 
 - log . debug ( " Download file request , fileId : { } , fileName : { } " , fileId , optName ) 
 + log . debug ( " Download file request , fileId : { } " , fileId ) 
 withRangeSupport { 
 - onComplete ( getFile ( fileId , optName ) ) { 
 + onComplete ( getFile ( fileId ) ) { 
 case Success ( file ) = > 
 log . debug ( " Serving file : { } parts " , fileId ) 
 complete ( file . loadBytes ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 index 838ca2e . . 17aea85 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 @ @ - 93 , 7 + 93 , 7 @ @ final class FilesServiceSpec 
 } 
 
 def completeUpload ( ) = { 
 - whenReady ( service . handleCommitFileUpload ( uploadKey , " / etc / passwd / The . Fil ë % 00 – ' Fear and Loathing in Las Vegas ' " ) ) { resp ⇒ 
 + whenReady ( service . handleCommitFileUpload ( uploadKey , " / etc / passwd / The . Fil ë % 00 \ u0000 – ' Fear and Loathing in Las Vegas ' " ) ) { resp ⇒ 
 resp should matchPattern { 
 case Ok ( ResponseCommitFileUpload ( _ ) ) ⇒ 
 } 
 @ @ - 111 , 7 + 111 , 7 @ @ final class FilesServiceSpec 
 resp . toOption . get . url 
 } 
 
 - urlStr should include ( " The . Fil % C3 % AB % 00 % 20 % E2 % 80 % 93 % 20 ' Fear % 20and % 20Loathing % 20in % 20Las % 20Vegas ' ? " ) 
 + urlStr should include ( " The . Fil % C3 % AB % 2500 + % E2 % 80 % 93 + ' Fear + and + Loathing + in + Las + Vegas ' ? " ) 
 urlStr shouldNot include ( " / / The " ) 
 urlStr shouldNot include ( " etc " ) 
 urlStr shouldNot include ( " passwd " )
