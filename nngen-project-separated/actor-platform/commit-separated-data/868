BLEU SCORE: 0.06837203339116285

TEST MSG: fix ( android ) : calls - remove MediaStream from PeerConnection before dispose
GENERATED MSG: feat ( webrtc ) : Gracefully close Peer Connection

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > index cb51805 . . dc07f04 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > @ @ - 160 , 7 + 160 , 7 @ @ public class CallFragment extends BaseFragment { < nl > initIncoming ( ) ; < nl > break ; < nl > case CALLING _ OUTGOING : < nl > - onConnecting ( ) ; < nl > + / / onConnecting ( ) ; < nl > break ; < nl > } < nl > } < nl > @ @ - 237 , 7 + 237 , 7 @ @ public class CallFragment extends BaseFragment { < nl > < nl > private void onAnswer ( ) { < nl > < nl > - onConnecting ( ) ; < nl > + / / onConnecting ( ) ; < nl > answerContainer . setVisibility ( View . INVISIBLE ) ; < nl > if ( ringtone ! = null ) { < nl > ringtone . stop ( ) ; < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidCallProvider . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidCallProvider . java < nl > index 5f31735 . . 48d2364 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidCallProvider . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidCallProvider . java < nl > @ @ - 4 , 9 + 4 , 12 @ @ import android . content . Context ; < nl > import android . content . Intent ; < nl > < nl > import im . actor . core . providers . CallsProvider ; < nl > + import im . actor . core . viewmodel . CallState ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . controllers . calls . CallActivity ; < nl > < nl > + import static im . actor . sdk . util . ActorSDKMessenger . messenger ; < nl > + < nl > public class AndroidCallProvider implements CallsProvider { < nl > @ Override < nl > public void onCallStart ( long callId ) { < nl > @ @ - 20 , 6 + 23 , 6 @ @ public class AndroidCallProvider implements CallsProvider { < nl > < nl > @ Override < nl > public void onCallEnd ( long callId ) { < nl > - < nl > + messenger ( ) . getCall ( callId ) . getState ( ) . change ( CallState . ENDED ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > index 6429aa3 . . 828c4b9 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > @ @ - 155 , 7 + 155 , 7 @ @ public class CallManagerActor extends ModuleActor { < nl > / / < nl > / / Notify provider < nl > / / < nl > - if ( currentCall = = callId ) { < nl > + if ( currentCall ! = null & & currentCall = = callId ) { < nl > currentCall = null ; < nl > provider . onCallEnd ( callId ) ; < nl > } < nl > @ @ - 211 , 7 + 211 , 7 @ @ public class CallManagerActor extends ModuleActor { < nl > / / < nl > / / Notify Provider if this call was current < nl > / / < nl > - if ( currentCall = = callId ) { < nl > + if ( currentCall ! = null & & currentCall = = callId ) { < nl > currentCall = callId ; < nl > provider . onCallEnd ( callId ) ; < nl > } < nl > @ @ - 232 , 7 + 232 , 7 @ @ public class CallManagerActor extends ModuleActor { < nl > / / < nl > / / Notify Provider if this call was current < nl > / / < nl > - if ( currentCall = = callId ) { < nl > + if ( currentCall ! = null & & currentCall = = callId ) { < nl > currentCall = null ; < nl > provider . onCallEnd ( callId ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / AndroidWebRTCRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / AndroidWebRTCRuntimeProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 4bb4dd9 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / AndroidWebRTCRuntimeProvider . java < nl > @ @ - 0 , 0 + 1 , 53 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + import org . jetbrains . annotations . NotNull ; < nl > + import org . webrtc . PeerConnection ; < nl > + import org . webrtc . PeerConnectionFactory ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . runtime . function . Consumer ; < nl > + import im . actor . runtime . promise . Promise ; < nl > + import im . actor . runtime . promise . PromiseFunc ; < nl > + import im . actor . runtime . promise . PromiseResolver ; < nl > + import im . actor . runtime . promise . Promises ; < nl > + import im . actor . runtime . webrtc . AndroidMediaStream ; < nl > + import im . actor . runtime . webrtc . AndroidPeerConnection ; < nl > + import im . actor . runtime . webrtc . WebRTCMediaStream ; < nl > + import im . actor . runtime . webrtc . WebRTCPeerConnection ; < nl > + import im . actor . sdk . ActorSDK ; < nl > + < nl > + public class AndroidWebRTCRuntimeProvider implements WebRTCRuntime { < nl > + private static PeerConnectionFactory factory ; < nl > + public AndroidWebRTCRuntimeProvider ( ) { < nl > + PeerConnectionFactory . initializeAndroidGlobals ( ActorSDK . sharedActor ( ) . getMessenger ( ) . getContext ( ) , true , true , true ) ; < nl > + factory = new PeerConnectionFactory ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + @ NotNull < nl > + public Promise < WebRTCPeerConnection > createPeerConnection ( ) { < nl > + return new Promise < WebRTCPeerConnection > ( new PromiseFunc < WebRTCPeerConnection > ( ) { < nl > + @ Override < nl > + public void exec ( @ NotNull PromiseResolver < WebRTCPeerConnection > resolver ) { < nl > + < nl > + resolver . result ( new AndroidPeerConnection ( ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + @ NotNull < nl > + public Promise < WebRTCMediaStream > getUserAudio ( ) { < nl > + return new Promise < WebRTCMediaStream > ( new PromiseFunc < WebRTCMediaStream > ( ) { < nl > + @ Override < nl > + public void exec ( @ NotNull final PromiseResolver < WebRTCMediaStream > resolver ) { < nl > + resolver . result ( new AndroidMediaStream ( factory . createLocalMediaStream ( " ARDAMS " ) , true , true ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + public static PeerConnectionFactory factory ( ) { < nl > + return factory ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / WebRTCRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / WebRTCRuntimeProvider . java < nl > index 0b7e417 . . 35ca4ec 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / WebRTCRuntimeProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / WebRTCRuntimeProvider . java < nl > @ @ - 1 , 53 + 1 , 4 @ @ < nl > package im . actor . runtime ; < nl > < nl > - import org . jetbrains . annotations . NotNull ; < nl > - import org . webrtc . PeerConnection ; < nl > - import org . webrtc . PeerConnectionFactory ; < nl > - < nl > - import java . util . ArrayList ; < nl > - < nl > - import im . actor . runtime . function . Consumer ; < nl > - import im . actor . runtime . promise . Promise ; < nl > - import im . actor . runtime . promise . PromiseFunc ; < nl > - import im . actor . runtime . promise . PromiseResolver ; < nl > - import im . actor . runtime . promise . Promises ; < nl > - import im . actor . runtime . webrtc . AndroidMediaStream ; < nl > - import im . actor . runtime . webrtc . AndroidPeerConnection ; < nl > - import im . actor . runtime . webrtc . WebRTCMediaStream ; < nl > - import im . actor . runtime . webrtc . WebRTCPeerConnection ; < nl > - import im . actor . sdk . ActorSDK ; < nl > - < nl > - public class WebRTCRuntimeProvider implements WebRTCRuntime { < nl > - private static PeerConnectionFactory factory ; < nl > - public WebRTCRuntimeProvider ( ) { < nl > - PeerConnectionFactory . initializeAndroidGlobals ( ActorSDK . sharedActor ( ) . getMessenger ( ) . getContext ( ) , true , true , true ) ; < nl > - factory = new PeerConnectionFactory ( ) ; < nl > - } < nl > - < nl > - @ Override < nl > - @ NotNull < nl > - public Promise < WebRTCPeerConnection > createPeerConnection ( ) { < nl > - return new Promise < WebRTCPeerConnection > ( new PromiseFunc < WebRTCPeerConnection > ( ) { < nl > - @ Override < nl > - public void exec ( @ NotNull PromiseResolver < WebRTCPeerConnection > resolver ) { < nl > - < nl > - resolver . result ( new AndroidPeerConnection ( ) ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - @ Override < nl > - @ NotNull < nl > - public Promise < WebRTCMediaStream > getUserAudio ( ) { < nl > - return new Promise < WebRTCMediaStream > ( new PromiseFunc < WebRTCMediaStream > ( ) { < nl > - @ Override < nl > - public void exec ( @ NotNull final PromiseResolver < WebRTCMediaStream > resolver ) { < nl > - resolver . result ( new AndroidMediaStream ( factory . createLocalMediaStream ( " ARDAMS " ) , true , true ) ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - public static PeerConnectionFactory factory ( ) { < nl > - return factory ; < nl > - } < nl > + public class WebRTCRuntimeProvider extends AndroidWebRTCRuntimeProvider { < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / webrtc / AndroidMediaStream . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / webrtc / AndroidMediaStream . java < nl > index bb821e0 . . 563cfc1 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / webrtc / AndroidMediaStream . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / webrtc / AndroidMediaStream . java < nl > @ @ - 5 , 7 + 5 , 7 @ @ import org . webrtc . AudioTrack ; < nl > import org . webrtc . MediaConstraints ; < nl > import org . webrtc . MediaStream ; < nl > < nl > - import static im . actor . runtime . WebRTCRuntimeProvider . factory ; < nl > + import static im . actor . runtime . AndroidWebRTCRuntimeProvider . factory ; < nl > < nl > < nl > public class AndroidMediaStream implements WebRTCMediaStream { < nl > @ @ - 13 , 12 + 13 , 15 @ @ public class AndroidMediaStream implements WebRTCMediaStream { < nl > private AudioTrack audioTrack ; < nl > private MediaStream stream ; < nl > private boolean isEnabled = false ; < nl > + private boolean local ; < nl > + private boolean diposed = false ; < nl > < nl > public AndroidMediaStream ( MediaStream stream ) { < nl > this ( stream , true , false ) ; < nl > } < nl > < nl > public AndroidMediaStream ( MediaStream stream , boolean autoPlay , boolean local ) { < nl > + this . local = local ; < nl > this . stream = stream ; < nl > if ( ! local ) { < nl > audioTrack = stream . audioTracks . get ( 0 ) ; < nl > @ @ - 46 , 10 + 49 , 14 @ @ public class AndroidMediaStream implements WebRTCMediaStream { < nl > < nl > @ Override < nl > public void close ( ) { < nl > - stream . dispose ( ) ; < nl > + / / stream . dispose ( ) ; < nl > } < nl > < nl > public MediaStream getStream ( ) { < nl > return stream ; < nl > } < nl > + < nl > + public boolean isLocal ( ) { < nl > + return local ; < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / webrtc / AndroidPeerConnection . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / webrtc / AndroidPeerConnection . java < nl > index 16aee9d . . 1c710f8 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / webrtc / AndroidPeerConnection . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / webrtc / AndroidPeerConnection . java < nl > @ @ - 5 , 6 + 5 , 7 @ @ import org . jetbrains . annotations . NotNull ; < nl > < nl > import org . webrtc . DataChannel ; < nl > import org . webrtc . IceCandidate ; < nl > + import org . webrtc . Logging ; < nl > import org . webrtc . MediaConstraints ; < nl > import org . webrtc . MediaStream ; < nl > import org . webrtc . PeerConnection ; < nl > @ @ - 12 , 19 + 13 , 28 @ @ import org . webrtc . SdpObserver ; < nl > import org . webrtc . SessionDescription ; < nl > < nl > import java . util . ArrayList ; < nl > + import java . util . EnumSet ; < nl > import java . util . HashMap ; < nl > < nl > import im . actor . runtime . promise . Promise ; < nl > import im . actor . runtime . promise . PromiseFunc ; < nl > import im . actor . runtime . promise . PromiseResolver ; < nl > < nl > - import static im . actor . runtime . WebRTCRuntimeProvider . factory ; < nl > + import static im . actor . runtime . AndroidWebRTCRuntimeProvider . factory ; < nl > < nl > public class AndroidPeerConnection implements WebRTCPeerConnection { < nl > - PeerConnection pc ; < nl > + private static final boolean LIBJINGLE _ LOGS = false ; < nl > static ArrayList < PeerConnection . IceServer > iceServers ; < nl > < nl > public AndroidPeerConnection ( ) { < nl > + if ( LIBJINGLE _ LOGS ) { < nl > + Logging . enableTracing ( < nl > + " logcat : " , < nl > + EnumSet . of ( Logging . TraceLevel . TRACE _ ALL ) , < nl > + Logging . Severity . LS _ SENSITIVE ) ; < nl > + < nl > + } < nl > + < nl > if ( iceServers = = null ) { < nl > iceServers = new ArrayList < PeerConnection . IceServer > ( ) ; < nl > iceServers . add ( new PeerConnection . IceServer ( " stun : 62 . 4 . 22 . 219 : 3478 " ) ) ; < nl > @ @ - 33 , 7 + 43 , 7 @ @ public class AndroidPeerConnection implements WebRTCPeerConnection { < nl > < nl > } < nl > < nl > - this . pc = factory ( ) . createPeerConnection ( iceServers , new MediaConstraints ( ) , new PeerConnection . Observer ( ) { < nl > + this . peerConnection = factory ( ) . createPeerConnection ( iceServers , new MediaConstraints ( ) , new PeerConnection . Observer ( ) { < nl > @ Override < nl > public void onSignalingChange ( PeerConnection . SignalingState signalingState ) { < nl > < nl > @ @ - 128 , 7 + 138 , 7 @ @ public class AndroidPeerConnection implements WebRTCPeerConnection { < nl > return new Promise < > ( new PromiseFunc < WebRTCSessionDescription > ( ) { < nl > @ Override < nl > public void exec ( @ NotNull final PromiseResolver < WebRTCSessionDescription > resolver ) { < nl > - peerConnection . setRemoteDescription ( new SdpObserver ( ) { < nl > + peerConnection . setLocalDescription ( new SdpObserver ( ) { < nl > @ Override < nl > public void onCreateSuccess ( SessionDescription sessionDescription ) { < nl > / / we are just setting here < nl > @ @ - 251 , 8 + 261 , 10 @ @ public class AndroidPeerConnection implements WebRTCPeerConnection { < nl > @ Override < nl > public void close ( ) { < nl > for ( AndroidMediaStream m : streams . values ( ) ) { < nl > - peerConnection . removeStream ( m . getStream ( ) ) ; < nl > - m . close ( ) ; < nl > + if ( m . isLocal ( ) ) { < nl > + peerConnection . removeStream ( m . getStream ( ) ) ; < nl > + m . getStream ( ) . dispose ( ) ; < nl > + } < nl > } < nl > peerConnection . close ( ) ; < nl > peerConnection . dispose ( ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / WebRTC . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / WebRTC . java < nl > index eb000f7 . . c6af05d 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / WebRTC . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / WebRTC . java < nl > @ @ - 6 , 7 + 6 , 7 @ @ import im . actor . runtime . webrtc . WebRTCPeerConnection ; < nl > < nl > public final class WebRTC { < nl > < nl > - private static WebRTCRuntime rtcRuntime = new WebRTCRuntimeProvider ( ) ; < nl > + private static WebRTCRuntime rtcRuntime = new AndroidWebRTCRuntimeProvider ( ) ; < nl > < nl > public static Promise < WebRTCPeerConnection > createPeerConnection ( ) { < nl > return rtcRuntime . createPeerConnection ( ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > index 0b5b611 . . 276d705 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > @ @ - 17 , 18 + 17 , 41 @ @ class CocoaWebRTCRuntime : NSObject , ARWebRTCRuntime { < nl > } < nl > < nl > func getUserAudio ( ) - > ARPromise { < nl > - return ARPromises . success ( peerConnectionFactory . audioTrackWithID ( " audio0 " ) ) < nl > + let audio = peerConnectionFactory . audioTrackWithID ( " audio0 " ) < nl > + let mediaStream = peerConnectionFactory . mediaStreamWithLabel ( " ARDAMSa0 " ) < nl > + mediaStream . addAudioTrack ( audio ) < nl > + return ARPromises . success ( MediaStream ( stream : mediaStream ) ) < nl > } < nl > } < nl > < nl > class MediaStream : NSObject , ARWebRTCMediaStream { < nl > < nl > + let stream : RTCMediaStream < nl > + < nl > + init ( stream : RTCMediaStream ) { < nl > + self . stream = stream < nl > + } < nl > + < nl > func isEnabled ( ) - > jboolean { < nl > return true < nl > } < nl > < nl > func setEnabledWithBoolean ( isEnabled : jboolean ) { < nl > - < nl > + for i in stream . audioTracks { < nl > + ( i as ? RTCMediaStreamTrack ) ? . setEnabled ( isEnabled ) < nl > + } < nl > + for i in stream . videoTracks { < nl > + ( i as ? RTCMediaStreamTrack ) ? . setEnabled ( isEnabled ) < nl > + } < nl > + } < nl > + < nl > + func close ( ) { < nl > + for i in stream . audioTracks { < nl > + ( i as ? RTCMediaStreamTrack ) ? . setEnabled ( false ) < nl > + } < nl > + for i in stream . videoTracks { < nl > + ( i as ? RTCMediaStreamTrack ) ? . setEnabled ( false ) < nl > + } < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 6df9661 . . afc0b49 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 636 , 13 + 636 , 13 @ @ public class JsFacade implements Exportable { < nl > < nl > / / Calls < nl > < nl > - public JsPromise doCall ( final int uid ) { < nl > + public JsPromise doCall ( final int uid ) { < nl > return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > @ Override < nl > public void execute ( ) { < nl > - messenger . doCall ( uid ) . start ( new CommandCallback < ResponseDoCall > ( ) { < nl > + messenger . doCall ( uid ) . start ( new CommandCallback < Long > ( ) { < nl > @ Override < nl > - public void onResult ( ResponseDoCall res ) { < nl > + public void onResult ( Long res ) { < nl > Log . d ( TAG , " doCall : result " ) ; < nl > resolve ( ) ; < nl > } < nl > @ @ - 657 , 11 + 657 , 11 @ @ public class JsFacade implements Exportable { < nl > } ) ; < nl > } < nl > < nl > - public void answerCall ( String callId ) { < nl > + public void answerCall ( String callId ) { < nl > messenger . answerCall ( Long . parseLong ( callId ) ) ; < nl > } < nl > < nl > - public void endCall ( String callId ) { < nl > + public void endCall ( String callId ) { < nl > messenger . endCall ( Long . parseLong ( callId ) ) ; < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > index 46c61df . . a003cbf 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > @ @ - 43 , 7 + 43 , 6 @ @ public class CallActor extends EventBusActor { < nl > } < nl > < nl > public final void sendSignalingMessage ( int uid , long deviceId , ApiWebRTCSignaling signaling ) { < nl > - / / Log . d ( TAG , " sendSignaling " ) ; < nl > try { < nl > sendMessage ( uid , deviceId , signaling . buildContainer ( ) ) ; < nl > } catch ( IOException e ) { < nl > @ @ - 54 , 9 + 53 , 6 @ @ public class CallActor extends EventBusActor { < nl > < nl > @ Override < nl > public final void onMessageReceived ( @ Nullable Integer senderId , @ Nullable Long senderDeviceId , byte [ ] data ) { < nl > - / / Log . d ( TAG , " onMessageReceived : start " ) ; < nl > - < nl > - / / Ignoring messages without sender < nl > if ( senderId = = null | | senderDeviceId = = null ) { < nl > return ; < nl > } < nl > @ @ - 72 , 14 + 68 , 45 @ @ public class CallActor extends EventBusActor { < nl > < nl > Log . d ( TAG , " onMessageReceived : " + signaling ) ; < nl > onSignalingMessage ( senderId , senderDeviceId , signaling ) ; < nl > - / / Log . d ( TAG , " onMessageReceived : " + signaling + " : end " ) ; < nl > } < nl > < nl > @ Override < nl > + public void onBusStopped ( ) { < nl > + super . onBusStopped ( ) ; < nl > + for ( int uid : peerConnections . keySet ( ) ) { < nl > + HashMap < Long , ActorRef > peers = peerConnections . get ( uid ) ; < nl > + for ( ActorRef p : peers . values ( ) ) { < nl > + p . send ( new PeerConnectionActor . DoStop ( ) ) ; < nl > + } < nl > + } < nl > + peerConnections . clear ( ) ; < nl > + } < nl > + < nl > + public final void doEndCall ( ) { < nl > + shutdown ( ) ; < nl > + } < nl > + < nl > + protected ActorRef getPeer ( int uid , long deviceId ) { < nl > + if ( ! peerConnections . containsKey ( uid ) ) { < nl > + peerConnections . put ( uid , new HashMap < Long , ActorRef > ( ) ) ; < nl > + } < nl > + HashMap < Long , ActorRef > refs = peerConnections . get ( uid ) ; < nl > + if ( refs . containsKey ( deviceId ) ) { < nl > + return refs . get ( deviceId ) ; < nl > + } < nl > + ActorRef ref = system ( ) . actorOf ( getPath ( ) + " / uid : " + uid + " / " + deviceId , < nl > + PeerConnectionActor . CONSTRUCTOR ( self ( ) , uid , deviceId , context ( ) ) ) ; < nl > + refs . put ( deviceId , ref ) ; < nl > + return ref ; < nl > + } < nl > + < nl > + / / < nl > + / / Messages < nl > + / / < nl > + < nl > + @ Override < nl > public void onReceive ( Object message ) { < nl > - / / Log . d ( TAG , " onReceive " ) ; < nl > if ( message instanceof PeerConnectionActor . DoAnswer ) { < nl > - / / Log . d ( TAG , " onReceive : doAnswer " ) ; < nl > PeerConnectionActor . DoAnswer answer = ( PeerConnectionActor . DoAnswer ) message ; < nl > sendSignalingMessage ( answer . getUid ( ) , answer . getDeviceId ( ) , < nl > new ApiAnswer ( 0 , answer . getSdp ( ) ) ) ; < nl > @ @ - 91 , 23 + 118 , 14 @ @ public class CallActor extends EventBusActor { < nl > PeerConnectionActor . DoCandidate candidate = ( PeerConnectionActor . DoCandidate ) message ; < nl > sendSignalingMessage ( candidate . getUid ( ) , candidate . getDeviceId ( ) , < nl > new ApiCandidate ( 0 , candidate . getIndex ( ) , candidate . getId ( ) , candidate . getSdp ( ) ) ) ; < nl > + } else if ( message instanceof DoEndCall ) { < nl > + doEndCall ( ) ; < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > - / / Log . d ( TAG , " onReceive : End " ) ; < nl > } < nl > < nl > - protected ActorRef getPeer ( int uid , long deviceId ) { < nl > - if ( ! peerConnections . containsKey ( uid ) ) { < nl > - peerConnections . put ( uid , new HashMap < Long , ActorRef > ( ) ) ; < nl > - } < nl > - HashMap < Long , ActorRef > refs = peerConnections . get ( uid ) ; < nl > - if ( refs . containsKey ( deviceId ) ) { < nl > - return refs . get ( deviceId ) ; < nl > - } < nl > - ActorRef ref = system ( ) . actorOf ( getPath ( ) + " / uid : " + uid + " / " + deviceId , < nl > - PeerConnectionActor . CONSTRUCTOR ( self ( ) , uid , deviceId , context ( ) ) ) ; < nl > - refs . put ( deviceId , ref ) ; < nl > - return ref ; < nl > + public static class DoEndCall { < nl > + < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > index 75e8a4f . . f9c6ac5 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > @ @ - 118 , 7 + 118 , 10 @ @ public class CallManagerActor extends ModuleActor { < nl > } < nl > < nl > private void doEndCall ( long callId ) { < nl > - < nl > + ActorRef currentCall = currentCalls . remove ( callId ) ; < nl > + if ( currentCall ! = null ) { < nl > + currentCall . send ( new CallActor . DoEndCall ( ) ) ; < nl > + } < nl > } < nl > < nl > / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > index a8c220f . . c6215ac 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > @ @ - 11 , 6 + 11 , 7 @ @ import im . actor . runtime . WebRTC ; < nl > import im . actor . runtime . actors . Actor ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . actors . messages . PoisonPill ; < nl > import im . actor . runtime . function . Consumer ; < nl > import im . actor . runtime . function . Function ; < nl > import im . actor . runtime . function . FunctionTupled2 ; < nl > @ @ - 46 , 6 + 47 , 8 @ @ public class PeerConnectionActor extends ModuleActor { < nl > @ NotNull < nl > private WebRTCPeerConnection peerConnection ; < nl > @ NotNull < nl > + private WebRTCMediaStream stream ; < nl > + @ NotNull < nl > private State state = State . INITIALIZATION ; < nl > < nl > public PeerConnectionActor ( @ NotNull ActorRef root , int uid , long deviceId , @ NotNull ModuleContext context ) { < nl > @ @ - 73 , 6 + 76 , 7 @ @ public class PeerConnectionActor extends ModuleActor { < nl > Promises . tuple ( WebRTC . createPeerConnection ( ) , WebRTC . getUserAudio ( ) ) . map ( new FunctionTupled2 < WebRTCPeerConnection , WebRTCMediaStream , WebRTCPeerConnection > ( ) { < nl > @ Override < nl > public WebRTCPeerConnection apply ( WebRTCPeerConnection webRTCPeerConnection , WebRTCMediaStream stream ) { < nl > + PeerConnectionActor . this . stream = stream ; < nl > webRTCPeerConnection . addOwnStream ( stream ) ; < nl > return webRTCPeerConnection ; < nl > } < nl > @ @ - 240 , 6 + 244 , 14 @ @ public class PeerConnectionActor extends ModuleActor { < nl > peerConnection . addCandidate ( index , id , sdp ) ; < nl > } < nl > < nl > + public void onEnded ( ) { < nl > + peerConnection . close ( ) ; < nl > + stream . close ( ) ; < nl > + isReady = false ; < nl > + state = State . CLOSED ; < nl > + self ( ) . send ( PoisonPill . INSTANCE ) ; < nl > + } < nl > + < nl > @ Override < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof OnOffer ) { < nl > @ @ - 267 , 6 + 279 , 12 @ @ public class PeerConnectionActor extends ModuleActor { < nl > return ; < nl > } < nl > onOfferNeeded ( ) ; < nl > + } else if ( message instanceof DoStop ) { < nl > + if ( ! isReady ) { < nl > + stash ( ) ; < nl > + return ; < nl > + } < nl > + onEnded ( ) ; < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > @ @ - 445 , 7 + 463 , 11 @ @ public class PeerConnectionActor extends ModuleActor { < nl > } < nl > } < nl > < nl > + public static class DoStop { < nl > + < nl > + } < nl > + < nl > private enum State { < nl > - INITIALIZATION , WAITING _ HANDSHAKE , WAITING _ ANSWER , READY < nl > + INITIALIZATION , WAITING _ HANDSHAKE , WAITING _ ANSWER , READY , CLOSED < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / MediaStream . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / MediaStream . java < nl > index 1c3d930 . . f35b6f2 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / MediaStream . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / MediaStream . java < nl > @ @ - 35 , 7 + 35 , 11 @ @ public class MediaStream implements WebRTCMediaStream { < nl > } < nl > } < nl > < nl > - public void dispose ( ) { < nl > - audio . reset ( ) ; < nl > + @ Override < nl > + public void close ( ) { < nl > + if ( audio ! = null ) { < nl > + audio . reset ( ) ; < nl > + } < nl > + stream . stopAll ( ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / PeerConnection . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / PeerConnection . java < nl > index 6b34737 . . 90be958 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / PeerConnection . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / PeerConnection . java < nl > @ @ - 177 , 7 + 177 , 7 @ @ public class PeerConnection implements WebRTCPeerConnection { < nl > public void close ( ) { < nl > peerConnection . close ( ) ; < nl > for ( MediaStream s : streams . values ( ) ) { < nl > - s . dispose ( ) ; < nl > + s . close ( ) ; < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCMediaStream . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCMediaStream . java < nl > index d0d8cea . . 10cc600 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCMediaStream . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCMediaStream . java < nl > @ @ - 18 , 4 + 18 , 9 @ @ public interface WebRTCMediaStream { < nl > * @ param isEnabled is track enabled < nl > * / < nl > void setEnabled ( boolean isEnabled ) ; < nl > + < nl > + / * * < nl > + * Closing stream < nl > + * / < nl > + void close ( ) ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 index cb51805 . . dc07f04 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 @ @ - 160 , 7 + 160 , 7 @ @ public class CallFragment extends BaseFragment { 
 initIncoming ( ) ; 
 break ; 
 case CALLING _ OUTGOING : 
 - onConnecting ( ) ; 
 + / / onConnecting ( ) ; 
 break ; 
 } 
 } 
 @ @ - 237 , 7 + 237 , 7 @ @ public class CallFragment extends BaseFragment { 
 
 private void onAnswer ( ) { 
 
 - onConnecting ( ) ; 
 + / / onConnecting ( ) ; 
 answerContainer . setVisibility ( View . INVISIBLE ) ; 
 if ( ringtone ! = null ) { 
 ringtone . stop ( ) ; 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidCallProvider . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidCallProvider . java 
 index 5f31735 . . 48d2364 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidCallProvider . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidCallProvider . java 
 @ @ - 4 , 9 + 4 , 12 @ @ import android . content . Context ; 
 import android . content . Intent ; 
 
 import im . actor . core . providers . CallsProvider ; 
 + import im . actor . core . viewmodel . CallState ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . controllers . calls . CallActivity ; 
 
 + import static im . actor . sdk . util . ActorSDKMessenger . messenger ; 
 + 
 public class AndroidCallProvider implements CallsProvider { 
 @ Override 
 public void onCallStart ( long callId ) { 
 @ @ - 20 , 6 + 23 , 6 @ @ public class AndroidCallProvider implements CallsProvider { 
 
 @ Override 
 public void onCallEnd ( long callId ) { 
 - 
 + messenger ( ) . getCall ( callId ) . getState ( ) . change ( CallState . ENDED ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 index 6429aa3 . . 828c4b9 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 @ @ - 155 , 7 + 155 , 7 @ @ public class CallManagerActor extends ModuleActor { 
 / / 
 / / Notify provider 
 / / 
 - if ( currentCall = = callId ) { 
 + if ( currentCall ! = null & & currentCall = = callId ) { 
 currentCall = null ; 
 provider . onCallEnd ( callId ) ; 
 } 
 @ @ - 211 , 7 + 211 , 7 @ @ public class CallManagerActor extends ModuleActor { 
 / / 
 / / Notify Provider if this call was current 
 / / 
 - if ( currentCall = = callId ) { 
 + if ( currentCall ! = null & & currentCall = = callId ) { 
 currentCall = callId ; 
 provider . onCallEnd ( callId ) ; 
 } 
 @ @ - 232 , 7 + 232 , 7 @ @ public class CallManagerActor extends ModuleActor { 
 / / 
 / / Notify Provider if this call was current 
 / / 
 - if ( currentCall = = callId ) { 
 + if ( currentCall ! = null & & currentCall = = callId ) { 
 currentCall = null ; 
 provider . onCallEnd ( callId ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / AndroidWebRTCRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / AndroidWebRTCRuntimeProvider . java 
 new file mode 100644 
 index 0000000 . . 4bb4dd9 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / AndroidWebRTCRuntimeProvider . java 
 @ @ - 0 , 0 + 1 , 53 @ @ 
 + package im . actor . runtime ; 
 + 
 + import org . jetbrains . annotations . NotNull ; 
 + import org . webrtc . PeerConnection ; 
 + import org . webrtc . PeerConnectionFactory ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . runtime . function . Consumer ; 
 + import im . actor . runtime . promise . Promise ; 
 + import im . actor . runtime . promise . PromiseFunc ; 
 + import im . actor . runtime . promise . PromiseResolver ; 
 + import im . actor . runtime . promise . Promises ; 
 + import im . actor . runtime . webrtc . AndroidMediaStream ; 
 + import im . actor . runtime . webrtc . AndroidPeerConnection ; 
 + import im . actor . runtime . webrtc . WebRTCMediaStream ; 
 + import im . actor . runtime . webrtc . WebRTCPeerConnection ; 
 + import im . actor . sdk . ActorSDK ; 
 + 
 + public class AndroidWebRTCRuntimeProvider implements WebRTCRuntime { 
 + private static PeerConnectionFactory factory ; 
 + public AndroidWebRTCRuntimeProvider ( ) { 
 + PeerConnectionFactory . initializeAndroidGlobals ( ActorSDK . sharedActor ( ) . getMessenger ( ) . getContext ( ) , true , true , true ) ; 
 + factory = new PeerConnectionFactory ( ) ; 
 + } 
 + 
 + @ Override 
 + @ NotNull 
 + public Promise < WebRTCPeerConnection > createPeerConnection ( ) { 
 + return new Promise < WebRTCPeerConnection > ( new PromiseFunc < WebRTCPeerConnection > ( ) { 
 + @ Override 
 + public void exec ( @ NotNull PromiseResolver < WebRTCPeerConnection > resolver ) { 
 + 
 + resolver . result ( new AndroidPeerConnection ( ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + @ NotNull 
 + public Promise < WebRTCMediaStream > getUserAudio ( ) { 
 + return new Promise < WebRTCMediaStream > ( new PromiseFunc < WebRTCMediaStream > ( ) { 
 + @ Override 
 + public void exec ( @ NotNull final PromiseResolver < WebRTCMediaStream > resolver ) { 
 + resolver . result ( new AndroidMediaStream ( factory . createLocalMediaStream ( " ARDAMS " ) , true , true ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + public static PeerConnectionFactory factory ( ) { 
 + return factory ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / WebRTCRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / WebRTCRuntimeProvider . java 
 index 0b7e417 . . 35ca4ec 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / WebRTCRuntimeProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / WebRTCRuntimeProvider . java 
 @ @ - 1 , 53 + 1 , 4 @ @ 
 package im . actor . runtime ; 
 
 - import org . jetbrains . annotations . NotNull ; 
 - import org . webrtc . PeerConnection ; 
 - import org . webrtc . PeerConnectionFactory ; 
 - 
 - import java . util . ArrayList ; 
 - 
 - import im . actor . runtime . function . Consumer ; 
 - import im . actor . runtime . promise . Promise ; 
 - import im . actor . runtime . promise . PromiseFunc ; 
 - import im . actor . runtime . promise . PromiseResolver ; 
 - import im . actor . runtime . promise . Promises ; 
 - import im . actor . runtime . webrtc . AndroidMediaStream ; 
 - import im . actor . runtime . webrtc . AndroidPeerConnection ; 
 - import im . actor . runtime . webrtc . WebRTCMediaStream ; 
 - import im . actor . runtime . webrtc . WebRTCPeerConnection ; 
 - import im . actor . sdk . ActorSDK ; 
 - 
 - public class WebRTCRuntimeProvider implements WebRTCRuntime { 
 - private static PeerConnectionFactory factory ; 
 - public WebRTCRuntimeProvider ( ) { 
 - PeerConnectionFactory . initializeAndroidGlobals ( ActorSDK . sharedActor ( ) . getMessenger ( ) . getContext ( ) , true , true , true ) ; 
 - factory = new PeerConnectionFactory ( ) ; 
 - } 
 - 
 - @ Override 
 - @ NotNull 
 - public Promise < WebRTCPeerConnection > createPeerConnection ( ) { 
 - return new Promise < WebRTCPeerConnection > ( new PromiseFunc < WebRTCPeerConnection > ( ) { 
 - @ Override 
 - public void exec ( @ NotNull PromiseResolver < WebRTCPeerConnection > resolver ) { 
 - 
 - resolver . result ( new AndroidPeerConnection ( ) ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - @ NotNull 
 - public Promise < WebRTCMediaStream > getUserAudio ( ) { 
 - return new Promise < WebRTCMediaStream > ( new PromiseFunc < WebRTCMediaStream > ( ) { 
 - @ Override 
 - public void exec ( @ NotNull final PromiseResolver < WebRTCMediaStream > resolver ) { 
 - resolver . result ( new AndroidMediaStream ( factory . createLocalMediaStream ( " ARDAMS " ) , true , true ) ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - public static PeerConnectionFactory factory ( ) { 
 - return factory ; 
 - } 
 + public class WebRTCRuntimeProvider extends AndroidWebRTCRuntimeProvider { 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / webrtc / AndroidMediaStream . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / webrtc / AndroidMediaStream . java 
 index bb821e0 . . 563cfc1 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / webrtc / AndroidMediaStream . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / webrtc / AndroidMediaStream . java 
 @ @ - 5 , 7 + 5 , 7 @ @ import org . webrtc . AudioTrack ; 
 import org . webrtc . MediaConstraints ; 
 import org . webrtc . MediaStream ; 
 
 - import static im . actor . runtime . WebRTCRuntimeProvider . factory ; 
 + import static im . actor . runtime . AndroidWebRTCRuntimeProvider . factory ; 
 
 
 public class AndroidMediaStream implements WebRTCMediaStream { 
 @ @ - 13 , 12 + 13 , 15 @ @ public class AndroidMediaStream implements WebRTCMediaStream { 
 private AudioTrack audioTrack ; 
 private MediaStream stream ; 
 private boolean isEnabled = false ; 
 + private boolean local ; 
 + private boolean diposed = false ; 
 
 public AndroidMediaStream ( MediaStream stream ) { 
 this ( stream , true , false ) ; 
 } 
 
 public AndroidMediaStream ( MediaStream stream , boolean autoPlay , boolean local ) { 
 + this . local = local ; 
 this . stream = stream ; 
 if ( ! local ) { 
 audioTrack = stream . audioTracks . get ( 0 ) ; 
 @ @ - 46 , 10 + 49 , 14 @ @ public class AndroidMediaStream implements WebRTCMediaStream { 
 
 @ Override 
 public void close ( ) { 
 - stream . dispose ( ) ; 
 + / / stream . dispose ( ) ; 
 } 
 
 public MediaStream getStream ( ) { 
 return stream ; 
 } 
 + 
 + public boolean isLocal ( ) { 
 + return local ; 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / webrtc / AndroidPeerConnection . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / webrtc / AndroidPeerConnection . java 
 index 16aee9d . . 1c710f8 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / webrtc / AndroidPeerConnection . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / webrtc / AndroidPeerConnection . java 
 @ @ - 5 , 6 + 5 , 7 @ @ import org . jetbrains . annotations . NotNull ; 
 
 import org . webrtc . DataChannel ; 
 import org . webrtc . IceCandidate ; 
 + import org . webrtc . Logging ; 
 import org . webrtc . MediaConstraints ; 
 import org . webrtc . MediaStream ; 
 import org . webrtc . PeerConnection ; 
 @ @ - 12 , 19 + 13 , 28 @ @ import org . webrtc . SdpObserver ; 
 import org . webrtc . SessionDescription ; 
 
 import java . util . ArrayList ; 
 + import java . util . EnumSet ; 
 import java . util . HashMap ; 
 
 import im . actor . runtime . promise . Promise ; 
 import im . actor . runtime . promise . PromiseFunc ; 
 import im . actor . runtime . promise . PromiseResolver ; 
 
 - import static im . actor . runtime . WebRTCRuntimeProvider . factory ; 
 + import static im . actor . runtime . AndroidWebRTCRuntimeProvider . factory ; 
 
 public class AndroidPeerConnection implements WebRTCPeerConnection { 
 - PeerConnection pc ; 
 + private static final boolean LIBJINGLE _ LOGS = false ; 
 static ArrayList < PeerConnection . IceServer > iceServers ; 
 
 public AndroidPeerConnection ( ) { 
 + if ( LIBJINGLE _ LOGS ) { 
 + Logging . enableTracing ( 
 + " logcat : " , 
 + EnumSet . of ( Logging . TraceLevel . TRACE _ ALL ) , 
 + Logging . Severity . LS _ SENSITIVE ) ; 
 + 
 + } 
 + 
 if ( iceServers = = null ) { 
 iceServers = new ArrayList < PeerConnection . IceServer > ( ) ; 
 iceServers . add ( new PeerConnection . IceServer ( " stun : 62 . 4 . 22 . 219 : 3478 " ) ) ; 
 @ @ - 33 , 7 + 43 , 7 @ @ public class AndroidPeerConnection implements WebRTCPeerConnection { 
 
 } 
 
 - this . pc = factory ( ) . createPeerConnection ( iceServers , new MediaConstraints ( ) , new PeerConnection . Observer ( ) { 
 + this . peerConnection = factory ( ) . createPeerConnection ( iceServers , new MediaConstraints ( ) , new PeerConnection . Observer ( ) { 
 @ Override 
 public void onSignalingChange ( PeerConnection . SignalingState signalingState ) { 
 
 @ @ - 128 , 7 + 138 , 7 @ @ public class AndroidPeerConnection implements WebRTCPeerConnection { 
 return new Promise < > ( new PromiseFunc < WebRTCSessionDescription > ( ) { 
 @ Override 
 public void exec ( @ NotNull final PromiseResolver < WebRTCSessionDescription > resolver ) { 
 - peerConnection . setRemoteDescription ( new SdpObserver ( ) { 
 + peerConnection . setLocalDescription ( new SdpObserver ( ) { 
 @ Override 
 public void onCreateSuccess ( SessionDescription sessionDescription ) { 
 / / we are just setting here 
 @ @ - 251 , 8 + 261 , 10 @ @ public class AndroidPeerConnection implements WebRTCPeerConnection { 
 @ Override 
 public void close ( ) { 
 for ( AndroidMediaStream m : streams . values ( ) ) { 
 - peerConnection . removeStream ( m . getStream ( ) ) ; 
 - m . close ( ) ; 
 + if ( m . isLocal ( ) ) { 
 + peerConnection . removeStream ( m . getStream ( ) ) ; 
 + m . getStream ( ) . dispose ( ) ; 
 + } 
 } 
 peerConnection . close ( ) ; 
 peerConnection . dispose ( ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / WebRTC . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / WebRTC . java 
 index eb000f7 . . c6af05d 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / WebRTC . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / WebRTC . java 
 @ @ - 6 , 7 + 6 , 7 @ @ import im . actor . runtime . webrtc . WebRTCPeerConnection ; 
 
 public final class WebRTC { 
 
 - private static WebRTCRuntime rtcRuntime = new WebRTCRuntimeProvider ( ) ; 
 + private static WebRTCRuntime rtcRuntime = new AndroidWebRTCRuntimeProvider ( ) ; 
 
 public static Promise < WebRTCPeerConnection > createPeerConnection ( ) { 
 return rtcRuntime . createPeerConnection ( ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 index 0b5b611 . . 276d705 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 @ @ - 17 , 18 + 17 , 41 @ @ class CocoaWebRTCRuntime : NSObject , ARWebRTCRuntime { 
 } 
 
 func getUserAudio ( ) - > ARPromise { 
 - return ARPromises . success ( peerConnectionFactory . audioTrackWithID ( " audio0 " ) ) 
 + let audio = peerConnectionFactory . audioTrackWithID ( " audio0 " ) 
 + let mediaStream = peerConnectionFactory . mediaStreamWithLabel ( " ARDAMSa0 " ) 
 + mediaStream . addAudioTrack ( audio ) 
 + return ARPromises . success ( MediaStream ( stream : mediaStream ) ) 
 } 
 } 
 
 class MediaStream : NSObject , ARWebRTCMediaStream { 
 
 + let stream : RTCMediaStream 
 + 
 + init ( stream : RTCMediaStream ) { 
 + self . stream = stream 
 + } 
 + 
 func isEnabled ( ) - > jboolean { 
 return true 
 } 
 
 func setEnabledWithBoolean ( isEnabled : jboolean ) { 
 - 
 + for i in stream . audioTracks { 
 + ( i as ? RTCMediaStreamTrack ) ? . setEnabled ( isEnabled ) 
 + } 
 + for i in stream . videoTracks { 
 + ( i as ? RTCMediaStreamTrack ) ? . setEnabled ( isEnabled ) 
 + } 
 + } 
 + 
 + func close ( ) { 
 + for i in stream . audioTracks { 
 + ( i as ? RTCMediaStreamTrack ) ? . setEnabled ( false ) 
 + } 
 + for i in stream . videoTracks { 
 + ( i as ? RTCMediaStreamTrack ) ? . setEnabled ( false ) 
 + } 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 6df9661 . . afc0b49 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 636 , 13 + 636 , 13 @ @ public class JsFacade implements Exportable { 
 
 / / Calls 
 
 - public JsPromise doCall ( final int uid ) { 
 + public JsPromise doCall ( final int uid ) { 
 return JsPromise . create ( new JsPromiseExecutor ( ) { 
 @ Override 
 public void execute ( ) { 
 - messenger . doCall ( uid ) . start ( new CommandCallback < ResponseDoCall > ( ) { 
 + messenger . doCall ( uid ) . start ( new CommandCallback < Long > ( ) { 
 @ Override 
 - public void onResult ( ResponseDoCall res ) { 
 + public void onResult ( Long res ) { 
 Log . d ( TAG , " doCall : result " ) ; 
 resolve ( ) ; 
 } 
 @ @ - 657 , 11 + 657 , 11 @ @ public class JsFacade implements Exportable { 
 } ) ; 
 } 
 
 - public void answerCall ( String callId ) { 
 + public void answerCall ( String callId ) { 
 messenger . answerCall ( Long . parseLong ( callId ) ) ; 
 } 
 
 - public void endCall ( String callId ) { 
 + public void endCall ( String callId ) { 
 messenger . endCall ( Long . parseLong ( callId ) ) ; 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 index 46c61df . . a003cbf 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 @ @ - 43 , 7 + 43 , 6 @ @ public class CallActor extends EventBusActor { 
 } 
 
 public final void sendSignalingMessage ( int uid , long deviceId , ApiWebRTCSignaling signaling ) { 
 - / / Log . d ( TAG , " sendSignaling " ) ; 
 try { 
 sendMessage ( uid , deviceId , signaling . buildContainer ( ) ) ; 
 } catch ( IOException e ) { 
 @ @ - 54 , 9 + 53 , 6 @ @ public class CallActor extends EventBusActor { 
 
 @ Override 
 public final void onMessageReceived ( @ Nullable Integer senderId , @ Nullable Long senderDeviceId , byte [ ] data ) { 
 - / / Log . d ( TAG , " onMessageReceived : start " ) ; 
 - 
 - / / Ignoring messages without sender 
 if ( senderId = = null | | senderDeviceId = = null ) { 
 return ; 
 } 
 @ @ - 72 , 14 + 68 , 45 @ @ public class CallActor extends EventBusActor { 
 
 Log . d ( TAG , " onMessageReceived : " + signaling ) ; 
 onSignalingMessage ( senderId , senderDeviceId , signaling ) ; 
 - / / Log . d ( TAG , " onMessageReceived : " + signaling + " : end " ) ; 
 } 
 
 @ Override 
 + public void onBusStopped ( ) { 
 + super . onBusStopped ( ) ; 
 + for ( int uid : peerConnections . keySet ( ) ) { 
 + HashMap < Long , ActorRef > peers = peerConnections . get ( uid ) ; 
 + for ( ActorRef p : peers . values ( ) ) { 
 + p . send ( new PeerConnectionActor . DoStop ( ) ) ; 
 + } 
 + } 
 + peerConnections . clear ( ) ; 
 + } 
 + 
 + public final void doEndCall ( ) { 
 + shutdown ( ) ; 
 + } 
 + 
 + protected ActorRef getPeer ( int uid , long deviceId ) { 
 + if ( ! peerConnections . containsKey ( uid ) ) { 
 + peerConnections . put ( uid , new HashMap < Long , ActorRef > ( ) ) ; 
 + } 
 + HashMap < Long , ActorRef > refs = peerConnections . get ( uid ) ; 
 + if ( refs . containsKey ( deviceId ) ) { 
 + return refs . get ( deviceId ) ; 
 + } 
 + ActorRef ref = system ( ) . actorOf ( getPath ( ) + " / uid : " + uid + " / " + deviceId , 
 + PeerConnectionActor . CONSTRUCTOR ( self ( ) , uid , deviceId , context ( ) ) ) ; 
 + refs . put ( deviceId , ref ) ; 
 + return ref ; 
 + } 
 + 
 + / / 
 + / / Messages 
 + / / 
 + 
 + @ Override 
 public void onReceive ( Object message ) { 
 - / / Log . d ( TAG , " onReceive " ) ; 
 if ( message instanceof PeerConnectionActor . DoAnswer ) { 
 - / / Log . d ( TAG , " onReceive : doAnswer " ) ; 
 PeerConnectionActor . DoAnswer answer = ( PeerConnectionActor . DoAnswer ) message ; 
 sendSignalingMessage ( answer . getUid ( ) , answer . getDeviceId ( ) , 
 new ApiAnswer ( 0 , answer . getSdp ( ) ) ) ; 
 @ @ - 91 , 23 + 118 , 14 @ @ public class CallActor extends EventBusActor { 
 PeerConnectionActor . DoCandidate candidate = ( PeerConnectionActor . DoCandidate ) message ; 
 sendSignalingMessage ( candidate . getUid ( ) , candidate . getDeviceId ( ) , 
 new ApiCandidate ( 0 , candidate . getIndex ( ) , candidate . getId ( ) , candidate . getSdp ( ) ) ) ; 
 + } else if ( message instanceof DoEndCall ) { 
 + doEndCall ( ) ; 
 } else { 
 super . onReceive ( message ) ; 
 } 
 - / / Log . d ( TAG , " onReceive : End " ) ; 
 } 
 
 - protected ActorRef getPeer ( int uid , long deviceId ) { 
 - if ( ! peerConnections . containsKey ( uid ) ) { 
 - peerConnections . put ( uid , new HashMap < Long , ActorRef > ( ) ) ; 
 - } 
 - HashMap < Long , ActorRef > refs = peerConnections . get ( uid ) ; 
 - if ( refs . containsKey ( deviceId ) ) { 
 - return refs . get ( deviceId ) ; 
 - } 
 - ActorRef ref = system ( ) . actorOf ( getPath ( ) + " / uid : " + uid + " / " + deviceId , 
 - PeerConnectionActor . CONSTRUCTOR ( self ( ) , uid , deviceId , context ( ) ) ) ; 
 - refs . put ( deviceId , ref ) ; 
 - return ref ; 
 + public static class DoEndCall { 
 + 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 index 75e8a4f . . f9c6ac5 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 @ @ - 118 , 7 + 118 , 10 @ @ public class CallManagerActor extends ModuleActor { 
 } 
 
 private void doEndCall ( long callId ) { 
 - 
 + ActorRef currentCall = currentCalls . remove ( callId ) ; 
 + if ( currentCall ! = null ) { 
 + currentCall . send ( new CallActor . DoEndCall ( ) ) ; 
 + } 
 } 
 
 / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 index a8c220f . . c6215ac 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 @ @ - 11 , 6 + 11 , 7 @ @ import im . actor . runtime . WebRTC ; 
 import im . actor . runtime . actors . Actor ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . actors . messages . PoisonPill ; 
 import im . actor . runtime . function . Consumer ; 
 import im . actor . runtime . function . Function ; 
 import im . actor . runtime . function . FunctionTupled2 ; 
 @ @ - 46 , 6 + 47 , 8 @ @ public class PeerConnectionActor extends ModuleActor { 
 @ NotNull 
 private WebRTCPeerConnection peerConnection ; 
 @ NotNull 
 + private WebRTCMediaStream stream ; 
 + @ NotNull 
 private State state = State . INITIALIZATION ; 
 
 public PeerConnectionActor ( @ NotNull ActorRef root , int uid , long deviceId , @ NotNull ModuleContext context ) { 
 @ @ - 73 , 6 + 76 , 7 @ @ public class PeerConnectionActor extends ModuleActor { 
 Promises . tuple ( WebRTC . createPeerConnection ( ) , WebRTC . getUserAudio ( ) ) . map ( new FunctionTupled2 < WebRTCPeerConnection , WebRTCMediaStream , WebRTCPeerConnection > ( ) { 
 @ Override 
 public WebRTCPeerConnection apply ( WebRTCPeerConnection webRTCPeerConnection , WebRTCMediaStream stream ) { 
 + PeerConnectionActor . this . stream = stream ; 
 webRTCPeerConnection . addOwnStream ( stream ) ; 
 return webRTCPeerConnection ; 
 } 
 @ @ - 240 , 6 + 244 , 14 @ @ public class PeerConnectionActor extends ModuleActor { 
 peerConnection . addCandidate ( index , id , sdp ) ; 
 } 
 
 + public void onEnded ( ) { 
 + peerConnection . close ( ) ; 
 + stream . close ( ) ; 
 + isReady = false ; 
 + state = State . CLOSED ; 
 + self ( ) . send ( PoisonPill . INSTANCE ) ; 
 + } 
 + 
 @ Override 
 public void onReceive ( Object message ) { 
 if ( message instanceof OnOffer ) { 
 @ @ - 267 , 6 + 279 , 12 @ @ public class PeerConnectionActor extends ModuleActor { 
 return ; 
 } 
 onOfferNeeded ( ) ; 
 + } else if ( message instanceof DoStop ) { 
 + if ( ! isReady ) { 
 + stash ( ) ; 
 + return ; 
 + } 
 + onEnded ( ) ; 
 } else { 
 super . onReceive ( message ) ; 
 } 
 @ @ - 445 , 7 + 463 , 11 @ @ public class PeerConnectionActor extends ModuleActor { 
 } 
 } 
 
 + public static class DoStop { 
 + 
 + } 
 + 
 private enum State { 
 - INITIALIZATION , WAITING _ HANDSHAKE , WAITING _ ANSWER , READY 
 + INITIALIZATION , WAITING _ HANDSHAKE , WAITING _ ANSWER , READY , CLOSED 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / MediaStream . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / MediaStream . java 
 index 1c3d930 . . f35b6f2 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / MediaStream . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / MediaStream . java 
 @ @ - 35 , 7 + 35 , 11 @ @ public class MediaStream implements WebRTCMediaStream { 
 } 
 } 
 
 - public void dispose ( ) { 
 - audio . reset ( ) ; 
 + @ Override 
 + public void close ( ) { 
 + if ( audio ! = null ) { 
 + audio . reset ( ) ; 
 + } 
 + stream . stopAll ( ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / PeerConnection . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / PeerConnection . java 
 index 6b34737 . . 90be958 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / PeerConnection . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / PeerConnection . java 
 @ @ - 177 , 7 + 177 , 7 @ @ public class PeerConnection implements WebRTCPeerConnection { 
 public void close ( ) { 
 peerConnection . close ( ) ; 
 for ( MediaStream s : streams . values ( ) ) { 
 - s . dispose ( ) ; 
 + s . close ( ) ; 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCMediaStream . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCMediaStream . java 
 index d0d8cea . . 10cc600 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCMediaStream . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCMediaStream . java 
 @ @ - 18 , 4 + 18 , 9 @ @ public interface WebRTCMediaStream { 
 * @ param isEnabled is track enabled 
 * / 
 void setEnabled ( boolean isEnabled ) ; 
 + 
 + / * * 
 + * Closing stream 
 + * / 
 + void close ( ) ; 
 }
