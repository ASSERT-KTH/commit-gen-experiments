BLEU SCORE: 0.17694975149532557

TEST MSG: fix ( server : core ) : no members in group , when user is not group
GENERATED MSG: fix ( server : dialog ) : join to group via unified method

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > index 096d538 . . 8f44510 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > @ @ - 19 , 17 + 19 , 21 @ @ private [ group ] trait GroupQueryHandlers extends GroupCommandHelpers { < nl > } < nl > < nl > def getApiStruct ( group : GroupState , clientUserId : Int ) : Unit = { < nl > - val apiMembers = group . members . toVector map { < nl > - case ( _ , m ) ⇒ < nl > - ApiMember ( m . userId , m . inviterUserId , m . invitedAt . toEpochMilli , Some ( m . isAdmin ) ) < nl > - } < nl > + val isMember = hasMember ( group , clientUserId ) < nl > + val apiMembers = < nl > + if ( isMember ) { < nl > + group . members . toVector map { < nl > + case ( _ , m ) ⇒ < nl > + ApiMember ( m . userId , m . inviterUserId , m . invitedAt . toEpochMilli , Some ( m . isAdmin ) ) < nl > + } < nl > + } else Vector . empty [ ApiMember ] < nl > < nl > val struct = ApiGroup ( < nl > group . id , < nl > accessHash = group . accessHash , < nl > title = group . title , < nl > avatar = group . avatar , < nl > - isMember = hasMember ( group , clientUserId ) , < nl > + isMember = isMember , < nl > creatorUserId = group . creatorUserId , < nl > members = apiMembers , < nl > createDate = group . createdAt . toEpochMilli ,
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto < nl > index 051fad8 . . 64de736 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / group . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / group . proto < nl > @ @ - 147 , 6 + 147 , 7 @ @ message GroupCommands { < nl > < nl > required int32 group _ id = 1 ; < nl > required int32 joining _ user _ id = 2 ; < nl > + required int64 joining _ user _ auth _ id = 3 ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala < nl > index ce56b5e . . 9a9388f 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala < nl > @ @ - 114 , 9 + 114 , 7 @ @ trait GroupDialogHandlers { < nl > } < nl > < nl > if ( invitedUserIds contains readerUserId ) { < nl > - val randomId = ThreadLocalRandom . current ( ) . nextLong ( ) < nl > - GroupOffice . joinAfterFirstRead ( groupId , readerUserId ) < nl > - GroupDialogOperations . sendMessage ( groupId , readerUserId , readerAuthId , randomId , GroupServiceMessages . userJoined ) < nl > + GroupOffice . joinAfterFirstRead ( groupId , readerUserId , readerAuthId ) < nl > } < nl > < nl > if ( ! state . lastReadDate . exists ( _ > = date ) & & ! state . lastSenderId . contains ( readerUserId ) ) { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index b000f9a . . ca2f566 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 143 , 8 + 143 , 8 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > } < nl > } < nl > < nl > - protected def join ( group : Group , joiningUserId : Int , joiningUserAuthId : Long , invitingUserId : Int ) : Unit = { < nl > - if ( ! hasMember ( group , joiningUserId ) ) { < nl > + protected def setJoined ( group : Group , joiningUserId : Int , joiningUserAuthId : Long , invitingUserId : Int ) : Unit = { < nl > + if ( ! hasMember ( group , joiningUserId ) | | isInvited ( group , joiningUserId ) ) { < nl > val replyTo = sender ( ) < nl > < nl > persist ( TSEvent ( now ( ) , GroupEvents . UserJoined ( joiningUserId , invitingUserId ) ) ) { evt ⇒ < nl > @ @ - 175 , 14 + 175 , 8 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > } < nl > } < nl > < nl > - protected def joinAfterFirstRead ( group : Group , joiningUserId : Int ) : Unit = { < nl > - val joinEvent = TSEvent ( now ( ) , GroupEvents . UserJoined ( joiningUserId , group . creatorUserId ) ) < nl > - persistStashing [ Unit ] ( joinEvent , group ) { e ⇒ < nl > - for { < nl > - _ ← db . run ( p . GroupUser . setJoined ( groupId , joiningUserId , LocalDateTime . now ( ZoneOffset . UTC ) ) ) < nl > - } yield ( ) < nl > - } < nl > - } < nl > + protected def joinAfterFirstRead ( group : Group , joiningUserId : Int , joiningUserAuthId : Long ) : Unit = < nl > + setJoined ( group , joiningUserId , joiningUserAuthId , group . creatorUserId ) < nl > < nl > protected def kick ( group : Group , kickedUserId : Int , kickerUserId : Int , kickerAuthId : Long , randomId : Long ) : Unit = { < nl > val replyTo = sender ( ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > index 6efabe9 . . 21cb22b 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > @ @ - 64 , 6 + 64 , 13 @ @ private [ group ] sealed trait Commands { < nl > ) : Future [ ( SeqStateDate , Vector [ Int ] , Long ) ] = < nl > ( peerManagerRegion . ref ? Join ( groupId , joiningUserId , joiningUserAuthId , invitingUserId ) ) . mapTo [ ( SeqStateDate , Vector [ Int ] , Long ) ] < nl > < nl > + def joinAfterFirstRead ( groupId : Int , joiningUserId : Int , joiningUserAuthId : Long ) ( < nl > + implicit < nl > + region : GroupProcessorRegion , < nl > + timeout : Timeout , < nl > + ec : ExecutionContext < nl > + ) : Unit = region . ref ! JoinAfterFirstRead ( groupId , joiningUserId , joiningUserAuthId ) < nl > + < nl > def inviteToGroup ( groupId : Int , inviteeUserId : Int , randomId : Long ) ( < nl > implicit < nl > timeout : Timeout , < nl > @ @ - 114 , 13 + 121 , 6 @ @ private [ group ] sealed trait Commands { < nl > timeout : Timeout , < nl > ec : ExecutionContext < nl > ) : Future [ String ] = ( region . ref ? RevokeIntegrationToken ( groupId , clientUserId ) ) . mapTo [ RevokeIntegrationTokenAck ] map ( _ . token ) < nl > - < nl > - def joinAfterFirstRead ( groupId : Int , joiningUserId : Int ) ( < nl > - implicit < nl > - region : GroupProcessorRegion , < nl > - timeout : Timeout , < nl > - ec : ExecutionContext < nl > - ) : Unit = region . ref ! JoinAfterFirstRead ( groupId , joiningUserId ) < nl > } < nl > < nl > private [ group ] sealed trait Queries { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > index 6b4f54a . . 1cfd213 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > @ @ - 195 , 10 + 195 , 10 @ @ private [ group ] final class GroupProcessor < nl > } else { < nl > sender ( ) ! Status . Failure ( GroupErrors . UserAlreadyInvited ) < nl > } < nl > - case JoinAfterFirstRead ( _ , joiningUserId ) ⇒ < nl > - joinAfterFirstRead ( state , joiningUserId ) < nl > + case JoinAfterFirstRead ( _ , joiningUserId , joiningUserAuthId ) ⇒ < nl > + joinAfterFirstRead ( state , joiningUserId , joiningUserAuthId ) < nl > case Join ( _ , joiningUserId , joiningUserAuthId , invitingUserId ) ⇒ < nl > - join ( state , joiningUserId , joiningUserAuthId , invitingUserId ) < nl > + setJoined ( state , joiningUserId , joiningUserAuthId , invitingUserId ) < nl > case Kick ( _ , kickedUserId , kickerUserId , kickerAuthId , randomId ) ⇒ < nl > kick ( state , kickedUserId , kickerUserId , kickerAuthId , randomId ) < nl > case Leave ( _ , userId , authId , randomId ) ⇒ < nl > @ @ - 258 , 6 + 258 , 8 @ @ private [ group ] final class GroupProcessor < nl > < nl > protected def hasMember ( group : Group , userId : Int ) : Boolean = group . members . keySet . contains ( userId ) < nl > < nl > + protected def isInvited ( group : Group , userId : Int ) : Boolean = group . invitedUserIds . contains ( userId ) < nl > + < nl > protected def isBot ( group : Group , userId : Int ) : Boolean = userId = = 0 | | ( group . bot exists ( _ . userId = = userId ) ) < nl > < nl > protected def isAdmin ( group : Group , userId : Int ) : Boolean = group . members . get ( userId ) exists ( _ . isAdmin )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 index 096d538 . . 8f44510 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 @ @ - 19 , 17 + 19 , 21 @ @ private [ group ] trait GroupQueryHandlers extends GroupCommandHelpers { 
 } 
 
 def getApiStruct ( group : GroupState , clientUserId : Int ) : Unit = { 
 - val apiMembers = group . members . toVector map { 
 - case ( _ , m ) ⇒ 
 - ApiMember ( m . userId , m . inviterUserId , m . invitedAt . toEpochMilli , Some ( m . isAdmin ) ) 
 - } 
 + val isMember = hasMember ( group , clientUserId ) 
 + val apiMembers = 
 + if ( isMember ) { 
 + group . members . toVector map { 
 + case ( _ , m ) ⇒ 
 + ApiMember ( m . userId , m . inviterUserId , m . invitedAt . toEpochMilli , Some ( m . isAdmin ) ) 
 + } 
 + } else Vector . empty [ ApiMember ] 
 
 val struct = ApiGroup ( 
 group . id , 
 accessHash = group . accessHash , 
 title = group . title , 
 avatar = group . avatar , 
 - isMember = hasMember ( group , clientUserId ) , 
 + isMember = isMember , 
 creatorUserId = group . creatorUserId , 
 members = apiMembers , 
 createDate = group . createdAt . toEpochMilli ,

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto 
 index 051fad8 . . 64de736 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / group . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / group . proto 
 @ @ - 147 , 6 + 147 , 7 @ @ message GroupCommands { 
 
 required int32 group _ id = 1 ; 
 required int32 joining _ user _ id = 2 ; 
 + required int64 joining _ user _ auth _ id = 3 ; 
 } 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala 
 index ce56b5e . . 9a9388f 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala 
 @ @ - 114 , 9 + 114 , 7 @ @ trait GroupDialogHandlers { 
 } 
 
 if ( invitedUserIds contains readerUserId ) { 
 - val randomId = ThreadLocalRandom . current ( ) . nextLong ( ) 
 - GroupOffice . joinAfterFirstRead ( groupId , readerUserId ) 
 - GroupDialogOperations . sendMessage ( groupId , readerUserId , readerAuthId , randomId , GroupServiceMessages . userJoined ) 
 + GroupOffice . joinAfterFirstRead ( groupId , readerUserId , readerAuthId ) 
 } 
 
 if ( ! state . lastReadDate . exists ( _ > = date ) & & ! state . lastSenderId . contains ( readerUserId ) ) { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index b000f9a . . ca2f566 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 143 , 8 + 143 , 8 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 } 
 } 
 
 - protected def join ( group : Group , joiningUserId : Int , joiningUserAuthId : Long , invitingUserId : Int ) : Unit = { 
 - if ( ! hasMember ( group , joiningUserId ) ) { 
 + protected def setJoined ( group : Group , joiningUserId : Int , joiningUserAuthId : Long , invitingUserId : Int ) : Unit = { 
 + if ( ! hasMember ( group , joiningUserId ) | | isInvited ( group , joiningUserId ) ) { 
 val replyTo = sender ( ) 
 
 persist ( TSEvent ( now ( ) , GroupEvents . UserJoined ( joiningUserId , invitingUserId ) ) ) { evt ⇒ 
 @ @ - 175 , 14 + 175 , 8 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 } 
 } 
 
 - protected def joinAfterFirstRead ( group : Group , joiningUserId : Int ) : Unit = { 
 - val joinEvent = TSEvent ( now ( ) , GroupEvents . UserJoined ( joiningUserId , group . creatorUserId ) ) 
 - persistStashing [ Unit ] ( joinEvent , group ) { e ⇒ 
 - for { 
 - _ ← db . run ( p . GroupUser . setJoined ( groupId , joiningUserId , LocalDateTime . now ( ZoneOffset . UTC ) ) ) 
 - } yield ( ) 
 - } 
 - } 
 + protected def joinAfterFirstRead ( group : Group , joiningUserId : Int , joiningUserAuthId : Long ) : Unit = 
 + setJoined ( group , joiningUserId , joiningUserAuthId , group . creatorUserId ) 
 
 protected def kick ( group : Group , kickedUserId : Int , kickerUserId : Int , kickerAuthId : Long , randomId : Long ) : Unit = { 
 val replyTo = sender ( ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 index 6efabe9 . . 21cb22b 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 @ @ - 64 , 6 + 64 , 13 @ @ private [ group ] sealed trait Commands { 
 ) : Future [ ( SeqStateDate , Vector [ Int ] , Long ) ] = 
 ( peerManagerRegion . ref ? Join ( groupId , joiningUserId , joiningUserAuthId , invitingUserId ) ) . mapTo [ ( SeqStateDate , Vector [ Int ] , Long ) ] 
 
 + def joinAfterFirstRead ( groupId : Int , joiningUserId : Int , joiningUserAuthId : Long ) ( 
 + implicit 
 + region : GroupProcessorRegion , 
 + timeout : Timeout , 
 + ec : ExecutionContext 
 + ) : Unit = region . ref ! JoinAfterFirstRead ( groupId , joiningUserId , joiningUserAuthId ) 
 + 
 def inviteToGroup ( groupId : Int , inviteeUserId : Int , randomId : Long ) ( 
 implicit 
 timeout : Timeout , 
 @ @ - 114 , 13 + 121 , 6 @ @ private [ group ] sealed trait Commands { 
 timeout : Timeout , 
 ec : ExecutionContext 
 ) : Future [ String ] = ( region . ref ? RevokeIntegrationToken ( groupId , clientUserId ) ) . mapTo [ RevokeIntegrationTokenAck ] map ( _ . token ) 
 - 
 - def joinAfterFirstRead ( groupId : Int , joiningUserId : Int ) ( 
 - implicit 
 - region : GroupProcessorRegion , 
 - timeout : Timeout , 
 - ec : ExecutionContext 
 - ) : Unit = region . ref ! JoinAfterFirstRead ( groupId , joiningUserId ) 
 } 
 
 private [ group ] sealed trait Queries { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 index 6b4f54a . . 1cfd213 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 @ @ - 195 , 10 + 195 , 10 @ @ private [ group ] final class GroupProcessor 
 } else { 
 sender ( ) ! Status . Failure ( GroupErrors . UserAlreadyInvited ) 
 } 
 - case JoinAfterFirstRead ( _ , joiningUserId ) ⇒ 
 - joinAfterFirstRead ( state , joiningUserId ) 
 + case JoinAfterFirstRead ( _ , joiningUserId , joiningUserAuthId ) ⇒ 
 + joinAfterFirstRead ( state , joiningUserId , joiningUserAuthId ) 
 case Join ( _ , joiningUserId , joiningUserAuthId , invitingUserId ) ⇒ 
 - join ( state , joiningUserId , joiningUserAuthId , invitingUserId ) 
 + setJoined ( state , joiningUserId , joiningUserAuthId , invitingUserId ) 
 case Kick ( _ , kickedUserId , kickerUserId , kickerAuthId , randomId ) ⇒ 
 kick ( state , kickedUserId , kickerUserId , kickerAuthId , randomId ) 
 case Leave ( _ , userId , authId , randomId ) ⇒ 
 @ @ - 258 , 6 + 258 , 8 @ @ private [ group ] final class GroupProcessor 
 
 protected def hasMember ( group : Group , userId : Int ) : Boolean = group . members . keySet . contains ( userId ) 
 
 + protected def isInvited ( group : Group , userId : Int ) : Boolean = group . invitedUserIds . contains ( userId ) 
 + 
 protected def isBot ( group : Group , userId : Int ) : Boolean = userId = = 0 | | ( group . bot exists ( _ . userId = = userId ) ) 
 
 protected def isAdmin ( group : Group , userId : Int ) : Boolean = group . members . get ( userId ) exists ( _ . isAdmin )
