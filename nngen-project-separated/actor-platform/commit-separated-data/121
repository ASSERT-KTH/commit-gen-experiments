BLEU SCORE: 0.12300686288463772

TEST MSG: fix ( server : dialogs ) : load last message for peers with shared history
GENERATED MSG: fix ( server ) : persist api entichment

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > index 69a2611 . . be400ee 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > @ @ - 378 , 21 + 378 , 22 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit < nl > . map ( _ . info . get ) < nl > } < nl > < nl > + private val EmptyTextMessage = ApiTextMessage ( text = " " , mentions = Vector . empty , ext = None ) < nl > + < nl > def getApiDialog ( userId : Int , info : DialogInfo , sortDate : Instant ) : Future [ ApiDialog ] = { < nl > - val emptyMessageContent = ApiTextMessage ( text = " " , mentions = Vector . empty , ext = None ) < nl > - val emptyMessage = HistoryMessage ( userId , info . peer . get , new DateTime ( 0 ) , 0 , 0 , emptyMessageContent . header , emptyMessageContent . toByteArray , None ) < nl > + val emptyMessage = HistoryMessage ( userId , info . peer . get , new DateTime ( 0 ) , 0 , 0 , EmptyTextMessage . header , EmptyTextMessage . toByteArray , None ) < nl > val peer = info . peer . get < nl > < nl > for { < nl > historyOwner ← getHistoryOwner ( peer , userId ) < nl > - messageOpt ← getLastMessage ( userId , peer ) < nl > - reactions ← messageOpt map ( m ⇒ db . run ( fetchReactions ( peer , userId , m . randomId ) ) ) getOrElse FastFuture . successful ( Vector . empty ) < nl > - message ← getLastMessage ( userId , peer ) map ( _ getOrElse emptyMessage ) map ( _ . asStruct ( < nl > + lastMessageOpt ← getLastMessage ( historyOwner , peer ) < nl > + reactions ← lastMessageOpt map ( m ⇒ db . run ( fetchReactions ( peer , userId , m . randomId ) ) ) getOrElse FastFuture . successful ( Vector . empty ) < nl > + message = lastMessageOpt . getOrElse ( emptyMessage ) . asStruct ( < nl > lastReceivedAt = new DateTime ( info . lastReceivedDate . toEpochMilli ) , < nl > lastReadAt = new DateTime ( info . lastReadDate . toEpochMilli ) , < nl > reactions = reactions , < nl > attributes = None < nl > - ) ) map ( _ . getOrElse ( throw new RuntimeException ( " Failed to get message struct " ) ) ) < nl > + ) getOrElse ( throw new RuntimeException ( " Failed to get message struct " ) ) < nl > firstUnreadOpt ← db . run ( HistoryMessageRepo . findAfter ( historyOwner , peer , new DateTime ( info . lastReadDate . toEpochMilli ) , 1 ) map ( _ . headOption map ( _ . ofUser ( userId ) ) ) ) < nl > } yield ApiDialog ( < nl > peer = peer . asStruct , < nl > @ @ - 423 , 8 + 424 , 8 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit < nl > . withDialogEnvelope ( DialogEnvelope ( ) . withSendMessage ( sendMessage ) ) ) . mapTo [ SeqStateDate ] < nl > } < nl > < nl > - private def getLastMessage ( userId : Int , peer : Peer ) : Future [ Option [ HistoryMessage ] ] = < nl > - db . run ( HistoryMessageRepo . findNewest ( userId , peer ) ) < nl > + private def getLastMessage ( historyOwner : Int , peer : Peer ) : Future [ Option [ HistoryMessage ] ] = < nl > + db . run ( HistoryMessageRepo . findNewest ( historyOwner , peer ) ) < nl > < nl > private def reactions ( events : Seq [ ReactionEvent ] ) : Seq [ MessageReaction ] = { < nl > ( events . view groupBy ( _ . code ) mapValues ( _ map ( _ . userId ) ) map { < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > index 4ce5087 . . fc80a27 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > @ @ - 149 , 23 + 149 , 13 @ @ object HistoryMessageRepo { < nl > . map ( _ . userId ) < nl > . result < nl > < nl > - def findNewest ( userId : Int , peer : Peer ) : SqlAction [ Option [ HistoryMessage ] , NoStream , Read ] = { < nl > - val filter = { m : HistoryMessageTable ⇒ < nl > - m . userId = = = userId & & < nl > - m . peerType = = = peer . typ . value & & < nl > - m . peerId = = = peer . id < nl > - } < nl > - findNewestFilter ( userId , peer , filter ) < nl > - } < nl > - < nl > - private def findNewestFilter ( userId : Int , peer : Peer , filterClause : HistoryMessageTable ⇒ Rep [ Boolean ] ) = { < nl > + def findNewest ( userId : Int , peer : Peer ) : SqlAction [ Option [ HistoryMessage ] , NoStream , Read ] = < nl > notDeletedMessages < nl > - . filter ( filterClause ) < nl > + . filter ( m ⇒ m . userId = = = userId & & m . peerType = = = peer . typ . value & & m . peerId = = = peer . id ) < nl > . sortBy ( _ . date . desc ) < nl > . take ( 1 ) < nl > . result < nl > . headOption < nl > - } < nl > < nl > def find ( userId : Int , peer : Peer ) : FixedSqlStreamingAction [ Seq [ HistoryMessage ] , HistoryMessage , Read ] = < nl > notDeletedMessages
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala < nl > index d3a6b75 . . cdd223e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala < nl > @ @ - 15 , 7 + 15 , 7 @ @ object HistoryUtils { < nl > import GroupUtils . _ < nl > < nl > / / User for writing history in public groups < nl > - private val sharedUserId = 0 < nl > + val SharedUserId = 0 < nl > < nl > private [ dialog ] def writeHistoryMessage ( < nl > fromPeer : Peer , < nl > @ @ - 60 , 7 + 60 , 7 @ @ object HistoryUtils { < nl > DBIO . from ( GroupExtension ( system ) . isHistoryShared ( toPeer . id ) ) flatMap { isHistoryShared ⇒ < nl > withGroupUserIds ( toPeer . id ) { groupUserIds ⇒ < nl > if ( isHistoryShared ) { < nl > - val historyMessage = HistoryMessage ( sharedUserId , toPeer , date , fromPeer . id , randomId , messageContentHeader , messageContentData , None ) < nl > + val historyMessage = HistoryMessage ( SharedUserId , toPeer , date , fromPeer . id , randomId , messageContentHeader , messageContentData , None ) < nl > < nl > for { < nl > _ ← persist . DialogRepo . updateLastMessageDates ( groupUserIds . toSet , toPeer , date ) < nl > @ @ - 144 , 7 + 144 , 7 @ @ object HistoryUtils { < nl > implicit val groupViewRegion = GroupExtension ( system ) . viewRegion < nl > DBIO . from ( GroupExtension ( system ) . isHistoryShared ( peer . id ) ) flatMap { isHistoryShared ⇒ < nl > if ( isHistoryShared ) { < nl > - DBIO . successful ( sharedUserId ) < nl > + DBIO . successful ( SharedUserId ) < nl > } else { < nl > DBIO . successful ( clientUserId ) < nl > } < nl > @ @ - 153 , 7 + 153 , 7 @ @ object HistoryUtils { < nl > } ) flatMap f < nl > } < nl > < nl > - def isSharedUser ( userId : Int ) : Boolean = userId = = sharedUserId < nl > + def isSharedUser ( userId : Int ) : Boolean = userId = = SharedUserId < nl > < nl > private def requirePrivatePeer ( peer : Peer ) = { < nl > if ( peer . typ ! = PeerType . Private ) < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > index 362368d . . 4edef6b 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > @ @ - 84 , 6 + 84 , 15 @ @ object HistoryMessageRepo { < nl > query . take ( limit ) . result < nl > } < nl > < nl > + def findBySender ( senderUserId : Int , peer : Peer , randomId : Long ) : FixedSqlStreamingAction [ Seq [ HistoryMessage ] , HistoryMessage , Read ] = < nl > + notDeletedMessages . filter ( m ⇒ m . senderUserId = = = senderUserId & & m . peerType = = = peer . typ . value & & m . peerId = = = peer . id & & m . randomId = = = randomId ) . result < nl > + < nl > + def findUserIds ( peer : Peer , randomIds : Set [ Long ] ) : DBIO [ Seq [ Int ] ] = < nl > + notDeletedMessages < nl > + . filter ( m ⇒ m . peerType = = = peer . typ . value & & m . peerId = = = peer . id & & ( m . randomId inSet randomIds ) ) < nl > + . map ( _ . userId ) < nl > + . result < nl > + < nl > def findNewest ( userId : Int , peer : Peer ) : SqlAction [ Option [ HistoryMessage ] , NoStream , Read ] = < nl > notDeletedMessages < nl > . filter ( m ⇒ m . userId = = = userId & & m . peerType = = = peer . typ . value & & m . peerId = = = peer . id )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 index 69a2611 . . be400ee 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 @ @ - 378 , 21 + 378 , 22 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit 
 . map ( _ . info . get ) 
 } 
 
 + private val EmptyTextMessage = ApiTextMessage ( text = " " , mentions = Vector . empty , ext = None ) 
 + 
 def getApiDialog ( userId : Int , info : DialogInfo , sortDate : Instant ) : Future [ ApiDialog ] = { 
 - val emptyMessageContent = ApiTextMessage ( text = " " , mentions = Vector . empty , ext = None ) 
 - val emptyMessage = HistoryMessage ( userId , info . peer . get , new DateTime ( 0 ) , 0 , 0 , emptyMessageContent . header , emptyMessageContent . toByteArray , None ) 
 + val emptyMessage = HistoryMessage ( userId , info . peer . get , new DateTime ( 0 ) , 0 , 0 , EmptyTextMessage . header , EmptyTextMessage . toByteArray , None ) 
 val peer = info . peer . get 
 
 for { 
 historyOwner ← getHistoryOwner ( peer , userId ) 
 - messageOpt ← getLastMessage ( userId , peer ) 
 - reactions ← messageOpt map ( m ⇒ db . run ( fetchReactions ( peer , userId , m . randomId ) ) ) getOrElse FastFuture . successful ( Vector . empty ) 
 - message ← getLastMessage ( userId , peer ) map ( _ getOrElse emptyMessage ) map ( _ . asStruct ( 
 + lastMessageOpt ← getLastMessage ( historyOwner , peer ) 
 + reactions ← lastMessageOpt map ( m ⇒ db . run ( fetchReactions ( peer , userId , m . randomId ) ) ) getOrElse FastFuture . successful ( Vector . empty ) 
 + message = lastMessageOpt . getOrElse ( emptyMessage ) . asStruct ( 
 lastReceivedAt = new DateTime ( info . lastReceivedDate . toEpochMilli ) , 
 lastReadAt = new DateTime ( info . lastReadDate . toEpochMilli ) , 
 reactions = reactions , 
 attributes = None 
 - ) ) map ( _ . getOrElse ( throw new RuntimeException ( " Failed to get message struct " ) ) ) 
 + ) getOrElse ( throw new RuntimeException ( " Failed to get message struct " ) ) 
 firstUnreadOpt ← db . run ( HistoryMessageRepo . findAfter ( historyOwner , peer , new DateTime ( info . lastReadDate . toEpochMilli ) , 1 ) map ( _ . headOption map ( _ . ofUser ( userId ) ) ) ) 
 } yield ApiDialog ( 
 peer = peer . asStruct , 
 @ @ - 423 , 8 + 424 , 8 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit 
 . withDialogEnvelope ( DialogEnvelope ( ) . withSendMessage ( sendMessage ) ) ) . mapTo [ SeqStateDate ] 
 } 
 
 - private def getLastMessage ( userId : Int , peer : Peer ) : Future [ Option [ HistoryMessage ] ] = 
 - db . run ( HistoryMessageRepo . findNewest ( userId , peer ) ) 
 + private def getLastMessage ( historyOwner : Int , peer : Peer ) : Future [ Option [ HistoryMessage ] ] = 
 + db . run ( HistoryMessageRepo . findNewest ( historyOwner , peer ) ) 
 
 private def reactions ( events : Seq [ ReactionEvent ] ) : Seq [ MessageReaction ] = { 
 ( events . view groupBy ( _ . code ) mapValues ( _ map ( _ . userId ) ) map { 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 index 4ce5087 . . fc80a27 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 @ @ - 149 , 23 + 149 , 13 @ @ object HistoryMessageRepo { 
 . map ( _ . userId ) 
 . result 
 
 - def findNewest ( userId : Int , peer : Peer ) : SqlAction [ Option [ HistoryMessage ] , NoStream , Read ] = { 
 - val filter = { m : HistoryMessageTable ⇒ 
 - m . userId = = = userId & & 
 - m . peerType = = = peer . typ . value & & 
 - m . peerId = = = peer . id 
 - } 
 - findNewestFilter ( userId , peer , filter ) 
 - } 
 - 
 - private def findNewestFilter ( userId : Int , peer : Peer , filterClause : HistoryMessageTable ⇒ Rep [ Boolean ] ) = { 
 + def findNewest ( userId : Int , peer : Peer ) : SqlAction [ Option [ HistoryMessage ] , NoStream , Read ] = 
 notDeletedMessages 
 - . filter ( filterClause ) 
 + . filter ( m ⇒ m . userId = = = userId & & m . peerType = = = peer . typ . value & & m . peerId = = = peer . id ) 
 . sortBy ( _ . date . desc ) 
 . take ( 1 ) 
 . result 
 . headOption 
 - } 
 
 def find ( userId : Int , peer : Peer ) : FixedSqlStreamingAction [ Seq [ HistoryMessage ] , HistoryMessage , Read ] = 
 notDeletedMessages

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala 
 index d3a6b75 . . cdd223e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala 
 @ @ - 15 , 7 + 15 , 7 @ @ object HistoryUtils { 
 import GroupUtils . _ 
 
 / / User for writing history in public groups 
 - private val sharedUserId = 0 
 + val SharedUserId = 0 
 
 private [ dialog ] def writeHistoryMessage ( 
 fromPeer : Peer , 
 @ @ - 60 , 7 + 60 , 7 @ @ object HistoryUtils { 
 DBIO . from ( GroupExtension ( system ) . isHistoryShared ( toPeer . id ) ) flatMap { isHistoryShared ⇒ 
 withGroupUserIds ( toPeer . id ) { groupUserIds ⇒ 
 if ( isHistoryShared ) { 
 - val historyMessage = HistoryMessage ( sharedUserId , toPeer , date , fromPeer . id , randomId , messageContentHeader , messageContentData , None ) 
 + val historyMessage = HistoryMessage ( SharedUserId , toPeer , date , fromPeer . id , randomId , messageContentHeader , messageContentData , None ) 
 
 for { 
 _ ← persist . DialogRepo . updateLastMessageDates ( groupUserIds . toSet , toPeer , date ) 
 @ @ - 144 , 7 + 144 , 7 @ @ object HistoryUtils { 
 implicit val groupViewRegion = GroupExtension ( system ) . viewRegion 
 DBIO . from ( GroupExtension ( system ) . isHistoryShared ( peer . id ) ) flatMap { isHistoryShared ⇒ 
 if ( isHistoryShared ) { 
 - DBIO . successful ( sharedUserId ) 
 + DBIO . successful ( SharedUserId ) 
 } else { 
 DBIO . successful ( clientUserId ) 
 } 
 @ @ - 153 , 7 + 153 , 7 @ @ object HistoryUtils { 
 } ) flatMap f 
 } 
 
 - def isSharedUser ( userId : Int ) : Boolean = userId = = sharedUserId 
 + def isSharedUser ( userId : Int ) : Boolean = userId = = SharedUserId 
 
 private def requirePrivatePeer ( peer : Peer ) = { 
 if ( peer . typ ! = PeerType . Private ) 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 index 362368d . . 4edef6b 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 @ @ - 84 , 6 + 84 , 15 @ @ object HistoryMessageRepo { 
 query . take ( limit ) . result 
 } 
 
 + def findBySender ( senderUserId : Int , peer : Peer , randomId : Long ) : FixedSqlStreamingAction [ Seq [ HistoryMessage ] , HistoryMessage , Read ] = 
 + notDeletedMessages . filter ( m ⇒ m . senderUserId = = = senderUserId & & m . peerType = = = peer . typ . value & & m . peerId = = = peer . id & & m . randomId = = = randomId ) . result 
 + 
 + def findUserIds ( peer : Peer , randomIds : Set [ Long ] ) : DBIO [ Seq [ Int ] ] = 
 + notDeletedMessages 
 + . filter ( m ⇒ m . peerType = = = peer . typ . value & & m . peerId = = = peer . id & & ( m . randomId inSet randomIds ) ) 
 + . map ( _ . userId ) 
 + . result 
 + 
 def findNewest ( userId : Int , peer : Peer ) : SqlAction [ Option [ HistoryMessage ] , NoStream , Read ] = 
 notDeletedMessages 
 . filter ( m ⇒ m . userId = = = userId & & m . peerType = = = peer . typ . value & & m . peerId = = = peer . id )
