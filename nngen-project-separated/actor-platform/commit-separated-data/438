BLEU SCORE: 0.4216120484488187

TEST MSG: fix ( server : messaging ) : fixed DialogRootState peers dissapearing
GENERATED MSG: test ( server : messaging ) : ( un ) archive spec

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > index 171502c . . f5a63d2 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > @ @ - 178 , 7 + 178 , 7 @ @ private [ dialog ] final case class DialogRootState ( < nl > } < nl > < nl > private def withNewPeer ( ts : Instant , peer : Peer ) : DialogRootState = { < nl > - if ( this . mobile . find ( _ . peer = = peer ) . exists ( _ . ts = = ts ) ) withNewPeer ( ts . plusMillis ( 1 ) , peer ) < nl > + if ( this . mobile . exists ( _ . ts = = ts ) ) withNewPeer ( ts . plusMillis ( 1 ) , peer ) < nl > else { < nl > val sortableDialog = SortableDialog ( ts , peer ) < nl > < nl > @ @ - 191 , 7 + 191 , 7 @ @ private [ dialog ] final case class DialogRootState ( < nl > } < nl > < nl > private def withUnarchivedPeer ( ts : Instant , peer : Peer ) : DialogRootState = { < nl > - if ( this . mobile . find ( _ . peer = = peer ) . exists ( _ . ts = = ts ) ) withUnarchivedPeer ( ts . plusMillis ( 1 ) , peer ) < nl > + if ( this . active . exists ( _ . ts = = ts ) ) withUnarchivedPeer ( ts . plusMillis ( 1 ) , peer ) < nl > else { < nl > val sortableDialog = SortableDialog ( ts , peer ) < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > index 28794e9 . . 6fc5cba 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > @ @ - 39 , 9 + 39 , 10 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { < nl > val bob = Peer . privat ( 2 ) < nl > val eve = Peer . privat ( 3 ) < nl > < nl > - probe . commit ( Created ( Instant . now ( ) , Some ( alice ) ) ) < nl > - probe . commit ( Created ( Instant . now ( ) . plusMillis ( 1 ) , Some ( bob ) ) ) < nl > - probe . commit ( Created ( Instant . now ( ) . plusMillis ( 1 ) , Some ( eve ) ) ) < nl > + val now = Instant . now ( ) < nl > + probe . commit ( Created ( now , Some ( alice ) ) ) < nl > + probe . commit ( Created ( now , Some ( bob ) ) ) < nl > + probe . commit ( Created ( now , Some ( eve ) ) ) < nl > < nl > getMobilePeers should be ( Seq ( eve , bob , alice ) ) < nl > checkSnapshot < nl > @ @ - 85 , 7 + 86 , 8 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { < nl > probe . state . active . dms shouldBe empty < nl > probe . state . active . dms shouldBe empty < nl > probe . state . active . favourites . map ( _ . peer ) . toSeq should be ( Seq ( alice , group ) ) < nl > - probe . state . mobile . map ( _ . peer ) . toSeq should be ( Seq ( alice , group ) ) < nl > + probe . state . mobile . map ( _ . peer ) . toSeq should be ( Seq ( group , alice ) ) < nl > + checkSnapshot < nl > } < nl > < nl > def removeFromArchived ( ) = {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > index b1eab08 . . b76cbc6 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > @ @ - 11 , 6 + 11 , 7 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { < nl > it should " have DMs and Groups by default " in default < nl > it should " sort dialogs by appearing " in show < nl > it should " remove Favourites on Unfavourite " in favouriteUnfavourite < nl > + it should " remove from Archived on Favourite or new message " in removeFromArchived < nl > < nl > import DialogRootEvents . _ < nl > < nl > @ @ - 47 , 9 + 48 , 32 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { < nl > getGroupPeers ( DialogGroupType . DirectMessages ) should contain ( alice ) < nl > } < nl > < nl > + def removeFromArchived ( ) = { < nl > + implicit val probe = ProcessorStateProbe ( DialogRootState . initial ) < nl > + < nl > + val alice = Peer . privat ( 1 ) < nl > + < nl > + probe . commit ( Archived ( Instant . now , Some ( alice ) ) ) < nl > + getArchivedPeers should be ( Seq ( alice ) ) < nl > + < nl > + probe . commit ( Unarchived ( Instant . now , Some ( alice ) ) ) < nl > + getArchivedPeers should be ( Seq . empty ) < nl > + getGroupPeers ( DialogGroupType . DirectMessages ) should be ( Seq ( alice ) ) < nl > + < nl > + probe . commit ( Archived ( Instant . now , Some ( alice ) ) ) < nl > + getGroupPeers ( DialogGroupType . DirectMessages ) should be ( Seq . empty ) < nl > + < nl > + probe . commit ( Favourited ( Instant . now , Some ( alice ) ) ) < nl > + getArchivedPeers should be ( Seq . empty ) < nl > + getGroupPeers ( DialogGroupType . Favourites ) should be ( Seq ( alice ) ) < nl > + } < nl > + < nl > private def getGroupPeers ( typ : DialogGroupType ) ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = < nl > probe . state . active . get ( typ ) . get . toSeq . map ( _ . peer ) < nl > < nl > private def getActivePeers ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = < nl > probe . state . activePeers . toSeq . map ( _ . peer ) < nl > + < nl > + private def getArchivedPeers ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = < nl > + probe . state . archived . toSeq . map ( _ . peer ) < nl > } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 index 171502c . . f5a63d2 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 @ @ - 178 , 7 + 178 , 7 @ @ private [ dialog ] final case class DialogRootState ( 
 } 
 
 private def withNewPeer ( ts : Instant , peer : Peer ) : DialogRootState = { 
 - if ( this . mobile . find ( _ . peer = = peer ) . exists ( _ . ts = = ts ) ) withNewPeer ( ts . plusMillis ( 1 ) , peer ) 
 + if ( this . mobile . exists ( _ . ts = = ts ) ) withNewPeer ( ts . plusMillis ( 1 ) , peer ) 
 else { 
 val sortableDialog = SortableDialog ( ts , peer ) 
 
 @ @ - 191 , 7 + 191 , 7 @ @ private [ dialog ] final case class DialogRootState ( 
 } 
 
 private def withUnarchivedPeer ( ts : Instant , peer : Peer ) : DialogRootState = { 
 - if ( this . mobile . find ( _ . peer = = peer ) . exists ( _ . ts = = ts ) ) withUnarchivedPeer ( ts . plusMillis ( 1 ) , peer ) 
 + if ( this . active . exists ( _ . ts = = ts ) ) withUnarchivedPeer ( ts . plusMillis ( 1 ) , peer ) 
 else { 
 val sortableDialog = SortableDialog ( ts , peer ) 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 index 28794e9 . . 6fc5cba 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 @ @ - 39 , 9 + 39 , 10 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { 
 val bob = Peer . privat ( 2 ) 
 val eve = Peer . privat ( 3 ) 
 
 - probe . commit ( Created ( Instant . now ( ) , Some ( alice ) ) ) 
 - probe . commit ( Created ( Instant . now ( ) . plusMillis ( 1 ) , Some ( bob ) ) ) 
 - probe . commit ( Created ( Instant . now ( ) . plusMillis ( 1 ) , Some ( eve ) ) ) 
 + val now = Instant . now ( ) 
 + probe . commit ( Created ( now , Some ( alice ) ) ) 
 + probe . commit ( Created ( now , Some ( bob ) ) ) 
 + probe . commit ( Created ( now , Some ( eve ) ) ) 
 
 getMobilePeers should be ( Seq ( eve , bob , alice ) ) 
 checkSnapshot 
 @ @ - 85 , 7 + 86 , 8 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { 
 probe . state . active . dms shouldBe empty 
 probe . state . active . dms shouldBe empty 
 probe . state . active . favourites . map ( _ . peer ) . toSeq should be ( Seq ( alice , group ) ) 
 - probe . state . mobile . map ( _ . peer ) . toSeq should be ( Seq ( alice , group ) ) 
 + probe . state . mobile . map ( _ . peer ) . toSeq should be ( Seq ( group , alice ) ) 
 + checkSnapshot 
 } 
 
 def removeFromArchived ( ) = {

NEAREST DIFF:
diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 index b1eab08 . . b76cbc6 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 @ @ - 11 , 6 + 11 , 7 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { 
 it should " have DMs and Groups by default " in default 
 it should " sort dialogs by appearing " in show 
 it should " remove Favourites on Unfavourite " in favouriteUnfavourite 
 + it should " remove from Archived on Favourite or new message " in removeFromArchived 
 
 import DialogRootEvents . _ 
 
 @ @ - 47 , 9 + 48 , 32 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { 
 getGroupPeers ( DialogGroupType . DirectMessages ) should contain ( alice ) 
 } 
 
 + def removeFromArchived ( ) = { 
 + implicit val probe = ProcessorStateProbe ( DialogRootState . initial ) 
 + 
 + val alice = Peer . privat ( 1 ) 
 + 
 + probe . commit ( Archived ( Instant . now , Some ( alice ) ) ) 
 + getArchivedPeers should be ( Seq ( alice ) ) 
 + 
 + probe . commit ( Unarchived ( Instant . now , Some ( alice ) ) ) 
 + getArchivedPeers should be ( Seq . empty ) 
 + getGroupPeers ( DialogGroupType . DirectMessages ) should be ( Seq ( alice ) ) 
 + 
 + probe . commit ( Archived ( Instant . now , Some ( alice ) ) ) 
 + getGroupPeers ( DialogGroupType . DirectMessages ) should be ( Seq . empty ) 
 + 
 + probe . commit ( Favourited ( Instant . now , Some ( alice ) ) ) 
 + getArchivedPeers should be ( Seq . empty ) 
 + getGroupPeers ( DialogGroupType . Favourites ) should be ( Seq ( alice ) ) 
 + } 
 + 
 private def getGroupPeers ( typ : DialogGroupType ) ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = 
 probe . state . active . get ( typ ) . get . toSeq . map ( _ . peer ) 
 
 private def getActivePeers ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = 
 probe . state . activePeers . toSeq . map ( _ . peer ) 
 + 
 + private def getArchivedPeers ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = 
 + probe . state . archived . toSeq . map ( _ . peer ) 
 } 
 \ No newline at end of file
