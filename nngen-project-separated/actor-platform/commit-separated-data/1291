BLEU SCORE: 0.43649904483690155

TEST MSG: fix ( server : files ) : use prefix in file directories
GENERATED MSG: fix ( server : files ) : remove scheme and domain from request signing

TEST DIFF (one line): diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > index 1772deb . . 7f9df65 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > @ @ - 69 , 10 + 69 , 12 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { < nl > getFile ( fileId , optName getOrElse " " ) < nl > < nl > protected def getFile ( fileId : Long , name : String ) : Future [ File ] = < nl > - Future ( file " $ storageLocation / $ fileId / $ { getFileName ( name ) } " ) < nl > + Future ( fileDirectory ( fileId ) / getFileName ( name ) ) < nl > < nl > protected def getFileName ( name : String ) = if ( name . trim . isEmpty ) " file " else name < nl > < nl > - private def getOrCreateFileDir ( fileId : Long ) = file " $ storageLocation / $ fileId " . createIfNotExists ( asDirectory = true ) < nl > + protected def fileDirectory ( fileId : Long ) : File = file " $ storageLocation / file _ $ { fileId } " < nl > + < nl > + private def getOrCreateFileDir ( fileId : Long ) = fileDirectory ( fileId ) . createIfNotExists ( asDirectory = true ) < nl > < nl > } < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > index 4ec8905 . . 16995c0 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > @ @ - 106 , 7 + 106 , 7 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) < nl > } < nl > < nl > override def completeFileUpload ( fileId : Long , fileSize : Long , fileName : String , partNames : Seq [ String ] ) : Future [ Unit ] = { < nl > - val fileDir = File ( s " $ storageLocation / $ fileId " ) < nl > + val fileDir = fileDirectory ( fileId ) < nl > for { < nl > isComplete ← haveAllParts ( fileDir , partNames , fileSize ) < nl > result ← concatFiles ( fileDir , partNames , fileName , fileSize )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / RequestSigning . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / RequestSigning . scala < nl > index 022fbb0 . . 1d3a85a 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / RequestSigning . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / RequestSigning . scala < nl > @ @ - 19 , 8 + 19 , 7 @ @ trait RequestSigning extends ACLBase { < nl > calculateSignature ( httpVerb , uri , secretKey ( ) ) < nl > < nl > def calculateSignature ( httpVerb : HttpMethod , uri : Uri , secret : String ) : String = { < nl > - val canonicalUri = urlEncode ( uri . withQuery ( Uri . Query . Empty ) . toString ) < nl > - < nl > + val resourcePath = uri . path < nl > val canonicalQueryString = uri . query ( ) sortBy ( _ . _ 1 ) map { < nl > case ( name , value ) ⇒ < nl > s " $ { urlEncode ( name ) } = $ { urlEncode ( value ) } " < nl > @ @ - 28 , 7 + 27 , 7 @ @ trait RequestSigning extends ACLBase { < nl > < nl > val canonicalRequest = < nl > s " " " $ httpVerb < nl > - | $ canonicalUri < nl > + | $ resourcePath < nl > | $ canonicalQueryString " " " . stripMargin < nl > < nl > HmacUtils . hmacSha256Hex ( secret , sha256Hex ( canonicalRequest ) )

TEST DIFF:
diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 index 1772deb . . 7f9df65 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 @ @ - 69 , 10 + 69 , 12 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { 
 getFile ( fileId , optName getOrElse " " ) 
 
 protected def getFile ( fileId : Long , name : String ) : Future [ File ] = 
 - Future ( file " $ storageLocation / $ fileId / $ { getFileName ( name ) } " ) 
 + Future ( fileDirectory ( fileId ) / getFileName ( name ) ) 
 
 protected def getFileName ( name : String ) = if ( name . trim . isEmpty ) " file " else name 
 
 - private def getOrCreateFileDir ( fileId : Long ) = file " $ storageLocation / $ fileId " . createIfNotExists ( asDirectory = true ) 
 + protected def fileDirectory ( fileId : Long ) : File = file " $ storageLocation / file _ $ { fileId } " 
 + 
 + private def getOrCreateFileDir ( fileId : Long ) = fileDirectory ( fileId ) . createIfNotExists ( asDirectory = true ) 
 
 } 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 index 4ec8905 . . 16995c0 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 @ @ - 106 , 7 + 106 , 7 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) 
 } 
 
 override def completeFileUpload ( fileId : Long , fileSize : Long , fileName : String , partNames : Seq [ String ] ) : Future [ Unit ] = { 
 - val fileDir = File ( s " $ storageLocation / $ fileId " ) 
 + val fileDir = fileDirectory ( fileId ) 
 for { 
 isComplete ← haveAllParts ( fileDir , partNames , fileSize ) 
 result ← concatFiles ( fileDir , partNames , fileName , fileSize )

NEAREST DIFF:
diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / RequestSigning . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / RequestSigning . scala 
 index 022fbb0 . . 1d3a85a 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / RequestSigning . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / RequestSigning . scala 
 @ @ - 19 , 8 + 19 , 7 @ @ trait RequestSigning extends ACLBase { 
 calculateSignature ( httpVerb , uri , secretKey ( ) ) 
 
 def calculateSignature ( httpVerb : HttpMethod , uri : Uri , secret : String ) : String = { 
 - val canonicalUri = urlEncode ( uri . withQuery ( Uri . Query . Empty ) . toString ) 
 - 
 + val resourcePath = uri . path 
 val canonicalQueryString = uri . query ( ) sortBy ( _ . _ 1 ) map { 
 case ( name , value ) ⇒ 
 s " $ { urlEncode ( name ) } = $ { urlEncode ( value ) } " 
 @ @ - 28 , 7 + 27 , 7 @ @ trait RequestSigning extends ACLBase { 
 
 val canonicalRequest = 
 s " " " $ httpVerb 
 - | $ canonicalUri 
 + | $ resourcePath 
 | $ canonicalQueryString " " " . stripMargin 
 
 HmacUtils . hmacSha256Hex ( secret , sha256Hex ( canonicalRequest ) )
