BLEU SCORE: 0.2134144322916053

TEST MSG: fix ( server : webrtc ) : send UpdateCallHandled to own devices
GENERATED MSG: fix ( server : eventbus ) : check if eventbus exists on keep alive

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > index 703b739 . . aefea58 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > @ @ - 16 , 7 + 16 , 7 @ @ object EventBus { < nl > type EventBusId = String < nl > type DeviceId = Long < nl > < nl > - final case class Message ( id : String , userId : Int , message : Array [ Byte ] ) < nl > + final case class Message ( id : String , userId : Int , authId : Long , message : Array [ Byte ] ) < nl > final case class Disposed ( id : String ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > index ee75c1b . . c9fbc73 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > @ @ - 152 , 7 + 152 , 7 @ @ final class EventBusMediator extends Actor with ActorLogging { < nl > < nl > authIds foreach ( weakExt . pushUpdate ( _ , update , None , None ) ) < nl > < nl > - val msg = EventBus . Message ( id , clientUserId , message ) < nl > + val msg = EventBus . Message ( id , clientUserId , clientAuthId , message ) < nl > this . internalConsumers foreach ( _ ! msg ) < nl > < nl > sender ( ) ! PostAck < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / WeakUpdatesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / WeakUpdatesExtension . scala < nl > index 691a8cd . . 3dcd7be 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / WeakUpdatesExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / WeakUpdatesExtension . scala < nl > @ @ - 25 , 13 + 25 , 13 @ @ final class WeakUpdatesExtensionImpl ( system : ActorSystem ) extends WeakUpdatesExt < nl > def broadcastUsersWeakUpdate ( userIds : Seq [ Int ] , update : Update , reduceKey : Option [ String ] = None , group : Option [ String ] = None ) : Future [ Unit ] = < nl > Future . sequence ( userIds map ( broadcastUserWeakUpdate ( _ , update , reduceKey , group ) ) ) map ( _ ⇒ ( ) ) < nl > < nl > - def broadcastUserWeakUpdate ( userId : Int , update : Update , reduceKey : Option [ String ] = None , group : Option [ String ] = None ) : Future [ Unit ] = { < nl > + def broadcastUserWeakUpdate ( userId : Int , update : Update , reduceKey : Option [ String ] = None , group : Option [ String ] = None , excludeAuthIds : Set [ Long ] = Set . empty ) : Future [ Unit ] = { < nl > val header = update . header < nl > val serializedData = update . toByteArray < nl > val msg = PushUpdate ( header , serializedData , reduceKey , group ) < nl > < nl > for ( authIds ← userExt . getAuthIds ( userId ) ) yield { < nl > - authIds foreach { authId ⇒ < nl > + ( authIds . toSet - - excludeAuthIds ) foreach { authId ⇒ < nl > region . ref ! Envelope ( authId , msg ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index 0e5d6f7 . . 272fafc 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 113 , 11 + 113 , 11 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > < nl > { < nl > case EventBus . Disposed ( _ ) ⇒ end ( ) < nl > - case EventBus . Message ( _ , userId , message ) ⇒ < nl > + case EventBus . Message ( _ , userId , authId , message ) ⇒ < nl > ApiWebRTCSignaling . parseFrom ( message ) . right foreach { < nl > case ApiAnswerCall ⇒ < nl > scheduledUpd foreach ( _ . cancel ( ) ) < nl > - weakUpdExt . broadcastUsersWeakUpdate ( participants . filterNot ( _ = = userId ) , UpdateCallHandled ( id ) ) < nl > + weakUpdExt . broadcastUserWeakUpdate ( userId , UpdateCallHandled ( id ) , excludeAuthIds = Set ( authId ) ) < nl > context become callInProgress ( eventBusId , System . currentTimeMillis ( ) , callerUserId , participants ) < nl > case ApiEndCall ⇒ < nl > scheduledUpd foreach ( _ . cancel ( ) )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > index 4a906d3 . . 703b739 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > @ @ - 60 , 8 + 60 , 8 @ @ final class EventBusExtension ( system : ActorSystem ) extends Extension { < nl > message : Array [ Byte ] < nl > ) : Future [ Unit ] = ( region ? EventBusEnvelope ( id , Post ( clientUserId , clientAuthId , destinations , message ) ) ) map ( _ ⇒ ( ) ) < nl > < nl > - def keepAlive ( clientAuthId : AuthId , id : String , timeout : Option [ Long ] ) : Unit = < nl > - region ? EventBusEnvelope ( id , KeepAlive ( clientAuthId , timeout ) ) < nl > + def keepAlive ( clientAuthId : AuthId , id : String , timeout : Option [ Long ] ) : Future [ Unit ] = < nl > + region ? EventBusEnvelope ( id , KeepAlive ( clientAuthId , timeout ) ) map ( _ ⇒ ( ) ) < nl > < nl > def join ( clientUserId : UserId , clientAuthId : AuthId , id : String , timeout : Option [ Long ] ) : Future [ DeviceId ] = < nl > ( region ? EventBusEnvelope ( id , Join ( clientUserId , clientAuthId , timeout ) ) ) . mapTo [ JoinAck ] map ( _ . deviceId ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > index acde905 . . 021c698 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > @ @ - 38 , 6 + 38 , 7 @ @ private [ eventbus ] object EventBusMessages { < nl > case object PostAck < nl > < nl > final case class KeepAlive ( clientAuthId : AuthId , timeout : Option [ Long ] ) extends EventBusMessage < nl > + case object KeepAliveAck < nl > < nl > final case class Join ( clientUserId : UserId , clientAuthId : AuthId , timeout : Option [ Long ] ) extends EventBusMessage < nl > final case class JoinAck ( deviceId : DeviceId ) < nl > @ @ - 155 , 6 + 156 , 7 @ @ final class EventBusMediator extends Actor with ActorLogging { < nl > case Some ( timeout ) ⇒ consumers . keepAlive ( clientAuthId , timeout ) < nl > case None ⇒ consumers . stopKeepAlive ( clientAuthId ) < nl > } < nl > + sender ( ) ! KeepAliveAck < nl > case ConsumerTimedOut ( authId ) ⇒ < nl > if ( ( owner . isDefined & & consumers . ownerAuthIds = = Set ( authId ) ) | | consumers . authIds = = Set ( authId ) ) { < nl > log . debug ( " Disposing as no more clients connected " ) < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / eventbus / EventBusServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / eventbus / EventBusServiceImpl . scala < nl > index 097bc04 . . 3c9c919 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / eventbus / EventBusServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / eventbus / EventBusServiceImpl . scala < nl > @ @ - 56 , 8 + 56 , 8 @ @ final class EventbusServiceImpl ( system : ActorSystem ) extends EventbusService { < nl > clientData : ClientData < nl > ) : Future [ HandlerResult [ ResponseVoid ] ] = < nl > authorized ( clientData ) { client ⇒ < nl > - ext . keepAlive ( client . authId , id , timeout ) < nl > - FastFuture . successful ( Ok ( ResponseVoid ) ) < nl > + for ( _ ← ext . keepAlive ( client . authId , id , timeout ) ) < nl > + yield Ok ( ResponseVoid ) < nl > } recover { < nl > case EventBusErrors . EventBusNotFound ⇒ EventBusRpcErrors . EventBusNotFound < nl > } < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / eventbus / EventbusServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / eventbus / EventbusServiceSpec . scala < nl > index 5610cc3 . . 414a6e7 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / eventbus / EventbusServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / eventbus / EventbusServiceSpec . scala < nl > @ @ - 59 , 5 + 59 , 13 @ @ final class EventbusServiceSpec < nl > Thread . sleep ( 1000 ) < nl > < nl > expectWeakUpdate ( aliceAuthId , aliceSessionId ) ( aliceProbe ) . updateHeader shouldBe UpdateEventBusDisposed . header < nl > + < nl > + { < nl > + implicit val clientData = aliceClientData < nl > + < nl > + whenReady ( service . handleKeepAliveEventBus ( id , Some ( 1000 ) ) ) { < nl > + case Error ( _ ) ⇒ < nl > + } < nl > + } < nl > } < nl > } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 index 703b739 . . aefea58 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 @ @ - 16 , 7 + 16 , 7 @ @ object EventBus { 
 type EventBusId = String 
 type DeviceId = Long 
 
 - final case class Message ( id : String , userId : Int , message : Array [ Byte ] ) 
 + final case class Message ( id : String , userId : Int , authId : Long , message : Array [ Byte ] ) 
 final case class Disposed ( id : String ) 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 index ee75c1b . . c9fbc73 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 @ @ - 152 , 7 + 152 , 7 @ @ final class EventBusMediator extends Actor with ActorLogging { 
 
 authIds foreach ( weakExt . pushUpdate ( _ , update , None , None ) ) 
 
 - val msg = EventBus . Message ( id , clientUserId , message ) 
 + val msg = EventBus . Message ( id , clientUserId , clientAuthId , message ) 
 this . internalConsumers foreach ( _ ! msg ) 
 
 sender ( ) ! PostAck 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / WeakUpdatesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / WeakUpdatesExtension . scala 
 index 691a8cd . . 3dcd7be 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / WeakUpdatesExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / WeakUpdatesExtension . scala 
 @ @ - 25 , 13 + 25 , 13 @ @ final class WeakUpdatesExtensionImpl ( system : ActorSystem ) extends WeakUpdatesExt 
 def broadcastUsersWeakUpdate ( userIds : Seq [ Int ] , update : Update , reduceKey : Option [ String ] = None , group : Option [ String ] = None ) : Future [ Unit ] = 
 Future . sequence ( userIds map ( broadcastUserWeakUpdate ( _ , update , reduceKey , group ) ) ) map ( _ ⇒ ( ) ) 
 
 - def broadcastUserWeakUpdate ( userId : Int , update : Update , reduceKey : Option [ String ] = None , group : Option [ String ] = None ) : Future [ Unit ] = { 
 + def broadcastUserWeakUpdate ( userId : Int , update : Update , reduceKey : Option [ String ] = None , group : Option [ String ] = None , excludeAuthIds : Set [ Long ] = Set . empty ) : Future [ Unit ] = { 
 val header = update . header 
 val serializedData = update . toByteArray 
 val msg = PushUpdate ( header , serializedData , reduceKey , group ) 
 
 for ( authIds ← userExt . getAuthIds ( userId ) ) yield { 
 - authIds foreach { authId ⇒ 
 + ( authIds . toSet - - excludeAuthIds ) foreach { authId ⇒ 
 region . ref ! Envelope ( authId , msg ) 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index 0e5d6f7 . . 272fafc 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 113 , 11 + 113 , 11 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 
 { 
 case EventBus . Disposed ( _ ) ⇒ end ( ) 
 - case EventBus . Message ( _ , userId , message ) ⇒ 
 + case EventBus . Message ( _ , userId , authId , message ) ⇒ 
 ApiWebRTCSignaling . parseFrom ( message ) . right foreach { 
 case ApiAnswerCall ⇒ 
 scheduledUpd foreach ( _ . cancel ( ) ) 
 - weakUpdExt . broadcastUsersWeakUpdate ( participants . filterNot ( _ = = userId ) , UpdateCallHandled ( id ) ) 
 + weakUpdExt . broadcastUserWeakUpdate ( userId , UpdateCallHandled ( id ) , excludeAuthIds = Set ( authId ) ) 
 context become callInProgress ( eventBusId , System . currentTimeMillis ( ) , callerUserId , participants ) 
 case ApiEndCall ⇒ 
 scheduledUpd foreach ( _ . cancel ( ) )

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 index 4a906d3 . . 703b739 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 @ @ - 60 , 8 + 60 , 8 @ @ final class EventBusExtension ( system : ActorSystem ) extends Extension { 
 message : Array [ Byte ] 
 ) : Future [ Unit ] = ( region ? EventBusEnvelope ( id , Post ( clientUserId , clientAuthId , destinations , message ) ) ) map ( _ ⇒ ( ) ) 
 
 - def keepAlive ( clientAuthId : AuthId , id : String , timeout : Option [ Long ] ) : Unit = 
 - region ? EventBusEnvelope ( id , KeepAlive ( clientAuthId , timeout ) ) 
 + def keepAlive ( clientAuthId : AuthId , id : String , timeout : Option [ Long ] ) : Future [ Unit ] = 
 + region ? EventBusEnvelope ( id , KeepAlive ( clientAuthId , timeout ) ) map ( _ ⇒ ( ) ) 
 
 def join ( clientUserId : UserId , clientAuthId : AuthId , id : String , timeout : Option [ Long ] ) : Future [ DeviceId ] = 
 ( region ? EventBusEnvelope ( id , Join ( clientUserId , clientAuthId , timeout ) ) ) . mapTo [ JoinAck ] map ( _ . deviceId ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 index acde905 . . 021c698 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 @ @ - 38 , 6 + 38 , 7 @ @ private [ eventbus ] object EventBusMessages { 
 case object PostAck 
 
 final case class KeepAlive ( clientAuthId : AuthId , timeout : Option [ Long ] ) extends EventBusMessage 
 + case object KeepAliveAck 
 
 final case class Join ( clientUserId : UserId , clientAuthId : AuthId , timeout : Option [ Long ] ) extends EventBusMessage 
 final case class JoinAck ( deviceId : DeviceId ) 
 @ @ - 155 , 6 + 156 , 7 @ @ final class EventBusMediator extends Actor with ActorLogging { 
 case Some ( timeout ) ⇒ consumers . keepAlive ( clientAuthId , timeout ) 
 case None ⇒ consumers . stopKeepAlive ( clientAuthId ) 
 } 
 + sender ( ) ! KeepAliveAck 
 case ConsumerTimedOut ( authId ) ⇒ 
 if ( ( owner . isDefined & & consumers . ownerAuthIds = = Set ( authId ) ) | | consumers . authIds = = Set ( authId ) ) { 
 log . debug ( " Disposing as no more clients connected " ) 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / eventbus / EventBusServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / eventbus / EventBusServiceImpl . scala 
 index 097bc04 . . 3c9c919 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / eventbus / EventBusServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / eventbus / EventBusServiceImpl . scala 
 @ @ - 56 , 8 + 56 , 8 @ @ final class EventbusServiceImpl ( system : ActorSystem ) extends EventbusService { 
 clientData : ClientData 
 ) : Future [ HandlerResult [ ResponseVoid ] ] = 
 authorized ( clientData ) { client ⇒ 
 - ext . keepAlive ( client . authId , id , timeout ) 
 - FastFuture . successful ( Ok ( ResponseVoid ) ) 
 + for ( _ ← ext . keepAlive ( client . authId , id , timeout ) ) 
 + yield Ok ( ResponseVoid ) 
 } recover { 
 case EventBusErrors . EventBusNotFound ⇒ EventBusRpcErrors . EventBusNotFound 
 } 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / eventbus / EventbusServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / eventbus / EventbusServiceSpec . scala 
 index 5610cc3 . . 414a6e7 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / eventbus / EventbusServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / eventbus / EventbusServiceSpec . scala 
 @ @ - 59 , 5 + 59 , 13 @ @ final class EventbusServiceSpec 
 Thread . sleep ( 1000 ) 
 
 expectWeakUpdate ( aliceAuthId , aliceSessionId ) ( aliceProbe ) . updateHeader shouldBe UpdateEventBusDisposed . header 
 + 
 + { 
 + implicit val clientData = aliceClientData 
 + 
 + whenReady ( service . handleKeepAliveEventBus ( id , Some ( 1000 ) ) ) { 
 + case Error ( _ ) ⇒ 
 + } 
 + } 
 } 
 } 
 \ No newline at end of file
