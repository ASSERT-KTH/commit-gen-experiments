BLEU SCORE: 0.345720784641941

TEST MSG: perf ( iOS ) : Disable delayed load
GENERATED MSG: fix ( iOS ) : Fixing blinking

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAConversationContentController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAConversationContentController . swift < nl > index c84fd28 . . 3d72d55 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAConversationContentController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAConversationContentController . swift < nl > @ @ - 12 , 6 + 12 , 8 @ @ public class AAConversationContentController : SLKTextViewController , ARDisplayLi < nl > < nl > public let peer : ACPeer < nl > < nl > + private let delayLoad = false < nl > + < nl > private var displayList : ARBindedDisplayList ! < nl > private var isStarted : Bool = AADevice . isiPad < nl > private var isVisible : Bool = false < nl > @ @ - 64 , 27 + 66 , 44 @ @ public class AAConversationContentController : SLKTextViewController , ARDisplayLi < nl > / / Hack for delaying collection view init from first animation frame < nl > / / This dramatically speed up controller opening < nl > < nl > - if ( isStarted ) { < nl > - if ! isBinded { < nl > - isBinded = true < nl > - self . willUpdate ( ) < nl > - self . collectionViewLayout . beginUpdates ( false , list : self . displayList . getProcessedList ( ) as ? AAPreprocessedList , unread : unreadMessageId ) < nl > - self . collectionView . reloadData ( ) < nl > - prevCount = getCount ( ) < nl > - self . displayList . addAppleListener ( self ) < nl > - self . didUpdate ( ) < nl > - } < nl > - return < nl > - } else { < nl > - self . collectionView . alpha = 0 < nl > - } < nl > - < nl > - dispatch _ async ( dispatch _ get _ main _ queue ( ) , { < nl > - / / What if controller is already closed ? < nl > - if ( ! self . isVisible ) { < nl > + if delayLoad { < nl > + < nl > + if ( isStarted ) { < nl > + if ! isBinded { < nl > + isBinded = true < nl > + self . willUpdate ( ) < nl > + self . collectionViewLayout . beginUpdates ( false , list : self . displayList . getProcessedList ( ) as ? AAPreprocessedList , unread : unreadMessageId ) < nl > + self . collectionView . reloadData ( ) < nl > + prevCount = getCount ( ) < nl > + self . displayList . addAppleListener ( self ) < nl > + self . didUpdate ( ) < nl > + } < nl > return < nl > + } else { < nl > + self . collectionView . alpha = 0 < nl > } < nl > < nl > + dispatch _ async ( dispatch _ get _ main _ queue ( ) , { < nl > + / / What if controller is already closed ? < nl > + if ( ! self . isVisible ) { < nl > + return < nl > + } < nl > + < nl > + self . isStarted = true < nl > + < nl > + UIView . animateWithDuration ( 0 . 6 , animations : { ( ) - > Void in self . collectionView . alpha = 1 } , completion : { ( comp ) - > Void in } ) < nl > + < nl > + if ! self . isBinded { < nl > + self . isBinded = true < nl > + self . willUpdate ( ) < nl > + self . collectionViewLayout . beginUpdates ( false , list : self . displayList . getProcessedList ( ) as ? AAPreprocessedList , unread : self . unreadMessageId ) < nl > + self . collectionView . reloadData ( ) < nl > + self . prevCount = self . getCount ( ) < nl > + self . displayList . addAppleListener ( self ) < nl > + self . didUpdate ( ) < nl > + } < nl > + } ) < nl > + } else { < nl > self . isStarted = true < nl > < nl > UIView . animateWithDuration ( 0 . 6 , animations : { ( ) - > Void in self . collectionView . alpha = 1 } , completion : { ( comp ) - > Void in } ) < nl > @ @ - 98 , 7 + 117 , 7 @ @ public class AAConversationContentController : SLKTextViewController , ARDisplayLi < nl > self . displayList . addAppleListener ( self ) < nl > self . didUpdate ( ) < nl > } < nl > - } ) ; < nl > + } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAConversationContentController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAConversationContentController . swift < nl > index e5c3058 . . c84fd28 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAConversationContentController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAConversationContentController . swift < nl > @ @ - 23 , 6 + 23 , 7 @ @ public class AAConversationContentController : SLKTextViewController , ARDisplayLi < nl > private var unreadMessageId : jlong = 0 < nl > < nl > private var isUpdating : Bool = false < nl > + private var isBinded : Bool = false < nl > private var pendingUpdates = [ ARAppleListUpdate ] ( ) < nl > < nl > / / Audio notes < nl > @ @ - 58 , 27 + 59 , 21 @ @ public class AAConversationContentController : SLKTextViewController , ARDisplayLi < nl > public override func viewWillAppear ( animated : Bool ) { < nl > super . viewWillAppear ( animated ) < nl > < nl > - / / self . collectionView . contentInset = UIEdgeInsets ( top : 32 , left : 0 , bottom : 200 , right : 0 ) < nl > - < nl > isVisible = true < nl > < nl > / / Hack for delaying collection view init from first animation frame < nl > / / This dramatically speed up controller opening < nl > < nl > - / / NSLog ( " ? ? ? ? viewWillAppear " ) < nl > - < nl > if ( isStarted ) { < nl > - / / NSLog ( " ? ? ? ? isStarted : true " ) < nl > - self . willUpdate ( ) < nl > - / / NSLog ( " ? ? ? ? willUpdate Called " ) < nl > - self . collectionViewLayout . beginUpdates ( false , list : self . displayList . getProcessedList ( ) as ? AAPreprocessedList , unread : unreadMessageId ) < nl > - / / NSLog ( " ? ? ? ? beginUpdates called " ) < nl > - self . collectionView . reloadData ( ) < nl > - prevCount = getCount ( ) < nl > - / / NSLog ( " ? ? ? ? count : \ ( prevCount ) " ) < nl > - self . displayList . addAppleListener ( self ) < nl > - self . didUpdate ( ) < nl > - / / NSLog ( " ? ? ? ? didUpdate Called " ) < nl > + if ! isBinded { < nl > + isBinded = true < nl > + self . willUpdate ( ) < nl > + self . collectionViewLayout . beginUpdates ( false , list : self . displayList . getProcessedList ( ) as ? AAPreprocessedList , unread : unreadMessageId ) < nl > + self . collectionView . reloadData ( ) < nl > + prevCount = getCount ( ) < nl > + self . displayList . addAppleListener ( self ) < nl > + self . didUpdate ( ) < nl > + } < nl > return < nl > } else { < nl > self . collectionView . alpha = 0 < nl > @ @ - 92 , 20 + 87 , 17 @ @ public class AAConversationContentController : SLKTextViewController , ARDisplayLi < nl > < nl > self . isStarted = true < nl > < nl > - / / NSLog ( " ? ? ? ? isStarted : false " ) < nl > - < nl > UIView . animateWithDuration ( 0 . 6 , animations : { ( ) - > Void in self . collectionView . alpha = 1 } , completion : { ( comp ) - > Void in } ) < nl > < nl > - self . willUpdate ( ) < nl > - / / NSLog ( " ? ? ? ? willUpdate Called " ) < nl > - self . collectionViewLayout . beginUpdates ( false , list : self . displayList . getProcessedList ( ) as ? AAPreprocessedList , unread : self . unreadMessageId ) < nl > - / / NSLog ( " ? ? ? ? beginUpdates called " ) < nl > - self . collectionView . reloadData ( ) < nl > - self . prevCount = self . getCount ( ) < nl > - / / NSLog ( " ? ? ? ? count : \ ( self . prevCount ) " ) < nl > - self . displayList . addAppleListener ( self ) < nl > - self . didUpdate ( ) < nl > - / / NSLog ( " ? ? ? ? didUpdate Called " ) < nl > + if ! self . isBinded { < nl > + self . isBinded = true < nl > + self . willUpdate ( ) < nl > + self . collectionViewLayout . beginUpdates ( false , list : self . displayList . getProcessedList ( ) as ? AAPreprocessedList , unread : self . unreadMessageId ) < nl > + self . collectionView . reloadData ( ) < nl > + self . prevCount = self . getCount ( ) < nl > + self . displayList . addAppleListener ( self ) < nl > + self . didUpdate ( ) < nl > + } < nl > } ) ; < nl > } < nl > < nl > @ @ - 174 , 13 + 166 , 17 @ @ public class AAConversationContentController : SLKTextViewController , ARDisplayLi < nl > return cell < nl > } < nl > < nl > - public override func viewWillDisappear ( animated : Bool ) { < nl > - super . viewWillDisappear ( animated ) < nl > + public override func viewDidDisappear ( animated : Bool ) { < nl > + super . viewDidDisappear ( animated ) < nl > < nl > isVisible = false < nl > < nl > - / / Remove listener on exit < nl > - self . displayList . removeAppleListener ( self ) < nl > + if isBinded { < nl > + isBinded = false < nl > + < nl > + / / Remove listener on exit < nl > + self . displayList . removeAppleListener ( self ) < nl > + } < nl > } < nl > < nl > / / Model updates < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleTextCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleTextCell . swift < nl > index d68c372 . . befb56c 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleTextCell . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleTextCell . swift < nl > @ @ - 40 , 7 + 40 , 7 @ @ public class AABubbleTextCell : AABubbleCell { < nl > < nl > messageText . displaysAsynchronously = true < nl > messageText . ignoreCommonProperties = true < nl > - messageText . clearContentsBeforeAsynchronouslyDisplay = false < nl > + messageText . clearContentsBeforeAsynchronouslyDisplay = true < nl > messageText . fadeOnAsynchronouslyDisplay = true < nl > messageText . highlightTapAction = { ( containerView : UIView , text : NSAttributedString , range : NSRange , rect : CGRect ) - > ( ) in < nl > let attributes = text . attributesAtIndex ( range . location , effectiveRange : nil ) < nl > @ @ - 64 , 10 + 64 , 10 @ @ public class AABubbleTextCell : AABubbleCell { < nl > senderNameLabel . displaysAsynchronously = true < nl > senderNameLabel . ignoreCommonProperties = true < nl > senderNameLabel . fadeOnAsynchronouslyDisplay = true < nl > - senderNameLabel . clearContentsBeforeAsynchronouslyDisplay = false < nl > + senderNameLabel . clearContentsBeforeAsynchronouslyDisplay = true < nl > < nl > dateText . displaysAsynchronously = true < nl > - dateText . clearContentsBeforeAsynchronouslyDisplay = false < nl > + dateText . clearContentsBeforeAsynchronouslyDisplay = true < nl > dateText . fadeOnAsynchronouslyDisplay = true < nl > dateText . font = AABubbleTextCell . dateFont < nl > dateText . lineBreakMode = . ByClipping < nl > @ @ - 147 , 44 + 147 , 38 @ @ public class AABubbleTextCell : AABubbleCell { < nl > < nl > / / Always update date and state < nl > dateText . text = cellLayout . date < nl > - messageState = message . messageState . ordinal ( ) ; < nl > + messageState = message . messageState . ordinal ( ) < nl > < nl > if ( isOut ) { < nl > switch ( self . messageState ) { < nl > case ACMessageState . PENDING ( ) . ordinal ( ) : < nl > - self . statusView . image = appStyle . chatIconClock ; < nl > + self . statusView . image = appStyle . chatIconClock < nl > self . statusView . tintColor = appStyle . chatStatusSending < nl > break ; < nl > case ACMessageState . SENT ( ) . ordinal ( ) : < nl > - self . statusView . image = appStyle . chatIconCheck1 ; < nl > + self . statusView . image = appStyle . chatIconCheck1 < nl > self . statusView . tintColor = appStyle . chatStatusSent < nl > break ; < nl > case ACMessageState . RECEIVED ( ) . ordinal ( ) : < nl > - self . statusView . image = appStyle . chatIconCheck2 ; < nl > + self . statusView . image = appStyle . chatIconCheck2 < nl > self . statusView . tintColor = appStyle . chatStatusReceived < nl > break ; < nl > case ACMessageState . READ ( ) . ordinal ( ) : < nl > - self . statusView . image = appStyle . chatIconCheck2 ; < nl > + self . statusView . image = appStyle . chatIconCheck2 < nl > self . statusView . tintColor = appStyle . chatStatusRead < nl > break ; < nl > case ACMessageState . ERROR ( ) . ordinal ( ) : < nl > - self . statusView . image = appStyle . chatIconError ; < nl > + self . statusView . image = appStyle . chatIconError < nl > self . statusView . tintColor = appStyle . chatStatusError < nl > break < nl > default : < nl > - self . statusView . image = appStyle . chatIconClock ; < nl > + self . statusView . image = appStyle . chatIconClock < nl > self . statusView . tintColor = appStyle . chatStatusSending < nl > break ; < nl > } < nl > } < nl > } < nl > < nl > - public override func prepareForReuse ( ) { < nl > - super . prepareForReuse ( ) < nl > - < nl > - / / self . messageText . layer . contents = nil < nl > - } < nl > - < nl > / / Menu for Text cell < nl > < nl > public override func canPerformAction ( action : Selector , withSender sender : AnyObject ? ) - > Bool {

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAConversationContentController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAConversationContentController . swift 
 index c84fd28 . . 3d72d55 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAConversationContentController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAConversationContentController . swift 
 @ @ - 12 , 6 + 12 , 8 @ @ public class AAConversationContentController : SLKTextViewController , ARDisplayLi 
 
 public let peer : ACPeer 
 
 + private let delayLoad = false 
 + 
 private var displayList : ARBindedDisplayList ! 
 private var isStarted : Bool = AADevice . isiPad 
 private var isVisible : Bool = false 
 @ @ - 64 , 27 + 66 , 44 @ @ public class AAConversationContentController : SLKTextViewController , ARDisplayLi 
 / / Hack for delaying collection view init from first animation frame 
 / / This dramatically speed up controller opening 
 
 - if ( isStarted ) { 
 - if ! isBinded { 
 - isBinded = true 
 - self . willUpdate ( ) 
 - self . collectionViewLayout . beginUpdates ( false , list : self . displayList . getProcessedList ( ) as ? AAPreprocessedList , unread : unreadMessageId ) 
 - self . collectionView . reloadData ( ) 
 - prevCount = getCount ( ) 
 - self . displayList . addAppleListener ( self ) 
 - self . didUpdate ( ) 
 - } 
 - return 
 - } else { 
 - self . collectionView . alpha = 0 
 - } 
 - 
 - dispatch _ async ( dispatch _ get _ main _ queue ( ) , { 
 - / / What if controller is already closed ? 
 - if ( ! self . isVisible ) { 
 + if delayLoad { 
 + 
 + if ( isStarted ) { 
 + if ! isBinded { 
 + isBinded = true 
 + self . willUpdate ( ) 
 + self . collectionViewLayout . beginUpdates ( false , list : self . displayList . getProcessedList ( ) as ? AAPreprocessedList , unread : unreadMessageId ) 
 + self . collectionView . reloadData ( ) 
 + prevCount = getCount ( ) 
 + self . displayList . addAppleListener ( self ) 
 + self . didUpdate ( ) 
 + } 
 return 
 + } else { 
 + self . collectionView . alpha = 0 
 } 
 
 + dispatch _ async ( dispatch _ get _ main _ queue ( ) , { 
 + / / What if controller is already closed ? 
 + if ( ! self . isVisible ) { 
 + return 
 + } 
 + 
 + self . isStarted = true 
 + 
 + UIView . animateWithDuration ( 0 . 6 , animations : { ( ) - > Void in self . collectionView . alpha = 1 } , completion : { ( comp ) - > Void in } ) 
 + 
 + if ! self . isBinded { 
 + self . isBinded = true 
 + self . willUpdate ( ) 
 + self . collectionViewLayout . beginUpdates ( false , list : self . displayList . getProcessedList ( ) as ? AAPreprocessedList , unread : self . unreadMessageId ) 
 + self . collectionView . reloadData ( ) 
 + self . prevCount = self . getCount ( ) 
 + self . displayList . addAppleListener ( self ) 
 + self . didUpdate ( ) 
 + } 
 + } ) 
 + } else { 
 self . isStarted = true 
 
 UIView . animateWithDuration ( 0 . 6 , animations : { ( ) - > Void in self . collectionView . alpha = 1 } , completion : { ( comp ) - > Void in } ) 
 @ @ - 98 , 7 + 117 , 7 @ @ public class AAConversationContentController : SLKTextViewController , ARDisplayLi 
 self . displayList . addAppleListener ( self ) 
 self . didUpdate ( ) 
 } 
 - } ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAConversationContentController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAConversationContentController . swift 
 index e5c3058 . . c84fd28 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAConversationContentController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / AAConversationContentController . swift 
 @ @ - 23 , 6 + 23 , 7 @ @ public class AAConversationContentController : SLKTextViewController , ARDisplayLi 
 private var unreadMessageId : jlong = 0 
 
 private var isUpdating : Bool = false 
 + private var isBinded : Bool = false 
 private var pendingUpdates = [ ARAppleListUpdate ] ( ) 
 
 / / Audio notes 
 @ @ - 58 , 27 + 59 , 21 @ @ public class AAConversationContentController : SLKTextViewController , ARDisplayLi 
 public override func viewWillAppear ( animated : Bool ) { 
 super . viewWillAppear ( animated ) 
 
 - / / self . collectionView . contentInset = UIEdgeInsets ( top : 32 , left : 0 , bottom : 200 , right : 0 ) 
 - 
 isVisible = true 
 
 / / Hack for delaying collection view init from first animation frame 
 / / This dramatically speed up controller opening 
 
 - / / NSLog ( " ? ? ? ? viewWillAppear " ) 
 - 
 if ( isStarted ) { 
 - / / NSLog ( " ? ? ? ? isStarted : true " ) 
 - self . willUpdate ( ) 
 - / / NSLog ( " ? ? ? ? willUpdate Called " ) 
 - self . collectionViewLayout . beginUpdates ( false , list : self . displayList . getProcessedList ( ) as ? AAPreprocessedList , unread : unreadMessageId ) 
 - / / NSLog ( " ? ? ? ? beginUpdates called " ) 
 - self . collectionView . reloadData ( ) 
 - prevCount = getCount ( ) 
 - / / NSLog ( " ? ? ? ? count : \ ( prevCount ) " ) 
 - self . displayList . addAppleListener ( self ) 
 - self . didUpdate ( ) 
 - / / NSLog ( " ? ? ? ? didUpdate Called " ) 
 + if ! isBinded { 
 + isBinded = true 
 + self . willUpdate ( ) 
 + self . collectionViewLayout . beginUpdates ( false , list : self . displayList . getProcessedList ( ) as ? AAPreprocessedList , unread : unreadMessageId ) 
 + self . collectionView . reloadData ( ) 
 + prevCount = getCount ( ) 
 + self . displayList . addAppleListener ( self ) 
 + self . didUpdate ( ) 
 + } 
 return 
 } else { 
 self . collectionView . alpha = 0 
 @ @ - 92 , 20 + 87 , 17 @ @ public class AAConversationContentController : SLKTextViewController , ARDisplayLi 
 
 self . isStarted = true 
 
 - / / NSLog ( " ? ? ? ? isStarted : false " ) 
 - 
 UIView . animateWithDuration ( 0 . 6 , animations : { ( ) - > Void in self . collectionView . alpha = 1 } , completion : { ( comp ) - > Void in } ) 
 
 - self . willUpdate ( ) 
 - / / NSLog ( " ? ? ? ? willUpdate Called " ) 
 - self . collectionViewLayout . beginUpdates ( false , list : self . displayList . getProcessedList ( ) as ? AAPreprocessedList , unread : self . unreadMessageId ) 
 - / / NSLog ( " ? ? ? ? beginUpdates called " ) 
 - self . collectionView . reloadData ( ) 
 - self . prevCount = self . getCount ( ) 
 - / / NSLog ( " ? ? ? ? count : \ ( self . prevCount ) " ) 
 - self . displayList . addAppleListener ( self ) 
 - self . didUpdate ( ) 
 - / / NSLog ( " ? ? ? ? didUpdate Called " ) 
 + if ! self . isBinded { 
 + self . isBinded = true 
 + self . willUpdate ( ) 
 + self . collectionViewLayout . beginUpdates ( false , list : self . displayList . getProcessedList ( ) as ? AAPreprocessedList , unread : self . unreadMessageId ) 
 + self . collectionView . reloadData ( ) 
 + self . prevCount = self . getCount ( ) 
 + self . displayList . addAppleListener ( self ) 
 + self . didUpdate ( ) 
 + } 
 } ) ; 
 } 
 
 @ @ - 174 , 13 + 166 , 17 @ @ public class AAConversationContentController : SLKTextViewController , ARDisplayLi 
 return cell 
 } 
 
 - public override func viewWillDisappear ( animated : Bool ) { 
 - super . viewWillDisappear ( animated ) 
 + public override func viewDidDisappear ( animated : Bool ) { 
 + super . viewDidDisappear ( animated ) 
 
 isVisible = false 
 
 - / / Remove listener on exit 
 - self . displayList . removeAppleListener ( self ) 
 + if isBinded { 
 + isBinded = false 
 + 
 + / / Remove listener on exit 
 + self . displayList . removeAppleListener ( self ) 
 + } 
 } 
 
 / / Model updates 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleTextCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleTextCell . swift 
 index d68c372 . . befb56c 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleTextCell . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleTextCell . swift 
 @ @ - 40 , 7 + 40 , 7 @ @ public class AABubbleTextCell : AABubbleCell { 
 
 messageText . displaysAsynchronously = true 
 messageText . ignoreCommonProperties = true 
 - messageText . clearContentsBeforeAsynchronouslyDisplay = false 
 + messageText . clearContentsBeforeAsynchronouslyDisplay = true 
 messageText . fadeOnAsynchronouslyDisplay = true 
 messageText . highlightTapAction = { ( containerView : UIView , text : NSAttributedString , range : NSRange , rect : CGRect ) - > ( ) in 
 let attributes = text . attributesAtIndex ( range . location , effectiveRange : nil ) 
 @ @ - 64 , 10 + 64 , 10 @ @ public class AABubbleTextCell : AABubbleCell { 
 senderNameLabel . displaysAsynchronously = true 
 senderNameLabel . ignoreCommonProperties = true 
 senderNameLabel . fadeOnAsynchronouslyDisplay = true 
 - senderNameLabel . clearContentsBeforeAsynchronouslyDisplay = false 
 + senderNameLabel . clearContentsBeforeAsynchronouslyDisplay = true 
 
 dateText . displaysAsynchronously = true 
 - dateText . clearContentsBeforeAsynchronouslyDisplay = false 
 + dateText . clearContentsBeforeAsynchronouslyDisplay = true 
 dateText . fadeOnAsynchronouslyDisplay = true 
 dateText . font = AABubbleTextCell . dateFont 
 dateText . lineBreakMode = . ByClipping 
 @ @ - 147 , 44 + 147 , 38 @ @ public class AABubbleTextCell : AABubbleCell { 
 
 / / Always update date and state 
 dateText . text = cellLayout . date 
 - messageState = message . messageState . ordinal ( ) ; 
 + messageState = message . messageState . ordinal ( ) 
 
 if ( isOut ) { 
 switch ( self . messageState ) { 
 case ACMessageState . PENDING ( ) . ordinal ( ) : 
 - self . statusView . image = appStyle . chatIconClock ; 
 + self . statusView . image = appStyle . chatIconClock 
 self . statusView . tintColor = appStyle . chatStatusSending 
 break ; 
 case ACMessageState . SENT ( ) . ordinal ( ) : 
 - self . statusView . image = appStyle . chatIconCheck1 ; 
 + self . statusView . image = appStyle . chatIconCheck1 
 self . statusView . tintColor = appStyle . chatStatusSent 
 break ; 
 case ACMessageState . RECEIVED ( ) . ordinal ( ) : 
 - self . statusView . image = appStyle . chatIconCheck2 ; 
 + self . statusView . image = appStyle . chatIconCheck2 
 self . statusView . tintColor = appStyle . chatStatusReceived 
 break ; 
 case ACMessageState . READ ( ) . ordinal ( ) : 
 - self . statusView . image = appStyle . chatIconCheck2 ; 
 + self . statusView . image = appStyle . chatIconCheck2 
 self . statusView . tintColor = appStyle . chatStatusRead 
 break ; 
 case ACMessageState . ERROR ( ) . ordinal ( ) : 
 - self . statusView . image = appStyle . chatIconError ; 
 + self . statusView . image = appStyle . chatIconError 
 self . statusView . tintColor = appStyle . chatStatusError 
 break 
 default : 
 - self . statusView . image = appStyle . chatIconClock ; 
 + self . statusView . image = appStyle . chatIconClock 
 self . statusView . tintColor = appStyle . chatStatusSending 
 break ; 
 } 
 } 
 } 
 
 - public override func prepareForReuse ( ) { 
 - super . prepareForReuse ( ) 
 - 
 - / / self . messageText . layer . contents = nil 
 - } 
 - 
 / / Menu for Text cell 
 
 public override func canPerformAction ( action : Selector , withSender sender : AnyObject ? ) - > Bool {
