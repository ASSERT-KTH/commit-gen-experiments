BLEU SCORE: 1.0

TEST MSG: fix ( server ) : fixed compilation error
GENERATED MSG: fix ( server ) : fixed compilation error

TEST DIFF (one line): diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > index 14dd5bf . . 46defbc 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > @ @ - 224 , 8 + 224 , 8 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long , firstMessageId : L < nl > case ni : NewSessionItem ⇒ enqueueNewSession ( ni ) < nl > case pi : PushItem ⇒ enqueuePush ( pi , Some ( messageId ) ) < nl > case ri : RpcItem ⇒ enqueueRpc ( ri , Some ( messageId ) ) < nl > - } else log . debug ( " ScheduledResend for messageId : { } , item : { } , ignoring ( absent in buffer ) " , messageId , item ) < nl > - } < nl > + } < nl > + } else log . debug ( " ScheduledResend for messageId : { } , item : { } , ignoring ( absent in buffer ) " , messageId , item ) < nl > } < nl > < nl > private def increaseBufferSize ( item : ResendableItem ) : Unit = {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala < nl > index 6ee639d . . e114d7a 100644 < nl > - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala < nl > + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala < nl > @ @ - 1 , 7 + 1 , 6 @ @ < nl > package im . actor . server . user < nl > < nl > import akka . actor . { ActorRef , ActorSystem , Props } < nl > - import akka . contrib . pattern . { ClusterSharding , ShardRegion } < nl > < nl > object UserViewRegion { < nl > private def start ( props : Option [ Props ] ) ( implicit system : ActorSystem ) : UserViewRegion = < nl > @ @ - 19 , 7 + 18 , 7 @ @ object UserViewRegion { < nl > implicit < nl > system : ActorSystem < nl > ) : UserViewRegion = < nl > - start ( Some ( UserView . props ) ) < nl > + start ( None ) < nl > < nl > def startProxy ( ) ( implicit system : ActorSystem ) : UserViewRegion = < nl > start ( None )

TEST DIFF:
diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 index 14dd5bf . . 46defbc 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 @ @ - 224 , 8 + 224 , 8 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long , firstMessageId : L 
 case ni : NewSessionItem ⇒ enqueueNewSession ( ni ) 
 case pi : PushItem ⇒ enqueuePush ( pi , Some ( messageId ) ) 
 case ri : RpcItem ⇒ enqueueRpc ( ri , Some ( messageId ) ) 
 - } else log . debug ( " ScheduledResend for messageId : { } , item : { } , ignoring ( absent in buffer ) " , messageId , item ) 
 - } 
 + } 
 + } else log . debug ( " ScheduledResend for messageId : { } , item : { } , ignoring ( absent in buffer ) " , messageId , item ) 
 } 
 
 private def increaseBufferSize ( item : ResendableItem ) : Unit = {

NEAREST DIFF:
diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala 
 index 6ee639d . . e114d7a 100644 
 - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala 
 + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala 
 @ @ - 1 , 7 + 1 , 6 @ @ 
 package im . actor . server . user 
 
 import akka . actor . { ActorRef , ActorSystem , Props } 
 - import akka . contrib . pattern . { ClusterSharding , ShardRegion } 
 
 object UserViewRegion { 
 private def start ( props : Option [ Props ] ) ( implicit system : ActorSystem ) : UserViewRegion = 
 @ @ - 19 , 7 + 18 , 7 @ @ object UserViewRegion { 
 implicit 
 system : ActorSystem 
 ) : UserViewRegion = 
 - start ( Some ( UserView . props ) ) 
 + start ( None ) 
 
 def startProxy ( ) ( implicit system : ActorSystem ) : UserViewRegion = 
 start ( None )
