BLEU SCORE: 0.06916141792551132

TEST MSG: feat ( js ) : Enabling IDLE timeout for going offline
GENERATED MSG: wip ( SDK ) : Adding dialog desc processing and Grouped Dialogs model

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index cb3bc8f . . a994a28 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . core . entity . PeerSearchType ; < nl > import im . actor . core . entity . PeerType ; < nl > import im . actor . core . js . entity . * ; < nl > import im . actor . core . js . modules . JsBindedValueCallback ; < nl > + import im . actor . core . js . modules . JsIdleModule ; < nl > import im . actor . core . js . providers . JsNotificationsProvider ; < nl > import im . actor . core . js . providers . JsPhoneBookProvider ; < nl > import im . actor . core . js . providers . electron . JsElectronApp ; < nl > @ @ - 36 , 6 + 37 , 7 @ @ import im . actor . runtime . js . JsFileSystemProvider ; < nl > import im . actor . runtime . js . fs . JsBlob ; < nl > import im . actor . runtime . js . fs . JsFile ; < nl > import im . actor . runtime . js . mvvm . JsDisplayListCallback ; < nl > + import im . actor . runtime . js . threading . JsSecureInterval ; < nl > import im . actor . runtime . js . utils . JsPromise ; < nl > import im . actor . runtime . js . utils . JsPromiseExecutor ; < nl > import im . actor . runtime . markdown . MarkdownParser ; < nl > @ @ - 130 , 19 + 132 , 6 @ @ public class JsFacade implements Exportable { < nl > < nl > messenger = new JsMessenger ( configuration . build ( ) ) ; < nl > < nl > - if ( isElectron ( ) ) { < nl > - JsElectronApp . subscribe ( " window " , new JsElectronListener ( ) { < nl > - @ Override < nl > - public void onEvent ( String content ) { < nl > - if ( " focus " . equals ( content ) ) { < nl > - messenger . onAppVisible ( ) ; < nl > - } else if ( " blur " . equals ( content ) ) { < nl > - messenger . onAppHidden ( ) ; < nl > - } < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > Log . d ( TAG , " JsMessenger created " ) ; < nl > } < nl > < nl > @ @ - 716 , 7 + 705 , 8 @ @ public class JsFacade implements Exportable { < nl > if ( isElectron ( ) ) { < nl > return ; < nl > } < nl > - messenger . onAppVisible ( ) ; < nl > + < nl > + messenger . getJsIdleModule ( ) . onVisible ( ) ; < nl > } < nl > < nl > public void onAppHidden ( ) { < nl > @ @ - 724 , 7 + 714 , 8 @ @ public class JsFacade implements Exportable { < nl > if ( isElectron ( ) ) { < nl > return ; < nl > } < nl > - messenger . onAppHidden ( ) ; < nl > + < nl > + messenger . getJsIdleModule ( ) . onHidden ( ) ; < nl > } < nl > < nl > public void onConversationOpen ( JsPeer peer ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > index fc1292e . . 85bcd9d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > @ @ - 37 , 7 + 37 , 9 @ @ import im . actor . core . js . entity . JsUser ; < nl > import im . actor . core . js . entity . Placeholders ; < nl > import im . actor . core . js . images . JsImageResize ; < nl > import im . actor . core . js . images . JsResizeListener ; < nl > + import im . actor . core . js . modules . JsIdleModule ; < nl > import im . actor . core . js . providers . electron . JsElectronApp ; < nl > + import im . actor . core . js . providers . electron . JsElectronListener ; < nl > import im . actor . core . js . providers . notification . JsChromePush ; < nl > import im . actor . core . js . providers . notification . JsSafariPush ; < nl > import im . actor . core . js . providers . notification . PushSubscribeResult ; < nl > @ @ - 62 , 6 + 64 , 7 @ @ public class JsMessenger extends Messenger { < nl > return instance ; < nl > } < nl > < nl > + private JsIdleModule jsIdleModule ; < nl > private JsBindingModule jsBindingModule ; < nl > private JsFilesModule filesModule ; < nl > private JsFileSystemProvider fileSystemProvider ; < nl > @ @ - 74 , 32 + 77 , 21 @ @ public class JsMessenger extends Messenger { < nl > jsBindingModule = new JsBindingModule ( this , filesModule , modules ) ; < nl > isElectron = JsElectronApp . isElectron ( ) ; < nl > < nl > - if ( JsChromePush . isSupported ( ) ) { < nl > - Log . d ( " JsMessenger " , " ChromePush Supported " ) ; < nl > - JsChromePush . subscribe ( new PushSubscribeResult ( ) { < nl > + jsIdleModule = new JsIdleModule ( this , modules ) ; < nl > < nl > + if ( isElectron ( ) ) { < nl > + JsElectronApp . subscribe ( " window " , new JsElectronListener ( ) { < nl > @ Override < nl > - public void onSubscribedChrome ( String token ) { < nl > - Log . d ( " JsMessenger " , " Subscribed : " + token ) ; < nl > - registerGooglePush ( 209133700967L , token ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onSubscriptionFailure ( ) { < nl > - Log . d ( " JsMessenger " , " Subscribe failure " ) ; < nl > + public void onEvent ( String content ) { < nl > + if ( " focus " . equals ( content ) ) { < nl > + jsIdleModule . onVisible ( ) ; < nl > + } else if ( " blur " . equals ( content ) ) { < nl > + jsIdleModule . onHidden ( ) ; < nl > + } < nl > } < nl > } ) ; < nl > - } else { < nl > - Log . d ( " JsMessenger " , " ChromePush NOT Supported " ) ; < nl > - } < nl > - if ( JsSafariPush . isSupported ( ) ) { < nl > - Log . d ( " JsMessenger " , " SafariPush Supported " ) ; < nl > - } else { < nl > - Log . d ( " JsMessenger " , " SafariPush NOT Supported " ) ; < nl > } < nl > < nl > - JsMessenger . instance = this ; < nl > - < nl > if ( isElectron ) { < nl > getAppState ( ) . getGlobalTempCounter ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { < nl > @ Override < nl > @ @ - 112 , 6 + 104 , 12 @ @ public class JsMessenger extends Messenger { < nl > } < nl > } ) ; < nl > } < nl > + < nl > + JsMessenger . instance = this ; < nl > + } < nl > + < nl > + public JsIdleModule getJsIdleModule ( ) { < nl > + return jsIdleModule ; < nl > } < nl > < nl > public boolean isElectron ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleCallback . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleCallback . java < nl > new file mode 100644 < nl > index 0000000 . . ace34dc < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleCallback . java < nl > @ @ - 0 , 0 + 1 , 10 @ @ < nl > + package im . actor . core . js . modules ; < nl > + < nl > + import org . timepedia . exporter . client . Export ; < nl > + import org . timepedia . exporter . client . ExportClosure ; < nl > + < nl > + @ Export < nl > + @ ExportClosure < nl > + public interface JsIdleCallback { < nl > + void onActionDetected ( ) ; < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleDetection . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleDetection . java < nl > new file mode 100644 < nl > index 0000000 . . 3900cd3 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleDetection . java < nl > @ @ - 0 , 0 + 1 , 18 @ @ < nl > + package im . actor . core . js . modules ; < nl > + < nl > + public class JsIdleDetection { < nl > + < nl > + public static native void subscribe ( JsIdleCallback callback ) / * - { < nl > + function activeMethod ( ) { < nl > + callback . @ im . actor . core . js . modules . JsIdleCallback : : onActionDetected ( * ) ( ) ; < nl > + } < nl > + $ wnd . addEventListener ( ' click ' , activeMethod ) < nl > + $ wnd . addEventListener ( ' mousemove ' , activeMethod ) < nl > + $ wnd . addEventListener ( ' mouseenter ' , activeMethod ) < nl > + $ wnd . addEventListener ( ' keydown ' , activeMethod ) < nl > + $ wnd . addEventListener ( ' scroll ' , activeMethod ) < nl > + $ wnd . addEventListener ( ' mousewheel ' , activeMethod ) < nl > + $ wnd . addEventListener ( ' touchmove ' , activeMethod ) < nl > + $ wnd . addEventListener ( ' touchstart ' , activeMethod ) < nl > + } - * / ; < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java < nl > new file mode 100644 < nl > index 0000000 . . bea818a < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java < nl > @ @ - 0 , 0 + 1 , 113 @ @ < nl > + package im . actor . core . js . modules ; < nl > + < nl > + import im . actor . core . js . JsMessenger ; < nl > + import im . actor . core . modules . AbsModule ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . utils . ModuleActor ; < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . actors . Props ; < nl > + < nl > + import static im . actor . runtime . actors . ActorSystem . system ; < nl > + < nl > + public class JsIdleModule extends AbsModule { < nl > + < nl > + private static final long TIMEOUT = 3 * 60 * 1000 / * 3 min * / ; < nl > + < nl > + private JsMessenger messenger ; < nl > + private ActorRef idleActor ; < nl > + < nl > + public JsIdleModule ( final JsMessenger messenger , final ModuleContext context ) { < nl > + super ( context ) ; < nl > + < nl > + this . messenger = messenger ; < nl > + < nl > + this . messenger . onAppVisible ( ) ; < nl > + < nl > + idleActor = system ( ) . actorOf ( Props . create ( IdleActor . class , new ActorCreator < IdleActor > ( ) { < nl > + @ Override < nl > + public IdleActor create ( ) { < nl > + return new IdleActor ( messenger , context ) ; < nl > + } < nl > + } ) , " js / idle _ timer " ) ; < nl > + } < nl > + < nl > + public void onHidden ( ) { < nl > + idleActor . send ( new IdleActor . OnHidden ( ) ) ; < nl > + } < nl > + < nl > + public void onVisible ( ) { < nl > + idleActor . send ( new IdleActor . OnHidden ( ) ) ; < nl > + } < nl > + < nl > + private static class IdleActor extends ModuleActor implements JsIdleCallback { < nl > + < nl > + private boolean isAppVisible = true ; < nl > + private JsMessenger messenger ; < nl > + < nl > + public IdleActor ( JsMessenger messenger , ModuleContext context ) { < nl > + super ( context ) ; < nl > + this . messenger = messenger ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + Log . d ( " JsIdle " , " preStart " ) ; < nl > + JsIdleDetection . subscribe ( this ) ; < nl > + self ( ) . sendOnce ( new FlushTimeout ( ) , TIMEOUT ) ; < nl > + } < nl > + < nl > + public void onActionDetected ( ) { < nl > + Log . d ( " JsIdle " , " onActionDetected " ) ; < nl > + if ( ! isAppVisible ) { < nl > + isAppVisible = true ; < nl > + messenger . onAppVisible ( ) ; < nl > + } < nl > + self ( ) . sendOnce ( new FlushTimeout ( ) , TIMEOUT ) ; < nl > + } < nl > + < nl > + public void onTimeoutDetected ( ) { < nl > + Log . d ( " JsIdle " , " onTimeoutDetected " ) ; < nl > + if ( isAppVisible ) { < nl > + isAppVisible = false ; < nl > + messenger . onAppHidden ( ) ; < nl > + } < nl > + } < nl > + < nl > + public void onHidden ( ) { < nl > + Log . d ( " JsIdle " , " onHidden " ) ; < nl > + onTimeoutDetected ( ) ; < nl > + } < nl > + < nl > + public void onVisible ( ) { < nl > + onActionDetected ( ) ; < nl > + Log . d ( " JsIdle " , " onVisible " ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof FlushTimeout ) { < nl > + onTimeoutDetected ( ) ; < nl > + } else if ( message instanceof OnHidden ) { < nl > + onHidden ( ) ; < nl > + } else if ( message instanceof OnVisible ) { < nl > + onVisible ( ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > + } < nl > + } < nl > + < nl > + private class FlushTimeout { < nl > + < nl > + } < nl > + < nl > + public static class OnHidden { < nl > + < nl > + } < nl > + < nl > + public static class OnVisible { < nl > + < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - se / build . gradle b / actor - sdk / sdk - core / core / core - se / build . gradle < nl > index 5984e59 . . ffeeada 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - se / build . gradle < nl > + + + b / actor - sdk / sdk - core / core / core - se / build . gradle < nl > @ @ - 38 , 75 + 38 , 75 @ @ dependencies { < nl > / / Configuration of publishing < nl > / / < nl > < nl > - String ossrhUsername = " " < nl > - String ossrhPassword = " " < nl > - boolean isDeployConfigured = false < nl > - if ( project . rootProject . file ( ' gradle . properties ' ) . exists ( ) ) { < nl > - Properties properties = new Properties ( ) < nl > - properties . load ( project . rootProject . file ( ' gradle . properties ' ) . newDataInputStream ( ) ) < nl > - ossrhUsername = properties . getProperty ( " ossrhUsername " , " " ) < nl > - ossrhPassword = properties . getProperty ( " ossrhPassword " , " " ) < nl > - version = properties . getProperty ( " version " , " " ) < nl > - < nl > - nexusStaging { < nl > - username ossrhUsername < nl > - password ossrhPassword < nl > - } < nl > - < nl > - isDeployConfigured = true < nl > - } < nl > - < nl > - project . afterEvaluate { < nl > - < nl > - artifacts { < nl > - archives javadocJarRelease < nl > - archives sourcesJarRelease < nl > - } < nl > - < nl > - if ( isDeployConfigured ) { < nl > - < nl > - signing { < nl > - sign configurations . archives < nl > - } < nl > - < nl > - uploadArchives { < nl > - repositories { < nl > - mavenDeployer { < nl > - beforeDeployment { MavenDeployment deployment - > signing . signPom ( deployment ) } < nl > - < nl > - repository ( url : " https : / / oss . sonatype . org / service / local / staging / deploy / maven2 / " ) { < nl > - authentication ( userName : ossrhUsername , password : ossrhPassword ) < nl > - } < nl > - < nl > - pom . project { < nl > - name ' Actor Core for Java SE ' < nl > - packaging ' jar ' < nl > - description ' Actor Core : Actor Java library ' < nl > - url ' https : / / github . com / actorapp / actor - platform ' < nl > - < nl > - scm { < nl > - url ' scm : git @ github . com : actorapp / actor - platform . git ' < nl > - connection ' scm : git @ github . com : actorapp / actor - platform . git ' < nl > - developerConnection ' scm : git @ github . com : actorapp / actor - platform . git ' < nl > - } < nl > - < nl > - licenses { < nl > - license { < nl > - name ' The MIT License ( MIT ) ' < nl > - url ' http : / / opensource . org / licenses / MIT ' < nl > - distribution ' repo ' < nl > - } < nl > - } < nl > - < nl > - developers { < nl > - developer { < nl > - id ' ex3ndr ' < nl > - name ' Stepan Korshakov ' < nl > - } < nl > - } < nl > - } < nl > - } < nl > - } < nl > - } < nl > - } < nl > - } < nl > \ No newline at end of file < nl > + / / String ossrhUsername = " " < nl > + / / String ossrhPassword = " " < nl > + / / boolean isDeployConfigured = false < nl > + / / if ( project . rootProject . file ( ' gradle . properties ' ) . exists ( ) ) { < nl > + / / Properties properties = new Properties ( ) < nl > + / / properties . load ( project . rootProject . file ( ' gradle . properties ' ) . newDataInputStream ( ) ) < nl > + / / ossrhUsername = properties . getProperty ( " ossrhUsername " , " " ) < nl > + / / ossrhPassword = properties . getProperty ( " ossrhPassword " , " " ) < nl > + / / version = properties . getProperty ( " version " , " " ) < nl > + / / < nl > + / / nexusStaging { < nl > + / / username ossrhUsername < nl > + / / password ossrhPassword < nl > + / / } < nl > + / / < nl > + / / isDeployConfigured = true < nl > + / / } < nl > + / / < nl > + / / project . afterEvaluate { < nl > + / / < nl > + / / artifacts { < nl > + / / archives javadocJarRelease < nl > + / / archives sourcesJarRelease < nl > + / / } < nl > + / / < nl > + / / if ( isDeployConfigured ) { < nl > + / / < nl > + / / signing { < nl > + / / sign configurations . archives < nl > + / / } < nl > + / / < nl > + / / uploadArchives { < nl > + / / repositories { < nl > + / / mavenDeployer { < nl > + / / beforeDeployment { MavenDeployment deployment - > signing . signPom ( deployment ) } < nl > + / / < nl > + / / repository ( url : " https : / / oss . sonatype . org / service / local / staging / deploy / maven2 / " ) { < nl > + / / authentication ( userName : ossrhUsername , password : ossrhPassword ) < nl > + / / } < nl > + / / < nl > + / / pom . project { < nl > + / / name ' Actor Core for Java SE ' < nl > + / / packaging ' jar ' < nl > + / / description ' Actor Core : Actor Java library ' < nl > + / / url ' https : / / github . com / actorapp / actor - platform ' < nl > + / / < nl > + / / scm { < nl > + / / url ' scm : git @ github . com : actorapp / actor - platform . git ' < nl > + / / connection ' scm : git @ github . com : actorapp / actor - platform . git ' < nl > + / / developerConnection ' scm : git @ github . com : actorapp / actor - platform . git ' < nl > + / / } < nl > + / / < nl > + / / licenses { < nl > + / / license { < nl > + / / name ' The MIT License ( MIT ) ' < nl > + / / url ' http : / / opensource . org / licenses / MIT ' < nl > + / / distribution ' repo ' < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / developers { < nl > + / / developer { < nl > + / / id ' ex3ndr ' < nl > + / / name ' Stepan Korshakov ' < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index 233ac49 . . 96b0a87 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 46 , 6 + 46 , 8 @ @ import im . actor . core . entity . content . JsonContent ; < nl > import im . actor . core . entity . content . internal . Sticker ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . events . AppVisibleChanged ; < nl > + import im . actor . core . modules . events . PeerChatClosed ; < nl > import im . actor . core . modules . events . PeerChatOpened ; < nl > import im . actor . core . modules . internal . messages . ConversationActor ; < nl > import im . actor . core . modules . internal . messages . ConversationHistoryActor ; < nl > @ @ - 177 , 6 + 179 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } ) , " actor / shown " ) ; < nl > < nl > context ( ) . getEvents ( ) . subscribe ( this , PeerChatOpened . EVENT ) ; < nl > + context ( ) . getEvents ( ) . subscribe ( this , PeerChatClosed . EVENT ) ; < nl > + context ( ) . getEvents ( ) . subscribe ( this , AppVisibleChanged . EVENT ) ; < nl > } < nl > < nl > public DialogGroupsVM getDialogGroupsVM ( ) { < nl > @ @ - 952 , 8 + 956 , 16 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > < nl > @ Override < nl > public void onBusEvent ( Event event ) { < nl > + < nl > + / / Need to be here as events can be sent when no actor is created yet . < nl > if ( event instanceof PeerChatOpened ) { < nl > - assumeConvActor ( ( ( PeerChatOpened ) event ) . getPeer ( ) ) ; < nl > + Peer peer = ( ( PeerChatOpened ) event ) . getPeer ( ) ; < nl > + assumeConvActor ( peer ) ; < nl > + conversationActors . get ( peer ) . send ( new ConversationActor . ConversationVisible ( ) ) ; < nl > + } else if ( event instanceof PeerChatClosed ) { < nl > + Peer peer = ( ( PeerChatClosed ) event ) . getPeer ( ) ; < nl > + assumeConvActor ( peer ) ; < nl > + conversationActors . get ( peer ) . send ( new ConversationActor . ConversationHidden ( ) ) ; < nl > } < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > index 22de793 . . 460bd6f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > @ @ - 15 , 10 + 15 , 12 @ @ import im . actor . core . entity . Reaction ; < nl > import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . core . entity . content . DocumentContent ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . events . AppVisibleChanged ; < nl > import im . actor . core . modules . utils . ModuleActor ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . annotations . Verified ; < nl > + import im . actor . runtime . eventbus . Event ; < nl > import im . actor . runtime . storage . IndexStorage ; < nl > import im . actor . runtime . storage . ListEngine ; < nl > < nl > @ @ - 49 , 6 + 51 , 8 @ @ public class ConversationActor extends ModuleActor { < nl > private long inReadState ; < nl > private long outReadState ; < nl > private long outReceiveState ; < nl > + private boolean isConversationVisible = false ; < nl > + private boolean isAppVisible = false ; < nl > < nl > public ConversationActor ( Peer peer , ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 75 , 6 + 79 , 42 @ @ public class ConversationActor extends ModuleActor { < nl > if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > isHiddenPeer = getGroup ( peer . getPeerId ( ) ) . isHidden ( ) ; < nl > } < nl > + < nl > + subscribe ( AppVisibleChanged . EVENT ) ; < nl > + } < nl > + < nl > + / / Visibility state < nl > + < nl > + private void onConversationVisible ( ) { < nl > + isConversationVisible = true ; < nl > + < nl > + if ( isConversationAutoRead ( ) ) { < nl > + checkReadState ( ) ; < nl > + } < nl > + } < nl > + < nl > + private void onConversationHidden ( ) { < nl > + isConversationVisible = false ; < nl > + } < nl > + < nl > + private void onAppVisible ( ) { < nl > + isAppVisible = true ; < nl > + < nl > + if ( isConversationAutoRead ( ) ) { < nl > + checkReadState ( ) ; < nl > + } < nl > + } < nl > + < nl > + private void onAppHidden ( ) { < nl > + isAppVisible = false ; < nl > + } < nl > + < nl > + private boolean isConversationAutoRead ( ) { < nl > + return isAppVisible & & isConversationVisible ; < nl > + } < nl > + < nl > + private void checkReadState ( ) { < nl > + < nl > } < nl > < nl > / / Messages receive / update < nl > @ @ - 499 , 11 + 539 , 27 @ @ public class ConversationActor extends ModuleActor { < nl > onMessageReadByMe ( ( ( MessageReadByMe ) message ) . getDate ( ) ) ; < nl > } else if ( message instanceof MessageReactionsChanged ) { < nl > onMessageReactionsUpdated ( ( ( MessageReactionsChanged ) message ) . getRid ( ) , ( ( MessageReactionsChanged ) message ) . getReactions ( ) ) ; < nl > + } else if ( message instanceof ConversationVisible ) { < nl > + onConversationVisible ( ) ; < nl > + } else if ( message instanceof ConversationHidden ) { < nl > + onConversationHidden ( ) ; < nl > } else { < nl > drop ( message ) ; < nl > } < nl > } < nl > < nl > + @ Override < nl > + public void onBusEvent ( Event event ) { < nl > + if ( event instanceof AppVisibleChanged ) { < nl > + if ( ( ( AppVisibleChanged ) event ) . isVisible ( ) ) { < nl > + onAppVisible ( ) ; < nl > + } else { < nl > + onAppHidden ( ) ; < nl > + } < nl > + } < nl > + super . onBusEvent ( event ) ; < nl > + } < nl > + < nl > public static class MessageContentUpdated { < nl > private long rid ; < nl > private AbsContent content ; < nl > @ @ - 650 , 4 + 706 , 12 @ @ public class ConversationActor extends ModuleActor { < nl > return messages ; < nl > } < nl > } < nl > + < nl > + public static class ConversationVisible { < nl > + < nl > + } < nl > + < nl > + public static class ConversationHidden { < nl > + < nl > + } < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java < nl > deleted file mode 100644 < nl > index bb8078b . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java < nl > + + + / dev / null < nl > @ @ - 1 , 80 + 0 , 0 @ @ < nl > - package im . actor . core . entity ; < nl > - < nl > - import com . google . j2objc . annotations . Property ; < nl > - < nl > - import java . io . IOException ; < nl > - < nl > - import im . actor . runtime . bser . BserObject ; < nl > - import im . actor . runtime . bser . BserValues ; < nl > - import im . actor . runtime . bser . BserWriter ; < nl > - import im . actor . runtime . storage . KeyValueItem ; < nl > - < nl > - public class DialogDesc extends BserObject implements KeyValueItem { < nl > - < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private Peer peer ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private String title ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private Avatar avatar ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private boolean isUnread ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private int counter ; < nl > - < nl > - public DialogDesc ( Peer peer , String title , Avatar avatar , boolean isUnread , int counter ) { < nl > - this . peer = peer ; < nl > - this . title = title ; < nl > - this . avatar = avatar ; < nl > - this . isUnread = isUnread ; < nl > - this . counter = counter ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public String getTitle ( ) { < nl > - return title ; < nl > - } < nl > - < nl > - public Avatar getAvatar ( ) { < nl > - return avatar ; < nl > - } < nl > - < nl > - public int getCounter ( ) { < nl > - return counter ; < nl > - } < nl > - < nl > - public boolean isUnread ( ) { < nl > - return isUnread ; < nl > - } < nl > - < nl > - @ Override < nl > - public void parse ( BserValues values ) throws IOException { < nl > - peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; < nl > - title = values . getString ( 2 ) ; < nl > - byte [ ] av = values . getBytes ( 3 ) ; < nl > - if ( av ! = null ) { < nl > - avatar = new Avatar ( av ) ; < nl > - } < nl > - counter = values . getInt ( 4 ) ; < nl > - isUnread = values . getBool ( 5 ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void serialize ( BserWriter writer ) throws IOException { < nl > - writer . writeObject ( 1 , peer ) ; < nl > - writer . writeString ( 2 , title ) ; < nl > - if ( avatar ! = null ) { < nl > - writer . writeObject ( 3 , avatar ) ; < nl > - } < nl > - writer . writeInt ( 4 , counter ) ; < nl > - writer . writeBool ( 5 , isUnread ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public long getEngineId ( ) { < nl > - return peer . getUnuqueId ( ) ; < nl > - } < nl > - } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java < nl > new file mode 100644 < nl > index 0000000 . . d0c5624 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java < nl > @ @ - 0 , 0 + 1 , 69 @ @ < nl > + package im . actor . core . entity ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . runtime . bser . BserCreator ; < nl > + import im . actor . runtime . bser . BserObject ; < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + import im . actor . runtime . storage . KeyValueItem ; < nl > + < nl > + public class DialogSpec extends BserObject implements KeyValueItem { < nl > + < nl > + public static BserCreator < DialogSpec > CREATOR = new BserCreator < DialogSpec > ( ) { < nl > + @ Override < nl > + public DialogSpec createInstance ( ) { < nl > + return new DialogSpec ( ) ; < nl > + } < nl > + } ; < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private Peer peer ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private boolean isUnread ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private int counter ; < nl > + < nl > + public DialogSpec ( Peer peer , boolean isUnread , int counter ) { < nl > + this . peer = peer ; < nl > + this . isUnread = isUnread ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + private DialogSpec ( ) { < nl > + < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + < nl > + public boolean isUnread ( ) { < nl > + return isUnread ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; < nl > + counter = values . getInt ( 2 ) ; < nl > + isUnread = values . getBool ( 3 ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + writer . writeObject ( 1 , peer ) ; < nl > + writer . writeInt ( 2 , counter ) ; < nl > + writer . writeBool ( 3 , isUnread ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public long getEngineId ( ) { < nl > + return peer . getUnuqueId ( ) ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > index 28142c9 . . baf3eaf 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . runtime . storage . PreferencesStorage ; < nl > public abstract class AbsModule { < nl > < nl > public static final String STORAGE _ DIALOGS = " dialogs " ; < nl > + public static final String STORAGE _ DIALOGS _ DESC = " dialogs _ desc " ; < nl > public static final String STORAGE _ USERS = " users " ; < nl > public static final String STORAGE _ GROUPS = " groups " ; < nl > public static final String STORAGE _ DOWNLOADS = " downloads " ; < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index 30e0d85 . . 88416ee 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 20 , 6 + 20 , 7 @ @ import im . actor . core . api . rpc . ResponseSeq ; < nl > import im . actor . core . api . updates . UpdateChatClear ; < nl > import im . actor . core . api . updates . UpdateChatDelete ; < nl > import im . actor . core . entity . Dialog ; < nl > + import im . actor . core . entity . DialogSpec ; < nl > import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . Peer ; < nl > @ @ - 48 , 6 + 49 , 7 @ @ import im . actor . core . network . RpcInternalException ; < nl > import im . actor . core . viewmodel . Command ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . core . viewmodel . DialogGroupsVM ; < nl > + import im . actor . core . viewmodel . DialogSpecVM ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > @ @ - 56 , 6 + 58 , 8 @ @ import im . actor . runtime . actors . tools . BounceFilterActor ; < nl > import im . actor . runtime . eventbus . BusSubscriber ; < nl > import im . actor . runtime . eventbus . Event ; < nl > import im . actor . runtime . files . FileSystemReference ; < nl > + import im . actor . runtime . mvvm . MVVMCollection ; < nl > + import im . actor . runtime . storage . KeyValueEngine ; < nl > import im . actor . runtime . storage . ListEngine ; < nl > import im . actor . runtime . storage . SyncKeyValue ; < nl > < nl > @ @ - 83 , 11 + 87 , 14 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > < nl > private final SyncKeyValue cursorStorage ; < nl > < nl > + private final MVVMCollection < DialogSpec , DialogSpecVM > dialogDescKeyValue ; < nl > + < nl > private final DialogGroupsVM dialogGroups = new DialogGroupsVM ( ) ; < nl > < nl > public MessagesModule ( final ModuleContext context ) { < nl > super ( context ) ; < nl > < nl > + this . dialogDescKeyValue = Storage . createKeyValue ( STORAGE _ DIALOGS _ DESC , DialogSpecVM . CREATOR , DialogSpec . CREATOR ) ; < nl > this . cursorStorage = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ CURSOR ) ) ; < nl > this . dialogs = Storage . createList ( STORAGE _ DIALOGS , Dialog . CREATOR ) ; < nl > } < nl > @ @ - 157 , 6 + 164 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > return dialogGroups ; < nl > } < nl > < nl > + public MVVMCollection < DialogSpec , DialogSpecVM > getDialogDescKeyValue ( ) { < nl > + return dialogDescKeyValue ; < nl > + } < nl > + < nl > public ActorRef getSendMessageActor ( ) { < nl > return sendMessageActor ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > index f0fdf00 . . b881551 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > @ @ - 1 , 20 + 1 , 26 @ @ < nl > package im . actor . core . modules . internal . messages ; < nl > < nl > import java . util . ArrayList ; < nl > - import java . util . HashMap ; < nl > < nl > import im . actor . core . entity . Avatar ; < nl > - import im . actor . core . entity . DialogDesc ; < nl > + import im . actor . core . entity . DialogSpec ; < nl > + import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerType ; < nl > + import im . actor . core . entity . User ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . internal . messages . entity . GroupedStorage ; < nl > import im . actor . core . modules . utils . ModuleActor ; < nl > import im . actor . core . viewmodel . DialogGroup ; < nl > + import im . actor . core . viewmodel . DialogSmall ; < nl > + import im . actor . core . viewmodel . DialogSpecVM ; < nl > + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; < nl > + import im . actor . runtime . mvvm . MVVMCollection ; < nl > < nl > public class GroupedDialogsActor extends ModuleActor { < nl > < nl > - private PeerGroup groups = new PeerGroup ( " groups " , " Groups " ) ; < nl > - private PeerGroup privates = new PeerGroup ( " private " , " Private " ) ; < nl > + private GroupedStorage storage ; < nl > + private MVVMCollection < DialogSpec , DialogSpecVM > specs ; < nl > < nl > public GroupedDialogsActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 23 , 6 + 29 , 8 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > @ Override < nl > public void preStart ( ) { < nl > super . preStart ( ) ; < nl > + specs = context ( ) . getMessagesModule ( ) . getDialogDescKeyValue ( ) ; < nl > + storage = new GroupedStorage ( ) ; < nl > } < nl > < nl > private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { < nl > @ @ - 31 , 38 + 39 , 82 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > < nl > private void onNewMessage ( Peer peer , long sortDate , int counter ) { < nl > < nl > - PeerGroup peerGroup ; < nl > - if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > - peerGroup = groups ; < nl > - } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > - peerGroup = privates ; < nl > - } else { < nl > - return ; < nl > - } < nl > + / / Updating dialog spec < nl > + DialogSpec spec = new DialogSpec ( peer , false , counter ) ; < nl > + specs . getEngine ( ) . addOrUpdateItem ( spec ) ; < nl > < nl > boolean found = false ; < nl > - for ( PeerDesc d : peerGroup . getPeers ( ) ) { < nl > - if ( d . getPeer ( ) . equals ( peer ) ) { < nl > - d . setCounter ( counter ) ; < nl > + for ( Peer p : storage . getPrivatePeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > + found = true ; < nl > + break ; < nl > + } < nl > + } < nl > + for ( Peer p : storage . getGroupPeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > found = true ; < nl > + break ; < nl > } < nl > } < nl > < nl > if ( ! found ) { < nl > - peerGroup . getPeers ( ) . add ( new PeerDesc ( peer , counter ) ) ; < nl > + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + storage . getPrivatePeers ( ) . add ( peer ) ; < nl > + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + storage . getGroupPeers ( ) . add ( peer ) ; < nl > + } else { < nl > + return ; < nl > + } < nl > } < nl > < nl > - ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; < nl > - ArrayList < DialogDesc > groupDescs = new ArrayList < DialogDesc > ( ) ; < nl > - for ( PeerDesc d : peerGroup . getPeers ( ) ) { < nl > - groupDescs . add ( new DialogDesc ( d . getPeer ( ) , " GRPOUP # " + d . getPeer ( ) . getPeerId ( ) , < nl > - null , false , d . counter ) ) ; < nl > + notifyVM ( ) ; < nl > + saveStorage ( ) ; < nl > + } < nl > + < nl > + private void notifyVM ( ) { < nl > + ArrayListDialogSmall groupSpecs = new ArrayListDialogSmall ( ) ; < nl > + for ( Peer p : storage . getGroupPeers ( ) ) { < nl > + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; < nl > + if ( p . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group group = getGroup ( p . getPeerId ( ) ) ; < nl > + groupSpecs . add ( new DialogSmall ( p , < nl > + group . getTitle ( ) , group . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + User user = getUser ( p . getPeerId ( ) ) ; < nl > + groupSpecs . add ( new DialogSmall ( p , < nl > + user . getName ( ) , user . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } < nl > + } < nl > + < nl > + ArrayListDialogSmall privateSpecs = new ArrayListDialogSmall ( ) ; < nl > + for ( Peer p : storage . getPrivatePeers ( ) ) { < nl > + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; < nl > + if ( p . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group group = getGroup ( p . getPeerId ( ) ) ; < nl > + privateSpecs . add ( new DialogSmall ( p , < nl > + group . getTitle ( ) , group . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + User user = getUser ( p . getPeerId ( ) ) ; < nl > + privateSpecs . add ( new DialogSmall ( p , < nl > + user . getName ( ) , user . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } < nl > } < nl > - groups . add ( new DialogGroup ( " Groups " , " group " , groupDescs ) ) ; < nl > + < nl > + ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; < nl > + groups . add ( new DialogGroup ( " Groups " , " groups " , groupSpecs ) ) ; < nl > + groups . add ( new DialogGroup ( " Private " , " private " , privateSpecs ) ) ; < nl > < nl > context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; < nl > } < nl > < nl > + private void saveStorage ( ) { < nl > + / / TODO : Implement < nl > + } < nl > + < nl > @ Override < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof PeerInformationChanged ) { < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java < nl > new file mode 100644 < nl > index 0000000 . . 3e7340c < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java < nl > @ @ - 0 , 0 + 1 , 57 @ @ < nl > + package im . actor . core . modules . internal . messages . entity ; < nl > + < nl > + import java . io . IOException ; < nl > + import java . util . ArrayList ; < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . entity . DialogSpec ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . viewmodel . DialogSpecVM ; < nl > + import im . actor . runtime . bser . BserObject ; < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + import im . actor . runtime . mvvm . MVVMCollection ; < nl > + < nl > + public class GroupedStorage extends BserObject { < nl > + < nl > + private ArrayList < Peer > groupPeers = new ArrayList < Peer > ( ) ; < nl > + private ArrayList < Peer > privatePeers = new ArrayList < Peer > ( ) ; < nl > + < nl > + public GroupedStorage ( ) { < nl > + } < nl > + < nl > + public GroupedStorage ( byte [ ] data ) throws IOException { < nl > + super . load ( data ) ; < nl > + } < nl > + < nl > + public ArrayList < Peer > getGroupPeers ( ) { < nl > + return groupPeers ; < nl > + } < nl > + < nl > + public ArrayList < Peer > getPrivatePeers ( ) { < nl > + return privatePeers ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + List < byte [ ] > rawPrivatePeers = values . getRepeatedBytes ( 1 ) ; < nl > + groupPeers . clear ( ) ; < nl > + for ( byte [ ] b : rawPrivatePeers ) { < nl > + groupPeers . add ( Peer . fromBytes ( b ) ) ; < nl > + } < nl > + List < byte [ ] > rawGroupPeers = values . getRepeatedBytes ( 2 ) ; < nl > + for ( byte [ ] b : rawGroupPeers ) { < nl > + privatePeers . add ( Peer . fromBytes ( b ) ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + for ( Peer peer : privatePeers ) { < nl > + writer . writeObject ( 1 , peer ) ; < nl > + } < nl > + for ( Peer peer : groupPeers ) { < nl > + writer . writeObject ( 2 , peer ) ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > index ae47f02 . . 47935a1 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > @ @ - 1 , 16 + 1 , 19 @ @ < nl > package im . actor . core . viewmodel ; < nl > < nl > - import java . util . ArrayList ; < nl > + import com . google . j2objc . annotations . Property ; < nl > < nl > - import im . actor . core . entity . DialogDesc ; < nl > + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; < nl > < nl > public class DialogGroup { < nl > < nl > + @ Property ( " readonly , nonatomic " ) < nl > private String title ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > private String key ; < nl > - private ArrayList < DialogDesc > dialogs ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private ArrayListDialogSmall dialogs ; < nl > < nl > - public DialogGroup ( String title , String key , ArrayList < DialogDesc > dialogs ) { < nl > + public DialogGroup ( String title , String key , ArrayListDialogSmall dialogs ) { < nl > this . title = title ; < nl > this . key = key ; < nl > this . dialogs = dialogs ; < nl > @ @ - 24 , 7 + 27 , 7 @ @ public class DialogGroup { < nl > return key ; < nl > } < nl > < nl > - public ArrayList < DialogDesc > getDialogs ( ) { < nl > + public ArrayListDialogSmall getDialogs ( ) { < nl > return dialogs ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java < nl > new file mode 100644 < nl > index 0000000 . . b77e893 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java < nl > @ @ - 0 , 0 + 1 , 41 @ @ < nl > + package im . actor . core . viewmodel ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import im . actor . core . entity . Avatar ; < nl > + import im . actor . core . entity . Peer ; < nl > + < nl > + public class DialogSmall { < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final Peer peer ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final String title ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final Avatar avatar ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final int counter ; < nl > + < nl > + public DialogSmall ( Peer peer , String title , Avatar avatar , int counter ) { < nl > + this . peer = peer ; < nl > + this . title = title ; < nl > + this . avatar = avatar ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public String getTitle ( ) { < nl > + return title ; < nl > + } < nl > + < nl > + public Avatar getAvatar ( ) { < nl > + return avatar ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java < nl > new file mode 100644 < nl > index 0000000 . . 52a266d < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java < nl > @ @ - 0 , 0 + 1 , 53 @ @ < nl > + package im . actor . core . viewmodel ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import im . actor . core . entity . DialogSpec ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . viewmodel . generics . BooleanValueModel ; < nl > + import im . actor . core . viewmodel . generics . IntValueModel ; < nl > + import im . actor . runtime . mvvm . BaseValueModel ; < nl > + import im . actor . runtime . mvvm . ValueModelCreator ; < nl > + < nl > + public class DialogSpecVM extends BaseValueModel < DialogSpec > { < nl > + < nl > + public static ValueModelCreator < DialogSpec , DialogSpecVM > CREATOR = new ValueModelCreator < DialogSpec , DialogSpecVM > ( ) { < nl > + @ Override < nl > + public DialogSpecVM create ( DialogSpec baseValue ) { < nl > + return new DialogSpecVM ( baseValue ) ; < nl > + } < nl > + } ; < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final Peer peer ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private IntValueModel counter ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private BooleanValueModel isUnread ; < nl > + < nl > + public DialogSpecVM ( DialogSpec rawObj ) { < nl > + super ( rawObj ) ; < nl > + < nl > + this . peer = rawObj . getPeer ( ) ; < nl > + this . counter = new IntValueModel ( " dialogs . desc . counter " , rawObj . getCounter ( ) ) ; < nl > + this . isUnread = new BooleanValueModel ( " dialogs . desc . unread " , rawObj . isUnread ( ) ) ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public IntValueModel getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + < nl > + public BooleanValueModel getIsUnread ( ) { < nl > + return isUnread ; < nl > + } < nl > + < nl > + @ Override < nl > + protected void updateValues ( DialogSpec rawObj ) { < nl > + counter . change ( rawObj . getCounter ( ) ) ; < nl > + isUnread . change ( rawObj . isUnread ( ) ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java < nl > new file mode 100644 < nl > index 0000000 . . 9727306 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java < nl > @ @ - 0 , 0 + 1 , 13 @ @ < nl > + package im . actor . core . viewmodel . generics ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . core . viewmodel . DialogSmall ; < nl > + < nl > + public class ArrayListDialogSmall extends ArrayList < DialogSmall > { < nl > + < nl > + @ Override < nl > + public DialogSmall get ( int index ) { < nl > + return super . get ( index ) ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift < nl > index 32554b4 . . f496742 100644 < nl > - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift < nl > + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift < nl > @ @ - 6 , 7 + 6 , 7 @ @ import UIKit < nl > < nl > class AADebugController : AAContentTableController { < nl > < nl > - var debugData : AAManagedArrayRows < ACDialogDesc , AACommonCell > ! < nl > + var debugData : AAManagedArrayRows < ACDialogSmall , AACommonCell > ! < nl > < nl > init ( ) { < nl > super . init ( style : . Plain ) < nl > @ @ - 18 , 9 + 18 , 10 @ @ class AADebugController : AAContentTableController { < nl > < nl > override func tableDidLoad ( ) { < nl > section { ( s ) - > ( ) in < nl > - self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogDesc , AACommonCell > ) - > ( ) in < nl > - r . bindData = { ( cell : AACommonCell , data : ACDialogDesc ) - > ( ) in < nl > - cell . setContent ( data . title ) < nl > + self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogSmall , AACommonCell > ) - > ( ) in < nl > + r . bindData = { ( cell : AACommonCell , data : ACDialogSmall ) - > ( ) in < nl > + cell . setContent ( " \ ( data . counter ) - \ ( data . title ) " ) < nl > + cell . style = . Normal < nl > } < nl > } < nl > } < nl > @ @ - 30 , 11 + 31 , 11 @ @ class AADebugController : AAContentTableController { < nl > binder . bind ( ActorSDK . sharedActor ( ) . messenger . getDialogGroupsVM ( ) . getGroupsValueModel ( ) ) { ( value : JavaUtilArrayList ? ) - > ( ) in < nl > < nl > if value ! = nil { < nl > - var items = [ ACDialogDesc ] ( ) < nl > + var items = [ ACDialogSmall ] ( ) < nl > < nl > for i in 0 . . < value ! . size ( ) { < nl > - for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . getDialogs ( ) { < nl > - items . append ( j as ! ACDialogDesc ) < nl > + for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . dialogs { < nl > + items . append ( j as ! ACDialogSmall ) < nl > } < nl > } < nl > self . debugData . data = items

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index cb3bc8f . . a994a28 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . core . entity . PeerSearchType ; 
 import im . actor . core . entity . PeerType ; 
 import im . actor . core . js . entity . * ; 
 import im . actor . core . js . modules . JsBindedValueCallback ; 
 + import im . actor . core . js . modules . JsIdleModule ; 
 import im . actor . core . js . providers . JsNotificationsProvider ; 
 import im . actor . core . js . providers . JsPhoneBookProvider ; 
 import im . actor . core . js . providers . electron . JsElectronApp ; 
 @ @ - 36 , 6 + 37 , 7 @ @ import im . actor . runtime . js . JsFileSystemProvider ; 
 import im . actor . runtime . js . fs . JsBlob ; 
 import im . actor . runtime . js . fs . JsFile ; 
 import im . actor . runtime . js . mvvm . JsDisplayListCallback ; 
 + import im . actor . runtime . js . threading . JsSecureInterval ; 
 import im . actor . runtime . js . utils . JsPromise ; 
 import im . actor . runtime . js . utils . JsPromiseExecutor ; 
 import im . actor . runtime . markdown . MarkdownParser ; 
 @ @ - 130 , 19 + 132 , 6 @ @ public class JsFacade implements Exportable { 
 
 messenger = new JsMessenger ( configuration . build ( ) ) ; 
 
 - if ( isElectron ( ) ) { 
 - JsElectronApp . subscribe ( " window " , new JsElectronListener ( ) { 
 - @ Override 
 - public void onEvent ( String content ) { 
 - if ( " focus " . equals ( content ) ) { 
 - messenger . onAppVisible ( ) ; 
 - } else if ( " blur " . equals ( content ) ) { 
 - messenger . onAppHidden ( ) ; 
 - } 
 - } 
 - } ) ; 
 - } 
 - 
 Log . d ( TAG , " JsMessenger created " ) ; 
 } 
 
 @ @ - 716 , 7 + 705 , 8 @ @ public class JsFacade implements Exportable { 
 if ( isElectron ( ) ) { 
 return ; 
 } 
 - messenger . onAppVisible ( ) ; 
 + 
 + messenger . getJsIdleModule ( ) . onVisible ( ) ; 
 } 
 
 public void onAppHidden ( ) { 
 @ @ - 724 , 7 + 714 , 8 @ @ public class JsFacade implements Exportable { 
 if ( isElectron ( ) ) { 
 return ; 
 } 
 - messenger . onAppHidden ( ) ; 
 + 
 + messenger . getJsIdleModule ( ) . onHidden ( ) ; 
 } 
 
 public void onConversationOpen ( JsPeer peer ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 index fc1292e . . 85bcd9d 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 @ @ - 37 , 7 + 37 , 9 @ @ import im . actor . core . js . entity . JsUser ; 
 import im . actor . core . js . entity . Placeholders ; 
 import im . actor . core . js . images . JsImageResize ; 
 import im . actor . core . js . images . JsResizeListener ; 
 + import im . actor . core . js . modules . JsIdleModule ; 
 import im . actor . core . js . providers . electron . JsElectronApp ; 
 + import im . actor . core . js . providers . electron . JsElectronListener ; 
 import im . actor . core . js . providers . notification . JsChromePush ; 
 import im . actor . core . js . providers . notification . JsSafariPush ; 
 import im . actor . core . js . providers . notification . PushSubscribeResult ; 
 @ @ - 62 , 6 + 64 , 7 @ @ public class JsMessenger extends Messenger { 
 return instance ; 
 } 
 
 + private JsIdleModule jsIdleModule ; 
 private JsBindingModule jsBindingModule ; 
 private JsFilesModule filesModule ; 
 private JsFileSystemProvider fileSystemProvider ; 
 @ @ - 74 , 32 + 77 , 21 @ @ public class JsMessenger extends Messenger { 
 jsBindingModule = new JsBindingModule ( this , filesModule , modules ) ; 
 isElectron = JsElectronApp . isElectron ( ) ; 
 
 - if ( JsChromePush . isSupported ( ) ) { 
 - Log . d ( " JsMessenger " , " ChromePush Supported " ) ; 
 - JsChromePush . subscribe ( new PushSubscribeResult ( ) { 
 + jsIdleModule = new JsIdleModule ( this , modules ) ; 
 
 + if ( isElectron ( ) ) { 
 + JsElectronApp . subscribe ( " window " , new JsElectronListener ( ) { 
 @ Override 
 - public void onSubscribedChrome ( String token ) { 
 - Log . d ( " JsMessenger " , " Subscribed : " + token ) ; 
 - registerGooglePush ( 209133700967L , token ) ; 
 - } 
 - 
 - @ Override 
 - public void onSubscriptionFailure ( ) { 
 - Log . d ( " JsMessenger " , " Subscribe failure " ) ; 
 + public void onEvent ( String content ) { 
 + if ( " focus " . equals ( content ) ) { 
 + jsIdleModule . onVisible ( ) ; 
 + } else if ( " blur " . equals ( content ) ) { 
 + jsIdleModule . onHidden ( ) ; 
 + } 
 } 
 } ) ; 
 - } else { 
 - Log . d ( " JsMessenger " , " ChromePush NOT Supported " ) ; 
 - } 
 - if ( JsSafariPush . isSupported ( ) ) { 
 - Log . d ( " JsMessenger " , " SafariPush Supported " ) ; 
 - } else { 
 - Log . d ( " JsMessenger " , " SafariPush NOT Supported " ) ; 
 } 
 
 - JsMessenger . instance = this ; 
 - 
 if ( isElectron ) { 
 getAppState ( ) . getGlobalTempCounter ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { 
 @ Override 
 @ @ - 112 , 6 + 104 , 12 @ @ public class JsMessenger extends Messenger { 
 } 
 } ) ; 
 } 
 + 
 + JsMessenger . instance = this ; 
 + } 
 + 
 + public JsIdleModule getJsIdleModule ( ) { 
 + return jsIdleModule ; 
 } 
 
 public boolean isElectron ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleCallback . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleCallback . java 
 new file mode 100644 
 index 0000000 . . ace34dc 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleCallback . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package im . actor . core . js . modules ; 
 + 
 + import org . timepedia . exporter . client . Export ; 
 + import org . timepedia . exporter . client . ExportClosure ; 
 + 
 + @ Export 
 + @ ExportClosure 
 + public interface JsIdleCallback { 
 + void onActionDetected ( ) ; 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleDetection . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleDetection . java 
 new file mode 100644 
 index 0000000 . . 3900cd3 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleDetection . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package im . actor . core . js . modules ; 
 + 
 + public class JsIdleDetection { 
 + 
 + public static native void subscribe ( JsIdleCallback callback ) / * - { 
 + function activeMethod ( ) { 
 + callback . @ im . actor . core . js . modules . JsIdleCallback : : onActionDetected ( * ) ( ) ; 
 + } 
 + $ wnd . addEventListener ( ' click ' , activeMethod ) 
 + $ wnd . addEventListener ( ' mousemove ' , activeMethod ) 
 + $ wnd . addEventListener ( ' mouseenter ' , activeMethod ) 
 + $ wnd . addEventListener ( ' keydown ' , activeMethod ) 
 + $ wnd . addEventListener ( ' scroll ' , activeMethod ) 
 + $ wnd . addEventListener ( ' mousewheel ' , activeMethod ) 
 + $ wnd . addEventListener ( ' touchmove ' , activeMethod ) 
 + $ wnd . addEventListener ( ' touchstart ' , activeMethod ) 
 + } - * / ; 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java 
 new file mode 100644 
 index 0000000 . . bea818a 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java 
 @ @ - 0 , 0 + 1 , 113 @ @ 
 + package im . actor . core . js . modules ; 
 + 
 + import im . actor . core . js . JsMessenger ; 
 + import im . actor . core . modules . AbsModule ; 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . utils . ModuleActor ; 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . actors . Props ; 
 + 
 + import static im . actor . runtime . actors . ActorSystem . system ; 
 + 
 + public class JsIdleModule extends AbsModule { 
 + 
 + private static final long TIMEOUT = 3 * 60 * 1000 / * 3 min * / ; 
 + 
 + private JsMessenger messenger ; 
 + private ActorRef idleActor ; 
 + 
 + public JsIdleModule ( final JsMessenger messenger , final ModuleContext context ) { 
 + super ( context ) ; 
 + 
 + this . messenger = messenger ; 
 + 
 + this . messenger . onAppVisible ( ) ; 
 + 
 + idleActor = system ( ) . actorOf ( Props . create ( IdleActor . class , new ActorCreator < IdleActor > ( ) { 
 + @ Override 
 + public IdleActor create ( ) { 
 + return new IdleActor ( messenger , context ) ; 
 + } 
 + } ) , " js / idle _ timer " ) ; 
 + } 
 + 
 + public void onHidden ( ) { 
 + idleActor . send ( new IdleActor . OnHidden ( ) ) ; 
 + } 
 + 
 + public void onVisible ( ) { 
 + idleActor . send ( new IdleActor . OnHidden ( ) ) ; 
 + } 
 + 
 + private static class IdleActor extends ModuleActor implements JsIdleCallback { 
 + 
 + private boolean isAppVisible = true ; 
 + private JsMessenger messenger ; 
 + 
 + public IdleActor ( JsMessenger messenger , ModuleContext context ) { 
 + super ( context ) ; 
 + this . messenger = messenger ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + Log . d ( " JsIdle " , " preStart " ) ; 
 + JsIdleDetection . subscribe ( this ) ; 
 + self ( ) . sendOnce ( new FlushTimeout ( ) , TIMEOUT ) ; 
 + } 
 + 
 + public void onActionDetected ( ) { 
 + Log . d ( " JsIdle " , " onActionDetected " ) ; 
 + if ( ! isAppVisible ) { 
 + isAppVisible = true ; 
 + messenger . onAppVisible ( ) ; 
 + } 
 + self ( ) . sendOnce ( new FlushTimeout ( ) , TIMEOUT ) ; 
 + } 
 + 
 + public void onTimeoutDetected ( ) { 
 + Log . d ( " JsIdle " , " onTimeoutDetected " ) ; 
 + if ( isAppVisible ) { 
 + isAppVisible = false ; 
 + messenger . onAppHidden ( ) ; 
 + } 
 + } 
 + 
 + public void onHidden ( ) { 
 + Log . d ( " JsIdle " , " onHidden " ) ; 
 + onTimeoutDetected ( ) ; 
 + } 
 + 
 + public void onVisible ( ) { 
 + onActionDetected ( ) ; 
 + Log . d ( " JsIdle " , " onVisible " ) ; 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof FlushTimeout ) { 
 + onTimeoutDetected ( ) ; 
 + } else if ( message instanceof OnHidden ) { 
 + onHidden ( ) ; 
 + } else if ( message instanceof OnVisible ) { 
 + onVisible ( ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 + } 
 + } 
 + 
 + private class FlushTimeout { 
 + 
 + } 
 + 
 + public static class OnHidden { 
 + 
 + } 
 + 
 + public static class OnVisible { 
 + 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - se / build . gradle b / actor - sdk / sdk - core / core / core - se / build . gradle 
 index 5984e59 . . ffeeada 100644 
 - - - a / actor - sdk / sdk - core / core / core - se / build . gradle 
 + + + b / actor - sdk / sdk - core / core / core - se / build . gradle 
 @ @ - 38 , 75 + 38 , 75 @ @ dependencies { 
 / / Configuration of publishing 
 / / 
 
 - String ossrhUsername = " " 
 - String ossrhPassword = " " 
 - boolean isDeployConfigured = false 
 - if ( project . rootProject . file ( ' gradle . properties ' ) . exists ( ) ) { 
 - Properties properties = new Properties ( ) 
 - properties . load ( project . rootProject . file ( ' gradle . properties ' ) . newDataInputStream ( ) ) 
 - ossrhUsername = properties . getProperty ( " ossrhUsername " , " " ) 
 - ossrhPassword = properties . getProperty ( " ossrhPassword " , " " ) 
 - version = properties . getProperty ( " version " , " " ) 
 - 
 - nexusStaging { 
 - username ossrhUsername 
 - password ossrhPassword 
 - } 
 - 
 - isDeployConfigured = true 
 - } 
 - 
 - project . afterEvaluate { 
 - 
 - artifacts { 
 - archives javadocJarRelease 
 - archives sourcesJarRelease 
 - } 
 - 
 - if ( isDeployConfigured ) { 
 - 
 - signing { 
 - sign configurations . archives 
 - } 
 - 
 - uploadArchives { 
 - repositories { 
 - mavenDeployer { 
 - beforeDeployment { MavenDeployment deployment - > signing . signPom ( deployment ) } 
 - 
 - repository ( url : " https : / / oss . sonatype . org / service / local / staging / deploy / maven2 / " ) { 
 - authentication ( userName : ossrhUsername , password : ossrhPassword ) 
 - } 
 - 
 - pom . project { 
 - name ' Actor Core for Java SE ' 
 - packaging ' jar ' 
 - description ' Actor Core : Actor Java library ' 
 - url ' https : / / github . com / actorapp / actor - platform ' 
 - 
 - scm { 
 - url ' scm : git @ github . com : actorapp / actor - platform . git ' 
 - connection ' scm : git @ github . com : actorapp / actor - platform . git ' 
 - developerConnection ' scm : git @ github . com : actorapp / actor - platform . git ' 
 - } 
 - 
 - licenses { 
 - license { 
 - name ' The MIT License ( MIT ) ' 
 - url ' http : / / opensource . org / licenses / MIT ' 
 - distribution ' repo ' 
 - } 
 - } 
 - 
 - developers { 
 - developer { 
 - id ' ex3ndr ' 
 - name ' Stepan Korshakov ' 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 \ No newline at end of file 
 + / / String ossrhUsername = " " 
 + / / String ossrhPassword = " " 
 + / / boolean isDeployConfigured = false 
 + / / if ( project . rootProject . file ( ' gradle . properties ' ) . exists ( ) ) { 
 + / / Properties properties = new Properties ( ) 
 + / / properties . load ( project . rootProject . file ( ' gradle . properties ' ) . newDataInputStream ( ) ) 
 + / / ossrhUsername = properties . getProperty ( " ossrhUsername " , " " ) 
 + / / ossrhPassword = properties . getProperty ( " ossrhPassword " , " " ) 
 + / / version = properties . getProperty ( " version " , " " ) 
 + / / 
 + / / nexusStaging { 
 + / / username ossrhUsername 
 + / / password ossrhPassword 
 + / / } 
 + / / 
 + / / isDeployConfigured = true 
 + / / } 
 + / / 
 + / / project . afterEvaluate { 
 + / / 
 + / / artifacts { 
 + / / archives javadocJarRelease 
 + / / archives sourcesJarRelease 
 + / / } 
 + / / 
 + / / if ( isDeployConfigured ) { 
 + / / 
 + / / signing { 
 + / / sign configurations . archives 
 + / / } 
 + / / 
 + / / uploadArchives { 
 + / / repositories { 
 + / / mavenDeployer { 
 + / / beforeDeployment { MavenDeployment deployment - > signing . signPom ( deployment ) } 
 + / / 
 + / / repository ( url : " https : / / oss . sonatype . org / service / local / staging / deploy / maven2 / " ) { 
 + / / authentication ( userName : ossrhUsername , password : ossrhPassword ) 
 + / / } 
 + / / 
 + / / pom . project { 
 + / / name ' Actor Core for Java SE ' 
 + / / packaging ' jar ' 
 + / / description ' Actor Core : Actor Java library ' 
 + / / url ' https : / / github . com / actorapp / actor - platform ' 
 + / / 
 + / / scm { 
 + / / url ' scm : git @ github . com : actorapp / actor - platform . git ' 
 + / / connection ' scm : git @ github . com : actorapp / actor - platform . git ' 
 + / / developerConnection ' scm : git @ github . com : actorapp / actor - platform . git ' 
 + / / } 
 + / / 
 + / / licenses { 
 + / / license { 
 + / / name ' The MIT License ( MIT ) ' 
 + / / url ' http : / / opensource . org / licenses / MIT ' 
 + / / distribution ' repo ' 
 + / / } 
 + / / } 
 + / / 
 + / / developers { 
 + / / developer { 
 + / / id ' ex3ndr ' 
 + / / name ' Stepan Korshakov ' 
 + / / } 
 + / / } 
 + / / } 
 + / / } 
 + / / } 
 + / / } 
 + / / } 
 + / / } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index 233ac49 . . 96b0a87 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 46 , 6 + 46 , 8 @ @ import im . actor . core . entity . content . JsonContent ; 
 import im . actor . core . entity . content . internal . Sticker ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . events . AppVisibleChanged ; 
 + import im . actor . core . modules . events . PeerChatClosed ; 
 import im . actor . core . modules . events . PeerChatOpened ; 
 import im . actor . core . modules . internal . messages . ConversationActor ; 
 import im . actor . core . modules . internal . messages . ConversationHistoryActor ; 
 @ @ - 177 , 6 + 179 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } ) , " actor / shown " ) ; 
 
 context ( ) . getEvents ( ) . subscribe ( this , PeerChatOpened . EVENT ) ; 
 + context ( ) . getEvents ( ) . subscribe ( this , PeerChatClosed . EVENT ) ; 
 + context ( ) . getEvents ( ) . subscribe ( this , AppVisibleChanged . EVENT ) ; 
 } 
 
 public DialogGroupsVM getDialogGroupsVM ( ) { 
 @ @ - 952 , 8 + 956 , 16 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 
 @ Override 
 public void onBusEvent ( Event event ) { 
 + 
 + / / Need to be here as events can be sent when no actor is created yet . 
 if ( event instanceof PeerChatOpened ) { 
 - assumeConvActor ( ( ( PeerChatOpened ) event ) . getPeer ( ) ) ; 
 + Peer peer = ( ( PeerChatOpened ) event ) . getPeer ( ) ; 
 + assumeConvActor ( peer ) ; 
 + conversationActors . get ( peer ) . send ( new ConversationActor . ConversationVisible ( ) ) ; 
 + } else if ( event instanceof PeerChatClosed ) { 
 + Peer peer = ( ( PeerChatClosed ) event ) . getPeer ( ) ; 
 + assumeConvActor ( peer ) ; 
 + conversationActors . get ( peer ) . send ( new ConversationActor . ConversationHidden ( ) ) ; 
 } 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 index 22de793 . . 460bd6f 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 @ @ - 15 , 10 + 15 , 12 @ @ import im . actor . core . entity . Reaction ; 
 import im . actor . core . entity . content . AbsContent ; 
 import im . actor . core . entity . content . DocumentContent ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . events . AppVisibleChanged ; 
 import im . actor . core . modules . utils . ModuleActor ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . annotations . Verified ; 
 + import im . actor . runtime . eventbus . Event ; 
 import im . actor . runtime . storage . IndexStorage ; 
 import im . actor . runtime . storage . ListEngine ; 
 
 @ @ - 49 , 6 + 51 , 8 @ @ public class ConversationActor extends ModuleActor { 
 private long inReadState ; 
 private long outReadState ; 
 private long outReceiveState ; 
 + private boolean isConversationVisible = false ; 
 + private boolean isAppVisible = false ; 
 
 public ConversationActor ( Peer peer , ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 75 , 6 + 79 , 42 @ @ public class ConversationActor extends ModuleActor { 
 if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 isHiddenPeer = getGroup ( peer . getPeerId ( ) ) . isHidden ( ) ; 
 } 
 + 
 + subscribe ( AppVisibleChanged . EVENT ) ; 
 + } 
 + 
 + / / Visibility state 
 + 
 + private void onConversationVisible ( ) { 
 + isConversationVisible = true ; 
 + 
 + if ( isConversationAutoRead ( ) ) { 
 + checkReadState ( ) ; 
 + } 
 + } 
 + 
 + private void onConversationHidden ( ) { 
 + isConversationVisible = false ; 
 + } 
 + 
 + private void onAppVisible ( ) { 
 + isAppVisible = true ; 
 + 
 + if ( isConversationAutoRead ( ) ) { 
 + checkReadState ( ) ; 
 + } 
 + } 
 + 
 + private void onAppHidden ( ) { 
 + isAppVisible = false ; 
 + } 
 + 
 + private boolean isConversationAutoRead ( ) { 
 + return isAppVisible & & isConversationVisible ; 
 + } 
 + 
 + private void checkReadState ( ) { 
 + 
 } 
 
 / / Messages receive / update 
 @ @ - 499 , 11 + 539 , 27 @ @ public class ConversationActor extends ModuleActor { 
 onMessageReadByMe ( ( ( MessageReadByMe ) message ) . getDate ( ) ) ; 
 } else if ( message instanceof MessageReactionsChanged ) { 
 onMessageReactionsUpdated ( ( ( MessageReactionsChanged ) message ) . getRid ( ) , ( ( MessageReactionsChanged ) message ) . getReactions ( ) ) ; 
 + } else if ( message instanceof ConversationVisible ) { 
 + onConversationVisible ( ) ; 
 + } else if ( message instanceof ConversationHidden ) { 
 + onConversationHidden ( ) ; 
 } else { 
 drop ( message ) ; 
 } 
 } 
 
 + @ Override 
 + public void onBusEvent ( Event event ) { 
 + if ( event instanceof AppVisibleChanged ) { 
 + if ( ( ( AppVisibleChanged ) event ) . isVisible ( ) ) { 
 + onAppVisible ( ) ; 
 + } else { 
 + onAppHidden ( ) ; 
 + } 
 + } 
 + super . onBusEvent ( event ) ; 
 + } 
 + 
 public static class MessageContentUpdated { 
 private long rid ; 
 private AbsContent content ; 
 @ @ - 650 , 4 + 706 , 12 @ @ public class ConversationActor extends ModuleActor { 
 return messages ; 
 } 
 } 
 + 
 + public static class ConversationVisible { 
 + 
 + } 
 + 
 + public static class ConversationHidden { 
 + 
 + } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java 
 deleted file mode 100644 
 index bb8078b . . 0000000 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java 
 + + + / dev / null 
 @ @ - 1 , 80 + 0 , 0 @ @ 
 - package im . actor . core . entity ; 
 - 
 - import com . google . j2objc . annotations . Property ; 
 - 
 - import java . io . IOException ; 
 - 
 - import im . actor . runtime . bser . BserObject ; 
 - import im . actor . runtime . bser . BserValues ; 
 - import im . actor . runtime . bser . BserWriter ; 
 - import im . actor . runtime . storage . KeyValueItem ; 
 - 
 - public class DialogDesc extends BserObject implements KeyValueItem { 
 - 
 - @ Property ( " readonly , nonatomic " ) 
 - private Peer peer ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private String title ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private Avatar avatar ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private boolean isUnread ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private int counter ; 
 - 
 - public DialogDesc ( Peer peer , String title , Avatar avatar , boolean isUnread , int counter ) { 
 - this . peer = peer ; 
 - this . title = title ; 
 - this . avatar = avatar ; 
 - this . isUnread = isUnread ; 
 - this . counter = counter ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public String getTitle ( ) { 
 - return title ; 
 - } 
 - 
 - public Avatar getAvatar ( ) { 
 - return avatar ; 
 - } 
 - 
 - public int getCounter ( ) { 
 - return counter ; 
 - } 
 - 
 - public boolean isUnread ( ) { 
 - return isUnread ; 
 - } 
 - 
 - @ Override 
 - public void parse ( BserValues values ) throws IOException { 
 - peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; 
 - title = values . getString ( 2 ) ; 
 - byte [ ] av = values . getBytes ( 3 ) ; 
 - if ( av ! = null ) { 
 - avatar = new Avatar ( av ) ; 
 - } 
 - counter = values . getInt ( 4 ) ; 
 - isUnread = values . getBool ( 5 ) ; 
 - } 
 - 
 - @ Override 
 - public void serialize ( BserWriter writer ) throws IOException { 
 - writer . writeObject ( 1 , peer ) ; 
 - writer . writeString ( 2 , title ) ; 
 - if ( avatar ! = null ) { 
 - writer . writeObject ( 3 , avatar ) ; 
 - } 
 - writer . writeInt ( 4 , counter ) ; 
 - writer . writeBool ( 5 , isUnread ) ; 
 - } 
 - 
 - @ Override 
 - public long getEngineId ( ) { 
 - return peer . getUnuqueId ( ) ; 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java 
 new file mode 100644 
 index 0000000 . . d0c5624 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java 
 @ @ - 0 , 0 + 1 , 69 @ @ 
 + package im . actor . core . entity ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . runtime . bser . BserCreator ; 
 + import im . actor . runtime . bser . BserObject ; 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + import im . actor . runtime . storage . KeyValueItem ; 
 + 
 + public class DialogSpec extends BserObject implements KeyValueItem { 
 + 
 + public static BserCreator < DialogSpec > CREATOR = new BserCreator < DialogSpec > ( ) { 
 + @ Override 
 + public DialogSpec createInstance ( ) { 
 + return new DialogSpec ( ) ; 
 + } 
 + } ; 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private Peer peer ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private boolean isUnread ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private int counter ; 
 + 
 + public DialogSpec ( Peer peer , boolean isUnread , int counter ) { 
 + this . peer = peer ; 
 + this . isUnread = isUnread ; 
 + this . counter = counter ; 
 + } 
 + 
 + private DialogSpec ( ) { 
 + 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + 
 + public boolean isUnread ( ) { 
 + return isUnread ; 
 + } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; 
 + counter = values . getInt ( 2 ) ; 
 + isUnread = values . getBool ( 3 ) ; 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + writer . writeObject ( 1 , peer ) ; 
 + writer . writeInt ( 2 , counter ) ; 
 + writer . writeBool ( 3 , isUnread ) ; 
 + } 
 + 
 + @ Override 
 + public long getEngineId ( ) { 
 + return peer . getUnuqueId ( ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java 
 index 28142c9 . . baf3eaf 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . runtime . storage . PreferencesStorage ; 
 public abstract class AbsModule { 
 
 public static final String STORAGE _ DIALOGS = " dialogs " ; 
 + public static final String STORAGE _ DIALOGS _ DESC = " dialogs _ desc " ; 
 public static final String STORAGE _ USERS = " users " ; 
 public static final String STORAGE _ GROUPS = " groups " ; 
 public static final String STORAGE _ DOWNLOADS = " downloads " ; 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index 30e0d85 . . 88416ee 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import im . actor . core . api . rpc . ResponseSeq ; 
 import im . actor . core . api . updates . UpdateChatClear ; 
 import im . actor . core . api . updates . UpdateChatDelete ; 
 import im . actor . core . entity . Dialog ; 
 + import im . actor . core . entity . DialogSpec ; 
 import im . actor . core . entity . Group ; 
 import im . actor . core . entity . Message ; 
 import im . actor . core . entity . Peer ; 
 @ @ - 48 , 6 + 49 , 7 @ @ import im . actor . core . network . RpcInternalException ; 
 import im . actor . core . viewmodel . Command ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . core . viewmodel . DialogGroupsVM ; 
 + import im . actor . core . viewmodel . DialogSpecVM ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 @ @ - 56 , 6 + 58 , 8 @ @ import im . actor . runtime . actors . tools . BounceFilterActor ; 
 import im . actor . runtime . eventbus . BusSubscriber ; 
 import im . actor . runtime . eventbus . Event ; 
 import im . actor . runtime . files . FileSystemReference ; 
 + import im . actor . runtime . mvvm . MVVMCollection ; 
 + import im . actor . runtime . storage . KeyValueEngine ; 
 import im . actor . runtime . storage . ListEngine ; 
 import im . actor . runtime . storage . SyncKeyValue ; 
 
 @ @ - 83 , 11 + 87 , 14 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 
 private final SyncKeyValue cursorStorage ; 
 
 + private final MVVMCollection < DialogSpec , DialogSpecVM > dialogDescKeyValue ; 
 + 
 private final DialogGroupsVM dialogGroups = new DialogGroupsVM ( ) ; 
 
 public MessagesModule ( final ModuleContext context ) { 
 super ( context ) ; 
 
 + this . dialogDescKeyValue = Storage . createKeyValue ( STORAGE _ DIALOGS _ DESC , DialogSpecVM . CREATOR , DialogSpec . CREATOR ) ; 
 this . cursorStorage = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ CURSOR ) ) ; 
 this . dialogs = Storage . createList ( STORAGE _ DIALOGS , Dialog . CREATOR ) ; 
 } 
 @ @ - 157 , 6 + 164 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 return dialogGroups ; 
 } 
 
 + public MVVMCollection < DialogSpec , DialogSpecVM > getDialogDescKeyValue ( ) { 
 + return dialogDescKeyValue ; 
 + } 
 + 
 public ActorRef getSendMessageActor ( ) { 
 return sendMessageActor ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 index f0fdf00 . . b881551 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 @ @ - 1 , 20 + 1 , 26 @ @ 
 package im . actor . core . modules . internal . messages ; 
 
 import java . util . ArrayList ; 
 - import java . util . HashMap ; 
 
 import im . actor . core . entity . Avatar ; 
 - import im . actor . core . entity . DialogDesc ; 
 + import im . actor . core . entity . DialogSpec ; 
 + import im . actor . core . entity . Group ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerType ; 
 + import im . actor . core . entity . User ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . internal . messages . entity . GroupedStorage ; 
 import im . actor . core . modules . utils . ModuleActor ; 
 import im . actor . core . viewmodel . DialogGroup ; 
 + import im . actor . core . viewmodel . DialogSmall ; 
 + import im . actor . core . viewmodel . DialogSpecVM ; 
 + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; 
 + import im . actor . runtime . mvvm . MVVMCollection ; 
 
 public class GroupedDialogsActor extends ModuleActor { 
 
 - private PeerGroup groups = new PeerGroup ( " groups " , " Groups " ) ; 
 - private PeerGroup privates = new PeerGroup ( " private " , " Private " ) ; 
 + private GroupedStorage storage ; 
 + private MVVMCollection < DialogSpec , DialogSpecVM > specs ; 
 
 public GroupedDialogsActor ( ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 23 , 6 + 29 , 8 @ @ public class GroupedDialogsActor extends ModuleActor { 
 @ Override 
 public void preStart ( ) { 
 super . preStart ( ) ; 
 + specs = context ( ) . getMessagesModule ( ) . getDialogDescKeyValue ( ) ; 
 + storage = new GroupedStorage ( ) ; 
 } 
 
 private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { 
 @ @ - 31 , 38 + 39 , 82 @ @ public class GroupedDialogsActor extends ModuleActor { 
 
 private void onNewMessage ( Peer peer , long sortDate , int counter ) { 
 
 - PeerGroup peerGroup ; 
 - if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 - peerGroup = groups ; 
 - } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 - peerGroup = privates ; 
 - } else { 
 - return ; 
 - } 
 + / / Updating dialog spec 
 + DialogSpec spec = new DialogSpec ( peer , false , counter ) ; 
 + specs . getEngine ( ) . addOrUpdateItem ( spec ) ; 
 
 boolean found = false ; 
 - for ( PeerDesc d : peerGroup . getPeers ( ) ) { 
 - if ( d . getPeer ( ) . equals ( peer ) ) { 
 - d . setCounter ( counter ) ; 
 + for ( Peer p : storage . getPrivatePeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 + found = true ; 
 + break ; 
 + } 
 + } 
 + for ( Peer p : storage . getGroupPeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 found = true ; 
 + break ; 
 } 
 } 
 
 if ( ! found ) { 
 - peerGroup . getPeers ( ) . add ( new PeerDesc ( peer , counter ) ) ; 
 + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + storage . getPrivatePeers ( ) . add ( peer ) ; 
 + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + storage . getGroupPeers ( ) . add ( peer ) ; 
 + } else { 
 + return ; 
 + } 
 } 
 
 - ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; 
 - ArrayList < DialogDesc > groupDescs = new ArrayList < DialogDesc > ( ) ; 
 - for ( PeerDesc d : peerGroup . getPeers ( ) ) { 
 - groupDescs . add ( new DialogDesc ( d . getPeer ( ) , " GRPOUP # " + d . getPeer ( ) . getPeerId ( ) , 
 - null , false , d . counter ) ) ; 
 + notifyVM ( ) ; 
 + saveStorage ( ) ; 
 + } 
 + 
 + private void notifyVM ( ) { 
 + ArrayListDialogSmall groupSpecs = new ArrayListDialogSmall ( ) ; 
 + for ( Peer p : storage . getGroupPeers ( ) ) { 
 + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; 
 + if ( p . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group group = getGroup ( p . getPeerId ( ) ) ; 
 + groupSpecs . add ( new DialogSmall ( p , 
 + group . getTitle ( ) , group . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + User user = getUser ( p . getPeerId ( ) ) ; 
 + groupSpecs . add ( new DialogSmall ( p , 
 + user . getName ( ) , user . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } 
 + } 
 + 
 + ArrayListDialogSmall privateSpecs = new ArrayListDialogSmall ( ) ; 
 + for ( Peer p : storage . getPrivatePeers ( ) ) { 
 + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; 
 + if ( p . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group group = getGroup ( p . getPeerId ( ) ) ; 
 + privateSpecs . add ( new DialogSmall ( p , 
 + group . getTitle ( ) , group . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + User user = getUser ( p . getPeerId ( ) ) ; 
 + privateSpecs . add ( new DialogSmall ( p , 
 + user . getName ( ) , user . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } 
 } 
 - groups . add ( new DialogGroup ( " Groups " , " group " , groupDescs ) ) ; 
 + 
 + ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; 
 + groups . add ( new DialogGroup ( " Groups " , " groups " , groupSpecs ) ) ; 
 + groups . add ( new DialogGroup ( " Private " , " private " , privateSpecs ) ) ; 
 
 context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; 
 } 
 
 + private void saveStorage ( ) { 
 + / / TODO : Implement 
 + } 
 + 
 @ Override 
 public void onReceive ( Object message ) { 
 if ( message instanceof PeerInformationChanged ) { 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java 
 new file mode 100644 
 index 0000000 . . 3e7340c 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + package im . actor . core . modules . internal . messages . entity ; 
 + 
 + import java . io . IOException ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import im . actor . core . entity . DialogSpec ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . viewmodel . DialogSpecVM ; 
 + import im . actor . runtime . bser . BserObject ; 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + import im . actor . runtime . mvvm . MVVMCollection ; 
 + 
 + public class GroupedStorage extends BserObject { 
 + 
 + private ArrayList < Peer > groupPeers = new ArrayList < Peer > ( ) ; 
 + private ArrayList < Peer > privatePeers = new ArrayList < Peer > ( ) ; 
 + 
 + public GroupedStorage ( ) { 
 + } 
 + 
 + public GroupedStorage ( byte [ ] data ) throws IOException { 
 + super . load ( data ) ; 
 + } 
 + 
 + public ArrayList < Peer > getGroupPeers ( ) { 
 + return groupPeers ; 
 + } 
 + 
 + public ArrayList < Peer > getPrivatePeers ( ) { 
 + return privatePeers ; 
 + } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + List < byte [ ] > rawPrivatePeers = values . getRepeatedBytes ( 1 ) ; 
 + groupPeers . clear ( ) ; 
 + for ( byte [ ] b : rawPrivatePeers ) { 
 + groupPeers . add ( Peer . fromBytes ( b ) ) ; 
 + } 
 + List < byte [ ] > rawGroupPeers = values . getRepeatedBytes ( 2 ) ; 
 + for ( byte [ ] b : rawGroupPeers ) { 
 + privatePeers . add ( Peer . fromBytes ( b ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + for ( Peer peer : privatePeers ) { 
 + writer . writeObject ( 1 , peer ) ; 
 + } 
 + for ( Peer peer : groupPeers ) { 
 + writer . writeObject ( 2 , peer ) ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 index ae47f02 . . 47935a1 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 @ @ - 1 , 16 + 1 , 19 @ @ 
 package im . actor . core . viewmodel ; 
 
 - import java . util . ArrayList ; 
 + import com . google . j2objc . annotations . Property ; 
 
 - import im . actor . core . entity . DialogDesc ; 
 + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; 
 
 public class DialogGroup { 
 
 + @ Property ( " readonly , nonatomic " ) 
 private String title ; 
 + @ Property ( " readonly , nonatomic " ) 
 private String key ; 
 - private ArrayList < DialogDesc > dialogs ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private ArrayListDialogSmall dialogs ; 
 
 - public DialogGroup ( String title , String key , ArrayList < DialogDesc > dialogs ) { 
 + public DialogGroup ( String title , String key , ArrayListDialogSmall dialogs ) { 
 this . title = title ; 
 this . key = key ; 
 this . dialogs = dialogs ; 
 @ @ - 24 , 7 + 27 , 7 @ @ public class DialogGroup { 
 return key ; 
 } 
 
 - public ArrayList < DialogDesc > getDialogs ( ) { 
 + public ArrayListDialogSmall getDialogs ( ) { 
 return dialogs ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java 
 new file mode 100644 
 index 0000000 . . b77e893 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + package im . actor . core . viewmodel ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import im . actor . core . entity . Avatar ; 
 + import im . actor . core . entity . Peer ; 
 + 
 + public class DialogSmall { 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private final Peer peer ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private final String title ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private final Avatar avatar ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private final int counter ; 
 + 
 + public DialogSmall ( Peer peer , String title , Avatar avatar , int counter ) { 
 + this . peer = peer ; 
 + this . title = title ; 
 + this . avatar = avatar ; 
 + this . counter = counter ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public String getTitle ( ) { 
 + return title ; 
 + } 
 + 
 + public Avatar getAvatar ( ) { 
 + return avatar ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java 
 new file mode 100644 
 index 0000000 . . 52a266d 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java 
 @ @ - 0 , 0 + 1 , 53 @ @ 
 + package im . actor . core . viewmodel ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import im . actor . core . entity . DialogSpec ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . viewmodel . generics . BooleanValueModel ; 
 + import im . actor . core . viewmodel . generics . IntValueModel ; 
 + import im . actor . runtime . mvvm . BaseValueModel ; 
 + import im . actor . runtime . mvvm . ValueModelCreator ; 
 + 
 + public class DialogSpecVM extends BaseValueModel < DialogSpec > { 
 + 
 + public static ValueModelCreator < DialogSpec , DialogSpecVM > CREATOR = new ValueModelCreator < DialogSpec , DialogSpecVM > ( ) { 
 + @ Override 
 + public DialogSpecVM create ( DialogSpec baseValue ) { 
 + return new DialogSpecVM ( baseValue ) ; 
 + } 
 + } ; 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private final Peer peer ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private IntValueModel counter ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private BooleanValueModel isUnread ; 
 + 
 + public DialogSpecVM ( DialogSpec rawObj ) { 
 + super ( rawObj ) ; 
 + 
 + this . peer = rawObj . getPeer ( ) ; 
 + this . counter = new IntValueModel ( " dialogs . desc . counter " , rawObj . getCounter ( ) ) ; 
 + this . isUnread = new BooleanValueModel ( " dialogs . desc . unread " , rawObj . isUnread ( ) ) ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public IntValueModel getCounter ( ) { 
 + return counter ; 
 + } 
 + 
 + public BooleanValueModel getIsUnread ( ) { 
 + return isUnread ; 
 + } 
 + 
 + @ Override 
 + protected void updateValues ( DialogSpec rawObj ) { 
 + counter . change ( rawObj . getCounter ( ) ) ; 
 + isUnread . change ( rawObj . isUnread ( ) ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java 
 new file mode 100644 
 index 0000000 . . 9727306 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package im . actor . core . viewmodel . generics ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . core . viewmodel . DialogSmall ; 
 + 
 + public class ArrayListDialogSmall extends ArrayList < DialogSmall > { 
 + 
 + @ Override 
 + public DialogSmall get ( int index ) { 
 + return super . get ( index ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift 
 index 32554b4 . . f496742 100644 
 - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift 
 + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift 
 @ @ - 6 , 7 + 6 , 7 @ @ import UIKit 
 
 class AADebugController : AAContentTableController { 
 
 - var debugData : AAManagedArrayRows < ACDialogDesc , AACommonCell > ! 
 + var debugData : AAManagedArrayRows < ACDialogSmall , AACommonCell > ! 
 
 init ( ) { 
 super . init ( style : . Plain ) 
 @ @ - 18 , 9 + 18 , 10 @ @ class AADebugController : AAContentTableController { 
 
 override func tableDidLoad ( ) { 
 section { ( s ) - > ( ) in 
 - self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogDesc , AACommonCell > ) - > ( ) in 
 - r . bindData = { ( cell : AACommonCell , data : ACDialogDesc ) - > ( ) in 
 - cell . setContent ( data . title ) 
 + self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogSmall , AACommonCell > ) - > ( ) in 
 + r . bindData = { ( cell : AACommonCell , data : ACDialogSmall ) - > ( ) in 
 + cell . setContent ( " \ ( data . counter ) - \ ( data . title ) " ) 
 + cell . style = . Normal 
 } 
 } 
 } 
 @ @ - 30 , 11 + 31 , 11 @ @ class AADebugController : AAContentTableController { 
 binder . bind ( ActorSDK . sharedActor ( ) . messenger . getDialogGroupsVM ( ) . getGroupsValueModel ( ) ) { ( value : JavaUtilArrayList ? ) - > ( ) in 
 
 if value ! = nil { 
 - var items = [ ACDialogDesc ] ( ) 
 + var items = [ ACDialogSmall ] ( ) 
 
 for i in 0 . . < value ! . size ( ) { 
 - for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . getDialogs ( ) { 
 - items . append ( j as ! ACDialogDesc ) 
 + for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . dialogs { 
 + items . append ( j as ! ACDialogSmall ) 
 } 
 } 
 self . debugData . data = items
