BLEU SCORE: 0.07561318691530973

TEST MSG: feat ( iOS ) : Direct working with CommonCrypto
GENERATED MSG: wip ( se ) : Implementation of core library for java se

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index eb334c5 . . ca11d52 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 609 , 6 + 609 , 7 @ @ < nl > 	 	 06D5C0591C8E9B3B002D5045 / * Promises . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = Promises . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06D5C05B1C8EA842002D5045 / * AAAuthOTPViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAuthOTPViewController . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06E1648E1C96D99F005AFB94 / * CocoaCrypto . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = CocoaCrypto . swift ; sourceTree = " < group > " ; } ; < nl > + 	 	 06E164931C96FF3D005AFB94 / * module . map * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = " sourcecode . module - map " ; path = module . map ; sourceTree = " < group > " ; } ; < nl > 	 	 06E322C81C69344A00D66F53 / * iOSCallsProvider . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = iOSCallsProvider . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06E3230D1C6942C400D66F53 / * WebRTC . h * / = { isa = PBXFileReference ; lastKnownFileType = sourcecode . c . h ; path = WebRTC . h ; sourceTree = " < group > " ; } ; < nl > 	 	 06E323101C694C1D00D66F53 / * WebRTCExt . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = WebRTCExt . swift ; sourceTree = " < group > " ; } ; < nl > @ @ - 1413 , 9 + 1414 , 19 @ @ < nl > 	 	 	 name = Welcome ; < nl > 	 	 	 sourceTree = " < group > " ; < nl > 	 	 } ; < nl > + 	 	 06E164921C96FF15005AFB94 / * CommonCrypto * / = { < nl > + 	 	 	 isa = PBXGroup ; < nl > + 	 	 	 children = ( < nl > + 	 	 	 	 06E164931C96FF3D005AFB94 / * module . map * / , < nl > + 	 	 	 ) ; < nl > + 	 	 	 name = CommonCrypto ; < nl > + 	 	 	 path = Libs / CommonCrypto ; < nl > + 	 	 	 sourceTree = " < group > " ; < nl > + 	 	 } ; < nl > 	 	 06E322CB1C69392F00D66F53 / * Libs * / = { < nl > 	 	 	 isa = PBXGroup ; < nl > 	 	 	 children = ( < nl > + 	 	 	 	 06E164921C96FF15005AFB94 / * CommonCrypto * / , < nl > 	 	 	 	 061850A31C95CBF000C522D5 / * YYKit * / , < nl > 	 	 	 	 15D35F0A1C20182900E3717A / * AudioRecorder * / , < nl > 	 	 	 	 06E3230D1C6942C400D66F53 / * WebRTC . h * / , < nl > @ @ - 2392 , 6 + 2403 , 7 @ @ < nl > 	 	 	 	 PROVISIONING _ PROFILE = " " ; < nl > 	 	 	 	 SKIP _ INSTALL = YES ; < nl > 	 	 	 	 STRIP _ INSTALLED _ PRODUCT = YES ; < nl > + 	 	 	 	 SWIFT _ INCLUDE _ PATHS = " $ ( PROJECT _ DIR ) / ActorSDK / Sources / Libs / CommonCrypto $ ( PROJECT _ DIR ) / IDZSwiftCommonCrypto / Frameworks / $ ( PLATFORM _ NAME ) " ; < nl > 	 	 	 	 SWIFT _ OBJC _ BRIDGING _ HEADER = " " ; < nl > 	 	 	 	 SWIFT _ OPTIMIZATION _ LEVEL = " - Onone " ; < nl > 	 	 	 	 VALID _ ARCHS = " arm64 armv7 " ; < nl > @ @ - 2445 , 6 + 2457 , 7 @ @ < nl > 	 	 	 	 PROVISIONING _ PROFILE = " " ; < nl > 	 	 	 	 SKIP _ INSTALL = YES ; < nl > 	 	 	 	 STRIP _ INSTALLED _ PRODUCT = YES ; < nl > + 	 	 	 	 SWIFT _ INCLUDE _ PATHS = " $ ( PROJECT _ DIR ) / ActorSDK / Sources / Libs / CommonCrypto $ ( PROJECT _ DIR ) / IDZSwiftCommonCrypto / Frameworks / $ ( PLATFORM _ NAME ) " ; < nl > 	 	 	 	 SWIFT _ OBJC _ BRIDGING _ HEADER = " " ; < nl > 	 	 	 	 SWIFT _ OPTIMIZATION _ LEVEL = " - Owholemodule " ; < nl > 	 	 	 	 VALID _ ARCHS = " arm64 armv7 " ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaCrypto . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaCrypto . swift < nl > index 7e294d0 . . ab856a7 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaCrypto . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaCrypto . swift < nl > @ @ - 3 , 35 + 3 , 93 @ @ < nl > / / < nl > < nl > import Foundation < nl > - import IDZSwiftCommonCrypto < nl > + import CommonCrypto < nl > < nl > class CocoaCrypto : NSObject , ARCocoaCryptoProxyProvider { < nl > < nl > func createSHA256 ( ) - > ARDigest ! { < nl > return SHA256Digest ( ) < nl > } < nl > + < nl > + func createAES128WithKey ( key : IOSByteArray ! ) - > ARBlockCipher ! { < nl > + / / return AES128 ( key : key ) < nl > + return nil < nl > + } < nl > } < nl > < nl > class SHA256Digest : NSObject , ARDigest { < nl > < nl > - var digest = Digest ( algorithm : . SHA256 ) < nl > + let context = UnsafeMutablePointer < CC _ SHA256 _ CTX > . alloc ( 1 ) < nl > + < nl > + override init ( ) { < nl > + super . init ( ) < nl > + reset ( ) < nl > + } < nl > + < nl > + deinit { < nl > + context . dealloc ( 1 ) < nl > + } < nl > < nl > func reset ( ) { < nl > - digest = Digest ( algorithm : . SHA256 ) < nl > + CC _ SHA256 _ Init ( context ) < nl > } < nl > < nl > func update ( src : IOSByteArray ! , withOffset offset : jint , withLength length : jint ) { < nl > - digest . update ( src . toNSData ( ) . subdataWithRange ( NSRange ( location : Int ( offset ) , length : Int ( length ) ) ) ) < nl > + < nl > + let pointer = src < nl > + . buffer ( ) < nl > + . advancedBy ( Int ( offset ) ) < nl > + < nl > + CC _ SHA256 _ Update ( context , pointer , CC _ LONG ( length ) ) < nl > } < nl > < nl > func doFinal ( dest : IOSByteArray ! , withOffset destOffset : jint ) { < nl > - let res = digest . final ( ) < nl > - for i : UInt in 0 . . < 32 { < nl > - dest . replaceByteAtIndex ( UInt ( destOffset ) + i , withByte : jbyte ( bitPattern : res [ Int ( i ) ] ) ) < nl > - } < nl > + < nl > + let pointer = UnsafeMutablePointer < UInt8 > ( dest . buffer ( ) ) < nl > + . advancedBy ( Int ( destOffset ) ) < nl > + < nl > + CC _ SHA256 _ Final ( pointer , context ) < nl > } < nl > < nl > func getDigestSize ( ) - > jint { < nl > - return 32 < nl > + return jint ( CC _ SHA256 _ DIGEST _ LENGTH ) < nl > } < nl > - } < nl > \ No newline at end of file < nl > + } < nl > + < nl > + / / class AES128 : NSObject , ARBlockCipher { < nl > + / / < nl > + / / var key = [ UInt8 ] ( ) < nl > + / / let encryptor : Cryptor < nl > + / / let decryptor : Cryptor < nl > + / / < nl > + / / init ( key : IOSByteArray ) { < nl > + / / for i in 0 . . < 16 { < nl > + / / let bt = key . byteAtIndex ( UInt ( i ) ) < nl > + / / self . key . append ( UInt8 ( bitPattern : Int8 ( bt ) ) ) < nl > + / / } < nl > + / / encryptor = Cryptor ( operation : . Encrypt , algorithm : . AES , options : . ECBMode , key : self . key , iv : [ ] ) < nl > + / / decryptor = Cryptor ( operation : . Decrypt , algorithm : . AES , options : . ECBMode , key : self . key , iv : [ ] ) < nl > + / / } < nl > + / / < nl > + / / func encryptBlock ( data : IOSByteArray ! , withOffset offset : jint , toDest dest : IOSByteArray ! , withOffset destOffset : jint ) { < nl > + / / let src = data . toNSData ( ) . subdataWithRange ( NSRange ( location : Int ( offset ) , length : Int ( 16 ) ) ) < nl > + / / var res : [ UInt8 ] = [ UInt8 ] ( count : 16 , repeatedValue : 0 ) < nl > + / / encryptor . update ( src , byteArrayOut : & res ) < nl > + / / for i : UInt in 0 . . < 16 { < nl > + / / dest . replaceByteAtIndex ( UInt ( destOffset ) + i , withByte : jbyte ( bitPattern : res [ Int ( i ) ] ) ) < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / func decryptBlock ( data : IOSByteArray ! , withOffset offset : jint , toDest dest : IOSByteArray ! , withOffset destOffset : jint ) { < nl > + / / let src = data . toNSData ( ) . subdataWithRange ( NSRange ( location : Int ( offset ) , length : Int ( 16 ) ) ) < nl > + / / decryptor . update ( src ) < nl > + / / let res = decryptor . final ( ) ! < nl > + / / for i : UInt in 0 . . < 16 { < nl > + / / dest . replaceByteAtIndex ( UInt ( destOffset ) + i , withByte : jbyte ( bitPattern : res [ Int ( i ) ] ) ) < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / func getBlockSize ( ) - > jint { < nl > + / / return 16 < nl > + / / } < nl > + / / } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Libs / CommonCrypto / module . map b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Libs / CommonCrypto / module . map < nl > new file mode 100644 < nl > index 0000000 . . 6b6c840 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Libs / CommonCrypto / module . map < nl > @ @ - 0 , 0 + 1 , 4 @ @ < nl > + module CommonCrypto [ system ] { < nl > + header " / Applications / Xcode . app / Contents / Developer / Platforms / iPhoneOS . platform / Developer / SDKs / iPhoneOS . sdk / usr / include / CommonCrypto / CommonCrypto . h " < nl > + export * < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / Podfile b / actor - sdk / sdk - core - ios / Podfile < nl > index b1e2d22 . . ccabc1c 100644 < nl > - - - a / actor - sdk / sdk - core - ios / Podfile < nl > + + + b / actor - sdk / sdk - core - ios / Podfile < nl > @ @ - 16 , 7 + 16 , 6 @ @ target ' ActorApp ' do < nl > pod ' RegexKitLite ' < nl > pod ' CocoaAsyncSocket ' < nl > pod ' zipzap ' < nl > - pod ' IDZSwiftCommonCrypto ' < nl > < nl > # Main UI < nl > pod ' TTTAttributedLabel ' < nl > @ @ - 56 , 7 + 55 , 6 @ @ target ' ActorSDK ' do < nl > pod ' RegexKitLite ' < nl > pod ' CocoaAsyncSocket ' < nl > pod ' zipzap ' < nl > - pod ' IDZSwiftCommonCrypto ' < nl > < nl > # Main UI < nl > pod ' TTTAttributedLabel ' < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / mtp / actors / ManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / mtp / actors / ManagerActor . java < nl > index 1d9dc61 . . 7651119 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / mtp / actors / ManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / mtp / actors / ManagerActor . java < nl > @ @ - 95 , 7 + 95 , 7 @ @ public class ManagerActor extends Actor { < nl > if ( this . authKey ! = null ) { < nl > this . authProtoKey = new ActorProtoKey ( this . authKey ) ; < nl > this . serverUSDecryptor = new CBCHmacBox ( < nl > - new AESFastEngine ( this . authProtoKey . getServerKey ( ) ) , < nl > + Crypto . createAES128 ( this . authProtoKey . getServerKey ( ) ) , < nl > Crypto . createSHA256 ( ) , < nl > this . authProtoKey . getServerMacKey ( ) ) ; < nl > this . serverRUDecryptor = new CBCHmacBox ( < nl > @ @ - 103 , 7 + 103 , 7 @ @ public class ManagerActor extends Actor { < nl > new Streebog256 ( ) , < nl > this . authProtoKey . getServerMacRussianKey ( ) ) ; < nl > this . clientUSEncryptor = new CBCHmacBox ( < nl > - new AESFastEngine ( this . authProtoKey . getClientKey ( ) ) , < nl > + Crypto . createAES128 ( this . authProtoKey . getClientKey ( ) ) , < nl > Crypto . createSHA256 ( ) , < nl > this . authProtoKey . getClientMacKey ( ) ) ; < nl > this . clientRUEncryptor = new CBCHmacBox ( < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaCryptoProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaCryptoProvider . java < nl > index 125b00c . . 6749a60 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaCryptoProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaCryptoProvider . java < nl > @ @ - 5 , 7 + 5 , 9 @ @ < nl > package im . actor . runtime . cocoa ; < nl > < nl > import im . actor . runtime . cocoa . crypto . CocoaCryptoProxyProvider ; < nl > + import im . actor . runtime . crypto . BlockCipher ; < nl > import im . actor . runtime . crypto . Digest ; < nl > + import im . actor . runtime . crypto . primitives . ValidatedBlockCipher ; < nl > import im . actor . runtime . generic . GenericCryptoProvider ; < nl > < nl > public class CocoaCryptoProvider extends GenericCryptoProvider { < nl > @ @ - 27 , 4 + 29 , 13 @ @ public class CocoaCryptoProvider extends GenericCryptoProvider { < nl > } < nl > return super . SHA256 ( ) ; < nl > } < nl > + < nl > + @ Override < nl > + public BlockCipher AES128 ( byte [ ] key ) { < nl > + / / if ( proxyProvider ! = null ) { < nl > + / / return new ValidatedBlockCipher ( super . AES128 ( key ) , proxyProvider . createAES128 ( key ) ) ; < nl > + / / / / return proxyProvider . createAES128 ( key ) ; < nl > + / / } < nl > + return super . AES128 ( key ) ; < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / crypto / CocoaCryptoProxyProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / crypto / CocoaCryptoProxyProvider . java < nl > index 1bbfb12 . . 144ddab 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / crypto / CocoaCryptoProxyProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / crypto / CocoaCryptoProxyProvider . java < nl > @ @ - 3 , 9 + 3 , 13 @ @ package im . actor . runtime . cocoa . crypto ; < nl > import com . google . j2objc . annotations . ObjectiveCName ; < nl > < nl > import im . actor . runtime . crypto . Digest ; < nl > + import im . actor . runtime . crypto . BlockCipher ; < nl > < nl > public interface CocoaCryptoProxyProvider { < nl > < nl > @ ObjectiveCName ( " createSHA256 " ) < nl > Digest createSHA256 ( ) ; < nl > + < nl > + @ ObjectiveCName ( " createAES128WithKey : " ) < nl > + BlockCipher createAES128 ( byte [ ] key ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java < nl > index 30f595c . . 1c9a6e4 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java < nl > @ @ - 4 , 6 + 4 , 7 @ @ < nl > < nl > package im . actor . runtime ; < nl > < nl > + import im . actor . runtime . crypto . BlockCipher ; < nl > import im . actor . runtime . crypto . Digest ; < nl > import im . actor . runtime . crypto . primitives . digest . KeyDigest ; < nl > import im . actor . runtime . crypto . primitives . digest . MD5 ; < nl > @ @ - 25 , 6 + 26 , 10 @ @ public class Crypto { < nl > return runtime . SHA256 ( ) ; < nl > } < nl > < nl > + public static BlockCipher createAES128 ( byte [ ] key ) { < nl > + return runtime . AES128 ( key ) ; < nl > + } < nl > + < nl > public static byte [ ] MD5 ( byte [ ] data ) { < nl > MD5 md5 = new MD5 ( ) ; < nl > md5 . update ( data , 0 , data . length ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / CryptoRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / CryptoRuntime . java < nl > index 9292770 . . d57e59b 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / CryptoRuntime . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / CryptoRuntime . java < nl > @ @ - 5 , 6 + 5 , 7 @ @ < nl > package im . actor . runtime ; < nl > < nl > import im . actor . runtime . crypto . Digest ; < nl > + import im . actor . runtime . crypto . BlockCipher ; < nl > < nl > / * * < nl > * Provider for Cryptography support < nl > @ @ - 13 , 5 + 14 , 7 @ @ public interface CryptoRuntime { < nl > < nl > Digest SHA256 ( ) ; < nl > < nl > + BlockCipher AES128 ( byte [ ] key ) ; < nl > + < nl > void waitForCryptoLoaded ( ) ; < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / DefaultCryptoRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / DefaultCryptoRuntime . java < nl > index 6d682dd . . 09c1451 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / DefaultCryptoRuntime . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / DefaultCryptoRuntime . java < nl > @ @ - 1 , 6 + 1 , 8 @ @ < nl > package im . actor . runtime ; < nl > < nl > + import im . actor . runtime . crypto . BlockCipher ; < nl > import im . actor . runtime . crypto . Digest ; < nl > + import im . actor . runtime . crypto . primitives . aes . AESFastEngine ; < nl > import im . actor . runtime . crypto . primitives . digest . SHA256 ; < nl > < nl > public abstract class DefaultCryptoRuntime implements CryptoRuntime { < nl > @ @ - 10 , 5 + 12 , 8 @ @ public abstract class DefaultCryptoRuntime implements CryptoRuntime { < nl > return new SHA256 ( ) ; < nl > } < nl > < nl > - < nl > + @ Override < nl > + public BlockCipher AES128 ( byte [ ] key ) { < nl > + return new AESFastEngine ( key ) ; < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / AesCipher . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / AesCipher . java < nl > deleted file mode 100644 < nl > index f306f38 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / AesCipher . java < nl > + + + / dev / null < nl > @ @ - 1 , 11 + 0 , 0 @ @ < nl > - / * < nl > - * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > < nl > - * / < nl > - < nl > - package im . actor . runtime . crypto ; < nl > - < nl > - public interface AesCipher { < nl > - byte [ ] encrypt ( byte [ ] source ) ; < nl > - < nl > - byte [ ] decrypt ( byte [ ] source ) ; < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / BlockCipher . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / BlockCipher . java < nl > new file mode 100644 < nl > index 0000000 . . e0bdba8 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / BlockCipher . java < nl > @ @ - 0 , 0 + 1 , 41 @ @ < nl > + package im . actor . runtime . crypto ; < nl > + < nl > + import com . google . j2objc . annotations . ObjectiveCName ; < nl > + < nl > + / * * < nl > + * Block - based cipher < nl > + * < nl > + * @ author Steve Kite ( steve @ actor . im ) < nl > + * / < nl > + public interface BlockCipher { < nl > + < nl > + / * * < nl > + * Encrypting block < nl > + * < nl > + * @ param data plain - text data < nl > + * @ param offset offset for data < nl > + * @ param dest destination buffer < nl > + * @ param destOffset destination offset < nl > + * / < nl > + @ ObjectiveCName ( " encryptBlock : withOffset : toDest : withOffset : " ) < nl > + void encryptBlock ( byte [ ] data , int offset , byte [ ] dest , int destOffset ) ; < nl > + < nl > + / * * < nl > + * Decrypting block < nl > + * < nl > + * @ param data cipher - text data < nl > + * @ param offset offset for data < nl > + * @ param dest destination buffer < nl > + * @ param destOffset destination offset < nl > + * / < nl > + @ ObjectiveCName ( " decryptBlock : withOffset : toDest : withOffset : " ) < nl > + void decryptBlock ( byte [ ] data , int offset , byte [ ] dest , int destOffset ) ; < nl > + < nl > + / * * < nl > + * Getting cipher ' s block size < nl > + * < nl > + * @ return block size in bytes < nl > + * / < nl > + @ ObjectiveCName ( " getBlockSize " ) < nl > + int getBlockSize ( ) ; < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / box / ActorBox . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / box / ActorBox . java < nl > index 828e15c . . fea6146 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / box / ActorBox . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / box / ActorBox . java < nl > @ @ - 28 , 7 + 28 , 7 @ @ public class ActorBox { < nl > * / < nl > public static byte [ ] openBox ( byte [ ] header , byte [ ] cipherText , ActorBoxKey key ) throws IntegrityException { < nl > CBCHmacBox aesCipher = < nl > - new CBCHmacBox ( new AESFastEngine ( key . getKeyAES ( ) ) , Crypto . createSHA256 ( ) , key . getMacAES ( ) ) ; < nl > + new CBCHmacBox ( Crypto . createAES128 ( key . getKeyAES ( ) ) , Crypto . createSHA256 ( ) , key . getMacAES ( ) ) ; < nl > CBCHmacBox kuzCipher = < nl > new CBCHmacBox ( new KuznechikFastEngine ( key . getKeyKuz ( ) ) , new Streebog256 ( ) , key . getMacKuz ( ) ) ; < nl > byte [ ] kuzPackage = aesCipher . decryptPackage ( header , < nl > @ @ - 62 , 7 + 62 , 7 @ @ public class ActorBox { < nl > * @ throws IntegrityException < nl > * / < nl > public static byte [ ] closeBox ( byte [ ] header , byte [ ] plainText , byte [ ] random32 , ActorBoxKey key ) throws IntegrityException { < nl > - CBCHmacBox aesCipher = new CBCHmacBox ( new AESFastEngine ( key . getKeyAES ( ) ) , Crypto . createSHA256 ( ) , key . getMacAES ( ) ) ; < nl > + CBCHmacBox aesCipher = new CBCHmacBox ( Crypto . createAES128 ( key . getKeyAES ( ) ) , Crypto . createSHA256 ( ) , key . getMacAES ( ) ) ; < nl > CBCHmacBox kuzCipher = new CBCHmacBox ( new KuznechikFastEngine ( key . getKeyKuz ( ) ) , new Streebog256 ( ) , key . getMacKuz ( ) ) ; < nl > < nl > / / Calculating padding < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / box / CBCHmacBox . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / box / CBCHmacBox . java < nl > index 55d6b18 . . 9edbc0d 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / box / CBCHmacBox . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / box / CBCHmacBox . java < nl > @ @ - 1 , 7 + 1 , 7 @ @ < nl > package im . actor . runtime . crypto . box ; < nl > < nl > import im . actor . runtime . crypto . IntegrityException ; < nl > - import im . actor . runtime . crypto . primitives . BlockCipher ; < nl > + import im . actor . runtime . crypto . BlockCipher ; < nl > import im . actor . runtime . crypto . Digest ; < nl > import im . actor . runtime . crypto . primitives . Padding ; < nl > import im . actor . runtime . crypto . primitives . hmac . HMAC ; < nl > @ @ - 24 , 17 + 24 , 11 @ @ import im . actor . runtime . crypto . primitives . util . ByteStrings ; < nl > public class CBCHmacBox { < nl > < nl > private final CBCBlockCipher cbcBlockCipher ; < nl > - private final BlockCipher baseCipher ; < nl > - private final Digest baseDigest ; < nl > private final HMAC hmac ; < nl > - private final byte [ ] hmacKey ; < nl > private final Padding padding ; < nl > < nl > public CBCHmacBox ( BlockCipher baseCipher , Digest baseDigest , byte [ ] hmacKey ) { < nl > this . cbcBlockCipher = new CBCBlockCipher ( baseCipher ) ; < nl > - this . baseCipher = baseCipher ; < nl > - this . baseDigest = baseDigest ; < nl > - this . hmacKey = hmacKey ; < nl > this . padding = new PKCS7Padding ( ) ; < nl > this . hmac = new HMAC ( hmacKey , baseDigest ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / BlockCipher . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / BlockCipher . java < nl > deleted file mode 100644 < nl > index 607be15 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / BlockCipher . java < nl > + + + / dev / null < nl > @ @ - 1 , 36 + 0 , 0 @ @ < nl > - package im . actor . runtime . crypto . primitives ; < nl > - < nl > - / * * < nl > - * Block - based cipher < nl > - * < nl > - * @ author Steve Kite ( steve @ actor . im ) < nl > - * / < nl > - public interface BlockCipher { < nl > - < nl > - / * * < nl > - * Encrypting block < nl > - * < nl > - * @ param data plain - text data < nl > - * @ param offset offset for data < nl > - * @ param dest destination buffer < nl > - * @ param destOffset destination offset < nl > - * / < nl > - void encryptBlock ( byte [ ] data , int offset , byte [ ] dest , int destOffset ) ; < nl > - < nl > - / * * < nl > - * Decrypting block < nl > - * < nl > - * @ param data cipher - text data < nl > - * @ param offset offset for data < nl > - * @ param dest destination buffer < nl > - * @ param destOffset destination offset < nl > - * / < nl > - void decryptBlock ( byte [ ] data , int offset , byte [ ] dest , int destOffset ) ; < nl > - < nl > - / * * < nl > - * Getting cipher ' s block size < nl > - * < nl > - * @ return block size in bytes < nl > - * / < nl > - int getBlockSize ( ) ; < nl > - } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / ValidatedBlockCipher . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / ValidatedBlockCipher . java < nl > new file mode 100644 < nl > index 0000000 . . c39cfcd < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / ValidatedBlockCipher . java < nl > @ @ - 0 , 0 + 1 , 48 @ @ < nl > + package im . actor . runtime . crypto . primitives ; < nl > + < nl > + import im . actor . core . util . JavaUtil ; < nl > + import im . actor . runtime . Crypto ; < nl > + import im . actor . runtime . crypto . BlockCipher ; < nl > + < nl > + public class ValidatedBlockCipher implements BlockCipher { < nl > + < nl > + private BlockCipher referenceImplementation ; < nl > + private BlockCipher modifiedImplementation ; < nl > + < nl > + public ValidatedBlockCipher ( BlockCipher referenceImplementation , BlockCipher modifiedImplementation ) { < nl > + this . referenceImplementation = referenceImplementation ; < nl > + this . modifiedImplementation = modifiedImplementation ; < nl > + } < nl > + < nl > + @ Override < nl > + public void encryptBlock ( byte [ ] data , int offset , byte [ ] dest , int destOffset ) { < nl > + byte [ ] dest1 = new byte [ getBlockSize ( ) ] ; < nl > + byte [ ] dest2 = new byte [ getBlockSize ( ) ] ; < nl > + < nl > + referenceImplementation . encryptBlock ( data , offset , dest1 , 0 ) ; < nl > + modifiedImplementation . encryptBlock ( data , offset , dest2 , 0 ) ; < nl > + < nl > + for ( int i = 0 ; i < dest1 . length ; i + + ) { < nl > + if ( dest1 [ i ] ! = dest2 [ i ] ) { < nl > + < nl > + throw new RuntimeException ( " Mismatched output at " + i + " : " < nl > + + Crypto . hex ( dest1 ) + " " + Crypto . hex ( dest2 ) ) ; < nl > + } < nl > + } < nl > + < nl > + referenceImplementation . encryptBlock ( data , offset , dest , destOffset ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void decryptBlock ( byte [ ] data , int offset , byte [ ] dest , int destOffset ) { < nl > + referenceImplementation . decryptBlock ( data , offset , dest , destOffset ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public int getBlockSize ( ) { < nl > + if ( referenceImplementation . getBlockSize ( ) ! = modifiedImplementation . getBlockSize ( ) ) { < nl > + throw new RuntimeException ( ) ; < nl > + } < nl > + return modifiedImplementation . getBlockSize ( ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / aes / AESFastEngine . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / aes / AESFastEngine . java < nl > index 8b1f165 . . 968c7b7 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / aes / AESFastEngine . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / aes / AESFastEngine . java < nl > @ @ - 1 , 7 + 1 , 7 @ @ < nl > package im . actor . runtime . crypto . primitives . aes ; < nl > < nl > < nl > - import im . actor . runtime . crypto . primitives . BlockCipher ; < nl > + import im . actor . runtime . crypto . BlockCipher ; < nl > import im . actor . runtime . crypto . primitives . util . Pack ; < nl > < nl > / * * < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikCipher . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikCipher . java < nl > index 907776a . . 43e414f 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikCipher . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikCipher . java < nl > @ @ - 1 , 6 + 1 , 6 @ @ < nl > package im . actor . runtime . crypto . primitives . kuznechik ; < nl > < nl > - import im . actor . runtime . crypto . primitives . BlockCipher ; < nl > + import im . actor . runtime . crypto . BlockCipher ; < nl > import im . actor . runtime . crypto . primitives . util . ByteStrings ; < nl > < nl > / * * < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java < nl > index 76594d8 . . 02556ff 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java < nl > @ @ - 1 , 7 + 1 , 7 @ @ < nl > package im . actor . runtime . crypto . primitives . kuznechik ; < nl > < nl > import im . actor . runtime . Crypto ; < nl > - import im . actor . runtime . crypto . primitives . BlockCipher ; < nl > + import im . actor . runtime . crypto . BlockCipher ; < nl > import im . actor . runtime . crypto . primitives . util . Pack ; < nl > < nl > public class KuznechikFastEngine implements BlockCipher { < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / modes / CBCBlockCipher . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / modes / CBCBlockCipher . java < nl > index 34ae57f . . e17bf84 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / modes / CBCBlockCipher . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / modes / CBCBlockCipher . java < nl > @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . runtime . crypto . primitives . modes ; < nl > import com . google . j2objc . annotations . AutoreleasePool ; < nl > < nl > import im . actor . runtime . crypto . IntegrityException ; < nl > - import im . actor . runtime . crypto . primitives . BlockCipher ; < nl > + import im . actor . runtime . crypto . BlockCipher ; < nl > < nl > / * * < nl > * CBC Cipher implementation
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - se / build . gradle b / actor - sdk / sdk - core / core / core - se / build . gradle < nl > new file mode 100644 < nl > index 0000000 . . c708986 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - se / build . gradle < nl > @ @ - 0 , 0 + 1 , 31 @ @ < nl > + buildscript { < nl > + repositories { < nl > + mavenCentral ( ) < nl > + } < nl > + } < nl > + < nl > + apply plugin : ' java ' < nl > + < nl > + compileJava { < nl > + sourceCompatibility = 1 . 6 < nl > + targetCompatibility = 1 . 6 < nl > + } < nl > + < nl > + sourceSets { < nl > + main { < nl > + java { < nl > + srcDirs = [ ' src / main / java ' , < nl > + ' . . / core - shared / src / main / java ' , < nl > + ' . . / core - shared / src / ext / java ' ] < nl > + } < nl > + resources { < nl > + srcDirs = [ ' . . / core - shared / src / main / resources ' ] < nl > + } < nl > + } < nl > + < nl > + } < nl > + < nl > + dependencies { < nl > + compile ' com . squareup . okhttp : okhttp : 2 + ' < nl > + testCompile " junit : junit : 4 . 11 " < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - se / src / main / java / im / actor / core / JavaSeMessenger . java b / actor - sdk / sdk - core / core / core - se / src / main / java / im / actor / core / JavaSeMessenger . java < nl > new file mode 100644 < nl > index 0000000 . . 3479d03 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - se / src / main / java / im / actor / core / JavaSeMessenger . java < nl > @ @ - 0 , 0 + 1 , 13 @ @ < nl > + package im . actor . core ; < nl > + < nl > + public class JavaSeMessenger extends Messenger { < nl > + < nl > + / * * < nl > + * Construct messenger < nl > + * < nl > + * @ param configuration configuration of messenger < nl > + * / < nl > + public JavaSeMessenger ( Configuration configuration ) { < nl > + super ( configuration ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / build . gradle b / actor - sdk / sdk - core / runtime / runtime - se / build . gradle < nl > new file mode 100644 < nl > index 0000000 . . c511e87 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / build . gradle < nl > @ @ - 0 , 0 + 1 , 21 @ @ < nl > + buildscript { < nl > + repositories { < nl > + mavenCentral ( ) < nl > + } < nl > + } < nl > + < nl > + apply plugin : ' java ' < nl > + < nl > + sourceSets { < nl > + main { < nl > + java { < nl > + srcDirs = [ ' src / main / java ' , < nl > + ' . . / runtime - shared / src / main / java ' , < nl > + ' . . / runtime - generic / src / main / java ' ] < nl > + } < nl > + } < nl > + } < nl > + < nl > + dependencies { < nl > + compile ' com . squareup . okhttp : okhttp : 2 + ' < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / AssetsRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / AssetsRuntimeProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 329bb64 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / AssetsRuntimeProvider . java < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + import im . actor . runtime . se . JavaSeAssetsProvider ; < nl > + < nl > + public class AssetsRuntimeProvider extends JavaSeAssetsProvider { < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / CryptoRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / CryptoRuntimeProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 10de3f0 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / CryptoRuntimeProvider . java < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + import im . actor . runtime . se . JavaSeCryptoProvider ; < nl > + < nl > + public class CryptoRuntimeProvider extends JavaSeCryptoProvider { < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / DispatcherRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / DispatcherRuntimeProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 2deb307 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / DispatcherRuntimeProvider . java < nl > @ @ - 0 , 0 + 1 , 6 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + import im . actor . runtime . se . JavaSeDispatcherProvider ; < nl > + < nl > + public class DispatcherRuntimeProvider extends JavaSeDispatcherProvider { < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / EnginesRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / EnginesRuntimeProvider . java < nl > new file mode 100644 < nl > index 0000000 . . c09a1d7 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / EnginesRuntimeProvider . java < nl > @ @ - 0 , 0 + 1 , 10 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + import im . actor . runtime . generic . GenericEnginesProvider ; < nl > + import im . actor . runtime . generic . mvvm . DisplayList ; < nl > + < nl > + public class EnginesRuntimeProvider extends GenericEnginesProvider { < nl > + public EnginesRuntimeProvider ( ) { < nl > + super ( DisplayList . OperationMode . ANDROID ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / FileSystemRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / FileSystemRuntimeProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 9e8a156 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / FileSystemRuntimeProvider . java < nl > @ @ - 0 , 0 + 1 , 6 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + import im . actor . runtime . se . JavaSeFileSystemProvider ; < nl > + < nl > + public class FileSystemRuntimeProvider extends JavaSeFileSystemProvider { < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / HttpRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / HttpRuntimeProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 7ac44ae < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / HttpRuntimeProvider . java < nl > @ @ - 0 , 0 + 1 , 6 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + import im . actor . runtime . se . JavaSeHttpProvider ; < nl > + < nl > + public class HttpRuntimeProvider extends JavaSeHttpProvider { < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LifecycleRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LifecycleRuntimeProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 2879934 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LifecycleRuntimeProvider . java < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + import im . actor . runtime . se . JavaSeLifecycleProvider ; < nl > + < nl > + public class LifecycleRuntimeProvider extends JavaSeLifecycleProvider { < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LocaleRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LocaleRuntimeProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 4bc1112 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LocaleRuntimeProvider . java < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + import im . actor . runtime . se . JavaSeLocaleProvider ; < nl > + < nl > + public class LocaleRuntimeProvider extends JavaSeLocaleProvider { < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LogRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LogRuntimeProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 4d16ade < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LogRuntimeProvider . java < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + import im . actor . runtime . se . JavaSeLogProvider ; < nl > + < nl > + public class LogRuntimeProvider extends JavaSeLogProvider { < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / MainThreadRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / MainThreadRuntimeProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 11aac47 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / MainThreadRuntimeProvider . java < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + import im . actor . runtime . se . JavaSeMainThreadProvider ; < nl > + < nl > + public class MainThreadRuntimeProvider extends JavaSeMainThreadProvider { < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / NetworkRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / NetworkRuntimeProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 98877b7 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / NetworkRuntimeProvider . java < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + import im . actor . runtime . generic . GenericNetworkProvider ; < nl > + < nl > + public class NetworkRuntimeProvider extends GenericNetworkProvider { < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / RandomRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / RandomRuntimeProvider . java < nl > new file mode 100644 < nl > index 0000000 . . c7a7e27 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / RandomRuntimeProvider . java < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + import im . actor . runtime . se . JavaSeRandomProvider ; < nl > + < nl > + public class RandomRuntimeProvider extends JavaSeRandomProvider { < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / RegExpRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / RegExpRuntimeProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 4958a79 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / RegExpRuntimeProvider . java < nl > @ @ - 0 , 0 + 1 , 6 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + import im . actor . runtime . generic . GenericRegExpProvider ; < nl > + < nl > + public class RegExpRuntimeProvider extends GenericRegExpProvider { < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / StorageRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / StorageRuntimeProvider . java < nl > new file mode 100644 < nl > index 0000000 . . ee85849 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / StorageRuntimeProvider . java < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + import im . actor . runtime . se . JavaSeStorageProvider ; < nl > + < nl > + public class StorageRuntimeProvider extends JavaSeStorageProvider { < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / ThreadingRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / ThreadingRuntimeProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 96ea7fe < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / ThreadingRuntimeProvider . java < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + package im . actor . runtime ; < nl > + < nl > + import im . actor . runtime . se . JavaSeThreadingProvider ; < nl > + < nl > + public class ThreadingRuntimeProvider extends JavaSeThreadingProvider { < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeAssetsProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeAssetsProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 2b982b5 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeAssetsProvider . java < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + package im . actor . runtime . se ; < nl > + < nl > + import im . actor . runtime . generic . GenericAssetsProvider ; < nl > + < nl > + public class JavaSeAssetsProvider extends GenericAssetsProvider { < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeCryptoProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeCryptoProvider . java < nl > new file mode 100644 < nl > index 0000000 . . c0101eb < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeCryptoProvider . java < nl > @ @ - 0 , 0 + 1 , 11 @ @ < nl > + / * < nl > + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > < nl > + * / < nl > + < nl > + package im . actor . runtime . se ; < nl > + < nl > + import im . actor . runtime . crypto . bouncycastle . BouncyCastleRuntime ; < nl > + < nl > + public class JavaSeCryptoProvider extends BouncyCastleRuntime { < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeDispatcherProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeDispatcherProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 0c34eba < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeDispatcherProvider . java < nl > @ @ - 0 , 0 + 1 , 20 @ @ < nl > + / * < nl > + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > < nl > + * / < nl > + < nl > + package im . actor . runtime . se ; < nl > + < nl > + import im . actor . runtime . DispatcherRuntime ; < nl > + < nl > + public class JavaSeDispatcherProvider implements DispatcherRuntime { < nl > + < nl > + public JavaSeDispatcherProvider ( ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void dispatch ( Runnable runnable ) { < nl > + / / TODO : Implement correctly < nl > + runnable . run ( ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeFileSystemProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeFileSystemProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 128f980 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeFileSystemProvider . java < nl > @ @ - 0 , 0 + 1 , 34 @ @ < nl > + / * < nl > + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > < nl > + * / < nl > + < nl > + package im . actor . runtime . se ; < nl > + < nl > + import im . actor . runtime . FileSystemRuntime ; < nl > + import im . actor . runtime . files . FileSystemReference ; < nl > + < nl > + public class JavaSeFileSystemProvider implements FileSystemRuntime { < nl > + < nl > + @ Override < nl > + public synchronized FileSystemReference createTempFile ( ) { < nl > + / / TODO : Implement < nl > + return null ; < nl > + } < nl > + < nl > + @ Override < nl > + public FileSystemReference commitTempFile ( FileSystemReference sourceFile , long fileId , String fileName ) { < nl > + / / TODO : Implement < nl > + return null ; < nl > + } < nl > + < nl > + @ Override < nl > + public boolean isFsPersistent ( ) { < nl > + return true ; < nl > + } < nl > + < nl > + @ Override < nl > + public synchronized FileSystemReference fileFromDescriptor ( String descriptor ) { < nl > + / / TODO : Implement < nl > + throw new RuntimeException ( " Not implemented " ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeHttpProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeHttpProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 1041ea9 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeHttpProvider . java < nl > @ @ - 0 , 0 + 1 , 82 @ @ < nl > + / * < nl > + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > < nl > + * / < nl > + < nl > + package im . actor . runtime . se ; < nl > + < nl > + import com . squareup . okhttp . Callback ; < nl > + import com . squareup . okhttp . MediaType ; < nl > + import com . squareup . okhttp . OkHttpClient ; < nl > + import com . squareup . okhttp . Request ; < nl > + import com . squareup . okhttp . RequestBody ; < nl > + import com . squareup . okhttp . Response ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . runtime . HttpRuntime ; < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . http . FileDownloadCallback ; < nl > + import im . actor . runtime . http . FileUploadCallback ; < nl > + < nl > + public class JavaSeHttpProvider implements HttpRuntime { < nl > + < nl > + private static final String TAG = " AndroidHTTP " ; < nl > + < nl > + private final OkHttpClient client = new OkHttpClient ( ) ; < nl > + < nl > + private final MediaType MEDIA _ TYPE = MediaType . parse ( " application / octet - stream " ) ; < nl > + < nl > + @ Override < nl > + public void getMethod ( String url , int startOffset , int size , int totalSize , final FileDownloadCallback callback ) { < nl > + final Request request = new Request . Builder ( ) < nl > + . url ( url ) < nl > + . addHeader ( " Range " , " bytes = " + startOffset + " - " + ( startOffset + size ) ) < nl > + . build ( ) ; < nl > + Log . d ( TAG , " Downloading part : " + request . toString ( ) ) ; < nl > + client . newCall ( request ) . enqueue ( new Callback ( ) { < nl > + @ Override < nl > + public void onFailure ( Request request , IOException e ) { < nl > + Log . d ( TAG , " Downloading part error : " + request . toString ( ) ) ; < nl > + e . printStackTrace ( ) ; < nl > + callback . onDownloadFailure ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onResponse ( Response response ) throws IOException { < nl > + Log . d ( TAG , " Downloading part response : " + request . toString ( ) + " - > " + response . toString ( ) ) ; < nl > + if ( response . code ( ) = = 206 ) { < nl > + callback . onDownloaded ( response . body ( ) . bytes ( ) ) ; < nl > + } else { < nl > + callback . onDownloadFailure ( ) ; < nl > + } < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void putMethod ( String url , byte [ ] contents , final FileUploadCallback callback ) { < nl > + final Request request = new Request . Builder ( ) < nl > + . url ( url ) < nl > + . method ( " PUT " , RequestBody . create ( MEDIA _ TYPE , contents ) ) < nl > + . build ( ) ; < nl > + Log . d ( TAG , " Uploading part : " + request . toString ( ) ) ; < nl > + client . newCall ( request ) . enqueue ( new Callback ( ) { < nl > + @ Override < nl > + public void onFailure ( Request request , IOException e ) { < nl > + Log . d ( TAG , " Uploading part error : " + request . toString ( ) ) ; < nl > + e . printStackTrace ( ) ; < nl > + callback . onUploadFailure ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onResponse ( Response response ) throws IOException { < nl > + Log . d ( TAG , " Upload part response : " + request . toString ( ) + " - > " + response . toString ( ) ) ; < nl > + if ( response . code ( ) = = 200 ) { < nl > + callback . onUploaded ( ) ; < nl > + } else { < nl > + callback . onUploadFailure ( ) ; < nl > + } < nl > + } < nl > + } ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLifecycleProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLifecycleProvider . java < nl > new file mode 100644 < nl > index 0000000 . . ce22ae5 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLifecycleProvider . java < nl > @ @ - 0 , 0 + 1 , 14 @ @ < nl > + / * < nl > + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > < nl > + * / < nl > + package im . actor . runtime . se ; < nl > + < nl > + import im . actor . runtime . LifecycleRuntime ; < nl > + < nl > + public class JavaSeLifecycleProvider implements LifecycleRuntime { < nl > + < nl > + @ Override < nl > + public void killApp ( ) { < nl > + / / TODO : Implement < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLocaleProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLocaleProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 4363e28 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLocaleProvider . java < nl > @ @ - 0 , 0 + 1 , 28 @ @ < nl > + package im . actor . runtime . se ; < nl > + < nl > + import java . text . DateFormat ; < nl > + import java . util . Date ; < nl > + import java . util . Locale ; < nl > + < nl > + import im . actor . runtime . LocaleRuntime ; < nl > + < nl > + public class JavaSeLocaleProvider implements LocaleRuntime { < nl > + < nl > + @ Override < nl > + public String getCurrentLocale ( ) { < nl > + / / TODO : Implement < nl > + return null ; < nl > + } < nl > + < nl > + @ Override < nl > + public String formatDate ( long date ) { < nl > + / / TODO : Implement < nl > + return new Date ( date ) . toString ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public String formatTime ( long date ) { < nl > + / / TODO : Implement < nl > + return new Date ( date ) . toString ( ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLogProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLogProvider . java < nl > new file mode 100644 < nl > index 0000000 . . f49601d < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLogProvider . java < nl > @ @ - 0 , 0 + 1 , 29 @ @ < nl > + / * < nl > + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > < nl > + * / < nl > + < nl > + package im . actor . runtime . se ; < nl > + < nl > + import im . actor . runtime . LogRuntime ; < nl > + < nl > + public class JavaSeLogProvider implements LogRuntime { < nl > + @ Override < nl > + public void w ( String tag , String message ) { < nl > + / / TODO : Implement < nl > + } < nl > + < nl > + @ Override < nl > + public void e ( String tag , Throwable throwable ) { < nl > + / / TODO : Implement < nl > + } < nl > + < nl > + @ Override < nl > + public void d ( String tag , String message ) { < nl > + / / TODO : Implement < nl > + } < nl > + < nl > + @ Override < nl > + public void v ( String tag , String message ) { < nl > + / / TODO : Implement < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeMainThreadProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeMainThreadProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 16fdc85 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeMainThreadProvider . java < nl > @ @ - 0 , 0 + 1 , 27 @ @ < nl > + / * < nl > + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > < nl > + * / < nl > + < nl > + package im . actor . runtime . se ; < nl > + < nl > + import im . actor . runtime . MainThreadRuntime ; < nl > + < nl > + public class JavaSeMainThreadProvider implements MainThreadRuntime { < nl > + < nl > + @ Override < nl > + public void postToMainThread ( Runnable runnable ) { < nl > + / / TODO : Implement correctly < nl > + runnable . run ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public boolean isMainThread ( ) { < nl > + / / TODO : Implement correctly < nl > + return true ; < nl > + } < nl > + < nl > + @ Override < nl > + public boolean isSingleThread ( ) { < nl > + return false ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeRandomProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeRandomProvider . java < nl > new file mode 100644 < nl > index 0000000 . . f1ea9d6 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeRandomProvider . java < nl > @ @ - 0 , 0 + 1 , 8 @ @ < nl > + package im . actor . runtime . se ; < nl > + < nl > + import im . actor . runtime . generic . GenericRandomProvider ; < nl > + < nl > + public class JavaSeRandomProvider extends GenericRandomProvider { < nl > + < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeStorageProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeStorageProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 9171ba7 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeStorageProvider . java < nl > @ @ - 0 , 0 + 1 , 44 @ @ < nl > + / * < nl > + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > < nl > + * / < nl > + < nl > + package im . actor . runtime . se ; < nl > + < nl > + import im . actor . runtime . StorageRuntime ; < nl > + import im . actor . runtime . storage . IndexStorage ; < nl > + import im . actor . runtime . storage . KeyValueStorage ; < nl > + import im . actor . runtime . storage . ListStorage ; < nl > + import im . actor . runtime . storage . PreferencesStorage ; < nl > + import sun . reflect . generics . reflectiveObjects . NotImplementedException ; < nl > + < nl > + public class JavaSeStorageProvider implements StorageRuntime { < nl > + < nl > + public JavaSeStorageProvider ( ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public PreferencesStorage createPreferencesStorage ( ) { < nl > + throw new NotImplementedException ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public IndexStorage createIndex ( String name ) { < nl > + throw new NotImplementedException ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public KeyValueStorage createKeyValue ( String name ) { < nl > + throw new NotImplementedException ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public ListStorage createList ( String name ) { < nl > + throw new NotImplementedException ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void resetStorage ( ) { < nl > + throw new NotImplementedException ( ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeThreadingProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeThreadingProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 0e2a6d4 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeThreadingProvider . java < nl > @ @ - 0 , 0 + 1 , 11 @ @ < nl > + / * < nl > + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > < nl > + * / < nl > + < nl > + package im . actor . runtime . se ; < nl > + < nl > + import im . actor . runtime . generic . GenericThreadingProvider ; < nl > + < nl > + public class JavaSeThreadingProvider extends GenericThreadingProvider { < nl > + < nl > + } < nl > diff - - git a / settings . gradle b / settings . gradle < nl > index 64aa445 . . fa8a4c5 100644 < nl > - - - a / settings . gradle < nl > + + + b / settings . gradle < nl > @ @ - 7 , 12 + 7 , 14 @ @ include " : actor - sdk : sdk - core : core : core - shared " < nl > include " : actor - sdk : sdk - core : core : core - android " < nl > include " : actor - sdk : sdk - core : core : core - cocoa " < nl > include " : actor - sdk : sdk - core : core : core - js " < nl > + include " : actor - sdk : sdk - core : core : core - se " < nl > include " : actor - sdk : sdk - core : runtime : " < nl > include " : actor - sdk : sdk - core : runtime : runtime - shared " < nl > include " : actor - sdk : sdk - core : runtime : runtime - android " < nl > include " : actor - sdk : sdk - core : runtime : runtime - cocoa " < nl > include " : actor - sdk : sdk - core : runtime : runtime - js " < nl > include " : actor - sdk : sdk - core : runtime : runtime - generic " < nl > + include " : actor - sdk : sdk - core : runtime : runtime - se " < nl > include " : actor - sdk : sdk - api : api - codegen " < nl > < nl > / /

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index eb334c5 . . ca11d52 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 609 , 6 + 609 , 7 @ @ 
 	 	 06D5C0591C8E9B3B002D5045 / * Promises . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = Promises . swift ; sourceTree = " < group > " ; } ; 
 	 	 06D5C05B1C8EA842002D5045 / * AAAuthOTPViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAuthOTPViewController . swift ; sourceTree = " < group > " ; } ; 
 	 	 06E1648E1C96D99F005AFB94 / * CocoaCrypto . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = CocoaCrypto . swift ; sourceTree = " < group > " ; } ; 
 + 	 	 06E164931C96FF3D005AFB94 / * module . map * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = " sourcecode . module - map " ; path = module . map ; sourceTree = " < group > " ; } ; 
 	 	 06E322C81C69344A00D66F53 / * iOSCallsProvider . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = iOSCallsProvider . swift ; sourceTree = " < group > " ; } ; 
 	 	 06E3230D1C6942C400D66F53 / * WebRTC . h * / = { isa = PBXFileReference ; lastKnownFileType = sourcecode . c . h ; path = WebRTC . h ; sourceTree = " < group > " ; } ; 
 	 	 06E323101C694C1D00D66F53 / * WebRTCExt . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = WebRTCExt . swift ; sourceTree = " < group > " ; } ; 
 @ @ - 1413 , 9 + 1414 , 19 @ @ 
 	 	 	 name = Welcome ; 
 	 	 	 sourceTree = " < group > " ; 
 	 	 } ; 
 + 	 	 06E164921C96FF15005AFB94 / * CommonCrypto * / = { 
 + 	 	 	 isa = PBXGroup ; 
 + 	 	 	 children = ( 
 + 	 	 	 	 06E164931C96FF3D005AFB94 / * module . map * / , 
 + 	 	 	 ) ; 
 + 	 	 	 name = CommonCrypto ; 
 + 	 	 	 path = Libs / CommonCrypto ; 
 + 	 	 	 sourceTree = " < group > " ; 
 + 	 	 } ; 
 	 	 06E322CB1C69392F00D66F53 / * Libs * / = { 
 	 	 	 isa = PBXGroup ; 
 	 	 	 children = ( 
 + 	 	 	 	 06E164921C96FF15005AFB94 / * CommonCrypto * / , 
 	 	 	 	 061850A31C95CBF000C522D5 / * YYKit * / , 
 	 	 	 	 15D35F0A1C20182900E3717A / * AudioRecorder * / , 
 	 	 	 	 06E3230D1C6942C400D66F53 / * WebRTC . h * / , 
 @ @ - 2392 , 6 + 2403 , 7 @ @ 
 	 	 	 	 PROVISIONING _ PROFILE = " " ; 
 	 	 	 	 SKIP _ INSTALL = YES ; 
 	 	 	 	 STRIP _ INSTALLED _ PRODUCT = YES ; 
 + 	 	 	 	 SWIFT _ INCLUDE _ PATHS = " $ ( PROJECT _ DIR ) / ActorSDK / Sources / Libs / CommonCrypto $ ( PROJECT _ DIR ) / IDZSwiftCommonCrypto / Frameworks / $ ( PLATFORM _ NAME ) " ; 
 	 	 	 	 SWIFT _ OBJC _ BRIDGING _ HEADER = " " ; 
 	 	 	 	 SWIFT _ OPTIMIZATION _ LEVEL = " - Onone " ; 
 	 	 	 	 VALID _ ARCHS = " arm64 armv7 " ; 
 @ @ - 2445 , 6 + 2457 , 7 @ @ 
 	 	 	 	 PROVISIONING _ PROFILE = " " ; 
 	 	 	 	 SKIP _ INSTALL = YES ; 
 	 	 	 	 STRIP _ INSTALLED _ PRODUCT = YES ; 
 + 	 	 	 	 SWIFT _ INCLUDE _ PATHS = " $ ( PROJECT _ DIR ) / ActorSDK / Sources / Libs / CommonCrypto $ ( PROJECT _ DIR ) / IDZSwiftCommonCrypto / Frameworks / $ ( PLATFORM _ NAME ) " ; 
 	 	 	 	 SWIFT _ OBJC _ BRIDGING _ HEADER = " " ; 
 	 	 	 	 SWIFT _ OPTIMIZATION _ LEVEL = " - Owholemodule " ; 
 	 	 	 	 VALID _ ARCHS = " arm64 armv7 " ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaCrypto . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaCrypto . swift 
 index 7e294d0 . . ab856a7 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaCrypto . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaCrypto . swift 
 @ @ - 3 , 35 + 3 , 93 @ @ 
 / / 
 
 import Foundation 
 - import IDZSwiftCommonCrypto 
 + import CommonCrypto 
 
 class CocoaCrypto : NSObject , ARCocoaCryptoProxyProvider { 
 
 func createSHA256 ( ) - > ARDigest ! { 
 return SHA256Digest ( ) 
 } 
 + 
 + func createAES128WithKey ( key : IOSByteArray ! ) - > ARBlockCipher ! { 
 + / / return AES128 ( key : key ) 
 + return nil 
 + } 
 } 
 
 class SHA256Digest : NSObject , ARDigest { 
 
 - var digest = Digest ( algorithm : . SHA256 ) 
 + let context = UnsafeMutablePointer < CC _ SHA256 _ CTX > . alloc ( 1 ) 
 + 
 + override init ( ) { 
 + super . init ( ) 
 + reset ( ) 
 + } 
 + 
 + deinit { 
 + context . dealloc ( 1 ) 
 + } 
 
 func reset ( ) { 
 - digest = Digest ( algorithm : . SHA256 ) 
 + CC _ SHA256 _ Init ( context ) 
 } 
 
 func update ( src : IOSByteArray ! , withOffset offset : jint , withLength length : jint ) { 
 - digest . update ( src . toNSData ( ) . subdataWithRange ( NSRange ( location : Int ( offset ) , length : Int ( length ) ) ) ) 
 + 
 + let pointer = src 
 + . buffer ( ) 
 + . advancedBy ( Int ( offset ) ) 
 + 
 + CC _ SHA256 _ Update ( context , pointer , CC _ LONG ( length ) ) 
 } 
 
 func doFinal ( dest : IOSByteArray ! , withOffset destOffset : jint ) { 
 - let res = digest . final ( ) 
 - for i : UInt in 0 . . < 32 { 
 - dest . replaceByteAtIndex ( UInt ( destOffset ) + i , withByte : jbyte ( bitPattern : res [ Int ( i ) ] ) ) 
 - } 
 + 
 + let pointer = UnsafeMutablePointer < UInt8 > ( dest . buffer ( ) ) 
 + . advancedBy ( Int ( destOffset ) ) 
 + 
 + CC _ SHA256 _ Final ( pointer , context ) 
 } 
 
 func getDigestSize ( ) - > jint { 
 - return 32 
 + return jint ( CC _ SHA256 _ DIGEST _ LENGTH ) 
 } 
 - } 
 \ No newline at end of file 
 + } 
 + 
 + / / class AES128 : NSObject , ARBlockCipher { 
 + / / 
 + / / var key = [ UInt8 ] ( ) 
 + / / let encryptor : Cryptor 
 + / / let decryptor : Cryptor 
 + / / 
 + / / init ( key : IOSByteArray ) { 
 + / / for i in 0 . . < 16 { 
 + / / let bt = key . byteAtIndex ( UInt ( i ) ) 
 + / / self . key . append ( UInt8 ( bitPattern : Int8 ( bt ) ) ) 
 + / / } 
 + / / encryptor = Cryptor ( operation : . Encrypt , algorithm : . AES , options : . ECBMode , key : self . key , iv : [ ] ) 
 + / / decryptor = Cryptor ( operation : . Decrypt , algorithm : . AES , options : . ECBMode , key : self . key , iv : [ ] ) 
 + / / } 
 + / / 
 + / / func encryptBlock ( data : IOSByteArray ! , withOffset offset : jint , toDest dest : IOSByteArray ! , withOffset destOffset : jint ) { 
 + / / let src = data . toNSData ( ) . subdataWithRange ( NSRange ( location : Int ( offset ) , length : Int ( 16 ) ) ) 
 + / / var res : [ UInt8 ] = [ UInt8 ] ( count : 16 , repeatedValue : 0 ) 
 + / / encryptor . update ( src , byteArrayOut : & res ) 
 + / / for i : UInt in 0 . . < 16 { 
 + / / dest . replaceByteAtIndex ( UInt ( destOffset ) + i , withByte : jbyte ( bitPattern : res [ Int ( i ) ] ) ) 
 + / / } 
 + / / } 
 + / / 
 + / / func decryptBlock ( data : IOSByteArray ! , withOffset offset : jint , toDest dest : IOSByteArray ! , withOffset destOffset : jint ) { 
 + / / let src = data . toNSData ( ) . subdataWithRange ( NSRange ( location : Int ( offset ) , length : Int ( 16 ) ) ) 
 + / / decryptor . update ( src ) 
 + / / let res = decryptor . final ( ) ! 
 + / / for i : UInt in 0 . . < 16 { 
 + / / dest . replaceByteAtIndex ( UInt ( destOffset ) + i , withByte : jbyte ( bitPattern : res [ Int ( i ) ] ) ) 
 + / / } 
 + / / } 
 + / / 
 + / / func getBlockSize ( ) - > jint { 
 + / / return 16 
 + / / } 
 + / / } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Libs / CommonCrypto / module . map b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Libs / CommonCrypto / module . map 
 new file mode 100644 
 index 0000000 . . 6b6c840 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Libs / CommonCrypto / module . map 
 @ @ - 0 , 0 + 1 , 4 @ @ 
 + module CommonCrypto [ system ] { 
 + header " / Applications / Xcode . app / Contents / Developer / Platforms / iPhoneOS . platform / Developer / SDKs / iPhoneOS . sdk / usr / include / CommonCrypto / CommonCrypto . h " 
 + export * 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / Podfile b / actor - sdk / sdk - core - ios / Podfile 
 index b1e2d22 . . ccabc1c 100644 
 - - - a / actor - sdk / sdk - core - ios / Podfile 
 + + + b / actor - sdk / sdk - core - ios / Podfile 
 @ @ - 16 , 7 + 16 , 6 @ @ target ' ActorApp ' do 
 pod ' RegexKitLite ' 
 pod ' CocoaAsyncSocket ' 
 pod ' zipzap ' 
 - pod ' IDZSwiftCommonCrypto ' 
 
 # Main UI 
 pod ' TTTAttributedLabel ' 
 @ @ - 56 , 7 + 55 , 6 @ @ target ' ActorSDK ' do 
 pod ' RegexKitLite ' 
 pod ' CocoaAsyncSocket ' 
 pod ' zipzap ' 
 - pod ' IDZSwiftCommonCrypto ' 
 
 # Main UI 
 pod ' TTTAttributedLabel ' 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / mtp / actors / ManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / mtp / actors / ManagerActor . java 
 index 1d9dc61 . . 7651119 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / mtp / actors / ManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / mtp / actors / ManagerActor . java 
 @ @ - 95 , 7 + 95 , 7 @ @ public class ManagerActor extends Actor { 
 if ( this . authKey ! = null ) { 
 this . authProtoKey = new ActorProtoKey ( this . authKey ) ; 
 this . serverUSDecryptor = new CBCHmacBox ( 
 - new AESFastEngine ( this . authProtoKey . getServerKey ( ) ) , 
 + Crypto . createAES128 ( this . authProtoKey . getServerKey ( ) ) , 
 Crypto . createSHA256 ( ) , 
 this . authProtoKey . getServerMacKey ( ) ) ; 
 this . serverRUDecryptor = new CBCHmacBox ( 
 @ @ - 103 , 7 + 103 , 7 @ @ public class ManagerActor extends Actor { 
 new Streebog256 ( ) , 
 this . authProtoKey . getServerMacRussianKey ( ) ) ; 
 this . clientUSEncryptor = new CBCHmacBox ( 
 - new AESFastEngine ( this . authProtoKey . getClientKey ( ) ) , 
 + Crypto . createAES128 ( this . authProtoKey . getClientKey ( ) ) , 
 Crypto . createSHA256 ( ) , 
 this . authProtoKey . getClientMacKey ( ) ) ; 
 this . clientRUEncryptor = new CBCHmacBox ( 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaCryptoProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaCryptoProvider . java 
 index 125b00c . . 6749a60 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaCryptoProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaCryptoProvider . java 
 @ @ - 5 , 7 + 5 , 9 @ @ 
 package im . actor . runtime . cocoa ; 
 
 import im . actor . runtime . cocoa . crypto . CocoaCryptoProxyProvider ; 
 + import im . actor . runtime . crypto . BlockCipher ; 
 import im . actor . runtime . crypto . Digest ; 
 + import im . actor . runtime . crypto . primitives . ValidatedBlockCipher ; 
 import im . actor . runtime . generic . GenericCryptoProvider ; 
 
 public class CocoaCryptoProvider extends GenericCryptoProvider { 
 @ @ - 27 , 4 + 29 , 13 @ @ public class CocoaCryptoProvider extends GenericCryptoProvider { 
 } 
 return super . SHA256 ( ) ; 
 } 
 + 
 + @ Override 
 + public BlockCipher AES128 ( byte [ ] key ) { 
 + / / if ( proxyProvider ! = null ) { 
 + / / return new ValidatedBlockCipher ( super . AES128 ( key ) , proxyProvider . createAES128 ( key ) ) ; 
 + / / / / return proxyProvider . createAES128 ( key ) ; 
 + / / } 
 + return super . AES128 ( key ) ; 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / crypto / CocoaCryptoProxyProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / crypto / CocoaCryptoProxyProvider . java 
 index 1bbfb12 . . 144ddab 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / crypto / CocoaCryptoProxyProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / crypto / CocoaCryptoProxyProvider . java 
 @ @ - 3 , 9 + 3 , 13 @ @ package im . actor . runtime . cocoa . crypto ; 
 import com . google . j2objc . annotations . ObjectiveCName ; 
 
 import im . actor . runtime . crypto . Digest ; 
 + import im . actor . runtime . crypto . BlockCipher ; 
 
 public interface CocoaCryptoProxyProvider { 
 
 @ ObjectiveCName ( " createSHA256 " ) 
 Digest createSHA256 ( ) ; 
 + 
 + @ ObjectiveCName ( " createAES128WithKey : " ) 
 + BlockCipher createAES128 ( byte [ ] key ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java 
 index 30f595c . . 1c9a6e4 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java 
 @ @ - 4 , 6 + 4 , 7 @ @ 
 
 package im . actor . runtime ; 
 
 + import im . actor . runtime . crypto . BlockCipher ; 
 import im . actor . runtime . crypto . Digest ; 
 import im . actor . runtime . crypto . primitives . digest . KeyDigest ; 
 import im . actor . runtime . crypto . primitives . digest . MD5 ; 
 @ @ - 25 , 6 + 26 , 10 @ @ public class Crypto { 
 return runtime . SHA256 ( ) ; 
 } 
 
 + public static BlockCipher createAES128 ( byte [ ] key ) { 
 + return runtime . AES128 ( key ) ; 
 + } 
 + 
 public static byte [ ] MD5 ( byte [ ] data ) { 
 MD5 md5 = new MD5 ( ) ; 
 md5 . update ( data , 0 , data . length ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / CryptoRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / CryptoRuntime . java 
 index 9292770 . . d57e59b 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / CryptoRuntime . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / CryptoRuntime . java 
 @ @ - 5 , 6 + 5 , 7 @ @ 
 package im . actor . runtime ; 
 
 import im . actor . runtime . crypto . Digest ; 
 + import im . actor . runtime . crypto . BlockCipher ; 
 
 / * * 
 * Provider for Cryptography support 
 @ @ - 13 , 5 + 14 , 7 @ @ public interface CryptoRuntime { 
 
 Digest SHA256 ( ) ; 
 
 + BlockCipher AES128 ( byte [ ] key ) ; 
 + 
 void waitForCryptoLoaded ( ) ; 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / DefaultCryptoRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / DefaultCryptoRuntime . java 
 index 6d682dd . . 09c1451 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / DefaultCryptoRuntime . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / DefaultCryptoRuntime . java 
 @ @ - 1 , 6 + 1 , 8 @ @ 
 package im . actor . runtime ; 
 
 + import im . actor . runtime . crypto . BlockCipher ; 
 import im . actor . runtime . crypto . Digest ; 
 + import im . actor . runtime . crypto . primitives . aes . AESFastEngine ; 
 import im . actor . runtime . crypto . primitives . digest . SHA256 ; 
 
 public abstract class DefaultCryptoRuntime implements CryptoRuntime { 
 @ @ - 10 , 5 + 12 , 8 @ @ public abstract class DefaultCryptoRuntime implements CryptoRuntime { 
 return new SHA256 ( ) ; 
 } 
 
 - 
 + @ Override 
 + public BlockCipher AES128 ( byte [ ] key ) { 
 + return new AESFastEngine ( key ) ; 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / AesCipher . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / AesCipher . java 
 deleted file mode 100644 
 index f306f38 . . 0000000 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / AesCipher . java 
 + + + / dev / null 
 @ @ - 1 , 11 + 0 , 0 @ @ 
 - / * 
 - * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > 
 - * / 
 - 
 - package im . actor . runtime . crypto ; 
 - 
 - public interface AesCipher { 
 - byte [ ] encrypt ( byte [ ] source ) ; 
 - 
 - byte [ ] decrypt ( byte [ ] source ) ; 
 - } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / BlockCipher . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / BlockCipher . java 
 new file mode 100644 
 index 0000000 . . e0bdba8 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / BlockCipher . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + package im . actor . runtime . crypto ; 
 + 
 + import com . google . j2objc . annotations . ObjectiveCName ; 
 + 
 + / * * 
 + * Block - based cipher 
 + * 
 + * @ author Steve Kite ( steve @ actor . im ) 
 + * / 
 + public interface BlockCipher { 
 + 
 + / * * 
 + * Encrypting block 
 + * 
 + * @ param data plain - text data 
 + * @ param offset offset for data 
 + * @ param dest destination buffer 
 + * @ param destOffset destination offset 
 + * / 
 + @ ObjectiveCName ( " encryptBlock : withOffset : toDest : withOffset : " ) 
 + void encryptBlock ( byte [ ] data , int offset , byte [ ] dest , int destOffset ) ; 
 + 
 + / * * 
 + * Decrypting block 
 + * 
 + * @ param data cipher - text data 
 + * @ param offset offset for data 
 + * @ param dest destination buffer 
 + * @ param destOffset destination offset 
 + * / 
 + @ ObjectiveCName ( " decryptBlock : withOffset : toDest : withOffset : " ) 
 + void decryptBlock ( byte [ ] data , int offset , byte [ ] dest , int destOffset ) ; 
 + 
 + / * * 
 + * Getting cipher ' s block size 
 + * 
 + * @ return block size in bytes 
 + * / 
 + @ ObjectiveCName ( " getBlockSize " ) 
 + int getBlockSize ( ) ; 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / box / ActorBox . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / box / ActorBox . java 
 index 828e15c . . fea6146 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / box / ActorBox . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / box / ActorBox . java 
 @ @ - 28 , 7 + 28 , 7 @ @ public class ActorBox { 
 * / 
 public static byte [ ] openBox ( byte [ ] header , byte [ ] cipherText , ActorBoxKey key ) throws IntegrityException { 
 CBCHmacBox aesCipher = 
 - new CBCHmacBox ( new AESFastEngine ( key . getKeyAES ( ) ) , Crypto . createSHA256 ( ) , key . getMacAES ( ) ) ; 
 + new CBCHmacBox ( Crypto . createAES128 ( key . getKeyAES ( ) ) , Crypto . createSHA256 ( ) , key . getMacAES ( ) ) ; 
 CBCHmacBox kuzCipher = 
 new CBCHmacBox ( new KuznechikFastEngine ( key . getKeyKuz ( ) ) , new Streebog256 ( ) , key . getMacKuz ( ) ) ; 
 byte [ ] kuzPackage = aesCipher . decryptPackage ( header , 
 @ @ - 62 , 7 + 62 , 7 @ @ public class ActorBox { 
 * @ throws IntegrityException 
 * / 
 public static byte [ ] closeBox ( byte [ ] header , byte [ ] plainText , byte [ ] random32 , ActorBoxKey key ) throws IntegrityException { 
 - CBCHmacBox aesCipher = new CBCHmacBox ( new AESFastEngine ( key . getKeyAES ( ) ) , Crypto . createSHA256 ( ) , key . getMacAES ( ) ) ; 
 + CBCHmacBox aesCipher = new CBCHmacBox ( Crypto . createAES128 ( key . getKeyAES ( ) ) , Crypto . createSHA256 ( ) , key . getMacAES ( ) ) ; 
 CBCHmacBox kuzCipher = new CBCHmacBox ( new KuznechikFastEngine ( key . getKeyKuz ( ) ) , new Streebog256 ( ) , key . getMacKuz ( ) ) ; 
 
 / / Calculating padding 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / box / CBCHmacBox . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / box / CBCHmacBox . java 
 index 55d6b18 . . 9edbc0d 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / box / CBCHmacBox . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / box / CBCHmacBox . java 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 package im . actor . runtime . crypto . box ; 
 
 import im . actor . runtime . crypto . IntegrityException ; 
 - import im . actor . runtime . crypto . primitives . BlockCipher ; 
 + import im . actor . runtime . crypto . BlockCipher ; 
 import im . actor . runtime . crypto . Digest ; 
 import im . actor . runtime . crypto . primitives . Padding ; 
 import im . actor . runtime . crypto . primitives . hmac . HMAC ; 
 @ @ - 24 , 17 + 24 , 11 @ @ import im . actor . runtime . crypto . primitives . util . ByteStrings ; 
 public class CBCHmacBox { 
 
 private final CBCBlockCipher cbcBlockCipher ; 
 - private final BlockCipher baseCipher ; 
 - private final Digest baseDigest ; 
 private final HMAC hmac ; 
 - private final byte [ ] hmacKey ; 
 private final Padding padding ; 
 
 public CBCHmacBox ( BlockCipher baseCipher , Digest baseDigest , byte [ ] hmacKey ) { 
 this . cbcBlockCipher = new CBCBlockCipher ( baseCipher ) ; 
 - this . baseCipher = baseCipher ; 
 - this . baseDigest = baseDigest ; 
 - this . hmacKey = hmacKey ; 
 this . padding = new PKCS7Padding ( ) ; 
 this . hmac = new HMAC ( hmacKey , baseDigest ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / BlockCipher . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / BlockCipher . java 
 deleted file mode 100644 
 index 607be15 . . 0000000 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / BlockCipher . java 
 + + + / dev / null 
 @ @ - 1 , 36 + 0 , 0 @ @ 
 - package im . actor . runtime . crypto . primitives ; 
 - 
 - / * * 
 - * Block - based cipher 
 - * 
 - * @ author Steve Kite ( steve @ actor . im ) 
 - * / 
 - public interface BlockCipher { 
 - 
 - / * * 
 - * Encrypting block 
 - * 
 - * @ param data plain - text data 
 - * @ param offset offset for data 
 - * @ param dest destination buffer 
 - * @ param destOffset destination offset 
 - * / 
 - void encryptBlock ( byte [ ] data , int offset , byte [ ] dest , int destOffset ) ; 
 - 
 - / * * 
 - * Decrypting block 
 - * 
 - * @ param data cipher - text data 
 - * @ param offset offset for data 
 - * @ param dest destination buffer 
 - * @ param destOffset destination offset 
 - * / 
 - void decryptBlock ( byte [ ] data , int offset , byte [ ] dest , int destOffset ) ; 
 - 
 - / * * 
 - * Getting cipher ' s block size 
 - * 
 - * @ return block size in bytes 
 - * / 
 - int getBlockSize ( ) ; 
 - } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / ValidatedBlockCipher . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / ValidatedBlockCipher . java 
 new file mode 100644 
 index 0000000 . . c39cfcd 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / ValidatedBlockCipher . java 
 @ @ - 0 , 0 + 1 , 48 @ @ 
 + package im . actor . runtime . crypto . primitives ; 
 + 
 + import im . actor . core . util . JavaUtil ; 
 + import im . actor . runtime . Crypto ; 
 + import im . actor . runtime . crypto . BlockCipher ; 
 + 
 + public class ValidatedBlockCipher implements BlockCipher { 
 + 
 + private BlockCipher referenceImplementation ; 
 + private BlockCipher modifiedImplementation ; 
 + 
 + public ValidatedBlockCipher ( BlockCipher referenceImplementation , BlockCipher modifiedImplementation ) { 
 + this . referenceImplementation = referenceImplementation ; 
 + this . modifiedImplementation = modifiedImplementation ; 
 + } 
 + 
 + @ Override 
 + public void encryptBlock ( byte [ ] data , int offset , byte [ ] dest , int destOffset ) { 
 + byte [ ] dest1 = new byte [ getBlockSize ( ) ] ; 
 + byte [ ] dest2 = new byte [ getBlockSize ( ) ] ; 
 + 
 + referenceImplementation . encryptBlock ( data , offset , dest1 , 0 ) ; 
 + modifiedImplementation . encryptBlock ( data , offset , dest2 , 0 ) ; 
 + 
 + for ( int i = 0 ; i < dest1 . length ; i + + ) { 
 + if ( dest1 [ i ] ! = dest2 [ i ] ) { 
 + 
 + throw new RuntimeException ( " Mismatched output at " + i + " : " 
 + + Crypto . hex ( dest1 ) + " " + Crypto . hex ( dest2 ) ) ; 
 + } 
 + } 
 + 
 + referenceImplementation . encryptBlock ( data , offset , dest , destOffset ) ; 
 + } 
 + 
 + @ Override 
 + public void decryptBlock ( byte [ ] data , int offset , byte [ ] dest , int destOffset ) { 
 + referenceImplementation . decryptBlock ( data , offset , dest , destOffset ) ; 
 + } 
 + 
 + @ Override 
 + public int getBlockSize ( ) { 
 + if ( referenceImplementation . getBlockSize ( ) ! = modifiedImplementation . getBlockSize ( ) ) { 
 + throw new RuntimeException ( ) ; 
 + } 
 + return modifiedImplementation . getBlockSize ( ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / aes / AESFastEngine . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / aes / AESFastEngine . java 
 index 8b1f165 . . 968c7b7 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / aes / AESFastEngine . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / aes / AESFastEngine . java 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 package im . actor . runtime . crypto . primitives . aes ; 
 
 
 - import im . actor . runtime . crypto . primitives . BlockCipher ; 
 + import im . actor . runtime . crypto . BlockCipher ; 
 import im . actor . runtime . crypto . primitives . util . Pack ; 
 
 / * * 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikCipher . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikCipher . java 
 index 907776a . . 43e414f 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikCipher . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikCipher . java 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package im . actor . runtime . crypto . primitives . kuznechik ; 
 
 - import im . actor . runtime . crypto . primitives . BlockCipher ; 
 + import im . actor . runtime . crypto . BlockCipher ; 
 import im . actor . runtime . crypto . primitives . util . ByteStrings ; 
 
 / * * 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java 
 index 76594d8 . . 02556ff 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 package im . actor . runtime . crypto . primitives . kuznechik ; 
 
 import im . actor . runtime . Crypto ; 
 - import im . actor . runtime . crypto . primitives . BlockCipher ; 
 + import im . actor . runtime . crypto . BlockCipher ; 
 import im . actor . runtime . crypto . primitives . util . Pack ; 
 
 public class KuznechikFastEngine implements BlockCipher { 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / modes / CBCBlockCipher . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / modes / CBCBlockCipher . java 
 index 34ae57f . . e17bf84 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / modes / CBCBlockCipher . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / modes / CBCBlockCipher . java 
 @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . runtime . crypto . primitives . modes ; 
 import com . google . j2objc . annotations . AutoreleasePool ; 
 
 import im . actor . runtime . crypto . IntegrityException ; 
 - import im . actor . runtime . crypto . primitives . BlockCipher ; 
 + import im . actor . runtime . crypto . BlockCipher ; 
 
 / * * 
 * CBC Cipher implementation

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - se / build . gradle b / actor - sdk / sdk - core / core / core - se / build . gradle 
 new file mode 100644 
 index 0000000 . . c708986 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - se / build . gradle 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + buildscript { 
 + repositories { 
 + mavenCentral ( ) 
 + } 
 + } 
 + 
 + apply plugin : ' java ' 
 + 
 + compileJava { 
 + sourceCompatibility = 1 . 6 
 + targetCompatibility = 1 . 6 
 + } 
 + 
 + sourceSets { 
 + main { 
 + java { 
 + srcDirs = [ ' src / main / java ' , 
 + ' . . / core - shared / src / main / java ' , 
 + ' . . / core - shared / src / ext / java ' ] 
 + } 
 + resources { 
 + srcDirs = [ ' . . / core - shared / src / main / resources ' ] 
 + } 
 + } 
 + 
 + } 
 + 
 + dependencies { 
 + compile ' com . squareup . okhttp : okhttp : 2 + ' 
 + testCompile " junit : junit : 4 . 11 " 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - se / src / main / java / im / actor / core / JavaSeMessenger . java b / actor - sdk / sdk - core / core / core - se / src / main / java / im / actor / core / JavaSeMessenger . java 
 new file mode 100644 
 index 0000000 . . 3479d03 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - se / src / main / java / im / actor / core / JavaSeMessenger . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package im . actor . core ; 
 + 
 + public class JavaSeMessenger extends Messenger { 
 + 
 + / * * 
 + * Construct messenger 
 + * 
 + * @ param configuration configuration of messenger 
 + * / 
 + public JavaSeMessenger ( Configuration configuration ) { 
 + super ( configuration ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / build . gradle b / actor - sdk / sdk - core / runtime / runtime - se / build . gradle 
 new file mode 100644 
 index 0000000 . . c511e87 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / build . gradle 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + buildscript { 
 + repositories { 
 + mavenCentral ( ) 
 + } 
 + } 
 + 
 + apply plugin : ' java ' 
 + 
 + sourceSets { 
 + main { 
 + java { 
 + srcDirs = [ ' src / main / java ' , 
 + ' . . / runtime - shared / src / main / java ' , 
 + ' . . / runtime - generic / src / main / java ' ] 
 + } 
 + } 
 + } 
 + 
 + dependencies { 
 + compile ' com . squareup . okhttp : okhttp : 2 + ' 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / AssetsRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / AssetsRuntimeProvider . java 
 new file mode 100644 
 index 0000000 . . 329bb64 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / AssetsRuntimeProvider . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package im . actor . runtime ; 
 + 
 + import im . actor . runtime . se . JavaSeAssetsProvider ; 
 + 
 + public class AssetsRuntimeProvider extends JavaSeAssetsProvider { 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / CryptoRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / CryptoRuntimeProvider . java 
 new file mode 100644 
 index 0000000 . . 10de3f0 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / CryptoRuntimeProvider . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package im . actor . runtime ; 
 + 
 + import im . actor . runtime . se . JavaSeCryptoProvider ; 
 + 
 + public class CryptoRuntimeProvider extends JavaSeCryptoProvider { 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / DispatcherRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / DispatcherRuntimeProvider . java 
 new file mode 100644 
 index 0000000 . . 2deb307 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / DispatcherRuntimeProvider . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + package im . actor . runtime ; 
 + 
 + import im . actor . runtime . se . JavaSeDispatcherProvider ; 
 + 
 + public class DispatcherRuntimeProvider extends JavaSeDispatcherProvider { 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / EnginesRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / EnginesRuntimeProvider . java 
 new file mode 100644 
 index 0000000 . . c09a1d7 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / EnginesRuntimeProvider . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package im . actor . runtime ; 
 + 
 + import im . actor . runtime . generic . GenericEnginesProvider ; 
 + import im . actor . runtime . generic . mvvm . DisplayList ; 
 + 
 + public class EnginesRuntimeProvider extends GenericEnginesProvider { 
 + public EnginesRuntimeProvider ( ) { 
 + super ( DisplayList . OperationMode . ANDROID ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / FileSystemRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / FileSystemRuntimeProvider . java 
 new file mode 100644 
 index 0000000 . . 9e8a156 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / FileSystemRuntimeProvider . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + package im . actor . runtime ; 
 + 
 + import im . actor . runtime . se . JavaSeFileSystemProvider ; 
 + 
 + public class FileSystemRuntimeProvider extends JavaSeFileSystemProvider { 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / HttpRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / HttpRuntimeProvider . java 
 new file mode 100644 
 index 0000000 . . 7ac44ae 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / HttpRuntimeProvider . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + package im . actor . runtime ; 
 + 
 + import im . actor . runtime . se . JavaSeHttpProvider ; 
 + 
 + public class HttpRuntimeProvider extends JavaSeHttpProvider { 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LifecycleRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LifecycleRuntimeProvider . java 
 new file mode 100644 
 index 0000000 . . 2879934 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LifecycleRuntimeProvider . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package im . actor . runtime ; 
 + 
 + import im . actor . runtime . se . JavaSeLifecycleProvider ; 
 + 
 + public class LifecycleRuntimeProvider extends JavaSeLifecycleProvider { 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LocaleRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LocaleRuntimeProvider . java 
 new file mode 100644 
 index 0000000 . . 4bc1112 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LocaleRuntimeProvider . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package im . actor . runtime ; 
 + 
 + import im . actor . runtime . se . JavaSeLocaleProvider ; 
 + 
 + public class LocaleRuntimeProvider extends JavaSeLocaleProvider { 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LogRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LogRuntimeProvider . java 
 new file mode 100644 
 index 0000000 . . 4d16ade 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / LogRuntimeProvider . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package im . actor . runtime ; 
 + 
 + import im . actor . runtime . se . JavaSeLogProvider ; 
 + 
 + public class LogRuntimeProvider extends JavaSeLogProvider { 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / MainThreadRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / MainThreadRuntimeProvider . java 
 new file mode 100644 
 index 0000000 . . 11aac47 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / MainThreadRuntimeProvider . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package im . actor . runtime ; 
 + 
 + import im . actor . runtime . se . JavaSeMainThreadProvider ; 
 + 
 + public class MainThreadRuntimeProvider extends JavaSeMainThreadProvider { 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / NetworkRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / NetworkRuntimeProvider . java 
 new file mode 100644 
 index 0000000 . . 98877b7 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / NetworkRuntimeProvider . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package im . actor . runtime ; 
 + 
 + import im . actor . runtime . generic . GenericNetworkProvider ; 
 + 
 + public class NetworkRuntimeProvider extends GenericNetworkProvider { 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / RandomRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / RandomRuntimeProvider . java 
 new file mode 100644 
 index 0000000 . . c7a7e27 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / RandomRuntimeProvider . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package im . actor . runtime ; 
 + 
 + import im . actor . runtime . se . JavaSeRandomProvider ; 
 + 
 + public class RandomRuntimeProvider extends JavaSeRandomProvider { 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / RegExpRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / RegExpRuntimeProvider . java 
 new file mode 100644 
 index 0000000 . . 4958a79 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / RegExpRuntimeProvider . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + package im . actor . runtime ; 
 + 
 + import im . actor . runtime . generic . GenericRegExpProvider ; 
 + 
 + public class RegExpRuntimeProvider extends GenericRegExpProvider { 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / StorageRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / StorageRuntimeProvider . java 
 new file mode 100644 
 index 0000000 . . ee85849 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / StorageRuntimeProvider . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package im . actor . runtime ; 
 + 
 + import im . actor . runtime . se . JavaSeStorageProvider ; 
 + 
 + public class StorageRuntimeProvider extends JavaSeStorageProvider { 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / ThreadingRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / ThreadingRuntimeProvider . java 
 new file mode 100644 
 index 0000000 . . 96ea7fe 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / ThreadingRuntimeProvider . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package im . actor . runtime ; 
 + 
 + import im . actor . runtime . se . JavaSeThreadingProvider ; 
 + 
 + public class ThreadingRuntimeProvider extends JavaSeThreadingProvider { 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeAssetsProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeAssetsProvider . java 
 new file mode 100644 
 index 0000000 . . 2b982b5 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeAssetsProvider . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package im . actor . runtime . se ; 
 + 
 + import im . actor . runtime . generic . GenericAssetsProvider ; 
 + 
 + public class JavaSeAssetsProvider extends GenericAssetsProvider { 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeCryptoProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeCryptoProvider . java 
 new file mode 100644 
 index 0000000 . . c0101eb 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeCryptoProvider . java 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + / * 
 + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > 
 + * / 
 + 
 + package im . actor . runtime . se ; 
 + 
 + import im . actor . runtime . crypto . bouncycastle . BouncyCastleRuntime ; 
 + 
 + public class JavaSeCryptoProvider extends BouncyCastleRuntime { 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeDispatcherProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeDispatcherProvider . java 
 new file mode 100644 
 index 0000000 . . 0c34eba 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeDispatcherProvider . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + / * 
 + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > 
 + * / 
 + 
 + package im . actor . runtime . se ; 
 + 
 + import im . actor . runtime . DispatcherRuntime ; 
 + 
 + public class JavaSeDispatcherProvider implements DispatcherRuntime { 
 + 
 + public JavaSeDispatcherProvider ( ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void dispatch ( Runnable runnable ) { 
 + / / TODO : Implement correctly 
 + runnable . run ( ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeFileSystemProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeFileSystemProvider . java 
 new file mode 100644 
 index 0000000 . . 128f980 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeFileSystemProvider . java 
 @ @ - 0 , 0 + 1 , 34 @ @ 
 + / * 
 + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > 
 + * / 
 + 
 + package im . actor . runtime . se ; 
 + 
 + import im . actor . runtime . FileSystemRuntime ; 
 + import im . actor . runtime . files . FileSystemReference ; 
 + 
 + public class JavaSeFileSystemProvider implements FileSystemRuntime { 
 + 
 + @ Override 
 + public synchronized FileSystemReference createTempFile ( ) { 
 + / / TODO : Implement 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public FileSystemReference commitTempFile ( FileSystemReference sourceFile , long fileId , String fileName ) { 
 + / / TODO : Implement 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public boolean isFsPersistent ( ) { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public synchronized FileSystemReference fileFromDescriptor ( String descriptor ) { 
 + / / TODO : Implement 
 + throw new RuntimeException ( " Not implemented " ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeHttpProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeHttpProvider . java 
 new file mode 100644 
 index 0000000 . . 1041ea9 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeHttpProvider . java 
 @ @ - 0 , 0 + 1 , 82 @ @ 
 + / * 
 + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > 
 + * / 
 + 
 + package im . actor . runtime . se ; 
 + 
 + import com . squareup . okhttp . Callback ; 
 + import com . squareup . okhttp . MediaType ; 
 + import com . squareup . okhttp . OkHttpClient ; 
 + import com . squareup . okhttp . Request ; 
 + import com . squareup . okhttp . RequestBody ; 
 + import com . squareup . okhttp . Response ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . runtime . HttpRuntime ; 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . http . FileDownloadCallback ; 
 + import im . actor . runtime . http . FileUploadCallback ; 
 + 
 + public class JavaSeHttpProvider implements HttpRuntime { 
 + 
 + private static final String TAG = " AndroidHTTP " ; 
 + 
 + private final OkHttpClient client = new OkHttpClient ( ) ; 
 + 
 + private final MediaType MEDIA _ TYPE = MediaType . parse ( " application / octet - stream " ) ; 
 + 
 + @ Override 
 + public void getMethod ( String url , int startOffset , int size , int totalSize , final FileDownloadCallback callback ) { 
 + final Request request = new Request . Builder ( ) 
 + . url ( url ) 
 + . addHeader ( " Range " , " bytes = " + startOffset + " - " + ( startOffset + size ) ) 
 + . build ( ) ; 
 + Log . d ( TAG , " Downloading part : " + request . toString ( ) ) ; 
 + client . newCall ( request ) . enqueue ( new Callback ( ) { 
 + @ Override 
 + public void onFailure ( Request request , IOException e ) { 
 + Log . d ( TAG , " Downloading part error : " + request . toString ( ) ) ; 
 + e . printStackTrace ( ) ; 
 + callback . onDownloadFailure ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onResponse ( Response response ) throws IOException { 
 + Log . d ( TAG , " Downloading part response : " + request . toString ( ) + " - > " + response . toString ( ) ) ; 
 + if ( response . code ( ) = = 206 ) { 
 + callback . onDownloaded ( response . body ( ) . bytes ( ) ) ; 
 + } else { 
 + callback . onDownloadFailure ( ) ; 
 + } 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void putMethod ( String url , byte [ ] contents , final FileUploadCallback callback ) { 
 + final Request request = new Request . Builder ( ) 
 + . url ( url ) 
 + . method ( " PUT " , RequestBody . create ( MEDIA _ TYPE , contents ) ) 
 + . build ( ) ; 
 + Log . d ( TAG , " Uploading part : " + request . toString ( ) ) ; 
 + client . newCall ( request ) . enqueue ( new Callback ( ) { 
 + @ Override 
 + public void onFailure ( Request request , IOException e ) { 
 + Log . d ( TAG , " Uploading part error : " + request . toString ( ) ) ; 
 + e . printStackTrace ( ) ; 
 + callback . onUploadFailure ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onResponse ( Response response ) throws IOException { 
 + Log . d ( TAG , " Upload part response : " + request . toString ( ) + " - > " + response . toString ( ) ) ; 
 + if ( response . code ( ) = = 200 ) { 
 + callback . onUploaded ( ) ; 
 + } else { 
 + callback . onUploadFailure ( ) ; 
 + } 
 + } 
 + } ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLifecycleProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLifecycleProvider . java 
 new file mode 100644 
 index 0000000 . . ce22ae5 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLifecycleProvider . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + / * 
 + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > 
 + * / 
 + package im . actor . runtime . se ; 
 + 
 + import im . actor . runtime . LifecycleRuntime ; 
 + 
 + public class JavaSeLifecycleProvider implements LifecycleRuntime { 
 + 
 + @ Override 
 + public void killApp ( ) { 
 + / / TODO : Implement 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLocaleProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLocaleProvider . java 
 new file mode 100644 
 index 0000000 . . 4363e28 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLocaleProvider . java 
 @ @ - 0 , 0 + 1 , 28 @ @ 
 + package im . actor . runtime . se ; 
 + 
 + import java . text . DateFormat ; 
 + import java . util . Date ; 
 + import java . util . Locale ; 
 + 
 + import im . actor . runtime . LocaleRuntime ; 
 + 
 + public class JavaSeLocaleProvider implements LocaleRuntime { 
 + 
 + @ Override 
 + public String getCurrentLocale ( ) { 
 + / / TODO : Implement 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public String formatDate ( long date ) { 
 + / / TODO : Implement 
 + return new Date ( date ) . toString ( ) ; 
 + } 
 + 
 + @ Override 
 + public String formatTime ( long date ) { 
 + / / TODO : Implement 
 + return new Date ( date ) . toString ( ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLogProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLogProvider . java 
 new file mode 100644 
 index 0000000 . . f49601d 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeLogProvider . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + / * 
 + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > 
 + * / 
 + 
 + package im . actor . runtime . se ; 
 + 
 + import im . actor . runtime . LogRuntime ; 
 + 
 + public class JavaSeLogProvider implements LogRuntime { 
 + @ Override 
 + public void w ( String tag , String message ) { 
 + / / TODO : Implement 
 + } 
 + 
 + @ Override 
 + public void e ( String tag , Throwable throwable ) { 
 + / / TODO : Implement 
 + } 
 + 
 + @ Override 
 + public void d ( String tag , String message ) { 
 + / / TODO : Implement 
 + } 
 + 
 + @ Override 
 + public void v ( String tag , String message ) { 
 + / / TODO : Implement 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeMainThreadProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeMainThreadProvider . java 
 new file mode 100644 
 index 0000000 . . 16fdc85 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeMainThreadProvider . java 
 @ @ - 0 , 0 + 1 , 27 @ @ 
 + / * 
 + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > 
 + * / 
 + 
 + package im . actor . runtime . se ; 
 + 
 + import im . actor . runtime . MainThreadRuntime ; 
 + 
 + public class JavaSeMainThreadProvider implements MainThreadRuntime { 
 + 
 + @ Override 
 + public void postToMainThread ( Runnable runnable ) { 
 + / / TODO : Implement correctly 
 + runnable . run ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isMainThread ( ) { 
 + / / TODO : Implement correctly 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isSingleThread ( ) { 
 + return false ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeRandomProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeRandomProvider . java 
 new file mode 100644 
 index 0000000 . . f1ea9d6 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeRandomProvider . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package im . actor . runtime . se ; 
 + 
 + import im . actor . runtime . generic . GenericRandomProvider ; 
 + 
 + public class JavaSeRandomProvider extends GenericRandomProvider { 
 + 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeStorageProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeStorageProvider . java 
 new file mode 100644 
 index 0000000 . . 9171ba7 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeStorageProvider . java 
 @ @ - 0 , 0 + 1 , 44 @ @ 
 + / * 
 + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > 
 + * / 
 + 
 + package im . actor . runtime . se ; 
 + 
 + import im . actor . runtime . StorageRuntime ; 
 + import im . actor . runtime . storage . IndexStorage ; 
 + import im . actor . runtime . storage . KeyValueStorage ; 
 + import im . actor . runtime . storage . ListStorage ; 
 + import im . actor . runtime . storage . PreferencesStorage ; 
 + import sun . reflect . generics . reflectiveObjects . NotImplementedException ; 
 + 
 + public class JavaSeStorageProvider implements StorageRuntime { 
 + 
 + public JavaSeStorageProvider ( ) { 
 + 
 + } 
 + 
 + @ Override 
 + public PreferencesStorage createPreferencesStorage ( ) { 
 + throw new NotImplementedException ( ) ; 
 + } 
 + 
 + @ Override 
 + public IndexStorage createIndex ( String name ) { 
 + throw new NotImplementedException ( ) ; 
 + } 
 + 
 + @ Override 
 + public KeyValueStorage createKeyValue ( String name ) { 
 + throw new NotImplementedException ( ) ; 
 + } 
 + 
 + @ Override 
 + public ListStorage createList ( String name ) { 
 + throw new NotImplementedException ( ) ; 
 + } 
 + 
 + @ Override 
 + public void resetStorage ( ) { 
 + throw new NotImplementedException ( ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeThreadingProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeThreadingProvider . java 
 new file mode 100644 
 index 0000000 . . 0e2a6d4 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeThreadingProvider . java 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + / * 
 + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > 
 + * / 
 + 
 + package im . actor . runtime . se ; 
 + 
 + import im . actor . runtime . generic . GenericThreadingProvider ; 
 + 
 + public class JavaSeThreadingProvider extends GenericThreadingProvider { 
 + 
 + } 
 diff - - git a / settings . gradle b / settings . gradle 
 index 64aa445 . . fa8a4c5 100644 
 - - - a / settings . gradle 
 + + + b / settings . gradle 
 @ @ - 7 , 12 + 7 , 14 @ @ include " : actor - sdk : sdk - core : core : core - shared " 
 include " : actor - sdk : sdk - core : core : core - android " 
 include " : actor - sdk : sdk - core : core : core - cocoa " 
 include " : actor - sdk : sdk - core : core : core - js " 
 + include " : actor - sdk : sdk - core : core : core - se " 
 include " : actor - sdk : sdk - core : runtime : " 
 include " : actor - sdk : sdk - core : runtime : runtime - shared " 
 include " : actor - sdk : sdk - core : runtime : runtime - android " 
 include " : actor - sdk : sdk - core : runtime : runtime - cocoa " 
 include " : actor - sdk : sdk - core : runtime : runtime - js " 
 include " : actor - sdk : sdk - core : runtime : runtime - generic " 
 + include " : actor - sdk : sdk - core : runtime : runtime - se " 
 include " : actor - sdk : sdk - api : api - codegen " 
 
 / /
