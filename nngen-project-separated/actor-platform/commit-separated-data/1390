BLEU SCORE: 0.21200626759025185

TEST MSG: fix ( server ) : add blocking to function with IO code
GENERATED MSG: refactor ( server ) : hooks rework

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / file / FileUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / file / FileUtils . scala < nl > index 58bf7e0 . . 3542103 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / file / FileUtils . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / file / FileUtils . scala < nl > @ @ - 55 , 18 + 55 , 20 @ @ object FileUtils { < nl > < nl > def concatFiles ( dir : File , fileNames : Seq [ String ] ) ( implicit ec : ExecutionContext ) : Future [ File ] = { < nl > Future { < nl > - val dirPath = dir . toPath < nl > - val concatFile = dirPath . resolve ( " concatenated " ) . toFile < nl > + blocking { < nl > + val dirPath = dir . toPath < nl > + val concatFile = dirPath . resolve ( " concatenated " ) . toFile < nl > < nl > - val outStream = new FileOutputStream ( concatFile ) < nl > + val outStream = new FileOutputStream ( concatFile ) < nl > < nl > - fileNames foreach { fileName ⇒ < nl > - Files . copy ( dirPath . resolve ( fileName ) , outStream ) < nl > - } < nl > + fileNames foreach { fileName ⇒ < nl > + Files . copy ( dirPath . resolve ( fileName ) , outStream ) < nl > + } < nl > < nl > - outStream . close ( ) < nl > + outStream . close ( ) < nl > < nl > - concatFile < nl > + concatFile < nl > + } < nl > } < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > index 537daa8 . . 5c6d83d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > @ @ - 290 , 7 + 290 , 7 @ @ private [ user ] sealed trait AuthCommands { < nl > ( processorRegion . ref ? NewAuth ( userId , authId ) ) . mapTo [ NewAuthAck ] < nl > } < nl > < nl > - def removeAuth ( userId : Int , authId : Long ) : Future [ RemoveAuthAck ] = ( processorRegion . ref ? RemoveAuth ( userId , authId ) ) . mapTo [ RemoveAuthAck ] < nl > + def removeAuth ( userId : Int , authId : Long ) : Future [ RemoveAuthAck ] = ( processorRegion . ref ? RemoveAuth ( userId , authId ) ) . mapTo [ RemoveAuthAck ] < nl > < nl > def logoutByAppleToken ( token : Array [ Byte ] ) ( implicit db : Database ) : Future [ Unit ] = { < nl > db . run ( p . push . ApplePushCredentialsRepo . findByToken ( token ) ) flatMap { creds ⇒
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala < nl > index 0cc3629 . . 2aeabbc 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala < nl > @ @ - 7 , 18 + 7 , 29 @ @ import scala . concurrent . { ExecutionContext , Future } < nl > < nl > trait Hook < nl > < nl > - class HooksStorage [ A < : Hook ] { < nl > - private val hooks = TrieMap . empty [ String , A ] < nl > - protected def hooksList = hooks . values . toSeq < nl > + trait Hook0 extends Hook { < nl > + def run ( ) : Future [ Unit ] < nl > + } < nl > + < nl > + trait Hook1 [ P ] extends Hook { < nl > + def run ( p : P ) : Future [ Unit ] < nl > + } < nl > < nl > - def register ( name : String , hook : A ) : Unit = < nl > + class HooksStorage [ H < : Hook ] { < nl > + private val hooks = TrieMap . empty [ String , H ] < nl > + protected def hooksList : Seq [ H ] = hooks . values . toSeq < nl > + < nl > + def register ( name : String , hook : H ) : Unit = < nl > if ( hooks . putIfAbsent ( name , hook ) . nonEmpty ) < nl > throw HookException . HookAlreadyRegistered ( name ) < nl > } < nl > < nl > - class HooksStorage0 [ A < : Hook ] ( run : A ⇒ Future [ Unit ] ) ( implicit ec : ExecutionContext ) extends HooksStorage { < nl > - def runAll ( ) : Future [ Unit ] = < nl > - FutureExt . ftraverse ( hooksList ) ( run ) map ( _ ⇒ ( ) ) < nl > + final class HooksStorage0 [ H < : Hook0 ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { < nl > + def runAll ( ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( ) ) map ( _ ⇒ ( ) ) < nl > + } < nl > + < nl > + final class HooksStorage1 [ H < : Hook1 [ P ] , P ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { < nl > + def runAll ( p : P ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( p ) ) map ( _ ⇒ ( ) ) < nl > } < nl > < nl > abstract class HooksControl { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > index 05c6d5c . . 1e6b001 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > @ @ - 137 , 8 + 137 , 12 @ @ private [ user ] trait UserCommandHandlers { < nl > val rng = ThreadLocalRandom . current ( ) < nl > db . run ( for { < nl > _ ← p . UserPhoneRepo . create ( rng . nextInt ( ) , userId , ACLUtils . nextAccessSalt ( rng ) , phone , " Mobile phone " ) < nl > - _ ← markContactRegistered ( user , phone , false ) < nl > - } yield AddPhoneAck ( ) ) < nl > + } yield { < nl > + db . run ( markContactRegistered ( user , phone , false ) ) onFailure { < nl > + case e ⇒ log . error ( e , " Failed to mark phone contact registered " ) < nl > + } < nl > + AddPhoneAck ( ) < nl > + } ) < nl > } < nl > < nl > protected def addEmail ( user : User , email : String ) : Unit = < nl > @ @ - 146 , 8 + 150 , 12 @ @ private [ user ] trait UserCommandHandlers { < nl > val rng = ThreadLocalRandom . current ( ) < nl > db . run ( for { < nl > _ ← p . UserEmailRepo . create ( rng . nextInt ( ) , userId , ACLUtils . nextAccessSalt ( rng ) , email , " Email " ) < nl > - _ ← markContactRegistered ( user , email , false ) < nl > - } yield AddEmailAck ( ) ) < nl > + } yield { < nl > + db . run ( markContactRegistered ( user , email , false ) ) onFailure { < nl > + case e ⇒ log . error ( e , " Failed to mark email contact registered " ) < nl > + } < nl > + AddEmailAck ( ) < nl > + } ) < nl > } < nl > < nl > protected def changeNickname ( user : User , clientAuthId : Long , nicknameOpt : Option [ String ] ) : Unit = { < nl > @ @ - 285 , 7 + 293 , 7 @ @ private [ user ] trait UserCommandHandlers { < nl > private def markContactRegistered ( user : User , email : String , isSilent : Boolean ) : DBIO [ Unit ] = { < nl > val date = new DateTime < nl > for { < nl > - _ ← DBIO . from ( userExt . hooks . beforeContactRegistered . runAll ( ) ) < nl > + _ ← DBIO . from ( userExt . hooks . beforeContactRegistered . runAll ( user ) ) < nl > contacts ← p . contact . UnregisteredEmailContactRepo . find ( email ) < nl > _ = log . debug ( s " Unregistered $ email is in contacts of users : $ contacts " ) < nl > _ ← DBIO . sequence ( contacts . map { contact ⇒ < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > index 97683b4 . . 2a20435 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > @ @ - 31 , 15 + 31 , 13 @ @ object UserExtension extends ExtensionId [ UserExtensionImpl ] with ExtensionIdProv < nl > } < nl > < nl > final class UserHooksControl ( implicit ec : ExecutionContext ) extends HooksControl { < nl > - val beforeContactRegistered = new HooksStorage0 [ UserHook . BeforeContactRegisteredHook ] ( _ . run ( ) ) < nl > + val beforeContactRegistered = new HooksStorage1 [ UserHook . BeforeContactRegisteredHook , User ] < nl > } < nl > < nl > - abstract class UserHook ( system : ActorSystem ) extends Hook < nl > - < nl > object UserHook { < nl > < nl > - abstract class BeforeContactRegisteredHook ( system : ActorSystem ) extends UserHook ( system ) { < nl > - def run ( ) : Future [ Unit ] < nl > + abstract class BeforeContactRegisteredHook ( system : ActorSystem ) extends Hook1 [ User ] { < nl > + def run ( user : User ) : Future [ Unit ] < nl > } < nl > < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserEmailRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserEmailRepo . scala < nl > index 7bac524 . . 98facb6 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserEmailRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserEmailRepo . scala < nl > @ @ - 44 , 5 + 44 , 4 @ @ object UserEmailRepo { < nl > < nl > def create ( id : Int , userId : Int , accessSalt : String , email : String , title : String ) : FixedSqlAction [ Int , NoStream , Write ] = < nl > emails + = models . UserEmail ( id , userId , accessSalt , email , title ) < nl > - < nl > } < nl > diff - - git a / actor - server / actor - runtime / src / main / resources / reference . conf b / actor - server / actor - runtime / src / main / resources / reference . conf < nl > new file mode 100644 < nl > index 0000000 . . de0a073 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - runtime / src / main / resources / reference . conf < nl > @ @ - 0 , 0 + 1 , 3 @ @ < nl > + akka { < nl > + extensions : [ " im . actor . server . db . DbExtension " , " im . actor . server . bot . BotExtension " , " akka . cluster . client . ClusterClientReceptionist " ] $ { akka . extensions } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala < nl > index b56645c . . 9407cea 100644 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala < nl > @ @ - 21 , 14 + 21 , 12 @ @ object ActorConfig { < nl > } < nl > < nl > val config = ConfigFactory . parseString ( < nl > - " " " < nl > + s " " " < nl > | akka { < nl > | actor { < nl > | provider : " akka . cluster . ClusterActorRefProvider " < nl > | } < nl > | < nl > - | extensions : [ " im . actor . server . db . DbExtension " , " im . actor . server . bot . BotExtension " , " akka . cluster . client . ClusterClientReceptionist " ] < nl > - | < nl > | loggers = [ " akka . event . slf4j . Slf4jLogger " ] < nl > | < nl > | logging - filter = " akka . event . slf4j . Slf4jLoggingFilter " < nl > diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala < nl > index 796c7e0 . . 27b3f07 100644 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala < nl > + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala < nl > @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . server . oauth . GoogleProvider < nl > import im . actor . server . session . { Session , SessionConfig , SessionRegion } < nl > import im . actor . server . user . UserExtension < nl > import org . scalatest . Suite < nl > + import org . scalatest . concurrent . Futures < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > import scala . concurrent . _ < nl > @ @ - 32 , 7 + 33 , 7 @ @ trait UserStructExtensions { < nl > } < nl > } < nl > < nl > - trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions { < nl > + trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions with Futures { < nl > this : Suite ⇒ < nl > < nl > protected val system : ActorSystem

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / file / FileUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / file / FileUtils . scala 
 index 58bf7e0 . . 3542103 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / file / FileUtils . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / file / FileUtils . scala 
 @ @ - 55 , 18 + 55 , 20 @ @ object FileUtils { 
 
 def concatFiles ( dir : File , fileNames : Seq [ String ] ) ( implicit ec : ExecutionContext ) : Future [ File ] = { 
 Future { 
 - val dirPath = dir . toPath 
 - val concatFile = dirPath . resolve ( " concatenated " ) . toFile 
 + blocking { 
 + val dirPath = dir . toPath 
 + val concatFile = dirPath . resolve ( " concatenated " ) . toFile 
 
 - val outStream = new FileOutputStream ( concatFile ) 
 + val outStream = new FileOutputStream ( concatFile ) 
 
 - fileNames foreach { fileName ⇒ 
 - Files . copy ( dirPath . resolve ( fileName ) , outStream ) 
 - } 
 + fileNames foreach { fileName ⇒ 
 + Files . copy ( dirPath . resolve ( fileName ) , outStream ) 
 + } 
 
 - outStream . close ( ) 
 + outStream . close ( ) 
 
 - concatFile 
 + concatFile 
 + } 
 } 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 index 537daa8 . . 5c6d83d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 @ @ - 290 , 7 + 290 , 7 @ @ private [ user ] sealed trait AuthCommands { 
 ( processorRegion . ref ? NewAuth ( userId , authId ) ) . mapTo [ NewAuthAck ] 
 } 
 
 - def removeAuth ( userId : Int , authId : Long ) : Future [ RemoveAuthAck ] = ( processorRegion . ref ? RemoveAuth ( userId , authId ) ) . mapTo [ RemoveAuthAck ] 
 + def removeAuth ( userId : Int , authId : Long ) : Future [ RemoveAuthAck ] = ( processorRegion . ref ? RemoveAuth ( userId , authId ) ) . mapTo [ RemoveAuthAck ] 
 
 def logoutByAppleToken ( token : Array [ Byte ] ) ( implicit db : Database ) : Future [ Unit ] = { 
 db . run ( p . push . ApplePushCredentialsRepo . findByToken ( token ) ) flatMap { creds ⇒

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala 
 index 0cc3629 . . 2aeabbc 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala 
 @ @ - 7 , 18 + 7 , 29 @ @ import scala . concurrent . { ExecutionContext , Future } 
 
 trait Hook 
 
 - class HooksStorage [ A < : Hook ] { 
 - private val hooks = TrieMap . empty [ String , A ] 
 - protected def hooksList = hooks . values . toSeq 
 + trait Hook0 extends Hook { 
 + def run ( ) : Future [ Unit ] 
 + } 
 + 
 + trait Hook1 [ P ] extends Hook { 
 + def run ( p : P ) : Future [ Unit ] 
 + } 
 
 - def register ( name : String , hook : A ) : Unit = 
 + class HooksStorage [ H < : Hook ] { 
 + private val hooks = TrieMap . empty [ String , H ] 
 + protected def hooksList : Seq [ H ] = hooks . values . toSeq 
 + 
 + def register ( name : String , hook : H ) : Unit = 
 if ( hooks . putIfAbsent ( name , hook ) . nonEmpty ) 
 throw HookException . HookAlreadyRegistered ( name ) 
 } 
 
 - class HooksStorage0 [ A < : Hook ] ( run : A ⇒ Future [ Unit ] ) ( implicit ec : ExecutionContext ) extends HooksStorage { 
 - def runAll ( ) : Future [ Unit ] = 
 - FutureExt . ftraverse ( hooksList ) ( run ) map ( _ ⇒ ( ) ) 
 + final class HooksStorage0 [ H < : Hook0 ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { 
 + def runAll ( ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( ) ) map ( _ ⇒ ( ) ) 
 + } 
 + 
 + final class HooksStorage1 [ H < : Hook1 [ P ] , P ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { 
 + def runAll ( p : P ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( p ) ) map ( _ ⇒ ( ) ) 
 } 
 
 abstract class HooksControl { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 index 05c6d5c . . 1e6b001 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 @ @ - 137 , 8 + 137 , 12 @ @ private [ user ] trait UserCommandHandlers { 
 val rng = ThreadLocalRandom . current ( ) 
 db . run ( for { 
 _ ← p . UserPhoneRepo . create ( rng . nextInt ( ) , userId , ACLUtils . nextAccessSalt ( rng ) , phone , " Mobile phone " ) 
 - _ ← markContactRegistered ( user , phone , false ) 
 - } yield AddPhoneAck ( ) ) 
 + } yield { 
 + db . run ( markContactRegistered ( user , phone , false ) ) onFailure { 
 + case e ⇒ log . error ( e , " Failed to mark phone contact registered " ) 
 + } 
 + AddPhoneAck ( ) 
 + } ) 
 } 
 
 protected def addEmail ( user : User , email : String ) : Unit = 
 @ @ - 146 , 8 + 150 , 12 @ @ private [ user ] trait UserCommandHandlers { 
 val rng = ThreadLocalRandom . current ( ) 
 db . run ( for { 
 _ ← p . UserEmailRepo . create ( rng . nextInt ( ) , userId , ACLUtils . nextAccessSalt ( rng ) , email , " Email " ) 
 - _ ← markContactRegistered ( user , email , false ) 
 - } yield AddEmailAck ( ) ) 
 + } yield { 
 + db . run ( markContactRegistered ( user , email , false ) ) onFailure { 
 + case e ⇒ log . error ( e , " Failed to mark email contact registered " ) 
 + } 
 + AddEmailAck ( ) 
 + } ) 
 } 
 
 protected def changeNickname ( user : User , clientAuthId : Long , nicknameOpt : Option [ String ] ) : Unit = { 
 @ @ - 285 , 7 + 293 , 7 @ @ private [ user ] trait UserCommandHandlers { 
 private def markContactRegistered ( user : User , email : String , isSilent : Boolean ) : DBIO [ Unit ] = { 
 val date = new DateTime 
 for { 
 - _ ← DBIO . from ( userExt . hooks . beforeContactRegistered . runAll ( ) ) 
 + _ ← DBIO . from ( userExt . hooks . beforeContactRegistered . runAll ( user ) ) 
 contacts ← p . contact . UnregisteredEmailContactRepo . find ( email ) 
 _ = log . debug ( s " Unregistered $ email is in contacts of users : $ contacts " ) 
 _ ← DBIO . sequence ( contacts . map { contact ⇒ 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 index 97683b4 . . 2a20435 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 @ @ - 31 , 15 + 31 , 13 @ @ object UserExtension extends ExtensionId [ UserExtensionImpl ] with ExtensionIdProv 
 } 
 
 final class UserHooksControl ( implicit ec : ExecutionContext ) extends HooksControl { 
 - val beforeContactRegistered = new HooksStorage0 [ UserHook . BeforeContactRegisteredHook ] ( _ . run ( ) ) 
 + val beforeContactRegistered = new HooksStorage1 [ UserHook . BeforeContactRegisteredHook , User ] 
 } 
 
 - abstract class UserHook ( system : ActorSystem ) extends Hook 
 - 
 object UserHook { 
 
 - abstract class BeforeContactRegisteredHook ( system : ActorSystem ) extends UserHook ( system ) { 
 - def run ( ) : Future [ Unit ] 
 + abstract class BeforeContactRegisteredHook ( system : ActorSystem ) extends Hook1 [ User ] { 
 + def run ( user : User ) : Future [ Unit ] 
 } 
 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserEmailRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserEmailRepo . scala 
 index 7bac524 . . 98facb6 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserEmailRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserEmailRepo . scala 
 @ @ - 44 , 5 + 44 , 4 @ @ object UserEmailRepo { 
 
 def create ( id : Int , userId : Int , accessSalt : String , email : String , title : String ) : FixedSqlAction [ Int , NoStream , Write ] = 
 emails + = models . UserEmail ( id , userId , accessSalt , email , title ) 
 - 
 } 
 diff - - git a / actor - server / actor - runtime / src / main / resources / reference . conf b / actor - server / actor - runtime / src / main / resources / reference . conf 
 new file mode 100644 
 index 0000000 . . de0a073 
 - - - / dev / null 
 + + + b / actor - server / actor - runtime / src / main / resources / reference . conf 
 @ @ - 0 , 0 + 1 , 3 @ @ 
 + akka { 
 + extensions : [ " im . actor . server . db . DbExtension " , " im . actor . server . bot . BotExtension " , " akka . cluster . client . ClusterClientReceptionist " ] $ { akka . extensions } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala 
 index b56645c . . 9407cea 100644 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala 
 @ @ - 21 , 14 + 21 , 12 @ @ object ActorConfig { 
 } 
 
 val config = ConfigFactory . parseString ( 
 - " " " 
 + s " " " 
 | akka { 
 | actor { 
 | provider : " akka . cluster . ClusterActorRefProvider " 
 | } 
 | 
 - | extensions : [ " im . actor . server . db . DbExtension " , " im . actor . server . bot . BotExtension " , " akka . cluster . client . ClusterClientReceptionist " ] 
 - | 
 | loggers = [ " akka . event . slf4j . Slf4jLogger " ] 
 | 
 | logging - filter = " akka . event . slf4j . Slf4jLoggingFilter " 
 diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala 
 index 796c7e0 . . 27b3f07 100644 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala 
 + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala 
 @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . server . oauth . GoogleProvider 
 import im . actor . server . session . { Session , SessionConfig , SessionRegion } 
 import im . actor . server . user . UserExtension 
 import org . scalatest . Suite 
 + import org . scalatest . concurrent . Futures 
 import slick . driver . PostgresDriver . api . _ 
 
 import scala . concurrent . _ 
 @ @ - 32 , 7 + 33 , 7 @ @ trait UserStructExtensions { 
 } 
 } 
 
 - trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions { 
 + trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions with Futures { 
 this : Suite ⇒ 
 
 protected val system : ActorSystem
