BLEU SCORE: 0.054011574454540336

TEST MSG: fix ( server : files ) : major fixes in file storage including security one - path traversal
GENERATED MSG: feat ( files , auth ) : file names , ContactRegistered randomId

TEST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala < nl > index 75af247 . . 5d35c2c 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala < nl > @ @ - 6 , 7 + 6 , 7 @ @ import akka . util . ByteString < nl > import im . actor . bots . BotMessages . _ < nl > import im . actor . concurrent . FutureResultCats < nl > import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } < nl > - import im . actor . server . file . { FileStorageAdapter , FileStorageExtension , FileUtils } < nl > + import im . actor . server . file . { UnsafeFileName , FileStorageAdapter , FileStorageExtension , FileUtils } < nl > import im . actor . server . sticker . { Sticker , StickerImage } < nl > import im . actor . server . stickers . { StickerErrors , StickersExtension } < nl > < nl > @ @ - 142 , 7 + 142 , 7 @ @ private [ bot ] final class StickersBotService ( _ system : ActorSystem ) extends BotSer < nl > private def uploadSticker ( name : String , bytes : Array [ Byte ] , w : Int , h : Int ) : Future [ Option [ StickerImage ] ] = < nl > Try ( for { < nl > ( path , size ) ← FileUtils . writeBytes ( ByteString ( bytes ) ) < nl > - fileLocation ← fsAdapter . uploadFileF ( name , path . toFile ) < nl > + fileLocation ← fsAdapter . uploadFileF ( UnsafeFileName ( name ) , path . toFile ) < nl > } yield Some ( StickerImage ( fileLocation , w , h , size ) ) ) . toOption getOrElse Future . successful ( None ) < nl > < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala < nl > index 77a66e4 . . 18616d2 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala < nl > @ @ - 118 , 8 + 118 , 8 @ @ object ImageUtils { < nl > _ ← Future . fromTry ( Try ( smallAimg . toImage . forWriter ( smallDesc . writer ) . write ( smallFile ) ) ) < nl > _ ← Future . fromTry ( Try ( largeAimg . toImage . forWriter ( largeDesc . writer ) . write ( largeFile ) ) ) < nl > < nl > - smallFileLocation ← fsAdapter . uploadFileF ( smallDesc . name , smallFile ) < nl > - largeFileLocation ← fsAdapter . uploadFileF ( largeDesc . name , largeFile ) < nl > + smallFileLocation ← fsAdapter . uploadFileF ( UnsafeFileName ( smallDesc . name ) , smallFile ) < nl > + largeFileLocation ← fsAdapter . uploadFileF ( UnsafeFileName ( largeDesc . name ) , largeFile ) < nl > } yield { < nl > / / TODO : # perf calculate file sizes efficiently < nl > < nl > diff - - git a / actor - server / actor - enrich / src / main / scala / im / actor / server / enrich / RichMessageWorker . scala b / actor - server / actor - enrich / src / main / scala / im / actor / server / enrich / RichMessageWorker . scala < nl > index 01fff6a . . ad2f6e3 100644 < nl > - - - a / actor - server / actor - enrich / src / main / scala / im / actor / server / enrich / RichMessageWorker . scala < nl > + + + b / actor - server / actor - enrich / src / main / scala / im / actor / server / enrich / RichMessageWorker . scala < nl > @ @ - 11 , 7 + 11 , 7 @ @ import com . sksamuel . scrimage . nio . JpegWriter < nl > import im . actor . api . rpc . files . ApiFastThumb < nl > import im . actor . api . rpc . messaging . _ < nl > import im . actor . server . db . DbExtension < nl > - import im . actor . server . file . { FileStorageAdapter , FileStorageExtension , FileUtils , ImageUtils } < nl > + import im . actor . server . file . _ < nl > import im . actor . server . pubsub . { PeerMessage , PubSubExtension } < nl > import im . actor . util . log . AnyRefLogSource < nl > import org . joda . time . DateTime < nl > @ @ - 94 , 7 + 94 , 7 @ @ final class RichMessageWorker ( config : RichMessageConfig ) ( implicit materializer : < nl > db . run { < nl > for { < nl > ( file , fileSize ) ← DBIO . from ( FileUtils . writeBytes ( imageBytes ) ) < nl > - location ← fsAdapter . uploadFile ( fullName , file . toFile ) < nl > + location ← fsAdapter . uploadFile ( UnsafeFileName ( fullName ) , file . toFile ) < nl > thumb ← DBIO . from ( ImageUtils . scaleTo ( image , 90 ) ) < nl > thumbBytes = thumb . toImage . forWriter ( JpegWriter ( ) ) . bytes < nl > < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala < nl > index 2cb6fa5 . . dba71a2 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala < nl > @ @ - 13 , 17 + 13 , 21 @ @ object FileStorageAdapter { < nl > < nl > trait FileStorageAdapter extends UploadActions with DownloadActions with UploadKeyParsing < nl > < nl > + final case class UnsafeFileName ( fileName : String ) { < nl > + lazy val safe : String = new File ( fileName ) . toPath . normalize ( ) . getFileName . toString < nl > + } < nl > + < nl > private [ file ] trait UploadActions { < nl > < nl > def getFileUploadPartUrl ( fileId : Long , partNumber : Int ) : Future [ ( UploadKey , String ) ] < nl > < nl > def getFileUploadUrl ( fileId : Long ) : Future [ ( UploadKey , String ) ] < nl > < nl > - def completeFileUpload ( fileId : Long , fieSize : Long , fileName : String , partNames : Seq [ String ] ) : Future [ Unit ] < nl > + def completeFileUpload ( fileId : Long , fieSize : Long , fileName : UnsafeFileName , partNames : Seq [ String ] ) : Future [ Unit ] < nl > < nl > - def uploadFile ( name : String , file : File ) : DBIO [ FileLocation ] < nl > + def uploadFile ( name : UnsafeFileName , file : File ) : DBIO [ FileLocation ] < nl > < nl > - def uploadFileF ( name : String , file : File ) : Future [ FileLocation ] < nl > + def uploadFileF ( name : UnsafeFileName , file : File ) : Future [ FileLocation ] < nl > } < nl > < nl > private [ file ] trait UploadKeyParsing { < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > index d101bbf . . 6b35f4a 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > @ @ - 74 , 7 + 74 , 7 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) < nl > < nl > val baseUri = Uri ( httpConfig . baseUri ) < nl > < nl > - override def uploadFile ( name : String , file : io . File ) : DBIO [ FileLocation ] = { < nl > + override def uploadFile ( name : UnsafeFileName , file : io . File ) : DBIO [ FileLocation ] = { < nl > val scalaFile = file . toScala < nl > val rng = ThreadLocalRandom . current ( ) < nl > val id = ACLFiles . randomLong ( rng ) < nl > @ @ - 83 , 13 + 83 , 13 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) < nl > val size = scalaFile . size < nl > for { < nl > _ ← persist . FileRepo . create ( id , size , accessSalt , LocalUploadKey . fileKey ( id ) . key ) < nl > - _ ← DBIO . from ( createFile ( id , name , scalaFile ) ) < nl > - _ ← persist . FileRepo . setUploaded ( id , name ) < nl > + _ ← DBIO . from ( createFile ( id , name . safe , scalaFile ) ) < nl > + _ ← persist . FileRepo . setUploaded ( id , name . safe ) < nl > } yield FileLocation ( id , ACLFiles . fileAccessHash ( id , accessSalt ) ) < nl > < nl > } < nl > < nl > - override def uploadFileF ( name : String , file : io . File ) : Future [ FileLocation ] = db . run ( uploadFile ( name , file ) ) < nl > + override def uploadFileF ( name : UnsafeFileName , file : io . File ) : Future [ FileLocation ] = db . run ( uploadFile ( name , file ) ) < nl > < nl > / * * < nl > * Generates upload uri similar to : < nl > @ @ - 105 , 12 + 105 , 13 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) < nl > Future . successful ( LocalUploadKey . fileKey ( fileId ) → signRequest ( HttpMethods . PUT , query , ACLFiles . secretKey ( ) ) . toString ) < nl > } < nl > < nl > - override def completeFileUpload ( fileId : Long , fileSize : Long , fileName : String , partNames : Seq [ String ] ) : Future [ Unit ] = { < nl > + override def completeFileUpload ( fileId : Long , fileSize : Long , fileName : UnsafeFileName , partNames : Seq [ String ] ) : Future [ Unit ] = { < nl > val fileDir = fileDirectory ( fileId ) < nl > for { < nl > isComplete ← haveAllParts ( fileDir , partNames , fileSize ) < nl > - result ← concatFiles ( fileDir , partNames , fileName , fileSize ) < nl > + result ← concatFiles ( fileDir , partNames , fileName . safe , fileSize ) < nl > _ ← if ( isComplete ) deleteUploadedParts ( fileDir , partNames ) else Future . successful ( ( ) ) < nl > + _ ← db . run ( persist . FileRepo . setUploaded ( fileId , fileName . safe ) ) < nl > } yield ( ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala < nl > index 682b71b . . 95ea00f 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala < nl > @ @ - 20 , 7 + 20 , 7 @ @ import scala . concurrent . duration . _ < nl > import scala . concurrent . forkjoin . ThreadLocalRandom < nl > import scala . concurrent . { ExecutionContext , Future } < nl > < nl > - class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { < nl > + final class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { < nl > < nl > private implicit val system : ActorSystem = _ system < nl > private implicit val ec : ExecutionContext = system . dispatcher < nl > @ @ - 33 , 10 + 33 , 10 @ @ class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { < nl > val s3Client = new AmazonS3ScalaClient ( awsCredentials ) < nl > val transferManager = new TransferManager ( awsCredentials ) < nl > < nl > - override def uploadFile ( name : String , file : File ) : DBIO [ FileLocation ] = < nl > + override def uploadFile ( name : UnsafeFileName , file : File ) : DBIO [ FileLocation ] = < nl > uploadFile ( bucketName , name , file ) < nl > < nl > - override def uploadFileF ( name : String , file : File ) : Future [ FileLocation ] = < nl > + override def uploadFileF ( name : UnsafeFileName , file : File ) : Future [ FileLocation ] = < nl > db . run ( uploadFile ( name , file ) ) < nl > < nl > override def downloadFile ( id : Long ) : DBIO [ Option [ File ] ] = { < nl > @ @ - 73 , 7 + 73 , 7 @ @ class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { < nl > } yield file < nl > } < nl > < nl > - private def uploadFile ( bucketName : String , name : String , file : File ) : DBIO [ FileLocation ] = { < nl > + private def uploadFile ( bucketName : String , name : UnsafeFileName , file : File ) : DBIO [ FileLocation ] = { < nl > val rnd = ThreadLocalRandom . current ( ) < nl > val id = rnd . nextLong ( ) < nl > val accessSalt = ACLFiles . nextAccessSalt ( rnd ) < nl > @ @ - 81 , 9 + 81 , 9 @ @ class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { < nl > < nl > for { < nl > size ← DBIO . from ( sizeF ) < nl > - _ ← persist . FileRepo . create ( id , size , accessSalt , s3Key ( id , name ) ) < nl > - _ ← DBIO . from ( s3Upload ( bucketName , id , name , file ) ) < nl > - _ ← persist . FileRepo . setUploaded ( id , name ) < nl > + _ ← persist . FileRepo . create ( id , size , accessSalt , s3Key ( id , name . safe ) ) < nl > + _ ← DBIO . from ( s3Upload ( bucketName , id , name . safe , file ) ) < nl > + _ ← persist . FileRepo . setUploaded ( id , name . safe ) < nl > } yield FileLocation ( id , ACLFiles . fileAccessHash ( id , accessSalt ) ) < nl > } < nl > < nl > @ @ - 93 , 7 + 93 , 7 @ @ class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { < nl > < nl > override def getFileUploadPartUrl ( fileId : Long , partNumber : Int ) : Future [ ( UploadKey , String ) ] = { < nl > val fileKey = uploadKey ( fileId ) < nl > - val partKey = S3UploadKey ( s " upload _ part _ $ { fileKey . key } _ $ { partNumber } " ) < nl > + val partKey = S3UploadKey ( s " upload _ part _ $ { fileKey . key } _ $ partNumber " ) < nl > val request = new GeneratePresignedUrlRequest ( bucketName , partKey . key ) < nl > val expiration = new java . util . Date < nl > expiration . setTime ( expiration . getTime + 1 . day . toMillis ) < nl > @ @ - 115 , 28 + 115 , 29 @ @ class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { < nl > for ( url ← s3Client . generatePresignedUrlRequest ( presignedRequest ) ) yield fileKey → url . toString < nl > } < nl > < nl > - override def completeFileUpload ( fileId : Long , fileSize : Long , fileName : String , partNames : Seq [ String ] ) : Future [ Unit ] = { < nl > + override def completeFileUpload ( fileId : Long , fileSize : Long , fileName : UnsafeFileName , partNames : Seq [ String ] ) : Future [ Unit ] = { < nl > for { < nl > tempDir ← createTempDir ( ) < nl > fk = uploadKey ( fileId ) . key < nl > _ ← FutureTransfer . listenFor { < nl > - transferManager . downloadDirectory ( bucketName , s " upload _ part _ $ { fk } " , tempDir ) < nl > + transferManager . downloadDirectory ( bucketName , s " upload _ part _ $ fk " , tempDir ) < nl > } map ( _ . waitForCompletion ( ) ) < nl > concatFile ← concatFiles ( tempDir , partNames ) < nl > _ ← FutureTransfer . listenFor { < nl > - transferManager . upload ( bucketName , s3Key ( fileId , fileName ) , concatFile ) < nl > + transferManager . upload ( bucketName , s3Key ( fileId , fileName . safe ) , concatFile ) < nl > } map ( _ . waitForCompletion ( ) ) < nl > + _ ← db . run ( persist . FileRepo . setUploaded ( fileId , fileName . safe ) ) < nl > _ ← deleteDir ( tempDir ) < nl > } yield ( ) < nl > } < nl > < nl > - private def uploadKey ( fileId : Long ) : S3UploadKey = S3UploadKey ( s " upload _ $ { fileId } " ) < nl > + private def uploadKey ( fileId : Long ) : S3UploadKey = S3UploadKey ( s " upload _ $ fileId " ) < nl > < nl > private def s3Key ( id : Long , name : String ) : String = < nl > if ( name . isEmpty ) { < nl > - s " file _ $ { id } " < nl > + s " file _ $ id " < nl > } else { < nl > - s " file _ $ { id } / $ { name } " < nl > + s " file _ $ id / $ name " < nl > } < nl > < nl > override def parseKey ( bytes : Array [ Byte ] ) : UploadKey = S3UploadKey . parseFrom ( bytes ) < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala < nl > index e362365 . . 83eece5 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala < nl > @ @ - 2 , 8 + 2 , 6 @ @ package im . actor . server . api . rpc . service . files < nl > < nl > import akka . actor . _ < nl > import cats . data . Xor < nl > - import cats . std . all . _ < nl > - import cats . syntax . traverse . _ < nl > import im . actor . api . rpc . FileHelpers . Errors < nl > import im . actor . api . rpc . files . _ < nl > import im . actor . api . rpc . _ < nl > @ @ - 11 , 11 + 9 , 9 @ @ import im . actor . concurrent . FutureExt < nl > import im . actor . server . acl . ACLUtils < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . file . _ < nl > - import im . actor . server . persist < nl > - import im . actor . server . persist . FileRepo < nl > + import im . actor . server . persist . { FilePartRepo , FileRepo } < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > - import scala . concurrent . duration . _ < nl > import scala . concurrent . { ExecutionContext , Future } < nl > < nl > class FilesServiceImpl ( implicit actorSystem : ActorSystem ) extends FilesService { < nl > @ @ - 30 , 7 + 26 , 7 @ @ class FilesServiceImpl ( implicit actorSystem : ActorSystem ) extends FilesService { < nl > override def jhandleGetFileUrl ( location : ApiFileLocation , clientData : ClientData ) : Future [ HandlerResult [ ResponseGetFileUrl ] ] = < nl > authorized ( clientData ) { client ⇒ < nl > ( for { < nl > - file ← fromFutureOption ( Errors . LocationInvalid ) ( db . run ( persist . FileRepo . find ( location . fileId ) ) ) < nl > + file ← fromFutureOption ( Errors . LocationInvalid ) ( db . run ( FileRepo . find ( location . fileId ) ) ) < nl > url ← fromFutureOption ( Errors . LocationInvalid ) ( fsAdapter . getFileDownloadUrl ( file , location . accessHash ) ) < nl > } yield ResponseGetFileUrl ( url , FileStorageAdapter . UrlExpirationTimeout . toSeconds . toInt ) ) . value map ( _ . toScalaz ) < nl > } < nl > @ @ - 61 , 27 + 57 , 26 @ @ class FilesServiceImpl ( implicit actorSystem : ActorSystem ) extends FilesService { < nl > ( for { < nl > uploadKeyUrl ← fromFuture ( fsAdapter . getFileUploadUrl ( id ) ) < nl > ( uploadKey , url ) = uploadKeyUrl < nl > - _ ← fromFuture ( db . run ( persist . FileRepo . create ( id , expectedSize . toLong , accessSalt = ACLUtils . nextAccessSalt ( ) , uploadKey . key ) ) ) < nl > + _ ← fromFuture ( db . run ( FileRepo . create ( id , expectedSize . toLong , accessSalt = ACLUtils . nextAccessSalt ( ) , uploadKey . key ) ) ) < nl > } yield ResponseGetFileUploadUrl ( url , uploadKey . toByteArray ) ) . value map ( _ . toScalaz ) < nl > } < nl > < nl > override def jhandleGetFileUploadPartUrl ( partNumber : Int , partSize : Int , keyBytes : Array [ Byte ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseGetFileUploadPartUrl ] ] = < nl > authorized ( clientData ) { client ⇒ < nl > ( for { < nl > - file ← fromFutureOption ( Errors . FileNotFound ) ( db . run ( persist . FileRepo . findByKey ( fsAdapter . parseKey ( keyBytes ) . key ) ) ) < nl > + file ← fromFutureOption ( Errors . FileNotFound ) ( db . run ( FileRepo . findByKey ( fsAdapter . parseKey ( keyBytes ) . key ) ) ) < nl > partKeyUrl ← fromFuture ( fsAdapter . getFileUploadPartUrl ( file . id , partNumber ) ) < nl > ( partKey , url ) = partKeyUrl < nl > - _ ← fromFuture ( db . run ( persist . FilePartRepo . createOrUpdate ( file . id , partNumber , partSize , partKey . key ) ) ) < nl > + _ ← fromFuture ( db . run ( FilePartRepo . createOrUpdate ( file . id , partNumber , partSize , partKey . key ) ) ) < nl > } yield ResponseGetFileUploadPartUrl ( url ) ) . value map ( _ . toScalaz ) < nl > } < nl > < nl > override def jhandleCommitFileUpload ( keyBytes : Array [ Byte ] , fileName : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseCommitFileUpload ] ] = < nl > authorized ( clientData ) { client ⇒ < nl > ( for { < nl > - file ← fromFutureOption ( Errors . FileNotFound ) ( db . run ( persist . FileRepo . findByKey ( fsAdapter . parseKey ( keyBytes ) . key ) ) ) < nl > - partNames ← fromFuture ( db . run ( persist . FilePartRepo . findByFileId ( file . id ) map ( _ . map ( _ . uploadKey ) ) ) ) < nl > - _ ← fromFuture ( fsAdapter . completeFileUpload ( file . id , file . size , fileName , partNames ) ) < nl > - _ ← fromFuture ( db . run ( persist . FileRepo . setUploaded ( file . id , fileName ) ) ) < nl > + file ← fromFutureOption ( Errors . FileNotFound ) ( db . run ( FileRepo . findByKey ( fsAdapter . parseKey ( keyBytes ) . key ) ) ) < nl > + partNames ← fromFuture ( db . run ( FilePartRepo . findByFileId ( file . id ) map ( _ . map ( _ . uploadKey ) ) ) ) < nl > + _ ← fromFuture ( fsAdapter . completeFileUpload ( file . id , file . size , UnsafeFileName ( fileName ) , partNames ) ) < nl > } yield ResponseCommitFileUpload ( ApiFileLocation ( file . id , ACLUtils . fileAccessHash ( file . id , file . accessSalt ) ) ) ) . value map ( _ . toScalaz ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala < nl > index e1728d4 . . a694065 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala < nl > @ @ - 18 , 7 + 18 , 7 @ @ import im . actor . server . api . http . json . JsonFormatters . _ < nl > import im . actor . server . api . http . json . { AvatarUrls , _ } < nl > import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } < nl > import im . actor . server . api . rpc . service . messaging < nl > - import im . actor . server . file . { FileStorageExtension , ImageUtils } < nl > + import im . actor . server . file . { UnsafeFileName , FileStorageExtension , ImageUtils } < nl > import im . actor . server . webhooks . WebhooksExtension < nl > import im . actor . server . webhooks . http . routes . OutgoingHooksErrors < nl > import play . api . libs . json . _ < nl > @ @ - 330 , 7 + 330 , 7 @ @ final class HttpApiFrontendSpec < nl > < nl > def groupInvitesAvatars1 ( ) = { < nl > val avatarFile = Paths . get ( getClass . getResource ( " / valid - avatar . jpg " ) . toURI ) . toFile < nl > - val fileLocation = whenReady ( db . run ( fsAdapter . uploadFile ( " avatar " , avatarFile ) ) ) ( identity ) < nl > + val fileLocation = whenReady ( db . run ( fsAdapter . uploadFile ( UnsafeFileName ( " avatar " ) , avatarFile ) ) ) ( identity ) < nl > < nl > whenReady ( db . run ( ImageUtils . scaleAvatar ( fileLocation . fileId , ThreadLocalRandom . current ( ) ) ) ) { result ⇒ < nl > result should matchPattern { case Right ( _ ) ⇒ } < nl > @ @ - 371 , 7 + 371 , 7 @ @ final class HttpApiFrontendSpec < nl > < nl > def groupInvitesAvatars2 ( ) = { < nl > val avatarFile = Paths . get ( getClass . getResource ( " / valid - avatar . jpg " ) . toURI ) . toFile < nl > - val fileLocation = whenReady ( db . run ( fsAdapter . uploadFile ( " avatar " , avatarFile ) ) ) ( identity ) < nl > + val fileLocation = whenReady ( db . run ( fsAdapter . uploadFile ( UnsafeFileName ( " avatar " ) , avatarFile ) ) ) ( identity ) < nl > whenReady ( db . run ( ImageUtils . scaleAvatar ( fileLocation . fileId , ThreadLocalRandom . current ( ) ) ) ) { result ⇒ < nl > result should matchPattern { case Right ( _ ) ⇒ } < nl > val avatar = < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > index 50f7c94 . . 838ca2e 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > @ @ - 10 , 21 + 10 , 21 @ @ import im . actor . server . api . rpc . service . files . FilesServiceImpl < nl > import im . actor . server . { BaseAppSuite , ImplicitAuthService , ImplicitSessionRegion } < nl > import org . apache . commons . io . IOUtils < nl > < nl > - class FilesServiceSpec < nl > + final class FilesServiceSpec < nl > extends BaseAppSuite < nl > with ImplicitSessionRegion < nl > with ImplicitAuthService { < nl > behavior of " FilesService " < nl > < nl > - it should " Generate upload url " in e1 < nl > + it should " Generate upload url " in generateUploadUrl < nl > < nl > - it should " Generate valid upload part urls " in e2 < nl > + it should " Generate valid upload part urls " in generateUploadPartUrls < nl > < nl > - it should " Complete upload " in e3 < nl > + it should " Complete upload " in completeUpload < nl > < nl > - it should " Generate valid download urls " in e4 < nl > + it should " Generate valid download urls " in generateValidDownloadUrls < nl > < nl > - it should " Generate valid upload part urls when same request comes twice " in e5 < nl > + it should " Generate valid upload part urls when same request comes twice " in validUploadPartUrlsDuplRequest < nl > < nl > lazy val service = new FilesServiceImpl < nl > HttpApi ( system ) < nl > @ @ - 40 , 7 + 40 , 7 @ @ class FilesServiceSpec < nl > < nl > var expectedContents : Option [ String ] = None < nl > < nl > - def e1 ( ) = { < nl > + def generateUploadUrl ( ) = { < nl > val size = 20 < nl > < nl > whenReady ( service . handleGetFileUploadUrl ( size ) ) { resp ⇒ < nl > @ @ - 53 , 7 + 53 , 7 @ @ class FilesServiceSpec < nl > } < nl > } < nl > < nl > - def e2 ( ) = { < nl > + def generateUploadPartUrls ( ) = { < nl > val part1Size = 1024 * 32 / / big part < nl > val part2Size = 5 / / small part < nl > < nl > @ @ - 81 , 10 + 81 , 10 @ @ class FilesServiceSpec < nl > connection . setRequestMethod ( " PUT " ) < nl > connection . addRequestProperty ( " Content - Type " , " application / octet - stream " ) < nl > val out = new OutputStreamWriter ( connection . getOutputStream ) < nl > - val partContents = ( " . " * size ) < nl > + val partContents = " . " * size < nl > out . write ( partContents ) < nl > out . close ( ) < nl > - val responseCode = connection . getResponseCode ( ) < nl > + val responseCode = connection . getResponseCode < nl > responseCode should = = = ( 200 ) < nl > partContents < nl > } < nl > @ @ - 92 , 8 + 92 , 8 @ @ class FilesServiceSpec < nl > this . expectedContents = Some ( parts . foldLeft ( " " ) { ( acc , p ) ⇒ acc + p } ) < nl > } < nl > < nl > - def e3 ( ) = { < nl > - whenReady ( service . handleCommitFileUpload ( uploadKey , " The . File " ) ) { resp ⇒ < nl > + def completeUpload ( ) = { < nl > + whenReady ( service . handleCommitFileUpload ( uploadKey , " / etc / passwd / The . Fil ë % 00 – ' Fear and Loathing in Las Vegas ' " ) ) { resp ⇒ < nl > resp should matchPattern { < nl > case Ok ( ResponseCommitFileUpload ( _ ) ) ⇒ < nl > } < nl > @ @ - 102 , 7 + 102 , 7 @ @ class FilesServiceSpec < nl > } < nl > } < nl > < nl > - def e4 ( ) = { < nl > + def generateValidDownloadUrls ( ) = { < nl > val urlStr = whenReady ( service . handleGetFileUrl ( fileLocation . get ) ) { resp ⇒ < nl > resp should matchPattern { < nl > case Ok ( ResponseGetFileUrl ( _ , _ ) ) ⇒ < nl > @ @ - 111 , 7 + 111 , 10 @ @ class FilesServiceSpec < nl > resp . toOption . get . url < nl > } < nl > < nl > - urlStr should include ( " The . File ? " ) < nl > + urlStr should include ( " The . Fil % C3 % AB % 00 % 20 % E2 % 80 % 93 % 20 ' Fear % 20and % 20Loathing % 20in % 20Las % 20Vegas ' ? " ) < nl > + urlStr shouldNot include ( " / / The " ) < nl > + urlStr shouldNot include ( " etc " ) < nl > + urlStr shouldNot include ( " passwd " ) < nl > < nl > val url = new URL ( urlStr ) < nl > val connection = url . openConnection ( ) . asInstanceOf [ HttpURLConnection ] < nl > @ @ - 122 , 7 + 125 , 7 @ @ class FilesServiceSpec < nl > IOUtils . toString ( connection . getInputStream ) should = = = ( expectedContents . get ) < nl > } < nl > < nl > - def e5 ( ) = { < nl > + def validUploadPartUrlsDuplRequest ( ) = { < nl > val partSize = 1024 * 32 < nl > whenReady ( service . handleGetFileUploadPartUrl ( 1 , partSize , uploadKey ) ) { resp ⇒ < nl > resp should matchPattern { < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala < nl > index b426652 . . c3b5c1d 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala < nl > @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . api . rpc . service < nl > < nl > import java . nio . file . { Files , Paths } < nl > < nl > - import im . actor . server . file . { FileStorageExtension , ImageUtils } < nl > + import im . actor . server . file . { UnsafeFileName , FileStorageExtension , ImageUtils } < nl > < nl > import scala . concurrent . Await < nl > import scala . concurrent . duration . _ < nl > @ @ - 69 , 7 + 69 , 7 @ @ final class ProfileServiceSpec < nl > implicit val clientData = ClientData ( authId , sessionId , Some ( AuthData ( user . id , authSid ) ) ) < nl > < nl > def e1 ( ) = { < nl > - val validOrigFileModel = Await . result ( db . run ( fsAdapter . uploadFile ( " avatar . jpg " , validOrigFile ) ) , 5 . seconds ) < nl > + val validOrigFileModel = Await . result ( db . run ( fsAdapter . uploadFile ( UnsafeFileName ( " / etc / passwd / avatar . jpg " ) , validOrigFile ) ) , 5 . seconds ) < nl > < nl > whenReady ( service . handleEditAvatar ( ApiFileLocation ( validOrigFileModel . fileId , validOrigFileModel . accessHash ) ) ) { resp ⇒ < nl > resp should matchPattern { < nl > @ @ - 103 , 7 + 103 , 7 @ @ final class ProfileServiceSpec < nl > } < nl > < nl > def e2 ( ) = { < nl > - val invalidImageFileModel = Await . result ( db . run ( fsAdapter . uploadFile ( " invalid - avatar . jpg " , invalidImageFile ) ) , 5 . seconds ) < nl > + val invalidImageFileModel = Await . result ( db . run ( fsAdapter . uploadFile ( UnsafeFileName ( " invalid - avatar . jpg " ) , invalidImageFile ) ) , 5 . seconds ) < nl > < nl > whenReady ( service . handleEditAvatar ( ApiFileLocation ( invalidImageFileModel . fileId , invalidImageFileModel . accessHash ) ) ) { resp ⇒ < nl > resp should matchPattern { < nl > @ @ - 113 , 7 + 113 , 7 @ @ final class ProfileServiceSpec < nl > } < nl > < nl > def e3 ( ) = { < nl > - val tooLargeImageFileModel = Await . result ( db . run ( fsAdapter . uploadFile ( " too - large - avatar . jpg " , tooLargeImageFile ) ) , 30 . seconds ) / / WTF ? ? ? < nl > + val tooLargeImageFileModel = Await . result ( db . run ( fsAdapter . uploadFile ( UnsafeFileName ( " too - large - avatar . jpg " ) , tooLargeImageFile ) ) , 30 . seconds ) / / WTF ? ? ? < nl > < nl > whenReady ( service . handleEditAvatar ( ApiFileLocation ( tooLargeImageFileModel . fileId , tooLargeImageFileModel . accessHash ) ) ) { resp ⇒ < nl > resp should matchPattern { < nl > diff - - git a / actor - server / build . sbt b / actor - server / build . sbt < nl > index c793a52 . . dc1dba5 100644 < nl > - - - a / actor - server / build . sbt < nl > + + + b / actor - server / build . sbt < nl > @ @ - 19 , 6 + 19 , 7 @ @ daemonGroup in Linux : = ( daemonUser in Linux ) . value < nl > < nl > bashScriptExtraDefines + = " " " addJava " - Dactor . home = $ { app _ home } / . . " " " " < nl > bashScriptExtraDefines + = " " " addJava " - Dlogback . configurationFile = $ { app _ home } / . . / conf / logback . xml " " " " < nl > + bashScriptExtraDefines + = " " " addJava " - Dfile . encoding = UTF - 8 " " " " < nl > bashScriptExtraDefines + = " " " addJava - javaagent : $ { app _ home } / . . / lib / org . aspectj . aspectjweaver - 1 . 8 . 7 . jar " " " < nl > bashScriptExtraDefines + = " " " addJava - XX : + HeapDumpOnOutOfMemoryError - XX : HeapDumpPath = $ { app _ home } / . . / logs / dump - ` date ` . hprof " " " < nl > < nl > diff - - git a / actor - server / notes / 1 . 0 . 86 . markdown b / actor - server / notes / 1 . 0 . 86 . markdown < nl > index 441e02c . . cfb59c2 100644 < nl > - - - a / actor - server / notes / 1 . 0 . 86 . markdown < nl > + + + b / actor - server / notes / 1 . 0 . 86 . markdown < nl > @ @ - 2 , 4 + 2 , 5 @ @ Bug fixes < nl > = = = < nl > < nl > * Await ActorSystem termination < nl > - * wrap google push send into blocking { } < nl > \ No newline at end of file < nl > + * Wrap google push send into blocking { } < nl > + * Major fixes in file storage including security one - path traversal < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - commons - api / src / main / actor - api / actor . json b / actor - commons - api / src / main / actor - api / actor . json < nl > index 5bb19d5 . . 3d620d8 100644 < nl > - - - a / actor - commons - api / src / main / actor - api / actor . json < nl > + + + b / actor - commons - api / src / main / actor - api / actor . json < nl > @ @ - 703 , 26 + 703 , 6 @ @ < nl > } < nl > } , < nl > { < nl > - " type " : " enum " , < nl > - " content " : { < nl > - " name " : " UserState " , < nl > - " values " : [ < nl > - { < nl > - " name " : " Registered " , < nl > - " id " : 1 < nl > - } , < nl > - { < nl > - " name " : " Email " , < nl > - " id " : 2 < nl > - } , < nl > - { < nl > - " name " : " Deleted " , < nl > - " id " : 3 < nl > - } < nl > - ] < nl > - } < nl > - } , < nl > - { < nl > " type " : " struct " , < nl > " content " : { < nl > " name " : " Phone " , < nl > @ @ - 973 , 14 + 953 , 6 @ @ < nl > } , < nl > " id " : 10 , < nl > " name " : " emails " < nl > - } , < nl > - { < nl > - " type " : { < nl > - " type " : " enum " , < nl > - " childType " : " UserState " < nl > - } , < nl > - " id " : 11 , < nl > - " name " : " userState " < nl > } < nl > ] < nl > } < nl > @ @ - 1467 , 43 + 1439 , 6 @ @ < nl > } < nl > ] < nl > } < nl > - } , < nl > - { < nl > - " type " : " update " , < nl > - " content " : { < nl > - " name " : " UserStateChanged " , < nl > - " header " : 100 , < nl > - " doc " : [ < nl > - " Update about user state changed " , < nl > - { < nl > - " type " : " reference " , < nl > - " argument " : " uid " , < nl > - " category " : " full " , < nl > - " description " : " user ' s id " < nl > - } , < nl > - { < nl > - " type " : " reference " , < nl > - " argument " : " state " , < nl > - " category " : " full " , < nl > - " description " : " new user state " < nl > - } < nl > - ] , < nl > - " attributes " : [ < nl > - { < nl > - " type " : " int32 " , < nl > - " id " : 1 , < nl > - " name " : " uid " < nl > - } , < nl > - { < nl > - " type " : { < nl > - " type " : " enum " , < nl > - " childType " : " UserState " < nl > - } , < nl > - " id " : 2 , < nl > - " name " : " state " < nl > - } < nl > - ] < nl > - } < nl > } < nl > ] < nl > } , < nl > @ @ - 2226 , 6 + 2161 , 14 @ @ < nl > } , < nl > " id " : 3 , < nl > " name " : " date " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " alias " , < nl > + " childType " : " randomId " < nl > + } , < nl > + " id " : 4 , < nl > + " name " : " rid " < nl > } < nl > ] < nl > } < nl > @ @ - 5681 , 6 + 5624 , 11 @ @ < nl > " type " : " bytes " , < nl > " id " : 1 , < nl > " name " : " uploadKey " < nl > + } , < nl > + { < nl > + " type " : " string " , < nl > + " id " : 2 , < nl > + " name " : " fileName " < nl > } < nl > ] < nl > } < nl > diff - - git a / actor - models / src / main / scala / im / actor / server / models / FileLocation . scala b / actor - models / src / main / scala / im / actor / server / models / FileLocation . scala < nl > index 1a56fb8 . . 3323a89 100644 < nl > - - - a / actor - models / src / main / scala / im / actor / server / models / FileLocation . scala < nl > + + + b / actor - models / src / main / scala / im / actor / server / models / FileLocation . scala < nl > @ @ - 4 , 7 + 4 , 7 @ @ package im . actor . server . models < nl > case class FileLocation ( fileId : Long , accessHash : Long ) < nl > < nl > @ SerialVersionUID ( 1L ) < nl > - case class File ( id : Long , accessSalt : String , s3UploadKey : String , isUploaded : Boolean , size : Long ) < nl > + case class File ( id : Long , accessSalt : String , s3UploadKey : String , isUploaded : Boolean , size : Long , name : String ) < nl > < nl > @ SerialVersionUID ( 1L ) < nl > case class FilePart ( fileId : Long , number : Int , size : Int , s3UploadKey : String ) < nl > diff - - git a / actor - persist / src / main / resources / sql / migration / V1505101940 _ _ AddFileNameToFiles . sql b / actor - persist / src / main / resources / sql / migration / V1505101940 _ _ AddFileNameToFiles . sql < nl > new file mode 100644 < nl > index 0000000 . . 9f681e1 < nl > - - - / dev / null < nl > + + + b / actor - persist / src / main / resources / sql / migration / V1505101940 _ _ AddFileNameToFiles . sql < nl > @ @ - 0 , 0 + 1 @ @ < nl > + ALTER TABLE files ADD COLUMN name text NOT NULL default ' ' ; < nl > \ No newline at end of file < nl > diff - - git a / actor - persist / src / main / scala / im / actor / server / persist / File . scala b / actor - persist / src / main / scala / im / actor / server / persist / File . scala < nl > index fd56bdd . . b8f2e15 100644 < nl > - - - a / actor - persist / src / main / scala / im / actor / server / persist / File . scala < nl > + + + b / actor - persist / src / main / scala / im / actor / server / persist / File . scala < nl > @ @ - 17 , 14 + 17 , 16 @ @ class FileTable ( tag : Tag ) extends Table [ models . File ] ( tag , " files " ) { < nl > < nl > def size = column [ Long ] ( " size " ) < nl > < nl > - def * = ( id , accessSalt , s3UploadKey , isUploaded , size ) < > ( models . File . tupled , models . File . unapply ) < nl > + def name = column [ String ] ( " name " ) < nl > + < nl > + def * = ( id , accessSalt , s3UploadKey , isUploaded , size , name ) < > ( models . File . tupled , models . File . unapply ) < nl > } < nl > < nl > object File { < nl > val files = TableQuery [ FileTable ] < nl > < nl > def create ( id : Long , accessSalt : String , s3UploadKey : String ) : FixedSqlAction [ Int , NoStream , Write ] = < nl > - files + = models . File ( id , accessSalt , s3UploadKey , false , 0 ) < nl > + files + = models . File ( id , accessSalt , s3UploadKey , false , 0 , " " ) < nl > < nl > def find ( id : Long ) : SqlAction [ Option [ models . File ] , NoStream , Read ] = < nl > files . filter ( _ . id = = = id ) . result . headOption < nl > @ @ - 32 , 6 + 34 , 6 @ @ object File { < nl > def findByKey ( key : String ) = < nl > files . filter ( _ . s3UploadKey = = = key ) . result . headOption < nl > < nl > - def setUploaded ( id : Long , size : Long ) = < nl > - files . filter ( _ . id = = = id ) . map ( f ⇒ ( f . isUploaded , f . size ) ) . update ( ( true , size ) ) < nl > + def setUploaded ( id : Long , size : Long , name : String ) = < nl > + files . filter ( _ . id = = = id ) . map ( f ⇒ ( f . isUploaded , f . size , f . name ) ) . update ( ( true , size , name ) ) < nl > } < nl > diff - - git a / actor - push / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala b / actor - push / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > index 673c8e3 . . 56d1599 100644 < nl > - - - a / actor - push / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > + + + b / actor - push / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > @ @ - 330 , 7 + 330 , 7 @ @ object SeqUpdatesManager { < nl > case api . groups . UpdateGroupUserAdded ( groupId , userId , inviterUserId , _ , _ ) ⇒ ( Set ( userId , inviterUserId ) , Set ( groupId ) ) < nl > case api . groups . UpdateGroupUserKick ( groupId , userId , kickerUserId , _ , _ ) ⇒ ( Set ( userId , kickerUserId ) , Set ( groupId ) ) < nl > case api . groups . UpdateGroupUserLeave ( groupId , userId , _ , _ ) ⇒ ( Set ( userId ) , Set ( groupId ) ) < nl > - case api . contacts . UpdateContactRegistered ( userId , _ , _ ) ⇒ singleUser ( userId ) < nl > + case api . contacts . UpdateContactRegistered ( userId , _ , _ , _ ) ⇒ singleUser ( userId ) < nl > case api . contacts . UpdateContactsAdded ( userIds ) ⇒ users ( userIds ) < nl > case api . contacts . UpdateContactsRemoved ( userIds ) ⇒ users ( userIds ) < nl > case api . users . UpdateEmailMoved ( _ , userId ) ⇒ singleUser ( userId ) < nl > @ @ - 345 , 7 + 345 , 6 @ @ object SeqUpdatesManager { < nl > case api . users . UpdateUserNameChanged ( userId , _ ) ⇒ singleUser ( userId ) < nl > case api . users . UpdateUserPhoneAdded ( userId , _ ) ⇒ singleUser ( userId ) < nl > case api . users . UpdateUserPhoneRemoved ( userId , _ ) ⇒ singleUser ( userId ) < nl > - case api . users . UpdateUserStateChanged ( userId , _ ) ⇒ singleUser ( userId ) < nl > case api . weak . UpdateGroupOnline ( groupId , _ ) ⇒ singleGroup ( groupId ) < nl > case api . weak . UpdateTyping ( peer , userId , _ ) ⇒ < nl > val refs = peerRefs ( peer ) < nl > diff - - git a / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > index f56df76 . . 7a669f4 100644 < nl > - - - a / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > + + + b / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > @ @ - 341 , 7 + 341 , 9 @ @ class AuthServiceImpl ( activationContext : ActivationContext ) ( < nl > / / TODO : use service - level logging < nl > actorSystem . log . debug ( s " Unregistered $ { phoneNumber } is in contacts of users : $ contacts " ) < nl > < nl > - val update = UpdateContactRegistered ( user . id , isSilent , date . getMillis ) < nl > + val randomId = ThreadLocalRandom . current ( ) . nextLong ( ) < nl > + val update = UpdateContactRegistered ( user . id , isSilent , date . getMillis , randomId ) < nl > + / / TODO : write service message if isSilent = = true < nl > < nl > / / FIXME : # perf broadcast updates using broadcastUpdateAll to serialize update once < nl > val actions = contacts map { contact ⇒ < nl > diff - - git a / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / ServiceMessages . scala b / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / ServiceMessages . scala < nl > new file mode 100644 < nl > index 0000000 . . 7ef285c < nl > - - - / dev / null < nl > + + + b / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / ServiceMessages . scala < nl > @ @ - 0 , 0 + 1 , 6 @ @ < nl > + package im . actor . server . api . rpc . service . auth < nl > + < nl > + object ServiceMessages { < nl > + < nl > + } < nl > + < nl > diff - - git a / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala b / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala < nl > index fe96475 . . 629b0d3 100644 < nl > - - - a / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala < nl > + + + b / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala < nl > @ @ - 40 , 7 + 40 , 7 @ @ class FilesServiceImpl ( bucketName : String ) ( < nl > persist . File . find ( location . fileId ) flatMap { < nl > case Some ( file ) ⇒ < nl > if ( ACLUtils . fileAccessHash ( file . id , file . accessSalt ) = = location . accessHash ) { < nl > - val presignedRequest = new GeneratePresignedUrlRequest ( bucketName , FileUtils . s3Key ( file . id ) ) < nl > + val presignedRequest = new GeneratePresignedUrlRequest ( bucketName , FileUtils . s3Key ( file . id , file . name ) ) < nl > val timeout = 1 . day < nl > < nl > val expiration = new java . util . Date < nl > @ @ - 115 , 7 + 115 , 7 @ @ class FilesServiceImpl ( bucketName : String ) ( < nl > db . run ( toDBIOAction ( authorizedAction ) ) < nl > } < nl > < nl > - override def jhandleCommitFileUpload ( uploadKey : Array [ Byte ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseCommitFileUpload ] ] = { < nl > + override def jhandleCommitFileUpload ( uploadKey : Array [ Byte ] , fileName : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseCommitFileUpload ] ] = { < nl > val authorizedAction = requireAuth ( clientData ) . map { client ⇒ < nl > val key = new String ( uploadKey ) < nl > < nl > @ @ - 131 , 11 + 131 , 11 @ @ class FilesServiceImpl ( bucketName : String ) ( < nl > concatFile ← DBIO . from ( concatFiles ( tempDir , parts map ( _ . s3UploadKey ) ) ) < nl > fileLengthF = getFileLength ( concatFile ) < nl > upload = FutureTransfer . listenFor { < nl > - transferManager . upload ( bucketName , s " file _ $ { file . id } " , concatFile ) < nl > + transferManager . upload ( bucketName , FileUtils . s3Key ( file . id , fileName ) , concatFile ) < nl > } map ( _ . waitForCompletion ( ) ) < nl > _ ← DBIO . from ( upload ) < nl > _ ← DBIO . from ( deleteDir ( tempDir ) ) < nl > - _ ← DBIO . from ( fileLengthF ) flatMap ( size ⇒ persist . File . setUploaded ( file . id , size ) ) < nl > + _ ← DBIO . from ( fileLengthF ) flatMap ( size ⇒ persist . File . setUploaded ( file . id , size , fileName ) ) < nl > } yield { < nl > Ok ( ResponseCommitFileUpload ( FileLocation ( file . id , ACLUtils . fileAccessHash ( file . id , file . accessSalt ) ) ) ) < nl > } < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AvatarsSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AvatarsSpec . scala < nl > index 988ed61 . . f75eabd 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AvatarsSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AvatarsSpec . scala < nl > @ @ - 69 , 7 + 69 , 7 @ @ class AvatarsSpec extends BaseServiceSuite { < nl > implicit val clientData = ClientData ( authId , sessionId , Some ( user . id ) ) < nl > < nl > def e1 ( ) = { < nl > - val validOrigFileModel = Await . result ( db . run ( uploadFile ( bucketName , validOrigFile ) ) , 5 . seconds ) < nl > + val validOrigFileModel = Await . result ( db . run ( uploadFile ( bucketName , " avatar . jpg " , validOrigFile ) ) , 5 . seconds ) < nl > < nl > whenReady ( service . handleEditAvatar ( FileLocation ( validOrigFileModel . fileId , validOrigFileModel . accessHash ) ) ) { resp ⇒ < nl > resp should matchPattern { < nl > @ @ - 81 , 21 + 81 , 21 @ @ class AvatarsSpec extends BaseServiceSuite { < nl > r . avatar . fullImage . get . width should = = = ( validOrigDimensions . _ 1 ) < nl > r . avatar . fullImage . get . height should = = = ( validOrigDimensions . _ 2 ) < nl > r . avatar . fullImage . get . fileSize should = = = ( validOrigBytes . length ) < nl > - whenReady ( db . run ( download ( bucketName , r . avatar . fullImage . get . fileLocation . fileId ) ) ) { file ⇒ < nl > + whenReady ( db . run ( download ( bucketName , r . avatar . fullImage . get . fileLocation . fileId , " avatar . jpg " ) ) ) { file ⇒ < nl > org . apache . commons . io . FileUtils . readFileToByteArray ( file ) should = = = ( validOrigBytes ) < nl > } < nl > < nl > r . avatar . smallImage . get . width should = = = ( validSmallDimensions . _ 1 ) < nl > r . avatar . smallImage . get . height should = = = ( validSmallDimensions . _ 2 ) < nl > r . avatar . smallImage . get . fileSize should = = = ( validSmallBytes . length ) < nl > - whenReady ( db . run ( download ( bucketName , r . avatar . smallImage . get . fileLocation . fileId ) ) ) { file ⇒ < nl > + whenReady ( db . run ( download ( bucketName , r . avatar . smallImage . get . fileLocation . fileId , " small - avatar . jpg " ) ) ) { file ⇒ < nl > org . apache . commons . io . FileUtils . readFileToByteArray ( file ) should = = = ( validSmallBytes ) < nl > } < nl > < nl > r . avatar . largeImage . get . width should = = = ( validLargeDimensions . _ 1 ) < nl > r . avatar . largeImage . get . height should = = = ( validLargeDimensions . _ 2 ) < nl > r . avatar . largeImage . get . fileSize should = = = ( validLargeBytes . length ) < nl > - whenReady ( db . run ( download ( bucketName , r . avatar . largeImage . get . fileLocation . fileId ) ) ) { file ⇒ < nl > + whenReady ( db . run ( download ( bucketName , r . avatar . largeImage . get . fileLocation . fileId , " large - avatar . jpg " ) ) ) { file ⇒ < nl > org . apache . commons . io . FileUtils . readFileToByteArray ( file ) should = = = ( validLargeBytes ) < nl > } < nl > < nl > @ @ - 103 , 7 + 103 , 7 @ @ class AvatarsSpec extends BaseServiceSuite { < nl > } < nl > < nl > def e2 ( ) = { < nl > - val invalidImageFileModel = Await . result ( db . run ( uploadFile ( bucketName , invalidImageFile ) ) , 5 . seconds ) < nl > + val invalidImageFileModel = Await . result ( db . run ( uploadFile ( bucketName , " invalid - avatar . jpg " , invalidImageFile ) ) , 5 . seconds ) < nl > < nl > whenReady ( service . handleEditAvatar ( FileLocation ( invalidImageFileModel . fileId , invalidImageFileModel . accessHash ) ) ) { resp ⇒ < nl > resp should matchPattern { < nl > @ @ - 113 , 7 + 113 , 7 @ @ class AvatarsSpec extends BaseServiceSuite { < nl > } < nl > < nl > def e3 ( ) = { < nl > - val tooLargeImageFileModel = Await . result ( db . run ( uploadFile ( bucketName , tooLargeImageFile ) ) , 5 . seconds ) < nl > + val tooLargeImageFileModel = Await . result ( db . run ( uploadFile ( bucketName , " too - large - avatar . jpg " , tooLargeImageFile ) ) , 5 . seconds ) < nl > < nl > whenReady ( service . handleEditAvatar ( FileLocation ( tooLargeImageFileModel . fileId , tooLargeImageFileModel . accessHash ) ) ) { resp ⇒ < nl > resp should matchPattern { < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > index 802ef66 . . 3aff84f 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > @ @ - 107 , 7 + 107 , 7 @ @ class FilesServiceSpec extends BaseServiceSuite { < nl > } < nl > < nl > def e3 ( ) = { < nl > - whenReady ( service . handleCommitFileUpload ( uploadKey ) ) { resp ⇒ < nl > + whenReady ( service . handleCommitFileUpload ( uploadKey , " The . File " ) ) { resp ⇒ < nl > resp should matchPattern { < nl > case Ok ( ResponseCommitFileUpload ( _ ) ) ⇒ < nl > } < nl > @ @ - 125 , 6 + 125 , 8 @ @ class FilesServiceSpec extends BaseServiceSuite { < nl > resp . toOption . get . url < nl > } < nl > < nl > + urlStr should include ( " The . File ? " ) < nl > + < nl > val url = new URL ( urlStr ) < nl > val connection = url . openConnection ( ) . asInstanceOf [ HttpURLConnection ] < nl > connection . setDoOutput ( true ) < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala b / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > index c2d8c92 . . 2bdaa09 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > @ @ - 165 , 7 + 165 , 7 @ @ class SessionSpec extends BaseSessionSpec { < nl > < nl > implicit val clientData = AuthorizedClientData ( authId , sessionId , authResult . asInstanceOf [ RpcOk ] . response . asInstanceOf [ ResponseAuth ] . user . id ) < nl > < nl > - val update = UpdateContactRegistered ( 1 , true , 1L ) < nl > + val update = UpdateContactRegistered ( 1 , true , 1L , 2L ) < nl > Await . result ( db . run ( SeqUpdatesManager . broadcastClientUpdate ( update , None ) ) , 1 . second ) < nl > < nl > expectSeqUpdate ( authId , sessionId ) . update should = = = ( update . toByteArray ) < nl > @ @ - 210 , 7 + 210 , 7 @ @ class SessionSpec extends BaseSessionSpec { < nl > < nl > implicit val clientData = AuthorizedClientData ( authId , sessionId , authResult . asInstanceOf [ RpcOk ] . response . asInstanceOf [ ResponseAuth ] . user . id ) < nl > < nl > - val update = UpdateContactRegistered ( 1 , true , 1L ) < nl > + val update = UpdateContactRegistered ( 1 , true , 1L , 5L ) < nl > Await . result ( db . run ( WeakUpdatesManager . broadcastUserWeakUpdate ( clientData . userId , update ) ) , 1 . second ) < nl > < nl > expectWeakUpdate ( authId , sessionId ) . update should = = = ( update . toByteArray ) < nl > diff - - git a / actor - utils / src / main / scala / im / actor / server / util / AvatarUtils . scala b / actor - utils / src / main / scala / im / actor / server / util / AvatarUtils . scala < nl > index 887e324 . . 3a3b584 100644 < nl > - - - a / actor - utils / src / main / scala / im / actor / server / util / AvatarUtils . scala < nl > + + + b / actor - utils / src / main / scala / im / actor / server / util / AvatarUtils . scala < nl > @ @ - 70 , 6 + 70 , 9 @ @ object AvatarUtils { < nl > ec : ExecutionContext , < nl > system : ActorSystem < nl > ) = { < nl > + val smallFileName = " small - avatar . jpg " < nl > + val largeFileName = " large - avatar . jpg " < nl > + < nl > persist . File . find ( fullFileId ) flatMap { < nl > case Some ( fullFileModel ) ⇒ < nl > downloadFile ( bucketName , fullFileId ) flatMap { < nl > @ @ - 81 , 14 + 84 , 14 @ @ object AvatarUtils { < nl > smallAimg ← DBIO . from ( resizeToSmall ( fullAimg ) ) < nl > largeAimg ← DBIO . from ( resizeToLarge ( fullAimg ) ) < nl > < nl > - smallFile = fullFile . getParentFile . toPath . resolve ( " small . jpg " ) . toFile < nl > - largeFile = fullFile . getParentFile . toPath . resolve ( " large . jpg " ) . toFile < nl > + smallFile = fullFile . getParentFile . toPath . resolve ( smallFileName ) . toFile < nl > + largeFile = fullFile . getParentFile . toPath . resolve ( largeFileName ) . toFile < nl > < nl > _ ← DBIO . from ( smallAimg . writer ( Format . JPEG ) . write ( smallFile ) ) < nl > _ ← DBIO . from ( largeAimg . writer ( Format . JPEG ) . write ( largeFile ) ) < nl > < nl > - smallFileLocation ← uploadFile ( bucketName , smallFile ) < nl > - largeFileLocation ← uploadFile ( bucketName , largeFile ) < nl > + smallFileLocation ← uploadFile ( bucketName , smallFileName , smallFile ) < nl > + largeFileLocation ← uploadFile ( bucketName , largeFileName , largeFile ) < nl > } yield { < nl > / / TODO : # perf calculate file sizes efficiently < nl > < nl > diff - - git a / actor - utils / src / main / scala / im / actor / server / util / FileUtils . scala b / actor - utils / src / main / scala / im / actor / server / util / FileUtils . scala < nl > index 1827a92 . . 20a8fe2 100644 < nl > - - - a / actor - utils / src / main / scala / im / actor / server / util / FileUtils . scala < nl > + + + b / actor - utils / src / main / scala / im / actor / server / util / FileUtils . scala < nl > @ @ - 26 , 20 + 26 , 20 @ @ object FileUtils { < nl > ) : dbio . DBIOAction [ Option [ File ] , NoStream , Read with Effect ] = { < nl > persist . File . find ( id ) flatMap { < nl > case Some ( file ) ⇒ < nl > - download ( bucketName , file . id ) map ( Some ( _ ) ) < nl > + download ( bucketName , file . id , file . name ) map ( Some ( _ ) ) < nl > case None ⇒ DBIO . successful ( None ) < nl > } < nl > } < nl > < nl > - def download ( bucketName : String , id : Long ) ( implicit transferManager : TransferManager , ec : ExecutionContext ) = { < nl > + def download ( bucketName : String , id : Long , name : String ) ( implicit transferManager : TransferManager , ec : ExecutionContext ) = { < nl > for { < nl > dirFile ← DBIO . from ( createTempDir ( ) ) < nl > file = dirFile . toPath . resolve ( " file " ) . toFile < nl > - _ ← DBIO . from ( FutureTransfer . listenFor ( transferManager . download ( bucketName , s3Key ( id ) , file ) ) map ( _ . waitForCompletion ( ) ) ) < nl > + _ ← DBIO . from ( FutureTransfer . listenFor ( transferManager . download ( bucketName , s3Key ( id , name ) , file ) ) map ( _ . waitForCompletion ( ) ) ) < nl > } yield file < nl > } < nl > < nl > - def uploadFile ( bucketName : String , file : File ) ( < nl > + def uploadFile ( bucketName : String , name : String , file : File ) ( < nl > implicit < nl > transferManager : TransferManager , < nl > ec : ExecutionContext , < nl > @ @ - 51 , 21 + 51 , 27 @ @ object FileUtils { < nl > val sizeF = getFileLength ( file ) < nl > < nl > for { < nl > - _ ← persist . File . create ( id , accessSalt , s3Key ( id ) ) < nl > - _ ← DBIO . from ( upload ( bucketName , id , file ) ) < nl > - _ ← DBIO . from ( sizeF ) flatMap ( s ⇒ persist . File . setUploaded ( id , s ) ) < nl > + _ ← persist . File . create ( id , accessSalt , s3Key ( id , name ) ) < nl > + _ ← DBIO . from ( upload ( bucketName , id , name , file ) ) < nl > + _ ← DBIO . from ( sizeF ) flatMap ( s ⇒ persist . File . setUploaded ( id , s , name ) ) < nl > } yield FileLocation ( id , ACLUtils . fileAccessHash ( id , accessSalt ) ) < nl > } < nl > < nl > - def upload ( bucketName : String , id : Long , file : File ) ( < nl > + def upload ( bucketName : String , id : Long , name : String , file : File ) ( < nl > implicit < nl > transferManager : TransferManager , < nl > ec : ExecutionContext < nl > ) : Future [ UploadResult ] = { < nl > - FutureTransfer . listenFor ( transferManager . upload ( bucketName , s3Key ( id ) , file ) ) map ( _ . waitForUploadResult ( ) ) < nl > + FutureTransfer . listenFor ( transferManager . upload ( bucketName , s3Key ( id , name ) , file ) ) map ( _ . waitForUploadResult ( ) ) < nl > } < nl > < nl > - def s3Key ( id : Long ) : String = s " file _ $ { id } " < nl > + def s3Key ( id : Long , name : String ) : String = { < nl > + if ( name . isEmpty ) { < nl > + s " file _ $ { id } " < nl > + } else { < nl > + s " file _ $ { id } / $ { name } " < nl > + } < nl > + } < nl > < nl > / / FIXME : # perf pinned dispatcher < nl > def createTempDir ( ) ( implicit ec : ExecutionContext ) : Future [ File ] = { < nl > diff - - git a / actor - utils / src / main / scala / im / actor / server / util / UserUtils . scala b / actor - utils / src / main / scala / im / actor / server / util / UserUtils . scala < nl > index 5ea5c84 . . 5826865 100644 < nl > - - - a / actor - utils / src / main / scala / im / actor / server / util / UserUtils . scala < nl > + + + b / actor - utils / src / main / scala / im / actor / server / util / UserUtils . scala < nl > @ @ - 34 , 7 + 34 , 6 @ @ object UserUtils { < nl > phone = phones . head . number , < nl > phones = phones map ( _ . id ) toVector , < nl > emails = emails map ( _ . id ) toVector , < nl > - userState = users . UserState . apply ( u . state . toInt ) , < nl > avatar = adOpt flatMap ( AvatarUtils . avatar ) < nl > ) < nl > } < nl > @ @ - 61 , 7 + 60 , 6 @ @ object UserUtils { < nl > phone = phones . head . number , < nl > phones = phones map ( _ . id ) toVector , < nl > emails = emails map ( _ . id ) toVector , < nl > - userState = users . UserState . apply ( u . state . toInt ) , < nl > avatar = adOpt flatMap ( AvatarUtils . avatar ) < nl > ) < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala 
 index 75af247 . . 5d35c2c 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala 
 @ @ - 6 , 7 + 6 , 7 @ @ import akka . util . ByteString 
 import im . actor . bots . BotMessages . _ 
 import im . actor . concurrent . FutureResultCats 
 import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } 
 - import im . actor . server . file . { FileStorageAdapter , FileStorageExtension , FileUtils } 
 + import im . actor . server . file . { UnsafeFileName , FileStorageAdapter , FileStorageExtension , FileUtils } 
 import im . actor . server . sticker . { Sticker , StickerImage } 
 import im . actor . server . stickers . { StickerErrors , StickersExtension } 
 
 @ @ - 142 , 7 + 142 , 7 @ @ private [ bot ] final class StickersBotService ( _ system : ActorSystem ) extends BotSer 
 private def uploadSticker ( name : String , bytes : Array [ Byte ] , w : Int , h : Int ) : Future [ Option [ StickerImage ] ] = 
 Try ( for { 
 ( path , size ) ← FileUtils . writeBytes ( ByteString ( bytes ) ) 
 - fileLocation ← fsAdapter . uploadFileF ( name , path . toFile ) 
 + fileLocation ← fsAdapter . uploadFileF ( UnsafeFileName ( name ) , path . toFile ) 
 } yield Some ( StickerImage ( fileLocation , w , h , size ) ) ) . toOption getOrElse Future . successful ( None ) 
 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala 
 index 77a66e4 . . 18616d2 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala 
 @ @ - 118 , 8 + 118 , 8 @ @ object ImageUtils { 
 _ ← Future . fromTry ( Try ( smallAimg . toImage . forWriter ( smallDesc . writer ) . write ( smallFile ) ) ) 
 _ ← Future . fromTry ( Try ( largeAimg . toImage . forWriter ( largeDesc . writer ) . write ( largeFile ) ) ) 
 
 - smallFileLocation ← fsAdapter . uploadFileF ( smallDesc . name , smallFile ) 
 - largeFileLocation ← fsAdapter . uploadFileF ( largeDesc . name , largeFile ) 
 + smallFileLocation ← fsAdapter . uploadFileF ( UnsafeFileName ( smallDesc . name ) , smallFile ) 
 + largeFileLocation ← fsAdapter . uploadFileF ( UnsafeFileName ( largeDesc . name ) , largeFile ) 
 } yield { 
 / / TODO : # perf calculate file sizes efficiently 
 
 diff - - git a / actor - server / actor - enrich / src / main / scala / im / actor / server / enrich / RichMessageWorker . scala b / actor - server / actor - enrich / src / main / scala / im / actor / server / enrich / RichMessageWorker . scala 
 index 01fff6a . . ad2f6e3 100644 
 - - - a / actor - server / actor - enrich / src / main / scala / im / actor / server / enrich / RichMessageWorker . scala 
 + + + b / actor - server / actor - enrich / src / main / scala / im / actor / server / enrich / RichMessageWorker . scala 
 @ @ - 11 , 7 + 11 , 7 @ @ import com . sksamuel . scrimage . nio . JpegWriter 
 import im . actor . api . rpc . files . ApiFastThumb 
 import im . actor . api . rpc . messaging . _ 
 import im . actor . server . db . DbExtension 
 - import im . actor . server . file . { FileStorageAdapter , FileStorageExtension , FileUtils , ImageUtils } 
 + import im . actor . server . file . _ 
 import im . actor . server . pubsub . { PeerMessage , PubSubExtension } 
 import im . actor . util . log . AnyRefLogSource 
 import org . joda . time . DateTime 
 @ @ - 94 , 7 + 94 , 7 @ @ final class RichMessageWorker ( config : RichMessageConfig ) ( implicit materializer : 
 db . run { 
 for { 
 ( file , fileSize ) ← DBIO . from ( FileUtils . writeBytes ( imageBytes ) ) 
 - location ← fsAdapter . uploadFile ( fullName , file . toFile ) 
 + location ← fsAdapter . uploadFile ( UnsafeFileName ( fullName ) , file . toFile ) 
 thumb ← DBIO . from ( ImageUtils . scaleTo ( image , 90 ) ) 
 thumbBytes = thumb . toImage . forWriter ( JpegWriter ( ) ) . bytes 
 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala 
 index 2cb6fa5 . . dba71a2 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileStorageAdapter . scala 
 @ @ - 13 , 17 + 13 , 21 @ @ object FileStorageAdapter { 
 
 trait FileStorageAdapter extends UploadActions with DownloadActions with UploadKeyParsing 
 
 + final case class UnsafeFileName ( fileName : String ) { 
 + lazy val safe : String = new File ( fileName ) . toPath . normalize ( ) . getFileName . toString 
 + } 
 + 
 private [ file ] trait UploadActions { 
 
 def getFileUploadPartUrl ( fileId : Long , partNumber : Int ) : Future [ ( UploadKey , String ) ] 
 
 def getFileUploadUrl ( fileId : Long ) : Future [ ( UploadKey , String ) ] 
 
 - def completeFileUpload ( fileId : Long , fieSize : Long , fileName : String , partNames : Seq [ String ] ) : Future [ Unit ] 
 + def completeFileUpload ( fileId : Long , fieSize : Long , fileName : UnsafeFileName , partNames : Seq [ String ] ) : Future [ Unit ] 
 
 - def uploadFile ( name : String , file : File ) : DBIO [ FileLocation ] 
 + def uploadFile ( name : UnsafeFileName , file : File ) : DBIO [ FileLocation ] 
 
 - def uploadFileF ( name : String , file : File ) : Future [ FileLocation ] 
 + def uploadFileF ( name : UnsafeFileName , file : File ) : Future [ FileLocation ] 
 } 
 
 private [ file ] trait UploadKeyParsing { 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 index d101bbf . . 6b35f4a 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 @ @ - 74 , 7 + 74 , 7 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) 
 
 val baseUri = Uri ( httpConfig . baseUri ) 
 
 - override def uploadFile ( name : String , file : io . File ) : DBIO [ FileLocation ] = { 
 + override def uploadFile ( name : UnsafeFileName , file : io . File ) : DBIO [ FileLocation ] = { 
 val scalaFile = file . toScala 
 val rng = ThreadLocalRandom . current ( ) 
 val id = ACLFiles . randomLong ( rng ) 
 @ @ - 83 , 13 + 83 , 13 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) 
 val size = scalaFile . size 
 for { 
 _ ← persist . FileRepo . create ( id , size , accessSalt , LocalUploadKey . fileKey ( id ) . key ) 
 - _ ← DBIO . from ( createFile ( id , name , scalaFile ) ) 
 - _ ← persist . FileRepo . setUploaded ( id , name ) 
 + _ ← DBIO . from ( createFile ( id , name . safe , scalaFile ) ) 
 + _ ← persist . FileRepo . setUploaded ( id , name . safe ) 
 } yield FileLocation ( id , ACLFiles . fileAccessHash ( id , accessSalt ) ) 
 
 } 
 
 - override def uploadFileF ( name : String , file : io . File ) : Future [ FileLocation ] = db . run ( uploadFile ( name , file ) ) 
 + override def uploadFileF ( name : UnsafeFileName , file : io . File ) : Future [ FileLocation ] = db . run ( uploadFile ( name , file ) ) 
 
 / * * 
 * Generates upload uri similar to : 
 @ @ - 105 , 12 + 105 , 13 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) 
 Future . successful ( LocalUploadKey . fileKey ( fileId ) → signRequest ( HttpMethods . PUT , query , ACLFiles . secretKey ( ) ) . toString ) 
 } 
 
 - override def completeFileUpload ( fileId : Long , fileSize : Long , fileName : String , partNames : Seq [ String ] ) : Future [ Unit ] = { 
 + override def completeFileUpload ( fileId : Long , fileSize : Long , fileName : UnsafeFileName , partNames : Seq [ String ] ) : Future [ Unit ] = { 
 val fileDir = fileDirectory ( fileId ) 
 for { 
 isComplete ← haveAllParts ( fileDir , partNames , fileSize ) 
 - result ← concatFiles ( fileDir , partNames , fileName , fileSize ) 
 + result ← concatFiles ( fileDir , partNames , fileName . safe , fileSize ) 
 _ ← if ( isComplete ) deleteUploadedParts ( fileDir , partNames ) else Future . successful ( ( ) ) 
 + _ ← db . run ( persist . FileRepo . setUploaded ( fileId , fileName . safe ) ) 
 } yield ( ) 
 } 
 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala 
 index 682b71b . . 95ea00f 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala 
 @ @ - 20 , 7 + 20 , 7 @ @ import scala . concurrent . duration . _ 
 import scala . concurrent . forkjoin . ThreadLocalRandom 
 import scala . concurrent . { ExecutionContext , Future } 
 
 - class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { 
 + final class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { 
 
 private implicit val system : ActorSystem = _ system 
 private implicit val ec : ExecutionContext = system . dispatcher 
 @ @ - 33 , 10 + 33 , 10 @ @ class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { 
 val s3Client = new AmazonS3ScalaClient ( awsCredentials ) 
 val transferManager = new TransferManager ( awsCredentials ) 
 
 - override def uploadFile ( name : String , file : File ) : DBIO [ FileLocation ] = 
 + override def uploadFile ( name : UnsafeFileName , file : File ) : DBIO [ FileLocation ] = 
 uploadFile ( bucketName , name , file ) 
 
 - override def uploadFileF ( name : String , file : File ) : Future [ FileLocation ] = 
 + override def uploadFileF ( name : UnsafeFileName , file : File ) : Future [ FileLocation ] = 
 db . run ( uploadFile ( name , file ) ) 
 
 override def downloadFile ( id : Long ) : DBIO [ Option [ File ] ] = { 
 @ @ - 73 , 7 + 73 , 7 @ @ class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { 
 } yield file 
 } 
 
 - private def uploadFile ( bucketName : String , name : String , file : File ) : DBIO [ FileLocation ] = { 
 + private def uploadFile ( bucketName : String , name : UnsafeFileName , file : File ) : DBIO [ FileLocation ] = { 
 val rnd = ThreadLocalRandom . current ( ) 
 val id = rnd . nextLong ( ) 
 val accessSalt = ACLFiles . nextAccessSalt ( rnd ) 
 @ @ - 81 , 9 + 81 , 9 @ @ class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { 
 
 for { 
 size ← DBIO . from ( sizeF ) 
 - _ ← persist . FileRepo . create ( id , size , accessSalt , s3Key ( id , name ) ) 
 - _ ← DBIO . from ( s3Upload ( bucketName , id , name , file ) ) 
 - _ ← persist . FileRepo . setUploaded ( id , name ) 
 + _ ← persist . FileRepo . create ( id , size , accessSalt , s3Key ( id , name . safe ) ) 
 + _ ← DBIO . from ( s3Upload ( bucketName , id , name . safe , file ) ) 
 + _ ← persist . FileRepo . setUploaded ( id , name . safe ) 
 } yield FileLocation ( id , ACLFiles . fileAccessHash ( id , accessSalt ) ) 
 } 
 
 @ @ - 93 , 7 + 93 , 7 @ @ class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { 
 
 override def getFileUploadPartUrl ( fileId : Long , partNumber : Int ) : Future [ ( UploadKey , String ) ] = { 
 val fileKey = uploadKey ( fileId ) 
 - val partKey = S3UploadKey ( s " upload _ part _ $ { fileKey . key } _ $ { partNumber } " ) 
 + val partKey = S3UploadKey ( s " upload _ part _ $ { fileKey . key } _ $ partNumber " ) 
 val request = new GeneratePresignedUrlRequest ( bucketName , partKey . key ) 
 val expiration = new java . util . Date 
 expiration . setTime ( expiration . getTime + 1 . day . toMillis ) 
 @ @ - 115 , 28 + 115 , 29 @ @ class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { 
 for ( url ← s3Client . generatePresignedUrlRequest ( presignedRequest ) ) yield fileKey → url . toString 
 } 
 
 - override def completeFileUpload ( fileId : Long , fileSize : Long , fileName : String , partNames : Seq [ String ] ) : Future [ Unit ] = { 
 + override def completeFileUpload ( fileId : Long , fileSize : Long , fileName : UnsafeFileName , partNames : Seq [ String ] ) : Future [ Unit ] = { 
 for { 
 tempDir ← createTempDir ( ) 
 fk = uploadKey ( fileId ) . key 
 _ ← FutureTransfer . listenFor { 
 - transferManager . downloadDirectory ( bucketName , s " upload _ part _ $ { fk } " , tempDir ) 
 + transferManager . downloadDirectory ( bucketName , s " upload _ part _ $ fk " , tempDir ) 
 } map ( _ . waitForCompletion ( ) ) 
 concatFile ← concatFiles ( tempDir , partNames ) 
 _ ← FutureTransfer . listenFor { 
 - transferManager . upload ( bucketName , s3Key ( fileId , fileName ) , concatFile ) 
 + transferManager . upload ( bucketName , s3Key ( fileId , fileName . safe ) , concatFile ) 
 } map ( _ . waitForCompletion ( ) ) 
 + _ ← db . run ( persist . FileRepo . setUploaded ( fileId , fileName . safe ) ) 
 _ ← deleteDir ( tempDir ) 
 } yield ( ) 
 } 
 
 - private def uploadKey ( fileId : Long ) : S3UploadKey = S3UploadKey ( s " upload _ $ { fileId } " ) 
 + private def uploadKey ( fileId : Long ) : S3UploadKey = S3UploadKey ( s " upload _ $ fileId " ) 
 
 private def s3Key ( id : Long , name : String ) : String = 
 if ( name . isEmpty ) { 
 - s " file _ $ { id } " 
 + s " file _ $ id " 
 } else { 
 - s " file _ $ { id } / $ { name } " 
 + s " file _ $ id / $ name " 
 } 
 
 override def parseKey ( bytes : Array [ Byte ] ) : UploadKey = S3UploadKey . parseFrom ( bytes ) 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala 
 index e362365 . . 83eece5 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala 
 @ @ - 2 , 8 + 2 , 6 @ @ package im . actor . server . api . rpc . service . files 
 
 import akka . actor . _ 
 import cats . data . Xor 
 - import cats . std . all . _ 
 - import cats . syntax . traverse . _ 
 import im . actor . api . rpc . FileHelpers . Errors 
 import im . actor . api . rpc . files . _ 
 import im . actor . api . rpc . _ 
 @ @ - 11 , 11 + 9 , 9 @ @ import im . actor . concurrent . FutureExt 
 import im . actor . server . acl . ACLUtils 
 import im . actor . server . db . DbExtension 
 import im . actor . server . file . _ 
 - import im . actor . server . persist 
 - import im . actor . server . persist . FileRepo 
 + import im . actor . server . persist . { FilePartRepo , FileRepo } 
 import slick . driver . PostgresDriver . api . _ 
 
 - import scala . concurrent . duration . _ 
 import scala . concurrent . { ExecutionContext , Future } 
 
 class FilesServiceImpl ( implicit actorSystem : ActorSystem ) extends FilesService { 
 @ @ - 30 , 7 + 26 , 7 @ @ class FilesServiceImpl ( implicit actorSystem : ActorSystem ) extends FilesService { 
 override def jhandleGetFileUrl ( location : ApiFileLocation , clientData : ClientData ) : Future [ HandlerResult [ ResponseGetFileUrl ] ] = 
 authorized ( clientData ) { client ⇒ 
 ( for { 
 - file ← fromFutureOption ( Errors . LocationInvalid ) ( db . run ( persist . FileRepo . find ( location . fileId ) ) ) 
 + file ← fromFutureOption ( Errors . LocationInvalid ) ( db . run ( FileRepo . find ( location . fileId ) ) ) 
 url ← fromFutureOption ( Errors . LocationInvalid ) ( fsAdapter . getFileDownloadUrl ( file , location . accessHash ) ) 
 } yield ResponseGetFileUrl ( url , FileStorageAdapter . UrlExpirationTimeout . toSeconds . toInt ) ) . value map ( _ . toScalaz ) 
 } 
 @ @ - 61 , 27 + 57 , 26 @ @ class FilesServiceImpl ( implicit actorSystem : ActorSystem ) extends FilesService { 
 ( for { 
 uploadKeyUrl ← fromFuture ( fsAdapter . getFileUploadUrl ( id ) ) 
 ( uploadKey , url ) = uploadKeyUrl 
 - _ ← fromFuture ( db . run ( persist . FileRepo . create ( id , expectedSize . toLong , accessSalt = ACLUtils . nextAccessSalt ( ) , uploadKey . key ) ) ) 
 + _ ← fromFuture ( db . run ( FileRepo . create ( id , expectedSize . toLong , accessSalt = ACLUtils . nextAccessSalt ( ) , uploadKey . key ) ) ) 
 } yield ResponseGetFileUploadUrl ( url , uploadKey . toByteArray ) ) . value map ( _ . toScalaz ) 
 } 
 
 override def jhandleGetFileUploadPartUrl ( partNumber : Int , partSize : Int , keyBytes : Array [ Byte ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseGetFileUploadPartUrl ] ] = 
 authorized ( clientData ) { client ⇒ 
 ( for { 
 - file ← fromFutureOption ( Errors . FileNotFound ) ( db . run ( persist . FileRepo . findByKey ( fsAdapter . parseKey ( keyBytes ) . key ) ) ) 
 + file ← fromFutureOption ( Errors . FileNotFound ) ( db . run ( FileRepo . findByKey ( fsAdapter . parseKey ( keyBytes ) . key ) ) ) 
 partKeyUrl ← fromFuture ( fsAdapter . getFileUploadPartUrl ( file . id , partNumber ) ) 
 ( partKey , url ) = partKeyUrl 
 - _ ← fromFuture ( db . run ( persist . FilePartRepo . createOrUpdate ( file . id , partNumber , partSize , partKey . key ) ) ) 
 + _ ← fromFuture ( db . run ( FilePartRepo . createOrUpdate ( file . id , partNumber , partSize , partKey . key ) ) ) 
 } yield ResponseGetFileUploadPartUrl ( url ) ) . value map ( _ . toScalaz ) 
 } 
 
 override def jhandleCommitFileUpload ( keyBytes : Array [ Byte ] , fileName : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseCommitFileUpload ] ] = 
 authorized ( clientData ) { client ⇒ 
 ( for { 
 - file ← fromFutureOption ( Errors . FileNotFound ) ( db . run ( persist . FileRepo . findByKey ( fsAdapter . parseKey ( keyBytes ) . key ) ) ) 
 - partNames ← fromFuture ( db . run ( persist . FilePartRepo . findByFileId ( file . id ) map ( _ . map ( _ . uploadKey ) ) ) ) 
 - _ ← fromFuture ( fsAdapter . completeFileUpload ( file . id , file . size , fileName , partNames ) ) 
 - _ ← fromFuture ( db . run ( persist . FileRepo . setUploaded ( file . id , fileName ) ) ) 
 + file ← fromFutureOption ( Errors . FileNotFound ) ( db . run ( FileRepo . findByKey ( fsAdapter . parseKey ( keyBytes ) . key ) ) ) 
 + partNames ← fromFuture ( db . run ( FilePartRepo . findByFileId ( file . id ) map ( _ . map ( _ . uploadKey ) ) ) ) 
 + _ ← fromFuture ( fsAdapter . completeFileUpload ( file . id , file . size , UnsafeFileName ( fileName ) , partNames ) ) 
 } yield ResponseCommitFileUpload ( ApiFileLocation ( file . id , ACLUtils . fileAccessHash ( file . id , file . accessSalt ) ) ) ) . value map ( _ . toScalaz ) 
 } 
 } 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala 
 index e1728d4 . . a694065 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala 
 @ @ - 18 , 7 + 18 , 7 @ @ import im . actor . server . api . http . json . JsonFormatters . _ 
 import im . actor . server . api . http . json . { AvatarUrls , _ } 
 import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } 
 import im . actor . server . api . rpc . service . messaging 
 - import im . actor . server . file . { FileStorageExtension , ImageUtils } 
 + import im . actor . server . file . { UnsafeFileName , FileStorageExtension , ImageUtils } 
 import im . actor . server . webhooks . WebhooksExtension 
 import im . actor . server . webhooks . http . routes . OutgoingHooksErrors 
 import play . api . libs . json . _ 
 @ @ - 330 , 7 + 330 , 7 @ @ final class HttpApiFrontendSpec 
 
 def groupInvitesAvatars1 ( ) = { 
 val avatarFile = Paths . get ( getClass . getResource ( " / valid - avatar . jpg " ) . toURI ) . toFile 
 - val fileLocation = whenReady ( db . run ( fsAdapter . uploadFile ( " avatar " , avatarFile ) ) ) ( identity ) 
 + val fileLocation = whenReady ( db . run ( fsAdapter . uploadFile ( UnsafeFileName ( " avatar " ) , avatarFile ) ) ) ( identity ) 
 
 whenReady ( db . run ( ImageUtils . scaleAvatar ( fileLocation . fileId , ThreadLocalRandom . current ( ) ) ) ) { result ⇒ 
 result should matchPattern { case Right ( _ ) ⇒ } 
 @ @ - 371 , 7 + 371 , 7 @ @ final class HttpApiFrontendSpec 
 
 def groupInvitesAvatars2 ( ) = { 
 val avatarFile = Paths . get ( getClass . getResource ( " / valid - avatar . jpg " ) . toURI ) . toFile 
 - val fileLocation = whenReady ( db . run ( fsAdapter . uploadFile ( " avatar " , avatarFile ) ) ) ( identity ) 
 + val fileLocation = whenReady ( db . run ( fsAdapter . uploadFile ( UnsafeFileName ( " avatar " ) , avatarFile ) ) ) ( identity ) 
 whenReady ( db . run ( ImageUtils . scaleAvatar ( fileLocation . fileId , ThreadLocalRandom . current ( ) ) ) ) { result ⇒ 
 result should matchPattern { case Right ( _ ) ⇒ } 
 val avatar = 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 index 50f7c94 . . 838ca2e 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 @ @ - 10 , 21 + 10 , 21 @ @ import im . actor . server . api . rpc . service . files . FilesServiceImpl 
 import im . actor . server . { BaseAppSuite , ImplicitAuthService , ImplicitSessionRegion } 
 import org . apache . commons . io . IOUtils 
 
 - class FilesServiceSpec 
 + final class FilesServiceSpec 
 extends BaseAppSuite 
 with ImplicitSessionRegion 
 with ImplicitAuthService { 
 behavior of " FilesService " 
 
 - it should " Generate upload url " in e1 
 + it should " Generate upload url " in generateUploadUrl 
 
 - it should " Generate valid upload part urls " in e2 
 + it should " Generate valid upload part urls " in generateUploadPartUrls 
 
 - it should " Complete upload " in e3 
 + it should " Complete upload " in completeUpload 
 
 - it should " Generate valid download urls " in e4 
 + it should " Generate valid download urls " in generateValidDownloadUrls 
 
 - it should " Generate valid upload part urls when same request comes twice " in e5 
 + it should " Generate valid upload part urls when same request comes twice " in validUploadPartUrlsDuplRequest 
 
 lazy val service = new FilesServiceImpl 
 HttpApi ( system ) 
 @ @ - 40 , 7 + 40 , 7 @ @ class FilesServiceSpec 
 
 var expectedContents : Option [ String ] = None 
 
 - def e1 ( ) = { 
 + def generateUploadUrl ( ) = { 
 val size = 20 
 
 whenReady ( service . handleGetFileUploadUrl ( size ) ) { resp ⇒ 
 @ @ - 53 , 7 + 53 , 7 @ @ class FilesServiceSpec 
 } 
 } 
 
 - def e2 ( ) = { 
 + def generateUploadPartUrls ( ) = { 
 val part1Size = 1024 * 32 / / big part 
 val part2Size = 5 / / small part 
 
 @ @ - 81 , 10 + 81 , 10 @ @ class FilesServiceSpec 
 connection . setRequestMethod ( " PUT " ) 
 connection . addRequestProperty ( " Content - Type " , " application / octet - stream " ) 
 val out = new OutputStreamWriter ( connection . getOutputStream ) 
 - val partContents = ( " . " * size ) 
 + val partContents = " . " * size 
 out . write ( partContents ) 
 out . close ( ) 
 - val responseCode = connection . getResponseCode ( ) 
 + val responseCode = connection . getResponseCode 
 responseCode should = = = ( 200 ) 
 partContents 
 } 
 @ @ - 92 , 8 + 92 , 8 @ @ class FilesServiceSpec 
 this . expectedContents = Some ( parts . foldLeft ( " " ) { ( acc , p ) ⇒ acc + p } ) 
 } 
 
 - def e3 ( ) = { 
 - whenReady ( service . handleCommitFileUpload ( uploadKey , " The . File " ) ) { resp ⇒ 
 + def completeUpload ( ) = { 
 + whenReady ( service . handleCommitFileUpload ( uploadKey , " / etc / passwd / The . Fil ë % 00 – ' Fear and Loathing in Las Vegas ' " ) ) { resp ⇒ 
 resp should matchPattern { 
 case Ok ( ResponseCommitFileUpload ( _ ) ) ⇒ 
 } 
 @ @ - 102 , 7 + 102 , 7 @ @ class FilesServiceSpec 
 } 
 } 
 
 - def e4 ( ) = { 
 + def generateValidDownloadUrls ( ) = { 
 val urlStr = whenReady ( service . handleGetFileUrl ( fileLocation . get ) ) { resp ⇒ 
 resp should matchPattern { 
 case Ok ( ResponseGetFileUrl ( _ , _ ) ) ⇒ 
 @ @ - 111 , 7 + 111 , 10 @ @ class FilesServiceSpec 
 resp . toOption . get . url 
 } 
 
 - urlStr should include ( " The . File ? " ) 
 + urlStr should include ( " The . Fil % C3 % AB % 00 % 20 % E2 % 80 % 93 % 20 ' Fear % 20and % 20Loathing % 20in % 20Las % 20Vegas ' ? " ) 
 + urlStr shouldNot include ( " / / The " ) 
 + urlStr shouldNot include ( " etc " ) 
 + urlStr shouldNot include ( " passwd " ) 
 
 val url = new URL ( urlStr ) 
 val connection = url . openConnection ( ) . asInstanceOf [ HttpURLConnection ] 
 @ @ - 122 , 7 + 125 , 7 @ @ class FilesServiceSpec 
 IOUtils . toString ( connection . getInputStream ) should = = = ( expectedContents . get ) 
 } 
 
 - def e5 ( ) = { 
 + def validUploadPartUrlsDuplRequest ( ) = { 
 val partSize = 1024 * 32 
 whenReady ( service . handleGetFileUploadPartUrl ( 1 , partSize , uploadKey ) ) { resp ⇒ 
 resp should matchPattern { 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala 
 index b426652 . . c3b5c1d 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala 
 @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . api . rpc . service 
 
 import java . nio . file . { Files , Paths } 
 
 - import im . actor . server . file . { FileStorageExtension , ImageUtils } 
 + import im . actor . server . file . { UnsafeFileName , FileStorageExtension , ImageUtils } 
 
 import scala . concurrent . Await 
 import scala . concurrent . duration . _ 
 @ @ - 69 , 7 + 69 , 7 @ @ final class ProfileServiceSpec 
 implicit val clientData = ClientData ( authId , sessionId , Some ( AuthData ( user . id , authSid ) ) ) 
 
 def e1 ( ) = { 
 - val validOrigFileModel = Await . result ( db . run ( fsAdapter . uploadFile ( " avatar . jpg " , validOrigFile ) ) , 5 . seconds ) 
 + val validOrigFileModel = Await . result ( db . run ( fsAdapter . uploadFile ( UnsafeFileName ( " / etc / passwd / avatar . jpg " ) , validOrigFile ) ) , 5 . seconds ) 
 
 whenReady ( service . handleEditAvatar ( ApiFileLocation ( validOrigFileModel . fileId , validOrigFileModel . accessHash ) ) ) { resp ⇒ 
 resp should matchPattern { 
 @ @ - 103 , 7 + 103 , 7 @ @ final class ProfileServiceSpec 
 } 
 
 def e2 ( ) = { 
 - val invalidImageFileModel = Await . result ( db . run ( fsAdapter . uploadFile ( " invalid - avatar . jpg " , invalidImageFile ) ) , 5 . seconds ) 
 + val invalidImageFileModel = Await . result ( db . run ( fsAdapter . uploadFile ( UnsafeFileName ( " invalid - avatar . jpg " ) , invalidImageFile ) ) , 5 . seconds ) 
 
 whenReady ( service . handleEditAvatar ( ApiFileLocation ( invalidImageFileModel . fileId , invalidImageFileModel . accessHash ) ) ) { resp ⇒ 
 resp should matchPattern { 
 @ @ - 113 , 7 + 113 , 7 @ @ final class ProfileServiceSpec 
 } 
 
 def e3 ( ) = { 
 - val tooLargeImageFileModel = Await . result ( db . run ( fsAdapter . uploadFile ( " too - large - avatar . jpg " , tooLargeImageFile ) ) , 30 . seconds ) / / WTF ? ? ? 
 + val tooLargeImageFileModel = Await . result ( db . run ( fsAdapter . uploadFile ( UnsafeFileName ( " too - large - avatar . jpg " ) , tooLargeImageFile ) ) , 30 . seconds ) / / WTF ? ? ? 
 
 whenReady ( service . handleEditAvatar ( ApiFileLocation ( tooLargeImageFileModel . fileId , tooLargeImageFileModel . accessHash ) ) ) { resp ⇒ 
 resp should matchPattern { 
 diff - - git a / actor - server / build . sbt b / actor - server / build . sbt 
 index c793a52 . . dc1dba5 100644 
 - - - a / actor - server / build . sbt 
 + + + b / actor - server / build . sbt 
 @ @ - 19 , 6 + 19 , 7 @ @ daemonGroup in Linux : = ( daemonUser in Linux ) . value 
 
 bashScriptExtraDefines + = " " " addJava " - Dactor . home = $ { app _ home } / . . " " " " 
 bashScriptExtraDefines + = " " " addJava " - Dlogback . configurationFile = $ { app _ home } / . . / conf / logback . xml " " " " 
 + bashScriptExtraDefines + = " " " addJava " - Dfile . encoding = UTF - 8 " " " " 
 bashScriptExtraDefines + = " " " addJava - javaagent : $ { app _ home } / . . / lib / org . aspectj . aspectjweaver - 1 . 8 . 7 . jar " " " 
 bashScriptExtraDefines + = " " " addJava - XX : + HeapDumpOnOutOfMemoryError - XX : HeapDumpPath = $ { app _ home } / . . / logs / dump - ` date ` . hprof " " " 
 
 diff - - git a / actor - server / notes / 1 . 0 . 86 . markdown b / actor - server / notes / 1 . 0 . 86 . markdown 
 index 441e02c . . cfb59c2 100644 
 - - - a / actor - server / notes / 1 . 0 . 86 . markdown 
 + + + b / actor - server / notes / 1 . 0 . 86 . markdown 
 @ @ - 2 , 4 + 2 , 5 @ @ Bug fixes 
 = = = 
 
 * Await ActorSystem termination 
 - * wrap google push send into blocking { } 
 \ No newline at end of file 
 + * Wrap google push send into blocking { } 
 + * Major fixes in file storage including security one - path traversal 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - commons - api / src / main / actor - api / actor . json b / actor - commons - api / src / main / actor - api / actor . json 
 index 5bb19d5 . . 3d620d8 100644 
 - - - a / actor - commons - api / src / main / actor - api / actor . json 
 + + + b / actor - commons - api / src / main / actor - api / actor . json 
 @ @ - 703 , 26 + 703 , 6 @ @ 
 } 
 } , 
 { 
 - " type " : " enum " , 
 - " content " : { 
 - " name " : " UserState " , 
 - " values " : [ 
 - { 
 - " name " : " Registered " , 
 - " id " : 1 
 - } , 
 - { 
 - " name " : " Email " , 
 - " id " : 2 
 - } , 
 - { 
 - " name " : " Deleted " , 
 - " id " : 3 
 - } 
 - ] 
 - } 
 - } , 
 - { 
 " type " : " struct " , 
 " content " : { 
 " name " : " Phone " , 
 @ @ - 973 , 14 + 953 , 6 @ @ 
 } , 
 " id " : 10 , 
 " name " : " emails " 
 - } , 
 - { 
 - " type " : { 
 - " type " : " enum " , 
 - " childType " : " UserState " 
 - } , 
 - " id " : 11 , 
 - " name " : " userState " 
 } 
 ] 
 } 
 @ @ - 1467 , 43 + 1439 , 6 @ @ 
 } 
 ] 
 } 
 - } , 
 - { 
 - " type " : " update " , 
 - " content " : { 
 - " name " : " UserStateChanged " , 
 - " header " : 100 , 
 - " doc " : [ 
 - " Update about user state changed " , 
 - { 
 - " type " : " reference " , 
 - " argument " : " uid " , 
 - " category " : " full " , 
 - " description " : " user ' s id " 
 - } , 
 - { 
 - " type " : " reference " , 
 - " argument " : " state " , 
 - " category " : " full " , 
 - " description " : " new user state " 
 - } 
 - ] , 
 - " attributes " : [ 
 - { 
 - " type " : " int32 " , 
 - " id " : 1 , 
 - " name " : " uid " 
 - } , 
 - { 
 - " type " : { 
 - " type " : " enum " , 
 - " childType " : " UserState " 
 - } , 
 - " id " : 2 , 
 - " name " : " state " 
 - } 
 - ] 
 - } 
 } 
 ] 
 } , 
 @ @ - 2226 , 6 + 2161 , 14 @ @ 
 } , 
 " id " : 3 , 
 " name " : " date " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " alias " , 
 + " childType " : " randomId " 
 + } , 
 + " id " : 4 , 
 + " name " : " rid " 
 } 
 ] 
 } 
 @ @ - 5681 , 6 + 5624 , 11 @ @ 
 " type " : " bytes " , 
 " id " : 1 , 
 " name " : " uploadKey " 
 + } , 
 + { 
 + " type " : " string " , 
 + " id " : 2 , 
 + " name " : " fileName " 
 } 
 ] 
 } 
 diff - - git a / actor - models / src / main / scala / im / actor / server / models / FileLocation . scala b / actor - models / src / main / scala / im / actor / server / models / FileLocation . scala 
 index 1a56fb8 . . 3323a89 100644 
 - - - a / actor - models / src / main / scala / im / actor / server / models / FileLocation . scala 
 + + + b / actor - models / src / main / scala / im / actor / server / models / FileLocation . scala 
 @ @ - 4 , 7 + 4 , 7 @ @ package im . actor . server . models 
 case class FileLocation ( fileId : Long , accessHash : Long ) 
 
 @ SerialVersionUID ( 1L ) 
 - case class File ( id : Long , accessSalt : String , s3UploadKey : String , isUploaded : Boolean , size : Long ) 
 + case class File ( id : Long , accessSalt : String , s3UploadKey : String , isUploaded : Boolean , size : Long , name : String ) 
 
 @ SerialVersionUID ( 1L ) 
 case class FilePart ( fileId : Long , number : Int , size : Int , s3UploadKey : String ) 
 diff - - git a / actor - persist / src / main / resources / sql / migration / V1505101940 _ _ AddFileNameToFiles . sql b / actor - persist / src / main / resources / sql / migration / V1505101940 _ _ AddFileNameToFiles . sql 
 new file mode 100644 
 index 0000000 . . 9f681e1 
 - - - / dev / null 
 + + + b / actor - persist / src / main / resources / sql / migration / V1505101940 _ _ AddFileNameToFiles . sql 
 @ @ - 0 , 0 + 1 @ @ 
 + ALTER TABLE files ADD COLUMN name text NOT NULL default ' ' ; 
 \ No newline at end of file 
 diff - - git a / actor - persist / src / main / scala / im / actor / server / persist / File . scala b / actor - persist / src / main / scala / im / actor / server / persist / File . scala 
 index fd56bdd . . b8f2e15 100644 
 - - - a / actor - persist / src / main / scala / im / actor / server / persist / File . scala 
 + + + b / actor - persist / src / main / scala / im / actor / server / persist / File . scala 
 @ @ - 17 , 14 + 17 , 16 @ @ class FileTable ( tag : Tag ) extends Table [ models . File ] ( tag , " files " ) { 
 
 def size = column [ Long ] ( " size " ) 
 
 - def * = ( id , accessSalt , s3UploadKey , isUploaded , size ) < > ( models . File . tupled , models . File . unapply ) 
 + def name = column [ String ] ( " name " ) 
 + 
 + def * = ( id , accessSalt , s3UploadKey , isUploaded , size , name ) < > ( models . File . tupled , models . File . unapply ) 
 } 
 
 object File { 
 val files = TableQuery [ FileTable ] 
 
 def create ( id : Long , accessSalt : String , s3UploadKey : String ) : FixedSqlAction [ Int , NoStream , Write ] = 
 - files + = models . File ( id , accessSalt , s3UploadKey , false , 0 ) 
 + files + = models . File ( id , accessSalt , s3UploadKey , false , 0 , " " ) 
 
 def find ( id : Long ) : SqlAction [ Option [ models . File ] , NoStream , Read ] = 
 files . filter ( _ . id = = = id ) . result . headOption 
 @ @ - 32 , 6 + 34 , 6 @ @ object File { 
 def findByKey ( key : String ) = 
 files . filter ( _ . s3UploadKey = = = key ) . result . headOption 
 
 - def setUploaded ( id : Long , size : Long ) = 
 - files . filter ( _ . id = = = id ) . map ( f ⇒ ( f . isUploaded , f . size ) ) . update ( ( true , size ) ) 
 + def setUploaded ( id : Long , size : Long , name : String ) = 
 + files . filter ( _ . id = = = id ) . map ( f ⇒ ( f . isUploaded , f . size , f . name ) ) . update ( ( true , size , name ) ) 
 } 
 diff - - git a / actor - push / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala b / actor - push / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 index 673c8e3 . . 56d1599 100644 
 - - - a / actor - push / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 + + + b / actor - push / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 @ @ - 330 , 7 + 330 , 7 @ @ object SeqUpdatesManager { 
 case api . groups . UpdateGroupUserAdded ( groupId , userId , inviterUserId , _ , _ ) ⇒ ( Set ( userId , inviterUserId ) , Set ( groupId ) ) 
 case api . groups . UpdateGroupUserKick ( groupId , userId , kickerUserId , _ , _ ) ⇒ ( Set ( userId , kickerUserId ) , Set ( groupId ) ) 
 case api . groups . UpdateGroupUserLeave ( groupId , userId , _ , _ ) ⇒ ( Set ( userId ) , Set ( groupId ) ) 
 - case api . contacts . UpdateContactRegistered ( userId , _ , _ ) ⇒ singleUser ( userId ) 
 + case api . contacts . UpdateContactRegistered ( userId , _ , _ , _ ) ⇒ singleUser ( userId ) 
 case api . contacts . UpdateContactsAdded ( userIds ) ⇒ users ( userIds ) 
 case api . contacts . UpdateContactsRemoved ( userIds ) ⇒ users ( userIds ) 
 case api . users . UpdateEmailMoved ( _ , userId ) ⇒ singleUser ( userId ) 
 @ @ - 345 , 7 + 345 , 6 @ @ object SeqUpdatesManager { 
 case api . users . UpdateUserNameChanged ( userId , _ ) ⇒ singleUser ( userId ) 
 case api . users . UpdateUserPhoneAdded ( userId , _ ) ⇒ singleUser ( userId ) 
 case api . users . UpdateUserPhoneRemoved ( userId , _ ) ⇒ singleUser ( userId ) 
 - case api . users . UpdateUserStateChanged ( userId , _ ) ⇒ singleUser ( userId ) 
 case api . weak . UpdateGroupOnline ( groupId , _ ) ⇒ singleGroup ( groupId ) 
 case api . weak . UpdateTyping ( peer , userId , _ ) ⇒ 
 val refs = peerRefs ( peer ) 
 diff - - git a / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 index f56df76 . . 7a669f4 100644 
 - - - a / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 + + + b / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 @ @ - 341 , 7 + 341 , 9 @ @ class AuthServiceImpl ( activationContext : ActivationContext ) ( 
 / / TODO : use service - level logging 
 actorSystem . log . debug ( s " Unregistered $ { phoneNumber } is in contacts of users : $ contacts " ) 
 
 - val update = UpdateContactRegistered ( user . id , isSilent , date . getMillis ) 
 + val randomId = ThreadLocalRandom . current ( ) . nextLong ( ) 
 + val update = UpdateContactRegistered ( user . id , isSilent , date . getMillis , randomId ) 
 + / / TODO : write service message if isSilent = = true 
 
 / / FIXME : # perf broadcast updates using broadcastUpdateAll to serialize update once 
 val actions = contacts map { contact ⇒ 
 diff - - git a / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / ServiceMessages . scala b / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / ServiceMessages . scala 
 new file mode 100644 
 index 0000000 . . 7ef285c 
 - - - / dev / null 
 + + + b / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / ServiceMessages . scala 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + package im . actor . server . api . rpc . service . auth 
 + 
 + object ServiceMessages { 
 + 
 + } 
 + 
 diff - - git a / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala b / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala 
 index fe96475 . . 629b0d3 100644 
 - - - a / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala 
 + + + b / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala 
 @ @ - 40 , 7 + 40 , 7 @ @ class FilesServiceImpl ( bucketName : String ) ( 
 persist . File . find ( location . fileId ) flatMap { 
 case Some ( file ) ⇒ 
 if ( ACLUtils . fileAccessHash ( file . id , file . accessSalt ) = = location . accessHash ) { 
 - val presignedRequest = new GeneratePresignedUrlRequest ( bucketName , FileUtils . s3Key ( file . id ) ) 
 + val presignedRequest = new GeneratePresignedUrlRequest ( bucketName , FileUtils . s3Key ( file . id , file . name ) ) 
 val timeout = 1 . day 
 
 val expiration = new java . util . Date 
 @ @ - 115 , 7 + 115 , 7 @ @ class FilesServiceImpl ( bucketName : String ) ( 
 db . run ( toDBIOAction ( authorizedAction ) ) 
 } 
 
 - override def jhandleCommitFileUpload ( uploadKey : Array [ Byte ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseCommitFileUpload ] ] = { 
 + override def jhandleCommitFileUpload ( uploadKey : Array [ Byte ] , fileName : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseCommitFileUpload ] ] = { 
 val authorizedAction = requireAuth ( clientData ) . map { client ⇒ 
 val key = new String ( uploadKey ) 
 
 @ @ - 131 , 11 + 131 , 11 @ @ class FilesServiceImpl ( bucketName : String ) ( 
 concatFile ← DBIO . from ( concatFiles ( tempDir , parts map ( _ . s3UploadKey ) ) ) 
 fileLengthF = getFileLength ( concatFile ) 
 upload = FutureTransfer . listenFor { 
 - transferManager . upload ( bucketName , s " file _ $ { file . id } " , concatFile ) 
 + transferManager . upload ( bucketName , FileUtils . s3Key ( file . id , fileName ) , concatFile ) 
 } map ( _ . waitForCompletion ( ) ) 
 _ ← DBIO . from ( upload ) 
 _ ← DBIO . from ( deleteDir ( tempDir ) ) 
 - _ ← DBIO . from ( fileLengthF ) flatMap ( size ⇒ persist . File . setUploaded ( file . id , size ) ) 
 + _ ← DBIO . from ( fileLengthF ) flatMap ( size ⇒ persist . File . setUploaded ( file . id , size , fileName ) ) 
 } yield { 
 Ok ( ResponseCommitFileUpload ( FileLocation ( file . id , ACLUtils . fileAccessHash ( file . id , file . accessSalt ) ) ) ) 
 } 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AvatarsSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AvatarsSpec . scala 
 index 988ed61 . . f75eabd 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AvatarsSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AvatarsSpec . scala 
 @ @ - 69 , 7 + 69 , 7 @ @ class AvatarsSpec extends BaseServiceSuite { 
 implicit val clientData = ClientData ( authId , sessionId , Some ( user . id ) ) 
 
 def e1 ( ) = { 
 - val validOrigFileModel = Await . result ( db . run ( uploadFile ( bucketName , validOrigFile ) ) , 5 . seconds ) 
 + val validOrigFileModel = Await . result ( db . run ( uploadFile ( bucketName , " avatar . jpg " , validOrigFile ) ) , 5 . seconds ) 
 
 whenReady ( service . handleEditAvatar ( FileLocation ( validOrigFileModel . fileId , validOrigFileModel . accessHash ) ) ) { resp ⇒ 
 resp should matchPattern { 
 @ @ - 81 , 21 + 81 , 21 @ @ class AvatarsSpec extends BaseServiceSuite { 
 r . avatar . fullImage . get . width should = = = ( validOrigDimensions . _ 1 ) 
 r . avatar . fullImage . get . height should = = = ( validOrigDimensions . _ 2 ) 
 r . avatar . fullImage . get . fileSize should = = = ( validOrigBytes . length ) 
 - whenReady ( db . run ( download ( bucketName , r . avatar . fullImage . get . fileLocation . fileId ) ) ) { file ⇒ 
 + whenReady ( db . run ( download ( bucketName , r . avatar . fullImage . get . fileLocation . fileId , " avatar . jpg " ) ) ) { file ⇒ 
 org . apache . commons . io . FileUtils . readFileToByteArray ( file ) should = = = ( validOrigBytes ) 
 } 
 
 r . avatar . smallImage . get . width should = = = ( validSmallDimensions . _ 1 ) 
 r . avatar . smallImage . get . height should = = = ( validSmallDimensions . _ 2 ) 
 r . avatar . smallImage . get . fileSize should = = = ( validSmallBytes . length ) 
 - whenReady ( db . run ( download ( bucketName , r . avatar . smallImage . get . fileLocation . fileId ) ) ) { file ⇒ 
 + whenReady ( db . run ( download ( bucketName , r . avatar . smallImage . get . fileLocation . fileId , " small - avatar . jpg " ) ) ) { file ⇒ 
 org . apache . commons . io . FileUtils . readFileToByteArray ( file ) should = = = ( validSmallBytes ) 
 } 
 
 r . avatar . largeImage . get . width should = = = ( validLargeDimensions . _ 1 ) 
 r . avatar . largeImage . get . height should = = = ( validLargeDimensions . _ 2 ) 
 r . avatar . largeImage . get . fileSize should = = = ( validLargeBytes . length ) 
 - whenReady ( db . run ( download ( bucketName , r . avatar . largeImage . get . fileLocation . fileId ) ) ) { file ⇒ 
 + whenReady ( db . run ( download ( bucketName , r . avatar . largeImage . get . fileLocation . fileId , " large - avatar . jpg " ) ) ) { file ⇒ 
 org . apache . commons . io . FileUtils . readFileToByteArray ( file ) should = = = ( validLargeBytes ) 
 } 
 
 @ @ - 103 , 7 + 103 , 7 @ @ class AvatarsSpec extends BaseServiceSuite { 
 } 
 
 def e2 ( ) = { 
 - val invalidImageFileModel = Await . result ( db . run ( uploadFile ( bucketName , invalidImageFile ) ) , 5 . seconds ) 
 + val invalidImageFileModel = Await . result ( db . run ( uploadFile ( bucketName , " invalid - avatar . jpg " , invalidImageFile ) ) , 5 . seconds ) 
 
 whenReady ( service . handleEditAvatar ( FileLocation ( invalidImageFileModel . fileId , invalidImageFileModel . accessHash ) ) ) { resp ⇒ 
 resp should matchPattern { 
 @ @ - 113 , 7 + 113 , 7 @ @ class AvatarsSpec extends BaseServiceSuite { 
 } 
 
 def e3 ( ) = { 
 - val tooLargeImageFileModel = Await . result ( db . run ( uploadFile ( bucketName , tooLargeImageFile ) ) , 5 . seconds ) 
 + val tooLargeImageFileModel = Await . result ( db . run ( uploadFile ( bucketName , " too - large - avatar . jpg " , tooLargeImageFile ) ) , 5 . seconds ) 
 
 whenReady ( service . handleEditAvatar ( FileLocation ( tooLargeImageFileModel . fileId , tooLargeImageFileModel . accessHash ) ) ) { resp ⇒ 
 resp should matchPattern { 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 index 802ef66 . . 3aff84f 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 @ @ - 107 , 7 + 107 , 7 @ @ class FilesServiceSpec extends BaseServiceSuite { 
 } 
 
 def e3 ( ) = { 
 - whenReady ( service . handleCommitFileUpload ( uploadKey ) ) { resp ⇒ 
 + whenReady ( service . handleCommitFileUpload ( uploadKey , " The . File " ) ) { resp ⇒ 
 resp should matchPattern { 
 case Ok ( ResponseCommitFileUpload ( _ ) ) ⇒ 
 } 
 @ @ - 125 , 6 + 125 , 8 @ @ class FilesServiceSpec extends BaseServiceSuite { 
 resp . toOption . get . url 
 } 
 
 + urlStr should include ( " The . File ? " ) 
 + 
 val url = new URL ( urlStr ) 
 val connection = url . openConnection ( ) . asInstanceOf [ HttpURLConnection ] 
 connection . setDoOutput ( true ) 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala b / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 index c2d8c92 . . 2bdaa09 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 @ @ - 165 , 7 + 165 , 7 @ @ class SessionSpec extends BaseSessionSpec { 
 
 implicit val clientData = AuthorizedClientData ( authId , sessionId , authResult . asInstanceOf [ RpcOk ] . response . asInstanceOf [ ResponseAuth ] . user . id ) 
 
 - val update = UpdateContactRegistered ( 1 , true , 1L ) 
 + val update = UpdateContactRegistered ( 1 , true , 1L , 2L ) 
 Await . result ( db . run ( SeqUpdatesManager . broadcastClientUpdate ( update , None ) ) , 1 . second ) 
 
 expectSeqUpdate ( authId , sessionId ) . update should = = = ( update . toByteArray ) 
 @ @ - 210 , 7 + 210 , 7 @ @ class SessionSpec extends BaseSessionSpec { 
 
 implicit val clientData = AuthorizedClientData ( authId , sessionId , authResult . asInstanceOf [ RpcOk ] . response . asInstanceOf [ ResponseAuth ] . user . id ) 
 
 - val update = UpdateContactRegistered ( 1 , true , 1L ) 
 + val update = UpdateContactRegistered ( 1 , true , 1L , 5L ) 
 Await . result ( db . run ( WeakUpdatesManager . broadcastUserWeakUpdate ( clientData . userId , update ) ) , 1 . second ) 
 
 expectWeakUpdate ( authId , sessionId ) . update should = = = ( update . toByteArray ) 
 diff - - git a / actor - utils / src / main / scala / im / actor / server / util / AvatarUtils . scala b / actor - utils / src / main / scala / im / actor / server / util / AvatarUtils . scala 
 index 887e324 . . 3a3b584 100644 
 - - - a / actor - utils / src / main / scala / im / actor / server / util / AvatarUtils . scala 
 + + + b / actor - utils / src / main / scala / im / actor / server / util / AvatarUtils . scala 
 @ @ - 70 , 6 + 70 , 9 @ @ object AvatarUtils { 
 ec : ExecutionContext , 
 system : ActorSystem 
 ) = { 
 + val smallFileName = " small - avatar . jpg " 
 + val largeFileName = " large - avatar . jpg " 
 + 
 persist . File . find ( fullFileId ) flatMap { 
 case Some ( fullFileModel ) ⇒ 
 downloadFile ( bucketName , fullFileId ) flatMap { 
 @ @ - 81 , 14 + 84 , 14 @ @ object AvatarUtils { 
 smallAimg ← DBIO . from ( resizeToSmall ( fullAimg ) ) 
 largeAimg ← DBIO . from ( resizeToLarge ( fullAimg ) ) 
 
 - smallFile = fullFile . getParentFile . toPath . resolve ( " small . jpg " ) . toFile 
 - largeFile = fullFile . getParentFile . toPath . resolve ( " large . jpg " ) . toFile 
 + smallFile = fullFile . getParentFile . toPath . resolve ( smallFileName ) . toFile 
 + largeFile = fullFile . getParentFile . toPath . resolve ( largeFileName ) . toFile 
 
 _ ← DBIO . from ( smallAimg . writer ( Format . JPEG ) . write ( smallFile ) ) 
 _ ← DBIO . from ( largeAimg . writer ( Format . JPEG ) . write ( largeFile ) ) 
 
 - smallFileLocation ← uploadFile ( bucketName , smallFile ) 
 - largeFileLocation ← uploadFile ( bucketName , largeFile ) 
 + smallFileLocation ← uploadFile ( bucketName , smallFileName , smallFile ) 
 + largeFileLocation ← uploadFile ( bucketName , largeFileName , largeFile ) 
 } yield { 
 / / TODO : # perf calculate file sizes efficiently 
 
 diff - - git a / actor - utils / src / main / scala / im / actor / server / util / FileUtils . scala b / actor - utils / src / main / scala / im / actor / server / util / FileUtils . scala 
 index 1827a92 . . 20a8fe2 100644 
 - - - a / actor - utils / src / main / scala / im / actor / server / util / FileUtils . scala 
 + + + b / actor - utils / src / main / scala / im / actor / server / util / FileUtils . scala 
 @ @ - 26 , 20 + 26 , 20 @ @ object FileUtils { 
 ) : dbio . DBIOAction [ Option [ File ] , NoStream , Read with Effect ] = { 
 persist . File . find ( id ) flatMap { 
 case Some ( file ) ⇒ 
 - download ( bucketName , file . id ) map ( Some ( _ ) ) 
 + download ( bucketName , file . id , file . name ) map ( Some ( _ ) ) 
 case None ⇒ DBIO . successful ( None ) 
 } 
 } 
 
 - def download ( bucketName : String , id : Long ) ( implicit transferManager : TransferManager , ec : ExecutionContext ) = { 
 + def download ( bucketName : String , id : Long , name : String ) ( implicit transferManager : TransferManager , ec : ExecutionContext ) = { 
 for { 
 dirFile ← DBIO . from ( createTempDir ( ) ) 
 file = dirFile . toPath . resolve ( " file " ) . toFile 
 - _ ← DBIO . from ( FutureTransfer . listenFor ( transferManager . download ( bucketName , s3Key ( id ) , file ) ) map ( _ . waitForCompletion ( ) ) ) 
 + _ ← DBIO . from ( FutureTransfer . listenFor ( transferManager . download ( bucketName , s3Key ( id , name ) , file ) ) map ( _ . waitForCompletion ( ) ) ) 
 } yield file 
 } 
 
 - def uploadFile ( bucketName : String , file : File ) ( 
 + def uploadFile ( bucketName : String , name : String , file : File ) ( 
 implicit 
 transferManager : TransferManager , 
 ec : ExecutionContext , 
 @ @ - 51 , 21 + 51 , 27 @ @ object FileUtils { 
 val sizeF = getFileLength ( file ) 
 
 for { 
 - _ ← persist . File . create ( id , accessSalt , s3Key ( id ) ) 
 - _ ← DBIO . from ( upload ( bucketName , id , file ) ) 
 - _ ← DBIO . from ( sizeF ) flatMap ( s ⇒ persist . File . setUploaded ( id , s ) ) 
 + _ ← persist . File . create ( id , accessSalt , s3Key ( id , name ) ) 
 + _ ← DBIO . from ( upload ( bucketName , id , name , file ) ) 
 + _ ← DBIO . from ( sizeF ) flatMap ( s ⇒ persist . File . setUploaded ( id , s , name ) ) 
 } yield FileLocation ( id , ACLUtils . fileAccessHash ( id , accessSalt ) ) 
 } 
 
 - def upload ( bucketName : String , id : Long , file : File ) ( 
 + def upload ( bucketName : String , id : Long , name : String , file : File ) ( 
 implicit 
 transferManager : TransferManager , 
 ec : ExecutionContext 
 ) : Future [ UploadResult ] = { 
 - FutureTransfer . listenFor ( transferManager . upload ( bucketName , s3Key ( id ) , file ) ) map ( _ . waitForUploadResult ( ) ) 
 + FutureTransfer . listenFor ( transferManager . upload ( bucketName , s3Key ( id , name ) , file ) ) map ( _ . waitForUploadResult ( ) ) 
 } 
 
 - def s3Key ( id : Long ) : String = s " file _ $ { id } " 
 + def s3Key ( id : Long , name : String ) : String = { 
 + if ( name . isEmpty ) { 
 + s " file _ $ { id } " 
 + } else { 
 + s " file _ $ { id } / $ { name } " 
 + } 
 + } 
 
 / / FIXME : # perf pinned dispatcher 
 def createTempDir ( ) ( implicit ec : ExecutionContext ) : Future [ File ] = { 
 diff - - git a / actor - utils / src / main / scala / im / actor / server / util / UserUtils . scala b / actor - utils / src / main / scala / im / actor / server / util / UserUtils . scala 
 index 5ea5c84 . . 5826865 100644 
 - - - a / actor - utils / src / main / scala / im / actor / server / util / UserUtils . scala 
 + + + b / actor - utils / src / main / scala / im / actor / server / util / UserUtils . scala 
 @ @ - 34 , 7 + 34 , 6 @ @ object UserUtils { 
 phone = phones . head . number , 
 phones = phones map ( _ . id ) toVector , 
 emails = emails map ( _ . id ) toVector , 
 - userState = users . UserState . apply ( u . state . toInt ) , 
 avatar = adOpt flatMap ( AvatarUtils . avatar ) 
 ) 
 } 
 @ @ - 61 , 7 + 60 , 6 @ @ object UserUtils { 
 phone = phones . head . number , 
 phones = phones map ( _ . id ) toVector , 
 emails = emails map ( _ . id ) toVector , 
 - userState = users . UserState . apply ( u . state . toInt ) , 
 avatar = adOpt flatMap ( AvatarUtils . avatar ) 
 ) 
 }
