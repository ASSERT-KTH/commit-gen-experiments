BLEU SCORE: 0.21386638885976572

TEST MSG: fix ( server ) : fixed user search exception
GENERATED MSG: refactor ( server ) : some refactorings , subscriptions spec , etc

TEST DIFF (one line): diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserRepo . scala < nl > index 457ccf8 . . e5b2403 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserRepo . scala < nl > @ @ - 5 , 6 + 5 , 7 @ @ import java . time . { ZoneOffset , LocalDateTime } < nl > import im . actor . server . db . ActorPostgresDriver . api . _ < nl > < nl > import im . actor . server . model < nl > + import im . actor . util . misc . PhoneNumberUtils < nl > < nl > import scala . concurrent . ExecutionContext < nl > < nl > @ @ - 103 , 7 + 104 , 10 @ @ object UserRepo { < nl > for { < nl > e ← idsByEmailC ( query ) . result < nl > n ← idsByNicknameC ( query ) . result < nl > - p ← idByPhoneC ( query . toLong ) . result < nl > + p ← PhoneNumberUtils . normalizeStr ( query ) < nl > + . headOption < nl > + . map ( idByPhoneC ( _ ) . result ) < nl > + . getOrElse ( DBIO . successful ( Nil ) ) < nl > } yield e + + n + + p < nl > < nl > def setNickname ( userId : Int , nickname : Option [ String ] ) = < nl > diff - - git a / actor - server / notes / 1 . 0 . 73 . markdown b / actor - server / notes / 1 . 0 . 73 . markdown < nl > index db2eb24 . . e93cf63 100644 < nl > - - - a / actor - server / notes / 1 . 0 . 73 . markdown < nl > + + + b / actor - server / notes / 1 . 0 . 73 . markdown < nl > @ @ - 1 + 1 , 2 @ @ < nl > - * record connection time in kamon < nl > \ No newline at end of file < nl > + * record connection time in kamon < nl > + * fixed user search exception < nl > \ No newline at end of file < nl > diff - - git a / actor - server / project / Build . scala b / actor - server / project / Build . scala < nl > index 525dc1d . . 4b49a44 100644 < nl > - - - a / actor - server / project / Build . scala < nl > + + + b / actor - server / project / Build . scala < nl > @ @ - 269 , 7 + 269 , 7 @ @ object Build extends sbt . Build with Versioning with Releasing with Publishing { < nl > libraryDependencies + + = Dependencies . persist < nl > ) < nl > ) < nl > - . dependsOn ( actorModels ) < nl > + . dependsOn ( actorModels , actorRuntime ) < nl > < nl > lazy val actorTestkit = Project ( < nl > id = " actor - testkit " ,
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala < nl > index 734f1f9 . . ee3b88c 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala < nl > @ @ - 5 , 7 + 5 , 7 @ @ import java . security . MessageDigest < nl > < nl > import akka . actor . ActorSystem < nl > import akka . util . Timeout < nl > - import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType , ApiOutPeer } < nl > + import im . actor . api . rpc . peers . { ApiUserOutPeer , ApiPeer , ApiPeerType , ApiOutPeer } < nl > import im . actor . server . group . { GroupExtension , GroupViewRegion , GroupOffice } < nl > import im . actor . server . models < nl > import im . actor . server . user . { UserExtension , UserViewRegion , UserOffice } < nl > @ @ - 83 , 4 + 83 , 9 @ @ object ACLUtils { < nl > UserExtension ( s ) . getAccessHash ( peer . id , clientAuthId ) map ( ApiOutPeer ( ApiPeerType . Private , peer . id , _ ) ) < nl > } < nl > } < nl > + < nl > + def getUserOutPeer ( userId : Int , clientAuthId : Long ) ( implicit s : ActorSystem ) : Future [ ApiUserOutPeer ] = { < nl > + import s . dispatcher < nl > + UserExtension ( s ) . getAccessHash ( userId , clientAuthId ) map ( ApiUserOutPeer ( userId , _ ) ) < nl > + } < nl > } < nl > diff - - git a / actor - server / actor - notifications / src / main / scala / im / actor / server / notifications / NotificationsSender . scala b / actor - server / actor - notifications / src / main / scala / im / actor / server / notifications / NotificationsSender . scala < nl > index b81be73 . . 3a8b1b8 100644 < nl > - - - a / actor - server / actor - notifications / src / main / scala / im / actor / server / notifications / NotificationsSender . scala < nl > + + + b / actor - server / actor - notifications / src / main / scala / im / actor / server / notifications / NotificationsSender . scala < nl > @ @ - 44 , 7 + 44 , 7 @ @ object NotificationsSender { < nl > Props ( classOf [ NotificationsSender ] , config , engine ) < nl > } < nl > < nl > - class NotificationsSender ( implicit config : NotificationsConfig , engine : SmsEngine ) extends Actor with ActorLogging { < nl > + private class NotificationsSender ( implicit config : NotificationsConfig , engine : SmsEngine ) extends Actor with ActorLogging { < nl > < nl > import AnyRefLogSource . _ < nl > import NotificationsSender . _ < nl > diff - - git a / actor - server / actor - notifications / src / main / scala / im / actor / server / notifications / UnreadWatcher . scala b / actor - server / actor - notifications / src / main / scala / im / actor / server / notifications / UnreadWatcher . scala < nl > index ea7e3c7 . . 364cb94 100644 < nl > - - - a / actor - server / actor - notifications / src / main / scala / im / actor / server / notifications / UnreadWatcher . scala < nl > + + + b / actor - server / actor - notifications / src / main / scala / im / actor / server / notifications / UnreadWatcher . scala < nl > @ @ - 12 , 7 + 12 , 7 @ @ import slick . driver . PostgresDriver . api . _ < nl > < nl > import scala . concurrent . Future < nl > < nl > - class UnreadWatcher ( ) ( implicit system : ActorSystem , config : UnreadWatcherConfig ) { < nl > + private class UnreadWatcher ( ) ( implicit system : ActorSystem , config : UnreadWatcherConfig ) { < nl > import system . dispatcher < nl > < nl > private val db : Database = DbExtension ( system ) . db < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / AuthSessionRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / AuthSessionRepo . scala < nl > index 7d91acd . . 4d1b8af 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / AuthSessionRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / AuthSessionRepo . scala < nl > @ @ - 41 , 6 + 41 , 10 @ @ object AuthSessionRepo { < nl > < nl > val activeSessions = sessions . filter ( _ . deletedAt . isEmpty ) < nl > < nl > + def byDeviceHash ( deviceHash : Rep [ Array [ Byte ] ] ) = < nl > + activeSessions . filter ( _ . deviceHash = = = deviceHash ) < nl > + val byDeviceHashC = Compiled ( byDeviceHash _ ) < nl > + < nl > def create ( session : models . AuthSession ) = < nl > sessions + = session < nl > < nl > @ @ - 57 , 7 + 61 , 7 @ @ object AuthSessionRepo { < nl > activeSessions . filter ( _ . authId = = = authId ) . map ( _ . appId ) . result . headOption < nl > < nl > def findByDeviceHash ( deviceHash : Array [ Byte ] ) = < nl > - activeSessions . filter ( _ . deviceHash = = = deviceHash ) . result < nl > + byDeviceHashC ( deviceHash ) . result < nl > < nl > def delete ( userId : Int , id : Int ) = < nl > activeSessions . filter ( s ⇒ s . userId = = = userId & & s . id = = = id ) . map ( _ . deletedAt ) . update ( Some ( new DateTime ) ) < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / AuthSmsCodeObsoleteRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / AuthSmsCodeObsoleteRepo . scala < nl > index 8875952 . . 49f9c8b 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / AuthSmsCodeObsoleteRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / AuthSmsCodeObsoleteRepo . scala < nl > @ @ - 17 , 12 + 17 , 16 @ @ final class AuthSmsCodeObsoleteTable ( tag : Tag ) extends Table [ models . AuthSmsCodeO < nl > object AuthSmsCodeObsoleteRepo { < nl > val codes = TableQuery [ AuthSmsCodeObsoleteTable ] < nl > < nl > + def byPhoneNumber ( number : Rep [ Long ] ) = < nl > + codes . filter ( c ⇒ c . phoneNumber = = = number & & c . isDeleted = = = false ) < nl > + private val byPhoneNumberC = Compiled ( byPhoneNumber _ ) < nl > + < nl > def create ( id : Long , phoneNumber : Long , smsHash : String , smsCode : String ) = < nl > codes + = models . AuthSmsCodeObsolete ( id , phoneNumber , smsHash , smsCode ) < nl > < nl > def findByPhoneNumber ( number : Long ) = < nl > - codes . filter ( c ⇒ c . phoneNumber = = = number & & c . isDeleted = = = false ) . result < nl > + byPhoneNumberC ( number ) . result < nl > < nl > def deleteByPhoneNumber ( number : Long ) = < nl > - codes . filter ( _ . phoneNumber = = = number ) . map ( _ . isDeleted ) . update ( true ) < nl > + byPhoneNumber ( number ) . map ( _ . isDeleted ) . update ( true ) < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > index 5c8abae . . 2f57d1c 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > @ @ - 367 , 7 + 367 , 7 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( < nl > smsHash = smsHash , < nl > smsCode = smsCode < nl > ) < nl > - ) yield ( normPhoneNumber : : smsHash : : smsCode : : HNil ) < nl > + ) yield normPhoneNumber : : smsHash : : smsCode : : HNil < nl > } . flatMap { res ⇒ < nl > persist . UserPhoneRepo . exists ( normPhoneNumber ) map ( res : + _ ) < nl > } . map { < nl > @ @ - 436 , 7 + 436 , 7 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( < nl > val action = ( for { < nl > optCode ← persist . AuthSmsCodeObsoleteRepo . findByPhoneNumber ( normPhoneNumber ) . headOption < nl > optPhone ← persist . UserPhoneRepo . findByPhoneNumber ( normPhoneNumber ) . headOption < nl > - } yield ( optCode : : optPhone : : HNil ) ) . flatMap { < nl > + } yield optCode : : optPhone : : HNil ) . flatMap { < nl > case None : : _ : : HNil ⇒ DBIO . successful ( Error ( AuthErrors . PhoneCodeExpired ) ) < nl > case Some ( smsCodeModel ) : : _ : : HNil if smsCodeModel . smsHash ! = smsHash ⇒ < nl > DBIO . successful ( Error ( AuthErrors . PhoneCodeExpired ) ) < nl > diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > index c2af445 . . 9e8a2f0 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > @ @ - 1 , 23 + 1 , 22 @ @ < nl > package im . actor . server . session < nl > < nl > - import scala . annotation . tailrec < nl > - import scala . collection . immutable < nl > - import scala . concurrent . { Promise , Future } < nl > - import scala . concurrent . duration . _ < nl > - import scala . language . postfixOps < nl > - import scala . util . control . NoStackTrace < nl > - import scala . util . { Try , Failure , Success } < nl > - < nl > import akka . actor . _ < nl > import akka . pattern . pipe < nl > import akka . stream . actor . _ < nl > - import scodec . bits . _ < nl > - < nl > import im . actor . api . rpc . RpcInternalError < nl > - import im . actor . server . api . rpc . { RpcResultCodec , RpcApiService } < nl > import im . actor . server . api . rpc . RpcApiService . RpcResponse < nl > + import im . actor . server . api . rpc . { RpcApiService , RpcResultCodec } < nl > import im . actor . server . mtproto . protocol . { ProtoMessage , RpcResponseBox } < nl > import im . actor . util . cache . CacheHelpers . _ < nl > + import scodec . bits . _ < nl > + < nl > + import scala . annotation . tailrec < nl > + import scala . collection . immutable < nl > + import scala . concurrent . duration . _ < nl > + import scala . concurrent . { Future , Promise } < nl > + import scala . language . postfixOps < nl > + import scala . util . control . NoStackTrace < nl > + import scala . util . { Failure , Success , Try } < nl > < nl > private [ session ] object RpcHandler { < nl > private [ session ] val MaxCacheSize = 100L < nl > @ @ - 26 , 6 + 25 , 7 @ @ private [ session ] object RpcHandler { < nl > def props = Props ( classOf [ RpcHandler ] ) < nl > < nl > private case class CachedResponse ( rsp : RpcApiService . RpcResponse ) < nl > + < nl > } < nl > < nl > private [ session ] object RequestHandler { < nl > @ @ - 68 , 10 + 68 , 8 @ @ private [ session ] class RpcHandler extends ActorSubscriber with ActorPublisher [ Pr < nl > < nl > import ActorPublisherMessage . _ < nl > import ActorSubscriberMessage . _ < nl > - < nl > - import SessionStreamMessage . _ < nl > - < nl > import RpcHandler . _ < nl > + import SessionStreamMessage . _ < nl > < nl > private implicit val ec = context . dispatcher < nl > < nl > @ @ - 94 , 7 + 92 , 7 @ @ private [ session ] class RpcHandler extends ActorSubscriber with ActorPublisher [ Pr < nl > Option ( responseCache . getIfPresent ( messageId ) ) match { < nl > case Some ( rspFuture ) ⇒ < nl > log . debug ( " Publishing cached RpcResponse for messageId : { } " , messageId ) < nl > - rspFuture map ( CachedResponse ( _ ) ) pipeTo self < nl > + rspFuture map CachedResponse pipeTo self < nl > case None ⇒ < nl > requestQueue + = ( messageId → requestBytes ) < nl > assert ( requestQueue . size < = MaxRequestQueueSize , s " queued too many : $ { requestQueue . size } " ) < nl > @ @ - 108 , 7 + 106 , 7 @ @ private [ session ] class RpcHandler extends ActorSubscriber with ActorPublisher [ Pr < nl > rpcApiService , < nl > RpcApiService . HandleRpcRequest ( messageId , requestBytes , clientData ) < nl > ) , < nl > - s " handler - $ { messageId } " < nl > + s " handler - $ messageId " < nl > ) < nl > < nl > responseCache . put ( messageId , responsePromise . future ) < nl > diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala < nl > index 27b3f07 . . 11b4f4e 100644 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala < nl > + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala < nl > @ @ - 130 , 11 + 130 , 11 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi < nl > appId = 42 , < nl > appKey = " appKey " , < nl > isSilent = false < nl > - ) ( rpcapi . ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 5 . seconds ) < nl > + ) ( rpcapi . ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 10 . seconds ) < nl > < nl > res match { < nl > case \ / - ( rsp ) ⇒ rsp . user < nl > - case - \ / ( e ) ⇒ fail ( s " Got RpcError $ { e } " ) < nl > + case - \ / ( e ) ⇒ fail ( s " Got RpcError $ e " ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala < nl > index aade85c . . 3728479 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala < nl > @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . _ < nl > import akka . testkit . TestProbe < nl > import akka . util . Timeout < nl > import com . google . protobuf . ByteString < nl > - import im . actor . api . rpc . RpcResult < nl > + import im . actor . api . rpc . { Request , RpcRequest , RpcResult } < nl > import im . actor . api . rpc . codecs . _ < nl > import im . actor . api . rpc . sequence . { SeqUpdate , WeakUpdate } < nl > import im . actor . server < nl > @ @ - 34 , 13 + 34 , 12 @ @ abstract class BaseSessionSpec ( _ system : ActorSystem = { < nl > with FlatSpecLike < nl > with ScalaFutures < nl > with Matchers < nl > - with ActorSerializerPrepare { < nl > + with ActorSerializerPrepare < nl > + with ServiceSpecHelpers { < nl > < nl > override implicit def patienceConfig : PatienceConfig = < nl > new PatienceConfig ( timeout = Span ( 30 , Seconds ) ) < nl > < nl > - protected implicit val timeout = Timeout ( 10 . seconds ) < nl > - < nl > protected implicit val ec = system . dispatcher < nl > < nl > protected implicit val db : PostgresDriver . api . Database = DbExtension ( _ system ) . db < nl > @ @ - 55 , 7 + 54 , 7 @ @ abstract class BaseSessionSpec ( _ system : ActorSystem = { < nl > < nl > protected val oauthGoogleConfig = OAuth2GoogleConfig . load ( system . settings . config . getConfig ( " services . google . oauth " ) ) < nl > protected implicit val oauth2Service = new GoogleProvider ( oauthGoogleConfig ) < nl > - protected val authService = new AuthServiceImpl ( new DummyCodeActivation ) < nl > + protected implicit val authService = new AuthServiceImpl ( new DummyCodeActivation ) < nl > protected val sequenceConfig = SequenceServiceConfig . load . toOption . get < nl > protected val sequenceService = new SequenceServiceImpl ( sequenceConfig ) < nl > < nl > @ @ - 189 , 4 + 188 , 15 @ @ abstract class BaseSessionSpec ( _ system : ActorSystem = { < nl > probe . ref < nl > ) < nl > } < nl > + < nl > + protected def sendRequest ( authId : Long , sessionId : Long , session : ActorRef , messageId : Long , request : RpcRequest ) ( implicit probe : TestProbe ) : Unit = { < nl > + val rqBox = RpcRequestBox ( RequestCodec . encode ( Request ( request ) ) . require ) < nl > + sendMessageBox ( authId , sessionId , session , messageId , rqBox ) < nl > + } < nl > + < nl > + protected def sendRequest ( authId : Long , sessionId : Long , session : ActorRef , request : RpcRequest ) ( implicit probe : TestProbe ) : Long = { < nl > + val messageId = Random . nextLong ( ) < nl > + sendRequest ( authId , sessionId , session , messageId , request ) < nl > + messageId < nl > + } < nl > } < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / ConcurrentSubscriptionsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / ConcurrentSubscriptionsSpec . scala < nl > new file mode 100644 < nl > index 0000000 . . 3d93c35 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / ConcurrentSubscriptionsSpec . scala < nl > @ @ - 0 , 0 + 1 , 39 @ @ < nl > + package im . actor . server . session < nl > + < nl > + import akka . testkit . TestProbe < nl > + import im . actor . api . rpc . sequence . RequestSubscribeToOnline < nl > + import im . actor . concurrent . FutureExt < nl > + import im . actor . server . ServiceSpecHelpers < nl > + import im . actor . server . acl . ACLUtils < nl > + import org . scalatest . concurrent . Futures < nl > + < nl > + import scala . concurrent . duration . _ < nl > + import scala . util . Random < nl > + < nl > + final class ConcurrentSubscriptionsSpec extends BaseSessionSpec with ServiceSpecHelpers with Futures { < nl > + behavior of " Session " < nl > + < nl > + it should " not stale on lots of concurrent subscriptions " in concurrentSubscriptions < nl > + < nl > + implicit val probe = TestProbe ( ) < nl > + < nl > + def concurrentSubscriptions ( ) : Unit = { < nl > + val ( _ , authId , _ ) = createUser ( ) < nl > + < nl > + val sessionId = Random . nextLong ( ) < nl > + < nl > + val UsersNum = 100 < nl > + < nl > + val peersFuture = FutureExt . ftraverse ( 1 to UsersNum map ( _ ⇒ createUser ( ) . _ 1 . id ) ) ( ACLUtils . getUserOutPeer ( _ , authId ) ) < nl > + < nl > + whenReady ( peersFuture ) { peers ⇒ < nl > + peers . foreach { peer ⇒ < nl > + sendRequest ( authId , sessionId , sessionRegion . ref , RequestSubscribeToOnline ( Vector ( peer ) ) ) < nl > + } < nl > + } < nl > + < nl > + val expectedMessagesNum = UsersNum * 3 + 1 / / NewSession + acks + respones + presences < nl > + < nl > + probe . receiveN ( expectedMessagesNum , 10 . seconds ) < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / project / Build . scala b / actor - server / project / Build . scala < nl > index 7f4354c . . 7131a04 100644 < nl > - - - a / actor - server / project / Build . scala < nl > + + + b / actor - server / project / Build . scala < nl > @ @ - 97 , 7 + 97 , 6 @ @ object Build extends sbt . Build with Versioning with Releasing with Publishing { < nl > actorFrontend , < nl > actorHttpApi , < nl > actorModels , < nl > - actorNotifications , < nl > actorPersist , < nl > actorPresences , < nl > actorSession ,

TEST DIFF:
diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserRepo . scala 
 index 457ccf8 . . e5b2403 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserRepo . scala 
 @ @ - 5 , 6 + 5 , 7 @ @ import java . time . { ZoneOffset , LocalDateTime } 
 import im . actor . server . db . ActorPostgresDriver . api . _ 
 
 import im . actor . server . model 
 + import im . actor . util . misc . PhoneNumberUtils 
 
 import scala . concurrent . ExecutionContext 
 
 @ @ - 103 , 7 + 104 , 10 @ @ object UserRepo { 
 for { 
 e ← idsByEmailC ( query ) . result 
 n ← idsByNicknameC ( query ) . result 
 - p ← idByPhoneC ( query . toLong ) . result 
 + p ← PhoneNumberUtils . normalizeStr ( query ) 
 + . headOption 
 + . map ( idByPhoneC ( _ ) . result ) 
 + . getOrElse ( DBIO . successful ( Nil ) ) 
 } yield e + + n + + p 
 
 def setNickname ( userId : Int , nickname : Option [ String ] ) = 
 diff - - git a / actor - server / notes / 1 . 0 . 73 . markdown b / actor - server / notes / 1 . 0 . 73 . markdown 
 index db2eb24 . . e93cf63 100644 
 - - - a / actor - server / notes / 1 . 0 . 73 . markdown 
 + + + b / actor - server / notes / 1 . 0 . 73 . markdown 
 @ @ - 1 + 1 , 2 @ @ 
 - * record connection time in kamon 
 \ No newline at end of file 
 + * record connection time in kamon 
 + * fixed user search exception 
 \ No newline at end of file 
 diff - - git a / actor - server / project / Build . scala b / actor - server / project / Build . scala 
 index 525dc1d . . 4b49a44 100644 
 - - - a / actor - server / project / Build . scala 
 + + + b / actor - server / project / Build . scala 
 @ @ - 269 , 7 + 269 , 7 @ @ object Build extends sbt . Build with Versioning with Releasing with Publishing { 
 libraryDependencies + + = Dependencies . persist 
 ) 
 ) 
 - . dependsOn ( actorModels ) 
 + . dependsOn ( actorModels , actorRuntime ) 
 
 lazy val actorTestkit = Project ( 
 id = " actor - testkit " ,

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala 
 index 734f1f9 . . ee3b88c 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala 
 @ @ - 5 , 7 + 5 , 7 @ @ import java . security . MessageDigest 
 
 import akka . actor . ActorSystem 
 import akka . util . Timeout 
 - import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType , ApiOutPeer } 
 + import im . actor . api . rpc . peers . { ApiUserOutPeer , ApiPeer , ApiPeerType , ApiOutPeer } 
 import im . actor . server . group . { GroupExtension , GroupViewRegion , GroupOffice } 
 import im . actor . server . models 
 import im . actor . server . user . { UserExtension , UserViewRegion , UserOffice } 
 @ @ - 83 , 4 + 83 , 9 @ @ object ACLUtils { 
 UserExtension ( s ) . getAccessHash ( peer . id , clientAuthId ) map ( ApiOutPeer ( ApiPeerType . Private , peer . id , _ ) ) 
 } 
 } 
 + 
 + def getUserOutPeer ( userId : Int , clientAuthId : Long ) ( implicit s : ActorSystem ) : Future [ ApiUserOutPeer ] = { 
 + import s . dispatcher 
 + UserExtension ( s ) . getAccessHash ( userId , clientAuthId ) map ( ApiUserOutPeer ( userId , _ ) ) 
 + } 
 } 
 diff - - git a / actor - server / actor - notifications / src / main / scala / im / actor / server / notifications / NotificationsSender . scala b / actor - server / actor - notifications / src / main / scala / im / actor / server / notifications / NotificationsSender . scala 
 index b81be73 . . 3a8b1b8 100644 
 - - - a / actor - server / actor - notifications / src / main / scala / im / actor / server / notifications / NotificationsSender . scala 
 + + + b / actor - server / actor - notifications / src / main / scala / im / actor / server / notifications / NotificationsSender . scala 
 @ @ - 44 , 7 + 44 , 7 @ @ object NotificationsSender { 
 Props ( classOf [ NotificationsSender ] , config , engine ) 
 } 
 
 - class NotificationsSender ( implicit config : NotificationsConfig , engine : SmsEngine ) extends Actor with ActorLogging { 
 + private class NotificationsSender ( implicit config : NotificationsConfig , engine : SmsEngine ) extends Actor with ActorLogging { 
 
 import AnyRefLogSource . _ 
 import NotificationsSender . _ 
 diff - - git a / actor - server / actor - notifications / src / main / scala / im / actor / server / notifications / UnreadWatcher . scala b / actor - server / actor - notifications / src / main / scala / im / actor / server / notifications / UnreadWatcher . scala 
 index ea7e3c7 . . 364cb94 100644 
 - - - a / actor - server / actor - notifications / src / main / scala / im / actor / server / notifications / UnreadWatcher . scala 
 + + + b / actor - server / actor - notifications / src / main / scala / im / actor / server / notifications / UnreadWatcher . scala 
 @ @ - 12 , 7 + 12 , 7 @ @ import slick . driver . PostgresDriver . api . _ 
 
 import scala . concurrent . Future 
 
 - class UnreadWatcher ( ) ( implicit system : ActorSystem , config : UnreadWatcherConfig ) { 
 + private class UnreadWatcher ( ) ( implicit system : ActorSystem , config : UnreadWatcherConfig ) { 
 import system . dispatcher 
 
 private val db : Database = DbExtension ( system ) . db 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / AuthSessionRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / AuthSessionRepo . scala 
 index 7d91acd . . 4d1b8af 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / AuthSessionRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / AuthSessionRepo . scala 
 @ @ - 41 , 6 + 41 , 10 @ @ object AuthSessionRepo { 
 
 val activeSessions = sessions . filter ( _ . deletedAt . isEmpty ) 
 
 + def byDeviceHash ( deviceHash : Rep [ Array [ Byte ] ] ) = 
 + activeSessions . filter ( _ . deviceHash = = = deviceHash ) 
 + val byDeviceHashC = Compiled ( byDeviceHash _ ) 
 + 
 def create ( session : models . AuthSession ) = 
 sessions + = session 
 
 @ @ - 57 , 7 + 61 , 7 @ @ object AuthSessionRepo { 
 activeSessions . filter ( _ . authId = = = authId ) . map ( _ . appId ) . result . headOption 
 
 def findByDeviceHash ( deviceHash : Array [ Byte ] ) = 
 - activeSessions . filter ( _ . deviceHash = = = deviceHash ) . result 
 + byDeviceHashC ( deviceHash ) . result 
 
 def delete ( userId : Int , id : Int ) = 
 activeSessions . filter ( s ⇒ s . userId = = = userId & & s . id = = = id ) . map ( _ . deletedAt ) . update ( Some ( new DateTime ) ) 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / AuthSmsCodeObsoleteRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / AuthSmsCodeObsoleteRepo . scala 
 index 8875952 . . 49f9c8b 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / AuthSmsCodeObsoleteRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / AuthSmsCodeObsoleteRepo . scala 
 @ @ - 17 , 12 + 17 , 16 @ @ final class AuthSmsCodeObsoleteTable ( tag : Tag ) extends Table [ models . AuthSmsCodeO 
 object AuthSmsCodeObsoleteRepo { 
 val codes = TableQuery [ AuthSmsCodeObsoleteTable ] 
 
 + def byPhoneNumber ( number : Rep [ Long ] ) = 
 + codes . filter ( c ⇒ c . phoneNumber = = = number & & c . isDeleted = = = false ) 
 + private val byPhoneNumberC = Compiled ( byPhoneNumber _ ) 
 + 
 def create ( id : Long , phoneNumber : Long , smsHash : String , smsCode : String ) = 
 codes + = models . AuthSmsCodeObsolete ( id , phoneNumber , smsHash , smsCode ) 
 
 def findByPhoneNumber ( number : Long ) = 
 - codes . filter ( c ⇒ c . phoneNumber = = = number & & c . isDeleted = = = false ) . result 
 + byPhoneNumberC ( number ) . result 
 
 def deleteByPhoneNumber ( number : Long ) = 
 - codes . filter ( _ . phoneNumber = = = number ) . map ( _ . isDeleted ) . update ( true ) 
 + byPhoneNumber ( number ) . map ( _ . isDeleted ) . update ( true ) 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 index 5c8abae . . 2f57d1c 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 @ @ - 367 , 7 + 367 , 7 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( 
 smsHash = smsHash , 
 smsCode = smsCode 
 ) 
 - ) yield ( normPhoneNumber : : smsHash : : smsCode : : HNil ) 
 + ) yield normPhoneNumber : : smsHash : : smsCode : : HNil 
 } . flatMap { res ⇒ 
 persist . UserPhoneRepo . exists ( normPhoneNumber ) map ( res : + _ ) 
 } . map { 
 @ @ - 436 , 7 + 436 , 7 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( 
 val action = ( for { 
 optCode ← persist . AuthSmsCodeObsoleteRepo . findByPhoneNumber ( normPhoneNumber ) . headOption 
 optPhone ← persist . UserPhoneRepo . findByPhoneNumber ( normPhoneNumber ) . headOption 
 - } yield ( optCode : : optPhone : : HNil ) ) . flatMap { 
 + } yield optCode : : optPhone : : HNil ) . flatMap { 
 case None : : _ : : HNil ⇒ DBIO . successful ( Error ( AuthErrors . PhoneCodeExpired ) ) 
 case Some ( smsCodeModel ) : : _ : : HNil if smsCodeModel . smsHash ! = smsHash ⇒ 
 DBIO . successful ( Error ( AuthErrors . PhoneCodeExpired ) ) 
 diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 index c2af445 . . 9e8a2f0 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 @ @ - 1 , 23 + 1 , 22 @ @ 
 package im . actor . server . session 
 
 - import scala . annotation . tailrec 
 - import scala . collection . immutable 
 - import scala . concurrent . { Promise , Future } 
 - import scala . concurrent . duration . _ 
 - import scala . language . postfixOps 
 - import scala . util . control . NoStackTrace 
 - import scala . util . { Try , Failure , Success } 
 - 
 import akka . actor . _ 
 import akka . pattern . pipe 
 import akka . stream . actor . _ 
 - import scodec . bits . _ 
 - 
 import im . actor . api . rpc . RpcInternalError 
 - import im . actor . server . api . rpc . { RpcResultCodec , RpcApiService } 
 import im . actor . server . api . rpc . RpcApiService . RpcResponse 
 + import im . actor . server . api . rpc . { RpcApiService , RpcResultCodec } 
 import im . actor . server . mtproto . protocol . { ProtoMessage , RpcResponseBox } 
 import im . actor . util . cache . CacheHelpers . _ 
 + import scodec . bits . _ 
 + 
 + import scala . annotation . tailrec 
 + import scala . collection . immutable 
 + import scala . concurrent . duration . _ 
 + import scala . concurrent . { Future , Promise } 
 + import scala . language . postfixOps 
 + import scala . util . control . NoStackTrace 
 + import scala . util . { Failure , Success , Try } 
 
 private [ session ] object RpcHandler { 
 private [ session ] val MaxCacheSize = 100L 
 @ @ - 26 , 6 + 25 , 7 @ @ private [ session ] object RpcHandler { 
 def props = Props ( classOf [ RpcHandler ] ) 
 
 private case class CachedResponse ( rsp : RpcApiService . RpcResponse ) 
 + 
 } 
 
 private [ session ] object RequestHandler { 
 @ @ - 68 , 10 + 68 , 8 @ @ private [ session ] class RpcHandler extends ActorSubscriber with ActorPublisher [ Pr 
 
 import ActorPublisherMessage . _ 
 import ActorSubscriberMessage . _ 
 - 
 - import SessionStreamMessage . _ 
 - 
 import RpcHandler . _ 
 + import SessionStreamMessage . _ 
 
 private implicit val ec = context . dispatcher 
 
 @ @ - 94 , 7 + 92 , 7 @ @ private [ session ] class RpcHandler extends ActorSubscriber with ActorPublisher [ Pr 
 Option ( responseCache . getIfPresent ( messageId ) ) match { 
 case Some ( rspFuture ) ⇒ 
 log . debug ( " Publishing cached RpcResponse for messageId : { } " , messageId ) 
 - rspFuture map ( CachedResponse ( _ ) ) pipeTo self 
 + rspFuture map CachedResponse pipeTo self 
 case None ⇒ 
 requestQueue + = ( messageId → requestBytes ) 
 assert ( requestQueue . size < = MaxRequestQueueSize , s " queued too many : $ { requestQueue . size } " ) 
 @ @ - 108 , 7 + 106 , 7 @ @ private [ session ] class RpcHandler extends ActorSubscriber with ActorPublisher [ Pr 
 rpcApiService , 
 RpcApiService . HandleRpcRequest ( messageId , requestBytes , clientData ) 
 ) , 
 - s " handler - $ { messageId } " 
 + s " handler - $ messageId " 
 ) 
 
 responseCache . put ( messageId , responsePromise . future ) 
 diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala 
 index 27b3f07 . . 11b4f4e 100644 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala 
 + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala 
 @ @ - 130 , 11 + 130 , 11 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi 
 appId = 42 , 
 appKey = " appKey " , 
 isSilent = false 
 - ) ( rpcapi . ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 5 . seconds ) 
 + ) ( rpcapi . ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 10 . seconds ) 
 
 res match { 
 case \ / - ( rsp ) ⇒ rsp . user 
 - case - \ / ( e ) ⇒ fail ( s " Got RpcError $ { e } " ) 
 + case - \ / ( e ) ⇒ fail ( s " Got RpcError $ e " ) 
 } 
 } 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala 
 index aade85c . . 3728479 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala 
 @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . _ 
 import akka . testkit . TestProbe 
 import akka . util . Timeout 
 import com . google . protobuf . ByteString 
 - import im . actor . api . rpc . RpcResult 
 + import im . actor . api . rpc . { Request , RpcRequest , RpcResult } 
 import im . actor . api . rpc . codecs . _ 
 import im . actor . api . rpc . sequence . { SeqUpdate , WeakUpdate } 
 import im . actor . server 
 @ @ - 34 , 13 + 34 , 12 @ @ abstract class BaseSessionSpec ( _ system : ActorSystem = { 
 with FlatSpecLike 
 with ScalaFutures 
 with Matchers 
 - with ActorSerializerPrepare { 
 + with ActorSerializerPrepare 
 + with ServiceSpecHelpers { 
 
 override implicit def patienceConfig : PatienceConfig = 
 new PatienceConfig ( timeout = Span ( 30 , Seconds ) ) 
 
 - protected implicit val timeout = Timeout ( 10 . seconds ) 
 - 
 protected implicit val ec = system . dispatcher 
 
 protected implicit val db : PostgresDriver . api . Database = DbExtension ( _ system ) . db 
 @ @ - 55 , 7 + 54 , 7 @ @ abstract class BaseSessionSpec ( _ system : ActorSystem = { 
 
 protected val oauthGoogleConfig = OAuth2GoogleConfig . load ( system . settings . config . getConfig ( " services . google . oauth " ) ) 
 protected implicit val oauth2Service = new GoogleProvider ( oauthGoogleConfig ) 
 - protected val authService = new AuthServiceImpl ( new DummyCodeActivation ) 
 + protected implicit val authService = new AuthServiceImpl ( new DummyCodeActivation ) 
 protected val sequenceConfig = SequenceServiceConfig . load . toOption . get 
 protected val sequenceService = new SequenceServiceImpl ( sequenceConfig ) 
 
 @ @ - 189 , 4 + 188 , 15 @ @ abstract class BaseSessionSpec ( _ system : ActorSystem = { 
 probe . ref 
 ) 
 } 
 + 
 + protected def sendRequest ( authId : Long , sessionId : Long , session : ActorRef , messageId : Long , request : RpcRequest ) ( implicit probe : TestProbe ) : Unit = { 
 + val rqBox = RpcRequestBox ( RequestCodec . encode ( Request ( request ) ) . require ) 
 + sendMessageBox ( authId , sessionId , session , messageId , rqBox ) 
 + } 
 + 
 + protected def sendRequest ( authId : Long , sessionId : Long , session : ActorRef , request : RpcRequest ) ( implicit probe : TestProbe ) : Long = { 
 + val messageId = Random . nextLong ( ) 
 + sendRequest ( authId , sessionId , session , messageId , request ) 
 + messageId 
 + } 
 } 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / ConcurrentSubscriptionsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / ConcurrentSubscriptionsSpec . scala 
 new file mode 100644 
 index 0000000 . . 3d93c35 
 - - - / dev / null 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / ConcurrentSubscriptionsSpec . scala 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + package im . actor . server . session 
 + 
 + import akka . testkit . TestProbe 
 + import im . actor . api . rpc . sequence . RequestSubscribeToOnline 
 + import im . actor . concurrent . FutureExt 
 + import im . actor . server . ServiceSpecHelpers 
 + import im . actor . server . acl . ACLUtils 
 + import org . scalatest . concurrent . Futures 
 + 
 + import scala . concurrent . duration . _ 
 + import scala . util . Random 
 + 
 + final class ConcurrentSubscriptionsSpec extends BaseSessionSpec with ServiceSpecHelpers with Futures { 
 + behavior of " Session " 
 + 
 + it should " not stale on lots of concurrent subscriptions " in concurrentSubscriptions 
 + 
 + implicit val probe = TestProbe ( ) 
 + 
 + def concurrentSubscriptions ( ) : Unit = { 
 + val ( _ , authId , _ ) = createUser ( ) 
 + 
 + val sessionId = Random . nextLong ( ) 
 + 
 + val UsersNum = 100 
 + 
 + val peersFuture = FutureExt . ftraverse ( 1 to UsersNum map ( _ ⇒ createUser ( ) . _ 1 . id ) ) ( ACLUtils . getUserOutPeer ( _ , authId ) ) 
 + 
 + whenReady ( peersFuture ) { peers ⇒ 
 + peers . foreach { peer ⇒ 
 + sendRequest ( authId , sessionId , sessionRegion . ref , RequestSubscribeToOnline ( Vector ( peer ) ) ) 
 + } 
 + } 
 + 
 + val expectedMessagesNum = UsersNum * 3 + 1 / / NewSession + acks + respones + presences 
 + 
 + probe . receiveN ( expectedMessagesNum , 10 . seconds ) 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / project / Build . scala b / actor - server / project / Build . scala 
 index 7f4354c . . 7131a04 100644 
 - - - a / actor - server / project / Build . scala 
 + + + b / actor - server / project / Build . scala 
 @ @ - 97 , 7 + 97 , 6 @ @ object Build extends sbt . Build with Versioning with Releasing with Publishing { 
 actorFrontend , 
 actorHttpApi , 
 actorModels , 
 - actorNotifications , 
 actorPersist , 
 actorPresences , 
 actorSession ,
