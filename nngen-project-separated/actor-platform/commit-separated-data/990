BLEU SCORE: 0.11868405219520975

TEST MSG: feat ( server : persist ) : configurable queue size
GENERATED MSG: fix ( server ) : fixed db configuration

TEST DIFF (one line): diff - - git a / actor - server / actor - persist / src / main / resources / reference . conf b / actor - server / actor - persist / src / main / resources / reference . conf < nl > index 7fdeacf . . 79370a3 100644 < nl > - - - a / actor - server / actor - persist / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - persist / src / main / resources / reference . conf < nl > @ @ - 19 , 5 + 19 , 6 @ @ services { < nl > < nl > numThreads : 8 < nl > maxConnections : 16 < nl > + queueSize : 10000 < nl > } < nl > } < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala < nl > index 467463e . . 14c8a56 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala < nl > @ @ - 9 , 6 + 9 , 7 @ @ import org . flywaydb . core . Flyway < nl > import slick . driver . PostgresDriver . api . Database < nl > import slick . jdbc . hikaricp . HikariCPJdbcDataSource < nl > import slick . jdbc . JdbcDataSource < nl > + import slick . util . AsyncExecutor < nl > < nl > import scala . util . { Failure , Success , Try } < nl > < nl > @ @ - 34 , 8 + 35 , 9 @ @ object DbExtension extends ExtensionId [ DbExtensionImpl ] with ExtensionIdProvider < nl > val log = Logging ( system , getClass ) < nl > < nl > val sqlConfig = system . settings . config . getConfig ( " services . postgresql " ) < nl > + val queueSize = sqlConfig . getInt ( " queueSize " ) < nl > val ds = initDs ( sqlConfig ) . get < nl > - val db = initDb ( ds ) < nl > + val db = initDb ( ds , queueSize ) < nl > < nl > system . registerOnTermination { < nl > db . close ( ) < nl > @ @ - 66 , 8 + 68 , 8 @ @ object DbExtension extends ExtensionId [ DbExtensionImpl ] with ExtensionIdProvider < nl > ) ) . resolve ( ) , null , " main " , getClass . getClassLoader ) < nl > } < nl > < nl > - private def initDb ( ds : HikariCPJdbcDataSource ) : Database = { < nl > + private def initDb ( ds : HikariCPJdbcDataSource , queueSize : Int ) : Database = { < nl > JNDI . initialContext . rebind ( JndiPath , ds . ds ) < nl > - Database . forSource ( ds ) < nl > + Database . forSource ( ds , executor = AsyncExecutor ( " AsyncExecutor . actor " , 20 , queueSize ) ) < nl > } < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - persist / src / main / resources / reference . conf b / actor - server / actor - persist / src / main / resources / reference . conf < nl > index 7fe8926 . . 8172b37 100644 < nl > - - - a / actor - server / actor - persist / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - persist / src / main / resources / reference . conf < nl > @ @ - 20 , 7 + 20 , 5 @ @ services { < nl > password : $ { ? DB _ PASSWORD } < nl > < nl > driver : " org . postgresql . Driver " < nl > - < nl > - url : " jdbc : postgresql : / / " $ { services . postgresql . host } " : " $ { services . postgresql . port } " / " $ { services . postgresql . db } < nl > } < nl > } < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala < nl > index 3a4686f . . 098da6a 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala < nl > @ @ - 8 , 7 + 8 , 7 @ @ import javax . sql . DataSource < nl > import scala . util . Try < nl > < nl > import akka . actor . _ < nl > - import com . typesafe . config . Config < nl > + import com . typesafe . config . { ConfigFactory , Config } < nl > import com . github . kxbmap . configs . _ < nl > import org . flywaydb . core . Flyway < nl > import slick . driver . PostgresDriver . api . Database < nl > @ @ - 48 , 12 + 48 , 16 @ @ object DbExtension extends ExtensionId [ DbExtensionImpl ] with ExtensionIdProvider < nl > < nl > private def initDs ( sqlConfig : Config ) : Try [ HikariCPJdbcDataSource ] = { < nl > for { < nl > - _ ← sqlConfig . get [ Try [ String ] ] ( " host " ) < nl > - _ ← sqlConfig . get [ Try [ Int ] ] ( " port " ) < nl > - _ ← sqlConfig . get [ Try [ String ] ] ( " db " ) < nl > + host ← sqlConfig . get [ Try [ String ] ] ( " host " ) < nl > + port ← sqlConfig . get [ Try [ Int ] ] ( " port " ) < nl > + db ← sqlConfig . get [ Try [ String ] ] ( " db " ) < nl > _ ← sqlConfig . get [ Try [ String ] ] ( " user " ) < nl > _ ← sqlConfig . get [ Try [ String ] ] ( " password " ) < nl > - } yield HikariCPJdbcDataSource . forConfig ( sqlConfig , null , " main " ) < nl > + } yield HikariCPJdbcDataSource . forConfig ( sqlConfig . withFallback ( ConfigFactory . parseString ( < nl > + s " " " < nl > + | url : " jdbc : postgresql : / / " $ { host } " : " $ { port } " / " $ { db } < nl > + " " " . stripMargin < nl > + ) ) . resolve ( ) , null , " main " ) < nl > } < nl > < nl > private def initDb ( ds : HikariCPJdbcDataSource ) : Database = {

TEST DIFF:
diff - - git a / actor - server / actor - persist / src / main / resources / reference . conf b / actor - server / actor - persist / src / main / resources / reference . conf 
 index 7fdeacf . . 79370a3 100644 
 - - - a / actor - server / actor - persist / src / main / resources / reference . conf 
 + + + b / actor - server / actor - persist / src / main / resources / reference . conf 
 @ @ - 19 , 5 + 19 , 6 @ @ services { 
 
 numThreads : 8 
 maxConnections : 16 
 + queueSize : 10000 
 } 
 } 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala 
 index 467463e . . 14c8a56 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala 
 @ @ - 9 , 6 + 9 , 7 @ @ import org . flywaydb . core . Flyway 
 import slick . driver . PostgresDriver . api . Database 
 import slick . jdbc . hikaricp . HikariCPJdbcDataSource 
 import slick . jdbc . JdbcDataSource 
 + import slick . util . AsyncExecutor 
 
 import scala . util . { Failure , Success , Try } 
 
 @ @ - 34 , 8 + 35 , 9 @ @ object DbExtension extends ExtensionId [ DbExtensionImpl ] with ExtensionIdProvider 
 val log = Logging ( system , getClass ) 
 
 val sqlConfig = system . settings . config . getConfig ( " services . postgresql " ) 
 + val queueSize = sqlConfig . getInt ( " queueSize " ) 
 val ds = initDs ( sqlConfig ) . get 
 - val db = initDb ( ds ) 
 + val db = initDb ( ds , queueSize ) 
 
 system . registerOnTermination { 
 db . close ( ) 
 @ @ - 66 , 8 + 68 , 8 @ @ object DbExtension extends ExtensionId [ DbExtensionImpl ] with ExtensionIdProvider 
 ) ) . resolve ( ) , null , " main " , getClass . getClassLoader ) 
 } 
 
 - private def initDb ( ds : HikariCPJdbcDataSource ) : Database = { 
 + private def initDb ( ds : HikariCPJdbcDataSource , queueSize : Int ) : Database = { 
 JNDI . initialContext . rebind ( JndiPath , ds . ds ) 
 - Database . forSource ( ds ) 
 + Database . forSource ( ds , executor = AsyncExecutor ( " AsyncExecutor . actor " , 20 , queueSize ) ) 
 } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - persist / src / main / resources / reference . conf b / actor - server / actor - persist / src / main / resources / reference . conf 
 index 7fe8926 . . 8172b37 100644 
 - - - a / actor - server / actor - persist / src / main / resources / reference . conf 
 + + + b / actor - server / actor - persist / src / main / resources / reference . conf 
 @ @ - 20 , 7 + 20 , 5 @ @ services { 
 password : $ { ? DB _ PASSWORD } 
 
 driver : " org . postgresql . Driver " 
 - 
 - url : " jdbc : postgresql : / / " $ { services . postgresql . host } " : " $ { services . postgresql . port } " / " $ { services . postgresql . db } 
 } 
 } 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala 
 index 3a4686f . . 098da6a 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala 
 @ @ - 8 , 7 + 8 , 7 @ @ import javax . sql . DataSource 
 import scala . util . Try 
 
 import akka . actor . _ 
 - import com . typesafe . config . Config 
 + import com . typesafe . config . { ConfigFactory , Config } 
 import com . github . kxbmap . configs . _ 
 import org . flywaydb . core . Flyway 
 import slick . driver . PostgresDriver . api . Database 
 @ @ - 48 , 12 + 48 , 16 @ @ object DbExtension extends ExtensionId [ DbExtensionImpl ] with ExtensionIdProvider 
 
 private def initDs ( sqlConfig : Config ) : Try [ HikariCPJdbcDataSource ] = { 
 for { 
 - _ ← sqlConfig . get [ Try [ String ] ] ( " host " ) 
 - _ ← sqlConfig . get [ Try [ Int ] ] ( " port " ) 
 - _ ← sqlConfig . get [ Try [ String ] ] ( " db " ) 
 + host ← sqlConfig . get [ Try [ String ] ] ( " host " ) 
 + port ← sqlConfig . get [ Try [ Int ] ] ( " port " ) 
 + db ← sqlConfig . get [ Try [ String ] ] ( " db " ) 
 _ ← sqlConfig . get [ Try [ String ] ] ( " user " ) 
 _ ← sqlConfig . get [ Try [ String ] ] ( " password " ) 
 - } yield HikariCPJdbcDataSource . forConfig ( sqlConfig , null , " main " ) 
 + } yield HikariCPJdbcDataSource . forConfig ( sqlConfig . withFallback ( ConfigFactory . parseString ( 
 + s " " " 
 + | url : " jdbc : postgresql : / / " $ { host } " : " $ { port } " / " $ { db } 
 + " " " . stripMargin 
 + ) ) . resolve ( ) , null , " main " ) 
 } 
 
 private def initDb ( ds : HikariCPJdbcDataSource ) : Database = {
