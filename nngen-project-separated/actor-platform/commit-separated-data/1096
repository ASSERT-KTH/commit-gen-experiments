BLEU SCORE: 0.2984745896009823

TEST MSG: wip ( core ) : Adding Encryption State holder
GENERATED MSG: feat ( core ) : Uploading ephemeral keys

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / EncryptionModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / EncryptionModule . java < nl > index d399b21 . . 0fdedbf 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / EncryptionModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / EncryptionModule . java < nl > @ @ - 1 , 8 + 1 , 12 @ @ < nl > package im . actor . core . modules . internal ; < nl > < nl > + import java . util . HashMap ; < nl > + < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . internal . encryption . EncryptedStateActor ; < nl > import im . actor . core . modules . internal . encryption . KeyManagerActor ; < nl > + import im . actor . runtime . actors . Actor ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . actors . Props ; < nl > @ @ - 12 , 13 + 16 , 13 @ @ import static im . actor . runtime . actors . ActorSystem . system ; < nl > public class EncryptionModule extends AbsModule { < nl > < nl > private ActorRef keyManager ; < nl > + private HashMap < Integer , ActorRef > encryptedStates = new HashMap < Integer , ActorRef > ( ) ; < nl > < nl > public EncryptionModule ( ModuleContext context ) { < nl > super ( context ) ; < nl > } < nl > < nl > public void run ( ) { < nl > - < nl > keyManager = system ( ) . actorOf ( Props . create ( KeyManagerActor . class , < nl > new ActorCreator < KeyManagerActor > ( ) { < nl > @ Override < nl > @ @ - 27 , 4 + 31 , 22 @ @ public class EncryptionModule extends AbsModule { < nl > } < nl > } ) , " encryption / keys " ) ; < nl > } < nl > + < nl > + public ActorRef getKeyManager ( ) { < nl > + return keyManager ; < nl > + } < nl > + < nl > + public ActorRef getEncryptedChatManager ( final int uid ) { < nl > + synchronized ( encryptedStates ) { < nl > + if ( ! encryptedStates . containsKey ( uid ) ) { < nl > + encryptedStates . put ( uid , system ( ) . actorOf ( Props . create ( EncryptedStateActor . class , new ActorCreator < EncryptedStateActor > ( ) { < nl > + @ Override < nl > + public EncryptedStateActor create ( ) { < nl > + return new EncryptedStateActor ( uid , context ( ) ) ; < nl > + } < nl > + } ) , " encryption / uid _ " + uid ) ) ; < nl > + } < nl > + return encryptedStates . get ( uid ) ; < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index c693e41 . . 5cc209c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 220 , 6 + 220 , 9 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } ) , " actor / conv _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) + " / history " ) ) ; < nl > } < nl > } < nl > + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + context ( ) . getEncryption ( ) . getEncryptedChatManager ( peer . getPeerId ( ) ) ; < nl > + } < nl > } < nl > < nl > public ActorRef getConversationHistoryActor ( final Peer peer ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / EncryptedStateActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / EncryptedStateActor . java < nl > new file mode 100644 < nl > index 0000000 . . f22e3e4 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / EncryptedStateActor . java < nl > @ @ - 0 , 0 + 1 , 134 @ @ < nl > + package im . actor . core . modules . internal . encryption ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . internal . encryption . entity . EncryptedBox ; < nl > + import im . actor . core . modules . internal . encryption . entity . EncryptionKey ; < nl > + import im . actor . core . util . ModuleActor ; < nl > + import im . actor . core . util . RandomUtils ; < nl > + import im . actor . runtime . Crypto ; < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . actors . Future ; < nl > + import im . actor . runtime . actors . ask . AskCallback ; < nl > + import im . actor . runtime . actors . ask . AskRequest ; < nl > + import im . actor . runtime . crypto . Curve25519 ; < nl > + < nl > + public class EncryptedStateActor extends ModuleActor { < nl > + < nl > + private static final String TAG = " EncryptedStateActor " ; < nl > + < nl > + private int uid ; < nl > + private EncryptionKey ownIdentityKey ; < nl > + private EncryptionKey theirIdentityKey ; < nl > + private EncryptionKey ownEphermalKey0 ; < nl > + private EncryptionKey theirEphermalKey0 ; < nl > + < nl > + private ArrayList < EncryptionKey > prevOwnKeys = new ArrayList < EncryptionKey > ( ) ; < nl > + private ArrayList < EncryptionKey > prevTheirKeys = new ArrayList < EncryptionKey > ( ) ; < nl > + < nl > + private EncryptionKey currentOwnKey ; < nl > + private EncryptionKey currentTheirKey ; < nl > + < nl > + private byte [ ] rootChainKey ; < nl > + < nl > + private boolean isReady = false ; < nl > + < nl > + public EncryptedStateActor ( int uid , ModuleContext context ) { < nl > + super ( context ) ; < nl > + this . uid = uid ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + super . preStart ( ) ; < nl > + < nl > + if ( ownIdentityKey = = null | | ownEphermalKey0 = = null | | currentOwnKey = = null ) { < nl > + Log . d ( TAG , " Loading own keys for conversation " ) ; < nl > + ask ( context ( ) . getEncryption ( ) . getKeyManager ( ) , new KeyManagerActor . FetchOwnKey ( ) , new AskCallback ( ) { < nl > + @ Override < nl > + public void onResult ( Object obj ) { < nl > + Log . d ( TAG , " Own keys loaded " ) ; < nl > + KeyManagerActor . FetchOwnKeyResult res = ( KeyManagerActor . FetchOwnKeyResult ) obj ; < nl > + ownIdentityKey = res . getIdentityKey ( ) ; < nl > + ownEphermalKey0 = res . getEphemeralKey ( ) ; < nl > + currentOwnKey = new EncryptionKey ( RandomUtils . nextRid ( ) , Curve25519 . keyGen ( Crypto . randomBytes ( 64 ) ) ) ; < nl > + onOwnReady ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + / / Nothing to do < nl > + Log . w ( TAG , " Own keys error " ) ; < nl > + Log . e ( TAG , e ) ; < nl > + < nl > + } < nl > + } ) ; < nl > + } else { < nl > + onOwnReady ( ) ; < nl > + } < nl > + } < nl > + < nl > + private void onOwnReady ( ) { < nl > + Log . w ( TAG , " Own keys ready " ) ; < nl > + } < nl > + < nl > + private void onTheirReady ( ) { < nl > + < nl > + } < nl > + < nl > + private void doEncrypt ( byte [ ] data , Future future ) { < nl > + < nl > + } < nl > + < nl > + private void doDecrypt ( EncryptedBox data , Future future ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public boolean onAsk ( Object message , Future future ) { < nl > + if ( message instanceof EncryptPackage ) { < nl > + doEncrypt ( ( ( EncryptPackage ) message ) . getData ( ) , future ) ; < nl > + return false ; < nl > + } else if ( message instanceof DecryptPackage ) { < nl > + doDecrypt ( ( ( DecryptPackage ) message ) . getEncryptedBox ( ) , future ) ; < nl > + return false ; < nl > + } else { < nl > + return super . onAsk ( message , future ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( ! isReady & & message instanceof AskRequest ) { < nl > + stash ( ) ; < nl > + return ; < nl > + } < nl > + super . onReceive ( message ) ; < nl > + } < nl > + < nl > + public static class EncryptPackage { < nl > + private byte [ ] data ; < nl > + < nl > + public EncryptPackage ( byte [ ] data ) { < nl > + this . data = data ; < nl > + } < nl > + < nl > + public byte [ ] getData ( ) { < nl > + return data ; < nl > + } < nl > + } < nl > + < nl > + public static class DecryptPackage { < nl > + < nl > + private EncryptedBox encryptedBox ; < nl > + < nl > + public DecryptPackage ( EncryptedBox encryptedBox ) { < nl > + this . encryptedBox = encryptedBox ; < nl > + } < nl > + < nl > + public EncryptedBox getEncryptedBox ( ) { < nl > + return encryptedBox ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java < nl > index 4575c45 . . ddbc76e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java < nl > @ @ - 21 , 6 + 21 , 8 @ @ import im . actor . core . network . RpcException ; < nl > import im . actor . runtime . Crypto ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . Storage ; < nl > + import im . actor . runtime . actors . Future ; < nl > + import im . actor . runtime . actors . ask . AskRequest ; < nl > import im . actor . runtime . crypto . Curve25519 ; < nl > import im . actor . runtime . storage . KeyValueRecord ; < nl > import im . actor . runtime . storage . KeyValueStorage ; < nl > @ @ - 33 , 6 + 35 , 7 @ @ public class KeyManagerActor extends ModuleActor { < nl > < nl > private PrivateKeyStorage privateKeyStorage ; < nl > private KeyValueStorage ephemeralStorage ; < nl > + private boolean isReady = false ; < nl > < nl > public KeyManagerActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 183 , 7 + 186 , 7 @ @ public class KeyManagerActor extends ModuleActor { < nl > List < KeyValueRecord > updated = new ArrayList < KeyValueRecord > ( ) ; < nl > for ( EphemeralEncryptionKey k : pendingEphermalKeys ) { < nl > updated . add ( new KeyValueRecord ( k . getEncryptionKey ( ) . getKeyId ( ) , < nl > - k . toByteArray ( ) ) ) ; < nl > + k . markUploaded ( ) . toByteArray ( ) ) ) ; < nl > } < nl > ephemeralStorage . addOrUpdateItems ( updated ) ; < nl > < nl > @ @ - 208 , 5 + 211 , 63 @ @ public class KeyManagerActor extends ModuleActor { < nl > Log . d ( TAG , " Ephemeral Keys are ready " ) ; < nl > < nl > / / Now we can start receiving encrypted messages < nl > + < nl > + isReady = true ; < nl > + unstashAll ( ) ; < nl > + } < nl > + < nl > + private void fetchOwnKey ( Future future ) { < nl > + List < KeyValueRecord > records = ephemeralStorage . loadAllItems ( ) ; < nl > + EphemeralEncryptionKey ephemeralEncryptionKey ; < nl > + try { < nl > + ephemeralEncryptionKey = new EphemeralEncryptionKey ( records . get ( RandomUtils . randomId ( records . size ( ) ) ) . getData ( ) ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + future . onError ( e ) ; < nl > + return ; < nl > + } < nl > + < nl > + future . onResult ( new FetchOwnKeyResult ( privateKeyStorage . getIdentityKey ( ) , ephemeralEncryptionKey . getEncryptionKey ( ) ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof AskRequest & & ! isReady ) { < nl > + stash ( ) ; < nl > + return ; < nl > + } < nl > + super . onReceive ( message ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public boolean onAsk ( Object message , Future future ) { < nl > + if ( message instanceof FetchOwnKey ) { < nl > + fetchOwnKey ( future ) ; < nl > + return false ; < nl > + } < nl > + return super . onAsk ( message , future ) ; < nl > + } < nl > + < nl > + public static class FetchOwnKey { < nl > + < nl > + } < nl > + < nl > + public static class FetchOwnKeyResult { < nl > + < nl > + private EncryptionKey identityKey ; < nl > + private EncryptionKey ephemeralKey ; < nl > + < nl > + public FetchOwnKeyResult ( EncryptionKey identityKey , EncryptionKey ephemeralKey ) { < nl > + this . identityKey = identityKey ; < nl > + this . ephemeralKey = ephemeralKey ; < nl > + } < nl > + < nl > + public EncryptionKey getIdentityKey ( ) { < nl > + return identityKey ; < nl > + } < nl > + < nl > + public EncryptionKey getEphemeralKey ( ) { < nl > + return ephemeralKey ; < nl > + } < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EncryptedBox . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EncryptedBox . java < nl > new file mode 100644 < nl > index 0000000 . . 4331e40 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EncryptedBox . java < nl > @ @ - 0 , 0 + 1 , 20 @ @ < nl > + package im . actor . core . modules . internal . encryption . entity ; < nl > + < nl > + public class EncryptedBox { < nl > + < nl > + private final EncryptedBoxKey [ ] keys ; < nl > + private final byte [ ] encryptedPackage ; < nl > + < nl > + public EncryptedBox ( EncryptedBoxKey [ ] keys , byte [ ] encryptedPackage ) { < nl > + this . keys = keys ; < nl > + this . encryptedPackage = encryptedPackage ; < nl > + } < nl > + < nl > + public EncryptedBoxKey [ ] getKeys ( ) { < nl > + return keys ; < nl > + } < nl > + < nl > + public byte [ ] getEncryptedPackage ( ) { < nl > + return encryptedPackage ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EncryptedBoxKey . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EncryptedBoxKey . java < nl > new file mode 100644 < nl > index 0000000 . . c8ab76d < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EncryptedBoxKey . java < nl > @ @ - 0 , 0 + 1 , 26 @ @ < nl > + package im . actor . core . modules . internal . encryption . entity ; < nl > + < nl > + public class EncryptedBoxKey { < nl > + < nl > + private final int uid ; < nl > + private final int keyGroupId ; < nl > + private final byte [ ] encryptedKey ; < nl > + < nl > + public EncryptedBoxKey ( int uid , int keyGroupId , byte [ ] encryptedKey ) { < nl > + this . uid = uid ; < nl > + this . keyGroupId = keyGroupId ; < nl > + this . encryptedKey = encryptedKey ; < nl > + } < nl > + < nl > + public int getUid ( ) { < nl > + return uid ; < nl > + } < nl > + < nl > + public int getKeyGroupId ( ) { < nl > + return keyGroupId ; < nl > + } < nl > + < nl > + public byte [ ] getEncryptedKey ( ) { < nl > + return encryptedKey ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / RandomUtils . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / RandomUtils . java < nl > index b3eee49 . . 929fecb 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / RandomUtils . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / RandomUtils . java < nl > @ @ - 13 , 4 + 13 , 8 @ @ public class RandomUtils { < nl > public static synchronized long nextRid ( ) { < nl > return RANDOM . nextLong ( ) ; < nl > } < nl > + < nl > + public static synchronized int randomId ( int n ) { < nl > + return RANDOM . nextInt ( n ) ; < nl > + } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java < nl > index c214949 . . c58469c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java < nl > @ @ - 7 , 12 + 7 , 15 @ @ import java . util . List ; < nl > import im . actor . core . api . ApiEncryptionKey ; < nl > import im . actor . core . api . ApiEncryptionKeySignature ; < nl > import im . actor . core . api . rpc . RequestCreateNewKeyGroup ; < nl > + import im . actor . core . api . rpc . RequestUploadEphermalKey ; < nl > import im . actor . core . api . rpc . ResponseCreateNewKeyGroup ; < nl > + import im . actor . core . api . rpc . ResponseVoid ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . internal . encryption . entity . EncryptionKey ; < nl > - import im . actor . core . modules . internal . encryption . entity . EphermalEncryptionKey ; < nl > + import im . actor . core . modules . internal . encryption . entity . EphemeralEncryptionKey ; < nl > import im . actor . core . modules . internal . encryption . entity . PrivateKeyStorage ; < nl > import im . actor . core . modules . utils . ModuleActor ; < nl > + import im . actor . core . modules . utils . RandomUtils ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > import im . actor . runtime . Crypto ; < nl > @ @ - 21 , 7 + 24 , 6 @ @ import im . actor . runtime . Storage ; < nl > import im . actor . runtime . crypto . Curve25519 ; < nl > import im . actor . runtime . storage . KeyValueRecord ; < nl > import im . actor . runtime . storage . KeyValueStorage ; < nl > - import im . actor . sdk . util . Randoms ; < nl > < nl > public class KeyManagerActor extends ModuleActor { < nl > < nl > @ @ - 30 , 7 + 32 , 7 @ @ public class KeyManagerActor extends ModuleActor { < nl > private static final String TAG = " KeyManagerActor " ; < nl > < nl > private PrivateKeyStorage privateKeyStorage ; < nl > - private KeyValueStorage ephermalStorage ; < nl > + private KeyValueStorage ephemeralStorage ; < nl > < nl > public KeyManagerActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 38 , 7 + 40 , 7 @ @ public class KeyManagerActor extends ModuleActor { < nl > < nl > @ Override < nl > public void preStart ( ) { < nl > - ephermalStorage = Storage . createKeyValue ( " ephermal _ keys " ) ; < nl > + ephemeralStorage = Storage . createKeyValue ( " ephemeral _ keys " ) ; < nl > < nl > byte [ ] data = preferences ( ) . getBytes ( PRIVATE _ KEYS ) ; < nl > if ( data ! = null ) { < nl > @ @ - 52 , 10 + 54 , 10 @ @ public class KeyManagerActor extends ModuleActor { < nl > if ( privateKeyStorage = = null ) { < nl > Log . d ( TAG , " Generating new encryption keys . . . " ) ; < nl > < nl > - EncryptionKey identityKey = new EncryptionKey ( Randoms . randomId ( ) , < nl > + EncryptionKey identityKey = new EncryptionKey ( RandomUtils . nextRid ( ) , < nl > Curve25519 . keyGen ( Crypto . randomBytes ( 64 ) ) ) ; < nl > ArrayList < EncryptionKey > keyPairs = new ArrayList < EncryptionKey > ( ) ; < nl > - keyPairs . add ( new EncryptionKey ( Randoms . randomId ( ) , < nl > + keyPairs . add ( new EncryptionKey ( RandomUtils . nextRid ( ) , < nl > Curve25519 . keyGen ( Crypto . randomBytes ( 64 ) ) ) ) ; < nl > < nl > privateKeyStorage = new PrivateKeyStorage ( identityKey , keyPairs , 0 ) ; < nl > @ @ - 127 , 20 + 129 , 84 @ @ public class KeyManagerActor extends ModuleActor { < nl > Log . d ( TAG , " Main Keys are ready " ) ; < nl > < nl > / / Generating ephemeral keys < nl > - List < KeyValueRecord > records = ephermalStorage . loadAllItems ( ) ; < nl > + List < KeyValueRecord > records = ephemeralStorage . loadAllItems ( ) ; < nl > for ( int i = 0 ; i < records . size ( ) - 100 ; i + + ) { < nl > - long randomId = Randoms . randomId ( ) ; < nl > + long randomId = RandomUtils . nextRid ( ) ; < nl > EncryptionKey encryptionKey = new EncryptionKey ( < nl > randomId , < nl > Curve25519 . keyGen ( Crypto . randomBytes ( 64 ) ) ) ; < nl > - EphermalEncryptionKey ephermalEncryptionKey = < nl > - new EphermalEncryptionKey ( encryptionKey , false ) ; < nl > - ephermalStorage . addOrUpdateItem ( randomId , ephermalEncryptionKey . toByteArray ( ) ) ; < nl > + EphemeralEncryptionKey ephemeralEncryptionKey = < nl > + new EphemeralEncryptionKey ( encryptionKey , false ) ; < nl > + ephemeralStorage . addOrUpdateItem ( randomId , ephemeralEncryptionKey . toByteArray ( ) ) ; < nl > } < nl > < nl > / / Uploading ephemeral keys < nl > - records = ephermalStorage . loadAllItems ( ) ; < nl > + records = ephemeralStorage . loadAllItems ( ) ; < nl > < nl > - / / TODO : Implement uploading < nl > + final ArrayList < EphemeralEncryptionKey > pendingEphermalKeys = new ArrayList < EphemeralEncryptionKey > ( ) ; < nl > + for ( KeyValueRecord record : records ) { < nl > + try { < nl > + EphemeralEncryptionKey encryptionKey = new EphemeralEncryptionKey ( record . getData ( ) ) ; < nl > + if ( ! encryptionKey . isUploaded ( ) ) { < nl > + pendingEphermalKeys . add ( encryptionKey ) ; < nl > + } < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + < nl > + if ( pendingEphermalKeys . size ( ) > 0 ) { < nl > + ArrayList < ApiEncryptionKey > uploadingKeys = new ArrayList < ApiEncryptionKey > ( ) ; < nl > + ArrayList < ApiEncryptionKeySignature > uploadingSignatures = new ArrayList < ApiEncryptionKeySignature > ( ) ; < nl > + for ( EphemeralEncryptionKey k : pendingEphermalKeys ) { < nl > + ApiEncryptionKey apiKey = < nl > + new ApiEncryptionKey ( < nl > + k . getEncryptionKey ( ) . getKeyId ( ) , < nl > + k . getEncryptionKey ( ) . getKeyAlg ( ) , < nl > + k . getEncryptionKey ( ) . getPublicKey ( ) , < nl > + null ) ; < nl > + uploadingKeys . add ( apiKey ) ; < nl > + < nl > + < nl > + byte [ ] signature = Curve25519 . calculateSignature ( Crypto . randomBytes ( 64 ) , < nl > + privateKeyStorage . getIdentityKey ( ) . getPrivateKey ( ) , apiKey . toByteArray ( ) ) ; < nl > + uploadingSignatures . add ( < nl > + new ApiEncryptionKeySignature ( < nl > + k . getEncryptionKey ( ) . getKeyId ( ) , < nl > + " Ed25519 " , < nl > + signature ) ) ; < nl > + } < nl > + < nl > + request ( new RequestUploadEphermalKey ( privateKeyStorage . getKeyGroupId ( ) , uploadingKeys , uploadingSignatures ) , new RpcCallback < ResponseVoid > ( ) { < nl > + @ Override < nl > + public void onResult ( ResponseVoid response ) { < nl > + List < KeyValueRecord > updated = new ArrayList < KeyValueRecord > ( ) ; < nl > + for ( EphemeralEncryptionKey k : pendingEphermalKeys ) { < nl > + updated . add ( new KeyValueRecord ( k . getEncryptionKey ( ) . getKeyId ( ) , < nl > + k . toByteArray ( ) ) ) ; < nl > + } < nl > + ephemeralStorage . addOrUpdateItems ( updated ) ; < nl > + < nl > + < nl > + onAllKeysReady ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( RpcException e ) { < nl > + Log . w ( TAG , " Ephemeral keys upload error " ) ; < nl > + Log . e ( TAG , e ) ; < nl > + < nl > + / / Ignore < nl > + } < nl > + } ) ; < nl > + } else { < nl > + onAllKeysReady ( ) ; < nl > + } < nl > + } < nl > + < nl > + private void onAllKeysReady ( ) { < nl > + Log . d ( TAG , " Ephemeral Keys are ready " ) ; < nl > + < nl > + / / Now we can start receiving encrypted messages < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EphemeralEncryptionKey . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EphemeralEncryptionKey . java < nl > new file mode 100644 < nl > index 0000000 . . 4b492ae < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EphemeralEncryptionKey . java < nl > @ @ - 0 , 0 + 1 , 46 @ @ < nl > + package im . actor . core . modules . internal . encryption . entity ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . runtime . bser . BserObject ; < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + < nl > + public class EphemeralEncryptionKey extends BserObject { < nl > + < nl > + private EncryptionKey encryptionKey ; < nl > + private boolean isUploaded ; < nl > + < nl > + public EphemeralEncryptionKey ( EncryptionKey encryptionKey , boolean isUploaded ) { < nl > + this . encryptionKey = encryptionKey ; < nl > + this . isUploaded = isUploaded ; < nl > + } < nl > + < nl > + public EphemeralEncryptionKey ( byte [ ] data ) throws IOException { < nl > + load ( data ) ; < nl > + } < nl > + < nl > + public EncryptionKey getEncryptionKey ( ) { < nl > + return encryptionKey ; < nl > + } < nl > + < nl > + public boolean isUploaded ( ) { < nl > + return isUploaded ; < nl > + } < nl > + < nl > + public EphemeralEncryptionKey markUploaded ( ) { < nl > + return new EphemeralEncryptionKey ( encryptionKey , true ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + encryptionKey = new EncryptionKey ( values . getBytes ( 1 ) ) ; < nl > + isUploaded = values . getBool ( 2 ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + writer . writeBytes ( 1 , encryptionKey . toByteArray ( ) ) ; < nl > + writer . writeBool ( 2 , isUploaded ) ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EphermalEncryptionKey . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EphermalEncryptionKey . java < nl > deleted file mode 100644 < nl > index 7942fd2 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EphermalEncryptionKey . java < nl > + + + / dev / null < nl > @ @ - 1 , 46 + 0 , 0 @ @ < nl > - package im . actor . core . modules . internal . encryption . entity ; < nl > - < nl > - import java . io . IOException ; < nl > - < nl > - import im . actor . runtime . bser . BserObject ; < nl > - import im . actor . runtime . bser . BserValues ; < nl > - import im . actor . runtime . bser . BserWriter ; < nl > - < nl > - public class EphermalEncryptionKey extends BserObject { < nl > - < nl > - private EncryptionKey encryptionKey ; < nl > - private boolean isUploaded ; < nl > - < nl > - public EphermalEncryptionKey ( EncryptionKey encryptionKey , boolean isUploaded ) { < nl > - this . encryptionKey = encryptionKey ; < nl > - this . isUploaded = isUploaded ; < nl > - } < nl > - < nl > - public EphermalEncryptionKey ( byte [ ] data ) throws IOException { < nl > - load ( data ) ; < nl > - } < nl > - < nl > - public EncryptionKey getEncryptionKey ( ) { < nl > - return encryptionKey ; < nl > - } < nl > - < nl > - public boolean isUploaded ( ) { < nl > - return isUploaded ; < nl > - } < nl > - < nl > - public EphermalEncryptionKey markUploaded ( ) { < nl > - return new EphermalEncryptionKey ( encryptionKey , true ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void parse ( BserValues values ) throws IOException { < nl > - encryptionKey = new EncryptionKey ( values . getBytes ( 1 ) ) ; < nl > - isUploaded = values . getBool ( 2 ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void serialize ( BserWriter writer ) throws IOException { < nl > - writer . writeBytes ( 1 , encryptionKey . toByteArray ( ) ) ; < nl > - writer . writeBool ( 2 , isUploaded ) ; < nl > - } < nl > - } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / PrivateKeyStorage . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / PrivateKeyStorage . java < nl > index e1eaa64 . . 7f5c254 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / PrivateKeyStorage . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / PrivateKeyStorage . java < nl > @ @ - 9 , 11 + 9 , 11 @ @ import im . actor . runtime . bser . BserWriter ; < nl > < nl > public class PrivateKeyStorage extends BserObject { < nl > < nl > - private long keyGroupId ; < nl > + private int keyGroupId ; < nl > private EncryptionKey identityKey = null ; < nl > private ArrayList < EncryptionKey > keys = new ArrayList < EncryptionKey > ( ) ; < nl > < nl > - public PrivateKeyStorage ( EncryptionKey identityKey , ArrayList < EncryptionKey > keys , long keyGroupId ) { < nl > + public PrivateKeyStorage ( EncryptionKey identityKey , ArrayList < EncryptionKey > keys , int keyGroupId ) { < nl > this . identityKey = identityKey ; < nl > this . keys = keys ; < nl > this . keyGroupId = keyGroupId ; < nl > @ @ - 31 , 18 + 31 , 18 @ @ public class PrivateKeyStorage extends BserObject { < nl > return keys ; < nl > } < nl > < nl > - public long getKeyGroupId ( ) { < nl > + public int getKeyGroupId ( ) { < nl > return keyGroupId ; < nl > } < nl > < nl > - public PrivateKeyStorage markUploaded ( long keyGroupId ) { < nl > + public PrivateKeyStorage markUploaded ( int keyGroupId ) { < nl > return new PrivateKeyStorage ( identityKey , keys , keyGroupId ) ; < nl > } < nl > < nl > @ Override < nl > public void parse ( BserValues values ) throws IOException { < nl > identityKey = new EncryptionKey ( values . getBytes ( 1 ) ) ; < nl > - keyGroupId = values . optLong ( 2 ) ; < nl > + keyGroupId = values . optInt ( 2 ) ; < nl > for ( byte [ ] b : values . getRepeatedBytes ( 3 ) ) { < nl > keys . add ( new EncryptionKey ( b ) ) ; < nl > } < nl > @ @ - 51 , 7 + 51 , 7 @ @ public class PrivateKeyStorage extends BserObject { < nl > @ Override < nl > public void serialize ( BserWriter writer ) throws IOException { < nl > writer . writeObject ( 1 , identityKey ) ; < nl > - writer . writeLong ( 2 , keyGroupId ) ; < nl > + writer . writeInt ( 2 , keyGroupId ) ; < nl > writer . writeRepeatedObj ( 3 , keys ) ; < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / EncryptionModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / EncryptionModule . java 
 index d399b21 . . 0fdedbf 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / EncryptionModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / EncryptionModule . java 
 @ @ - 1 , 8 + 1 , 12 @ @ 
 package im . actor . core . modules . internal ; 
 
 + import java . util . HashMap ; 
 + 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . internal . encryption . EncryptedStateActor ; 
 import im . actor . core . modules . internal . encryption . KeyManagerActor ; 
 + import im . actor . runtime . actors . Actor ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . actors . Props ; 
 @ @ - 12 , 13 + 16 , 13 @ @ import static im . actor . runtime . actors . ActorSystem . system ; 
 public class EncryptionModule extends AbsModule { 
 
 private ActorRef keyManager ; 
 + private HashMap < Integer , ActorRef > encryptedStates = new HashMap < Integer , ActorRef > ( ) ; 
 
 public EncryptionModule ( ModuleContext context ) { 
 super ( context ) ; 
 } 
 
 public void run ( ) { 
 - 
 keyManager = system ( ) . actorOf ( Props . create ( KeyManagerActor . class , 
 new ActorCreator < KeyManagerActor > ( ) { 
 @ Override 
 @ @ - 27 , 4 + 31 , 22 @ @ public class EncryptionModule extends AbsModule { 
 } 
 } ) , " encryption / keys " ) ; 
 } 
 + 
 + public ActorRef getKeyManager ( ) { 
 + return keyManager ; 
 + } 
 + 
 + public ActorRef getEncryptedChatManager ( final int uid ) { 
 + synchronized ( encryptedStates ) { 
 + if ( ! encryptedStates . containsKey ( uid ) ) { 
 + encryptedStates . put ( uid , system ( ) . actorOf ( Props . create ( EncryptedStateActor . class , new ActorCreator < EncryptedStateActor > ( ) { 
 + @ Override 
 + public EncryptedStateActor create ( ) { 
 + return new EncryptedStateActor ( uid , context ( ) ) ; 
 + } 
 + } ) , " encryption / uid _ " + uid ) ) ; 
 + } 
 + return encryptedStates . get ( uid ) ; 
 + } 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index c693e41 . . 5cc209c 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 220 , 6 + 220 , 9 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } ) , " actor / conv _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) + " / history " ) ) ; 
 } 
 } 
 + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + context ( ) . getEncryption ( ) . getEncryptedChatManager ( peer . getPeerId ( ) ) ; 
 + } 
 } 
 
 public ActorRef getConversationHistoryActor ( final Peer peer ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / EncryptedStateActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / EncryptedStateActor . java 
 new file mode 100644 
 index 0000000 . . f22e3e4 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / EncryptedStateActor . java 
 @ @ - 0 , 0 + 1 , 134 @ @ 
 + package im . actor . core . modules . internal . encryption ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . internal . encryption . entity . EncryptedBox ; 
 + import im . actor . core . modules . internal . encryption . entity . EncryptionKey ; 
 + import im . actor . core . util . ModuleActor ; 
 + import im . actor . core . util . RandomUtils ; 
 + import im . actor . runtime . Crypto ; 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . actors . Future ; 
 + import im . actor . runtime . actors . ask . AskCallback ; 
 + import im . actor . runtime . actors . ask . AskRequest ; 
 + import im . actor . runtime . crypto . Curve25519 ; 
 + 
 + public class EncryptedStateActor extends ModuleActor { 
 + 
 + private static final String TAG = " EncryptedStateActor " ; 
 + 
 + private int uid ; 
 + private EncryptionKey ownIdentityKey ; 
 + private EncryptionKey theirIdentityKey ; 
 + private EncryptionKey ownEphermalKey0 ; 
 + private EncryptionKey theirEphermalKey0 ; 
 + 
 + private ArrayList < EncryptionKey > prevOwnKeys = new ArrayList < EncryptionKey > ( ) ; 
 + private ArrayList < EncryptionKey > prevTheirKeys = new ArrayList < EncryptionKey > ( ) ; 
 + 
 + private EncryptionKey currentOwnKey ; 
 + private EncryptionKey currentTheirKey ; 
 + 
 + private byte [ ] rootChainKey ; 
 + 
 + private boolean isReady = false ; 
 + 
 + public EncryptedStateActor ( int uid , ModuleContext context ) { 
 + super ( context ) ; 
 + this . uid = uid ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + super . preStart ( ) ; 
 + 
 + if ( ownIdentityKey = = null | | ownEphermalKey0 = = null | | currentOwnKey = = null ) { 
 + Log . d ( TAG , " Loading own keys for conversation " ) ; 
 + ask ( context ( ) . getEncryption ( ) . getKeyManager ( ) , new KeyManagerActor . FetchOwnKey ( ) , new AskCallback ( ) { 
 + @ Override 
 + public void onResult ( Object obj ) { 
 + Log . d ( TAG , " Own keys loaded " ) ; 
 + KeyManagerActor . FetchOwnKeyResult res = ( KeyManagerActor . FetchOwnKeyResult ) obj ; 
 + ownIdentityKey = res . getIdentityKey ( ) ; 
 + ownEphermalKey0 = res . getEphemeralKey ( ) ; 
 + currentOwnKey = new EncryptionKey ( RandomUtils . nextRid ( ) , Curve25519 . keyGen ( Crypto . randomBytes ( 64 ) ) ) ; 
 + onOwnReady ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( Exception e ) { 
 + / / Nothing to do 
 + Log . w ( TAG , " Own keys error " ) ; 
 + Log . e ( TAG , e ) ; 
 + 
 + } 
 + } ) ; 
 + } else { 
 + onOwnReady ( ) ; 
 + } 
 + } 
 + 
 + private void onOwnReady ( ) { 
 + Log . w ( TAG , " Own keys ready " ) ; 
 + } 
 + 
 + private void onTheirReady ( ) { 
 + 
 + } 
 + 
 + private void doEncrypt ( byte [ ] data , Future future ) { 
 + 
 + } 
 + 
 + private void doDecrypt ( EncryptedBox data , Future future ) { 
 + 
 + } 
 + 
 + @ Override 
 + public boolean onAsk ( Object message , Future future ) { 
 + if ( message instanceof EncryptPackage ) { 
 + doEncrypt ( ( ( EncryptPackage ) message ) . getData ( ) , future ) ; 
 + return false ; 
 + } else if ( message instanceof DecryptPackage ) { 
 + doDecrypt ( ( ( DecryptPackage ) message ) . getEncryptedBox ( ) , future ) ; 
 + return false ; 
 + } else { 
 + return super . onAsk ( message , future ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( ! isReady & & message instanceof AskRequest ) { 
 + stash ( ) ; 
 + return ; 
 + } 
 + super . onReceive ( message ) ; 
 + } 
 + 
 + public static class EncryptPackage { 
 + private byte [ ] data ; 
 + 
 + public EncryptPackage ( byte [ ] data ) { 
 + this . data = data ; 
 + } 
 + 
 + public byte [ ] getData ( ) { 
 + return data ; 
 + } 
 + } 
 + 
 + public static class DecryptPackage { 
 + 
 + private EncryptedBox encryptedBox ; 
 + 
 + public DecryptPackage ( EncryptedBox encryptedBox ) { 
 + this . encryptedBox = encryptedBox ; 
 + } 
 + 
 + public EncryptedBox getEncryptedBox ( ) { 
 + return encryptedBox ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java 
 index 4575c45 . . ddbc76e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java 
 @ @ - 21 , 6 + 21 , 8 @ @ import im . actor . core . network . RpcException ; 
 import im . actor . runtime . Crypto ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . Storage ; 
 + import im . actor . runtime . actors . Future ; 
 + import im . actor . runtime . actors . ask . AskRequest ; 
 import im . actor . runtime . crypto . Curve25519 ; 
 import im . actor . runtime . storage . KeyValueRecord ; 
 import im . actor . runtime . storage . KeyValueStorage ; 
 @ @ - 33 , 6 + 35 , 7 @ @ public class KeyManagerActor extends ModuleActor { 
 
 private PrivateKeyStorage privateKeyStorage ; 
 private KeyValueStorage ephemeralStorage ; 
 + private boolean isReady = false ; 
 
 public KeyManagerActor ( ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 183 , 7 + 186 , 7 @ @ public class KeyManagerActor extends ModuleActor { 
 List < KeyValueRecord > updated = new ArrayList < KeyValueRecord > ( ) ; 
 for ( EphemeralEncryptionKey k : pendingEphermalKeys ) { 
 updated . add ( new KeyValueRecord ( k . getEncryptionKey ( ) . getKeyId ( ) , 
 - k . toByteArray ( ) ) ) ; 
 + k . markUploaded ( ) . toByteArray ( ) ) ) ; 
 } 
 ephemeralStorage . addOrUpdateItems ( updated ) ; 
 
 @ @ - 208 , 5 + 211 , 63 @ @ public class KeyManagerActor extends ModuleActor { 
 Log . d ( TAG , " Ephemeral Keys are ready " ) ; 
 
 / / Now we can start receiving encrypted messages 
 + 
 + isReady = true ; 
 + unstashAll ( ) ; 
 + } 
 + 
 + private void fetchOwnKey ( Future future ) { 
 + List < KeyValueRecord > records = ephemeralStorage . loadAllItems ( ) ; 
 + EphemeralEncryptionKey ephemeralEncryptionKey ; 
 + try { 
 + ephemeralEncryptionKey = new EphemeralEncryptionKey ( records . get ( RandomUtils . randomId ( records . size ( ) ) ) . getData ( ) ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + future . onError ( e ) ; 
 + return ; 
 + } 
 + 
 + future . onResult ( new FetchOwnKeyResult ( privateKeyStorage . getIdentityKey ( ) , ephemeralEncryptionKey . getEncryptionKey ( ) ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof AskRequest & & ! isReady ) { 
 + stash ( ) ; 
 + return ; 
 + } 
 + super . onReceive ( message ) ; 
 + } 
 + 
 + @ Override 
 + public boolean onAsk ( Object message , Future future ) { 
 + if ( message instanceof FetchOwnKey ) { 
 + fetchOwnKey ( future ) ; 
 + return false ; 
 + } 
 + return super . onAsk ( message , future ) ; 
 + } 
 + 
 + public static class FetchOwnKey { 
 + 
 + } 
 + 
 + public static class FetchOwnKeyResult { 
 + 
 + private EncryptionKey identityKey ; 
 + private EncryptionKey ephemeralKey ; 
 + 
 + public FetchOwnKeyResult ( EncryptionKey identityKey , EncryptionKey ephemeralKey ) { 
 + this . identityKey = identityKey ; 
 + this . ephemeralKey = ephemeralKey ; 
 + } 
 + 
 + public EncryptionKey getIdentityKey ( ) { 
 + return identityKey ; 
 + } 
 + 
 + public EncryptionKey getEphemeralKey ( ) { 
 + return ephemeralKey ; 
 + } 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EncryptedBox . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EncryptedBox . java 
 new file mode 100644 
 index 0000000 . . 4331e40 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EncryptedBox . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package im . actor . core . modules . internal . encryption . entity ; 
 + 
 + public class EncryptedBox { 
 + 
 + private final EncryptedBoxKey [ ] keys ; 
 + private final byte [ ] encryptedPackage ; 
 + 
 + public EncryptedBox ( EncryptedBoxKey [ ] keys , byte [ ] encryptedPackage ) { 
 + this . keys = keys ; 
 + this . encryptedPackage = encryptedPackage ; 
 + } 
 + 
 + public EncryptedBoxKey [ ] getKeys ( ) { 
 + return keys ; 
 + } 
 + 
 + public byte [ ] getEncryptedPackage ( ) { 
 + return encryptedPackage ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EncryptedBoxKey . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EncryptedBoxKey . java 
 new file mode 100644 
 index 0000000 . . c8ab76d 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EncryptedBoxKey . java 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + package im . actor . core . modules . internal . encryption . entity ; 
 + 
 + public class EncryptedBoxKey { 
 + 
 + private final int uid ; 
 + private final int keyGroupId ; 
 + private final byte [ ] encryptedKey ; 
 + 
 + public EncryptedBoxKey ( int uid , int keyGroupId , byte [ ] encryptedKey ) { 
 + this . uid = uid ; 
 + this . keyGroupId = keyGroupId ; 
 + this . encryptedKey = encryptedKey ; 
 + } 
 + 
 + public int getUid ( ) { 
 + return uid ; 
 + } 
 + 
 + public int getKeyGroupId ( ) { 
 + return keyGroupId ; 
 + } 
 + 
 + public byte [ ] getEncryptedKey ( ) { 
 + return encryptedKey ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / RandomUtils . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / RandomUtils . java 
 index b3eee49 . . 929fecb 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / RandomUtils . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / RandomUtils . java 
 @ @ - 13 , 4 + 13 , 8 @ @ public class RandomUtils { 
 public static synchronized long nextRid ( ) { 
 return RANDOM . nextLong ( ) ; 
 } 
 + 
 + public static synchronized int randomId ( int n ) { 
 + return RANDOM . nextInt ( n ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java 
 index c214949 . . c58469c 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java 
 @ @ - 7 , 12 + 7 , 15 @ @ import java . util . List ; 
 import im . actor . core . api . ApiEncryptionKey ; 
 import im . actor . core . api . ApiEncryptionKeySignature ; 
 import im . actor . core . api . rpc . RequestCreateNewKeyGroup ; 
 + import im . actor . core . api . rpc . RequestUploadEphermalKey ; 
 import im . actor . core . api . rpc . ResponseCreateNewKeyGroup ; 
 + import im . actor . core . api . rpc . ResponseVoid ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . internal . encryption . entity . EncryptionKey ; 
 - import im . actor . core . modules . internal . encryption . entity . EphermalEncryptionKey ; 
 + import im . actor . core . modules . internal . encryption . entity . EphemeralEncryptionKey ; 
 import im . actor . core . modules . internal . encryption . entity . PrivateKeyStorage ; 
 import im . actor . core . modules . utils . ModuleActor ; 
 + import im . actor . core . modules . utils . RandomUtils ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 import im . actor . runtime . Crypto ; 
 @ @ - 21 , 7 + 24 , 6 @ @ import im . actor . runtime . Storage ; 
 import im . actor . runtime . crypto . Curve25519 ; 
 import im . actor . runtime . storage . KeyValueRecord ; 
 import im . actor . runtime . storage . KeyValueStorage ; 
 - import im . actor . sdk . util . Randoms ; 
 
 public class KeyManagerActor extends ModuleActor { 
 
 @ @ - 30 , 7 + 32 , 7 @ @ public class KeyManagerActor extends ModuleActor { 
 private static final String TAG = " KeyManagerActor " ; 
 
 private PrivateKeyStorage privateKeyStorage ; 
 - private KeyValueStorage ephermalStorage ; 
 + private KeyValueStorage ephemeralStorage ; 
 
 public KeyManagerActor ( ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 38 , 7 + 40 , 7 @ @ public class KeyManagerActor extends ModuleActor { 
 
 @ Override 
 public void preStart ( ) { 
 - ephermalStorage = Storage . createKeyValue ( " ephermal _ keys " ) ; 
 + ephemeralStorage = Storage . createKeyValue ( " ephemeral _ keys " ) ; 
 
 byte [ ] data = preferences ( ) . getBytes ( PRIVATE _ KEYS ) ; 
 if ( data ! = null ) { 
 @ @ - 52 , 10 + 54 , 10 @ @ public class KeyManagerActor extends ModuleActor { 
 if ( privateKeyStorage = = null ) { 
 Log . d ( TAG , " Generating new encryption keys . . . " ) ; 
 
 - EncryptionKey identityKey = new EncryptionKey ( Randoms . randomId ( ) , 
 + EncryptionKey identityKey = new EncryptionKey ( RandomUtils . nextRid ( ) , 
 Curve25519 . keyGen ( Crypto . randomBytes ( 64 ) ) ) ; 
 ArrayList < EncryptionKey > keyPairs = new ArrayList < EncryptionKey > ( ) ; 
 - keyPairs . add ( new EncryptionKey ( Randoms . randomId ( ) , 
 + keyPairs . add ( new EncryptionKey ( RandomUtils . nextRid ( ) , 
 Curve25519 . keyGen ( Crypto . randomBytes ( 64 ) ) ) ) ; 
 
 privateKeyStorage = new PrivateKeyStorage ( identityKey , keyPairs , 0 ) ; 
 @ @ - 127 , 20 + 129 , 84 @ @ public class KeyManagerActor extends ModuleActor { 
 Log . d ( TAG , " Main Keys are ready " ) ; 
 
 / / Generating ephemeral keys 
 - List < KeyValueRecord > records = ephermalStorage . loadAllItems ( ) ; 
 + List < KeyValueRecord > records = ephemeralStorage . loadAllItems ( ) ; 
 for ( int i = 0 ; i < records . size ( ) - 100 ; i + + ) { 
 - long randomId = Randoms . randomId ( ) ; 
 + long randomId = RandomUtils . nextRid ( ) ; 
 EncryptionKey encryptionKey = new EncryptionKey ( 
 randomId , 
 Curve25519 . keyGen ( Crypto . randomBytes ( 64 ) ) ) ; 
 - EphermalEncryptionKey ephermalEncryptionKey = 
 - new EphermalEncryptionKey ( encryptionKey , false ) ; 
 - ephermalStorage . addOrUpdateItem ( randomId , ephermalEncryptionKey . toByteArray ( ) ) ; 
 + EphemeralEncryptionKey ephemeralEncryptionKey = 
 + new EphemeralEncryptionKey ( encryptionKey , false ) ; 
 + ephemeralStorage . addOrUpdateItem ( randomId , ephemeralEncryptionKey . toByteArray ( ) ) ; 
 } 
 
 / / Uploading ephemeral keys 
 - records = ephermalStorage . loadAllItems ( ) ; 
 + records = ephemeralStorage . loadAllItems ( ) ; 
 
 - / / TODO : Implement uploading 
 + final ArrayList < EphemeralEncryptionKey > pendingEphermalKeys = new ArrayList < EphemeralEncryptionKey > ( ) ; 
 + for ( KeyValueRecord record : records ) { 
 + try { 
 + EphemeralEncryptionKey encryptionKey = new EphemeralEncryptionKey ( record . getData ( ) ) ; 
 + if ( ! encryptionKey . isUploaded ( ) ) { 
 + pendingEphermalKeys . add ( encryptionKey ) ; 
 + } 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + 
 + if ( pendingEphermalKeys . size ( ) > 0 ) { 
 + ArrayList < ApiEncryptionKey > uploadingKeys = new ArrayList < ApiEncryptionKey > ( ) ; 
 + ArrayList < ApiEncryptionKeySignature > uploadingSignatures = new ArrayList < ApiEncryptionKeySignature > ( ) ; 
 + for ( EphemeralEncryptionKey k : pendingEphermalKeys ) { 
 + ApiEncryptionKey apiKey = 
 + new ApiEncryptionKey ( 
 + k . getEncryptionKey ( ) . getKeyId ( ) , 
 + k . getEncryptionKey ( ) . getKeyAlg ( ) , 
 + k . getEncryptionKey ( ) . getPublicKey ( ) , 
 + null ) ; 
 + uploadingKeys . add ( apiKey ) ; 
 + 
 + 
 + byte [ ] signature = Curve25519 . calculateSignature ( Crypto . randomBytes ( 64 ) , 
 + privateKeyStorage . getIdentityKey ( ) . getPrivateKey ( ) , apiKey . toByteArray ( ) ) ; 
 + uploadingSignatures . add ( 
 + new ApiEncryptionKeySignature ( 
 + k . getEncryptionKey ( ) . getKeyId ( ) , 
 + " Ed25519 " , 
 + signature ) ) ; 
 + } 
 + 
 + request ( new RequestUploadEphermalKey ( privateKeyStorage . getKeyGroupId ( ) , uploadingKeys , uploadingSignatures ) , new RpcCallback < ResponseVoid > ( ) { 
 + @ Override 
 + public void onResult ( ResponseVoid response ) { 
 + List < KeyValueRecord > updated = new ArrayList < KeyValueRecord > ( ) ; 
 + for ( EphemeralEncryptionKey k : pendingEphermalKeys ) { 
 + updated . add ( new KeyValueRecord ( k . getEncryptionKey ( ) . getKeyId ( ) , 
 + k . toByteArray ( ) ) ) ; 
 + } 
 + ephemeralStorage . addOrUpdateItems ( updated ) ; 
 + 
 + 
 + onAllKeysReady ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( RpcException e ) { 
 + Log . w ( TAG , " Ephemeral keys upload error " ) ; 
 + Log . e ( TAG , e ) ; 
 + 
 + / / Ignore 
 + } 
 + } ) ; 
 + } else { 
 + onAllKeysReady ( ) ; 
 + } 
 + } 
 + 
 + private void onAllKeysReady ( ) { 
 + Log . d ( TAG , " Ephemeral Keys are ready " ) ; 
 + 
 + / / Now we can start receiving encrypted messages 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EphemeralEncryptionKey . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EphemeralEncryptionKey . java 
 new file mode 100644 
 index 0000000 . . 4b492ae 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EphemeralEncryptionKey . java 
 @ @ - 0 , 0 + 1 , 46 @ @ 
 + package im . actor . core . modules . internal . encryption . entity ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . runtime . bser . BserObject ; 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + 
 + public class EphemeralEncryptionKey extends BserObject { 
 + 
 + private EncryptionKey encryptionKey ; 
 + private boolean isUploaded ; 
 + 
 + public EphemeralEncryptionKey ( EncryptionKey encryptionKey , boolean isUploaded ) { 
 + this . encryptionKey = encryptionKey ; 
 + this . isUploaded = isUploaded ; 
 + } 
 + 
 + public EphemeralEncryptionKey ( byte [ ] data ) throws IOException { 
 + load ( data ) ; 
 + } 
 + 
 + public EncryptionKey getEncryptionKey ( ) { 
 + return encryptionKey ; 
 + } 
 + 
 + public boolean isUploaded ( ) { 
 + return isUploaded ; 
 + } 
 + 
 + public EphemeralEncryptionKey markUploaded ( ) { 
 + return new EphemeralEncryptionKey ( encryptionKey , true ) ; 
 + } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + encryptionKey = new EncryptionKey ( values . getBytes ( 1 ) ) ; 
 + isUploaded = values . getBool ( 2 ) ; 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + writer . writeBytes ( 1 , encryptionKey . toByteArray ( ) ) ; 
 + writer . writeBool ( 2 , isUploaded ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EphermalEncryptionKey . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EphermalEncryptionKey . java 
 deleted file mode 100644 
 index 7942fd2 . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / EphermalEncryptionKey . java 
 + + + / dev / null 
 @ @ - 1 , 46 + 0 , 0 @ @ 
 - package im . actor . core . modules . internal . encryption . entity ; 
 - 
 - import java . io . IOException ; 
 - 
 - import im . actor . runtime . bser . BserObject ; 
 - import im . actor . runtime . bser . BserValues ; 
 - import im . actor . runtime . bser . BserWriter ; 
 - 
 - public class EphermalEncryptionKey extends BserObject { 
 - 
 - private EncryptionKey encryptionKey ; 
 - private boolean isUploaded ; 
 - 
 - public EphermalEncryptionKey ( EncryptionKey encryptionKey , boolean isUploaded ) { 
 - this . encryptionKey = encryptionKey ; 
 - this . isUploaded = isUploaded ; 
 - } 
 - 
 - public EphermalEncryptionKey ( byte [ ] data ) throws IOException { 
 - load ( data ) ; 
 - } 
 - 
 - public EncryptionKey getEncryptionKey ( ) { 
 - return encryptionKey ; 
 - } 
 - 
 - public boolean isUploaded ( ) { 
 - return isUploaded ; 
 - } 
 - 
 - public EphermalEncryptionKey markUploaded ( ) { 
 - return new EphermalEncryptionKey ( encryptionKey , true ) ; 
 - } 
 - 
 - @ Override 
 - public void parse ( BserValues values ) throws IOException { 
 - encryptionKey = new EncryptionKey ( values . getBytes ( 1 ) ) ; 
 - isUploaded = values . getBool ( 2 ) ; 
 - } 
 - 
 - @ Override 
 - public void serialize ( BserWriter writer ) throws IOException { 
 - writer . writeBytes ( 1 , encryptionKey . toByteArray ( ) ) ; 
 - writer . writeBool ( 2 , isUploaded ) ; 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / PrivateKeyStorage . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / PrivateKeyStorage . java 
 index e1eaa64 . . 7f5c254 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / PrivateKeyStorage . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / entity / PrivateKeyStorage . java 
 @ @ - 9 , 11 + 9 , 11 @ @ import im . actor . runtime . bser . BserWriter ; 
 
 public class PrivateKeyStorage extends BserObject { 
 
 - private long keyGroupId ; 
 + private int keyGroupId ; 
 private EncryptionKey identityKey = null ; 
 private ArrayList < EncryptionKey > keys = new ArrayList < EncryptionKey > ( ) ; 
 
 - public PrivateKeyStorage ( EncryptionKey identityKey , ArrayList < EncryptionKey > keys , long keyGroupId ) { 
 + public PrivateKeyStorage ( EncryptionKey identityKey , ArrayList < EncryptionKey > keys , int keyGroupId ) { 
 this . identityKey = identityKey ; 
 this . keys = keys ; 
 this . keyGroupId = keyGroupId ; 
 @ @ - 31 , 18 + 31 , 18 @ @ public class PrivateKeyStorage extends BserObject { 
 return keys ; 
 } 
 
 - public long getKeyGroupId ( ) { 
 + public int getKeyGroupId ( ) { 
 return keyGroupId ; 
 } 
 
 - public PrivateKeyStorage markUploaded ( long keyGroupId ) { 
 + public PrivateKeyStorage markUploaded ( int keyGroupId ) { 
 return new PrivateKeyStorage ( identityKey , keys , keyGroupId ) ; 
 } 
 
 @ Override 
 public void parse ( BserValues values ) throws IOException { 
 identityKey = new EncryptionKey ( values . getBytes ( 1 ) ) ; 
 - keyGroupId = values . optLong ( 2 ) ; 
 + keyGroupId = values . optInt ( 2 ) ; 
 for ( byte [ ] b : values . getRepeatedBytes ( 3 ) ) { 
 keys . add ( new EncryptionKey ( b ) ) ; 
 } 
 @ @ - 51 , 7 + 51 , 7 @ @ public class PrivateKeyStorage extends BserObject { 
 @ Override 
 public void serialize ( BserWriter writer ) throws IOException { 
 writer . writeObject ( 1 , identityKey ) ; 
 - writer . writeLong ( 2 , keyGroupId ) ; 
 + writer . writeInt ( 2 , keyGroupId ) ; 
 writer . writeRepeatedObj ( 3 , keys ) ; 
 } 
 }
