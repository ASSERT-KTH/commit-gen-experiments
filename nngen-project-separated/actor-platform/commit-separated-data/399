BLEU SCORE: 0.6803749333171202

TEST MSG: fix ( server ) : fixed compilation error
GENERATED MSG: test ( server ) : fixed compilation

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala < nl > index d08558e . . d87f645 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala < nl > @ @ - 27 , 7 + 27 , 7 @ @ trait PersistenceDebug extends PersistentActor with ActorLogging with AlertingAc < nl > < nl > cause match { < nl > case e : SQLException ⇒ log . error ( e . getNextException , " Next exception : " ) < nl > - case _ = > < nl > + case _ ⇒ < nl > } < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > index e7a8c42 . . 69d4d14 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > @ @ - 4 , 6 + 4 , 7 @ @ import java . time . Instant < nl > < nl > import akka . actor . _ < nl > import akka . cluster . sharding . ShardRegion < nl > + import akka . pattern . { ask , pipe } < nl > import akka . persistence . RecoveryCompleted < nl > import akka . util . Timeout < nl > import im . actor . api . rpc . misc . ApiExtension < nl > @ @ - 20 , 7 + 21 , 6 @ @ import slick . driver . PostgresDriver . api . _ < nl > < nl > import scala . concurrent . { ExecutionContext , Future } < nl > import scala . concurrent . duration . _ < nl > - import scala . util . Try < nl > < nl > trait UserEvent extends TaggedEvent { < nl > val ts : Instant
NEAREST DIFF (one line): diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / EchoBot . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / EchoBot . scala < nl > index 3605f00 . . b215d66 100644 < nl > - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / EchoBot . scala < nl > + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / EchoBot . scala < nl > @ @ - 1 , 6 + 1 , 6 @ @ < nl > package im . actor . botkit < nl > < nl > - import akka . actor . { ActorSystem , Props } < nl > + import akka . actor . { ActorSystem , Props } < nl > import im . actor . bot . BotMessages . TextMessage < nl > < nl > object EchoBotApp extends App { < nl > diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala < nl > index d9d3b1b . . 838e36e 100644 < nl > - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala < nl > + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala < nl > @ @ - 3 , 9 + 3 , 9 @ @ package im . actor . botkit < nl > import java . net . URLEncoder < nl > < nl > import akka . actor . _ < nl > - import akka . stream . scaladsl . { Sink , Source } < nl > - import akka . stream . { ActorMaterializer , OverflowStrategy } < nl > - import im . actor . bot . { BotBase , BotMessageOut , BotMessages } < nl > + import akka . stream . scaladsl . { Sink , Source } < nl > + import akka . stream . { ActorMaterializer , OverflowStrategy } < nl > + import im . actor . bot . { BotBase , BotMessageOut , BotMessages } < nl > import upickle . default . _ < nl > < nl > import scala . concurrent . forkjoin . ThreadLocalRandom < nl > @ @ - 37 , 7 + 37 , 7 @ @ abstract class RemoteBot ( token : String , endpoint : String ) extends BotBase with A < nl > onTextMessage ( tm ) < nl > case rsp : BotResponse ⇒ < nl > log . info ( " Response : { } " , rsp . body ) < nl > - case NextRequest ( body ) = > < nl > + case NextRequest ( body ) ⇒ < nl > rqSource ! nextRequest ( body ) < nl > case unmatched ⇒ < nl > log . error ( " Unmatched { } " , unmatched ) < nl > diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > index 1499d56 . . 1e4fbd2 100644 < nl > - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > @ @ - 5 , 11 + 5 , 11 @ @ import java . net . URI < nl > import akka . actor . _ < nl > import akka . io . IO < nl > import akka . stream . actor . _ < nl > - import akka . stream . scaladsl . { Sink , Source } < nl > + import akka . stream . scaladsl . { Sink , Source } < nl > import spray . can . server . UHttp < nl > - import spray . can . websocket . frame . { Frame , TextFrame } < nl > - import spray . can . { Http , websocket } < nl > - import spray . http . { HttpHeaders , HttpMethods , HttpRequest } < nl > + import spray . can . websocket . frame . { Frame , TextFrame } < nl > + import spray . can . { Http , websocket } < nl > + import spray . http . { HttpHeaders , HttpMethods , HttpRequest } < nl > import spray . io . ServerSSLEngineProvider < nl > < nl > import scala . annotation . tailrec < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / ContactsUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / ContactsUtils . scala < nl > index c26355b . . afc2b44 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / ContactsUtils . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / ContactsUtils . scala < nl > @ @ - 15 , 6 + 15 , 18 @ @ object ContactsUtils { < nl > def addContact ( < nl > ownerUserId : Int , < nl > userId : Int , < nl > + name : Option [ String ] , < nl > + accessSalt : String < nl > + ) ( implicit ec : ExecutionContext , timeout : Timeout , system : ActorSystem ) : DBIO [ Int ] = < nl > + for { < nl > + _ ← DBIO . from ( registerLocalName ( ownerUserId , userId , name ) ) < nl > + contact = models . contact . UserContact ( ownerUserId , userId , name , accessSalt , isDeleted = false ) < nl > + result ← persist . contact . UserContact . insertOrUpdate ( contact ) < nl > + } yield result < nl > + < nl > + def addContact ( < nl > + ownerUserId : Int , < nl > + userId : Int , < nl > phoneNumber : Long , < nl > name : Option [ String ] , < nl > accessSalt : String < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContact . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContact . scala < nl > index b927327 . . 936193e 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContact . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContact . scala < nl > @ @ - 64 , 4 + 64 , 7 @ @ object UserContact { < nl > < nl > def delete ( ownerUserId : Int , contactUserId : Int ) = < nl > byPKNotDeleted ( ownerUserId , contactUserId ) . map ( _ . isDeleted ) . update ( true ) < nl > + < nl > + def insertOrUpdate ( contact : models . contact . UserContact ) = < nl > + contacts . insertOrUpdate ( contact ) < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala < nl > index d0b9ab4 . . 25568fa 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala < nl > @ @ - 11 , 6 + 11 , 7 @ @ import scala . concurrent . duration . _ < nl > import akka . actor . _ < nl > import akka . util . Timeout < nl > import scodec . bits . BitVector < nl > + import shapeless . _ , syntax . std . tuple . _ < nl > import slick . dbio . DBIO < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > @ @ - 141 , 12 + 142 , 15 @ @ class ContactsServiceImpl ( implicit actorSystem : ActorSystem ) < nl > } yield { < nl > ( optUser , optNumber map ( _ . number ) ) < nl > } ) flatMap { < nl > - case ( Some ( user ) , Some ( userPhoneNumber ) ) ⇒ < nl > + case ( Some ( user ) , optPhoneNumber ) ⇒ < nl > if ( accessHash = = ACLUtils . userAccessHash ( clientData . authId , user . id , user . accessSalt ) ) { < nl > persist . contact . UserContact . find ( ownerUserId = client . userId , contactUserId = userId ) . flatMap { < nl > case None ⇒ < nl > for { < nl > - _ ← addContact ( client . userId , user . id , userPhoneNumber , None , user . accessSalt ) < nl > + _ ← optPhoneNumber match { < nl > + case Some ( phoneNumber ) ⇒ addContact ( client . userId , user . id , phoneNumber , None , user . accessSalt ) < nl > + case None ⇒ addContact ( client . userId , user . id , None , user . accessSalt ) < nl > + } < nl > seqstate ← DBIO . from ( userExt . broadcastClientUpdate ( UpdateContactsAdded ( Vector ( user . id ) ) , None , isFat = true ) ) < nl > } yield Ok ( ResponseSeq ( seqstate . seq , seqstate . state . toByteArray ) ) < nl > case Some ( contact ) ⇒ < nl > diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala < nl > index c942ab2 . . 29d181c 100644 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala < nl > + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > package im . actor . server < nl > < nl > import akka . actor . _ < nl > + import akka . stream . ActorMaterializer < nl > import akka . testkit . _ < nl > import com . typesafe . config . _ < nl > import im . actor . config . ActorConfig < nl > @ @ - 48 , 6 + 49 , 8 @ @ abstract class ActorSuite ( system : ActorSystem = { ActorSpecification . createSyste < nl > with BeforeAndAfterAll < nl > with Matchers < nl > with ScalaFutures { < nl > + protected implicit val mat = ActorMaterializer ( ) ( system ) < nl > + < nl > override def afterAll ( ) : Unit = { < nl > TestKit . shutdownActorSystem ( system ) < nl > system . awaitTermination ( ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > index 2b59d9e . . 47c1c2c 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > @ @ - 55 , 8 + 55 , 6 @ @ class SimpleServerE2eSpec extends ActorSuite ( < nl > < nl > val serverConfig = system . settings . config < nl > < nl > - implicit val materializer = ActorMaterializer ( ) < nl > - < nl > val oauthGoogleConfig = OAuth2GoogleConfig . load ( system . settings . config . getConfig ( " services . google . oauth " ) ) < nl > val sequenceConfig = SequenceServiceConfig . load . toOption . get

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala 
 index d08558e . . d87f645 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala 
 @ @ - 27 , 7 + 27 , 7 @ @ trait PersistenceDebug extends PersistentActor with ActorLogging with AlertingAc 
 
 cause match { 
 case e : SQLException ⇒ log . error ( e . getNextException , " Next exception : " ) 
 - case _ = > 
 + case _ ⇒ 
 } 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 index e7a8c42 . . 69d4d14 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 @ @ - 4 , 6 + 4 , 7 @ @ import java . time . Instant 
 
 import akka . actor . _ 
 import akka . cluster . sharding . ShardRegion 
 + import akka . pattern . { ask , pipe } 
 import akka . persistence . RecoveryCompleted 
 import akka . util . Timeout 
 import im . actor . api . rpc . misc . ApiExtension 
 @ @ - 20 , 7 + 21 , 6 @ @ import slick . driver . PostgresDriver . api . _ 
 
 import scala . concurrent . { ExecutionContext , Future } 
 import scala . concurrent . duration . _ 
 - import scala . util . Try 
 
 trait UserEvent extends TaggedEvent { 
 val ts : Instant

NEAREST DIFF:
diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / EchoBot . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / EchoBot . scala 
 index 3605f00 . . b215d66 100644 
 - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / EchoBot . scala 
 + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / EchoBot . scala 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package im . actor . botkit 
 
 - import akka . actor . { ActorSystem , Props } 
 + import akka . actor . { ActorSystem , Props } 
 import im . actor . bot . BotMessages . TextMessage 
 
 object EchoBotApp extends App { 
 diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala 
 index d9d3b1b . . 838e36e 100644 
 - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala 
 + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala 
 @ @ - 3 , 9 + 3 , 9 @ @ package im . actor . botkit 
 import java . net . URLEncoder 
 
 import akka . actor . _ 
 - import akka . stream . scaladsl . { Sink , Source } 
 - import akka . stream . { ActorMaterializer , OverflowStrategy } 
 - import im . actor . bot . { BotBase , BotMessageOut , BotMessages } 
 + import akka . stream . scaladsl . { Sink , Source } 
 + import akka . stream . { ActorMaterializer , OverflowStrategy } 
 + import im . actor . bot . { BotBase , BotMessageOut , BotMessages } 
 import upickle . default . _ 
 
 import scala . concurrent . forkjoin . ThreadLocalRandom 
 @ @ - 37 , 7 + 37 , 7 @ @ abstract class RemoteBot ( token : String , endpoint : String ) extends BotBase with A 
 onTextMessage ( tm ) 
 case rsp : BotResponse ⇒ 
 log . info ( " Response : { } " , rsp . body ) 
 - case NextRequest ( body ) = > 
 + case NextRequest ( body ) ⇒ 
 rqSource ! nextRequest ( body ) 
 case unmatched ⇒ 
 log . error ( " Unmatched { } " , unmatched ) 
 diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 index 1499d56 . . 1e4fbd2 100644 
 - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 @ @ - 5 , 11 + 5 , 11 @ @ import java . net . URI 
 import akka . actor . _ 
 import akka . io . IO 
 import akka . stream . actor . _ 
 - import akka . stream . scaladsl . { Sink , Source } 
 + import akka . stream . scaladsl . { Sink , Source } 
 import spray . can . server . UHttp 
 - import spray . can . websocket . frame . { Frame , TextFrame } 
 - import spray . can . { Http , websocket } 
 - import spray . http . { HttpHeaders , HttpMethods , HttpRequest } 
 + import spray . can . websocket . frame . { Frame , TextFrame } 
 + import spray . can . { Http , websocket } 
 + import spray . http . { HttpHeaders , HttpMethods , HttpRequest } 
 import spray . io . ServerSSLEngineProvider 
 
 import scala . annotation . tailrec 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / ContactsUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / ContactsUtils . scala 
 index c26355b . . afc2b44 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / ContactsUtils . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / ContactsUtils . scala 
 @ @ - 15 , 6 + 15 , 18 @ @ object ContactsUtils { 
 def addContact ( 
 ownerUserId : Int , 
 userId : Int , 
 + name : Option [ String ] , 
 + accessSalt : String 
 + ) ( implicit ec : ExecutionContext , timeout : Timeout , system : ActorSystem ) : DBIO [ Int ] = 
 + for { 
 + _ ← DBIO . from ( registerLocalName ( ownerUserId , userId , name ) ) 
 + contact = models . contact . UserContact ( ownerUserId , userId , name , accessSalt , isDeleted = false ) 
 + result ← persist . contact . UserContact . insertOrUpdate ( contact ) 
 + } yield result 
 + 
 + def addContact ( 
 + ownerUserId : Int , 
 + userId : Int , 
 phoneNumber : Long , 
 name : Option [ String ] , 
 accessSalt : String 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContact . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContact . scala 
 index b927327 . . 936193e 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContact . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContact . scala 
 @ @ - 64 , 4 + 64 , 7 @ @ object UserContact { 
 
 def delete ( ownerUserId : Int , contactUserId : Int ) = 
 byPKNotDeleted ( ownerUserId , contactUserId ) . map ( _ . isDeleted ) . update ( true ) 
 + 
 + def insertOrUpdate ( contact : models . contact . UserContact ) = 
 + contacts . insertOrUpdate ( contact ) 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala 
 index d0b9ab4 . . 25568fa 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala 
 @ @ - 11 , 6 + 11 , 7 @ @ import scala . concurrent . duration . _ 
 import akka . actor . _ 
 import akka . util . Timeout 
 import scodec . bits . BitVector 
 + import shapeless . _ , syntax . std . tuple . _ 
 import slick . dbio . DBIO 
 import slick . driver . PostgresDriver . api . _ 
 
 @ @ - 141 , 12 + 142 , 15 @ @ class ContactsServiceImpl ( implicit actorSystem : ActorSystem ) 
 } yield { 
 ( optUser , optNumber map ( _ . number ) ) 
 } ) flatMap { 
 - case ( Some ( user ) , Some ( userPhoneNumber ) ) ⇒ 
 + case ( Some ( user ) , optPhoneNumber ) ⇒ 
 if ( accessHash = = ACLUtils . userAccessHash ( clientData . authId , user . id , user . accessSalt ) ) { 
 persist . contact . UserContact . find ( ownerUserId = client . userId , contactUserId = userId ) . flatMap { 
 case None ⇒ 
 for { 
 - _ ← addContact ( client . userId , user . id , userPhoneNumber , None , user . accessSalt ) 
 + _ ← optPhoneNumber match { 
 + case Some ( phoneNumber ) ⇒ addContact ( client . userId , user . id , phoneNumber , None , user . accessSalt ) 
 + case None ⇒ addContact ( client . userId , user . id , None , user . accessSalt ) 
 + } 
 seqstate ← DBIO . from ( userExt . broadcastClientUpdate ( UpdateContactsAdded ( Vector ( user . id ) ) , None , isFat = true ) ) 
 } yield Ok ( ResponseSeq ( seqstate . seq , seqstate . state . toByteArray ) ) 
 case Some ( contact ) ⇒ 
 diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala 
 index c942ab2 . . 29d181c 100644 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala 
 + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package im . actor . server 
 
 import akka . actor . _ 
 + import akka . stream . ActorMaterializer 
 import akka . testkit . _ 
 import com . typesafe . config . _ 
 import im . actor . config . ActorConfig 
 @ @ - 48 , 6 + 49 , 8 @ @ abstract class ActorSuite ( system : ActorSystem = { ActorSpecification . createSyste 
 with BeforeAndAfterAll 
 with Matchers 
 with ScalaFutures { 
 + protected implicit val mat = ActorMaterializer ( ) ( system ) 
 + 
 override def afterAll ( ) : Unit = { 
 TestKit . shutdownActorSystem ( system ) 
 system . awaitTermination ( ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 index 2b59d9e . . 47c1c2c 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 @ @ - 55 , 8 + 55 , 6 @ @ class SimpleServerE2eSpec extends ActorSuite ( 
 
 val serverConfig = system . settings . config 
 
 - implicit val materializer = ActorMaterializer ( ) 
 - 
 val oauthGoogleConfig = OAuth2GoogleConfig . load ( system . settings . config . getConfig ( " services . google . oauth " ) ) 
 val sequenceConfig = SequenceServiceConfig . load . toOption . get
