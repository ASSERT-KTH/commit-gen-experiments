BLEU SCORE: 0.10798033448421628

TEST MSG: refator ( server : webrtc ) : extract method
GENERATED MSG: fix ( server ) : fast hack to wrong concurrent modifications

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index f6d4dfb . . 8ae31bd 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 211 , 8 + 211 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > ) < nl > } < nl > < nl > - val userDevices = devices . filter ( _ . _ 2 . client . externalUserId . contains ( userId ) ) . values . map ( _ . deviceId ) . toSet < nl > - if ( ! sessions . keySet . exists ( pair ⇒ userDevices . contains ( pair . left ) | | userDevices . contains ( pair . right ) ) ) { < nl > + if ( ! isConnected ( userId ) ) { < nl > putParticipant ( userId , ApiCallMemberState . CONNECTING ) < nl > broadcastSyncedSet ( ) < nl > } < nl > @ @ - 268 , 6 + 267 , 11 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > } < nl > } < nl > < nl > + private def isConnected ( userId : UserId ) : Boolean = { < nl > + val userDevices = devices . filter ( _ . _ 2 . client . externalUserId . contains ( userId ) ) . values . map ( _ . deviceId ) . toSet < nl > + sessions . keySet . exists ( pair ⇒ userDevices . contains ( pair . left ) | | userDevices . contains ( pair . right ) ) < nl > + } < nl > + < nl > private def putParticipant ( userId : Int , state : ApiCallMemberState . Value ) : Unit = { < nl > participants get userId match { < nl > case Some ( oldState ) ⇒
NEAREST DIFF (one line): diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala < nl > index 745d59e . . abd0e61 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala < nl > @ @ - 30 , 10 + 30 , 10 @ @ class GateCodeActivation ( config : GateConfig ) ( < nl > val request = HttpRequest ( < nl > method = POST , < nl > uri = s " $ { config . uri } / v1 / codes / send " , < nl > - entity = Json . toJson ( code ) . toString ) < nl > + entity = Json . toJson ( code ) . toString < nl > + ) < nl > < nl > - < nl > - system . log . debug ( " Requesting code send with { } " , request ) < nl > + system . log . debug ( " Requesting code send with { } " , request ) < nl > < nl > val codeResponse : Future [ CodeResponse ] = for { < nl > resp ← http . singleRequest ( request . withHeaders ( ` X - Auth - Token ` ( config . authToken ) ) ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala < nl > index 41d633a . . cf0dfa7 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala < nl > @ @ - 70 , 13 + 70 , 14 @ @ private [ dialog ] final class ActorDelivery ( ) ( implicit val system : ActorSystem ) ex < nl > randomId = randomId , < nl > message = message < nl > ) < nl > + < nl > + val senderAuthIdUpdate = UpdateMessageSent ( peer , randomId , timestamp ) < nl > + < nl > for { < nl > senderAuthIds ← userExt . getAuthIds ( senderUserId ) map ( _ . toSet ) < nl > _ ← SeqUpdatesManager . persistAndPushUpdates ( senderAuthIds filterNot ( _ = = senderAuthId ) , senderUpdate , None , isFat , deliveryId = Some ( s " msg _ $ { peer . toString } _ $ { randomId } " ) ) < nl > - } yield ( ) < nl > - < nl > - val senderAuthIdUpdate = UpdateMessageSent ( peer , randomId , timestamp ) < nl > - SeqUpdatesManager . persistAndPushUpdate ( senderAuthId , senderAuthIdUpdate , None , isFat , deliveryId = Some ( s " msgsent _ $ { peer . toString } _ $ { randomId } " ) ) < nl > + seqstate ← SeqUpdatesManager . persistAndPushUpdate ( senderAuthId , senderAuthIdUpdate , None , isFat , deliveryId = Some ( s " msgsent _ $ { peer . toString } _ $ { randomId } " ) ) < nl > + } yield seqstate < nl > } < nl > < nl > override def authorRead ( readerUserId : Int , authorUserId : Int , date : Long , now : Long ) : Future [ Unit ] = { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialog . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialog . scala < nl > index 05ad631 . . d69c53a 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialog . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialog . scala < nl > @ @ - 6 , 14 + 6 , 13 @ @ import akka . persistence . { RecoveryCompleted , RecoveryFailure } < nl > import akka . util . Timeout < nl > import com . github . benmanes . caffeine . cache . Cache < nl > import im . actor . api . rpc . misc . ApiExtension < nl > - import im . actor . extension . InternalExtensions < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . dialog . _ < nl > import im . actor . server . dialog . privat . PrivateDialogEvents . PrivateDialogEvent < nl > import im . actor . server . office . ProcessorState < nl > - import im . actor . server . sequence . { SeqStateDate , SeqUpdatesExtension } < nl > + import im . actor . server . sequence . SeqStateDate < nl > import im . actor . server . social . SocialExtension < nl > - import im . actor . server . user . { UserOffice , UserExtension , UserViewRegion } < nl > + import im . actor . server . user . UserExtension < nl > import im . actor . util . cache . CacheHelpers . _ < nl > import slick . driver . PostgresDriver . api . Database < nl > < nl > @ @ - 30 , 15 + 29 , 22 @ @ case class DialogState ( < nl > ) < nl > < nl > object PrivateDialogEvents { < nl > + < nl > private [ dialog ] sealed trait PrivateDialogEvent < nl > + < nl > private [ dialog ] case class Created ( state : PrivateDialogState ) extends PrivateDialogEvent < nl > + < nl > private [ dialog ] case class LastMessageDate ( date : Long , userId : Int ) extends PrivateDialogEvent < nl > + < nl > private [ dialog ] case class LastReceiveDate ( date : Long , userId : Int ) extends PrivateDialogEvent < nl > + < nl > private [ dialog ] case class LastReadDate ( date : Long , userId : Int ) extends PrivateDialogEvent < nl > + < nl > } < nl > < nl > case class PrivateDialogState ( private val state : Map [ Int , DialogState ] ) extends ProcessorState { < nl > def apply ( userId : Int ) : DialogState = state ( userId ) < nl > + < nl > def updated ( userId : Int , dialogState : DialogState ) : PrivateDialogState = PrivateDialogState ( state . updated ( userId , dialogState ) ) < nl > } < nl > < nl > @ @ - 68 , 13 + 74 , 11 @ @ private [ privat ] final class PrivateDialog extends DialogProcessor [ PrivateDialogS < nl > protected implicit val socialRegion = SocialExtension ( system ) . region < nl > protected implicit val timeout = Timeout ( 5 . seconds ) < nl > < nl > - protected val userDeliveryExtensions : scala . collection . mutable . Map [ Int , DeliveryExtension ] = scala . collection . mutable . Map . empty [ Int , DeliveryExtension ] < nl > + protected val userDeliveryExtensions = scala . collection . concurrent . TrieMap . empty [ Int , DeliveryExtension ] < nl > < nl > protected def deliveryExt ( userId : Int , state : PrivateDialogState ) : DeliveryExtension = { < nl > val userExtensions = state ( userId ) . extensions < nl > - val ext = userDeliveryExtensions . getOrElse ( userId , dialogExt . getDeliveryExtension ( userExtensions ) ) < nl > - userDeliveryExtensions + = ( userId → ext ) < nl > - ext < nl > + userDeliveryExtensions . getOrElseUpdate ( userId , dialogExt . getDeliveryExtension ( userExtensions ) ) < nl > } < nl > < nl > protected implicit val sendResponseCache : Cache [ AuthIdRandomId , Future [ SeqStateDate ] ] = < nl > @ @ - 127 , 6 + 131 , 7 @ @ private [ privat ] final class PrivateDialog extends DialogProcessor [ PrivateDialogS < nl > } < nl > < nl > private [ this ] var recoveryState : Option [ PrivateDialogState ] = None < nl > + < nl > override def receiveRecover = { < nl > case created : Created ⇒ recoveryState = Some ( created . state ) < nl > case e : PrivateDialogEvent ⇒ recoveryState = recoveryState map ( updatedState ( e , _ ) )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index f6d4dfb . . 8ae31bd 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 211 , 8 + 211 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 ) 
 } 
 
 - val userDevices = devices . filter ( _ . _ 2 . client . externalUserId . contains ( userId ) ) . values . map ( _ . deviceId ) . toSet 
 - if ( ! sessions . keySet . exists ( pair ⇒ userDevices . contains ( pair . left ) | | userDevices . contains ( pair . right ) ) ) { 
 + if ( ! isConnected ( userId ) ) { 
 putParticipant ( userId , ApiCallMemberState . CONNECTING ) 
 broadcastSyncedSet ( ) 
 } 
 @ @ - 268 , 6 + 267 , 11 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 } 
 } 
 
 + private def isConnected ( userId : UserId ) : Boolean = { 
 + val userDevices = devices . filter ( _ . _ 2 . client . externalUserId . contains ( userId ) ) . values . map ( _ . deviceId ) . toSet 
 + sessions . keySet . exists ( pair ⇒ userDevices . contains ( pair . left ) | | userDevices . contains ( pair . right ) ) 
 + } 
 + 
 private def putParticipant ( userId : Int , state : ApiCallMemberState . Value ) : Unit = { 
 participants get userId match { 
 case Some ( oldState ) ⇒

NEAREST DIFF:
diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala 
 index 745d59e . . abd0e61 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala 
 @ @ - 30 , 10 + 30 , 10 @ @ class GateCodeActivation ( config : GateConfig ) ( 
 val request = HttpRequest ( 
 method = POST , 
 uri = s " $ { config . uri } / v1 / codes / send " , 
 - entity = Json . toJson ( code ) . toString ) 
 + entity = Json . toJson ( code ) . toString 
 + ) 
 
 - 
 - system . log . debug ( " Requesting code send with { } " , request ) 
 + system . log . debug ( " Requesting code send with { } " , request ) 
 
 val codeResponse : Future [ CodeResponse ] = for { 
 resp ← http . singleRequest ( request . withHeaders ( ` X - Auth - Token ` ( config . authToken ) ) ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala 
 index 41d633a . . cf0dfa7 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala 
 @ @ - 70 , 13 + 70 , 14 @ @ private [ dialog ] final class ActorDelivery ( ) ( implicit val system : ActorSystem ) ex 
 randomId = randomId , 
 message = message 
 ) 
 + 
 + val senderAuthIdUpdate = UpdateMessageSent ( peer , randomId , timestamp ) 
 + 
 for { 
 senderAuthIds ← userExt . getAuthIds ( senderUserId ) map ( _ . toSet ) 
 _ ← SeqUpdatesManager . persistAndPushUpdates ( senderAuthIds filterNot ( _ = = senderAuthId ) , senderUpdate , None , isFat , deliveryId = Some ( s " msg _ $ { peer . toString } _ $ { randomId } " ) ) 
 - } yield ( ) 
 - 
 - val senderAuthIdUpdate = UpdateMessageSent ( peer , randomId , timestamp ) 
 - SeqUpdatesManager . persistAndPushUpdate ( senderAuthId , senderAuthIdUpdate , None , isFat , deliveryId = Some ( s " msgsent _ $ { peer . toString } _ $ { randomId } " ) ) 
 + seqstate ← SeqUpdatesManager . persistAndPushUpdate ( senderAuthId , senderAuthIdUpdate , None , isFat , deliveryId = Some ( s " msgsent _ $ { peer . toString } _ $ { randomId } " ) ) 
 + } yield seqstate 
 } 
 
 override def authorRead ( readerUserId : Int , authorUserId : Int , date : Long , now : Long ) : Future [ Unit ] = { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialog . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialog . scala 
 index 05ad631 . . d69c53a 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialog . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialog . scala 
 @ @ - 6 , 14 + 6 , 13 @ @ import akka . persistence . { RecoveryCompleted , RecoveryFailure } 
 import akka . util . Timeout 
 import com . github . benmanes . caffeine . cache . Cache 
 import im . actor . api . rpc . misc . ApiExtension 
 - import im . actor . extension . InternalExtensions 
 import im . actor . server . db . DbExtension 
 import im . actor . server . dialog . _ 
 import im . actor . server . dialog . privat . PrivateDialogEvents . PrivateDialogEvent 
 import im . actor . server . office . ProcessorState 
 - import im . actor . server . sequence . { SeqStateDate , SeqUpdatesExtension } 
 + import im . actor . server . sequence . SeqStateDate 
 import im . actor . server . social . SocialExtension 
 - import im . actor . server . user . { UserOffice , UserExtension , UserViewRegion } 
 + import im . actor . server . user . UserExtension 
 import im . actor . util . cache . CacheHelpers . _ 
 import slick . driver . PostgresDriver . api . Database 
 
 @ @ - 30 , 15 + 29 , 22 @ @ case class DialogState ( 
 ) 
 
 object PrivateDialogEvents { 
 + 
 private [ dialog ] sealed trait PrivateDialogEvent 
 + 
 private [ dialog ] case class Created ( state : PrivateDialogState ) extends PrivateDialogEvent 
 + 
 private [ dialog ] case class LastMessageDate ( date : Long , userId : Int ) extends PrivateDialogEvent 
 + 
 private [ dialog ] case class LastReceiveDate ( date : Long , userId : Int ) extends PrivateDialogEvent 
 + 
 private [ dialog ] case class LastReadDate ( date : Long , userId : Int ) extends PrivateDialogEvent 
 + 
 } 
 
 case class PrivateDialogState ( private val state : Map [ Int , DialogState ] ) extends ProcessorState { 
 def apply ( userId : Int ) : DialogState = state ( userId ) 
 + 
 def updated ( userId : Int , dialogState : DialogState ) : PrivateDialogState = PrivateDialogState ( state . updated ( userId , dialogState ) ) 
 } 
 
 @ @ - 68 , 13 + 74 , 11 @ @ private [ privat ] final class PrivateDialog extends DialogProcessor [ PrivateDialogS 
 protected implicit val socialRegion = SocialExtension ( system ) . region 
 protected implicit val timeout = Timeout ( 5 . seconds ) 
 
 - protected val userDeliveryExtensions : scala . collection . mutable . Map [ Int , DeliveryExtension ] = scala . collection . mutable . Map . empty [ Int , DeliveryExtension ] 
 + protected val userDeliveryExtensions = scala . collection . concurrent . TrieMap . empty [ Int , DeliveryExtension ] 
 
 protected def deliveryExt ( userId : Int , state : PrivateDialogState ) : DeliveryExtension = { 
 val userExtensions = state ( userId ) . extensions 
 - val ext = userDeliveryExtensions . getOrElse ( userId , dialogExt . getDeliveryExtension ( userExtensions ) ) 
 - userDeliveryExtensions + = ( userId → ext ) 
 - ext 
 + userDeliveryExtensions . getOrElseUpdate ( userId , dialogExt . getDeliveryExtension ( userExtensions ) ) 
 } 
 
 protected implicit val sendResponseCache : Cache [ AuthIdRandomId , Future [ SeqStateDate ] ] = 
 @ @ - 127 , 6 + 131 , 7 @ @ private [ privat ] final class PrivateDialog extends DialogProcessor [ PrivateDialogS 
 } 
 
 private [ this ] var recoveryState : Option [ PrivateDialogState ] = None 
 + 
 override def receiveRecover = { 
 case created : Created ⇒ recoveryState = Some ( created . state ) 
 case e : PrivateDialogEvent ⇒ recoveryState = recoveryState map ( updatedState ( e , _ ) )
