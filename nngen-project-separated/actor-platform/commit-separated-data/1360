BLEU SCORE: 0.08383924775392589

TEST MSG: refactor ( server : http , hook ) : add logging on hooks addition ; fix typo , remove deda code in HttpFrontend
GENERATED MSG: fix ( server : testkit ) : remove unused implicits

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala < nl > index a75570d . . 294990b 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > package im . actor . server . hook < nl > < nl > import im . actor . concurrent . FutureExt < nl > + import org . slf4j . LoggerFactory < nl > < nl > import scala . collection . concurrent . TrieMap < nl > import scala . concurrent . { ExecutionContext , Future } < nl > @ @ - 27 , 9 + 28 , 18 @ @ class HooksStorage [ H < : Hook ] { < nl > private val hooks = TrieMap . empty [ String , H ] < nl > protected def hooksList : Seq [ H ] = hooks . values . toSeq < nl > < nl > - def register ( name : String , hook : H ) : Unit = < nl > - if ( hooks . putIfAbsent ( name , hook ) . nonEmpty ) < nl > + private val log = LoggerFactory . getLogger ( this . getClass ) < nl > + < nl > + def register ( name : String , hook : H ) : Unit = { < nl > + val inserted = hooks . putIfAbsent ( name , hook ) . isEmpty < nl > + if ( inserted ) { < nl > + log . debug ( " Registered hook { } " , name ) < nl > + } else { < nl > + log . warn ( " Hook { } is already registered " , name ) < nl > + < nl > throw HookException . HookAlreadyRegistered ( name ) < nl > + } < nl > + } < nl > } < nl > < nl > final class HooksStorage0 [ H < : Hook0 [ R ] , R ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > index 1b8fee6 . . bab59f8 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > @ @ - 12 , 13 + 12 , 9 @ @ import im . actor . server . api . http . bots . BotsHandler < nl > import im . actor . server . api . http . groups . GroupsHandler < nl > import im . actor . server . api . http . status . StatusHandler < nl > import im . actor . server . api . http . webhooks . WebhooksHandler < nl > - import im . actor . server . db . DbExtension < nl > - import im . actor . server . file . { FileStorageExtension , FileStorageAdapter } < nl > - import im . actor . server . group . { GroupExtension , GroupViewRegion } < nl > import im . actor . tls . TlsContext < nl > - import slick . driver . PostgresDriver . api . _ < nl > < nl > - import scala . concurrent . { Future , ExecutionContext } < nl > + import scala . concurrent . Future < nl > import scala . concurrent . duration . _ < nl > import scala . util . { Failure , Success } < nl > < nl > @ @ - 57 , 15 + 53 , 8 @ @ private object HttpApiFrontend { < nl > } < nl > } < nl > < nl > - def start ( config : HttpApiConfig , tlsContext : Option [ TlsContext ] ) ( < nl > - implicit < nl > - system : ActorSystem , < nl > - materializer : Materializer < nl > - ) : Unit = { < nl > - implicit val ec : ExecutionContext = system . dispatcher < nl > - implicit val db : Database = DbExtension ( system ) . db < nl > - implicit val groupProcessorRegion : GroupViewRegion = GroupExtension ( system ) . viewRegion < nl > - implicit val fsAdapter : FileStorageAdapter = FileStorageExtension ( system ) . fsAdapter < nl > + def start ( config : HttpApiConfig , tlsContext : Option [ TlsContext ] ) ( implicit system : ActorSystem , materializer : Materializer ) : Unit = { < nl > + import system . dispatcher < nl > < nl > val webhooks = new WebhooksHandler < nl > val groups = new GroupsHandler < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / groups / GroupsHandler . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / groups / GroupsHandler . scala < nl > index d6bb433 . . 8535935 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / groups / GroupsHandler . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / groups / GroupsHandler . scala < nl > @ @ - 1 , 9 + 1 , 10 @ @ < nl > package im . actor . server . api . http . groups < nl > < nl > - import im . actor . server . file . { FileLocation , FileStorageAdapter , ImageUtils } < nl > + import im . actor . server . db . DbExtension < nl > + import im . actor . server . file . { FileStorageExtension , FileLocation , ImageUtils } < nl > < nl > import scala . concurrent . duration . _ < nl > - import scala . concurrent . { ExecutionContext , Future } < nl > + import scala . concurrent . Future < nl > import scala . util . { Failure , Success } < nl > < nl > import akka . actor . ActorSystem < nl > @ @ - 20 , 13 + 21 , 11 @ @ import im . actor . server . api . http . json . { AvatarUrls , Errors , Group , GroupInviteInf < nl > import ImageUtils . getAvatar < nl > import im . actor . server . { model , persist } < nl > < nl > - class GroupsHandler ( ) ( < nl > - implicit < nl > - db : Database , < nl > - system : ActorSystem , < nl > - ec : ExecutionContext , < nl > - fsAdapter : FileStorageAdapter < nl > - ) extends RoutesHandler { < nl > + class GroupsHandler ( ) ( implicit system : ActorSystem ) extends RoutesHandler { < nl > + < nl > + import system . dispatcher < nl > + private val db = DbExtension ( system ) . db < nl > + private lazy val fsAdapter = FileStorageExtension ( system ) . fsAdapter < nl > < nl > override def routes : Route = path ( " groups " / " invites " / Segment ) { token ⇒ < nl > get { < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > index 305fdac . . 4ceb925 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > @ @ - 177 , 10 + 177 , 10 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > system . log . debug ( " Staring ContactsService " ) < nl > val contactsService = new ContactsServiceImpl < nl > < nl > - system . log . debug ( " Starging MessagingService " ) < nl > + system . log . debug ( " Starting MessagingService " ) < nl > val messagingService = MessagingServiceImpl ( ) < nl > < nl > - system . log . debug ( " Starging GroupsService " ) < nl > + system . log . debug ( " Starting GroupsService " ) < nl > val groupsService = new GroupsServiceImpl ( groupInviteConfig ) < nl > < nl > system . log . debug ( " Starting PubgroupsService " )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala < nl > index 46ae652 . . 77a66e4 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala < nl > @ @ - 85 , 12 + 85 , 7 @ @ object ImageUtils { < nl > def scaleAvatar ( < nl > fullFileId : Long , < nl > rng : ThreadLocalRandom < nl > - ) ( < nl > - implicit < nl > - fsAdapter : FileStorageAdapter , < nl > - ec : ExecutionContext , < nl > - system : ActorSystem < nl > - ) : DBIO [ Either [ Throwable , Avatar ] ] = < nl > + ) ( implicit system : ActorSystem ) : DBIO [ Either [ Throwable , Avatar ] ] = < nl > scaleAvatar ( < nl > fullFileId , < nl > rng , < nl > @ @ - 103 , 12 + 98 , 9 @ @ object ImageUtils { < nl > rng : ThreadLocalRandom , < nl > smallDesc : ThumbDescriptor , < nl > largeDesc : ThumbDescriptor < nl > - ) ( < nl > - implicit < nl > - fsAdapter : FileStorageAdapter , < nl > - ec : ExecutionContext , < nl > - system : ActorSystem < nl > - ) : DBIO [ Either [ Throwable , Avatar ] ] = { < nl > + ) ( implicit system : ActorSystem ) : DBIO [ Either [ Throwable , Avatar ] ] = { < nl > + implicit val ec : ExecutionContext = system . dispatcher < nl > + val fsAdapter = FileStorageExtension ( system ) . fsAdapter < nl > persist . FileRepo . find ( fullFileId ) flatMap { < nl > case Some ( fullFileModel ) ⇒ < nl > fsAdapter . downloadFile ( fullFileId ) flatMap { < nl > diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ImplicitFileStorageAdapter . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ImplicitFileStorageAdapter . scala < nl > deleted file mode 100644 < nl > index 0bc8b62 . . 0000000 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ImplicitFileStorageAdapter . scala < nl > + + + / dev / null < nl > @ @ - 1 , 14 + 0 , 0 @ @ < nl > - package im . actor . server < nl > - < nl > - import akka . actor . ActorSystem < nl > - import com . amazonaws . auth . EnvironmentVariableCredentialsProvider < nl > - import im . actor . server . file . s3 . { S3StorageAdapter , S3StorageAdapterConfig } < nl > - import im . actor . server . file . FileStorageAdapter < nl > - < nl > - trait ImplicitFileStorageAdapter { < nl > - protected implicit val system : ActorSystem < nl > - < nl > - protected implicit lazy val awsCredentials = new EnvironmentVariableCredentialsProvider ( ) < nl > - protected implicit lazy val fsAdapterS3 : S3StorageAdapter = new S3StorageAdapter ( system ) < nl > - protected implicit lazy val fsAdapter : FileStorageAdapter = fsAdapterS3 < nl > - } < nl > diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / Implicits . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / Implicits . scala < nl > deleted file mode 100644 < nl > index 4299b9f . . 0000000 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / Implicits . scala < nl > + + + / dev / null < nl > @ @ - 1 , 9 + 0 , 0 @ @ < nl > - package im . actor . server < nl > - < nl > - trait ImplicitRegions < nl > - extends ImplicitSeqUpdatesManagerRegion < nl > - with ImplicitSessionRegion < nl > - with ImplicitSocialManagerRegion < nl > - < nl > - trait ImplicitServiceDependencies extends ImplicitFileStorageAdapter < nl > - < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > index aed25c8 . . f9f8356 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server < nl > < nl > import java . net . InetSocketAddress < nl > < nl > + import com . amazonaws . auth . EnvironmentVariableCredentialsProvider < nl > import com . amazonaws . services . s3 . transfer . TransferManager < nl > import com . typesafe . config . ConfigFactory < nl > import im . actor . api . rpc . auth . _ < nl > @ @ - 32 , 7 + 33 , 7 @ @ class SimpleServerE2eSpec extends ActorSuite ( < nl > | } < nl > " " " . stripMargin < nl > ) ) < nl > - ) with ImplicitFileStorageAdapter with ActorSerializerPrepare { < nl > + ) with ActorSerializerPrepare { < nl > behavior of " Server " < nl > < nl > it should " connect and Handshake " in Server . e1 < nl > @ @ - 58 , 6 + 59 , 7 @ @ class SimpleServerE2eSpec extends ActorSuite ( < nl > Session . startRegion ( Session . props ) < nl > implicit val sessionRegion = Session . startRegionProxy ( ) < nl > < nl > + private val awsCredentials = new EnvironmentVariableCredentialsProvider ( ) < nl > implicit val transferManager = new TransferManager ( awsCredentials ) < nl > implicit val ec : ExecutionContext = system . dispatcher < nl > implicit val oauth2Service = new GoogleProvider ( oauthGoogleConfig ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > index f3d1576 . . 066e29b 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > @ @ - 11 , 7 + 11 , 6 @ @ import im . actor . server . _ < nl > < nl > class FilesServiceSpec < nl > extends BaseAppSuite < nl > - with ImplicitFileStorageAdapter < nl > with ImplicitSessionRegion < nl > with ImplicitAuthService { < nl > behavior of " FilesService " < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > index 1fdfbad . . 985adf6 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > @ @ - 17 , 7 + 17 , 6 @ @ import scala . concurrent . Future < nl > import scala . util . Random < nl > < nl > final class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceHelpers < nl > - with ImplicitFileStorageAdapter < nl > with ImplicitSessionRegion < nl > with ImplicitAuthService < nl > with ImplicitSequenceService < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala < nl > index aa44dff . . 81e2188 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala < nl > @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . api . rpc . service < nl > < nl > import java . nio . file . { Files , Paths } < nl > < nl > - import im . actor . server . file . ImageUtils < nl > + import im . actor . server . file . { FileStorageExtension , ImageUtils } < nl > < nl > import scala . concurrent . Await < nl > import scala . concurrent . duration . _ < nl > @ @ - 19 , 7 + 19 , 6 @ @ import im . actor . server . api . rpc . service . profile . { ProfileErrors , ProfileServiceIm < nl > < nl > final class ProfileServiceSpec < nl > extends BaseAppSuite < nl > - with ImplicitFileStorageAdapter < nl > with ImplicitSessionRegion < nl > with ImplicitAuthService { < nl > behavior of " Profile Service " < nl > @ @ - 43 , 6 + 42 , 8 @ @ final class ProfileServiceSpec < nl > implicit lazy val service = new ProfileServiceImpl < nl > implicit lazy val filesService = new FilesServiceImpl < nl > < nl > + private val fsAdapter = FileStorageExtension ( system ) . fsAdapter < nl > + < nl > private val invalidImageFile = Paths . get ( getClass . getResource ( " / invalid - avatar . jpg " ) . toURI ) . toFile < nl > private val tooLargeImageFile = Paths . get ( getClass . getResource ( " / too - large - avatar . jpg " ) . toURI ) . toFile < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > index 9ae40e9 . . be0c086 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > @ @ - 20 , 7 + 20 , 7 @ @ import im . actor . server . api . http . webhooks . OutgoingHooksErrors < nl > import im . actor . server . api . http . { HttpApiConfig , HttpApiFrontend } < nl > import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } < nl > import im . actor . server . api . rpc . service . messaging < nl > - import im . actor . server . file . ImageUtils < nl > + import im . actor . server . file . { FileStorageExtension , ImageUtils } < nl > import play . api . libs . json . _ < nl > < nl > import scala . concurrent . forkjoin . ThreadLocalRandom < nl > @ @ - 28 , 7 + 28 , 6 @ @ import scala . concurrent . forkjoin . ThreadLocalRandom < nl > final class HttpApiFrontendSpec < nl > extends BaseAppSuite < nl > with GroupsServiceHelpers < nl > - with ImplicitFileStorageAdapter < nl > with ImplicitSessionRegion < nl > with ImplicitAuthService < nl > with PlayJsonSupport { < nl > @ @ - 79 , 6 + 78 , 8 @ @ final class HttpApiFrontendSpec < nl > implicit lazy val service = messaging . MessagingServiceImpl ( ) < nl > implicit lazy val groupsService = new GroupsServiceImpl ( groupInviteConfig ) < nl > < nl > + private val fsAdapter = FileStorageExtension ( system ) . fsAdapter < nl > + < nl > implicit val reverseHookResponseUnmarshaller : FromEntityUnmarshaller [ ReverseHookResponse ] = Unmarshaller { implicit ec ⇒ entity ⇒ < nl > Unmarshal ( entity ) . to [ String ] . map { body ⇒ < nl > Json . parse ( body ) . as [ ReverseHookResponse ]

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala 
 index a75570d . . 294990b 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package im . actor . server . hook 
 
 import im . actor . concurrent . FutureExt 
 + import org . slf4j . LoggerFactory 
 
 import scala . collection . concurrent . TrieMap 
 import scala . concurrent . { ExecutionContext , Future } 
 @ @ - 27 , 9 + 28 , 18 @ @ class HooksStorage [ H < : Hook ] { 
 private val hooks = TrieMap . empty [ String , H ] 
 protected def hooksList : Seq [ H ] = hooks . values . toSeq 
 
 - def register ( name : String , hook : H ) : Unit = 
 - if ( hooks . putIfAbsent ( name , hook ) . nonEmpty ) 
 + private val log = LoggerFactory . getLogger ( this . getClass ) 
 + 
 + def register ( name : String , hook : H ) : Unit = { 
 + val inserted = hooks . putIfAbsent ( name , hook ) . isEmpty 
 + if ( inserted ) { 
 + log . debug ( " Registered hook { } " , name ) 
 + } else { 
 + log . warn ( " Hook { } is already registered " , name ) 
 + 
 throw HookException . HookAlreadyRegistered ( name ) 
 + } 
 + } 
 } 
 
 final class HooksStorage0 [ H < : Hook0 [ R ] , R ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 index 1b8fee6 . . bab59f8 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 @ @ - 12 , 13 + 12 , 9 @ @ import im . actor . server . api . http . bots . BotsHandler 
 import im . actor . server . api . http . groups . GroupsHandler 
 import im . actor . server . api . http . status . StatusHandler 
 import im . actor . server . api . http . webhooks . WebhooksHandler 
 - import im . actor . server . db . DbExtension 
 - import im . actor . server . file . { FileStorageExtension , FileStorageAdapter } 
 - import im . actor . server . group . { GroupExtension , GroupViewRegion } 
 import im . actor . tls . TlsContext 
 - import slick . driver . PostgresDriver . api . _ 
 
 - import scala . concurrent . { Future , ExecutionContext } 
 + import scala . concurrent . Future 
 import scala . concurrent . duration . _ 
 import scala . util . { Failure , Success } 
 
 @ @ - 57 , 15 + 53 , 8 @ @ private object HttpApiFrontend { 
 } 
 } 
 
 - def start ( config : HttpApiConfig , tlsContext : Option [ TlsContext ] ) ( 
 - implicit 
 - system : ActorSystem , 
 - materializer : Materializer 
 - ) : Unit = { 
 - implicit val ec : ExecutionContext = system . dispatcher 
 - implicit val db : Database = DbExtension ( system ) . db 
 - implicit val groupProcessorRegion : GroupViewRegion = GroupExtension ( system ) . viewRegion 
 - implicit val fsAdapter : FileStorageAdapter = FileStorageExtension ( system ) . fsAdapter 
 + def start ( config : HttpApiConfig , tlsContext : Option [ TlsContext ] ) ( implicit system : ActorSystem , materializer : Materializer ) : Unit = { 
 + import system . dispatcher 
 
 val webhooks = new WebhooksHandler 
 val groups = new GroupsHandler 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / groups / GroupsHandler . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / groups / GroupsHandler . scala 
 index d6bb433 . . 8535935 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / groups / GroupsHandler . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / groups / GroupsHandler . scala 
 @ @ - 1 , 9 + 1 , 10 @ @ 
 package im . actor . server . api . http . groups 
 
 - import im . actor . server . file . { FileLocation , FileStorageAdapter , ImageUtils } 
 + import im . actor . server . db . DbExtension 
 + import im . actor . server . file . { FileStorageExtension , FileLocation , ImageUtils } 
 
 import scala . concurrent . duration . _ 
 - import scala . concurrent . { ExecutionContext , Future } 
 + import scala . concurrent . Future 
 import scala . util . { Failure , Success } 
 
 import akka . actor . ActorSystem 
 @ @ - 20 , 13 + 21 , 11 @ @ import im . actor . server . api . http . json . { AvatarUrls , Errors , Group , GroupInviteInf 
 import ImageUtils . getAvatar 
 import im . actor . server . { model , persist } 
 
 - class GroupsHandler ( ) ( 
 - implicit 
 - db : Database , 
 - system : ActorSystem , 
 - ec : ExecutionContext , 
 - fsAdapter : FileStorageAdapter 
 - ) extends RoutesHandler { 
 + class GroupsHandler ( ) ( implicit system : ActorSystem ) extends RoutesHandler { 
 + 
 + import system . dispatcher 
 + private val db = DbExtension ( system ) . db 
 + private lazy val fsAdapter = FileStorageExtension ( system ) . fsAdapter 
 
 override def routes : Route = path ( " groups " / " invites " / Segment ) { token ⇒ 
 get { 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 index 305fdac . . 4ceb925 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 @ @ - 177 , 10 + 177 , 10 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 system . log . debug ( " Staring ContactsService " ) 
 val contactsService = new ContactsServiceImpl 
 
 - system . log . debug ( " Starging MessagingService " ) 
 + system . log . debug ( " Starting MessagingService " ) 
 val messagingService = MessagingServiceImpl ( ) 
 
 - system . log . debug ( " Starging GroupsService " ) 
 + system . log . debug ( " Starting GroupsService " ) 
 val groupsService = new GroupsServiceImpl ( groupInviteConfig ) 
 
 system . log . debug ( " Starting PubgroupsService " )

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala 
 index 46ae652 . . 77a66e4 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala 
 @ @ - 85 , 12 + 85 , 7 @ @ object ImageUtils { 
 def scaleAvatar ( 
 fullFileId : Long , 
 rng : ThreadLocalRandom 
 - ) ( 
 - implicit 
 - fsAdapter : FileStorageAdapter , 
 - ec : ExecutionContext , 
 - system : ActorSystem 
 - ) : DBIO [ Either [ Throwable , Avatar ] ] = 
 + ) ( implicit system : ActorSystem ) : DBIO [ Either [ Throwable , Avatar ] ] = 
 scaleAvatar ( 
 fullFileId , 
 rng , 
 @ @ - 103 , 12 + 98 , 9 @ @ object ImageUtils { 
 rng : ThreadLocalRandom , 
 smallDesc : ThumbDescriptor , 
 largeDesc : ThumbDescriptor 
 - ) ( 
 - implicit 
 - fsAdapter : FileStorageAdapter , 
 - ec : ExecutionContext , 
 - system : ActorSystem 
 - ) : DBIO [ Either [ Throwable , Avatar ] ] = { 
 + ) ( implicit system : ActorSystem ) : DBIO [ Either [ Throwable , Avatar ] ] = { 
 + implicit val ec : ExecutionContext = system . dispatcher 
 + val fsAdapter = FileStorageExtension ( system ) . fsAdapter 
 persist . FileRepo . find ( fullFileId ) flatMap { 
 case Some ( fullFileModel ) ⇒ 
 fsAdapter . downloadFile ( fullFileId ) flatMap { 
 diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ImplicitFileStorageAdapter . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ImplicitFileStorageAdapter . scala 
 deleted file mode 100644 
 index 0bc8b62 . . 0000000 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ImplicitFileStorageAdapter . scala 
 + + + / dev / null 
 @ @ - 1 , 14 + 0 , 0 @ @ 
 - package im . actor . server 
 - 
 - import akka . actor . ActorSystem 
 - import com . amazonaws . auth . EnvironmentVariableCredentialsProvider 
 - import im . actor . server . file . s3 . { S3StorageAdapter , S3StorageAdapterConfig } 
 - import im . actor . server . file . FileStorageAdapter 
 - 
 - trait ImplicitFileStorageAdapter { 
 - protected implicit val system : ActorSystem 
 - 
 - protected implicit lazy val awsCredentials = new EnvironmentVariableCredentialsProvider ( ) 
 - protected implicit lazy val fsAdapterS3 : S3StorageAdapter = new S3StorageAdapter ( system ) 
 - protected implicit lazy val fsAdapter : FileStorageAdapter = fsAdapterS3 
 - } 
 diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / Implicits . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / Implicits . scala 
 deleted file mode 100644 
 index 4299b9f . . 0000000 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / Implicits . scala 
 + + + / dev / null 
 @ @ - 1 , 9 + 0 , 0 @ @ 
 - package im . actor . server 
 - 
 - trait ImplicitRegions 
 - extends ImplicitSeqUpdatesManagerRegion 
 - with ImplicitSessionRegion 
 - with ImplicitSocialManagerRegion 
 - 
 - trait ImplicitServiceDependencies extends ImplicitFileStorageAdapter 
 - 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 index aed25c8 . . f9f8356 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server 
 
 import java . net . InetSocketAddress 
 
 + import com . amazonaws . auth . EnvironmentVariableCredentialsProvider 
 import com . amazonaws . services . s3 . transfer . TransferManager 
 import com . typesafe . config . ConfigFactory 
 import im . actor . api . rpc . auth . _ 
 @ @ - 32 , 7 + 33 , 7 @ @ class SimpleServerE2eSpec extends ActorSuite ( 
 | } 
 " " " . stripMargin 
 ) ) 
 - ) with ImplicitFileStorageAdapter with ActorSerializerPrepare { 
 + ) with ActorSerializerPrepare { 
 behavior of " Server " 
 
 it should " connect and Handshake " in Server . e1 
 @ @ - 58 , 6 + 59 , 7 @ @ class SimpleServerE2eSpec extends ActorSuite ( 
 Session . startRegion ( Session . props ) 
 implicit val sessionRegion = Session . startRegionProxy ( ) 
 
 + private val awsCredentials = new EnvironmentVariableCredentialsProvider ( ) 
 implicit val transferManager = new TransferManager ( awsCredentials ) 
 implicit val ec : ExecutionContext = system . dispatcher 
 implicit val oauth2Service = new GoogleProvider ( oauthGoogleConfig ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 index f3d1576 . . 066e29b 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 @ @ - 11 , 7 + 11 , 6 @ @ import im . actor . server . _ 
 
 class FilesServiceSpec 
 extends BaseAppSuite 
 - with ImplicitFileStorageAdapter 
 with ImplicitSessionRegion 
 with ImplicitAuthService { 
 behavior of " FilesService " 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 index 1fdfbad . . 985adf6 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 @ @ - 17 , 7 + 17 , 6 @ @ import scala . concurrent . Future 
 import scala . util . Random 
 
 final class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceHelpers 
 - with ImplicitFileStorageAdapter 
 with ImplicitSessionRegion 
 with ImplicitAuthService 
 with ImplicitSequenceService 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala 
 index aa44dff . . 81e2188 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala 
 @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . api . rpc . service 
 
 import java . nio . file . { Files , Paths } 
 
 - import im . actor . server . file . ImageUtils 
 + import im . actor . server . file . { FileStorageExtension , ImageUtils } 
 
 import scala . concurrent . Await 
 import scala . concurrent . duration . _ 
 @ @ - 19 , 7 + 19 , 6 @ @ import im . actor . server . api . rpc . service . profile . { ProfileErrors , ProfileServiceIm 
 
 final class ProfileServiceSpec 
 extends BaseAppSuite 
 - with ImplicitFileStorageAdapter 
 with ImplicitSessionRegion 
 with ImplicitAuthService { 
 behavior of " Profile Service " 
 @ @ - 43 , 6 + 42 , 8 @ @ final class ProfileServiceSpec 
 implicit lazy val service = new ProfileServiceImpl 
 implicit lazy val filesService = new FilesServiceImpl 
 
 + private val fsAdapter = FileStorageExtension ( system ) . fsAdapter 
 + 
 private val invalidImageFile = Paths . get ( getClass . getResource ( " / invalid - avatar . jpg " ) . toURI ) . toFile 
 private val tooLargeImageFile = Paths . get ( getClass . getResource ( " / too - large - avatar . jpg " ) . toURI ) . toFile 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 index 9ae40e9 . . be0c086 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 @ @ - 20 , 7 + 20 , 7 @ @ import im . actor . server . api . http . webhooks . OutgoingHooksErrors 
 import im . actor . server . api . http . { HttpApiConfig , HttpApiFrontend } 
 import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } 
 import im . actor . server . api . rpc . service . messaging 
 - import im . actor . server . file . ImageUtils 
 + import im . actor . server . file . { FileStorageExtension , ImageUtils } 
 import play . api . libs . json . _ 
 
 import scala . concurrent . forkjoin . ThreadLocalRandom 
 @ @ - 28 , 7 + 28 , 6 @ @ import scala . concurrent . forkjoin . ThreadLocalRandom 
 final class HttpApiFrontendSpec 
 extends BaseAppSuite 
 with GroupsServiceHelpers 
 - with ImplicitFileStorageAdapter 
 with ImplicitSessionRegion 
 with ImplicitAuthService 
 with PlayJsonSupport { 
 @ @ - 79 , 6 + 78 , 8 @ @ final class HttpApiFrontendSpec 
 implicit lazy val service = messaging . MessagingServiceImpl ( ) 
 implicit lazy val groupsService = new GroupsServiceImpl ( groupInviteConfig ) 
 
 + private val fsAdapter = FileStorageExtension ( system ) . fsAdapter 
 + 
 implicit val reverseHookResponseUnmarshaller : FromEntityUnmarshaller [ ReverseHookResponse ] = Unmarshaller { implicit ec ⇒ entity ⇒ 
 Unmarshal ( entity ) . to [ String ] . map { body ⇒ 
 Json . parse ( body ) . as [ ReverseHookResponse ]
