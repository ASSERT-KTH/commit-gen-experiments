BLEU SCORE: 0.3564026463354183

TEST MSG: chore ( server ) : dependency updates
GENERATED MSG: fix ( server ) : fixed cluster issues

TEST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / http / BotsHttpHandler . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / http / BotsHttpHandler . scala < nl > index 8280d58 . . 28be1f9 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / http / BotsHttpHandler . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / http / BotsHttpHandler . scala < nl > @ @ - 12 , 7 + 12 , 7 @ @ import akka . stream . { ActorMaterializer , Materializer } < nl > import akka . stream . scaladsl . Flow < nl > import akka . util . ByteString < nl > import cats . data . OptionT < nl > - import cats . std . future . _ < nl > + import cats . instances . future . _ < nl > import de . heikoseeberger . akkahttpplayjson . PlayJsonSupport < nl > import im . actor . api . rpc . sequence . UpdateRawUpdate < nl > import im . actor . server . api . http . HttpHandler < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / DBIOResultRpc . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / DBIOResultRpc . scala < nl > index 27da70c . . bf45037 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / DBIOResultRpc . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / DBIOResultRpc . scala < nl > @ @ - 17 , 6 + 17 , 7 @ @ object DBIOResultRpc { < nl > def pure [ A ] ( a : A ) : DBIO [ A ] = DBIO . successful ( a ) < nl > def flatMap [ A , B ] ( fa : DBIO [ A ] ) ( f : A ⇒ DBIO [ B ] ) : DBIO [ B ] = fa flatMap f < nl > override def map [ A , B ] ( fa : DBIO [ A ] ) ( f : A ⇒ B ) : DBIO [ B ] = fa map f < nl > + def tailRecM [ A , B ] ( a : A ) ( f : A ⇒ DBIO [ Either [ A , B ] ] ) : DBIO [ B ] = defaultTailRecM ( a ) ( f ) < nl > } < nl > < nl > def point [ A ] ( a : A ) : Result [ A ] = Result [ A ] ( DBIO . successful ( right ( a ) ) ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / MaybeAuthorized . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / MaybeAuthorized . scala < nl > index 0262b81 . . 8da305b 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / MaybeAuthorized . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / MaybeAuthorized . scala < nl > @ @ - 36 , 11 + 36 , 9 @ @ case object MaybeAuthorized extends MaybeAuthorizedInstances < nl > < nl > trait MaybeAuthorizedInstances { < nl > implicit val maybeAuthorizedInstance = new Functor [ MaybeAuthorized ] with Monad [ MaybeAuthorized ] { < nl > - < nl > override def map [ A , B ] ( fa : MaybeAuthorized [ A ] ) ( f : A ⇒ B ) : MaybeAuthorized [ B ] = fa . map ( f ) < nl > - < nl > def pure [ A ] ( a : A ) : MaybeAuthorized [ A ] = Authorized ( a ) < nl > - < nl > def flatMap [ A , B ] ( fa : MaybeAuthorized [ A ] ) ( f : A ⇒ MaybeAuthorized [ B ] ) : MaybeAuthorized [ B ] = fa . flatMap ( f ) < nl > + def tailRecM [ A , B ] ( a : A ) ( f : A ⇒ MaybeAuthorized [ Either [ A , B ] ] ) : MaybeAuthorized [ B ] = defaultTailRecM ( a ) ( f ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionApiConverters . scala b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionApiConverters . scala < nl > index 40ef212 . . 9bc89bd 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionApiConverters . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionApiConverters . scala < nl > @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . encryption < nl > < nl > import cats . Foldable < nl > import cats . data . Xor , Xor . _ < nl > - import cats . std . all . _ < nl > + import cats . instances . all . _ < nl > import cats . syntax . all . _ < nl > import com . google . protobuf . ByteString < nl > import im . actor . api . rpc . encryption . { ApiEncryptionKeySignature , ApiEncryptionKeyGroup , ApiEncryptionKey } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala < nl > index 3a68237 . . 75b27dc 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala < nl > @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . server . encryption < nl > import akka . actor . _ < nl > import akka . event . Logging < nl > import akka . http . scaladsl . util . FastFuture < nl > - import cats . std . all . _ < nl > + import cats . instances . all . _ < nl > import cats . syntax . all . _ < nl > import cats . data . { Xor , XorT } < nl > import im . actor . api . rpc . encryption . _ < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / actor / ActorPush . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / actor / ActorPush . scala < nl > index b2608b9 . . feb1f59 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / push / actor / ActorPush . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / actor / ActorPush . scala < nl > @ @ - 23 , 7 + 23 , 7 @ @ final case class ActorPushMessage ( data : JsonObject ) < nl > < nl > object ActorPushMessage { < nl > def apply ( fields : Map [ String , String ] ) : ActorPushMessage = < nl > - ActorPushMessage ( JsonObject . fromMap ( fields mapValues Json . string ) ) < nl > + ActorPushMessage ( JsonObject . fromMap ( fields mapValues Json . fromString ) ) < nl > < nl > def apply ( fields : ( String , String ) * ) : ActorPushMessage = < nl > ActorPushMessage ( Map ( fields : _ * ) ) < nl > @ @ - 70 , 7 + 70 , 7 @ @ final class ActorPush ( system : ActorSystem ) extends Extension { < nl > } < nl > < nl > def deliver ( seq : Int , creds : ActorPushCredentials ) : Unit = < nl > - deliver ( ActorPushMessage ( JsonObject . singleton ( " seq " , Json . int ( seq ) ) ) , creds ) < nl > + deliver ( ActorPushMessage ( JsonObject . singleton ( " seq " , Json . fromInt ( seq ) ) ) , creds ) < nl > < nl > def deliver ( message : ActorPushMessage , creds : ActorPushCredentials ) : Unit = { < nl > val uri = Uri . parseAbsolute ( ParserInput ( creds . endpoint ) ) < nl > @ @ - 92 , 4 + 92 , 4 @ @ object ActorPush extends ExtensionId [ ActorPush ] with ExtensionIdProvider { < nl > override def createExtension ( system : ExtendedActorSystem ) : ActorPush = new ActorPush ( system ) < nl > < nl > override def lookup ( ) : ExtensionId [ _ < : Extension ] = ActorPush < nl > - } < nl > \ No newline at end of file < nl > + } < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonEncoders . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonEncoders . scala < nl > index fbf9116 . . 10f1094 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonEncoders . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonEncoders . scala < nl > @ @ - 4 , 5 + 4 , 5 @ @ import io . circe . _ < nl > import io . circe . generic . semiauto . _ < nl > < nl > trait JsonEncoders { < nl > - implicit val serverInfoFormat = deriveFor [ ServerInfo ] . encoder < nl > + implicit val serverInfoFormat = deriveEncoder [ ServerInfo ] < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / Helpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / Helpers . scala < nl > index 94ccace . . 90a110d 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / Helpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / Helpers . scala < nl > @ @ - 1 , 5 + 1 , 6 @ @ < nl > package im . actor . server . api . rpc . service . auth < nl > < nl > + import cats . MonadCombine < nl > import cats . data . { NonEmptyList , Xor } < nl > import cats . syntax . all . _ < nl > import im . actor . api . rpc . _ < nl > @ @ - 9 , 18 + 10 , 19 @ @ import org . apache . commons . validator . routines . EmailValidator < nl > private [ auth ] trait Helpers extends PublicKeyHelpers { < nl > < nl > private def matchesEmail ( s : String ) : NonEmptyList [ String ] Xor String = < nl > - if ( EmailValidator . getInstance ( ) . isValid ( s ) ) s . right else NonEmptyList ( " Should be valid email address " ) . left < nl > + if ( EmailValidator . getInstance ( ) . isValid ( s ) ) s . right else NonEmptyList . of ( " Should be valid email address " ) . left < nl > < nl > def validEmail ( email : String ) : NonEmptyList [ String ] Xor String = < nl > StringUtils . nonEmptyString ( email ) . flatMap ( e ⇒ matchesEmail ( e . toLowerCase ) ) < nl > < nl > - private implicit val listMonadCombine = new cats . MonadCombine [ List ] { < nl > + private implicit val listMonadCombine = new MonadCombine [ List ] { < nl > def pure [ A ] ( x : A ) : List [ A ] = List ( x ) < nl > - def combine [ A ] ( x : List [ A ] , y : List [ A ] ) : List [ A ] = x : : : y < nl > def flatMap [ A , B ] ( fa : List [ A ] ) ( f : ( A ) ⇒ List [ B ] ) : List [ B ] = fa flatMap f < nl > def empty [ A ] : List [ A ] = List . empty [ A ] < nl > + def combineK [ A ] ( x : List [ A ] , y : List [ A ] ) : List [ A ] = x : : : y < nl > + def tailRecM [ A , B ] ( a : A ) ( f : ( A ) ⇒ List [ Either [ A , B ] ] ) : List [ B ] = defaultTailRecM ( a ) ( f ) < nl > } < nl > < nl > def validationFailed ( errorName : String , errors : NonEmptyList [ String ] ) : RpcError = < nl > - RpcError ( 400 , errorName , errors . unwrap . mkString ( " , " ) , false , None ) < nl > + RpcError ( 400 , errorName , errors . toList . mkString ( " , " ) , false , None ) < nl > } < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala < nl > index 894d923 . . 6b5ae18 100644 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala < nl > @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . concurrent < nl > import akka . http . scaladsl . util . FastFuture < nl > import cats . data . Xor . _ < nl > import cats . data . { Xor , XorT } < nl > - import cats . std . { EitherInstances , FutureInstances } < nl > + import cats . instances . { EitherInstances , FutureInstances } < nl > import cats . syntax . all . _ < nl > < nl > import scala . concurrent . { ExecutionContext , Future } < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / util / misc / StringUtils . scala b / actor - server / actor - runtime / src / main / scala / im / actor / util / misc / StringUtils . scala < nl > index 47118e4 . . 728243a 100644 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / util / misc / StringUtils . scala < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / util / misc / StringUtils . scala < nl > @ @ - 28 , 12 + 28 , 12 @ @ object StringUtils { < nl > < nl > def nonEmptyString ( s : String ) : NonEmptyList [ String ] Xor String = { < nl > val trimmed = s . trim < nl > - if ( trimmed . isEmpty ) NonEmptyList ( " Should be nonempty " ) . left else trimmed . right < nl > + if ( trimmed . isEmpty ) NonEmptyList . of ( " Should be nonempty " ) . left else trimmed . right < nl > } < nl > < nl > def printableString ( s : String ) : NonEmptyList [ String ] Xor String = { < nl > val p = Pattern . compile ( " \ \ p { Print } + " , Pattern . UNICODE _ CHARACTER _ CLASS ) < nl > - if ( p . matcher ( s ) . matches ) s . right else NonEmptyList ( " Should contain printable characters only " ) . left < nl > + if ( p . matcher ( s ) . matches ) s . right else NonEmptyList . of ( " Should contain printable characters only " ) . left < nl > } < nl > < nl > def validName ( n : String ) : NonEmptyList [ String ] Xor String = < nl > diff - - git a / actor - server / docker . sh b / actor - server / docker . sh < nl > index 11c3eef . . eb11c2c 100755 < nl > - - - a / actor - server / docker . sh < nl > + + + b / actor - server / docker . sh < nl > @ @ - 1 , 3 + 1 , 3 @ @ < nl > # ! / bin / bash < nl > < nl > - sbt docker : stage & & docker build - - no - cache = true - f Dockerfile - t actor - server . < nl > + sbt docker : stage & & docker build - - no - cache = true - f Dockerfile - t actor / server . < nl > diff - - git a / actor - server / project / Build . scala b / actor - server / project / Build . scala < nl > index b3035ea . . 7d27bc1 100644 < nl > - - - a / actor - server / project / Build . scala < nl > + + + b / actor - server / project / Build . scala < nl > @ @ - 239 , 7 + 239 , 7 @ @ object Build extends sbt . Build with Versioning with Releasing with Packaging { < nl > libraryDependencies + + = Dependencies . session < nl > ) < nl > ) < nl > - . dependsOn ( actorPersist , actorCore , actorCodecs , actorCore , actorRpcApi ) < nl > + . dependsOn ( actorCodecs , actorCore , actorPersist , actorRpcApi ) < nl > < nl > lazy val actorSessionMessages = Project ( < nl > id = " actor - session - messages " , < nl > diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala < nl > index 446beaa . . 85761fd 100644 < nl > - - - a / actor - server / project / Dependencies . scala < nl > + + + b / actor - server / project / Dependencies . scala < nl > @ @ - 4 , 15 + 4 , 15 @ @ import sbt . _ < nl > < nl > object Dependencies { < nl > object V { < nl > - val actorCommons = " 0 . 0 . 19 " < nl > + val actorCommons = " 0 . 0 . 20 " < nl > val actorBotkit = " 1 . 0 . 109 " < nl > - val akka = " 2 . 4 . 7 " < nl > - val akkaHttpJson = " 1 . 5 . 0 " < nl > - val cats = " 0 . 3 . 0 " < nl > - val circe = " 0 . 2 . 1 " < nl > + val akka = " 2 . 4 . 10 " < nl > + val akkaHttpJson = " 1 . 10 . 0 " < nl > + val cats = " 0 . 7 . 2 " < nl > + val circe = " 0 . 5 . 1 " < nl > val kamon = " 0 . 5 . 2 " < nl > val slick = " 3 . 1 . 1 " < nl > - val slickPg = " 0 . 13 . 0 " < nl > + val slickPg = " 0 . 14 . 3 " < nl > val scalatest = " 2 . 2 . 4 " < nl > val shardakka = " 0 . 1 . 24 " < nl > val scalapbSer = " 0 . 1 . 14 " < nl > @ @ - 48 , 18 + 48 , 18 @ @ object Dependencies { < nl > < nl > val caffeine = " com . github . ben - manes . caffeine " % " caffeine " % " 2 . 2 . 7 " < nl > < nl > - val cats = " org . spire - math " % % " cats " % V . cats < nl > + val cats = " org . typelevel " % % " cats " % V . cats < nl > < nl > val circeCore = " io . circe " % % " circe - core " % V . circe < nl > val circeGeneric = " io . circe " % % " circe - generic " % V . circe < nl > - val circeParse = " io . circe " % % " circe - parse " % V . circe < nl > + val circeParse = " io . circe " % % " circe - parser " % V . circe < nl > < nl > val configs = " com . github . kxbmap " % % " configs " % " 0 . 3 . 0 " < nl > < nl > val dispatch = " net . databinder . dispatch " % % " dispatch - core " % " 0 . 11 . 3 " < nl > val javaCompat = " org . scala - lang . modules " % % " scala - java8 - compat " % " 0 . 7 . 0 " < nl > < nl > - val playJson = " com . typesafe . play " % % " play - json " % " 2 . 4 . 2 " < nl > + val playJson = " com . typesafe . play " % % " play - json " % " 2 . 5 . 6 " < nl > val upickle = " com . lihaoyi " % % " upickle " % " 0 . 3 . 6 " < nl > < nl > val postgresJdbc = " org . postgresql " % " postgresql " % " 9 . 4 . 1208 " exclude ( " org . slf4j " , " slf4j - simple " ) < nl > @ @ - 208 , 7 + 208 , 5 @ @ object Dependencies { < nl > < nl > val runtime = shared + + Seq ( akkaActor , actorConcurrent , akkaHttp , akkaSlf4j , akkaStream , akkaPersistenceJdbc , apacheCommonsCodec , caffeine , cats , jodaConvert , jodaTime , icu4j , libPhoneNumber , scalapbSer , akkaTestkit % " test " , scalatest % " test " ) < nl > < nl > - val voximplant = shared + + Seq ( akkaActor , dispatch , playJson ) < nl > - < nl > val tests = shared + + Seq ( akkaClusterSharding , amazonaws , jfairy , scalacheck , scalatest , slickTestkit , akkaTestkit , akkaMultiNodeTestkit ) < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala b / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > index 25b1496 . . 4f514b0 100644 < nl > - - - a / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > + + + b / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > @ @ - 55 , 8 + 55 , 13 @ @ private [ api ] trait MessageMapper { < nl > ByteString . copyFrom ( group . toByteArray ) < nl > } < nl > < nl > - private def applyPeer ( buf : ByteString ) : Peer = < nl > - Peer . parseFrom ( CodedInputStream . newInstance ( buf . asReadOnlyByteBuffer ( ) ) ) . right . get < nl > + private def applyPeer ( bytes : ByteString ) : Peer = { < nl > + if ( bytes . size ( ) > 0 ) { < nl > + Peer . parseFrom ( CodedInputStream . newInstance ( bytes . asReadOnlyByteBuffer ( ) ) ) . right . get < nl > + } else { < nl > + null < nl > + } < nl > + } < nl > < nl > private def unapplyPeer ( peer : Peer ) : ByteString = < nl > ByteString . copyFrom ( peer . toByteArray ) < nl > diff - - git a / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala b / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala < nl > index 780e6a7 . . 5ebe48c 100644 < nl > - - - a / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala < nl > + + + b / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala < nl > @ @ - 1 , 31 + 1 , 15 @ @ < nl > package im . actor . server . commons < nl > < nl > - import com . typesafe . config . { ConfigFactory , Config } < nl > + import com . typesafe . config . { Config , ConfigFactory } < nl > < nl > object ActorConfig { < nl > def load ( ) : Config = { < nl > ConfigFactory . parseString ( < nl > - s " " " < nl > + " " " < nl > | akka { < nl > | actor { < nl > | provider : " akka . cluster . ClusterActorRefProvider " < nl > | } < nl > - | < nl > - | remote { < nl > - | netty . tcp { < nl > - | hostname : " 127 . 0 . 0 . 1 " < nl > - | port : 2553 < nl > - | } < nl > - | } < nl > - | < nl > - | cluster { < nl > - | seed - nodes : [ " akka . tcp : / / actor - server @ 127 . 0 . 0 . 1 : 2553 " ] < nl > - | } < nl > - | < nl > - | persistence { < nl > - | journal . plugin : " jdbc - journal " < nl > - | snapshot - store . plugin : " jdbc - snapshot - store " < nl > - | } < nl > | } < nl > | < nl > | jdbc - connection { < nl > @ @ - 35 , 6 + 19 , 16 @ @ object ActorConfig { < nl > " " " . stripMargin < nl > ) < nl > . withFallback ( ConfigFactory . load ( ) ) < nl > + . withFallback ( ConfigFactory . parseString ( < nl > + " " " < nl > + | akka { < nl > + | persistence { < nl > + | journal . plugin : " jdbc - journal " < nl > + | snapshot - store . plugin : " jdbc - snapshot - store " < nl > + | } < nl > + | } < nl > + " " " . stripMargin < nl > + ) ) < nl > . resolve ( ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala < nl > index 900f96e . . 9807973 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala < nl > @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ < nl > sealed trait GroupDialogExtension extends Extension < nl > < nl > final class GroupDialogExtensionImpl ( system : ActorSystem ) extends GroupDialogExtension { < nl > + GroupDialog . register ( ) < nl > + < nl > lazy val region : GroupDialogRegion = GroupDialogRegion . start ( ) ( system ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala < nl > index 79bf6f5 . . d5d79d6 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala < nl > @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ < nl > sealed trait PrivateDialogExtension extends Extension < nl > < nl > final class PrivateDialogExtensionImpl ( system : ActorSystem ) extends PrivateDialogExtension { < nl > + PrivateDialog . register ( ) < nl > + < nl > lazy val region : PrivateDialogRegion = PrivateDialogRegion . start ( ) ( system ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala < nl > index 4b344bc . . 6dd3eb7 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala < nl > @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ < nl > sealed trait GroupExtension extends Extension < nl > < nl > final class GroupExtensionImpl ( system : ActorSystem ) extends GroupExtension { < nl > + GroupProcessor . register ( ) < nl > + < nl > lazy val processorRegion : GroupProcessorRegion = GroupProcessorRegion . start ( ) ( system ) < nl > lazy val viewRegion : GroupViewRegion = GroupViewRegion ( processorRegion . ref ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > index ce3eec3 . . 458a489 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > @ @ - 7 , 11 + 7 , 10 @ @ import akka . persistence . { RecoveryCompleted , RecoveryFailure } < nl > import akka . util . Timeout < nl > import im . actor . server . commons . serialization . ActorSerializer < nl > import im . actor . server . db . DbExtension < nl > + import im . actor . server . dialog . group . { GroupDialogExtension , GroupDialogRegion } < nl > import im . actor . server . event . TSEvent < nl > import im . actor . server . file . Avatar < nl > import im . actor . server . office . { PeerProcessor , ProcessorState , StopOffice } < nl > - import im . actor . server . dialog . group . GroupDialogExtension < nl > - import im . actor . server . dialog . group . GroupDialogRegion < nl > import im . actor . server . push . SeqUpdatesExtension < nl > import im . actor . server . user . { UserExtension , UserProcessorRegion , UserViewRegion } < nl > import im . actor . server . util . { FileStorageAdapter , S3StorageExtension } < nl > @ @ - 84 , 6 + 83 , 8 @ @ object GroupProcessor { < nl > ActorSerializer . register ( 21004 , classOf [ GroupQueries . CheckAccessHashResponse ] ) < nl > ActorSerializer . register ( 21005 , classOf [ GroupQueries . GetMembers ] ) < nl > ActorSerializer . register ( 21006 , classOf [ GroupQueries . GetMembersResponse ] ) < nl > + ActorSerializer . register ( 21007 , classOf [ GroupQueries . GetApiStruct ] ) < nl > + ActorSerializer . register ( 21008 , classOf [ GroupQueries . GetApiStructResponse ] ) < nl > < nl > ActorSerializer . register ( 22003 , classOf [ GroupEvents . UserInvited ] ) < nl > ActorSerializer . register ( 22004 , classOf [ GroupEvents . UserJoined ] ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala < nl > index f58914d . . 1fc3f06 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala < nl > @ @ - 43 , 6 + 43 , 8 @ @ final class SeqUpdatesExtensionImpl ( < nl > private implicit val system : ActorSystem = _ system < nl > private implicit lazy val db : Database = DbExtension ( system ) . db < nl > < nl > + SeqUpdatesManager . register ( ) < nl > + < nl > lazy val region : SeqUpdatesManagerRegion = SeqUpdatesManagerRegion . start ( ) ( system , gpm , apm ) < nl > < nl > def getFatData ( < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > index b8c35f6 . . 4c42aa0 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . push < nl > < nl > import java . nio . ByteBuffer < nl > < nl > - import im . actor . server . util . AnyRefLogSource < nl > + import im . actor . server . commons . serialization . ActorSerializer < nl > < nl > import scala . annotation . tailrec < nl > import scala . concurrent . _ < nl > @ @ - 18 , 7 + 18 , 7 @ @ import im . actor . api . rpc . peers . { PeerType , Peer } < nl > import im . actor . api . { rpc ⇒ api } < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . models . sequence < nl > - import im . actor . server . sequence . SeqState < nl > + import im . actor . server . sequence . { SeqStateDate , SeqState } < nl > import im . actor . server . user . { UserOffice , UserViewRegion } < nl > import im . actor . server . { models , persist ⇒ p } < nl > < nl > @ @ - 34 , 6 + 34 , 11 @ @ object SeqUpdatesManager { < nl > / / TODO : configurable < nl > private implicit val OperationTimeout = Timeout ( 30 . seconds ) < nl > < nl > + def register ( ) : Unit = { < nl > + ActorSerializer . register ( 60001 , classOf [ SeqState ] ) < nl > + ActorSerializer . register ( 60002 , classOf [ SeqStateDate ] ) < nl > + } < nl > + < nl > def getSeqState ( authId : Long ) ( implicit ext : SeqUpdatesExtension , ec : ExecutionContext ) : Future [ SeqState ] = < nl > ext . region . ref . ask ( Envelope ( authId , GetSequenceState ) ) ( OperationTimeout ) . mapTo [ SeqState ] < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > index 1f6e847 . . b3ed7b2 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ < nl > sealed trait UserExtension extends Extension < nl > < nl > final class UserExtensionImpl ( system : ActorSystem ) extends UserExtension { < nl > + UserProcessor . register ( ) < nl > + < nl > lazy val processorRegion : UserProcessorRegion = UserProcessorRegion . start ( ) ( system ) < nl > lazy val viewRegion : UserViewRegion = UserViewRegion ( processorRegion . ref ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > index d506745 . . ac89e49 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > @ @ - 102 , 6 + 102 , 8 @ @ object UserProcessor { < nl > ActorSerializer . register ( 11004 , classOf [ UserQueries . GetContactRecordsResponse ] ) < nl > ActorSerializer . register ( 11005 , classOf [ UserQueries . CheckAccessHash ] ) < nl > ActorSerializer . register ( 11006 , classOf [ UserQueries . CheckAccessHashResponse ] ) < nl > + ActorSerializer . register ( 11007 , classOf [ UserQueries . GetApiStruct ] ) < nl > + ActorSerializer . register ( 11008 , classOf [ UserQueries . GetApiStructResponse ] ) < nl > < nl > ActorSerializer . register ( 12001 , classOf [ UserEvents . AuthAdded ] ) < nl > ActorSerializer . register ( 12002 , classOf [ UserEvents . AuthRemoved ] ) < nl > diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > index ccdd66e . . 3ae4734 100644 < nl > - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > @ @ - 93 , 12 + 93 , 10 @ @ object Main extends App { < nl > case _ ⇒ throw new Exception ( " " " Invalid activation . default - service value provided : valid options : " internal " , actor - activation " " " ) < nl > } < nl > < nl > - Session . startRegion ( < nl > + implicit val sessionRegion = Session . startRegion ( < nl > Some ( Session . props ( mediator ) ) < nl > ) < nl > < nl > - implicit val sessionRegion = Session . startRegionProxy ( ) < nl > - < nl > RichMessageWorker . startWorker ( richMessageConfig , mediator ) < nl > < nl > implicit val oauth2Service = new GoogleProvider ( oauth2GoogleConfig ) < nl > diff - - git a / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala b / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala < nl > index 2e3a937 . . 2dd469e 100644 < nl > - - - a / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala < nl > + + + b / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala < nl > @ @ - 2 , 11 + 2 , 6 @ @ package im . actor . server . util < nl > < nl > import java . io . File < nl > < nl > - import scala . concurrent . duration . _ < nl > - import scala . concurrent . forkjoin . ThreadLocalRandom < nl > - import scala . concurrent . { ExecutionContext , Future } < nl > - import scala . util . Try < nl > - < nl > import akka . actor . _ < nl > import com . amazonaws . HttpMethod < nl > import com . amazonaws . auth . BasicAWSCredentials < nl > @ @ - 16 , 13 + 11 , 25 @ @ import com . amazonaws . services . s3 . transfer . model . UploadResult < nl > import com . github . dwhjames . awswrap . s3 . { AmazonS3ScalaClient , FutureTransfer } < nl > import com . github . kxbmap . configs . _ < nl > import com . typesafe . config . { Config , ConfigFactory } < nl > - import slick . driver . PostgresDriver . api . _ < nl > - < nl > - import im . actor . api . rpc . files . FileLocation < nl > + import im . actor . api . rpc . files . { FileLocation ⇒ ApiFileLocation } < nl > + import im . actor . server . commons . serialization . ActorSerializer < nl > import im . actor . server . db . DbExtension < nl > + import im . actor . server . file . { Avatar , AvatarImage , FileLocation } < nl > import im . actor . server . { models , persist } < nl > + import slick . driver . PostgresDriver . api . _ < nl > < nl > - class S3StorageExtensionImpl ( val s3StorageAdapter : S3StorageAdapter ) extends Extension < nl > + import scala . concurrent . duration . _ < nl > + import scala . concurrent . forkjoin . ThreadLocalRandom < nl > + import scala . concurrent . { ExecutionContext , Future } < nl > + import scala . util . Try < nl > + < nl > + class S3StorageExtensionImpl ( val s3StorageAdapter : S3StorageAdapter ) extends Extension { < nl > + / / TODO : move to a proper place < nl > + < nl > + ActorSerializer . register ( 80001 , classOf [ FileLocation ] ) < nl > + ActorSerializer . register ( 80002 , classOf [ AvatarImage ] ) < nl > + ActorSerializer . register ( 80003 , classOf [ Avatar ] ) < nl > + } < nl > < nl > object S3StorageExtension extends ExtensionId [ S3StorageExtensionImpl ] with ExtensionIdProvider { < nl > override def lookup = S3StorageExtension < nl > @ @ - 62 , 10 + 69 , 10 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext < nl > val s3Client = new AmazonS3ScalaClient ( awsCredentials ) < nl > val transferManager = new TransferManager ( awsCredentials ) < nl > < nl > - override def uploadFile ( name : String , file : File ) : DBIO [ FileLocation ] = < nl > + override def uploadFile ( name : String , file : File ) : DBIO [ ApiFileLocation ] = < nl > uploadFile ( bucketName , name , file ) < nl > < nl > - override def uploadFileF ( name : String , file : File ) : Future [ FileLocation ] = < nl > + override def uploadFileF ( name : String , file : File ) : Future [ ApiFileLocation ] = < nl > db . run ( uploadFile ( name , file ) ) < nl > < nl > override def downloadFile ( id : Long ) : DBIO [ Option [ File ] ] = { < nl > @ @ - 102 , 7 + 109 , 7 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext < nl > } yield file < nl > } < nl > < nl > - private def uploadFile ( bucketName : String , name : String , file : File ) : DBIO [ FileLocation ] = { < nl > + private def uploadFile ( bucketName : String , name : String , file : File ) : DBIO [ ApiFileLocation ] = { < nl > val rnd = ThreadLocalRandom . current ( ) < nl > val id = rnd . nextLong ( ) < nl > val accessSalt = ACLUtils . nextAccessSalt ( rnd ) < nl > @ @ - 112 , 7 + 119 , 7 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext < nl > _ ← persist . File . create ( id , accessSalt , FileUtils . s3Key ( id , name ) ) < nl > _ ← DBIO . from ( s3Upload ( bucketName , id , name , file ) ) < nl > _ ← DBIO . from ( sizeF ) flatMap ( s ⇒ persist . File . setUploaded ( id , s , name ) ) < nl > - } yield FileLocation ( id , ACLUtils . fileAccessHash ( id , accessSalt ) ) < nl > + } yield ApiFileLocation ( id , ACLUtils . fileAccessHash ( id , accessSalt ) ) < nl > } < nl > < nl > private def s3Upload ( bucketName : String , id : Long , name : String , file : File ) : Future [ UploadResult ] = {

TEST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / http / BotsHttpHandler . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / http / BotsHttpHandler . scala 
 index 8280d58 . . 28be1f9 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / http / BotsHttpHandler . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / http / BotsHttpHandler . scala 
 @ @ - 12 , 7 + 12 , 7 @ @ import akka . stream . { ActorMaterializer , Materializer } 
 import akka . stream . scaladsl . Flow 
 import akka . util . ByteString 
 import cats . data . OptionT 
 - import cats . std . future . _ 
 + import cats . instances . future . _ 
 import de . heikoseeberger . akkahttpplayjson . PlayJsonSupport 
 import im . actor . api . rpc . sequence . UpdateRawUpdate 
 import im . actor . server . api . http . HttpHandler 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / DBIOResultRpc . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / DBIOResultRpc . scala 
 index 27da70c . . bf45037 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / DBIOResultRpc . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / DBIOResultRpc . scala 
 @ @ - 17 , 6 + 17 , 7 @ @ object DBIOResultRpc { 
 def pure [ A ] ( a : A ) : DBIO [ A ] = DBIO . successful ( a ) 
 def flatMap [ A , B ] ( fa : DBIO [ A ] ) ( f : A ⇒ DBIO [ B ] ) : DBIO [ B ] = fa flatMap f 
 override def map [ A , B ] ( fa : DBIO [ A ] ) ( f : A ⇒ B ) : DBIO [ B ] = fa map f 
 + def tailRecM [ A , B ] ( a : A ) ( f : A ⇒ DBIO [ Either [ A , B ] ] ) : DBIO [ B ] = defaultTailRecM ( a ) ( f ) 
 } 
 
 def point [ A ] ( a : A ) : Result [ A ] = Result [ A ] ( DBIO . successful ( right ( a ) ) ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / MaybeAuthorized . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / MaybeAuthorized . scala 
 index 0262b81 . . 8da305b 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / MaybeAuthorized . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / MaybeAuthorized . scala 
 @ @ - 36 , 11 + 36 , 9 @ @ case object MaybeAuthorized extends MaybeAuthorizedInstances 
 
 trait MaybeAuthorizedInstances { 
 implicit val maybeAuthorizedInstance = new Functor [ MaybeAuthorized ] with Monad [ MaybeAuthorized ] { 
 - 
 override def map [ A , B ] ( fa : MaybeAuthorized [ A ] ) ( f : A ⇒ B ) : MaybeAuthorized [ B ] = fa . map ( f ) 
 - 
 def pure [ A ] ( a : A ) : MaybeAuthorized [ A ] = Authorized ( a ) 
 - 
 def flatMap [ A , B ] ( fa : MaybeAuthorized [ A ] ) ( f : A ⇒ MaybeAuthorized [ B ] ) : MaybeAuthorized [ B ] = fa . flatMap ( f ) 
 + def tailRecM [ A , B ] ( a : A ) ( f : A ⇒ MaybeAuthorized [ Either [ A , B ] ] ) : MaybeAuthorized [ B ] = defaultTailRecM ( a ) ( f ) 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionApiConverters . scala b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionApiConverters . scala 
 index 40ef212 . . 9bc89bd 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionApiConverters . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionApiConverters . scala 
 @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . encryption 
 
 import cats . Foldable 
 import cats . data . Xor , Xor . _ 
 - import cats . std . all . _ 
 + import cats . instances . all . _ 
 import cats . syntax . all . _ 
 import com . google . protobuf . ByteString 
 import im . actor . api . rpc . encryption . { ApiEncryptionKeySignature , ApiEncryptionKeyGroup , ApiEncryptionKey } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala 
 index 3a68237 . . 75b27dc 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala 
 @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . server . encryption 
 import akka . actor . _ 
 import akka . event . Logging 
 import akka . http . scaladsl . util . FastFuture 
 - import cats . std . all . _ 
 + import cats . instances . all . _ 
 import cats . syntax . all . _ 
 import cats . data . { Xor , XorT } 
 import im . actor . api . rpc . encryption . _ 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / actor / ActorPush . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / actor / ActorPush . scala 
 index b2608b9 . . feb1f59 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / push / actor / ActorPush . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / actor / ActorPush . scala 
 @ @ - 23 , 7 + 23 , 7 @ @ final case class ActorPushMessage ( data : JsonObject ) 
 
 object ActorPushMessage { 
 def apply ( fields : Map [ String , String ] ) : ActorPushMessage = 
 - ActorPushMessage ( JsonObject . fromMap ( fields mapValues Json . string ) ) 
 + ActorPushMessage ( JsonObject . fromMap ( fields mapValues Json . fromString ) ) 
 
 def apply ( fields : ( String , String ) * ) : ActorPushMessage = 
 ActorPushMessage ( Map ( fields : _ * ) ) 
 @ @ - 70 , 7 + 70 , 7 @ @ final class ActorPush ( system : ActorSystem ) extends Extension { 
 } 
 
 def deliver ( seq : Int , creds : ActorPushCredentials ) : Unit = 
 - deliver ( ActorPushMessage ( JsonObject . singleton ( " seq " , Json . int ( seq ) ) ) , creds ) 
 + deliver ( ActorPushMessage ( JsonObject . singleton ( " seq " , Json . fromInt ( seq ) ) ) , creds ) 
 
 def deliver ( message : ActorPushMessage , creds : ActorPushCredentials ) : Unit = { 
 val uri = Uri . parseAbsolute ( ParserInput ( creds . endpoint ) ) 
 @ @ - 92 , 4 + 92 , 4 @ @ object ActorPush extends ExtensionId [ ActorPush ] with ExtensionIdProvider { 
 override def createExtension ( system : ExtendedActorSystem ) : ActorPush = new ActorPush ( system ) 
 
 override def lookup ( ) : ExtensionId [ _ < : Extension ] = ActorPush 
 - } 
 \ No newline at end of file 
 + } 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonEncoders . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonEncoders . scala 
 index fbf9116 . . 10f1094 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonEncoders . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonEncoders . scala 
 @ @ - 4 , 5 + 4 , 5 @ @ import io . circe . _ 
 import io . circe . generic . semiauto . _ 
 
 trait JsonEncoders { 
 - implicit val serverInfoFormat = deriveFor [ ServerInfo ] . encoder 
 + implicit val serverInfoFormat = deriveEncoder [ ServerInfo ] 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / Helpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / Helpers . scala 
 index 94ccace . . 90a110d 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / Helpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / Helpers . scala 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package im . actor . server . api . rpc . service . auth 
 
 + import cats . MonadCombine 
 import cats . data . { NonEmptyList , Xor } 
 import cats . syntax . all . _ 
 import im . actor . api . rpc . _ 
 @ @ - 9 , 18 + 10 , 19 @ @ import org . apache . commons . validator . routines . EmailValidator 
 private [ auth ] trait Helpers extends PublicKeyHelpers { 
 
 private def matchesEmail ( s : String ) : NonEmptyList [ String ] Xor String = 
 - if ( EmailValidator . getInstance ( ) . isValid ( s ) ) s . right else NonEmptyList ( " Should be valid email address " ) . left 
 + if ( EmailValidator . getInstance ( ) . isValid ( s ) ) s . right else NonEmptyList . of ( " Should be valid email address " ) . left 
 
 def validEmail ( email : String ) : NonEmptyList [ String ] Xor String = 
 StringUtils . nonEmptyString ( email ) . flatMap ( e ⇒ matchesEmail ( e . toLowerCase ) ) 
 
 - private implicit val listMonadCombine = new cats . MonadCombine [ List ] { 
 + private implicit val listMonadCombine = new MonadCombine [ List ] { 
 def pure [ A ] ( x : A ) : List [ A ] = List ( x ) 
 - def combine [ A ] ( x : List [ A ] , y : List [ A ] ) : List [ A ] = x : : : y 
 def flatMap [ A , B ] ( fa : List [ A ] ) ( f : ( A ) ⇒ List [ B ] ) : List [ B ] = fa flatMap f 
 def empty [ A ] : List [ A ] = List . empty [ A ] 
 + def combineK [ A ] ( x : List [ A ] , y : List [ A ] ) : List [ A ] = x : : : y 
 + def tailRecM [ A , B ] ( a : A ) ( f : ( A ) ⇒ List [ Either [ A , B ] ] ) : List [ B ] = defaultTailRecM ( a ) ( f ) 
 } 
 
 def validationFailed ( errorName : String , errors : NonEmptyList [ String ] ) : RpcError = 
 - RpcError ( 400 , errorName , errors . unwrap . mkString ( " , " ) , false , None ) 
 + RpcError ( 400 , errorName , errors . toList . mkString ( " , " ) , false , None ) 
 } 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala 
 index 894d923 . . 6b5ae18 100644 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala 
 @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . concurrent 
 import akka . http . scaladsl . util . FastFuture 
 import cats . data . Xor . _ 
 import cats . data . { Xor , XorT } 
 - import cats . std . { EitherInstances , FutureInstances } 
 + import cats . instances . { EitherInstances , FutureInstances } 
 import cats . syntax . all . _ 
 
 import scala . concurrent . { ExecutionContext , Future } 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / util / misc / StringUtils . scala b / actor - server / actor - runtime / src / main / scala / im / actor / util / misc / StringUtils . scala 
 index 47118e4 . . 728243a 100644 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / util / misc / StringUtils . scala 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / util / misc / StringUtils . scala 
 @ @ - 28 , 12 + 28 , 12 @ @ object StringUtils { 
 
 def nonEmptyString ( s : String ) : NonEmptyList [ String ] Xor String = { 
 val trimmed = s . trim 
 - if ( trimmed . isEmpty ) NonEmptyList ( " Should be nonempty " ) . left else trimmed . right 
 + if ( trimmed . isEmpty ) NonEmptyList . of ( " Should be nonempty " ) . left else trimmed . right 
 } 
 
 def printableString ( s : String ) : NonEmptyList [ String ] Xor String = { 
 val p = Pattern . compile ( " \ \ p { Print } + " , Pattern . UNICODE _ CHARACTER _ CLASS ) 
 - if ( p . matcher ( s ) . matches ) s . right else NonEmptyList ( " Should contain printable characters only " ) . left 
 + if ( p . matcher ( s ) . matches ) s . right else NonEmptyList . of ( " Should contain printable characters only " ) . left 
 } 
 
 def validName ( n : String ) : NonEmptyList [ String ] Xor String = 
 diff - - git a / actor - server / docker . sh b / actor - server / docker . sh 
 index 11c3eef . . eb11c2c 100755 
 - - - a / actor - server / docker . sh 
 + + + b / actor - server / docker . sh 
 @ @ - 1 , 3 + 1 , 3 @ @ 
 # ! / bin / bash 
 
 - sbt docker : stage & & docker build - - no - cache = true - f Dockerfile - t actor - server . 
 + sbt docker : stage & & docker build - - no - cache = true - f Dockerfile - t actor / server . 
 diff - - git a / actor - server / project / Build . scala b / actor - server / project / Build . scala 
 index b3035ea . . 7d27bc1 100644 
 - - - a / actor - server / project / Build . scala 
 + + + b / actor - server / project / Build . scala 
 @ @ - 239 , 7 + 239 , 7 @ @ object Build extends sbt . Build with Versioning with Releasing with Packaging { 
 libraryDependencies + + = Dependencies . session 
 ) 
 ) 
 - . dependsOn ( actorPersist , actorCore , actorCodecs , actorCore , actorRpcApi ) 
 + . dependsOn ( actorCodecs , actorCore , actorPersist , actorRpcApi ) 
 
 lazy val actorSessionMessages = Project ( 
 id = " actor - session - messages " , 
 diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala 
 index 446beaa . . 85761fd 100644 
 - - - a / actor - server / project / Dependencies . scala 
 + + + b / actor - server / project / Dependencies . scala 
 @ @ - 4 , 15 + 4 , 15 @ @ import sbt . _ 
 
 object Dependencies { 
 object V { 
 - val actorCommons = " 0 . 0 . 19 " 
 + val actorCommons = " 0 . 0 . 20 " 
 val actorBotkit = " 1 . 0 . 109 " 
 - val akka = " 2 . 4 . 7 " 
 - val akkaHttpJson = " 1 . 5 . 0 " 
 - val cats = " 0 . 3 . 0 " 
 - val circe = " 0 . 2 . 1 " 
 + val akka = " 2 . 4 . 10 " 
 + val akkaHttpJson = " 1 . 10 . 0 " 
 + val cats = " 0 . 7 . 2 " 
 + val circe = " 0 . 5 . 1 " 
 val kamon = " 0 . 5 . 2 " 
 val slick = " 3 . 1 . 1 " 
 - val slickPg = " 0 . 13 . 0 " 
 + val slickPg = " 0 . 14 . 3 " 
 val scalatest = " 2 . 2 . 4 " 
 val shardakka = " 0 . 1 . 24 " 
 val scalapbSer = " 0 . 1 . 14 " 
 @ @ - 48 , 18 + 48 , 18 @ @ object Dependencies { 
 
 val caffeine = " com . github . ben - manes . caffeine " % " caffeine " % " 2 . 2 . 7 " 
 
 - val cats = " org . spire - math " % % " cats " % V . cats 
 + val cats = " org . typelevel " % % " cats " % V . cats 
 
 val circeCore = " io . circe " % % " circe - core " % V . circe 
 val circeGeneric = " io . circe " % % " circe - generic " % V . circe 
 - val circeParse = " io . circe " % % " circe - parse " % V . circe 
 + val circeParse = " io . circe " % % " circe - parser " % V . circe 
 
 val configs = " com . github . kxbmap " % % " configs " % " 0 . 3 . 0 " 
 
 val dispatch = " net . databinder . dispatch " % % " dispatch - core " % " 0 . 11 . 3 " 
 val javaCompat = " org . scala - lang . modules " % % " scala - java8 - compat " % " 0 . 7 . 0 " 
 
 - val playJson = " com . typesafe . play " % % " play - json " % " 2 . 4 . 2 " 
 + val playJson = " com . typesafe . play " % % " play - json " % " 2 . 5 . 6 " 
 val upickle = " com . lihaoyi " % % " upickle " % " 0 . 3 . 6 " 
 
 val postgresJdbc = " org . postgresql " % " postgresql " % " 9 . 4 . 1208 " exclude ( " org . slf4j " , " slf4j - simple " ) 
 @ @ - 208 , 7 + 208 , 5 @ @ object Dependencies { 
 
 val runtime = shared + + Seq ( akkaActor , actorConcurrent , akkaHttp , akkaSlf4j , akkaStream , akkaPersistenceJdbc , apacheCommonsCodec , caffeine , cats , jodaConvert , jodaTime , icu4j , libPhoneNumber , scalapbSer , akkaTestkit % " test " , scalatest % " test " ) 
 
 - val voximplant = shared + + Seq ( akkaActor , dispatch , playJson ) 
 - 
 val tests = shared + + Seq ( akkaClusterSharding , amazonaws , jfairy , scalacheck , scalatest , slickTestkit , akkaTestkit , akkaMultiNodeTestkit ) 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala b / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala 
 index 25b1496 . . 4f514b0 100644 
 - - - a / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala 
 + + + b / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala 
 @ @ - 55 , 8 + 55 , 13 @ @ private [ api ] trait MessageMapper { 
 ByteString . copyFrom ( group . toByteArray ) 
 } 
 
 - private def applyPeer ( buf : ByteString ) : Peer = 
 - Peer . parseFrom ( CodedInputStream . newInstance ( buf . asReadOnlyByteBuffer ( ) ) ) . right . get 
 + private def applyPeer ( bytes : ByteString ) : Peer = { 
 + if ( bytes . size ( ) > 0 ) { 
 + Peer . parseFrom ( CodedInputStream . newInstance ( bytes . asReadOnlyByteBuffer ( ) ) ) . right . get 
 + } else { 
 + null 
 + } 
 + } 
 
 private def unapplyPeer ( peer : Peer ) : ByteString = 
 ByteString . copyFrom ( peer . toByteArray ) 
 diff - - git a / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala b / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala 
 index 780e6a7 . . 5ebe48c 100644 
 - - - a / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala 
 + + + b / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala 
 @ @ - 1 , 31 + 1 , 15 @ @ 
 package im . actor . server . commons 
 
 - import com . typesafe . config . { ConfigFactory , Config } 
 + import com . typesafe . config . { Config , ConfigFactory } 
 
 object ActorConfig { 
 def load ( ) : Config = { 
 ConfigFactory . parseString ( 
 - s " " " 
 + " " " 
 | akka { 
 | actor { 
 | provider : " akka . cluster . ClusterActorRefProvider " 
 | } 
 - | 
 - | remote { 
 - | netty . tcp { 
 - | hostname : " 127 . 0 . 0 . 1 " 
 - | port : 2553 
 - | } 
 - | } 
 - | 
 - | cluster { 
 - | seed - nodes : [ " akka . tcp : / / actor - server @ 127 . 0 . 0 . 1 : 2553 " ] 
 - | } 
 - | 
 - | persistence { 
 - | journal . plugin : " jdbc - journal " 
 - | snapshot - store . plugin : " jdbc - snapshot - store " 
 - | } 
 | } 
 | 
 | jdbc - connection { 
 @ @ - 35 , 6 + 19 , 16 @ @ object ActorConfig { 
 " " " . stripMargin 
 ) 
 . withFallback ( ConfigFactory . load ( ) ) 
 + . withFallback ( ConfigFactory . parseString ( 
 + " " " 
 + | akka { 
 + | persistence { 
 + | journal . plugin : " jdbc - journal " 
 + | snapshot - store . plugin : " jdbc - snapshot - store " 
 + | } 
 + | } 
 + " " " . stripMargin 
 + ) ) 
 . resolve ( ) 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala 
 index 900f96e . . 9807973 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala 
 @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ 
 sealed trait GroupDialogExtension extends Extension 
 
 final class GroupDialogExtensionImpl ( system : ActorSystem ) extends GroupDialogExtension { 
 + GroupDialog . register ( ) 
 + 
 lazy val region : GroupDialogRegion = GroupDialogRegion . start ( ) ( system ) 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala 
 index 79bf6f5 . . d5d79d6 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala 
 @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ 
 sealed trait PrivateDialogExtension extends Extension 
 
 final class PrivateDialogExtensionImpl ( system : ActorSystem ) extends PrivateDialogExtension { 
 + PrivateDialog . register ( ) 
 + 
 lazy val region : PrivateDialogRegion = PrivateDialogRegion . start ( ) ( system ) 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala 
 index 4b344bc . . 6dd3eb7 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala 
 @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ 
 sealed trait GroupExtension extends Extension 
 
 final class GroupExtensionImpl ( system : ActorSystem ) extends GroupExtension { 
 + GroupProcessor . register ( ) 
 + 
 lazy val processorRegion : GroupProcessorRegion = GroupProcessorRegion . start ( ) ( system ) 
 lazy val viewRegion : GroupViewRegion = GroupViewRegion ( processorRegion . ref ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 index ce3eec3 . . 458a489 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 @ @ - 7 , 11 + 7 , 10 @ @ import akka . persistence . { RecoveryCompleted , RecoveryFailure } 
 import akka . util . Timeout 
 import im . actor . server . commons . serialization . ActorSerializer 
 import im . actor . server . db . DbExtension 
 + import im . actor . server . dialog . group . { GroupDialogExtension , GroupDialogRegion } 
 import im . actor . server . event . TSEvent 
 import im . actor . server . file . Avatar 
 import im . actor . server . office . { PeerProcessor , ProcessorState , StopOffice } 
 - import im . actor . server . dialog . group . GroupDialogExtension 
 - import im . actor . server . dialog . group . GroupDialogRegion 
 import im . actor . server . push . SeqUpdatesExtension 
 import im . actor . server . user . { UserExtension , UserProcessorRegion , UserViewRegion } 
 import im . actor . server . util . { FileStorageAdapter , S3StorageExtension } 
 @ @ - 84 , 6 + 83 , 8 @ @ object GroupProcessor { 
 ActorSerializer . register ( 21004 , classOf [ GroupQueries . CheckAccessHashResponse ] ) 
 ActorSerializer . register ( 21005 , classOf [ GroupQueries . GetMembers ] ) 
 ActorSerializer . register ( 21006 , classOf [ GroupQueries . GetMembersResponse ] ) 
 + ActorSerializer . register ( 21007 , classOf [ GroupQueries . GetApiStruct ] ) 
 + ActorSerializer . register ( 21008 , classOf [ GroupQueries . GetApiStructResponse ] ) 
 
 ActorSerializer . register ( 22003 , classOf [ GroupEvents . UserInvited ] ) 
 ActorSerializer . register ( 22004 , classOf [ GroupEvents . UserJoined ] ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala 
 index f58914d . . 1fc3f06 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala 
 @ @ - 43 , 6 + 43 , 8 @ @ final class SeqUpdatesExtensionImpl ( 
 private implicit val system : ActorSystem = _ system 
 private implicit lazy val db : Database = DbExtension ( system ) . db 
 
 + SeqUpdatesManager . register ( ) 
 + 
 lazy val region : SeqUpdatesManagerRegion = SeqUpdatesManagerRegion . start ( ) ( system , gpm , apm ) 
 
 def getFatData ( 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 index b8c35f6 . . 4c42aa0 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . push 
 
 import java . nio . ByteBuffer 
 
 - import im . actor . server . util . AnyRefLogSource 
 + import im . actor . server . commons . serialization . ActorSerializer 
 
 import scala . annotation . tailrec 
 import scala . concurrent . _ 
 @ @ - 18 , 7 + 18 , 7 @ @ import im . actor . api . rpc . peers . { PeerType , Peer } 
 import im . actor . api . { rpc ⇒ api } 
 import im . actor . server . db . DbExtension 
 import im . actor . server . models . sequence 
 - import im . actor . server . sequence . SeqState 
 + import im . actor . server . sequence . { SeqStateDate , SeqState } 
 import im . actor . server . user . { UserOffice , UserViewRegion } 
 import im . actor . server . { models , persist ⇒ p } 
 
 @ @ - 34 , 6 + 34 , 11 @ @ object SeqUpdatesManager { 
 / / TODO : configurable 
 private implicit val OperationTimeout = Timeout ( 30 . seconds ) 
 
 + def register ( ) : Unit = { 
 + ActorSerializer . register ( 60001 , classOf [ SeqState ] ) 
 + ActorSerializer . register ( 60002 , classOf [ SeqStateDate ] ) 
 + } 
 + 
 def getSeqState ( authId : Long ) ( implicit ext : SeqUpdatesExtension , ec : ExecutionContext ) : Future [ SeqState ] = 
 ext . region . ref . ask ( Envelope ( authId , GetSequenceState ) ) ( OperationTimeout ) . mapTo [ SeqState ] 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 index 1f6e847 . . b3ed7b2 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ 
 sealed trait UserExtension extends Extension 
 
 final class UserExtensionImpl ( system : ActorSystem ) extends UserExtension { 
 + UserProcessor . register ( ) 
 + 
 lazy val processorRegion : UserProcessorRegion = UserProcessorRegion . start ( ) ( system ) 
 lazy val viewRegion : UserViewRegion = UserViewRegion ( processorRegion . ref ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 index d506745 . . ac89e49 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 @ @ - 102 , 6 + 102 , 8 @ @ object UserProcessor { 
 ActorSerializer . register ( 11004 , classOf [ UserQueries . GetContactRecordsResponse ] ) 
 ActorSerializer . register ( 11005 , classOf [ UserQueries . CheckAccessHash ] ) 
 ActorSerializer . register ( 11006 , classOf [ UserQueries . CheckAccessHashResponse ] ) 
 + ActorSerializer . register ( 11007 , classOf [ UserQueries . GetApiStruct ] ) 
 + ActorSerializer . register ( 11008 , classOf [ UserQueries . GetApiStructResponse ] ) 
 
 ActorSerializer . register ( 12001 , classOf [ UserEvents . AuthAdded ] ) 
 ActorSerializer . register ( 12002 , classOf [ UserEvents . AuthRemoved ] ) 
 diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 index ccdd66e . . 3ae4734 100644 
 - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 @ @ - 93 , 12 + 93 , 10 @ @ object Main extends App { 
 case _ ⇒ throw new Exception ( " " " Invalid activation . default - service value provided : valid options : " internal " , actor - activation " " " ) 
 } 
 
 - Session . startRegion ( 
 + implicit val sessionRegion = Session . startRegion ( 
 Some ( Session . props ( mediator ) ) 
 ) 
 
 - implicit val sessionRegion = Session . startRegionProxy ( ) 
 - 
 RichMessageWorker . startWorker ( richMessageConfig , mediator ) 
 
 implicit val oauth2Service = new GoogleProvider ( oauth2GoogleConfig ) 
 diff - - git a / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala b / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala 
 index 2e3a937 . . 2dd469e 100644 
 - - - a / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala 
 + + + b / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala 
 @ @ - 2 , 11 + 2 , 6 @ @ package im . actor . server . util 
 
 import java . io . File 
 
 - import scala . concurrent . duration . _ 
 - import scala . concurrent . forkjoin . ThreadLocalRandom 
 - import scala . concurrent . { ExecutionContext , Future } 
 - import scala . util . Try 
 - 
 import akka . actor . _ 
 import com . amazonaws . HttpMethod 
 import com . amazonaws . auth . BasicAWSCredentials 
 @ @ - 16 , 13 + 11 , 25 @ @ import com . amazonaws . services . s3 . transfer . model . UploadResult 
 import com . github . dwhjames . awswrap . s3 . { AmazonS3ScalaClient , FutureTransfer } 
 import com . github . kxbmap . configs . _ 
 import com . typesafe . config . { Config , ConfigFactory } 
 - import slick . driver . PostgresDriver . api . _ 
 - 
 - import im . actor . api . rpc . files . FileLocation 
 + import im . actor . api . rpc . files . { FileLocation ⇒ ApiFileLocation } 
 + import im . actor . server . commons . serialization . ActorSerializer 
 import im . actor . server . db . DbExtension 
 + import im . actor . server . file . { Avatar , AvatarImage , FileLocation } 
 import im . actor . server . { models , persist } 
 + import slick . driver . PostgresDriver . api . _ 
 
 - class S3StorageExtensionImpl ( val s3StorageAdapter : S3StorageAdapter ) extends Extension 
 + import scala . concurrent . duration . _ 
 + import scala . concurrent . forkjoin . ThreadLocalRandom 
 + import scala . concurrent . { ExecutionContext , Future } 
 + import scala . util . Try 
 + 
 + class S3StorageExtensionImpl ( val s3StorageAdapter : S3StorageAdapter ) extends Extension { 
 + / / TODO : move to a proper place 
 + 
 + ActorSerializer . register ( 80001 , classOf [ FileLocation ] ) 
 + ActorSerializer . register ( 80002 , classOf [ AvatarImage ] ) 
 + ActorSerializer . register ( 80003 , classOf [ Avatar ] ) 
 + } 
 
 object S3StorageExtension extends ExtensionId [ S3StorageExtensionImpl ] with ExtensionIdProvider { 
 override def lookup = S3StorageExtension 
 @ @ - 62 , 10 + 69 , 10 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext 
 val s3Client = new AmazonS3ScalaClient ( awsCredentials ) 
 val transferManager = new TransferManager ( awsCredentials ) 
 
 - override def uploadFile ( name : String , file : File ) : DBIO [ FileLocation ] = 
 + override def uploadFile ( name : String , file : File ) : DBIO [ ApiFileLocation ] = 
 uploadFile ( bucketName , name , file ) 
 
 - override def uploadFileF ( name : String , file : File ) : Future [ FileLocation ] = 
 + override def uploadFileF ( name : String , file : File ) : Future [ ApiFileLocation ] = 
 db . run ( uploadFile ( name , file ) ) 
 
 override def downloadFile ( id : Long ) : DBIO [ Option [ File ] ] = { 
 @ @ - 102 , 7 + 109 , 7 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext 
 } yield file 
 } 
 
 - private def uploadFile ( bucketName : String , name : String , file : File ) : DBIO [ FileLocation ] = { 
 + private def uploadFile ( bucketName : String , name : String , file : File ) : DBIO [ ApiFileLocation ] = { 
 val rnd = ThreadLocalRandom . current ( ) 
 val id = rnd . nextLong ( ) 
 val accessSalt = ACLUtils . nextAccessSalt ( rnd ) 
 @ @ - 112 , 7 + 119 , 7 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext 
 _ ← persist . File . create ( id , accessSalt , FileUtils . s3Key ( id , name ) ) 
 _ ← DBIO . from ( s3Upload ( bucketName , id , name , file ) ) 
 _ ← DBIO . from ( sizeF ) flatMap ( s ⇒ persist . File . setUploaded ( id , s , name ) ) 
 - } yield FileLocation ( id , ACLUtils . fileAccessHash ( id , accessSalt ) ) 
 + } yield ApiFileLocation ( id , ACLUtils . fileAccessHash ( id , accessSalt ) ) 
 } 
 
 private def s3Upload ( bucketName : String , id : Long , name : String , file : File ) : Future [ UploadResult ] = {
