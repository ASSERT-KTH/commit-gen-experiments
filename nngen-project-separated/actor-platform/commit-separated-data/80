BLEU SCORE: 0.16943571815930883

TEST MSG: fix ( iOS ) : Fixing speakers on video calls , remove video enable / disable
GENERATED MSG: feat ( core + iOS ) : Fixing call state machine , better Call VM states

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift < nl > index faa8cc7 . . e3334dc 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift < nl > @ @ - 28 , 7 + 28 , 7 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { < nl > public let declineCallButtonText = UILabel ( ) < nl > < nl > public let muteButton = AACircleButton ( size : 72 ) < nl > - public let videoButton = AACircleButton ( size : 72 ) < nl > + / / public let videoButton = AACircleButton ( size : 72 ) < nl > < nl > var isScheduledDispose = false < nl > var timer : NSTimer ? < nl > @ @ - 89 , 13 + 89 , 13 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { < nl > Actor . toggleCallMuteWithCallId ( self . callId ) < nl > } < nl > < nl > - videoButton . image = UIImage . bundled ( " ic _ video _ 44 " ) < nl > - videoButton . title = AALocalized ( " CallsVideo " ) < nl > - videoButton . alpha = 0 < nl > + / / videoButton . image = UIImage . bundled ( " ic _ video _ 44 " ) < nl > + / / videoButton . title = AALocalized ( " CallsVideo " ) < nl > + / / videoButton . alpha = 0 < nl > < nl > - videoButton . button . viewDidTap = { < nl > - Actor . toggleVideoEnabledWithCallId ( self . callId ) < nl > - } < nl > + / / videoButton . button . viewDidTap = { < nl > + / / Actor . toggleVideoEnabledWithCallId ( self . callId ) < nl > + / / } < nl > < nl > < nl > / / < nl > @ @ - 140 , 7 + 140 , 7 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { < nl > self . view . addSubview ( declineCallButton ) < nl > self . view . addSubview ( declineCallButtonText ) < nl > self . view . addSubview ( muteButton ) < nl > - self . view . addSubview ( videoButton ) < nl > + / / self . view . addSubview ( videoButton ) < nl > self . view . addSubview ( localView ) < nl > } < nl > < nl > @ @ - 168 , 7 + 168 , 12 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { < nl > private func layoutButtons ( ) { < nl > < nl > muteButton . frame = CGRectMake ( ( self . view . width / 3 - 84 ) / 2 , self . view . height - 72 - 49 , 84 , 72 + 5 + 44 ) < nl > - videoButton . frame = CGRectMake ( 2 * self . view . width / 3 + ( self . view . width / 3 - 84 ) / 2 , self . view . height - 72 - 49 , 84 , 72 + 5 + 44 ) < nl > + / / videoButton . frame = CGRectMake ( 2 * self . view . width / 3 + ( self . view . width / 3 - 84 ) / 2 , self . view . height - 72 - 49 , 84 , 72 + 5 + 44 ) < nl > + / / if call . isVideoPreferred . boolValue { < nl > + / / videoButton . hidden = true < nl > + / / } else { < nl > + / / videoButton . hidden = false < nl > + / / } < nl > < nl > if ! declineCallButton . hidden | | ! answerCallButton . hidden { < nl > if ! declineCallButton . hidden & & ! answerCallButton . hidden { < nl > @ @ - 256 , 7 + 261 , 7 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { < nl > if ( self . call . isOutgoing ) { < nl > < nl > self . muteButton . showViewAnimated ( ) < nl > - self . videoButton . showViewAnimated ( ) < nl > + / / self . videoButton . showViewAnimated ( ) < nl > < nl > self . answerCallButton . hidden = true < nl > self . answerCallButtonText . hidden = true < nl > @ @ - 277 , 7 + 282 , 7 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { < nl > } else if ( ACCallState _ Enum . CONNECTING = = value . toNSEnum ( ) ) { < nl > < nl > self . muteButton . showViewAnimated ( ) < nl > - self . videoButton . showViewAnimated ( ) < nl > + / / self . videoButton . showViewAnimated ( ) < nl > < nl > self . answerCallButton . hidden = true < nl > self . answerCallButtonText . hidden = true < nl > @ @ - 291 , 7 + 296 , 7 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { < nl > } else if ( ACCallState _ Enum . IN _ PROGRESS = = value . toNSEnum ( ) ) { < nl > < nl > self . muteButton . showViewAnimated ( ) < nl > - self . videoButton . showViewAnimated ( ) < nl > + / / self . videoButton . showViewAnimated ( ) < nl > < nl > self . answerCallButton . hidden = true < nl > self . answerCallButtonText . hidden = true < nl > @ @ - 305 , 7 + 310 , 7 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { < nl > } else if ( ACCallState _ Enum . ENDED = = value . toNSEnum ( ) ) { < nl > < nl > self . muteButton . hideViewAnimated ( ) < nl > - self . videoButton . hideViewAnimated ( ) < nl > + / / self . videoButton . hideViewAnimated ( ) < nl > < nl > self . answerCallButton . hidden = true < nl > self . answerCallButtonText . hidden = true < nl > @ @ - 359 , 9 + 364 , 9 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { < nl > if call . peer . isPrivate { < nl > < nl > / / Bind Video Button < nl > - binder . bind ( call . isVideoEnabled ) { ( value : JavaLangBoolean ! ) - > ( ) in < nl > - self . videoButton . filled = value . booleanValue ( ) < nl > - } < nl > + / / binder . bind ( call . isVideoEnabled ) { ( value : JavaLangBoolean ! ) - > ( ) in < nl > + / / self . videoButton . filled = value . booleanValue ( ) < nl > + / / } < nl > < nl > / / Local Video can be only one , so we can just keep active track reference and handle changes < nl > binder . bind ( call . ownVideoTracks , closure : { ( videoTracks : ACArrayListMediaTrack ! ) in < nl > @ @ - 419 , 8 + 424 , 8 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { < nl > } ) < nl > < nl > } else { < nl > - self . videoButton . filled = false < nl > - self . videoButton . enabled = false < nl > + / / self . videoButton . filled = false < nl > + / / self . videoButton . enabled = false < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioManager . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioManager . swift < nl > index d8fdcdc . . 5af6d65 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioManager . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioManager . swift < nl > @ @ - 22 , 11 + 22 , 11 @ @ public class AAAudioManager : NSObject , AVAudioPlayerDelegate { < nl > private var isVisible = false < nl > < nl > private var isEnabled : Bool = false < nl > + private var isVideoPreferred = false < nl > private var openedConnections : Int = 0 < nl > < nl > public override init ( ) { < nl > - super . init ( ) < nl > - < nl > + super . init ( ) < nl > } < nl > < nl > public func appVisible ( ) { < nl > @ @ - 38 , 6 + 38 , 8 @ @ public class AAAudioManager : NSObject , AVAudioPlayerDelegate { < nl > } < nl > < nl > public func callStart ( call : ACCallVM ) { < nl > + isVideoPreferred = call . isVideoPreferred < nl > + < nl > if ! call . isOutgoing { < nl > isRinging = true < nl > if isVisible { < nl > @ @ - 46 , 7 + 48 , 7 @ @ public class AAAudioManager : NSObject , AVAudioPlayerDelegate { < nl > audioRouter . category = AVAudioSessionCategoryPlayAndRecord < nl > audioRouter . mode = AVAudioSessionModeDefault < nl > audioRouter . currentRoute = . Speaker < nl > - audioRouter . isEnabled = isEnabled < nl > + audioRouter . isEnabled = true < nl > } < nl > ringtoneStart ( ) < nl > } else { < nl > @ @ - 55 , 28 + 57 , 42 @ @ public class AAAudioManager : NSObject , AVAudioPlayerDelegate { < nl > vibrate ( ) < nl > } else { < nl > isEnabled = true < nl > - audioRouter . category = AVAudioSessionCategoryPlayAndRecord < nl > - audioRouter . mode = AVAudioSessionModeVoiceChat < nl > - audioRouter . currentRoute = . Receiver < nl > - audioRouter . isEnabled = isEnabled < nl > + audioRouter . batchedUpdate { < nl > + audioRouter . category = AVAudioSessionCategoryPlayAndRecord < nl > + audioRouter . mode = AVAudioSessionModeVoiceChat < nl > + if isVideoPreferred { < nl > + audioRouter . currentRoute = . Speaker < nl > + } else { < nl > + audioRouter . currentRoute = . Receiver < nl > + } < nl > + audioRouter . isEnabled = true < nl > + } < nl > } < nl > } < nl > < nl > public func callAnswered ( call : ACCallVM ) { < nl > ringtoneEnd ( ) < nl > isRinging = false < nl > - audioRouter . mode = AVAudioSessionModeVoiceChat < nl > - audioRouter . currentRoute = . Receiver < nl > + audioRouter . batchedUpdate { < nl > + audioRouter . mode = AVAudioSessionModeVoiceChat < nl > + if isVideoPreferred { < nl > + audioRouter . currentRoute = . Speaker < nl > + } else { < nl > + audioRouter . currentRoute = . Receiver < nl > + } < nl > + } < nl > } < nl > < nl > public func callEnd ( call : ACCallVM ) { < nl > ringtoneEnd ( ) < nl > isRinging = false < nl > isEnabled = false < nl > - audioRouter . category = AVAudioSessionCategorySoloAmbient < nl > - audioRouter . mode = AVAudioSessionModeDefault < nl > - audioRouter . currentRoute = . Receiver < nl > - audioRouter . isEnabled = isEnabled < nl > + audioRouter . batchedUpdate { < nl > + audioRouter . category = AVAudioSessionCategorySoloAmbient < nl > + audioRouter . mode = AVAudioSessionModeDefault < nl > + audioRouter . currentRoute = . Receiver < nl > + audioRouter . isEnabled = false < nl > + } < nl > } < nl > < nl > public func peerConnectionStarted ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > index cd4a9bb . . 329b300 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > @ @ - 66 , 7 + 66 , 8 @ @ public class CallActor extends AbsCallActor { < nl > callBus . joinMasterBus ( responseDoCall . getEventBusId ( ) , responseDoCall . getDeviceId ( ) ) ; < nl > callBus . changeVideoEnabled ( isVideoInitiallyEnabled ) ; < nl > callBus . startOwn ( ) ; < nl > - callVM = callViewModels . spawnNewOutgoingVM ( responseDoCall . getCallId ( ) , peer , isVideoInitiallyEnabled ) ; < nl > + callVM = callViewModels . spawnNewOutgoingVM ( responseDoCall . getCallId ( ) , peer , isVideoInitiallyEnabled , < nl > + isVideoInitiallyEnabled ) ; < nl > } ) . failure ( e - > self ( ) . send ( PoisonPill . INSTANCE ) ) ; < nl > } else { < nl > api ( new RequestGetCallInfo ( callId ) ) . then ( responseGetCallInfo - > { < nl > @ @ - 76 , 7 + 77 , 8 @ @ public class CallActor extends AbsCallActor { < nl > isVideoInitiallyEnabled = responseGetCallInfo . isVideoPreferred ( ) ; < nl > callBus . changeVideoEnabled ( isVideoInitiallyEnabled ) ; < nl > } < nl > - callVM = callViewModels . spawnNewIncomingVM ( callId , peer , isVideoInitiallyEnabled , CallState . RINGING ) ; < nl > + callVM = callViewModels . spawnNewIncomingVM ( callId , peer , isVideoInitiallyEnabled , < nl > + isVideoInitiallyEnabled , CallState . RINGING ) ; < nl > } ) . failure ( e - > self ( ) . send ( PoisonPill . INSTANCE ) ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallViewModels . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallViewModels . java < nl > index 0942762 . . a42a3eb 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallViewModels . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallViewModels . java < nl > @ @ - 27 , 23 + 27 , 29 @ @ public class CallViewModels { < nl > return callModels . get ( id ) ; < nl > } < nl > < nl > - public synchronized CallVM spawnNewVM ( long callId , Peer peer , boolean isOutgoing , boolean isVideoEnabled , ArrayList < CallMember > members , CallState callState ) { < nl > - CallVM callVM = new CallVM ( callId , peer , isOutgoing , isVideoEnabled , members , callState ) ; < nl > + public synchronized CallVM spawnNewVM ( long callId , Peer peer , boolean isOutgoing , < nl > + boolean isVideoEnabled , boolean isVideoPreffered , < nl > + ArrayList < CallMember > members , CallState callState ) { < nl > + CallVM callVM = new CallVM ( callId , peer , isOutgoing , isVideoEnabled , isVideoPreffered , < nl > + members , callState ) ; < nl > synchronized ( callModels ) { < nl > callModels . put ( callId , callVM ) ; < nl > } < nl > return callVM ; < nl > } < nl > < nl > - public synchronized CallVM spawnNewIncomingVM ( long callId , Peer peer , boolean isVideoEnabled , CallState callState ) { < nl > - CallVM callVM = new CallVM ( callId , peer , false , isVideoEnabled , new ArrayList < > ( ) , callState ) ; < nl > + public synchronized CallVM spawnNewIncomingVM ( long callId , Peer peer , boolean isVideoEnabled , < nl > + boolean isVideoPreffered , CallState callState ) { < nl > + CallVM callVM = new CallVM ( callId , peer , false , isVideoEnabled , isVideoPreffered , < nl > + new ArrayList < > ( ) , callState ) ; < nl > synchronized ( callModels ) { < nl > callModels . put ( callId , callVM ) ; < nl > } < nl > return callVM ; < nl > } < nl > < nl > - public synchronized CallVM spawnNewOutgoingVM ( long callId , Peer peer , boolean isVideoEnabled ) { < nl > + public synchronized CallVM spawnNewOutgoingVM ( long callId , Peer peer , boolean isVideoEnabled , < nl > + boolean isVideoPreferred ) { < nl > ArrayList < CallMember > members = new ArrayList < > ( ) ; < nl > if ( peer . getPeerType ( ) = = PeerType . PRIVATE | | < nl > peer . getPeerType ( ) = = PeerType . PRIVATE _ ENCRYPTED ) { < nl > @ @ - 56 , 6 + 62 , 7 @ @ public class CallViewModels { < nl > } < nl > } < nl > } < nl > - return spawnNewVM ( callId , peer , true , isVideoEnabled , members , CallState . RINGING ) ; < nl > + return spawnNewVM ( callId , peer , true , isVideoEnabled , isVideoPreferred , members , < nl > + CallState . RINGING ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java < nl > index be0a615 . . 3e5a552 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java < nl > @ @ - 35 , 6 + 35 , 8 @ @ public class CallVM { < nl > private final BooleanValueModel isAudioEnabled ; < nl > @ Property ( " nonatomic , readonly " ) < nl > private final BooleanValueModel isVideoEnabled ; < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private final boolean isVideoPreferred ; < nl > < nl > @ Property ( " nonatomic , readonly " ) < nl > private final ValueModel < ArrayList < CallMember > > members ; < nl > @ @ - 45 , 7 + 47 , 7 @ @ public class CallVM { < nl > @ Property ( " nonatomic , readonly " ) < nl > private final boolean isOutgoing ; < nl > < nl > - public CallVM ( long callId , Peer peer , boolean isOutgoing , boolean isVideoEnabled , ArrayList < CallMember > initialMembers , CallState state ) { < nl > + public CallVM ( long callId , Peer peer , boolean isOutgoing , boolean isVideoEnabled , boolean isVideoPreferred , ArrayList < CallMember > initialMembers , CallState state ) { < nl > this . callId = callId ; < nl > this . peer = peer ; < nl > this . isOutgoing = isOutgoing ; < nl > @ @ - 57 , 6 + 59 , 7 @ @ public class CallVM { < nl > this . members = new ValueModel < > ( " calls . " + callId + " . members " , new ArrayList < > ( initialMembers ) ) ; < nl > this . isAudioEnabled = new BooleanValueModel ( " calls . " + callId + " . audio _ enabled " , true ) ; < nl > this . isVideoEnabled = new BooleanValueModel ( " calls . " + callId + " . video _ enabled " , isVideoEnabled ) ; < nl > + this . isVideoPreferred = isVideoPreferred ; < nl > this . callStart = 0 ; < nl > } < nl > < nl > @ @ - 88 , 6 + 91 , 10 @ @ public class CallVM { < nl > return members ; < nl > } < nl > < nl > + public boolean isVideoPreferred ( ) { < nl > + return isVideoPreferred ; < nl > + } < nl > + < nl > public void setCallStart ( long callStart ) { < nl > this . callStart = callStart ; < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift < nl > index 3bc6444 . . d6c14d7 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift < nl > @ @ - 24 , 6 + 24 , 7 @ @ public class AACallViewController : AAViewController { < nl > public let videoButton = AACircleButton ( size : 72 ) < nl > < nl > var isScheduledDispose = false < nl > + var timer : NSTimer ? < nl > < nl > public init ( callId : jlong ) { < nl > self . callId = callId < nl > @ @ - 172 , 10 + 173 , 10 @ @ public class AACallViewController : AAViewController { < nl > self . answerCallButtonText . hidden = true < nl > self . declineCallButton . hidden = false < nl > self . declineCallButtonText . hidden = true < nl > - self . callState . text = " 0 : 00 " < nl > + self . startTimer ( ) < nl > self . layoutButtons ( ) < nl > } else if ( ACCallState _ Enum . ENDED = = value . toNSEnum ( ) ) { < nl > - self . callState . text = " Call Ended " < nl > + self . stopTimer ( ) < nl > self . muteButton . hidden = true < nl > self . speakerButton . hidden = true < nl > self . videoButton . hidden = true < nl > @ @ - 230 , 6 + 231 , 33 @ @ public class AACallViewController : AAViewController { < nl > UIDevice . currentDevice ( ) . proximityMonitoringEnabled = true < nl > } < nl > < nl > + func startTimer ( ) { < nl > + timer ? . invalidate ( ) < nl > + timer = NSTimer . scheduledTimerWithTimeInterval ( 1 . 0 , target : self , selector : " updateTimer " , userInfo : nil , repeats : true ) < nl > + updateTimer ( ) < nl > + } < nl > + < nl > + func updateTimer ( ) { < nl > + if call . callStart > 0 { < nl > + let end = call . callEnd > 0 ? call . callEnd : jlong ( NSDate ( ) . timeIntervalSince1970 * 1000 ) < nl > + let secs = Int ( ( end - call . callStart ) / 1000 ) < nl > + < nl > + let seconds = secs % 60 < nl > + let minutes = secs / 60 < nl > + < nl > + self . callState . text = NSString ( format : " % 0 . 2d : % 0 . 2d " , minutes , seconds ) as String < nl > + } else { < nl > + self . callState . text = " 0 : 00 " < nl > + } < nl > + } < nl > + < nl > + func stopTimer ( ) { < nl > + timer ? . invalidate ( ) < nl > + timer = nil < nl > + updateTimer ( ) < nl > + / / self . callState . text = " Call Ended " < nl > + } < nl > + < nl > public override func viewWillDisappear ( animated : Bool ) { < nl > super . viewWillDisappear ( animated ) < nl > UIDevice . currentDevice ( ) . proximityMonitoringEnabled = false < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > index 5ff7abf . . b60d213 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > @ @ - 25 , 7 + 25 , 7 @ @ public class CallActor extends AbsCallActor { < nl > private CallVM callVM ; < nl > private CommandCallback < Long > callback ; < nl > < nl > - private boolean isConnected ; < nl > + private boolean isActive ; < nl > private boolean isAnswered ; < nl > private boolean isRejected ; < nl > < nl > @ @ - 34 , 7 + 34 , 7 @ @ public class CallActor extends AbsCallActor { < nl > this . isMaster = false ; < nl > this . callId = callId ; < nl > this . isAnswered = false ; < nl > - this . isConnected = false ; < nl > + this . isActive = false ; < nl > } < nl > < nl > public CallActor ( Peer peer , CommandCallback < Long > callback , ModuleContext context ) { < nl > @ @ - 43 , 7 + 43 , 7 @ @ public class CallActor extends AbsCallActor { < nl > this . callback = callback ; < nl > this . peer = peer ; < nl > this . isAnswered = true ; < nl > - this . isConnected = false ; < nl > + this . isActive = false ; < nl > } < nl > < nl > @ Override < nl > @ @ - 92 , 6 + 92 , 25 @ @ public class CallActor extends AbsCallActor { < nl > } < nl > } < nl > < nl > + @ Override < nl > + public void onCallConnected ( ) { < nl > + / / callVM . getState ( ) . change ( ) < nl > + } < nl > + < nl > + @ Override < nl > + public void onCallEnabled ( ) { < nl > + isActive = true ; < nl > + if ( isAnswered ) { < nl > + callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; < nl > + callVM . setCallStart ( im . actor . runtime . Runtime . getCurrentTime ( ) ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void onBusStopped ( ) { < nl > + self ( ) . send ( PoisonPill . INSTANCE ) ; < nl > + } < nl > + < nl > < nl > @ Override < nl > public void onMuteChanged ( boolean isMuted ) { < nl > @ @ - 103 , 8 + 122 , 10 @ @ public class CallActor extends AbsCallActor { < nl > if ( ! isAnswered & & ! isRejected ) { < nl > isAnswered = true ; < nl > request ( new RequestJoinCall ( callId ) ) ; < nl > - if ( isConnected ) { < nl > + < nl > + if ( isActive ) { < nl > callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; < nl > + callVM . setCallStart ( im . actor . runtime . Runtime . getCurrentTime ( ) ) ; < nl > } else { < nl > callVM . getState ( ) . change ( CallState . CONNECTING ) ; < nl > } < nl > @ @ - 123 , 8 + 144 , 12 @ @ public class CallActor extends AbsCallActor { < nl > super . postStop ( ) ; < nl > if ( callVM ! = null ) { < nl > callVM . getState ( ) . change ( CallState . ENDED ) ; < nl > + callVM . setCallEnd ( im . actor . runtime . Runtime . getCurrentTime ( ) ) ; < nl > } < nl > callBus . kill ( ) ; < nl > + if ( callId ! = 0 ) { < nl > + callManager . send ( new CallManagerActor . OnCallEnded ( callId ) , self ( ) ) ; < nl > + } < nl > } < nl > < nl > / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java < nl > index af1c090 . . ed9d3a8 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java < nl > @ @ - 75 , 5 + 75 , 35 @ @ public abstract class AbsCallActor extends ModuleActor implements CallBusCallbac < nl > } < nl > } ) ; < nl > } < nl > + < nl > + @ Override < nl > + public void onCallConnected ( ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + AbsCallActor . this . onCallConnected ( ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onCallEnabled ( ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + AbsCallActor . this . onCallEnabled ( ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onBusStopped ( ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + AbsCallActor . this . onBusStopped ( ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java < nl > index a80879d . . 025cf33 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java < nl > @ @ - 33 , 6 + 33 , 8 @ @ public class CallBusActor extends EventBusActor implements PeerCallCallback { < nl > private boolean isMasterReady ; < nl > private long masterDeviceId ; < nl > private PeerCallInt peerCall ; < nl > + private boolean isConnected = false ; < nl > + private boolean isEnabled = false ; < nl > < nl > public CallBusActor ( final CallBusCallback callBusCallback , PeerSettings selfSettings , ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 93 , 7 + 95 , 14 @ @ public class CallBusActor extends EventBusActor implements PeerCallCallback { < nl > < nl > @ Override < nl > public void onPeerStateChanged ( long deviceId , PeerState state ) { < nl > - < nl > + if ( state = = PeerState . CONNECTED & & ! isConnected & & ! isEnabled ) { < nl > + isConnected = true ; < nl > + callBusCallback . onCallConnected ( ) ; < nl > + } < nl > + if ( state = = PeerState . ACTIVE & & ! isEnabled ) { < nl > + isEnabled = true ; < nl > + callBusCallback . onCallEnabled ( ) ; < nl > + } < nl > } < nl > < nl > @ Override < nl > @ @ - 199 , 6 + 208 , 16 @ @ public class CallBusActor extends EventBusActor implements PeerCallCallback { < nl > } < nl > < nl > @ Override < nl > + public void postStop ( ) { < nl > + super . postStop ( ) ; < nl > + if ( peerCall ! = null ) { < nl > + peerCall . kill ( ) ; < nl > + peerCall = null ; < nl > + } < nl > + callBusCallback . onBusStopped ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof JoinBus ) { < nl > joinBus ( ( ( JoinBus ) message ) . getBusId ( ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java < nl > index 13c8489 . . e26bff1 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java < nl > @ @ - 1 , 6 + 1 , 12 @ @ < nl > package im . actor . core . modules . calls . peers ; < nl > < nl > public interface CallBusCallback { < nl > - < nl > + < nl > void onBusStarted ( String busId ) ; < nl > + < nl > + void onCallConnected ( ) ; < nl > + < nl > + void onCallEnabled ( ) ; < nl > + < nl > + void onBusStopped ( ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > index 3100d73 . . 090d9df 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > @ @ - 121 , 6 + 121 , 10 @ @ public class PeerCallActor extends ModuleActor { < nl > d . kill ( ) ; < nl > } < nl > refs . clear ( ) ; < nl > + if ( webRTCMediaStream ! = null ) { < nl > + webRTCMediaStream . setEnabled ( false ) ; < nl > + webRTCMediaStream . close ( ) ; < nl > + } < nl > } < nl > < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java < nl > index d2d7a44 . . 6b6cd76 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java < nl > @ @ - 47 , 7 + 47 , 6 @ @ public class PeerConnectionActor extends ModuleActor { < nl > < nl > @ NotNull < nl > private WebRTCPeerConnection peerConnection ; < nl > - private SDPOptimizer sdpOptimizer ; < nl > private boolean isReady = false ; < nl > private boolean isReadyForCandidates = false ; < nl > @ NotNull < nl > @ @ - 62 , 7 + 61 , 6 @ @ public class PeerConnectionActor extends ModuleActor { < nl > this . TAG = " PeerConnection " ; < nl > this . callback = callback ; < nl > this . stream = mediaStream ; < nl > - this . sdpOptimizer = new SDPOptimizer ( selfSettings , theirSettings ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 136 , 7 + 134 , 7 @ @ public class PeerConnectionActor extends ModuleActor { < nl > / / < nl > < nl > isReady = false ; < nl > - peerConnection . createOffer ( ) . map ( OPTIMIZE _ OWN _ SDP ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > + peerConnection . createOffer ( ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > @ Override < nl > public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > return peerConnection . setLocalDescription ( description ) ; < nl > @ @ - 178 , 7 + 176 , 7 @ @ public class PeerConnectionActor extends ModuleActor { < nl > public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > return peerConnection . createAnswer ( ) ; < nl > } < nl > - } ) . map ( OPTIMIZE _ OWN _ SDP ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > + } ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > @ Override < nl > public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > return peerConnection . setLocalDescription ( description ) ; < nl > @ @ - 265 , 28 + 263 , 6 @ @ public class PeerConnectionActor extends ModuleActor { < nl > } < nl > < nl > / / < nl > - / / Configuration < nl > - / / < nl > - < nl > - private Function < WebRTCSessionDescription , WebRTCSessionDescription > OPTIMIZE _ OWN _ SDP < nl > - = new Function < WebRTCSessionDescription , WebRTCSessionDescription > ( ) { < nl > - @ Override < nl > - public WebRTCSessionDescription apply ( WebRTCSessionDescription description ) { < nl > - return new WebRTCSessionDescription ( description . getType ( ) , < nl > - sdpOptimizer . optimizeOwnSDP ( description . getSdp ( ) ) ) ; < nl > - } < nl > - } ; < nl > - < nl > - private Function < WebRTCSessionDescription , WebRTCSessionDescription > OPTIMIZE _ THEIR _ SDP < nl > - = new Function < WebRTCSessionDescription , WebRTCSessionDescription > ( ) { < nl > - @ Override < nl > - public WebRTCSessionDescription apply ( WebRTCSessionDescription description ) { < nl > - return new WebRTCSessionDescription ( description . getType ( ) , < nl > - sdpOptimizer . optimizeTheirSDP ( description . getSdp ( ) ) ) ; < nl > - } < nl > - } ; < nl > - < nl > - / / < nl > / / Messages < nl > / / < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / SDPOptimizer . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / SDPOptimizer . java < nl > deleted file mode 100644 < nl > index 38280f4 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / SDPOptimizer . java < nl > + + + / dev / null < nl > @ @ - 1 , 42 + 0 , 0 @ @ < nl > - package im . actor . core . modules . calls . peers ; < nl > - < nl > - public class SDPOptimizer { < nl > - < nl > - private final PeerSettings ownSettings ; < nl > - private final PeerSettings theirSettings ; < nl > - < nl > - public SDPOptimizer ( PeerSettings ownSettings , PeerSettings theirSettings ) { < nl > - this . ownSettings = ownSettings ; < nl > - this . theirSettings = theirSettings ; < nl > - } < nl > - < nl > - public String optimizeOwnSDP ( String sdp ) { < nl > - / / SDPScheme sdpScheme = SDP . parse ( description . getSdp ( ) ) ; < nl > - / / < nl > - / / for ( SDPMedia m : sdpScheme . getMediaLevel ( ) ) { < nl > - / / < nl > - / / / / Disabling media streams < nl > - / / / / m . setMode ( SDPMediaMode . INACTIVE ) ; < nl > - / / < nl > - / / / / Optimizing opus < nl > - / / if ( " audio " . equals ( m . getType ( ) ) ) { < nl > - / / for ( SDPCodec codec : m . getCodecs ( ) ) { < nl > - / / if ( " opus " . equals ( codec . getName ( ) ) ) { < nl > - / / codec . getFormat ( ) . put ( " maxcodedaudiobandwidth " , " 16000 " ) ; < nl > - / / codec . getFormat ( ) . put ( " maxaveragebitrate " , " 20000 " ) ; < nl > - / / codec . getFormat ( ) . put ( " stereo " , " 0 " ) ; < nl > - / / codec . getFormat ( ) . put ( " useinbandfec " , " 1 " ) ; < nl > - / / codec . getFormat ( ) . put ( " usedtx " , " 1 " ) ; < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / return new WebRTCSessionDescription ( description . getType ( ) , sdpScheme . toSDP ( ) ) ; < nl > - return sdp ; < nl > - } < nl > - < nl > - public String optimizeTheirSDP ( String sdp ) { < nl > - return sdp ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java < nl > index 39d1bb1 . . 1d52dec 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java < nl > @ @ - 6 , 7 + 6 , 11 @ @ import java . util . ArrayList ; < nl > < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . viewmodel . generics . BooleanValueModel ; < nl > + import im . actor . core . viewmodel . generics . IntValueModel ; < nl > + import im . actor . runtime . * ; < nl > + import im . actor . runtime . actors . ActorTime ; < nl > import im . actor . runtime . mvvm . ValueModel ; < nl > + import im . actor . runtime . threading . CommonTimer ; < nl > < nl > public class CallVM { < nl > < nl > @ @ - 21 , 8 + 25 , 14 @ @ public class CallVM { < nl > @ Property ( " nonatomic , readonly " ) < nl > private final BooleanValueModel isMuted ; < nl > @ Property ( " nonatomic , readonly " ) < nl > + private long callStart ; < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private long callEnd ; < nl > + @ Property ( " nonatomic , readonly " ) < nl > private final boolean isOutgoing ; < nl > < nl > + private CommonTimer presenceTimer ; < nl > + < nl > public CallVM ( long callId , Peer peer , boolean isOutgoing , ArrayList < CallMember > initialMembers , CallState state ) { < nl > this . callId = callId ; < nl > this . peer = peer ; < nl > @ @ - 30 , 6 + 40 , 7 @ @ public class CallVM { < nl > this . state = new ValueModel < > ( " calls . " + callId + " . state " , state ) ; < nl > this . members = new ValueModel < > ( " calls . " + callId + " . members " , new ArrayList < > ( initialMembers ) ) ; < nl > this . isMuted = new BooleanValueModel ( " calls . " + callId + " . state " , false ) ; < nl > + this . callStart = 0 ; < nl > } < nl > < nl > public boolean isOutgoing ( ) { < nl > @ @ - 55 , 4 + 66 , 20 @ @ public class CallVM { < nl > public ValueModel < ArrayList < CallMember > > getMembers ( ) { < nl > return members ; < nl > } < nl > + < nl > + public void setCallStart ( long callStart ) { < nl > + this . callStart = callStart ; < nl > + } < nl > + < nl > + public long getCallStart ( ) { < nl > + return callStart ; < nl > + } < nl > + < nl > + public long getCallEnd ( ) { < nl > + return callEnd ; < nl > + } < nl > + < nl > + public void setCallEnd ( long callEnd ) { < nl > + this . callEnd = callEnd ; < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / CommonTimer . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / CommonTimer . java < nl > index d76d8fe . . ac273fe 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / CommonTimer . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / CommonTimer . java < nl > @ @ - 16 , 16 + 16 , 21 @ @ public class CommonTimer { < nl > return new Actor ( ) ; < nl > } < nl > } ) ; < nl > - private static final Scheduler COMMON _ SCHEDULER = new Scheduler ( COMMON _ TIMER _ ACTOR ) ; < nl > + private static final Scheduler COMMON _ SCHEDULER = new Scheduler ( COMMON _ TIMER _ ACTOR ) ; < nl > < nl > private final Runnable runnable ; < nl > private Cancellable lastSchedule ; < nl > + private boolean isDisposed ; < nl > < nl > public CommonTimer ( Runnable runnable ) { < nl > this . runnable = runnable ; < nl > } < nl > < nl > public void schedule ( long time ) { < nl > + if ( isDisposed ) { < nl > + return ; < nl > + } < nl > + < nl > if ( lastSchedule ! = null ) { < nl > lastSchedule . cancel ( ) ; < nl > } < nl > @ @ - 38 , 4 + 43 , 9 @ @ public class CommonTimer { < nl > lastSchedule . cancel ( ) ; < nl > } < nl > } < nl > + < nl > + public void dispose ( ) { < nl > + isDisposed = true ; < nl > + cancel ( ) ; < nl > + } < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift 
 index faa8cc7 . . e3334dc 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift 
 @ @ - 28 , 7 + 28 , 7 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { 
 public let declineCallButtonText = UILabel ( ) 
 
 public let muteButton = AACircleButton ( size : 72 ) 
 - public let videoButton = AACircleButton ( size : 72 ) 
 + / / public let videoButton = AACircleButton ( size : 72 ) 
 
 var isScheduledDispose = false 
 var timer : NSTimer ? 
 @ @ - 89 , 13 + 89 , 13 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { 
 Actor . toggleCallMuteWithCallId ( self . callId ) 
 } 
 
 - videoButton . image = UIImage . bundled ( " ic _ video _ 44 " ) 
 - videoButton . title = AALocalized ( " CallsVideo " ) 
 - videoButton . alpha = 0 
 + / / videoButton . image = UIImage . bundled ( " ic _ video _ 44 " ) 
 + / / videoButton . title = AALocalized ( " CallsVideo " ) 
 + / / videoButton . alpha = 0 
 
 - videoButton . button . viewDidTap = { 
 - Actor . toggleVideoEnabledWithCallId ( self . callId ) 
 - } 
 + / / videoButton . button . viewDidTap = { 
 + / / Actor . toggleVideoEnabledWithCallId ( self . callId ) 
 + / / } 
 
 
 / / 
 @ @ - 140 , 7 + 140 , 7 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { 
 self . view . addSubview ( declineCallButton ) 
 self . view . addSubview ( declineCallButtonText ) 
 self . view . addSubview ( muteButton ) 
 - self . view . addSubview ( videoButton ) 
 + / / self . view . addSubview ( videoButton ) 
 self . view . addSubview ( localView ) 
 } 
 
 @ @ - 168 , 7 + 168 , 12 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { 
 private func layoutButtons ( ) { 
 
 muteButton . frame = CGRectMake ( ( self . view . width / 3 - 84 ) / 2 , self . view . height - 72 - 49 , 84 , 72 + 5 + 44 ) 
 - videoButton . frame = CGRectMake ( 2 * self . view . width / 3 + ( self . view . width / 3 - 84 ) / 2 , self . view . height - 72 - 49 , 84 , 72 + 5 + 44 ) 
 + / / videoButton . frame = CGRectMake ( 2 * self . view . width / 3 + ( self . view . width / 3 - 84 ) / 2 , self . view . height - 72 - 49 , 84 , 72 + 5 + 44 ) 
 + / / if call . isVideoPreferred . boolValue { 
 + / / videoButton . hidden = true 
 + / / } else { 
 + / / videoButton . hidden = false 
 + / / } 
 
 if ! declineCallButton . hidden | | ! answerCallButton . hidden { 
 if ! declineCallButton . hidden & & ! answerCallButton . hidden { 
 @ @ - 256 , 7 + 261 , 7 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { 
 if ( self . call . isOutgoing ) { 
 
 self . muteButton . showViewAnimated ( ) 
 - self . videoButton . showViewAnimated ( ) 
 + / / self . videoButton . showViewAnimated ( ) 
 
 self . answerCallButton . hidden = true 
 self . answerCallButtonText . hidden = true 
 @ @ - 277 , 7 + 282 , 7 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { 
 } else if ( ACCallState _ Enum . CONNECTING = = value . toNSEnum ( ) ) { 
 
 self . muteButton . showViewAnimated ( ) 
 - self . videoButton . showViewAnimated ( ) 
 + / / self . videoButton . showViewAnimated ( ) 
 
 self . answerCallButton . hidden = true 
 self . answerCallButtonText . hidden = true 
 @ @ - 291 , 7 + 296 , 7 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { 
 } else if ( ACCallState _ Enum . IN _ PROGRESS = = value . toNSEnum ( ) ) { 
 
 self . muteButton . showViewAnimated ( ) 
 - self . videoButton . showViewAnimated ( ) 
 + / / self . videoButton . showViewAnimated ( ) 
 
 self . answerCallButton . hidden = true 
 self . answerCallButtonText . hidden = true 
 @ @ - 305 , 7 + 310 , 7 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { 
 } else if ( ACCallState _ Enum . ENDED = = value . toNSEnum ( ) ) { 
 
 self . muteButton . hideViewAnimated ( ) 
 - self . videoButton . hideViewAnimated ( ) 
 + / / self . videoButton . hideViewAnimated ( ) 
 
 self . answerCallButton . hidden = true 
 self . answerCallButtonText . hidden = true 
 @ @ - 359 , 9 + 364 , 9 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { 
 if call . peer . isPrivate { 
 
 / / Bind Video Button 
 - binder . bind ( call . isVideoEnabled ) { ( value : JavaLangBoolean ! ) - > ( ) in 
 - self . videoButton . filled = value . booleanValue ( ) 
 - } 
 + / / binder . bind ( call . isVideoEnabled ) { ( value : JavaLangBoolean ! ) - > ( ) in 
 + / / self . videoButton . filled = value . booleanValue ( ) 
 + / / } 
 
 / / Local Video can be only one , so we can just keep active track reference and handle changes 
 binder . bind ( call . ownVideoTracks , closure : { ( videoTracks : ACArrayListMediaTrack ! ) in 
 @ @ - 419 , 8 + 424 , 8 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { 
 } ) 
 
 } else { 
 - self . videoButton . filled = false 
 - self . videoButton . enabled = false 
 + / / self . videoButton . filled = false 
 + / / self . videoButton . enabled = false 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioManager . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioManager . swift 
 index d8fdcdc . . 5af6d65 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioManager . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AAAudioManager . swift 
 @ @ - 22 , 11 + 22 , 11 @ @ public class AAAudioManager : NSObject , AVAudioPlayerDelegate { 
 private var isVisible = false 
 
 private var isEnabled : Bool = false 
 + private var isVideoPreferred = false 
 private var openedConnections : Int = 0 
 
 public override init ( ) { 
 - super . init ( ) 
 - 
 + super . init ( ) 
 } 
 
 public func appVisible ( ) { 
 @ @ - 38 , 6 + 38 , 8 @ @ public class AAAudioManager : NSObject , AVAudioPlayerDelegate { 
 } 
 
 public func callStart ( call : ACCallVM ) { 
 + isVideoPreferred = call . isVideoPreferred 
 + 
 if ! call . isOutgoing { 
 isRinging = true 
 if isVisible { 
 @ @ - 46 , 7 + 48 , 7 @ @ public class AAAudioManager : NSObject , AVAudioPlayerDelegate { 
 audioRouter . category = AVAudioSessionCategoryPlayAndRecord 
 audioRouter . mode = AVAudioSessionModeDefault 
 audioRouter . currentRoute = . Speaker 
 - audioRouter . isEnabled = isEnabled 
 + audioRouter . isEnabled = true 
 } 
 ringtoneStart ( ) 
 } else { 
 @ @ - 55 , 28 + 57 , 42 @ @ public class AAAudioManager : NSObject , AVAudioPlayerDelegate { 
 vibrate ( ) 
 } else { 
 isEnabled = true 
 - audioRouter . category = AVAudioSessionCategoryPlayAndRecord 
 - audioRouter . mode = AVAudioSessionModeVoiceChat 
 - audioRouter . currentRoute = . Receiver 
 - audioRouter . isEnabled = isEnabled 
 + audioRouter . batchedUpdate { 
 + audioRouter . category = AVAudioSessionCategoryPlayAndRecord 
 + audioRouter . mode = AVAudioSessionModeVoiceChat 
 + if isVideoPreferred { 
 + audioRouter . currentRoute = . Speaker 
 + } else { 
 + audioRouter . currentRoute = . Receiver 
 + } 
 + audioRouter . isEnabled = true 
 + } 
 } 
 } 
 
 public func callAnswered ( call : ACCallVM ) { 
 ringtoneEnd ( ) 
 isRinging = false 
 - audioRouter . mode = AVAudioSessionModeVoiceChat 
 - audioRouter . currentRoute = . Receiver 
 + audioRouter . batchedUpdate { 
 + audioRouter . mode = AVAudioSessionModeVoiceChat 
 + if isVideoPreferred { 
 + audioRouter . currentRoute = . Speaker 
 + } else { 
 + audioRouter . currentRoute = . Receiver 
 + } 
 + } 
 } 
 
 public func callEnd ( call : ACCallVM ) { 
 ringtoneEnd ( ) 
 isRinging = false 
 isEnabled = false 
 - audioRouter . category = AVAudioSessionCategorySoloAmbient 
 - audioRouter . mode = AVAudioSessionModeDefault 
 - audioRouter . currentRoute = . Receiver 
 - audioRouter . isEnabled = isEnabled 
 + audioRouter . batchedUpdate { 
 + audioRouter . category = AVAudioSessionCategorySoloAmbient 
 + audioRouter . mode = AVAudioSessionModeDefault 
 + audioRouter . currentRoute = . Receiver 
 + audioRouter . isEnabled = false 
 + } 
 } 
 
 public func peerConnectionStarted ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 index cd4a9bb . . 329b300 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 @ @ - 66 , 7 + 66 , 8 @ @ public class CallActor extends AbsCallActor { 
 callBus . joinMasterBus ( responseDoCall . getEventBusId ( ) , responseDoCall . getDeviceId ( ) ) ; 
 callBus . changeVideoEnabled ( isVideoInitiallyEnabled ) ; 
 callBus . startOwn ( ) ; 
 - callVM = callViewModels . spawnNewOutgoingVM ( responseDoCall . getCallId ( ) , peer , isVideoInitiallyEnabled ) ; 
 + callVM = callViewModels . spawnNewOutgoingVM ( responseDoCall . getCallId ( ) , peer , isVideoInitiallyEnabled , 
 + isVideoInitiallyEnabled ) ; 
 } ) . failure ( e - > self ( ) . send ( PoisonPill . INSTANCE ) ) ; 
 } else { 
 api ( new RequestGetCallInfo ( callId ) ) . then ( responseGetCallInfo - > { 
 @ @ - 76 , 7 + 77 , 8 @ @ public class CallActor extends AbsCallActor { 
 isVideoInitiallyEnabled = responseGetCallInfo . isVideoPreferred ( ) ; 
 callBus . changeVideoEnabled ( isVideoInitiallyEnabled ) ; 
 } 
 - callVM = callViewModels . spawnNewIncomingVM ( callId , peer , isVideoInitiallyEnabled , CallState . RINGING ) ; 
 + callVM = callViewModels . spawnNewIncomingVM ( callId , peer , isVideoInitiallyEnabled , 
 + isVideoInitiallyEnabled , CallState . RINGING ) ; 
 } ) . failure ( e - > self ( ) . send ( PoisonPill . INSTANCE ) ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallViewModels . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallViewModels . java 
 index 0942762 . . a42a3eb 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallViewModels . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallViewModels . java 
 @ @ - 27 , 23 + 27 , 29 @ @ public class CallViewModels { 
 return callModels . get ( id ) ; 
 } 
 
 - public synchronized CallVM spawnNewVM ( long callId , Peer peer , boolean isOutgoing , boolean isVideoEnabled , ArrayList < CallMember > members , CallState callState ) { 
 - CallVM callVM = new CallVM ( callId , peer , isOutgoing , isVideoEnabled , members , callState ) ; 
 + public synchronized CallVM spawnNewVM ( long callId , Peer peer , boolean isOutgoing , 
 + boolean isVideoEnabled , boolean isVideoPreffered , 
 + ArrayList < CallMember > members , CallState callState ) { 
 + CallVM callVM = new CallVM ( callId , peer , isOutgoing , isVideoEnabled , isVideoPreffered , 
 + members , callState ) ; 
 synchronized ( callModels ) { 
 callModels . put ( callId , callVM ) ; 
 } 
 return callVM ; 
 } 
 
 - public synchronized CallVM spawnNewIncomingVM ( long callId , Peer peer , boolean isVideoEnabled , CallState callState ) { 
 - CallVM callVM = new CallVM ( callId , peer , false , isVideoEnabled , new ArrayList < > ( ) , callState ) ; 
 + public synchronized CallVM spawnNewIncomingVM ( long callId , Peer peer , boolean isVideoEnabled , 
 + boolean isVideoPreffered , CallState callState ) { 
 + CallVM callVM = new CallVM ( callId , peer , false , isVideoEnabled , isVideoPreffered , 
 + new ArrayList < > ( ) , callState ) ; 
 synchronized ( callModels ) { 
 callModels . put ( callId , callVM ) ; 
 } 
 return callVM ; 
 } 
 
 - public synchronized CallVM spawnNewOutgoingVM ( long callId , Peer peer , boolean isVideoEnabled ) { 
 + public synchronized CallVM spawnNewOutgoingVM ( long callId , Peer peer , boolean isVideoEnabled , 
 + boolean isVideoPreferred ) { 
 ArrayList < CallMember > members = new ArrayList < > ( ) ; 
 if ( peer . getPeerType ( ) = = PeerType . PRIVATE | | 
 peer . getPeerType ( ) = = PeerType . PRIVATE _ ENCRYPTED ) { 
 @ @ - 56 , 6 + 62 , 7 @ @ public class CallViewModels { 
 } 
 } 
 } 
 - return spawnNewVM ( callId , peer , true , isVideoEnabled , members , CallState . RINGING ) ; 
 + return spawnNewVM ( callId , peer , true , isVideoEnabled , isVideoPreferred , members , 
 + CallState . RINGING ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java 
 index be0a615 . . 3e5a552 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java 
 @ @ - 35 , 6 + 35 , 8 @ @ public class CallVM { 
 private final BooleanValueModel isAudioEnabled ; 
 @ Property ( " nonatomic , readonly " ) 
 private final BooleanValueModel isVideoEnabled ; 
 + @ Property ( " nonatomic , readonly " ) 
 + private final boolean isVideoPreferred ; 
 
 @ Property ( " nonatomic , readonly " ) 
 private final ValueModel < ArrayList < CallMember > > members ; 
 @ @ - 45 , 7 + 47 , 7 @ @ public class CallVM { 
 @ Property ( " nonatomic , readonly " ) 
 private final boolean isOutgoing ; 
 
 - public CallVM ( long callId , Peer peer , boolean isOutgoing , boolean isVideoEnabled , ArrayList < CallMember > initialMembers , CallState state ) { 
 + public CallVM ( long callId , Peer peer , boolean isOutgoing , boolean isVideoEnabled , boolean isVideoPreferred , ArrayList < CallMember > initialMembers , CallState state ) { 
 this . callId = callId ; 
 this . peer = peer ; 
 this . isOutgoing = isOutgoing ; 
 @ @ - 57 , 6 + 59 , 7 @ @ public class CallVM { 
 this . members = new ValueModel < > ( " calls . " + callId + " . members " , new ArrayList < > ( initialMembers ) ) ; 
 this . isAudioEnabled = new BooleanValueModel ( " calls . " + callId + " . audio _ enabled " , true ) ; 
 this . isVideoEnabled = new BooleanValueModel ( " calls . " + callId + " . video _ enabled " , isVideoEnabled ) ; 
 + this . isVideoPreferred = isVideoPreferred ; 
 this . callStart = 0 ; 
 } 
 
 @ @ - 88 , 6 + 91 , 10 @ @ public class CallVM { 
 return members ; 
 } 
 
 + public boolean isVideoPreferred ( ) { 
 + return isVideoPreferred ; 
 + } 
 + 
 public void setCallStart ( long callStart ) { 
 this . callStart = callStart ; 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift 
 index 3bc6444 . . d6c14d7 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift 
 @ @ - 24 , 6 + 24 , 7 @ @ public class AACallViewController : AAViewController { 
 public let videoButton = AACircleButton ( size : 72 ) 
 
 var isScheduledDispose = false 
 + var timer : NSTimer ? 
 
 public init ( callId : jlong ) { 
 self . callId = callId 
 @ @ - 172 , 10 + 173 , 10 @ @ public class AACallViewController : AAViewController { 
 self . answerCallButtonText . hidden = true 
 self . declineCallButton . hidden = false 
 self . declineCallButtonText . hidden = true 
 - self . callState . text = " 0 : 00 " 
 + self . startTimer ( ) 
 self . layoutButtons ( ) 
 } else if ( ACCallState _ Enum . ENDED = = value . toNSEnum ( ) ) { 
 - self . callState . text = " Call Ended " 
 + self . stopTimer ( ) 
 self . muteButton . hidden = true 
 self . speakerButton . hidden = true 
 self . videoButton . hidden = true 
 @ @ - 230 , 6 + 231 , 33 @ @ public class AACallViewController : AAViewController { 
 UIDevice . currentDevice ( ) . proximityMonitoringEnabled = true 
 } 
 
 + func startTimer ( ) { 
 + timer ? . invalidate ( ) 
 + timer = NSTimer . scheduledTimerWithTimeInterval ( 1 . 0 , target : self , selector : " updateTimer " , userInfo : nil , repeats : true ) 
 + updateTimer ( ) 
 + } 
 + 
 + func updateTimer ( ) { 
 + if call . callStart > 0 { 
 + let end = call . callEnd > 0 ? call . callEnd : jlong ( NSDate ( ) . timeIntervalSince1970 * 1000 ) 
 + let secs = Int ( ( end - call . callStart ) / 1000 ) 
 + 
 + let seconds = secs % 60 
 + let minutes = secs / 60 
 + 
 + self . callState . text = NSString ( format : " % 0 . 2d : % 0 . 2d " , minutes , seconds ) as String 
 + } else { 
 + self . callState . text = " 0 : 00 " 
 + } 
 + } 
 + 
 + func stopTimer ( ) { 
 + timer ? . invalidate ( ) 
 + timer = nil 
 + updateTimer ( ) 
 + / / self . callState . text = " Call Ended " 
 + } 
 + 
 public override func viewWillDisappear ( animated : Bool ) { 
 super . viewWillDisappear ( animated ) 
 UIDevice . currentDevice ( ) . proximityMonitoringEnabled = false 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 index 5ff7abf . . b60d213 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 @ @ - 25 , 7 + 25 , 7 @ @ public class CallActor extends AbsCallActor { 
 private CallVM callVM ; 
 private CommandCallback < Long > callback ; 
 
 - private boolean isConnected ; 
 + private boolean isActive ; 
 private boolean isAnswered ; 
 private boolean isRejected ; 
 
 @ @ - 34 , 7 + 34 , 7 @ @ public class CallActor extends AbsCallActor { 
 this . isMaster = false ; 
 this . callId = callId ; 
 this . isAnswered = false ; 
 - this . isConnected = false ; 
 + this . isActive = false ; 
 } 
 
 public CallActor ( Peer peer , CommandCallback < Long > callback , ModuleContext context ) { 
 @ @ - 43 , 7 + 43 , 7 @ @ public class CallActor extends AbsCallActor { 
 this . callback = callback ; 
 this . peer = peer ; 
 this . isAnswered = true ; 
 - this . isConnected = false ; 
 + this . isActive = false ; 
 } 
 
 @ Override 
 @ @ - 92 , 6 + 92 , 25 @ @ public class CallActor extends AbsCallActor { 
 } 
 } 
 
 + @ Override 
 + public void onCallConnected ( ) { 
 + / / callVM . getState ( ) . change ( ) 
 + } 
 + 
 + @ Override 
 + public void onCallEnabled ( ) { 
 + isActive = true ; 
 + if ( isAnswered ) { 
 + callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; 
 + callVM . setCallStart ( im . actor . runtime . Runtime . getCurrentTime ( ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void onBusStopped ( ) { 
 + self ( ) . send ( PoisonPill . INSTANCE ) ; 
 + } 
 + 
 
 @ Override 
 public void onMuteChanged ( boolean isMuted ) { 
 @ @ - 103 , 8 + 122 , 10 @ @ public class CallActor extends AbsCallActor { 
 if ( ! isAnswered & & ! isRejected ) { 
 isAnswered = true ; 
 request ( new RequestJoinCall ( callId ) ) ; 
 - if ( isConnected ) { 
 + 
 + if ( isActive ) { 
 callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; 
 + callVM . setCallStart ( im . actor . runtime . Runtime . getCurrentTime ( ) ) ; 
 } else { 
 callVM . getState ( ) . change ( CallState . CONNECTING ) ; 
 } 
 @ @ - 123 , 8 + 144 , 12 @ @ public class CallActor extends AbsCallActor { 
 super . postStop ( ) ; 
 if ( callVM ! = null ) { 
 callVM . getState ( ) . change ( CallState . ENDED ) ; 
 + callVM . setCallEnd ( im . actor . runtime . Runtime . getCurrentTime ( ) ) ; 
 } 
 callBus . kill ( ) ; 
 + if ( callId ! = 0 ) { 
 + callManager . send ( new CallManagerActor . OnCallEnded ( callId ) , self ( ) ) ; 
 + } 
 } 
 
 / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java 
 index af1c090 . . ed9d3a8 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java 
 @ @ - 75 , 5 + 75 , 35 @ @ public abstract class AbsCallActor extends ModuleActor implements CallBusCallbac 
 } 
 } ) ; 
 } 
 + 
 + @ Override 
 + public void onCallConnected ( ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + AbsCallActor . this . onCallConnected ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onCallEnabled ( ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + AbsCallActor . this . onCallEnabled ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onBusStopped ( ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + AbsCallActor . this . onBusStopped ( ) ; 
 + } 
 + } ) ; 
 + } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java 
 index a80879d . . 025cf33 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java 
 @ @ - 33 , 6 + 33 , 8 @ @ public class CallBusActor extends EventBusActor implements PeerCallCallback { 
 private boolean isMasterReady ; 
 private long masterDeviceId ; 
 private PeerCallInt peerCall ; 
 + private boolean isConnected = false ; 
 + private boolean isEnabled = false ; 
 
 public CallBusActor ( final CallBusCallback callBusCallback , PeerSettings selfSettings , ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 93 , 7 + 95 , 14 @ @ public class CallBusActor extends EventBusActor implements PeerCallCallback { 
 
 @ Override 
 public void onPeerStateChanged ( long deviceId , PeerState state ) { 
 - 
 + if ( state = = PeerState . CONNECTED & & ! isConnected & & ! isEnabled ) { 
 + isConnected = true ; 
 + callBusCallback . onCallConnected ( ) ; 
 + } 
 + if ( state = = PeerState . ACTIVE & & ! isEnabled ) { 
 + isEnabled = true ; 
 + callBusCallback . onCallEnabled ( ) ; 
 + } 
 } 
 
 @ Override 
 @ @ - 199 , 6 + 208 , 16 @ @ public class CallBusActor extends EventBusActor implements PeerCallCallback { 
 } 
 
 @ Override 
 + public void postStop ( ) { 
 + super . postStop ( ) ; 
 + if ( peerCall ! = null ) { 
 + peerCall . kill ( ) ; 
 + peerCall = null ; 
 + } 
 + callBusCallback . onBusStopped ( ) ; 
 + } 
 + 
 + @ Override 
 public void onReceive ( Object message ) { 
 if ( message instanceof JoinBus ) { 
 joinBus ( ( ( JoinBus ) message ) . getBusId ( ) ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java 
 index 13c8489 . . e26bff1 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java 
 @ @ - 1 , 6 + 1 , 12 @ @ 
 package im . actor . core . modules . calls . peers ; 
 
 public interface CallBusCallback { 
 - 
 + 
 void onBusStarted ( String busId ) ; 
 + 
 + void onCallConnected ( ) ; 
 + 
 + void onCallEnabled ( ) ; 
 + 
 + void onBusStopped ( ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 index 3100d73 . . 090d9df 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 @ @ - 121 , 6 + 121 , 10 @ @ public class PeerCallActor extends ModuleActor { 
 d . kill ( ) ; 
 } 
 refs . clear ( ) ; 
 + if ( webRTCMediaStream ! = null ) { 
 + webRTCMediaStream . setEnabled ( false ) ; 
 + webRTCMediaStream . close ( ) ; 
 + } 
 } 
 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java 
 index d2d7a44 . . 6b6cd76 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java 
 @ @ - 47 , 7 + 47 , 6 @ @ public class PeerConnectionActor extends ModuleActor { 
 
 @ NotNull 
 private WebRTCPeerConnection peerConnection ; 
 - private SDPOptimizer sdpOptimizer ; 
 private boolean isReady = false ; 
 private boolean isReadyForCandidates = false ; 
 @ NotNull 
 @ @ - 62 , 7 + 61 , 6 @ @ public class PeerConnectionActor extends ModuleActor { 
 this . TAG = " PeerConnection " ; 
 this . callback = callback ; 
 this . stream = mediaStream ; 
 - this . sdpOptimizer = new SDPOptimizer ( selfSettings , theirSettings ) ; 
 } 
 
 @ Override 
 @ @ - 136 , 7 + 134 , 7 @ @ public class PeerConnectionActor extends ModuleActor { 
 / / 
 
 isReady = false ; 
 - peerConnection . createOffer ( ) . map ( OPTIMIZE _ OWN _ SDP ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 + peerConnection . createOffer ( ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 @ Override 
 public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 return peerConnection . setLocalDescription ( description ) ; 
 @ @ - 178 , 7 + 176 , 7 @ @ public class PeerConnectionActor extends ModuleActor { 
 public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 return peerConnection . createAnswer ( ) ; 
 } 
 - } ) . map ( OPTIMIZE _ OWN _ SDP ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 + } ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 @ Override 
 public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 return peerConnection . setLocalDescription ( description ) ; 
 @ @ - 265 , 28 + 263 , 6 @ @ public class PeerConnectionActor extends ModuleActor { 
 } 
 
 / / 
 - / / Configuration 
 - / / 
 - 
 - private Function < WebRTCSessionDescription , WebRTCSessionDescription > OPTIMIZE _ OWN _ SDP 
 - = new Function < WebRTCSessionDescription , WebRTCSessionDescription > ( ) { 
 - @ Override 
 - public WebRTCSessionDescription apply ( WebRTCSessionDescription description ) { 
 - return new WebRTCSessionDescription ( description . getType ( ) , 
 - sdpOptimizer . optimizeOwnSDP ( description . getSdp ( ) ) ) ; 
 - } 
 - } ; 
 - 
 - private Function < WebRTCSessionDescription , WebRTCSessionDescription > OPTIMIZE _ THEIR _ SDP 
 - = new Function < WebRTCSessionDescription , WebRTCSessionDescription > ( ) { 
 - @ Override 
 - public WebRTCSessionDescription apply ( WebRTCSessionDescription description ) { 
 - return new WebRTCSessionDescription ( description . getType ( ) , 
 - sdpOptimizer . optimizeTheirSDP ( description . getSdp ( ) ) ) ; 
 - } 
 - } ; 
 - 
 - / / 
 / / Messages 
 / / 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / SDPOptimizer . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / SDPOptimizer . java 
 deleted file mode 100644 
 index 38280f4 . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / SDPOptimizer . java 
 + + + / dev / null 
 @ @ - 1 , 42 + 0 , 0 @ @ 
 - package im . actor . core . modules . calls . peers ; 
 - 
 - public class SDPOptimizer { 
 - 
 - private final PeerSettings ownSettings ; 
 - private final PeerSettings theirSettings ; 
 - 
 - public SDPOptimizer ( PeerSettings ownSettings , PeerSettings theirSettings ) { 
 - this . ownSettings = ownSettings ; 
 - this . theirSettings = theirSettings ; 
 - } 
 - 
 - public String optimizeOwnSDP ( String sdp ) { 
 - / / SDPScheme sdpScheme = SDP . parse ( description . getSdp ( ) ) ; 
 - / / 
 - / / for ( SDPMedia m : sdpScheme . getMediaLevel ( ) ) { 
 - / / 
 - / / / / Disabling media streams 
 - / / / / m . setMode ( SDPMediaMode . INACTIVE ) ; 
 - / / 
 - / / / / Optimizing opus 
 - / / if ( " audio " . equals ( m . getType ( ) ) ) { 
 - / / for ( SDPCodec codec : m . getCodecs ( ) ) { 
 - / / if ( " opus " . equals ( codec . getName ( ) ) ) { 
 - / / codec . getFormat ( ) . put ( " maxcodedaudiobandwidth " , " 16000 " ) ; 
 - / / codec . getFormat ( ) . put ( " maxaveragebitrate " , " 20000 " ) ; 
 - / / codec . getFormat ( ) . put ( " stereo " , " 0 " ) ; 
 - / / codec . getFormat ( ) . put ( " useinbandfec " , " 1 " ) ; 
 - / / codec . getFormat ( ) . put ( " usedtx " , " 1 " ) ; 
 - / / } 
 - / / } 
 - / / } 
 - / / } 
 - / / 
 - / / return new WebRTCSessionDescription ( description . getType ( ) , sdpScheme . toSDP ( ) ) ; 
 - return sdp ; 
 - } 
 - 
 - public String optimizeTheirSDP ( String sdp ) { 
 - return sdp ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java 
 index 39d1bb1 . . 1d52dec 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java 
 @ @ - 6 , 7 + 6 , 11 @ @ import java . util . ArrayList ; 
 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . viewmodel . generics . BooleanValueModel ; 
 + import im . actor . core . viewmodel . generics . IntValueModel ; 
 + import im . actor . runtime . * ; 
 + import im . actor . runtime . actors . ActorTime ; 
 import im . actor . runtime . mvvm . ValueModel ; 
 + import im . actor . runtime . threading . CommonTimer ; 
 
 public class CallVM { 
 
 @ @ - 21 , 8 + 25 , 14 @ @ public class CallVM { 
 @ Property ( " nonatomic , readonly " ) 
 private final BooleanValueModel isMuted ; 
 @ Property ( " nonatomic , readonly " ) 
 + private long callStart ; 
 + @ Property ( " nonatomic , readonly " ) 
 + private long callEnd ; 
 + @ Property ( " nonatomic , readonly " ) 
 private final boolean isOutgoing ; 
 
 + private CommonTimer presenceTimer ; 
 + 
 public CallVM ( long callId , Peer peer , boolean isOutgoing , ArrayList < CallMember > initialMembers , CallState state ) { 
 this . callId = callId ; 
 this . peer = peer ; 
 @ @ - 30 , 6 + 40 , 7 @ @ public class CallVM { 
 this . state = new ValueModel < > ( " calls . " + callId + " . state " , state ) ; 
 this . members = new ValueModel < > ( " calls . " + callId + " . members " , new ArrayList < > ( initialMembers ) ) ; 
 this . isMuted = new BooleanValueModel ( " calls . " + callId + " . state " , false ) ; 
 + this . callStart = 0 ; 
 } 
 
 public boolean isOutgoing ( ) { 
 @ @ - 55 , 4 + 66 , 20 @ @ public class CallVM { 
 public ValueModel < ArrayList < CallMember > > getMembers ( ) { 
 return members ; 
 } 
 + 
 + public void setCallStart ( long callStart ) { 
 + this . callStart = callStart ; 
 + } 
 + 
 + public long getCallStart ( ) { 
 + return callStart ; 
 + } 
 + 
 + public long getCallEnd ( ) { 
 + return callEnd ; 
 + } 
 + 
 + public void setCallEnd ( long callEnd ) { 
 + this . callEnd = callEnd ; 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / CommonTimer . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / CommonTimer . java 
 index d76d8fe . . ac273fe 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / CommonTimer . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / CommonTimer . java 
 @ @ - 16 , 16 + 16 , 21 @ @ public class CommonTimer { 
 return new Actor ( ) ; 
 } 
 } ) ; 
 - private static final Scheduler COMMON _ SCHEDULER = new Scheduler ( COMMON _ TIMER _ ACTOR ) ; 
 + private static final Scheduler COMMON _ SCHEDULER = new Scheduler ( COMMON _ TIMER _ ACTOR ) ; 
 
 private final Runnable runnable ; 
 private Cancellable lastSchedule ; 
 + private boolean isDisposed ; 
 
 public CommonTimer ( Runnable runnable ) { 
 this . runnable = runnable ; 
 } 
 
 public void schedule ( long time ) { 
 + if ( isDisposed ) { 
 + return ; 
 + } 
 + 
 if ( lastSchedule ! = null ) { 
 lastSchedule . cancel ( ) ; 
 } 
 @ @ - 38 , 4 + 43 , 9 @ @ public class CommonTimer { 
 lastSchedule . cancel ( ) ; 
 } 
 } 
 + 
 + public void dispose ( ) { 
 + isDisposed = true ; 
 + cancel ( ) ; 
 + } 
 }
