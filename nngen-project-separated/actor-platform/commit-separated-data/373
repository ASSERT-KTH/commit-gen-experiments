BLEU SCORE: 0.07611541650494039

TEST MSG: feat ( core ) : Promisify HTTP and File API
GENERATED MSG: feat ( runtime ) : Adding server error handling with HTTP file upload / download

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaFileSystemRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaFileSystemRuntime . swift < nl > index 8530673 . . 2e98635 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaFileSystemRuntime . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaFileSystemRuntime . swift < nl > @ @ - 88 , 6 + 88 , 14 @ @ class CocoaFile : NSObject , ARFileSystemReference { < nl > return NSFileManager ( ) . fileExistsAtPath ( realPath ) ; < nl > } < nl > < nl > + func isInAppMemory ( ) - > jboolean { < nl > + return false < nl > + } < nl > + < nl > + func isInTempDirectory ( ) - > jboolean { < nl > + return false < nl > + } < nl > + < nl > func getSize ( ) - > jint { < nl > do { < nl > let attrs = try NSFileManager ( ) . attributesOfItemAtPath ( realPath ) < nl > @ @ - 97 , 29 + 105 , 28 @ @ class CocoaFile : NSObject , ARFileSystemReference { < nl > } < nl > } < nl > < nl > - func openWriteWithSize ( size : jint ) - > AROutputFile ! { < nl > + < nl > + func openRead ( ) - > ARPromise ! { < nl > + let fileHandle = NSFileHandle ( forReadingAtPath : realPath ) < nl > < nl > - let fileHandle = NSFileHandle ( forWritingAtPath : realPath ) < nl > - < nl > if ( fileHandle = = nil ) { < nl > - return nil < nl > + return ARPromise . failure ( JavaLangRuntimeException ( NSString : " Unable to open file " ) ) < nl > } < nl > < nl > - fileHandle ! . seekToFileOffset ( UInt64 ( size ) ) < nl > - fileHandle ! . seekToFileOffset ( 0 ) < nl > - < nl > - return CocoaOutputFile ( fileHandle : fileHandle ! ) < nl > + return ARPromise . success ( CocoaInputFile ( fileHandle : fileHandle ! ) ) < nl > } < nl > < nl > - func openRead ( ) - > ARInputFile ! { < nl > - < nl > - let fileHandle = NSFileHandle ( forReadingAtPath : realPath ) < nl > + func openWriteWithSize ( size : jint ) - > ARPromise ! { < nl > + let fileHandle = NSFileHandle ( forWritingAtPath : realPath ) < nl > < nl > if ( fileHandle = = nil ) { < nl > - return nil < nl > + return ARPromise . failure ( JavaLangRuntimeException ( NSString : " Unable to open file " ) ) < nl > } < nl > < nl > - return CocoaInputFile ( fileHandle : fileHandle ! ) < nl > + fileHandle ! . seekToFileOffset ( UInt64 ( size ) ) < nl > + fileHandle ! . seekToFileOffset ( 0 ) < nl > + < nl > + return ARPromise . success ( CocoaOutputFile ( fileHandle : fileHandle ! ) ) < nl > } < nl > } < nl > < nl > @ @ - 157 , 29 + 164 , 56 @ @ class CocoaInputFile : NSObject , ARInputFile { < nl > self . fileHandle = fileHandle < nl > } < nl > < nl > - func readWithOffset ( fileOffset : jint , withData data : IOSByteArray ! , withDataOffset offset : jint , withLength len : jint , withCallback callback : ARFileReadCallback ! ) { < nl > + func readWithOffset ( fileOffset : jint , withLength len : jint ) - > ARPromise ! { < nl > < nl > - dispatchBackground { < nl > - < nl > - self . fileHandle . seekToFileOffset ( UInt64 ( fileOffset ) ) < nl > - < nl > - let readed : NSData = self . fileHandle . readDataOfLength ( Int ( len ) ) < nl > - < nl > - var srcBuffer = UnsafeMutablePointer < UInt8 > ( readed . bytes ) < nl > - var destBuffer = UnsafeMutablePointer < UInt8 > ( data . buffer ( ) ) < nl > - let len = min ( Int ( len ) , Int ( readed . length ) ) < nl > - for _ in offset . . < offset + len { < nl > - destBuffer . memory = srcBuffer . memory < nl > - destBuffer = destBuffer . successor ( ) < nl > - srcBuffer = srcBuffer . successor ( ) < nl > + return ARPromise { ( resolver ) in < nl > + dispatchBackground { < nl > + self . fileHandle . seekToFileOffset ( UInt64 ( fileOffset ) ) < nl > + < nl > + let readed : NSData = self . fileHandle . readDataOfLength ( Int ( len ) ) < nl > + let data = IOSByteArray ( length : UInt ( len ) ) < nl > + var srcBuffer = UnsafeMutablePointer < UInt8 > ( readed . bytes ) < nl > + var destBuffer = UnsafeMutablePointer < UInt8 > ( data . buffer ( ) ) < nl > + let readCount = min ( Int ( len ) , Int ( readed . length ) ) < nl > + for _ in 0 . . < readCount { < nl > + destBuffer . memory = srcBuffer . memory < nl > + destBuffer = destBuffer . successor ( ) < nl > + srcBuffer = srcBuffer . successor ( ) < nl > + } < nl > + < nl > + resolver . result ( ARFilePart ( offset : fileOffset , withLength : len , withContents : data ) ) < nl > } < nl > - < nl > - callback . onFileReadWithOffset ( fileOffset , withData : data , withDataOffset : offset , withLength : jint ( len ) ) < nl > } < nl > } < nl > < nl > - func close ( ) - > Bool { < nl > + func close ( ) - > ARPromise ! { < nl > self . fileHandle . closeFile ( ) < nl > - return true < nl > + return ARPromise . success ( nil ) < nl > } < nl > + < nl > + / / func readWithOffset ( fileOffset : jint , withData data : IOSByteArray ! , withDataOffset offset : jint , withLength len : jint , withCallback callback : ARFileReadCallback ! ) { < nl > + / / < nl > + / / dispatchBackground { < nl > + / / < nl > + / / self . fileHandle . seekToFileOffset ( UInt64 ( fileOffset ) ) < nl > + / / < nl > + / / let readed : NSData = self . fileHandle . readDataOfLength ( Int ( len ) ) < nl > + / / < nl > + / / var srcBuffer = UnsafeMutablePointer < UInt8 > ( readed . bytes ) < nl > + / / var destBuffer = UnsafeMutablePointer < UInt8 > ( data . buffer ( ) ) < nl > + / / let len = min ( Int ( len ) , Int ( readed . length ) ) < nl > + / / for _ in offset . . < offset + len { < nl > + / / destBuffer . memory = srcBuffer . memory < nl > + / / destBuffer = destBuffer . successor ( ) < nl > + / / srcBuffer = srcBuffer . successor ( ) < nl > + / / } < nl > + / / < nl > + / / callback . onFileReadWithOffset ( fileOffset , withData : data , withDataOffset : offset , withLength : jint ( len ) ) < nl > + / / } < nl > + / / } < nl > + < nl > + / / func close ( ) - > Bool { < nl > + / / self . fileHandle . closeFile ( ) < nl > + / / return true < nl > + / / } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaHttpRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaHttpRuntime . swift < nl > index 0b61a87 . . d76bc56 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaHttpRuntime . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaHttpRuntime . swift < nl > @ @ - 8 , 45 + 8 , 51 @ @ class CocoaHttpRuntime : NSObject , ARHttpRuntime { < nl > < nl > let queue : NSOperationQueue = NSOperationQueue ( ) < nl > < nl > - func getMethodWithUrl ( url : String ! , withStartOffset startOffset : jint , withSize size : jint , withTotalSize totalSize : jint , withCallback callback : ARFileDownloadCallback ! ) { < nl > - let header = " bytes = \ ( startOffset ) - \ ( min ( startOffset + size , totalSize ) ) " < nl > - let request = NSMutableURLRequest ( URL : NSURL ( string : url ) ! ) < nl > - request . HTTPShouldHandleCookies = false < nl > - request . cachePolicy = NSURLRequestCachePolicy . ReloadIgnoringLocalAndRemoteCacheData < nl > - request . setValue ( header , forHTTPHeaderField : " Range " ) < nl > - request . HTTPMethod = " GET " < nl > + func getMethodWithUrl ( url : String ! , withStartOffset startOffset : jint , withSize size : jint , withTotalSize totalSize : jint ) - > ARPromise ! { < nl > < nl > - NSURLConnection . sendAsynchronousRequest ( request , queue : queue , completionHandler : { ( response : NSURLResponse ? , data : NSData ? , error : NSError ? ) - > Void in < nl > - if let respHttp = response as ? NSHTTPURLResponse { < nl > - if ( respHttp . statusCode > = 200 & & respHttp . statusCode < 300 ) { < nl > - callback . onDownloadedWithByteArray ( data ! . toJavaBytes ( ) ) < nl > + return ARPromise { ( resolver ) in < nl > + < nl > + let header = " bytes = \ ( startOffset ) - \ ( min ( startOffset + size , totalSize ) ) " < nl > + let request = NSMutableURLRequest ( URL : NSURL ( string : url ) ! ) < nl > + request . HTTPShouldHandleCookies = false < nl > + request . cachePolicy = NSURLRequestCachePolicy . ReloadIgnoringLocalAndRemoteCacheData < nl > + request . setValue ( header , forHTTPHeaderField : " Range " ) < nl > + request . HTTPMethod = " GET " < nl > + < nl > + NSURLConnection . sendAsynchronousRequest ( request , queue : self . queue , completionHandler : { ( response : NSURLResponse ? , data : NSData ? , error : NSError ? ) - > Void in < nl > + if let respHttp = response as ? NSHTTPURLResponse { < nl > + if ( respHttp . statusCode > = 200 & & respHttp . statusCode < 300 ) { < nl > + resolver . result ( ARHTTPResponse ( code : jint ( respHttp . statusCode ) , withContent : data ! . toJavaBytes ( ) ) ) < nl > + } else { < nl > + resolver . error ( ARHTTPError ( int : jint ( respHttp . statusCode ) ) ) < nl > + } < nl > } else { < nl > - callback . onDownloadFailureWithError ( jint ( respHttp . statusCode ) , withRetryIn : 0 ) < nl > + resolver . error ( ARHTTPError ( int : 0 ) ) < nl > } < nl > - } else { < nl > - callback . onDownloadFailureWithError ( 0 , withRetryIn : 0 ) < nl > - } < nl > - } ) < nl > + } ) < nl > + } < nl > } < nl > < nl > - func putMethodWithUrl ( url : String ! , withContents contents : IOSByteArray ! , withCallback callback : ARFileUploadCallback ! ) { < nl > - let request = NSMutableURLRequest ( URL : NSURL ( string : url ) ! ) < nl > - request . HTTPShouldHandleCookies = false < nl > - request . cachePolicy = NSURLRequestCachePolicy . ReloadIgnoringLocalAndRemoteCacheData < nl > - request . HTTPMethod = " PUT " < nl > - request . HTTPBody = contents . toNSData ( ) < nl > - request . setValue ( " application / octet - stream " , forHTTPHeaderField : " Content - Type " ) < nl > - < nl > - NSURLConnection . sendAsynchronousRequest ( request , queue : queue , completionHandler : { ( response : NSURLResponse ? , data : NSData ? , error : NSError ? ) - > Void in < nl > - if let respHttp = response as ? NSHTTPURLResponse { < nl > - if ( respHttp . statusCode > = 200 & & respHttp . statusCode < 300 ) { < nl > - callback . onUploaded ( ) < nl > + func putMethodWithUrl ( url : String ! , withContents contents : IOSByteArray ! ) - > ARPromise ! { < nl > + return ARPromise { ( resolver ) in < nl > + let request = NSMutableURLRequest ( URL : NSURL ( string : url ) ! ) < nl > + request . HTTPShouldHandleCookies = false < nl > + request . cachePolicy = NSURLRequestCachePolicy . ReloadIgnoringLocalAndRemoteCacheData < nl > + request . HTTPMethod = " PUT " < nl > + request . HTTPBody = contents . toNSData ( ) < nl > + request . setValue ( " application / octet - stream " , forHTTPHeaderField : " Content - Type " ) < nl > + < nl > + NSURLConnection . sendAsynchronousRequest ( request , queue : self . queue , completionHandler : { ( response : NSURLResponse ? , data : NSData ? , error : NSError ? ) - > Void in < nl > + if let respHttp = response as ? NSHTTPURLResponse { < nl > + if ( respHttp . statusCode > = 200 & & respHttp . statusCode < 300 ) { < nl > + resolver . result ( ARHTTPResponse ( code : jint ( respHttp . statusCode ) , withContent : nil ) ) < nl > + } else { < nl > + resolver . error ( ARHTTPError ( int : jint ( respHttp . statusCode ) ) ) < nl > + } < nl > } else { < nl > - callback . onUploadFailureWithError ( jint ( respHttp . statusCode ) , withRetryIn : 0 ) < nl > + resolver . error ( ARHTTPError ( int : 0 ) ) < nl > } < nl > - } else { < nl > - callback . onUploadFailureWithError ( 0 , withRetryIn : 0 ) < nl > - } < nl > - } ) < nl > + } ) < nl > + } < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / file / DownloadTask . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / file / DownloadTask . java < nl > index 03ab017 . . 8758cf5 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / file / DownloadTask . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / file / DownloadTask . java < nl > @ @ - 67 , 16 + 67 , 15 @ @ public class DownloadTask extends ModuleActor { < nl > return ; < nl > } < nl > < nl > - outputFile = destReference . openWrite ( fileReference . getFileSize ( ) ) ; < nl > - if ( outputFile = = null ) { < nl > + destReference . openWrite ( fileReference . getFileSize ( ) ) . then ( r - > { < nl > + outputFile = r ; < nl > + requestUrl ( ) ; < nl > + } ) . failure ( e - > { < nl > reportError ( ) ; < nl > if ( LOG ) { < nl > Log . d ( TAG , " Unable to write wile " ) ; < nl > } < nl > - return ; < nl > - } < nl > - < nl > - requestUrl ( ) ; < nl > + } ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 206 , 10 + 205 , 7 @ @ public class DownloadTask extends ModuleActor { < nl > & & ( ( HTTPError ) e ) . getErrorCode ( ) < 600 ) < nl > | | ( ( HTTPError ) e ) . getErrorCode ( ) = = 0 ) ) { < nl > / / Server on unknown error < nl > - int retryInSecs = ( ( HTTPError ) e ) . getRetryInSecs ( ) ; < nl > - if ( retryInSecs < = 0 ) { < nl > - retryInSecs = DEFAULT _ RETRY ; < nl > - } < nl > + int retryInSecs = DEFAULT _ RETRY ; < nl > < nl > if ( LOG ) { < nl > Log . w ( TAG , " Download part # " + blockIndex + " failure # " + ( ( HTTPError ) e ) . getErrorCode ( ) + " trying again in " + retryInSecs + " sec , attempt # " + ( attempt + 1 ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / file / UploadTask . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / file / UploadTask . java < nl > index 7e35af0 . . 3880c5a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / file / UploadTask . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / file / UploadTask . java < nl > @ @ - 24 , 9 + 24 , 13 @ @ import im . actor . runtime . files . FileSystemReference ; < nl > import im . actor . runtime . files . InputFile ; < nl > import im . actor . runtime . files . OutputFile ; < nl > import im . actor . runtime . http . HTTPError ; < nl > + import im . actor . runtime . http . HTTPResponse ; < nl > < nl > public class UploadTask extends ModuleActor { < nl > < nl > + / / j2objc workaround < nl > + private static final HTTPResponse DUMB = null ; < nl > + < nl > private static final int SIM _ BLOCKS _ COUNT = 4 ; < nl > private static final int NOTIFY _ THROTTLE = 1000 ; < nl > private static final int DEFAULT _ RETRY = 15 ; < nl > @ @ - 268 , 10 + 272 , 7 @ @ public class UploadTask extends ModuleActor { < nl > if ( ( httpError . getErrorCode ( ) > = 500 & & httpError . getErrorCode ( ) < 600 ) | | httpError . getErrorCode ( ) = = 0 ) { < nl > / / Is Server Error or unknown error < nl > < nl > - int retryInSecs = httpError . getRetryInSecs ( ) ; < nl > - if ( retryInSecs < = 0 ) { < nl > - retryInSecs = DEFAULT _ RETRY ; < nl > - } < nl > + int retryInSecs = DEFAULT _ RETRY ; < nl > < nl > if ( LOG ) { < nl > Log . w ( TAG , " Block # " + blockIndex + " upload error # " + httpError . getErrorCode ( ) + " trying again in " + retryInSecs + " sec , attempt # " + ( attempt + 1 ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java < nl > index b14dafb . . a36c3b8 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java < nl > @ @ - 121 , 7 + 121 , 7 @ @ public class AndroidHttpProvider implements HttpRuntime { < nl > Log . d ( TAG , " Downloading part error : " + request . toString ( ) ) ; < nl > e . printStackTrace ( ) ; < nl > / / TODO : Better error ? < nl > - resolver . error ( new HTTPError ( 0 , 0 ) ) ; < nl > + resolver . error ( new HTTPError ( 0 ) ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 130 , 7 + 130 , 7 @ @ public class AndroidHttpProvider implements HttpRuntime { < nl > if ( response . code ( ) > = 200 & & response . code ( ) < 300 ) { < nl > resolver . result ( new HTTPResponse ( response . code ( ) , response . body ( ) . bytes ( ) ) ) ; < nl > } else { < nl > - resolver . error ( new HTTPError ( response . code ( ) , 0 ) ) ; < nl > + resolver . error ( new HTTPError ( response . code ( ) ) ) ; < nl > } < nl > } < nl > } ) ; < nl > @ @ - 151 , 7 + 151 , 7 @ @ public class AndroidHttpProvider implements HttpRuntime { < nl > Log . d ( TAG , " Uploading part error : " + request . toString ( ) ) ; < nl > e . printStackTrace ( ) ; < nl > / / TODO : Better error ? < nl > - resolver . error ( new HTTPError ( 0 , 0 ) ) ; < nl > + resolver . error ( new HTTPError ( 0 ) ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 160 , 7 + 160 , 7 @ @ public class AndroidHttpProvider implements HttpRuntime { < nl > if ( response . code ( ) > = 200 & & response . code ( ) < 300 ) { < nl > resolver . result ( new HTTPResponse ( response . code ( ) , null ) ) ; < nl > } else { < nl > - resolver . error ( new HTTPError ( response . code ( ) , 0 ) ) ; < nl > + resolver . error ( new HTTPError ( response . code ( ) ) ) ; < nl > } < nl > } < nl > } ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsHttpProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsHttpProvider . java < nl > index 12483a8 . . 0ddcd2b 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsHttpProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsHttpProvider . java < nl > @ @ - 31 , 7 + 31 , 7 @ @ public class JsHttpProvider implements HttpRuntime { < nl > if ( request1 . getStatus ( ) > = 200 & & request1 . getStatus ( ) < 300 ) { < nl > resolver . result ( new HTTPResponse ( request1 . getStatus ( ) , null ) ) ; < nl > } else { < nl > - resolver . error ( new HTTPError ( request1 . getStatus ( ) , 0 ) ) ; < nl > + resolver . error ( new HTTPError ( request1 . getStatus ( ) ) ) ; < nl > } < nl > } < nl > } ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / files / FilePart . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / files / FilePart . java < nl > index 314e5f2 . . dedc467 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / files / FilePart . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / files / FilePart . java < nl > @ @ - 1 , 5 + 1 , 6 @ @ < nl > package im . actor . runtime . files ; < nl > < nl > + import com . google . j2objc . annotations . ObjectiveCName ; < nl > import com . google . j2objc . annotations . Property ; < nl > < nl > import org . jetbrains . annotations . NotNull ; < nl > @ @ - 14 , 6 + 15 , 7 @ @ public class FilePart { < nl > @ Property ( " readonly , nonatomic " ) < nl > private byte [ ] contents ; < nl > < nl > + @ ObjectiveCName ( " initWithOffset : withLength : withContents : " ) < nl > public FilePart ( int offset , int partLength , @ NotNull byte [ ] contents ) { < nl > this . offset = offset ; < nl > this . partLength = partLength ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / HTTPError . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / HTTPError . java < nl > index 51dd8dd . . 93ad1a4 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / HTTPError . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / HTTPError . java < nl > @ @ - 3 , 18 + 3 , 12 @ @ package im . actor . runtime . http ; < nl > public class HTTPError extends Exception { < nl > < nl > private int errorCode ; < nl > - private int retryInSecs ; < nl > < nl > - public HTTPError ( int errorCode , int retryInSecs ) { < nl > + public HTTPError ( int errorCode ) { < nl > this . errorCode = errorCode ; < nl > - this . retryInSecs = retryInSecs ; < nl > } < nl > < nl > public int getErrorCode ( ) { < nl > return errorCode ; < nl > } < nl > - < nl > - public int getRetryInSecs ( ) { < nl > - return retryInSecs ; < nl > - } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / HTTPResponse . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / HTTPResponse . java < nl > index fbb28b2 . . bada626 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / HTTPResponse . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / HTTPResponse . java < nl > @ @ - 1 , 10 + 1 , 17 @ @ < nl > package im . actor . runtime . http ; < nl > < nl > + import com . google . j2objc . annotations . ObjectiveCName ; < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > public class HTTPResponse { < nl > - < nl > - private int code ; < nl > - private byte [ ] content ; < nl > < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final int code ; < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final byte [ ] content ; < nl > + < nl > + @ ObjectiveCName ( " initWithCode : withContent : " ) < nl > public HTTPResponse ( int code , byte [ ] content ) { < nl > this . code = code ; < nl > this . content = content ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaHttpRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaHttpRuntime . swift < nl > index 066a55e . . ade1365 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaHttpRuntime . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaHttpRuntime . swift < nl > @ @ - 17 , 10 + 17 , 14 @ @ class CocoaHttpRuntime : NSObject , ARHttpRuntime { < nl > request . HTTPMethod = " GET " < nl > < nl > NSURLConnection . sendAsynchronousRequest ( request , queue : queue , completionHandler : { ( response : NSURLResponse ? , data : NSData ? , error : NSError ? ) - > Void in < nl > - if ( error ! = nil ) { < nl > - callback . onDownloadFailure ( ) < nl > + if let respHttp = response as ? NSHTTPURLResponse { < nl > + if ( respHttp . statusCode > = 200 & & respHttp . statusCode < 300 ) { < nl > + callback . onDownloadedWithByteArray ( data ! . toJavaBytes ( ) ) < nl > + } else { < nl > + callback . onDownloadFailureWithError ( jint ( respHttp . statusCode ) , withRetryIn : 0 ) < nl > + } < nl > } else { < nl > - callback . onDownloadedWithByteArray ( data ! . toJavaBytes ( ) ) < nl > + callback . onDownloadFailureWithError ( 0 , withRetryIn : 0 ) < nl > } < nl > } ) < nl > } < nl > @ @ - 34 , 10 + 38 , 14 @ @ class CocoaHttpRuntime : NSObject , ARHttpRuntime { < nl > request . setValue ( " application / octet - stream " , forHTTPHeaderField : " Content - Type " ) < nl > < nl > NSURLConnection . sendAsynchronousRequest ( request , queue : queue , completionHandler : { ( response : NSURLResponse ? , data : NSData ? , error : NSError ? ) - > Void in < nl > - if ( error ! = nil ) { < nl > - callback . onUploadFailure ( ) < nl > + if let respHttp = response as ? NSHTTPURLResponse { < nl > + if ( respHttp . statusCode > = 200 & & respHttp . statusCode < 300 ) { < nl > + callback . onUploaded ( ) < nl > + } else { < nl > + callback . onUploadFailureWithError ( jint ( respHttp . statusCode ) , withRetryIn : 0 ) < nl > + } < nl > } else { < nl > - callback . onUploaded ( ) < nl > + callback . onUploadFailureWithError ( 0 , withRetryIn : 0 ) < nl > } < nl > } ) < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadTask . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadTask . java < nl > index 8648f2d . . cb6825d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadTask . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadTask . java < nl > @ @ - 24 , 6 + 24 , 7 @ @ public class DownloadTask extends ModuleActor { < nl > < nl > private static final int SIM _ BLOCKS _ COUNT = 4 ; < nl > private static final int NOTIFY _ THROTTLE = 1000 ; < nl > + private static final int DEFAULT _ RETRY = 15 ; < nl > < nl > private final String TAG ; < nl > private final boolean LOG ; < nl > @ @ - 85 , 6 + 86 , 9 @ @ public class DownloadTask extends ModuleActor { < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof NotifyProgress ) { < nl > performReportProgress ( ) ; < nl > + } else if ( message instanceof Retry ) { < nl > + Retry retry = ( Retry ) message ; < nl > + retryPart ( retry . getBlockIndex ( ) , retry . getFileOffset ( ) , retry . getAttempt ( ) ) ; < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > @ @ - 172 , 7 + 176 , 7 @ @ public class DownloadTask extends ModuleActor { < nl > Log . d ( TAG , " Starting part # " + blockIndex + " download " ) ; < nl > } < nl > < nl > - downloadPart ( blockIndex , offset ) ; < nl > + downloadPart ( blockIndex , offset , 0 ) ; < nl > < nl > checkQueue ( ) ; < nl > } else { < nl > @ @ - 182 , 7 + 186 , 19 @ @ public class DownloadTask extends ModuleActor { < nl > } < nl > } < nl > < nl > - private void downloadPart ( final int blockIndex , final int fileOffset ) { < nl > + private void retryPart ( int blockIndex , int fileOffset , int attempt ) { < nl > + if ( isCompleted ) { < nl > + return ; < nl > + } < nl > + < nl > + if ( LOG ) { < nl > + Log . d ( TAG , " Trying again part # " + blockIndex + " download " ) ; < nl > + } < nl > + < nl > + downloadPart ( blockIndex , fileOffset , attempt ) ; < nl > + } < nl > + < nl > + private void downloadPart ( final int blockIndex , final int fileOffset , final int attempt ) { < nl > HTTP . getMethod ( fileUrl , fileOffset , blockSize , fileReference . getFileSize ( ) , new FileDownloadCallback ( ) { < nl > @ Override < nl > public void onDownloaded ( final byte [ ] data ) { < nl > @ @ - 205 , 16 + 221 , 30 @ @ public class DownloadTask extends ModuleActor { < nl > } < nl > < nl > @ Override < nl > - public void onDownloadFailure ( ) { < nl > - self ( ) . send ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - if ( LOG ) { < nl > - Log . d ( TAG , " Download part # " + blockIndex + " failure " ) ; < nl > - } < nl > - reportError ( ) ; < nl > + public void onDownloadFailure ( int error , int retryInSecs ) { < nl > + if ( ( error > = 500 & & error < 600 ) | | error = = 0 ) { < nl > + / / Server on unknown error < nl > + < nl > + if ( retryInSecs < = 0 ) { < nl > + retryInSecs = DEFAULT _ RETRY ; < nl > } < nl > - } ) ; < nl > + < nl > + if ( LOG ) { < nl > + Log . w ( TAG , " Download part # " + blockIndex + " failure # " + error + " trying again in " + retryInSecs + " sec , attempt # " + ( attempt + 1 ) ) ; < nl > + } < nl > + < nl > + self ( ) . send ( new Retry ( blockIndex , fileOffset , attempt + 1 ) ) ; < nl > + } else { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + if ( LOG ) { < nl > + Log . d ( TAG , " Download part # " + blockIndex + " failure " ) ; < nl > + } < nl > + reportError ( ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > } < nl > } ) ; < nl > } < nl > @ @ - 263 , 4 + 293 , 29 @ @ public class DownloadTask extends ModuleActor { < nl > private class NotifyProgress { < nl > < nl > } < nl > + < nl > + private class Retry { < nl > + < nl > + private int blockIndex ; < nl > + private int fileOffset ; < nl > + private int attempt ; < nl > + < nl > + public Retry ( int blockIndex , int fileOffset , int attempt ) { < nl > + this . blockIndex = blockIndex ; < nl > + this . fileOffset = fileOffset ; < nl > + this . attempt = attempt ; < nl > + } < nl > + < nl > + public int getBlockIndex ( ) { < nl > + return blockIndex ; < nl > + } < nl > + < nl > + public int getFileOffset ( ) { < nl > + return fileOffset ; < nl > + } < nl > + < nl > + public int getAttempt ( ) { < nl > + return attempt ; < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / UploadTask . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / UploadTask . java < nl > index efa37e9 . . c2cb92b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / UploadTask . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / UploadTask . java < nl > @ @ - 30 , 6 + 30 , 7 @ @ public class UploadTask extends ModuleActor { < nl > < nl > private static final int SIM _ BLOCKS _ COUNT = 4 ; < nl > private static final int NOTIFY _ THROTTLE = 1000 ; < nl > + private static final int DEFAULT _ RETRY = 15 ; < nl > < nl > private final String TAG ; < nl > private final boolean LOG ; < nl > @ @ - 125 , 6 + 126 , 9 @ @ public class UploadTask extends ModuleActor { < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof NotifyProgress ) { < nl > performReportProgress ( ) ; < nl > + } else if ( message instanceof Retry ) { < nl > + Retry retry = ( Retry ) message ; < nl > + retryPart ( retry . getBlockIndex ( ) , retry . getData ( ) , retry . getAttempt ( ) ) ; < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > @ @ - 257 , 7 + 261 , 7 @ @ public class UploadTask extends ModuleActor { < nl > } < nl > < nl > uploadCount + + ; < nl > - uploadPart ( blockIndex , fileOffset , data ) ; < nl > + uploadPart ( blockIndex , data , 0 ) ; < nl > checkQueue ( ) ; < nl > } < nl > } ) ; < nl > @ @ - 281 , 7 + 285 , 17 @ @ public class UploadTask extends ModuleActor { < nl > } ) ; < nl > } < nl > < nl > - private void uploadPart ( final int blockIndex , final int offset , final byte [ ] data ) { < nl > + private void retryPart ( int blockIndex , byte [ ] data , int attempt ) { < nl > + if ( isCompleted ) { < nl > + return ; < nl > + } < nl > + if ( LOG ) { < nl > + Log . d ( TAG , " Retrying block upload # " + blockIndex ) ; < nl > + } < nl > + uploadPart ( blockIndex , data , attempt ) ; < nl > + } < nl > + < nl > + private void uploadPart ( final int blockIndex , final byte [ ] data , final int attempt ) { < nl > request ( new RequestGetFileUploadPartUrl ( blockIndex , blockSize , uploadConfig ) , < nl > new RpcCallback < ResponseGetFileUploadPartUrl > ( ) { < nl > @ Override < nl > @ @ - 306 , 16 + 320 , 31 @ @ public class UploadTask extends ModuleActor { < nl > } < nl > < nl > @ Override < nl > - public void onUploadFailure ( ) { < nl > - self ( ) . send ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - if ( LOG ) { < nl > - Log . w ( TAG , " Block # " + blockIndex + " upload failure " ) ; < nl > - } < nl > - reportError ( ) ; < nl > + public void onUploadFailure ( int error , int retryInSecs ) { < nl > + if ( ( error > = 500 & & error < 600 ) | | error = = 0 ) { < nl > + / / Is Server Error or unknown error < nl > + < nl > + if ( retryInSecs < = 0 ) { < nl > + retryInSecs = DEFAULT _ RETRY ; < nl > } < nl > - } ) ; < nl > + < nl > + if ( LOG ) { < nl > + Log . w ( TAG , " Block # " + blockIndex + " upload error # " + error + " trying again in " + retryInSecs + " sec , attempt # " + ( attempt + 1 ) ) ; < nl > + } < nl > + < nl > + self ( ) . send ( new Retry ( blockIndex , data , attempt + 1 ) , retryInSecs * 1000L ) ; < nl > + } else { < nl > + / / User Error < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + if ( LOG ) { < nl > + Log . w ( TAG , " Block # " + blockIndex + " upload failure " ) ; < nl > + } < nl > + reportError ( ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > } < nl > } ) ; < nl > } < nl > @ @ - 377 , 4 + 406 , 29 @ @ public class UploadTask extends ModuleActor { < nl > private class NotifyProgress { < nl > < nl > } < nl > + < nl > + private class Retry { < nl > + < nl > + private int blockIndex ; < nl > + private byte [ ] data ; < nl > + private int attempt ; < nl > + < nl > + public Retry ( int blockIndex , byte [ ] data , int attempt ) { < nl > + this . blockIndex = blockIndex ; < nl > + this . data = data ; < nl > + this . attempt = attempt ; < nl > + } < nl > + < nl > + public int getBlockIndex ( ) { < nl > + return blockIndex ; < nl > + } < nl > + < nl > + public byte [ ] getData ( ) { < nl > + return data ; < nl > + } < nl > + < nl > + public int getAttempt ( ) { < nl > + return attempt ; < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java < nl > index 7d7c3ad . . a10b4a8 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java < nl > @ @ - 38 , 16 + 38 , 16 @ @ public class AndroidHttpProvider implements HttpRuntime { < nl > public void onFailure ( Request request , IOException e ) { < nl > Log . d ( TAG , " Downloading part error : " + request . toString ( ) ) ; < nl > e . printStackTrace ( ) ; < nl > - callback . onDownloadFailure ( ) ; < nl > + callback . onDownloadFailure ( 0 , 0 ) ; < nl > } < nl > < nl > @ Override < nl > public void onResponse ( Response response ) throws IOException { < nl > Log . d ( TAG , " Downloading part response : " + request . toString ( ) + " - > " + response . toString ( ) ) ; < nl > - if ( response . code ( ) = = 206 ) { < nl > + if ( response . code ( ) > = 200 & & response . code ( ) < 300 ) { < nl > callback . onDownloaded ( response . body ( ) . bytes ( ) ) ; < nl > } else { < nl > - callback . onDownloadFailure ( ) ; < nl > + callback . onDownloadFailure ( response . code ( ) , 0 ) ; < nl > } < nl > } < nl > } ) ; < nl > @ @ - 65 , 16 + 65 , 16 @ @ public class AndroidHttpProvider implements HttpRuntime { < nl > public void onFailure ( Request request , IOException e ) { < nl > Log . d ( TAG , " Uploading part error : " + request . toString ( ) ) ; < nl > e . printStackTrace ( ) ; < nl > - callback . onUploadFailure ( ) ; < nl > + callback . onUploadFailure ( 0 , 0 ) ; < nl > } < nl > < nl > @ Override < nl > public void onResponse ( Response response ) throws IOException { < nl > Log . d ( TAG , " Upload part response : " + request . toString ( ) + " - > " + response . toString ( ) ) ; < nl > - if ( response . code ( ) = = 200 ) { < nl > + if ( response . code ( ) > = 200 & & response . code ( ) < 300 ) { < nl > callback . onUploaded ( ) ; < nl > } else { < nl > - callback . onUploadFailure ( ) ; < nl > + callback . onUploadFailure ( response . code ( ) , 0 ) ; < nl > } < nl > } < nl > } ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsHttpProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsHttpProvider . java < nl > index 7fcedeb . . 231eae2 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsHttpProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsHttpProvider . java < nl > @ @ - 29 , 11 + 29 , 10 @ @ public class JsHttpProvider implements HttpRuntime { < nl > @ Override < nl > public void onStateChanged ( JsHttpRequest request ) { < nl > if ( request . getReadyState ( ) = = 4 ) { < nl > - if ( request . getStatus ( ) = = 200 ) { < nl > - < nl > + if ( request . getStatus ( ) > = 200 & & request . getStatus ( ) < 300 ) { < nl > callback . onUploaded ( ) ; < nl > } else { < nl > - callback . onUploadFailure ( ) ; < nl > + callback . onUploadFailure ( request . getStatus ( ) , 0 ) ; < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / FileDownloadCallback . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / FileDownloadCallback . java < nl > index cefe44e . . 2236c3a 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / FileDownloadCallback . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / FileDownloadCallback . java < nl > @ @ - 4 , 8 + 4 , 11 @ @ < nl > < nl > package im . actor . runtime . http ; < nl > < nl > + import com . google . j2objc . annotations . ObjectiveCName ; < nl > + < nl > public interface FileDownloadCallback { < nl > void onDownloaded ( byte [ ] data ) ; < nl > < nl > - void onDownloadFailure ( ) ; < nl > + @ ObjectiveCName ( " onDownloadFailureWithError : withRetryIn : " ) < nl > + void onDownloadFailure ( int error , int retryInSecs ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / FileUploadCallback . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / FileUploadCallback . java < nl > index c2bfd3a . . bc89df7 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / FileUploadCallback . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / FileUploadCallback . java < nl > @ @ - 4 , 8 + 4 , 11 @ @ < nl > < nl > package im . actor . runtime . http ; < nl > < nl > + import com . google . j2objc . annotations . ObjectiveCName ; < nl > + < nl > public interface FileUploadCallback { < nl > void onUploaded ( ) ; < nl > < nl > - void onUploadFailure ( ) ; < nl > + @ ObjectiveCName ( " onUploadFailureWithError : withRetryIn : " ) < nl > + void onUploadFailure ( int error , int retryInSecs ) ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaFileSystemRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaFileSystemRuntime . swift 
 index 8530673 . . 2e98635 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaFileSystemRuntime . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaFileSystemRuntime . swift 
 @ @ - 88 , 6 + 88 , 14 @ @ class CocoaFile : NSObject , ARFileSystemReference { 
 return NSFileManager ( ) . fileExistsAtPath ( realPath ) ; 
 } 
 
 + func isInAppMemory ( ) - > jboolean { 
 + return false 
 + } 
 + 
 + func isInTempDirectory ( ) - > jboolean { 
 + return false 
 + } 
 + 
 func getSize ( ) - > jint { 
 do { 
 let attrs = try NSFileManager ( ) . attributesOfItemAtPath ( realPath ) 
 @ @ - 97 , 29 + 105 , 28 @ @ class CocoaFile : NSObject , ARFileSystemReference { 
 } 
 } 
 
 - func openWriteWithSize ( size : jint ) - > AROutputFile ! { 
 + 
 + func openRead ( ) - > ARPromise ! { 
 + let fileHandle = NSFileHandle ( forReadingAtPath : realPath ) 
 
 - let fileHandle = NSFileHandle ( forWritingAtPath : realPath ) 
 - 
 if ( fileHandle = = nil ) { 
 - return nil 
 + return ARPromise . failure ( JavaLangRuntimeException ( NSString : " Unable to open file " ) ) 
 } 
 
 - fileHandle ! . seekToFileOffset ( UInt64 ( size ) ) 
 - fileHandle ! . seekToFileOffset ( 0 ) 
 - 
 - return CocoaOutputFile ( fileHandle : fileHandle ! ) 
 + return ARPromise . success ( CocoaInputFile ( fileHandle : fileHandle ! ) ) 
 } 
 
 - func openRead ( ) - > ARInputFile ! { 
 - 
 - let fileHandle = NSFileHandle ( forReadingAtPath : realPath ) 
 + func openWriteWithSize ( size : jint ) - > ARPromise ! { 
 + let fileHandle = NSFileHandle ( forWritingAtPath : realPath ) 
 
 if ( fileHandle = = nil ) { 
 - return nil 
 + return ARPromise . failure ( JavaLangRuntimeException ( NSString : " Unable to open file " ) ) 
 } 
 
 - return CocoaInputFile ( fileHandle : fileHandle ! ) 
 + fileHandle ! . seekToFileOffset ( UInt64 ( size ) ) 
 + fileHandle ! . seekToFileOffset ( 0 ) 
 + 
 + return ARPromise . success ( CocoaOutputFile ( fileHandle : fileHandle ! ) ) 
 } 
 } 
 
 @ @ - 157 , 29 + 164 , 56 @ @ class CocoaInputFile : NSObject , ARInputFile { 
 self . fileHandle = fileHandle 
 } 
 
 - func readWithOffset ( fileOffset : jint , withData data : IOSByteArray ! , withDataOffset offset : jint , withLength len : jint , withCallback callback : ARFileReadCallback ! ) { 
 + func readWithOffset ( fileOffset : jint , withLength len : jint ) - > ARPromise ! { 
 
 - dispatchBackground { 
 - 
 - self . fileHandle . seekToFileOffset ( UInt64 ( fileOffset ) ) 
 - 
 - let readed : NSData = self . fileHandle . readDataOfLength ( Int ( len ) ) 
 - 
 - var srcBuffer = UnsafeMutablePointer < UInt8 > ( readed . bytes ) 
 - var destBuffer = UnsafeMutablePointer < UInt8 > ( data . buffer ( ) ) 
 - let len = min ( Int ( len ) , Int ( readed . length ) ) 
 - for _ in offset . . < offset + len { 
 - destBuffer . memory = srcBuffer . memory 
 - destBuffer = destBuffer . successor ( ) 
 - srcBuffer = srcBuffer . successor ( ) 
 + return ARPromise { ( resolver ) in 
 + dispatchBackground { 
 + self . fileHandle . seekToFileOffset ( UInt64 ( fileOffset ) ) 
 + 
 + let readed : NSData = self . fileHandle . readDataOfLength ( Int ( len ) ) 
 + let data = IOSByteArray ( length : UInt ( len ) ) 
 + var srcBuffer = UnsafeMutablePointer < UInt8 > ( readed . bytes ) 
 + var destBuffer = UnsafeMutablePointer < UInt8 > ( data . buffer ( ) ) 
 + let readCount = min ( Int ( len ) , Int ( readed . length ) ) 
 + for _ in 0 . . < readCount { 
 + destBuffer . memory = srcBuffer . memory 
 + destBuffer = destBuffer . successor ( ) 
 + srcBuffer = srcBuffer . successor ( ) 
 + } 
 + 
 + resolver . result ( ARFilePart ( offset : fileOffset , withLength : len , withContents : data ) ) 
 } 
 - 
 - callback . onFileReadWithOffset ( fileOffset , withData : data , withDataOffset : offset , withLength : jint ( len ) ) 
 } 
 } 
 
 - func close ( ) - > Bool { 
 + func close ( ) - > ARPromise ! { 
 self . fileHandle . closeFile ( ) 
 - return true 
 + return ARPromise . success ( nil ) 
 } 
 + 
 + / / func readWithOffset ( fileOffset : jint , withData data : IOSByteArray ! , withDataOffset offset : jint , withLength len : jint , withCallback callback : ARFileReadCallback ! ) { 
 + / / 
 + / / dispatchBackground { 
 + / / 
 + / / self . fileHandle . seekToFileOffset ( UInt64 ( fileOffset ) ) 
 + / / 
 + / / let readed : NSData = self . fileHandle . readDataOfLength ( Int ( len ) ) 
 + / / 
 + / / var srcBuffer = UnsafeMutablePointer < UInt8 > ( readed . bytes ) 
 + / / var destBuffer = UnsafeMutablePointer < UInt8 > ( data . buffer ( ) ) 
 + / / let len = min ( Int ( len ) , Int ( readed . length ) ) 
 + / / for _ in offset . . < offset + len { 
 + / / destBuffer . memory = srcBuffer . memory 
 + / / destBuffer = destBuffer . successor ( ) 
 + / / srcBuffer = srcBuffer . successor ( ) 
 + / / } 
 + / / 
 + / / callback . onFileReadWithOffset ( fileOffset , withData : data , withDataOffset : offset , withLength : jint ( len ) ) 
 + / / } 
 + / / } 
 + 
 + / / func close ( ) - > Bool { 
 + / / self . fileHandle . closeFile ( ) 
 + / / return true 
 + / / } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaHttpRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaHttpRuntime . swift 
 index 0b61a87 . . d76bc56 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaHttpRuntime . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaHttpRuntime . swift 
 @ @ - 8 , 45 + 8 , 51 @ @ class CocoaHttpRuntime : NSObject , ARHttpRuntime { 
 
 let queue : NSOperationQueue = NSOperationQueue ( ) 
 
 - func getMethodWithUrl ( url : String ! , withStartOffset startOffset : jint , withSize size : jint , withTotalSize totalSize : jint , withCallback callback : ARFileDownloadCallback ! ) { 
 - let header = " bytes = \ ( startOffset ) - \ ( min ( startOffset + size , totalSize ) ) " 
 - let request = NSMutableURLRequest ( URL : NSURL ( string : url ) ! ) 
 - request . HTTPShouldHandleCookies = false 
 - request . cachePolicy = NSURLRequestCachePolicy . ReloadIgnoringLocalAndRemoteCacheData 
 - request . setValue ( header , forHTTPHeaderField : " Range " ) 
 - request . HTTPMethod = " GET " 
 + func getMethodWithUrl ( url : String ! , withStartOffset startOffset : jint , withSize size : jint , withTotalSize totalSize : jint ) - > ARPromise ! { 
 
 - NSURLConnection . sendAsynchronousRequest ( request , queue : queue , completionHandler : { ( response : NSURLResponse ? , data : NSData ? , error : NSError ? ) - > Void in 
 - if let respHttp = response as ? NSHTTPURLResponse { 
 - if ( respHttp . statusCode > = 200 & & respHttp . statusCode < 300 ) { 
 - callback . onDownloadedWithByteArray ( data ! . toJavaBytes ( ) ) 
 + return ARPromise { ( resolver ) in 
 + 
 + let header = " bytes = \ ( startOffset ) - \ ( min ( startOffset + size , totalSize ) ) " 
 + let request = NSMutableURLRequest ( URL : NSURL ( string : url ) ! ) 
 + request . HTTPShouldHandleCookies = false 
 + request . cachePolicy = NSURLRequestCachePolicy . ReloadIgnoringLocalAndRemoteCacheData 
 + request . setValue ( header , forHTTPHeaderField : " Range " ) 
 + request . HTTPMethod = " GET " 
 + 
 + NSURLConnection . sendAsynchronousRequest ( request , queue : self . queue , completionHandler : { ( response : NSURLResponse ? , data : NSData ? , error : NSError ? ) - > Void in 
 + if let respHttp = response as ? NSHTTPURLResponse { 
 + if ( respHttp . statusCode > = 200 & & respHttp . statusCode < 300 ) { 
 + resolver . result ( ARHTTPResponse ( code : jint ( respHttp . statusCode ) , withContent : data ! . toJavaBytes ( ) ) ) 
 + } else { 
 + resolver . error ( ARHTTPError ( int : jint ( respHttp . statusCode ) ) ) 
 + } 
 } else { 
 - callback . onDownloadFailureWithError ( jint ( respHttp . statusCode ) , withRetryIn : 0 ) 
 + resolver . error ( ARHTTPError ( int : 0 ) ) 
 } 
 - } else { 
 - callback . onDownloadFailureWithError ( 0 , withRetryIn : 0 ) 
 - } 
 - } ) 
 + } ) 
 + } 
 } 
 
 - func putMethodWithUrl ( url : String ! , withContents contents : IOSByteArray ! , withCallback callback : ARFileUploadCallback ! ) { 
 - let request = NSMutableURLRequest ( URL : NSURL ( string : url ) ! ) 
 - request . HTTPShouldHandleCookies = false 
 - request . cachePolicy = NSURLRequestCachePolicy . ReloadIgnoringLocalAndRemoteCacheData 
 - request . HTTPMethod = " PUT " 
 - request . HTTPBody = contents . toNSData ( ) 
 - request . setValue ( " application / octet - stream " , forHTTPHeaderField : " Content - Type " ) 
 - 
 - NSURLConnection . sendAsynchronousRequest ( request , queue : queue , completionHandler : { ( response : NSURLResponse ? , data : NSData ? , error : NSError ? ) - > Void in 
 - if let respHttp = response as ? NSHTTPURLResponse { 
 - if ( respHttp . statusCode > = 200 & & respHttp . statusCode < 300 ) { 
 - callback . onUploaded ( ) 
 + func putMethodWithUrl ( url : String ! , withContents contents : IOSByteArray ! ) - > ARPromise ! { 
 + return ARPromise { ( resolver ) in 
 + let request = NSMutableURLRequest ( URL : NSURL ( string : url ) ! ) 
 + request . HTTPShouldHandleCookies = false 
 + request . cachePolicy = NSURLRequestCachePolicy . ReloadIgnoringLocalAndRemoteCacheData 
 + request . HTTPMethod = " PUT " 
 + request . HTTPBody = contents . toNSData ( ) 
 + request . setValue ( " application / octet - stream " , forHTTPHeaderField : " Content - Type " ) 
 + 
 + NSURLConnection . sendAsynchronousRequest ( request , queue : self . queue , completionHandler : { ( response : NSURLResponse ? , data : NSData ? , error : NSError ? ) - > Void in 
 + if let respHttp = response as ? NSHTTPURLResponse { 
 + if ( respHttp . statusCode > = 200 & & respHttp . statusCode < 300 ) { 
 + resolver . result ( ARHTTPResponse ( code : jint ( respHttp . statusCode ) , withContent : nil ) ) 
 + } else { 
 + resolver . error ( ARHTTPError ( int : jint ( respHttp . statusCode ) ) ) 
 + } 
 } else { 
 - callback . onUploadFailureWithError ( jint ( respHttp . statusCode ) , withRetryIn : 0 ) 
 + resolver . error ( ARHTTPError ( int : 0 ) ) 
 } 
 - } else { 
 - callback . onUploadFailureWithError ( 0 , withRetryIn : 0 ) 
 - } 
 - } ) 
 + } ) 
 + } 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / file / DownloadTask . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / file / DownloadTask . java 
 index 03ab017 . . 8758cf5 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / file / DownloadTask . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / file / DownloadTask . java 
 @ @ - 67 , 16 + 67 , 15 @ @ public class DownloadTask extends ModuleActor { 
 return ; 
 } 
 
 - outputFile = destReference . openWrite ( fileReference . getFileSize ( ) ) ; 
 - if ( outputFile = = null ) { 
 + destReference . openWrite ( fileReference . getFileSize ( ) ) . then ( r - > { 
 + outputFile = r ; 
 + requestUrl ( ) ; 
 + } ) . failure ( e - > { 
 reportError ( ) ; 
 if ( LOG ) { 
 Log . d ( TAG , " Unable to write wile " ) ; 
 } 
 - return ; 
 - } 
 - 
 - requestUrl ( ) ; 
 + } ) ; 
 } 
 
 @ Override 
 @ @ - 206 , 10 + 205 , 7 @ @ public class DownloadTask extends ModuleActor { 
 & & ( ( HTTPError ) e ) . getErrorCode ( ) < 600 ) 
 | | ( ( HTTPError ) e ) . getErrorCode ( ) = = 0 ) ) { 
 / / Server on unknown error 
 - int retryInSecs = ( ( HTTPError ) e ) . getRetryInSecs ( ) ; 
 - if ( retryInSecs < = 0 ) { 
 - retryInSecs = DEFAULT _ RETRY ; 
 - } 
 + int retryInSecs = DEFAULT _ RETRY ; 
 
 if ( LOG ) { 
 Log . w ( TAG , " Download part # " + blockIndex + " failure # " + ( ( HTTPError ) e ) . getErrorCode ( ) + " trying again in " + retryInSecs + " sec , attempt # " + ( attempt + 1 ) ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / file / UploadTask . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / file / UploadTask . java 
 index 7e35af0 . . 3880c5a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / file / UploadTask . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / file / UploadTask . java 
 @ @ - 24 , 9 + 24 , 13 @ @ import im . actor . runtime . files . FileSystemReference ; 
 import im . actor . runtime . files . InputFile ; 
 import im . actor . runtime . files . OutputFile ; 
 import im . actor . runtime . http . HTTPError ; 
 + import im . actor . runtime . http . HTTPResponse ; 
 
 public class UploadTask extends ModuleActor { 
 
 + / / j2objc workaround 
 + private static final HTTPResponse DUMB = null ; 
 + 
 private static final int SIM _ BLOCKS _ COUNT = 4 ; 
 private static final int NOTIFY _ THROTTLE = 1000 ; 
 private static final int DEFAULT _ RETRY = 15 ; 
 @ @ - 268 , 10 + 272 , 7 @ @ public class UploadTask extends ModuleActor { 
 if ( ( httpError . getErrorCode ( ) > = 500 & & httpError . getErrorCode ( ) < 600 ) | | httpError . getErrorCode ( ) = = 0 ) { 
 / / Is Server Error or unknown error 
 
 - int retryInSecs = httpError . getRetryInSecs ( ) ; 
 - if ( retryInSecs < = 0 ) { 
 - retryInSecs = DEFAULT _ RETRY ; 
 - } 
 + int retryInSecs = DEFAULT _ RETRY ; 
 
 if ( LOG ) { 
 Log . w ( TAG , " Block # " + blockIndex + " upload error # " + httpError . getErrorCode ( ) + " trying again in " + retryInSecs + " sec , attempt # " + ( attempt + 1 ) ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java 
 index b14dafb . . a36c3b8 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java 
 @ @ - 121 , 7 + 121 , 7 @ @ public class AndroidHttpProvider implements HttpRuntime { 
 Log . d ( TAG , " Downloading part error : " + request . toString ( ) ) ; 
 e . printStackTrace ( ) ; 
 / / TODO : Better error ? 
 - resolver . error ( new HTTPError ( 0 , 0 ) ) ; 
 + resolver . error ( new HTTPError ( 0 ) ) ; 
 } 
 
 @ Override 
 @ @ - 130 , 7 + 130 , 7 @ @ public class AndroidHttpProvider implements HttpRuntime { 
 if ( response . code ( ) > = 200 & & response . code ( ) < 300 ) { 
 resolver . result ( new HTTPResponse ( response . code ( ) , response . body ( ) . bytes ( ) ) ) ; 
 } else { 
 - resolver . error ( new HTTPError ( response . code ( ) , 0 ) ) ; 
 + resolver . error ( new HTTPError ( response . code ( ) ) ) ; 
 } 
 } 
 } ) ; 
 @ @ - 151 , 7 + 151 , 7 @ @ public class AndroidHttpProvider implements HttpRuntime { 
 Log . d ( TAG , " Uploading part error : " + request . toString ( ) ) ; 
 e . printStackTrace ( ) ; 
 / / TODO : Better error ? 
 - resolver . error ( new HTTPError ( 0 , 0 ) ) ; 
 + resolver . error ( new HTTPError ( 0 ) ) ; 
 } 
 
 @ Override 
 @ @ - 160 , 7 + 160 , 7 @ @ public class AndroidHttpProvider implements HttpRuntime { 
 if ( response . code ( ) > = 200 & & response . code ( ) < 300 ) { 
 resolver . result ( new HTTPResponse ( response . code ( ) , null ) ) ; 
 } else { 
 - resolver . error ( new HTTPError ( response . code ( ) , 0 ) ) ; 
 + resolver . error ( new HTTPError ( response . code ( ) ) ) ; 
 } 
 } 
 } ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsHttpProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsHttpProvider . java 
 index 12483a8 . . 0ddcd2b 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsHttpProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsHttpProvider . java 
 @ @ - 31 , 7 + 31 , 7 @ @ public class JsHttpProvider implements HttpRuntime { 
 if ( request1 . getStatus ( ) > = 200 & & request1 . getStatus ( ) < 300 ) { 
 resolver . result ( new HTTPResponse ( request1 . getStatus ( ) , null ) ) ; 
 } else { 
 - resolver . error ( new HTTPError ( request1 . getStatus ( ) , 0 ) ) ; 
 + resolver . error ( new HTTPError ( request1 . getStatus ( ) ) ) ; 
 } 
 } 
 } ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / files / FilePart . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / files / FilePart . java 
 index 314e5f2 . . dedc467 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / files / FilePart . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / files / FilePart . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package im . actor . runtime . files ; 
 
 + import com . google . j2objc . annotations . ObjectiveCName ; 
 import com . google . j2objc . annotations . Property ; 
 
 import org . jetbrains . annotations . NotNull ; 
 @ @ - 14 , 6 + 15 , 7 @ @ public class FilePart { 
 @ Property ( " readonly , nonatomic " ) 
 private byte [ ] contents ; 
 
 + @ ObjectiveCName ( " initWithOffset : withLength : withContents : " ) 
 public FilePart ( int offset , int partLength , @ NotNull byte [ ] contents ) { 
 this . offset = offset ; 
 this . partLength = partLength ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / HTTPError . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / HTTPError . java 
 index 51dd8dd . . 93ad1a4 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / HTTPError . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / HTTPError . java 
 @ @ - 3 , 18 + 3 , 12 @ @ package im . actor . runtime . http ; 
 public class HTTPError extends Exception { 
 
 private int errorCode ; 
 - private int retryInSecs ; 
 
 - public HTTPError ( int errorCode , int retryInSecs ) { 
 + public HTTPError ( int errorCode ) { 
 this . errorCode = errorCode ; 
 - this . retryInSecs = retryInSecs ; 
 } 
 
 public int getErrorCode ( ) { 
 return errorCode ; 
 } 
 - 
 - public int getRetryInSecs ( ) { 
 - return retryInSecs ; 
 - } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / HTTPResponse . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / HTTPResponse . java 
 index fbb28b2 . . bada626 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / HTTPResponse . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / HTTPResponse . java 
 @ @ - 1 , 10 + 1 , 17 @ @ 
 package im . actor . runtime . http ; 
 
 + import com . google . j2objc . annotations . ObjectiveCName ; 
 + import com . google . j2objc . annotations . Property ; 
 + 
 public class HTTPResponse { 
 - 
 - private int code ; 
 - private byte [ ] content ; 
 
 + @ Property ( " readonly , nonatomic " ) 
 + private final int code ; 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private final byte [ ] content ; 
 + 
 + @ ObjectiveCName ( " initWithCode : withContent : " ) 
 public HTTPResponse ( int code , byte [ ] content ) { 
 this . code = code ; 
 this . content = content ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaHttpRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaHttpRuntime . swift 
 index 066a55e . . ade1365 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaHttpRuntime . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaHttpRuntime . swift 
 @ @ - 17 , 10 + 17 , 14 @ @ class CocoaHttpRuntime : NSObject , ARHttpRuntime { 
 request . HTTPMethod = " GET " 
 
 NSURLConnection . sendAsynchronousRequest ( request , queue : queue , completionHandler : { ( response : NSURLResponse ? , data : NSData ? , error : NSError ? ) - > Void in 
 - if ( error ! = nil ) { 
 - callback . onDownloadFailure ( ) 
 + if let respHttp = response as ? NSHTTPURLResponse { 
 + if ( respHttp . statusCode > = 200 & & respHttp . statusCode < 300 ) { 
 + callback . onDownloadedWithByteArray ( data ! . toJavaBytes ( ) ) 
 + } else { 
 + callback . onDownloadFailureWithError ( jint ( respHttp . statusCode ) , withRetryIn : 0 ) 
 + } 
 } else { 
 - callback . onDownloadedWithByteArray ( data ! . toJavaBytes ( ) ) 
 + callback . onDownloadFailureWithError ( 0 , withRetryIn : 0 ) 
 } 
 } ) 
 } 
 @ @ - 34 , 10 + 38 , 14 @ @ class CocoaHttpRuntime : NSObject , ARHttpRuntime { 
 request . setValue ( " application / octet - stream " , forHTTPHeaderField : " Content - Type " ) 
 
 NSURLConnection . sendAsynchronousRequest ( request , queue : queue , completionHandler : { ( response : NSURLResponse ? , data : NSData ? , error : NSError ? ) - > Void in 
 - if ( error ! = nil ) { 
 - callback . onUploadFailure ( ) 
 + if let respHttp = response as ? NSHTTPURLResponse { 
 + if ( respHttp . statusCode > = 200 & & respHttp . statusCode < 300 ) { 
 + callback . onUploaded ( ) 
 + } else { 
 + callback . onUploadFailureWithError ( jint ( respHttp . statusCode ) , withRetryIn : 0 ) 
 + } 
 } else { 
 - callback . onUploaded ( ) 
 + callback . onUploadFailureWithError ( 0 , withRetryIn : 0 ) 
 } 
 } ) 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadTask . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadTask . java 
 index 8648f2d . . cb6825d 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadTask . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadTask . java 
 @ @ - 24 , 6 + 24 , 7 @ @ public class DownloadTask extends ModuleActor { 
 
 private static final int SIM _ BLOCKS _ COUNT = 4 ; 
 private static final int NOTIFY _ THROTTLE = 1000 ; 
 + private static final int DEFAULT _ RETRY = 15 ; 
 
 private final String TAG ; 
 private final boolean LOG ; 
 @ @ - 85 , 6 + 86 , 9 @ @ public class DownloadTask extends ModuleActor { 
 public void onReceive ( Object message ) { 
 if ( message instanceof NotifyProgress ) { 
 performReportProgress ( ) ; 
 + } else if ( message instanceof Retry ) { 
 + Retry retry = ( Retry ) message ; 
 + retryPart ( retry . getBlockIndex ( ) , retry . getFileOffset ( ) , retry . getAttempt ( ) ) ; 
 } else { 
 super . onReceive ( message ) ; 
 } 
 @ @ - 172 , 7 + 176 , 7 @ @ public class DownloadTask extends ModuleActor { 
 Log . d ( TAG , " Starting part # " + blockIndex + " download " ) ; 
 } 
 
 - downloadPart ( blockIndex , offset ) ; 
 + downloadPart ( blockIndex , offset , 0 ) ; 
 
 checkQueue ( ) ; 
 } else { 
 @ @ - 182 , 7 + 186 , 19 @ @ public class DownloadTask extends ModuleActor { 
 } 
 } 
 
 - private void downloadPart ( final int blockIndex , final int fileOffset ) { 
 + private void retryPart ( int blockIndex , int fileOffset , int attempt ) { 
 + if ( isCompleted ) { 
 + return ; 
 + } 
 + 
 + if ( LOG ) { 
 + Log . d ( TAG , " Trying again part # " + blockIndex + " download " ) ; 
 + } 
 + 
 + downloadPart ( blockIndex , fileOffset , attempt ) ; 
 + } 
 + 
 + private void downloadPart ( final int blockIndex , final int fileOffset , final int attempt ) { 
 HTTP . getMethod ( fileUrl , fileOffset , blockSize , fileReference . getFileSize ( ) , new FileDownloadCallback ( ) { 
 @ Override 
 public void onDownloaded ( final byte [ ] data ) { 
 @ @ - 205 , 16 + 221 , 30 @ @ public class DownloadTask extends ModuleActor { 
 } 
 
 @ Override 
 - public void onDownloadFailure ( ) { 
 - self ( ) . send ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - if ( LOG ) { 
 - Log . d ( TAG , " Download part # " + blockIndex + " failure " ) ; 
 - } 
 - reportError ( ) ; 
 + public void onDownloadFailure ( int error , int retryInSecs ) { 
 + if ( ( error > = 500 & & error < 600 ) | | error = = 0 ) { 
 + / / Server on unknown error 
 + 
 + if ( retryInSecs < = 0 ) { 
 + retryInSecs = DEFAULT _ RETRY ; 
 } 
 - } ) ; 
 + 
 + if ( LOG ) { 
 + Log . w ( TAG , " Download part # " + blockIndex + " failure # " + error + " trying again in " + retryInSecs + " sec , attempt # " + ( attempt + 1 ) ) ; 
 + } 
 + 
 + self ( ) . send ( new Retry ( blockIndex , fileOffset , attempt + 1 ) ) ; 
 + } else { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + if ( LOG ) { 
 + Log . d ( TAG , " Download part # " + blockIndex + " failure " ) ; 
 + } 
 + reportError ( ) ; 
 + } 
 + } ) ; 
 + } 
 } 
 } ) ; 
 } 
 @ @ - 263 , 4 + 293 , 29 @ @ public class DownloadTask extends ModuleActor { 
 private class NotifyProgress { 
 
 } 
 + 
 + private class Retry { 
 + 
 + private int blockIndex ; 
 + private int fileOffset ; 
 + private int attempt ; 
 + 
 + public Retry ( int blockIndex , int fileOffset , int attempt ) { 
 + this . blockIndex = blockIndex ; 
 + this . fileOffset = fileOffset ; 
 + this . attempt = attempt ; 
 + } 
 + 
 + public int getBlockIndex ( ) { 
 + return blockIndex ; 
 + } 
 + 
 + public int getFileOffset ( ) { 
 + return fileOffset ; 
 + } 
 + 
 + public int getAttempt ( ) { 
 + return attempt ; 
 + } 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / UploadTask . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / UploadTask . java 
 index efa37e9 . . c2cb92b 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / UploadTask . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / UploadTask . java 
 @ @ - 30 , 6 + 30 , 7 @ @ public class UploadTask extends ModuleActor { 
 
 private static final int SIM _ BLOCKS _ COUNT = 4 ; 
 private static final int NOTIFY _ THROTTLE = 1000 ; 
 + private static final int DEFAULT _ RETRY = 15 ; 
 
 private final String TAG ; 
 private final boolean LOG ; 
 @ @ - 125 , 6 + 126 , 9 @ @ public class UploadTask extends ModuleActor { 
 public void onReceive ( Object message ) { 
 if ( message instanceof NotifyProgress ) { 
 performReportProgress ( ) ; 
 + } else if ( message instanceof Retry ) { 
 + Retry retry = ( Retry ) message ; 
 + retryPart ( retry . getBlockIndex ( ) , retry . getData ( ) , retry . getAttempt ( ) ) ; 
 } else { 
 super . onReceive ( message ) ; 
 } 
 @ @ - 257 , 7 + 261 , 7 @ @ public class UploadTask extends ModuleActor { 
 } 
 
 uploadCount + + ; 
 - uploadPart ( blockIndex , fileOffset , data ) ; 
 + uploadPart ( blockIndex , data , 0 ) ; 
 checkQueue ( ) ; 
 } 
 } ) ; 
 @ @ - 281 , 7 + 285 , 17 @ @ public class UploadTask extends ModuleActor { 
 } ) ; 
 } 
 
 - private void uploadPart ( final int blockIndex , final int offset , final byte [ ] data ) { 
 + private void retryPart ( int blockIndex , byte [ ] data , int attempt ) { 
 + if ( isCompleted ) { 
 + return ; 
 + } 
 + if ( LOG ) { 
 + Log . d ( TAG , " Retrying block upload # " + blockIndex ) ; 
 + } 
 + uploadPart ( blockIndex , data , attempt ) ; 
 + } 
 + 
 + private void uploadPart ( final int blockIndex , final byte [ ] data , final int attempt ) { 
 request ( new RequestGetFileUploadPartUrl ( blockIndex , blockSize , uploadConfig ) , 
 new RpcCallback < ResponseGetFileUploadPartUrl > ( ) { 
 @ Override 
 @ @ - 306 , 16 + 320 , 31 @ @ public class UploadTask extends ModuleActor { 
 } 
 
 @ Override 
 - public void onUploadFailure ( ) { 
 - self ( ) . send ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - if ( LOG ) { 
 - Log . w ( TAG , " Block # " + blockIndex + " upload failure " ) ; 
 - } 
 - reportError ( ) ; 
 + public void onUploadFailure ( int error , int retryInSecs ) { 
 + if ( ( error > = 500 & & error < 600 ) | | error = = 0 ) { 
 + / / Is Server Error or unknown error 
 + 
 + if ( retryInSecs < = 0 ) { 
 + retryInSecs = DEFAULT _ RETRY ; 
 } 
 - } ) ; 
 + 
 + if ( LOG ) { 
 + Log . w ( TAG , " Block # " + blockIndex + " upload error # " + error + " trying again in " + retryInSecs + " sec , attempt # " + ( attempt + 1 ) ) ; 
 + } 
 + 
 + self ( ) . send ( new Retry ( blockIndex , data , attempt + 1 ) , retryInSecs * 1000L ) ; 
 + } else { 
 + / / User Error 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + if ( LOG ) { 
 + Log . w ( TAG , " Block # " + blockIndex + " upload failure " ) ; 
 + } 
 + reportError ( ) ; 
 + } 
 + } ) ; 
 + } 
 } 
 } ) ; 
 } 
 @ @ - 377 , 4 + 406 , 29 @ @ public class UploadTask extends ModuleActor { 
 private class NotifyProgress { 
 
 } 
 + 
 + private class Retry { 
 + 
 + private int blockIndex ; 
 + private byte [ ] data ; 
 + private int attempt ; 
 + 
 + public Retry ( int blockIndex , byte [ ] data , int attempt ) { 
 + this . blockIndex = blockIndex ; 
 + this . data = data ; 
 + this . attempt = attempt ; 
 + } 
 + 
 + public int getBlockIndex ( ) { 
 + return blockIndex ; 
 + } 
 + 
 + public byte [ ] getData ( ) { 
 + return data ; 
 + } 
 + 
 + public int getAttempt ( ) { 
 + return attempt ; 
 + } 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java 
 index 7d7c3ad . . a10b4a8 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java 
 @ @ - 38 , 16 + 38 , 16 @ @ public class AndroidHttpProvider implements HttpRuntime { 
 public void onFailure ( Request request , IOException e ) { 
 Log . d ( TAG , " Downloading part error : " + request . toString ( ) ) ; 
 e . printStackTrace ( ) ; 
 - callback . onDownloadFailure ( ) ; 
 + callback . onDownloadFailure ( 0 , 0 ) ; 
 } 
 
 @ Override 
 public void onResponse ( Response response ) throws IOException { 
 Log . d ( TAG , " Downloading part response : " + request . toString ( ) + " - > " + response . toString ( ) ) ; 
 - if ( response . code ( ) = = 206 ) { 
 + if ( response . code ( ) > = 200 & & response . code ( ) < 300 ) { 
 callback . onDownloaded ( response . body ( ) . bytes ( ) ) ; 
 } else { 
 - callback . onDownloadFailure ( ) ; 
 + callback . onDownloadFailure ( response . code ( ) , 0 ) ; 
 } 
 } 
 } ) ; 
 @ @ - 65 , 16 + 65 , 16 @ @ public class AndroidHttpProvider implements HttpRuntime { 
 public void onFailure ( Request request , IOException e ) { 
 Log . d ( TAG , " Uploading part error : " + request . toString ( ) ) ; 
 e . printStackTrace ( ) ; 
 - callback . onUploadFailure ( ) ; 
 + callback . onUploadFailure ( 0 , 0 ) ; 
 } 
 
 @ Override 
 public void onResponse ( Response response ) throws IOException { 
 Log . d ( TAG , " Upload part response : " + request . toString ( ) + " - > " + response . toString ( ) ) ; 
 - if ( response . code ( ) = = 200 ) { 
 + if ( response . code ( ) > = 200 & & response . code ( ) < 300 ) { 
 callback . onUploaded ( ) ; 
 } else { 
 - callback . onUploadFailure ( ) ; 
 + callback . onUploadFailure ( response . code ( ) , 0 ) ; 
 } 
 } 
 } ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsHttpProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsHttpProvider . java 
 index 7fcedeb . . 231eae2 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsHttpProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsHttpProvider . java 
 @ @ - 29 , 11 + 29 , 10 @ @ public class JsHttpProvider implements HttpRuntime { 
 @ Override 
 public void onStateChanged ( JsHttpRequest request ) { 
 if ( request . getReadyState ( ) = = 4 ) { 
 - if ( request . getStatus ( ) = = 200 ) { 
 - 
 + if ( request . getStatus ( ) > = 200 & & request . getStatus ( ) < 300 ) { 
 callback . onUploaded ( ) ; 
 } else { 
 - callback . onUploadFailure ( ) ; 
 + callback . onUploadFailure ( request . getStatus ( ) , 0 ) ; 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / FileDownloadCallback . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / FileDownloadCallback . java 
 index cefe44e . . 2236c3a 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / FileDownloadCallback . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / FileDownloadCallback . java 
 @ @ - 4 , 8 + 4 , 11 @ @ 
 
 package im . actor . runtime . http ; 
 
 + import com . google . j2objc . annotations . ObjectiveCName ; 
 + 
 public interface FileDownloadCallback { 
 void onDownloaded ( byte [ ] data ) ; 
 
 - void onDownloadFailure ( ) ; 
 + @ ObjectiveCName ( " onDownloadFailureWithError : withRetryIn : " ) 
 + void onDownloadFailure ( int error , int retryInSecs ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / FileUploadCallback . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / FileUploadCallback . java 
 index c2bfd3a . . bc89df7 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / FileUploadCallback . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / http / FileUploadCallback . java 
 @ @ - 4 , 8 + 4 , 11 @ @ 
 
 package im . actor . runtime . http ; 
 
 + import com . google . j2objc . annotations . ObjectiveCName ; 
 + 
 public interface FileUploadCallback { 
 void onUploaded ( ) ; 
 
 - void onUploadFailure ( ) ; 
 + @ ObjectiveCName ( " onUploadFailureWithError : withRetryIn : " ) 
 + void onUploadFailure ( int error , int retryInSecs ) ; 
 }
