BLEU SCORE: 0.04540013809283727

TEST MSG: Merge branch ' server / new - webrtc '
GENERATED MSG: feat ( server : webrtc ) : SyncedSet for call state

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > index 5dc121c . . 8b8db9d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > @ @ - 18 , 16 + 18 , 21 @ @ object EventBus { < nl > sealed trait Client { < nl > def isInternal : Boolean < nl > def isExternal : Boolean < nl > + def externalUserId : Option [ UserId ] < nl > } < nl > final case class InternalClient ( ref : ActorRef ) extends Client { < nl > override def isInternal : Boolean = true < nl > < nl > override def isExternal : Boolean = false < nl > + < nl > + override def externalUserId : Option [ UserId ] = None < nl > } < nl > final case class ExternalClient ( userId : UserId , authId : AuthId ) extends Client { < nl > override def isInternal : Boolean = false < nl > < nl > override def isExternal : Boolean = true < nl > + < nl > + override def externalUserId : Option [ UserId ] = Some ( userId ) < nl > } < nl > < nl > final case class Message ( id : String , client : Client , deviceId : Option [ Long ] , message : Array [ Byte ] ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / values / SyncedSet . scala b / actor - server / actor - core / src / main / scala / im / actor / server / values / SyncedSet . scala < nl > new file mode 100644 < nl > index 0000000 . . a88a913 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / values / SyncedSet . scala < nl > @ @ - 0 , 0 + 1 , 102 @ @ < nl > + package im . actor . server . values < nl > + < nl > + import akka . actor . { ActorSystem , Props } < nl > + import akka . cluster . sharding . { ClusterSharding , ClusterShardingSettings } < nl > + import akka . pattern . ask < nl > + import akka . util . Timeout < nl > + import im . actor . api . rpc . values . { ApiSyncedValue , UpdateSyncedSetAddedOrUpdated , UpdateSyncedSetRemoved , UpdateSynedSetUpdated } < nl > + import im . actor . concurrent . AlertingActor < nl > + import im . actor . server . sequence . WeakUpdatesExtension < nl > + < nl > + import scala . concurrent . Future < nl > + < nl > + private [ values ] trait SyncedSet { < nl > + import SyncedSetValue . _ < nl > + < nl > + val system : ActorSystem < nl > + import system . dispatcher < nl > + < nl > + implicit val defaultTimeout : Timeout < nl > + < nl > + object syncedSet { < nl > + private val region = < nl > + ClusterSharding ( system ) < nl > + . start ( < nl > + " Values . SyncedSet " , < nl > + props , < nl > + ClusterShardingSettings ( system ) , < nl > + { < nl > + case Envelope ( userId , name , msg ) ⇒ ( s " $ { userId } _ $ name " , msg ) < nl > + } , < nl > + { < nl > + case Envelope ( userId , _ , _ ) ⇒ ( userId % 100 ) . toString < nl > + } < nl > + ) < nl > + < nl > + def weakGroup ( name : String ) = name < nl > + < nl > + def loadApiValues ( userId : Int , name : String ) : Future [ Vector [ ApiSyncedValue ] ] = < nl > + ( region ? Envelope ( userId , name , LoadApiValues ) ) . mapTo [ LoadApiValuesAck ] map ( _ . values ) < nl > + < nl > + def put ( userId : Int , name : String , key : Long , value : Array [ Byte ] ) : Future [ Unit ] = < nl > + ( region ? Envelope ( userId , name , Put ( Seq ( key → Some ( value ) ) ) ) ) map ( _ ⇒ ( ) ) < nl > + < nl > + def delete ( userId : Int , name : String , key : Long ) : Future [ Unit ] = < nl > + ( region ? Envelope ( userId , name , Delete ( Seq ( key ) ) ) ) map ( _ ⇒ ( ) ) < nl > + } < nl > + } < nl > + < nl > + private object SyncedSetValue { < nl > + sealed trait Message < nl > + final case class Envelope ( userId : Int , name : String , message : Message ) < nl > + < nl > + final case class Put ( values : Seq [ ( Long , Option [ Array [ Byte ] ] ) ] ) extends Message < nl > + case object PutAck < nl > + < nl > + final case class Delete ( ids : Seq [ Long ] ) extends Message < nl > + case object DeleteAck < nl > + < nl > + final case class ReplaceAll ( values : Seq [ ( Long , Option [ Array [ Byte ] ] ) ] ) extends Message < nl > + case object ReplaceAllAck < nl > + < nl > + case object LoadApiValues extends Message < nl > + final case class LoadApiValuesAck ( values : Vector [ ApiSyncedValue ] ) < nl > + < nl > + def props = Props ( classOf [ SyncedSetValue ] ) < nl > + } < nl > + < nl > + private final class SyncedSetValue extends AlertingActor { < nl > + import SyncedSetValue . _ < nl > + < nl > + private val ( userId , name ) = self . path . name . split ( " _ " ) . toList match { < nl > + case id : : n : : Nil ⇒ ( id . toInt , n ) < nl > + case _ ⇒ throw new RuntimeException ( " Wrong path " ) < nl > + } < nl > + < nl > + private val weakUpdExt = WeakUpdatesExtension ( context . system ) < nl > + < nl > + private var set = Map . empty [ Long , Option [ Array [ Byte ] ] ] < nl > + < nl > + def receive = { < nl > + case Put ( values ) ⇒ < nl > + set + + = values < nl > + val update = UpdateSyncedSetAddedOrUpdated ( name , apiValues ( values ) ) < nl > + weakUpdExt . broadcastUserWeakUpdate ( userId , update ) < nl > + sender ( ) ! PutAck < nl > + case Delete ( ids ) ⇒ < nl > + set - - = ids < nl > + val update = UpdateSyncedSetRemoved ( name , ids . toVector ) < nl > + weakUpdExt . broadcastUserWeakUpdate ( userId , update ) < nl > + sender ( ) ! DeleteAck < nl > + case ReplaceAll ( values ) ⇒ < nl > + set = values . toMap < nl > + val update = UpdateSynedSetUpdated ( name , apiValues ( set . toSeq ) , isStrong = Some ( false ) ) < nl > + weakUpdExt . broadcastUserWeakUpdate ( userId , update ) < nl > + sender ( ) ! ReplaceAllAck < nl > + case LoadApiValues ⇒ < nl > + sender ( ) ! LoadApiValuesAck ( apiValues ( set . toSeq ) ) < nl > + } < nl > + < nl > + private def apiValues ( values : Seq [ ( Long , Option [ Array [ Byte ] ] ) ] ) : Vector [ ApiSyncedValue ] = < nl > + values . toVector map { case ( id , value ) ⇒ ApiSyncedValue ( id , value ) } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / values / ValuesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / values / ValuesExtension . scala < nl > new file mode 100644 < nl > index 0000000 . . 2f7330a < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / values / ValuesExtension . scala < nl > @ @ - 0 , 0 + 1 , 15 @ @ < nl > + package im . actor . server . values < nl > + < nl > + import akka . actor . { ActorSystem , ExtendedActorSystem , Extension , ExtensionId , ExtensionIdProvider } < nl > + import akka . util . Timeout < nl > + import im . actor . config . ActorConfig < nl > + < nl > + final class ValuesExtension ( val system : ActorSystem ) extends Extension with SyncedSet { < nl > + val defaultTimeout = Timeout ( ActorConfig . defaultTimeout ) < nl > + } < nl > + < nl > + object ValuesExtension extends ExtensionId [ ValuesExtension ] with ExtensionIdProvider { < nl > + override def createExtension ( system : ExtendedActorSystem ) : ValuesExtension = new ValuesExtension ( system ) < nl > + < nl > + override def lookup ( ) : ExtensionId [ _ < : Extension ] = ValuesExtension < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index 2da74fd . . f6d4dfb 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . server . eventbus . { EventBus , EventBusExtension } < nl > import im . actor . server . group . GroupExtension < nl > import im . actor . server . model . { Peer , PeerType } < nl > import im . actor . server . sequence . WeakUpdatesExtension < nl > + import im . actor . server . values . ValuesExtension < nl > import im . actor . types . _ < nl > < nl > import scala . concurrent . duration . _ < nl > @ @ - 64 , 6 + 65 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > private lazy val dialogExt = DialogExtension ( context . system ) < nl > private lazy val eventBusExt = EventBusExtension ( context . system ) < nl > private lazy val groupExt = GroupExtension ( context . system ) < nl > + private lazy val valuesExt = ValuesExtension ( context . system ) < nl > < nl > case class Device ( < nl > deviceId : EventBus . DeviceId , < nl > @ @ - 76 , 20 + 78 , 37 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > ( peerSettings . map ( _ . canConnect ) . isDefined & & pairPeerSettings . map ( _ . canConnect ) . isDefined ) < nl > } < nl > < nl > + object Pair { < nl > + def apply ( d1 : EventBus . DeviceId , d2 : EventBus . DeviceId ) = { < nl > + require ( d1 ! = d2 ) < nl > + if ( d1 < d2 ) new Pair ( d1 , d2 ) < nl > + else new Pair ( d2 , d1 ) < nl > + } < nl > + } < nl > + class Pair private ( val left : EventBus . DeviceId , val right : EventBus . DeviceId ) < nl > + < nl > + type SessionId = Long < nl > + < nl > private var scheduledUpds = Map . empty [ UserId , Cancellable ] < nl > private var devices = Map . empty [ EventBus . DeviceId , Device ] < nl > private var clients = Map . empty [ EventBus . Client , EventBus . DeviceId ] < nl > + private var participants = Map . empty [ UserId , ApiCallMemberState . Value ] < nl > + private var sessions = Map . empty [ Pair , SessionId ] < nl > + private var peer = Peer ( ) < nl > + private var callerUserId : Int = _ < nl > < nl > def receive = waitForStart < nl > < nl > def waitForStart : Receive = { < nl > - case StartCall ( callerUserId , peer , eventBusId ) ⇒ < nl > + case s : StartCall ⇒ < nl > case class Res ( callees : Seq [ Int ] , callerDeviceId : EventBus . DeviceId ) < nl > + this . peer = s . peer < nl > + this . callerUserId = s . callerUserId < nl > < nl > ( for { < nl > callees ← fetchParticipants ( callerUserId , peer ) map ( _ filterNot ( _ = = callerUserId ) ) < nl > - callerDeviceId ← eventBusExt . fetchOwner ( eventBusId ) < nl > - _ ← eventBusExt . join ( EventBus . InternalClient ( self ) , eventBusId , None ) < nl > + callerDeviceId ← eventBusExt . fetchOwner ( s . eventBusId ) < nl > + _ ← eventBusExt . join ( EventBus . InternalClient ( self ) , s . eventBusId , None ) < nl > } yield Res ( callees , callerDeviceId ) ) pipeTo self < nl > < nl > becomeStashing ( replyTo ⇒ { < nl > @ @ - 97 , 9 + 116 , 13 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > scheduleIncomingCallUpdates ( callees ) < nl > replyTo ! StartCallAck < nl > < nl > - eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( callerDeviceId ) , ApiAdvertiseMaster . toByteArray ) < nl > + eventBusExt . post ( EventBus . InternalClient ( self ) , s . eventBusId , Seq ( callerDeviceId ) , ApiAdvertiseMaster . toByteArray ) < nl > + < nl > + callees foreach ( putParticipant ( _ , ApiCallMemberState . RINGING ) ) < nl > + putParticipant ( callerUserId , ApiCallMemberState . CONNECTED ) < nl > + broadcastSyncedSet ( ) < nl > < nl > - context become callInProgress ( peer , eventBusId , callerDeviceId , System . currentTimeMillis ( ) , callerUserId , callees : + callerUserId ) < nl > + context become callInProgress ( peer , s . eventBusId , callerDeviceId , System . currentTimeMillis ( ) , callerUserId ) < nl > unstashAll ( ) < nl > case failure : Status . Failure ⇒ < nl > replyTo forward failure < nl > @ @ - 113 , 8 + 136 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > eventBusId : String , < nl > callerDeviceId : EventBus . DeviceId , < nl > startTime : Long , < nl > - callerUserId : Int , < nl > - participants : Seq [ Int ] < nl > + callerUserId : Int < nl > ) : Receive = { < nl > def end ( ) : Unit = { < nl > val duration = ( ( System . currentTimeMillis ( ) - startTime ) / 1000 ) . toInt < nl > @ @ - 122 , 7 + 144 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > val smsg = ApiServiceMessage ( " Call ended " , Some ( ApiServiceExPhoneCall ( duration ) ) ) < nl > < nl > ( for { < nl > - _ ← if ( peer . ` type ` . isPrivate ) FutureExt . ftraverse ( participants ) ( userId ⇒ dialogExt . sendMessage ( < nl > + _ ← if ( peer . ` type ` . isPrivate ) FutureExt . ftraverse ( participants . keySet . toSeq ) ( userId ⇒ dialogExt . sendMessage ( < nl > peer = ApiPeer ( ApiPeerType . Private , userId ) , < nl > senderUserId = callerUserId , < nl > senderAuthId = None , < nl > @ @ - 145 , 13 + 167 , 16 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > } < nl > } < nl > < nl > - def connect ( device : Device , pairDevice : Device ) : Unit = { < nl > + def connect ( device : Device , pairDevice : Device ) : SessionId = { < nl > + val sessionId = Random . nextLong ( ) < nl > eventBusExt . post ( < nl > EventBus . InternalClient ( self ) , < nl > eventBusId , < nl > Seq ( device . deviceId ) , < nl > - ApiNeedOffer ( pairDevice . deviceId , Random . nextLong ( ) , pairDevice . peerSettings ) . toByteArray < nl > + ApiNeedOffer ( pairDevice . deviceId , sessionId , pairDevice . peerSettings ) . toByteArray < nl > ) < nl > + sessions + = Pair ( device . deviceId , pairDevice . deviceId ) → sessionId < nl > + sessionId < nl > } < nl > < nl > { < nl > @ @ - 165 , 25 + 190 , 33 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > case Some ( device ) ⇒ < nl > putDevice ( device . deviceId , client , device . copy ( isJoined = true ) ) < nl > cancelIncomingCallUpdates ( userId ) < nl > + < nl > weakUpdExt . broadcastUserWeakUpdate ( userId , UpdateCallHandled ( id ) , excludeAuthIds = Set ( authId ) ) < nl > devices . view filterNot ( _ . _ 1 = = device . deviceId ) filter ( _ . _ 2 . isJoined ) foreach { < nl > case ( _ , pairDevice ) ⇒ < nl > - if ( ! device . canConnect ( pairDevice . peerSettings ) ) / / if we didn ' t connect them in AdvertiseSelf < nl > - connect ( device , pairDevice ) < nl > + val sessionId = < nl > + sessions . getOrElse ( Pair ( device . deviceId , pairDevice . deviceId ) , connect ( device , pairDevice ) ) < nl > < nl > eventBusExt . post ( < nl > EventBus . InternalClient ( self ) , < nl > eventBusId , < nl > Seq ( device . deviceId ) , < nl > - ApiEnableConnection ( pairDevice . deviceId , 1L ) . toByteArray < nl > + ApiEnableConnection ( pairDevice . deviceId , sessionId ) . toByteArray < nl > ) < nl > eventBusExt . post ( < nl > EventBus . InternalClient ( self ) , < nl > eventBusId , < nl > Seq ( pairDevice . deviceId ) , < nl > - ApiEnableConnection ( device . deviceId , 1L ) . toByteArray < nl > + ApiEnableConnection ( device . deviceId , sessionId ) . toByteArray < nl > ) < nl > } < nl > + < nl > + val userDevices = devices . filter ( _ . _ 2 . client . externalUserId . contains ( userId ) ) . values . map ( _ . deviceId ) . toSet < nl > + if ( ! sessions . keySet . exists ( pair ⇒ userDevices . contains ( pair . left ) | | userDevices . contains ( pair . right ) ) ) { < nl > + putParticipant ( userId , ApiCallMemberState . CONNECTING ) < nl > + broadcastSyncedSet ( ) < nl > + } < nl > + < nl > sender ( ) ! JoinCallAck < nl > case None ⇒ < nl > sender ( ) ! Status . Failure ( WebrtcCallErrors . NotJoinedToEventBus ) < nl > @ @ - 191 , 9 + 224 , 10 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > case RejectCall ( userId , authId ) ⇒ < nl > cancelIncomingCallUpdates ( userId ) < nl > weakUpdExt . broadcastUserWeakUpdate ( userId , UpdateCallHandled ( id ) , excludeAuthIds = Set ( authId ) ) < nl > + broadcastSyncedSet ( ) < nl > sender ( ) ! RejectCallAck < nl > case GetInfo ⇒ < nl > - sender ( ) ! GetInfoAck ( eventBusId , callerUserId , participants ) < nl > + sender ( ) ! GetInfoAck ( eventBusId , callerUserId , participants . keySet . toSeq ) < nl > case EventBus . Joined ( _ , client , deviceId ) ⇒ < nl > if ( client . isExternal ) < nl > eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( deviceId ) , ApiAdvertiseMaster . toByteArray ) < nl > @ @ - 208 , 12 + 242 , 41 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > connect ( newDevice , pairDevice ) < nl > } < nl > putDevice ( deviceId , ebMessage . client , newDevice ) < nl > + < nl > + for { < nl > + userId ← ebMessage . client . externalUserId < nl > + state ← participants . get ( userId ) < nl > + } yield if ( state = = ApiCallMemberState . RINGING ) putParticipant ( userId , ApiCallMemberState . RINGING _ REACHED ) < nl > + } < nl > + case msg : ApiNegotinationSuccessful ⇒ < nl > + ebMessage . client . externalUserId foreach { userId ⇒ < nl > + putParticipant ( userId , ApiCallMemberState . CONNECTED ) < nl > + broadcastSyncedSet ( ) < nl > } < nl > case _ ⇒ < nl > } < nl > - case EventBus . Disconnected ( _ , client , deviceId ) ⇒ removeDevice ( deviceId ) < nl > - case EventBus . Disposed ( _ ) ⇒ end ( ) < nl > - case _ : StartCall ⇒ sender ( ) ! WebrtcCallErrors . CallAlreadyStarted < nl > + case EventBus . Disconnected ( _ , client , deviceId ) ⇒ < nl > + removeDevice ( deviceId ) < nl > + client . externalUserId foreach { userId ⇒ < nl > + putParticipant ( userId , ApiCallMemberState . ENDED ) < nl > + broadcastSyncedSet ( ) < nl > + } < nl > + case EventBus . Disposed ( _ ) ⇒ < nl > + end ( ) < nl > + deleteSyncedSet ( ) < nl > + case _ : StartCall ⇒ sender ( ) ! WebrtcCallErrors . CallAlreadyStarted < nl > + } < nl > + } < nl > + < nl > + private def putParticipant ( userId : Int , state : ApiCallMemberState . Value ) : Unit = { < nl > + participants get userId match { < nl > + case Some ( oldState ) ⇒ < nl > + if ( oldState ! = state ) { < nl > + log . debug ( " Changing participant { } state from { } to { } " , userId , oldState , state ) < nl > + participants + = userId → state < nl > + } else log . error ( " Attempt to change participant state to the same value { } " , state ) < nl > + case None ⇒ < nl > + log . error ( " Attempt to change state of a non - participant { } " , userId ) < nl > } < nl > } < nl > < nl > @ @ - 255 , 6 + 318 , 28 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > scheduledUpds - = callee < nl > } < nl > < nl > + private def broadcastSyncedSet ( ) : Unit = { < nl > + val activeCall = < nl > + ApiActiveCall ( id , peer . asStruct , participants . toVector map { < nl > + case ( userId , state ) ⇒ < nl > + < nl > + ApiCallMember ( userId , ApiCallMemberStateHolder ( < nl > + state = state , < nl > + fallbackIsRinging = Some ( state = = ApiCallMemberState . RINGING ) , < nl > + fallbackIsConnected = Some ( state = = ApiCallMemberState . CONNECTED ) , < nl > + fallbackIsConnecting = Some ( state = = ApiCallMemberState . CONNECTING ) , < nl > + fallbackIsRingingReached = Some ( state = = ApiCallMemberState . RINGING _ REACHED ) , < nl > + fallbackIsEnded = Some ( state = = ApiCallMemberState . ENDED ) < nl > + ) ) < nl > + } ) . toByteArray < nl > + participants . keySet foreach ( valuesExt . syncedSet . put ( _ , Webrtc . SyncedSetName , id , activeCall ) ) < nl > + } < nl > + < nl > + private def deleteSyncedSet ( ) : Unit = < nl > + participants . keySet foreach { userId ⇒ < nl > + valuesExt . syncedSet . delete ( userId , Webrtc . SyncedSetName , id ) < nl > + } < nl > + < nl > override def postStop ( ) : Unit = { < nl > scheduledUpds . values foreach ( _ . cancel ( ) ) < nl > super . postStop ( ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala < nl > index 20f3b79 . . 1bc2157 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala < nl > @ @ - 14 , 6 + 14 , 7 @ @ import scala . concurrent . forkjoin . ThreadLocalRandom < nl > < nl > object Webrtc { < nl > val WeakGroup = " webrtc _ calls " < nl > + val SyncedSetName = " messaging . calls " < nl > } < nl > < nl > final class WebrtcExtension ( system : ActorSystem ) extends Extension { < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala < nl > new file mode 100644 < nl > index 0000000 . . 8941fdd < nl > - - - / dev / null < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala < nl > @ @ - 0 , 0 + 1 , 33 @ @ < nl > + package im . actor . server . api . rpc . service . values < nl > + < nl > + import akka . actor . ActorSystem < nl > + import im . actor . api . rpc . _ < nl > + import im . actor . api . rpc . values . { ResponseLoadSyncedSet , ValuesService } < nl > + import im . actor . server . session . { SessionEnvelope , SessionRegion , SubscribeToWeak } < nl > + import im . actor . server . values . ValuesExtension < nl > + < nl > + import scala . concurrent . { ExecutionContext , Future } < nl > + < nl > + final class ValuesServiceImpl ( implicit system : ActorSystem , sessionRegion : SessionRegion ) extends ValuesService { < nl > + override implicit protected val ec : ExecutionContext = system . dispatcher < nl > + private val valuesExt = ValuesExtension ( system ) < nl > + < nl > + / * * < nl > + * Loading synced set < nl > + * < nl > + * @ param setName readable name of the set < nl > + * / < nl > + override protected def doHandleLoadSyncedSet ( < nl > + setName : String , < nl > + clientData : ClientData < nl > + ) : Future [ HandlerResult [ ResponseLoadSyncedSet ] ] = < nl > + authorized ( clientData ) { client ⇒ < nl > + sessionRegion . ref ! < nl > + SessionEnvelope ( clientData . authId , clientData . sessionId ) < nl > + . withSubscribeToWeak ( SubscribeToWeak ( Some ( valuesExt . syncedSet . weakGroup ( setName ) ) ) ) < nl > + < nl > + for { < nl > + values ← valuesExt . syncedSet . loadApiValues ( client . userId , setName ) < nl > + } yield Ok ( ResponseLoadSyncedSet ( values , isStrong = Some ( false ) ) ) < nl > + } < nl > + } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json < nl > index a42904c . . 045606d 100644 < nl > - - - a / actor - server / actor - core / src / main / actor - api / actor . json < nl > + + + b / actor - server / actor - core / src / main / actor - api / actor . json < nl > @ @ - 13463 , 6 + 13463 , 59 @ @ < nl > } < nl > } , < nl > { < nl > + " type " : " struct " , < nl > + " content " : { < nl > + " name " : " ActiveCall " , < nl > + " doc " : [ < nl > + " Active Calls . Used in broadcasting states of current calls . " , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " callId " , < nl > + " category " : " full " , < nl > + " description " : " Call Id " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " peer " , < nl > + " category " : " full " , < nl > + " description " : " Call ' s peer " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " callMembers " , < nl > + " category " : " full " , < nl > + " description " : " Call Members " < nl > + } < nl > + ] , < nl > + " attributes " : [ < nl > + { < nl > + " type " : " int64 " , < nl > + " id " : 1 , < nl > + " name " : " callId " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " struct " , < nl > + " childType " : " Peer " < nl > + } , < nl > + " id " : 2 , < nl > + " name " : " peer " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " list " , < nl > + " childType " : { < nl > + " type " : " struct " , < nl > + " childType " : " CallMember " < nl > + } < nl > + } , < nl > + " id " : 3 , < nl > + " name " : " callMembers " < nl > + } < nl > + ] < nl > + } < nl > + } , < nl > + { < nl > " type " : " enum " , < nl > " content " : { < nl > " name " : " CallMemberState " , < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > index 5dc121c . . 8b8db9d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > @ @ - 18 , 16 + 18 , 21 @ @ object EventBus { < nl > sealed trait Client { < nl > def isInternal : Boolean < nl > def isExternal : Boolean < nl > + def externalUserId : Option [ UserId ] < nl > } < nl > final case class InternalClient ( ref : ActorRef ) extends Client { < nl > override def isInternal : Boolean = true < nl > < nl > override def isExternal : Boolean = false < nl > + < nl > + override def externalUserId : Option [ UserId ] = None < nl > } < nl > final case class ExternalClient ( userId : UserId , authId : AuthId ) extends Client { < nl > override def isInternal : Boolean = false < nl > < nl > override def isExternal : Boolean = true < nl > + < nl > + override def externalUserId : Option [ UserId ] = Some ( userId ) < nl > } < nl > < nl > final case class Message ( id : String , client : Client , deviceId : Option [ Long ] , message : Array [ Byte ] ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / values / SyncedSet . scala b / actor - server / actor - core / src / main / scala / im / actor / server / values / SyncedSet . scala < nl > new file mode 100644 < nl > index 0000000 . . a88a913 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / values / SyncedSet . scala < nl > @ @ - 0 , 0 + 1 , 102 @ @ < nl > + package im . actor . server . values < nl > + < nl > + import akka . actor . { ActorSystem , Props } < nl > + import akka . cluster . sharding . { ClusterSharding , ClusterShardingSettings } < nl > + import akka . pattern . ask < nl > + import akka . util . Timeout < nl > + import im . actor . api . rpc . values . { ApiSyncedValue , UpdateSyncedSetAddedOrUpdated , UpdateSyncedSetRemoved , UpdateSynedSetUpdated } < nl > + import im . actor . concurrent . AlertingActor < nl > + import im . actor . server . sequence . WeakUpdatesExtension < nl > + < nl > + import scala . concurrent . Future < nl > + < nl > + private [ values ] trait SyncedSet { < nl > + import SyncedSetValue . _ < nl > + < nl > + val system : ActorSystem < nl > + import system . dispatcher < nl > + < nl > + implicit val defaultTimeout : Timeout < nl > + < nl > + object syncedSet { < nl > + private val region = < nl > + ClusterSharding ( system ) < nl > + . start ( < nl > + " Values . SyncedSet " , < nl > + props , < nl > + ClusterShardingSettings ( system ) , < nl > + { < nl > + case Envelope ( userId , name , msg ) ⇒ ( s " $ { userId } _ $ name " , msg ) < nl > + } , < nl > + { < nl > + case Envelope ( userId , _ , _ ) ⇒ ( userId % 100 ) . toString < nl > + } < nl > + ) < nl > + < nl > + def weakGroup ( name : String ) = name < nl > + < nl > + def loadApiValues ( userId : Int , name : String ) : Future [ Vector [ ApiSyncedValue ] ] = < nl > + ( region ? Envelope ( userId , name , LoadApiValues ) ) . mapTo [ LoadApiValuesAck ] map ( _ . values ) < nl > + < nl > + def put ( userId : Int , name : String , key : Long , value : Array [ Byte ] ) : Future [ Unit ] = < nl > + ( region ? Envelope ( userId , name , Put ( Seq ( key → Some ( value ) ) ) ) ) map ( _ ⇒ ( ) ) < nl > + < nl > + def delete ( userId : Int , name : String , key : Long ) : Future [ Unit ] = < nl > + ( region ? Envelope ( userId , name , Delete ( Seq ( key ) ) ) ) map ( _ ⇒ ( ) ) < nl > + } < nl > + } < nl > + < nl > + private object SyncedSetValue { < nl > + sealed trait Message < nl > + final case class Envelope ( userId : Int , name : String , message : Message ) < nl > + < nl > + final case class Put ( values : Seq [ ( Long , Option [ Array [ Byte ] ] ) ] ) extends Message < nl > + case object PutAck < nl > + < nl > + final case class Delete ( ids : Seq [ Long ] ) extends Message < nl > + case object DeleteAck < nl > + < nl > + final case class ReplaceAll ( values : Seq [ ( Long , Option [ Array [ Byte ] ] ) ] ) extends Message < nl > + case object ReplaceAllAck < nl > + < nl > + case object LoadApiValues extends Message < nl > + final case class LoadApiValuesAck ( values : Vector [ ApiSyncedValue ] ) < nl > + < nl > + def props = Props ( classOf [ SyncedSetValue ] ) < nl > + } < nl > + < nl > + private final class SyncedSetValue extends AlertingActor { < nl > + import SyncedSetValue . _ < nl > + < nl > + private val ( userId , name ) = self . path . name . split ( " _ " ) . toList match { < nl > + case id : : n : : Nil ⇒ ( id . toInt , n ) < nl > + case _ ⇒ throw new RuntimeException ( " Wrong path " ) < nl > + } < nl > + < nl > + private val weakUpdExt = WeakUpdatesExtension ( context . system ) < nl > + < nl > + private var set = Map . empty [ Long , Option [ Array [ Byte ] ] ] < nl > + < nl > + def receive = { < nl > + case Put ( values ) ⇒ < nl > + set + + = values < nl > + val update = UpdateSyncedSetAddedOrUpdated ( name , apiValues ( values ) ) < nl > + weakUpdExt . broadcastUserWeakUpdate ( userId , update ) < nl > + sender ( ) ! PutAck < nl > + case Delete ( ids ) ⇒ < nl > + set - - = ids < nl > + val update = UpdateSyncedSetRemoved ( name , ids . toVector ) < nl > + weakUpdExt . broadcastUserWeakUpdate ( userId , update ) < nl > + sender ( ) ! DeleteAck < nl > + case ReplaceAll ( values ) ⇒ < nl > + set = values . toMap < nl > + val update = UpdateSynedSetUpdated ( name , apiValues ( set . toSeq ) , isStrong = Some ( false ) ) < nl > + weakUpdExt . broadcastUserWeakUpdate ( userId , update ) < nl > + sender ( ) ! ReplaceAllAck < nl > + case LoadApiValues ⇒ < nl > + sender ( ) ! LoadApiValuesAck ( apiValues ( set . toSeq ) ) < nl > + } < nl > + < nl > + private def apiValues ( values : Seq [ ( Long , Option [ Array [ Byte ] ] ) ] ) : Vector [ ApiSyncedValue ] = < nl > + values . toVector map { case ( id , value ) ⇒ ApiSyncedValue ( id , value ) } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / values / ValuesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / values / ValuesExtension . scala < nl > new file mode 100644 < nl > index 0000000 . . 2f7330a < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / values / ValuesExtension . scala < nl > @ @ - 0 , 0 + 1 , 15 @ @ < nl > + package im . actor . server . values < nl > + < nl > + import akka . actor . { ActorSystem , ExtendedActorSystem , Extension , ExtensionId , ExtensionIdProvider } < nl > + import akka . util . Timeout < nl > + import im . actor . config . ActorConfig < nl > + < nl > + final class ValuesExtension ( val system : ActorSystem ) extends Extension with SyncedSet { < nl > + val defaultTimeout = Timeout ( ActorConfig . defaultTimeout ) < nl > + } < nl > + < nl > + object ValuesExtension extends ExtensionId [ ValuesExtension ] with ExtensionIdProvider { < nl > + override def createExtension ( system : ExtendedActorSystem ) : ValuesExtension = new ValuesExtension ( system ) < nl > + < nl > + override def lookup ( ) : ExtensionId [ _ < : Extension ] = ValuesExtension < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index 2da74fd . . f6d4dfb 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . server . eventbus . { EventBus , EventBusExtension } < nl > import im . actor . server . group . GroupExtension < nl > import im . actor . server . model . { Peer , PeerType } < nl > import im . actor . server . sequence . WeakUpdatesExtension < nl > + import im . actor . server . values . ValuesExtension < nl > import im . actor . types . _ < nl > < nl > import scala . concurrent . duration . _ < nl > @ @ - 64 , 6 + 65 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > private lazy val dialogExt = DialogExtension ( context . system ) < nl > private lazy val eventBusExt = EventBusExtension ( context . system ) < nl > private lazy val groupExt = GroupExtension ( context . system ) < nl > + private lazy val valuesExt = ValuesExtension ( context . system ) < nl > < nl > case class Device ( < nl > deviceId : EventBus . DeviceId , < nl > @ @ - 76 , 20 + 78 , 37 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > ( peerSettings . map ( _ . canConnect ) . isDefined & & pairPeerSettings . map ( _ . canConnect ) . isDefined ) < nl > } < nl > < nl > + object Pair { < nl > + def apply ( d1 : EventBus . DeviceId , d2 : EventBus . DeviceId ) = { < nl > + require ( d1 ! = d2 ) < nl > + if ( d1 < d2 ) new Pair ( d1 , d2 ) < nl > + else new Pair ( d2 , d1 ) < nl > + } < nl > + } < nl > + class Pair private ( val left : EventBus . DeviceId , val right : EventBus . DeviceId ) < nl > + < nl > + type SessionId = Long < nl > + < nl > private var scheduledUpds = Map . empty [ UserId , Cancellable ] < nl > private var devices = Map . empty [ EventBus . DeviceId , Device ] < nl > private var clients = Map . empty [ EventBus . Client , EventBus . DeviceId ] < nl > + private var participants = Map . empty [ UserId , ApiCallMemberState . Value ] < nl > + private var sessions = Map . empty [ Pair , SessionId ] < nl > + private var peer = Peer ( ) < nl > + private var callerUserId : Int = _ < nl > < nl > def receive = waitForStart < nl > < nl > def waitForStart : Receive = { < nl > - case StartCall ( callerUserId , peer , eventBusId ) ⇒ < nl > + case s : StartCall ⇒ < nl > case class Res ( callees : Seq [ Int ] , callerDeviceId : EventBus . DeviceId ) < nl > + this . peer = s . peer < nl > + this . callerUserId = s . callerUserId < nl > < nl > ( for { < nl > callees ← fetchParticipants ( callerUserId , peer ) map ( _ filterNot ( _ = = callerUserId ) ) < nl > - callerDeviceId ← eventBusExt . fetchOwner ( eventBusId ) < nl > - _ ← eventBusExt . join ( EventBus . InternalClient ( self ) , eventBusId , None ) < nl > + callerDeviceId ← eventBusExt . fetchOwner ( s . eventBusId ) < nl > + _ ← eventBusExt . join ( EventBus . InternalClient ( self ) , s . eventBusId , None ) < nl > } yield Res ( callees , callerDeviceId ) ) pipeTo self < nl > < nl > becomeStashing ( replyTo ⇒ { < nl > @ @ - 97 , 9 + 116 , 13 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > scheduleIncomingCallUpdates ( callees ) < nl > replyTo ! StartCallAck < nl > < nl > - eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( callerDeviceId ) , ApiAdvertiseMaster . toByteArray ) < nl > + eventBusExt . post ( EventBus . InternalClient ( self ) , s . eventBusId , Seq ( callerDeviceId ) , ApiAdvertiseMaster . toByteArray ) < nl > + < nl > + callees foreach ( putParticipant ( _ , ApiCallMemberState . RINGING ) ) < nl > + putParticipant ( callerUserId , ApiCallMemberState . CONNECTED ) < nl > + broadcastSyncedSet ( ) < nl > < nl > - context become callInProgress ( peer , eventBusId , callerDeviceId , System . currentTimeMillis ( ) , callerUserId , callees : + callerUserId ) < nl > + context become callInProgress ( peer , s . eventBusId , callerDeviceId , System . currentTimeMillis ( ) , callerUserId ) < nl > unstashAll ( ) < nl > case failure : Status . Failure ⇒ < nl > replyTo forward failure < nl > @ @ - 113 , 8 + 136 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > eventBusId : String , < nl > callerDeviceId : EventBus . DeviceId , < nl > startTime : Long , < nl > - callerUserId : Int , < nl > - participants : Seq [ Int ] < nl > + callerUserId : Int < nl > ) : Receive = { < nl > def end ( ) : Unit = { < nl > val duration = ( ( System . currentTimeMillis ( ) - startTime ) / 1000 ) . toInt < nl > @ @ - 122 , 7 + 144 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > val smsg = ApiServiceMessage ( " Call ended " , Some ( ApiServiceExPhoneCall ( duration ) ) ) < nl > < nl > ( for { < nl > - _ ← if ( peer . ` type ` . isPrivate ) FutureExt . ftraverse ( participants ) ( userId ⇒ dialogExt . sendMessage ( < nl > + _ ← if ( peer . ` type ` . isPrivate ) FutureExt . ftraverse ( participants . keySet . toSeq ) ( userId ⇒ dialogExt . sendMessage ( < nl > peer = ApiPeer ( ApiPeerType . Private , userId ) , < nl > senderUserId = callerUserId , < nl > senderAuthId = None , < nl > @ @ - 145 , 13 + 167 , 16 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > } < nl > } < nl > < nl > - def connect ( device : Device , pairDevice : Device ) : Unit = { < nl > + def connect ( device : Device , pairDevice : Device ) : SessionId = { < nl > + val sessionId = Random . nextLong ( ) < nl > eventBusExt . post ( < nl > EventBus . InternalClient ( self ) , < nl > eventBusId , < nl > Seq ( device . deviceId ) , < nl > - ApiNeedOffer ( pairDevice . deviceId , Random . nextLong ( ) , pairDevice . peerSettings ) . toByteArray < nl > + ApiNeedOffer ( pairDevice . deviceId , sessionId , pairDevice . peerSettings ) . toByteArray < nl > ) < nl > + sessions + = Pair ( device . deviceId , pairDevice . deviceId ) → sessionId < nl > + sessionId < nl > } < nl > < nl > { < nl > @ @ - 165 , 25 + 190 , 33 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > case Some ( device ) ⇒ < nl > putDevice ( device . deviceId , client , device . copy ( isJoined = true ) ) < nl > cancelIncomingCallUpdates ( userId ) < nl > + < nl > weakUpdExt . broadcastUserWeakUpdate ( userId , UpdateCallHandled ( id ) , excludeAuthIds = Set ( authId ) ) < nl > devices . view filterNot ( _ . _ 1 = = device . deviceId ) filter ( _ . _ 2 . isJoined ) foreach { < nl > case ( _ , pairDevice ) ⇒ < nl > - if ( ! device . canConnect ( pairDevice . peerSettings ) ) / / if we didn ' t connect them in AdvertiseSelf < nl > - connect ( device , pairDevice ) < nl > + val sessionId = < nl > + sessions . getOrElse ( Pair ( device . deviceId , pairDevice . deviceId ) , connect ( device , pairDevice ) ) < nl > < nl > eventBusExt . post ( < nl > EventBus . InternalClient ( self ) , < nl > eventBusId , < nl > Seq ( device . deviceId ) , < nl > - ApiEnableConnection ( pairDevice . deviceId , 1L ) . toByteArray < nl > + ApiEnableConnection ( pairDevice . deviceId , sessionId ) . toByteArray < nl > ) < nl > eventBusExt . post ( < nl > EventBus . InternalClient ( self ) , < nl > eventBusId , < nl > Seq ( pairDevice . deviceId ) , < nl > - ApiEnableConnection ( device . deviceId , 1L ) . toByteArray < nl > + ApiEnableConnection ( device . deviceId , sessionId ) . toByteArray < nl > ) < nl > } < nl > + < nl > + val userDevices = devices . filter ( _ . _ 2 . client . externalUserId . contains ( userId ) ) . values . map ( _ . deviceId ) . toSet < nl > + if ( ! sessions . keySet . exists ( pair ⇒ userDevices . contains ( pair . left ) | | userDevices . contains ( pair . right ) ) ) { < nl > + putParticipant ( userId , ApiCallMemberState . CONNECTING ) < nl > + broadcastSyncedSet ( ) < nl > + } < nl > + < nl > sender ( ) ! JoinCallAck < nl > case None ⇒ < nl > sender ( ) ! Status . Failure ( WebrtcCallErrors . NotJoinedToEventBus ) < nl > @ @ - 191 , 9 + 224 , 10 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > case RejectCall ( userId , authId ) ⇒ < nl > cancelIncomingCallUpdates ( userId ) < nl > weakUpdExt . broadcastUserWeakUpdate ( userId , UpdateCallHandled ( id ) , excludeAuthIds = Set ( authId ) ) < nl > + broadcastSyncedSet ( ) < nl > sender ( ) ! RejectCallAck < nl > case GetInfo ⇒ < nl > - sender ( ) ! GetInfoAck ( eventBusId , callerUserId , participants ) < nl > + sender ( ) ! GetInfoAck ( eventBusId , callerUserId , participants . keySet . toSeq ) < nl > case EventBus . Joined ( _ , client , deviceId ) ⇒ < nl > if ( client . isExternal ) < nl > eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( deviceId ) , ApiAdvertiseMaster . toByteArray ) < nl > @ @ - 208 , 12 + 242 , 41 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > connect ( newDevice , pairDevice ) < nl > } < nl > putDevice ( deviceId , ebMessage . client , newDevice ) < nl > + < nl > + for { < nl > + userId ← ebMessage . client . externalUserId < nl > + state ← participants . get ( userId ) < nl > + } yield if ( state = = ApiCallMemberState . RINGING ) putParticipant ( userId , ApiCallMemberState . RINGING _ REACHED ) < nl > + } < nl > + case msg : ApiNegotinationSuccessful ⇒ < nl > + ebMessage . client . externalUserId foreach { userId ⇒ < nl > + putParticipant ( userId , ApiCallMemberState . CONNECTED ) < nl > + broadcastSyncedSet ( ) < nl > } < nl > case _ ⇒ < nl > } < nl > - case EventBus . Disconnected ( _ , client , deviceId ) ⇒ removeDevice ( deviceId ) < nl > - case EventBus . Disposed ( _ ) ⇒ end ( ) < nl > - case _ : StartCall ⇒ sender ( ) ! WebrtcCallErrors . CallAlreadyStarted < nl > + case EventBus . Disconnected ( _ , client , deviceId ) ⇒ < nl > + removeDevice ( deviceId ) < nl > + client . externalUserId foreach { userId ⇒ < nl > + putParticipant ( userId , ApiCallMemberState . ENDED ) < nl > + broadcastSyncedSet ( ) < nl > + } < nl > + case EventBus . Disposed ( _ ) ⇒ < nl > + end ( ) < nl > + deleteSyncedSet ( ) < nl > + case _ : StartCall ⇒ sender ( ) ! WebrtcCallErrors . CallAlreadyStarted < nl > + } < nl > + } < nl > + < nl > + private def putParticipant ( userId : Int , state : ApiCallMemberState . Value ) : Unit = { < nl > + participants get userId match { < nl > + case Some ( oldState ) ⇒ < nl > + if ( oldState ! = state ) { < nl > + log . debug ( " Changing participant { } state from { } to { } " , userId , oldState , state ) < nl > + participants + = userId → state < nl > + } else log . error ( " Attempt to change participant state to the same value { } " , state ) < nl > + case None ⇒ < nl > + log . error ( " Attempt to change state of a non - participant { } " , userId ) < nl > } < nl > } < nl > < nl > @ @ - 255 , 6 + 318 , 28 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > scheduledUpds - = callee < nl > } < nl > < nl > + private def broadcastSyncedSet ( ) : Unit = { < nl > + val activeCall = < nl > + ApiActiveCall ( id , peer . asStruct , participants . toVector map { < nl > + case ( userId , state ) ⇒ < nl > + < nl > + ApiCallMember ( userId , ApiCallMemberStateHolder ( < nl > + state = state , < nl > + fallbackIsRinging = Some ( state = = ApiCallMemberState . RINGING ) , < nl > + fallbackIsConnected = Some ( state = = ApiCallMemberState . CONNECTED ) , < nl > + fallbackIsConnecting = Some ( state = = ApiCallMemberState . CONNECTING ) , < nl > + fallbackIsRingingReached = Some ( state = = ApiCallMemberState . RINGING _ REACHED ) , < nl > + fallbackIsEnded = Some ( state = = ApiCallMemberState . ENDED ) < nl > + ) ) < nl > + } ) . toByteArray < nl > + participants . keySet foreach ( valuesExt . syncedSet . put ( _ , Webrtc . SyncedSetName , id , activeCall ) ) < nl > + } < nl > + < nl > + private def deleteSyncedSet ( ) : Unit = < nl > + participants . keySet foreach { userId ⇒ < nl > + valuesExt . syncedSet . delete ( userId , Webrtc . SyncedSetName , id ) < nl > + } < nl > + < nl > override def postStop ( ) : Unit = { < nl > scheduledUpds . values foreach ( _ . cancel ( ) ) < nl > super . postStop ( ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala < nl > index 20f3b79 . . 1bc2157 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala < nl > @ @ - 14 , 6 + 14 , 7 @ @ import scala . concurrent . forkjoin . ThreadLocalRandom < nl > < nl > object Webrtc { < nl > val WeakGroup = " webrtc _ calls " < nl > + val SyncedSetName = " messaging . calls " < nl > } < nl > < nl > final class WebrtcExtension ( system : ActorSystem ) extends Extension { < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala < nl > new file mode 100644 < nl > index 0000000 . . 8941fdd < nl > - - - / dev / null < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala < nl > @ @ - 0 , 0 + 1 , 33 @ @ < nl > + package im . actor . server . api . rpc . service . values < nl > + < nl > + import akka . actor . ActorSystem < nl > + import im . actor . api . rpc . _ < nl > + import im . actor . api . rpc . values . { ResponseLoadSyncedSet , ValuesService } < nl > + import im . actor . server . session . { SessionEnvelope , SessionRegion , SubscribeToWeak } < nl > + import im . actor . server . values . ValuesExtension < nl > + < nl > + import scala . concurrent . { ExecutionContext , Future } < nl > + < nl > + final class ValuesServiceImpl ( implicit system : ActorSystem , sessionRegion : SessionRegion ) extends ValuesService { < nl > + override implicit protected val ec : ExecutionContext = system . dispatcher < nl > + private val valuesExt = ValuesExtension ( system ) < nl > + < nl > + / * * < nl > + * Loading synced set < nl > + * < nl > + * @ param setName readable name of the set < nl > + * / < nl > + override protected def doHandleLoadSyncedSet ( < nl > + setName : String , < nl > + clientData : ClientData < nl > + ) : Future [ HandlerResult [ ResponseLoadSyncedSet ] ] = < nl > + authorized ( clientData ) { client ⇒ < nl > + sessionRegion . ref ! < nl > + SessionEnvelope ( clientData . authId , clientData . sessionId ) < nl > + . withSubscribeToWeak ( SubscribeToWeak ( Some ( valuesExt . syncedSet . weakGroup ( setName ) ) ) ) < nl > + < nl > + for { < nl > + values ← valuesExt . syncedSet . loadApiValues ( client . userId , setName ) < nl > + } yield Ok ( ResponseLoadSyncedSet ( values , isStrong = Some ( false ) ) ) < nl > + } < nl > + } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 index 5dc121c . . 8b8db9d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 @ @ - 18 , 16 + 18 , 21 @ @ object EventBus { 
 sealed trait Client { 
 def isInternal : Boolean 
 def isExternal : Boolean 
 + def externalUserId : Option [ UserId ] 
 } 
 final case class InternalClient ( ref : ActorRef ) extends Client { 
 override def isInternal : Boolean = true 
 
 override def isExternal : Boolean = false 
 + 
 + override def externalUserId : Option [ UserId ] = None 
 } 
 final case class ExternalClient ( userId : UserId , authId : AuthId ) extends Client { 
 override def isInternal : Boolean = false 
 
 override def isExternal : Boolean = true 
 + 
 + override def externalUserId : Option [ UserId ] = Some ( userId ) 
 } 
 
 final case class Message ( id : String , client : Client , deviceId : Option [ Long ] , message : Array [ Byte ] ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / values / SyncedSet . scala b / actor - server / actor - core / src / main / scala / im / actor / server / values / SyncedSet . scala 
 new file mode 100644 
 index 0000000 . . a88a913 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / values / SyncedSet . scala 
 @ @ - 0 , 0 + 1 , 102 @ @ 
 + package im . actor . server . values 
 + 
 + import akka . actor . { ActorSystem , Props } 
 + import akka . cluster . sharding . { ClusterSharding , ClusterShardingSettings } 
 + import akka . pattern . ask 
 + import akka . util . Timeout 
 + import im . actor . api . rpc . values . { ApiSyncedValue , UpdateSyncedSetAddedOrUpdated , UpdateSyncedSetRemoved , UpdateSynedSetUpdated } 
 + import im . actor . concurrent . AlertingActor 
 + import im . actor . server . sequence . WeakUpdatesExtension 
 + 
 + import scala . concurrent . Future 
 + 
 + private [ values ] trait SyncedSet { 
 + import SyncedSetValue . _ 
 + 
 + val system : ActorSystem 
 + import system . dispatcher 
 + 
 + implicit val defaultTimeout : Timeout 
 + 
 + object syncedSet { 
 + private val region = 
 + ClusterSharding ( system ) 
 + . start ( 
 + " Values . SyncedSet " , 
 + props , 
 + ClusterShardingSettings ( system ) , 
 + { 
 + case Envelope ( userId , name , msg ) ⇒ ( s " $ { userId } _ $ name " , msg ) 
 + } , 
 + { 
 + case Envelope ( userId , _ , _ ) ⇒ ( userId % 100 ) . toString 
 + } 
 + ) 
 + 
 + def weakGroup ( name : String ) = name 
 + 
 + def loadApiValues ( userId : Int , name : String ) : Future [ Vector [ ApiSyncedValue ] ] = 
 + ( region ? Envelope ( userId , name , LoadApiValues ) ) . mapTo [ LoadApiValuesAck ] map ( _ . values ) 
 + 
 + def put ( userId : Int , name : String , key : Long , value : Array [ Byte ] ) : Future [ Unit ] = 
 + ( region ? Envelope ( userId , name , Put ( Seq ( key → Some ( value ) ) ) ) ) map ( _ ⇒ ( ) ) 
 + 
 + def delete ( userId : Int , name : String , key : Long ) : Future [ Unit ] = 
 + ( region ? Envelope ( userId , name , Delete ( Seq ( key ) ) ) ) map ( _ ⇒ ( ) ) 
 + } 
 + } 
 + 
 + private object SyncedSetValue { 
 + sealed trait Message 
 + final case class Envelope ( userId : Int , name : String , message : Message ) 
 + 
 + final case class Put ( values : Seq [ ( Long , Option [ Array [ Byte ] ] ) ] ) extends Message 
 + case object PutAck 
 + 
 + final case class Delete ( ids : Seq [ Long ] ) extends Message 
 + case object DeleteAck 
 + 
 + final case class ReplaceAll ( values : Seq [ ( Long , Option [ Array [ Byte ] ] ) ] ) extends Message 
 + case object ReplaceAllAck 
 + 
 + case object LoadApiValues extends Message 
 + final case class LoadApiValuesAck ( values : Vector [ ApiSyncedValue ] ) 
 + 
 + def props = Props ( classOf [ SyncedSetValue ] ) 
 + } 
 + 
 + private final class SyncedSetValue extends AlertingActor { 
 + import SyncedSetValue . _ 
 + 
 + private val ( userId , name ) = self . path . name . split ( " _ " ) . toList match { 
 + case id : : n : : Nil ⇒ ( id . toInt , n ) 
 + case _ ⇒ throw new RuntimeException ( " Wrong path " ) 
 + } 
 + 
 + private val weakUpdExt = WeakUpdatesExtension ( context . system ) 
 + 
 + private var set = Map . empty [ Long , Option [ Array [ Byte ] ] ] 
 + 
 + def receive = { 
 + case Put ( values ) ⇒ 
 + set + + = values 
 + val update = UpdateSyncedSetAddedOrUpdated ( name , apiValues ( values ) ) 
 + weakUpdExt . broadcastUserWeakUpdate ( userId , update ) 
 + sender ( ) ! PutAck 
 + case Delete ( ids ) ⇒ 
 + set - - = ids 
 + val update = UpdateSyncedSetRemoved ( name , ids . toVector ) 
 + weakUpdExt . broadcastUserWeakUpdate ( userId , update ) 
 + sender ( ) ! DeleteAck 
 + case ReplaceAll ( values ) ⇒ 
 + set = values . toMap 
 + val update = UpdateSynedSetUpdated ( name , apiValues ( set . toSeq ) , isStrong = Some ( false ) ) 
 + weakUpdExt . broadcastUserWeakUpdate ( userId , update ) 
 + sender ( ) ! ReplaceAllAck 
 + case LoadApiValues ⇒ 
 + sender ( ) ! LoadApiValuesAck ( apiValues ( set . toSeq ) ) 
 + } 
 + 
 + private def apiValues ( values : Seq [ ( Long , Option [ Array [ Byte ] ] ) ] ) : Vector [ ApiSyncedValue ] = 
 + values . toVector map { case ( id , value ) ⇒ ApiSyncedValue ( id , value ) } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / values / ValuesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / values / ValuesExtension . scala 
 new file mode 100644 
 index 0000000 . . 2f7330a 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / values / ValuesExtension . scala 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package im . actor . server . values 
 + 
 + import akka . actor . { ActorSystem , ExtendedActorSystem , Extension , ExtensionId , ExtensionIdProvider } 
 + import akka . util . Timeout 
 + import im . actor . config . ActorConfig 
 + 
 + final class ValuesExtension ( val system : ActorSystem ) extends Extension with SyncedSet { 
 + val defaultTimeout = Timeout ( ActorConfig . defaultTimeout ) 
 + } 
 + 
 + object ValuesExtension extends ExtensionId [ ValuesExtension ] with ExtensionIdProvider { 
 + override def createExtension ( system : ExtendedActorSystem ) : ValuesExtension = new ValuesExtension ( system ) 
 + 
 + override def lookup ( ) : ExtensionId [ _ < : Extension ] = ValuesExtension 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index 2da74fd . . f6d4dfb 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . server . eventbus . { EventBus , EventBusExtension } 
 import im . actor . server . group . GroupExtension 
 import im . actor . server . model . { Peer , PeerType } 
 import im . actor . server . sequence . WeakUpdatesExtension 
 + import im . actor . server . values . ValuesExtension 
 import im . actor . types . _ 
 
 import scala . concurrent . duration . _ 
 @ @ - 64 , 6 + 65 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 private lazy val dialogExt = DialogExtension ( context . system ) 
 private lazy val eventBusExt = EventBusExtension ( context . system ) 
 private lazy val groupExt = GroupExtension ( context . system ) 
 + private lazy val valuesExt = ValuesExtension ( context . system ) 
 
 case class Device ( 
 deviceId : EventBus . DeviceId , 
 @ @ - 76 , 20 + 78 , 37 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 ( peerSettings . map ( _ . canConnect ) . isDefined & & pairPeerSettings . map ( _ . canConnect ) . isDefined ) 
 } 
 
 + object Pair { 
 + def apply ( d1 : EventBus . DeviceId , d2 : EventBus . DeviceId ) = { 
 + require ( d1 ! = d2 ) 
 + if ( d1 < d2 ) new Pair ( d1 , d2 ) 
 + else new Pair ( d2 , d1 ) 
 + } 
 + } 
 + class Pair private ( val left : EventBus . DeviceId , val right : EventBus . DeviceId ) 
 + 
 + type SessionId = Long 
 + 
 private var scheduledUpds = Map . empty [ UserId , Cancellable ] 
 private var devices = Map . empty [ EventBus . DeviceId , Device ] 
 private var clients = Map . empty [ EventBus . Client , EventBus . DeviceId ] 
 + private var participants = Map . empty [ UserId , ApiCallMemberState . Value ] 
 + private var sessions = Map . empty [ Pair , SessionId ] 
 + private var peer = Peer ( ) 
 + private var callerUserId : Int = _ 
 
 def receive = waitForStart 
 
 def waitForStart : Receive = { 
 - case StartCall ( callerUserId , peer , eventBusId ) ⇒ 
 + case s : StartCall ⇒ 
 case class Res ( callees : Seq [ Int ] , callerDeviceId : EventBus . DeviceId ) 
 + this . peer = s . peer 
 + this . callerUserId = s . callerUserId 
 
 ( for { 
 callees ← fetchParticipants ( callerUserId , peer ) map ( _ filterNot ( _ = = callerUserId ) ) 
 - callerDeviceId ← eventBusExt . fetchOwner ( eventBusId ) 
 - _ ← eventBusExt . join ( EventBus . InternalClient ( self ) , eventBusId , None ) 
 + callerDeviceId ← eventBusExt . fetchOwner ( s . eventBusId ) 
 + _ ← eventBusExt . join ( EventBus . InternalClient ( self ) , s . eventBusId , None ) 
 } yield Res ( callees , callerDeviceId ) ) pipeTo self 
 
 becomeStashing ( replyTo ⇒ { 
 @ @ - 97 , 9 + 116 , 13 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 scheduleIncomingCallUpdates ( callees ) 
 replyTo ! StartCallAck 
 
 - eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( callerDeviceId ) , ApiAdvertiseMaster . toByteArray ) 
 + eventBusExt . post ( EventBus . InternalClient ( self ) , s . eventBusId , Seq ( callerDeviceId ) , ApiAdvertiseMaster . toByteArray ) 
 + 
 + callees foreach ( putParticipant ( _ , ApiCallMemberState . RINGING ) ) 
 + putParticipant ( callerUserId , ApiCallMemberState . CONNECTED ) 
 + broadcastSyncedSet ( ) 
 
 - context become callInProgress ( peer , eventBusId , callerDeviceId , System . currentTimeMillis ( ) , callerUserId , callees : + callerUserId ) 
 + context become callInProgress ( peer , s . eventBusId , callerDeviceId , System . currentTimeMillis ( ) , callerUserId ) 
 unstashAll ( ) 
 case failure : Status . Failure ⇒ 
 replyTo forward failure 
 @ @ - 113 , 8 + 136 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 eventBusId : String , 
 callerDeviceId : EventBus . DeviceId , 
 startTime : Long , 
 - callerUserId : Int , 
 - participants : Seq [ Int ] 
 + callerUserId : Int 
 ) : Receive = { 
 def end ( ) : Unit = { 
 val duration = ( ( System . currentTimeMillis ( ) - startTime ) / 1000 ) . toInt 
 @ @ - 122 , 7 + 144 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 val smsg = ApiServiceMessage ( " Call ended " , Some ( ApiServiceExPhoneCall ( duration ) ) ) 
 
 ( for { 
 - _ ← if ( peer . ` type ` . isPrivate ) FutureExt . ftraverse ( participants ) ( userId ⇒ dialogExt . sendMessage ( 
 + _ ← if ( peer . ` type ` . isPrivate ) FutureExt . ftraverse ( participants . keySet . toSeq ) ( userId ⇒ dialogExt . sendMessage ( 
 peer = ApiPeer ( ApiPeerType . Private , userId ) , 
 senderUserId = callerUserId , 
 senderAuthId = None , 
 @ @ - 145 , 13 + 167 , 16 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 } 
 } 
 
 - def connect ( device : Device , pairDevice : Device ) : Unit = { 
 + def connect ( device : Device , pairDevice : Device ) : SessionId = { 
 + val sessionId = Random . nextLong ( ) 
 eventBusExt . post ( 
 EventBus . InternalClient ( self ) , 
 eventBusId , 
 Seq ( device . deviceId ) , 
 - ApiNeedOffer ( pairDevice . deviceId , Random . nextLong ( ) , pairDevice . peerSettings ) . toByteArray 
 + ApiNeedOffer ( pairDevice . deviceId , sessionId , pairDevice . peerSettings ) . toByteArray 
 ) 
 + sessions + = Pair ( device . deviceId , pairDevice . deviceId ) → sessionId 
 + sessionId 
 } 
 
 { 
 @ @ - 165 , 25 + 190 , 33 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 case Some ( device ) ⇒ 
 putDevice ( device . deviceId , client , device . copy ( isJoined = true ) ) 
 cancelIncomingCallUpdates ( userId ) 
 + 
 weakUpdExt . broadcastUserWeakUpdate ( userId , UpdateCallHandled ( id ) , excludeAuthIds = Set ( authId ) ) 
 devices . view filterNot ( _ . _ 1 = = device . deviceId ) filter ( _ . _ 2 . isJoined ) foreach { 
 case ( _ , pairDevice ) ⇒ 
 - if ( ! device . canConnect ( pairDevice . peerSettings ) ) / / if we didn ' t connect them in AdvertiseSelf 
 - connect ( device , pairDevice ) 
 + val sessionId = 
 + sessions . getOrElse ( Pair ( device . deviceId , pairDevice . deviceId ) , connect ( device , pairDevice ) ) 
 
 eventBusExt . post ( 
 EventBus . InternalClient ( self ) , 
 eventBusId , 
 Seq ( device . deviceId ) , 
 - ApiEnableConnection ( pairDevice . deviceId , 1L ) . toByteArray 
 + ApiEnableConnection ( pairDevice . deviceId , sessionId ) . toByteArray 
 ) 
 eventBusExt . post ( 
 EventBus . InternalClient ( self ) , 
 eventBusId , 
 Seq ( pairDevice . deviceId ) , 
 - ApiEnableConnection ( device . deviceId , 1L ) . toByteArray 
 + ApiEnableConnection ( device . deviceId , sessionId ) . toByteArray 
 ) 
 } 
 + 
 + val userDevices = devices . filter ( _ . _ 2 . client . externalUserId . contains ( userId ) ) . values . map ( _ . deviceId ) . toSet 
 + if ( ! sessions . keySet . exists ( pair ⇒ userDevices . contains ( pair . left ) | | userDevices . contains ( pair . right ) ) ) { 
 + putParticipant ( userId , ApiCallMemberState . CONNECTING ) 
 + broadcastSyncedSet ( ) 
 + } 
 + 
 sender ( ) ! JoinCallAck 
 case None ⇒ 
 sender ( ) ! Status . Failure ( WebrtcCallErrors . NotJoinedToEventBus ) 
 @ @ - 191 , 9 + 224 , 10 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 case RejectCall ( userId , authId ) ⇒ 
 cancelIncomingCallUpdates ( userId ) 
 weakUpdExt . broadcastUserWeakUpdate ( userId , UpdateCallHandled ( id ) , excludeAuthIds = Set ( authId ) ) 
 + broadcastSyncedSet ( ) 
 sender ( ) ! RejectCallAck 
 case GetInfo ⇒ 
 - sender ( ) ! GetInfoAck ( eventBusId , callerUserId , participants ) 
 + sender ( ) ! GetInfoAck ( eventBusId , callerUserId , participants . keySet . toSeq ) 
 case EventBus . Joined ( _ , client , deviceId ) ⇒ 
 if ( client . isExternal ) 
 eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( deviceId ) , ApiAdvertiseMaster . toByteArray ) 
 @ @ - 208 , 12 + 242 , 41 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 connect ( newDevice , pairDevice ) 
 } 
 putDevice ( deviceId , ebMessage . client , newDevice ) 
 + 
 + for { 
 + userId ← ebMessage . client . externalUserId 
 + state ← participants . get ( userId ) 
 + } yield if ( state = = ApiCallMemberState . RINGING ) putParticipant ( userId , ApiCallMemberState . RINGING _ REACHED ) 
 + } 
 + case msg : ApiNegotinationSuccessful ⇒ 
 + ebMessage . client . externalUserId foreach { userId ⇒ 
 + putParticipant ( userId , ApiCallMemberState . CONNECTED ) 
 + broadcastSyncedSet ( ) 
 } 
 case _ ⇒ 
 } 
 - case EventBus . Disconnected ( _ , client , deviceId ) ⇒ removeDevice ( deviceId ) 
 - case EventBus . Disposed ( _ ) ⇒ end ( ) 
 - case _ : StartCall ⇒ sender ( ) ! WebrtcCallErrors . CallAlreadyStarted 
 + case EventBus . Disconnected ( _ , client , deviceId ) ⇒ 
 + removeDevice ( deviceId ) 
 + client . externalUserId foreach { userId ⇒ 
 + putParticipant ( userId , ApiCallMemberState . ENDED ) 
 + broadcastSyncedSet ( ) 
 + } 
 + case EventBus . Disposed ( _ ) ⇒ 
 + end ( ) 
 + deleteSyncedSet ( ) 
 + case _ : StartCall ⇒ sender ( ) ! WebrtcCallErrors . CallAlreadyStarted 
 + } 
 + } 
 + 
 + private def putParticipant ( userId : Int , state : ApiCallMemberState . Value ) : Unit = { 
 + participants get userId match { 
 + case Some ( oldState ) ⇒ 
 + if ( oldState ! = state ) { 
 + log . debug ( " Changing participant { } state from { } to { } " , userId , oldState , state ) 
 + participants + = userId → state 
 + } else log . error ( " Attempt to change participant state to the same value { } " , state ) 
 + case None ⇒ 
 + log . error ( " Attempt to change state of a non - participant { } " , userId ) 
 } 
 } 
 
 @ @ - 255 , 6 + 318 , 28 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 scheduledUpds - = callee 
 } 
 
 + private def broadcastSyncedSet ( ) : Unit = { 
 + val activeCall = 
 + ApiActiveCall ( id , peer . asStruct , participants . toVector map { 
 + case ( userId , state ) ⇒ 
 + 
 + ApiCallMember ( userId , ApiCallMemberStateHolder ( 
 + state = state , 
 + fallbackIsRinging = Some ( state = = ApiCallMemberState . RINGING ) , 
 + fallbackIsConnected = Some ( state = = ApiCallMemberState . CONNECTED ) , 
 + fallbackIsConnecting = Some ( state = = ApiCallMemberState . CONNECTING ) , 
 + fallbackIsRingingReached = Some ( state = = ApiCallMemberState . RINGING _ REACHED ) , 
 + fallbackIsEnded = Some ( state = = ApiCallMemberState . ENDED ) 
 + ) ) 
 + } ) . toByteArray 
 + participants . keySet foreach ( valuesExt . syncedSet . put ( _ , Webrtc . SyncedSetName , id , activeCall ) ) 
 + } 
 + 
 + private def deleteSyncedSet ( ) : Unit = 
 + participants . keySet foreach { userId ⇒ 
 + valuesExt . syncedSet . delete ( userId , Webrtc . SyncedSetName , id ) 
 + } 
 + 
 override def postStop ( ) : Unit = { 
 scheduledUpds . values foreach ( _ . cancel ( ) ) 
 super . postStop ( ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala 
 index 20f3b79 . . 1bc2157 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala 
 @ @ - 14 , 6 + 14 , 7 @ @ import scala . concurrent . forkjoin . ThreadLocalRandom 
 
 object Webrtc { 
 val WeakGroup = " webrtc _ calls " 
 + val SyncedSetName = " messaging . calls " 
 } 
 
 final class WebrtcExtension ( system : ActorSystem ) extends Extension { 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala 
 new file mode 100644 
 index 0000000 . . 8941fdd 
 - - - / dev / null 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + package im . actor . server . api . rpc . service . values 
 + 
 + import akka . actor . ActorSystem 
 + import im . actor . api . rpc . _ 
 + import im . actor . api . rpc . values . { ResponseLoadSyncedSet , ValuesService } 
 + import im . actor . server . session . { SessionEnvelope , SessionRegion , SubscribeToWeak } 
 + import im . actor . server . values . ValuesExtension 
 + 
 + import scala . concurrent . { ExecutionContext , Future } 
 + 
 + final class ValuesServiceImpl ( implicit system : ActorSystem , sessionRegion : SessionRegion ) extends ValuesService { 
 + override implicit protected val ec : ExecutionContext = system . dispatcher 
 + private val valuesExt = ValuesExtension ( system ) 
 + 
 + / * * 
 + * Loading synced set 
 + * 
 + * @ param setName readable name of the set 
 + * / 
 + override protected def doHandleLoadSyncedSet ( 
 + setName : String , 
 + clientData : ClientData 
 + ) : Future [ HandlerResult [ ResponseLoadSyncedSet ] ] = 
 + authorized ( clientData ) { client ⇒ 
 + sessionRegion . ref ! 
 + SessionEnvelope ( clientData . authId , clientData . sessionId ) 
 + . withSubscribeToWeak ( SubscribeToWeak ( Some ( valuesExt . syncedSet . weakGroup ( setName ) ) ) ) 
 + 
 + for { 
 + values ← valuesExt . syncedSet . loadApiValues ( client . userId , setName ) 
 + } yield Ok ( ResponseLoadSyncedSet ( values , isStrong = Some ( false ) ) ) 
 + } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json 
 index a42904c . . 045606d 100644 
 - - - a / actor - server / actor - core / src / main / actor - api / actor . json 
 + + + b / actor - server / actor - core / src / main / actor - api / actor . json 
 @ @ - 13463 , 6 + 13463 , 59 @ @ 
 } 
 } , 
 { 
 + " type " : " struct " , 
 + " content " : { 
 + " name " : " ActiveCall " , 
 + " doc " : [ 
 + " Active Calls . Used in broadcasting states of current calls . " , 
 + { 
 + " type " : " reference " , 
 + " argument " : " callId " , 
 + " category " : " full " , 
 + " description " : " Call Id " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " peer " , 
 + " category " : " full " , 
 + " description " : " Call ' s peer " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " callMembers " , 
 + " category " : " full " , 
 + " description " : " Call Members " 
 + } 
 + ] , 
 + " attributes " : [ 
 + { 
 + " type " : " int64 " , 
 + " id " : 1 , 
 + " name " : " callId " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " struct " , 
 + " childType " : " Peer " 
 + } , 
 + " id " : 2 , 
 + " name " : " peer " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " list " , 
 + " childType " : { 
 + " type " : " struct " , 
 + " childType " : " CallMember " 
 + } 
 + } , 
 + " id " : 3 , 
 + " name " : " callMembers " 
 + } 
 + ] 
 + } 
 + } , 
 + { 
 " type " : " enum " , 
 " content " : { 
 " name " : " CallMemberState " , 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 index 5dc121c . . 8b8db9d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 @ @ - 18 , 16 + 18 , 21 @ @ object EventBus { 
 sealed trait Client { 
 def isInternal : Boolean 
 def isExternal : Boolean 
 + def externalUserId : Option [ UserId ] 
 } 
 final case class InternalClient ( ref : ActorRef ) extends Client { 
 override def isInternal : Boolean = true 
 
 override def isExternal : Boolean = false 
 + 
 + override def externalUserId : Option [ UserId ] = None 
 } 
 final case class ExternalClient ( userId : UserId , authId : AuthId ) extends Client { 
 override def isInternal : Boolean = false 
 
 override def isExternal : Boolean = true 
 + 
 + override def externalUserId : Option [ UserId ] = Some ( userId ) 
 } 
 
 final case class Message ( id : String , client : Client , deviceId : Option [ Long ] , message : Array [ Byte ] ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / values / SyncedSet . scala b / actor - server / actor - core / src / main / scala / im / actor / server / values / SyncedSet . scala 
 new file mode 100644 
 index 0000000 . . a88a913 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / values / SyncedSet . scala 
 @ @ - 0 , 0 + 1 , 102 @ @ 
 + package im . actor . server . values 
 + 
 + import akka . actor . { ActorSystem , Props } 
 + import akka . cluster . sharding . { ClusterSharding , ClusterShardingSettings } 
 + import akka . pattern . ask 
 + import akka . util . Timeout 
 + import im . actor . api . rpc . values . { ApiSyncedValue , UpdateSyncedSetAddedOrUpdated , UpdateSyncedSetRemoved , UpdateSynedSetUpdated } 
 + import im . actor . concurrent . AlertingActor 
 + import im . actor . server . sequence . WeakUpdatesExtension 
 + 
 + import scala . concurrent . Future 
 + 
 + private [ values ] trait SyncedSet { 
 + import SyncedSetValue . _ 
 + 
 + val system : ActorSystem 
 + import system . dispatcher 
 + 
 + implicit val defaultTimeout : Timeout 
 + 
 + object syncedSet { 
 + private val region = 
 + ClusterSharding ( system ) 
 + . start ( 
 + " Values . SyncedSet " , 
 + props , 
 + ClusterShardingSettings ( system ) , 
 + { 
 + case Envelope ( userId , name , msg ) ⇒ ( s " $ { userId } _ $ name " , msg ) 
 + } , 
 + { 
 + case Envelope ( userId , _ , _ ) ⇒ ( userId % 100 ) . toString 
 + } 
 + ) 
 + 
 + def weakGroup ( name : String ) = name 
 + 
 + def loadApiValues ( userId : Int , name : String ) : Future [ Vector [ ApiSyncedValue ] ] = 
 + ( region ? Envelope ( userId , name , LoadApiValues ) ) . mapTo [ LoadApiValuesAck ] map ( _ . values ) 
 + 
 + def put ( userId : Int , name : String , key : Long , value : Array [ Byte ] ) : Future [ Unit ] = 
 + ( region ? Envelope ( userId , name , Put ( Seq ( key → Some ( value ) ) ) ) ) map ( _ ⇒ ( ) ) 
 + 
 + def delete ( userId : Int , name : String , key : Long ) : Future [ Unit ] = 
 + ( region ? Envelope ( userId , name , Delete ( Seq ( key ) ) ) ) map ( _ ⇒ ( ) ) 
 + } 
 + } 
 + 
 + private object SyncedSetValue { 
 + sealed trait Message 
 + final case class Envelope ( userId : Int , name : String , message : Message ) 
 + 
 + final case class Put ( values : Seq [ ( Long , Option [ Array [ Byte ] ] ) ] ) extends Message 
 + case object PutAck 
 + 
 + final case class Delete ( ids : Seq [ Long ] ) extends Message 
 + case object DeleteAck 
 + 
 + final case class ReplaceAll ( values : Seq [ ( Long , Option [ Array [ Byte ] ] ) ] ) extends Message 
 + case object ReplaceAllAck 
 + 
 + case object LoadApiValues extends Message 
 + final case class LoadApiValuesAck ( values : Vector [ ApiSyncedValue ] ) 
 + 
 + def props = Props ( classOf [ SyncedSetValue ] ) 
 + } 
 + 
 + private final class SyncedSetValue extends AlertingActor { 
 + import SyncedSetValue . _ 
 + 
 + private val ( userId , name ) = self . path . name . split ( " _ " ) . toList match { 
 + case id : : n : : Nil ⇒ ( id . toInt , n ) 
 + case _ ⇒ throw new RuntimeException ( " Wrong path " ) 
 + } 
 + 
 + private val weakUpdExt = WeakUpdatesExtension ( context . system ) 
 + 
 + private var set = Map . empty [ Long , Option [ Array [ Byte ] ] ] 
 + 
 + def receive = { 
 + case Put ( values ) ⇒ 
 + set + + = values 
 + val update = UpdateSyncedSetAddedOrUpdated ( name , apiValues ( values ) ) 
 + weakUpdExt . broadcastUserWeakUpdate ( userId , update ) 
 + sender ( ) ! PutAck 
 + case Delete ( ids ) ⇒ 
 + set - - = ids 
 + val update = UpdateSyncedSetRemoved ( name , ids . toVector ) 
 + weakUpdExt . broadcastUserWeakUpdate ( userId , update ) 
 + sender ( ) ! DeleteAck 
 + case ReplaceAll ( values ) ⇒ 
 + set = values . toMap 
 + val update = UpdateSynedSetUpdated ( name , apiValues ( set . toSeq ) , isStrong = Some ( false ) ) 
 + weakUpdExt . broadcastUserWeakUpdate ( userId , update ) 
 + sender ( ) ! ReplaceAllAck 
 + case LoadApiValues ⇒ 
 + sender ( ) ! LoadApiValuesAck ( apiValues ( set . toSeq ) ) 
 + } 
 + 
 + private def apiValues ( values : Seq [ ( Long , Option [ Array [ Byte ] ] ) ] ) : Vector [ ApiSyncedValue ] = 
 + values . toVector map { case ( id , value ) ⇒ ApiSyncedValue ( id , value ) } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / values / ValuesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / values / ValuesExtension . scala 
 new file mode 100644 
 index 0000000 . . 2f7330a 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / values / ValuesExtension . scala 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package im . actor . server . values 
 + 
 + import akka . actor . { ActorSystem , ExtendedActorSystem , Extension , ExtensionId , ExtensionIdProvider } 
 + import akka . util . Timeout 
 + import im . actor . config . ActorConfig 
 + 
 + final class ValuesExtension ( val system : ActorSystem ) extends Extension with SyncedSet { 
 + val defaultTimeout = Timeout ( ActorConfig . defaultTimeout ) 
 + } 
 + 
 + object ValuesExtension extends ExtensionId [ ValuesExtension ] with ExtensionIdProvider { 
 + override def createExtension ( system : ExtendedActorSystem ) : ValuesExtension = new ValuesExtension ( system ) 
 + 
 + override def lookup ( ) : ExtensionId [ _ < : Extension ] = ValuesExtension 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index 2da74fd . . f6d4dfb 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . server . eventbus . { EventBus , EventBusExtension } 
 import im . actor . server . group . GroupExtension 
 import im . actor . server . model . { Peer , PeerType } 
 import im . actor . server . sequence . WeakUpdatesExtension 
 + import im . actor . server . values . ValuesExtension 
 import im . actor . types . _ 
 
 import scala . concurrent . duration . _ 
 @ @ - 64 , 6 + 65 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 private lazy val dialogExt = DialogExtension ( context . system ) 
 private lazy val eventBusExt = EventBusExtension ( context . system ) 
 private lazy val groupExt = GroupExtension ( context . system ) 
 + private lazy val valuesExt = ValuesExtension ( context . system ) 
 
 case class Device ( 
 deviceId : EventBus . DeviceId , 
 @ @ - 76 , 20 + 78 , 37 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 ( peerSettings . map ( _ . canConnect ) . isDefined & & pairPeerSettings . map ( _ . canConnect ) . isDefined ) 
 } 
 
 + object Pair { 
 + def apply ( d1 : EventBus . DeviceId , d2 : EventBus . DeviceId ) = { 
 + require ( d1 ! = d2 ) 
 + if ( d1 < d2 ) new Pair ( d1 , d2 ) 
 + else new Pair ( d2 , d1 ) 
 + } 
 + } 
 + class Pair private ( val left : EventBus . DeviceId , val right : EventBus . DeviceId ) 
 + 
 + type SessionId = Long 
 + 
 private var scheduledUpds = Map . empty [ UserId , Cancellable ] 
 private var devices = Map . empty [ EventBus . DeviceId , Device ] 
 private var clients = Map . empty [ EventBus . Client , EventBus . DeviceId ] 
 + private var participants = Map . empty [ UserId , ApiCallMemberState . Value ] 
 + private var sessions = Map . empty [ Pair , SessionId ] 
 + private var peer = Peer ( ) 
 + private var callerUserId : Int = _ 
 
 def receive = waitForStart 
 
 def waitForStart : Receive = { 
 - case StartCall ( callerUserId , peer , eventBusId ) ⇒ 
 + case s : StartCall ⇒ 
 case class Res ( callees : Seq [ Int ] , callerDeviceId : EventBus . DeviceId ) 
 + this . peer = s . peer 
 + this . callerUserId = s . callerUserId 
 
 ( for { 
 callees ← fetchParticipants ( callerUserId , peer ) map ( _ filterNot ( _ = = callerUserId ) ) 
 - callerDeviceId ← eventBusExt . fetchOwner ( eventBusId ) 
 - _ ← eventBusExt . join ( EventBus . InternalClient ( self ) , eventBusId , None ) 
 + callerDeviceId ← eventBusExt . fetchOwner ( s . eventBusId ) 
 + _ ← eventBusExt . join ( EventBus . InternalClient ( self ) , s . eventBusId , None ) 
 } yield Res ( callees , callerDeviceId ) ) pipeTo self 
 
 becomeStashing ( replyTo ⇒ { 
 @ @ - 97 , 9 + 116 , 13 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 scheduleIncomingCallUpdates ( callees ) 
 replyTo ! StartCallAck 
 
 - eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( callerDeviceId ) , ApiAdvertiseMaster . toByteArray ) 
 + eventBusExt . post ( EventBus . InternalClient ( self ) , s . eventBusId , Seq ( callerDeviceId ) , ApiAdvertiseMaster . toByteArray ) 
 + 
 + callees foreach ( putParticipant ( _ , ApiCallMemberState . RINGING ) ) 
 + putParticipant ( callerUserId , ApiCallMemberState . CONNECTED ) 
 + broadcastSyncedSet ( ) 
 
 - context become callInProgress ( peer , eventBusId , callerDeviceId , System . currentTimeMillis ( ) , callerUserId , callees : + callerUserId ) 
 + context become callInProgress ( peer , s . eventBusId , callerDeviceId , System . currentTimeMillis ( ) , callerUserId ) 
 unstashAll ( ) 
 case failure : Status . Failure ⇒ 
 replyTo forward failure 
 @ @ - 113 , 8 + 136 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 eventBusId : String , 
 callerDeviceId : EventBus . DeviceId , 
 startTime : Long , 
 - callerUserId : Int , 
 - participants : Seq [ Int ] 
 + callerUserId : Int 
 ) : Receive = { 
 def end ( ) : Unit = { 
 val duration = ( ( System . currentTimeMillis ( ) - startTime ) / 1000 ) . toInt 
 @ @ - 122 , 7 + 144 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 val smsg = ApiServiceMessage ( " Call ended " , Some ( ApiServiceExPhoneCall ( duration ) ) ) 
 
 ( for { 
 - _ ← if ( peer . ` type ` . isPrivate ) FutureExt . ftraverse ( participants ) ( userId ⇒ dialogExt . sendMessage ( 
 + _ ← if ( peer . ` type ` . isPrivate ) FutureExt . ftraverse ( participants . keySet . toSeq ) ( userId ⇒ dialogExt . sendMessage ( 
 peer = ApiPeer ( ApiPeerType . Private , userId ) , 
 senderUserId = callerUserId , 
 senderAuthId = None , 
 @ @ - 145 , 13 + 167 , 16 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 } 
 } 
 
 - def connect ( device : Device , pairDevice : Device ) : Unit = { 
 + def connect ( device : Device , pairDevice : Device ) : SessionId = { 
 + val sessionId = Random . nextLong ( ) 
 eventBusExt . post ( 
 EventBus . InternalClient ( self ) , 
 eventBusId , 
 Seq ( device . deviceId ) , 
 - ApiNeedOffer ( pairDevice . deviceId , Random . nextLong ( ) , pairDevice . peerSettings ) . toByteArray 
 + ApiNeedOffer ( pairDevice . deviceId , sessionId , pairDevice . peerSettings ) . toByteArray 
 ) 
 + sessions + = Pair ( device . deviceId , pairDevice . deviceId ) → sessionId 
 + sessionId 
 } 
 
 { 
 @ @ - 165 , 25 + 190 , 33 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 case Some ( device ) ⇒ 
 putDevice ( device . deviceId , client , device . copy ( isJoined = true ) ) 
 cancelIncomingCallUpdates ( userId ) 
 + 
 weakUpdExt . broadcastUserWeakUpdate ( userId , UpdateCallHandled ( id ) , excludeAuthIds = Set ( authId ) ) 
 devices . view filterNot ( _ . _ 1 = = device . deviceId ) filter ( _ . _ 2 . isJoined ) foreach { 
 case ( _ , pairDevice ) ⇒ 
 - if ( ! device . canConnect ( pairDevice . peerSettings ) ) / / if we didn ' t connect them in AdvertiseSelf 
 - connect ( device , pairDevice ) 
 + val sessionId = 
 + sessions . getOrElse ( Pair ( device . deviceId , pairDevice . deviceId ) , connect ( device , pairDevice ) ) 
 
 eventBusExt . post ( 
 EventBus . InternalClient ( self ) , 
 eventBusId , 
 Seq ( device . deviceId ) , 
 - ApiEnableConnection ( pairDevice . deviceId , 1L ) . toByteArray 
 + ApiEnableConnection ( pairDevice . deviceId , sessionId ) . toByteArray 
 ) 
 eventBusExt . post ( 
 EventBus . InternalClient ( self ) , 
 eventBusId , 
 Seq ( pairDevice . deviceId ) , 
 - ApiEnableConnection ( device . deviceId , 1L ) . toByteArray 
 + ApiEnableConnection ( device . deviceId , sessionId ) . toByteArray 
 ) 
 } 
 + 
 + val userDevices = devices . filter ( _ . _ 2 . client . externalUserId . contains ( userId ) ) . values . map ( _ . deviceId ) . toSet 
 + if ( ! sessions . keySet . exists ( pair ⇒ userDevices . contains ( pair . left ) | | userDevices . contains ( pair . right ) ) ) { 
 + putParticipant ( userId , ApiCallMemberState . CONNECTING ) 
 + broadcastSyncedSet ( ) 
 + } 
 + 
 sender ( ) ! JoinCallAck 
 case None ⇒ 
 sender ( ) ! Status . Failure ( WebrtcCallErrors . NotJoinedToEventBus ) 
 @ @ - 191 , 9 + 224 , 10 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 case RejectCall ( userId , authId ) ⇒ 
 cancelIncomingCallUpdates ( userId ) 
 weakUpdExt . broadcastUserWeakUpdate ( userId , UpdateCallHandled ( id ) , excludeAuthIds = Set ( authId ) ) 
 + broadcastSyncedSet ( ) 
 sender ( ) ! RejectCallAck 
 case GetInfo ⇒ 
 - sender ( ) ! GetInfoAck ( eventBusId , callerUserId , participants ) 
 + sender ( ) ! GetInfoAck ( eventBusId , callerUserId , participants . keySet . toSeq ) 
 case EventBus . Joined ( _ , client , deviceId ) ⇒ 
 if ( client . isExternal ) 
 eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( deviceId ) , ApiAdvertiseMaster . toByteArray ) 
 @ @ - 208 , 12 + 242 , 41 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 connect ( newDevice , pairDevice ) 
 } 
 putDevice ( deviceId , ebMessage . client , newDevice ) 
 + 
 + for { 
 + userId ← ebMessage . client . externalUserId 
 + state ← participants . get ( userId ) 
 + } yield if ( state = = ApiCallMemberState . RINGING ) putParticipant ( userId , ApiCallMemberState . RINGING _ REACHED ) 
 + } 
 + case msg : ApiNegotinationSuccessful ⇒ 
 + ebMessage . client . externalUserId foreach { userId ⇒ 
 + putParticipant ( userId , ApiCallMemberState . CONNECTED ) 
 + broadcastSyncedSet ( ) 
 } 
 case _ ⇒ 
 } 
 - case EventBus . Disconnected ( _ , client , deviceId ) ⇒ removeDevice ( deviceId ) 
 - case EventBus . Disposed ( _ ) ⇒ end ( ) 
 - case _ : StartCall ⇒ sender ( ) ! WebrtcCallErrors . CallAlreadyStarted 
 + case EventBus . Disconnected ( _ , client , deviceId ) ⇒ 
 + removeDevice ( deviceId ) 
 + client . externalUserId foreach { userId ⇒ 
 + putParticipant ( userId , ApiCallMemberState . ENDED ) 
 + broadcastSyncedSet ( ) 
 + } 
 + case EventBus . Disposed ( _ ) ⇒ 
 + end ( ) 
 + deleteSyncedSet ( ) 
 + case _ : StartCall ⇒ sender ( ) ! WebrtcCallErrors . CallAlreadyStarted 
 + } 
 + } 
 + 
 + private def putParticipant ( userId : Int , state : ApiCallMemberState . Value ) : Unit = { 
 + participants get userId match { 
 + case Some ( oldState ) ⇒ 
 + if ( oldState ! = state ) { 
 + log . debug ( " Changing participant { } state from { } to { } " , userId , oldState , state ) 
 + participants + = userId → state 
 + } else log . error ( " Attempt to change participant state to the same value { } " , state ) 
 + case None ⇒ 
 + log . error ( " Attempt to change state of a non - participant { } " , userId ) 
 } 
 } 
 
 @ @ - 255 , 6 + 318 , 28 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 scheduledUpds - = callee 
 } 
 
 + private def broadcastSyncedSet ( ) : Unit = { 
 + val activeCall = 
 + ApiActiveCall ( id , peer . asStruct , participants . toVector map { 
 + case ( userId , state ) ⇒ 
 + 
 + ApiCallMember ( userId , ApiCallMemberStateHolder ( 
 + state = state , 
 + fallbackIsRinging = Some ( state = = ApiCallMemberState . RINGING ) , 
 + fallbackIsConnected = Some ( state = = ApiCallMemberState . CONNECTED ) , 
 + fallbackIsConnecting = Some ( state = = ApiCallMemberState . CONNECTING ) , 
 + fallbackIsRingingReached = Some ( state = = ApiCallMemberState . RINGING _ REACHED ) , 
 + fallbackIsEnded = Some ( state = = ApiCallMemberState . ENDED ) 
 + ) ) 
 + } ) . toByteArray 
 + participants . keySet foreach ( valuesExt . syncedSet . put ( _ , Webrtc . SyncedSetName , id , activeCall ) ) 
 + } 
 + 
 + private def deleteSyncedSet ( ) : Unit = 
 + participants . keySet foreach { userId ⇒ 
 + valuesExt . syncedSet . delete ( userId , Webrtc . SyncedSetName , id ) 
 + } 
 + 
 override def postStop ( ) : Unit = { 
 scheduledUpds . values foreach ( _ . cancel ( ) ) 
 super . postStop ( ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala 
 index 20f3b79 . . 1bc2157 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala 
 @ @ - 14 , 6 + 14 , 7 @ @ import scala . concurrent . forkjoin . ThreadLocalRandom 
 
 object Webrtc { 
 val WeakGroup = " webrtc _ calls " 
 + val SyncedSetName = " messaging . calls " 
 } 
 
 final class WebrtcExtension ( system : ActorSystem ) extends Extension { 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala 
 new file mode 100644 
 index 0000000 . . 8941fdd 
 - - - / dev / null 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + package im . actor . server . api . rpc . service . values 
 + 
 + import akka . actor . ActorSystem 
 + import im . actor . api . rpc . _ 
 + import im . actor . api . rpc . values . { ResponseLoadSyncedSet , ValuesService } 
 + import im . actor . server . session . { SessionEnvelope , SessionRegion , SubscribeToWeak } 
 + import im . actor . server . values . ValuesExtension 
 + 
 + import scala . concurrent . { ExecutionContext , Future } 
 + 
 + final class ValuesServiceImpl ( implicit system : ActorSystem , sessionRegion : SessionRegion ) extends ValuesService { 
 + override implicit protected val ec : ExecutionContext = system . dispatcher 
 + private val valuesExt = ValuesExtension ( system ) 
 + 
 + / * * 
 + * Loading synced set 
 + * 
 + * @ param setName readable name of the set 
 + * / 
 + override protected def doHandleLoadSyncedSet ( 
 + setName : String , 
 + clientData : ClientData 
 + ) : Future [ HandlerResult [ ResponseLoadSyncedSet ] ] = 
 + authorized ( clientData ) { client ⇒ 
 + sessionRegion . ref ! 
 + SessionEnvelope ( clientData . authId , clientData . sessionId ) 
 + . withSubscribeToWeak ( SubscribeToWeak ( Some ( valuesExt . syncedSet . weakGroup ( setName ) ) ) ) 
 + 
 + for { 
 + values ← valuesExt . syncedSet . loadApiValues ( client . userId , setName ) 
 + } yield Ok ( ResponseLoadSyncedSet ( values , isStrong = Some ( false ) ) ) 
 + } 
 + } 
 \ No newline at end of file
