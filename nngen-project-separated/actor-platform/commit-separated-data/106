BLEU SCORE: 0.7259795291154771

TEST MSG: fix ( server : groups ) : push texts
GENERATED MSG: fix ( server : groups ) :

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala < nl > index 7072283 . . 389cfc7 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala < nl > @ @ - 94 , 7 + 94 , 7 @ @ private [ group ] trait InfoCommandHandlers { < nl > randomId = cmd . randomId < nl > ) < nl > val serviceMessage = GroupServiceMessages . changedTitle ( title ) < nl > - val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . TitleChanged ) ) < nl > + val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . titleChanged ( newState . groupType ) ) ) < nl > < nl > / / TODO : remove deprecated < nl > db . run ( GroupRepo . updateTitle ( groupId , title , cmd . clientUserId , cmd . randomId , date = evt . ts ) ) < nl > @ @ - 168 , 7 + 168 , 7 @ @ private [ group ] trait InfoCommandHandlers { < nl > date = dateMillis < nl > ) < nl > val serviceMessage = GroupServiceMessages . changedTopic ( topic ) < nl > - val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . TopicChanged ) ) < nl > + val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . topicChanged ( newState . groupType ) ) ) < nl > < nl > / / TODO : remove deprecated < nl > db . run ( GroupRepo . updateTopic ( groupId , topic ) ) < nl > @ @ - 232 , 7 + 232 , 7 @ @ private [ group ] trait InfoCommandHandlers { < nl > val updateNew = UpdateGroupAboutChanged ( groupId , about ) < nl > val updateObsolete = UpdateGroupAboutChangedObsolete ( groupId , about ) < nl > val serviceMessage = GroupServiceMessages . changedAbout ( about ) < nl > - val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . TopicChanged ) ) < nl > + val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . topicChanged ( newState . groupType ) ) ) < nl > < nl > / / TODO : remove deprecated < nl > db . run ( GroupRepo . updateAbout ( groupId , about ) ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala < nl > index bc7d52b . . 16a4b64 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala < nl > @ @ - 92 , 7 + 92 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > _ ← seqUpdExt . deliverUserUpdate ( < nl > userId = cmd . inviteeUserId , < nl > update = inviteeUpdateNew , < nl > - pushRules = seqUpdExt . pushRules ( isFat = ! inviteeIsExUser , Some ( PushTexts . Invited ) ) , < nl > + pushRules = seqUpdExt . pushRules ( isFat = ! inviteeIsExUser , Some ( PushTexts . invited ( newState . groupType ) ) ) , < nl > deliveryId = s " invite _ $ { groupId } _ $ { cmd . randomId } " < nl > ) < nl > < nl > @ @ - 127 , 7 + 127 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > _ ← seqUpdExt . deliverUserUpdate ( < nl > userId = cmd . inviteeUserId , < nl > update = inviteeUpdateNew , < nl > - pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . Invited ) ) , < nl > + pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . invited ( newState . groupType ) ) ) , < nl > deliveryId = s " invite _ $ { groupId } _ $ { cmd . randomId } " < nl > ) < nl > < nl > @ @ - 167 , 7 + 167 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > _ ← seqUpdExt . deliverUserUpdate ( < nl > userId = cmd . inviteeUserId , < nl > inviteeUpdateObsolete , < nl > - pushRules = seqUpdExt . pushRules ( isFat = true , Some ( PushTexts . Invited ) ) , < nl > + pushRules = seqUpdExt . pushRules ( isFat = true , Some ( PushTexts . invited ( newState . groupType ) ) ) , < nl > deliveryId = s " invite _ obsolete _ $ { groupId } _ $ { cmd . randomId } " < nl > ) < nl > < nl > @ @ - 366 , 7 + 366 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { < nl > ) < nl > < nl > / / push join message only to joining user < nl > - _ < - seqUpdExt . deliverUserUpdate ( < nl > + _ ← seqUpdExt . deliverUserUpdate ( < nl > userId = cmd . joiningUserId , < nl > update = serviceMessageUpdate ( < nl > cmd . joiningUserId , < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / PushTexts . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / PushTexts . scala < nl > index 674d313 . . bdb45dc 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / PushTexts . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / PushTexts . scala < nl > @ @ - 3 , 10 + 3 , 27 @ @ package im . actor . server . group < nl > / / TODO : make up to date with channels < nl > object PushTexts { < nl > val Added = " User added " < nl > - val Invited = " You are invited to a group " < nl > val Kicked = " User kicked " < nl > val Left = " User left " < nl > - val TitleChanged = " Group title changed " < nl > - val TopicChanged = " Group topic changed " < nl > - val AboutChanged = " Group about changed " < nl > + < nl > + def invited ( gt : GroupType ) = < nl > + if ( gt . isChannel ) { < nl > + " You are invited to a channel " < nl > + } else { < nl > + " You are invited to a group " < nl > + } < nl > + < nl > + def titleChanged ( gt : GroupType ) = < nl > + if ( gt . isChannel ) { < nl > + " Channel title changed " < nl > + } else { < nl > + " Group title changed " < nl > + } < nl > + < nl > + def topicChanged ( gt : GroupType ) = < nl > + if ( gt . isChannel ) { < nl > + " Channel topic changed " < nl > + } else { < nl > + " Group topic changed " < nl > + } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > index bf17a9b . . 8254b34 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > @ @ - 14 , 6 + 14 , 7 @ @ import im . actor . server . acl . ACLUtils < nl > import im . actor . server . group . GroupCommands . { DeleteGroup , DismissUserAdmin , MakeHistoryShared , MakeUserAdmin , RevokeIntegrationToken , RevokeIntegrationTokenAck , TransferOwnership , UpdateAdminSettings , UpdateAdminSettingsAck } < nl > import im . actor . server . group . GroupErrors . { NotAMember , NotAdmin , UserAlreadyAdmin , UserAlreadyNotAdmin } < nl > import im . actor . server . group . GroupEvents . { AdminSettingsUpdated , AdminStatusChanged , GroupDeleted , HistoryBecameShared , IntegrationTokenRevoked , OwnerChanged } < nl > + import im . actor . server . names . { GlobalNameOwner , OwnerType } < nl > import im . actor . server . persist . { GroupBotRepo , GroupInviteTokenRepo , GroupUserRepo , HistoryMessageRepo } < nl > import im . actor . server . sequence . { SeqState , SeqStateDate } < nl > < nl > @ @ - 308 , 22 + 309 , 27 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { < nl > if ( ! state . permissions . canDelete ( cmd . clientUserId ) ) { < nl > sender ( ) ! noPermission < nl > } else { < nl > + val exMemberIds = state . memberIds < nl > + val exGlobalName = state . shortName < nl > + val exGroupType = state . groupType < nl > + < nl > persist ( GroupDeleted ( Instant . now , cmd . clientUserId ) ) { evt ⇒ < nl > - val newState = commit ( evt ) < nl > + commit ( evt ) < nl > < nl > val dateMillis = evt . ts . toEpochMilli < nl > val randomId = ACLUtils . randomLong ( ) < nl > + val ZeroPermissions = 0L < nl > < nl > val emptyPermissions = Vector ( < nl > - UpdateGroupPermissionsChanged ( groupId , newState . permissions . GroupEmpty ) , < nl > - UpdateGroupFullPermissionsChanged ( groupId , newState . permissions . FullGroupEmpty ) < nl > + UpdateGroupPermissionsChanged ( groupId , ZeroPermissions ) , < nl > + UpdateGroupFullPermissionsChanged ( groupId , ZeroPermissions ) < nl > ) < nl > < nl > val deleteGroupMembersUpdates : Vector [ Update ] = emptyPermissions + + < nl > Vector ( < nl > UpdateGroupMemberChanged ( groupId , isMember = false ) , < nl > / / if channel , or group is big enough < nl > - if ( newState . groupType . isChannel ) < nl > + if ( exGroupType . isChannel ) < nl > UpdateGroupMembersCountChanged ( groupId , membersCount = 0 ) < nl > else < nl > UpdateGroupMembersUpdated ( groupId , members = Vector . empty ) , < nl > @ @ - 331 , 7 + 337 , 7 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { < nl > ) < nl > < nl > / / TODO : remove deprecated . GroupInviteTokenRepo don ' t have replacement yet . < nl > - newState . memberIds foreach { userId ⇒ < nl > + exMemberIds foreach { userId ⇒ < nl > db . run ( < nl > for { < nl > _ ← GroupUserRepo . delete ( groupId , userId ) < nl > @ @ - 341 , 16 + 347 , 17 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { < nl > } < nl > < nl > val result : Future [ SeqState ] = for { < nl > - _ ← db . run ( HistoryMessageRepo . deleteAll ( cmd . clientUserId , apiGroupPeer . asModel ) ) < nl > + / / release global name of group < nl > + _ ← globalNamesStorage . updateOrRemove ( exGlobalName , newGlobalName = None , GlobalNameOwner ( OwnerType . Group , groupId ) ) < nl > < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Groups V1 API updates / / < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > < nl > / / push all members updates about other members left group < nl > - _ ← FutureExt . ftraverse ( newState . memberIds . toSeq ) { userId ⇒ < nl > + _ ← FutureExt . ftraverse ( exMemberIds . toSeq ) { userId ⇒ < nl > seqUpdExt . broadcastPeopleUpdate ( < nl > - userIds = newState . memberIds - userId , < nl > + userIds = exMemberIds - userId , < nl > update = UpdateGroupUserLeaveObsolete ( groupId , userId , dateMillis , randomId ) < nl > ) < nl > } < nl > @ @ - 358 , 15 + 365 , 21 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Groups V2 API updates / / < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > + < nl > + / / send all members update about group became empty ( no members ) < nl > _ ← Future . traverse ( deleteGroupMembersUpdates ) { update ⇒ < nl > - seqUpdExt . broadcastPeopleUpdate ( newState . memberIds , update ) < nl > + seqUpdExt . broadcastPeopleUpdate ( exMemberIds , update ) < nl > } < nl > - seqState ← seqUpdExt . broadcastClientUpdate ( < nl > - cmd . clientUserId , < nl > - cmd . clientAuthId , < nl > - bcastUserIds = state . memberIds - cmd . clientUserId , < nl > + < nl > + / / send all members except clientUserId ` UpdateChatClear ` < nl > + _ ← seqUpdExt . broadcastPeopleUpdate ( < nl > + userIds = exMemberIds - cmd . clientUserId , < nl > update = UpdateChatClear ( apiGroupPeer ) < nl > ) < nl > + < nl > + / / delete dialog from client user ' s dialog list < nl > + / / history deletion happens inside < nl > + seqState ← dialogExt . delete ( cmd . clientUserId , cmd . clientAuthId , apiGroupPeer . asModel ) < nl > } yield seqState < nl > < nl > result pipeTo sender ( ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > index 96b2607 . . 3f2959e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > @ @ - 296 , 8 + 296 , 6 @ @ private [ group ] final case class GroupState ( < nl > def withSnapshot ( metadata : SnapshotMetadata , snapshot : Any ) : GroupState = this < nl > < nl > object permissions { < nl > - val GroupEmpty = 0L < nl > - val FullGroupEmpty = 0L < nl > < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / General permissions / / < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala b / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala < nl > index dc766a5 . . b46ee46 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala < nl > @ @ - 90 , 6 + 90 , 7 @ @ final class GlobalNamesStorageKeyValueStorage ( implicit system : ActorSystem ) { < nl > * ` oldGlobalName ` = None , ` newGlobalName ` = Some ( " name " ) - insert new name < nl > * ` oldGlobalName ` = Some ( " oldName " ) , ` newGlobalName ` = Some ( " name " ) - update existing name < nl > * ` oldGlobalName ` = Some ( " oldName " ) , ` newGlobalName ` = None - delete existing name < nl > + * ` oldGlobalName ` = None , ` newGlobalName ` = None - does nothing < nl > * / < nl > def updateOrRemove ( oldGlobalName : Option [ String ] , newGlobalName : Option [ String ] , owner : GlobalNameOwner ) : Future [ Unit ] = { < nl > val deleteFu = ( oldGlobalName map delete ) getOrElse FastFuture . successful ( ( ) )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala 
 index 7072283 . . 389cfc7 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala 
 @ @ - 94 , 7 + 94 , 7 @ @ private [ group ] trait InfoCommandHandlers { 
 randomId = cmd . randomId 
 ) 
 val serviceMessage = GroupServiceMessages . changedTitle ( title ) 
 - val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . TitleChanged ) ) 
 + val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . titleChanged ( newState . groupType ) ) ) 
 
 / / TODO : remove deprecated 
 db . run ( GroupRepo . updateTitle ( groupId , title , cmd . clientUserId , cmd . randomId , date = evt . ts ) ) 
 @ @ - 168 , 7 + 168 , 7 @ @ private [ group ] trait InfoCommandHandlers { 
 date = dateMillis 
 ) 
 val serviceMessage = GroupServiceMessages . changedTopic ( topic ) 
 - val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . TopicChanged ) ) 
 + val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . topicChanged ( newState . groupType ) ) ) 
 
 / / TODO : remove deprecated 
 db . run ( GroupRepo . updateTopic ( groupId , topic ) ) 
 @ @ - 232 , 7 + 232 , 7 @ @ private [ group ] trait InfoCommandHandlers { 
 val updateNew = UpdateGroupAboutChanged ( groupId , about ) 
 val updateObsolete = UpdateGroupAboutChangedObsolete ( groupId , about ) 
 val serviceMessage = GroupServiceMessages . changedAbout ( about ) 
 - val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . TopicChanged ) ) 
 + val pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . topicChanged ( newState . groupType ) ) ) 
 
 / / TODO : remove deprecated 
 db . run ( GroupRepo . updateAbout ( groupId , about ) ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala 
 index bc7d52b . . 16a4b64 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / MemberCommandHandlers . scala 
 @ @ - 92 , 7 + 92 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 _ ← seqUpdExt . deliverUserUpdate ( 
 userId = cmd . inviteeUserId , 
 update = inviteeUpdateNew , 
 - pushRules = seqUpdExt . pushRules ( isFat = ! inviteeIsExUser , Some ( PushTexts . Invited ) ) , 
 + pushRules = seqUpdExt . pushRules ( isFat = ! inviteeIsExUser , Some ( PushTexts . invited ( newState . groupType ) ) ) , 
 deliveryId = s " invite _ $ { groupId } _ $ { cmd . randomId } " 
 ) 
 
 @ @ - 127 , 7 + 127 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 _ ← seqUpdExt . deliverUserUpdate ( 
 userId = cmd . inviteeUserId , 
 update = inviteeUpdateNew , 
 - pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . Invited ) ) , 
 + pushRules = seqUpdExt . pushRules ( isFat = false , Some ( PushTexts . invited ( newState . groupType ) ) ) , 
 deliveryId = s " invite _ $ { groupId } _ $ { cmd . randomId } " 
 ) 
 
 @ @ - 167 , 7 + 167 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 _ ← seqUpdExt . deliverUserUpdate ( 
 userId = cmd . inviteeUserId , 
 inviteeUpdateObsolete , 
 - pushRules = seqUpdExt . pushRules ( isFat = true , Some ( PushTexts . Invited ) ) , 
 + pushRules = seqUpdExt . pushRules ( isFat = true , Some ( PushTexts . invited ( newState . groupType ) ) ) , 
 deliveryId = s " invite _ obsolete _ $ { groupId } _ $ { cmd . randomId } " 
 ) 
 
 @ @ - 366 , 7 + 366 , 7 @ @ private [ group ] trait MemberCommandHandlers extends GroupsImplicits { 
 ) 
 
 / / push join message only to joining user 
 - _ < - seqUpdExt . deliverUserUpdate ( 
 + _ ← seqUpdExt . deliverUserUpdate ( 
 userId = cmd . joiningUserId , 
 update = serviceMessageUpdate ( 
 cmd . joiningUserId , 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / PushTexts . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / PushTexts . scala 
 index 674d313 . . bdb45dc 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / PushTexts . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / PushTexts . scala 
 @ @ - 3 , 10 + 3 , 27 @ @ package im . actor . server . group 
 / / TODO : make up to date with channels 
 object PushTexts { 
 val Added = " User added " 
 - val Invited = " You are invited to a group " 
 val Kicked = " User kicked " 
 val Left = " User left " 
 - val TitleChanged = " Group title changed " 
 - val TopicChanged = " Group topic changed " 
 - val AboutChanged = " Group about changed " 
 + 
 + def invited ( gt : GroupType ) = 
 + if ( gt . isChannel ) { 
 + " You are invited to a channel " 
 + } else { 
 + " You are invited to a group " 
 + } 
 + 
 + def titleChanged ( gt : GroupType ) = 
 + if ( gt . isChannel ) { 
 + " Channel title changed " 
 + } else { 
 + " Group title changed " 
 + } 
 + 
 + def topicChanged ( gt : GroupType ) = 
 + if ( gt . isChannel ) { 
 + " Channel topic changed " 
 + } else { 
 + " Group topic changed " 
 + } 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 index bf17a9b . . 8254b34 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 @ @ - 14 , 6 + 14 , 7 @ @ import im . actor . server . acl . ACLUtils 
 import im . actor . server . group . GroupCommands . { DeleteGroup , DismissUserAdmin , MakeHistoryShared , MakeUserAdmin , RevokeIntegrationToken , RevokeIntegrationTokenAck , TransferOwnership , UpdateAdminSettings , UpdateAdminSettingsAck } 
 import im . actor . server . group . GroupErrors . { NotAMember , NotAdmin , UserAlreadyAdmin , UserAlreadyNotAdmin } 
 import im . actor . server . group . GroupEvents . { AdminSettingsUpdated , AdminStatusChanged , GroupDeleted , HistoryBecameShared , IntegrationTokenRevoked , OwnerChanged } 
 + import im . actor . server . names . { GlobalNameOwner , OwnerType } 
 import im . actor . server . persist . { GroupBotRepo , GroupInviteTokenRepo , GroupUserRepo , HistoryMessageRepo } 
 import im . actor . server . sequence . { SeqState , SeqStateDate } 
 
 @ @ - 308 , 22 + 309 , 27 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { 
 if ( ! state . permissions . canDelete ( cmd . clientUserId ) ) { 
 sender ( ) ! noPermission 
 } else { 
 + val exMemberIds = state . memberIds 
 + val exGlobalName = state . shortName 
 + val exGroupType = state . groupType 
 + 
 persist ( GroupDeleted ( Instant . now , cmd . clientUserId ) ) { evt ⇒ 
 - val newState = commit ( evt ) 
 + commit ( evt ) 
 
 val dateMillis = evt . ts . toEpochMilli 
 val randomId = ACLUtils . randomLong ( ) 
 + val ZeroPermissions = 0L 
 
 val emptyPermissions = Vector ( 
 - UpdateGroupPermissionsChanged ( groupId , newState . permissions . GroupEmpty ) , 
 - UpdateGroupFullPermissionsChanged ( groupId , newState . permissions . FullGroupEmpty ) 
 + UpdateGroupPermissionsChanged ( groupId , ZeroPermissions ) , 
 + UpdateGroupFullPermissionsChanged ( groupId , ZeroPermissions ) 
 ) 
 
 val deleteGroupMembersUpdates : Vector [ Update ] = emptyPermissions + + 
 Vector ( 
 UpdateGroupMemberChanged ( groupId , isMember = false ) , 
 / / if channel , or group is big enough 
 - if ( newState . groupType . isChannel ) 
 + if ( exGroupType . isChannel ) 
 UpdateGroupMembersCountChanged ( groupId , membersCount = 0 ) 
 else 
 UpdateGroupMembersUpdated ( groupId , members = Vector . empty ) , 
 @ @ - 331 , 7 + 337 , 7 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { 
 ) 
 
 / / TODO : remove deprecated . GroupInviteTokenRepo don ' t have replacement yet . 
 - newState . memberIds foreach { userId ⇒ 
 + exMemberIds foreach { userId ⇒ 
 db . run ( 
 for { 
 _ ← GroupUserRepo . delete ( groupId , userId ) 
 @ @ - 341 , 16 + 347 , 17 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { 
 } 
 
 val result : Future [ SeqState ] = for { 
 - _ ← db . run ( HistoryMessageRepo . deleteAll ( cmd . clientUserId , apiGroupPeer . asModel ) ) 
 + / / release global name of group 
 + _ ← globalNamesStorage . updateOrRemove ( exGlobalName , newGlobalName = None , GlobalNameOwner ( OwnerType . Group , groupId ) ) 
 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Groups V1 API updates / / 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 / / push all members updates about other members left group 
 - _ ← FutureExt . ftraverse ( newState . memberIds . toSeq ) { userId ⇒ 
 + _ ← FutureExt . ftraverse ( exMemberIds . toSeq ) { userId ⇒ 
 seqUpdExt . broadcastPeopleUpdate ( 
 - userIds = newState . memberIds - userId , 
 + userIds = exMemberIds - userId , 
 update = UpdateGroupUserLeaveObsolete ( groupId , userId , dateMillis , randomId ) 
 ) 
 } 
 @ @ - 358 , 15 + 365 , 21 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Groups V2 API updates / / 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + / / send all members update about group became empty ( no members ) 
 _ ← Future . traverse ( deleteGroupMembersUpdates ) { update ⇒ 
 - seqUpdExt . broadcastPeopleUpdate ( newState . memberIds , update ) 
 + seqUpdExt . broadcastPeopleUpdate ( exMemberIds , update ) 
 } 
 - seqState ← seqUpdExt . broadcastClientUpdate ( 
 - cmd . clientUserId , 
 - cmd . clientAuthId , 
 - bcastUserIds = state . memberIds - cmd . clientUserId , 
 + 
 + / / send all members except clientUserId ` UpdateChatClear ` 
 + _ ← seqUpdExt . broadcastPeopleUpdate ( 
 + userIds = exMemberIds - cmd . clientUserId , 
 update = UpdateChatClear ( apiGroupPeer ) 
 ) 
 + 
 + / / delete dialog from client user ' s dialog list 
 + / / history deletion happens inside 
 + seqState ← dialogExt . delete ( cmd . clientUserId , cmd . clientAuthId , apiGroupPeer . asModel ) 
 } yield seqState 
 
 result pipeTo sender ( ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 index 96b2607 . . 3f2959e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 @ @ - 296 , 8 + 296 , 6 @ @ private [ group ] final case class GroupState ( 
 def withSnapshot ( metadata : SnapshotMetadata , snapshot : Any ) : GroupState = this 
 
 object permissions { 
 - val GroupEmpty = 0L 
 - val FullGroupEmpty = 0L 
 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / General permissions / / 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala b / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala 
 index dc766a5 . . b46ee46 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala 
 @ @ - 90 , 6 + 90 , 7 @ @ final class GlobalNamesStorageKeyValueStorage ( implicit system : ActorSystem ) { 
 * ` oldGlobalName ` = None , ` newGlobalName ` = Some ( " name " ) - insert new name 
 * ` oldGlobalName ` = Some ( " oldName " ) , ` newGlobalName ` = Some ( " name " ) - update existing name 
 * ` oldGlobalName ` = Some ( " oldName " ) , ` newGlobalName ` = None - delete existing name 
 + * ` oldGlobalName ` = None , ` newGlobalName ` = None - does nothing 
 * / 
 def updateOrRemove ( oldGlobalName : Option [ String ] , newGlobalName : Option [ String ] , owner : GlobalNameOwner ) : Future [ Unit ] = { 
 val deleteFu = ( oldGlobalName map delete ) getOrElse FastFuture . successful ( ( ) )
