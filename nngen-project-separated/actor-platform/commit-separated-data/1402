BLEU SCORE: 0.02531146931107329

TEST MSG: feat ( server : metrics ) : record connection time
GENERATED MSG: refactor ( frontend ) : removed unused max - buffer - size setting , replaced some PushPullStage ' s by PushStage ' s

TEST DIFF (one line): diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala < nl > index e1990b9 . . 7f0cda4 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala < nl > @ @ - 2 , 6 + 2 , 8 @ @ package im . actor . server . frontend < nl > < nl > import java . util . concurrent . atomic . AtomicLong < nl > < nl > + import kamon . Kamon < nl > + < nl > import scala . collection . JavaConversions . _ < nl > < nl > import akka . actor . ActorSystem < nl > @ @ - 93 , 7 + 95 , 9 @ @ object Frontend { < nl > } < nl > } < nl > < nl > - trait Frontend { < nl > + abstract class Frontend ( metricTags : Map [ String , String ] ) { < nl > + < nl > + protected val connectionTime = Kamon . metrics . histogram ( " connection . time " , metricTags ) < nl > < nl > private val connCounter = new AtomicLong ( 0L ) < nl > < nl > diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala < nl > index f31ebf4 . . 14e9802 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > package im . actor . server . frontend < nl > < nl > import akka . stream . FlowShape < nl > + import kamon . metric . instrument . Histogram < nl > < nl > import scala . util . { Failure , Success } < nl > < nl > @ @ - 20 , 7 + 21 , 7 @ @ object MTProtoBlueprint { < nl > val protoVersions : Set [ Byte ] = Set ( 1 ) < nl > val apiMajorVersions : Set [ Byte ] = Set ( 1 ) < nl > < nl > - def apply ( connId : String ) ( implicit sessionRegion : SessionRegion , system : ActorSystem ) : Flow [ ByteString , ByteString , Unit ] = { < nl > + def apply ( connId : String , connTimeHist : Histogram ) ( implicit sessionRegion : SessionRegion , system : ActorSystem ) : Flow [ ByteString , ByteString , Unit ] = { < nl > val authManager = system . actorOf ( AuthorizationManager . props , s " authManager - $ connId " ) < nl > val authSource = Source ( ActorPublisher [ MTProto ] ( authManager ) ) < nl > < nl > @ @ - 35 , 6 + 36 , 8 @ @ object MTProtoBlueprint { < nl > val mapRespFlow : Flow [ MTProto , ByteString , Unit ] = Flow [ MTProto ] < nl > . transform ( ( ) ⇒ mapResponse ( system ) ) < nl > < nl > + val connStartTime = System . currentTimeMillis ( ) < nl > + < nl > val completeSink = Sink . onComplete { < nl > case res ⇒ < nl > res match { < nl > @ @ - 44 , 6 + 47 , 7 @ @ object MTProtoBlueprint { < nl > system . log . error ( e , " Closing connection due to error " ) < nl > } < nl > < nl > + connTimeHist . record ( System . currentTimeMillis ( ) - connStartTime ) < nl > authManager ! PoisonPill < nl > sessionClient ! PoisonPill < nl > } < nl > diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / TcpFrontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / TcpFrontend . scala < nl > index 52ae672 . . 45186ea 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / TcpFrontend . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / TcpFrontend . scala < nl > @ @ - 8 , 7 + 8 , 7 @ @ import akka . stream . scaladsl . _ < nl > import im . actor . server . session . SessionRegion < nl > import im . actor . tls . { Tls , TlsContext } < nl > < nl > - object TcpFrontend extends Frontend { < nl > + object TcpFrontend extends Frontend ( Map ( " type " → " tcp " ) ) { < nl > override protected val connIdPrefix = " tcp " < nl > < nl > def start ( host : String , port : Int , tlsContext : Option [ TlsContext ] ) ( < nl > @ @ - 24 , 8 + 24 , 8 @ @ object TcpFrontend extends Frontend { < nl > case ( Tcp . IncomingConnection ( localAddress , remoteAddress , flow ) ) ⇒ < nl > log . debug ( " New TCP connection from { } " , localAddress ) < nl > < nl > - val mtProto = MTProtoBlueprint ( nextConnId ( ) ) < nl > - val connFlow = tlsContext map ( Tls . connection ( _ , flow ) ) getOrElse ( flow ) join mtProto < nl > + val mtProto = MTProtoBlueprint ( nextConnId ( ) , connectionTime ) < nl > + val connFlow = tlsContext map ( Tls . connection ( _ , flow ) ) getOrElse flow join mtProto < nl > connFlow . run ( ) < nl > } ) < nl > . run ( ) < nl > diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala < nl > index 371c871 . . 9aa4938 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala < nl > @ @ - 17 , 7 + 17 , 7 @ @ import im . actor . tls . TlsContext < nl > < nl > import scala . concurrent . duration . _ < nl > < nl > - object WsFrontend extends Frontend { < nl > + object WsFrontend extends Frontend ( Map ( " type " → " ws " ) ) { < nl > < nl > import Directives . _ < nl > < nl > @ @ - 45 , 7 + 45 , 7 @ @ object WsFrontend extends Frontend { < nl > connections runForeach { conn ⇒ < nl > log . debug ( " New HTTP Connection { } " , conn . remoteAddress ) < nl > < nl > - conn . handleWith ( route ( MTProtoBlueprint ( nextConnId ( ) ) ) ) < nl > + conn . handleWith ( route ( MTProtoBlueprint ( nextConnId ( ) , connectionTime ) ) ) < nl > } < nl > } < nl > < nl > @ @ - 78 , 14 + 78 , 19 @ @ object WsFrontend extends Frontend { < nl > / / system . log . debug ( " WS Send { } " , BitVector ( bs . toByteBuffer ) . toHex ) < nl > BinaryMessage . Strict ( bs ) < nl > } < nl > - . via ( reportErrorsFlow ) < nl > + . via ( completionFlow ( System . currentTimeMillis ( ) ) ) < nl > } < nl > < nl > - def reportErrorsFlow [ T ] ( implicit system : ActorSystem ) : Flow [ T , T , Unit ] = < nl > + def completionFlow [ T ] ( connStartTime : Long ) ( implicit system : ActorSystem ) : Flow [ T , T , Unit ] = < nl > Flow [ T ] < nl > . transform ( ( ) ⇒ new PushStage [ T , T ] { < nl > def onPush ( elem : T , ctx : Context [ T ] ) : SyncDirective = ctx . push ( elem ) < nl > < nl > + override def postStop ( ) : Unit = { < nl > + super . postStop ( ) < nl > + connectionTime . record ( System . currentTimeMillis ( ) - connStartTime ) < nl > + } < nl > + < nl > override def onUpstreamFailure ( cause : Throwable , ctx : Context [ T ] ) : TerminationDirective = { < nl > system . log . error ( s " WS stream failed with $ cause " ) < nl > super . onUpstreamFailure ( cause , ctx )
NEAREST DIFF (one line): diff - - git a / actor - frontend / src / main / resources / reference . conf b / actor - frontend / src / main / resources / reference . conf < nl > index 7f5c161 . . e060048 100644 < nl > - - - a / actor - frontend / src / main / resources / reference . conf < nl > + + + b / actor - frontend / src / main / resources / reference . conf < nl > @ @ - 4 , 14 + 4 , 12 @ @ actor - server { < nl > interface = " 0 . 0 . 0 . 0 " < nl > port = 8080 < nl > timeout = 5s < nl > - max - buffer - size = 1 . 5M < nl > } < nl > < nl > ws { < nl > interface = " 0 . 0 . 0 . 0 " < nl > port = 8082 < nl > timeout = 5s < nl > - max - buffer - size = 1 . 5M < nl > } < nl > } < nl > < nl > diff - - git a / actor - frontend / src / main / scala / im / actor / server / api / frontend / HandshakeStage . scala b / actor - frontend / src / main / scala / im / actor / server / api / frontend / HandshakeStage . scala < nl > index 8780b32 . . 4a8344c 100644 < nl > - - - a / actor - frontend / src / main / scala / im / actor / server / api / frontend / HandshakeStage . scala < nl > + + + b / actor - frontend / src / main / scala / im / actor / server / api / frontend / HandshakeStage . scala < nl > @ @ - 1 , 13 + 1 , 15 @ @ < nl > package im . actor . server . api . frontend < nl > < nl > - import akka . stream . stage . { Context , PushPullStage , SyncDirective } < nl > + import akka . stream . stage . { Context , PushStage , SyncDirective } < nl > < nl > import im . actor . server . mtproto . transport . { Handshake , TransportPackage } < nl > < nl > - private [ frontend ] final class PackageCheckStage extends PushPullStage [ TransportPackage , TransportPackage ] { < nl > + private [ frontend ] final class PackageCheckStage extends PushStage [ TransportPackage , TransportPackage ] { < nl > < nl > private trait State < nl > + < nl > private case object AwaitHandshake extends State < nl > + < nl > private case object Passing extends State < nl > < nl > / / FIXME : check package index < nl > @ @ - 30 , 9 + 32 , 5 @ @ private [ frontend ] final class PackageCheckStage extends PushPullStage [ TransportP < nl > ctx . push ( elem ) < nl > } < nl > } < nl > - < nl > - override def onPull ( ctx : Context [ TransportPackage ] ) : SyncDirective = { < nl > - ctx . pull ( ) < nl > - } < nl > } < nl > < nl > diff - - git a / actor - frontend / src / main / scala / im / actor / server / api / frontend / MTProto . scala b / actor - frontend / src / main / scala / im / actor / server / api / frontend / MTProto . scala < nl > index e66ab3a . . e00b0ba 100644 < nl > - - - a / actor - frontend / src / main / scala / im / actor / server / api / frontend / MTProto . scala < nl > + + + b / actor - frontend / src / main / scala / im / actor / server / api / frontend / MTProto . scala < nl > @ @ - 17 , 7 + 17 , 7 @ @ object MTProto { < nl > val protoVersions : Set [ Byte ] = Set ( 1 ) < nl > val apiMajorVersions : Set [ Byte ] = Set ( 1 ) < nl > < nl > - def flow ( connId : String , maxBufferSize : Int , sessionRegion : SessionRegion ) ( implicit db : Database , system : ActorSystem , timeout : Timeout ) = { < nl > + def flow ( connId : String , sessionRegion : SessionRegion ) ( implicit db : Database , system : ActorSystem , timeout : Timeout ) = { < nl > val authManager = system . actorOf ( AuthorizationManager . props ( db ) , s " authManager - $ { connId } " ) < nl > val authSource = Source ( ActorPublisher [ MTProto ] ( authManager ) ) < nl > < nl > @ @ - 61 , 19 + 61 , 15 @ @ object MTProto { < nl > } < nl > } < nl > < nl > - def parsePackage ( maxBufferSize : Int ) ( implicit system : ActorSystem ) = { } < nl > - < nl > - def mapResponse ( system : ActorSystem ) = new PushPullStage [ MTProto , ByteString ] { < nl > + def mapResponse ( system : ActorSystem ) = new PushStage [ MTProto , ByteString ] { < nl > private [ this ] var packageIndex : Int = - 1 < nl > < nl > override def onPush ( elem : MTProto , ctx : Context [ ByteString ] ) = { < nl > packageIndex + = 1 < nl > val pkg = TransportPackage ( packageIndex , elem ) < nl > - / / system . log . debug ( " Sending TransportPackage { } " , pkg ) < nl > < nl > val resBits = TransportPackageCodec . encode ( pkg ) . require < nl > val res = ByteString ( resBits . toByteBuffer ) < nl > - / / system . log . debug ( " Sending bytes { } " , resBits ) < nl > < nl > elem match { < nl > case _ : Drop ⇒ < nl > @ @ - 82 , 7 + 78 , 5 @ @ object MTProto { < nl > ctx . push ( res ) < nl > } < nl > } < nl > - < nl > - override def onPull ( ctx : Context [ ByteString ] ) = ctx . pull ( ) < nl > } < nl > } < nl > diff - - git a / actor - frontend / src / main / scala / im / actor / server / api / frontend / PackageHandleStage . scala b / actor - frontend / src / main / scala / im / actor / server / api / frontend / PackageHandleStage . scala < nl > index a6f2f4e . . 4b9f042 100644 < nl > - - - a / actor - frontend / src / main / scala / im / actor / server / api / frontend / PackageHandleStage . scala < nl > + + + b / actor - frontend / src / main / scala / im / actor / server / api / frontend / PackageHandleStage . scala < nl > @ @ - 1 , 10 + 1 , 9 @ @ < nl > package im . actor . server . api . frontend < nl > < nl > + import scala . concurrent . ExecutionContextExecutor < nl > import scala . concurrent . duration . _ < nl > - import scala . concurrent . { ExecutionContextExecutor , Future } < nl > < nl > import akka . actor . { ActorRef , ActorSystem } < nl > - import akka . pattern . { AskTimeoutException , ask } < nl > import akka . stream . stage . _ < nl > import akka . util . Timeout < nl > import org . apache . commons . codec . digest . DigestUtils < nl > diff - - git a / actor - frontend / src / main / scala / im / actor / server / api / frontend / TcpFrontend . scala b / actor - frontend / src / main / scala / im / actor / server / api / frontend / TcpFrontend . scala < nl > index eb962ae . . 66262b6 100644 < nl > - - - a / actor - frontend / src / main / scala / im / actor / server / api / frontend / TcpFrontend . scala < nl > + + + b / actor - frontend / src / main / scala / im / actor / server / api / frontend / TcpFrontend . scala < nl > @ @ - 21 , 7 + 21 , 6 @ @ object TcpFrontend extends Frontend { < nl > val config = appConf . getConfig ( " frontend . tcp " ) < nl > < nl > implicit val askTimeout = Timeout ( config . getDuration ( " timeout " , TimeUnit . MILLISECONDS ) , TimeUnit . MILLISECONDS ) < nl > - val maxBufferSize = config . getBytes ( " max - buffer - size " ) . toInt < nl > val interface = config . getString ( " interface " ) < nl > val port = config . getInt ( " port " ) < nl > < nl > @ @ - 31 , 7 + 30 , 7 @ @ object TcpFrontend extends Frontend { < nl > log . info ( s " Client connected from : $ { conn . remoteAddress } " ) < nl > < nl > try { < nl > - val flow = MTProto . flow ( nextConnId ( ) , maxBufferSize , sessionRegion ) < nl > + val flow = MTProto . flow ( nextConnId ( ) , sessionRegion ) < nl > conn . handleWith ( flow ) < nl > } catch { < nl > case e : Exception ⇒ < nl > diff - - git a / actor - frontend / src / main / scala / im / actor / server / api / frontend / WsFrontend . scala b / actor - frontend / src / main / scala / im / actor / server / api / frontend / WsFrontend . scala < nl > index 2891ecd . . 9608683 100644 < nl > - - - a / actor - frontend / src / main / scala / im / actor / server / api / frontend / WsFrontend . scala < nl > + + + b / actor - frontend / src / main / scala / im / actor / server / api / frontend / WsFrontend . scala < nl > @ @ - 29 , 21 + 29 , 20 @ @ object WsFrontend extends Frontend { < nl > implicit val askTimeout = Timeout ( config . getDuration ( " timeout " , TimeUnit . MILLISECONDS ) , TimeUnit . MILLISECONDS ) < nl > implicit val ec : ExecutionContext = system . dispatcher < nl > < nl > - val maxBufferSize = config . getBytes ( " max - buffer - size " ) . toInt < nl > val interface = config . getString ( " interface " ) < nl > val port = config . getInt ( " port " ) < nl > < nl > val connections = Http ( ) . bind ( interface , port ) < nl > < nl > connections runForeach { conn ⇒ < nl > - conn . handleWith ( route ( maxBufferSize , sessionRegion ) ) < nl > + conn . handleWith ( route ( sessionRegion ) ) < nl > } < nl > } < nl > < nl > - def route ( maxBufferSize : Int , sessionRegion : SessionRegion ) ( implicit db : Database , timeout : Timeout , system : ActorSystem ) : Route = { < nl > + def route ( sessionRegion : SessionRegion ) ( implicit db : Database , timeout : Timeout , system : ActorSystem ) : Route = { < nl > get { < nl > pathSingleSlash { < nl > - val mtProtoFlow = MTProto . flow ( nextConnId ( ) , maxBufferSize , sessionRegion ) < nl > + val mtProtoFlow = MTProto . flow ( nextConnId ( ) , sessionRegion ) < nl > < nl > handleWebsocketMessages ( flow ( mtProtoFlow ) ) < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala 
 index e1990b9 . . 7f0cda4 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala 
 @ @ - 2 , 6 + 2 , 8 @ @ package im . actor . server . frontend 
 
 import java . util . concurrent . atomic . AtomicLong 
 
 + import kamon . Kamon 
 + 
 import scala . collection . JavaConversions . _ 
 
 import akka . actor . ActorSystem 
 @ @ - 93 , 7 + 95 , 9 @ @ object Frontend { 
 } 
 } 
 
 - trait Frontend { 
 + abstract class Frontend ( metricTags : Map [ String , String ] ) { 
 + 
 + protected val connectionTime = Kamon . metrics . histogram ( " connection . time " , metricTags ) 
 
 private val connCounter = new AtomicLong ( 0L ) 
 
 diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala 
 index f31ebf4 . . 14e9802 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package im . actor . server . frontend 
 
 import akka . stream . FlowShape 
 + import kamon . metric . instrument . Histogram 
 
 import scala . util . { Failure , Success } 
 
 @ @ - 20 , 7 + 21 , 7 @ @ object MTProtoBlueprint { 
 val protoVersions : Set [ Byte ] = Set ( 1 ) 
 val apiMajorVersions : Set [ Byte ] = Set ( 1 ) 
 
 - def apply ( connId : String ) ( implicit sessionRegion : SessionRegion , system : ActorSystem ) : Flow [ ByteString , ByteString , Unit ] = { 
 + def apply ( connId : String , connTimeHist : Histogram ) ( implicit sessionRegion : SessionRegion , system : ActorSystem ) : Flow [ ByteString , ByteString , Unit ] = { 
 val authManager = system . actorOf ( AuthorizationManager . props , s " authManager - $ connId " ) 
 val authSource = Source ( ActorPublisher [ MTProto ] ( authManager ) ) 
 
 @ @ - 35 , 6 + 36 , 8 @ @ object MTProtoBlueprint { 
 val mapRespFlow : Flow [ MTProto , ByteString , Unit ] = Flow [ MTProto ] 
 . transform ( ( ) ⇒ mapResponse ( system ) ) 
 
 + val connStartTime = System . currentTimeMillis ( ) 
 + 
 val completeSink = Sink . onComplete { 
 case res ⇒ 
 res match { 
 @ @ - 44 , 6 + 47 , 7 @ @ object MTProtoBlueprint { 
 system . log . error ( e , " Closing connection due to error " ) 
 } 
 
 + connTimeHist . record ( System . currentTimeMillis ( ) - connStartTime ) 
 authManager ! PoisonPill 
 sessionClient ! PoisonPill 
 } 
 diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / TcpFrontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / TcpFrontend . scala 
 index 52ae672 . . 45186ea 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / TcpFrontend . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / TcpFrontend . scala 
 @ @ - 8 , 7 + 8 , 7 @ @ import akka . stream . scaladsl . _ 
 import im . actor . server . session . SessionRegion 
 import im . actor . tls . { Tls , TlsContext } 
 
 - object TcpFrontend extends Frontend { 
 + object TcpFrontend extends Frontend ( Map ( " type " → " tcp " ) ) { 
 override protected val connIdPrefix = " tcp " 
 
 def start ( host : String , port : Int , tlsContext : Option [ TlsContext ] ) ( 
 @ @ - 24 , 8 + 24 , 8 @ @ object TcpFrontend extends Frontend { 
 case ( Tcp . IncomingConnection ( localAddress , remoteAddress , flow ) ) ⇒ 
 log . debug ( " New TCP connection from { } " , localAddress ) 
 
 - val mtProto = MTProtoBlueprint ( nextConnId ( ) ) 
 - val connFlow = tlsContext map ( Tls . connection ( _ , flow ) ) getOrElse ( flow ) join mtProto 
 + val mtProto = MTProtoBlueprint ( nextConnId ( ) , connectionTime ) 
 + val connFlow = tlsContext map ( Tls . connection ( _ , flow ) ) getOrElse flow join mtProto 
 connFlow . run ( ) 
 } ) 
 . run ( ) 
 diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala 
 index 371c871 . . 9aa4938 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala 
 @ @ - 17 , 7 + 17 , 7 @ @ import im . actor . tls . TlsContext 
 
 import scala . concurrent . duration . _ 
 
 - object WsFrontend extends Frontend { 
 + object WsFrontend extends Frontend ( Map ( " type " → " ws " ) ) { 
 
 import Directives . _ 
 
 @ @ - 45 , 7 + 45 , 7 @ @ object WsFrontend extends Frontend { 
 connections runForeach { conn ⇒ 
 log . debug ( " New HTTP Connection { } " , conn . remoteAddress ) 
 
 - conn . handleWith ( route ( MTProtoBlueprint ( nextConnId ( ) ) ) ) 
 + conn . handleWith ( route ( MTProtoBlueprint ( nextConnId ( ) , connectionTime ) ) ) 
 } 
 } 
 
 @ @ - 78 , 14 + 78 , 19 @ @ object WsFrontend extends Frontend { 
 / / system . log . debug ( " WS Send { } " , BitVector ( bs . toByteBuffer ) . toHex ) 
 BinaryMessage . Strict ( bs ) 
 } 
 - . via ( reportErrorsFlow ) 
 + . via ( completionFlow ( System . currentTimeMillis ( ) ) ) 
 } 
 
 - def reportErrorsFlow [ T ] ( implicit system : ActorSystem ) : Flow [ T , T , Unit ] = 
 + def completionFlow [ T ] ( connStartTime : Long ) ( implicit system : ActorSystem ) : Flow [ T , T , Unit ] = 
 Flow [ T ] 
 . transform ( ( ) ⇒ new PushStage [ T , T ] { 
 def onPush ( elem : T , ctx : Context [ T ] ) : SyncDirective = ctx . push ( elem ) 
 
 + override def postStop ( ) : Unit = { 
 + super . postStop ( ) 
 + connectionTime . record ( System . currentTimeMillis ( ) - connStartTime ) 
 + } 
 + 
 override def onUpstreamFailure ( cause : Throwable , ctx : Context [ T ] ) : TerminationDirective = { 
 system . log . error ( s " WS stream failed with $ cause " ) 
 super . onUpstreamFailure ( cause , ctx )

NEAREST DIFF:
diff - - git a / actor - frontend / src / main / resources / reference . conf b / actor - frontend / src / main / resources / reference . conf 
 index 7f5c161 . . e060048 100644 
 - - - a / actor - frontend / src / main / resources / reference . conf 
 + + + b / actor - frontend / src / main / resources / reference . conf 
 @ @ - 4 , 14 + 4 , 12 @ @ actor - server { 
 interface = " 0 . 0 . 0 . 0 " 
 port = 8080 
 timeout = 5s 
 - max - buffer - size = 1 . 5M 
 } 
 
 ws { 
 interface = " 0 . 0 . 0 . 0 " 
 port = 8082 
 timeout = 5s 
 - max - buffer - size = 1 . 5M 
 } 
 } 
 
 diff - - git a / actor - frontend / src / main / scala / im / actor / server / api / frontend / HandshakeStage . scala b / actor - frontend / src / main / scala / im / actor / server / api / frontend / HandshakeStage . scala 
 index 8780b32 . . 4a8344c 100644 
 - - - a / actor - frontend / src / main / scala / im / actor / server / api / frontend / HandshakeStage . scala 
 + + + b / actor - frontend / src / main / scala / im / actor / server / api / frontend / HandshakeStage . scala 
 @ @ - 1 , 13 + 1 , 15 @ @ 
 package im . actor . server . api . frontend 
 
 - import akka . stream . stage . { Context , PushPullStage , SyncDirective } 
 + import akka . stream . stage . { Context , PushStage , SyncDirective } 
 
 import im . actor . server . mtproto . transport . { Handshake , TransportPackage } 
 
 - private [ frontend ] final class PackageCheckStage extends PushPullStage [ TransportPackage , TransportPackage ] { 
 + private [ frontend ] final class PackageCheckStage extends PushStage [ TransportPackage , TransportPackage ] { 
 
 private trait State 
 + 
 private case object AwaitHandshake extends State 
 + 
 private case object Passing extends State 
 
 / / FIXME : check package index 
 @ @ - 30 , 9 + 32 , 5 @ @ private [ frontend ] final class PackageCheckStage extends PushPullStage [ TransportP 
 ctx . push ( elem ) 
 } 
 } 
 - 
 - override def onPull ( ctx : Context [ TransportPackage ] ) : SyncDirective = { 
 - ctx . pull ( ) 
 - } 
 } 
 
 diff - - git a / actor - frontend / src / main / scala / im / actor / server / api / frontend / MTProto . scala b / actor - frontend / src / main / scala / im / actor / server / api / frontend / MTProto . scala 
 index e66ab3a . . e00b0ba 100644 
 - - - a / actor - frontend / src / main / scala / im / actor / server / api / frontend / MTProto . scala 
 + + + b / actor - frontend / src / main / scala / im / actor / server / api / frontend / MTProto . scala 
 @ @ - 17 , 7 + 17 , 7 @ @ object MTProto { 
 val protoVersions : Set [ Byte ] = Set ( 1 ) 
 val apiMajorVersions : Set [ Byte ] = Set ( 1 ) 
 
 - def flow ( connId : String , maxBufferSize : Int , sessionRegion : SessionRegion ) ( implicit db : Database , system : ActorSystem , timeout : Timeout ) = { 
 + def flow ( connId : String , sessionRegion : SessionRegion ) ( implicit db : Database , system : ActorSystem , timeout : Timeout ) = { 
 val authManager = system . actorOf ( AuthorizationManager . props ( db ) , s " authManager - $ { connId } " ) 
 val authSource = Source ( ActorPublisher [ MTProto ] ( authManager ) ) 
 
 @ @ - 61 , 19 + 61 , 15 @ @ object MTProto { 
 } 
 } 
 
 - def parsePackage ( maxBufferSize : Int ) ( implicit system : ActorSystem ) = { } 
 - 
 - def mapResponse ( system : ActorSystem ) = new PushPullStage [ MTProto , ByteString ] { 
 + def mapResponse ( system : ActorSystem ) = new PushStage [ MTProto , ByteString ] { 
 private [ this ] var packageIndex : Int = - 1 
 
 override def onPush ( elem : MTProto , ctx : Context [ ByteString ] ) = { 
 packageIndex + = 1 
 val pkg = TransportPackage ( packageIndex , elem ) 
 - / / system . log . debug ( " Sending TransportPackage { } " , pkg ) 
 
 val resBits = TransportPackageCodec . encode ( pkg ) . require 
 val res = ByteString ( resBits . toByteBuffer ) 
 - / / system . log . debug ( " Sending bytes { } " , resBits ) 
 
 elem match { 
 case _ : Drop ⇒ 
 @ @ - 82 , 7 + 78 , 5 @ @ object MTProto { 
 ctx . push ( res ) 
 } 
 } 
 - 
 - override def onPull ( ctx : Context [ ByteString ] ) = ctx . pull ( ) 
 } 
 } 
 diff - - git a / actor - frontend / src / main / scala / im / actor / server / api / frontend / PackageHandleStage . scala b / actor - frontend / src / main / scala / im / actor / server / api / frontend / PackageHandleStage . scala 
 index a6f2f4e . . 4b9f042 100644 
 - - - a / actor - frontend / src / main / scala / im / actor / server / api / frontend / PackageHandleStage . scala 
 + + + b / actor - frontend / src / main / scala / im / actor / server / api / frontend / PackageHandleStage . scala 
 @ @ - 1 , 10 + 1 , 9 @ @ 
 package im . actor . server . api . frontend 
 
 + import scala . concurrent . ExecutionContextExecutor 
 import scala . concurrent . duration . _ 
 - import scala . concurrent . { ExecutionContextExecutor , Future } 
 
 import akka . actor . { ActorRef , ActorSystem } 
 - import akka . pattern . { AskTimeoutException , ask } 
 import akka . stream . stage . _ 
 import akka . util . Timeout 
 import org . apache . commons . codec . digest . DigestUtils 
 diff - - git a / actor - frontend / src / main / scala / im / actor / server / api / frontend / TcpFrontend . scala b / actor - frontend / src / main / scala / im / actor / server / api / frontend / TcpFrontend . scala 
 index eb962ae . . 66262b6 100644 
 - - - a / actor - frontend / src / main / scala / im / actor / server / api / frontend / TcpFrontend . scala 
 + + + b / actor - frontend / src / main / scala / im / actor / server / api / frontend / TcpFrontend . scala 
 @ @ - 21 , 7 + 21 , 6 @ @ object TcpFrontend extends Frontend { 
 val config = appConf . getConfig ( " frontend . tcp " ) 
 
 implicit val askTimeout = Timeout ( config . getDuration ( " timeout " , TimeUnit . MILLISECONDS ) , TimeUnit . MILLISECONDS ) 
 - val maxBufferSize = config . getBytes ( " max - buffer - size " ) . toInt 
 val interface = config . getString ( " interface " ) 
 val port = config . getInt ( " port " ) 
 
 @ @ - 31 , 7 + 30 , 7 @ @ object TcpFrontend extends Frontend { 
 log . info ( s " Client connected from : $ { conn . remoteAddress } " ) 
 
 try { 
 - val flow = MTProto . flow ( nextConnId ( ) , maxBufferSize , sessionRegion ) 
 + val flow = MTProto . flow ( nextConnId ( ) , sessionRegion ) 
 conn . handleWith ( flow ) 
 } catch { 
 case e : Exception ⇒ 
 diff - - git a / actor - frontend / src / main / scala / im / actor / server / api / frontend / WsFrontend . scala b / actor - frontend / src / main / scala / im / actor / server / api / frontend / WsFrontend . scala 
 index 2891ecd . . 9608683 100644 
 - - - a / actor - frontend / src / main / scala / im / actor / server / api / frontend / WsFrontend . scala 
 + + + b / actor - frontend / src / main / scala / im / actor / server / api / frontend / WsFrontend . scala 
 @ @ - 29 , 21 + 29 , 20 @ @ object WsFrontend extends Frontend { 
 implicit val askTimeout = Timeout ( config . getDuration ( " timeout " , TimeUnit . MILLISECONDS ) , TimeUnit . MILLISECONDS ) 
 implicit val ec : ExecutionContext = system . dispatcher 
 
 - val maxBufferSize = config . getBytes ( " max - buffer - size " ) . toInt 
 val interface = config . getString ( " interface " ) 
 val port = config . getInt ( " port " ) 
 
 val connections = Http ( ) . bind ( interface , port ) 
 
 connections runForeach { conn ⇒ 
 - conn . handleWith ( route ( maxBufferSize , sessionRegion ) ) 
 + conn . handleWith ( route ( sessionRegion ) ) 
 } 
 } 
 
 - def route ( maxBufferSize : Int , sessionRegion : SessionRegion ) ( implicit db : Database , timeout : Timeout , system : ActorSystem ) : Route = { 
 + def route ( sessionRegion : SessionRegion ) ( implicit db : Database , timeout : Timeout , system : ActorSystem ) : Route = { 
 get { 
 pathSingleSlash { 
 - val mtProtoFlow = MTProto . flow ( nextConnId ( ) , maxBufferSize , sessionRegion ) 
 + val mtProtoFlow = MTProto . flow ( nextConnId ( ) , sessionRegion ) 
 
 handleWebsocketMessages ( flow ( mtProtoFlow ) ) 
 }
