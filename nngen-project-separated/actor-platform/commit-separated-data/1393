BLEU SCORE: 0.2521193618434983

TEST MSG: chore ( server ) : added actor - sbt - houserules plugin
GENERATED MSG: refactor ( server ) : upgraded sbt - scalariform

TEST DIFF (one line): diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala < nl > index 74489ec . . 4e667da 100644 < nl > - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala < nl > + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala < nl > @ @ - 65 , 7 + 65 , 7 @ @ abstract class BotBase extends BotBaseBase { < nl > case ( replyTo , rq ) ⇒ < nl > < nl > val reply = rsp . body match { < nl > - case err : BotError ⇒ Status . Failure ( err ) < nl > + case err : BotError ⇒ Status . Failure ( err ) < nl > case BotSuccess ( obj ) ⇒ rq . readResponse ( obj ) < nl > } < nl > replyTo ! reply < nl > diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > index a2ec686 . . 332fff7 100644 < nl > - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > @ @ - 28 , 9 + 28 , 9 @ @ private [ botkit ] object WebsocketClient { < nl > } < nl > < nl > private [ botkit ] final class WebsocketClient ( url : String ) < nl > - extends ActorPublisher [ String ] < nl > - with ActorSubscriber < nl > - with ActorLogging { < nl > + extends ActorPublisher [ String ] < nl > + with ActorSubscriber < nl > + with ActorLogging { < nl > import context . system < nl > < nl > implicit def sslEngineProvider : ServerSSLEngineProvider = { < nl > @ @ - 74 , 7 + 74 , 7 @ @ private [ botkit ] final class WebsocketClient ( url : String ) < nl > val host = uri . getHost < nl > val port = uri . getPort match { < nl > case - 1 ⇒ if ( ssl ) 443 else 80 < nl > - case p ⇒ p < nl > + case p ⇒ p < nl > } < nl > < nl > val agent = " spray - websocket - client " + ( if ( ssl ) " - ssl " else " - basic " ) < nl > diff - - git a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > index a545a77 . . 09eeb71 100644 < nl > - - - a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > + + + b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > @ @ - 27 , 28 + 27 , 28 @ @ object BotMessages { < nl > } < nl > < nl > final case class FileLocation ( < nl > - @ beanGetter fileId : Long , < nl > + @ beanGetter fileId : Long , < nl > @ beanGetter accessHash : Long < nl > ) < nl > < nl > final case class AvatarImage ( < nl > @ beanGetter fileLocation : FileLocation , < nl > - @ beanGetter width : Int , < nl > - @ beanGetter height : Int , < nl > - @ beanGetter fileSize : Int < nl > + @ beanGetter width : Int , < nl > + @ beanGetter height : Int , < nl > + @ beanGetter fileSize : Int < nl > ) < nl > < nl > final case class ImageLocation ( < nl > @ beanGetter fileLocation : FileLocation , < nl > - @ beanGetter width : Int , < nl > - @ beanGetter height : Int , < nl > - @ beanGetter fileSize : Int < nl > + @ beanGetter width : Int , < nl > + @ beanGetter height : Int , < nl > + @ beanGetter fileSize : Int < nl > ) < nl > < nl > final case class Avatar ( < nl > @ beanGetter smallImage : Option [ AvatarImage ] , < nl > @ beanGetter largeImage : Option [ AvatarImage ] , < nl > - @ beanGetter fullImage : Option [ AvatarImage ] < nl > + @ beanGetter fullImage : Option [ AvatarImage ] < nl > ) < nl > < nl > final case class ContactInfo ( < nl > @ @ - 65 , 17 + 65 , 17 @ @ object BotMessages { < nl > final case class PhoneContactRecord ( phone : Long ) extends ContactRecord < nl > < nl > final case class User ( < nl > - @ beanGetter id : Int , < nl > - @ beanGetter accessHash : Long , < nl > - @ beanGetter name : String , < nl > - @ beanGetter sex : Option [ Int ] , < nl > - about : Option [ String ] , < nl > - avatar : Option [ Avatar ] , < nl > - username : Option [ String ] , < nl > - isBot : Option [ Boolean ] , < nl > - contactRecords : Seq [ ContactRecord ] , < nl > - timeZone : Option [ String ] , < nl > - preferredLanguages : Seq [ String ] < nl > + @ beanGetter id : Int , < nl > + @ beanGetter accessHash : Long , < nl > + @ beanGetter name : String , < nl > + @ beanGetter sex : Option [ Int ] , < nl > + about : Option [ String ] , < nl > + avatar : Option [ Avatar ] , < nl > + username : Option [ String ] , < nl > + isBot : Option [ Boolean ] , < nl > + contactRecords : Seq [ ContactRecord ] , < nl > + timeZone : Option [ String ] , < nl > + preferredLanguages : Seq [ String ] < nl > ) { < nl > def isMale = sex . contains ( 1 ) < nl > < nl > @ @ - 109 , 23 + 109 , 23 @ @ object BotMessages { < nl > } < nl > < nl > final case class GroupMember ( < nl > - @ beanGetter userId : Int , < nl > - @ beanGetter inviterUserId : Int , < nl > - @ beanGetter memberSince : Long , < nl > - isAdmin : Option [ Boolean ] < nl > + @ beanGetter userId : Int , < nl > + @ beanGetter inviterUserId : Int , < nl > + @ beanGetter memberSince : Long , < nl > + isAdmin : Option [ Boolean ] < nl > ) { < nl > def getIsAdmin = isAdmin . asJava < nl > } < nl > < nl > final case class Group ( < nl > - @ beanGetter id : Int , < nl > - @ beanGetter accessHash : Long , < nl > - @ beanGetter title : String , < nl > - about : Option [ String ] , < nl > - avatar : Option [ Avatar ] , < nl > - @ beanGetter isMember : Boolean , < nl > - @ beanGetter creatorUserId : Int , < nl > - members : Seq [ GroupMember ] < nl > + @ beanGetter id : Int , < nl > + @ beanGetter accessHash : Long , < nl > + @ beanGetter title : String , < nl > + about : Option [ String ] , < nl > + avatar : Option [ Avatar ] , < nl > + @ beanGetter isMember : Boolean , < nl > + @ beanGetter creatorUserId : Int , < nl > + members : Seq [ GroupMember ] < nl > ) { < nl > def getAbout = about . asJava < nl > < nl > @ @ - 162 , 8 + 162 , 8 @ @ object BotMessages { < nl > < nl > @ key ( " Group " ) < nl > final case class GroupOutPeer ( < nl > - @ beanGetter id : Int , < nl > - @ beanGetter accessHash : Long < nl > + @ beanGetter id : Int , < nl > + @ beanGetter accessHash : Long < nl > ) extends OutPeer { < nl > override val isPrivate = false < nl > override val isGroup = true < nl > @ @ - 171 , 8 + 171 , 8 @ @ object BotMessages { < nl > < nl > @ key ( " User " ) < nl > final case class UserOutPeer ( < nl > - @ beanGetter id : Int , < nl > - @ beanGetter accessHash : Long < nl > + @ beanGetter id : Int , < nl > + @ beanGetter accessHash : Long < nl > ) extends OutPeer { < nl > override val isPrivate = true < nl > override val isGroup = false < nl > @ @ - 189 , 14 + 189 , 14 @ @ object BotMessages { < nl > < nl > @ key ( " Request " ) < nl > final case class BotRequest ( < nl > - id : Long , < nl > + id : Long , < nl > service : String , < nl > - body : RequestBody < nl > + body : RequestBody < nl > ) extends BotMessageIn < nl > < nl > @ key ( " Response " ) < nl > final case class BotResponse ( < nl > - id : Long , < nl > + id : Long , < nl > body : BotResponseBody < nl > ) extends BotMessageOut < nl > < nl > @ @ - 211 , 15 + 211 , 15 @ @ object BotMessages { < nl > < nl > @ key ( " SeqUpdate " ) < nl > final case class BotSeqUpdate ( < nl > - seq : Int , < nl > + seq : Int , < nl > body : UpdateBody < nl > ) extends BotUpdate < nl > < nl > @ key ( " FatSeqUpdate " ) < nl > final case class BotFatSeqUpdate ( < nl > - seq : Int , < nl > - body : UpdateBody , < nl > - users : Map [ Int , User ] , < nl > + seq : Int , < nl > + body : UpdateBody , < nl > + users : Map [ Int , User ] , < nl > groups : Map [ Int , Group ] < nl > ) extends BotUpdate < nl > < nl > @ @ - 281 , 9 + 281 , 9 @ @ object BotMessages { < nl > < nl > @ key ( " SendMessage " ) < nl > final case class SendMessage ( < nl > - @ beanGetter peer : OutPeer , < nl > - @ beanGetter randomId : Long , < nl > - @ beanGetter message : MessageBody < nl > + @ beanGetter peer : OutPeer , < nl > + @ beanGetter randomId : Long , < nl > + @ beanGetter message : MessageBody < nl > ) extends RequestBody { < nl > override type Response = MessageSent < nl > override val service = Services . Messaging < nl > @ @ - 293 , 9 + 293 , 9 @ @ object BotMessages { < nl > < nl > @ key ( " SetValue " ) < nl > final case class SetValue ( < nl > - @ beanGetter keyspace : String , < nl > - @ beanGetter key : String , < nl > - @ beanGetter value : String < nl > + @ beanGetter keyspace : String , < nl > + @ beanGetter key : String , < nl > + @ beanGetter value : String < nl > ) extends RequestBody { < nl > override type Response = Void < nl > override val service = Services . KeyValue < nl > @ @ - 305 , 8 + 305 , 8 @ @ object BotMessages { < nl > < nl > @ key ( " GetValue " ) < nl > final case class GetValue ( < nl > - @ beanGetter keyspace : String , < nl > - @ beanGetter key : String < nl > + @ beanGetter keyspace : String , < nl > + @ beanGetter key : String < nl > ) extends RequestBody { < nl > override type Response = Container [ Option [ String ] ] < nl > override val service = Services . KeyValue < nl > @ @ - 316 , 8 + 316 , 8 @ @ object BotMessages { < nl > < nl > @ key ( " DeleteValue " ) < nl > final case class DeleteValue ( < nl > - @ beanGetter keyspace : String , < nl > - @ beanGetter key : String < nl > + @ beanGetter keyspace : String , < nl > + @ beanGetter key : String < nl > ) extends RequestBody { < nl > override type Response = Void < nl > override val service = Services . KeyValue < nl > @ @ - 336 , 8 + 336 , 8 @ @ object BotMessages { < nl > / / username is nickname < nl > @ key ( " CreateBot " ) < nl > final case class CreateBot ( < nl > - @ beanGetter username : String , < nl > - @ beanGetter name : String < nl > + @ beanGetter username : String , < nl > + @ beanGetter name : String < nl > ) extends RequestBody { < nl > override type Response = BotCreated < nl > override val service = Services . Bots < nl > @ @ - 347 , 7 + 347 , 7 @ @ object BotMessages { < nl > < nl > @ key ( " BotCreated " ) < nl > final case class BotCreated ( < nl > - @ beanGetter token : String , < nl > + @ beanGetter token : String , < nl > @ beanGetter userId : Int < nl > ) extends ResponseBody < nl > < nl > @ @ - 372 , 8 + 372 , 8 @ @ object BotMessages { < nl > < nl > @ key ( " ChangeUserAvatar " ) < nl > final case class ChangeUserAvatar ( < nl > - @ beanGetter userId : Int , < nl > - @ beanGetter fileLocation : FileLocation < nl > + @ beanGetter userId : Int , < nl > + @ beanGetter fileLocation : FileLocation < nl > ) extends RequestBody { < nl > override type Response = Void < nl > override val service = Services . Users < nl > @ @ - 383 , 8 + 383 , 8 @ @ object BotMessages { < nl > < nl > @ key ( " ChangeUserName " ) < nl > final case class ChangeUserName ( < nl > - @ beanGetter userId : Int , < nl > - @ beanGetter name : String < nl > + @ beanGetter userId : Int , < nl > + @ beanGetter name : String < nl > ) extends RequestBody { < nl > override type Response = Void < nl > override val service = Services . Users < nl > @ @ - 394 , 8 + 394 , 8 @ @ object BotMessages { < nl > < nl > @ key ( " ChangeUserNickname " ) < nl > final case class ChangeUserNickname ( < nl > - @ beanGetter userId : Int , < nl > - @ beanGetter nickname : Option [ String ] < nl > + @ beanGetter userId : Int , < nl > + @ beanGetter nickname : Option [ String ] < nl > ) extends RequestBody { < nl > override type Response = Void < nl > override val service = Services . Users < nl > @ @ - 405 , 8 + 405 , 8 @ @ object BotMessages { < nl > < nl > @ key ( " ChangeUserAbout " ) < nl > final case class ChangeUserAbout ( < nl > - @ beanGetter userId : Int , < nl > - about : Option [ String ] < nl > + @ beanGetter userId : Int , < nl > + about : Option [ String ] < nl > ) extends RequestBody { < nl > override type Response = Void < nl > override val service = Services . Users < nl > @ @ - 429 , 7 + 429 , 7 @ @ object BotMessages { < nl > < nl > @ key ( " FindUser " ) < nl > final case class FindUser ( < nl > - @ beanGetter query : String < nl > + @ beanGetter query : String < nl > ) extends RequestBody { < nl > override type Response = FoundUsers < nl > override val service : String = Services . Users < nl > @ @ - 445 , 7 + 445 , 7 @ @ object BotMessages { < nl > < nl > @ key ( " CreateGroup " ) < nl > final case class CreateGroup ( < nl > - title : String < nl > + title : String < nl > ) extends RequestBody { < nl > override type Response = ResponseCreateGroup < nl > override val service : String = Services . Groups < nl > @ @ - 483 , 8 + 483 , 8 @ @ object BotMessages { < nl > < nl > @ key ( " ShowStickers " ) < nl > final case class ShowStickers ( < nl > - @ beanGetter ownerUserId : Int , < nl > - @ beanGetter packId : Int < nl > + @ beanGetter ownerUserId : Int , < nl > + @ beanGetter packId : Int < nl > ) extends RequestBody { < nl > override type Response = StickerIds < nl > override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) < nl > @ @ - 497 , 10 + 497 , 10 @ @ object BotMessages { < nl > < nl > @ key ( " AddSticker " ) < nl > final case class AddSticker ( < nl > - @ beanGetter ownerUserId : Int , < nl > - @ beanGetter packId : Int , < nl > - emoji : Option [ String ] , < nl > - @ beanGetter fileLocation : FileLocation < nl > + @ beanGetter ownerUserId : Int , < nl > + @ beanGetter packId : Int , < nl > + emoji : Option [ String ] , < nl > + @ beanGetter fileLocation : FileLocation < nl > ) extends RequestBody { < nl > override type Response = Void < nl > override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) < nl > @ @ - 511 , 9 + 511 , 9 @ @ object BotMessages { < nl > < nl > @ key ( " DeleteSticker " ) < nl > final case class DeleteSticker ( < nl > - @ beanGetter ownerUserId : Int , < nl > - @ beanGetter packId : Int , < nl > - @ beanGetter stickerId : Int < nl > + @ beanGetter ownerUserId : Int , < nl > + @ beanGetter packId : Int , < nl > + @ beanGetter stickerId : Int < nl > ) extends RequestBody { < nl > override type Response = Void < nl > override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) < nl > @ @ - 522 , 8 + 522 , 8 @ @ object BotMessages { < nl > < nl > @ key ( " MakeStickerPackDefault " ) < nl > final case class MakeStickerPackDefault ( < nl > - @ beanGetter userId : Int , < nl > - @ beanGetter packId : Int < nl > + @ beanGetter userId : Int , < nl > + @ beanGetter packId : Int < nl > ) extends RequestBody { < nl > override type Response = Void < nl > override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) < nl > @ @ - 532 , 8 + 532 , 8 @ @ object BotMessages { < nl > < nl > @ key ( " UnmakeStickerPackDefault " ) < nl > final case class UnmakeStickerPackDefault ( < nl > - @ beanGetter userId : Int , < nl > - @ beanGetter packId : Int < nl > + @ beanGetter userId : Int , < nl > + @ beanGetter packId : Int < nl > ) extends RequestBody { < nl > override type Response = Void < nl > override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) < nl > @ @ - 542 , 17 + 542 , 17 @ @ object BotMessages { < nl > < nl > @ key ( " Message " ) < nl > final case class Message ( < nl > - @ beanGetter peer : OutPeer , < nl > - @ beanGetter sender : UserOutPeer , < nl > - @ beanGetter date : Long , < nl > + @ beanGetter peer : OutPeer , < nl > + @ beanGetter sender : UserOutPeer , < nl > + @ beanGetter date : Long , < nl > @ beanGetter randomId : Long , < nl > - @ beanGetter message : MessageBody < nl > + @ beanGetter message : MessageBody < nl > ) extends UpdateBody < nl > < nl > @ key ( " RawUpdate " ) < nl > final case class RawUpdate ( < nl > - ` type ` : Option [ String ] , < nl > - @ beanGetter data : String < nl > + ` type ` : Option [ String ] , < nl > + @ beanGetter data : String < nl > ) extends UpdateBody { < nl > def getType = ` type ` . asJava < nl > } < nl > @ @ - 570 , 12 + 570 , 12 @ @ object BotMessages { < nl > < nl > @ key ( " Sticker " ) < nl > final case class StickerMessage ( < nl > - stickerId : Option [ Int ] , < nl > - fastPreview : Option [ Array [ Byte ] ] , < nl > - image512 : Option [ ImageLocation ] , < nl > - image256 : Option [ ImageLocation ] , < nl > - stickerCollectionId : Option [ Int ] , < nl > - stickerCollectionAccessHash : Option [ Long ] < nl > + stickerId : Option [ Int ] , < nl > + fastPreview : Option [ Array [ Byte ] ] , < nl > + image512 : Option [ ImageLocation ] , < nl > + image256 : Option [ ImageLocation ] , < nl > + stickerCollectionId : Option [ Int ] , < nl > + stickerCollectionAccessHash : Option [ Long ] < nl > ) extends MessageBody { < nl > def getStickerId = stickerId . asPrimitive < nl > def getFastPreview = fastPreview . asJava < nl > @ @ - 589 , 18 + 589 , 18 @ @ object BotMessages { < nl > < nl > @ key ( " TextModernMessage " ) < nl > final case class TextModernMessage ( < nl > - text : Option [ String ] , < nl > - senderNameOverride : Option [ String ] , < nl > - senderPhotoOverride : Option [ Avatar ] , < nl > - style : Option [ ParagraphStyle ] , < nl > - attaches : IndexedSeq [ TextModernAttach ] < nl > + text : Option [ String ] , < nl > + senderNameOverride : Option [ String ] , < nl > + senderPhotoOverride : Option [ Avatar ] , < nl > + style : Option [ ParagraphStyle ] , < nl > + attaches : IndexedSeq [ TextModernAttach ] < nl > ) extends TextMessageEx { < nl > def this ( < nl > - text : String , < nl > - senderNameOverride : String , < nl > + text : String , < nl > + senderNameOverride : String , < nl > senderPhotoOverride : Avatar , < nl > - style : ParagraphStyle , < nl > - attaches : java . util . List [ TextModernAttach ] < nl > + style : ParagraphStyle , < nl > + attaches : java . util . List [ TextModernAttach ] < nl > ) = < nl > this ( Option ( text ) , Option ( senderNameOverride ) , Option ( senderPhotoOverride ) , Option ( style ) , attaches . toIndexedSeq ) < nl > < nl > @ @ - 612 , 12 + 612 , 12 @ @ object BotMessages { < nl > } < nl > < nl > final case class TextModernAttach ( < nl > - title : Option [ String ] , < nl > - titleUrl : Option [ String ] , < nl > - titleIcon : Option [ ImageLocation ] , < nl > - text : Option [ String ] , < nl > - style : Option [ ParagraphStyle ] , < nl > - fields : IndexedSeq [ TextModernField ] < nl > + title : Option [ String ] , < nl > + titleUrl : Option [ String ] , < nl > + titleIcon : Option [ ImageLocation ] , < nl > + text : Option [ String ] , < nl > + style : Option [ ParagraphStyle ] , < nl > + fields : IndexedSeq [ TextModernField ] < nl > ) { < nl > def this ( < nl > title : String , < nl > @ @ - 641 , 9 + 641 , 9 @ @ object BotMessages { < nl > } < nl > < nl > final case class ParagraphStyle ( < nl > - showParagraph : Option [ Boolean ] , < nl > - paragraphColor : Option [ Color ] , < nl > - bgColor : Option [ Color ] < nl > + showParagraph : Option [ Boolean ] , < nl > + paragraphColor : Option [ Color ] , < nl > + bgColor : Option [ Color ] < nl > ) { < nl > def getShowParagraph = showParagraph . asJava < nl > def getParagraphColor = paragraphColor . asJava < nl > @ @ - 668 , 13 + 668 , 13 @ @ object BotMessages { < nl > < nl > @ key ( " Document " ) < nl > final case class DocumentMessage ( < nl > - @ beanGetter fileId : Long , < nl > - @ beanGetter accessHash : Long , < nl > - @ beanGetter fileSize : Long , < nl > - @ beanGetter name : String , < nl > - @ beanGetter mimeType : String , < nl > - thumb : Option [ FastThumb ] , < nl > - ext : Option [ DocumentEx ] < nl > + @ beanGetter fileId : Long , < nl > + @ beanGetter accessHash : Long , < nl > + @ beanGetter fileSize : Long , < nl > + @ beanGetter name : String , < nl > + @ beanGetter mimeType : String , < nl > + thumb : Option [ FastThumb ] , < nl > + ext : Option [ DocumentEx ] < nl > ) extends MessageBody { < nl > def getThumb = thumb . asJava < nl > < nl > @ @ - 692 , 23 + 692 , 23 @ @ object BotMessages { < nl > < nl > @ key ( " FastThumb " ) < nl > final case class FastThumb ( < nl > - @ beanGetter width : Int , < nl > + @ beanGetter width : Int , < nl > @ beanGetter height : Int , < nl > - @ beanGetter thumb : String < nl > + @ beanGetter thumb : String < nl > ) < nl > < nl > sealed trait DocumentEx < nl > < nl > @ key ( " Photo " ) < nl > final case class DocumentExPhoto ( < nl > - @ beanGetter width : Int , < nl > + @ beanGetter width : Int , < nl > @ beanGetter height : Int < nl > ) extends DocumentEx < nl > < nl > @ key ( " Video " ) < nl > final case class DocumentExVideo ( < nl > - @ beanGetter width : Int , < nl > - @ beanGetter height : Int , < nl > + @ beanGetter width : Int , < nl > + @ beanGetter height : Int , < nl > @ beanGetter duration : Int < nl > ) extends DocumentEx < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > index 5c6d83d . . 537daa8 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > @ @ - 290 , 7 + 290 , 7 @ @ private [ user ] sealed trait AuthCommands { < nl > ( processorRegion . ref ? NewAuth ( userId , authId ) ) . mapTo [ NewAuthAck ] < nl > } < nl > < nl > - def removeAuth ( userId : Int , authId : Long ) : Future [ RemoveAuthAck ] = ( processorRegion . ref ? RemoveAuth ( userId , authId ) ) . mapTo [ RemoveAuthAck ] < nl > + def removeAuth ( userId : Int , authId : Long ) : Future [ RemoveAuthAck ] = ( processorRegion . ref ? RemoveAuth ( userId , authId ) ) . mapTo [ RemoveAuthAck ] < nl > < nl > def logoutByAppleToken ( token : Array [ Byte ] ) ( implicit db : Database ) : Future [ Unit ] = { < nl > db . run ( p . push . ApplePushCredentialsRepo . findByToken ( token ) ) flatMap { creds ⇒ < nl > diff - - git a / actor - server / project / Build . scala b / actor - server / project / Build . scala < nl > index 4b49a44 . . b8ea444 100644 < nl > - - - a / actor - server / project / Build . scala < nl > + + + b / actor - server / project / Build . scala < nl > @ @ - 43 , 7 + 43 , 7 @ @ object Build extends sbt . Build with Versioning with Releasing with Publishing { < nl > ) + + compilerWarnings < nl > < nl > lazy val defaultSettings = < nl > - buildSettings + + Formatting . formatSettings + + < nl > + buildSettings + + < nl > PB . protobufSettings + + Seq ( < nl > / / PB . javaConversions in PB . protobufConfig : = true , < nl > libraryDependencies + = " com . trueaccord . scalapb " % % " scalapb - runtime " % " 0 . 5 . 17 " % PB . protobufConfig , < nl > diff - - git a / actor - server / project / Formatting . scala b / actor - server / project / Formatting . scala < nl > deleted file mode 100644 < nl > index cd6bf6e . . 0000000 < nl > - - - a / actor - server / project / Formatting . scala < nl > + + + / dev / null < nl > @ @ - 1 , 37 + 0 , 0 @ @ < nl > - package im . actor < nl > - < nl > - import sbt . _ < nl > - / / import com . typesafe . sbt . SbtMultiJvm . MultiJvmKeys . MultiJvm < nl > - import com . typesafe . sbt . SbtScalariform < nl > - import com . typesafe . sbt . SbtScalariform . ScalariformKeys < nl > - < nl > - object Formatting { < nl > - lazy val formatSettings = SbtScalariform . scalariformSettings + + Seq ( < nl > - ScalariformKeys . preferences in Compile : = formattingPreferences , < nl > - ScalariformKeys . preferences in Test : = formattingPreferences < nl > - / / ScalariformKeys . preferences in MultiJvm : = formattingPreferences < nl > - ) < nl > - < nl > - lazy val docFormatSettings = SbtScalariform . scalariformSettings + + Seq ( < nl > - ScalariformKeys . preferences in Compile : = docFormattingPreferences , < nl > - ScalariformKeys . preferences in Test : = docFormattingPreferences < nl > - / / ScalariformKeys . preferences in MultiJvm : = docFormattingPreferences < nl > - ) < nl > - < nl > - def formattingPreferences = { < nl > - import scalariform . formatter . preferences . _ < nl > - FormattingPreferences ( ) < nl > - . setPreference ( RewriteArrowSymbols , true ) < nl > - . setPreference ( AlignParameters , true ) < nl > - . setPreference ( AlignSingleLineCaseStatements , true ) < nl > - . setPreference ( SpacesAroundMultiImports , true ) < nl > - } < nl > - < nl > - def docFormattingPreferences = { < nl > - import scalariform . formatter . preferences . _ < nl > - FormattingPreferences ( ) < nl > - . setPreference ( RewriteArrowSymbols , false ) < nl > - . setPreference ( AlignParameters , true ) < nl > - . setPreference ( AlignSingleLineCaseStatements , true ) < nl > - } < nl > - } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / project / plugins . sbt b / actor - server / project / plugins . sbt < nl > index 417695c . . 30828c5 100644 < nl > - - - a / actor - server / project / plugins . sbt < nl > + + + b / actor - server / project / plugins . sbt < nl > @ @ - 2 , 6 + 2 , 7 @ @ resolvers + + = Seq ( < nl > " Typesafe repository " at " http : / / repo . typesafe . com / typesafe / releases / " , < nl > " Sonatype OSS Releases " at " https : / / oss . sonatype . org / content / repositories / releases / " , < nl > " Sonatype OSS Snapshots " at " https : / / oss . sonatype . org / content / repositories / snapshots / " , < nl > + Resolver . url ( " actor - sbt - plugins " , url ( " https : / / dl . bintray . com / actor / sbt - plugins " ) ) ( Resolver . ivyStylePatterns ) , < nl > " Flyway " at " http : / / flywaydb . org / repo " , < nl > " Era7 maven releases " at " https : / / s3 - eu - west - 1 . amazonaws . com / releases . era7 . com " , < nl > Classpaths . sbtPluginReleases < nl > @ @ - 39 , 6 + 40 , 8 @ @ addSbtPlugin ( " ohnosequences " % " sbt - github - release " % " 0 . 3 . 0 " ) < nl > < nl > addSbtPlugin ( " com . typesafe . sbt " % " sbt - aspectj " % " 0 . 10 . 0 " ) < nl > < nl > + addSbtPlugin ( " im . actor " % " actor - sbt - houserules " % " 0 . 1 . 1 " ) < nl > + < nl > libraryDependencies + + = Seq ( < nl > " com . github . os72 " % " protoc - jar " % " 3 . 0 . 0 - b1 " < nl > ) < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala < nl > index 45bdd96 . . 76ed9b4 100644 < nl > - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala < nl > + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala < nl > @ @ - 1 , 6 + 1 , 6 @ @ < nl > package im . actor . botkit < nl > < nl > - import akka . actor . { Status , ActorRef , ActorLogging , Actor } < nl > + import akka . actor . { Status , ActorRef , ActorLogging , Actor } < nl > import akka . pattern . ask < nl > import akka . util . Timeout < nl > import im . actor . bots . BotMessages < nl > @ @ - 17 , 7 + 17 , 6 @ @ abstract class BotBase extends BotBaseBase { < nl > import BotMessages . _ < nl > import context . dispatcher < nl > < nl > - < nl > protected implicit val timeout : Timeout < nl > < nl > private var requestCounter = 0L < nl > @ @ - 32 , 37 + 31 , 37 @ @ abstract class BotBase extends BotBaseBase { < nl > protected def onStreamFailure ( cause : Throwable ) : Unit < nl > < nl > protected final def workingBehavior ( rqSource : ActorRef ) : Receive = { < nl > - case Status . Failure ( cause ) = > < nl > + case Status . Failure ( cause ) ⇒ < nl > onStreamFailure ( cause ) < nl > - case rq : RequestBody = > < nl > + case rq : RequestBody ⇒ < nl > requestCounter + = 1 < nl > val request = BotRequest ( requestCounter , rq . service , rq ) < nl > - requests + = ( requestCounter - > ( sender ( ) - > rq ) ) < nl > + requests + = ( requestCounter → ( sender ( ) → rq ) ) < nl > rqSource ! request < nl > case upd : BotUpdate ⇒ < nl > log . debug ( " Update { } " , upd ) < nl > < nl > upd match { < nl > - case BotFatSeqUpdate ( _ , _ , users , groups ) = > < nl > + case BotFatSeqUpdate ( _ , _ , users , groups ) ⇒ < nl > users foreach { < nl > - case ( id , user ) = > this . users . putIfAbsent ( id , user ) < nl > + case ( id , user ) ⇒ this . users . putIfAbsent ( id , user ) < nl > } < nl > < nl > groups foreach { < nl > - case ( id , group ) = > this . groups . putIfAbsent ( id , group ) < nl > + case ( id , group ) ⇒ this . groups . putIfAbsent ( id , group ) < nl > } < nl > - case _ = > < nl > + case _ ⇒ < nl > } < nl > < nl > onUpdate ( upd . body ) < nl > case rsp : BotResponse ⇒ < nl > log . info ( " Response # { } : { } " , rsp . id , rsp . body ) < nl > requests . get ( rsp . id ) foreach { < nl > - case ( replyTo , rq ) = > < nl > + case ( replyTo , rq ) ⇒ < nl > < nl > val reply = rsp . body match { < nl > - case err : BotError = > Status . Failure ( err ) < nl > - case BotSuccess ( obj ) = > rq . readResponse ( obj ) < nl > + case err : BotError ⇒ Status . Failure ( err ) < nl > + case BotSuccess ( obj ) ⇒ rq . readResponse ( obj ) < nl > } < nl > replyTo ! reply < nl > } < nl > diff - - git a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > index ab801b0 . . 83e7eec 100644 < nl > - - - a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > + + + b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > @ @ - 18 , 33 + 18 , 33 @ @ object BotMessages { < nl > } < nl > < nl > final case class FileLocation ( < nl > - fileId : Long , < nl > - accessHash : Long < nl > - ) < nl > + fileId : Long , < nl > + accessHash : Long < nl > + ) < nl > < nl > final case class AvatarImage ( < nl > - fileLocation : FileLocation , < nl > - width : Int , < nl > - height : Int , < nl > - fileSize : Int < nl > - ) < nl > + fileLocation : FileLocation , < nl > + width : Int , < nl > + height : Int , < nl > + fileSize : Int < nl > + ) < nl > < nl > final case class Avatar ( < nl > - smallImage : Option [ AvatarImage ] , < nl > - largeImage : Option [ AvatarImage ] , < nl > - fullImage : Option [ AvatarImage ] < nl > - ) < nl > + smallImage : Option [ AvatarImage ] , < nl > + largeImage : Option [ AvatarImage ] , < nl > + fullImage : Option [ AvatarImage ] < nl > + ) < nl > < nl > final case class User ( < nl > - id : Int , < nl > - accessHash : Long , < nl > - name : String , < nl > - sex : Option [ Int ] , < nl > - about : Option [ String ] , < nl > - avatar : Option [ Avatar ] , < nl > - username : Option [ String ] , < nl > - isBot : Option [ Boolean ] < nl > - ) { < nl > + id : Int , < nl > + accessHash : Long , < nl > + name : String , < nl > + sex : Option [ Int ] , < nl > + about : Option [ String ] , < nl > + avatar : Option [ Avatar ] , < nl > + username : Option [ String ] , < nl > + isBot : Option [ Boolean ] < nl > + ) { < nl > def isMale = sex . contains ( 1 ) < nl > < nl > def isFemale = sex . contains ( 2 ) < nl > @ @ - 53 , 22 + 53 , 22 @ @ object BotMessages { < nl > } < nl > < nl > final case class GroupMember ( < nl > - userId : Int , < nl > - inviterUserId : Int , < nl > - memberSince : Long , < nl > - isAdmin : Option [ Boolean ] < nl > - ) < nl > + userId : Int , < nl > + inviterUserId : Int , < nl > + memberSince : Long , < nl > + isAdmin : Option [ Boolean ] < nl > + ) < nl > < nl > final case class Group ( < nl > - id : Int , < nl > - accessHash : Long , < nl > - title : String , < nl > - about : Option [ String ] , < nl > - avatar : Option [ Avatar ] , < nl > - isMember : Boolean , < nl > - creatorUserId : Int , < nl > - members : Seq [ GroupMember ] < nl > - ) < nl > + id : Int , < nl > + accessHash : Long , < nl > + title : String , < nl > + about : Option [ String ] , < nl > + avatar : Option [ Avatar ] , < nl > + isMember : Boolean , < nl > + creatorUserId : Int , < nl > + members : Seq [ GroupMember ] < nl > + ) < nl > < nl > final object OutPeer { < nl > def privat ( id : Int , accessHash : Long ) = OutPeer ( 1 , id , accessHash ) < nl > @ @ - 79 , 10 + 79 , 10 @ @ object BotMessages { < nl > } < nl > < nl > final case class OutPeer ( < nl > - ` type ` : Int , < nl > - id : Int , < nl > - accessHash : Long < nl > - ) { < nl > + ` type ` : Int , < nl > + id : Int , < nl > + accessHash : Long < nl > + ) { < nl > final def isPrivate = ` type ` = = 1 < nl > < nl > final def isUser = isPrivate < nl > @ @ - 91 , 16 + 91 , 16 @ @ object BotMessages { < nl > } < nl > < nl > final case class UserOutPeer ( < nl > - id : Int , < nl > - accessHash : Long < nl > - ) { < nl > + id : Int , < nl > + accessHash : Long < nl > + ) { < nl > val asOutPeer = OutPeer ( 1 , id , accessHash ) < nl > } < nl > < nl > final case class Peer ( < nl > - ` type ` : Int , < nl > - id : Int < nl > - ) < nl > + ` type ` : Int , < nl > + id : Int < nl > + ) < nl > < nl > sealed trait RequestBody { < nl > type Response < : ResponseBody < nl > @ @ - 113 , 16 + 113 , 16 @ @ object BotMessages { < nl > < nl > @ key ( " Request " ) < nl > final case class BotRequest ( < nl > - id : Long , < nl > - service : String , < nl > - body : RequestBody < nl > - ) extends BotMessageIn < nl > + id : Long , < nl > + service : String , < nl > + body : RequestBody < nl > + ) extends BotMessageIn < nl > < nl > @ key ( " Response " ) < nl > final case class BotResponse ( < nl > - id : Long , < nl > - body : BotResponseBody < nl > - ) extends BotMessageOut < nl > + id : Long , < nl > + body : BotResponseBody < nl > + ) extends BotMessageOut < nl > < nl > sealed trait BotResponseBody < nl > < nl > @ @ - 135 , 17 + 135 , 17 @ @ object BotMessages { < nl > < nl > @ key ( " SeqUpdate " ) < nl > final case class BotSeqUpdate ( < nl > - seq : Int , < nl > - body : UpdateBody < nl > - ) extends BotUpdate < nl > + seq : Int , < nl > + body : UpdateBody < nl > + ) extends BotUpdate < nl > < nl > @ key ( " FatSeqUpdate " ) < nl > final case class BotFatSeqUpdate ( < nl > - seq : Int , < nl > - body : UpdateBody , < nl > - users : Map [ Int , User ] , < nl > - groups : Map [ Int , Group ] < nl > - ) extends BotUpdate < nl > + seq : Int , < nl > + body : UpdateBody , < nl > + users : Map [ Int , User ] , < nl > + groups : Map [ Int , Group ] < nl > + ) extends BotUpdate < nl > < nl > @ key ( " Error " ) < nl > case class BotError ( code : Int , tag : String , data : Js . Obj , retryIn : Option [ Int ] ) extends RuntimeException with BotResponseBody < nl > @ @ - 154 , 28 + 154 , 28 @ @ object BotMessages { < nl > case class BotSuccess ( obj : Js . Obj ) extends BotResponseBody < nl > < nl > implicit val objWriter = Writer [ Js . Obj ] { < nl > - case obj = > obj < nl > + case obj ⇒ obj < nl > } < nl > < nl > implicit val objReader = Reader [ Js . Obj ] { < nl > - case obj : Js . Obj = > obj < nl > + case obj : Js . Obj ⇒ obj < nl > } < nl > < nl > implicit val botSuccessWriter = upickle . default . Writer [ BotSuccess ] { < nl > - case BotSuccess ( obj ) = > obj < nl > + case BotSuccess ( obj ) ⇒ obj < nl > } < nl > < nl > implicit val botSuccessReader = upickle . default . Reader [ BotSuccess ] { < nl > - case obj : Js . Obj = > BotSuccess ( obj ) < nl > + case obj : Js . Obj ⇒ BotSuccess ( obj ) < nl > } < nl > < nl > implicit val botErrorWriter = upickle . default . Writer [ BotError ] { < nl > - case BotError ( code , tag , data , retryInOpt ) = > < nl > + case BotError ( code , tag , data , retryInOpt ) ⇒ < nl > Js . Obj ( < nl > - " code " - > Js . Num ( code . toDouble ) , < nl > - " tag " - > Js . Str ( tag ) , < nl > - " data " - > data , < nl > - " retryIn " - > retryInOpt . map ( n = > Js . Num ( n . toDouble ) ) . getOrElse ( Js . Null ) < nl > + " code " → Js . Num ( code . toDouble ) , < nl > + " tag " → Js . Str ( tag ) , < nl > + " data " → data , < nl > + " retryIn " → retryInOpt . map ( n ⇒ Js . Num ( n . toDouble ) ) . getOrElse ( Js . Null ) < nl > ) < nl > } < nl > < nl > @ @ - 186 , 19 + 186 , 19 @ @ object BotMessages { < nl > final case object Void extends Void < nl > < nl > implicit val voidReader = upickle . default . Reader [ Void ] { < nl > - case Js . Obj ( ) = > Void < nl > + case Js . Obj ( ) ⇒ Void < nl > } < nl > < nl > implicit val voidWriter = upickle . default . Writer [ Void ] { < nl > - case _ = > Js . Obj ( ) < nl > + case _ ⇒ Js . Obj ( ) < nl > } < nl > < nl > @ key ( " SendMessage " ) < nl > final case class SendTextMessage ( < nl > - peer : OutPeer , < nl > - randomId : Long , < nl > - text : String < nl > - ) extends RequestBody { < nl > + peer : OutPeer , < nl > + randomId : Long , < nl > + text : String < nl > + ) extends RequestBody { < nl > override type Response = MessageSent < nl > override val service = Services . Messaging < nl > < nl > @ @ - 207 , 10 + 207 , 10 @ @ object BotMessages { < nl > < nl > @ key ( " SetValue " ) < nl > final case class SetValue ( < nl > - keyspace : String , < nl > - key : String , < nl > - value : String < nl > - ) extends RequestBody { < nl > + keyspace : String , < nl > + key : String , < nl > + value : String < nl > + ) extends RequestBody { < nl > override type Response = Void < nl > override val service = Services . KeyValue < nl > < nl > @ @ - 219 , 9 + 219 , 9 @ @ object BotMessages { < nl > < nl > @ key ( " GetValue " ) < nl > final case class GetValue ( < nl > - keyspace : String , < nl > - key : String < nl > - ) extends RequestBody { < nl > + keyspace : String , < nl > + key : String < nl > + ) extends RequestBody { < nl > override type Response = Container [ Option [ String ] ] < nl > override val service = Services . KeyValue < nl > < nl > @ @ - 230 , 9 + 230 , 9 @ @ object BotMessages { < nl > < nl > @ key ( " DeleteValue " ) < nl > final case class DeleteValue ( < nl > - keyspace : String , < nl > - key : String < nl > - ) extends RequestBody { < nl > + keyspace : String , < nl > + key : String < nl > + ) extends RequestBody { < nl > override type Response = Void < nl > override val service = Services . KeyValue < nl > < nl > @ @ - 251 , 11 + 251 , 11 @ @ object BotMessages { < nl > < nl > @ key ( " TextMessage " ) < nl > final case class TextMessage ( < nl > - peer : OutPeer , < nl > - sender : UserOutPeer , < nl > - date : Long , < nl > - randomId : Long , < nl > - text : String < nl > - ) extends UpdateBody < nl > + peer : OutPeer , < nl > + sender : UserOutPeer , < nl > + date : Long , < nl > + randomId : Long , < nl > + text : String < nl > + ) extends UpdateBody < nl > < nl > } < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotService . scala < nl > index 8cfb5e4 . . c81cd72 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotService . scala < nl > @ @ - 4 , 7 + 4 , 7 @ @ import im . actor . bots . BotMessages < nl > import upickle . Js < nl > import upickle . default . _ < nl > < nl > - import scala . concurrent . { ExecutionContext , Future } < nl > + import scala . concurrent . { ExecutionContext , Future } < nl > < nl > object BotService { < nl > import BotMessages . _ < nl > @ @ - 14 , 24 + 14 , 24 @ @ object BotService { < nl > < nl > type RequestResult [ + RSP < : ResponseBody ] = Either [ BotError , RSP ] < nl > < nl > - private type Handler [ + RSP < : ResponseBody ] = ( BotUserId , BotAuthId ) = > Future [ RequestResult [ RSP ] ] < nl > + private type Handler [ + RSP < : ResponseBody ] = ( BotUserId , BotAuthId ) ⇒ Future [ RequestResult [ RSP ] ] < nl > < nl > - case class RequestHandler [ + RQ < : RequestBody , RSP < : ResponseBody : Writer ] ( handle : Handler [ RQ # Response ] ) { < nl > + case class RequestHandler [ + RQ < : RequestBody , RSP < : ResponseBody : Writer ] ( handle : Handler [ RQ # Response ] ) { < nl > def result ( botUserId : Int , botAuthId : Long ) ( implicit ec : ExecutionContext ) : Future [ BotResponseBody ] = < nl > for { < nl > - res < - handle ( botUserId , botAuthId ) < nl > - } yield res match { < nl > - case Right ( rsp ) = > BotSuccess ( writeJs ( rsp . asInstanceOf [ RSP ] ) . asInstanceOf [ Js . Obj ] ) < nl > - case Left ( error ) = > error < nl > + res ← handle ( botUserId , botAuthId ) < nl > + } yield res match { < nl > + case Right ( rsp ) ⇒ BotSuccess ( writeJs ( rsp . asInstanceOf [ RSP ] ) . asInstanceOf [ Js . Obj ] ) < nl > + case Left ( error ) ⇒ error < nl > } < nl > < nl > def toWeak ( implicit ec : ExecutionContext ) = WeakRequestHandler ( < nl > - ( botUserId : Int , botAuthId : Long ) = > < nl > + ( botUserId : Int , botAuthId : Long ) ⇒ < nl > result ( botUserId , botAuthId ) < nl > ) < nl > } < nl > < nl > - case class WeakRequestHandler ( handle : ( BotUserId , BotAuthId ) = > Future [ BotResponseBody ] ) < nl > + case class WeakRequestHandler ( handle : ( BotUserId , BotAuthId ) ⇒ Future [ BotResponseBody ] ) < nl > } < nl > < nl > trait BotService { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala b / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala < nl > index 733b3dc . . 987077d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala < nl > @ @ - 1 , 9 + 1 , 9 @ @ < nl > package im . actor . api < nl > < nl > - import slick . dbio . { DBIO , DBIOAction } < nl > + import slick . dbio . { DBIO , DBIOAction } < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > - import scala . concurrent . { ExecutionContext , Future } < nl > + import scala . concurrent . { ExecutionContext , Future } < nl > import scala . reflect . _ < nl > import scalaz . Scalaz . _ < nl > import scalaz . _ < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > index bff0ec8 . . fc54206 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > @ @ - 1 , 16 + 1 , 16 @ @ < nl > package im . actor . server . dialog < nl > < nl > import im . actor . serialization . ActorSerializer < nl > - import im . actor . server . office . { Processor , ProcessorState } < nl > + import im . actor . server . office . { Processor , ProcessorState } < nl > < nl > object DialogProcessor { < nl > def register ( ) : Unit = { < nl > ActorSerializer . register ( < nl > - 40000 - > classOf [ DialogCommands . SendMessage ] , < nl > - 40001 - > classOf [ DialogCommands . MessageReceived ] , < nl > - 40002 - > classOf [ DialogCommands . MessageReceivedAck ] , < nl > - 40003 - > classOf [ DialogCommands . MessageRead ] , < nl > - 40004 - > classOf [ DialogCommands . MessageReadAck ] < nl > + 40000 → classOf [ DialogCommands . SendMessage ] , < nl > + 40001 → classOf [ DialogCommands . MessageReceived ] , < nl > + 40002 → classOf [ DialogCommands . MessageReceivedAck ] , < nl > + 40003 → classOf [ DialogCommands . MessageRead ] , < nl > + 40004 → classOf [ DialogCommands . MessageReadAck ] < nl > ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > index 49176df . . 67c8d445 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . office < nl > < nl > import java . util . concurrent . TimeUnit < nl > < nl > - import akka . actor . { ActorRef , Status } < nl > + import akka . actor . { ActorRef , Status } < nl > import akka . contrib . pattern . ShardRegion . Passivate < nl > import akka . pattern . pipe < nl > import akka . persistence . PersistentActor < nl > @ @ - 65 , 21 + 65 , 21 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorFuture < nl > final def receiveCommand = initializing < nl > < nl > protected final def initializing : Receive = handleInitCommand orElse { < nl > - case msg = > < nl > + case msg ⇒ < nl > log . debug ( " Entity not found while processing { } " , msg ) < nl > sender ( ) ! Status . Failure ( EntityNotFound ) < nl > } < nl > < nl > protected final def working ( state : State ) : Receive = handleCommand ( state ) orElse handleQuery ( state ) orElse { < nl > - case Work ( newState ) = > context become working ( newState ) < nl > - case unmatched ⇒ log . warning ( " Unmatched message : { } , sender : { } " , unmatched , sender ( ) ) < nl > + case Work ( newState ) ⇒ context become working ( newState ) < nl > + case unmatched ⇒ log . warning ( " Unmatched message : { } , sender : { } " , unmatched , sender ( ) ) < nl > } < nl > < nl > protected final def stashingBehavior : Receive = { < nl > - case UnstashAndWork ( evt , s ) = > < nl > + case UnstashAndWork ( evt , s ) ⇒ < nl > context become working ( updatedState ( evt , s ) ) < nl > unstashAll ( ) < nl > - case UnstashAndWorkBatch ( es , s ) = > < nl > + case UnstashAndWorkBatch ( es , s ) ⇒ < nl > val newState = es . foldLeft ( s ) { < nl > case ( acc , e ) ⇒ < nl > log . debug ( " Updating state : { } with event : { } " , acc , e ) < nl > @ @ - 94 , 7 + 94 , 7 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorFuture < nl > < nl > protected final def stashing ( state : State ) : Receive = handleQuery ( state ) orElse stashingBehavior < nl > < nl > - final def persistReply [ R ] ( e : Event , state : State ) ( f : Event = > Future [ R ] ) : Unit = < nl > + final def persistReply [ R ] ( e : Event , state : State ) ( f : Event ⇒ Future [ R ] ) : Unit = < nl > persistReply ( e , state , sender ( ) ) ( f ) < nl > < nl > final def persistReply [ R ] ( e : Event , state : State , replyTo : ActorRef ) ( f : Event ⇒ Future [ R ] ) : Unit = { < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / util / cache / CacheHelpers . scala b / actor - server / actor - runtime / src / main / scala / im / actor / util / cache / CacheHelpers . scala < nl > index aba292a . . 531dc63 100644 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / util / cache / CacheHelpers . scala < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / util / cache / CacheHelpers . scala < nl > @ @ - 1 , 8 + 1 , 8 @ @ < nl > package im . actor . util . cache < nl > < nl > - import com . github . benmanes . caffeine . cache . { Caffeine , Cache } < nl > + import com . github . benmanes . caffeine . cache . { Caffeine , Cache } < nl > < nl > - import scala . concurrent . { ExecutionContext , Future } < nl > + import scala . concurrent . { ExecutionContext , Future } < nl > < nl > object CacheHelpers { < nl > < nl > @ @ - 21 , 7 + 21 , 7 @ @ object CacheHelpers { < nl > cache . put ( key , result ) < nl > < nl > result recover { < nl > - case e = > < nl > + case e ⇒ < nl > cache . invalidate ( key ) < nl > throw e < nl > } < nl > diff - - git a / actor - server / project / Formatting . scala b / actor - server / project / Formatting . scala < nl > index 69b0c9d . . cd6bf6e 100644 < nl > - - - a / actor - server / project / Formatting . scala < nl > + + + b / actor - server / project / Formatting . scala < nl > @ @ - 24 , 6 + 24 , 7 @ @ object Formatting { < nl > . setPreference ( RewriteArrowSymbols , true ) < nl > . setPreference ( AlignParameters , true ) < nl > . setPreference ( AlignSingleLineCaseStatements , true ) < nl > + . setPreference ( SpacesAroundMultiImports , true ) < nl > } < nl > < nl > def docFormattingPreferences = { < nl > diff - - git a / actor - server / project / plugins . sbt b / actor - server / project / plugins . sbt < nl > index e31b3f4 . . b75ac6e 100644 < nl > - - - a / actor - server / project / plugins . sbt < nl > + + + b / actor - server / project / plugins . sbt < nl > @ @ - 19 , 7 + 19 , 7 @ @ addSbtPlugin ( " im . actor " % % " sbt - actor - api " % " 0 . 6 . 15 " ) < nl > < nl > / / addSbtPlugin ( " com . typesafe . play " % " sbt - plugin " % " 2 . 3 . 9 " ) < nl > < nl > - addSbtPlugin ( " org . scalariform " % " sbt - scalariform " % " 1 . 4 . 0 " ) < nl > + addSbtPlugin ( " org . scalariform " % " sbt - scalariform " % " 1 . 5 . 1 " ) < nl > < nl > addSbtPlugin ( " com . typesafe . sbt " % " sbt - native - packager " % " 1 . 0 . 4 " )

TEST DIFF:
diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala 
 index 74489ec . . 4e667da 100644 
 - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala 
 + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala 
 @ @ - 65 , 7 + 65 , 7 @ @ abstract class BotBase extends BotBaseBase { 
 case ( replyTo , rq ) ⇒ 
 
 val reply = rsp . body match { 
 - case err : BotError ⇒ Status . Failure ( err ) 
 + case err : BotError ⇒ Status . Failure ( err ) 
 case BotSuccess ( obj ) ⇒ rq . readResponse ( obj ) 
 } 
 replyTo ! reply 
 diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 index a2ec686 . . 332fff7 100644 
 - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 @ @ - 28 , 9 + 28 , 9 @ @ private [ botkit ] object WebsocketClient { 
 } 
 
 private [ botkit ] final class WebsocketClient ( url : String ) 
 - extends ActorPublisher [ String ] 
 - with ActorSubscriber 
 - with ActorLogging { 
 + extends ActorPublisher [ String ] 
 + with ActorSubscriber 
 + with ActorLogging { 
 import context . system 
 
 implicit def sslEngineProvider : ServerSSLEngineProvider = { 
 @ @ - 74 , 7 + 74 , 7 @ @ private [ botkit ] final class WebsocketClient ( url : String ) 
 val host = uri . getHost 
 val port = uri . getPort match { 
 case - 1 ⇒ if ( ssl ) 443 else 80 
 - case p ⇒ p 
 + case p ⇒ p 
 } 
 
 val agent = " spray - websocket - client " + ( if ( ssl ) " - ssl " else " - basic " ) 
 diff - - git a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 index a545a77 . . 09eeb71 100644 
 - - - a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 + + + b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 @ @ - 27 , 28 + 27 , 28 @ @ object BotMessages { 
 } 
 
 final case class FileLocation ( 
 - @ beanGetter fileId : Long , 
 + @ beanGetter fileId : Long , 
 @ beanGetter accessHash : Long 
 ) 
 
 final case class AvatarImage ( 
 @ beanGetter fileLocation : FileLocation , 
 - @ beanGetter width : Int , 
 - @ beanGetter height : Int , 
 - @ beanGetter fileSize : Int 
 + @ beanGetter width : Int , 
 + @ beanGetter height : Int , 
 + @ beanGetter fileSize : Int 
 ) 
 
 final case class ImageLocation ( 
 @ beanGetter fileLocation : FileLocation , 
 - @ beanGetter width : Int , 
 - @ beanGetter height : Int , 
 - @ beanGetter fileSize : Int 
 + @ beanGetter width : Int , 
 + @ beanGetter height : Int , 
 + @ beanGetter fileSize : Int 
 ) 
 
 final case class Avatar ( 
 @ beanGetter smallImage : Option [ AvatarImage ] , 
 @ beanGetter largeImage : Option [ AvatarImage ] , 
 - @ beanGetter fullImage : Option [ AvatarImage ] 
 + @ beanGetter fullImage : Option [ AvatarImage ] 
 ) 
 
 final case class ContactInfo ( 
 @ @ - 65 , 17 + 65 , 17 @ @ object BotMessages { 
 final case class PhoneContactRecord ( phone : Long ) extends ContactRecord 
 
 final case class User ( 
 - @ beanGetter id : Int , 
 - @ beanGetter accessHash : Long , 
 - @ beanGetter name : String , 
 - @ beanGetter sex : Option [ Int ] , 
 - about : Option [ String ] , 
 - avatar : Option [ Avatar ] , 
 - username : Option [ String ] , 
 - isBot : Option [ Boolean ] , 
 - contactRecords : Seq [ ContactRecord ] , 
 - timeZone : Option [ String ] , 
 - preferredLanguages : Seq [ String ] 
 + @ beanGetter id : Int , 
 + @ beanGetter accessHash : Long , 
 + @ beanGetter name : String , 
 + @ beanGetter sex : Option [ Int ] , 
 + about : Option [ String ] , 
 + avatar : Option [ Avatar ] , 
 + username : Option [ String ] , 
 + isBot : Option [ Boolean ] , 
 + contactRecords : Seq [ ContactRecord ] , 
 + timeZone : Option [ String ] , 
 + preferredLanguages : Seq [ String ] 
 ) { 
 def isMale = sex . contains ( 1 ) 
 
 @ @ - 109 , 23 + 109 , 23 @ @ object BotMessages { 
 } 
 
 final case class GroupMember ( 
 - @ beanGetter userId : Int , 
 - @ beanGetter inviterUserId : Int , 
 - @ beanGetter memberSince : Long , 
 - isAdmin : Option [ Boolean ] 
 + @ beanGetter userId : Int , 
 + @ beanGetter inviterUserId : Int , 
 + @ beanGetter memberSince : Long , 
 + isAdmin : Option [ Boolean ] 
 ) { 
 def getIsAdmin = isAdmin . asJava 
 } 
 
 final case class Group ( 
 - @ beanGetter id : Int , 
 - @ beanGetter accessHash : Long , 
 - @ beanGetter title : String , 
 - about : Option [ String ] , 
 - avatar : Option [ Avatar ] , 
 - @ beanGetter isMember : Boolean , 
 - @ beanGetter creatorUserId : Int , 
 - members : Seq [ GroupMember ] 
 + @ beanGetter id : Int , 
 + @ beanGetter accessHash : Long , 
 + @ beanGetter title : String , 
 + about : Option [ String ] , 
 + avatar : Option [ Avatar ] , 
 + @ beanGetter isMember : Boolean , 
 + @ beanGetter creatorUserId : Int , 
 + members : Seq [ GroupMember ] 
 ) { 
 def getAbout = about . asJava 
 
 @ @ - 162 , 8 + 162 , 8 @ @ object BotMessages { 
 
 @ key ( " Group " ) 
 final case class GroupOutPeer ( 
 - @ beanGetter id : Int , 
 - @ beanGetter accessHash : Long 
 + @ beanGetter id : Int , 
 + @ beanGetter accessHash : Long 
 ) extends OutPeer { 
 override val isPrivate = false 
 override val isGroup = true 
 @ @ - 171 , 8 + 171 , 8 @ @ object BotMessages { 
 
 @ key ( " User " ) 
 final case class UserOutPeer ( 
 - @ beanGetter id : Int , 
 - @ beanGetter accessHash : Long 
 + @ beanGetter id : Int , 
 + @ beanGetter accessHash : Long 
 ) extends OutPeer { 
 override val isPrivate = true 
 override val isGroup = false 
 @ @ - 189 , 14 + 189 , 14 @ @ object BotMessages { 
 
 @ key ( " Request " ) 
 final case class BotRequest ( 
 - id : Long , 
 + id : Long , 
 service : String , 
 - body : RequestBody 
 + body : RequestBody 
 ) extends BotMessageIn 
 
 @ key ( " Response " ) 
 final case class BotResponse ( 
 - id : Long , 
 + id : Long , 
 body : BotResponseBody 
 ) extends BotMessageOut 
 
 @ @ - 211 , 15 + 211 , 15 @ @ object BotMessages { 
 
 @ key ( " SeqUpdate " ) 
 final case class BotSeqUpdate ( 
 - seq : Int , 
 + seq : Int , 
 body : UpdateBody 
 ) extends BotUpdate 
 
 @ key ( " FatSeqUpdate " ) 
 final case class BotFatSeqUpdate ( 
 - seq : Int , 
 - body : UpdateBody , 
 - users : Map [ Int , User ] , 
 + seq : Int , 
 + body : UpdateBody , 
 + users : Map [ Int , User ] , 
 groups : Map [ Int , Group ] 
 ) extends BotUpdate 
 
 @ @ - 281 , 9 + 281 , 9 @ @ object BotMessages { 
 
 @ key ( " SendMessage " ) 
 final case class SendMessage ( 
 - @ beanGetter peer : OutPeer , 
 - @ beanGetter randomId : Long , 
 - @ beanGetter message : MessageBody 
 + @ beanGetter peer : OutPeer , 
 + @ beanGetter randomId : Long , 
 + @ beanGetter message : MessageBody 
 ) extends RequestBody { 
 override type Response = MessageSent 
 override val service = Services . Messaging 
 @ @ - 293 , 9 + 293 , 9 @ @ object BotMessages { 
 
 @ key ( " SetValue " ) 
 final case class SetValue ( 
 - @ beanGetter keyspace : String , 
 - @ beanGetter key : String , 
 - @ beanGetter value : String 
 + @ beanGetter keyspace : String , 
 + @ beanGetter key : String , 
 + @ beanGetter value : String 
 ) extends RequestBody { 
 override type Response = Void 
 override val service = Services . KeyValue 
 @ @ - 305 , 8 + 305 , 8 @ @ object BotMessages { 
 
 @ key ( " GetValue " ) 
 final case class GetValue ( 
 - @ beanGetter keyspace : String , 
 - @ beanGetter key : String 
 + @ beanGetter keyspace : String , 
 + @ beanGetter key : String 
 ) extends RequestBody { 
 override type Response = Container [ Option [ String ] ] 
 override val service = Services . KeyValue 
 @ @ - 316 , 8 + 316 , 8 @ @ object BotMessages { 
 
 @ key ( " DeleteValue " ) 
 final case class DeleteValue ( 
 - @ beanGetter keyspace : String , 
 - @ beanGetter key : String 
 + @ beanGetter keyspace : String , 
 + @ beanGetter key : String 
 ) extends RequestBody { 
 override type Response = Void 
 override val service = Services . KeyValue 
 @ @ - 336 , 8 + 336 , 8 @ @ object BotMessages { 
 / / username is nickname 
 @ key ( " CreateBot " ) 
 final case class CreateBot ( 
 - @ beanGetter username : String , 
 - @ beanGetter name : String 
 + @ beanGetter username : String , 
 + @ beanGetter name : String 
 ) extends RequestBody { 
 override type Response = BotCreated 
 override val service = Services . Bots 
 @ @ - 347 , 7 + 347 , 7 @ @ object BotMessages { 
 
 @ key ( " BotCreated " ) 
 final case class BotCreated ( 
 - @ beanGetter token : String , 
 + @ beanGetter token : String , 
 @ beanGetter userId : Int 
 ) extends ResponseBody 
 
 @ @ - 372 , 8 + 372 , 8 @ @ object BotMessages { 
 
 @ key ( " ChangeUserAvatar " ) 
 final case class ChangeUserAvatar ( 
 - @ beanGetter userId : Int , 
 - @ beanGetter fileLocation : FileLocation 
 + @ beanGetter userId : Int , 
 + @ beanGetter fileLocation : FileLocation 
 ) extends RequestBody { 
 override type Response = Void 
 override val service = Services . Users 
 @ @ - 383 , 8 + 383 , 8 @ @ object BotMessages { 
 
 @ key ( " ChangeUserName " ) 
 final case class ChangeUserName ( 
 - @ beanGetter userId : Int , 
 - @ beanGetter name : String 
 + @ beanGetter userId : Int , 
 + @ beanGetter name : String 
 ) extends RequestBody { 
 override type Response = Void 
 override val service = Services . Users 
 @ @ - 394 , 8 + 394 , 8 @ @ object BotMessages { 
 
 @ key ( " ChangeUserNickname " ) 
 final case class ChangeUserNickname ( 
 - @ beanGetter userId : Int , 
 - @ beanGetter nickname : Option [ String ] 
 + @ beanGetter userId : Int , 
 + @ beanGetter nickname : Option [ String ] 
 ) extends RequestBody { 
 override type Response = Void 
 override val service = Services . Users 
 @ @ - 405 , 8 + 405 , 8 @ @ object BotMessages { 
 
 @ key ( " ChangeUserAbout " ) 
 final case class ChangeUserAbout ( 
 - @ beanGetter userId : Int , 
 - about : Option [ String ] 
 + @ beanGetter userId : Int , 
 + about : Option [ String ] 
 ) extends RequestBody { 
 override type Response = Void 
 override val service = Services . Users 
 @ @ - 429 , 7 + 429 , 7 @ @ object BotMessages { 
 
 @ key ( " FindUser " ) 
 final case class FindUser ( 
 - @ beanGetter query : String 
 + @ beanGetter query : String 
 ) extends RequestBody { 
 override type Response = FoundUsers 
 override val service : String = Services . Users 
 @ @ - 445 , 7 + 445 , 7 @ @ object BotMessages { 
 
 @ key ( " CreateGroup " ) 
 final case class CreateGroup ( 
 - title : String 
 + title : String 
 ) extends RequestBody { 
 override type Response = ResponseCreateGroup 
 override val service : String = Services . Groups 
 @ @ - 483 , 8 + 483 , 8 @ @ object BotMessages { 
 
 @ key ( " ShowStickers " ) 
 final case class ShowStickers ( 
 - @ beanGetter ownerUserId : Int , 
 - @ beanGetter packId : Int 
 + @ beanGetter ownerUserId : Int , 
 + @ beanGetter packId : Int 
 ) extends RequestBody { 
 override type Response = StickerIds 
 override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) 
 @ @ - 497 , 10 + 497 , 10 @ @ object BotMessages { 
 
 @ key ( " AddSticker " ) 
 final case class AddSticker ( 
 - @ beanGetter ownerUserId : Int , 
 - @ beanGetter packId : Int , 
 - emoji : Option [ String ] , 
 - @ beanGetter fileLocation : FileLocation 
 + @ beanGetter ownerUserId : Int , 
 + @ beanGetter packId : Int , 
 + emoji : Option [ String ] , 
 + @ beanGetter fileLocation : FileLocation 
 ) extends RequestBody { 
 override type Response = Void 
 override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) 
 @ @ - 511 , 9 + 511 , 9 @ @ object BotMessages { 
 
 @ key ( " DeleteSticker " ) 
 final case class DeleteSticker ( 
 - @ beanGetter ownerUserId : Int , 
 - @ beanGetter packId : Int , 
 - @ beanGetter stickerId : Int 
 + @ beanGetter ownerUserId : Int , 
 + @ beanGetter packId : Int , 
 + @ beanGetter stickerId : Int 
 ) extends RequestBody { 
 override type Response = Void 
 override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) 
 @ @ - 522 , 8 + 522 , 8 @ @ object BotMessages { 
 
 @ key ( " MakeStickerPackDefault " ) 
 final case class MakeStickerPackDefault ( 
 - @ beanGetter userId : Int , 
 - @ beanGetter packId : Int 
 + @ beanGetter userId : Int , 
 + @ beanGetter packId : Int 
 ) extends RequestBody { 
 override type Response = Void 
 override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) 
 @ @ - 532 , 8 + 532 , 8 @ @ object BotMessages { 
 
 @ key ( " UnmakeStickerPackDefault " ) 
 final case class UnmakeStickerPackDefault ( 
 - @ beanGetter userId : Int , 
 - @ beanGetter packId : Int 
 + @ beanGetter userId : Int , 
 + @ beanGetter packId : Int 
 ) extends RequestBody { 
 override type Response = Void 
 override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) 
 @ @ - 542 , 17 + 542 , 17 @ @ object BotMessages { 
 
 @ key ( " Message " ) 
 final case class Message ( 
 - @ beanGetter peer : OutPeer , 
 - @ beanGetter sender : UserOutPeer , 
 - @ beanGetter date : Long , 
 + @ beanGetter peer : OutPeer , 
 + @ beanGetter sender : UserOutPeer , 
 + @ beanGetter date : Long , 
 @ beanGetter randomId : Long , 
 - @ beanGetter message : MessageBody 
 + @ beanGetter message : MessageBody 
 ) extends UpdateBody 
 
 @ key ( " RawUpdate " ) 
 final case class RawUpdate ( 
 - ` type ` : Option [ String ] , 
 - @ beanGetter data : String 
 + ` type ` : Option [ String ] , 
 + @ beanGetter data : String 
 ) extends UpdateBody { 
 def getType = ` type ` . asJava 
 } 
 @ @ - 570 , 12 + 570 , 12 @ @ object BotMessages { 
 
 @ key ( " Sticker " ) 
 final case class StickerMessage ( 
 - stickerId : Option [ Int ] , 
 - fastPreview : Option [ Array [ Byte ] ] , 
 - image512 : Option [ ImageLocation ] , 
 - image256 : Option [ ImageLocation ] , 
 - stickerCollectionId : Option [ Int ] , 
 - stickerCollectionAccessHash : Option [ Long ] 
 + stickerId : Option [ Int ] , 
 + fastPreview : Option [ Array [ Byte ] ] , 
 + image512 : Option [ ImageLocation ] , 
 + image256 : Option [ ImageLocation ] , 
 + stickerCollectionId : Option [ Int ] , 
 + stickerCollectionAccessHash : Option [ Long ] 
 ) extends MessageBody { 
 def getStickerId = stickerId . asPrimitive 
 def getFastPreview = fastPreview . asJava 
 @ @ - 589 , 18 + 589 , 18 @ @ object BotMessages { 
 
 @ key ( " TextModernMessage " ) 
 final case class TextModernMessage ( 
 - text : Option [ String ] , 
 - senderNameOverride : Option [ String ] , 
 - senderPhotoOverride : Option [ Avatar ] , 
 - style : Option [ ParagraphStyle ] , 
 - attaches : IndexedSeq [ TextModernAttach ] 
 + text : Option [ String ] , 
 + senderNameOverride : Option [ String ] , 
 + senderPhotoOverride : Option [ Avatar ] , 
 + style : Option [ ParagraphStyle ] , 
 + attaches : IndexedSeq [ TextModernAttach ] 
 ) extends TextMessageEx { 
 def this ( 
 - text : String , 
 - senderNameOverride : String , 
 + text : String , 
 + senderNameOverride : String , 
 senderPhotoOverride : Avatar , 
 - style : ParagraphStyle , 
 - attaches : java . util . List [ TextModernAttach ] 
 + style : ParagraphStyle , 
 + attaches : java . util . List [ TextModernAttach ] 
 ) = 
 this ( Option ( text ) , Option ( senderNameOverride ) , Option ( senderPhotoOverride ) , Option ( style ) , attaches . toIndexedSeq ) 
 
 @ @ - 612 , 12 + 612 , 12 @ @ object BotMessages { 
 } 
 
 final case class TextModernAttach ( 
 - title : Option [ String ] , 
 - titleUrl : Option [ String ] , 
 - titleIcon : Option [ ImageLocation ] , 
 - text : Option [ String ] , 
 - style : Option [ ParagraphStyle ] , 
 - fields : IndexedSeq [ TextModernField ] 
 + title : Option [ String ] , 
 + titleUrl : Option [ String ] , 
 + titleIcon : Option [ ImageLocation ] , 
 + text : Option [ String ] , 
 + style : Option [ ParagraphStyle ] , 
 + fields : IndexedSeq [ TextModernField ] 
 ) { 
 def this ( 
 title : String , 
 @ @ - 641 , 9 + 641 , 9 @ @ object BotMessages { 
 } 
 
 final case class ParagraphStyle ( 
 - showParagraph : Option [ Boolean ] , 
 - paragraphColor : Option [ Color ] , 
 - bgColor : Option [ Color ] 
 + showParagraph : Option [ Boolean ] , 
 + paragraphColor : Option [ Color ] , 
 + bgColor : Option [ Color ] 
 ) { 
 def getShowParagraph = showParagraph . asJava 
 def getParagraphColor = paragraphColor . asJava 
 @ @ - 668 , 13 + 668 , 13 @ @ object BotMessages { 
 
 @ key ( " Document " ) 
 final case class DocumentMessage ( 
 - @ beanGetter fileId : Long , 
 - @ beanGetter accessHash : Long , 
 - @ beanGetter fileSize : Long , 
 - @ beanGetter name : String , 
 - @ beanGetter mimeType : String , 
 - thumb : Option [ FastThumb ] , 
 - ext : Option [ DocumentEx ] 
 + @ beanGetter fileId : Long , 
 + @ beanGetter accessHash : Long , 
 + @ beanGetter fileSize : Long , 
 + @ beanGetter name : String , 
 + @ beanGetter mimeType : String , 
 + thumb : Option [ FastThumb ] , 
 + ext : Option [ DocumentEx ] 
 ) extends MessageBody { 
 def getThumb = thumb . asJava 
 
 @ @ - 692 , 23 + 692 , 23 @ @ object BotMessages { 
 
 @ key ( " FastThumb " ) 
 final case class FastThumb ( 
 - @ beanGetter width : Int , 
 + @ beanGetter width : Int , 
 @ beanGetter height : Int , 
 - @ beanGetter thumb : String 
 + @ beanGetter thumb : String 
 ) 
 
 sealed trait DocumentEx 
 
 @ key ( " Photo " ) 
 final case class DocumentExPhoto ( 
 - @ beanGetter width : Int , 
 + @ beanGetter width : Int , 
 @ beanGetter height : Int 
 ) extends DocumentEx 
 
 @ key ( " Video " ) 
 final case class DocumentExVideo ( 
 - @ beanGetter width : Int , 
 - @ beanGetter height : Int , 
 + @ beanGetter width : Int , 
 + @ beanGetter height : Int , 
 @ beanGetter duration : Int 
 ) extends DocumentEx 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 index 5c6d83d . . 537daa8 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 @ @ - 290 , 7 + 290 , 7 @ @ private [ user ] sealed trait AuthCommands { 
 ( processorRegion . ref ? NewAuth ( userId , authId ) ) . mapTo [ NewAuthAck ] 
 } 
 
 - def removeAuth ( userId : Int , authId : Long ) : Future [ RemoveAuthAck ] = ( processorRegion . ref ? RemoveAuth ( userId , authId ) ) . mapTo [ RemoveAuthAck ] 
 + def removeAuth ( userId : Int , authId : Long ) : Future [ RemoveAuthAck ] = ( processorRegion . ref ? RemoveAuth ( userId , authId ) ) . mapTo [ RemoveAuthAck ] 
 
 def logoutByAppleToken ( token : Array [ Byte ] ) ( implicit db : Database ) : Future [ Unit ] = { 
 db . run ( p . push . ApplePushCredentialsRepo . findByToken ( token ) ) flatMap { creds ⇒ 
 diff - - git a / actor - server / project / Build . scala b / actor - server / project / Build . scala 
 index 4b49a44 . . b8ea444 100644 
 - - - a / actor - server / project / Build . scala 
 + + + b / actor - server / project / Build . scala 
 @ @ - 43 , 7 + 43 , 7 @ @ object Build extends sbt . Build with Versioning with Releasing with Publishing { 
 ) + + compilerWarnings 
 
 lazy val defaultSettings = 
 - buildSettings + + Formatting . formatSettings + + 
 + buildSettings + + 
 PB . protobufSettings + + Seq ( 
 / / PB . javaConversions in PB . protobufConfig : = true , 
 libraryDependencies + = " com . trueaccord . scalapb " % % " scalapb - runtime " % " 0 . 5 . 17 " % PB . protobufConfig , 
 diff - - git a / actor - server / project / Formatting . scala b / actor - server / project / Formatting . scala 
 deleted file mode 100644 
 index cd6bf6e . . 0000000 
 - - - a / actor - server / project / Formatting . scala 
 + + + / dev / null 
 @ @ - 1 , 37 + 0 , 0 @ @ 
 - package im . actor 
 - 
 - import sbt . _ 
 - / / import com . typesafe . sbt . SbtMultiJvm . MultiJvmKeys . MultiJvm 
 - import com . typesafe . sbt . SbtScalariform 
 - import com . typesafe . sbt . SbtScalariform . ScalariformKeys 
 - 
 - object Formatting { 
 - lazy val formatSettings = SbtScalariform . scalariformSettings + + Seq ( 
 - ScalariformKeys . preferences in Compile : = formattingPreferences , 
 - ScalariformKeys . preferences in Test : = formattingPreferences 
 - / / ScalariformKeys . preferences in MultiJvm : = formattingPreferences 
 - ) 
 - 
 - lazy val docFormatSettings = SbtScalariform . scalariformSettings + + Seq ( 
 - ScalariformKeys . preferences in Compile : = docFormattingPreferences , 
 - ScalariformKeys . preferences in Test : = docFormattingPreferences 
 - / / ScalariformKeys . preferences in MultiJvm : = docFormattingPreferences 
 - ) 
 - 
 - def formattingPreferences = { 
 - import scalariform . formatter . preferences . _ 
 - FormattingPreferences ( ) 
 - . setPreference ( RewriteArrowSymbols , true ) 
 - . setPreference ( AlignParameters , true ) 
 - . setPreference ( AlignSingleLineCaseStatements , true ) 
 - . setPreference ( SpacesAroundMultiImports , true ) 
 - } 
 - 
 - def docFormattingPreferences = { 
 - import scalariform . formatter . preferences . _ 
 - FormattingPreferences ( ) 
 - . setPreference ( RewriteArrowSymbols , false ) 
 - . setPreference ( AlignParameters , true ) 
 - . setPreference ( AlignSingleLineCaseStatements , true ) 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / actor - server / project / plugins . sbt b / actor - server / project / plugins . sbt 
 index 417695c . . 30828c5 100644 
 - - - a / actor - server / project / plugins . sbt 
 + + + b / actor - server / project / plugins . sbt 
 @ @ - 2 , 6 + 2 , 7 @ @ resolvers + + = Seq ( 
 " Typesafe repository " at " http : / / repo . typesafe . com / typesafe / releases / " , 
 " Sonatype OSS Releases " at " https : / / oss . sonatype . org / content / repositories / releases / " , 
 " Sonatype OSS Snapshots " at " https : / / oss . sonatype . org / content / repositories / snapshots / " , 
 + Resolver . url ( " actor - sbt - plugins " , url ( " https : / / dl . bintray . com / actor / sbt - plugins " ) ) ( Resolver . ivyStylePatterns ) , 
 " Flyway " at " http : / / flywaydb . org / repo " , 
 " Era7 maven releases " at " https : / / s3 - eu - west - 1 . amazonaws . com / releases . era7 . com " , 
 Classpaths . sbtPluginReleases 
 @ @ - 39 , 6 + 40 , 8 @ @ addSbtPlugin ( " ohnosequences " % " sbt - github - release " % " 0 . 3 . 0 " ) 
 
 addSbtPlugin ( " com . typesafe . sbt " % " sbt - aspectj " % " 0 . 10 . 0 " ) 
 
 + addSbtPlugin ( " im . actor " % " actor - sbt - houserules " % " 0 . 1 . 1 " ) 
 + 
 libraryDependencies + + = Seq ( 
 " com . github . os72 " % " protoc - jar " % " 3 . 0 . 0 - b1 " 
 ) 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala 
 index 45bdd96 . . 76ed9b4 100644 
 - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala 
 + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package im . actor . botkit 
 
 - import akka . actor . { Status , ActorRef , ActorLogging , Actor } 
 + import akka . actor . { Status , ActorRef , ActorLogging , Actor } 
 import akka . pattern . ask 
 import akka . util . Timeout 
 import im . actor . bots . BotMessages 
 @ @ - 17 , 7 + 17 , 6 @ @ abstract class BotBase extends BotBaseBase { 
 import BotMessages . _ 
 import context . dispatcher 
 
 - 
 protected implicit val timeout : Timeout 
 
 private var requestCounter = 0L 
 @ @ - 32 , 37 + 31 , 37 @ @ abstract class BotBase extends BotBaseBase { 
 protected def onStreamFailure ( cause : Throwable ) : Unit 
 
 protected final def workingBehavior ( rqSource : ActorRef ) : Receive = { 
 - case Status . Failure ( cause ) = > 
 + case Status . Failure ( cause ) ⇒ 
 onStreamFailure ( cause ) 
 - case rq : RequestBody = > 
 + case rq : RequestBody ⇒ 
 requestCounter + = 1 
 val request = BotRequest ( requestCounter , rq . service , rq ) 
 - requests + = ( requestCounter - > ( sender ( ) - > rq ) ) 
 + requests + = ( requestCounter → ( sender ( ) → rq ) ) 
 rqSource ! request 
 case upd : BotUpdate ⇒ 
 log . debug ( " Update { } " , upd ) 
 
 upd match { 
 - case BotFatSeqUpdate ( _ , _ , users , groups ) = > 
 + case BotFatSeqUpdate ( _ , _ , users , groups ) ⇒ 
 users foreach { 
 - case ( id , user ) = > this . users . putIfAbsent ( id , user ) 
 + case ( id , user ) ⇒ this . users . putIfAbsent ( id , user ) 
 } 
 
 groups foreach { 
 - case ( id , group ) = > this . groups . putIfAbsent ( id , group ) 
 + case ( id , group ) ⇒ this . groups . putIfAbsent ( id , group ) 
 } 
 - case _ = > 
 + case _ ⇒ 
 } 
 
 onUpdate ( upd . body ) 
 case rsp : BotResponse ⇒ 
 log . info ( " Response # { } : { } " , rsp . id , rsp . body ) 
 requests . get ( rsp . id ) foreach { 
 - case ( replyTo , rq ) = > 
 + case ( replyTo , rq ) ⇒ 
 
 val reply = rsp . body match { 
 - case err : BotError = > Status . Failure ( err ) 
 - case BotSuccess ( obj ) = > rq . readResponse ( obj ) 
 + case err : BotError ⇒ Status . Failure ( err ) 
 + case BotSuccess ( obj ) ⇒ rq . readResponse ( obj ) 
 } 
 replyTo ! reply 
 } 
 diff - - git a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 index ab801b0 . . 83e7eec 100644 
 - - - a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 + + + b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 @ @ - 18 , 33 + 18 , 33 @ @ object BotMessages { 
 } 
 
 final case class FileLocation ( 
 - fileId : Long , 
 - accessHash : Long 
 - ) 
 + fileId : Long , 
 + accessHash : Long 
 + ) 
 
 final case class AvatarImage ( 
 - fileLocation : FileLocation , 
 - width : Int , 
 - height : Int , 
 - fileSize : Int 
 - ) 
 + fileLocation : FileLocation , 
 + width : Int , 
 + height : Int , 
 + fileSize : Int 
 + ) 
 
 final case class Avatar ( 
 - smallImage : Option [ AvatarImage ] , 
 - largeImage : Option [ AvatarImage ] , 
 - fullImage : Option [ AvatarImage ] 
 - ) 
 + smallImage : Option [ AvatarImage ] , 
 + largeImage : Option [ AvatarImage ] , 
 + fullImage : Option [ AvatarImage ] 
 + ) 
 
 final case class User ( 
 - id : Int , 
 - accessHash : Long , 
 - name : String , 
 - sex : Option [ Int ] , 
 - about : Option [ String ] , 
 - avatar : Option [ Avatar ] , 
 - username : Option [ String ] , 
 - isBot : Option [ Boolean ] 
 - ) { 
 + id : Int , 
 + accessHash : Long , 
 + name : String , 
 + sex : Option [ Int ] , 
 + about : Option [ String ] , 
 + avatar : Option [ Avatar ] , 
 + username : Option [ String ] , 
 + isBot : Option [ Boolean ] 
 + ) { 
 def isMale = sex . contains ( 1 ) 
 
 def isFemale = sex . contains ( 2 ) 
 @ @ - 53 , 22 + 53 , 22 @ @ object BotMessages { 
 } 
 
 final case class GroupMember ( 
 - userId : Int , 
 - inviterUserId : Int , 
 - memberSince : Long , 
 - isAdmin : Option [ Boolean ] 
 - ) 
 + userId : Int , 
 + inviterUserId : Int , 
 + memberSince : Long , 
 + isAdmin : Option [ Boolean ] 
 + ) 
 
 final case class Group ( 
 - id : Int , 
 - accessHash : Long , 
 - title : String , 
 - about : Option [ String ] , 
 - avatar : Option [ Avatar ] , 
 - isMember : Boolean , 
 - creatorUserId : Int , 
 - members : Seq [ GroupMember ] 
 - ) 
 + id : Int , 
 + accessHash : Long , 
 + title : String , 
 + about : Option [ String ] , 
 + avatar : Option [ Avatar ] , 
 + isMember : Boolean , 
 + creatorUserId : Int , 
 + members : Seq [ GroupMember ] 
 + ) 
 
 final object OutPeer { 
 def privat ( id : Int , accessHash : Long ) = OutPeer ( 1 , id , accessHash ) 
 @ @ - 79 , 10 + 79 , 10 @ @ object BotMessages { 
 } 
 
 final case class OutPeer ( 
 - ` type ` : Int , 
 - id : Int , 
 - accessHash : Long 
 - ) { 
 + ` type ` : Int , 
 + id : Int , 
 + accessHash : Long 
 + ) { 
 final def isPrivate = ` type ` = = 1 
 
 final def isUser = isPrivate 
 @ @ - 91 , 16 + 91 , 16 @ @ object BotMessages { 
 } 
 
 final case class UserOutPeer ( 
 - id : Int , 
 - accessHash : Long 
 - ) { 
 + id : Int , 
 + accessHash : Long 
 + ) { 
 val asOutPeer = OutPeer ( 1 , id , accessHash ) 
 } 
 
 final case class Peer ( 
 - ` type ` : Int , 
 - id : Int 
 - ) 
 + ` type ` : Int , 
 + id : Int 
 + ) 
 
 sealed trait RequestBody { 
 type Response < : ResponseBody 
 @ @ - 113 , 16 + 113 , 16 @ @ object BotMessages { 
 
 @ key ( " Request " ) 
 final case class BotRequest ( 
 - id : Long , 
 - service : String , 
 - body : RequestBody 
 - ) extends BotMessageIn 
 + id : Long , 
 + service : String , 
 + body : RequestBody 
 + ) extends BotMessageIn 
 
 @ key ( " Response " ) 
 final case class BotResponse ( 
 - id : Long , 
 - body : BotResponseBody 
 - ) extends BotMessageOut 
 + id : Long , 
 + body : BotResponseBody 
 + ) extends BotMessageOut 
 
 sealed trait BotResponseBody 
 
 @ @ - 135 , 17 + 135 , 17 @ @ object BotMessages { 
 
 @ key ( " SeqUpdate " ) 
 final case class BotSeqUpdate ( 
 - seq : Int , 
 - body : UpdateBody 
 - ) extends BotUpdate 
 + seq : Int , 
 + body : UpdateBody 
 + ) extends BotUpdate 
 
 @ key ( " FatSeqUpdate " ) 
 final case class BotFatSeqUpdate ( 
 - seq : Int , 
 - body : UpdateBody , 
 - users : Map [ Int , User ] , 
 - groups : Map [ Int , Group ] 
 - ) extends BotUpdate 
 + seq : Int , 
 + body : UpdateBody , 
 + users : Map [ Int , User ] , 
 + groups : Map [ Int , Group ] 
 + ) extends BotUpdate 
 
 @ key ( " Error " ) 
 case class BotError ( code : Int , tag : String , data : Js . Obj , retryIn : Option [ Int ] ) extends RuntimeException with BotResponseBody 
 @ @ - 154 , 28 + 154 , 28 @ @ object BotMessages { 
 case class BotSuccess ( obj : Js . Obj ) extends BotResponseBody 
 
 implicit val objWriter = Writer [ Js . Obj ] { 
 - case obj = > obj 
 + case obj ⇒ obj 
 } 
 
 implicit val objReader = Reader [ Js . Obj ] { 
 - case obj : Js . Obj = > obj 
 + case obj : Js . Obj ⇒ obj 
 } 
 
 implicit val botSuccessWriter = upickle . default . Writer [ BotSuccess ] { 
 - case BotSuccess ( obj ) = > obj 
 + case BotSuccess ( obj ) ⇒ obj 
 } 
 
 implicit val botSuccessReader = upickle . default . Reader [ BotSuccess ] { 
 - case obj : Js . Obj = > BotSuccess ( obj ) 
 + case obj : Js . Obj ⇒ BotSuccess ( obj ) 
 } 
 
 implicit val botErrorWriter = upickle . default . Writer [ BotError ] { 
 - case BotError ( code , tag , data , retryInOpt ) = > 
 + case BotError ( code , tag , data , retryInOpt ) ⇒ 
 Js . Obj ( 
 - " code " - > Js . Num ( code . toDouble ) , 
 - " tag " - > Js . Str ( tag ) , 
 - " data " - > data , 
 - " retryIn " - > retryInOpt . map ( n = > Js . Num ( n . toDouble ) ) . getOrElse ( Js . Null ) 
 + " code " → Js . Num ( code . toDouble ) , 
 + " tag " → Js . Str ( tag ) , 
 + " data " → data , 
 + " retryIn " → retryInOpt . map ( n ⇒ Js . Num ( n . toDouble ) ) . getOrElse ( Js . Null ) 
 ) 
 } 
 
 @ @ - 186 , 19 + 186 , 19 @ @ object BotMessages { 
 final case object Void extends Void 
 
 implicit val voidReader = upickle . default . Reader [ Void ] { 
 - case Js . Obj ( ) = > Void 
 + case Js . Obj ( ) ⇒ Void 
 } 
 
 implicit val voidWriter = upickle . default . Writer [ Void ] { 
 - case _ = > Js . Obj ( ) 
 + case _ ⇒ Js . Obj ( ) 
 } 
 
 @ key ( " SendMessage " ) 
 final case class SendTextMessage ( 
 - peer : OutPeer , 
 - randomId : Long , 
 - text : String 
 - ) extends RequestBody { 
 + peer : OutPeer , 
 + randomId : Long , 
 + text : String 
 + ) extends RequestBody { 
 override type Response = MessageSent 
 override val service = Services . Messaging 
 
 @ @ - 207 , 10 + 207 , 10 @ @ object BotMessages { 
 
 @ key ( " SetValue " ) 
 final case class SetValue ( 
 - keyspace : String , 
 - key : String , 
 - value : String 
 - ) extends RequestBody { 
 + keyspace : String , 
 + key : String , 
 + value : String 
 + ) extends RequestBody { 
 override type Response = Void 
 override val service = Services . KeyValue 
 
 @ @ - 219 , 9 + 219 , 9 @ @ object BotMessages { 
 
 @ key ( " GetValue " ) 
 final case class GetValue ( 
 - keyspace : String , 
 - key : String 
 - ) extends RequestBody { 
 + keyspace : String , 
 + key : String 
 + ) extends RequestBody { 
 override type Response = Container [ Option [ String ] ] 
 override val service = Services . KeyValue 
 
 @ @ - 230 , 9 + 230 , 9 @ @ object BotMessages { 
 
 @ key ( " DeleteValue " ) 
 final case class DeleteValue ( 
 - keyspace : String , 
 - key : String 
 - ) extends RequestBody { 
 + keyspace : String , 
 + key : String 
 + ) extends RequestBody { 
 override type Response = Void 
 override val service = Services . KeyValue 
 
 @ @ - 251 , 11 + 251 , 11 @ @ object BotMessages { 
 
 @ key ( " TextMessage " ) 
 final case class TextMessage ( 
 - peer : OutPeer , 
 - sender : UserOutPeer , 
 - date : Long , 
 - randomId : Long , 
 - text : String 
 - ) extends UpdateBody 
 + peer : OutPeer , 
 + sender : UserOutPeer , 
 + date : Long , 
 + randomId : Long , 
 + text : String 
 + ) extends UpdateBody 
 
 } 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotService . scala 
 index 8cfb5e4 . . c81cd72 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotService . scala 
 @ @ - 4 , 7 + 4 , 7 @ @ import im . actor . bots . BotMessages 
 import upickle . Js 
 import upickle . default . _ 
 
 - import scala . concurrent . { ExecutionContext , Future } 
 + import scala . concurrent . { ExecutionContext , Future } 
 
 object BotService { 
 import BotMessages . _ 
 @ @ - 14 , 24 + 14 , 24 @ @ object BotService { 
 
 type RequestResult [ + RSP < : ResponseBody ] = Either [ BotError , RSP ] 
 
 - private type Handler [ + RSP < : ResponseBody ] = ( BotUserId , BotAuthId ) = > Future [ RequestResult [ RSP ] ] 
 + private type Handler [ + RSP < : ResponseBody ] = ( BotUserId , BotAuthId ) ⇒ Future [ RequestResult [ RSP ] ] 
 
 - case class RequestHandler [ + RQ < : RequestBody , RSP < : ResponseBody : Writer ] ( handle : Handler [ RQ # Response ] ) { 
 + case class RequestHandler [ + RQ < : RequestBody , RSP < : ResponseBody : Writer ] ( handle : Handler [ RQ # Response ] ) { 
 def result ( botUserId : Int , botAuthId : Long ) ( implicit ec : ExecutionContext ) : Future [ BotResponseBody ] = 
 for { 
 - res < - handle ( botUserId , botAuthId ) 
 - } yield res match { 
 - case Right ( rsp ) = > BotSuccess ( writeJs ( rsp . asInstanceOf [ RSP ] ) . asInstanceOf [ Js . Obj ] ) 
 - case Left ( error ) = > error 
 + res ← handle ( botUserId , botAuthId ) 
 + } yield res match { 
 + case Right ( rsp ) ⇒ BotSuccess ( writeJs ( rsp . asInstanceOf [ RSP ] ) . asInstanceOf [ Js . Obj ] ) 
 + case Left ( error ) ⇒ error 
 } 
 
 def toWeak ( implicit ec : ExecutionContext ) = WeakRequestHandler ( 
 - ( botUserId : Int , botAuthId : Long ) = > 
 + ( botUserId : Int , botAuthId : Long ) ⇒ 
 result ( botUserId , botAuthId ) 
 ) 
 } 
 
 - case class WeakRequestHandler ( handle : ( BotUserId , BotAuthId ) = > Future [ BotResponseBody ] ) 
 + case class WeakRequestHandler ( handle : ( BotUserId , BotAuthId ) ⇒ Future [ BotResponseBody ] ) 
 } 
 
 trait BotService { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala b / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala 
 index 733b3dc . . 987077d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala 
 @ @ - 1 , 9 + 1 , 9 @ @ 
 package im . actor . api 
 
 - import slick . dbio . { DBIO , DBIOAction } 
 + import slick . dbio . { DBIO , DBIOAction } 
 import slick . driver . PostgresDriver . api . _ 
 
 - import scala . concurrent . { ExecutionContext , Future } 
 + import scala . concurrent . { ExecutionContext , Future } 
 import scala . reflect . _ 
 import scalaz . Scalaz . _ 
 import scalaz . _ 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 index bff0ec8 . . fc54206 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 @ @ - 1 , 16 + 1 , 16 @ @ 
 package im . actor . server . dialog 
 
 import im . actor . serialization . ActorSerializer 
 - import im . actor . server . office . { Processor , ProcessorState } 
 + import im . actor . server . office . { Processor , ProcessorState } 
 
 object DialogProcessor { 
 def register ( ) : Unit = { 
 ActorSerializer . register ( 
 - 40000 - > classOf [ DialogCommands . SendMessage ] , 
 - 40001 - > classOf [ DialogCommands . MessageReceived ] , 
 - 40002 - > classOf [ DialogCommands . MessageReceivedAck ] , 
 - 40003 - > classOf [ DialogCommands . MessageRead ] , 
 - 40004 - > classOf [ DialogCommands . MessageReadAck ] 
 + 40000 → classOf [ DialogCommands . SendMessage ] , 
 + 40001 → classOf [ DialogCommands . MessageReceived ] , 
 + 40002 → classOf [ DialogCommands . MessageReceivedAck ] , 
 + 40003 → classOf [ DialogCommands . MessageRead ] , 
 + 40004 → classOf [ DialogCommands . MessageReadAck ] 
 ) 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 index 49176df . . 67c8d445 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . office 
 
 import java . util . concurrent . TimeUnit 
 
 - import akka . actor . { ActorRef , Status } 
 + import akka . actor . { ActorRef , Status } 
 import akka . contrib . pattern . ShardRegion . Passivate 
 import akka . pattern . pipe 
 import akka . persistence . PersistentActor 
 @ @ - 65 , 21 + 65 , 21 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorFuture 
 final def receiveCommand = initializing 
 
 protected final def initializing : Receive = handleInitCommand orElse { 
 - case msg = > 
 + case msg ⇒ 
 log . debug ( " Entity not found while processing { } " , msg ) 
 sender ( ) ! Status . Failure ( EntityNotFound ) 
 } 
 
 protected final def working ( state : State ) : Receive = handleCommand ( state ) orElse handleQuery ( state ) orElse { 
 - case Work ( newState ) = > context become working ( newState ) 
 - case unmatched ⇒ log . warning ( " Unmatched message : { } , sender : { } " , unmatched , sender ( ) ) 
 + case Work ( newState ) ⇒ context become working ( newState ) 
 + case unmatched ⇒ log . warning ( " Unmatched message : { } , sender : { } " , unmatched , sender ( ) ) 
 } 
 
 protected final def stashingBehavior : Receive = { 
 - case UnstashAndWork ( evt , s ) = > 
 + case UnstashAndWork ( evt , s ) ⇒ 
 context become working ( updatedState ( evt , s ) ) 
 unstashAll ( ) 
 - case UnstashAndWorkBatch ( es , s ) = > 
 + case UnstashAndWorkBatch ( es , s ) ⇒ 
 val newState = es . foldLeft ( s ) { 
 case ( acc , e ) ⇒ 
 log . debug ( " Updating state : { } with event : { } " , acc , e ) 
 @ @ - 94 , 7 + 94 , 7 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorFuture 
 
 protected final def stashing ( state : State ) : Receive = handleQuery ( state ) orElse stashingBehavior 
 
 - final def persistReply [ R ] ( e : Event , state : State ) ( f : Event = > Future [ R ] ) : Unit = 
 + final def persistReply [ R ] ( e : Event , state : State ) ( f : Event ⇒ Future [ R ] ) : Unit = 
 persistReply ( e , state , sender ( ) ) ( f ) 
 
 final def persistReply [ R ] ( e : Event , state : State , replyTo : ActorRef ) ( f : Event ⇒ Future [ R ] ) : Unit = { 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / util / cache / CacheHelpers . scala b / actor - server / actor - runtime / src / main / scala / im / actor / util / cache / CacheHelpers . scala 
 index aba292a . . 531dc63 100644 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / util / cache / CacheHelpers . scala 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / util / cache / CacheHelpers . scala 
 @ @ - 1 , 8 + 1 , 8 @ @ 
 package im . actor . util . cache 
 
 - import com . github . benmanes . caffeine . cache . { Caffeine , Cache } 
 + import com . github . benmanes . caffeine . cache . { Caffeine , Cache } 
 
 - import scala . concurrent . { ExecutionContext , Future } 
 + import scala . concurrent . { ExecutionContext , Future } 
 
 object CacheHelpers { 
 
 @ @ - 21 , 7 + 21 , 7 @ @ object CacheHelpers { 
 cache . put ( key , result ) 
 
 result recover { 
 - case e = > 
 + case e ⇒ 
 cache . invalidate ( key ) 
 throw e 
 } 
 diff - - git a / actor - server / project / Formatting . scala b / actor - server / project / Formatting . scala 
 index 69b0c9d . . cd6bf6e 100644 
 - - - a / actor - server / project / Formatting . scala 
 + + + b / actor - server / project / Formatting . scala 
 @ @ - 24 , 6 + 24 , 7 @ @ object Formatting { 
 . setPreference ( RewriteArrowSymbols , true ) 
 . setPreference ( AlignParameters , true ) 
 . setPreference ( AlignSingleLineCaseStatements , true ) 
 + . setPreference ( SpacesAroundMultiImports , true ) 
 } 
 
 def docFormattingPreferences = { 
 diff - - git a / actor - server / project / plugins . sbt b / actor - server / project / plugins . sbt 
 index e31b3f4 . . b75ac6e 100644 
 - - - a / actor - server / project / plugins . sbt 
 + + + b / actor - server / project / plugins . sbt 
 @ @ - 19 , 7 + 19 , 7 @ @ addSbtPlugin ( " im . actor " % % " sbt - actor - api " % " 0 . 6 . 15 " ) 
 
 / / addSbtPlugin ( " com . typesafe . play " % " sbt - plugin " % " 2 . 3 . 9 " ) 
 
 - addSbtPlugin ( " org . scalariform " % " sbt - scalariform " % " 1 . 4 . 0 " ) 
 + addSbtPlugin ( " org . scalariform " % " sbt - scalariform " % " 1 . 5 . 1 " ) 
 
 addSbtPlugin ( " com . typesafe . sbt " % " sbt - native - packager " % " 1 . 0 . 4 " )
