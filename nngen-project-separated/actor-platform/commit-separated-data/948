BLEU SCORE: 0.024455939372403628

TEST MSG: refactor ( server ) : get rid of import im . actor . server . persist
GENERATED MSG: Merge branch ' server / master '

TEST DIFF (one line): diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala < nl > index 0c9fe7f . . 7a20251 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala < nl > @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . ActorSystem < nl > import akka . event . Logging < nl > import im . actor . server . activation . Activation . Code < nl > import im . actor . server . activation . _ < nl > - import im . actor . server . persist < nl > + import im . actor . server . persist . auth . GateAuthCodeRepo < nl > import slick . dbio . DBIO < nl > import spray . client . pipelining . _ < nl > import spray . http . HttpMethods . { POST , GET } < nl > @ @ - 38 , 7 + 38 , 7 @ @ class GateCodeActivation ( config : GateConfig ) ( implicit system : ActorSystem ) exten < nl > result ← codeResponse match { < nl > case CodeHash ( hash ) ⇒ < nl > optTransactionHash . map { transactionHash ⇒ < nl > - for ( _ ← persist . auth . GateAuthCodeRepo . createOrUpdate ( transactionHash , hash ) ) yield \ / - ( ( ) ) < nl > + for ( _ ← GateAuthCodeRepo . createOrUpdate ( transactionHash , hash ) ) yield \ / - ( ( ) ) < nl > } getOrElse DBIO . successful ( \ / - ( ( ) ) ) < nl > case failure : CodeFailure ⇒ < nl > DBIO . successful ( - \ / ( failure ) ) < nl > @ @ - 48 , 7 + 48 , 7 @ @ class GateCodeActivation ( config : GateConfig ) ( implicit system : ActorSystem ) exten < nl > < nl > override def validate ( transactionHash : String , code : String ) : DBIO [ ValidationResponse ] = { < nl > for { < nl > - optCodeHash ← persist . auth . GateAuthCodeRepo . find ( transactionHash ) < nl > + optCodeHash ← GateAuthCodeRepo . find ( transactionHash ) < nl > validationResponse ← DBIO . from ( optCodeHash map { codeHash ⇒ < nl > val validationUri = Uri ( s " $ { config . uri } / v1 / codes / validate / $ { codeHash . codeHash } " ) . withQuery ( " code " → code ) < nl > val request = HttpRequest ( GET , validationUri ) < nl > @ @ - 62 , 7 + 62 , 7 @ @ class GateCodeActivation ( config : GateConfig ) ( implicit system : ActorSystem ) exten < nl > } yield validationResponse < nl > } < nl > < nl > - override def finish ( transactionHash : String ) : DBIO [ Unit ] = persist . auth . GateAuthCodeRepo . delete ( transactionHash ) . map ( _ ⇒ ( ) ) < nl > + override def finish ( transactionHash : String ) : DBIO [ Unit ] = GateAuthCodeRepo . delete ( transactionHash ) . map ( _ ⇒ ( ) ) < nl > < nl > private def marshalToEntity [ T : ClassTag ] ( value : T ) ( implicit marshaller : Marshaller [ T ] ) : Future [ HttpEntity ] = < nl > marshal [ T ] ( value ) match { < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala < nl > index 15189ed . . 002893d 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala < nl > @ @ - 12 , 7 + 12 , 7 @ @ import im . actor . server . activation . Activation . { CallCode , Code , EmailCode , SmsCod < nl > import im . actor . server . activation . _ < nl > import im . actor . server . email . { EmailSender , Content , Message } < nl > import im . actor . server . model . AuthCode < nl > - import im . actor . server . persist < nl > + import im . actor . server . persist . AuthCodeRepo < nl > import im . actor . server . sms . { AuthCallEngine , AuthSmsEngine } < nl > import im . actor . util . misc . EmailUtils . isTestEmail < nl > import im . actor . util . misc . PhoneNumberUtils . isTestPhone < nl > @ @ - 55 , 21 + 55 , 21 @ @ object InternalCodeActivation { < nl > < nl > def validateAction ( txHash : String , code : String , attemptsNum : Int , expiration : Long ) ( implicit ec : ExecutionContext ) : DBIO [ ValidationResponse ] = < nl > for { < nl > - optCode ← persist . AuthCodeRepo . findByTransactionHash ( txHash ) < nl > + optCode ← AuthCodeRepo . findByTransactionHash ( txHash ) < nl > result ← optCode map { < nl > case s if isExpired ( s , expiration ) ⇒ < nl > - for ( _ ← persist . AuthCodeRepo . deleteByTransactionHash ( txHash ) ) yield ExpiredCode < nl > + for ( _ ← AuthCodeRepo . deleteByTransactionHash ( txHash ) ) yield ExpiredCode < nl > case s if s . code ! = code ⇒ < nl > if ( s . attempts + 1 > = attemptsNum ) { < nl > - for ( _ ← persist . AuthCodeRepo . deleteByTransactionHash ( txHash ) ) yield ExpiredCode < nl > + for ( _ ← AuthCodeRepo . deleteByTransactionHash ( txHash ) ) yield ExpiredCode < nl > } else { < nl > - for ( _ ← persist . AuthCodeRepo . incrementAttempts ( txHash , s . attempts ) ) yield InvalidCode < nl > + for ( _ ← AuthCodeRepo . incrementAttempts ( txHash , s . attempts ) ) yield InvalidCode < nl > } < nl > case _ ⇒ DBIO . successful ( Validated ) < nl > } getOrElse DBIO . successful ( InvalidHash ) < nl > } yield result < nl > < nl > - def finishAction ( txHash : String ) ( implicit ec : ExecutionContext ) : DBIO [ Unit ] = persist . AuthCodeRepo . deleteByTransactionHash ( txHash ) . map ( _ ⇒ ( ) ) < nl > + def finishAction ( txHash : String ) ( implicit ec : ExecutionContext ) : DBIO [ Unit ] = AuthCodeRepo . deleteByTransactionHash ( txHash ) . map ( _ ⇒ ( ) ) < nl > < nl > def isExpired ( code : AuthCode , expiration : Long ) : Boolean = < nl > code . createdAt . plus ( expiration , MILLIS ) . isBefore ( LocalDateTime . now ( ZoneOffset . UTC ) ) < nl > @ @ - 83 , 7 + 83 , 7 @ @ private [ activation ] final class InternalCodeActivation ( activationActor : ActorRef < nl > implicit val timeout : Timeout = Timeout ( 20 . seconds ) < nl > < nl > def send ( transactionHash : Option [ String ] , code : Code ) : DBIO [ CodeFailure \ / Unit ] = ( transactionHash match { < nl > - case Some ( hash ) ⇒ for ( _ ← persist . AuthCodeRepo . createOrUpdate ( hash , code . code ) ) yield ( ) < nl > + case Some ( hash ) ⇒ for ( _ ← AuthCodeRepo . createOrUpdate ( hash , code . code ) ) yield ( ) < nl > case None ⇒ DBIO . successful ( ( ) ) < nl > } ) flatMap ( _ ⇒ DBIO . from ( sendCode ( code ) ) ) < nl > < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > index ab17321 . . f58c5a7 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > @ @ - 13 , 7 + 13 , 7 @ @ import im . actor . server . bot . http . BotsHttpHandler < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . model . AuthSession < nl > import im . actor . server . office . EntityNotFound < nl > - import im . actor . server . persist < nl > + import im . actor . server . persist . { AuthIdRepo , AuthSessionRepo } < nl > import im . actor . server . user . UserExtension < nl > import im . actor . util . misc . IdUtils < nl > import org . apache . commons . codec . digest . DigestUtils < nl > @ @ - 192 , 7 + 192 , 7 @ @ private [ bot ] final class BotExtension ( _ system : ActorSystem ) extends Extension { < nl > DigestUtils . md5Hex ( ThreadLocalRandom . current ( ) . nextLong ( ) . toString ) < nl > < nl > private def getOrCreateAuthSession ( userId : Int ) : Future [ AuthSession ] = { < nl > - db . run ( persist . AuthSessionRepo . findFirstByUserId ( userId ) ) flatMap { < nl > + db . run ( AuthSessionRepo . findFirstByUserId ( userId ) ) flatMap { < nl > case Some ( session ) ⇒ Future . successful ( session ) < nl > case None ⇒ < nl > for { < nl > @ @ - 210 , 20 + 210 , 20 @ @ private [ bot ] final class BotExtension ( _ system : ActorSystem ) extends Extension { < nl > latitude = None , < nl > longitude = None < nl > ) < nl > - _ ← db . run ( persist . AuthSessionRepo . create ( session ) ) < nl > + _ ← db . run ( AuthSessionRepo . create ( session ) ) < nl > } yield session < nl > } < nl > } < nl > < nl > private def getOrCreateAuthId ( userId : Int ) : DBIO [ AuthId ] = { < nl > - persist . AuthIdRepo . findFirstIdByUserId ( userId ) flatMap { < nl > + AuthIdRepo . findFirstIdByUserId ( userId ) flatMap { < nl > case Some ( authId ) ⇒ < nl > DBIO . successful ( authId ) < nl > case None ⇒ < nl > val authId = ACLUtils . randomLong ( ) < nl > < nl > for { < nl > - _ ← persist . AuthIdRepo . create ( authId , None , None ) < nl > + _ ← AuthIdRepo . create ( authId , None , None ) < nl > _ ← DBIO . from ( userExt . auth ( userId , authId ) ) < nl > } yield authId < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala < nl > index cda25bc . . 39f9f08 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala < nl > @ @ - 6 , 8 + 6 , 8 @ @ import akka . actor . { Props , ActorSystem } < nl > import akka . persistence . RecoveryCompleted < nl > import im . actor . server . event . TSEvent < nl > import im . actor . server . group . { GroupEvents , GroupOffice } < nl > + import im . actor . server . persist . GroupRepo < nl > import slick . driver . PostgresDriver . api . _ < nl > - import im . actor . server . persist < nl > < nl > import scala . concurrent . { Promise , Future , ExecutionContext } < nl > import scala . concurrent . duration . _ < nl > @ @ - 20 , 7 + 20 , 7 @ @ object GroupCreatorMemberMigrator extends Migration { < nl > protected override def migrationTimeout = 1 . hour < nl > < nl > protected override def startMigration ( ) ( implicit system : ActorSystem , db : Database , ec : ExecutionContext ) : Future [ Unit ] = { < nl > - db . run ( persist . GroupRepo . findAllIds ) flatMap { groupIds ⇒ < nl > + db . run ( GroupRepo . findAllIds ) flatMap { groupIds ⇒ < nl > Future . sequence ( groupIds map { groupId ⇒ < nl > val promise = Promise [ Unit ] ( ) < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / LocalNamesMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / LocalNamesMigrator . scala < nl > index 1c0250b . . 199373d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / LocalNamesMigrator . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / LocalNamesMigrator . scala < nl > @ @ - 2 , 7 + 2 , 8 @ @ package im . actor . server . migrations < nl > < nl > import akka . actor . _ < nl > import akka . util . Timeout < nl > - import im . actor . server . persist < nl > + import im . actor . server . persist . UserRepo < nl > + import im . actor . server . persist . contact . { UserContactRepo , UserPhoneContactRepo , UserEmailContactRepo } < nl > import im . actor . server . user . UserExtension < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > @ @ - 23 , 8 + 24 , 8 @ @ object LocalNamesMigrator extends Migration { < nl > system . log . warning ( " Migrating local names " ) < nl > < nl > val actions = DBIO . sequence ( Seq ( < nl > - persist . contact . UserEmailContactRepo . econtacts . filter ( ! _ . isDeleted ) . map ( c ⇒ ( c . ownerUserId , c . contactUserId , Email ) ) . result , < nl > - persist . contact . UserPhoneContactRepo . pcontacts . filter ( ! _ . isDeleted ) . map ( c ⇒ ( c . ownerUserId , c . contactUserId , Phone ) ) . result < nl > + UserEmailContactRepo . econtacts . filter ( ! _ . isDeleted ) . map ( c ⇒ ( c . ownerUserId , c . contactUserId , Email ) ) . result , < nl > + UserPhoneContactRepo . pcontacts . filter ( ! _ . isDeleted ) . map ( c ⇒ ( c . ownerUserId , c . contactUserId , Phone ) ) . result < nl > ) ) < nl > < nl > db . run ( actions ) flatMap ( contacts ⇒ Future . sequence ( contacts . flatten map migrateSingle ) ) map ( _ ⇒ ( ) ) < nl > @ @ - 52 , 12 + 53 , 12 @ @ private final class LocalNamesMigrator ( promise : Promise [ Unit ] , ownerUserId : Int , < nl > override def receive : Receive = Actor . emptyBehavior < nl > < nl > db . run ( for { < nl > - contact ← persist . contact . UserContactRepo . find ( ownerUserId , contactUserId ) < nl > - user ← persist . UserRepo . find ( contactUserId ) < nl > + contact ← UserContactRepo . find ( ownerUserId , contactUserId ) < nl > + user ← UserRepo . find ( contactUserId ) < nl > } yield ( contact , user ) ) foreach { < nl > case ( Some ( contact ) , Some ( user ) ) ⇒ < nl > ( if ( contact . name . contains ( user . name ) ) { < nl > - db . run ( persist . contact . UserContactRepo . updateName ( ownerUserId , contactUserId , None ) ) < nl > + db . run ( UserContactRepo . updateName ( ownerUserId , contactUserId , None ) ) < nl > } else { < nl > contact . name map ( _ ⇒ userExt . editLocalName ( ownerUserId , contactUserId , contact . name , supressUpdate = true ) ) getOrElse Future . successful ( ( ) ) < nl > } ) onComplete { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / misc / UpdateCounters . scala b / actor - server / actor - core / src / main / scala / im / actor / server / misc / UpdateCounters . scala < nl > index bdefe35 . . 8faeacc 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / misc / UpdateCounters . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / misc / UpdateCounters . scala < nl > @ @ - 1 , 13 + 1 , 13 @ @ < nl > package im . actor . server . misc < nl > < nl > import im . actor . api . rpc . counters . { ApiAppCounters , UpdateCountersChanged } < nl > - import im . actor . server . persist < nl > + import im . actor . server . persist . HistoryMessageRepo < nl > import slick . dbio . _ < nl > < nl > import scala . concurrent . ExecutionContext < nl > < nl > trait UpdateCounters { < nl > protected def getUpdateCountersChanged ( userId : Int ) ( implicit ec : ExecutionContext ) : DBIO [ UpdateCountersChanged ] = for { < nl > - unreadTotal ← persist . HistoryMessageRepo . getUnreadTotal ( userId ) < nl > + unreadTotal ← HistoryMessageRepo . getUnreadTotal ( userId ) < nl > } yield UpdateCountersChanged ( ApiAppCounters ( Some ( unreadTotal ) ) ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / presences / GroupPresenceManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / presences / GroupPresenceManager . scala < nl > index ded150d . . 2d2142d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / presences / GroupPresenceManager . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / presences / GroupPresenceManager . scala < nl > @ @ - 5 , 7 + 5 , 7 @ @ import akka . cluster . sharding . ShardRegion . Passivate < nl > import akka . pattern . pipe < nl > import akka . util . Timeout < nl > import im . actor . server . db . DbExtension < nl > - import im . actor . server . persist < nl > + import im . actor . server . persist . GroupUserRepo < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > import scala . concurrent . ExecutionContext < nl > @ @ - 67 , 7 + 67 , 7 @ @ class GroupPresenceManager extends Actor with ActorLogging with Stash { < nl > def receive = { < nl > case env @ Envelope ( groupId , _ ) ⇒ < nl > stash ( ) < nl > - db . run ( persist . GroupUserRepo . findUserIds ( groupId ) ) < nl > + db . run ( GroupUserRepo . findUserIds ( groupId ) ) < nl > . map ( ids ⇒ Initialized ( groupId , ids . toSet ) ) < nl > . pipeTo ( self ) < nl > . onFailure { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / social / SocialManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / social / SocialManager . scala < nl > index 480a63a . . 7a88993 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / social / SocialManager . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / social / SocialManager . scala < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > package im . actor . server . social < nl > < nl > import im . actor . config . ActorConfig < nl > + import im . actor . server . persist . social . RelationRepo < nl > < nl > import scala . concurrent . Future < nl > import scala . concurrent . _ < nl > @ @ - 14 , 7 + 15 , 6 @ @ import akka . util . Timeout < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > import im . actor . server . db . DbExtension < nl > - import im . actor . server . persist < nl > < nl > sealed trait SocialExtension extends Extension { < nl > val region : SocialManagerRegion < nl > @ @ - 118 , 7 + 118 , 7 @ @ class SocialManager ( implicit db : Database ) extends Actor with ActorLogging with < nl > case env @ Envelope ( userId , _ ) ⇒ < nl > stash ( ) < nl > < nl > - db . run ( persist . social . RelationRepo . find ( userId ) ) onComplete { < nl > + db . run ( RelationRepo . find ( userId ) ) onComplete { < nl > case Success ( userIds ) ⇒ < nl > self ! Initiated ( userIds . toSet ) < nl > case Failure ( e ) ⇒ < nl > @ @ - 145 , 13 + 145 , 13 @ @ class SocialManager ( implicit db : Database ) extends Actor with ActorLogging with < nl > < nl > if ( uniqUserIds . nonEmpty ) { < nl > context . become ( working ( userIds + + uniqUserIds ) ) < nl > - db . run ( persist . social . RelationRepo . create ( userId , uniqUserIds ) ) < nl > + db . run ( RelationRepo . create ( userId , uniqUserIds ) ) < nl > } < nl > case env @ Envelope ( userId , RelationNoted ( notedUserId ) ) ⇒ < nl > if ( ! userIds . contains ( notedUserId ) & & userId ! = notedUserId ) { < nl > context . become ( working ( userIds + notedUserId ) ) < nl > < nl > - db . run ( persist . social . RelationRepo . create ( userId , notedUserId ) ) < nl > + db . run ( RelationRepo . create ( userId , notedUserId ) ) < nl > } < nl > case env @ Envelope ( userId , GetRelations ) ⇒ < nl > sender ( ) ! Relations ( userIds ) < nl > diff - - git a / actor - server / actor - enrich / src / main / scala / im / actor / server / enrich / UpdateHandler . scala b / actor - server / actor - enrich / src / main / scala / im / actor / server / enrich / UpdateHandler . scala < nl > index 4a23bc4 . . 5af8f06 100644 < nl > - - - a / actor - server / actor - enrich / src / main / scala / im / actor / server / enrich / UpdateHandler . scala < nl > + + + b / actor - server / actor - enrich / src / main / scala / im / actor / server / enrich / UpdateHandler . scala < nl > @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . ActorSystem < nl > import im . actor . api . rpc . Implicits . _ < nl > import im . actor . api . rpc . messaging . { ApiMessage , UpdateMessageContentChanged } < nl > import im . actor . server . model . { Peer , PeerType } < nl > - import im . actor . server . persist < nl > + import im . actor . server . persist . { GroupUserRepo , HistoryMessageRepo } < nl > import im . actor . server . sequence . SeqState < nl > import im . actor . server . user . UserExtension < nl > import slick . dbio . _ < nl > @ @ - 42 , 7 + 42 , 7 @ @ class PrivateHandler ( fromPeer : Peer , toPeer : Peer , randomId : Long ) ( implicit syst < nl > ) < nl > } yield Seq ( fromUpdate , toUpdate ) ) < nl > < nl > - def handleDbUpdate ( message : ApiMessage ) : DBIO [ Int ] = persist . HistoryMessageRepo . updateContentAll ( < nl > + def handleDbUpdate ( message : ApiMessage ) : DBIO [ Int ] = HistoryMessageRepo . updateContentAll ( < nl > userIds = Set ( fromPeer . id , toPeer . id ) , < nl > randomId = randomId , < nl > peerType = PeerType . Private , < nl > @ @ - 60 , 15 + 60 , 15 @ @ class GroupHandler ( groupPeer : Peer , randomId : Long ) ( implicit system : ActorSystem < nl > def handleUpdate ( message : ApiMessage ) : DBIO [ Seq [ SeqState ] ] = { < nl > val update = UpdateMessageContentChanged ( groupPeer . asStruct , randomId , message ) < nl > for { < nl > - usersIds ← persist . GroupUserRepo . findUserIds ( groupPeer . id ) < nl > + usersIds ← GroupUserRepo . findUserIds ( groupPeer . id ) < nl > seqstate ← DBIO . from ( UserExtension ( system ) . broadcastUsersUpdate ( usersIds . toSet , update , None , false , deliveryId = Some ( s " msgcontent _ $ { randomId } " ) ) ) < nl > } yield seqstate < nl > } < nl > < nl > def handleDbUpdate ( message : ApiMessage ) : DBIO [ Int ] = < nl > for { < nl > - usersIds ← persist . GroupUserRepo . findUserIds ( groupPeer . id ) < nl > - result ← persist . HistoryMessageRepo . updateContentAll ( < nl > + usersIds ← GroupUserRepo . findUserIds ( groupPeer . id ) < nl > + result ← HistoryMessageRepo . updateContentAll ( < nl > userIds = usersIds . toSet , < nl > randomId = randomId , < nl > peerType = PeerType . Group , < nl > diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / AuthorizationManager . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / AuthorizationManager . scala < nl > index 28220ea . . a98024a 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / AuthorizationManager . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / AuthorizationManager . scala < nl > @ @ - 14 , 7 + 14 , 6 @ @ import im . actor . server . db . DbExtension < nl > import im . actor . server . mtproto . codecs . protocol . MessageBoxCodec < nl > import im . actor . server . mtproto . protocol . _ < nl > import im . actor . server . mtproto . transport . _ < nl > - import im . actor . server . persist < nl > import im . actor . server . persist . { AuthIdRepo , MasterKeyRepo } < nl > import im . actor . util . misc . IdUtils < nl > import im . actor . util . ThreadLocalSecureRandom < nl > @ @ - 130 , 7 + 129 , 7 @ @ final class AuthorizationManager ( serverKeys : Seq [ ServerKey ] , sessionClient : Acto < nl > val f = < nl > if ( authId = = 0L ) { < nl > authId = IdUtils . nextAuthId ( ThreadLocalSecureRandom . current ( ) ) < nl > - db . run ( persist . AuthIdRepo . create ( authId , None , None ) ) < nl > + db . run ( AuthIdRepo . create ( authId , None , None ) ) < nl > } else Future . successful ( ( ) ) < nl > < nl > f onComplete {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / IlectroUser . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / IlectroUser . scala < nl > deleted file mode 100644 < nl > index 189d99e . . 0000000 < nl > - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / IlectroUser . scala < nl > + + + / dev / null < nl > @ @ - 1 , 5 + 0 , 0 @ @ < nl > - package im . actor . server . models . llectro < nl > - < nl > - import java . util . UUID < nl > - < nl > - case class LlectroUser ( userId : Int , uuid : UUID , name : String ) < nl > diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / Interest . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / Interest . scala < nl > deleted file mode 100644 < nl > index d5e361a . . 0000000 < nl > - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / Interest . scala < nl > + + + / dev / null < nl > @ @ - 1 , 3 + 0 , 0 @ @ < nl > - package im . actor . server . models . llectro < nl > - < nl > - case class Interest ( id : Int , name : String , parentId : Int , fullPath : String , level : Int ) < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / LlectroDevice . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / LlectroDevice . scala < nl > deleted file mode 100644 < nl > index 268056a . . 0000000 < nl > - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / LlectroDevice . scala < nl > + + + / dev / null < nl > @ @ - 1 , 3 + 0 , 0 @ @ < nl > - package im . actor . server . models . llectro < nl > - < nl > - case class LlectroDevice ( authId : Long , screenWidth : Int , screenHeight : Int ) < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / UserInterest . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / UserInterest . scala < nl > deleted file mode 100644 < nl > index 963e5df . . 0000000 < nl > - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / UserInterest . scala < nl > + + + / dev / null < nl > @ @ - 1 , 3 + 0 , 0 @ @ < nl > - package im . actor . server . models . llectro < nl > - < nl > - case class UserInterest ( userId : Int , interestId : Int ) < nl > \ No newline at end of file < nl > diff - - git a / actor - server / bin / merge - to - master b / actor - server / bin / merge - to - master < nl > new file mode 100755 < nl > index 0000000 . . 57bea44 < nl > - - - / dev / null < nl > + + + b / actor - server / bin / merge - to - master < nl > @ @ - 0 , 0 + 1 , 15 @ @ < nl > + # ! / usr / bin / env bash < nl > + < nl > + set - eu < nl > + < nl > + git diff - index - - quiet - - cached HEAD < nl > + < nl > + if [ $ ? - eq 0 ] < nl > + then < nl > + git checkout master < nl > + git pull - - rebase origin master < nl > + git merge server / master < nl > + git push origin master < nl > + else < nl > + echo " Branch is dirty " < nl > + fi < nl > diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala < nl > index 0ae9ff5 . . 1d00c84 100644 < nl > - - - a / actor - server / project / Dependencies . scala < nl > + + + b / actor - server / project / Dependencies . scala < nl > @ @ - 38 , 7 + 38 , 6 @ @ object Dependencies { < nl > < nl > val concmap = " com . googlecode . concurrentlinkedhashmap " % " concurrentlinkedhashmap - lru " % " 1 . 4 . 2 " < nl > val caffeine = " com . github . ben - manes . caffeine " % " caffeine " % " 1 . 2 . 0 " < nl > - val eaioUuid = " com . eaio . uuid " % " uuid " % " 3 . 4 " < nl > < nl > val cats = " org . spire - math " % % " cats " % V . cats < nl > < nl > @ @ - 166 , 7 + 165 , 7 @ @ object Dependencies { < nl > < nl > val codecs = shared + + Seq ( scalazCore , scodecBits , scodecCore ) < nl > < nl > - val models = shared + + Seq ( eaioUuid , scodecBits , scodecCore , jodaTime , jodaConvert , slickPg ) < nl > + val models = shared + + Seq ( scodecBits , scodecCore , jodaTime , jodaConvert , slickPg ) < nl > < nl > val frontend = shared + + Seq ( < nl > akkaSlf4j , akkaActor , akkaStream ,

TEST DIFF:
diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala 
 index 0c9fe7f . . 7a20251 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateCodeActivation . scala 
 @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . ActorSystem 
 import akka . event . Logging 
 import im . actor . server . activation . Activation . Code 
 import im . actor . server . activation . _ 
 - import im . actor . server . persist 
 + import im . actor . server . persist . auth . GateAuthCodeRepo 
 import slick . dbio . DBIO 
 import spray . client . pipelining . _ 
 import spray . http . HttpMethods . { POST , GET } 
 @ @ - 38 , 7 + 38 , 7 @ @ class GateCodeActivation ( config : GateConfig ) ( implicit system : ActorSystem ) exten 
 result ← codeResponse match { 
 case CodeHash ( hash ) ⇒ 
 optTransactionHash . map { transactionHash ⇒ 
 - for ( _ ← persist . auth . GateAuthCodeRepo . createOrUpdate ( transactionHash , hash ) ) yield \ / - ( ( ) ) 
 + for ( _ ← GateAuthCodeRepo . createOrUpdate ( transactionHash , hash ) ) yield \ / - ( ( ) ) 
 } getOrElse DBIO . successful ( \ / - ( ( ) ) ) 
 case failure : CodeFailure ⇒ 
 DBIO . successful ( - \ / ( failure ) ) 
 @ @ - 48 , 7 + 48 , 7 @ @ class GateCodeActivation ( config : GateConfig ) ( implicit system : ActorSystem ) exten 
 
 override def validate ( transactionHash : String , code : String ) : DBIO [ ValidationResponse ] = { 
 for { 
 - optCodeHash ← persist . auth . GateAuthCodeRepo . find ( transactionHash ) 
 + optCodeHash ← GateAuthCodeRepo . find ( transactionHash ) 
 validationResponse ← DBIO . from ( optCodeHash map { codeHash ⇒ 
 val validationUri = Uri ( s " $ { config . uri } / v1 / codes / validate / $ { codeHash . codeHash } " ) . withQuery ( " code " → code ) 
 val request = HttpRequest ( GET , validationUri ) 
 @ @ - 62 , 7 + 62 , 7 @ @ class GateCodeActivation ( config : GateConfig ) ( implicit system : ActorSystem ) exten 
 } yield validationResponse 
 } 
 
 - override def finish ( transactionHash : String ) : DBIO [ Unit ] = persist . auth . GateAuthCodeRepo . delete ( transactionHash ) . map ( _ ⇒ ( ) ) 
 + override def finish ( transactionHash : String ) : DBIO [ Unit ] = GateAuthCodeRepo . delete ( transactionHash ) . map ( _ ⇒ ( ) ) 
 
 private def marshalToEntity [ T : ClassTag ] ( value : T ) ( implicit marshaller : Marshaller [ T ] ) : Future [ HttpEntity ] = 
 marshal [ T ] ( value ) match { 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala 
 index 15189ed . . 002893d 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala 
 @ @ - 12 , 7 + 12 , 7 @ @ import im . actor . server . activation . Activation . { CallCode , Code , EmailCode , SmsCod 
 import im . actor . server . activation . _ 
 import im . actor . server . email . { EmailSender , Content , Message } 
 import im . actor . server . model . AuthCode 
 - import im . actor . server . persist 
 + import im . actor . server . persist . AuthCodeRepo 
 import im . actor . server . sms . { AuthCallEngine , AuthSmsEngine } 
 import im . actor . util . misc . EmailUtils . isTestEmail 
 import im . actor . util . misc . PhoneNumberUtils . isTestPhone 
 @ @ - 55 , 21 + 55 , 21 @ @ object InternalCodeActivation { 
 
 def validateAction ( txHash : String , code : String , attemptsNum : Int , expiration : Long ) ( implicit ec : ExecutionContext ) : DBIO [ ValidationResponse ] = 
 for { 
 - optCode ← persist . AuthCodeRepo . findByTransactionHash ( txHash ) 
 + optCode ← AuthCodeRepo . findByTransactionHash ( txHash ) 
 result ← optCode map { 
 case s if isExpired ( s , expiration ) ⇒ 
 - for ( _ ← persist . AuthCodeRepo . deleteByTransactionHash ( txHash ) ) yield ExpiredCode 
 + for ( _ ← AuthCodeRepo . deleteByTransactionHash ( txHash ) ) yield ExpiredCode 
 case s if s . code ! = code ⇒ 
 if ( s . attempts + 1 > = attemptsNum ) { 
 - for ( _ ← persist . AuthCodeRepo . deleteByTransactionHash ( txHash ) ) yield ExpiredCode 
 + for ( _ ← AuthCodeRepo . deleteByTransactionHash ( txHash ) ) yield ExpiredCode 
 } else { 
 - for ( _ ← persist . AuthCodeRepo . incrementAttempts ( txHash , s . attempts ) ) yield InvalidCode 
 + for ( _ ← AuthCodeRepo . incrementAttempts ( txHash , s . attempts ) ) yield InvalidCode 
 } 
 case _ ⇒ DBIO . successful ( Validated ) 
 } getOrElse DBIO . successful ( InvalidHash ) 
 } yield result 
 
 - def finishAction ( txHash : String ) ( implicit ec : ExecutionContext ) : DBIO [ Unit ] = persist . AuthCodeRepo . deleteByTransactionHash ( txHash ) . map ( _ ⇒ ( ) ) 
 + def finishAction ( txHash : String ) ( implicit ec : ExecutionContext ) : DBIO [ Unit ] = AuthCodeRepo . deleteByTransactionHash ( txHash ) . map ( _ ⇒ ( ) ) 
 
 def isExpired ( code : AuthCode , expiration : Long ) : Boolean = 
 code . createdAt . plus ( expiration , MILLIS ) . isBefore ( LocalDateTime . now ( ZoneOffset . UTC ) ) 
 @ @ - 83 , 7 + 83 , 7 @ @ private [ activation ] final class InternalCodeActivation ( activationActor : ActorRef 
 implicit val timeout : Timeout = Timeout ( 20 . seconds ) 
 
 def send ( transactionHash : Option [ String ] , code : Code ) : DBIO [ CodeFailure \ / Unit ] = ( transactionHash match { 
 - case Some ( hash ) ⇒ for ( _ ← persist . AuthCodeRepo . createOrUpdate ( hash , code . code ) ) yield ( ) 
 + case Some ( hash ) ⇒ for ( _ ← AuthCodeRepo . createOrUpdate ( hash , code . code ) ) yield ( ) 
 case None ⇒ DBIO . successful ( ( ) ) 
 } ) flatMap ( _ ⇒ DBIO . from ( sendCode ( code ) ) ) 
 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 index ab17321 . . f58c5a7 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 @ @ - 13 , 7 + 13 , 7 @ @ import im . actor . server . bot . http . BotsHttpHandler 
 import im . actor . server . db . DbExtension 
 import im . actor . server . model . AuthSession 
 import im . actor . server . office . EntityNotFound 
 - import im . actor . server . persist 
 + import im . actor . server . persist . { AuthIdRepo , AuthSessionRepo } 
 import im . actor . server . user . UserExtension 
 import im . actor . util . misc . IdUtils 
 import org . apache . commons . codec . digest . DigestUtils 
 @ @ - 192 , 7 + 192 , 7 @ @ private [ bot ] final class BotExtension ( _ system : ActorSystem ) extends Extension { 
 DigestUtils . md5Hex ( ThreadLocalRandom . current ( ) . nextLong ( ) . toString ) 
 
 private def getOrCreateAuthSession ( userId : Int ) : Future [ AuthSession ] = { 
 - db . run ( persist . AuthSessionRepo . findFirstByUserId ( userId ) ) flatMap { 
 + db . run ( AuthSessionRepo . findFirstByUserId ( userId ) ) flatMap { 
 case Some ( session ) ⇒ Future . successful ( session ) 
 case None ⇒ 
 for { 
 @ @ - 210 , 20 + 210 , 20 @ @ private [ bot ] final class BotExtension ( _ system : ActorSystem ) extends Extension { 
 latitude = None , 
 longitude = None 
 ) 
 - _ ← db . run ( persist . AuthSessionRepo . create ( session ) ) 
 + _ ← db . run ( AuthSessionRepo . create ( session ) ) 
 } yield session 
 } 
 } 
 
 private def getOrCreateAuthId ( userId : Int ) : DBIO [ AuthId ] = { 
 - persist . AuthIdRepo . findFirstIdByUserId ( userId ) flatMap { 
 + AuthIdRepo . findFirstIdByUserId ( userId ) flatMap { 
 case Some ( authId ) ⇒ 
 DBIO . successful ( authId ) 
 case None ⇒ 
 val authId = ACLUtils . randomLong ( ) 
 
 for { 
 - _ ← persist . AuthIdRepo . create ( authId , None , None ) 
 + _ ← AuthIdRepo . create ( authId , None , None ) 
 _ ← DBIO . from ( userExt . auth ( userId , authId ) ) 
 } yield authId 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala 
 index cda25bc . . 39f9f08 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala 
 @ @ - 6 , 8 + 6 , 8 @ @ import akka . actor . { Props , ActorSystem } 
 import akka . persistence . RecoveryCompleted 
 import im . actor . server . event . TSEvent 
 import im . actor . server . group . { GroupEvents , GroupOffice } 
 + import im . actor . server . persist . GroupRepo 
 import slick . driver . PostgresDriver . api . _ 
 - import im . actor . server . persist 
 
 import scala . concurrent . { Promise , Future , ExecutionContext } 
 import scala . concurrent . duration . _ 
 @ @ - 20 , 7 + 20 , 7 @ @ object GroupCreatorMemberMigrator extends Migration { 
 protected override def migrationTimeout = 1 . hour 
 
 protected override def startMigration ( ) ( implicit system : ActorSystem , db : Database , ec : ExecutionContext ) : Future [ Unit ] = { 
 - db . run ( persist . GroupRepo . findAllIds ) flatMap { groupIds ⇒ 
 + db . run ( GroupRepo . findAllIds ) flatMap { groupIds ⇒ 
 Future . sequence ( groupIds map { groupId ⇒ 
 val promise = Promise [ Unit ] ( ) 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / LocalNamesMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / LocalNamesMigrator . scala 
 index 1c0250b . . 199373d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / LocalNamesMigrator . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / LocalNamesMigrator . scala 
 @ @ - 2 , 7 + 2 , 8 @ @ package im . actor . server . migrations 
 
 import akka . actor . _ 
 import akka . util . Timeout 
 - import im . actor . server . persist 
 + import im . actor . server . persist . UserRepo 
 + import im . actor . server . persist . contact . { UserContactRepo , UserPhoneContactRepo , UserEmailContactRepo } 
 import im . actor . server . user . UserExtension 
 import slick . driver . PostgresDriver . api . _ 
 
 @ @ - 23 , 8 + 24 , 8 @ @ object LocalNamesMigrator extends Migration { 
 system . log . warning ( " Migrating local names " ) 
 
 val actions = DBIO . sequence ( Seq ( 
 - persist . contact . UserEmailContactRepo . econtacts . filter ( ! _ . isDeleted ) . map ( c ⇒ ( c . ownerUserId , c . contactUserId , Email ) ) . result , 
 - persist . contact . UserPhoneContactRepo . pcontacts . filter ( ! _ . isDeleted ) . map ( c ⇒ ( c . ownerUserId , c . contactUserId , Phone ) ) . result 
 + UserEmailContactRepo . econtacts . filter ( ! _ . isDeleted ) . map ( c ⇒ ( c . ownerUserId , c . contactUserId , Email ) ) . result , 
 + UserPhoneContactRepo . pcontacts . filter ( ! _ . isDeleted ) . map ( c ⇒ ( c . ownerUserId , c . contactUserId , Phone ) ) . result 
 ) ) 
 
 db . run ( actions ) flatMap ( contacts ⇒ Future . sequence ( contacts . flatten map migrateSingle ) ) map ( _ ⇒ ( ) ) 
 @ @ - 52 , 12 + 53 , 12 @ @ private final class LocalNamesMigrator ( promise : Promise [ Unit ] , ownerUserId : Int , 
 override def receive : Receive = Actor . emptyBehavior 
 
 db . run ( for { 
 - contact ← persist . contact . UserContactRepo . find ( ownerUserId , contactUserId ) 
 - user ← persist . UserRepo . find ( contactUserId ) 
 + contact ← UserContactRepo . find ( ownerUserId , contactUserId ) 
 + user ← UserRepo . find ( contactUserId ) 
 } yield ( contact , user ) ) foreach { 
 case ( Some ( contact ) , Some ( user ) ) ⇒ 
 ( if ( contact . name . contains ( user . name ) ) { 
 - db . run ( persist . contact . UserContactRepo . updateName ( ownerUserId , contactUserId , None ) ) 
 + db . run ( UserContactRepo . updateName ( ownerUserId , contactUserId , None ) ) 
 } else { 
 contact . name map ( _ ⇒ userExt . editLocalName ( ownerUserId , contactUserId , contact . name , supressUpdate = true ) ) getOrElse Future . successful ( ( ) ) 
 } ) onComplete { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / misc / UpdateCounters . scala b / actor - server / actor - core / src / main / scala / im / actor / server / misc / UpdateCounters . scala 
 index bdefe35 . . 8faeacc 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / misc / UpdateCounters . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / misc / UpdateCounters . scala 
 @ @ - 1 , 13 + 1 , 13 @ @ 
 package im . actor . server . misc 
 
 import im . actor . api . rpc . counters . { ApiAppCounters , UpdateCountersChanged } 
 - import im . actor . server . persist 
 + import im . actor . server . persist . HistoryMessageRepo 
 import slick . dbio . _ 
 
 import scala . concurrent . ExecutionContext 
 
 trait UpdateCounters { 
 protected def getUpdateCountersChanged ( userId : Int ) ( implicit ec : ExecutionContext ) : DBIO [ UpdateCountersChanged ] = for { 
 - unreadTotal ← persist . HistoryMessageRepo . getUnreadTotal ( userId ) 
 + unreadTotal ← HistoryMessageRepo . getUnreadTotal ( userId ) 
 } yield UpdateCountersChanged ( ApiAppCounters ( Some ( unreadTotal ) ) ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / presences / GroupPresenceManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / presences / GroupPresenceManager . scala 
 index ded150d . . 2d2142d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / presences / GroupPresenceManager . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / presences / GroupPresenceManager . scala 
 @ @ - 5 , 7 + 5 , 7 @ @ import akka . cluster . sharding . ShardRegion . Passivate 
 import akka . pattern . pipe 
 import akka . util . Timeout 
 import im . actor . server . db . DbExtension 
 - import im . actor . server . persist 
 + import im . actor . server . persist . GroupUserRepo 
 import slick . driver . PostgresDriver . api . _ 
 
 import scala . concurrent . ExecutionContext 
 @ @ - 67 , 7 + 67 , 7 @ @ class GroupPresenceManager extends Actor with ActorLogging with Stash { 
 def receive = { 
 case env @ Envelope ( groupId , _ ) ⇒ 
 stash ( ) 
 - db . run ( persist . GroupUserRepo . findUserIds ( groupId ) ) 
 + db . run ( GroupUserRepo . findUserIds ( groupId ) ) 
 . map ( ids ⇒ Initialized ( groupId , ids . toSet ) ) 
 . pipeTo ( self ) 
 . onFailure { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / social / SocialManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / social / SocialManager . scala 
 index 480a63a . . 7a88993 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / social / SocialManager . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / social / SocialManager . scala 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package im . actor . server . social 
 
 import im . actor . config . ActorConfig 
 + import im . actor . server . persist . social . RelationRepo 
 
 import scala . concurrent . Future 
 import scala . concurrent . _ 
 @ @ - 14 , 7 + 15 , 6 @ @ import akka . util . Timeout 
 import slick . driver . PostgresDriver . api . _ 
 
 import im . actor . server . db . DbExtension 
 - import im . actor . server . persist 
 
 sealed trait SocialExtension extends Extension { 
 val region : SocialManagerRegion 
 @ @ - 118 , 7 + 118 , 7 @ @ class SocialManager ( implicit db : Database ) extends Actor with ActorLogging with 
 case env @ Envelope ( userId , _ ) ⇒ 
 stash ( ) 
 
 - db . run ( persist . social . RelationRepo . find ( userId ) ) onComplete { 
 + db . run ( RelationRepo . find ( userId ) ) onComplete { 
 case Success ( userIds ) ⇒ 
 self ! Initiated ( userIds . toSet ) 
 case Failure ( e ) ⇒ 
 @ @ - 145 , 13 + 145 , 13 @ @ class SocialManager ( implicit db : Database ) extends Actor with ActorLogging with 
 
 if ( uniqUserIds . nonEmpty ) { 
 context . become ( working ( userIds + + uniqUserIds ) ) 
 - db . run ( persist . social . RelationRepo . create ( userId , uniqUserIds ) ) 
 + db . run ( RelationRepo . create ( userId , uniqUserIds ) ) 
 } 
 case env @ Envelope ( userId , RelationNoted ( notedUserId ) ) ⇒ 
 if ( ! userIds . contains ( notedUserId ) & & userId ! = notedUserId ) { 
 context . become ( working ( userIds + notedUserId ) ) 
 
 - db . run ( persist . social . RelationRepo . create ( userId , notedUserId ) ) 
 + db . run ( RelationRepo . create ( userId , notedUserId ) ) 
 } 
 case env @ Envelope ( userId , GetRelations ) ⇒ 
 sender ( ) ! Relations ( userIds ) 
 diff - - git a / actor - server / actor - enrich / src / main / scala / im / actor / server / enrich / UpdateHandler . scala b / actor - server / actor - enrich / src / main / scala / im / actor / server / enrich / UpdateHandler . scala 
 index 4a23bc4 . . 5af8f06 100644 
 - - - a / actor - server / actor - enrich / src / main / scala / im / actor / server / enrich / UpdateHandler . scala 
 + + + b / actor - server / actor - enrich / src / main / scala / im / actor / server / enrich / UpdateHandler . scala 
 @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . ActorSystem 
 import im . actor . api . rpc . Implicits . _ 
 import im . actor . api . rpc . messaging . { ApiMessage , UpdateMessageContentChanged } 
 import im . actor . server . model . { Peer , PeerType } 
 - import im . actor . server . persist 
 + import im . actor . server . persist . { GroupUserRepo , HistoryMessageRepo } 
 import im . actor . server . sequence . SeqState 
 import im . actor . server . user . UserExtension 
 import slick . dbio . _ 
 @ @ - 42 , 7 + 42 , 7 @ @ class PrivateHandler ( fromPeer : Peer , toPeer : Peer , randomId : Long ) ( implicit syst 
 ) 
 } yield Seq ( fromUpdate , toUpdate ) ) 
 
 - def handleDbUpdate ( message : ApiMessage ) : DBIO [ Int ] = persist . HistoryMessageRepo . updateContentAll ( 
 + def handleDbUpdate ( message : ApiMessage ) : DBIO [ Int ] = HistoryMessageRepo . updateContentAll ( 
 userIds = Set ( fromPeer . id , toPeer . id ) , 
 randomId = randomId , 
 peerType = PeerType . Private , 
 @ @ - 60 , 15 + 60 , 15 @ @ class GroupHandler ( groupPeer : Peer , randomId : Long ) ( implicit system : ActorSystem 
 def handleUpdate ( message : ApiMessage ) : DBIO [ Seq [ SeqState ] ] = { 
 val update = UpdateMessageContentChanged ( groupPeer . asStruct , randomId , message ) 
 for { 
 - usersIds ← persist . GroupUserRepo . findUserIds ( groupPeer . id ) 
 + usersIds ← GroupUserRepo . findUserIds ( groupPeer . id ) 
 seqstate ← DBIO . from ( UserExtension ( system ) . broadcastUsersUpdate ( usersIds . toSet , update , None , false , deliveryId = Some ( s " msgcontent _ $ { randomId } " ) ) ) 
 } yield seqstate 
 } 
 
 def handleDbUpdate ( message : ApiMessage ) : DBIO [ Int ] = 
 for { 
 - usersIds ← persist . GroupUserRepo . findUserIds ( groupPeer . id ) 
 - result ← persist . HistoryMessageRepo . updateContentAll ( 
 + usersIds ← GroupUserRepo . findUserIds ( groupPeer . id ) 
 + result ← HistoryMessageRepo . updateContentAll ( 
 userIds = usersIds . toSet , 
 randomId = randomId , 
 peerType = PeerType . Group , 
 diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / AuthorizationManager . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / AuthorizationManager . scala 
 index 28220ea . . a98024a 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / AuthorizationManager . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / AuthorizationManager . scala 
 @ @ - 14 , 7 + 14 , 6 @ @ import im . actor . server . db . DbExtension 
 import im . actor . server . mtproto . codecs . protocol . MessageBoxCodec 
 import im . actor . server . mtproto . protocol . _ 
 import im . actor . server . mtproto . transport . _ 
 - import im . actor . server . persist 
 import im . actor . server . persist . { AuthIdRepo , MasterKeyRepo } 
 import im . actor . util . misc . IdUtils 
 import im . actor . util . ThreadLocalSecureRandom 
 @ @ - 130 , 7 + 129 , 7 @ @ final class AuthorizationManager ( serverKeys : Seq [ ServerKey ] , sessionClient : Acto 
 val f = 
 if ( authId = = 0L ) { 
 authId = IdUtils . nextAuthId ( ThreadLocalSecureRandom . current ( ) ) 
 - db . run ( persist . AuthIdRepo . create ( authId , None , None ) ) 
 + db . run ( AuthIdRepo . create ( authId , None , None ) ) 
 } else Future . successful ( ( ) ) 
 
 f onComplete {

NEAREST DIFF:
diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / IlectroUser . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / IlectroUser . scala 
 deleted file mode 100644 
 index 189d99e . . 0000000 
 - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / IlectroUser . scala 
 + + + / dev / null 
 @ @ - 1 , 5 + 0 , 0 @ @ 
 - package im . actor . server . models . llectro 
 - 
 - import java . util . UUID 
 - 
 - case class LlectroUser ( userId : Int , uuid : UUID , name : String ) 
 diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / Interest . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / Interest . scala 
 deleted file mode 100644 
 index d5e361a . . 0000000 
 - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / Interest . scala 
 + + + / dev / null 
 @ @ - 1 , 3 + 0 , 0 @ @ 
 - package im . actor . server . models . llectro 
 - 
 - case class Interest ( id : Int , name : String , parentId : Int , fullPath : String , level : Int ) 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / LlectroDevice . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / LlectroDevice . scala 
 deleted file mode 100644 
 index 268056a . . 0000000 
 - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / LlectroDevice . scala 
 + + + / dev / null 
 @ @ - 1 , 3 + 0 , 0 @ @ 
 - package im . actor . server . models . llectro 
 - 
 - case class LlectroDevice ( authId : Long , screenWidth : Int , screenHeight : Int ) 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / UserInterest . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / UserInterest . scala 
 deleted file mode 100644 
 index 963e5df . . 0000000 
 - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / UserInterest . scala 
 + + + / dev / null 
 @ @ - 1 , 3 + 0 , 0 @ @ 
 - package im . actor . server . models . llectro 
 - 
 - case class UserInterest ( userId : Int , interestId : Int ) 
 \ No newline at end of file 
 diff - - git a / actor - server / bin / merge - to - master b / actor - server / bin / merge - to - master 
 new file mode 100755 
 index 0000000 . . 57bea44 
 - - - / dev / null 
 + + + b / actor - server / bin / merge - to - master 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + # ! / usr / bin / env bash 
 + 
 + set - eu 
 + 
 + git diff - index - - quiet - - cached HEAD 
 + 
 + if [ $ ? - eq 0 ] 
 + then 
 + git checkout master 
 + git pull - - rebase origin master 
 + git merge server / master 
 + git push origin master 
 + else 
 + echo " Branch is dirty " 
 + fi 
 diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala 
 index 0ae9ff5 . . 1d00c84 100644 
 - - - a / actor - server / project / Dependencies . scala 
 + + + b / actor - server / project / Dependencies . scala 
 @ @ - 38 , 7 + 38 , 6 @ @ object Dependencies { 
 
 val concmap = " com . googlecode . concurrentlinkedhashmap " % " concurrentlinkedhashmap - lru " % " 1 . 4 . 2 " 
 val caffeine = " com . github . ben - manes . caffeine " % " caffeine " % " 1 . 2 . 0 " 
 - val eaioUuid = " com . eaio . uuid " % " uuid " % " 3 . 4 " 
 
 val cats = " org . spire - math " % % " cats " % V . cats 
 
 @ @ - 166 , 7 + 165 , 7 @ @ object Dependencies { 
 
 val codecs = shared + + Seq ( scalazCore , scodecBits , scodecCore ) 
 
 - val models = shared + + Seq ( eaioUuid , scodecBits , scodecCore , jodaTime , jodaConvert , slickPg ) 
 + val models = shared + + Seq ( scodecBits , scodecCore , jodaTime , jodaConvert , slickPg ) 
 
 val frontend = shared + + Seq ( 
 akkaSlf4j , akkaActor , akkaStream ,
