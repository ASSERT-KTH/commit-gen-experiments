BLEU SCORE: 0.14258769764520748

TEST MSG: feat ( web ) : add loadBlockedUsers to facade
GENERATED MSG: feat ( js ) : Adding emails to JsUser

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index f214806 . . 0bd4b77 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 22 , 6 + 22 , 7 @ @ import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerSearchEntity ; < nl > import im . actor . core . entity . PeerSearchType ; < nl > import im . actor . core . entity . PeerType ; < nl > + import im . actor . core . entity . User ; < nl > import im . actor . core . js . annotations . UsedByApp ; < nl > import im . actor . core . js . entity . * ; < nl > import im . actor . core . js . modules . JsBindedValueCallback ; < nl > @ @ - 1030 , 6 + 1031 , 30 @ @ public class JsFacade implements Exportable { < nl > } < nl > < nl > @ UsedByApp < nl > + private JsPromise loadBlockedUsers ( ) { < nl > + return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > + @ Override < nl > + public void execute ( ) { < nl > + messenger . loadBlockedUsers ( ) . then ( new Consumer < List < User > > ( ) { < nl > + @ Override < nl > + public void apply ( List < User > users ) { < nl > + JsArray < JsUser > res = JsArray . createArray ( ) . cast ( ) ; < nl > + for ( User u : users ) { < nl > + res . push ( getUser ( u . getUid ( ) ) ) ; < nl > + } < nl > + resolve ( ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + reject ( ) ; < nl > + } < nl > + } ) . done ( JsPromiseDispatcher . INSTANCE ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ UsedByApp < nl > public void onChatEnd ( JsPeer peer ) { < nl > messenger . loadMoreHistory ( peer . convert ( ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java < nl > index 591ad8a . . 9ab4fbf 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java < nl > @ @ - 54 , 15 + 54 , 15 @ @ public class JsUser extends JavaScriptObject { < nl > fileUrl , bigFileUrl , < nl > Placeholders . getPlaceholder ( userVM . getId ( ) ) , < nl > userVM . isContact ( ) . get ( ) , userVM . isBot ( ) , < nl > - presenceString , isOnline , convertedPhones , convertedEmails ) ; < nl > + presenceString , isOnline , userVM . getIsBlocked ( ) . get ( ) , convertedPhones , convertedEmails ) ; < nl > } < nl > < nl > public static native JsUser create ( int id , String name , String nick , String about , < nl > String avatar , String bigAvatar , String placeholder , < nl > - boolean isContact , boolean isBot , String presence , boolean isOnline , JsArray < JsPhone > phones , < nl > + boolean isContact , boolean isBot , String presence , boolean isOnline , boolean isBlocked , JsArray < JsPhone > phones , < nl > JsArray < JsEmail > emails ) / * - { < nl > return { id : id , name : name , nick : nick , about : about , avatar : avatar , bigAvatar : bigAvatar , placeholder : placeholder , < nl > - isContact : isContact , isBot : isBot , presence : presence , isOnline : isOnline , phones : phones , emails : emails } ; < nl > + isContact : isContact , isBot : isBot , presence : presence , isOnline : isOnline , isBlocked : isBlocked , phones : phones , emails : emails } ; < nl > } - * / ; < nl > < nl > protected JsUser ( ) { < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromiseDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromiseDispatcher . java < nl > index d8f115b . . f09f9f7 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromiseDispatcher . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromiseDispatcher . java < nl > @ @ - 12 , 6 + 12 , 6 @ @ public class JsPromiseDispatcher extends PromiseDispatcher { < nl > < nl > @ Override < nl > public void dispatch ( Promise promise , Runnable runnable ) { < nl > - < nl > + runnable . run ( ) ; < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsEmail . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsEmail . java < nl > new file mode 100644 < nl > index 0000000 . . 39aa959 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsEmail . java < nl > @ @ - 0 , 0 + 1 , 14 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsEmail extends JavaScriptObject { < nl > + < nl > + public native static JsEmail create ( String email , String title ) / * - { < nl > + return { email : email , title : title } ; < nl > + } - * / ; < nl > + < nl > + protected JsEmail ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java < nl > index 603f76d . . 76eec0a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java < nl > @ @ - 9 , 9 + 9 , 11 @ @ import com . google . gwt . core . client . JsArray ; < nl > < nl > import im . actor . core . entity . Avatar ; < nl > import im . actor . core . js . JsMessenger ; < nl > + import im . actor . core . viewmodel . UserEmail ; < nl > import im . actor . core . viewmodel . UserPhone ; < nl > import im . actor . core . viewmodel . UserPresence ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > + import im . actor . core . viewmodel . generics . ArrayListUserEmail ; < nl > import im . actor . core . viewmodel . generics . ArrayListUserPhone ; < nl > < nl > public class JsUser extends JavaScriptObject { < nl > @ @ - 36 , 19 + 38 , 26 @ @ public class JsUser extends JavaScriptObject { < nl > convertedPhones . push ( JsPhone . create ( p . getPhone ( ) + " " , p . getTitle ( ) ) ) ; < nl > } < nl > < nl > + JsArray < JsEmail > convertedEmails = JsArray . createArray ( ) . cast ( ) ; < nl > + ArrayListUserEmail emails = userVM . getEmails ( ) . get ( ) ; < nl > + for ( UserEmail p : emails ) { < nl > + convertedEmails . push ( JsEmail . create ( p . getEmail ( ) , p . getTitle ( ) ) ) ; < nl > + } < nl > + < nl > return create ( userVM . getId ( ) , userVM . getName ( ) . get ( ) , userVM . getNick ( ) . get ( ) , < nl > userVM . getAbout ( ) . get ( ) , < nl > fileUrl , bigFileUrl , < nl > Placeholders . getPlaceholder ( userVM . getId ( ) ) , < nl > userVM . isContact ( ) . get ( ) , userVM . isBot ( ) , < nl > - presenceString , convertedPhones ) ; < nl > + presenceString , convertedPhones , convertedEmails ) ; < nl > } < nl > < nl > public static native JsUser create ( int id , String name , String nick , String about , < nl > String avatar , String bigAvatar , String placeholder , < nl > - boolean isContact , boolean isBot , String presence , JsArray < JsPhone > phones ) / * - { < nl > + boolean isContact , boolean isBot , String presence , JsArray < JsPhone > phones , < nl > + JsArray < JsEmail > emails ) / * - { < nl > return { id : id , name : name , nick : nick , about : about , avatar : avatar , bigAvatar : bigAvatar , placeholder : placeholder , < nl > - isContact : isContact , presence : presence , phones : phones } ; < nl > + isContact : isContact , presence : presence , phones : phones , emails : emails } ; < nl > } - * / ; < nl > < nl > protected JsUser ( ) {

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index f214806 . . 0bd4b77 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerSearchEntity ; 
 import im . actor . core . entity . PeerSearchType ; 
 import im . actor . core . entity . PeerType ; 
 + import im . actor . core . entity . User ; 
 import im . actor . core . js . annotations . UsedByApp ; 
 import im . actor . core . js . entity . * ; 
 import im . actor . core . js . modules . JsBindedValueCallback ; 
 @ @ - 1030 , 6 + 1031 , 30 @ @ public class JsFacade implements Exportable { 
 } 
 
 @ UsedByApp 
 + private JsPromise loadBlockedUsers ( ) { 
 + return JsPromise . create ( new JsPromiseExecutor ( ) { 
 + @ Override 
 + public void execute ( ) { 
 + messenger . loadBlockedUsers ( ) . then ( new Consumer < List < User > > ( ) { 
 + @ Override 
 + public void apply ( List < User > users ) { 
 + JsArray < JsUser > res = JsArray . createArray ( ) . cast ( ) ; 
 + for ( User u : users ) { 
 + res . push ( getUser ( u . getUid ( ) ) ) ; 
 + } 
 + resolve ( ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + reject ( ) ; 
 + } 
 + } ) . done ( JsPromiseDispatcher . INSTANCE ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ UsedByApp 
 public void onChatEnd ( JsPeer peer ) { 
 messenger . loadMoreHistory ( peer . convert ( ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java 
 index 591ad8a . . 9ab4fbf 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java 
 @ @ - 54 , 15 + 54 , 15 @ @ public class JsUser extends JavaScriptObject { 
 fileUrl , bigFileUrl , 
 Placeholders . getPlaceholder ( userVM . getId ( ) ) , 
 userVM . isContact ( ) . get ( ) , userVM . isBot ( ) , 
 - presenceString , isOnline , convertedPhones , convertedEmails ) ; 
 + presenceString , isOnline , userVM . getIsBlocked ( ) . get ( ) , convertedPhones , convertedEmails ) ; 
 } 
 
 public static native JsUser create ( int id , String name , String nick , String about , 
 String avatar , String bigAvatar , String placeholder , 
 - boolean isContact , boolean isBot , String presence , boolean isOnline , JsArray < JsPhone > phones , 
 + boolean isContact , boolean isBot , String presence , boolean isOnline , boolean isBlocked , JsArray < JsPhone > phones , 
 JsArray < JsEmail > emails ) / * - { 
 return { id : id , name : name , nick : nick , about : about , avatar : avatar , bigAvatar : bigAvatar , placeholder : placeholder , 
 - isContact : isContact , isBot : isBot , presence : presence , isOnline : isOnline , phones : phones , emails : emails } ; 
 + isContact : isContact , isBot : isBot , presence : presence , isOnline : isOnline , isBlocked : isBlocked , phones : phones , emails : emails } ; 
 } - * / ; 
 
 protected JsUser ( ) { 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromiseDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromiseDispatcher . java 
 index d8f115b . . f09f9f7 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromiseDispatcher . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromiseDispatcher . java 
 @ @ - 12 , 6 + 12 , 6 @ @ public class JsPromiseDispatcher extends PromiseDispatcher { 
 
 @ Override 
 public void dispatch ( Promise promise , Runnable runnable ) { 
 - 
 + runnable . run ( ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsEmail . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsEmail . java 
 new file mode 100644 
 index 0000000 . . 39aa959 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsEmail . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsEmail extends JavaScriptObject { 
 + 
 + public native static JsEmail create ( String email , String title ) / * - { 
 + return { email : email , title : title } ; 
 + } - * / ; 
 + 
 + protected JsEmail ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java 
 index 603f76d . . 76eec0a 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java 
 @ @ - 9 , 9 + 9 , 11 @ @ import com . google . gwt . core . client . JsArray ; 
 
 import im . actor . core . entity . Avatar ; 
 import im . actor . core . js . JsMessenger ; 
 + import im . actor . core . viewmodel . UserEmail ; 
 import im . actor . core . viewmodel . UserPhone ; 
 import im . actor . core . viewmodel . UserPresence ; 
 import im . actor . core . viewmodel . UserVM ; 
 + import im . actor . core . viewmodel . generics . ArrayListUserEmail ; 
 import im . actor . core . viewmodel . generics . ArrayListUserPhone ; 
 
 public class JsUser extends JavaScriptObject { 
 @ @ - 36 , 19 + 38 , 26 @ @ public class JsUser extends JavaScriptObject { 
 convertedPhones . push ( JsPhone . create ( p . getPhone ( ) + " " , p . getTitle ( ) ) ) ; 
 } 
 
 + JsArray < JsEmail > convertedEmails = JsArray . createArray ( ) . cast ( ) ; 
 + ArrayListUserEmail emails = userVM . getEmails ( ) . get ( ) ; 
 + for ( UserEmail p : emails ) { 
 + convertedEmails . push ( JsEmail . create ( p . getEmail ( ) , p . getTitle ( ) ) ) ; 
 + } 
 + 
 return create ( userVM . getId ( ) , userVM . getName ( ) . get ( ) , userVM . getNick ( ) . get ( ) , 
 userVM . getAbout ( ) . get ( ) , 
 fileUrl , bigFileUrl , 
 Placeholders . getPlaceholder ( userVM . getId ( ) ) , 
 userVM . isContact ( ) . get ( ) , userVM . isBot ( ) , 
 - presenceString , convertedPhones ) ; 
 + presenceString , convertedPhones , convertedEmails ) ; 
 } 
 
 public static native JsUser create ( int id , String name , String nick , String about , 
 String avatar , String bigAvatar , String placeholder , 
 - boolean isContact , boolean isBot , String presence , JsArray < JsPhone > phones ) / * - { 
 + boolean isContact , boolean isBot , String presence , JsArray < JsPhone > phones , 
 + JsArray < JsEmail > emails ) / * - { 
 return { id : id , name : name , nick : nick , about : about , avatar : avatar , bigAvatar : bigAvatar , placeholder : placeholder , 
 - isContact : isContact , presence : presence , phones : phones } ; 
 + isContact : isContact , presence : presence , phones : phones , emails : emails } ; 
 } - * / ; 
 
 protected JsUser ( ) {
