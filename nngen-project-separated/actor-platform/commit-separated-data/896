BLEU SCORE: 0.03882110458693121

TEST MSG: feat ( webrtc ) : Added call answering support
GENERATED MSG: fix ( core ) : Fixing compilation error , implemented missing method in bser , implemented typing cancelling

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json < nl > index c585341 . . 1c709b0 100644 < nl > - - - a / actor - sdk / sdk - api / actor . json < nl > + + + b / actor - sdk / sdk - api / actor . json < nl > @ @ - 12852 , 6 + 12852 , 20 @ @ < nl > } < nl > ] < nl > } < nl > + } , < nl > + { < nl > + " type " : " struct " , < nl > + " content " : { < nl > + " name " : " SwitchMaster " , < nl > + " doc " : [ < nl > + " Switching master node " < nl > + ] , < nl > + " trait " : { < nl > + " name " : " WebRTCSignaling " , < nl > + " key " : 9 < nl > + } , < nl > + " attributes " : [ ] < nl > + } < nl > } < nl > ] < nl > } , < nl > diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > index aab1775 . . cbcadf9 100644 < nl > - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > @ @ - 11044 , 6 + 11044 , 18 @ @ < nl > < ref role = " NX6Kv " node = " 3Tolai5NVBR " resolve = " device " / > < nl > < / node > < nl > < / node > < nl > + < node concept = " 2m5naR " id = " 3Tolai5ObtG " role = " 2m5mJr " > < nl > + < property role = " TrG5h " value = " SwitchMaster " / > < nl > + < property role = " tsOgz " value = " false " / > < nl > + < property role = " w4tQU " value = " true " / > < nl > + < ref role = " w4 $ XZ " node = " 3Tolai5NMKi " resolve = " WebRTCSignaling " / > < nl > + < node concept = " Nu42z " id = " 3Tolai5ObvS " role = " 3BtCOu " > < nl > + < property role = " Nu42W " value = " 09 " / > < nl > + < / node > < nl > + < node concept = " NXeRC " id = " 3Tolai5OcxF " role = " NXodf " > < nl > + < property role = " NXePf " value = " Switching master node " / > < nl > + < / node > < nl > + < / node > < nl > < node concept = " 1Dx9M1 " id = " 6tgpW9bxpK8 " role = " 1Dx9rD " > < nl > < property role = " 1Dx9K7 " value = " WebRTC package that enables support to audio and video calls " / > < nl > < / node > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiSwitchMaster . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiSwitchMaster . java < nl > new file mode 100644 < nl > index 0000000 . . ff3b8ac < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiSwitchMaster . java < nl > @ @ - 0 , 0 + 1 , 43 @ @ < nl > + package im . actor . core . api ; < nl > + / * < nl > + * Generated by the Actor API Scheme generator . DO NOT EDIT ! < nl > + * / < nl > + < nl > + import im . actor . runtime . bser . * ; < nl > + import im . actor . runtime . collections . * ; < nl > + import static im . actor . runtime . bser . Utils . * ; < nl > + import im . actor . core . network . parser . * ; < nl > + import org . jetbrains . annotations . Nullable ; < nl > + import org . jetbrains . annotations . NotNull ; < nl > + import com . google . j2objc . annotations . ObjectiveCName ; < nl > + import java . io . IOException ; < nl > + import java . util . List ; < nl > + import java . util . ArrayList ; < nl > + < nl > + public class ApiSwitchMaster extends ApiWebRTCSignaling { < nl > + < nl > + < nl > + public ApiSwitchMaster ( ) { < nl > + < nl > + } < nl > + < nl > + public int getHeader ( ) { < nl > + return 9 ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + } < nl > + < nl > + @ Override < nl > + public String toString ( ) { < nl > + String res = " struct SwitchMaster { " ; < nl > + res + = " } " ; < nl > + return res ; < nl > + } < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiWebRTCSignaling . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiWebRTCSignaling . java < nl > index 4c4a188 . . fcb0a84 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiWebRTCSignaling . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiWebRTCSignaling . java < nl > @ @ - 28 , 6 + 28 , 7 @ @ public abstract class ApiWebRTCSignaling extends BserObject { < nl > case 6 : return Bser . parse ( new ApiNeedRenegotiate ( ) , content ) ; < nl > case 7 : return Bser . parse ( new ApiActiveDevices ( ) , content ) ; < nl > case 8 : return Bser . parse ( new ApiNeedOffer ( ) , content ) ; < nl > + case 9 : return Bser . parse ( new ApiSwitchMaster ( ) , content ) ; < nl > default : return new ApiWebRTCSignalingUnsupported ( key , content ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > index a003cbf . . b103880 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > @ @ - 51 , 6 + 51 , 24 @ @ public class CallActor extends EventBusActor { < nl > } < nl > } < nl > < nl > + public final void sendSignalingMessage ( int uid , ApiWebRTCSignaling signaling ) { < nl > + try { < nl > + sendMessage ( uid , signaling . buildContainer ( ) ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + / / Ignore < nl > + } < nl > + } < nl > + < nl > + public final void sendSignalingMessage ( ApiWebRTCSignaling signaling ) { < nl > + try { < nl > + sendMessage ( signaling . buildContainer ( ) ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + / / Ignore < nl > + } < nl > + } < nl > + < nl > @ Override < nl > public final void onMessageReceived ( @ Nullable Integer senderId , @ Nullable Long senderDeviceId , byte [ ] data ) { < nl > if ( senderId = = null | | senderDeviceId = = null ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > index f9c6ac5 . . 28b26d5 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > @ @ - 71 , 7 + 71 , 7 @ @ public class CallManagerActor extends ModuleActor { < nl > / / Incoming call < nl > / / < nl > < nl > - private void onIncomingCall ( long callId ) { < nl > + private void onIncomingCall ( final long callId ) { < nl > Log . d ( TAG , " onIncomingCall ( " + callId + " ) " ) ; < nl > < nl > / / Filter double updates about incoming call < nl > @ @ - 80 , 22 + 80 , 13 @ @ public class CallManagerActor extends ModuleActor { < nl > } < nl > handledCalls . add ( callId ) ; < nl > < nl > - api ( new RequestGetCallInfo ( callId ) ) . then ( new Consumer < ResponseGetCallInfo > ( ) { < nl > + currentCalls . put ( callId , system ( ) . actorOf ( " actor / slave " , new ActorCreator ( ) { < nl > @ Override < nl > - public void apply ( final ResponseGetCallInfo responseGetCallInfo ) { < nl > - system ( ) . actorOf ( " actor / slave " , new ActorCreator ( ) { < nl > - @ Override < nl > - public Actor create ( ) { < nl > - return new CallSlaveActor ( responseGetCallInfo . getEventBusId ( ) , context ( ) ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) . failure ( new Consumer < Exception > ( ) { < nl > - @ Override < nl > - public void apply ( Exception e ) { < nl > - / / Just Ignore < nl > + public Actor create ( ) { < nl > + return new CallSlaveActor ( callId , context ( ) ) ; < nl > } < nl > - } ) . done ( self ( ) ) ; < nl > + } ) ) ; < nl > + provider . onCallStart ( callId ) ; < nl > } < nl > < nl > private void onIncomingCallHandled ( long callId ) { < nl > @ @ - 105 , 7 + 96 , 7 @ @ public class CallManagerActor extends ModuleActor { < nl > } < nl > < nl > private void doAnswerCall ( final long callId ) { < nl > - < nl > + answeredCalls . add ( callId ) ; < nl > } < nl > < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > index 9baf63b . . d98c2e1 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > @ @ - 2 , 7 + 2 , 10 @ @ package im . actor . core . modules . calls ; < nl > < nl > import java . util . ArrayList ; < nl > < nl > + import im . actor . core . api . ApiAnswerCall ; < nl > import im . actor . core . api . ApiNeedOffer ; < nl > + import im . actor . core . api . ApiSwitchMaster ; < nl > + import im . actor . core . api . ApiWebRTCSignaling ; < nl > import im . actor . core . api . rpc . RequestDoCall ; < nl > import im . actor . core . api . rpc . ResponseDoCall ; < nl > import im . actor . core . entity . CallState ; < nl > @ @ - 56 , 16 + 59 , 25 @ @ public class CallMasterActor extends CallActor { < nl > } < nl > < nl > @ Override < nl > - public void onDeviceConnected ( final int uid , final long deviceId ) { < nl > - ConnectedHolder connectedHolder = new ConnectedHolder ( uid , deviceId ) ; < nl > - if ( connectedDevices . contains ( connectedHolder ) ) { < nl > - return ; < nl > - } < nl > - getPeer ( uid , deviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; < nl > - for ( ConnectedHolder c : connectedDevices ) { < nl > - sendSignalingMessage ( c . uid , c . deviceId , new ApiNeedOffer ( uid , deviceId ) ) ; < nl > + public void onDeviceConnected ( int uid , long deviceId ) { < nl > + sendSignalingMessage ( uid , deviceId , new ApiSwitchMaster ( ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { < nl > + if ( signaling instanceof ApiAnswerCall ) { < nl > + ConnectedHolder connectedHolder = new ConnectedHolder ( fromUid , fromDeviceId ) ; < nl > + if ( connectedDevices . contains ( connectedHolder ) ) { < nl > + return ; < nl > + } < nl > + getPeer ( fromUid , fromDeviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; < nl > + for ( ConnectedHolder c : connectedDevices ) { < nl > + sendSignalingMessage ( c . uid , c . deviceId , new ApiNeedOffer ( fromUid , fromDeviceId ) ) ; < nl > + } < nl > + connectedDevices . add ( connectedHolder ) ; < nl > + } else { < nl > + super . onSignalingMessage ( fromUid , fromDeviceId , signaling ) ; < nl > } < nl > - connectedDevices . add ( connectedHolder ) ; < nl > } < nl > < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > index 78d5968 . . 6f02abf 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > @ @ - 1 , 35 + 1 , 112 @ @ < nl > package im . actor . core . modules . calls ; < nl > < nl > + import im . actor . core . api . ApiAnswerCall ; < nl > import im . actor . core . api . ApiNeedOffer ; < nl > + import im . actor . core . api . ApiSwitchMaster ; < nl > import im . actor . core . api . ApiWebRTCSignaling ; < nl > + import im . actor . core . api . rpc . RequestGetCallInfo ; < nl > + import im . actor . core . api . rpc . ResponseGetCallInfo ; < nl > import im . actor . core . modules . ModuleContext ; < nl > - import im . actor . runtime . Log ; < nl > + import im . actor . runtime . function . Consumer ; < nl > < nl > public class CallSlaveActor extends CallActor { < nl > < nl > - private static final String TAG = " CallSlaveActor " ; < nl > + private MasterNode masterNode ; < nl > + private boolean isAnswerPending = false ; < nl > + private long callId ; < nl > < nl > - private final String busId ; < nl > - < nl > - public CallSlaveActor ( String busId , ModuleContext context ) { < nl > + public CallSlaveActor ( long callId , ModuleContext context ) { < nl > super ( context ) ; < nl > - this . busId = busId ; < nl > + this . callId = callId ; < nl > } < nl > < nl > @ Override < nl > public void preStart ( ) { < nl > super . preStart ( ) ; < nl > - joinBus ( busId ) ; < nl > + api ( new RequestGetCallInfo ( callId ) ) . then ( new Consumer < ResponseGetCallInfo > ( ) { < nl > + @ Override < nl > + public void apply ( final ResponseGetCallInfo responseGetCallInfo ) { < nl > + joinBus ( responseGetCallInfo . getEventBusId ( ) ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + shutdown ( ) ; < nl > + } < nl > + } ) . done ( self ( ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onBusStarted ( ) { < nl > + super . onBusStarted ( ) ; < nl > + } < nl > + < nl > + public void onMasterNodeChanged ( int fromUid , long fromDeviceId ) { < nl > + masterNode = new MasterNode ( fromUid , fromDeviceId ) ; < nl > + if ( isAnswerPending ) { < nl > + isAnswerPending = false ; < nl > + sendSignalingMessage ( masterNode . getUid ( ) , masterNode . getDeviceId ( ) , new ApiAnswerCall ( ) ) ; < nl > + } < nl > + } < nl > + < nl > + public void onNeedOffer ( int destUid , long destDeviceId ) { < nl > + getPeer ( destUid , destDeviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; < nl > + } < nl > + < nl > + public void doAnswer ( ) { < nl > + if ( masterNode = = null ) { < nl > + isAnswerPending = true ; < nl > + } else { < nl > + sendSignalingMessage ( masterNode . getUid ( ) , masterNode . getDeviceId ( ) , new ApiAnswerCall ( ) ) ; < nl > + } < nl > } < nl > < nl > + < nl > + / / < nl > + / / Messages < nl > + / / < nl > + < nl > @ Override < nl > public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { < nl > if ( signaling instanceof ApiNeedOffer ) { < nl > ApiNeedOffer needOffer = ( ApiNeedOffer ) signaling ; < nl > - Log . w ( TAG , " Need offer for : " + needOffer . getUid ( ) ) ; < nl > - getPeer ( needOffer . getUid ( ) , needOffer . getDevice ( ) ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; < nl > + onNeedOffer ( needOffer . getUid ( ) , needOffer . getDevice ( ) ) ; < nl > + } else if ( signaling instanceof ApiSwitchMaster ) { < nl > + onMasterNodeChanged ( fromUid , fromDeviceId ) ; < nl > } else { < nl > super . onSignalingMessage ( fromUid , fromDeviceId , signaling ) ; < nl > } < nl > } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof DoAnswer ) { < nl > + doAnswer ( ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > + } < nl > + } < nl > + < nl > + private class MasterNode { < nl > + < nl > + private int uid ; < nl > + private long deviceId ; < nl > + < nl > + public MasterNode ( int uid , long deviceId ) { < nl > + this . uid = uid ; < nl > + this . deviceId = deviceId ; < nl > + } < nl > + < nl > + public int getUid ( ) { < nl > + return uid ; < nl > + } < nl > + < nl > + public long getDeviceId ( ) { < nl > + return deviceId ; < nl > + } < nl > + } < nl > + < nl > + public static class DoAnswer { < nl > + < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusActor . java < nl > index 8621a03 . . 8cf9119 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusActor . java < nl > @ @ - 130 , 6 + 130 , 16 @ @ public class EventBusActor extends ModuleActor { < nl > < nl > } < nl > < nl > + public void sendMessage ( byte [ ] data ) { < nl > + request ( new RequestPostToEventBus ( busId , new ArrayList < ApiEventBusDestination > ( ) , data ) ) ; < nl > + } < nl > + < nl > + public void sendMessage ( int uid , byte [ ] data ) { < nl > + ArrayList < ApiEventBusDestination > destinations = new ArrayList < > ( ) ; < nl > + destinations . add ( new ApiEventBusDestination ( uid , new ArrayList < Long > ( ) ) ) ; < nl > + request ( new RequestPostToEventBus ( busId , destinations , data ) ) ; < nl > + } < nl > + < nl > public void sendMessage ( int uid , long deviceId , byte [ ] data ) { < nl > ArrayList < ApiEventBusDestination > destinations = new ArrayList < > ( ) ; < nl > ArrayList < Long > deviceIds = new ArrayList < > ( ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java < nl > index c40389e . . 24f4755 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java < nl > @ @ - 73 , 7 + 73 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > return ; < nl > } < nl > < nl > - / / Log . d ( TAG , " Processing weak update : " + update ) ; < nl > + Log . d ( TAG , " Processing weak update : " + update ) ; < nl > this . processor . processWeakUpdate ( update , date ) ; < nl > } < nl > < nl > @ @ - 196 , 7 + 196 , 6 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > < nl > @ Override < nl > public void onReceive ( Object message ) { < nl > - Log . d ( TAG , " Processing onReceive : " + message ) ; < nl > if ( message instanceof WeakUpdate ) { < nl > WeakUpdate weakUpdate = ( WeakUpdate ) message ; < nl > try {
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > index fb24226 . . 779750d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > @ @ - 150 , 7 + 150 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { < nl > w . isBot ( ) , < nl > w . getNick ( ) , < nl > w . getAbout ( ) , < nl > - w . getExternal ( ) ) ; < nl > + w . getExternal ( ) , < nl > + w . getPreferredLanguages ( ) , < nl > + w . getTimeZone ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new User ( res ) ; < nl > } < nl > @ @ - 168 , 7 + 170 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { < nl > w . isBot ( ) , < nl > w . getNick ( ) , < nl > w . getAbout ( ) , < nl > - w . getExternal ( ) ) ; < nl > + w . getExternal ( ) , < nl > + w . getPreferredLanguages ( ) , < nl > + w . getTimeZone ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new User ( res ) ; < nl > } < nl > @ @ - 186 , 7 + 190 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { < nl > w . isBot ( ) , < nl > nick , < nl > w . getAbout ( ) , < nl > - w . getExternal ( ) ) ; < nl > + w . getExternal ( ) , < nl > + w . getPreferredLanguages ( ) , < nl > + w . getTimeZone ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new User ( res ) ; < nl > } < nl > @ @ - 204 , 7 + 210 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { < nl > w . isBot ( ) , < nl > w . getNick ( ) , < nl > about , < nl > - w . getExternal ( ) ) ; < nl > + w . getExternal ( ) , < nl > + w . getPreferredLanguages ( ) , < nl > + w . getTimeZone ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new User ( res ) ; < nl > } < nl > @ @ - 222 , 7 + 230 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { < nl > w . isBot ( ) , < nl > w . getNick ( ) , < nl > w . getAbout ( ) , < nl > - w . getExternal ( ) ) ; < nl > + w . getExternal ( ) , < nl > + w . getPreferredLanguages ( ) , < nl > + w . getTimeZone ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new User ( res ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java < nl > index 2f83c05 . . 8a0b75a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java < nl > @ @ - 118 , 7 + 118 , 8 @ @ public class Authentication { < nl > apiConfiguration . getAppId ( ) , < nl > apiConfiguration . getAppKey ( ) , < nl > deviceHash , < nl > - apiConfiguration . getDeviceTitle ( ) < nl > + apiConfiguration . getDeviceTitle ( ) , < nl > + null , new ArrayList < String > ( ) < nl > ) , new RpcCallback < ResponseStartEmailAuth > ( ) { < nl > @ Override < nl > public void onResult ( ResponseStartEmailAuth response ) { < nl > @ @ - 163 , 7 + 164 , 8 @ @ public class Authentication { < nl > apiConfiguration . getAppId ( ) , < nl > apiConfiguration . getAppKey ( ) , < nl > deviceHash , < nl > - apiConfiguration . getDeviceTitle ( ) < nl > + apiConfiguration . getDeviceTitle ( ) , < nl > + null , new ArrayList < String > ( ) < nl > ) , new RpcCallback < ResponseStartPhoneAuth > ( ) { < nl > @ Override < nl > public void onResult ( ResponseStartPhoneAuth response ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index 11630f1 . . bfbd171 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 288 , 6 + 288 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > < nl > public void sendMessage ( @ NotNull Peer peer , @ NotNull String message , @ Nullable String markDownText , < nl > @ Nullable ArrayList < Integer > mentions , boolean autoDetect ) { < nl > + / / Notify typing about message sent < nl > + context ( ) . getTypingModule ( ) . onMessageSent ( peer ) ; < nl > sendMessageActor . send ( new SenderActor . SendText ( peer , message , markDownText , mentions , < nl > autoDetect ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java < nl > index 72ce08e . . c867fb0 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java < nl > @ @ - 51 , 6 + 51 , 10 @ @ public class TypingModule extends AbsModule { < nl > ownTypingActor . send ( new OwnTypingActor . Typing ( peer ) ) ; < nl > } < nl > < nl > + public void onMessageSent ( Peer peer ) { < nl > + ownTypingActor . send ( new OwnTypingActor . MessageSent ( peer ) ) ; < nl > + } < nl > + < nl > public void resetModule ( ) { < nl > / / TODO : Implement < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java < nl > index 341880a . . faf08d0 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java < nl > @ @ - 6 , 6 + 6 , 7 @ @ package im . actor . core . modules . internal . typing ; < nl > < nl > import im . actor . core . api . ApiOutPeer ; < nl > import im . actor . core . api . ApiTypingType ; < nl > + import im . actor . core . api . rpc . RequestStopTyping ; < nl > import im . actor . core . api . rpc . RequestTyping ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . modules . ModuleContext ; < nl > @ @ - 30 , 9 + 31 , 12 @ @ public class OwnTypingActor extends ModuleActor { < nl > } < nl > < nl > private static final long TYPING _ DELAY = 3000L ; < nl > + private static final long TYPING _ CANCEL _ DELAY = 4000L ; < nl > < nl > private long lastTypingTime = 0 ; < nl > < nl > + private long prevRid = 0 ; < nl > + < nl > @ Verified < nl > public OwnTypingActor ( ModuleContext messenger ) { < nl > super ( messenger ) ; < nl > @ @ - 50 , 7 + 54 , 31 @ @ public class OwnTypingActor extends ModuleActor { < nl > return ; < nl > } < nl > < nl > - request ( new RequestTyping ( outPeer , ApiTypingType . TEXT ) ) ; < nl > + cancelPrevRequest ( ) ; < nl > + prevRid = request ( new RequestTyping ( outPeer , ApiTypingType . TEXT ) ) ; < nl > + self ( ) . sendOnce ( new AbortTyping ( peer ) , TYPING _ CANCEL _ DELAY ) ; < nl > + } < nl > + < nl > + private void onMessageSent ( Peer peer ) { < nl > + cancelPrevRequest ( ) ; < nl > + lastTypingTime = 0 ; < nl > + self ( ) . sendOnce ( new AbortTyping ( peer ) , 24 * 60 * 60 * 1000L ) ; < nl > + } < nl > + < nl > + private void onAbortTyping ( Peer peer ) { < nl > + ApiOutPeer outPeer = buidOutPeer ( peer ) ; < nl > + if ( outPeer = = null ) { < nl > + return ; < nl > + } < nl > + cancelPrevRequest ( ) ; < nl > + prevRid = request ( new RequestStopTyping ( outPeer , ApiTypingType . TEXT ) ) ; < nl > + } < nl > + < nl > + private void cancelPrevRequest ( ) { < nl > + if ( prevRid ! = 0 ) { < nl > + cancelRequest ( prevRid ) ; < nl > + prevRid = 0 ; < nl > + } < nl > } < nl > < nl > / / Messages < nl > @ @ - 59 , 11 + 87 , 27 @ @ public class OwnTypingActor extends ModuleActor { < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof Typing ) { < nl > onTyping ( ( ( Typing ) message ) . getPeer ( ) ) ; < nl > + } else if ( message instanceof MessageSent ) { < nl > + onMessageSent ( ( ( MessageSent ) message ) . getPeer ( ) ) ; < nl > + } else if ( message instanceof AbortTyping ) { < nl > + onAbortTyping ( ( ( AbortTyping ) message ) . getPeer ( ) ) ; < nl > } else { < nl > drop ( message ) ; < nl > } < nl > } < nl > < nl > + private static class AbortTyping { < nl > + private Peer peer ; < nl > + < nl > + public AbortTyping ( Peer peer ) { < nl > + this . peer = peer ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + } < nl > + < nl > public static class Typing { < nl > private Peer peer ; < nl > < nl > @ @ - 75 , 4 + 119 , 17 @ @ public class OwnTypingActor extends ModuleActor { < nl > return peer ; < nl > } < nl > } < nl > + < nl > + public static class MessageSent { < nl > + < nl > + private Peer peer ; < nl > + < nl > + public MessageSent ( Peer peer ) { < nl > + this . peer = peer ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java < nl > index ace0a50 . . 674756e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java < nl > @ @ - 32 , 8 + 32 , 18 @ @ public class TypingProcessor extends AbsModule { < nl > } < nl > } < nl > < nl > + @ Verified < nl > public void onTypingStop ( ApiPeer peer , int uid , ApiTypingType typingType ) { < nl > - < nl > + / / Other types are unsupported < nl > + / / TODO : Move to Actor < nl > + if ( typingType ! = ApiTypingType . TEXT ) { < nl > + return ; < nl > + } < nl > + if ( peer . getType ( ) = = ApiPeerType . PRIVATE ) { < nl > + typingActor . sendOnce ( new TypingActor . StopTyping ( uid ) ) ; < nl > + } else if ( peer . getType ( ) = = ApiPeerType . GROUP ) { < nl > + typingActor . sendOnce ( new TypingActor . StopGroupTyping ( peer . getId ( ) , uid ) ) ; < nl > + } < nl > } < nl > < nl > @ Verified < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > index 8a2998c . . ab71f3a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > @ @ - 40 , 6 + 40 , 7 @ @ import im . actor . core . api . updates . UpdateMessageReceived ; < nl > import im . actor . core . api . updates . UpdateMessageSent ; < nl > import im . actor . core . api . updates . UpdateParameterChanged ; < nl > import im . actor . core . api . updates . UpdateTyping ; < nl > + import im . actor . core . api . updates . UpdateTypingStop ; < nl > import im . actor . core . api . updates . UpdateUserLastSeen ; < nl > import im . actor . core . api . updates . UpdateUserLocalNameChanged ; < nl > import im . actor . core . api . updates . UpdateUserOffline ; < nl > @ @ - 198 , 6 + 199 , 9 @ @ public class UpdateProcessor extends AbsModule { < nl > } else if ( update instanceof UpdateTyping ) { < nl > UpdateTyping typing = ( UpdateTyping ) update ; < nl > typingProcessor . onTyping ( typing . getPeer ( ) , typing . getUid ( ) , typing . getTypingType ( ) ) ; < nl > + } else if ( update instanceof UpdateTypingStop ) { < nl > + UpdateTypingStop typing = ( UpdateTypingStop ) update ; < nl > + typingProcessor . onTypingStop ( typing . getPeer ( ) , typing . getUid ( ) , typing . getTypingType ( ) ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java < nl > index 67b681e . . 072af9f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java < nl > @ @ - 130 , 8 + 130 , 8 @ @ public class ModuleActor extends Actor implements BusSubscriber { < nl > return context ; < nl > } < nl > < nl > - public < T extends Response > void request ( Request < T > request ) { < nl > - request ( request , new RpcCallback < T > ( ) { < nl > + public < T extends Response > long request ( Request < T > request ) { < nl > + return request ( request , new RpcCallback < T > ( ) { < nl > @ Override < nl > public void onResult ( T response ) { < nl > < nl > @ @ - 144 , 8 + 144 , 8 @ @ public class ModuleActor extends Actor implements BusSubscriber { < nl > } ) ; < nl > } < nl > < nl > - public < T extends Response > void request ( final Request < T > request , final RpcCallback < T > callback ) { < nl > - context . getActorApi ( ) . request ( request , new RpcCallback < T > ( ) { < nl > + public < T extends Response > long request ( final Request < T > request , final RpcCallback < T > callback ) { < nl > + return context . getActorApi ( ) . request ( request , new RpcCallback < T > ( ) { < nl > @ Override < nl > public void onResult ( final T response ) { < nl > self ( ) . send ( new Runnable ( ) { < nl > @ @ - 178 , 6 + 178 , 10 @ @ public class ModuleActor extends Actor implements BusSubscriber { < nl > } ) ; < nl > } < nl > < nl > + public void cancelRequest ( long rid ) { < nl > + context . getActorApi ( ) . cancelRequest ( rid ) ; < nl > + } < nl > + < nl > @ Override < nl > public void onBusEvent ( Event event ) { < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java < nl > index a019d60 . . acfcafa 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java < nl > @ @ - 11 , 6 + 11 , 7 @ @ import im . actor . core . network . api . ApiBroker ; < nl > import im . actor . core . network . parser . Request ; < nl > import im . actor . core . network . parser . Response ; < nl > import im . actor . runtime . threading . AtomicIntegerCompat ; < nl > + import im . actor . runtime . threading . AtomicLongCompat ; < nl > < nl > / * * < nl > * Actor API Object for connecting to Actor ' s servers < nl > @ @ - 22 , 6 + 23 , 7 @ @ public class ActorApi { < nl > public static final int API _ MINOR _ VERSION = ApiVersion . VERSION _ MINOR ; < nl > < nl > private static final AtomicIntegerCompat NEXT _ ID = im . actor . runtime . Runtime . createAtomicInt ( 1 ) ; < nl > + private static final AtomicLongCompat NEXT _ RPC _ ID = im . actor . runtime . Runtime . createAtomicLong ( 1 ) ; < nl > < nl > private final Endpoints endpoints ; < nl > private final AuthKeyStorage keyStorage ; < nl > @ @ - 62 , 13 + 64 , 24 @ @ public class ActorApi { < nl > * @ param request request body < nl > * @ param callback request callback < nl > * @ param < T > type of response < nl > + * @ return rid of request < nl > * / < nl > - public synchronized < T extends Response > void request ( Request < T > request , RpcCallback < T > callback ) { < nl > + public synchronized < T extends Response > long request ( Request < T > request , RpcCallback < T > callback ) { < nl > if ( request = = null ) { < nl > throw new RuntimeException ( " Request can ' t be null " ) ; < nl > } < nl > + long rid = NEXT _ RPC _ ID . incrementAndGet ( ) ; < nl > + this . apiBroker . send ( new ApiBroker . PerformRequest ( rid , request , callback ) ) ; < nl > + return rid ; < nl > + } < nl > < nl > - this . apiBroker . send ( new ApiBroker . PerformRequest ( request , callback ) ) ; < nl > + / * * < nl > + * Cancelling API Request < nl > + * < nl > + * @ param rid request rid < nl > + * / < nl > + public synchronized void cancelRequest ( long rid ) { < nl > + this . apiBroker . send ( new ApiBroker . CancelRequest ( rid ) ) ; < nl > } < nl > < nl > / * * < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java < nl > index 207ffca . . 06f4742 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java < nl > @ @ - 60 , 7 + 60 , 7 @ @ public class ApiBroker extends Actor { < nl > } < nl > < nl > private static final String TAG = " ApiBroker " ; < nl > - private static final AtomicLongCompat NEXT _ RPC _ ID = im . actor . runtime . Runtime . createAtomicLong ( 1 ) ; < nl > + < nl > private static final AtomicIntegerCompat NEXT _ PROTO _ ID = im . actor . runtime . Runtime . createAtomicInt ( 1 ) ; < nl > < nl > private final Endpoints endpoints ; < nl > @ @ - 360 , 14 + 360 , 21 @ @ public class ApiBroker extends Actor { < nl > } < nl > < nl > public static class PerformRequest { < nl > + < nl > private Request message ; < nl > private RpcCallback callback ; < nl > + private long rid ; < nl > < nl > - public PerformRequest ( Request message , RpcCallback callback ) { < nl > + public PerformRequest ( long rid , Request message , RpcCallback callback ) { < nl > + this . rid = rid ; < nl > this . message = message ; < nl > this . callback = callback ; < nl > } < nl > < nl > + public long getRid ( ) { < nl > + return rid ; < nl > + } < nl > + < nl > public Request getMessage ( ) { < nl > return message ; < nl > } < nl > @ @ - 577 , 8 + 584 , 7 @ @ public class ApiBroker extends Actor { < nl > createMtProto ( initMTProto . getAuthId ( ) ) ; < nl > } else if ( message instanceof PerformRequest ) { < nl > PerformRequest request = ( PerformRequest ) message ; < nl > - performRequest ( NEXT _ RPC _ ID . getAndIncrement ( ) , < nl > - request . getMessage ( ) , request . getCallback ( ) ) ; < nl > + performRequest ( request . getRid ( ) , request . getMessage ( ) , request . getCallback ( ) ) ; < nl > } else if ( message instanceof CancelRequest ) { < nl > CancelRequest cancelRequest = ( CancelRequest ) message ; < nl > cancelRequest ( cancelRequest . getRandomId ( ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java < nl > index f203ad1 . . 6aee0c3 100755 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java < nl > @ @ - 116 , 6 + 116 , 22 @ @ public class BserWriter { < nl > } < nl > } < nl > < nl > + public void writeRepeatedString ( int fieldNumber , @ NotNull List < String > values ) throws IOException { < nl > + if ( values = = null ) { < nl > + throw new IllegalArgumentException ( " Values can not be null " ) ; < nl > + } < nl > + if ( values . size ( ) > BserLimits . MAX _ PROTO _ REPEATED ) { < nl > + throw new IllegalArgumentException ( " Too many values " ) ; < nl > + } < nl > + writtenFields . put ( fieldNumber , true ) ; < nl > + for ( String l : values ) { < nl > + if ( l = = null ) { < nl > + throw new IllegalArgumentException ( " Value can not be null " ) ; < nl > + } < nl > + writeString ( fieldNumber , l ) ; < nl > + } < nl > + } < nl > + < nl > public void writeRepeatedBytes ( int fieldNumber , @ NotNull List < byte [ ] > values ) throws IOException { < nl > if ( values = = null ) { < nl > throw new IllegalArgumentException ( " Values can not be null " ) ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json 
 index c585341 . . 1c709b0 100644 
 - - - a / actor - sdk / sdk - api / actor . json 
 + + + b / actor - sdk / sdk - api / actor . json 
 @ @ - 12852 , 6 + 12852 , 20 @ @ 
 } 
 ] 
 } 
 + } , 
 + { 
 + " type " : " struct " , 
 + " content " : { 
 + " name " : " SwitchMaster " , 
 + " doc " : [ 
 + " Switching master node " 
 + ] , 
 + " trait " : { 
 + " name " : " WebRTCSignaling " , 
 + " key " : 9 
 + } , 
 + " attributes " : [ ] 
 + } 
 } 
 ] 
 } , 
 diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 index aab1775 . . cbcadf9 100644 
 - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 @ @ - 11044 , 6 + 11044 , 18 @ @ 
 < ref role = " NX6Kv " node = " 3Tolai5NVBR " resolve = " device " / > 
 < / node > 
 < / node > 
 + < node concept = " 2m5naR " id = " 3Tolai5ObtG " role = " 2m5mJr " > 
 + < property role = " TrG5h " value = " SwitchMaster " / > 
 + < property role = " tsOgz " value = " false " / > 
 + < property role = " w4tQU " value = " true " / > 
 + < ref role = " w4 $ XZ " node = " 3Tolai5NMKi " resolve = " WebRTCSignaling " / > 
 + < node concept = " Nu42z " id = " 3Tolai5ObvS " role = " 3BtCOu " > 
 + < property role = " Nu42W " value = " 09 " / > 
 + < / node > 
 + < node concept = " NXeRC " id = " 3Tolai5OcxF " role = " NXodf " > 
 + < property role = " NXePf " value = " Switching master node " / > 
 + < / node > 
 + < / node > 
 < node concept = " 1Dx9M1 " id = " 6tgpW9bxpK8 " role = " 1Dx9rD " > 
 < property role = " 1Dx9K7 " value = " WebRTC package that enables support to audio and video calls " / > 
 < / node > 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiSwitchMaster . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiSwitchMaster . java 
 new file mode 100644 
 index 0000000 . . ff3b8ac 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiSwitchMaster . java 
 @ @ - 0 , 0 + 1 , 43 @ @ 
 + package im . actor . core . api ; 
 + / * 
 + * Generated by the Actor API Scheme generator . DO NOT EDIT ! 
 + * / 
 + 
 + import im . actor . runtime . bser . * ; 
 + import im . actor . runtime . collections . * ; 
 + import static im . actor . runtime . bser . Utils . * ; 
 + import im . actor . core . network . parser . * ; 
 + import org . jetbrains . annotations . Nullable ; 
 + import org . jetbrains . annotations . NotNull ; 
 + import com . google . j2objc . annotations . ObjectiveCName ; 
 + import java . io . IOException ; 
 + import java . util . List ; 
 + import java . util . ArrayList ; 
 + 
 + public class ApiSwitchMaster extends ApiWebRTCSignaling { 
 + 
 + 
 + public ApiSwitchMaster ( ) { 
 + 
 + } 
 + 
 + public int getHeader ( ) { 
 + return 9 ; 
 + } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + String res = " struct SwitchMaster { " ; 
 + res + = " } " ; 
 + return res ; 
 + } 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiWebRTCSignaling . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiWebRTCSignaling . java 
 index 4c4a188 . . fcb0a84 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiWebRTCSignaling . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiWebRTCSignaling . java 
 @ @ - 28 , 6 + 28 , 7 @ @ public abstract class ApiWebRTCSignaling extends BserObject { 
 case 6 : return Bser . parse ( new ApiNeedRenegotiate ( ) , content ) ; 
 case 7 : return Bser . parse ( new ApiActiveDevices ( ) , content ) ; 
 case 8 : return Bser . parse ( new ApiNeedOffer ( ) , content ) ; 
 + case 9 : return Bser . parse ( new ApiSwitchMaster ( ) , content ) ; 
 default : return new ApiWebRTCSignalingUnsupported ( key , content ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 index a003cbf . . b103880 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 @ @ - 51 , 6 + 51 , 24 @ @ public class CallActor extends EventBusActor { 
 } 
 } 
 
 + public final void sendSignalingMessage ( int uid , ApiWebRTCSignaling signaling ) { 
 + try { 
 + sendMessage ( uid , signaling . buildContainer ( ) ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + / / Ignore 
 + } 
 + } 
 + 
 + public final void sendSignalingMessage ( ApiWebRTCSignaling signaling ) { 
 + try { 
 + sendMessage ( signaling . buildContainer ( ) ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + / / Ignore 
 + } 
 + } 
 + 
 @ Override 
 public final void onMessageReceived ( @ Nullable Integer senderId , @ Nullable Long senderDeviceId , byte [ ] data ) { 
 if ( senderId = = null | | senderDeviceId = = null ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 index f9c6ac5 . . 28b26d5 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 @ @ - 71 , 7 + 71 , 7 @ @ public class CallManagerActor extends ModuleActor { 
 / / Incoming call 
 / / 
 
 - private void onIncomingCall ( long callId ) { 
 + private void onIncomingCall ( final long callId ) { 
 Log . d ( TAG , " onIncomingCall ( " + callId + " ) " ) ; 
 
 / / Filter double updates about incoming call 
 @ @ - 80 , 22 + 80 , 13 @ @ public class CallManagerActor extends ModuleActor { 
 } 
 handledCalls . add ( callId ) ; 
 
 - api ( new RequestGetCallInfo ( callId ) ) . then ( new Consumer < ResponseGetCallInfo > ( ) { 
 + currentCalls . put ( callId , system ( ) . actorOf ( " actor / slave " , new ActorCreator ( ) { 
 @ Override 
 - public void apply ( final ResponseGetCallInfo responseGetCallInfo ) { 
 - system ( ) . actorOf ( " actor / slave " , new ActorCreator ( ) { 
 - @ Override 
 - public Actor create ( ) { 
 - return new CallSlaveActor ( responseGetCallInfo . getEventBusId ( ) , context ( ) ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) . failure ( new Consumer < Exception > ( ) { 
 - @ Override 
 - public void apply ( Exception e ) { 
 - / / Just Ignore 
 + public Actor create ( ) { 
 + return new CallSlaveActor ( callId , context ( ) ) ; 
 } 
 - } ) . done ( self ( ) ) ; 
 + } ) ) ; 
 + provider . onCallStart ( callId ) ; 
 } 
 
 private void onIncomingCallHandled ( long callId ) { 
 @ @ - 105 , 7 + 96 , 7 @ @ public class CallManagerActor extends ModuleActor { 
 } 
 
 private void doAnswerCall ( final long callId ) { 
 - 
 + answeredCalls . add ( callId ) ; 
 } 
 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 index 9baf63b . . d98c2e1 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 @ @ - 2 , 7 + 2 , 10 @ @ package im . actor . core . modules . calls ; 
 
 import java . util . ArrayList ; 
 
 + import im . actor . core . api . ApiAnswerCall ; 
 import im . actor . core . api . ApiNeedOffer ; 
 + import im . actor . core . api . ApiSwitchMaster ; 
 + import im . actor . core . api . ApiWebRTCSignaling ; 
 import im . actor . core . api . rpc . RequestDoCall ; 
 import im . actor . core . api . rpc . ResponseDoCall ; 
 import im . actor . core . entity . CallState ; 
 @ @ - 56 , 16 + 59 , 25 @ @ public class CallMasterActor extends CallActor { 
 } 
 
 @ Override 
 - public void onDeviceConnected ( final int uid , final long deviceId ) { 
 - ConnectedHolder connectedHolder = new ConnectedHolder ( uid , deviceId ) ; 
 - if ( connectedDevices . contains ( connectedHolder ) ) { 
 - return ; 
 - } 
 - getPeer ( uid , deviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; 
 - for ( ConnectedHolder c : connectedDevices ) { 
 - sendSignalingMessage ( c . uid , c . deviceId , new ApiNeedOffer ( uid , deviceId ) ) ; 
 + public void onDeviceConnected ( int uid , long deviceId ) { 
 + sendSignalingMessage ( uid , deviceId , new ApiSwitchMaster ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { 
 + if ( signaling instanceof ApiAnswerCall ) { 
 + ConnectedHolder connectedHolder = new ConnectedHolder ( fromUid , fromDeviceId ) ; 
 + if ( connectedDevices . contains ( connectedHolder ) ) { 
 + return ; 
 + } 
 + getPeer ( fromUid , fromDeviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; 
 + for ( ConnectedHolder c : connectedDevices ) { 
 + sendSignalingMessage ( c . uid , c . deviceId , new ApiNeedOffer ( fromUid , fromDeviceId ) ) ; 
 + } 
 + connectedDevices . add ( connectedHolder ) ; 
 + } else { 
 + super . onSignalingMessage ( fromUid , fromDeviceId , signaling ) ; 
 } 
 - connectedDevices . add ( connectedHolder ) ; 
 } 
 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 index 78d5968 . . 6f02abf 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 @ @ - 1 , 35 + 1 , 112 @ @ 
 package im . actor . core . modules . calls ; 
 
 + import im . actor . core . api . ApiAnswerCall ; 
 import im . actor . core . api . ApiNeedOffer ; 
 + import im . actor . core . api . ApiSwitchMaster ; 
 import im . actor . core . api . ApiWebRTCSignaling ; 
 + import im . actor . core . api . rpc . RequestGetCallInfo ; 
 + import im . actor . core . api . rpc . ResponseGetCallInfo ; 
 import im . actor . core . modules . ModuleContext ; 
 - import im . actor . runtime . Log ; 
 + import im . actor . runtime . function . Consumer ; 
 
 public class CallSlaveActor extends CallActor { 
 
 - private static final String TAG = " CallSlaveActor " ; 
 + private MasterNode masterNode ; 
 + private boolean isAnswerPending = false ; 
 + private long callId ; 
 
 - private final String busId ; 
 - 
 - public CallSlaveActor ( String busId , ModuleContext context ) { 
 + public CallSlaveActor ( long callId , ModuleContext context ) { 
 super ( context ) ; 
 - this . busId = busId ; 
 + this . callId = callId ; 
 } 
 
 @ Override 
 public void preStart ( ) { 
 super . preStart ( ) ; 
 - joinBus ( busId ) ; 
 + api ( new RequestGetCallInfo ( callId ) ) . then ( new Consumer < ResponseGetCallInfo > ( ) { 
 + @ Override 
 + public void apply ( final ResponseGetCallInfo responseGetCallInfo ) { 
 + joinBus ( responseGetCallInfo . getEventBusId ( ) ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + shutdown ( ) ; 
 + } 
 + } ) . done ( self ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onBusStarted ( ) { 
 + super . onBusStarted ( ) ; 
 + } 
 + 
 + public void onMasterNodeChanged ( int fromUid , long fromDeviceId ) { 
 + masterNode = new MasterNode ( fromUid , fromDeviceId ) ; 
 + if ( isAnswerPending ) { 
 + isAnswerPending = false ; 
 + sendSignalingMessage ( masterNode . getUid ( ) , masterNode . getDeviceId ( ) , new ApiAnswerCall ( ) ) ; 
 + } 
 + } 
 + 
 + public void onNeedOffer ( int destUid , long destDeviceId ) { 
 + getPeer ( destUid , destDeviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; 
 + } 
 + 
 + public void doAnswer ( ) { 
 + if ( masterNode = = null ) { 
 + isAnswerPending = true ; 
 + } else { 
 + sendSignalingMessage ( masterNode . getUid ( ) , masterNode . getDeviceId ( ) , new ApiAnswerCall ( ) ) ; 
 + } 
 } 
 
 + 
 + / / 
 + / / Messages 
 + / / 
 + 
 @ Override 
 public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { 
 if ( signaling instanceof ApiNeedOffer ) { 
 ApiNeedOffer needOffer = ( ApiNeedOffer ) signaling ; 
 - Log . w ( TAG , " Need offer for : " + needOffer . getUid ( ) ) ; 
 - getPeer ( needOffer . getUid ( ) , needOffer . getDevice ( ) ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; 
 + onNeedOffer ( needOffer . getUid ( ) , needOffer . getDevice ( ) ) ; 
 + } else if ( signaling instanceof ApiSwitchMaster ) { 
 + onMasterNodeChanged ( fromUid , fromDeviceId ) ; 
 } else { 
 super . onSignalingMessage ( fromUid , fromDeviceId , signaling ) ; 
 } 
 } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof DoAnswer ) { 
 + doAnswer ( ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 + } 
 + } 
 + 
 + private class MasterNode { 
 + 
 + private int uid ; 
 + private long deviceId ; 
 + 
 + public MasterNode ( int uid , long deviceId ) { 
 + this . uid = uid ; 
 + this . deviceId = deviceId ; 
 + } 
 + 
 + public int getUid ( ) { 
 + return uid ; 
 + } 
 + 
 + public long getDeviceId ( ) { 
 + return deviceId ; 
 + } 
 + } 
 + 
 + public static class DoAnswer { 
 + 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusActor . java 
 index 8621a03 . . 8cf9119 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusActor . java 
 @ @ - 130 , 6 + 130 , 16 @ @ public class EventBusActor extends ModuleActor { 
 
 } 
 
 + public void sendMessage ( byte [ ] data ) { 
 + request ( new RequestPostToEventBus ( busId , new ArrayList < ApiEventBusDestination > ( ) , data ) ) ; 
 + } 
 + 
 + public void sendMessage ( int uid , byte [ ] data ) { 
 + ArrayList < ApiEventBusDestination > destinations = new ArrayList < > ( ) ; 
 + destinations . add ( new ApiEventBusDestination ( uid , new ArrayList < Long > ( ) ) ) ; 
 + request ( new RequestPostToEventBus ( busId , destinations , data ) ) ; 
 + } 
 + 
 public void sendMessage ( int uid , long deviceId , byte [ ] data ) { 
 ArrayList < ApiEventBusDestination > destinations = new ArrayList < > ( ) ; 
 ArrayList < Long > deviceIds = new ArrayList < > ( ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java 
 index c40389e . . 24f4755 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java 
 @ @ - 73 , 7 + 73 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { 
 return ; 
 } 
 
 - / / Log . d ( TAG , " Processing weak update : " + update ) ; 
 + Log . d ( TAG , " Processing weak update : " + update ) ; 
 this . processor . processWeakUpdate ( update , date ) ; 
 } 
 
 @ @ - 196 , 7 + 196 , 6 @ @ public class SequenceHandlerActor extends ModuleActor { 
 
 @ Override 
 public void onReceive ( Object message ) { 
 - Log . d ( TAG , " Processing onReceive : " + message ) ; 
 if ( message instanceof WeakUpdate ) { 
 WeakUpdate weakUpdate = ( WeakUpdate ) message ; 
 try {

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 index fb24226 . . 779750d 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 @ @ - 150 , 7 + 150 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { 
 w . isBot ( ) , 
 w . getNick ( ) , 
 w . getAbout ( ) , 
 - w . getExternal ( ) ) ; 
 + w . getExternal ( ) , 
 + w . getPreferredLanguages ( ) , 
 + w . getTimeZone ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new User ( res ) ; 
 } 
 @ @ - 168 , 7 + 170 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { 
 w . isBot ( ) , 
 w . getNick ( ) , 
 w . getAbout ( ) , 
 - w . getExternal ( ) ) ; 
 + w . getExternal ( ) , 
 + w . getPreferredLanguages ( ) , 
 + w . getTimeZone ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new User ( res ) ; 
 } 
 @ @ - 186 , 7 + 190 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { 
 w . isBot ( ) , 
 nick , 
 w . getAbout ( ) , 
 - w . getExternal ( ) ) ; 
 + w . getExternal ( ) , 
 + w . getPreferredLanguages ( ) , 
 + w . getTimeZone ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new User ( res ) ; 
 } 
 @ @ - 204 , 7 + 210 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { 
 w . isBot ( ) , 
 w . getNick ( ) , 
 about , 
 - w . getExternal ( ) ) ; 
 + w . getExternal ( ) , 
 + w . getPreferredLanguages ( ) , 
 + w . getTimeZone ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new User ( res ) ; 
 } 
 @ @ - 222 , 7 + 230 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { 
 w . isBot ( ) , 
 w . getNick ( ) , 
 w . getAbout ( ) , 
 - w . getExternal ( ) ) ; 
 + w . getExternal ( ) , 
 + w . getPreferredLanguages ( ) , 
 + w . getTimeZone ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new User ( res ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java 
 index 2f83c05 . . 8a0b75a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java 
 @ @ - 118 , 7 + 118 , 8 @ @ public class Authentication { 
 apiConfiguration . getAppId ( ) , 
 apiConfiguration . getAppKey ( ) , 
 deviceHash , 
 - apiConfiguration . getDeviceTitle ( ) 
 + apiConfiguration . getDeviceTitle ( ) , 
 + null , new ArrayList < String > ( ) 
 ) , new RpcCallback < ResponseStartEmailAuth > ( ) { 
 @ Override 
 public void onResult ( ResponseStartEmailAuth response ) { 
 @ @ - 163 , 7 + 164 , 8 @ @ public class Authentication { 
 apiConfiguration . getAppId ( ) , 
 apiConfiguration . getAppKey ( ) , 
 deviceHash , 
 - apiConfiguration . getDeviceTitle ( ) 
 + apiConfiguration . getDeviceTitle ( ) , 
 + null , new ArrayList < String > ( ) 
 ) , new RpcCallback < ResponseStartPhoneAuth > ( ) { 
 @ Override 
 public void onResult ( ResponseStartPhoneAuth response ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index 11630f1 . . bfbd171 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 288 , 6 + 288 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 
 public void sendMessage ( @ NotNull Peer peer , @ NotNull String message , @ Nullable String markDownText , 
 @ Nullable ArrayList < Integer > mentions , boolean autoDetect ) { 
 + / / Notify typing about message sent 
 + context ( ) . getTypingModule ( ) . onMessageSent ( peer ) ; 
 sendMessageActor . send ( new SenderActor . SendText ( peer , message , markDownText , mentions , 
 autoDetect ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java 
 index 72ce08e . . c867fb0 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java 
 @ @ - 51 , 6 + 51 , 10 @ @ public class TypingModule extends AbsModule { 
 ownTypingActor . send ( new OwnTypingActor . Typing ( peer ) ) ; 
 } 
 
 + public void onMessageSent ( Peer peer ) { 
 + ownTypingActor . send ( new OwnTypingActor . MessageSent ( peer ) ) ; 
 + } 
 + 
 public void resetModule ( ) { 
 / / TODO : Implement 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java 
 index 341880a . . faf08d0 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java 
 @ @ - 6 , 6 + 6 , 7 @ @ package im . actor . core . modules . internal . typing ; 
 
 import im . actor . core . api . ApiOutPeer ; 
 import im . actor . core . api . ApiTypingType ; 
 + import im . actor . core . api . rpc . RequestStopTyping ; 
 import im . actor . core . api . rpc . RequestTyping ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . modules . ModuleContext ; 
 @ @ - 30 , 9 + 31 , 12 @ @ public class OwnTypingActor extends ModuleActor { 
 } 
 
 private static final long TYPING _ DELAY = 3000L ; 
 + private static final long TYPING _ CANCEL _ DELAY = 4000L ; 
 
 private long lastTypingTime = 0 ; 
 
 + private long prevRid = 0 ; 
 + 
 @ Verified 
 public OwnTypingActor ( ModuleContext messenger ) { 
 super ( messenger ) ; 
 @ @ - 50 , 7 + 54 , 31 @ @ public class OwnTypingActor extends ModuleActor { 
 return ; 
 } 
 
 - request ( new RequestTyping ( outPeer , ApiTypingType . TEXT ) ) ; 
 + cancelPrevRequest ( ) ; 
 + prevRid = request ( new RequestTyping ( outPeer , ApiTypingType . TEXT ) ) ; 
 + self ( ) . sendOnce ( new AbortTyping ( peer ) , TYPING _ CANCEL _ DELAY ) ; 
 + } 
 + 
 + private void onMessageSent ( Peer peer ) { 
 + cancelPrevRequest ( ) ; 
 + lastTypingTime = 0 ; 
 + self ( ) . sendOnce ( new AbortTyping ( peer ) , 24 * 60 * 60 * 1000L ) ; 
 + } 
 + 
 + private void onAbortTyping ( Peer peer ) { 
 + ApiOutPeer outPeer = buidOutPeer ( peer ) ; 
 + if ( outPeer = = null ) { 
 + return ; 
 + } 
 + cancelPrevRequest ( ) ; 
 + prevRid = request ( new RequestStopTyping ( outPeer , ApiTypingType . TEXT ) ) ; 
 + } 
 + 
 + private void cancelPrevRequest ( ) { 
 + if ( prevRid ! = 0 ) { 
 + cancelRequest ( prevRid ) ; 
 + prevRid = 0 ; 
 + } 
 } 
 
 / / Messages 
 @ @ - 59 , 11 + 87 , 27 @ @ public class OwnTypingActor extends ModuleActor { 
 public void onReceive ( Object message ) { 
 if ( message instanceof Typing ) { 
 onTyping ( ( ( Typing ) message ) . getPeer ( ) ) ; 
 + } else if ( message instanceof MessageSent ) { 
 + onMessageSent ( ( ( MessageSent ) message ) . getPeer ( ) ) ; 
 + } else if ( message instanceof AbortTyping ) { 
 + onAbortTyping ( ( ( AbortTyping ) message ) . getPeer ( ) ) ; 
 } else { 
 drop ( message ) ; 
 } 
 } 
 
 + private static class AbortTyping { 
 + private Peer peer ; 
 + 
 + public AbortTyping ( Peer peer ) { 
 + this . peer = peer ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + } 
 + 
 public static class Typing { 
 private Peer peer ; 
 
 @ @ - 75 , 4 + 119 , 17 @ @ public class OwnTypingActor extends ModuleActor { 
 return peer ; 
 } 
 } 
 + 
 + public static class MessageSent { 
 + 
 + private Peer peer ; 
 + 
 + public MessageSent ( Peer peer ) { 
 + this . peer = peer ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java 
 index ace0a50 . . 674756e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java 
 @ @ - 32 , 8 + 32 , 18 @ @ public class TypingProcessor extends AbsModule { 
 } 
 } 
 
 + @ Verified 
 public void onTypingStop ( ApiPeer peer , int uid , ApiTypingType typingType ) { 
 - 
 + / / Other types are unsupported 
 + / / TODO : Move to Actor 
 + if ( typingType ! = ApiTypingType . TEXT ) { 
 + return ; 
 + } 
 + if ( peer . getType ( ) = = ApiPeerType . PRIVATE ) { 
 + typingActor . sendOnce ( new TypingActor . StopTyping ( uid ) ) ; 
 + } else if ( peer . getType ( ) = = ApiPeerType . GROUP ) { 
 + typingActor . sendOnce ( new TypingActor . StopGroupTyping ( peer . getId ( ) , uid ) ) ; 
 + } 
 } 
 
 @ Verified 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 index 8a2998c . . ab71f3a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 @ @ - 40 , 6 + 40 , 7 @ @ import im . actor . core . api . updates . UpdateMessageReceived ; 
 import im . actor . core . api . updates . UpdateMessageSent ; 
 import im . actor . core . api . updates . UpdateParameterChanged ; 
 import im . actor . core . api . updates . UpdateTyping ; 
 + import im . actor . core . api . updates . UpdateTypingStop ; 
 import im . actor . core . api . updates . UpdateUserLastSeen ; 
 import im . actor . core . api . updates . UpdateUserLocalNameChanged ; 
 import im . actor . core . api . updates . UpdateUserOffline ; 
 @ @ - 198 , 6 + 199 , 9 @ @ public class UpdateProcessor extends AbsModule { 
 } else if ( update instanceof UpdateTyping ) { 
 UpdateTyping typing = ( UpdateTyping ) update ; 
 typingProcessor . onTyping ( typing . getPeer ( ) , typing . getUid ( ) , typing . getTypingType ( ) ) ; 
 + } else if ( update instanceof UpdateTypingStop ) { 
 + UpdateTypingStop typing = ( UpdateTypingStop ) update ; 
 + typingProcessor . onTypingStop ( typing . getPeer ( ) , typing . getUid ( ) , typing . getTypingType ( ) ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java 
 index 67b681e . . 072af9f 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java 
 @ @ - 130 , 8 + 130 , 8 @ @ public class ModuleActor extends Actor implements BusSubscriber { 
 return context ; 
 } 
 
 - public < T extends Response > void request ( Request < T > request ) { 
 - request ( request , new RpcCallback < T > ( ) { 
 + public < T extends Response > long request ( Request < T > request ) { 
 + return request ( request , new RpcCallback < T > ( ) { 
 @ Override 
 public void onResult ( T response ) { 
 
 @ @ - 144 , 8 + 144 , 8 @ @ public class ModuleActor extends Actor implements BusSubscriber { 
 } ) ; 
 } 
 
 - public < T extends Response > void request ( final Request < T > request , final RpcCallback < T > callback ) { 
 - context . getActorApi ( ) . request ( request , new RpcCallback < T > ( ) { 
 + public < T extends Response > long request ( final Request < T > request , final RpcCallback < T > callback ) { 
 + return context . getActorApi ( ) . request ( request , new RpcCallback < T > ( ) { 
 @ Override 
 public void onResult ( final T response ) { 
 self ( ) . send ( new Runnable ( ) { 
 @ @ - 178 , 6 + 178 , 10 @ @ public class ModuleActor extends Actor implements BusSubscriber { 
 } ) ; 
 } 
 
 + public void cancelRequest ( long rid ) { 
 + context . getActorApi ( ) . cancelRequest ( rid ) ; 
 + } 
 + 
 @ Override 
 public void onBusEvent ( Event event ) { 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java 
 index a019d60 . . acfcafa 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java 
 @ @ - 11 , 6 + 11 , 7 @ @ import im . actor . core . network . api . ApiBroker ; 
 import im . actor . core . network . parser . Request ; 
 import im . actor . core . network . parser . Response ; 
 import im . actor . runtime . threading . AtomicIntegerCompat ; 
 + import im . actor . runtime . threading . AtomicLongCompat ; 
 
 / * * 
 * Actor API Object for connecting to Actor ' s servers 
 @ @ - 22 , 6 + 23 , 7 @ @ public class ActorApi { 
 public static final int API _ MINOR _ VERSION = ApiVersion . VERSION _ MINOR ; 
 
 private static final AtomicIntegerCompat NEXT _ ID = im . actor . runtime . Runtime . createAtomicInt ( 1 ) ; 
 + private static final AtomicLongCompat NEXT _ RPC _ ID = im . actor . runtime . Runtime . createAtomicLong ( 1 ) ; 
 
 private final Endpoints endpoints ; 
 private final AuthKeyStorage keyStorage ; 
 @ @ - 62 , 13 + 64 , 24 @ @ public class ActorApi { 
 * @ param request request body 
 * @ param callback request callback 
 * @ param < T > type of response 
 + * @ return rid of request 
 * / 
 - public synchronized < T extends Response > void request ( Request < T > request , RpcCallback < T > callback ) { 
 + public synchronized < T extends Response > long request ( Request < T > request , RpcCallback < T > callback ) { 
 if ( request = = null ) { 
 throw new RuntimeException ( " Request can ' t be null " ) ; 
 } 
 + long rid = NEXT _ RPC _ ID . incrementAndGet ( ) ; 
 + this . apiBroker . send ( new ApiBroker . PerformRequest ( rid , request , callback ) ) ; 
 + return rid ; 
 + } 
 
 - this . apiBroker . send ( new ApiBroker . PerformRequest ( request , callback ) ) ; 
 + / * * 
 + * Cancelling API Request 
 + * 
 + * @ param rid request rid 
 + * / 
 + public synchronized void cancelRequest ( long rid ) { 
 + this . apiBroker . send ( new ApiBroker . CancelRequest ( rid ) ) ; 
 } 
 
 / * * 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java 
 index 207ffca . . 06f4742 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java 
 @ @ - 60 , 7 + 60 , 7 @ @ public class ApiBroker extends Actor { 
 } 
 
 private static final String TAG = " ApiBroker " ; 
 - private static final AtomicLongCompat NEXT _ RPC _ ID = im . actor . runtime . Runtime . createAtomicLong ( 1 ) ; 
 + 
 private static final AtomicIntegerCompat NEXT _ PROTO _ ID = im . actor . runtime . Runtime . createAtomicInt ( 1 ) ; 
 
 private final Endpoints endpoints ; 
 @ @ - 360 , 14 + 360 , 21 @ @ public class ApiBroker extends Actor { 
 } 
 
 public static class PerformRequest { 
 + 
 private Request message ; 
 private RpcCallback callback ; 
 + private long rid ; 
 
 - public PerformRequest ( Request message , RpcCallback callback ) { 
 + public PerformRequest ( long rid , Request message , RpcCallback callback ) { 
 + this . rid = rid ; 
 this . message = message ; 
 this . callback = callback ; 
 } 
 
 + public long getRid ( ) { 
 + return rid ; 
 + } 
 + 
 public Request getMessage ( ) { 
 return message ; 
 } 
 @ @ - 577 , 8 + 584 , 7 @ @ public class ApiBroker extends Actor { 
 createMtProto ( initMTProto . getAuthId ( ) ) ; 
 } else if ( message instanceof PerformRequest ) { 
 PerformRequest request = ( PerformRequest ) message ; 
 - performRequest ( NEXT _ RPC _ ID . getAndIncrement ( ) , 
 - request . getMessage ( ) , request . getCallback ( ) ) ; 
 + performRequest ( request . getRid ( ) , request . getMessage ( ) , request . getCallback ( ) ) ; 
 } else if ( message instanceof CancelRequest ) { 
 CancelRequest cancelRequest = ( CancelRequest ) message ; 
 cancelRequest ( cancelRequest . getRandomId ( ) ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java 
 index f203ad1 . . 6aee0c3 100755 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java 
 @ @ - 116 , 6 + 116 , 22 @ @ public class BserWriter { 
 } 
 } 
 
 + public void writeRepeatedString ( int fieldNumber , @ NotNull List < String > values ) throws IOException { 
 + if ( values = = null ) { 
 + throw new IllegalArgumentException ( " Values can not be null " ) ; 
 + } 
 + if ( values . size ( ) > BserLimits . MAX _ PROTO _ REPEATED ) { 
 + throw new IllegalArgumentException ( " Too many values " ) ; 
 + } 
 + writtenFields . put ( fieldNumber , true ) ; 
 + for ( String l : values ) { 
 + if ( l = = null ) { 
 + throw new IllegalArgumentException ( " Value can not be null " ) ; 
 + } 
 + writeString ( fieldNumber , l ) ; 
 + } 
 + } 
 + 
 public void writeRepeatedBytes ( int fieldNumber , @ NotNull List < byte [ ] > values ) throws IOException { 
 if ( values = = null ) { 
 throw new IllegalArgumentException ( " Values can not be null " ) ;
