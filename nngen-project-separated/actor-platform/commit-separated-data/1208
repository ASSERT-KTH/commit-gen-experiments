BLEU SCORE: 0.15133218633429316

TEST MSG: feat ( server : http ) : DataEntity and DataEntities usable from Circe
GENERATED MSG: feat ( server ) : serve app static files from / app route

TEST DIFF (one line): diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala < nl > index 4245d66 . . 79ed3ac 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala < nl > @ @ - 1 , 11 + 1 , 5 @ @ < nl > package im . actor . server . api . http . model < nl > < nl > - import play . api . libs . json . { JsArray , Json , JsObject , Writes } < nl > + final case class DataEntity [ A ] ( data : A ) < nl > < nl > - final case class DataEntity [ A ] ( data : A ) { < nl > - def toJson ( implicit writes : Writes [ A ] ) = JsObject ( Map ( " data " → Json . toJson ( data ) ) ) < nl > - } < nl > - < nl > - final case class DataEntities [ A ] ( datas : Seq [ A ] ) { < nl > - def toJson ( implicit writes : Writes [ A ] ) = JsObject ( Map ( " data " → JsArray ( datas map ( Json . toJson ( _ ) ) ) ) ) < nl > - } < nl > \ No newline at end of file < nl > + final case class DataEntities [ A ] ( data : Seq [ A ] ) < nl > \ No newline at end of file < nl > diff - - git a / actor - server / notes / 1 . 0 . 98 . markdown b / actor - server / notes / 1 . 0 . 98 . markdown < nl > new file mode 100644 < nl > index 0000000 . . c8be698 < nl > - - - / dev / null < nl > + + + b / actor - server / notes / 1 . 0 . 98 . markdown < nl > @ @ - 0 , 0 + 1 , 4 @ @ < nl > + SDK Features < nl > + - - - < nl > + < nl > + * DataEntity and DataEntities usable from Circe < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > index 7aaf9a4 . . 433af1d 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > @ @ - 13 , 7 + 13 , 7 @ @ import akka . stream . Materializer < nl > import com . typesafe . config . Config < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > - import im . actor . server . api . http . files . FilesHandler < nl > + import im . actor . server . api . http . app . AppFilesHandler < nl > import im . actor . server . api . http . groups . GroupsHandler < nl > import im . actor . server . api . http . status . StatusHandler < nl > import im . actor . server . api . http . webhooks . WebhooksHandler < nl > @ @ - 60 , 16 + 60 , 16 @ @ object HttpApiFrontend { < nl > val webhooks = new WebhooksHandler < nl > val groups = new GroupsHandler < nl > val status = new StatusHandler < nl > - val files = new FilesHandler ( config . staticFiles ) < nl > + val files = new AppFilesHandler ( config . staticFiles ) < nl > < nl > - def routes : Route = pathPrefix ( " v1 " ) { < nl > - respondWithDefaultHeaders ( corsHeaders ) { < nl > - status . routes ~ < nl > - groups . routes ~ < nl > - webhooks . routes ~ < nl > - files . routes < nl > + def routes : Route = files . routes ~ < nl > + pathPrefix ( " v1 " ) { < nl > + respondWithDefaultHeaders ( corsHeaders ) { < nl > + status . routes ~ < nl > + groups . routes ~ < nl > + webhooks . routes < nl > + } < nl > } < nl > - } < nl > < nl > Http ( ) . bind ( config . interface , config . port , httpsContext = tlsContext map ( _ . asHttpsContext ) ) . runForeach { connection ⇒ < nl > connection handleWith Route . handlerFlow ( routes ) < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / app / AppFilesHandler . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / app / AppFilesHandler . scala < nl > new file mode 100644 < nl > index 0000000 . . 8956ba9 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / app / AppFilesHandler . scala < nl > @ @ - 0 , 0 + 1 , 47 @ @ < nl > + package im . actor . server . api . http . app < nl > + < nl > + import java . io . File < nl > + import java . nio . file . Paths < nl > + < nl > + import scala . concurrent . ExecutionContext < nl > + < nl > + import akka . http . scaladsl . model . StatusCodes . { BadRequest , NotFound } < nl > + import akka . http . scaladsl . model . { ContentTypes , HttpResponse } < nl > + import akka . http . scaladsl . server . Directives . _ < nl > + import akka . http . scaladsl . server . _ < nl > + < nl > + import im . actor . server . api . http . RoutesHandler < nl > + < nl > + class AppFilesHandler ( staticFilesDirectory : String ) ( implicit ec : ExecutionContext ) extends RoutesHandler { < nl > + val rejection = RejectionHandler . newBuilder ( ) < nl > + . handle { < nl > + case AuthorizationFailedRejection ⇒ complete ( HttpResponse ( BadRequest , entity = " You are not allowed to perform this action " ) ) < nl > + } < nl > + . handleNotFound ( complete ( HttpResponse ( NotFound , entity = " File not found " ) ) ) < nl > + . result ( ) < nl > + < nl > + val base = Paths . get ( staticFilesDirectory ) . toFile < nl > + < nl > + override def routes : Route = path ( " app " / Segment ) { fileName ⇒ < nl > + get { < nl > + handleRejections ( rejection ) { < nl > + mapResponseEntity ( _ . withContentType ( ContentTypes . ` application / octet - stream ` ) ) { < nl > + validateFilePath ( fileName ) { file ⇒ < nl > + getFromFile ( file ) < nl > + } < nl > + } < nl > + } < nl > + } < nl > + } < nl > + < nl > + def validateFilePath ( path : String ) : Directive1 [ File ] = { < nl > + Directive { fileCompl ⇒ < nl > + val file = new File ( base , path ) < nl > + if ( file . getCanonicalPath . startsWith ( base . getCanonicalPath ) ) < nl > + fileCompl ( Tuple1 ( file ) ) < nl > + else < nl > + reject ( AuthorizationFailedRejection ) < nl > + } < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / files / FilesHandler . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / files / FilesHandler . scala < nl > deleted file mode 100644 < nl > index bbb010a . . 0000000 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / files / FilesHandler . scala < nl > + + + / dev / null < nl > @ @ - 1 , 47 + 0 , 0 @ @ < nl > - package im . actor . server . api . http . files < nl > - < nl > - import java . io . File < nl > - import java . nio . file . Paths < nl > - < nl > - import scala . concurrent . ExecutionContext < nl > - < nl > - import akka . http . scaladsl . model . StatusCodes . { BadRequest , NotFound } < nl > - import akka . http . scaladsl . model . { ContentTypes , HttpResponse } < nl > - import akka . http . scaladsl . server . Directives . _ < nl > - import akka . http . scaladsl . server . _ < nl > - < nl > - import im . actor . server . api . http . RoutesHandler < nl > - < nl > - class FilesHandler ( staticFilesDirectory : String ) ( implicit ec : ExecutionContext ) extends RoutesHandler { < nl > - val rejection = RejectionHandler . newBuilder ( ) < nl > - . handle { < nl > - case AuthorizationFailedRejection ⇒ complete ( HttpResponse ( BadRequest , entity = " You are not allowed to perform this action " ) ) < nl > - } < nl > - . handleNotFound ( complete ( HttpResponse ( NotFound , entity = " File not found " ) ) ) < nl > - . result ( ) < nl > - < nl > - val base = Paths . get ( staticFilesDirectory ) . toFile < nl > - < nl > - override def routes : Route = path ( " files " / Segment ) { fileName ⇒ < nl > - get { < nl > - handleRejections ( rejection ) { < nl > - mapResponseEntity ( _ . withContentType ( ContentTypes . ` application / octet - stream ` ) ) { < nl > - validateFilePath ( fileName ) { file ⇒ < nl > - getFromFile ( file ) < nl > - } < nl > - } < nl > - } < nl > - } < nl > - } < nl > - < nl > - def validateFilePath ( path : String ) : Directive1 [ File ] = { < nl > - Directive { fileCompl ⇒ < nl > - val file = new File ( base , path ) < nl > - if ( file . getCanonicalPath . startsWith ( base . getCanonicalPath ) ) < nl > - fileCompl ( Tuple1 ( file ) ) < nl > - else < nl > - reject ( AuthorizationFailedRejection ) < nl > - } < nl > - < nl > - } < nl > - } < nl > diff - - git a / actor - server / src / universal / conf / application . conf b / actor - server / src / universal / conf / application . conf < nl > index a1b3489 . . 21fb2dd 100644 < nl > - - - a / actor - server / src / universal / conf / application . conf < nl > + + + b / actor - server / src / universal / conf / application . conf < nl > @ @ - 5 , 3 + 5 , 7 @ @ jdbc - connection { < nl > password : $ { services . postgresql . password } < nl > url : " jdbc : postgresql : / / " $ { services . postgresql . host } " : " $ { services . postgresql . port } " / " $ { services . postgresql . db } < nl > } < nl > + < nl > + webapp { < nl > + static - files - directory : " / opt / docker / files " < nl > + } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala 
 index 4245d66 . . 79ed3ac 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala 
 @ @ - 1 , 11 + 1 , 5 @ @ 
 package im . actor . server . api . http . model 
 
 - import play . api . libs . json . { JsArray , Json , JsObject , Writes } 
 + final case class DataEntity [ A ] ( data : A ) 
 
 - final case class DataEntity [ A ] ( data : A ) { 
 - def toJson ( implicit writes : Writes [ A ] ) = JsObject ( Map ( " data " → Json . toJson ( data ) ) ) 
 - } 
 - 
 - final case class DataEntities [ A ] ( datas : Seq [ A ] ) { 
 - def toJson ( implicit writes : Writes [ A ] ) = JsObject ( Map ( " data " → JsArray ( datas map ( Json . toJson ( _ ) ) ) ) ) 
 - } 
 \ No newline at end of file 
 + final case class DataEntities [ A ] ( data : Seq [ A ] ) 
 \ No newline at end of file 
 diff - - git a / actor - server / notes / 1 . 0 . 98 . markdown b / actor - server / notes / 1 . 0 . 98 . markdown 
 new file mode 100644 
 index 0000000 . . c8be698 
 - - - / dev / null 
 + + + b / actor - server / notes / 1 . 0 . 98 . markdown 
 @ @ - 0 , 0 + 1 , 4 @ @ 
 + SDK Features 
 + - - - 
 + 
 + * DataEntity and DataEntities usable from Circe 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 index 7aaf9a4 . . 433af1d 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 @ @ - 13 , 7 + 13 , 7 @ @ import akka . stream . Materializer 
 import com . typesafe . config . Config 
 import slick . driver . PostgresDriver . api . _ 
 
 - import im . actor . server . api . http . files . FilesHandler 
 + import im . actor . server . api . http . app . AppFilesHandler 
 import im . actor . server . api . http . groups . GroupsHandler 
 import im . actor . server . api . http . status . StatusHandler 
 import im . actor . server . api . http . webhooks . WebhooksHandler 
 @ @ - 60 , 16 + 60 , 16 @ @ object HttpApiFrontend { 
 val webhooks = new WebhooksHandler 
 val groups = new GroupsHandler 
 val status = new StatusHandler 
 - val files = new FilesHandler ( config . staticFiles ) 
 + val files = new AppFilesHandler ( config . staticFiles ) 
 
 - def routes : Route = pathPrefix ( " v1 " ) { 
 - respondWithDefaultHeaders ( corsHeaders ) { 
 - status . routes ~ 
 - groups . routes ~ 
 - webhooks . routes ~ 
 - files . routes 
 + def routes : Route = files . routes ~ 
 + pathPrefix ( " v1 " ) { 
 + respondWithDefaultHeaders ( corsHeaders ) { 
 + status . routes ~ 
 + groups . routes ~ 
 + webhooks . routes 
 + } 
 } 
 - } 
 
 Http ( ) . bind ( config . interface , config . port , httpsContext = tlsContext map ( _ . asHttpsContext ) ) . runForeach { connection ⇒ 
 connection handleWith Route . handlerFlow ( routes ) 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / app / AppFilesHandler . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / app / AppFilesHandler . scala 
 new file mode 100644 
 index 0000000 . . 8956ba9 
 - - - / dev / null 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / app / AppFilesHandler . scala 
 @ @ - 0 , 0 + 1 , 47 @ @ 
 + package im . actor . server . api . http . app 
 + 
 + import java . io . File 
 + import java . nio . file . Paths 
 + 
 + import scala . concurrent . ExecutionContext 
 + 
 + import akka . http . scaladsl . model . StatusCodes . { BadRequest , NotFound } 
 + import akka . http . scaladsl . model . { ContentTypes , HttpResponse } 
 + import akka . http . scaladsl . server . Directives . _ 
 + import akka . http . scaladsl . server . _ 
 + 
 + import im . actor . server . api . http . RoutesHandler 
 + 
 + class AppFilesHandler ( staticFilesDirectory : String ) ( implicit ec : ExecutionContext ) extends RoutesHandler { 
 + val rejection = RejectionHandler . newBuilder ( ) 
 + . handle { 
 + case AuthorizationFailedRejection ⇒ complete ( HttpResponse ( BadRequest , entity = " You are not allowed to perform this action " ) ) 
 + } 
 + . handleNotFound ( complete ( HttpResponse ( NotFound , entity = " File not found " ) ) ) 
 + . result ( ) 
 + 
 + val base = Paths . get ( staticFilesDirectory ) . toFile 
 + 
 + override def routes : Route = path ( " app " / Segment ) { fileName ⇒ 
 + get { 
 + handleRejections ( rejection ) { 
 + mapResponseEntity ( _ . withContentType ( ContentTypes . ` application / octet - stream ` ) ) { 
 + validateFilePath ( fileName ) { file ⇒ 
 + getFromFile ( file ) 
 + } 
 + } 
 + } 
 + } 
 + } 
 + 
 + def validateFilePath ( path : String ) : Directive1 [ File ] = { 
 + Directive { fileCompl ⇒ 
 + val file = new File ( base , path ) 
 + if ( file . getCanonicalPath . startsWith ( base . getCanonicalPath ) ) 
 + fileCompl ( Tuple1 ( file ) ) 
 + else 
 + reject ( AuthorizationFailedRejection ) 
 + } 
 + 
 + } 
 + } 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / files / FilesHandler . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / files / FilesHandler . scala 
 deleted file mode 100644 
 index bbb010a . . 0000000 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / files / FilesHandler . scala 
 + + + / dev / null 
 @ @ - 1 , 47 + 0 , 0 @ @ 
 - package im . actor . server . api . http . files 
 - 
 - import java . io . File 
 - import java . nio . file . Paths 
 - 
 - import scala . concurrent . ExecutionContext 
 - 
 - import akka . http . scaladsl . model . StatusCodes . { BadRequest , NotFound } 
 - import akka . http . scaladsl . model . { ContentTypes , HttpResponse } 
 - import akka . http . scaladsl . server . Directives . _ 
 - import akka . http . scaladsl . server . _ 
 - 
 - import im . actor . server . api . http . RoutesHandler 
 - 
 - class FilesHandler ( staticFilesDirectory : String ) ( implicit ec : ExecutionContext ) extends RoutesHandler { 
 - val rejection = RejectionHandler . newBuilder ( ) 
 - . handle { 
 - case AuthorizationFailedRejection ⇒ complete ( HttpResponse ( BadRequest , entity = " You are not allowed to perform this action " ) ) 
 - } 
 - . handleNotFound ( complete ( HttpResponse ( NotFound , entity = " File not found " ) ) ) 
 - . result ( ) 
 - 
 - val base = Paths . get ( staticFilesDirectory ) . toFile 
 - 
 - override def routes : Route = path ( " files " / Segment ) { fileName ⇒ 
 - get { 
 - handleRejections ( rejection ) { 
 - mapResponseEntity ( _ . withContentType ( ContentTypes . ` application / octet - stream ` ) ) { 
 - validateFilePath ( fileName ) { file ⇒ 
 - getFromFile ( file ) 
 - } 
 - } 
 - } 
 - } 
 - } 
 - 
 - def validateFilePath ( path : String ) : Directive1 [ File ] = { 
 - Directive { fileCompl ⇒ 
 - val file = new File ( base , path ) 
 - if ( file . getCanonicalPath . startsWith ( base . getCanonicalPath ) ) 
 - fileCompl ( Tuple1 ( file ) ) 
 - else 
 - reject ( AuthorizationFailedRejection ) 
 - } 
 - 
 - } 
 - } 
 diff - - git a / actor - server / src / universal / conf / application . conf b / actor - server / src / universal / conf / application . conf 
 index a1b3489 . . 21fb2dd 100644 
 - - - a / actor - server / src / universal / conf / application . conf 
 + + + b / actor - server / src / universal / conf / application . conf 
 @ @ - 5 , 3 + 5 , 7 @ @ jdbc - connection { 
 password : $ { services . postgresql . password } 
 url : " jdbc : postgresql : / / " $ { services . postgresql . host } " : " $ { services . postgresql . port } " / " $ { services . postgresql . db } 
 } 
 + 
 + webapp { 
 + static - files - directory : " / opt / docker / files " 
 + } 
 \ No newline at end of file
