BLEU SCORE: 0.015445276590783498

TEST MSG: feat ( server : push ) : configurable google push max - connections
GENERATED MSG: Merge commit ' 3457bb830116fa16b70bace94147d95dfb1e412c '

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / resources / reference . conf b / actor - server / actor - core / src / main / resources / reference . conf < nl > index 4b596c9 . . afe2ffd 100644 < nl > - - - a / actor - server / actor - core / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - core / src / main / resources / reference . conf < nl > @ @ - 23 , 6 + 23 , 8 @ @ services { < nl > < nl > google { < nl > push { < nl > + max - connections : 20 < nl > + < nl > keys : [ ] < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala < nl > index 841dfd6 . . d12afcc 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala < nl > @ @ - 118 , 16 + 118 , 18 @ @ private object GooglePushDelivery { < nl > final case class Delivery ( m : GooglePushMessage , key : String ) < nl > < nl > private val MaxQueue = 100000 < nl > - private val MaxConnections = 4 < nl > < nl > def props = Props ( classOf [ GooglePushDelivery ] ) < nl > < nl > - def flow ( implicit system : ActorSystem , mat : Materializer ) = < nl > + def flow ( implicit system : ActorSystem , mat : Materializer ) = { < nl > + val maxConnections = system . settings . config . getInt ( " services . google . push . max - connections " ) < nl > + < nl > Http ( system ) < nl > . cachedHostConnectionPoolTls [ GooglePushDelivery . Delivery ] ( < nl > - " gcm - http . googleapis . com " , < nl > - settings = ConnectionPoolSettings ( system ) . copy ( maxConnections = MaxConnections ) < nl > - ) < nl > + " gcm - http . googleapis . com " , < nl > + settings = ConnectionPoolSettings ( system ) . copy ( maxConnections = maxConnections ) < nl > + ) < nl > + } < nl > } < nl > < nl > private final class GooglePushDelivery extends ActorPublisher [ ( HttpRequest , GooglePushDelivery . Delivery ) ] with ActorLogging {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala < nl > index 0c4a211 . . 684761e 100644 < nl > - - - a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala < nl > + + + b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala < nl > @ @ - 14 , 9 + 14 , 10 @ @ import scala . concurrent . duration . _ < nl > import scala . reflect . ClassTag < nl > < nl > private case class Config ( < nl > - command : String = " help " , < nl > - createBot : CreateBot = CreateBot ( ) , < nl > - updateIsAdmin : UpdateIsAdmin = UpdateIsAdmin ( ) < nl > + command : String = " help " , < nl > + createBot : CreateBot = CreateBot ( ) , < nl > + updateIsAdmin : UpdateIsAdmin = UpdateIsAdmin ( ) , < nl > + httpApiTokenCreate : HttpApiTokenCreate = HttpApiTokenCreate ( ) < nl > ) < nl > < nl > private [ cli ] trait Request { < nl > @ @ - 45 , 12 + 46 , 16 @ @ private [ cli ] case object UpdateIsAdminResponse extends UpdateIsAdminResponse { < nl > def apply ( ) : UpdateIsAdminResponse = this < nl > } < nl > < nl > + private [ cli ] case class HttpApiTokenCreate ( isAdmin : Boolean = false ) < nl > + private case class HttpApiTokenCreateResponse ( token : String ) < nl > + < nl > private object Commands { < nl > val Help = " help " < nl > val CreateBot = " create - bot " < nl > val AdminGrant = " admin - grant " < nl > val AdminRevoke = " admin - revoke " < nl > val MigrateUserSequence = " migrate - user - sequence " < nl > + val HttpApiTokenCreate = " http - api - token - create " < nl > } < nl > < nl > object ActorCli extends App { < nl > @ @ - 88 , 6 + 93 , 13 @ @ object ActorCli extends App { < nl > cmd ( Commands . MigrateUserSequence ) action { ( _ , c ) ⇒ < nl > c . copy ( command = Commands . MigrateUserSequence ) < nl > } < nl > + cmd ( Commands . HttpApiTokenCreate ) action { ( _ , c ) ⇒ < nl > + c . copy ( command = Commands . HttpApiTokenCreate ) < nl > + } children ( < nl > + opt [ Unit ] ( " admin " ) abbr " a " optional ( ) action { ( x , c ) ⇒ < nl > + c . copy ( httpApiTokenCreate = c . httpApiTokenCreate . copy ( isAdmin = true ) ) < nl > + } < nl > + ) < nl > } < nl > < nl > parser . parse ( args , Config ( ) ) foreach { config ⇒ < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala < nl > index 4dea619 . . 4756dfe 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala < nl > @ @ - 69 , 6 + 69 , 8 @ @ object ACLUtils { < nl > nextAccessSalt ( ThreadLocalRandom . current ( ) ) < nl > } < nl > < nl > + def accessToken ( ) : String = accessToken ( ThreadLocalRandom . current ( ) ) < nl > + < nl > def accessToken ( rng : ThreadLocalRandom ) : String = DigestUtils . sha256Hex ( rng . nextLong ( ) . toString ) < nl > < nl > def checkOutPeer ( outPeer : ApiOutPeer , clientAuthId : Long ) ( implicit s : ActorSystem ) : Future [ Boolean ] = { < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala < nl > new file mode 100644 < nl > index 0000000 . . 4245d66 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala < nl > @ @ - 0 , 0 + 1 , 11 @ @ < nl > + package im . actor . server . api . http . model < nl > + < nl > + import play . api . libs . json . { JsArray , Json , JsObject , Writes } < nl > + < nl > + final case class DataEntity [ A ] ( data : A ) { < nl > + def toJson ( implicit writes : Writes [ A ] ) = JsObject ( Map ( " data " → Json . toJson ( data ) ) ) < nl > + } < nl > + < nl > + final case class DataEntities [ A ] ( datas : Seq [ A ] ) { < nl > + def toJson ( implicit writes : Writes [ A ] ) = JsObject ( Map ( " data " → JsArray ( datas map ( Json . toJson ( _ ) ) ) ) ) < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - models / src / main / protobuf / model . proto b / actor - server / actor - models / src / main / protobuf / model . proto < nl > index 47315f6 . . 4b87762 100644 < nl > - - - a / actor - server / actor - models / src / main / protobuf / model . proto < nl > + + + b / actor - server / actor - models / src / main / protobuf / model . proto < nl > @ @ - 59 , 4 + 59 , 9 @ @ message ReactionEvent { < nl > message MessageReaction { < nl > repeated int32 user _ ids = 3 ; < nl > string code = 4 ; < nl > + } < nl > + < nl > + message HttpApiToken { < nl > + string token = 1 ; < nl > + bool is _ admin = 2 ; < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20151223215842 _ _ CreateApiTokens . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20151223215842 _ _ CreateApiTokens . sql < nl > new file mode 100644 < nl > index 0000000 . . 0312ac3 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20151223215842 _ _ CreateApiTokens . sql < nl > @ @ - 0 , 0 + 1 , 5 @ @ < nl > + CREATE TABLE http _ api _ tokens ( < nl > + token text NOT NULL , < nl > + is _ admin BOOL NOT NULL DEFAULT FALSE , < nl > + PRIMARY KEY token < nl > + ) < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HttpApiTokenRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HttpApiTokenRepo . scala < nl > new file mode 100644 < nl > index 0000000 . . 5129fbe < nl > - - - / dev / null < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HttpApiTokenRepo . scala < nl > @ @ - 0 , 0 + 1 , 24 @ @ < nl > + package im . actor . server . persist < nl > + < nl > + import im . actor . server . db . ActorPostgresDriver . api . _ < nl > + import im . actor . server . model . HttpApiToken < nl > + < nl > + final class HttpApiTokenTable ( tag : Tag ) extends Table [ HttpApiToken ] ( tag , " http _ api _ tokens " ) { < nl > + def token = column [ String ] ( " token " , O . PrimaryKey ) < nl > + < nl > + def isAdmin = column [ Boolean ] ( " is _ admin " ) < nl > + < nl > + def * = ( token , isAdmin ) < > ( ( HttpApiToken . apply _ ) . tupled , HttpApiToken . unapply ) < nl > + } < nl > + < nl > + object HttpApiTokenRepo { < nl > + val httpApiTokens = TableQuery [ HttpApiTokenTable ] < nl > + < nl > + val byToken = Compiled { ( token : Rep [ String ] ) ⇒ < nl > + httpApiTokens filter ( _ . token = = = token ) < nl > + } < nl > + < nl > + def find ( token : String ) = byToken ( token ) . result < nl > + < nl > + def create ( token : String , isAdmin : Boolean ) = httpApiTokens + = HttpApiToken ( token , isAdmin ) < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / ActorCliService . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / ActorCliService . scala < nl > index 895dc4c . . 80efb53 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / ActorCliService . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / ActorCliService . scala < nl > @ @ - 10 , 6 + 10 , 7 @ @ object ActorCliService { < nl > final private class ActorCliService extends Actor with ActorLogging { < nl > protected val bots = context . actorOf ( BotsCliService . props , " bots " ) < nl > protected val users = context . actorOf ( UsersCliService . props , " users " ) < nl > + protected val http = context . actorOf ( HttpCliService . props , " http " ) < nl > < nl > def receive = Actor . emptyBehavior < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / HttpCliService . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / HttpCliService . scala < nl > new file mode 100644 < nl > index 0000000 . . 15608c5 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / HttpCliService . scala < nl > @ @ - 0 , 0 + 1 , 28 @ @ < nl > + package im . actor . server . cli < nl > + < nl > + import akka . actor . { Props , Actor } < nl > + import akka . cluster . client . ClusterClientReceptionist < nl > + import akka . pattern . pipe < nl > + import im . actor . server . acl . ACLUtils < nl > + import im . actor . server . db . DbExtension < nl > + import im . actor . server . persist . HttpApiTokenRepo < nl > + < nl > + object HttpCliService { < nl > + def props = Props ( new HttpCliService ) < nl > + } < nl > + < nl > + final class HttpCliService extends Actor { < nl > + import context . dispatcher < nl > + < nl > + ClusterClientReceptionist ( context . system ) . registerService ( self ) < nl > + < nl > + private val db = DbExtension ( context . system ) . db < nl > + < nl > + def receive = { < nl > + case HttpApiTokenCreate ( isAdmin ) ⇒ < nl > + val token = ACLUtils . accessToken ( ) < nl > + ( for { < nl > + _ ← db . run ( HttpApiTokenRepo . create ( token , isAdmin = isAdmin ) ) < nl > + } yield CreateApiTokenResponse ( token ) ) pipeTo sender ( ) < nl > + } < nl > + } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / resources / reference . conf b / actor - server / actor - core / src / main / resources / reference . conf 
 index 4b596c9 . . afe2ffd 100644 
 - - - a / actor - server / actor - core / src / main / resources / reference . conf 
 + + + b / actor - server / actor - core / src / main / resources / reference . conf 
 @ @ - 23 , 6 + 23 , 8 @ @ services { 
 
 google { 
 push { 
 + max - connections : 20 
 + 
 keys : [ ] 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala 
 index 841dfd6 . . d12afcc 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala 
 @ @ - 118 , 16 + 118 , 18 @ @ private object GooglePushDelivery { 
 final case class Delivery ( m : GooglePushMessage , key : String ) 
 
 private val MaxQueue = 100000 
 - private val MaxConnections = 4 
 
 def props = Props ( classOf [ GooglePushDelivery ] ) 
 
 - def flow ( implicit system : ActorSystem , mat : Materializer ) = 
 + def flow ( implicit system : ActorSystem , mat : Materializer ) = { 
 + val maxConnections = system . settings . config . getInt ( " services . google . push . max - connections " ) 
 + 
 Http ( system ) 
 . cachedHostConnectionPoolTls [ GooglePushDelivery . Delivery ] ( 
 - " gcm - http . googleapis . com " , 
 - settings = ConnectionPoolSettings ( system ) . copy ( maxConnections = MaxConnections ) 
 - ) 
 + " gcm - http . googleapis . com " , 
 + settings = ConnectionPoolSettings ( system ) . copy ( maxConnections = maxConnections ) 
 + ) 
 + } 
 } 
 
 private final class GooglePushDelivery extends ActorPublisher [ ( HttpRequest , GooglePushDelivery . Delivery ) ] with ActorLogging {

NEAREST DIFF:
diff - - git a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala 
 index 0c4a211 . . 684761e 100644 
 - - - a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala 
 + + + b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala 
 @ @ - 14 , 9 + 14 , 10 @ @ import scala . concurrent . duration . _ 
 import scala . reflect . ClassTag 
 
 private case class Config ( 
 - command : String = " help " , 
 - createBot : CreateBot = CreateBot ( ) , 
 - updateIsAdmin : UpdateIsAdmin = UpdateIsAdmin ( ) 
 + command : String = " help " , 
 + createBot : CreateBot = CreateBot ( ) , 
 + updateIsAdmin : UpdateIsAdmin = UpdateIsAdmin ( ) , 
 + httpApiTokenCreate : HttpApiTokenCreate = HttpApiTokenCreate ( ) 
 ) 
 
 private [ cli ] trait Request { 
 @ @ - 45 , 12 + 46 , 16 @ @ private [ cli ] case object UpdateIsAdminResponse extends UpdateIsAdminResponse { 
 def apply ( ) : UpdateIsAdminResponse = this 
 } 
 
 + private [ cli ] case class HttpApiTokenCreate ( isAdmin : Boolean = false ) 
 + private case class HttpApiTokenCreateResponse ( token : String ) 
 + 
 private object Commands { 
 val Help = " help " 
 val CreateBot = " create - bot " 
 val AdminGrant = " admin - grant " 
 val AdminRevoke = " admin - revoke " 
 val MigrateUserSequence = " migrate - user - sequence " 
 + val HttpApiTokenCreate = " http - api - token - create " 
 } 
 
 object ActorCli extends App { 
 @ @ - 88 , 6 + 93 , 13 @ @ object ActorCli extends App { 
 cmd ( Commands . MigrateUserSequence ) action { ( _ , c ) ⇒ 
 c . copy ( command = Commands . MigrateUserSequence ) 
 } 
 + cmd ( Commands . HttpApiTokenCreate ) action { ( _ , c ) ⇒ 
 + c . copy ( command = Commands . HttpApiTokenCreate ) 
 + } children ( 
 + opt [ Unit ] ( " admin " ) abbr " a " optional ( ) action { ( x , c ) ⇒ 
 + c . copy ( httpApiTokenCreate = c . httpApiTokenCreate . copy ( isAdmin = true ) ) 
 + } 
 + ) 
 } 
 
 parser . parse ( args , Config ( ) ) foreach { config ⇒ 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala 
 index 4dea619 . . 4756dfe 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala 
 @ @ - 69 , 6 + 69 , 8 @ @ object ACLUtils { 
 nextAccessSalt ( ThreadLocalRandom . current ( ) ) 
 } 
 
 + def accessToken ( ) : String = accessToken ( ThreadLocalRandom . current ( ) ) 
 + 
 def accessToken ( rng : ThreadLocalRandom ) : String = DigestUtils . sha256Hex ( rng . nextLong ( ) . toString ) 
 
 def checkOutPeer ( outPeer : ApiOutPeer , clientAuthId : Long ) ( implicit s : ActorSystem ) : Future [ Boolean ] = { 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala 
 new file mode 100644 
 index 0000000 . . 4245d66 
 - - - / dev / null 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + package im . actor . server . api . http . model 
 + 
 + import play . api . libs . json . { JsArray , Json , JsObject , Writes } 
 + 
 + final case class DataEntity [ A ] ( data : A ) { 
 + def toJson ( implicit writes : Writes [ A ] ) = JsObject ( Map ( " data " → Json . toJson ( data ) ) ) 
 + } 
 + 
 + final case class DataEntities [ A ] ( datas : Seq [ A ] ) { 
 + def toJson ( implicit writes : Writes [ A ] ) = JsObject ( Map ( " data " → JsArray ( datas map ( Json . toJson ( _ ) ) ) ) ) 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - models / src / main / protobuf / model . proto b / actor - server / actor - models / src / main / protobuf / model . proto 
 index 47315f6 . . 4b87762 100644 
 - - - a / actor - server / actor - models / src / main / protobuf / model . proto 
 + + + b / actor - server / actor - models / src / main / protobuf / model . proto 
 @ @ - 59 , 4 + 59 , 9 @ @ message ReactionEvent { 
 message MessageReaction { 
 repeated int32 user _ ids = 3 ; 
 string code = 4 ; 
 + } 
 + 
 + message HttpApiToken { 
 + string token = 1 ; 
 + bool is _ admin = 2 ; 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20151223215842 _ _ CreateApiTokens . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20151223215842 _ _ CreateApiTokens . sql 
 new file mode 100644 
 index 0000000 . . 0312ac3 
 - - - / dev / null 
 + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20151223215842 _ _ CreateApiTokens . sql 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + CREATE TABLE http _ api _ tokens ( 
 + token text NOT NULL , 
 + is _ admin BOOL NOT NULL DEFAULT FALSE , 
 + PRIMARY KEY token 
 + ) 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HttpApiTokenRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HttpApiTokenRepo . scala 
 new file mode 100644 
 index 0000000 . . 5129fbe 
 - - - / dev / null 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HttpApiTokenRepo . scala 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package im . actor . server . persist 
 + 
 + import im . actor . server . db . ActorPostgresDriver . api . _ 
 + import im . actor . server . model . HttpApiToken 
 + 
 + final class HttpApiTokenTable ( tag : Tag ) extends Table [ HttpApiToken ] ( tag , " http _ api _ tokens " ) { 
 + def token = column [ String ] ( " token " , O . PrimaryKey ) 
 + 
 + def isAdmin = column [ Boolean ] ( " is _ admin " ) 
 + 
 + def * = ( token , isAdmin ) < > ( ( HttpApiToken . apply _ ) . tupled , HttpApiToken . unapply ) 
 + } 
 + 
 + object HttpApiTokenRepo { 
 + val httpApiTokens = TableQuery [ HttpApiTokenTable ] 
 + 
 + val byToken = Compiled { ( token : Rep [ String ] ) ⇒ 
 + httpApiTokens filter ( _ . token = = = token ) 
 + } 
 + 
 + def find ( token : String ) = byToken ( token ) . result 
 + 
 + def create ( token : String , isAdmin : Boolean ) = httpApiTokens + = HttpApiToken ( token , isAdmin ) 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / ActorCliService . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / ActorCliService . scala 
 index 895dc4c . . 80efb53 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / ActorCliService . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / ActorCliService . scala 
 @ @ - 10 , 6 + 10 , 7 @ @ object ActorCliService { 
 final private class ActorCliService extends Actor with ActorLogging { 
 protected val bots = context . actorOf ( BotsCliService . props , " bots " ) 
 protected val users = context . actorOf ( UsersCliService . props , " users " ) 
 + protected val http = context . actorOf ( HttpCliService . props , " http " ) 
 
 def receive = Actor . emptyBehavior 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / HttpCliService . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / HttpCliService . scala 
 new file mode 100644 
 index 0000000 . . 15608c5 
 - - - / dev / null 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / HttpCliService . scala 
 @ @ - 0 , 0 + 1 , 28 @ @ 
 + package im . actor . server . cli 
 + 
 + import akka . actor . { Props , Actor } 
 + import akka . cluster . client . ClusterClientReceptionist 
 + import akka . pattern . pipe 
 + import im . actor . server . acl . ACLUtils 
 + import im . actor . server . db . DbExtension 
 + import im . actor . server . persist . HttpApiTokenRepo 
 + 
 + object HttpCliService { 
 + def props = Props ( new HttpCliService ) 
 + } 
 + 
 + final class HttpCliService extends Actor { 
 + import context . dispatcher 
 + 
 + ClusterClientReceptionist ( context . system ) . registerService ( self ) 
 + 
 + private val db = DbExtension ( context . system ) . db 
 + 
 + def receive = { 
 + case HttpApiTokenCreate ( isAdmin ) ⇒ 
 + val token = ACLUtils . accessToken ( ) 
 + ( for { 
 + _ ← db . run ( HttpApiTokenRepo . create ( token , isAdmin = isAdmin ) ) 
 + } yield CreateApiTokenResponse ( token ) ) pipeTo sender ( ) 
 + } 
 + } 
 \ No newline at end of file
