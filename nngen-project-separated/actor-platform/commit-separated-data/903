BLEU SCORE: 0.3564026463354183

TEST MSG: deps ( botkit ) : akka upgrade
GENERATED MSG: feat ( botkit ) : more readable errors

TEST DIFF (one line): diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala < nl > index 4c14644 . . 134c1ce 100644 < nl > - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala < nl > + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala < nl > @ @ - 2 , 17 + 2 , 13 @ @ package im . actor . botkit < nl > < nl > import java . net . URLEncoder < nl > < nl > - import akka . actor . _ < nl > - import akka . http . scaladsl . Http < nl > import akka . stream . scaladsl . { Sink , Source } < nl > import akka . stream . { ActorMaterializer , OverflowStrategy } < nl > import akka . util . Timeout < nl > import im . actor . bots . BotMessages < nl > - import im . actor . bots . BotMessages . ResponseBody < nl > import im . actor . concurrent . ActorFutures < nl > import upickle . default . _ < nl > < nl > - import scala . concurrent . Promise < nl > import scala . concurrent . duration . _ < nl > < nl > object RemoteBot { < nl > diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > index 0eac250 . . 0a02a68 100644 < nl > - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . botkit < nl > < nl > import java . net . URI < nl > < nl > + import akka . NotUsed < nl > import akka . actor . _ < nl > import akka . io . IO < nl > import akka . stream . actor . _ < nl > @ @ - 19 , 10 + 20 , 10 @ @ import scala . util . control . NoStackTrace < nl > private [ botkit ] case object ConnectionClosed < nl > < nl > private [ botkit ] object WebsocketClient { < nl > - def sourceAndSink ( url : String ) ( implicit context : ActorRefFactory ) = { < nl > + def sourceAndSink ( url : String ) ( implicit context : ActorRefFactory ) : ( Source [ String , NotUsed ] , Sink [ String , NotUsed ] ) = { < nl > val actor = context . actorOf ( props ( url ) ) < nl > < nl > - ( Source ( ActorPublisher [ String ] ( actor ) ) , Sink ( ActorSubscriber [ String ] ( actor ) ) ) < nl > + ( Source . fromPublisher ( ActorPublisher [ String ] ( actor ) ) , Sink . fromSubscriber ( ActorSubscriber [ String ] ( actor ) ) ) < nl > } < nl > < nl > def props ( url : String ) = Props ( classOf [ WebsocketClient ] , url ) < nl > @ @ - 50 , 7 + 51 , 7 @ @ private [ botkit ] final class WebsocketClient ( url : String ) < nl > onMessage ( frame ) < nl > case str : String ⇒ < nl > connection ! TextFrame ( str ) < nl > - case spray . can . websocket . UpgradedToWebSocket = > < nl > + case spray . can . websocket . UpgradedToWebSocket ⇒ < nl > self ! spray . io . ConnectionTimeouts . SetIdleTimeout ( 1 . hour ) < nl > case event : Http . ConnectionClosed ⇒ < nl > onClose ( event )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala < nl > index b3a92d2 . . b75ce9b 100644 < nl > - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala < nl > + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala < nl > @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . botkit < nl > import java . net . URLEncoder < nl > < nl > import akka . actor . _ < nl > + import akka . http . scaladsl . Http < nl > import akka . stream . scaladsl . { Sink , Source } < nl > import akka . stream . { ActorMaterializer , OverflowStrategy } < nl > import akka . util . Timeout < nl > @ @ - 17 , 13 + 18 , 13 @ @ import scala . concurrent . duration . _ < nl > object RemoteBot { < nl > val DefaultEndpoint = " wss : / / api . actor . im " < nl > < nl > - private final case class NextRequest ( body : BotMessages . RequestBody , responsePromise : Promise [ ResponseBody ] ) < nl > - < nl > + private final object StreamComplete < nl > } < nl > < nl > abstract class RemoteBot ( token : String , endpoint : String ) extends BotBase with ActorFutures { < nl > < nl > import BotMessages . _ < nl > + import RemoteBot . _ < nl > < nl > override protected implicit val timeout : Timeout = Timeout ( 30 . seconds ) < nl > private implicit val mat = ActorMaterializer ( ) < nl > @ @ - 43 , 7 + 44 , 7 @ @ abstract class RemoteBot ( token : String , endpoint : String ) extends BotBase with A < nl > } < nl > < nl > private final def internalReceive : Receive = workingBehavior ( rqSource ) . orElse ( { < nl > - case ConnectionClosed ⇒ < nl > + case StreamComplete ⇒ < nl > log . warning ( " Disconnected , reinitiating flow " ) < nl > rqSource = initFlow ( ) < nl > } ) < nl > @ @ - 51 , 7 + 52 , 7 @ @ abstract class RemoteBot ( token : String , endpoint : String ) extends BotBase with A < nl > private def initFlow ( ) : ActorRef = { < nl > val ( wsSource , wsSink ) = WebsocketClient . sourceAndSink ( s " $ endpoint / v1 / bots / $ { URLEncoder . encode ( token , " UTF - 8 " ) } " ) < nl > < nl > - wsSource . map ( read [ BotMessageOut ] ) . to ( Sink . actorRef ( self , ConnectionClosed ) ) . run ( ) < nl > + wsSource . map ( read [ BotMessageOut ] ) . to ( Sink . actorRef ( self , StreamComplete ) ) . run ( ) < nl > < nl > Source . actorRef ( bufferSize = 100 , overflowStrategy = OverflowStrategy . fail ) < nl > . map ( write [ BotRequest ] ) < nl > diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > index b5b5c85 . . 8d2f7c3 100644 < nl > - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > @ @ - 49 , 8 + 49 , 8 @ @ private [ botkit ] final class WebsocketClient ( url : String ) < nl > onMessage ( frame ) < nl > case str : String ⇒ < nl > connection ! TextFrame ( str ) < nl > - case _ : Http . ConnectionClosed ⇒ < nl > - onClose ( ) < nl > + case event : Http . ConnectionClosed ⇒ < nl > + onClose ( event ) < nl > context . stop ( self ) < nl > case e : Http . ConnectionException ⇒ < nl > onFailure ( e ) < nl > @ @ - 59 , 7 + 59 , 7 @ @ private [ botkit ] final class WebsocketClient ( url : String ) < nl > < nl > def onMessage ( frame : Frame ) : Unit < nl > < nl > - def onClose ( ) : Unit < nl > + def onClose ( event : Http . ConnectionClosed ) : Unit < nl > < nl > def onFailure ( e : Http . ConnectionException ) : Unit < nl > } < nl > @ @ - 93 , 8 + 93 , 8 @ @ private [ botkit ] final class WebsocketClient ( url : String ) < nl > context . parent ! frame < nl > } < nl > < nl > - override def onClose ( ) = { < nl > - context . parent ! ConnectionClosed < nl > + override def onClose ( e : Http . ConnectionClosed ) = { < nl > + context . parent ! e < nl > } < nl > < nl > override def onFailure ( e : Http . ConnectionException ) = { < nl > @ @ - 125 , 9 + 125 , 8 @ @ private [ botkit ] final class WebsocketClient ( url : String ) < nl > case ActorSubscriberMessage . OnNext ( textToSend : String ) ⇒ < nl > log . info ( " > > { } " , textToSend ) < nl > client ! textToSend < nl > - case ConnectionClosed ⇒ < nl > - log . error ( " Connection closed " ) < nl > - onErrorThenStop ( new RuntimeException ( " Connection closed " ) with NoStackTrace ) < nl > + case e : Http . ConnectionClosed ⇒ < nl > + onErrorThenStop ( new RuntimeException ( s " Connection closed : $ e " ) with NoStackTrace ) < nl > case Terminated ( ` client ` ) ⇒ < nl > onErrorThenStop ( new RuntimeException ( " Failed to connect " ) with NoStackTrace ) < nl > case unmatched ⇒ < nl > diff - - git a / actor - server / bin / merge - to - master b / actor - server / bin / merge - to - master < nl > index 57bea44 . . 617c3fc 100755 < nl > - - - a / actor - server / bin / merge - to - master < nl > + + + b / actor - server / bin / merge - to - master < nl > @ @ - 8 , 7 + 8 , 7 @ @ if [ $ ? - eq 0 ] < nl > then < nl > git checkout master < nl > git pull - - rebase origin master < nl > - git merge server / master < nl > + git merge - - ff server / master < nl > git push origin master < nl > else < nl > echo " Branch is dirty "

TEST DIFF:
diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala 
 index 4c14644 . . 134c1ce 100644 
 - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala 
 + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala 
 @ @ - 2 , 17 + 2 , 13 @ @ package im . actor . botkit 
 
 import java . net . URLEncoder 
 
 - import akka . actor . _ 
 - import akka . http . scaladsl . Http 
 import akka . stream . scaladsl . { Sink , Source } 
 import akka . stream . { ActorMaterializer , OverflowStrategy } 
 import akka . util . Timeout 
 import im . actor . bots . BotMessages 
 - import im . actor . bots . BotMessages . ResponseBody 
 import im . actor . concurrent . ActorFutures 
 import upickle . default . _ 
 
 - import scala . concurrent . Promise 
 import scala . concurrent . duration . _ 
 
 object RemoteBot { 
 diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 index 0eac250 . . 0a02a68 100644 
 - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . botkit 
 
 import java . net . URI 
 
 + import akka . NotUsed 
 import akka . actor . _ 
 import akka . io . IO 
 import akka . stream . actor . _ 
 @ @ - 19 , 10 + 20 , 10 @ @ import scala . util . control . NoStackTrace 
 private [ botkit ] case object ConnectionClosed 
 
 private [ botkit ] object WebsocketClient { 
 - def sourceAndSink ( url : String ) ( implicit context : ActorRefFactory ) = { 
 + def sourceAndSink ( url : String ) ( implicit context : ActorRefFactory ) : ( Source [ String , NotUsed ] , Sink [ String , NotUsed ] ) = { 
 val actor = context . actorOf ( props ( url ) ) 
 
 - ( Source ( ActorPublisher [ String ] ( actor ) ) , Sink ( ActorSubscriber [ String ] ( actor ) ) ) 
 + ( Source . fromPublisher ( ActorPublisher [ String ] ( actor ) ) , Sink . fromSubscriber ( ActorSubscriber [ String ] ( actor ) ) ) 
 } 
 
 def props ( url : String ) = Props ( classOf [ WebsocketClient ] , url ) 
 @ @ - 50 , 7 + 51 , 7 @ @ private [ botkit ] final class WebsocketClient ( url : String ) 
 onMessage ( frame ) 
 case str : String ⇒ 
 connection ! TextFrame ( str ) 
 - case spray . can . websocket . UpgradedToWebSocket = > 
 + case spray . can . websocket . UpgradedToWebSocket ⇒ 
 self ! spray . io . ConnectionTimeouts . SetIdleTimeout ( 1 . hour ) 
 case event : Http . ConnectionClosed ⇒ 
 onClose ( event )

NEAREST DIFF:
diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala 
 index b3a92d2 . . b75ce9b 100644 
 - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala 
 + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / RemoteBot . scala 
 @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . botkit 
 import java . net . URLEncoder 
 
 import akka . actor . _ 
 + import akka . http . scaladsl . Http 
 import akka . stream . scaladsl . { Sink , Source } 
 import akka . stream . { ActorMaterializer , OverflowStrategy } 
 import akka . util . Timeout 
 @ @ - 17 , 13 + 18 , 13 @ @ import scala . concurrent . duration . _ 
 object RemoteBot { 
 val DefaultEndpoint = " wss : / / api . actor . im " 
 
 - private final case class NextRequest ( body : BotMessages . RequestBody , responsePromise : Promise [ ResponseBody ] ) 
 - 
 + private final object StreamComplete 
 } 
 
 abstract class RemoteBot ( token : String , endpoint : String ) extends BotBase with ActorFutures { 
 
 import BotMessages . _ 
 + import RemoteBot . _ 
 
 override protected implicit val timeout : Timeout = Timeout ( 30 . seconds ) 
 private implicit val mat = ActorMaterializer ( ) 
 @ @ - 43 , 7 + 44 , 7 @ @ abstract class RemoteBot ( token : String , endpoint : String ) extends BotBase with A 
 } 
 
 private final def internalReceive : Receive = workingBehavior ( rqSource ) . orElse ( { 
 - case ConnectionClosed ⇒ 
 + case StreamComplete ⇒ 
 log . warning ( " Disconnected , reinitiating flow " ) 
 rqSource = initFlow ( ) 
 } ) 
 @ @ - 51 , 7 + 52 , 7 @ @ abstract class RemoteBot ( token : String , endpoint : String ) extends BotBase with A 
 private def initFlow ( ) : ActorRef = { 
 val ( wsSource , wsSink ) = WebsocketClient . sourceAndSink ( s " $ endpoint / v1 / bots / $ { URLEncoder . encode ( token , " UTF - 8 " ) } " ) 
 
 - wsSource . map ( read [ BotMessageOut ] ) . to ( Sink . actorRef ( self , ConnectionClosed ) ) . run ( ) 
 + wsSource . map ( read [ BotMessageOut ] ) . to ( Sink . actorRef ( self , StreamComplete ) ) . run ( ) 
 
 Source . actorRef ( bufferSize = 100 , overflowStrategy = OverflowStrategy . fail ) 
 . map ( write [ BotRequest ] ) 
 diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 index b5b5c85 . . 8d2f7c3 100644 
 - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 @ @ - 49 , 8 + 49 , 8 @ @ private [ botkit ] final class WebsocketClient ( url : String ) 
 onMessage ( frame ) 
 case str : String ⇒ 
 connection ! TextFrame ( str ) 
 - case _ : Http . ConnectionClosed ⇒ 
 - onClose ( ) 
 + case event : Http . ConnectionClosed ⇒ 
 + onClose ( event ) 
 context . stop ( self ) 
 case e : Http . ConnectionException ⇒ 
 onFailure ( e ) 
 @ @ - 59 , 7 + 59 , 7 @ @ private [ botkit ] final class WebsocketClient ( url : String ) 
 
 def onMessage ( frame : Frame ) : Unit 
 
 - def onClose ( ) : Unit 
 + def onClose ( event : Http . ConnectionClosed ) : Unit 
 
 def onFailure ( e : Http . ConnectionException ) : Unit 
 } 
 @ @ - 93 , 8 + 93 , 8 @ @ private [ botkit ] final class WebsocketClient ( url : String ) 
 context . parent ! frame 
 } 
 
 - override def onClose ( ) = { 
 - context . parent ! ConnectionClosed 
 + override def onClose ( e : Http . ConnectionClosed ) = { 
 + context . parent ! e 
 } 
 
 override def onFailure ( e : Http . ConnectionException ) = { 
 @ @ - 125 , 9 + 125 , 8 @ @ private [ botkit ] final class WebsocketClient ( url : String ) 
 case ActorSubscriberMessage . OnNext ( textToSend : String ) ⇒ 
 log . info ( " > > { } " , textToSend ) 
 client ! textToSend 
 - case ConnectionClosed ⇒ 
 - log . error ( " Connection closed " ) 
 - onErrorThenStop ( new RuntimeException ( " Connection closed " ) with NoStackTrace ) 
 + case e : Http . ConnectionClosed ⇒ 
 + onErrorThenStop ( new RuntimeException ( s " Connection closed : $ e " ) with NoStackTrace ) 
 case Terminated ( ` client ` ) ⇒ 
 onErrorThenStop ( new RuntimeException ( " Failed to connect " ) with NoStackTrace ) 
 case unmatched ⇒ 
 diff - - git a / actor - server / bin / merge - to - master b / actor - server / bin / merge - to - master 
 index 57bea44 . . 617c3fc 100755 
 - - - a / actor - server / bin / merge - to - master 
 + + + b / actor - server / bin / merge - to - master 
 @ @ - 8 , 7 + 8 , 7 @ @ if [ $ ? - eq 0 ] 
 then 
 git checkout master 
 git pull - - rebase origin master 
 - git merge server / master 
 + git merge - - ff server / master 
 git push origin master 
 else 
 echo " Branch is dirty "
