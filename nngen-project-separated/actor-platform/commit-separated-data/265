BLEU SCORE: 0.09717028343213059

TEST MSG: fix ( core ) : separate own send date state
GENERATED MSG: feat ( core + android + web ) : add isStarted flag

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesFragment . java < nl > index 68a9141 . . 9a517f0 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesFragment . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesFragment . java < nl > @ @ - 171 , 7 + 171 , 7 @ @ public class MessagesFragment extends DisplayListFragment < Message , MessageHolder < nl > } < nl > < nl > protected void bindDisplayListLoad ( boolean notify ) { < nl > - firstUnread = messenger ( ) . loadFirstUnread ( peer ) ; < nl > + firstUnread = messenger ( ) . loadLastMessageDate ( peer ) ; < nl > < nl > Log . d ( " DIAPLAY _ LIST " , " bindDisplayListLoad : " + notify ) ; < nl > final BindedDisplayList < Message > list = getDisplayList ( ) ; < nl > @ @ - 327 , 7 + 327 , 7 @ @ public class MessagesFragment extends DisplayListFragment < Message , MessageHolder < nl > } < nl > return true ; < nl > } else { < nl > - if ( message . getContent ( ) instanceof TextContent & & message . getSenderId ( ) = = myUid ( ) & & message . getSortDate ( ) > = messenger ( ) . loadFirstUnread ( peer ) ) { < nl > + if ( message . getContent ( ) instanceof TextContent & & message . getSenderId ( ) = = myUid ( ) & & message . getSortDate ( ) > = messenger ( ) . loadLastMessageDate ( peer ) ) { < nl > ( ( ChatActivity ) getActivity ( ) ) . onEditTextMessage ( message . getRid ( ) , ( ( TextContent ) message . getContent ( ) ) . getText ( ) ) ; < nl > return true ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 6a1ac6f . . 8852dd8 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 1099 , 10 + 1099 , 10 @ @ public class Messenger { < nl > * @ param peer destination peer < nl > * @ return rid of last read message < nl > * / < nl > - @ ObjectiveCName ( " loadFirstUnread : " ) < nl > + @ ObjectiveCName ( " loadLastMessageDate : " ) < nl > @ Deprecated < nl > - public long loadFirstUnread ( Peer peer ) { < nl > - return getConversationVM ( peer ) . getOwnReadDate ( ) . get ( ) ; < nl > + public long loadLastMessageDate ( Peer peer ) { < nl > + return Math . max ( getConversationVM ( peer ) . getOwnReadDate ( ) . get ( ) , getConversationVM ( peer ) . getOwnSendDate ( ) . get ( ) ) ; < nl > } < nl > < nl > / * * < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ConversationState . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ConversationState . java < nl > index 23f3c9f . . 440b296 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ConversationState . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ConversationState . java < nl > @ @ - 19 , 7 + 19 , 7 @ @ public class ConversationState extends BserObject implements KeyValueItem { < nl > public static BserCreator < ConversationState > CREATOR = ConversationState : : new ; < nl > < nl > public static ValueDefaultCreator < ConversationState > DEFAULT _ CREATOR = id - > < nl > - new ConversationState ( Peer . fromUniqueId ( id ) , false , 0 , 0 , 0 , 0 , 0 ) ; < nl > + new ConversationState ( Peer . fromUniqueId ( id ) , false , 0 , 0 , 0 , 0 , 0 , 0 ) ; < nl > < nl > public static final String ENTITY _ NAME = " ConversationState " ; < nl > < nl > @ @ - 27 , 6 + 27 , 7 @ @ public class ConversationState extends BserObject implements KeyValueItem { < nl > private boolean isLoaded ; < nl > private int unreadCount ; < nl > private long inMaxMessageDate ; < nl > + private long outSendDate ; < nl > private long inReadDate ; < nl > private long outReadDate ; < nl > private long outReceiveDate ; < nl > @ @ - 36 , 7 + 37 , 8 @ @ public class ConversationState extends BserObject implements KeyValueItem { < nl > long inMaxMessageDate , < nl > long inReadDate , < nl > long outReadDate , < nl > - long outReceiveDate ) { < nl > + long outReceiveDate , < nl > + long outSendDate ) { < nl > this . peer = peer ; < nl > this . isLoaded = isLoaded ; < nl > this . unreadCount = unreadCount ; < nl > @ @ - 44 , 6 + 46 , 7 @ @ public class ConversationState extends BserObject implements KeyValueItem { < nl > this . inReadDate = inReadDate ; < nl > this . outReadDate = outReadDate ; < nl > this . outReceiveDate = outReceiveDate ; < nl > + this . outSendDate = outSendDate ; < nl > } < nl > < nl > private ConversationState ( ) { < nl > @ @ - 66 , 6 + 69 , 10 @ @ public class ConversationState extends BserObject implements KeyValueItem { < nl > return inReadDate ; < nl > } < nl > < nl > + public long getOutSendDate ( ) { < nl > + return outSendDate ; < nl > + } < nl > + < nl > public long getOutReadDate ( ) { < nl > return outReadDate ; < nl > } < nl > @ @ - 79 , 29 + 86 , 35 @ @ public class ConversationState extends BserObject implements KeyValueItem { < nl > } < nl > < nl > public ConversationState changeIsLoaded ( boolean isLoaded ) { < nl > - return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate ) ; < nl > + return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate , outSendDate ) ; < nl > } < nl > < nl > public ConversationState changeInReadDate ( long inReadDate ) { < nl > - return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate ) ; < nl > + return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate , outSendDate ) ; < nl > } < nl > < nl > public ConversationState changeInMaxDate ( long inMaxMessageDate ) { < nl > - return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate ) ; < nl > + return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate , outSendDate ) ; < nl > } < nl > < nl > public ConversationState changeOutReceiveDate ( long outReceiveDate ) { < nl > - return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate ) ; < nl > + return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate , outSendDate ) ; < nl > } < nl > < nl > public ConversationState changeOutReadDate ( long outReadDate ) { < nl > - return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate ) ; < nl > + return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate , outSendDate ) ; < nl > } < nl > < nl > public ConversationState changeCounter ( int unreadCount ) { < nl > - return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate ) ; < nl > + return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate , outSendDate ) ; < nl > + } < nl > + < nl > + < nl > + public ConversationState changeOutSendDate ( long outSendDate ) { < nl > + return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate , outSendDate ) ; < nl > } < nl > < nl > + < nl > @ Override < nl > public void parse ( BserValues values ) throws IOException { < nl > peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; < nl > @ @ - 110 , 6 + 123 , 7 @ @ public class ConversationState extends BserObject implements KeyValueItem { < nl > outReceiveDate = values . getLong ( 4 , 0 ) ; < nl > outReadDate = values . getLong ( 5 , 0 ) ; < nl > unreadCount = values . getInt ( 6 ) ; < nl > + outSendDate = values . getLong ( 7 , 0 ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 120 , 6 + 134 , 7 @ @ public class ConversationState extends BserObject implements KeyValueItem { < nl > writer . writeLong ( 4 , outReceiveDate ) ; < nl > writer . writeLong ( 5 , outReadDate ) ; < nl > writer . writeInt ( 6 , unreadCount ) ; < nl > + writer . writeLong ( 7 , outSendDate ) ; < nl > } < nl > < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > index 7bf870f . . afc32b1 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > @ @ - 335 , 6 + 335 , 9 @ @ public class RouterActor extends ModuleActor { < nl > . changeState ( MessageState . SENT ) ; < nl > conversation ( peer ) . addOrUpdateItem ( updatedMsg ) ; < nl > < nl > + ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; < nl > + conversationStates . addOrUpdateItem ( state . changeOutSendDate ( date ) ) ; < nl > + < nl > / / Notify dialogs < nl > return getDialogsRouter ( ) . onMessage ( peer , updatedMsg , - 1 ) ; < nl > } else { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / DisplayLists . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / DisplayLists . java < nl > index 756dd9e . . a614607 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / DisplayLists . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / DisplayLists . java < nl > @ @ - 14 , 9 + 14 , 10 @ @ import im . actor . core . entity . SearchEntity ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . runtime . Storage ; < nl > - import im . actor . runtime . bser . BserCreator ; < nl > import im . actor . runtime . mvvm . PlatformDisplayList ; < nl > < nl > + import static im . actor . sdk . util . ActorSDKMessenger . messenger ; < nl > + < nl > public class DisplayLists extends AbsModule { < nl > < nl > private PlatformDisplayList < Dialog > dialogGlobalList ; < nl > @ @ - 96 , 7 + 97 , 7 @ @ public class DisplayLists extends AbsModule { < nl > PlatformDisplayList < Message > res = Storage . createDisplayList ( context ( ) . getMessagesModule ( ) . getConversationEngine ( peer ) , < nl > isShared , Message . ENTITY _ NAME ) ; < nl > < nl > - long lastRead = context ( ) . getMessagesModule ( ) . getConversationVM ( peer ) . getOwnReadDate ( ) . get ( ) ; < nl > + long lastRead = messenger ( ) . loadLastMessageDate ( peer ) ; < nl > < nl > if ( lastRead ! = 0 ) { < nl > res . initCenter ( lastRead ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / ConversationVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / ConversationVM . java < nl > index b2c6f76 . . 0a31c86 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / ConversationVM . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / ConversationVM . java < nl > @ @ - 17 , 6 + 17 , 7 @ @ public class ConversationVM extends BaseValueModel < ConversationState > { < nl > < nl > private BooleanValueModel isLoaded ; < nl > private ValueModel < Long > ownReadDate ; < nl > + private ValueModel < Long > ownSendDate ; < nl > < nl > private ValueModel < Long > readDate ; < nl > private ValueModel < Long > receiveDate ; < nl > @ @ - 26 , 6 + 27 , 7 @ @ public class ConversationVM extends BaseValueModel < ConversationState > { < nl > < nl > isLoaded = new BooleanValueModel ( " chat . is _ loaded . " + rawObj . getPeer ( ) , rawObj . isLoaded ( ) ) ; < nl > ownReadDate = new ValueModel < > ( " chat . own _ read _ date " + rawObj . getPeer ( ) , rawObj . getInReadDate ( ) ) ; < nl > + ownSendDate = new ValueModel < > ( " chat . own _ send _ date " + rawObj . getPeer ( ) , rawObj . getOutSendDate ( ) ) ; < nl > readDate = new ValueModel < > ( " chat . read _ date " + rawObj . getPeer ( ) , rawObj . getOutReadDate ( ) ) ; < nl > receiveDate = new ValueModel < > ( " chat . receive _ date " + rawObj . getPeer ( ) , rawObj . getOutReceiveDate ( ) ) ; < nl > } < nl > @ @ - 38 , 6 + 40 , 10 @ @ public class ConversationVM extends BaseValueModel < ConversationState > { < nl > return ownReadDate ; < nl > } < nl > < nl > + public ValueModel < Long > getOwnSendDate ( ) { < nl > + return ownSendDate ; < nl > + } < nl > + < nl > public ValueModel < Long > getReadDate ( ) { < nl > return readDate ; < nl > } < nl > @ @ - 50 , 6 + 56 , 7 @ @ public class ConversationVM extends BaseValueModel < ConversationState > { < nl > protected void updateValues ( ConversationState rawObj ) { < nl > isLoaded . change ( rawObj . isLoaded ( ) ) ; < nl > ownReadDate . change ( rawObj . getInReadDate ( ) ) ; < nl > + ownSendDate . change ( rawObj . getOutSendDate ( ) ) ; < nl > readDate . change ( rawObj . getOutReadDate ( ) ) ; < nl > receiveDate . change ( rawObj . getOutReceiveDate ( ) ) ; < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java < nl > index 2a529bf . . b102284 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java < nl > @ @ - 66 , 6 + 66 , 7 @ @ import im . actor . runtime . actors . ActorSystem ; < nl > import im . actor . runtime . actors . Props ; < nl > import im . actor . runtime . actors . messages . PoisonPill ; < nl > import im . actor . runtime . actors . messages . Void ; < nl > + import im . actor . runtime . function . Consumer ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . ActorStyle ; < nl > import im . actor . sdk . R ; < nl > @ @ - 237 , 7 + 238 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > / / Reading peer of chat < nl > intent = getIntent ( ) ; < nl > peer = Peer . fromUniqueId ( intent . getExtras ( ) . getLong ( EXTRA _ CHAT _ PEER ) ) ; < nl > - < nl > + checkIsBot ( ) ; < nl > if ( saveInstance = = null ) { < nl > / / Set compose state for auto - showing menu < nl > isCompose = intent . getExtras ( ) . getBoolean ( EXTRA _ CHAT _ COMPOSE , false ) ; < nl > @ @ - 463 , 6 + 464 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > emptyBotSend = findViewById ( R . id . botEmptyTextBlock ) ; < nl > emptyBotHint = ( TextView ) findViewById ( R . id . botEmptyHint ) ; < nl > < nl > + checkEmptyBot ( ) ; < nl > } < nl > < nl > private void startCamera ( ) { < nl > @ @ - 568 , 7 + 570 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > < nl > @ Override < nl > public void onResume ( ) { < nl > - isBot = ( peer . getPeerType ( ) = = PeerType . PRIVATE & & users ( ) . get ( peer . getPeerId ( ) ) . isBot ( ) ) ; < nl > + checkIsBot ( ) ; < nl > super . onResume ( ) ; < nl > < nl > if ( peer . getPeerType ( ) = = PeerType . PRIVATE & & menu ! = null ) { < nl > @ @ - 696 , 15 + 698 , 22 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > < nl > } < nl > < nl > + public void checkIsBot ( ) { < nl > + isBot = ( peer . getPeerType ( ) = = PeerType . PRIVATE & & users ( ) . get ( peer . getPeerId ( ) ) . isBot ( ) ) ; < nl > + } < nl > + < nl > public void checkEmptyBot ( ) { < nl > if ( isBot ) { < nl > - if ( messenger ( ) . checkChatIsempty ( peer ) ) { < nl > - showView ( emptyBotSend ) ; < nl > - showView ( emptyBotHint ) ; < nl > - } else { < nl > - hideView ( emptyBotSend ) ; < nl > - hideView ( emptyBotHint ) ; < nl > - } < nl > + messenger ( ) . isStarted ( peer . getPeerId ( ) ) < nl > + . then ( empty - > { < nl > + if ( empty ) { < nl > + showView ( emptyBotSend ) ; < nl > + showView ( emptyBotHint ) ; < nl > + } else { < nl > + hideView ( emptyBotSend ) ; < nl > + hideView ( emptyBotHint ) ; < nl > + } < nl > + } ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > index fd9d763 . . 045d631 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > @ @ - 507 , 7 + 507 , 4 @ @ public class AndroidMessenger extends im . actor . core . Messenger { < nl > return modules . getEvents ( ) ; < nl > } < nl > < nl > - public boolean checkChatIsempty ( Peer peer ) { < nl > - return modules . getMessagesModule ( ) . getConversationEngine ( peer ) . getCount ( ) = = 0 ; < nl > - } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index c0d2b8a . . f61a912 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 1569 , 6 + 1569 , 18 @ @ public class Messenger { < nl > . failure ( e - > callback . onError ( e ) ) ; < nl > } < nl > < nl > + / * * < nl > + * Check if chat with bot is started < nl > + * < nl > + * @ param uid bot user id < nl > + * @ return is chat with bot started < nl > + * / < nl > + @ ObjectiveCName ( " isStartedWithUid : " ) < nl > + public Promise < Boolean > isStarted ( int uid ) { < nl > + return modules . getMessagesModule ( ) . chatIsEmpty ( Peer . user ( uid ) ) ; < nl > + } < nl > + < nl > + < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Blocked List < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > index 0a85356 . . 76ffb68 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > @ @ - 310 , 6 + 310 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > ) ) ; < nl > } < nl > < nl > + public Promise < Boolean > chatIsEmpty ( Peer peer ) { < nl > + return new Promise < > ( resolver - > resolver . result ( getConversationEngine ( peer ) . getCount ( ) = = 0 ) ) ; < nl > + } < nl > + < nl > < nl > public void forwardContent ( Peer peer , AbsContent content ) { < nl > sendMessageActor . send ( new SenderActor . ForwardContent ( peer , content ) ) ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesFragment . java 
 index 68a9141 . . 9a517f0 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesFragment . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesFragment . java 
 @ @ - 171 , 7 + 171 , 7 @ @ public class MessagesFragment extends DisplayListFragment < Message , MessageHolder 
 } 
 
 protected void bindDisplayListLoad ( boolean notify ) { 
 - firstUnread = messenger ( ) . loadFirstUnread ( peer ) ; 
 + firstUnread = messenger ( ) . loadLastMessageDate ( peer ) ; 
 
 Log . d ( " DIAPLAY _ LIST " , " bindDisplayListLoad : " + notify ) ; 
 final BindedDisplayList < Message > list = getDisplayList ( ) ; 
 @ @ - 327 , 7 + 327 , 7 @ @ public class MessagesFragment extends DisplayListFragment < Message , MessageHolder 
 } 
 return true ; 
 } else { 
 - if ( message . getContent ( ) instanceof TextContent & & message . getSenderId ( ) = = myUid ( ) & & message . getSortDate ( ) > = messenger ( ) . loadFirstUnread ( peer ) ) { 
 + if ( message . getContent ( ) instanceof TextContent & & message . getSenderId ( ) = = myUid ( ) & & message . getSortDate ( ) > = messenger ( ) . loadLastMessageDate ( peer ) ) { 
 ( ( ChatActivity ) getActivity ( ) ) . onEditTextMessage ( message . getRid ( ) , ( ( TextContent ) message . getContent ( ) ) . getText ( ) ) ; 
 return true ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 6a1ac6f . . 8852dd8 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 1099 , 10 + 1099 , 10 @ @ public class Messenger { 
 * @ param peer destination peer 
 * @ return rid of last read message 
 * / 
 - @ ObjectiveCName ( " loadFirstUnread : " ) 
 + @ ObjectiveCName ( " loadLastMessageDate : " ) 
 @ Deprecated 
 - public long loadFirstUnread ( Peer peer ) { 
 - return getConversationVM ( peer ) . getOwnReadDate ( ) . get ( ) ; 
 + public long loadLastMessageDate ( Peer peer ) { 
 + return Math . max ( getConversationVM ( peer ) . getOwnReadDate ( ) . get ( ) , getConversationVM ( peer ) . getOwnSendDate ( ) . get ( ) ) ; 
 } 
 
 / * * 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ConversationState . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ConversationState . java 
 index 23f3c9f . . 440b296 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ConversationState . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ConversationState . java 
 @ @ - 19 , 7 + 19 , 7 @ @ public class ConversationState extends BserObject implements KeyValueItem { 
 public static BserCreator < ConversationState > CREATOR = ConversationState : : new ; 
 
 public static ValueDefaultCreator < ConversationState > DEFAULT _ CREATOR = id - > 
 - new ConversationState ( Peer . fromUniqueId ( id ) , false , 0 , 0 , 0 , 0 , 0 ) ; 
 + new ConversationState ( Peer . fromUniqueId ( id ) , false , 0 , 0 , 0 , 0 , 0 , 0 ) ; 
 
 public static final String ENTITY _ NAME = " ConversationState " ; 
 
 @ @ - 27 , 6 + 27 , 7 @ @ public class ConversationState extends BserObject implements KeyValueItem { 
 private boolean isLoaded ; 
 private int unreadCount ; 
 private long inMaxMessageDate ; 
 + private long outSendDate ; 
 private long inReadDate ; 
 private long outReadDate ; 
 private long outReceiveDate ; 
 @ @ - 36 , 7 + 37 , 8 @ @ public class ConversationState extends BserObject implements KeyValueItem { 
 long inMaxMessageDate , 
 long inReadDate , 
 long outReadDate , 
 - long outReceiveDate ) { 
 + long outReceiveDate , 
 + long outSendDate ) { 
 this . peer = peer ; 
 this . isLoaded = isLoaded ; 
 this . unreadCount = unreadCount ; 
 @ @ - 44 , 6 + 46 , 7 @ @ public class ConversationState extends BserObject implements KeyValueItem { 
 this . inReadDate = inReadDate ; 
 this . outReadDate = outReadDate ; 
 this . outReceiveDate = outReceiveDate ; 
 + this . outSendDate = outSendDate ; 
 } 
 
 private ConversationState ( ) { 
 @ @ - 66 , 6 + 69 , 10 @ @ public class ConversationState extends BserObject implements KeyValueItem { 
 return inReadDate ; 
 } 
 
 + public long getOutSendDate ( ) { 
 + return outSendDate ; 
 + } 
 + 
 public long getOutReadDate ( ) { 
 return outReadDate ; 
 } 
 @ @ - 79 , 29 + 86 , 35 @ @ public class ConversationState extends BserObject implements KeyValueItem { 
 } 
 
 public ConversationState changeIsLoaded ( boolean isLoaded ) { 
 - return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate ) ; 
 + return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate , outSendDate ) ; 
 } 
 
 public ConversationState changeInReadDate ( long inReadDate ) { 
 - return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate ) ; 
 + return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate , outSendDate ) ; 
 } 
 
 public ConversationState changeInMaxDate ( long inMaxMessageDate ) { 
 - return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate ) ; 
 + return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate , outSendDate ) ; 
 } 
 
 public ConversationState changeOutReceiveDate ( long outReceiveDate ) { 
 - return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate ) ; 
 + return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate , outSendDate ) ; 
 } 
 
 public ConversationState changeOutReadDate ( long outReadDate ) { 
 - return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate ) ; 
 + return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate , outSendDate ) ; 
 } 
 
 public ConversationState changeCounter ( int unreadCount ) { 
 - return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate ) ; 
 + return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate , outSendDate ) ; 
 + } 
 + 
 + 
 + public ConversationState changeOutSendDate ( long outSendDate ) { 
 + return new ConversationState ( peer , isLoaded , unreadCount , inMaxMessageDate , inReadDate , outReadDate , outReceiveDate , outSendDate ) ; 
 } 
 
 + 
 @ Override 
 public void parse ( BserValues values ) throws IOException { 
 peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; 
 @ @ - 110 , 6 + 123 , 7 @ @ public class ConversationState extends BserObject implements KeyValueItem { 
 outReceiveDate = values . getLong ( 4 , 0 ) ; 
 outReadDate = values . getLong ( 5 , 0 ) ; 
 unreadCount = values . getInt ( 6 ) ; 
 + outSendDate = values . getLong ( 7 , 0 ) ; 
 } 
 
 @ Override 
 @ @ - 120 , 6 + 134 , 7 @ @ public class ConversationState extends BserObject implements KeyValueItem { 
 writer . writeLong ( 4 , outReceiveDate ) ; 
 writer . writeLong ( 5 , outReadDate ) ; 
 writer . writeInt ( 6 , unreadCount ) ; 
 + writer . writeLong ( 7 , outSendDate ) ; 
 } 
 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 index 7bf870f . . afc32b1 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 @ @ - 335 , 6 + 335 , 9 @ @ public class RouterActor extends ModuleActor { 
 . changeState ( MessageState . SENT ) ; 
 conversation ( peer ) . addOrUpdateItem ( updatedMsg ) ; 
 
 + ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; 
 + conversationStates . addOrUpdateItem ( state . changeOutSendDate ( date ) ) ; 
 + 
 / / Notify dialogs 
 return getDialogsRouter ( ) . onMessage ( peer , updatedMsg , - 1 ) ; 
 } else { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / DisplayLists . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / DisplayLists . java 
 index 756dd9e . . a614607 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / DisplayLists . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / DisplayLists . java 
 @ @ - 14 , 9 + 14 , 10 @ @ import im . actor . core . entity . SearchEntity ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . runtime . Storage ; 
 - import im . actor . runtime . bser . BserCreator ; 
 import im . actor . runtime . mvvm . PlatformDisplayList ; 
 
 + import static im . actor . sdk . util . ActorSDKMessenger . messenger ; 
 + 
 public class DisplayLists extends AbsModule { 
 
 private PlatformDisplayList < Dialog > dialogGlobalList ; 
 @ @ - 96 , 7 + 97 , 7 @ @ public class DisplayLists extends AbsModule { 
 PlatformDisplayList < Message > res = Storage . createDisplayList ( context ( ) . getMessagesModule ( ) . getConversationEngine ( peer ) , 
 isShared , Message . ENTITY _ NAME ) ; 
 
 - long lastRead = context ( ) . getMessagesModule ( ) . getConversationVM ( peer ) . getOwnReadDate ( ) . get ( ) ; 
 + long lastRead = messenger ( ) . loadLastMessageDate ( peer ) ; 
 
 if ( lastRead ! = 0 ) { 
 res . initCenter ( lastRead ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / ConversationVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / ConversationVM . java 
 index b2c6f76 . . 0a31c86 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / ConversationVM . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / ConversationVM . java 
 @ @ - 17 , 6 + 17 , 7 @ @ public class ConversationVM extends BaseValueModel < ConversationState > { 
 
 private BooleanValueModel isLoaded ; 
 private ValueModel < Long > ownReadDate ; 
 + private ValueModel < Long > ownSendDate ; 
 
 private ValueModel < Long > readDate ; 
 private ValueModel < Long > receiveDate ; 
 @ @ - 26 , 6 + 27 , 7 @ @ public class ConversationVM extends BaseValueModel < ConversationState > { 
 
 isLoaded = new BooleanValueModel ( " chat . is _ loaded . " + rawObj . getPeer ( ) , rawObj . isLoaded ( ) ) ; 
 ownReadDate = new ValueModel < > ( " chat . own _ read _ date " + rawObj . getPeer ( ) , rawObj . getInReadDate ( ) ) ; 
 + ownSendDate = new ValueModel < > ( " chat . own _ send _ date " + rawObj . getPeer ( ) , rawObj . getOutSendDate ( ) ) ; 
 readDate = new ValueModel < > ( " chat . read _ date " + rawObj . getPeer ( ) , rawObj . getOutReadDate ( ) ) ; 
 receiveDate = new ValueModel < > ( " chat . receive _ date " + rawObj . getPeer ( ) , rawObj . getOutReceiveDate ( ) ) ; 
 } 
 @ @ - 38 , 6 + 40 , 10 @ @ public class ConversationVM extends BaseValueModel < ConversationState > { 
 return ownReadDate ; 
 } 
 
 + public ValueModel < Long > getOwnSendDate ( ) { 
 + return ownSendDate ; 
 + } 
 + 
 public ValueModel < Long > getReadDate ( ) { 
 return readDate ; 
 } 
 @ @ - 50 , 6 + 56 , 7 @ @ public class ConversationVM extends BaseValueModel < ConversationState > { 
 protected void updateValues ( ConversationState rawObj ) { 
 isLoaded . change ( rawObj . isLoaded ( ) ) ; 
 ownReadDate . change ( rawObj . getInReadDate ( ) ) ; 
 + ownSendDate . change ( rawObj . getOutSendDate ( ) ) ; 
 readDate . change ( rawObj . getOutReadDate ( ) ) ; 
 receiveDate . change ( rawObj . getOutReceiveDate ( ) ) ; 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java 
 index 2a529bf . . b102284 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java 
 @ @ - 66 , 6 + 66 , 7 @ @ import im . actor . runtime . actors . ActorSystem ; 
 import im . actor . runtime . actors . Props ; 
 import im . actor . runtime . actors . messages . PoisonPill ; 
 import im . actor . runtime . actors . messages . Void ; 
 + import im . actor . runtime . function . Consumer ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . ActorStyle ; 
 import im . actor . sdk . R ; 
 @ @ - 237 , 7 + 238 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { 
 / / Reading peer of chat 
 intent = getIntent ( ) ; 
 peer = Peer . fromUniqueId ( intent . getExtras ( ) . getLong ( EXTRA _ CHAT _ PEER ) ) ; 
 - 
 + checkIsBot ( ) ; 
 if ( saveInstance = = null ) { 
 / / Set compose state for auto - showing menu 
 isCompose = intent . getExtras ( ) . getBoolean ( EXTRA _ CHAT _ COMPOSE , false ) ; 
 @ @ - 463 , 6 + 464 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { 
 emptyBotSend = findViewById ( R . id . botEmptyTextBlock ) ; 
 emptyBotHint = ( TextView ) findViewById ( R . id . botEmptyHint ) ; 
 
 + checkEmptyBot ( ) ; 
 } 
 
 private void startCamera ( ) { 
 @ @ - 568 , 7 + 570 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { 
 
 @ Override 
 public void onResume ( ) { 
 - isBot = ( peer . getPeerType ( ) = = PeerType . PRIVATE & & users ( ) . get ( peer . getPeerId ( ) ) . isBot ( ) ) ; 
 + checkIsBot ( ) ; 
 super . onResume ( ) ; 
 
 if ( peer . getPeerType ( ) = = PeerType . PRIVATE & & menu ! = null ) { 
 @ @ - 696 , 15 + 698 , 22 @ @ public class ChatActivity extends ActorEditTextActivity { 
 
 } 
 
 + public void checkIsBot ( ) { 
 + isBot = ( peer . getPeerType ( ) = = PeerType . PRIVATE & & users ( ) . get ( peer . getPeerId ( ) ) . isBot ( ) ) ; 
 + } 
 + 
 public void checkEmptyBot ( ) { 
 if ( isBot ) { 
 - if ( messenger ( ) . checkChatIsempty ( peer ) ) { 
 - showView ( emptyBotSend ) ; 
 - showView ( emptyBotHint ) ; 
 - } else { 
 - hideView ( emptyBotSend ) ; 
 - hideView ( emptyBotHint ) ; 
 - } 
 + messenger ( ) . isStarted ( peer . getPeerId ( ) ) 
 + . then ( empty - > { 
 + if ( empty ) { 
 + showView ( emptyBotSend ) ; 
 + showView ( emptyBotHint ) ; 
 + } else { 
 + hideView ( emptyBotSend ) ; 
 + hideView ( emptyBotHint ) ; 
 + } 
 + } ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 index fd9d763 . . 045d631 100644 
 - - - a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 + + + b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 @ @ - 507 , 7 + 507 , 4 @ @ public class AndroidMessenger extends im . actor . core . Messenger { 
 return modules . getEvents ( ) ; 
 } 
 
 - public boolean checkChatIsempty ( Peer peer ) { 
 - return modules . getMessagesModule ( ) . getConversationEngine ( peer ) . getCount ( ) = = 0 ; 
 - } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index c0d2b8a . . f61a912 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 1569 , 6 + 1569 , 18 @ @ public class Messenger { 
 . failure ( e - > callback . onError ( e ) ) ; 
 } 
 
 + / * * 
 + * Check if chat with bot is started 
 + * 
 + * @ param uid bot user id 
 + * @ return is chat with bot started 
 + * / 
 + @ ObjectiveCName ( " isStartedWithUid : " ) 
 + public Promise < Boolean > isStarted ( int uid ) { 
 + return modules . getMessagesModule ( ) . chatIsEmpty ( Peer . user ( uid ) ) ; 
 + } 
 + 
 + 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Blocked List 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 index 0a85356 . . 76ffb68 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 @ @ - 310 , 6 + 310 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 ) ) ; 
 } 
 
 + public Promise < Boolean > chatIsEmpty ( Peer peer ) { 
 + return new Promise < > ( resolver - > resolver . result ( getConversationEngine ( peer ) . getCount ( ) = = 0 ) ) ; 
 + } 
 + 
 
 public void forwardContent ( Peer peer , AbsContent content ) { 
 sendMessageActor . send ( new SenderActor . ForwardContent ( peer , content ) ) ;
