BLEU SCORE: 0.09287528999566796

TEST MSG: fix ( server : group ) : fixed compilation error
GENERATED MSG: feat ( bots ) : InviteUser

TEST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala < nl > index ee022d6 . . 3feba6f 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala < nl > @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . bot . services < nl > < nl > import akka . actor . ActorSystem < nl > import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } < nl > - import im . actor . server . group . GroupExtension < nl > + import im . actor . server . group . { GroupExtension , GroupType } < nl > import im . actor . util . misc . IdUtils < nl > < nl > import scala . concurrent . forkjoin . ThreadLocalRandom < nl > @ @ - 27 , 8 + 27 , 9 @ @ private [ bot ] final class GroupsBotService ( system : ActorSystem ) extends BotServic < nl > for { < nl > ack ← groupExt . create ( < nl > groupId = groupId , < nl > - title = title , < nl > clientUserId = botUserId , < nl > + clientAuthSid = 0 , < nl > + title = title , < nl > randomId = randomId , < nl > userIds = Set . empty < nl > ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > index f57b4fe . . 830c7df 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > @ @ - 22 , 8 + 22 , 8 @ @ private [ group ] sealed trait Commands { < nl > def create ( groupId : Int , title : String , randomId : Long , userIds : Set [ Int ] ) ( implicit client : AuthorizedClientData ) : Future [ CreateAck ] = < nl > create ( groupId , client . userId , client . authSid , title , randomId , userIds ) < nl > < nl > - def create ( groupId : Int , clientUserId : Int , creatorAuthSid : Int , title : String , randomId : Long , userIds : Set [ Int ] , typ : GroupType . ValueType = GroupType . General ) : Future [ CreateAck ] = < nl > - ( processorRegion . ref ? Create ( groupId , typ , clientUserId , creatorAuthSid , title , randomId , userIds . toSeq ) ) . mapTo [ CreateAck ] < nl > + def create ( groupId : Int , clientUserId : Int , clientAuthSid : Int , title : String , randomId : Long , userIds : Set [ Int ] , typ : GroupType . ValueType = GroupType . General ) : Future [ CreateAck ] = < nl > + ( processorRegion . ref ? Create ( groupId , typ , clientUserId , clientAuthSid , title , randomId , userIds . toSeq ) ) . mapTo [ CreateAck ] < nl > < nl > def createInternal ( groupId : Int , typ : GroupType . ValueType , creatorUserId : Int , title : String , userIds : Set [ Int ] , isHidden : Boolean , isHistoryShared : Boolean ) : Future [ CreateInternalAck ] = < nl > ( processorRegion . ref ? CreateInternal ( groupId , typ , creatorUserId , title , userIds . toSeq , isHidden = Some ( isHidden ) , isHistoryShared = Some ( isHistoryShared ) ) ) . mapTo [ CreateInternalAck ] < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > index 5754583 . . dbfb831 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > @ @ - 116 , 6 + 116 , 7 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act < nl > res ← groupExt . create ( < nl > groupId , < nl > client . userId , < nl > + client . authSid , < nl > validTitle , < nl > randomId , < nl > userIds . toSet ,
NEAREST DIFF (one line): diff - - git a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > index c1b3f4d . . 81674ab 100644 < nl > - - - a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > + + + b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > @ @ - 418 , 6 + 418 , 14 @ @ object BotMessages { < nl > < nl > final case class ResponseCreateGroup ( @ beanGetter peer : GroupOutPeer ) extends ResponseBody < nl > < nl > + @ key ( " InviteUser " ) < nl > + final case class InviteUser ( @ beanGetter groupPeer : GroupOutPeer , @ beanGetter userPeer : UserOutPeer ) extends RequestBody { < nl > + override type Response = Void < nl > + override val service : String = Services . Groups < nl > + < nl > + override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) < nl > + } < nl > + < nl > @ key ( " Message " ) < nl > final case class Message ( < nl > @ beanGetter peer : OutPeer , < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala < nl > index 3face48 . . 1e71a2f 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala < nl > @ @ - 15 , 7 + 15 , 8 @ @ private [ bot ] final class GroupsBotService ( system : ActorSystem ) extends BotServic < nl > private val groupExt = GroupExtension ( system ) < nl > < nl > override val handlers : Handlers = { < nl > - case CreateGroup ( title ) ⇒ createGroup ( title ) . toWeak < nl > + case CreateGroup ( title ) ⇒ createGroup ( title ) . toWeak < nl > + case InviteUser ( groupPeer , userPeer ) ⇒ inviteUser ( groupPeer , userPeer ) . toWeak < nl > } < nl > < nl > private def createGroup ( title : String ) = RequestHandler [ CreateGroup , CreateGroup # Response ] ( < nl > @ @ - 35 , 4 + 36 , 16 @ @ private [ bot ] final class GroupsBotService ( system : ActorSystem ) extends BotServic < nl > } yield Right ( ResponseCreateGroup ( GroupOutPeer ( groupId , ack . accessHash ) ) ) < nl > } < nl > ) < nl > + < nl > + private def inviteUser ( groupPeer : GroupOutPeer , userPeer : UserOutPeer ) = RequestHandler [ InviteUser , InviteUser # Response ] ( < nl > + ( botUserId : Int , botAuthId : Long ) ⇒ { < nl > + / / FIXME : check access hash < nl > + < nl > + val randomId = ThreadLocalRandom . current ( ) . nextLong ( ) < nl > + < nl > + for { < nl > + ack ← groupExt . inviteToGroup ( botUserId , botAuthId , groupPeer . id , userPeer . id , randomId ) < nl > + } yield Right ( Void ) < nl > + } < nl > + ) < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > index fce693d . . bd4b466 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > @ @ - 47 , 7 + 47 , 10 @ @ private [ group ] sealed trait Commands { < nl > ( processorRegion . ref ? JoinAfterFirstRead ( groupId , joiningUserId , joiningUserAuthId ) ) map ( _ ⇒ ( ) ) < nl > < nl > def inviteToGroup ( groupId : Int , inviteeUserId : Int , randomId : Long ) ( implicit client : AuthorizedClientData ) : Future [ SeqStateDate ] = < nl > - ( processorRegion . ref ? Invite ( groupId , inviteeUserId , client . userId , client . authId , randomId ) ) . mapTo [ SeqStateDate ] < nl > + inviteToGroup ( client . userId , client . authId , groupId , inviteeUserId , randomId ) < nl > + < nl > + def inviteToGroup ( clientUserId : Int , clientAuthId : Long , groupId : Int , inviteeUserId : Int , randomId : Long ) : Future [ SeqStateDate ] = < nl > + ( processorRegion . ref ? Invite ( groupId , inviteeUserId , clientUserId , clientAuthId , randomId ) ) . mapTo [ SeqStateDate ] < nl > < nl > def updateAvatar ( groupId : Int , clientUserId : Int , clientAuthId : Long , avatarOpt : Option [ Avatar ] , randomId : Long ) : Future [ UpdateAvatarAck ] = < nl > ( processorRegion . ref ? UpdateAvatar ( groupId , clientUserId , clientAuthId , avatarOpt , randomId ) ) . mapTo [ UpdateAvatarAck ]

TEST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala 
 index ee022d6 . . 3feba6f 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala 
 @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . bot . services 
 
 import akka . actor . ActorSystem 
 import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } 
 - import im . actor . server . group . GroupExtension 
 + import im . actor . server . group . { GroupExtension , GroupType } 
 import im . actor . util . misc . IdUtils 
 
 import scala . concurrent . forkjoin . ThreadLocalRandom 
 @ @ - 27 , 8 + 27 , 9 @ @ private [ bot ] final class GroupsBotService ( system : ActorSystem ) extends BotServic 
 for { 
 ack ← groupExt . create ( 
 groupId = groupId , 
 - title = title , 
 clientUserId = botUserId , 
 + clientAuthSid = 0 , 
 + title = title , 
 randomId = randomId , 
 userIds = Set . empty 
 ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 index f57b4fe . . 830c7df 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 @ @ - 22 , 8 + 22 , 8 @ @ private [ group ] sealed trait Commands { 
 def create ( groupId : Int , title : String , randomId : Long , userIds : Set [ Int ] ) ( implicit client : AuthorizedClientData ) : Future [ CreateAck ] = 
 create ( groupId , client . userId , client . authSid , title , randomId , userIds ) 
 
 - def create ( groupId : Int , clientUserId : Int , creatorAuthSid : Int , title : String , randomId : Long , userIds : Set [ Int ] , typ : GroupType . ValueType = GroupType . General ) : Future [ CreateAck ] = 
 - ( processorRegion . ref ? Create ( groupId , typ , clientUserId , creatorAuthSid , title , randomId , userIds . toSeq ) ) . mapTo [ CreateAck ] 
 + def create ( groupId : Int , clientUserId : Int , clientAuthSid : Int , title : String , randomId : Long , userIds : Set [ Int ] , typ : GroupType . ValueType = GroupType . General ) : Future [ CreateAck ] = 
 + ( processorRegion . ref ? Create ( groupId , typ , clientUserId , clientAuthSid , title , randomId , userIds . toSeq ) ) . mapTo [ CreateAck ] 
 
 def createInternal ( groupId : Int , typ : GroupType . ValueType , creatorUserId : Int , title : String , userIds : Set [ Int ] , isHidden : Boolean , isHistoryShared : Boolean ) : Future [ CreateInternalAck ] = 
 ( processorRegion . ref ? CreateInternal ( groupId , typ , creatorUserId , title , userIds . toSeq , isHidden = Some ( isHidden ) , isHistoryShared = Some ( isHistoryShared ) ) ) . mapTo [ CreateInternalAck ] 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 index 5754583 . . dbfb831 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 @ @ - 116 , 6 + 116 , 7 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act 
 res ← groupExt . create ( 
 groupId , 
 client . userId , 
 + client . authSid , 
 validTitle , 
 randomId , 
 userIds . toSet ,

NEAREST DIFF:
diff - - git a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 index c1b3f4d . . 81674ab 100644 
 - - - a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 + + + b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 @ @ - 418 , 6 + 418 , 14 @ @ object BotMessages { 
 
 final case class ResponseCreateGroup ( @ beanGetter peer : GroupOutPeer ) extends ResponseBody 
 
 + @ key ( " InviteUser " ) 
 + final case class InviteUser ( @ beanGetter groupPeer : GroupOutPeer , @ beanGetter userPeer : UserOutPeer ) extends RequestBody { 
 + override type Response = Void 
 + override val service : String = Services . Groups 
 + 
 + override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) 
 + } 
 + 
 @ key ( " Message " ) 
 final case class Message ( 
 @ beanGetter peer : OutPeer , 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala 
 index 3face48 . . 1e71a2f 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala 
 @ @ - 15 , 7 + 15 , 8 @ @ private [ bot ] final class GroupsBotService ( system : ActorSystem ) extends BotServic 
 private val groupExt = GroupExtension ( system ) 
 
 override val handlers : Handlers = { 
 - case CreateGroup ( title ) ⇒ createGroup ( title ) . toWeak 
 + case CreateGroup ( title ) ⇒ createGroup ( title ) . toWeak 
 + case InviteUser ( groupPeer , userPeer ) ⇒ inviteUser ( groupPeer , userPeer ) . toWeak 
 } 
 
 private def createGroup ( title : String ) = RequestHandler [ CreateGroup , CreateGroup # Response ] ( 
 @ @ - 35 , 4 + 36 , 16 @ @ private [ bot ] final class GroupsBotService ( system : ActorSystem ) extends BotServic 
 } yield Right ( ResponseCreateGroup ( GroupOutPeer ( groupId , ack . accessHash ) ) ) 
 } 
 ) 
 + 
 + private def inviteUser ( groupPeer : GroupOutPeer , userPeer : UserOutPeer ) = RequestHandler [ InviteUser , InviteUser # Response ] ( 
 + ( botUserId : Int , botAuthId : Long ) ⇒ { 
 + / / FIXME : check access hash 
 + 
 + val randomId = ThreadLocalRandom . current ( ) . nextLong ( ) 
 + 
 + for { 
 + ack ← groupExt . inviteToGroup ( botUserId , botAuthId , groupPeer . id , userPeer . id , randomId ) 
 + } yield Right ( Void ) 
 + } 
 + ) 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 index fce693d . . bd4b466 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 @ @ - 47 , 7 + 47 , 10 @ @ private [ group ] sealed trait Commands { 
 ( processorRegion . ref ? JoinAfterFirstRead ( groupId , joiningUserId , joiningUserAuthId ) ) map ( _ ⇒ ( ) ) 
 
 def inviteToGroup ( groupId : Int , inviteeUserId : Int , randomId : Long ) ( implicit client : AuthorizedClientData ) : Future [ SeqStateDate ] = 
 - ( processorRegion . ref ? Invite ( groupId , inviteeUserId , client . userId , client . authId , randomId ) ) . mapTo [ SeqStateDate ] 
 + inviteToGroup ( client . userId , client . authId , groupId , inviteeUserId , randomId ) 
 + 
 + def inviteToGroup ( clientUserId : Int , clientAuthId : Long , groupId : Int , inviteeUserId : Int , randomId : Long ) : Future [ SeqStateDate ] = 
 + ( processorRegion . ref ? Invite ( groupId , inviteeUserId , clientUserId , clientAuthId , randomId ) ) . mapTo [ SeqStateDate ] 
 
 def updateAvatar ( groupId : Int , clientUserId : Int , clientAuthId : Long , avatarOpt : Option [ Avatar ] , randomId : Long ) : Future [ UpdateAvatarAck ] = 
 ( processorRegion . ref ? UpdateAvatar ( groupId , clientUserId , clientAuthId , avatarOpt , randomId ) ) . mapTo [ UpdateAvatarAck ]
