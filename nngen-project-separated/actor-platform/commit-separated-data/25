BLEU SCORE: 0.16996005791513966

TEST MSG: fix ( iOS ) : Fixing Reachability
GENERATED MSG: fix ( iOS ) : status bar progress , fixing user online updating on profile screens

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / project . pbxproj < nl > index 3a06e8a . . 48b7ede 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / project . pbxproj < nl > @ @ - 301 , 7 + 301 , 7 @ @ < nl > 	 	 	 ) ; < nl > 	 	 	 runOnlyForDeploymentPostprocessing = 0 ; < nl > 	 	 	 shellPath = / bin / sh ; < nl > - 	 	 	 shellScript = " diff \ " $ { PODS _ ROOT } / . . / Podfile . lock \ " \ " $ { PODS _ ROOT } / Manifest . lock \ " > / dev / null \ nif [ [ $ ? ! = 0 ] ] ; then \ n cat < < EOM \ nerror : The sandbox is not in sync with the Podfile . lock . Run ' pod install ' or update your CocoaPods installation . \ nEOM \ n exit 1 \ nfi \ n " ; < nl > + 	 	 	 shellScript = " diff \ " $ { PODS _ ROOT } / . . / Podfile . lock \ " \ " $ { PODS _ ROOT } / Manifest . lock \ " > / dev / null \ nif [ $ ? ! = 0 ] ; then \ n # print error to STDERR \ n echo \ " error : The sandbox is not in sync with the Podfile . lock . Run ' pod install ' or update your CocoaPods installation . \ " > & 2 \ n exit 1 \ nfi \ n " ; < nl > 	 	 	 showEnvVarsInLog = 0 ; < nl > 	 	 } ; < nl > 	 	 851EE1A34619AE6677649A27 / * Embed Pods Frameworks * / = { < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index 7eb0fa4 . . 1074d8b 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 243 , 7 + 243 , 6 @ @ < nl > 	 	 06C1D0771C8BC9FC00B73632 / * AAAuthNameViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06C1D0761C8BC9FC00B73632 / * AAAuthNameViewController . swift * / ; } ; < nl > 	 	 06C1D07B1C8BFE5C00B73632 / * AAAuthPhoneViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06C1D07A1C8BFE5C00B73632 / * AAAuthPhoneViewController . swift * / ; } ; < nl > 	 	 06C1D07E1C8D0DEA00B73632 / * Telephony . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06C1D07D1C8D0DE900B73632 / * Telephony . swift * / ; } ; < nl > - 	 	 06CE898A1BD8401C005A5530 / * Reachability . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06CE89891BD8401C005A5530 / * Reachability . swift * / ; } ; < nl > 	 	 06CE898C1BD841C9005A5530 / * SystemConfiguration . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / ; } ; < nl > 	 	 06CE89901BD84DF5005A5530 / * ActorSDKAnalytics . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06CE898F1BD84DF5005A5530 / * ActorSDKAnalytics . swift * / ; } ; < nl > 	 	 06D5C0571C8D6E20002D5045 / * AAAuthLogInViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06D5C0561C8D6E20002D5045 / * AAAuthLogInViewController . swift * / ; } ; < nl > @ @ - 621 , 7 + 620 , 6 @ @ < nl > 	 	 06C1D0761C8BC9FC00B73632 / * AAAuthNameViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAuthNameViewController . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06C1D07A1C8BFE5C00B73632 / * AAAuthPhoneViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAuthPhoneViewController . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06C1D07D1C8D0DE900B73632 / * Telephony . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = Telephony . swift ; sourceTree = " < group > " ; } ; < nl > - 	 	 06CE89891BD8401C005A5530 / * Reachability . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = Reachability . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / = { isa = PBXFileReference ; lastKnownFileType = wrapper . framework ; name = SystemConfiguration . framework ; path = System / Library / Frameworks / SystemConfiguration . framework ; sourceTree = SDKROOT ; } ; < nl > 	 	 06CE898F1BD84DF5005A5530 / * ActorSDKAnalytics . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = ActorSDKAnalytics . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06D5C0561C8D6E20002D5045 / * AAAuthLogInViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAuthLogInViewController . swift ; sourceTree = " < group > " ; } ; < nl > @ @ - 986 , 7 + 984 , 6 @ @ < nl > 	 	 	 	 066A51581BC4C14A000E606E / * AASwiftlyLRU . swift * / , < nl > 	 	 	 	 066A51641BC4C366000E606E / * AATools . swift * / , < nl > 	 	 	 	 065975381BC7CA7B00B8C7DF / * Bundle . swift * / , < nl > - 	 	 	 	 06CE89891BD8401C005A5530 / * Reachability . swift * / , < nl > 	 	 	 	 06C1D07D1C8D0DE900B73632 / * Telephony . swift * / , < nl > 	 	 	 ) ; < nl > 	 	 	 path = Utils ; < nl > @ @ - 2021 , 7 + 2018 , 7 @ @ < nl > 	 	 	 ) ; < nl > 	 	 	 runOnlyForDeploymentPostprocessing = 0 ; < nl > 	 	 	 shellPath = / bin / sh ; < nl > - 	 	 	 shellScript = " diff \ " $ { PODS _ ROOT } / . . / Podfile . lock \ " \ " $ { PODS _ ROOT } / Manifest . lock \ " > / dev / null \ nif [ [ $ ? ! = 0 ] ] ; then \ n cat < < EOM \ nerror : The sandbox is not in sync with the Podfile . lock . Run ' pod install ' or update your CocoaPods installation . \ nEOM \ n exit 1 \ nfi \ n " ; < nl > + 	 	 	 shellScript = " diff \ " $ { PODS _ ROOT } / . . / Podfile . lock \ " \ " $ { PODS _ ROOT } / Manifest . lock \ " > / dev / null \ nif [ $ ? ! = 0 ] ; then \ n # print error to STDERR \ n echo \ " error : The sandbox is not in sync with the Podfile . lock . Run ' pod install ' or update your CocoaPods installation . \ " > & 2 \ n exit 1 \ nfi \ n " ; < nl > 	 	 	 showEnvVarsInLog = 0 ; < nl > 	 	 } ; < nl > 	 	 A2ED258362D73946D3AE7FB4 / * [ CP ] Copy Pods Resources * / = { < nl > @ @ - 2263 , 7 + 2260 , 6 @ @ < nl > 	 	 	 	 061850ED1C95CBF000C522D5 / * YYTextArchiver . m in Sources * / , < nl > 	 	 	 	 066A50E21BC4AF9F000E606E / * ActorSDK . swift in Sources * / , < nl > 	 	 	 	 15D35F761C201B6B00E3717A / * AACustomPresentationAnimationController . swift in Sources * / , < nl > - 	 	 	 	 06CE898A1BD8401C005A5530 / * Reachability . swift in Sources * / , < nl > 	 	 	 	 06E7B24C1C0FAB500090660C / * AAMapFastView . swift in Sources * / , < nl > 	 	 	 	 BED5A1F11C48396A0045FDB0 / * NYTPhotoCaptionView . m in Sources * / , < nl > 	 	 	 	 BED5A20F1C4839880045FDB0 / * NSBundle + NYTPhotoViewer . m in Sources * / , < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > index afdd9ab . . c033882 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > @ @ - 7 , 6 + 7 , 7 @ @ import JDStatusBarNotification < nl > import PushKit < nl > import SafariServices < nl > import DZNWebViewController < nl > + import ReachabilitySwift < nl > < nl > @ objc open class ActorSDK : NSObject , PKPushRegistryDelegate { < nl > < nl > @ @ - 208 , 7 + 209 , 7 @ @ import DZNWebViewController < nl > fileprivate ( set ) open var bindedToWindow : UIWindow ! < nl > < nl > / / Reachability < nl > - / / fileprivate var reachability : Reachability ! < nl > + fileprivate var reachability : Reachability ! < nl > < nl > public override init ( ) { < nl > < nl > @ @ - 227 , 65 + 228 , 65 @ @ import DZNWebViewController < nl > < nl > AAActorRuntime . configureRuntime ( ) < nl > < nl > - let builder = ACConfigurationBuilder ( ) < nl > + let builder = ACConfigurationBuilder ( ) ! < nl > < nl > / / Api Connections < nl > let deviceKey = UUID ( ) . uuidString < nl > let deviceName = UIDevice . current . name < nl > let appTitle = " Actor iOS " < nl > for url in endpoints { < nl > - builder ? . addEndpoint ( url ) < nl > + builder . addEndpoint ( url ) < nl > } < nl > for key in trustedKeys { < nl > - builder ? . addTrustedKey ( key ) < nl > + builder . addTrustedKey ( key ) < nl > } < nl > - builder ? . setApiConfiguration ( ACApiConfiguration ( appTitle : appTitle , withAppId : jint ( apiId ) , withAppKey : apiKey , withDeviceTitle : deviceName , withDeviceId : deviceKey ) ) < nl > + builder . setApiConfiguration ( ACApiConfiguration ( appTitle : appTitle , withAppId : jint ( apiId ) , withAppKey : apiKey , withDeviceTitle : deviceName , withDeviceId : deviceKey ) ) < nl > < nl > / / Providers < nl > - builder ? . setPhoneBookProvider ( PhoneBookProvider ( ) ) < nl > - builder ? . setNotificationProvider ( iOSNotificationProvider ( ) ) < nl > - builder ? . setCallsProvider ( iOSCallsProvider ( ) ) < nl > + builder . setPhoneBookProvider ( PhoneBookProvider ( ) ) < nl > + builder . setNotificationProvider ( iOSNotificationProvider ( ) ) < nl > + builder . setCallsProvider ( iOSCallsProvider ( ) ) < nl > < nl > / / Stats < nl > - builder ? . setPlatformType ( ACPlatformType . ios ( ) ) < nl > - builder ? . setDeviceCategory ( ACDeviceCategory . mobile ( ) ) < nl > + builder . setPlatformType ( ACPlatformType . ios ( ) ) < nl > + builder . setDeviceCategory ( ACDeviceCategory . mobile ( ) ) < nl > < nl > / / Locale < nl > for lang in Locale . preferredLanguages { < nl > log ( " Found locale : \ ( lang ) " ) < nl > - builder ? . addPreferredLanguage ( lang ) < nl > + builder . addPreferredLanguage ( lang ) < nl > } < nl > < nl > / / TimeZone < nl > let timeZone = TimeZone . current . identifier < nl > log ( " Found time zone : \ ( timeZone ) " ) < nl > - builder ? . setTimeZone ( timeZone ) < nl > + builder . setTimeZone ( timeZone ) < nl > < nl > / / AutoJoin < nl > for s in autoJoinGroups { < nl > - builder ? . addAutoJoinGroup ( withToken : s ) < nl > + builder . addAutoJoinGroup ( withToken : s ) < nl > } < nl > if autoJoinOnReady { < nl > - builder ? . setAutoJoinType ( ACAutoJoinType . after _ INIT ( ) ) < nl > + builder . setAutoJoinType ( ACAutoJoinType . after _ INIT ( ) ) < nl > } else { < nl > - builder ? . setAutoJoinType ( ACAutoJoinType . immediately ( ) ) < nl > + builder . setAutoJoinType ( ACAutoJoinType . immediately ( ) ) < nl > } < nl > < nl > / / Logs < nl > / / builder . setEnableFilesLogging ( true ) < nl > < nl > / / Application name < nl > - builder ? . setCustomAppName ( appName ) < nl > + builder . setCustomAppName ( appName ) < nl > < nl > / / Config < nl > - builder ? . setPhoneBookImportEnabled ( jboolean ( enablePhoneBookImport ) ) < nl > - builder ? . setVoiceCallsEnabled ( jboolean ( enableCalls ) ) < nl > - builder ? . setVideoCallsEnabled ( jboolean ( enableCalls ) ) < nl > - builder ? . setIsEnabledGroupedChatList ( false ) < nl > + builder . setPhoneBookImportEnabled ( jboolean ( enablePhoneBookImport ) ) < nl > + builder . setVoiceCallsEnabled ( jboolean ( enableCalls ) ) < nl > + builder . setVideoCallsEnabled ( jboolean ( enableCalls ) ) < nl > + builder . setIsEnabledGroupedChatList ( false ) < nl > / / builder . setEnableFilesLogging ( true ) < nl > < nl > / / Creating messenger < nl > - messenger = ACCocoaMessenger ( configuration : ( builder ? . build ( ) ) ! ) < nl > + messenger = ACCocoaMessenger ( configuration : builder . build ( ) ) < nl > < nl > / / Configure bubbles < nl > AABubbles . layouters = delegate . actorConfigureBubbleLayouters ( AABubbles . builtInLayouters ) < nl > @ @ - 331 , 23 + 332 , 21 @ @ import DZNWebViewController < nl > < nl > / / Subscribe to network changes < nl > < nl > - / / do { < nl > - / / reachability = try Reachability . reachabilityForInternetConnection ( ) < nl > - / / NotificationCenter . default . addObserver ( self , selector : # selector ( ActorSDK . reachabilityChanged ( _ : ) ) , name : NSNotification . Name ( rawValue : ReachabilityChangedNotification ) , object : reachability ) < nl > - / / try reachability . startNotifier ( ) < nl > - / / } catch { < nl > - / / print ( " Unable to create Reachability " ) < nl > - / / return < nl > - / / } < nl > - } < nl > - < nl > - / / @ objc func reachabilityChanged ( _ note : Notification ) { < nl > - / / print ( " reachabilityChanged ( \ ( reachability . isReachable ( ) ) ) " ) < nl > - / / < nl > - / / if reachability . isReachable ( ) { < nl > - / / messenger . forceNetworkCheck ( ) < nl > - / / } < nl > - / / } < nl > + reachability = Reachability ( ) ! < nl > + if reachability ! = nil { < nl > + reachability . whenReachable = { reachability in < nl > + self . messenger . forceNetworkCheck ( ) < nl > + } < nl > + < nl > + do { < nl > + try reachability . startNotifier ( ) < nl > + } catch { < nl > + print ( " Unable to start Reachability " ) < nl > + } < nl > + } else { < nl > + print ( " Unable to create Reachability " ) < nl > + } < nl > + } < nl > < nl > func didLoggedIn ( ) { < nl > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / Reachability . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / Reachability . swift < nl > deleted file mode 100644 < nl > index 8cf8d1c . . 0000000 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / Reachability . swift < nl > + + + / dev / null < nl > @ @ - 1 , 389 + 0 , 0 @ @ < nl > - / / / * < nl > - / / Copyright ( c ) 2014 , Ashley Mills < nl > - / / All rights reserved . < nl > - / / < nl > - / / Redistribution and use in source and binary forms , with or without < nl > - / / modification , are permitted provided that the following conditions are met : < nl > - / / < nl > - / / 1 . Redistributions of source code must retain the above copyright notice , this < nl > - / / list of conditions and the following disclaimer . < nl > - / / < nl > - / / 2 . Redistributions in binary form must reproduce the above copyright notice , < nl > - / / this list of conditions and the following disclaimer in the documentation < nl > - / / and / or other materials provided with the distribution . < nl > - / / < nl > - / / THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS " AS IS " < nl > - / / AND ANY EXPRESS OR IMPLIED WARRANTIES , INCLUDING , BUT NOT LIMITED TO , THE < nl > - / / IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE < nl > - / / ARE DISCLAIMED . IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE < nl > - / / LIABLE FOR ANY DIRECT , INDIRECT , INCIDENTAL , SPECIAL , EXEMPLARY , OR < nl > - / / CONSEQUENTIAL DAMAGES ( INCLUDING , BUT NOT LIMITED TO , PROCUREMENT OF < nl > - / / SUBSTITUTE GOODS OR SERVICES ; LOSS OF USE , DATA , OR PROFITS ; OR BUSINESS < nl > - / / INTERRUPTION ) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY , WHETHER IN < nl > - / / CONTRACT , STRICT LIABILITY , OR TORT ( INCLUDING NEGLIGENCE OR OTHERWISE ) < nl > - / / ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE , EVEN IF ADVISED OF THE < nl > - / / POSSIBILITY OF SUCH DAMAGE . < nl > - / / * / < nl > - / / < nl > - / / import SystemConfiguration < nl > - / / import Foundation < nl > - / / < nl > - / / enum ReachabilityError : Error { < nl > - / / case failedToCreateWithAddress ( sockaddr _ in ) < nl > - / / case failedToCreateWithHostname ( String ) < nl > - / / case unableToSetCallback < nl > - / / case unableToSetDispatchQueue < nl > - / / } < nl > - / / < nl > - / / public let ReachabilityChangedNotification = " ReachabilityChangedNotification " < nl > - / / < nl > - / / func callback ( _ reachability : SCNetworkReachability , flags : SCNetworkReachabilityFlags , info : UnsafeMutableRawPointer ) { < nl > - / / / / let reachability = Unmanaged < Reachability > . fromOpaque ( OpaquePointer ( info ) ) . takeUnretainedValue ( ) < nl > - / / / / < nl > - / / / / DispatchQueue . main . async { < nl > - / / / / reachability . reachabilityChanged ( flags ) < nl > - / / / / } < nl > - / / } < nl > - / / < nl > - / / < nl > - / / open class Reachability : NSObject { < nl > - / / < nl > - / / public typealias NetworkReachable = ( Reachability ) - > ( ) < nl > - / / public typealias NetworkUnreachable = ( Reachability ) - > ( ) < nl > - / / < nl > - / / public enum NetworkStatus : CustomStringConvertible { < nl > - / / < nl > - / / case notReachable , reachableViaWiFi , reachableViaWWAN < nl > - / / < nl > - / / public var description : String { < nl > - / / switch self { < nl > - / / case . reachableViaWWAN : < nl > - / / return " Cellular " < nl > - / / case . reachableViaWiFi : < nl > - / / return " WiFi " < nl > - / / case . notReachable : < nl > - / / return " No Connection " < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / / / MARK : - * * * Public properties * * * < nl > - / / < nl > - / / open var whenReachable : NetworkReachable ? < nl > - / / open var whenUnreachable : NetworkUnreachable ? < nl > - / / open var reachableOnWWAN : Bool < nl > - / / open var notificationCenter = NotificationCenter . default < nl > - / / < nl > - / / open var currentReachabilityStatus : NetworkStatus { < nl > - / / if isReachable ( ) { < nl > - / / if isReachableViaWiFi ( ) { < nl > - / / return . reachableViaWiFi < nl > - / / } < nl > - / / if isRunningOnDevice { < nl > - / / return . reachableViaWWAN < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / return . notReachable < nl > - / / } < nl > - / / < nl > - / / open var currentReachabilityString : String { < nl > - / / return " \ ( currentReachabilityStatus ) " < nl > - / / } < nl > - / / < nl > - / / / / MARK : - * * * Initialisation methods * * * < nl > - / / < nl > - / / required public init ( reachabilityRef : SCNetworkReachability ) { < nl > - / / reachableOnWWAN = true < nl > - / / self . reachabilityRef = reachabilityRef < nl > - / / } < nl > - / / < nl > - / / public convenience init ( hostname : String ) throws { < nl > - / / < nl > - / / let nodename = ( hostname as NSString ) . utf8String < nl > - / / guard let ref = SCNetworkReachabilityCreateWithName ( nil , nodename ! ) else { throw ReachabilityError . failedToCreateWithHostname ( hostname ) } < nl > - / / < nl > - / / self . init ( reachabilityRef : ref ) < nl > - / / } < nl > - / / < nl > - / / open class func reachabilityForInternetConnection ( ) throws - > Reachability { < nl > - / / < nl > - / / var zeroAddress = sockaddr _ in ( ) < nl > - / / zeroAddress . sin _ len = UInt8 ( MemoryLayout . size ( ofValue : zeroAddress ) ) < nl > - / / zeroAddress . sin _ family = sa _ family _ t ( AF _ INET ) < nl > - / / < nl > - / / / / guard let ref = withUnsafePointer ( to : & zeroAddress , { < nl > - / / / / SCNetworkReachabilityCreateWithAddress ( nil , UnsafePointer ( $ 0 ) ) < nl > - / / / / } ) else { throw ReachabilityError . failedToCreateWithAddress ( zeroAddress ) } < nl > - / / < nl > - / / / / return Reachability ( reachabilityRef : ref ) < nl > - / / < nl > - / / } < nl > - / / < nl > - / / open class func reachabilityForLocalWiFi ( ) throws - > Reachability { < nl > - / / < nl > - / / var localWifiAddress : sockaddr _ in = sockaddr _ in ( sin _ len : _ _ uint8 _ t ( 0 ) , sin _ family : sa _ family _ t ( 0 ) , sin _ port : in _ port _ t ( 0 ) , sin _ addr : in _ addr ( s _ addr : 0 ) , sin _ zero : ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ) < nl > - / / localWifiAddress . sin _ len = UInt8 ( MemoryLayout . size ( ofValue : localWifiAddress ) ) < nl > - / / localWifiAddress . sin _ family = sa _ family _ t ( AF _ INET ) < nl > - / / < nl > - / / / / IN _ LINKLOCALNETNUM is defined in < netinet / in . h > as 169 . 254 . 0 . 0 < nl > - / / let address : UInt32 = 0xA9FE0000 < nl > - / / localWifiAddress . sin _ addr . s _ addr = in _ addr _ t ( address . bigEndian ) < nl > - / / < nl > - / / / / guard let ref = withUnsafePointer ( to : & localWifiAddress , { < nl > - / / / / SCNetworkReachabilityCreateWithAddress ( nil , UnsafePointer ( $ 0 ) ) < nl > - / / / / } ) else { throw ReachabilityError . failedToCreateWithAddress ( localWifiAddress ) } < nl > - / / < nl > - / / / / return Reachability ( reachabilityRef : ref ) < nl > - / / } < nl > - / / < nl > - / / / / MARK : - * * * Notifier methods * * * < nl > - / / open func startNotifier ( ) throws { < nl > - / / < nl > - / / if notifierRunning { return } < nl > - / / < nl > - / / / / var context = SCNetworkReachabilityContext ( version : 0 , info : nil , retain : nil , release : nil , copyDescription : nil ) < nl > - / / / / context . info = UnsafeMutablePointer ( Unmanaged . passUnretained ( self ) . toOpaque ( ) ) < nl > - / / / / < nl > - / / / / if ! SCNetworkReachabilitySetCallback ( reachabilityRef ! , callback , & context ) { < nl > - / / / / stopNotifier ( ) < nl > - / / / / throw ReachabilityError . unableToSetCallback < nl > - / / / / } < nl > - / / / / < nl > - / / / / if ! SCNetworkReachabilitySetDispatchQueue ( reachabilityRef ! , reachabilitySerialQueue ) { < nl > - / / / / stopNotifier ( ) < nl > - / / / / throw ReachabilityError . unableToSetDispatchQueue < nl > - / / / / } < nl > - / / < nl > - / / notifierRunning = true < nl > - / / } < nl > - / / < nl > - / / < nl > - / / open func stopNotifier ( ) { < nl > - / / if let reachabilityRef = reachabilityRef { < nl > - / / SCNetworkReachabilitySetCallback ( reachabilityRef , nil , nil ) < nl > - / / SCNetworkReachabilitySetDispatchQueue ( reachabilityRef , nil ) < nl > - / / } < nl > - / / notifierRunning = false < nl > - / / } < nl > - / / < nl > - / / / / MARK : - * * * Connection test methods * * * < nl > - / / open func isReachable ( ) - > Bool { < nl > - / / return isReachableWithTest ( { ( flags : SCNetworkReachabilityFlags ) - > ( Bool ) in < nl > - / / return self . isReachableWithFlags ( flags ) < nl > - / / } ) < nl > - / / } < nl > - / / < nl > - / / open func isReachableViaWWAN ( ) - > Bool { < nl > - / / < nl > - / / if isRunningOnDevice { < nl > - / / return isReachableWithTest ( ) { flags - > Bool in < nl > - / / / / Check we ' re REACHABLE < nl > - / / if self . isReachable ( flags ) { < nl > - / / < nl > - / / / / Now , check we ' re on WWAN < nl > - / / if self . isOnWWAN ( flags ) { < nl > - / / return true < nl > - / / } < nl > - / / } < nl > - / / return false < nl > - / / } < nl > - / / } < nl > - / / return false < nl > - / / } < nl > - / / < nl > - / / open func isReachableViaWiFi ( ) - > Bool { < nl > - / / < nl > - / / return isReachableWithTest ( ) { flags - > Bool in < nl > - / / < nl > - / / / / Check we ' re reachable < nl > - / / if self . isReachable ( flags ) { < nl > - / / < nl > - / / if self . isRunningOnDevice { < nl > - / / / / Check we ' re NOT on WWAN < nl > - / / if self . isOnWWAN ( flags ) { < nl > - / / return false < nl > - / / } < nl > - / / } < nl > - / / return true < nl > - / / } < nl > - / / < nl > - / / return false < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / / / MARK : - * * * Private methods * * * < nl > - / / fileprivate var isRunningOnDevice : Bool = { < nl > - / / # if ( arch ( i386 ) | | arch ( x86 _ 64 ) ) & & os ( iOS ) < nl > - / / return false < nl > - / / # else < nl > - / / return true < nl > - / / # endif < nl > - / / } ( ) < nl > - / / < nl > - / / fileprivate var notifierRunning = false < nl > - / / fileprivate var reachabilityRef : SCNetworkReachability ? < nl > - / / fileprivate let reachabilitySerialQueue = DispatchQueue ( label : " uk . co . ashleymills . reachability " , attributes : [ ] ) < nl > - / / < nl > - / / fileprivate func reachabilityChanged ( _ flags : SCNetworkReachabilityFlags ) { < nl > - / / if isReachableWithFlags ( flags ) { < nl > - / / if let block = whenReachable { < nl > - / / block ( self ) < nl > - / / } < nl > - / / } else { < nl > - / / if let block = whenUnreachable { < nl > - / / block ( self ) < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / notificationCenter . post ( name : Notification . Name ( rawValue : ReachabilityChangedNotification ) , object : self ) < nl > - / / } < nl > - / / < nl > - / / fileprivate func isReachableWithFlags ( _ flags : SCNetworkReachabilityFlags ) - > Bool { < nl > - / / < nl > - / / let reachable = isReachable ( flags ) < nl > - / / < nl > - / / if ! reachable { < nl > - / / return false < nl > - / / } < nl > - / / < nl > - / / if isConnectionRequiredOrTransient ( flags ) { < nl > - / / return false < nl > - / / } < nl > - / / < nl > - / / if isRunningOnDevice { < nl > - / / if isOnWWAN ( flags ) & & ! reachableOnWWAN { < nl > - / / / / We don ' t want to connect when on 3G . < nl > - / / return false < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / return true < nl > - / / } < nl > - / / < nl > - / / fileprivate func isReachableWithTest ( _ test : ( SCNetworkReachabilityFlags ) - > ( Bool ) ) - > Bool { < nl > - / / < nl > - / / if let reachabilityRef = reachabilityRef { < nl > - / / < nl > - / / var flags = SCNetworkReachabilityFlags ( rawValue : 0 ) < nl > - / / let gotFlags = withUnsafeMutablePointer ( to : & flags ) { < nl > - / / SCNetworkReachabilityGetFlags ( reachabilityRef , UnsafeMutablePointer ( $ 0 ) ) < nl > - / / } < nl > - / / < nl > - / / if gotFlags { < nl > - / / return test ( flags ) < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / return false < nl > - / / } < nl > - / / < nl > - / / / / WWAN may be available , but not active until a connection has been established . < nl > - / / / / WiFi may require a connection for VPN on Demand . < nl > - / / fileprivate func isConnectionRequired ( ) - > Bool { < nl > - / / return connectionRequired ( ) < nl > - / / } < nl > - / / < nl > - / / fileprivate func connectionRequired ( ) - > Bool { < nl > - / / return isReachableWithTest ( { ( flags : SCNetworkReachabilityFlags ) - > ( Bool ) in < nl > - / / return self . isConnectionRequired ( flags ) < nl > - / / } ) < nl > - / / } < nl > - / / < nl > - / / / / Dynamic , on demand connection ? < nl > - / / fileprivate func isConnectionOnDemand ( ) - > Bool { < nl > - / / return isReachableWithTest ( { ( flags : SCNetworkReachabilityFlags ) - > ( Bool ) in < nl > - / / return self . isConnectionRequired ( flags ) & & self . isConnectionOnTrafficOrDemand ( flags ) < nl > - / / } ) < nl > - / / } < nl > - / / < nl > - / / / / Is user intervention required ? < nl > - / / fileprivate func isInterventionRequired ( ) - > Bool { < nl > - / / return isReachableWithTest ( { ( flags : SCNetworkReachabilityFlags ) - > ( Bool ) in < nl > - / / return self . isConnectionRequired ( flags ) & & self . isInterventionRequired ( flags ) < nl > - / / } ) < nl > - / / } < nl > - / / < nl > - / / fileprivate func isOnWWAN ( _ flags : SCNetworkReachabilityFlags ) - > Bool { < nl > - / / # if os ( iOS ) < nl > - / / return flags . contains ( . isWWAN ) < nl > - / / # else < nl > - / / return false < nl > - / / # endif < nl > - / / } < nl > - / / fileprivate func isReachable ( _ flags : SCNetworkReachabilityFlags ) - > Bool { < nl > - / / return flags . contains ( . reachable ) < nl > - / / } < nl > - / / fileprivate func isConnectionRequired ( _ flags : SCNetworkReachabilityFlags ) - > Bool { < nl > - / / return flags . contains ( . connectionRequired ) < nl > - / / } < nl > - / / fileprivate func isInterventionRequired ( _ flags : SCNetworkReachabilityFlags ) - > Bool { < nl > - / / return flags . contains ( . interventionRequired ) < nl > - / / } < nl > - / / fileprivate func isConnectionOnTraffic ( _ flags : SCNetworkReachabilityFlags ) - > Bool { < nl > - / / return flags . contains ( . connectionOnTraffic ) < nl > - / / } < nl > - / / fileprivate func isConnectionOnDemand ( _ flags : SCNetworkReachabilityFlags ) - > Bool { < nl > - / / return flags . contains ( . connectionOnDemand ) < nl > - / / } < nl > - / / func isConnectionOnTrafficOrDemand ( _ flags : SCNetworkReachabilityFlags ) - > Bool { < nl > - / / return ! flags . intersection ( [ . connectionOnTraffic , . connectionOnDemand ] ) . isEmpty < nl > - / / } < nl > - / / fileprivate func isTransientConnection ( _ flags : SCNetworkReachabilityFlags ) - > Bool { < nl > - / / return flags . contains ( . transientConnection ) < nl > - / / } < nl > - / / fileprivate func isLocalAddress ( _ flags : SCNetworkReachabilityFlags ) - > Bool { < nl > - / / return flags . contains ( . isLocalAddress ) < nl > - / / } < nl > - / / fileprivate func isDirect ( _ flags : SCNetworkReachabilityFlags ) - > Bool { < nl > - / / return flags . contains ( . isDirect ) < nl > - / / } < nl > - / / fileprivate func isConnectionRequiredOrTransient ( _ flags : SCNetworkReachabilityFlags ) - > Bool { < nl > - / / let testcase : SCNetworkReachabilityFlags = [ . connectionRequired , . transientConnection ] < nl > - / / return flags . intersection ( testcase ) = = testcase < nl > - / / } < nl > - / / < nl > - / / fileprivate var reachabilityFlags : SCNetworkReachabilityFlags { < nl > - / / if let reachabilityRef = reachabilityRef { < nl > - / / < nl > - / / var flags = SCNetworkReachabilityFlags ( rawValue : 0 ) < nl > - / / let gotFlags = withUnsafeMutablePointer ( to : & flags ) { < nl > - / / SCNetworkReachabilityGetFlags ( reachabilityRef , UnsafeMutablePointer ( $ 0 ) ) < nl > - / / } < nl > - / / < nl > - / / if gotFlags { < nl > - / / return flags < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / return [ ] < nl > - / / } < nl > - / / < nl > - / / override open var description : String { < nl > - / / < nl > - / / var W : String < nl > - / / if isRunningOnDevice { < nl > - / / W = isOnWWAN ( reachabilityFlags ) ? " W " : " - " < nl > - / / } else { < nl > - / / W = " X " < nl > - / / } < nl > - / / let R = isReachable ( reachabilityFlags ) ? " R " : " - " < nl > - / / let c = isConnectionRequired ( reachabilityFlags ) ? " c " : " - " < nl > - / / let t = isTransientConnection ( reachabilityFlags ) ? " t " : " - " < nl > - / / let i = isInterventionRequired ( reachabilityFlags ) ? " i " : " - " < nl > - / / let C = isConnectionOnTraffic ( reachabilityFlags ) ? " C " : " - " < nl > - / / let D = isConnectionOnDemand ( reachabilityFlags ) ? " D " : " - " < nl > - / / let l = isLocalAddress ( reachabilityFlags ) ? " l " : " - " < nl > - / / let d = isDirect ( reachabilityFlags ) ? " d " : " - " < nl > - / / < nl > - / / return " \ ( W ) \ ( R ) \ ( c ) \ ( t ) \ ( i ) \ ( C ) \ ( D ) \ ( l ) \ ( d ) " < nl > - / / } < nl > - / / < nl > - / / deinit { < nl > - / / stopNotifier ( ) < nl > - / / < nl > - / / reachabilityRef = nil < nl > - / / whenReachable = nil < nl > - / / whenUnreachable = nil < nl > - / / } < nl > - / / } < nl > diff - - git a / actor - sdk / sdk - core - ios / Podfile b / actor - sdk / sdk - core - ios / Podfile < nl > index c36114c . . 149cff3 100644 < nl > - - - a / actor - sdk / sdk - core - ios / Podfile < nl > + + + b / actor - sdk / sdk - core - ios / Podfile < nl > @ @ - 14 , 6 + 14 , 7 @ @ target ' ActorApp ' do < nl > pod ' RegexKitLite ' < nl > # pod ' CocoaAsyncSocket ' < nl > pod ' zipzap ' < nl > + pod ' ReachabilitySwift ' , ' ~ > 3 ' < nl > < nl > # Main UI < nl > pod ' TTTAttributedLabel ' < nl > @ @ - 47 , 6 + 48 , 7 @ @ target ' ActorSDK ' do < nl > pod ' RegexKitLite ' < nl > # pod ' CocoaAsyncSocket ' < nl > pod ' zipzap ' < nl > + pod ' ReachabilitySwift ' , ' ~ > 3 ' < nl > < nl > # Main UI < nl > pod ' TTTAttributedLabel '
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / project . pbxproj < nl > index e1451c8 . . a27be27 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / project . pbxproj < nl > @ @ - 10 , 6 + 10 , 7 @ @ < nl > 	 	 06230F091BC7FF3500A4807B / * ActorSDK . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 06230F081BC7FF3000A4807B / * ActorSDK . framework * / ; } ; < nl > 	 	 06230F0A1BC7FF3500A4807B / * ActorSDK . framework in Embed Frameworks * / = { isa = PBXBuildFile ; fileRef = 06230F081BC7FF3000A4807B / * ActorSDK . framework * / ; settings = { ATTRIBUTES = ( CodeSignOnCopy , RemoveHeadersOnCopy , ) ; } ; } ; < nl > 	 	 068C6E4F1BBC4BF900182516 / * Launch Screen . storyboard in Resources * / = { isa = PBXBuildFile ; fileRef = 068C6E4E1BBC4BF900182516 / * Launch Screen . storyboard * / ; settings = { ASSET _ TAGS = ( ) ; } ; } ; < nl > + 	 	 06CE898E1BD841D0005A5530 / * SystemConfiguration . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 06CE898D1BD841D0005A5530 / * SystemConfiguration . framework * / ; } ; < nl > 	 	 2CE3FEBEF881B465BDE1045A959BFB0A / * Images . xcassets in Resources * / = { isa = PBXBuildFile ; fileRef = 2ACD33B73078EB46A22D2D4C45BF1E6E / * Images . xcassets * / ; } ; < nl > 	 	 34279C7FB8E40393FEAC939F6474BE2E / * main . m in Sources * / = { isa = PBXBuildFile ; fileRef = 148837AEB986AFDE519BEBD3686AB073 / * main . m * / ; } ; < nl > 	 	 4403E543C36C1FDC89DD4E00 / * Pods _ ActorApp . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = E2F298FBF1BB3C0A84996ED3 / * Pods _ ActorApp . framework * / ; } ; < nl > @ @ - 52 , 6 + 53 , 7 @ @ < nl > 	 	 06230F031BC7FF2F00A4807B / * ActorSDK . xcodeproj * / = { isa = PBXFileReference ; lastKnownFileType = " wrapper . pb - project " ; path = ActorSDK . xcodeproj ; sourceTree = " < group > " ; } ; < nl > 	 	 065974E11BC6926C00B8C7DF / * ActorSDK . framework * / = { isa = PBXFileReference ; explicitFileType = wrapper . framework ; name = ActorSDK . framework ; path = " / Users / ex3ndr / Library / Developer / Xcode / DerivedData / ActorApp - clcqncodqhdxutfqgjvteqywzxue / Build / Products / Debug - iphoneos / ActorSDK . framework " ; sourceTree = " < absolute > " ; } ; < nl > 	 	 068C6E4E1BBC4BF900182516 / * Launch Screen . storyboard * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = file . storyboard ; name = " Launch Screen . storyboard " ; path = " Supporting Files / Launch Screen . storyboard " ; sourceTree = " < group > " ; } ; < nl > + 	 	 06CE898D1BD841D0005A5530 / * SystemConfiguration . framework * / = { isa = PBXFileReference ; lastKnownFileType = wrapper . framework ; name = SystemConfiguration . framework ; path = System / Library / Frameworks / SystemConfiguration . framework ; sourceTree = SDKROOT ; } ; < nl > 	 	 148837AEB986AFDE519BEBD3686AB073 / * main . m * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . objc ; name = main . m ; path = " Supporting Files / main . m " ; sourceTree = " < group > " ; } ; < nl > 	 	 2A521812020DAAAA325065ADC32B7DEB / * AppDelegate . swift * / = { isa = PBXFileReference ; lastKnownFileType = sourcecode . swift ; path = AppDelegate . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 2ACD33B73078EB46A22D2D4C45BF1E6E / * Images . xcassets * / = { isa = PBXFileReference ; lastKnownFileType = folder . assetcatalog ; name = Images . xcassets ; path = Resources / Images . xcassets ; sourceTree = " < group > " ; } ; < nl > @ @ - 72 , 6 + 74 , 7 @ @ < nl > 	 	 	 isa = PBXFrameworksBuildPhase ; < nl > 	 	 	 buildActionMask = 2147483647 ; < nl > 	 	 	 files = ( < nl > + 	 	 	 	 06CE898E1BD841D0005A5530 / * SystemConfiguration . framework in Frameworks * / , < nl > 	 	 	 	 4403E543C36C1FDC89DD4E00 / * Pods _ ActorApp . framework in Frameworks * / , < nl > 	 	 	 	 06230F091BC7FF3500A4807B / * ActorSDK . framework in Frameworks * / , < nl > 	 	 	 ) ; < nl > @ @ - 120 , 6 + 123 , 7 @ @ < nl > 	 	 86C48777C0FD262E78F8BEC9253C9914 / * Frameworks * / = { < nl > 	 	 	 isa = PBXGroup ; < nl > 	 	 	 children = ( < nl > + 	 	 	 	 06CE898D1BD841D0005A5530 / * SystemConfiguration . framework * / , < nl > 	 	 	 	 06230F031BC7FF2F00A4807B / * ActorSDK . xcodeproj * / , < nl > 	 	 	 	 E2F298FBF1BB3C0A84996ED3 / * Pods _ ActorApp . framework * / , < nl > 	 	 	 	 065974E11BC6926C00B8C7DF / * ActorSDK . framework * / , < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorApp / AppDelegate . swift b / actor - sdk / sdk - core - ios / ActorApp / AppDelegate . swift < nl > index c107630 . . c38d4cd 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorApp / AppDelegate . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorApp / AppDelegate . swift < nl > @ @ - 20 , 6 + 20 , 8 @ @ import ActorSDK < nl > ActorSDK . sharedActor ( ) . inviteUrlHost = " quit . email " < nl > ActorSDK . sharedActor ( ) . inviteUrlScheme = " actor " < nl > < nl > + ActorSDK . sharedActor ( ) . style . searchStatusBarStyle = . Default < nl > + < nl > / / Creating Actor < nl > ActorSDK . sharedActor ( ) . createActor ( ) < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index abc038e . . 6606a24 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 171 , 6 + 171 , 8 @ @ < nl > 	 	 069CF4D11BCB909A00C66E12 / * CLTokenInputView . m in Sources * / = { isa = PBXBuildFile ; fileRef = 069CF4C91BCB909A00C66E12 / * CLTokenInputView . m * / ; settings = { ASSET _ TAGS = ( ) ; } ; } ; < nl > 	 	 069CF4D21BCB909A00C66E12 / * CLTokenView . h in Headers * / = { isa = PBXBuildFile ; fileRef = 069CF4CA1BCB909A00C66E12 / * CLTokenView . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; < nl > 	 	 069CF4D31BCB909A00C66E12 / * CLTokenView . m in Sources * / = { isa = PBXBuildFile ; fileRef = 069CF4CB1BCB909A00C66E12 / * CLTokenView . m * / ; settings = { ASSET _ TAGS = ( ) ; } ; } ; < nl > + 	 	 06CE898A1BD8401C005A5530 / * Reachability . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06CE89891BD8401C005A5530 / * Reachability . swift * / ; settings = { ASSET _ TAGS = ( ) ; } ; } ; < nl > + 	 	 06CE898C1BD841C9005A5530 / * SystemConfiguration . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / ; } ; < nl > / * End PBXBuildFile section * / < nl > < nl > / * Begin PBXFileReference section * / < nl > @ @ - 349 , 6 + 351 , 8 @ @ < nl > 	 	 069CF4C91BCB909A00C66E12 / * CLTokenInputView . m * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . objc ; name = CLTokenInputView . m ; path = CLTokenInputView / CLTokenInputView . m ; sourceTree = " < group > " ; } ; < nl > 	 	 069CF4CA1BCB909A00C66E12 / * CLTokenView . h * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . h ; name = CLTokenView . h ; path = CLTokenInputView / CLTokenView . h ; sourceTree = " < group > " ; } ; < nl > 	 	 069CF4CB1BCB909A00C66E12 / * CLTokenView . m * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . objc ; name = CLTokenView . m ; path = CLTokenInputView / CLTokenView . m ; sourceTree = " < group > " ; } ; < nl > + 	 	 06CE89891BD8401C005A5530 / * Reachability . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = Reachability . swift ; sourceTree = " < group > " ; } ; < nl > + 	 	 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / = { isa = PBXFileReference ; lastKnownFileType = wrapper . framework ; name = SystemConfiguration . framework ; path = System / Library / Frameworks / SystemConfiguration . framework ; sourceTree = SDKROOT ; } ; < nl > 	 	 22BAEA363892E475F59B7E9F / * Pods - ActorSDK . debug . xcconfig * / = { isa = PBXFileReference ; includeInIndex = 1 ; lastKnownFileType = text . xcconfig ; name = " Pods - ActorSDK . debug . xcconfig " ; path = " Pods / Target Support Files / Pods - ActorSDK / Pods - ActorSDK . debug . xcconfig " ; sourceTree = " < group > " ; } ; < nl > 	 	 333F91AE5263DD450666CC87 / * Pods - ActorSDK . release . xcconfig * / = { isa = PBXFileReference ; includeInIndex = 1 ; lastKnownFileType = text . xcconfig ; name = " Pods - ActorSDK . release . xcconfig " ; path = " Pods / Target Support Files / Pods - ActorSDK / Pods - ActorSDK . release . xcconfig " ; sourceTree = " < group > " ; } ; < nl > 	 	 9A22DF21664BBB34087283F6 / * Pods _ ActorSDK . framework * / = { isa = PBXFileReference ; explicitFileType = wrapper . framework ; includeInIndex = 0 ; path = Pods _ ActorSDK . framework ; sourceTree = BUILT _ PRODUCTS _ DIR ; } ; < nl > @ @ - 359 , 6 + 363 , 7 @ @ < nl > 	 	 	 isa = PBXFrameworksBuildPhase ; < nl > 	 	 	 buildActionMask = 2147483647 ; < nl > 	 	 	 files = ( < nl > + 	 	 	 	 06CE898C1BD841C9005A5530 / * SystemConfiguration . framework in Frameworks * / , < nl > 	 	 	 	 06230F311BC91A4E00A4807B / * Pods _ ActorSDK . framework in Frameworks * / , < nl > 	 	 	 	 066A52001BC4E0B0000E606E / * libsqlite3 . tbd in Frameworks * / , < nl > 	 	 	 ) ; < nl > @ @ - 474 , 6 + 479 , 7 @ @ < nl > 	 	 	 	 066A515A1BC4C178000E606E / * AAHashMap . swift * / , < nl > 	 	 	 	 066A51641BC4C366000E606E / * AATools . swift * / , < nl > 	 	 	 	 065975381BC7CA7B00B8C7DF / * Bundle . swift * / , < nl > + 	 	 	 	 06CE89891BD8401C005A5530 / * Reachability . swift * / , < nl > 	 	 	 ) ; < nl > 	 	 	 path = Utils ; < nl > 	 	 	 sourceTree = " < group > " ; < nl > @ @ - 881 , 6 + 887 , 7 @ @ < nl > 	 	 2F428D134E194A828C3DF863 / * Frameworks * / = { < nl > 	 	 	 isa = PBXGroup ; < nl > 	 	 	 children = ( < nl > + 	 	 	 	 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / , < nl > 	 	 	 	 06230F301BC91A4E00A4807B / * Pods _ ActorSDK . framework * / , < nl > 	 	 	 	 06230F2E1BC91A4200A4807B / * VBFPopFlatButton . framework * / , < nl > 	 	 	 	 06230F2C1BC91A2E00A4807B / * CLTokenInputView . framework * / , < nl > @ @ - 1175 , 6 + 1182 , 7 @ @ < nl > 	 	 	 	 066A52E71BC52A20000E606E / * AAInviteLinkViewController . swift in Sources * / , < nl > 	 	 	 	 066A52241BC4EEAC000E606E / * AAManagedRange . swift in Sources * / , < nl > 	 	 	 	 066A50E21BC4AF9F000E606E / * ActorSDK . swift in Sources * / , < nl > + 	 	 	 	 06CE898A1BD8401C005A5530 / * Reachability . swift in Sources * / , < nl > 	 	 	 	 066A516D1BC4C366000E606E / * ActorCoreExt . swift in Sources * / , < nl > 	 	 	 	 066A517E1BC4C373000E606E / * FMDatabaseAdditions . m in Sources * / , < nl > 	 	 	 	 066A519A1BC4C390000E606E / * FMDBList . swift in Sources * / , < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > index 731257a . . d8d5bf6 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > @ @ - 438 , 6 + 438 , 10 @ @ < nl > < nl > " AlertLinkCopied " = " Link copied to clipboard . " ; < nl > < nl > + " StatusConnecting " = " Connecting . . . " ; < nl > + < nl > + " StatusSyncing " = " Syncing . . . " ; < nl > + < nl > / * < nl > * Errors < nl > * / < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings < nl > index e4cfcae . . 494c829 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings < nl > @ @ - 436 , 6 + 436 , 10 @ @ < nl > < nl > " AlertLinkCopied " = " Link copiado para a á rea de transfer ê ncia . " ; < nl > < nl > + " StatusConnecting " = " Connecting . . . " ; < nl > + < nl > + " StatusSyncing " = " Syncing . . . " ; < nl > + < nl > / * < nl > * Errors < nl > * / < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings < nl > index ac49c2d . . d9cd0bd 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings < nl > @ @ - 440 , 6 + 440 , 10 @ @ < nl > < nl > " AlertLinkCopied " = " С с ы л к а с к о п и р о в а н а в б у ф е р о б м е н а . " ; < nl > < nl > + " StatusConnecting " = " П о д к л ю ч е н и е . . . " ; < nl > + < nl > + " StatusSyncing " = " С и н х р о н и з а ц и я . . . " ; < nl > + < nl > / * < nl > * Errors < nl > * / < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings < nl > index 7a8785a . . e4f4cb3 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings < nl > @ @ - 438 , 6 + 438 , 10 @ @ < nl > < nl > " AlertLinkCopied " = " 链 接 已 经 被 复 制 到 剪 贴 板 。 " ; < nl > < nl > + " StatusConnecting " = " Connecting . . . " ; < nl > + < nl > + " StatusSyncing " = " Syncing . . . " ; < nl > + < nl > / * < nl > * Errors < nl > * / < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > index 46c8bcd . . e9b66f6 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > @ @ - 3 , 6 + 3 , 7 @ @ < nl > / / < nl > < nl > import Foundation < nl > + import JDStatusBarNotification < nl > < nl > public class ActorSDK { < nl > < nl > @ @ - 102 , 6 + 103 , 9 @ @ public class ActorSDK { < nl > / / View Binding info < nl > private ( set ) public var bindedToWindow : UIWindow ! < nl > < nl > + / / Reachability < nl > + private var reachability : Reachability ! < nl > + < nl > / / < nl > / / Initialization < nl > / / < nl > @ @ - 186 , 6 + 190 , 25 @ @ public class ActorSDK { < nl > if autoPushMode = = . FromStart { < nl > requestPush ( ) < nl > } < nl > + < nl > + / / Subscribe to network changes < nl > + < nl > + do { < nl > + reachability = try Reachability . reachabilityForInternetConnection ( ) < nl > + NSNotificationCenter . defaultCenter ( ) . addObserver ( self , selector : " reachabilityChanged : " , name : ReachabilityChangedNotification , object : reachability ) < nl > + try reachability . startNotifier ( ) < nl > + } catch { < nl > + print ( " Unable to create Reachability " ) < nl > + return < nl > + } < nl > + } < nl > + < nl > + @ objc func reachabilityChanged ( note : NSNotification ) { < nl > + print ( " reachabilityChanged ( \ ( reachability . isReachable ( ) ) ) " ) < nl > + < nl > + if reachability . isReachable ( ) { < nl > + messenger . forceNetworkCheck ( ) < nl > + } < nl > } < nl > < nl > func didLoggedIn ( ) { < nl > @ @ - 287 , 6 + 310 , 33 @ @ public class ActorSDK { < nl > } < nl > window . rootViewController = controller ! < nl > } < nl > + < nl > + / / Bind Status Bar connecting < nl > + < nl > + if ! style . statusBarConnectingHidden { < nl > + < nl > + JDStatusBarNotification . setDefaultStyle { ( style ) - > JDStatusBarStyle ! in < nl > + style . barColor = self . style . statusBarConnectingBgColor < nl > + style . textColor = self . style . statusBarConnectingTextColor < nl > + return style < nl > + } < nl > + < nl > + dispatchOnUi { ( ) - > Void in < nl > + self . binder . bind ( self . messenger . getAppState ( ) . isSyncing , valueModel2 : self . messenger . getAppState ( ) . isConnecting ) { < nl > + ( isSyncing : JavaLangBoolean ? , isConnecting : JavaLangBoolean ? ) - > ( ) in < nl > + < nl > + if isSyncing ! . booleanValue ( ) | | isConnecting ! . booleanValue ( ) { < nl > + if isConnecting ! . booleanValue ( ) { < nl > + JDStatusBarNotification . showWithStatus ( AALocalized ( " StatusConnecting " ) ) < nl > + } else { < nl > + JDStatusBarNotification . showWithStatus ( AALocalized ( " StatusSyncing " ) ) < nl > + } < nl > + } else { < nl > + JDStatusBarNotification . dismiss ( ) < nl > + } < nl > + } < nl > + } < nl > + } < nl > } < nl > < nl > public func presentMessengerInNewWindow ( ) { < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorStyle . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorStyle . swift < nl > index 8c639ff . . ef904d0 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorStyle . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorStyle . swift < nl > @ @ - 649 , 4 + 649 , 30 @ @ public class ActorStyle { < nl > / / < nl > < nl > public var authTintColor = UIColor ( rgb : 0x007aff ) < nl > - } < nl > \ No newline at end of file < nl > + < nl > + / / < nl > + / / Status Bar progress < nl > + / / < nl > + < nl > + / / / Is Status Bar connecting status hidden < nl > + public var statusBarConnectingHidden = false < nl > + < nl > + / / / Is Status Bar background color < nl > + public var statusBarConnectingBgColor : UIColor { < nl > + get { return _ statusBarConnectingBgColor ! = nil ? _ statusBarConnectingBgColor ! : navigationBgColor } < nl > + set ( v ) { _ statusBarConnectingBgColor = v } < nl > + } < nl > + public var _ statusBarConnectingBgColor : UIColor ? < nl > + < nl > + / / / Is Status Bar background color < nl > + public var statusBarConnectingTextColor : UIColor { < nl > + get { return _ statusBarConnectingTextColor ! = nil ? _ statusBarConnectingTextColor ! : navigationTitleColor } < nl > + set ( v ) { _ statusBarConnectingTextColor = v } < nl > + } < nl > + public var _ statusBarConnectingTextColor : UIColor ? < nl > + < nl > + } < nl > + < nl > + < nl > + < nl > + < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > index 8e179a6 . . 03ce9dc 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > @ @ - 141 , 9 + 141 , 9 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > self . subtitleView . text = stateText ; < nl > let state = UInt ( presence ! . state . ordinal ( ) ) < nl > if ( state = = ACUserPresence _ State . ONLINE . rawValue ) { < nl > - self . subtitleView . textColor = self . appStyle . userOnlineColor < nl > + self . subtitleView . textColor = self . appStyle . userOnlineNavigationColor < nl > } else { < nl > - self . subtitleView . textColor = self . appStyle . userOfflineColor < nl > + self . subtitleView . textColor = self . appStyle . userOfflineNavigationColor < nl > } < nl > } < nl > } ) < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > index 688ce87 . . 1f3bfe8 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift < nl > @ @ - 38 , 6 + 38 , 7 @ @ public class AAGroupViewController : AAContentTableController { < nl > self . headerRow = s . avatar { ( r ) - > ( ) in < nl > < nl > r . id = self . gid < nl > + r . subtitleHidden = true < nl > < nl > r . bindAction = { ( r ) - > ( ) in < nl > r . avatar = self . group . getAvatarModel ( ) . get ( ) < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift < nl > index 6fe7575 . . cd1bd97 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift 	 < nl > @ @ - 215 , 11 + 215 , 11 @ @ public class AAManagedTable { < nl > if ( searchDisplayController ! = nil & & searchDisplayController ! . active ) { < nl > < nl > / / If search is active : apply search status bar style < nl > - / / MainAppTheme . search . applyStatusBar ( ) < nl > + UIApplication . sharedApplication ( ) . setStatusBarStyle ( ActorSDK . sharedActor ( ) . style . vcStatusBarStyle , animated : true ) < nl > } else { < nl > < nl > / / If search is not active : apply main status bar style < nl > - / / MainAppTheme . navigation . applyStatusBar ( ) < nl > + UIApplication . sharedApplication ( ) . setStatusBarStyle ( ActorSDK . sharedActor ( ) . style . searchStatusBarStyle , animated : true ) < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift < nl > index a5f9d05 . . 86dcd6f 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift 	 < nl > @ @ - 508 , 6 + 508 , 7 @ @ public class AAAvatarRow : AAManagedRow { < nl > public var avatarPath : String ? < nl > public var avatarLoading : Bool = false < nl > < nl > + public var subtitleHidden : Bool = false < nl > public var subtitle : String ? < nl > public var subtitleColor : UIColor ? < nl > < nl > @ @ - 530 , 12 + 531 , 8 @ @ public class AAAvatarRow : AAManagedRow { < nl > public func bindCell ( res : AAAvatarCell ) { < nl > res . titleLabel . text = title < nl > < nl > - if subtitle ! = nil { < nl > - res . subtitleLabel . text = subtitle < nl > - res . subtitleLabel . hidden = false < nl > - } else { < nl > - res . subtitleLabel . hidden = true < nl > - } < nl > + res . subtitleLabel . hidden = subtitleHidden < nl > + res . subtitleLabel . text = subtitle < nl > < nl > if avatarPath ! = nil { < nl > res . avatarView . bind ( title ! , id : jint ( id ! ) , fileName : avatarPath ! ) < nl > @ @ - 566 , 7 + 563 , 7 @ @ public class AAAvatarRow : AAManagedRow { < nl > bindAction ? ( r : self ) < nl > < nl > if let p = indexPath , let s = section { < nl > - if let cell = s . table . tableView . cellForRowAtIndexPath ( p ) as ? AAAvatarCell { < nl > + if let cell = s . table . tableView . visibleCellForIndexPath ( p ) as ? AAAvatarCell { < nl > bindCell ( cell ) < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsViewController . swift < nl > index f26c644 . . af64e43 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsViewController . swift < nl > @ @ - 355 , 6 + 355 , 12 @ @ public class AASettingsViewController : AAContentTableController { < nl > ActorSDK . sharedActor ( ) . delegate . actorSettingsSupportDidCreated ( self , section : s ) < nl > } < nl > } < nl > + < nl > + public override func viewWillAppear ( animated : Bool ) { < nl > + super . viewWillAppear ( animated ) < nl > + < nl > + Actor . onProfileOpenWithUid ( jint ( uid ) ) < nl > + } < nl > < nl > public override func tableWillBind ( binder : AABinder ) { < nl > < nl > @ @ - 402 , 4 + 408 , 10 @ @ public class AASettingsViewController : AAContentTableController { < nl > self . emailCells . reload ( ) < nl > } ) < nl > } < nl > + < nl > + public override func viewWillDisappear ( animated : Bool ) { < nl > + super . viewWillDisappear ( animated ) < nl > + < nl > + Actor . onProfileClosedWithUid ( jint ( uid ) ) < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift < nl > index 584a829 . . 15bcab8 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift < nl > @ @ - 226 , 6 + 226 , 12 @ @ class AAUserViewController : AAContentTableController { < nl > < nl > } < nl > < nl > + override func viewWillAppear ( animated : Bool ) { < nl > + super . viewWillAppear ( animated ) < nl > + < nl > + Actor . onProfileOpenWithUid ( jint ( uid ) ) < nl > + } < nl > + < nl > override func tableWillBind ( binder : AABinder ) { < nl > binder . bind ( user . getAvatarModel ( ) , closure : { ( value : ACAvatar ? ) - > ( ) in < nl > self . headerRow . reload ( ) < nl > @ @ - 245 , 4 + 251 , 10 @ @ class AAUserViewController : AAContentTableController { < nl > } ) < nl > } < nl > } < nl > + < nl > + override func viewWillDisappear ( animated : Bool ) { < nl > + super . viewWillDisappear ( animated ) < nl > + < nl > + Actor . onProfileOpenWithUid ( jint ( uid ) ) < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Views . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Views . swift < nl > index c14910a . . 3705da0 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Views . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Views . swift < nl > @ @ - 137 , 6 + 137 , 21 @ @ public extension UITableView { < nl > let reuseId = cellTypeForClass ( T . self ) < nl > return self . dequeueReusableCellWithIdentifier ( reuseId , forIndexPath : indexPath ) as ! T < nl > } < nl > + < nl > + public func visibleCellForIndexPath ( path : NSIndexPath ) - > UITableViewCell ? { < nl > + if indexPathsForVisibleRows = = nil { < nl > + return nil < nl > + } < nl > + < nl > + for i in 0 . . < indexPathsForVisibleRows ! . count { < nl > + let vPath = indexPathsForVisibleRows ! [ i ] < nl > + if vPath . row = = path . row & & vPath . section = = path . section { < nl > + return visibleCells [ i ] < nl > + } < nl > + } < nl > + < nl > + return nil < nl > + } < nl > } < nl > < nl > public extension UICollectionView { < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / Reachability . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / Reachability . swift < nl > new file mode 100644 < nl > index 0000000 . . a42432b < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / Reachability . swift < nl > @ @ - 0 , 0 + 1 , 388 @ @ < nl > + / * < nl > + Copyright ( c ) 2014 , Ashley Mills < nl > + All rights reserved . < nl > + < nl > + Redistribution and use in source and binary forms , with or without < nl > + modification , are permitted provided that the following conditions are met : < nl > + < nl > + 1 . Redistributions of source code must retain the above copyright notice , this < nl > + list of conditions and the following disclaimer . < nl > + < nl > + 2 . Redistributions in binary form must reproduce the above copyright notice , < nl > + this list of conditions and the following disclaimer in the documentation < nl > + and / or other materials provided with the distribution . < nl > + < nl > + THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS " AS IS " < nl > + AND ANY EXPRESS OR IMPLIED WARRANTIES , INCLUDING , BUT NOT LIMITED TO , THE < nl > + IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE < nl > + ARE DISCLAIMED . IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE < nl > + LIABLE FOR ANY DIRECT , INDIRECT , INCIDENTAL , SPECIAL , EXEMPLARY , OR < nl > + CONSEQUENTIAL DAMAGES ( INCLUDING , BUT NOT LIMITED TO , PROCUREMENT OF < nl > + SUBSTITUTE GOODS OR SERVICES ; LOSS OF USE , DATA , OR PROFITS ; OR BUSINESS < nl > + INTERRUPTION ) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY , WHETHER IN < nl > + CONTRACT , STRICT LIABILITY , OR TORT ( INCLUDING NEGLIGENCE OR OTHERWISE ) < nl > + ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE , EVEN IF ADVISED OF THE < nl > + POSSIBILITY OF SUCH DAMAGE . < nl > + * / < nl > + < nl > + import SystemConfiguration < nl > + import Foundation < nl > + < nl > + enum ReachabilityError : ErrorType { < nl > + case FailedToCreateWithAddress ( sockaddr _ in ) < nl > + case FailedToCreateWithHostname ( String ) < nl > + case UnableToSetCallback < nl > + case UnableToSetDispatchQueue < nl > + } < nl > + < nl > + public let ReachabilityChangedNotification = " ReachabilityChangedNotification " < nl > + < nl > + func callback ( reachability : SCNetworkReachability , flags : SCNetworkReachabilityFlags , info : UnsafeMutablePointer < Void > ) { < nl > + let reachability = Unmanaged < Reachability > . fromOpaque ( COpaquePointer ( info ) ) . takeUnretainedValue ( ) < nl > + < nl > + dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { < nl > + reachability . reachabilityChanged ( flags ) < nl > + } < nl > + } < nl > + < nl > + < nl > + public class Reachability : NSObject { < nl > + < nl > + public typealias NetworkReachable = ( Reachability ) - > ( ) < nl > + public typealias NetworkUnreachable = ( Reachability ) - > ( ) < nl > + < nl > + public enum NetworkStatus : CustomStringConvertible { < nl > + < nl > + case NotReachable , ReachableViaWiFi , ReachableViaWWAN < nl > + < nl > + public var description : String { < nl > + switch self { < nl > + case . ReachableViaWWAN : < nl > + return " Cellular " < nl > + case . ReachableViaWiFi : < nl > + return " WiFi " < nl > + case . NotReachable : < nl > + return " No Connection " < nl > + } < nl > + } < nl > + } < nl > + < nl > + / / MARK : - * * * Public properties * * * < nl > + < nl > + public var whenReachable : NetworkReachable ? < nl > + public var whenUnreachable : NetworkUnreachable ? < nl > + public var reachableOnWWAN : Bool < nl > + public var notificationCenter = NSNotificationCenter . defaultCenter ( ) < nl > + < nl > + public var currentReachabilityStatus : NetworkStatus { < nl > + if isReachable ( ) { < nl > + if isReachableViaWiFi ( ) { < nl > + return . ReachableViaWiFi < nl > + } < nl > + if isRunningOnDevice { < nl > + return . ReachableViaWWAN < nl > + } < nl > + } < nl > + < nl > + return . NotReachable < nl > + } < nl > + < nl > + public var currentReachabilityString : String { < nl > + return " \ ( currentReachabilityStatus ) " < nl > + } < nl > + < nl > + / / MARK : - * * * Initialisation methods * * * < nl > + < nl > + required public init ( reachabilityRef : SCNetworkReachability ) { < nl > + reachableOnWWAN = true < nl > + self . reachabilityRef = reachabilityRef < nl > + } < nl > + < nl > + public convenience init ( hostname : String ) throws { < nl > + < nl > + let nodename = ( hostname as NSString ) . UTF8String < nl > + guard let ref = SCNetworkReachabilityCreateWithName ( nil , nodename ) else { throw ReachabilityError . FailedToCreateWithHostname ( hostname ) } < nl > + < nl > + self . init ( reachabilityRef : ref ) < nl > + } < nl > + < nl > + public class func reachabilityForInternetConnection ( ) throws - > Reachability { < nl > + < nl > + var zeroAddress = sockaddr _ in ( ) < nl > + zeroAddress . sin _ len = UInt8 ( sizeofValue ( zeroAddress ) ) < nl > + zeroAddress . sin _ family = sa _ family _ t ( AF _ INET ) < nl > + < nl > + guard let ref = withUnsafePointer ( & zeroAddress , { < nl > + SCNetworkReachabilityCreateWithAddress ( nil , UnsafePointer ( $ 0 ) ) < nl > + } ) else { throw ReachabilityError . FailedToCreateWithAddress ( zeroAddress ) } < nl > + < nl > + return Reachability ( reachabilityRef : ref ) < nl > + } < nl > + < nl > + public class func reachabilityForLocalWiFi ( ) throws - > Reachability { < nl > + < nl > + var localWifiAddress : sockaddr _ in = sockaddr _ in ( sin _ len : _ _ uint8 _ t ( 0 ) , sin _ family : sa _ family _ t ( 0 ) , sin _ port : in _ port _ t ( 0 ) , sin _ addr : in _ addr ( s _ addr : 0 ) , sin _ zero : ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ) < nl > + localWifiAddress . sin _ len = UInt8 ( sizeofValue ( localWifiAddress ) ) < nl > + localWifiAddress . sin _ family = sa _ family _ t ( AF _ INET ) < nl > + < nl > + / / IN _ LINKLOCALNETNUM is defined in < netinet / in . h > as 169 . 254 . 0 . 0 < nl > + let address : UInt32 = 0xA9FE0000 < nl > + localWifiAddress . sin _ addr . s _ addr = in _ addr _ t ( address . bigEndian ) < nl > + < nl > + guard let ref = withUnsafePointer ( & localWifiAddress , { < nl > + SCNetworkReachabilityCreateWithAddress ( nil , UnsafePointer ( $ 0 ) ) < nl > + } ) else { throw ReachabilityError . FailedToCreateWithAddress ( localWifiAddress ) } < nl > + < nl > + return Reachability ( reachabilityRef : ref ) < nl > + } < nl > + < nl > + / / MARK : - * * * Notifier methods * * * < nl > + public func startNotifier ( ) throws { < nl > + < nl > + if notifierRunning { return } < nl > + < nl > + var context = SCNetworkReachabilityContext ( version : 0 , info : nil , retain : nil , release : nil , copyDescription : nil ) < nl > + context . info = UnsafeMutablePointer ( Unmanaged . passUnretained ( self ) . toOpaque ( ) ) < nl > + < nl > + if ! SCNetworkReachabilitySetCallback ( reachabilityRef ! , callback , & context ) { < nl > + stopNotifier ( ) < nl > + throw ReachabilityError . UnableToSetCallback < nl > + } < nl > + < nl > + if ! SCNetworkReachabilitySetDispatchQueue ( reachabilityRef ! , reachabilitySerialQueue ) { < nl > + stopNotifier ( ) < nl > + throw ReachabilityError . UnableToSetDispatchQueue < nl > + } < nl > + < nl > + notifierRunning = true < nl > + } < nl > + < nl > + < nl > + public func stopNotifier ( ) { < nl > + if let reachabilityRef = reachabilityRef { < nl > + SCNetworkReachabilitySetCallback ( reachabilityRef , nil , nil ) < nl > + SCNetworkReachabilitySetDispatchQueue ( reachabilityRef , nil ) < nl > + } < nl > + notifierRunning = false < nl > + } < nl > + < nl > + / / MARK : - * * * Connection test methods * * * < nl > + public func isReachable ( ) - > Bool { < nl > + return isReachableWithTest ( { ( flags : SCNetworkReachabilityFlags ) - > ( Bool ) in < nl > + return self . isReachableWithFlags ( flags ) < nl > + } ) < nl > + } < nl > + < nl > + public func isReachableViaWWAN ( ) - > Bool { < nl > + < nl > + if isRunningOnDevice { < nl > + return isReachableWithTest ( ) { flags - > Bool in < nl > + / / Check we ' re REACHABLE < nl > + if self . isReachable ( flags ) { < nl > + < nl > + / / Now , check we ' re on WWAN < nl > + if self . isOnWWAN ( flags ) { < nl > + return true < nl > + } < nl > + } < nl > + return false < nl > + } < nl > + } < nl > + return false < nl > + } < nl > + < nl > + public func isReachableViaWiFi ( ) - > Bool { < nl > + < nl > + return isReachableWithTest ( ) { flags - > Bool in < nl > + < nl > + / / Check we ' re reachable < nl > + if self . isReachable ( flags ) { < nl > + < nl > + if self . isRunningOnDevice { < nl > + / / Check we ' re NOT on WWAN < nl > + if self . isOnWWAN ( flags ) { < nl > + return false < nl > + } < nl > + } < nl > + return true < nl > + } < nl > + < nl > + return false < nl > + } < nl > + } < nl > + < nl > + / / MARK : - * * * Private methods * * * < nl > + private var isRunningOnDevice : Bool = { < nl > + # if ( arch ( i386 ) | | arch ( x86 _ 64 ) ) & & os ( iOS ) < nl > + return false < nl > + # else < nl > + return true < nl > + # endif < nl > + } ( ) < nl > + < nl > + private var notifierRunning = false < nl > + private var reachabilityRef : SCNetworkReachability ? < nl > + private let reachabilitySerialQueue = dispatch _ queue _ create ( " uk . co . ashleymills . reachability " , DISPATCH _ QUEUE _ SERIAL ) < nl > + < nl > + private func reachabilityChanged ( flags : SCNetworkReachabilityFlags ) { < nl > + if isReachableWithFlags ( flags ) { < nl > + if let block = whenReachable { < nl > + block ( self ) < nl > + } < nl > + } else { < nl > + if let block = whenUnreachable { < nl > + block ( self ) < nl > + } < nl > + } < nl > + < nl > + notificationCenter . postNotificationName ( ReachabilityChangedNotification , object : self ) < nl > + } < nl > + < nl > + private func isReachableWithFlags ( flags : SCNetworkReachabilityFlags ) - > Bool { < nl > + < nl > + let reachable = isReachable ( flags ) < nl > + < nl > + if ! reachable { < nl > + return false < nl > + } < nl > + < nl > + if isConnectionRequiredOrTransient ( flags ) { < nl > + return false < nl > + } < nl > + < nl > + if isRunningOnDevice { < nl > + if isOnWWAN ( flags ) & & ! reachableOnWWAN { < nl > + / / We don ' t want to connect when on 3G . < nl > + return false < nl > + } < nl > + } < nl > + < nl > + return true < nl > + } < nl > + < nl > + private func isReachableWithTest ( test : ( SCNetworkReachabilityFlags ) - > ( Bool ) ) - > Bool { < nl > + < nl > + if let reachabilityRef = reachabilityRef { < nl > + < nl > + var flags = SCNetworkReachabilityFlags ( rawValue : 0 ) < nl > + let gotFlags = withUnsafeMutablePointer ( & flags ) { < nl > + SCNetworkReachabilityGetFlags ( reachabilityRef , UnsafeMutablePointer ( $ 0 ) ) < nl > + } < nl > + < nl > + if gotFlags { < nl > + return test ( flags ) < nl > + } < nl > + } < nl > + < nl > + return false < nl > + } < nl > + < nl > + / / WWAN may be available , but not active until a connection has been established . < nl > + / / WiFi may require a connection for VPN on Demand . < nl > + private func isConnectionRequired ( ) - > Bool { < nl > + return connectionRequired ( ) < nl > + } < nl > + < nl > + private func connectionRequired ( ) - > Bool { < nl > + return isReachableWithTest ( { ( flags : SCNetworkReachabilityFlags ) - > ( Bool ) in < nl > + return self . isConnectionRequired ( flags ) < nl > + } ) < nl > + } < nl > + < nl > + / / Dynamic , on demand connection ? < nl > + private func isConnectionOnDemand ( ) - > Bool { < nl > + return isReachableWithTest ( { ( flags : SCNetworkReachabilityFlags ) - > ( Bool ) in < nl > + return self . isConnectionRequired ( flags ) & & self . isConnectionOnTrafficOrDemand ( flags ) < nl > + } ) < nl > + } < nl > + < nl > + / / Is user intervention required ? < nl > + private func isInterventionRequired ( ) - > Bool { < nl > + return isReachableWithTest ( { ( flags : SCNetworkReachabilityFlags ) - > ( Bool ) in < nl > + return self . isConnectionRequired ( flags ) & & self . isInterventionRequired ( flags ) < nl > + } ) < nl > + } < nl > + < nl > + private func isOnWWAN ( flags : SCNetworkReachabilityFlags ) - > Bool { < nl > + # if os ( iOS ) < nl > + return flags . contains ( . IsWWAN ) < nl > + # else < nl > + return false < nl > + # endif < nl > + } < nl > + private func isReachable ( flags : SCNetworkReachabilityFlags ) - > Bool { < nl > + return flags . contains ( . Reachable ) < nl > + } < nl > + private func isConnectionRequired ( flags : SCNetworkReachabilityFlags ) - > Bool { < nl > + return flags . contains ( . ConnectionRequired ) < nl > + } < nl > + private func isInterventionRequired ( flags : SCNetworkReachabilityFlags ) - > Bool { < nl > + return flags . contains ( . InterventionRequired ) < nl > + } < nl > + private func isConnectionOnTraffic ( flags : SCNetworkReachabilityFlags ) - > Bool { < nl > + return flags . contains ( . ConnectionOnTraffic ) < nl > + } < nl > + private func isConnectionOnDemand ( flags : SCNetworkReachabilityFlags ) - > Bool { < nl > + return flags . contains ( . ConnectionOnDemand ) < nl > + } < nl > + func isConnectionOnTrafficOrDemand ( flags : SCNetworkReachabilityFlags ) - > Bool { < nl > + return ! flags . intersect ( [ . ConnectionOnTraffic , . ConnectionOnDemand ] ) . isEmpty < nl > + } < nl > + private func isTransientConnection ( flags : SCNetworkReachabilityFlags ) - > Bool { < nl > + return flags . contains ( . TransientConnection ) < nl > + } < nl > + private func isLocalAddress ( flags : SCNetworkReachabilityFlags ) - > Bool { < nl > + return flags . contains ( . IsLocalAddress ) < nl > + } < nl > + private func isDirect ( flags : SCNetworkReachabilityFlags ) - > Bool { < nl > + return flags . contains ( . IsDirect ) < nl > + } < nl > + private func isConnectionRequiredOrTransient ( flags : SCNetworkReachabilityFlags ) - > Bool { < nl > + let testcase : SCNetworkReachabilityFlags = [ . ConnectionRequired , . TransientConnection ] < nl > + return flags . intersect ( testcase ) = = testcase < nl > + } < nl > + < nl > + private var reachabilityFlags : SCNetworkReachabilityFlags { < nl > + if let reachabilityRef = reachabilityRef { < nl > + < nl > + var flags = SCNetworkReachabilityFlags ( rawValue : 0 ) < nl > + let gotFlags = withUnsafeMutablePointer ( & flags ) { < nl > + SCNetworkReachabilityGetFlags ( reachabilityRef , UnsafeMutablePointer ( $ 0 ) ) < nl > + } < nl > + < nl > + if gotFlags { < nl > + return flags < nl > + } < nl > + } < nl > + < nl > + return [ ] < nl > + } < nl > + < nl > + override public var description : String { < nl > + < nl > + var W : String < nl > + if isRunningOnDevice { < nl > + W = isOnWWAN ( reachabilityFlags ) ? " W " : " - " < nl > + } else { < nl > + W = " X " < nl > + } < nl > + let R = isReachable ( reachabilityFlags ) ? " R " : " - " < nl > + let c = isConnectionRequired ( reachabilityFlags ) ? " c " : " - " < nl > + let t = isTransientConnection ( reachabilityFlags ) ? " t " : " - " < nl > + let i = isInterventionRequired ( reachabilityFlags ) ? " i " : " - " < nl > + let C = isConnectionOnTraffic ( reachabilityFlags ) ? " C " : " - " < nl > + let D = isConnectionOnDemand ( reachabilityFlags ) ? " D " : " - " < nl > + let l = isLocalAddress ( reachabilityFlags ) ? " l " : " - " < nl > + let d = isDirect ( reachabilityFlags ) ? " d " : " - " < nl > + < nl > + return " \ ( W ) \ ( R ) \ ( c ) \ ( t ) \ ( i ) \ ( C ) \ ( D ) \ ( l ) \ ( d ) " < nl > + } < nl > + < nl > + deinit { < nl > + stopNotifier ( ) < nl > + < nl > + reachabilityRef = nil < nl > + whenReachable = nil < nl > + whenUnreachable = nil < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / Podfile b / actor - sdk / sdk - core - ios / Podfile < nl > index 8709aa3 . . c412c0a 100644 < nl > - - - a / actor - sdk / sdk - core - ios / Podfile < nl > + + + b / actor - sdk / sdk - core - ios / Podfile < nl > @ @ - 27 , 6 + 27 , 7 @ @ target ' ActorApp ' do < nl > pod ' NYTPhotoViewer ' < nl > pod ' TTTAttributedLabel ' < nl > pod ' RSKImageCropper ' < nl > + pod ' JDStatusBarNotification ' < nl > < nl > # Small UI < nl > pod ' VBFPopFlatButton ' < nl > @ @ - 58 , 6 + 59 , 7 @ @ target ' ActorSDK ' do < nl > pod ' NYTPhotoViewer ' < nl > pod ' TTTAttributedLabel ' < nl > pod ' RSKImageCropper ' < nl > + pod ' JDStatusBarNotification ' < nl > < nl > # Small UI < nl > pod ' VBFPopFlatButton '

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / project . pbxproj 
 index 3a06e8a . . 48b7ede 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / project . pbxproj 
 @ @ - 301 , 7 + 301 , 7 @ @ 
 	 	 	 ) ; 
 	 	 	 runOnlyForDeploymentPostprocessing = 0 ; 
 	 	 	 shellPath = / bin / sh ; 
 - 	 	 	 shellScript = " diff \ " $ { PODS _ ROOT } / . . / Podfile . lock \ " \ " $ { PODS _ ROOT } / Manifest . lock \ " > / dev / null \ nif [ [ $ ? ! = 0 ] ] ; then \ n cat < < EOM \ nerror : The sandbox is not in sync with the Podfile . lock . Run ' pod install ' or update your CocoaPods installation . \ nEOM \ n exit 1 \ nfi \ n " ; 
 + 	 	 	 shellScript = " diff \ " $ { PODS _ ROOT } / . . / Podfile . lock \ " \ " $ { PODS _ ROOT } / Manifest . lock \ " > / dev / null \ nif [ $ ? ! = 0 ] ; then \ n # print error to STDERR \ n echo \ " error : The sandbox is not in sync with the Podfile . lock . Run ' pod install ' or update your CocoaPods installation . \ " > & 2 \ n exit 1 \ nfi \ n " ; 
 	 	 	 showEnvVarsInLog = 0 ; 
 	 	 } ; 
 	 	 851EE1A34619AE6677649A27 / * Embed Pods Frameworks * / = { 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index 7eb0fa4 . . 1074d8b 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 243 , 7 + 243 , 6 @ @ 
 	 	 06C1D0771C8BC9FC00B73632 / * AAAuthNameViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06C1D0761C8BC9FC00B73632 / * AAAuthNameViewController . swift * / ; } ; 
 	 	 06C1D07B1C8BFE5C00B73632 / * AAAuthPhoneViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06C1D07A1C8BFE5C00B73632 / * AAAuthPhoneViewController . swift * / ; } ; 
 	 	 06C1D07E1C8D0DEA00B73632 / * Telephony . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06C1D07D1C8D0DE900B73632 / * Telephony . swift * / ; } ; 
 - 	 	 06CE898A1BD8401C005A5530 / * Reachability . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06CE89891BD8401C005A5530 / * Reachability . swift * / ; } ; 
 	 	 06CE898C1BD841C9005A5530 / * SystemConfiguration . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / ; } ; 
 	 	 06CE89901BD84DF5005A5530 / * ActorSDKAnalytics . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06CE898F1BD84DF5005A5530 / * ActorSDKAnalytics . swift * / ; } ; 
 	 	 06D5C0571C8D6E20002D5045 / * AAAuthLogInViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06D5C0561C8D6E20002D5045 / * AAAuthLogInViewController . swift * / ; } ; 
 @ @ - 621 , 7 + 620 , 6 @ @ 
 	 	 06C1D0761C8BC9FC00B73632 / * AAAuthNameViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAuthNameViewController . swift ; sourceTree = " < group > " ; } ; 
 	 	 06C1D07A1C8BFE5C00B73632 / * AAAuthPhoneViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAuthPhoneViewController . swift ; sourceTree = " < group > " ; } ; 
 	 	 06C1D07D1C8D0DE900B73632 / * Telephony . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = Telephony . swift ; sourceTree = " < group > " ; } ; 
 - 	 	 06CE89891BD8401C005A5530 / * Reachability . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = Reachability . swift ; sourceTree = " < group > " ; } ; 
 	 	 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / = { isa = PBXFileReference ; lastKnownFileType = wrapper . framework ; name = SystemConfiguration . framework ; path = System / Library / Frameworks / SystemConfiguration . framework ; sourceTree = SDKROOT ; } ; 
 	 	 06CE898F1BD84DF5005A5530 / * ActorSDKAnalytics . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = ActorSDKAnalytics . swift ; sourceTree = " < group > " ; } ; 
 	 	 06D5C0561C8D6E20002D5045 / * AAAuthLogInViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAAuthLogInViewController . swift ; sourceTree = " < group > " ; } ; 
 @ @ - 986 , 7 + 984 , 6 @ @ 
 	 	 	 	 066A51581BC4C14A000E606E / * AASwiftlyLRU . swift * / , 
 	 	 	 	 066A51641BC4C366000E606E / * AATools . swift * / , 
 	 	 	 	 065975381BC7CA7B00B8C7DF / * Bundle . swift * / , 
 - 	 	 	 	 06CE89891BD8401C005A5530 / * Reachability . swift * / , 
 	 	 	 	 06C1D07D1C8D0DE900B73632 / * Telephony . swift * / , 
 	 	 	 ) ; 
 	 	 	 path = Utils ; 
 @ @ - 2021 , 7 + 2018 , 7 @ @ 
 	 	 	 ) ; 
 	 	 	 runOnlyForDeploymentPostprocessing = 0 ; 
 	 	 	 shellPath = / bin / sh ; 
 - 	 	 	 shellScript = " diff \ " $ { PODS _ ROOT } / . . / Podfile . lock \ " \ " $ { PODS _ ROOT } / Manifest . lock \ " > / dev / null \ nif [ [ $ ? ! = 0 ] ] ; then \ n cat < < EOM \ nerror : The sandbox is not in sync with the Podfile . lock . Run ' pod install ' or update your CocoaPods installation . \ nEOM \ n exit 1 \ nfi \ n " ; 
 + 	 	 	 shellScript = " diff \ " $ { PODS _ ROOT } / . . / Podfile . lock \ " \ " $ { PODS _ ROOT } / Manifest . lock \ " > / dev / null \ nif [ $ ? ! = 0 ] ; then \ n # print error to STDERR \ n echo \ " error : The sandbox is not in sync with the Podfile . lock . Run ' pod install ' or update your CocoaPods installation . \ " > & 2 \ n exit 1 \ nfi \ n " ; 
 	 	 	 showEnvVarsInLog = 0 ; 
 	 	 } ; 
 	 	 A2ED258362D73946D3AE7FB4 / * [ CP ] Copy Pods Resources * / = { 
 @ @ - 2263 , 7 + 2260 , 6 @ @ 
 	 	 	 	 061850ED1C95CBF000C522D5 / * YYTextArchiver . m in Sources * / , 
 	 	 	 	 066A50E21BC4AF9F000E606E / * ActorSDK . swift in Sources * / , 
 	 	 	 	 15D35F761C201B6B00E3717A / * AACustomPresentationAnimationController . swift in Sources * / , 
 - 	 	 	 	 06CE898A1BD8401C005A5530 / * Reachability . swift in Sources * / , 
 	 	 	 	 06E7B24C1C0FAB500090660C / * AAMapFastView . swift in Sources * / , 
 	 	 	 	 BED5A1F11C48396A0045FDB0 / * NYTPhotoCaptionView . m in Sources * / , 
 	 	 	 	 BED5A20F1C4839880045FDB0 / * NSBundle + NYTPhotoViewer . m in Sources * / , 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 index afdd9ab . . c033882 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 @ @ - 7 , 6 + 7 , 7 @ @ import JDStatusBarNotification 
 import PushKit 
 import SafariServices 
 import DZNWebViewController 
 + import ReachabilitySwift 
 
 @ objc open class ActorSDK : NSObject , PKPushRegistryDelegate { 
 
 @ @ - 208 , 7 + 209 , 7 @ @ import DZNWebViewController 
 fileprivate ( set ) open var bindedToWindow : UIWindow ! 
 
 / / Reachability 
 - / / fileprivate var reachability : Reachability ! 
 + fileprivate var reachability : Reachability ! 
 
 public override init ( ) { 
 
 @ @ - 227 , 65 + 228 , 65 @ @ import DZNWebViewController 
 
 AAActorRuntime . configureRuntime ( ) 
 
 - let builder = ACConfigurationBuilder ( ) 
 + let builder = ACConfigurationBuilder ( ) ! 
 
 / / Api Connections 
 let deviceKey = UUID ( ) . uuidString 
 let deviceName = UIDevice . current . name 
 let appTitle = " Actor iOS " 
 for url in endpoints { 
 - builder ? . addEndpoint ( url ) 
 + builder . addEndpoint ( url ) 
 } 
 for key in trustedKeys { 
 - builder ? . addTrustedKey ( key ) 
 + builder . addTrustedKey ( key ) 
 } 
 - builder ? . setApiConfiguration ( ACApiConfiguration ( appTitle : appTitle , withAppId : jint ( apiId ) , withAppKey : apiKey , withDeviceTitle : deviceName , withDeviceId : deviceKey ) ) 
 + builder . setApiConfiguration ( ACApiConfiguration ( appTitle : appTitle , withAppId : jint ( apiId ) , withAppKey : apiKey , withDeviceTitle : deviceName , withDeviceId : deviceKey ) ) 
 
 / / Providers 
 - builder ? . setPhoneBookProvider ( PhoneBookProvider ( ) ) 
 - builder ? . setNotificationProvider ( iOSNotificationProvider ( ) ) 
 - builder ? . setCallsProvider ( iOSCallsProvider ( ) ) 
 + builder . setPhoneBookProvider ( PhoneBookProvider ( ) ) 
 + builder . setNotificationProvider ( iOSNotificationProvider ( ) ) 
 + builder . setCallsProvider ( iOSCallsProvider ( ) ) 
 
 / / Stats 
 - builder ? . setPlatformType ( ACPlatformType . ios ( ) ) 
 - builder ? . setDeviceCategory ( ACDeviceCategory . mobile ( ) ) 
 + builder . setPlatformType ( ACPlatformType . ios ( ) ) 
 + builder . setDeviceCategory ( ACDeviceCategory . mobile ( ) ) 
 
 / / Locale 
 for lang in Locale . preferredLanguages { 
 log ( " Found locale : \ ( lang ) " ) 
 - builder ? . addPreferredLanguage ( lang ) 
 + builder . addPreferredLanguage ( lang ) 
 } 
 
 / / TimeZone 
 let timeZone = TimeZone . current . identifier 
 log ( " Found time zone : \ ( timeZone ) " ) 
 - builder ? . setTimeZone ( timeZone ) 
 + builder . setTimeZone ( timeZone ) 
 
 / / AutoJoin 
 for s in autoJoinGroups { 
 - builder ? . addAutoJoinGroup ( withToken : s ) 
 + builder . addAutoJoinGroup ( withToken : s ) 
 } 
 if autoJoinOnReady { 
 - builder ? . setAutoJoinType ( ACAutoJoinType . after _ INIT ( ) ) 
 + builder . setAutoJoinType ( ACAutoJoinType . after _ INIT ( ) ) 
 } else { 
 - builder ? . setAutoJoinType ( ACAutoJoinType . immediately ( ) ) 
 + builder . setAutoJoinType ( ACAutoJoinType . immediately ( ) ) 
 } 
 
 / / Logs 
 / / builder . setEnableFilesLogging ( true ) 
 
 / / Application name 
 - builder ? . setCustomAppName ( appName ) 
 + builder . setCustomAppName ( appName ) 
 
 / / Config 
 - builder ? . setPhoneBookImportEnabled ( jboolean ( enablePhoneBookImport ) ) 
 - builder ? . setVoiceCallsEnabled ( jboolean ( enableCalls ) ) 
 - builder ? . setVideoCallsEnabled ( jboolean ( enableCalls ) ) 
 - builder ? . setIsEnabledGroupedChatList ( false ) 
 + builder . setPhoneBookImportEnabled ( jboolean ( enablePhoneBookImport ) ) 
 + builder . setVoiceCallsEnabled ( jboolean ( enableCalls ) ) 
 + builder . setVideoCallsEnabled ( jboolean ( enableCalls ) ) 
 + builder . setIsEnabledGroupedChatList ( false ) 
 / / builder . setEnableFilesLogging ( true ) 
 
 / / Creating messenger 
 - messenger = ACCocoaMessenger ( configuration : ( builder ? . build ( ) ) ! ) 
 + messenger = ACCocoaMessenger ( configuration : builder . build ( ) ) 
 
 / / Configure bubbles 
 AABubbles . layouters = delegate . actorConfigureBubbleLayouters ( AABubbles . builtInLayouters ) 
 @ @ - 331 , 23 + 332 , 21 @ @ import DZNWebViewController 
 
 / / Subscribe to network changes 
 
 - / / do { 
 - / / reachability = try Reachability . reachabilityForInternetConnection ( ) 
 - / / NotificationCenter . default . addObserver ( self , selector : # selector ( ActorSDK . reachabilityChanged ( _ : ) ) , name : NSNotification . Name ( rawValue : ReachabilityChangedNotification ) , object : reachability ) 
 - / / try reachability . startNotifier ( ) 
 - / / } catch { 
 - / / print ( " Unable to create Reachability " ) 
 - / / return 
 - / / } 
 - } 
 - 
 - / / @ objc func reachabilityChanged ( _ note : Notification ) { 
 - / / print ( " reachabilityChanged ( \ ( reachability . isReachable ( ) ) ) " ) 
 - / / 
 - / / if reachability . isReachable ( ) { 
 - / / messenger . forceNetworkCheck ( ) 
 - / / } 
 - / / } 
 + reachability = Reachability ( ) ! 
 + if reachability ! = nil { 
 + reachability . whenReachable = { reachability in 
 + self . messenger . forceNetworkCheck ( ) 
 + } 
 + 
 + do { 
 + try reachability . startNotifier ( ) 
 + } catch { 
 + print ( " Unable to start Reachability " ) 
 + } 
 + } else { 
 + print ( " Unable to create Reachability " ) 
 + } 
 + } 
 
 func didLoggedIn ( ) { 
 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / Reachability . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / Reachability . swift 
 deleted file mode 100644 
 index 8cf8d1c . . 0000000 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / Reachability . swift 
 + + + / dev / null 
 @ @ - 1 , 389 + 0 , 0 @ @ 
 - / / / * 
 - / / Copyright ( c ) 2014 , Ashley Mills 
 - / / All rights reserved . 
 - / / 
 - / / Redistribution and use in source and binary forms , with or without 
 - / / modification , are permitted provided that the following conditions are met : 
 - / / 
 - / / 1 . Redistributions of source code must retain the above copyright notice , this 
 - / / list of conditions and the following disclaimer . 
 - / / 
 - / / 2 . Redistributions in binary form must reproduce the above copyright notice , 
 - / / this list of conditions and the following disclaimer in the documentation 
 - / / and / or other materials provided with the distribution . 
 - / / 
 - / / THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS " AS IS " 
 - / / AND ANY EXPRESS OR IMPLIED WARRANTIES , INCLUDING , BUT NOT LIMITED TO , THE 
 - / / IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 - / / ARE DISCLAIMED . IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 - / / LIABLE FOR ANY DIRECT , INDIRECT , INCIDENTAL , SPECIAL , EXEMPLARY , OR 
 - / / CONSEQUENTIAL DAMAGES ( INCLUDING , BUT NOT LIMITED TO , PROCUREMENT OF 
 - / / SUBSTITUTE GOODS OR SERVICES ; LOSS OF USE , DATA , OR PROFITS ; OR BUSINESS 
 - / / INTERRUPTION ) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY , WHETHER IN 
 - / / CONTRACT , STRICT LIABILITY , OR TORT ( INCLUDING NEGLIGENCE OR OTHERWISE ) 
 - / / ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE , EVEN IF ADVISED OF THE 
 - / / POSSIBILITY OF SUCH DAMAGE . 
 - / / * / 
 - / / 
 - / / import SystemConfiguration 
 - / / import Foundation 
 - / / 
 - / / enum ReachabilityError : Error { 
 - / / case failedToCreateWithAddress ( sockaddr _ in ) 
 - / / case failedToCreateWithHostname ( String ) 
 - / / case unableToSetCallback 
 - / / case unableToSetDispatchQueue 
 - / / } 
 - / / 
 - / / public let ReachabilityChangedNotification = " ReachabilityChangedNotification " 
 - / / 
 - / / func callback ( _ reachability : SCNetworkReachability , flags : SCNetworkReachabilityFlags , info : UnsafeMutableRawPointer ) { 
 - / / / / let reachability = Unmanaged < Reachability > . fromOpaque ( OpaquePointer ( info ) ) . takeUnretainedValue ( ) 
 - / / / / 
 - / / / / DispatchQueue . main . async { 
 - / / / / reachability . reachabilityChanged ( flags ) 
 - / / / / } 
 - / / } 
 - / / 
 - / / 
 - / / open class Reachability : NSObject { 
 - / / 
 - / / public typealias NetworkReachable = ( Reachability ) - > ( ) 
 - / / public typealias NetworkUnreachable = ( Reachability ) - > ( ) 
 - / / 
 - / / public enum NetworkStatus : CustomStringConvertible { 
 - / / 
 - / / case notReachable , reachableViaWiFi , reachableViaWWAN 
 - / / 
 - / / public var description : String { 
 - / / switch self { 
 - / / case . reachableViaWWAN : 
 - / / return " Cellular " 
 - / / case . reachableViaWiFi : 
 - / / return " WiFi " 
 - / / case . notReachable : 
 - / / return " No Connection " 
 - / / } 
 - / / } 
 - / / } 
 - / / 
 - / / / / MARK : - * * * Public properties * * * 
 - / / 
 - / / open var whenReachable : NetworkReachable ? 
 - / / open var whenUnreachable : NetworkUnreachable ? 
 - / / open var reachableOnWWAN : Bool 
 - / / open var notificationCenter = NotificationCenter . default 
 - / / 
 - / / open var currentReachabilityStatus : NetworkStatus { 
 - / / if isReachable ( ) { 
 - / / if isReachableViaWiFi ( ) { 
 - / / return . reachableViaWiFi 
 - / / } 
 - / / if isRunningOnDevice { 
 - / / return . reachableViaWWAN 
 - / / } 
 - / / } 
 - / / 
 - / / return . notReachable 
 - / / } 
 - / / 
 - / / open var currentReachabilityString : String { 
 - / / return " \ ( currentReachabilityStatus ) " 
 - / / } 
 - / / 
 - / / / / MARK : - * * * Initialisation methods * * * 
 - / / 
 - / / required public init ( reachabilityRef : SCNetworkReachability ) { 
 - / / reachableOnWWAN = true 
 - / / self . reachabilityRef = reachabilityRef 
 - / / } 
 - / / 
 - / / public convenience init ( hostname : String ) throws { 
 - / / 
 - / / let nodename = ( hostname as NSString ) . utf8String 
 - / / guard let ref = SCNetworkReachabilityCreateWithName ( nil , nodename ! ) else { throw ReachabilityError . failedToCreateWithHostname ( hostname ) } 
 - / / 
 - / / self . init ( reachabilityRef : ref ) 
 - / / } 
 - / / 
 - / / open class func reachabilityForInternetConnection ( ) throws - > Reachability { 
 - / / 
 - / / var zeroAddress = sockaddr _ in ( ) 
 - / / zeroAddress . sin _ len = UInt8 ( MemoryLayout . size ( ofValue : zeroAddress ) ) 
 - / / zeroAddress . sin _ family = sa _ family _ t ( AF _ INET ) 
 - / / 
 - / / / / guard let ref = withUnsafePointer ( to : & zeroAddress , { 
 - / / / / SCNetworkReachabilityCreateWithAddress ( nil , UnsafePointer ( $ 0 ) ) 
 - / / / / } ) else { throw ReachabilityError . failedToCreateWithAddress ( zeroAddress ) } 
 - / / 
 - / / / / return Reachability ( reachabilityRef : ref ) 
 - / / 
 - / / } 
 - / / 
 - / / open class func reachabilityForLocalWiFi ( ) throws - > Reachability { 
 - / / 
 - / / var localWifiAddress : sockaddr _ in = sockaddr _ in ( sin _ len : _ _ uint8 _ t ( 0 ) , sin _ family : sa _ family _ t ( 0 ) , sin _ port : in _ port _ t ( 0 ) , sin _ addr : in _ addr ( s _ addr : 0 ) , sin _ zero : ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ) 
 - / / localWifiAddress . sin _ len = UInt8 ( MemoryLayout . size ( ofValue : localWifiAddress ) ) 
 - / / localWifiAddress . sin _ family = sa _ family _ t ( AF _ INET ) 
 - / / 
 - / / / / IN _ LINKLOCALNETNUM is defined in < netinet / in . h > as 169 . 254 . 0 . 0 
 - / / let address : UInt32 = 0xA9FE0000 
 - / / localWifiAddress . sin _ addr . s _ addr = in _ addr _ t ( address . bigEndian ) 
 - / / 
 - / / / / guard let ref = withUnsafePointer ( to : & localWifiAddress , { 
 - / / / / SCNetworkReachabilityCreateWithAddress ( nil , UnsafePointer ( $ 0 ) ) 
 - / / / / } ) else { throw ReachabilityError . failedToCreateWithAddress ( localWifiAddress ) } 
 - / / 
 - / / / / return Reachability ( reachabilityRef : ref ) 
 - / / } 
 - / / 
 - / / / / MARK : - * * * Notifier methods * * * 
 - / / open func startNotifier ( ) throws { 
 - / / 
 - / / if notifierRunning { return } 
 - / / 
 - / / / / var context = SCNetworkReachabilityContext ( version : 0 , info : nil , retain : nil , release : nil , copyDescription : nil ) 
 - / / / / context . info = UnsafeMutablePointer ( Unmanaged . passUnretained ( self ) . toOpaque ( ) ) 
 - / / / / 
 - / / / / if ! SCNetworkReachabilitySetCallback ( reachabilityRef ! , callback , & context ) { 
 - / / / / stopNotifier ( ) 
 - / / / / throw ReachabilityError . unableToSetCallback 
 - / / / / } 
 - / / / / 
 - / / / / if ! SCNetworkReachabilitySetDispatchQueue ( reachabilityRef ! , reachabilitySerialQueue ) { 
 - / / / / stopNotifier ( ) 
 - / / / / throw ReachabilityError . unableToSetDispatchQueue 
 - / / / / } 
 - / / 
 - / / notifierRunning = true 
 - / / } 
 - / / 
 - / / 
 - / / open func stopNotifier ( ) { 
 - / / if let reachabilityRef = reachabilityRef { 
 - / / SCNetworkReachabilitySetCallback ( reachabilityRef , nil , nil ) 
 - / / SCNetworkReachabilitySetDispatchQueue ( reachabilityRef , nil ) 
 - / / } 
 - / / notifierRunning = false 
 - / / } 
 - / / 
 - / / / / MARK : - * * * Connection test methods * * * 
 - / / open func isReachable ( ) - > Bool { 
 - / / return isReachableWithTest ( { ( flags : SCNetworkReachabilityFlags ) - > ( Bool ) in 
 - / / return self . isReachableWithFlags ( flags ) 
 - / / } ) 
 - / / } 
 - / / 
 - / / open func isReachableViaWWAN ( ) - > Bool { 
 - / / 
 - / / if isRunningOnDevice { 
 - / / return isReachableWithTest ( ) { flags - > Bool in 
 - / / / / Check we ' re REACHABLE 
 - / / if self . isReachable ( flags ) { 
 - / / 
 - / / / / Now , check we ' re on WWAN 
 - / / if self . isOnWWAN ( flags ) { 
 - / / return true 
 - / / } 
 - / / } 
 - / / return false 
 - / / } 
 - / / } 
 - / / return false 
 - / / } 
 - / / 
 - / / open func isReachableViaWiFi ( ) - > Bool { 
 - / / 
 - / / return isReachableWithTest ( ) { flags - > Bool in 
 - / / 
 - / / / / Check we ' re reachable 
 - / / if self . isReachable ( flags ) { 
 - / / 
 - / / if self . isRunningOnDevice { 
 - / / / / Check we ' re NOT on WWAN 
 - / / if self . isOnWWAN ( flags ) { 
 - / / return false 
 - / / } 
 - / / } 
 - / / return true 
 - / / } 
 - / / 
 - / / return false 
 - / / } 
 - / / } 
 - / / 
 - / / / / MARK : - * * * Private methods * * * 
 - / / fileprivate var isRunningOnDevice : Bool = { 
 - / / # if ( arch ( i386 ) | | arch ( x86 _ 64 ) ) & & os ( iOS ) 
 - / / return false 
 - / / # else 
 - / / return true 
 - / / # endif 
 - / / } ( ) 
 - / / 
 - / / fileprivate var notifierRunning = false 
 - / / fileprivate var reachabilityRef : SCNetworkReachability ? 
 - / / fileprivate let reachabilitySerialQueue = DispatchQueue ( label : " uk . co . ashleymills . reachability " , attributes : [ ] ) 
 - / / 
 - / / fileprivate func reachabilityChanged ( _ flags : SCNetworkReachabilityFlags ) { 
 - / / if isReachableWithFlags ( flags ) { 
 - / / if let block = whenReachable { 
 - / / block ( self ) 
 - / / } 
 - / / } else { 
 - / / if let block = whenUnreachable { 
 - / / block ( self ) 
 - / / } 
 - / / } 
 - / / 
 - / / notificationCenter . post ( name : Notification . Name ( rawValue : ReachabilityChangedNotification ) , object : self ) 
 - / / } 
 - / / 
 - / / fileprivate func isReachableWithFlags ( _ flags : SCNetworkReachabilityFlags ) - > Bool { 
 - / / 
 - / / let reachable = isReachable ( flags ) 
 - / / 
 - / / if ! reachable { 
 - / / return false 
 - / / } 
 - / / 
 - / / if isConnectionRequiredOrTransient ( flags ) { 
 - / / return false 
 - / / } 
 - / / 
 - / / if isRunningOnDevice { 
 - / / if isOnWWAN ( flags ) & & ! reachableOnWWAN { 
 - / / / / We don ' t want to connect when on 3G . 
 - / / return false 
 - / / } 
 - / / } 
 - / / 
 - / / return true 
 - / / } 
 - / / 
 - / / fileprivate func isReachableWithTest ( _ test : ( SCNetworkReachabilityFlags ) - > ( Bool ) ) - > Bool { 
 - / / 
 - / / if let reachabilityRef = reachabilityRef { 
 - / / 
 - / / var flags = SCNetworkReachabilityFlags ( rawValue : 0 ) 
 - / / let gotFlags = withUnsafeMutablePointer ( to : & flags ) { 
 - / / SCNetworkReachabilityGetFlags ( reachabilityRef , UnsafeMutablePointer ( $ 0 ) ) 
 - / / } 
 - / / 
 - / / if gotFlags { 
 - / / return test ( flags ) 
 - / / } 
 - / / } 
 - / / 
 - / / return false 
 - / / } 
 - / / 
 - / / / / WWAN may be available , but not active until a connection has been established . 
 - / / / / WiFi may require a connection for VPN on Demand . 
 - / / fileprivate func isConnectionRequired ( ) - > Bool { 
 - / / return connectionRequired ( ) 
 - / / } 
 - / / 
 - / / fileprivate func connectionRequired ( ) - > Bool { 
 - / / return isReachableWithTest ( { ( flags : SCNetworkReachabilityFlags ) - > ( Bool ) in 
 - / / return self . isConnectionRequired ( flags ) 
 - / / } ) 
 - / / } 
 - / / 
 - / / / / Dynamic , on demand connection ? 
 - / / fileprivate func isConnectionOnDemand ( ) - > Bool { 
 - / / return isReachableWithTest ( { ( flags : SCNetworkReachabilityFlags ) - > ( Bool ) in 
 - / / return self . isConnectionRequired ( flags ) & & self . isConnectionOnTrafficOrDemand ( flags ) 
 - / / } ) 
 - / / } 
 - / / 
 - / / / / Is user intervention required ? 
 - / / fileprivate func isInterventionRequired ( ) - > Bool { 
 - / / return isReachableWithTest ( { ( flags : SCNetworkReachabilityFlags ) - > ( Bool ) in 
 - / / return self . isConnectionRequired ( flags ) & & self . isInterventionRequired ( flags ) 
 - / / } ) 
 - / / } 
 - / / 
 - / / fileprivate func isOnWWAN ( _ flags : SCNetworkReachabilityFlags ) - > Bool { 
 - / / # if os ( iOS ) 
 - / / return flags . contains ( . isWWAN ) 
 - / / # else 
 - / / return false 
 - / / # endif 
 - / / } 
 - / / fileprivate func isReachable ( _ flags : SCNetworkReachabilityFlags ) - > Bool { 
 - / / return flags . contains ( . reachable ) 
 - / / } 
 - / / fileprivate func isConnectionRequired ( _ flags : SCNetworkReachabilityFlags ) - > Bool { 
 - / / return flags . contains ( . connectionRequired ) 
 - / / } 
 - / / fileprivate func isInterventionRequired ( _ flags : SCNetworkReachabilityFlags ) - > Bool { 
 - / / return flags . contains ( . interventionRequired ) 
 - / / } 
 - / / fileprivate func isConnectionOnTraffic ( _ flags : SCNetworkReachabilityFlags ) - > Bool { 
 - / / return flags . contains ( . connectionOnTraffic ) 
 - / / } 
 - / / fileprivate func isConnectionOnDemand ( _ flags : SCNetworkReachabilityFlags ) - > Bool { 
 - / / return flags . contains ( . connectionOnDemand ) 
 - / / } 
 - / / func isConnectionOnTrafficOrDemand ( _ flags : SCNetworkReachabilityFlags ) - > Bool { 
 - / / return ! flags . intersection ( [ . connectionOnTraffic , . connectionOnDemand ] ) . isEmpty 
 - / / } 
 - / / fileprivate func isTransientConnection ( _ flags : SCNetworkReachabilityFlags ) - > Bool { 
 - / / return flags . contains ( . transientConnection ) 
 - / / } 
 - / / fileprivate func isLocalAddress ( _ flags : SCNetworkReachabilityFlags ) - > Bool { 
 - / / return flags . contains ( . isLocalAddress ) 
 - / / } 
 - / / fileprivate func isDirect ( _ flags : SCNetworkReachabilityFlags ) - > Bool { 
 - / / return flags . contains ( . isDirect ) 
 - / / } 
 - / / fileprivate func isConnectionRequiredOrTransient ( _ flags : SCNetworkReachabilityFlags ) - > Bool { 
 - / / let testcase : SCNetworkReachabilityFlags = [ . connectionRequired , . transientConnection ] 
 - / / return flags . intersection ( testcase ) = = testcase 
 - / / } 
 - / / 
 - / / fileprivate var reachabilityFlags : SCNetworkReachabilityFlags { 
 - / / if let reachabilityRef = reachabilityRef { 
 - / / 
 - / / var flags = SCNetworkReachabilityFlags ( rawValue : 0 ) 
 - / / let gotFlags = withUnsafeMutablePointer ( to : & flags ) { 
 - / / SCNetworkReachabilityGetFlags ( reachabilityRef , UnsafeMutablePointer ( $ 0 ) ) 
 - / / } 
 - / / 
 - / / if gotFlags { 
 - / / return flags 
 - / / } 
 - / / } 
 - / / 
 - / / return [ ] 
 - / / } 
 - / / 
 - / / override open var description : String { 
 - / / 
 - / / var W : String 
 - / / if isRunningOnDevice { 
 - / / W = isOnWWAN ( reachabilityFlags ) ? " W " : " - " 
 - / / } else { 
 - / / W = " X " 
 - / / } 
 - / / let R = isReachable ( reachabilityFlags ) ? " R " : " - " 
 - / / let c = isConnectionRequired ( reachabilityFlags ) ? " c " : " - " 
 - / / let t = isTransientConnection ( reachabilityFlags ) ? " t " : " - " 
 - / / let i = isInterventionRequired ( reachabilityFlags ) ? " i " : " - " 
 - / / let C = isConnectionOnTraffic ( reachabilityFlags ) ? " C " : " - " 
 - / / let D = isConnectionOnDemand ( reachabilityFlags ) ? " D " : " - " 
 - / / let l = isLocalAddress ( reachabilityFlags ) ? " l " : " - " 
 - / / let d = isDirect ( reachabilityFlags ) ? " d " : " - " 
 - / / 
 - / / return " \ ( W ) \ ( R ) \ ( c ) \ ( t ) \ ( i ) \ ( C ) \ ( D ) \ ( l ) \ ( d ) " 
 - / / } 
 - / / 
 - / / deinit { 
 - / / stopNotifier ( ) 
 - / / 
 - / / reachabilityRef = nil 
 - / / whenReachable = nil 
 - / / whenUnreachable = nil 
 - / / } 
 - / / } 
 diff - - git a / actor - sdk / sdk - core - ios / Podfile b / actor - sdk / sdk - core - ios / Podfile 
 index c36114c . . 149cff3 100644 
 - - - a / actor - sdk / sdk - core - ios / Podfile 
 + + + b / actor - sdk / sdk - core - ios / Podfile 
 @ @ - 14 , 6 + 14 , 7 @ @ target ' ActorApp ' do 
 pod ' RegexKitLite ' 
 # pod ' CocoaAsyncSocket ' 
 pod ' zipzap ' 
 + pod ' ReachabilitySwift ' , ' ~ > 3 ' 
 
 # Main UI 
 pod ' TTTAttributedLabel ' 
 @ @ - 47 , 6 + 48 , 7 @ @ target ' ActorSDK ' do 
 pod ' RegexKitLite ' 
 # pod ' CocoaAsyncSocket ' 
 pod ' zipzap ' 
 + pod ' ReachabilitySwift ' , ' ~ > 3 ' 
 
 # Main UI 
 pod ' TTTAttributedLabel '

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / project . pbxproj 
 index e1451c8 . . a27be27 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / project . pbxproj 
 @ @ - 10 , 6 + 10 , 7 @ @ 
 	 	 06230F091BC7FF3500A4807B / * ActorSDK . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 06230F081BC7FF3000A4807B / * ActorSDK . framework * / ; } ; 
 	 	 06230F0A1BC7FF3500A4807B / * ActorSDK . framework in Embed Frameworks * / = { isa = PBXBuildFile ; fileRef = 06230F081BC7FF3000A4807B / * ActorSDK . framework * / ; settings = { ATTRIBUTES = ( CodeSignOnCopy , RemoveHeadersOnCopy , ) ; } ; } ; 
 	 	 068C6E4F1BBC4BF900182516 / * Launch Screen . storyboard in Resources * / = { isa = PBXBuildFile ; fileRef = 068C6E4E1BBC4BF900182516 / * Launch Screen . storyboard * / ; settings = { ASSET _ TAGS = ( ) ; } ; } ; 
 + 	 	 06CE898E1BD841D0005A5530 / * SystemConfiguration . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 06CE898D1BD841D0005A5530 / * SystemConfiguration . framework * / ; } ; 
 	 	 2CE3FEBEF881B465BDE1045A959BFB0A / * Images . xcassets in Resources * / = { isa = PBXBuildFile ; fileRef = 2ACD33B73078EB46A22D2D4C45BF1E6E / * Images . xcassets * / ; } ; 
 	 	 34279C7FB8E40393FEAC939F6474BE2E / * main . m in Sources * / = { isa = PBXBuildFile ; fileRef = 148837AEB986AFDE519BEBD3686AB073 / * main . m * / ; } ; 
 	 	 4403E543C36C1FDC89DD4E00 / * Pods _ ActorApp . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = E2F298FBF1BB3C0A84996ED3 / * Pods _ ActorApp . framework * / ; } ; 
 @ @ - 52 , 6 + 53 , 7 @ @ 
 	 	 06230F031BC7FF2F00A4807B / * ActorSDK . xcodeproj * / = { isa = PBXFileReference ; lastKnownFileType = " wrapper . pb - project " ; path = ActorSDK . xcodeproj ; sourceTree = " < group > " ; } ; 
 	 	 065974E11BC6926C00B8C7DF / * ActorSDK . framework * / = { isa = PBXFileReference ; explicitFileType = wrapper . framework ; name = ActorSDK . framework ; path = " / Users / ex3ndr / Library / Developer / Xcode / DerivedData / ActorApp - clcqncodqhdxutfqgjvteqywzxue / Build / Products / Debug - iphoneos / ActorSDK . framework " ; sourceTree = " < absolute > " ; } ; 
 	 	 068C6E4E1BBC4BF900182516 / * Launch Screen . storyboard * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = file . storyboard ; name = " Launch Screen . storyboard " ; path = " Supporting Files / Launch Screen . storyboard " ; sourceTree = " < group > " ; } ; 
 + 	 	 06CE898D1BD841D0005A5530 / * SystemConfiguration . framework * / = { isa = PBXFileReference ; lastKnownFileType = wrapper . framework ; name = SystemConfiguration . framework ; path = System / Library / Frameworks / SystemConfiguration . framework ; sourceTree = SDKROOT ; } ; 
 	 	 148837AEB986AFDE519BEBD3686AB073 / * main . m * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . objc ; name = main . m ; path = " Supporting Files / main . m " ; sourceTree = " < group > " ; } ; 
 	 	 2A521812020DAAAA325065ADC32B7DEB / * AppDelegate . swift * / = { isa = PBXFileReference ; lastKnownFileType = sourcecode . swift ; path = AppDelegate . swift ; sourceTree = " < group > " ; } ; 
 	 	 2ACD33B73078EB46A22D2D4C45BF1E6E / * Images . xcassets * / = { isa = PBXFileReference ; lastKnownFileType = folder . assetcatalog ; name = Images . xcassets ; path = Resources / Images . xcassets ; sourceTree = " < group > " ; } ; 
 @ @ - 72 , 6 + 74 , 7 @ @ 
 	 	 	 isa = PBXFrameworksBuildPhase ; 
 	 	 	 buildActionMask = 2147483647 ; 
 	 	 	 files = ( 
 + 	 	 	 	 06CE898E1BD841D0005A5530 / * SystemConfiguration . framework in Frameworks * / , 
 	 	 	 	 4403E543C36C1FDC89DD4E00 / * Pods _ ActorApp . framework in Frameworks * / , 
 	 	 	 	 06230F091BC7FF3500A4807B / * ActorSDK . framework in Frameworks * / , 
 	 	 	 ) ; 
 @ @ - 120 , 6 + 123 , 7 @ @ 
 	 	 86C48777C0FD262E78F8BEC9253C9914 / * Frameworks * / = { 
 	 	 	 isa = PBXGroup ; 
 	 	 	 children = ( 
 + 	 	 	 	 06CE898D1BD841D0005A5530 / * SystemConfiguration . framework * / , 
 	 	 	 	 06230F031BC7FF2F00A4807B / * ActorSDK . xcodeproj * / , 
 	 	 	 	 E2F298FBF1BB3C0A84996ED3 / * Pods _ ActorApp . framework * / , 
 	 	 	 	 065974E11BC6926C00B8C7DF / * ActorSDK . framework * / , 
 diff - - git a / actor - sdk / sdk - core - ios / ActorApp / AppDelegate . swift b / actor - sdk / sdk - core - ios / ActorApp / AppDelegate . swift 
 index c107630 . . c38d4cd 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorApp / AppDelegate . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorApp / AppDelegate . swift 
 @ @ - 20 , 6 + 20 , 8 @ @ import ActorSDK 
 ActorSDK . sharedActor ( ) . inviteUrlHost = " quit . email " 
 ActorSDK . sharedActor ( ) . inviteUrlScheme = " actor " 
 
 + ActorSDK . sharedActor ( ) . style . searchStatusBarStyle = . Default 
 + 
 / / Creating Actor 
 ActorSDK . sharedActor ( ) . createActor ( ) 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index abc038e . . 6606a24 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 171 , 6 + 171 , 8 @ @ 
 	 	 069CF4D11BCB909A00C66E12 / * CLTokenInputView . m in Sources * / = { isa = PBXBuildFile ; fileRef = 069CF4C91BCB909A00C66E12 / * CLTokenInputView . m * / ; settings = { ASSET _ TAGS = ( ) ; } ; } ; 
 	 	 069CF4D21BCB909A00C66E12 / * CLTokenView . h in Headers * / = { isa = PBXBuildFile ; fileRef = 069CF4CA1BCB909A00C66E12 / * CLTokenView . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; 
 	 	 069CF4D31BCB909A00C66E12 / * CLTokenView . m in Sources * / = { isa = PBXBuildFile ; fileRef = 069CF4CB1BCB909A00C66E12 / * CLTokenView . m * / ; settings = { ASSET _ TAGS = ( ) ; } ; } ; 
 + 	 	 06CE898A1BD8401C005A5530 / * Reachability . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06CE89891BD8401C005A5530 / * Reachability . swift * / ; settings = { ASSET _ TAGS = ( ) ; } ; } ; 
 + 	 	 06CE898C1BD841C9005A5530 / * SystemConfiguration . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / ; } ; 
 / * End PBXBuildFile section * / 
 
 / * Begin PBXFileReference section * / 
 @ @ - 349 , 6 + 351 , 8 @ @ 
 	 	 069CF4C91BCB909A00C66E12 / * CLTokenInputView . m * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . objc ; name = CLTokenInputView . m ; path = CLTokenInputView / CLTokenInputView . m ; sourceTree = " < group > " ; } ; 
 	 	 069CF4CA1BCB909A00C66E12 / * CLTokenView . h * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . h ; name = CLTokenView . h ; path = CLTokenInputView / CLTokenView . h ; sourceTree = " < group > " ; } ; 
 	 	 069CF4CB1BCB909A00C66E12 / * CLTokenView . m * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . c . objc ; name = CLTokenView . m ; path = CLTokenInputView / CLTokenView . m ; sourceTree = " < group > " ; } ; 
 + 	 	 06CE89891BD8401C005A5530 / * Reachability . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = Reachability . swift ; sourceTree = " < group > " ; } ; 
 + 	 	 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / = { isa = PBXFileReference ; lastKnownFileType = wrapper . framework ; name = SystemConfiguration . framework ; path = System / Library / Frameworks / SystemConfiguration . framework ; sourceTree = SDKROOT ; } ; 
 	 	 22BAEA363892E475F59B7E9F / * Pods - ActorSDK . debug . xcconfig * / = { isa = PBXFileReference ; includeInIndex = 1 ; lastKnownFileType = text . xcconfig ; name = " Pods - ActorSDK . debug . xcconfig " ; path = " Pods / Target Support Files / Pods - ActorSDK / Pods - ActorSDK . debug . xcconfig " ; sourceTree = " < group > " ; } ; 
 	 	 333F91AE5263DD450666CC87 / * Pods - ActorSDK . release . xcconfig * / = { isa = PBXFileReference ; includeInIndex = 1 ; lastKnownFileType = text . xcconfig ; name = " Pods - ActorSDK . release . xcconfig " ; path = " Pods / Target Support Files / Pods - ActorSDK / Pods - ActorSDK . release . xcconfig " ; sourceTree = " < group > " ; } ; 
 	 	 9A22DF21664BBB34087283F6 / * Pods _ ActorSDK . framework * / = { isa = PBXFileReference ; explicitFileType = wrapper . framework ; includeInIndex = 0 ; path = Pods _ ActorSDK . framework ; sourceTree = BUILT _ PRODUCTS _ DIR ; } ; 
 @ @ - 359 , 6 + 363 , 7 @ @ 
 	 	 	 isa = PBXFrameworksBuildPhase ; 
 	 	 	 buildActionMask = 2147483647 ; 
 	 	 	 files = ( 
 + 	 	 	 	 06CE898C1BD841C9005A5530 / * SystemConfiguration . framework in Frameworks * / , 
 	 	 	 	 06230F311BC91A4E00A4807B / * Pods _ ActorSDK . framework in Frameworks * / , 
 	 	 	 	 066A52001BC4E0B0000E606E / * libsqlite3 . tbd in Frameworks * / , 
 	 	 	 ) ; 
 @ @ - 474 , 6 + 479 , 7 @ @ 
 	 	 	 	 066A515A1BC4C178000E606E / * AAHashMap . swift * / , 
 	 	 	 	 066A51641BC4C366000E606E / * AATools . swift * / , 
 	 	 	 	 065975381BC7CA7B00B8C7DF / * Bundle . swift * / , 
 + 	 	 	 	 06CE89891BD8401C005A5530 / * Reachability . swift * / , 
 	 	 	 ) ; 
 	 	 	 path = Utils ; 
 	 	 	 sourceTree = " < group > " ; 
 @ @ - 881 , 6 + 887 , 7 @ @ 
 	 	 2F428D134E194A828C3DF863 / * Frameworks * / = { 
 	 	 	 isa = PBXGroup ; 
 	 	 	 children = ( 
 + 	 	 	 	 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / , 
 	 	 	 	 06230F301BC91A4E00A4807B / * Pods _ ActorSDK . framework * / , 
 	 	 	 	 06230F2E1BC91A4200A4807B / * VBFPopFlatButton . framework * / , 
 	 	 	 	 06230F2C1BC91A2E00A4807B / * CLTokenInputView . framework * / , 
 @ @ - 1175 , 6 + 1182 , 7 @ @ 
 	 	 	 	 066A52E71BC52A20000E606E / * AAInviteLinkViewController . swift in Sources * / , 
 	 	 	 	 066A52241BC4EEAC000E606E / * AAManagedRange . swift in Sources * / , 
 	 	 	 	 066A50E21BC4AF9F000E606E / * ActorSDK . swift in Sources * / , 
 + 	 	 	 	 06CE898A1BD8401C005A5530 / * Reachability . swift in Sources * / , 
 	 	 	 	 066A516D1BC4C366000E606E / * ActorCoreExt . swift in Sources * / , 
 	 	 	 	 066A517E1BC4C373000E606E / * FMDatabaseAdditions . m in Sources * / , 
 	 	 	 	 066A519A1BC4C390000E606E / * FMDBList . swift in Sources * / , 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 index 731257a . . d8d5bf6 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 @ @ - 438 , 6 + 438 , 10 @ @ 
 
 " AlertLinkCopied " = " Link copied to clipboard . " ; 
 
 + " StatusConnecting " = " Connecting . . . " ; 
 + 
 + " StatusSyncing " = " Syncing . . . " ; 
 + 
 / * 
 * Errors 
 * / 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings 
 index e4cfcae . . 494c829 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / pt . lproj / Localizable . strings 
 @ @ - 436 , 6 + 436 , 10 @ @ 
 
 " AlertLinkCopied " = " Link copiado para a á rea de transfer ê ncia . " ; 
 
 + " StatusConnecting " = " Connecting . . . " ; 
 + 
 + " StatusSyncing " = " Syncing . . . " ; 
 + 
 / * 
 * Errors 
 * / 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings 
 index ac49c2d . . d9cd0bd 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / ru . lproj / Localizable . strings 
 @ @ - 440 , 6 + 440 , 10 @ @ 
 
 " AlertLinkCopied " = " С с ы л к а с к о п и р о в а н а в б у ф е р о б м е н а . " ; 
 
 + " StatusConnecting " = " П о д к л ю ч е н и е . . . " ; 
 + 
 + " StatusSyncing " = " С и н х р о н и з а ц и я . . . " ; 
 + 
 / * 
 * Errors 
 * / 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings 
 index 7a8785a . . e4f4cb3 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / zh - Hans . lproj / Localizable . strings 
 @ @ - 438 , 6 + 438 , 10 @ @ 
 
 " AlertLinkCopied " = " 链 接 已 经 被 复 制 到 剪 贴 板 。 " ; 
 
 + " StatusConnecting " = " Connecting . . . " ; 
 + 
 + " StatusSyncing " = " Syncing . . . " ; 
 + 
 / * 
 * Errors 
 * / 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 index 46c8bcd . . e9b66f6 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 @ @ - 3 , 6 + 3 , 7 @ @ 
 / / 
 
 import Foundation 
 + import JDStatusBarNotification 
 
 public class ActorSDK { 
 
 @ @ - 102 , 6 + 103 , 9 @ @ public class ActorSDK { 
 / / View Binding info 
 private ( set ) public var bindedToWindow : UIWindow ! 
 
 + / / Reachability 
 + private var reachability : Reachability ! 
 + 
 / / 
 / / Initialization 
 / / 
 @ @ - 186 , 6 + 190 , 25 @ @ public class ActorSDK { 
 if autoPushMode = = . FromStart { 
 requestPush ( ) 
 } 
 + 
 + / / Subscribe to network changes 
 + 
 + do { 
 + reachability = try Reachability . reachabilityForInternetConnection ( ) 
 + NSNotificationCenter . defaultCenter ( ) . addObserver ( self , selector : " reachabilityChanged : " , name : ReachabilityChangedNotification , object : reachability ) 
 + try reachability . startNotifier ( ) 
 + } catch { 
 + print ( " Unable to create Reachability " ) 
 + return 
 + } 
 + } 
 + 
 + @ objc func reachabilityChanged ( note : NSNotification ) { 
 + print ( " reachabilityChanged ( \ ( reachability . isReachable ( ) ) ) " ) 
 + 
 + if reachability . isReachable ( ) { 
 + messenger . forceNetworkCheck ( ) 
 + } 
 } 
 
 func didLoggedIn ( ) { 
 @ @ - 287 , 6 + 310 , 33 @ @ public class ActorSDK { 
 } 
 window . rootViewController = controller ! 
 } 
 + 
 + / / Bind Status Bar connecting 
 + 
 + if ! style . statusBarConnectingHidden { 
 + 
 + JDStatusBarNotification . setDefaultStyle { ( style ) - > JDStatusBarStyle ! in 
 + style . barColor = self . style . statusBarConnectingBgColor 
 + style . textColor = self . style . statusBarConnectingTextColor 
 + return style 
 + } 
 + 
 + dispatchOnUi { ( ) - > Void in 
 + self . binder . bind ( self . messenger . getAppState ( ) . isSyncing , valueModel2 : self . messenger . getAppState ( ) . isConnecting ) { 
 + ( isSyncing : JavaLangBoolean ? , isConnecting : JavaLangBoolean ? ) - > ( ) in 
 + 
 + if isSyncing ! . booleanValue ( ) | | isConnecting ! . booleanValue ( ) { 
 + if isConnecting ! . booleanValue ( ) { 
 + JDStatusBarNotification . showWithStatus ( AALocalized ( " StatusConnecting " ) ) 
 + } else { 
 + JDStatusBarNotification . showWithStatus ( AALocalized ( " StatusSyncing " ) ) 
 + } 
 + } else { 
 + JDStatusBarNotification . dismiss ( ) 
 + } 
 + } 
 + } 
 + } 
 } 
 
 public func presentMessengerInNewWindow ( ) { 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorStyle . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorStyle . swift 
 index 8c639ff . . ef904d0 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorStyle . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorStyle . swift 
 @ @ - 649 , 4 + 649 , 30 @ @ public class ActorStyle { 
 / / 
 
 public var authTintColor = UIColor ( rgb : 0x007aff ) 
 - } 
 \ No newline at end of file 
 + 
 + / / 
 + / / Status Bar progress 
 + / / 
 + 
 + / / / Is Status Bar connecting status hidden 
 + public var statusBarConnectingHidden = false 
 + 
 + / / / Is Status Bar background color 
 + public var statusBarConnectingBgColor : UIColor { 
 + get { return _ statusBarConnectingBgColor ! = nil ? _ statusBarConnectingBgColor ! : navigationBgColor } 
 + set ( v ) { _ statusBarConnectingBgColor = v } 
 + } 
 + public var _ statusBarConnectingBgColor : UIColor ? 
 + 
 + / / / Is Status Bar background color 
 + public var statusBarConnectingTextColor : UIColor { 
 + get { return _ statusBarConnectingTextColor ! = nil ? _ statusBarConnectingTextColor ! : navigationTitleColor } 
 + set ( v ) { _ statusBarConnectingTextColor = v } 
 + } 
 + public var _ statusBarConnectingTextColor : UIColor ? 
 + 
 + } 
 + 
 + 
 + 
 + 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 index 8e179a6 . . 03ce9dc 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 @ @ - 141 , 9 + 141 , 9 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 self . subtitleView . text = stateText ; 
 let state = UInt ( presence ! . state . ordinal ( ) ) 
 if ( state = = ACUserPresence _ State . ONLINE . rawValue ) { 
 - self . subtitleView . textColor = self . appStyle . userOnlineColor 
 + self . subtitleView . textColor = self . appStyle . userOnlineNavigationColor 
 } else { 
 - self . subtitleView . textColor = self . appStyle . userOfflineColor 
 + self . subtitleView . textColor = self . appStyle . userOfflineNavigationColor 
 } 
 } 
 } ) 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 index 688ce87 . . 1f3bfe8 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Group / AAGroupViewController . swift 
 @ @ - 38 , 6 + 38 , 7 @ @ public class AAGroupViewController : AAContentTableController { 
 self . headerRow = s . avatar { ( r ) - > ( ) in 
 
 r . id = self . gid 
 + r . subtitleHidden = true 
 
 r . bindAction = { ( r ) - > ( ) in 
 r . avatar = self . group . getAvatarModel ( ) . get ( ) 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift 
 index 6fe7575 . . cd1bd97 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift 	 
 @ @ - 215 , 11 + 215 , 11 @ @ public class AAManagedTable { 
 if ( searchDisplayController ! = nil & & searchDisplayController ! . active ) { 
 
 / / If search is active : apply search status bar style 
 - / / MainAppTheme . search . applyStatusBar ( ) 
 + UIApplication . sharedApplication ( ) . setStatusBarStyle ( ActorSDK . sharedActor ( ) . style . vcStatusBarStyle , animated : true ) 
 } else { 
 
 / / If search is not active : apply main status bar style 
 - / / MainAppTheme . navigation . applyStatusBar ( ) 
 + UIApplication . sharedApplication ( ) . setStatusBarStyle ( ActorSDK . sharedActor ( ) . style . searchStatusBarStyle , animated : true ) 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift 
 index a5f9d05 . . 86dcd6f 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / ManagedCells . swift 	 
 @ @ - 508 , 6 + 508 , 7 @ @ public class AAAvatarRow : AAManagedRow { 
 public var avatarPath : String ? 
 public var avatarLoading : Bool = false 
 
 + public var subtitleHidden : Bool = false 
 public var subtitle : String ? 
 public var subtitleColor : UIColor ? 
 
 @ @ - 530 , 12 + 531 , 8 @ @ public class AAAvatarRow : AAManagedRow { 
 public func bindCell ( res : AAAvatarCell ) { 
 res . titleLabel . text = title 
 
 - if subtitle ! = nil { 
 - res . subtitleLabel . text = subtitle 
 - res . subtitleLabel . hidden = false 
 - } else { 
 - res . subtitleLabel . hidden = true 
 - } 
 + res . subtitleLabel . hidden = subtitleHidden 
 + res . subtitleLabel . text = subtitle 
 
 if avatarPath ! = nil { 
 res . avatarView . bind ( title ! , id : jint ( id ! ) , fileName : avatarPath ! ) 
 @ @ - 566 , 7 + 563 , 7 @ @ public class AAAvatarRow : AAManagedRow { 
 bindAction ? ( r : self ) 
 
 if let p = indexPath , let s = section { 
 - if let cell = s . table . tableView . cellForRowAtIndexPath ( p ) as ? AAAvatarCell { 
 + if let cell = s . table . tableView . visibleCellForIndexPath ( p ) as ? AAAvatarCell { 
 bindCell ( cell ) 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsViewController . swift 
 index f26c644 . . af64e43 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsViewController . swift 
 @ @ - 355 , 6 + 355 , 12 @ @ public class AASettingsViewController : AAContentTableController { 
 ActorSDK . sharedActor ( ) . delegate . actorSettingsSupportDidCreated ( self , section : s ) 
 } 
 } 
 + 
 + public override func viewWillAppear ( animated : Bool ) { 
 + super . viewWillAppear ( animated ) 
 + 
 + Actor . onProfileOpenWithUid ( jint ( uid ) ) 
 + } 
 
 public override func tableWillBind ( binder : AABinder ) { 
 
 @ @ - 402 , 4 + 408 , 10 @ @ public class AASettingsViewController : AAContentTableController { 
 self . emailCells . reload ( ) 
 } ) 
 } 
 + 
 + public override func viewWillDisappear ( animated : Bool ) { 
 + super . viewWillDisappear ( animated ) 
 + 
 + Actor . onProfileClosedWithUid ( jint ( uid ) ) 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift 
 index 584a829 . . 15bcab8 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift 
 @ @ - 226 , 6 + 226 , 12 @ @ class AAUserViewController : AAContentTableController { 
 
 } 
 
 + override func viewWillAppear ( animated : Bool ) { 
 + super . viewWillAppear ( animated ) 
 + 
 + Actor . onProfileOpenWithUid ( jint ( uid ) ) 
 + } 
 + 
 override func tableWillBind ( binder : AABinder ) { 
 binder . bind ( user . getAvatarModel ( ) , closure : { ( value : ACAvatar ? ) - > ( ) in 
 self . headerRow . reload ( ) 
 @ @ - 245 , 4 + 251 , 10 @ @ class AAUserViewController : AAContentTableController { 
 } ) 
 } 
 } 
 + 
 + override func viewWillDisappear ( animated : Bool ) { 
 + super . viewWillDisappear ( animated ) 
 + 
 + Actor . onProfileOpenWithUid ( jint ( uid ) ) 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Views . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Views . swift 
 index c14910a . . 3705da0 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Views . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Views . swift 
 @ @ - 137 , 6 + 137 , 21 @ @ public extension UITableView { 
 let reuseId = cellTypeForClass ( T . self ) 
 return self . dequeueReusableCellWithIdentifier ( reuseId , forIndexPath : indexPath ) as ! T 
 } 
 + 
 + public func visibleCellForIndexPath ( path : NSIndexPath ) - > UITableViewCell ? { 
 + if indexPathsForVisibleRows = = nil { 
 + return nil 
 + } 
 + 
 + for i in 0 . . < indexPathsForVisibleRows ! . count { 
 + let vPath = indexPathsForVisibleRows ! [ i ] 
 + if vPath . row = = path . row & & vPath . section = = path . section { 
 + return visibleCells [ i ] 
 + } 
 + } 
 + 
 + return nil 
 + } 
 } 
 
 public extension UICollectionView { 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / Reachability . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / Reachability . swift 
 new file mode 100644 
 index 0000000 . . a42432b 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / Reachability . swift 
 @ @ - 0 , 0 + 1 , 388 @ @ 
 + / * 
 + Copyright ( c ) 2014 , Ashley Mills 
 + All rights reserved . 
 + 
 + Redistribution and use in source and binary forms , with or without 
 + modification , are permitted provided that the following conditions are met : 
 + 
 + 1 . Redistributions of source code must retain the above copyright notice , this 
 + list of conditions and the following disclaimer . 
 + 
 + 2 . Redistributions in binary form must reproduce the above copyright notice , 
 + this list of conditions and the following disclaimer in the documentation 
 + and / or other materials provided with the distribution . 
 + 
 + THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS " AS IS " 
 + AND ANY EXPRESS OR IMPLIED WARRANTIES , INCLUDING , BUT NOT LIMITED TO , THE 
 + IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 + ARE DISCLAIMED . IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 + LIABLE FOR ANY DIRECT , INDIRECT , INCIDENTAL , SPECIAL , EXEMPLARY , OR 
 + CONSEQUENTIAL DAMAGES ( INCLUDING , BUT NOT LIMITED TO , PROCUREMENT OF 
 + SUBSTITUTE GOODS OR SERVICES ; LOSS OF USE , DATA , OR PROFITS ; OR BUSINESS 
 + INTERRUPTION ) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY , WHETHER IN 
 + CONTRACT , STRICT LIABILITY , OR TORT ( INCLUDING NEGLIGENCE OR OTHERWISE ) 
 + ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE , EVEN IF ADVISED OF THE 
 + POSSIBILITY OF SUCH DAMAGE . 
 + * / 
 + 
 + import SystemConfiguration 
 + import Foundation 
 + 
 + enum ReachabilityError : ErrorType { 
 + case FailedToCreateWithAddress ( sockaddr _ in ) 
 + case FailedToCreateWithHostname ( String ) 
 + case UnableToSetCallback 
 + case UnableToSetDispatchQueue 
 + } 
 + 
 + public let ReachabilityChangedNotification = " ReachabilityChangedNotification " 
 + 
 + func callback ( reachability : SCNetworkReachability , flags : SCNetworkReachabilityFlags , info : UnsafeMutablePointer < Void > ) { 
 + let reachability = Unmanaged < Reachability > . fromOpaque ( COpaquePointer ( info ) ) . takeUnretainedValue ( ) 
 + 
 + dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { 
 + reachability . reachabilityChanged ( flags ) 
 + } 
 + } 
 + 
 + 
 + public class Reachability : NSObject { 
 + 
 + public typealias NetworkReachable = ( Reachability ) - > ( ) 
 + public typealias NetworkUnreachable = ( Reachability ) - > ( ) 
 + 
 + public enum NetworkStatus : CustomStringConvertible { 
 + 
 + case NotReachable , ReachableViaWiFi , ReachableViaWWAN 
 + 
 + public var description : String { 
 + switch self { 
 + case . ReachableViaWWAN : 
 + return " Cellular " 
 + case . ReachableViaWiFi : 
 + return " WiFi " 
 + case . NotReachable : 
 + return " No Connection " 
 + } 
 + } 
 + } 
 + 
 + / / MARK : - * * * Public properties * * * 
 + 
 + public var whenReachable : NetworkReachable ? 
 + public var whenUnreachable : NetworkUnreachable ? 
 + public var reachableOnWWAN : Bool 
 + public var notificationCenter = NSNotificationCenter . defaultCenter ( ) 
 + 
 + public var currentReachabilityStatus : NetworkStatus { 
 + if isReachable ( ) { 
 + if isReachableViaWiFi ( ) { 
 + return . ReachableViaWiFi 
 + } 
 + if isRunningOnDevice { 
 + return . ReachableViaWWAN 
 + } 
 + } 
 + 
 + return . NotReachable 
 + } 
 + 
 + public var currentReachabilityString : String { 
 + return " \ ( currentReachabilityStatus ) " 
 + } 
 + 
 + / / MARK : - * * * Initialisation methods * * * 
 + 
 + required public init ( reachabilityRef : SCNetworkReachability ) { 
 + reachableOnWWAN = true 
 + self . reachabilityRef = reachabilityRef 
 + } 
 + 
 + public convenience init ( hostname : String ) throws { 
 + 
 + let nodename = ( hostname as NSString ) . UTF8String 
 + guard let ref = SCNetworkReachabilityCreateWithName ( nil , nodename ) else { throw ReachabilityError . FailedToCreateWithHostname ( hostname ) } 
 + 
 + self . init ( reachabilityRef : ref ) 
 + } 
 + 
 + public class func reachabilityForInternetConnection ( ) throws - > Reachability { 
 + 
 + var zeroAddress = sockaddr _ in ( ) 
 + zeroAddress . sin _ len = UInt8 ( sizeofValue ( zeroAddress ) ) 
 + zeroAddress . sin _ family = sa _ family _ t ( AF _ INET ) 
 + 
 + guard let ref = withUnsafePointer ( & zeroAddress , { 
 + SCNetworkReachabilityCreateWithAddress ( nil , UnsafePointer ( $ 0 ) ) 
 + } ) else { throw ReachabilityError . FailedToCreateWithAddress ( zeroAddress ) } 
 + 
 + return Reachability ( reachabilityRef : ref ) 
 + } 
 + 
 + public class func reachabilityForLocalWiFi ( ) throws - > Reachability { 
 + 
 + var localWifiAddress : sockaddr _ in = sockaddr _ in ( sin _ len : _ _ uint8 _ t ( 0 ) , sin _ family : sa _ family _ t ( 0 ) , sin _ port : in _ port _ t ( 0 ) , sin _ addr : in _ addr ( s _ addr : 0 ) , sin _ zero : ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ) 
 + localWifiAddress . sin _ len = UInt8 ( sizeofValue ( localWifiAddress ) ) 
 + localWifiAddress . sin _ family = sa _ family _ t ( AF _ INET ) 
 + 
 + / / IN _ LINKLOCALNETNUM is defined in < netinet / in . h > as 169 . 254 . 0 . 0 
 + let address : UInt32 = 0xA9FE0000 
 + localWifiAddress . sin _ addr . s _ addr = in _ addr _ t ( address . bigEndian ) 
 + 
 + guard let ref = withUnsafePointer ( & localWifiAddress , { 
 + SCNetworkReachabilityCreateWithAddress ( nil , UnsafePointer ( $ 0 ) ) 
 + } ) else { throw ReachabilityError . FailedToCreateWithAddress ( localWifiAddress ) } 
 + 
 + return Reachability ( reachabilityRef : ref ) 
 + } 
 + 
 + / / MARK : - * * * Notifier methods * * * 
 + public func startNotifier ( ) throws { 
 + 
 + if notifierRunning { return } 
 + 
 + var context = SCNetworkReachabilityContext ( version : 0 , info : nil , retain : nil , release : nil , copyDescription : nil ) 
 + context . info = UnsafeMutablePointer ( Unmanaged . passUnretained ( self ) . toOpaque ( ) ) 
 + 
 + if ! SCNetworkReachabilitySetCallback ( reachabilityRef ! , callback , & context ) { 
 + stopNotifier ( ) 
 + throw ReachabilityError . UnableToSetCallback 
 + } 
 + 
 + if ! SCNetworkReachabilitySetDispatchQueue ( reachabilityRef ! , reachabilitySerialQueue ) { 
 + stopNotifier ( ) 
 + throw ReachabilityError . UnableToSetDispatchQueue 
 + } 
 + 
 + notifierRunning = true 
 + } 
 + 
 + 
 + public func stopNotifier ( ) { 
 + if let reachabilityRef = reachabilityRef { 
 + SCNetworkReachabilitySetCallback ( reachabilityRef , nil , nil ) 
 + SCNetworkReachabilitySetDispatchQueue ( reachabilityRef , nil ) 
 + } 
 + notifierRunning = false 
 + } 
 + 
 + / / MARK : - * * * Connection test methods * * * 
 + public func isReachable ( ) - > Bool { 
 + return isReachableWithTest ( { ( flags : SCNetworkReachabilityFlags ) - > ( Bool ) in 
 + return self . isReachableWithFlags ( flags ) 
 + } ) 
 + } 
 + 
 + public func isReachableViaWWAN ( ) - > Bool { 
 + 
 + if isRunningOnDevice { 
 + return isReachableWithTest ( ) { flags - > Bool in 
 + / / Check we ' re REACHABLE 
 + if self . isReachable ( flags ) { 
 + 
 + / / Now , check we ' re on WWAN 
 + if self . isOnWWAN ( flags ) { 
 + return true 
 + } 
 + } 
 + return false 
 + } 
 + } 
 + return false 
 + } 
 + 
 + public func isReachableViaWiFi ( ) - > Bool { 
 + 
 + return isReachableWithTest ( ) { flags - > Bool in 
 + 
 + / / Check we ' re reachable 
 + if self . isReachable ( flags ) { 
 + 
 + if self . isRunningOnDevice { 
 + / / Check we ' re NOT on WWAN 
 + if self . isOnWWAN ( flags ) { 
 + return false 
 + } 
 + } 
 + return true 
 + } 
 + 
 + return false 
 + } 
 + } 
 + 
 + / / MARK : - * * * Private methods * * * 
 + private var isRunningOnDevice : Bool = { 
 + # if ( arch ( i386 ) | | arch ( x86 _ 64 ) ) & & os ( iOS ) 
 + return false 
 + # else 
 + return true 
 + # endif 
 + } ( ) 
 + 
 + private var notifierRunning = false 
 + private var reachabilityRef : SCNetworkReachability ? 
 + private let reachabilitySerialQueue = dispatch _ queue _ create ( " uk . co . ashleymills . reachability " , DISPATCH _ QUEUE _ SERIAL ) 
 + 
 + private func reachabilityChanged ( flags : SCNetworkReachabilityFlags ) { 
 + if isReachableWithFlags ( flags ) { 
 + if let block = whenReachable { 
 + block ( self ) 
 + } 
 + } else { 
 + if let block = whenUnreachable { 
 + block ( self ) 
 + } 
 + } 
 + 
 + notificationCenter . postNotificationName ( ReachabilityChangedNotification , object : self ) 
 + } 
 + 
 + private func isReachableWithFlags ( flags : SCNetworkReachabilityFlags ) - > Bool { 
 + 
 + let reachable = isReachable ( flags ) 
 + 
 + if ! reachable { 
 + return false 
 + } 
 + 
 + if isConnectionRequiredOrTransient ( flags ) { 
 + return false 
 + } 
 + 
 + if isRunningOnDevice { 
 + if isOnWWAN ( flags ) & & ! reachableOnWWAN { 
 + / / We don ' t want to connect when on 3G . 
 + return false 
 + } 
 + } 
 + 
 + return true 
 + } 
 + 
 + private func isReachableWithTest ( test : ( SCNetworkReachabilityFlags ) - > ( Bool ) ) - > Bool { 
 + 
 + if let reachabilityRef = reachabilityRef { 
 + 
 + var flags = SCNetworkReachabilityFlags ( rawValue : 0 ) 
 + let gotFlags = withUnsafeMutablePointer ( & flags ) { 
 + SCNetworkReachabilityGetFlags ( reachabilityRef , UnsafeMutablePointer ( $ 0 ) ) 
 + } 
 + 
 + if gotFlags { 
 + return test ( flags ) 
 + } 
 + } 
 + 
 + return false 
 + } 
 + 
 + / / WWAN may be available , but not active until a connection has been established . 
 + / / WiFi may require a connection for VPN on Demand . 
 + private func isConnectionRequired ( ) - > Bool { 
 + return connectionRequired ( ) 
 + } 
 + 
 + private func connectionRequired ( ) - > Bool { 
 + return isReachableWithTest ( { ( flags : SCNetworkReachabilityFlags ) - > ( Bool ) in 
 + return self . isConnectionRequired ( flags ) 
 + } ) 
 + } 
 + 
 + / / Dynamic , on demand connection ? 
 + private func isConnectionOnDemand ( ) - > Bool { 
 + return isReachableWithTest ( { ( flags : SCNetworkReachabilityFlags ) - > ( Bool ) in 
 + return self . isConnectionRequired ( flags ) & & self . isConnectionOnTrafficOrDemand ( flags ) 
 + } ) 
 + } 
 + 
 + / / Is user intervention required ? 
 + private func isInterventionRequired ( ) - > Bool { 
 + return isReachableWithTest ( { ( flags : SCNetworkReachabilityFlags ) - > ( Bool ) in 
 + return self . isConnectionRequired ( flags ) & & self . isInterventionRequired ( flags ) 
 + } ) 
 + } 
 + 
 + private func isOnWWAN ( flags : SCNetworkReachabilityFlags ) - > Bool { 
 + # if os ( iOS ) 
 + return flags . contains ( . IsWWAN ) 
 + # else 
 + return false 
 + # endif 
 + } 
 + private func isReachable ( flags : SCNetworkReachabilityFlags ) - > Bool { 
 + return flags . contains ( . Reachable ) 
 + } 
 + private func isConnectionRequired ( flags : SCNetworkReachabilityFlags ) - > Bool { 
 + return flags . contains ( . ConnectionRequired ) 
 + } 
 + private func isInterventionRequired ( flags : SCNetworkReachabilityFlags ) - > Bool { 
 + return flags . contains ( . InterventionRequired ) 
 + } 
 + private func isConnectionOnTraffic ( flags : SCNetworkReachabilityFlags ) - > Bool { 
 + return flags . contains ( . ConnectionOnTraffic ) 
 + } 
 + private func isConnectionOnDemand ( flags : SCNetworkReachabilityFlags ) - > Bool { 
 + return flags . contains ( . ConnectionOnDemand ) 
 + } 
 + func isConnectionOnTrafficOrDemand ( flags : SCNetworkReachabilityFlags ) - > Bool { 
 + return ! flags . intersect ( [ . ConnectionOnTraffic , . ConnectionOnDemand ] ) . isEmpty 
 + } 
 + private func isTransientConnection ( flags : SCNetworkReachabilityFlags ) - > Bool { 
 + return flags . contains ( . TransientConnection ) 
 + } 
 + private func isLocalAddress ( flags : SCNetworkReachabilityFlags ) - > Bool { 
 + return flags . contains ( . IsLocalAddress ) 
 + } 
 + private func isDirect ( flags : SCNetworkReachabilityFlags ) - > Bool { 
 + return flags . contains ( . IsDirect ) 
 + } 
 + private func isConnectionRequiredOrTransient ( flags : SCNetworkReachabilityFlags ) - > Bool { 
 + let testcase : SCNetworkReachabilityFlags = [ . ConnectionRequired , . TransientConnection ] 
 + return flags . intersect ( testcase ) = = testcase 
 + } 
 + 
 + private var reachabilityFlags : SCNetworkReachabilityFlags { 
 + if let reachabilityRef = reachabilityRef { 
 + 
 + var flags = SCNetworkReachabilityFlags ( rawValue : 0 ) 
 + let gotFlags = withUnsafeMutablePointer ( & flags ) { 
 + SCNetworkReachabilityGetFlags ( reachabilityRef , UnsafeMutablePointer ( $ 0 ) ) 
 + } 
 + 
 + if gotFlags { 
 + return flags 
 + } 
 + } 
 + 
 + return [ ] 
 + } 
 + 
 + override public var description : String { 
 + 
 + var W : String 
 + if isRunningOnDevice { 
 + W = isOnWWAN ( reachabilityFlags ) ? " W " : " - " 
 + } else { 
 + W = " X " 
 + } 
 + let R = isReachable ( reachabilityFlags ) ? " R " : " - " 
 + let c = isConnectionRequired ( reachabilityFlags ) ? " c " : " - " 
 + let t = isTransientConnection ( reachabilityFlags ) ? " t " : " - " 
 + let i = isInterventionRequired ( reachabilityFlags ) ? " i " : " - " 
 + let C = isConnectionOnTraffic ( reachabilityFlags ) ? " C " : " - " 
 + let D = isConnectionOnDemand ( reachabilityFlags ) ? " D " : " - " 
 + let l = isLocalAddress ( reachabilityFlags ) ? " l " : " - " 
 + let d = isDirect ( reachabilityFlags ) ? " d " : " - " 
 + 
 + return " \ ( W ) \ ( R ) \ ( c ) \ ( t ) \ ( i ) \ ( C ) \ ( D ) \ ( l ) \ ( d ) " 
 + } 
 + 
 + deinit { 
 + stopNotifier ( ) 
 + 
 + reachabilityRef = nil 
 + whenReachable = nil 
 + whenUnreachable = nil 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / Podfile b / actor - sdk / sdk - core - ios / Podfile 
 index 8709aa3 . . c412c0a 100644 
 - - - a / actor - sdk / sdk - core - ios / Podfile 
 + + + b / actor - sdk / sdk - core - ios / Podfile 
 @ @ - 27 , 6 + 27 , 7 @ @ target ' ActorApp ' do 
 pod ' NYTPhotoViewer ' 
 pod ' TTTAttributedLabel ' 
 pod ' RSKImageCropper ' 
 + pod ' JDStatusBarNotification ' 
 
 # Small UI 
 pod ' VBFPopFlatButton ' 
 @ @ - 58 , 6 + 59 , 7 @ @ target ' ActorSDK ' do 
 pod ' NYTPhotoViewer ' 
 pod ' TTTAttributedLabel ' 
 pod ' RSKImageCropper ' 
 + pod ' JDStatusBarNotification ' 
 
 # Small UI 
 pod ' VBFPopFlatButton '
