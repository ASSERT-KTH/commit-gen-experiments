BLEU SCORE: 0.23263035362970588

TEST MSG: feat ( server : contacts ) : removeContact method in UserExtension
GENERATED MSG: feat ( server : cli ) : ability to grant and revoke admin

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / user . proto b / actor - server / actor - core / src / main / protobuf / user . proto < nl > index 534a6ca . . ef31495 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / user . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / user . proto < nl > @ @ - 201 , 6 + 201 , 13 @ @ message UserCommands { < nl > repeated ContactToAdd contacts _ to _ add = 3 ; < nl > } < nl > < nl > + message RemoveContact { < nl > + option ( scalapb . message ) . extends = " im . actor . server . user . UserCommand " ; < nl > + < nl > + required int32 user _ id = 1 ; < nl > + required int32 contact _ user _ id = 2 ; < nl > + } < nl > + < nl > message NotifyDialogsChanged { < nl > option ( scalapb . message ) . extends = " im . actor . server . user . UserCommand " ; < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / ContactsUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / ContactsUtils . scala < nl > deleted file mode 100644 < nl > index ce3dc0e . . 0000000 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / ContactsUtils . scala < nl > + + + / dev / null < nl > @ @ - 1 , 17 + 0 , 0 @ @ < nl > - package im . actor . server . user < nl > - < nl > - import akka . actor . ActorSystem < nl > - import akka . util . Timeout < nl > - import im . actor . server . { KeyValueMappings , model , persist } < nl > - import shardakka . ShardakkaExtension < nl > - import slick . dbio . DBIO < nl > - < nl > - import scala . concurrent . { ExecutionContext , Future } < nl > - < nl > - object ContactsUtils { < nl > - < nl > - def deleteContact ( ownerUserId : Int , userId : Int ) ( implicit ec : ExecutionContext , timeout : Timeout , system : ActorSystem ) : DBIO [ Int ] = < nl > - for { < nl > - result ← persist . contact . UserContactRepo . delete ( ownerUserId , userId ) < nl > - } yield result < nl > - } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > index 42fce42 . . c51f228 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > @ @ - 5 , 7 + 5 , 7 @ @ import java . util . TimeZone < nl > < nl > import akka . actor . { ActorSystem , Status } < nl > import akka . pattern . pipe < nl > - import im . actor . api . rpc . contacts . { UpdateContactRegistered , UpdateContactsAdded } < nl > + import im . actor . api . rpc . contacts . { UpdateContactsRemoved , UpdateContactRegistered , UpdateContactsAdded } < nl > import im . actor . api . rpc . messaging . _ < nl > import im . actor . api . rpc . misc . ApiExtension < nl > import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } < nl > @ @ - 51 , 6 + 51 , 8 @ @ object UserErrors { < nl > < nl > case object EmptyLocalesList extends UserError ( " Empty locale list " ) < nl > < nl > + final case object ContactNotFound extends UserError ( " Contact not found " ) < nl > + < nl > } < nl > < nl > private object ServiceMessages { < nl > @ @ - 337 , 6 + 339 , 24 @ @ private [ user ] trait UserCommandHandlers { < nl > } yield seqstate ) pipeTo sender ( ) < nl > } < nl > < nl > + protected def removeContact ( < nl > + user : User , < nl > + contactUserId : Int < nl > + ) : Unit = { < nl > + val updLocalName = UpdateUserLocalNameChanged ( contactUserId , None ) < nl > + val updContact = UpdateContactsRemoved ( Vector ( contactUserId ) ) < nl > + < nl > + ( db . run ( UserContactRepo . find ( user . id , contactUserId ) ) flatMap { < nl > + case Some ( _ ) ⇒ < nl > + for { < nl > + _ ← db . run ( UserContactRepo . delete ( user . id , contactUserId ) ) < nl > + _ ← seqUpdatesExt . deliverSingleUpdate ( user . id , updLocalName ) < nl > + seqstate ← seqUpdatesExt . deliverSingleUpdate ( user . id , updContact ) < nl > + } yield seqstate < nl > + case None ⇒ Future . failed ( UserErrors . ContactNotFound ) < nl > + } ) pipeTo sender ( ) < nl > + } < nl > + < nl > private def checkNicknameExists ( nicknameOpt : Option [ String ] ) : Future [ Boolean ] = { < nl > nicknameOpt match { < nl > case Some ( nickname ) ⇒ db . run ( p . UserRepo . nicknameExists ( nickname ) ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > index 0bf023b . . 9e125cc 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > @ @ - 111 , 6 + 111 , 9 @ @ private [ user ] sealed trait Commands extends AuthCommands { < nl > else < nl > seqUpdExt . getSeqState ( userId ) < nl > < nl > + def removeContact ( userId : Int , contactUserId : Int ) : Future [ SeqState ] = < nl > + ( processorRegion . ref ? RemoveContact ( userId , contactUserId ) ) . mapTo [ SeqState ] < nl > + < nl > def editLocalName ( userId : Int , contactUserId : Int , localName : Option [ String ] , supressUpdate : Boolean = false ) : Future [ SeqState ] = < nl > ( processorRegion . ref ? EditLocalName ( userId , contactUserId , localName , supressUpdate ) ) . mapTo [ SeqState ] < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > index 5662128 . . 8721fad 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > @ @ - 86 , 6 + 86 , 7 @ @ object UserProcessor { < nl > 10035 → classOf [ UserCommands . ChangePreferredLanguages ] , < nl > 10036 → classOf [ UserCommands . ChangeTimeZone ] , < nl > 10037 → classOf [ UserCommands . EditLocalName ] , < nl > + 10038 → classOf [ UserCommands . RemoveContact ] , < nl > < nl > 11001 → classOf [ UserQueries . GetAuthIds ] , < nl > 11002 → classOf [ UserQueries . GetAuthIdsResponse ] , < nl > @ @ - 215 , 6 + 216 , 7 @ @ private [ user ] final class UserProcessor < nl > case ChangeAbout ( _ , about ) ⇒ changeAbout ( state , about ) < nl > case UpdateAvatar ( _ , avatarOpt ) ⇒ updateAvatar ( state , avatarOpt ) < nl > case AddContacts ( _ , contactsToAdd ) ⇒ addContacts ( state , contactsToAdd ) < nl > + case RemoveContact ( _ , contactUserId ) ⇒ removeContact ( state , contactUserId ) < nl > case UpdateIsAdmin ( _ , isAdmin ) ⇒ updateIsAdmin ( state , isAdmin ) < nl > case NotifyDialogsChanged ( _ ) ⇒ notifyDialogsChanged ( state ) < nl > case ChangeTimeZone ( _ , timeZone ) ⇒ changeTimeZone ( state , timeZone ) < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContactRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContactRepo . scala < nl > index 47ce4bb . . 7df6e60 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContactRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContactRepo . scala < nl > @ @ - 36 , 6 + 36 , 9 @ @ object UserContactRepo { < nl > byPKNotDeleted ( ownerUserId , contactUserId ) map ( _ . name ) < nl > ) < nl > < nl > + def byContactUserId ( contactUserId : Rep [ Int ] ) = active . filter ( _ . contactUserId = = = contactUserId ) < nl > + val byContactUserIdC = Compiled ( byContactUserId _ ) < nl > + < nl > def byPKDeleted ( ownerUserId : Int , contactUserId : Int ) = < nl > contacts . filter ( c ⇒ c . ownerUserId = = = ownerUserId & & c . contactUserId = = = contactUserId & & c . isDeleted = = = true ) < nl > < nl > @ @ - 54 , 6 + 57 , 8 @ @ object UserContactRepo { < nl > def findIds ( ownerUserId : Int , contactUserIds : Set [ Int ] ) = < nl > byOwnerUserIdNotDeleted ( ownerUserId ) . filter ( _ . contactUserId inSet contactUserIds ) . map ( _ . contactUserId ) . result < nl > < nl > + def findOwners ( contactUserId : Int ) = byContactUserIdC ( contactUserId ) . result < nl > + < nl > def findNotDeletedIds ( ownerUserId : Int ) = < nl > byOwnerUserIdNotDeleted ( ownerUserId ) . map ( _ . contactUserId ) . result < nl > < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala < nl > index 92e6e17 . . b2e66ea 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala < nl > @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . server . api . rpc . service . contacts < nl > import java . security . MessageDigest < nl > < nl > import akka . event . Logging < nl > + import im . actor . api . rpc . peers . ApiUserOutPeer < nl > import im . actor . concurrent . FutureExt < nl > import im . actor . server . acl . ACLUtils < nl > import im . actor . server . user . UserCommands . ContactToAdd < nl > @ @ - 35 , 10 + 36 , 8 @ @ import scalaz . EitherT < nl > class ContactsServiceImpl ( implicit actorSystem : ActorSystem ) < nl > extends ContactsService { < nl > < nl > - import ContactsUtils . _ < nl > import SocialManager . _ < nl > - < nl > - private val log = Logging ( actorSystem , getClass ) < nl > + import PeerHelpers . _ < nl > < nl > override implicit val ec : ExecutionContext = actorSystem . dispatcher < nl > implicit val timeout = Timeout ( 5 . seconds ) < nl > @ @ - 105 , 27 + 104 , 14 @ @ class ContactsServiceImpl ( implicit actorSystem : ActorSystem ) < nl > } < nl > < nl > override def jhandleRemoveContact ( userId : Int , accessHash : Long , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { < nl > - val authorizedAction = requireAuth ( clientData ) . map { implicit client ⇒ < nl > - persist . contact . UserContactRepo . find ( ownerUserId = client . userId , contactUserId = userId ) . flatMap { < nl > - case Some ( contact ) ⇒ < nl > - DBIO . from ( userExt . getAccessHash ( userId , clientData . authId ) ) flatMap { contactAccessHash ⇒ < nl > - if ( accessHash = = contactAccessHash ) { < nl > - for { < nl > - _ ← deleteContact ( client . userId , userId ) < nl > - _ ← DBIO . from ( userExt . broadcastClientUpdate ( UpdateUserLocalNameChanged ( userId , None ) , None , isFat = false ) ) < nl > - seqstate ← DBIO . from ( userExt . broadcastClientUpdate ( UpdateContactsRemoved ( Vector ( userId ) ) , None , isFat = false ) ) < nl > - } yield { < nl > - Ok ( ResponseSeq ( seqstate . seq , seqstate . state . toByteArray ) ) < nl > - } < nl > - } else { < nl > - DBIO . successful ( Error ( CommonErrors . InvalidAccessHash ) ) < nl > - } < nl > - } < nl > - case None ⇒ DBIO . successful ( Error ( Errors . ContactNotFound ) ) < nl > + authorized ( clientData ) { implicit client ⇒ < nl > + withUserOutPeerF ( ApiUserOutPeer ( userId , accessHash ) ) { < nl > + for ( seqstate ← userExt . removeContact ( client . userId , userId ) ) < nl > + yield Ok ( ResponseSeq ( seqstate . seq , seqstate . state . toByteArray ) ) < nl > } < nl > + } recover { < nl > + case UserErrors . ContactNotFound ⇒ Error ( Errors . ContactNotFound ) < nl > } < nl > - < nl > - db . run ( toDBIOAction ( authorizedAction ) ) < nl > } < nl > < nl > override def jhandleAddContact ( userId : Int , accessHash : Long , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > index c212ec3 . . 58aa633 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > @ @ - 117 , 7 + 117 , 8 @ @ private [ bot ] final class BotExtensionImpl ( _ system : ActorSystem ) extends BotExten < nl > name = name , < nl > countryCode = " US " , < nl > sex = ApiSex . Unknown , < nl > - isBot = true < nl > + isBot = true , < nl > + isAdmin = isAdmin < nl > ) < nl > _ ← tokensKV . upsert ( token , userId ) < nl > } yield token < nl > diff - - git a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala < nl > index a743588 . . 59a5230 100644 < nl > - - - a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala < nl > + + + b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala < nl > @ @ - 13 , 8 + 13 , 9 @ @ import scala . concurrent . duration . _ < nl > import scala . reflect . ClassTag < nl > < nl > private case class Config ( < nl > - command : String = " help " , < nl > - createBot : CreateBot = CreateBot ( ) < nl > + command : String = " help " , < nl > + createBot : CreateBot = CreateBot ( ) , < nl > + updateIsAdmin : UpdateIsAdmin = UpdateIsAdmin ( ) < nl > ) < nl > < nl > private [ cli ] trait Request { < nl > @ @ - 31 , 9 + 32 , 18 @ @ private [ cli ] case class CreateBot ( < nl > < nl > private [ cli ] case class CreateBotResponse ( token : String ) < nl > < nl > + private [ cli ] case class UpdateIsAdmin ( < nl > + userId : Int = 0 , < nl > + isAdmin : Boolean = false < nl > + ) extends Request { < nl > + override type Response = Unit < nl > + } < nl > + < nl > private object Commands { < nl > val Help = " help " < nl > val CreateBot = " create - bot " < nl > + val AdminGrant = " admin - grant " < nl > + val AdminRevoke = " admin - revoke " < nl > } < nl > < nl > object ActorCli extends App { < nl > @ @ - 54 , 6 + 64 , 20 @ @ object ActorCli extends App { < nl > c . copy ( createBot = c . createBot . copy ( isAdmin = true ) ) < nl > } < nl > ) < nl > + cmd ( Commands . AdminGrant ) action { ( _ , c ) ⇒ < nl > + c . copy ( command = Commands . AdminGrant ) < nl > + } children ( < nl > + opt [ Int ] ( " userId " ) abbr " u " required ( ) action { ( x , c ) ⇒ < nl > + c . copy ( updateIsAdmin = UpdateIsAdmin ( x , isAdmin = true ) ) < nl > + } < nl > + ) < nl > + cmd ( Commands . AdminRevoke ) action { ( _ , c ) ⇒ < nl > + c . copy ( command = Commands . AdminRevoke ) < nl > + } children ( < nl > + opt [ Int ] ( " userId " ) abbr " u " required ( ) action { ( x , c ) ⇒ < nl > + c . copy ( updateIsAdmin = UpdateIsAdmin ( x , isAdmin = false ) ) < nl > + } < nl > + ) < nl > } < nl > < nl > parser . parse ( args , Config ( ) ) foreach { config ⇒ < nl > @ @ - 64 , 6 + 88 , 8 @ @ object ActorCli extends App { < nl > Future . successful ( parser . showUsage ) < nl > case Commands . CreateBot ⇒ < nl > handlers . createBot ( config . createBot ) < nl > + case Commands . AdminGrant | Commands . AdminRevoke ⇒ < nl > + handlers . updateIsAdmin ( config . updateIsAdmin ) < nl > } ) < nl > < nl > def cmd ( f : Future [ Unit ] ) : Unit = { < nl > @ @ - 76 , 8 + 102 , 9 @ @ object ActorCli extends App { < nl > } < nl > } < nl > < nl > - final class CliHandlers extends BotHandlers { < nl > + final class CliHandlers extends BotHandlers with UsersHandlers { < nl > protected val BotService = " bots " < nl > + protected val UsersService = " users " < nl > < nl > protected val config = ConfigFactory . parseResources ( " cli . conf " ) . resolve ( ) < nl > < nl > @ @ - 100 , 4 + 127 , 4 @ @ final class CliHandlers extends BotHandlers { < nl > < nl > protected def request [ T < : Request : ClassTag ] ( service : String , request : T ) : Future [ T # Response ] = < nl > ( client ? ClusterClient . Send ( s " / user / cli / $ service " , request , localAffinity = false ) ) map ( _ . asInstanceOf [ T # Response ] ) < nl > - } < nl > \ No newline at end of file < nl > + } < nl > diff - - git a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / UsersHandlers . scala b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / UsersHandlers . scala < nl > new file mode 100644 < nl > index 0000000 . . c0df08c < nl > - - - / dev / null < nl > + + + b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / UsersHandlers . scala < nl > @ @ - 0 , 0 + 1 , 15 @ @ < nl > + package im . actor . server . cli < nl > + < nl > + import scala . concurrent . Future < nl > + < nl > + private [ cli ] trait UsersHandlers { < nl > + this : CliHandlers ⇒ < nl > + < nl > + def updateIsAdmin ( rq : UpdateIsAdmin ) : Future [ Unit ] = { < nl > + for ( resp ← request ( UsersService , rq ) ) < nl > + yield if ( rq . isAdmin ) < nl > + println ( " Admin granted " ) < nl > + else < nl > + println ( " Admin revoked " ) < nl > + } < nl > + } < nl > diff - - git a / actor - server / actor - core / src / main / protobuf / user . proto b / actor - server / actor - core / src / main / protobuf / user . proto < nl > index 880c95c . . 7e19ba9 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / user . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / user . proto < nl > @ @ - 63 , 12 + 63 , 22 @ @ message UserCommands { < nl > required string country _ code = 3 ; < nl > required int32 sex = 4 [ ( scalapb . field ) . type = " im . actor . api . rpc . users . ApiSex . ApiSex " ] ; < nl > required bool is _ bot = 5 ; < nl > + optional bool is _ admin = 10 ; < nl > repeated bytes extensions = 7 [ ( scalapb . field ) . type = " im . actor . api . rpc . misc . ApiExtension " ] ; < nl > optional string external = 8 ; < nl > } < nl > < nl > message CreateAck { } < nl > < nl > + message UpdateIsAdmin { < nl > + option ( scalapb . message ) . extends = " im . actor . server . user . UserCommand " ; < nl > + < nl > + required int32 user _ id = 1 ; < nl > + optional bool is _ admin = 2 ; < nl > + } < nl > + < nl > + message UpdateIsAdminAck { } < nl > + < nl > message AddPhone { < nl > option ( scalapb . message ) . extends = " im . actor . server . user . UserCommand " ; < nl > < nl > @ @ - 288 , 6 + 298 , 10 @ @ message UserEvents { < nl > optional bool is _ admin = 11 ; < nl > } < nl > < nl > + message IsAdminUpdated { < nl > + optional bool is _ admin = 1 ; < nl > + } < nl > + < nl > message PhoneAdded { < nl > option ( scalapb . message ) . extends = " im . actor . server . user . UserEvent " ; < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index 238a6db . . 2ad6991 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 128 , 7 + 128 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > context become working ( updatedState ( tsEvt , state ) ) < nl > < nl > ( for { < nl > - _ ← userExt . create ( botUserId , nextAccessSalt ( ThreadLocalRandom . current ( ) ) , None , " Bot " , " US " , ApiSex . Unknown , isBot = true , Seq . empty [ ApiExtension ] , None ) < nl > + _ ← userExt . create ( botUserId , nextAccessSalt ( ThreadLocalRandom . current ( ) ) , None , " Bot " , " US " , ApiSex . Unknown , isBot = true ) < nl > _ ← db . run ( p . GroupBotRepo . create ( groupId , botUserId , botToken ) ) < nl > _ ← integrationTokensKv . upsert ( botToken , groupId ) < nl > } yield ( ) ) onFailure { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > index b80b0fa . . e87444b 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > @ @ - 49 , 7 + 49 , 17 @ @ private [ user ] trait UserCommandHandlers { < nl > < nl > import ImageUtils . _ < nl > < nl > - protected def create ( accessSalt : String , nickname : Option [ String ] , name : String , countryCode : String , sex : ApiSex . ApiSex , isBot : Boolean , extensions : Seq [ ApiExtension ] , external : Option [ String ] ) : Unit = { < nl > + protected def create ( < nl > + accessSalt : String , < nl > + nickname : Option [ String ] , < nl > + name : String , < nl > + countryCode : String , < nl > + sex : ApiSex . ApiSex , < nl > + isBot : Boolean , < nl > + isAdmin : Boolean , < nl > + extensions : Seq [ ApiExtension ] , < nl > + external : Option [ String ] < nl > + ) : Unit = { < nl > log . debug ( " Creating user { } { } " , userId , name ) < nl > < nl > val replyTo = sender ( ) < nl > @ @ - 57 , 7 + 67 , 7 @ @ private [ user ] trait UserCommandHandlers { < nl > onSuccess ( checkNicknameExists ( nickname ) ) { exists ⇒ < nl > if ( ! exists ) { < nl > val ts = now ( ) < nl > - val e = UserEvents . Created ( userId , accessSalt , nickname , name , countryCode , sex , isBot , extensions , external ) < nl > + val e = UserEvents . Created ( userId , accessSalt , nickname , name , countryCode , sex , isBot , extensions , external , isAdmin = Some ( isAdmin ) ) < nl > val createEvent = TSEvent ( ts , e ) < nl > val user = UserBuilder ( ts , e ) < nl > < nl > @ @ - 81 , 6 + 91 , 14 @ @ private [ user ] trait UserCommandHandlers { < nl > } < nl > } < nl > < nl > + protected def updateIsAdmin ( state : User , isAdmin : Option [ Boolean ] ) : Unit = { < nl > + persist ( TSEvent ( now ( ) , UserEvents . IsAdminUpdated ( isAdmin ) ) ) { e ⇒ < nl > + context become working ( updatedState ( e , state ) ) < nl > + < nl > + sender ( ) ! UpdateIsAdminAck ( ) < nl > + } < nl > + } < nl > + < nl > protected def addAuth ( user : User , authId : Long ) : Unit = { < nl > persistStashingReply ( TSEvent ( now ( ) , UserEvents . AuthAdded ( authId ) ) , user ) { _ ⇒ < nl > db . run ( p . AuthIdRepo . setUserData ( authId , user . id ) ) map ( _ ⇒ NewAuthAck ( ) ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > index 4c24542 . . 5cbd665 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > @ @ - 42 , 10 + 42 , 14 @ @ private [ user ] sealed trait Commands extends AuthCommands { < nl > countryCode : String , < nl > sex : ApiSex . ApiSex , < nl > isBot : Boolean , < nl > + isAdmin : Boolean = false , < nl > extensions : Seq [ ApiExtension ] = Seq . empty , < nl > external : Option [ String ] = None < nl > ) : Future [ CreateAck ] = < nl > - ( processorRegion . ref ? Create ( userId , accessSalt , nickname , name , countryCode , sex , isBot , extensions , external ) ) . mapTo [ CreateAck ] < nl > + ( processorRegion . ref ? Create ( userId , accessSalt , nickname , name , countryCode , sex , isBot , Some ( isAdmin ) , extensions , external ) ) . mapTo [ CreateAck ] < nl > + < nl > + def updateIsAdmin ( userId : Int , isAdmin : Boolean ) : Future [ UpdateIsAdminAck ] = < nl > + ( processorRegion . ref ? UpdateIsAdmin ( userId , Some ( isAdmin ) ) ) . mapTo [ UpdateIsAdminAck ] < nl > < nl > / / FIXME : check existence and reserve generated ids < nl > def nextId ( ) : Future [ Int ] = Future . successful ( IdUtils . nextIntId ( ) ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > index b6fc6b1 . . e97d368 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > @ @ - 74 , 6 + 74 , 8 @ @ object UserProcessor { < nl > 10026 → classOf [ UserCommands . UpdateAvatar ] , < nl > 10027 → classOf [ UserCommands . UpdateAvatarAck ] , < nl > 10028 → classOf [ UserCommands . AddContacts ] , < nl > + 10029 → classOf [ UserCommands . UpdateIsAdmin ] , < nl > + 10029 → classOf [ UserCommands . UpdateIsAdminAck ] , < nl > < nl > 11001 → classOf [ UserQueries . GetAuthIds ] , < nl > 11002 → classOf [ UserQueries . GetAuthIdsResponse ] , < nl > @ @ - 100 , 6 + 102 , 7 @ @ object UserProcessor { < nl > 12011 → classOf [ UserEvents . NicknameChanged ] , < nl > 12012 → classOf [ UserEvents . AboutChanged ] , < nl > 12013 → classOf [ UserEvents . AvatarUpdated ] , < nl > + 12014 → classOf [ UserEvents . IsAdminUpdated ] , < nl > < nl > 13000 → classOf [ User ] < nl > ) < nl > @ @ - 156 , 13 + 159 , 15 @ @ private [ user ] final class UserProcessor < nl > state . copy ( about = about ) < nl > case TSEvent ( _ , UserEvents . AvatarUpdated ( avatar ) ) ⇒ < nl > state . copy ( avatar = avatar ) < nl > + case TSEvent ( _ , UserEvents . IsAdminUpdated ( isAdmin ) ) ⇒ < nl > + state . copy ( isAdmin = isAdmin ) < nl > case TSEvent ( _ , _ : UserEvents . Created ) ⇒ state < nl > } < nl > } < nl > < nl > override protected def handleInitCommand : Receive = { < nl > - case Create ( _ , accessSalt , nickName , name , countryCode , sex , isBot , extensions , external ) ⇒ < nl > - create ( accessSalt , nickName , name , countryCode , sex , isBot , extensions , external ) < nl > + case Create ( _ , accessSalt , nickName , name , countryCode , sex , isBot , isAdmin , extensions , external ) ⇒ < nl > + create ( accessSalt , nickName , name , countryCode , sex , isBot , isAdmin . getOrElse ( false ) , extensions , external ) < nl > } < nl > < nl > override protected def handleCommand ( state : User ) : Receive = { < nl > @ @ - 177 , 6 + 182 , 7 @ @ private [ user ] final class UserProcessor < nl > case ChangeAbout ( _ , clientAuthId , about ) ⇒ changeAbout ( state , clientAuthId , about ) < nl > case UpdateAvatar ( _ , clientAuthId , avatarOpt ) ⇒ updateAvatar ( state , clientAuthId , avatarOpt ) < nl > case AddContacts ( _ , clientAuthId , contactsToAdd ) ⇒ addContacts ( state , clientAuthId , contactsToAdd ) < nl > + case UpdateIsAdmin ( _ , isAdmin ) ⇒ updateIsAdmin ( state , isAdmin ) < nl > case StopOffice ⇒ context stop self < nl > case ReceiveTimeout ⇒ context . parent ! ShardRegion . Passivate ( stopMessage = StopOffice ) < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > index 7db90e4 . . 6c47e37 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > @ @ - 67 , 7 + 67 , 7 @ @ trait AuthHelpers extends Helpers { < nl > < nl > def handleUserCreate ( user : models . User , transaction : models . AuthTransactionChildren , authId : Long ) : Result [ User ] = { < nl > for { < nl > - _ ← fromFuture ( userExt . create ( user . id , user . accessSalt , user . nickname , user . name , user . countryCode , im . actor . api . rpc . users . ApiSex ( user . sex . toInt ) , isBot = false , Seq . empty [ ApiExtension ] , None ) ) < nl > + _ ← fromFuture ( userExt . create ( user . id , user . accessSalt , user . nickname , user . name , user . countryCode , im . actor . api . rpc . users . ApiSex ( user . sex . toInt ) , isBot = false ) ) < nl > _ ← fromDBIO ( persist . AvatarDataRepo . create ( models . AvatarData . empty ( models . AvatarData . OfUser , user . id . toLong ) ) ) < nl > _ ← fromDBIO ( AuthTransactionRepo . delete ( transaction . transactionHash ) ) < nl > _ ← transaction match { < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > index 956db76 . . 5c8abae 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > @ @ - 463 , 7 + 463 , 7 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( < nl > external = None < nl > ) < nl > for { < nl > - _ ← DBIO . from ( userExt . create ( user . id , user . accessSalt , None , user . name , user . countryCode , im . actor . api . rpc . users . ApiSex ( user . sex . toInt ) , isBot = false , Seq . empty [ ApiExtension ] , None ) ) < nl > + _ ← DBIO . from ( userExt . create ( user . id , user . accessSalt , None , user . name , user . countryCode , im . actor . api . rpc . users . ApiSex ( user . sex . toInt ) , isBot = false ) ) < nl > _ ← DBIO . from ( userExt . auth ( userId , clientData . authId ) ) < nl > _ ← DBIO . from ( userExt . addPhone ( user . id , normPhoneNumber ) ) < nl > _ ← persist . AvatarDataRepo . create ( models . AvatarData . empty ( models . AvatarData . OfUser , user . id . toLong ) ) < nl > diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / cli / ActorCliService . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / cli / ActorCliService . scala < nl > index 88ed8c8 . . 895dc4c 100644 < nl > - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / cli / ActorCliService . scala < nl > + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / cli / ActorCliService . scala < nl > @ @ - 9 , 6 + 9 , 7 @ @ object ActorCliService { < nl > < nl > final private class ActorCliService extends Actor with ActorLogging { < nl > protected val bots = context . actorOf ( BotsCliService . props , " bots " ) < nl > + protected val users = context . actorOf ( UsersCliService . props , " users " ) < nl > < nl > def receive = Actor . emptyBehavior < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / cli / UsersCliService . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / cli / UsersCliService . scala < nl > new file mode 100644 < nl > index 0000000 . . 6866fc7 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / cli / UsersCliService . scala < nl > @ @ - 0 , 0 + 1 , 25 @ @ < nl > + package im . actor . server . cli < nl > + < nl > + import akka . actor . { Props , Actor , ActorLogging } < nl > + import akka . cluster . client . ClusterClientReceptionist < nl > + import akka . pattern . pipe < nl > + import im . actor . server . user . UserExtension < nl > + < nl > + object UsersCliService { < nl > + def props = Props ( new BotsCliService ) < nl > + } < nl > + < nl > + private final class UsersCliService extends Actor with ActorLogging { < nl > + import context . dispatcher < nl > + < nl > + ClusterClientReceptionist ( context . system ) . registerService ( self ) < nl > + < nl > + private val userExt = UserExtension ( context . system ) < nl > + < nl > + def receive = { < nl > + case UpdateIsAdmin ( userId , isAdmin ) ⇒ < nl > + ( for { < nl > + _ ← userExt . updateIsAdmin ( userId , isAdmin ) < nl > + } yield Unit ) pipeTo sender ( ) < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / user . proto b / actor - server / actor - core / src / main / protobuf / user . proto 
 index 534a6ca . . ef31495 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / user . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / user . proto 
 @ @ - 201 , 6 + 201 , 13 @ @ message UserCommands { 
 repeated ContactToAdd contacts _ to _ add = 3 ; 
 } 
 
 + message RemoveContact { 
 + option ( scalapb . message ) . extends = " im . actor . server . user . UserCommand " ; 
 + 
 + required int32 user _ id = 1 ; 
 + required int32 contact _ user _ id = 2 ; 
 + } 
 + 
 message NotifyDialogsChanged { 
 option ( scalapb . message ) . extends = " im . actor . server . user . UserCommand " ; 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / ContactsUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / ContactsUtils . scala 
 deleted file mode 100644 
 index ce3dc0e . . 0000000 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / ContactsUtils . scala 
 + + + / dev / null 
 @ @ - 1 , 17 + 0 , 0 @ @ 
 - package im . actor . server . user 
 - 
 - import akka . actor . ActorSystem 
 - import akka . util . Timeout 
 - import im . actor . server . { KeyValueMappings , model , persist } 
 - import shardakka . ShardakkaExtension 
 - import slick . dbio . DBIO 
 - 
 - import scala . concurrent . { ExecutionContext , Future } 
 - 
 - object ContactsUtils { 
 - 
 - def deleteContact ( ownerUserId : Int , userId : Int ) ( implicit ec : ExecutionContext , timeout : Timeout , system : ActorSystem ) : DBIO [ Int ] = 
 - for { 
 - result ← persist . contact . UserContactRepo . delete ( ownerUserId , userId ) 
 - } yield result 
 - } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 index 42fce42 . . c51f228 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 @ @ - 5 , 7 + 5 , 7 @ @ import java . util . TimeZone 
 
 import akka . actor . { ActorSystem , Status } 
 import akka . pattern . pipe 
 - import im . actor . api . rpc . contacts . { UpdateContactRegistered , UpdateContactsAdded } 
 + import im . actor . api . rpc . contacts . { UpdateContactsRemoved , UpdateContactRegistered , UpdateContactsAdded } 
 import im . actor . api . rpc . messaging . _ 
 import im . actor . api . rpc . misc . ApiExtension 
 import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } 
 @ @ - 51 , 6 + 51 , 8 @ @ object UserErrors { 
 
 case object EmptyLocalesList extends UserError ( " Empty locale list " ) 
 
 + final case object ContactNotFound extends UserError ( " Contact not found " ) 
 + 
 } 
 
 private object ServiceMessages { 
 @ @ - 337 , 6 + 339 , 24 @ @ private [ user ] trait UserCommandHandlers { 
 } yield seqstate ) pipeTo sender ( ) 
 } 
 
 + protected def removeContact ( 
 + user : User , 
 + contactUserId : Int 
 + ) : Unit = { 
 + val updLocalName = UpdateUserLocalNameChanged ( contactUserId , None ) 
 + val updContact = UpdateContactsRemoved ( Vector ( contactUserId ) ) 
 + 
 + ( db . run ( UserContactRepo . find ( user . id , contactUserId ) ) flatMap { 
 + case Some ( _ ) ⇒ 
 + for { 
 + _ ← db . run ( UserContactRepo . delete ( user . id , contactUserId ) ) 
 + _ ← seqUpdatesExt . deliverSingleUpdate ( user . id , updLocalName ) 
 + seqstate ← seqUpdatesExt . deliverSingleUpdate ( user . id , updContact ) 
 + } yield seqstate 
 + case None ⇒ Future . failed ( UserErrors . ContactNotFound ) 
 + } ) pipeTo sender ( ) 
 + } 
 + 
 private def checkNicknameExists ( nicknameOpt : Option [ String ] ) : Future [ Boolean ] = { 
 nicknameOpt match { 
 case Some ( nickname ) ⇒ db . run ( p . UserRepo . nicknameExists ( nickname ) ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 index 0bf023b . . 9e125cc 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 @ @ - 111 , 6 + 111 , 9 @ @ private [ user ] sealed trait Commands extends AuthCommands { 
 else 
 seqUpdExt . getSeqState ( userId ) 
 
 + def removeContact ( userId : Int , contactUserId : Int ) : Future [ SeqState ] = 
 + ( processorRegion . ref ? RemoveContact ( userId , contactUserId ) ) . mapTo [ SeqState ] 
 + 
 def editLocalName ( userId : Int , contactUserId : Int , localName : Option [ String ] , supressUpdate : Boolean = false ) : Future [ SeqState ] = 
 ( processorRegion . ref ? EditLocalName ( userId , contactUserId , localName , supressUpdate ) ) . mapTo [ SeqState ] 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 index 5662128 . . 8721fad 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 @ @ - 86 , 6 + 86 , 7 @ @ object UserProcessor { 
 10035 → classOf [ UserCommands . ChangePreferredLanguages ] , 
 10036 → classOf [ UserCommands . ChangeTimeZone ] , 
 10037 → classOf [ UserCommands . EditLocalName ] , 
 + 10038 → classOf [ UserCommands . RemoveContact ] , 
 
 11001 → classOf [ UserQueries . GetAuthIds ] , 
 11002 → classOf [ UserQueries . GetAuthIdsResponse ] , 
 @ @ - 215 , 6 + 216 , 7 @ @ private [ user ] final class UserProcessor 
 case ChangeAbout ( _ , about ) ⇒ changeAbout ( state , about ) 
 case UpdateAvatar ( _ , avatarOpt ) ⇒ updateAvatar ( state , avatarOpt ) 
 case AddContacts ( _ , contactsToAdd ) ⇒ addContacts ( state , contactsToAdd ) 
 + case RemoveContact ( _ , contactUserId ) ⇒ removeContact ( state , contactUserId ) 
 case UpdateIsAdmin ( _ , isAdmin ) ⇒ updateIsAdmin ( state , isAdmin ) 
 case NotifyDialogsChanged ( _ ) ⇒ notifyDialogsChanged ( state ) 
 case ChangeTimeZone ( _ , timeZone ) ⇒ changeTimeZone ( state , timeZone ) 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContactRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContactRepo . scala 
 index 47ce4bb . . 7df6e60 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContactRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContactRepo . scala 
 @ @ - 36 , 6 + 36 , 9 @ @ object UserContactRepo { 
 byPKNotDeleted ( ownerUserId , contactUserId ) map ( _ . name ) 
 ) 
 
 + def byContactUserId ( contactUserId : Rep [ Int ] ) = active . filter ( _ . contactUserId = = = contactUserId ) 
 + val byContactUserIdC = Compiled ( byContactUserId _ ) 
 + 
 def byPKDeleted ( ownerUserId : Int , contactUserId : Int ) = 
 contacts . filter ( c ⇒ c . ownerUserId = = = ownerUserId & & c . contactUserId = = = contactUserId & & c . isDeleted = = = true ) 
 
 @ @ - 54 , 6 + 57 , 8 @ @ object UserContactRepo { 
 def findIds ( ownerUserId : Int , contactUserIds : Set [ Int ] ) = 
 byOwnerUserIdNotDeleted ( ownerUserId ) . filter ( _ . contactUserId inSet contactUserIds ) . map ( _ . contactUserId ) . result 
 
 + def findOwners ( contactUserId : Int ) = byContactUserIdC ( contactUserId ) . result 
 + 
 def findNotDeletedIds ( ownerUserId : Int ) = 
 byOwnerUserIdNotDeleted ( ownerUserId ) . map ( _ . contactUserId ) . result 
 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala 
 index 92e6e17 . . b2e66ea 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala 
 @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . server . api . rpc . service . contacts 
 import java . security . MessageDigest 
 
 import akka . event . Logging 
 + import im . actor . api . rpc . peers . ApiUserOutPeer 
 import im . actor . concurrent . FutureExt 
 import im . actor . server . acl . ACLUtils 
 import im . actor . server . user . UserCommands . ContactToAdd 
 @ @ - 35 , 10 + 36 , 8 @ @ import scalaz . EitherT 
 class ContactsServiceImpl ( implicit actorSystem : ActorSystem ) 
 extends ContactsService { 
 
 - import ContactsUtils . _ 
 import SocialManager . _ 
 - 
 - private val log = Logging ( actorSystem , getClass ) 
 + import PeerHelpers . _ 
 
 override implicit val ec : ExecutionContext = actorSystem . dispatcher 
 implicit val timeout = Timeout ( 5 . seconds ) 
 @ @ - 105 , 27 + 104 , 14 @ @ class ContactsServiceImpl ( implicit actorSystem : ActorSystem ) 
 } 
 
 override def jhandleRemoveContact ( userId : Int , accessHash : Long , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { 
 - val authorizedAction = requireAuth ( clientData ) . map { implicit client ⇒ 
 - persist . contact . UserContactRepo . find ( ownerUserId = client . userId , contactUserId = userId ) . flatMap { 
 - case Some ( contact ) ⇒ 
 - DBIO . from ( userExt . getAccessHash ( userId , clientData . authId ) ) flatMap { contactAccessHash ⇒ 
 - if ( accessHash = = contactAccessHash ) { 
 - for { 
 - _ ← deleteContact ( client . userId , userId ) 
 - _ ← DBIO . from ( userExt . broadcastClientUpdate ( UpdateUserLocalNameChanged ( userId , None ) , None , isFat = false ) ) 
 - seqstate ← DBIO . from ( userExt . broadcastClientUpdate ( UpdateContactsRemoved ( Vector ( userId ) ) , None , isFat = false ) ) 
 - } yield { 
 - Ok ( ResponseSeq ( seqstate . seq , seqstate . state . toByteArray ) ) 
 - } 
 - } else { 
 - DBIO . successful ( Error ( CommonErrors . InvalidAccessHash ) ) 
 - } 
 - } 
 - case None ⇒ DBIO . successful ( Error ( Errors . ContactNotFound ) ) 
 + authorized ( clientData ) { implicit client ⇒ 
 + withUserOutPeerF ( ApiUserOutPeer ( userId , accessHash ) ) { 
 + for ( seqstate ← userExt . removeContact ( client . userId , userId ) ) 
 + yield Ok ( ResponseSeq ( seqstate . seq , seqstate . state . toByteArray ) ) 
 } 
 + } recover { 
 + case UserErrors . ContactNotFound ⇒ Error ( Errors . ContactNotFound ) 
 } 
 - 
 - db . run ( toDBIOAction ( authorizedAction ) ) 
 } 
 
 override def jhandleAddContact ( userId : Int , accessHash : Long , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = {

NEAREST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 index c212ec3 . . 58aa633 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 @ @ - 117 , 7 + 117 , 8 @ @ private [ bot ] final class BotExtensionImpl ( _ system : ActorSystem ) extends BotExten 
 name = name , 
 countryCode = " US " , 
 sex = ApiSex . Unknown , 
 - isBot = true 
 + isBot = true , 
 + isAdmin = isAdmin 
 ) 
 _ ← tokensKV . upsert ( token , userId ) 
 } yield token 
 diff - - git a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala 
 index a743588 . . 59a5230 100644 
 - - - a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala 
 + + + b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala 
 @ @ - 13 , 8 + 13 , 9 @ @ import scala . concurrent . duration . _ 
 import scala . reflect . ClassTag 
 
 private case class Config ( 
 - command : String = " help " , 
 - createBot : CreateBot = CreateBot ( ) 
 + command : String = " help " , 
 + createBot : CreateBot = CreateBot ( ) , 
 + updateIsAdmin : UpdateIsAdmin = UpdateIsAdmin ( ) 
 ) 
 
 private [ cli ] trait Request { 
 @ @ - 31 , 9 + 32 , 18 @ @ private [ cli ] case class CreateBot ( 
 
 private [ cli ] case class CreateBotResponse ( token : String ) 
 
 + private [ cli ] case class UpdateIsAdmin ( 
 + userId : Int = 0 , 
 + isAdmin : Boolean = false 
 + ) extends Request { 
 + override type Response = Unit 
 + } 
 + 
 private object Commands { 
 val Help = " help " 
 val CreateBot = " create - bot " 
 + val AdminGrant = " admin - grant " 
 + val AdminRevoke = " admin - revoke " 
 } 
 
 object ActorCli extends App { 
 @ @ - 54 , 6 + 64 , 20 @ @ object ActorCli extends App { 
 c . copy ( createBot = c . createBot . copy ( isAdmin = true ) ) 
 } 
 ) 
 + cmd ( Commands . AdminGrant ) action { ( _ , c ) ⇒ 
 + c . copy ( command = Commands . AdminGrant ) 
 + } children ( 
 + opt [ Int ] ( " userId " ) abbr " u " required ( ) action { ( x , c ) ⇒ 
 + c . copy ( updateIsAdmin = UpdateIsAdmin ( x , isAdmin = true ) ) 
 + } 
 + ) 
 + cmd ( Commands . AdminRevoke ) action { ( _ , c ) ⇒ 
 + c . copy ( command = Commands . AdminRevoke ) 
 + } children ( 
 + opt [ Int ] ( " userId " ) abbr " u " required ( ) action { ( x , c ) ⇒ 
 + c . copy ( updateIsAdmin = UpdateIsAdmin ( x , isAdmin = false ) ) 
 + } 
 + ) 
 } 
 
 parser . parse ( args , Config ( ) ) foreach { config ⇒ 
 @ @ - 64 , 6 + 88 , 8 @ @ object ActorCli extends App { 
 Future . successful ( parser . showUsage ) 
 case Commands . CreateBot ⇒ 
 handlers . createBot ( config . createBot ) 
 + case Commands . AdminGrant | Commands . AdminRevoke ⇒ 
 + handlers . updateIsAdmin ( config . updateIsAdmin ) 
 } ) 
 
 def cmd ( f : Future [ Unit ] ) : Unit = { 
 @ @ - 76 , 8 + 102 , 9 @ @ object ActorCli extends App { 
 } 
 } 
 
 - final class CliHandlers extends BotHandlers { 
 + final class CliHandlers extends BotHandlers with UsersHandlers { 
 protected val BotService = " bots " 
 + protected val UsersService = " users " 
 
 protected val config = ConfigFactory . parseResources ( " cli . conf " ) . resolve ( ) 
 
 @ @ - 100 , 4 + 127 , 4 @ @ final class CliHandlers extends BotHandlers { 
 
 protected def request [ T < : Request : ClassTag ] ( service : String , request : T ) : Future [ T # Response ] = 
 ( client ? ClusterClient . Send ( s " / user / cli / $ service " , request , localAffinity = false ) ) map ( _ . asInstanceOf [ T # Response ] ) 
 - } 
 \ No newline at end of file 
 + } 
 diff - - git a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / UsersHandlers . scala b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / UsersHandlers . scala 
 new file mode 100644 
 index 0000000 . . c0df08c 
 - - - / dev / null 
 + + + b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / UsersHandlers . scala 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package im . actor . server . cli 
 + 
 + import scala . concurrent . Future 
 + 
 + private [ cli ] trait UsersHandlers { 
 + this : CliHandlers ⇒ 
 + 
 + def updateIsAdmin ( rq : UpdateIsAdmin ) : Future [ Unit ] = { 
 + for ( resp ← request ( UsersService , rq ) ) 
 + yield if ( rq . isAdmin ) 
 + println ( " Admin granted " ) 
 + else 
 + println ( " Admin revoked " ) 
 + } 
 + } 
 diff - - git a / actor - server / actor - core / src / main / protobuf / user . proto b / actor - server / actor - core / src / main / protobuf / user . proto 
 index 880c95c . . 7e19ba9 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / user . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / user . proto 
 @ @ - 63 , 12 + 63 , 22 @ @ message UserCommands { 
 required string country _ code = 3 ; 
 required int32 sex = 4 [ ( scalapb . field ) . type = " im . actor . api . rpc . users . ApiSex . ApiSex " ] ; 
 required bool is _ bot = 5 ; 
 + optional bool is _ admin = 10 ; 
 repeated bytes extensions = 7 [ ( scalapb . field ) . type = " im . actor . api . rpc . misc . ApiExtension " ] ; 
 optional string external = 8 ; 
 } 
 
 message CreateAck { } 
 
 + message UpdateIsAdmin { 
 + option ( scalapb . message ) . extends = " im . actor . server . user . UserCommand " ; 
 + 
 + required int32 user _ id = 1 ; 
 + optional bool is _ admin = 2 ; 
 + } 
 + 
 + message UpdateIsAdminAck { } 
 + 
 message AddPhone { 
 option ( scalapb . message ) . extends = " im . actor . server . user . UserCommand " ; 
 
 @ @ - 288 , 6 + 298 , 10 @ @ message UserEvents { 
 optional bool is _ admin = 11 ; 
 } 
 
 + message IsAdminUpdated { 
 + optional bool is _ admin = 1 ; 
 + } 
 + 
 message PhoneAdded { 
 option ( scalapb . message ) . extends = " im . actor . server . user . UserEvent " ; 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index 238a6db . . 2ad6991 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 128 , 7 + 128 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 context become working ( updatedState ( tsEvt , state ) ) 
 
 ( for { 
 - _ ← userExt . create ( botUserId , nextAccessSalt ( ThreadLocalRandom . current ( ) ) , None , " Bot " , " US " , ApiSex . Unknown , isBot = true , Seq . empty [ ApiExtension ] , None ) 
 + _ ← userExt . create ( botUserId , nextAccessSalt ( ThreadLocalRandom . current ( ) ) , None , " Bot " , " US " , ApiSex . Unknown , isBot = true ) 
 _ ← db . run ( p . GroupBotRepo . create ( groupId , botUserId , botToken ) ) 
 _ ← integrationTokensKv . upsert ( botToken , groupId ) 
 } yield ( ) ) onFailure { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 index b80b0fa . . e87444b 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 @ @ - 49 , 7 + 49 , 17 @ @ private [ user ] trait UserCommandHandlers { 
 
 import ImageUtils . _ 
 
 - protected def create ( accessSalt : String , nickname : Option [ String ] , name : String , countryCode : String , sex : ApiSex . ApiSex , isBot : Boolean , extensions : Seq [ ApiExtension ] , external : Option [ String ] ) : Unit = { 
 + protected def create ( 
 + accessSalt : String , 
 + nickname : Option [ String ] , 
 + name : String , 
 + countryCode : String , 
 + sex : ApiSex . ApiSex , 
 + isBot : Boolean , 
 + isAdmin : Boolean , 
 + extensions : Seq [ ApiExtension ] , 
 + external : Option [ String ] 
 + ) : Unit = { 
 log . debug ( " Creating user { } { } " , userId , name ) 
 
 val replyTo = sender ( ) 
 @ @ - 57 , 7 + 67 , 7 @ @ private [ user ] trait UserCommandHandlers { 
 onSuccess ( checkNicknameExists ( nickname ) ) { exists ⇒ 
 if ( ! exists ) { 
 val ts = now ( ) 
 - val e = UserEvents . Created ( userId , accessSalt , nickname , name , countryCode , sex , isBot , extensions , external ) 
 + val e = UserEvents . Created ( userId , accessSalt , nickname , name , countryCode , sex , isBot , extensions , external , isAdmin = Some ( isAdmin ) ) 
 val createEvent = TSEvent ( ts , e ) 
 val user = UserBuilder ( ts , e ) 
 
 @ @ - 81 , 6 + 91 , 14 @ @ private [ user ] trait UserCommandHandlers { 
 } 
 } 
 
 + protected def updateIsAdmin ( state : User , isAdmin : Option [ Boolean ] ) : Unit = { 
 + persist ( TSEvent ( now ( ) , UserEvents . IsAdminUpdated ( isAdmin ) ) ) { e ⇒ 
 + context become working ( updatedState ( e , state ) ) 
 + 
 + sender ( ) ! UpdateIsAdminAck ( ) 
 + } 
 + } 
 + 
 protected def addAuth ( user : User , authId : Long ) : Unit = { 
 persistStashingReply ( TSEvent ( now ( ) , UserEvents . AuthAdded ( authId ) ) , user ) { _ ⇒ 
 db . run ( p . AuthIdRepo . setUserData ( authId , user . id ) ) map ( _ ⇒ NewAuthAck ( ) ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 index 4c24542 . . 5cbd665 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 @ @ - 42 , 10 + 42 , 14 @ @ private [ user ] sealed trait Commands extends AuthCommands { 
 countryCode : String , 
 sex : ApiSex . ApiSex , 
 isBot : Boolean , 
 + isAdmin : Boolean = false , 
 extensions : Seq [ ApiExtension ] = Seq . empty , 
 external : Option [ String ] = None 
 ) : Future [ CreateAck ] = 
 - ( processorRegion . ref ? Create ( userId , accessSalt , nickname , name , countryCode , sex , isBot , extensions , external ) ) . mapTo [ CreateAck ] 
 + ( processorRegion . ref ? Create ( userId , accessSalt , nickname , name , countryCode , sex , isBot , Some ( isAdmin ) , extensions , external ) ) . mapTo [ CreateAck ] 
 + 
 + def updateIsAdmin ( userId : Int , isAdmin : Boolean ) : Future [ UpdateIsAdminAck ] = 
 + ( processorRegion . ref ? UpdateIsAdmin ( userId , Some ( isAdmin ) ) ) . mapTo [ UpdateIsAdminAck ] 
 
 / / FIXME : check existence and reserve generated ids 
 def nextId ( ) : Future [ Int ] = Future . successful ( IdUtils . nextIntId ( ) ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 index b6fc6b1 . . e97d368 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 @ @ - 74 , 6 + 74 , 8 @ @ object UserProcessor { 
 10026 → classOf [ UserCommands . UpdateAvatar ] , 
 10027 → classOf [ UserCommands . UpdateAvatarAck ] , 
 10028 → classOf [ UserCommands . AddContacts ] , 
 + 10029 → classOf [ UserCommands . UpdateIsAdmin ] , 
 + 10029 → classOf [ UserCommands . UpdateIsAdminAck ] , 
 
 11001 → classOf [ UserQueries . GetAuthIds ] , 
 11002 → classOf [ UserQueries . GetAuthIdsResponse ] , 
 @ @ - 100 , 6 + 102 , 7 @ @ object UserProcessor { 
 12011 → classOf [ UserEvents . NicknameChanged ] , 
 12012 → classOf [ UserEvents . AboutChanged ] , 
 12013 → classOf [ UserEvents . AvatarUpdated ] , 
 + 12014 → classOf [ UserEvents . IsAdminUpdated ] , 
 
 13000 → classOf [ User ] 
 ) 
 @ @ - 156 , 13 + 159 , 15 @ @ private [ user ] final class UserProcessor 
 state . copy ( about = about ) 
 case TSEvent ( _ , UserEvents . AvatarUpdated ( avatar ) ) ⇒ 
 state . copy ( avatar = avatar ) 
 + case TSEvent ( _ , UserEvents . IsAdminUpdated ( isAdmin ) ) ⇒ 
 + state . copy ( isAdmin = isAdmin ) 
 case TSEvent ( _ , _ : UserEvents . Created ) ⇒ state 
 } 
 } 
 
 override protected def handleInitCommand : Receive = { 
 - case Create ( _ , accessSalt , nickName , name , countryCode , sex , isBot , extensions , external ) ⇒ 
 - create ( accessSalt , nickName , name , countryCode , sex , isBot , extensions , external ) 
 + case Create ( _ , accessSalt , nickName , name , countryCode , sex , isBot , isAdmin , extensions , external ) ⇒ 
 + create ( accessSalt , nickName , name , countryCode , sex , isBot , isAdmin . getOrElse ( false ) , extensions , external ) 
 } 
 
 override protected def handleCommand ( state : User ) : Receive = { 
 @ @ - 177 , 6 + 182 , 7 @ @ private [ user ] final class UserProcessor 
 case ChangeAbout ( _ , clientAuthId , about ) ⇒ changeAbout ( state , clientAuthId , about ) 
 case UpdateAvatar ( _ , clientAuthId , avatarOpt ) ⇒ updateAvatar ( state , clientAuthId , avatarOpt ) 
 case AddContacts ( _ , clientAuthId , contactsToAdd ) ⇒ addContacts ( state , clientAuthId , contactsToAdd ) 
 + case UpdateIsAdmin ( _ , isAdmin ) ⇒ updateIsAdmin ( state , isAdmin ) 
 case StopOffice ⇒ context stop self 
 case ReceiveTimeout ⇒ context . parent ! ShardRegion . Passivate ( stopMessage = StopOffice ) 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 index 7db90e4 . . 6c47e37 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 @ @ - 67 , 7 + 67 , 7 @ @ trait AuthHelpers extends Helpers { 
 
 def handleUserCreate ( user : models . User , transaction : models . AuthTransactionChildren , authId : Long ) : Result [ User ] = { 
 for { 
 - _ ← fromFuture ( userExt . create ( user . id , user . accessSalt , user . nickname , user . name , user . countryCode , im . actor . api . rpc . users . ApiSex ( user . sex . toInt ) , isBot = false , Seq . empty [ ApiExtension ] , None ) ) 
 + _ ← fromFuture ( userExt . create ( user . id , user . accessSalt , user . nickname , user . name , user . countryCode , im . actor . api . rpc . users . ApiSex ( user . sex . toInt ) , isBot = false ) ) 
 _ ← fromDBIO ( persist . AvatarDataRepo . create ( models . AvatarData . empty ( models . AvatarData . OfUser , user . id . toLong ) ) ) 
 _ ← fromDBIO ( AuthTransactionRepo . delete ( transaction . transactionHash ) ) 
 _ ← transaction match { 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 index 956db76 . . 5c8abae 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 @ @ - 463 , 7 + 463 , 7 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( 
 external = None 
 ) 
 for { 
 - _ ← DBIO . from ( userExt . create ( user . id , user . accessSalt , None , user . name , user . countryCode , im . actor . api . rpc . users . ApiSex ( user . sex . toInt ) , isBot = false , Seq . empty [ ApiExtension ] , None ) ) 
 + _ ← DBIO . from ( userExt . create ( user . id , user . accessSalt , None , user . name , user . countryCode , im . actor . api . rpc . users . ApiSex ( user . sex . toInt ) , isBot = false ) ) 
 _ ← DBIO . from ( userExt . auth ( userId , clientData . authId ) ) 
 _ ← DBIO . from ( userExt . addPhone ( user . id , normPhoneNumber ) ) 
 _ ← persist . AvatarDataRepo . create ( models . AvatarData . empty ( models . AvatarData . OfUser , user . id . toLong ) ) 
 diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / cli / ActorCliService . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / cli / ActorCliService . scala 
 index 88ed8c8 . . 895dc4c 100644 
 - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / cli / ActorCliService . scala 
 + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / cli / ActorCliService . scala 
 @ @ - 9 , 6 + 9 , 7 @ @ object ActorCliService { 
 
 final private class ActorCliService extends Actor with ActorLogging { 
 protected val bots = context . actorOf ( BotsCliService . props , " bots " ) 
 + protected val users = context . actorOf ( UsersCliService . props , " users " ) 
 
 def receive = Actor . emptyBehavior 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / cli / UsersCliService . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / cli / UsersCliService . scala 
 new file mode 100644 
 index 0000000 . . 6866fc7 
 - - - / dev / null 
 + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / cli / UsersCliService . scala 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + package im . actor . server . cli 
 + 
 + import akka . actor . { Props , Actor , ActorLogging } 
 + import akka . cluster . client . ClusterClientReceptionist 
 + import akka . pattern . pipe 
 + import im . actor . server . user . UserExtension 
 + 
 + object UsersCliService { 
 + def props = Props ( new BotsCliService ) 
 + } 
 + 
 + private final class UsersCliService extends Actor with ActorLogging { 
 + import context . dispatcher 
 + 
 + ClusterClientReceptionist ( context . system ) . registerService ( self ) 
 + 
 + private val userExt = UserExtension ( context . system ) 
 + 
 + def receive = { 
 + case UpdateIsAdmin ( userId , isAdmin ) ⇒ 
 + ( for { 
 + _ ← userExt . updateIsAdmin ( userId , isAdmin ) 
 + } yield Unit ) pipeTo sender ( ) 
 + } 
 + }
