BLEU SCORE: 0.37405485108988856

TEST MSG: fix ( core ) : Fixing peer call answering
GENERATED MSG: fix ( core ) : end call if already on call

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > index 0ba7803 . . 88d7513 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > @ @ - 45 , 6 + 45 , 7 @ @ public class PeerCallActor extends EventBusActor { < nl > private boolean wasRejected ; < nl > private boolean wasAnswered ; < nl > private boolean haveMaster = false ; < nl > + private boolean isAnswered = false ; < nl > private int masterUid ; < nl > private long masterDeviceId ; < nl > < nl > @ @ - 88 , 13 + 89 , 16 @ @ public class PeerCallActor extends EventBusActor { < nl > ActorRef ref = system ( ) . actorOf ( getPath ( ) + " / " + uid + " / " + deviceId , new ActorCreator ( ) { < nl > @ Override < nl > public Actor create ( ) { < nl > - return new PeerNodeActor ( uid , deviceId , self ( ) , context ( ) ) ; < nl > + return new PeerNodeActor ( uid , deviceId , selfSettings . isPreConnectionEnabled ( ) , self ( ) , context ( ) ) ; < nl > } < nl > } ) ; < nl > PeerNodeInt peerNodeInt = new PeerNodeInt ( ref ) ; < nl > if ( webRTCMediaStream ! = null ) { < nl > peerNodeInt . setOwnStream ( webRTCMediaStream ) ; < nl > } < nl > + if ( isAnswered ) { < nl > + peerNodeInt . onAnswered ( ) ; < nl > + } < nl > refs . put ( deviceId , peerNodeInt ) ; < nl > } < nl > < nl > @ @ - 164 , 8 + 168 , 15 @ @ public class PeerCallActor extends EventBusActor { < nl > } < nl > < nl > public void sendAnswer ( ) { < nl > + if ( isAnswered ) { < nl > + return ; < nl > + } < nl > + isAnswered = true ; < nl > if ( haveMaster ) { < nl > sendSignaling ( masterUid , masterDeviceId , new ApiAnswerCall ( ) ) ; < nl > + for ( PeerNodeInt node : refs . values ( ) ) { < nl > + node . onAnswered ( ) ; < nl > + } < nl > } else { < nl > wasAnswered = true ; < nl > } < nl > @ @ - 238 , 7 + 249 , 6 @ @ public class PeerCallActor extends EventBusActor { < nl > } else if ( signaling instanceof ApiOffer ) { < nl > ApiOffer offer = ( ApiOffer ) signaling ; < nl > getPeer ( senderId , senderDeviceId ) . onAdvertised ( new PeerNodeSettings ( offer . getOwnPeerSettings ( ) ) ) ; < nl > - getPeer ( senderId , senderDeviceId ) . onAnswered ( ) ; < nl > getPeer ( senderId , senderDeviceId ) . onOffer ( offer . getSdp ( ) ) ; < nl > } else if ( signaling instanceof ApiAnswer ) { < nl > ApiAnswer answer = ( ApiAnswer ) signaling ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > index a69e152 . . 3697a4c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > @ @ - 18 , 6 + 18 , 7 @ @ public class PeerNodeActor extends ModuleActor { < nl > < nl > private final long deviceId ; < nl > private final int uid ; < nl > + private final boolean isPreConnectEnabled ; < nl > private final ActorRef callActor ; < nl > private ActorRef peerConnection ; < nl > private PeerNodeSettings settings ; < nl > @ @ - 26 , 8 + 27 , 9 @ @ public class PeerNodeActor extends ModuleActor { < nl > private boolean isMuted = false ; < nl > private boolean isConnected = false ; < nl > < nl > - public PeerNodeActor ( int uid , long deviceId , ActorRef callActor , ModuleContext context ) { < nl > + public PeerNodeActor ( int uid , long deviceId , boolean isPreConnectEnabled , ActorRef callActor , ModuleContext context ) { < nl > super ( context ) ; < nl > + this . isPreConnectEnabled = isPreConnectEnabled ; < nl > this . callActor = callActor ; < nl > this . uid = uid ; < nl > this . deviceId = deviceId ; < nl > @ @ - 69 , 7 + 71 , 7 @ @ public class PeerNodeActor extends ModuleActor { < nl > if ( peerConnection = = null < nl > & & settings ! = null < nl > & & mediaStream ! = null < nl > - & & ( settings . isPreConnectionEnabled ( ) | | isAnswered ) ) { < nl > + & & ( ( settings . isPreConnectionEnabled ( ) & & isPreConnectEnabled ) | | isAnswered ) ) { < nl > < nl > peerConnection = system ( ) . actorOf ( getPath ( ) + " / connection " , < nl > PeerConnectionActor . CONSTRUCTOR ( mediaStream , isAnswered , self ( ) , context ( ) ) , < nl > @ @ - 179 , 7 + 181 , 6 @ @ public class PeerNodeActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - < nl > public static class OnAdvertised { < nl > < nl > private PeerNodeSettings settings ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > index 47680b6 . . 65dbbff 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > @ @ - 27 , 6 + 27 , 7 @ @ import im . actor . core . DeviceCategory ; < nl > import im . actor . core . PlatformType ; < nl > import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . core . modules . events . IncomingCall ; < nl > + import im . actor . core . modules . internal . CallsModule ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . actors . ActorContext ; < nl > import im . actor . runtime . android . view . BindedViewHolder ; < nl > @ @ - 145 , 6 + 146 , 11 @ @ public class ActorSDK { < nl > * / < nl > private ActivityManager activityManager = new ActivityManager ( ) ; < nl > < nl > + / * * < nl > + * Call enabled < nl > + * / < nl > + private boolean callsEnabled = false ; < nl > + < nl > private ActorSDK ( ) { < nl > endpoints = new String [ ] { < nl > " tls : / / front1 - mtproto - api - rev2 . actor . im " , < nl > @ @ - 503 , 6 + 509 , 15 @ @ public class ActorSDK { < nl > this . twitter = twitter ; < nl > } < nl > < nl > + public void setCallsEnabled ( boolean callsEnabled ) { < nl > + this . callsEnabled = callsEnabled ; < nl > + CallsModule . CALLS _ ENABLED = callsEnabled ; < nl > + } < nl > + < nl > + public boolean isCallsEnabled ( ) { < nl > + return callsEnabled ; < nl > + } < nl > + < nl > / * * < nl > * Getting Application Delegate . < nl > * < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index ae0b10b . . 23f1b50 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 1009 , 6 + 1009 , 14 @ @ public class Messenger { < nl > / / Calls < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > < nl > + / * * < nl > + * Command for doing call < nl > + * < nl > + * @ param uid user you want to call < nl > + * @ param callCallback ui callback < nl > + * @ return command to execute < nl > + * / < nl > + @ ObjectiveCName ( " doCallWithUid : withCallback " ) < nl > public Command < ResponseDoCall > doCall ( int uid , CallsModule . CallCallback callCallback ) { < nl > return modules . getCallsModule ( ) . makeCall ( uid , callCallback ) ; < nl > } < nl > @ @ - 1017 , 10 + 1025 , 23 @ @ public class Messenger { < nl > modules . getCallsModule ( ) . endCall ( callId ) ; < nl > } < nl > < nl > - public void answerCall ( long callId , CallsModule . CallCallback callback ) { < nl > + / * * < nl > + * Handle call in ui - < b > should < b / > be called , when receiving IncomingCallEvent < nl > + * @ param callId < nl > + * @ param callback < nl > + * / < nl > + @ ObjectiveCName ( " handleCallWithCallId : withCallback : " ) < nl > + public void handleCall ( long callId , CallsModule . CallCallback callback ) { < nl > modules . getCallsModule ( ) . handleCall ( callId , callback ) ; < nl > } < nl > < nl > + / * * < nl > + * Send call signaling < nl > + * < nl > + * @ param callId call id < nl > + * @ param data signal object to send < nl > + * / < nl > + @ ObjectiveCName ( " sendCallSignalWithCallId : withData : " ) < nl > public void sendCallSignal ( long callId , AbsSignal data ) { < nl > modules . getCallsModule ( ) . sendSignal ( callId , data ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > index 7f5e078 . . aed8460 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > @ @ - 32 , 11 + 32 , 12 @ @ public class CallsModule extends AbsModule { < nl > < nl > < nl > public static final int CALL _ TIMEOUT = 10 ; < nl > - public boolean callsEnabled = true ; < nl > + public static boolean CALLS _ ENABLED = false ; < nl > + public static boolean MULTIPLE _ CALLS _ ENABLED = false ; < nl > HashMap < Long , ActorRef > calls = new HashMap < Long , ActorRef > ( ) ; < nl > < nl > public void run ( ) { < nl > - if ( callsEnabled ) { < nl > + if ( CALLS _ ENABLED ) { < nl > request ( new RequestSubscribeToCalls ( ) ) ; < nl > } < nl > } < nl > @ @ - 79 , 6 + 80 , 9 @ @ public class CallsModule extends AbsModule { < nl > ActorRef call = calls . get ( callId ) ; < nl > if ( call ! = null ) { < nl > call . send ( new CallActor . HandleCall ( callback ) ) ; < nl > + } else { < nl > + / / can ' t find call - close fragment < nl > + callback . onCallEnd ( ) ; < nl > } < nl > } < nl > < nl > @ @ - 92 , 6 + 96 , 7 @ @ public class CallsModule extends AbsModule { < nl > } < nl > < nl > public void onIncomingCall ( final long callId , int uid ) { < nl > + < nl > if ( ! calls . keySet ( ) . contains ( callId ) ) { < nl > calls . put ( callId , < nl > ActorSystem . system ( ) . actorOf ( Props . create ( CallActor . class , new ActorCreator < CallActor > ( ) { < nl > @ @ - 100 , 8 + 105 , 13 @ @ public class CallsModule extends AbsModule { < nl > return new CallActor ( callId , context ( ) ) ; < nl > } < nl > } ) , " actor / call " ) ) ; < nl > - context ( ) . getEvents ( ) . post ( new IncomingCall ( callId , uid ) ) ; < nl > + if ( ! MULTIPLE _ CALLS _ ENABLED & calls . keySet ( ) . size ( ) > 0 ) { < nl > + calls . get ( callId ) . send ( new CallActor . EndCall ( ) ) ; < nl > + } else { < nl > + context ( ) . getEvents ( ) . post ( new IncomingCall ( callId , uid ) ) ; < nl > + } < nl > } < nl > + < nl > } < nl > < nl > / / on end call update < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > index 123e199 . . f95c43e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > @ @ - 33 , 6 + 33 , 7 @ @ public class CallActor extends ModuleActor { < nl > public void preStart ( ) { < nl > super . preStart ( ) ; < nl > self ( ) . send ( new SendCallInProgress ( ) ) ; < nl > + self ( ) . send ( new CheckCallIsHandled ( ) , 1500 ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 49 , 6 + 50 , 25 @ @ public class CallActor extends ModuleActor { < nl > onSignal ( ( ( Signal ) message ) . getData ( ) ) ; < nl > } else if ( message instanceof HandleCall ) { < nl > onHandleCall ( ( ( HandleCall ) message ) . getCallback ( ) ) ; < nl > + } else if ( message instanceof CheckCallIsHandled ) { < nl > + checkCallHandled ( ) ; < nl > + } < nl > + } < nl > + < nl > + private void checkCallHandled ( ) { < nl > + if ( callback = = null ) { < nl > + / / don ' t want to wait for fragment forever < nl > + callback = new CallsModule . CallCallback ( ) { < nl > + @ Override < nl > + public void onCallEnd ( ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onSignal ( byte [ ] data ) { < nl > + < nl > + } < nl > + } ; < nl > } < nl > } < nl > < nl > @ @ - 62 , 6 + 82 , 7 @ @ public class CallActor extends ModuleActor { < nl > < nl > public void onEndCall ( ) { < nl > if ( callback = = null ) { < nl > + / / fragment not yet created ? < nl > self ( ) . send ( new EndCall ( ) , 500 ) ; < nl > return ; < nl > } < nl > @ @ - 153 , 4 + 174 , 8 @ @ public class CallActor extends ModuleActor { < nl > private static class SendCallInProgress { < nl > < nl > } < nl > + < nl > + private static class CheckCallIsHandled { < nl > + < nl > + } < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 index 0ba7803 . . 88d7513 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 @ @ - 45 , 6 + 45 , 7 @ @ public class PeerCallActor extends EventBusActor { 
 private boolean wasRejected ; 
 private boolean wasAnswered ; 
 private boolean haveMaster = false ; 
 + private boolean isAnswered = false ; 
 private int masterUid ; 
 private long masterDeviceId ; 
 
 @ @ - 88 , 13 + 89 , 16 @ @ public class PeerCallActor extends EventBusActor { 
 ActorRef ref = system ( ) . actorOf ( getPath ( ) + " / " + uid + " / " + deviceId , new ActorCreator ( ) { 
 @ Override 
 public Actor create ( ) { 
 - return new PeerNodeActor ( uid , deviceId , self ( ) , context ( ) ) ; 
 + return new PeerNodeActor ( uid , deviceId , selfSettings . isPreConnectionEnabled ( ) , self ( ) , context ( ) ) ; 
 } 
 } ) ; 
 PeerNodeInt peerNodeInt = new PeerNodeInt ( ref ) ; 
 if ( webRTCMediaStream ! = null ) { 
 peerNodeInt . setOwnStream ( webRTCMediaStream ) ; 
 } 
 + if ( isAnswered ) { 
 + peerNodeInt . onAnswered ( ) ; 
 + } 
 refs . put ( deviceId , peerNodeInt ) ; 
 } 
 
 @ @ - 164 , 8 + 168 , 15 @ @ public class PeerCallActor extends EventBusActor { 
 } 
 
 public void sendAnswer ( ) { 
 + if ( isAnswered ) { 
 + return ; 
 + } 
 + isAnswered = true ; 
 if ( haveMaster ) { 
 sendSignaling ( masterUid , masterDeviceId , new ApiAnswerCall ( ) ) ; 
 + for ( PeerNodeInt node : refs . values ( ) ) { 
 + node . onAnswered ( ) ; 
 + } 
 } else { 
 wasAnswered = true ; 
 } 
 @ @ - 238 , 7 + 249 , 6 @ @ public class PeerCallActor extends EventBusActor { 
 } else if ( signaling instanceof ApiOffer ) { 
 ApiOffer offer = ( ApiOffer ) signaling ; 
 getPeer ( senderId , senderDeviceId ) . onAdvertised ( new PeerNodeSettings ( offer . getOwnPeerSettings ( ) ) ) ; 
 - getPeer ( senderId , senderDeviceId ) . onAnswered ( ) ; 
 getPeer ( senderId , senderDeviceId ) . onOffer ( offer . getSdp ( ) ) ; 
 } else if ( signaling instanceof ApiAnswer ) { 
 ApiAnswer answer = ( ApiAnswer ) signaling ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 index a69e152 . . 3697a4c 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 @ @ - 18 , 6 + 18 , 7 @ @ public class PeerNodeActor extends ModuleActor { 
 
 private final long deviceId ; 
 private final int uid ; 
 + private final boolean isPreConnectEnabled ; 
 private final ActorRef callActor ; 
 private ActorRef peerConnection ; 
 private PeerNodeSettings settings ; 
 @ @ - 26 , 8 + 27 , 9 @ @ public class PeerNodeActor extends ModuleActor { 
 private boolean isMuted = false ; 
 private boolean isConnected = false ; 
 
 - public PeerNodeActor ( int uid , long deviceId , ActorRef callActor , ModuleContext context ) { 
 + public PeerNodeActor ( int uid , long deviceId , boolean isPreConnectEnabled , ActorRef callActor , ModuleContext context ) { 
 super ( context ) ; 
 + this . isPreConnectEnabled = isPreConnectEnabled ; 
 this . callActor = callActor ; 
 this . uid = uid ; 
 this . deviceId = deviceId ; 
 @ @ - 69 , 7 + 71 , 7 @ @ public class PeerNodeActor extends ModuleActor { 
 if ( peerConnection = = null 
 & & settings ! = null 
 & & mediaStream ! = null 
 - & & ( settings . isPreConnectionEnabled ( ) | | isAnswered ) ) { 
 + & & ( ( settings . isPreConnectionEnabled ( ) & & isPreConnectEnabled ) | | isAnswered ) ) { 
 
 peerConnection = system ( ) . actorOf ( getPath ( ) + " / connection " , 
 PeerConnectionActor . CONSTRUCTOR ( mediaStream , isAnswered , self ( ) , context ( ) ) , 
 @ @ - 179 , 7 + 181 , 6 @ @ public class PeerNodeActor extends ModuleActor { 
 } 
 } 
 
 - 
 public static class OnAdvertised { 
 
 private PeerNodeSettings settings ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 index 47680b6 . . 65dbbff 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import im . actor . core . DeviceCategory ; 
 import im . actor . core . PlatformType ; 
 import im . actor . core . entity . content . AbsContent ; 
 import im . actor . core . modules . events . IncomingCall ; 
 + import im . actor . core . modules . internal . CallsModule ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . actors . ActorContext ; 
 import im . actor . runtime . android . view . BindedViewHolder ; 
 @ @ - 145 , 6 + 146 , 11 @ @ public class ActorSDK { 
 * / 
 private ActivityManager activityManager = new ActivityManager ( ) ; 
 
 + / * * 
 + * Call enabled 
 + * / 
 + private boolean callsEnabled = false ; 
 + 
 private ActorSDK ( ) { 
 endpoints = new String [ ] { 
 " tls : / / front1 - mtproto - api - rev2 . actor . im " , 
 @ @ - 503 , 6 + 509 , 15 @ @ public class ActorSDK { 
 this . twitter = twitter ; 
 } 
 
 + public void setCallsEnabled ( boolean callsEnabled ) { 
 + this . callsEnabled = callsEnabled ; 
 + CallsModule . CALLS _ ENABLED = callsEnabled ; 
 + } 
 + 
 + public boolean isCallsEnabled ( ) { 
 + return callsEnabled ; 
 + } 
 + 
 / * * 
 * Getting Application Delegate . 
 * 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index ae0b10b . . 23f1b50 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 1009 , 6 + 1009 , 14 @ @ public class Messenger { 
 / / Calls 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 + / * * 
 + * Command for doing call 
 + * 
 + * @ param uid user you want to call 
 + * @ param callCallback ui callback 
 + * @ return command to execute 
 + * / 
 + @ ObjectiveCName ( " doCallWithUid : withCallback " ) 
 public Command < ResponseDoCall > doCall ( int uid , CallsModule . CallCallback callCallback ) { 
 return modules . getCallsModule ( ) . makeCall ( uid , callCallback ) ; 
 } 
 @ @ - 1017 , 10 + 1025 , 23 @ @ public class Messenger { 
 modules . getCallsModule ( ) . endCall ( callId ) ; 
 } 
 
 - public void answerCall ( long callId , CallsModule . CallCallback callback ) { 
 + / * * 
 + * Handle call in ui - < b > should < b / > be called , when receiving IncomingCallEvent 
 + * @ param callId 
 + * @ param callback 
 + * / 
 + @ ObjectiveCName ( " handleCallWithCallId : withCallback : " ) 
 + public void handleCall ( long callId , CallsModule . CallCallback callback ) { 
 modules . getCallsModule ( ) . handleCall ( callId , callback ) ; 
 } 
 
 + / * * 
 + * Send call signaling 
 + * 
 + * @ param callId call id 
 + * @ param data signal object to send 
 + * / 
 + @ ObjectiveCName ( " sendCallSignalWithCallId : withData : " ) 
 public void sendCallSignal ( long callId , AbsSignal data ) { 
 modules . getCallsModule ( ) . sendSignal ( callId , data ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 index 7f5e078 . . aed8460 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 @ @ - 32 , 11 + 32 , 12 @ @ public class CallsModule extends AbsModule { 
 
 
 public static final int CALL _ TIMEOUT = 10 ; 
 - public boolean callsEnabled = true ; 
 + public static boolean CALLS _ ENABLED = false ; 
 + public static boolean MULTIPLE _ CALLS _ ENABLED = false ; 
 HashMap < Long , ActorRef > calls = new HashMap < Long , ActorRef > ( ) ; 
 
 public void run ( ) { 
 - if ( callsEnabled ) { 
 + if ( CALLS _ ENABLED ) { 
 request ( new RequestSubscribeToCalls ( ) ) ; 
 } 
 } 
 @ @ - 79 , 6 + 80 , 9 @ @ public class CallsModule extends AbsModule { 
 ActorRef call = calls . get ( callId ) ; 
 if ( call ! = null ) { 
 call . send ( new CallActor . HandleCall ( callback ) ) ; 
 + } else { 
 + / / can ' t find call - close fragment 
 + callback . onCallEnd ( ) ; 
 } 
 } 
 
 @ @ - 92 , 6 + 96 , 7 @ @ public class CallsModule extends AbsModule { 
 } 
 
 public void onIncomingCall ( final long callId , int uid ) { 
 + 
 if ( ! calls . keySet ( ) . contains ( callId ) ) { 
 calls . put ( callId , 
 ActorSystem . system ( ) . actorOf ( Props . create ( CallActor . class , new ActorCreator < CallActor > ( ) { 
 @ @ - 100 , 8 + 105 , 13 @ @ public class CallsModule extends AbsModule { 
 return new CallActor ( callId , context ( ) ) ; 
 } 
 } ) , " actor / call " ) ) ; 
 - context ( ) . getEvents ( ) . post ( new IncomingCall ( callId , uid ) ) ; 
 + if ( ! MULTIPLE _ CALLS _ ENABLED & calls . keySet ( ) . size ( ) > 0 ) { 
 + calls . get ( callId ) . send ( new CallActor . EndCall ( ) ) ; 
 + } else { 
 + context ( ) . getEvents ( ) . post ( new IncomingCall ( callId , uid ) ) ; 
 + } 
 } 
 + 
 } 
 
 / / on end call update 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 index 123e199 . . f95c43e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 @ @ - 33 , 6 + 33 , 7 @ @ public class CallActor extends ModuleActor { 
 public void preStart ( ) { 
 super . preStart ( ) ; 
 self ( ) . send ( new SendCallInProgress ( ) ) ; 
 + self ( ) . send ( new CheckCallIsHandled ( ) , 1500 ) ; 
 } 
 
 @ Override 
 @ @ - 49 , 6 + 50 , 25 @ @ public class CallActor extends ModuleActor { 
 onSignal ( ( ( Signal ) message ) . getData ( ) ) ; 
 } else if ( message instanceof HandleCall ) { 
 onHandleCall ( ( ( HandleCall ) message ) . getCallback ( ) ) ; 
 + } else if ( message instanceof CheckCallIsHandled ) { 
 + checkCallHandled ( ) ; 
 + } 
 + } 
 + 
 + private void checkCallHandled ( ) { 
 + if ( callback = = null ) { 
 + / / don ' t want to wait for fragment forever 
 + callback = new CallsModule . CallCallback ( ) { 
 + @ Override 
 + public void onCallEnd ( ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onSignal ( byte [ ] data ) { 
 + 
 + } 
 + } ; 
 } 
 } 
 
 @ @ - 62 , 6 + 82 , 7 @ @ public class CallActor extends ModuleActor { 
 
 public void onEndCall ( ) { 
 if ( callback = = null ) { 
 + / / fragment not yet created ? 
 self ( ) . send ( new EndCall ( ) , 500 ) ; 
 return ; 
 } 
 @ @ - 153 , 4 + 174 , 8 @ @ public class CallActor extends ModuleActor { 
 private static class SendCallInProgress { 
 
 } 
 + 
 + private static class CheckCallIsHandled { 
 + 
 + } 
 }
