BLEU SCORE: 0.6389431042462724

TEST MSG: feat ( core + js ) : Implementing favoriting chats
GENERATED MSG: feat ( core + js ) : Adding chat hiding

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 6de9d72 . . 04a0cab 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 502 , 6 + 502 , 48 @ @ public class JsFacade implements Exportable { < nl > } ) ; < nl > } < nl > < nl > + public JsPromise favoriteChat ( final JsPeer peer ) { < nl > + return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > + @ Override < nl > + public void execute ( ) { < nl > + messenger . favouriteChat ( peer . convert ( ) ) . start ( new CommandCallback < Boolean > ( ) { < nl > + @ Override < nl > + public void onResult ( Boolean res ) { < nl > + Log . d ( TAG , " favouriteChat : result " ) ; < nl > + resolve ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + Log . d ( TAG , " favouriteChat : error " ) ; < nl > + reject ( e . getMessage ( ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + public JsPromise unfavoriteChat ( final JsPeer peer ) { < nl > + return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > + @ Override < nl > + public void execute ( ) { < nl > + messenger . unfavoriteChat ( peer . convert ( ) ) . start ( new CommandCallback < Boolean > ( ) { < nl > + @ Override < nl > + public void onResult ( Boolean res ) { < nl > + Log . d ( TAG , " unfavouriteChat : result " ) ; < nl > + resolve ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + Log . d ( TAG , " unfavouriteChat : error " ) ; < nl > + reject ( e . getMessage ( ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > / / Peers < nl > < nl > public JsPeer getUserPeer ( int uid ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 286b853 . . 34b7178 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 779 , 6 + 779 , 28 @ @ public class Messenger { < nl > } < nl > < nl > / * * < nl > + * Favouriting chat < nl > + * < nl > + * @ param peer destination peer < nl > + * @ return Command for execution < nl > + * / < nl > + @ ObjectiveCName ( " favouriteChatCommandWithPeer : " ) < nl > + public Command < Boolean > favouriteChat ( Peer peer ) { < nl > + return modules . getMessagesModule ( ) . favoriteChat ( peer ) ; < nl > + } < nl > + < nl > + / * * < nl > + * Unfavouriting chat < nl > + * < nl > + * @ param peer destination peer < nl > + * @ return Command for execution < nl > + * / < nl > + @ ObjectiveCName ( " unfavouriteChatCommandWithPeer : " ) < nl > + public Command < Boolean > unfavoriteChat ( Peer peer ) { < nl > + return modules . getMessagesModule ( ) . unfavoriteChat ( peer ) ; < nl > + } < nl > + < nl > + / * * < nl > * Adding reaction to a message < nl > * < nl > * @ param peer destination peer < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index 8c8140c . . 4842ee3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 17 , 9 + 17 , 11 @ @ import im . actor . core . api . ApiPeerType ; < nl > import im . actor . core . api . base . SeqUpdate ; < nl > import im . actor . core . api . rpc . RequestClearChat ; < nl > import im . actor . core . api . rpc . RequestDeleteChat ; < nl > + import im . actor . core . api . rpc . RequestFavouriteDialog ; < nl > import im . actor . core . api . rpc . RequestHideDialog ; < nl > import im . actor . core . api . rpc . RequestMessageRemoveReaction ; < nl > import im . actor . core . api . rpc . RequestMessageSetReaction ; < nl > + import im . actor . core . api . rpc . RequestUnfavouriteDialog ; < nl > import im . actor . core . api . rpc . ResponseDialogsOrder ; < nl > import im . actor . core . api . rpc . ResponseReactionsResponse ; < nl > import im . actor . core . api . rpc . ResponseSeq ; < nl > @ @ - 700 , 6 + 702 , 156 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } ; < nl > } < nl > < nl > + public Command < Boolean > favoriteChat ( final Peer peer ) { < nl > + return new Command < Boolean > ( ) { < nl > + @ Override < nl > + public void start ( final CommandCallback < Boolean > callback ) { < nl > + ApiOutPeer outPeer ; < nl > + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > + if ( user = = null ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( new RpcInternalException ( ) ) ; < nl > + } < nl > + } ) ; < nl > + return ; < nl > + } < nl > + outPeer = new ApiOutPeer ( ApiPeerType . PRIVATE , user . getUid ( ) , < nl > + user . getAccessHash ( ) ) ; < nl > + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group group = groups ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > + if ( group = = null ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( new RpcInternalException ( ) ) ; < nl > + } < nl > + } ) ; < nl > + return ; < nl > + } < nl > + outPeer = new ApiOutPeer ( ApiPeerType . GROUP , group . getGroupId ( ) , < nl > + group . getAccessHash ( ) ) ; < nl > + } else { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( new RpcInternalException ( ) ) ; < nl > + } < nl > + } ) ; < nl > + return ; < nl > + } < nl > + request ( new RequestFavouriteDialog ( outPeer ) , new RpcCallback < ResponseDialogsOrder > ( ) { < nl > + @ Override < nl > + public void onResult ( ResponseDialogsOrder response ) { < nl > + updates ( ) . onSeqUpdateReceived ( response . getSeq ( ) , < nl > + response . getState ( ) , < nl > + new UpdateChatGroupsChanged ( response . getGroups ( ) ) ) ; < nl > + < nl > + updates ( ) . executeAfter ( response . getSeq ( ) , < nl > + new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onResult ( true ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( final RpcException e ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( e ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ; < nl > + } < nl > + < nl > + public Command < Boolean > unfavoriteChat ( final Peer peer ) { < nl > + return new Command < Boolean > ( ) { < nl > + @ Override < nl > + public void start ( final CommandCallback < Boolean > callback ) { < nl > + ApiOutPeer outPeer ; < nl > + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > + if ( user = = null ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( new RpcInternalException ( ) ) ; < nl > + } < nl > + } ) ; < nl > + return ; < nl > + } < nl > + outPeer = new ApiOutPeer ( ApiPeerType . PRIVATE , user . getUid ( ) , < nl > + user . getAccessHash ( ) ) ; < nl > + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group group = groups ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > + if ( group = = null ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( new RpcInternalException ( ) ) ; < nl > + } < nl > + } ) ; < nl > + return ; < nl > + } < nl > + outPeer = new ApiOutPeer ( ApiPeerType . GROUP , group . getGroupId ( ) , < nl > + group . getAccessHash ( ) ) ; < nl > + } else { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( new RpcInternalException ( ) ) ; < nl > + } < nl > + } ) ; < nl > + return ; < nl > + } < nl > + request ( new RequestUnfavouriteDialog ( outPeer ) , new RpcCallback < ResponseDialogsOrder > ( ) { < nl > + @ Override < nl > + public void onResult ( ResponseDialogsOrder response ) { < nl > + updates ( ) . onSeqUpdateReceived ( response . getSeq ( ) , < nl > + response . getState ( ) , < nl > + new UpdateChatGroupsChanged ( response . getGroups ( ) ) ) ; < nl > + < nl > + updates ( ) . executeAfter ( response . getSeq ( ) , < nl > + new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onResult ( true ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( final RpcException e ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( e ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ; < nl > + } < nl > + < nl > public Command < Boolean > hideChat ( final Peer peer ) { < nl > return new Command < Boolean > ( ) { < nl > @ Override
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 11f85fc . . f431f95 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 462 , 6 + 462 , 27 @ @ public class JsFacade implements Exportable { < nl > } ) ; < nl > } < nl > < nl > + public JsPromise hideChat ( final JsPeer peer ) { < nl > + return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > + @ Override < nl > + public void execute ( ) { < nl > + messenger . hideChat ( peer . convert ( ) ) . start ( new CommandCallback < Boolean > ( ) { < nl > + @ Override < nl > + public void onResult ( Boolean res ) { < nl > + Log . d ( TAG , " hideChat : result " ) ; < nl > + resolve ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + Log . d ( TAG , " hideChat : error " ) ; < nl > + reject ( e . getMessage ( ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > / / Peers < nl > < nl > public JsPeer getUserPeer ( int uid ) { < nl > @ @ - 858 , 7 + 879 , 7 @ @ public class JsFacade implements Exportable { < nl > return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > @ Override < nl > public void execute ( ) { < nl > - String avatarDescriptor = provider . registerUploadFile ( file ) ; < nl > + String avatarDescriptor = file ! = null ? provider . registerUploadFile ( file ) : null ; < nl > / / noinspection ConstantConditions < nl > messenger . createGroup ( title , avatarDescriptor , uids ) . start ( new CommandCallback < Integer > ( ) { < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index b59506e . . 0202f68 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 703 , 6 + 703 , 17 @ @ public class Messenger { < nl > } < nl > < nl > / * * < nl > + * Hide chat < nl > + * < nl > + * @ param peer destination peer < nl > + * @ return Command for execution < nl > + * / < nl > + @ ObjectiveCName ( " hideChatCommandWithPeer : " ) < nl > + public Command < Boolean > hideChat ( Peer peer ) { < nl > + return modules . getMessagesModule ( ) . hideChat ( peer ) ; < nl > + } < nl > + < nl > + / * * < nl > * Save message draft < nl > * < nl > * @ param peer destination peer < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index bfbd171 . . a883a25 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 16 , 6 + 16 , 7 @ @ import im . actor . core . api . ApiPeerType ; < nl > import im . actor . core . api . base . SeqUpdate ; < nl > import im . actor . core . api . rpc . RequestClearChat ; < nl > import im . actor . core . api . rpc . RequestDeleteChat ; < nl > + import im . actor . core . api . rpc . RequestHideDialog ; < nl > import im . actor . core . api . rpc . ResponseSeq ; < nl > import im . actor . core . api . updates . UpdateChatClear ; < nl > import im . actor . core . api . updates . UpdateChatDelete ; < nl > @ @ - 366 , 7 + 367 , 7 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > @ Override < nl > public void start ( final CommandCallback < Boolean > callback ) { < nl > ApiOutPeer outPeer ; < nl > - final ApiPeer apiPeer ; < nl > + final ApiPeer apiPeer = buildApiPeer ( peer ) ; < nl > if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > if ( user = = null ) { < nl > @ @ - 380 , 8 + 381 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } < nl > outPeer = new ApiOutPeer ( ApiPeerType . PRIVATE , user . getUid ( ) , < nl > user . getAccessHash ( ) ) ; < nl > - apiPeer = new ApiPeer ( ApiPeerType . PRIVATE , < nl > - user . getUid ( ) ) ; < nl > } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > Group group = groups ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > if ( group = = null ) { < nl > @ @ - 395 , 8 + 394 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } < nl > outPeer = new ApiOutPeer ( ApiPeerType . GROUP , group . getGroupId ( ) , < nl > group . getAccessHash ( ) ) ; < nl > - apiPeer = new ApiPeer ( ApiPeerType . GROUP , < nl > - group . getGroupId ( ) ) ; < nl > } else { < nl > runOnUiThread ( new Runnable ( ) { < nl > @ Override < nl > @ @ - 509 , 6 + 506 , 87 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } ; < nl > } < nl > < nl > + public Command < Boolean > hideChat ( final Peer peer ) { < nl > + return new Command < Boolean > ( ) { < nl > + @ Override < nl > + public void start ( final CommandCallback < Boolean > callback ) { < nl > + ApiOutPeer outPeer ; < nl > + final ApiPeer apiPeer ; < nl > + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > + if ( user = = null ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( new RpcInternalException ( ) ) ; < nl > + } < nl > + } ) ; < nl > + return ; < nl > + } < nl > + outPeer = new ApiOutPeer ( ApiPeerType . PRIVATE , user . getUid ( ) , < nl > + user . getAccessHash ( ) ) ; < nl > + apiPeer = new ApiPeer ( ApiPeerType . PRIVATE , < nl > + user . getUid ( ) ) ; < nl > + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group group = groups ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > + if ( group = = null ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( new RpcInternalException ( ) ) ; < nl > + } < nl > + } ) ; < nl > + return ; < nl > + } < nl > + outPeer = new ApiOutPeer ( ApiPeerType . GROUP , group . getGroupId ( ) , < nl > + group . getAccessHash ( ) ) ; < nl > + apiPeer = new ApiPeer ( ApiPeerType . GROUP , < nl > + group . getGroupId ( ) ) ; < nl > + } else { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( new RpcInternalException ( ) ) ; < nl > + } < nl > + } ) ; < nl > + return ; < nl > + } < nl > + request ( new RequestHideDialog ( outPeer ) , new RpcCallback < ResponseSeq > ( ) { < nl > + @ Override < nl > + public void onResult ( ResponseSeq response ) { < nl > + / / TODO : Implement ? < nl > + / / updates ( ) . onUpdateReceived ( new SeqUpdate ( response . getSeq ( ) , < nl > + / / response . getState ( ) , < nl > + / / UpdateChatClear . HEADER , < nl > + / / new UpdateChatClear ( apiPeer ) . toByteArray ( ) ) ) ; < nl > + updates ( ) . executeAfter ( response . getSeq ( ) , < nl > + new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onResult ( true ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( final RpcException e ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( e ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ; < nl > + } < nl > + < nl > public void resetModule ( ) { < nl > / / TODO : Implement < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 6de9d72 . . 04a0cab 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 502 , 6 + 502 , 48 @ @ public class JsFacade implements Exportable { 
 } ) ; 
 } 
 
 + public JsPromise favoriteChat ( final JsPeer peer ) { 
 + return JsPromise . create ( new JsPromiseExecutor ( ) { 
 + @ Override 
 + public void execute ( ) { 
 + messenger . favouriteChat ( peer . convert ( ) ) . start ( new CommandCallback < Boolean > ( ) { 
 + @ Override 
 + public void onResult ( Boolean res ) { 
 + Log . d ( TAG , " favouriteChat : result " ) ; 
 + resolve ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( Exception e ) { 
 + Log . d ( TAG , " favouriteChat : error " ) ; 
 + reject ( e . getMessage ( ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + public JsPromise unfavoriteChat ( final JsPeer peer ) { 
 + return JsPromise . create ( new JsPromiseExecutor ( ) { 
 + @ Override 
 + public void execute ( ) { 
 + messenger . unfavoriteChat ( peer . convert ( ) ) . start ( new CommandCallback < Boolean > ( ) { 
 + @ Override 
 + public void onResult ( Boolean res ) { 
 + Log . d ( TAG , " unfavouriteChat : result " ) ; 
 + resolve ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( Exception e ) { 
 + Log . d ( TAG , " unfavouriteChat : error " ) ; 
 + reject ( e . getMessage ( ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 / / Peers 
 
 public JsPeer getUserPeer ( int uid ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 286b853 . . 34b7178 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 779 , 6 + 779 , 28 @ @ public class Messenger { 
 } 
 
 / * * 
 + * Favouriting chat 
 + * 
 + * @ param peer destination peer 
 + * @ return Command for execution 
 + * / 
 + @ ObjectiveCName ( " favouriteChatCommandWithPeer : " ) 
 + public Command < Boolean > favouriteChat ( Peer peer ) { 
 + return modules . getMessagesModule ( ) . favoriteChat ( peer ) ; 
 + } 
 + 
 + / * * 
 + * Unfavouriting chat 
 + * 
 + * @ param peer destination peer 
 + * @ return Command for execution 
 + * / 
 + @ ObjectiveCName ( " unfavouriteChatCommandWithPeer : " ) 
 + public Command < Boolean > unfavoriteChat ( Peer peer ) { 
 + return modules . getMessagesModule ( ) . unfavoriteChat ( peer ) ; 
 + } 
 + 
 + / * * 
 * Adding reaction to a message 
 * 
 * @ param peer destination peer 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index 8c8140c . . 4842ee3 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 17 , 9 + 17 , 11 @ @ import im . actor . core . api . ApiPeerType ; 
 import im . actor . core . api . base . SeqUpdate ; 
 import im . actor . core . api . rpc . RequestClearChat ; 
 import im . actor . core . api . rpc . RequestDeleteChat ; 
 + import im . actor . core . api . rpc . RequestFavouriteDialog ; 
 import im . actor . core . api . rpc . RequestHideDialog ; 
 import im . actor . core . api . rpc . RequestMessageRemoveReaction ; 
 import im . actor . core . api . rpc . RequestMessageSetReaction ; 
 + import im . actor . core . api . rpc . RequestUnfavouriteDialog ; 
 import im . actor . core . api . rpc . ResponseDialogsOrder ; 
 import im . actor . core . api . rpc . ResponseReactionsResponse ; 
 import im . actor . core . api . rpc . ResponseSeq ; 
 @ @ - 700 , 6 + 702 , 156 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } ; 
 } 
 
 + public Command < Boolean > favoriteChat ( final Peer peer ) { 
 + return new Command < Boolean > ( ) { 
 + @ Override 
 + public void start ( final CommandCallback < Boolean > callback ) { 
 + ApiOutPeer outPeer ; 
 + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; 
 + if ( user = = null ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( new RpcInternalException ( ) ) ; 
 + } 
 + } ) ; 
 + return ; 
 + } 
 + outPeer = new ApiOutPeer ( ApiPeerType . PRIVATE , user . getUid ( ) , 
 + user . getAccessHash ( ) ) ; 
 + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group group = groups ( ) . getValue ( peer . getPeerId ( ) ) ; 
 + if ( group = = null ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( new RpcInternalException ( ) ) ; 
 + } 
 + } ) ; 
 + return ; 
 + } 
 + outPeer = new ApiOutPeer ( ApiPeerType . GROUP , group . getGroupId ( ) , 
 + group . getAccessHash ( ) ) ; 
 + } else { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( new RpcInternalException ( ) ) ; 
 + } 
 + } ) ; 
 + return ; 
 + } 
 + request ( new RequestFavouriteDialog ( outPeer ) , new RpcCallback < ResponseDialogsOrder > ( ) { 
 + @ Override 
 + public void onResult ( ResponseDialogsOrder response ) { 
 + updates ( ) . onSeqUpdateReceived ( response . getSeq ( ) , 
 + response . getState ( ) , 
 + new UpdateChatGroupsChanged ( response . getGroups ( ) ) ) ; 
 + 
 + updates ( ) . executeAfter ( response . getSeq ( ) , 
 + new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onResult ( true ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( final RpcException e ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( e ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + } ; 
 + } 
 + 
 + public Command < Boolean > unfavoriteChat ( final Peer peer ) { 
 + return new Command < Boolean > ( ) { 
 + @ Override 
 + public void start ( final CommandCallback < Boolean > callback ) { 
 + ApiOutPeer outPeer ; 
 + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; 
 + if ( user = = null ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( new RpcInternalException ( ) ) ; 
 + } 
 + } ) ; 
 + return ; 
 + } 
 + outPeer = new ApiOutPeer ( ApiPeerType . PRIVATE , user . getUid ( ) , 
 + user . getAccessHash ( ) ) ; 
 + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group group = groups ( ) . getValue ( peer . getPeerId ( ) ) ; 
 + if ( group = = null ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( new RpcInternalException ( ) ) ; 
 + } 
 + } ) ; 
 + return ; 
 + } 
 + outPeer = new ApiOutPeer ( ApiPeerType . GROUP , group . getGroupId ( ) , 
 + group . getAccessHash ( ) ) ; 
 + } else { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( new RpcInternalException ( ) ) ; 
 + } 
 + } ) ; 
 + return ; 
 + } 
 + request ( new RequestUnfavouriteDialog ( outPeer ) , new RpcCallback < ResponseDialogsOrder > ( ) { 
 + @ Override 
 + public void onResult ( ResponseDialogsOrder response ) { 
 + updates ( ) . onSeqUpdateReceived ( response . getSeq ( ) , 
 + response . getState ( ) , 
 + new UpdateChatGroupsChanged ( response . getGroups ( ) ) ) ; 
 + 
 + updates ( ) . executeAfter ( response . getSeq ( ) , 
 + new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onResult ( true ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( final RpcException e ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( e ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + } ; 
 + } 
 + 
 public Command < Boolean > hideChat ( final Peer peer ) { 
 return new Command < Boolean > ( ) { 
 @ Override

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 11f85fc . . f431f95 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 462 , 6 + 462 , 27 @ @ public class JsFacade implements Exportable { 
 } ) ; 
 } 
 
 + public JsPromise hideChat ( final JsPeer peer ) { 
 + return JsPromise . create ( new JsPromiseExecutor ( ) { 
 + @ Override 
 + public void execute ( ) { 
 + messenger . hideChat ( peer . convert ( ) ) . start ( new CommandCallback < Boolean > ( ) { 
 + @ Override 
 + public void onResult ( Boolean res ) { 
 + Log . d ( TAG , " hideChat : result " ) ; 
 + resolve ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( Exception e ) { 
 + Log . d ( TAG , " hideChat : error " ) ; 
 + reject ( e . getMessage ( ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 / / Peers 
 
 public JsPeer getUserPeer ( int uid ) { 
 @ @ - 858 , 7 + 879 , 7 @ @ public class JsFacade implements Exportable { 
 return JsPromise . create ( new JsPromiseExecutor ( ) { 
 @ Override 
 public void execute ( ) { 
 - String avatarDescriptor = provider . registerUploadFile ( file ) ; 
 + String avatarDescriptor = file ! = null ? provider . registerUploadFile ( file ) : null ; 
 / / noinspection ConstantConditions 
 messenger . createGroup ( title , avatarDescriptor , uids ) . start ( new CommandCallback < Integer > ( ) { 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index b59506e . . 0202f68 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 703 , 6 + 703 , 17 @ @ public class Messenger { 
 } 
 
 / * * 
 + * Hide chat 
 + * 
 + * @ param peer destination peer 
 + * @ return Command for execution 
 + * / 
 + @ ObjectiveCName ( " hideChatCommandWithPeer : " ) 
 + public Command < Boolean > hideChat ( Peer peer ) { 
 + return modules . getMessagesModule ( ) . hideChat ( peer ) ; 
 + } 
 + 
 + / * * 
 * Save message draft 
 * 
 * @ param peer destination peer 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index bfbd171 . . a883a25 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 16 , 6 + 16 , 7 @ @ import im . actor . core . api . ApiPeerType ; 
 import im . actor . core . api . base . SeqUpdate ; 
 import im . actor . core . api . rpc . RequestClearChat ; 
 import im . actor . core . api . rpc . RequestDeleteChat ; 
 + import im . actor . core . api . rpc . RequestHideDialog ; 
 import im . actor . core . api . rpc . ResponseSeq ; 
 import im . actor . core . api . updates . UpdateChatClear ; 
 import im . actor . core . api . updates . UpdateChatDelete ; 
 @ @ - 366 , 7 + 367 , 7 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 @ Override 
 public void start ( final CommandCallback < Boolean > callback ) { 
 ApiOutPeer outPeer ; 
 - final ApiPeer apiPeer ; 
 + final ApiPeer apiPeer = buildApiPeer ( peer ) ; 
 if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; 
 if ( user = = null ) { 
 @ @ - 380 , 8 + 381 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } 
 outPeer = new ApiOutPeer ( ApiPeerType . PRIVATE , user . getUid ( ) , 
 user . getAccessHash ( ) ) ; 
 - apiPeer = new ApiPeer ( ApiPeerType . PRIVATE , 
 - user . getUid ( ) ) ; 
 } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 Group group = groups ( ) . getValue ( peer . getPeerId ( ) ) ; 
 if ( group = = null ) { 
 @ @ - 395 , 8 + 394 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } 
 outPeer = new ApiOutPeer ( ApiPeerType . GROUP , group . getGroupId ( ) , 
 group . getAccessHash ( ) ) ; 
 - apiPeer = new ApiPeer ( ApiPeerType . GROUP , 
 - group . getGroupId ( ) ) ; 
 } else { 
 runOnUiThread ( new Runnable ( ) { 
 @ Override 
 @ @ - 509 , 6 + 506 , 87 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } ; 
 } 
 
 + public Command < Boolean > hideChat ( final Peer peer ) { 
 + return new Command < Boolean > ( ) { 
 + @ Override 
 + public void start ( final CommandCallback < Boolean > callback ) { 
 + ApiOutPeer outPeer ; 
 + final ApiPeer apiPeer ; 
 + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; 
 + if ( user = = null ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( new RpcInternalException ( ) ) ; 
 + } 
 + } ) ; 
 + return ; 
 + } 
 + outPeer = new ApiOutPeer ( ApiPeerType . PRIVATE , user . getUid ( ) , 
 + user . getAccessHash ( ) ) ; 
 + apiPeer = new ApiPeer ( ApiPeerType . PRIVATE , 
 + user . getUid ( ) ) ; 
 + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group group = groups ( ) . getValue ( peer . getPeerId ( ) ) ; 
 + if ( group = = null ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( new RpcInternalException ( ) ) ; 
 + } 
 + } ) ; 
 + return ; 
 + } 
 + outPeer = new ApiOutPeer ( ApiPeerType . GROUP , group . getGroupId ( ) , 
 + group . getAccessHash ( ) ) ; 
 + apiPeer = new ApiPeer ( ApiPeerType . GROUP , 
 + group . getGroupId ( ) ) ; 
 + } else { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( new RpcInternalException ( ) ) ; 
 + } 
 + } ) ; 
 + return ; 
 + } 
 + request ( new RequestHideDialog ( outPeer ) , new RpcCallback < ResponseSeq > ( ) { 
 + @ Override 
 + public void onResult ( ResponseSeq response ) { 
 + / / TODO : Implement ? 
 + / / updates ( ) . onUpdateReceived ( new SeqUpdate ( response . getSeq ( ) , 
 + / / response . getState ( ) , 
 + / / UpdateChatClear . HEADER , 
 + / / new UpdateChatClear ( apiPeer ) . toByteArray ( ) ) ) ; 
 + updates ( ) . executeAfter ( response . getSeq ( ) , 
 + new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onResult ( true ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( final RpcException e ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( e ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + } ; 
 + } 
 + 
 public void resetModule ( ) { 
 / / TODO : Implement 
 }
