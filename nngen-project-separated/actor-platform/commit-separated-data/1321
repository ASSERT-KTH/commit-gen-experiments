BLEU SCORE: 0.1383578944465415

TEST MSG: feat ( js ) : Separated online binding
GENERATED MSG: feat ( core + js ) : Added global and temp global counters

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 04a0cab . . f60dff5 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 574 , 6 + 574 , 20 @ @ public class JsFacade implements Exportable { < nl > messenger . getJsUser ( uid ) . unsubscribe ( callback ) ; < nl > } < nl > < nl > + public void bindUserOnline ( int uid , JsBindedValueCallback callback ) { < nl > + if ( callback = = null ) { < nl > + return ; < nl > + } < nl > + messenger . getJsUserOnline ( uid ) . subscribe ( callback ) ; < nl > + } < nl > + < nl > + public void unbindUserOnline ( int uid , JsBindedValueCallback callback ) { < nl > + if ( callback = = null ) { < nl > + return ; < nl > + } < nl > + messenger . getJsUserOnline ( uid ) . unsubscribe ( callback ) ; < nl > + } < nl > + < nl > / / Groups < nl > < nl > public JsGroup getGroup ( int gid ) { < nl > @ @ - 594 , 6 + 608 , 20 @ @ public class JsFacade implements Exportable { < nl > messenger . getJsGroup ( gid ) . unsubscribe ( callback ) ; < nl > } < nl > < nl > + public void bindGroupOnline ( int gid , JsBindedValueCallback callback ) { < nl > + if ( callback = = null ) { < nl > + return ; < nl > + } < nl > + messenger . getJsGroupOnline ( gid ) . subscribe ( callback ) ; < nl > + } < nl > + < nl > + public void unbindGroupOnline ( int gid , JsBindedValueCallback callback ) { < nl > + if ( callback = = null ) { < nl > + return ; < nl > + } < nl > + messenger . getJsGroupOnline ( gid ) . unsubscribe ( callback ) ; < nl > + } < nl > + < nl > / / Actions < nl > < nl > public void sendMessage ( JsPeer peer , String text ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > index c2097d5 . . f5f7338 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > @ @ - 20 , 6 + 20 , 8 @ @ import im . actor . core . entity . SearchEntity ; < nl > import im . actor . core . entity . content . FastThumb ; < nl > import im . actor . core . js . entity . JsCounter ; < nl > import im . actor . core . js . entity . JsDialogGroup ; < nl > + import im . actor . core . js . entity . JsOnlineGroup ; < nl > + import im . actor . core . js . entity . JsOnlineUser ; < nl > import im . actor . core . js . entity . JsSearchEntity ; < nl > import im . actor . core . js . modules . JsFilesModule ; < nl > import im . actor . core . js . modules . JsBindingModule ; < nl > @ @ - 166 , 10 + 168 , 18 @ @ public class JsMessenger extends Messenger { < nl > return jsBindingModule . getUser ( uid ) ; < nl > } < nl > < nl > + public JsBindedValue < JsOnlineUser > getJsUserOnline ( int gid ) { < nl > + return jsBindingModule . getUserOnline ( gid ) ; < nl > + } < nl > + < nl > public JsBindedValue < JsGroup > getJsGroup ( int gid ) { < nl > return jsBindingModule . getGroup ( gid ) ; < nl > } < nl > < nl > + public JsBindedValue < JsOnlineGroup > getJsGroupOnline ( int gid ) { < nl > + return jsBindingModule . getGroupOnline ( gid ) ; < nl > + } < nl > + < nl > public JsBindedValue < JsTyping > getTyping ( Peer peer ) { < nl > return jsBindingModule . getTyping ( peer ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsOnlineGroup . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsOnlineGroup . java < nl > new file mode 100644 < nl > index 0000000 . . 0bdd505 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsOnlineGroup . java < nl > @ @ - 0 , 0 + 1 , 14 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsOnlineGroup extends JavaScriptObject { < nl > + < nl > + public static native JsOnlineGroup create ( int total , int online , String message , boolean isNotMember ) / * - { < nl > + return { total : total , online : online , message : message , isNotMember : isNotMember } ; < nl > + } - * / ; < nl > + < nl > + protected JsOnlineGroup ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsOnlineUser . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsOnlineUser . java < nl > new file mode 100644 < nl > index 0000000 . . 5045b7c < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsOnlineUser . java < nl > @ @ - 0 , 0 + 1 , 14 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsOnlineUser extends JavaScriptObject { < nl > + < nl > + public static native JsOnlineUser create ( String message , boolean isOnline ) / * - { < nl > + return { message : message , isOnline : isOnline } ; < nl > + } - * / ; < nl > + < nl > + protected JsOnlineUser ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > index 0f7b7a5 . . 2b34e7f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > @ @ - 27 , 6 + 27 , 8 @ @ import im . actor . core . js . entity . JsDialogGroup ; < nl > import im . actor . core . js . entity . JsDialogShort ; < nl > import im . actor . core . js . entity . JsGroup ; < nl > import im . actor . core . js . entity . JsMessage ; < nl > + import im . actor . core . js . entity . JsOnlineGroup ; < nl > + import im . actor . core . js . entity . JsOnlineUser ; < nl > import im . actor . core . js . entity . JsPeerInfo ; < nl > import im . actor . core . js . entity . JsSearchEntity ; < nl > import im . actor . core . js . entity . JsTyping ; < nl > @ @ - 53 , 6 + 55 , 8 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > < nl > private HashMap < Integer , JsBindedValue < JsUser > > users = new HashMap < Integer , JsBindedValue < JsUser > > ( ) ; < nl > private HashMap < Integer , JsBindedValue < JsGroup > > groups = new HashMap < Integer , JsBindedValue < JsGroup > > ( ) ; < nl > + private HashMap < Integer , JsBindedValue < JsOnlineUser > > usersOnlines = new HashMap < Integer , JsBindedValue < JsOnlineUser > > ( ) ; < nl > + private HashMap < Integer , JsBindedValue < JsOnlineGroup > > groupOnlines = new HashMap < Integer , JsBindedValue < JsOnlineGroup > > ( ) ; < nl > private HashMap < Peer , JsBindedValue < JsTyping > > typing = new HashMap < Peer , JsBindedValue < JsTyping > > ( ) ; < nl > private JsBindedValue < String > onlineState ; < nl > < nl > @ @ - 155 , 12 + 159 , 12 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > } , false ) ; < nl > < nl > / / Sign for presence separately < nl > - userVM . getPresence ( ) . subscribe ( new ValueChangedListener < UserPresence > ( ) { < nl > - @ Override < nl > - public void onChanged ( UserPresence val , Value < UserPresence > valueModel ) { < nl > - value . changeValue ( JsUser . fromUserVM ( userVM , messenger ) ) ; < nl > - } < nl > - } , false ) ; < nl > + / / userVM . getPresence ( ) . subscribe ( new ValueChangedListener < UserPresence > ( ) { < nl > + / / @ Override < nl > + / / public void onChanged ( UserPresence val , Value < UserPresence > valueModel ) { < nl > + / / value . changeValue ( JsUser . fromUserVM ( userVM , messenger ) ) ; < nl > + / / } < nl > + / / } , false ) ; < nl > < nl > / / Sign for contact separately < nl > userVM . isContact ( ) . subscribe ( new ValueChangedListener < Boolean > ( ) { < nl > @ @ - 175 , 6 + 179 , 31 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > return users . get ( uid ) ; < nl > } < nl > < nl > + public JsBindedValue < JsOnlineUser > getUserOnline ( int uid ) { < nl > + if ( ! usersOnlines . containsKey ( uid ) ) { < nl > + final JsBindedValue < JsOnlineUser > value = new JsBindedValue < JsOnlineUser > ( ) ; < nl > + final UserVM userVM = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( uid ) ; < nl > + < nl > + userVM . getPresence ( ) . subscribe ( new ValueChangedListener < UserPresence > ( ) { < nl > + @ Override < nl > + public void onChanged ( UserPresence val , Value < UserPresence > valueModel ) { < nl > + if ( val . getState ( ) = = UserPresence . State . UNKNOWN ) { < nl > + value . changeValue ( null ) ; < nl > + } else { < nl > + String presenceString = messenger . getFormatter ( ) . formatPresence ( val , userVM . getSex ( ) ) ; < nl > + if ( userVM . isBot ( ) ) { < nl > + presenceString = " bot " ; < nl > + } < nl > + value . changeValue ( JsOnlineUser . create ( presenceString , val . getState ( ) = = UserPresence . State . ONLINE ) ) ; < nl > + } < nl > + } < nl > + } ) ; < nl > + < nl > + usersOnlines . put ( uid , value ) ; < nl > + } < nl > + return usersOnlines . get ( uid ) ; < nl > + } < nl > + < nl > public JsBindedValue < JsGroup > getGroup ( int gid ) { < nl > if ( ! groups . containsKey ( gid ) ) { < nl > final GroupVM groupVM = context ( ) . getGroupsModule ( ) . getGroupsCollection ( ) . get ( gid ) ; < nl > @ @ - 189 , 15 + 218 , 41 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > } , false ) ; < nl > < nl > / / Sign for presence separately < nl > + / / groupVM . getPresence ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { < nl > + / / @ Override < nl > + / / public void onChanged ( Integer val , Value < Integer > valueModel ) { < nl > + / / value . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; < nl > + / / } < nl > + / / } , false ) ; < nl > + groups . put ( gid , value ) ; < nl > + } < nl > + return groups . get ( gid ) ; < nl > + } < nl > + < nl > + public JsBindedValue < JsOnlineGroup > getGroupOnline ( int gid ) { < nl > + if ( ! groupOnlines . containsKey ( gid ) ) { < nl > + final JsBindedValue < JsOnlineGroup > value = new JsBindedValue < JsOnlineGroup > ( ) ; < nl > + final GroupVM groupVM = context ( ) . getGroupsModule ( ) . getGroupsCollection ( ) . get ( gid ) ; < nl > groupVM . getPresence ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { < nl > @ Override < nl > public void onChanged ( Integer val , Value < Integer > valueModel ) { < nl > - value . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; < nl > + if ( groupVM . isMember ( ) . get ( ) ) { < nl > + if ( val = = null ) { < nl > + value . changeValue ( null ) ; < nl > + return ; < nl > + } < nl > + String presence = messenger . getFormatter ( ) . formatGroupMembers ( groupVM . getMembersCount ( ) ) ; < nl > + if ( val > 0 ) { < nl > + presence + = " , " + messenger . getFormatter ( ) . formatGroupOnline ( val ) ; < nl > + } < nl > + value . changeValue ( JsOnlineGroup . create ( groupVM . getMembersCount ( ) , val , presence , false ) ) ; < nl > + } else { < nl > + value . changeValue ( JsOnlineGroup . create ( 0 , 0 , " Not member " , false ) ) ; < nl > + } < nl > } < nl > - } , false ) ; < nl > - groups . put ( gid , value ) ; < nl > + } ) ; < nl > } < nl > - return groups . get ( gid ) ; < nl > + return groupOnlines . get ( gid ) ; < nl > } < nl > < nl > public JsBindedValue < JsTyping > getTyping ( final Peer peer ) {
NEAREST DIFF (one line): diff - - git a / actor - apps / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - apps / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 000299f . . 4f40119 100644 < nl > - - - a / actor - apps / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - apps / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 417 , 6 + 417 , 22 @ @ public class JsFacade implements Exportable { < nl > messenger . getOnlineStatus ( ) . unsubscribe ( callback ) ; < nl > } < nl > < nl > + public void bindGlobalCounter ( JsBindedValueCallback callback ) { < nl > + messenger . getGlobalCounter ( ) . subscribe ( callback ) ; < nl > + } < nl > + < nl > + public void unbindGlobalCounter ( JsBindedValueCallback callback ) { < nl > + messenger . getGlobalCounter ( ) . unsubscribe ( callback ) ; < nl > + } < nl > + < nl > + public void bindTempGlobalCounter ( JsBindedValueCallback callback ) { < nl > + messenger . getTempGlobalCounter ( ) . subscribe ( callback ) ; < nl > + } < nl > + < nl > + public void unbindTempGlobalCounter ( JsBindedValueCallback callback ) { < nl > + messenger . getTempGlobalCounter ( ) . unsubscribe ( callback ) ; < nl > + } < nl > + < nl > / / Events < nl > < nl > public void onAppVisible ( ) { < nl > diff - - git a / actor - apps / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - apps / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > index a93d641 . . f61bf1f 100644 < nl > - - - a / actor - apps / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > + + + b / actor - apps / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > @ @ - 14 , 6 + 14 , 7 @ @ import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerType ; < nl > import im . actor . core . entity . content . FastThumb ; < nl > + import im . actor . core . js . entity . JsCounter ; < nl > import im . actor . core . js . modules . JsFilesModule ; < nl > import im . actor . core . js . modules . JsBindingModule ; < nl > import im . actor . core . js . modules . JsBindedValue ; < nl > @ @ - 150 , 6 + 151 , 14 @ @ public class JsMessenger extends Messenger { < nl > return jsBindingModule . getOnlineStatus ( ) ; < nl > } < nl > < nl > + public JsBindedValue < JsCounter > getGlobalCounter ( ) { < nl > + return jsBindingModule . getGlobalCounter ( ) ; < nl > + } < nl > + < nl > + public JsBindedValue < JsCounter > getTempGlobalCounter ( ) { < nl > + return jsBindingModule . getTempGlobalCounter ( ) ; < nl > + } < nl > + < nl > public JsPeerInfo buildPeerInfo ( Peer peer ) { < nl > if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > UserVM userVM = getUsers ( ) . get ( peer . getPeerId ( ) ) ; < nl > diff - - git a / actor - apps / core - js / src / main / java / im / actor / core / js / entity / JsCounter . java b / actor - apps / core - js / src / main / java / im / actor / core / js / entity / JsCounter . java < nl > new file mode 100644 < nl > index 0000000 . . 709674e < nl > - - - / dev / null < nl > + + + b / actor - apps / core - js / src / main / java / im / actor / core / js / entity / JsCounter . java < nl > @ @ - 0 , 0 + 1 , 15 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsCounter extends JavaScriptObject { < nl > + < nl > + public static native JsCounter create ( int counter ) / * - { < nl > + return { counter : counter } ; < nl > + } - * / ; < nl > + < nl > + < nl > + protected JsCounter ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - apps / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - apps / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > index 0f74ec0 . . 276284d 100644 < nl > - - - a / actor - apps / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > + + + b / actor - apps / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > @ @ - 16 , 6 + 16 , 7 @ @ import im . actor . core . entity . content . DocumentContent ; < nl > import im . actor . core . entity . content . FileRemoteSource ; < nl > import im . actor . core . js . JsMessenger ; < nl > import im . actor . core . js . entity . JsContact ; < nl > + import im . actor . core . js . entity . JsCounter ; < nl > import im . actor . core . js . entity . JsDialog ; < nl > import im . actor . core . js . entity . JsGroup ; < nl > import im . actor . core . js . entity . JsMessage ; < nl > @ @ - 47 , 6 + 48 , 9 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > private JsDisplayList < JsContact , Contact > contactsList ; < nl > private HashMap < Peer , JsDisplayList < JsMessage , Message > > messageLists = new HashMap < Peer , JsDisplayList < JsMessage , Message > > ( ) ; < nl > < nl > + private JsBindedValue < JsCounter > globalCounter ; < nl > + private JsBindedValue < JsCounter > tempGlobalCounter ; < nl > + < nl > public JsBindingModule ( JsMessenger messenger , JsFilesModule filesModule , Modules modules ) { < nl > super ( modules ) ; < nl > < nl > @ @ - 214 , 6 + 218 , 34 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > return messageLists . get ( peer ) ; < nl > } < nl > < nl > + public JsBindedValue < JsCounter > getGlobalCounter ( ) { < nl > + if ( globalCounter = = null ) { < nl > + ValueModel < Integer > counter = context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalCounter ( ) ; < nl > + globalCounter = new JsBindedValue < JsCounter > ( JsCounter . create ( counter . get ( ) ) ) ; < nl > + counter . subscribe ( new ValueChangedListener < Integer > ( ) { < nl > + @ Override < nl > + public void onChanged ( Integer val , ValueModel < Integer > valueModel ) { < nl > + globalCounter . changeValue ( JsCounter . create ( val ) ) ; < nl > + } < nl > + } , false ) ; < nl > + } < nl > + return globalCounter ; < nl > + } < nl > + < nl > + public JsBindedValue < JsCounter > getTempGlobalCounter ( ) { < nl > + if ( tempGlobalCounter = = null ) { < nl > + ValueModel < Integer > counter = context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalTempCounter ( ) ; < nl > + tempGlobalCounter = new JsBindedValue < JsCounter > ( JsCounter . create ( counter . get ( ) ) ) ; < nl > + counter . subscribe ( new ValueChangedListener < Integer > ( ) { < nl > + @ Override < nl > + public void onChanged ( Integer val , ValueModel < Integer > valueModel ) { < nl > + tempGlobalCounter . changeValue ( JsCounter . create ( val ) ) ; < nl > + } < nl > + } , false ) ; < nl > + } < nl > + return tempGlobalCounter ; < nl > + } < nl > + < nl > @ Override < nl > public void onFileLoaded ( long fileId ) { < nl > if ( dialogsList ! = null ) { < nl > diff - - git a / actor - apps / core / src / main / java / im / actor / core / modules / Authentication . java b / actor - apps / core / src / main / java / im / actor / core / modules / Authentication . java < nl > index e8f990b . . 734bc69 100644 < nl > - - - a / actor - apps / core / src / main / java / im / actor / core / modules / Authentication . java < nl > + + + b / actor - apps / core / src / main / java / im / actor / core / modules / Authentication . java < nl > @ @ - 78 , 6 + 78 , 10 @ @ public class Authentication { < nl > return state ; < nl > } < nl > < nl > + public boolean isLoggedIn ( ) { < nl > + return state = = AuthState . LOGGED _ IN ; < nl > + } < nl > + < nl > public long getPhone ( ) { < nl > return modules . getPreferences ( ) . getLong ( KEY _ PHONE , 0 ) ; < nl > } < nl > diff - - git a / actor - apps / core / src / main / java / im / actor / core / modules / Modules . java b / actor - apps / core / src / main / java / im / actor / core / modules / Modules . java < nl > index b24fa34 . . 5a94a1f 100644 < nl > - - - a / actor - apps / core / src / main / java / im / actor / core / modules / Modules . java < nl > + + + b / actor - apps / core / src / main / java / im / actor / core / modules / Modules . java < nl > @ @ - 295 , 18 + 295 , 20 @ @ public class Modules implements ModuleContext { < nl > isAppVisible = true ; < nl > actorApi . forceNetworkCheck ( ) ; < nl > analytics . trackAppVisible ( ) ; < nl > - if ( getPresenceModule ( ) ! = null ) { < nl > + if ( authentication . isLoggedIn ( ) ) { < nl > getPresenceModule ( ) . onAppVisible ( ) ; < nl > getNotificationsModule ( ) . onAppVisible ( ) ; < nl > + appStateModule . getAppStateVM ( ) . onAppVisible ( ) ; < nl > } < nl > } < nl > < nl > public void onAppHidden ( ) { < nl > isAppVisible = false ; < nl > analytics . trackAppHidden ( ) ; < nl > - if ( getPresenceModule ( ) ! = null ) { < nl > + if ( authentication . isLoggedIn ( ) ) { < nl > getPresenceModule ( ) . onAppHidden ( ) ; < nl > getNotificationsModule ( ) . onAppHidden ( ) ; < nl > + appStateModule . getAppStateVM ( ) . onAppHidden ( ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - apps / core / src / main / java / im / actor / core / viewmodel / AppStateVM . java b / actor - apps / core / src / main / java / im / actor / core / viewmodel / AppStateVM . java < nl > index ccf7947 . . dc2f159 100644 < nl > - - - a / actor - apps / core / src / main / java / im / actor / core / viewmodel / AppStateVM . java < nl > + + + b / actor - apps / core / src / main / java / im / actor / core / viewmodel / AppStateVM . java < nl > @ @ - 12 , 6 + 12 , 7 @ @ import im . actor . runtime . mvvm . ValueModel ; < nl > * / < nl > public class AppStateVM { < nl > private ModuleContext context ; < nl > + private ValueModel < Boolean > isAppVisible ; < nl > private ValueModel < Boolean > isDialogsEmpty ; < nl > private ValueModel < Boolean > isContactsEmpty ; < nl > private ValueModel < Boolean > isAppEmpty ; < nl > @ @ - 19 , 6 + 20 , 7 @ @ public class AppStateVM { < nl > private ValueModel < Boolean > isConnecting ; < nl > private ValueModel < Boolean > isSyncing ; < nl > private ValueModel < Integer > globalCounter ; < nl > + private ValueModel < Integer > globalTempCounter ; < nl > < nl > private boolean isBookImported ; < nl > private boolean isDialogsLoaded ; < nl > @ @ - 35 , 8 + 37 , 10 @ @ public class AppStateVM { < nl > this . isContactsEmpty = new ValueModel < Boolean > ( " app . contacts . empty " , context . getPreferences ( ) . getBool ( " app . contacts . empty " , true ) ) ; < nl > this . isAppEmpty = new ValueModel < Boolean > ( " app . empty " , context . getPreferences ( ) . getBool ( " app . empty " , true ) ) ; < nl > this . globalCounter = new ValueModel < Integer > ( " app . counter " , context . getPreferences ( ) . getInt ( " app . counter " , 0 ) ) ; < nl > + this . globalTempCounter = new ValueModel < Integer > ( " app . temp _ counter " , 0 ) ; < nl > this . isConnecting = new ValueModel < Boolean > ( " app . connecting " , false ) ; < nl > this . isSyncing = new ValueModel < Boolean > ( " app . syncing " , false ) ; < nl > + this . isAppVisible = new ValueModel < Boolean > ( " app . visible " , false ) ; < nl > < nl > this . isBookImported = context . getPreferences ( ) . getBool ( " app . contacts . imported " , false ) ; < nl > this . isDialogsLoaded = context . getPreferences ( ) . getBool ( " app . dialogs . loaded " , false ) ; < nl > @ @ - 60 , 6 + 64 , 24 @ @ public class AppStateVM { < nl > public synchronized void onGlobalCounterChanged ( int value ) { < nl > globalCounter . change ( value ) ; < nl > context . getPreferences ( ) . putInt ( " app . counter " , value ) ; < nl > + if ( ! isAppVisible . get ( ) ) { < nl > + globalTempCounter . change ( value ) ; < nl > + } < nl > + } < nl > + < nl > + / * * < nl > + * Notify when app become visible < nl > + * / < nl > + public synchronized void onAppVisible ( ) { < nl > + isAppVisible . change ( true ) ; < nl > + globalTempCounter . change ( 0 ) ; < nl > + } < nl > + < nl > + / * * < nl > + * Notify when app become hidden < nl > + * / < nl > + public synchronized void onAppHidden ( ) { < nl > + isAppVisible . change ( false ) ; < nl > } < nl > < nl > / * * < nl > @ @ - 189 , 9 + 211 , 27 @ @ public class AppStateVM { < nl > / * * < nl > * Gettting global unread counter < nl > * < nl > - * @ return View Model of Integers < nl > + * @ return View Model of Integer < nl > * / < nl > public ValueModel < Integer > getGlobalCounter ( ) { < nl > return globalCounter ; < nl > } < nl > + < nl > + / * * < nl > + * Getting global unread counter that hiddes when app is opened < nl > + * < nl > + * @ return View Model of Integer < nl > + * / < nl > + public ValueModel < Integer > getGlobalTempCounter ( ) { < nl > + return globalTempCounter ; < nl > + } < nl > + < nl > + / * * < nl > + * Is App visible state < nl > + * < nl > + * @ return View Model of Boolean < nl > + * / < nl > + public ValueModel < Boolean > getIsAppVisible ( ) { < nl > + return isAppVisible ; < nl > + } < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 04a0cab . . f60dff5 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 574 , 6 + 574 , 20 @ @ public class JsFacade implements Exportable { 
 messenger . getJsUser ( uid ) . unsubscribe ( callback ) ; 
 } 
 
 + public void bindUserOnline ( int uid , JsBindedValueCallback callback ) { 
 + if ( callback = = null ) { 
 + return ; 
 + } 
 + messenger . getJsUserOnline ( uid ) . subscribe ( callback ) ; 
 + } 
 + 
 + public void unbindUserOnline ( int uid , JsBindedValueCallback callback ) { 
 + if ( callback = = null ) { 
 + return ; 
 + } 
 + messenger . getJsUserOnline ( uid ) . unsubscribe ( callback ) ; 
 + } 
 + 
 / / Groups 
 
 public JsGroup getGroup ( int gid ) { 
 @ @ - 594 , 6 + 608 , 20 @ @ public class JsFacade implements Exportable { 
 messenger . getJsGroup ( gid ) . unsubscribe ( callback ) ; 
 } 
 
 + public void bindGroupOnline ( int gid , JsBindedValueCallback callback ) { 
 + if ( callback = = null ) { 
 + return ; 
 + } 
 + messenger . getJsGroupOnline ( gid ) . subscribe ( callback ) ; 
 + } 
 + 
 + public void unbindGroupOnline ( int gid , JsBindedValueCallback callback ) { 
 + if ( callback = = null ) { 
 + return ; 
 + } 
 + messenger . getJsGroupOnline ( gid ) . unsubscribe ( callback ) ; 
 + } 
 + 
 / / Actions 
 
 public void sendMessage ( JsPeer peer , String text ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 index c2097d5 . . f5f7338 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 @ @ - 20 , 6 + 20 , 8 @ @ import im . actor . core . entity . SearchEntity ; 
 import im . actor . core . entity . content . FastThumb ; 
 import im . actor . core . js . entity . JsCounter ; 
 import im . actor . core . js . entity . JsDialogGroup ; 
 + import im . actor . core . js . entity . JsOnlineGroup ; 
 + import im . actor . core . js . entity . JsOnlineUser ; 
 import im . actor . core . js . entity . JsSearchEntity ; 
 import im . actor . core . js . modules . JsFilesModule ; 
 import im . actor . core . js . modules . JsBindingModule ; 
 @ @ - 166 , 10 + 168 , 18 @ @ public class JsMessenger extends Messenger { 
 return jsBindingModule . getUser ( uid ) ; 
 } 
 
 + public JsBindedValue < JsOnlineUser > getJsUserOnline ( int gid ) { 
 + return jsBindingModule . getUserOnline ( gid ) ; 
 + } 
 + 
 public JsBindedValue < JsGroup > getJsGroup ( int gid ) { 
 return jsBindingModule . getGroup ( gid ) ; 
 } 
 
 + public JsBindedValue < JsOnlineGroup > getJsGroupOnline ( int gid ) { 
 + return jsBindingModule . getGroupOnline ( gid ) ; 
 + } 
 + 
 public JsBindedValue < JsTyping > getTyping ( Peer peer ) { 
 return jsBindingModule . getTyping ( peer ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsOnlineGroup . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsOnlineGroup . java 
 new file mode 100644 
 index 0000000 . . 0bdd505 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsOnlineGroup . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsOnlineGroup extends JavaScriptObject { 
 + 
 + public static native JsOnlineGroup create ( int total , int online , String message , boolean isNotMember ) / * - { 
 + return { total : total , online : online , message : message , isNotMember : isNotMember } ; 
 + } - * / ; 
 + 
 + protected JsOnlineGroup ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsOnlineUser . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsOnlineUser . java 
 new file mode 100644 
 index 0000000 . . 5045b7c 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsOnlineUser . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsOnlineUser extends JavaScriptObject { 
 + 
 + public static native JsOnlineUser create ( String message , boolean isOnline ) / * - { 
 + return { message : message , isOnline : isOnline } ; 
 + } - * / ; 
 + 
 + protected JsOnlineUser ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 index 0f7b7a5 . . 2b34e7f 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 @ @ - 27 , 6 + 27 , 8 @ @ import im . actor . core . js . entity . JsDialogGroup ; 
 import im . actor . core . js . entity . JsDialogShort ; 
 import im . actor . core . js . entity . JsGroup ; 
 import im . actor . core . js . entity . JsMessage ; 
 + import im . actor . core . js . entity . JsOnlineGroup ; 
 + import im . actor . core . js . entity . JsOnlineUser ; 
 import im . actor . core . js . entity . JsPeerInfo ; 
 import im . actor . core . js . entity . JsSearchEntity ; 
 import im . actor . core . js . entity . JsTyping ; 
 @ @ - 53 , 6 + 55 , 8 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 
 private HashMap < Integer , JsBindedValue < JsUser > > users = new HashMap < Integer , JsBindedValue < JsUser > > ( ) ; 
 private HashMap < Integer , JsBindedValue < JsGroup > > groups = new HashMap < Integer , JsBindedValue < JsGroup > > ( ) ; 
 + private HashMap < Integer , JsBindedValue < JsOnlineUser > > usersOnlines = new HashMap < Integer , JsBindedValue < JsOnlineUser > > ( ) ; 
 + private HashMap < Integer , JsBindedValue < JsOnlineGroup > > groupOnlines = new HashMap < Integer , JsBindedValue < JsOnlineGroup > > ( ) ; 
 private HashMap < Peer , JsBindedValue < JsTyping > > typing = new HashMap < Peer , JsBindedValue < JsTyping > > ( ) ; 
 private JsBindedValue < String > onlineState ; 
 
 @ @ - 155 , 12 + 159 , 12 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 } , false ) ; 
 
 / / Sign for presence separately 
 - userVM . getPresence ( ) . subscribe ( new ValueChangedListener < UserPresence > ( ) { 
 - @ Override 
 - public void onChanged ( UserPresence val , Value < UserPresence > valueModel ) { 
 - value . changeValue ( JsUser . fromUserVM ( userVM , messenger ) ) ; 
 - } 
 - } , false ) ; 
 + / / userVM . getPresence ( ) . subscribe ( new ValueChangedListener < UserPresence > ( ) { 
 + / / @ Override 
 + / / public void onChanged ( UserPresence val , Value < UserPresence > valueModel ) { 
 + / / value . changeValue ( JsUser . fromUserVM ( userVM , messenger ) ) ; 
 + / / } 
 + / / } , false ) ; 
 
 / / Sign for contact separately 
 userVM . isContact ( ) . subscribe ( new ValueChangedListener < Boolean > ( ) { 
 @ @ - 175 , 6 + 179 , 31 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 return users . get ( uid ) ; 
 } 
 
 + public JsBindedValue < JsOnlineUser > getUserOnline ( int uid ) { 
 + if ( ! usersOnlines . containsKey ( uid ) ) { 
 + final JsBindedValue < JsOnlineUser > value = new JsBindedValue < JsOnlineUser > ( ) ; 
 + final UserVM userVM = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( uid ) ; 
 + 
 + userVM . getPresence ( ) . subscribe ( new ValueChangedListener < UserPresence > ( ) { 
 + @ Override 
 + public void onChanged ( UserPresence val , Value < UserPresence > valueModel ) { 
 + if ( val . getState ( ) = = UserPresence . State . UNKNOWN ) { 
 + value . changeValue ( null ) ; 
 + } else { 
 + String presenceString = messenger . getFormatter ( ) . formatPresence ( val , userVM . getSex ( ) ) ; 
 + if ( userVM . isBot ( ) ) { 
 + presenceString = " bot " ; 
 + } 
 + value . changeValue ( JsOnlineUser . create ( presenceString , val . getState ( ) = = UserPresence . State . ONLINE ) ) ; 
 + } 
 + } 
 + } ) ; 
 + 
 + usersOnlines . put ( uid , value ) ; 
 + } 
 + return usersOnlines . get ( uid ) ; 
 + } 
 + 
 public JsBindedValue < JsGroup > getGroup ( int gid ) { 
 if ( ! groups . containsKey ( gid ) ) { 
 final GroupVM groupVM = context ( ) . getGroupsModule ( ) . getGroupsCollection ( ) . get ( gid ) ; 
 @ @ - 189 , 15 + 218 , 41 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 } , false ) ; 
 
 / / Sign for presence separately 
 + / / groupVM . getPresence ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { 
 + / / @ Override 
 + / / public void onChanged ( Integer val , Value < Integer > valueModel ) { 
 + / / value . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; 
 + / / } 
 + / / } , false ) ; 
 + groups . put ( gid , value ) ; 
 + } 
 + return groups . get ( gid ) ; 
 + } 
 + 
 + public JsBindedValue < JsOnlineGroup > getGroupOnline ( int gid ) { 
 + if ( ! groupOnlines . containsKey ( gid ) ) { 
 + final JsBindedValue < JsOnlineGroup > value = new JsBindedValue < JsOnlineGroup > ( ) ; 
 + final GroupVM groupVM = context ( ) . getGroupsModule ( ) . getGroupsCollection ( ) . get ( gid ) ; 
 groupVM . getPresence ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { 
 @ Override 
 public void onChanged ( Integer val , Value < Integer > valueModel ) { 
 - value . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; 
 + if ( groupVM . isMember ( ) . get ( ) ) { 
 + if ( val = = null ) { 
 + value . changeValue ( null ) ; 
 + return ; 
 + } 
 + String presence = messenger . getFormatter ( ) . formatGroupMembers ( groupVM . getMembersCount ( ) ) ; 
 + if ( val > 0 ) { 
 + presence + = " , " + messenger . getFormatter ( ) . formatGroupOnline ( val ) ; 
 + } 
 + value . changeValue ( JsOnlineGroup . create ( groupVM . getMembersCount ( ) , val , presence , false ) ) ; 
 + } else { 
 + value . changeValue ( JsOnlineGroup . create ( 0 , 0 , " Not member " , false ) ) ; 
 + } 
 } 
 - } , false ) ; 
 - groups . put ( gid , value ) ; 
 + } ) ; 
 } 
 - return groups . get ( gid ) ; 
 + return groupOnlines . get ( gid ) ; 
 } 
 
 public JsBindedValue < JsTyping > getTyping ( final Peer peer ) {

NEAREST DIFF:
diff - - git a / actor - apps / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - apps / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 000299f . . 4f40119 100644 
 - - - a / actor - apps / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - apps / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 417 , 6 + 417 , 22 @ @ public class JsFacade implements Exportable { 
 messenger . getOnlineStatus ( ) . unsubscribe ( callback ) ; 
 } 
 
 + public void bindGlobalCounter ( JsBindedValueCallback callback ) { 
 + messenger . getGlobalCounter ( ) . subscribe ( callback ) ; 
 + } 
 + 
 + public void unbindGlobalCounter ( JsBindedValueCallback callback ) { 
 + messenger . getGlobalCounter ( ) . unsubscribe ( callback ) ; 
 + } 
 + 
 + public void bindTempGlobalCounter ( JsBindedValueCallback callback ) { 
 + messenger . getTempGlobalCounter ( ) . subscribe ( callback ) ; 
 + } 
 + 
 + public void unbindTempGlobalCounter ( JsBindedValueCallback callback ) { 
 + messenger . getTempGlobalCounter ( ) . unsubscribe ( callback ) ; 
 + } 
 + 
 / / Events 
 
 public void onAppVisible ( ) { 
 diff - - git a / actor - apps / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - apps / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 index a93d641 . . f61bf1f 100644 
 - - - a / actor - apps / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 + + + b / actor - apps / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 @ @ - 14 , 6 + 14 , 7 @ @ import im . actor . core . entity . Message ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerType ; 
 import im . actor . core . entity . content . FastThumb ; 
 + import im . actor . core . js . entity . JsCounter ; 
 import im . actor . core . js . modules . JsFilesModule ; 
 import im . actor . core . js . modules . JsBindingModule ; 
 import im . actor . core . js . modules . JsBindedValue ; 
 @ @ - 150 , 6 + 151 , 14 @ @ public class JsMessenger extends Messenger { 
 return jsBindingModule . getOnlineStatus ( ) ; 
 } 
 
 + public JsBindedValue < JsCounter > getGlobalCounter ( ) { 
 + return jsBindingModule . getGlobalCounter ( ) ; 
 + } 
 + 
 + public JsBindedValue < JsCounter > getTempGlobalCounter ( ) { 
 + return jsBindingModule . getTempGlobalCounter ( ) ; 
 + } 
 + 
 public JsPeerInfo buildPeerInfo ( Peer peer ) { 
 if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 UserVM userVM = getUsers ( ) . get ( peer . getPeerId ( ) ) ; 
 diff - - git a / actor - apps / core - js / src / main / java / im / actor / core / js / entity / JsCounter . java b / actor - apps / core - js / src / main / java / im / actor / core / js / entity / JsCounter . java 
 new file mode 100644 
 index 0000000 . . 709674e 
 - - - / dev / null 
 + + + b / actor - apps / core - js / src / main / java / im / actor / core / js / entity / JsCounter . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsCounter extends JavaScriptObject { 
 + 
 + public static native JsCounter create ( int counter ) / * - { 
 + return { counter : counter } ; 
 + } - * / ; 
 + 
 + 
 + protected JsCounter ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - apps / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - apps / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 index 0f74ec0 . . 276284d 100644 
 - - - a / actor - apps / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 + + + b / actor - apps / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 @ @ - 16 , 6 + 16 , 7 @ @ import im . actor . core . entity . content . DocumentContent ; 
 import im . actor . core . entity . content . FileRemoteSource ; 
 import im . actor . core . js . JsMessenger ; 
 import im . actor . core . js . entity . JsContact ; 
 + import im . actor . core . js . entity . JsCounter ; 
 import im . actor . core . js . entity . JsDialog ; 
 import im . actor . core . js . entity . JsGroup ; 
 import im . actor . core . js . entity . JsMessage ; 
 @ @ - 47 , 6 + 48 , 9 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 private JsDisplayList < JsContact , Contact > contactsList ; 
 private HashMap < Peer , JsDisplayList < JsMessage , Message > > messageLists = new HashMap < Peer , JsDisplayList < JsMessage , Message > > ( ) ; 
 
 + private JsBindedValue < JsCounter > globalCounter ; 
 + private JsBindedValue < JsCounter > tempGlobalCounter ; 
 + 
 public JsBindingModule ( JsMessenger messenger , JsFilesModule filesModule , Modules modules ) { 
 super ( modules ) ; 
 
 @ @ - 214 , 6 + 218 , 34 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 return messageLists . get ( peer ) ; 
 } 
 
 + public JsBindedValue < JsCounter > getGlobalCounter ( ) { 
 + if ( globalCounter = = null ) { 
 + ValueModel < Integer > counter = context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalCounter ( ) ; 
 + globalCounter = new JsBindedValue < JsCounter > ( JsCounter . create ( counter . get ( ) ) ) ; 
 + counter . subscribe ( new ValueChangedListener < Integer > ( ) { 
 + @ Override 
 + public void onChanged ( Integer val , ValueModel < Integer > valueModel ) { 
 + globalCounter . changeValue ( JsCounter . create ( val ) ) ; 
 + } 
 + } , false ) ; 
 + } 
 + return globalCounter ; 
 + } 
 + 
 + public JsBindedValue < JsCounter > getTempGlobalCounter ( ) { 
 + if ( tempGlobalCounter = = null ) { 
 + ValueModel < Integer > counter = context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalTempCounter ( ) ; 
 + tempGlobalCounter = new JsBindedValue < JsCounter > ( JsCounter . create ( counter . get ( ) ) ) ; 
 + counter . subscribe ( new ValueChangedListener < Integer > ( ) { 
 + @ Override 
 + public void onChanged ( Integer val , ValueModel < Integer > valueModel ) { 
 + tempGlobalCounter . changeValue ( JsCounter . create ( val ) ) ; 
 + } 
 + } , false ) ; 
 + } 
 + return tempGlobalCounter ; 
 + } 
 + 
 @ Override 
 public void onFileLoaded ( long fileId ) { 
 if ( dialogsList ! = null ) { 
 diff - - git a / actor - apps / core / src / main / java / im / actor / core / modules / Authentication . java b / actor - apps / core / src / main / java / im / actor / core / modules / Authentication . java 
 index e8f990b . . 734bc69 100644 
 - - - a / actor - apps / core / src / main / java / im / actor / core / modules / Authentication . java 
 + + + b / actor - apps / core / src / main / java / im / actor / core / modules / Authentication . java 
 @ @ - 78 , 6 + 78 , 10 @ @ public class Authentication { 
 return state ; 
 } 
 
 + public boolean isLoggedIn ( ) { 
 + return state = = AuthState . LOGGED _ IN ; 
 + } 
 + 
 public long getPhone ( ) { 
 return modules . getPreferences ( ) . getLong ( KEY _ PHONE , 0 ) ; 
 } 
 diff - - git a / actor - apps / core / src / main / java / im / actor / core / modules / Modules . java b / actor - apps / core / src / main / java / im / actor / core / modules / Modules . java 
 index b24fa34 . . 5a94a1f 100644 
 - - - a / actor - apps / core / src / main / java / im / actor / core / modules / Modules . java 
 + + + b / actor - apps / core / src / main / java / im / actor / core / modules / Modules . java 
 @ @ - 295 , 18 + 295 , 20 @ @ public class Modules implements ModuleContext { 
 isAppVisible = true ; 
 actorApi . forceNetworkCheck ( ) ; 
 analytics . trackAppVisible ( ) ; 
 - if ( getPresenceModule ( ) ! = null ) { 
 + if ( authentication . isLoggedIn ( ) ) { 
 getPresenceModule ( ) . onAppVisible ( ) ; 
 getNotificationsModule ( ) . onAppVisible ( ) ; 
 + appStateModule . getAppStateVM ( ) . onAppVisible ( ) ; 
 } 
 } 
 
 public void onAppHidden ( ) { 
 isAppVisible = false ; 
 analytics . trackAppHidden ( ) ; 
 - if ( getPresenceModule ( ) ! = null ) { 
 + if ( authentication . isLoggedIn ( ) ) { 
 getPresenceModule ( ) . onAppHidden ( ) ; 
 getNotificationsModule ( ) . onAppHidden ( ) ; 
 + appStateModule . getAppStateVM ( ) . onAppHidden ( ) ; 
 } 
 } 
 
 diff - - git a / actor - apps / core / src / main / java / im / actor / core / viewmodel / AppStateVM . java b / actor - apps / core / src / main / java / im / actor / core / viewmodel / AppStateVM . java 
 index ccf7947 . . dc2f159 100644 
 - - - a / actor - apps / core / src / main / java / im / actor / core / viewmodel / AppStateVM . java 
 + + + b / actor - apps / core / src / main / java / im / actor / core / viewmodel / AppStateVM . java 
 @ @ - 12 , 6 + 12 , 7 @ @ import im . actor . runtime . mvvm . ValueModel ; 
 * / 
 public class AppStateVM { 
 private ModuleContext context ; 
 + private ValueModel < Boolean > isAppVisible ; 
 private ValueModel < Boolean > isDialogsEmpty ; 
 private ValueModel < Boolean > isContactsEmpty ; 
 private ValueModel < Boolean > isAppEmpty ; 
 @ @ - 19 , 6 + 20 , 7 @ @ public class AppStateVM { 
 private ValueModel < Boolean > isConnecting ; 
 private ValueModel < Boolean > isSyncing ; 
 private ValueModel < Integer > globalCounter ; 
 + private ValueModel < Integer > globalTempCounter ; 
 
 private boolean isBookImported ; 
 private boolean isDialogsLoaded ; 
 @ @ - 35 , 8 + 37 , 10 @ @ public class AppStateVM { 
 this . isContactsEmpty = new ValueModel < Boolean > ( " app . contacts . empty " , context . getPreferences ( ) . getBool ( " app . contacts . empty " , true ) ) ; 
 this . isAppEmpty = new ValueModel < Boolean > ( " app . empty " , context . getPreferences ( ) . getBool ( " app . empty " , true ) ) ; 
 this . globalCounter = new ValueModel < Integer > ( " app . counter " , context . getPreferences ( ) . getInt ( " app . counter " , 0 ) ) ; 
 + this . globalTempCounter = new ValueModel < Integer > ( " app . temp _ counter " , 0 ) ; 
 this . isConnecting = new ValueModel < Boolean > ( " app . connecting " , false ) ; 
 this . isSyncing = new ValueModel < Boolean > ( " app . syncing " , false ) ; 
 + this . isAppVisible = new ValueModel < Boolean > ( " app . visible " , false ) ; 
 
 this . isBookImported = context . getPreferences ( ) . getBool ( " app . contacts . imported " , false ) ; 
 this . isDialogsLoaded = context . getPreferences ( ) . getBool ( " app . dialogs . loaded " , false ) ; 
 @ @ - 60 , 6 + 64 , 24 @ @ public class AppStateVM { 
 public synchronized void onGlobalCounterChanged ( int value ) { 
 globalCounter . change ( value ) ; 
 context . getPreferences ( ) . putInt ( " app . counter " , value ) ; 
 + if ( ! isAppVisible . get ( ) ) { 
 + globalTempCounter . change ( value ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Notify when app become visible 
 + * / 
 + public synchronized void onAppVisible ( ) { 
 + isAppVisible . change ( true ) ; 
 + globalTempCounter . change ( 0 ) ; 
 + } 
 + 
 + / * * 
 + * Notify when app become hidden 
 + * / 
 + public synchronized void onAppHidden ( ) { 
 + isAppVisible . change ( false ) ; 
 } 
 
 / * * 
 @ @ - 189 , 9 + 211 , 27 @ @ public class AppStateVM { 
 / * * 
 * Gettting global unread counter 
 * 
 - * @ return View Model of Integers 
 + * @ return View Model of Integer 
 * / 
 public ValueModel < Integer > getGlobalCounter ( ) { 
 return globalCounter ; 
 } 
 + 
 + / * * 
 + * Getting global unread counter that hiddes when app is opened 
 + * 
 + * @ return View Model of Integer 
 + * / 
 + public ValueModel < Integer > getGlobalTempCounter ( ) { 
 + return globalTempCounter ; 
 + } 
 + 
 + / * * 
 + * Is App visible state 
 + * 
 + * @ return View Model of Boolean 
 + * / 
 + public ValueModel < Boolean > getIsAppVisible ( ) { 
 + return isAppVisible ; 
 + } 
 }
