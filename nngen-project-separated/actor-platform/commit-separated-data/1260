BLEU SCORE: 1.0

TEST MSG: Update key - creation . md
GENERATED MSG: Update key - creation . md

TEST DIFF (one line): diff - - git a / docs / protocol / key - creation . md b / docs / protocol / key - creation . md < nl > index 721ce12 . . 958f35a 100644 < nl > - - - a / docs / protocol / key - creation . md < nl > + + + b / docs / protocol / key - creation . md < nl > @ @ - 28 , 22 + 28 , 6 @ @ P _ SHA256 ( secret , seed ) = SHA256 ( secret , A ( 1 ) + seed ) + SHA256 ( secret , A ( 2 ) + see < nl > < nl > Original key is too short - only 32 bytes and we need to extend key to more bytes in a secure way . Pseudo - code above is taken from TLS 1 . 2 RFC . Basic idea is to take some plain - text seed from client and server , add some fixed seed to avoid getting same hashes in different parts of a program . We use client and server seed for protecting from not that good random generators . Using text as fixed seed value is for cleaner code and specifications . In our Implementation we are performing * * 8 * * SHA256 calculations . < nl > < nl > - # Changes in Transport ' s Package < nl > - < nl > - Adding new ` ` ` signature ` ` ` field for signing each package . Depends on authId server will use signature or not . < nl > - ` ` ` < nl > - Package { < nl > - / / unique identifier that is constant thru all application lifetime < nl > - authId : long < nl > - / / random identifier of current session < nl > - sessionId : long < nl > - / / message < nl > - message : Message < nl > - / / signature < nl > - signature : bytes < nl > - } < nl > - ` ` ` < nl > - < nl > # New Requesting Authentication Key < nl > Old method of AuthId creation will continue to work , but rev3 introduces new way of more secure way to get AuthId and AuthKey .
NEAREST DIFF (one line): diff - - git a / docs / protocol / key - creation . md b / docs / protocol / key - creation . md < nl > index 96cd3e8 . . 0d6ca1f 100644 < nl > - - - a / docs / protocol / key - creation . md < nl > + + + b / docs / protocol / key - creation . md < nl > @ @ - 72 , 8 + 72 , 8 @ @ RequestStartDH { < nl > / / Used keyId for Diffie - Hellman start < nl > keyId : long < nl > < nl > - / / DH parameter used for encryption < nl > - dh _ x : bytes < nl > + / / Client ' s key used for encryption < nl > + clientKey : bytes < nl > / / Encrypted DH request < nl > encrypted : bytes < nl > }

TEST DIFF:
diff - - git a / docs / protocol / key - creation . md b / docs / protocol / key - creation . md 
 index 721ce12 . . 958f35a 100644 
 - - - a / docs / protocol / key - creation . md 
 + + + b / docs / protocol / key - creation . md 
 @ @ - 28 , 22 + 28 , 6 @ @ P _ SHA256 ( secret , seed ) = SHA256 ( secret , A ( 1 ) + seed ) + SHA256 ( secret , A ( 2 ) + see 
 
 Original key is too short - only 32 bytes and we need to extend key to more bytes in a secure way . Pseudo - code above is taken from TLS 1 . 2 RFC . Basic idea is to take some plain - text seed from client and server , add some fixed seed to avoid getting same hashes in different parts of a program . We use client and server seed for protecting from not that good random generators . Using text as fixed seed value is for cleaner code and specifications . In our Implementation we are performing * * 8 * * SHA256 calculations . 
 
 - # Changes in Transport ' s Package 
 - 
 - Adding new ` ` ` signature ` ` ` field for signing each package . Depends on authId server will use signature or not . 
 - ` ` ` 
 - Package { 
 - / / unique identifier that is constant thru all application lifetime 
 - authId : long 
 - / / random identifier of current session 
 - sessionId : long 
 - / / message 
 - message : Message 
 - / / signature 
 - signature : bytes 
 - } 
 - ` ` ` 
 - 
 # New Requesting Authentication Key 
 Old method of AuthId creation will continue to work , but rev3 introduces new way of more secure way to get AuthId and AuthKey .

NEAREST DIFF:
diff - - git a / docs / protocol / key - creation . md b / docs / protocol / key - creation . md 
 index 96cd3e8 . . 0d6ca1f 100644 
 - - - a / docs / protocol / key - creation . md 
 + + + b / docs / protocol / key - creation . md 
 @ @ - 72 , 8 + 72 , 8 @ @ RequestStartDH { 
 / / Used keyId for Diffie - Hellman start 
 keyId : long 
 
 - / / DH parameter used for encryption 
 - dh _ x : bytes 
 + / / Client ' s key used for encryption 
 + clientKey : bytes 
 / / Encrypted DH request 
 encrypted : bytes 
 }
