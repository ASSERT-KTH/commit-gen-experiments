BLEU SCORE: 0.09287528999566796

TEST MSG: feat ( runtime ) : Fixing Memory Leaking in scheduler
GENERATED MSG: perf ( core ) : Precached Kuznechik encryption tables

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaDispatcher . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaDispatcher . swift < nl > index 9f937f0 . . dd25624 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaDispatcher . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaDispatcher . swift < nl > @ @ - 6 , 9 + 6 , 17 @ @ import Foundation < nl > < nl > class CocoaDispatcher : NSObject , ARCocoaDispatcherProxy { < nl > < nl > - func dispatchOnBackgroundWithJavaLangRunnable ( runnable : JavaLangRunnable ! , withLong delay : jlong ) { < nl > + func dispatchOnBackground ( runnable : JavaLangRunnable ! , withDelay delay : jlong ) - > ARDispatchCancel ! { < nl > dispatchBackgroundDelayed ( Double ( delay ) / 1000 ) { ( ) - > Void in < nl > runnable . run ( ) < nl > } < nl > + return DispatchCancel ( ) < nl > + } < nl > + } < nl > + < nl > + private class DispatchCancel : NSObject , ARDispatchCancel { < nl > + < nl > + @ objc private func cancel ( ) { < nl > + / / Do Nothing < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / threading / AndroidDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / threading / AndroidDispatcher . java < nl > index ee85146 . . ff03601 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / threading / AndroidDispatcher . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / threading / AndroidDispatcher . java < nl > @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . runtime . android . threading ; < nl > import android . os . Handler ; < nl > import android . os . HandlerThread ; < nl > < nl > + import im . actor . runtime . threading . DispatchCancel ; < nl > import im . actor . runtime . threading . Dispatcher ; < nl > < nl > public class AndroidDispatcher implements Dispatcher { < nl > @ @ - 23 , 7 + 24 , 13 @ @ public class AndroidDispatcher implements Dispatcher { < nl > } < nl > < nl > @ Override < nl > - public void dispatch ( Runnable message , long delay ) { < nl > + public DispatchCancel dispatch ( Runnable message , long delay ) { < nl > handler . postDelayed ( message , delay ) ; < nl > + return new DispatchCancel ( ) { < nl > + @ Override < nl > + public void cancel ( ) { < nl > + / / Do Nothing < nl > + } < nl > + } ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / threading / CocoaDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / threading / CocoaDispatcher . java < nl > index 910cc92 . . 450bf34 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / threading / CocoaDispatcher . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / threading / CocoaDispatcher . java < nl > @ @ - 1 , 5 + 1 , 6 @ @ < nl > package im . actor . runtime . cocoa . threading ; < nl > < nl > + import im . actor . runtime . threading . DispatchCancel ; < nl > import im . actor . runtime . threading . Dispatcher ; < nl > < nl > public class CocoaDispatcher implements Dispatcher { < nl > @ @ - 15 , 7 + 16 , 7 @ @ public class CocoaDispatcher implements Dispatcher { < nl > } < nl > < nl > @ Override < nl > - public void dispatch ( Runnable message , long delay ) { < nl > - dispatcherProxy . dispatchOnBackground ( message , delay ) ; < nl > + public DispatchCancel dispatch ( Runnable message , long delay ) { < nl > + return dispatcherProxy . dispatchOnBackground ( message , delay ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / threading / CocoaDispatcherProxy . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / threading / CocoaDispatcherProxy . java < nl > index 0c1aa73 . . a0d9352 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / threading / CocoaDispatcherProxy . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / threading / CocoaDispatcherProxy . java < nl > @ @ - 1 , 5 + 1 , 10 @ @ < nl > package im . actor . runtime . cocoa . threading ; < nl > < nl > + import com . google . j2objc . annotations . ObjectiveCName ; < nl > + < nl > + import im . actor . runtime . threading . DispatchCancel ; < nl > + < nl > public interface CocoaDispatcherProxy { < nl > - void dispatchOnBackground ( Runnable runnable , long delay ) ; < nl > + @ ObjectiveCName ( " dispatchOnBackground : withDelay : " ) < nl > + DispatchCancel dispatchOnBackground ( Runnable runnable , long delay ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsCanceller . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsCanceller . java < nl > new file mode 100644 < nl > index 0000000 . . 6239baa < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsCanceller . java < nl > @ @ - 0 , 0 + 1 , 14 @ @ < nl > + package im . actor . runtime . js . threading ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public final class JsCanceller extends JavaScriptObject { < nl > + < nl > + protected JsCanceller ( ) { < nl > + < nl > + } < nl > + < nl > + public native void cancel ( ) / * - { < nl > + clearTimeout ( this ) ; < nl > + } - * / ; < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsDispatcher . java < nl > index cdf5a59 . . 2035132 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsDispatcher . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsDispatcher . java < nl > @ @ - 1 , 21 + 1 , 28 @ @ < nl > package im . actor . runtime . js . threading ; < nl > < nl > + import im . actor . runtime . threading . DispatchCancel ; < nl > import im . actor . runtime . threading . Dispatcher ; < nl > < nl > public class JsDispatcher implements Dispatcher { < nl > < nl > public JsDispatcher ( ) { < nl > - < nl > + < nl > } < nl > < nl > @ Override < nl > - public void dispatch ( Runnable message , long delay ) { < nl > - dispatchJs ( message , ( int ) delay ) ; < nl > + public DispatchCancel dispatch ( Runnable message , long delay ) { < nl > + final JsCanceller canceller = dispatchJs ( message , ( int ) delay ) ; < nl > + return new DispatchCancel ( ) { < nl > + @ Override < nl > + public void cancel ( ) { < nl > + canceller . cancel ( ) ; < nl > + } < nl > + } ; < nl > } < nl > < nl > - public native final void dispatchJs ( Runnable runnable , int msec ) / * - { < nl > + public native final JsCanceller dispatchJs ( Runnable runnable , int msec ) / * - { < nl > var _ runnable = runnable < nl > - setTimeout ( function ( ) { < nl > + return setTimeout ( function ( ) { < nl > _ runnable . @ java . lang . Runnable : : run ( ) ( ) ; < nl > } , msec ) ; < nl > } - * / ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Scheduler . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Scheduler . java < nl > index 78b938e . . 68ba598 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Scheduler . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Scheduler . java < nl > @ @ - 1 , 9 + 1 , 14 @ @ < nl > package im . actor . runtime . actors ; < nl > < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . threading . DispatchCancel ; < nl > import im . actor . runtime . threading . Dispatcher ; < nl > < nl > public class Scheduler { < nl > < nl > + private static final boolean LOG = false ; < nl > + private static final String TAG = " Scheduler " ; < nl > + < nl > private static final Dispatcher TIMER _ DISPATCHER = im . actor . runtime . Runtime . createDispatcher ( " scheduler " ) ; < nl > < nl > private Dispatcher destDispatcher ; < nl > @ @ - 19 , 8 + 24 , 11 @ @ public class Scheduler { < nl > } < nl > < nl > public Cancellable schedule ( final Runnable runnable , long delay ) { < nl > + if ( LOG ) { < nl > + Log . d ( TAG , " schedule " + ref . getPath ( ) ) ; < nl > + } < nl > final TaskCancellable res = new TaskCancellable ( ) ; < nl > - destDispatcher . dispatch ( new Runnable ( ) { < nl > + res . setDispatchCancel ( destDispatcher . dispatch ( new Runnable ( ) { < nl > @ Override < nl > public void run ( ) { < nl > if ( res . isCancelled ( ) ) { < nl > @ @ - 36 , 21 + 44 , 38 @ @ public class Scheduler { < nl > } < nl > } ) ; < nl > } < nl > - } , delay ) ; < nl > + } , delay ) ) ; < nl > return res ; < nl > } < nl > < nl > private class TaskCancellable implements Cancellable { < nl > < nl > private volatile boolean isCancelled = false ; < nl > + private volatile DispatchCancel dispatchCancel ; < nl > < nl > public boolean isCancelled ( ) { < nl > return isCancelled ; < nl > } < nl > < nl > + public synchronized void setDispatchCancel ( DispatchCancel dispatchCancel ) { < nl > + if ( isCancelled ) { < nl > + dispatchCancel . cancel ( ) ; < nl > + } else { < nl > + this . dispatchCancel = dispatchCancel ; < nl > + } < nl > + } < nl > + < nl > @ Override < nl > - public void cancel ( ) { < nl > - isCancelled = true ; < nl > + public synchronized void cancel ( ) { < nl > + if ( ! isCancelled ) { < nl > + if ( LOG ) { < nl > + Log . d ( TAG , " Cancel " + ref . getPath ( ) ) ; < nl > + } < nl > + isCancelled = true ; < nl > + if ( this . dispatchCancel ! = null ) { < nl > + this . dispatchCancel . cancel ( ) ; < nl > + } < nl > + } < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / DispatchCancel . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / DispatchCancel . java < nl > new file mode 100644 < nl > index 0000000 . . b75cffa < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / DispatchCancel . java < nl > @ @ - 0 , 0 + 1 , 5 @ @ < nl > + package im . actor . runtime . threading ; < nl > + < nl > + public interface DispatchCancel { < nl > + void cancel ( ) ; < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / Dispatcher . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / Dispatcher . java < nl > index 5307aed . . 799665c 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / Dispatcher . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / Dispatcher . java < nl > @ @ - 1 , 5 + 1 , 5 @ @ < nl > package im . actor . runtime . threading ; < nl > < nl > public interface Dispatcher { < nl > - void dispatch ( Runnable message , long delay ) ; < nl > + DispatchCancel dispatch ( Runnable message , long delay ) ; < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift < nl > index e93bb35 . . 0f8fcf6 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift < nl > @ @ - 6 , 7 + 6 , 7 @ @ import Foundation < nl > < nl > class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { < nl > < nl > - @ objc func hasAssetWithNSString ( name : String ! ) - > jboolean { < nl > + func hasAssetWithNSString ( name : String ! ) - > jboolean { < nl > if NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) ! = nil { < nl > return true < nl > } < nl > @ @ - 16 , 7 + 16 , 7 @ @ class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { < nl > return false < nl > } < nl > < nl > - @ objc func loadAssetWithNSString ( name : String ! ) - > String ! { < nl > + func loadAssetWithNSString ( name : String ! ) - > String ! { < nl > var path : String ? < nl > path = NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) < nl > if path ! = nil { < nl > @ @ - 36 , 6 + 36 , 25 @ @ class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { < nl > } < nl > } < nl > < nl > - fatalError ( " Unable to find resource \ ( name ) " ) < nl > + return nil < nl > + } < nl > + < nl > + func loadBinAssetWithNSString ( name : String ! ) - > IOSByteArray ! { < nl > + var path : String ? < nl > + path = NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) < nl > + if path ! = nil { < nl > + if let data = NSData ( contentsOfFile : path ! ) { < nl > + return data . toJavaBytes ( ) < nl > + } < nl > + } < nl > + < nl > + path = NSBundle . framework . pathForResource ( name , ofType : nil ) < nl > + if path ! = nil { < nl > + if let data = NSData ( contentsOfFile : path ! ) { < nl > + return data . toJavaBytes ( ) < nl > + } < nl > + } < nl > + < nl > + return nil < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index b776221 . . 219518e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 61 , 7 + 61 , 9 @ @ import im . actor . core . viewmodel . UploadFileCallback ; < nl > import im . actor . core . viewmodel . UploadFileVM ; < nl > import im . actor . core . viewmodel . UploadFileVMCallback ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > + import im . actor . runtime . * ; < nl > import im . actor . runtime . actors . ActorSystem ; < nl > + import im . actor . runtime . crypto . primitives . kuznechik . KuznechikFastEngine ; < nl > import im . actor . runtime . mvvm . MVVMCollection ; < nl > import im . actor . runtime . mvvm . ValueModel ; < nl > import im . actor . runtime . storage . PreferencesStorage ; < nl > @ @ - 87 , 6 + 89 , 15 @ @ public class Messenger { < nl > / / Start Messenger initialization < nl > Timing timing = new Timing ( " MESSENGER _ INIT " ) ; < nl > < nl > + / / Encryption < nl > + timing . section ( " Encryption " ) ; < nl > + byte [ ] asset = Assets . loadBinAsset ( " kuz _ tables . bin " ) ; < nl > + if ( asset ! = null ) { < nl > + KuznechikFastEngine . initDump ( asset ) ; < nl > + } else { < nl > + KuznechikFastEngine . initCalc ( ) ; < nl > + } < nl > + < nl > / / Actor system < nl > timing . section ( " Actors " ) ; < nl > ActorSystem . system ( ) . setTraceInterface ( new ActorTrace ( ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin b / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin < nl > new file mode 100644 < nl > index 0000000 . . 64eb2ae < nl > Binary files / dev / null and b / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin differ < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java < nl > index 016ceac . . b72203f 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java < nl > @ @ - 20 , 6 + 20 , 11 @ @ public class CocoaAssetsProxyProvider implements AssetsRuntime { < nl > return assetsRuntime . loadAsset ( name ) ; < nl > } < nl > < nl > + @ Override < nl > + public byte [ ] loadBinAsset ( String name ) { < nl > + return assetsRuntime . loadBinAsset ( name ) ; < nl > + } < nl > + < nl > / / @ Override < nl > / / public native boolean hasAsset ( String name ) / * - [ < nl > / / NSBundle * mainBundle = [ NSBundle mainBundle ] ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java < nl > index fb991d0 . . 532b2d4 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java < nl > @ @ - 6 , 9 + 6 , 6 @ @ import java . io . InputStream ; < nl > < nl > import im . actor . runtime . AssetsRuntime ; < nl > < nl > - / * * < nl > - * Created by ex3ndr on 07 . 08 . 15 . < nl > - * / < nl > public class GenericAssetsProvider implements AssetsRuntime { < nl > < nl > @ Override < nl > @ @ - 35 , 6 + 32 , 25 @ @ public class GenericAssetsProvider implements AssetsRuntime { < nl > return null ; < nl > } < nl > < nl > + @ Override < nl > + public byte [ ] loadBinAsset ( String name ) { < nl > + InputStream stream = getClass ( ) . getClassLoader ( ) . getResourceAsStream ( name ) ; < nl > + try { < nl > + return readFully ( stream ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } finally { < nl > + if ( stream ! = null ) { < nl > + try { < nl > + stream . close ( ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + } < nl > + return null ; < nl > + } < nl > + < nl > public String readFully ( InputStream inputStream , String encoding ) throws IOException { < nl > return new String ( readFully ( inputStream ) , encoding ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java < nl > index ca613d8 . . d40fa1a 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java < nl > @ @ - 45 , 4 + 45 , 9 @ @ public class JsAssetsProvider implements AssetsRuntime { < nl > < nl > return null ; < nl > } < nl > + < nl > + @ Override < nl > + public byte [ ] loadBinAsset ( String name ) { < nl > + return null ; < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java < nl > index 2f400cc . . 0cb9fe1 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java < nl > @ @ - 11 , 4 + 11 , 8 @ @ public class Assets { < nl > public static String loadAsset ( String name ) { < nl > return assetsRuntime . loadAsset ( name ) ; < nl > } < nl > + < nl > + public static byte [ ] loadBinAsset ( String name ) { < nl > + return assetsRuntime . loadBinAsset ( name ) ; < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java < nl > index 30e28ca . . 1237cc0 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java < nl > @ @ - 4 , 4 + 4 , 6 @ @ public interface AssetsRuntime { < nl > boolean hasAsset ( String name ) ; < nl > < nl > String loadAsset ( String name ) ; < nl > + < nl > + byte [ ] loadBinAsset ( String name ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java < nl > index 73484fc . . d319adf 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java < nl > @ @ - 122 , 10 + 122 , 14 @ @ public class KuznechikFastEngine implements BlockCipher { < nl > ( byte ) 0x37 , ( byte ) 0xc4 , ( byte ) 0xaf , ( byte ) 0x24 , ( byte ) 0x2e , ( byte ) 0x6f , ( byte ) 0x8a , ( byte ) 0xa8 , ( byte ) 0xf7 , ( byte ) 0x60 , ( byte ) 0x49 , ( byte ) 0xe3 , ( byte ) 0x80 , ( byte ) 0x86 , ( byte ) 0x59 , ( byte ) 0x07 , < nl > } ; < nl > < nl > - private static final int [ ] gf256res ; < nl > - private static final int [ ] gf256resInv ; < nl > + private static volatile int [ ] gf256res ; < nl > + private static volatile int [ ] gf256resInv ; < nl > < nl > - static { < nl > + public static void initCalc ( ) { < nl > + if ( gf256res ! = null | | gf256resInv ! = null ) { < nl > + return ; < nl > + } < nl > + < nl > gf256res = new int [ 16 * 256 * 4 ] ; < nl > gf256resInv = new int [ 16 * 256 * 4 ] ; < nl > < nl > @ @ - 149 , 6 + 153 , 15 @ @ public class KuznechikFastEngine implements BlockCipher { < nl > } < nl > } < nl > < nl > + public static void initDump ( byte [ ] data ) { < nl > + if ( gf256res ! = null | | gf256resInv ! = null ) { < nl > + return ; < nl > + } < nl > + gf256res = new int [ 16 * 256 * 4 ] ; < nl > + gf256resInv = new int [ 16 * 256 * 4 ] ; < nl > + Pack . bigEndianToInt ( data , 0 , gf256res ) ; < nl > + Pack . bigEndianToInt ( data , gf256res . length * 4 , gf256resInv ) ; < nl > + } < nl > < nl > static void kuz _ l _ fast ( int [ ] w ) { < nl > int a0 = 0 , a1 = 0 , a2 = 0 , a3 = 0 ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaDispatcher . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaDispatcher . swift 
 index 9f937f0 . . dd25624 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaDispatcher . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaDispatcher . swift 
 @ @ - 6 , 9 + 6 , 17 @ @ import Foundation 
 
 class CocoaDispatcher : NSObject , ARCocoaDispatcherProxy { 
 
 - func dispatchOnBackgroundWithJavaLangRunnable ( runnable : JavaLangRunnable ! , withLong delay : jlong ) { 
 + func dispatchOnBackground ( runnable : JavaLangRunnable ! , withDelay delay : jlong ) - > ARDispatchCancel ! { 
 dispatchBackgroundDelayed ( Double ( delay ) / 1000 ) { ( ) - > Void in 
 runnable . run ( ) 
 } 
 + return DispatchCancel ( ) 
 + } 
 + } 
 + 
 + private class DispatchCancel : NSObject , ARDispatchCancel { 
 + 
 + @ objc private func cancel ( ) { 
 + / / Do Nothing 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / threading / AndroidDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / threading / AndroidDispatcher . java 
 index ee85146 . . ff03601 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / threading / AndroidDispatcher . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / threading / AndroidDispatcher . java 
 @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . runtime . android . threading ; 
 import android . os . Handler ; 
 import android . os . HandlerThread ; 
 
 + import im . actor . runtime . threading . DispatchCancel ; 
 import im . actor . runtime . threading . Dispatcher ; 
 
 public class AndroidDispatcher implements Dispatcher { 
 @ @ - 23 , 7 + 24 , 13 @ @ public class AndroidDispatcher implements Dispatcher { 
 } 
 
 @ Override 
 - public void dispatch ( Runnable message , long delay ) { 
 + public DispatchCancel dispatch ( Runnable message , long delay ) { 
 handler . postDelayed ( message , delay ) ; 
 + return new DispatchCancel ( ) { 
 + @ Override 
 + public void cancel ( ) { 
 + / / Do Nothing 
 + } 
 + } ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / threading / CocoaDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / threading / CocoaDispatcher . java 
 index 910cc92 . . 450bf34 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / threading / CocoaDispatcher . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / threading / CocoaDispatcher . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package im . actor . runtime . cocoa . threading ; 
 
 + import im . actor . runtime . threading . DispatchCancel ; 
 import im . actor . runtime . threading . Dispatcher ; 
 
 public class CocoaDispatcher implements Dispatcher { 
 @ @ - 15 , 7 + 16 , 7 @ @ public class CocoaDispatcher implements Dispatcher { 
 } 
 
 @ Override 
 - public void dispatch ( Runnable message , long delay ) { 
 - dispatcherProxy . dispatchOnBackground ( message , delay ) ; 
 + public DispatchCancel dispatch ( Runnable message , long delay ) { 
 + return dispatcherProxy . dispatchOnBackground ( message , delay ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / threading / CocoaDispatcherProxy . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / threading / CocoaDispatcherProxy . java 
 index 0c1aa73 . . a0d9352 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / threading / CocoaDispatcherProxy . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / threading / CocoaDispatcherProxy . java 
 @ @ - 1 , 5 + 1 , 10 @ @ 
 package im . actor . runtime . cocoa . threading ; 
 
 + import com . google . j2objc . annotations . ObjectiveCName ; 
 + 
 + import im . actor . runtime . threading . DispatchCancel ; 
 + 
 public interface CocoaDispatcherProxy { 
 - void dispatchOnBackground ( Runnable runnable , long delay ) ; 
 + @ ObjectiveCName ( " dispatchOnBackground : withDelay : " ) 
 + DispatchCancel dispatchOnBackground ( Runnable runnable , long delay ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsCanceller . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsCanceller . java 
 new file mode 100644 
 index 0000000 . . 6239baa 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsCanceller . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package im . actor . runtime . js . threading ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public final class JsCanceller extends JavaScriptObject { 
 + 
 + protected JsCanceller ( ) { 
 + 
 + } 
 + 
 + public native void cancel ( ) / * - { 
 + clearTimeout ( this ) ; 
 + } - * / ; 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsDispatcher . java 
 index cdf5a59 . . 2035132 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsDispatcher . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsDispatcher . java 
 @ @ - 1 , 21 + 1 , 28 @ @ 
 package im . actor . runtime . js . threading ; 
 
 + import im . actor . runtime . threading . DispatchCancel ; 
 import im . actor . runtime . threading . Dispatcher ; 
 
 public class JsDispatcher implements Dispatcher { 
 
 public JsDispatcher ( ) { 
 - 
 + 
 } 
 
 @ Override 
 - public void dispatch ( Runnable message , long delay ) { 
 - dispatchJs ( message , ( int ) delay ) ; 
 + public DispatchCancel dispatch ( Runnable message , long delay ) { 
 + final JsCanceller canceller = dispatchJs ( message , ( int ) delay ) ; 
 + return new DispatchCancel ( ) { 
 + @ Override 
 + public void cancel ( ) { 
 + canceller . cancel ( ) ; 
 + } 
 + } ; 
 } 
 
 - public native final void dispatchJs ( Runnable runnable , int msec ) / * - { 
 + public native final JsCanceller dispatchJs ( Runnable runnable , int msec ) / * - { 
 var _ runnable = runnable 
 - setTimeout ( function ( ) { 
 + return setTimeout ( function ( ) { 
 _ runnable . @ java . lang . Runnable : : run ( ) ( ) ; 
 } , msec ) ; 
 } - * / ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Scheduler . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Scheduler . java 
 index 78b938e . . 68ba598 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Scheduler . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Scheduler . java 
 @ @ - 1 , 9 + 1 , 14 @ @ 
 package im . actor . runtime . actors ; 
 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . threading . DispatchCancel ; 
 import im . actor . runtime . threading . Dispatcher ; 
 
 public class Scheduler { 
 
 + private static final boolean LOG = false ; 
 + private static final String TAG = " Scheduler " ; 
 + 
 private static final Dispatcher TIMER _ DISPATCHER = im . actor . runtime . Runtime . createDispatcher ( " scheduler " ) ; 
 
 private Dispatcher destDispatcher ; 
 @ @ - 19 , 8 + 24 , 11 @ @ public class Scheduler { 
 } 
 
 public Cancellable schedule ( final Runnable runnable , long delay ) { 
 + if ( LOG ) { 
 + Log . d ( TAG , " schedule " + ref . getPath ( ) ) ; 
 + } 
 final TaskCancellable res = new TaskCancellable ( ) ; 
 - destDispatcher . dispatch ( new Runnable ( ) { 
 + res . setDispatchCancel ( destDispatcher . dispatch ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 if ( res . isCancelled ( ) ) { 
 @ @ - 36 , 21 + 44 , 38 @ @ public class Scheduler { 
 } 
 } ) ; 
 } 
 - } , delay ) ; 
 + } , delay ) ) ; 
 return res ; 
 } 
 
 private class TaskCancellable implements Cancellable { 
 
 private volatile boolean isCancelled = false ; 
 + private volatile DispatchCancel dispatchCancel ; 
 
 public boolean isCancelled ( ) { 
 return isCancelled ; 
 } 
 
 + public synchronized void setDispatchCancel ( DispatchCancel dispatchCancel ) { 
 + if ( isCancelled ) { 
 + dispatchCancel . cancel ( ) ; 
 + } else { 
 + this . dispatchCancel = dispatchCancel ; 
 + } 
 + } 
 + 
 @ Override 
 - public void cancel ( ) { 
 - isCancelled = true ; 
 + public synchronized void cancel ( ) { 
 + if ( ! isCancelled ) { 
 + if ( LOG ) { 
 + Log . d ( TAG , " Cancel " + ref . getPath ( ) ) ; 
 + } 
 + isCancelled = true ; 
 + if ( this . dispatchCancel ! = null ) { 
 + this . dispatchCancel . cancel ( ) ; 
 + } 
 + } 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / DispatchCancel . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / DispatchCancel . java 
 new file mode 100644 
 index 0000000 . . b75cffa 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / DispatchCancel . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package im . actor . runtime . threading ; 
 + 
 + public interface DispatchCancel { 
 + void cancel ( ) ; 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / Dispatcher . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / Dispatcher . java 
 index 5307aed . . 799665c 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / Dispatcher . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / Dispatcher . java 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 package im . actor . runtime . threading ; 
 
 public interface Dispatcher { 
 - void dispatch ( Runnable message , long delay ) ; 
 + DispatchCancel dispatch ( Runnable message , long delay ) ; 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift 
 index e93bb35 . . 0f8fcf6 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift 
 @ @ - 6 , 7 + 6 , 7 @ @ import Foundation 
 
 class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { 
 
 - @ objc func hasAssetWithNSString ( name : String ! ) - > jboolean { 
 + func hasAssetWithNSString ( name : String ! ) - > jboolean { 
 if NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) ! = nil { 
 return true 
 } 
 @ @ - 16 , 7 + 16 , 7 @ @ class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { 
 return false 
 } 
 
 - @ objc func loadAssetWithNSString ( name : String ! ) - > String ! { 
 + func loadAssetWithNSString ( name : String ! ) - > String ! { 
 var path : String ? 
 path = NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) 
 if path ! = nil { 
 @ @ - 36 , 6 + 36 , 25 @ @ class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { 
 } 
 } 
 
 - fatalError ( " Unable to find resource \ ( name ) " ) 
 + return nil 
 + } 
 + 
 + func loadBinAssetWithNSString ( name : String ! ) - > IOSByteArray ! { 
 + var path : String ? 
 + path = NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) 
 + if path ! = nil { 
 + if let data = NSData ( contentsOfFile : path ! ) { 
 + return data . toJavaBytes ( ) 
 + } 
 + } 
 + 
 + path = NSBundle . framework . pathForResource ( name , ofType : nil ) 
 + if path ! = nil { 
 + if let data = NSData ( contentsOfFile : path ! ) { 
 + return data . toJavaBytes ( ) 
 + } 
 + } 
 + 
 + return nil 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index b776221 . . 219518e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 61 , 7 + 61 , 9 @ @ import im . actor . core . viewmodel . UploadFileCallback ; 
 import im . actor . core . viewmodel . UploadFileVM ; 
 import im . actor . core . viewmodel . UploadFileVMCallback ; 
 import im . actor . core . viewmodel . UserVM ; 
 + import im . actor . runtime . * ; 
 import im . actor . runtime . actors . ActorSystem ; 
 + import im . actor . runtime . crypto . primitives . kuznechik . KuznechikFastEngine ; 
 import im . actor . runtime . mvvm . MVVMCollection ; 
 import im . actor . runtime . mvvm . ValueModel ; 
 import im . actor . runtime . storage . PreferencesStorage ; 
 @ @ - 87 , 6 + 89 , 15 @ @ public class Messenger { 
 / / Start Messenger initialization 
 Timing timing = new Timing ( " MESSENGER _ INIT " ) ; 
 
 + / / Encryption 
 + timing . section ( " Encryption " ) ; 
 + byte [ ] asset = Assets . loadBinAsset ( " kuz _ tables . bin " ) ; 
 + if ( asset ! = null ) { 
 + KuznechikFastEngine . initDump ( asset ) ; 
 + } else { 
 + KuznechikFastEngine . initCalc ( ) ; 
 + } 
 + 
 / / Actor system 
 timing . section ( " Actors " ) ; 
 ActorSystem . system ( ) . setTraceInterface ( new ActorTrace ( ) ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin b / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin 
 new file mode 100644 
 index 0000000 . . 64eb2ae 
 Binary files / dev / null and b / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin differ 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java 
 index 016ceac . . b72203f 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java 
 @ @ - 20 , 6 + 20 , 11 @ @ public class CocoaAssetsProxyProvider implements AssetsRuntime { 
 return assetsRuntime . loadAsset ( name ) ; 
 } 
 
 + @ Override 
 + public byte [ ] loadBinAsset ( String name ) { 
 + return assetsRuntime . loadBinAsset ( name ) ; 
 + } 
 + 
 / / @ Override 
 / / public native boolean hasAsset ( String name ) / * - [ 
 / / NSBundle * mainBundle = [ NSBundle mainBundle ] ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java 
 index fb991d0 . . 532b2d4 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java 
 @ @ - 6 , 9 + 6 , 6 @ @ import java . io . InputStream ; 
 
 import im . actor . runtime . AssetsRuntime ; 
 
 - / * * 
 - * Created by ex3ndr on 07 . 08 . 15 . 
 - * / 
 public class GenericAssetsProvider implements AssetsRuntime { 
 
 @ Override 
 @ @ - 35 , 6 + 32 , 25 @ @ public class GenericAssetsProvider implements AssetsRuntime { 
 return null ; 
 } 
 
 + @ Override 
 + public byte [ ] loadBinAsset ( String name ) { 
 + InputStream stream = getClass ( ) . getClassLoader ( ) . getResourceAsStream ( name ) ; 
 + try { 
 + return readFully ( stream ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } finally { 
 + if ( stream ! = null ) { 
 + try { 
 + stream . close ( ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + } 
 + return null ; 
 + } 
 + 
 public String readFully ( InputStream inputStream , String encoding ) throws IOException { 
 return new String ( readFully ( inputStream ) , encoding ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java 
 index ca613d8 . . d40fa1a 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java 
 @ @ - 45 , 4 + 45 , 9 @ @ public class JsAssetsProvider implements AssetsRuntime { 
 
 return null ; 
 } 
 + 
 + @ Override 
 + public byte [ ] loadBinAsset ( String name ) { 
 + return null ; 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java 
 index 2f400cc . . 0cb9fe1 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java 
 @ @ - 11 , 4 + 11 , 8 @ @ public class Assets { 
 public static String loadAsset ( String name ) { 
 return assetsRuntime . loadAsset ( name ) ; 
 } 
 + 
 + public static byte [ ] loadBinAsset ( String name ) { 
 + return assetsRuntime . loadBinAsset ( name ) ; 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java 
 index 30e28ca . . 1237cc0 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java 
 @ @ - 4 , 4 + 4 , 6 @ @ public interface AssetsRuntime { 
 boolean hasAsset ( String name ) ; 
 
 String loadAsset ( String name ) ; 
 + 
 + byte [ ] loadBinAsset ( String name ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java 
 index 73484fc . . d319adf 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java 
 @ @ - 122 , 10 + 122 , 14 @ @ public class KuznechikFastEngine implements BlockCipher { 
 ( byte ) 0x37 , ( byte ) 0xc4 , ( byte ) 0xaf , ( byte ) 0x24 , ( byte ) 0x2e , ( byte ) 0x6f , ( byte ) 0x8a , ( byte ) 0xa8 , ( byte ) 0xf7 , ( byte ) 0x60 , ( byte ) 0x49 , ( byte ) 0xe3 , ( byte ) 0x80 , ( byte ) 0x86 , ( byte ) 0x59 , ( byte ) 0x07 , 
 } ; 
 
 - private static final int [ ] gf256res ; 
 - private static final int [ ] gf256resInv ; 
 + private static volatile int [ ] gf256res ; 
 + private static volatile int [ ] gf256resInv ; 
 
 - static { 
 + public static void initCalc ( ) { 
 + if ( gf256res ! = null | | gf256resInv ! = null ) { 
 + return ; 
 + } 
 + 
 gf256res = new int [ 16 * 256 * 4 ] ; 
 gf256resInv = new int [ 16 * 256 * 4 ] ; 
 
 @ @ - 149 , 6 + 153 , 15 @ @ public class KuznechikFastEngine implements BlockCipher { 
 } 
 } 
 
 + public static void initDump ( byte [ ] data ) { 
 + if ( gf256res ! = null | | gf256resInv ! = null ) { 
 + return ; 
 + } 
 + gf256res = new int [ 16 * 256 * 4 ] ; 
 + gf256resInv = new int [ 16 * 256 * 4 ] ; 
 + Pack . bigEndianToInt ( data , 0 , gf256res ) ; 
 + Pack . bigEndianToInt ( data , gf256res . length * 4 , gf256resInv ) ; 
 + } 
 
 static void kuz _ l _ fast ( int [ ] w ) { 
 int a0 = 0 , a1 = 0 , a2 = 0 , a3 = 0 ;
