BLEU SCORE: 0.06837203339116285

TEST MSG: ref ( core ) : Enable default methods , separating promises and operations
GENERATED MSG: feat ( webrtc ) : Implemented Call Actor

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - app / build . gradle b / actor - sdk / sdk - core - android / android - app / build . gradle < nl > index b8e570a . . 1b95f00 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - app / build . gradle < nl > + + + b / actor - sdk / sdk - core - android / android - app / build . gradle < nl > @ @ - 8 , 6 + 8 , 10 @ @ buildscript { < nl > apply plugin : ' com . android . application ' < nl > apply plugin : ' me . tatarka . retrolambda ' < nl > < nl > + retrolambda { < nl > + defaultMethods true < nl > + } < nl > + < nl > android { < nl > compileSdkVersion 23 < nl > buildToolsVersion " 23 . 0 . 3 " < nl > diff - - git a / actor - sdk / sdk - core - android / android - google - maps / build . gradle b / actor - sdk / sdk - core - android / android - google - maps / build . gradle < nl > index fd40672 . . e96c89e 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - google - maps / build . gradle < nl > + + + b / actor - sdk / sdk - core - android / android - google - maps / build . gradle < nl > @ @ - 18 , 6 + 18 , 10 @ @ apply plugin : ' me . tatarka . retrolambda ' < nl > group = ' im . actor ' < nl > version = ' 0 . 0 . 1 ' < nl > < nl > + retrolambda { < nl > + defaultMethods true < nl > + } < nl > + < nl > android { < nl > compileSdkVersion 23 < nl > buildToolsVersion " 23 . 0 . 3 " < nl > diff - - git a / actor - sdk / sdk - core - android / android - google - push / build . gradle b / actor - sdk / sdk - core - android / android - google - push / build . gradle < nl > index f865300 . . bebd32c 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - google - push / build . gradle < nl > + + + b / actor - sdk / sdk - core - android / android - google - push / build . gradle < nl > @ @ - 16 , 6 + 16 , 10 @ @ apply plugin : ' me . tatarka . retrolambda ' < nl > group = ' im . actor ' < nl > version = ' 0 . 0 . 1 ' < nl > < nl > + retrolambda { < nl > + defaultMethods true < nl > + } < nl > + < nl > android { < nl > compileSdkVersion 23 < nl > buildToolsVersion " 23 . 0 . 3 " < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / build . gradle b / actor - sdk / sdk - core - android / android - sdk / build . gradle < nl > index 62099bb . . b0a437d 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / build . gradle < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / build . gradle < nl > @ @ - 16 , 6 + 16 , 10 @ @ apply plugin : ' me . tatarka . retrolambda ' < nl > group = ' im . actor ' < nl > version = ' 0 . 0 . 1 ' < nl > < nl > + retrolambda { < nl > + defaultMethods true < nl > + } < nl > + < nl > android { < nl > < nl > compileSdkVersion 23 < nl > diff - - git a / actor - sdk / sdk - core / core / core - android / build . gradle b / actor - sdk / sdk - core / core / core - android / build . gradle < nl > index 5401506 . . d794ea7 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - android / build . gradle < nl > + + + b / actor - sdk / sdk - core / core / core - android / build . gradle < nl > @ @ - 23 , 6 + 23 , 10 @ @ android { < nl > } < nl > } < nl > < nl > + retrolambda { < nl > + defaultMethods true < nl > + } < nl > + < nl > android { < nl > < nl > sourceSets { < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / build . gradle b / actor - sdk / sdk - core / runtime / runtime - android / build . gradle < nl > index c3a3e42 . . cb03948 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - android / build . gradle < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / build . gradle < nl > @ @ - 22 , 6 + 22 , 10 @ @ android { < nl > } < nl > } < nl > < nl > + retrolambda { < nl > + defaultMethods true < nl > + } < nl > + < nl > android { < nl > sourceSets { < nl > main { < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / ConsumerDouble . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / ConsumerDouble . java < nl > new file mode 100644 < nl > index 0000000 . . 52e024b < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / ConsumerDouble . java < nl > @ @ - 0 , 0 + 1 , 5 @ @ < nl > + package im . actor . runtime . function ; < nl > + < nl > + public interface ConsumerDouble < T1 , T2 > { < nl > + void apply ( T1 t1 , T2 t2 ) ; < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promise . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promise . java < nl > index 2e6fc3c . . 4707bf2 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promise . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promise . java < nl > @ @ - 9 , 8 + 9 , 6 @ @ import java . util . ArrayList ; < nl > < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . function . Consumer ; < nl > - import im . actor . runtime . function . Function ; < nl > - import im . actor . runtime . function . Supplier ; < nl > import im . actor . runtime . threading . SimpleDispatcher ; < nl > import im . actor . runtime . threading . ThreadDispatcher ; < nl > < nl > @ @ - 20 , 14 + 18 , 13 @ @ import im . actor . runtime . threading . ThreadDispatcher ; < nl > * < nl > * @ param < T > type of result < nl > * / < nl > - public class Promise < T > { < nl > + public class Promise < T > implements PromiseMethods < T > { < nl > < nl > / / < nl > / / Dispatching parameters < nl > / / < nl > < nl > private final ArrayList < PromiseCallback < T > > callbacks = new ArrayList < > ( ) ; < nl > - private final PromiseFunc < T > executor ; < nl > private final SimpleDispatcher dispatcher ; < nl > < nl > / / < nl > @ @ - 37 , 25 + 34 , 20 @ @ public class Promise < T > { < nl > private volatile T result ; < nl > private volatile Exception exception ; < nl > private volatile boolean isFinished ; < nl > - / / private boolean isStarted ; < nl > < nl > / * * < nl > * Default constructor of promise < nl > * / < nl > @ ObjectiveCName ( " initWithExecutor : " ) < nl > public Promise ( PromiseFunc < T > executor ) { < nl > - this . executor = executor ; < nl > this . dispatcher = ThreadDispatcher . peekDispatcher ( ) ; < nl > this . dispatcher . dispatch ( ( ) - > executor . exec ( new PromiseResolver < > ( Promise . this ) ) ) ; < nl > } < nl > < nl > - / * * < nl > - * Internal constructor to work - around lambda support issueses < nl > - * / < nl > - Promise ( ) { < nl > - this . executor = null ; < nl > - this . dispatcher = null ; < nl > - } < nl > + < nl > + / / < nl > + / / Receiving Results < nl > + / / < nl > < nl > / * * < nl > * Handling successful result < nl > @ @ - 115 , 28 + 107 , 6 @ @ public class Promise < T > { < nl > } < nl > < nl > / * * < nl > - * Handling complete < nl > - * < nl > - * @ param callback callback for completion < nl > - * @ return this < nl > - * / < nl > - @ ObjectiveCName ( " complete : " ) < nl > - public synchronized Promise < T > complete ( final PromiseCallback < T > callback ) { < nl > - if ( isFinished ) { < nl > - dispatcher . dispatch ( ( ) - > { < nl > - if ( exception ! = null ) { < nl > - callback . onError ( exception ) ; < nl > - } else { < nl > - callback . onResult ( result ) ; < nl > - } < nl > - } ) ; < nl > - } else { < nl > - callbacks . add ( callback ) ; < nl > - } < nl > - return this ; < nl > - } < nl > - < nl > - / * * < nl > * Pipe result to resolver < nl > * < nl > * @ param resolver destination resolver < nl > @ @ - 144 , 62 + 114 , 16 @ @ public class Promise < T > { < nl > * / < nl > @ ObjectiveCName ( " pipeTo : " ) < nl > public synchronized Promise < T > pipeTo ( final PromiseResolver < T > resolver ) { < nl > - complete ( new PromiseCallback < T > ( ) { < nl > - @ Override < nl > - public void onResult ( T t ) { < nl > - resolver . result ( t ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onError ( Exception e ) { < nl > - resolver . error ( e ) ; < nl > - } < nl > - } ) ; < nl > + then ( resolver : : result ) ; < nl > + failure ( resolver : : error ) ; < nl > return this ; < nl > } < nl > < nl > - / / / * * < nl > - / / * Call this method to start promise execution < nl > - / / * < nl > - / / * @ param ref Scheduling actor < nl > - / / * @ return this < nl > - / / * / < nl > - / / @ ObjectiveCName ( " doneWithRef : " ) < nl > - / / public Promise < T > done ( ActorRef ref ) { < nl > - / / return done ( new SimpleActorDispatcher ( ref ) ) ; < nl > - / / } < nl > - < nl > - / / / * * < nl > - / / * Call this method to start promise execution < nl > - / / * < nl > - / / * @ param dispatcher Scheduling dispatcher < nl > - / / * @ return this < nl > - / / * / < nl > - / / @ ObjectiveCName ( " done : " ) < nl > - / / public Promise < T > done ( SimpleDispatcher dispatcher ) { < nl > - / / if ( isStarted ) { < nl > - / / / / throw new RuntimeException ( " Promise already started ! " ) ; < nl > - / / return this ; < nl > - / / } < nl > - / / isStarted = true ; < nl > - / / dispatchActor = dispatcher ; < nl > - / / dispatchActor . dispatch ( ( ) - > exec ( new PromiseResolver < > ( Promise . this , dispatchActor ) ) ) ; < nl > - / / return this ; < nl > - / / } < nl > - < nl > @ ObjectiveCName ( " log : " ) < nl > public Promise < T > log ( final String TAG ) { < nl > - return complete ( new PromiseCallback < T > ( ) { < nl > - @ Override < nl > - public void onResult ( T t ) { < nl > - Log . d ( TAG , " Result : " + t ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onError ( Exception e ) { < nl > - Log . w ( TAG , " Error : " + e ) ; < nl > - } < nl > - } ) ; < nl > + then ( t - > Log . d ( TAG , " Result : " + t ) ) ; < nl > + failure ( e - > Log . w ( TAG , " Error : " + e ) ) ; < nl > + return this ; < nl > } < nl > < nl > / * * < nl > @ @ - 213 , 313 + 137 , 10 @ @ public class Promise < T > { < nl > return ( Promise < R > ) this ; < nl > } < nl > < nl > - / * * < nl > - * Getting result if finished < nl > - * < nl > - * @ return result < nl > - * / < nl > - @ ObjectiveCName ( " getResult " ) < nl > - public T getResult ( ) { < nl > - if ( ! isFinished ) { < nl > - throw new RuntimeException ( " Promise is not finished ! " ) ; < nl > - } < nl > - return result ; < nl > - } < nl > - < nl > - / * * < nl > - * Is promise finished < nl > - * < nl > - * @ return result < nl > - * / < nl > - @ ObjectiveCName ( " isFinished " ) < nl > - public boolean isFinished ( ) { < nl > - return isFinished ; < nl > - } < nl > - < nl > - / * * < nl > - * Exception if promise finished with error < nl > - * < nl > - * @ return exception < nl > - * / < nl > - @ ObjectiveCName ( " getException " ) < nl > - public Exception getException ( ) { < nl > - if ( ! isFinished ) { < nl > - throw new RuntimeException ( " Promise is not finished ! " ) ; < nl > - } < nl > - return exception ; < nl > - } < nl > - < nl > - @ ObjectiveCName ( " mapIfNull : " ) < nl > - public Promise < T > mapIfNull ( final Supplier < T > producer ) { < nl > - final Promise < T > self = this ; < nl > - return new Promise < T > ( new PromiseFunc < T > ( ) { < nl > - @ Override < nl > - public void exec ( final PromiseResolver < T > resolver ) { < nl > - self . then ( new Consumer < T > ( ) { < nl > - @ Override < nl > - public void apply ( T t ) { < nl > - if ( t = = null ) { < nl > - try { < nl > - t = producer . get ( ) ; < nl > - } catch ( Exception e ) { < nl > - resolver . error ( e ) ; < nl > - return ; < nl > - } < nl > - resolver . result ( t ) ; < nl > - } else { < nl > - resolver . result ( t ) ; < nl > - } < nl > - } < nl > - } ) ; < nl > - self . failure ( new Consumer < Exception > ( ) { < nl > - @ Override < nl > - public void apply ( Exception e ) { < nl > - resolver . error ( e ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - @ ObjectiveCName ( " mapIfNullPromise : " ) < nl > - public Promise < T > mapIfNullPromise ( final Supplier < Promise < T > > producer ) { < nl > - final Promise < T > self = this ; < nl > - return new Promise < T > ( new PromiseFunc < T > ( ) { < nl > - @ Override < nl > - public void exec ( final PromiseResolver < T > resolver ) { < nl > - self . then ( new Consumer < T > ( ) { < nl > - @ Override < nl > - public void apply ( T t ) { < nl > - if ( t = = null ) { < nl > - Promise < T > promise ; < nl > - try { < nl > - promise = producer . get ( ) ; < nl > - } catch ( Exception e ) { < nl > - resolver . error ( e ) ; < nl > - return ; < nl > - } < nl > - promise . then ( new Consumer < T > ( ) { < nl > - @ Override < nl > - public void apply ( T t1 ) { < nl > - resolver . result ( t1 ) ; < nl > - } < nl > - } ) ; < nl > - promise . failure ( new Consumer < Exception > ( ) { < nl > - @ Override < nl > - public void apply ( Exception e ) { < nl > - resolver . error ( e ) ; < nl > - } < nl > - } ) ; < nl > - } else { < nl > - resolver . result ( t ) ; < nl > - } < nl > - } < nl > - } ) ; < nl > - self . failure ( new Consumer < Exception > ( ) { < nl > - @ Override < nl > - public void apply ( Exception e ) { < nl > - resolver . error ( e ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - / * * < nl > - * Mapping result value of promise to another value < nl > - * < nl > - * @ param res mapping function < nl > - * @ param < R > destination type < nl > - * @ return promise < nl > - * / < nl > - @ ObjectiveCName ( " map : " ) < nl > - public < R > Promise < R > map ( final Function < T , R > res ) { < nl > - final Promise < T > self = this ; < nl > - return new Promise < > ( new PromiseFunc < R > ( ) { < nl > - @ Override < nl > - public void exec ( @ NotNull PromiseResolver < R > resolver ) { < nl > - self . then ( new Consumer < T > ( ) { < nl > - @ Override < nl > - public void apply ( T t ) { < nl > - R r ; < nl > - try { < nl > - r = res . apply ( t ) ; < nl > - } catch ( Exception e ) { < nl > - e . printStackTrace ( ) ; < nl > - resolver . tryError ( e ) ; < nl > - return ; < nl > - } < nl > - resolver . tryResult ( r ) ; < nl > - } < nl > - } ) ; < nl > - self . failure ( new Consumer < Exception > ( ) { < nl > - @ Override < nl > - public void apply ( Exception e ) { < nl > - resolver . error ( e ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - / * * < nl > - * Map result of promise to promise of value < nl > - * < nl > - * @ param res mapping function < nl > - * @ param < R > destination type < nl > - * @ return promise < nl > - * / < nl > - @ ObjectiveCName ( " mapPromise : " ) < nl > - public < R > Promise < R > mapPromise ( final Function < T , Promise < R > > res ) { < nl > - final Promise < T > self = this ; < nl > - return new Promise < > ( new PromiseFunc < R > ( ) { < nl > - @ Override < nl > - public void exec ( @ NotNull PromiseResolver < R > resolver ) { < nl > - self . then ( new Consumer < T > ( ) { < nl > - @ Override < nl > - public void apply ( T t ) { < nl > - Promise < R > promise ; < nl > - try { < nl > - promise = res . apply ( t ) ; < nl > - } catch ( Exception e ) { < nl > - e . printStackTrace ( ) ; < nl > - resolver . tryError ( e ) ; < nl > - return ; < nl > - } < nl > - < nl > - promise . then ( new Consumer < R > ( ) { < nl > - @ Override < nl > - public void apply ( R r ) { < nl > - resolver . result ( r ) ; < nl > - } < nl > - } ) ; < nl > - promise . failure ( new Consumer < Exception > ( ) { < nl > - @ Override < nl > - public void apply ( Exception e ) { < nl > - resolver . error ( e ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) ; < nl > - self . failure ( new Consumer < Exception > ( ) { < nl > - @ Override < nl > - public void apply ( Exception e ) { < nl > - resolver . tryError ( e ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - public < R > Promise < T > mapPromiseSelf ( final Function < T , Promise < R > > res ) { < nl > - return mapPromise ( new Function < T , Promise < T > > ( ) { < nl > - @ Override < nl > - public Promise < T > apply ( final T t ) { < nl > - return res . apply ( t ) . map ( new Function < R , T > ( ) { < nl > - @ Override < nl > - public T apply ( R r ) { < nl > - return t ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - @ ObjectiveCName ( " fallback : " ) < nl > - public Promise < T > fallback ( final Function < Exception , Promise < T > > catchThen ) { < nl > - final Promise < T > self = this ; < nl > - return new Promise < T > ( new PromiseFunc < T > ( ) { < nl > - @ Override < nl > - public void exec ( final PromiseResolver < T > resolver ) { < nl > - self . then ( new Consumer < T > ( ) { < nl > - @ Override < nl > - public void apply ( T t ) { < nl > - resolver . result ( t ) ; < nl > - } < nl > - } ) ; < nl > - self . failure ( new Consumer < Exception > ( ) { < nl > - @ Override < nl > - public void apply ( Exception e ) { < nl > - Promise < T > res = catchThen . apply ( e ) ; < nl > - res . then ( new Consumer < T > ( ) { < nl > - @ Override < nl > - public void apply ( T t ) { < nl > - resolver . result ( t ) ; < nl > - } < nl > - } ) ; < nl > - res . failure ( new Consumer < Exception > ( ) { < nl > - @ Override < nl > - public void apply ( Exception e ) { < nl > - resolver . error ( e ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > < nl > - @ ObjectiveCName ( " afterVoid : " ) < nl > - public < R > Promise < R > afterVoid ( final Supplier < Promise < R > > promiseSupplier ) { < nl > - final Promise < T > self = this ; < nl > - return new Promise < R > ( new PromiseFunc < R > ( ) { < nl > - @ Override < nl > - public void exec ( final PromiseResolver < R > resolver ) { < nl > - self . then ( new Consumer < T > ( ) { < nl > - @ Override < nl > - public void apply ( T t ) { < nl > - Promise < R > promise = promiseSupplier . get ( ) ; < nl > - promise . then ( new Consumer < R > ( ) { < nl > - @ Override < nl > - public void apply ( R r ) { < nl > - resolver . result ( r ) ; < nl > - } < nl > - } ) ; < nl > - promise . failure ( new Consumer < Exception > ( ) { < nl > - @ Override < nl > - public void apply ( Exception e ) { < nl > - resolver . error ( e ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) ; < nl > - self . failure ( new Consumer < Exception > ( ) { < nl > - @ Override < nl > - public void apply ( Exception e ) { < nl > - resolver . error ( e ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - / * * < nl > - * Delivering result < nl > - * / < nl > - private void deliverResult ( ) { < nl > - if ( callbacks . size ( ) > 0 ) { < nl > - dispatcher . dispatch ( ( ) - > { < nl > - if ( exception ! = null ) { < nl > - for ( PromiseCallback < T > callback : callbacks ) { < nl > - try { < nl > - callback . onError ( exception ) ; < nl > - } catch ( Exception e ) { < nl > - e . printStackTrace ( ) ; < nl > - } < nl > - } < nl > - } else { < nl > - for ( PromiseCallback < T > callback : callbacks ) { < nl > - try { < nl > - callback . onResult ( result ) ; < nl > - } catch ( Exception e ) { < nl > - e . printStackTrace ( ) ; < nl > - } < nl > - } < nl > - } < nl > - callbacks . clear ( ) ; < nl > - } ) ; < nl > - } < nl > - } < nl > + / / < nl > + / / Delivering Results < nl > + / / < nl > < nl > / * * < nl > * Called when promise ended with error < nl > @ @ - 575 , 4 + 196 , 32 @ @ public class Promise < T > { < nl > } < nl > result ( res ) ; < nl > } < nl > + < nl > + / * * < nl > + * Delivering result < nl > + * / < nl > + private void deliverResult ( ) { < nl > + if ( callbacks . size ( ) > 0 ) { < nl > + dispatcher . dispatch ( ( ) - > { < nl > + if ( exception ! = null ) { < nl > + for ( PromiseCallback < T > callback : callbacks ) { < nl > + try { < nl > + callback . onError ( exception ) ; < nl > + } catch ( Exception e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + } else { < nl > + for ( PromiseCallback < T > callback : callbacks ) { < nl > + try { < nl > + callback . onResult ( result ) ; < nl > + } catch ( Exception e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + } < nl > + callbacks . clear ( ) ; < nl > + } ) ; < nl > + } < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromiseMethods . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromiseMethods . java < nl > new file mode 100644 < nl > index 0000000 . . daf8af7 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromiseMethods . java < nl > @ @ - 0 , 0 + 1 , 283 @ @ < nl > + package im . actor . runtime . promise ; < nl > + < nl > + import com . google . j2objc . annotations . ObjectiveCName ; < nl > + < nl > + import org . jetbrains . annotations . NotNull ; < nl > + < nl > + import im . actor . runtime . function . Consumer ; < nl > + import im . actor . runtime . function . ConsumerDouble ; < nl > + import im . actor . runtime . function . Function ; < nl > + import im . actor . runtime . function . Supplier ; < nl > + < nl > + public interface PromiseMethods < T > { < nl > + < nl > + / * * < nl > + * Handling successful result < nl > + * < nl > + * @ param then supplier for result < nl > + * @ return this < nl > + * / < nl > + @ ObjectiveCName ( " then : " ) < nl > + Promise < T > then ( final Consumer < T > then ) ; < nl > + < nl > + / * * < nl > + * Handling failure < nl > + * < nl > + * @ param failure supplier for exception < nl > + * @ return this < nl > + * / < nl > + @ ObjectiveCName ( " failure : " ) < nl > + Promise < T > failure ( final Consumer < Exception > failure ) ; < nl > + < nl > + < nl > + default Promise < T > complete ( final ConsumerDouble < T , Exception > completeHandler ) { < nl > + then ( t - > completeHandler . apply ( t , null ) ) ; < nl > + failure ( e - > completeHandler . apply ( null , e ) ) ; < nl > + return ( Promise < T > ) this ; < nl > + } < nl > + < nl > + @ ObjectiveCName ( " mapIfNull : " ) < nl > + default Promise < T > mapIfNull ( final Supplier < T > producer ) { < nl > + final Promise < T > self = ( Promise < T > ) this ; < nl > + return new Promise < T > ( new PromiseFunc < T > ( ) { < nl > + @ Override < nl > + public void exec ( final PromiseResolver < T > resolver ) { < nl > + self . then ( new Consumer < T > ( ) { < nl > + @ Override < nl > + public void apply ( T t ) { < nl > + if ( t = = null ) { < nl > + try { < nl > + t = producer . get ( ) ; < nl > + } catch ( Exception e ) { < nl > + resolver . error ( e ) ; < nl > + return ; < nl > + } < nl > + resolver . result ( t ) ; < nl > + } else { < nl > + resolver . result ( t ) ; < nl > + } < nl > + } < nl > + } ) ; < nl > + self . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + resolver . error ( e ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ ObjectiveCName ( " mapIfNullPromise : " ) < nl > + default Promise < T > mapIfNullPromise ( final Supplier < Promise < T > > producer ) { < nl > + final Promise < T > self = ( Promise < T > ) this ; < nl > + return new Promise < T > ( new PromiseFunc < T > ( ) { < nl > + @ Override < nl > + public void exec ( final PromiseResolver < T > resolver ) { < nl > + self . then ( new Consumer < T > ( ) { < nl > + @ Override < nl > + public void apply ( T t ) { < nl > + if ( t = = null ) { < nl > + Promise < T > promise ; < nl > + try { < nl > + promise = producer . get ( ) ; < nl > + } catch ( Exception e ) { < nl > + resolver . error ( e ) ; < nl > + return ; < nl > + } < nl > + promise . then ( new Consumer < T > ( ) { < nl > + @ Override < nl > + public void apply ( T t1 ) { < nl > + resolver . result ( t1 ) ; < nl > + } < nl > + } ) ; < nl > + promise . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + resolver . error ( e ) ; < nl > + } < nl > + } ) ; < nl > + } else { < nl > + resolver . result ( t ) ; < nl > + } < nl > + } < nl > + } ) ; < nl > + self . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + resolver . error ( e ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + / * * < nl > + * Mapping result value of promise to another value < nl > + * < nl > + * @ param res mapping function < nl > + * @ param < R > destination type < nl > + * @ return promise < nl > + * / < nl > + @ ObjectiveCName ( " map : " ) < nl > + default < R > Promise < R > map ( final Function < T , R > res ) { < nl > + final Promise < T > self = ( Promise < T > ) this ; < nl > + return new Promise < > ( new PromiseFunc < R > ( ) { < nl > + @ Override < nl > + public void exec ( @ NotNull PromiseResolver < R > resolver ) { < nl > + self . then ( new Consumer < T > ( ) { < nl > + @ Override < nl > + public void apply ( T t ) { < nl > + R r ; < nl > + try { < nl > + r = res . apply ( t ) ; < nl > + } catch ( Exception e ) { < nl > + e . printStackTrace ( ) ; < nl > + resolver . tryError ( e ) ; < nl > + return ; < nl > + } < nl > + resolver . tryResult ( r ) ; < nl > + } < nl > + } ) ; < nl > + self . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + resolver . error ( e ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + / * * < nl > + * Map result of promise to promise of value < nl > + * < nl > + * @ param res mapping function < nl > + * @ param < R > destination type < nl > + * @ return promise < nl > + * / < nl > + @ ObjectiveCName ( " mapPromise : " ) < nl > + default < R > Promise < R > mapPromise ( final Function < T , Promise < R > > res ) { < nl > + final Promise < T > self = ( Promise < T > ) this ; < nl > + return new Promise < > ( new PromiseFunc < R > ( ) { < nl > + @ Override < nl > + public void exec ( @ NotNull PromiseResolver < R > resolver ) { < nl > + self . then ( new Consumer < T > ( ) { < nl > + @ Override < nl > + public void apply ( T t ) { < nl > + Promise < R > promise ; < nl > + try { < nl > + promise = res . apply ( t ) ; < nl > + } catch ( Exception e ) { < nl > + e . printStackTrace ( ) ; < nl > + resolver . tryError ( e ) ; < nl > + return ; < nl > + } < nl > + < nl > + promise . then ( new Consumer < R > ( ) { < nl > + @ Override < nl > + public void apply ( R r ) { < nl > + resolver . result ( r ) ; < nl > + } < nl > + } ) ; < nl > + promise . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + resolver . error ( e ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + self . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + resolver . tryError ( e ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + default < R > Promise < T > mapPromiseSelf ( final Function < T , Promise < R > > res ) { < nl > + return mapPromise ( new Function < T , Promise < T > > ( ) { < nl > + @ Override < nl > + public Promise < T > apply ( final T t ) { < nl > + return res . apply ( t ) . map ( new Function < R , T > ( ) { < nl > + @ Override < nl > + public T apply ( R r ) { < nl > + return t ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ ObjectiveCName ( " fallback : " ) < nl > + default Promise < T > fallback ( final Function < Exception , Promise < T > > catchThen ) { < nl > + final Promise < T > self = ( Promise < T > ) this ; < nl > + return new Promise < T > ( new PromiseFunc < T > ( ) { < nl > + @ Override < nl > + public void exec ( final PromiseResolver < T > resolver ) { < nl > + self . then ( new Consumer < T > ( ) { < nl > + @ Override < nl > + public void apply ( T t ) { < nl > + resolver . result ( t ) ; < nl > + } < nl > + } ) ; < nl > + self . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + Promise < T > res = catchThen . apply ( e ) ; < nl > + res . then ( new Consumer < T > ( ) { < nl > + @ Override < nl > + public void apply ( T t ) { < nl > + resolver . result ( t ) ; < nl > + } < nl > + } ) ; < nl > + res . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + resolver . error ( e ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ ObjectiveCName ( " afterVoid : " ) < nl > + default < R > Promise < R > afterVoid ( final Supplier < Promise < R > > promiseSupplier ) { < nl > + final Promise < T > self = ( Promise < T > ) this ; < nl > + return new Promise < R > ( new PromiseFunc < R > ( ) { < nl > + @ Override < nl > + public void exec ( final PromiseResolver < R > resolver ) { < nl > + self . then ( new Consumer < T > ( ) { < nl > + @ Override < nl > + public void apply ( T t ) { < nl > + Promise < R > promise = promiseSupplier . get ( ) ; < nl > + promise . then ( new Consumer < R > ( ) { < nl > + @ Override < nl > + public void apply ( R r ) { < nl > + resolver . result ( r ) ; < nl > + } < nl > + } ) ; < nl > + promise . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + resolver . error ( e ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + self . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + resolver . error ( e ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json < nl > index 21881e7 . . c585341 100644 < nl > - - - a / actor - sdk / sdk - api / actor . json < nl > + + + b / actor - sdk / sdk - api / actor . json < nl > @ @ - 12512 , 6 + 12512 , 24 @ @ < nl > " argument " : " sessionId " , < nl > " category " : " full " , < nl > " description " : " Session Id of candidate " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " index " , < nl > + " category " : " full " , < nl > + " description " : " Index of candidate " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " id " , < nl > + " category " : " full " , < nl > + " description " : " Id of candidate " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " sdp " , < nl > + " category " : " full " , < nl > + " description " : " SDP of candidate " < nl > } < nl > ] , < nl > " trait " : { < nl > @ @ - 12526 , 6 + 12544 , 21 @ @ < nl > } , < nl > " id " : 1 , < nl > " name " : " sessionId " < nl > + } , < nl > + { < nl > + " type " : " int32 " , < nl > + " id " : 2 , < nl > + " name " : " index " < nl > + } , < nl > + { < nl > + " type " : " string " , < nl > + " id " : 3 , < nl > + " name " : " id " < nl > + } , < nl > + { < nl > + " type " : " string " , < nl > + " id " : 4 , < nl > + " name " : " sdp " < nl > } < nl > ] < nl > } < nl > diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > index ce7385b . . aab1775 100644 < nl > - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > @ @ - 10769 , 6 + 10769 , 21 @ @ < nl > < ref role = " wb18D " node = " 2vxDjotnUB8 " resolve = " randomId " / > < nl > < / node > < nl > < / node > < nl > + < node concept = " 2m7Kf5 " id = " 3Tolai5O6hO " role = " 2m0hLx " > < nl > + < property role = " 2m7DUN " value = " 2 " / > < nl > + < property role = " TrG5h " value = " index " / > < nl > + < node concept = " 2m5ndE " id = " 3Tolai5O6hU " role = " 2m7DVh " / > < nl > + < / node > < nl > + < node concept = " 2m7Kf5 " id = " 3Tolai5O6hX " role = " 2m0hLx " > < nl > + < property role = " 2m7DUN " value = " 3 " / > < nl > + < property role = " TrG5h " value = " id " / > < nl > + < node concept = " 2m5ndX " id = " 3Tolai5O6i5 " role = " 2m7DVh " / > < nl > + < / node > < nl > + < node concept = " 2m7Kf5 " id = " 3Tolai5O6i8 " role = " 2m0hLx " > < nl > + < property role = " 2m7DUN " value = " 4 " / > < nl > + < property role = " TrG5h " value = " sdp " / > < nl > + < node concept = " 2m5ndX " id = " 3Tolai5O6ii " role = " 2m7DVh " / > < nl > + < / node > < nl > < node concept = " Nu42z " id = " 3Tolai5NNTV " role = " 3BtCOu " > < nl > < property role = " Nu42W " value = " 03 " / > < nl > < / node > < nl > @ @ - 10780 , 6 + 10795 , 21 @ @ < nl > < property role = " NX6R2 " value = " Session Id of candidate " / > < nl > < ref role = " NX6Kv " node = " 3Tolai5NNYb " resolve = " sessionId " / > < nl > < / node > < nl > + < node concept = " NX1gA " id = " 3Tolai5O6ip " role = " NXodf " > < nl > + < property role = " NX6R2 " value = " Index of candidate " / > < nl > + < property role = " 1GSvIU " value = " full " / > < nl > + < ref role = " NX6Kv " node = " 3Tolai5O6hO " resolve = " index " / > < nl > + < / node > < nl > + < node concept = " NX1gA " id = " 3Tolai5O6iz " role = " NXodf " > < nl > + < property role = " NX6R2 " value = " Id of candidate " / > < nl > + < property role = " 1GSvIU " value = " full " / > < nl > + < ref role = " NX6Kv " node = " 3Tolai5O6hX " resolve = " id " / > < nl > + < / node > < nl > + < node concept = " NX1gA " id = " 3Tolai5O6iJ " role = " NXodf " > < nl > + < property role = " NX6R2 " value = " SDP of candidate " / > < nl > + < property role = " 1GSvIU " value = " full " / > < nl > + < ref role = " NX6Kv " node = " 3Tolai5O6i8 " resolve = " sdp " / > < nl > + < / node > < nl > < / node > < nl > < node concept = " 2m5naR " id = " 3Tolai5NNUQ " role = " 2m5mJr " > < nl > < property role = " TrG5h " value = " Offer " / > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > index 8dec812 . . 4c5960f 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > @ @ - 381 , 7 + 381 , 7 @ @ public class AAPromiseFunc : NSObject , ARPromiseFunc { < nl > < nl > extension ARPromise { < nl > convenience init ( closure : ( resolver : ARPromiseResolver ) - > ( ) ) { < nl > - super . init ( AAPromiseFunc ( closure : closure ) ) < nl > + self . init ( executor : AAPromiseFunc ( closure : closure ) ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift < nl > index e20b974 . . d65d367 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift < nl > @ @ - 19 , 6 + 19 , 6 @ @ class AAActorRuntime { < nl > ARCocoaFileSystemProxyProvider . setFileSystemRuntime ( CocoaFileSystemRuntime ( ) ) < nl > ARCocoaNetworkProxyProvider . setNetworkRuntime ( CocoaNetworkRuntime ( ) ) < nl > ARCocoaAssetsProxyProvider . setAssetsRuntimeWithARAssetsRuntime ( CocoaAssetsRuntime ( ) ) < nl > - < nl > + ARCocoaWebRTCProxyProvider . setWebRTCRuntime ( CocoaWebRTCRuntime ( ) ) < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > index aa669dc . . 3a6137d 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > @ @ - 70 , 9 + 70 , 9 @ @ class CocoaWebRTCPeerConnection : NSObject , ARWebRTCPeerConnection , RTCPeerConnec < nl > return ARPromise ( closure : { ( resolver ) - > ( ) in < nl > self . peerConnection . createAnswer ( RTCMediaConstraints ( ) , didCreate : { ( desc , error ) - > ( ) in < nl > if error = = nil { < nl > - resolver . result ( desc . description ) < nl > + resolver . result ( ARWebRTCSessionDescription ( type : " answer " , withSDP : desc . description ) ) < nl > } else { < nl > - resolver . error ( JavaLangException ( NSString : " error " ) ) < nl > + resolver . error ( JavaLangException ( NSString : " Error \ ( error . description ) " ) ) < nl > } < nl > } ) < nl > } ) < nl > @ @ - 82 , 34 + 82 , 33 @ @ class CocoaWebRTCPeerConnection : NSObject , ARWebRTCPeerConnection , RTCPeerConnec < nl > return ARPromise ( closure : { ( resolver ) - > ( ) in < nl > self . peerConnection . createOffer ( RTCMediaConstraints ( ) , didCreate : { ( desc , error ) - > ( ) in < nl > if error = = nil { < nl > - resolver . result ( desc . description ) < nl > + resolver . result ( ARWebRTCSessionDescription ( type : " offer " , withSDP : desc . description ) ) < nl > } else { < nl > - resolver . error ( JavaLangException ( NSString : " error " ) ) < nl > + resolver . error ( JavaLangException ( NSString : " Error \ ( error . description ) " ) ) < nl > } < nl > } ) < nl > } ) < nl > } < nl > < nl > - func setRemoteDescriptionWithType ( type : String , withSPD sdp : String ) - > ARPromise { < nl > + func setRemoteDescription ( description _ : ARWebRTCSessionDescription ) - > ARPromise { < nl > return ARPromise ( executor : AAPromiseFunc ( closure : { ( resolver ) - > ( ) in < nl > - self . peerConnection . setRemoteDescription ( RTCSessionDescription ( type : type , sdp : sdp ) , didSet : { ( error ) - > ( ) in < nl > + self . peerConnection . setRemoteDescription ( RTCSessionDescription ( type : description _ . type , sdp : description _ . sdp ) , didSet : { ( error ) - > ( ) in < nl > if ( error = = nil ) { < nl > - resolver . result ( JavaLangBoolean ( boolean : true ) ) < nl > + resolver . result ( description _ ) < nl > } else { < nl > - resolver . error ( JavaLangException ( NSString : " error " ) ) < nl > + resolver . error ( JavaLangException ( NSString : " Error \ ( error . description ) " ) ) < nl > } < nl > } ) < nl > } ) ) < nl > - < nl > } < nl > < nl > - func setLocalDescriptionWithType ( type : String , withSPD sdp : String ) - > ARPromise { < nl > + func setLocalDescription ( description _ : ARWebRTCSessionDescription ) - > ARPromise { < nl > return ARPromise ( executor : AAPromiseFunc ( closure : { ( resolver ) - > ( ) in < nl > - self . peerConnection . setLocalDescription ( RTCSessionDescription ( type : type , sdp : sdp ) , didSet : { ( error ) - > ( ) in < nl > + self . peerConnection . setLocalDescription ( RTCSessionDescription ( type : description _ . type , sdp : description _ . sdp ) , didSet : { ( error ) - > ( ) in < nl > if ( error = = nil ) { < nl > - resolver . result ( JavaLangBoolean ( boolean : true ) ) < nl > + resolver . result ( description _ ) < nl > } else { < nl > - resolver . error ( JavaLangException ( NSString : " error " ) ) < nl > + resolver . error ( JavaLangException ( NSString : " Error \ ( error . description ) " ) ) < nl > } < nl > } ) < nl > } ) ) < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCandidate . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCandidate . java < nl > index 1dc7f31 . . 3250d54 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCandidate . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCandidate . java < nl > @ @ - 17 , 9 + 17 , 15 @ @ import java . util . ArrayList ; < nl > public class ApiCandidate extends ApiWebRTCSignaling { < nl > < nl > private long sessionId ; < nl > + private int index ; < nl > + private String id ; < nl > + private String sdp ; < nl > < nl > - public ApiCandidate ( long sessionId ) { < nl > + public ApiCandidate ( long sessionId , int index , @ NotNull String id , @ NotNull String sdp ) { < nl > this . sessionId = sessionId ; < nl > + this . index = index ; < nl > + this . id = id ; < nl > + this . sdp = sdp ; < nl > } < nl > < nl > public ApiCandidate ( ) { < nl > @ @ - 34 , 20 + 40 , 49 @ @ public class ApiCandidate extends ApiWebRTCSignaling { < nl > return this . sessionId ; < nl > } < nl > < nl > + public int getIndex ( ) { < nl > + return this . index ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getId ( ) { < nl > + return this . id ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getSdp ( ) { < nl > + return this . sdp ; < nl > + } < nl > + < nl > @ Override < nl > public void parse ( BserValues values ) throws IOException { < nl > this . sessionId = values . getLong ( 1 ) ; < nl > + this . index = values . getInt ( 2 ) ; < nl > + this . id = values . getString ( 3 ) ; < nl > + this . sdp = values . getString ( 4 ) ; < nl > } < nl > < nl > @ Override < nl > public void serialize ( BserWriter writer ) throws IOException { < nl > writer . writeLong ( 1 , this . sessionId ) ; < nl > + writer . writeInt ( 2 , this . index ) ; < nl > + if ( this . id = = null ) { < nl > + throw new IOException ( ) ; < nl > + } < nl > + writer . writeString ( 3 , this . id ) ; < nl > + if ( this . sdp = = null ) { < nl > + throw new IOException ( ) ; < nl > + } < nl > + writer . writeString ( 4 , this . sdp ) ; < nl > } < nl > < nl > @ Override < nl > public String toString ( ) { < nl > String res = " struct Candidate { " ; < nl > res + = " sessionId = " + this . sessionId ; < nl > + res + = " , index = " + this . index ; < nl > + res + = " , id = " + this . id ; < nl > + res + = " , sdp = " + this . sdp ; < nl > res + = " } " ; < nl > return res ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > index c2de058 . . a72ebbc 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > @ @ - 3 , 20 + 3 , 31 @ @ package im . actor . core . modules . calls ; < nl > import org . jetbrains . annotations . Nullable ; < nl > < nl > import java . io . IOException ; < nl > + import java . util . ArrayList ; < nl > + import java . util . HashMap ; < nl > < nl > + import im . actor . core . api . ApiAnswer ; < nl > + import im . actor . core . api . ApiCandidate ; < nl > + import im . actor . core . api . ApiOffer ; < nl > import im . actor . core . api . ApiWebRTCSignaling ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . eventbus . EventBusActor ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . WebRTC ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . function . Consumer ; < nl > import im . actor . runtime . function . Function ; < nl > import im . actor . runtime . promise . Promise ; < nl > + import im . actor . runtime . promise . Promises ; < nl > + import im . actor . runtime . webrtc . WebRTCLocalStream ; < nl > import im . actor . runtime . webrtc . WebRTCPeerConnection ; < nl > < nl > public class CallActor extends EventBusActor { < nl > < nl > private static final String TAG = " CallActor " ; < nl > < nl > + private HashMap < Integer , HashMap < Long , ActorRef > > peerConnections = new HashMap < > ( ) ; < nl > + < nl > public CallActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > } < nl > @ @ - 25 , 8 + 36 , 22 @ @ public class CallActor extends EventBusActor { < nl > super ( busId , context ) ; < nl > } < nl > < nl > - public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { < nl > + / / < nl > + / / Signaling Wrappers < nl > + / / < nl > < nl > + public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { < nl > + if ( signaling instanceof ApiOffer ) { < nl > + ApiOffer offer = ( ApiOffer ) signaling ; < nl > + getPeer ( fromUid , fromDeviceId ) . send ( new PeerConnectionActor . OnOffer ( offer . getSdp ( ) ) ) ; < nl > + } else if ( signaling instanceof ApiAnswer ) { < nl > + ApiAnswer answer = ( ApiAnswer ) signaling ; < nl > + getPeer ( fromUid , fromDeviceId ) . send ( new PeerConnectionActor . OnAnswer ( answer . getSdp ( ) ) ) ; < nl > + } else if ( signaling instanceof ApiCandidate ) { < nl > + ApiCandidate candidate = ( ApiCandidate ) signaling ; < nl > + getPeer ( fromUid , fromDeviceId ) . send ( new PeerConnectionActor . OnCandidate ( candidate . getIndex ( ) , < nl > + candidate . getId ( ) , candidate . getSdp ( ) ) ) ; < nl > + } < nl > } < nl > < nl > public final void sendSignalingMessage ( int uid , long deviceId , ApiWebRTCSignaling signaling ) { < nl > @ @ - 58 , 37 + 83 , 32 @ @ public class CallActor extends EventBusActor { < nl > onSignalingMessage ( senderId , senderDeviceId , signaling ) ; < nl > } < nl > < nl > - protected Promise < PeerConnection > createConnection ( final int userId , final long deviceId ) { < nl > - return WebRTC . createPeerConnection ( ) . map ( new Function < WebRTCPeerConnection , PeerConnection > ( ) { < nl > - @ Override < nl > - public PeerConnection apply ( WebRTCPeerConnection webRTCPeerConnection ) { < nl > - return new PeerConnection ( userId , deviceId , webRTCPeerConnection ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - protected static class PeerConnection { < nl > - < nl > - private int uid ; < nl > - private long deviceId ; < nl > - private WebRTCPeerConnection webRTCPeerConnection ; < nl > - < nl > - public PeerConnection ( int uid , long deviceId , WebRTCPeerConnection webRTCPeerConnection ) { < nl > - this . uid = uid ; < nl > - this . deviceId = deviceId ; < nl > - this . webRTCPeerConnection = webRTCPeerConnection ; < nl > - } < nl > - < nl > - public int getUid ( ) { < nl > - return uid ; < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof PeerConnectionActor . DoAnswer ) { < nl > + PeerConnectionActor . DoAnswer answer = ( PeerConnectionActor . DoAnswer ) message ; < nl > + sendSignalingMessage ( answer . getUid ( ) , answer . getDeviceId ( ) , < nl > + new ApiAnswer ( 0 , answer . getSdp ( ) ) ) ; < nl > + } else if ( message instanceof PeerConnectionActor . DoOffer ) { < nl > + PeerConnectionActor . DoOffer offer = ( PeerConnectionActor . DoOffer ) message ; < nl > + sendSignalingMessage ( offer . getUid ( ) , offer . getDeviceId ( ) , < nl > + new ApiOffer ( 0 , offer . getSdp ( ) ) ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > } < nl > + } < nl > < nl > - public long getDeviceId ( ) { < nl > - return deviceId ; < nl > + protected ActorRef getPeer ( int uid , long deviceId ) { < nl > + if ( ! peerConnections . containsKey ( uid ) ) { < nl > + peerConnections . put ( uid , new HashMap < Long , ActorRef > ( ) ) ; < nl > } < nl > - < nl > - public WebRTCPeerConnection getWebRTCPeerConnection ( ) { < nl > - return webRTCPeerConnection ; < nl > + HashMap < Long , ActorRef > refs = peerConnections . get ( uid ) ; < nl > + if ( refs . containsKey ( deviceId ) ) { < nl > + return refs . get ( deviceId ) ; < nl > } < nl > + ActorRef ref = system ( ) . actorOf ( getPath ( ) + " / uid : " + uid + " / " + deviceId , < nl > + PeerConnectionActor . CONSTRUCTOR ( self ( ) , uid , deviceId , context ( ) ) ) ; < nl > + refs . put ( deviceId , ref ) ; < nl > + return ref ; < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > index 962f191 . . 09ddfc5 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > @ @ - 51 , 43 + 51 , 7 @ @ public class CallMasterActor extends CallActor { < nl > @ Override < nl > public void onDeviceConnected ( final int uid , final long deviceId ) { < nl > Log . d ( TAG , " onDeviceConnected " ) ; < nl > - final long sessionId = RandomUtils . nextRid ( ) ; < nl > - WebRTC . createPeerConnection ( ) . mapPromiseSelf ( new Function < WebRTCPeerConnection , Promise < WebRTCLocalStream > > ( ) { < nl > - @ Override < nl > - public Promise < WebRTCLocalStream > apply ( final WebRTCPeerConnection webRTCPeerConnection ) { < nl > - return WebRTC . getUserAudio ( ) . then ( new Consumer < WebRTCLocalStream > ( ) { < nl > - @ Override < nl > - public void apply ( WebRTCLocalStream stream ) { < nl > - webRTCPeerConnection . addOwnStream ( stream ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) . mapPromiseSelf ( new Function < WebRTCPeerConnection , Promise < Boolean > > ( ) { < nl > - @ Override < nl > - public Promise < Boolean > apply ( final WebRTCPeerConnection webRTCPeerConnection ) { < nl > - return webRTCPeerConnection . createOffer ( ) . then ( new Consumer < String > ( ) { < nl > - @ Override < nl > - public void apply ( String sdp ) { < nl > - sendSignalingMessage ( uid , deviceId , new ApiOffer ( sessionId , sdp ) ) ; < nl > - } < nl > - } ) . mapPromise ( new Function < String , Promise < Boolean > > ( ) { < nl > - @ Override < nl > - public Promise < Boolean > apply ( String s ) { < nl > - return webRTCPeerConnection . setLocalDescription ( " offer " , s ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) . then ( new Consumer < WebRTCPeerConnection > ( ) { < nl > - @ Override < nl > - public void apply ( WebRTCPeerConnection webRTCPeerConnection ) { < nl > - Log . d ( TAG , " onCallCreated : then " ) ; < nl > - } < nl > - } ) . failure ( new Consumer < Exception > ( ) { < nl > - @ Override < nl > - public void apply ( Exception e ) { < nl > - Log . d ( TAG , " onCallCreated : failure " ) ; < nl > - } < nl > - } ) . done ( self ( ) ) ; < nl > + getPeer ( uid , deviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 96 , 11 + 60 , 6 @ @ public class CallMasterActor extends CallActor { < nl > } < nl > < nl > @ Override < nl > - public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { < nl > - Log . d ( TAG , " onSignalingMessage " ) ; < nl > - } < nl > - < nl > - @ Override < nl > public void onBusShutdown ( ) { < nl > Log . d ( TAG , " onBusShutdown " ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > index 6d43f84 . . 8c2d660 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > @ @ - 1 , 8 + 1 , 16 @ @ < nl > package im . actor . core . modules . calls ; < nl > < nl > + import im . actor . core . api . ApiAnswer ; < nl > + import im . actor . core . api . ApiOffer ; < nl > import im . actor . core . api . ApiWebRTCSignaling ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . runtime . Log ; < nl > + import im . actor . runtime . WebRTC ; < nl > + import im . actor . runtime . function . Consumer ; < nl > + import im . actor . runtime . function . Function ; < nl > + import im . actor . runtime . promise . Promise ; < nl > + import im . actor . runtime . webrtc . WebRTCLocalStream ; < nl > + import im . actor . runtime . webrtc . WebRTCPeerConnection ; < nl > < nl > public class CallSlaveActor extends CallActor { < nl > < nl > @ @ - 29 , 11 + 37 , 6 @ @ public class CallSlaveActor extends CallActor { < nl > } < nl > < nl > @ Override < nl > - public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { < nl > - Log . d ( TAG , " onSignalingMessage " ) ; < nl > - } < nl > - < nl > - @ Override < nl > public void onBusShutdown ( ) { < nl > Log . d ( TAG , " onBusShutdown " ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > new file mode 100644 < nl > index 0000000 . . ed00252 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > @ @ - 0 , 0 + 1 , 447 @ @ < nl > + package im . actor . core . modules . calls ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import org . jetbrains . annotations . NotNull ; < nl > + < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . util . ModuleActor ; < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . WebRTC ; < nl > + import im . actor . runtime . actors . Actor ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . function . Consumer ; < nl > + import im . actor . runtime . function . Function ; < nl > + import im . actor . runtime . function . FunctionTupled2 ; < nl > + import im . actor . runtime . promise . Promise ; < nl > + import im . actor . runtime . promise . Promises ; < nl > + import im . actor . runtime . webrtc . WebRTCLocalStream ; < nl > + import im . actor . runtime . webrtc . WebRTCPeerConnection ; < nl > + import im . actor . runtime . webrtc . WebRTCPeerConnectionCallback ; < nl > + import im . actor . runtime . webrtc . WebRTCRemoteStream ; < nl > + import im . actor . runtime . webrtc . WebRTCSessionDescription ; < nl > + < nl > + public class PeerConnectionActor extends ModuleActor { < nl > + < nl > + @ NotNull < nl > + public static ActorCreator CONSTRUCTOR ( @ NotNull final ActorRef root , < nl > + final int uid , < nl > + final long deviceId , < nl > + @ NotNull final ModuleContext context ) { < nl > + return new ActorCreator ( ) { < nl > + @ Override < nl > + public Actor create ( ) { < nl > + return new PeerConnectionActor ( root , uid , deviceId , context ) ; < nl > + } < nl > + } ; < nl > + } < nl > + < nl > + private final String TAG ; < nl > + @ NotNull < nl > + private final ActorRef root ; < nl > + private final int uid ; < nl > + private final long deviceId ; < nl > + private boolean isReady = false ; < nl > + private boolean isReadyForCandidates = false ; < nl > + @ NotNull < nl > + private WebRTCPeerConnection peerConnection ; < nl > + @ NotNull < nl > + private State state = State . INITIALIZATION ; < nl > + < nl > + public PeerConnectionActor ( @ NotNull ActorRef root , int uid , long deviceId , @ NotNull ModuleContext context ) { < nl > + super ( context ) ; < nl > + TAG = " PeerConnection # " + uid + " ( " + deviceId + " ) " ; < nl > + this . root = root ; < nl > + this . uid = uid ; < nl > + this . deviceId = deviceId ; < nl > + } < nl > + < nl > + public int getUid ( ) { < nl > + return uid ; < nl > + } < nl > + < nl > + public long getDeviceId ( ) { < nl > + return deviceId ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + < nl > + Log . d ( TAG , " preStart " ) ; < nl > + < nl > + isReady = false ; < nl > + Promises . tuple ( WebRTC . createPeerConnection ( ) , WebRTC . getUserAudio ( ) ) . map ( new FunctionTupled2 < WebRTCPeerConnection , WebRTCLocalStream , WebRTCPeerConnection > ( ) { < nl > + @ Override < nl > + public WebRTCPeerConnection apply ( WebRTCPeerConnection webRTCPeerConnection , WebRTCLocalStream stream ) { < nl > + webRTCPeerConnection . addOwnStream ( stream ) ; < nl > + return webRTCPeerConnection ; < nl > + } < nl > + } ) . then ( new Consumer < WebRTCPeerConnection > ( ) { < nl > + @ Override < nl > + public void apply ( WebRTCPeerConnection webRTCPeerConnection ) { < nl > + Log . d ( TAG , " preStart : then " ) ; < nl > + PeerConnectionActor . this . peerConnection = webRTCPeerConnection ; < nl > + PeerConnectionActor . this . peerConnection . addCallback ( new WebRTCPeerConnectionCallback ( ) { < nl > + @ Override < nl > + public void onCandidate ( int label , String id , String candidate ) { < nl > + root . send ( new DoCandidate ( uid , deviceId , label , id , candidate ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onCandidatesEnd ( ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onStreamAdded ( WebRTCRemoteStream stream ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onStreamRemoved ( WebRTCRemoteStream stream ) { < nl > + < nl > + } < nl > + } ) ; < nl > + state = State . WAITING _ HANDSHAKE ; < nl > + isReady = true ; < nl > + unstashAll ( ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + e . printStackTrace ( ) ; < nl > + / / TODO : Handle It < nl > + < nl > + Log . d ( TAG , " preStart : error " ) ; < nl > + } < nl > + } ) . done ( self ( ) ) ; < nl > + } < nl > + < nl > + public void onOfferNeeded ( ) { < nl > + / / Ignore if we are not waiting for handshake < nl > + if ( state ! = State . WAITING _ HANDSHAKE ) { < nl > + return ; < nl > + } < nl > + < nl > + / / < nl > + / / Stages < nl > + / / 1 . Create Offer < nl > + / / 2 . Set Local Description < nl > + / / 3 . Send Offer < nl > + / / < nl > + < nl > + Log . d ( TAG , " onOfferNeeded " ) ; < nl > + isReady = false ; < nl > + peerConnection . createOffer ( ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > + @ Override < nl > + public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > + return peerConnection . setLocalDescription ( description ) ; < nl > + } < nl > + } ) . then ( new Consumer < WebRTCSessionDescription > ( ) { < nl > + @ Override < nl > + public void apply ( WebRTCSessionDescription description ) { < nl > + Log . d ( TAG , " onOfferNeeded : then " ) ; < nl > + root . send ( new DoOffer ( uid , deviceId , description . getSdp ( ) ) ) ; < nl > + state = State . WAITING _ ANSWER ; < nl > + isReady = true ; < nl > + unstashAll ( ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + Log . d ( TAG , " onOfferNeeded : failure " ) ; < nl > + e . printStackTrace ( ) ; < nl > + / / TODO : Handle It < nl > + } < nl > + } ) . done ( self ( ) ) ; < nl > + } < nl > + < nl > + public void onOffer ( @ NotNull String sdp ) { < nl > + / / Ignore if we are not waiting for handshake < nl > + if ( state ! = State . WAITING _ HANDSHAKE ) { < nl > + return ; < nl > + } < nl > + < nl > + / / < nl > + / / Stages < nl > + / / 1 . Set Remote Description < nl > + / / 2 . Create Answer < nl > + / / 3 . Set Local Description < nl > + / / 4 . Send Answer < nl > + / / 5 . Enter READY mode < nl > + / / < nl > + < nl > + Log . d ( TAG , " onOffer " ) ; < nl > + isReady = false ; < nl > + peerConnection . setRemoteDescription ( new WebRTCSessionDescription ( " offer " , sdp ) ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > + @ Override < nl > + public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > + return peerConnection . createAnswer ( ) ; < nl > + } < nl > + } ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > + @ Override < nl > + public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > + return peerConnection . setLocalDescription ( description ) ; < nl > + } < nl > + } ) . then ( new Consumer < WebRTCSessionDescription > ( ) { < nl > + @ Override < nl > + public void apply ( WebRTCSessionDescription description ) { < nl > + Log . d ( TAG , " onOffer : then " ) ; < nl > + root . send ( new DoAnswer ( uid , deviceId , description . getSdp ( ) ) ) ; < nl > + onHandShakeCompleted ( ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + Log . d ( TAG , " onOffer : failure " ) ; < nl > + e . printStackTrace ( ) ; < nl > + / / TODO : Handle It < nl > + } < nl > + } ) . done ( self ( ) ) ; < nl > + } < nl > + < nl > + public void onAnswer ( @ NotNull String sdp ) { < nl > + / / Ignore if we are not waiting for answer < nl > + if ( state ! = State . WAITING _ ANSWER ) { < nl > + return ; < nl > + } < nl > + < nl > + / / < nl > + / / Stages < nl > + / / 1 . Set Remote Description < nl > + / / 2 . Enter READY mode < nl > + / / < nl > + Log . d ( TAG , " onAnswer " ) ; < nl > + peerConnection . setRemoteDescription ( new WebRTCSessionDescription ( " answer " , sdp ) ) . then ( new Consumer < WebRTCSessionDescription > ( ) { < nl > + @ Override < nl > + public void apply ( WebRTCSessionDescription description ) { < nl > + Log . d ( TAG , " onAnswer : then " ) ; < nl > + onHandShakeCompleted ( ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + Log . d ( TAG , " onAnswer : failure " ) ; < nl > + e . printStackTrace ( ) ; < nl > + / / TODO : Handle It < nl > + } < nl > + } ) . done ( self ( ) ) ; < nl > + } < nl > + < nl > + private void onHandShakeCompleted ( ) { < nl > + isReady = true ; < nl > + isReadyForCandidates = true ; < nl > + state = State . READY ; < nl > + unstashAll ( ) ; < nl > + } < nl > + < nl > + public void onCandidate ( int index , @ NotNull String id , @ NotNull String sdp ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof OnOffer ) { < nl > + if ( ! isReady ) { < nl > + stash ( ) ; < nl > + } < nl > + onOffer ( ( ( OnOffer ) message ) . getSdp ( ) ) ; < nl > + } else if ( message instanceof OnAnswer ) { < nl > + if ( ! isReady ) { < nl > + stash ( ) ; < nl > + } < nl > + onAnswer ( ( ( OnAnswer ) message ) . getSdp ( ) ) ; < nl > + } else if ( message instanceof OnCandidate ) { < nl > + if ( ! isReady | | ! isReadyForCandidates ) { < nl > + stash ( ) ; < nl > + } < nl > + OnCandidate candidate = ( OnCandidate ) message ; < nl > + onCandidate ( candidate . getIndex ( ) , candidate . getId ( ) , candidate . getSdp ( ) ) ; < nl > + } else if ( message instanceof OnOfferNeeded ) { < nl > + if ( ! isReady ) { < nl > + stash ( ) ; < nl > + } < nl > + onOfferNeeded ( ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > + } < nl > + } < nl > + < nl > + / / < nl > + / / Outbound Messages < nl > + / / < nl > + < nl > + public static class DoOffer { < nl > + < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private int uid ; < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private long deviceId ; < nl > + @ NotNull < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private String sdp ; < nl > + < nl > + public DoOffer ( int uid , long deviceId , @ NotNull String sdp ) { < nl > + this . uid = uid ; < nl > + this . deviceId = deviceId ; < nl > + this . sdp = sdp ; < nl > + } < nl > + < nl > + public int getUid ( ) { < nl > + return uid ; < nl > + } < nl > + < nl > + public long getDeviceId ( ) { < nl > + return deviceId ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getSdp ( ) { < nl > + return sdp ; < nl > + } < nl > + } < nl > + < nl > + public static class DoAnswer { < nl > + < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private final int uid ; < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private final long deviceId ; < nl > + @ NotNull < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private final String sdp ; < nl > + < nl > + public DoAnswer ( int uid , long deviceId , @ NotNull String sdp ) { < nl > + this . uid = uid ; < nl > + this . deviceId = deviceId ; < nl > + this . sdp = sdp ; < nl > + } < nl > + < nl > + public int getUid ( ) { < nl > + return uid ; < nl > + } < nl > + < nl > + public long getDeviceId ( ) { < nl > + return deviceId ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getSdp ( ) { < nl > + return sdp ; < nl > + } < nl > + } < nl > + < nl > + public static class DoCandidate { < nl > + < nl > + private int uid ; < nl > + private long deviceId ; < nl > + private int index ; < nl > + private String id ; < nl > + private String sdp ; < nl > + < nl > + public DoCandidate ( int uid , long deviceId , int index , String id , String sdp ) { < nl > + this . uid = uid ; < nl > + this . deviceId = deviceId ; < nl > + this . index = index ; < nl > + this . id = id ; < nl > + this . sdp = sdp ; < nl > + } < nl > + < nl > + public int getUid ( ) { < nl > + return uid ; < nl > + } < nl > + < nl > + public long getDeviceId ( ) { < nl > + return deviceId ; < nl > + } < nl > + < nl > + public int getIndex ( ) { < nl > + return index ; < nl > + } < nl > + < nl > + public String getId ( ) { < nl > + return id ; < nl > + } < nl > + < nl > + public String getSdp ( ) { < nl > + return sdp ; < nl > + } < nl > + } < nl > + < nl > + / / < nl > + / / Inbound Messages < nl > + / / < nl > + < nl > + public static class OnOfferNeeded { < nl > + < nl > + } < nl > + < nl > + public static class OnOffer { < nl > + < nl > + @ NotNull < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private String sdp ; < nl > + < nl > + public OnOffer ( @ NotNull String sdp ) { < nl > + this . sdp = sdp ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getSdp ( ) { < nl > + return sdp ; < nl > + } < nl > + } < nl > + < nl > + public static class OnAnswer { < nl > + < nl > + @ NotNull < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private String sdp ; < nl > + < nl > + public OnAnswer ( @ NotNull String sdp ) { < nl > + this . sdp = sdp ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getSdp ( ) { < nl > + return sdp ; < nl > + } < nl > + } < nl > + < nl > + public static class OnCandidate { < nl > + < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private final int index ; < nl > + @ NotNull < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private final String sdp ; < nl > + @ NotNull < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private final String id ; < nl > + < nl > + public OnCandidate ( int index , @ NotNull String id , @ NotNull String sdp ) { < nl > + this . index = index ; < nl > + this . id = id ; < nl > + this . sdp = sdp ; < nl > + } < nl > + < nl > + public int getIndex ( ) { < nl > + return index ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getId ( ) { < nl > + return id ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getSdp ( ) { < nl > + return sdp ; < nl > + } < nl > + } < nl > + < nl > + private enum State { < nl > + INITIALIZATION , WAITING _ HANDSHAKE , WAITING _ ANSWER , READY < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCPeerConnection . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCPeerConnection . java < nl > index 42d3ef2 . . 228072f 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCPeerConnection . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCPeerConnection . java < nl > @ @ - 20 , 21 + 20 , 21 @ @ public interface WebRTCPeerConnection { < nl > @ ObjectiveCName ( " addOwnStream : " ) < nl > void addOwnStream ( @ NotNull WebRTCLocalStream stream ) ; < nl > < nl > - @ ObjectiveCName ( " setLocalDescriptionWithType : withSPD : " ) < nl > @ NotNull < nl > - Promise < Boolean > setLocalDescription ( @ NotNull String type , @ NotNull String sdp ) ; < nl > + @ ObjectiveCName ( " setLocalDescription : " ) < nl > + Promise < WebRTCSessionDescription > setLocalDescription ( @ NotNull WebRTCSessionDescription description ) ; < nl > < nl > - @ ObjectiveCName ( " setRemoteDescriptionWithType : withSPD : " ) < nl > @ NotNull < nl > - Promise < Boolean > setRemoteDescription ( @ NotNull String type , @ NotNull String sdp ) ; < nl > + @ ObjectiveCName ( " setRemoteDescription : " ) < nl > + Promise < WebRTCSessionDescription > setRemoteDescription ( @ NotNull WebRTCSessionDescription description ) ; < nl > < nl > - @ ObjectiveCName ( " creteOffer " ) < nl > @ NotNull < nl > - Promise < String > createOffer ( ) ; < nl > + @ ObjectiveCName ( " creteOffer " ) < nl > + Promise < WebRTCSessionDescription > createOffer ( ) ; < nl > < nl > - @ ObjectiveCName ( " createAnswer " ) < nl > @ NotNull < nl > - Promise < String > createAnswer ( ) ; < nl > + @ ObjectiveCName ( " createAnswer " ) < nl > + Promise < WebRTCSessionDescription > createAnswer ( ) ; < nl > < nl > @ ObjectiveCName ( " close " ) < nl > void close ( ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCSessionDescription . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCSessionDescription . java < nl > new file mode 100644 < nl > index 0000000 . . 458d904 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCSessionDescription . java < nl > @ @ - 0 , 0 + 1 , 32 @ @ < nl > + package im . actor . runtime . webrtc ; < nl > + < nl > + import com . google . j2objc . annotations . ObjectiveCName ; < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import org . jetbrains . annotations . NotNull ; < nl > + < nl > + public class WebRTCSessionDescription { < nl > + < nl > + @ NotNull < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private final String sdp ; < nl > + @ NotNull < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private final String type ; < nl > + < nl > + @ ObjectiveCName ( " initWithType : withSDP : " ) < nl > + public WebRTCSessionDescription ( @ NotNull String type , @ NotNull String sdp ) { < nl > + this . type = type ; < nl > + this . sdp = sdp ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getType ( ) { < nl > + return type ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getSdp ( ) { < nl > + return sdp ; < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - app / build . gradle b / actor - sdk / sdk - core - android / android - app / build . gradle 
 index b8e570a . . 1b95f00 100644 
 - - - a / actor - sdk / sdk - core - android / android - app / build . gradle 
 + + + b / actor - sdk / sdk - core - android / android - app / build . gradle 
 @ @ - 8 , 6 + 8 , 10 @ @ buildscript { 
 apply plugin : ' com . android . application ' 
 apply plugin : ' me . tatarka . retrolambda ' 
 
 + retrolambda { 
 + defaultMethods true 
 + } 
 + 
 android { 
 compileSdkVersion 23 
 buildToolsVersion " 23 . 0 . 3 " 
 diff - - git a / actor - sdk / sdk - core - android / android - google - maps / build . gradle b / actor - sdk / sdk - core - android / android - google - maps / build . gradle 
 index fd40672 . . e96c89e 100644 
 - - - a / actor - sdk / sdk - core - android / android - google - maps / build . gradle 
 + + + b / actor - sdk / sdk - core - android / android - google - maps / build . gradle 
 @ @ - 18 , 6 + 18 , 10 @ @ apply plugin : ' me . tatarka . retrolambda ' 
 group = ' im . actor ' 
 version = ' 0 . 0 . 1 ' 
 
 + retrolambda { 
 + defaultMethods true 
 + } 
 + 
 android { 
 compileSdkVersion 23 
 buildToolsVersion " 23 . 0 . 3 " 
 diff - - git a / actor - sdk / sdk - core - android / android - google - push / build . gradle b / actor - sdk / sdk - core - android / android - google - push / build . gradle 
 index f865300 . . bebd32c 100644 
 - - - a / actor - sdk / sdk - core - android / android - google - push / build . gradle 
 + + + b / actor - sdk / sdk - core - android / android - google - push / build . gradle 
 @ @ - 16 , 6 + 16 , 10 @ @ apply plugin : ' me . tatarka . retrolambda ' 
 group = ' im . actor ' 
 version = ' 0 . 0 . 1 ' 
 
 + retrolambda { 
 + defaultMethods true 
 + } 
 + 
 android { 
 compileSdkVersion 23 
 buildToolsVersion " 23 . 0 . 3 " 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / build . gradle b / actor - sdk / sdk - core - android / android - sdk / build . gradle 
 index 62099bb . . b0a437d 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / build . gradle 
 + + + b / actor - sdk / sdk - core - android / android - sdk / build . gradle 
 @ @ - 16 , 6 + 16 , 10 @ @ apply plugin : ' me . tatarka . retrolambda ' 
 group = ' im . actor ' 
 version = ' 0 . 0 . 1 ' 
 
 + retrolambda { 
 + defaultMethods true 
 + } 
 + 
 android { 
 
 compileSdkVersion 23 
 diff - - git a / actor - sdk / sdk - core / core / core - android / build . gradle b / actor - sdk / sdk - core / core / core - android / build . gradle 
 index 5401506 . . d794ea7 100644 
 - - - a / actor - sdk / sdk - core / core / core - android / build . gradle 
 + + + b / actor - sdk / sdk - core / core / core - android / build . gradle 
 @ @ - 23 , 6 + 23 , 10 @ @ android { 
 } 
 } 
 
 + retrolambda { 
 + defaultMethods true 
 + } 
 + 
 android { 
 
 sourceSets { 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / build . gradle b / actor - sdk / sdk - core / runtime / runtime - android / build . gradle 
 index c3a3e42 . . cb03948 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - android / build . gradle 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / build . gradle 
 @ @ - 22 , 6 + 22 , 10 @ @ android { 
 } 
 } 
 
 + retrolambda { 
 + defaultMethods true 
 + } 
 + 
 android { 
 sourceSets { 
 main { 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / ConsumerDouble . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / ConsumerDouble . java 
 new file mode 100644 
 index 0000000 . . 52e024b 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / ConsumerDouble . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package im . actor . runtime . function ; 
 + 
 + public interface ConsumerDouble < T1 , T2 > { 
 + void apply ( T1 t1 , T2 t2 ) ; 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promise . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promise . java 
 index 2e6fc3c . . 4707bf2 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promise . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promise . java 
 @ @ - 9 , 8 + 9 , 6 @ @ import java . util . ArrayList ; 
 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . function . Consumer ; 
 - import im . actor . runtime . function . Function ; 
 - import im . actor . runtime . function . Supplier ; 
 import im . actor . runtime . threading . SimpleDispatcher ; 
 import im . actor . runtime . threading . ThreadDispatcher ; 
 
 @ @ - 20 , 14 + 18 , 13 @ @ import im . actor . runtime . threading . ThreadDispatcher ; 
 * 
 * @ param < T > type of result 
 * / 
 - public class Promise < T > { 
 + public class Promise < T > implements PromiseMethods < T > { 
 
 / / 
 / / Dispatching parameters 
 / / 
 
 private final ArrayList < PromiseCallback < T > > callbacks = new ArrayList < > ( ) ; 
 - private final PromiseFunc < T > executor ; 
 private final SimpleDispatcher dispatcher ; 
 
 / / 
 @ @ - 37 , 25 + 34 , 20 @ @ public class Promise < T > { 
 private volatile T result ; 
 private volatile Exception exception ; 
 private volatile boolean isFinished ; 
 - / / private boolean isStarted ; 
 
 / * * 
 * Default constructor of promise 
 * / 
 @ ObjectiveCName ( " initWithExecutor : " ) 
 public Promise ( PromiseFunc < T > executor ) { 
 - this . executor = executor ; 
 this . dispatcher = ThreadDispatcher . peekDispatcher ( ) ; 
 this . dispatcher . dispatch ( ( ) - > executor . exec ( new PromiseResolver < > ( Promise . this ) ) ) ; 
 } 
 
 - / * * 
 - * Internal constructor to work - around lambda support issueses 
 - * / 
 - Promise ( ) { 
 - this . executor = null ; 
 - this . dispatcher = null ; 
 - } 
 + 
 + / / 
 + / / Receiving Results 
 + / / 
 
 / * * 
 * Handling successful result 
 @ @ - 115 , 28 + 107 , 6 @ @ public class Promise < T > { 
 } 
 
 / * * 
 - * Handling complete 
 - * 
 - * @ param callback callback for completion 
 - * @ return this 
 - * / 
 - @ ObjectiveCName ( " complete : " ) 
 - public synchronized Promise < T > complete ( final PromiseCallback < T > callback ) { 
 - if ( isFinished ) { 
 - dispatcher . dispatch ( ( ) - > { 
 - if ( exception ! = null ) { 
 - callback . onError ( exception ) ; 
 - } else { 
 - callback . onResult ( result ) ; 
 - } 
 - } ) ; 
 - } else { 
 - callbacks . add ( callback ) ; 
 - } 
 - return this ; 
 - } 
 - 
 - / * * 
 * Pipe result to resolver 
 * 
 * @ param resolver destination resolver 
 @ @ - 144 , 62 + 114 , 16 @ @ public class Promise < T > { 
 * / 
 @ ObjectiveCName ( " pipeTo : " ) 
 public synchronized Promise < T > pipeTo ( final PromiseResolver < T > resolver ) { 
 - complete ( new PromiseCallback < T > ( ) { 
 - @ Override 
 - public void onResult ( T t ) { 
 - resolver . result ( t ) ; 
 - } 
 - 
 - @ Override 
 - public void onError ( Exception e ) { 
 - resolver . error ( e ) ; 
 - } 
 - } ) ; 
 + then ( resolver : : result ) ; 
 + failure ( resolver : : error ) ; 
 return this ; 
 } 
 
 - / / / * * 
 - / / * Call this method to start promise execution 
 - / / * 
 - / / * @ param ref Scheduling actor 
 - / / * @ return this 
 - / / * / 
 - / / @ ObjectiveCName ( " doneWithRef : " ) 
 - / / public Promise < T > done ( ActorRef ref ) { 
 - / / return done ( new SimpleActorDispatcher ( ref ) ) ; 
 - / / } 
 - 
 - / / / * * 
 - / / * Call this method to start promise execution 
 - / / * 
 - / / * @ param dispatcher Scheduling dispatcher 
 - / / * @ return this 
 - / / * / 
 - / / @ ObjectiveCName ( " done : " ) 
 - / / public Promise < T > done ( SimpleDispatcher dispatcher ) { 
 - / / if ( isStarted ) { 
 - / / / / throw new RuntimeException ( " Promise already started ! " ) ; 
 - / / return this ; 
 - / / } 
 - / / isStarted = true ; 
 - / / dispatchActor = dispatcher ; 
 - / / dispatchActor . dispatch ( ( ) - > exec ( new PromiseResolver < > ( Promise . this , dispatchActor ) ) ) ; 
 - / / return this ; 
 - / / } 
 - 
 @ ObjectiveCName ( " log : " ) 
 public Promise < T > log ( final String TAG ) { 
 - return complete ( new PromiseCallback < T > ( ) { 
 - @ Override 
 - public void onResult ( T t ) { 
 - Log . d ( TAG , " Result : " + t ) ; 
 - } 
 - 
 - @ Override 
 - public void onError ( Exception e ) { 
 - Log . w ( TAG , " Error : " + e ) ; 
 - } 
 - } ) ; 
 + then ( t - > Log . d ( TAG , " Result : " + t ) ) ; 
 + failure ( e - > Log . w ( TAG , " Error : " + e ) ) ; 
 + return this ; 
 } 
 
 / * * 
 @ @ - 213 , 313 + 137 , 10 @ @ public class Promise < T > { 
 return ( Promise < R > ) this ; 
 } 
 
 - / * * 
 - * Getting result if finished 
 - * 
 - * @ return result 
 - * / 
 - @ ObjectiveCName ( " getResult " ) 
 - public T getResult ( ) { 
 - if ( ! isFinished ) { 
 - throw new RuntimeException ( " Promise is not finished ! " ) ; 
 - } 
 - return result ; 
 - } 
 - 
 - / * * 
 - * Is promise finished 
 - * 
 - * @ return result 
 - * / 
 - @ ObjectiveCName ( " isFinished " ) 
 - public boolean isFinished ( ) { 
 - return isFinished ; 
 - } 
 - 
 - / * * 
 - * Exception if promise finished with error 
 - * 
 - * @ return exception 
 - * / 
 - @ ObjectiveCName ( " getException " ) 
 - public Exception getException ( ) { 
 - if ( ! isFinished ) { 
 - throw new RuntimeException ( " Promise is not finished ! " ) ; 
 - } 
 - return exception ; 
 - } 
 - 
 - @ ObjectiveCName ( " mapIfNull : " ) 
 - public Promise < T > mapIfNull ( final Supplier < T > producer ) { 
 - final Promise < T > self = this ; 
 - return new Promise < T > ( new PromiseFunc < T > ( ) { 
 - @ Override 
 - public void exec ( final PromiseResolver < T > resolver ) { 
 - self . then ( new Consumer < T > ( ) { 
 - @ Override 
 - public void apply ( T t ) { 
 - if ( t = = null ) { 
 - try { 
 - t = producer . get ( ) ; 
 - } catch ( Exception e ) { 
 - resolver . error ( e ) ; 
 - return ; 
 - } 
 - resolver . result ( t ) ; 
 - } else { 
 - resolver . result ( t ) ; 
 - } 
 - } 
 - } ) ; 
 - self . failure ( new Consumer < Exception > ( ) { 
 - @ Override 
 - public void apply ( Exception e ) { 
 - resolver . error ( e ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ ObjectiveCName ( " mapIfNullPromise : " ) 
 - public Promise < T > mapIfNullPromise ( final Supplier < Promise < T > > producer ) { 
 - final Promise < T > self = this ; 
 - return new Promise < T > ( new PromiseFunc < T > ( ) { 
 - @ Override 
 - public void exec ( final PromiseResolver < T > resolver ) { 
 - self . then ( new Consumer < T > ( ) { 
 - @ Override 
 - public void apply ( T t ) { 
 - if ( t = = null ) { 
 - Promise < T > promise ; 
 - try { 
 - promise = producer . get ( ) ; 
 - } catch ( Exception e ) { 
 - resolver . error ( e ) ; 
 - return ; 
 - } 
 - promise . then ( new Consumer < T > ( ) { 
 - @ Override 
 - public void apply ( T t1 ) { 
 - resolver . result ( t1 ) ; 
 - } 
 - } ) ; 
 - promise . failure ( new Consumer < Exception > ( ) { 
 - @ Override 
 - public void apply ( Exception e ) { 
 - resolver . error ( e ) ; 
 - } 
 - } ) ; 
 - } else { 
 - resolver . result ( t ) ; 
 - } 
 - } 
 - } ) ; 
 - self . failure ( new Consumer < Exception > ( ) { 
 - @ Override 
 - public void apply ( Exception e ) { 
 - resolver . error ( e ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - / * * 
 - * Mapping result value of promise to another value 
 - * 
 - * @ param res mapping function 
 - * @ param < R > destination type 
 - * @ return promise 
 - * / 
 - @ ObjectiveCName ( " map : " ) 
 - public < R > Promise < R > map ( final Function < T , R > res ) { 
 - final Promise < T > self = this ; 
 - return new Promise < > ( new PromiseFunc < R > ( ) { 
 - @ Override 
 - public void exec ( @ NotNull PromiseResolver < R > resolver ) { 
 - self . then ( new Consumer < T > ( ) { 
 - @ Override 
 - public void apply ( T t ) { 
 - R r ; 
 - try { 
 - r = res . apply ( t ) ; 
 - } catch ( Exception e ) { 
 - e . printStackTrace ( ) ; 
 - resolver . tryError ( e ) ; 
 - return ; 
 - } 
 - resolver . tryResult ( r ) ; 
 - } 
 - } ) ; 
 - self . failure ( new Consumer < Exception > ( ) { 
 - @ Override 
 - public void apply ( Exception e ) { 
 - resolver . error ( e ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - / * * 
 - * Map result of promise to promise of value 
 - * 
 - * @ param res mapping function 
 - * @ param < R > destination type 
 - * @ return promise 
 - * / 
 - @ ObjectiveCName ( " mapPromise : " ) 
 - public < R > Promise < R > mapPromise ( final Function < T , Promise < R > > res ) { 
 - final Promise < T > self = this ; 
 - return new Promise < > ( new PromiseFunc < R > ( ) { 
 - @ Override 
 - public void exec ( @ NotNull PromiseResolver < R > resolver ) { 
 - self . then ( new Consumer < T > ( ) { 
 - @ Override 
 - public void apply ( T t ) { 
 - Promise < R > promise ; 
 - try { 
 - promise = res . apply ( t ) ; 
 - } catch ( Exception e ) { 
 - e . printStackTrace ( ) ; 
 - resolver . tryError ( e ) ; 
 - return ; 
 - } 
 - 
 - promise . then ( new Consumer < R > ( ) { 
 - @ Override 
 - public void apply ( R r ) { 
 - resolver . result ( r ) ; 
 - } 
 - } ) ; 
 - promise . failure ( new Consumer < Exception > ( ) { 
 - @ Override 
 - public void apply ( Exception e ) { 
 - resolver . error ( e ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) ; 
 - self . failure ( new Consumer < Exception > ( ) { 
 - @ Override 
 - public void apply ( Exception e ) { 
 - resolver . tryError ( e ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - public < R > Promise < T > mapPromiseSelf ( final Function < T , Promise < R > > res ) { 
 - return mapPromise ( new Function < T , Promise < T > > ( ) { 
 - @ Override 
 - public Promise < T > apply ( final T t ) { 
 - return res . apply ( t ) . map ( new Function < R , T > ( ) { 
 - @ Override 
 - public T apply ( R r ) { 
 - return t ; 
 - } 
 - } ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ ObjectiveCName ( " fallback : " ) 
 - public Promise < T > fallback ( final Function < Exception , Promise < T > > catchThen ) { 
 - final Promise < T > self = this ; 
 - return new Promise < T > ( new PromiseFunc < T > ( ) { 
 - @ Override 
 - public void exec ( final PromiseResolver < T > resolver ) { 
 - self . then ( new Consumer < T > ( ) { 
 - @ Override 
 - public void apply ( T t ) { 
 - resolver . result ( t ) ; 
 - } 
 - } ) ; 
 - self . failure ( new Consumer < Exception > ( ) { 
 - @ Override 
 - public void apply ( Exception e ) { 
 - Promise < T > res = catchThen . apply ( e ) ; 
 - res . then ( new Consumer < T > ( ) { 
 - @ Override 
 - public void apply ( T t ) { 
 - resolver . result ( t ) ; 
 - } 
 - } ) ; 
 - res . failure ( new Consumer < Exception > ( ) { 
 - @ Override 
 - public void apply ( Exception e ) { 
 - resolver . error ( e ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) ; 
 - } 
 
 - @ ObjectiveCName ( " afterVoid : " ) 
 - public < R > Promise < R > afterVoid ( final Supplier < Promise < R > > promiseSupplier ) { 
 - final Promise < T > self = this ; 
 - return new Promise < R > ( new PromiseFunc < R > ( ) { 
 - @ Override 
 - public void exec ( final PromiseResolver < R > resolver ) { 
 - self . then ( new Consumer < T > ( ) { 
 - @ Override 
 - public void apply ( T t ) { 
 - Promise < R > promise = promiseSupplier . get ( ) ; 
 - promise . then ( new Consumer < R > ( ) { 
 - @ Override 
 - public void apply ( R r ) { 
 - resolver . result ( r ) ; 
 - } 
 - } ) ; 
 - promise . failure ( new Consumer < Exception > ( ) { 
 - @ Override 
 - public void apply ( Exception e ) { 
 - resolver . error ( e ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) ; 
 - self . failure ( new Consumer < Exception > ( ) { 
 - @ Override 
 - public void apply ( Exception e ) { 
 - resolver . error ( e ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - / * * 
 - * Delivering result 
 - * / 
 - private void deliverResult ( ) { 
 - if ( callbacks . size ( ) > 0 ) { 
 - dispatcher . dispatch ( ( ) - > { 
 - if ( exception ! = null ) { 
 - for ( PromiseCallback < T > callback : callbacks ) { 
 - try { 
 - callback . onError ( exception ) ; 
 - } catch ( Exception e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - } 
 - } else { 
 - for ( PromiseCallback < T > callback : callbacks ) { 
 - try { 
 - callback . onResult ( result ) ; 
 - } catch ( Exception e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - } 
 - } 
 - callbacks . clear ( ) ; 
 - } ) ; 
 - } 
 - } 
 + / / 
 + / / Delivering Results 
 + / / 
 
 / * * 
 * Called when promise ended with error 
 @ @ - 575 , 4 + 196 , 32 @ @ public class Promise < T > { 
 } 
 result ( res ) ; 
 } 
 + 
 + / * * 
 + * Delivering result 
 + * / 
 + private void deliverResult ( ) { 
 + if ( callbacks . size ( ) > 0 ) { 
 + dispatcher . dispatch ( ( ) - > { 
 + if ( exception ! = null ) { 
 + for ( PromiseCallback < T > callback : callbacks ) { 
 + try { 
 + callback . onError ( exception ) ; 
 + } catch ( Exception e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + } else { 
 + for ( PromiseCallback < T > callback : callbacks ) { 
 + try { 
 + callback . onResult ( result ) ; 
 + } catch ( Exception e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + } 
 + callbacks . clear ( ) ; 
 + } ) ; 
 + } 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromiseMethods . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromiseMethods . java 
 new file mode 100644 
 index 0000000 . . daf8af7 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromiseMethods . java 
 @ @ - 0 , 0 + 1 , 283 @ @ 
 + package im . actor . runtime . promise ; 
 + 
 + import com . google . j2objc . annotations . ObjectiveCName ; 
 + 
 + import org . jetbrains . annotations . NotNull ; 
 + 
 + import im . actor . runtime . function . Consumer ; 
 + import im . actor . runtime . function . ConsumerDouble ; 
 + import im . actor . runtime . function . Function ; 
 + import im . actor . runtime . function . Supplier ; 
 + 
 + public interface PromiseMethods < T > { 
 + 
 + / * * 
 + * Handling successful result 
 + * 
 + * @ param then supplier for result 
 + * @ return this 
 + * / 
 + @ ObjectiveCName ( " then : " ) 
 + Promise < T > then ( final Consumer < T > then ) ; 
 + 
 + / * * 
 + * Handling failure 
 + * 
 + * @ param failure supplier for exception 
 + * @ return this 
 + * / 
 + @ ObjectiveCName ( " failure : " ) 
 + Promise < T > failure ( final Consumer < Exception > failure ) ; 
 + 
 + 
 + default Promise < T > complete ( final ConsumerDouble < T , Exception > completeHandler ) { 
 + then ( t - > completeHandler . apply ( t , null ) ) ; 
 + failure ( e - > completeHandler . apply ( null , e ) ) ; 
 + return ( Promise < T > ) this ; 
 + } 
 + 
 + @ ObjectiveCName ( " mapIfNull : " ) 
 + default Promise < T > mapIfNull ( final Supplier < T > producer ) { 
 + final Promise < T > self = ( Promise < T > ) this ; 
 + return new Promise < T > ( new PromiseFunc < T > ( ) { 
 + @ Override 
 + public void exec ( final PromiseResolver < T > resolver ) { 
 + self . then ( new Consumer < T > ( ) { 
 + @ Override 
 + public void apply ( T t ) { 
 + if ( t = = null ) { 
 + try { 
 + t = producer . get ( ) ; 
 + } catch ( Exception e ) { 
 + resolver . error ( e ) ; 
 + return ; 
 + } 
 + resolver . result ( t ) ; 
 + } else { 
 + resolver . result ( t ) ; 
 + } 
 + } 
 + } ) ; 
 + self . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + resolver . error ( e ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ ObjectiveCName ( " mapIfNullPromise : " ) 
 + default Promise < T > mapIfNullPromise ( final Supplier < Promise < T > > producer ) { 
 + final Promise < T > self = ( Promise < T > ) this ; 
 + return new Promise < T > ( new PromiseFunc < T > ( ) { 
 + @ Override 
 + public void exec ( final PromiseResolver < T > resolver ) { 
 + self . then ( new Consumer < T > ( ) { 
 + @ Override 
 + public void apply ( T t ) { 
 + if ( t = = null ) { 
 + Promise < T > promise ; 
 + try { 
 + promise = producer . get ( ) ; 
 + } catch ( Exception e ) { 
 + resolver . error ( e ) ; 
 + return ; 
 + } 
 + promise . then ( new Consumer < T > ( ) { 
 + @ Override 
 + public void apply ( T t1 ) { 
 + resolver . result ( t1 ) ; 
 + } 
 + } ) ; 
 + promise . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + resolver . error ( e ) ; 
 + } 
 + } ) ; 
 + } else { 
 + resolver . result ( t ) ; 
 + } 
 + } 
 + } ) ; 
 + self . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + resolver . error ( e ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + / * * 
 + * Mapping result value of promise to another value 
 + * 
 + * @ param res mapping function 
 + * @ param < R > destination type 
 + * @ return promise 
 + * / 
 + @ ObjectiveCName ( " map : " ) 
 + default < R > Promise < R > map ( final Function < T , R > res ) { 
 + final Promise < T > self = ( Promise < T > ) this ; 
 + return new Promise < > ( new PromiseFunc < R > ( ) { 
 + @ Override 
 + public void exec ( @ NotNull PromiseResolver < R > resolver ) { 
 + self . then ( new Consumer < T > ( ) { 
 + @ Override 
 + public void apply ( T t ) { 
 + R r ; 
 + try { 
 + r = res . apply ( t ) ; 
 + } catch ( Exception e ) { 
 + e . printStackTrace ( ) ; 
 + resolver . tryError ( e ) ; 
 + return ; 
 + } 
 + resolver . tryResult ( r ) ; 
 + } 
 + } ) ; 
 + self . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + resolver . error ( e ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + / * * 
 + * Map result of promise to promise of value 
 + * 
 + * @ param res mapping function 
 + * @ param < R > destination type 
 + * @ return promise 
 + * / 
 + @ ObjectiveCName ( " mapPromise : " ) 
 + default < R > Promise < R > mapPromise ( final Function < T , Promise < R > > res ) { 
 + final Promise < T > self = ( Promise < T > ) this ; 
 + return new Promise < > ( new PromiseFunc < R > ( ) { 
 + @ Override 
 + public void exec ( @ NotNull PromiseResolver < R > resolver ) { 
 + self . then ( new Consumer < T > ( ) { 
 + @ Override 
 + public void apply ( T t ) { 
 + Promise < R > promise ; 
 + try { 
 + promise = res . apply ( t ) ; 
 + } catch ( Exception e ) { 
 + e . printStackTrace ( ) ; 
 + resolver . tryError ( e ) ; 
 + return ; 
 + } 
 + 
 + promise . then ( new Consumer < R > ( ) { 
 + @ Override 
 + public void apply ( R r ) { 
 + resolver . result ( r ) ; 
 + } 
 + } ) ; 
 + promise . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + resolver . error ( e ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + self . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + resolver . tryError ( e ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + default < R > Promise < T > mapPromiseSelf ( final Function < T , Promise < R > > res ) { 
 + return mapPromise ( new Function < T , Promise < T > > ( ) { 
 + @ Override 
 + public Promise < T > apply ( final T t ) { 
 + return res . apply ( t ) . map ( new Function < R , T > ( ) { 
 + @ Override 
 + public T apply ( R r ) { 
 + return t ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ ObjectiveCName ( " fallback : " ) 
 + default Promise < T > fallback ( final Function < Exception , Promise < T > > catchThen ) { 
 + final Promise < T > self = ( Promise < T > ) this ; 
 + return new Promise < T > ( new PromiseFunc < T > ( ) { 
 + @ Override 
 + public void exec ( final PromiseResolver < T > resolver ) { 
 + self . then ( new Consumer < T > ( ) { 
 + @ Override 
 + public void apply ( T t ) { 
 + resolver . result ( t ) ; 
 + } 
 + } ) ; 
 + self . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + Promise < T > res = catchThen . apply ( e ) ; 
 + res . then ( new Consumer < T > ( ) { 
 + @ Override 
 + public void apply ( T t ) { 
 + resolver . result ( t ) ; 
 + } 
 + } ) ; 
 + res . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + resolver . error ( e ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ ObjectiveCName ( " afterVoid : " ) 
 + default < R > Promise < R > afterVoid ( final Supplier < Promise < R > > promiseSupplier ) { 
 + final Promise < T > self = ( Promise < T > ) this ; 
 + return new Promise < R > ( new PromiseFunc < R > ( ) { 
 + @ Override 
 + public void exec ( final PromiseResolver < R > resolver ) { 
 + self . then ( new Consumer < T > ( ) { 
 + @ Override 
 + public void apply ( T t ) { 
 + Promise < R > promise = promiseSupplier . get ( ) ; 
 + promise . then ( new Consumer < R > ( ) { 
 + @ Override 
 + public void apply ( R r ) { 
 + resolver . result ( r ) ; 
 + } 
 + } ) ; 
 + promise . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + resolver . error ( e ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + self . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + resolver . error ( e ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json 
 index 21881e7 . . c585341 100644 
 - - - a / actor - sdk / sdk - api / actor . json 
 + + + b / actor - sdk / sdk - api / actor . json 
 @ @ - 12512 , 6 + 12512 , 24 @ @ 
 " argument " : " sessionId " , 
 " category " : " full " , 
 " description " : " Session Id of candidate " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " index " , 
 + " category " : " full " , 
 + " description " : " Index of candidate " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " id " , 
 + " category " : " full " , 
 + " description " : " Id of candidate " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " sdp " , 
 + " category " : " full " , 
 + " description " : " SDP of candidate " 
 } 
 ] , 
 " trait " : { 
 @ @ - 12526 , 6 + 12544 , 21 @ @ 
 } , 
 " id " : 1 , 
 " name " : " sessionId " 
 + } , 
 + { 
 + " type " : " int32 " , 
 + " id " : 2 , 
 + " name " : " index " 
 + } , 
 + { 
 + " type " : " string " , 
 + " id " : 3 , 
 + " name " : " id " 
 + } , 
 + { 
 + " type " : " string " , 
 + " id " : 4 , 
 + " name " : " sdp " 
 } 
 ] 
 } 
 diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 index ce7385b . . aab1775 100644 
 - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 @ @ - 10769 , 6 + 10769 , 21 @ @ 
 < ref role = " wb18D " node = " 2vxDjotnUB8 " resolve = " randomId " / > 
 < / node > 
 < / node > 
 + < node concept = " 2m7Kf5 " id = " 3Tolai5O6hO " role = " 2m0hLx " > 
 + < property role = " 2m7DUN " value = " 2 " / > 
 + < property role = " TrG5h " value = " index " / > 
 + < node concept = " 2m5ndE " id = " 3Tolai5O6hU " role = " 2m7DVh " / > 
 + < / node > 
 + < node concept = " 2m7Kf5 " id = " 3Tolai5O6hX " role = " 2m0hLx " > 
 + < property role = " 2m7DUN " value = " 3 " / > 
 + < property role = " TrG5h " value = " id " / > 
 + < node concept = " 2m5ndX " id = " 3Tolai5O6i5 " role = " 2m7DVh " / > 
 + < / node > 
 + < node concept = " 2m7Kf5 " id = " 3Tolai5O6i8 " role = " 2m0hLx " > 
 + < property role = " 2m7DUN " value = " 4 " / > 
 + < property role = " TrG5h " value = " sdp " / > 
 + < node concept = " 2m5ndX " id = " 3Tolai5O6ii " role = " 2m7DVh " / > 
 + < / node > 
 < node concept = " Nu42z " id = " 3Tolai5NNTV " role = " 3BtCOu " > 
 < property role = " Nu42W " value = " 03 " / > 
 < / node > 
 @ @ - 10780 , 6 + 10795 , 21 @ @ 
 < property role = " NX6R2 " value = " Session Id of candidate " / > 
 < ref role = " NX6Kv " node = " 3Tolai5NNYb " resolve = " sessionId " / > 
 < / node > 
 + < node concept = " NX1gA " id = " 3Tolai5O6ip " role = " NXodf " > 
 + < property role = " NX6R2 " value = " Index of candidate " / > 
 + < property role = " 1GSvIU " value = " full " / > 
 + < ref role = " NX6Kv " node = " 3Tolai5O6hO " resolve = " index " / > 
 + < / node > 
 + < node concept = " NX1gA " id = " 3Tolai5O6iz " role = " NXodf " > 
 + < property role = " NX6R2 " value = " Id of candidate " / > 
 + < property role = " 1GSvIU " value = " full " / > 
 + < ref role = " NX6Kv " node = " 3Tolai5O6hX " resolve = " id " / > 
 + < / node > 
 + < node concept = " NX1gA " id = " 3Tolai5O6iJ " role = " NXodf " > 
 + < property role = " NX6R2 " value = " SDP of candidate " / > 
 + < property role = " 1GSvIU " value = " full " / > 
 + < ref role = " NX6Kv " node = " 3Tolai5O6i8 " resolve = " sdp " / > 
 + < / node > 
 < / node > 
 < node concept = " 2m5naR " id = " 3Tolai5NNUQ " role = " 2m5mJr " > 
 < property role = " TrG5h " value = " Offer " / > 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 index 8dec812 . . 4c5960f 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 @ @ - 381 , 7 + 381 , 7 @ @ public class AAPromiseFunc : NSObject , ARPromiseFunc { 
 
 extension ARPromise { 
 convenience init ( closure : ( resolver : ARPromiseResolver ) - > ( ) ) { 
 - super . init ( AAPromiseFunc ( closure : closure ) ) 
 + self . init ( executor : AAPromiseFunc ( closure : closure ) ) 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift 
 index e20b974 . . d65d367 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift 
 @ @ - 19 , 6 + 19 , 6 @ @ class AAActorRuntime { 
 ARCocoaFileSystemProxyProvider . setFileSystemRuntime ( CocoaFileSystemRuntime ( ) ) 
 ARCocoaNetworkProxyProvider . setNetworkRuntime ( CocoaNetworkRuntime ( ) ) 
 ARCocoaAssetsProxyProvider . setAssetsRuntimeWithARAssetsRuntime ( CocoaAssetsRuntime ( ) ) 
 - 
 + ARCocoaWebRTCProxyProvider . setWebRTCRuntime ( CocoaWebRTCRuntime ( ) ) 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 index aa669dc . . 3a6137d 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 @ @ - 70 , 9 + 70 , 9 @ @ class CocoaWebRTCPeerConnection : NSObject , ARWebRTCPeerConnection , RTCPeerConnec 
 return ARPromise ( closure : { ( resolver ) - > ( ) in 
 self . peerConnection . createAnswer ( RTCMediaConstraints ( ) , didCreate : { ( desc , error ) - > ( ) in 
 if error = = nil { 
 - resolver . result ( desc . description ) 
 + resolver . result ( ARWebRTCSessionDescription ( type : " answer " , withSDP : desc . description ) ) 
 } else { 
 - resolver . error ( JavaLangException ( NSString : " error " ) ) 
 + resolver . error ( JavaLangException ( NSString : " Error \ ( error . description ) " ) ) 
 } 
 } ) 
 } ) 
 @ @ - 82 , 34 + 82 , 33 @ @ class CocoaWebRTCPeerConnection : NSObject , ARWebRTCPeerConnection , RTCPeerConnec 
 return ARPromise ( closure : { ( resolver ) - > ( ) in 
 self . peerConnection . createOffer ( RTCMediaConstraints ( ) , didCreate : { ( desc , error ) - > ( ) in 
 if error = = nil { 
 - resolver . result ( desc . description ) 
 + resolver . result ( ARWebRTCSessionDescription ( type : " offer " , withSDP : desc . description ) ) 
 } else { 
 - resolver . error ( JavaLangException ( NSString : " error " ) ) 
 + resolver . error ( JavaLangException ( NSString : " Error \ ( error . description ) " ) ) 
 } 
 } ) 
 } ) 
 } 
 
 - func setRemoteDescriptionWithType ( type : String , withSPD sdp : String ) - > ARPromise { 
 + func setRemoteDescription ( description _ : ARWebRTCSessionDescription ) - > ARPromise { 
 return ARPromise ( executor : AAPromiseFunc ( closure : { ( resolver ) - > ( ) in 
 - self . peerConnection . setRemoteDescription ( RTCSessionDescription ( type : type , sdp : sdp ) , didSet : { ( error ) - > ( ) in 
 + self . peerConnection . setRemoteDescription ( RTCSessionDescription ( type : description _ . type , sdp : description _ . sdp ) , didSet : { ( error ) - > ( ) in 
 if ( error = = nil ) { 
 - resolver . result ( JavaLangBoolean ( boolean : true ) ) 
 + resolver . result ( description _ ) 
 } else { 
 - resolver . error ( JavaLangException ( NSString : " error " ) ) 
 + resolver . error ( JavaLangException ( NSString : " Error \ ( error . description ) " ) ) 
 } 
 } ) 
 } ) ) 
 - 
 } 
 
 - func setLocalDescriptionWithType ( type : String , withSPD sdp : String ) - > ARPromise { 
 + func setLocalDescription ( description _ : ARWebRTCSessionDescription ) - > ARPromise { 
 return ARPromise ( executor : AAPromiseFunc ( closure : { ( resolver ) - > ( ) in 
 - self . peerConnection . setLocalDescription ( RTCSessionDescription ( type : type , sdp : sdp ) , didSet : { ( error ) - > ( ) in 
 + self . peerConnection . setLocalDescription ( RTCSessionDescription ( type : description _ . type , sdp : description _ . sdp ) , didSet : { ( error ) - > ( ) in 
 if ( error = = nil ) { 
 - resolver . result ( JavaLangBoolean ( boolean : true ) ) 
 + resolver . result ( description _ ) 
 } else { 
 - resolver . error ( JavaLangException ( NSString : " error " ) ) 
 + resolver . error ( JavaLangException ( NSString : " Error \ ( error . description ) " ) ) 
 } 
 } ) 
 } ) ) 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCandidate . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCandidate . java 
 index 1dc7f31 . . 3250d54 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCandidate . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCandidate . java 
 @ @ - 17 , 9 + 17 , 15 @ @ import java . util . ArrayList ; 
 public class ApiCandidate extends ApiWebRTCSignaling { 
 
 private long sessionId ; 
 + private int index ; 
 + private String id ; 
 + private String sdp ; 
 
 - public ApiCandidate ( long sessionId ) { 
 + public ApiCandidate ( long sessionId , int index , @ NotNull String id , @ NotNull String sdp ) { 
 this . sessionId = sessionId ; 
 + this . index = index ; 
 + this . id = id ; 
 + this . sdp = sdp ; 
 } 
 
 public ApiCandidate ( ) { 
 @ @ - 34 , 20 + 40 , 49 @ @ public class ApiCandidate extends ApiWebRTCSignaling { 
 return this . sessionId ; 
 } 
 
 + public int getIndex ( ) { 
 + return this . index ; 
 + } 
 + 
 + @ NotNull 
 + public String getId ( ) { 
 + return this . id ; 
 + } 
 + 
 + @ NotNull 
 + public String getSdp ( ) { 
 + return this . sdp ; 
 + } 
 + 
 @ Override 
 public void parse ( BserValues values ) throws IOException { 
 this . sessionId = values . getLong ( 1 ) ; 
 + this . index = values . getInt ( 2 ) ; 
 + this . id = values . getString ( 3 ) ; 
 + this . sdp = values . getString ( 4 ) ; 
 } 
 
 @ Override 
 public void serialize ( BserWriter writer ) throws IOException { 
 writer . writeLong ( 1 , this . sessionId ) ; 
 + writer . writeInt ( 2 , this . index ) ; 
 + if ( this . id = = null ) { 
 + throw new IOException ( ) ; 
 + } 
 + writer . writeString ( 3 , this . id ) ; 
 + if ( this . sdp = = null ) { 
 + throw new IOException ( ) ; 
 + } 
 + writer . writeString ( 4 , this . sdp ) ; 
 } 
 
 @ Override 
 public String toString ( ) { 
 String res = " struct Candidate { " ; 
 res + = " sessionId = " + this . sessionId ; 
 + res + = " , index = " + this . index ; 
 + res + = " , id = " + this . id ; 
 + res + = " , sdp = " + this . sdp ; 
 res + = " } " ; 
 return res ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 index c2de058 . . a72ebbc 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 @ @ - 3 , 20 + 3 , 31 @ @ package im . actor . core . modules . calls ; 
 import org . jetbrains . annotations . Nullable ; 
 
 import java . io . IOException ; 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 
 + import im . actor . core . api . ApiAnswer ; 
 + import im . actor . core . api . ApiCandidate ; 
 + import im . actor . core . api . ApiOffer ; 
 import im . actor . core . api . ApiWebRTCSignaling ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . eventbus . EventBusActor ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . WebRTC ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . function . Consumer ; 
 import im . actor . runtime . function . Function ; 
 import im . actor . runtime . promise . Promise ; 
 + import im . actor . runtime . promise . Promises ; 
 + import im . actor . runtime . webrtc . WebRTCLocalStream ; 
 import im . actor . runtime . webrtc . WebRTCPeerConnection ; 
 
 public class CallActor extends EventBusActor { 
 
 private static final String TAG = " CallActor " ; 
 
 + private HashMap < Integer , HashMap < Long , ActorRef > > peerConnections = new HashMap < > ( ) ; 
 + 
 public CallActor ( ModuleContext context ) { 
 super ( context ) ; 
 } 
 @ @ - 25 , 8 + 36 , 22 @ @ public class CallActor extends EventBusActor { 
 super ( busId , context ) ; 
 } 
 
 - public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { 
 + / / 
 + / / Signaling Wrappers 
 + / / 
 
 + public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { 
 + if ( signaling instanceof ApiOffer ) { 
 + ApiOffer offer = ( ApiOffer ) signaling ; 
 + getPeer ( fromUid , fromDeviceId ) . send ( new PeerConnectionActor . OnOffer ( offer . getSdp ( ) ) ) ; 
 + } else if ( signaling instanceof ApiAnswer ) { 
 + ApiAnswer answer = ( ApiAnswer ) signaling ; 
 + getPeer ( fromUid , fromDeviceId ) . send ( new PeerConnectionActor . OnAnswer ( answer . getSdp ( ) ) ) ; 
 + } else if ( signaling instanceof ApiCandidate ) { 
 + ApiCandidate candidate = ( ApiCandidate ) signaling ; 
 + getPeer ( fromUid , fromDeviceId ) . send ( new PeerConnectionActor . OnCandidate ( candidate . getIndex ( ) , 
 + candidate . getId ( ) , candidate . getSdp ( ) ) ) ; 
 + } 
 } 
 
 public final void sendSignalingMessage ( int uid , long deviceId , ApiWebRTCSignaling signaling ) { 
 @ @ - 58 , 37 + 83 , 32 @ @ public class CallActor extends EventBusActor { 
 onSignalingMessage ( senderId , senderDeviceId , signaling ) ; 
 } 
 
 - protected Promise < PeerConnection > createConnection ( final int userId , final long deviceId ) { 
 - return WebRTC . createPeerConnection ( ) . map ( new Function < WebRTCPeerConnection , PeerConnection > ( ) { 
 - @ Override 
 - public PeerConnection apply ( WebRTCPeerConnection webRTCPeerConnection ) { 
 - return new PeerConnection ( userId , deviceId , webRTCPeerConnection ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - protected static class PeerConnection { 
 - 
 - private int uid ; 
 - private long deviceId ; 
 - private WebRTCPeerConnection webRTCPeerConnection ; 
 - 
 - public PeerConnection ( int uid , long deviceId , WebRTCPeerConnection webRTCPeerConnection ) { 
 - this . uid = uid ; 
 - this . deviceId = deviceId ; 
 - this . webRTCPeerConnection = webRTCPeerConnection ; 
 - } 
 - 
 - public int getUid ( ) { 
 - return uid ; 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof PeerConnectionActor . DoAnswer ) { 
 + PeerConnectionActor . DoAnswer answer = ( PeerConnectionActor . DoAnswer ) message ; 
 + sendSignalingMessage ( answer . getUid ( ) , answer . getDeviceId ( ) , 
 + new ApiAnswer ( 0 , answer . getSdp ( ) ) ) ; 
 + } else if ( message instanceof PeerConnectionActor . DoOffer ) { 
 + PeerConnectionActor . DoOffer offer = ( PeerConnectionActor . DoOffer ) message ; 
 + sendSignalingMessage ( offer . getUid ( ) , offer . getDeviceId ( ) , 
 + new ApiOffer ( 0 , offer . getSdp ( ) ) ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 } 
 + } 
 
 - public long getDeviceId ( ) { 
 - return deviceId ; 
 + protected ActorRef getPeer ( int uid , long deviceId ) { 
 + if ( ! peerConnections . containsKey ( uid ) ) { 
 + peerConnections . put ( uid , new HashMap < Long , ActorRef > ( ) ) ; 
 } 
 - 
 - public WebRTCPeerConnection getWebRTCPeerConnection ( ) { 
 - return webRTCPeerConnection ; 
 + HashMap < Long , ActorRef > refs = peerConnections . get ( uid ) ; 
 + if ( refs . containsKey ( deviceId ) ) { 
 + return refs . get ( deviceId ) ; 
 } 
 + ActorRef ref = system ( ) . actorOf ( getPath ( ) + " / uid : " + uid + " / " + deviceId , 
 + PeerConnectionActor . CONSTRUCTOR ( self ( ) , uid , deviceId , context ( ) ) ) ; 
 + refs . put ( deviceId , ref ) ; 
 + return ref ; 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 index 962f191 . . 09ddfc5 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 @ @ - 51 , 43 + 51 , 7 @ @ public class CallMasterActor extends CallActor { 
 @ Override 
 public void onDeviceConnected ( final int uid , final long deviceId ) { 
 Log . d ( TAG , " onDeviceConnected " ) ; 
 - final long sessionId = RandomUtils . nextRid ( ) ; 
 - WebRTC . createPeerConnection ( ) . mapPromiseSelf ( new Function < WebRTCPeerConnection , Promise < WebRTCLocalStream > > ( ) { 
 - @ Override 
 - public Promise < WebRTCLocalStream > apply ( final WebRTCPeerConnection webRTCPeerConnection ) { 
 - return WebRTC . getUserAudio ( ) . then ( new Consumer < WebRTCLocalStream > ( ) { 
 - @ Override 
 - public void apply ( WebRTCLocalStream stream ) { 
 - webRTCPeerConnection . addOwnStream ( stream ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) . mapPromiseSelf ( new Function < WebRTCPeerConnection , Promise < Boolean > > ( ) { 
 - @ Override 
 - public Promise < Boolean > apply ( final WebRTCPeerConnection webRTCPeerConnection ) { 
 - return webRTCPeerConnection . createOffer ( ) . then ( new Consumer < String > ( ) { 
 - @ Override 
 - public void apply ( String sdp ) { 
 - sendSignalingMessage ( uid , deviceId , new ApiOffer ( sessionId , sdp ) ) ; 
 - } 
 - } ) . mapPromise ( new Function < String , Promise < Boolean > > ( ) { 
 - @ Override 
 - public Promise < Boolean > apply ( String s ) { 
 - return webRTCPeerConnection . setLocalDescription ( " offer " , s ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) . then ( new Consumer < WebRTCPeerConnection > ( ) { 
 - @ Override 
 - public void apply ( WebRTCPeerConnection webRTCPeerConnection ) { 
 - Log . d ( TAG , " onCallCreated : then " ) ; 
 - } 
 - } ) . failure ( new Consumer < Exception > ( ) { 
 - @ Override 
 - public void apply ( Exception e ) { 
 - Log . d ( TAG , " onCallCreated : failure " ) ; 
 - } 
 - } ) . done ( self ( ) ) ; 
 + getPeer ( uid , deviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; 
 } 
 
 @ Override 
 @ @ - 96 , 11 + 60 , 6 @ @ public class CallMasterActor extends CallActor { 
 } 
 
 @ Override 
 - public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { 
 - Log . d ( TAG , " onSignalingMessage " ) ; 
 - } 
 - 
 - @ Override 
 public void onBusShutdown ( ) { 
 Log . d ( TAG , " onBusShutdown " ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 index 6d43f84 . . 8c2d660 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 @ @ - 1 , 8 + 1 , 16 @ @ 
 package im . actor . core . modules . calls ; 
 
 + import im . actor . core . api . ApiAnswer ; 
 + import im . actor . core . api . ApiOffer ; 
 import im . actor . core . api . ApiWebRTCSignaling ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . runtime . Log ; 
 + import im . actor . runtime . WebRTC ; 
 + import im . actor . runtime . function . Consumer ; 
 + import im . actor . runtime . function . Function ; 
 + import im . actor . runtime . promise . Promise ; 
 + import im . actor . runtime . webrtc . WebRTCLocalStream ; 
 + import im . actor . runtime . webrtc . WebRTCPeerConnection ; 
 
 public class CallSlaveActor extends CallActor { 
 
 @ @ - 29 , 11 + 37 , 6 @ @ public class CallSlaveActor extends CallActor { 
 } 
 
 @ Override 
 - public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { 
 - Log . d ( TAG , " onSignalingMessage " ) ; 
 - } 
 - 
 - @ Override 
 public void onBusShutdown ( ) { 
 Log . d ( TAG , " onBusShutdown " ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 new file mode 100644 
 index 0000000 . . ed00252 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 @ @ - 0 , 0 + 1 , 447 @ @ 
 + package im . actor . core . modules . calls ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import org . jetbrains . annotations . NotNull ; 
 + 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . util . ModuleActor ; 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . WebRTC ; 
 + import im . actor . runtime . actors . Actor ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . function . Consumer ; 
 + import im . actor . runtime . function . Function ; 
 + import im . actor . runtime . function . FunctionTupled2 ; 
 + import im . actor . runtime . promise . Promise ; 
 + import im . actor . runtime . promise . Promises ; 
 + import im . actor . runtime . webrtc . WebRTCLocalStream ; 
 + import im . actor . runtime . webrtc . WebRTCPeerConnection ; 
 + import im . actor . runtime . webrtc . WebRTCPeerConnectionCallback ; 
 + import im . actor . runtime . webrtc . WebRTCRemoteStream ; 
 + import im . actor . runtime . webrtc . WebRTCSessionDescription ; 
 + 
 + public class PeerConnectionActor extends ModuleActor { 
 + 
 + @ NotNull 
 + public static ActorCreator CONSTRUCTOR ( @ NotNull final ActorRef root , 
 + final int uid , 
 + final long deviceId , 
 + @ NotNull final ModuleContext context ) { 
 + return new ActorCreator ( ) { 
 + @ Override 
 + public Actor create ( ) { 
 + return new PeerConnectionActor ( root , uid , deviceId , context ) ; 
 + } 
 + } ; 
 + } 
 + 
 + private final String TAG ; 
 + @ NotNull 
 + private final ActorRef root ; 
 + private final int uid ; 
 + private final long deviceId ; 
 + private boolean isReady = false ; 
 + private boolean isReadyForCandidates = false ; 
 + @ NotNull 
 + private WebRTCPeerConnection peerConnection ; 
 + @ NotNull 
 + private State state = State . INITIALIZATION ; 
 + 
 + public PeerConnectionActor ( @ NotNull ActorRef root , int uid , long deviceId , @ NotNull ModuleContext context ) { 
 + super ( context ) ; 
 + TAG = " PeerConnection # " + uid + " ( " + deviceId + " ) " ; 
 + this . root = root ; 
 + this . uid = uid ; 
 + this . deviceId = deviceId ; 
 + } 
 + 
 + public int getUid ( ) { 
 + return uid ; 
 + } 
 + 
 + public long getDeviceId ( ) { 
 + return deviceId ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + 
 + Log . d ( TAG , " preStart " ) ; 
 + 
 + isReady = false ; 
 + Promises . tuple ( WebRTC . createPeerConnection ( ) , WebRTC . getUserAudio ( ) ) . map ( new FunctionTupled2 < WebRTCPeerConnection , WebRTCLocalStream , WebRTCPeerConnection > ( ) { 
 + @ Override 
 + public WebRTCPeerConnection apply ( WebRTCPeerConnection webRTCPeerConnection , WebRTCLocalStream stream ) { 
 + webRTCPeerConnection . addOwnStream ( stream ) ; 
 + return webRTCPeerConnection ; 
 + } 
 + } ) . then ( new Consumer < WebRTCPeerConnection > ( ) { 
 + @ Override 
 + public void apply ( WebRTCPeerConnection webRTCPeerConnection ) { 
 + Log . d ( TAG , " preStart : then " ) ; 
 + PeerConnectionActor . this . peerConnection = webRTCPeerConnection ; 
 + PeerConnectionActor . this . peerConnection . addCallback ( new WebRTCPeerConnectionCallback ( ) { 
 + @ Override 
 + public void onCandidate ( int label , String id , String candidate ) { 
 + root . send ( new DoCandidate ( uid , deviceId , label , id , candidate ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onCandidatesEnd ( ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onStreamAdded ( WebRTCRemoteStream stream ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onStreamRemoved ( WebRTCRemoteStream stream ) { 
 + 
 + } 
 + } ) ; 
 + state = State . WAITING _ HANDSHAKE ; 
 + isReady = true ; 
 + unstashAll ( ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + e . printStackTrace ( ) ; 
 + / / TODO : Handle It 
 + 
 + Log . d ( TAG , " preStart : error " ) ; 
 + } 
 + } ) . done ( self ( ) ) ; 
 + } 
 + 
 + public void onOfferNeeded ( ) { 
 + / / Ignore if we are not waiting for handshake 
 + if ( state ! = State . WAITING _ HANDSHAKE ) { 
 + return ; 
 + } 
 + 
 + / / 
 + / / Stages 
 + / / 1 . Create Offer 
 + / / 2 . Set Local Description 
 + / / 3 . Send Offer 
 + / / 
 + 
 + Log . d ( TAG , " onOfferNeeded " ) ; 
 + isReady = false ; 
 + peerConnection . createOffer ( ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 + @ Override 
 + public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 + return peerConnection . setLocalDescription ( description ) ; 
 + } 
 + } ) . then ( new Consumer < WebRTCSessionDescription > ( ) { 
 + @ Override 
 + public void apply ( WebRTCSessionDescription description ) { 
 + Log . d ( TAG , " onOfferNeeded : then " ) ; 
 + root . send ( new DoOffer ( uid , deviceId , description . getSdp ( ) ) ) ; 
 + state = State . WAITING _ ANSWER ; 
 + isReady = true ; 
 + unstashAll ( ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + Log . d ( TAG , " onOfferNeeded : failure " ) ; 
 + e . printStackTrace ( ) ; 
 + / / TODO : Handle It 
 + } 
 + } ) . done ( self ( ) ) ; 
 + } 
 + 
 + public void onOffer ( @ NotNull String sdp ) { 
 + / / Ignore if we are not waiting for handshake 
 + if ( state ! = State . WAITING _ HANDSHAKE ) { 
 + return ; 
 + } 
 + 
 + / / 
 + / / Stages 
 + / / 1 . Set Remote Description 
 + / / 2 . Create Answer 
 + / / 3 . Set Local Description 
 + / / 4 . Send Answer 
 + / / 5 . Enter READY mode 
 + / / 
 + 
 + Log . d ( TAG , " onOffer " ) ; 
 + isReady = false ; 
 + peerConnection . setRemoteDescription ( new WebRTCSessionDescription ( " offer " , sdp ) ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 + @ Override 
 + public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 + return peerConnection . createAnswer ( ) ; 
 + } 
 + } ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 + @ Override 
 + public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 + return peerConnection . setLocalDescription ( description ) ; 
 + } 
 + } ) . then ( new Consumer < WebRTCSessionDescription > ( ) { 
 + @ Override 
 + public void apply ( WebRTCSessionDescription description ) { 
 + Log . d ( TAG , " onOffer : then " ) ; 
 + root . send ( new DoAnswer ( uid , deviceId , description . getSdp ( ) ) ) ; 
 + onHandShakeCompleted ( ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + Log . d ( TAG , " onOffer : failure " ) ; 
 + e . printStackTrace ( ) ; 
 + / / TODO : Handle It 
 + } 
 + } ) . done ( self ( ) ) ; 
 + } 
 + 
 + public void onAnswer ( @ NotNull String sdp ) { 
 + / / Ignore if we are not waiting for answer 
 + if ( state ! = State . WAITING _ ANSWER ) { 
 + return ; 
 + } 
 + 
 + / / 
 + / / Stages 
 + / / 1 . Set Remote Description 
 + / / 2 . Enter READY mode 
 + / / 
 + Log . d ( TAG , " onAnswer " ) ; 
 + peerConnection . setRemoteDescription ( new WebRTCSessionDescription ( " answer " , sdp ) ) . then ( new Consumer < WebRTCSessionDescription > ( ) { 
 + @ Override 
 + public void apply ( WebRTCSessionDescription description ) { 
 + Log . d ( TAG , " onAnswer : then " ) ; 
 + onHandShakeCompleted ( ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + Log . d ( TAG , " onAnswer : failure " ) ; 
 + e . printStackTrace ( ) ; 
 + / / TODO : Handle It 
 + } 
 + } ) . done ( self ( ) ) ; 
 + } 
 + 
 + private void onHandShakeCompleted ( ) { 
 + isReady = true ; 
 + isReadyForCandidates = true ; 
 + state = State . READY ; 
 + unstashAll ( ) ; 
 + } 
 + 
 + public void onCandidate ( int index , @ NotNull String id , @ NotNull String sdp ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof OnOffer ) { 
 + if ( ! isReady ) { 
 + stash ( ) ; 
 + } 
 + onOffer ( ( ( OnOffer ) message ) . getSdp ( ) ) ; 
 + } else if ( message instanceof OnAnswer ) { 
 + if ( ! isReady ) { 
 + stash ( ) ; 
 + } 
 + onAnswer ( ( ( OnAnswer ) message ) . getSdp ( ) ) ; 
 + } else if ( message instanceof OnCandidate ) { 
 + if ( ! isReady | | ! isReadyForCandidates ) { 
 + stash ( ) ; 
 + } 
 + OnCandidate candidate = ( OnCandidate ) message ; 
 + onCandidate ( candidate . getIndex ( ) , candidate . getId ( ) , candidate . getSdp ( ) ) ; 
 + } else if ( message instanceof OnOfferNeeded ) { 
 + if ( ! isReady ) { 
 + stash ( ) ; 
 + } 
 + onOfferNeeded ( ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 + } 
 + } 
 + 
 + / / 
 + / / Outbound Messages 
 + / / 
 + 
 + public static class DoOffer { 
 + 
 + @ Property ( " nonatomic , readonly " ) 
 + private int uid ; 
 + @ Property ( " nonatomic , readonly " ) 
 + private long deviceId ; 
 + @ NotNull 
 + @ Property ( " nonatomic , readonly " ) 
 + private String sdp ; 
 + 
 + public DoOffer ( int uid , long deviceId , @ NotNull String sdp ) { 
 + this . uid = uid ; 
 + this . deviceId = deviceId ; 
 + this . sdp = sdp ; 
 + } 
 + 
 + public int getUid ( ) { 
 + return uid ; 
 + } 
 + 
 + public long getDeviceId ( ) { 
 + return deviceId ; 
 + } 
 + 
 + @ NotNull 
 + public String getSdp ( ) { 
 + return sdp ; 
 + } 
 + } 
 + 
 + public static class DoAnswer { 
 + 
 + @ Property ( " nonatomic , readonly " ) 
 + private final int uid ; 
 + @ Property ( " nonatomic , readonly " ) 
 + private final long deviceId ; 
 + @ NotNull 
 + @ Property ( " nonatomic , readonly " ) 
 + private final String sdp ; 
 + 
 + public DoAnswer ( int uid , long deviceId , @ NotNull String sdp ) { 
 + this . uid = uid ; 
 + this . deviceId = deviceId ; 
 + this . sdp = sdp ; 
 + } 
 + 
 + public int getUid ( ) { 
 + return uid ; 
 + } 
 + 
 + public long getDeviceId ( ) { 
 + return deviceId ; 
 + } 
 + 
 + @ NotNull 
 + public String getSdp ( ) { 
 + return sdp ; 
 + } 
 + } 
 + 
 + public static class DoCandidate { 
 + 
 + private int uid ; 
 + private long deviceId ; 
 + private int index ; 
 + private String id ; 
 + private String sdp ; 
 + 
 + public DoCandidate ( int uid , long deviceId , int index , String id , String sdp ) { 
 + this . uid = uid ; 
 + this . deviceId = deviceId ; 
 + this . index = index ; 
 + this . id = id ; 
 + this . sdp = sdp ; 
 + } 
 + 
 + public int getUid ( ) { 
 + return uid ; 
 + } 
 + 
 + public long getDeviceId ( ) { 
 + return deviceId ; 
 + } 
 + 
 + public int getIndex ( ) { 
 + return index ; 
 + } 
 + 
 + public String getId ( ) { 
 + return id ; 
 + } 
 + 
 + public String getSdp ( ) { 
 + return sdp ; 
 + } 
 + } 
 + 
 + / / 
 + / / Inbound Messages 
 + / / 
 + 
 + public static class OnOfferNeeded { 
 + 
 + } 
 + 
 + public static class OnOffer { 
 + 
 + @ NotNull 
 + @ Property ( " nonatomic , readonly " ) 
 + private String sdp ; 
 + 
 + public OnOffer ( @ NotNull String sdp ) { 
 + this . sdp = sdp ; 
 + } 
 + 
 + @ NotNull 
 + public String getSdp ( ) { 
 + return sdp ; 
 + } 
 + } 
 + 
 + public static class OnAnswer { 
 + 
 + @ NotNull 
 + @ Property ( " nonatomic , readonly " ) 
 + private String sdp ; 
 + 
 + public OnAnswer ( @ NotNull String sdp ) { 
 + this . sdp = sdp ; 
 + } 
 + 
 + @ NotNull 
 + public String getSdp ( ) { 
 + return sdp ; 
 + } 
 + } 
 + 
 + public static class OnCandidate { 
 + 
 + @ Property ( " nonatomic , readonly " ) 
 + private final int index ; 
 + @ NotNull 
 + @ Property ( " nonatomic , readonly " ) 
 + private final String sdp ; 
 + @ NotNull 
 + @ Property ( " nonatomic , readonly " ) 
 + private final String id ; 
 + 
 + public OnCandidate ( int index , @ NotNull String id , @ NotNull String sdp ) { 
 + this . index = index ; 
 + this . id = id ; 
 + this . sdp = sdp ; 
 + } 
 + 
 + public int getIndex ( ) { 
 + return index ; 
 + } 
 + 
 + @ NotNull 
 + public String getId ( ) { 
 + return id ; 
 + } 
 + 
 + @ NotNull 
 + public String getSdp ( ) { 
 + return sdp ; 
 + } 
 + } 
 + 
 + private enum State { 
 + INITIALIZATION , WAITING _ HANDSHAKE , WAITING _ ANSWER , READY 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCPeerConnection . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCPeerConnection . java 
 index 42d3ef2 . . 228072f 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCPeerConnection . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCPeerConnection . java 
 @ @ - 20 , 21 + 20 , 21 @ @ public interface WebRTCPeerConnection { 
 @ ObjectiveCName ( " addOwnStream : " ) 
 void addOwnStream ( @ NotNull WebRTCLocalStream stream ) ; 
 
 - @ ObjectiveCName ( " setLocalDescriptionWithType : withSPD : " ) 
 @ NotNull 
 - Promise < Boolean > setLocalDescription ( @ NotNull String type , @ NotNull String sdp ) ; 
 + @ ObjectiveCName ( " setLocalDescription : " ) 
 + Promise < WebRTCSessionDescription > setLocalDescription ( @ NotNull WebRTCSessionDescription description ) ; 
 
 - @ ObjectiveCName ( " setRemoteDescriptionWithType : withSPD : " ) 
 @ NotNull 
 - Promise < Boolean > setRemoteDescription ( @ NotNull String type , @ NotNull String sdp ) ; 
 + @ ObjectiveCName ( " setRemoteDescription : " ) 
 + Promise < WebRTCSessionDescription > setRemoteDescription ( @ NotNull WebRTCSessionDescription description ) ; 
 
 - @ ObjectiveCName ( " creteOffer " ) 
 @ NotNull 
 - Promise < String > createOffer ( ) ; 
 + @ ObjectiveCName ( " creteOffer " ) 
 + Promise < WebRTCSessionDescription > createOffer ( ) ; 
 
 - @ ObjectiveCName ( " createAnswer " ) 
 @ NotNull 
 - Promise < String > createAnswer ( ) ; 
 + @ ObjectiveCName ( " createAnswer " ) 
 + Promise < WebRTCSessionDescription > createAnswer ( ) ; 
 
 @ ObjectiveCName ( " close " ) 
 void close ( ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCSessionDescription . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCSessionDescription . java 
 new file mode 100644 
 index 0000000 . . 458d904 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCSessionDescription . java 
 @ @ - 0 , 0 + 1 , 32 @ @ 
 + package im . actor . runtime . webrtc ; 
 + 
 + import com . google . j2objc . annotations . ObjectiveCName ; 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import org . jetbrains . annotations . NotNull ; 
 + 
 + public class WebRTCSessionDescription { 
 + 
 + @ NotNull 
 + @ Property ( " nonatomic , readonly " ) 
 + private final String sdp ; 
 + @ NotNull 
 + @ Property ( " nonatomic , readonly " ) 
 + private final String type ; 
 + 
 + @ ObjectiveCName ( " initWithType : withSDP : " ) 
 + public WebRTCSessionDescription ( @ NotNull String type , @ NotNull String sdp ) { 
 + this . type = type ; 
 + this . sdp = sdp ; 
 + } 
 + 
 + @ NotNull 
 + public String getType ( ) { 
 + return type ; 
 + } 
 + 
 + @ NotNull 
 + public String getSdp ( ) { 
 + return sdp ; 
 + } 
 + }
