BLEU SCORE: 0.1673594937001884

TEST MSG: fix ( server ) : nullable config parameter value
GENERATED MSG: fix ( server : sequence ) : reload settings on parameter edit

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json < nl > index 97ce822 . . b4b5847 100644 < nl > - - - a / actor - server / actor - core / src / main / actor - api / actor . json < nl > + + + b / actor - server / actor - core / src / main / actor - api / actor . json < nl > @ @ - 10696 , 7 + 10696 , 10 @ @ < nl > " name " : " key " < nl > } , < nl > { < nl > - " type " : " string " , < nl > + " type " : { < nl > + " type " : " opt " , < nl > + " childType " : " string " < nl > + } , < nl > " id " : 2 , < nl > " name " : " value " < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / configs / ConfigsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / configs / ConfigsServiceImpl . scala < nl > index d27beb0 . . 8109da2 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / configs / ConfigsServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / configs / ConfigsServiceImpl . scala < nl > @ @ - 22 , 14 + 22 , 9 @ @ final class ConfigsServiceImpl ( implicit actorSystem : ActorSystem ) extends Config < nl > private implicit val timeout = Timeout ( 10 . seconds ) < nl > private val seqUpdExt = SeqUpdatesExtension ( actorSystem ) < nl > < nl > - override def jhandleEditParameter ( rawKey : String , rawValue : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { < nl > + override def jhandleEditParameter ( rawKey : String , value : Option [ String ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { < nl > val authorizedAction = requireAuth ( clientData ) . map { implicit client ⇒ < nl > val key = rawKey . trim < nl > - val value = < nl > - rawValue match { < nl > - case " " ⇒ None < nl > - case s ⇒ Some ( s ) < nl > - } < nl > < nl > val update = UpdateParameterChanged ( key , value ) < nl > < nl > diff - - git a / actor - server / notes / 1 . 0 . 80 . markdown b / actor - server / notes / 1 . 0 . 80 . markdown < nl > index f1bd074 . . 85f7186 100644 < nl > - - - a / actor - server / notes / 1 . 0 . 80 . markdown < nl > + + + b / actor - server / notes / 1 . 0 . 80 . markdown < nl > @ @ - 1 , 3 + 1 , 4 @ @ < nl > * add logging on hook addition < nl > * remove dead code from HttpFrontend < nl > - * local file storage enabled by default < nl > \ No newline at end of file < nl > + * local file storage enabled by default < nl > + * fix nullable config parameter value < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala < nl > index a5b9137 . . c5bed2b 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala < nl > @ @ - 172 , 6 + 172 , 9 @ @ final class SeqUpdatesExtension ( < nl > < nl > def deleteApplePushCredentials ( token : Array [ Byte ] ) : Future [ Unit ] = Future . successful ( ( ) ) < nl > < nl > + def reloadSettings ( userId : Int ) : Unit = < nl > + region . ref ! Envelope ( userId ) . withReloadSettings ( ReloadSettings ( ) ) < nl > + < nl > def persistUpdate ( update : SeqUpdate ) : Future [ Unit ] = { < nl > val promise = Promise [ Unit ] ( ) < nl > writer ! BatchUpdatesWriter . Enqueue ( update , promise ) < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / configs / ConfigsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / configs / ConfigsServiceImpl . scala < nl > index 375537e . . b9d6f94 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / configs / ConfigsServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / configs / ConfigsServiceImpl . scala < nl > @ @ - 6 , 7 + 6 , 7 @ @ import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . configs . { ApiParameter , ConfigsService , ResponseGetParameters , UpdateParameterChanged } < nl > import im . actor . api . rpc . misc . ResponseSeq < nl > import im . actor . server . db . DbExtension < nl > - import im . actor . server . sequence . SeqState < nl > + import im . actor . server . sequence . { SeqUpdatesExtension , SeqState } < nl > import im . actor . server . user . UserExtension < nl > import im . actor . server . { model , persist } < nl > import slick . driver . PostgresDriver . api . _ < nl > @ @ - 20 , 6 + 20 , 7 @ @ final class ConfigsServiceImpl ( implicit actorSystem : ActorSystem ) extends Config < nl > override implicit val ec : ExecutionContext = actorSystem . dispatcher < nl > < nl > private implicit val timeout = Timeout ( 10 . seconds ) < nl > + private val seqUpdExt = SeqUpdatesExtension ( actorSystem ) < nl > < nl > override def jhandleEditParameter ( rawKey : String , rawValue : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { < nl > val authorizedAction = requireAuth ( clientData ) . map { implicit client ⇒ < nl > @ @ - 35 , 7 + 36 , 10 @ @ final class ConfigsServiceImpl ( implicit actorSystem : ActorSystem ) extends Config < nl > for { < nl > _ ← persist . configs . ParameterRepo . createOrUpdate ( model . configs . Parameter ( client . userId , key , value ) ) < nl > SeqState ( seq , state ) ← DBIO . from ( UserExtension ( actorSystem ) . broadcastClientUpdate ( update , None , isFat = false ) ) < nl > - } yield Ok ( ResponseSeq ( seq , state . toByteArray ) ) < nl > + } yield { < nl > + seqUpdExt . reloadSettings ( client . userId ) < nl > + Ok ( ResponseSeq ( seq , state . toByteArray ) ) < nl > + } < nl > } < nl > < nl > db . run ( toDBIOAction ( authorizedAction ) )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json 
 index 97ce822 . . b4b5847 100644 
 - - - a / actor - server / actor - core / src / main / actor - api / actor . json 
 + + + b / actor - server / actor - core / src / main / actor - api / actor . json 
 @ @ - 10696 , 7 + 10696 , 10 @ @ 
 " name " : " key " 
 } , 
 { 
 - " type " : " string " , 
 + " type " : { 
 + " type " : " opt " , 
 + " childType " : " string " 
 + } , 
 " id " : 2 , 
 " name " : " value " 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / configs / ConfigsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / configs / ConfigsServiceImpl . scala 
 index d27beb0 . . 8109da2 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / configs / ConfigsServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / configs / ConfigsServiceImpl . scala 
 @ @ - 22 , 14 + 22 , 9 @ @ final class ConfigsServiceImpl ( implicit actorSystem : ActorSystem ) extends Config 
 private implicit val timeout = Timeout ( 10 . seconds ) 
 private val seqUpdExt = SeqUpdatesExtension ( actorSystem ) 
 
 - override def jhandleEditParameter ( rawKey : String , rawValue : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { 
 + override def jhandleEditParameter ( rawKey : String , value : Option [ String ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { 
 val authorizedAction = requireAuth ( clientData ) . map { implicit client ⇒ 
 val key = rawKey . trim 
 - val value = 
 - rawValue match { 
 - case " " ⇒ None 
 - case s ⇒ Some ( s ) 
 - } 
 
 val update = UpdateParameterChanged ( key , value ) 
 
 diff - - git a / actor - server / notes / 1 . 0 . 80 . markdown b / actor - server / notes / 1 . 0 . 80 . markdown 
 index f1bd074 . . 85f7186 100644 
 - - - a / actor - server / notes / 1 . 0 . 80 . markdown 
 + + + b / actor - server / notes / 1 . 0 . 80 . markdown 
 @ @ - 1 , 3 + 1 , 4 @ @ 
 * add logging on hook addition 
 * remove dead code from HttpFrontend 
 - * local file storage enabled by default 
 \ No newline at end of file 
 + * local file storage enabled by default 
 + * fix nullable config parameter value 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala 
 index a5b9137 . . c5bed2b 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala 
 @ @ - 172 , 6 + 172 , 9 @ @ final class SeqUpdatesExtension ( 
 
 def deleteApplePushCredentials ( token : Array [ Byte ] ) : Future [ Unit ] = Future . successful ( ( ) ) 
 
 + def reloadSettings ( userId : Int ) : Unit = 
 + region . ref ! Envelope ( userId ) . withReloadSettings ( ReloadSettings ( ) ) 
 + 
 def persistUpdate ( update : SeqUpdate ) : Future [ Unit ] = { 
 val promise = Promise [ Unit ] ( ) 
 writer ! BatchUpdatesWriter . Enqueue ( update , promise ) 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / configs / ConfigsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / configs / ConfigsServiceImpl . scala 
 index 375537e . . b9d6f94 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / configs / ConfigsServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / configs / ConfigsServiceImpl . scala 
 @ @ - 6 , 7 + 6 , 7 @ @ import im . actor . api . rpc . _ 
 import im . actor . api . rpc . configs . { ApiParameter , ConfigsService , ResponseGetParameters , UpdateParameterChanged } 
 import im . actor . api . rpc . misc . ResponseSeq 
 import im . actor . server . db . DbExtension 
 - import im . actor . server . sequence . SeqState 
 + import im . actor . server . sequence . { SeqUpdatesExtension , SeqState } 
 import im . actor . server . user . UserExtension 
 import im . actor . server . { model , persist } 
 import slick . driver . PostgresDriver . api . _ 
 @ @ - 20 , 6 + 20 , 7 @ @ final class ConfigsServiceImpl ( implicit actorSystem : ActorSystem ) extends Config 
 override implicit val ec : ExecutionContext = actorSystem . dispatcher 
 
 private implicit val timeout = Timeout ( 10 . seconds ) 
 + private val seqUpdExt = SeqUpdatesExtension ( actorSystem ) 
 
 override def jhandleEditParameter ( rawKey : String , rawValue : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { 
 val authorizedAction = requireAuth ( clientData ) . map { implicit client ⇒ 
 @ @ - 35 , 7 + 36 , 10 @ @ final class ConfigsServiceImpl ( implicit actorSystem : ActorSystem ) extends Config 
 for { 
 _ ← persist . configs . ParameterRepo . createOrUpdate ( model . configs . Parameter ( client . userId , key , value ) ) 
 SeqState ( seq , state ) ← DBIO . from ( UserExtension ( actorSystem ) . broadcastClientUpdate ( update , None , isFat = false ) ) 
 - } yield Ok ( ResponseSeq ( seq , state . toByteArray ) ) 
 + } yield { 
 + seqUpdExt . reloadSettings ( client . userId ) 
 + Ok ( ResponseSeq ( seq , state . toByteArray ) ) 
 + } 
 } 
 
 db . run ( toDBIOAction ( authorizedAction ) )
