BLEU SCORE: 0.12100518276540287

TEST MSG: fix ( core ) : Fixing ConversationVM
GENERATED MSG: feat ( core + js ) : Enabling Preloading support

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > index 22a12d5 . . a175934 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > @ @ - 108 , 6 + 108 , 7 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > private final HashMap < String , ListEngine > customConversationEngines = new HashMap < > ( ) ; < nl > private final HashMap < Peer , ActorRef > conversationActors = new HashMap < > ( ) ; < nl > private final HashMap < Peer , ActorRef > conversationHistoryActors = new HashMap < > ( ) ; < nl > + private final HashMap < Peer , ConversationVM > conversationVMS = new HashMap < > ( ) ; < nl > < nl > private final SyncKeyValue cursorStorage ; < nl > < nl > @ @ - 1022 , 7 + 1023 , 12 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } < nl > < nl > public ConversationVM getConversationVM ( Peer peer ) { < nl > - return new ConversationVM ( peer , context ( ) ) ; < nl > + synchronized ( conversationVMS ) { < nl > + if ( ! conversationVMS . containsKey ( peer ) ) { < nl > + conversationVMS . put ( peer , new ConversationVM ( peer , context ( ) ) ) ; < nl > + } < nl > + return conversationVMS . get ( peer ) ; < nl > + } < nl > } < nl > < nl > public void markAsLoaded ( Peer peer ) {
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 22de262 . . c09bbe9 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 398 , 6 + 398 , 10 @ @ public class JsFacade implements Exportable { < nl > < nl > / / Chats < nl > < nl > + public void preInitChat ( JsPeer peer ) { < nl > + messenger . onConversationPreLoad ( peer . convert ( ) ) ; < nl > + } < nl > + < nl > public void bindChat ( JsPeer peer , JsDisplayListCallback < JsMessage > callback ) { < nl > if ( callback = = null ) { < nl > return ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index a003626 . . 46f89ef 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 35 , 6 + 35 , 7 @ @ import im . actor . core . entity . WebActionDescriptor ; < nl > import im . actor . core . entity . content . FastThumb ; < nl > import im . actor . core . entity . content . JsonContent ; < nl > import im . actor . core . entity . content . internal . Sticker ; < nl > + import im . actor . core . events . PeerChatPreload ; < nl > import im . actor . core . i18n . I18nEngine ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . Modules ; < nl > @ @ - 573 , 6 + 574 , 16 @ @ public class Messenger { < nl > } < nl > < nl > / * * < nl > + * Can be called for forcing conversation loading in background < nl > + * < nl > + * @ param peer conversation ' s peer < nl > + * / < nl > + @ ObjectiveCName ( " onConversationPreLoadWithPeer : " ) < nl > + public void onConversationPreLoad ( @ NotNull Peer peer ) { < nl > + modules . getEvents ( ) . post ( new PeerChatPreload ( peer ) ) ; < nl > + } < nl > + < nl > + / * * < nl > * MUST be called on conversation closed < nl > * < nl > * @ param peer conversation ' s peer < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / events / PeerChatPreload . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / events / PeerChatPreload . java < nl > new file mode 100644 < nl > index 0000000 . . ada6b39 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / events / PeerChatPreload . java < nl > @ @ - 0 , 0 + 1 , 29 @ @ < nl > + package im . actor . core . events ; < nl > + < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . runtime . eventbus . Event ; < nl > + < nl > + public class PeerChatPreload extends Event { < nl > + < nl > + public static final String EVENT = " peer _ chat _ preload " ; < nl > + < nl > + private Peer peer ; < nl > + < nl > + public PeerChatPreload ( Peer peer ) { < nl > + this . peer = peer ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + @ Override < nl > + public String getType ( ) { < nl > + return EVENT ; < nl > + } < nl > + < nl > + @ Override < nl > + public String toString ( ) { < nl > + return EVENT + " { " + peer . toIdString ( ) + " } " ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index d9d843c . . 0588e55 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 49 , 6 + 49 , 7 @ @ import im . actor . core . entity . content . FastThumb ; < nl > import im . actor . core . entity . content . JsonContent ; < nl > import im . actor . core . entity . content . TextContent ; < nl > import im . actor . core . entity . content . internal . Sticker ; < nl > + import im . actor . core . events . PeerChatPreload ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . events . AppVisibleChanged ; < nl > @ @ - 275 , 12 + 276 , 12 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } < nl > } < nl > < nl > - public ListEngine getCustomConversationEngine ( Peer peer , String dataType , BserCreator creator ) { < nl > - String key = peer . getUnuqueId ( ) + dataType ; < nl > + public ListEngine getCustomConversationEngine ( Peer peer , String dataType , BserCreator creator ) { < nl > + String key = peer . getUnuqueId ( ) + dataType ; < nl > synchronized ( customConversationEngines ) { < nl > if ( ! customConversationEngines . containsKey ( key ) ) { < nl > customConversationEngines . put ( key , < nl > - Storage . createList ( STORAGE _ CHAT _ CUSTOM _ PREFIX + " _ " + dataType + " _ " + peer . getUnuqueId ( ) , creator ) ) ; < nl > + Storage . createList ( STORAGE _ CHAT _ CUSTOM _ PREFIX + " _ " + dataType + " _ " + peer . getUnuqueId ( ) , creator ) ) ; < nl > } < nl > return customConversationEngines . get ( key ) ; < nl > } < nl > @ @ - 1052 , 6 + 1053 , 9 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > Peer peer = ( ( PeerChatClosed ) event ) . getPeer ( ) ; < nl > assumeConvActor ( peer ) ; < nl > conversationActors . get ( peer ) . send ( new ConversationActor . ConversationHidden ( ) ) ; < nl > + } else if ( event instanceof PeerChatPreload ) { < nl > + Peer peer = ( ( PeerChatPreload ) event ) . getPeer ( ) ; < nl > + assumeConvActor ( peer ) ; < nl > } < nl > } < nl > } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 index 22a12d5 . . a175934 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 @ @ - 108 , 6 + 108 , 7 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 private final HashMap < String , ListEngine > customConversationEngines = new HashMap < > ( ) ; 
 private final HashMap < Peer , ActorRef > conversationActors = new HashMap < > ( ) ; 
 private final HashMap < Peer , ActorRef > conversationHistoryActors = new HashMap < > ( ) ; 
 + private final HashMap < Peer , ConversationVM > conversationVMS = new HashMap < > ( ) ; 
 
 private final SyncKeyValue cursorStorage ; 
 
 @ @ - 1022 , 7 + 1023 , 12 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } 
 
 public ConversationVM getConversationVM ( Peer peer ) { 
 - return new ConversationVM ( peer , context ( ) ) ; 
 + synchronized ( conversationVMS ) { 
 + if ( ! conversationVMS . containsKey ( peer ) ) { 
 + conversationVMS . put ( peer , new ConversationVM ( peer , context ( ) ) ) ; 
 + } 
 + return conversationVMS . get ( peer ) ; 
 + } 
 } 
 
 public void markAsLoaded ( Peer peer ) {

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 22de262 . . c09bbe9 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 398 , 6 + 398 , 10 @ @ public class JsFacade implements Exportable { 
 
 / / Chats 
 
 + public void preInitChat ( JsPeer peer ) { 
 + messenger . onConversationPreLoad ( peer . convert ( ) ) ; 
 + } 
 + 
 public void bindChat ( JsPeer peer , JsDisplayListCallback < JsMessage > callback ) { 
 if ( callback = = null ) { 
 return ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index a003626 . . 46f89ef 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import im . actor . core . entity . WebActionDescriptor ; 
 import im . actor . core . entity . content . FastThumb ; 
 import im . actor . core . entity . content . JsonContent ; 
 import im . actor . core . entity . content . internal . Sticker ; 
 + import im . actor . core . events . PeerChatPreload ; 
 import im . actor . core . i18n . I18nEngine ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . Modules ; 
 @ @ - 573 , 6 + 574 , 16 @ @ public class Messenger { 
 } 
 
 / * * 
 + * Can be called for forcing conversation loading in background 
 + * 
 + * @ param peer conversation ' s peer 
 + * / 
 + @ ObjectiveCName ( " onConversationPreLoadWithPeer : " ) 
 + public void onConversationPreLoad ( @ NotNull Peer peer ) { 
 + modules . getEvents ( ) . post ( new PeerChatPreload ( peer ) ) ; 
 + } 
 + 
 + / * * 
 * MUST be called on conversation closed 
 * 
 * @ param peer conversation ' s peer 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / events / PeerChatPreload . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / events / PeerChatPreload . java 
 new file mode 100644 
 index 0000000 . . ada6b39 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / events / PeerChatPreload . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + package im . actor . core . events ; 
 + 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . runtime . eventbus . Event ; 
 + 
 + public class PeerChatPreload extends Event { 
 + 
 + public static final String EVENT = " peer _ chat _ preload " ; 
 + 
 + private Peer peer ; 
 + 
 + public PeerChatPreload ( Peer peer ) { 
 + this . peer = peer ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + @ Override 
 + public String getType ( ) { 
 + return EVENT ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return EVENT + " { " + peer . toIdString ( ) + " } " ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index d9d843c . . 0588e55 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 49 , 6 + 49 , 7 @ @ import im . actor . core . entity . content . FastThumb ; 
 import im . actor . core . entity . content . JsonContent ; 
 import im . actor . core . entity . content . TextContent ; 
 import im . actor . core . entity . content . internal . Sticker ; 
 + import im . actor . core . events . PeerChatPreload ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . events . AppVisibleChanged ; 
 @ @ - 275 , 12 + 276 , 12 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } 
 } 
 
 - public ListEngine getCustomConversationEngine ( Peer peer , String dataType , BserCreator creator ) { 
 - String key = peer . getUnuqueId ( ) + dataType ; 
 + public ListEngine getCustomConversationEngine ( Peer peer , String dataType , BserCreator creator ) { 
 + String key = peer . getUnuqueId ( ) + dataType ; 
 synchronized ( customConversationEngines ) { 
 if ( ! customConversationEngines . containsKey ( key ) ) { 
 customConversationEngines . put ( key , 
 - Storage . createList ( STORAGE _ CHAT _ CUSTOM _ PREFIX + " _ " + dataType + " _ " + peer . getUnuqueId ( ) , creator ) ) ; 
 + Storage . createList ( STORAGE _ CHAT _ CUSTOM _ PREFIX + " _ " + dataType + " _ " + peer . getUnuqueId ( ) , creator ) ) ; 
 } 
 return customConversationEngines . get ( key ) ; 
 } 
 @ @ - 1052 , 6 + 1053 , 9 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 Peer peer = ( ( PeerChatClosed ) event ) . getPeer ( ) ; 
 assumeConvActor ( peer ) ; 
 conversationActors . get ( peer ) . send ( new ConversationActor . ConversationHidden ( ) ) ; 
 + } else if ( event instanceof PeerChatPreload ) { 
 + Peer peer = ( ( PeerChatPreload ) event ) . getPeer ( ) ; 
 + assumeConvActor ( peer ) ; 
 } 
 } 
 } 
 \ No newline at end of file
