BLEU SCORE: 0.10600313379512592

TEST MSG: feat ( core ) : Implemented auto answers in group calls
GENERATED MSG: feat ( iOS ) : Basic implementation of Call Controller

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index 92d4d87 . . 52feabf 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 173 , 7 + 173 , 7 @ @ < nl > 	 	 06CE898A1BD8401C005A5530 / * Reachability . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06CE89891BD8401C005A5530 / * Reachability . swift * / ; } ; < nl > 	 	 06CE898C1BD841C9005A5530 / * SystemConfiguration . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / ; } ; < nl > 	 	 06CE89901BD84DF5005A5530 / * ActorSDKAnalytics . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06CE898F1BD84DF5005A5530 / * ActorSDKAnalytics . swift * / ; } ; < nl > - 	 	 06E322C91C69344A00D66F53 / * iOSWebRTCProvider . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E322C81C69344A00D66F53 / * iOSWebRTCProvider . swift * / ; } ; < nl > + 	 	 06E322C91C69344A00D66F53 / * iOSCallsProvider . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E322C81C69344A00D66F53 / * iOSCallsProvider . swift * / ; } ; < nl > 	 	 06E3230E1C69445C00D66F53 / * WebRTC . h in Headers * / = { isa = PBXBuildFile ; fileRef = 06E3230D1C6942C400D66F53 / * WebRTC . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; < nl > 	 	 06E323111C694C1D00D66F53 / * WebRTCExt . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E323101C694C1D00D66F53 / * WebRTCExt . swift * / ; } ; < nl > 	 	 06E323151C6A7AC000D66F53 / * AACallViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E323141C6A7AC000D66F53 / * AACallViewController . swift * / ; } ; < nl > @ @ - 471 , 7 + 471 , 7 @ @ < nl > 	 	 06CE89891BD8401C005A5530 / * Reachability . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = Reachability . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / = { isa = PBXFileReference ; lastKnownFileType = wrapper . framework ; name = SystemConfiguration . framework ; path = System / Library / Frameworks / SystemConfiguration . framework ; sourceTree = SDKROOT ; } ; < nl > 	 	 06CE898F1BD84DF5005A5530 / * ActorSDKAnalytics . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = ActorSDKAnalytics . swift ; sourceTree = " < group > " ; } ; < nl > - 	 	 06E322C81C69344A00D66F53 / * iOSWebRTCProvider . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = iOSWebRTCProvider . swift ; sourceTree = " < group > " ; } ; < nl > + 	 	 06E322C81C69344A00D66F53 / * iOSCallsProvider . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = iOSCallsProvider . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06E3230D1C6942C400D66F53 / * WebRTC . h * / = { isa = PBXFileReference ; lastKnownFileType = sourcecode . c . h ; path = WebRTC . h ; sourceTree = " < group > " ; } ; < nl > 	 	 06E323101C694C1D00D66F53 / * WebRTCExt . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = WebRTCExt . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06E323141C6A7AC000D66F53 / * AACallViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; name = AACallViewController . swift ; path = Calls / AACallViewController . swift ; sourceTree = " < group > " ; } ; < nl > @ @ - 767 , 7 + 767 , 7 @ @ < nl > 	 	 	 	 065A06B51C6CEFE00012EA09 / * CocoaWebRTCRuntime . swift * / , < nl > 	 	 	 	 066A51871BC4C383000E606E / * iOSNotificationProvider . swift * / , < nl > 	 	 	 	 066A51881BC4C383000E606E / * iOSPhoneBookProvider . swift * / , < nl > - 	 	 	 	 06E322C81C69344A00D66F53 / * iOSWebRTCProvider . swift * / , < nl > + 	 	 	 	 06E322C81C69344A00D66F53 / * iOSCallsProvider . swift * / , < nl > 	 	 	 ) ; < nl > 	 	 	 path = Providers ; < nl > 	 	 	 sourceTree = " < group > " ; < nl > @ @ - 1841 , 7 + 1841 , 7 @ @ < nl > 	 	 	 	 066A53221BC533F5000E606E / * AAMessagesFlowLayout . swift in Sources * / , < nl > 	 	 	 	 15D35F541C20187E00E3717A / * AAOpusAudioRecorder . m in Sources * / , < nl > 	 	 	 	 066A52671BC50E7B000E606E / * AAAuthPhoneViewController . swift in Sources * / , < nl > - 	 	 	 	 06E322C91C69344A00D66F53 / * iOSWebRTCProvider . swift in Sources * / , < nl > + 	 	 	 	 06E322C91C69344A00D66F53 / * iOSCallsProvider . swift in Sources * / , < nl > 	 	 	 	 066A53371BC537CA000E606E / * ConversationViewController . swift in Sources * / , < nl > 	 	 	 	 066A519D1BC4C390000E606E / * UDPreferencesStorage . swift in Sources * / , < nl > 	 	 	 	 069CF4CD1BCB909A00C66E12 / * CLBackspaceDetectingTextField . m in Sources * / , < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSCallsProvider . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSCallsProvider . swift < nl > new file mode 100644 < nl > index 0000000 . . e0e489c < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSCallsProvider . swift < nl > @ @ - 0 , 0 + 1 , 193 @ @ < nl > + / / < nl > + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > < nl > + / / < nl > + < nl > + import Foundation < nl > + < nl > + class iOSCallsProvider : NSObject , ACCallsProvider { < nl > + < nl > + func onIncomingCallWithCallId ( callId : jlong ) { < nl > + < nl > + } < nl > + < nl > + func onOutgoingCallWithCallId ( callId : jlong ) { < nl > + < nl > + } < nl > + < nl > + func onCallEndWithCallId ( callId : jlong ) { < nl > + < nl > + } < nl > + < nl > + / / private var controller : ACWebRTCController ! < nl > + / / private var messenger : ACMessenger ! < nl > + / / < nl > + / / private lazy var queue : dispatch _ queue _ t = dispatch _ queue _ create ( " webrtc _ queue " , DISPATCH _ QUEUE _ SERIAL ) < nl > + / / private let peerConnectionFactory = RTCPeerConnectionFactory ( ) < nl > + / / private let mediaConstraints = RTCMediaConstraints ( ) < nl > + / / < nl > + / / private var runningCallId : jlong ? < nl > + / / private var peerConnection : RTCPeerConnection ! < nl > + / / private var voiceCapture : RTCAudioTrack ! < nl > + / / < nl > + / / override init ( ) { < nl > + / / RTCPeerConnectionFactory . initializeSSL ( ) < nl > + / / } < nl > + / / < nl > + / / func initWithMessenger ( messenger : ACMessenger , withController controller : ACWebRTCController ) { < nl > + / / self . controller = controller < nl > + / / self . messenger = messenger < nl > + / / } < nl > + / / < nl > + / / / / < nl > + / / / / Start / End of calls < nl > + / / / / < nl > + / / < nl > + / / func onIncomingCallWithCallId ( callId : jlong ) { < nl > + / / dispatchSync ( ) { < nl > + / / print ( " onIncomingCallWithCallId " ) < nl > + / / self . runningCallId = callId < nl > + / / dispatchOnUi ( ) { ( ) - > Void in < nl > + / / let rootController = ActorSDK . sharedActor ( ) . bindedToWindow . rootViewController ! < nl > + / / rootController . presentViewController ( AACallViewController ( callId : callId ) , animated : true , completion : nil ) < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / func onOutgoingCallWithCallId ( callId : jlong ) { < nl > + / / dispatchSync ( ) { < nl > + / / print ( " onOutgoingCallWithCallId " ) < nl > + / / self . runningCallId = callId < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / func onCallEndWithCallId ( callId : jlong ) { < nl > + / / dispatchSync ( ) { < nl > + / / if ( self . peerConnection ! = nil ) { < nl > + / / self . peerConnection . close ( ) < nl > + / / self . peerConnection = nil < nl > + / / } < nl > + / / self . voiceCapture = nil < nl > + / / self . runningCallId = - 1 < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / / / < nl > + / / / / In process < nl > + / / / / < nl > + / / < nl > + / / private func createPeerConnection ( callId : jlong ) { < nl > + / / / / < nl > + / / / / Create Peer Connection < nl > + / / / / < nl > + / / let iceServers = [ < nl > + / / RTCICEServer ( URI : NSURL ( string : " stun : 62 . 4 . 22 . 219 : 3478 " ) , username : " " , password : " " ) , < nl > + / / RTCICEServer ( URI : NSURL ( string : " turn : 62 . 4 . 22 . 219 : 3478 ? transport = tcp " ) , username : " actor " , password : " password " ) , < nl > + / / RTCICEServer ( URI : NSURL ( string : " turn : 62 . 4 . 22 . 219 : 3478 ? transport = udp " ) , username : " actor " , password : " password " ) < nl > + / / ] < nl > + / / peerConnection = peerConnectionFactory . peerConnectionWithICEServers ( iceServers , constraints : mediaConstraints , delegate : nil ) < nl > + / / < nl > + / / / / < nl > + / / / / Crete Media Stream < nl > + / / / / < nl > + / / voiceCapture = peerConnectionFactory . audioTrackWithID ( " audio0 " ) < nl > + / / let mediaStream = peerConnectionFactory . mediaStreamWithLabel ( " ARDAMSa0 " ) < nl > + / / mediaStream . addAudioTrack ( voiceCapture ) < nl > + / / peerConnection . addStream ( mediaStream ) < nl > + / / < nl > + / / / / < nl > + / / / / Handling events from peer connection < nl > + / / / / < nl > + / / peerConnection . onCandidateReceived = { ( candidate ) in < nl > + / / self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + / / print ( " On Candidate arrived " ) < nl > + / / self . controller . sendCandidateWithInt ( jint ( candidate . sdpMLineIndex ) , withNSString : candidate . sdpMid , withNSString : candidate . sdp ) < nl > + / / } < nl > + / / } < nl > + / / peerConnection . onStreamAdded = { ( stream ) in < nl > + / / self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + / / print ( " On stream added " ) < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / func onOfferNeededWithCallId ( callId : jlong ) { < nl > + / / self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + / / print ( " onOfferNeededWithCallId " ) < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / func onAnswerReceivedWithCallId ( callId : jlong , withSDP offerSDP : String ) { < nl > + / / self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + / / print ( " onAnswerReceivedWithCallId " ) < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / func onOfferReceivedWithCallId ( callId : jlong , withSDP offerSDP : String ) { < nl > + / / < nl > + / / / / < nl > + / / / / Stages : < nl > + / / / / 1 . Create Peer Connection < nl > + / / / / 2 . Set Remote description < nl > + / / / / 3 . Create Answer < nl > + / / / / 4 . Set Local description from answer < nl > + / / / / 5 . Send Answer and enable candidate receiving < nl > + / / / / < nl > + / / < nl > + / / self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + / / self . createPeerConnection ( callId ) < nl > + / / self . peerConnection . setRemoteDescription ( RTCSessionDescription ( type : " offer " , sdp : offerSDP ) ) { ( error ) - > ( ) in < nl > + / / self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + / / if ( error = = nil ) { < nl > + / / self . peerConnection . createAnswer ( self . mediaConstraints ) { ( sdp , error ) - > ( ) in < nl > + / / self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + / / if ( error = = nil ) { < nl > + / / self . peerConnection . setLocalDescription ( sdp ) { ( error ) - > ( ) in < nl > + / / self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + / / if ( error = = nil ) { < nl > + / / self . controller . sendAnswerWithNSString ( sdp . description ) < nl > + / / self . controller . readyForCandidates ( ) < nl > + / / } else { < nl > + / / self . controller . endCall ( ) < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / } else { < nl > + / / self . controller . endCall ( ) < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / } else { < nl > + / / self . controller . endCall ( ) < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / func onCandidateWithCallId ( callId : jlong , withId id _ : String , withLabel label : jint , withSDP sdp : String ) { < nl > + / / dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + / / self . peerConnection . addICECandidate ( RTCICECandidate ( mid : id _ , index : Int ( label ) , sdp : sdp ) ) < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / < nl > + / / / / < nl > + / / / / Dispatching < nl > + / / / / < nl > + / / < nl > + / / private func dispatchSync ( closure : ( ) - > ( ) ) { < nl > + / / dispatch _ sync ( queue ) { ( ) - > Void in < nl > + / / closure ( ) < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / private func dispatchAsync ( callId : jlong , closure : ( ) - > ( ) ) { < nl > + / / if ( self . runningCallId = = callId ) { < nl > + / / dispatch _ async ( queue ) { ( ) - > Void in < nl > + / / if ( self . runningCallId = = callId ) { < nl > + / / closure ( ) < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSWebRTCProvider . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSWebRTCProvider . swift < nl > deleted file mode 100644 < nl > index 23cf0f5 . . 0000000 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSWebRTCProvider . swift < nl > + + + / dev / null < nl > @ @ - 1 , 193 + 0 , 0 @ @ < nl > - / / < nl > - / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > < nl > - / / < nl > - < nl > - import Foundation < nl > - < nl > - class iOSWebRTCProvider : NSObject , ACCallsProvider { < nl > - < nl > - func onIncomingCallWithCallId ( callId : jlong ) { < nl > - < nl > - } < nl > - < nl > - func onOutgoingCallWithCallId ( callId : jlong ) { < nl > - < nl > - } < nl > - < nl > - func onCallEndWithCallId ( callId : jlong ) { < nl > - < nl > - } < nl > - < nl > - / / private var controller : ACWebRTCController ! < nl > - / / private var messenger : ACMessenger ! < nl > - / / < nl > - / / private lazy var queue : dispatch _ queue _ t = dispatch _ queue _ create ( " webrtc _ queue " , DISPATCH _ QUEUE _ SERIAL ) < nl > - / / private let peerConnectionFactory = RTCPeerConnectionFactory ( ) < nl > - / / private let mediaConstraints = RTCMediaConstraints ( ) < nl > - / / < nl > - / / private var runningCallId : jlong ? < nl > - / / private var peerConnection : RTCPeerConnection ! < nl > - / / private var voiceCapture : RTCAudioTrack ! < nl > - / / < nl > - / / override init ( ) { < nl > - / / RTCPeerConnectionFactory . initializeSSL ( ) < nl > - / / } < nl > - / / < nl > - / / func initWithMessenger ( messenger : ACMessenger , withController controller : ACWebRTCController ) { < nl > - / / self . controller = controller < nl > - / / self . messenger = messenger < nl > - / / } < nl > - / / < nl > - / / / / < nl > - / / / / Start / End of calls < nl > - / / / / < nl > - / / < nl > - / / func onIncomingCallWithCallId ( callId : jlong ) { < nl > - / / dispatchSync ( ) { < nl > - / / print ( " onIncomingCallWithCallId " ) < nl > - / / self . runningCallId = callId < nl > - / / dispatchOnUi ( ) { ( ) - > Void in < nl > - / / let rootController = ActorSDK . sharedActor ( ) . bindedToWindow . rootViewController ! < nl > - / / rootController . presentViewController ( AACallViewController ( callId : callId ) , animated : true , completion : nil ) < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / func onOutgoingCallWithCallId ( callId : jlong ) { < nl > - / / dispatchSync ( ) { < nl > - / / print ( " onOutgoingCallWithCallId " ) < nl > - / / self . runningCallId = callId < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / func onCallEndWithCallId ( callId : jlong ) { < nl > - / / dispatchSync ( ) { < nl > - / / if ( self . peerConnection ! = nil ) { < nl > - / / self . peerConnection . close ( ) < nl > - / / self . peerConnection = nil < nl > - / / } < nl > - / / self . voiceCapture = nil < nl > - / / self . runningCallId = - 1 < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / / / < nl > - / / / / In process < nl > - / / / / < nl > - / / < nl > - / / private func createPeerConnection ( callId : jlong ) { < nl > - / / / / < nl > - / / / / Create Peer Connection < nl > - / / / / < nl > - / / let iceServers = [ < nl > - / / RTCICEServer ( URI : NSURL ( string : " stun : 62 . 4 . 22 . 219 : 3478 " ) , username : " " , password : " " ) , < nl > - / / RTCICEServer ( URI : NSURL ( string : " turn : 62 . 4 . 22 . 219 : 3478 ? transport = tcp " ) , username : " actor " , password : " password " ) , < nl > - / / RTCICEServer ( URI : NSURL ( string : " turn : 62 . 4 . 22 . 219 : 3478 ? transport = udp " ) , username : " actor " , password : " password " ) < nl > - / / ] < nl > - / / peerConnection = peerConnectionFactory . peerConnectionWithICEServers ( iceServers , constraints : mediaConstraints , delegate : nil ) < nl > - / / < nl > - / / / / < nl > - / / / / Crete Media Stream < nl > - / / / / < nl > - / / voiceCapture = peerConnectionFactory . audioTrackWithID ( " audio0 " ) < nl > - / / let mediaStream = peerConnectionFactory . mediaStreamWithLabel ( " ARDAMSa0 " ) < nl > - / / mediaStream . addAudioTrack ( voiceCapture ) < nl > - / / peerConnection . addStream ( mediaStream ) < nl > - / / < nl > - / / / / < nl > - / / / / Handling events from peer connection < nl > - / / / / < nl > - / / peerConnection . onCandidateReceived = { ( candidate ) in < nl > - / / self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > - / / print ( " On Candidate arrived " ) < nl > - / / self . controller . sendCandidateWithInt ( jint ( candidate . sdpMLineIndex ) , withNSString : candidate . sdpMid , withNSString : candidate . sdp ) < nl > - / / } < nl > - / / } < nl > - / / peerConnection . onStreamAdded = { ( stream ) in < nl > - / / self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > - / / print ( " On stream added " ) < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / func onOfferNeededWithCallId ( callId : jlong ) { < nl > - / / self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > - / / print ( " onOfferNeededWithCallId " ) < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / func onAnswerReceivedWithCallId ( callId : jlong , withSDP offerSDP : String ) { < nl > - / / self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > - / / print ( " onAnswerReceivedWithCallId " ) < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / func onOfferReceivedWithCallId ( callId : jlong , withSDP offerSDP : String ) { < nl > - / / < nl > - / / / / < nl > - / / / / Stages : < nl > - / / / / 1 . Create Peer Connection < nl > - / / / / 2 . Set Remote description < nl > - / / / / 3 . Create Answer < nl > - / / / / 4 . Set Local description from answer < nl > - / / / / 5 . Send Answer and enable candidate receiving < nl > - / / / / < nl > - / / < nl > - / / self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > - / / self . createPeerConnection ( callId ) < nl > - / / self . peerConnection . setRemoteDescription ( RTCSessionDescription ( type : " offer " , sdp : offerSDP ) ) { ( error ) - > ( ) in < nl > - / / self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > - / / if ( error = = nil ) { < nl > - / / self . peerConnection . createAnswer ( self . mediaConstraints ) { ( sdp , error ) - > ( ) in < nl > - / / self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > - / / if ( error = = nil ) { < nl > - / / self . peerConnection . setLocalDescription ( sdp ) { ( error ) - > ( ) in < nl > - / / self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > - / / if ( error = = nil ) { < nl > - / / self . controller . sendAnswerWithNSString ( sdp . description ) < nl > - / / self . controller . readyForCandidates ( ) < nl > - / / } else { < nl > - / / self . controller . endCall ( ) < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / } else { < nl > - / / self . controller . endCall ( ) < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / } else { < nl > - / / self . controller . endCall ( ) < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / func onCandidateWithCallId ( callId : jlong , withId id _ : String , withLabel label : jint , withSDP sdp : String ) { < nl > - / / dispatchAsync ( callId ) { ( ) - > ( ) in < nl > - / / self . peerConnection . addICECandidate ( RTCICECandidate ( mid : id _ , index : Int ( label ) , sdp : sdp ) ) < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / < nl > - / / / / < nl > - / / / / Dispatching < nl > - / / / / < nl > - / / < nl > - / / private func dispatchSync ( closure : ( ) - > ( ) ) { < nl > - / / dispatch _ sync ( queue ) { ( ) - > Void in < nl > - / / closure ( ) < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / private func dispatchAsync ( callId : jlong , closure : ( ) - > ( ) ) { < nl > - / / if ( self . runningCallId = = callId ) { < nl > - / / dispatch _ async ( queue ) { ( ) - > Void in < nl > - / / if ( self . runningCallId = = callId ) { < nl > - / / closure ( ) < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / } < nl > - } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > index 27fb0b8 . . 9da618c 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > @ @ - 161 , 6 + 161 , 7 @ @ public class ActorSDK { < nl > / / Providers < nl > builder . setPhoneBookProvider ( PhoneBookProvider ( ) ) < nl > builder . setNotificationProvider ( iOSNotificationProvider ( ) ) < nl > + builder . setCallsProvider ( iOSCallsProvider ( ) ) < nl > < nl > / / Stats < nl > builder . setPlatformType ( ACPlatformType . IOS ( ) ) < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > index 598b075 . . f66859a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > @ @ - 12 , 6 + 12 , 7 @ @ import im . actor . core . api . rpc . ResponseDoCall ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . viewmodel . Command ; < nl > + import im . actor . runtime . Log ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > < nl > import static im . actor . runtime . actors . ActorSystem . system ; < nl > @ @ - 56 , 6 + 57 , 7 @ @ public class CallsModule extends AbsModule { < nl > return new Command < ResponseDoCall > ( ) { < nl > @ Override < nl > public void start ( final CommandCallback < ResponseDoCall > callback ) { < nl > + Log . d ( TAG , " callsManager : " + callManager ) ; < nl > callManager . send ( new CallManagerActor . DoCall ( Peer . user ( uid ) ) ) ; < nl > / / User u = users ( ) . getValue ( uid ) ; < nl > / / request ( new RequestDoCall ( new ApiOutPeer ( ApiPeerType . PRIVATE , u . getUid ( ) , u . getAccessHash ( ) ) , CALL _ TIMEOUT ) , new RpcCallback < ResponseDoCall > ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > index 462c299 . . 343a3f6 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > @ @ - 85 , 7 + 85 , 7 @ @ public class PeerConnectionActor extends ModuleActor { < nl > PeerConnectionActor . this . peerConnection . addCallback ( new WebRTCPeerConnectionCallback ( ) { < nl > @ Override < nl > public void onCandidate ( int label , String id , String candidate ) { < nl > - / / root . send ( new DoCandidate ( uid , deviceId , label , id , candidate ) ) ; < nl > + root . send ( new DoCandidate ( uid , deviceId , label , id , candidate ) ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 142 , 7 + 142 , 7 @ @ public class PeerConnectionActor extends ModuleActor { < nl > @ Override < nl > public void apply ( WebRTCSessionDescription description ) { < nl > Log . d ( TAG , " onOfferNeeded : then " ) ; < nl > - / / root . send ( new DoOffer ( uid , deviceId , description . getSdp ( ) ) ) ; < nl > + root . send ( new DoOffer ( uid , deviceId , description . getSdp ( ) ) ) ; < nl > state = State . WAITING _ ANSWER ; < nl > isReady = true ; < nl > unstashAll ( ) ; < nl > @ @ - 238 , 7 + 238 , 7 @ @ public class PeerConnectionActor extends ModuleActor { < nl > } < nl > < nl > public void onCandidate ( int index , @ NotNull String id , @ NotNull String sdp ) { < nl > - < nl > + peerConnection . addCandidate ( index , id , sdp ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 246 , 22 + 246 , 26 @ @ public class PeerConnectionActor extends ModuleActor { < nl > if ( message instanceof OnOffer ) { < nl > if ( ! isReady ) { < nl > stash ( ) ; < nl > + return ; < nl > } < nl > onOffer ( ( ( OnOffer ) message ) . getSdp ( ) ) ; < nl > } else if ( message instanceof OnAnswer ) { < nl > if ( ! isReady ) { < nl > stash ( ) ; < nl > + return ; < nl > } < nl > onAnswer ( ( ( OnAnswer ) message ) . getSdp ( ) ) ; < nl > } else if ( message instanceof OnCandidate ) { < nl > if ( ! isReady | | ! isReadyForCandidates ) { < nl > stash ( ) ; < nl > + return ; < nl > } < nl > OnCandidate candidate = ( OnCandidate ) message ; < nl > onCandidate ( candidate . getIndex ( ) , candidate . getId ( ) , candidate . getSdp ( ) ) ; < nl > } else if ( message instanceof OnOfferNeeded ) { < nl > if ( ! isReady ) { < nl > stash ( ) ; < nl > + return ; < nl > } < nl > onOfferNeeded ( ) ; < nl > } else { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusActor . java < nl > index 9c78432 . . 171a523 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusActor . java < nl > @ @ - 2 , 9 + 2 , 13 @ @ package im . actor . core . modules . eventbus ; < nl > < nl > import org . jetbrains . annotations . Nullable ; < nl > < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . core . api . ApiEventBusDestination ; < nl > import im . actor . core . api . rpc . RequestCreateNewEventBus ; < nl > import im . actor . core . api . rpc . RequestJoinEventBus ; < nl > import im . actor . core . api . rpc . RequestKeepAliveEventBus ; < nl > + import im . actor . core . api . rpc . RequestPostToEventBus ; < nl > import im . actor . core . api . rpc . ResponseCreateNewEventBus ; < nl > import im . actor . core . api . rpc . ResponseJoinEventBus ; < nl > import im . actor . core . api . rpc . ResponseVoid ; < nl > @ @ - 137 , 6 + 141 , 14 @ @ public class EventBusActor extends ModuleActor { < nl > < nl > } < nl > < nl > + public void sendMessage ( int uid , long deviceId , byte [ ] data ) { < nl > + ArrayList < ApiEventBusDestination > destinations = new ArrayList < > ( ) ; < nl > + ArrayList < Long > deviceIds = new ArrayList < > ( ) ; < nl > + deviceIds . add ( deviceId ) ; < nl > + destinations . add ( new ApiEventBusDestination ( uid , deviceIds ) ) ; < nl > + request ( new RequestPostToEventBus ( busId , destinations , data ) ) ; < nl > + } < nl > + < nl > < nl > / / < nl > / / Keep Alive < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ActorTrace . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ActorTrace . java < nl > index aaf1dd2 . . a1f314f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ActorTrace . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ActorTrace . java < nl > @ @ - 22 , 7 + 22 , 7 @ @ public class ActorTrace implements TraceInterface { < nl > < nl > @ Override < nl > public void onEnvelopeDelivered ( Envelope envelope ) { < nl > - Log . w ( TAG , " EnvelopeDelivered | " + envelope . getScope ( ) . getDispatcher ( ) . getName ( ) + " | " + envelope . getScope ( ) . getPath ( ) + " { " + envelope . getMessage ( ) + " } " ) ; < nl > + / / Log . w ( TAG , " EnvelopeDelivered | " + envelope . getScope ( ) . getDispatcher ( ) . getName ( ) + " | " + envelope . getScope ( ) . getPath ( ) + " { " + envelope . getMessage ( ) + " } " ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 31 , 7 + 31 , 7 @ @ public class ActorTrace implements TraceInterface { < nl > if ( duration > PROCESS _ THRESHOLD ) { < nl > Log . w ( TAG , " Too long " + envelope . getScope ( ) . getPath ( ) + " { " + envelope . getMessage ( ) + " } " ) ; < nl > } < nl > - Log . w ( TAG , " Envelope | " + envelope . getScope ( ) . getDispatcher ( ) . getName ( ) + " | " + envelope . getScope ( ) . getPath ( ) + " { " + envelope . getMessage ( ) + " } in " + duration + " ms after " + sendDuration + " ms " ) ; < nl > + / / Log . w ( TAG , " Envelope | " + envelope . getScope ( ) . getDispatcher ( ) . getName ( ) + " | " + envelope . getScope ( ) . getPath ( ) + " { " + envelope . getMessage ( ) + " } in " + duration + " ms after " + sendDuration + " ms " ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 53 , 6 + 53 , 6 @ @ public class ActorTrace implements TraceInterface { < nl > < nl > @ Override < nl > public void onMessageSent ( ActorRef ref , Object message ) { < nl > - Log . w ( TAG , " Message Sent : " + message ) ; < nl > + / / Log . w ( TAG , " Message Sent : " + message ) ; < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index 418ff2b . . da865bb 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 173 , 6 + 173 , 9 @ @ < nl > 	 	 06CE898C1BD841C9005A5530 / * SystemConfiguration . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / ; } ; < nl > 	 	 06CE89901BD84DF5005A5530 / * ActorSDKAnalytics . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06CE898F1BD84DF5005A5530 / * ActorSDKAnalytics . swift * / ; } ; < nl > 	 	 06E322C91C69344A00D66F53 / * iOSWebRTCProvider . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E322C81C69344A00D66F53 / * iOSWebRTCProvider . swift * / ; } ; < nl > + 	 	 06E3230E1C69445C00D66F53 / * WebRTC . h in Headers * / = { isa = PBXBuildFile ; fileRef = 06E3230D1C6942C400D66F53 / * WebRTC . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; < nl > + 	 	 06E323111C694C1D00D66F53 / * WebRTCExt . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E323101C694C1D00D66F53 / * WebRTCExt . swift * / ; } ; < nl > + 	 	 06E323151C6A7AC000D66F53 / * AACallViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E323141C6A7AC000D66F53 / * AACallViewController . swift * / ; } ; < nl > 	 	 06E7B2471C0F8D7A0090660C / * AALocationPickerController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E7B2461C0F8D7A0090660C / * AALocationPickerController . swift * / ; } ; < nl > 	 	 06E7B24A1C0F92140090660C / * AABubbleLocationCell . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E7B2491C0F92140090660C / * AABubbleLocationCell . swift * / ; } ; < nl > 	 	 06E7B24C1C0FAB500090660C / * AAMapFastView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E7B24B1C0FAB500090660C / * AAMapFastView . swift * / ; } ; < nl > @ @ - 467 , 6 + 470 , 9 @ @ < nl > 	 	 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / = { isa = PBXFileReference ; lastKnownFileType = wrapper . framework ; name = SystemConfiguration . framework ; path = System / Library / Frameworks / SystemConfiguration . framework ; sourceTree = SDKROOT ; } ; < nl > 	 	 06CE898F1BD84DF5005A5530 / * ActorSDKAnalytics . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = ActorSDKAnalytics . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06E322C81C69344A00D66F53 / * iOSWebRTCProvider . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = iOSWebRTCProvider . swift ; sourceTree = " < group > " ; } ; < nl > + 	 	 06E3230D1C6942C400D66F53 / * WebRTC . h * / = { isa = PBXFileReference ; lastKnownFileType = sourcecode . c . h ; path = WebRTC . h ; sourceTree = " < group > " ; } ; < nl > + 	 	 06E323101C694C1D00D66F53 / * WebRTCExt . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = WebRTCExt . swift ; sourceTree = " < group > " ; } ; < nl > + 	 	 06E323141C6A7AC000D66F53 / * AACallViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; name = AACallViewController . swift ; path = Calls / AACallViewController . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06E7B2461C0F8D7A0090660C / * AALocationPickerController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AALocationPickerController . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06E7B2491C0F92140090660C / * AABubbleLocationCell . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AABubbleLocationCell . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 06E7B24B1C0FAB500090660C / * AAMapFastView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAMapFastView . swift ; sourceTree = " < group > " ; } ; < nl > @ @ - 847 , 6 + 853 , 7 @ @ < nl > 	 	 	 	 066A527B1BC51EC6000E606E / * Root * / , < nl > 	 	 	 	 066A52EB1BC52AF8000E606E / * Settings * / , < nl > 	 	 	 	 066A53091BC53197000E606E / * User * / , < nl > + 	 	 	 	 06E323131C6A7AA300D66F53 / * Calls * / , < nl > 	 	 	 ) ; < nl > 	 	 	 path = Controllers ; < nl > 	 	 	 sourceTree = " < group > " ; < nl > @ @ - 1150 , 6 + 1157 , 8 @ @ < nl > 	 	 	 isa = PBXGroup ; < nl > 	 	 	 children = ( < nl > 	 	 	 	 15D35F0A1C20182900E3717A / * AudioRecorder * / , < nl > + 	 	 	 	 06E3230D1C6942C400D66F53 / * WebRTC . h * / , < nl > + 	 	 	 	 06E323101C694C1D00D66F53 / * WebRTCExt . swift * / , < nl > 	 	 	 ) ; < nl > 	 	 	 name = Libs ; < nl > 	 	 	 sourceTree = " < group > " ; < nl > @ @ - 1161 , 6 + 1170 , 14 @ @ < nl > 	 	 	 name = Libs ; < nl > 	 	 	 sourceTree = " < group > " ; < nl > 	 	 } ; < nl > + 	 	 06E323131C6A7AA300D66F53 / * Calls * / = { < nl > + 	 	 	 isa = PBXGroup ; < nl > + 	 	 	 children = ( < nl > + 	 	 	 	 06E323141C6A7AC000D66F53 / * AACallViewController . swift * / , < nl > + 	 	 	 ) ; < nl > + 	 	 	 name = Calls ; < nl > + 	 	 	 sourceTree = " < group > " ; < nl > + 	 	 } ; < nl > 	 	 06E7B2451C0F8D410090660C / * Location * / = { < nl > 	 	 	 isa = PBXGroup ; < nl > 	 	 	 children = ( < nl > @ @ - 1535 , 6 + 1552 , 7 @ @ < nl > 	 	 	 	 15F89F0A1C211FED00776ACD / * opus . h in Headers * / , < nl > 	 	 	 	 15D35F511C20187E00E3717A / * ASQueue . h in Headers * / , < nl > 	 	 	 	 15D35F1D1C20185500E3717A / * picture . h in Headers * / , < nl > + 	 	 	 	 06E3230E1C69445C00D66F53 / * WebRTC . h in Headers * / , < nl > 	 	 	 	 06230F421BC95BD200A4807B / * RMPhoneFormat . h in Headers * / , < nl > 	 	 	 	 069CF4CE1BCB909A00C66E12 / * CLToken . h in Headers * / , < nl > 	 	 	 ) ; < nl > @ @ - 1645 , 7 + 1663 , 7 @ @ < nl > 	 	 	 ) ; < nl > 	 	 	 runOnlyForDeploymentPostprocessing = 0 ; < nl > 	 	 	 shellPath = / bin / sh ; < nl > - 	 	 	 shellScript = " set - e \ n \ ncd ActorSDK / Sources / ActorCore \ nmake translate \ nmake build - j3 \ n \ ncd \ " $ { CONFIGURATION _ TEMP _ DIR } / j2objc / \ " \ npython \ " $ { PROJECT _ DIR } / ActorSDK / Sources / ActorCore / convert . py \ " \ " $ { PROJECT _ DIR } / ActorSDK / Sources / ActorCore / ActorCore . h \ " \ n \ ncp - a \ " $ { CONFIGURATION _ TEMP _ DIR } / j2objc / Public / \ " \ " $ { CONFIGURATION _ BUILD _ DIR } / ActorSDK . framework / Headers / \ " \ n \ ncp - a \ " $ { PROJECT _ DIR } / . . / sdk - core / core / core - shared / src / main / resources / \ " \ " $ { CONFIGURATION _ BUILD _ DIR } / ActorSDK . framework / \ " " ; < nl > + 	 	 	 shellScript = " set - e \ n \ ncd ActorSDK / Sources / ActorCore \ nmake translate \ nmake build - j3 \ n \ ncd \ " $ { CONFIGURATION _ TEMP _ DIR } / j2objc / \ " \ npython \ " $ { PROJECT _ DIR } / ActorSDK / Sources / ActorCore / convert . py \ " \ " $ { PROJECT _ DIR } / ActorSDK / Sources / ActorCore / ActorCore . h \ " \ n \ ncp - af \ " $ { PODS _ ROOT } / libjingle _ peerconnection / libjingle _ peerconnection / Headers / \ " \ " $ { CONFIGURATION _ BUILD _ DIR } / ActorSDK . framework / Headers / \ " \ n \ ncp - a \ " $ { CONFIGURATION _ TEMP _ DIR } / j2objc / Public / \ " \ " $ { CONFIGURATION _ BUILD _ DIR } / ActorSDK . framework / Headers / \ " \ n \ n \ ncp - a \ " $ { PROJECT _ DIR } / . . / sdk - core / core / core - shared / src / main / resources / \ " \ " $ { CONFIGURATION _ BUILD _ DIR } / ActorSDK . framework / \ " " ; < nl > 	 	 } ; < nl > 	 	 842CC4516DA967714D224C37 / * Check Pods Manifest . lock * / = { < nl > 	 	 	 isa = PBXShellScriptBuildPhase ; < nl > @ @ - 1715 , 6 + 1733 , 7 @ @ < nl > 	 	 	 	 15D35F601C20187E00E3717A / * AAOpusAudioPlayerAU . mm in Sources * / , < nl > 	 	 	 	 15D35F1C1C20185500E3717A / * picture . c in Sources * / , < nl > 	 	 	 	 066A532B1BC53406000E606E / * AABubbleCell . swift in Sources * / , < nl > + 	 	 	 	 06E323151C6A7AC000D66F53 / * AACallViewController . swift in Sources * / , < nl > 	 	 	 	 066A52C71BC521EA000E606E / * AAEditTextController . swift in Sources * / , < nl > 	 	 	 	 153F6B5D1C2B3AC500C0B960 / * AABubbleStickerCell . swift in Sources * / , < nl > 	 	 	 	 15D35F1E1C20185500E3717A / * wav _ io . c in Sources * / , < nl > @ @ - 1880 , 6 + 1899 , 7 @ @ < nl > 	 	 	 	 066A52421BC4EECD000E606E / * AATableViewHeader . swift in Sources * / , < nl > 	 	 	 	 066A52CD1BC521FA000E606E / * AADialogsListContentControllerDelegate . swift in Sources * / , < nl > 	 	 	 	 15D35F261C20186200E3717A / * framing . c in Sources * / , < nl > + 	 	 	 	 06E323111C694C1D00D66F53 / * WebRTCExt . swift in Sources * / , < nl > 	 	 	 	 066A52231BC4EEAC000E606E / * AAManagedSection . swift in Sources * / , < nl > 	 	 	 	 066A52D11BC52204000E606E / * AADialogCell . swift in Sources * / , < nl > 	 	 	 	 066A51901BC4C383000E606E / * CocoaNetworkRuntime . swift in Sources * / , < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > index 1f22c74 . . 2b4bf24 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > @ @ - 375 , 7 + 375 , 7 @ @ public class AABinder { < nl > < nl > } < nl > < nl > - public func bind < T1 , T2 , T3 > ( valueModel1 : ARValue , valueModel2 : ARValue , valueModel3 : ARValue , closure : ( value1 : T1 ? , value2 : T2 ? , value3 : T3 ? ) - > ( ) ) { < nl > + public func bind < T1 , T2 , T3 > ( valueModel1 : ARValue , valueModel2 : ARValue , valueModel3 : ARValue , closure : ( value1 : T1 ! , value2 : T2 ! , value3 : T3 ! ) - > ( ) ) { < nl > < nl > let listener1 = BindListener { ( _ value1 ) - > ( ) in < nl > closure ( value1 : _ value1 as ? T1 , value2 : valueModel2 . get ( ) as ? T2 , value3 : valueModel3 . get ( ) as ? T3 ) < nl > @ @ - 396 , 7 + 396 , 7 @ @ public class AABinder { < nl > } < nl > < nl > < nl > - public func bind < T1 , T2 > ( valueModel1 : ARValue , valueModel2 : ARValue , closure : ( value1 : T1 ? , value2 : T2 ? ) - > ( ) ) { < nl > + public func bind < T1 , T2 > ( valueModel1 : ARValue , valueModel2 : ARValue , closure : ( value1 : T1 ! , value2 : T2 ! ) - > ( ) ) { < nl > let listener1 = BindListener { ( _ value1 ) - > ( ) in < nl > closure ( value1 : _ value1 as ? T1 , value2 : valueModel2 . get ( ) as ? T2 ) < nl > } ; < nl > @ @ - 410 , 7 + 410 , 7 @ @ public class AABinder { < nl > closure ( value1 : valueModel1 . get ( ) as ? T1 , value2 : valueModel2 . get ( ) as ? T2 ) < nl > } < nl > < nl > - public func bind < T > ( value : ARValue , closure : ( value : T ? ) - > ( ) ) { < nl > + public func bind < T > ( value : ARValue , closure : ( value : T ! ) - > ( ) ) { < nl > let listener = BindListener { ( value2 ) - > ( ) in < nl > closure ( value : value2 as ? T ) < nl > } ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSWebRTCProvider . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSWebRTCProvider . swift < nl > index c608432 . . 7b32ab5 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSWebRTCProvider . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSWebRTCProvider . swift < nl > @ @ - 3 , 43 + 3 , 179 @ @ < nl > / / < nl > < nl > import Foundation < nl > - import RTCPeerConnection < nl > < nl > class iOSWebRTCProvider : NSObject , ACWebRTCProvider { < nl > < nl > - private var controller : ACWebRTCController ! ! < nl > - private var messenger : ACMessenger ! ! < nl > + private var controller : ACWebRTCController ! < nl > + private var messenger : ACMessenger ! < nl > + < nl > + private lazy var queue : dispatch _ queue _ t = dispatch _ queue _ create ( " webrtc _ queue " , DISPATCH _ QUEUE _ SERIAL ) < nl > + private let peerConnectionFactory = RTCPeerConnectionFactory ( ) < nl > + private let mediaConstraints = RTCMediaConstraints ( ) < nl > + < nl > + private var runningCallId : jlong ? < nl > + private var peerConnection : RTCPeerConnection ! < nl > + private var voiceCapture : RTCAudioTrack ! < nl > + < nl > + override init ( ) { < nl > + RTCPeerConnectionFactory . initializeSSL ( ) < nl > + } < nl > < nl > func initWithMessenger ( messenger : ACMessenger , withController controller : ACWebRTCController ) { < nl > self . controller = controller < nl > self . messenger = messenger < nl > } < nl > < nl > + / / < nl > + / / Start / End of calls < nl > + / / < nl > + < nl > func onIncomingCallWithCallId ( callId : jlong ) { < nl > - < nl > + dispatchSync ( ) { < nl > + print ( " onIncomingCallWithCallId " ) < nl > + self . runningCallId = callId < nl > + dispatchOnUi ( ) { ( ) - > Void in < nl > + let rootController = ActorSDK . sharedActor ( ) . bindedToWindow . rootViewController ! < nl > + rootController . presentViewController ( AACallViewController ( callId : callId ) , animated : true , completion : nil ) < nl > + } < nl > + } < nl > } < nl > < nl > func onOutgoingCallWithCallId ( callId : jlong ) { < nl > + dispatchSync ( ) { < nl > + print ( " onOutgoingCallWithCallId " ) < nl > + self . runningCallId = callId < nl > + } < nl > + } < nl > + < nl > + func onCallEndWithCallId ( callId : jlong ) { < nl > + dispatchSync ( ) { < nl > + if ( self . peerConnection ! = nil ) { < nl > + self . peerConnection . close ( ) < nl > + self . peerConnection = nil < nl > + } < nl > + self . voiceCapture = nil < nl > + self . runningCallId = - 1 < nl > + } < nl > + } < nl > + < nl > + / / < nl > + / / In process < nl > + / / < nl > + < nl > + private func createPeerConnection ( callId : jlong ) { < nl > + / / < nl > + / / Create Peer Connection < nl > + / / < nl > + let iceServers = [ < nl > + RTCICEServer ( URI : NSURL ( string : " stun : 62 . 4 . 22 . 219 : 3478 " ) , username : " " , password : " " ) , < nl > + RTCICEServer ( URI : NSURL ( string : " turn : 62 . 4 . 22 . 219 : 3478 ? transport = tcp " ) , username : " actor " , password : " password " ) , < nl > + RTCICEServer ( URI : NSURL ( string : " turn : 62 . 4 . 22 . 219 : 3478 ? transport = udp " ) , username : " actor " , password : " password " ) < nl > + ] < nl > + peerConnection = peerConnectionFactory . peerConnectionWithICEServers ( iceServers , constraints : mediaConstraints , delegate : nil ) < nl > < nl > + / / < nl > + / / Crete Media Stream < nl > + / / < nl > + voiceCapture = peerConnectionFactory . audioTrackWithID ( " audio0 " ) < nl > + let mediaStream = peerConnectionFactory . mediaStreamWithLabel ( " ARDAMSa0 " ) < nl > + mediaStream . addAudioTrack ( voiceCapture ) < nl > + peerConnection . addStream ( mediaStream ) < nl > + < nl > + / / < nl > + / / Handling events from peer connection < nl > + / / < nl > + peerConnection . onCandidateReceived = { ( candidate ) in < nl > + self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + print ( " On Candidate arrived " ) < nl > + self . controller . sendCandidateWithInt ( jint ( candidate . sdpMLineIndex ) , withNSString : candidate . sdpMid , withNSString : candidate . sdp ) < nl > + } < nl > + } < nl > + peerConnection . onStreamAdded = { ( stream ) in < nl > + self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + print ( " On stream added " ) < nl > + } < nl > + } < nl > } < nl > < nl > func onOfferNeededWithCallId ( callId : jlong ) { < nl > - < nl > + self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + print ( " onOfferNeededWithCallId " ) < nl > + } < nl > } < nl > < nl > func onAnswerReceivedWithCallId ( callId : jlong , withSDP offerSDP : String ) { < nl > - < nl > + self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + print ( " onAnswerReceivedWithCallId " ) < nl > + } < nl > } < nl > < nl > func onOfferReceivedWithCallId ( callId : jlong , withSDP offerSDP : String ) { < nl > < nl > + / / < nl > + / / Stages : < nl > + / / 1 . Create Peer Connection < nl > + / / 2 . Set Remote description < nl > + / / 3 . Create Answer < nl > + / / 4 . Set Local description from answer < nl > + / / 5 . Send Answer and enable candidate receiving < nl > + / / < nl > + < nl > + self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + self . createPeerConnection ( callId ) < nl > + self . peerConnection . setRemoteDescription ( RTCSessionDescription ( type : " offer " , sdp : offerSDP ) ) { ( error ) - > ( ) in < nl > + self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + if ( error = = nil ) { < nl > + self . peerConnection . createAnswer ( self . mediaConstraints ) { ( sdp , error ) - > ( ) in < nl > + self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + if ( error = = nil ) { < nl > + self . peerConnection . setLocalDescription ( sdp ) { ( error ) - > ( ) in < nl > + self . dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + if ( error = = nil ) { < nl > + self . controller . sendAnswerWithNSString ( sdp . description ) < nl > + self . controller . readyForCandidates ( ) < nl > + } else { < nl > + self . controller . endCall ( ) < nl > + } < nl > + } < nl > + } < nl > + } else { < nl > + self . controller . endCall ( ) < nl > + } < nl > + } < nl > + } < nl > + } else { < nl > + self . controller . endCall ( ) < nl > + } < nl > + } < nl > + } < nl > + } < nl > } < nl > < nl > func onCandidateWithCallId ( callId : jlong , withId id _ : String , withLabel label : jint , withSDP sdp : String ) { < nl > - < nl > + dispatchAsync ( callId ) { ( ) - > ( ) in < nl > + self . peerConnection . addICECandidate ( RTCICECandidate ( mid : id _ , index : Int ( label ) , sdp : sdp ) ) < nl > + } < nl > } < nl > < nl > - func onCallEndWithCallId ( callId : jlong ) { < nl > - < nl > + < nl > + / / < nl > + / / Dispatching < nl > + / / < nl > + < nl > + private func dispatchSync ( closure : ( ) - > ( ) ) { < nl > + dispatch _ sync ( queue ) { ( ) - > Void in < nl > + closure ( ) < nl > + } < nl > + } < nl > + < nl > + private func dispatchAsync ( callId : jlong , closure : ( ) - > ( ) ) { < nl > + if ( self . runningCallId = = callId ) { < nl > + dispatch _ async ( queue ) { ( ) - > Void in < nl > + if ( self . runningCallId = = callId ) { < nl > + closure ( ) < nl > + } < nl > + } < nl > + } < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . h b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . h < nl > index 99f4b2f . . ec8398b 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . h < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . h < nl > @ @ - 50 , 5 + 50 , 4 @ @ FOUNDATION _ EXPORT const unsigned char ActorSDKVersionString [ ] ; < nl > < nl > # import " CLTokenView . h " < nl > < nl > - < nl > - < nl > + # import " WebRTC . h " < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift < nl > new file mode 100644 < nl > index 0000000 . . 1336eb5 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift < nl > @ @ - 0 , 0 + 1 , 128 @ @ < nl > + / / < nl > + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > < nl > + / / < nl > + < nl > + import Foundation < nl > + import PureLayout < nl > + < nl > + public class AACallViewController : AAViewController { < nl > + < nl > + public let binder = AABinder ( ) < nl > + public let callId : jlong < nl > + public let call : ACCallModel < nl > + public let bgImage = UIImageView ( image : UIImage . bundled ( " bg _ 1 . jpg " ) ) < nl > + public let bgImageOverlay = UIView ( ) < nl > + public let senderAvatar : AAAvatarView = AAAvatarView ( frameSize : 120 , type : . Rounded ) < nl > + public let peerTitle = UILabel ( ) < nl > + public let answerCall = UIButton ( frame : CGRectMake ( 0 , 0 , 80 , 80 ) ) < nl > + < nl > + public init ( callId : jlong ) { < nl > + self . callId = callId < nl > + self . call = ActorSDK . sharedActor ( ) . messenger . getCallWithCallId ( callId ) < nl > + super . init ( ) < nl > + } < nl > + < nl > + public required init ( coder aDecoder : NSCoder ) { < nl > + fatalError ( " init ( coder : ) has not been implemented " ) < nl > + } < nl > + < nl > + public override func viewDidLoad ( ) { < nl > + super . viewDidLoad ( ) < nl > + < nl > + answerCall . backgroundColor = UIColor ( rgb : 0xc04945 ) < nl > + answerCall . setTitle ( " End Call " , forState : . Normal ) < nl > + answerCall . setTitleColor ( UIColor . whiteColor ( ) , forState : . Normal ) < nl > + answerCall . viewDidTap = { < nl > + Actor . endCallWithCallId ( self . callId ) < nl > + self . navigateDetail ( ConversationViewController ( peer : self . call . getPeer ( ) ) ) < nl > + self . dismiss ( ) < nl > + } < nl > + < nl > + bgImage . contentMode = UIViewContentMode . ScaleAspectFill < nl > + bgImageOverlay . opaque = false < nl > + bgImageOverlay . backgroundColor = UIColor ( rgb : 0x86aed7 ) < nl > + peerTitle . textColor = UIColor . whiteColor ( ) < nl > + peerTitle . textAlignment = NSTextAlignment . Center < nl > + peerTitle . font = UIFont . thinSystemFontOfSize ( 32 ) < nl > + < nl > + self . view . addSubview ( bgImage ) < nl > + self . view . addSubview ( bgImageOverlay ) < nl > + self . view . addSubview ( senderAvatar ) < nl > + self . view . addSubview ( peerTitle ) < nl > + self . view . addSubview ( answerCall ) < nl > + } < nl > + < nl > + public override func viewWillLayoutSubviews ( ) { < nl > + super . viewWillLayoutSubviews ( ) < nl > + < nl > + bgImage . frame = self . view . bounds < nl > + bgImageOverlay . frame = self . view . bounds < nl > + < nl > + senderAvatar . frame = CGRectMake ( ( self . view . width - 120 ) / 2 , 100 , 120 , 120 ) < nl > + peerTitle . frame = CGRectMake ( 60 , senderAvatar . bottom + 20 , view . width - 120 , 34 ) < nl > + answerCall . frame = CGRectMake ( 0 , self . view . height - 48 , self . view . width , 48 ) < nl > + } < nl > + < nl > + public override func viewWillAppear ( animated : Bool ) { < nl > + super . viewWillAppear ( animated ) < nl > + < nl > + / / < nl > + / / Binding State < nl > + / / < nl > + binder . bind ( call . getState ( ) ) { ( value : ACCallState ! ) - > ( ) in < nl > + if ( ACCallState _ Enum . CALLING _ INCOMING = = value . toNSEnum ( ) ) { < nl > + print ( " Call \ ( self . callId ) incoming " ) < nl > + } else if ( ACCallState _ Enum . IN _ PROGRESS = = value . toNSEnum ( ) ) { < nl > + print ( " Call \ ( self . callId ) in progress " ) < nl > + } else { < nl > + print ( " Call \ ( self . callId ) unknown " ) < nl > + } < nl > + } < nl > + < nl > + / / < nl > + / / Binding Avatar < nl > + / / < nl > + binder . bind ( call . getActiveMembers ( ) ) { ( value : JavaUtilArrayList ! ) - > ( ) in < nl > + < nl > + print ( " Bind user " ) < nl > + < nl > + var users = [ ACUserVM ] ( ) < nl > + for i in 0 . . < value . size ( ) { < nl > + let uid = ( value . getWithInt ( i ) as ! JavaLangInteger ) . intValue ( ) < nl > + if ( uid ! = Actor . myUid ( ) ) { < nl > + users . append ( Actor . getUserWithUid ( uid ) ) < nl > + } < nl > + } < nl > + < nl > + print ( " Bind user \ ( users . count ) " ) < nl > + < nl > + if ( users . count = = 1 ) { < nl > + self . senderAvatar . bind ( users [ 0 ] . getNameModel ( ) . get ( ) , id : users [ 0 ] . getId ( ) , avatar : users [ 0 ] . getAvatarModel ( ) . get ( ) ) < nl > + } else { < nl > + / / TODO : Multiple Users < nl > + } < nl > + } < nl > + < nl > + / / < nl > + / / Binding Title < nl > + / / < nl > + if ( call . getPeer ( ) . peerType . toNSEnum ( ) = = ACPeerType _ Enum . PRIVATE ) { < nl > + binder . bind ( Actor . getUserWithUid ( call . getPeer ( ) . peerId ) . getNameModel ( ) , closure : { ( value : String ! ) - > ( ) in < nl > + self . peerTitle . text = value < nl > + } ) < nl > + } else if ( call . getPeer ( ) . peerType . toNSEnum ( ) = = ACPeerType _ Enum . GROUP ) { < nl > + binder . bind ( Actor . getGroupWithGid ( call . getPeer ( ) . peerId ) . getNameModel ( ) , closure : { ( value : String ! ) - > ( ) in < nl > + self . peerTitle . text = value < nl > + } ) < nl > + } < nl > + < nl > + UIApplication . sharedApplication ( ) . setStatusBarStyle ( . LightContent , animated : true ) < nl > + } < nl > + < nl > + public override func viewWillDisappear ( animated : Bool ) { < nl > + super . viewWillDisappear ( animated ) < nl > + binder . unbindAll ( ) < nl > + < nl > + UIApplication . sharedApplication ( ) . setStatusBarStyle ( ActorSDK . sharedActor ( ) . style . vcStatusBarStyle , animated : true ) < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Navigations . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Navigations . swift < nl > index 0e533ef . . 6003e79 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Navigations . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Navigations . swift 	 < nl > @ @ - 7 , 19 + 7 , 15 @ @ import Foundation < nl > public extension UIViewController { < nl > public func navigateDetail ( controller : UIViewController ) { < nl > if ( AADevice . isiPad ) { < nl > - let split = UIApplication . sharedApplication ( ) . keyWindow ? . rootViewController as ! UISplitViewController ; < nl > + let split = UIApplication . sharedApplication ( ) . keyWindow ? . rootViewController as ! UISplitViewController < nl > let master = split . viewControllers [ 0 ] < nl > let detail = AANavigationController ( ) < nl > detail . viewControllers = [ controller ] < nl > split . viewControllers = [ master , detail ] < nl > } else { < nl > - < nl > - if controller . isKindOfClass ( ConversationViewController . self ) { < nl > - / / navigationController ? . view . layer . speed = 1 . 5 < nl > - } < nl > - < nl > + let tabBar = UIApplication . sharedApplication ( ) . keyWindow ? . rootViewController as ! UITabBarController < nl > controller . hidesBottomBarWhenPushed = true < nl > - navigationController ? . pushViewController ( controller , animated : true ) ; < nl > + ( tabBar . selectedViewController as ! AANavigationController ) . pushViewController ( controller , animated : true ) < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift < nl > index 3351f21 . . 917a3a6 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift < nl > @ @ - 67 , 7 + 67 , 7 @ @ class AAUserViewController : AAContentTableController { < nl > / / Profile : Send messages < nl > s . action ( " ProfileSendMessage " ) { ( r ) - > ( ) in < nl > r . selectAction = { ( ) - > Bool in < nl > - self . navigateDetail ( ConversationViewController ( peer : ACPeer . userWithInt ( jint ( self . uid ) ) ) ) < nl > + self . navigateDetail ( ConversationViewController ( peer : ACPeer . userWithInt ( jint ( self . uid ) ) ) ) < nl > self . popover ? . dismissPopoverAnimated ( true ) < nl > return false < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / WebRTC . h b / actor - sdk / sdk - core - ios / ActorSDK / Sources / WebRTC . h < nl > new file mode 100644 < nl > index 0000000 . . b2b2fc7 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / WebRTC . h < nl > @ @ - 0 , 0 + 1 , 34 @ @ < nl > + / / < nl > + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > < nl > + / / < nl > + < nl > + # import " RTCAudioSource . h " < nl > + # import " RTCAudioTrack . h " < nl > + # import " RTCAVFoundationVideoSource . h " < nl > + # import " RTCDataChannel . h " < nl > + # import " RTCEAGLVideoView . h " < nl > + # import " RTCFileLogger . h " < nl > + # import " RTCI420Frame . h " < nl > + # import " RTCICECandidate . h " < nl > + # import " RTCICEServer . h " < nl > + # import " RTCLogging . h " < nl > + # import " RTCMediaConstraints . h " < nl > + # import " RTCMediaSource . h " < nl > + # import " RTCMediaStream . h " < nl > + # import " RTCMediaStreamTrack . h " < nl > + # import " RTCOpenGLVideoRenderer . h " < nl > + # import " RTCPair . h " < nl > + # import " RTCPeerConnection . h " < nl > + # import " RTCPeerConnectionFactory . h " < nl > + # import " RTCMediaConstraints . h " < nl > + # import " RTCPeerConnectionDelegate . h " < nl > + # import " RTCPeerConnectionInterface . h " < nl > + # import " RTCSessionDescription . h " < nl > + # import " RTCSessionDescriptionDelegate . h " < nl > + # import " RTCStatsDelegate . h " < nl > + # import " RTCStatsReport . h " < nl > + # import " RTCTypes . h " < nl > + # import " RTCVideoCapturer . h " < nl > + # import " RTCVideoRenderer . h " < nl > + # import " RTCVideoSource . h " < nl > + # import " RTCVideoTrack . h " < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / WebRTCExt . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / WebRTCExt . swift < nl > new file mode 100644 < nl > index 0000000 . . 35197b8 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / WebRTCExt . swift < nl > @ @ - 0 , 0 + 1 , 146 @ @ < nl > + / / < nl > + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > < nl > + / / < nl > + < nl > + import Foundation < nl > + import BrightFutures < nl > + < nl > + class AAPeerConnectionDelegate : NSObject , RTCPeerConnectionDelegate { < nl > + < nl > + var onCandidateReceived : ( ( RTCICECandidate ) - > ( ) ) ? < nl > + var onStreamAdded : ( ( RTCMediaStream ) - > ( ) ) ? < nl > + < nl > + func peerConnection ( peerConnection : RTCPeerConnection ! , signalingStateChanged stateChanged : RTCSignalingState ) { < nl > + < nl > + } < nl > + < nl > + func peerConnection ( peerConnection : RTCPeerConnection ! , addedStream stream : RTCMediaStream ! ) { < nl > + onStreamAdded ? ( stream ) < nl > + } < nl > + < nl > + func peerConnection ( peerConnection : RTCPeerConnection ! , removedStream stream : RTCMediaStream ! ) { < nl > + < nl > + } < nl > + < nl > + func peerConnectionOnRenegotiationNeeded ( peerConnection : RTCPeerConnection ! ) { < nl > + < nl > + } < nl > + < nl > + func peerConnection ( peerConnection : RTCPeerConnection ! , iceConnectionChanged newState : RTCICEConnectionState ) { < nl > + < nl > + } < nl > + < nl > + func peerConnection ( peerConnection : RTCPeerConnection ! , iceGatheringChanged newState : RTCICEGatheringState ) { < nl > + < nl > + } < nl > + < nl > + func peerConnection ( peerConnection : RTCPeerConnection ! , gotICECandidate candidate : RTCICECandidate ! ) { < nl > + onCandidateReceived ? ( candidate ) < nl > + } < nl > + < nl > + func peerConnection ( peerConnection : RTCPeerConnection ! , didOpenDataChannel dataChannel : RTCDataChannel ! ) { < nl > + < nl > + } < nl > + } < nl > + < nl > + class AASessionDescriptionCreateDelegate : NSObject , RTCSessionDescriptionDelegate { < nl > + < nl > + let didCreate : ( RTCSessionDescription ! , NSError ! ) - > ( ) < nl > + let peerConnection : RTCPeerConnection < nl > + < nl > + init ( didCreate : ( RTCSessionDescription ! , NSError ! ) - > ( ) , peerConnection : RTCPeerConnection ) { < nl > + self . didCreate = didCreate < nl > + self . peerConnection = peerConnection < nl > + } < nl > + < nl > + func peerConnection ( peerConnection : RTCPeerConnection ! , didCreateSessionDescription sdp : RTCSessionDescription ! , error : NSError ! ) { < nl > + didCreate ( sdp ! , error ) < nl > + } < nl > + < nl > + func peerConnection ( peerConnection : RTCPeerConnection ! , didSetSessionDescriptionWithError error : NSError ! ) { < nl > + < nl > + } < nl > + } < nl > + < nl > + < nl > + private var sessionSetTarget = " descTarget " < nl > + class AASessionDescriptionSetDelegate : NSObject , RTCSessionDescriptionDelegate { < nl > + < nl > + let didSet : ( NSError ! ) - > ( ) < nl > + let peerConnection : RTCPeerConnection < nl > + < nl > + init ( didSet : ( NSError ! ) - > ( ) , peerConnection : RTCPeerConnection ) { < nl > + self . didSet = didSet < nl > + self . peerConnection = peerConnection < nl > + super . init ( ) < nl > + < nl > + setAssociatedObject ( peerConnection , value : self , associativeKey : & sessionSetTarget ) < nl > + } < nl > + < nl > + func peerConnection ( peerConnection : RTCPeerConnection ! , didCreateSessionDescription sdp : RTCSessionDescription ! , error : NSError ! ) { < nl > + print ( " didCreateSessionDescription " ) < nl > + } < nl > + < nl > + func peerConnection ( peerConnection : RTCPeerConnection ! , didSetSessionDescriptionWithError error : NSError ! ) { < nl > + print ( " didSetSessionDescriptionWithError " ) < nl > + < nl > + setAssociatedObject ( peerConnection , value : " " , associativeKey : & sessionSetTarget ) < nl > + < nl > + didSet ( error ) < nl > + } < nl > + } < nl > + < nl > + private var targetReference = " target " < nl > + extension RTCPeerConnection { < nl > + < nl > + public var onCandidateReceived : ( ( RTCICECandidate ) - > ( ) ) ? { < nl > + set ( value ) { < nl > + intDelegate ( ) . onCandidateReceived = value < nl > + } < nl > + get { < nl > + return intDelegate ( ) . onCandidateReceived < nl > + } < nl > + } < nl > + < nl > + public var onStreamAdded : ( ( RTCMediaStream ) - > ( ) ) ? { < nl > + set ( value ) { < nl > + intDelegate ( ) . onStreamAdded = value < nl > + } < nl > + get { < nl > + return intDelegate ( ) . onStreamAdded < nl > + } < nl > + } < nl > + < nl > + private func intDelegate ( ) - > AAPeerConnectionDelegate { < nl > + let stored = self . delegate as ? AAPeerConnectionDelegate < nl > + if ( stored ! = nil ) { < nl > + return stored ! < nl > + } < nl > + < nl > + let nDelegate = AAPeerConnectionDelegate ( ) < nl > + self . delegate = nDelegate < nl > + setAssociatedObject ( self , value : nDelegate , associativeKey : & targetReference ) < nl > + return nDelegate < nl > + } < nl > + < nl > + func createAnswer ( constraints : RTCMediaConstraints , didCreate : ( RTCSessionDescription ! , NSError ! ) - > ( ) ) { < nl > + createAnswerWithDelegate ( AASessionDescriptionCreateDelegate ( didCreate : didCreate , peerConnection : self ) , constraints : constraints ) < nl > + } < nl > + < nl > + func createOffer ( constraints : RTCMediaConstraints , didCreate : ( RTCSessionDescription ! , NSError ! ) - > ( ) ) { < nl > + createOfferWithDelegate ( AASessionDescriptionCreateDelegate ( didCreate : didCreate , peerConnection : self ) , constraints : constraints ) < nl > + } < nl > + < nl > + func setLocalDescription ( sdp : RTCSessionDescription , didSet : ( NSError ! ) - > ( ) ) { < nl > + setLocalDescriptionWithDelegate ( AASessionDescriptionSetDelegate ( didSet : didSet , peerConnection : self ) , sessionDescription : sdp ) < nl > + } < nl > + < nl > + func setRemoteDescription ( sdp : RTCSessionDescription , didSet : ( NSError ! ) - > ( ) ) { < nl > + setRemoteDescriptionWithDelegate ( AASessionDescriptionSetDelegate ( didSet : didSet , peerConnection : self ) , sessionDescription : sdp ) < nl > + } < nl > + } < nl > + < nl > + < nl > + < nl > + < nl > + < nl > diff - - git a / actor - sdk / sdk - core - ios / Podfile b / actor - sdk / sdk - core - ios / Podfile < nl > index 74047ee . . 4d64e4b 100644 < nl > - - - a / actor - sdk / sdk - core - ios / Podfile < nl > + + + b / actor - sdk / sdk - core - ios / Podfile < nl > @ @ - 22 , 12 + 22 , 15 @ @ target ' ActorApp ' do < nl > pod ' CocoaAsyncSocket ' < nl > pod ' zipzap ' < nl > pod ' YYKit ' < nl > + pod ' BrightFutures ' < nl > < nl > # Main UI < nl > pod ' TTTAttributedLabel ' < nl > pod ' RSKImageCropper ' < nl > pod ' JDStatusBarNotification ' < nl > pod ' Neon ' < nl > + pod ' Cartography ' < nl > + pod ' PureLayout ' < nl > < nl > # Small UI < nl > pod ' VBFPopFlatButton ' < nl > @ @ - 44 , 7 + 47 , 7 @ @ target ' ActorApp ' do < nl > pod ' PSTAlertController ' < nl > < nl > # Calls < nl > - pod ' libjingle _ peerconnection ' < nl > + # pod ' libjingle _ peerconnection ' < nl > end < nl > < nl > target ' ActorSDK ' do < nl > @ @ - 58 , 6 + 61 , 9 @ @ target ' ActorSDK ' do < nl > pod ' CocoaAsyncSocket ' < nl > pod ' zipzap ' < nl > pod ' YYKit ' < nl > + pod ' BrightFutures ' < nl > + pod ' Cartography ' < nl > + pod ' PureLayout ' < nl > < nl > # Main UI < nl > pod ' TTTAttributedLabel ' < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java < nl > index 510dfcd . . d0b7b19 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java < nl > @ @ - 3 , 6 + 3 , 8 @ @ package im . actor . core . js . providers ; < nl > import com . google . gwt . core . client . JavaScriptObject ; < nl > import com . google . gwt . core . client . JsArray ; < nl > < nl > + import org . jetbrains . annotations . NotNull ; < nl > + < nl > import im . actor . core . Messenger ; < nl > import im . actor . core . js . JsMessenger ; < nl > import im . actor . core . js . modules . JsScheduller ; < nl > @ @ - 35 , 7 + 37 , 7 @ @ public class JsWebRTCProvider implements WebRTCProvider { < nl > private long runningCallId ; < nl > < nl > @ Override < nl > - public void init ( Messenger messenger , WebRTCController controller ) { < nl > + public void init ( @ NotNull Messenger messenger , @ NotNull WebRTCController controller ) { < nl > this . controller = controller ; < nl > this . messenger = ( JsMessenger ) messenger ; < nl > } < nl > @ @ - 146 , 7 + 148 , 7 @ @ public class JsWebRTCProvider implements WebRTCProvider { < nl > } < nl > < nl > @ Override < nl > - public void onAnswerReceived ( final long callId , String offerSDP ) { < nl > + public void onAnswerReceived ( final long callId , @ NotNull String offerSDP ) { < nl > Log . d ( TAG , " onAnswerReceived " ) ; < nl > peerConnection . setRemoteDescription ( JsSessionDescription . createAnswer ( offerSDP ) ) . then ( new Consumer < JsSessionDescription > ( ) { < nl > @ Override < nl > @ @ - 167 , 7 + 169 , 7 @ @ public class JsWebRTCProvider implements WebRTCProvider { < nl > } < nl > < nl > @ Override < nl > - public void onOfferReceived ( final long callId , final String offerSDP ) { < nl > + public void onOfferReceived ( final long callId , @ NotNull final String offerSDP ) { < nl > Log . d ( TAG , " onOfferReceived " ) ; < nl > < nl > createPeerConnection ( callId ) ; < nl > @ @ - 222 , 7 + 224 , 7 @ @ public class JsWebRTCProvider implements WebRTCProvider { < nl > } < nl > < nl > @ Override < nl > - public void onCandidate ( long callId , String id , int label , String sdp ) { < nl > + public void onCandidate ( long callId , @ NotNull String id , int label , @ NotNull String sdp ) { < nl > Log . d ( TAG , " onCandidate " ) ; < nl > peerConnection . addIceCandidate ( label , sdp ) ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index 92d4d87 . . 52feabf 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 173 , 7 + 173 , 7 @ @ 
 	 	 06CE898A1BD8401C005A5530 / * Reachability . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06CE89891BD8401C005A5530 / * Reachability . swift * / ; } ; 
 	 	 06CE898C1BD841C9005A5530 / * SystemConfiguration . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / ; } ; 
 	 	 06CE89901BD84DF5005A5530 / * ActorSDKAnalytics . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06CE898F1BD84DF5005A5530 / * ActorSDKAnalytics . swift * / ; } ; 
 - 	 	 06E322C91C69344A00D66F53 / * iOSWebRTCProvider . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E322C81C69344A00D66F53 / * iOSWebRTCProvider . swift * / ; } ; 
 + 	 	 06E322C91C69344A00D66F53 / * iOSCallsProvider . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E322C81C69344A00D66F53 / * iOSCallsProvider . swift * / ; } ; 
 	 	 06E3230E1C69445C00D66F53 / * WebRTC . h in Headers * / = { isa = PBXBuildFile ; fileRef = 06E3230D1C6942C400D66F53 / * WebRTC . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; 
 	 	 06E323111C694C1D00D66F53 / * WebRTCExt . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E323101C694C1D00D66F53 / * WebRTCExt . swift * / ; } ; 
 	 	 06E323151C6A7AC000D66F53 / * AACallViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E323141C6A7AC000D66F53 / * AACallViewController . swift * / ; } ; 
 @ @ - 471 , 7 + 471 , 7 @ @ 
 	 	 06CE89891BD8401C005A5530 / * Reachability . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = Reachability . swift ; sourceTree = " < group > " ; } ; 
 	 	 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / = { isa = PBXFileReference ; lastKnownFileType = wrapper . framework ; name = SystemConfiguration . framework ; path = System / Library / Frameworks / SystemConfiguration . framework ; sourceTree = SDKROOT ; } ; 
 	 	 06CE898F1BD84DF5005A5530 / * ActorSDKAnalytics . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = ActorSDKAnalytics . swift ; sourceTree = " < group > " ; } ; 
 - 	 	 06E322C81C69344A00D66F53 / * iOSWebRTCProvider . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = iOSWebRTCProvider . swift ; sourceTree = " < group > " ; } ; 
 + 	 	 06E322C81C69344A00D66F53 / * iOSCallsProvider . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = iOSCallsProvider . swift ; sourceTree = " < group > " ; } ; 
 	 	 06E3230D1C6942C400D66F53 / * WebRTC . h * / = { isa = PBXFileReference ; lastKnownFileType = sourcecode . c . h ; path = WebRTC . h ; sourceTree = " < group > " ; } ; 
 	 	 06E323101C694C1D00D66F53 / * WebRTCExt . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = WebRTCExt . swift ; sourceTree = " < group > " ; } ; 
 	 	 06E323141C6A7AC000D66F53 / * AACallViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; name = AACallViewController . swift ; path = Calls / AACallViewController . swift ; sourceTree = " < group > " ; } ; 
 @ @ - 767 , 7 + 767 , 7 @ @ 
 	 	 	 	 065A06B51C6CEFE00012EA09 / * CocoaWebRTCRuntime . swift * / , 
 	 	 	 	 066A51871BC4C383000E606E / * iOSNotificationProvider . swift * / , 
 	 	 	 	 066A51881BC4C383000E606E / * iOSPhoneBookProvider . swift * / , 
 - 	 	 	 	 06E322C81C69344A00D66F53 / * iOSWebRTCProvider . swift * / , 
 + 	 	 	 	 06E322C81C69344A00D66F53 / * iOSCallsProvider . swift * / , 
 	 	 	 ) ; 
 	 	 	 path = Providers ; 
 	 	 	 sourceTree = " < group > " ; 
 @ @ - 1841 , 7 + 1841 , 7 @ @ 
 	 	 	 	 066A53221BC533F5000E606E / * AAMessagesFlowLayout . swift in Sources * / , 
 	 	 	 	 15D35F541C20187E00E3717A / * AAOpusAudioRecorder . m in Sources * / , 
 	 	 	 	 066A52671BC50E7B000E606E / * AAAuthPhoneViewController . swift in Sources * / , 
 - 	 	 	 	 06E322C91C69344A00D66F53 / * iOSWebRTCProvider . swift in Sources * / , 
 + 	 	 	 	 06E322C91C69344A00D66F53 / * iOSCallsProvider . swift in Sources * / , 
 	 	 	 	 066A53371BC537CA000E606E / * ConversationViewController . swift in Sources * / , 
 	 	 	 	 066A519D1BC4C390000E606E / * UDPreferencesStorage . swift in Sources * / , 
 	 	 	 	 069CF4CD1BCB909A00C66E12 / * CLBackspaceDetectingTextField . m in Sources * / , 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSCallsProvider . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSCallsProvider . swift 
 new file mode 100644 
 index 0000000 . . e0e489c 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSCallsProvider . swift 
 @ @ - 0 , 0 + 1 , 193 @ @ 
 + / / 
 + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > 
 + / / 
 + 
 + import Foundation 
 + 
 + class iOSCallsProvider : NSObject , ACCallsProvider { 
 + 
 + func onIncomingCallWithCallId ( callId : jlong ) { 
 + 
 + } 
 + 
 + func onOutgoingCallWithCallId ( callId : jlong ) { 
 + 
 + } 
 + 
 + func onCallEndWithCallId ( callId : jlong ) { 
 + 
 + } 
 + 
 + / / private var controller : ACWebRTCController ! 
 + / / private var messenger : ACMessenger ! 
 + / / 
 + / / private lazy var queue : dispatch _ queue _ t = dispatch _ queue _ create ( " webrtc _ queue " , DISPATCH _ QUEUE _ SERIAL ) 
 + / / private let peerConnectionFactory = RTCPeerConnectionFactory ( ) 
 + / / private let mediaConstraints = RTCMediaConstraints ( ) 
 + / / 
 + / / private var runningCallId : jlong ? 
 + / / private var peerConnection : RTCPeerConnection ! 
 + / / private var voiceCapture : RTCAudioTrack ! 
 + / / 
 + / / override init ( ) { 
 + / / RTCPeerConnectionFactory . initializeSSL ( ) 
 + / / } 
 + / / 
 + / / func initWithMessenger ( messenger : ACMessenger , withController controller : ACWebRTCController ) { 
 + / / self . controller = controller 
 + / / self . messenger = messenger 
 + / / } 
 + / / 
 + / / / / 
 + / / / / Start / End of calls 
 + / / / / 
 + / / 
 + / / func onIncomingCallWithCallId ( callId : jlong ) { 
 + / / dispatchSync ( ) { 
 + / / print ( " onIncomingCallWithCallId " ) 
 + / / self . runningCallId = callId 
 + / / dispatchOnUi ( ) { ( ) - > Void in 
 + / / let rootController = ActorSDK . sharedActor ( ) . bindedToWindow . rootViewController ! 
 + / / rootController . presentViewController ( AACallViewController ( callId : callId ) , animated : true , completion : nil ) 
 + / / } 
 + / / } 
 + / / } 
 + / / 
 + / / func onOutgoingCallWithCallId ( callId : jlong ) { 
 + / / dispatchSync ( ) { 
 + / / print ( " onOutgoingCallWithCallId " ) 
 + / / self . runningCallId = callId 
 + / / } 
 + / / } 
 + / / 
 + / / func onCallEndWithCallId ( callId : jlong ) { 
 + / / dispatchSync ( ) { 
 + / / if ( self . peerConnection ! = nil ) { 
 + / / self . peerConnection . close ( ) 
 + / / self . peerConnection = nil 
 + / / } 
 + / / self . voiceCapture = nil 
 + / / self . runningCallId = - 1 
 + / / } 
 + / / } 
 + / / 
 + / / / / 
 + / / / / In process 
 + / / / / 
 + / / 
 + / / private func createPeerConnection ( callId : jlong ) { 
 + / / / / 
 + / / / / Create Peer Connection 
 + / / / / 
 + / / let iceServers = [ 
 + / / RTCICEServer ( URI : NSURL ( string : " stun : 62 . 4 . 22 . 219 : 3478 " ) , username : " " , password : " " ) , 
 + / / RTCICEServer ( URI : NSURL ( string : " turn : 62 . 4 . 22 . 219 : 3478 ? transport = tcp " ) , username : " actor " , password : " password " ) , 
 + / / RTCICEServer ( URI : NSURL ( string : " turn : 62 . 4 . 22 . 219 : 3478 ? transport = udp " ) , username : " actor " , password : " password " ) 
 + / / ] 
 + / / peerConnection = peerConnectionFactory . peerConnectionWithICEServers ( iceServers , constraints : mediaConstraints , delegate : nil ) 
 + / / 
 + / / / / 
 + / / / / Crete Media Stream 
 + / / / / 
 + / / voiceCapture = peerConnectionFactory . audioTrackWithID ( " audio0 " ) 
 + / / let mediaStream = peerConnectionFactory . mediaStreamWithLabel ( " ARDAMSa0 " ) 
 + / / mediaStream . addAudioTrack ( voiceCapture ) 
 + / / peerConnection . addStream ( mediaStream ) 
 + / / 
 + / / / / 
 + / / / / Handling events from peer connection 
 + / / / / 
 + / / peerConnection . onCandidateReceived = { ( candidate ) in 
 + / / self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 + / / print ( " On Candidate arrived " ) 
 + / / self . controller . sendCandidateWithInt ( jint ( candidate . sdpMLineIndex ) , withNSString : candidate . sdpMid , withNSString : candidate . sdp ) 
 + / / } 
 + / / } 
 + / / peerConnection . onStreamAdded = { ( stream ) in 
 + / / self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 + / / print ( " On stream added " ) 
 + / / } 
 + / / } 
 + / / } 
 + / / 
 + / / func onOfferNeededWithCallId ( callId : jlong ) { 
 + / / self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 + / / print ( " onOfferNeededWithCallId " ) 
 + / / } 
 + / / } 
 + / / 
 + / / func onAnswerReceivedWithCallId ( callId : jlong , withSDP offerSDP : String ) { 
 + / / self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 + / / print ( " onAnswerReceivedWithCallId " ) 
 + / / } 
 + / / } 
 + / / 
 + / / func onOfferReceivedWithCallId ( callId : jlong , withSDP offerSDP : String ) { 
 + / / 
 + / / / / 
 + / / / / Stages : 
 + / / / / 1 . Create Peer Connection 
 + / / / / 2 . Set Remote description 
 + / / / / 3 . Create Answer 
 + / / / / 4 . Set Local description from answer 
 + / / / / 5 . Send Answer and enable candidate receiving 
 + / / / / 
 + / / 
 + / / self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 + / / self . createPeerConnection ( callId ) 
 + / / self . peerConnection . setRemoteDescription ( RTCSessionDescription ( type : " offer " , sdp : offerSDP ) ) { ( error ) - > ( ) in 
 + / / self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 + / / if ( error = = nil ) { 
 + / / self . peerConnection . createAnswer ( self . mediaConstraints ) { ( sdp , error ) - > ( ) in 
 + / / self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 + / / if ( error = = nil ) { 
 + / / self . peerConnection . setLocalDescription ( sdp ) { ( error ) - > ( ) in 
 + / / self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 + / / if ( error = = nil ) { 
 + / / self . controller . sendAnswerWithNSString ( sdp . description ) 
 + / / self . controller . readyForCandidates ( ) 
 + / / } else { 
 + / / self . controller . endCall ( ) 
 + / / } 
 + / / } 
 + / / } 
 + / / } else { 
 + / / self . controller . endCall ( ) 
 + / / } 
 + / / } 
 + / / } 
 + / / } else { 
 + / / self . controller . endCall ( ) 
 + / / } 
 + / / } 
 + / / } 
 + / / } 
 + / / } 
 + / / 
 + / / func onCandidateWithCallId ( callId : jlong , withId id _ : String , withLabel label : jint , withSDP sdp : String ) { 
 + / / dispatchAsync ( callId ) { ( ) - > ( ) in 
 + / / self . peerConnection . addICECandidate ( RTCICECandidate ( mid : id _ , index : Int ( label ) , sdp : sdp ) ) 
 + / / } 
 + / / } 
 + / / 
 + / / 
 + / / / / 
 + / / / / Dispatching 
 + / / / / 
 + / / 
 + / / private func dispatchSync ( closure : ( ) - > ( ) ) { 
 + / / dispatch _ sync ( queue ) { ( ) - > Void in 
 + / / closure ( ) 
 + / / } 
 + / / } 
 + / / 
 + / / private func dispatchAsync ( callId : jlong , closure : ( ) - > ( ) ) { 
 + / / if ( self . runningCallId = = callId ) { 
 + / / dispatch _ async ( queue ) { ( ) - > Void in 
 + / / if ( self . runningCallId = = callId ) { 
 + / / closure ( ) 
 + / / } 
 + / / } 
 + / / } 
 + / / } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSWebRTCProvider . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSWebRTCProvider . swift 
 deleted file mode 100644 
 index 23cf0f5 . . 0000000 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSWebRTCProvider . swift 
 + + + / dev / null 
 @ @ - 1 , 193 + 0 , 0 @ @ 
 - / / 
 - / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > 
 - / / 
 - 
 - import Foundation 
 - 
 - class iOSWebRTCProvider : NSObject , ACCallsProvider { 
 - 
 - func onIncomingCallWithCallId ( callId : jlong ) { 
 - 
 - } 
 - 
 - func onOutgoingCallWithCallId ( callId : jlong ) { 
 - 
 - } 
 - 
 - func onCallEndWithCallId ( callId : jlong ) { 
 - 
 - } 
 - 
 - / / private var controller : ACWebRTCController ! 
 - / / private var messenger : ACMessenger ! 
 - / / 
 - / / private lazy var queue : dispatch _ queue _ t = dispatch _ queue _ create ( " webrtc _ queue " , DISPATCH _ QUEUE _ SERIAL ) 
 - / / private let peerConnectionFactory = RTCPeerConnectionFactory ( ) 
 - / / private let mediaConstraints = RTCMediaConstraints ( ) 
 - / / 
 - / / private var runningCallId : jlong ? 
 - / / private var peerConnection : RTCPeerConnection ! 
 - / / private var voiceCapture : RTCAudioTrack ! 
 - / / 
 - / / override init ( ) { 
 - / / RTCPeerConnectionFactory . initializeSSL ( ) 
 - / / } 
 - / / 
 - / / func initWithMessenger ( messenger : ACMessenger , withController controller : ACWebRTCController ) { 
 - / / self . controller = controller 
 - / / self . messenger = messenger 
 - / / } 
 - / / 
 - / / / / 
 - / / / / Start / End of calls 
 - / / / / 
 - / / 
 - / / func onIncomingCallWithCallId ( callId : jlong ) { 
 - / / dispatchSync ( ) { 
 - / / print ( " onIncomingCallWithCallId " ) 
 - / / self . runningCallId = callId 
 - / / dispatchOnUi ( ) { ( ) - > Void in 
 - / / let rootController = ActorSDK . sharedActor ( ) . bindedToWindow . rootViewController ! 
 - / / rootController . presentViewController ( AACallViewController ( callId : callId ) , animated : true , completion : nil ) 
 - / / } 
 - / / } 
 - / / } 
 - / / 
 - / / func onOutgoingCallWithCallId ( callId : jlong ) { 
 - / / dispatchSync ( ) { 
 - / / print ( " onOutgoingCallWithCallId " ) 
 - / / self . runningCallId = callId 
 - / / } 
 - / / } 
 - / / 
 - / / func onCallEndWithCallId ( callId : jlong ) { 
 - / / dispatchSync ( ) { 
 - / / if ( self . peerConnection ! = nil ) { 
 - / / self . peerConnection . close ( ) 
 - / / self . peerConnection = nil 
 - / / } 
 - / / self . voiceCapture = nil 
 - / / self . runningCallId = - 1 
 - / / } 
 - / / } 
 - / / 
 - / / / / 
 - / / / / In process 
 - / / / / 
 - / / 
 - / / private func createPeerConnection ( callId : jlong ) { 
 - / / / / 
 - / / / / Create Peer Connection 
 - / / / / 
 - / / let iceServers = [ 
 - / / RTCICEServer ( URI : NSURL ( string : " stun : 62 . 4 . 22 . 219 : 3478 " ) , username : " " , password : " " ) , 
 - / / RTCICEServer ( URI : NSURL ( string : " turn : 62 . 4 . 22 . 219 : 3478 ? transport = tcp " ) , username : " actor " , password : " password " ) , 
 - / / RTCICEServer ( URI : NSURL ( string : " turn : 62 . 4 . 22 . 219 : 3478 ? transport = udp " ) , username : " actor " , password : " password " ) 
 - / / ] 
 - / / peerConnection = peerConnectionFactory . peerConnectionWithICEServers ( iceServers , constraints : mediaConstraints , delegate : nil ) 
 - / / 
 - / / / / 
 - / / / / Crete Media Stream 
 - / / / / 
 - / / voiceCapture = peerConnectionFactory . audioTrackWithID ( " audio0 " ) 
 - / / let mediaStream = peerConnectionFactory . mediaStreamWithLabel ( " ARDAMSa0 " ) 
 - / / mediaStream . addAudioTrack ( voiceCapture ) 
 - / / peerConnection . addStream ( mediaStream ) 
 - / / 
 - / / / / 
 - / / / / Handling events from peer connection 
 - / / / / 
 - / / peerConnection . onCandidateReceived = { ( candidate ) in 
 - / / self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 - / / print ( " On Candidate arrived " ) 
 - / / self . controller . sendCandidateWithInt ( jint ( candidate . sdpMLineIndex ) , withNSString : candidate . sdpMid , withNSString : candidate . sdp ) 
 - / / } 
 - / / } 
 - / / peerConnection . onStreamAdded = { ( stream ) in 
 - / / self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 - / / print ( " On stream added " ) 
 - / / } 
 - / / } 
 - / / } 
 - / / 
 - / / func onOfferNeededWithCallId ( callId : jlong ) { 
 - / / self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 - / / print ( " onOfferNeededWithCallId " ) 
 - / / } 
 - / / } 
 - / / 
 - / / func onAnswerReceivedWithCallId ( callId : jlong , withSDP offerSDP : String ) { 
 - / / self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 - / / print ( " onAnswerReceivedWithCallId " ) 
 - / / } 
 - / / } 
 - / / 
 - / / func onOfferReceivedWithCallId ( callId : jlong , withSDP offerSDP : String ) { 
 - / / 
 - / / / / 
 - / / / / Stages : 
 - / / / / 1 . Create Peer Connection 
 - / / / / 2 . Set Remote description 
 - / / / / 3 . Create Answer 
 - / / / / 4 . Set Local description from answer 
 - / / / / 5 . Send Answer and enable candidate receiving 
 - / / / / 
 - / / 
 - / / self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 - / / self . createPeerConnection ( callId ) 
 - / / self . peerConnection . setRemoteDescription ( RTCSessionDescription ( type : " offer " , sdp : offerSDP ) ) { ( error ) - > ( ) in 
 - / / self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 - / / if ( error = = nil ) { 
 - / / self . peerConnection . createAnswer ( self . mediaConstraints ) { ( sdp , error ) - > ( ) in 
 - / / self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 - / / if ( error = = nil ) { 
 - / / self . peerConnection . setLocalDescription ( sdp ) { ( error ) - > ( ) in 
 - / / self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 - / / if ( error = = nil ) { 
 - / / self . controller . sendAnswerWithNSString ( sdp . description ) 
 - / / self . controller . readyForCandidates ( ) 
 - / / } else { 
 - / / self . controller . endCall ( ) 
 - / / } 
 - / / } 
 - / / } 
 - / / } else { 
 - / / self . controller . endCall ( ) 
 - / / } 
 - / / } 
 - / / } 
 - / / } else { 
 - / / self . controller . endCall ( ) 
 - / / } 
 - / / } 
 - / / } 
 - / / } 
 - / / } 
 - / / 
 - / / func onCandidateWithCallId ( callId : jlong , withId id _ : String , withLabel label : jint , withSDP sdp : String ) { 
 - / / dispatchAsync ( callId ) { ( ) - > ( ) in 
 - / / self . peerConnection . addICECandidate ( RTCICECandidate ( mid : id _ , index : Int ( label ) , sdp : sdp ) ) 
 - / / } 
 - / / } 
 - / / 
 - / / 
 - / / / / 
 - / / / / Dispatching 
 - / / / / 
 - / / 
 - / / private func dispatchSync ( closure : ( ) - > ( ) ) { 
 - / / dispatch _ sync ( queue ) { ( ) - > Void in 
 - / / closure ( ) 
 - / / } 
 - / / } 
 - / / 
 - / / private func dispatchAsync ( callId : jlong , closure : ( ) - > ( ) ) { 
 - / / if ( self . runningCallId = = callId ) { 
 - / / dispatch _ async ( queue ) { ( ) - > Void in 
 - / / if ( self . runningCallId = = callId ) { 
 - / / closure ( ) 
 - / / } 
 - / / } 
 - / / } 
 - / / } 
 - } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 index 27fb0b8 . . 9da618c 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 @ @ - 161 , 6 + 161 , 7 @ @ public class ActorSDK { 
 / / Providers 
 builder . setPhoneBookProvider ( PhoneBookProvider ( ) ) 
 builder . setNotificationProvider ( iOSNotificationProvider ( ) ) 
 + builder . setCallsProvider ( iOSCallsProvider ( ) ) 
 
 / / Stats 
 builder . setPlatformType ( ACPlatformType . IOS ( ) ) 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 index 598b075 . . f66859a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 @ @ - 12 , 6 + 12 , 7 @ @ import im . actor . core . api . rpc . ResponseDoCall ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . viewmodel . Command ; 
 + import im . actor . runtime . Log ; 
 import im . actor . runtime . actors . ActorRef ; 
 
 import static im . actor . runtime . actors . ActorSystem . system ; 
 @ @ - 56 , 6 + 57 , 7 @ @ public class CallsModule extends AbsModule { 
 return new Command < ResponseDoCall > ( ) { 
 @ Override 
 public void start ( final CommandCallback < ResponseDoCall > callback ) { 
 + Log . d ( TAG , " callsManager : " + callManager ) ; 
 callManager . send ( new CallManagerActor . DoCall ( Peer . user ( uid ) ) ) ; 
 / / User u = users ( ) . getValue ( uid ) ; 
 / / request ( new RequestDoCall ( new ApiOutPeer ( ApiPeerType . PRIVATE , u . getUid ( ) , u . getAccessHash ( ) ) , CALL _ TIMEOUT ) , new RpcCallback < ResponseDoCall > ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 index 462c299 . . 343a3f6 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 @ @ - 85 , 7 + 85 , 7 @ @ public class PeerConnectionActor extends ModuleActor { 
 PeerConnectionActor . this . peerConnection . addCallback ( new WebRTCPeerConnectionCallback ( ) { 
 @ Override 
 public void onCandidate ( int label , String id , String candidate ) { 
 - / / root . send ( new DoCandidate ( uid , deviceId , label , id , candidate ) ) ; 
 + root . send ( new DoCandidate ( uid , deviceId , label , id , candidate ) ) ; 
 } 
 
 @ Override 
 @ @ - 142 , 7 + 142 , 7 @ @ public class PeerConnectionActor extends ModuleActor { 
 @ Override 
 public void apply ( WebRTCSessionDescription description ) { 
 Log . d ( TAG , " onOfferNeeded : then " ) ; 
 - / / root . send ( new DoOffer ( uid , deviceId , description . getSdp ( ) ) ) ; 
 + root . send ( new DoOffer ( uid , deviceId , description . getSdp ( ) ) ) ; 
 state = State . WAITING _ ANSWER ; 
 isReady = true ; 
 unstashAll ( ) ; 
 @ @ - 238 , 7 + 238 , 7 @ @ public class PeerConnectionActor extends ModuleActor { 
 } 
 
 public void onCandidate ( int index , @ NotNull String id , @ NotNull String sdp ) { 
 - 
 + peerConnection . addCandidate ( index , id , sdp ) ; 
 } 
 
 @ Override 
 @ @ - 246 , 22 + 246 , 26 @ @ public class PeerConnectionActor extends ModuleActor { 
 if ( message instanceof OnOffer ) { 
 if ( ! isReady ) { 
 stash ( ) ; 
 + return ; 
 } 
 onOffer ( ( ( OnOffer ) message ) . getSdp ( ) ) ; 
 } else if ( message instanceof OnAnswer ) { 
 if ( ! isReady ) { 
 stash ( ) ; 
 + return ; 
 } 
 onAnswer ( ( ( OnAnswer ) message ) . getSdp ( ) ) ; 
 } else if ( message instanceof OnCandidate ) { 
 if ( ! isReady | | ! isReadyForCandidates ) { 
 stash ( ) ; 
 + return ; 
 } 
 OnCandidate candidate = ( OnCandidate ) message ; 
 onCandidate ( candidate . getIndex ( ) , candidate . getId ( ) , candidate . getSdp ( ) ) ; 
 } else if ( message instanceof OnOfferNeeded ) { 
 if ( ! isReady ) { 
 stash ( ) ; 
 + return ; 
 } 
 onOfferNeeded ( ) ; 
 } else { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusActor . java 
 index 9c78432 . . 171a523 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / eventbus / EventBusActor . java 
 @ @ - 2 , 9 + 2 , 13 @ @ package im . actor . core . modules . eventbus ; 
 
 import org . jetbrains . annotations . Nullable ; 
 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . core . api . ApiEventBusDestination ; 
 import im . actor . core . api . rpc . RequestCreateNewEventBus ; 
 import im . actor . core . api . rpc . RequestJoinEventBus ; 
 import im . actor . core . api . rpc . RequestKeepAliveEventBus ; 
 + import im . actor . core . api . rpc . RequestPostToEventBus ; 
 import im . actor . core . api . rpc . ResponseCreateNewEventBus ; 
 import im . actor . core . api . rpc . ResponseJoinEventBus ; 
 import im . actor . core . api . rpc . ResponseVoid ; 
 @ @ - 137 , 6 + 141 , 14 @ @ public class EventBusActor extends ModuleActor { 
 
 } 
 
 + public void sendMessage ( int uid , long deviceId , byte [ ] data ) { 
 + ArrayList < ApiEventBusDestination > destinations = new ArrayList < > ( ) ; 
 + ArrayList < Long > deviceIds = new ArrayList < > ( ) ; 
 + deviceIds . add ( deviceId ) ; 
 + destinations . add ( new ApiEventBusDestination ( uid , deviceIds ) ) ; 
 + request ( new RequestPostToEventBus ( busId , destinations , data ) ) ; 
 + } 
 + 
 
 / / 
 / / Keep Alive 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ActorTrace . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ActorTrace . java 
 index aaf1dd2 . . a1f314f 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ActorTrace . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ActorTrace . java 
 @ @ - 22 , 7 + 22 , 7 @ @ public class ActorTrace implements TraceInterface { 
 
 @ Override 
 public void onEnvelopeDelivered ( Envelope envelope ) { 
 - Log . w ( TAG , " EnvelopeDelivered | " + envelope . getScope ( ) . getDispatcher ( ) . getName ( ) + " | " + envelope . getScope ( ) . getPath ( ) + " { " + envelope . getMessage ( ) + " } " ) ; 
 + / / Log . w ( TAG , " EnvelopeDelivered | " + envelope . getScope ( ) . getDispatcher ( ) . getName ( ) + " | " + envelope . getScope ( ) . getPath ( ) + " { " + envelope . getMessage ( ) + " } " ) ; 
 } 
 
 @ Override 
 @ @ - 31 , 7 + 31 , 7 @ @ public class ActorTrace implements TraceInterface { 
 if ( duration > PROCESS _ THRESHOLD ) { 
 Log . w ( TAG , " Too long " + envelope . getScope ( ) . getPath ( ) + " { " + envelope . getMessage ( ) + " } " ) ; 
 } 
 - Log . w ( TAG , " Envelope | " + envelope . getScope ( ) . getDispatcher ( ) . getName ( ) + " | " + envelope . getScope ( ) . getPath ( ) + " { " + envelope . getMessage ( ) + " } in " + duration + " ms after " + sendDuration + " ms " ) ; 
 + / / Log . w ( TAG , " Envelope | " + envelope . getScope ( ) . getDispatcher ( ) . getName ( ) + " | " + envelope . getScope ( ) . getPath ( ) + " { " + envelope . getMessage ( ) + " } in " + duration + " ms after " + sendDuration + " ms " ) ; 
 } 
 
 @ Override 
 @ @ - 53 , 6 + 53 , 6 @ @ public class ActorTrace implements TraceInterface { 
 
 @ Override 
 public void onMessageSent ( ActorRef ref , Object message ) { 
 - Log . w ( TAG , " Message Sent : " + message ) ; 
 + / / Log . w ( TAG , " Message Sent : " + message ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index 418ff2b . . da865bb 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 173 , 6 + 173 , 9 @ @ 
 	 	 06CE898C1BD841C9005A5530 / * SystemConfiguration . framework in Frameworks * / = { isa = PBXBuildFile ; fileRef = 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / ; } ; 
 	 	 06CE89901BD84DF5005A5530 / * ActorSDKAnalytics . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06CE898F1BD84DF5005A5530 / * ActorSDKAnalytics . swift * / ; } ; 
 	 	 06E322C91C69344A00D66F53 / * iOSWebRTCProvider . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E322C81C69344A00D66F53 / * iOSWebRTCProvider . swift * / ; } ; 
 + 	 	 06E3230E1C69445C00D66F53 / * WebRTC . h in Headers * / = { isa = PBXBuildFile ; fileRef = 06E3230D1C6942C400D66F53 / * WebRTC . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; 
 + 	 	 06E323111C694C1D00D66F53 / * WebRTCExt . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E323101C694C1D00D66F53 / * WebRTCExt . swift * / ; } ; 
 + 	 	 06E323151C6A7AC000D66F53 / * AACallViewController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E323141C6A7AC000D66F53 / * AACallViewController . swift * / ; } ; 
 	 	 06E7B2471C0F8D7A0090660C / * AALocationPickerController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E7B2461C0F8D7A0090660C / * AALocationPickerController . swift * / ; } ; 
 	 	 06E7B24A1C0F92140090660C / * AABubbleLocationCell . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E7B2491C0F92140090660C / * AABubbleLocationCell . swift * / ; } ; 
 	 	 06E7B24C1C0FAB500090660C / * AAMapFastView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 06E7B24B1C0FAB500090660C / * AAMapFastView . swift * / ; } ; 
 @ @ - 467 , 6 + 470 , 9 @ @ 
 	 	 06CE898B1BD841C9005A5530 / * SystemConfiguration . framework * / = { isa = PBXFileReference ; lastKnownFileType = wrapper . framework ; name = SystemConfiguration . framework ; path = System / Library / Frameworks / SystemConfiguration . framework ; sourceTree = SDKROOT ; } ; 
 	 	 06CE898F1BD84DF5005A5530 / * ActorSDKAnalytics . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = ActorSDKAnalytics . swift ; sourceTree = " < group > " ; } ; 
 	 	 06E322C81C69344A00D66F53 / * iOSWebRTCProvider . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = iOSWebRTCProvider . swift ; sourceTree = " < group > " ; } ; 
 + 	 	 06E3230D1C6942C400D66F53 / * WebRTC . h * / = { isa = PBXFileReference ; lastKnownFileType = sourcecode . c . h ; path = WebRTC . h ; sourceTree = " < group > " ; } ; 
 + 	 	 06E323101C694C1D00D66F53 / * WebRTCExt . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = WebRTCExt . swift ; sourceTree = " < group > " ; } ; 
 + 	 	 06E323141C6A7AC000D66F53 / * AACallViewController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; name = AACallViewController . swift ; path = Calls / AACallViewController . swift ; sourceTree = " < group > " ; } ; 
 	 	 06E7B2461C0F8D7A0090660C / * AALocationPickerController . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AALocationPickerController . swift ; sourceTree = " < group > " ; } ; 
 	 	 06E7B2491C0F92140090660C / * AABubbleLocationCell . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AABubbleLocationCell . swift ; sourceTree = " < group > " ; } ; 
 	 	 06E7B24B1C0FAB500090660C / * AAMapFastView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAMapFastView . swift ; sourceTree = " < group > " ; } ; 
 @ @ - 847 , 6 + 853 , 7 @ @ 
 	 	 	 	 066A527B1BC51EC6000E606E / * Root * / , 
 	 	 	 	 066A52EB1BC52AF8000E606E / * Settings * / , 
 	 	 	 	 066A53091BC53197000E606E / * User * / , 
 + 	 	 	 	 06E323131C6A7AA300D66F53 / * Calls * / , 
 	 	 	 ) ; 
 	 	 	 path = Controllers ; 
 	 	 	 sourceTree = " < group > " ; 
 @ @ - 1150 , 6 + 1157 , 8 @ @ 
 	 	 	 isa = PBXGroup ; 
 	 	 	 children = ( 
 	 	 	 	 15D35F0A1C20182900E3717A / * AudioRecorder * / , 
 + 	 	 	 	 06E3230D1C6942C400D66F53 / * WebRTC . h * / , 
 + 	 	 	 	 06E323101C694C1D00D66F53 / * WebRTCExt . swift * / , 
 	 	 	 ) ; 
 	 	 	 name = Libs ; 
 	 	 	 sourceTree = " < group > " ; 
 @ @ - 1161 , 6 + 1170 , 14 @ @ 
 	 	 	 name = Libs ; 
 	 	 	 sourceTree = " < group > " ; 
 	 	 } ; 
 + 	 	 06E323131C6A7AA300D66F53 / * Calls * / = { 
 + 	 	 	 isa = PBXGroup ; 
 + 	 	 	 children = ( 
 + 	 	 	 	 06E323141C6A7AC000D66F53 / * AACallViewController . swift * / , 
 + 	 	 	 ) ; 
 + 	 	 	 name = Calls ; 
 + 	 	 	 sourceTree = " < group > " ; 
 + 	 	 } ; 
 	 	 06E7B2451C0F8D410090660C / * Location * / = { 
 	 	 	 isa = PBXGroup ; 
 	 	 	 children = ( 
 @ @ - 1535 , 6 + 1552 , 7 @ @ 
 	 	 	 	 15F89F0A1C211FED00776ACD / * opus . h in Headers * / , 
 	 	 	 	 15D35F511C20187E00E3717A / * ASQueue . h in Headers * / , 
 	 	 	 	 15D35F1D1C20185500E3717A / * picture . h in Headers * / , 
 + 	 	 	 	 06E3230E1C69445C00D66F53 / * WebRTC . h in Headers * / , 
 	 	 	 	 06230F421BC95BD200A4807B / * RMPhoneFormat . h in Headers * / , 
 	 	 	 	 069CF4CE1BCB909A00C66E12 / * CLToken . h in Headers * / , 
 	 	 	 ) ; 
 @ @ - 1645 , 7 + 1663 , 7 @ @ 
 	 	 	 ) ; 
 	 	 	 runOnlyForDeploymentPostprocessing = 0 ; 
 	 	 	 shellPath = / bin / sh ; 
 - 	 	 	 shellScript = " set - e \ n \ ncd ActorSDK / Sources / ActorCore \ nmake translate \ nmake build - j3 \ n \ ncd \ " $ { CONFIGURATION _ TEMP _ DIR } / j2objc / \ " \ npython \ " $ { PROJECT _ DIR } / ActorSDK / Sources / ActorCore / convert . py \ " \ " $ { PROJECT _ DIR } / ActorSDK / Sources / ActorCore / ActorCore . h \ " \ n \ ncp - a \ " $ { CONFIGURATION _ TEMP _ DIR } / j2objc / Public / \ " \ " $ { CONFIGURATION _ BUILD _ DIR } / ActorSDK . framework / Headers / \ " \ n \ ncp - a \ " $ { PROJECT _ DIR } / . . / sdk - core / core / core - shared / src / main / resources / \ " \ " $ { CONFIGURATION _ BUILD _ DIR } / ActorSDK . framework / \ " " ; 
 + 	 	 	 shellScript = " set - e \ n \ ncd ActorSDK / Sources / ActorCore \ nmake translate \ nmake build - j3 \ n \ ncd \ " $ { CONFIGURATION _ TEMP _ DIR } / j2objc / \ " \ npython \ " $ { PROJECT _ DIR } / ActorSDK / Sources / ActorCore / convert . py \ " \ " $ { PROJECT _ DIR } / ActorSDK / Sources / ActorCore / ActorCore . h \ " \ n \ ncp - af \ " $ { PODS _ ROOT } / libjingle _ peerconnection / libjingle _ peerconnection / Headers / \ " \ " $ { CONFIGURATION _ BUILD _ DIR } / ActorSDK . framework / Headers / \ " \ n \ ncp - a \ " $ { CONFIGURATION _ TEMP _ DIR } / j2objc / Public / \ " \ " $ { CONFIGURATION _ BUILD _ DIR } / ActorSDK . framework / Headers / \ " \ n \ n \ ncp - a \ " $ { PROJECT _ DIR } / . . / sdk - core / core / core - shared / src / main / resources / \ " \ " $ { CONFIGURATION _ BUILD _ DIR } / ActorSDK . framework / \ " " ; 
 	 	 } ; 
 	 	 842CC4516DA967714D224C37 / * Check Pods Manifest . lock * / = { 
 	 	 	 isa = PBXShellScriptBuildPhase ; 
 @ @ - 1715 , 6 + 1733 , 7 @ @ 
 	 	 	 	 15D35F601C20187E00E3717A / * AAOpusAudioPlayerAU . mm in Sources * / , 
 	 	 	 	 15D35F1C1C20185500E3717A / * picture . c in Sources * / , 
 	 	 	 	 066A532B1BC53406000E606E / * AABubbleCell . swift in Sources * / , 
 + 	 	 	 	 06E323151C6A7AC000D66F53 / * AACallViewController . swift in Sources * / , 
 	 	 	 	 066A52C71BC521EA000E606E / * AAEditTextController . swift in Sources * / , 
 	 	 	 	 153F6B5D1C2B3AC500C0B960 / * AABubbleStickerCell . swift in Sources * / , 
 	 	 	 	 15D35F1E1C20185500E3717A / * wav _ io . c in Sources * / , 
 @ @ - 1880 , 6 + 1899 , 7 @ @ 
 	 	 	 	 066A52421BC4EECD000E606E / * AATableViewHeader . swift in Sources * / , 
 	 	 	 	 066A52CD1BC521FA000E606E / * AADialogsListContentControllerDelegate . swift in Sources * / , 
 	 	 	 	 15D35F261C20186200E3717A / * framing . c in Sources * / , 
 + 	 	 	 	 06E323111C694C1D00D66F53 / * WebRTCExt . swift in Sources * / , 
 	 	 	 	 066A52231BC4EEAC000E606E / * AAManagedSection . swift in Sources * / , 
 	 	 	 	 066A52D11BC52204000E606E / * AADialogCell . swift in Sources * / , 
 	 	 	 	 066A51901BC4C383000E606E / * CocoaNetworkRuntime . swift in Sources * / , 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 index 1f22c74 . . 2b4bf24 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 @ @ - 375 , 7 + 375 , 7 @ @ public class AABinder { 
 
 } 
 
 - public func bind < T1 , T2 , T3 > ( valueModel1 : ARValue , valueModel2 : ARValue , valueModel3 : ARValue , closure : ( value1 : T1 ? , value2 : T2 ? , value3 : T3 ? ) - > ( ) ) { 
 + public func bind < T1 , T2 , T3 > ( valueModel1 : ARValue , valueModel2 : ARValue , valueModel3 : ARValue , closure : ( value1 : T1 ! , value2 : T2 ! , value3 : T3 ! ) - > ( ) ) { 
 
 let listener1 = BindListener { ( _ value1 ) - > ( ) in 
 closure ( value1 : _ value1 as ? T1 , value2 : valueModel2 . get ( ) as ? T2 , value3 : valueModel3 . get ( ) as ? T3 ) 
 @ @ - 396 , 7 + 396 , 7 @ @ public class AABinder { 
 } 
 
 
 - public func bind < T1 , T2 > ( valueModel1 : ARValue , valueModel2 : ARValue , closure : ( value1 : T1 ? , value2 : T2 ? ) - > ( ) ) { 
 + public func bind < T1 , T2 > ( valueModel1 : ARValue , valueModel2 : ARValue , closure : ( value1 : T1 ! , value2 : T2 ! ) - > ( ) ) { 
 let listener1 = BindListener { ( _ value1 ) - > ( ) in 
 closure ( value1 : _ value1 as ? T1 , value2 : valueModel2 . get ( ) as ? T2 ) 
 } ; 
 @ @ - 410 , 7 + 410 , 7 @ @ public class AABinder { 
 closure ( value1 : valueModel1 . get ( ) as ? T1 , value2 : valueModel2 . get ( ) as ? T2 ) 
 } 
 
 - public func bind < T > ( value : ARValue , closure : ( value : T ? ) - > ( ) ) { 
 + public func bind < T > ( value : ARValue , closure : ( value : T ! ) - > ( ) ) { 
 let listener = BindListener { ( value2 ) - > ( ) in 
 closure ( value : value2 as ? T ) 
 } ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSWebRTCProvider . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSWebRTCProvider . swift 
 index c608432 . . 7b32ab5 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSWebRTCProvider . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSWebRTCProvider . swift 
 @ @ - 3 , 43 + 3 , 179 @ @ 
 / / 
 
 import Foundation 
 - import RTCPeerConnection 
 
 class iOSWebRTCProvider : NSObject , ACWebRTCProvider { 
 
 - private var controller : ACWebRTCController ! ! 
 - private var messenger : ACMessenger ! ! 
 + private var controller : ACWebRTCController ! 
 + private var messenger : ACMessenger ! 
 + 
 + private lazy var queue : dispatch _ queue _ t = dispatch _ queue _ create ( " webrtc _ queue " , DISPATCH _ QUEUE _ SERIAL ) 
 + private let peerConnectionFactory = RTCPeerConnectionFactory ( ) 
 + private let mediaConstraints = RTCMediaConstraints ( ) 
 + 
 + private var runningCallId : jlong ? 
 + private var peerConnection : RTCPeerConnection ! 
 + private var voiceCapture : RTCAudioTrack ! 
 + 
 + override init ( ) { 
 + RTCPeerConnectionFactory . initializeSSL ( ) 
 + } 
 
 func initWithMessenger ( messenger : ACMessenger , withController controller : ACWebRTCController ) { 
 self . controller = controller 
 self . messenger = messenger 
 } 
 
 + / / 
 + / / Start / End of calls 
 + / / 
 + 
 func onIncomingCallWithCallId ( callId : jlong ) { 
 - 
 + dispatchSync ( ) { 
 + print ( " onIncomingCallWithCallId " ) 
 + self . runningCallId = callId 
 + dispatchOnUi ( ) { ( ) - > Void in 
 + let rootController = ActorSDK . sharedActor ( ) . bindedToWindow . rootViewController ! 
 + rootController . presentViewController ( AACallViewController ( callId : callId ) , animated : true , completion : nil ) 
 + } 
 + } 
 } 
 
 func onOutgoingCallWithCallId ( callId : jlong ) { 
 + dispatchSync ( ) { 
 + print ( " onOutgoingCallWithCallId " ) 
 + self . runningCallId = callId 
 + } 
 + } 
 + 
 + func onCallEndWithCallId ( callId : jlong ) { 
 + dispatchSync ( ) { 
 + if ( self . peerConnection ! = nil ) { 
 + self . peerConnection . close ( ) 
 + self . peerConnection = nil 
 + } 
 + self . voiceCapture = nil 
 + self . runningCallId = - 1 
 + } 
 + } 
 + 
 + / / 
 + / / In process 
 + / / 
 + 
 + private func createPeerConnection ( callId : jlong ) { 
 + / / 
 + / / Create Peer Connection 
 + / / 
 + let iceServers = [ 
 + RTCICEServer ( URI : NSURL ( string : " stun : 62 . 4 . 22 . 219 : 3478 " ) , username : " " , password : " " ) , 
 + RTCICEServer ( URI : NSURL ( string : " turn : 62 . 4 . 22 . 219 : 3478 ? transport = tcp " ) , username : " actor " , password : " password " ) , 
 + RTCICEServer ( URI : NSURL ( string : " turn : 62 . 4 . 22 . 219 : 3478 ? transport = udp " ) , username : " actor " , password : " password " ) 
 + ] 
 + peerConnection = peerConnectionFactory . peerConnectionWithICEServers ( iceServers , constraints : mediaConstraints , delegate : nil ) 
 
 + / / 
 + / / Crete Media Stream 
 + / / 
 + voiceCapture = peerConnectionFactory . audioTrackWithID ( " audio0 " ) 
 + let mediaStream = peerConnectionFactory . mediaStreamWithLabel ( " ARDAMSa0 " ) 
 + mediaStream . addAudioTrack ( voiceCapture ) 
 + peerConnection . addStream ( mediaStream ) 
 + 
 + / / 
 + / / Handling events from peer connection 
 + / / 
 + peerConnection . onCandidateReceived = { ( candidate ) in 
 + self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 + print ( " On Candidate arrived " ) 
 + self . controller . sendCandidateWithInt ( jint ( candidate . sdpMLineIndex ) , withNSString : candidate . sdpMid , withNSString : candidate . sdp ) 
 + } 
 + } 
 + peerConnection . onStreamAdded = { ( stream ) in 
 + self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 + print ( " On stream added " ) 
 + } 
 + } 
 } 
 
 func onOfferNeededWithCallId ( callId : jlong ) { 
 - 
 + self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 + print ( " onOfferNeededWithCallId " ) 
 + } 
 } 
 
 func onAnswerReceivedWithCallId ( callId : jlong , withSDP offerSDP : String ) { 
 - 
 + self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 + print ( " onAnswerReceivedWithCallId " ) 
 + } 
 } 
 
 func onOfferReceivedWithCallId ( callId : jlong , withSDP offerSDP : String ) { 
 
 + / / 
 + / / Stages : 
 + / / 1 . Create Peer Connection 
 + / / 2 . Set Remote description 
 + / / 3 . Create Answer 
 + / / 4 . Set Local description from answer 
 + / / 5 . Send Answer and enable candidate receiving 
 + / / 
 + 
 + self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 + self . createPeerConnection ( callId ) 
 + self . peerConnection . setRemoteDescription ( RTCSessionDescription ( type : " offer " , sdp : offerSDP ) ) { ( error ) - > ( ) in 
 + self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 + if ( error = = nil ) { 
 + self . peerConnection . createAnswer ( self . mediaConstraints ) { ( sdp , error ) - > ( ) in 
 + self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 + if ( error = = nil ) { 
 + self . peerConnection . setLocalDescription ( sdp ) { ( error ) - > ( ) in 
 + self . dispatchAsync ( callId ) { ( ) - > ( ) in 
 + if ( error = = nil ) { 
 + self . controller . sendAnswerWithNSString ( sdp . description ) 
 + self . controller . readyForCandidates ( ) 
 + } else { 
 + self . controller . endCall ( ) 
 + } 
 + } 
 + } 
 + } else { 
 + self . controller . endCall ( ) 
 + } 
 + } 
 + } 
 + } else { 
 + self . controller . endCall ( ) 
 + } 
 + } 
 + } 
 + } 
 } 
 
 func onCandidateWithCallId ( callId : jlong , withId id _ : String , withLabel label : jint , withSDP sdp : String ) { 
 - 
 + dispatchAsync ( callId ) { ( ) - > ( ) in 
 + self . peerConnection . addICECandidate ( RTCICECandidate ( mid : id _ , index : Int ( label ) , sdp : sdp ) ) 
 + } 
 } 
 
 - func onCallEndWithCallId ( callId : jlong ) { 
 - 
 + 
 + / / 
 + / / Dispatching 
 + / / 
 + 
 + private func dispatchSync ( closure : ( ) - > ( ) ) { 
 + dispatch _ sync ( queue ) { ( ) - > Void in 
 + closure ( ) 
 + } 
 + } 
 + 
 + private func dispatchAsync ( callId : jlong , closure : ( ) - > ( ) ) { 
 + if ( self . runningCallId = = callId ) { 
 + dispatch _ async ( queue ) { ( ) - > Void in 
 + if ( self . runningCallId = = callId ) { 
 + closure ( ) 
 + } 
 + } 
 + } 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . h b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . h 
 index 99f4b2f . . ec8398b 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . h 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . h 
 @ @ - 50 , 5 + 50 , 4 @ @ FOUNDATION _ EXPORT const unsigned char ActorSDKVersionString [ ] ; 
 
 # import " CLTokenView . h " 
 
 - 
 - 
 + # import " WebRTC . h " 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift 
 new file mode 100644 
 index 0000000 . . 1336eb5 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift 
 @ @ - 0 , 0 + 1 , 128 @ @ 
 + / / 
 + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > 
 + / / 
 + 
 + import Foundation 
 + import PureLayout 
 + 
 + public class AACallViewController : AAViewController { 
 + 
 + public let binder = AABinder ( ) 
 + public let callId : jlong 
 + public let call : ACCallModel 
 + public let bgImage = UIImageView ( image : UIImage . bundled ( " bg _ 1 . jpg " ) ) 
 + public let bgImageOverlay = UIView ( ) 
 + public let senderAvatar : AAAvatarView = AAAvatarView ( frameSize : 120 , type : . Rounded ) 
 + public let peerTitle = UILabel ( ) 
 + public let answerCall = UIButton ( frame : CGRectMake ( 0 , 0 , 80 , 80 ) ) 
 + 
 + public init ( callId : jlong ) { 
 + self . callId = callId 
 + self . call = ActorSDK . sharedActor ( ) . messenger . getCallWithCallId ( callId ) 
 + super . init ( ) 
 + } 
 + 
 + public required init ( coder aDecoder : NSCoder ) { 
 + fatalError ( " init ( coder : ) has not been implemented " ) 
 + } 
 + 
 + public override func viewDidLoad ( ) { 
 + super . viewDidLoad ( ) 
 + 
 + answerCall . backgroundColor = UIColor ( rgb : 0xc04945 ) 
 + answerCall . setTitle ( " End Call " , forState : . Normal ) 
 + answerCall . setTitleColor ( UIColor . whiteColor ( ) , forState : . Normal ) 
 + answerCall . viewDidTap = { 
 + Actor . endCallWithCallId ( self . callId ) 
 + self . navigateDetail ( ConversationViewController ( peer : self . call . getPeer ( ) ) ) 
 + self . dismiss ( ) 
 + } 
 + 
 + bgImage . contentMode = UIViewContentMode . ScaleAspectFill 
 + bgImageOverlay . opaque = false 
 + bgImageOverlay . backgroundColor = UIColor ( rgb : 0x86aed7 ) 
 + peerTitle . textColor = UIColor . whiteColor ( ) 
 + peerTitle . textAlignment = NSTextAlignment . Center 
 + peerTitle . font = UIFont . thinSystemFontOfSize ( 32 ) 
 + 
 + self . view . addSubview ( bgImage ) 
 + self . view . addSubview ( bgImageOverlay ) 
 + self . view . addSubview ( senderAvatar ) 
 + self . view . addSubview ( peerTitle ) 
 + self . view . addSubview ( answerCall ) 
 + } 
 + 
 + public override func viewWillLayoutSubviews ( ) { 
 + super . viewWillLayoutSubviews ( ) 
 + 
 + bgImage . frame = self . view . bounds 
 + bgImageOverlay . frame = self . view . bounds 
 + 
 + senderAvatar . frame = CGRectMake ( ( self . view . width - 120 ) / 2 , 100 , 120 , 120 ) 
 + peerTitle . frame = CGRectMake ( 60 , senderAvatar . bottom + 20 , view . width - 120 , 34 ) 
 + answerCall . frame = CGRectMake ( 0 , self . view . height - 48 , self . view . width , 48 ) 
 + } 
 + 
 + public override func viewWillAppear ( animated : Bool ) { 
 + super . viewWillAppear ( animated ) 
 + 
 + / / 
 + / / Binding State 
 + / / 
 + binder . bind ( call . getState ( ) ) { ( value : ACCallState ! ) - > ( ) in 
 + if ( ACCallState _ Enum . CALLING _ INCOMING = = value . toNSEnum ( ) ) { 
 + print ( " Call \ ( self . callId ) incoming " ) 
 + } else if ( ACCallState _ Enum . IN _ PROGRESS = = value . toNSEnum ( ) ) { 
 + print ( " Call \ ( self . callId ) in progress " ) 
 + } else { 
 + print ( " Call \ ( self . callId ) unknown " ) 
 + } 
 + } 
 + 
 + / / 
 + / / Binding Avatar 
 + / / 
 + binder . bind ( call . getActiveMembers ( ) ) { ( value : JavaUtilArrayList ! ) - > ( ) in 
 + 
 + print ( " Bind user " ) 
 + 
 + var users = [ ACUserVM ] ( ) 
 + for i in 0 . . < value . size ( ) { 
 + let uid = ( value . getWithInt ( i ) as ! JavaLangInteger ) . intValue ( ) 
 + if ( uid ! = Actor . myUid ( ) ) { 
 + users . append ( Actor . getUserWithUid ( uid ) ) 
 + } 
 + } 
 + 
 + print ( " Bind user \ ( users . count ) " ) 
 + 
 + if ( users . count = = 1 ) { 
 + self . senderAvatar . bind ( users [ 0 ] . getNameModel ( ) . get ( ) , id : users [ 0 ] . getId ( ) , avatar : users [ 0 ] . getAvatarModel ( ) . get ( ) ) 
 + } else { 
 + / / TODO : Multiple Users 
 + } 
 + } 
 + 
 + / / 
 + / / Binding Title 
 + / / 
 + if ( call . getPeer ( ) . peerType . toNSEnum ( ) = = ACPeerType _ Enum . PRIVATE ) { 
 + binder . bind ( Actor . getUserWithUid ( call . getPeer ( ) . peerId ) . getNameModel ( ) , closure : { ( value : String ! ) - > ( ) in 
 + self . peerTitle . text = value 
 + } ) 
 + } else if ( call . getPeer ( ) . peerType . toNSEnum ( ) = = ACPeerType _ Enum . GROUP ) { 
 + binder . bind ( Actor . getGroupWithGid ( call . getPeer ( ) . peerId ) . getNameModel ( ) , closure : { ( value : String ! ) - > ( ) in 
 + self . peerTitle . text = value 
 + } ) 
 + } 
 + 
 + UIApplication . sharedApplication ( ) . setStatusBarStyle ( . LightContent , animated : true ) 
 + } 
 + 
 + public override func viewWillDisappear ( animated : Bool ) { 
 + super . viewWillDisappear ( animated ) 
 + binder . unbindAll ( ) 
 + 
 + UIApplication . sharedApplication ( ) . setStatusBarStyle ( ActorSDK . sharedActor ( ) . style . vcStatusBarStyle , animated : true ) 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Navigations . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Navigations . swift 
 index 0e533ef . . 6003e79 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Navigations . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Navigations . swift 	 
 @ @ - 7 , 19 + 7 , 15 @ @ import Foundation 
 public extension UIViewController { 
 public func navigateDetail ( controller : UIViewController ) { 
 if ( AADevice . isiPad ) { 
 - let split = UIApplication . sharedApplication ( ) . keyWindow ? . rootViewController as ! UISplitViewController ; 
 + let split = UIApplication . sharedApplication ( ) . keyWindow ? . rootViewController as ! UISplitViewController 
 let master = split . viewControllers [ 0 ] 
 let detail = AANavigationController ( ) 
 detail . viewControllers = [ controller ] 
 split . viewControllers = [ master , detail ] 
 } else { 
 - 
 - if controller . isKindOfClass ( ConversationViewController . self ) { 
 - / / navigationController ? . view . layer . speed = 1 . 5 
 - } 
 - 
 + let tabBar = UIApplication . sharedApplication ( ) . keyWindow ? . rootViewController as ! UITabBarController 
 controller . hidesBottomBarWhenPushed = true 
 - navigationController ? . pushViewController ( controller , animated : true ) ; 
 + ( tabBar . selectedViewController as ! AANavigationController ) . pushViewController ( controller , animated : true ) 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift 
 index 3351f21 . . 917a3a6 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift 
 @ @ - 67 , 7 + 67 , 7 @ @ class AAUserViewController : AAContentTableController { 
 / / Profile : Send messages 
 s . action ( " ProfileSendMessage " ) { ( r ) - > ( ) in 
 r . selectAction = { ( ) - > Bool in 
 - self . navigateDetail ( ConversationViewController ( peer : ACPeer . userWithInt ( jint ( self . uid ) ) ) ) 
 + self . navigateDetail ( ConversationViewController ( peer : ACPeer . userWithInt ( jint ( self . uid ) ) ) ) 
 self . popover ? . dismissPopoverAnimated ( true ) 
 return false 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / WebRTC . h b / actor - sdk / sdk - core - ios / ActorSDK / Sources / WebRTC . h 
 new file mode 100644 
 index 0000000 . . b2b2fc7 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / WebRTC . h 
 @ @ - 0 , 0 + 1 , 34 @ @ 
 + / / 
 + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > 
 + / / 
 + 
 + # import " RTCAudioSource . h " 
 + # import " RTCAudioTrack . h " 
 + # import " RTCAVFoundationVideoSource . h " 
 + # import " RTCDataChannel . h " 
 + # import " RTCEAGLVideoView . h " 
 + # import " RTCFileLogger . h " 
 + # import " RTCI420Frame . h " 
 + # import " RTCICECandidate . h " 
 + # import " RTCICEServer . h " 
 + # import " RTCLogging . h " 
 + # import " RTCMediaConstraints . h " 
 + # import " RTCMediaSource . h " 
 + # import " RTCMediaStream . h " 
 + # import " RTCMediaStreamTrack . h " 
 + # import " RTCOpenGLVideoRenderer . h " 
 + # import " RTCPair . h " 
 + # import " RTCPeerConnection . h " 
 + # import " RTCPeerConnectionFactory . h " 
 + # import " RTCMediaConstraints . h " 
 + # import " RTCPeerConnectionDelegate . h " 
 + # import " RTCPeerConnectionInterface . h " 
 + # import " RTCSessionDescription . h " 
 + # import " RTCSessionDescriptionDelegate . h " 
 + # import " RTCStatsDelegate . h " 
 + # import " RTCStatsReport . h " 
 + # import " RTCTypes . h " 
 + # import " RTCVideoCapturer . h " 
 + # import " RTCVideoRenderer . h " 
 + # import " RTCVideoSource . h " 
 + # import " RTCVideoTrack . h " 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / WebRTCExt . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / WebRTCExt . swift 
 new file mode 100644 
 index 0000000 . . 35197b8 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / WebRTCExt . swift 
 @ @ - 0 , 0 + 1 , 146 @ @ 
 + / / 
 + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > 
 + / / 
 + 
 + import Foundation 
 + import BrightFutures 
 + 
 + class AAPeerConnectionDelegate : NSObject , RTCPeerConnectionDelegate { 
 + 
 + var onCandidateReceived : ( ( RTCICECandidate ) - > ( ) ) ? 
 + var onStreamAdded : ( ( RTCMediaStream ) - > ( ) ) ? 
 + 
 + func peerConnection ( peerConnection : RTCPeerConnection ! , signalingStateChanged stateChanged : RTCSignalingState ) { 
 + 
 + } 
 + 
 + func peerConnection ( peerConnection : RTCPeerConnection ! , addedStream stream : RTCMediaStream ! ) { 
 + onStreamAdded ? ( stream ) 
 + } 
 + 
 + func peerConnection ( peerConnection : RTCPeerConnection ! , removedStream stream : RTCMediaStream ! ) { 
 + 
 + } 
 + 
 + func peerConnectionOnRenegotiationNeeded ( peerConnection : RTCPeerConnection ! ) { 
 + 
 + } 
 + 
 + func peerConnection ( peerConnection : RTCPeerConnection ! , iceConnectionChanged newState : RTCICEConnectionState ) { 
 + 
 + } 
 + 
 + func peerConnection ( peerConnection : RTCPeerConnection ! , iceGatheringChanged newState : RTCICEGatheringState ) { 
 + 
 + } 
 + 
 + func peerConnection ( peerConnection : RTCPeerConnection ! , gotICECandidate candidate : RTCICECandidate ! ) { 
 + onCandidateReceived ? ( candidate ) 
 + } 
 + 
 + func peerConnection ( peerConnection : RTCPeerConnection ! , didOpenDataChannel dataChannel : RTCDataChannel ! ) { 
 + 
 + } 
 + } 
 + 
 + class AASessionDescriptionCreateDelegate : NSObject , RTCSessionDescriptionDelegate { 
 + 
 + let didCreate : ( RTCSessionDescription ! , NSError ! ) - > ( ) 
 + let peerConnection : RTCPeerConnection 
 + 
 + init ( didCreate : ( RTCSessionDescription ! , NSError ! ) - > ( ) , peerConnection : RTCPeerConnection ) { 
 + self . didCreate = didCreate 
 + self . peerConnection = peerConnection 
 + } 
 + 
 + func peerConnection ( peerConnection : RTCPeerConnection ! , didCreateSessionDescription sdp : RTCSessionDescription ! , error : NSError ! ) { 
 + didCreate ( sdp ! , error ) 
 + } 
 + 
 + func peerConnection ( peerConnection : RTCPeerConnection ! , didSetSessionDescriptionWithError error : NSError ! ) { 
 + 
 + } 
 + } 
 + 
 + 
 + private var sessionSetTarget = " descTarget " 
 + class AASessionDescriptionSetDelegate : NSObject , RTCSessionDescriptionDelegate { 
 + 
 + let didSet : ( NSError ! ) - > ( ) 
 + let peerConnection : RTCPeerConnection 
 + 
 + init ( didSet : ( NSError ! ) - > ( ) , peerConnection : RTCPeerConnection ) { 
 + self . didSet = didSet 
 + self . peerConnection = peerConnection 
 + super . init ( ) 
 + 
 + setAssociatedObject ( peerConnection , value : self , associativeKey : & sessionSetTarget ) 
 + } 
 + 
 + func peerConnection ( peerConnection : RTCPeerConnection ! , didCreateSessionDescription sdp : RTCSessionDescription ! , error : NSError ! ) { 
 + print ( " didCreateSessionDescription " ) 
 + } 
 + 
 + func peerConnection ( peerConnection : RTCPeerConnection ! , didSetSessionDescriptionWithError error : NSError ! ) { 
 + print ( " didSetSessionDescriptionWithError " ) 
 + 
 + setAssociatedObject ( peerConnection , value : " " , associativeKey : & sessionSetTarget ) 
 + 
 + didSet ( error ) 
 + } 
 + } 
 + 
 + private var targetReference = " target " 
 + extension RTCPeerConnection { 
 + 
 + public var onCandidateReceived : ( ( RTCICECandidate ) - > ( ) ) ? { 
 + set ( value ) { 
 + intDelegate ( ) . onCandidateReceived = value 
 + } 
 + get { 
 + return intDelegate ( ) . onCandidateReceived 
 + } 
 + } 
 + 
 + public var onStreamAdded : ( ( RTCMediaStream ) - > ( ) ) ? { 
 + set ( value ) { 
 + intDelegate ( ) . onStreamAdded = value 
 + } 
 + get { 
 + return intDelegate ( ) . onStreamAdded 
 + } 
 + } 
 + 
 + private func intDelegate ( ) - > AAPeerConnectionDelegate { 
 + let stored = self . delegate as ? AAPeerConnectionDelegate 
 + if ( stored ! = nil ) { 
 + return stored ! 
 + } 
 + 
 + let nDelegate = AAPeerConnectionDelegate ( ) 
 + self . delegate = nDelegate 
 + setAssociatedObject ( self , value : nDelegate , associativeKey : & targetReference ) 
 + return nDelegate 
 + } 
 + 
 + func createAnswer ( constraints : RTCMediaConstraints , didCreate : ( RTCSessionDescription ! , NSError ! ) - > ( ) ) { 
 + createAnswerWithDelegate ( AASessionDescriptionCreateDelegate ( didCreate : didCreate , peerConnection : self ) , constraints : constraints ) 
 + } 
 + 
 + func createOffer ( constraints : RTCMediaConstraints , didCreate : ( RTCSessionDescription ! , NSError ! ) - > ( ) ) { 
 + createOfferWithDelegate ( AASessionDescriptionCreateDelegate ( didCreate : didCreate , peerConnection : self ) , constraints : constraints ) 
 + } 
 + 
 + func setLocalDescription ( sdp : RTCSessionDescription , didSet : ( NSError ! ) - > ( ) ) { 
 + setLocalDescriptionWithDelegate ( AASessionDescriptionSetDelegate ( didSet : didSet , peerConnection : self ) , sessionDescription : sdp ) 
 + } 
 + 
 + func setRemoteDescription ( sdp : RTCSessionDescription , didSet : ( NSError ! ) - > ( ) ) { 
 + setRemoteDescriptionWithDelegate ( AASessionDescriptionSetDelegate ( didSet : didSet , peerConnection : self ) , sessionDescription : sdp ) 
 + } 
 + } 
 + 
 + 
 + 
 + 
 + 
 diff - - git a / actor - sdk / sdk - core - ios / Podfile b / actor - sdk / sdk - core - ios / Podfile 
 index 74047ee . . 4d64e4b 100644 
 - - - a / actor - sdk / sdk - core - ios / Podfile 
 + + + b / actor - sdk / sdk - core - ios / Podfile 
 @ @ - 22 , 12 + 22 , 15 @ @ target ' ActorApp ' do 
 pod ' CocoaAsyncSocket ' 
 pod ' zipzap ' 
 pod ' YYKit ' 
 + pod ' BrightFutures ' 
 
 # Main UI 
 pod ' TTTAttributedLabel ' 
 pod ' RSKImageCropper ' 
 pod ' JDStatusBarNotification ' 
 pod ' Neon ' 
 + pod ' Cartography ' 
 + pod ' PureLayout ' 
 
 # Small UI 
 pod ' VBFPopFlatButton ' 
 @ @ - 44 , 7 + 47 , 7 @ @ target ' ActorApp ' do 
 pod ' PSTAlertController ' 
 
 # Calls 
 - pod ' libjingle _ peerconnection ' 
 + # pod ' libjingle _ peerconnection ' 
 end 
 
 target ' ActorSDK ' do 
 @ @ - 58 , 6 + 61 , 9 @ @ target ' ActorSDK ' do 
 pod ' CocoaAsyncSocket ' 
 pod ' zipzap ' 
 pod ' YYKit ' 
 + pod ' BrightFutures ' 
 + pod ' Cartography ' 
 + pod ' PureLayout ' 
 
 # Main UI 
 pod ' TTTAttributedLabel ' 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java 
 index 510dfcd . . d0b7b19 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java 
 @ @ - 3 , 6 + 3 , 8 @ @ package im . actor . core . js . providers ; 
 import com . google . gwt . core . client . JavaScriptObject ; 
 import com . google . gwt . core . client . JsArray ; 
 
 + import org . jetbrains . annotations . NotNull ; 
 + 
 import im . actor . core . Messenger ; 
 import im . actor . core . js . JsMessenger ; 
 import im . actor . core . js . modules . JsScheduller ; 
 @ @ - 35 , 7 + 37 , 7 @ @ public class JsWebRTCProvider implements WebRTCProvider { 
 private long runningCallId ; 
 
 @ Override 
 - public void init ( Messenger messenger , WebRTCController controller ) { 
 + public void init ( @ NotNull Messenger messenger , @ NotNull WebRTCController controller ) { 
 this . controller = controller ; 
 this . messenger = ( JsMessenger ) messenger ; 
 } 
 @ @ - 146 , 7 + 148 , 7 @ @ public class JsWebRTCProvider implements WebRTCProvider { 
 } 
 
 @ Override 
 - public void onAnswerReceived ( final long callId , String offerSDP ) { 
 + public void onAnswerReceived ( final long callId , @ NotNull String offerSDP ) { 
 Log . d ( TAG , " onAnswerReceived " ) ; 
 peerConnection . setRemoteDescription ( JsSessionDescription . createAnswer ( offerSDP ) ) . then ( new Consumer < JsSessionDescription > ( ) { 
 @ Override 
 @ @ - 167 , 7 + 169 , 7 @ @ public class JsWebRTCProvider implements WebRTCProvider { 
 } 
 
 @ Override 
 - public void onOfferReceived ( final long callId , final String offerSDP ) { 
 + public void onOfferReceived ( final long callId , @ NotNull final String offerSDP ) { 
 Log . d ( TAG , " onOfferReceived " ) ; 
 
 createPeerConnection ( callId ) ; 
 @ @ - 222 , 7 + 224 , 7 @ @ public class JsWebRTCProvider implements WebRTCProvider { 
 } 
 
 @ Override 
 - public void onCandidate ( long callId , String id , int label , String sdp ) { 
 + public void onCandidate ( long callId , @ NotNull String id , int label , @ NotNull String sdp ) { 
 Log . d ( TAG , " onCandidate " ) ; 
 peerConnection . addIceCandidate ( label , sdp ) ; 
 }
