BLEU SCORE: 0.25950561931628224

TEST MSG: fix ( android ) : bind local image in PhotoHolder image with ImageRequest
GENERATED MSG: fix ( android ) : PhotoHolder updated flag + prevent rebind video thumb after upload

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / PhotoHolder . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / PhotoHolder . java < nl > index 5fb226d . . e4bd705 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / PhotoHolder . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / PhotoHolder . java < nl > @ @ - 272 , 8 + 272 , 9 @ @ public class PhotoHolder extends MessageHolder { < nl > } else if ( fileMessage . getSource ( ) instanceof FileLocalSource ) { < nl > uploadFileVM = messenger ( ) . bindUpload ( message . getRid ( ) , new UploadVMCallback ( ) ) ; < nl > if ( isPhoto ) { < nl > - previewView . setImageURI ( Uri . fromFile ( < nl > - new File ( ( ( FileLocalSource ) fileMessage . getSource ( ) ) . getFileDescriptor ( ) ) ) ) ; < nl > + Uri uri = Uri . fromFile ( < nl > + new File ( ( ( FileLocalSource ) fileMessage . getSource ( ) ) . getFileDescriptor ( ) ) ) ; < nl > + bindImage ( uri ) ; < nl > } else { < nl > if ( ! updated ) { < nl > previewView . setImageURI ( null ) ; < nl > @ @ - 471 , 16 + 472 , 8 @ @ public class PhotoHolder extends MessageHolder { < nl > previewView . getHierarchy ( ) . setPlaceholderImage ( new FastBitmapDrawable ( drawingCache ) ) ; < nl > } < nl > } < nl > - ImageRequest request = ImageRequestBuilder . newBuilderWithSource ( Uri . fromFile ( new File ( reference . getDescriptor ( ) ) ) ) < nl > - . setResizeOptions ( new ResizeOptions ( previewView . getLayoutParams ( ) . width , < nl > - previewView . getLayoutParams ( ) . height ) ) < nl > - . build ( ) ; < nl > - PipelineDraweeController controller = ( PipelineDraweeController ) Fresco . newDraweeControllerBuilder ( ) < nl > - . setOldController ( previewView . getController ( ) ) < nl > - . setImageRequest ( request ) < nl > - . setAutoPlayAnimations ( true ) < nl > - . build ( ) ; < nl > - previewView . setController ( controller ) ; < nl > + Uri uri = Uri . fromFile ( new File ( reference . getDescriptor ( ) ) ) ; < nl > + bindImage ( uri ) ; < nl > / / previewView . setImageURI ( Uri . fromFile ( new File ( reference . getDescriptor ( ) ) ) ) ; < nl > } else { < nl > if ( ! updated ) { < nl > @ @ - 500 , 4 + 493 , 17 @ @ public class PhotoHolder extends MessageHolder { < nl > goneView ( progressValue ) ; < nl > } < nl > } < nl > + < nl > + public void bindImage ( Uri uri ) { < nl > + ImageRequest request = ImageRequestBuilder . newBuilderWithSource ( uri ) < nl > + . setResizeOptions ( new ResizeOptions ( previewView . getLayoutParams ( ) . width , < nl > + previewView . getLayoutParams ( ) . height ) ) < nl > + . build ( ) ; < nl > + PipelineDraweeController controller = ( PipelineDraweeController ) Fresco . newDraweeControllerBuilder ( ) < nl > + . setOldController ( previewView . getController ( ) ) < nl > + . setImageRequest ( request ) < nl > + . setAutoPlayAnimations ( true ) < nl > + . build ( ) ; < nl > + previewView . setController ( controller ) ; < nl > + } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / PhotoHolder . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / PhotoHolder . java < nl > index 77a6322 . . 1343303 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / PhotoHolder . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / PhotoHolder . java < nl > @ @ - 36 , 6 + 36 , 7 @ @ import im . actor . core . viewmodel . FileVMCallback ; < nl > import im . actor . core . viewmodel . UploadFileCallback ; < nl > import im . actor . core . viewmodel . UploadFileVM ; < nl > import im . actor . core . viewmodel . UploadFileVMCallback ; < nl > + import im . actor . runtime . Log ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . R ; < nl > import im . actor . sdk . controllers . Intents ; < nl > @ @ - 54 , 6 + 55 , 7 @ @ import static im . actor . sdk . util . ActorSDKMessenger . myUid ; < nl > < nl > public class PhotoHolder extends MessageHolder { < nl > < nl > + public static final String TAG = " PHOTO _ HOLDER " ; < nl > private final int COLOR _ PENDING ; < nl > private final int COLOR _ SENT ; < nl > private final int COLOR _ RECEIVED ; < nl > @ @ - 86 , 6 + 88 , 7 @ @ public class PhotoHolder extends MessageHolder { < nl > protected boolean isPhoto ; < nl > < nl > int lastUpdatedIndex = 0 ; < nl > + long currenrRid = 0 ; < nl > private boolean updated = false ; < nl > < nl > public PhotoHolder ( MessagesAdapter fragment , View itemView ) { < nl > @ @ - 173 , 6 + 176 , 7 @ @ public class PhotoHolder extends MessageHolder { < nl > < nl > / / Update time < nl > setTimeAndReactions ( time ) ; < nl > + Log . d ( TAG , " isNewMessage : " + isNewMessage ) ; < nl > / / Update size < nl > if ( isNewMessage ) { < nl > int w , h ; < nl > @ @ - 223 , 14 + 227 , 23 @ @ public class PhotoHolder extends MessageHolder { < nl > < nl > needRebind = true ; < nl > } < nl > + Log . d ( TAG , " needRebind by new : " + needRebind ) ; < nl > < nl > updated = false ; < nl > int updatedCounter = fileMessage . getUpdatedCounter ( ) ; < nl > - if ( lastUpdatedIndex ! = updatedCounter ) { < nl > + Log . d ( TAG , " oldRid : " + currenrRid ) ; < nl > + Log . d ( TAG , " newRid : " + currentMessage . getRid ( ) ) ; < nl > + Log . d ( TAG , " oldCounter : " + lastUpdatedIndex ) ; < nl > + Log . d ( TAG , " newCounter : " + updatedCounter ) ; < nl > + < nl > + if ( currenrRid = = currentMessage . getRid ( ) & & lastUpdatedIndex ! = updatedCounter ) { < nl > updated = true ; < nl > needRebind = true ; < nl > lastUpdatedIndex = updatedCounter ; < nl > } < nl > + currenrRid = currentMessage . getRid ( ) ; < nl > + Log . d ( TAG , " updated : " + updated ) ; < nl > + < nl > < nl > if ( needRebind ) { < nl > / / Resetting progress state < nl > @ @ - 254 , 10 + 267 , 14 @ @ public class PhotoHolder extends MessageHolder { < nl > } else { < nl > if ( ! updated ) { < nl > previewView . setImageURI ( null ) ; < nl > + Log . d ( TAG , " rebind video - setImageURI ( null ) ! " ) ; < nl > + < nl > } < nl > / / TODO : better approach ? < nl > - if ( fileMessage . getFastThumb ( ) ! = null ) { < nl > + if ( fileMessage . getFastThumb ( ) ! = null & & ! updated ) { < nl > fastThumbLoader . request ( fileMessage . getFastThumb ( ) . getImage ( ) ) ; < nl > + Log . d ( TAG , " rebind video - new thumb ! " ) ; < nl > + < nl > } < nl > } < nl > } else { < nl > @ @ - 444 , 10 + 461 , 11 @ @ public class PhotoHolder extends MessageHolder { < nl > . setImageRequest ( request ) < nl > . build ( ) ; < nl > previewView . setController ( controller ) ; < nl > - < nl > / / previewView . setImageURI ( Uri . fromFile ( new File ( reference . getDescriptor ( ) ) ) ) ; < nl > } else { < nl > - checkFastThumb ( ) ; < nl > + if ( ! updated ) { < nl > + checkFastThumb ( ) ; < nl > + } < nl > } < nl > < nl > progressValue . setText ( 100 + " " ) ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / PhotoHolder . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / PhotoHolder . java 
 index 5fb226d . . e4bd705 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / PhotoHolder . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / PhotoHolder . java 
 @ @ - 272 , 8 + 272 , 9 @ @ public class PhotoHolder extends MessageHolder { 
 } else if ( fileMessage . getSource ( ) instanceof FileLocalSource ) { 
 uploadFileVM = messenger ( ) . bindUpload ( message . getRid ( ) , new UploadVMCallback ( ) ) ; 
 if ( isPhoto ) { 
 - previewView . setImageURI ( Uri . fromFile ( 
 - new File ( ( ( FileLocalSource ) fileMessage . getSource ( ) ) . getFileDescriptor ( ) ) ) ) ; 
 + Uri uri = Uri . fromFile ( 
 + new File ( ( ( FileLocalSource ) fileMessage . getSource ( ) ) . getFileDescriptor ( ) ) ) ; 
 + bindImage ( uri ) ; 
 } else { 
 if ( ! updated ) { 
 previewView . setImageURI ( null ) ; 
 @ @ - 471 , 16 + 472 , 8 @ @ public class PhotoHolder extends MessageHolder { 
 previewView . getHierarchy ( ) . setPlaceholderImage ( new FastBitmapDrawable ( drawingCache ) ) ; 
 } 
 } 
 - ImageRequest request = ImageRequestBuilder . newBuilderWithSource ( Uri . fromFile ( new File ( reference . getDescriptor ( ) ) ) ) 
 - . setResizeOptions ( new ResizeOptions ( previewView . getLayoutParams ( ) . width , 
 - previewView . getLayoutParams ( ) . height ) ) 
 - . build ( ) ; 
 - PipelineDraweeController controller = ( PipelineDraweeController ) Fresco . newDraweeControllerBuilder ( ) 
 - . setOldController ( previewView . getController ( ) ) 
 - . setImageRequest ( request ) 
 - . setAutoPlayAnimations ( true ) 
 - . build ( ) ; 
 - previewView . setController ( controller ) ; 
 + Uri uri = Uri . fromFile ( new File ( reference . getDescriptor ( ) ) ) ; 
 + bindImage ( uri ) ; 
 / / previewView . setImageURI ( Uri . fromFile ( new File ( reference . getDescriptor ( ) ) ) ) ; 
 } else { 
 if ( ! updated ) { 
 @ @ - 500 , 4 + 493 , 17 @ @ public class PhotoHolder extends MessageHolder { 
 goneView ( progressValue ) ; 
 } 
 } 
 + 
 + public void bindImage ( Uri uri ) { 
 + ImageRequest request = ImageRequestBuilder . newBuilderWithSource ( uri ) 
 + . setResizeOptions ( new ResizeOptions ( previewView . getLayoutParams ( ) . width , 
 + previewView . getLayoutParams ( ) . height ) ) 
 + . build ( ) ; 
 + PipelineDraweeController controller = ( PipelineDraweeController ) Fresco . newDraweeControllerBuilder ( ) 
 + . setOldController ( previewView . getController ( ) ) 
 + . setImageRequest ( request ) 
 + . setAutoPlayAnimations ( true ) 
 + . build ( ) ; 
 + previewView . setController ( controller ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / PhotoHolder . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / PhotoHolder . java 
 index 77a6322 . . 1343303 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / PhotoHolder . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / PhotoHolder . java 
 @ @ - 36 , 6 + 36 , 7 @ @ import im . actor . core . viewmodel . FileVMCallback ; 
 import im . actor . core . viewmodel . UploadFileCallback ; 
 import im . actor . core . viewmodel . UploadFileVM ; 
 import im . actor . core . viewmodel . UploadFileVMCallback ; 
 + import im . actor . runtime . Log ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . R ; 
 import im . actor . sdk . controllers . Intents ; 
 @ @ - 54 , 6 + 55 , 7 @ @ import static im . actor . sdk . util . ActorSDKMessenger . myUid ; 
 
 public class PhotoHolder extends MessageHolder { 
 
 + public static final String TAG = " PHOTO _ HOLDER " ; 
 private final int COLOR _ PENDING ; 
 private final int COLOR _ SENT ; 
 private final int COLOR _ RECEIVED ; 
 @ @ - 86 , 6 + 88 , 7 @ @ public class PhotoHolder extends MessageHolder { 
 protected boolean isPhoto ; 
 
 int lastUpdatedIndex = 0 ; 
 + long currenrRid = 0 ; 
 private boolean updated = false ; 
 
 public PhotoHolder ( MessagesAdapter fragment , View itemView ) { 
 @ @ - 173 , 6 + 176 , 7 @ @ public class PhotoHolder extends MessageHolder { 
 
 / / Update time 
 setTimeAndReactions ( time ) ; 
 + Log . d ( TAG , " isNewMessage : " + isNewMessage ) ; 
 / / Update size 
 if ( isNewMessage ) { 
 int w , h ; 
 @ @ - 223 , 14 + 227 , 23 @ @ public class PhotoHolder extends MessageHolder { 
 
 needRebind = true ; 
 } 
 + Log . d ( TAG , " needRebind by new : " + needRebind ) ; 
 
 updated = false ; 
 int updatedCounter = fileMessage . getUpdatedCounter ( ) ; 
 - if ( lastUpdatedIndex ! = updatedCounter ) { 
 + Log . d ( TAG , " oldRid : " + currenrRid ) ; 
 + Log . d ( TAG , " newRid : " + currentMessage . getRid ( ) ) ; 
 + Log . d ( TAG , " oldCounter : " + lastUpdatedIndex ) ; 
 + Log . d ( TAG , " newCounter : " + updatedCounter ) ; 
 + 
 + if ( currenrRid = = currentMessage . getRid ( ) & & lastUpdatedIndex ! = updatedCounter ) { 
 updated = true ; 
 needRebind = true ; 
 lastUpdatedIndex = updatedCounter ; 
 } 
 + currenrRid = currentMessage . getRid ( ) ; 
 + Log . d ( TAG , " updated : " + updated ) ; 
 + 
 
 if ( needRebind ) { 
 / / Resetting progress state 
 @ @ - 254 , 10 + 267 , 14 @ @ public class PhotoHolder extends MessageHolder { 
 } else { 
 if ( ! updated ) { 
 previewView . setImageURI ( null ) ; 
 + Log . d ( TAG , " rebind video - setImageURI ( null ) ! " ) ; 
 + 
 } 
 / / TODO : better approach ? 
 - if ( fileMessage . getFastThumb ( ) ! = null ) { 
 + if ( fileMessage . getFastThumb ( ) ! = null & & ! updated ) { 
 fastThumbLoader . request ( fileMessage . getFastThumb ( ) . getImage ( ) ) ; 
 + Log . d ( TAG , " rebind video - new thumb ! " ) ; 
 + 
 } 
 } 
 } else { 
 @ @ - 444 , 10 + 461 , 11 @ @ public class PhotoHolder extends MessageHolder { 
 . setImageRequest ( request ) 
 . build ( ) ; 
 previewView . setController ( controller ) ; 
 - 
 / / previewView . setImageURI ( Uri . fromFile ( new File ( reference . getDescriptor ( ) ) ) ) ; 
 } else { 
 - checkFastThumb ( ) ; 
 + if ( ! updated ) { 
 + checkFastThumb ( ) ; 
 + } 
 } 
 
 progressValue . setText ( 100 + " " ) ;
