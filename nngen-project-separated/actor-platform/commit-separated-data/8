BLEU SCORE: 0.3498761149110956

TEST MSG: feat ( server : bots ) : add / remove ext methods for groups
GENERATED MSG: refactor ( server : bots ) : more convenient bot service names

TEST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala < nl > index 494f6fb . . 07c3f66 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala < nl > @ @ - 2 , 9 + 2 , 12 @ @ package im . actor . server . bot . services < nl > < nl > import akka . actor . ActorSystem < nl > import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } < nl > - import im . actor . server . group . { GroupExtension , GroupType } < nl > + import im . actor . server . group . GroupErrors . InvalidExtension < nl > + import im . actor . server . group . GroupExt . Value . { BoolValue , StringValue } < nl > + import im . actor . server . group . { GroupExt , GroupExtension } < nl > import im . actor . util . misc . IdUtils < nl > < nl > + import scala . concurrent . Future < nl > import scala . concurrent . forkjoin . ThreadLocalRandom < nl > < nl > private [ bot ] final class GroupsBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with ApiToBotConversions { < nl > @ @ - 15 , 8 + 18 , 11 @ @ private [ bot ] final class GroupsBotService ( system : ActorSystem ) extends BotServic < nl > private val groupExt = GroupExtension ( system ) < nl > < nl > override val handlers : Handlers = { < nl > - case CreateGroup ( title ) ⇒ createGroup ( title ) . toWeak < nl > - case InviteUser ( groupPeer , userPeer ) ⇒ inviteUser ( groupPeer , userPeer ) . toWeak < nl > + case CreateGroup ( title ) ⇒ createGroup ( title ) . toWeak < nl > + case AddGroupExtString ( groupId , key , value ) ⇒ addGroupExtString ( groupId , key , value ) . toWeak < nl > + case AddGroupExtBool ( groupId , key , value ) ⇒ addGroupExtBool ( groupId , key , value ) . toWeak < nl > + case RemoveGroupExt ( groupId , key ) ⇒ removeExt ( groupId , key ) . toWeak < nl > + case InviteUser ( groupPeer , userPeer ) ⇒ inviteUser ( groupPeer , userPeer ) . toWeak < nl > } < nl > < nl > private def createGroup ( title : String ) = RequestHandler [ CreateGroup , CreateGroup # Response ] ( < nl > @ @ - 48 , 4 + 54 , 29 @ @ private [ bot ] final class GroupsBotService ( system : ActorSystem ) extends BotServic < nl > } yield Right ( Void ) < nl > } < nl > ) < nl > + < nl > + private def addGroupExtString ( groupId : Int , key : String , value : String ) = RequestHandler [ AddGroupExtString , AddGroupExtString # Response ] ( < nl > + ( botUserId : Int , botAuthId : Long , botAuthSid : Int ) ⇒ { < nl > + ( for ( _ ← addExt ( groupId , GroupExt ( key , StringValue ( value ) ) ) ) yield Right ( Void ) ) recover { < nl > + case InvalidExtension ⇒ Left ( BotError ( 500 , " INVALID _ EXT " ) ) < nl > + } < nl > + } < nl > + ) < nl > + < nl > + private def addGroupExtBool ( groupId : Int , key : String , value : Boolean ) = RequestHandler [ AddGroupExtBool , AddGroupExtBool # Response ] ( < nl > + ( botUserId : Int , botAuthId : Long , botAuthSid : Int ) ⇒ { < nl > + ( for ( _ ← addExt ( groupId , GroupExt ( key , BoolValue ( value ) ) ) ) yield Right ( Void ) ) recover { < nl > + case InvalidExtension ⇒ Left ( BotError ( 500 , " INVALID _ EXT " ) ) < nl > + } < nl > + } < nl > + ) < nl > + < nl > + private def removeExt ( groupId : Int , key : String ) = RequestHandler [ RemoveGroupExt , RemoveGroupExt # Response ] ( < nl > + ( botUserId : Int , botAuthId : Long , botAuthSid : Int ) ⇒ { < nl > + groupExt . removeExt ( groupId , key ) map ( _ ⇒ Right ( Void ) ) < nl > + } < nl > + ) < nl > + < nl > + private def addExt ( groupId : Int , ext : GroupExt ) : Future [ Unit ] = groupExt . addExt ( groupId : Int , ext : GroupExt ) < nl > + < nl > } < nl > diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala < nl > index 37c6c11 . . a72b7b8 100644 < nl > - - - a / actor - server / project / Dependencies . scala < nl > + + + b / actor - server / project / Dependencies . scala < nl > @ @ - 5 , 7 + 5 , 7 @ @ import sbt . _ < nl > object Dependencies { < nl > object V { < nl > val actorCommons = " 0 . 0 . 20 " < nl > - val actorBotkit = " 1 . 0 . 109 " < nl > + val actorBotkit = " 1 . 0 . 110 " < nl > val akka = " 2 . 4 . 10 " < nl > val akkaHttpJson = " 1 . 10 . 0 " < nl > val cats = " 0 . 7 . 2 "
NEAREST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > index f858f1d . . e072d72 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . ActorSystem < nl > import akka . stream . scaladsl . { Flow , Merge , Source } < nl > import im . actor . api . rpc . Update < nl > import im . actor . bots . BotMessages < nl > - import im . actor . server . bot . services . { WebHooksService , BotsService , KeyValueService , MessagingService } < nl > + import im . actor . server . bot . services . { WebHooksBotService , BotsBotService , KeyValueBotService , MessagingBotService } < nl > import upickle . Js < nl > < nl > import scala . concurrent . Future < nl > @ @ - 17 , 10 + 17 , 10 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , system : ActorSys < nl > import system . dispatcher < nl > < nl > private lazy val updBuilder = new BotUpdateBuilder ( botUserId , botAuthId , system ) < nl > - private val msgService = new MessagingService ( system ) < nl > - private val kvService = new KeyValueService ( system ) < nl > - private val botsService = new BotsService ( system ) < nl > - private val webhooksService = new WebHooksService ( system ) < nl > + private val msgService = new MessagingBotService ( system ) < nl > + private val kvService = new KeyValueBotService ( system ) < nl > + private val botsService = new BotsBotService ( system ) < nl > + private val webhooksService = new WebHooksBotService ( system ) < nl > < nl > val flow : Flow [ BotRequest , BotMessageOut , Unit ] = { < nl > val updSource = < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsBotService . scala < nl > new file mode 100644 < nl > index 0000000 . . cdd9eb6 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsBotService . scala < nl > @ @ - 0 , 0 + 1 , 30 @ @ < nl > + package im . actor . server . bot . services < nl > + < nl > + import akka . actor . ActorSystem < nl > + import im . actor . bots . BotMessages < nl > + import im . actor . server . bot . { BotExtension , BotServiceBase } < nl > + import im . actor . server . user . UserExceptions < nl > + import upickle . Js < nl > + < nl > + final class BotsBotService ( system : ActorSystem ) extends BotServiceBase ( system ) { < nl > + import BotMessages . _ < nl > + import system . dispatcher < nl > + < nl > + val botExt = BotExtension ( system ) < nl > + < nl > + private def createBot ( username : String , name : String ) = RequestHandler [ CreateBot , CreateBot # Response ] ( < nl > + ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ < nl > + ifIsAdmin ( botUserId ) { < nl > + ( for { < nl > + ( token , userId ) ← botExt . create ( username , name , isAdmin = false ) < nl > + } yield Right ( BotCreated ( token , userId ) ) ) recover { < nl > + case UserExceptions . NicknameTaken ⇒ < nl > + Left ( BotError ( 400 , " USERNAME _ TAKEN " , Js . Obj ( ) , None ) ) < nl > + } < nl > + } < nl > + ) < nl > + < nl > + override def handlers : PartialFunction [ RequestBody , WeakRequestHandler ] = { < nl > + case CreateBot ( username , name ) ⇒ createBot ( username , name ) . toWeak < nl > + } < nl > + } < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsService . scala < nl > deleted file mode 100644 < nl > index feba593 . . 0000000 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsService . scala < nl > + + + / dev / null < nl > @ @ - 1 , 30 + 0 , 0 @ @ < nl > - package im . actor . server . bot . services < nl > - < nl > - import akka . actor . ActorSystem < nl > - import im . actor . bots . BotMessages < nl > - import im . actor . server . bot . { BotExtension , BotServiceBase } < nl > - import im . actor . server . user . UserExceptions < nl > - import upickle . Js < nl > - < nl > - final class BotsService ( system : ActorSystem ) extends BotServiceBase ( system ) { < nl > - import BotMessages . _ < nl > - import system . dispatcher < nl > - < nl > - val botExt = BotExtension ( system ) < nl > - < nl > - private def createBot ( username : String , name : String ) = RequestHandler [ CreateBot , CreateBot # Response ] ( < nl > - ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ < nl > - ifIsAdmin ( botUserId ) { < nl > - ( for { < nl > - ( token , userId ) ← botExt . create ( username , name , isAdmin = false ) < nl > - } yield Right ( BotCreated ( token , userId ) ) ) recover { < nl > - case UserExceptions . NicknameTaken ⇒ < nl > - Left ( BotError ( 400 , " USERNAME _ TAKEN " , Js . Obj ( ) , None ) ) < nl > - } < nl > - } < nl > - ) < nl > - < nl > - override def handlers : PartialFunction [ RequestBody , WeakRequestHandler ] = { < nl > - case CreateBot ( username , name ) ⇒ createBot ( username , name ) . toWeak < nl > - } < nl > - } < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueBotService . scala < nl > new file mode 100644 < nl > index 0000000 . . 8b9f7b8 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueBotService . scala < nl > @ @ - 0 , 0 + 1 , 62 @ @ < nl > + package im . actor . server . bot . services < nl > + < nl > + import akka . actor . ActorSystem < nl > + import akka . util . Timeout < nl > + import im . actor . bots . BotMessages < nl > + import im . actor . config . ActorConfig < nl > + import im . actor . server . bot . BotServiceBase < nl > + import shardakka . ShardakkaExtension < nl > + import shardakka . keyvalue . SimpleKeyValue < nl > + < nl > + import scala . collection . concurrent . TrieMap < nl > + < nl > + final class KeyValueBotService ( system : ActorSystem ) extends BotServiceBase ( system ) { < nl > + < nl > + import BotMessages . _ < nl > + import system . dispatcher < nl > + < nl > + type Keyspace = String < nl > + val MaxKeyspaceNameLength = 32 < nl > + < nl > + private implicit val timeout = Timeout ( ActorConfig . defaultTimeout ) < nl > + < nl > + private val shardakka = ShardakkaExtension ( system ) < nl > + < nl > + private val spaces = TrieMap . empty [ ( BotUserId , String ) , SimpleKeyValue [ String ] ] < nl > + < nl > + private def setValue ( keyspace : Keyspace , key : String , value : String ) = RequestHandler [ SetValue , SetValue # Response ] ( < nl > + ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { < nl > + getSpace ( botUserId , keyspace ) upsert ( key , value ) map ( _ ⇒ Right ( Void ) ) < nl > + } < nl > + ) < nl > + < nl > + private def getValue ( keyspace : String , key : String ) = RequestHandler [ GetValue , GetValue # Response ] ( < nl > + ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { < nl > + getSpace ( botUserId , keyspace ) get ( key ) map ( v ⇒ Right ( Container . apply ( v ) ) ) < nl > + } < nl > + ) < nl > + < nl > + private def deleteValue ( keyspace : String , key : String ) = RequestHandler [ DeleteValue , DeleteValue # Response ] ( < nl > + ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { < nl > + getSpace ( botUserId , keyspace ) delete ( key ) map ( _ ⇒ Right ( Void ) ) < nl > + } < nl > + ) < nl > + < nl > + private def getKeys ( keyspace : String ) = RequestHandler [ GetKeys , GetKeys # Response ] ( < nl > + ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { < nl > + getSpace ( botUserId , keyspace ) getKeys ( ) map ( v ⇒ Right ( Container . apply ( v ) ) ) < nl > + } < nl > + ) < nl > + < nl > + override def handlers : PartialFunction [ RequestBody , WeakRequestHandler ] = { < nl > + case SetValue ( keyspace , key , value ) ⇒ setValue ( keyspace , key , value ) . toWeak < nl > + case GetValue ( keyspace , key ) ⇒ getValue ( keyspace , key ) . toWeak < nl > + case DeleteValue ( keyspace , key ) ⇒ deleteValue ( keyspace , key ) . toWeak < nl > + case GetKeys ( keyspace ) ⇒ getKeys ( keyspace ) . toWeak < nl > + } < nl > + < nl > + private def getSpace ( botUserId : BotUserId , keyspace : Keyspace ) : SimpleKeyValue [ String ] = { < nl > + require ( keyspace . length < = MaxKeyspaceNameLength , s " Maximum keyspace name length is $ MaxKeyspaceNameLength " ) < nl > + spaces . getOrElseUpdate ( botUserId → keyspace , shardakka . simpleKeyValue ( s " bot - kv - $ botUserId - $ keyspace " ) ) < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueService . scala < nl > deleted file mode 100644 < nl > index bb90a07 . . 0000000 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueService . scala < nl > + + + / dev / null < nl > @ @ - 1 , 62 + 0 , 0 @ @ < nl > - package im . actor . server . bot . services < nl > - < nl > - import akka . actor . ActorSystem < nl > - import akka . util . Timeout < nl > - import im . actor . bots . BotMessages < nl > - import im . actor . config . ActorConfig < nl > - import im . actor . server . bot . BotServiceBase < nl > - import shardakka . ShardakkaExtension < nl > - import shardakka . keyvalue . SimpleKeyValue < nl > - < nl > - import scala . collection . concurrent . TrieMap < nl > - < nl > - final class KeyValueService ( system : ActorSystem ) extends BotServiceBase ( system ) { < nl > - < nl > - import BotMessages . _ < nl > - import system . dispatcher < nl > - < nl > - type Keyspace = String < nl > - val MaxKeyspaceNameLength = 32 < nl > - < nl > - private implicit val timeout = Timeout ( ActorConfig . defaultTimeout ) < nl > - < nl > - private val shardakka = ShardakkaExtension ( system ) < nl > - < nl > - private val spaces = TrieMap . empty [ ( BotUserId , String ) , SimpleKeyValue [ String ] ] < nl > - < nl > - private def setValue ( keyspace : Keyspace , key : String , value : String ) = RequestHandler [ SetValue , SetValue # Response ] ( < nl > - ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { < nl > - getSpace ( botUserId , keyspace ) upsert ( key , value ) map ( _ ⇒ Right ( Void ) ) < nl > - } < nl > - ) < nl > - < nl > - private def getValue ( keyspace : String , key : String ) = RequestHandler [ GetValue , GetValue # Response ] ( < nl > - ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { < nl > - getSpace ( botUserId , keyspace ) get ( key ) map ( v ⇒ Right ( Container . apply ( v ) ) ) < nl > - } < nl > - ) < nl > - < nl > - private def deleteValue ( keyspace : String , key : String ) = RequestHandler [ DeleteValue , DeleteValue # Response ] ( < nl > - ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { < nl > - getSpace ( botUserId , keyspace ) delete ( key ) map ( _ ⇒ Right ( Void ) ) < nl > - } < nl > - ) < nl > - < nl > - private def getKeys ( keyspace : String ) = RequestHandler [ GetKeys , GetKeys # Response ] ( < nl > - ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { < nl > - getSpace ( botUserId , keyspace ) getKeys ( ) map ( v ⇒ Right ( Container . apply ( v ) ) ) < nl > - } < nl > - ) < nl > - < nl > - override def handlers : PartialFunction [ RequestBody , WeakRequestHandler ] = { < nl > - case SetValue ( keyspace , key , value ) ⇒ setValue ( keyspace , key , value ) . toWeak < nl > - case GetValue ( keyspace , key ) ⇒ getValue ( keyspace , key ) . toWeak < nl > - case DeleteValue ( keyspace , key ) ⇒ deleteValue ( keyspace , key ) . toWeak < nl > - case GetKeys ( keyspace ) ⇒ getKeys ( keyspace ) . toWeak < nl > - } < nl > - < nl > - private def getSpace ( botUserId : BotUserId , keyspace : Keyspace ) : SimpleKeyValue [ String ] = { < nl > - require ( keyspace . length < = MaxKeyspaceNameLength , s " Maximum keyspace name length is $ MaxKeyspaceNameLength " ) < nl > - spaces . getOrElseUpdate ( botUserId → keyspace , shardakka . simpleKeyValue ( s " bot - kv - $ botUserId - $ keyspace " ) ) < nl > - } < nl > - } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingBotService . scala < nl > new file mode 100644 < nl > index 0000000 . . c2026ad < nl > - - - / dev / null < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingBotService . scala < nl > @ @ - 0 , 0 + 1 , 37 @ @ < nl > + package im . actor . server . bot . services < nl > + < nl > + import akka . actor . ActorSystem < nl > + import im . actor . api . rpc . messaging . { ApiJsonMessage , ApiTextMessage } < nl > + import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } < nl > + import im . actor . server . bot . { BotToApiConversions , BotServiceBase } < nl > + import im . actor . server . dialog . DialogExtension < nl > + import im . actor . server . sequence . SeqStateDate < nl > + < nl > + final class MessagingBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with BotToApiConversions { < nl > + < nl > + import im . actor . bots . BotMessages . _ < nl > + import system . dispatcher < nl > + < nl > + private lazy val dialogExt = DialogExtension ( system ) < nl > + < nl > + override val handlers : PartialFunction [ RequestBody , WeakRequestHandler ] = { < nl > + case SendMessage ( peer , randomId , message ) ⇒ sendMessage ( peer , randomId , message ) . toWeak < nl > + } < nl > + < nl > + private def sendMessage ( peer : OutPeer , randomId : Long , message : MessageBody ) = RequestHandler [ SendMessage , SendMessage # Response ] ( < nl > + ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { < nl > + / / FIXME : check access hash < nl > + < nl > + for { < nl > + SeqStateDate ( _ , _ , date ) ← dialogExt . sendMessage ( < nl > + peer = ApiPeer ( ApiPeerType ( peer . ` type ` ) , peer . id ) , < nl > + senderUserId = botUserId , < nl > + senderAuthId = 0L , < nl > + randomId = randomId , < nl > + message = message , < nl > + isFat = false < nl > + ) < nl > + } yield Right ( MessageSent ( date ) ) < nl > + } < nl > + ) < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingService . scala < nl > deleted file mode 100644 < nl > index 093405e . . 0000000 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingService . scala < nl > + + + / dev / null < nl > @ @ - 1 , 37 + 0 , 0 @ @ < nl > - package im . actor . server . bot . services < nl > - < nl > - import akka . actor . ActorSystem < nl > - import im . actor . api . rpc . messaging . { ApiJsonMessage , ApiTextMessage } < nl > - import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } < nl > - import im . actor . server . bot . { BotToApiConversions , BotServiceBase } < nl > - import im . actor . server . dialog . DialogExtension < nl > - import im . actor . server . sequence . SeqStateDate < nl > - < nl > - final class MessagingService ( system : ActorSystem ) extends BotServiceBase ( system ) with BotToApiConversions { < nl > - < nl > - import im . actor . bots . BotMessages . _ < nl > - import system . dispatcher < nl > - < nl > - private lazy val dialogExt = DialogExtension ( system ) < nl > - < nl > - override val handlers : PartialFunction [ RequestBody , WeakRequestHandler ] = { < nl > - case SendMessage ( peer , randomId , message ) ⇒ sendMessage ( peer , randomId , message ) . toWeak < nl > - } < nl > - < nl > - private def sendMessage ( peer : OutPeer , randomId : Long , message : MessageBody ) = RequestHandler [ SendMessage , SendMessage # Response ] ( < nl > - ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { < nl > - / / FIXME : check access hash < nl > - < nl > - for { < nl > - SeqStateDate ( _ , _ , date ) ← dialogExt . sendMessage ( < nl > - peer = ApiPeer ( ApiPeerType ( peer . ` type ` ) , peer . id ) , < nl > - senderUserId = botUserId , < nl > - senderAuthId = 0L , < nl > - randomId = randomId , < nl > - message = message , < nl > - isFat = false < nl > - ) < nl > - } yield Right ( MessageSent ( date ) ) < nl > - } < nl > - ) < nl > - } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala < nl > new file mode 100644 < nl > index 0000000 . . 189aa8d < nl > - - - / dev / null < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala < nl > @ @ - 0 , 0 + 1 , 33 @ @ < nl > + package im . actor . server . bot . services < nl > + < nl > + import akka . actor . ActorSystem < nl > + import im . actor . api . rpc . RpcError < nl > + import im . actor . bots . BotMessages . BotError < nl > + import im . actor . concurrent . FutureResultCats < nl > + import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } < nl > + import im . actor . server . db . DbExtension < nl > + import im . actor . server . file . { S3StorageExtension , FileStorageAdapter } < nl > + < nl > + final class UsersBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResultCats [ BotError ] with ApiToBotConversions { < nl > + import im . actor . bots . BotMessages . _ < nl > + import system . dispatcher < nl > + import im . actor . server . file . ImageUtils . _ < nl > + < nl > + private val db = DbExtension ( system ) . db < nl > + private implicit val fsAdapter : FileStorageAdapter = S3StorageExtension ( system ) . s3StorageAdapter < nl > + private implicit val _ system = system < nl > + < nl > + override val handlers : Handlers = { < nl > + case UpdateAvatar ( userId , fileLocation ) ⇒ updateAvatar ( userId , fileLocation ) . toWeak < nl > + } < nl > + < nl > + private def updateAvatar ( userId : Int , fileLocation : FileLocation ) = RequestHandler [ UpdateAvatar , UpdateAvatar # Response ] { < nl > + ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ < nl > + ifIsAdmin ( botUserId ) { < nl > + ( for { < nl > + avatar ← fromFutureEither ( _ ⇒ BotError ( 400 , " LOCATION _ INVALID " ) ) ( db . run ( scaleAvatar ( fileLocation . fileId ) ) ) < nl > + _ ← fromFuture ( userExt . updateAvatar ( userId , 0 , Some ( avatar ) ) ) < nl > + } yield Void ) . value < nl > + } < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersService . scala < nl > deleted file mode 100644 < nl > index f9ca144 . . 0000000 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersService . scala < nl > + + + / dev / null < nl > @ @ - 1 , 33 + 0 , 0 @ @ < nl > - package im . actor . server . bot . services < nl > - < nl > - import akka . actor . ActorSystem < nl > - import im . actor . api . rpc . RpcError < nl > - import im . actor . bots . BotMessages . BotError < nl > - import im . actor . concurrent . FutureResultCats < nl > - import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } < nl > - import im . actor . server . db . DbExtension < nl > - import im . actor . server . file . { S3StorageExtension , FileStorageAdapter } < nl > - < nl > - final class UsersService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResultCats [ BotError ] with ApiToBotConversions { < nl > - import im . actor . bots . BotMessages . _ < nl > - import system . dispatcher < nl > - import im . actor . server . file . ImageUtils . _ < nl > - < nl > - private val db = DbExtension ( system ) . db < nl > - private implicit val fsAdapter : FileStorageAdapter = S3StorageExtension ( system ) . s3StorageAdapter < nl > - private implicit val _ system = system < nl > - < nl > - override val handlers : Handlers = { < nl > - case UpdateAvatar ( userId , fileLocation ) ⇒ updateAvatar ( userId , fileLocation ) . toWeak < nl > - } < nl > - < nl > - private def updateAvatar ( userId : Int , fileLocation : FileLocation ) = RequestHandler [ UpdateAvatar , UpdateAvatar # Response ] { < nl > - ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ < nl > - ifIsAdmin ( botUserId ) { < nl > - ( for { < nl > - avatar ← fromFutureEither ( _ ⇒ BotError ( 400 , " LOCATION _ INVALID " ) ) ( db . run ( scaleAvatar ( fileLocation . fileId ) ) ) < nl > - _ ← fromFuture ( userExt . updateAvatar ( userId , 0 , Some ( avatar ) ) ) < nl > - } yield Void ) . value < nl > - } < nl > - } < nl > - } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooks . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooks . scala < nl > index 106ed7d . . ebc7b7c 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooks . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooks . scala < nl > @ @ - 13 , 7 + 13 , 7 @ @ import shardakka . keyvalue . SimpleKeyValue < nl > import scala . concurrent . Future < nl > import scala . concurrent . forkjoin . ThreadLocalRandom < nl > < nl > - final class WebHooksService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResultCats [ BotMessages . BotError ] { < nl > + final class WebHooksBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResultCats [ BotMessages . BotError ] { < nl > import BotMessages . _ < nl > < nl > import system . dispatcher

TEST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala 
 index 494f6fb . . 07c3f66 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / GroupsBotService . scala 
 @ @ - 2 , 9 + 2 , 12 @ @ package im . actor . server . bot . services 
 
 import akka . actor . ActorSystem 
 import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } 
 - import im . actor . server . group . { GroupExtension , GroupType } 
 + import im . actor . server . group . GroupErrors . InvalidExtension 
 + import im . actor . server . group . GroupExt . Value . { BoolValue , StringValue } 
 + import im . actor . server . group . { GroupExt , GroupExtension } 
 import im . actor . util . misc . IdUtils 
 
 + import scala . concurrent . Future 
 import scala . concurrent . forkjoin . ThreadLocalRandom 
 
 private [ bot ] final class GroupsBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with ApiToBotConversions { 
 @ @ - 15 , 8 + 18 , 11 @ @ private [ bot ] final class GroupsBotService ( system : ActorSystem ) extends BotServic 
 private val groupExt = GroupExtension ( system ) 
 
 override val handlers : Handlers = { 
 - case CreateGroup ( title ) ⇒ createGroup ( title ) . toWeak 
 - case InviteUser ( groupPeer , userPeer ) ⇒ inviteUser ( groupPeer , userPeer ) . toWeak 
 + case CreateGroup ( title ) ⇒ createGroup ( title ) . toWeak 
 + case AddGroupExtString ( groupId , key , value ) ⇒ addGroupExtString ( groupId , key , value ) . toWeak 
 + case AddGroupExtBool ( groupId , key , value ) ⇒ addGroupExtBool ( groupId , key , value ) . toWeak 
 + case RemoveGroupExt ( groupId , key ) ⇒ removeExt ( groupId , key ) . toWeak 
 + case InviteUser ( groupPeer , userPeer ) ⇒ inviteUser ( groupPeer , userPeer ) . toWeak 
 } 
 
 private def createGroup ( title : String ) = RequestHandler [ CreateGroup , CreateGroup # Response ] ( 
 @ @ - 48 , 4 + 54 , 29 @ @ private [ bot ] final class GroupsBotService ( system : ActorSystem ) extends BotServic 
 } yield Right ( Void ) 
 } 
 ) 
 + 
 + private def addGroupExtString ( groupId : Int , key : String , value : String ) = RequestHandler [ AddGroupExtString , AddGroupExtString # Response ] ( 
 + ( botUserId : Int , botAuthId : Long , botAuthSid : Int ) ⇒ { 
 + ( for ( _ ← addExt ( groupId , GroupExt ( key , StringValue ( value ) ) ) ) yield Right ( Void ) ) recover { 
 + case InvalidExtension ⇒ Left ( BotError ( 500 , " INVALID _ EXT " ) ) 
 + } 
 + } 
 + ) 
 + 
 + private def addGroupExtBool ( groupId : Int , key : String , value : Boolean ) = RequestHandler [ AddGroupExtBool , AddGroupExtBool # Response ] ( 
 + ( botUserId : Int , botAuthId : Long , botAuthSid : Int ) ⇒ { 
 + ( for ( _ ← addExt ( groupId , GroupExt ( key , BoolValue ( value ) ) ) ) yield Right ( Void ) ) recover { 
 + case InvalidExtension ⇒ Left ( BotError ( 500 , " INVALID _ EXT " ) ) 
 + } 
 + } 
 + ) 
 + 
 + private def removeExt ( groupId : Int , key : String ) = RequestHandler [ RemoveGroupExt , RemoveGroupExt # Response ] ( 
 + ( botUserId : Int , botAuthId : Long , botAuthSid : Int ) ⇒ { 
 + groupExt . removeExt ( groupId , key ) map ( _ ⇒ Right ( Void ) ) 
 + } 
 + ) 
 + 
 + private def addExt ( groupId : Int , ext : GroupExt ) : Future [ Unit ] = groupExt . addExt ( groupId : Int , ext : GroupExt ) 
 + 
 } 
 diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala 
 index 37c6c11 . . a72b7b8 100644 
 - - - a / actor - server / project / Dependencies . scala 
 + + + b / actor - server / project / Dependencies . scala 
 @ @ - 5 , 7 + 5 , 7 @ @ import sbt . _ 
 object Dependencies { 
 object V { 
 val actorCommons = " 0 . 0 . 20 " 
 - val actorBotkit = " 1 . 0 . 109 " 
 + val actorBotkit = " 1 . 0 . 110 " 
 val akka = " 2 . 4 . 10 " 
 val akkaHttpJson = " 1 . 10 . 0 " 
 val cats = " 0 . 7 . 2 "

NEAREST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 index f858f1d . . e072d72 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . ActorSystem 
 import akka . stream . scaladsl . { Flow , Merge , Source } 
 import im . actor . api . rpc . Update 
 import im . actor . bots . BotMessages 
 - import im . actor . server . bot . services . { WebHooksService , BotsService , KeyValueService , MessagingService } 
 + import im . actor . server . bot . services . { WebHooksBotService , BotsBotService , KeyValueBotService , MessagingBotService } 
 import upickle . Js 
 
 import scala . concurrent . Future 
 @ @ - 17 , 10 + 17 , 10 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , system : ActorSys 
 import system . dispatcher 
 
 private lazy val updBuilder = new BotUpdateBuilder ( botUserId , botAuthId , system ) 
 - private val msgService = new MessagingService ( system ) 
 - private val kvService = new KeyValueService ( system ) 
 - private val botsService = new BotsService ( system ) 
 - private val webhooksService = new WebHooksService ( system ) 
 + private val msgService = new MessagingBotService ( system ) 
 + private val kvService = new KeyValueBotService ( system ) 
 + private val botsService = new BotsBotService ( system ) 
 + private val webhooksService = new WebHooksBotService ( system ) 
 
 val flow : Flow [ BotRequest , BotMessageOut , Unit ] = { 
 val updSource = 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsBotService . scala 
 new file mode 100644 
 index 0000000 . . cdd9eb6 
 - - - / dev / null 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsBotService . scala 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + package im . actor . server . bot . services 
 + 
 + import akka . actor . ActorSystem 
 + import im . actor . bots . BotMessages 
 + import im . actor . server . bot . { BotExtension , BotServiceBase } 
 + import im . actor . server . user . UserExceptions 
 + import upickle . Js 
 + 
 + final class BotsBotService ( system : ActorSystem ) extends BotServiceBase ( system ) { 
 + import BotMessages . _ 
 + import system . dispatcher 
 + 
 + val botExt = BotExtension ( system ) 
 + 
 + private def createBot ( username : String , name : String ) = RequestHandler [ CreateBot , CreateBot # Response ] ( 
 + ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ 
 + ifIsAdmin ( botUserId ) { 
 + ( for { 
 + ( token , userId ) ← botExt . create ( username , name , isAdmin = false ) 
 + } yield Right ( BotCreated ( token , userId ) ) ) recover { 
 + case UserExceptions . NicknameTaken ⇒ 
 + Left ( BotError ( 400 , " USERNAME _ TAKEN " , Js . Obj ( ) , None ) ) 
 + } 
 + } 
 + ) 
 + 
 + override def handlers : PartialFunction [ RequestBody , WeakRequestHandler ] = { 
 + case CreateBot ( username , name ) ⇒ createBot ( username , name ) . toWeak 
 + } 
 + } 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsService . scala 
 deleted file mode 100644 
 index feba593 . . 0000000 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsService . scala 
 + + + / dev / null 
 @ @ - 1 , 30 + 0 , 0 @ @ 
 - package im . actor . server . bot . services 
 - 
 - import akka . actor . ActorSystem 
 - import im . actor . bots . BotMessages 
 - import im . actor . server . bot . { BotExtension , BotServiceBase } 
 - import im . actor . server . user . UserExceptions 
 - import upickle . Js 
 - 
 - final class BotsService ( system : ActorSystem ) extends BotServiceBase ( system ) { 
 - import BotMessages . _ 
 - import system . dispatcher 
 - 
 - val botExt = BotExtension ( system ) 
 - 
 - private def createBot ( username : String , name : String ) = RequestHandler [ CreateBot , CreateBot # Response ] ( 
 - ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ 
 - ifIsAdmin ( botUserId ) { 
 - ( for { 
 - ( token , userId ) ← botExt . create ( username , name , isAdmin = false ) 
 - } yield Right ( BotCreated ( token , userId ) ) ) recover { 
 - case UserExceptions . NicknameTaken ⇒ 
 - Left ( BotError ( 400 , " USERNAME _ TAKEN " , Js . Obj ( ) , None ) ) 
 - } 
 - } 
 - ) 
 - 
 - override def handlers : PartialFunction [ RequestBody , WeakRequestHandler ] = { 
 - case CreateBot ( username , name ) ⇒ createBot ( username , name ) . toWeak 
 - } 
 - } 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueBotService . scala 
 new file mode 100644 
 index 0000000 . . 8b9f7b8 
 - - - / dev / null 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueBotService . scala 
 @ @ - 0 , 0 + 1 , 62 @ @ 
 + package im . actor . server . bot . services 
 + 
 + import akka . actor . ActorSystem 
 + import akka . util . Timeout 
 + import im . actor . bots . BotMessages 
 + import im . actor . config . ActorConfig 
 + import im . actor . server . bot . BotServiceBase 
 + import shardakka . ShardakkaExtension 
 + import shardakka . keyvalue . SimpleKeyValue 
 + 
 + import scala . collection . concurrent . TrieMap 
 + 
 + final class KeyValueBotService ( system : ActorSystem ) extends BotServiceBase ( system ) { 
 + 
 + import BotMessages . _ 
 + import system . dispatcher 
 + 
 + type Keyspace = String 
 + val MaxKeyspaceNameLength = 32 
 + 
 + private implicit val timeout = Timeout ( ActorConfig . defaultTimeout ) 
 + 
 + private val shardakka = ShardakkaExtension ( system ) 
 + 
 + private val spaces = TrieMap . empty [ ( BotUserId , String ) , SimpleKeyValue [ String ] ] 
 + 
 + private def setValue ( keyspace : Keyspace , key : String , value : String ) = RequestHandler [ SetValue , SetValue # Response ] ( 
 + ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { 
 + getSpace ( botUserId , keyspace ) upsert ( key , value ) map ( _ ⇒ Right ( Void ) ) 
 + } 
 + ) 
 + 
 + private def getValue ( keyspace : String , key : String ) = RequestHandler [ GetValue , GetValue # Response ] ( 
 + ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { 
 + getSpace ( botUserId , keyspace ) get ( key ) map ( v ⇒ Right ( Container . apply ( v ) ) ) 
 + } 
 + ) 
 + 
 + private def deleteValue ( keyspace : String , key : String ) = RequestHandler [ DeleteValue , DeleteValue # Response ] ( 
 + ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { 
 + getSpace ( botUserId , keyspace ) delete ( key ) map ( _ ⇒ Right ( Void ) ) 
 + } 
 + ) 
 + 
 + private def getKeys ( keyspace : String ) = RequestHandler [ GetKeys , GetKeys # Response ] ( 
 + ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { 
 + getSpace ( botUserId , keyspace ) getKeys ( ) map ( v ⇒ Right ( Container . apply ( v ) ) ) 
 + } 
 + ) 
 + 
 + override def handlers : PartialFunction [ RequestBody , WeakRequestHandler ] = { 
 + case SetValue ( keyspace , key , value ) ⇒ setValue ( keyspace , key , value ) . toWeak 
 + case GetValue ( keyspace , key ) ⇒ getValue ( keyspace , key ) . toWeak 
 + case DeleteValue ( keyspace , key ) ⇒ deleteValue ( keyspace , key ) . toWeak 
 + case GetKeys ( keyspace ) ⇒ getKeys ( keyspace ) . toWeak 
 + } 
 + 
 + private def getSpace ( botUserId : BotUserId , keyspace : Keyspace ) : SimpleKeyValue [ String ] = { 
 + require ( keyspace . length < = MaxKeyspaceNameLength , s " Maximum keyspace name length is $ MaxKeyspaceNameLength " ) 
 + spaces . getOrElseUpdate ( botUserId → keyspace , shardakka . simpleKeyValue ( s " bot - kv - $ botUserId - $ keyspace " ) ) 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueService . scala 
 deleted file mode 100644 
 index bb90a07 . . 0000000 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueService . scala 
 + + + / dev / null 
 @ @ - 1 , 62 + 0 , 0 @ @ 
 - package im . actor . server . bot . services 
 - 
 - import akka . actor . ActorSystem 
 - import akka . util . Timeout 
 - import im . actor . bots . BotMessages 
 - import im . actor . config . ActorConfig 
 - import im . actor . server . bot . BotServiceBase 
 - import shardakka . ShardakkaExtension 
 - import shardakka . keyvalue . SimpleKeyValue 
 - 
 - import scala . collection . concurrent . TrieMap 
 - 
 - final class KeyValueService ( system : ActorSystem ) extends BotServiceBase ( system ) { 
 - 
 - import BotMessages . _ 
 - import system . dispatcher 
 - 
 - type Keyspace = String 
 - val MaxKeyspaceNameLength = 32 
 - 
 - private implicit val timeout = Timeout ( ActorConfig . defaultTimeout ) 
 - 
 - private val shardakka = ShardakkaExtension ( system ) 
 - 
 - private val spaces = TrieMap . empty [ ( BotUserId , String ) , SimpleKeyValue [ String ] ] 
 - 
 - private def setValue ( keyspace : Keyspace , key : String , value : String ) = RequestHandler [ SetValue , SetValue # Response ] ( 
 - ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { 
 - getSpace ( botUserId , keyspace ) upsert ( key , value ) map ( _ ⇒ Right ( Void ) ) 
 - } 
 - ) 
 - 
 - private def getValue ( keyspace : String , key : String ) = RequestHandler [ GetValue , GetValue # Response ] ( 
 - ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { 
 - getSpace ( botUserId , keyspace ) get ( key ) map ( v ⇒ Right ( Container . apply ( v ) ) ) 
 - } 
 - ) 
 - 
 - private def deleteValue ( keyspace : String , key : String ) = RequestHandler [ DeleteValue , DeleteValue # Response ] ( 
 - ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { 
 - getSpace ( botUserId , keyspace ) delete ( key ) map ( _ ⇒ Right ( Void ) ) 
 - } 
 - ) 
 - 
 - private def getKeys ( keyspace : String ) = RequestHandler [ GetKeys , GetKeys # Response ] ( 
 - ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { 
 - getSpace ( botUserId , keyspace ) getKeys ( ) map ( v ⇒ Right ( Container . apply ( v ) ) ) 
 - } 
 - ) 
 - 
 - override def handlers : PartialFunction [ RequestBody , WeakRequestHandler ] = { 
 - case SetValue ( keyspace , key , value ) ⇒ setValue ( keyspace , key , value ) . toWeak 
 - case GetValue ( keyspace , key ) ⇒ getValue ( keyspace , key ) . toWeak 
 - case DeleteValue ( keyspace , key ) ⇒ deleteValue ( keyspace , key ) . toWeak 
 - case GetKeys ( keyspace ) ⇒ getKeys ( keyspace ) . toWeak 
 - } 
 - 
 - private def getSpace ( botUserId : BotUserId , keyspace : Keyspace ) : SimpleKeyValue [ String ] = { 
 - require ( keyspace . length < = MaxKeyspaceNameLength , s " Maximum keyspace name length is $ MaxKeyspaceNameLength " ) 
 - spaces . getOrElseUpdate ( botUserId → keyspace , shardakka . simpleKeyValue ( s " bot - kv - $ botUserId - $ keyspace " ) ) 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingBotService . scala 
 new file mode 100644 
 index 0000000 . . c2026ad 
 - - - / dev / null 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingBotService . scala 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + package im . actor . server . bot . services 
 + 
 + import akka . actor . ActorSystem 
 + import im . actor . api . rpc . messaging . { ApiJsonMessage , ApiTextMessage } 
 + import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } 
 + import im . actor . server . bot . { BotToApiConversions , BotServiceBase } 
 + import im . actor . server . dialog . DialogExtension 
 + import im . actor . server . sequence . SeqStateDate 
 + 
 + final class MessagingBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with BotToApiConversions { 
 + 
 + import im . actor . bots . BotMessages . _ 
 + import system . dispatcher 
 + 
 + private lazy val dialogExt = DialogExtension ( system ) 
 + 
 + override val handlers : PartialFunction [ RequestBody , WeakRequestHandler ] = { 
 + case SendMessage ( peer , randomId , message ) ⇒ sendMessage ( peer , randomId , message ) . toWeak 
 + } 
 + 
 + private def sendMessage ( peer : OutPeer , randomId : Long , message : MessageBody ) = RequestHandler [ SendMessage , SendMessage # Response ] ( 
 + ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { 
 + / / FIXME : check access hash 
 + 
 + for { 
 + SeqStateDate ( _ , _ , date ) ← dialogExt . sendMessage ( 
 + peer = ApiPeer ( ApiPeerType ( peer . ` type ` ) , peer . id ) , 
 + senderUserId = botUserId , 
 + senderAuthId = 0L , 
 + randomId = randomId , 
 + message = message , 
 + isFat = false 
 + ) 
 + } yield Right ( MessageSent ( date ) ) 
 + } 
 + ) 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingService . scala 
 deleted file mode 100644 
 index 093405e . . 0000000 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingService . scala 
 + + + / dev / null 
 @ @ - 1 , 37 + 0 , 0 @ @ 
 - package im . actor . server . bot . services 
 - 
 - import akka . actor . ActorSystem 
 - import im . actor . api . rpc . messaging . { ApiJsonMessage , ApiTextMessage } 
 - import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } 
 - import im . actor . server . bot . { BotToApiConversions , BotServiceBase } 
 - import im . actor . server . dialog . DialogExtension 
 - import im . actor . server . sequence . SeqStateDate 
 - 
 - final class MessagingService ( system : ActorSystem ) extends BotServiceBase ( system ) with BotToApiConversions { 
 - 
 - import im . actor . bots . BotMessages . _ 
 - import system . dispatcher 
 - 
 - private lazy val dialogExt = DialogExtension ( system ) 
 - 
 - override val handlers : PartialFunction [ RequestBody , WeakRequestHandler ] = { 
 - case SendMessage ( peer , randomId , message ) ⇒ sendMessage ( peer , randomId , message ) . toWeak 
 - } 
 - 
 - private def sendMessage ( peer : OutPeer , randomId : Long , message : MessageBody ) = RequestHandler [ SendMessage , SendMessage # Response ] ( 
 - ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { 
 - / / FIXME : check access hash 
 - 
 - for { 
 - SeqStateDate ( _ , _ , date ) ← dialogExt . sendMessage ( 
 - peer = ApiPeer ( ApiPeerType ( peer . ` type ` ) , peer . id ) , 
 - senderUserId = botUserId , 
 - senderAuthId = 0L , 
 - randomId = randomId , 
 - message = message , 
 - isFat = false 
 - ) 
 - } yield Right ( MessageSent ( date ) ) 
 - } 
 - ) 
 - } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala 
 new file mode 100644 
 index 0000000 . . 189aa8d 
 - - - / dev / null 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + package im . actor . server . bot . services 
 + 
 + import akka . actor . ActorSystem 
 + import im . actor . api . rpc . RpcError 
 + import im . actor . bots . BotMessages . BotError 
 + import im . actor . concurrent . FutureResultCats 
 + import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } 
 + import im . actor . server . db . DbExtension 
 + import im . actor . server . file . { S3StorageExtension , FileStorageAdapter } 
 + 
 + final class UsersBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResultCats [ BotError ] with ApiToBotConversions { 
 + import im . actor . bots . BotMessages . _ 
 + import system . dispatcher 
 + import im . actor . server . file . ImageUtils . _ 
 + 
 + private val db = DbExtension ( system ) . db 
 + private implicit val fsAdapter : FileStorageAdapter = S3StorageExtension ( system ) . s3StorageAdapter 
 + private implicit val _ system = system 
 + 
 + override val handlers : Handlers = { 
 + case UpdateAvatar ( userId , fileLocation ) ⇒ updateAvatar ( userId , fileLocation ) . toWeak 
 + } 
 + 
 + private def updateAvatar ( userId : Int , fileLocation : FileLocation ) = RequestHandler [ UpdateAvatar , UpdateAvatar # Response ] { 
 + ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ 
 + ifIsAdmin ( botUserId ) { 
 + ( for { 
 + avatar ← fromFutureEither ( _ ⇒ BotError ( 400 , " LOCATION _ INVALID " ) ) ( db . run ( scaleAvatar ( fileLocation . fileId ) ) ) 
 + _ ← fromFuture ( userExt . updateAvatar ( userId , 0 , Some ( avatar ) ) ) 
 + } yield Void ) . value 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersService . scala 
 deleted file mode 100644 
 index f9ca144 . . 0000000 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersService . scala 
 + + + / dev / null 
 @ @ - 1 , 33 + 0 , 0 @ @ 
 - package im . actor . server . bot . services 
 - 
 - import akka . actor . ActorSystem 
 - import im . actor . api . rpc . RpcError 
 - import im . actor . bots . BotMessages . BotError 
 - import im . actor . concurrent . FutureResultCats 
 - import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } 
 - import im . actor . server . db . DbExtension 
 - import im . actor . server . file . { S3StorageExtension , FileStorageAdapter } 
 - 
 - final class UsersService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResultCats [ BotError ] with ApiToBotConversions { 
 - import im . actor . bots . BotMessages . _ 
 - import system . dispatcher 
 - import im . actor . server . file . ImageUtils . _ 
 - 
 - private val db = DbExtension ( system ) . db 
 - private implicit val fsAdapter : FileStorageAdapter = S3StorageExtension ( system ) . s3StorageAdapter 
 - private implicit val _ system = system 
 - 
 - override val handlers : Handlers = { 
 - case UpdateAvatar ( userId , fileLocation ) ⇒ updateAvatar ( userId , fileLocation ) . toWeak 
 - } 
 - 
 - private def updateAvatar ( userId : Int , fileLocation : FileLocation ) = RequestHandler [ UpdateAvatar , UpdateAvatar # Response ] { 
 - ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ 
 - ifIsAdmin ( botUserId ) { 
 - ( for { 
 - avatar ← fromFutureEither ( _ ⇒ BotError ( 400 , " LOCATION _ INVALID " ) ) ( db . run ( scaleAvatar ( fileLocation . fileId ) ) ) 
 - _ ← fromFuture ( userExt . updateAvatar ( userId , 0 , Some ( avatar ) ) ) 
 - } yield Void ) . value 
 - } 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooks . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooks . scala 
 index 106ed7d . . ebc7b7c 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooks . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooks . scala 
 @ @ - 13 , 7 + 13 , 7 @ @ import shardakka . keyvalue . SimpleKeyValue 
 import scala . concurrent . Future 
 import scala . concurrent . forkjoin . ThreadLocalRandom 
 
 - final class WebHooksService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResultCats [ BotMessages . BotError ] { 
 + final class WebHooksBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResultCats [ BotMessages . BotError ] { 
 import BotMessages . _ 
 
 import system . dispatcher
