BLEU SCORE: 0.9036020036098448

TEST MSG: feat ( core + android ) : implement on client contacts privacy
GENERATED MSG: wip ( core + android ) : implement on client contacts privacy

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java < nl > index acc247e . . 04e0a13 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java < nl > @ @ - 26 , 6 + 26 , 8 @ @ import im . actor . core . api . updates . UpdateUserNickChanged ; < nl > import im . actor . core . api . updates . UpdateUserPreferredLanguagesChanged ; < nl > import im . actor . core . api . updates . UpdateUserTimeZoneChanged ; < nl > import im . actor . core . api . updates . UpdateUserUnblocked ; < nl > + import im . actor . core . entity . ContactRecord ; < nl > + import im . actor . core . entity . ContactRecordType ; < nl > import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . MessageState ; < nl > import im . actor . core . entity . Peer ; < nl > @ @ - 49 , 6 + 51 , 7 @ @ import im . actor . core . viewmodel . UserPhone ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > import im . actor . core . viewmodel . generics . ArrayListUserEmail ; < nl > import im . actor . core . viewmodel . generics . ArrayListUserPhone ; < nl > + import im . actor . runtime . Log ; < nl > import im . actor . runtime . actors . messages . Void ; < nl > import im . actor . runtime . annotations . Verified ; < nl > import im . actor . runtime . function . Function ; < nl > @ @ - 381 , 7 + 384 , 13 @ @ public class UserRouter extends ModuleActor { < nl > . map ( responseLoadFullUsers - > < nl > new Tuple2 < > ( responseLoadFullUsers , u ) ) ; < nl > } else { < nl > - return Promise . failure ( new RuntimeException ( " Already loaded " ) ) ; < nl > + / / user already loaded , only perform is in phone book check < nl > + if ( ! getUserVM ( uid ) . isInPhoneBook ( ) . get ( ) ) { < nl > + return checkIsInPhoneBook ( u ) . flatMap ( aVoid - > Promise . failure ( new RuntimeException ( " Already loaded " ) ) ) ; < nl > + } else { < nl > + return Promise . failure ( new RuntimeException ( " Already loaded " ) ) ; < nl > + } < nl > + < nl > } < nl > } ) < nl > . then ( r - > { < nl > @ @ - 392 , 7 + 401 , 7 @ @ public class UserRouter extends ModuleActor { < nl > / / Updating user in collection < nl > users ( ) . addOrUpdateItem ( upd ) ; < nl > } ) < nl > - . chain ( r - > checkIsInPhoneBook ( getUserVM ( uid ) ) ) < nl > + . chain ( r - > checkIsInPhoneBook ( r . getT2 ( ) . updateExt ( r . getT1 ( ) . getFullUsers ( ) . get ( 0 ) ) ) ) < nl > . after ( ( r , e ) - > unfreeze ( ) ) ; < nl > } < nl > < nl > @ @ - 452 , 52 + 461 , 55 @ @ public class UserRouter extends ModuleActor { < nl > } < nl > } < nl > < nl > - protected Promise < Void > checkIsInPhoneBook ( UserVM userVM ) { < nl > + protected Promise < Void > checkIsInPhoneBook ( User user ) { < nl > < nl > if ( ! config ( ) . isEnableOnClientPrivacy ( ) ) { < nl > return Promise . success ( null ) ; < nl > } < nl > < nl > + Log . d ( " ON _ CLIENT _ PRIVACY " , " checking " + user . getName ( ) + " is in phone book " ) ; < nl > + < nl > return getPhoneBook ( ) . flatMap ( phoneBookContacts - > new Promise < Void > ( resolver - > { < nl > - ArrayListUserPhone userPhones = userVM . getPhones ( ) . get ( ) ; < nl > - ArrayListUserEmail userEmails = userVM . getEmails ( ) . get ( ) ; < nl > + List < ContactRecord > userRecords = user . getRecords ( ) ; < nl > + < nl > + Log . d ( " ON _ CLIENT _ PRIVACY " , " phonebook have " + phoneBookContacts . size ( ) + " records " ) ; < nl > + Log . d ( " ON _ CLIENT _ PRIVACY " , " user have " + userRecords . size ( ) + " records " ) ; < nl > < nl > - if ( ! userVM . isInPhoneBook ( ) . get ( ) ) { < nl > - outer : < nl > - for ( UserPhone phone : userPhones ) { < nl > + outer : < nl > + for ( ContactRecord record : userRecords ) { < nl > < nl > - for ( PhoneBookContact phoneBookContact : phoneBookContacts ) { < nl > + for ( PhoneBookContact phoneBookContact : phoneBookContacts ) { < nl > < nl > - for ( PhoneBookPhone phone1 : phoneBookContact . getPhones ( ) ) { < nl > - if ( phone . getPhone ( ) = = phone1 . getNumber ( ) ) { < nl > - userVM . isInPhoneBook ( ) . change ( true ) ; < nl > - context ( ) . getContactsModule ( ) . markInPhoneBook ( userVM . getId ( ) ) ; < nl > + for ( PhoneBookPhone phone1 : phoneBookContact . getPhones ( ) ) { < nl > + if ( record . getRecordType ( ) = = ContactRecordType . PHONE ) { < nl > + if ( record . getRecordData ( ) . equals ( phone1 . getNumber ( ) + " " ) ) { < nl > + context ( ) . getContactsModule ( ) . markInPhoneBook ( user . getUid ( ) ) ; < nl > + getUserVM ( user . getUid ( ) ) . isInPhoneBook ( ) . change ( true ) ; < nl > + Log . d ( " ON _ CLIENT _ PRIVACY " , " in record book ! " ) ; < nl > break outer ; < nl > } < nl > } < nl > - } < nl > - < nl > - } < nl > - } < nl > < nl > - if ( ! userVM . isInPhoneBook ( ) . get ( ) ) { < nl > - outer : < nl > - for ( UserEmail email : userEmails ) { < nl > - < nl > - for ( PhoneBookContact phoneBookContact : phoneBookContacts ) { < nl > + } < nl > < nl > - for ( PhoneBookEmail email1 : phoneBookContact . getEmails ( ) ) { < nl > - if ( email . getEmail ( ) . equals ( email1 . getEmail ( ) ) ) { < nl > - userVM . isInPhoneBook ( ) . change ( true ) ; < nl > - context ( ) . getContactsModule ( ) . markInPhoneBook ( userVM . getId ( ) ) ; < nl > + for ( PhoneBookEmail email : phoneBookContact . getEmails ( ) ) { < nl > + if ( record . getRecordType ( ) = = ContactRecordType . EMAIL ) { < nl > + if ( record . getRecordData ( ) . equals ( email . getEmail ( ) ) ) { < nl > + context ( ) . getContactsModule ( ) . markInPhoneBook ( user . getUid ( ) ) ; < nl > + getUserVM ( user . getUid ( ) ) . isInPhoneBook ( ) . change ( true ) ; < nl > + Log . d ( " ON _ CLIENT _ PRIVACY " , " in record book ! " ) ; < nl > break outer ; < nl > } < nl > } < nl > - } < nl > < nl > + } < nl > } < nl > + < nl > } < nl > < nl > + Log . d ( " ON _ CLIENT _ PRIVACY " , " finish check " ) ; < nl > + < nl > + < nl > resolver . result ( null ) ; < nl > } ) ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java < nl > index 7615243 . . acc247e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java < nl > @ @ - 29 , 6 + 29 , 9 @ @ import im . actor . core . api . updates . UpdateUserUnblocked ; < nl > import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . MessageState ; < nl > import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . PhoneBookContact ; < nl > + import im . actor . core . entity . PhoneBookEmail ; < nl > + import im . actor . core . entity . PhoneBookPhone ; < nl > import im . actor . core . entity . User ; < nl > import im . actor . core . entity . content . ServiceUserRegistered ; < nl > import im . actor . core . modules . ModuleActor ; < nl > @ @ - 40 , 6 + 43 , 7 @ @ import im . actor . core . modules . users . router . entity . RouterFetchMissingUsers ; < nl > import im . actor . core . modules . users . router . entity . RouterLoadFullUser ; < nl > import im . actor . core . modules . users . router . entity . RouterUserUpdate ; < nl > import im . actor . core . network . parser . Update ; < nl > + import im . actor . core . providers . PhoneBookProvider ; < nl > import im . actor . core . viewmodel . UserEmail ; < nl > import im . actor . core . viewmodel . UserPhone ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > @ @ - 62 , 6 + 66 , 9 @ @ public class UserRouter extends ModuleActor { < nl > private HashSet < Integer > requestedFullUsers = new HashSet < > ( ) ; < nl > private boolean isFreezed = false ; < nl > < nl > + PhoneBookProvider phoneBookProvider = config ( ) . getPhoneBookProvider ( ) ; < nl > + List < PhoneBookContact > contacts = null ; < nl > + < nl > public UserRouter ( ModuleContext context ) { < nl > super ( context ) ; < nl > } < nl > @ @ - 385 , 11 + 392 , 8 @ @ public class UserRouter extends ModuleActor { < nl > / / Updating user in collection < nl > users ( ) . addOrUpdateItem ( upd ) ; < nl > } ) < nl > - . after ( ( r , e ) - > unfreeze ( ) ) < nl > - . chain ( r - > { < nl > - checkIsInPhoneBook ( getUserVM ( uid ) ) ; < nl > - return Promise . success ( null ) ; < nl > - } ) ; < nl > + . chain ( r - > checkIsInPhoneBook ( getUserVM ( uid ) ) ) < nl > + . after ( ( r , e ) - > unfreeze ( ) ) ; < nl > } < nl > < nl > @ Verified < nl > @ @ - 435 , 51 + 439 , 68 @ @ public class UserRouter extends ModuleActor { < nl > . after ( ( r , e ) - > unfreeze ( ) ) ; < nl > } < nl > < nl > - private BookImportStorage getBookImportStorage ( ) { < nl > - BookImportStorage storage = null ; < nl > - byte [ ] data = context ( ) . getContactsModule ( ) . getBookImportState ( ) . get ( 0 ) ; < nl > - if ( data ! = null ) { < nl > - try { < nl > - storage = new BookImportStorage ( data ) ; < nl > - } catch ( Exception e ) { < nl > - e . getLocalizedMessage ( ) ; < nl > - } < nl > + private Promise < List < PhoneBookContact > > getPhoneBook ( ) { < nl > + if ( contacts = = null ) { < nl > + return new Promise < List < PhoneBookContact > > ( resolver - > { < nl > + phoneBookProvider . loadPhoneBook ( contacts1 - > { < nl > + contacts = contacts1 ; < nl > + resolver . result ( contacts1 ) ; < nl > + } ) ; < nl > + } ) ; < nl > + } else { < nl > + return Promise . success ( contacts ) ; < nl > } < nl > - return storage ; < nl > } < nl > < nl > - protected void checkIsInPhoneBook ( UserVM userVM ) { < nl > + protected Promise < Void > checkIsInPhoneBook ( UserVM userVM ) { < nl > + < nl > if ( ! config ( ) . isEnableOnClientPrivacy ( ) ) { < nl > - return ; < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > - BookImportStorage storage = getBookImportStorage ( ) ; < nl > - if ( storage = = null ) { < nl > - return ; < nl > - } < nl > + return getPhoneBook ( ) . flatMap ( phoneBookContacts - > new Promise < Void > ( resolver - > { < nl > + ArrayListUserPhone userPhones = userVM . getPhones ( ) . get ( ) ; < nl > + ArrayListUserEmail userEmails = userVM . getEmails ( ) . get ( ) ; < nl > + < nl > + if ( ! userVM . isInPhoneBook ( ) . get ( ) ) { < nl > + outer : < nl > + for ( UserPhone phone : userPhones ) { < nl > < nl > - ArrayListUserPhone userPhones = userVM . getPhones ( ) . get ( ) ; < nl > - ArrayListUserEmail userEmails = userVM . getEmails ( ) . get ( ) ; < nl > + for ( PhoneBookContact phoneBookContact : phoneBookContacts ) { < nl > + < nl > + for ( PhoneBookPhone phone1 : phoneBookContact . getPhones ( ) ) { < nl > + if ( phone . getPhone ( ) = = phone1 . getNumber ( ) ) { < nl > + userVM . isInPhoneBook ( ) . change ( true ) ; < nl > + context ( ) . getContactsModule ( ) . markInPhoneBook ( userVM . getId ( ) ) ; < nl > + break outer ; < nl > + } < nl > + } < nl > + } < nl > < nl > - if ( ! userVM . isInPhoneBook ( ) . get ( ) ) { < nl > - for ( UserPhone phone : userPhones ) { < nl > - if ( storage . isImported ( phone . getPhone ( ) ) ) { < nl > - userVM . isInPhoneBook ( ) . change ( true ) ; < nl > - context ( ) . getContactsModule ( ) . markInPhoneBook ( userVM . getId ( ) ) ; < nl > - break ; < nl > } < nl > } < nl > - } < nl > < nl > - if ( ! userVM . isInPhoneBook ( ) . get ( ) ) { < nl > - for ( UserEmail email : userEmails ) { < nl > - if ( storage . isImported ( email . getEmail ( ) ) ) { < nl > - userVM . isInPhoneBook ( ) . change ( true ) ; < nl > - context ( ) . getContactsModule ( ) . markInPhoneBook ( userVM . getId ( ) ) ; < nl > - break ; < nl > + if ( ! userVM . isInPhoneBook ( ) . get ( ) ) { < nl > + outer : < nl > + for ( UserEmail email : userEmails ) { < nl > + < nl > + for ( PhoneBookContact phoneBookContact : phoneBookContacts ) { < nl > + < nl > + for ( PhoneBookEmail email1 : phoneBookContact . getEmails ( ) ) { < nl > + if ( email . getEmail ( ) . equals ( email1 . getEmail ( ) ) ) { < nl > + userVM . isInPhoneBook ( ) . change ( true ) ; < nl > + context ( ) . getContactsModule ( ) . markInPhoneBook ( userVM . getId ( ) ) ; < nl > + break outer ; < nl > + } < nl > + } < nl > + } < nl > + < nl > } < nl > } < nl > - } < nl > + < nl > + resolver . result ( null ) ; < nl > + } ) ) ; < nl > + < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java 
 index acc247e . . 04e0a13 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java 
 @ @ - 26 , 6 + 26 , 8 @ @ import im . actor . core . api . updates . UpdateUserNickChanged ; 
 import im . actor . core . api . updates . UpdateUserPreferredLanguagesChanged ; 
 import im . actor . core . api . updates . UpdateUserTimeZoneChanged ; 
 import im . actor . core . api . updates . UpdateUserUnblocked ; 
 + import im . actor . core . entity . ContactRecord ; 
 + import im . actor . core . entity . ContactRecordType ; 
 import im . actor . core . entity . Message ; 
 import im . actor . core . entity . MessageState ; 
 import im . actor . core . entity . Peer ; 
 @ @ - 49 , 6 + 51 , 7 @ @ import im . actor . core . viewmodel . UserPhone ; 
 import im . actor . core . viewmodel . UserVM ; 
 import im . actor . core . viewmodel . generics . ArrayListUserEmail ; 
 import im . actor . core . viewmodel . generics . ArrayListUserPhone ; 
 + import im . actor . runtime . Log ; 
 import im . actor . runtime . actors . messages . Void ; 
 import im . actor . runtime . annotations . Verified ; 
 import im . actor . runtime . function . Function ; 
 @ @ - 381 , 7 + 384 , 13 @ @ public class UserRouter extends ModuleActor { 
 . map ( responseLoadFullUsers - > 
 new Tuple2 < > ( responseLoadFullUsers , u ) ) ; 
 } else { 
 - return Promise . failure ( new RuntimeException ( " Already loaded " ) ) ; 
 + / / user already loaded , only perform is in phone book check 
 + if ( ! getUserVM ( uid ) . isInPhoneBook ( ) . get ( ) ) { 
 + return checkIsInPhoneBook ( u ) . flatMap ( aVoid - > Promise . failure ( new RuntimeException ( " Already loaded " ) ) ) ; 
 + } else { 
 + return Promise . failure ( new RuntimeException ( " Already loaded " ) ) ; 
 + } 
 + 
 } 
 } ) 
 . then ( r - > { 
 @ @ - 392 , 7 + 401 , 7 @ @ public class UserRouter extends ModuleActor { 
 / / Updating user in collection 
 users ( ) . addOrUpdateItem ( upd ) ; 
 } ) 
 - . chain ( r - > checkIsInPhoneBook ( getUserVM ( uid ) ) ) 
 + . chain ( r - > checkIsInPhoneBook ( r . getT2 ( ) . updateExt ( r . getT1 ( ) . getFullUsers ( ) . get ( 0 ) ) ) ) 
 . after ( ( r , e ) - > unfreeze ( ) ) ; 
 } 
 
 @ @ - 452 , 52 + 461 , 55 @ @ public class UserRouter extends ModuleActor { 
 } 
 } 
 
 - protected Promise < Void > checkIsInPhoneBook ( UserVM userVM ) { 
 + protected Promise < Void > checkIsInPhoneBook ( User user ) { 
 
 if ( ! config ( ) . isEnableOnClientPrivacy ( ) ) { 
 return Promise . success ( null ) ; 
 } 
 
 + Log . d ( " ON _ CLIENT _ PRIVACY " , " checking " + user . getName ( ) + " is in phone book " ) ; 
 + 
 return getPhoneBook ( ) . flatMap ( phoneBookContacts - > new Promise < Void > ( resolver - > { 
 - ArrayListUserPhone userPhones = userVM . getPhones ( ) . get ( ) ; 
 - ArrayListUserEmail userEmails = userVM . getEmails ( ) . get ( ) ; 
 + List < ContactRecord > userRecords = user . getRecords ( ) ; 
 + 
 + Log . d ( " ON _ CLIENT _ PRIVACY " , " phonebook have " + phoneBookContacts . size ( ) + " records " ) ; 
 + Log . d ( " ON _ CLIENT _ PRIVACY " , " user have " + userRecords . size ( ) + " records " ) ; 
 
 - if ( ! userVM . isInPhoneBook ( ) . get ( ) ) { 
 - outer : 
 - for ( UserPhone phone : userPhones ) { 
 + outer : 
 + for ( ContactRecord record : userRecords ) { 
 
 - for ( PhoneBookContact phoneBookContact : phoneBookContacts ) { 
 + for ( PhoneBookContact phoneBookContact : phoneBookContacts ) { 
 
 - for ( PhoneBookPhone phone1 : phoneBookContact . getPhones ( ) ) { 
 - if ( phone . getPhone ( ) = = phone1 . getNumber ( ) ) { 
 - userVM . isInPhoneBook ( ) . change ( true ) ; 
 - context ( ) . getContactsModule ( ) . markInPhoneBook ( userVM . getId ( ) ) ; 
 + for ( PhoneBookPhone phone1 : phoneBookContact . getPhones ( ) ) { 
 + if ( record . getRecordType ( ) = = ContactRecordType . PHONE ) { 
 + if ( record . getRecordData ( ) . equals ( phone1 . getNumber ( ) + " " ) ) { 
 + context ( ) . getContactsModule ( ) . markInPhoneBook ( user . getUid ( ) ) ; 
 + getUserVM ( user . getUid ( ) ) . isInPhoneBook ( ) . change ( true ) ; 
 + Log . d ( " ON _ CLIENT _ PRIVACY " , " in record book ! " ) ; 
 break outer ; 
 } 
 } 
 - } 
 - 
 - } 
 - } 
 
 - if ( ! userVM . isInPhoneBook ( ) . get ( ) ) { 
 - outer : 
 - for ( UserEmail email : userEmails ) { 
 - 
 - for ( PhoneBookContact phoneBookContact : phoneBookContacts ) { 
 + } 
 
 - for ( PhoneBookEmail email1 : phoneBookContact . getEmails ( ) ) { 
 - if ( email . getEmail ( ) . equals ( email1 . getEmail ( ) ) ) { 
 - userVM . isInPhoneBook ( ) . change ( true ) ; 
 - context ( ) . getContactsModule ( ) . markInPhoneBook ( userVM . getId ( ) ) ; 
 + for ( PhoneBookEmail email : phoneBookContact . getEmails ( ) ) { 
 + if ( record . getRecordType ( ) = = ContactRecordType . EMAIL ) { 
 + if ( record . getRecordData ( ) . equals ( email . getEmail ( ) ) ) { 
 + context ( ) . getContactsModule ( ) . markInPhoneBook ( user . getUid ( ) ) ; 
 + getUserVM ( user . getUid ( ) ) . isInPhoneBook ( ) . change ( true ) ; 
 + Log . d ( " ON _ CLIENT _ PRIVACY " , " in record book ! " ) ; 
 break outer ; 
 } 
 } 
 - } 
 
 + } 
 } 
 + 
 } 
 
 + Log . d ( " ON _ CLIENT _ PRIVACY " , " finish check " ) ; 
 + 
 + 
 resolver . result ( null ) ; 
 } ) ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java 
 index 7615243 . . acc247e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java 
 @ @ - 29 , 6 + 29 , 9 @ @ import im . actor . core . api . updates . UpdateUserUnblocked ; 
 import im . actor . core . entity . Message ; 
 import im . actor . core . entity . MessageState ; 
 import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . PhoneBookContact ; 
 + import im . actor . core . entity . PhoneBookEmail ; 
 + import im . actor . core . entity . PhoneBookPhone ; 
 import im . actor . core . entity . User ; 
 import im . actor . core . entity . content . ServiceUserRegistered ; 
 import im . actor . core . modules . ModuleActor ; 
 @ @ - 40 , 6 + 43 , 7 @ @ import im . actor . core . modules . users . router . entity . RouterFetchMissingUsers ; 
 import im . actor . core . modules . users . router . entity . RouterLoadFullUser ; 
 import im . actor . core . modules . users . router . entity . RouterUserUpdate ; 
 import im . actor . core . network . parser . Update ; 
 + import im . actor . core . providers . PhoneBookProvider ; 
 import im . actor . core . viewmodel . UserEmail ; 
 import im . actor . core . viewmodel . UserPhone ; 
 import im . actor . core . viewmodel . UserVM ; 
 @ @ - 62 , 6 + 66 , 9 @ @ public class UserRouter extends ModuleActor { 
 private HashSet < Integer > requestedFullUsers = new HashSet < > ( ) ; 
 private boolean isFreezed = false ; 
 
 + PhoneBookProvider phoneBookProvider = config ( ) . getPhoneBookProvider ( ) ; 
 + List < PhoneBookContact > contacts = null ; 
 + 
 public UserRouter ( ModuleContext context ) { 
 super ( context ) ; 
 } 
 @ @ - 385 , 11 + 392 , 8 @ @ public class UserRouter extends ModuleActor { 
 / / Updating user in collection 
 users ( ) . addOrUpdateItem ( upd ) ; 
 } ) 
 - . after ( ( r , e ) - > unfreeze ( ) ) 
 - . chain ( r - > { 
 - checkIsInPhoneBook ( getUserVM ( uid ) ) ; 
 - return Promise . success ( null ) ; 
 - } ) ; 
 + . chain ( r - > checkIsInPhoneBook ( getUserVM ( uid ) ) ) 
 + . after ( ( r , e ) - > unfreeze ( ) ) ; 
 } 
 
 @ Verified 
 @ @ - 435 , 51 + 439 , 68 @ @ public class UserRouter extends ModuleActor { 
 . after ( ( r , e ) - > unfreeze ( ) ) ; 
 } 
 
 - private BookImportStorage getBookImportStorage ( ) { 
 - BookImportStorage storage = null ; 
 - byte [ ] data = context ( ) . getContactsModule ( ) . getBookImportState ( ) . get ( 0 ) ; 
 - if ( data ! = null ) { 
 - try { 
 - storage = new BookImportStorage ( data ) ; 
 - } catch ( Exception e ) { 
 - e . getLocalizedMessage ( ) ; 
 - } 
 + private Promise < List < PhoneBookContact > > getPhoneBook ( ) { 
 + if ( contacts = = null ) { 
 + return new Promise < List < PhoneBookContact > > ( resolver - > { 
 + phoneBookProvider . loadPhoneBook ( contacts1 - > { 
 + contacts = contacts1 ; 
 + resolver . result ( contacts1 ) ; 
 + } ) ; 
 + } ) ; 
 + } else { 
 + return Promise . success ( contacts ) ; 
 } 
 - return storage ; 
 } 
 
 - protected void checkIsInPhoneBook ( UserVM userVM ) { 
 + protected Promise < Void > checkIsInPhoneBook ( UserVM userVM ) { 
 + 
 if ( ! config ( ) . isEnableOnClientPrivacy ( ) ) { 
 - return ; 
 + return Promise . success ( null ) ; 
 } 
 
 - BookImportStorage storage = getBookImportStorage ( ) ; 
 - if ( storage = = null ) { 
 - return ; 
 - } 
 + return getPhoneBook ( ) . flatMap ( phoneBookContacts - > new Promise < Void > ( resolver - > { 
 + ArrayListUserPhone userPhones = userVM . getPhones ( ) . get ( ) ; 
 + ArrayListUserEmail userEmails = userVM . getEmails ( ) . get ( ) ; 
 + 
 + if ( ! userVM . isInPhoneBook ( ) . get ( ) ) { 
 + outer : 
 + for ( UserPhone phone : userPhones ) { 
 
 - ArrayListUserPhone userPhones = userVM . getPhones ( ) . get ( ) ; 
 - ArrayListUserEmail userEmails = userVM . getEmails ( ) . get ( ) ; 
 + for ( PhoneBookContact phoneBookContact : phoneBookContacts ) { 
 + 
 + for ( PhoneBookPhone phone1 : phoneBookContact . getPhones ( ) ) { 
 + if ( phone . getPhone ( ) = = phone1 . getNumber ( ) ) { 
 + userVM . isInPhoneBook ( ) . change ( true ) ; 
 + context ( ) . getContactsModule ( ) . markInPhoneBook ( userVM . getId ( ) ) ; 
 + break outer ; 
 + } 
 + } 
 + } 
 
 - if ( ! userVM . isInPhoneBook ( ) . get ( ) ) { 
 - for ( UserPhone phone : userPhones ) { 
 - if ( storage . isImported ( phone . getPhone ( ) ) ) { 
 - userVM . isInPhoneBook ( ) . change ( true ) ; 
 - context ( ) . getContactsModule ( ) . markInPhoneBook ( userVM . getId ( ) ) ; 
 - break ; 
 } 
 } 
 - } 
 
 - if ( ! userVM . isInPhoneBook ( ) . get ( ) ) { 
 - for ( UserEmail email : userEmails ) { 
 - if ( storage . isImported ( email . getEmail ( ) ) ) { 
 - userVM . isInPhoneBook ( ) . change ( true ) ; 
 - context ( ) . getContactsModule ( ) . markInPhoneBook ( userVM . getId ( ) ) ; 
 - break ; 
 + if ( ! userVM . isInPhoneBook ( ) . get ( ) ) { 
 + outer : 
 + for ( UserEmail email : userEmails ) { 
 + 
 + for ( PhoneBookContact phoneBookContact : phoneBookContacts ) { 
 + 
 + for ( PhoneBookEmail email1 : phoneBookContact . getEmails ( ) ) { 
 + if ( email . getEmail ( ) . equals ( email1 . getEmail ( ) ) ) { 
 + userVM . isInPhoneBook ( ) . change ( true ) ; 
 + context ( ) . getContactsModule ( ) . markInPhoneBook ( userVM . getId ( ) ) ; 
 + break outer ; 
 + } 
 + } 
 + } 
 + 
 } 
 } 
 - } 
 + 
 + resolver . result ( null ) ; 
 + } ) ) ; 
 + 
 }
