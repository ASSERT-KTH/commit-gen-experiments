BLEU SCORE: 0.44632361378533286

TEST MSG: feat ( core ) : More flexible key stretching
GENERATED MSG: feat ( core ) : sendCallSignal

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedMsgActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedMsgActor . java < nl > index 37f59bc . . f5dbec6 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedMsgActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedMsgActor . java < nl > @ @ - 71 , 6 + 71 , 13 @ @ public class EncryptedMsgActor extends ModuleActor { < nl > @ Override < nl > public void onResult ( Object obj ) { < nl > Log . d ( TAG , " onDecrypt : onResult in " + ( Runtime . getActorTime ( ) - start ) + " ms " ) ; < nl > + EncryptedPeerActor . DecryptBoxResponse re = ( EncryptedPeerActor . DecryptBoxResponse ) obj ; < nl > + try { < nl > + ApiMessage message = ApiMessage . fromBytes ( re . getData ( ) ) ; < nl > + Log . d ( TAG , " onDecrypt : onResult " + message ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > } < nl > < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java < nl > index 743d895 . . c6de20d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java < nl > @ @ - 235 , 12 + 235 , 11 @ @ public class EncryptedPeerActor extends ModuleActor { < nl > public DecryptBoxResponse apply ( EncryptedSessionActor . DecryptedPackage decryptedPackage ) { < nl > byte [ ] encData ; < nl > try { < nl > - byte [ ] encKeyExtended = decryptedPackage . getData ( ) . length = = 128 < nl > + byte [ ] encKeyExtended = decryptedPackage . getData ( ) . length > = 128 < nl > ? decryptedPackage . getData ( ) < nl > : keyPrf . calculate ( decryptedPackage . getData ( ) , " ActorPackage " , 128 ) ; < nl > encData = ActorBox . openBox ( ByteStrings . intToBytes ( senderKeyGroup ) , encPackage , new ActorBoxKey ( encKeyExtended ) ) ; < nl > - ApiMessage message = ApiMessage . fromBytes ( encData ) ; < nl > - Log . d ( TAG , " Box open : " + message + " , size : " + encData . length ) ; < nl > + Log . d ( TAG , " Box size : " + encData . length ) ; < nl > } catch ( IOException e ) { < nl > e . printStackTrace ( ) ; < nl > throw new RuntimeException ( e ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index edfe8df . . 1ff74d7 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 981 , 6 + 981 , 10 @ @ public class Messenger { < nl > modules . getCallsModule ( ) . answerCall ( callId , callback ) ; < nl > } < nl > < nl > + public void sendCallSignal ( long callId , byte [ ] data ) { < nl > + modules . getCallsModule ( ) . sendSignal ( callId , data ) ; < nl > + } < nl > + < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Peer operations < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > index cd7371f . . 75c963a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > @ @ - 7 , 6 + 7 , 7 @ @ import im . actor . core . api . ApiPeerType ; < nl > import im . actor . core . api . rpc . RequestCallInProgress ; < nl > import im . actor . core . api . rpc . RequestDoCall ; < nl > import im . actor . core . api . rpc . RequestEndCall ; < nl > + import im . actor . core . api . rpc . RequestSendCallSignal ; < nl > import im . actor . core . api . rpc . RequestSubscribeToCalls ; < nl > import im . actor . core . api . rpc . ResponseDoCall ; < nl > import im . actor . core . api . updates . UpdateIncomingCall ; < nl > @ @ - 120 , 6 + 121 , 10 @ @ public class CallsModule extends AbsModule { < nl > } < nl > } < nl > < nl > + public void sendSignal ( long callId , byte [ ] data ) { < nl > + request ( new RequestSendCallSignal ( callId , data ) ) ; < nl > + } < nl > + < nl > public void onSignal ( long callId , byte [ ] data ) { < nl > ActorRef call = calls . get ( callId ) ; < nl > if ( call ! = null ) {

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedMsgActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedMsgActor . java 
 index 37f59bc . . f5dbec6 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedMsgActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedMsgActor . java 
 @ @ - 71 , 6 + 71 , 13 @ @ public class EncryptedMsgActor extends ModuleActor { 
 @ Override 
 public void onResult ( Object obj ) { 
 Log . d ( TAG , " onDecrypt : onResult in " + ( Runtime . getActorTime ( ) - start ) + " ms " ) ; 
 + EncryptedPeerActor . DecryptBoxResponse re = ( EncryptedPeerActor . DecryptBoxResponse ) obj ; 
 + try { 
 + ApiMessage message = ApiMessage . fromBytes ( re . getData ( ) ) ; 
 + Log . d ( TAG , " onDecrypt : onResult " + message ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 } 
 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java 
 index 743d895 . . c6de20d 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java 
 @ @ - 235 , 12 + 235 , 11 @ @ public class EncryptedPeerActor extends ModuleActor { 
 public DecryptBoxResponse apply ( EncryptedSessionActor . DecryptedPackage decryptedPackage ) { 
 byte [ ] encData ; 
 try { 
 - byte [ ] encKeyExtended = decryptedPackage . getData ( ) . length = = 128 
 + byte [ ] encKeyExtended = decryptedPackage . getData ( ) . length > = 128 
 ? decryptedPackage . getData ( ) 
 : keyPrf . calculate ( decryptedPackage . getData ( ) , " ActorPackage " , 128 ) ; 
 encData = ActorBox . openBox ( ByteStrings . intToBytes ( senderKeyGroup ) , encPackage , new ActorBoxKey ( encKeyExtended ) ) ; 
 - ApiMessage message = ApiMessage . fromBytes ( encData ) ; 
 - Log . d ( TAG , " Box open : " + message + " , size : " + encData . length ) ; 
 + Log . d ( TAG , " Box size : " + encData . length ) ; 
 } catch ( IOException e ) { 
 e . printStackTrace ( ) ; 
 throw new RuntimeException ( e ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index edfe8df . . 1ff74d7 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 981 , 6 + 981 , 10 @ @ public class Messenger { 
 modules . getCallsModule ( ) . answerCall ( callId , callback ) ; 
 } 
 
 + public void sendCallSignal ( long callId , byte [ ] data ) { 
 + modules . getCallsModule ( ) . sendSignal ( callId , data ) ; 
 + } 
 + 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Peer operations 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 index cd7371f . . 75c963a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 @ @ - 7 , 6 + 7 , 7 @ @ import im . actor . core . api . ApiPeerType ; 
 import im . actor . core . api . rpc . RequestCallInProgress ; 
 import im . actor . core . api . rpc . RequestDoCall ; 
 import im . actor . core . api . rpc . RequestEndCall ; 
 + import im . actor . core . api . rpc . RequestSendCallSignal ; 
 import im . actor . core . api . rpc . RequestSubscribeToCalls ; 
 import im . actor . core . api . rpc . ResponseDoCall ; 
 import im . actor . core . api . updates . UpdateIncomingCall ; 
 @ @ - 120 , 6 + 121 , 10 @ @ public class CallsModule extends AbsModule { 
 } 
 } 
 
 + public void sendSignal ( long callId , byte [ ] data ) { 
 + request ( new RequestSendCallSignal ( callId , data ) ) ; 
 + } 
 + 
 public void onSignal ( long callId , byte [ ] data ) { 
 ActorRef call = calls . get ( callId ) ; 
 if ( call ! = null ) {
