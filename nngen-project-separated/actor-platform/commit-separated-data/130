BLEU SCORE: 0.024178089855902942

TEST MSG: fix ( server : rpc ) : respond with missing key group instead of key group id
GENERATED MSG: Merge branch ' master ' of https : / / github . com / actorapp / actor - platform

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala < nl > index 8393bd8 . . 3a68237 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala < nl > @ @ - 6 , 7 + 6 , 6 @ @ import akka . http . scaladsl . util . FastFuture < nl > import cats . std . all . _ < nl > import cats . syntax . all . _ < nl > import cats . data . { Xor , XorT } < nl > - import com . google . protobuf . wrappers . Int32Value < nl > import im . actor . api . rpc . encryption . _ < nl > import im . actor . cats . dbio . _ < nl > import im . actor . server . db . DbExtension < nl > @ @ - 212 , 8 + 211 , 8 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { < nl > def checkBox ( < nl > box : ApiEncryptedBox , < nl > ignoredKeyGroups : Map [ Int , Set [ Int ] ] < nl > - ) : Future [ Either [ ( Vector [ ApiKeyGroupId ] , Vector [ ApiKeyGroupId ] ) , Map [ Int , Vector [ ( Long , ApiEncryptedBox ) ] ] ] ] = { < nl > - val userChecksFu : Iterable [ Future [ ( Seq [ ApiKeyGroupId ] , Seq [ ApiKeyGroupId ] , Seq [ EncryptionKeyGroup ] ) ] ] = < nl > + ) : Future [ Either [ ( Vector [ ApiKeyGroupHolder ] , Vector [ ApiKeyGroupId ] ) , Map [ Int , Vector [ ( Long , ApiEncryptedBox ) ] ] ] ] = { < nl > + val userChecksFu : Iterable [ Future [ ( Seq [ ApiKeyGroupHolder ] , Seq [ ApiKeyGroupId ] , Seq [ EncryptionKeyGroup ] ) ] ] = < nl > box . keys . groupBy ( _ . usersId ) map { < nl > case ( userId , keys ) ⇒ < nl > db . run ( EncryptionKeyGroupRepo . fetch ( userId ) ) map { kgs ⇒ < nl > @ @ - 223 , 7 + 222 , 7 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { < nl > val missingKgs = kgs . view < nl > . filterNot ( kg ⇒ keys . exists ( _ . keyGroupId = = kg . id ) ) < nl > . filterNot ( kg ⇒ ignored . contains ( kg . id ) ) < nl > - . map ( kg ⇒ ApiKeyGroupId ( userId , kg . id ) ) < nl > + . flatMap ( kg ⇒ toApi ( kg ) . toOption map ( ApiKeyGroupHolder ( userId , _ ) ) ) < nl > . force < nl > < nl > / / kgs presented in box but deleted by receiver < nl > @ @ - 237 , 7 + 236 , 7 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { < nl > < nl > Future . sequence ( userChecksFu ) map { checks ⇒ < nl > val ( missing , obs , kgs ) = < nl > - checks . foldLeft ( ( Vector . empty [ ApiKeyGroupId ] , Vector . empty [ ApiKeyGroupId ] , Vector . empty [ EncryptionKeyGroup ] ) ) { < nl > + checks . foldLeft ( ( Vector . empty [ ApiKeyGroupHolder ] , Vector . empty [ ApiKeyGroupId ] , Vector . empty [ EncryptionKeyGroup ] ) ) { < nl > case ( ( macc , oacc , kgacc ) , ( m , o , kg ) ) ⇒ < nl > ( macc + + m , oacc + + o , kgacc + + kg ) < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > index 37be9d9 . . 24fe5a5 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > @ @ - 121 , 8 + 121 , 6 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti < nl > encExt . checkBox ( encryptedBox , ignoredKeyGroups . groupBy ( _ . userId ) . mapValues ( _ . map ( _ . keyGroupId ) . toSet ) ) flatMap { < nl > case Left ( ( missing , obs ) ) ⇒ < nl > FastFuture . successful ( Ok ( ResponseSendEncryptedPackage ( < nl > - seq = None , < nl > - state = None , < nl > date = None , < nl > obsoleteKeyGroups = obs , < nl > missedKeyGroups = missing < nl > @ @ - 159 , 8 + 157 , 6 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti < nl > case None ⇒ updExt . deliverClientUpdate ( client . userId , client . authId , UpdateEmptyUpdate ) < nl > } < nl > } yield Ok ( ResponseSendEncryptedPackage ( < nl > - seq = Some ( seqState . seq ) , < nl > - state = Some ( seqState . state . toByteArray ) , < nl > date = Some ( date ) , < nl > Vector . empty , < nl > Vector . empty
NEAREST DIFF (one line): diff - - git a / README . MD b / README . MD < nl > index 8c53a78 . . 061c271 100644 < nl > - - - a / README . MD < nl > + + + b / README . MD < nl > @ @ - 9 , 6 + 9 , 13 @ @ Actor Platform is good for improving enterprise communications , building a messa < nl > < nl > This repository contains all source code of platform whereby you can start your server or / and build your iOS , Android , Web , or Desktop applications . < nl > < nl > + # Currently available clients < nl > + * Android 4 . 0 . 3 + < nl > + * iPhone / iPad 7 . 0 + < nl > + * Web < nl > + < nl > + It is very easy to [ implement your own ] ( http : / / actor . readme . io / docs / apps ) . < nl > + < nl > # Installation < nl > < nl > Building mobile messaging application is a bit complex procedure and you need certain amount of preparations : have developer accounts in Google , Apple , have SSL certificates for your servers , integrate server with various services like SMS gate , push systems , etc . . .

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala 
 index 8393bd8 . . 3a68237 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / encryption / EncryptionExtension . scala 
 @ @ - 6 , 7 + 6 , 6 @ @ import akka . http . scaladsl . util . FastFuture 
 import cats . std . all . _ 
 import cats . syntax . all . _ 
 import cats . data . { Xor , XorT } 
 - import com . google . protobuf . wrappers . Int32Value 
 import im . actor . api . rpc . encryption . _ 
 import im . actor . cats . dbio . _ 
 import im . actor . server . db . DbExtension 
 @ @ - 212 , 8 + 211 , 8 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { 
 def checkBox ( 
 box : ApiEncryptedBox , 
 ignoredKeyGroups : Map [ Int , Set [ Int ] ] 
 - ) : Future [ Either [ ( Vector [ ApiKeyGroupId ] , Vector [ ApiKeyGroupId ] ) , Map [ Int , Vector [ ( Long , ApiEncryptedBox ) ] ] ] ] = { 
 - val userChecksFu : Iterable [ Future [ ( Seq [ ApiKeyGroupId ] , Seq [ ApiKeyGroupId ] , Seq [ EncryptionKeyGroup ] ) ] ] = 
 + ) : Future [ Either [ ( Vector [ ApiKeyGroupHolder ] , Vector [ ApiKeyGroupId ] ) , Map [ Int , Vector [ ( Long , ApiEncryptedBox ) ] ] ] ] = { 
 + val userChecksFu : Iterable [ Future [ ( Seq [ ApiKeyGroupHolder ] , Seq [ ApiKeyGroupId ] , Seq [ EncryptionKeyGroup ] ) ] ] = 
 box . keys . groupBy ( _ . usersId ) map { 
 case ( userId , keys ) ⇒ 
 db . run ( EncryptionKeyGroupRepo . fetch ( userId ) ) map { kgs ⇒ 
 @ @ - 223 , 7 + 222 , 7 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { 
 val missingKgs = kgs . view 
 . filterNot ( kg ⇒ keys . exists ( _ . keyGroupId = = kg . id ) ) 
 . filterNot ( kg ⇒ ignored . contains ( kg . id ) ) 
 - . map ( kg ⇒ ApiKeyGroupId ( userId , kg . id ) ) 
 + . flatMap ( kg ⇒ toApi ( kg ) . toOption map ( ApiKeyGroupHolder ( userId , _ ) ) ) 
 . force 
 
 / / kgs presented in box but deleted by receiver 
 @ @ - 237 , 7 + 236 , 7 @ @ final class EncryptionExtension ( system : ActorSystem ) extends Extension { 
 
 Future . sequence ( userChecksFu ) map { checks ⇒ 
 val ( missing , obs , kgs ) = 
 - checks . foldLeft ( ( Vector . empty [ ApiKeyGroupId ] , Vector . empty [ ApiKeyGroupId ] , Vector . empty [ EncryptionKeyGroup ] ) ) { 
 + checks . foldLeft ( ( Vector . empty [ ApiKeyGroupHolder ] , Vector . empty [ ApiKeyGroupId ] , Vector . empty [ EncryptionKeyGroup ] ) ) { 
 case ( ( macc , oacc , kgacc ) , ( m , o , kg ) ) ⇒ 
 ( macc + + m , oacc + + o , kgacc + + kg ) 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 index 37be9d9 . . 24fe5a5 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 @ @ - 121 , 8 + 121 , 6 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti 
 encExt . checkBox ( encryptedBox , ignoredKeyGroups . groupBy ( _ . userId ) . mapValues ( _ . map ( _ . keyGroupId ) . toSet ) ) flatMap { 
 case Left ( ( missing , obs ) ) ⇒ 
 FastFuture . successful ( Ok ( ResponseSendEncryptedPackage ( 
 - seq = None , 
 - state = None , 
 date = None , 
 obsoleteKeyGroups = obs , 
 missedKeyGroups = missing 
 @ @ - 159 , 8 + 157 , 6 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti 
 case None ⇒ updExt . deliverClientUpdate ( client . userId , client . authId , UpdateEmptyUpdate ) 
 } 
 } yield Ok ( ResponseSendEncryptedPackage ( 
 - seq = Some ( seqState . seq ) , 
 - state = Some ( seqState . state . toByteArray ) , 
 date = Some ( date ) , 
 Vector . empty , 
 Vector . empty

NEAREST DIFF:
diff - - git a / README . MD b / README . MD 
 index 8c53a78 . . 061c271 100644 
 - - - a / README . MD 
 + + + b / README . MD 
 @ @ - 9 , 6 + 9 , 13 @ @ Actor Platform is good for improving enterprise communications , building a messa 
 
 This repository contains all source code of platform whereby you can start your server or / and build your iOS , Android , Web , or Desktop applications . 
 
 + # Currently available clients 
 + * Android 4 . 0 . 3 + 
 + * iPhone / iPad 7 . 0 + 
 + * Web 
 + 
 + It is very easy to [ implement your own ] ( http : / / actor . readme . io / docs / apps ) . 
 + 
 # Installation 
 
 Building mobile messaging application is a bit complex procedure and you need certain amount of preparations : have developer accounts in Google , Apple , have SSL certificates for your servers , integrate server with various services like SMS gate , push systems , etc . . .
