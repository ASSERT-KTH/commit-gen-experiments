BLEU SCORE: 0.16784459625186196

TEST MSG: feat ( core + android ) : process stickers updates
GENERATED MSG: fix ( android ) : save all packs using KeyValueStorage

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > index 8234e97 . . 5cd1832 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > @ @ - 25 , 9 + 25 , 9 @ @ public class Application extends ActorSDKApplication { < nl > ActorSDK . sharedActor ( ) . setDelegate ( new ActorSDKDelegate ( ) ) ; < nl > ActorSDK . sharedActor ( ) . setPushId ( 209133700967L ) ; < nl > < nl > - / / ArrayList < String > endpoints = new ArrayList < String > ( ) ; < nl > - / / endpoints . add ( " tcp : / / x2015contaca2020trixxl . com : 9070 " ) ; < nl > - / / ActorSDK . sharedActor ( ) . setEndpoints ( endpoints ) ; < nl > + ArrayList < String > endpoints = new ArrayList < String > ( ) ; < nl > + endpoints . add ( " tcp : / / x2015contaca2020trixxl . com : 9070 " ) ; < nl > + ActorSDK . sharedActor ( ) . setEndpoints ( endpoints ) ; < nl > < nl > ActorStyle style = ActorSDK . sharedActor ( ) . style ; < nl > style . setMainColor ( Color . parseColor ( " # 529a88 " ) ) ; < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / BaseActivity . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / BaseActivity . java < nl > index e40b240 . . d68b390 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / BaseActivity . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / BaseActivity . java < nl > @ @ - 88 , 6 + 88 , 10 @ @ public class BaseActivity extends AppCompatActivity { < nl > BINDER . bind ( value , listener ) ; < nl > } < nl > < nl > + public < T > void bind ( Value < T > value , ValueChangedListener < T > listener , boolean notify ) { < nl > + BINDER . bind ( value , listener , notify ) ; < nl > + } < nl > + < nl > public < T , V > void bind ( final Value < T > value1 , final Value < V > value2 , < nl > final ValueDoubleChangedListener < T , V > listener ) { < nl > BINDER . bind ( value1 , value2 , listener ) ; < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / fragment / ActorBinder . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / fragment / ActorBinder . java < nl > index ba8f1cb . . 27db025 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / fragment / ActorBinder . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / fragment / ActorBinder . java < nl > @ @ - 230 , 6 + 230 , 13 @ @ public class ActorBinder { < nl > return b ; < nl > } < nl > < nl > + public < T > Binding bind ( Value < T > value , ValueChangedListener < T > listener , boolean notify ) { < nl > + value . subscribe ( listener , notify ) ; < nl > + Binding b = new Binding ( value , listener ) ; < nl > + bindings . add ( b ) ; < nl > + return b ; < nl > + } < nl > + < nl > public < T > void bind ( Value < T > value , boolean notify , ValueChangedListener < T > listener ) { < nl > value . subscribe ( listener , notify ) ; < nl > bindings . add ( new Binding ( value , listener ) ) ; < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / stickers / StickerAdapter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / stickers / StickerAdapter . java < nl > index 7ea3e82 . . 550940a 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / stickers / StickerAdapter . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / stickers / StickerAdapter . java < nl > @ @ - 76 , 8 + 76 , 6 @ @ class StickerAdapter extends HolderAdapter < StickerLine > { < nl > } < nl > } ) ; < nl > < nl > - buildStickerLines ( scrollTo ) ; < nl > - < nl > < nl > } < nl > < nl > @ @ - 88 , 14 + 86 , 15 @ @ class StickerAdapter extends HolderAdapter < StickerLine > { < nl > < nl > / / Add pack switch buttons < nl > int packCount = 0 ; < nl > + totalLines = 0 ; < nl > for ( final StickerPackVM pack : packs . get ( ) ) { < nl > ( ( BaseActivity ) context ) . bind ( pack . getStickers ( ) , new ValueChangedListener < ArrayList < Sticker > > ( ) { < nl > @ Override < nl > public void onChanged ( ArrayList < Sticker > val , Value < ArrayList < Sticker > > valueModel ) { < nl > - / / buildStickerLines ( scrollTo ) ; < nl > - / / notifyDataSetChanged ( ) ; < nl > + buildStickerLines ( scrollTo ) ; < nl > + notifyDataSetChanged ( ) ; < nl > } < nl > - } ) ; < nl > + } , false ) ; < nl > if ( pack . getStickers ( ) . get ( ) . size ( ) < 1 ) { < nl > continue ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / StickersModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / StickersModule . java < nl > index 5d7a208 . . 1ab5287 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / StickersModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / StickersModule . java < nl > @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . core . api . rpc . RequestLoadOwnStickers ; < nl > import im . actor . core . api . rpc . ResponseLoadOwnStickers ; < nl > import im . actor . core . api . updates . UpdateOwnStickersChanged ; < nl > import im . actor . core . api . updates . UpdateStickerCollectionsChanged ; < nl > + import im . actor . core . entity . content . internal . Sticker ; < nl > import im . actor . core . entity . content . internal . StickersPack ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > @ @ - 39 , 11 + 40 , 12 @ @ public class StickersModule extends AbsModule { < nl > public StickersModule ( ModuleContext context ) { < nl > super ( context ) ; < nl > this . stickerPacksList = Storage . createKeyValue ( STORAGE _ STICKER _ ALL _ PACKS ) ; < nl > - stickerPacks = new ValueModel < ArrayList < StickerPackVM > > ( " sticker _ packs _ vms " , buildStickerPacks ( ) ) ; < nl > - < nl > + stickerPacks = new ValueModel < ArrayList < StickerPackVM > > ( " sticker _ packs _ vms " , new ArrayList < StickerPackVM > ( ) ) ; < nl > + stickerPacks . change ( buildStickerPacks ( ) ) ; < nl > context ( ) . getEvents ( ) . subscribe ( new BusSubscriber ( ) { < nl > @ Override < nl > public void onBusEvent ( Event event ) { < nl > + < nl > stickerPacks . change ( buildStickerPacks ( ) ) ; < nl > } < nl > } , " sticker _ collections _ changed " ) ; < nl > @ @ - 70 , 20 + 72 , 34 @ @ public class StickersModule extends AbsModule { < nl > } < nl > < nl > private ArrayList < StickerPackVM > buildStickerPacks ( ) { < nl > - ArrayList < StickerPackVM > vms = new ArrayList < StickerPackVM > ( ) ; < nl > < nl > + ArrayList < StickerPackVM > vms = stickerPacks . get ( ) ; < nl > + < nl > + ArrayList < StickerPackVM > remove = new ArrayList < StickerPackVM > ( vms ) ; < nl > try { < nl > UpdateOwnStickersChanged update = new UpdateOwnStickersChanged ( ) ; < nl > Bser . parse ( update , stickerPacksList . loadItem ( 0 ) ) ; < nl > < nl > + boolean add ; < nl > for ( ApiStickerCollection apiCollection : update . getCollections ( ) ) { < nl > - vms . add ( new StickerPackVM ( new StickersPack ( apiCollection ) ) ) ; < nl > + add = true ; < nl > + for ( StickerPackVM existingVM : vms ) { < nl > + if ( existingVM . getId ( ) = = apiCollection . getId ( ) ) { < nl > + existingVM . getStickers ( ) . change ( ( ArrayList < Sticker > ) new StickersPack ( apiCollection ) . getStickers ( ) ) ; < nl > + remove . remove ( existingVM ) ; < nl > + add = false ; < nl > + break ; < nl > + } < nl > + } < nl > + if ( add ) { < nl > + vms . add ( new StickerPackVM ( new StickersPack ( apiCollection ) ) ) ; < nl > + } < nl > } < nl > + < nl > + vms . removeAll ( remove ) ; < nl > } catch ( Exception e ) { < nl > e . printStackTrace ( ) ; < nl > } < nl > - < nl > - < nl > return vms ; < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / StickersProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / StickersProcessor . java < nl > index 0f56a49 . . d8ed883 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / StickersProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / StickersProcessor . java < nl > @ @ - 4 , 6 + 4 , 7 @ @ < nl > < nl > package im . actor . core . modules . updates ; < nl > < nl > + import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > import java . util . List ; < nl > < nl > @ @ - 12 , 6 + 13 , 7 @ @ import im . actor . core . api . updates . UpdateOwnStickersChanged ; < nl > import im . actor . core . entity . content . internal . StickersPack ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . runtime . bser . Bser ; < nl > import im . actor . runtime . eventbus . Event ; < nl > < nl > public class StickersProcessor extends AbsModule { < nl > @ @ - 31 , 21 + 33 , 35 @ @ public class StickersProcessor extends AbsModule { < nl > } ) ; < nl > } < nl > < nl > - / / public void onStickerCollectionsChanged ( List < ApiStickerCollection > updated ) { < nl > - / / ArrayList < StickersPack > add = new ArrayList < StickersPack > ( ) ; < nl > - / / for ( ApiStickerCollection pack : updated ) { < nl > - / / StickersPack p = stickerPacksStorage ( ) . getValue ( pack . getId ( ) ) ; < nl > - / / if ( p ! = null ) { < nl > - / / add . add ( new StickersPack ( pack ) ) ; < nl > - / / stickerPacksStorage ( ) . addOrUpdateItem ( p . updateStickers ( pack . getStickers ( ) ) ) ; < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / if ( add . size ( ) > 0 ) { < nl > - / / stickerPacksList ( ) . addOrUpdateItems ( add ) ; < nl > - / / < nl > - / / } < nl > - / / < nl > - / / < nl > - / / } < nl > + public void onStickerCollectionsChanged ( List < ApiStickerCollection > updated ) { < nl > + UpdateOwnStickersChanged old = new UpdateOwnStickersChanged ( ) ; < nl > + try { < nl > + Bser . parse ( old , stickerPacksStorage ( ) . loadItem ( 0 ) ) ; < nl > + List < ApiStickerCollection > oldPacks = old . getCollections ( ) ; < nl > + boolean needUpdate = false ; < nl > + for ( ApiStickerCollection oldPack : oldPacks ) { < nl > + for ( ApiStickerCollection newPack : updated ) { < nl > + if ( oldPack . getId ( ) = = newPack . getId ( ) ) { < nl > + needUpdate = true ; < nl > + oldPacks . remove ( oldPack ) ; < nl > + oldPacks . add ( newPack ) ; < nl > + } < nl > + < nl > + } < nl > + } < nl > + if ( needUpdate ) { < nl > + stickerPacksStorage ( ) . addOrUpdateItem ( 0 , new UpdateOwnStickersChanged ( oldPacks ) . toByteArray ( ) ) ; < nl > + context ( ) . getEvents ( ) . post ( new Event ( ) { < nl > + @ Override < nl > + public String getType ( ) { < nl > + return " sticker _ collections _ changed " ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + } catch ( Exception e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > index c0bbb97 . . 7c61f68 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > @ @ - 317 , 7 + 317 , 7 @ @ public class UpdateProcessor extends AbsModule { < nl > } else if ( update instanceof UpdateOwnStickersChanged ) { < nl > stickersProcessor . onOwnStickerCollectionsChanged ( ( ( UpdateOwnStickersChanged ) update ) . getCollections ( ) ) ; < nl > } else if ( update instanceof UpdateStickerCollectionsChanged ) { < nl > - / / stickersProcessor . onStickerCollectionsChanged ( ( ( UpdateStickerCollectionsChanged ) update ) . getCollections ( ) ) ; < nl > + stickersProcessor . onStickerCollectionsChanged ( ( ( UpdateStickerCollectionsChanged ) update ) . getCollections ( ) ) ; < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > index 5cd1832 . . 8234e97 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > @ @ - 25 , 9 + 25 , 9 @ @ public class Application extends ActorSDKApplication { < nl > ActorSDK . sharedActor ( ) . setDelegate ( new ActorSDKDelegate ( ) ) ; < nl > ActorSDK . sharedActor ( ) . setPushId ( 209133700967L ) ; < nl > < nl > - ArrayList < String > endpoints = new ArrayList < String > ( ) ; < nl > - endpoints . add ( " tcp : / / x2015contaca2020trixxl . com : 9070 " ) ; < nl > - ActorSDK . sharedActor ( ) . setEndpoints ( endpoints ) ; < nl > + / / ArrayList < String > endpoints = new ArrayList < String > ( ) ; < nl > + / / endpoints . add ( " tcp : / / x2015contaca2020trixxl . com : 9070 " ) ; < nl > + / / ActorSDK . sharedActor ( ) . setEndpoints ( endpoints ) ; < nl > < nl > ActorStyle style = ActorSDK . sharedActor ( ) . style ; < nl > style . setMainColor ( Color . parseColor ( " # 529a88 " ) ) ; < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / stickers / StickerAdapter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / stickers / StickerAdapter . java < nl > index 5197c64 . . 7ea3e82 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / stickers / StickerAdapter . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / stickers / StickerAdapter . java < nl > @ @ - 92 , 8 + 92 , 8 @ @ class StickerAdapter extends HolderAdapter < StickerLine > { < nl > ( ( BaseActivity ) context ) . bind ( pack . getStickers ( ) , new ValueChangedListener < ArrayList < Sticker > > ( ) { < nl > @ Override < nl > public void onChanged ( ArrayList < Sticker > val , Value < ArrayList < Sticker > > valueModel ) { < nl > - buildStickerLines ( scrollTo ) ; < nl > - notifyDataSetChanged ( ) ; < nl > + / / buildStickerLines ( scrollTo ) ; < nl > + / / notifyDataSetChanged ( ) ; < nl > } < nl > } ) ; < nl > if ( pack . getStickers ( ) . get ( ) . size ( ) < 1 ) { < nl > @ @ - 196 , 35 + 196 , 40 @ @ class StickerAdapter extends HolderAdapter < StickerLine > { < nl > < nl > @ Override < nl > public void bind ( StickerLine data , int position , Context context ) { < nl > - ll . removeAllViews ( ) ; < nl > - ll . setTag ( TAG _ KEY , data . getPackCount ( ) ) ; < nl > - for ( final Sticker s : data . getLine ( ) ) { < nl > - StickerView sv ; < nl > - if ( s ! = null & & s . getFileReference256 ( ) ! = null ) { < nl > - < nl > - sv = stickersCache . get ( s . getFileReference256 ( ) . getFileId ( ) ) ; < nl > - if ( sv = = null ) { < nl > - sv = new StickerView ( context ) ; < nl > - sv . setPadding ( STICKER _ PADDING , STICKER _ PADDING , STICKER _ PADDING , STICKER _ PADDING ) ; < nl > - sv . bind ( s . getFileReference256 ( ) , STICKER _ SIZE ) ; < nl > - stickersCache . put ( s . getFileReference256 ( ) . getFileId ( ) , sv ) ; < nl > - < nl > - } else if ( sv . isLoaded ( ) ) { < nl > - if ( sv . getParent ( ) ! = null ) { < nl > - ( ( LinearLayout ) sv . getParent ( ) ) . removeView ( sv ) ; < nl > + try { < nl > + ll . removeAllViews ( ) ; < nl > + ll . setTag ( TAG _ KEY , data . getPackCount ( ) ) ; < nl > + for ( final Sticker s : data . getLine ( ) ) { < nl > + StickerView sv ; < nl > + if ( s ! = null & & s . getFileReference256 ( ) ! = null ) { < nl > + < nl > + sv = stickersCache . get ( s . getFileReference256 ( ) . getFileId ( ) ) ; < nl > + if ( sv = = null ) { < nl > + sv = new StickerView ( context ) ; < nl > + sv . setPadding ( STICKER _ PADDING , STICKER _ PADDING , STICKER _ PADDING , STICKER _ PADDING ) ; < nl > + sv . bind ( s . getFileReference256 ( ) , STICKER _ SIZE ) ; < nl > + stickersCache . put ( s . getFileReference256 ( ) . getFileId ( ) , sv ) ; < nl > + < nl > + } else if ( sv . isLoaded ( ) ) { < nl > + if ( sv . getParent ( ) ! = null ) { < nl > + ( ( LinearLayout ) sv . getParent ( ) ) . removeView ( sv ) ; < nl > + } < nl > + sv . shortenFade ( ) ; < nl > } < nl > - sv . shortenFade ( ) ; < nl > - } < nl > < nl > - sv . setOnClickListener ( new View . OnClickListener ( ) { < nl > - @ Override < nl > - public void onClick ( View v ) { < nl > - keyboard . onStickerClicked ( s ) ; < nl > - } < nl > - } ) ; < nl > + sv . setOnClickListener ( new View . OnClickListener ( ) { < nl > + @ Override < nl > + public void onClick ( View v ) { < nl > + keyboard . onStickerClicked ( s ) ; < nl > + } < nl > + } ) ; < nl > < nl > - ll . addView ( sv , stikerlp ) ; < nl > + ll . addView ( sv , stikerlp ) ; < nl > + } < nl > } < nl > + < nl > + } catch ( Exception e ) { < nl > + e . printStackTrace ( ) ; < nl > } < nl > < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > index 20ce4b4 . . fa94c49 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > @ @ - 11 , 14 + 11 , 13 @ @ import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerType ; < nl > import im . actor . core . entity . User ; < nl > - import im . actor . core . entity . content . internal . StickersPack ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > import im . actor . core . network . parser . Request ; < nl > import im . actor . core . network . parser . Response ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . storage . KeyValueEngine ; < nl > - import im . actor . runtime . storage . ListEngine ; < nl > + import im . actor . runtime . storage . KeyValueStorage ; < nl > import im . actor . runtime . storage . PreferencesStorage ; < nl > < nl > public abstract class AbsModule { < nl > @ @ - 27 , 6 + 26 , 7 @ @ public abstract class AbsModule { < nl > public static final String STORAGE _ DIALOGS _ DESC = " dialogs _ desc " ; < nl > public static final String STORAGE _ USERS = " users " ; < nl > public static final String STORAGE _ STICKER _ PACKS = " sticker _ packs " ; < nl > + public static final String STORAGE _ STICKER _ ALL _ PACKS = " sticker _ all _ packs " ; < nl > public static final String STORAGE _ GROUPS = " groups " ; < nl > public static final String STORAGE _ DOWNLOADS = " downloads " ; < nl > public static final String STORAGE _ CONTACTS = " contacts " ; < nl > @ @ - 120 , 12 + 120 , 8 @ @ public abstract class AbsModule { < nl > return context . getGroupsModule ( ) . getGroups ( ) ; < nl > } < nl > < nl > - public KeyValueEngine < StickersPack > stickerPacksKeyValue ( ) { < nl > - return context . getStickersModule ( ) . getStickerPacksKeyValue ( ) ; < nl > - } < nl > - < nl > - public ListEngine < StickersPack > stickerPacksList ( ) { < nl > - return context . getStickersModule ( ) . getStickerPacksList ( ) ; < nl > + public KeyValueStorage stickerPacksStorage ( ) { < nl > + return context . getStickersModule ( ) . getStickerPacksStorage ( ) ; < nl > } < nl > < nl > public ApiPeer buildApiPeer ( Peer peer ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / StickersModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / StickersModule . java < nl > index cb0c25f . . 5d7a208 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / StickersModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / StickersModule . java < nl > @ @ - 4 , 8 + 4 , 11 @ @ < nl > < nl > package im . actor . core . modules . internal ; < nl > < nl > + import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > + import java . util . List ; < nl > < nl > + import im . actor . core . api . ApiStickerCollection ; < nl > import im . actor . core . api . rpc . RequestLoadOwnStickers ; < nl > import im . actor . core . api . rpc . ResponseLoadOwnStickers ; < nl > import im . actor . core . api . updates . UpdateOwnStickersChanged ; < nl > @ @ - 18 , 25 + 21 , 24 @ @ import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > import im . actor . core . viewmodel . StickerPackVM ; < nl > import im . actor . runtime . Storage ; < nl > + import im . actor . runtime . bser . Bser ; < nl > import im . actor . runtime . eventbus . BusSubscriber ; < nl > import im . actor . runtime . eventbus . Event ; < nl > import im . actor . runtime . mvvm . MVVMCollection ; < nl > import im . actor . runtime . mvvm . ValueModel ; < nl > import im . actor . runtime . storage . KeyValueEngine ; < nl > + import im . actor . runtime . storage . KeyValueItem ; < nl > + import im . actor . runtime . storage . KeyValueStorage ; < nl > import im . actor . runtime . storage . ListEngine ; < nl > < nl > public class StickersModule extends AbsModule { < nl > - private ListEngine < StickersPack > stickerPacksList ; < nl > - private KeyValueEngine < StickersPack > stickerPacksKeyValue ; < nl > - private MVVMCollection < StickersPack , StickerPackVM > collection ; < nl > + private KeyValueStorage stickerPacksList ; < nl > private ValueModel < ArrayList < StickerPackVM > > stickerPacks ; < nl > < nl > < nl > public StickersModule ( ModuleContext context ) { < nl > super ( context ) ; < nl > - this . stickerPacksList = Storage . createList ( STORAGE _ STICKER _ PACKS , StickersPack . CREATOR ) ; < nl > - this . collection = Storage . createKeyValue ( STORAGE _ STICKER _ PACKS , StickerPackVM . CREATOR ( ) , StickersPack . CREATOR ) ; < nl > - this . stickerPacksKeyValue = collection . getEngine ( ) ; < nl > + this . stickerPacksList = Storage . createKeyValue ( STORAGE _ STICKER _ ALL _ PACKS ) ; < nl > stickerPacks = new ValueModel < ArrayList < StickerPackVM > > ( " sticker _ packs _ vms " , buildStickerPacks ( ) ) ; < nl > < nl > context ( ) . getEvents ( ) . subscribe ( new BusSubscriber ( ) { < nl > @ @ - 47 , 15 + 49 , 10 @ @ public class StickersModule extends AbsModule { < nl > } , " sticker _ collections _ changed " ) ; < nl > } < nl > < nl > - public ListEngine < StickersPack > getStickerPacksList ( ) { < nl > + public KeyValueStorage getStickerPacksStorage ( ) { < nl > return stickerPacksList ; < nl > } < nl > < nl > - public KeyValueEngine < StickersPack > getStickerPacksKeyValue ( ) { < nl > - return stickerPacksKeyValue ; < nl > - } < nl > - < nl > - < nl > public void loadStickers ( ) { < nl > request ( new RequestLoadOwnStickers ( ) , new RpcCallback < ResponseLoadOwnStickers > ( ) { < nl > @ Override < nl > @ @ - 74 , 7 + 71 , 19 @ @ public class StickersModule extends AbsModule { < nl > < nl > private ArrayList < StickerPackVM > buildStickerPacks ( ) { < nl > ArrayList < StickerPackVM > vms = new ArrayList < StickerPackVM > ( ) ; < nl > - stickerPacksList . < nl > + < nl > + try { < nl > + UpdateOwnStickersChanged update = new UpdateOwnStickersChanged ( ) ; < nl > + Bser . parse ( update , stickerPacksList . loadItem ( 0 ) ) ; < nl > + < nl > + for ( ApiStickerCollection apiCollection : update . getCollections ( ) ) { < nl > + vms . add ( new StickerPackVM ( new StickersPack ( apiCollection ) ) ) ; < nl > + } < nl > + } catch ( Exception e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + < nl > + < nl > return vms ; < nl > } < nl > < nl > @ @ - 83 , 6 + 92 , 8 @ @ public class StickersModule extends AbsModule { < nl > } < nl > < nl > public void resetModule ( ) { < nl > - stickerPacksKeyValue . clear ( ) ; < nl > + stickerPacksList . clear ( ) ; < nl > } < nl > + < nl > + < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / StickersProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / StickersProcessor . java < nl > index 29ebde3 . . 0f56a49 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / StickersProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / StickersProcessor . java < nl > @ @ - 8 , 7 + 8 , 7 @ @ import java . util . ArrayList ; < nl > import java . util . List ; < nl > < nl > import im . actor . core . api . ApiStickerCollection ; < nl > - import im . actor . core . entity . content . internal . Sticker ; < nl > + import im . actor . core . api . updates . UpdateOwnStickersChanged ; < nl > import im . actor . core . entity . content . internal . StickersPack ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > @ @ - 21 , 55 + 21 , 31 @ @ public class StickersProcessor extends AbsModule { < nl > } < nl > < nl > public void onOwnStickerCollectionsChanged ( List < ApiStickerCollection > updated ) { < nl > - ArrayList < StickersPack > add = new ArrayList < StickersPack > ( ) ; < nl > - ArrayList < StickersPack > remove = new ArrayList < StickersPack > ( ) ; < nl > - for ( int i = 0 ; i < stickerPacksList ( ) . getCount ( ) ; i + + ) { < nl > - remove . add ( stickerPacksList ( ) . getValue ( i ) ) ; < nl > - } < nl > - for ( ApiStickerCollection pack : updated ) { < nl > - add . add ( new StickersPack ( pack ) ) ; < nl > - } < nl > < nl > - boolean needrebuild = false ; < nl > - if ( add . size ( ) > 0 ) { < nl > - stickerPacksList ( ) . addOrUpdateItems ( add ) ; < nl > - stickerPacksKeyValue ( ) . addOrUpdateItems ( add ) ; < nl > - needrebuild = true ; < nl > - } < nl > - < nl > - if ( remove . removeAll ( add ) ) { < nl > - for ( StickersPack pack : remove ) { < nl > - stickerPacksList ( ) . removeItem ( pack . getEngineId ( ) ) ; < nl > - stickerPacksKeyValue ( ) . removeItem ( pack . getEngineId ( ) ) ; < nl > + stickerPacksStorage ( ) . addOrUpdateItem ( 0 , new UpdateOwnStickersChanged ( updated ) . toByteArray ( ) ) ; < nl > + context ( ) . getEvents ( ) . post ( new Event ( ) { < nl > + @ Override < nl > + public String getType ( ) { < nl > + return " sticker _ collections _ changed " ; < nl > } < nl > - needrebuild = true ; < nl > - } < nl > - < nl > - if ( needrebuild ) { < nl > - context ( ) . getEvents ( ) . post ( new Event ( ) { < nl > - @ Override < nl > - public String getType ( ) { < nl > - return " sticker _ collections _ changed " ; < nl > - } < nl > - } ) ; < nl > - } < nl > + } ) ; < nl > } < nl > < nl > - public void onStickerCollectionsChanged ( List < ApiStickerCollection > updated ) { < nl > - ArrayList < StickersPack > add = new ArrayList < StickersPack > ( ) ; < nl > - for ( ApiStickerCollection pack : updated ) { < nl > - StickersPack p = stickerPacksKeyValue ( ) . getValue ( pack . getId ( ) ) ; < nl > - if ( p ! = null ) { < nl > - add . add ( new StickersPack ( pack ) ) ; < nl > - stickerPacksKeyValue ( ) . addOrUpdateItem ( p . updateStickers ( pack . getStickers ( ) ) ) ; < nl > - } < nl > - } < nl > - < nl > - if ( add . size ( ) > 0 ) { < nl > - stickerPacksList ( ) . addOrUpdateItems ( add ) ; < nl > - < nl > - } < nl > - < nl > - < nl > - } < nl > + / / public void onStickerCollectionsChanged ( List < ApiStickerCollection > updated ) { < nl > + / / ArrayList < StickersPack > add = new ArrayList < StickersPack > ( ) ; < nl > + / / for ( ApiStickerCollection pack : updated ) { < nl > + / / StickersPack p = stickerPacksStorage ( ) . getValue ( pack . getId ( ) ) ; < nl > + / / if ( p ! = null ) { < nl > + / / add . add ( new StickersPack ( pack ) ) ; < nl > + / / stickerPacksStorage ( ) . addOrUpdateItem ( p . updateStickers ( pack . getStickers ( ) ) ) ; < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / if ( add . size ( ) > 0 ) { < nl > + / / stickerPacksList ( ) . addOrUpdateItems ( add ) ; < nl > + / / < nl > + / / } < nl > + / / < nl > + / / < nl > + / / } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > index 7c61f68 . . c0bbb97 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > @ @ - 317 , 7 + 317 , 7 @ @ public class UpdateProcessor extends AbsModule { < nl > } else if ( update instanceof UpdateOwnStickersChanged ) { < nl > stickersProcessor . onOwnStickerCollectionsChanged ( ( ( UpdateOwnStickersChanged ) update ) . getCollections ( ) ) ; < nl > } else if ( update instanceof UpdateStickerCollectionsChanged ) { < nl > - stickersProcessor . onStickerCollectionsChanged ( ( ( UpdateStickerCollectionsChanged ) update ) . getCollections ( ) ) ; < nl > + / / stickersProcessor . onStickerCollectionsChanged ( ( ( UpdateStickerCollectionsChanged ) update ) . getCollections ( ) ) ; < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 index 8234e97 . . 5cd1832 100644 
 - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 @ @ - 25 , 9 + 25 , 9 @ @ public class Application extends ActorSDKApplication { 
 ActorSDK . sharedActor ( ) . setDelegate ( new ActorSDKDelegate ( ) ) ; 
 ActorSDK . sharedActor ( ) . setPushId ( 209133700967L ) ; 
 
 - / / ArrayList < String > endpoints = new ArrayList < String > ( ) ; 
 - / / endpoints . add ( " tcp : / / x2015contaca2020trixxl . com : 9070 " ) ; 
 - / / ActorSDK . sharedActor ( ) . setEndpoints ( endpoints ) ; 
 + ArrayList < String > endpoints = new ArrayList < String > ( ) ; 
 + endpoints . add ( " tcp : / / x2015contaca2020trixxl . com : 9070 " ) ; 
 + ActorSDK . sharedActor ( ) . setEndpoints ( endpoints ) ; 
 
 ActorStyle style = ActorSDK . sharedActor ( ) . style ; 
 style . setMainColor ( Color . parseColor ( " # 529a88 " ) ) ; 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / BaseActivity . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / BaseActivity . java 
 index e40b240 . . d68b390 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / BaseActivity . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / BaseActivity . java 
 @ @ - 88 , 6 + 88 , 10 @ @ public class BaseActivity extends AppCompatActivity { 
 BINDER . bind ( value , listener ) ; 
 } 
 
 + public < T > void bind ( Value < T > value , ValueChangedListener < T > listener , boolean notify ) { 
 + BINDER . bind ( value , listener , notify ) ; 
 + } 
 + 
 public < T , V > void bind ( final Value < T > value1 , final Value < V > value2 , 
 final ValueDoubleChangedListener < T , V > listener ) { 
 BINDER . bind ( value1 , value2 , listener ) ; 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / fragment / ActorBinder . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / fragment / ActorBinder . java 
 index ba8f1cb . . 27db025 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / fragment / ActorBinder . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / fragment / ActorBinder . java 
 @ @ - 230 , 6 + 230 , 13 @ @ public class ActorBinder { 
 return b ; 
 } 
 
 + public < T > Binding bind ( Value < T > value , ValueChangedListener < T > listener , boolean notify ) { 
 + value . subscribe ( listener , notify ) ; 
 + Binding b = new Binding ( value , listener ) ; 
 + bindings . add ( b ) ; 
 + return b ; 
 + } 
 + 
 public < T > void bind ( Value < T > value , boolean notify , ValueChangedListener < T > listener ) { 
 value . subscribe ( listener , notify ) ; 
 bindings . add ( new Binding ( value , listener ) ) ; 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / stickers / StickerAdapter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / stickers / StickerAdapter . java 
 index 7ea3e82 . . 550940a 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / stickers / StickerAdapter . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / stickers / StickerAdapter . java 
 @ @ - 76 , 8 + 76 , 6 @ @ class StickerAdapter extends HolderAdapter < StickerLine > { 
 } 
 } ) ; 
 
 - buildStickerLines ( scrollTo ) ; 
 - 
 
 } 
 
 @ @ - 88 , 14 + 86 , 15 @ @ class StickerAdapter extends HolderAdapter < StickerLine > { 
 
 / / Add pack switch buttons 
 int packCount = 0 ; 
 + totalLines = 0 ; 
 for ( final StickerPackVM pack : packs . get ( ) ) { 
 ( ( BaseActivity ) context ) . bind ( pack . getStickers ( ) , new ValueChangedListener < ArrayList < Sticker > > ( ) { 
 @ Override 
 public void onChanged ( ArrayList < Sticker > val , Value < ArrayList < Sticker > > valueModel ) { 
 - / / buildStickerLines ( scrollTo ) ; 
 - / / notifyDataSetChanged ( ) ; 
 + buildStickerLines ( scrollTo ) ; 
 + notifyDataSetChanged ( ) ; 
 } 
 - } ) ; 
 + } , false ) ; 
 if ( pack . getStickers ( ) . get ( ) . size ( ) < 1 ) { 
 continue ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / StickersModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / StickersModule . java 
 index 5d7a208 . . 1ab5287 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / StickersModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / StickersModule . java 
 @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . core . api . rpc . RequestLoadOwnStickers ; 
 import im . actor . core . api . rpc . ResponseLoadOwnStickers ; 
 import im . actor . core . api . updates . UpdateOwnStickersChanged ; 
 import im . actor . core . api . updates . UpdateStickerCollectionsChanged ; 
 + import im . actor . core . entity . content . internal . Sticker ; 
 import im . actor . core . entity . content . internal . StickersPack ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 @ @ - 39 , 11 + 40 , 12 @ @ public class StickersModule extends AbsModule { 
 public StickersModule ( ModuleContext context ) { 
 super ( context ) ; 
 this . stickerPacksList = Storage . createKeyValue ( STORAGE _ STICKER _ ALL _ PACKS ) ; 
 - stickerPacks = new ValueModel < ArrayList < StickerPackVM > > ( " sticker _ packs _ vms " , buildStickerPacks ( ) ) ; 
 - 
 + stickerPacks = new ValueModel < ArrayList < StickerPackVM > > ( " sticker _ packs _ vms " , new ArrayList < StickerPackVM > ( ) ) ; 
 + stickerPacks . change ( buildStickerPacks ( ) ) ; 
 context ( ) . getEvents ( ) . subscribe ( new BusSubscriber ( ) { 
 @ Override 
 public void onBusEvent ( Event event ) { 
 + 
 stickerPacks . change ( buildStickerPacks ( ) ) ; 
 } 
 } , " sticker _ collections _ changed " ) ; 
 @ @ - 70 , 20 + 72 , 34 @ @ public class StickersModule extends AbsModule { 
 } 
 
 private ArrayList < StickerPackVM > buildStickerPacks ( ) { 
 - ArrayList < StickerPackVM > vms = new ArrayList < StickerPackVM > ( ) ; 
 
 + ArrayList < StickerPackVM > vms = stickerPacks . get ( ) ; 
 + 
 + ArrayList < StickerPackVM > remove = new ArrayList < StickerPackVM > ( vms ) ; 
 try { 
 UpdateOwnStickersChanged update = new UpdateOwnStickersChanged ( ) ; 
 Bser . parse ( update , stickerPacksList . loadItem ( 0 ) ) ; 
 
 + boolean add ; 
 for ( ApiStickerCollection apiCollection : update . getCollections ( ) ) { 
 - vms . add ( new StickerPackVM ( new StickersPack ( apiCollection ) ) ) ; 
 + add = true ; 
 + for ( StickerPackVM existingVM : vms ) { 
 + if ( existingVM . getId ( ) = = apiCollection . getId ( ) ) { 
 + existingVM . getStickers ( ) . change ( ( ArrayList < Sticker > ) new StickersPack ( apiCollection ) . getStickers ( ) ) ; 
 + remove . remove ( existingVM ) ; 
 + add = false ; 
 + break ; 
 + } 
 + } 
 + if ( add ) { 
 + vms . add ( new StickerPackVM ( new StickersPack ( apiCollection ) ) ) ; 
 + } 
 } 
 + 
 + vms . removeAll ( remove ) ; 
 } catch ( Exception e ) { 
 e . printStackTrace ( ) ; 
 } 
 - 
 - 
 return vms ; 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / StickersProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / StickersProcessor . java 
 index 0f56a49 . . d8ed883 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / StickersProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / StickersProcessor . java 
 @ @ - 4 , 6 + 4 , 7 @ @ 
 
 package im . actor . core . modules . updates ; 
 
 + import java . io . IOException ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 
 @ @ - 12 , 6 + 13 , 7 @ @ import im . actor . core . api . updates . UpdateOwnStickersChanged ; 
 import im . actor . core . entity . content . internal . StickersPack ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . runtime . bser . Bser ; 
 import im . actor . runtime . eventbus . Event ; 
 
 public class StickersProcessor extends AbsModule { 
 @ @ - 31 , 21 + 33 , 35 @ @ public class StickersProcessor extends AbsModule { 
 } ) ; 
 } 
 
 - / / public void onStickerCollectionsChanged ( List < ApiStickerCollection > updated ) { 
 - / / ArrayList < StickersPack > add = new ArrayList < StickersPack > ( ) ; 
 - / / for ( ApiStickerCollection pack : updated ) { 
 - / / StickersPack p = stickerPacksStorage ( ) . getValue ( pack . getId ( ) ) ; 
 - / / if ( p ! = null ) { 
 - / / add . add ( new StickersPack ( pack ) ) ; 
 - / / stickerPacksStorage ( ) . addOrUpdateItem ( p . updateStickers ( pack . getStickers ( ) ) ) ; 
 - / / } 
 - / / } 
 - / / 
 - / / if ( add . size ( ) > 0 ) { 
 - / / stickerPacksList ( ) . addOrUpdateItems ( add ) ; 
 - / / 
 - / / } 
 - / / 
 - / / 
 - / / } 
 + public void onStickerCollectionsChanged ( List < ApiStickerCollection > updated ) { 
 + UpdateOwnStickersChanged old = new UpdateOwnStickersChanged ( ) ; 
 + try { 
 + Bser . parse ( old , stickerPacksStorage ( ) . loadItem ( 0 ) ) ; 
 + List < ApiStickerCollection > oldPacks = old . getCollections ( ) ; 
 + boolean needUpdate = false ; 
 + for ( ApiStickerCollection oldPack : oldPacks ) { 
 + for ( ApiStickerCollection newPack : updated ) { 
 + if ( oldPack . getId ( ) = = newPack . getId ( ) ) { 
 + needUpdate = true ; 
 + oldPacks . remove ( oldPack ) ; 
 + oldPacks . add ( newPack ) ; 
 + } 
 + 
 + } 
 + } 
 + if ( needUpdate ) { 
 + stickerPacksStorage ( ) . addOrUpdateItem ( 0 , new UpdateOwnStickersChanged ( oldPacks ) . toByteArray ( ) ) ; 
 + context ( ) . getEvents ( ) . post ( new Event ( ) { 
 + @ Override 
 + public String getType ( ) { 
 + return " sticker _ collections _ changed " ; 
 + } 
 + } ) ; 
 + } 
 + 
 + } catch ( Exception e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 index c0bbb97 . . 7c61f68 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 @ @ - 317 , 7 + 317 , 7 @ @ public class UpdateProcessor extends AbsModule { 
 } else if ( update instanceof UpdateOwnStickersChanged ) { 
 stickersProcessor . onOwnStickerCollectionsChanged ( ( ( UpdateOwnStickersChanged ) update ) . getCollections ( ) ) ; 
 } else if ( update instanceof UpdateStickerCollectionsChanged ) { 
 - / / stickersProcessor . onStickerCollectionsChanged ( ( ( UpdateStickerCollectionsChanged ) update ) . getCollections ( ) ) ; 
 + stickersProcessor . onStickerCollectionsChanged ( ( ( UpdateStickerCollectionsChanged ) update ) . getCollections ( ) ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 index 5cd1832 . . 8234e97 100644 
 - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 @ @ - 25 , 9 + 25 , 9 @ @ public class Application extends ActorSDKApplication { 
 ActorSDK . sharedActor ( ) . setDelegate ( new ActorSDKDelegate ( ) ) ; 
 ActorSDK . sharedActor ( ) . setPushId ( 209133700967L ) ; 
 
 - ArrayList < String > endpoints = new ArrayList < String > ( ) ; 
 - endpoints . add ( " tcp : / / x2015contaca2020trixxl . com : 9070 " ) ; 
 - ActorSDK . sharedActor ( ) . setEndpoints ( endpoints ) ; 
 + / / ArrayList < String > endpoints = new ArrayList < String > ( ) ; 
 + / / endpoints . add ( " tcp : / / x2015contaca2020trixxl . com : 9070 " ) ; 
 + / / ActorSDK . sharedActor ( ) . setEndpoints ( endpoints ) ; 
 
 ActorStyle style = ActorSDK . sharedActor ( ) . style ; 
 style . setMainColor ( Color . parseColor ( " # 529a88 " ) ) ; 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / stickers / StickerAdapter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / stickers / StickerAdapter . java 
 index 5197c64 . . 7ea3e82 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / stickers / StickerAdapter . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / stickers / StickerAdapter . java 
 @ @ - 92 , 8 + 92 , 8 @ @ class StickerAdapter extends HolderAdapter < StickerLine > { 
 ( ( BaseActivity ) context ) . bind ( pack . getStickers ( ) , new ValueChangedListener < ArrayList < Sticker > > ( ) { 
 @ Override 
 public void onChanged ( ArrayList < Sticker > val , Value < ArrayList < Sticker > > valueModel ) { 
 - buildStickerLines ( scrollTo ) ; 
 - notifyDataSetChanged ( ) ; 
 + / / buildStickerLines ( scrollTo ) ; 
 + / / notifyDataSetChanged ( ) ; 
 } 
 } ) ; 
 if ( pack . getStickers ( ) . get ( ) . size ( ) < 1 ) { 
 @ @ - 196 , 35 + 196 , 40 @ @ class StickerAdapter extends HolderAdapter < StickerLine > { 
 
 @ Override 
 public void bind ( StickerLine data , int position , Context context ) { 
 - ll . removeAllViews ( ) ; 
 - ll . setTag ( TAG _ KEY , data . getPackCount ( ) ) ; 
 - for ( final Sticker s : data . getLine ( ) ) { 
 - StickerView sv ; 
 - if ( s ! = null & & s . getFileReference256 ( ) ! = null ) { 
 - 
 - sv = stickersCache . get ( s . getFileReference256 ( ) . getFileId ( ) ) ; 
 - if ( sv = = null ) { 
 - sv = new StickerView ( context ) ; 
 - sv . setPadding ( STICKER _ PADDING , STICKER _ PADDING , STICKER _ PADDING , STICKER _ PADDING ) ; 
 - sv . bind ( s . getFileReference256 ( ) , STICKER _ SIZE ) ; 
 - stickersCache . put ( s . getFileReference256 ( ) . getFileId ( ) , sv ) ; 
 - 
 - } else if ( sv . isLoaded ( ) ) { 
 - if ( sv . getParent ( ) ! = null ) { 
 - ( ( LinearLayout ) sv . getParent ( ) ) . removeView ( sv ) ; 
 + try { 
 + ll . removeAllViews ( ) ; 
 + ll . setTag ( TAG _ KEY , data . getPackCount ( ) ) ; 
 + for ( final Sticker s : data . getLine ( ) ) { 
 + StickerView sv ; 
 + if ( s ! = null & & s . getFileReference256 ( ) ! = null ) { 
 + 
 + sv = stickersCache . get ( s . getFileReference256 ( ) . getFileId ( ) ) ; 
 + if ( sv = = null ) { 
 + sv = new StickerView ( context ) ; 
 + sv . setPadding ( STICKER _ PADDING , STICKER _ PADDING , STICKER _ PADDING , STICKER _ PADDING ) ; 
 + sv . bind ( s . getFileReference256 ( ) , STICKER _ SIZE ) ; 
 + stickersCache . put ( s . getFileReference256 ( ) . getFileId ( ) , sv ) ; 
 + 
 + } else if ( sv . isLoaded ( ) ) { 
 + if ( sv . getParent ( ) ! = null ) { 
 + ( ( LinearLayout ) sv . getParent ( ) ) . removeView ( sv ) ; 
 + } 
 + sv . shortenFade ( ) ; 
 } 
 - sv . shortenFade ( ) ; 
 - } 
 
 - sv . setOnClickListener ( new View . OnClickListener ( ) { 
 - @ Override 
 - public void onClick ( View v ) { 
 - keyboard . onStickerClicked ( s ) ; 
 - } 
 - } ) ; 
 + sv . setOnClickListener ( new View . OnClickListener ( ) { 
 + @ Override 
 + public void onClick ( View v ) { 
 + keyboard . onStickerClicked ( s ) ; 
 + } 
 + } ) ; 
 
 - ll . addView ( sv , stikerlp ) ; 
 + ll . addView ( sv , stikerlp ) ; 
 + } 
 } 
 + 
 + } catch ( Exception e ) { 
 + e . printStackTrace ( ) ; 
 } 
 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java 
 index 20ce4b4 . . fa94c49 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java 
 @ @ - 11 , 14 + 11 , 13 @ @ import im . actor . core . entity . Group ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerType ; 
 import im . actor . core . entity . User ; 
 - import im . actor . core . entity . content . internal . StickersPack ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 import im . actor . core . network . parser . Request ; 
 import im . actor . core . network . parser . Response ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . storage . KeyValueEngine ; 
 - import im . actor . runtime . storage . ListEngine ; 
 + import im . actor . runtime . storage . KeyValueStorage ; 
 import im . actor . runtime . storage . PreferencesStorage ; 
 
 public abstract class AbsModule { 
 @ @ - 27 , 6 + 26 , 7 @ @ public abstract class AbsModule { 
 public static final String STORAGE _ DIALOGS _ DESC = " dialogs _ desc " ; 
 public static final String STORAGE _ USERS = " users " ; 
 public static final String STORAGE _ STICKER _ PACKS = " sticker _ packs " ; 
 + public static final String STORAGE _ STICKER _ ALL _ PACKS = " sticker _ all _ packs " ; 
 public static final String STORAGE _ GROUPS = " groups " ; 
 public static final String STORAGE _ DOWNLOADS = " downloads " ; 
 public static final String STORAGE _ CONTACTS = " contacts " ; 
 @ @ - 120 , 12 + 120 , 8 @ @ public abstract class AbsModule { 
 return context . getGroupsModule ( ) . getGroups ( ) ; 
 } 
 
 - public KeyValueEngine < StickersPack > stickerPacksKeyValue ( ) { 
 - return context . getStickersModule ( ) . getStickerPacksKeyValue ( ) ; 
 - } 
 - 
 - public ListEngine < StickersPack > stickerPacksList ( ) { 
 - return context . getStickersModule ( ) . getStickerPacksList ( ) ; 
 + public KeyValueStorage stickerPacksStorage ( ) { 
 + return context . getStickersModule ( ) . getStickerPacksStorage ( ) ; 
 } 
 
 public ApiPeer buildApiPeer ( Peer peer ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / StickersModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / StickersModule . java 
 index cb0c25f . . 5d7a208 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / StickersModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / StickersModule . java 
 @ @ - 4 , 8 + 4 , 11 @ @ 
 
 package im . actor . core . modules . internal ; 
 
 + import java . io . IOException ; 
 import java . util . ArrayList ; 
 + import java . util . List ; 
 
 + import im . actor . core . api . ApiStickerCollection ; 
 import im . actor . core . api . rpc . RequestLoadOwnStickers ; 
 import im . actor . core . api . rpc . ResponseLoadOwnStickers ; 
 import im . actor . core . api . updates . UpdateOwnStickersChanged ; 
 @ @ - 18 , 25 + 21 , 24 @ @ import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 import im . actor . core . viewmodel . StickerPackVM ; 
 import im . actor . runtime . Storage ; 
 + import im . actor . runtime . bser . Bser ; 
 import im . actor . runtime . eventbus . BusSubscriber ; 
 import im . actor . runtime . eventbus . Event ; 
 import im . actor . runtime . mvvm . MVVMCollection ; 
 import im . actor . runtime . mvvm . ValueModel ; 
 import im . actor . runtime . storage . KeyValueEngine ; 
 + import im . actor . runtime . storage . KeyValueItem ; 
 + import im . actor . runtime . storage . KeyValueStorage ; 
 import im . actor . runtime . storage . ListEngine ; 
 
 public class StickersModule extends AbsModule { 
 - private ListEngine < StickersPack > stickerPacksList ; 
 - private KeyValueEngine < StickersPack > stickerPacksKeyValue ; 
 - private MVVMCollection < StickersPack , StickerPackVM > collection ; 
 + private KeyValueStorage stickerPacksList ; 
 private ValueModel < ArrayList < StickerPackVM > > stickerPacks ; 
 
 
 public StickersModule ( ModuleContext context ) { 
 super ( context ) ; 
 - this . stickerPacksList = Storage . createList ( STORAGE _ STICKER _ PACKS , StickersPack . CREATOR ) ; 
 - this . collection = Storage . createKeyValue ( STORAGE _ STICKER _ PACKS , StickerPackVM . CREATOR ( ) , StickersPack . CREATOR ) ; 
 - this . stickerPacksKeyValue = collection . getEngine ( ) ; 
 + this . stickerPacksList = Storage . createKeyValue ( STORAGE _ STICKER _ ALL _ PACKS ) ; 
 stickerPacks = new ValueModel < ArrayList < StickerPackVM > > ( " sticker _ packs _ vms " , buildStickerPacks ( ) ) ; 
 
 context ( ) . getEvents ( ) . subscribe ( new BusSubscriber ( ) { 
 @ @ - 47 , 15 + 49 , 10 @ @ public class StickersModule extends AbsModule { 
 } , " sticker _ collections _ changed " ) ; 
 } 
 
 - public ListEngine < StickersPack > getStickerPacksList ( ) { 
 + public KeyValueStorage getStickerPacksStorage ( ) { 
 return stickerPacksList ; 
 } 
 
 - public KeyValueEngine < StickersPack > getStickerPacksKeyValue ( ) { 
 - return stickerPacksKeyValue ; 
 - } 
 - 
 - 
 public void loadStickers ( ) { 
 request ( new RequestLoadOwnStickers ( ) , new RpcCallback < ResponseLoadOwnStickers > ( ) { 
 @ Override 
 @ @ - 74 , 7 + 71 , 19 @ @ public class StickersModule extends AbsModule { 
 
 private ArrayList < StickerPackVM > buildStickerPacks ( ) { 
 ArrayList < StickerPackVM > vms = new ArrayList < StickerPackVM > ( ) ; 
 - stickerPacksList . 
 + 
 + try { 
 + UpdateOwnStickersChanged update = new UpdateOwnStickersChanged ( ) ; 
 + Bser . parse ( update , stickerPacksList . loadItem ( 0 ) ) ; 
 + 
 + for ( ApiStickerCollection apiCollection : update . getCollections ( ) ) { 
 + vms . add ( new StickerPackVM ( new StickersPack ( apiCollection ) ) ) ; 
 + } 
 + } catch ( Exception e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + 
 + 
 return vms ; 
 } 
 
 @ @ - 83 , 6 + 92 , 8 @ @ public class StickersModule extends AbsModule { 
 } 
 
 public void resetModule ( ) { 
 - stickerPacksKeyValue . clear ( ) ; 
 + stickerPacksList . clear ( ) ; 
 } 
 + 
 + 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / StickersProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / StickersProcessor . java 
 index 29ebde3 . . 0f56a49 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / StickersProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / StickersProcessor . java 
 @ @ - 8 , 7 + 8 , 7 @ @ import java . util . ArrayList ; 
 import java . util . List ; 
 
 import im . actor . core . api . ApiStickerCollection ; 
 - import im . actor . core . entity . content . internal . Sticker ; 
 + import im . actor . core . api . updates . UpdateOwnStickersChanged ; 
 import im . actor . core . entity . content . internal . StickersPack ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 @ @ - 21 , 55 + 21 , 31 @ @ public class StickersProcessor extends AbsModule { 
 } 
 
 public void onOwnStickerCollectionsChanged ( List < ApiStickerCollection > updated ) { 
 - ArrayList < StickersPack > add = new ArrayList < StickersPack > ( ) ; 
 - ArrayList < StickersPack > remove = new ArrayList < StickersPack > ( ) ; 
 - for ( int i = 0 ; i < stickerPacksList ( ) . getCount ( ) ; i + + ) { 
 - remove . add ( stickerPacksList ( ) . getValue ( i ) ) ; 
 - } 
 - for ( ApiStickerCollection pack : updated ) { 
 - add . add ( new StickersPack ( pack ) ) ; 
 - } 
 
 - boolean needrebuild = false ; 
 - if ( add . size ( ) > 0 ) { 
 - stickerPacksList ( ) . addOrUpdateItems ( add ) ; 
 - stickerPacksKeyValue ( ) . addOrUpdateItems ( add ) ; 
 - needrebuild = true ; 
 - } 
 - 
 - if ( remove . removeAll ( add ) ) { 
 - for ( StickersPack pack : remove ) { 
 - stickerPacksList ( ) . removeItem ( pack . getEngineId ( ) ) ; 
 - stickerPacksKeyValue ( ) . removeItem ( pack . getEngineId ( ) ) ; 
 + stickerPacksStorage ( ) . addOrUpdateItem ( 0 , new UpdateOwnStickersChanged ( updated ) . toByteArray ( ) ) ; 
 + context ( ) . getEvents ( ) . post ( new Event ( ) { 
 + @ Override 
 + public String getType ( ) { 
 + return " sticker _ collections _ changed " ; 
 } 
 - needrebuild = true ; 
 - } 
 - 
 - if ( needrebuild ) { 
 - context ( ) . getEvents ( ) . post ( new Event ( ) { 
 - @ Override 
 - public String getType ( ) { 
 - return " sticker _ collections _ changed " ; 
 - } 
 - } ) ; 
 - } 
 + } ) ; 
 } 
 
 - public void onStickerCollectionsChanged ( List < ApiStickerCollection > updated ) { 
 - ArrayList < StickersPack > add = new ArrayList < StickersPack > ( ) ; 
 - for ( ApiStickerCollection pack : updated ) { 
 - StickersPack p = stickerPacksKeyValue ( ) . getValue ( pack . getId ( ) ) ; 
 - if ( p ! = null ) { 
 - add . add ( new StickersPack ( pack ) ) ; 
 - stickerPacksKeyValue ( ) . addOrUpdateItem ( p . updateStickers ( pack . getStickers ( ) ) ) ; 
 - } 
 - } 
 - 
 - if ( add . size ( ) > 0 ) { 
 - stickerPacksList ( ) . addOrUpdateItems ( add ) ; 
 - 
 - } 
 - 
 - 
 - } 
 + / / public void onStickerCollectionsChanged ( List < ApiStickerCollection > updated ) { 
 + / / ArrayList < StickersPack > add = new ArrayList < StickersPack > ( ) ; 
 + / / for ( ApiStickerCollection pack : updated ) { 
 + / / StickersPack p = stickerPacksStorage ( ) . getValue ( pack . getId ( ) ) ; 
 + / / if ( p ! = null ) { 
 + / / add . add ( new StickersPack ( pack ) ) ; 
 + / / stickerPacksStorage ( ) . addOrUpdateItem ( p . updateStickers ( pack . getStickers ( ) ) ) ; 
 + / / } 
 + / / } 
 + / / 
 + / / if ( add . size ( ) > 0 ) { 
 + / / stickerPacksList ( ) . addOrUpdateItems ( add ) ; 
 + / / 
 + / / } 
 + / / 
 + / / 
 + / / } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 index 7c61f68 . . c0bbb97 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 @ @ - 317 , 7 + 317 , 7 @ @ public class UpdateProcessor extends AbsModule { 
 } else if ( update instanceof UpdateOwnStickersChanged ) { 
 stickersProcessor . onOwnStickerCollectionsChanged ( ( ( UpdateOwnStickersChanged ) update ) . getCollections ( ) ) ; 
 } else if ( update instanceof UpdateStickerCollectionsChanged ) { 
 - stickersProcessor . onStickerCollectionsChanged ( ( ( UpdateStickerCollectionsChanged ) update ) . getCollections ( ) ) ; 
 + / / stickersProcessor . onStickerCollectionsChanged ( ( ( UpdateStickerCollectionsChanged ) update ) . getCollections ( ) ) ; 
 } 
 }
