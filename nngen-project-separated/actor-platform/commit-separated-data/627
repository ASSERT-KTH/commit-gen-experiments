BLEU SCORE: 0.06398674618365158

TEST MSG: feat ( server : session ) : log rpc results in RpcHandler
GENERATED MSG: fix ( session ) : decrease resend buffer size on message ack , don ' t increase it on rescheduled resend

TEST DIFF (one line): diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > index 069a0c7 . . 3cc0421 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > @ @ - 105 , 7 + 105 , 7 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf < nl > requestQueue + = ( messageId → scheduledAck ) < nl > assert ( requestQueue . size < = MaxRequestQueueSize , s " queued too many : $ { requestQueue . size } " ) < nl > < nl > - log . debug ( " Making an rpc request for messageId : { } " , messageId ) < nl > + log . debug ( " Making an rpc request for messageId { } " , messageId ) < nl > < nl > val responsePromise = Promise [ RpcApiService . RpcResponse ] ( ) < nl > context . actorOf ( < nl > @ @ - 133 , 7 + 133 , 7 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf < nl > < nl > def publisher : Receive = { < nl > case RpcApiService . RpcResponse ( messageId , result ) ⇒ < nl > - log . debug ( " Received RpcResponse for messageId : { } , publishing " , messageId ) < nl > + log . debug ( " Received RpcResponse for messageId { } : { } " , messageId , result ) < nl > < nl > if ( ! canCache ( result ) ) < nl > responseCache . invalidate ( messageId ) < nl > @ @ - 142 , 7 + 142 , 7 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf < nl > requestQueue - = messageId < nl > enqueue ( Some ( result ) , messageId ) < nl > case CachedResponse ( rsp ) ⇒ < nl > - log . debug ( " Got cached RpcResponse for messageId : { } , publishing " , rsp . messageId ) < nl > + log . debug ( " Got cached RpcResponse for messageId : { } , { } " , rsp . messageId , rsp . result ) < nl > enqueue ( Some ( rsp . result ) , rsp . messageId ) < nl > case Ack ( messageId ) ⇒ enqueueAck ( messageId ) < nl > case Request ( _ ) ⇒ deliverBuf ( )
NEAREST DIFF (one line): diff - - git a / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > index 5169005 . . 5c9eb11 100644 < nl > - - - a / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > + + + b / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > @ @ - 84 , 7 + 84 , 11 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : < nl > case OnNext ( msg : MessageAck with IncomingProtoMessage ) ⇒ < nl > / / TODO : # perf possibly can be optimized < nl > msg . messageIds foreach { messageId ⇒ < nl > - resendBuffer . get ( messageId ) map ( _ . _ 2 . cancel ( ) ) < nl > + resendBuffer . get ( messageId ) foreach { < nl > + case ( message , scheduledResend ) ⇒ < nl > + resendBufferSize - = message . bodySize < nl > + scheduledResend . cancel ( ) < nl > + } < nl > } < nl > resendBuffer - - = msg . messageIds < nl > case OnNext ( msg : ProtoMessage with OutgoingProtoMessage with ResendableProtoMessage ) ⇒ enqueueProtoMessageWithResend ( msg ) < nl > @ @ - 99 , 10 + 103 , 12 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : < nl > case ScheduledResend ( messageId ) ⇒ < nl > log . debug ( " Scheduled resend for messageId : { } " , messageId ) < nl > resendBuffer . get ( messageId ) map { < nl > - case ( msg , _ ) ⇒ < nl > - log . debug ( " Resending { } " , msg ) < nl > + case ( message , _ ) ⇒ < nl > + log . debug ( " Resending { } " , message ) < nl > < nl > - msg match { < nl > + resendBufferSize - = message . bodySize < nl > + < nl > + message match { < nl > case rspBox @ RpcResponseBox ( requestMessageId , bodyBytes ) ⇒ < nl > val bodySize = bodyBytes . bytes . size < nl > < nl > @ @ - 122 , 7 + 128 , 7 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : < nl > enqueueProtoMessage ( nextMessageId ( ) , UnsentMessage ( messageId , bodySize ) ) < nl > } < nl > case msg ⇒ < nl > - enqueueProtoMessageWithResend ( messageId , msg ) < nl > + enqueueProtoMessageWithResend ( messageId , message ) < nl > } < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 index 069a0c7 . . 3cc0421 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 @ @ - 105 , 7 + 105 , 7 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf 
 requestQueue + = ( messageId → scheduledAck ) 
 assert ( requestQueue . size < = MaxRequestQueueSize , s " queued too many : $ { requestQueue . size } " ) 
 
 - log . debug ( " Making an rpc request for messageId : { } " , messageId ) 
 + log . debug ( " Making an rpc request for messageId { } " , messageId ) 
 
 val responsePromise = Promise [ RpcApiService . RpcResponse ] ( ) 
 context . actorOf ( 
 @ @ - 133 , 7 + 133 , 7 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf 
 
 def publisher : Receive = { 
 case RpcApiService . RpcResponse ( messageId , result ) ⇒ 
 - log . debug ( " Received RpcResponse for messageId : { } , publishing " , messageId ) 
 + log . debug ( " Received RpcResponse for messageId { } : { } " , messageId , result ) 
 
 if ( ! canCache ( result ) ) 
 responseCache . invalidate ( messageId ) 
 @ @ - 142 , 7 + 142 , 7 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf 
 requestQueue - = messageId 
 enqueue ( Some ( result ) , messageId ) 
 case CachedResponse ( rsp ) ⇒ 
 - log . debug ( " Got cached RpcResponse for messageId : { } , publishing " , rsp . messageId ) 
 + log . debug ( " Got cached RpcResponse for messageId : { } , { } " , rsp . messageId , rsp . result ) 
 enqueue ( Some ( rsp . result ) , rsp . messageId ) 
 case Ack ( messageId ) ⇒ enqueueAck ( messageId ) 
 case Request ( _ ) ⇒ deliverBuf ( )

NEAREST DIFF:
diff - - git a / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 index 5169005 . . 5c9eb11 100644 
 - - - a / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 + + + b / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 @ @ - 84 , 7 + 84 , 11 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : 
 case OnNext ( msg : MessageAck with IncomingProtoMessage ) ⇒ 
 / / TODO : # perf possibly can be optimized 
 msg . messageIds foreach { messageId ⇒ 
 - resendBuffer . get ( messageId ) map ( _ . _ 2 . cancel ( ) ) 
 + resendBuffer . get ( messageId ) foreach { 
 + case ( message , scheduledResend ) ⇒ 
 + resendBufferSize - = message . bodySize 
 + scheduledResend . cancel ( ) 
 + } 
 } 
 resendBuffer - - = msg . messageIds 
 case OnNext ( msg : ProtoMessage with OutgoingProtoMessage with ResendableProtoMessage ) ⇒ enqueueProtoMessageWithResend ( msg ) 
 @ @ - 99 , 10 + 103 , 12 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : 
 case ScheduledResend ( messageId ) ⇒ 
 log . debug ( " Scheduled resend for messageId : { } " , messageId ) 
 resendBuffer . get ( messageId ) map { 
 - case ( msg , _ ) ⇒ 
 - log . debug ( " Resending { } " , msg ) 
 + case ( message , _ ) ⇒ 
 + log . debug ( " Resending { } " , message ) 
 
 - msg match { 
 + resendBufferSize - = message . bodySize 
 + 
 + message match { 
 case rspBox @ RpcResponseBox ( requestMessageId , bodyBytes ) ⇒ 
 val bodySize = bodyBytes . bytes . size 
 
 @ @ - 122 , 7 + 128 , 7 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : 
 enqueueProtoMessage ( nextMessageId ( ) , UnsentMessage ( messageId , bodySize ) ) 
 } 
 case msg ⇒ 
 - enqueueProtoMessageWithResend ( messageId , msg ) 
 + enqueueProtoMessageWithResend ( messageId , message ) 
 } 
 } 
 }
