BLEU SCORE: 0.17542198478193427

TEST MSG: fix ( server : search ) : lowercase nick search queries
GENERATED MSG: feat ( server : hooks ) : AfterAuth hook

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala b / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala < nl > index b46ee46 . . a78b47e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala < nl > @ @ - 39 , 7 + 39 , 7 @ @ final class GlobalNamesStorageKeyValueStorage ( implicit system : ActorSystem ) { < nl > * Looks only in GlobalNamesStorage < nl > * / < nl > def groupIdsByPrefix ( namePrefix : String ) : Future [ IndexedSeq [ ( Int , String ) ] ] = { < nl > - conn . run ( GlobalNamesStorage . getByPrefix ( namePrefix ) ) map { searchResults ⇒ < nl > + conn . run ( GlobalNamesStorage . getByPrefix ( normalized ( namePrefix ) ) ) map { searchResults ⇒ < nl > searchResults flatMap { < nl > case ( fullName , bytes ) ⇒ < nl > Some ( GlobalNameOwner . parseFrom ( bytes ) ) filter ( _ . ownerType . isGroup ) map ( o ⇒ o . ownerId → fullName ) < nl > @ @ - 52 , 7 + 52 , 7 @ @ final class GlobalNamesStorageKeyValueStorage ( implicit system : ActorSystem ) { < nl > * Looks in both GlobalNamesStorage and UserRepo ( compatibility mode ) < nl > * / < nl > def userIdsByPrefix ( namePrefix : String ) : Future [ IndexedSeq [ ( Int , String ) ] ] = { < nl > - val kvSearch = conn . run ( GlobalNamesStorage . getByPrefix ( namePrefix ) ) map { searchResults ⇒ < nl > + val kvSearch = conn . run ( GlobalNamesStorage . getByPrefix ( normalized ( namePrefix ) ) ) map { searchResults ⇒ < nl > searchResults flatMap { < nl > case ( fullName , bytes ) ⇒ < nl > Some ( GlobalNameOwner . parseFrom ( bytes ) ) filter ( _ . ownerType . isUser ) map ( o ⇒ o . ownerId → fullName )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala < nl > index b4fc9ba . . 7d2aa4c 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala < nl > @ @ - 19 , 6 + 19 , 10 @ @ trait Hook2 [ A , B ] extends Hook { < nl > def run ( a : A , b : B ) : Future [ Unit ] < nl > } < nl > < nl > + trait Hook3 [ A , B , C ] extends Hook { < nl > + def run ( a : A , b : B , c : C ) : Future [ Unit ] < nl > + } < nl > + < nl > class HooksStorage [ H < : Hook ] { < nl > private val hooks = TrieMap . empty [ String , H ] < nl > protected def hooksList : Seq [ H ] = hooks . values . toSeq < nl > @ @ - 40 , 6 + 44 , 10 @ @ final class HooksStorage2 [ H < : Hook2 [ A , B ] , A , B ] ( implicit ec : ExecutionContext ) < nl > def runAll ( a : A , b : B ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( a , b ) ) map ( _ ⇒ ( ) ) < nl > } < nl > < nl > + final class HooksStorage3 [ H < : Hook3 [ A , B , C ] , A , B , C ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { < nl > + def runAll ( a : A , b : B , c : C ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( a , b , c ) ) map ( _ ⇒ ( ) ) < nl > + } < nl > + < nl > abstract class HooksControl < nl > < nl > abstract class HookException ( msg : String ) extends RuntimeException ( msg ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > index 575a5ed . . 70ad046 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > @ @ - 33 , 7 + 33 , 7 @ @ sealed trait UserException extends RuntimeException < nl > < nl > object UserExceptions { < nl > < nl > - final case object NicknameTaken extends RuntimeException with NoStackTrace < nl > + case object NicknameTaken extends RuntimeException with NoStackTrace < nl > < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > index 6e19472 . . d225767 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > @ @ - 31 , 13 + 31 , 18 @ @ object UserExtension extends ExtensionId [ UserExtensionImpl ] with ExtensionIdProv < nl > } < nl > < nl > final class UserHooksControl ( implicit ec : ExecutionContext ) extends HooksControl { < nl > + val afterAuth = new HooksStorage3 [ UserHook . AfterAuth , Int , Int , String ] < nl > val beforeEmailContactRegistered = new HooksStorage2 [ UserHook . BeforeEmailContactRegisteredHook , Int , String ] < nl > } < nl > < nl > object UserHook { < nl > < nl > + abstract class AfterAuth ( system : ActorSystem ) extends Hook3 [ Int , Int , String ] { < nl > + override def run ( userId : Int , appId : Int , deviceTitle : String ) : Future [ Unit ] < nl > + } < nl > + < nl > abstract class BeforeEmailContactRegisteredHook ( system : ActorSystem ) extends Hook2 [ Int , String ] { < nl > def run ( userId : Int , email : String ) : Future [ Unit ] < nl > } < nl > < nl > - } < nl > \ No newline at end of file < nl > + }

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala b / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala 
 index b46ee46 . . a78b47e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala 
 @ @ - 39 , 7 + 39 , 7 @ @ final class GlobalNamesStorageKeyValueStorage ( implicit system : ActorSystem ) { 
 * Looks only in GlobalNamesStorage 
 * / 
 def groupIdsByPrefix ( namePrefix : String ) : Future [ IndexedSeq [ ( Int , String ) ] ] = { 
 - conn . run ( GlobalNamesStorage . getByPrefix ( namePrefix ) ) map { searchResults ⇒ 
 + conn . run ( GlobalNamesStorage . getByPrefix ( normalized ( namePrefix ) ) ) map { searchResults ⇒ 
 searchResults flatMap { 
 case ( fullName , bytes ) ⇒ 
 Some ( GlobalNameOwner . parseFrom ( bytes ) ) filter ( _ . ownerType . isGroup ) map ( o ⇒ o . ownerId → fullName ) 
 @ @ - 52 , 7 + 52 , 7 @ @ final class GlobalNamesStorageKeyValueStorage ( implicit system : ActorSystem ) { 
 * Looks in both GlobalNamesStorage and UserRepo ( compatibility mode ) 
 * / 
 def userIdsByPrefix ( namePrefix : String ) : Future [ IndexedSeq [ ( Int , String ) ] ] = { 
 - val kvSearch = conn . run ( GlobalNamesStorage . getByPrefix ( namePrefix ) ) map { searchResults ⇒ 
 + val kvSearch = conn . run ( GlobalNamesStorage . getByPrefix ( normalized ( namePrefix ) ) ) map { searchResults ⇒ 
 searchResults flatMap { 
 case ( fullName , bytes ) ⇒ 
 Some ( GlobalNameOwner . parseFrom ( bytes ) ) filter ( _ . ownerType . isUser ) map ( o ⇒ o . ownerId → fullName )

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala 
 index b4fc9ba . . 7d2aa4c 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala 
 @ @ - 19 , 6 + 19 , 10 @ @ trait Hook2 [ A , B ] extends Hook { 
 def run ( a : A , b : B ) : Future [ Unit ] 
 } 
 
 + trait Hook3 [ A , B , C ] extends Hook { 
 + def run ( a : A , b : B , c : C ) : Future [ Unit ] 
 + } 
 + 
 class HooksStorage [ H < : Hook ] { 
 private val hooks = TrieMap . empty [ String , H ] 
 protected def hooksList : Seq [ H ] = hooks . values . toSeq 
 @ @ - 40 , 6 + 44 , 10 @ @ final class HooksStorage2 [ H < : Hook2 [ A , B ] , A , B ] ( implicit ec : ExecutionContext ) 
 def runAll ( a : A , b : B ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( a , b ) ) map ( _ ⇒ ( ) ) 
 } 
 
 + final class HooksStorage3 [ H < : Hook3 [ A , B , C ] , A , B , C ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { 
 + def runAll ( a : A , b : B , c : C ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( a , b , c ) ) map ( _ ⇒ ( ) ) 
 + } 
 + 
 abstract class HooksControl 
 
 abstract class HookException ( msg : String ) extends RuntimeException ( msg ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 index 575a5ed . . 70ad046 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 @ @ - 33 , 7 + 33 , 7 @ @ sealed trait UserException extends RuntimeException 
 
 object UserExceptions { 
 
 - final case object NicknameTaken extends RuntimeException with NoStackTrace 
 + case object NicknameTaken extends RuntimeException with NoStackTrace 
 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 index 6e19472 . . d225767 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 @ @ - 31 , 13 + 31 , 18 @ @ object UserExtension extends ExtensionId [ UserExtensionImpl ] with ExtensionIdProv 
 } 
 
 final class UserHooksControl ( implicit ec : ExecutionContext ) extends HooksControl { 
 + val afterAuth = new HooksStorage3 [ UserHook . AfterAuth , Int , Int , String ] 
 val beforeEmailContactRegistered = new HooksStorage2 [ UserHook . BeforeEmailContactRegisteredHook , Int , String ] 
 } 
 
 object UserHook { 
 
 + abstract class AfterAuth ( system : ActorSystem ) extends Hook3 [ Int , Int , String ] { 
 + override def run ( userId : Int , appId : Int , deviceTitle : String ) : Future [ Unit ] 
 + } 
 + 
 abstract class BeforeEmailContactRegisteredHook ( system : ActorSystem ) extends Hook2 [ Int , String ] { 
 def run ( userId : Int , email : String ) : Future [ Unit ] 
 } 
 
 - } 
 \ No newline at end of file 
 + }
