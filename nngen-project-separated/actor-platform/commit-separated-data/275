BLEU SCORE: 0.7102992180127422

TEST MSG: Revert " feat ( core ) : limited notifications pending storage "
GENERATED MSG: feat ( core ) : limited notifications pending storage

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml < nl > index 19def96 . . 9a0a041 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml < nl > @ @ - 297 , 8 + 297 , 6 @ @ < nl > android : showOnLockScreen = " true " < nl > android : theme = " @ style / CallTheme " / > < nl > < nl > - < activity android : name = " . discover . DiscoverActivity " / > < nl > - < nl > < service < nl > android : name = " im . actor . sdk . services . KeepAliveService " < nl > android : enabled = " true " < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / root / MainPhoneController . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / root / MainPhoneController . java < nl > index edba108 . . 1687a09 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / root / MainPhoneController . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / root / MainPhoneController . java < nl > @ @ - 46 , 7 + 46 , 6 @ @ import im . actor . sdk . controllers . contacts . ContactsFragment ; < nl > import im . actor . sdk . controllers . dialogs . DialogsFragment ; < nl > import im . actor . sdk . controllers . fragment . help . HelpActivity ; < nl > import im . actor . sdk . controllers . fragment . main . SearchAdapter ; < nl > - import im . actor . sdk . discover . DiscoverActivity ; < nl > import im . actor . sdk . util . Screen ; < nl > import im . actor . sdk . util . Fonts ; < nl > import im . actor . sdk . view . adapters . FragmentNoMenuStatePagerAdapter ; < nl > @ @ - 546 , 9 + 545 , 6 @ @ public class MainPhoneController extends MainBaseController { < nl > } else if ( i = = R . id . contacts ) { < nl > startActivity ( new Intent ( getActivity ( ) , ContactsActivity . class ) ) ; < nl > return true ; < nl > - } else if ( i = = R . id . discover ) { < nl > - startActivity ( new Intent ( getActivity ( ) , DiscoverActivity . class ) ) ; < nl > - return true ; < nl > } < nl > < nl > return false ; < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / DiscoverActivity . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / DiscoverActivity . java < nl > deleted file mode 100644 < nl > index 951d794 . . 0000000 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / DiscoverActivity . java < nl > + + + / dev / null < nl > @ @ - 1 , 21 + 0 , 0 @ @ < nl > - package im . actor . sdk . discover ; < nl > - < nl > - import android . os . Bundle ; < nl > - < nl > - import im . actor . sdk . R ; < nl > - import im . actor . sdk . controllers . activity . BaseFragmentActivity ; < nl > - import im . actor . sdk . controllers . group . AddMemberFragment ; < nl > - < nl > - public class DiscoverActivity extends BaseFragmentActivity { < nl > - @ Override < nl > - protected void onCreate ( Bundle savedInstanceState ) { < nl > - super . onCreate ( savedInstanceState ) ; < nl > - < nl > - getSupportActionBar ( ) . setTitle ( " Discover " ) ; < nl > - < nl > - < nl > - if ( savedInstanceState = = null ) { < nl > - showFragment ( new StoreFragment ( ) , false , false ) ; < nl > - } < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / StoreFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / StoreFragment . java < nl > deleted file mode 100644 < nl > index feb6d46 . . 0000000 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / StoreFragment . java < nl > + + + / dev / null < nl > @ @ - 1 , 158 + 0 , 0 @ @ < nl > - package im . actor . sdk . discover ; < nl > - < nl > - import android . content . DialogInterface ; < nl > - import android . graphics . drawable . StateListDrawable ; < nl > - import android . net . Uri ; < nl > - import android . os . Bundle ; < nl > - import android . support . v7 . app . AlertDialog ; < nl > - import android . support . v7 . widget . RecyclerView ; < nl > - import android . view . Gravity ; < nl > - import android . view . LayoutInflater ; < nl > - import android . view . View ; < nl > - import android . view . ViewGroup ; < nl > - import android . webkit . WebView ; < nl > - import android . webkit . WebViewClient ; < nl > - import android . widget . FrameLayout ; < nl > - import android . widget . LinearLayout ; < nl > - import android . widget . TextView ; < nl > - < nl > - import im . actor . core . viewmodel . Command ; < nl > - import im . actor . core . viewmodel . CommandCallback ; < nl > - import im . actor . sdk . ActorSDK ; < nl > - import im . actor . sdk . R ; < nl > - import im . actor . sdk . controllers . Intents ; < nl > - import im . actor . sdk . controllers . fragment . BaseFragment ; < nl > - import im . actor . sdk . util . Fonts ; < nl > - import im . actor . sdk . util . Screen ; < nl > - import im . actor . sdk . view . SelectorFactory ; < nl > - import im . actor . sdk . view . markdown . AndroidMarkdown ; < nl > - < nl > - import static im . actor . sdk . util . ActorSDKMessenger . messenger ; < nl > - < nl > - public class StoreFragment extends BaseFragment { < nl > - < nl > - private RecyclerView . OnScrollListener onScrollListener ; < nl > - < nl > - @ Override < nl > - public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { < nl > - FrameLayout fl = new FrameLayout ( getActivity ( ) ) ; < nl > - fl . setPadding ( 0 , Screen . dp ( 56 ) , 0 , 0 ) ; < nl > - fl . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getMainBackgroundColor ( ) ) ; < nl > - final TextView placeHolder = new TextView ( getActivity ( ) ) ; < nl > - placeHolder . setGravity ( Gravity . CENTER ) ; < nl > - placeHolder . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getMainBackgroundColor ( ) ) ; < nl > - placeHolder . setText ( R . string . progress _ common ) ; < nl > - placeHolder . setTextSize ( 18 ) ; < nl > - placeHolder . setTextColor ( ActorSDK . sharedActor ( ) . style . getTextSecondaryColor ( ) ) ; < nl > - < nl > - final WebView wv = new WebView ( getActivity ( ) ) ; < nl > - wv . setVisibility ( View . INVISIBLE ) ; < nl > - < nl > - final FrameLayout buttonRetry = new FrameLayout ( getActivity ( ) ) ; < nl > - buttonRetry . setBackgroundResource ( R . drawable . shadow _ square _ 3 ) ; < nl > - final TextView retryBtnText = new TextView ( getActivity ( ) ) ; < nl > - buttonRetry . addView ( retryBtnText , FrameLayout . LayoutParams . WRAP _ CONTENT , Screen . dp ( 48 ) ) ; < nl > - StateListDrawable states = SelectorFactory . get ( ActorSDK . sharedActor ( ) . style . getMainColor ( ) , getActivity ( ) ) ; < nl > - retryBtnText . setBackgroundDrawable ( states ) ; < nl > - retryBtnText . setText ( R . string . dialog _ try _ again ) ; < nl > - retryBtnText . setTextColor ( ActorSDK . sharedActor ( ) . style . getTextPrimaryInvColor ( ) ) ; < nl > - retryBtnText . setTypeface ( Fonts . medium ( ) ) ; < nl > - retryBtnText . setTextSize ( 17 ) ; < nl > - retryBtnText . setGravity ( Gravity . CENTER ) ; < nl > - retryBtnText . setAllCaps ( true ) ; < nl > - retryBtnText . setPadding ( Screen . dp ( 24 ) , 0 , Screen . dp ( 24 ) , 0 ) ; < nl > - buttonRetry . setVisibility ( View . INVISIBLE ) ; < nl > - buttonRetry . setOnClickListener ( new View . OnClickListener ( ) { < nl > - @ Override < nl > - public void onClick ( View v ) { < nl > - showView ( placeHolder ) ; < nl > - hideView ( buttonRetry ) ; < nl > - hideView ( wv ) ; < nl > - wv . loadUrl ( wv . getUrl ( ) ) ; < nl > - } < nl > - } ) ; < nl > - < nl > - fl . addView ( placeHolder , new FrameLayout . LayoutParams ( FrameLayout . LayoutParams . WRAP _ CONTENT , LinearLayout . LayoutParams . WRAP _ CONTENT , Gravity . CENTER ) ) ; < nl > - fl . addView ( wv , FrameLayout . LayoutParams . MATCH _ PARENT , FrameLayout . LayoutParams . MATCH _ PARENT ) ; < nl > - fl . addView ( buttonRetry , new FrameLayout . LayoutParams ( ViewGroup . LayoutParams . WRAP _ CONTENT , ViewGroup . LayoutParams . WRAP _ CONTENT , Gravity . CENTER ) ) ; < nl > - < nl > - wv . getSettings ( ) . setJavaScriptEnabled ( true ) ; < nl > - wv . setWebViewClient ( new WebViewClient ( ) { < nl > - < nl > - boolean errorHandled = false ; < nl > - < nl > - @ Override < nl > - public void onPageFinished ( WebView view , String url ) { < nl > - if ( wv . getVisibility ( ) ! = View . VISIBLE & & ! errorHandled ) { < nl > - showView ( wv ) ; < nl > - hideView ( placeHolder ) ; < nl > - hideView ( buttonRetry ) ; < nl > - } < nl > - errorHandled = false ; < nl > - super . onPageFinished ( view , url ) ; < nl > - } < nl > - < nl > - < nl > - @ Override < nl > - public void onReceivedError ( WebView view , int errorCode , String description , String failingUrl ) { < nl > - errorHandled = true ; < nl > - hideView ( wv ) ; < nl > - showView ( buttonRetry ) ; < nl > - hideView ( placeHolder ) ; < nl > - super . onReceivedError ( view , errorCode , description , failingUrl ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public boolean shouldOverrideUrlLoading ( WebView view , String url ) { < nl > - if ( url . startsWith ( " group : / / " ) ) { < nl > - final String token = url . substring ( 8 ) ; < nl > - AlertDialog . Builder builder = new AlertDialog . Builder ( getActivity ( ) ) ; < nl > - builder . setMessage ( " Join " ) < nl > - . setPositiveButton ( R . string . dialog _ ok , new DialogInterface . OnClickListener ( ) { < nl > - @ Override < nl > - public void onClick ( DialogInterface dialog , int which ) { < nl > - joinGroup ( token ) ; < nl > - dialog . dismiss ( ) ; < nl > - } < nl > - } ) < nl > - . setNegativeButton ( R . string . dialog _ cancel , new DialogInterface . OnClickListener ( ) { < nl > - @ Override < nl > - public void onClick ( DialogInterface dialog , int which ) { < nl > - dialog . cancel ( ) ; < nl > - } < nl > - } ) < nl > - . show ( ) ; < nl > - return true ; < nl > - } else if ( url . startsWith ( " user : / / " ) ) { < nl > - String id = url . substring ( 7 ) ; < nl > - execute ( messenger ( ) . findUsers ( id ) ) ; < nl > - return true ; < nl > - } < nl > - < nl > - AndroidMarkdown . buildChromeIntent ( ) . launchUrl ( getActivity ( ) , Uri . parse ( url ) ) ; < nl > - return true ; < nl > - } < nl > - } ) ; < nl > - wv . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getMainBackgroundColor ( ) ) ; < nl > - < nl > - wv . loadUrl ( " http : / / actorapp . github . io / store / " ) ; < nl > - return fl ; < nl > - } < nl > - < nl > - private void joinGroup ( String token ) { < nl > - Command < Integer > cmd = messenger ( ) . joinGroupViaToken ( token ) ; < nl > - if ( cmd ! = null ) { < nl > - execute ( cmd , im . actor . sdk . R . string . invite _ link _ title , new CommandCallback < Integer > ( ) { < nl > - @ Override < nl > - public void onResult ( Integer res ) { < nl > - getActivity ( ) . startActivity ( Intents . openGroupDialog ( res , true , getActivity ( ) ) ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onError ( Exception e ) { < nl > - < nl > - } < nl > - } ) ; < nl > - } < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / res / menu / main . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / res / menu / main . xml < nl > index f894153 . . fa4bd7b 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / res / menu / main . xml < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / res / menu / main . xml < nl > @ @ - 23 , 9 + 23 , 4 @ @ < nl > android : id = " @ + id / profile " < nl > android : title = " Profile " < nl > app : showAsAction = " never " / > < nl > - < nl > - < item < nl > - android : id = " @ + id / discover " < nl > - android : title = " Discover " < nl > - app : showAsAction = " never " / > < nl > < / menu > < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > index 7bf870f . . e3570c2 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > @ @ - 289 , 24 + 289 , 12 @ @ public class RouterActor extends ModuleActor { < nl > hasCurrentMention = true ; < nl > } < nl > } < nl > - int messagesCount = 0 ; < nl > - int dialogsCount = 0 ; < nl > - for ( Peer activePeer : activeDialogStorage . getAllPeers ( ) ) { < nl > - int activeDialogueUnreadCount = conversationStates . getValue ( activePeer . getUnuqueId ( ) ) . getUnreadCount ( ) ; < nl > - if ( activeDialogueUnreadCount > 0 ) { < nl > - dialogsCount + + ; < nl > - messagesCount + = activeDialogueUnreadCount ; < nl > - } < nl > - } < nl > - < nl > context ( ) . getNotificationsModule ( ) . onInMessage ( < nl > peer , < nl > m . getSenderId ( ) , < nl > m . getSortDate ( ) , < nl > ContentDescription . fromContent ( m . getContent ( ) ) , < nl > - hasCurrentMention , < nl > - messagesCount , < nl > - dialogsCount ) ; < nl > + hasCurrentMention ) ; < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / ActiveDialogStorage . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / ActiveDialogStorage . java < nl > index f509bf0 . . 51d120a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / ActiveDialogStorage . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / ActiveDialogStorage . java < nl > @ @ - 3 , 7 + 3 , 6 @ @ package im . actor . core . modules . messaging . router . entity ; < nl > import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > < nl > - import im . actor . core . entity . Peer ; < nl > import im . actor . runtime . bser . BserObject ; < nl > import im . actor . runtime . bser . BserValues ; < nl > import im . actor . runtime . bser . BserWriter ; < nl > @ @ - 51 , 14 + 50 , 6 @ @ public class ActiveDialogStorage extends BserObject { < nl > return groups ; < nl > } < nl > < nl > - public ArrayList < Peer > getAllPeers ( ) { < nl > - ArrayList < Peer > peers = new ArrayList < > ( ) ; < nl > - for ( ActiveDialogGroup group : groups ) { < nl > - peers . addAll ( group . getPeers ( ) ) ; < nl > - } < nl > - return peers ; < nl > - } < nl > - < nl > @ Override < nl > public void parse ( BserValues values ) throws IOException { < nl > isLoaded = values . getBool ( 1 ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsActor . java < nl > index 20add75 . . 5eb012f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsActor . java < nl > @ @ - 45 , 8 + 45 , 7 @ @ public class NotificationsActor extends ModuleActor { < nl > / * * < nl > * KeyValue storage name for actor state < nl > * / < nl > - private static final String STORAGE _ NOTIFICATIONS _ DEPRECATED = " notifications " ; < nl > - private static final String STORAGE _ NOTIFICATIONS = " limited _ notifications " ; < nl > + private static final String STORAGE _ NOTIFICATIONS = " notifications " ; < nl > < nl > < nl > / * * < nl > @ @ - 58 , 10 + 57 , 6 @ @ public class NotificationsActor extends ModuleActor { < nl > * / < nl > private PendingStorage pendingStorage ; < nl > / * * < nl > - * in memory not limited pending storage < nl > - * / < nl > - private ArrayList < PendingNotification > allPendingNotifications = new ArrayList < PendingNotification > ( ) ; < nl > - / * * < nl > * Cached read states < nl > * / < nl > private HashMap < Peer , Long > readStates = new HashMap < > ( ) ; < nl > @ @ - 111 , 11 + 106 , 11 @ @ public class NotificationsActor extends ModuleActor { < nl > storage = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ NOTIFICATIONS ) ) ; < nl > < nl > / / Loading pending messages < nl > - pendingStorage = new PendingStorage ( MAX _ NOTIFICATION _ COUNT ) ; < nl > + pendingStorage = new PendingStorage ( ) ; < nl > byte [ ] storage = this . storage . get ( 0 ) ; < nl > if ( storage ! = null ) { < nl > try { < nl > - pendingStorage = PendingStorage . fromBytes ( storage , MAX _ NOTIFICATION _ COUNT ) ; < nl > + pendingStorage = PendingStorage . fromBytes ( storage ) ; < nl > } catch ( IOException e ) { < nl > e . printStackTrace ( ) ; < nl > } < nl > @ @ - 136 , 7 + 131 , 7 @ @ public class NotificationsActor extends ModuleActor { < nl > * @ param hasCurrentUserMention does message have user mention < nl > * / < nl > public void onNewMessage ( Peer peer , int sender , long date , ContentDescription description , < nl > - boolean hasCurrentUserMention , int messagesCount , int dialogsCount ) { < nl > + boolean hasCurrentUserMention ) { < nl > < nl > / / Check if message already read to avoid incorrect notifications < nl > / / for already read messages < nl > @ @ - 149 , 12 + 144 , 8 @ @ public class NotificationsActor extends ModuleActor { < nl > < nl > / / Save to pending storage < nl > if ( isEnabled ) { < nl > - List < PendingNotification > pendingNotifications = getNotifications ( ) ; < nl > - PendingNotification pendingNotification = new PendingNotification ( peer , sender , date , description ) ; < nl > - pendingNotifications . add ( pendingNotification ) ; < nl > - pendingStorage . setMessagesCount ( messagesCount ) ; < nl > - pendingStorage . setDialogsCount ( dialogsCount ) ; < nl > - allPendingNotifications . add ( pendingNotification ) ; < nl > + List < PendingNotification > allPending = getNotifications ( ) ; < nl > + allPending . add ( new PendingNotification ( peer , sender , date , description ) ) ; < nl > saveStorage ( ) ; < nl > } < nl > < nl > @ @ - 244 , 12 + 235 , 21 @ @ public class NotificationsActor extends ModuleActor { < nl > } < nl > < nl > / / Removing read messages from pending storage < nl > - getNotifications ( ) . clear ( ) ; < nl > - pendingStorage . setMessagesCount ( 0 ) ; < nl > - pendingStorage . setDialogsCount ( 0 ) ; < nl > - allPendingNotifications . clear ( ) ; < nl > - saveStorage ( ) ; < nl > - updateNotification ( ) ; < nl > + boolean isChanged = false ; < nl > + List < PendingNotification > notifications = pendingStorage . getNotifications ( ) ; < nl > + for ( PendingNotification p : notifications . toArray ( new PendingNotification [ notifications . size ( ) ] ) ) { < nl > + if ( p . getPeer ( ) . equals ( peer ) & & p . getDate ( ) < = fromDate ) { < nl > + pendingStorage . getNotifications ( ) . remove ( p ) ; < nl > + isChanged = true ; < nl > + } < nl > + } < nl > + < nl > + / / If there are some messages < nl > + / / Save pending and update notification < nl > + if ( isChanged ) { < nl > + saveStorage ( ) ; < nl > + updateNotification ( ) ; < nl > + } < nl > < nl > / / Setting last read date < nl > setLastReadDate ( peer , fromDate ) ; < nl > @ @ - 398 , 25 + 398 , 36 @ @ public class NotificationsActor extends ModuleActor { < nl > * / < nl > private void performNotificationImp ( boolean performUpdate ) { < nl > / / Getting pending notifications list < nl > - List < PendingNotification > destNotifications = getNotifications ( ) ; < nl > - if ( destNotifications . size ( ) = = 0 ) { < nl > + List < PendingNotification > allPending = getNotifications ( ) ; < nl > + int messagesCount = allPending . size ( ) ; < nl > + if ( messagesCount = = 0 ) { < nl > hideNotification ( ) ; < nl > return ; < nl > } < nl > < nl > + / / Destination notifications list < nl > + List < PendingNotification > destNotifications = last ( allPending , MAX _ NOTIFICATION _ COUNT ) ; < nl > + < nl > / / Converting to PendingNotifications < nl > List < Notification > res = new ArrayList < > ( ) ; < nl > for ( PendingNotification p : destNotifications ) { < nl > res . add ( new Notification ( p . getPeer ( ) , p . getSender ( ) , p . getContent ( ) ) ) ; < nl > } < nl > < nl > + / / Getting count of unique peers < nl > + HashSet < Peer > peers = new HashSet < > ( ) ; < nl > + for ( PendingNotification p : allPending ) { < nl > + peers . add ( p . getPeer ( ) ) ; < nl > + } < nl > + int chatsCount = peers . size ( ) ; < nl > + < nl > / / Performing notifications < nl > if ( performUpdate ) { < nl > config ( ) . getNotificationProvider ( ) . onUpdateNotification ( context ( ) . getMessenger ( ) , res , < nl > - pendingStorage . getMessagesCount ( ) , pendingStorage . getDialogsCount ( ) ) ; < nl > + messagesCount , chatsCount ) ; < nl > } else { < nl > config ( ) . getNotificationProvider ( ) . onNotification ( context ( ) . getMessenger ( ) , res , < nl > - pendingStorage . getMessagesCount ( ) , pendingStorage . getDialogsCount ( ) ) ; < nl > + messagesCount , chatsCount ) ; < nl > } < nl > } < nl > < nl > @ @ - 554 , 8 + 565 , 7 @ @ public class NotificationsActor extends ModuleActor { < nl > if ( message instanceof NewMessage ) { < nl > NewMessage newMessage = ( NewMessage ) message ; < nl > onNewMessage ( newMessage . getPeer ( ) , newMessage . getSender ( ) , newMessage . getSortDate ( ) , < nl > - newMessage . getContentDescription ( ) , newMessage . getHasCurrentUserMention ( ) , < nl > - newMessage . getUnreadMessagesCount ( ) , newMessage . getUnreadDialogsCount ( ) ) ; < nl > + newMessage . getContentDescription ( ) , newMessage . getHasCurrentUserMention ( ) ) ; < nl > } else if ( message instanceof MessagesRead ) { < nl > MessagesRead read = ( MessagesRead ) message ; < nl > onMessagesRead ( read . getPeer ( ) , read . getFromDate ( ) ) ; < nl > @ @ - 595 , 18 + 605 , 14 @ @ public class NotificationsActor extends ModuleActor { < nl > private long sortDate ; < nl > private ContentDescription contentDescription ; < nl > private boolean hasCurrentUserMention ; < nl > - private int unreadMessagesCount ; < nl > - private int unreadDialogsCount ; < nl > < nl > public NewMessage ( Peer peer , int sender , long sortDate , ContentDescription contentDescription , < nl > - boolean hasCurrentUserMention , int unreadMessagesCount , int unreadDialogsCount ) { < nl > + boolean hasCurrentUserMention ) { < nl > this . peer = peer ; < nl > this . sender = sender ; < nl > this . sortDate = sortDate ; < nl > this . contentDescription = contentDescription ; < nl > this . hasCurrentUserMention = hasCurrentUserMention ; < nl > - this . unreadMessagesCount = unreadMessagesCount ; < nl > - this . unreadDialogsCount = unreadDialogsCount ; < nl > } < nl > < nl > public Peer getPeer ( ) { < nl > @ @ - 628 , 14 + 634 , 6 @ @ public class NotificationsActor extends ModuleActor { < nl > public boolean getHasCurrentUserMention ( ) { < nl > return hasCurrentUserMention ; < nl > } < nl > - < nl > - public int getUnreadMessagesCount ( ) { < nl > - return unreadMessagesCount ; < nl > - } < nl > - < nl > - public int getUnreadDialogsCount ( ) { < nl > - return unreadDialogsCount ; < nl > - } < nl > } < nl > < nl > public static class MessagesRead { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsModule . java < nl > index 0bc7b5e . . afeda43 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsModule . java < nl > @ @ - 35 , 8 + 35 , 8 @ @ public class NotificationsModule extends AbsModule { < nl > notificationsActor . send ( new NotificationsActor . MessagesRead ( peer , fromDate ) ) ; < nl > } < nl > < nl > - public void onInMessage ( Peer peer , int sender , long sortDate , ContentDescription contentDescription , boolean hasCurrentUserMention , int unreadMessagesCount , int unreadDialogsCount ) { < nl > - notificationsActor . send ( new NotificationsActor . NewMessage ( peer , sender , sortDate , contentDescription , hasCurrentUserMention , unreadMessagesCount , unreadDialogsCount ) ) ; < nl > + public void onInMessage ( Peer peer , int sender , long sortDate , ContentDescription contentDescription , boolean hasCurrentUserMention ) { < nl > + notificationsActor . send ( new NotificationsActor . NewMessage ( peer , sender , sortDate , contentDescription , hasCurrentUserMention ) ) ; < nl > } < nl > < nl > public void pauseNotifications ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsQueue . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsQueue . java < nl > deleted file mode 100644 < nl > index 5ad7acf . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsQueue . java < nl > + + + / dev / null < nl > @ @ - 1 , 26 + 0 , 0 @ @ < nl > - package im . actor . core . modules . notifications ; < nl > - < nl > - import java . util . Collection ; < nl > - import java . util . LinkedList ; < nl > - < nl > - public class NotificationsQueue < E > extends LinkedList < E > { < nl > - private int limit ; < nl > - < nl > - public NotificationsQueue ( int limit ) { < nl > - this . limit = limit ; < nl > - } < nl > - < nl > - @ Override < nl > - public boolean add ( E o ) { < nl > - super . add ( o ) ; < nl > - while ( size ( ) > limit ) { < nl > - super . remove ( ) ; < nl > - } < nl > - return true ; < nl > - } < nl > - < nl > - public NotificationsQueue addAllChain ( Collection c ) { < nl > - super . addAll ( c ) ; < nl > - return this ; < nl > - } < nl > - } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / entity / PendingStorage . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / entity / PendingStorage . java < nl > index b3fede8 . . 089c4a9 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / entity / PendingStorage . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / entity / PendingStorage . java < nl > @ @ - 8 , 7 + 8 , 6 @ @ import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > import java . util . List ; < nl > < nl > - import im . actor . core . modules . notifications . NotificationsQueue ; < nl > import im . actor . runtime . bser . Bser ; < nl > import im . actor . runtime . bser . BserObject ; < nl > import im . actor . runtime . bser . BserValues ; < nl > @ @ - 16 , 41 + 15 , 20 @ @ import im . actor . runtime . bser . BserWriter ; < nl > < nl > public class PendingStorage extends BserObject { < nl > < nl > - private int limit ; < nl > - private int messagesCount = 0 ; < nl > - private int dialogsCount = 0 ; < nl > - < nl > - public static PendingStorage fromBytes ( byte [ ] data , int maxMessagesLimit ) throws IOException { < nl > - return Bser . parse ( new PendingStorage ( maxMessagesLimit ) , data ) ; < nl > + public static PendingStorage fromBytes ( byte [ ] data ) throws IOException { < nl > + return Bser . parse ( new PendingStorage ( ) , data ) ; < nl > } < nl > < nl > - private NotificationsQueue < PendingNotification > notifications ; < nl > + private List < PendingNotification > notifications ; < nl > < nl > - public PendingStorage ( int maxMessagesLimit ) { < nl > - limit = maxMessagesLimit ; < nl > - notifications = new NotificationsQueue < > ( limit ) ; < nl > + public PendingStorage ( ) { < nl > + notifications = new ArrayList < > ( ) ; < nl > } < nl > < nl > - public NotificationsQueue < PendingNotification > getNotifications ( ) { < nl > + public List < PendingNotification > getNotifications ( ) { < nl > return notifications ; < nl > } < nl > < nl > - public int getMessagesCount ( ) { < nl > - return messagesCount ; < nl > - } < nl > - < nl > - public void setMessagesCount ( int messagesCount ) { < nl > - this . messagesCount = messagesCount ; < nl > - } < nl > - < nl > - public int getDialogsCount ( ) { < nl > - return dialogsCount ; < nl > - } < nl > - < nl > - public void setDialogsCount ( int dialogsCount ) { < nl > - this . dialogsCount = dialogsCount ; < nl > - } < nl > - < nl > @ Override < nl > public void parse ( BserValues values ) throws IOException { < nl > int count = values . getRepeatedCount ( 1 ) ; < nl > @ @ - 60 , 17 + 38 , 12 @ @ public class PendingStorage extends BserObject { < nl > stubs . add ( new PendingNotification ( ) ) ; < nl > < nl > } < nl > - notifications = new NotificationsQueue < > ( limit ) . addAllChain ( values . getRepeatedObj ( 1 , stubs ) ) ; < nl > + notifications = values . getRepeatedObj ( 1 , stubs ) ; < nl > } < nl > - messagesCount = values . getInt ( 2 ) ; < nl > - dialogsCount = values . getInt ( 3 ) ; < nl > - < nl > } < nl > < nl > @ Override < nl > public void serialize ( BserWriter writer ) throws IOException { < nl > writer . writeRepeatedObj ( 1 , notifications ) ; < nl > - writer . writeInt ( 2 , messagesCount ) ; < nl > - writer . writeInt ( 3 , dialogsCount ) ; < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml < nl > index 9a0a041 . . 19def96 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml < nl > @ @ - 297 , 6 + 297 , 8 @ @ < nl > android : showOnLockScreen = " true " < nl > android : theme = " @ style / CallTheme " / > < nl > < nl > + < activity android : name = " . discover . DiscoverActivity " / > < nl > + < nl > < service < nl > android : name = " im . actor . sdk . services . KeepAliveService " < nl > android : enabled = " true " < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / root / MainPhoneController . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / root / MainPhoneController . java < nl > index 1687a09 . . edba108 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / root / MainPhoneController . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / root / MainPhoneController . java < nl > @ @ - 46 , 6 + 46 , 7 @ @ import im . actor . sdk . controllers . contacts . ContactsFragment ; < nl > import im . actor . sdk . controllers . dialogs . DialogsFragment ; < nl > import im . actor . sdk . controllers . fragment . help . HelpActivity ; < nl > import im . actor . sdk . controllers . fragment . main . SearchAdapter ; < nl > + import im . actor . sdk . discover . DiscoverActivity ; < nl > import im . actor . sdk . util . Screen ; < nl > import im . actor . sdk . util . Fonts ; < nl > import im . actor . sdk . view . adapters . FragmentNoMenuStatePagerAdapter ; < nl > @ @ - 545 , 6 + 546 , 9 @ @ public class MainPhoneController extends MainBaseController { < nl > } else if ( i = = R . id . contacts ) { < nl > startActivity ( new Intent ( getActivity ( ) , ContactsActivity . class ) ) ; < nl > return true ; < nl > + } else if ( i = = R . id . discover ) { < nl > + startActivity ( new Intent ( getActivity ( ) , DiscoverActivity . class ) ) ; < nl > + return true ; < nl > } < nl > < nl > return false ; < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / DiscoverActivity . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / DiscoverActivity . java < nl > new file mode 100644 < nl > index 0000000 . . 951d794 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / DiscoverActivity . java < nl > @ @ - 0 , 0 + 1 , 21 @ @ < nl > + package im . actor . sdk . discover ; < nl > + < nl > + import android . os . Bundle ; < nl > + < nl > + import im . actor . sdk . R ; < nl > + import im . actor . sdk . controllers . activity . BaseFragmentActivity ; < nl > + import im . actor . sdk . controllers . group . AddMemberFragment ; < nl > + < nl > + public class DiscoverActivity extends BaseFragmentActivity { < nl > + @ Override < nl > + protected void onCreate ( Bundle savedInstanceState ) { < nl > + super . onCreate ( savedInstanceState ) ; < nl > + < nl > + getSupportActionBar ( ) . setTitle ( " Discover " ) ; < nl > + < nl > + < nl > + if ( savedInstanceState = = null ) { < nl > + showFragment ( new StoreFragment ( ) , false , false ) ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / StoreFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / StoreFragment . java < nl > new file mode 100644 < nl > index 0000000 . . feb6d46 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / StoreFragment . java < nl > @ @ - 0 , 0 + 1 , 158 @ @ < nl > + package im . actor . sdk . discover ; < nl > + < nl > + import android . content . DialogInterface ; < nl > + import android . graphics . drawable . StateListDrawable ; < nl > + import android . net . Uri ; < nl > + import android . os . Bundle ; < nl > + import android . support . v7 . app . AlertDialog ; < nl > + import android . support . v7 . widget . RecyclerView ; < nl > + import android . view . Gravity ; < nl > + import android . view . LayoutInflater ; < nl > + import android . view . View ; < nl > + import android . view . ViewGroup ; < nl > + import android . webkit . WebView ; < nl > + import android . webkit . WebViewClient ; < nl > + import android . widget . FrameLayout ; < nl > + import android . widget . LinearLayout ; < nl > + import android . widget . TextView ; < nl > + < nl > + import im . actor . core . viewmodel . Command ; < nl > + import im . actor . core . viewmodel . CommandCallback ; < nl > + import im . actor . sdk . ActorSDK ; < nl > + import im . actor . sdk . R ; < nl > + import im . actor . sdk . controllers . Intents ; < nl > + import im . actor . sdk . controllers . fragment . BaseFragment ; < nl > + import im . actor . sdk . util . Fonts ; < nl > + import im . actor . sdk . util . Screen ; < nl > + import im . actor . sdk . view . SelectorFactory ; < nl > + import im . actor . sdk . view . markdown . AndroidMarkdown ; < nl > + < nl > + import static im . actor . sdk . util . ActorSDKMessenger . messenger ; < nl > + < nl > + public class StoreFragment extends BaseFragment { < nl > + < nl > + private RecyclerView . OnScrollListener onScrollListener ; < nl > + < nl > + @ Override < nl > + public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { < nl > + FrameLayout fl = new FrameLayout ( getActivity ( ) ) ; < nl > + fl . setPadding ( 0 , Screen . dp ( 56 ) , 0 , 0 ) ; < nl > + fl . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getMainBackgroundColor ( ) ) ; < nl > + final TextView placeHolder = new TextView ( getActivity ( ) ) ; < nl > + placeHolder . setGravity ( Gravity . CENTER ) ; < nl > + placeHolder . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getMainBackgroundColor ( ) ) ; < nl > + placeHolder . setText ( R . string . progress _ common ) ; < nl > + placeHolder . setTextSize ( 18 ) ; < nl > + placeHolder . setTextColor ( ActorSDK . sharedActor ( ) . style . getTextSecondaryColor ( ) ) ; < nl > + < nl > + final WebView wv = new WebView ( getActivity ( ) ) ; < nl > + wv . setVisibility ( View . INVISIBLE ) ; < nl > + < nl > + final FrameLayout buttonRetry = new FrameLayout ( getActivity ( ) ) ; < nl > + buttonRetry . setBackgroundResource ( R . drawable . shadow _ square _ 3 ) ; < nl > + final TextView retryBtnText = new TextView ( getActivity ( ) ) ; < nl > + buttonRetry . addView ( retryBtnText , FrameLayout . LayoutParams . WRAP _ CONTENT , Screen . dp ( 48 ) ) ; < nl > + StateListDrawable states = SelectorFactory . get ( ActorSDK . sharedActor ( ) . style . getMainColor ( ) , getActivity ( ) ) ; < nl > + retryBtnText . setBackgroundDrawable ( states ) ; < nl > + retryBtnText . setText ( R . string . dialog _ try _ again ) ; < nl > + retryBtnText . setTextColor ( ActorSDK . sharedActor ( ) . style . getTextPrimaryInvColor ( ) ) ; < nl > + retryBtnText . setTypeface ( Fonts . medium ( ) ) ; < nl > + retryBtnText . setTextSize ( 17 ) ; < nl > + retryBtnText . setGravity ( Gravity . CENTER ) ; < nl > + retryBtnText . setAllCaps ( true ) ; < nl > + retryBtnText . setPadding ( Screen . dp ( 24 ) , 0 , Screen . dp ( 24 ) , 0 ) ; < nl > + buttonRetry . setVisibility ( View . INVISIBLE ) ; < nl > + buttonRetry . setOnClickListener ( new View . OnClickListener ( ) { < nl > + @ Override < nl > + public void onClick ( View v ) { < nl > + showView ( placeHolder ) ; < nl > + hideView ( buttonRetry ) ; < nl > + hideView ( wv ) ; < nl > + wv . loadUrl ( wv . getUrl ( ) ) ; < nl > + } < nl > + } ) ; < nl > + < nl > + fl . addView ( placeHolder , new FrameLayout . LayoutParams ( FrameLayout . LayoutParams . WRAP _ CONTENT , LinearLayout . LayoutParams . WRAP _ CONTENT , Gravity . CENTER ) ) ; < nl > + fl . addView ( wv , FrameLayout . LayoutParams . MATCH _ PARENT , FrameLayout . LayoutParams . MATCH _ PARENT ) ; < nl > + fl . addView ( buttonRetry , new FrameLayout . LayoutParams ( ViewGroup . LayoutParams . WRAP _ CONTENT , ViewGroup . LayoutParams . WRAP _ CONTENT , Gravity . CENTER ) ) ; < nl > + < nl > + wv . getSettings ( ) . setJavaScriptEnabled ( true ) ; < nl > + wv . setWebViewClient ( new WebViewClient ( ) { < nl > + < nl > + boolean errorHandled = false ; < nl > + < nl > + @ Override < nl > + public void onPageFinished ( WebView view , String url ) { < nl > + if ( wv . getVisibility ( ) ! = View . VISIBLE & & ! errorHandled ) { < nl > + showView ( wv ) ; < nl > + hideView ( placeHolder ) ; < nl > + hideView ( buttonRetry ) ; < nl > + } < nl > + errorHandled = false ; < nl > + super . onPageFinished ( view , url ) ; < nl > + } < nl > + < nl > + < nl > + @ Override < nl > + public void onReceivedError ( WebView view , int errorCode , String description , String failingUrl ) { < nl > + errorHandled = true ; < nl > + hideView ( wv ) ; < nl > + showView ( buttonRetry ) ; < nl > + hideView ( placeHolder ) ; < nl > + super . onReceivedError ( view , errorCode , description , failingUrl ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public boolean shouldOverrideUrlLoading ( WebView view , String url ) { < nl > + if ( url . startsWith ( " group : / / " ) ) { < nl > + final String token = url . substring ( 8 ) ; < nl > + AlertDialog . Builder builder = new AlertDialog . Builder ( getActivity ( ) ) ; < nl > + builder . setMessage ( " Join " ) < nl > + . setPositiveButton ( R . string . dialog _ ok , new DialogInterface . OnClickListener ( ) { < nl > + @ Override < nl > + public void onClick ( DialogInterface dialog , int which ) { < nl > + joinGroup ( token ) ; < nl > + dialog . dismiss ( ) ; < nl > + } < nl > + } ) < nl > + . setNegativeButton ( R . string . dialog _ cancel , new DialogInterface . OnClickListener ( ) { < nl > + @ Override < nl > + public void onClick ( DialogInterface dialog , int which ) { < nl > + dialog . cancel ( ) ; < nl > + } < nl > + } ) < nl > + . show ( ) ; < nl > + return true ; < nl > + } else if ( url . startsWith ( " user : / / " ) ) { < nl > + String id = url . substring ( 7 ) ; < nl > + execute ( messenger ( ) . findUsers ( id ) ) ; < nl > + return true ; < nl > + } < nl > + < nl > + AndroidMarkdown . buildChromeIntent ( ) . launchUrl ( getActivity ( ) , Uri . parse ( url ) ) ; < nl > + return true ; < nl > + } < nl > + } ) ; < nl > + wv . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getMainBackgroundColor ( ) ) ; < nl > + < nl > + wv . loadUrl ( " http : / / actorapp . github . io / store / " ) ; < nl > + return fl ; < nl > + } < nl > + < nl > + private void joinGroup ( String token ) { < nl > + Command < Integer > cmd = messenger ( ) . joinGroupViaToken ( token ) ; < nl > + if ( cmd ! = null ) { < nl > + execute ( cmd , im . actor . sdk . R . string . invite _ link _ title , new CommandCallback < Integer > ( ) { < nl > + @ Override < nl > + public void onResult ( Integer res ) { < nl > + getActivity ( ) . startActivity ( Intents . openGroupDialog ( res , true , getActivity ( ) ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + < nl > + } < nl > + } ) ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / res / menu / main . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / res / menu / main . xml < nl > index fa4bd7b . . f894153 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / res / menu / main . xml < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / res / menu / main . xml < nl > @ @ - 23 , 4 + 23 , 9 @ @ < nl > android : id = " @ + id / profile " < nl > android : title = " Profile " < nl > app : showAsAction = " never " / > < nl > + < nl > + < item < nl > + android : id = " @ + id / discover " < nl > + android : title = " Discover " < nl > + app : showAsAction = " never " / > < nl > < / menu > < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > index e3570c2 . . 7bf870f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > @ @ - 289 , 12 + 289 , 24 @ @ public class RouterActor extends ModuleActor { < nl > hasCurrentMention = true ; < nl > } < nl > } < nl > + int messagesCount = 0 ; < nl > + int dialogsCount = 0 ; < nl > + for ( Peer activePeer : activeDialogStorage . getAllPeers ( ) ) { < nl > + int activeDialogueUnreadCount = conversationStates . getValue ( activePeer . getUnuqueId ( ) ) . getUnreadCount ( ) ; < nl > + if ( activeDialogueUnreadCount > 0 ) { < nl > + dialogsCount + + ; < nl > + messagesCount + = activeDialogueUnreadCount ; < nl > + } < nl > + } < nl > + < nl > context ( ) . getNotificationsModule ( ) . onInMessage ( < nl > peer , < nl > m . getSenderId ( ) , < nl > m . getSortDate ( ) , < nl > ContentDescription . fromContent ( m . getContent ( ) ) , < nl > - hasCurrentMention ) ; < nl > + hasCurrentMention , < nl > + messagesCount , < nl > + dialogsCount ) ; < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / ActiveDialogStorage . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / ActiveDialogStorage . java < nl > index 51d120a . . f509bf0 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / ActiveDialogStorage . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / ActiveDialogStorage . java < nl > @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . core . modules . messaging . router . entity ; < nl > import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > < nl > + import im . actor . core . entity . Peer ; < nl > import im . actor . runtime . bser . BserObject ; < nl > import im . actor . runtime . bser . BserValues ; < nl > import im . actor . runtime . bser . BserWriter ; < nl > @ @ - 50 , 6 + 51 , 14 @ @ public class ActiveDialogStorage extends BserObject { < nl > return groups ; < nl > } < nl > < nl > + public ArrayList < Peer > getAllPeers ( ) { < nl > + ArrayList < Peer > peers = new ArrayList < > ( ) ; < nl > + for ( ActiveDialogGroup group : groups ) { < nl > + peers . addAll ( group . getPeers ( ) ) ; < nl > + } < nl > + return peers ; < nl > + } < nl > + < nl > @ Override < nl > public void parse ( BserValues values ) throws IOException { < nl > isLoaded = values . getBool ( 1 ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsActor . java < nl > index 5eb012f . . 20add75 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsActor . java < nl > @ @ - 45 , 7 + 45 , 8 @ @ public class NotificationsActor extends ModuleActor { < nl > / * * < nl > * KeyValue storage name for actor state < nl > * / < nl > - private static final String STORAGE _ NOTIFICATIONS = " notifications " ; < nl > + private static final String STORAGE _ NOTIFICATIONS _ DEPRECATED = " notifications " ; < nl > + private static final String STORAGE _ NOTIFICATIONS = " limited _ notifications " ; < nl > < nl > < nl > / * * < nl > @ @ - 57 , 6 + 58 , 10 @ @ public class NotificationsActor extends ModuleActor { < nl > * / < nl > private PendingStorage pendingStorage ; < nl > / * * < nl > + * in memory not limited pending storage < nl > + * / < nl > + private ArrayList < PendingNotification > allPendingNotifications = new ArrayList < PendingNotification > ( ) ; < nl > + / * * < nl > * Cached read states < nl > * / < nl > private HashMap < Peer , Long > readStates = new HashMap < > ( ) ; < nl > @ @ - 106 , 11 + 111 , 11 @ @ public class NotificationsActor extends ModuleActor { < nl > storage = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ NOTIFICATIONS ) ) ; < nl > < nl > / / Loading pending messages < nl > - pendingStorage = new PendingStorage ( ) ; < nl > + pendingStorage = new PendingStorage ( MAX _ NOTIFICATION _ COUNT ) ; < nl > byte [ ] storage = this . storage . get ( 0 ) ; < nl > if ( storage ! = null ) { < nl > try { < nl > - pendingStorage = PendingStorage . fromBytes ( storage ) ; < nl > + pendingStorage = PendingStorage . fromBytes ( storage , MAX _ NOTIFICATION _ COUNT ) ; < nl > } catch ( IOException e ) { < nl > e . printStackTrace ( ) ; < nl > } < nl > @ @ - 131 , 7 + 136 , 7 @ @ public class NotificationsActor extends ModuleActor { < nl > * @ param hasCurrentUserMention does message have user mention < nl > * / < nl > public void onNewMessage ( Peer peer , int sender , long date , ContentDescription description , < nl > - boolean hasCurrentUserMention ) { < nl > + boolean hasCurrentUserMention , int messagesCount , int dialogsCount ) { < nl > < nl > / / Check if message already read to avoid incorrect notifications < nl > / / for already read messages < nl > @ @ - 144 , 8 + 149 , 12 @ @ public class NotificationsActor extends ModuleActor { < nl > < nl > / / Save to pending storage < nl > if ( isEnabled ) { < nl > - List < PendingNotification > allPending = getNotifications ( ) ; < nl > - allPending . add ( new PendingNotification ( peer , sender , date , description ) ) ; < nl > + List < PendingNotification > pendingNotifications = getNotifications ( ) ; < nl > + PendingNotification pendingNotification = new PendingNotification ( peer , sender , date , description ) ; < nl > + pendingNotifications . add ( pendingNotification ) ; < nl > + pendingStorage . setMessagesCount ( messagesCount ) ; < nl > + pendingStorage . setDialogsCount ( dialogsCount ) ; < nl > + allPendingNotifications . add ( pendingNotification ) ; < nl > saveStorage ( ) ; < nl > } < nl > < nl > @ @ - 235 , 21 + 244 , 12 @ @ public class NotificationsActor extends ModuleActor { < nl > } < nl > < nl > / / Removing read messages from pending storage < nl > - boolean isChanged = false ; < nl > - List < PendingNotification > notifications = pendingStorage . getNotifications ( ) ; < nl > - for ( PendingNotification p : notifications . toArray ( new PendingNotification [ notifications . size ( ) ] ) ) { < nl > - if ( p . getPeer ( ) . equals ( peer ) & & p . getDate ( ) < = fromDate ) { < nl > - pendingStorage . getNotifications ( ) . remove ( p ) ; < nl > - isChanged = true ; < nl > - } < nl > - } < nl > - < nl > - / / If there are some messages < nl > - / / Save pending and update notification < nl > - if ( isChanged ) { < nl > - saveStorage ( ) ; < nl > - updateNotification ( ) ; < nl > - } < nl > + getNotifications ( ) . clear ( ) ; < nl > + pendingStorage . setMessagesCount ( 0 ) ; < nl > + pendingStorage . setDialogsCount ( 0 ) ; < nl > + allPendingNotifications . clear ( ) ; < nl > + saveStorage ( ) ; < nl > + updateNotification ( ) ; < nl > < nl > / / Setting last read date < nl > setLastReadDate ( peer , fromDate ) ; < nl > @ @ - 398 , 36 + 398 , 25 @ @ public class NotificationsActor extends ModuleActor { < nl > * / < nl > private void performNotificationImp ( boolean performUpdate ) { < nl > / / Getting pending notifications list < nl > - List < PendingNotification > allPending = getNotifications ( ) ; < nl > - int messagesCount = allPending . size ( ) ; < nl > - if ( messagesCount = = 0 ) { < nl > + List < PendingNotification > destNotifications = getNotifications ( ) ; < nl > + if ( destNotifications . size ( ) = = 0 ) { < nl > hideNotification ( ) ; < nl > return ; < nl > } < nl > < nl > - / / Destination notifications list < nl > - List < PendingNotification > destNotifications = last ( allPending , MAX _ NOTIFICATION _ COUNT ) ; < nl > - < nl > / / Converting to PendingNotifications < nl > List < Notification > res = new ArrayList < > ( ) ; < nl > for ( PendingNotification p : destNotifications ) { < nl > res . add ( new Notification ( p . getPeer ( ) , p . getSender ( ) , p . getContent ( ) ) ) ; < nl > } < nl > < nl > - / / Getting count of unique peers < nl > - HashSet < Peer > peers = new HashSet < > ( ) ; < nl > - for ( PendingNotification p : allPending ) { < nl > - peers . add ( p . getPeer ( ) ) ; < nl > - } < nl > - int chatsCount = peers . size ( ) ; < nl > - < nl > / / Performing notifications < nl > if ( performUpdate ) { < nl > config ( ) . getNotificationProvider ( ) . onUpdateNotification ( context ( ) . getMessenger ( ) , res , < nl > - messagesCount , chatsCount ) ; < nl > + pendingStorage . getMessagesCount ( ) , pendingStorage . getDialogsCount ( ) ) ; < nl > } else { < nl > config ( ) . getNotificationProvider ( ) . onNotification ( context ( ) . getMessenger ( ) , res , < nl > - messagesCount , chatsCount ) ; < nl > + pendingStorage . getMessagesCount ( ) , pendingStorage . getDialogsCount ( ) ) ; < nl > } < nl > } < nl > < nl > @ @ - 565 , 7 + 554 , 8 @ @ public class NotificationsActor extends ModuleActor { < nl > if ( message instanceof NewMessage ) { < nl > NewMessage newMessage = ( NewMessage ) message ; < nl > onNewMessage ( newMessage . getPeer ( ) , newMessage . getSender ( ) , newMessage . getSortDate ( ) , < nl > - newMessage . getContentDescription ( ) , newMessage . getHasCurrentUserMention ( ) ) ; < nl > + newMessage . getContentDescription ( ) , newMessage . getHasCurrentUserMention ( ) , < nl > + newMessage . getUnreadMessagesCount ( ) , newMessage . getUnreadDialogsCount ( ) ) ; < nl > } else if ( message instanceof MessagesRead ) { < nl > MessagesRead read = ( MessagesRead ) message ; < nl > onMessagesRead ( read . getPeer ( ) , read . getFromDate ( ) ) ; < nl > @ @ - 605 , 14 + 595 , 18 @ @ public class NotificationsActor extends ModuleActor { < nl > private long sortDate ; < nl > private ContentDescription contentDescription ; < nl > private boolean hasCurrentUserMention ; < nl > + private int unreadMessagesCount ; < nl > + private int unreadDialogsCount ; < nl > < nl > public NewMessage ( Peer peer , int sender , long sortDate , ContentDescription contentDescription , < nl > - boolean hasCurrentUserMention ) { < nl > + boolean hasCurrentUserMention , int unreadMessagesCount , int unreadDialogsCount ) { < nl > this . peer = peer ; < nl > this . sender = sender ; < nl > this . sortDate = sortDate ; < nl > this . contentDescription = contentDescription ; < nl > this . hasCurrentUserMention = hasCurrentUserMention ; < nl > + this . unreadMessagesCount = unreadMessagesCount ; < nl > + this . unreadDialogsCount = unreadDialogsCount ; < nl > } < nl > < nl > public Peer getPeer ( ) { < nl > @ @ - 634 , 6 + 628 , 14 @ @ public class NotificationsActor extends ModuleActor { < nl > public boolean getHasCurrentUserMention ( ) { < nl > return hasCurrentUserMention ; < nl > } < nl > + < nl > + public int getUnreadMessagesCount ( ) { < nl > + return unreadMessagesCount ; < nl > + } < nl > + < nl > + public int getUnreadDialogsCount ( ) { < nl > + return unreadDialogsCount ; < nl > + } < nl > } < nl > < nl > public static class MessagesRead { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsModule . java < nl > index afeda43 . . 0bc7b5e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsModule . java < nl > @ @ - 35 , 8 + 35 , 8 @ @ public class NotificationsModule extends AbsModule { < nl > notificationsActor . send ( new NotificationsActor . MessagesRead ( peer , fromDate ) ) ; < nl > } < nl > < nl > - public void onInMessage ( Peer peer , int sender , long sortDate , ContentDescription contentDescription , boolean hasCurrentUserMention ) { < nl > - notificationsActor . send ( new NotificationsActor . NewMessage ( peer , sender , sortDate , contentDescription , hasCurrentUserMention ) ) ; < nl > + public void onInMessage ( Peer peer , int sender , long sortDate , ContentDescription contentDescription , boolean hasCurrentUserMention , int unreadMessagesCount , int unreadDialogsCount ) { < nl > + notificationsActor . send ( new NotificationsActor . NewMessage ( peer , sender , sortDate , contentDescription , hasCurrentUserMention , unreadMessagesCount , unreadDialogsCount ) ) ; < nl > } < nl > < nl > public void pauseNotifications ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsQueue . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsQueue . java < nl > new file mode 100644 < nl > index 0000000 . . 5ad7acf < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsQueue . java < nl > @ @ - 0 , 0 + 1 , 26 @ @ < nl > + package im . actor . core . modules . notifications ; < nl > + < nl > + import java . util . Collection ; < nl > + import java . util . LinkedList ; < nl > + < nl > + public class NotificationsQueue < E > extends LinkedList < E > { < nl > + private int limit ; < nl > + < nl > + public NotificationsQueue ( int limit ) { < nl > + this . limit = limit ; < nl > + } < nl > + < nl > + @ Override < nl > + public boolean add ( E o ) { < nl > + super . add ( o ) ; < nl > + while ( size ( ) > limit ) { < nl > + super . remove ( ) ; < nl > + } < nl > + return true ; < nl > + } < nl > + < nl > + public NotificationsQueue addAllChain ( Collection c ) { < nl > + super . addAll ( c ) ; < nl > + return this ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / entity / PendingStorage . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / entity / PendingStorage . java < nl > index 089c4a9 . . b3fede8 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / entity / PendingStorage . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / entity / PendingStorage . java < nl > @ @ - 8 , 6 + 8 , 7 @ @ import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > import java . util . List ; < nl > < nl > + import im . actor . core . modules . notifications . NotificationsQueue ; < nl > import im . actor . runtime . bser . Bser ; < nl > import im . actor . runtime . bser . BserObject ; < nl > import im . actor . runtime . bser . BserValues ; < nl > @ @ - 15 , 20 + 16 , 41 @ @ import im . actor . runtime . bser . BserWriter ; < nl > < nl > public class PendingStorage extends BserObject { < nl > < nl > - public static PendingStorage fromBytes ( byte [ ] data ) throws IOException { < nl > - return Bser . parse ( new PendingStorage ( ) , data ) ; < nl > + private int limit ; < nl > + private int messagesCount = 0 ; < nl > + private int dialogsCount = 0 ; < nl > + < nl > + public static PendingStorage fromBytes ( byte [ ] data , int maxMessagesLimit ) throws IOException { < nl > + return Bser . parse ( new PendingStorage ( maxMessagesLimit ) , data ) ; < nl > } < nl > < nl > - private List < PendingNotification > notifications ; < nl > + private NotificationsQueue < PendingNotification > notifications ; < nl > < nl > - public PendingStorage ( ) { < nl > - notifications = new ArrayList < > ( ) ; < nl > + public PendingStorage ( int maxMessagesLimit ) { < nl > + limit = maxMessagesLimit ; < nl > + notifications = new NotificationsQueue < > ( limit ) ; < nl > } < nl > < nl > - public List < PendingNotification > getNotifications ( ) { < nl > + public NotificationsQueue < PendingNotification > getNotifications ( ) { < nl > return notifications ; < nl > } < nl > < nl > + public int getMessagesCount ( ) { < nl > + return messagesCount ; < nl > + } < nl > + < nl > + public void setMessagesCount ( int messagesCount ) { < nl > + this . messagesCount = messagesCount ; < nl > + } < nl > + < nl > + public int getDialogsCount ( ) { < nl > + return dialogsCount ; < nl > + } < nl > + < nl > + public void setDialogsCount ( int dialogsCount ) { < nl > + this . dialogsCount = dialogsCount ; < nl > + } < nl > + < nl > @ Override < nl > public void parse ( BserValues values ) throws IOException { < nl > int count = values . getRepeatedCount ( 1 ) ; < nl > @ @ - 38 , 12 + 60 , 17 @ @ public class PendingStorage extends BserObject { < nl > stubs . add ( new PendingNotification ( ) ) ; < nl > < nl > } < nl > - notifications = values . getRepeatedObj ( 1 , stubs ) ; < nl > + notifications = new NotificationsQueue < > ( limit ) . addAllChain ( values . getRepeatedObj ( 1 , stubs ) ) ; < nl > } < nl > + messagesCount = values . getInt ( 2 ) ; < nl > + dialogsCount = values . getInt ( 3 ) ; < nl > + < nl > } < nl > < nl > @ Override < nl > public void serialize ( BserWriter writer ) throws IOException { < nl > writer . writeRepeatedObj ( 1 , notifications ) ; < nl > + writer . writeInt ( 2 , messagesCount ) ; < nl > + writer . writeInt ( 3 , dialogsCount ) ; < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml 
 index 19def96 . . 9a0a041 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml 
 @ @ - 297 , 8 + 297 , 6 @ @ 
 android : showOnLockScreen = " true " 
 android : theme = " @ style / CallTheme " / > 
 
 - < activity android : name = " . discover . DiscoverActivity " / > 
 - 
 < service 
 android : name = " im . actor . sdk . services . KeepAliveService " 
 android : enabled = " true " 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / root / MainPhoneController . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / root / MainPhoneController . java 
 index edba108 . . 1687a09 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / root / MainPhoneController . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / root / MainPhoneController . java 
 @ @ - 46 , 7 + 46 , 6 @ @ import im . actor . sdk . controllers . contacts . ContactsFragment ; 
 import im . actor . sdk . controllers . dialogs . DialogsFragment ; 
 import im . actor . sdk . controllers . fragment . help . HelpActivity ; 
 import im . actor . sdk . controllers . fragment . main . SearchAdapter ; 
 - import im . actor . sdk . discover . DiscoverActivity ; 
 import im . actor . sdk . util . Screen ; 
 import im . actor . sdk . util . Fonts ; 
 import im . actor . sdk . view . adapters . FragmentNoMenuStatePagerAdapter ; 
 @ @ - 546 , 9 + 545 , 6 @ @ public class MainPhoneController extends MainBaseController { 
 } else if ( i = = R . id . contacts ) { 
 startActivity ( new Intent ( getActivity ( ) , ContactsActivity . class ) ) ; 
 return true ; 
 - } else if ( i = = R . id . discover ) { 
 - startActivity ( new Intent ( getActivity ( ) , DiscoverActivity . class ) ) ; 
 - return true ; 
 } 
 
 return false ; 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / DiscoverActivity . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / DiscoverActivity . java 
 deleted file mode 100644 
 index 951d794 . . 0000000 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / DiscoverActivity . java 
 + + + / dev / null 
 @ @ - 1 , 21 + 0 , 0 @ @ 
 - package im . actor . sdk . discover ; 
 - 
 - import android . os . Bundle ; 
 - 
 - import im . actor . sdk . R ; 
 - import im . actor . sdk . controllers . activity . BaseFragmentActivity ; 
 - import im . actor . sdk . controllers . group . AddMemberFragment ; 
 - 
 - public class DiscoverActivity extends BaseFragmentActivity { 
 - @ Override 
 - protected void onCreate ( Bundle savedInstanceState ) { 
 - super . onCreate ( savedInstanceState ) ; 
 - 
 - getSupportActionBar ( ) . setTitle ( " Discover " ) ; 
 - 
 - 
 - if ( savedInstanceState = = null ) { 
 - showFragment ( new StoreFragment ( ) , false , false ) ; 
 - } 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / StoreFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / StoreFragment . java 
 deleted file mode 100644 
 index feb6d46 . . 0000000 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / StoreFragment . java 
 + + + / dev / null 
 @ @ - 1 , 158 + 0 , 0 @ @ 
 - package im . actor . sdk . discover ; 
 - 
 - import android . content . DialogInterface ; 
 - import android . graphics . drawable . StateListDrawable ; 
 - import android . net . Uri ; 
 - import android . os . Bundle ; 
 - import android . support . v7 . app . AlertDialog ; 
 - import android . support . v7 . widget . RecyclerView ; 
 - import android . view . Gravity ; 
 - import android . view . LayoutInflater ; 
 - import android . view . View ; 
 - import android . view . ViewGroup ; 
 - import android . webkit . WebView ; 
 - import android . webkit . WebViewClient ; 
 - import android . widget . FrameLayout ; 
 - import android . widget . LinearLayout ; 
 - import android . widget . TextView ; 
 - 
 - import im . actor . core . viewmodel . Command ; 
 - import im . actor . core . viewmodel . CommandCallback ; 
 - import im . actor . sdk . ActorSDK ; 
 - import im . actor . sdk . R ; 
 - import im . actor . sdk . controllers . Intents ; 
 - import im . actor . sdk . controllers . fragment . BaseFragment ; 
 - import im . actor . sdk . util . Fonts ; 
 - import im . actor . sdk . util . Screen ; 
 - import im . actor . sdk . view . SelectorFactory ; 
 - import im . actor . sdk . view . markdown . AndroidMarkdown ; 
 - 
 - import static im . actor . sdk . util . ActorSDKMessenger . messenger ; 
 - 
 - public class StoreFragment extends BaseFragment { 
 - 
 - private RecyclerView . OnScrollListener onScrollListener ; 
 - 
 - @ Override 
 - public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { 
 - FrameLayout fl = new FrameLayout ( getActivity ( ) ) ; 
 - fl . setPadding ( 0 , Screen . dp ( 56 ) , 0 , 0 ) ; 
 - fl . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getMainBackgroundColor ( ) ) ; 
 - final TextView placeHolder = new TextView ( getActivity ( ) ) ; 
 - placeHolder . setGravity ( Gravity . CENTER ) ; 
 - placeHolder . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getMainBackgroundColor ( ) ) ; 
 - placeHolder . setText ( R . string . progress _ common ) ; 
 - placeHolder . setTextSize ( 18 ) ; 
 - placeHolder . setTextColor ( ActorSDK . sharedActor ( ) . style . getTextSecondaryColor ( ) ) ; 
 - 
 - final WebView wv = new WebView ( getActivity ( ) ) ; 
 - wv . setVisibility ( View . INVISIBLE ) ; 
 - 
 - final FrameLayout buttonRetry = new FrameLayout ( getActivity ( ) ) ; 
 - buttonRetry . setBackgroundResource ( R . drawable . shadow _ square _ 3 ) ; 
 - final TextView retryBtnText = new TextView ( getActivity ( ) ) ; 
 - buttonRetry . addView ( retryBtnText , FrameLayout . LayoutParams . WRAP _ CONTENT , Screen . dp ( 48 ) ) ; 
 - StateListDrawable states = SelectorFactory . get ( ActorSDK . sharedActor ( ) . style . getMainColor ( ) , getActivity ( ) ) ; 
 - retryBtnText . setBackgroundDrawable ( states ) ; 
 - retryBtnText . setText ( R . string . dialog _ try _ again ) ; 
 - retryBtnText . setTextColor ( ActorSDK . sharedActor ( ) . style . getTextPrimaryInvColor ( ) ) ; 
 - retryBtnText . setTypeface ( Fonts . medium ( ) ) ; 
 - retryBtnText . setTextSize ( 17 ) ; 
 - retryBtnText . setGravity ( Gravity . CENTER ) ; 
 - retryBtnText . setAllCaps ( true ) ; 
 - retryBtnText . setPadding ( Screen . dp ( 24 ) , 0 , Screen . dp ( 24 ) , 0 ) ; 
 - buttonRetry . setVisibility ( View . INVISIBLE ) ; 
 - buttonRetry . setOnClickListener ( new View . OnClickListener ( ) { 
 - @ Override 
 - public void onClick ( View v ) { 
 - showView ( placeHolder ) ; 
 - hideView ( buttonRetry ) ; 
 - hideView ( wv ) ; 
 - wv . loadUrl ( wv . getUrl ( ) ) ; 
 - } 
 - } ) ; 
 - 
 - fl . addView ( placeHolder , new FrameLayout . LayoutParams ( FrameLayout . LayoutParams . WRAP _ CONTENT , LinearLayout . LayoutParams . WRAP _ CONTENT , Gravity . CENTER ) ) ; 
 - fl . addView ( wv , FrameLayout . LayoutParams . MATCH _ PARENT , FrameLayout . LayoutParams . MATCH _ PARENT ) ; 
 - fl . addView ( buttonRetry , new FrameLayout . LayoutParams ( ViewGroup . LayoutParams . WRAP _ CONTENT , ViewGroup . LayoutParams . WRAP _ CONTENT , Gravity . CENTER ) ) ; 
 - 
 - wv . getSettings ( ) . setJavaScriptEnabled ( true ) ; 
 - wv . setWebViewClient ( new WebViewClient ( ) { 
 - 
 - boolean errorHandled = false ; 
 - 
 - @ Override 
 - public void onPageFinished ( WebView view , String url ) { 
 - if ( wv . getVisibility ( ) ! = View . VISIBLE & & ! errorHandled ) { 
 - showView ( wv ) ; 
 - hideView ( placeHolder ) ; 
 - hideView ( buttonRetry ) ; 
 - } 
 - errorHandled = false ; 
 - super . onPageFinished ( view , url ) ; 
 - } 
 - 
 - 
 - @ Override 
 - public void onReceivedError ( WebView view , int errorCode , String description , String failingUrl ) { 
 - errorHandled = true ; 
 - hideView ( wv ) ; 
 - showView ( buttonRetry ) ; 
 - hideView ( placeHolder ) ; 
 - super . onReceivedError ( view , errorCode , description , failingUrl ) ; 
 - } 
 - 
 - @ Override 
 - public boolean shouldOverrideUrlLoading ( WebView view , String url ) { 
 - if ( url . startsWith ( " group : / / " ) ) { 
 - final String token = url . substring ( 8 ) ; 
 - AlertDialog . Builder builder = new AlertDialog . Builder ( getActivity ( ) ) ; 
 - builder . setMessage ( " Join " ) 
 - . setPositiveButton ( R . string . dialog _ ok , new DialogInterface . OnClickListener ( ) { 
 - @ Override 
 - public void onClick ( DialogInterface dialog , int which ) { 
 - joinGroup ( token ) ; 
 - dialog . dismiss ( ) ; 
 - } 
 - } ) 
 - . setNegativeButton ( R . string . dialog _ cancel , new DialogInterface . OnClickListener ( ) { 
 - @ Override 
 - public void onClick ( DialogInterface dialog , int which ) { 
 - dialog . cancel ( ) ; 
 - } 
 - } ) 
 - . show ( ) ; 
 - return true ; 
 - } else if ( url . startsWith ( " user : / / " ) ) { 
 - String id = url . substring ( 7 ) ; 
 - execute ( messenger ( ) . findUsers ( id ) ) ; 
 - return true ; 
 - } 
 - 
 - AndroidMarkdown . buildChromeIntent ( ) . launchUrl ( getActivity ( ) , Uri . parse ( url ) ) ; 
 - return true ; 
 - } 
 - } ) ; 
 - wv . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getMainBackgroundColor ( ) ) ; 
 - 
 - wv . loadUrl ( " http : / / actorapp . github . io / store / " ) ; 
 - return fl ; 
 - } 
 - 
 - private void joinGroup ( String token ) { 
 - Command < Integer > cmd = messenger ( ) . joinGroupViaToken ( token ) ; 
 - if ( cmd ! = null ) { 
 - execute ( cmd , im . actor . sdk . R . string . invite _ link _ title , new CommandCallback < Integer > ( ) { 
 - @ Override 
 - public void onResult ( Integer res ) { 
 - getActivity ( ) . startActivity ( Intents . openGroupDialog ( res , true , getActivity ( ) ) ) ; 
 - } 
 - 
 - @ Override 
 - public void onError ( Exception e ) { 
 - 
 - } 
 - } ) ; 
 - } 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / res / menu / main . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / res / menu / main . xml 
 index f894153 . . fa4bd7b 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / res / menu / main . xml 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / res / menu / main . xml 
 @ @ - 23 , 9 + 23 , 4 @ @ 
 android : id = " @ + id / profile " 
 android : title = " Profile " 
 app : showAsAction = " never " / > 
 - 
 - < item 
 - android : id = " @ + id / discover " 
 - android : title = " Discover " 
 - app : showAsAction = " never " / > 
 < / menu > 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 index 7bf870f . . e3570c2 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 @ @ - 289 , 24 + 289 , 12 @ @ public class RouterActor extends ModuleActor { 
 hasCurrentMention = true ; 
 } 
 } 
 - int messagesCount = 0 ; 
 - int dialogsCount = 0 ; 
 - for ( Peer activePeer : activeDialogStorage . getAllPeers ( ) ) { 
 - int activeDialogueUnreadCount = conversationStates . getValue ( activePeer . getUnuqueId ( ) ) . getUnreadCount ( ) ; 
 - if ( activeDialogueUnreadCount > 0 ) { 
 - dialogsCount + + ; 
 - messagesCount + = activeDialogueUnreadCount ; 
 - } 
 - } 
 - 
 context ( ) . getNotificationsModule ( ) . onInMessage ( 
 peer , 
 m . getSenderId ( ) , 
 m . getSortDate ( ) , 
 ContentDescription . fromContent ( m . getContent ( ) ) , 
 - hasCurrentMention , 
 - messagesCount , 
 - dialogsCount ) ; 
 + hasCurrentMention ) ; 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / ActiveDialogStorage . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / ActiveDialogStorage . java 
 index f509bf0 . . 51d120a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / ActiveDialogStorage . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / ActiveDialogStorage . java 
 @ @ - 3 , 7 + 3 , 6 @ @ package im . actor . core . modules . messaging . router . entity ; 
 import java . io . IOException ; 
 import java . util . ArrayList ; 
 
 - import im . actor . core . entity . Peer ; 
 import im . actor . runtime . bser . BserObject ; 
 import im . actor . runtime . bser . BserValues ; 
 import im . actor . runtime . bser . BserWriter ; 
 @ @ - 51 , 14 + 50 , 6 @ @ public class ActiveDialogStorage extends BserObject { 
 return groups ; 
 } 
 
 - public ArrayList < Peer > getAllPeers ( ) { 
 - ArrayList < Peer > peers = new ArrayList < > ( ) ; 
 - for ( ActiveDialogGroup group : groups ) { 
 - peers . addAll ( group . getPeers ( ) ) ; 
 - } 
 - return peers ; 
 - } 
 - 
 @ Override 
 public void parse ( BserValues values ) throws IOException { 
 isLoaded = values . getBool ( 1 ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsActor . java 
 index 20add75 . . 5eb012f 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsActor . java 
 @ @ - 45 , 8 + 45 , 7 @ @ public class NotificationsActor extends ModuleActor { 
 / * * 
 * KeyValue storage name for actor state 
 * / 
 - private static final String STORAGE _ NOTIFICATIONS _ DEPRECATED = " notifications " ; 
 - private static final String STORAGE _ NOTIFICATIONS = " limited _ notifications " ; 
 + private static final String STORAGE _ NOTIFICATIONS = " notifications " ; 
 
 
 / * * 
 @ @ - 58 , 10 + 57 , 6 @ @ public class NotificationsActor extends ModuleActor { 
 * / 
 private PendingStorage pendingStorage ; 
 / * * 
 - * in memory not limited pending storage 
 - * / 
 - private ArrayList < PendingNotification > allPendingNotifications = new ArrayList < PendingNotification > ( ) ; 
 - / * * 
 * Cached read states 
 * / 
 private HashMap < Peer , Long > readStates = new HashMap < > ( ) ; 
 @ @ - 111 , 11 + 106 , 11 @ @ public class NotificationsActor extends ModuleActor { 
 storage = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ NOTIFICATIONS ) ) ; 
 
 / / Loading pending messages 
 - pendingStorage = new PendingStorage ( MAX _ NOTIFICATION _ COUNT ) ; 
 + pendingStorage = new PendingStorage ( ) ; 
 byte [ ] storage = this . storage . get ( 0 ) ; 
 if ( storage ! = null ) { 
 try { 
 - pendingStorage = PendingStorage . fromBytes ( storage , MAX _ NOTIFICATION _ COUNT ) ; 
 + pendingStorage = PendingStorage . fromBytes ( storage ) ; 
 } catch ( IOException e ) { 
 e . printStackTrace ( ) ; 
 } 
 @ @ - 136 , 7 + 131 , 7 @ @ public class NotificationsActor extends ModuleActor { 
 * @ param hasCurrentUserMention does message have user mention 
 * / 
 public void onNewMessage ( Peer peer , int sender , long date , ContentDescription description , 
 - boolean hasCurrentUserMention , int messagesCount , int dialogsCount ) { 
 + boolean hasCurrentUserMention ) { 
 
 / / Check if message already read to avoid incorrect notifications 
 / / for already read messages 
 @ @ - 149 , 12 + 144 , 8 @ @ public class NotificationsActor extends ModuleActor { 
 
 / / Save to pending storage 
 if ( isEnabled ) { 
 - List < PendingNotification > pendingNotifications = getNotifications ( ) ; 
 - PendingNotification pendingNotification = new PendingNotification ( peer , sender , date , description ) ; 
 - pendingNotifications . add ( pendingNotification ) ; 
 - pendingStorage . setMessagesCount ( messagesCount ) ; 
 - pendingStorage . setDialogsCount ( dialogsCount ) ; 
 - allPendingNotifications . add ( pendingNotification ) ; 
 + List < PendingNotification > allPending = getNotifications ( ) ; 
 + allPending . add ( new PendingNotification ( peer , sender , date , description ) ) ; 
 saveStorage ( ) ; 
 } 
 
 @ @ - 244 , 12 + 235 , 21 @ @ public class NotificationsActor extends ModuleActor { 
 } 
 
 / / Removing read messages from pending storage 
 - getNotifications ( ) . clear ( ) ; 
 - pendingStorage . setMessagesCount ( 0 ) ; 
 - pendingStorage . setDialogsCount ( 0 ) ; 
 - allPendingNotifications . clear ( ) ; 
 - saveStorage ( ) ; 
 - updateNotification ( ) ; 
 + boolean isChanged = false ; 
 + List < PendingNotification > notifications = pendingStorage . getNotifications ( ) ; 
 + for ( PendingNotification p : notifications . toArray ( new PendingNotification [ notifications . size ( ) ] ) ) { 
 + if ( p . getPeer ( ) . equals ( peer ) & & p . getDate ( ) < = fromDate ) { 
 + pendingStorage . getNotifications ( ) . remove ( p ) ; 
 + isChanged = true ; 
 + } 
 + } 
 + 
 + / / If there are some messages 
 + / / Save pending and update notification 
 + if ( isChanged ) { 
 + saveStorage ( ) ; 
 + updateNotification ( ) ; 
 + } 
 
 / / Setting last read date 
 setLastReadDate ( peer , fromDate ) ; 
 @ @ - 398 , 25 + 398 , 36 @ @ public class NotificationsActor extends ModuleActor { 
 * / 
 private void performNotificationImp ( boolean performUpdate ) { 
 / / Getting pending notifications list 
 - List < PendingNotification > destNotifications = getNotifications ( ) ; 
 - if ( destNotifications . size ( ) = = 0 ) { 
 + List < PendingNotification > allPending = getNotifications ( ) ; 
 + int messagesCount = allPending . size ( ) ; 
 + if ( messagesCount = = 0 ) { 
 hideNotification ( ) ; 
 return ; 
 } 
 
 + / / Destination notifications list 
 + List < PendingNotification > destNotifications = last ( allPending , MAX _ NOTIFICATION _ COUNT ) ; 
 + 
 / / Converting to PendingNotifications 
 List < Notification > res = new ArrayList < > ( ) ; 
 for ( PendingNotification p : destNotifications ) { 
 res . add ( new Notification ( p . getPeer ( ) , p . getSender ( ) , p . getContent ( ) ) ) ; 
 } 
 
 + / / Getting count of unique peers 
 + HashSet < Peer > peers = new HashSet < > ( ) ; 
 + for ( PendingNotification p : allPending ) { 
 + peers . add ( p . getPeer ( ) ) ; 
 + } 
 + int chatsCount = peers . size ( ) ; 
 + 
 / / Performing notifications 
 if ( performUpdate ) { 
 config ( ) . getNotificationProvider ( ) . onUpdateNotification ( context ( ) . getMessenger ( ) , res , 
 - pendingStorage . getMessagesCount ( ) , pendingStorage . getDialogsCount ( ) ) ; 
 + messagesCount , chatsCount ) ; 
 } else { 
 config ( ) . getNotificationProvider ( ) . onNotification ( context ( ) . getMessenger ( ) , res , 
 - pendingStorage . getMessagesCount ( ) , pendingStorage . getDialogsCount ( ) ) ; 
 + messagesCount , chatsCount ) ; 
 } 
 } 
 
 @ @ - 554 , 8 + 565 , 7 @ @ public class NotificationsActor extends ModuleActor { 
 if ( message instanceof NewMessage ) { 
 NewMessage newMessage = ( NewMessage ) message ; 
 onNewMessage ( newMessage . getPeer ( ) , newMessage . getSender ( ) , newMessage . getSortDate ( ) , 
 - newMessage . getContentDescription ( ) , newMessage . getHasCurrentUserMention ( ) , 
 - newMessage . getUnreadMessagesCount ( ) , newMessage . getUnreadDialogsCount ( ) ) ; 
 + newMessage . getContentDescription ( ) , newMessage . getHasCurrentUserMention ( ) ) ; 
 } else if ( message instanceof MessagesRead ) { 
 MessagesRead read = ( MessagesRead ) message ; 
 onMessagesRead ( read . getPeer ( ) , read . getFromDate ( ) ) ; 
 @ @ - 595 , 18 + 605 , 14 @ @ public class NotificationsActor extends ModuleActor { 
 private long sortDate ; 
 private ContentDescription contentDescription ; 
 private boolean hasCurrentUserMention ; 
 - private int unreadMessagesCount ; 
 - private int unreadDialogsCount ; 
 
 public NewMessage ( Peer peer , int sender , long sortDate , ContentDescription contentDescription , 
 - boolean hasCurrentUserMention , int unreadMessagesCount , int unreadDialogsCount ) { 
 + boolean hasCurrentUserMention ) { 
 this . peer = peer ; 
 this . sender = sender ; 
 this . sortDate = sortDate ; 
 this . contentDescription = contentDescription ; 
 this . hasCurrentUserMention = hasCurrentUserMention ; 
 - this . unreadMessagesCount = unreadMessagesCount ; 
 - this . unreadDialogsCount = unreadDialogsCount ; 
 } 
 
 public Peer getPeer ( ) { 
 @ @ - 628 , 14 + 634 , 6 @ @ public class NotificationsActor extends ModuleActor { 
 public boolean getHasCurrentUserMention ( ) { 
 return hasCurrentUserMention ; 
 } 
 - 
 - public int getUnreadMessagesCount ( ) { 
 - return unreadMessagesCount ; 
 - } 
 - 
 - public int getUnreadDialogsCount ( ) { 
 - return unreadDialogsCount ; 
 - } 
 } 
 
 public static class MessagesRead { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsModule . java 
 index 0bc7b5e . . afeda43 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsModule . java 
 @ @ - 35 , 8 + 35 , 8 @ @ public class NotificationsModule extends AbsModule { 
 notificationsActor . send ( new NotificationsActor . MessagesRead ( peer , fromDate ) ) ; 
 } 
 
 - public void onInMessage ( Peer peer , int sender , long sortDate , ContentDescription contentDescription , boolean hasCurrentUserMention , int unreadMessagesCount , int unreadDialogsCount ) { 
 - notificationsActor . send ( new NotificationsActor . NewMessage ( peer , sender , sortDate , contentDescription , hasCurrentUserMention , unreadMessagesCount , unreadDialogsCount ) ) ; 
 + public void onInMessage ( Peer peer , int sender , long sortDate , ContentDescription contentDescription , boolean hasCurrentUserMention ) { 
 + notificationsActor . send ( new NotificationsActor . NewMessage ( peer , sender , sortDate , contentDescription , hasCurrentUserMention ) ) ; 
 } 
 
 public void pauseNotifications ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsQueue . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsQueue . java 
 deleted file mode 100644 
 index 5ad7acf . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsQueue . java 
 + + + / dev / null 
 @ @ - 1 , 26 + 0 , 0 @ @ 
 - package im . actor . core . modules . notifications ; 
 - 
 - import java . util . Collection ; 
 - import java . util . LinkedList ; 
 - 
 - public class NotificationsQueue < E > extends LinkedList < E > { 
 - private int limit ; 
 - 
 - public NotificationsQueue ( int limit ) { 
 - this . limit = limit ; 
 - } 
 - 
 - @ Override 
 - public boolean add ( E o ) { 
 - super . add ( o ) ; 
 - while ( size ( ) > limit ) { 
 - super . remove ( ) ; 
 - } 
 - return true ; 
 - } 
 - 
 - public NotificationsQueue addAllChain ( Collection c ) { 
 - super . addAll ( c ) ; 
 - return this ; 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / entity / PendingStorage . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / entity / PendingStorage . java 
 index b3fede8 . . 089c4a9 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / entity / PendingStorage . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / entity / PendingStorage . java 
 @ @ - 8 , 7 + 8 , 6 @ @ import java . io . IOException ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 
 - import im . actor . core . modules . notifications . NotificationsQueue ; 
 import im . actor . runtime . bser . Bser ; 
 import im . actor . runtime . bser . BserObject ; 
 import im . actor . runtime . bser . BserValues ; 
 @ @ - 16 , 41 + 15 , 20 @ @ import im . actor . runtime . bser . BserWriter ; 
 
 public class PendingStorage extends BserObject { 
 
 - private int limit ; 
 - private int messagesCount = 0 ; 
 - private int dialogsCount = 0 ; 
 - 
 - public static PendingStorage fromBytes ( byte [ ] data , int maxMessagesLimit ) throws IOException { 
 - return Bser . parse ( new PendingStorage ( maxMessagesLimit ) , data ) ; 
 + public static PendingStorage fromBytes ( byte [ ] data ) throws IOException { 
 + return Bser . parse ( new PendingStorage ( ) , data ) ; 
 } 
 
 - private NotificationsQueue < PendingNotification > notifications ; 
 + private List < PendingNotification > notifications ; 
 
 - public PendingStorage ( int maxMessagesLimit ) { 
 - limit = maxMessagesLimit ; 
 - notifications = new NotificationsQueue < > ( limit ) ; 
 + public PendingStorage ( ) { 
 + notifications = new ArrayList < > ( ) ; 
 } 
 
 - public NotificationsQueue < PendingNotification > getNotifications ( ) { 
 + public List < PendingNotification > getNotifications ( ) { 
 return notifications ; 
 } 
 
 - public int getMessagesCount ( ) { 
 - return messagesCount ; 
 - } 
 - 
 - public void setMessagesCount ( int messagesCount ) { 
 - this . messagesCount = messagesCount ; 
 - } 
 - 
 - public int getDialogsCount ( ) { 
 - return dialogsCount ; 
 - } 
 - 
 - public void setDialogsCount ( int dialogsCount ) { 
 - this . dialogsCount = dialogsCount ; 
 - } 
 - 
 @ Override 
 public void parse ( BserValues values ) throws IOException { 
 int count = values . getRepeatedCount ( 1 ) ; 
 @ @ - 60 , 17 + 38 , 12 @ @ public class PendingStorage extends BserObject { 
 stubs . add ( new PendingNotification ( ) ) ; 
 
 } 
 - notifications = new NotificationsQueue < > ( limit ) . addAllChain ( values . getRepeatedObj ( 1 , stubs ) ) ; 
 + notifications = values . getRepeatedObj ( 1 , stubs ) ; 
 } 
 - messagesCount = values . getInt ( 2 ) ; 
 - dialogsCount = values . getInt ( 3 ) ; 
 - 
 } 
 
 @ Override 
 public void serialize ( BserWriter writer ) throws IOException { 
 writer . writeRepeatedObj ( 1 , notifications ) ; 
 - writer . writeInt ( 2 , messagesCount ) ; 
 - writer . writeInt ( 3 , dialogsCount ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml 
 index 9a0a041 . . 19def96 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml 
 @ @ - 297 , 6 + 297 , 8 @ @ 
 android : showOnLockScreen = " true " 
 android : theme = " @ style / CallTheme " / > 
 
 + < activity android : name = " . discover . DiscoverActivity " / > 
 + 
 < service 
 android : name = " im . actor . sdk . services . KeepAliveService " 
 android : enabled = " true " 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / root / MainPhoneController . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / root / MainPhoneController . java 
 index 1687a09 . . edba108 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / root / MainPhoneController . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / root / MainPhoneController . java 
 @ @ - 46 , 6 + 46 , 7 @ @ import im . actor . sdk . controllers . contacts . ContactsFragment ; 
 import im . actor . sdk . controllers . dialogs . DialogsFragment ; 
 import im . actor . sdk . controllers . fragment . help . HelpActivity ; 
 import im . actor . sdk . controllers . fragment . main . SearchAdapter ; 
 + import im . actor . sdk . discover . DiscoverActivity ; 
 import im . actor . sdk . util . Screen ; 
 import im . actor . sdk . util . Fonts ; 
 import im . actor . sdk . view . adapters . FragmentNoMenuStatePagerAdapter ; 
 @ @ - 545 , 6 + 546 , 9 @ @ public class MainPhoneController extends MainBaseController { 
 } else if ( i = = R . id . contacts ) { 
 startActivity ( new Intent ( getActivity ( ) , ContactsActivity . class ) ) ; 
 return true ; 
 + } else if ( i = = R . id . discover ) { 
 + startActivity ( new Intent ( getActivity ( ) , DiscoverActivity . class ) ) ; 
 + return true ; 
 } 
 
 return false ; 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / DiscoverActivity . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / DiscoverActivity . java 
 new file mode 100644 
 index 0000000 . . 951d794 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / DiscoverActivity . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package im . actor . sdk . discover ; 
 + 
 + import android . os . Bundle ; 
 + 
 + import im . actor . sdk . R ; 
 + import im . actor . sdk . controllers . activity . BaseFragmentActivity ; 
 + import im . actor . sdk . controllers . group . AddMemberFragment ; 
 + 
 + public class DiscoverActivity extends BaseFragmentActivity { 
 + @ Override 
 + protected void onCreate ( Bundle savedInstanceState ) { 
 + super . onCreate ( savedInstanceState ) ; 
 + 
 + getSupportActionBar ( ) . setTitle ( " Discover " ) ; 
 + 
 + 
 + if ( savedInstanceState = = null ) { 
 + showFragment ( new StoreFragment ( ) , false , false ) ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / StoreFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / StoreFragment . java 
 new file mode 100644 
 index 0000000 . . feb6d46 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / discover / StoreFragment . java 
 @ @ - 0 , 0 + 1 , 158 @ @ 
 + package im . actor . sdk . discover ; 
 + 
 + import android . content . DialogInterface ; 
 + import android . graphics . drawable . StateListDrawable ; 
 + import android . net . Uri ; 
 + import android . os . Bundle ; 
 + import android . support . v7 . app . AlertDialog ; 
 + import android . support . v7 . widget . RecyclerView ; 
 + import android . view . Gravity ; 
 + import android . view . LayoutInflater ; 
 + import android . view . View ; 
 + import android . view . ViewGroup ; 
 + import android . webkit . WebView ; 
 + import android . webkit . WebViewClient ; 
 + import android . widget . FrameLayout ; 
 + import android . widget . LinearLayout ; 
 + import android . widget . TextView ; 
 + 
 + import im . actor . core . viewmodel . Command ; 
 + import im . actor . core . viewmodel . CommandCallback ; 
 + import im . actor . sdk . ActorSDK ; 
 + import im . actor . sdk . R ; 
 + import im . actor . sdk . controllers . Intents ; 
 + import im . actor . sdk . controllers . fragment . BaseFragment ; 
 + import im . actor . sdk . util . Fonts ; 
 + import im . actor . sdk . util . Screen ; 
 + import im . actor . sdk . view . SelectorFactory ; 
 + import im . actor . sdk . view . markdown . AndroidMarkdown ; 
 + 
 + import static im . actor . sdk . util . ActorSDKMessenger . messenger ; 
 + 
 + public class StoreFragment extends BaseFragment { 
 + 
 + private RecyclerView . OnScrollListener onScrollListener ; 
 + 
 + @ Override 
 + public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { 
 + FrameLayout fl = new FrameLayout ( getActivity ( ) ) ; 
 + fl . setPadding ( 0 , Screen . dp ( 56 ) , 0 , 0 ) ; 
 + fl . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getMainBackgroundColor ( ) ) ; 
 + final TextView placeHolder = new TextView ( getActivity ( ) ) ; 
 + placeHolder . setGravity ( Gravity . CENTER ) ; 
 + placeHolder . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getMainBackgroundColor ( ) ) ; 
 + placeHolder . setText ( R . string . progress _ common ) ; 
 + placeHolder . setTextSize ( 18 ) ; 
 + placeHolder . setTextColor ( ActorSDK . sharedActor ( ) . style . getTextSecondaryColor ( ) ) ; 
 + 
 + final WebView wv = new WebView ( getActivity ( ) ) ; 
 + wv . setVisibility ( View . INVISIBLE ) ; 
 + 
 + final FrameLayout buttonRetry = new FrameLayout ( getActivity ( ) ) ; 
 + buttonRetry . setBackgroundResource ( R . drawable . shadow _ square _ 3 ) ; 
 + final TextView retryBtnText = new TextView ( getActivity ( ) ) ; 
 + buttonRetry . addView ( retryBtnText , FrameLayout . LayoutParams . WRAP _ CONTENT , Screen . dp ( 48 ) ) ; 
 + StateListDrawable states = SelectorFactory . get ( ActorSDK . sharedActor ( ) . style . getMainColor ( ) , getActivity ( ) ) ; 
 + retryBtnText . setBackgroundDrawable ( states ) ; 
 + retryBtnText . setText ( R . string . dialog _ try _ again ) ; 
 + retryBtnText . setTextColor ( ActorSDK . sharedActor ( ) . style . getTextPrimaryInvColor ( ) ) ; 
 + retryBtnText . setTypeface ( Fonts . medium ( ) ) ; 
 + retryBtnText . setTextSize ( 17 ) ; 
 + retryBtnText . setGravity ( Gravity . CENTER ) ; 
 + retryBtnText . setAllCaps ( true ) ; 
 + retryBtnText . setPadding ( Screen . dp ( 24 ) , 0 , Screen . dp ( 24 ) , 0 ) ; 
 + buttonRetry . setVisibility ( View . INVISIBLE ) ; 
 + buttonRetry . setOnClickListener ( new View . OnClickListener ( ) { 
 + @ Override 
 + public void onClick ( View v ) { 
 + showView ( placeHolder ) ; 
 + hideView ( buttonRetry ) ; 
 + hideView ( wv ) ; 
 + wv . loadUrl ( wv . getUrl ( ) ) ; 
 + } 
 + } ) ; 
 + 
 + fl . addView ( placeHolder , new FrameLayout . LayoutParams ( FrameLayout . LayoutParams . WRAP _ CONTENT , LinearLayout . LayoutParams . WRAP _ CONTENT , Gravity . CENTER ) ) ; 
 + fl . addView ( wv , FrameLayout . LayoutParams . MATCH _ PARENT , FrameLayout . LayoutParams . MATCH _ PARENT ) ; 
 + fl . addView ( buttonRetry , new FrameLayout . LayoutParams ( ViewGroup . LayoutParams . WRAP _ CONTENT , ViewGroup . LayoutParams . WRAP _ CONTENT , Gravity . CENTER ) ) ; 
 + 
 + wv . getSettings ( ) . setJavaScriptEnabled ( true ) ; 
 + wv . setWebViewClient ( new WebViewClient ( ) { 
 + 
 + boolean errorHandled = false ; 
 + 
 + @ Override 
 + public void onPageFinished ( WebView view , String url ) { 
 + if ( wv . getVisibility ( ) ! = View . VISIBLE & & ! errorHandled ) { 
 + showView ( wv ) ; 
 + hideView ( placeHolder ) ; 
 + hideView ( buttonRetry ) ; 
 + } 
 + errorHandled = false ; 
 + super . onPageFinished ( view , url ) ; 
 + } 
 + 
 + 
 + @ Override 
 + public void onReceivedError ( WebView view , int errorCode , String description , String failingUrl ) { 
 + errorHandled = true ; 
 + hideView ( wv ) ; 
 + showView ( buttonRetry ) ; 
 + hideView ( placeHolder ) ; 
 + super . onReceivedError ( view , errorCode , description , failingUrl ) ; 
 + } 
 + 
 + @ Override 
 + public boolean shouldOverrideUrlLoading ( WebView view , String url ) { 
 + if ( url . startsWith ( " group : / / " ) ) { 
 + final String token = url . substring ( 8 ) ; 
 + AlertDialog . Builder builder = new AlertDialog . Builder ( getActivity ( ) ) ; 
 + builder . setMessage ( " Join " ) 
 + . setPositiveButton ( R . string . dialog _ ok , new DialogInterface . OnClickListener ( ) { 
 + @ Override 
 + public void onClick ( DialogInterface dialog , int which ) { 
 + joinGroup ( token ) ; 
 + dialog . dismiss ( ) ; 
 + } 
 + } ) 
 + . setNegativeButton ( R . string . dialog _ cancel , new DialogInterface . OnClickListener ( ) { 
 + @ Override 
 + public void onClick ( DialogInterface dialog , int which ) { 
 + dialog . cancel ( ) ; 
 + } 
 + } ) 
 + . show ( ) ; 
 + return true ; 
 + } else if ( url . startsWith ( " user : / / " ) ) { 
 + String id = url . substring ( 7 ) ; 
 + execute ( messenger ( ) . findUsers ( id ) ) ; 
 + return true ; 
 + } 
 + 
 + AndroidMarkdown . buildChromeIntent ( ) . launchUrl ( getActivity ( ) , Uri . parse ( url ) ) ; 
 + return true ; 
 + } 
 + } ) ; 
 + wv . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getMainBackgroundColor ( ) ) ; 
 + 
 + wv . loadUrl ( " http : / / actorapp . github . io / store / " ) ; 
 + return fl ; 
 + } 
 + 
 + private void joinGroup ( String token ) { 
 + Command < Integer > cmd = messenger ( ) . joinGroupViaToken ( token ) ; 
 + if ( cmd ! = null ) { 
 + execute ( cmd , im . actor . sdk . R . string . invite _ link _ title , new CommandCallback < Integer > ( ) { 
 + @ Override 
 + public void onResult ( Integer res ) { 
 + getActivity ( ) . startActivity ( Intents . openGroupDialog ( res , true , getActivity ( ) ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( Exception e ) { 
 + 
 + } 
 + } ) ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / res / menu / main . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / res / menu / main . xml 
 index fa4bd7b . . f894153 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / res / menu / main . xml 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / res / menu / main . xml 
 @ @ - 23 , 4 + 23 , 9 @ @ 
 android : id = " @ + id / profile " 
 android : title = " Profile " 
 app : showAsAction = " never " / > 
 + 
 + < item 
 + android : id = " @ + id / discover " 
 + android : title = " Discover " 
 + app : showAsAction = " never " / > 
 < / menu > 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 index e3570c2 . . 7bf870f 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 @ @ - 289 , 12 + 289 , 24 @ @ public class RouterActor extends ModuleActor { 
 hasCurrentMention = true ; 
 } 
 } 
 + int messagesCount = 0 ; 
 + int dialogsCount = 0 ; 
 + for ( Peer activePeer : activeDialogStorage . getAllPeers ( ) ) { 
 + int activeDialogueUnreadCount = conversationStates . getValue ( activePeer . getUnuqueId ( ) ) . getUnreadCount ( ) ; 
 + if ( activeDialogueUnreadCount > 0 ) { 
 + dialogsCount + + ; 
 + messagesCount + = activeDialogueUnreadCount ; 
 + } 
 + } 
 + 
 context ( ) . getNotificationsModule ( ) . onInMessage ( 
 peer , 
 m . getSenderId ( ) , 
 m . getSortDate ( ) , 
 ContentDescription . fromContent ( m . getContent ( ) ) , 
 - hasCurrentMention ) ; 
 + hasCurrentMention , 
 + messagesCount , 
 + dialogsCount ) ; 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / ActiveDialogStorage . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / ActiveDialogStorage . java 
 index 51d120a . . f509bf0 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / ActiveDialogStorage . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / ActiveDialogStorage . java 
 @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . core . modules . messaging . router . entity ; 
 import java . io . IOException ; 
 import java . util . ArrayList ; 
 
 + import im . actor . core . entity . Peer ; 
 import im . actor . runtime . bser . BserObject ; 
 import im . actor . runtime . bser . BserValues ; 
 import im . actor . runtime . bser . BserWriter ; 
 @ @ - 50 , 6 + 51 , 14 @ @ public class ActiveDialogStorage extends BserObject { 
 return groups ; 
 } 
 
 + public ArrayList < Peer > getAllPeers ( ) { 
 + ArrayList < Peer > peers = new ArrayList < > ( ) ; 
 + for ( ActiveDialogGroup group : groups ) { 
 + peers . addAll ( group . getPeers ( ) ) ; 
 + } 
 + return peers ; 
 + } 
 + 
 @ Override 
 public void parse ( BserValues values ) throws IOException { 
 isLoaded = values . getBool ( 1 ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsActor . java 
 index 5eb012f . . 20add75 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsActor . java 
 @ @ - 45 , 7 + 45 , 8 @ @ public class NotificationsActor extends ModuleActor { 
 / * * 
 * KeyValue storage name for actor state 
 * / 
 - private static final String STORAGE _ NOTIFICATIONS = " notifications " ; 
 + private static final String STORAGE _ NOTIFICATIONS _ DEPRECATED = " notifications " ; 
 + private static final String STORAGE _ NOTIFICATIONS = " limited _ notifications " ; 
 
 
 / * * 
 @ @ - 57 , 6 + 58 , 10 @ @ public class NotificationsActor extends ModuleActor { 
 * / 
 private PendingStorage pendingStorage ; 
 / * * 
 + * in memory not limited pending storage 
 + * / 
 + private ArrayList < PendingNotification > allPendingNotifications = new ArrayList < PendingNotification > ( ) ; 
 + / * * 
 * Cached read states 
 * / 
 private HashMap < Peer , Long > readStates = new HashMap < > ( ) ; 
 @ @ - 106 , 11 + 111 , 11 @ @ public class NotificationsActor extends ModuleActor { 
 storage = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ NOTIFICATIONS ) ) ; 
 
 / / Loading pending messages 
 - pendingStorage = new PendingStorage ( ) ; 
 + pendingStorage = new PendingStorage ( MAX _ NOTIFICATION _ COUNT ) ; 
 byte [ ] storage = this . storage . get ( 0 ) ; 
 if ( storage ! = null ) { 
 try { 
 - pendingStorage = PendingStorage . fromBytes ( storage ) ; 
 + pendingStorage = PendingStorage . fromBytes ( storage , MAX _ NOTIFICATION _ COUNT ) ; 
 } catch ( IOException e ) { 
 e . printStackTrace ( ) ; 
 } 
 @ @ - 131 , 7 + 136 , 7 @ @ public class NotificationsActor extends ModuleActor { 
 * @ param hasCurrentUserMention does message have user mention 
 * / 
 public void onNewMessage ( Peer peer , int sender , long date , ContentDescription description , 
 - boolean hasCurrentUserMention ) { 
 + boolean hasCurrentUserMention , int messagesCount , int dialogsCount ) { 
 
 / / Check if message already read to avoid incorrect notifications 
 / / for already read messages 
 @ @ - 144 , 8 + 149 , 12 @ @ public class NotificationsActor extends ModuleActor { 
 
 / / Save to pending storage 
 if ( isEnabled ) { 
 - List < PendingNotification > allPending = getNotifications ( ) ; 
 - allPending . add ( new PendingNotification ( peer , sender , date , description ) ) ; 
 + List < PendingNotification > pendingNotifications = getNotifications ( ) ; 
 + PendingNotification pendingNotification = new PendingNotification ( peer , sender , date , description ) ; 
 + pendingNotifications . add ( pendingNotification ) ; 
 + pendingStorage . setMessagesCount ( messagesCount ) ; 
 + pendingStorage . setDialogsCount ( dialogsCount ) ; 
 + allPendingNotifications . add ( pendingNotification ) ; 
 saveStorage ( ) ; 
 } 
 
 @ @ - 235 , 21 + 244 , 12 @ @ public class NotificationsActor extends ModuleActor { 
 } 
 
 / / Removing read messages from pending storage 
 - boolean isChanged = false ; 
 - List < PendingNotification > notifications = pendingStorage . getNotifications ( ) ; 
 - for ( PendingNotification p : notifications . toArray ( new PendingNotification [ notifications . size ( ) ] ) ) { 
 - if ( p . getPeer ( ) . equals ( peer ) & & p . getDate ( ) < = fromDate ) { 
 - pendingStorage . getNotifications ( ) . remove ( p ) ; 
 - isChanged = true ; 
 - } 
 - } 
 - 
 - / / If there are some messages 
 - / / Save pending and update notification 
 - if ( isChanged ) { 
 - saveStorage ( ) ; 
 - updateNotification ( ) ; 
 - } 
 + getNotifications ( ) . clear ( ) ; 
 + pendingStorage . setMessagesCount ( 0 ) ; 
 + pendingStorage . setDialogsCount ( 0 ) ; 
 + allPendingNotifications . clear ( ) ; 
 + saveStorage ( ) ; 
 + updateNotification ( ) ; 
 
 / / Setting last read date 
 setLastReadDate ( peer , fromDate ) ; 
 @ @ - 398 , 36 + 398 , 25 @ @ public class NotificationsActor extends ModuleActor { 
 * / 
 private void performNotificationImp ( boolean performUpdate ) { 
 / / Getting pending notifications list 
 - List < PendingNotification > allPending = getNotifications ( ) ; 
 - int messagesCount = allPending . size ( ) ; 
 - if ( messagesCount = = 0 ) { 
 + List < PendingNotification > destNotifications = getNotifications ( ) ; 
 + if ( destNotifications . size ( ) = = 0 ) { 
 hideNotification ( ) ; 
 return ; 
 } 
 
 - / / Destination notifications list 
 - List < PendingNotification > destNotifications = last ( allPending , MAX _ NOTIFICATION _ COUNT ) ; 
 - 
 / / Converting to PendingNotifications 
 List < Notification > res = new ArrayList < > ( ) ; 
 for ( PendingNotification p : destNotifications ) { 
 res . add ( new Notification ( p . getPeer ( ) , p . getSender ( ) , p . getContent ( ) ) ) ; 
 } 
 
 - / / Getting count of unique peers 
 - HashSet < Peer > peers = new HashSet < > ( ) ; 
 - for ( PendingNotification p : allPending ) { 
 - peers . add ( p . getPeer ( ) ) ; 
 - } 
 - int chatsCount = peers . size ( ) ; 
 - 
 / / Performing notifications 
 if ( performUpdate ) { 
 config ( ) . getNotificationProvider ( ) . onUpdateNotification ( context ( ) . getMessenger ( ) , res , 
 - messagesCount , chatsCount ) ; 
 + pendingStorage . getMessagesCount ( ) , pendingStorage . getDialogsCount ( ) ) ; 
 } else { 
 config ( ) . getNotificationProvider ( ) . onNotification ( context ( ) . getMessenger ( ) , res , 
 - messagesCount , chatsCount ) ; 
 + pendingStorage . getMessagesCount ( ) , pendingStorage . getDialogsCount ( ) ) ; 
 } 
 } 
 
 @ @ - 565 , 7 + 554 , 8 @ @ public class NotificationsActor extends ModuleActor { 
 if ( message instanceof NewMessage ) { 
 NewMessage newMessage = ( NewMessage ) message ; 
 onNewMessage ( newMessage . getPeer ( ) , newMessage . getSender ( ) , newMessage . getSortDate ( ) , 
 - newMessage . getContentDescription ( ) , newMessage . getHasCurrentUserMention ( ) ) ; 
 + newMessage . getContentDescription ( ) , newMessage . getHasCurrentUserMention ( ) , 
 + newMessage . getUnreadMessagesCount ( ) , newMessage . getUnreadDialogsCount ( ) ) ; 
 } else if ( message instanceof MessagesRead ) { 
 MessagesRead read = ( MessagesRead ) message ; 
 onMessagesRead ( read . getPeer ( ) , read . getFromDate ( ) ) ; 
 @ @ - 605 , 14 + 595 , 18 @ @ public class NotificationsActor extends ModuleActor { 
 private long sortDate ; 
 private ContentDescription contentDescription ; 
 private boolean hasCurrentUserMention ; 
 + private int unreadMessagesCount ; 
 + private int unreadDialogsCount ; 
 
 public NewMessage ( Peer peer , int sender , long sortDate , ContentDescription contentDescription , 
 - boolean hasCurrentUserMention ) { 
 + boolean hasCurrentUserMention , int unreadMessagesCount , int unreadDialogsCount ) { 
 this . peer = peer ; 
 this . sender = sender ; 
 this . sortDate = sortDate ; 
 this . contentDescription = contentDescription ; 
 this . hasCurrentUserMention = hasCurrentUserMention ; 
 + this . unreadMessagesCount = unreadMessagesCount ; 
 + this . unreadDialogsCount = unreadDialogsCount ; 
 } 
 
 public Peer getPeer ( ) { 
 @ @ - 634 , 6 + 628 , 14 @ @ public class NotificationsActor extends ModuleActor { 
 public boolean getHasCurrentUserMention ( ) { 
 return hasCurrentUserMention ; 
 } 
 + 
 + public int getUnreadMessagesCount ( ) { 
 + return unreadMessagesCount ; 
 + } 
 + 
 + public int getUnreadDialogsCount ( ) { 
 + return unreadDialogsCount ; 
 + } 
 } 
 
 public static class MessagesRead { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsModule . java 
 index afeda43 . . 0bc7b5e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsModule . java 
 @ @ - 35 , 8 + 35 , 8 @ @ public class NotificationsModule extends AbsModule { 
 notificationsActor . send ( new NotificationsActor . MessagesRead ( peer , fromDate ) ) ; 
 } 
 
 - public void onInMessage ( Peer peer , int sender , long sortDate , ContentDescription contentDescription , boolean hasCurrentUserMention ) { 
 - notificationsActor . send ( new NotificationsActor . NewMessage ( peer , sender , sortDate , contentDescription , hasCurrentUserMention ) ) ; 
 + public void onInMessage ( Peer peer , int sender , long sortDate , ContentDescription contentDescription , boolean hasCurrentUserMention , int unreadMessagesCount , int unreadDialogsCount ) { 
 + notificationsActor . send ( new NotificationsActor . NewMessage ( peer , sender , sortDate , contentDescription , hasCurrentUserMention , unreadMessagesCount , unreadDialogsCount ) ) ; 
 } 
 
 public void pauseNotifications ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsQueue . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsQueue . java 
 new file mode 100644 
 index 0000000 . . 5ad7acf 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / NotificationsQueue . java 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + package im . actor . core . modules . notifications ; 
 + 
 + import java . util . Collection ; 
 + import java . util . LinkedList ; 
 + 
 + public class NotificationsQueue < E > extends LinkedList < E > { 
 + private int limit ; 
 + 
 + public NotificationsQueue ( int limit ) { 
 + this . limit = limit ; 
 + } 
 + 
 + @ Override 
 + public boolean add ( E o ) { 
 + super . add ( o ) ; 
 + while ( size ( ) > limit ) { 
 + super . remove ( ) ; 
 + } 
 + return true ; 
 + } 
 + 
 + public NotificationsQueue addAllChain ( Collection c ) { 
 + super . addAll ( c ) ; 
 + return this ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / entity / PendingStorage . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / entity / PendingStorage . java 
 index 089c4a9 . . b3fede8 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / entity / PendingStorage . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / notifications / entity / PendingStorage . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import java . io . IOException ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 
 + import im . actor . core . modules . notifications . NotificationsQueue ; 
 import im . actor . runtime . bser . Bser ; 
 import im . actor . runtime . bser . BserObject ; 
 import im . actor . runtime . bser . BserValues ; 
 @ @ - 15 , 20 + 16 , 41 @ @ import im . actor . runtime . bser . BserWriter ; 
 
 public class PendingStorage extends BserObject { 
 
 - public static PendingStorage fromBytes ( byte [ ] data ) throws IOException { 
 - return Bser . parse ( new PendingStorage ( ) , data ) ; 
 + private int limit ; 
 + private int messagesCount = 0 ; 
 + private int dialogsCount = 0 ; 
 + 
 + public static PendingStorage fromBytes ( byte [ ] data , int maxMessagesLimit ) throws IOException { 
 + return Bser . parse ( new PendingStorage ( maxMessagesLimit ) , data ) ; 
 } 
 
 - private List < PendingNotification > notifications ; 
 + private NotificationsQueue < PendingNotification > notifications ; 
 
 - public PendingStorage ( ) { 
 - notifications = new ArrayList < > ( ) ; 
 + public PendingStorage ( int maxMessagesLimit ) { 
 + limit = maxMessagesLimit ; 
 + notifications = new NotificationsQueue < > ( limit ) ; 
 } 
 
 - public List < PendingNotification > getNotifications ( ) { 
 + public NotificationsQueue < PendingNotification > getNotifications ( ) { 
 return notifications ; 
 } 
 
 + public int getMessagesCount ( ) { 
 + return messagesCount ; 
 + } 
 + 
 + public void setMessagesCount ( int messagesCount ) { 
 + this . messagesCount = messagesCount ; 
 + } 
 + 
 + public int getDialogsCount ( ) { 
 + return dialogsCount ; 
 + } 
 + 
 + public void setDialogsCount ( int dialogsCount ) { 
 + this . dialogsCount = dialogsCount ; 
 + } 
 + 
 @ Override 
 public void parse ( BserValues values ) throws IOException { 
 int count = values . getRepeatedCount ( 1 ) ; 
 @ @ - 38 , 12 + 60 , 17 @ @ public class PendingStorage extends BserObject { 
 stubs . add ( new PendingNotification ( ) ) ; 
 
 } 
 - notifications = values . getRepeatedObj ( 1 , stubs ) ; 
 + notifications = new NotificationsQueue < > ( limit ) . addAllChain ( values . getRepeatedObj ( 1 , stubs ) ) ; 
 } 
 + messagesCount = values . getInt ( 2 ) ; 
 + dialogsCount = values . getInt ( 3 ) ; 
 + 
 } 
 
 @ Override 
 public void serialize ( BserWriter writer ) throws IOException { 
 writer . writeRepeatedObj ( 1 , notifications ) ; 
 + writer . writeInt ( 2 , messagesCount ) ; 
 + writer . writeInt ( 3 , dialogsCount ) ; 
 } 
 }
