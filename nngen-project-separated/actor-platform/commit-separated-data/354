BLEU SCORE: 0.08032276872815308

TEST MSG: fix ( server : notify ) : add resolved domains ; add priority mailbox
GENERATED MSG: refactor ( server ) : move notification template to separate class

TEST DIFF (one line): diff - - git a / actor - server / actor - notify / src / main / resources / reference . conf b / actor - server / actor - notify / src / main / resources / reference . conf < nl > index a35c67f . . 69dcc0f 100644 < nl > - - - a / actor - server / actor - notify / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - notify / src / main / resources / reference . conf < nl > @ @ - 4 , 5 + 4 , 10 @ @ services { < nl > # after ` notify - after ` minutes being offline < nl > notify - after : 3 minutes < nl > email - template - path : templates / notification - email - template . html < nl > + resolved - domains : [ ] < nl > } < nl > + } < nl > + < nl > + notify - prio - dispatcher { < nl > + mailbox - type : " im . actor . server . notify . NotifyPriorityMailbox " < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyConfig . scala b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyConfig . scala < nl > index 1474ee1 . . 051f599 100644 < nl > - - - a / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyConfig . scala < nl > + + + b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyConfig . scala < nl > @ @ - 7 , 7 + 7 , 11 @ @ import im . actor . config . ActorConfig < nl > < nl > import scala . concurrent . duration . FiniteDuration < nl > < nl > - private [ notify ] final case class NotifyConfig ( notifyAfter : FiniteDuration , emailTemplatePath : String ) < nl > + private [ notify ] final case class NotifyConfig ( < nl > + notifyAfter : FiniteDuration , < nl > + emailTemplatePath : String , < nl > + resolvedDomains : Set [ String ] < nl > + ) < nl > < nl > private [ notify ] object NotifyConfig { < nl > def load ( config : Config ) : Try [ NotifyConfig ] = Try ( config . extract [ NotifyConfig ] ) < nl > diff - - git a / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyPriorityMailBox . scala b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyPriorityMailBox . scala < nl > new file mode 100644 < nl > index 0000000 . . 766083a < nl > - - - / dev / null < nl > + + + b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyPriorityMailBox . scala < nl > @ @ - 0 , 0 + 1 , 16 @ @ < nl > + package im . actor . server . notify < nl > + < nl > + import akka . actor . ActorSystem . Settings < nl > + import akka . dispatch . { PriorityGenerator , UnboundedPriorityMailbox } < nl > + import com . typesafe . config . Config < nl > + import im . actor . server . notify . NotifyProcessorCommands . CancelNotify < nl > + import im . actor . server . presences . { PresenceState , Presences } < nl > + < nl > + class NotifyPriorityMailbox ( settings : Settings , config : Config ) < nl > + extends UnboundedPriorityMailbox ( < nl > + PriorityGenerator { < nl > + case PresenceState ( _ , Presences . Online , _ ) ⇒ 0 < nl > + case _ : CancelNotify ⇒ 0 < nl > + case _ ⇒ 1 < nl > + } < nl > + ) < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyProcessor . scala b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyProcessor . scala < nl > index 033b6e4 . . b493689 100644 < nl > - - - a / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyProcessor . scala < nl > + + + b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyProcessor . scala < nl > @ @ - 84 , 7 + 84 , 7 @ @ private [ notify ] object NotifyProcessor { < nl > ) < nl > } < nl > < nl > - private def props = Props ( classOf [ NotifyProcessor ] ) < nl > + private def props = Props ( classOf [ NotifyProcessor ] ) . withDispatcher ( " notify - prio - dispatcher " ) < nl > < nl > } < nl > < nl > @ @ - 102 , 6 + 102 , 7 @ @ private [ notify ] class NotifyProcessor extends Processor [ NotifyProcessorState ] { < nl > private val notifyConfig = NotifyConfig . load . get < nl > private val notifyAfter = notifyConfig . notifyAfter . toMillis < nl > private val notificationTemplate = NotificationTemplate ( notifyConfig . emailTemplatePath ) < nl > + private val resolvedDomains = notifyConfig . resolvedDomains < nl > < nl > self ! SubscribeToPresence ( ) < nl > system . scheduler . schedule ( Duration . Zero , 10 . minutes , self , FindNewUsers ( ) ) < nl > @ @ - 154 , 7 + 155 , 7 @ @ private [ notify ] class NotifyProcessor extends Processor [ NotifyProcessorState ] { < nl > private def notify ( userId : Int ) : Unit = for { < nl > user ← userExt . getUser ( userId ) < nl > result ← user . emails match { < nl > - case userEmail + : _ ⇒ < nl > + case userEmail + : _ if resolvedDomains contains userEmail ⇒ < nl > for { < nl > grouped ← dialogExt . fetchGroupedDialogs ( userId ) < nl > _ ← emailIfNeeded ( userEmail , user . name , grouped ) match {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotificationTemplate . scala b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotificationTemplate . scala < nl > new file mode 100644 < nl > index 0000000 . . 1ad257f < nl > - - - / dev / null < nl > + + + b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotificationTemplate . scala < nl > @ @ - 0 , 0 + 1 , 27 @ @ < nl > + package im . actor . server . notify < nl > + < nl > + import java . nio . file . Files < nl > + < nl > + import im . actor . env . ActorEnv < nl > + import im . actor . server . email . Content < nl > + < nl > + import scala . util . Try < nl > + < nl > + final case class NotificationTemplate ( private val templatePath : String ) { < nl > + private val emailTemplate : Option [ String ] = < nl > + Try ( new String ( Files . readAllBytes ( ActorEnv . getAbsolutePath ( templatePath ) ) ) ) . toOption < nl > + private val compatTemplate = " You have $ $ UNREAD _ COUNT $ $ unread messages in $ $ DIALOG _ COUNT $ $ dialogs . " < nl > + < nl > + def render ( name : String , unreadCount : Int , dialogCount : Int ) : Content = { < nl > + def render ( text : String ) = < nl > + text < nl > + . replace ( " $ $ NAME $ $ " , name ) < nl > + . replace ( " $ $ UNREAD _ COUNT $ $ " , unreadCount . toString ) < nl > + . replace ( " $ $ DIALOG _ COUNT $ $ " , dialogCount . toString ) < nl > + val compatText = render ( compatTemplate ) < nl > + emailTemplate match { < nl > + case Some ( template ) ⇒ Content ( Some ( render ( template ) ) , Some ( compatText ) ) < nl > + case None ⇒ Content ( None , Some ( compatText ) ) < nl > + } < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyProcessor . scala b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyProcessor . scala < nl > index 32ce3b8 . . 033b6e4 100644 < nl > - - - a / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyProcessor . scala < nl > + + + b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyProcessor . scala < nl > @ @ - 1 , 6 + 1 , 5 @ @ < nl > package im . actor . server . notify < nl > < nl > - import java . nio . file . Files < nl > import java . time . { Instant , LocalDateTime , ZoneOffset } < nl > < nl > import akka . http . scaladsl . util . FastFuture < nl > @ @ - 22 , 12 + 21 , 9 @ @ import NotifyProcessorEvents . _ < nl > import NotifyProcessorCommands . _ < nl > import akka . actor . { ActorRef , ActorSystem , PoisonPill , Props } < nl > import akka . cluster . singleton . { ClusterSingletonManager , ClusterSingletonManagerSettings , ClusterSingletonProxy , ClusterSingletonProxySettings } < nl > - import im . actor . env . ActorEnv < nl > import im . actor . serialization . ActorSerializer < nl > import im . actor . server . user . UserExtension < nl > < nl > - import scala . util . Try < nl > - < nl > trait NotifyProcessorEvent extends TaggedEvent { < nl > val ts : Instant < nl > < nl > @ @ - 105 , 11 + 101 , 7 @ @ private [ notify ] class NotifyProcessor extends Processor [ NotifyProcessorState ] { < nl > < nl > private val notifyConfig = NotifyConfig . load . get < nl > private val notifyAfter = notifyConfig . notifyAfter . toMillis < nl > - < nl > - private val emailTemplatePath = ActorEnv . getAbsolutePath ( notifyConfig . emailTemplatePath ) < nl > - private val emailTemplate : Option [ String ] = < nl > - Try ( new String ( Files . readAllBytes ( emailTemplatePath ) ) ) . toOption < nl > - private val compatTemplate = " You have $ $ UNREAD _ COUNT $ $ unread messages in $ $ DIALOG _ COUNT $ $ dialogs . " < nl > + private val notificationTemplate = NotificationTemplate ( notifyConfig . emailTemplatePath ) < nl > < nl > self ! SubscribeToPresence ( ) < nl > system . scheduler . schedule ( Duration . Zero , 10 . minutes , self , FindNewUsers ( ) ) < nl > @ @ - 168 , 7 + 160 , 7 @ @ private [ notify ] class NotifyProcessor extends Processor [ NotifyProcessorState ] { < nl > _ ← emailIfNeeded ( userEmail , user . name , grouped ) match { < nl > case Some ( email ) ⇒ < nl > log . debug ( " Sending email notification : { } to email : { } " , email . subject , userEmail ) < nl > - emailExt . emailSender . send ( email ) map { _ ⇒ < nl > + emailExt . sender . send ( email ) map { _ ⇒ < nl > self ! CancelNotify ( userId ) < nl > } < nl > case None ⇒ < nl > @ @ - 188 , 26 + 180 , 13 @ @ private [ notify ] class NotifyProcessor extends Processor [ NotifyProcessorState ] { < nl > if ( unreadCount > 0 ) { < nl > val dialogCount = dialogs . count ( _ . counter > 0 ) < nl > val subject = s " You have $ unreadCount unread messages " < nl > - val content = renderTemplate ( name , unreadCount , dialogCount ) < nl > + val content = notificationTemplate . render ( name , unreadCount , dialogCount ) < nl > Some ( Message ( email , subject , content ) ) < nl > } else { < nl > None < nl > } < nl > } < nl > < nl > - private def renderTemplate ( name : String , unreadCount : Int , dialogCount : Int ) : Content = { < nl > - def render ( text : String ) = < nl > - text < nl > - . replace ( " $ $ NAME $ $ " , name ) < nl > - . replace ( " $ $ UNREAD _ COUNT $ $ " , unreadCount . toString ) < nl > - . replace ( " $ $ DIALOG _ COUNT $ $ " , dialogCount . toString ) < nl > - val compatText = render ( compatTemplate ) < nl > - emailTemplate match { < nl > - case Some ( template ) ⇒ Content ( Some ( render ( template ) ) , Some ( compatText ) ) < nl > - case None ⇒ Content ( None , Some ( compatText ) ) < nl > - } < nl > - } < nl > - < nl > private def refetchUsers ( ) : Unit = { < nl > val date = LocalDateTime . ofInstant ( Instant . ofEpochMilli ( state . lastUserRegisterDate ) , ZoneOffset . UTC ) < nl > db . run ( UserRepo . activeUserIdsCreatedAfter ( date ) ) foreach { users ⇒

TEST DIFF:
diff - - git a / actor - server / actor - notify / src / main / resources / reference . conf b / actor - server / actor - notify / src / main / resources / reference . conf 
 index a35c67f . . 69dcc0f 100644 
 - - - a / actor - server / actor - notify / src / main / resources / reference . conf 
 + + + b / actor - server / actor - notify / src / main / resources / reference . conf 
 @ @ - 4 , 5 + 4 , 10 @ @ services { 
 # after ` notify - after ` minutes being offline 
 notify - after : 3 minutes 
 email - template - path : templates / notification - email - template . html 
 + resolved - domains : [ ] 
 } 
 + } 
 + 
 + notify - prio - dispatcher { 
 + mailbox - type : " im . actor . server . notify . NotifyPriorityMailbox " 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyConfig . scala b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyConfig . scala 
 index 1474ee1 . . 051f599 100644 
 - - - a / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyConfig . scala 
 + + + b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyConfig . scala 
 @ @ - 7 , 7 + 7 , 11 @ @ import im . actor . config . ActorConfig 
 
 import scala . concurrent . duration . FiniteDuration 
 
 - private [ notify ] final case class NotifyConfig ( notifyAfter : FiniteDuration , emailTemplatePath : String ) 
 + private [ notify ] final case class NotifyConfig ( 
 + notifyAfter : FiniteDuration , 
 + emailTemplatePath : String , 
 + resolvedDomains : Set [ String ] 
 + ) 
 
 private [ notify ] object NotifyConfig { 
 def load ( config : Config ) : Try [ NotifyConfig ] = Try ( config . extract [ NotifyConfig ] ) 
 diff - - git a / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyPriorityMailBox . scala b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyPriorityMailBox . scala 
 new file mode 100644 
 index 0000000 . . 766083a 
 - - - / dev / null 
 + + + b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyPriorityMailBox . scala 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + package im . actor . server . notify 
 + 
 + import akka . actor . ActorSystem . Settings 
 + import akka . dispatch . { PriorityGenerator , UnboundedPriorityMailbox } 
 + import com . typesafe . config . Config 
 + import im . actor . server . notify . NotifyProcessorCommands . CancelNotify 
 + import im . actor . server . presences . { PresenceState , Presences } 
 + 
 + class NotifyPriorityMailbox ( settings : Settings , config : Config ) 
 + extends UnboundedPriorityMailbox ( 
 + PriorityGenerator { 
 + case PresenceState ( _ , Presences . Online , _ ) ⇒ 0 
 + case _ : CancelNotify ⇒ 0 
 + case _ ⇒ 1 
 + } 
 + ) 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyProcessor . scala b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyProcessor . scala 
 index 033b6e4 . . b493689 100644 
 - - - a / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyProcessor . scala 
 + + + b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyProcessor . scala 
 @ @ - 84 , 7 + 84 , 7 @ @ private [ notify ] object NotifyProcessor { 
 ) 
 } 
 
 - private def props = Props ( classOf [ NotifyProcessor ] ) 
 + private def props = Props ( classOf [ NotifyProcessor ] ) . withDispatcher ( " notify - prio - dispatcher " ) 
 
 } 
 
 @ @ - 102 , 6 + 102 , 7 @ @ private [ notify ] class NotifyProcessor extends Processor [ NotifyProcessorState ] { 
 private val notifyConfig = NotifyConfig . load . get 
 private val notifyAfter = notifyConfig . notifyAfter . toMillis 
 private val notificationTemplate = NotificationTemplate ( notifyConfig . emailTemplatePath ) 
 + private val resolvedDomains = notifyConfig . resolvedDomains 
 
 self ! SubscribeToPresence ( ) 
 system . scheduler . schedule ( Duration . Zero , 10 . minutes , self , FindNewUsers ( ) ) 
 @ @ - 154 , 7 + 155 , 7 @ @ private [ notify ] class NotifyProcessor extends Processor [ NotifyProcessorState ] { 
 private def notify ( userId : Int ) : Unit = for { 
 user ← userExt . getUser ( userId ) 
 result ← user . emails match { 
 - case userEmail + : _ ⇒ 
 + case userEmail + : _ if resolvedDomains contains userEmail ⇒ 
 for { 
 grouped ← dialogExt . fetchGroupedDialogs ( userId ) 
 _ ← emailIfNeeded ( userEmail , user . name , grouped ) match {

NEAREST DIFF:
diff - - git a / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotificationTemplate . scala b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotificationTemplate . scala 
 new file mode 100644 
 index 0000000 . . 1ad257f 
 - - - / dev / null 
 + + + b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotificationTemplate . scala 
 @ @ - 0 , 0 + 1 , 27 @ @ 
 + package im . actor . server . notify 
 + 
 + import java . nio . file . Files 
 + 
 + import im . actor . env . ActorEnv 
 + import im . actor . server . email . Content 
 + 
 + import scala . util . Try 
 + 
 + final case class NotificationTemplate ( private val templatePath : String ) { 
 + private val emailTemplate : Option [ String ] = 
 + Try ( new String ( Files . readAllBytes ( ActorEnv . getAbsolutePath ( templatePath ) ) ) ) . toOption 
 + private val compatTemplate = " You have $ $ UNREAD _ COUNT $ $ unread messages in $ $ DIALOG _ COUNT $ $ dialogs . " 
 + 
 + def render ( name : String , unreadCount : Int , dialogCount : Int ) : Content = { 
 + def render ( text : String ) = 
 + text 
 + . replace ( " $ $ NAME $ $ " , name ) 
 + . replace ( " $ $ UNREAD _ COUNT $ $ " , unreadCount . toString ) 
 + . replace ( " $ $ DIALOG _ COUNT $ $ " , dialogCount . toString ) 
 + val compatText = render ( compatTemplate ) 
 + emailTemplate match { 
 + case Some ( template ) ⇒ Content ( Some ( render ( template ) ) , Some ( compatText ) ) 
 + case None ⇒ Content ( None , Some ( compatText ) ) 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyProcessor . scala b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyProcessor . scala 
 index 32ce3b8 . . 033b6e4 100644 
 - - - a / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyProcessor . scala 
 + + + b / actor - server / actor - notify / src / main / scala / im / actor / server / notify / NotifyProcessor . scala 
 @ @ - 1 , 6 + 1 , 5 @ @ 
 package im . actor . server . notify 
 
 - import java . nio . file . Files 
 import java . time . { Instant , LocalDateTime , ZoneOffset } 
 
 import akka . http . scaladsl . util . FastFuture 
 @ @ - 22 , 12 + 21 , 9 @ @ import NotifyProcessorEvents . _ 
 import NotifyProcessorCommands . _ 
 import akka . actor . { ActorRef , ActorSystem , PoisonPill , Props } 
 import akka . cluster . singleton . { ClusterSingletonManager , ClusterSingletonManagerSettings , ClusterSingletonProxy , ClusterSingletonProxySettings } 
 - import im . actor . env . ActorEnv 
 import im . actor . serialization . ActorSerializer 
 import im . actor . server . user . UserExtension 
 
 - import scala . util . Try 
 - 
 trait NotifyProcessorEvent extends TaggedEvent { 
 val ts : Instant 
 
 @ @ - 105 , 11 + 101 , 7 @ @ private [ notify ] class NotifyProcessor extends Processor [ NotifyProcessorState ] { 
 
 private val notifyConfig = NotifyConfig . load . get 
 private val notifyAfter = notifyConfig . notifyAfter . toMillis 
 - 
 - private val emailTemplatePath = ActorEnv . getAbsolutePath ( notifyConfig . emailTemplatePath ) 
 - private val emailTemplate : Option [ String ] = 
 - Try ( new String ( Files . readAllBytes ( emailTemplatePath ) ) ) . toOption 
 - private val compatTemplate = " You have $ $ UNREAD _ COUNT $ $ unread messages in $ $ DIALOG _ COUNT $ $ dialogs . " 
 + private val notificationTemplate = NotificationTemplate ( notifyConfig . emailTemplatePath ) 
 
 self ! SubscribeToPresence ( ) 
 system . scheduler . schedule ( Duration . Zero , 10 . minutes , self , FindNewUsers ( ) ) 
 @ @ - 168 , 7 + 160 , 7 @ @ private [ notify ] class NotifyProcessor extends Processor [ NotifyProcessorState ] { 
 _ ← emailIfNeeded ( userEmail , user . name , grouped ) match { 
 case Some ( email ) ⇒ 
 log . debug ( " Sending email notification : { } to email : { } " , email . subject , userEmail ) 
 - emailExt . emailSender . send ( email ) map { _ ⇒ 
 + emailExt . sender . send ( email ) map { _ ⇒ 
 self ! CancelNotify ( userId ) 
 } 
 case None ⇒ 
 @ @ - 188 , 26 + 180 , 13 @ @ private [ notify ] class NotifyProcessor extends Processor [ NotifyProcessorState ] { 
 if ( unreadCount > 0 ) { 
 val dialogCount = dialogs . count ( _ . counter > 0 ) 
 val subject = s " You have $ unreadCount unread messages " 
 - val content = renderTemplate ( name , unreadCount , dialogCount ) 
 + val content = notificationTemplate . render ( name , unreadCount , dialogCount ) 
 Some ( Message ( email , subject , content ) ) 
 } else { 
 None 
 } 
 } 
 
 - private def renderTemplate ( name : String , unreadCount : Int , dialogCount : Int ) : Content = { 
 - def render ( text : String ) = 
 - text 
 - . replace ( " $ $ NAME $ $ " , name ) 
 - . replace ( " $ $ UNREAD _ COUNT $ $ " , unreadCount . toString ) 
 - . replace ( " $ $ DIALOG _ COUNT $ $ " , dialogCount . toString ) 
 - val compatText = render ( compatTemplate ) 
 - emailTemplate match { 
 - case Some ( template ) ⇒ Content ( Some ( render ( template ) ) , Some ( compatText ) ) 
 - case None ⇒ Content ( None , Some ( compatText ) ) 
 - } 
 - } 
 - 
 private def refetchUsers ( ) : Unit = { 
 val date = LocalDateTime . ofInstant ( Instant . ofEpochMilli ( state . lastUserRegisterDate ) , ZoneOffset . UTC ) 
 db . run ( UserRepo . activeUserIdsCreatedAfter ( date ) ) foreach { users ⇒
