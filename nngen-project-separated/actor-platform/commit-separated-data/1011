BLEU SCORE: 0.15619699684601282

TEST MSG: fix ( andoid ) : hide keyboard hack
GENERATED MSG: fix ( android ) : recover push

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml < nl > index e2fef38 . . df3a2c5 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml < nl > @ @ - 273 , 7 + 273 , 7 @ @ < nl > < nl > < activity < nl > android : name = " . controllers . activity . ShortcutActivity " < nl > - android : theme = " @ android : style / Theme . NoDisplay " < nl > + android : theme = " @ style / AppcompatNoDisplay " < nl > android : launchMode = " singleInstance " > < nl > < intent - filter > < nl > < action android : name = " im . actor . action . botMessageShortcut " / > < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / ShortcutActivity . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / ShortcutActivity . java < nl > index c39147e . . 4a0aeaf 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / ShortcutActivity . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / ShortcutActivity . java < nl > @ @ - 1 , 16 + 1 , 34 @ @ < nl > package im . actor . sdk . controllers . activity ; < nl > < nl > import android . app . Activity ; < nl > + import android . content . DialogInterface ; < nl > import android . content . Intent ; < nl > + import android . graphics . Color ; < nl > + import android . graphics . drawable . ColorDrawable ; < nl > import android . os . Bundle ; < nl > + import android . os . PersistableBundle ; < nl > + import android . support . v7 . app . AlertDialog ; < nl > + import android . support . v7 . app . AppCompatActivity ; < nl > + import android . text . InputType ; < nl > + import android . view . ContextThemeWrapper ; < nl > + import android . view . View ; < nl > + import android . view . inputmethod . InputMethodManager ; < nl > + import android . widget . EditText ; < nl > + import android . widget . LinearLayout ; < nl > + import android . widget . Toast ; < nl > < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . runtime . Log ; < nl > + import im . actor . sdk . R ; < nl > + import im . actor . sdk . util . Screen ; < nl > < nl > import static im . actor . sdk . util . ActorSDKMessenger . messenger ; < nl > import static im . actor . sdk . util . ActorSDKMessenger . users ; < nl > < nl > - public class ShortcutActivity extends Activity { < nl > + public class ShortcutActivity extends AppCompatActivity implements DialogInterface . OnDismissListener { < nl > + String textToSend = " " ; < nl > + private EditText input ; < nl > + < nl > @ Override < nl > protected void onCreate ( Bundle savedInstanceState ) { < nl > super . onCreate ( savedInstanceState ) ; < nl > @ @ - 25 , 10 + 43 , 117 @ @ public class ShortcutActivity extends Activity { < nl > } < nl > < nl > private void handeleIntent ( Intent i ) { < nl > - Peer p = Peer . fromUniqueId ( i . getLongExtra ( " peer " , 0 ) ) ; < nl > + final Peer p = Peer . fromUniqueId ( i . getLongExtra ( " peer " , 0 ) ) ; < nl > String text = i . getStringExtra ( " text " ) ; < nl > + final String name = users ( ) . get ( p . getPeerId ( ) ) . getName ( ) . get ( ) ; < nl > + < nl > + if ( text . contains ( " { input } " ) | | text . contains ( " { input / num } " ) ) { < nl > + boolean num = text . contains ( " { input / num } " ) ; < nl > + if ( num ) { < nl > + text = text . replace ( " { input / num } " , " { input } " ) ; < nl > + } < nl > + AlertDialog . Builder builder = new AlertDialog . Builder ( this , R . style . AlertDialogStyle ) ; < nl > + String title = text . replace ( " { input } " , " " ) + " \ u2192 " + name ; < nl > + builder . setTitle ( title ) ; < nl > + < nl > + LinearLayout ll = new LinearLayout ( this ) ; < nl > + ll . setPadding ( Screen . dp ( 20 ) , 0 , Screen . dp ( 20 ) , 0 ) ; < nl > + < nl > + input = new EditText ( this ) ; < nl > + if ( num ) { < nl > + input . setInputType ( InputType . TYPE _ CLASS _ NUMBER | InputType . TYPE _ NUMBER _ FLAG _ SIGNED ) ; < nl > + } < nl > + input . setTextColor ( Color . BLACK ) ; < nl > + ll . addView ( input , LinearLayout . LayoutParams . MATCH _ PARENT , LinearLayout . LayoutParams . WRAP _ CONTENT ) ; < nl > + builder . setView ( ll ) ; < nl > + < nl > + final String finalText = text ; < nl > + builder . setPositiveButton ( getString ( R . string . dialog _ ok ) , new DialogInterface . OnClickListener ( ) { < nl > + @ Override < nl > + public void onClick ( DialogInterface dialog , int which ) { < nl > + send ( p , finalText . replace ( " { input } " , input . getText ( ) . toString ( ) ) , name ) ; < nl > + } < nl > + } ) ; < nl > + builder . setNegativeButton ( R . string . dialog _ cancel , new DialogInterface . OnClickListener ( ) { < nl > + @ Override < nl > + public void onClick ( DialogInterface dialog , int which ) { < nl > + dialog . cancel ( ) ; < nl > + } < nl > + } ) ; < nl > + < nl > + < nl > + builder . setOnDismissListener ( this ) ; < nl > + AlertDialog ad = builder . create ( ) ; < nl > + ad . setOnShowListener ( new DialogInterface . OnShowListener ( ) { < nl > + @ Override < nl > + public void onShow ( DialogInterface dialog ) { < nl > + InputMethodManager inputMethodManager = ( InputMethodManager ) getSystemService ( INPUT _ METHOD _ SERVICE ) ; < nl > + input . requestFocus ( ) ; < nl > + inputMethodManager . showSoftInput ( input , 0 ) ; < nl > + } < nl > + } ) ; < nl > + ad . show ( ) ; < nl > + } else if ( text . contains ( " { choose } " ) & & text . contains ( " { / choose } " ) ) { < nl > + final String rawVars = text . substring ( text . indexOf ( " { choose } " ) + 8 , text . indexOf ( " { / choose } " ) ) ; < nl > + final String [ ] vars = rawVars . split ( " / " ) ; < nl > + AlertDialog . Builder builder = new AlertDialog . Builder ( this , R . style . AlertDialogStyle ) ; < nl > + < nl > + final String rawCommand = text . replace ( rawVars , " " ) . replace ( " { choose } " , " " ) . replace ( " { / choose } " , " " ) ; < nl > + builder . setTitle ( rawCommand + " \ u2192 " + name ) ; < nl > + < nl > + textToSend = rawCommand + vars [ 0 ] ; < nl > + < nl > + builder . setSingleChoiceItems ( vars , 0 , new DialogInterface . OnClickListener ( ) { < nl > + @ Override < nl > + public void onClick ( DialogInterface dialog , int which ) { < nl > + textToSend = rawCommand + vars [ which ] ; < nl > + } < nl > + } ) ; < nl > + < nl > + builder . setPositiveButton ( getString ( R . string . dialog _ ok ) , new DialogInterface . OnClickListener ( ) { < nl > + @ Override < nl > + public void onClick ( DialogInterface dialog , int which ) { < nl > + send ( p , textToSend , name ) ; < nl > + } < nl > + } ) ; < nl > + builder . setNegativeButton ( R . string . dialog _ cancel , new DialogInterface . OnClickListener ( ) { < nl > + @ Override < nl > + public void onClick ( DialogInterface dialog , int which ) { < nl > + dialog . cancel ( ) ; < nl > + } < nl > + } ) ; < nl > + builder . setOnDismissListener ( this ) ; < nl > + builder . show ( ) ; < nl > + } else { < nl > + send ( p , text , name ) ; < nl > + } < nl > + } < nl > + < nl > + private void send ( Peer p , String text , String name ) { < nl > if ( users ( ) . get ( p . getPeerId ( ) ) . isBot ( ) ) { < nl > messenger ( ) . sendMessage ( p , text ) ; < nl > + < nl > + Toast . makeText ( getApplicationContext ( ) , " \ " " + text + " \ " sent to " + name + " bot " , Toast . LENGTH _ SHORT ) . show ( ) ; < nl > } < nl > + finish ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onDismiss ( DialogInterface dialog ) { < nl > + AlertDialog . Builder builder = new AlertDialog . Builder ( this , R . style . AlertDialogStyle ) ; < nl > + input = new EditText ( this ) ; < nl > + input . setVisibility ( View . INVISIBLE ) ; < nl > + builder . setView ( input ) ; < nl > + AlertDialog adHide = builder . create ( ) ; < nl > + adHide . getWindow ( ) . setBackgroundDrawable ( new ColorDrawable ( Color . TRANSPARENT ) ) ; < nl > + adHide . setOnShowListener ( new DialogInterface . OnShowListener ( ) { < nl > + @ Override < nl > + public void onShow ( DialogInterface dialog ) { < nl > + dialog . dismiss ( ) ; < nl > + finish ( ) ; < nl > + } < nl > + } ) ; < nl > + adHide . show ( ) ; < nl > + < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesFragment . java < nl > index 33136e6 . . 94e5455 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesFragment . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesFragment . java < nl > @ @ - 6 , 25 + 6 , 32 @ @ import android . app . AlertDialog ; < nl > import android . content . Context ; < nl > import android . content . DialogInterface ; < nl > import android . content . Intent ; < nl > + import android . graphics . Color ; < nl > import android . os . Build ; < nl > import android . os . Bundle ; < nl > import android . support . annotation . Nullable ; < nl > + import android . support . v4 . app . FragmentActivity ; < nl > import android . support . v7 . app . AppCompatActivity ; < nl > import android . support . v7 . view . ActionMode ; < nl > import android . support . v7 . widget . ChatLinearLayoutManager ; < nl > import android . support . v7 . widget . RecyclerView ; < nl > + import android . text . InputType ; < nl > import android . view . LayoutInflater ; < nl > import android . view . Menu ; < nl > import android . view . MenuItem ; < nl > import android . view . View ; < nl > import android . view . ViewGroup ; < nl > + import android . view . inputmethod . InputMethodManager ; < nl > + import android . widget . EditText ; < nl > import android . widget . FrameLayout ; < nl > + import android . widget . LinearLayout ; < nl > import android . widget . Toast ; < nl > < nl > import java . io . IOException ; < nl > < nl > import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . PeerType ; < nl > import im . actor . core . entity . content . DocumentContent ; < nl > import im . actor . core . entity . content . FileLocalSource ; < nl > import im . actor . core . entity . content . FileRemoteSource ; < nl > @ @ - 284 , 30 + 291 , 67 @ @ public class MessagesFragment extends DisplayListFragment < Message , MessageHolder < nl > menu . findItem ( R . id . quote ) . setVisible ( isAllText ) ; < nl > menu . findItem ( R . id . forward ) . setVisible ( selected . length = = 1 | | isAllText ) ; < nl > menu . findItem ( R . id . like ) . setVisible ( selected . length = = 1 ) ; < nl > - menu . findItem ( R . id . shortcut ) . setVisible ( selected . length = = 1 & & isAllText & & users ( ) . get ( peer . getPeerId ( ) ) . isBot ( ) ) ; < nl > + menu . findItem ( R . id . shortcut ) . setVisible ( peer . getPeerType ( ) = = PeerType . PRIVATE & selected . length = = 1 & & isAllText & & users ( ) . get ( peer . getPeerId ( ) ) . isBot ( ) ) ; < nl > return false ; < nl > } < nl > < nl > @ Override < nl > public boolean onActionItemClicked ( final ActionMode actionMode , MenuItem menuItem ) { < nl > if ( menuItem . getItemId ( ) = = R . id . shortcut ) { < nl > - Intent shortcutIntent = new Intent ( getContext ( ) , ShortcutActivity . class ) ; < nl > - shortcutIntent . addFlags ( Intent . FLAG _ ACTIVITY _ NO _ HISTORY | Intent . FLAG _ ACTIVITY _ EXCLUDE _ FROM _ RECENTS | Intent . FLAG _ ACTIVITY _ TASK _ ON _ HOME ) ; < nl > - shortcutIntent . setAction ( " im . actor . action . botMessageShortcut " ) ; < nl > - shortcutIntent . putExtra ( " peer " , peer . getUnuqueId ( ) ) ; < nl > - String text = messenger ( ) . getFormatter ( ) . formatMessagesExport ( messagesAdapter . getSelected ( ) ) ; < nl > - shortcutIntent . putExtra ( " text " , text ) ; < nl > - Intent addIntent = new Intent ( ) ; < nl > - addIntent < nl > - . putExtra ( Intent . EXTRA _ SHORTCUT _ INTENT , shortcutIntent ) ; < nl > - addIntent . putExtra ( Intent . EXTRA _ SHORTCUT _ NAME , text + " - > " + users ( ) . get ( peer . getPeerId ( ) ) . getNick ( ) . get ( ) ) ; < nl > - addIntent . putExtra ( Intent . EXTRA _ SHORTCUT _ ICON _ RESOURCE , < nl > - Intent . ShortcutIconResource . fromContext ( getContext ( ) , < nl > - R . drawable . ic _ message _ white _ 24dp ) ) ; < nl > - < nl > - addIntent . setAction ( " com . android . launcher . action . INSTALL _ SHORTCUT " ) ; < nl > - getContext ( ) . getApplicationContext ( ) . sendBroadcast ( addIntent ) ; < nl > - actionMode . finish ( ) ; < nl > + final String text = messenger ( ) . getFormatter ( ) . formatMessagesExport ( messagesAdapter . getSelected ( ) ) ; < nl > + < nl > + android . support . v7 . app . AlertDialog . Builder builder = new android . support . v7 . app . AlertDialog . Builder ( getActivity ( ) , R . style . AlertDialogStyle ) ; < nl > + builder . setTitle ( menuItem . getTitle ( ) ) ; < nl > + < nl > + final LinearLayout ll = new LinearLayout ( getActivity ( ) ) ; < nl > + ll . setPadding ( Screen . dp ( 20 ) , 0 , Screen . dp ( 20 ) , 0 ) ; < nl > + < nl > + final EditText input = new EditText ( getActivity ( ) ) ; < nl > + input . setTextColor ( Color . BLACK ) ; < nl > + input . setText ( text ) ; < nl > + ll . addView ( input , LinearLayout . LayoutParams . MATCH _ PARENT , LinearLayout . LayoutParams . WRAP _ CONTENT ) ; < nl > + builder . setView ( ll ) ; < nl > + < nl > + builder . setPositiveButton ( getString ( R . string . dialog _ ok ) , new DialogInterface . OnClickListener ( ) { < nl > + @ Override < nl > + public void onClick ( DialogInterface dialog , int which ) { < nl > + Intent shortcutIntent = new Intent ( getContext ( ) , ShortcutActivity . class ) ; < nl > + shortcutIntent . addFlags ( Intent . FLAG _ ACTIVITY _ NO _ HISTORY | Intent . FLAG _ ACTIVITY _ EXCLUDE _ FROM _ RECENTS | Intent . FLAG _ ACTIVITY _ TASK _ ON _ HOME | Intent . FLAG _ ACTIVITY _ NEW _ DOCUMENT | Intent . FLAG _ ACTIVITY _ MULTIPLE _ TASK ) ; < nl > + shortcutIntent . setAction ( " im . actor . action . botMessageShortcut " ) ; < nl > + shortcutIntent . putExtra ( " peer " , peer . getUnuqueId ( ) ) ; < nl > + shortcutIntent . putExtra ( " text " , input . getText ( ) . toString ( ) ) ; < nl > + Intent addIntent = new Intent ( ) ; < nl > + addIntent < nl > + . putExtra ( Intent . EXTRA _ SHORTCUT _ INTENT , shortcutIntent ) ; < nl > + addIntent . putExtra ( Intent . EXTRA _ SHORTCUT _ NAME , input . getText ( ) . toString ( ) + " - > " + users ( ) . get ( peer . getPeerId ( ) ) . getNick ( ) . get ( ) ) ; < nl > + addIntent . putExtra ( Intent . EXTRA _ SHORTCUT _ ICON _ RESOURCE , < nl > + Intent . ShortcutIconResource . fromContext ( getContext ( ) , < nl > + R . drawable . ic _ message _ white _ 24dp ) ) ; < nl > + < nl > + addIntent . setAction ( " com . android . launcher . action . INSTALL _ SHORTCUT " ) ; < nl > + getContext ( ) . getApplicationContext ( ) . sendBroadcast ( addIntent ) ; < nl > + actionMode . finish ( ) ; < nl > + } < nl > + } ) ; < nl > + builder . setNegativeButton ( R . string . dialog _ cancel , new DialogInterface . OnClickListener ( ) { < nl > + @ Override < nl > + public void onClick ( DialogInterface dialog , int which ) { < nl > + dialog . cancel ( ) ; < nl > + } < nl > + } ) ; < nl > + < nl > + android . support . v7 . app . AlertDialog ad = builder . create ( ) ; < nl > + ad . setOnShowListener ( new DialogInterface . OnShowListener ( ) { < nl > + @ Override < nl > + public void onShow ( DialogInterface dialog ) { < nl > + InputMethodManager inputMethodManager = ( InputMethodManager ) getActivity ( ) . getSystemService ( FragmentActivity . INPUT _ METHOD _ SERVICE ) ; < nl > + input . requestFocus ( ) ; < nl > + inputMethodManager . showSoftInput ( input , 0 ) ; < nl > + } < nl > + } ) ; < nl > + ad . show ( ) ; < nl > + < nl > + < nl > } else if ( menuItem . getItemId ( ) = = R . id . delete ) { < nl > Message [ ] selected = messagesAdapter . getSelected ( ) ; < nl > final long [ ] rids = new long [ selected . length ] ; < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / styles . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / styles . xml < nl > index 9e62168 . . 6f2b8ab 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / styles . xml < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / styles . xml < nl > @ @ - 85 , 4 + 85 , 17 @ @ < nl > < item name = " android : windowTranslucentStatus " > true < / item > < nl > < item name = " android : windowAnimationStyle " > @ null < / item > < nl > < / style > < nl > + < nl > + < style name = " AlertDialogStyle " parent = " Theme . AppCompat . Light . Dialog . Alert " / > < nl > + < nl > + < style name = " AppcompatNoDisplay " parent = " Theme . AppCompat . NoActionBar " > < nl > + < item name = " android : windowBackground " > @ null < / item > < nl > + < item name = " android : windowContentOverlay " > @ null < / item > < nl > + < item name = " android : windowIsTranslucent " > true < / item > < nl > + < item name = " android : windowAnimationStyle " > @ null < / item > < nl > + < item name = " android : windowDisablePreview " > true < / item > < nl > + < item name = " android : windowNoDisplay " > true < / item > < nl > + < item name = " android : textCursorDrawable " > @ null < / item > < nl > + < / style > < nl > + < nl > < / resources > < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > index 71da5ab . . 8045a74 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > @ @ - 1 , 11 + 1 , 7 @ @ < nl > package im . actor ; < nl > < nl > - import java . util . ArrayList ; < nl > - < nl > - import im . actor . auth . SignEmailFragment ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . BaseActorSDKDelegate ; < nl > - import im . actor . sdk . controllers . fragment . auth . BaseAuthFragment ; < nl > < nl > / * * < nl > * Created by badgr on 16 . 10 . 2015 . < nl > @ @ - 15 , 13 + 11 , 11 @ @ public class Application extends android . app . Application { < nl > public void onCreate ( ) { < nl > super . onCreate ( ) ; < nl > ActorSDK . sharedActor ( ) . setDelegate ( new ActorSDKDelegate ( ) ) ; < nl > + ActorSDK . sharedActor ( ) . setPushId ( 209133700967L ) ; < nl > ActorSDK . sharedActor ( ) . createActor ( this ) ; < nl > } < nl > < nl > private class ActorSDKDelegate extends BaseActorSDKDelegate { < nl > - @ Override < nl > - public BaseAuthFragment getSignFragment ( ) { < nl > - return new SignEmailFragment ( ) ; < nl > - } < nl > + < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java < nl > deleted file mode 100644 < nl > index 37ce216 . . 0000000 < nl > - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java < nl > + + + / dev / null < nl > @ @ - 1 , 137 + 0 , 0 @ @ < nl > - package im . actor . auth ; < nl > - < nl > - import android . app . AlertDialog ; < nl > - import android . os . Bundle ; < nl > - import android . telephony . PhoneNumberFormattingTextWatcher ; < nl > - import android . text . Editable ; < nl > - import android . text . TextWatcher ; < nl > - import android . view . KeyEvent ; < nl > - import android . view . LayoutInflater ; < nl > - import android . view . View ; < nl > - import android . view . ViewGroup ; < nl > - import android . view . inputmethod . EditorInfo ; < nl > - import android . widget . EditText ; < nl > - import android . widget . TextView ; < nl > - < nl > - import im . actor . sdk . ActorSDK ; < nl > - import im . actor . sdk . R ; < nl > - import im . actor . sdk . controllers . fragment . auth . BaseAuthFragment ; < nl > - import im . actor . sdk . util . Fonts ; < nl > - import im . actor . sdk . util . KeyboardHelper ; < nl > - < nl > - import static im . actor . sdk . util . ActorSDKMessenger . messenger ; < nl > - < nl > - public class SignEmailFragment extends BaseAuthFragment { < nl > - < nl > - private EditText emailEditText ; < nl > - private KeyboardHelper keyboardHelper ; < nl > - < nl > - @ Override < nl > - public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { < nl > - View v = inflater . inflate ( R . layout . fragment _ sign _ email , container , false ) ; < nl > - < nl > - ( ( TextView ) v . findViewById ( R . id . button _ continue _ text ) ) . setTypeface ( Fonts . medium ( ) ) ; < nl > - < nl > - keyboardHelper = new KeyboardHelper ( getActivity ( ) ) ; < nl > - < nl > - initView ( v ) ; < nl > - < nl > - return v ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onResume ( ) { < nl > - super . onResume ( ) ; < nl > - < nl > - / / TODO track email auth open < nl > - / / messenger ( ) . trackAuthPhoneOpen ( ) ; < nl > - < nl > - setTitle ( R . string . auth _ email _ title ) ; < nl > - < nl > - focusEmail ( ) ; < nl > - < nl > - keyboardHelper . setImeVisibility ( emailEditText , true ) ; < nl > - } < nl > - < nl > - private void initView ( View v ) { < nl > - < nl > - emailEditText = ( EditText ) v . findViewById ( R . id . tv _ email ) ; < nl > - emailEditText . addTextChangedListener ( new PhoneNumberFormattingTextWatcher ( ) ) ; < nl > - String email = messenger ( ) . getAuthEmail ( ) ; < nl > - if ( email ! = null & & ! email . isEmpty ( ) ) { < nl > - emailEditText . setText ( email ) ; < nl > - } < nl > - emailEditText . setOnEditorActionListener ( new TextView . OnEditorActionListener ( ) { < nl > - @ Override < nl > - public boolean onEditorAction ( TextView textView , int id , KeyEvent keyEvent ) { < nl > - if ( id = = EditorInfo . IME _ ACTION _ GO ) { < nl > - requestCode ( ) ; < nl > - return true ; < nl > - } < nl > - return false ; < nl > - } < nl > - } ) ; < nl > - emailEditText . addTextChangedListener ( new TextWatcher ( ) { < nl > - @ Override < nl > - public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - public void onTextChanged ( CharSequence s , int start , int before , int count ) { < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - public void afterTextChanged ( Editable s ) { < nl > - / / TODO trackAuthEmailType < nl > - / / messenger ( ) . trackAuthPhoneType ( emailEditText . getText ( ) . toString ( ) ) ; < nl > - } < nl > - } ) ; < nl > - < nl > - onClick ( v , R . id . button _ continue , new View . OnClickListener ( ) { < nl > - @ Override < nl > - public void onClick ( View view ) { < nl > - requestCode ( ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - private void requestCode ( ) { < nl > - final String ACTION = " Request code email " ; < nl > - < nl > - < nl > - if ( emailEditText . getText ( ) . toString ( ) . trim ( ) . length ( ) = = 0 ) { < nl > - String message = getString ( R . string . auth _ error _ empty _ email ) ; < nl > - new AlertDialog . Builder ( getActivity ( ) ) < nl > - . setMessage ( R . string . auth _ error _ empty _ email ) < nl > - . setPositiveButton ( R . string . dialog _ ok , null ) < nl > - . show ( ) ; < nl > - return ; < nl > - } < nl > - < nl > - String rawEmail = emailEditText . getText ( ) . toString ( ) ; < nl > - < nl > - if ( rawEmail . length ( ) = = 0 ) { < nl > - String message = getString ( R . string . auth _ error _ empty _ email ) ; < nl > - new AlertDialog . Builder ( getActivity ( ) ) < nl > - . setMessage ( R . string . auth _ error _ empty _ email ) < nl > - . setPositiveButton ( R . string . dialog _ ok , null ) < nl > - . show ( ) ; < nl > - return ; < nl > - } < nl > - < nl > - setAuthId ( rawEmail ) ; < nl > - < nl > - executeAuth ( ActorSDK . sharedActor ( ) . getMessenger ( ) . requestStartEmailAuth ( rawEmail ) , ACTION ) ; < nl > - } < nl > - < nl > - private void focusEmail ( ) { < nl > - focus ( emailEditText ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public String getHintText ( ) { < nl > - return getString ( R . string . auth _ code _ email _ hint ) . replace ( " { 0 } " , " < b > " + getAuthId ( ) + " < / b > " ) ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java b / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java < nl > deleted file mode 100644 < nl > index c74e30f . . 0000000 < nl > - - - a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java < nl > + + + / dev / null < nl > @ @ - 1 , 100 + 0 , 0 @ @ < nl > - package im . actor . core ; < nl > - < nl > - import android . content . Context ; < nl > - < nl > - import com . google . android . gms . gcm . GoogleCloudMessaging ; < nl > - < nl > - import java . io . IOException ; < nl > - < nl > - import im . actor . messenger . app . core . ActorSDK ; < nl > - import im . actor . runtime . Log ; < nl > - import im . actor . runtime . actors . Actor ; < nl > - < nl > - / * * < nl > - * GCM push implementation for Actor push registration . < nl > - * This actor is used for load GCM token and register it on server . < nl > - * / < nl > - public class AndroidPushActor extends Actor { < nl > - < nl > - private static final String TAG = " im . actor . core . AndroidPushActor " ; < nl > - < nl > - private final AndroidMessenger messenger ; < nl > - private final Context context ; < nl > - private boolean isRegistered ; < nl > - < nl > - public AndroidPushActor ( Context context , AndroidMessenger messenger ) { < nl > - this . messenger = messenger ; < nl > - this . context = context ; < nl > - } < nl > - < nl > - @ Override < nl > - public void preStart ( ) { < nl > - super . preStart ( ) ; < nl > - < nl > - isRegistered = messenger . getPreferences ( ) . getBool ( " push _ registered " , false ) ; < nl > - < nl > - if ( ! isRegistered ) { < nl > - Log . d ( TAG , " Requesting push token . . . " ) ; < nl > - < nl > - / / TODO : Add backoff < nl > - new Thread ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - while ( true ) { < nl > - GoogleCloudMessaging cloudMessaging = GoogleCloudMessaging . getInstance ( context ) ; < nl > - try { < nl > - Log . d ( TAG , " Requesting push token iteration . . . " ) ; < nl > - String regId = cloudMessaging . register ( " " + ActorSDK . sharedActor ( ) . getGcmProjectId ( ) ) ; < nl > - if ( regId ! = null ) { < nl > - Log . d ( TAG , " Token loaded " ) ; < nl > - self ( ) . send ( new PushRegistered ( regId ) ) ; < nl > - return ; < nl > - } else { < nl > - Log . d ( TAG , " Unable to load Token " ) ; < nl > - } < nl > - } catch ( IOException e ) { < nl > - e . printStackTrace ( ) ; < nl > - } < nl > - Log . d ( TAG , " Waiting for next attempt " ) ; < nl > - try { < nl > - Thread . sleep ( 1000 ) ; < nl > - } catch ( InterruptedException e1 ) { < nl > - e1 . printStackTrace ( ) ; < nl > - return ; < nl > - } < nl > - } < nl > - } < nl > - } . start ( ) ; < nl > - } else { < nl > - Log . d ( TAG , " Already registered token " ) ; < nl > - } < nl > - } < nl > - < nl > - private void onPushRegistered ( String token ) { < nl > - isRegistered = true ; < nl > - messenger . getPreferences ( ) . putBool ( " push _ registered " , true ) ; < nl > - messenger . registerGooglePush ( ActorSDK . sharedActor ( ) . getGcmProjectId ( ) , token ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onReceive ( Object message ) { < nl > - if ( message instanceof PushRegistered ) { < nl > - PushRegistered pushRegistered = ( PushRegistered ) message ; < nl > - onPushRegistered ( pushRegistered . getToken ( ) ) ; < nl > - } else { < nl > - drop ( message ) ; < nl > - } < nl > - } < nl > - < nl > - public static class PushRegistered { < nl > - private String token ; < nl > - < nl > - public PushRegistered ( String token ) { < nl > - this . token = token ; < nl > - } < nl > - < nl > - public String getToken ( ) { < nl > - return token ; < nl > - } < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java b / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java < nl > deleted file mode 100644 < nl > index 8dbd762 . . 0000000 < nl > - - - a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java < nl > + + + / dev / null < nl > @ @ - 1 , 37 + 0 , 0 @ @ < nl > - package im . actor . messenger ; < nl > - < nl > - import android . app . Activity ; < nl > - import android . content . Context ; < nl > - import android . content . Intent ; < nl > - import android . os . Bundle ; < nl > - import android . support . v4 . content . WakefulBroadcastReceiver ; < nl > - < nl > - import com . google . android . gms . gcm . GoogleCloudMessaging ; < nl > - < nl > - import im . actor . runtime . Log ; < nl > - < nl > - < nl > - import static im . actor . messenger . app . core . ActorSDK . messenger ; < nl > - < nl > - public class PushReceiver extends WakefulBroadcastReceiver { < nl > - < nl > - private static final String TAG = " PushReceiver " ; < nl > - < nl > - @ Override < nl > - public void onReceive ( Context context , Intent intent ) { < nl > - GoogleCloudMessaging gcm = GoogleCloudMessaging . getInstance ( context ) ; < nl > - Bundle extras = intent . getExtras ( ) ; < nl > - String messageType = gcm . getMessageType ( intent ) ; < nl > - if ( ! extras . isEmpty ( ) ) { < nl > - if ( GoogleCloudMessaging . MESSAGE _ TYPE _ MESSAGE . equals ( messageType ) ) { < nl > - if ( extras . containsKey ( " seq " ) ) { < nl > - int seq = Integer . parseInt ( extras . getString ( " seq " ) ) ; < nl > - messenger ( ) . onPushReceived ( seq ) ; < nl > - setResultCode ( Activity . RESULT _ OK ) ; < nl > - Log . d ( TAG , " Push received " ) ; < nl > - } < nl > - } < nl > - } < nl > - completeWakefulIntent ( intent ) ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / build . gradle b / actor - sdk / sdk - core - android / android - sdk / build . gradle < nl > index 5153388 . . 8c04484 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / build . gradle < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / build . gradle < nl > @ @ - 75 , 6 + 75 , 10 @ @ dependencies { < nl > compile ' com . android . support : palette - v7 : 23 . 1 . 0 ' < nl > compile ' com . android . support : recyclerview - v7 : 23 . 1 . 0 ' < nl > compile ' com . android . support : design : 23 . 1 . 0 ' < nl > + < nl > + / / GCM < nl > + compile ' com . google . android . gms : play - services - gcm : 7 . 5 . 0 ' < nl > + < nl > } < nl > < nl > / / < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > index 1492015 . . ef17a74 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > @ @ - 18 , 14 + 18 , 20 @ @ import im . actor . core . ApiConfiguration ; < nl > import im . actor . core . ConfigurationBuilder ; < nl > import im . actor . core . DeviceCategory ; < nl > import im . actor . core . PlatformType ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . Props ; < nl > import im . actor . sdk . core . AndroidNotifications ; < nl > import im . actor . sdk . core . AndroidPhoneBook ; < nl > + import im . actor . sdk . core . AndroidPushActor ; < nl > import im . actor . sdk . intents . ActivityManager ; < nl > import im . actor . sdk . services . KeepAliveService ; < nl > import im . actor . sdk . util . Devices ; < nl > import im . actor . sdk . view . emoji . SmileProcessor ; < nl > import im . actor . runtime . android . AndroidContext ; < nl > < nl > + import static im . actor . runtime . actors . ActorSystem . system ; < nl > + < nl > + < nl > public class ActorSDK { < nl > < nl > < nl > @ @ - 61 , 6 + 67 , 11 @ @ public class ActorSDK { < nl > * / < nl > private String apiAppKey = " 4295f9666fad3faf2d04277fe7a0c40ff39a85d313de5348ad8ffa650ad71855 " ; < nl > / * * < nl > + * Push Registration Id < nl > + * / < nl > + private long pushId = 0 ; < nl > + < nl > + / * * < nl > * Is Keeping app alive enabled < nl > * / < nl > private boolean isKeepAliveEnabled = false ; < nl > @ @ - 71 , 7 + 82 , 8 @ @ public class ActorSDK { < nl > / * * < nl > * ActivityManager < nl > * / < nl > - private ActivityManager activityManager = new ActivityManager ( ) ; < nl > + private ActivityManager activityManager = new ActivityManager ( ) ; < nl > + < nl > private ActorSDK ( ) { < nl > endpoints . add ( " tls : / / front1 - mtproto - api - rev2 . actor . im " ) ; < nl > endpoints . add ( " tls : / / front2 - mtproto - api - rev2 . actor . im " ) ; < nl > @ @ - 91 , 7 + 103 , 7 @ @ public class ActorSDK { < nl > / / SDK Initialization < nl > / / < nl > < nl > - public void createActor ( Application application ) { < nl > + public void createActor ( final Application application ) { < nl > < nl > this . application = application ; < nl > < nl > @ @ - 135 , 6 + 147 , 19 @ @ public class ActorSDK { < nl > AlarmManager alarm = ( AlarmManager ) application . getSystemService ( Context . ALARM _ SERVICE ) ; < nl > alarm . setRepeating ( AlarmManager . RTC , System . currentTimeMillis ( ) , 30 * 1000 , pendingIntent ) ; < nl > } < nl > + < nl > + / / < nl > + / / GCM < nl > + / / < nl > + if ( pushId ! = 0 ) { < nl > + system ( ) . actorOf ( Props . create ( AndroidPushActor . class , new ActorCreator < AndroidPushActor > ( ) { < nl > + @ Override < nl > + public AndroidPushActor create ( ) { < nl > + return new AndroidPushActor ( application , messenger ) ; < nl > + } < nl > + } ) , " actor / android / push " ) ; < nl > + } < nl > + < nl > } < nl > < nl > public void startMessagingApp ( Activity context ) { < nl > @ @ - 240 , 6 + 265 , 22 @ @ public class ActorSDK { < nl > this . isKeepAliveEnabled = isKeepAliveEnabled ; < nl > } < nl > < nl > + / * * < nl > + * Getting Push Registration Id < nl > + * < nl > + * @ return pushId < nl > + * / < nl > + public long getPushId ( ) { < nl > + return pushId ; < nl > + } < nl > + < nl > + / * * < nl > + * Setting Push Registration Id < nl > + * / < nl > + public void setPushId ( long pushId ) { < nl > + this . pushId = pushId ; < nl > + } < nl > + < nl > public ActorSDKDelegate getDelegate ( ) { < nl > return delegate ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java < nl > new file mode 100644 < nl > index 0000000 . . d65a7a8 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java < nl > @ @ - 0 , 0 + 1 , 101 @ @ < nl > + package im . actor . sdk . core ; < nl > + < nl > + import android . content . Context ; < nl > + < nl > + import com . google . android . gms . gcm . GoogleCloudMessaging ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . core . AndroidMessenger ; < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . actors . Actor ; < nl > + import im . actor . sdk . ActorSDK ; < nl > + < nl > + / * * < nl > + * GCM push implementation for Actor push registration . < nl > + * This actor is used for load GCM token and register it on server . < nl > + * / < nl > + public class AndroidPushActor extends Actor { < nl > + < nl > + private static final String TAG = " im . actor . core . AndroidPushActor " ; < nl > + < nl > + private final AndroidMessenger messenger ; < nl > + private final Context context ; < nl > + private boolean isRegistered ; < nl > + < nl > + public AndroidPushActor ( Context context , AndroidMessenger messenger ) { < nl > + this . messenger = messenger ; < nl > + this . context = context ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + super . preStart ( ) ; < nl > + < nl > + isRegistered = messenger . getPreferences ( ) . getBool ( " push _ registered " , false ) ; < nl > + < nl > + if ( ! isRegistered ) { < nl > + Log . d ( TAG , " Requesting push token . . . " ) ; < nl > + < nl > + / / TODO : Add backoff < nl > + new Thread ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + while ( true ) { < nl > + GoogleCloudMessaging cloudMessaging = GoogleCloudMessaging . getInstance ( context ) ; < nl > + try { < nl > + Log . d ( TAG , " Requesting push token iteration . . . " ) ; < nl > + String regId = cloudMessaging . register ( " " + ActorSDK . sharedActor ( ) . getPushId ( ) ) ; < nl > + if ( regId ! = null ) { < nl > + Log . d ( TAG , " Token loaded " ) ; < nl > + self ( ) . send ( new PushRegistered ( regId ) ) ; < nl > + return ; < nl > + } else { < nl > + Log . d ( TAG , " Unable to load Token " ) ; < nl > + } < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + Log . d ( TAG , " Waiting for next attempt " ) ; < nl > + try { < nl > + Thread . sleep ( 1000 ) ; < nl > + } catch ( InterruptedException e1 ) { < nl > + e1 . printStackTrace ( ) ; < nl > + return ; < nl > + } < nl > + } < nl > + } < nl > + } . start ( ) ; < nl > + } else { < nl > + Log . d ( TAG , " Already registered token " ) ; < nl > + } < nl > + } < nl > + < nl > + private void onPushRegistered ( String token ) { < nl > + isRegistered = true ; < nl > + messenger . getPreferences ( ) . putBool ( " push _ registered " , true ) ; < nl > + messenger . registerGooglePush ( ActorSDK . sharedActor ( ) . getPushId ( ) , token ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof PushRegistered ) { < nl > + PushRegistered pushRegistered = ( PushRegistered ) message ; < nl > + onPushRegistered ( pushRegistered . getToken ( ) ) ; < nl > + } else { < nl > + drop ( message ) ; < nl > + } < nl > + } < nl > + < nl > + public static class PushRegistered { < nl > + private String token ; < nl > + < nl > + public PushRegistered ( String token ) { < nl > + this . token = token ; < nl > + } < nl > + < nl > + public String getToken ( ) { < nl > + return token ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java < nl > new file mode 100644 < nl > index 0000000 . . 425cfb1 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java < nl > @ @ - 0 , 0 + 1 , 35 @ @ < nl > + package im . actor . sdk . core ; < nl > + < nl > + import android . app . Activity ; < nl > + import android . content . Context ; < nl > + import android . content . Intent ; < nl > + import android . os . Bundle ; < nl > + import android . support . v4 . content . WakefulBroadcastReceiver ; < nl > + < nl > + import com . google . android . gms . gcm . GoogleCloudMessaging ; < nl > + < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . sdk . ActorSDK ; < nl > + < nl > + public class PushReceiver extends WakefulBroadcastReceiver { < nl > + < nl > + private static final String TAG = " PushReceiver " ; < nl > + < nl > + @ Override < nl > + public void onReceive ( Context context , Intent intent ) { < nl > + GoogleCloudMessaging gcm = GoogleCloudMessaging . getInstance ( context ) ; < nl > + Bundle extras = intent . getExtras ( ) ; < nl > + String messageType = gcm . getMessageType ( intent ) ; < nl > + if ( ! extras . isEmpty ( ) ) { < nl > + if ( GoogleCloudMessaging . MESSAGE _ TYPE _ MESSAGE . equals ( messageType ) ) { < nl > + if ( extras . containsKey ( " seq " ) ) { < nl > + int seq = Integer . parseInt ( extras . getString ( " seq " ) ) ; < nl > + ActorSDK . sharedActor ( ) . getMessenger ( ) . onPushReceived ( seq ) ; < nl > + setResultCode ( Activity . RESULT _ OK ) ; < nl > + Log . d ( TAG , " Push received " ) ; < nl > + } < nl > + } < nl > + } < nl > + completeWakefulIntent ( intent ) ; < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml 
 index e2fef38 . . df3a2c5 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml 
 @ @ - 273 , 7 + 273 , 7 @ @ 
 
 < activity 
 android : name = " . controllers . activity . ShortcutActivity " 
 - android : theme = " @ android : style / Theme . NoDisplay " 
 + android : theme = " @ style / AppcompatNoDisplay " 
 android : launchMode = " singleInstance " > 
 < intent - filter > 
 < action android : name = " im . actor . action . botMessageShortcut " / > 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / ShortcutActivity . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / ShortcutActivity . java 
 index c39147e . . 4a0aeaf 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / ShortcutActivity . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / activity / ShortcutActivity . java 
 @ @ - 1 , 16 + 1 , 34 @ @ 
 package im . actor . sdk . controllers . activity ; 
 
 import android . app . Activity ; 
 + import android . content . DialogInterface ; 
 import android . content . Intent ; 
 + import android . graphics . Color ; 
 + import android . graphics . drawable . ColorDrawable ; 
 import android . os . Bundle ; 
 + import android . os . PersistableBundle ; 
 + import android . support . v7 . app . AlertDialog ; 
 + import android . support . v7 . app . AppCompatActivity ; 
 + import android . text . InputType ; 
 + import android . view . ContextThemeWrapper ; 
 + import android . view . View ; 
 + import android . view . inputmethod . InputMethodManager ; 
 + import android . widget . EditText ; 
 + import android . widget . LinearLayout ; 
 + import android . widget . Toast ; 
 
 import im . actor . core . entity . Peer ; 
 import im . actor . runtime . Log ; 
 + import im . actor . sdk . R ; 
 + import im . actor . sdk . util . Screen ; 
 
 import static im . actor . sdk . util . ActorSDKMessenger . messenger ; 
 import static im . actor . sdk . util . ActorSDKMessenger . users ; 
 
 - public class ShortcutActivity extends Activity { 
 + public class ShortcutActivity extends AppCompatActivity implements DialogInterface . OnDismissListener { 
 + String textToSend = " " ; 
 + private EditText input ; 
 + 
 @ Override 
 protected void onCreate ( Bundle savedInstanceState ) { 
 super . onCreate ( savedInstanceState ) ; 
 @ @ - 25 , 10 + 43 , 117 @ @ public class ShortcutActivity extends Activity { 
 } 
 
 private void handeleIntent ( Intent i ) { 
 - Peer p = Peer . fromUniqueId ( i . getLongExtra ( " peer " , 0 ) ) ; 
 + final Peer p = Peer . fromUniqueId ( i . getLongExtra ( " peer " , 0 ) ) ; 
 String text = i . getStringExtra ( " text " ) ; 
 + final String name = users ( ) . get ( p . getPeerId ( ) ) . getName ( ) . get ( ) ; 
 + 
 + if ( text . contains ( " { input } " ) | | text . contains ( " { input / num } " ) ) { 
 + boolean num = text . contains ( " { input / num } " ) ; 
 + if ( num ) { 
 + text = text . replace ( " { input / num } " , " { input } " ) ; 
 + } 
 + AlertDialog . Builder builder = new AlertDialog . Builder ( this , R . style . AlertDialogStyle ) ; 
 + String title = text . replace ( " { input } " , " " ) + " \ u2192 " + name ; 
 + builder . setTitle ( title ) ; 
 + 
 + LinearLayout ll = new LinearLayout ( this ) ; 
 + ll . setPadding ( Screen . dp ( 20 ) , 0 , Screen . dp ( 20 ) , 0 ) ; 
 + 
 + input = new EditText ( this ) ; 
 + if ( num ) { 
 + input . setInputType ( InputType . TYPE _ CLASS _ NUMBER | InputType . TYPE _ NUMBER _ FLAG _ SIGNED ) ; 
 + } 
 + input . setTextColor ( Color . BLACK ) ; 
 + ll . addView ( input , LinearLayout . LayoutParams . MATCH _ PARENT , LinearLayout . LayoutParams . WRAP _ CONTENT ) ; 
 + builder . setView ( ll ) ; 
 + 
 + final String finalText = text ; 
 + builder . setPositiveButton ( getString ( R . string . dialog _ ok ) , new DialogInterface . OnClickListener ( ) { 
 + @ Override 
 + public void onClick ( DialogInterface dialog , int which ) { 
 + send ( p , finalText . replace ( " { input } " , input . getText ( ) . toString ( ) ) , name ) ; 
 + } 
 + } ) ; 
 + builder . setNegativeButton ( R . string . dialog _ cancel , new DialogInterface . OnClickListener ( ) { 
 + @ Override 
 + public void onClick ( DialogInterface dialog , int which ) { 
 + dialog . cancel ( ) ; 
 + } 
 + } ) ; 
 + 
 + 
 + builder . setOnDismissListener ( this ) ; 
 + AlertDialog ad = builder . create ( ) ; 
 + ad . setOnShowListener ( new DialogInterface . OnShowListener ( ) { 
 + @ Override 
 + public void onShow ( DialogInterface dialog ) { 
 + InputMethodManager inputMethodManager = ( InputMethodManager ) getSystemService ( INPUT _ METHOD _ SERVICE ) ; 
 + input . requestFocus ( ) ; 
 + inputMethodManager . showSoftInput ( input , 0 ) ; 
 + } 
 + } ) ; 
 + ad . show ( ) ; 
 + } else if ( text . contains ( " { choose } " ) & & text . contains ( " { / choose } " ) ) { 
 + final String rawVars = text . substring ( text . indexOf ( " { choose } " ) + 8 , text . indexOf ( " { / choose } " ) ) ; 
 + final String [ ] vars = rawVars . split ( " / " ) ; 
 + AlertDialog . Builder builder = new AlertDialog . Builder ( this , R . style . AlertDialogStyle ) ; 
 + 
 + final String rawCommand = text . replace ( rawVars , " " ) . replace ( " { choose } " , " " ) . replace ( " { / choose } " , " " ) ; 
 + builder . setTitle ( rawCommand + " \ u2192 " + name ) ; 
 + 
 + textToSend = rawCommand + vars [ 0 ] ; 
 + 
 + builder . setSingleChoiceItems ( vars , 0 , new DialogInterface . OnClickListener ( ) { 
 + @ Override 
 + public void onClick ( DialogInterface dialog , int which ) { 
 + textToSend = rawCommand + vars [ which ] ; 
 + } 
 + } ) ; 
 + 
 + builder . setPositiveButton ( getString ( R . string . dialog _ ok ) , new DialogInterface . OnClickListener ( ) { 
 + @ Override 
 + public void onClick ( DialogInterface dialog , int which ) { 
 + send ( p , textToSend , name ) ; 
 + } 
 + } ) ; 
 + builder . setNegativeButton ( R . string . dialog _ cancel , new DialogInterface . OnClickListener ( ) { 
 + @ Override 
 + public void onClick ( DialogInterface dialog , int which ) { 
 + dialog . cancel ( ) ; 
 + } 
 + } ) ; 
 + builder . setOnDismissListener ( this ) ; 
 + builder . show ( ) ; 
 + } else { 
 + send ( p , text , name ) ; 
 + } 
 + } 
 + 
 + private void send ( Peer p , String text , String name ) { 
 if ( users ( ) . get ( p . getPeerId ( ) ) . isBot ( ) ) { 
 messenger ( ) . sendMessage ( p , text ) ; 
 + 
 + Toast . makeText ( getApplicationContext ( ) , " \ " " + text + " \ " sent to " + name + " bot " , Toast . LENGTH _ SHORT ) . show ( ) ; 
 } 
 + finish ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onDismiss ( DialogInterface dialog ) { 
 + AlertDialog . Builder builder = new AlertDialog . Builder ( this , R . style . AlertDialogStyle ) ; 
 + input = new EditText ( this ) ; 
 + input . setVisibility ( View . INVISIBLE ) ; 
 + builder . setView ( input ) ; 
 + AlertDialog adHide = builder . create ( ) ; 
 + adHide . getWindow ( ) . setBackgroundDrawable ( new ColorDrawable ( Color . TRANSPARENT ) ) ; 
 + adHide . setOnShowListener ( new DialogInterface . OnShowListener ( ) { 
 + @ Override 
 + public void onShow ( DialogInterface dialog ) { 
 + dialog . dismiss ( ) ; 
 + finish ( ) ; 
 + } 
 + } ) ; 
 + adHide . show ( ) ; 
 + 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesFragment . java 
 index 33136e6 . . 94e5455 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesFragment . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesFragment . java 
 @ @ - 6 , 25 + 6 , 32 @ @ import android . app . AlertDialog ; 
 import android . content . Context ; 
 import android . content . DialogInterface ; 
 import android . content . Intent ; 
 + import android . graphics . Color ; 
 import android . os . Build ; 
 import android . os . Bundle ; 
 import android . support . annotation . Nullable ; 
 + import android . support . v4 . app . FragmentActivity ; 
 import android . support . v7 . app . AppCompatActivity ; 
 import android . support . v7 . view . ActionMode ; 
 import android . support . v7 . widget . ChatLinearLayoutManager ; 
 import android . support . v7 . widget . RecyclerView ; 
 + import android . text . InputType ; 
 import android . view . LayoutInflater ; 
 import android . view . Menu ; 
 import android . view . MenuItem ; 
 import android . view . View ; 
 import android . view . ViewGroup ; 
 + import android . view . inputmethod . InputMethodManager ; 
 + import android . widget . EditText ; 
 import android . widget . FrameLayout ; 
 + import android . widget . LinearLayout ; 
 import android . widget . Toast ; 
 
 import java . io . IOException ; 
 
 import im . actor . core . entity . Message ; 
 import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . PeerType ; 
 import im . actor . core . entity . content . DocumentContent ; 
 import im . actor . core . entity . content . FileLocalSource ; 
 import im . actor . core . entity . content . FileRemoteSource ; 
 @ @ - 284 , 30 + 291 , 67 @ @ public class MessagesFragment extends DisplayListFragment < Message , MessageHolder 
 menu . findItem ( R . id . quote ) . setVisible ( isAllText ) ; 
 menu . findItem ( R . id . forward ) . setVisible ( selected . length = = 1 | | isAllText ) ; 
 menu . findItem ( R . id . like ) . setVisible ( selected . length = = 1 ) ; 
 - menu . findItem ( R . id . shortcut ) . setVisible ( selected . length = = 1 & & isAllText & & users ( ) . get ( peer . getPeerId ( ) ) . isBot ( ) ) ; 
 + menu . findItem ( R . id . shortcut ) . setVisible ( peer . getPeerType ( ) = = PeerType . PRIVATE & selected . length = = 1 & & isAllText & & users ( ) . get ( peer . getPeerId ( ) ) . isBot ( ) ) ; 
 return false ; 
 } 
 
 @ Override 
 public boolean onActionItemClicked ( final ActionMode actionMode , MenuItem menuItem ) { 
 if ( menuItem . getItemId ( ) = = R . id . shortcut ) { 
 - Intent shortcutIntent = new Intent ( getContext ( ) , ShortcutActivity . class ) ; 
 - shortcutIntent . addFlags ( Intent . FLAG _ ACTIVITY _ NO _ HISTORY | Intent . FLAG _ ACTIVITY _ EXCLUDE _ FROM _ RECENTS | Intent . FLAG _ ACTIVITY _ TASK _ ON _ HOME ) ; 
 - shortcutIntent . setAction ( " im . actor . action . botMessageShortcut " ) ; 
 - shortcutIntent . putExtra ( " peer " , peer . getUnuqueId ( ) ) ; 
 - String text = messenger ( ) . getFormatter ( ) . formatMessagesExport ( messagesAdapter . getSelected ( ) ) ; 
 - shortcutIntent . putExtra ( " text " , text ) ; 
 - Intent addIntent = new Intent ( ) ; 
 - addIntent 
 - . putExtra ( Intent . EXTRA _ SHORTCUT _ INTENT , shortcutIntent ) ; 
 - addIntent . putExtra ( Intent . EXTRA _ SHORTCUT _ NAME , text + " - > " + users ( ) . get ( peer . getPeerId ( ) ) . getNick ( ) . get ( ) ) ; 
 - addIntent . putExtra ( Intent . EXTRA _ SHORTCUT _ ICON _ RESOURCE , 
 - Intent . ShortcutIconResource . fromContext ( getContext ( ) , 
 - R . drawable . ic _ message _ white _ 24dp ) ) ; 
 - 
 - addIntent . setAction ( " com . android . launcher . action . INSTALL _ SHORTCUT " ) ; 
 - getContext ( ) . getApplicationContext ( ) . sendBroadcast ( addIntent ) ; 
 - actionMode . finish ( ) ; 
 + final String text = messenger ( ) . getFormatter ( ) . formatMessagesExport ( messagesAdapter . getSelected ( ) ) ; 
 + 
 + android . support . v7 . app . AlertDialog . Builder builder = new android . support . v7 . app . AlertDialog . Builder ( getActivity ( ) , R . style . AlertDialogStyle ) ; 
 + builder . setTitle ( menuItem . getTitle ( ) ) ; 
 + 
 + final LinearLayout ll = new LinearLayout ( getActivity ( ) ) ; 
 + ll . setPadding ( Screen . dp ( 20 ) , 0 , Screen . dp ( 20 ) , 0 ) ; 
 + 
 + final EditText input = new EditText ( getActivity ( ) ) ; 
 + input . setTextColor ( Color . BLACK ) ; 
 + input . setText ( text ) ; 
 + ll . addView ( input , LinearLayout . LayoutParams . MATCH _ PARENT , LinearLayout . LayoutParams . WRAP _ CONTENT ) ; 
 + builder . setView ( ll ) ; 
 + 
 + builder . setPositiveButton ( getString ( R . string . dialog _ ok ) , new DialogInterface . OnClickListener ( ) { 
 + @ Override 
 + public void onClick ( DialogInterface dialog , int which ) { 
 + Intent shortcutIntent = new Intent ( getContext ( ) , ShortcutActivity . class ) ; 
 + shortcutIntent . addFlags ( Intent . FLAG _ ACTIVITY _ NO _ HISTORY | Intent . FLAG _ ACTIVITY _ EXCLUDE _ FROM _ RECENTS | Intent . FLAG _ ACTIVITY _ TASK _ ON _ HOME | Intent . FLAG _ ACTIVITY _ NEW _ DOCUMENT | Intent . FLAG _ ACTIVITY _ MULTIPLE _ TASK ) ; 
 + shortcutIntent . setAction ( " im . actor . action . botMessageShortcut " ) ; 
 + shortcutIntent . putExtra ( " peer " , peer . getUnuqueId ( ) ) ; 
 + shortcutIntent . putExtra ( " text " , input . getText ( ) . toString ( ) ) ; 
 + Intent addIntent = new Intent ( ) ; 
 + addIntent 
 + . putExtra ( Intent . EXTRA _ SHORTCUT _ INTENT , shortcutIntent ) ; 
 + addIntent . putExtra ( Intent . EXTRA _ SHORTCUT _ NAME , input . getText ( ) . toString ( ) + " - > " + users ( ) . get ( peer . getPeerId ( ) ) . getNick ( ) . get ( ) ) ; 
 + addIntent . putExtra ( Intent . EXTRA _ SHORTCUT _ ICON _ RESOURCE , 
 + Intent . ShortcutIconResource . fromContext ( getContext ( ) , 
 + R . drawable . ic _ message _ white _ 24dp ) ) ; 
 + 
 + addIntent . setAction ( " com . android . launcher . action . INSTALL _ SHORTCUT " ) ; 
 + getContext ( ) . getApplicationContext ( ) . sendBroadcast ( addIntent ) ; 
 + actionMode . finish ( ) ; 
 + } 
 + } ) ; 
 + builder . setNegativeButton ( R . string . dialog _ cancel , new DialogInterface . OnClickListener ( ) { 
 + @ Override 
 + public void onClick ( DialogInterface dialog , int which ) { 
 + dialog . cancel ( ) ; 
 + } 
 + } ) ; 
 + 
 + android . support . v7 . app . AlertDialog ad = builder . create ( ) ; 
 + ad . setOnShowListener ( new DialogInterface . OnShowListener ( ) { 
 + @ Override 
 + public void onShow ( DialogInterface dialog ) { 
 + InputMethodManager inputMethodManager = ( InputMethodManager ) getActivity ( ) . getSystemService ( FragmentActivity . INPUT _ METHOD _ SERVICE ) ; 
 + input . requestFocus ( ) ; 
 + inputMethodManager . showSoftInput ( input , 0 ) ; 
 + } 
 + } ) ; 
 + ad . show ( ) ; 
 + 
 + 
 } else if ( menuItem . getItemId ( ) = = R . id . delete ) { 
 Message [ ] selected = messagesAdapter . getSelected ( ) ; 
 final long [ ] rids = new long [ selected . length ] ; 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / styles . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / styles . xml 
 index 9e62168 . . 6f2b8ab 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / styles . xml 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / styles . xml 
 @ @ - 85 , 4 + 85 , 17 @ @ 
 < item name = " android : windowTranslucentStatus " > true < / item > 
 < item name = " android : windowAnimationStyle " > @ null < / item > 
 < / style > 
 + 
 + < style name = " AlertDialogStyle " parent = " Theme . AppCompat . Light . Dialog . Alert " / > 
 + 
 + < style name = " AppcompatNoDisplay " parent = " Theme . AppCompat . NoActionBar " > 
 + < item name = " android : windowBackground " > @ null < / item > 
 + < item name = " android : windowContentOverlay " > @ null < / item > 
 + < item name = " android : windowIsTranslucent " > true < / item > 
 + < item name = " android : windowAnimationStyle " > @ null < / item > 
 + < item name = " android : windowDisablePreview " > true < / item > 
 + < item name = " android : windowNoDisplay " > true < / item > 
 + < item name = " android : textCursorDrawable " > @ null < / item > 
 + < / style > 
 + 
 < / resources > 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 index 71da5ab . . 8045a74 100644 
 - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 @ @ - 1 , 11 + 1 , 7 @ @ 
 package im . actor ; 
 
 - import java . util . ArrayList ; 
 - 
 - import im . actor . auth . SignEmailFragment ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . BaseActorSDKDelegate ; 
 - import im . actor . sdk . controllers . fragment . auth . BaseAuthFragment ; 
 
 / * * 
 * Created by badgr on 16 . 10 . 2015 . 
 @ @ - 15 , 13 + 11 , 11 @ @ public class Application extends android . app . Application { 
 public void onCreate ( ) { 
 super . onCreate ( ) ; 
 ActorSDK . sharedActor ( ) . setDelegate ( new ActorSDKDelegate ( ) ) ; 
 + ActorSDK . sharedActor ( ) . setPushId ( 209133700967L ) ; 
 ActorSDK . sharedActor ( ) . createActor ( this ) ; 
 } 
 
 private class ActorSDKDelegate extends BaseActorSDKDelegate { 
 - @ Override 
 - public BaseAuthFragment getSignFragment ( ) { 
 - return new SignEmailFragment ( ) ; 
 - } 
 + 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java 
 deleted file mode 100644 
 index 37ce216 . . 0000000 
 - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java 
 + + + / dev / null 
 @ @ - 1 , 137 + 0 , 0 @ @ 
 - package im . actor . auth ; 
 - 
 - import android . app . AlertDialog ; 
 - import android . os . Bundle ; 
 - import android . telephony . PhoneNumberFormattingTextWatcher ; 
 - import android . text . Editable ; 
 - import android . text . TextWatcher ; 
 - import android . view . KeyEvent ; 
 - import android . view . LayoutInflater ; 
 - import android . view . View ; 
 - import android . view . ViewGroup ; 
 - import android . view . inputmethod . EditorInfo ; 
 - import android . widget . EditText ; 
 - import android . widget . TextView ; 
 - 
 - import im . actor . sdk . ActorSDK ; 
 - import im . actor . sdk . R ; 
 - import im . actor . sdk . controllers . fragment . auth . BaseAuthFragment ; 
 - import im . actor . sdk . util . Fonts ; 
 - import im . actor . sdk . util . KeyboardHelper ; 
 - 
 - import static im . actor . sdk . util . ActorSDKMessenger . messenger ; 
 - 
 - public class SignEmailFragment extends BaseAuthFragment { 
 - 
 - private EditText emailEditText ; 
 - private KeyboardHelper keyboardHelper ; 
 - 
 - @ Override 
 - public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { 
 - View v = inflater . inflate ( R . layout . fragment _ sign _ email , container , false ) ; 
 - 
 - ( ( TextView ) v . findViewById ( R . id . button _ continue _ text ) ) . setTypeface ( Fonts . medium ( ) ) ; 
 - 
 - keyboardHelper = new KeyboardHelper ( getActivity ( ) ) ; 
 - 
 - initView ( v ) ; 
 - 
 - return v ; 
 - } 
 - 
 - @ Override 
 - public void onResume ( ) { 
 - super . onResume ( ) ; 
 - 
 - / / TODO track email auth open 
 - / / messenger ( ) . trackAuthPhoneOpen ( ) ; 
 - 
 - setTitle ( R . string . auth _ email _ title ) ; 
 - 
 - focusEmail ( ) ; 
 - 
 - keyboardHelper . setImeVisibility ( emailEditText , true ) ; 
 - } 
 - 
 - private void initView ( View v ) { 
 - 
 - emailEditText = ( EditText ) v . findViewById ( R . id . tv _ email ) ; 
 - emailEditText . addTextChangedListener ( new PhoneNumberFormattingTextWatcher ( ) ) ; 
 - String email = messenger ( ) . getAuthEmail ( ) ; 
 - if ( email ! = null & & ! email . isEmpty ( ) ) { 
 - emailEditText . setText ( email ) ; 
 - } 
 - emailEditText . setOnEditorActionListener ( new TextView . OnEditorActionListener ( ) { 
 - @ Override 
 - public boolean onEditorAction ( TextView textView , int id , KeyEvent keyEvent ) { 
 - if ( id = = EditorInfo . IME _ ACTION _ GO ) { 
 - requestCode ( ) ; 
 - return true ; 
 - } 
 - return false ; 
 - } 
 - } ) ; 
 - emailEditText . addTextChangedListener ( new TextWatcher ( ) { 
 - @ Override 
 - public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { 
 - 
 - } 
 - 
 - @ Override 
 - public void onTextChanged ( CharSequence s , int start , int before , int count ) { 
 - 
 - } 
 - 
 - @ Override 
 - public void afterTextChanged ( Editable s ) { 
 - / / TODO trackAuthEmailType 
 - / / messenger ( ) . trackAuthPhoneType ( emailEditText . getText ( ) . toString ( ) ) ; 
 - } 
 - } ) ; 
 - 
 - onClick ( v , R . id . button _ continue , new View . OnClickListener ( ) { 
 - @ Override 
 - public void onClick ( View view ) { 
 - requestCode ( ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - private void requestCode ( ) { 
 - final String ACTION = " Request code email " ; 
 - 
 - 
 - if ( emailEditText . getText ( ) . toString ( ) . trim ( ) . length ( ) = = 0 ) { 
 - String message = getString ( R . string . auth _ error _ empty _ email ) ; 
 - new AlertDialog . Builder ( getActivity ( ) ) 
 - . setMessage ( R . string . auth _ error _ empty _ email ) 
 - . setPositiveButton ( R . string . dialog _ ok , null ) 
 - . show ( ) ; 
 - return ; 
 - } 
 - 
 - String rawEmail = emailEditText . getText ( ) . toString ( ) ; 
 - 
 - if ( rawEmail . length ( ) = = 0 ) { 
 - String message = getString ( R . string . auth _ error _ empty _ email ) ; 
 - new AlertDialog . Builder ( getActivity ( ) ) 
 - . setMessage ( R . string . auth _ error _ empty _ email ) 
 - . setPositiveButton ( R . string . dialog _ ok , null ) 
 - . show ( ) ; 
 - return ; 
 - } 
 - 
 - setAuthId ( rawEmail ) ; 
 - 
 - executeAuth ( ActorSDK . sharedActor ( ) . getMessenger ( ) . requestStartEmailAuth ( rawEmail ) , ACTION ) ; 
 - } 
 - 
 - private void focusEmail ( ) { 
 - focus ( emailEditText ) ; 
 - } 
 - 
 - @ Override 
 - public String getHintText ( ) { 
 - return getString ( R . string . auth _ code _ email _ hint ) . replace ( " { 0 } " , " < b > " + getAuthId ( ) + " < / b > " ) ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java b / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java 
 deleted file mode 100644 
 index c74e30f . . 0000000 
 - - - a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java 
 + + + / dev / null 
 @ @ - 1 , 100 + 0 , 0 @ @ 
 - package im . actor . core ; 
 - 
 - import android . content . Context ; 
 - 
 - import com . google . android . gms . gcm . GoogleCloudMessaging ; 
 - 
 - import java . io . IOException ; 
 - 
 - import im . actor . messenger . app . core . ActorSDK ; 
 - import im . actor . runtime . Log ; 
 - import im . actor . runtime . actors . Actor ; 
 - 
 - / * * 
 - * GCM push implementation for Actor push registration . 
 - * This actor is used for load GCM token and register it on server . 
 - * / 
 - public class AndroidPushActor extends Actor { 
 - 
 - private static final String TAG = " im . actor . core . AndroidPushActor " ; 
 - 
 - private final AndroidMessenger messenger ; 
 - private final Context context ; 
 - private boolean isRegistered ; 
 - 
 - public AndroidPushActor ( Context context , AndroidMessenger messenger ) { 
 - this . messenger = messenger ; 
 - this . context = context ; 
 - } 
 - 
 - @ Override 
 - public void preStart ( ) { 
 - super . preStart ( ) ; 
 - 
 - isRegistered = messenger . getPreferences ( ) . getBool ( " push _ registered " , false ) ; 
 - 
 - if ( ! isRegistered ) { 
 - Log . d ( TAG , " Requesting push token . . . " ) ; 
 - 
 - / / TODO : Add backoff 
 - new Thread ( ) { 
 - @ Override 
 - public void run ( ) { 
 - while ( true ) { 
 - GoogleCloudMessaging cloudMessaging = GoogleCloudMessaging . getInstance ( context ) ; 
 - try { 
 - Log . d ( TAG , " Requesting push token iteration . . . " ) ; 
 - String regId = cloudMessaging . register ( " " + ActorSDK . sharedActor ( ) . getGcmProjectId ( ) ) ; 
 - if ( regId ! = null ) { 
 - Log . d ( TAG , " Token loaded " ) ; 
 - self ( ) . send ( new PushRegistered ( regId ) ) ; 
 - return ; 
 - } else { 
 - Log . d ( TAG , " Unable to load Token " ) ; 
 - } 
 - } catch ( IOException e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - Log . d ( TAG , " Waiting for next attempt " ) ; 
 - try { 
 - Thread . sleep ( 1000 ) ; 
 - } catch ( InterruptedException e1 ) { 
 - e1 . printStackTrace ( ) ; 
 - return ; 
 - } 
 - } 
 - } 
 - } . start ( ) ; 
 - } else { 
 - Log . d ( TAG , " Already registered token " ) ; 
 - } 
 - } 
 - 
 - private void onPushRegistered ( String token ) { 
 - isRegistered = true ; 
 - messenger . getPreferences ( ) . putBool ( " push _ registered " , true ) ; 
 - messenger . registerGooglePush ( ActorSDK . sharedActor ( ) . getGcmProjectId ( ) , token ) ; 
 - } 
 - 
 - @ Override 
 - public void onReceive ( Object message ) { 
 - if ( message instanceof PushRegistered ) { 
 - PushRegistered pushRegistered = ( PushRegistered ) message ; 
 - onPushRegistered ( pushRegistered . getToken ( ) ) ; 
 - } else { 
 - drop ( message ) ; 
 - } 
 - } 
 - 
 - public static class PushRegistered { 
 - private String token ; 
 - 
 - public PushRegistered ( String token ) { 
 - this . token = token ; 
 - } 
 - 
 - public String getToken ( ) { 
 - return token ; 
 - } 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java b / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java 
 deleted file mode 100644 
 index 8dbd762 . . 0000000 
 - - - a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java 
 + + + / dev / null 
 @ @ - 1 , 37 + 0 , 0 @ @ 
 - package im . actor . messenger ; 
 - 
 - import android . app . Activity ; 
 - import android . content . Context ; 
 - import android . content . Intent ; 
 - import android . os . Bundle ; 
 - import android . support . v4 . content . WakefulBroadcastReceiver ; 
 - 
 - import com . google . android . gms . gcm . GoogleCloudMessaging ; 
 - 
 - import im . actor . runtime . Log ; 
 - 
 - 
 - import static im . actor . messenger . app . core . ActorSDK . messenger ; 
 - 
 - public class PushReceiver extends WakefulBroadcastReceiver { 
 - 
 - private static final String TAG = " PushReceiver " ; 
 - 
 - @ Override 
 - public void onReceive ( Context context , Intent intent ) { 
 - GoogleCloudMessaging gcm = GoogleCloudMessaging . getInstance ( context ) ; 
 - Bundle extras = intent . getExtras ( ) ; 
 - String messageType = gcm . getMessageType ( intent ) ; 
 - if ( ! extras . isEmpty ( ) ) { 
 - if ( GoogleCloudMessaging . MESSAGE _ TYPE _ MESSAGE . equals ( messageType ) ) { 
 - if ( extras . containsKey ( " seq " ) ) { 
 - int seq = Integer . parseInt ( extras . getString ( " seq " ) ) ; 
 - messenger ( ) . onPushReceived ( seq ) ; 
 - setResultCode ( Activity . RESULT _ OK ) ; 
 - Log . d ( TAG , " Push received " ) ; 
 - } 
 - } 
 - } 
 - completeWakefulIntent ( intent ) ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / build . gradle b / actor - sdk / sdk - core - android / android - sdk / build . gradle 
 index 5153388 . . 8c04484 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / build . gradle 
 + + + b / actor - sdk / sdk - core - android / android - sdk / build . gradle 
 @ @ - 75 , 6 + 75 , 10 @ @ dependencies { 
 compile ' com . android . support : palette - v7 : 23 . 1 . 0 ' 
 compile ' com . android . support : recyclerview - v7 : 23 . 1 . 0 ' 
 compile ' com . android . support : design : 23 . 1 . 0 ' 
 + 
 + / / GCM 
 + compile ' com . google . android . gms : play - services - gcm : 7 . 5 . 0 ' 
 + 
 } 
 
 / / 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 index 1492015 . . ef17a74 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 @ @ - 18 , 14 + 18 , 20 @ @ import im . actor . core . ApiConfiguration ; 
 import im . actor . core . ConfigurationBuilder ; 
 import im . actor . core . DeviceCategory ; 
 import im . actor . core . PlatformType ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . Props ; 
 import im . actor . sdk . core . AndroidNotifications ; 
 import im . actor . sdk . core . AndroidPhoneBook ; 
 + import im . actor . sdk . core . AndroidPushActor ; 
 import im . actor . sdk . intents . ActivityManager ; 
 import im . actor . sdk . services . KeepAliveService ; 
 import im . actor . sdk . util . Devices ; 
 import im . actor . sdk . view . emoji . SmileProcessor ; 
 import im . actor . runtime . android . AndroidContext ; 
 
 + import static im . actor . runtime . actors . ActorSystem . system ; 
 + 
 + 
 public class ActorSDK { 
 
 
 @ @ - 61 , 6 + 67 , 11 @ @ public class ActorSDK { 
 * / 
 private String apiAppKey = " 4295f9666fad3faf2d04277fe7a0c40ff39a85d313de5348ad8ffa650ad71855 " ; 
 / * * 
 + * Push Registration Id 
 + * / 
 + private long pushId = 0 ; 
 + 
 + / * * 
 * Is Keeping app alive enabled 
 * / 
 private boolean isKeepAliveEnabled = false ; 
 @ @ - 71 , 7 + 82 , 8 @ @ public class ActorSDK { 
 / * * 
 * ActivityManager 
 * / 
 - private ActivityManager activityManager = new ActivityManager ( ) ; 
 + private ActivityManager activityManager = new ActivityManager ( ) ; 
 + 
 private ActorSDK ( ) { 
 endpoints . add ( " tls : / / front1 - mtproto - api - rev2 . actor . im " ) ; 
 endpoints . add ( " tls : / / front2 - mtproto - api - rev2 . actor . im " ) ; 
 @ @ - 91 , 7 + 103 , 7 @ @ public class ActorSDK { 
 / / SDK Initialization 
 / / 
 
 - public void createActor ( Application application ) { 
 + public void createActor ( final Application application ) { 
 
 this . application = application ; 
 
 @ @ - 135 , 6 + 147 , 19 @ @ public class ActorSDK { 
 AlarmManager alarm = ( AlarmManager ) application . getSystemService ( Context . ALARM _ SERVICE ) ; 
 alarm . setRepeating ( AlarmManager . RTC , System . currentTimeMillis ( ) , 30 * 1000 , pendingIntent ) ; 
 } 
 + 
 + / / 
 + / / GCM 
 + / / 
 + if ( pushId ! = 0 ) { 
 + system ( ) . actorOf ( Props . create ( AndroidPushActor . class , new ActorCreator < AndroidPushActor > ( ) { 
 + @ Override 
 + public AndroidPushActor create ( ) { 
 + return new AndroidPushActor ( application , messenger ) ; 
 + } 
 + } ) , " actor / android / push " ) ; 
 + } 
 + 
 } 
 
 public void startMessagingApp ( Activity context ) { 
 @ @ - 240 , 6 + 265 , 22 @ @ public class ActorSDK { 
 this . isKeepAliveEnabled = isKeepAliveEnabled ; 
 } 
 
 + / * * 
 + * Getting Push Registration Id 
 + * 
 + * @ return pushId 
 + * / 
 + public long getPushId ( ) { 
 + return pushId ; 
 + } 
 + 
 + / * * 
 + * Setting Push Registration Id 
 + * / 
 + public void setPushId ( long pushId ) { 
 + this . pushId = pushId ; 
 + } 
 + 
 public ActorSDKDelegate getDelegate ( ) { 
 return delegate ; 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java 
 new file mode 100644 
 index 0000000 . . d65a7a8 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java 
 @ @ - 0 , 0 + 1 , 101 @ @ 
 + package im . actor . sdk . core ; 
 + 
 + import android . content . Context ; 
 + 
 + import com . google . android . gms . gcm . GoogleCloudMessaging ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . core . AndroidMessenger ; 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . actors . Actor ; 
 + import im . actor . sdk . ActorSDK ; 
 + 
 + / * * 
 + * GCM push implementation for Actor push registration . 
 + * This actor is used for load GCM token and register it on server . 
 + * / 
 + public class AndroidPushActor extends Actor { 
 + 
 + private static final String TAG = " im . actor . core . AndroidPushActor " ; 
 + 
 + private final AndroidMessenger messenger ; 
 + private final Context context ; 
 + private boolean isRegistered ; 
 + 
 + public AndroidPushActor ( Context context , AndroidMessenger messenger ) { 
 + this . messenger = messenger ; 
 + this . context = context ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + super . preStart ( ) ; 
 + 
 + isRegistered = messenger . getPreferences ( ) . getBool ( " push _ registered " , false ) ; 
 + 
 + if ( ! isRegistered ) { 
 + Log . d ( TAG , " Requesting push token . . . " ) ; 
 + 
 + / / TODO : Add backoff 
 + new Thread ( ) { 
 + @ Override 
 + public void run ( ) { 
 + while ( true ) { 
 + GoogleCloudMessaging cloudMessaging = GoogleCloudMessaging . getInstance ( context ) ; 
 + try { 
 + Log . d ( TAG , " Requesting push token iteration . . . " ) ; 
 + String regId = cloudMessaging . register ( " " + ActorSDK . sharedActor ( ) . getPushId ( ) ) ; 
 + if ( regId ! = null ) { 
 + Log . d ( TAG , " Token loaded " ) ; 
 + self ( ) . send ( new PushRegistered ( regId ) ) ; 
 + return ; 
 + } else { 
 + Log . d ( TAG , " Unable to load Token " ) ; 
 + } 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + Log . d ( TAG , " Waiting for next attempt " ) ; 
 + try { 
 + Thread . sleep ( 1000 ) ; 
 + } catch ( InterruptedException e1 ) { 
 + e1 . printStackTrace ( ) ; 
 + return ; 
 + } 
 + } 
 + } 
 + } . start ( ) ; 
 + } else { 
 + Log . d ( TAG , " Already registered token " ) ; 
 + } 
 + } 
 + 
 + private void onPushRegistered ( String token ) { 
 + isRegistered = true ; 
 + messenger . getPreferences ( ) . putBool ( " push _ registered " , true ) ; 
 + messenger . registerGooglePush ( ActorSDK . sharedActor ( ) . getPushId ( ) , token ) ; 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof PushRegistered ) { 
 + PushRegistered pushRegistered = ( PushRegistered ) message ; 
 + onPushRegistered ( pushRegistered . getToken ( ) ) ; 
 + } else { 
 + drop ( message ) ; 
 + } 
 + } 
 + 
 + public static class PushRegistered { 
 + private String token ; 
 + 
 + public PushRegistered ( String token ) { 
 + this . token = token ; 
 + } 
 + 
 + public String getToken ( ) { 
 + return token ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java 
 new file mode 100644 
 index 0000000 . . 425cfb1 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + package im . actor . sdk . core ; 
 + 
 + import android . app . Activity ; 
 + import android . content . Context ; 
 + import android . content . Intent ; 
 + import android . os . Bundle ; 
 + import android . support . v4 . content . WakefulBroadcastReceiver ; 
 + 
 + import com . google . android . gms . gcm . GoogleCloudMessaging ; 
 + 
 + import im . actor . runtime . Log ; 
 + import im . actor . sdk . ActorSDK ; 
 + 
 + public class PushReceiver extends WakefulBroadcastReceiver { 
 + 
 + private static final String TAG = " PushReceiver " ; 
 + 
 + @ Override 
 + public void onReceive ( Context context , Intent intent ) { 
 + GoogleCloudMessaging gcm = GoogleCloudMessaging . getInstance ( context ) ; 
 + Bundle extras = intent . getExtras ( ) ; 
 + String messageType = gcm . getMessageType ( intent ) ; 
 + if ( ! extras . isEmpty ( ) ) { 
 + if ( GoogleCloudMessaging . MESSAGE _ TYPE _ MESSAGE . equals ( messageType ) ) { 
 + if ( extras . containsKey ( " seq " ) ) { 
 + int seq = Integer . parseInt ( extras . getString ( " seq " ) ) ; 
 + ActorSDK . sharedActor ( ) . getMessenger ( ) . onPushReceived ( seq ) ; 
 + setResultCode ( Activity . RESULT _ OK ) ; 
 + Log . d ( TAG , " Push received " ) ; 
 + } 
 + } 
 + } 
 + completeWakefulIntent ( intent ) ; 
 + } 
 + }
