BLEU SCORE: 0.42461633178803443

TEST MSG: fix ( server : auth ) : don ' t accept non - username - password transactions in ValidatePassword
GENERATED MSG: feat ( server : auth ) : don ' t change code on call request

TEST DIFF (one line): diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > index 0096cb2 . . 69f45ed 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > @ @ - 346 , 7 + 346 , 7 @ @ final class AuthServiceImpl ( val activationContext : CodeActivation ) ( < nl > ) : Future [ HandlerResult [ ResponseAuth ] ] = { < nl > val action = < nl > for { < nl > - transaction ← fromDBIOOption ( AuthErrors . PhoneCodeExpired ) ( AuthTransactionRepo . findChildren ( transactionHash ) ) < nl > + transaction ← fromDBIOOption ( AuthErrors . PhoneCodeExpired ) ( AuthUsernameTransactionRepo . find ( transactionHash ) ) < nl > ( userId , countryCode ) ← validateCode ( transaction , password ) < nl > userStruct ← authorizeT ( userId , countryCode , transaction , clientData ) < nl > } yield ResponseAuth ( userStruct , ApiConfig ( maxGroupSize ) )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > index 3033baa . . 3d0ed7d 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > @ @ - 172 , 6 + 172 , 7 @ @ class AuthServiceImpl ( val activationContext : CodeActivation , mediator : ActorRef ) < nl > override def jhandleSendCodeByPhoneCall ( transactionHash : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { < nl > val action = for { < nl > tx ← fromDBIOOption ( AuthErrors . InvalidAuthTransaction ) ( persist . auth . AuthPhoneTransaction . find ( transactionHash ) ) < nl > + code ← fromDBIO ( persist . AuthCode . findByTransactionHash ( tx . transactionHash ) map ( _ map ( _ . code ) getOrElse ( genSmsCode ( tx . phoneNumber ) ) ) ) < nl > _ ← fromDBIO ( sendCallCode ( tx . phoneNumber , genSmsCode ( tx . phoneNumber ) , Some ( transactionHash ) , PhoneNumberUtils . normalizeWithCountry ( tx . phoneNumber ) . headOption . map ( _ . _ 2 ) . getOrElse ( " en " ) ) ) < nl > } yield ResponseVoid

TEST DIFF:
diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 index 0096cb2 . . 69f45ed 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 @ @ - 346 , 7 + 346 , 7 @ @ final class AuthServiceImpl ( val activationContext : CodeActivation ) ( 
 ) : Future [ HandlerResult [ ResponseAuth ] ] = { 
 val action = 
 for { 
 - transaction ← fromDBIOOption ( AuthErrors . PhoneCodeExpired ) ( AuthTransactionRepo . findChildren ( transactionHash ) ) 
 + transaction ← fromDBIOOption ( AuthErrors . PhoneCodeExpired ) ( AuthUsernameTransactionRepo . find ( transactionHash ) ) 
 ( userId , countryCode ) ← validateCode ( transaction , password ) 
 userStruct ← authorizeT ( userId , countryCode , transaction , clientData ) 
 } yield ResponseAuth ( userStruct , ApiConfig ( maxGroupSize ) )

NEAREST DIFF:
diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 index 3033baa . . 3d0ed7d 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 @ @ - 172 , 6 + 172 , 7 @ @ class AuthServiceImpl ( val activationContext : CodeActivation , mediator : ActorRef ) 
 override def jhandleSendCodeByPhoneCall ( transactionHash : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { 
 val action = for { 
 tx ← fromDBIOOption ( AuthErrors . InvalidAuthTransaction ) ( persist . auth . AuthPhoneTransaction . find ( transactionHash ) ) 
 + code ← fromDBIO ( persist . AuthCode . findByTransactionHash ( tx . transactionHash ) map ( _ map ( _ . code ) getOrElse ( genSmsCode ( tx . phoneNumber ) ) ) ) 
 _ ← fromDBIO ( sendCallCode ( tx . phoneNumber , genSmsCode ( tx . phoneNumber ) , Some ( transactionHash ) , PhoneNumberUtils . normalizeWithCountry ( tx . phoneNumber ) . headOption . map ( _ . _ 2 ) . getOrElse ( " en " ) ) ) 
 } yield ResponseVoid
