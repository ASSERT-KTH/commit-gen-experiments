BLEU SCORE: 0.19635075643117936

TEST MSG: feat ( server : core ) : add bot commands to user
GENERATED MSG: feat ( server : bots ) : UpdateAvatar method ; support of all message types

TEST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala < nl > index 774fb91 . . cd5437e 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala < nl > @ @ - 37 , 7 + 37 , 7 @ @ final class ActorBot extends InternalBot ( ActorBot . UserId , ActorBot . Username , Act < nl > log . warning ( " Creating new bot " ) < nl > < nl > requestCreateBot ( nickname , name ) onComplete { < nl > - case Success ( token ) ⇒ requestSendMessage ( m . peer , nextRandomId ( ) , TextMessage ( s " Yay ! Bot created , here is your token : $ { token } " , None ) ) < nl > + case Success ( token ) ⇒ requestSendMessage ( m . peer , nextRandomId ( ) , TextMessage ( s " Yay ! Bot created , bot token : $ { token . token } , bot id : $ { token . userId } " , None ) ) < nl > case Failure ( BotError ( _ , " USERNAME _ TAKEN " , _ , _ ) ) ⇒ < nl > requestSendMessage ( m . peer , nextRandomId ( ) , TextMessage ( " Username already taken " , None ) ) < nl > case Failure ( e ) ⇒ < nl > diff - - git a / actor - server / actor - core / src / main / protobuf / bots . proto b / actor - server / actor - core / src / main / protobuf / bots . proto < nl > new file mode 100644 < nl > index 0000000 . . f16d769 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / protobuf / bots . proto < nl > @ @ - 0 , 0 + 1 , 11 @ @ < nl > + syntax = " proto2 " ; < nl > + < nl > + package im . actor . server ; < nl > + < nl > + import " scalapb / scalapb . proto " ; < nl > + < nl > + message BotCommand { < nl > + required string slash _ command = 1 ; < nl > + required string description = 2 ; < nl > + optional string loc _ key = 3 ; < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / protobuf / user . proto b / actor - server / actor - core / src / main / protobuf / user . proto < nl > index d4b060f . . fd139ff 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / user . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / user . proto < nl > @ @ - 11 , 6 + 11 , 7 @ @ import " scalapb / scalapb . proto " ; < nl > < nl > import " sequence . proto " ; < nl > import " file . proto " ; < nl > + import " bots . proto " ; < nl > < nl > message UserState { < nl > option ( scalapb . message ) . extends = " im . actor . server . office . ProcessorState " ; < nl > @ @ - 35 , 6 + 36 , 7 @ @ message UserState { < nl > repeated SocialContact social _ contacts = 18 ; < nl > repeated string preferred _ languages = 19 ; < nl > optional string time _ zone = 20 ; < nl > + repeated BotCommand bot _ commands = 21 ; < nl > } < nl > < nl > message SocialContact { < nl > @ @ - 214 , 6 + 216 , 23 @ @ message UserCommands { < nl > required int32 user _ id = 1 ; < nl > } < nl > < nl > + message AddBotCommand { < nl > + option ( scalapb . message ) . extends = " im . actor . server . user . UserCommand " ; < nl > + < nl > + required int32 user _ id = 1 ; < nl > + required BotCommand command = 2 ; < nl > + } < nl > + < nl > + message AddBotCommandAck { } < nl > + < nl > + message RemoveBotCommand { < nl > + option ( scalapb . message ) . extends = " im . actor . server . user . UserCommand " ; < nl > + < nl > + required int32 user _ id = 1 ; < nl > + required string slash _ command = 2 ; < nl > + } < nl > + < nl > + message RemoveBotCommandAck { } < nl > } < nl > < nl > message UserQueries { < nl > @ @ - 439 , 4 + 458 , 19 @ @ message UserEvents { < nl > < nl > required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; < nl > } < nl > + < nl > + message BotCommandAdded { < nl > + option ( scalapb . message ) . extends = " im . actor . server . user . UserEvent " ; < nl > + < nl > + required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; < nl > + required BotCommand command = 2 ; < nl > + } < nl > + < nl > + message BotCommandRemoved { < nl > + option ( scalapb . message ) . extends = " im . actor . server . user . UserEvent " ; < nl > + < nl > + required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; < nl > + required string slash _ command = 2 ; < nl > + } < nl > + < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / ApiConversions . scala b / actor - server / actor - core / src / main / scala / im / actor / server / ApiConversions . scala < nl > index 474facb . . a36620c 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / ApiConversions . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / ApiConversions . scala < nl > @ @ - 2 , 6 + 2 , 8 @ @ package im . actor . server < nl > < nl > import im . actor . api . rpc . files . { ApiAvatar , ApiAvatarImage , ApiFileLocation } < nl > import im . actor . api . rpc . messaging . ApiMessageReaction < nl > + import im . actor . api . rpc . users . ApiBotCommand < nl > + import im . actor . server . bots . BotCommand < nl > import im . actor . server . model . MessageReaction < nl > import im . actor . server . file . { Avatar , AvatarImage , FileLocation } < nl > < nl > @ @ - 39 , 6 + 41 , 16 @ @ object ApiConversions { < nl > implicit def avatarOptToApi ( avatarOpt : Option [ Avatar ] ) : Option [ ApiAvatar ] = < nl > avatarOpt map avatarToApi < nl > < nl > + implicit def botCommandsToApi ( commands : Seq [ BotCommand ] ) : IndexedSeq [ ApiBotCommand ] = < nl > + ( commands map botCommandToApi ) . toVector < nl > + < nl > + implicit def botCommandToApi ( command : BotCommand ) : ApiBotCommand = < nl > + ApiBotCommand ( < nl > + command . slashCommand , < nl > + command . description , < nl > + command . locKey < nl > + ) < nl > + < nl > implicit def reactionToApi ( reaction : MessageReaction ) : ApiMessageReaction = < nl > ApiMessageReaction ( < nl > reaction . userIds . toVector , < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > index 343fa13 . . b1d6392 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > @ @ - 6 , 7 + 6 , 7 @ @ import java . util . TimeZone < nl > import akka . actor . { ActorSystem , Status } < nl > import akka . http . scaladsl . util . FastFuture < nl > import akka . pattern . pipe < nl > - import im . actor . api . rpc . contacts . { UpdateContactsRemoved , UpdateContactRegistered , UpdateContactsAdded } < nl > + import im . actor . api . rpc . contacts . { UpdateContactRegistered , UpdateContactsAdded , UpdateContactsRemoved } < nl > import im . actor . api . rpc . messaging . _ < nl > import im . actor . api . rpc . misc . ApiExtension < nl > import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } < nl > @ @ - 15 , 6 + 15 , 7 @ @ import im . actor . concurrent . FutureExt < nl > import im . actor . config . ActorConfig < nl > import im . actor . server . ApiConversions . _ < nl > import im . actor . server . acl . ACLUtils < nl > + import im . actor . server . bots . BotCommand < nl > import im . actor . server . file . { Avatar , ImageUtils } < nl > import im . actor . server . model . { AvatarData , Sex , User } < nl > import im . actor . server . model . contact . { UserContact , UserEmailContact , UserPhoneContact } < nl > @ @ - 24 , 6 + 25 , 7 @ @ import im . actor . server . persist . _ < nl > import im . actor . server . sequence . { PushRules , SequenceErrors } < nl > import im . actor . server . social . SocialManager . _ < nl > import im . actor . server . user . UserCommands . _ < nl > + import im . actor . server . user . UserErrors . { BotCommandAlreadyExists , InvalidBotCommand } < nl > import im . actor . util . misc . StringUtils < nl > import im . actor . util . ThreadLocalSecureRandom < nl > import org . joda . time . DateTime < nl > @ @ - 51 , 6 + 53 , 12 @ @ object UserErrors { < nl > < nl > case object EmptyLocalesList extends UserError ( " Empty locale list " ) < nl > < nl > + final case class InvalidBotCommand ( slashCommand : String ) < nl > + extends UserError ( s " Invalid slash command : $ slashCommand " ) < nl > + < nl > + final case class BotCommandAlreadyExists ( slashCommand : String ) < nl > + extends UserError ( s " Bot command already exists : $ slashCommand " ) < nl > + < nl > final case object ContactNotFound extends UserError ( " Contact not found " ) < nl > < nl > } < nl > @ @ - 285 , 6 + 293 , 42 @ @ private [ user ] trait UserCommandHandlers { < nl > } < nl > } < nl > < nl > + protected def addBotCommand ( user : UserState , rawCommand : BotCommand ) : Unit = { < nl > + val command = rawCommand . copy ( slashCommand = rawCommand . slashCommand . trim ) < nl > + def isValid ( command : BotCommand ) = { < nl > + val slashCommand = command . slashCommand < nl > + slashCommand . nonEmpty & & slashCommand . matches ( " [ A - Za - z ] * " ) & & slashCommand . length < 32 < nl > + } < nl > + if ( user . botCommands . exists ( _ . slashCommand = = command . slashCommand ) ) { < nl > + sender ( ) ! Status . Failure ( BotCommandAlreadyExists ( command . slashCommand ) ) < nl > + } else { < nl > + if ( isValid ( command ) ) { < nl > + persistReply ( UserEvents . BotCommandAdded ( now ( ) , command ) , user ) { _ ⇒ < nl > + val update = UpdateUserBotCommandsChanged ( user . id , user . botCommands : + command ) < nl > + for { < nl > + relatedUserIds ← getRelations ( user . id ) < nl > + _ ← seqUpdatesExt . broadcastOwnSingleUpdate ( user . id , relatedUserIds , update ) < nl > + } yield AddBotCommandAck ( ) < nl > + } < nl > + } else { < nl > + sender ( ) ! Status . Failure ( InvalidBotCommand ( command . slashCommand ) ) < nl > + } < nl > + } < nl > + } < nl > + < nl > + protected def removeBotCommand ( user : UserState , slashCommand : String ) = < nl > + if ( user . botCommands . exists ( _ . slashCommand = = slashCommand ) ) { < nl > + persistReply ( UserEvents . BotCommandRemoved ( now ( ) , slashCommand ) , user ) { _ ⇒ < nl > + val update = UpdateUserBotCommandsChanged ( user . id , user . botCommands . filterNot ( _ . slashCommand = = slashCommand ) ) < nl > + for { < nl > + relatedUserIds ← getRelations ( user . id ) < nl > + _ ← seqUpdatesExt . broadcastOwnSingleUpdate ( user . id , relatedUserIds , update ) < nl > + } yield RemoveBotCommandAck ( ) < nl > + } < nl > + } else { < nl > + sender ( ) ! RemoveBotCommandAck ( ) < nl > + } < nl > + < nl > protected def updateAvatar ( user : UserState , avatarOpt : Option [ Avatar ] ) : Unit = { < nl > persistReply ( UserEvents . AvatarUpdated ( now ( ) , avatarOpt ) , user ) { evt ⇒ < nl > val avatarData = avatarOpt map ( getAvatarData ( AvatarData . OfUser , user . id , _ ) ) getOrElse AvatarData . empty ( AvatarData . OfUser , user . id . toLong ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > index 1190217 . . 8b2ff36 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > @ @ - 2 , 20 + 2 , 21 @ @ package im . actor . server . user < nl > < nl > import akka . actor . { ActorRef , ActorSystem } < nl > import akka . cluster . pubsub . DistributedPubSub < nl > - import akka . event . { LoggingAdapter , Logging } < nl > + import akka . event . { Logging , LoggingAdapter } < nl > import akka . pattern . ask < nl > import akka . util . Timeout < nl > import com . google . protobuf . ByteString < nl > import im . actor . api . rpc . misc . ApiExtension < nl > import im . actor . api . rpc . { AuthorizedClientData , Update } < nl > - import im . actor . api . rpc . users . { ApiUser , ApiSex } < nl > + import im . actor . api . rpc . users . { ApiSex , ApiUser } < nl > import im . actor . server . auth . DeviceInfo < nl > + import im . actor . server . bots . BotCommand < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . file . Avatar < nl > - import im . actor . server . model . { SerializedUpdate , UpdateMapping , Peer } < nl > + import im . actor . server . model . { Peer , SerializedUpdate , UpdateMapping } < nl > import im . actor . server . persist . UserRepo < nl > import im . actor . server . pubsub . PubSubExtension < nl > - import im . actor . server . sequence . { PushData , PushRules , SeqUpdatesExtension , SeqState } < nl > + import im . actor . server . sequence . { PushData , PushRules , SeqState , SeqUpdatesExtension } < nl > import im . actor . server . { model , persist ⇒ p } < nl > import im . actor . types . _ < nl > import im . actor . util . misc . IdUtils < nl > @ @ - 121 , 6 + 122 , 12 @ @ private [ user ] sealed trait Commands extends AuthCommands { < nl > def notifyDialogsChanged ( userId : Int ) : Future [ SeqState ] = < nl > ( processorRegion . ref ? NotifyDialogsChanged ( userId ) ) . mapTo [ SeqState ] < nl > < nl > + def addBotCommand ( userId : Int , command : BotCommand ) : Future [ AddBotCommandAck ] = < nl > + ( processorRegion . ref ? AddBotCommand ( userId , command ) ) . mapTo [ AddBotCommandAck ] < nl > + < nl > + def removeBotCommand ( userId : Int , slashCommand : String ) : Future [ RemoveBotCommandAck ] = < nl > + ( processorRegion . ref ? RemoveBotCommand ( userId , slashCommand ) ) . mapTo [ RemoveBotCommandAck ] < nl > + < nl > def broadcastUserUpdate ( < nl > userId : Int , < nl > update : Update , < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > index 837a786 . . 2842106 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > @ @ - 9 , 6 + 9 , 7 @ @ import akka . util . Timeout < nl > import im . actor . api . rpc . misc . ApiExtension < nl > import im . actor . serialization . ActorSerializer < nl > import im . actor . server . acl . ACLUtils < nl > + import im . actor . server . bots . BotCommand < nl > import im . actor . server . cqrs . TaggedEvent < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . dialog . { DialogCommand , DialogExtension } < nl > @ @ - 57 , 7 + 58 , 8 @ @ private [ user ] object UserBuilder { < nl > isAdmin = e . isAdmin , < nl > socialContacts = Seq . empty [ SocialContact ] , < nl > preferredLanguages = Seq . empty [ String ] , < nl > - timeZone = None < nl > + timeZone = None , < nl > + botCommands = Seq . empty [ BotCommand ] < nl > ) < nl > } < nl > < nl > @ @ - 93 , 6 + 95 , 8 @ @ object UserProcessor { < nl > 10036 → classOf [ UserCommands . ChangeTimeZone ] , < nl > 10037 → classOf [ UserCommands . EditLocalName ] , < nl > 10038 → classOf [ UserCommands . RemoveContact ] , < nl > + 10039 → classOf [ UserCommands . AddBotCommand ] , < nl > + 10040 → classOf [ UserCommands . RemoveBotCommand ] , < nl > < nl > 11001 → classOf [ UserQueries . GetAuthIds ] , < nl > 11002 → classOf [ UserQueries . GetAuthIdsResponse ] , < nl > @ @ - 128 , 6 + 132 , 8 @ @ object UserProcessor { < nl > 12017 → classOf [ UserEvents . PreferredLanguagesChanged ] , < nl > 12018 → classOf [ UserEvents . TimeZoneChanged ] , < nl > 12019 → classOf [ UserEvents . LocalNameChanged ] , < nl > + 12020 → classOf [ UserEvents . BotCommandAdded ] , < nl > + 12021 → classOf [ UserEvents . BotCommandRemoved ] , < nl > < nl > 13000 → classOf [ UserState ] , < nl > 13001 → classOf [ SocialContact ] < nl > @ @ - 199 , 6 + 205 , 15 @ @ private [ user ] final class UserProcessor < nl > state . copy ( preferredLanguages = preferredLanguages ) < nl > case _ : UserEvents . Created ⇒ state < nl > case _ : UserEvents . DialogsChanged ⇒ state < nl > + case UserEvents . BotCommandAdded ( _ , command ) ⇒ < nl > + val updCommands = if ( state . botCommands exists ( _ . slashCommand = = command . slashCommand ) ) state . botCommands else state . botCommands : + command < nl > + state . copy ( botCommands = updCommands ) < nl > + case UserEvents . BotCommandRemoved ( _ , slashCommand ) ⇒ < nl > + val updCommands = < nl > + if ( state . botCommands exists ( _ . slashCommand = = slashCommand ) ) < nl > + state . botCommands filterNot ( _ . slashCommand = = slashCommand ) < nl > + else state . botCommands < nl > + state . copy ( botCommands = updCommands ) < nl > } < nl > } < nl > < nl > @ @ - 225 , 6 + 240 , 8 @ @ private [ user ] final class UserProcessor < nl > case NotifyDialogsChanged ( _ ) ⇒ notifyDialogsChanged ( state ) < nl > case ChangeTimeZone ( _ , timeZone ) ⇒ changeTimeZone ( state , timeZone ) < nl > case ChangePreferredLanguages ( _ , langs ) ⇒ changePreferredLanguages ( state , langs ) < nl > + case AddBotCommand ( _ , command ) ⇒ addBotCommand ( state , command ) < nl > + case RemoveBotCommand ( _ , slashCommand ) ⇒ removeBotCommand ( state , slashCommand ) < nl > case cmd : EditLocalName ⇒ contacts . ref forward cmd < nl > case query : GetLocalName ⇒ contacts . ref forward query < nl > case StopOffice ⇒ context stop self < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala < nl > index 5cbdba7 . . 9c577af 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala < nl > @ @ - 35 , 7 + 35 , 7 @ @ private [ user ] trait UserQueriesHandlers { < nl > external = state . external , < nl > preferredLanguages = state . preferredLanguages . toVector , < nl > timeZone = state . timeZone , < nl > - botCommands = Vector . empty < nl > + botCommands = state . botCommands < nl > ) ) ) pipeTo sender ( ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileUrlBuilderHttpHandler . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileUrlBuilderHttpHandler . scala < nl > index 1b1bf95 . . 6aca586 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileUrlBuilderHttpHandler . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileUrlBuilderHttpHandler . scala < nl > @ @ - 58 , 9 + 58 , 9 @ @ private [ file ] final class FileUrlBuilderHttpHandler ( fsAdapter : FileStorageAdapte < nl > / / format : OFF < nl > def routes : Route = < nl > extractRequest { request = > < nl > - log . debug ( " Got file url builder request : { } " , request ) < nl > defaultVersion { < nl > pathPrefix ( " files " / SignedLongNumber ) { fileId = > < nl > + log . debug ( " Got file url builder request : { } " , request ) < nl > get { < nl > validateBuilderRequest ( fileId ) { case ( fileModel , accessHash ) = > < nl > onSuccess ( fsAdapter . getFileDownloadUrl ( fileModel , accessHash ) ) { < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / user / BotCommandsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / user / BotCommandsSpec . scala < nl > new file mode 100644 < nl > index 0000000 . . 7b8971f < nl > - - - / dev / null < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / user / BotCommandsSpec . scala < nl > @ @ - 0 , 0 + 1 , 78 @ @ < nl > + package im . actor . server . user < nl > + < nl > + import im . actor . server . bots . BotCommand < nl > + import im . actor . server . { BaseAppSuite , ImplicitAuthService , ImplicitSessionRegion } < nl > + < nl > + class BotCommandsSpec extends BaseAppSuite with ImplicitAuthService with ImplicitSessionRegion { < nl > + < nl > + behavior of " User ' s bot commands " < nl > + < nl > + it should " not add wrong commands " in dontAddWrong ( ) < nl > + < nl > + it should " add and remove " in addAndRemove ( ) < nl > + < nl > + val userExt = UserExtension ( system ) < nl > + < nl > + def dontAddWrong ( ) = { < nl > + val ( botUser , _ , _ , _ ) = createUser ( ) < nl > + < nl > + whenReady ( addCommand ( botUser . id , BotCommand ( " / wrong " , " " , None ) ) . failed ) { < nl > + case UserErrors . InvalidBotCommand ( " / wrong " ) ⇒ < nl > + } < nl > + whenReady ( addCommand ( botUser . id , BotCommand ( " wrong command " , " " , None ) ) . failed ) { < nl > + case UserErrors . InvalidBotCommand ( " wrong command " ) ⇒ < nl > + } < nl > + whenReady ( addCommand ( botUser . id , BotCommand ( " " , " " , None ) ) . failed ) { < nl > + case UserErrors . InvalidBotCommand ( " " ) ⇒ < nl > + } < nl > + whenReady ( addCommand ( botUser . id , BotCommand ( " " , " " , None ) ) . failed ) { < nl > + case UserErrors . InvalidBotCommand ( " " ) ⇒ < nl > + } < nl > + < nl > + whenReady ( userExt . getApiStruct ( botUser . id , 0 , 0L ) ) { resp ⇒ < nl > + resp . botCommands shouldBe empty < nl > + } < nl > + } < nl > + < nl > + def addAndRemove ( ) = { < nl > + val ( botUser , _ , _ , _ ) = createUser ( ) < nl > + < nl > + val fireCommand = BotCommand ( " fire " , " Fire at your enemy with something dangerous " , None ) < nl > + val runCommand = BotCommand ( " run " , " Run away as fast as you can " , Some ( " run " ) ) < nl > + < nl > + whenReady ( addCommand ( botUser . id , fireCommand ) ) ( identity ) < nl > + < nl > + whenReady ( addCommand ( botUser . id , BotCommand ( " fire " , " Fire agian " , None ) ) . failed ) { < nl > + case UserErrors . BotCommandAlreadyExists ( " fire " ) ⇒ < nl > + } < nl > + < nl > + whenReady ( addCommand ( botUser . id , runCommand ) ) ( identity ) < nl > + < nl > + whenReady ( userExt . getApiStruct ( botUser . id , 0 , 0L ) ) { resp ⇒ < nl > + resp . botCommands should have size 2 < nl > + val fire = resp . botCommands ( 0 ) < nl > + fire . slashCommand shouldEqual fireCommand . slashCommand < nl > + fire . description shouldEqual fireCommand . description < nl > + fire . locKey shouldEqual None < nl > + < nl > + val run = resp . botCommands ( 1 ) < nl > + run . slashCommand shouldEqual runCommand . slashCommand < nl > + run . description shouldEqual runCommand . description < nl > + run . locKey shouldEqual runCommand . locKey < nl > + } < nl > + < nl > + / / respond with success when trying to remove same command multiple times < nl > + whenReady ( userExt . removeBotCommand ( botUser . id , fireCommand . slashCommand ) ) ( identity ) < nl > + whenReady ( userExt . removeBotCommand ( botUser . id , fireCommand . slashCommand ) ) ( identity ) < nl > + < nl > + whenReady ( userExt . getApiStruct ( botUser . id , 0 , 0L ) ) { resp ⇒ < nl > + resp . botCommands should have size 1 < nl > + val run = resp . botCommands . head < nl > + run . slashCommand shouldEqual runCommand . slashCommand < nl > + } < nl > + } < nl > + < nl > + private def addCommand ( userId : Int , commmand : BotCommand ) = < nl > + userExt . addBotCommand ( userId , commmand ) < nl > + < nl > + }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / EchoBot . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / EchoBot . scala < nl > index ff7e64e . . 7a67d19 100644 < nl > - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / EchoBot . scala < nl > + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / EchoBot . scala < nl > @ @ - 32 , 7 + 32 , 7 @ @ final class EchoBot ( token : String , endpoint : String ) extends RemoteBot ( token , en < nl > val name = getUser ( m . sender . id ) . name < nl > < nl > requestSendMessage ( m . sender . asOutPeer , nextRandomId ( ) , TextMessage ( s " Hey $ name , here is your reply : $ text " ) ) < nl > - case _ ⇒ < nl > + case notAText ⇒ requestSendMessage ( m . sender . asOutPeer , nextRandomId ( ) , notAText ) < nl > } < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > index bf376c9 . . a0ec4a5 100644 < nl > - - - a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > + + + b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > @ @ - 17 , 6 + 17 , 7 @ @ object BotMessages { < nl > val Messaging = " messaging " < nl > val Bots = " bots " < nl > val WebHooks = " webhooks " < nl > + val Users = " users " < nl > } < nl > < nl > final case class FileLocation ( < nl > @ @ - 32 , 9 + 33 , 9 @ @ object BotMessages { < nl > ) < nl > < nl > final case class Avatar ( < nl > - smallImage : Option [ AvatarImage ] , < nl > - largeImage : Option [ AvatarImage ] , < nl > - fullImage : Option [ AvatarImage ] < nl > + small : Option [ AvatarImage ] , < nl > + large : Option [ AvatarImage ] , < nl > + full : Option [ AvatarImage ] < nl > ) < nl > < nl > final case class User ( < nl > @ @ - 281 , 6 + 282 , 14 @ @ object BotMessages { < nl > @ key ( " GetHooks " ) < nl > final case object GetHooks extends GetHooks < nl > < nl > + @ key ( " UpdateAvatar " ) < nl > + final case class UpdateAvatar ( userId : Int , avatar : Avatar ) extends RequestBody { < nl > + override type Response = Void < nl > + override val service = Services . Users < nl > + < nl > + override def readResponse ( obj : Js . Obj ) = readJs [ Response ] ( obj ) < nl > + } < nl > + < nl > final case class MessageSent ( date : Long ) extends ResponseBody < nl > < nl > @ key ( " Message " ) < nl > @ @ - 294 , 9 + 303 , 55 @ @ object BotMessages { < nl > < nl > sealed trait MessageBody < nl > < nl > - @ key ( " TextMessage " ) < nl > + @ key ( " Text " ) < nl > final case class TextMessage ( text : String ) extends MessageBody < nl > < nl > - @ key ( " JsonMessage " ) < nl > + @ key ( " Json " ) < nl > final case class JsonMessage ( rawJson : String ) extends MessageBody < nl > + < nl > + @ key ( " Document " ) < nl > + final case class DocumentMessage ( < nl > + fileId : Long , < nl > + accessHash : Long , < nl > + fileSize : Long , < nl > + name : String , < nl > + mimeType : String , < nl > + thumb : Option [ FastThumb ] , < nl > + ext : Option [ DocumentEx ] < nl > + ) extends MessageBody < nl > + < nl > + @ key ( " Service " ) < nl > + final case class ServiceMessage ( text : String ) extends MessageBody < nl > + < nl > + @ key ( " Unsupported " ) < nl > + sealed trait UnsupportedMessage extends MessageBody < nl > + < nl > + @ key ( " Unsupported " ) < nl > + final case object UnsupportedMessage extends UnsupportedMessage < nl > + < nl > + @ key ( " FastThumb " ) < nl > + final case class FastThumb ( < nl > + width : Int , < nl > + height : Int , < nl > + thumb : String < nl > + ) < nl > + < nl > + sealed trait DocumentEx < nl > + < nl > + @ key ( " Photo " ) < nl > + final case class DocumentExPhoto ( < nl > + width : Int , < nl > + height : Int < nl > + ) extends DocumentEx < nl > + < nl > + @ key ( " Video " ) < nl > + final case class DocumentExVideo ( < nl > + width : Int , < nl > + height : Int , < nl > + duration : Int < nl > + ) extends DocumentEx < nl > + < nl > + @ key ( " Voice " ) < nl > + final case class DocumentExVoice ( duration : Int ) extends DocumentEx < nl > + < nl > } < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala < nl > new file mode 100644 < nl > index 0000000 . . 743009e < nl > - - - / dev / null < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala < nl > @ @ - 0 , 0 + 1 , 45 @ @ < nl > + package im . actor . server . bot < nl > + < nl > + import im . actor . api . rpc . files . ApiFastThumb < nl > + import im . actor . api . rpc . messaging . _ < nl > + import scodec . bits . BitVector < nl > + < nl > + import scala . language . implicitConversions < nl > + < nl > + trait ApiToBotConversions { < nl > + < nl > + import im . actor . bots . BotMessages . _ < nl > + < nl > + implicit def toFastThumb ( ft : ApiFastThumb ) : FastThumb = < nl > + FastThumb ( ft . w , ft . h , BitVector ( ft . thumb ) . toBase64 ) < nl > + < nl > + implicit def toFastThumb ( ft : Option [ ApiFastThumb ] ) : Option [ FastThumb ] = < nl > + ft map toFastThumb < nl > + < nl > + implicit def toDocumentEx ( ex : ApiDocumentEx ) : DocumentEx = < nl > + ex match { < nl > + case ApiDocumentExPhoto ( w , h ) ⇒ DocumentExPhoto ( w , h ) < nl > + case ApiDocumentExVideo ( w , h , duration ) ⇒ DocumentExVideo ( w , h , duration ) < nl > + case ApiDocumentExVoice ( duration ) ⇒ DocumentExVoice ( duration ) < nl > + } < nl > + < nl > + implicit def toDocumentEx ( ex : Option [ ApiDocumentEx ] ) : Option [ DocumentEx ] = < nl > + ex map toDocumentEx < nl > + < nl > + implicit def toMessage ( message : ApiMessage ) : MessageBody = < nl > + message match { < nl > + case ApiTextMessage ( text , _ , _ ) ⇒ TextMessage ( text ) < nl > + case ApiJsonMessage ( rawJson ) ⇒ JsonMessage ( rawJson ) < nl > + case ApiDocumentMessage ( < nl > + fileId , < nl > + accessHash , < nl > + fileSize , < nl > + name , < nl > + mimeType , < nl > + thumb , < nl > + ext ) ⇒ DocumentMessage ( fileId , accessHash , fileSize . toLong , name , mimeType , thumb , ext ) < nl > + case ApiServiceMessage ( text , _ ) ⇒ ServiceMessage ( text ) < nl > + case _ : ApiUnsupportedMessage ⇒ UnsupportedMessage < nl > + } < nl > + < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServiceBase . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServiceBase . scala < nl > index f2bd1bb . . 0d28a11 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServiceBase . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServiceBase . scala < nl > @ @ - 1 , 6 + 1 , 8 @ @ < nl > package im . actor . server . bot < nl > < nl > + import akka . actor . ActorSystem < nl > import im . actor . bots . BotMessages < nl > + import im . actor . server . user . UserExtension < nl > import upickle . Js < nl > import upickle . default . _ < nl > < nl > @ @ - 8 , 7 + 10 , 7 @ @ import scala . concurrent . { ExecutionContext , Future } < nl > < nl > object BotServiceTypes extends BotServiceTypes < nl > < nl > - trait BotServiceTypes { < nl > + trait BotServiceTypes extends BotToInternalConversions { < nl > import BotMessages . _ < nl > < nl > type BotUserId = Int < nl > @ @ - 36 , 12 + 38 , 22 @ @ trait BotServiceTypes { < nl > case class WeakRequestHandler ( handle : ( BotUserId , BotAuthId ) ⇒ Future [ BotResponseBody ] ) < nl > } < nl > < nl > - / / object BotServiceBase extends Types < nl > - < nl > - trait BotServiceBase extends BotServiceTypes { < nl > + abstract class BotServiceBase ( system : ActorSystem ) extends BotServiceTypes { < nl > import BotMessages . _ < nl > + import system . dispatcher < nl > < nl > type Handlers = PartialFunction [ RequestBody , WeakRequestHandler ] < nl > < nl > def handlers : Handlers < nl > + < nl > + val userExt = UserExtension ( system ) < nl > + < nl > + protected def ifIsAdmin [ R < : ResponseBody ] ( userId : BotUserId ) ( f : Future [ RequestResult [ R ] ] ) : Future [ RequestResult [ R ] ] = { < nl > + userExt . isAdmin ( userId ) flatMap { isAdmin ⇒ < nl > + if ( isAdmin ) < nl > + f < nl > + else < nl > + Future . successful ( Left ( BotError ( 403 , " FORBIDDEN " ) ) ) < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala < nl > new file mode 100644 < nl > index 0000000 . . ef3b478 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala < nl > @ @ - 0 , 0 + 1 , 41 @ @ < nl > + package im . actor . server . bot < nl > + < nl > + import im . actor . api . rpc . files . ApiFastThumb < nl > + import im . actor . api . rpc . messaging . _ < nl > + import scodec . bits . BitVector < nl > + < nl > + import scala . language . implicitConversions < nl > + < nl > + trait BotToApiConversions { < nl > + import im . actor . bots . BotMessages . _ < nl > + < nl > + implicit def toThumb ( ft : FastThumb ) : ApiFastThumb = < nl > + ApiFastThumb ( ft . width , ft . height , BitVector . fromValidBase64 ( ft . thumb ) . toByteArray ) < nl > + < nl > + implicit def toThumb ( ft : Option [ FastThumb ] ) : Option [ ApiFastThumb ] = ft map toThumb < nl > + < nl > + implicit def toDocumentExt ( ex : DocumentEx ) : ApiDocumentEx = < nl > + ex match { < nl > + case DocumentExPhoto ( width , height ) ⇒ ApiDocumentExPhoto ( width , height ) < nl > + case DocumentExVideo ( width , height , duration ) ⇒ ApiDocumentExVideo ( width , height , duration ) < nl > + case DocumentExVoice ( duration ) ⇒ ApiDocumentExVoice ( duration ) < nl > + } < nl > + < nl > + implicit def toDocumentExt ( ex : Option [ DocumentEx ] ) : Option [ ApiDocumentEx ] = ex map toDocumentExt < nl > + < nl > + implicit def toMessage ( message : MessageBody ) : ApiMessage = < nl > + message match { < nl > + case TextMessage ( text ) ⇒ ApiTextMessage ( text , Vector . empty , None ) < nl > + case JsonMessage ( rawJson ) ⇒ ApiJsonMessage ( rawJson ) < nl > + case DocumentMessage ( < nl > + fileId , < nl > + accessHash , < nl > + fileSize , < nl > + name , < nl > + mimeType , < nl > + thumb , < nl > + ext ) ⇒ ApiDocumentMessage ( fileId , accessHash , fileSize . toInt , name , mimeType , thumb , ext ) < nl > + case ServiceMessage ( _ ) ⇒ throw new RuntimeException ( " Service messages are not supported " ) < nl > + case UnsupportedMessage ⇒ ApiUnsupportedMessage < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToInternalConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToInternalConversions . scala < nl > new file mode 100644 < nl > index 0000000 . . ed8dda6 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToInternalConversions . scala < nl > @ @ - 0 , 0 + 1 , 20 @ @ < nl > + package im . actor . server . bot < nl > + < nl > + import im . actor . bots . BotMessages < nl > + import im . actor . server . file . { FileLocation , AvatarImage , Avatar } < nl > + < nl > + import scala . language . implicitConversions < nl > + < nl > + trait BotToInternalConversions { < nl > + implicit def toFileLocation ( fl : BotMessages . FileLocation ) : FileLocation = < nl > + FileLocation ( fl . fileId , fl . accessHash ) < nl > + < nl > + implicit def toAvatarImage ( image : BotMessages . AvatarImage ) : AvatarImage = < nl > + AvatarImage ( image . fileLocation , image . width , image . height , image . fileSize . toLong ) < nl > + < nl > + implicit def toAvatarImageOpt ( imageOpt : Option [ BotMessages . AvatarImage ] ) : Option [ AvatarImage ] = < nl > + imageOpt map toAvatarImage < nl > + < nl > + implicit def toAvatar ( avatar : BotMessages . Avatar ) : Avatar = < nl > + Avatar ( avatar . small , avatar . large , avatar . full ) < nl > + } < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotUpdateBuilder . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotUpdateBuilder . scala < nl > index e4c7296 . . f20e651 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotUpdateBuilder . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotUpdateBuilder . scala < nl > @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . ActorSystem < nl > import im . actor . api . rpc . Update < nl > import im . actor . api . rpc . files . { ApiFileLocation , ApiAvatarImage , ApiAvatar } < nl > import im . actor . api . rpc . groups . { ApiMember , ApiGroup } < nl > - import im . actor . api . rpc . messaging . { ApiJsonMessage , UpdateMessage , ApiTextMessage } < nl > + import im . actor . api . rpc . messaging . { ApiDocumentMessage , ApiJsonMessage , UpdateMessage , ApiTextMessage } < nl > import im . actor . api . rpc . users . ApiUser < nl > import im . actor . bots . BotMessages . _ < nl > import im . actor . server . acl . ACLUtils < nl > @ @ - 15 , 7 + 15 , 7 @ @ import im . actor . server . user . UserExtension < nl > import scala . concurrent . Future < nl > import scala . language . postfixOps < nl > < nl > - final class BotUpdateBuilder ( botUserId : Int , botAuthId : Long , system : ActorSystem ) { < nl > + final class BotUpdateBuilder ( botUserId : Int , botAuthId : Long , system : ActorSystem ) extends ApiToBotConversions { < nl > import system . dispatcher < nl > < nl > implicit val _ system = system < nl > @ @ - 24 , 27 + 24 , 20 @ @ final class BotUpdateBuilder ( botUserId : Int , botAuthId : Long , system : ActorSyste < nl > def apply ( seq : Int , upd : Update ) : Future [ Option [ BotFatSeqUpdate ] ] = { < nl > val updateOptFuture = upd match { < nl > case update : UpdateMessage ⇒ < nl > - ( update . message match { < nl > - case ApiTextMessage ( text , _ , _ ) ⇒ Some ( TextMessage ( text ) ) < nl > - case ApiJsonMessage ( rawJson ) ⇒ Some ( JsonMessage ( rawJson ) ) < nl > - case _ ⇒ None < nl > - } ) match { < nl > - case Some ( message ) ⇒ < nl > - if ( update . senderUserId ! = botUserId ) { < nl > - for { < nl > - apiOutPeer ← ACLUtils . getOutPeer ( update . peer , botAuthId ) < nl > - senderAccessHash ← userExt . getAccessHash ( update . senderUserId , botAuthId ) < nl > - } yield Some ( Message ( < nl > - peer = OutPeer ( apiOutPeer . ` type ` . id , apiOutPeer . id , apiOutPeer . accessHash ) , < nl > - sender = UserOutPeer ( update . senderUserId , senderAccessHash ) , < nl > - date = update . date , < nl > - randomId = update . randomId , < nl > - message = message < nl > - ) ) < nl > - } else < nl > - Future . successful ( None ) < nl > - case None ⇒ Future . successful ( None ) < nl > - } < nl > + < nl > + if ( update . senderUserId ! = botUserId ) { < nl > + for { < nl > + apiOutPeer ← ACLUtils . getOutPeer ( update . peer , botAuthId ) < nl > + senderAccessHash ← userExt . getAccessHash ( update . senderUserId , botAuthId ) < nl > + } yield Some ( Message ( < nl > + peer = OutPeer ( apiOutPeer . ` type ` . id , apiOutPeer . id , apiOutPeer . accessHash ) , < nl > + sender = UserOutPeer ( update . senderUserId , senderAccessHash ) , < nl > + date = update . date , < nl > + randomId = update . randomId , < nl > + message = update . message < nl > + ) ) < nl > + } else < nl > + Future . successful ( None ) < nl > case _ ⇒ Future . successful ( None ) < nl > } < nl > < nl > @ @ - 105 , 9 + 98 , 9 @ @ final class BotUpdateBuilder ( botUserId : Int , botAuthId : Long , system : ActorSyste < nl > < nl > private def buildAvatar ( apiAvatar : ApiAvatar ) : Avatar = { < nl > Avatar ( < nl > - smallImage = apiAvatar . smallImage . map ( buildAvatarImage ) , < nl > - largeImage = apiAvatar . smallImage . map ( buildAvatarImage ) , < nl > - fullImage = apiAvatar . smallImage . map ( buildAvatarImage ) < nl > + small = apiAvatar . smallImage . map ( buildAvatarImage ) , < nl > + large = apiAvatar . smallImage . map ( buildAvatarImage ) , < nl > + full = apiAvatar . smallImage . map ( buildAvatarImage ) < nl > ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsService . scala < nl > index 5637a72 . . d053a73 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsService . scala < nl > @ @ - 6 , 7 + 6 , 7 @ @ import im . actor . server . bot . { BotExtension , BotServiceBase } < nl > import im . actor . server . user . UserExceptions < nl > import upickle . Js < nl > < nl > - final class BotsService ( system : ActorSystem ) extends BotServiceBase { < nl > + final class BotsService ( system : ActorSystem ) extends BotServiceBase ( system ) { < nl > import BotMessages . _ < nl > import system . dispatcher < nl > < nl > @ @ - 14 , 11 + 14 , 13 @ @ final class BotsService ( system : ActorSystem ) extends BotServiceBase { < nl > < nl > private def createBot ( username : String , name : String ) = RequestHandler [ CreateBot , CreateBot # Response ] ( < nl > ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ < nl > - ( for { < nl > - token ← botExt . create ( username , name , isAdmin = false ) < nl > - } yield Right ( Container ( token ) ) ) recover { < nl > - case UserExceptions . NicknameTaken ⇒ < nl > - Left ( BotError ( 400 , " USERNAME _ TAKEN " , Js . Obj ( ) , None ) ) < nl > + ifIsAdmin ( botUserId ) { < nl > + ( for { < nl > + token ← botExt . create ( username , name , isAdmin = false ) < nl > + } yield Right ( Container ( token ) ) ) recover { < nl > + case UserExceptions . NicknameTaken ⇒ < nl > + Left ( BotError ( 400 , " USERNAME _ TAKEN " , Js . Obj ( ) , None ) ) < nl > + } < nl > } < nl > ) < nl > < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueService . scala < nl > index 1f96183 . . bb90a07 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueService . scala < nl > @ @ - 10 , 7 + 10 , 7 @ @ import shardakka . keyvalue . SimpleKeyValue < nl > < nl > import scala . collection . concurrent . TrieMap < nl > < nl > - final class KeyValueService ( system : ActorSystem ) extends BotServiceBase { < nl > + final class KeyValueService ( system : ActorSystem ) extends BotServiceBase ( system ) { < nl > < nl > import BotMessages . _ < nl > import system . dispatcher < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingService . scala < nl > index e8b2086 . . 093405e 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingService . scala < nl > @ @ - 3 , 11 + 3 , 11 @ @ package im . actor . server . bot . services < nl > import akka . actor . ActorSystem < nl > import im . actor . api . rpc . messaging . { ApiJsonMessage , ApiTextMessage } < nl > import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } < nl > - import im . actor . server . bot . BotServiceBase < nl > + import im . actor . server . bot . { BotToApiConversions , BotServiceBase } < nl > import im . actor . server . dialog . DialogExtension < nl > import im . actor . server . sequence . SeqStateDate < nl > < nl > - final class MessagingService ( system : ActorSystem ) extends BotServiceBase { < nl > + final class MessagingService ( system : ActorSystem ) extends BotServiceBase ( system ) with BotToApiConversions { < nl > < nl > import im . actor . bots . BotMessages . _ < nl > import system . dispatcher < nl > @ @ - 22 , 18 + 22 , 13 @ @ final class MessagingService ( system : ActorSystem ) extends BotServiceBase { < nl > ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { < nl > / / FIXME : check access hash < nl > < nl > - val apiMessage = message match { < nl > - case TextMessage ( text ) ⇒ ApiTextMessage ( text , Vector . empty , None ) < nl > - case JsonMessage ( rawJson ) ⇒ ApiJsonMessage ( rawJson ) < nl > - } < nl > - < nl > for { < nl > SeqStateDate ( _ , _ , date ) ← dialogExt . sendMessage ( < nl > peer = ApiPeer ( ApiPeerType ( peer . ` type ` ) , peer . id ) , < nl > senderUserId = botUserId , < nl > senderAuthId = 0L , < nl > randomId = randomId , < nl > - message = apiMessage , < nl > + message = message , < nl > isFat = false < nl > ) < nl > } yield Right ( MessageSent ( date ) ) < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersService . scala < nl > new file mode 100644 < nl > index 0000000 . . c419208 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersService . scala < nl > @ @ - 0 , 0 + 1 , 22 @ @ < nl > + package im . actor . server . bot . services < nl > + < nl > + import akka . actor . ActorSystem < nl > + import im . actor . server . bot . BotServiceBase < nl > + < nl > + final class UsersService ( system : ActorSystem ) extends BotServiceBase ( system ) { < nl > + import im . actor . bots . BotMessages . _ < nl > + import system . dispatcher < nl > + < nl > + override val handlers : Handlers = { < nl > + case UpdateAvatar ( userId , avatar ) ⇒ updateAvatar ( userId , avatar ) . toWeak < nl > + } < nl > + < nl > + private def updateAvatar ( userId : Int , avatar : Avatar ) = RequestHandler [ UpdateAvatar , UpdateAvatar # Response ] { < nl > + ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ < nl > + ifIsAdmin ( botUserId ) { < nl > + for { < nl > + _ ← userExt . updateAvatar ( userId , 0 , Some ( avatar ) ) < nl > + } yield Right ( Void ) < nl > + } < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooks . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooks . scala < nl > index 51db307 . . 106ed7d 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooks . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooks . scala < nl > @ @ - 13 , 7 + 13 , 7 @ @ import shardakka . keyvalue . SimpleKeyValue < nl > import scala . concurrent . Future < nl > import scala . concurrent . forkjoin . ThreadLocalRandom < nl > < nl > - final class WebHooksService ( system : ActorSystem ) extends BotServiceBase with FutureResultCats [ BotMessages . BotError ] { < nl > + final class WebHooksService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResultCats [ BotMessages . BotError ] { < nl > import BotMessages . _ < nl > < nl > import system . dispatcher < nl > diff - - git a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala < nl > index b2888da . . 1d2c086 100644 < nl > - - - a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala < nl > + + + b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala < nl > @ @ - 44 , 13 + 44 , 13 @ @ object ActorCli extends App { < nl > cmd ( Commands . CreateBot ) action { ( _ , c ) ⇒ < nl > c . copy ( command = Commands . CreateBot ) < nl > } children ( < nl > - opt [ String ] ( " username " ) abbr ( " u " ) required ( ) action { ( x , c ) ⇒ < nl > + opt [ String ] ( " username " ) abbr " u " required ( ) action { ( x , c ) ⇒ < nl > c . copy ( createBot = c . createBot . copy ( username = x ) ) < nl > } , < nl > - opt [ String ] ( " name " ) abbr ( " n " ) required ( ) action { ( x , c ) ⇒ < nl > + opt [ String ] ( " name " ) abbr " n " required ( ) action { ( x , c ) ⇒ < nl > c . copy ( createBot = c . createBot . copy ( name = x ) ) < nl > } , < nl > - opt [ Unit ] ( " admin " ) abbr ( " a " ) optional ( ) action { ( x , c ) ⇒ < nl > + opt [ Unit ] ( " admin " ) abbr " a " optional ( ) action { ( x , c ) ⇒ < nl > c . copy ( createBot = c . createBot . copy ( isAdmin = true ) ) < nl > } < nl > ) < nl > @ @ - 87 , 9 + 87 , 7 @ @ final class CliHandlers extends BotHandlers { < nl > < nl > protected lazy val initialContacts = Set ( ActorPath . fromString ( s " akka . tcp : / / actor - server @ $ remoteHost : 2552 / system / receptionist " ) ) < nl > < nl > - protected lazy val client = system . actorOf ( < nl > - ClusterClient . props ( ClusterClientSettings ( system ) . withInitialContacts ( initialContacts ) ) < nl > - ) < nl > + protected lazy val client = system . actorOf ( ClusterClient . props ( ClusterClientSettings ( system ) . withInitialContacts ( initialContacts ) ) ) < nl > < nl > protected implicit lazy val ec : ExecutionContext = system . dispatcher < nl > < nl > diff - - git a / actor - server / actor - core / src / main / protobuf / user . proto b / actor - server / actor - core / src / main / protobuf / user . proto < nl > index ad5089c . . 880c95c 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / user . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / user . proto < nl > @ @ - 247 , 6 + 247 , 16 @ @ message UserQueries { < nl > required int32 user _ id = 1 ; < nl > } < nl > < nl > + message IsAdmin { < nl > + option ( scalapb . message ) . extends = " im . actor . server . user . UserQuery " ; < nl > + < nl > + required int32 user _ id = 1 ; < nl > + } < nl > + < nl > + message IsAdminResponse { < nl > + required bool isAdmin = 1 ; < nl > + } < nl > + < nl > } < nl > < nl > message UserEvents { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > index 1eef84d . . 4c24542 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > @ @ - 287 , 6 + 287 , 9 @ @ private [ user ] sealed trait Queries { < nl > < nl > def getAccessHash ( userId : Int , clientAuthId : Long ) : Future [ Long ] = < nl > ( viewRegion . ref ? GetAccessHash ( userId , clientAuthId ) ) . mapTo [ GetAccessHashResponse ] map ( _ . accessHash ) < nl > + < nl > + def isAdmin ( userId : Int ) : Future [ Boolean ] = < nl > + ( viewRegion . ref ? IsAdmin ( userId ) ) . mapTo [ IsAdminResponse ] . map ( _ . isAdmin ) < nl > } < nl > < nl > private [ user ] sealed trait AuthCommands { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > index 04255a8 . . 875f7de 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > @ @ - 85 , 6 + 85 , 9 @ @ object UserProcessor { < nl > 11008 → classOf [ UserQueries . GetApiStructResponse ] , < nl > 11009 → classOf [ UserQueries . GetAccessHash ] , < nl > 11010 → classOf [ UserQueries . GetAccessHashResponse ] , < nl > + 11011 → classOf [ UserQueries . GetUser ] , < nl > + 11012 → classOf [ UserQueries . IsAdmin ] , < nl > + 11013 → classOf [ UserQueries . IsAdminResponse ] , < nl > < nl > 12001 → classOf [ UserEvents . AuthAdded ] , < nl > 12002 → classOf [ UserEvents . AuthRemoved ] , < nl > @ @ - 185 , 6 + 188 , 7 @ @ private [ user ] final class UserProcessor < nl > case CheckAccessHash ( _ , senderAuthId , accessHash ) ⇒ checkAccessHash ( state , senderAuthId , accessHash ) < nl > case GetAccessHash ( _ , clientAuthId ) ⇒ getAccessHash ( state , clientAuthId ) < nl > case GetUser ( _ ) ⇒ getUser ( state ) < nl > + case IsAdmin ⇒ isAdmin ( state ) < nl > } < nl > < nl > protected [ this ] var userStateMaybe : Option [ User ] = None < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala < nl > index a03d8f4 . . 45eb338 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala < nl > @ @ - 49 , 4 + 49 , 6 @ @ private [ user ] trait UserQueriesHandlers { < nl > sender ( ) ! GetAccessHashResponse ( ACLUtils . userAccessHash ( clientAuthId , userId , state . accessSalt ) ) < nl > < nl > protected def getUser ( state : User ) : Unit = sender ( ) ! state < nl > + < nl > + protected def isAdmin ( state : User ) : Unit = sender ( ) ! IsAdminResponse ( state . isAdmin . getOrElse ( false ) ) < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala 
 index 774fb91 . . cd5437e 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala 
 @ @ - 37 , 7 + 37 , 7 @ @ final class ActorBot extends InternalBot ( ActorBot . UserId , ActorBot . Username , Act 
 log . warning ( " Creating new bot " ) 
 
 requestCreateBot ( nickname , name ) onComplete { 
 - case Success ( token ) ⇒ requestSendMessage ( m . peer , nextRandomId ( ) , TextMessage ( s " Yay ! Bot created , here is your token : $ { token } " , None ) ) 
 + case Success ( token ) ⇒ requestSendMessage ( m . peer , nextRandomId ( ) , TextMessage ( s " Yay ! Bot created , bot token : $ { token . token } , bot id : $ { token . userId } " , None ) ) 
 case Failure ( BotError ( _ , " USERNAME _ TAKEN " , _ , _ ) ) ⇒ 
 requestSendMessage ( m . peer , nextRandomId ( ) , TextMessage ( " Username already taken " , None ) ) 
 case Failure ( e ) ⇒ 
 diff - - git a / actor - server / actor - core / src / main / protobuf / bots . proto b / actor - server / actor - core / src / main / protobuf / bots . proto 
 new file mode 100644 
 index 0000000 . . f16d769 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / protobuf / bots . proto 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + syntax = " proto2 " ; 
 + 
 + package im . actor . server ; 
 + 
 + import " scalapb / scalapb . proto " ; 
 + 
 + message BotCommand { 
 + required string slash _ command = 1 ; 
 + required string description = 2 ; 
 + optional string loc _ key = 3 ; 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / protobuf / user . proto b / actor - server / actor - core / src / main / protobuf / user . proto 
 index d4b060f . . fd139ff 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / user . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / user . proto 
 @ @ - 11 , 6 + 11 , 7 @ @ import " scalapb / scalapb . proto " ; 
 
 import " sequence . proto " ; 
 import " file . proto " ; 
 + import " bots . proto " ; 
 
 message UserState { 
 option ( scalapb . message ) . extends = " im . actor . server . office . ProcessorState " ; 
 @ @ - 35 , 6 + 36 , 7 @ @ message UserState { 
 repeated SocialContact social _ contacts = 18 ; 
 repeated string preferred _ languages = 19 ; 
 optional string time _ zone = 20 ; 
 + repeated BotCommand bot _ commands = 21 ; 
 } 
 
 message SocialContact { 
 @ @ - 214 , 6 + 216 , 23 @ @ message UserCommands { 
 required int32 user _ id = 1 ; 
 } 
 
 + message AddBotCommand { 
 + option ( scalapb . message ) . extends = " im . actor . server . user . UserCommand " ; 
 + 
 + required int32 user _ id = 1 ; 
 + required BotCommand command = 2 ; 
 + } 
 + 
 + message AddBotCommandAck { } 
 + 
 + message RemoveBotCommand { 
 + option ( scalapb . message ) . extends = " im . actor . server . user . UserCommand " ; 
 + 
 + required int32 user _ id = 1 ; 
 + required string slash _ command = 2 ; 
 + } 
 + 
 + message RemoveBotCommandAck { } 
 } 
 
 message UserQueries { 
 @ @ - 439 , 4 + 458 , 19 @ @ message UserEvents { 
 
 required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; 
 } 
 + 
 + message BotCommandAdded { 
 + option ( scalapb . message ) . extends = " im . actor . server . user . UserEvent " ; 
 + 
 + required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; 
 + required BotCommand command = 2 ; 
 + } 
 + 
 + message BotCommandRemoved { 
 + option ( scalapb . message ) . extends = " im . actor . server . user . UserEvent " ; 
 + 
 + required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; 
 + required string slash _ command = 2 ; 
 + } 
 + 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / ApiConversions . scala b / actor - server / actor - core / src / main / scala / im / actor / server / ApiConversions . scala 
 index 474facb . . a36620c 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / ApiConversions . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / ApiConversions . scala 
 @ @ - 2 , 6 + 2 , 8 @ @ package im . actor . server 
 
 import im . actor . api . rpc . files . { ApiAvatar , ApiAvatarImage , ApiFileLocation } 
 import im . actor . api . rpc . messaging . ApiMessageReaction 
 + import im . actor . api . rpc . users . ApiBotCommand 
 + import im . actor . server . bots . BotCommand 
 import im . actor . server . model . MessageReaction 
 import im . actor . server . file . { Avatar , AvatarImage , FileLocation } 
 
 @ @ - 39 , 6 + 41 , 16 @ @ object ApiConversions { 
 implicit def avatarOptToApi ( avatarOpt : Option [ Avatar ] ) : Option [ ApiAvatar ] = 
 avatarOpt map avatarToApi 
 
 + implicit def botCommandsToApi ( commands : Seq [ BotCommand ] ) : IndexedSeq [ ApiBotCommand ] = 
 + ( commands map botCommandToApi ) . toVector 
 + 
 + implicit def botCommandToApi ( command : BotCommand ) : ApiBotCommand = 
 + ApiBotCommand ( 
 + command . slashCommand , 
 + command . description , 
 + command . locKey 
 + ) 
 + 
 implicit def reactionToApi ( reaction : MessageReaction ) : ApiMessageReaction = 
 ApiMessageReaction ( 
 reaction . userIds . toVector , 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 index 343fa13 . . b1d6392 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 @ @ - 6 , 7 + 6 , 7 @ @ import java . util . TimeZone 
 import akka . actor . { ActorSystem , Status } 
 import akka . http . scaladsl . util . FastFuture 
 import akka . pattern . pipe 
 - import im . actor . api . rpc . contacts . { UpdateContactsRemoved , UpdateContactRegistered , UpdateContactsAdded } 
 + import im . actor . api . rpc . contacts . { UpdateContactRegistered , UpdateContactsAdded , UpdateContactsRemoved } 
 import im . actor . api . rpc . messaging . _ 
 import im . actor . api . rpc . misc . ApiExtension 
 import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } 
 @ @ - 15 , 6 + 15 , 7 @ @ import im . actor . concurrent . FutureExt 
 import im . actor . config . ActorConfig 
 import im . actor . server . ApiConversions . _ 
 import im . actor . server . acl . ACLUtils 
 + import im . actor . server . bots . BotCommand 
 import im . actor . server . file . { Avatar , ImageUtils } 
 import im . actor . server . model . { AvatarData , Sex , User } 
 import im . actor . server . model . contact . { UserContact , UserEmailContact , UserPhoneContact } 
 @ @ - 24 , 6 + 25 , 7 @ @ import im . actor . server . persist . _ 
 import im . actor . server . sequence . { PushRules , SequenceErrors } 
 import im . actor . server . social . SocialManager . _ 
 import im . actor . server . user . UserCommands . _ 
 + import im . actor . server . user . UserErrors . { BotCommandAlreadyExists , InvalidBotCommand } 
 import im . actor . util . misc . StringUtils 
 import im . actor . util . ThreadLocalSecureRandom 
 import org . joda . time . DateTime 
 @ @ - 51 , 6 + 53 , 12 @ @ object UserErrors { 
 
 case object EmptyLocalesList extends UserError ( " Empty locale list " ) 
 
 + final case class InvalidBotCommand ( slashCommand : String ) 
 + extends UserError ( s " Invalid slash command : $ slashCommand " ) 
 + 
 + final case class BotCommandAlreadyExists ( slashCommand : String ) 
 + extends UserError ( s " Bot command already exists : $ slashCommand " ) 
 + 
 final case object ContactNotFound extends UserError ( " Contact not found " ) 
 
 } 
 @ @ - 285 , 6 + 293 , 42 @ @ private [ user ] trait UserCommandHandlers { 
 } 
 } 
 
 + protected def addBotCommand ( user : UserState , rawCommand : BotCommand ) : Unit = { 
 + val command = rawCommand . copy ( slashCommand = rawCommand . slashCommand . trim ) 
 + def isValid ( command : BotCommand ) = { 
 + val slashCommand = command . slashCommand 
 + slashCommand . nonEmpty & & slashCommand . matches ( " [ A - Za - z ] * " ) & & slashCommand . length < 32 
 + } 
 + if ( user . botCommands . exists ( _ . slashCommand = = command . slashCommand ) ) { 
 + sender ( ) ! Status . Failure ( BotCommandAlreadyExists ( command . slashCommand ) ) 
 + } else { 
 + if ( isValid ( command ) ) { 
 + persistReply ( UserEvents . BotCommandAdded ( now ( ) , command ) , user ) { _ ⇒ 
 + val update = UpdateUserBotCommandsChanged ( user . id , user . botCommands : + command ) 
 + for { 
 + relatedUserIds ← getRelations ( user . id ) 
 + _ ← seqUpdatesExt . broadcastOwnSingleUpdate ( user . id , relatedUserIds , update ) 
 + } yield AddBotCommandAck ( ) 
 + } 
 + } else { 
 + sender ( ) ! Status . Failure ( InvalidBotCommand ( command . slashCommand ) ) 
 + } 
 + } 
 + } 
 + 
 + protected def removeBotCommand ( user : UserState , slashCommand : String ) = 
 + if ( user . botCommands . exists ( _ . slashCommand = = slashCommand ) ) { 
 + persistReply ( UserEvents . BotCommandRemoved ( now ( ) , slashCommand ) , user ) { _ ⇒ 
 + val update = UpdateUserBotCommandsChanged ( user . id , user . botCommands . filterNot ( _ . slashCommand = = slashCommand ) ) 
 + for { 
 + relatedUserIds ← getRelations ( user . id ) 
 + _ ← seqUpdatesExt . broadcastOwnSingleUpdate ( user . id , relatedUserIds , update ) 
 + } yield RemoveBotCommandAck ( ) 
 + } 
 + } else { 
 + sender ( ) ! RemoveBotCommandAck ( ) 
 + } 
 + 
 protected def updateAvatar ( user : UserState , avatarOpt : Option [ Avatar ] ) : Unit = { 
 persistReply ( UserEvents . AvatarUpdated ( now ( ) , avatarOpt ) , user ) { evt ⇒ 
 val avatarData = avatarOpt map ( getAvatarData ( AvatarData . OfUser , user . id , _ ) ) getOrElse AvatarData . empty ( AvatarData . OfUser , user . id . toLong ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 index 1190217 . . 8b2ff36 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 @ @ - 2 , 20 + 2 , 21 @ @ package im . actor . server . user 
 
 import akka . actor . { ActorRef , ActorSystem } 
 import akka . cluster . pubsub . DistributedPubSub 
 - import akka . event . { LoggingAdapter , Logging } 
 + import akka . event . { Logging , LoggingAdapter } 
 import akka . pattern . ask 
 import akka . util . Timeout 
 import com . google . protobuf . ByteString 
 import im . actor . api . rpc . misc . ApiExtension 
 import im . actor . api . rpc . { AuthorizedClientData , Update } 
 - import im . actor . api . rpc . users . { ApiUser , ApiSex } 
 + import im . actor . api . rpc . users . { ApiSex , ApiUser } 
 import im . actor . server . auth . DeviceInfo 
 + import im . actor . server . bots . BotCommand 
 import im . actor . server . db . DbExtension 
 import im . actor . server . file . Avatar 
 - import im . actor . server . model . { SerializedUpdate , UpdateMapping , Peer } 
 + import im . actor . server . model . { Peer , SerializedUpdate , UpdateMapping } 
 import im . actor . server . persist . UserRepo 
 import im . actor . server . pubsub . PubSubExtension 
 - import im . actor . server . sequence . { PushData , PushRules , SeqUpdatesExtension , SeqState } 
 + import im . actor . server . sequence . { PushData , PushRules , SeqState , SeqUpdatesExtension } 
 import im . actor . server . { model , persist ⇒ p } 
 import im . actor . types . _ 
 import im . actor . util . misc . IdUtils 
 @ @ - 121 , 6 + 122 , 12 @ @ private [ user ] sealed trait Commands extends AuthCommands { 
 def notifyDialogsChanged ( userId : Int ) : Future [ SeqState ] = 
 ( processorRegion . ref ? NotifyDialogsChanged ( userId ) ) . mapTo [ SeqState ] 
 
 + def addBotCommand ( userId : Int , command : BotCommand ) : Future [ AddBotCommandAck ] = 
 + ( processorRegion . ref ? AddBotCommand ( userId , command ) ) . mapTo [ AddBotCommandAck ] 
 + 
 + def removeBotCommand ( userId : Int , slashCommand : String ) : Future [ RemoveBotCommandAck ] = 
 + ( processorRegion . ref ? RemoveBotCommand ( userId , slashCommand ) ) . mapTo [ RemoveBotCommandAck ] 
 + 
 def broadcastUserUpdate ( 
 userId : Int , 
 update : Update , 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 index 837a786 . . 2842106 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 @ @ - 9 , 6 + 9 , 7 @ @ import akka . util . Timeout 
 import im . actor . api . rpc . misc . ApiExtension 
 import im . actor . serialization . ActorSerializer 
 import im . actor . server . acl . ACLUtils 
 + import im . actor . server . bots . BotCommand 
 import im . actor . server . cqrs . TaggedEvent 
 import im . actor . server . db . DbExtension 
 import im . actor . server . dialog . { DialogCommand , DialogExtension } 
 @ @ - 57 , 7 + 58 , 8 @ @ private [ user ] object UserBuilder { 
 isAdmin = e . isAdmin , 
 socialContacts = Seq . empty [ SocialContact ] , 
 preferredLanguages = Seq . empty [ String ] , 
 - timeZone = None 
 + timeZone = None , 
 + botCommands = Seq . empty [ BotCommand ] 
 ) 
 } 
 
 @ @ - 93 , 6 + 95 , 8 @ @ object UserProcessor { 
 10036 → classOf [ UserCommands . ChangeTimeZone ] , 
 10037 → classOf [ UserCommands . EditLocalName ] , 
 10038 → classOf [ UserCommands . RemoveContact ] , 
 + 10039 → classOf [ UserCommands . AddBotCommand ] , 
 + 10040 → classOf [ UserCommands . RemoveBotCommand ] , 
 
 11001 → classOf [ UserQueries . GetAuthIds ] , 
 11002 → classOf [ UserQueries . GetAuthIdsResponse ] , 
 @ @ - 128 , 6 + 132 , 8 @ @ object UserProcessor { 
 12017 → classOf [ UserEvents . PreferredLanguagesChanged ] , 
 12018 → classOf [ UserEvents . TimeZoneChanged ] , 
 12019 → classOf [ UserEvents . LocalNameChanged ] , 
 + 12020 → classOf [ UserEvents . BotCommandAdded ] , 
 + 12021 → classOf [ UserEvents . BotCommandRemoved ] , 
 
 13000 → classOf [ UserState ] , 
 13001 → classOf [ SocialContact ] 
 @ @ - 199 , 6 + 205 , 15 @ @ private [ user ] final class UserProcessor 
 state . copy ( preferredLanguages = preferredLanguages ) 
 case _ : UserEvents . Created ⇒ state 
 case _ : UserEvents . DialogsChanged ⇒ state 
 + case UserEvents . BotCommandAdded ( _ , command ) ⇒ 
 + val updCommands = if ( state . botCommands exists ( _ . slashCommand = = command . slashCommand ) ) state . botCommands else state . botCommands : + command 
 + state . copy ( botCommands = updCommands ) 
 + case UserEvents . BotCommandRemoved ( _ , slashCommand ) ⇒ 
 + val updCommands = 
 + if ( state . botCommands exists ( _ . slashCommand = = slashCommand ) ) 
 + state . botCommands filterNot ( _ . slashCommand = = slashCommand ) 
 + else state . botCommands 
 + state . copy ( botCommands = updCommands ) 
 } 
 } 
 
 @ @ - 225 , 6 + 240 , 8 @ @ private [ user ] final class UserProcessor 
 case NotifyDialogsChanged ( _ ) ⇒ notifyDialogsChanged ( state ) 
 case ChangeTimeZone ( _ , timeZone ) ⇒ changeTimeZone ( state , timeZone ) 
 case ChangePreferredLanguages ( _ , langs ) ⇒ changePreferredLanguages ( state , langs ) 
 + case AddBotCommand ( _ , command ) ⇒ addBotCommand ( state , command ) 
 + case RemoveBotCommand ( _ , slashCommand ) ⇒ removeBotCommand ( state , slashCommand ) 
 case cmd : EditLocalName ⇒ contacts . ref forward cmd 
 case query : GetLocalName ⇒ contacts . ref forward query 
 case StopOffice ⇒ context stop self 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala 
 index 5cbdba7 . . 9c577af 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala 
 @ @ - 35 , 7 + 35 , 7 @ @ private [ user ] trait UserQueriesHandlers { 
 external = state . external , 
 preferredLanguages = state . preferredLanguages . toVector , 
 timeZone = state . timeZone , 
 - botCommands = Vector . empty 
 + botCommands = state . botCommands 
 ) ) ) pipeTo sender ( ) 
 } 
 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileUrlBuilderHttpHandler . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileUrlBuilderHttpHandler . scala 
 index 1b1bf95 . . 6aca586 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileUrlBuilderHttpHandler . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / FileUrlBuilderHttpHandler . scala 
 @ @ - 58 , 9 + 58 , 9 @ @ private [ file ] final class FileUrlBuilderHttpHandler ( fsAdapter : FileStorageAdapte 
 / / format : OFF 
 def routes : Route = 
 extractRequest { request = > 
 - log . debug ( " Got file url builder request : { } " , request ) 
 defaultVersion { 
 pathPrefix ( " files " / SignedLongNumber ) { fileId = > 
 + log . debug ( " Got file url builder request : { } " , request ) 
 get { 
 validateBuilderRequest ( fileId ) { case ( fileModel , accessHash ) = > 
 onSuccess ( fsAdapter . getFileDownloadUrl ( fileModel , accessHash ) ) { 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / user / BotCommandsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / user / BotCommandsSpec . scala 
 new file mode 100644 
 index 0000000 . . 7b8971f 
 - - - / dev / null 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / user / BotCommandsSpec . scala 
 @ @ - 0 , 0 + 1 , 78 @ @ 
 + package im . actor . server . user 
 + 
 + import im . actor . server . bots . BotCommand 
 + import im . actor . server . { BaseAppSuite , ImplicitAuthService , ImplicitSessionRegion } 
 + 
 + class BotCommandsSpec extends BaseAppSuite with ImplicitAuthService with ImplicitSessionRegion { 
 + 
 + behavior of " User ' s bot commands " 
 + 
 + it should " not add wrong commands " in dontAddWrong ( ) 
 + 
 + it should " add and remove " in addAndRemove ( ) 
 + 
 + val userExt = UserExtension ( system ) 
 + 
 + def dontAddWrong ( ) = { 
 + val ( botUser , _ , _ , _ ) = createUser ( ) 
 + 
 + whenReady ( addCommand ( botUser . id , BotCommand ( " / wrong " , " " , None ) ) . failed ) { 
 + case UserErrors . InvalidBotCommand ( " / wrong " ) ⇒ 
 + } 
 + whenReady ( addCommand ( botUser . id , BotCommand ( " wrong command " , " " , None ) ) . failed ) { 
 + case UserErrors . InvalidBotCommand ( " wrong command " ) ⇒ 
 + } 
 + whenReady ( addCommand ( botUser . id , BotCommand ( " " , " " , None ) ) . failed ) { 
 + case UserErrors . InvalidBotCommand ( " " ) ⇒ 
 + } 
 + whenReady ( addCommand ( botUser . id , BotCommand ( " " , " " , None ) ) . failed ) { 
 + case UserErrors . InvalidBotCommand ( " " ) ⇒ 
 + } 
 + 
 + whenReady ( userExt . getApiStruct ( botUser . id , 0 , 0L ) ) { resp ⇒ 
 + resp . botCommands shouldBe empty 
 + } 
 + } 
 + 
 + def addAndRemove ( ) = { 
 + val ( botUser , _ , _ , _ ) = createUser ( ) 
 + 
 + val fireCommand = BotCommand ( " fire " , " Fire at your enemy with something dangerous " , None ) 
 + val runCommand = BotCommand ( " run " , " Run away as fast as you can " , Some ( " run " ) ) 
 + 
 + whenReady ( addCommand ( botUser . id , fireCommand ) ) ( identity ) 
 + 
 + whenReady ( addCommand ( botUser . id , BotCommand ( " fire " , " Fire agian " , None ) ) . failed ) { 
 + case UserErrors . BotCommandAlreadyExists ( " fire " ) ⇒ 
 + } 
 + 
 + whenReady ( addCommand ( botUser . id , runCommand ) ) ( identity ) 
 + 
 + whenReady ( userExt . getApiStruct ( botUser . id , 0 , 0L ) ) { resp ⇒ 
 + resp . botCommands should have size 2 
 + val fire = resp . botCommands ( 0 ) 
 + fire . slashCommand shouldEqual fireCommand . slashCommand 
 + fire . description shouldEqual fireCommand . description 
 + fire . locKey shouldEqual None 
 + 
 + val run = resp . botCommands ( 1 ) 
 + run . slashCommand shouldEqual runCommand . slashCommand 
 + run . description shouldEqual runCommand . description 
 + run . locKey shouldEqual runCommand . locKey 
 + } 
 + 
 + / / respond with success when trying to remove same command multiple times 
 + whenReady ( userExt . removeBotCommand ( botUser . id , fireCommand . slashCommand ) ) ( identity ) 
 + whenReady ( userExt . removeBotCommand ( botUser . id , fireCommand . slashCommand ) ) ( identity ) 
 + 
 + whenReady ( userExt . getApiStruct ( botUser . id , 0 , 0L ) ) { resp ⇒ 
 + resp . botCommands should have size 1 
 + val run = resp . botCommands . head 
 + run . slashCommand shouldEqual runCommand . slashCommand 
 + } 
 + } 
 + 
 + private def addCommand ( userId : Int , commmand : BotCommand ) = 
 + userExt . addBotCommand ( userId , commmand ) 
 + 
 + }

NEAREST DIFF:
diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / EchoBot . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / EchoBot . scala 
 index ff7e64e . . 7a67d19 100644 
 - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / EchoBot . scala 
 + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / EchoBot . scala 
 @ @ - 32 , 7 + 32 , 7 @ @ final class EchoBot ( token : String , endpoint : String ) extends RemoteBot ( token , en 
 val name = getUser ( m . sender . id ) . name 
 
 requestSendMessage ( m . sender . asOutPeer , nextRandomId ( ) , TextMessage ( s " Hey $ name , here is your reply : $ text " ) ) 
 - case _ ⇒ 
 + case notAText ⇒ requestSendMessage ( m . sender . asOutPeer , nextRandomId ( ) , notAText ) 
 } 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 index bf376c9 . . a0ec4a5 100644 
 - - - a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 + + + b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 @ @ - 17 , 6 + 17 , 7 @ @ object BotMessages { 
 val Messaging = " messaging " 
 val Bots = " bots " 
 val WebHooks = " webhooks " 
 + val Users = " users " 
 } 
 
 final case class FileLocation ( 
 @ @ - 32 , 9 + 33 , 9 @ @ object BotMessages { 
 ) 
 
 final case class Avatar ( 
 - smallImage : Option [ AvatarImage ] , 
 - largeImage : Option [ AvatarImage ] , 
 - fullImage : Option [ AvatarImage ] 
 + small : Option [ AvatarImage ] , 
 + large : Option [ AvatarImage ] , 
 + full : Option [ AvatarImage ] 
 ) 
 
 final case class User ( 
 @ @ - 281 , 6 + 282 , 14 @ @ object BotMessages { 
 @ key ( " GetHooks " ) 
 final case object GetHooks extends GetHooks 
 
 + @ key ( " UpdateAvatar " ) 
 + final case class UpdateAvatar ( userId : Int , avatar : Avatar ) extends RequestBody { 
 + override type Response = Void 
 + override val service = Services . Users 
 + 
 + override def readResponse ( obj : Js . Obj ) = readJs [ Response ] ( obj ) 
 + } 
 + 
 final case class MessageSent ( date : Long ) extends ResponseBody 
 
 @ key ( " Message " ) 
 @ @ - 294 , 9 + 303 , 55 @ @ object BotMessages { 
 
 sealed trait MessageBody 
 
 - @ key ( " TextMessage " ) 
 + @ key ( " Text " ) 
 final case class TextMessage ( text : String ) extends MessageBody 
 
 - @ key ( " JsonMessage " ) 
 + @ key ( " Json " ) 
 final case class JsonMessage ( rawJson : String ) extends MessageBody 
 + 
 + @ key ( " Document " ) 
 + final case class DocumentMessage ( 
 + fileId : Long , 
 + accessHash : Long , 
 + fileSize : Long , 
 + name : String , 
 + mimeType : String , 
 + thumb : Option [ FastThumb ] , 
 + ext : Option [ DocumentEx ] 
 + ) extends MessageBody 
 + 
 + @ key ( " Service " ) 
 + final case class ServiceMessage ( text : String ) extends MessageBody 
 + 
 + @ key ( " Unsupported " ) 
 + sealed trait UnsupportedMessage extends MessageBody 
 + 
 + @ key ( " Unsupported " ) 
 + final case object UnsupportedMessage extends UnsupportedMessage 
 + 
 + @ key ( " FastThumb " ) 
 + final case class FastThumb ( 
 + width : Int , 
 + height : Int , 
 + thumb : String 
 + ) 
 + 
 + sealed trait DocumentEx 
 + 
 + @ key ( " Photo " ) 
 + final case class DocumentExPhoto ( 
 + width : Int , 
 + height : Int 
 + ) extends DocumentEx 
 + 
 + @ key ( " Video " ) 
 + final case class DocumentExVideo ( 
 + width : Int , 
 + height : Int , 
 + duration : Int 
 + ) extends DocumentEx 
 + 
 + @ key ( " Voice " ) 
 + final case class DocumentExVoice ( duration : Int ) extends DocumentEx 
 + 
 } 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala 
 new file mode 100644 
 index 0000000 . . 743009e 
 - - - / dev / null 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala 
 @ @ - 0 , 0 + 1 , 45 @ @ 
 + package im . actor . server . bot 
 + 
 + import im . actor . api . rpc . files . ApiFastThumb 
 + import im . actor . api . rpc . messaging . _ 
 + import scodec . bits . BitVector 
 + 
 + import scala . language . implicitConversions 
 + 
 + trait ApiToBotConversions { 
 + 
 + import im . actor . bots . BotMessages . _ 
 + 
 + implicit def toFastThumb ( ft : ApiFastThumb ) : FastThumb = 
 + FastThumb ( ft . w , ft . h , BitVector ( ft . thumb ) . toBase64 ) 
 + 
 + implicit def toFastThumb ( ft : Option [ ApiFastThumb ] ) : Option [ FastThumb ] = 
 + ft map toFastThumb 
 + 
 + implicit def toDocumentEx ( ex : ApiDocumentEx ) : DocumentEx = 
 + ex match { 
 + case ApiDocumentExPhoto ( w , h ) ⇒ DocumentExPhoto ( w , h ) 
 + case ApiDocumentExVideo ( w , h , duration ) ⇒ DocumentExVideo ( w , h , duration ) 
 + case ApiDocumentExVoice ( duration ) ⇒ DocumentExVoice ( duration ) 
 + } 
 + 
 + implicit def toDocumentEx ( ex : Option [ ApiDocumentEx ] ) : Option [ DocumentEx ] = 
 + ex map toDocumentEx 
 + 
 + implicit def toMessage ( message : ApiMessage ) : MessageBody = 
 + message match { 
 + case ApiTextMessage ( text , _ , _ ) ⇒ TextMessage ( text ) 
 + case ApiJsonMessage ( rawJson ) ⇒ JsonMessage ( rawJson ) 
 + case ApiDocumentMessage ( 
 + fileId , 
 + accessHash , 
 + fileSize , 
 + name , 
 + mimeType , 
 + thumb , 
 + ext ) ⇒ DocumentMessage ( fileId , accessHash , fileSize . toLong , name , mimeType , thumb , ext ) 
 + case ApiServiceMessage ( text , _ ) ⇒ ServiceMessage ( text ) 
 + case _ : ApiUnsupportedMessage ⇒ UnsupportedMessage 
 + } 
 + 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServiceBase . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServiceBase . scala 
 index f2bd1bb . . 0d28a11 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServiceBase . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServiceBase . scala 
 @ @ - 1 , 6 + 1 , 8 @ @ 
 package im . actor . server . bot 
 
 + import akka . actor . ActorSystem 
 import im . actor . bots . BotMessages 
 + import im . actor . server . user . UserExtension 
 import upickle . Js 
 import upickle . default . _ 
 
 @ @ - 8 , 7 + 10 , 7 @ @ import scala . concurrent . { ExecutionContext , Future } 
 
 object BotServiceTypes extends BotServiceTypes 
 
 - trait BotServiceTypes { 
 + trait BotServiceTypes extends BotToInternalConversions { 
 import BotMessages . _ 
 
 type BotUserId = Int 
 @ @ - 36 , 12 + 38 , 22 @ @ trait BotServiceTypes { 
 case class WeakRequestHandler ( handle : ( BotUserId , BotAuthId ) ⇒ Future [ BotResponseBody ] ) 
 } 
 
 - / / object BotServiceBase extends Types 
 - 
 - trait BotServiceBase extends BotServiceTypes { 
 + abstract class BotServiceBase ( system : ActorSystem ) extends BotServiceTypes { 
 import BotMessages . _ 
 + import system . dispatcher 
 
 type Handlers = PartialFunction [ RequestBody , WeakRequestHandler ] 
 
 def handlers : Handlers 
 + 
 + val userExt = UserExtension ( system ) 
 + 
 + protected def ifIsAdmin [ R < : ResponseBody ] ( userId : BotUserId ) ( f : Future [ RequestResult [ R ] ] ) : Future [ RequestResult [ R ] ] = { 
 + userExt . isAdmin ( userId ) flatMap { isAdmin ⇒ 
 + if ( isAdmin ) 
 + f 
 + else 
 + Future . successful ( Left ( BotError ( 403 , " FORBIDDEN " ) ) ) 
 + } 
 + } 
 } 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala 
 new file mode 100644 
 index 0000000 . . ef3b478 
 - - - / dev / null 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + package im . actor . server . bot 
 + 
 + import im . actor . api . rpc . files . ApiFastThumb 
 + import im . actor . api . rpc . messaging . _ 
 + import scodec . bits . BitVector 
 + 
 + import scala . language . implicitConversions 
 + 
 + trait BotToApiConversions { 
 + import im . actor . bots . BotMessages . _ 
 + 
 + implicit def toThumb ( ft : FastThumb ) : ApiFastThumb = 
 + ApiFastThumb ( ft . width , ft . height , BitVector . fromValidBase64 ( ft . thumb ) . toByteArray ) 
 + 
 + implicit def toThumb ( ft : Option [ FastThumb ] ) : Option [ ApiFastThumb ] = ft map toThumb 
 + 
 + implicit def toDocumentExt ( ex : DocumentEx ) : ApiDocumentEx = 
 + ex match { 
 + case DocumentExPhoto ( width , height ) ⇒ ApiDocumentExPhoto ( width , height ) 
 + case DocumentExVideo ( width , height , duration ) ⇒ ApiDocumentExVideo ( width , height , duration ) 
 + case DocumentExVoice ( duration ) ⇒ ApiDocumentExVoice ( duration ) 
 + } 
 + 
 + implicit def toDocumentExt ( ex : Option [ DocumentEx ] ) : Option [ ApiDocumentEx ] = ex map toDocumentExt 
 + 
 + implicit def toMessage ( message : MessageBody ) : ApiMessage = 
 + message match { 
 + case TextMessage ( text ) ⇒ ApiTextMessage ( text , Vector . empty , None ) 
 + case JsonMessage ( rawJson ) ⇒ ApiJsonMessage ( rawJson ) 
 + case DocumentMessage ( 
 + fileId , 
 + accessHash , 
 + fileSize , 
 + name , 
 + mimeType , 
 + thumb , 
 + ext ) ⇒ ApiDocumentMessage ( fileId , accessHash , fileSize . toInt , name , mimeType , thumb , ext ) 
 + case ServiceMessage ( _ ) ⇒ throw new RuntimeException ( " Service messages are not supported " ) 
 + case UnsupportedMessage ⇒ ApiUnsupportedMessage 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToInternalConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToInternalConversions . scala 
 new file mode 100644 
 index 0000000 . . ed8dda6 
 - - - / dev / null 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToInternalConversions . scala 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package im . actor . server . bot 
 + 
 + import im . actor . bots . BotMessages 
 + import im . actor . server . file . { FileLocation , AvatarImage , Avatar } 
 + 
 + import scala . language . implicitConversions 
 + 
 + trait BotToInternalConversions { 
 + implicit def toFileLocation ( fl : BotMessages . FileLocation ) : FileLocation = 
 + FileLocation ( fl . fileId , fl . accessHash ) 
 + 
 + implicit def toAvatarImage ( image : BotMessages . AvatarImage ) : AvatarImage = 
 + AvatarImage ( image . fileLocation , image . width , image . height , image . fileSize . toLong ) 
 + 
 + implicit def toAvatarImageOpt ( imageOpt : Option [ BotMessages . AvatarImage ] ) : Option [ AvatarImage ] = 
 + imageOpt map toAvatarImage 
 + 
 + implicit def toAvatar ( avatar : BotMessages . Avatar ) : Avatar = 
 + Avatar ( avatar . small , avatar . large , avatar . full ) 
 + } 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotUpdateBuilder . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotUpdateBuilder . scala 
 index e4c7296 . . f20e651 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotUpdateBuilder . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotUpdateBuilder . scala 
 @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . ActorSystem 
 import im . actor . api . rpc . Update 
 import im . actor . api . rpc . files . { ApiFileLocation , ApiAvatarImage , ApiAvatar } 
 import im . actor . api . rpc . groups . { ApiMember , ApiGroup } 
 - import im . actor . api . rpc . messaging . { ApiJsonMessage , UpdateMessage , ApiTextMessage } 
 + import im . actor . api . rpc . messaging . { ApiDocumentMessage , ApiJsonMessage , UpdateMessage , ApiTextMessage } 
 import im . actor . api . rpc . users . ApiUser 
 import im . actor . bots . BotMessages . _ 
 import im . actor . server . acl . ACLUtils 
 @ @ - 15 , 7 + 15 , 7 @ @ import im . actor . server . user . UserExtension 
 import scala . concurrent . Future 
 import scala . language . postfixOps 
 
 - final class BotUpdateBuilder ( botUserId : Int , botAuthId : Long , system : ActorSystem ) { 
 + final class BotUpdateBuilder ( botUserId : Int , botAuthId : Long , system : ActorSystem ) extends ApiToBotConversions { 
 import system . dispatcher 
 
 implicit val _ system = system 
 @ @ - 24 , 27 + 24 , 20 @ @ final class BotUpdateBuilder ( botUserId : Int , botAuthId : Long , system : ActorSyste 
 def apply ( seq : Int , upd : Update ) : Future [ Option [ BotFatSeqUpdate ] ] = { 
 val updateOptFuture = upd match { 
 case update : UpdateMessage ⇒ 
 - ( update . message match { 
 - case ApiTextMessage ( text , _ , _ ) ⇒ Some ( TextMessage ( text ) ) 
 - case ApiJsonMessage ( rawJson ) ⇒ Some ( JsonMessage ( rawJson ) ) 
 - case _ ⇒ None 
 - } ) match { 
 - case Some ( message ) ⇒ 
 - if ( update . senderUserId ! = botUserId ) { 
 - for { 
 - apiOutPeer ← ACLUtils . getOutPeer ( update . peer , botAuthId ) 
 - senderAccessHash ← userExt . getAccessHash ( update . senderUserId , botAuthId ) 
 - } yield Some ( Message ( 
 - peer = OutPeer ( apiOutPeer . ` type ` . id , apiOutPeer . id , apiOutPeer . accessHash ) , 
 - sender = UserOutPeer ( update . senderUserId , senderAccessHash ) , 
 - date = update . date , 
 - randomId = update . randomId , 
 - message = message 
 - ) ) 
 - } else 
 - Future . successful ( None ) 
 - case None ⇒ Future . successful ( None ) 
 - } 
 + 
 + if ( update . senderUserId ! = botUserId ) { 
 + for { 
 + apiOutPeer ← ACLUtils . getOutPeer ( update . peer , botAuthId ) 
 + senderAccessHash ← userExt . getAccessHash ( update . senderUserId , botAuthId ) 
 + } yield Some ( Message ( 
 + peer = OutPeer ( apiOutPeer . ` type ` . id , apiOutPeer . id , apiOutPeer . accessHash ) , 
 + sender = UserOutPeer ( update . senderUserId , senderAccessHash ) , 
 + date = update . date , 
 + randomId = update . randomId , 
 + message = update . message 
 + ) ) 
 + } else 
 + Future . successful ( None ) 
 case _ ⇒ Future . successful ( None ) 
 } 
 
 @ @ - 105 , 9 + 98 , 9 @ @ final class BotUpdateBuilder ( botUserId : Int , botAuthId : Long , system : ActorSyste 
 
 private def buildAvatar ( apiAvatar : ApiAvatar ) : Avatar = { 
 Avatar ( 
 - smallImage = apiAvatar . smallImage . map ( buildAvatarImage ) , 
 - largeImage = apiAvatar . smallImage . map ( buildAvatarImage ) , 
 - fullImage = apiAvatar . smallImage . map ( buildAvatarImage ) 
 + small = apiAvatar . smallImage . map ( buildAvatarImage ) , 
 + large = apiAvatar . smallImage . map ( buildAvatarImage ) , 
 + full = apiAvatar . smallImage . map ( buildAvatarImage ) 
 ) 
 } 
 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsService . scala 
 index 5637a72 . . d053a73 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsService . scala 
 @ @ - 6 , 7 + 6 , 7 @ @ import im . actor . server . bot . { BotExtension , BotServiceBase } 
 import im . actor . server . user . UserExceptions 
 import upickle . Js 
 
 - final class BotsService ( system : ActorSystem ) extends BotServiceBase { 
 + final class BotsService ( system : ActorSystem ) extends BotServiceBase ( system ) { 
 import BotMessages . _ 
 import system . dispatcher 
 
 @ @ - 14 , 11 + 14 , 13 @ @ final class BotsService ( system : ActorSystem ) extends BotServiceBase { 
 
 private def createBot ( username : String , name : String ) = RequestHandler [ CreateBot , CreateBot # Response ] ( 
 ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ 
 - ( for { 
 - token ← botExt . create ( username , name , isAdmin = false ) 
 - } yield Right ( Container ( token ) ) ) recover { 
 - case UserExceptions . NicknameTaken ⇒ 
 - Left ( BotError ( 400 , " USERNAME _ TAKEN " , Js . Obj ( ) , None ) ) 
 + ifIsAdmin ( botUserId ) { 
 + ( for { 
 + token ← botExt . create ( username , name , isAdmin = false ) 
 + } yield Right ( Container ( token ) ) ) recover { 
 + case UserExceptions . NicknameTaken ⇒ 
 + Left ( BotError ( 400 , " USERNAME _ TAKEN " , Js . Obj ( ) , None ) ) 
 + } 
 } 
 ) 
 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueService . scala 
 index 1f96183 . . bb90a07 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / KeyValueService . scala 
 @ @ - 10 , 7 + 10 , 7 @ @ import shardakka . keyvalue . SimpleKeyValue 
 
 import scala . collection . concurrent . TrieMap 
 
 - final class KeyValueService ( system : ActorSystem ) extends BotServiceBase { 
 + final class KeyValueService ( system : ActorSystem ) extends BotServiceBase ( system ) { 
 
 import BotMessages . _ 
 import system . dispatcher 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingService . scala 
 index e8b2086 . . 093405e 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingService . scala 
 @ @ - 3 , 11 + 3 , 11 @ @ package im . actor . server . bot . services 
 import akka . actor . ActorSystem 
 import im . actor . api . rpc . messaging . { ApiJsonMessage , ApiTextMessage } 
 import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } 
 - import im . actor . server . bot . BotServiceBase 
 + import im . actor . server . bot . { BotToApiConversions , BotServiceBase } 
 import im . actor . server . dialog . DialogExtension 
 import im . actor . server . sequence . SeqStateDate 
 
 - final class MessagingService ( system : ActorSystem ) extends BotServiceBase { 
 + final class MessagingService ( system : ActorSystem ) extends BotServiceBase ( system ) with BotToApiConversions { 
 
 import im . actor . bots . BotMessages . _ 
 import system . dispatcher 
 @ @ - 22 , 18 + 22 , 13 @ @ final class MessagingService ( system : ActorSystem ) extends BotServiceBase { 
 ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ { 
 / / FIXME : check access hash 
 
 - val apiMessage = message match { 
 - case TextMessage ( text ) ⇒ ApiTextMessage ( text , Vector . empty , None ) 
 - case JsonMessage ( rawJson ) ⇒ ApiJsonMessage ( rawJson ) 
 - } 
 - 
 for { 
 SeqStateDate ( _ , _ , date ) ← dialogExt . sendMessage ( 
 peer = ApiPeer ( ApiPeerType ( peer . ` type ` ) , peer . id ) , 
 senderUserId = botUserId , 
 senderAuthId = 0L , 
 randomId = randomId , 
 - message = apiMessage , 
 + message = message , 
 isFat = false 
 ) 
 } yield Right ( MessageSent ( date ) ) 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersService . scala 
 new file mode 100644 
 index 0000000 . . c419208 
 - - - / dev / null 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersService . scala 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + package im . actor . server . bot . services 
 + 
 + import akka . actor . ActorSystem 
 + import im . actor . server . bot . BotServiceBase 
 + 
 + final class UsersService ( system : ActorSystem ) extends BotServiceBase ( system ) { 
 + import im . actor . bots . BotMessages . _ 
 + import system . dispatcher 
 + 
 + override val handlers : Handlers = { 
 + case UpdateAvatar ( userId , avatar ) ⇒ updateAvatar ( userId , avatar ) . toWeak 
 + } 
 + 
 + private def updateAvatar ( userId : Int , avatar : Avatar ) = RequestHandler [ UpdateAvatar , UpdateAvatar # Response ] { 
 + ( botUserId : BotUserId , botAuthId : BotAuthId ) ⇒ 
 + ifIsAdmin ( botUserId ) { 
 + for { 
 + _ ← userExt . updateAvatar ( userId , 0 , Some ( avatar ) ) 
 + } yield Right ( Void ) 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooks . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooks . scala 
 index 51db307 . . 106ed7d 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooks . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooks . scala 
 @ @ - 13 , 7 + 13 , 7 @ @ import shardakka . keyvalue . SimpleKeyValue 
 import scala . concurrent . Future 
 import scala . concurrent . forkjoin . ThreadLocalRandom 
 
 - final class WebHooksService ( system : ActorSystem ) extends BotServiceBase with FutureResultCats [ BotMessages . BotError ] { 
 + final class WebHooksService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResultCats [ BotMessages . BotError ] { 
 import BotMessages . _ 
 
 import system . dispatcher 
 diff - - git a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala 
 index b2888da . . 1d2c086 100644 
 - - - a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala 
 + + + b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala 
 @ @ - 44 , 13 + 44 , 13 @ @ object ActorCli extends App { 
 cmd ( Commands . CreateBot ) action { ( _ , c ) ⇒ 
 c . copy ( command = Commands . CreateBot ) 
 } children ( 
 - opt [ String ] ( " username " ) abbr ( " u " ) required ( ) action { ( x , c ) ⇒ 
 + opt [ String ] ( " username " ) abbr " u " required ( ) action { ( x , c ) ⇒ 
 c . copy ( createBot = c . createBot . copy ( username = x ) ) 
 } , 
 - opt [ String ] ( " name " ) abbr ( " n " ) required ( ) action { ( x , c ) ⇒ 
 + opt [ String ] ( " name " ) abbr " n " required ( ) action { ( x , c ) ⇒ 
 c . copy ( createBot = c . createBot . copy ( name = x ) ) 
 } , 
 - opt [ Unit ] ( " admin " ) abbr ( " a " ) optional ( ) action { ( x , c ) ⇒ 
 + opt [ Unit ] ( " admin " ) abbr " a " optional ( ) action { ( x , c ) ⇒ 
 c . copy ( createBot = c . createBot . copy ( isAdmin = true ) ) 
 } 
 ) 
 @ @ - 87 , 9 + 87 , 7 @ @ final class CliHandlers extends BotHandlers { 
 
 protected lazy val initialContacts = Set ( ActorPath . fromString ( s " akka . tcp : / / actor - server @ $ remoteHost : 2552 / system / receptionist " ) ) 
 
 - protected lazy val client = system . actorOf ( 
 - ClusterClient . props ( ClusterClientSettings ( system ) . withInitialContacts ( initialContacts ) ) 
 - ) 
 + protected lazy val client = system . actorOf ( ClusterClient . props ( ClusterClientSettings ( system ) . withInitialContacts ( initialContacts ) ) ) 
 
 protected implicit lazy val ec : ExecutionContext = system . dispatcher 
 
 diff - - git a / actor - server / actor - core / src / main / protobuf / user . proto b / actor - server / actor - core / src / main / protobuf / user . proto 
 index ad5089c . . 880c95c 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / user . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / user . proto 
 @ @ - 247 , 6 + 247 , 16 @ @ message UserQueries { 
 required int32 user _ id = 1 ; 
 } 
 
 + message IsAdmin { 
 + option ( scalapb . message ) . extends = " im . actor . server . user . UserQuery " ; 
 + 
 + required int32 user _ id = 1 ; 
 + } 
 + 
 + message IsAdminResponse { 
 + required bool isAdmin = 1 ; 
 + } 
 + 
 } 
 
 message UserEvents { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 index 1eef84d . . 4c24542 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 @ @ - 287 , 6 + 287 , 9 @ @ private [ user ] sealed trait Queries { 
 
 def getAccessHash ( userId : Int , clientAuthId : Long ) : Future [ Long ] = 
 ( viewRegion . ref ? GetAccessHash ( userId , clientAuthId ) ) . mapTo [ GetAccessHashResponse ] map ( _ . accessHash ) 
 + 
 + def isAdmin ( userId : Int ) : Future [ Boolean ] = 
 + ( viewRegion . ref ? IsAdmin ( userId ) ) . mapTo [ IsAdminResponse ] . map ( _ . isAdmin ) 
 } 
 
 private [ user ] sealed trait AuthCommands { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 index 04255a8 . . 875f7de 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 @ @ - 85 , 6 + 85 , 9 @ @ object UserProcessor { 
 11008 → classOf [ UserQueries . GetApiStructResponse ] , 
 11009 → classOf [ UserQueries . GetAccessHash ] , 
 11010 → classOf [ UserQueries . GetAccessHashResponse ] , 
 + 11011 → classOf [ UserQueries . GetUser ] , 
 + 11012 → classOf [ UserQueries . IsAdmin ] , 
 + 11013 → classOf [ UserQueries . IsAdminResponse ] , 
 
 12001 → classOf [ UserEvents . AuthAdded ] , 
 12002 → classOf [ UserEvents . AuthRemoved ] , 
 @ @ - 185 , 6 + 188 , 7 @ @ private [ user ] final class UserProcessor 
 case CheckAccessHash ( _ , senderAuthId , accessHash ) ⇒ checkAccessHash ( state , senderAuthId , accessHash ) 
 case GetAccessHash ( _ , clientAuthId ) ⇒ getAccessHash ( state , clientAuthId ) 
 case GetUser ( _ ) ⇒ getUser ( state ) 
 + case IsAdmin ⇒ isAdmin ( state ) 
 } 
 
 protected [ this ] var userStateMaybe : Option [ User ] = None 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala 
 index a03d8f4 . . 45eb338 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala 
 @ @ - 49 , 4 + 49 , 6 @ @ private [ user ] trait UserQueriesHandlers { 
 sender ( ) ! GetAccessHashResponse ( ACLUtils . userAccessHash ( clientAuthId , userId , state . accessSalt ) ) 
 
 protected def getUser ( state : User ) : Unit = sender ( ) ! state 
 + 
 + protected def isAdmin ( state : User ) : Unit = sender ( ) ! IsAdminResponse ( state . isAdmin . getOrElse ( false ) ) 
 }
