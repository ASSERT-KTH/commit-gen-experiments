BLEU SCORE: 0.13292417883329388

TEST MSG: fix ( server : push ) : try to fix silent apple push notifications
GENERATED MSG: fix ( server ) : fixed compilation error

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala < nl > index ea316b0 . . 219466b 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala < nl > @ @ - 19 , 16 + 19 , 13 @ @ private [ sequence ] final class ApplePushProvider ( userId : Int ) ( implicit system : Ac < nl > withClient ( creds ) { implicit client ⇒ < nl > if ( isLegacyCreds ( creds ) ) { < nl > log . debug ( " Delivering invisible ( seq : { } ) to apnsKey : { } " , seq , creds . apnsKey ) < nl > - dialogExt . getUnreadTotal ( userId ) foreach { unreadTotal ⇒ < nl > - val payload = < nl > - new ApnsPayloadBuilder ( ) < nl > - . addCustomProperty ( " seq " , seq ) < nl > - . setContentAvailable ( true ) < nl > - . setBadgeNumber ( unreadTotal ) < nl > - . buildWithDefaultMaximumLength ( ) < nl > - < nl > - sendNotification ( payload , creds , userId ) < nl > - } < nl > + / / according to https : / / developer . apple . com / library / ios / documentation / NetworkingInternet / Conceptual / RemoteNotificationsPG / Chapters / TheNotificationPayload . html # / / apple _ ref / doc / uid / TP40008194 - CH107 - SW6 < nl > + / / silent notification should not contain ` alert ` , ` sound ` , or ` badge ` payload . < nl > + val payload = new ApnsPayloadBuilder ( ) < nl > + . addCustomProperty ( " seq " , seq ) < nl > + . setContentAvailable ( true ) < nl > + . buildWithDefaultMaximumLength ( ) < nl > + sendNotification ( payload , creds , userId ) < nl > } else { < nl > log . debug ( " Delivering invisible ( seq : { } ) to bundleId : { } " , seq , creds . bundleId ) < nl > sendNotification ( payload = seqOnly ( seq ) , creds , userId )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala < nl > index 6ee639d . . e114d7a 100644 < nl > - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala < nl > + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala < nl > @ @ - 1 , 7 + 1 , 6 @ @ < nl > package im . actor . server . user < nl > < nl > import akka . actor . { ActorRef , ActorSystem , Props } < nl > - import akka . contrib . pattern . { ClusterSharding , ShardRegion } < nl > < nl > object UserViewRegion { < nl > private def start ( props : Option [ Props ] ) ( implicit system : ActorSystem ) : UserViewRegion = < nl > @ @ - 19 , 7 + 18 , 7 @ @ object UserViewRegion { < nl > implicit < nl > system : ActorSystem < nl > ) : UserViewRegion = < nl > - start ( Some ( UserView . props ) ) < nl > + start ( None ) < nl > < nl > def startProxy ( ) ( implicit system : ActorSystem ) : UserViewRegion = < nl > start ( None )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala 
 index ea316b0 . . 219466b 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala 
 @ @ - 19 , 16 + 19 , 13 @ @ private [ sequence ] final class ApplePushProvider ( userId : Int ) ( implicit system : Ac 
 withClient ( creds ) { implicit client ⇒ 
 if ( isLegacyCreds ( creds ) ) { 
 log . debug ( " Delivering invisible ( seq : { } ) to apnsKey : { } " , seq , creds . apnsKey ) 
 - dialogExt . getUnreadTotal ( userId ) foreach { unreadTotal ⇒ 
 - val payload = 
 - new ApnsPayloadBuilder ( ) 
 - . addCustomProperty ( " seq " , seq ) 
 - . setContentAvailable ( true ) 
 - . setBadgeNumber ( unreadTotal ) 
 - . buildWithDefaultMaximumLength ( ) 
 - 
 - sendNotification ( payload , creds , userId ) 
 - } 
 + / / according to https : / / developer . apple . com / library / ios / documentation / NetworkingInternet / Conceptual / RemoteNotificationsPG / Chapters / TheNotificationPayload . html # / / apple _ ref / doc / uid / TP40008194 - CH107 - SW6 
 + / / silent notification should not contain ` alert ` , ` sound ` , or ` badge ` payload . 
 + val payload = new ApnsPayloadBuilder ( ) 
 + . addCustomProperty ( " seq " , seq ) 
 + . setContentAvailable ( true ) 
 + . buildWithDefaultMaximumLength ( ) 
 + sendNotification ( payload , creds , userId ) 
 } else { 
 log . debug ( " Delivering invisible ( seq : { } ) to bundleId : { } " , seq , creds . bundleId ) 
 sendNotification ( payload = seqOnly ( seq ) , creds , userId )

NEAREST DIFF:
diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala 
 index 6ee639d . . e114d7a 100644 
 - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala 
 + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala 
 @ @ - 1 , 7 + 1 , 6 @ @ 
 package im . actor . server . user 
 
 import akka . actor . { ActorRef , ActorSystem , Props } 
 - import akka . contrib . pattern . { ClusterSharding , ShardRegion } 
 
 object UserViewRegion { 
 private def start ( props : Option [ Props ] ) ( implicit system : ActorSystem ) : UserViewRegion = 
 @ @ - 19 , 7 + 18 , 7 @ @ object UserViewRegion { 
 implicit 
 system : ActorSystem 
 ) : UserViewRegion = 
 - start ( Some ( UserView . props ) ) 
 + start ( None ) 
 
 def startProxy ( ) ( implicit system : ActorSystem ) : UserViewRegion = 
 start ( None )
