BLEU SCORE: 0.13044969897820202

TEST MSG: fix ( server ) : increment protoVersion
GENERATED MSG: fix ( server : kamon ) : connection - > connection _ count

TEST DIFF (one line): diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala < nl > index 9129fb7 . . 64d71d2 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala < nl > @ @ - 20 , 7 + 20 , 7 @ @ object MTProtoBlueprint { < nl > < nl > type MTProtoFlow = Flow [ ByteString , ByteString , Unit ] < nl > < nl > - val protoVersions : Set [ Byte ] = Set ( 1 ) < nl > + val protoVersions : Set [ Byte ] = Set ( 1 , 2 ) < nl > val apiMajorVersions : Set [ Byte ] = Set ( 1 ) < nl > < nl > def apply ( connId : String , connTimeHist : Histogram , connCountMM : MinMaxCounter , serverKeys : Seq [ ServerKey ] ) ( implicit sessionRegion : SessionRegion , system : ActorSystem ) : MTProtoFlow = {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala < nl > index 70002e1 . . 8b71b88 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala < nl > @ @ - 99 , 7 + 99 , 7 @ @ abstract class Frontend ( connIdPrefix : String ) { < nl > private val metricTags = Map ( " type " → connIdPrefix ) < nl > < nl > private val connectionTime = Kamon . metrics . histogram ( " connection . time " , metricTags , kamon . metric . instrument . Time . Milliseconds ) < nl > - private val connectionCount = Kamon . metrics . minMaxCounter ( " connections " , metricTags ) < nl > + private val connectionCount = Kamon . metrics . minMaxCounter ( " connection _ count " , metricTags ) < nl > < nl > private val connCounter = new AtomicLong ( 0L )

TEST DIFF:
diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala 
 index 9129fb7 . . 64d71d2 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala 
 @ @ - 20 , 7 + 20 , 7 @ @ object MTProtoBlueprint { 
 
 type MTProtoFlow = Flow [ ByteString , ByteString , Unit ] 
 
 - val protoVersions : Set [ Byte ] = Set ( 1 ) 
 + val protoVersions : Set [ Byte ] = Set ( 1 , 2 ) 
 val apiMajorVersions : Set [ Byte ] = Set ( 1 ) 
 
 def apply ( connId : String , connTimeHist : Histogram , connCountMM : MinMaxCounter , serverKeys : Seq [ ServerKey ] ) ( implicit sessionRegion : SessionRegion , system : ActorSystem ) : MTProtoFlow = {

NEAREST DIFF:
diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala 
 index 70002e1 . . 8b71b88 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala 
 @ @ - 99 , 7 + 99 , 7 @ @ abstract class Frontend ( connIdPrefix : String ) { 
 private val metricTags = Map ( " type " → connIdPrefix ) 
 
 private val connectionTime = Kamon . metrics . histogram ( " connection . time " , metricTags , kamon . metric . instrument . Time . Milliseconds ) 
 - private val connectionCount = Kamon . metrics . minMaxCounter ( " connections " , metricTags ) 
 + private val connectionCount = Kamon . metrics . minMaxCounter ( " connection _ count " , metricTags ) 
 
 private val connCounter = new AtomicLong ( 0L )
