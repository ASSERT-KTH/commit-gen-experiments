BLEU SCORE: 0.12067008283523631

TEST MSG: feat ( core ) : Adding verified flag support
GENERATED MSG: feat ( js ) : Implemented getStickers and sensSticker method

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > index 081db97 . . 4c9573e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > @ @ - 217 , 7 + 217 , 8 @ @ public class JsMessenger extends Messenger { < nl > userVM . getName ( ) . get ( ) , < nl > userVM . getNick ( ) . get ( ) , < nl > getSmallAvatarUrl ( userVM . getAvatar ( ) . get ( ) ) , < nl > - Placeholders . getPlaceholder ( peer . getPeerId ( ) ) ) ; < nl > + Placeholders . getPlaceholder ( peer . getPeerId ( ) ) , < nl > + userVM . getIsVerified ( ) . get ( ) ) ; < nl > } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > GroupVM groupVM = getGroups ( ) . get ( peer . getPeerId ( ) ) ; < nl > return JsPeerInfo . create ( < nl > @ @ - 225 , 7 + 226 , 8 @ @ public class JsMessenger extends Messenger { < nl > groupVM . getName ( ) . get ( ) , < nl > null , < nl > getSmallAvatarUrl ( groupVM . getAvatar ( ) . get ( ) ) , < nl > - Placeholders . getPlaceholder ( peer . getPeerId ( ) ) ) ; < nl > + Placeholders . getPlaceholder ( peer . getPeerId ( ) ) , < nl > + false ) ; < nl > } else { < nl > throw new RuntimeException ( ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java < nl > index 683c459 . . caf0e9a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java < nl > @ @ - 45 , 7 + 45 , 7 @ @ public class JsDialog extends JavaScriptObject { < nl > src . getMessageType ( ) , src . getText ( ) , src . getRelatedUid ( ) ) ; < nl > < nl > JsPeerInfo peerInfo = JsPeerInfo . create ( JsPeer . create ( src . getPeer ( ) ) , src . getDialogTitle ( ) , null , fileUrl , < nl > - Placeholders . getPlaceholder ( src . getPeer ( ) . getPeerId ( ) ) ) ; < nl > + Placeholders . getPlaceholder ( src . getPeer ( ) . getPeerId ( ) ) , false ) ; < nl > < nl > String state = " unknown " ; < nl > if ( messenger . myUid ( ) = = src . getSenderId ( ) ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerInfo . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerInfo . java < nl > index 3810259 . . 370b947 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerInfo . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerInfo . java < nl > @ @ - 8 , 8 + 8 , 9 @ @ import com . google . gwt . core . client . JavaScriptObject ; < nl > < nl > public class JsPeerInfo extends JavaScriptObject { < nl > < nl > - public native static JsPeerInfo create ( JsPeer peer , String title , String userName , String avatar , String placeholder ) / * - { < nl > - return { peer : peer , title : title , userName : userName , avatar : avatar , placeholder : placeholder } < nl > + public native static JsPeerInfo create ( JsPeer peer , String title , String userName , String avatar , String placeholder , < nl > + boolean isVerified ) / * - { < nl > + return { peer : peer , title : title , userName : userName , avatar : avatar , placeholder : placeholder , isVerified : isVerified } ; < nl > } - * / ; < nl > < nl > protected JsPeerInfo ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java < nl > index e111f77 . . 78a0581 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java < nl > @ @ - 55 , 17 + 55 , 19 @ @ public class JsUser extends JavaScriptObject { < nl > Placeholders . getPlaceholder ( userVM . getId ( ) ) , < nl > userVM . isContact ( ) . get ( ) , userVM . isBot ( ) , < nl > presenceString , isOnline , userVM . getIsBlocked ( ) . get ( ) , convertedPhones , convertedEmails , < nl > - userVM . getTimeZone ( ) . get ( ) ) ; < nl > + userVM . getTimeZone ( ) . get ( ) , < nl > + userVM . getIsVerified ( ) . get ( ) ) ; < nl > } < nl > < nl > public static native JsUser create ( int id , String name , String nick , String about , < nl > String avatar , String bigAvatar , String placeholder , < nl > boolean isContact , boolean isBot , String presence , boolean isOnline , boolean isBlocked , JsArray < JsPhone > phones , < nl > JsArray < JsEmail > emails , < nl > - String timeZone ) / * - { < nl > + String timeZone , < nl > + boolean isVerified ) / * - { < nl > return { id : id , name : name , nick : nick , about : about , avatar : avatar , bigAvatar : bigAvatar , placeholder : placeholder , < nl > isContact : isContact , isBot : isBot , presence : presence , isOnline : isOnline , isBlocked : isBlocked , phones : phones , emails : emails , < nl > - timeZone : timeZone } ; < nl > + timeZone : timeZone , isVerified : isVerified } ; < nl > } - * / ; < nl > < nl > protected JsUser ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > index a8f631c . . 6bcea10 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > @ @ - 18 , 7 + 18 , 9 @ @ import im . actor . core . api . ApiBotCommand ; < nl > import im . actor . core . api . ApiContactRecord ; < nl > import im . actor . core . api . ApiContactType ; < nl > import im . actor . core . api . ApiFullUser ; < nl > + import im . actor . core . api . ApiInt32Value ; < nl > import im . actor . core . api . ApiMapValue ; < nl > + import im . actor . core . api . ApiMapValueItem ; < nl > import im . actor . core . api . ApiUser ; < nl > import im . actor . runtime . bser . BserCreator ; < nl > import im . actor . runtime . bser . BserValues ; < nl > @ @ - 73 , 6 + 75 , 8 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV < nl > @ Nullable < nl > @ Property ( " readonly , nonatomic " ) < nl > private String timeZone ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private boolean isVerified ; < nl > < nl > @ NotNull < nl > @ Property ( " readonly , nonatomic " ) < nl > @ @ - 164 , 6 + 168 , 10 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV < nl > return timeZone ; < nl > } < nl > < nl > + public boolean isVerified ( ) { < nl > + return isVerified ; < nl > + } < nl > + < nl > public User editName ( @ NotNull String name ) { < nl > ApiUser w = getWrapped ( ) ; < nl > ApiUser res = new ApiUser ( < nl > @ @ - 412 , 6 + 420 , 17 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV < nl > } < nl > } < nl > < nl > + if ( wrapped . getExt ( ) ! = null ) { < nl > + this . isVerified = true ; < nl > + for ( ApiMapValueItem i : wrapped . getExt ( ) . getItems ( ) ) { < nl > + if ( " is _ verified " . equals ( i . getKey ( ) ) ) { < nl > + if ( i . getValue ( ) instanceof ApiInt32Value ) { < nl > + this . isVerified = ( ( ApiInt32Value ) i . getValue ( ) ) . getValue ( ) > 0 ; < nl > + } < nl > + } < nl > + } < nl > + } < nl > + < nl > / / Extension < nl > < nl > if ( ext ! = null ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / UserVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / UserVM . java < nl > index 22051f0 . . e77b91c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / UserVM . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / UserVM . java < nl > @ @ - 69 , 6 + 69 , 8 @ @ public class UserVM extends BaseValueModel < User > { < nl > @ NotNull < nl > private BooleanValueModel isBlocked ; < nl > @ NotNull < nl > + private BooleanValueModel isVerified ; < nl > + @ NotNull < nl > private ValueModelUserPresence presence ; < nl > private CommonTimer presenceTimer ; < nl > < nl > @ @ - 105 , 6 + 107 , 7 @ @ public class UserVM extends BaseValueModel < User > { < nl > avatar = new AvatarValueModel ( " user . " + id + " . avatar " , user . getAvatar ( ) ) ; < nl > isContact = new BooleanValueModel ( " user . " + id + " . contact " , modules . getContactsModule ( ) . isUserContact ( id ) ) ; < nl > isBlocked = new BooleanValueModel ( " user . " + id + " . blocked " , user . isBlocked ( ) ) ; < nl > + isVerified = new BooleanValueModel ( " user . " + id + " . is _ verified " , user . isVerified ( ) ) ; < nl > timeZone = new StringValueModel ( " user . " + id + " . time _ zone " , user . getTimeZone ( ) ) ; < nl > presence = new ValueModelUserPresence ( " user . " + id + " . presence " , new UserPresence ( UserPresence . State . UNKNOWN ) ) ; < nl > phones = new ValueModelUserPhone ( " user . " + id + " . phones " , buildPhones ( user . getRecords ( ) ) ) ; < nl > @ @ - 133 , 6 + 136 , 7 @ @ public class UserVM extends BaseValueModel < User > { < nl > isChanged | = about . change ( rawObj . getAbout ( ) ) ; < nl > isChanged | = avatar . change ( rawObj . getAvatar ( ) ) ; < nl > isChanged | = isBlocked . change ( rawObj . isBlocked ( ) ) ; < nl > + isChanged | = isVerified . change ( rawObj . isVerified ( ) ) ; < nl > < nl > / / TODO : better changed checking ? < nl > isChanged | = phones . change ( buildPhones ( rawObj . getRecords ( ) ) ) ; < nl > @ @ - 265 , 6 + 269 , 17 @ @ public class UserVM extends BaseValueModel < User > { < nl > } < nl > < nl > / * * < nl > + * Get ValueModel of flag if user is verified < nl > + * < nl > + * @ return ValueModel of Boolean < nl > + * / < nl > + @ NotNull < nl > + @ ObjectiveCName ( " isBlockedModel " ) < nl > + public BooleanValueModel getIsVerified ( ) { < nl > + return isVerified ; < nl > + } < nl > + < nl > + / * * < nl > * Get ValueModel of User Presence < nl > * < nl > * @ return ValueModel of UserPresence
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index c09bbe9 . . 24e7f4e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 398 , 7 + 398 , 7 @ @ public class JsFacade implements Exportable { < nl > < nl > / / Chats < nl > < nl > - public void preInitChat ( JsPeer peer ) { < nl > + public void preInitChat ( JsPeer peer ) { < nl > messenger . onConversationPreLoad ( peer . convert ( ) ) ; < nl > } < nl > < nl > @ @ - 544 , 6 + 544 , 12 @ @ public class JsFacade implements Exportable { < nl > return JsPeer . create ( Peer . group ( gid ) ) ; < nl > } < nl > < nl > + / / Stickers < nl > + < nl > + public JsArray < JsSticker > getStickers ( ) { < nl > + return messenger . getStickers ( ) . get ( ) ; < nl > + } < nl > + < nl > / / Users < nl > < nl > public JsUser getUser ( int uid ) { < nl > @ @ - 706 , 10 + 712 , 6 @ @ public class JsFacade implements Exportable { < nl > messenger . sendMessageWithMentionsDetect ( peer . convert ( ) , text ) ; < nl > } < nl > < nl > - public void sendMarkdownMessage ( JsPeer peer , String text , String markdownText ) { < nl > - messenger . sendMessageWithMentionsDetect ( peer . convert ( ) , text , markdownText ) ; < nl > - } < nl > - < nl > public void sendFile ( JsPeer peer , JsFile file ) { < nl > String descriptor = provider . registerUploadFile ( file ) ; < nl > messenger . sendDocument ( peer . convert ( ) , < nl > @ @ - 729 , 6 + 731 , 10 @ @ public class JsFacade implements Exportable { < nl > messenger . sendAudio ( peer . convert ( ) , " voice . opus " , duration , descriptor ) ; < nl > } < nl > < nl > + public void sendSticker ( JsPeer peer , JsSticker sticker ) { < nl > + messenger . sendSticker ( peer . convert ( ) , sticker . getSticker ( ) ) ; < nl > + } < nl > + < nl > / / Drafts < nl > < nl > public void saveDraft ( JsPeer peer , String text ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > index aa887d7 . . 042066b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > @ @ - 27 , 6 + 27 , 7 @ @ import im . actor . core . js . entity . JsEventBusCallback ; < nl > import im . actor . core . js . entity . JsOnlineGroup ; < nl > import im . actor . core . js . entity . JsOnlineUser ; < nl > import im . actor . core . js . entity . JsSearchEntity ; < nl > + import im . actor . core . js . entity . JsSticker ; < nl > import im . actor . core . js . modules . JsFilesModule ; < nl > import im . actor . core . js . modules . JsBindingModule ; < nl > import im . actor . core . js . modules . JsBindedValue ; < nl > @ @ - 246 , 6 + 247 , 10 @ @ public class JsMessenger extends Messenger { < nl > return jsBindingModule . getDialogsGroupedList ( ) ; < nl > } < nl > < nl > + public JsBindedValue < JsArray < JsSticker > > getStickers ( ) { < nl > + return jsBindingModule . getStickers ( ) ; < nl > + } < nl > + < nl > public void broadcastEvent ( String tag , JavaScriptObject obj ) { < nl > jsBindingModule . broadcastEvent ( tag , obj ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsSticker . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsSticker . java < nl > new file mode 100644 < nl > index 0000000 . . ee4a104 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsSticker . java < nl > @ @ - 0 , 0 + 1 , 47 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . core . entity . Sticker ; < nl > + import im . actor . core . js . JsMessenger ; < nl > + import im . actor . runtime . crypto . Base64Utils ; < nl > + < nl > + public class JsSticker extends JavaScriptObject { < nl > + < nl > + public static JsSticker create ( Sticker sticker ) { < nl > + String content = Base64Utils . toBase64 ( sticker . toByteArray ( ) ) ; < nl > + String url = JsMessenger . getInstance ( ) . getFileUrl ( sticker . getImage256 ( ) ) ; < nl > + return create ( sticker . getId ( ) , url , content ) ; < nl > + } < nl > + < nl > + public static native JsSticker create ( int id , String url , String content ) / * - { < nl > + { id : id , url : url , content : content } ; < nl > + } - * / ; < nl > + < nl > + protected JsSticker ( ) { < nl > + < nl > + } < nl > + < nl > + public final native int getId ( ) / * - { < nl > + return this . id ; < nl > + } - * / ; < nl > + < nl > + public final native String getUrl ( ) / * - { < nl > + return this . url ; < nl > + } - * / ; < nl > + < nl > + public Sticker getSticker ( ) { < nl > + try { < nl > + return new Sticker ( Base64Utils . fromBase64 ( getContent ( ) ) ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + throw new RuntimeException ( e ) ; < nl > + } < nl > + } < nl > + < nl > + protected final native String getContent ( ) / * - { < nl > + return this . content ; < nl > + } - * / ; < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > index fd3fd26 . . 013c255 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > @ @ - 18 , 6 + 18 , 8 @ @ import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerType ; < nl > import im . actor . core . entity . SearchEntity ; < nl > + import im . actor . core . entity . Sticker ; < nl > + import im . actor . core . entity . StickerPack ; < nl > import im . actor . core . entity . content . DocumentContent ; < nl > import im . actor . core . entity . content . FileRemoteSource ; < nl > import im . actor . core . entity . content . StickerContent ; < nl > @ @ - 34 , 6 + 36 , 7 @ @ import im . actor . core . js . entity . JsMessage ; < nl > import im . actor . core . js . entity . JsOnlineGroup ; < nl > import im . actor . core . js . entity . JsOnlineUser ; < nl > import im . actor . core . js . entity . JsSearchEntity ; < nl > + import im . actor . core . js . entity . JsSticker ; < nl > import im . actor . core . js . entity . JsTyping ; < nl > import im . actor . core . js . entity . JsUser ; < nl > import im . actor . core . modules . AbsModule ; < nl > @ @ - 81 , 6 + 84 , 8 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > < nl > private ArrayList < JsEventBusCallback > eventBusCallbacks = new ArrayList < > ( ) ; < nl > < nl > + private JsBindedValue < JsArray < JsSticker > > stickers ; < nl > + < nl > public JsBindingModule ( JsMessenger messenger , JsFilesModule filesModule , Modules modules ) { < nl > super ( modules ) ; < nl > < nl > @ @ - 132 , 6 + 137 , 26 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > return dialogsGroupedList ; < nl > } < nl > < nl > + public JsBindedValue < JsArray < JsSticker > > getStickers ( ) { < nl > + if ( stickers = = null ) { < nl > + stickers = new JsBindedValue < > ( JsArray . createArray ( ) . cast ( ) ) ; < nl > + messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . subscribe ( new ValueChangedListener < ArrayList < StickerPack > > ( ) { < nl > + @ Override < nl > + public void onChanged ( ArrayList < StickerPack > val , Value < ArrayList < StickerPack > > valueModel ) { < nl > + JsArray < JsSticker > stickerJsArray = JsArray . createArray ( ) . cast ( ) ; < nl > + stickerJsArray . setLength ( 0 ) ; < nl > + for ( StickerPack pack : val ) { < nl > + for ( Sticker sticker : pack . getStickers ( ) ) { < nl > + stickerJsArray . push ( JsSticker . create ( sticker ) ) ; < nl > + } < nl > + } < nl > + stickers . changeValue ( stickerJsArray ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + return stickers ; < nl > + } < nl > + < nl > public JsBindedValue < String > getOnlineStatus ( ) { < nl > if ( onlineState = = null ) { < nl > < nl > @ @ - 510 , 6 + 535 , 21 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > g . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; < nl > } < nl > } < nl > + < nl > + / / < nl > + / / Stickers < nl > + / / < nl > + if ( stickers ! = null ) { < nl > + outer : < nl > + for ( StickerPack stickerPack : messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . get ( ) ) { < nl > + for ( Sticker s : stickerPack . getStickers ( ) ) { < nl > + if ( s . getImage256 ( ) ! = null & & fileId . contains ( s . getImage256 ( ) . getFileId ( ) ) ) { < nl > + messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . forceNotify ( ) ; < nl > + break outer ; < nl > + } < nl > + } < nl > + } < nl > + } < nl > } < nl > < nl > protected boolean checkAvatar ( Avatar avatar , HashSet < Long > fileIds ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Sticker . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Sticker . java < nl > index 7fe2c75 . . 3246aa3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Sticker . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Sticker . java < nl > @ @ - 58 , 6 + 58 , 11 @ @ public class Sticker extends WrapperEntity < ApiStickerDescriptor > { < nl > this . collectionAccessHash = collectionAccessHash ; < nl > } < nl > < nl > + public Sticker ( byte [ ] data ) throws IOException { < nl > + this ( ) ; < nl > + load ( data ) ; < nl > + } < nl > + < nl > private Sticker ( ) { < nl > super ( RECORD _ ID ) ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 index 081db97 . . 4c9573e 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 @ @ - 217 , 7 + 217 , 8 @ @ public class JsMessenger extends Messenger { 
 userVM . getName ( ) . get ( ) , 
 userVM . getNick ( ) . get ( ) , 
 getSmallAvatarUrl ( userVM . getAvatar ( ) . get ( ) ) , 
 - Placeholders . getPlaceholder ( peer . getPeerId ( ) ) ) ; 
 + Placeholders . getPlaceholder ( peer . getPeerId ( ) ) , 
 + userVM . getIsVerified ( ) . get ( ) ) ; 
 } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 GroupVM groupVM = getGroups ( ) . get ( peer . getPeerId ( ) ) ; 
 return JsPeerInfo . create ( 
 @ @ - 225 , 7 + 226 , 8 @ @ public class JsMessenger extends Messenger { 
 groupVM . getName ( ) . get ( ) , 
 null , 
 getSmallAvatarUrl ( groupVM . getAvatar ( ) . get ( ) ) , 
 - Placeholders . getPlaceholder ( peer . getPeerId ( ) ) ) ; 
 + Placeholders . getPlaceholder ( peer . getPeerId ( ) ) , 
 + false ) ; 
 } else { 
 throw new RuntimeException ( ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java 
 index 683c459 . . caf0e9a 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java 
 @ @ - 45 , 7 + 45 , 7 @ @ public class JsDialog extends JavaScriptObject { 
 src . getMessageType ( ) , src . getText ( ) , src . getRelatedUid ( ) ) ; 
 
 JsPeerInfo peerInfo = JsPeerInfo . create ( JsPeer . create ( src . getPeer ( ) ) , src . getDialogTitle ( ) , null , fileUrl , 
 - Placeholders . getPlaceholder ( src . getPeer ( ) . getPeerId ( ) ) ) ; 
 + Placeholders . getPlaceholder ( src . getPeer ( ) . getPeerId ( ) ) , false ) ; 
 
 String state = " unknown " ; 
 if ( messenger . myUid ( ) = = src . getSenderId ( ) ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerInfo . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerInfo . java 
 index 3810259 . . 370b947 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerInfo . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerInfo . java 
 @ @ - 8 , 8 + 8 , 9 @ @ import com . google . gwt . core . client . JavaScriptObject ; 
 
 public class JsPeerInfo extends JavaScriptObject { 
 
 - public native static JsPeerInfo create ( JsPeer peer , String title , String userName , String avatar , String placeholder ) / * - { 
 - return { peer : peer , title : title , userName : userName , avatar : avatar , placeholder : placeholder } 
 + public native static JsPeerInfo create ( JsPeer peer , String title , String userName , String avatar , String placeholder , 
 + boolean isVerified ) / * - { 
 + return { peer : peer , title : title , userName : userName , avatar : avatar , placeholder : placeholder , isVerified : isVerified } ; 
 } - * / ; 
 
 protected JsPeerInfo ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java 
 index e111f77 . . 78a0581 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsUser . java 
 @ @ - 55 , 17 + 55 , 19 @ @ public class JsUser extends JavaScriptObject { 
 Placeholders . getPlaceholder ( userVM . getId ( ) ) , 
 userVM . isContact ( ) . get ( ) , userVM . isBot ( ) , 
 presenceString , isOnline , userVM . getIsBlocked ( ) . get ( ) , convertedPhones , convertedEmails , 
 - userVM . getTimeZone ( ) . get ( ) ) ; 
 + userVM . getTimeZone ( ) . get ( ) , 
 + userVM . getIsVerified ( ) . get ( ) ) ; 
 } 
 
 public static native JsUser create ( int id , String name , String nick , String about , 
 String avatar , String bigAvatar , String placeholder , 
 boolean isContact , boolean isBot , String presence , boolean isOnline , boolean isBlocked , JsArray < JsPhone > phones , 
 JsArray < JsEmail > emails , 
 - String timeZone ) / * - { 
 + String timeZone , 
 + boolean isVerified ) / * - { 
 return { id : id , name : name , nick : nick , about : about , avatar : avatar , bigAvatar : bigAvatar , placeholder : placeholder , 
 isContact : isContact , isBot : isBot , presence : presence , isOnline : isOnline , isBlocked : isBlocked , phones : phones , emails : emails , 
 - timeZone : timeZone } ; 
 + timeZone : timeZone , isVerified : isVerified } ; 
 } - * / ; 
 
 protected JsUser ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 index a8f631c . . 6bcea10 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 @ @ - 18 , 7 + 18 , 9 @ @ import im . actor . core . api . ApiBotCommand ; 
 import im . actor . core . api . ApiContactRecord ; 
 import im . actor . core . api . ApiContactType ; 
 import im . actor . core . api . ApiFullUser ; 
 + import im . actor . core . api . ApiInt32Value ; 
 import im . actor . core . api . ApiMapValue ; 
 + import im . actor . core . api . ApiMapValueItem ; 
 import im . actor . core . api . ApiUser ; 
 import im . actor . runtime . bser . BserCreator ; 
 import im . actor . runtime . bser . BserValues ; 
 @ @ - 73 , 6 + 75 , 8 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV 
 @ Nullable 
 @ Property ( " readonly , nonatomic " ) 
 private String timeZone ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private boolean isVerified ; 
 
 @ NotNull 
 @ Property ( " readonly , nonatomic " ) 
 @ @ - 164 , 6 + 168 , 10 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV 
 return timeZone ; 
 } 
 
 + public boolean isVerified ( ) { 
 + return isVerified ; 
 + } 
 + 
 public User editName ( @ NotNull String name ) { 
 ApiUser w = getWrapped ( ) ; 
 ApiUser res = new ApiUser ( 
 @ @ - 412 , 6 + 420 , 17 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV 
 } 
 } 
 
 + if ( wrapped . getExt ( ) ! = null ) { 
 + this . isVerified = true ; 
 + for ( ApiMapValueItem i : wrapped . getExt ( ) . getItems ( ) ) { 
 + if ( " is _ verified " . equals ( i . getKey ( ) ) ) { 
 + if ( i . getValue ( ) instanceof ApiInt32Value ) { 
 + this . isVerified = ( ( ApiInt32Value ) i . getValue ( ) ) . getValue ( ) > 0 ; 
 + } 
 + } 
 + } 
 + } 
 + 
 / / Extension 
 
 if ( ext ! = null ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / UserVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / UserVM . java 
 index 22051f0 . . e77b91c 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / UserVM . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / UserVM . java 
 @ @ - 69 , 6 + 69 , 8 @ @ public class UserVM extends BaseValueModel < User > { 
 @ NotNull 
 private BooleanValueModel isBlocked ; 
 @ NotNull 
 + private BooleanValueModel isVerified ; 
 + @ NotNull 
 private ValueModelUserPresence presence ; 
 private CommonTimer presenceTimer ; 
 
 @ @ - 105 , 6 + 107 , 7 @ @ public class UserVM extends BaseValueModel < User > { 
 avatar = new AvatarValueModel ( " user . " + id + " . avatar " , user . getAvatar ( ) ) ; 
 isContact = new BooleanValueModel ( " user . " + id + " . contact " , modules . getContactsModule ( ) . isUserContact ( id ) ) ; 
 isBlocked = new BooleanValueModel ( " user . " + id + " . blocked " , user . isBlocked ( ) ) ; 
 + isVerified = new BooleanValueModel ( " user . " + id + " . is _ verified " , user . isVerified ( ) ) ; 
 timeZone = new StringValueModel ( " user . " + id + " . time _ zone " , user . getTimeZone ( ) ) ; 
 presence = new ValueModelUserPresence ( " user . " + id + " . presence " , new UserPresence ( UserPresence . State . UNKNOWN ) ) ; 
 phones = new ValueModelUserPhone ( " user . " + id + " . phones " , buildPhones ( user . getRecords ( ) ) ) ; 
 @ @ - 133 , 6 + 136 , 7 @ @ public class UserVM extends BaseValueModel < User > { 
 isChanged | = about . change ( rawObj . getAbout ( ) ) ; 
 isChanged | = avatar . change ( rawObj . getAvatar ( ) ) ; 
 isChanged | = isBlocked . change ( rawObj . isBlocked ( ) ) ; 
 + isChanged | = isVerified . change ( rawObj . isVerified ( ) ) ; 
 
 / / TODO : better changed checking ? 
 isChanged | = phones . change ( buildPhones ( rawObj . getRecords ( ) ) ) ; 
 @ @ - 265 , 6 + 269 , 17 @ @ public class UserVM extends BaseValueModel < User > { 
 } 
 
 / * * 
 + * Get ValueModel of flag if user is verified 
 + * 
 + * @ return ValueModel of Boolean 
 + * / 
 + @ NotNull 
 + @ ObjectiveCName ( " isBlockedModel " ) 
 + public BooleanValueModel getIsVerified ( ) { 
 + return isVerified ; 
 + } 
 + 
 + / * * 
 * Get ValueModel of User Presence 
 * 
 * @ return ValueModel of UserPresence

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index c09bbe9 . . 24e7f4e 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 398 , 7 + 398 , 7 @ @ public class JsFacade implements Exportable { 
 
 / / Chats 
 
 - public void preInitChat ( JsPeer peer ) { 
 + public void preInitChat ( JsPeer peer ) { 
 messenger . onConversationPreLoad ( peer . convert ( ) ) ; 
 } 
 
 @ @ - 544 , 6 + 544 , 12 @ @ public class JsFacade implements Exportable { 
 return JsPeer . create ( Peer . group ( gid ) ) ; 
 } 
 
 + / / Stickers 
 + 
 + public JsArray < JsSticker > getStickers ( ) { 
 + return messenger . getStickers ( ) . get ( ) ; 
 + } 
 + 
 / / Users 
 
 public JsUser getUser ( int uid ) { 
 @ @ - 706 , 10 + 712 , 6 @ @ public class JsFacade implements Exportable { 
 messenger . sendMessageWithMentionsDetect ( peer . convert ( ) , text ) ; 
 } 
 
 - public void sendMarkdownMessage ( JsPeer peer , String text , String markdownText ) { 
 - messenger . sendMessageWithMentionsDetect ( peer . convert ( ) , text , markdownText ) ; 
 - } 
 - 
 public void sendFile ( JsPeer peer , JsFile file ) { 
 String descriptor = provider . registerUploadFile ( file ) ; 
 messenger . sendDocument ( peer . convert ( ) , 
 @ @ - 729 , 6 + 731 , 10 @ @ public class JsFacade implements Exportable { 
 messenger . sendAudio ( peer . convert ( ) , " voice . opus " , duration , descriptor ) ; 
 } 
 
 + public void sendSticker ( JsPeer peer , JsSticker sticker ) { 
 + messenger . sendSticker ( peer . convert ( ) , sticker . getSticker ( ) ) ; 
 + } 
 + 
 / / Drafts 
 
 public void saveDraft ( JsPeer peer , String text ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 index aa887d7 . . 042066b 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import im . actor . core . js . entity . JsEventBusCallback ; 
 import im . actor . core . js . entity . JsOnlineGroup ; 
 import im . actor . core . js . entity . JsOnlineUser ; 
 import im . actor . core . js . entity . JsSearchEntity ; 
 + import im . actor . core . js . entity . JsSticker ; 
 import im . actor . core . js . modules . JsFilesModule ; 
 import im . actor . core . js . modules . JsBindingModule ; 
 import im . actor . core . js . modules . JsBindedValue ; 
 @ @ - 246 , 6 + 247 , 10 @ @ public class JsMessenger extends Messenger { 
 return jsBindingModule . getDialogsGroupedList ( ) ; 
 } 
 
 + public JsBindedValue < JsArray < JsSticker > > getStickers ( ) { 
 + return jsBindingModule . getStickers ( ) ; 
 + } 
 + 
 public void broadcastEvent ( String tag , JavaScriptObject obj ) { 
 jsBindingModule . broadcastEvent ( tag , obj ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsSticker . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsSticker . java 
 new file mode 100644 
 index 0000000 . . ee4a104 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsSticker . java 
 @ @ - 0 , 0 + 1 , 47 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . core . entity . Sticker ; 
 + import im . actor . core . js . JsMessenger ; 
 + import im . actor . runtime . crypto . Base64Utils ; 
 + 
 + public class JsSticker extends JavaScriptObject { 
 + 
 + public static JsSticker create ( Sticker sticker ) { 
 + String content = Base64Utils . toBase64 ( sticker . toByteArray ( ) ) ; 
 + String url = JsMessenger . getInstance ( ) . getFileUrl ( sticker . getImage256 ( ) ) ; 
 + return create ( sticker . getId ( ) , url , content ) ; 
 + } 
 + 
 + public static native JsSticker create ( int id , String url , String content ) / * - { 
 + { id : id , url : url , content : content } ; 
 + } - * / ; 
 + 
 + protected JsSticker ( ) { 
 + 
 + } 
 + 
 + public final native int getId ( ) / * - { 
 + return this . id ; 
 + } - * / ; 
 + 
 + public final native String getUrl ( ) / * - { 
 + return this . url ; 
 + } - * / ; 
 + 
 + public Sticker getSticker ( ) { 
 + try { 
 + return new Sticker ( Base64Utils . fromBase64 ( getContent ( ) ) ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + protected final native String getContent ( ) / * - { 
 + return this . content ; 
 + } - * / ; 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 index fd3fd26 . . 013c255 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 @ @ - 18 , 6 + 18 , 8 @ @ import im . actor . core . entity . Message ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerType ; 
 import im . actor . core . entity . SearchEntity ; 
 + import im . actor . core . entity . Sticker ; 
 + import im . actor . core . entity . StickerPack ; 
 import im . actor . core . entity . content . DocumentContent ; 
 import im . actor . core . entity . content . FileRemoteSource ; 
 import im . actor . core . entity . content . StickerContent ; 
 @ @ - 34 , 6 + 36 , 7 @ @ import im . actor . core . js . entity . JsMessage ; 
 import im . actor . core . js . entity . JsOnlineGroup ; 
 import im . actor . core . js . entity . JsOnlineUser ; 
 import im . actor . core . js . entity . JsSearchEntity ; 
 + import im . actor . core . js . entity . JsSticker ; 
 import im . actor . core . js . entity . JsTyping ; 
 import im . actor . core . js . entity . JsUser ; 
 import im . actor . core . modules . AbsModule ; 
 @ @ - 81 , 6 + 84 , 8 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 
 private ArrayList < JsEventBusCallback > eventBusCallbacks = new ArrayList < > ( ) ; 
 
 + private JsBindedValue < JsArray < JsSticker > > stickers ; 
 + 
 public JsBindingModule ( JsMessenger messenger , JsFilesModule filesModule , Modules modules ) { 
 super ( modules ) ; 
 
 @ @ - 132 , 6 + 137 , 26 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 return dialogsGroupedList ; 
 } 
 
 + public JsBindedValue < JsArray < JsSticker > > getStickers ( ) { 
 + if ( stickers = = null ) { 
 + stickers = new JsBindedValue < > ( JsArray . createArray ( ) . cast ( ) ) ; 
 + messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . subscribe ( new ValueChangedListener < ArrayList < StickerPack > > ( ) { 
 + @ Override 
 + public void onChanged ( ArrayList < StickerPack > val , Value < ArrayList < StickerPack > > valueModel ) { 
 + JsArray < JsSticker > stickerJsArray = JsArray . createArray ( ) . cast ( ) ; 
 + stickerJsArray . setLength ( 0 ) ; 
 + for ( StickerPack pack : val ) { 
 + for ( Sticker sticker : pack . getStickers ( ) ) { 
 + stickerJsArray . push ( JsSticker . create ( sticker ) ) ; 
 + } 
 + } 
 + stickers . changeValue ( stickerJsArray ) ; 
 + } 
 + } ) ; 
 + } 
 + return stickers ; 
 + } 
 + 
 public JsBindedValue < String > getOnlineStatus ( ) { 
 if ( onlineState = = null ) { 
 
 @ @ - 510 , 6 + 535 , 21 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 g . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; 
 } 
 } 
 + 
 + / / 
 + / / Stickers 
 + / / 
 + if ( stickers ! = null ) { 
 + outer : 
 + for ( StickerPack stickerPack : messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . get ( ) ) { 
 + for ( Sticker s : stickerPack . getStickers ( ) ) { 
 + if ( s . getImage256 ( ) ! = null & & fileId . contains ( s . getImage256 ( ) . getFileId ( ) ) ) { 
 + messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . forceNotify ( ) ; 
 + break outer ; 
 + } 
 + } 
 + } 
 + } 
 } 
 
 protected boolean checkAvatar ( Avatar avatar , HashSet < Long > fileIds ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Sticker . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Sticker . java 
 index 7fe2c75 . . 3246aa3 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Sticker . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Sticker . java 
 @ @ - 58 , 6 + 58 , 11 @ @ public class Sticker extends WrapperEntity < ApiStickerDescriptor > { 
 this . collectionAccessHash = collectionAccessHash ; 
 } 
 
 + public Sticker ( byte [ ] data ) throws IOException { 
 + this ( ) ; 
 + load ( data ) ; 
 + } 
 + 
 private Sticker ( ) { 
 super ( RECORD _ ID ) ; 
 }
