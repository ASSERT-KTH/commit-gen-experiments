BLEU SCORE: 0.12759307794697136

TEST MSG: feat ( core ) : Implement stashing in actors
GENERATED MSG: feat ( js ) : Implementing overlays support in JsDisplayList

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift < nl > index c22c65a . . a655ab2 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift < nl > @ @ - 31 , 8 + 31 , 8 @ @ import Foundation < nl > " \ " BYTES \ " BLOB NOT NULL , " + < nl > " PRIMARY KEY ( \ " ID \ " ) ) ; " < nl > self . queryItem = " SELECT \ " BYTES \ " FROM " + tableName + " WHERE \ " ID \ " = ? ; " < nl > - self . queryItems = " SELECT ( \ " ID \ " , \ " BYTES \ " ) FROM " + tableName + " WHERE \ " ID \ " in ? ; " < nl > - self . queryAll = " SELECT ( \ " ID \ " , \ " BYTES \ " ) FROM " + tableName + " ; " < nl > + self . queryItems = " SELECT \ " ID \ " , \ " BYTES \ " FROM " + tableName + " WHERE \ " ID \ " in ? ; " < nl > + self . queryAll = " SELECT \ " ID \ " , \ " BYTES \ " FROM " + tableName + " ; " < nl > self . queryAdd = " REPLACE INTO " + tableName + " ( \ " ID \ " , \ " BYTES \ " ) VALUES ( ? , ? ) ; " < nl > self . queryDelete = " DELETE FROM " + tableName + " WHERE \ " ID \ " = ? ; " < nl > self . queryDeleteAll = " DELETE FROM " + tableName + " ; " < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java < nl > index 48ac1e8 . . 98afed9 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java < nl > @ @ - 27 , 6 + 27 , 9 @ @ import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > import im . actor . core . network . parser . Update ; < nl > import im . actor . runtime . Log ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . actors . Props ; < nl > < nl > public class SequenceActor extends ModuleActor { < nl > < nl > @ @ - 50 , 6 + 53 , 8 @ @ public class SequenceActor extends ModuleActor { < nl > private UpdateProcessor processor ; < nl > private UpdatesParser parser ; < nl > < nl > + private ActorRef sequenceHandler ; < nl > + < nl > public SequenceActor ( ModuleContext modules ) { < nl > super ( modules ) ; < nl > } < nl > @ @ - 60 , 29 + 65 , 52 @ @ public class SequenceActor extends ModuleActor { < nl > state = preferences ( ) . getBytes ( KEY _ STATE ) ; < nl > parser = new UpdatesParser ( ) ; < nl > processor = new UpdateProcessor ( context ( ) ) ; < nl > + sequenceHandler = system ( ) . actorOf ( Props . create ( SequenceHandlerActor . class , new ActorCreator < SequenceHandlerActor > ( ) { < nl > + @ Override < nl > + public SequenceHandlerActor create ( ) { < nl > + return new SequenceHandlerActor ( processor , context ( ) ) ; < nl > + } < nl > + } ) , getPath ( ) + " / handler " ) ; < nl > < nl > self ( ) . send ( new Invalidate ( ) ) ; < nl > } < nl > < nl > - @ Override < nl > - public void onReceive ( Object message ) { < nl > - if ( message instanceof Invalidate | | message instanceof SeqUpdateTooLong | | < nl > - message instanceof ForceInvalidate ) { < nl > - invalidate ( ) ; < nl > - } else if ( message instanceof SeqUpdate ) { < nl > - onUpdateReceived ( message ) ; < nl > - } else if ( message instanceof FatSeqUpdate ) { < nl > - onUpdateReceived ( message ) ; < nl > - } else if ( message instanceof WeakUpdate ) { < nl > - onUpdateReceived ( message ) ; < nl > - } else if ( message instanceof InternalUpdate ) { < nl > - onUpdateReceived ( message ) ; < nl > - } else if ( message instanceof ExecuteAfter ) { < nl > - onUpdateReceived ( message ) ; < nl > - } else if ( message instanceof PushSeq ) { < nl > - onUpdateReceived ( message ) ; < nl > + private void onWeakUpdateReceived ( WeakUpdate weakUpdate ) { < nl > + Update update ; < nl > + try { < nl > + update = parser . read ( weakUpdate . getUpdateHeader ( ) , weakUpdate . getUpdate ( ) ) ; < nl > + Log . d ( TAG , " Weak Update : " + update ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + Log . w ( TAG , " Unable to parse update : ignoring " ) ; < nl > + return ; < nl > + } < nl > + < nl > + Log . d ( TAG , " Starting stashing " ) ; < nl > + beginStash ( null ) ; < nl > + Log . d ( TAG , " Processing weak update " ) ; < nl > + sequenceHandler . send ( new SequenceHandlerActor . WeakUpdate ( update , weakUpdate . getDate ( ) ) , self ( ) ) ; < nl > + } < nl > + < nl > + private void onInternalUpdateReceived ( InternalUpdate internalUpdate ) { < nl > + Log . d ( TAG , " Received internal update " ) ; < nl > + processor . processInternalUpdate ( internalUpdate ) ; < nl > + } < nl > + < nl > + private void onExecuteAfterReceived ( ExecuteAfter after ) { < nl > + if ( after . getSeq ( ) < = this . seq ) { < nl > + after . getRunnable ( ) . run ( ) ; < nl > } else { < nl > - drop ( message ) ; < nl > + pendingRunnables . add ( after ) ; < nl > + } < nl > + } < nl > + < nl > + private void onPushSeqReceived ( int seq ) { < nl > + if ( seq < = this . seq ) { < nl > + Log . d ( TAG , " Ignored PushSeq { seq : " + seq + " } " ) ; < nl > + } else { < nl > + Log . w ( TAG , " External Out of sequence : starting timer for invalidation " ) ; < nl > + self ( ) . sendOnce ( new ForceInvalidate ( ) , INVALIDATE _ GAP ) ; < nl > } < nl > } < nl > < nl > @ @ - 102 , 38 + 130 , 6 @ @ public class SequenceActor extends ModuleActor { < nl > state = ( ( FatSeqUpdate ) u ) . getState ( ) ; < nl > type = ( ( FatSeqUpdate ) u ) . getUpdateHeader ( ) ; < nl > body = ( ( FatSeqUpdate ) u ) . getUpdate ( ) ; < nl > - } else if ( u instanceof WeakUpdate ) { < nl > - WeakUpdate w = ( WeakUpdate ) u ; < nl > - try { < nl > - Update update = parser . read ( w . getUpdateHeader ( ) , w . getUpdate ( ) ) ; < nl > - processor . processWeakUpdate ( update , w . getDate ( ) ) ; < nl > - Log . d ( TAG , " Weak Update : " + update ) ; < nl > - } catch ( IOException e ) { < nl > - e . printStackTrace ( ) ; < nl > - Log . w ( TAG , " Unable to parse update : ignoring " ) ; < nl > - } < nl > - return ; < nl > - } else if ( u instanceof InternalUpdate ) { < nl > - Log . d ( TAG , " Received internal update " ) ; < nl > - processor . processInternalUpdate ( ( InternalUpdate ) u ) ; < nl > - return ; < nl > - } else if ( u instanceof ExecuteAfter ) { < nl > - ExecuteAfter after = ( ExecuteAfter ) u ; < nl > - if ( after . getSeq ( ) < = this . seq ) { < nl > - after . getRunnable ( ) . run ( ) ; < nl > - } else { < nl > - pendingRunnables . add ( after ) ; < nl > - } < nl > - return ; < nl > - } else if ( u instanceof PushSeq ) { < nl > - PushSeq pushSeq = ( PushSeq ) u ; < nl > - if ( pushSeq . seq < = this . seq ) { < nl > - Log . d ( TAG , " Ignored PushSeq { seq : " + pushSeq . seq + " } " ) ; < nl > - } else { < nl > - Log . w ( TAG , " External Out of sequence : starting timer for invalidation " ) ; < nl > - self ( ) . sendOnce ( new ForceInvalidate ( ) , INVALIDATE _ GAP ) ; < nl > - } < nl > - return ; < nl > } else { < nl > return ; < nl > } < nl > @ @ - 151 , 7 + 147 , 7 @ @ public class SequenceActor extends ModuleActor { < nl > return ; < nl > } < nl > < nl > - if ( ! isValidSeq ( seq ) ) { < nl > + if ( seq ! = this . seq + 1 ) { < nl > further . put ( seq , u ) ; < nl > < nl > if ( seq - this . seq > INVALIDATE _ MAX _ SEC _ HOLE ) { < nl > @ @ - 217 , 10 + 213 , 6 @ @ public class SequenceActor extends ModuleActor { < nl > self ( ) . sendOnce ( new ForceInvalidate ( ) , 24 * 60 * 60 * 1000L ) ; < nl > } < nl > < nl > - private boolean isValidSeq ( final int seq ) { < nl > - return this . seq < = 0 | | seq = = this . seq + 1 ; < nl > - } < nl > - < nl > private void invalidate ( ) { < nl > if ( ! isValidated ) { < nl > return ; < nl > @ @ - 371 , 6 + 363 , 31 @ @ public class SequenceActor extends ModuleActor { < nl > } < nl > } < nl > < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof Invalidate | | < nl > + message instanceof SeqUpdateTooLong | | < nl > + message instanceof ForceInvalidate ) { < nl > + invalidate ( ) ; < nl > + } else if ( message instanceof SeqUpdate | | < nl > + message instanceof FatSeqUpdate ) { < nl > + onUpdateReceived ( message ) ; < nl > + } else if ( message instanceof WeakUpdate ) { < nl > + onWeakUpdateReceived ( ( WeakUpdate ) message ) ; < nl > + } else if ( message instanceof InternalUpdate ) { < nl > + onInternalUpdateReceived ( ( InternalUpdate ) message ) ; < nl > + } else if ( message instanceof ExecuteAfter ) { < nl > + onExecuteAfterReceived ( ( ExecuteAfter ) message ) ; < nl > + } else if ( message instanceof PushSeq ) { < nl > + onPushSeqReceived ( ( ( PushSeq ) message ) . seq ) ; < nl > + } else if ( message instanceof UpdateProcessed ) { < nl > + Log . d ( TAG , " Ending stashing " ) ; < nl > + endStash ( ) ; < nl > + } else { < nl > + drop ( message ) ; < nl > + } < nl > + } < nl > + < nl > public static class ForceInvalidate { < nl > < nl > } < nl > @ @ - 386 , 4 + 403 , 8 @ @ public class SequenceActor extends ModuleActor { < nl > this . seq = seq ; < nl > } < nl > } < nl > + < nl > + public static class UpdateProcessed { < nl > + < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceHandlerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceHandlerActor . java < nl > new file mode 100644 < nl > index 0000000 . . 831d631 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceHandlerActor . java < nl > @ @ - 0 , 0 + 1 , 57 @ @ < nl > + package im . actor . core . modules . updates ; < nl > + < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . utils . ModuleActor ; < nl > + import im . actor . core . network . parser . Update ; < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . actors . messages . StashIgnore ; < nl > + < nl > + public class SequenceHandlerActor extends ModuleActor { < nl > + < nl > + private static final String TAG = " SequenceHandlerActor " ; < nl > + < nl > + private UpdateProcessor processor ; < nl > + < nl > + public SequenceHandlerActor ( UpdateProcessor processor , ModuleContext context ) { < nl > + super ( context ) ; < nl > + < nl > + this . processor = processor ; < nl > + } < nl > + < nl > + private void onWeakUpdateReceived ( Update update , long date ) { < nl > + Log . d ( TAG , " Processing weak update . . . " ) ; < nl > + this . processor . processWeakUpdate ( update , date ) ; < nl > + < nl > + Log . d ( TAG , " Unlocking sequence in 1500 ms " ) ; < nl > + sender ( ) . send ( new StashIgnore ( new SequenceActor . UpdateProcessed ( ) ) , 1500 ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof WeakUpdate ) { < nl > + onWeakUpdateReceived ( ( ( WeakUpdate ) message ) . getUpdate ( ) , < nl > + ( ( WeakUpdate ) message ) . getDate ( ) ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > + } < nl > + } < nl > + < nl > + public static class WeakUpdate { < nl > + < nl > + private Update update ; < nl > + private long date ; < nl > + < nl > + public WeakUpdate ( Update update , long date ) { < nl > + this . update = update ; < nl > + this . date = date ; < nl > + } < nl > + < nl > + public long getDate ( ) { < nl > + return date ; < nl > + } < nl > + < nl > + public Update getUpdate ( ) { < nl > + return update ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Actor . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Actor . java < nl > index 4b50a1b . . 9bf41cd 100755 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Actor . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Actor . java < nl > @ @ - 4 , 8 + 4 , 13 @ @ < nl > < nl > package im . actor . runtime . actors ; < nl > < nl > + import java . util . ArrayList ; < nl > + < nl > import im . actor . runtime . actors . mailbox . Mailbox ; < nl > import im . actor . runtime . actors . messages . DeadLetter ; < nl > + import im . actor . runtime . actors . messages . StashBegin ; < nl > + import im . actor . runtime . actors . messages . StashEnd ; < nl > + import im . actor . runtime . actors . messages . StashIgnore ; < nl > < nl > / * * < nl > * Actor object < nl > @ @ - 17 , 6 + 22 , 10 @ @ public class Actor { < nl > private ActorContext context ; < nl > private Mailbox mailbox ; < nl > < nl > + private ArrayList < StashedMessage > stashed = new ArrayList < StashedMessage > ( ) ; < nl > + private Runnable beforeUnstash = null ; < nl > + private boolean isStashing = false ; < nl > + < nl > public Actor ( ) { < nl > < nl > } < nl > @ @ - 36 , 6 + 45 , 65 @ @ public class Actor { < nl > } < nl > < nl > / * * < nl > + * < p > INTERNAL API < / p > < nl > + * Handling of a message in Actor < nl > + * < nl > + * @ param message message < nl > + * / < nl > + public final void handleMessage ( Object message , ActorRef sender ) { < nl > + if ( message instanceof StashEnd ) { < nl > + endStash ( ) ; < nl > + } else if ( message instanceof StashBegin ) { < nl > + beginStash ( null ) ; < nl > + } else if ( message instanceof StashIgnore ) { < nl > + intHandle ( ( ( StashIgnore ) message ) . getMessage ( ) , sender ) ; < nl > + } else { < nl > + / / Stashing message < nl > + if ( isStashing ) { < nl > + stashed . add ( new StashedMessage ( message , sender ) ) ; < nl > + return ; < nl > + } < nl > + intHandle ( message , sender ) ; < nl > + } < nl > + } < nl > + < nl > + public void beginStash ( Runnable beforeUnstash ) { < nl > + if ( isStashing ) { < nl > + throw new RuntimeException ( " Actor is already stashed " ) ; < nl > + } < nl > + this . beforeUnstash = beforeUnstash ; < nl > + isStashing = true ; < nl > + } < nl > + < nl > + public void endStash ( ) { < nl > + if ( ! isStashing ) { < nl > + throw new RuntimeException ( " Actor is not stashed " ) ; < nl > + } < nl > + isStashing = false ; < nl > + < nl > + if ( beforeUnstash ! = null ) { < nl > + beforeUnstash . run ( ) ; < nl > + beforeUnstash = null ; < nl > + } < nl > + < nl > + StashedMessage [ ] msgs = stashed . toArray ( new StashedMessage [ stashed . size ( ) ] ) ; < nl > + stashed . clear ( ) ; < nl > + for ( int i = msgs . length - 1 ; i > = 0 ; i - - ) { < nl > + self ( ) . sendFirst ( msgs [ i ] . getMessage ( ) , msgs [ i ] . getSender ( ) ) ; < nl > + } < nl > + } < nl > + < nl > + private void intHandle ( Object message , ActorRef sender ) { < nl > + context . setSender ( sender ) ; < nl > + < nl > + if ( message instanceof Runnable ) { < nl > + ( ( Runnable ) message ) . run ( ) ; < nl > + return ; < nl > + } < nl > + onReceive ( message ) ; < nl > + } < nl > + < nl > + / * * < nl > * Actor System < nl > * < nl > * @ return Actor System < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorContext . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorContext . java < nl > index 63cf556 . . 35e8806 100755 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorContext . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorContext . java < nl > @ @ - 50 , 6 + 50 , 15 @ @ public class ActorContext { < nl > } < nl > < nl > / * * < nl > + * Setting sender < nl > + * < nl > + * @ param ref sender ' s ActorRef < nl > + * / < nl > + public void setSender ( ActorRef ref ) { < nl > + actorScope . setSender ( ref ) ; < nl > + } < nl > + < nl > + / * * < nl > * Stopping actor < nl > * / < nl > public void stopSelf ( ) { < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorRef . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorRef . java < nl > index 0d8b3d7 . . dda1df2 100755 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorRef . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorRef . java < nl > @ @ - 81 , 6 + 81 , 25 @ @ public class ActorRef { < nl > } < nl > < nl > / * * < nl > + * Sending message before all other messages < nl > + * < nl > + * @ param message message < nl > + * @ param sender sender < nl > + * / < nl > + public void sendFirst ( Object message , ActorRef sender ) { < nl > + dispatcher . sendMessageFirst ( endpoint , message , sender ) ; < nl > + } < nl > + < nl > + / * * < nl > + * Sending message before all other messages < nl > + * < nl > + * @ param message message < nl > + * / < nl > + public void sendFirst ( Object message ) { < nl > + dispatcher . sendMessageFirst ( endpoint , message , null ) ; < nl > + } < nl > + < nl > + / * * < nl > * Send message once < nl > * < nl > * @ param message message < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / StashedMessage . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / StashedMessage . java < nl > new file mode 100644 < nl > index 0000000 . . 19abccc < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / StashedMessage . java < nl > @ @ - 0 , 0 + 1 , 20 @ @ < nl > + package im . actor . runtime . actors ; < nl > + < nl > + public class StashedMessage { < nl > + < nl > + private Object message ; < nl > + private ActorRef sender ; < nl > + < nl > + public StashedMessage ( Object message , ActorRef sender ) { < nl > + this . message = message ; < nl > + this . sender = sender ; < nl > + } < nl > + < nl > + public Object getMessage ( ) { < nl > + return message ; < nl > + } < nl > + < nl > + public ActorRef getSender ( ) { < nl > + return sender ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / ActorDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / ActorDispatcher . java < nl > index bc4e625 . . a370094 100755 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / ActorDispatcher . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / ActorDispatcher . java < nl > @ @ - 114 , 6 + 114 , 12 @ @ public abstract class ActorDispatcher { < nl > } < nl > } < nl > < nl > + public final void sendMessageFirst ( ActorEndpoint endpoint , Object message , ActorRef sender ) { < nl > + if ( ! isDisconnected ( endpoint , message , sender ) ) { < nl > + endpoint . getMailbox ( ) . scheduleFirst ( new Envelope ( message , endpoint . getScope ( ) , endpoint . getMailbox ( ) , sender ) ) ; < nl > + } < nl > + } < nl > + < nl > public final void sendMessageOnceAtTime ( ActorEndpoint endpoint , Object message , long time , ActorRef sender ) { < nl > if ( ! isDisconnected ( endpoint , message , sender ) ) { < nl > endpoint . getMailbox ( ) . scheduleOnce ( new Envelope ( message , endpoint . getScope ( ) , endpoint . getMailbox ( ) , sender ) , time ) ; < nl > @ @ - 194 , 12 + 200 , 7 @ @ public abstract class ActorDispatcher { < nl > dispatcher . getQueue ( ) . disconnectMailbox ( scope . getMailbox ( ) ) ; < nl > } < nl > } else { < nl > - scope . setSender ( envelope . getSender ( ) ) ; < nl > - if ( envelope . getMessage ( ) instanceof Runnable ) { < nl > - ( ( Runnable ) envelope . getMessage ( ) ) . run ( ) ; < nl > - return ; < nl > - } < nl > - scope . getActor ( ) . onReceive ( envelope . getMessage ( ) ) ; < nl > + scope . getActor ( ) . handleMessage ( envelope . getMessage ( ) , envelope . getSender ( ) ) ; < nl > } < nl > } catch ( Exception e ) { < nl > if ( actorSystem . getTraceInterface ( ) ! = null ) { < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / Mailbox . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / Mailbox . java < nl > index e0a0777 . . 4d7e300 100755 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / Mailbox . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / Mailbox . java < nl > @ @ - 45 , 6 + 45 , 19 @ @ public class Mailbox { < nl > } < nl > < nl > / * * < nl > + * Send envelope first < nl > + * < nl > + * @ param envelope envelope < nl > + * / < nl > + public void scheduleFirst ( Envelope envelope ) { < nl > + if ( envelope . getMailbox ( ) ! = this ) { < nl > + throw new RuntimeException ( " envelope . mailbox ! = this mailbox " ) ; < nl > + } < nl > + < nl > + envelopes . putEnvelopeFirst ( envelope ) ; < nl > + } < nl > + < nl > + / * * < nl > * Send envelope once at time < nl > * < nl > * @ param envelope envelope < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / collections / EnvelopeCollection . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / collections / EnvelopeCollection . java < nl > index 364c70e . . 113a523 100755 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / collections / EnvelopeCollection . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / collections / EnvelopeCollection . java < nl > @ @ - 60 , 6 + 60 , 25 @ @ public class EnvelopeCollection { < nl > return key ; < nl > } < nl > < nl > + public long putEnvelopeFirst ( Envelope envelope ) { < nl > + < nl > + long key ; < nl > + if ( topKey = = 0 ) { < nl > + key = root . buildKey ( 0 ) ; < nl > + } else { < nl > + key = topKey - 1 ; < nl > + } < nl > + < nl > + synchronized ( envelopes ) { < nl > + envelopes . put ( key , new ScheduledEnvelope ( key , 0 , envelope ) ) ; < nl > + topKey = key ; < nl > + } < nl > + < nl > + root . changedTopKey ( this ) ; < nl > + < nl > + return key ; < nl > + } < nl > + < nl > public void removeEnvelope ( Envelope envelope , EnvelopeComparator comparator ) { < nl > < nl > long oldKey ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashBegin . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashBegin . java < nl > new file mode 100644 < nl > index 0000000 . . d768bcc < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashBegin . java < nl > @ @ - 0 , 0 + 1 , 14 @ @ < nl > + package im . actor . runtime . actors . messages ; < nl > + < nl > + public class StashBegin { < nl > + < nl > + public static final StashBegin INSTANCE = new StashBegin ( ) ; < nl > + < nl > + private StashBegin ( ) { < nl > + } < nl > + < nl > + @ Override < nl > + public String toString ( ) { < nl > + return " StashBegin " ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashEnd . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashEnd . java < nl > new file mode 100644 < nl > index 0000000 . . 4abcb81 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashEnd . java < nl > @ @ - 0 , 0 + 1 , 13 @ @ < nl > + package im . actor . runtime . actors . messages ; < nl > + < nl > + public class StashEnd { < nl > + public static final StashEnd INSTANCE = new StashEnd ( ) ; < nl > + < nl > + private StashEnd ( ) { < nl > + } < nl > + < nl > + @ Override < nl > + public String toString ( ) { < nl > + return " StashEnd " ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashIgnore . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashIgnore . java < nl > new file mode 100644 < nl > index 0000000 . . e82d18d < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashIgnore . java < nl > @ @ - 0 , 0 + 1 , 14 @ @ < nl > + package im . actor . runtime . actors . messages ; < nl > + < nl > + public class StashIgnore { < nl > + < nl > + private Object message ; < nl > + < nl > + public StashIgnore ( Object message ) { < nl > + this . message = message ; < nl > + } < nl > + < nl > + public Object getMessage ( ) { < nl > + return message ; < nl > + } < nl > + } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsContact . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsContact . java < nl > index 6e0e2dc . . d0a81c3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsContact . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsContact . java < nl > @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . runtime . js . mvvm . JsEntityConverter ; < nl > public class JsContact extends JavaScriptObject { < nl > < nl > public static JsEntityConverter < Contact , JsContact > CONVERTER = new JsEntityConverter < Contact , JsContact > ( ) { < nl > + < nl > @ Override < nl > public JsContact convert ( Contact value ) { < nl > < nl > @ @ - 26 , 6 + 27 , 16 @ @ public class JsContact extends JavaScriptObject { < nl > return create ( value . getUid ( ) , value . getName ( ) , < nl > Placeholders . getPlaceholder ( value . getUid ( ) ) , fileUrl ) ; < nl > } < nl > + < nl > + @ Override < nl > + public boolean isSupportOverlays ( ) { < nl > + return false ; < nl > + } < nl > + < nl > + @ Override < nl > + public JavaScriptObject buildOverlay ( Contact prev , Contact current , Contact next ) { < nl > + return null ; < nl > + } < nl > } ; < nl > < nl > public static native JsContact create ( int uid , String name , String placeholder , String avatar ) / * - { < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java < nl > index 955b3fb . . 6d17c3c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java < nl > @ @ - 15 , 6 + 15 , 7 @ @ import im . actor . runtime . js . mvvm . JsEntityConverter ; < nl > public class JsDialog extends JavaScriptObject { < nl > < nl > public static final JsEntityConverter < Dialog , JsDialog > CONVERTER = new JsEntityConverter < Dialog , JsDialog > ( ) { < nl > + < nl > @ Override < nl > public JsDialog convert ( Dialog src ) { < nl > < nl > @ @ - 55 , 6 + 56 , 16 @ @ public class JsDialog extends JavaScriptObject { < nl > Enums . convert ( src . getStatus ( ) ) , < nl > src . getUnreadCount ( ) ) ; < nl > } < nl > + < nl > + @ Override < nl > + public boolean isSupportOverlays ( ) { < nl > + return false ; < nl > + } < nl > + < nl > + @ Override < nl > + public JavaScriptObject buildOverlay ( Dialog prev , Dialog current , Dialog next ) { < nl > + return null ; < nl > + } < nl > } ; < nl > < nl > public static native JsDialog create ( JsPeerInfo peer , < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java < nl > index 81bc399 . . 44a5ab0 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java < nl > @ @ - 9 , 6 + 9 , 9 @ @ import com . google . gwt . core . client . JsArray ; < nl > import com . google . gwt . core . client . JsArrayInteger ; < nl > import com . google . gwt . core . client . JsArrayString ; < nl > import com . google . gwt . core . client . JsDate ; < nl > + import com . google . gwt . user . datepicker . client . CalendarUtil ; < nl > + < nl > + import java . util . Date ; < nl > < nl > import im . actor . core . api . ApiTextExMarkdown ; < nl > import im . actor . core . entity . Message ; < nl > @ @ - 31 , 6 + 34 , 39 @ @ public class JsMessage extends JavaScriptObject { < nl > < nl > public static final JsEntityConverter < Message , JsMessage > CONVERTER = new JsEntityConverter < Message , JsMessage > ( ) { < nl > @ Override < nl > + public boolean isSupportOverlays ( ) { < nl > + return true ; < nl > + } < nl > + < nl > + @ Override < nl > + public JavaScriptObject buildOverlay ( Message prev , Message current , Message next ) { < nl > + Date prevDate = prev ! = null ? new Date ( prev . getDate ( ) ) : null ; < nl > + Date currentDate = new Date ( current . getDate ( ) ) ; < nl > + < nl > + boolean showDate ; < nl > + String dateDiv = null ; < nl > + if ( prev ! = null ) { < nl > + showDate = ! CalendarUtil . isSameDate ( prevDate , currentDate ) ; < nl > + } else { < nl > + showDate = true ; < nl > + } < nl > + if ( showDate ) { < nl > + dateDiv = JsMessenger . getInstance ( ) . getFormatter ( ) . formatMonth ( currentDate ) ; < nl > + } < nl > + < nl > + boolean useCompact = false ; < nl > + if ( prev ! = null & & ! showDate ) { < nl > + if ( prev . getSenderId ( ) = = current . getSenderId ( ) ) { < nl > + if ( prev . getDate ( ) - current . getDate ( ) < 10 * 60 * 1000 ) { < nl > + useCompact = true ; < nl > + } < nl > + } < nl > + } < nl > + < nl > + return JsMessageOverlay . create ( useCompact , dateDiv ) ; < nl > + } < nl > + < nl > + @ Override < nl > public JsMessage convert ( Message value ) { < nl > JsMessenger messenger = JsMessenger . getInstance ( ) ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessageOverlay . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessageOverlay . java < nl > new file mode 100644 < nl > index 0000000 . . 50384e4 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessageOverlay . java < nl > @ @ - 0 , 0 + 1 , 14 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsMessageOverlay extends JavaScriptObject { < nl > + < nl > + public static native JsMessageOverlay create ( boolean useShort , String dateDivider ) / * - { < nl > + return { useShort : useShort , dateDivider : dateDivider } ; < nl > + } - * / ; < nl > + < nl > + protected JsMessageOverlay ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > index 43efc3a . . 594bb74 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > @ @ - 149 , 6 + 149 , 13 @ @ public class I18nEngine { < nl > } < nl > } < nl > < nl > + @ ObjectiveCName ( " formatMonth : " ) < nl > + public String formatMonth ( Date date ) { < nl > + int month = date . getMonth ( ) ; < nl > + int d = date . getDate ( ) ; < nl > + return d + " " + MONTHS [ month ] . toUpperCase ( ) ; < nl > + } < nl > + < nl > @ ObjectiveCName ( " formatTyping " ) < nl > public String formatTyping ( ) { < nl > return locale . get ( " Typing " ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java < nl > index fb14eb8 . . 746ec5a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java < nl > @ @ - 125 , 7 + 125 , 7 @ @ public class SequenceActor extends ModuleActor { < nl > pendingRunnables . add ( after ) ; < nl > } < nl > return ; < nl > - } else if ( u instanceof PushSeq ) { < nl > + } else if ( u instanceof PushSeq ) { < nl > PushSeq pushSeq = ( PushSeq ) u ; < nl > if ( pushSeq . seq < = this . seq ) { < nl > Log . d ( TAG , " Ignored PushSeq { seq : " + pushSeq . seq + " } " ) ; < nl > @ @ - 290 , 6 + 290 , 14 @ @ public class SequenceActor extends ModuleActor { < nl > } < nl > Log . d ( TAG , " Difference parsed in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - parseStart ) + " ms " ) ; < nl > < nl > + if ( updates . size ( ) > 0 ) { < nl > + String command = " Difference updates : " ; < nl > + for ( Update u : updates ) { < nl > + command + = " \ n | " + u ; < nl > + } < nl > + Log . d ( TAG , command ) ; < nl > + } < nl > + < nl > long applyStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; < nl > processor . applyDifferenceUpdate ( response . getUsers ( ) , response . getGroups ( ) , updates ) ; < nl > Log . d ( TAG , " Difference applied in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - applyStart ) + " ms " ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java < nl > index 14e0386 . . 1b5c03d 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java < nl > @ @ - 14 , 6 + 14 , 7 @ @ import im . actor . runtime . Log ; < nl > import im . actor . runtime . bser . BserObject ; < nl > import im . actor . runtime . js . storage . JsListEngine ; < nl > import im . actor . runtime . js . storage . JsListEngineCallback ; < nl > + import im . actor . runtime . js . utils . JsModernArray ; < nl > import im . actor . runtime . mvvm . PlatformDisplayList ; < nl > import im . actor . runtime . storage . ListEngineItem ; < nl > < nl > @ @ - 27 , 16 + 28 , 29 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li < nl > private ArrayList < JsDisplayListCallback < T > > callbacksInverted = new ArrayList < JsDisplayListCallback < T > > ( ) ; < nl > < nl > private ArrayList < V > values ; < nl > - private JsArray < T > jsValues ; < nl > + private ArrayList < Boolean > isOverlayDirty ; < nl > + private JsModernArray < T > jsValues ; < nl > + private JsModernArray < JavaScriptObject > jsOverlays ; < nl > private boolean isForceReconverted = false ; < nl > + private final boolean isOverlaysSupported ; < nl > < nl > public JsDisplayList ( JsListEngine < V > listEngine , JsEntityConverter < V , T > entityConverter ) { < nl > this . listEngine = listEngine ; < nl > this . entityConverter = entityConverter ; < nl > + this . isOverlaysSupported = entityConverter . isSupportOverlays ( ) ; < nl > < nl > this . values = new ArrayList < V > ( ) ; < nl > this . jsValues = JavaScriptObject . createArray ( ) . cast ( ) ; < nl > < nl > + if ( isOverlaysSupported ) { < nl > + this . isOverlayDirty = new ArrayList < Boolean > ( ) ; < nl > + this . jsOverlays = JavaScriptObject . createArray ( ) . cast ( ) ; < nl > + } < nl > + < nl > + / / < nl > + / / Building initial list < nl > + / / < nl > + < nl > long [ ] rids = listEngine . getOrderedIds ( ) ; < nl > for ( long rid : rids ) { < nl > V item = listEngine . getValue ( rid ) ; < nl > @ @ - 46 , 59 + 60 , 43 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li < nl > } < nl > values . add ( item ) ; < nl > jsValues . push ( entityConverter . convert ( item ) ) ; < nl > - } < nl > - listEngine . addListener ( this ) ; < nl > - } < nl > < nl > - public void subscribe ( JsDisplayListCallback < T > callback ) { < nl > - if ( ! callbacks . contains ( callback ) ) { < nl > - callbacks . add ( callback ) ; < nl > + if ( isOverlaysSupported ) { < nl > + jsOverlays . push ( null ) ; < nl > + isOverlayDirty . add ( true ) ; < nl > + } < nl > } < nl > < nl > - / / new JsArray < T > ( jsValues ) < nl > - < nl > - callback . onCollectionChanged ( jsValues ) ; < nl > - } < nl > - < nl > - public void unsubscribe ( JsDisplayListCallback < T > callback ) { < nl > - callbacks . remove ( callback ) ; < nl > - } < nl > - < nl > - public void subscribeInverted ( JsDisplayListCallback < T > callback ) { < nl > - if ( ! callbacksInverted . contains ( callback ) ) { < nl > - callbacksInverted . add ( callback ) ; < nl > - } < nl > + / / < nl > + / / Processing dirty overlays < nl > + / / < nl > + processDirtyOverlays ( ) ; < nl > < nl > - callback . onCollectionChanged ( reverse ( jsValues ) ) ; < nl > - } < nl > + / / < nl > + / / Subscribing to updates < nl > + / / < nl > < nl > - public void unsubscribeInverted ( JsDisplayListCallback < T > callback ) { < nl > - callbacksInverted . remove ( callback ) ; < nl > + listEngine . addListener ( this ) ; < nl > } < nl > < nl > - public void startReconverting ( ) { < nl > - isForceReconverted = false ; < nl > + public ArrayList < V > getRawItems ( ) { < nl > + return values ; < nl > } < nl > < nl > - public void forceReconvert ( long id ) { < nl > - for ( int i = 0 ; i < values . size ( ) ; i + + ) { < nl > - if ( values . get ( i ) . getEngineId ( ) = = id ) { < nl > - remove ( jsValues , i ) ; < nl > - insert ( jsValues , i , entityConverter . convert ( values . get ( i ) ) ) ; < nl > - isForceReconverted = true ; < nl > - } < nl > - } < nl > + @ Override < nl > + public void onItemAddedOrUpdated ( V item ) { < nl > + addItemOrUpdateImpl ( item ) ; < nl > + processDirtyOverlays ( ) ; < nl > + notifySubscribers ( ) ; < nl > } < nl > < nl > - public void stopReconverting ( ) { < nl > - if ( isForceReconverted ) { < nl > - isForceReconverted = false ; < nl > - notifySubscribers ( ) ; < nl > + @ Override < nl > + public void onItemsAddedOrUpdated ( List < V > items ) { < nl > + for ( V item : items ) { < nl > + addItemOrUpdateImpl ( item ) ; < nl > } < nl > - } < nl > - < nl > - public ArrayList < V > getRawItems ( ) { < nl > - return values ; < nl > + processDirtyOverlays ( ) ; < nl > + notifySubscribers ( ) ; < nl > } < nl > < nl > private void addItemOrUpdateImpl ( V item ) { < nl > @ @ - 107 , 7 + 105 , 11 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li < nl > for ( int i = 0 ; i < values . size ( ) ; i + + ) { < nl > if ( values . get ( i ) . getEngineId ( ) = = id ) { < nl > values . remove ( i ) ; < nl > - remove ( jsValues , i ) ; < nl > + jsValues . remove ( i ) ; < nl > + if ( isOverlaysSupported ) { < nl > + markAsDirty ( i ) ; < nl > + jsOverlays . remove ( i ) ; < nl > + } < nl > break ; < nl > } < nl > } < nl > @ @ - 115 , 42 + 117 , 27 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li < nl > for ( int i = 0 ; i < values . size ( ) ; i + + ) { < nl > if ( sortKey > values . get ( i ) . getEngineSort ( ) ) { < nl > values . add ( i , item ) ; < nl > - insert ( jsValues , i , entityConverter . convert ( item ) ) ; < nl > + jsValues . insert ( i , entityConverter . convert ( item ) ) ; < nl > + if ( isOverlaysSupported ) { < nl > + jsOverlays . insert ( i , null ) ; < nl > + markAsDirty ( i ) ; < nl > + } < nl > return ; < nl > } < nl > } < nl > < nl > values . add ( item ) ; < nl > jsValues . push ( entityConverter . convert ( item ) ) ; < nl > - } < nl > - < nl > - private void remoteItemImpl ( long id ) { < nl > - for ( int i = 0 ; i < values . size ( ) ; i + + ) { < nl > - if ( values . get ( i ) . getEngineId ( ) = = id ) { < nl > - values . remove ( i ) ; < nl > - remove ( jsValues , i ) ; < nl > - break ; < nl > - } < nl > + if ( isOverlaysSupported ) { < nl > + jsOverlays . push ( null ) ; < nl > + markAsDirty ( values . size ( ) - 1 ) ; < nl > } < nl > } < nl > < nl > @ Override < nl > - public void onItemAddedOrUpdated ( V item ) { < nl > - addItemOrUpdateImpl ( item ) ; < nl > - notifySubscribers ( ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onItemsAddedOrUpdated ( List < V > items ) { < nl > - for ( V item : items ) { < nl > - addItemOrUpdateImpl ( item ) ; < nl > - } < nl > - notifySubscribers ( ) ; < nl > - } < nl > - < nl > - @ Override < nl > public void onItemRemoved ( long id ) { < nl > remoteItemImpl ( id ) ; < nl > + processDirtyOverlays ( ) ; < nl > notifySubscribers ( ) ; < nl > } < nl > < nl > @ @ - 159 , 43 + 146 , 189 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li < nl > for ( long id : ids ) { < nl > remoteItemImpl ( id ) ; < nl > } < nl > + processDirtyOverlays ( ) ; < nl > notifySubscribers ( ) ; < nl > } < nl > < nl > + private void remoteItemImpl ( long id ) { < nl > + for ( int i = 0 ; i < values . size ( ) ; i + + ) { < nl > + if ( values . get ( i ) . getEngineId ( ) = = id ) { < nl > + values . remove ( i ) ; < nl > + jsValues . remove ( i ) ; < nl > + if ( isOverlaysSupported ) { < nl > + markAsDirty ( i ) ; < nl > + jsOverlays . remove ( i ) ; < nl > + } < nl > + break ; < nl > + } < nl > + } < nl > + } < nl > + < nl > @ Override < nl > public void onItemsReplaced ( List < V > items ) { < nl > values . clear ( ) ; < nl > - clear ( jsValues ) ; < nl > + jsValues . clear ( ) ; < nl > + if ( isOverlaysSupported ) { < nl > + jsOverlays . clear ( ) ; < nl > + isOverlayDirty . clear ( ) ; < nl > + } < nl > onItemsAddedOrUpdated ( items ) ; < nl > } < nl > < nl > @ Override < nl > public void onClear ( ) { < nl > values . clear ( ) ; < nl > - clear ( jsValues ) ; < nl > + jsValues . clear ( ) ; < nl > + if ( isOverlaysSupported ) { < nl > + jsOverlays . clear ( ) ; < nl > + isOverlayDirty . clear ( ) ; < nl > + } < nl > notifySubscribers ( ) ; < nl > } < nl > < nl > + / / < nl > + / / Notifications < nl > + / / < nl > + < nl > + public void subscribe ( JsDisplayListCallback < T > callback ) { < nl > + if ( ! callbacks . contains ( callback ) ) { < nl > + callbacks . add ( callback ) ; < nl > + } < nl > + < nl > + if ( isOverlaysSupported ) { < nl > + callback . onCollectionChanged ( jsValues , jsOverlays ) ; < nl > + } else { < nl > + callback . onCollectionChanged ( jsValues , null ) ; < nl > + } < nl > + } < nl > + < nl > + public void unsubscribe ( JsDisplayListCallback < T > callback ) { < nl > + callbacks . remove ( callback ) ; < nl > + } < nl > + < nl > + public void subscribeInverted ( JsDisplayListCallback < T > callback ) { < nl > + if ( ! callbacksInverted . contains ( callback ) ) { < nl > + callbacksInverted . add ( callback ) ; < nl > + } < nl > + < nl > + if ( isOverlaysSupported ) { < nl > + callback . onCollectionChanged ( jsValues . reverse ( ) , jsOverlays . reverse ( ) ) ; < nl > + } else { < nl > + callback . onCollectionChanged ( jsValues . reverse ( ) , null ) ; < nl > + } < nl > + } < nl > + < nl > + public void unsubscribeInverted ( JsDisplayListCallback < T > callback ) { < nl > + callbacksInverted . remove ( callback ) ; < nl > + } < nl > + < nl > private void notifySubscribers ( ) { < nl > - for ( JsDisplayListCallback < T > callback : callbacks ) { < nl > - callback . onCollectionChanged ( jsValues ) ; < nl > + if ( isOverlaysSupported ) { < nl > + for ( JsDisplayListCallback < T > callback : callbacks ) { < nl > + callback . onCollectionChanged ( jsValues , jsOverlays ) ; < nl > + } < nl > + } else { < nl > + for ( JsDisplayListCallback < T > callback : callbacks ) { < nl > + callback . onCollectionChanged ( jsValues , null ) ; < nl > + } < nl > } < nl > < nl > if ( callbacksInverted . size ( ) > 0 ) { < nl > - JsArray < T > rev = reverse ( jsValues ) ; < nl > - for ( JsDisplayListCallback < T > callback : callbacksInverted ) { < nl > - callback . onCollectionChanged ( rev ) ; < nl > + JsArray < T > rev = jsValues . reverse ( ) ; < nl > + if ( isOverlaysSupported ) { < nl > + JsArray < JavaScriptObject > revOverlays = jsOverlays . reverse ( ) ; < nl > + for ( JsDisplayListCallback < T > callback : callbacksInverted ) { < nl > + callback . onCollectionChanged ( rev , revOverlays ) ; < nl > + } < nl > + } else { < nl > + for ( JsDisplayListCallback < T > callback : callbacksInverted ) { < nl > + callback . onCollectionChanged ( rev , null ) ; < nl > + } < nl > } < nl > } < nl > } < nl > < nl > - protected native void clear ( JsArray < T > array ) / * - { array . splice ( 0 , array . length ) ; } - * / ; < nl > + / / < nl > + / / Reconverting < nl > + / / < nl > < nl > - protected native void insert ( JsArray < T > array , int index , T obj ) / * - { array . splice ( index , 0 , obj ) ; } - * / ; < nl > + public void startReconverting ( ) { < nl > + isForceReconverted = false ; < nl > + } < nl > + < nl > + public void forceReconvert ( long id ) { < nl > + for ( int i = 0 ; i < values . size ( ) ; i + + ) { < nl > + V value = values . get ( i ) ; < nl > + if ( value . getEngineId ( ) = = id ) { < nl > + jsValues . update ( i , entityConverter . convert ( value ) ) ; < nl > + / / Do not update overlays as this is method is a hack for binding < nl > + isForceReconverted = true ; < nl > + break ; < nl > + } < nl > + } < nl > + } < nl > + < nl > + public void stopReconverting ( ) { < nl > + if ( isForceReconverted ) { < nl > + isForceReconverted = false ; < nl > + notifySubscribers ( ) ; < nl > + } < nl > + } < nl > + < nl > + / / < nl > + / / Overlays < nl > + / / < nl > + < nl > + private boolean isDirty ( int index ) { < nl > + return isOverlayDirty . get ( index ) ; < nl > + } < nl > < nl > - protected native void remove ( JsArray < T > array , int index ) / * - { array . splice ( index , 1 ) ; } - * / ; < nl > + private void markAsDirty ( int index ) { < nl > + isOverlayDirty . set ( index , true ) ; < nl > + if ( index - 1 > 0 ) { < nl > + isOverlayDirty . set ( index - 1 , true ) ; < nl > + } < nl > + < nl > + if ( index < isOverlayDirty . size ( ) ) { < nl > + isOverlayDirty . set ( index + 1 , true ) ; < nl > + } < nl > + } < nl > + < nl > + private void markAsClean ( int index ) { < nl > + isOverlayDirty . set ( index , false ) ; < nl > + } < nl > + < nl > + private boolean processDirtyOverlays ( ) { < nl > + if ( ! isOverlaysSupported ) { < nl > + return false ; < nl > + } < nl > + boolean isChanged = false ; < nl > + for ( int i = 0 ; i < values . size ( ) ; i + + ) { < nl > + if ( ! isDirty ( i ) ) { < nl > + continue ; < nl > + } < nl > + < nl > + V prev = null ; < nl > + V current = values . get ( i ) ; < nl > + V next = null ; < nl > + < nl > + if ( i - 1 > = 0 ) { < nl > + prev = values . get ( i - 1 ) ; < nl > + } < nl > + if ( i + 1 < values . size ( ) ) { < nl > + next = values . get ( i + 1 ) ; < nl > + } < nl > + < nl > + jsOverlays . update ( i , entityConverter . buildOverlay ( prev , current , next ) ) ; < nl > + markAsClean ( i ) ; < nl > + isChanged = true ; < nl > + } < nl > + return isChanged ; < nl > + } < nl > < nl > - protected native JsArray < T > reverse ( JsArray < T > array ) / * - { return array . slice ( ) . reverse ( ) ; } - * / ; < nl > + / / < nl > + / / Not required methods < nl > + / / < nl > < nl > @ Override < nl > public void initCenter ( long rid ) { < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayListCallback . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayListCallback . java < nl > index 43b3eb6 . . b663e79 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayListCallback . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayListCallback . java < nl > @ @ - 14 , 5 + 14 , 5 @ @ import org . timepedia . exporter . client . Exportable ; < nl > @ Export < nl > @ ExportClosure < nl > public interface JsDisplayListCallback < T extends JavaScriptObject > extends Exportable { < nl > - void onCollectionChanged ( JsArray < T > array ) ; < nl > + void onCollectionChanged ( JsArray < T > array , JsArray < JavaScriptObject > overlays ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsEntityConverter . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsEntityConverter . java < nl > index ce776ce . . da914e7 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsEntityConverter . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsEntityConverter . java < nl > @ @ - 6 , 6 + 6 , 13 @ @ package im . actor . runtime . js . mvvm ; < nl > < nl > import com . google . gwt . core . client . JavaScriptObject ; < nl > < nl > + import java . util . ArrayList ; < nl > + < nl > public interface JsEntityConverter < F , T extends JavaScriptObject > { < nl > - T convert ( F value ) ; < nl > + < nl > + boolean isSupportOverlays ( ) ; < nl > + < nl > + JavaScriptObject buildOverlay ( F prev , F current , F next ) ; < nl > + < nl > + T convert ( F item ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsModernArray . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsModernArray . java < nl > new file mode 100644 < nl > index 0000000 . . 8ec3cdd < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsModernArray . java < nl > @ @ - 0 , 0 + 1 , 24 @ @ < nl > + package im . actor . runtime . js . utils ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + import com . google . gwt . core . client . JsArray ; < nl > + < nl > + public class JsModernArray < T extends JavaScriptObject > extends JsArray < T > { < nl > + < nl > + public native void clear ( ) / * - { this . splice ( 0 , this . length ) ; } - * / ; < nl > + < nl > + public native void insert ( int index , T obj ) / * - { this . splice ( index , 0 , obj ) ; } - * / ; < nl > + < nl > + public native void remove ( int index ) / * - { this . splice ( index , 1 ) ; } - * / ; < nl > + < nl > + public void update ( int index , T obj ) { < nl > + remove ( index ) ; < nl > + insert ( index , obj ) ; < nl > + } < nl > + < nl > + public native JsArray < T > reverse ( ) / * - { return this . slice ( ) . reverse ( ) ; } - * / ; < nl > + < nl > + protected JsModernArray ( ) { < nl > + < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift 
 index c22c65a . . a655ab2 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift 
 @ @ - 31 , 8 + 31 , 8 @ @ import Foundation 
 " \ " BYTES \ " BLOB NOT NULL , " + 
 " PRIMARY KEY ( \ " ID \ " ) ) ; " 
 self . queryItem = " SELECT \ " BYTES \ " FROM " + tableName + " WHERE \ " ID \ " = ? ; " 
 - self . queryItems = " SELECT ( \ " ID \ " , \ " BYTES \ " ) FROM " + tableName + " WHERE \ " ID \ " in ? ; " 
 - self . queryAll = " SELECT ( \ " ID \ " , \ " BYTES \ " ) FROM " + tableName + " ; " 
 + self . queryItems = " SELECT \ " ID \ " , \ " BYTES \ " FROM " + tableName + " WHERE \ " ID \ " in ? ; " 
 + self . queryAll = " SELECT \ " ID \ " , \ " BYTES \ " FROM " + tableName + " ; " 
 self . queryAdd = " REPLACE INTO " + tableName + " ( \ " ID \ " , \ " BYTES \ " ) VALUES ( ? , ? ) ; " 
 self . queryDelete = " DELETE FROM " + tableName + " WHERE \ " ID \ " = ? ; " 
 self . queryDeleteAll = " DELETE FROM " + tableName + " ; " 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java 
 index 48ac1e8 . . 98afed9 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java 
 @ @ - 27 , 6 + 27 , 9 @ @ import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 import im . actor . core . network . parser . Update ; 
 import im . actor . runtime . Log ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . actors . Props ; 
 
 public class SequenceActor extends ModuleActor { 
 
 @ @ - 50 , 6 + 53 , 8 @ @ public class SequenceActor extends ModuleActor { 
 private UpdateProcessor processor ; 
 private UpdatesParser parser ; 
 
 + private ActorRef sequenceHandler ; 
 + 
 public SequenceActor ( ModuleContext modules ) { 
 super ( modules ) ; 
 } 
 @ @ - 60 , 29 + 65 , 52 @ @ public class SequenceActor extends ModuleActor { 
 state = preferences ( ) . getBytes ( KEY _ STATE ) ; 
 parser = new UpdatesParser ( ) ; 
 processor = new UpdateProcessor ( context ( ) ) ; 
 + sequenceHandler = system ( ) . actorOf ( Props . create ( SequenceHandlerActor . class , new ActorCreator < SequenceHandlerActor > ( ) { 
 + @ Override 
 + public SequenceHandlerActor create ( ) { 
 + return new SequenceHandlerActor ( processor , context ( ) ) ; 
 + } 
 + } ) , getPath ( ) + " / handler " ) ; 
 
 self ( ) . send ( new Invalidate ( ) ) ; 
 } 
 
 - @ Override 
 - public void onReceive ( Object message ) { 
 - if ( message instanceof Invalidate | | message instanceof SeqUpdateTooLong | | 
 - message instanceof ForceInvalidate ) { 
 - invalidate ( ) ; 
 - } else if ( message instanceof SeqUpdate ) { 
 - onUpdateReceived ( message ) ; 
 - } else if ( message instanceof FatSeqUpdate ) { 
 - onUpdateReceived ( message ) ; 
 - } else if ( message instanceof WeakUpdate ) { 
 - onUpdateReceived ( message ) ; 
 - } else if ( message instanceof InternalUpdate ) { 
 - onUpdateReceived ( message ) ; 
 - } else if ( message instanceof ExecuteAfter ) { 
 - onUpdateReceived ( message ) ; 
 - } else if ( message instanceof PushSeq ) { 
 - onUpdateReceived ( message ) ; 
 + private void onWeakUpdateReceived ( WeakUpdate weakUpdate ) { 
 + Update update ; 
 + try { 
 + update = parser . read ( weakUpdate . getUpdateHeader ( ) , weakUpdate . getUpdate ( ) ) ; 
 + Log . d ( TAG , " Weak Update : " + update ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + Log . w ( TAG , " Unable to parse update : ignoring " ) ; 
 + return ; 
 + } 
 + 
 + Log . d ( TAG , " Starting stashing " ) ; 
 + beginStash ( null ) ; 
 + Log . d ( TAG , " Processing weak update " ) ; 
 + sequenceHandler . send ( new SequenceHandlerActor . WeakUpdate ( update , weakUpdate . getDate ( ) ) , self ( ) ) ; 
 + } 
 + 
 + private void onInternalUpdateReceived ( InternalUpdate internalUpdate ) { 
 + Log . d ( TAG , " Received internal update " ) ; 
 + processor . processInternalUpdate ( internalUpdate ) ; 
 + } 
 + 
 + private void onExecuteAfterReceived ( ExecuteAfter after ) { 
 + if ( after . getSeq ( ) < = this . seq ) { 
 + after . getRunnable ( ) . run ( ) ; 
 } else { 
 - drop ( message ) ; 
 + pendingRunnables . add ( after ) ; 
 + } 
 + } 
 + 
 + private void onPushSeqReceived ( int seq ) { 
 + if ( seq < = this . seq ) { 
 + Log . d ( TAG , " Ignored PushSeq { seq : " + seq + " } " ) ; 
 + } else { 
 + Log . w ( TAG , " External Out of sequence : starting timer for invalidation " ) ; 
 + self ( ) . sendOnce ( new ForceInvalidate ( ) , INVALIDATE _ GAP ) ; 
 } 
 } 
 
 @ @ - 102 , 38 + 130 , 6 @ @ public class SequenceActor extends ModuleActor { 
 state = ( ( FatSeqUpdate ) u ) . getState ( ) ; 
 type = ( ( FatSeqUpdate ) u ) . getUpdateHeader ( ) ; 
 body = ( ( FatSeqUpdate ) u ) . getUpdate ( ) ; 
 - } else if ( u instanceof WeakUpdate ) { 
 - WeakUpdate w = ( WeakUpdate ) u ; 
 - try { 
 - Update update = parser . read ( w . getUpdateHeader ( ) , w . getUpdate ( ) ) ; 
 - processor . processWeakUpdate ( update , w . getDate ( ) ) ; 
 - Log . d ( TAG , " Weak Update : " + update ) ; 
 - } catch ( IOException e ) { 
 - e . printStackTrace ( ) ; 
 - Log . w ( TAG , " Unable to parse update : ignoring " ) ; 
 - } 
 - return ; 
 - } else if ( u instanceof InternalUpdate ) { 
 - Log . d ( TAG , " Received internal update " ) ; 
 - processor . processInternalUpdate ( ( InternalUpdate ) u ) ; 
 - return ; 
 - } else if ( u instanceof ExecuteAfter ) { 
 - ExecuteAfter after = ( ExecuteAfter ) u ; 
 - if ( after . getSeq ( ) < = this . seq ) { 
 - after . getRunnable ( ) . run ( ) ; 
 - } else { 
 - pendingRunnables . add ( after ) ; 
 - } 
 - return ; 
 - } else if ( u instanceof PushSeq ) { 
 - PushSeq pushSeq = ( PushSeq ) u ; 
 - if ( pushSeq . seq < = this . seq ) { 
 - Log . d ( TAG , " Ignored PushSeq { seq : " + pushSeq . seq + " } " ) ; 
 - } else { 
 - Log . w ( TAG , " External Out of sequence : starting timer for invalidation " ) ; 
 - self ( ) . sendOnce ( new ForceInvalidate ( ) , INVALIDATE _ GAP ) ; 
 - } 
 - return ; 
 } else { 
 return ; 
 } 
 @ @ - 151 , 7 + 147 , 7 @ @ public class SequenceActor extends ModuleActor { 
 return ; 
 } 
 
 - if ( ! isValidSeq ( seq ) ) { 
 + if ( seq ! = this . seq + 1 ) { 
 further . put ( seq , u ) ; 
 
 if ( seq - this . seq > INVALIDATE _ MAX _ SEC _ HOLE ) { 
 @ @ - 217 , 10 + 213 , 6 @ @ public class SequenceActor extends ModuleActor { 
 self ( ) . sendOnce ( new ForceInvalidate ( ) , 24 * 60 * 60 * 1000L ) ; 
 } 
 
 - private boolean isValidSeq ( final int seq ) { 
 - return this . seq < = 0 | | seq = = this . seq + 1 ; 
 - } 
 - 
 private void invalidate ( ) { 
 if ( ! isValidated ) { 
 return ; 
 @ @ - 371 , 6 + 363 , 31 @ @ public class SequenceActor extends ModuleActor { 
 } 
 } 
 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof Invalidate | | 
 + message instanceof SeqUpdateTooLong | | 
 + message instanceof ForceInvalidate ) { 
 + invalidate ( ) ; 
 + } else if ( message instanceof SeqUpdate | | 
 + message instanceof FatSeqUpdate ) { 
 + onUpdateReceived ( message ) ; 
 + } else if ( message instanceof WeakUpdate ) { 
 + onWeakUpdateReceived ( ( WeakUpdate ) message ) ; 
 + } else if ( message instanceof InternalUpdate ) { 
 + onInternalUpdateReceived ( ( InternalUpdate ) message ) ; 
 + } else if ( message instanceof ExecuteAfter ) { 
 + onExecuteAfterReceived ( ( ExecuteAfter ) message ) ; 
 + } else if ( message instanceof PushSeq ) { 
 + onPushSeqReceived ( ( ( PushSeq ) message ) . seq ) ; 
 + } else if ( message instanceof UpdateProcessed ) { 
 + Log . d ( TAG , " Ending stashing " ) ; 
 + endStash ( ) ; 
 + } else { 
 + drop ( message ) ; 
 + } 
 + } 
 + 
 public static class ForceInvalidate { 
 
 } 
 @ @ - 386 , 4 + 403 , 8 @ @ public class SequenceActor extends ModuleActor { 
 this . seq = seq ; 
 } 
 } 
 + 
 + public static class UpdateProcessed { 
 + 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceHandlerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceHandlerActor . java 
 new file mode 100644 
 index 0000000 . . 831d631 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceHandlerActor . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + package im . actor . core . modules . updates ; 
 + 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . utils . ModuleActor ; 
 + import im . actor . core . network . parser . Update ; 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . actors . messages . StashIgnore ; 
 + 
 + public class SequenceHandlerActor extends ModuleActor { 
 + 
 + private static final String TAG = " SequenceHandlerActor " ; 
 + 
 + private UpdateProcessor processor ; 
 + 
 + public SequenceHandlerActor ( UpdateProcessor processor , ModuleContext context ) { 
 + super ( context ) ; 
 + 
 + this . processor = processor ; 
 + } 
 + 
 + private void onWeakUpdateReceived ( Update update , long date ) { 
 + Log . d ( TAG , " Processing weak update . . . " ) ; 
 + this . processor . processWeakUpdate ( update , date ) ; 
 + 
 + Log . d ( TAG , " Unlocking sequence in 1500 ms " ) ; 
 + sender ( ) . send ( new StashIgnore ( new SequenceActor . UpdateProcessed ( ) ) , 1500 ) ; 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof WeakUpdate ) { 
 + onWeakUpdateReceived ( ( ( WeakUpdate ) message ) . getUpdate ( ) , 
 + ( ( WeakUpdate ) message ) . getDate ( ) ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 + } 
 + } 
 + 
 + public static class WeakUpdate { 
 + 
 + private Update update ; 
 + private long date ; 
 + 
 + public WeakUpdate ( Update update , long date ) { 
 + this . update = update ; 
 + this . date = date ; 
 + } 
 + 
 + public long getDate ( ) { 
 + return date ; 
 + } 
 + 
 + public Update getUpdate ( ) { 
 + return update ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Actor . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Actor . java 
 index 4b50a1b . . 9bf41cd 100755 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Actor . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Actor . java 
 @ @ - 4 , 8 + 4 , 13 @ @ 
 
 package im . actor . runtime . actors ; 
 
 + import java . util . ArrayList ; 
 + 
 import im . actor . runtime . actors . mailbox . Mailbox ; 
 import im . actor . runtime . actors . messages . DeadLetter ; 
 + import im . actor . runtime . actors . messages . StashBegin ; 
 + import im . actor . runtime . actors . messages . StashEnd ; 
 + import im . actor . runtime . actors . messages . StashIgnore ; 
 
 / * * 
 * Actor object 
 @ @ - 17 , 6 + 22 , 10 @ @ public class Actor { 
 private ActorContext context ; 
 private Mailbox mailbox ; 
 
 + private ArrayList < StashedMessage > stashed = new ArrayList < StashedMessage > ( ) ; 
 + private Runnable beforeUnstash = null ; 
 + private boolean isStashing = false ; 
 + 
 public Actor ( ) { 
 
 } 
 @ @ - 36 , 6 + 45 , 65 @ @ public class Actor { 
 } 
 
 / * * 
 + * < p > INTERNAL API < / p > 
 + * Handling of a message in Actor 
 + * 
 + * @ param message message 
 + * / 
 + public final void handleMessage ( Object message , ActorRef sender ) { 
 + if ( message instanceof StashEnd ) { 
 + endStash ( ) ; 
 + } else if ( message instanceof StashBegin ) { 
 + beginStash ( null ) ; 
 + } else if ( message instanceof StashIgnore ) { 
 + intHandle ( ( ( StashIgnore ) message ) . getMessage ( ) , sender ) ; 
 + } else { 
 + / / Stashing message 
 + if ( isStashing ) { 
 + stashed . add ( new StashedMessage ( message , sender ) ) ; 
 + return ; 
 + } 
 + intHandle ( message , sender ) ; 
 + } 
 + } 
 + 
 + public void beginStash ( Runnable beforeUnstash ) { 
 + if ( isStashing ) { 
 + throw new RuntimeException ( " Actor is already stashed " ) ; 
 + } 
 + this . beforeUnstash = beforeUnstash ; 
 + isStashing = true ; 
 + } 
 + 
 + public void endStash ( ) { 
 + if ( ! isStashing ) { 
 + throw new RuntimeException ( " Actor is not stashed " ) ; 
 + } 
 + isStashing = false ; 
 + 
 + if ( beforeUnstash ! = null ) { 
 + beforeUnstash . run ( ) ; 
 + beforeUnstash = null ; 
 + } 
 + 
 + StashedMessage [ ] msgs = stashed . toArray ( new StashedMessage [ stashed . size ( ) ] ) ; 
 + stashed . clear ( ) ; 
 + for ( int i = msgs . length - 1 ; i > = 0 ; i - - ) { 
 + self ( ) . sendFirst ( msgs [ i ] . getMessage ( ) , msgs [ i ] . getSender ( ) ) ; 
 + } 
 + } 
 + 
 + private void intHandle ( Object message , ActorRef sender ) { 
 + context . setSender ( sender ) ; 
 + 
 + if ( message instanceof Runnable ) { 
 + ( ( Runnable ) message ) . run ( ) ; 
 + return ; 
 + } 
 + onReceive ( message ) ; 
 + } 
 + 
 + / * * 
 * Actor System 
 * 
 * @ return Actor System 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorContext . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorContext . java 
 index 63cf556 . . 35e8806 100755 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorContext . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorContext . java 
 @ @ - 50 , 6 + 50 , 15 @ @ public class ActorContext { 
 } 
 
 / * * 
 + * Setting sender 
 + * 
 + * @ param ref sender ' s ActorRef 
 + * / 
 + public void setSender ( ActorRef ref ) { 
 + actorScope . setSender ( ref ) ; 
 + } 
 + 
 + / * * 
 * Stopping actor 
 * / 
 public void stopSelf ( ) { 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorRef . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorRef . java 
 index 0d8b3d7 . . dda1df2 100755 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorRef . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorRef . java 
 @ @ - 81 , 6 + 81 , 25 @ @ public class ActorRef { 
 } 
 
 / * * 
 + * Sending message before all other messages 
 + * 
 + * @ param message message 
 + * @ param sender sender 
 + * / 
 + public void sendFirst ( Object message , ActorRef sender ) { 
 + dispatcher . sendMessageFirst ( endpoint , message , sender ) ; 
 + } 
 + 
 + / * * 
 + * Sending message before all other messages 
 + * 
 + * @ param message message 
 + * / 
 + public void sendFirst ( Object message ) { 
 + dispatcher . sendMessageFirst ( endpoint , message , null ) ; 
 + } 
 + 
 + / * * 
 * Send message once 
 * 
 * @ param message message 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / StashedMessage . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / StashedMessage . java 
 new file mode 100644 
 index 0000000 . . 19abccc 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / StashedMessage . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package im . actor . runtime . actors ; 
 + 
 + public class StashedMessage { 
 + 
 + private Object message ; 
 + private ActorRef sender ; 
 + 
 + public StashedMessage ( Object message , ActorRef sender ) { 
 + this . message = message ; 
 + this . sender = sender ; 
 + } 
 + 
 + public Object getMessage ( ) { 
 + return message ; 
 + } 
 + 
 + public ActorRef getSender ( ) { 
 + return sender ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / ActorDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / ActorDispatcher . java 
 index bc4e625 . . a370094 100755 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / ActorDispatcher . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / ActorDispatcher . java 
 @ @ - 114 , 6 + 114 , 12 @ @ public abstract class ActorDispatcher { 
 } 
 } 
 
 + public final void sendMessageFirst ( ActorEndpoint endpoint , Object message , ActorRef sender ) { 
 + if ( ! isDisconnected ( endpoint , message , sender ) ) { 
 + endpoint . getMailbox ( ) . scheduleFirst ( new Envelope ( message , endpoint . getScope ( ) , endpoint . getMailbox ( ) , sender ) ) ; 
 + } 
 + } 
 + 
 public final void sendMessageOnceAtTime ( ActorEndpoint endpoint , Object message , long time , ActorRef sender ) { 
 if ( ! isDisconnected ( endpoint , message , sender ) ) { 
 endpoint . getMailbox ( ) . scheduleOnce ( new Envelope ( message , endpoint . getScope ( ) , endpoint . getMailbox ( ) , sender ) , time ) ; 
 @ @ - 194 , 12 + 200 , 7 @ @ public abstract class ActorDispatcher { 
 dispatcher . getQueue ( ) . disconnectMailbox ( scope . getMailbox ( ) ) ; 
 } 
 } else { 
 - scope . setSender ( envelope . getSender ( ) ) ; 
 - if ( envelope . getMessage ( ) instanceof Runnable ) { 
 - ( ( Runnable ) envelope . getMessage ( ) ) . run ( ) ; 
 - return ; 
 - } 
 - scope . getActor ( ) . onReceive ( envelope . getMessage ( ) ) ; 
 + scope . getActor ( ) . handleMessage ( envelope . getMessage ( ) , envelope . getSender ( ) ) ; 
 } 
 } catch ( Exception e ) { 
 if ( actorSystem . getTraceInterface ( ) ! = null ) { 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / Mailbox . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / Mailbox . java 
 index e0a0777 . . 4d7e300 100755 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / Mailbox . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / Mailbox . java 
 @ @ - 45 , 6 + 45 , 19 @ @ public class Mailbox { 
 } 
 
 / * * 
 + * Send envelope first 
 + * 
 + * @ param envelope envelope 
 + * / 
 + public void scheduleFirst ( Envelope envelope ) { 
 + if ( envelope . getMailbox ( ) ! = this ) { 
 + throw new RuntimeException ( " envelope . mailbox ! = this mailbox " ) ; 
 + } 
 + 
 + envelopes . putEnvelopeFirst ( envelope ) ; 
 + } 
 + 
 + / * * 
 * Send envelope once at time 
 * 
 * @ param envelope envelope 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / collections / EnvelopeCollection . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / collections / EnvelopeCollection . java 
 index 364c70e . . 113a523 100755 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / collections / EnvelopeCollection . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / mailbox / collections / EnvelopeCollection . java 
 @ @ - 60 , 6 + 60 , 25 @ @ public class EnvelopeCollection { 
 return key ; 
 } 
 
 + public long putEnvelopeFirst ( Envelope envelope ) { 
 + 
 + long key ; 
 + if ( topKey = = 0 ) { 
 + key = root . buildKey ( 0 ) ; 
 + } else { 
 + key = topKey - 1 ; 
 + } 
 + 
 + synchronized ( envelopes ) { 
 + envelopes . put ( key , new ScheduledEnvelope ( key , 0 , envelope ) ) ; 
 + topKey = key ; 
 + } 
 + 
 + root . changedTopKey ( this ) ; 
 + 
 + return key ; 
 + } 
 + 
 public void removeEnvelope ( Envelope envelope , EnvelopeComparator comparator ) { 
 
 long oldKey ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashBegin . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashBegin . java 
 new file mode 100644 
 index 0000000 . . d768bcc 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashBegin . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package im . actor . runtime . actors . messages ; 
 + 
 + public class StashBegin { 
 + 
 + public static final StashBegin INSTANCE = new StashBegin ( ) ; 
 + 
 + private StashBegin ( ) { 
 + } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return " StashBegin " ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashEnd . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashEnd . java 
 new file mode 100644 
 index 0000000 . . 4abcb81 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashEnd . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package im . actor . runtime . actors . messages ; 
 + 
 + public class StashEnd { 
 + public static final StashEnd INSTANCE = new StashEnd ( ) ; 
 + 
 + private StashEnd ( ) { 
 + } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return " StashEnd " ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashIgnore . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashIgnore . java 
 new file mode 100644 
 index 0000000 . . e82d18d 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / messages / StashIgnore . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package im . actor . runtime . actors . messages ; 
 + 
 + public class StashIgnore { 
 + 
 + private Object message ; 
 + 
 + public StashIgnore ( Object message ) { 
 + this . message = message ; 
 + } 
 + 
 + public Object getMessage ( ) { 
 + return message ; 
 + } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsContact . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsContact . java 
 index 6e0e2dc . . d0a81c3 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsContact . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsContact . java 
 @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . runtime . js . mvvm . JsEntityConverter ; 
 public class JsContact extends JavaScriptObject { 
 
 public static JsEntityConverter < Contact , JsContact > CONVERTER = new JsEntityConverter < Contact , JsContact > ( ) { 
 + 
 @ Override 
 public JsContact convert ( Contact value ) { 
 
 @ @ - 26 , 6 + 27 , 16 @ @ public class JsContact extends JavaScriptObject { 
 return create ( value . getUid ( ) , value . getName ( ) , 
 Placeholders . getPlaceholder ( value . getUid ( ) ) , fileUrl ) ; 
 } 
 + 
 + @ Override 
 + public boolean isSupportOverlays ( ) { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public JavaScriptObject buildOverlay ( Contact prev , Contact current , Contact next ) { 
 + return null ; 
 + } 
 } ; 
 
 public static native JsContact create ( int uid , String name , String placeholder , String avatar ) / * - { 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java 
 index 955b3fb . . 6d17c3c 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java 
 @ @ - 15 , 6 + 15 , 7 @ @ import im . actor . runtime . js . mvvm . JsEntityConverter ; 
 public class JsDialog extends JavaScriptObject { 
 
 public static final JsEntityConverter < Dialog , JsDialog > CONVERTER = new JsEntityConverter < Dialog , JsDialog > ( ) { 
 + 
 @ Override 
 public JsDialog convert ( Dialog src ) { 
 
 @ @ - 55 , 6 + 56 , 16 @ @ public class JsDialog extends JavaScriptObject { 
 Enums . convert ( src . getStatus ( ) ) , 
 src . getUnreadCount ( ) ) ; 
 } 
 + 
 + @ Override 
 + public boolean isSupportOverlays ( ) { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public JavaScriptObject buildOverlay ( Dialog prev , Dialog current , Dialog next ) { 
 + return null ; 
 + } 
 } ; 
 
 public static native JsDialog create ( JsPeerInfo peer , 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java 
 index 81bc399 . . 44a5ab0 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java 
 @ @ - 9 , 6 + 9 , 9 @ @ import com . google . gwt . core . client . JsArray ; 
 import com . google . gwt . core . client . JsArrayInteger ; 
 import com . google . gwt . core . client . JsArrayString ; 
 import com . google . gwt . core . client . JsDate ; 
 + import com . google . gwt . user . datepicker . client . CalendarUtil ; 
 + 
 + import java . util . Date ; 
 
 import im . actor . core . api . ApiTextExMarkdown ; 
 import im . actor . core . entity . Message ; 
 @ @ - 31 , 6 + 34 , 39 @ @ public class JsMessage extends JavaScriptObject { 
 
 public static final JsEntityConverter < Message , JsMessage > CONVERTER = new JsEntityConverter < Message , JsMessage > ( ) { 
 @ Override 
 + public boolean isSupportOverlays ( ) { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public JavaScriptObject buildOverlay ( Message prev , Message current , Message next ) { 
 + Date prevDate = prev ! = null ? new Date ( prev . getDate ( ) ) : null ; 
 + Date currentDate = new Date ( current . getDate ( ) ) ; 
 + 
 + boolean showDate ; 
 + String dateDiv = null ; 
 + if ( prev ! = null ) { 
 + showDate = ! CalendarUtil . isSameDate ( prevDate , currentDate ) ; 
 + } else { 
 + showDate = true ; 
 + } 
 + if ( showDate ) { 
 + dateDiv = JsMessenger . getInstance ( ) . getFormatter ( ) . formatMonth ( currentDate ) ; 
 + } 
 + 
 + boolean useCompact = false ; 
 + if ( prev ! = null & & ! showDate ) { 
 + if ( prev . getSenderId ( ) = = current . getSenderId ( ) ) { 
 + if ( prev . getDate ( ) - current . getDate ( ) < 10 * 60 * 1000 ) { 
 + useCompact = true ; 
 + } 
 + } 
 + } 
 + 
 + return JsMessageOverlay . create ( useCompact , dateDiv ) ; 
 + } 
 + 
 + @ Override 
 public JsMessage convert ( Message value ) { 
 JsMessenger messenger = JsMessenger . getInstance ( ) ; 
 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessageOverlay . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessageOverlay . java 
 new file mode 100644 
 index 0000000 . . 50384e4 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessageOverlay . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsMessageOverlay extends JavaScriptObject { 
 + 
 + public static native JsMessageOverlay create ( boolean useShort , String dateDivider ) / * - { 
 + return { useShort : useShort , dateDivider : dateDivider } ; 
 + } - * / ; 
 + 
 + protected JsMessageOverlay ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 index 43efc3a . . 594bb74 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 @ @ - 149 , 6 + 149 , 13 @ @ public class I18nEngine { 
 } 
 } 
 
 + @ ObjectiveCName ( " formatMonth : " ) 
 + public String formatMonth ( Date date ) { 
 + int month = date . getMonth ( ) ; 
 + int d = date . getDate ( ) ; 
 + return d + " " + MONTHS [ month ] . toUpperCase ( ) ; 
 + } 
 + 
 @ ObjectiveCName ( " formatTyping " ) 
 public String formatTyping ( ) { 
 return locale . get ( " Typing " ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java 
 index fb14eb8 . . 746ec5a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java 
 @ @ - 125 , 7 + 125 , 7 @ @ public class SequenceActor extends ModuleActor { 
 pendingRunnables . add ( after ) ; 
 } 
 return ; 
 - } else if ( u instanceof PushSeq ) { 
 + } else if ( u instanceof PushSeq ) { 
 PushSeq pushSeq = ( PushSeq ) u ; 
 if ( pushSeq . seq < = this . seq ) { 
 Log . d ( TAG , " Ignored PushSeq { seq : " + pushSeq . seq + " } " ) ; 
 @ @ - 290 , 6 + 290 , 14 @ @ public class SequenceActor extends ModuleActor { 
 } 
 Log . d ( TAG , " Difference parsed in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - parseStart ) + " ms " ) ; 
 
 + if ( updates . size ( ) > 0 ) { 
 + String command = " Difference updates : " ; 
 + for ( Update u : updates ) { 
 + command + = " \ n | " + u ; 
 + } 
 + Log . d ( TAG , command ) ; 
 + } 
 + 
 long applyStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; 
 processor . applyDifferenceUpdate ( response . getUsers ( ) , response . getGroups ( ) , updates ) ; 
 Log . d ( TAG , " Difference applied in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - applyStart ) + " ms " ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java 
 index 14e0386 . . 1b5c03d 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java 
 @ @ - 14 , 6 + 14 , 7 @ @ import im . actor . runtime . Log ; 
 import im . actor . runtime . bser . BserObject ; 
 import im . actor . runtime . js . storage . JsListEngine ; 
 import im . actor . runtime . js . storage . JsListEngineCallback ; 
 + import im . actor . runtime . js . utils . JsModernArray ; 
 import im . actor . runtime . mvvm . PlatformDisplayList ; 
 import im . actor . runtime . storage . ListEngineItem ; 
 
 @ @ - 27 , 16 + 28 , 29 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li 
 private ArrayList < JsDisplayListCallback < T > > callbacksInverted = new ArrayList < JsDisplayListCallback < T > > ( ) ; 
 
 private ArrayList < V > values ; 
 - private JsArray < T > jsValues ; 
 + private ArrayList < Boolean > isOverlayDirty ; 
 + private JsModernArray < T > jsValues ; 
 + private JsModernArray < JavaScriptObject > jsOverlays ; 
 private boolean isForceReconverted = false ; 
 + private final boolean isOverlaysSupported ; 
 
 public JsDisplayList ( JsListEngine < V > listEngine , JsEntityConverter < V , T > entityConverter ) { 
 this . listEngine = listEngine ; 
 this . entityConverter = entityConverter ; 
 + this . isOverlaysSupported = entityConverter . isSupportOverlays ( ) ; 
 
 this . values = new ArrayList < V > ( ) ; 
 this . jsValues = JavaScriptObject . createArray ( ) . cast ( ) ; 
 
 + if ( isOverlaysSupported ) { 
 + this . isOverlayDirty = new ArrayList < Boolean > ( ) ; 
 + this . jsOverlays = JavaScriptObject . createArray ( ) . cast ( ) ; 
 + } 
 + 
 + / / 
 + / / Building initial list 
 + / / 
 + 
 long [ ] rids = listEngine . getOrderedIds ( ) ; 
 for ( long rid : rids ) { 
 V item = listEngine . getValue ( rid ) ; 
 @ @ - 46 , 59 + 60 , 43 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li 
 } 
 values . add ( item ) ; 
 jsValues . push ( entityConverter . convert ( item ) ) ; 
 - } 
 - listEngine . addListener ( this ) ; 
 - } 
 
 - public void subscribe ( JsDisplayListCallback < T > callback ) { 
 - if ( ! callbacks . contains ( callback ) ) { 
 - callbacks . add ( callback ) ; 
 + if ( isOverlaysSupported ) { 
 + jsOverlays . push ( null ) ; 
 + isOverlayDirty . add ( true ) ; 
 + } 
 } 
 
 - / / new JsArray < T > ( jsValues ) 
 - 
 - callback . onCollectionChanged ( jsValues ) ; 
 - } 
 - 
 - public void unsubscribe ( JsDisplayListCallback < T > callback ) { 
 - callbacks . remove ( callback ) ; 
 - } 
 - 
 - public void subscribeInverted ( JsDisplayListCallback < T > callback ) { 
 - if ( ! callbacksInverted . contains ( callback ) ) { 
 - callbacksInverted . add ( callback ) ; 
 - } 
 + / / 
 + / / Processing dirty overlays 
 + / / 
 + processDirtyOverlays ( ) ; 
 
 - callback . onCollectionChanged ( reverse ( jsValues ) ) ; 
 - } 
 + / / 
 + / / Subscribing to updates 
 + / / 
 
 - public void unsubscribeInverted ( JsDisplayListCallback < T > callback ) { 
 - callbacksInverted . remove ( callback ) ; 
 + listEngine . addListener ( this ) ; 
 } 
 
 - public void startReconverting ( ) { 
 - isForceReconverted = false ; 
 + public ArrayList < V > getRawItems ( ) { 
 + return values ; 
 } 
 
 - public void forceReconvert ( long id ) { 
 - for ( int i = 0 ; i < values . size ( ) ; i + + ) { 
 - if ( values . get ( i ) . getEngineId ( ) = = id ) { 
 - remove ( jsValues , i ) ; 
 - insert ( jsValues , i , entityConverter . convert ( values . get ( i ) ) ) ; 
 - isForceReconverted = true ; 
 - } 
 - } 
 + @ Override 
 + public void onItemAddedOrUpdated ( V item ) { 
 + addItemOrUpdateImpl ( item ) ; 
 + processDirtyOverlays ( ) ; 
 + notifySubscribers ( ) ; 
 } 
 
 - public void stopReconverting ( ) { 
 - if ( isForceReconverted ) { 
 - isForceReconverted = false ; 
 - notifySubscribers ( ) ; 
 + @ Override 
 + public void onItemsAddedOrUpdated ( List < V > items ) { 
 + for ( V item : items ) { 
 + addItemOrUpdateImpl ( item ) ; 
 } 
 - } 
 - 
 - public ArrayList < V > getRawItems ( ) { 
 - return values ; 
 + processDirtyOverlays ( ) ; 
 + notifySubscribers ( ) ; 
 } 
 
 private void addItemOrUpdateImpl ( V item ) { 
 @ @ - 107 , 7 + 105 , 11 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li 
 for ( int i = 0 ; i < values . size ( ) ; i + + ) { 
 if ( values . get ( i ) . getEngineId ( ) = = id ) { 
 values . remove ( i ) ; 
 - remove ( jsValues , i ) ; 
 + jsValues . remove ( i ) ; 
 + if ( isOverlaysSupported ) { 
 + markAsDirty ( i ) ; 
 + jsOverlays . remove ( i ) ; 
 + } 
 break ; 
 } 
 } 
 @ @ - 115 , 42 + 117 , 27 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li 
 for ( int i = 0 ; i < values . size ( ) ; i + + ) { 
 if ( sortKey > values . get ( i ) . getEngineSort ( ) ) { 
 values . add ( i , item ) ; 
 - insert ( jsValues , i , entityConverter . convert ( item ) ) ; 
 + jsValues . insert ( i , entityConverter . convert ( item ) ) ; 
 + if ( isOverlaysSupported ) { 
 + jsOverlays . insert ( i , null ) ; 
 + markAsDirty ( i ) ; 
 + } 
 return ; 
 } 
 } 
 
 values . add ( item ) ; 
 jsValues . push ( entityConverter . convert ( item ) ) ; 
 - } 
 - 
 - private void remoteItemImpl ( long id ) { 
 - for ( int i = 0 ; i < values . size ( ) ; i + + ) { 
 - if ( values . get ( i ) . getEngineId ( ) = = id ) { 
 - values . remove ( i ) ; 
 - remove ( jsValues , i ) ; 
 - break ; 
 - } 
 + if ( isOverlaysSupported ) { 
 + jsOverlays . push ( null ) ; 
 + markAsDirty ( values . size ( ) - 1 ) ; 
 } 
 } 
 
 @ Override 
 - public void onItemAddedOrUpdated ( V item ) { 
 - addItemOrUpdateImpl ( item ) ; 
 - notifySubscribers ( ) ; 
 - } 
 - 
 - @ Override 
 - public void onItemsAddedOrUpdated ( List < V > items ) { 
 - for ( V item : items ) { 
 - addItemOrUpdateImpl ( item ) ; 
 - } 
 - notifySubscribers ( ) ; 
 - } 
 - 
 - @ Override 
 public void onItemRemoved ( long id ) { 
 remoteItemImpl ( id ) ; 
 + processDirtyOverlays ( ) ; 
 notifySubscribers ( ) ; 
 } 
 
 @ @ - 159 , 43 + 146 , 189 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li 
 for ( long id : ids ) { 
 remoteItemImpl ( id ) ; 
 } 
 + processDirtyOverlays ( ) ; 
 notifySubscribers ( ) ; 
 } 
 
 + private void remoteItemImpl ( long id ) { 
 + for ( int i = 0 ; i < values . size ( ) ; i + + ) { 
 + if ( values . get ( i ) . getEngineId ( ) = = id ) { 
 + values . remove ( i ) ; 
 + jsValues . remove ( i ) ; 
 + if ( isOverlaysSupported ) { 
 + markAsDirty ( i ) ; 
 + jsOverlays . remove ( i ) ; 
 + } 
 + break ; 
 + } 
 + } 
 + } 
 + 
 @ Override 
 public void onItemsReplaced ( List < V > items ) { 
 values . clear ( ) ; 
 - clear ( jsValues ) ; 
 + jsValues . clear ( ) ; 
 + if ( isOverlaysSupported ) { 
 + jsOverlays . clear ( ) ; 
 + isOverlayDirty . clear ( ) ; 
 + } 
 onItemsAddedOrUpdated ( items ) ; 
 } 
 
 @ Override 
 public void onClear ( ) { 
 values . clear ( ) ; 
 - clear ( jsValues ) ; 
 + jsValues . clear ( ) ; 
 + if ( isOverlaysSupported ) { 
 + jsOverlays . clear ( ) ; 
 + isOverlayDirty . clear ( ) ; 
 + } 
 notifySubscribers ( ) ; 
 } 
 
 + / / 
 + / / Notifications 
 + / / 
 + 
 + public void subscribe ( JsDisplayListCallback < T > callback ) { 
 + if ( ! callbacks . contains ( callback ) ) { 
 + callbacks . add ( callback ) ; 
 + } 
 + 
 + if ( isOverlaysSupported ) { 
 + callback . onCollectionChanged ( jsValues , jsOverlays ) ; 
 + } else { 
 + callback . onCollectionChanged ( jsValues , null ) ; 
 + } 
 + } 
 + 
 + public void unsubscribe ( JsDisplayListCallback < T > callback ) { 
 + callbacks . remove ( callback ) ; 
 + } 
 + 
 + public void subscribeInverted ( JsDisplayListCallback < T > callback ) { 
 + if ( ! callbacksInverted . contains ( callback ) ) { 
 + callbacksInverted . add ( callback ) ; 
 + } 
 + 
 + if ( isOverlaysSupported ) { 
 + callback . onCollectionChanged ( jsValues . reverse ( ) , jsOverlays . reverse ( ) ) ; 
 + } else { 
 + callback . onCollectionChanged ( jsValues . reverse ( ) , null ) ; 
 + } 
 + } 
 + 
 + public void unsubscribeInverted ( JsDisplayListCallback < T > callback ) { 
 + callbacksInverted . remove ( callback ) ; 
 + } 
 + 
 private void notifySubscribers ( ) { 
 - for ( JsDisplayListCallback < T > callback : callbacks ) { 
 - callback . onCollectionChanged ( jsValues ) ; 
 + if ( isOverlaysSupported ) { 
 + for ( JsDisplayListCallback < T > callback : callbacks ) { 
 + callback . onCollectionChanged ( jsValues , jsOverlays ) ; 
 + } 
 + } else { 
 + for ( JsDisplayListCallback < T > callback : callbacks ) { 
 + callback . onCollectionChanged ( jsValues , null ) ; 
 + } 
 } 
 
 if ( callbacksInverted . size ( ) > 0 ) { 
 - JsArray < T > rev = reverse ( jsValues ) ; 
 - for ( JsDisplayListCallback < T > callback : callbacksInverted ) { 
 - callback . onCollectionChanged ( rev ) ; 
 + JsArray < T > rev = jsValues . reverse ( ) ; 
 + if ( isOverlaysSupported ) { 
 + JsArray < JavaScriptObject > revOverlays = jsOverlays . reverse ( ) ; 
 + for ( JsDisplayListCallback < T > callback : callbacksInverted ) { 
 + callback . onCollectionChanged ( rev , revOverlays ) ; 
 + } 
 + } else { 
 + for ( JsDisplayListCallback < T > callback : callbacksInverted ) { 
 + callback . onCollectionChanged ( rev , null ) ; 
 + } 
 } 
 } 
 } 
 
 - protected native void clear ( JsArray < T > array ) / * - { array . splice ( 0 , array . length ) ; } - * / ; 
 + / / 
 + / / Reconverting 
 + / / 
 
 - protected native void insert ( JsArray < T > array , int index , T obj ) / * - { array . splice ( index , 0 , obj ) ; } - * / ; 
 + public void startReconverting ( ) { 
 + isForceReconverted = false ; 
 + } 
 + 
 + public void forceReconvert ( long id ) { 
 + for ( int i = 0 ; i < values . size ( ) ; i + + ) { 
 + V value = values . get ( i ) ; 
 + if ( value . getEngineId ( ) = = id ) { 
 + jsValues . update ( i , entityConverter . convert ( value ) ) ; 
 + / / Do not update overlays as this is method is a hack for binding 
 + isForceReconverted = true ; 
 + break ; 
 + } 
 + } 
 + } 
 + 
 + public void stopReconverting ( ) { 
 + if ( isForceReconverted ) { 
 + isForceReconverted = false ; 
 + notifySubscribers ( ) ; 
 + } 
 + } 
 + 
 + / / 
 + / / Overlays 
 + / / 
 + 
 + private boolean isDirty ( int index ) { 
 + return isOverlayDirty . get ( index ) ; 
 + } 
 
 - protected native void remove ( JsArray < T > array , int index ) / * - { array . splice ( index , 1 ) ; } - * / ; 
 + private void markAsDirty ( int index ) { 
 + isOverlayDirty . set ( index , true ) ; 
 + if ( index - 1 > 0 ) { 
 + isOverlayDirty . set ( index - 1 , true ) ; 
 + } 
 + 
 + if ( index < isOverlayDirty . size ( ) ) { 
 + isOverlayDirty . set ( index + 1 , true ) ; 
 + } 
 + } 
 + 
 + private void markAsClean ( int index ) { 
 + isOverlayDirty . set ( index , false ) ; 
 + } 
 + 
 + private boolean processDirtyOverlays ( ) { 
 + if ( ! isOverlaysSupported ) { 
 + return false ; 
 + } 
 + boolean isChanged = false ; 
 + for ( int i = 0 ; i < values . size ( ) ; i + + ) { 
 + if ( ! isDirty ( i ) ) { 
 + continue ; 
 + } 
 + 
 + V prev = null ; 
 + V current = values . get ( i ) ; 
 + V next = null ; 
 + 
 + if ( i - 1 > = 0 ) { 
 + prev = values . get ( i - 1 ) ; 
 + } 
 + if ( i + 1 < values . size ( ) ) { 
 + next = values . get ( i + 1 ) ; 
 + } 
 + 
 + jsOverlays . update ( i , entityConverter . buildOverlay ( prev , current , next ) ) ; 
 + markAsClean ( i ) ; 
 + isChanged = true ; 
 + } 
 + return isChanged ; 
 + } 
 
 - protected native JsArray < T > reverse ( JsArray < T > array ) / * - { return array . slice ( ) . reverse ( ) ; } - * / ; 
 + / / 
 + / / Not required methods 
 + / / 
 
 @ Override 
 public void initCenter ( long rid ) { 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayListCallback . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayListCallback . java 
 index 43b3eb6 . . b663e79 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayListCallback . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayListCallback . java 
 @ @ - 14 , 5 + 14 , 5 @ @ import org . timepedia . exporter . client . Exportable ; 
 @ Export 
 @ ExportClosure 
 public interface JsDisplayListCallback < T extends JavaScriptObject > extends Exportable { 
 - void onCollectionChanged ( JsArray < T > array ) ; 
 + void onCollectionChanged ( JsArray < T > array , JsArray < JavaScriptObject > overlays ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsEntityConverter . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsEntityConverter . java 
 index ce776ce . . da914e7 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsEntityConverter . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsEntityConverter . java 
 @ @ - 6 , 6 + 6 , 13 @ @ package im . actor . runtime . js . mvvm ; 
 
 import com . google . gwt . core . client . JavaScriptObject ; 
 
 + import java . util . ArrayList ; 
 + 
 public interface JsEntityConverter < F , T extends JavaScriptObject > { 
 - T convert ( F value ) ; 
 + 
 + boolean isSupportOverlays ( ) ; 
 + 
 + JavaScriptObject buildOverlay ( F prev , F current , F next ) ; 
 + 
 + T convert ( F item ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsModernArray . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsModernArray . java 
 new file mode 100644 
 index 0000000 . . 8ec3cdd 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsModernArray . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package im . actor . runtime . js . utils ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + import com . google . gwt . core . client . JsArray ; 
 + 
 + public class JsModernArray < T extends JavaScriptObject > extends JsArray < T > { 
 + 
 + public native void clear ( ) / * - { this . splice ( 0 , this . length ) ; } - * / ; 
 + 
 + public native void insert ( int index , T obj ) / * - { this . splice ( index , 0 , obj ) ; } - * / ; 
 + 
 + public native void remove ( int index ) / * - { this . splice ( index , 1 ) ; } - * / ; 
 + 
 + public void update ( int index , T obj ) { 
 + remove ( index ) ; 
 + insert ( index , obj ) ; 
 + } 
 + 
 + public native JsArray < T > reverse ( ) / * - { return this . slice ( ) . reverse ( ) ; } - * / ; 
 + 
 + protected JsModernArray ( ) { 
 + 
 + } 
 + }
