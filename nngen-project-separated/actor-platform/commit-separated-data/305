BLEU SCORE: 0.2150707001701407

TEST MSG: fix ( core ) : Fixing message reading on history loading and on incorrect zero counter
GENERATED MSG: fix ( core ) : do not apply UpdateMessageReadByMe if date is older then is conversation state

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > index 685c2e6 . . 2671cba 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > @ @ - 416 , 6 + 416 , 9 @ @ public class RouterActor extends ModuleActor { < nl > conversationStates . addOrUpdateItem ( state ) ; < nl > } < nl > < nl > + / / Reading messages if needed < nl > + markAsReadIfNeeded ( peer ) ; < nl > + < nl > return Promise . success ( null ) ; < nl > } < nl > < nl > @ @ - 612 , 7 + 615 , 7 @ @ public class RouterActor extends ModuleActor { < nl > private void markAsReadIfNeeded ( Peer peer ) { < nl > if ( isConversationVisible ( peer ) ) { < nl > ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; < nl > - if ( state . getUnreadCount ( ) ! = 0 | | state . getInReadDate ( ) < state . getInMaxMessageDate ( ) ) { < nl > + if ( state . getInReadDate ( ) < state . getInMaxMessageDate ( ) ) { < nl > state = state < nl > . changeCounter ( 0 ) < nl > . changeInReadDate ( state . getInMaxMessageDate ( ) ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > index e6ef775 . . ac10b94 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > @ @ - 516 , 6 + 516 , 11 @ @ public class RouterActor extends ModuleActor { < nl > private Promise < Void > onMessageReadByMe ( Peer peer , long date , int counter ) { < nl > < nl > ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; < nl > + < nl > + if ( state . getInReadDate ( ) > = date ) { < nl > + return Promise . success ( null ) ; < nl > + } < nl > + < nl > state = state < nl > . changeCounter ( counter ) < nl > . changeInReadDate ( date ) ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 index 685c2e6 . . 2671cba 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 @ @ - 416 , 6 + 416 , 9 @ @ public class RouterActor extends ModuleActor { 
 conversationStates . addOrUpdateItem ( state ) ; 
 } 
 
 + / / Reading messages if needed 
 + markAsReadIfNeeded ( peer ) ; 
 + 
 return Promise . success ( null ) ; 
 } 
 
 @ @ - 612 , 7 + 615 , 7 @ @ public class RouterActor extends ModuleActor { 
 private void markAsReadIfNeeded ( Peer peer ) { 
 if ( isConversationVisible ( peer ) ) { 
 ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; 
 - if ( state . getUnreadCount ( ) ! = 0 | | state . getInReadDate ( ) < state . getInMaxMessageDate ( ) ) { 
 + if ( state . getInReadDate ( ) < state . getInMaxMessageDate ( ) ) { 
 state = state 
 . changeCounter ( 0 ) 
 . changeInReadDate ( state . getInMaxMessageDate ( ) ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 index e6ef775 . . ac10b94 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 @ @ - 516 , 6 + 516 , 11 @ @ public class RouterActor extends ModuleActor { 
 private Promise < Void > onMessageReadByMe ( Peer peer , long date , int counter ) { 
 
 ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; 
 + 
 + if ( state . getInReadDate ( ) > = date ) { 
 + return Promise . success ( null ) ; 
 + } 
 + 
 state = state 
 . changeCounter ( counter ) 
 . changeInReadDate ( date ) ;
