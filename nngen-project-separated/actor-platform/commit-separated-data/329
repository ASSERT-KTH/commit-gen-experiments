BLEU SCORE: 0.11823706105869772

TEST MSG: feat ( core ) : Adding animation support
GENERATED MSG: wip ( SDK ) : Adding dialog desc processing and Grouped Dialogs model

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 187eedf . . 3a649b3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 850 , 6 + 850 , 23 @ @ public class Messenger { < nl > } < nl > < nl > / * * < nl > + * Send Animation message < nl > + * < nl > + * @ param peer destination peer < nl > + * @ param fileName File name ( without path ) < nl > + * @ param w photo width < nl > + * @ param h photo height < nl > + * @ param fastThumb Fast thumb of photo < nl > + * @ param descriptor File Descriptor < nl > + * / < nl > + @ ObjectiveCName ( " sendAnimationWithPeer : withName : withW : withH : withThumb : withDescriptor : " ) < nl > + public void sendAnimation ( @ NotNull Peer peer , @ NotNull String fileName , < nl > + int w , int h , @ Nullable FastThumb fastThumb , < nl > + @ NotNull String descriptor ) { < nl > + modules . getMessagesModule ( ) . sendAnimation ( peer , fileName , w , h , fastThumb , descriptor ) ; < nl > + } < nl > + < nl > + / * * < nl > * Send Video message < nl > * < nl > * @ param peer destination peer < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > index 629b73b . . a746ffd 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > @ @ - 6 , 6 + 6 , 7 @ @ package im . actor . core . entity . content ; < nl > < nl > import java . io . IOException ; < nl > < nl > + import im . actor . core . api . ApiDocumentExAnimation ; < nl > import im . actor . core . api . ApiDocumentExPhoto ; < nl > import im . actor . core . api . ApiDocumentExVideo ; < nl > import im . actor . core . api . ApiDocumentExVoice ; < nl > @ @ - 32 , 6 + 33 , 7 @ @ import im . actor . core . entity . content . internal . AbsContentContainer ; < nl > import im . actor . core . entity . content . internal . AbsLocalContent ; < nl > import im . actor . core . entity . content . internal . ContentLocalContainer ; < nl > import im . actor . core . entity . content . internal . ContentRemoteContainer ; < nl > + import im . actor . core . entity . content . internal . LocalAnimation ; < nl > import im . actor . core . entity . content . internal . LocalDocument ; < nl > import im . actor . core . entity . content . internal . LocalPhoto ; < nl > import im . actor . core . entity . content . internal . LocalVideo ; < nl > @ @ - 90 , 6 + 92 , 8 @ @ public abstract class AbsContent { < nl > return new VideoContent ( localContainer ) ; < nl > } else if ( content instanceof LocalVoice ) { < nl > return new VoiceContent ( localContainer ) ; < nl > + } else if ( content instanceof LocalAnimation ) { < nl > + return new AnimationContent ( localContainer ) ; < nl > } else if ( content instanceof LocalDocument ) { < nl > return new DocumentContent ( localContainer ) ; < nl > } else { < nl > @ @ - 107 , 6 + 111 , 8 @ @ public abstract class AbsContent { < nl > return new VideoContent ( remoteContainer ) ; < nl > } else if ( d . getExt ( ) instanceof ApiDocumentExVoice ) { < nl > return new VoiceContent ( remoteContainer ) ; < nl > + } else if ( d . getExt ( ) instanceof ApiDocumentExAnimation ) { < nl > + return new AnimationContent ( remoteContainer ) ; < nl > } else { < nl > return new DocumentContent ( remoteContainer ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AnimationContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AnimationContent . java < nl > new file mode 100644 < nl > index 0000000 . . 232fc2d < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AnimationContent . java < nl > @ @ - 0 , 0 + 1 , 69 @ @ < nl > + package im . actor . core . entity . content ; < nl > + < nl > + import im . actor . core . api . ApiDocumentExAnimation ; < nl > + import im . actor . core . api . ApiDocumentMessage ; < nl > + import im . actor . core . api . ApiFastThumb ; < nl > + import im . actor . core . entity . FileReference ; < nl > + import im . actor . core . entity . content . internal . ContentLocalContainer ; < nl > + import im . actor . core . entity . content . internal . ContentRemoteContainer ; < nl > + import im . actor . core . entity . content . internal . LocalAnimation ; < nl > + import im . actor . core . entity . content . internal . LocalFastThumb ; < nl > + import im . actor . core . entity . content . internal . LocalVideo ; < nl > + < nl > + public class AnimationContent extends DocumentContent { < nl > + < nl > + public static AnimationContent createLocalAnimation ( String descriptor , String fileName , int fileSize , < nl > + int w , int h , FastThumb fastThumb ) { < nl > + return new AnimationContent ( new ContentLocalContainer ( < nl > + new LocalAnimation ( < nl > + fileName , < nl > + descriptor , < nl > + fileSize , < nl > + " image / gif " , < nl > + fastThumb ! = null ? new LocalFastThumb ( fastThumb ) : null , < nl > + w , h ) ) ) ; < nl > + } < nl > + < nl > + public static AnimationContent createRemoteAnimation ( FileReference reference , int w , int h , < nl > + FastThumb fastThumb ) { < nl > + return new AnimationContent ( new ContentRemoteContainer ( < nl > + new ApiDocumentMessage ( reference . getFileId ( ) , < nl > + reference . getAccessHash ( ) , < nl > + reference . getFileSize ( ) , < nl > + reference . getFileName ( ) , < nl > + " image / gif " , < nl > + fastThumb ! = null ? < nl > + new ApiFastThumb ( < nl > + fastThumb . getW ( ) , < nl > + fastThumb . getH ( ) , < nl > + fastThumb . getImage ( ) ) : < nl > + null , < nl > + new ApiDocumentExAnimation ( w , h ) ) ) ) ; < nl > + } < nl > + < nl > + private int w ; < nl > + private int h ; < nl > + < nl > + public AnimationContent ( ContentRemoteContainer contentContainer ) { < nl > + super ( contentContainer ) ; < nl > + ApiDocumentExAnimation animation = < nl > + ( ApiDocumentExAnimation ) ( ( ApiDocumentMessage ) contentContainer . getMessage ( ) ) . getExt ( ) ; < nl > + w = animation . getW ( ) ; < nl > + h = animation . getH ( ) ; < nl > + } < nl > + < nl > + public AnimationContent ( ContentLocalContainer contentContainer ) { < nl > + super ( contentContainer ) ; < nl > + LocalVideo localVideo = ( LocalVideo ) contentContainer . getContent ( ) ; < nl > + w = localVideo . getW ( ) ; < nl > + h = localVideo . getH ( ) ; < nl > + } < nl > + < nl > + public int getW ( ) { < nl > + return w ; < nl > + } < nl > + < nl > + public int getH ( ) { < nl > + return h ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / AbsLocalContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / AbsLocalContent . java < nl > index 52466b7 . . d7a320b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / AbsLocalContent . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / AbsLocalContent . java < nl > @ @ - 14 , 9 + 14 , 12 @ @ import im . actor . runtime . bser . DataInput ; < nl > import im . actor . runtime . bser . DataOutput ; < nl > < nl > public abstract class AbsLocalContent extends BserObject { < nl > + < nl > private static final int CONTENT _ DOC = 0 ; < nl > private static final int CONTENT _ PHOTO = 1 ; < nl > private static final int CONTENT _ VIDEO = 2 ; < nl > + private static final int CONTENT _ VOICE = 3 ; < nl > + private static final int CONTENT _ ANIMATION = 4 ; < nl > < nl > public static AbsLocalContent loadContainer ( byte [ ] data ) throws IOException { < nl > BserValues values = new BserValues ( BserParser . deserialize ( new DataInput ( data ) ) ) ; < nl > @ @ - 28 , 6 + 31 , 10 @ @ public abstract class AbsLocalContent extends BserObject { < nl > return new LocalPhoto ( content ) ; < nl > } else if ( type = = CONTENT _ VIDEO ) { < nl > return new LocalVideo ( content ) ; < nl > + } else if ( type = = CONTENT _ VOICE ) { < nl > + return new LocalVoice ( content ) ; < nl > + } else if ( type = = CONTENT _ ANIMATION ) { < nl > + return new LocalAnimation ( content ) ; < nl > } else { < nl > throw new IOException ( " Unknown type " ) ; < nl > } < nl > @ @ - 42 , 6 + 49 , 10 @ @ public abstract class AbsLocalContent extends BserObject { < nl > writer . writeInt ( 1 , CONTENT _ VIDEO ) ; < nl > } else if ( this instanceof LocalDocument ) { < nl > writer . writeInt ( 1 , CONTENT _ DOC ) ; < nl > + } else if ( this instanceof LocalVoice ) { < nl > + writer . writeInt ( 1 , CONTENT _ VOICE ) ; < nl > + } else if ( this instanceof LocalAnimation ) { < nl > + writer . writeInt ( 1 , CONTENT _ ANIMATION ) ; < nl > } else { < nl > throw new IOException ( " Unknown type " ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / LocalAnimation . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / LocalAnimation . java < nl > new file mode 100644 < nl > index 0000000 . . a8fd17e < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / LocalAnimation . java < nl > @ @ - 0 , 0 + 1 , 49 @ @ < nl > + package im . actor . core . entity . content . internal ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + < nl > + public class LocalAnimation extends LocalDocument { < nl > + < nl > + private int w ; < nl > + private int h ; < nl > + < nl > + public LocalAnimation ( String fileName , String fileDescriptor , int fileSize , String mimeType , < nl > + LocalFastThumb fastThumb , int w , int h ) { < nl > + super ( fileName , fileDescriptor , fileSize , mimeType , fastThumb ) ; < nl > + this . w = w ; < nl > + this . h = h ; < nl > + } < nl > + < nl > + public LocalAnimation ( byte [ ] data ) throws IOException { < nl > + super ( data ) ; < nl > + } < nl > + < nl > + public LocalAnimation ( BserValues values ) throws IOException { < nl > + super ( values ) ; < nl > + } < nl > + < nl > + public int getW ( ) { < nl > + return w ; < nl > + } < nl > + < nl > + public int getH ( ) { < nl > + return h ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + super . parse ( values ) ; < nl > + w = values . getInt ( 10 ) ; < nl > + h = values . getInt ( 11 ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + super . serialize ( writer ) ; < nl > + writer . writeInt ( 10 , w ) ; < nl > + writer . writeInt ( 11 , h ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / LocalVideo . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / LocalVideo . java < nl > index 71acc98 . . 31bcce7 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / LocalVideo . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / LocalVideo . java < nl > @ @ - 10 , 6 + 10 , 7 @ @ import im . actor . runtime . bser . BserValues ; < nl > import im . actor . runtime . bser . BserWriter ; < nl > < nl > public class LocalVideo extends LocalDocument { < nl > + < nl > private int w ; < nl > private int h ; < nl > private int duration ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > index 76ffb68 . . a7b49d8 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > @ @ - 239 , 6 + 239 , 14 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > fileName , reference . getSize ( ) , w , h ) ) ; < nl > } < nl > < nl > + public void sendAnimation ( @ NotNull Peer peer , @ NotNull String fileName , int w , int h , @ Nullable FastThumb fastThumb , < nl > + @ NotNull String descriptor ) { < nl > + FileSystemReference reference = Storage . fileFromDescriptor ( descriptor ) ; < nl > + sendMessageActor . send ( new SenderActor . SendAnimation ( peer , fastThumb , < nl > + descriptor , < nl > + fileName , reference . getSize ( ) , w , h ) ) ; < nl > + } < nl > + < nl > public void sendVideo ( Peer peer , String fileName , int w , int h , int duration , < nl > FastThumb fastThumb , String descriptor ) { < nl > FileSystemReference reference = Storage . fileFromDescriptor ( descriptor ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / SenderActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / SenderActor . java < nl > index 9d4425d . . fdf37bf 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / SenderActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / SenderActor . java < nl > @ @ - 36 , 6 + 36 , 7 @ @ import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerType ; < nl > import im . actor . core . entity . User ; < nl > import im . actor . core . entity . content . AbsContent ; < nl > + import im . actor . core . entity . content . AnimationContent ; < nl > import im . actor . core . entity . content . ContactContent ; < nl > import im . actor . core . entity . content . DocumentContent ; < nl > import im . actor . core . entity . content . FastThumb ; < nl > @ @ - 210 , 31 + 211 , 38 @ @ public class SenderActor extends ModuleActor { < nl > performSendContent ( peer , rid , content ) ; < nl > } < nl > < nl > + public void doSendContact ( @ NotNull Peer peer , < nl > + @ NotNull ArrayList < String > emails , @ NotNull ArrayList < String > phones , < nl > + @ Nullable String name , < nl > + @ Nullable String base64photo ) { < nl > < nl > - / / Sending documents < nl > - < nl > - public void doSendDocument ( Peer peer , String fileName , String mimeType , int fileSize , < nl > - FastThumb fastThumb , String descriptor ) { < nl > long rid = RandomUtils . nextRid ( ) ; < nl > long date = createPendingDate ( ) ; < nl > long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; < nl > - DocumentContent documentContent = DocumentContent . createLocal ( fileName , fileSize , < nl > - descriptor , mimeType , fastThumb ) ; < nl > < nl > - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , documentContent ) ; < nl > + < nl > + ContactContent content = ContactContent . create ( name , phones , emails , base64photo ) ; < nl > + < nl > + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content ) ; < nl > context ( ) . getMessagesModule ( ) . getRouter ( ) . onOutgoingMessage ( peer , message ) ; < nl > < nl > - pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , documentContent ) ) ; < nl > + pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , content ) ) ; < nl > savePending ( ) ; < nl > < nl > - performUploadFile ( rid , descriptor , fileName ) ; < nl > + performSendContent ( peer , rid , content ) ; < nl > } < nl > < nl > - public void doForwardContent ( Peer peer , AbsContent content ) { < nl > + public void doSendLocation ( @ NotNull Peer peer , < nl > + @ NotNull Double longitude , @ NotNull Double latitude , < nl > + @ Nullable String street , @ Nullable String place ) { < nl > + < nl > long rid = RandomUtils . nextRid ( ) ; < nl > long date = createPendingDate ( ) ; < nl > long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; < nl > < nl > + < nl > + LocationContent content = LocationContent . create ( longitude , latitude , street , place ) ; < nl > + < nl > Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content ) ; < nl > context ( ) . getMessagesModule ( ) . getRouter ( ) . onOutgoingMessage ( peer , message ) ; < nl > < nl > @ @ - 244 , 42 + 252 , 53 @ @ public class SenderActor extends ModuleActor { < nl > performSendContent ( peer , rid , content ) ; < nl > } < nl > < nl > - public void doSendPhoto ( Peer peer , FastThumb fastThumb , String descriptor , String fileName , < nl > - int fileSize , int w , int h ) { < nl > + public void doForwardContent ( Peer peer , AbsContent content ) { < nl > long rid = RandomUtils . nextRid ( ) ; < nl > long date = createPendingDate ( ) ; < nl > long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; < nl > - PhotoContent photoContent = PhotoContent . createLocalPhoto ( descriptor , fileName , fileSize , w , h , fastThumb ) ; < nl > < nl > - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , photoContent ) ; < nl > + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content ) ; < nl > context ( ) . getMessagesModule ( ) . getRouter ( ) . onOutgoingMessage ( peer , message ) ; < nl > < nl > - pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , photoContent ) ) ; < nl > + pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , content ) ) ; < nl > savePending ( ) ; < nl > < nl > - performUploadFile ( rid , descriptor , fileName ) ; < nl > + performSendContent ( peer , rid , content ) ; < nl > } < nl > < nl > - public void doSendContact ( @ NotNull Peer peer , < nl > - @ NotNull ArrayList < String > emails , @ NotNull ArrayList < String > phones , < nl > - @ Nullable String name , < nl > - @ Nullable String base64photo ) { < nl > - < nl > + / / Sending documents < nl > < nl > + public void doSendDocument ( Peer peer , String fileName , String mimeType , int fileSize , < nl > + FastThumb fastThumb , String descriptor ) { < nl > long rid = RandomUtils . nextRid ( ) ; < nl > long date = createPendingDate ( ) ; < nl > long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; < nl > + DocumentContent documentContent = DocumentContent . createLocal ( fileName , fileSize , < nl > + descriptor , mimeType , fastThumb ) ; < nl > < nl > + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , documentContent ) ; < nl > + context ( ) . getMessagesModule ( ) . getRouter ( ) . onOutgoingMessage ( peer , message ) ; < nl > < nl > - ContactContent content = ContactContent . create ( name , phones , emails , base64photo ) ; < nl > + pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , documentContent ) ) ; < nl > + savePending ( ) ; < nl > < nl > - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content ) ; < nl > + performUploadFile ( rid , descriptor , fileName ) ; < nl > + } < nl > + < nl > + public void doSendPhoto ( Peer peer , FastThumb fastThumb , String descriptor , String fileName , < nl > + int fileSize , int w , int h ) { < nl > + long rid = RandomUtils . nextRid ( ) ; < nl > + long date = createPendingDate ( ) ; < nl > + long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; < nl > + PhotoContent photoContent = PhotoContent . createLocalPhoto ( descriptor , fileName , fileSize , w , h , fastThumb ) ; < nl > + < nl > + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , photoContent ) ; < nl > context ( ) . getMessagesModule ( ) . getRouter ( ) . onOutgoingMessage ( peer , message ) ; < nl > < nl > - pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , content ) ) ; < nl > + pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , photoContent ) ) ; < nl > savePending ( ) ; < nl > < nl > - performSendContent ( peer , rid , content ) ; < nl > + performUploadFile ( rid , descriptor , fileName ) ; < nl > } < nl > < nl > public void doSendAudio ( Peer peer , String descriptor , String fileName , < nl > @ @ - 298 , 34 + 317 , 30 @ @ public class SenderActor extends ModuleActor { < nl > performUploadFile ( rid , descriptor , fileName ) ; < nl > } < nl > < nl > - public void doSendLocation ( @ NotNull Peer peer , < nl > - @ NotNull Double longitude , @ NotNull Double latitude , < nl > - @ Nullable String street , @ Nullable String place ) { < nl > - < nl > - < nl > + public void doSendVideo ( Peer peer , String fileName , int w , int h , int duration , < nl > + FastThumb fastThumb , String descriptor , int fileSize ) { < nl > long rid = RandomUtils . nextRid ( ) ; < nl > long date = createPendingDate ( ) ; < nl > long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; < nl > + VideoContent videoContent = VideoContent . createLocalVideo ( descriptor , < nl > + fileName , fileSize , w , h , duration , fastThumb ) ; < nl > < nl > - < nl > - LocationContent content = LocationContent . create ( longitude , latitude , street , place ) ; < nl > - < nl > - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content ) ; < nl > + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , videoContent ) ; < nl > context ( ) . getMessagesModule ( ) . getRouter ( ) . onOutgoingMessage ( peer , message ) ; < nl > < nl > - pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , content ) ) ; < nl > + pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , videoContent ) ) ; < nl > savePending ( ) ; < nl > < nl > - performSendContent ( peer , rid , content ) ; < nl > + performUploadFile ( rid , descriptor , fileName ) ; < nl > } < nl > < nl > - public void doSendVideo ( Peer peer , String fileName , int w , int h , int duration , < nl > - FastThumb fastThumb , String descriptor , int fileSize ) { < nl > + public void doSendAnimation ( Peer peer , String fileName , int w , int h , < nl > + FastThumb fastThumb , String descriptor , int fileSize ) { < nl > long rid = RandomUtils . nextRid ( ) ; < nl > long date = createPendingDate ( ) ; < nl > long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; < nl > - VideoContent videoContent = VideoContent . createLocalVideo ( descriptor , < nl > - fileName , fileSize , w , h , duration , fastThumb ) ; < nl > + AnimationContent videoContent = AnimationContent . createLocalAnimation ( descriptor , < nl > + fileName , fileSize , w , h , fastThumb ) ; < nl > < nl > Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , videoContent ) ; < nl > context ( ) . getMessagesModule ( ) . getRouter ( ) . onOutgoingMessage ( peer , message ) ; < nl > @ @ - 365 , 6 + 380 , 10 @ @ public class SenderActor extends ModuleActor { < nl > } else if ( msg . getContent ( ) instanceof DocumentContent ) { < nl > DocumentContent baseDocContent = ( DocumentContent ) msg . getContent ( ) ; < nl > nContent = DocumentContent . createRemoteDocument ( fileReference , baseDocContent . getFastThumb ( ) ) ; < nl > + } else if ( msg . getContent ( ) instanceof AnimationContent ) { < nl > + AnimationContent baseAnimcationContent = ( AnimationContent ) msg . getContent ( ) ; < nl > + nContent = AnimationContent . createRemoteAnimation ( fileReference , baseAnimcationContent . getW ( ) , < nl > + baseAnimcationContent . getH ( ) , baseAnimcationContent . getFastThumb ( ) ) ; < nl > } else { < nl > return ; < nl > } < nl > @ @ - 554 , 6 + 573 , 11 @ @ public class SenderActor extends ModuleActor { < nl > } else if ( message instanceof ForwardContent ) { < nl > ForwardContent forwardContent = ( ForwardContent ) message ; < nl > doForwardContent ( forwardContent . getPeer ( ) , forwardContent . getContent ( ) ) ; < nl > + } else if ( message instanceof SendAnimation ) { < nl > + SendAnimation animation = ( SendAnimation ) message ; < nl > + doSendAnimation ( animation . getPeer ( ) , animation . getFileName ( ) , < nl > + animation . getW ( ) , animation . getH ( ) , animation . getFastThumb ( ) , animation . getDescriptor ( ) , < nl > + animation . getFileSize ( ) ) ; < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > @ @ - 669 , 6 + 693 , 57 @ @ public class SenderActor extends ModuleActor { < nl > } < nl > } < nl > < nl > + < nl > + public static class SendAnimation { < nl > + < nl > + private Peer peer ; < nl > + private FastThumb fastThumb ; < nl > + private String descriptor ; < nl > + private String fileName ; < nl > + private int fileSize ; < nl > + private int w ; < nl > + private int h ; < nl > + < nl > + public SendAnimation ( Peer peer , FastThumb fastThumb , String descriptor , String fileName , < nl > + int fileSize , int w , int h ) { < nl > + this . peer = peer ; < nl > + this . fastThumb = fastThumb ; < nl > + this . descriptor = descriptor ; < nl > + this . fileName = fileName ; < nl > + this . fileSize = fileSize ; < nl > + this . w = w ; < nl > + this . h = h ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public FastThumb getFastThumb ( ) { < nl > + return fastThumb ; < nl > + } < nl > + < nl > + public String getDescriptor ( ) { < nl > + return descriptor ; < nl > + } < nl > + < nl > + public String getFileName ( ) { < nl > + return fileName ; < nl > + } < nl > + < nl > + public int getFileSize ( ) { < nl > + return fileSize ; < nl > + } < nl > + < nl > + public int getW ( ) { < nl > + return w ; < nl > + } < nl > + < nl > + public int getH ( ) { < nl > + return h ; < nl > + } < nl > + } < nl > + < nl > public static class SendVideo { < nl > private Peer peer ; < nl > private String fileName ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java < nl > deleted file mode 100644 < nl > index bb8078b . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java < nl > + + + / dev / null < nl > @ @ - 1 , 80 + 0 , 0 @ @ < nl > - package im . actor . core . entity ; < nl > - < nl > - import com . google . j2objc . annotations . Property ; < nl > - < nl > - import java . io . IOException ; < nl > - < nl > - import im . actor . runtime . bser . BserObject ; < nl > - import im . actor . runtime . bser . BserValues ; < nl > - import im . actor . runtime . bser . BserWriter ; < nl > - import im . actor . runtime . storage . KeyValueItem ; < nl > - < nl > - public class DialogDesc extends BserObject implements KeyValueItem { < nl > - < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private Peer peer ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private String title ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private Avatar avatar ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private boolean isUnread ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private int counter ; < nl > - < nl > - public DialogDesc ( Peer peer , String title , Avatar avatar , boolean isUnread , int counter ) { < nl > - this . peer = peer ; < nl > - this . title = title ; < nl > - this . avatar = avatar ; < nl > - this . isUnread = isUnread ; < nl > - this . counter = counter ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public String getTitle ( ) { < nl > - return title ; < nl > - } < nl > - < nl > - public Avatar getAvatar ( ) { < nl > - return avatar ; < nl > - } < nl > - < nl > - public int getCounter ( ) { < nl > - return counter ; < nl > - } < nl > - < nl > - public boolean isUnread ( ) { < nl > - return isUnread ; < nl > - } < nl > - < nl > - @ Override < nl > - public void parse ( BserValues values ) throws IOException { < nl > - peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; < nl > - title = values . getString ( 2 ) ; < nl > - byte [ ] av = values . getBytes ( 3 ) ; < nl > - if ( av ! = null ) { < nl > - avatar = new Avatar ( av ) ; < nl > - } < nl > - counter = values . getInt ( 4 ) ; < nl > - isUnread = values . getBool ( 5 ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void serialize ( BserWriter writer ) throws IOException { < nl > - writer . writeObject ( 1 , peer ) ; < nl > - writer . writeString ( 2 , title ) ; < nl > - if ( avatar ! = null ) { < nl > - writer . writeObject ( 3 , avatar ) ; < nl > - } < nl > - writer . writeInt ( 4 , counter ) ; < nl > - writer . writeBool ( 5 , isUnread ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public long getEngineId ( ) { < nl > - return peer . getUnuqueId ( ) ; < nl > - } < nl > - } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java < nl > new file mode 100644 < nl > index 0000000 . . d0c5624 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java < nl > @ @ - 0 , 0 + 1 , 69 @ @ < nl > + package im . actor . core . entity ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . runtime . bser . BserCreator ; < nl > + import im . actor . runtime . bser . BserObject ; < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + import im . actor . runtime . storage . KeyValueItem ; < nl > + < nl > + public class DialogSpec extends BserObject implements KeyValueItem { < nl > + < nl > + public static BserCreator < DialogSpec > CREATOR = new BserCreator < DialogSpec > ( ) { < nl > + @ Override < nl > + public DialogSpec createInstance ( ) { < nl > + return new DialogSpec ( ) ; < nl > + } < nl > + } ; < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private Peer peer ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private boolean isUnread ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private int counter ; < nl > + < nl > + public DialogSpec ( Peer peer , boolean isUnread , int counter ) { < nl > + this . peer = peer ; < nl > + this . isUnread = isUnread ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + private DialogSpec ( ) { < nl > + < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + < nl > + public boolean isUnread ( ) { < nl > + return isUnread ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; < nl > + counter = values . getInt ( 2 ) ; < nl > + isUnread = values . getBool ( 3 ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + writer . writeObject ( 1 , peer ) ; < nl > + writer . writeInt ( 2 , counter ) ; < nl > + writer . writeBool ( 3 , isUnread ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public long getEngineId ( ) { < nl > + return peer . getUnuqueId ( ) ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > index 28142c9 . . baf3eaf 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . runtime . storage . PreferencesStorage ; < nl > public abstract class AbsModule { < nl > < nl > public static final String STORAGE _ DIALOGS = " dialogs " ; < nl > + public static final String STORAGE _ DIALOGS _ DESC = " dialogs _ desc " ; < nl > public static final String STORAGE _ USERS = " users " ; < nl > public static final String STORAGE _ GROUPS = " groups " ; < nl > public static final String STORAGE _ DOWNLOADS = " downloads " ; < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index 30e0d85 . . 88416ee 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 20 , 6 + 20 , 7 @ @ import im . actor . core . api . rpc . ResponseSeq ; < nl > import im . actor . core . api . updates . UpdateChatClear ; < nl > import im . actor . core . api . updates . UpdateChatDelete ; < nl > import im . actor . core . entity . Dialog ; < nl > + import im . actor . core . entity . DialogSpec ; < nl > import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . Peer ; < nl > @ @ - 48 , 6 + 49 , 7 @ @ import im . actor . core . network . RpcInternalException ; < nl > import im . actor . core . viewmodel . Command ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . core . viewmodel . DialogGroupsVM ; < nl > + import im . actor . core . viewmodel . DialogSpecVM ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > @ @ - 56 , 6 + 58 , 8 @ @ import im . actor . runtime . actors . tools . BounceFilterActor ; < nl > import im . actor . runtime . eventbus . BusSubscriber ; < nl > import im . actor . runtime . eventbus . Event ; < nl > import im . actor . runtime . files . FileSystemReference ; < nl > + import im . actor . runtime . mvvm . MVVMCollection ; < nl > + import im . actor . runtime . storage . KeyValueEngine ; < nl > import im . actor . runtime . storage . ListEngine ; < nl > import im . actor . runtime . storage . SyncKeyValue ; < nl > < nl > @ @ - 83 , 11 + 87 , 14 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > < nl > private final SyncKeyValue cursorStorage ; < nl > < nl > + private final MVVMCollection < DialogSpec , DialogSpecVM > dialogDescKeyValue ; < nl > + < nl > private final DialogGroupsVM dialogGroups = new DialogGroupsVM ( ) ; < nl > < nl > public MessagesModule ( final ModuleContext context ) { < nl > super ( context ) ; < nl > < nl > + this . dialogDescKeyValue = Storage . createKeyValue ( STORAGE _ DIALOGS _ DESC , DialogSpecVM . CREATOR , DialogSpec . CREATOR ) ; < nl > this . cursorStorage = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ CURSOR ) ) ; < nl > this . dialogs = Storage . createList ( STORAGE _ DIALOGS , Dialog . CREATOR ) ; < nl > } < nl > @ @ - 157 , 6 + 164 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > return dialogGroups ; < nl > } < nl > < nl > + public MVVMCollection < DialogSpec , DialogSpecVM > getDialogDescKeyValue ( ) { < nl > + return dialogDescKeyValue ; < nl > + } < nl > + < nl > public ActorRef getSendMessageActor ( ) { < nl > return sendMessageActor ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > index f0fdf00 . . b881551 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > @ @ - 1 , 20 + 1 , 26 @ @ < nl > package im . actor . core . modules . internal . messages ; < nl > < nl > import java . util . ArrayList ; < nl > - import java . util . HashMap ; < nl > < nl > import im . actor . core . entity . Avatar ; < nl > - import im . actor . core . entity . DialogDesc ; < nl > + import im . actor . core . entity . DialogSpec ; < nl > + import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerType ; < nl > + import im . actor . core . entity . User ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . internal . messages . entity . GroupedStorage ; < nl > import im . actor . core . modules . utils . ModuleActor ; < nl > import im . actor . core . viewmodel . DialogGroup ; < nl > + import im . actor . core . viewmodel . DialogSmall ; < nl > + import im . actor . core . viewmodel . DialogSpecVM ; < nl > + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; < nl > + import im . actor . runtime . mvvm . MVVMCollection ; < nl > < nl > public class GroupedDialogsActor extends ModuleActor { < nl > < nl > - private PeerGroup groups = new PeerGroup ( " groups " , " Groups " ) ; < nl > - private PeerGroup privates = new PeerGroup ( " private " , " Private " ) ; < nl > + private GroupedStorage storage ; < nl > + private MVVMCollection < DialogSpec , DialogSpecVM > specs ; < nl > < nl > public GroupedDialogsActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 23 , 6 + 29 , 8 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > @ Override < nl > public void preStart ( ) { < nl > super . preStart ( ) ; < nl > + specs = context ( ) . getMessagesModule ( ) . getDialogDescKeyValue ( ) ; < nl > + storage = new GroupedStorage ( ) ; < nl > } < nl > < nl > private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { < nl > @ @ - 31 , 38 + 39 , 82 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > < nl > private void onNewMessage ( Peer peer , long sortDate , int counter ) { < nl > < nl > - PeerGroup peerGroup ; < nl > - if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > - peerGroup = groups ; < nl > - } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > - peerGroup = privates ; < nl > - } else { < nl > - return ; < nl > - } < nl > + / / Updating dialog spec < nl > + DialogSpec spec = new DialogSpec ( peer , false , counter ) ; < nl > + specs . getEngine ( ) . addOrUpdateItem ( spec ) ; < nl > < nl > boolean found = false ; < nl > - for ( PeerDesc d : peerGroup . getPeers ( ) ) { < nl > - if ( d . getPeer ( ) . equals ( peer ) ) { < nl > - d . setCounter ( counter ) ; < nl > + for ( Peer p : storage . getPrivatePeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > + found = true ; < nl > + break ; < nl > + } < nl > + } < nl > + for ( Peer p : storage . getGroupPeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > found = true ; < nl > + break ; < nl > } < nl > } < nl > < nl > if ( ! found ) { < nl > - peerGroup . getPeers ( ) . add ( new PeerDesc ( peer , counter ) ) ; < nl > + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + storage . getPrivatePeers ( ) . add ( peer ) ; < nl > + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + storage . getGroupPeers ( ) . add ( peer ) ; < nl > + } else { < nl > + return ; < nl > + } < nl > } < nl > < nl > - ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; < nl > - ArrayList < DialogDesc > groupDescs = new ArrayList < DialogDesc > ( ) ; < nl > - for ( PeerDesc d : peerGroup . getPeers ( ) ) { < nl > - groupDescs . add ( new DialogDesc ( d . getPeer ( ) , " GRPOUP # " + d . getPeer ( ) . getPeerId ( ) , < nl > - null , false , d . counter ) ) ; < nl > + notifyVM ( ) ; < nl > + saveStorage ( ) ; < nl > + } < nl > + < nl > + private void notifyVM ( ) { < nl > + ArrayListDialogSmall groupSpecs = new ArrayListDialogSmall ( ) ; < nl > + for ( Peer p : storage . getGroupPeers ( ) ) { < nl > + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; < nl > + if ( p . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group group = getGroup ( p . getPeerId ( ) ) ; < nl > + groupSpecs . add ( new DialogSmall ( p , < nl > + group . getTitle ( ) , group . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + User user = getUser ( p . getPeerId ( ) ) ; < nl > + groupSpecs . add ( new DialogSmall ( p , < nl > + user . getName ( ) , user . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } < nl > + } < nl > + < nl > + ArrayListDialogSmall privateSpecs = new ArrayListDialogSmall ( ) ; < nl > + for ( Peer p : storage . getPrivatePeers ( ) ) { < nl > + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; < nl > + if ( p . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group group = getGroup ( p . getPeerId ( ) ) ; < nl > + privateSpecs . add ( new DialogSmall ( p , < nl > + group . getTitle ( ) , group . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + User user = getUser ( p . getPeerId ( ) ) ; < nl > + privateSpecs . add ( new DialogSmall ( p , < nl > + user . getName ( ) , user . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } < nl > } < nl > - groups . add ( new DialogGroup ( " Groups " , " group " , groupDescs ) ) ; < nl > + < nl > + ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; < nl > + groups . add ( new DialogGroup ( " Groups " , " groups " , groupSpecs ) ) ; < nl > + groups . add ( new DialogGroup ( " Private " , " private " , privateSpecs ) ) ; < nl > < nl > context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; < nl > } < nl > < nl > + private void saveStorage ( ) { < nl > + / / TODO : Implement < nl > + } < nl > + < nl > @ Override < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof PeerInformationChanged ) { < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java < nl > new file mode 100644 < nl > index 0000000 . . 3e7340c < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java < nl > @ @ - 0 , 0 + 1 , 57 @ @ < nl > + package im . actor . core . modules . internal . messages . entity ; < nl > + < nl > + import java . io . IOException ; < nl > + import java . util . ArrayList ; < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . entity . DialogSpec ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . viewmodel . DialogSpecVM ; < nl > + import im . actor . runtime . bser . BserObject ; < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + import im . actor . runtime . mvvm . MVVMCollection ; < nl > + < nl > + public class GroupedStorage extends BserObject { < nl > + < nl > + private ArrayList < Peer > groupPeers = new ArrayList < Peer > ( ) ; < nl > + private ArrayList < Peer > privatePeers = new ArrayList < Peer > ( ) ; < nl > + < nl > + public GroupedStorage ( ) { < nl > + } < nl > + < nl > + public GroupedStorage ( byte [ ] data ) throws IOException { < nl > + super . load ( data ) ; < nl > + } < nl > + < nl > + public ArrayList < Peer > getGroupPeers ( ) { < nl > + return groupPeers ; < nl > + } < nl > + < nl > + public ArrayList < Peer > getPrivatePeers ( ) { < nl > + return privatePeers ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + List < byte [ ] > rawPrivatePeers = values . getRepeatedBytes ( 1 ) ; < nl > + groupPeers . clear ( ) ; < nl > + for ( byte [ ] b : rawPrivatePeers ) { < nl > + groupPeers . add ( Peer . fromBytes ( b ) ) ; < nl > + } < nl > + List < byte [ ] > rawGroupPeers = values . getRepeatedBytes ( 2 ) ; < nl > + for ( byte [ ] b : rawGroupPeers ) { < nl > + privatePeers . add ( Peer . fromBytes ( b ) ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + for ( Peer peer : privatePeers ) { < nl > + writer . writeObject ( 1 , peer ) ; < nl > + } < nl > + for ( Peer peer : groupPeers ) { < nl > + writer . writeObject ( 2 , peer ) ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > index ae47f02 . . 47935a1 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > @ @ - 1 , 16 + 1 , 19 @ @ < nl > package im . actor . core . viewmodel ; < nl > < nl > - import java . util . ArrayList ; < nl > + import com . google . j2objc . annotations . Property ; < nl > < nl > - import im . actor . core . entity . DialogDesc ; < nl > + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; < nl > < nl > public class DialogGroup { < nl > < nl > + @ Property ( " readonly , nonatomic " ) < nl > private String title ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > private String key ; < nl > - private ArrayList < DialogDesc > dialogs ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private ArrayListDialogSmall dialogs ; < nl > < nl > - public DialogGroup ( String title , String key , ArrayList < DialogDesc > dialogs ) { < nl > + public DialogGroup ( String title , String key , ArrayListDialogSmall dialogs ) { < nl > this . title = title ; < nl > this . key = key ; < nl > this . dialogs = dialogs ; < nl > @ @ - 24 , 7 + 27 , 7 @ @ public class DialogGroup { < nl > return key ; < nl > } < nl > < nl > - public ArrayList < DialogDesc > getDialogs ( ) { < nl > + public ArrayListDialogSmall getDialogs ( ) { < nl > return dialogs ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java < nl > new file mode 100644 < nl > index 0000000 . . b77e893 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java < nl > @ @ - 0 , 0 + 1 , 41 @ @ < nl > + package im . actor . core . viewmodel ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import im . actor . core . entity . Avatar ; < nl > + import im . actor . core . entity . Peer ; < nl > + < nl > + public class DialogSmall { < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final Peer peer ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final String title ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final Avatar avatar ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final int counter ; < nl > + < nl > + public DialogSmall ( Peer peer , String title , Avatar avatar , int counter ) { < nl > + this . peer = peer ; < nl > + this . title = title ; < nl > + this . avatar = avatar ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public String getTitle ( ) { < nl > + return title ; < nl > + } < nl > + < nl > + public Avatar getAvatar ( ) { < nl > + return avatar ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java < nl > new file mode 100644 < nl > index 0000000 . . 52a266d < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java < nl > @ @ - 0 , 0 + 1 , 53 @ @ < nl > + package im . actor . core . viewmodel ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import im . actor . core . entity . DialogSpec ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . viewmodel . generics . BooleanValueModel ; < nl > + import im . actor . core . viewmodel . generics . IntValueModel ; < nl > + import im . actor . runtime . mvvm . BaseValueModel ; < nl > + import im . actor . runtime . mvvm . ValueModelCreator ; < nl > + < nl > + public class DialogSpecVM extends BaseValueModel < DialogSpec > { < nl > + < nl > + public static ValueModelCreator < DialogSpec , DialogSpecVM > CREATOR = new ValueModelCreator < DialogSpec , DialogSpecVM > ( ) { < nl > + @ Override < nl > + public DialogSpecVM create ( DialogSpec baseValue ) { < nl > + return new DialogSpecVM ( baseValue ) ; < nl > + } < nl > + } ; < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final Peer peer ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private IntValueModel counter ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private BooleanValueModel isUnread ; < nl > + < nl > + public DialogSpecVM ( DialogSpec rawObj ) { < nl > + super ( rawObj ) ; < nl > + < nl > + this . peer = rawObj . getPeer ( ) ; < nl > + this . counter = new IntValueModel ( " dialogs . desc . counter " , rawObj . getCounter ( ) ) ; < nl > + this . isUnread = new BooleanValueModel ( " dialogs . desc . unread " , rawObj . isUnread ( ) ) ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public IntValueModel getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + < nl > + public BooleanValueModel getIsUnread ( ) { < nl > + return isUnread ; < nl > + } < nl > + < nl > + @ Override < nl > + protected void updateValues ( DialogSpec rawObj ) { < nl > + counter . change ( rawObj . getCounter ( ) ) ; < nl > + isUnread . change ( rawObj . isUnread ( ) ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java < nl > new file mode 100644 < nl > index 0000000 . . 9727306 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java < nl > @ @ - 0 , 0 + 1 , 13 @ @ < nl > + package im . actor . core . viewmodel . generics ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . core . viewmodel . DialogSmall ; < nl > + < nl > + public class ArrayListDialogSmall extends ArrayList < DialogSmall > { < nl > + < nl > + @ Override < nl > + public DialogSmall get ( int index ) { < nl > + return super . get ( index ) ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift < nl > index 32554b4 . . f496742 100644 < nl > - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift < nl > + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift < nl > @ @ - 6 , 7 + 6 , 7 @ @ import UIKit < nl > < nl > class AADebugController : AAContentTableController { < nl > < nl > - var debugData : AAManagedArrayRows < ACDialogDesc , AACommonCell > ! < nl > + var debugData : AAManagedArrayRows < ACDialogSmall , AACommonCell > ! < nl > < nl > init ( ) { < nl > super . init ( style : . Plain ) < nl > @ @ - 18 , 9 + 18 , 10 @ @ class AADebugController : AAContentTableController { < nl > < nl > override func tableDidLoad ( ) { < nl > section { ( s ) - > ( ) in < nl > - self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogDesc , AACommonCell > ) - > ( ) in < nl > - r . bindData = { ( cell : AACommonCell , data : ACDialogDesc ) - > ( ) in < nl > - cell . setContent ( data . title ) < nl > + self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogSmall , AACommonCell > ) - > ( ) in < nl > + r . bindData = { ( cell : AACommonCell , data : ACDialogSmall ) - > ( ) in < nl > + cell . setContent ( " \ ( data . counter ) - \ ( data . title ) " ) < nl > + cell . style = . Normal < nl > } < nl > } < nl > } < nl > @ @ - 30 , 11 + 31 , 11 @ @ class AADebugController : AAContentTableController { < nl > binder . bind ( ActorSDK . sharedActor ( ) . messenger . getDialogGroupsVM ( ) . getGroupsValueModel ( ) ) { ( value : JavaUtilArrayList ? ) - > ( ) in < nl > < nl > if value ! = nil { < nl > - var items = [ ACDialogDesc ] ( ) < nl > + var items = [ ACDialogSmall ] ( ) < nl > < nl > for i in 0 . . < value ! . size ( ) { < nl > - for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . getDialogs ( ) { < nl > - items . append ( j as ! ACDialogDesc ) < nl > + for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . dialogs { < nl > + items . append ( j as ! ACDialogSmall ) < nl > } < nl > } < nl > self . debugData . data = items

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 187eedf . . 3a649b3 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 850 , 6 + 850 , 23 @ @ public class Messenger { 
 } 
 
 / * * 
 + * Send Animation message 
 + * 
 + * @ param peer destination peer 
 + * @ param fileName File name ( without path ) 
 + * @ param w photo width 
 + * @ param h photo height 
 + * @ param fastThumb Fast thumb of photo 
 + * @ param descriptor File Descriptor 
 + * / 
 + @ ObjectiveCName ( " sendAnimationWithPeer : withName : withW : withH : withThumb : withDescriptor : " ) 
 + public void sendAnimation ( @ NotNull Peer peer , @ NotNull String fileName , 
 + int w , int h , @ Nullable FastThumb fastThumb , 
 + @ NotNull String descriptor ) { 
 + modules . getMessagesModule ( ) . sendAnimation ( peer , fileName , w , h , fastThumb , descriptor ) ; 
 + } 
 + 
 + / * * 
 * Send Video message 
 * 
 * @ param peer destination peer 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 index 629b73b . . a746ffd 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 @ @ - 6 , 6 + 6 , 7 @ @ package im . actor . core . entity . content ; 
 
 import java . io . IOException ; 
 
 + import im . actor . core . api . ApiDocumentExAnimation ; 
 import im . actor . core . api . ApiDocumentExPhoto ; 
 import im . actor . core . api . ApiDocumentExVideo ; 
 import im . actor . core . api . ApiDocumentExVoice ; 
 @ @ - 32 , 6 + 33 , 7 @ @ import im . actor . core . entity . content . internal . AbsContentContainer ; 
 import im . actor . core . entity . content . internal . AbsLocalContent ; 
 import im . actor . core . entity . content . internal . ContentLocalContainer ; 
 import im . actor . core . entity . content . internal . ContentRemoteContainer ; 
 + import im . actor . core . entity . content . internal . LocalAnimation ; 
 import im . actor . core . entity . content . internal . LocalDocument ; 
 import im . actor . core . entity . content . internal . LocalPhoto ; 
 import im . actor . core . entity . content . internal . LocalVideo ; 
 @ @ - 90 , 6 + 92 , 8 @ @ public abstract class AbsContent { 
 return new VideoContent ( localContainer ) ; 
 } else if ( content instanceof LocalVoice ) { 
 return new VoiceContent ( localContainer ) ; 
 + } else if ( content instanceof LocalAnimation ) { 
 + return new AnimationContent ( localContainer ) ; 
 } else if ( content instanceof LocalDocument ) { 
 return new DocumentContent ( localContainer ) ; 
 } else { 
 @ @ - 107 , 6 + 111 , 8 @ @ public abstract class AbsContent { 
 return new VideoContent ( remoteContainer ) ; 
 } else if ( d . getExt ( ) instanceof ApiDocumentExVoice ) { 
 return new VoiceContent ( remoteContainer ) ; 
 + } else if ( d . getExt ( ) instanceof ApiDocumentExAnimation ) { 
 + return new AnimationContent ( remoteContainer ) ; 
 } else { 
 return new DocumentContent ( remoteContainer ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AnimationContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AnimationContent . java 
 new file mode 100644 
 index 0000000 . . 232fc2d 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AnimationContent . java 
 @ @ - 0 , 0 + 1 , 69 @ @ 
 + package im . actor . core . entity . content ; 
 + 
 + import im . actor . core . api . ApiDocumentExAnimation ; 
 + import im . actor . core . api . ApiDocumentMessage ; 
 + import im . actor . core . api . ApiFastThumb ; 
 + import im . actor . core . entity . FileReference ; 
 + import im . actor . core . entity . content . internal . ContentLocalContainer ; 
 + import im . actor . core . entity . content . internal . ContentRemoteContainer ; 
 + import im . actor . core . entity . content . internal . LocalAnimation ; 
 + import im . actor . core . entity . content . internal . LocalFastThumb ; 
 + import im . actor . core . entity . content . internal . LocalVideo ; 
 + 
 + public class AnimationContent extends DocumentContent { 
 + 
 + public static AnimationContent createLocalAnimation ( String descriptor , String fileName , int fileSize , 
 + int w , int h , FastThumb fastThumb ) { 
 + return new AnimationContent ( new ContentLocalContainer ( 
 + new LocalAnimation ( 
 + fileName , 
 + descriptor , 
 + fileSize , 
 + " image / gif " , 
 + fastThumb ! = null ? new LocalFastThumb ( fastThumb ) : null , 
 + w , h ) ) ) ; 
 + } 
 + 
 + public static AnimationContent createRemoteAnimation ( FileReference reference , int w , int h , 
 + FastThumb fastThumb ) { 
 + return new AnimationContent ( new ContentRemoteContainer ( 
 + new ApiDocumentMessage ( reference . getFileId ( ) , 
 + reference . getAccessHash ( ) , 
 + reference . getFileSize ( ) , 
 + reference . getFileName ( ) , 
 + " image / gif " , 
 + fastThumb ! = null ? 
 + new ApiFastThumb ( 
 + fastThumb . getW ( ) , 
 + fastThumb . getH ( ) , 
 + fastThumb . getImage ( ) ) : 
 + null , 
 + new ApiDocumentExAnimation ( w , h ) ) ) ) ; 
 + } 
 + 
 + private int w ; 
 + private int h ; 
 + 
 + public AnimationContent ( ContentRemoteContainer contentContainer ) { 
 + super ( contentContainer ) ; 
 + ApiDocumentExAnimation animation = 
 + ( ApiDocumentExAnimation ) ( ( ApiDocumentMessage ) contentContainer . getMessage ( ) ) . getExt ( ) ; 
 + w = animation . getW ( ) ; 
 + h = animation . getH ( ) ; 
 + } 
 + 
 + public AnimationContent ( ContentLocalContainer contentContainer ) { 
 + super ( contentContainer ) ; 
 + LocalVideo localVideo = ( LocalVideo ) contentContainer . getContent ( ) ; 
 + w = localVideo . getW ( ) ; 
 + h = localVideo . getH ( ) ; 
 + } 
 + 
 + public int getW ( ) { 
 + return w ; 
 + } 
 + 
 + public int getH ( ) { 
 + return h ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / AbsLocalContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / AbsLocalContent . java 
 index 52466b7 . . d7a320b 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / AbsLocalContent . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / AbsLocalContent . java 
 @ @ - 14 , 9 + 14 , 12 @ @ import im . actor . runtime . bser . DataInput ; 
 import im . actor . runtime . bser . DataOutput ; 
 
 public abstract class AbsLocalContent extends BserObject { 
 + 
 private static final int CONTENT _ DOC = 0 ; 
 private static final int CONTENT _ PHOTO = 1 ; 
 private static final int CONTENT _ VIDEO = 2 ; 
 + private static final int CONTENT _ VOICE = 3 ; 
 + private static final int CONTENT _ ANIMATION = 4 ; 
 
 public static AbsLocalContent loadContainer ( byte [ ] data ) throws IOException { 
 BserValues values = new BserValues ( BserParser . deserialize ( new DataInput ( data ) ) ) ; 
 @ @ - 28 , 6 + 31 , 10 @ @ public abstract class AbsLocalContent extends BserObject { 
 return new LocalPhoto ( content ) ; 
 } else if ( type = = CONTENT _ VIDEO ) { 
 return new LocalVideo ( content ) ; 
 + } else if ( type = = CONTENT _ VOICE ) { 
 + return new LocalVoice ( content ) ; 
 + } else if ( type = = CONTENT _ ANIMATION ) { 
 + return new LocalAnimation ( content ) ; 
 } else { 
 throw new IOException ( " Unknown type " ) ; 
 } 
 @ @ - 42 , 6 + 49 , 10 @ @ public abstract class AbsLocalContent extends BserObject { 
 writer . writeInt ( 1 , CONTENT _ VIDEO ) ; 
 } else if ( this instanceof LocalDocument ) { 
 writer . writeInt ( 1 , CONTENT _ DOC ) ; 
 + } else if ( this instanceof LocalVoice ) { 
 + writer . writeInt ( 1 , CONTENT _ VOICE ) ; 
 + } else if ( this instanceof LocalAnimation ) { 
 + writer . writeInt ( 1 , CONTENT _ ANIMATION ) ; 
 } else { 
 throw new IOException ( " Unknown type " ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / LocalAnimation . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / LocalAnimation . java 
 new file mode 100644 
 index 0000000 . . a8fd17e 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / LocalAnimation . java 
 @ @ - 0 , 0 + 1 , 49 @ @ 
 + package im . actor . core . entity . content . internal ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + 
 + public class LocalAnimation extends LocalDocument { 
 + 
 + private int w ; 
 + private int h ; 
 + 
 + public LocalAnimation ( String fileName , String fileDescriptor , int fileSize , String mimeType , 
 + LocalFastThumb fastThumb , int w , int h ) { 
 + super ( fileName , fileDescriptor , fileSize , mimeType , fastThumb ) ; 
 + this . w = w ; 
 + this . h = h ; 
 + } 
 + 
 + public LocalAnimation ( byte [ ] data ) throws IOException { 
 + super ( data ) ; 
 + } 
 + 
 + public LocalAnimation ( BserValues values ) throws IOException { 
 + super ( values ) ; 
 + } 
 + 
 + public int getW ( ) { 
 + return w ; 
 + } 
 + 
 + public int getH ( ) { 
 + return h ; 
 + } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + super . parse ( values ) ; 
 + w = values . getInt ( 10 ) ; 
 + h = values . getInt ( 11 ) ; 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + super . serialize ( writer ) ; 
 + writer . writeInt ( 10 , w ) ; 
 + writer . writeInt ( 11 , h ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / LocalVideo . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / LocalVideo . java 
 index 71acc98 . . 31bcce7 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / LocalVideo . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / internal / LocalVideo . java 
 @ @ - 10 , 6 + 10 , 7 @ @ import im . actor . runtime . bser . BserValues ; 
 import im . actor . runtime . bser . BserWriter ; 
 
 public class LocalVideo extends LocalDocument { 
 + 
 private int w ; 
 private int h ; 
 private int duration ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 index 76ffb68 . . a7b49d8 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 @ @ - 239 , 6 + 239 , 14 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 fileName , reference . getSize ( ) , w , h ) ) ; 
 } 
 
 + public void sendAnimation ( @ NotNull Peer peer , @ NotNull String fileName , int w , int h , @ Nullable FastThumb fastThumb , 
 + @ NotNull String descriptor ) { 
 + FileSystemReference reference = Storage . fileFromDescriptor ( descriptor ) ; 
 + sendMessageActor . send ( new SenderActor . SendAnimation ( peer , fastThumb , 
 + descriptor , 
 + fileName , reference . getSize ( ) , w , h ) ) ; 
 + } 
 + 
 public void sendVideo ( Peer peer , String fileName , int w , int h , int duration , 
 FastThumb fastThumb , String descriptor ) { 
 FileSystemReference reference = Storage . fileFromDescriptor ( descriptor ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / SenderActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / SenderActor . java 
 index 9d4425d . . fdf37bf 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / SenderActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / SenderActor . java 
 @ @ - 36 , 6 + 36 , 7 @ @ import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerType ; 
 import im . actor . core . entity . User ; 
 import im . actor . core . entity . content . AbsContent ; 
 + import im . actor . core . entity . content . AnimationContent ; 
 import im . actor . core . entity . content . ContactContent ; 
 import im . actor . core . entity . content . DocumentContent ; 
 import im . actor . core . entity . content . FastThumb ; 
 @ @ - 210 , 31 + 211 , 38 @ @ public class SenderActor extends ModuleActor { 
 performSendContent ( peer , rid , content ) ; 
 } 
 
 + public void doSendContact ( @ NotNull Peer peer , 
 + @ NotNull ArrayList < String > emails , @ NotNull ArrayList < String > phones , 
 + @ Nullable String name , 
 + @ Nullable String base64photo ) { 
 
 - / / Sending documents 
 - 
 - public void doSendDocument ( Peer peer , String fileName , String mimeType , int fileSize , 
 - FastThumb fastThumb , String descriptor ) { 
 long rid = RandomUtils . nextRid ( ) ; 
 long date = createPendingDate ( ) ; 
 long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; 
 - DocumentContent documentContent = DocumentContent . createLocal ( fileName , fileSize , 
 - descriptor , mimeType , fastThumb ) ; 
 
 - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , documentContent ) ; 
 + 
 + ContactContent content = ContactContent . create ( name , phones , emails , base64photo ) ; 
 + 
 + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content ) ; 
 context ( ) . getMessagesModule ( ) . getRouter ( ) . onOutgoingMessage ( peer , message ) ; 
 
 - pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , documentContent ) ) ; 
 + pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , content ) ) ; 
 savePending ( ) ; 
 
 - performUploadFile ( rid , descriptor , fileName ) ; 
 + performSendContent ( peer , rid , content ) ; 
 } 
 
 - public void doForwardContent ( Peer peer , AbsContent content ) { 
 + public void doSendLocation ( @ NotNull Peer peer , 
 + @ NotNull Double longitude , @ NotNull Double latitude , 
 + @ Nullable String street , @ Nullable String place ) { 
 + 
 long rid = RandomUtils . nextRid ( ) ; 
 long date = createPendingDate ( ) ; 
 long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; 
 
 + 
 + LocationContent content = LocationContent . create ( longitude , latitude , street , place ) ; 
 + 
 Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content ) ; 
 context ( ) . getMessagesModule ( ) . getRouter ( ) . onOutgoingMessage ( peer , message ) ; 
 
 @ @ - 244 , 42 + 252 , 53 @ @ public class SenderActor extends ModuleActor { 
 performSendContent ( peer , rid , content ) ; 
 } 
 
 - public void doSendPhoto ( Peer peer , FastThumb fastThumb , String descriptor , String fileName , 
 - int fileSize , int w , int h ) { 
 + public void doForwardContent ( Peer peer , AbsContent content ) { 
 long rid = RandomUtils . nextRid ( ) ; 
 long date = createPendingDate ( ) ; 
 long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; 
 - PhotoContent photoContent = PhotoContent . createLocalPhoto ( descriptor , fileName , fileSize , w , h , fastThumb ) ; 
 
 - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , photoContent ) ; 
 + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content ) ; 
 context ( ) . getMessagesModule ( ) . getRouter ( ) . onOutgoingMessage ( peer , message ) ; 
 
 - pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , photoContent ) ) ; 
 + pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , content ) ) ; 
 savePending ( ) ; 
 
 - performUploadFile ( rid , descriptor , fileName ) ; 
 + performSendContent ( peer , rid , content ) ; 
 } 
 
 - public void doSendContact ( @ NotNull Peer peer , 
 - @ NotNull ArrayList < String > emails , @ NotNull ArrayList < String > phones , 
 - @ Nullable String name , 
 - @ Nullable String base64photo ) { 
 - 
 + / / Sending documents 
 
 + public void doSendDocument ( Peer peer , String fileName , String mimeType , int fileSize , 
 + FastThumb fastThumb , String descriptor ) { 
 long rid = RandomUtils . nextRid ( ) ; 
 long date = createPendingDate ( ) ; 
 long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; 
 + DocumentContent documentContent = DocumentContent . createLocal ( fileName , fileSize , 
 + descriptor , mimeType , fastThumb ) ; 
 
 + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , documentContent ) ; 
 + context ( ) . getMessagesModule ( ) . getRouter ( ) . onOutgoingMessage ( peer , message ) ; 
 
 - ContactContent content = ContactContent . create ( name , phones , emails , base64photo ) ; 
 + pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , documentContent ) ) ; 
 + savePending ( ) ; 
 
 - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content ) ; 
 + performUploadFile ( rid , descriptor , fileName ) ; 
 + } 
 + 
 + public void doSendPhoto ( Peer peer , FastThumb fastThumb , String descriptor , String fileName , 
 + int fileSize , int w , int h ) { 
 + long rid = RandomUtils . nextRid ( ) ; 
 + long date = createPendingDate ( ) ; 
 + long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; 
 + PhotoContent photoContent = PhotoContent . createLocalPhoto ( descriptor , fileName , fileSize , w , h , fastThumb ) ; 
 + 
 + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , photoContent ) ; 
 context ( ) . getMessagesModule ( ) . getRouter ( ) . onOutgoingMessage ( peer , message ) ; 
 
 - pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , content ) ) ; 
 + pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , photoContent ) ) ; 
 savePending ( ) ; 
 
 - performSendContent ( peer , rid , content ) ; 
 + performUploadFile ( rid , descriptor , fileName ) ; 
 } 
 
 public void doSendAudio ( Peer peer , String descriptor , String fileName , 
 @ @ - 298 , 34 + 317 , 30 @ @ public class SenderActor extends ModuleActor { 
 performUploadFile ( rid , descriptor , fileName ) ; 
 } 
 
 - public void doSendLocation ( @ NotNull Peer peer , 
 - @ NotNull Double longitude , @ NotNull Double latitude , 
 - @ Nullable String street , @ Nullable String place ) { 
 - 
 - 
 + public void doSendVideo ( Peer peer , String fileName , int w , int h , int duration , 
 + FastThumb fastThumb , String descriptor , int fileSize ) { 
 long rid = RandomUtils . nextRid ( ) ; 
 long date = createPendingDate ( ) ; 
 long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; 
 + VideoContent videoContent = VideoContent . createLocalVideo ( descriptor , 
 + fileName , fileSize , w , h , duration , fastThumb ) ; 
 
 - 
 - LocationContent content = LocationContent . create ( longitude , latitude , street , place ) ; 
 - 
 - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content ) ; 
 + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , videoContent ) ; 
 context ( ) . getMessagesModule ( ) . getRouter ( ) . onOutgoingMessage ( peer , message ) ; 
 
 - pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , content ) ) ; 
 + pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , videoContent ) ) ; 
 savePending ( ) ; 
 
 - performSendContent ( peer , rid , content ) ; 
 + performUploadFile ( rid , descriptor , fileName ) ; 
 } 
 
 - public void doSendVideo ( Peer peer , String fileName , int w , int h , int duration , 
 - FastThumb fastThumb , String descriptor , int fileSize ) { 
 + public void doSendAnimation ( Peer peer , String fileName , int w , int h , 
 + FastThumb fastThumb , String descriptor , int fileSize ) { 
 long rid = RandomUtils . nextRid ( ) ; 
 long date = createPendingDate ( ) ; 
 long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; 
 - VideoContent videoContent = VideoContent . createLocalVideo ( descriptor , 
 - fileName , fileSize , w , h , duration , fastThumb ) ; 
 + AnimationContent videoContent = AnimationContent . createLocalAnimation ( descriptor , 
 + fileName , fileSize , w , h , fastThumb ) ; 
 
 Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , videoContent ) ; 
 context ( ) . getMessagesModule ( ) . getRouter ( ) . onOutgoingMessage ( peer , message ) ; 
 @ @ - 365 , 6 + 380 , 10 @ @ public class SenderActor extends ModuleActor { 
 } else if ( msg . getContent ( ) instanceof DocumentContent ) { 
 DocumentContent baseDocContent = ( DocumentContent ) msg . getContent ( ) ; 
 nContent = DocumentContent . createRemoteDocument ( fileReference , baseDocContent . getFastThumb ( ) ) ; 
 + } else if ( msg . getContent ( ) instanceof AnimationContent ) { 
 + AnimationContent baseAnimcationContent = ( AnimationContent ) msg . getContent ( ) ; 
 + nContent = AnimationContent . createRemoteAnimation ( fileReference , baseAnimcationContent . getW ( ) , 
 + baseAnimcationContent . getH ( ) , baseAnimcationContent . getFastThumb ( ) ) ; 
 } else { 
 return ; 
 } 
 @ @ - 554 , 6 + 573 , 11 @ @ public class SenderActor extends ModuleActor { 
 } else if ( message instanceof ForwardContent ) { 
 ForwardContent forwardContent = ( ForwardContent ) message ; 
 doForwardContent ( forwardContent . getPeer ( ) , forwardContent . getContent ( ) ) ; 
 + } else if ( message instanceof SendAnimation ) { 
 + SendAnimation animation = ( SendAnimation ) message ; 
 + doSendAnimation ( animation . getPeer ( ) , animation . getFileName ( ) , 
 + animation . getW ( ) , animation . getH ( ) , animation . getFastThumb ( ) , animation . getDescriptor ( ) , 
 + animation . getFileSize ( ) ) ; 
 } else { 
 super . onReceive ( message ) ; 
 } 
 @ @ - 669 , 6 + 693 , 57 @ @ public class SenderActor extends ModuleActor { 
 } 
 } 
 
 + 
 + public static class SendAnimation { 
 + 
 + private Peer peer ; 
 + private FastThumb fastThumb ; 
 + private String descriptor ; 
 + private String fileName ; 
 + private int fileSize ; 
 + private int w ; 
 + private int h ; 
 + 
 + public SendAnimation ( Peer peer , FastThumb fastThumb , String descriptor , String fileName , 
 + int fileSize , int w , int h ) { 
 + this . peer = peer ; 
 + this . fastThumb = fastThumb ; 
 + this . descriptor = descriptor ; 
 + this . fileName = fileName ; 
 + this . fileSize = fileSize ; 
 + this . w = w ; 
 + this . h = h ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public FastThumb getFastThumb ( ) { 
 + return fastThumb ; 
 + } 
 + 
 + public String getDescriptor ( ) { 
 + return descriptor ; 
 + } 
 + 
 + public String getFileName ( ) { 
 + return fileName ; 
 + } 
 + 
 + public int getFileSize ( ) { 
 + return fileSize ; 
 + } 
 + 
 + public int getW ( ) { 
 + return w ; 
 + } 
 + 
 + public int getH ( ) { 
 + return h ; 
 + } 
 + } 
 + 
 public static class SendVideo { 
 private Peer peer ; 
 private String fileName ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java 
 deleted file mode 100644 
 index bb8078b . . 0000000 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java 
 + + + / dev / null 
 @ @ - 1 , 80 + 0 , 0 @ @ 
 - package im . actor . core . entity ; 
 - 
 - import com . google . j2objc . annotations . Property ; 
 - 
 - import java . io . IOException ; 
 - 
 - import im . actor . runtime . bser . BserObject ; 
 - import im . actor . runtime . bser . BserValues ; 
 - import im . actor . runtime . bser . BserWriter ; 
 - import im . actor . runtime . storage . KeyValueItem ; 
 - 
 - public class DialogDesc extends BserObject implements KeyValueItem { 
 - 
 - @ Property ( " readonly , nonatomic " ) 
 - private Peer peer ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private String title ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private Avatar avatar ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private boolean isUnread ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private int counter ; 
 - 
 - public DialogDesc ( Peer peer , String title , Avatar avatar , boolean isUnread , int counter ) { 
 - this . peer = peer ; 
 - this . title = title ; 
 - this . avatar = avatar ; 
 - this . isUnread = isUnread ; 
 - this . counter = counter ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public String getTitle ( ) { 
 - return title ; 
 - } 
 - 
 - public Avatar getAvatar ( ) { 
 - return avatar ; 
 - } 
 - 
 - public int getCounter ( ) { 
 - return counter ; 
 - } 
 - 
 - public boolean isUnread ( ) { 
 - return isUnread ; 
 - } 
 - 
 - @ Override 
 - public void parse ( BserValues values ) throws IOException { 
 - peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; 
 - title = values . getString ( 2 ) ; 
 - byte [ ] av = values . getBytes ( 3 ) ; 
 - if ( av ! = null ) { 
 - avatar = new Avatar ( av ) ; 
 - } 
 - counter = values . getInt ( 4 ) ; 
 - isUnread = values . getBool ( 5 ) ; 
 - } 
 - 
 - @ Override 
 - public void serialize ( BserWriter writer ) throws IOException { 
 - writer . writeObject ( 1 , peer ) ; 
 - writer . writeString ( 2 , title ) ; 
 - if ( avatar ! = null ) { 
 - writer . writeObject ( 3 , avatar ) ; 
 - } 
 - writer . writeInt ( 4 , counter ) ; 
 - writer . writeBool ( 5 , isUnread ) ; 
 - } 
 - 
 - @ Override 
 - public long getEngineId ( ) { 
 - return peer . getUnuqueId ( ) ; 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java 
 new file mode 100644 
 index 0000000 . . d0c5624 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java 
 @ @ - 0 , 0 + 1 , 69 @ @ 
 + package im . actor . core . entity ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . runtime . bser . BserCreator ; 
 + import im . actor . runtime . bser . BserObject ; 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + import im . actor . runtime . storage . KeyValueItem ; 
 + 
 + public class DialogSpec extends BserObject implements KeyValueItem { 
 + 
 + public static BserCreator < DialogSpec > CREATOR = new BserCreator < DialogSpec > ( ) { 
 + @ Override 
 + public DialogSpec createInstance ( ) { 
 + return new DialogSpec ( ) ; 
 + } 
 + } ; 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private Peer peer ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private boolean isUnread ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private int counter ; 
 + 
 + public DialogSpec ( Peer peer , boolean isUnread , int counter ) { 
 + this . peer = peer ; 
 + this . isUnread = isUnread ; 
 + this . counter = counter ; 
 + } 
 + 
 + private DialogSpec ( ) { 
 + 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + 
 + public boolean isUnread ( ) { 
 + return isUnread ; 
 + } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; 
 + counter = values . getInt ( 2 ) ; 
 + isUnread = values . getBool ( 3 ) ; 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + writer . writeObject ( 1 , peer ) ; 
 + writer . writeInt ( 2 , counter ) ; 
 + writer . writeBool ( 3 , isUnread ) ; 
 + } 
 + 
 + @ Override 
 + public long getEngineId ( ) { 
 + return peer . getUnuqueId ( ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java 
 index 28142c9 . . baf3eaf 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . runtime . storage . PreferencesStorage ; 
 public abstract class AbsModule { 
 
 public static final String STORAGE _ DIALOGS = " dialogs " ; 
 + public static final String STORAGE _ DIALOGS _ DESC = " dialogs _ desc " ; 
 public static final String STORAGE _ USERS = " users " ; 
 public static final String STORAGE _ GROUPS = " groups " ; 
 public static final String STORAGE _ DOWNLOADS = " downloads " ; 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index 30e0d85 . . 88416ee 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import im . actor . core . api . rpc . ResponseSeq ; 
 import im . actor . core . api . updates . UpdateChatClear ; 
 import im . actor . core . api . updates . UpdateChatDelete ; 
 import im . actor . core . entity . Dialog ; 
 + import im . actor . core . entity . DialogSpec ; 
 import im . actor . core . entity . Group ; 
 import im . actor . core . entity . Message ; 
 import im . actor . core . entity . Peer ; 
 @ @ - 48 , 6 + 49 , 7 @ @ import im . actor . core . network . RpcInternalException ; 
 import im . actor . core . viewmodel . Command ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . core . viewmodel . DialogGroupsVM ; 
 + import im . actor . core . viewmodel . DialogSpecVM ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 @ @ - 56 , 6 + 58 , 8 @ @ import im . actor . runtime . actors . tools . BounceFilterActor ; 
 import im . actor . runtime . eventbus . BusSubscriber ; 
 import im . actor . runtime . eventbus . Event ; 
 import im . actor . runtime . files . FileSystemReference ; 
 + import im . actor . runtime . mvvm . MVVMCollection ; 
 + import im . actor . runtime . storage . KeyValueEngine ; 
 import im . actor . runtime . storage . ListEngine ; 
 import im . actor . runtime . storage . SyncKeyValue ; 
 
 @ @ - 83 , 11 + 87 , 14 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 
 private final SyncKeyValue cursorStorage ; 
 
 + private final MVVMCollection < DialogSpec , DialogSpecVM > dialogDescKeyValue ; 
 + 
 private final DialogGroupsVM dialogGroups = new DialogGroupsVM ( ) ; 
 
 public MessagesModule ( final ModuleContext context ) { 
 super ( context ) ; 
 
 + this . dialogDescKeyValue = Storage . createKeyValue ( STORAGE _ DIALOGS _ DESC , DialogSpecVM . CREATOR , DialogSpec . CREATOR ) ; 
 this . cursorStorage = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ CURSOR ) ) ; 
 this . dialogs = Storage . createList ( STORAGE _ DIALOGS , Dialog . CREATOR ) ; 
 } 
 @ @ - 157 , 6 + 164 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 return dialogGroups ; 
 } 
 
 + public MVVMCollection < DialogSpec , DialogSpecVM > getDialogDescKeyValue ( ) { 
 + return dialogDescKeyValue ; 
 + } 
 + 
 public ActorRef getSendMessageActor ( ) { 
 return sendMessageActor ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 index f0fdf00 . . b881551 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 @ @ - 1 , 20 + 1 , 26 @ @ 
 package im . actor . core . modules . internal . messages ; 
 
 import java . util . ArrayList ; 
 - import java . util . HashMap ; 
 
 import im . actor . core . entity . Avatar ; 
 - import im . actor . core . entity . DialogDesc ; 
 + import im . actor . core . entity . DialogSpec ; 
 + import im . actor . core . entity . Group ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerType ; 
 + import im . actor . core . entity . User ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . internal . messages . entity . GroupedStorage ; 
 import im . actor . core . modules . utils . ModuleActor ; 
 import im . actor . core . viewmodel . DialogGroup ; 
 + import im . actor . core . viewmodel . DialogSmall ; 
 + import im . actor . core . viewmodel . DialogSpecVM ; 
 + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; 
 + import im . actor . runtime . mvvm . MVVMCollection ; 
 
 public class GroupedDialogsActor extends ModuleActor { 
 
 - private PeerGroup groups = new PeerGroup ( " groups " , " Groups " ) ; 
 - private PeerGroup privates = new PeerGroup ( " private " , " Private " ) ; 
 + private GroupedStorage storage ; 
 + private MVVMCollection < DialogSpec , DialogSpecVM > specs ; 
 
 public GroupedDialogsActor ( ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 23 , 6 + 29 , 8 @ @ public class GroupedDialogsActor extends ModuleActor { 
 @ Override 
 public void preStart ( ) { 
 super . preStart ( ) ; 
 + specs = context ( ) . getMessagesModule ( ) . getDialogDescKeyValue ( ) ; 
 + storage = new GroupedStorage ( ) ; 
 } 
 
 private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { 
 @ @ - 31 , 38 + 39 , 82 @ @ public class GroupedDialogsActor extends ModuleActor { 
 
 private void onNewMessage ( Peer peer , long sortDate , int counter ) { 
 
 - PeerGroup peerGroup ; 
 - if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 - peerGroup = groups ; 
 - } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 - peerGroup = privates ; 
 - } else { 
 - return ; 
 - } 
 + / / Updating dialog spec 
 + DialogSpec spec = new DialogSpec ( peer , false , counter ) ; 
 + specs . getEngine ( ) . addOrUpdateItem ( spec ) ; 
 
 boolean found = false ; 
 - for ( PeerDesc d : peerGroup . getPeers ( ) ) { 
 - if ( d . getPeer ( ) . equals ( peer ) ) { 
 - d . setCounter ( counter ) ; 
 + for ( Peer p : storage . getPrivatePeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 + found = true ; 
 + break ; 
 + } 
 + } 
 + for ( Peer p : storage . getGroupPeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 found = true ; 
 + break ; 
 } 
 } 
 
 if ( ! found ) { 
 - peerGroup . getPeers ( ) . add ( new PeerDesc ( peer , counter ) ) ; 
 + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + storage . getPrivatePeers ( ) . add ( peer ) ; 
 + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + storage . getGroupPeers ( ) . add ( peer ) ; 
 + } else { 
 + return ; 
 + } 
 } 
 
 - ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; 
 - ArrayList < DialogDesc > groupDescs = new ArrayList < DialogDesc > ( ) ; 
 - for ( PeerDesc d : peerGroup . getPeers ( ) ) { 
 - groupDescs . add ( new DialogDesc ( d . getPeer ( ) , " GRPOUP # " + d . getPeer ( ) . getPeerId ( ) , 
 - null , false , d . counter ) ) ; 
 + notifyVM ( ) ; 
 + saveStorage ( ) ; 
 + } 
 + 
 + private void notifyVM ( ) { 
 + ArrayListDialogSmall groupSpecs = new ArrayListDialogSmall ( ) ; 
 + for ( Peer p : storage . getGroupPeers ( ) ) { 
 + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; 
 + if ( p . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group group = getGroup ( p . getPeerId ( ) ) ; 
 + groupSpecs . add ( new DialogSmall ( p , 
 + group . getTitle ( ) , group . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + User user = getUser ( p . getPeerId ( ) ) ; 
 + groupSpecs . add ( new DialogSmall ( p , 
 + user . getName ( ) , user . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } 
 + } 
 + 
 + ArrayListDialogSmall privateSpecs = new ArrayListDialogSmall ( ) ; 
 + for ( Peer p : storage . getPrivatePeers ( ) ) { 
 + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; 
 + if ( p . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group group = getGroup ( p . getPeerId ( ) ) ; 
 + privateSpecs . add ( new DialogSmall ( p , 
 + group . getTitle ( ) , group . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + User user = getUser ( p . getPeerId ( ) ) ; 
 + privateSpecs . add ( new DialogSmall ( p , 
 + user . getName ( ) , user . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } 
 } 
 - groups . add ( new DialogGroup ( " Groups " , " group " , groupDescs ) ) ; 
 + 
 + ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; 
 + groups . add ( new DialogGroup ( " Groups " , " groups " , groupSpecs ) ) ; 
 + groups . add ( new DialogGroup ( " Private " , " private " , privateSpecs ) ) ; 
 
 context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; 
 } 
 
 + private void saveStorage ( ) { 
 + / / TODO : Implement 
 + } 
 + 
 @ Override 
 public void onReceive ( Object message ) { 
 if ( message instanceof PeerInformationChanged ) { 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java 
 new file mode 100644 
 index 0000000 . . 3e7340c 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + package im . actor . core . modules . internal . messages . entity ; 
 + 
 + import java . io . IOException ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import im . actor . core . entity . DialogSpec ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . viewmodel . DialogSpecVM ; 
 + import im . actor . runtime . bser . BserObject ; 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + import im . actor . runtime . mvvm . MVVMCollection ; 
 + 
 + public class GroupedStorage extends BserObject { 
 + 
 + private ArrayList < Peer > groupPeers = new ArrayList < Peer > ( ) ; 
 + private ArrayList < Peer > privatePeers = new ArrayList < Peer > ( ) ; 
 + 
 + public GroupedStorage ( ) { 
 + } 
 + 
 + public GroupedStorage ( byte [ ] data ) throws IOException { 
 + super . load ( data ) ; 
 + } 
 + 
 + public ArrayList < Peer > getGroupPeers ( ) { 
 + return groupPeers ; 
 + } 
 + 
 + public ArrayList < Peer > getPrivatePeers ( ) { 
 + return privatePeers ; 
 + } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + List < byte [ ] > rawPrivatePeers = values . getRepeatedBytes ( 1 ) ; 
 + groupPeers . clear ( ) ; 
 + for ( byte [ ] b : rawPrivatePeers ) { 
 + groupPeers . add ( Peer . fromBytes ( b ) ) ; 
 + } 
 + List < byte [ ] > rawGroupPeers = values . getRepeatedBytes ( 2 ) ; 
 + for ( byte [ ] b : rawGroupPeers ) { 
 + privatePeers . add ( Peer . fromBytes ( b ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + for ( Peer peer : privatePeers ) { 
 + writer . writeObject ( 1 , peer ) ; 
 + } 
 + for ( Peer peer : groupPeers ) { 
 + writer . writeObject ( 2 , peer ) ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 index ae47f02 . . 47935a1 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 @ @ - 1 , 16 + 1 , 19 @ @ 
 package im . actor . core . viewmodel ; 
 
 - import java . util . ArrayList ; 
 + import com . google . j2objc . annotations . Property ; 
 
 - import im . actor . core . entity . DialogDesc ; 
 + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; 
 
 public class DialogGroup { 
 
 + @ Property ( " readonly , nonatomic " ) 
 private String title ; 
 + @ Property ( " readonly , nonatomic " ) 
 private String key ; 
 - private ArrayList < DialogDesc > dialogs ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private ArrayListDialogSmall dialogs ; 
 
 - public DialogGroup ( String title , String key , ArrayList < DialogDesc > dialogs ) { 
 + public DialogGroup ( String title , String key , ArrayListDialogSmall dialogs ) { 
 this . title = title ; 
 this . key = key ; 
 this . dialogs = dialogs ; 
 @ @ - 24 , 7 + 27 , 7 @ @ public class DialogGroup { 
 return key ; 
 } 
 
 - public ArrayList < DialogDesc > getDialogs ( ) { 
 + public ArrayListDialogSmall getDialogs ( ) { 
 return dialogs ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java 
 new file mode 100644 
 index 0000000 . . b77e893 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + package im . actor . core . viewmodel ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import im . actor . core . entity . Avatar ; 
 + import im . actor . core . entity . Peer ; 
 + 
 + public class DialogSmall { 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private final Peer peer ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private final String title ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private final Avatar avatar ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private final int counter ; 
 + 
 + public DialogSmall ( Peer peer , String title , Avatar avatar , int counter ) { 
 + this . peer = peer ; 
 + this . title = title ; 
 + this . avatar = avatar ; 
 + this . counter = counter ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public String getTitle ( ) { 
 + return title ; 
 + } 
 + 
 + public Avatar getAvatar ( ) { 
 + return avatar ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java 
 new file mode 100644 
 index 0000000 . . 52a266d 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java 
 @ @ - 0 , 0 + 1 , 53 @ @ 
 + package im . actor . core . viewmodel ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import im . actor . core . entity . DialogSpec ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . viewmodel . generics . BooleanValueModel ; 
 + import im . actor . core . viewmodel . generics . IntValueModel ; 
 + import im . actor . runtime . mvvm . BaseValueModel ; 
 + import im . actor . runtime . mvvm . ValueModelCreator ; 
 + 
 + public class DialogSpecVM extends BaseValueModel < DialogSpec > { 
 + 
 + public static ValueModelCreator < DialogSpec , DialogSpecVM > CREATOR = new ValueModelCreator < DialogSpec , DialogSpecVM > ( ) { 
 + @ Override 
 + public DialogSpecVM create ( DialogSpec baseValue ) { 
 + return new DialogSpecVM ( baseValue ) ; 
 + } 
 + } ; 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private final Peer peer ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private IntValueModel counter ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private BooleanValueModel isUnread ; 
 + 
 + public DialogSpecVM ( DialogSpec rawObj ) { 
 + super ( rawObj ) ; 
 + 
 + this . peer = rawObj . getPeer ( ) ; 
 + this . counter = new IntValueModel ( " dialogs . desc . counter " , rawObj . getCounter ( ) ) ; 
 + this . isUnread = new BooleanValueModel ( " dialogs . desc . unread " , rawObj . isUnread ( ) ) ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public IntValueModel getCounter ( ) { 
 + return counter ; 
 + } 
 + 
 + public BooleanValueModel getIsUnread ( ) { 
 + return isUnread ; 
 + } 
 + 
 + @ Override 
 + protected void updateValues ( DialogSpec rawObj ) { 
 + counter . change ( rawObj . getCounter ( ) ) ; 
 + isUnread . change ( rawObj . isUnread ( ) ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java 
 new file mode 100644 
 index 0000000 . . 9727306 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package im . actor . core . viewmodel . generics ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . core . viewmodel . DialogSmall ; 
 + 
 + public class ArrayListDialogSmall extends ArrayList < DialogSmall > { 
 + 
 + @ Override 
 + public DialogSmall get ( int index ) { 
 + return super . get ( index ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift 
 index 32554b4 . . f496742 100644 
 - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift 
 + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift 
 @ @ - 6 , 7 + 6 , 7 @ @ import UIKit 
 
 class AADebugController : AAContentTableController { 
 
 - var debugData : AAManagedArrayRows < ACDialogDesc , AACommonCell > ! 
 + var debugData : AAManagedArrayRows < ACDialogSmall , AACommonCell > ! 
 
 init ( ) { 
 super . init ( style : . Plain ) 
 @ @ - 18 , 9 + 18 , 10 @ @ class AADebugController : AAContentTableController { 
 
 override func tableDidLoad ( ) { 
 section { ( s ) - > ( ) in 
 - self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogDesc , AACommonCell > ) - > ( ) in 
 - r . bindData = { ( cell : AACommonCell , data : ACDialogDesc ) - > ( ) in 
 - cell . setContent ( data . title ) 
 + self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogSmall , AACommonCell > ) - > ( ) in 
 + r . bindData = { ( cell : AACommonCell , data : ACDialogSmall ) - > ( ) in 
 + cell . setContent ( " \ ( data . counter ) - \ ( data . title ) " ) 
 + cell . style = . Normal 
 } 
 } 
 } 
 @ @ - 30 , 11 + 31 , 11 @ @ class AADebugController : AAContentTableController { 
 binder . bind ( ActorSDK . sharedActor ( ) . messenger . getDialogGroupsVM ( ) . getGroupsValueModel ( ) ) { ( value : JavaUtilArrayList ? ) - > ( ) in 
 
 if value ! = nil { 
 - var items = [ ACDialogDesc ] ( ) 
 + var items = [ ACDialogSmall ] ( ) 
 
 for i in 0 . . < value ! . size ( ) { 
 - for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . getDialogs ( ) { 
 - items . append ( j as ! ACDialogDesc ) 
 + for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . dialogs { 
 + items . append ( j as ! ACDialogSmall ) 
 } 
 } 
 self . debugData . data = items
