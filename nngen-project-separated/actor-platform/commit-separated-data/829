BLEU SCORE: 0.4111336169005197

TEST MSG: refactor ( server ) : reduce code duplication in FutureResult
GENERATED MSG: refactor ( server ) : rename FutureResultCats to FutureResult

TEST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServiceBase . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServiceBase . scala < nl > index 6b6efbc . . e7cfa49 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServiceBase . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServiceBase . scala < nl > @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . bot < nl > < nl > import akka . actor . ActorSystem < nl > import im . actor . bots . BotMessages < nl > + import im . actor . concurrent . XorEitherConversions < nl > import im . actor . server . user . UserExtension < nl > import upickle . Js < nl > import upickle . default . _ < nl > @ @ - 39 , 7 + 40 , 7 @ @ trait BotServiceTypes extends BotToInternalConversions { < nl > case class WeakRequestHandler ( handle : ( BotUserId , BotAuthId , BotAuthSid ) ⇒ Future [ BotResponseBody ] ) < nl > } < nl > < nl > - abstract class BotServiceBase ( system : ActorSystem ) extends BotServiceTypes { < nl > + abstract class BotServiceBase ( system : ActorSystem ) extends BotServiceTypes with XorEitherConversions { < nl > import BotMessages . _ < nl > import system . dispatcher < nl > < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala < nl > index e9192d9 . . 1f19960 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala < nl > @ @ - 62 , 7 + 62 , 7 @ @ private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotService < nl > ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ < nl > ifIsAdmin ( botUserId ) { < nl > ( for { < nl > - avatar ← fromFutureEither ( _ ⇒ BotError ( 400 , " LOCATION _ INVALID " ) ) ( db . run ( scaleAvatar ( fileLocation . fileId ) ) ) < nl > + avatar ← fromFutureXor ( _ ⇒ BotError ( 400 , " LOCATION _ INVALID " ) ) ( db . run ( scaleAvatar ( fileLocation . fileId ) ) map Xor . fromEither ) < nl > _ ← fromFuture ( userExt . updateAvatar ( userId , Some ( avatar ) ) ) < nl > } yield Void ) . value < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / FutureResultRpcCats . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / FutureResultRpcCats . scala < nl > index a7a0974 . . 4c18d56 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / FutureResultRpcCats . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / FutureResultRpcCats . scala < nl > @ @ - 1 , 39 + 1 , 5 @ @ < nl > package im . actor . api . rpc < nl > < nl > - import cats . data . Xor . _ < nl > - import cats . data . { Xor , XorT } < nl > - import cats . std . { EitherInstances , FutureInstances } < nl > - import cats . syntax . all . _ < nl > + import im . actor . concurrent . FutureResult < nl > < nl > - import scala . concurrent . { ExecutionContext , Future } < nl > - < nl > - object FutureResultRpcCats extends FutureInstances with EitherInstances { < nl > - type Result [ A ] = XorT [ Future , RpcError , A ] < nl > - def Result [ A ] = XorT . apply [ Future , RpcError , A ] _ < nl > - < nl > - def point [ A ] ( a : A ) : Result [ A ] = Result [ A ] ( Future . successful ( right ( a ) ) ) < nl > - < nl > - def fromFuture [ A ] ( fu : Future [ A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = Result [ A ] ( fu . map ( right ) ) < nl > - < nl > - def fromFuture [ A ] ( failure : Throwable ⇒ RpcError ) ( fu : Future [ A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > - Result [ A ] ( fu . map ( _ . right ) recover { case e ⇒ failure ( e ) . left } ) < nl > - < nl > - def fromEither [ A ] ( va : RpcError Xor A ) : Result [ A ] = Result [ A ] ( Future . successful ( va ) ) < nl > - < nl > - def fromEither [ A , B ] ( failure : B ⇒ RpcError ) ( va : B Xor A ) : Result [ A ] = Result [ A ] ( Future . successful ( va . leftMap ( failure ) ) ) < nl > - < nl > - def fromOption [ A ] ( failure : RpcError ) ( oa : Option [ A ] ) : Result [ A ] = Result [ A ] ( Future . successful ( oa toRightXor failure ) ) < nl > - < nl > - def fromFutureOption [ A ] ( failure : RpcError ) ( foa : Future [ Option [ A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > - Result [ A ] ( foa . map ( _ toRightXor failure ) ) < nl > - < nl > - def fromFutureBoolean ( failure : RpcError ) ( foa : Future [ Boolean ] ) ( implicit ec : ExecutionContext ) : Result [ Unit ] = < nl > - Result [ Unit ] ( foa . map ( r ⇒ if ( r ) right ( ( ) ) else left ( failure ) ) ) < nl > - < nl > - def fromFutureEither [ A , B ] ( failure : B ⇒ RpcError ) ( fva : Future [ B Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > - Result [ A ] ( fva . map ( _ . leftMap ( failure ) ) ) < nl > - < nl > - def fromFutureEither [ A ] ( fva : Future [ RpcError Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = Result [ A ] ( fva ) < nl > - < nl > - def fromBoolean [ A ] ( failure : RpcError ) ( oa : Boolean ) : Result [ Unit ] = Result [ Unit ] ( Future . successful ( if ( oa ) right ( ( ) ) else left ( failure ) ) ) < nl > - } < nl > \ No newline at end of file < nl > + object FutureResultRpcCats extends FutureResult [ RpcError ] < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / raw / ArrayStyleRawApiService . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / raw / ArrayStyleRawApiService . scala < nl > index 174a1fe . . d37eb39 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / raw / ArrayStyleRawApiService . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / raw / ArrayStyleRawApiService . scala < nl > @ @ - 19 , 8 + 19 , 8 @ @ abstract class ArrayStyleRawApiService ( system : ActorSystem ) extends RawApiServic < nl > < nl > override def apply ( name : String ) : Future [ Response ] = { < nl > ( for { < nl > - request ← fromEither ( validateRequests ( params ) ( name ) ) < nl > - result ← fromFutureEither ( processRequests ( client ) ( request ) ) < nl > + request ← fromXor ( validateRequests ( params ) ( name ) ) < nl > + result ← fromFutureXor ( processRequests ( client ) ( request ) ) < nl > } yield result ) . value < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / raw / MapStyleRawApiService . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / raw / MapStyleRawApiService . scala < nl > index 1d4acd3 . . a8e4354 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / raw / MapStyleRawApiService . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / raw / MapStyleRawApiService . scala < nl > @ @ - 56 , 8 + 56 , 8 @ @ abstract class MapStyleRawApiService ( system : ActorSystem ) extends RawApiService ( < nl > override def isDefinedAt ( name : String ) : Boolean = validateRequest ( None ) . isDefinedAt ( name ) < nl > < nl > override def apply ( name : String ) : Future [ Response ] = ( for { < nl > - request ← fromEither ( toRequest ( name , params ) ) < nl > - result ← fromFutureEither ( handleInternal ( client ) ( request ) ) < nl > + request ← fromXor ( toRequest ( name , params ) ) < nl > + result ← fromFutureXor ( handleInternal ( client ) ( request ) ) < nl > } yield result ) . value < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / http / routes / OutgoingHooks . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / http / routes / OutgoingHooks . scala < nl > index 49436c8 . . 9495040 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / http / routes / OutgoingHooks . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / http / routes / OutgoingHooks . scala < nl > @ @ - 74 , 7 + 74 , 7 @ @ trait OutgoingHooks extends ReverseHookUnmarshaler with PlayJsonSupport { < nl > def register ( token : String , uri : String ) : Future [ ( StatusCode , String ) Xor Int ] = { < nl > ( for { < nl > groupId ← fromFutureOption ( NotFound → OutgoingHooksErrors . WrongIntegrationToken ) ( integrationTokensKv . get ( token ) ) < nl > - uri ← fromXor ( e ⇒ BadRequest → OutgoingHooksErrors . MalformedUri ) ( Xor . fromTry ( Try ( Uri ( uri ) ) ) ) < nl > + uri ← fromXor ( ( e : Throwable ) ⇒ BadRequest → OutgoingHooksErrors . MalformedUri ) ( Xor . fromTry ( Try ( Uri ( uri ) ) ) ) < nl > strUri = uri . toString ( ) < nl > < nl > registeredUrs ← fromFuture ( getHooks ( token ) ) < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RawApiExtension . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RawApiExtension . scala < nl > index 9138767 . . 7f1f0e7 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RawApiExtension . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RawApiExtension . scala < nl > @ @ - 31 , 7 + 31 , 7 @ @ private [ rpc ] final class RawApiExtensionImpl ( system : ExtendedActorSystem ) extend < nl > ( for { < nl > serviceHandler ← fromOption ( CommonRpcErrors . UnsupportedRequest ) ( services . get ( service ) ) < nl > response ← fromOption ( CommonRpcErrors . UnsupportedRequest ) ( serviceHandler . handleRequests ( client ) ( params ) . lift ( method ) ) < nl > - result ← fromFutureEither ( response ) < nl > + result ← fromFutureXor ( response ) < nl > } yield result ) . value < nl > } < nl > < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala < nl > index 0981539 . . 1a28dec 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala < nl > @ @ - 42 , 7 + 42 , 7 @ @ class FilesServiceImpl ( implicit actorSystem : ActorSystem ) extends FilesService { < nl > } yield ApiFileUrlDescription ( model . id , url , FileStorageAdapter . UrlExpirationTimeout . toSeconds . toInt , None , Vector . empty ) ) . value < nl > } ) < nl > / / FIXME : fail - fast here < nl > - urlDescs ← fromEither ( ( e : RpcError ) ⇒ e ) ( attempts . foldLeft ( Xor . Right ( Nil ) : Xor [ RpcError , List [ ApiFileUrlDescription ] ] ) { < nl > + urlDescs ← fromXor ( ( e : RpcError ) ⇒ e ) ( attempts . foldLeft ( Xor . Right ( Nil ) : Xor [ RpcError , List [ ApiFileUrlDescription ] ] ) { < nl > case ( Xor . Right ( acc ) , Xor . Right ( fd ) ) ⇒ Xor . Right ( fd : : acc ) < nl > case ( l : Xor . Left [ _ ] , _ ) ⇒ l < nl > case ( _ , l : Xor . Left [ _ ] ) ⇒ l < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / raw / RawServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / raw / RawServiceImpl . scala < nl > index e77a11a . . ff22545 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / raw / RawServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / raw / RawServiceImpl . scala < nl > @ @ - 18 , 7 + 18 , 7 @ @ final class RawServiceImpl ( implicit system : ActorSystem ) extends RawService { < nl > < nl > override def doHandleRawRequest ( service : String , method : String , params : Option [ ApiRawValue ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseRawRequest ] ] = < nl > authorized ( clientData ) { implicit client ⇒ < nl > - ( for ( result ← fromFutureEither ( rawApiExt . handle ( service , method , params ) ) ) < nl > + ( for ( result ← fromFutureXor ( rawApiExt . handle ( service , method , params ) ) ) < nl > yield ResponseRawRequest ( result ) ) . value < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webactions / WebactionsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webactions / WebactionsServiceImpl . scala < nl > index ebdd870 . . 8912a2a 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webactions / WebactionsServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webactions / WebactionsServiceImpl . scala < nl > @ @ - 40 , 7 + 40 , 7 @ @ final class WebactionsServiceImpl ( implicit actorSystem : ActorSystem ) extends Web < nl > authorized ( clientData ) { implicit client ⇒ < nl > ( for { < nl > fqn ← fromOption ( WebactionNotFound ) ( Webaction . list . get ( actionName ) ) < nl > - webAction ← fromEither ( createWebaction ( fqn ) ) < nl > + webAction ← fromXor ( createWebaction ( fqn ) ) < nl > actionHash = generateActionHash ( ) < nl > _ ← fromFuture ( actionHashUserKV . upsert ( actionHash , actionName ) ) < nl > } yield ResponseInitWebaction ( webAction . uri ( params ) , webAction . regex , actionHash ) ) . value < nl > @ @ - 51 , 7 + 51 , 7 @ @ final class WebactionsServiceImpl ( implicit actorSystem : ActorSystem ) extends Web < nl > ( for { < nl > actionName ← fromFutureOption ( WrongActionHash ) ( actionHashUserKV . get ( actionHash ) ) < nl > fqn ← fromOption ( WebactionNotFound ) ( Webaction . list . get ( actionName ) ) < nl > - webAction ← fromEither ( createWebaction ( fqn ) ) < nl > + webAction ← fromXor ( createWebaction ( fqn ) ) < nl > response ← fromFuture ( webAction . complete ( client . userId , completeUri ) ) < nl > _ ← fromBoolean ( actionFailed ( response . content . toString ) ) ( response . isSuccess ) < nl > _ ← fromFuture ( actionHashUserKV . delete ( actionHash ) ) < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala < nl > index cb31d09 . . 8e4d9e9 100644 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala < nl > @ @ - 1 , 50 + 1 , 47 @ @ < nl > package im . actor . concurrent < nl > < nl > + import cats . data . Xor . _ < nl > import cats . data . { Xor , XorT } < nl > + import cats . std . { EitherInstances , FutureInstances } < nl > + import cats . syntax . all . _ < nl > < nl > import scala . concurrent . { ExecutionContext , Future } < nl > import scala . language . implicitConversions < nl > < nl > - trait FutureResult [ ErrorCase ] { < nl > + trait FutureResult [ ErrorCase ] extends FutureInstances with EitherInstances { < nl > type Result [ A ] = XorT [ Future , ErrorCase , A ] < nl > + def Result [ A ] = XorT . apply [ Future , ErrorCase , A ] _ < nl > < nl > - implicit def futureFunctor ( implicit ec : ExecutionContext ) : cats . Functor [ Future ] = new cats . Functor [ Future ] { < nl > - def map [ A , B ] ( fa : Future [ A ] ) ( f : ( A ) ⇒ B ) = fa map f < nl > - } < nl > - implicit def futureMonad ( implicit ec : ExecutionContext ) : cats . Monad [ Future ] = new cats . Monad [ Future ] { < nl > - def pure [ A ] ( x : A ) = Future . successful ( x ) < nl > - def flatMap [ A , B ] ( fa : Future [ A ] ) ( f : ( A ) ⇒ Future [ B ] ) = fa flatMap f < nl > - } < nl > + def point [ A ] ( a : A ) : Result [ A ] = Result [ A ] ( Future . successful ( a . right ) ) < nl > < nl > - implicit class Boolean2Xor ( val self : Boolean ) { < nl > - def toXor [ A ] ( failure : A ) : A Xor Unit = if ( self ) Xor . right ( ( ) ) else Xor . left ( failure ) < nl > - } < nl > + def fromXor [ A ] ( va : ErrorCase Xor A ) : Result [ A ] = Result [ A ] ( Future . successful ( va ) ) < nl > < nl > - implicit def toEither [ E , A ] ( xor : E Xor A ) : Either [ E , A ] = xor . toEither < nl > + def fromXor [ A , B ] ( errorHandle : B ⇒ ErrorCase ) ( va : B Xor A ) : Result [ A ] = Result [ A ] ( Future . successful ( va leftMap errorHandle ) ) < nl > < nl > - implicit def toEither [ E , A ] ( fxor : Future [ E Xor A ] ) ( implicit ec : ExecutionContext ) : Future [ Either [ E , A ] ] = fxor map ( _ . toEither ) < nl > + def fromOption [ A ] ( failure : ErrorCase ) ( oa : Option [ A ] ) : Result [ A ] = Result [ A ] ( Future . successful ( oa toRightXor failure ) ) < nl > < nl > - def point [ A ] ( a : A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( Xor . right ( a ) ) ) < nl > + def fromBoolean [ A ] ( failure : ErrorCase ) ( oa : Boolean ) : Result [ Unit ] = Result [ Unit ] ( Future . successful ( if ( oa ) ( ) . right else failure . left ) ) < nl > < nl > - def fromFuture [ A ] ( fa : Future [ A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( fa map Xor . right ) < nl > + def fromFuture [ A ] ( fa : Future [ A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = Result [ A ] ( fa map right ) < nl > < nl > - def fromXor [ A ] ( va : ErrorCase Xor A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( va ) ) < nl > + def fromFuture [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fu : Future [ A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > + Result [ A ] ( fu . map ( _ . right ) recover { case e ⇒ errorHandle ( e ) . left } ) < nl > < nl > - def fromXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( va : Throwable Xor A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( va leftMap errorHandle ) ) < nl > + def fromFutureXor [ A ] ( fva : Future [ ErrorCase Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = Result [ A ] ( fva ) < nl > < nl > - def fromOption [ A ] ( failure : ErrorCase ) ( oa : Option [ A ] ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( Xor . fromOption ( oa , failure ) ) ) < nl > + def fromFutureXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Throwable Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > + Result [ A ] ( fea map ( either ⇒ either . leftMap ( errorHandle ) ) ) < nl > < nl > def fromFutureOption [ A ] ( failure : ErrorCase ) ( foa : Future [ Option [ A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > - XorT [ Future , ErrorCase , A ] ( foa map ( Xor . fromOption ( _ , failure ) ) ) < nl > + Result [ A ] ( foa . map ( _ toRightXor failure ) ) < nl > < nl > - def fromFutureEither [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Either [ Throwable , A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > - XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ Xor . fromEither ( either . left . map ( errorHandle ) ) ) ) < nl > - < nl > - def fromFutureXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Throwable Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > - XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ either . leftMap ( errorHandle ) ) ) < nl > + def fromFutureBoolean ( failure : ErrorCase ) ( foa : Future [ Boolean ] ) ( implicit ec : ExecutionContext ) : Result [ Unit ] = < nl > + Result [ Unit ] ( foa . map ( r ⇒ if ( r ) ( ) . right else failure . left ) ) < nl > + } < nl > < nl > - def fromFutureBoolean ( failure : ErrorCase ) ( fa : Future [ Boolean ] ) ( implicit ec : ExecutionContext ) : Result [ Unit ] = < nl > - XorT [ Future , ErrorCase , Unit ] ( fa map ( _ . toXor ( failure ) ) ) < nl > + / / TODO : find right place for it < nl > + trait XorEitherConversions { < nl > + implicit def toEither [ E , A ] ( xor : E Xor A ) : Either [ E , A ] = xor . toEither < nl > < nl > - def fromBoolean ( failure : ErrorCase ) ( oa : Boolean ) : Result [ Unit ] = XorT [ Future , ErrorCase , Unit ] ( Future . successful ( oa . toXor ( failure ) ) ) < nl > - } < nl > + implicit def toEither [ E , A ] ( fxor : Future [ E Xor A ] ) ( implicit ec : ExecutionContext ) : Future [ Either [ E , A ] ] = fxor map ( _ . toEither ) < nl > + } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala < nl > index de93c26 . . 4ffc016 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala < nl > @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . ActorSystem < nl > import cats . data . { Xor , XorT } < nl > import im . actor . api . rpc . messaging . ApiTextMessage < nl > import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } < nl > - import im . actor . concurrent . FutureResultCats < nl > + import im . actor . concurrent . FutureResult < nl > import im . actor . server . acl . ACLUtils < nl > import im . actor . server . activation . common . _ < nl > import im . actor . server . db . DbExtension < nl > @ @ - 20 , 7 + 20 , 7 @ @ import scala . concurrent . Future < nl > private [ activation ] final class InternalCodeProvider ( system : ActorSystem ) < nl > extends ActivationProvider < nl > with CommonAuthCodes < nl > - with FutureResultCats [ String ] { < nl > + with FutureResult [ String ] { < nl > < nl > private val config = InternalActivationConfig . load . getOrElse ( throw new RuntimeException ( " Failed to load InternalActivationConfig " ) ) < nl > private val onlineTimeWindow = config . onlineWindow . toMillis < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / FilesBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / FilesBotService . scala < nl > index 5ce72c3 . . 6e68ce8 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / FilesBotService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / FilesBotService . scala < nl > @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . bot . services < nl > < nl > import akka . actor . ActorSystem < nl > import im . actor . bots . BotMessages . _ < nl > - import im . actor . concurrent . FutureResultCats < nl > + import im . actor . concurrent . FutureResult < nl > import im . actor . server . acl . ACLUtils < nl > import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } < nl > import im . actor . server . db . DbExtension < nl > @ @ - 16 , 7 + 16 , 7 @ @ private [ bot ] object FilesBotErrors { < nl > val FileTooBig = BotError ( 400 , " FILE _ TOO _ BIG " ) < nl > } < nl > < nl > - private [ bot ] final class FilesBotService ( _ system : ActorSystem ) extends BotServiceBase ( _ system ) with FutureResultCats [ BotError ] with ApiToBotConversions { < nl > + private [ bot ] final class FilesBotService ( _ system : ActorSystem ) extends BotServiceBase ( _ system ) with FutureResult [ BotError ] with ApiToBotConversions { < nl > < nl > import FilesBotErrors . _ < nl > < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingBotService . scala < nl > index 2488aae . . 0da2400 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingBotService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingBotService . scala < nl > @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . ActorSystem < nl > import im . actor . api . rpc . PeersImplicits < nl > import im . actor . api . rpc . messaging . { ApiMessage , UpdateMessageContentChanged } < nl > import im . actor . bots . BotMessages . BotError < nl > - import im . actor . concurrent . FutureResultCats < nl > + import im . actor . concurrent . FutureResult < nl > import im . actor . server . bot . { BotServiceBase , BotToApiConversions } < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . dialog . DialogExtension < nl > @ @ - 20 , 7 + 20 , 7 @ @ private [ bot ] object MessagingBotErrors { < nl > } < nl > < nl > private [ bot ] final class MessagingBotService ( system : ActorSystem ) extends BotServiceBase ( system ) < nl > - with FutureResultCats [ BotError ] < nl > + with FutureResult [ BotError ] < nl > with BotToApiConversions < nl > with PeersImplicits { < nl > < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala < nl > index 424cdf2 . . 108cfbf 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala < nl > @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . ActorSystem < nl > import akka . stream . { Materializer , ActorMaterializer } < nl > import akka . util . ByteString < nl > import im . actor . bots . BotMessages . _ < nl > - import im . actor . concurrent . FutureResultCats < nl > + import im . actor . concurrent . FutureResult < nl > import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } < nl > import im . actor . server . file . { UnsafeFileName , FileStorageAdapter , FileStorageExtension , FileUtils } < nl > import im . actor . server . sticker . { Sticker , StickerImage } < nl > @ @ - 33 , 7 + 33 , 7 @ @ private [ bot ] object StickersBotErrors { < nl > } < nl > } < nl > < nl > - private [ bot ] final class StickersBotService ( _ system : ActorSystem ) extends BotServiceBase ( _ system ) with FutureResultCats [ BotError ] with ApiToBotConversions { < nl > + private [ bot ] final class StickersBotService ( _ system : ActorSystem ) extends BotServiceBase ( _ system ) with FutureResult [ BotError ] with ApiToBotConversions { < nl > < nl > import StickersBotErrors . _ < nl > < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala < nl > index b12ca53 . . e9192d9 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala < nl > @ @ - 3 , 13 + 3 , 13 @ @ package im . actor . server . bot . services < nl > import akka . actor . ActorSystem < nl > import cats . data . Xor < nl > import im . actor . bots . BotMessages . BotError < nl > - import im . actor . concurrent . FutureResultCats < nl > + import im . actor . concurrent . FutureResult < nl > import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . file . { ImageUtils , FileStorageExtension , FileStorageAdapter } < nl > import im . actor . server . user . { UserErrors , UserUtils } < nl > < nl > - private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResultCats [ BotError ] with ApiToBotConversions { < nl > + private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResult [ BotError ] with ApiToBotConversions { < nl > import im . actor . bots . BotMessages . _ < nl > import system . dispatcher < nl > import ImageUtils . _ < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooksBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooksBotService . scala < nl > index 642154c . . c84b506 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooksBotService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooksBotService . scala < nl > @ @ - 3 , 11 + 3 , 11 @ @ package im . actor . server . bot . services < nl > import akka . actor . ActorSystem < nl > import akka . util . Timeout < nl > import im . actor . bots . BotMessages < nl > - import im . actor . concurrent . FutureResultCats < nl > + import im . actor . concurrent . FutureResult < nl > import im . actor . config . ActorConfig < nl > import im . actor . server . bot . { BotExtension , BotServiceBase } < nl > < nl > - private [ bot ] final class WebHooksBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResultCats [ BotMessages . BotError ] { < nl > + private [ bot ] final class WebHooksBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResult [ BotMessages . BotError ] { < nl > < nl > import BotMessages . _ < nl > import system . dispatcher < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala < nl > index 8b205f8 . . 676a1d9 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala < nl > @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . _ < nl > import akka . event . Logging < nl > import cats . data . Xor < nl > import im . actor . api . rpc . stickers . { ApiStickerCollection , UpdateOwnStickersChanged , UpdateStickerCollectionsChanged } < nl > - import im . actor . concurrent . { FutureExt , FutureResultCats } < nl > + import im . actor . concurrent . { FutureExt , FutureResult } < nl > import im . actor . server . acl . ACLUtils < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . model . { StickerData , StickerPack } < nl > @ @ - 37 , 7 + 37 , 7 @ @ sealed trait StickersExtension extends Extension < nl > < nl > final class StickersExtensionImpl ( _ system : ActorSystem ) < nl > extends StickersExtension < nl > - with FutureResultCats [ StickerError ] < nl > + with FutureResult [ StickerError ] < nl > with StickersImplicitConversions { < nl > < nl > StickerMessages . register ( ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / http / routes / OutgoingHooks . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / http / routes / OutgoingHooks . scala < nl > index 1f64f9c . . 49436c8 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / http / routes / OutgoingHooks . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / http / routes / OutgoingHooks . scala < nl > @ @ - 6 , 7 + 6 , 7 @ @ import akka . http . scaladsl . server . Directives . _ < nl > import akka . http . scaladsl . server . Route < nl > import cats . data . Xor < nl > import de . heikoseeberger . akkahttpplayjson . PlayJsonSupport < nl > - import im . actor . concurrent . FutureResultCats < nl > + import im . actor . concurrent . FutureResult < nl > import im . actor . server . KeyValueMappings < nl > import im . actor . server . api . http . json . _ < nl > import im . actor . util . misc . IdUtils < nl > @ @ - 16 , 7 + 16 , 7 @ @ import shardakka . keyvalue . SimpleKeyValue < nl > import scala . concurrent . Future < nl > import scala . util . Try < nl > < nl > - object FutureResultHttp extends FutureResultCats [ ( StatusCode , String ) ] < nl > + object FutureResultHttp extends FutureResult [ ( StatusCode , String ) ] < nl > < nl > object OutgoingHooksErrors { < nl > val WrongIntegrationToken = " Wrong integration token " < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala < nl > new file mode 100644 < nl > index 0000000 . . cb31d09 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala < nl > @ @ - 0 , 0 + 1 , 50 @ @ < nl > + package im . actor . concurrent < nl > + < nl > + import cats . data . { Xor , XorT } < nl > + < nl > + import scala . concurrent . { ExecutionContext , Future } < nl > + import scala . language . implicitConversions < nl > + < nl > + trait FutureResult [ ErrorCase ] { < nl > + type Result [ A ] = XorT [ Future , ErrorCase , A ] < nl > + < nl > + implicit def futureFunctor ( implicit ec : ExecutionContext ) : cats . Functor [ Future ] = new cats . Functor [ Future ] { < nl > + def map [ A , B ] ( fa : Future [ A ] ) ( f : ( A ) ⇒ B ) = fa map f < nl > + } < nl > + implicit def futureMonad ( implicit ec : ExecutionContext ) : cats . Monad [ Future ] = new cats . Monad [ Future ] { < nl > + def pure [ A ] ( x : A ) = Future . successful ( x ) < nl > + def flatMap [ A , B ] ( fa : Future [ A ] ) ( f : ( A ) ⇒ Future [ B ] ) = fa flatMap f < nl > + } < nl > + < nl > + implicit class Boolean2Xor ( val self : Boolean ) { < nl > + def toXor [ A ] ( failure : A ) : A Xor Unit = if ( self ) Xor . right ( ( ) ) else Xor . left ( failure ) < nl > + } < nl > + < nl > + implicit def toEither [ E , A ] ( xor : E Xor A ) : Either [ E , A ] = xor . toEither < nl > + < nl > + implicit def toEither [ E , A ] ( fxor : Future [ E Xor A ] ) ( implicit ec : ExecutionContext ) : Future [ Either [ E , A ] ] = fxor map ( _ . toEither ) < nl > + < nl > + def point [ A ] ( a : A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( Xor . right ( a ) ) ) < nl > + < nl > + def fromFuture [ A ] ( fa : Future [ A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( fa map Xor . right ) < nl > + < nl > + def fromXor [ A ] ( va : ErrorCase Xor A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( va ) ) < nl > + < nl > + def fromXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( va : Throwable Xor A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( va leftMap errorHandle ) ) < nl > + < nl > + def fromOption [ A ] ( failure : ErrorCase ) ( oa : Option [ A ] ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( Xor . fromOption ( oa , failure ) ) ) < nl > + < nl > + def fromFutureOption [ A ] ( failure : ErrorCase ) ( foa : Future [ Option [ A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > + XorT [ Future , ErrorCase , A ] ( foa map ( Xor . fromOption ( _ , failure ) ) ) < nl > + < nl > + def fromFutureEither [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Either [ Throwable , A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > + XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ Xor . fromEither ( either . left . map ( errorHandle ) ) ) ) < nl > + < nl > + def fromFutureXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Throwable Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > + XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ either . leftMap ( errorHandle ) ) ) < nl > + < nl > + def fromFutureBoolean ( failure : ErrorCase ) ( fa : Future [ Boolean ] ) ( implicit ec : ExecutionContext ) : Result [ Unit ] = < nl > + XorT [ Future , ErrorCase , Unit ] ( fa map ( _ . toXor ( failure ) ) ) < nl > + < nl > + def fromBoolean ( failure : ErrorCase ) ( oa : Boolean ) : Result [ Unit ] = XorT [ Future , ErrorCase , Unit ] ( Future . successful ( oa . toXor ( failure ) ) ) < nl > + } < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala < nl > deleted file mode 100644 < nl > index 50eab8a . . 0000000 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala < nl > + + + / dev / null < nl > @ @ - 1 , 50 + 0 , 0 @ @ < nl > - package im . actor . concurrent < nl > - < nl > - import cats . data . { Xor , XorT } < nl > - < nl > - import scala . concurrent . { ExecutionContext , Future } < nl > - import scala . language . implicitConversions < nl > - < nl > - trait FutureResultCats [ ErrorCase ] { < nl > - type Result [ A ] = XorT [ Future , ErrorCase , A ] < nl > - < nl > - implicit def futureFunctor ( implicit ec : ExecutionContext ) : cats . Functor [ Future ] = new cats . Functor [ Future ] { < nl > - def map [ A , B ] ( fa : Future [ A ] ) ( f : ( A ) ⇒ B ) = fa map f < nl > - } < nl > - implicit def futureMonad ( implicit ec : ExecutionContext ) : cats . Monad [ Future ] = new cats . Monad [ Future ] { < nl > - def pure [ A ] ( x : A ) = Future . successful ( x ) < nl > - def flatMap [ A , B ] ( fa : Future [ A ] ) ( f : ( A ) ⇒ Future [ B ] ) = fa flatMap f < nl > - } < nl > - < nl > - implicit class Boolean2Xor ( val self : Boolean ) { < nl > - def toXor [ A ] ( failure : A ) : A Xor Unit = if ( self ) Xor . right ( ( ) ) else Xor . left ( failure ) < nl > - } < nl > - < nl > - implicit def toEither [ E , A ] ( xor : E Xor A ) : Either [ E , A ] = xor . toEither < nl > - < nl > - implicit def toEither [ E , A ] ( fxor : Future [ E Xor A ] ) ( implicit ec : ExecutionContext ) : Future [ Either [ E , A ] ] = fxor map ( _ . toEither ) < nl > - < nl > - def point [ A ] ( a : A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( Xor . right ( a ) ) ) < nl > - < nl > - def fromFuture [ A ] ( fa : Future [ A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( fa map Xor . right ) < nl > - < nl > - def fromXor [ A ] ( va : ErrorCase Xor A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( va ) ) < nl > - < nl > - def fromXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( va : Throwable Xor A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( va leftMap errorHandle ) ) < nl > - < nl > - def fromOption [ A ] ( failure : ErrorCase ) ( oa : Option [ A ] ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( Xor . fromOption ( oa , failure ) ) ) < nl > - < nl > - def fromFutureOption [ A ] ( failure : ErrorCase ) ( foa : Future [ Option [ A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > - XorT [ Future , ErrorCase , A ] ( foa map ( Xor . fromOption ( _ , failure ) ) ) < nl > - < nl > - def fromFutureEither [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Either [ Throwable , A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > - XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ Xor . fromEither ( either . left . map ( errorHandle ) ) ) ) < nl > - < nl > - def fromFutureXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Throwable Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > - XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ either . leftMap ( errorHandle ) ) ) < nl > - < nl > - def fromFutureBoolean ( failure : ErrorCase ) ( fa : Future [ Boolean ] ) ( implicit ec : ExecutionContext ) : Result [ Unit ] = < nl > - XorT [ Future , ErrorCase , Unit ] ( fa map ( _ . toXor ( failure ) ) ) < nl > - < nl > - def fromBoolean ( failure : ErrorCase ) ( oa : Boolean ) : Result [ Unit ] = XorT [ Future , ErrorCase , Unit ] ( Future . successful ( oa . toXor ( failure ) ) ) < nl > - }

TEST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServiceBase . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServiceBase . scala 
 index 6b6efbc . . e7cfa49 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServiceBase . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServiceBase . scala 
 @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . bot 
 
 import akka . actor . ActorSystem 
 import im . actor . bots . BotMessages 
 + import im . actor . concurrent . XorEitherConversions 
 import im . actor . server . user . UserExtension 
 import upickle . Js 
 import upickle . default . _ 
 @ @ - 39 , 7 + 40 , 7 @ @ trait BotServiceTypes extends BotToInternalConversions { 
 case class WeakRequestHandler ( handle : ( BotUserId , BotAuthId , BotAuthSid ) ⇒ Future [ BotResponseBody ] ) 
 } 
 
 - abstract class BotServiceBase ( system : ActorSystem ) extends BotServiceTypes { 
 + abstract class BotServiceBase ( system : ActorSystem ) extends BotServiceTypes with XorEitherConversions { 
 import BotMessages . _ 
 import system . dispatcher 
 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala 
 index e9192d9 . . 1f19960 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala 
 @ @ - 62 , 7 + 62 , 7 @ @ private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotService 
 ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ 
 ifIsAdmin ( botUserId ) { 
 ( for { 
 - avatar ← fromFutureEither ( _ ⇒ BotError ( 400 , " LOCATION _ INVALID " ) ) ( db . run ( scaleAvatar ( fileLocation . fileId ) ) ) 
 + avatar ← fromFutureXor ( _ ⇒ BotError ( 400 , " LOCATION _ INVALID " ) ) ( db . run ( scaleAvatar ( fileLocation . fileId ) ) map Xor . fromEither ) 
 _ ← fromFuture ( userExt . updateAvatar ( userId , Some ( avatar ) ) ) 
 } yield Void ) . value 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / FutureResultRpcCats . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / FutureResultRpcCats . scala 
 index a7a0974 . . 4c18d56 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / FutureResultRpcCats . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / FutureResultRpcCats . scala 
 @ @ - 1 , 39 + 1 , 5 @ @ 
 package im . actor . api . rpc 
 
 - import cats . data . Xor . _ 
 - import cats . data . { Xor , XorT } 
 - import cats . std . { EitherInstances , FutureInstances } 
 - import cats . syntax . all . _ 
 + import im . actor . concurrent . FutureResult 
 
 - import scala . concurrent . { ExecutionContext , Future } 
 - 
 - object FutureResultRpcCats extends FutureInstances with EitherInstances { 
 - type Result [ A ] = XorT [ Future , RpcError , A ] 
 - def Result [ A ] = XorT . apply [ Future , RpcError , A ] _ 
 - 
 - def point [ A ] ( a : A ) : Result [ A ] = Result [ A ] ( Future . successful ( right ( a ) ) ) 
 - 
 - def fromFuture [ A ] ( fu : Future [ A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = Result [ A ] ( fu . map ( right ) ) 
 - 
 - def fromFuture [ A ] ( failure : Throwable ⇒ RpcError ) ( fu : Future [ A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 - Result [ A ] ( fu . map ( _ . right ) recover { case e ⇒ failure ( e ) . left } ) 
 - 
 - def fromEither [ A ] ( va : RpcError Xor A ) : Result [ A ] = Result [ A ] ( Future . successful ( va ) ) 
 - 
 - def fromEither [ A , B ] ( failure : B ⇒ RpcError ) ( va : B Xor A ) : Result [ A ] = Result [ A ] ( Future . successful ( va . leftMap ( failure ) ) ) 
 - 
 - def fromOption [ A ] ( failure : RpcError ) ( oa : Option [ A ] ) : Result [ A ] = Result [ A ] ( Future . successful ( oa toRightXor failure ) ) 
 - 
 - def fromFutureOption [ A ] ( failure : RpcError ) ( foa : Future [ Option [ A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 - Result [ A ] ( foa . map ( _ toRightXor failure ) ) 
 - 
 - def fromFutureBoolean ( failure : RpcError ) ( foa : Future [ Boolean ] ) ( implicit ec : ExecutionContext ) : Result [ Unit ] = 
 - Result [ Unit ] ( foa . map ( r ⇒ if ( r ) right ( ( ) ) else left ( failure ) ) ) 
 - 
 - def fromFutureEither [ A , B ] ( failure : B ⇒ RpcError ) ( fva : Future [ B Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 - Result [ A ] ( fva . map ( _ . leftMap ( failure ) ) ) 
 - 
 - def fromFutureEither [ A ] ( fva : Future [ RpcError Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = Result [ A ] ( fva ) 
 - 
 - def fromBoolean [ A ] ( failure : RpcError ) ( oa : Boolean ) : Result [ Unit ] = Result [ Unit ] ( Future . successful ( if ( oa ) right ( ( ) ) else left ( failure ) ) ) 
 - } 
 \ No newline at end of file 
 + object FutureResultRpcCats extends FutureResult [ RpcError ] 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / raw / ArrayStyleRawApiService . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / raw / ArrayStyleRawApiService . scala 
 index 174a1fe . . d37eb39 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / raw / ArrayStyleRawApiService . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / raw / ArrayStyleRawApiService . scala 
 @ @ - 19 , 8 + 19 , 8 @ @ abstract class ArrayStyleRawApiService ( system : ActorSystem ) extends RawApiServic 
 
 override def apply ( name : String ) : Future [ Response ] = { 
 ( for { 
 - request ← fromEither ( validateRequests ( params ) ( name ) ) 
 - result ← fromFutureEither ( processRequests ( client ) ( request ) ) 
 + request ← fromXor ( validateRequests ( params ) ( name ) ) 
 + result ← fromFutureXor ( processRequests ( client ) ( request ) ) 
 } yield result ) . value 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / raw / MapStyleRawApiService . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / raw / MapStyleRawApiService . scala 
 index 1d4acd3 . . a8e4354 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc / raw / MapStyleRawApiService . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc / raw / MapStyleRawApiService . scala 
 @ @ - 56 , 8 + 56 , 8 @ @ abstract class MapStyleRawApiService ( system : ActorSystem ) extends RawApiService ( 
 override def isDefinedAt ( name : String ) : Boolean = validateRequest ( None ) . isDefinedAt ( name ) 
 
 override def apply ( name : String ) : Future [ Response ] = ( for { 
 - request ← fromEither ( toRequest ( name , params ) ) 
 - result ← fromFutureEither ( handleInternal ( client ) ( request ) ) 
 + request ← fromXor ( toRequest ( name , params ) ) 
 + result ← fromFutureXor ( handleInternal ( client ) ( request ) ) 
 } yield result ) . value 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / http / routes / OutgoingHooks . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / http / routes / OutgoingHooks . scala 
 index 49436c8 . . 9495040 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / http / routes / OutgoingHooks . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / http / routes / OutgoingHooks . scala 
 @ @ - 74 , 7 + 74 , 7 @ @ trait OutgoingHooks extends ReverseHookUnmarshaler with PlayJsonSupport { 
 def register ( token : String , uri : String ) : Future [ ( StatusCode , String ) Xor Int ] = { 
 ( for { 
 groupId ← fromFutureOption ( NotFound → OutgoingHooksErrors . WrongIntegrationToken ) ( integrationTokensKv . get ( token ) ) 
 - uri ← fromXor ( e ⇒ BadRequest → OutgoingHooksErrors . MalformedUri ) ( Xor . fromTry ( Try ( Uri ( uri ) ) ) ) 
 + uri ← fromXor ( ( e : Throwable ) ⇒ BadRequest → OutgoingHooksErrors . MalformedUri ) ( Xor . fromTry ( Try ( Uri ( uri ) ) ) ) 
 strUri = uri . toString ( ) 
 
 registeredUrs ← fromFuture ( getHooks ( token ) ) 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RawApiExtension . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RawApiExtension . scala 
 index 9138767 . . 7f1f0e7 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RawApiExtension . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RawApiExtension . scala 
 @ @ - 31 , 7 + 31 , 7 @ @ private [ rpc ] final class RawApiExtensionImpl ( system : ExtendedActorSystem ) extend 
 ( for { 
 serviceHandler ← fromOption ( CommonRpcErrors . UnsupportedRequest ) ( services . get ( service ) ) 
 response ← fromOption ( CommonRpcErrors . UnsupportedRequest ) ( serviceHandler . handleRequests ( client ) ( params ) . lift ( method ) ) 
 - result ← fromFutureEither ( response ) 
 + result ← fromFutureXor ( response ) 
 } yield result ) . value 
 } 
 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala 
 index 0981539 . . 1a28dec 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / files / FilesServiceImpl . scala 
 @ @ - 42 , 7 + 42 , 7 @ @ class FilesServiceImpl ( implicit actorSystem : ActorSystem ) extends FilesService { 
 } yield ApiFileUrlDescription ( model . id , url , FileStorageAdapter . UrlExpirationTimeout . toSeconds . toInt , None , Vector . empty ) ) . value 
 } ) 
 / / FIXME : fail - fast here 
 - urlDescs ← fromEither ( ( e : RpcError ) ⇒ e ) ( attempts . foldLeft ( Xor . Right ( Nil ) : Xor [ RpcError , List [ ApiFileUrlDescription ] ] ) { 
 + urlDescs ← fromXor ( ( e : RpcError ) ⇒ e ) ( attempts . foldLeft ( Xor . Right ( Nil ) : Xor [ RpcError , List [ ApiFileUrlDescription ] ] ) { 
 case ( Xor . Right ( acc ) , Xor . Right ( fd ) ) ⇒ Xor . Right ( fd : : acc ) 
 case ( l : Xor . Left [ _ ] , _ ) ⇒ l 
 case ( _ , l : Xor . Left [ _ ] ) ⇒ l 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / raw / RawServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / raw / RawServiceImpl . scala 
 index e77a11a . . ff22545 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / raw / RawServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / raw / RawServiceImpl . scala 
 @ @ - 18 , 7 + 18 , 7 @ @ final class RawServiceImpl ( implicit system : ActorSystem ) extends RawService { 
 
 override def doHandleRawRequest ( service : String , method : String , params : Option [ ApiRawValue ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseRawRequest ] ] = 
 authorized ( clientData ) { implicit client ⇒ 
 - ( for ( result ← fromFutureEither ( rawApiExt . handle ( service , method , params ) ) ) 
 + ( for ( result ← fromFutureXor ( rawApiExt . handle ( service , method , params ) ) ) 
 yield ResponseRawRequest ( result ) ) . value 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webactions / WebactionsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webactions / WebactionsServiceImpl . scala 
 index ebdd870 . . 8912a2a 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webactions / WebactionsServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webactions / WebactionsServiceImpl . scala 
 @ @ - 40 , 7 + 40 , 7 @ @ final class WebactionsServiceImpl ( implicit actorSystem : ActorSystem ) extends Web 
 authorized ( clientData ) { implicit client ⇒ 
 ( for { 
 fqn ← fromOption ( WebactionNotFound ) ( Webaction . list . get ( actionName ) ) 
 - webAction ← fromEither ( createWebaction ( fqn ) ) 
 + webAction ← fromXor ( createWebaction ( fqn ) ) 
 actionHash = generateActionHash ( ) 
 _ ← fromFuture ( actionHashUserKV . upsert ( actionHash , actionName ) ) 
 } yield ResponseInitWebaction ( webAction . uri ( params ) , webAction . regex , actionHash ) ) . value 
 @ @ - 51 , 7 + 51 , 7 @ @ final class WebactionsServiceImpl ( implicit actorSystem : ActorSystem ) extends Web 
 ( for { 
 actionName ← fromFutureOption ( WrongActionHash ) ( actionHashUserKV . get ( actionHash ) ) 
 fqn ← fromOption ( WebactionNotFound ) ( Webaction . list . get ( actionName ) ) 
 - webAction ← fromEither ( createWebaction ( fqn ) ) 
 + webAction ← fromXor ( createWebaction ( fqn ) ) 
 response ← fromFuture ( webAction . complete ( client . userId , completeUri ) ) 
 _ ← fromBoolean ( actionFailed ( response . content . toString ) ) ( response . isSuccess ) 
 _ ← fromFuture ( actionHashUserKV . delete ( actionHash ) ) 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala 
 index cb31d09 . . 8e4d9e9 100644 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala 
 @ @ - 1 , 50 + 1 , 47 @ @ 
 package im . actor . concurrent 
 
 + import cats . data . Xor . _ 
 import cats . data . { Xor , XorT } 
 + import cats . std . { EitherInstances , FutureInstances } 
 + import cats . syntax . all . _ 
 
 import scala . concurrent . { ExecutionContext , Future } 
 import scala . language . implicitConversions 
 
 - trait FutureResult [ ErrorCase ] { 
 + trait FutureResult [ ErrorCase ] extends FutureInstances with EitherInstances { 
 type Result [ A ] = XorT [ Future , ErrorCase , A ] 
 + def Result [ A ] = XorT . apply [ Future , ErrorCase , A ] _ 
 
 - implicit def futureFunctor ( implicit ec : ExecutionContext ) : cats . Functor [ Future ] = new cats . Functor [ Future ] { 
 - def map [ A , B ] ( fa : Future [ A ] ) ( f : ( A ) ⇒ B ) = fa map f 
 - } 
 - implicit def futureMonad ( implicit ec : ExecutionContext ) : cats . Monad [ Future ] = new cats . Monad [ Future ] { 
 - def pure [ A ] ( x : A ) = Future . successful ( x ) 
 - def flatMap [ A , B ] ( fa : Future [ A ] ) ( f : ( A ) ⇒ Future [ B ] ) = fa flatMap f 
 - } 
 + def point [ A ] ( a : A ) : Result [ A ] = Result [ A ] ( Future . successful ( a . right ) ) 
 
 - implicit class Boolean2Xor ( val self : Boolean ) { 
 - def toXor [ A ] ( failure : A ) : A Xor Unit = if ( self ) Xor . right ( ( ) ) else Xor . left ( failure ) 
 - } 
 + def fromXor [ A ] ( va : ErrorCase Xor A ) : Result [ A ] = Result [ A ] ( Future . successful ( va ) ) 
 
 - implicit def toEither [ E , A ] ( xor : E Xor A ) : Either [ E , A ] = xor . toEither 
 + def fromXor [ A , B ] ( errorHandle : B ⇒ ErrorCase ) ( va : B Xor A ) : Result [ A ] = Result [ A ] ( Future . successful ( va leftMap errorHandle ) ) 
 
 - implicit def toEither [ E , A ] ( fxor : Future [ E Xor A ] ) ( implicit ec : ExecutionContext ) : Future [ Either [ E , A ] ] = fxor map ( _ . toEither ) 
 + def fromOption [ A ] ( failure : ErrorCase ) ( oa : Option [ A ] ) : Result [ A ] = Result [ A ] ( Future . successful ( oa toRightXor failure ) ) 
 
 - def point [ A ] ( a : A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( Xor . right ( a ) ) ) 
 + def fromBoolean [ A ] ( failure : ErrorCase ) ( oa : Boolean ) : Result [ Unit ] = Result [ Unit ] ( Future . successful ( if ( oa ) ( ) . right else failure . left ) ) 
 
 - def fromFuture [ A ] ( fa : Future [ A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( fa map Xor . right ) 
 + def fromFuture [ A ] ( fa : Future [ A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = Result [ A ] ( fa map right ) 
 
 - def fromXor [ A ] ( va : ErrorCase Xor A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( va ) ) 
 + def fromFuture [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fu : Future [ A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 + Result [ A ] ( fu . map ( _ . right ) recover { case e ⇒ errorHandle ( e ) . left } ) 
 
 - def fromXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( va : Throwable Xor A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( va leftMap errorHandle ) ) 
 + def fromFutureXor [ A ] ( fva : Future [ ErrorCase Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = Result [ A ] ( fva ) 
 
 - def fromOption [ A ] ( failure : ErrorCase ) ( oa : Option [ A ] ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( Xor . fromOption ( oa , failure ) ) ) 
 + def fromFutureXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Throwable Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 + Result [ A ] ( fea map ( either ⇒ either . leftMap ( errorHandle ) ) ) 
 
 def fromFutureOption [ A ] ( failure : ErrorCase ) ( foa : Future [ Option [ A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 - XorT [ Future , ErrorCase , A ] ( foa map ( Xor . fromOption ( _ , failure ) ) ) 
 + Result [ A ] ( foa . map ( _ toRightXor failure ) ) 
 
 - def fromFutureEither [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Either [ Throwable , A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 - XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ Xor . fromEither ( either . left . map ( errorHandle ) ) ) ) 
 - 
 - def fromFutureXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Throwable Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 - XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ either . leftMap ( errorHandle ) ) ) 
 + def fromFutureBoolean ( failure : ErrorCase ) ( foa : Future [ Boolean ] ) ( implicit ec : ExecutionContext ) : Result [ Unit ] = 
 + Result [ Unit ] ( foa . map ( r ⇒ if ( r ) ( ) . right else failure . left ) ) 
 + } 
 
 - def fromFutureBoolean ( failure : ErrorCase ) ( fa : Future [ Boolean ] ) ( implicit ec : ExecutionContext ) : Result [ Unit ] = 
 - XorT [ Future , ErrorCase , Unit ] ( fa map ( _ . toXor ( failure ) ) ) 
 + / / TODO : find right place for it 
 + trait XorEitherConversions { 
 + implicit def toEither [ E , A ] ( xor : E Xor A ) : Either [ E , A ] = xor . toEither 
 
 - def fromBoolean ( failure : ErrorCase ) ( oa : Boolean ) : Result [ Unit ] = XorT [ Future , ErrorCase , Unit ] ( Future . successful ( oa . toXor ( failure ) ) ) 
 - } 
 + implicit def toEither [ E , A ] ( fxor : Future [ E Xor A ] ) ( implicit ec : ExecutionContext ) : Future [ Either [ E , A ] ] = fxor map ( _ . toEither ) 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala 
 index de93c26 . . 4ffc016 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala 
 @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . ActorSystem 
 import cats . data . { Xor , XorT } 
 import im . actor . api . rpc . messaging . ApiTextMessage 
 import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } 
 - import im . actor . concurrent . FutureResultCats 
 + import im . actor . concurrent . FutureResult 
 import im . actor . server . acl . ACLUtils 
 import im . actor . server . activation . common . _ 
 import im . actor . server . db . DbExtension 
 @ @ - 20 , 7 + 20 , 7 @ @ import scala . concurrent . Future 
 private [ activation ] final class InternalCodeProvider ( system : ActorSystem ) 
 extends ActivationProvider 
 with CommonAuthCodes 
 - with FutureResultCats [ String ] { 
 + with FutureResult [ String ] { 
 
 private val config = InternalActivationConfig . load . getOrElse ( throw new RuntimeException ( " Failed to load InternalActivationConfig " ) ) 
 private val onlineTimeWindow = config . onlineWindow . toMillis 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / FilesBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / FilesBotService . scala 
 index 5ce72c3 . . 6e68ce8 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / FilesBotService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / FilesBotService . scala 
 @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . bot . services 
 
 import akka . actor . ActorSystem 
 import im . actor . bots . BotMessages . _ 
 - import im . actor . concurrent . FutureResultCats 
 + import im . actor . concurrent . FutureResult 
 import im . actor . server . acl . ACLUtils 
 import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } 
 import im . actor . server . db . DbExtension 
 @ @ - 16 , 7 + 16 , 7 @ @ private [ bot ] object FilesBotErrors { 
 val FileTooBig = BotError ( 400 , " FILE _ TOO _ BIG " ) 
 } 
 
 - private [ bot ] final class FilesBotService ( _ system : ActorSystem ) extends BotServiceBase ( _ system ) with FutureResultCats [ BotError ] with ApiToBotConversions { 
 + private [ bot ] final class FilesBotService ( _ system : ActorSystem ) extends BotServiceBase ( _ system ) with FutureResult [ BotError ] with ApiToBotConversions { 
 
 import FilesBotErrors . _ 
 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingBotService . scala 
 index 2488aae . . 0da2400 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingBotService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / MessagingBotService . scala 
 @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . ActorSystem 
 import im . actor . api . rpc . PeersImplicits 
 import im . actor . api . rpc . messaging . { ApiMessage , UpdateMessageContentChanged } 
 import im . actor . bots . BotMessages . BotError 
 - import im . actor . concurrent . FutureResultCats 
 + import im . actor . concurrent . FutureResult 
 import im . actor . server . bot . { BotServiceBase , BotToApiConversions } 
 import im . actor . server . db . DbExtension 
 import im . actor . server . dialog . DialogExtension 
 @ @ - 20 , 7 + 20 , 7 @ @ private [ bot ] object MessagingBotErrors { 
 } 
 
 private [ bot ] final class MessagingBotService ( system : ActorSystem ) extends BotServiceBase ( system ) 
 - with FutureResultCats [ BotError ] 
 + with FutureResult [ BotError ] 
 with BotToApiConversions 
 with PeersImplicits { 
 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala 
 index 424cdf2 . . 108cfbf 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala 
 @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . ActorSystem 
 import akka . stream . { Materializer , ActorMaterializer } 
 import akka . util . ByteString 
 import im . actor . bots . BotMessages . _ 
 - import im . actor . concurrent . FutureResultCats 
 + import im . actor . concurrent . FutureResult 
 import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } 
 import im . actor . server . file . { UnsafeFileName , FileStorageAdapter , FileStorageExtension , FileUtils } 
 import im . actor . server . sticker . { Sticker , StickerImage } 
 @ @ - 33 , 7 + 33 , 7 @ @ private [ bot ] object StickersBotErrors { 
 } 
 } 
 
 - private [ bot ] final class StickersBotService ( _ system : ActorSystem ) extends BotServiceBase ( _ system ) with FutureResultCats [ BotError ] with ApiToBotConversions { 
 + private [ bot ] final class StickersBotService ( _ system : ActorSystem ) extends BotServiceBase ( _ system ) with FutureResult [ BotError ] with ApiToBotConversions { 
 
 import StickersBotErrors . _ 
 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala 
 index b12ca53 . . e9192d9 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala 
 @ @ - 3 , 13 + 3 , 13 @ @ package im . actor . server . bot . services 
 import akka . actor . ActorSystem 
 import cats . data . Xor 
 import im . actor . bots . BotMessages . BotError 
 - import im . actor . concurrent . FutureResultCats 
 + import im . actor . concurrent . FutureResult 
 import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } 
 import im . actor . server . db . DbExtension 
 import im . actor . server . file . { ImageUtils , FileStorageExtension , FileStorageAdapter } 
 import im . actor . server . user . { UserErrors , UserUtils } 
 
 - private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResultCats [ BotError ] with ApiToBotConversions { 
 + private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResult [ BotError ] with ApiToBotConversions { 
 import im . actor . bots . BotMessages . _ 
 import system . dispatcher 
 import ImageUtils . _ 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooksBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooksBotService . scala 
 index 642154c . . c84b506 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooksBotService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / WebHooksBotService . scala 
 @ @ - 3 , 11 + 3 , 11 @ @ package im . actor . server . bot . services 
 import akka . actor . ActorSystem 
 import akka . util . Timeout 
 import im . actor . bots . BotMessages 
 - import im . actor . concurrent . FutureResultCats 
 + import im . actor . concurrent . FutureResult 
 import im . actor . config . ActorConfig 
 import im . actor . server . bot . { BotExtension , BotServiceBase } 
 
 - private [ bot ] final class WebHooksBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResultCats [ BotMessages . BotError ] { 
 + private [ bot ] final class WebHooksBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResult [ BotMessages . BotError ] { 
 
 import BotMessages . _ 
 import system . dispatcher 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala 
 index 8b205f8 . . 676a1d9 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala 
 @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . _ 
 import akka . event . Logging 
 import cats . data . Xor 
 import im . actor . api . rpc . stickers . { ApiStickerCollection , UpdateOwnStickersChanged , UpdateStickerCollectionsChanged } 
 - import im . actor . concurrent . { FutureExt , FutureResultCats } 
 + import im . actor . concurrent . { FutureExt , FutureResult } 
 import im . actor . server . acl . ACLUtils 
 import im . actor . server . db . DbExtension 
 import im . actor . server . model . { StickerData , StickerPack } 
 @ @ - 37 , 7 + 37 , 7 @ @ sealed trait StickersExtension extends Extension 
 
 final class StickersExtensionImpl ( _ system : ActorSystem ) 
 extends StickersExtension 
 - with FutureResultCats [ StickerError ] 
 + with FutureResult [ StickerError ] 
 with StickersImplicitConversions { 
 
 StickerMessages . register ( ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / http / routes / OutgoingHooks . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / http / routes / OutgoingHooks . scala 
 index 1f64f9c . . 49436c8 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / http / routes / OutgoingHooks . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / http / routes / OutgoingHooks . scala 
 @ @ - 6 , 7 + 6 , 7 @ @ import akka . http . scaladsl . server . Directives . _ 
 import akka . http . scaladsl . server . Route 
 import cats . data . Xor 
 import de . heikoseeberger . akkahttpplayjson . PlayJsonSupport 
 - import im . actor . concurrent . FutureResultCats 
 + import im . actor . concurrent . FutureResult 
 import im . actor . server . KeyValueMappings 
 import im . actor . server . api . http . json . _ 
 import im . actor . util . misc . IdUtils 
 @ @ - 16 , 7 + 16 , 7 @ @ import shardakka . keyvalue . SimpleKeyValue 
 import scala . concurrent . Future 
 import scala . util . Try 
 
 - object FutureResultHttp extends FutureResultCats [ ( StatusCode , String ) ] 
 + object FutureResultHttp extends FutureResult [ ( StatusCode , String ) ] 
 
 object OutgoingHooksErrors { 
 val WrongIntegrationToken = " Wrong integration token " 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala 
 new file mode 100644 
 index 0000000 . . cb31d09 
 - - - / dev / null 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResult . scala 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + package im . actor . concurrent 
 + 
 + import cats . data . { Xor , XorT } 
 + 
 + import scala . concurrent . { ExecutionContext , Future } 
 + import scala . language . implicitConversions 
 + 
 + trait FutureResult [ ErrorCase ] { 
 + type Result [ A ] = XorT [ Future , ErrorCase , A ] 
 + 
 + implicit def futureFunctor ( implicit ec : ExecutionContext ) : cats . Functor [ Future ] = new cats . Functor [ Future ] { 
 + def map [ A , B ] ( fa : Future [ A ] ) ( f : ( A ) ⇒ B ) = fa map f 
 + } 
 + implicit def futureMonad ( implicit ec : ExecutionContext ) : cats . Monad [ Future ] = new cats . Monad [ Future ] { 
 + def pure [ A ] ( x : A ) = Future . successful ( x ) 
 + def flatMap [ A , B ] ( fa : Future [ A ] ) ( f : ( A ) ⇒ Future [ B ] ) = fa flatMap f 
 + } 
 + 
 + implicit class Boolean2Xor ( val self : Boolean ) { 
 + def toXor [ A ] ( failure : A ) : A Xor Unit = if ( self ) Xor . right ( ( ) ) else Xor . left ( failure ) 
 + } 
 + 
 + implicit def toEither [ E , A ] ( xor : E Xor A ) : Either [ E , A ] = xor . toEither 
 + 
 + implicit def toEither [ E , A ] ( fxor : Future [ E Xor A ] ) ( implicit ec : ExecutionContext ) : Future [ Either [ E , A ] ] = fxor map ( _ . toEither ) 
 + 
 + def point [ A ] ( a : A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( Xor . right ( a ) ) ) 
 + 
 + def fromFuture [ A ] ( fa : Future [ A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( fa map Xor . right ) 
 + 
 + def fromXor [ A ] ( va : ErrorCase Xor A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( va ) ) 
 + 
 + def fromXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( va : Throwable Xor A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( va leftMap errorHandle ) ) 
 + 
 + def fromOption [ A ] ( failure : ErrorCase ) ( oa : Option [ A ] ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( Xor . fromOption ( oa , failure ) ) ) 
 + 
 + def fromFutureOption [ A ] ( failure : ErrorCase ) ( foa : Future [ Option [ A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 + XorT [ Future , ErrorCase , A ] ( foa map ( Xor . fromOption ( _ , failure ) ) ) 
 + 
 + def fromFutureEither [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Either [ Throwable , A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 + XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ Xor . fromEither ( either . left . map ( errorHandle ) ) ) ) 
 + 
 + def fromFutureXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Throwable Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 + XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ either . leftMap ( errorHandle ) ) ) 
 + 
 + def fromFutureBoolean ( failure : ErrorCase ) ( fa : Future [ Boolean ] ) ( implicit ec : ExecutionContext ) : Result [ Unit ] = 
 + XorT [ Future , ErrorCase , Unit ] ( fa map ( _ . toXor ( failure ) ) ) 
 + 
 + def fromBoolean ( failure : ErrorCase ) ( oa : Boolean ) : Result [ Unit ] = XorT [ Future , ErrorCase , Unit ] ( Future . successful ( oa . toXor ( failure ) ) ) 
 + } 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala 
 deleted file mode 100644 
 index 50eab8a . . 0000000 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala 
 + + + / dev / null 
 @ @ - 1 , 50 + 0 , 0 @ @ 
 - package im . actor . concurrent 
 - 
 - import cats . data . { Xor , XorT } 
 - 
 - import scala . concurrent . { ExecutionContext , Future } 
 - import scala . language . implicitConversions 
 - 
 - trait FutureResultCats [ ErrorCase ] { 
 - type Result [ A ] = XorT [ Future , ErrorCase , A ] 
 - 
 - implicit def futureFunctor ( implicit ec : ExecutionContext ) : cats . Functor [ Future ] = new cats . Functor [ Future ] { 
 - def map [ A , B ] ( fa : Future [ A ] ) ( f : ( A ) ⇒ B ) = fa map f 
 - } 
 - implicit def futureMonad ( implicit ec : ExecutionContext ) : cats . Monad [ Future ] = new cats . Monad [ Future ] { 
 - def pure [ A ] ( x : A ) = Future . successful ( x ) 
 - def flatMap [ A , B ] ( fa : Future [ A ] ) ( f : ( A ) ⇒ Future [ B ] ) = fa flatMap f 
 - } 
 - 
 - implicit class Boolean2Xor ( val self : Boolean ) { 
 - def toXor [ A ] ( failure : A ) : A Xor Unit = if ( self ) Xor . right ( ( ) ) else Xor . left ( failure ) 
 - } 
 - 
 - implicit def toEither [ E , A ] ( xor : E Xor A ) : Either [ E , A ] = xor . toEither 
 - 
 - implicit def toEither [ E , A ] ( fxor : Future [ E Xor A ] ) ( implicit ec : ExecutionContext ) : Future [ Either [ E , A ] ] = fxor map ( _ . toEither ) 
 - 
 - def point [ A ] ( a : A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( Xor . right ( a ) ) ) 
 - 
 - def fromFuture [ A ] ( fa : Future [ A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( fa map Xor . right ) 
 - 
 - def fromXor [ A ] ( va : ErrorCase Xor A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( va ) ) 
 - 
 - def fromXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( va : Throwable Xor A ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( va leftMap errorHandle ) ) 
 - 
 - def fromOption [ A ] ( failure : ErrorCase ) ( oa : Option [ A ] ) : Result [ A ] = XorT [ Future , ErrorCase , A ] ( Future . successful ( Xor . fromOption ( oa , failure ) ) ) 
 - 
 - def fromFutureOption [ A ] ( failure : ErrorCase ) ( foa : Future [ Option [ A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 - XorT [ Future , ErrorCase , A ] ( foa map ( Xor . fromOption ( _ , failure ) ) ) 
 - 
 - def fromFutureEither [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Either [ Throwable , A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 - XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ Xor . fromEither ( either . left . map ( errorHandle ) ) ) ) 
 - 
 - def fromFutureXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Throwable Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 - XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ either . leftMap ( errorHandle ) ) ) 
 - 
 - def fromFutureBoolean ( failure : ErrorCase ) ( fa : Future [ Boolean ] ) ( implicit ec : ExecutionContext ) : Result [ Unit ] = 
 - XorT [ Future , ErrorCase , Unit ] ( fa map ( _ . toXor ( failure ) ) ) 
 - 
 - def fromBoolean ( failure : ErrorCase ) ( oa : Boolean ) : Result [ Unit ] = XorT [ Future , ErrorCase , Unit ] ( Future . successful ( oa . toXor ( failure ) ) ) 
 - }
