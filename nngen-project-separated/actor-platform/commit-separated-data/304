BLEU SCORE: 0.09287528999566796

TEST MSG: fix ( core ) : handle animation content in SenderActor
GENERATED MSG: feat ( android ) : add raw JSON messages

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / SenderActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / SenderActor . java < nl > index fdf37bf . . 2a561d1 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / SenderActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / SenderActor . java < nl > @ @ - 12 , 6 + 12 , 7 @ @ import java . util . ArrayList ; < nl > import java . util . HashMap ; < nl > import java . util . List ; < nl > < nl > + import im . actor . core . api . ApiDocumentExAnimation ; < nl > import im . actor . core . api . ApiDocumentExVoice ; < nl > import im . actor . core . api . ApiFastThumb ; < nl > import im . actor . core . api . ApiJsonMessage ; < nl > @ @ - 339 , 13 + 340 , 13 @ @ public class SenderActor extends ModuleActor { < nl > long rid = RandomUtils . nextRid ( ) ; < nl > long date = createPendingDate ( ) ; < nl > long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; < nl > - AnimationContent videoContent = AnimationContent . createLocalAnimation ( descriptor , < nl > + AnimationContent animationContent = AnimationContent . createLocalAnimation ( descriptor , < nl > fileName , fileSize , w , h , fastThumb ) ; < nl > < nl > - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , videoContent ) ; < nl > + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , animationContent ) ; < nl > context ( ) . getMessagesModule ( ) . getRouter ( ) . onOutgoingMessage ( peer , message ) ; < nl > < nl > - pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , videoContent ) ) ; < nl > + pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , animationContent ) ) ; < nl > savePending ( ) ; < nl > < nl > performUploadFile ( rid , descriptor , fileName ) ; < nl > @ @ - 425 , 6 + 426 , 9 @ @ public class SenderActor extends ModuleActor { < nl > } else if ( content instanceof VideoContent ) { < nl > VideoContent videoContent = ( VideoContent ) content ; < nl > documentEx = new ApiDocumentExVideo ( videoContent . getW ( ) , videoContent . getH ( ) , videoContent . getDuration ( ) ) ; < nl > + } else if ( content instanceof AnimationContent ) { < nl > + AnimationContent animationContent = ( AnimationContent ) content ; < nl > + documentEx = new ApiDocumentExAnimation ( animationContent . getW ( ) , animationContent . getH ( ) ) ; < nl > } else if ( content instanceof VoiceContent ) { < nl > VoiceContent voiceContent = ( VoiceContent ) content ; < nl > documentEx = new ApiDocumentExVoice ( voiceContent . getDuration ( ) ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 301edca . . 99c6fb2 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 64 , 6 + 64 , 7 @ @ import im . actor . core . viewmodel . UploadFileVM ; < nl > import im . actor . core . viewmodel . UploadFileVMCallback ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > import im . actor . runtime . actors . ActorSystem ; < nl > + import im . actor . runtime . json . JSONObject ; < nl > import im . actor . runtime . mvvm . MVVMCollection ; < nl > import im . actor . runtime . mvvm . ValueModel ; < nl > import im . actor . runtime . storage . PreferencesStorage ; < nl > @ @ - 696 , 6 + 697 , 17 @ @ public class Messenger { < nl > } < nl > < nl > / * * < nl > + * Send json message < nl > + * < nl > + * @ param peer destination peer < nl > + * @ param json json content < nl > + * / < nl > + @ ObjectiveCName ( " sendJsonWithPeer : withJson : " ) < nl > + public void sendJson ( @ NotNull Peer peer , @ NotNull JSONObject json ) { < nl > + modules . getMessagesModule ( ) . sendJson ( peer , json ) ; < nl > + } < nl > + < nl > + / * * < nl > * Send document without preview < nl > * < nl > * @ param peer destination peer < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / JsonContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / JsonContent . java < nl > new file mode 100644 < nl > index 0000000 . . 6219244 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / JsonContent . java < nl > @ @ - 0 , 0 + 1 , 41 @ @ < nl > + package im . actor . core . entity . content ; < nl > + < nl > + import org . jetbrains . annotations . NotNull ; < nl > + import org . jetbrains . annotations . Nullable ; < nl > + < nl > + import im . actor . core . api . ApiJsonMessage ; < nl > + import im . actor . core . entity . content . internal . ContentRemoteContainer ; < nl > + import im . actor . runtime . json . JSONException ; < nl > + import im . actor . runtime . json . JSONObject ; < nl > + < nl > + public class JsonContent extends AbsContent { < nl > + < nl > + private JSONObject jsonObject ; < nl > + private String rawJson ; < nl > + < nl > + @ NotNull < nl > + public static JsonContent create ( @ NotNull JSONObject json ) { < nl > + < nl > + try { < nl > + return new JsonContent ( new ContentRemoteContainer ( new ApiJsonMessage ( json . toString ( ) ) ) ) ; < nl > + } catch ( JSONException e ) { < nl > + throw new RuntimeException ( e ) ; < nl > + } < nl > + } < nl > + < nl > + < nl > + public JsonContent ( ContentRemoteContainer contentContainer ) throws JSONException { < nl > + super ( contentContainer ) ; < nl > + rawJson = ( ( ApiJsonMessage ) contentContainer . getMessage ( ) ) . getRawJson ( ) ; < nl > + jsonObject = new JSONObject ( rawJson ) ; < nl > + } < nl > + < nl > + < nl > + public String getRawJson ( ) { < nl > + return rawJson ; < nl > + } < nl > + < nl > + public JSONObject getJson ( ) { < nl > + return jsonObject ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index 4842ee3 . . bb37463 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 69 , 6 + 69 , 7 @ @ import im . actor . runtime . actors . tools . BounceFilterActor ; < nl > import im . actor . runtime . eventbus . BusSubscriber ; < nl > import im . actor . runtime . eventbus . Event ; < nl > import im . actor . runtime . files . FileSystemReference ; < nl > + import im . actor . runtime . json . JSONObject ; < nl > import im . actor . runtime . mvvm . MVVMCollection ; < nl > import im . actor . runtime . storage . KeyValueEngine ; < nl > import im . actor . runtime . storage . ListEngine ; < nl > @ @ - 338 , 6 + 339 , 11 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > sendMessageActor . send ( new SenderActor . SendLocation ( peer , longitude , latitude , street , place ) ) ; < nl > } < nl > < nl > + public void sendJson ( @ NotNull Peer peer , < nl > + @ NotNull JSONObject jsonObject ) { < nl > + sendMessageActor . send ( new SenderActor . SendJson ( peer , jsonObject ) ) ; < nl > + } < nl > + < nl > < nl > public void sendDocument ( Peer peer , String fileName , String mimeType , FastThumb fastThumb , < nl > String descriptor ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > index 2e01bb5 . . 17f15ca 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > @ @ - 43 , 6 + 43 , 7 @ @ import im . actor . core . entity . content . DocumentContent ; < nl > import im . actor . core . entity . content . FastThumb ; < nl > import im . actor . core . entity . content . FileLocalSource ; < nl > import im . actor . core . entity . content . FileRemoteSource ; < nl > + import im . actor . core . entity . content . JsonContent ; < nl > import im . actor . core . entity . content . LocationContent ; < nl > import im . actor . core . entity . content . PhotoContent ; < nl > import im . actor . core . entity . content . StickerContent ; < nl > @ @ - 59 , 6 + 60 , 7 @ @ import im . actor . core . modules . utils . RandomUtils ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > import im . actor . runtime . Storage ; < nl > + import im . actor . runtime . json . JSONObject ; < nl > < nl > public class SenderActor extends ModuleActor { < nl > < nl > @ @ - 170 , 6 + 172 , 22 @ @ public class SenderActor extends ModuleActor { < nl > performSendContent ( peer , rid , content ) ; < nl > } < nl > < nl > + public void doSendJson ( Peer peer , JSONObject jsonObject ) { < nl > + long rid = RandomUtils . nextRid ( ) ; < nl > + long date = createPendingDate ( ) ; < nl > + long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; < nl > + < nl > + JsonContent content = JsonContent . create ( jsonObject ) ; < nl > + < nl > + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content , new ArrayList < Reaction > ( ) ) ; < nl > + context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) . send ( message ) ; < nl > + < nl > + pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , content ) ) ; < nl > + savePending ( ) ; < nl > + < nl > + performSendContent ( peer , rid , content ) ; < nl > + } < nl > + < nl > / / Sending sticker < nl > public void doSendSticker ( @ NotNull Peer peer , < nl > @ NotNull Sticker sticker ) { < nl > @ @ - 400 , 6 + 418 , 8 @ @ public class SenderActor extends ModuleActor { < nl > message = new ApiJsonMessage ( ( ( LocationContent ) content ) . getRawJson ( ) ) ; < nl > } else if ( content instanceof ContactContent ) { < nl > message = new ApiJsonMessage ( ( ( ContactContent ) content ) . getRawJson ( ) ) ; < nl > + } else if ( content instanceof JsonContent ) { < nl > + message = new ApiJsonMessage ( ( ( JsonContent ) content ) . getRawJson ( ) ) ; < nl > } else if ( content instanceof StickerContent ) { < nl > Sticker sticker = ( ( StickerContent ) content ) . getSticker ( ) ; < nl > message = new ApiStickerMessage ( sticker . getStickerId ( ) , sticker . getThumb ( ) , sticker . getApiImageLocation512 ( ) , sticker . getApiImageLocation256 ( ) , sticker . getStickerCollectionId ( ) , sticker . getCollectionAccessHash ( ) ) ; < nl > @ @ - 506 , 6 + 526 , 9 @ @ public class SenderActor extends ModuleActor { < nl > } else if ( message instanceof SendSticker ) { < nl > SendSticker sendSticker = ( SendSticker ) message ; < nl > doSendSticker ( sendSticker . getPeer ( ) , sendSticker . getSticker ( ) ) ; < nl > + } else if ( message instanceof SendJson ) { < nl > + SendJson sendJson = ( SendJson ) message ; < nl > + doSendJson ( sendJson . getPeer ( ) , sendJson . getJson ( ) ) ; < nl > } else { < nl > drop ( message ) ; < nl > } < nl > @ @ - 861 , 6 + 884 , 26 @ @ public class SenderActor extends ModuleActor { < nl > } < nl > } < nl > < nl > + public static class SendJson { < nl > + private Peer peer ; < nl > + private JSONObject json ; < nl > + < nl > + public SendJson ( Peer peer , JSONObject json ) { < nl > + this . json = json ; < nl > + this . peer = peer ; < nl > + < nl > + } < nl > + < nl > + < nl > + public JSONObject getJson ( ) { < nl > + return json ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + } < nl > + < nl > < nl > / / endregion < nl > } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / SenderActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / SenderActor . java 
 index fdf37bf . . 2a561d1 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / SenderActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / SenderActor . java 
 @ @ - 12 , 6 + 12 , 7 @ @ import java . util . ArrayList ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 
 + import im . actor . core . api . ApiDocumentExAnimation ; 
 import im . actor . core . api . ApiDocumentExVoice ; 
 import im . actor . core . api . ApiFastThumb ; 
 import im . actor . core . api . ApiJsonMessage ; 
 @ @ - 339 , 13 + 340 , 13 @ @ public class SenderActor extends ModuleActor { 
 long rid = RandomUtils . nextRid ( ) ; 
 long date = createPendingDate ( ) ; 
 long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; 
 - AnimationContent videoContent = AnimationContent . createLocalAnimation ( descriptor , 
 + AnimationContent animationContent = AnimationContent . createLocalAnimation ( descriptor , 
 fileName , fileSize , w , h , fastThumb ) ; 
 
 - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , videoContent ) ; 
 + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , animationContent ) ; 
 context ( ) . getMessagesModule ( ) . getRouter ( ) . onOutgoingMessage ( peer , message ) ; 
 
 - pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , videoContent ) ) ; 
 + pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , animationContent ) ) ; 
 savePending ( ) ; 
 
 performUploadFile ( rid , descriptor , fileName ) ; 
 @ @ - 425 , 6 + 426 , 9 @ @ public class SenderActor extends ModuleActor { 
 } else if ( content instanceof VideoContent ) { 
 VideoContent videoContent = ( VideoContent ) content ; 
 documentEx = new ApiDocumentExVideo ( videoContent . getW ( ) , videoContent . getH ( ) , videoContent . getDuration ( ) ) ; 
 + } else if ( content instanceof AnimationContent ) { 
 + AnimationContent animationContent = ( AnimationContent ) content ; 
 + documentEx = new ApiDocumentExAnimation ( animationContent . getW ( ) , animationContent . getH ( ) ) ; 
 } else if ( content instanceof VoiceContent ) { 
 VoiceContent voiceContent = ( VoiceContent ) content ; 
 documentEx = new ApiDocumentExVoice ( voiceContent . getDuration ( ) ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 301edca . . 99c6fb2 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 64 , 6 + 64 , 7 @ @ import im . actor . core . viewmodel . UploadFileVM ; 
 import im . actor . core . viewmodel . UploadFileVMCallback ; 
 import im . actor . core . viewmodel . UserVM ; 
 import im . actor . runtime . actors . ActorSystem ; 
 + import im . actor . runtime . json . JSONObject ; 
 import im . actor . runtime . mvvm . MVVMCollection ; 
 import im . actor . runtime . mvvm . ValueModel ; 
 import im . actor . runtime . storage . PreferencesStorage ; 
 @ @ - 696 , 6 + 697 , 17 @ @ public class Messenger { 
 } 
 
 / * * 
 + * Send json message 
 + * 
 + * @ param peer destination peer 
 + * @ param json json content 
 + * / 
 + @ ObjectiveCName ( " sendJsonWithPeer : withJson : " ) 
 + public void sendJson ( @ NotNull Peer peer , @ NotNull JSONObject json ) { 
 + modules . getMessagesModule ( ) . sendJson ( peer , json ) ; 
 + } 
 + 
 + / * * 
 * Send document without preview 
 * 
 * @ param peer destination peer 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / JsonContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / JsonContent . java 
 new file mode 100644 
 index 0000000 . . 6219244 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / JsonContent . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + package im . actor . core . entity . content ; 
 + 
 + import org . jetbrains . annotations . NotNull ; 
 + import org . jetbrains . annotations . Nullable ; 
 + 
 + import im . actor . core . api . ApiJsonMessage ; 
 + import im . actor . core . entity . content . internal . ContentRemoteContainer ; 
 + import im . actor . runtime . json . JSONException ; 
 + import im . actor . runtime . json . JSONObject ; 
 + 
 + public class JsonContent extends AbsContent { 
 + 
 + private JSONObject jsonObject ; 
 + private String rawJson ; 
 + 
 + @ NotNull 
 + public static JsonContent create ( @ NotNull JSONObject json ) { 
 + 
 + try { 
 + return new JsonContent ( new ContentRemoteContainer ( new ApiJsonMessage ( json . toString ( ) ) ) ) ; 
 + } catch ( JSONException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + 
 + public JsonContent ( ContentRemoteContainer contentContainer ) throws JSONException { 
 + super ( contentContainer ) ; 
 + rawJson = ( ( ApiJsonMessage ) contentContainer . getMessage ( ) ) . getRawJson ( ) ; 
 + jsonObject = new JSONObject ( rawJson ) ; 
 + } 
 + 
 + 
 + public String getRawJson ( ) { 
 + return rawJson ; 
 + } 
 + 
 + public JSONObject getJson ( ) { 
 + return jsonObject ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index 4842ee3 . . bb37463 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 69 , 6 + 69 , 7 @ @ import im . actor . runtime . actors . tools . BounceFilterActor ; 
 import im . actor . runtime . eventbus . BusSubscriber ; 
 import im . actor . runtime . eventbus . Event ; 
 import im . actor . runtime . files . FileSystemReference ; 
 + import im . actor . runtime . json . JSONObject ; 
 import im . actor . runtime . mvvm . MVVMCollection ; 
 import im . actor . runtime . storage . KeyValueEngine ; 
 import im . actor . runtime . storage . ListEngine ; 
 @ @ - 338 , 6 + 339 , 11 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 sendMessageActor . send ( new SenderActor . SendLocation ( peer , longitude , latitude , street , place ) ) ; 
 } 
 
 + public void sendJson ( @ NotNull Peer peer , 
 + @ NotNull JSONObject jsonObject ) { 
 + sendMessageActor . send ( new SenderActor . SendJson ( peer , jsonObject ) ) ; 
 + } 
 + 
 
 public void sendDocument ( Peer peer , String fileName , String mimeType , FastThumb fastThumb , 
 String descriptor ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 index 2e01bb5 . . 17f15ca 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 @ @ - 43 , 6 + 43 , 7 @ @ import im . actor . core . entity . content . DocumentContent ; 
 import im . actor . core . entity . content . FastThumb ; 
 import im . actor . core . entity . content . FileLocalSource ; 
 import im . actor . core . entity . content . FileRemoteSource ; 
 + import im . actor . core . entity . content . JsonContent ; 
 import im . actor . core . entity . content . LocationContent ; 
 import im . actor . core . entity . content . PhotoContent ; 
 import im . actor . core . entity . content . StickerContent ; 
 @ @ - 59 , 6 + 60 , 7 @ @ import im . actor . core . modules . utils . RandomUtils ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 import im . actor . runtime . Storage ; 
 + import im . actor . runtime . json . JSONObject ; 
 
 public class SenderActor extends ModuleActor { 
 
 @ @ - 170 , 6 + 172 , 22 @ @ public class SenderActor extends ModuleActor { 
 performSendContent ( peer , rid , content ) ; 
 } 
 
 + public void doSendJson ( Peer peer , JSONObject jsonObject ) { 
 + long rid = RandomUtils . nextRid ( ) ; 
 + long date = createPendingDate ( ) ; 
 + long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; 
 + 
 + JsonContent content = JsonContent . create ( jsonObject ) ; 
 + 
 + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content , new ArrayList < Reaction > ( ) ) ; 
 + context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) . send ( message ) ; 
 + 
 + pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , content ) ) ; 
 + savePending ( ) ; 
 + 
 + performSendContent ( peer , rid , content ) ; 
 + } 
 + 
 / / Sending sticker 
 public void doSendSticker ( @ NotNull Peer peer , 
 @ NotNull Sticker sticker ) { 
 @ @ - 400 , 6 + 418 , 8 @ @ public class SenderActor extends ModuleActor { 
 message = new ApiJsonMessage ( ( ( LocationContent ) content ) . getRawJson ( ) ) ; 
 } else if ( content instanceof ContactContent ) { 
 message = new ApiJsonMessage ( ( ( ContactContent ) content ) . getRawJson ( ) ) ; 
 + } else if ( content instanceof JsonContent ) { 
 + message = new ApiJsonMessage ( ( ( JsonContent ) content ) . getRawJson ( ) ) ; 
 } else if ( content instanceof StickerContent ) { 
 Sticker sticker = ( ( StickerContent ) content ) . getSticker ( ) ; 
 message = new ApiStickerMessage ( sticker . getStickerId ( ) , sticker . getThumb ( ) , sticker . getApiImageLocation512 ( ) , sticker . getApiImageLocation256 ( ) , sticker . getStickerCollectionId ( ) , sticker . getCollectionAccessHash ( ) ) ; 
 @ @ - 506 , 6 + 526 , 9 @ @ public class SenderActor extends ModuleActor { 
 } else if ( message instanceof SendSticker ) { 
 SendSticker sendSticker = ( SendSticker ) message ; 
 doSendSticker ( sendSticker . getPeer ( ) , sendSticker . getSticker ( ) ) ; 
 + } else if ( message instanceof SendJson ) { 
 + SendJson sendJson = ( SendJson ) message ; 
 + doSendJson ( sendJson . getPeer ( ) , sendJson . getJson ( ) ) ; 
 } else { 
 drop ( message ) ; 
 } 
 @ @ - 861 , 6 + 884 , 26 @ @ public class SenderActor extends ModuleActor { 
 } 
 } 
 
 + public static class SendJson { 
 + private Peer peer ; 
 + private JSONObject json ; 
 + 
 + public SendJson ( Peer peer , JSONObject json ) { 
 + this . json = json ; 
 + this . peer = peer ; 
 + 
 + } 
 + 
 + 
 + public JSONObject getJson ( ) { 
 + return json ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + } 
 + 
 
 / / endregion 
 } 
 \ No newline at end of file
