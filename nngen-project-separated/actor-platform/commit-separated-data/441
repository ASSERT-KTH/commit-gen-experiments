BLEU SCORE: 0.39553325358771796

TEST MSG: fix ( server : messaging ) : fixed DialogProcessorMigration and ActorDelivery . read
GENERATED MSG: perf ( server : messaging ) : make DialogProcessorMigration more ram - effective

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala < nl > index 488d294 . . 74706b9 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala < nl > @ @ - 23 , 7 + 23 , 6 @ @ final class ActorDelivery ( ) ( implicit val system : ActorSystem ) < nl > implicit val seqUpdatesExt : SeqUpdatesExtension = SeqUpdatesExtension ( system ) < nl > private val userExt = UserExtension ( system ) < nl > private val dialogExt = DialogExtension ( system ) < nl > - private val db = DbExtension ( system ) . db < nl > < nl > override def receiverDelivery ( < nl > receiverUserId : Int , < nl > @ @ - 122 , 9 + 121 , 8 @ @ final class ActorDelivery ( ) ( implicit val system : ActorSystem ) < nl > ) map ( _ ⇒ ( ) ) < nl > } < nl > < nl > - override def read ( readerUserId : Int , readerAuthSid : Int , peer : Peer , date : Long , unreadCountOpt : Option [ Int ] ) : Future [ Unit ] = < nl > + override def read ( readerUserId : Int , readerAuthSid : Int , peer : Peer , date : Long , unreadCount : Int ) : Future [ Unit ] = < nl > for { < nl > - unreadCount ← unreadCountOpt . fold ( dialogExt . getUnreadTotal ( readerUserId ) ) ( FastFuture . successful ) < nl > _ ← seqUpdatesExt . deliverSingleUpdate ( < nl > userId = readerUserId , < nl > update = UpdateMessageReadByMe ( peer . asStruct , date , Some ( unreadCount ) ) , < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DeliveryExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DeliveryExtension . scala < nl > index bd38326 . . 42bf75d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DeliveryExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DeliveryExtension . scala < nl > @ @ - 36 , 6 + 36 , 6 @ @ trait DeliveryExtension { < nl > < nl > def notifyRead ( userId : Int , peer : Peer , date : Long , now : Long ) : Future [ Unit ] < nl > < nl > - def read ( readerUserId : Int , readerAuthSid : Int , peer : Peer , date : Long , unreadCount : Option [ Int ] ) : Future [ Unit ] < nl > + def read ( readerUserId : Int , readerAuthSid : Int , peer : Peer , date : Long , unreadCount : Int ) : Future [ Unit ] < nl > < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > index 5a3be31 . . a2b2233 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > @ @ - 136 , 7 + 136 , 7 @ @ trait DialogCommandHandlers extends PeersImplicits with UserACL { < nl > < nl > ( for { < nl > _ ← dialogExt . ackMessageRead ( peer , mr ) < nl > - _ ← deliveryExt . read ( userId , mr . readerAuthSid , peer , mr . date , Some ( state . counter ) ) < nl > + _ ← deliveryExt . read ( userId , mr . readerAuthSid , peer , mr . date , state . counter ) < nl > _ = deliveryExt . sendCountersUpdate ( userId ) < nl > } yield MessageReadAck ( ) ) pipeTo sender ( ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > index 9eb5d4a . . 2ae2495 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > @ @ - 13 , 7 + 13 , 7 @ @ import im . actor . server . persist . dialog . DialogRepo < nl > < nl > trait DialogProcessorMigration extends Processor [ DialogState ] { < nl > import DialogEvents . _ < nl > - import context . dispatcher < nl > + import context . { dispatcher , system } < nl > < nl > private case class PersistEvents ( events : List [ Event ] ) < nl > private case object EventsPersisted < nl > @ @ - 47 , 7 + 47 , 8 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { < nl > case d : DialogObsolete ⇒ < nl > log . warning ( " Finding messages " ) < nl > ( for { < nl > - metas ← db . run ( HistoryMessageRepo . findMetaAfter ( userId , peer , d . ownerLastReadAt , Long . MaxValue ) ) < nl > + historyOwner ← HistoryUtils . getHistoryOwner ( peer , userId ) < nl > + metas ← db . run ( HistoryMessageRepo . findMetaAfter ( historyOwner , peer , d . ownerLastReadAt , Long . MaxValue ) ) < nl > _ = log . warning ( " Found { } messages " , metas . size ) < nl > newMessages = metas map { < nl > case ( randomId , date , senderUserId , header ) ⇒ < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > index c882e84 . . 10d0881 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > @ @ - 65 , 7 + 65 , 7 @ @ private [ dialog ] final case class DialogState ( < nl > } else this . copy ( lastMessageDate = date ) < nl > case MessagesRead ( date , readerUserId ) if readerUserId = = userId ⇒ < nl > val readMessages = unreadMessages . takeWhile ( um ⇒ um . date . isBefore ( date ) | | um . date = = date ) . map ( _ . randomId ) < nl > - val newUnreadMessages = unreadMessages . dropWhile ( um = > readMessages . contains ( um . randomId ) ) < nl > + val newUnreadMessages = unreadMessages . dropWhile ( um ⇒ readMessages . contains ( um . randomId ) ) < nl > val newUnreadMessagesMap = unreadMessagesMap - - readMessages < nl > < nl > this . copy ( < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogProcessorStateSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogProcessorStateSpec . scala < nl > index 2409662 . . fbd81e6 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogProcessorStateSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogProcessorStateSpec . scala < nl > @ @ - 27 , 6 + 27 , 7 @ @ final class DialogProcessorStateSpec extends ActorSuite with PeersImplicits { < nl > < nl > val date2 = date1 . plusMillis ( 1 ) < nl > probe . commit ( NewMessage ( Random . nextLong ( ) , date2 , alice . id ) ) < nl > + probe . commit ( NewMessage ( Random . nextLong ( ) , date2 , userId ) ) < nl > probe . state . counter should be ( 2 ) < nl > < nl > checkSnapshot ( userId ) < nl > @ @ - 38 , 11 + 39 , 14 @ @ final class DialogProcessorStateSpec extends ActorSuite with PeersImplicits { < nl > probe . state . counter should be ( 1 ) < nl > < nl > probe . commit ( NewMessage ( Random . nextLong ( ) , Instant . now ( ) , alice . id ) ) < nl > - probe . commit ( NewMessage ( Random . nextLong ( ) , Instant . now ( ) , alice . id ) ) < nl > - probe . commit ( NewMessage ( Random . nextLong ( ) , Instant . now ( ) , alice . id ) ) < nl > - < nl > + probe . commit ( NewMessage ( Random . nextLong ( ) , Instant . now ( ) . plusMillis ( 1 ) , alice . id ) ) < nl > + val lastDate = Instant . now ( ) . plusMillis ( 2 ) < nl > + probe . commit ( NewMessage ( Random . nextLong ( ) , lastDate , alice . id ) ) < nl > probe . state . counter should be ( 4 ) < nl > < nl > + probe . commit ( MessagesRead ( lastDate , userId ) ) < nl > + probe . state . counter should be ( 0 ) < nl > + < nl > checkSnapshot ( userId ) < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > index 0ce236c . . e72d32e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > @ @ - 5 , 9 + 5 , 9 @ @ import java . time . Instant < nl > import akka . actor . Status < nl > import akka . pattern . pipe < nl > import akka . persistence . SnapshotMetadata < nl > - import im . actor . server . cqrs . { Event , Processor } < nl > + import im . actor . server . cqrs . { Event , Processor } < nl > import im . actor . server . db . DbExtension < nl > - import im . actor . server . model . { DialogObsolete , Peer } < nl > + import im . actor . server . model . { DialogObsolete , Peer } < nl > import im . actor . server . persist . HistoryMessageRepo < nl > import im . actor . server . persist . dialog . DialogRepo < nl > < nl > @ @ - 46 , 15 + 46 , 16 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { < nl > case d : DialogObsolete ⇒ < nl > log . warning ( " Finding messages " ) < nl > ( for { < nl > - models ← db . run ( HistoryMessageRepo . findAfter ( userId , peer , d . ownerLastReadAt , Long . MaxValue ) ) < nl > - _ = log . warning ( " Found { } messages " , models . size ) < nl > - newMessages = models map { m ⇒ < nl > - NewMessage ( < nl > - randomId = m . randomId , < nl > - date = Instant . ofEpochMilli ( m . date . getMillis ) , < nl > - senderUserId = m . senderUserId , < nl > - messageHeader = m . messageContentHeader < nl > - ) < nl > + metas ← db . run ( HistoryMessageRepo . findMetaAfter ( userId , peer , d . ownerLastReadAt , Long . MaxValue ) ) < nl > + _ = log . warning ( " Found { } messages " , metas . size ) < nl > + newMessages = metas map { < nl > + case ( randomId , date , senderUserId , header ) ⇒ < nl > + NewMessage ( < nl > + randomId = randomId , < nl > + date = Instant . ofEpochMilli ( date . getMillis ) , < nl > + senderUserId = senderUserId , < nl > + messageHeader = header < nl > + ) < nl > } < nl > } yield PersistEvents ( < nl > Initialized ( ) + : < nl > @ @ - 63 , 11 + 64 , 11 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { < nl > ) ) pipeTo self < nl > case PersistEvents ( events ) ⇒ < nl > log . warning ( " Persisting events " ) < nl > - persistAll ( events ) ( _ = > ( ) ) < nl > + persistAll ( events ) ( _ ⇒ ( ) ) < nl > < nl > deferAsync ( ( ) ) { _ ⇒ < nl > log . warning ( " Persisted events , commiting " ) < nl > - events foreach ( e = > commit ( e ) ) < nl > + events foreach ( e ⇒ commit ( e ) ) < nl > log . warning ( " Migration completed " ) < nl > unstashAll ( ) < nl > context become receiveCommand < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > index fddb9a8 . . 62495e2 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > @ @ - 5 , 7 + 5 , 7 @ @ import java . time . Instant < nl > import akka . actor . Status < nl > import akka . pattern . pipe < nl > import akka . persistence . SnapshotMetadata < nl > - import im . actor . server . cqrs . { Event , Processor } < nl > + import im . actor . server . cqrs . { Event , Processor } < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . model . DialogObsolete < nl > import im . actor . server . persist . dialog . DialogRepo < nl > @ @ - 78 , 8 + 78 , 8 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { < nl > } < nl > < nl > val events : List [ Event ] = Initialized ( Instant . now ( ) ) + : ( created + + archived + + favourited ) . toList < nl > - persistAll ( events ) ( _ = > ( ) ) < nl > - deferAsync ( ( ) ) { _ = > < nl > + persistAll ( events ) ( _ ⇒ ( ) ) < nl > + deferAsync ( ( ) ) { _ ⇒ < nl > events foreach ( e ⇒ commit ( e ) ) < nl > onComplete < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > index af782e8 . . c43a8bb 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > @ @ - 62 , 7 + 62 , 7 @ @ private [ dialog ] final case class DialogRootState ( < nl > case Unarchived ( ts , Some ( peer ) ) ⇒ withShownPeer ( ts , peer ) < nl > case Favourited ( ts , Some ( peer ) ) ⇒ withFavouritedPeer ( ts , peer ) < nl > case Unfavourited ( ts , Some ( peer ) ) ⇒ withUnfavouritedPeer ( ts , peer ) < nl > - case Initialized ( _ ) = > this < nl > + case Initialized ( _ ) ⇒ this < nl > } < nl > < nl > lazy val allPeers = activePeers + + archived < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > index 5db57e9 . . a1bde0b 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > @ @ - 80 , 7 + 80 , 7 @ @ private [ dialog ] final case class DialogState ( < nl > case MessagesReceived ( date ) if date . isAfter ( lastReceiveDate ) ⇒ this . copy ( lastReceiveDate = date ) < nl > case CounterReset ( ) ⇒ < nl > this . copy ( counter = 0 , unreadMessages = SortedSet . empty ( UnreadMessage . OrderingAsc ) , unreadMessagesMap = Map . empty ) < nl > - case Initialized ( ) = > this < nl > + case Initialized ( ) ⇒ this < nl > } < nl > < nl > override def withSnapshot ( metadata : SnapshotMetadata , snapshot : Any ) : DialogState = snapshot match { < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > index e8a9489 . . c8ee715 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > @ @ - 101 , 6 + 101 , 17 @ @ object HistoryMessageRepo { < nl > def findAfter ( userId : Int , peer : Peer , date : DateTime , limit : Long ) = < nl > afterC ( ( userId , peer . typ . value , peer . id , date , limit ) ) . result < nl > < nl > + private val metaAfterC = Compiled { ( userId : Rep [ Int ] , peerType : Rep [ Int ] , peerId : Rep [ Int ] , date : Rep [ DateTime ] , limit : ConstColumn [ Long ] ) ⇒ < nl > + byUserIdPeer ( userId , peerType , peerId ) < nl > + . filter ( _ . date > = date ) < nl > + . sortBy ( _ . date . asc ) < nl > + . take ( limit ) < nl > + . map ( hm ⇒ ( hm . randomId , hm . date , hm . senderUserId , hm . messageContentHeader ) ) < nl > + } < nl > + < nl > + def findMetaAfter ( userId : Int , peer : Peer , date : DateTime , limit : Long ) = < nl > + metaAfterC ( ( userId , peer . typ . value , peer . id , date , limit ) ) . result < nl > + < nl > private val beforeC = Compiled { ( userId : Rep [ Int ] , peerId : Rep [ Int ] , peerType : Rep [ Int ] , date : Rep [ DateTime ] , limit : ConstColumn [ Long ] ) ⇒ < nl > byUserIdPeer ( userId , peerType , peerId ) < nl > . filter ( _ . date < = date )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala 
 index 488d294 . . 74706b9 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala 
 @ @ - 23 , 7 + 23 , 6 @ @ final class ActorDelivery ( ) ( implicit val system : ActorSystem ) 
 implicit val seqUpdatesExt : SeqUpdatesExtension = SeqUpdatesExtension ( system ) 
 private val userExt = UserExtension ( system ) 
 private val dialogExt = DialogExtension ( system ) 
 - private val db = DbExtension ( system ) . db 
 
 override def receiverDelivery ( 
 receiverUserId : Int , 
 @ @ - 122 , 9 + 121 , 8 @ @ final class ActorDelivery ( ) ( implicit val system : ActorSystem ) 
 ) map ( _ ⇒ ( ) ) 
 } 
 
 - override def read ( readerUserId : Int , readerAuthSid : Int , peer : Peer , date : Long , unreadCountOpt : Option [ Int ] ) : Future [ Unit ] = 
 + override def read ( readerUserId : Int , readerAuthSid : Int , peer : Peer , date : Long , unreadCount : Int ) : Future [ Unit ] = 
 for { 
 - unreadCount ← unreadCountOpt . fold ( dialogExt . getUnreadTotal ( readerUserId ) ) ( FastFuture . successful ) 
 _ ← seqUpdatesExt . deliverSingleUpdate ( 
 userId = readerUserId , 
 update = UpdateMessageReadByMe ( peer . asStruct , date , Some ( unreadCount ) ) , 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DeliveryExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DeliveryExtension . scala 
 index bd38326 . . 42bf75d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DeliveryExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DeliveryExtension . scala 
 @ @ - 36 , 6 + 36 , 6 @ @ trait DeliveryExtension { 
 
 def notifyRead ( userId : Int , peer : Peer , date : Long , now : Long ) : Future [ Unit ] 
 
 - def read ( readerUserId : Int , readerAuthSid : Int , peer : Peer , date : Long , unreadCount : Option [ Int ] ) : Future [ Unit ] 
 + def read ( readerUserId : Int , readerAuthSid : Int , peer : Peer , date : Long , unreadCount : Int ) : Future [ Unit ] 
 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 index 5a3be31 . . a2b2233 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 @ @ - 136 , 7 + 136 , 7 @ @ trait DialogCommandHandlers extends PeersImplicits with UserACL { 
 
 ( for { 
 _ ← dialogExt . ackMessageRead ( peer , mr ) 
 - _ ← deliveryExt . read ( userId , mr . readerAuthSid , peer , mr . date , Some ( state . counter ) ) 
 + _ ← deliveryExt . read ( userId , mr . readerAuthSid , peer , mr . date , state . counter ) 
 _ = deliveryExt . sendCountersUpdate ( userId ) 
 } yield MessageReadAck ( ) ) pipeTo sender ( ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 index 9eb5d4a . . 2ae2495 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 @ @ - 13 , 7 + 13 , 7 @ @ import im . actor . server . persist . dialog . DialogRepo 
 
 trait DialogProcessorMigration extends Processor [ DialogState ] { 
 import DialogEvents . _ 
 - import context . dispatcher 
 + import context . { dispatcher , system } 
 
 private case class PersistEvents ( events : List [ Event ] ) 
 private case object EventsPersisted 
 @ @ - 47 , 7 + 47 , 8 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { 
 case d : DialogObsolete ⇒ 
 log . warning ( " Finding messages " ) 
 ( for { 
 - metas ← db . run ( HistoryMessageRepo . findMetaAfter ( userId , peer , d . ownerLastReadAt , Long . MaxValue ) ) 
 + historyOwner ← HistoryUtils . getHistoryOwner ( peer , userId ) 
 + metas ← db . run ( HistoryMessageRepo . findMetaAfter ( historyOwner , peer , d . ownerLastReadAt , Long . MaxValue ) ) 
 _ = log . warning ( " Found { } messages " , metas . size ) 
 newMessages = metas map { 
 case ( randomId , date , senderUserId , header ) ⇒ 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 index c882e84 . . 10d0881 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 @ @ - 65 , 7 + 65 , 7 @ @ private [ dialog ] final case class DialogState ( 
 } else this . copy ( lastMessageDate = date ) 
 case MessagesRead ( date , readerUserId ) if readerUserId = = userId ⇒ 
 val readMessages = unreadMessages . takeWhile ( um ⇒ um . date . isBefore ( date ) | | um . date = = date ) . map ( _ . randomId ) 
 - val newUnreadMessages = unreadMessages . dropWhile ( um = > readMessages . contains ( um . randomId ) ) 
 + val newUnreadMessages = unreadMessages . dropWhile ( um ⇒ readMessages . contains ( um . randomId ) ) 
 val newUnreadMessagesMap = unreadMessagesMap - - readMessages 
 
 this . copy ( 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogProcessorStateSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogProcessorStateSpec . scala 
 index 2409662 . . fbd81e6 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogProcessorStateSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogProcessorStateSpec . scala 
 @ @ - 27 , 6 + 27 , 7 @ @ final class DialogProcessorStateSpec extends ActorSuite with PeersImplicits { 
 
 val date2 = date1 . plusMillis ( 1 ) 
 probe . commit ( NewMessage ( Random . nextLong ( ) , date2 , alice . id ) ) 
 + probe . commit ( NewMessage ( Random . nextLong ( ) , date2 , userId ) ) 
 probe . state . counter should be ( 2 ) 
 
 checkSnapshot ( userId ) 
 @ @ - 38 , 11 + 39 , 14 @ @ final class DialogProcessorStateSpec extends ActorSuite with PeersImplicits { 
 probe . state . counter should be ( 1 ) 
 
 probe . commit ( NewMessage ( Random . nextLong ( ) , Instant . now ( ) , alice . id ) ) 
 - probe . commit ( NewMessage ( Random . nextLong ( ) , Instant . now ( ) , alice . id ) ) 
 - probe . commit ( NewMessage ( Random . nextLong ( ) , Instant . now ( ) , alice . id ) ) 
 - 
 + probe . commit ( NewMessage ( Random . nextLong ( ) , Instant . now ( ) . plusMillis ( 1 ) , alice . id ) ) 
 + val lastDate = Instant . now ( ) . plusMillis ( 2 ) 
 + probe . commit ( NewMessage ( Random . nextLong ( ) , lastDate , alice . id ) ) 
 probe . state . counter should be ( 4 ) 
 
 + probe . commit ( MessagesRead ( lastDate , userId ) ) 
 + probe . state . counter should be ( 0 ) 
 + 
 checkSnapshot ( userId ) 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 index 0ce236c . . e72d32e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 @ @ - 5 , 9 + 5 , 9 @ @ import java . time . Instant 
 import akka . actor . Status 
 import akka . pattern . pipe 
 import akka . persistence . SnapshotMetadata 
 - import im . actor . server . cqrs . { Event , Processor } 
 + import im . actor . server . cqrs . { Event , Processor } 
 import im . actor . server . db . DbExtension 
 - import im . actor . server . model . { DialogObsolete , Peer } 
 + import im . actor . server . model . { DialogObsolete , Peer } 
 import im . actor . server . persist . HistoryMessageRepo 
 import im . actor . server . persist . dialog . DialogRepo 
 
 @ @ - 46 , 15 + 46 , 16 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { 
 case d : DialogObsolete ⇒ 
 log . warning ( " Finding messages " ) 
 ( for { 
 - models ← db . run ( HistoryMessageRepo . findAfter ( userId , peer , d . ownerLastReadAt , Long . MaxValue ) ) 
 - _ = log . warning ( " Found { } messages " , models . size ) 
 - newMessages = models map { m ⇒ 
 - NewMessage ( 
 - randomId = m . randomId , 
 - date = Instant . ofEpochMilli ( m . date . getMillis ) , 
 - senderUserId = m . senderUserId , 
 - messageHeader = m . messageContentHeader 
 - ) 
 + metas ← db . run ( HistoryMessageRepo . findMetaAfter ( userId , peer , d . ownerLastReadAt , Long . MaxValue ) ) 
 + _ = log . warning ( " Found { } messages " , metas . size ) 
 + newMessages = metas map { 
 + case ( randomId , date , senderUserId , header ) ⇒ 
 + NewMessage ( 
 + randomId = randomId , 
 + date = Instant . ofEpochMilli ( date . getMillis ) , 
 + senderUserId = senderUserId , 
 + messageHeader = header 
 + ) 
 } 
 } yield PersistEvents ( 
 Initialized ( ) + : 
 @ @ - 63 , 11 + 64 , 11 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { 
 ) ) pipeTo self 
 case PersistEvents ( events ) ⇒ 
 log . warning ( " Persisting events " ) 
 - persistAll ( events ) ( _ = > ( ) ) 
 + persistAll ( events ) ( _ ⇒ ( ) ) 
 
 deferAsync ( ( ) ) { _ ⇒ 
 log . warning ( " Persisted events , commiting " ) 
 - events foreach ( e = > commit ( e ) ) 
 + events foreach ( e ⇒ commit ( e ) ) 
 log . warning ( " Migration completed " ) 
 unstashAll ( ) 
 context become receiveCommand 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 index fddb9a8 . . 62495e2 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 @ @ - 5 , 7 + 5 , 7 @ @ import java . time . Instant 
 import akka . actor . Status 
 import akka . pattern . pipe 
 import akka . persistence . SnapshotMetadata 
 - import im . actor . server . cqrs . { Event , Processor } 
 + import im . actor . server . cqrs . { Event , Processor } 
 import im . actor . server . db . DbExtension 
 import im . actor . server . model . DialogObsolete 
 import im . actor . server . persist . dialog . DialogRepo 
 @ @ - 78 , 8 + 78 , 8 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { 
 } 
 
 val events : List [ Event ] = Initialized ( Instant . now ( ) ) + : ( created + + archived + + favourited ) . toList 
 - persistAll ( events ) ( _ = > ( ) ) 
 - deferAsync ( ( ) ) { _ = > 
 + persistAll ( events ) ( _ ⇒ ( ) ) 
 + deferAsync ( ( ) ) { _ ⇒ 
 events foreach ( e ⇒ commit ( e ) ) 
 onComplete 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 index af782e8 . . c43a8bb 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 @ @ - 62 , 7 + 62 , 7 @ @ private [ dialog ] final case class DialogRootState ( 
 case Unarchived ( ts , Some ( peer ) ) ⇒ withShownPeer ( ts , peer ) 
 case Favourited ( ts , Some ( peer ) ) ⇒ withFavouritedPeer ( ts , peer ) 
 case Unfavourited ( ts , Some ( peer ) ) ⇒ withUnfavouritedPeer ( ts , peer ) 
 - case Initialized ( _ ) = > this 
 + case Initialized ( _ ) ⇒ this 
 } 
 
 lazy val allPeers = activePeers + + archived 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 index 5db57e9 . . a1bde0b 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 @ @ - 80 , 7 + 80 , 7 @ @ private [ dialog ] final case class DialogState ( 
 case MessagesReceived ( date ) if date . isAfter ( lastReceiveDate ) ⇒ this . copy ( lastReceiveDate = date ) 
 case CounterReset ( ) ⇒ 
 this . copy ( counter = 0 , unreadMessages = SortedSet . empty ( UnreadMessage . OrderingAsc ) , unreadMessagesMap = Map . empty ) 
 - case Initialized ( ) = > this 
 + case Initialized ( ) ⇒ this 
 } 
 
 override def withSnapshot ( metadata : SnapshotMetadata , snapshot : Any ) : DialogState = snapshot match { 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 index e8a9489 . . c8ee715 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 @ @ - 101 , 6 + 101 , 17 @ @ object HistoryMessageRepo { 
 def findAfter ( userId : Int , peer : Peer , date : DateTime , limit : Long ) = 
 afterC ( ( userId , peer . typ . value , peer . id , date , limit ) ) . result 
 
 + private val metaAfterC = Compiled { ( userId : Rep [ Int ] , peerType : Rep [ Int ] , peerId : Rep [ Int ] , date : Rep [ DateTime ] , limit : ConstColumn [ Long ] ) ⇒ 
 + byUserIdPeer ( userId , peerType , peerId ) 
 + . filter ( _ . date > = date ) 
 + . sortBy ( _ . date . asc ) 
 + . take ( limit ) 
 + . map ( hm ⇒ ( hm . randomId , hm . date , hm . senderUserId , hm . messageContentHeader ) ) 
 + } 
 + 
 + def findMetaAfter ( userId : Int , peer : Peer , date : DateTime , limit : Long ) = 
 + metaAfterC ( ( userId , peer . typ . value , peer . id , date , limit ) ) . result 
 + 
 private val beforeC = Compiled { ( userId : Rep [ Int ] , peerId : Rep [ Int ] , peerType : Rep [ Int ] , date : Rep [ DateTime ] , limit : ConstColumn [ Long ] ) ⇒ 
 byUserIdPeer ( userId , peerType , peerId ) 
 . filter ( _ . date < = date )
