BLEU SCORE: 0.04018457465973429

TEST MSG: feat ( botkit ) : AddUserExt methods
GENERATED MSG: fix ( server : bots ) : add owner user to sticker commands , more commands

TEST DIFF (one line): diff - - git a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > index cddeacc . . 73d68f9 100644 < nl > - - - a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > + + + b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . bots < nl > < nl > import derive . key < nl > import upickle . Js < nl > + import upickle . Js . Obj < nl > import upickle . default . _ < nl > < nl > import scala . annotation . meta . beanGetter < nl > @ @ - 279 , 7 + 280 , 7 @ @ object BotMessages { < nl > < nl > trait Void extends ResponseBody < nl > < nl > - final case object Void extends Void < nl > + case object Void extends Void < nl > < nl > implicit val voidReader = upickle . default . Reader [ Void ] { < nl > case Js . Obj ( ) ⇒ Void < nl > @ @ - 390 , 7 + 391 , 7 @ @ object BotMessages { < nl > } < nl > < nl > @ key ( " GetHooks " ) < nl > - final case object GetHooks extends GetHooks < nl > + case object GetHooks extends GetHooks < nl > < nl > @ key ( " ChangeUserAvatar " ) < nl > final case class ChangeUserAvatar ( < nl > @ @ - 460 , 6 + 461 , 44 @ @ object BotMessages { < nl > override def readResponse ( obj : Js . Obj ) = readJs [ Response ] ( obj ) < nl > } < nl > < nl > + @ key ( " AddUserExtString " ) < nl > + final case class AddUserExtString ( < nl > + @ beanGetter userId : Int , < nl > + @ beanGetter key : String , < nl > + @ beanGetter value : String < nl > + ) extends RequestBody { < nl > + override type Response = Void < nl > + < nl > + override def readResponse ( obj : Obj ) = readJs [ Response ] ( obj ) < nl > + < nl > + override val service : String = Services . Users < nl > + } < nl > + < nl > + @ key ( " AddUserExtBool " ) < nl > + final case class AddUserExtBool ( < nl > + @ beanGetter userId : Int , < nl > + @ beanGetter key : String , < nl > + @ beanGetter value : Boolean < nl > + ) extends RequestBody { < nl > + override type Response = Void < nl > + < nl > + override def readResponse ( obj : Obj ) = readJs [ Response ] ( obj ) < nl > + < nl > + override val service : String = Services . Users < nl > + } < nl > + < nl > + @ key ( " RemoveUserExt " ) < nl > + final case class RemoveUserExt ( < nl > + @ beanGetter userId : Int , < nl > + @ beanGetter key : String < nl > + ) extends RequestBody { < nl > + override type Response = Void < nl > + < nl > + override def readResponse ( obj : Obj ) = readJs [ Response ] ( obj ) < nl > + < nl > + override val service : String = Services . Users < nl > + } < nl > + < nl > @ key ( " IsAdmin " ) < nl > final case class IsAdmin ( @ beanGetter userId : Int ) extends RequestBody { < nl > override type Response = ResponseIsAdmin
NEAREST DIFF (one line): diff - - git a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > index 2dabc79 . . 36da6fe 100644 < nl > - - - a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > + + + b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > @ @ - 453 , 17 + 453 , 32 @ @ object BotMessages { < nl > } < nl > < nl > @ key ( " CreateStickerPack " ) < nl > - sealed trait CreateStickerPack extends RequestBody { < nl > + final case class CreateStickerPack ( @ beanGetter ownerUserId : Int ) extends RequestBody { < nl > override type Response = Container [ String ] < nl > override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) < nl > override val service : String = Services . Stickers < nl > } < nl > < nl > - @ key ( " CreateStickerPack " ) < nl > - case object CreateStickerPack extends CreateStickerPack < nl > + @ key ( " ShowStickerPacks " ) < nl > + final case class ShowStickerPacks ( @ beanGetter ownerUserId : Int ) extends RequestBody { < nl > + override type Response = ContainerList [ String ] < nl > + override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) < nl > + override val service : String = Services . Stickers < nl > + } < nl > + < nl > + @ key ( " ShowStickers " ) < nl > + final case class ShowStickers ( < nl > + @ beanGetter ownerUserId : Int , < nl > + @ beanGetter packId : Int < nl > + ) extends RequestBody { < nl > + override type Response = ContainerList [ String ] < nl > + override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) < nl > + override val service : String = Services . Stickers < nl > + } < nl > < nl > @ key ( " AddSticker " ) < nl > - case class AddSticker ( < nl > + final case class AddSticker ( < nl > + @ beanGetter userId : Int , < nl > @ beanGetter packId : Int , < nl > emoji : Option [ String ] , < nl > @ beanGetter fileLocation : FileLocation < nl > @ @ - 475 , 6 + 490 , 27 @ @ object BotMessages { < nl > def getEmoji = emoji . asJava < nl > } < nl > < nl > + @ key ( " DeleteSticker " ) < nl > + final case class DeleteSticker ( < nl > + @ beanGetter ownerUserId : Int , < nl > + @ beanGetter packId : Int , < nl > + @ beanGetter stickerId : Int < nl > + ) extends RequestBody { < nl > + override type Response = Void < nl > + override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) < nl > + override val service : String = Services . Stickers < nl > + } < nl > + < nl > + @ key ( " MakeStickerPackDefault " ) < nl > + final case class MakeStickerPackDefault ( < nl > + @ beanGetter userId : Int , < nl > + @ beanGetter packId : Int < nl > + ) extends RequestBody { < nl > + override type Response = Void < nl > + override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) < nl > + override val service : String = Services . Stickers < nl > + } < nl > + < nl > @ key ( " Message " ) < nl > final case class Message ( < nl > @ beanGetter peer : OutPeer ,

TEST DIFF:
diff - - git a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 index cddeacc . . 73d68f9 100644 
 - - - a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 + + + b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . bots 
 
 import derive . key 
 import upickle . Js 
 + import upickle . Js . Obj 
 import upickle . default . _ 
 
 import scala . annotation . meta . beanGetter 
 @ @ - 279 , 7 + 280 , 7 @ @ object BotMessages { 
 
 trait Void extends ResponseBody 
 
 - final case object Void extends Void 
 + case object Void extends Void 
 
 implicit val voidReader = upickle . default . Reader [ Void ] { 
 case Js . Obj ( ) ⇒ Void 
 @ @ - 390 , 7 + 391 , 7 @ @ object BotMessages { 
 } 
 
 @ key ( " GetHooks " ) 
 - final case object GetHooks extends GetHooks 
 + case object GetHooks extends GetHooks 
 
 @ key ( " ChangeUserAvatar " ) 
 final case class ChangeUserAvatar ( 
 @ @ - 460 , 6 + 461 , 44 @ @ object BotMessages { 
 override def readResponse ( obj : Js . Obj ) = readJs [ Response ] ( obj ) 
 } 
 
 + @ key ( " AddUserExtString " ) 
 + final case class AddUserExtString ( 
 + @ beanGetter userId : Int , 
 + @ beanGetter key : String , 
 + @ beanGetter value : String 
 + ) extends RequestBody { 
 + override type Response = Void 
 + 
 + override def readResponse ( obj : Obj ) = readJs [ Response ] ( obj ) 
 + 
 + override val service : String = Services . Users 
 + } 
 + 
 + @ key ( " AddUserExtBool " ) 
 + final case class AddUserExtBool ( 
 + @ beanGetter userId : Int , 
 + @ beanGetter key : String , 
 + @ beanGetter value : Boolean 
 + ) extends RequestBody { 
 + override type Response = Void 
 + 
 + override def readResponse ( obj : Obj ) = readJs [ Response ] ( obj ) 
 + 
 + override val service : String = Services . Users 
 + } 
 + 
 + @ key ( " RemoveUserExt " ) 
 + final case class RemoveUserExt ( 
 + @ beanGetter userId : Int , 
 + @ beanGetter key : String 
 + ) extends RequestBody { 
 + override type Response = Void 
 + 
 + override def readResponse ( obj : Obj ) = readJs [ Response ] ( obj ) 
 + 
 + override val service : String = Services . Users 
 + } 
 + 
 @ key ( " IsAdmin " ) 
 final case class IsAdmin ( @ beanGetter userId : Int ) extends RequestBody { 
 override type Response = ResponseIsAdmin

NEAREST DIFF:
diff - - git a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 index 2dabc79 . . 36da6fe 100644 
 - - - a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 + + + b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 @ @ - 453 , 17 + 453 , 32 @ @ object BotMessages { 
 } 
 
 @ key ( " CreateStickerPack " ) 
 - sealed trait CreateStickerPack extends RequestBody { 
 + final case class CreateStickerPack ( @ beanGetter ownerUserId : Int ) extends RequestBody { 
 override type Response = Container [ String ] 
 override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) 
 override val service : String = Services . Stickers 
 } 
 
 - @ key ( " CreateStickerPack " ) 
 - case object CreateStickerPack extends CreateStickerPack 
 + @ key ( " ShowStickerPacks " ) 
 + final case class ShowStickerPacks ( @ beanGetter ownerUserId : Int ) extends RequestBody { 
 + override type Response = ContainerList [ String ] 
 + override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) 
 + override val service : String = Services . Stickers 
 + } 
 + 
 + @ key ( " ShowStickers " ) 
 + final case class ShowStickers ( 
 + @ beanGetter ownerUserId : Int , 
 + @ beanGetter packId : Int 
 + ) extends RequestBody { 
 + override type Response = ContainerList [ String ] 
 + override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) 
 + override val service : String = Services . Stickers 
 + } 
 
 @ key ( " AddSticker " ) 
 - case class AddSticker ( 
 + final case class AddSticker ( 
 + @ beanGetter userId : Int , 
 @ beanGetter packId : Int , 
 emoji : Option [ String ] , 
 @ beanGetter fileLocation : FileLocation 
 @ @ - 475 , 6 + 490 , 27 @ @ object BotMessages { 
 def getEmoji = emoji . asJava 
 } 
 
 + @ key ( " DeleteSticker " ) 
 + final case class DeleteSticker ( 
 + @ beanGetter ownerUserId : Int , 
 + @ beanGetter packId : Int , 
 + @ beanGetter stickerId : Int 
 + ) extends RequestBody { 
 + override type Response = Void 
 + override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) 
 + override val service : String = Services . Stickers 
 + } 
 + 
 + @ key ( " MakeStickerPackDefault " ) 
 + final case class MakeStickerPackDefault ( 
 + @ beanGetter userId : Int , 
 + @ beanGetter packId : Int 
 + ) extends RequestBody { 
 + override type Response = Void 
 + override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) 
 + override val service : String = Services . Stickers 
 + } 
 + 
 @ key ( " Message " ) 
 final case class Message ( 
 @ beanGetter peer : OutPeer ,
