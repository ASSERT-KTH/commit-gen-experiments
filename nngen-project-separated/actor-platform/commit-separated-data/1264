BLEU SCORE: 0.420886844306855

TEST MSG: perf ( server : bots ) : reuse BotServerBlueprint
GENERATED MSG: refactor ( server : bots ) : more logging in bot stream

TEST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > index 798d78e . . ab17321 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > @ @ - 58 , 6 + 58 , 8 @ @ private [ bot ] final class BotExtension ( _ system : ActorSystem ) extends Extension { < nl > private def hooksKV ( userId : UserId ) : SimpleKeyValue [ String ] = < nl > shardakka . simpleKeyValue ( BotExtension . whUserTokensKV ( userId ) ) < nl > < nl > + lazy val botServerBlueprint = new BotServerBlueprint ( system ) < nl > + < nl > HttpApi ( system ) . registerHook ( " bots " ) { implicit system ⇒ < nl > new BotsHttpHandler ( this ) . routes < nl > } < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > index 78031de . . 7e3b138 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > @ @ - 11 , 13 + 11 , 12 @ @ import upickle . Js < nl > < nl > import scala . concurrent . Future < nl > < nl > - final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , system : ActorSystem ) { < nl > + final class BotServerBlueprint ( system : ActorSystem ) { < nl > < nl > import BotMessages . _ < nl > < nl > import system . dispatcher < nl > < nl > - private lazy val updBuilder = new BotUpdateBuilder ( botUserId , botAuthId , system ) < nl > private val msgService = new MessagingBotService ( system ) < nl > private val kvService = new KeyValueBotService ( system ) < nl > private val botsService = new BotsBotService ( system ) < nl > @ @ - 29 , 7 + 28 , 9 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , < nl > < nl > private val log = Logging ( system , getClass ) < nl > < nl > - val flow : Flow [ BotRequest , BotMessageOut , Unit ] = { < nl > + def flow ( botUserId : Int , botAuthId : Long , botAuthSid : Int ) : Flow [ BotRequest , BotMessageOut , Unit ] = { < nl > + val updBuilder = new BotUpdateBuilder ( botUserId , botAuthId , system ) < nl > + < nl > val updSource = < nl > Source . actorPublisher [ ( Int , Update ) ] ( UpdatesSource . props ( botUserId , botAuthId , botAuthSid ) ) < nl > . mapAsync ( 1 ) { < nl > @ @ - 40 , 7 + 41 , 7 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , < nl > < nl > val rqrspFlow = Flow [ BotRequest ] < nl > . mapAsync ( 1 ) { < nl > - case BotRequest ( id , service , body ) ⇒ handleRequest ( id , service , body ) < nl > + case BotRequest ( id , service , body ) ⇒ handleRequest ( botUserId , botAuthId , botAuthSid ) ( id , service , body ) < nl > } < nl > . map ( _ . asInstanceOf [ BotMessageOut ] ) < nl > < nl > @ @ - 64 , 7 + 65 , 7 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , < nl > } < nl > } < nl > < nl > - private def handleRequest ( id : Long , service : String , body : RequestBody ) : Future [ BotResponse ] = { < nl > + private def handleRequest ( botUserId : Int , botAuthId : Long , botAuthSid : Int ) ( id : Long , service : String , body : RequestBody ) : Future [ BotResponse ] = { < nl > val resultFuture = < nl > if ( services . isDefinedAt ( service ) ) { < nl > val handlers = services ( service ) . handlers < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala < nl > index e527519 . . cb390de 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala < nl > @ @ - 36 , 11 + 36 , 10 @ @ abstract class InternalBot ( userId : Int , nickname : String , name : String , isAdmin : < nl > def receive = { < nl > case Initialized ( authId , authSid ) ⇒ < nl > log . warning ( " Initialized bot { } { } { } " , userId , nickname , name ) < nl > - val bp = new BotServerBlueprint ( userId , authId , authSid , system ) < nl > < nl > val rqSource = < nl > Source . actorRef ( 100 , OverflowStrategy . fail ) < nl > - . via ( bp . flow ) < nl > + . via ( botExt . botServerBlueprint . flow ( userId , authId , authSid ) ) < nl > . to ( Sink . actorRef ( self , Kill ) ) < nl > . run ( ) < nl > < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / http / BotsHttpHandler . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / http / BotsHttpHandler . scala < nl > index 5654086 . . 1c9a4b5 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / http / BotsHttpHandler . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / http / BotsHttpHandler . scala < nl > @ @ - 137 , 8 + 137 , 6 @ @ private [ bot ] final class BotsHttpHandler ( botExt : BotExtension ) ( implicit system : < nl > } < nl > < nl > private def flow ( botUserId : Int , botAuthId : Long , botAuthSid : Int ) = { < nl > - val bp = new BotServerBlueprint ( botUserId , botAuthId , botAuthSid , system ) < nl > - < nl > Flow [ Message ] < nl > . mapAsync ( 1 ) { < nl > case tm : TextMessage ⇒ tm . textStream . runFold ( " " ) ( _ + + _ ) map { fullContent ⇒ < nl > @ @ - 149 , 7 + 147 , 7 @ @ private [ bot ] final class BotsHttpHandler ( botExt : BotExtension ) ( implicit system : < nl > } < nl > case bm : BinaryMessage ⇒ throw new RuntimeException ( " Binary message is not supported " ) with NoStackTrace < nl > } < nl > - . via ( bp . flow ) < nl > + . via ( botExt . botServerBlueprint . flow ( botUserId , botAuthId , botAuthSid ) ) < nl > . map { < nl > case rsp : BotResponse ⇒ < nl > log . debug ( " Bot response { } " , rsp )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > index 93b24e8 . . a2ec686 100644 < nl > - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > @ @ - 140 , 7 + 140 , 6 @ @ private [ botkit ] final class WebsocketClient ( url : String ) < nl > < nl > override val requestStrategy = new WatermarkRequestStrategy ( Int . MaxValue ) < nl > < nl > - < nl > override def preRestart ( reason : Throwable , message : Option [ Any ] ) : Unit = { < nl > log . error ( reason , " actor failed , message : { } " , message ) < nl > super . preRestart ( reason , message ) < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > index 4951288 . . c2492d3 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > package im . actor . server . bot < nl > < nl > import akka . actor . ActorSystem < nl > + import akka . event . Logging < nl > import akka . stream . scaladsl . { Flow , Merge , Source } < nl > import im . actor . api . rpc . Update < nl > import im . actor . bots . BotMessages < nl > @ @ - 8 , 12 + 9 , 11 @ @ import im . actor . server . bot . services . _ < nl > import upickle . Js < nl > < nl > import scala . concurrent . Future < nl > - import scala . util . Failure < nl > + import scala . util . { Success , Failure } < nl > < nl > final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , system : ActorSystem ) { < nl > < nl > import BotMessages . _ < nl > - import BotServiceTypes . _ < nl > import akka . stream . scaladsl . FlowGraph . Implicits . _ < nl > import system . dispatcher < nl > < nl > @ @ - 25 , 6 + 25 , 8 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , system : ActorSys < nl > private val usersService = new UsersBotService ( system ) < nl > private val groupsService = new GroupsBotService ( system ) < nl > < nl > + private val log = Logging ( system , getClass ) < nl > + < nl > val flow : Flow [ BotRequest , BotMessageOut , Unit ] = { < nl > val updSource = < nl > Source . actorPublisher [ ( Int , Update ) ] ( UpdatesSource . props ( botAuthId ) ) < nl > @ @ - 49 , 10 + 51 , 16 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , system : ActorSys < nl > rqrsp ~ > merge < nl > < nl > ( rqrsp . inlet , merge . out ) < nl > + } recover { < nl > + case e ⇒ < nl > + log . error ( e , " Failure in bot stream , userId : { } " , botUserId ) < nl > + throw e < nl > } < nl > } < nl > < nl > private def handleRequest ( id : Long , service : String , body : RequestBody ) : Future [ BotResponse ] = { < nl > + log . debug ( " Bot request : { } , id : { } , userId : { } " , body , id , botUserId ) < nl > + < nl > val resultFuture = < nl > if ( services . isDefinedAt ( service ) ) { < nl > val handlers = services ( service ) . handlers < nl > @ @ - 65 , 8 + 73 , 8 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , system : ActorSys < nl > } else Future . successful ( BotError ( 400 , " SERVICE _ NOT _ REGISTERED " , Js . Obj ( ) , None ) ) < nl > < nl > resultFuture map ( BotResponse ( id , _ ) ) andThen { < nl > - case Failure ( e ) ⇒ system . log . error ( e , " Failed to handle { } " , body ) < nl > - case _ ⇒ < nl > + case Failure ( e ) ⇒ log . error ( e , " Failed to handle bot request : { } , id : { } , userId : { } " , body , id , botUserId ) < nl > + case Success ( rsp ) ⇒ log . debug ( " Bot response : { } , id : { } , userId : { } " , rsp , id , botUserId ) < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 index 798d78e . . ab17321 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 @ @ - 58 , 6 + 58 , 8 @ @ private [ bot ] final class BotExtension ( _ system : ActorSystem ) extends Extension { 
 private def hooksKV ( userId : UserId ) : SimpleKeyValue [ String ] = 
 shardakka . simpleKeyValue ( BotExtension . whUserTokensKV ( userId ) ) 
 
 + lazy val botServerBlueprint = new BotServerBlueprint ( system ) 
 + 
 HttpApi ( system ) . registerHook ( " bots " ) { implicit system ⇒ 
 new BotsHttpHandler ( this ) . routes 
 } 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 index 78031de . . 7e3b138 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 @ @ - 11 , 13 + 11 , 12 @ @ import upickle . Js 
 
 import scala . concurrent . Future 
 
 - final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , system : ActorSystem ) { 
 + final class BotServerBlueprint ( system : ActorSystem ) { 
 
 import BotMessages . _ 
 
 import system . dispatcher 
 
 - private lazy val updBuilder = new BotUpdateBuilder ( botUserId , botAuthId , system ) 
 private val msgService = new MessagingBotService ( system ) 
 private val kvService = new KeyValueBotService ( system ) 
 private val botsService = new BotsBotService ( system ) 
 @ @ - 29 , 7 + 28 , 9 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , 
 
 private val log = Logging ( system , getClass ) 
 
 - val flow : Flow [ BotRequest , BotMessageOut , Unit ] = { 
 + def flow ( botUserId : Int , botAuthId : Long , botAuthSid : Int ) : Flow [ BotRequest , BotMessageOut , Unit ] = { 
 + val updBuilder = new BotUpdateBuilder ( botUserId , botAuthId , system ) 
 + 
 val updSource = 
 Source . actorPublisher [ ( Int , Update ) ] ( UpdatesSource . props ( botUserId , botAuthId , botAuthSid ) ) 
 . mapAsync ( 1 ) { 
 @ @ - 40 , 7 + 41 , 7 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , 
 
 val rqrspFlow = Flow [ BotRequest ] 
 . mapAsync ( 1 ) { 
 - case BotRequest ( id , service , body ) ⇒ handleRequest ( id , service , body ) 
 + case BotRequest ( id , service , body ) ⇒ handleRequest ( botUserId , botAuthId , botAuthSid ) ( id , service , body ) 
 } 
 . map ( _ . asInstanceOf [ BotMessageOut ] ) 
 
 @ @ - 64 , 7 + 65 , 7 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , 
 } 
 } 
 
 - private def handleRequest ( id : Long , service : String , body : RequestBody ) : Future [ BotResponse ] = { 
 + private def handleRequest ( botUserId : Int , botAuthId : Long , botAuthSid : Int ) ( id : Long , service : String , body : RequestBody ) : Future [ BotResponse ] = { 
 val resultFuture = 
 if ( services . isDefinedAt ( service ) ) { 
 val handlers = services ( service ) . handlers 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala 
 index e527519 . . cb390de 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala 
 @ @ - 36 , 11 + 36 , 10 @ @ abstract class InternalBot ( userId : Int , nickname : String , name : String , isAdmin : 
 def receive = { 
 case Initialized ( authId , authSid ) ⇒ 
 log . warning ( " Initialized bot { } { } { } " , userId , nickname , name ) 
 - val bp = new BotServerBlueprint ( userId , authId , authSid , system ) 
 
 val rqSource = 
 Source . actorRef ( 100 , OverflowStrategy . fail ) 
 - . via ( bp . flow ) 
 + . via ( botExt . botServerBlueprint . flow ( userId , authId , authSid ) ) 
 . to ( Sink . actorRef ( self , Kill ) ) 
 . run ( ) 
 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / http / BotsHttpHandler . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / http / BotsHttpHandler . scala 
 index 5654086 . . 1c9a4b5 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / http / BotsHttpHandler . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / http / BotsHttpHandler . scala 
 @ @ - 137 , 8 + 137 , 6 @ @ private [ bot ] final class BotsHttpHandler ( botExt : BotExtension ) ( implicit system : 
 } 
 
 private def flow ( botUserId : Int , botAuthId : Long , botAuthSid : Int ) = { 
 - val bp = new BotServerBlueprint ( botUserId , botAuthId , botAuthSid , system ) 
 - 
 Flow [ Message ] 
 . mapAsync ( 1 ) { 
 case tm : TextMessage ⇒ tm . textStream . runFold ( " " ) ( _ + + _ ) map { fullContent ⇒ 
 @ @ - 149 , 7 + 147 , 7 @ @ private [ bot ] final class BotsHttpHandler ( botExt : BotExtension ) ( implicit system : 
 } 
 case bm : BinaryMessage ⇒ throw new RuntimeException ( " Binary message is not supported " ) with NoStackTrace 
 } 
 - . via ( bp . flow ) 
 + . via ( botExt . botServerBlueprint . flow ( botUserId , botAuthId , botAuthSid ) ) 
 . map { 
 case rsp : BotResponse ⇒ 
 log . debug ( " Bot response { } " , rsp )

NEAREST DIFF:
diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 index 93b24e8 . . a2ec686 100644 
 - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 @ @ - 140 , 7 + 140 , 6 @ @ private [ botkit ] final class WebsocketClient ( url : String ) 
 
 override val requestStrategy = new WatermarkRequestStrategy ( Int . MaxValue ) 
 
 - 
 override def preRestart ( reason : Throwable , message : Option [ Any ] ) : Unit = { 
 log . error ( reason , " actor failed , message : { } " , message ) 
 super . preRestart ( reason , message ) 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 index 4951288 . . c2492d3 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package im . actor . server . bot 
 
 import akka . actor . ActorSystem 
 + import akka . event . Logging 
 import akka . stream . scaladsl . { Flow , Merge , Source } 
 import im . actor . api . rpc . Update 
 import im . actor . bots . BotMessages 
 @ @ - 8 , 12 + 9 , 11 @ @ import im . actor . server . bot . services . _ 
 import upickle . Js 
 
 import scala . concurrent . Future 
 - import scala . util . Failure 
 + import scala . util . { Success , Failure } 
 
 final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , system : ActorSystem ) { 
 
 import BotMessages . _ 
 - import BotServiceTypes . _ 
 import akka . stream . scaladsl . FlowGraph . Implicits . _ 
 import system . dispatcher 
 
 @ @ - 25 , 6 + 25 , 8 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , system : ActorSys 
 private val usersService = new UsersBotService ( system ) 
 private val groupsService = new GroupsBotService ( system ) 
 
 + private val log = Logging ( system , getClass ) 
 + 
 val flow : Flow [ BotRequest , BotMessageOut , Unit ] = { 
 val updSource = 
 Source . actorPublisher [ ( Int , Update ) ] ( UpdatesSource . props ( botAuthId ) ) 
 @ @ - 49 , 10 + 51 , 16 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , system : ActorSys 
 rqrsp ~ > merge 
 
 ( rqrsp . inlet , merge . out ) 
 + } recover { 
 + case e ⇒ 
 + log . error ( e , " Failure in bot stream , userId : { } " , botUserId ) 
 + throw e 
 } 
 } 
 
 private def handleRequest ( id : Long , service : String , body : RequestBody ) : Future [ BotResponse ] = { 
 + log . debug ( " Bot request : { } , id : { } , userId : { } " , body , id , botUserId ) 
 + 
 val resultFuture = 
 if ( services . isDefinedAt ( service ) ) { 
 val handlers = services ( service ) . handlers 
 @ @ - 65 , 8 + 73 , 8 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , system : ActorSys 
 } else Future . successful ( BotError ( 400 , " SERVICE _ NOT _ REGISTERED " , Js . Obj ( ) , None ) ) 
 
 resultFuture map ( BotResponse ( id , _ ) ) andThen { 
 - case Failure ( e ) ⇒ system . log . error ( e , " Failed to handle { } " , body ) 
 - case _ ⇒ 
 + case Failure ( e ) ⇒ log . error ( e , " Failed to handle bot request : { } , id : { } , userId : { } " , body , id , botUserId ) 
 + case Success ( rsp ) ⇒ log . debug ( " Bot response : { } , id : { } , userId : { } " , rsp , id , botUserId ) 
 } 
 }
