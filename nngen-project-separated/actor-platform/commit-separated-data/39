BLEU SCORE: 0.5169731539571706

TEST MSG: chore ( server ) : docker build setup
GENERATED MSG: chore ( server ) : documented config sections

TEST DIFF (one line): diff - - git a / actor - server / Dockerfile b / actor - server / Dockerfile < nl > new file mode 100644 < nl > index 0000000 . . 4025021 < nl > - - - / dev / null < nl > + + + b / actor - server / Dockerfile < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + FROM openjdk : 8u92 - jre - alpine < nl > + MAINTAINER Actor LLC < oss @ actor . im > < nl > + RUN apk - - update add bash openssl apr < nl > + ADD target / docker / stage / var / var < nl > + ENTRYPOINT bin / actor < nl > + WORKDIR / var / lib / actor < nl > + EXPOSE 9070 9080 9090 < nl > diff - - git a / actor - server / build . sbt b / actor - server / build . sbt < nl > index 0f290c6 . . 8f24fd2 100644 < nl > - - - a / actor - server / build . sbt < nl > + + + b / actor - server / build . sbt < nl > @ @ - 2 , 3 + 2 , 5 @ @ addCommandAlias ( " debianPackage " , " debian : packageBin " ) < nl > addCommandAlias ( " debianPackageSystemd " , < nl > " ; set serverLoading in Debian : = com . typesafe . sbt . packager . archetypes . ServerLoader . Systemd ; debian : packageBin " < nl > ) < nl > + < nl > + defaultLinuxInstallLocation in Docker : = " / var / lib / actor " < nl > diff - - git a / actor - server / docker . sh b / actor - server / docker . sh < nl > new file mode 100755 < nl > index 0000000 . . 11c3eef < nl > - - - / dev / null < nl > + + + b / actor - server / docker . sh < nl > @ @ - 0 , 0 + 1 , 3 @ @ < nl > + # ! / bin / bash < nl > + < nl > + sbt docker : stage & & docker build - - no - cache = true - f Dockerfile - t actor - server . < nl > diff - - git a / actor - server / src / docker / opt / docker / conf / logback . xml b / actor - server / src / docker / opt / docker / conf / logback . xml < nl > deleted file mode 100644 < nl > index 762dabf . . 0000000 < nl > - - - a / actor - server / src / docker / opt / docker / conf / logback . xml < nl > + + + / dev / null < nl > @ @ - 1 , 28 + 0 , 0 @ @ < nl > - < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > < nl > - < configuration scan = " true " scanPeriod = " 20 seconds " > < nl > - < logger name = " slick . compiler " level = " WARN " / > < nl > - < logger name = " slick . ast " level = " WARN " / > < nl > - < logger name = " akka . stream . impl " level = " WARN " / > < nl > - < logger name = " org . apache . zookeeper . ClientCnxn " level = " WARN " / > < nl > - < logger name = " slick . relational . ResultConverterCompiler " level = " WARN " / > < nl > - < logger name = " slick . jdbc . StatementInvoker . result " level = " WARN " / > < nl > - < logger name = " slick . jdbc . JdbcBackend . statement " level = " WARN " / > < nl > - < logger name = " slick . backend . DatabaseComponent . action " level = " WARN " / > < nl > - < logger name = " slick . jdbc . JdbcBackend . benchmark " level = " WARN " / > < nl > - < logger name = " im . actor . server . session . ReSender " level = " WARN " / > < nl > - < logger name = " im . actor . server . session . SessionMessagePublisher " level = " WARN " / > < nl > - < logger name = " im . actor . server . peermanagers . GroupPeerManager " level = " INFO " / > < nl > - < nl > - < appender name = " STDOUT " class = " ch . qos . logback . core . ConsoleAppender " > < nl > - < withJansi > true < / withJansi > < nl > - < encoder > < nl > - < charset > UTF - 8 < / charset > < nl > - < pattern > % X { akkaTimestamp } % highlight ( % - 5level ) % cyan ( % logger { 36 } ) % magenta ( % X { akkaSource } ) % X { authId } % X { sessionId } % msg % n < nl > - < / pattern > < nl > - < / encoder > < nl > - < / appender > < nl > - < nl > - < root level = " INFO " > < nl > - < appender - ref ref = " STDOUT " / > < nl > - < / root > < nl > - < / configuration > < nl > diff - - git a / actor - server / src / docker / opt / docker / conf / server . conf b / actor - server / src / docker / opt / docker / conf / server . conf < nl > deleted file mode 100644 < nl > index 0a45894 . . 0000000 < nl > - - - a / actor - server / src / docker / opt / docker / conf / server . conf < nl > + + + / dev / null < nl > @ @ - 1 , 52 + 0 , 0 @ @ < nl > - / / We need it in application . conf because reference . conf can ' t refer to application . conf , this is a work - around < nl > - < nl > - modules { < nl > - files { < nl > - adapter : " im . actor . server . file . local . LocalFileStorageAdapter " < nl > - } < nl > - } < nl > - < nl > - services { < nl > - postgresql { < nl > - host : " postgres " < nl > - host : $ { ? DB _ HOST } < nl > - < nl > - db : postgres < nl > - db : $ { ? DB _ NAME } < nl > - < nl > - user : " postgres " < nl > - user : $ { ? DB _ USER } < nl > - < nl > - password : " " < nl > - password : $ { ? DB _ PASSWORD } < nl > - } < nl > - < nl > - actor - activation { < nl > - uri : " https : / / activation - gw . actor . im " < nl > - auth - token : " FPEinjrmxsq1ZDyu1bc7 " < nl > - auth - token : $ { ? ACTIVATION _ GW _ TOKEN } < nl > - } < nl > - < nl > - file - storage { < nl > - location : " / var / lib / actor / files " < nl > - location : $ { ? FILESTORAGE _ LOCATION } < nl > - } < nl > - } < nl > - < nl > - http { < nl > - static - files - directory : " / opt / docker / files " < nl > - } < nl > - < nl > - secret : $ { ? SECRET } < nl > - < nl > - akka { < nl > - log - config - on - start : true < nl > - < nl > - cluster { < nl > - seed - nodes = [ " akka . tcp : / / actor - server @ 127 . 0 . 0 . 1 : 2552 " ] < nl > - } < nl > - < nl > - remote { < nl > - netty . tcp . hostname = " 127 . 0 . 0 . 1 " < nl > - } < nl > - } < nl > diff - - git a / actor - server / src / docker / var / lib / actor / conf / logback . xml b / actor - server / src / docker / var / lib / actor / conf / logback . xml < nl > new file mode 100644 < nl > index 0000000 . . a97393d < nl > - - - / dev / null < nl > + + + b / actor - server / src / docker / var / lib / actor / conf / logback . xml < nl > @ @ - 0 , 0 + 1 , 26 @ @ < nl > + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > < nl > + < configuration scan = " true " scanPeriod = " 20 seconds " > < nl > + < logger name = " slick . compiler " level = " WARN " / > < nl > + < logger name = " slick . ast " level = " WARN " / > < nl > + < logger name = " akka . stream . impl " level = " WARN " / > < nl > + < logger name = " slick . relational . ResultConverterCompiler " level = " WARN " / > < nl > + < logger name = " slick . jdbc . StatementInvoker . result " level = " WARN " / > < nl > + < logger name = " slick . jdbc . JdbcBackend . statement " level = " WARN " / > < nl > + < logger name = " slick . backend . DatabaseComponent . action " level = " WARN " / > < nl > + < logger name = " slick . jdbc . JdbcBackend . benchmark " level = " WARN " / > < nl > + < logger name = " im . actor . server . session . ReSender " level = " WARN " / > < nl > + < logger name = " im . actor . server . session . SessionMessagePublisher " level = " WARN " / > < nl > + < nl > + < appender name = " STDOUT " class = " ch . qos . logback . core . ConsoleAppender " > < nl > + < withJansi > true < / withJansi > < nl > + < encoder > < nl > + < charset > UTF - 8 < / charset > < nl > + < pattern > % X { akkaTimestamp } % highlight ( % - 5level ) % cyan ( % logger { 36 } ) % magenta ( % X { akkaSource } ) % X { authId } % X { sessionId } % msg % n < nl > + < / pattern > < nl > + < / encoder > < nl > + < / appender > < nl > + < nl > + < root level = " DEBUG " > < nl > + < appender - ref ref = " STDOUT " / > < nl > + < / root > < nl > + < / configuration > < nl > diff - - git a / actor - server / src / docker / var / lib / actor / conf / server . conf b / actor - server / src / docker / var / lib / actor / conf / server . conf < nl > new file mode 100644 < nl > index 0000000 . . cf9156a < nl > - - - / dev / null < nl > + + + b / actor - server / src / docker / var / lib / actor / conf / server . conf < nl > @ @ - 0 , 0 + 1 , 50 @ @ < nl > + / / We need it in application . conf because reference . conf can ' t refer to application . conf , this is a work - around < nl > + < nl > + modules { < nl > + files { < nl > + adapter : " im . actor . server . file . local . LocalFileStorageAdapter " < nl > + } < nl > + } < nl > + < nl > + services { < nl > + postgresql { < nl > + host : " postgres " < nl > + host : $ { ? ACTOR _ DB _ HOST } < nl > + < nl > + db : postgres < nl > + db : $ { ? ACTOR _ DB _ NAME } < nl > + < nl > + user : " postgres " < nl > + user : $ { ? ACTOR _ DB _ USER } < nl > + < nl > + password : " " < nl > + password : $ { ? ACTOR _ DB _ PASSWORD } < nl > + } < nl > + < nl > + actor - activation { < nl > + uri : " https : / / gate . actor . im " < nl > + auth - token : $ { ? ACTOR _ GATE _ TOKEN } < nl > + } < nl > + < nl > + file - storage { < nl > + location : " / var / lib / actor / files " < nl > + location : $ { ? ACTOR _ FILESTORAGE _ LOCATION } < nl > + } < nl > + } < nl > + < nl > + secret : $ { ? ACTOR _ SECRET } < nl > + < nl > + akka { < nl > + log - config - on - start : true < nl > + loggers : [ " akka . event . slf4j . Slf4jLogger " ] < nl > + loglevel : " DEBUG " < nl > + < nl > + cluster { < nl > + seed - nodes = [ " akka . tcp : / / actor - server @ 127 . 0 . 0 . 1 : 2552 " ] < nl > + } < nl > + < nl > + remote { < nl > + netty . tcp . hostname = " 127 . 0 . 0 . 1 " < nl > + } < nl > + } < nl > + < nl > diff - - git a / actor - server / src / docker / var / lib / actor / files / init b / actor - server / src / docker / var / lib / actor / files / init < nl > deleted file mode 100644 < nl > index e69de29 . . 0000000 < nl > diff - - git a / actor - server / src / linux / usr / share / actor / conf / server . conf . example b / actor - server / src / linux / usr / share / actor / conf / server . conf . example < nl > new file mode 100644 < nl > index 0000000 . . a4b7e43 < nl > - - - / dev / null < nl > + + + b / actor - server / src / linux / usr / share / actor / conf / server . conf . example < nl > @ @ - 0 , 0 + 1 , 250 @ @ < nl > + # HTTP Server settings < nl > + # It serves static app ( optionally ) and provides integration API < nl > + # http { < nl > + # interface : " 0 . 0 . 0 . 0 " < nl > + # port : 9090 < nl > + # base - uri : " https : / / api . actor . im " < nl > + # } < nl > + < nl > + # URIs of endpoints , accessible by client applications < nl > + # public - endpoints : [ < nl > + # " wss : / / front1 - ws - mtproto - api - rev2 . actor . im " , < nl > + # " tls : / / front1 - mtproto - api - rev2 . actor . im " , < nl > + # " tcp : / / front3 - mtproto - api - rev3 . actor . im : 443 " < nl > + # ] < nl > + # Endpoints for Mobile / Web API < nl > + # It is strictly recommended to use 443 port < nl > + # for all connections . There are a lot of problems < nl > + # on any other ports . < nl > + # < nl > + # Array of elements in format : < nl > + # { < nl > + # type : " tcp " or " websocket " < nl > + # host : Listening host < nl > + # post : Listening port < nl > + # keystore : [ Optional ] Keystore < nl > + # } < nl > + # endpoints : [ < nl > + # { < nl > + # type : tcp < nl > + # interface : " 0 . 0 . 0 . 0 " < nl > + # port : 9070 < nl > + # } , < nl > + # { < nl > + # type : websocket < nl > + # interface : " 0 . 0 . 0 . 0 " < nl > + # port : 9080 < nl > + # } < nl > + # ] < nl > + < nl > + # Name of your application . < nl > + project - name : < your application name > < nl > + < nl > + # Secret is used to work with various secrets like password , auth hashes , etc < nl > + # It have to be set once and never be changed in future < nl > + secret : < put a long random string here > < nl > + < nl > + # Server modules < nl > + modules { < nl > + < nl > + # Configuration for messaging module < nl > + # messaging { < nl > + # Configure url for group invites here < nl > + # groups { < nl > + # invite { < nl > + # base - uri : https : / / quit . email < nl > + # } < nl > + # } < nl > + # } < nl > + < nl > + # Message enricher < nl > + # Comment this module if you don ' t want to use message < nl > + # enriching feature < nl > + # enricher { < nl > + # Uncomment to customize max image preview size < nl > + # max - preview - size = 2 M < nl > + # } < nl > + } < nl > + < nl > + # Services that are used by the server . < nl > + # Default distribution support services : < nl > + # * [ REQUIRED ] postgresql : PostgreSQL database < nl > + # * email : Email integration < nl > + # * aws : Amazon Web Services integration < nl > + # * google : Accessing Google services < nl > + # * apple : Accessing Apple services < nl > + # * telesign : Telesign Activation gateway < nl > + # * actor - activation : Actor Activation gateway < nl > + < nl > + services { < nl > + < nl > + # PostgreSQL storage for data < nl > + # The only required service to start server < nl > + # For more information see https : / / github . com / actorapp / actor - bootstrap / blob / master / docs / server / configure - database . md < nl > + postgresql { < nl > + # Host of PostgreSQL instance < nl > + host : localhost < nl > + # Port of PostgreSQL instance < nl > + port : 5432 < nl > + # Database name < nl > + db : actor < nl > + # User name in PostgreSQL < nl > + user : actor < nl > + # Password in PostgreSQL < nl > + password : < put _ psql _ password _ here > < nl > + } < nl > + < nl > + # AWS configuration < nl > + # It is strictly recommended to configure s3 storage for < nl > + # enabling file sharing in apps < nl > + # aws { < nl > + # S3 Storage , used for file sharing < nl > + # For more information see https : / / github . com / actorapp / actor - bootstrap / blob / master / docs / server / configure - s3 . md < nl > + # s3 { < nl > + # Bucket name < nl > + # default - bucket : < put _ your _ bucket _ name _ here > < nl > + # S3 Api Key < nl > + # access - key : < put _ your _ aws _ key _ here > < nl > + # S3 Api Secret < nl > + # secret - key : < put _ your _ aws _ secret _ here > < nl > + # S3 Endpoint < nl > + # endpoint : < put _ your _ custom _ endpoint _ here > < nl > + # S3 bucket region < nl > + # region : < put _ your _ region _ here > < nl > + # Enable S3 URLs with path - style access < nl > + # path - style - access : true / false < nl > + # } < nl > + # } < nl > + < nl > + # Service used for sending activation codes < nl > + activation { < nl > + # Define code providers . look im . actor . server . activation for full provider list < nl > + # providers { < nl > + # internal : im . actor . server . activation . internal . InternalCodeProvider < nl > + # sms : im . actor . server . activation . gate . ActorGateSmsProvider < nl > + # smtp : im . actor . server . activation . smtp . SMTPProvider < nl > + # call : im . actor . server . activation . telesign . TelesignProvider < nl > + # } < nl > + # Allow client to repeat code sending after this interval < nl > + # repeat - limit : 1m < nl > + # Time and attempt to expire sms / email activation code < nl > + # code - expiration : 1 day < nl > + # code - attempts : 3 < nl > + < nl > + # Email template for email code activation < nl > + # email { < nl > + # template : templates / activation - email - template . html < nl > + # } < nl > + # Setting for internal activation ( aka via actor bot ) < nl > + # internal { < nl > + # sender - user - id : 10 < nl > + # online - time - window : 10m < nl > + # message - template : " Your Actor activation code : $ $ CODE $ $ " < nl > + # } < nl > + } < nl > + < nl > + # Actor SMS gate < nl > + # Write to @ gatekeeper in Actor Cloud to get your token < nl > + actor - activation { < nl > + # uri : " https : / / gate . actor . im " < nl > + auth - token : < put token here > < nl > + } < nl > + < nl > + # Telesign SMS gate < nl > + # To get tokens ask at telesign web site : https : / / www . telesign . com < nl > + # telesign { < nl > + # customer - id : < put _ your _ customer _ id _ here > < nl > + # api - key : < put _ your _ api _ key _ here > < nl > + # } < nl > + < nl > + # Email configuration < nl > + email { < nl > + < nl > + # Sender information for outgoing emails < nl > + # sender { < nl > + # Sender Email address < nl > + # address : < put _ sender _ address _ here > < nl > + # Sender Name < nl > + # name : < put _ sender _ full _ name _ here > < nl > + # Mail theme prefix < nl > + # prefix : < put _ mail _ theme _ prefix _ here > < nl > + # } < nl > + < nl > + # SMTP server configuration < nl > + # smtp { < nl > + < nl > + # SMTP server host < nl > + # host : < put _ smtp _ server _ host _ here > < nl > + # SMTP server port < nl > + # port : < put _ smtp _ server _ port _ here > < nl > + # SMTP server username < nl > + # username : < put _ smtp _ server _ username _ here > < nl > + # SMTP server password < nl > + # password : < put _ smtp _ server _ password _ here > < nl > + < nl > + # Is TLS required < nl > + # tls : true < nl > + # } < nl > + } < nl > + < nl > + # Accessing Google Services < nl > + # Used for OAuth2 in gmail mailboxes < nl > + # and sending push notifications in Android & Chrome < nl > + # < nl > + # How to get OAuth2 : < nl > + # * Open https : / / console . developers . google . com / < nl > + # * Go To Api & Auth , then to Credentials < nl > + # * Press " Client Id " and create id for Web Application < nl > + # * In created Client Id there are values " Client Id " and " Client Secret " < nl > + # for web OAuth configuration < nl > + # * Same steps for Android & iOS applications < nl > + # < nl > + # How to get Push keys < nl > + # * Open https : / / console . developers . google . com / < nl > + # * Go To Api & Auth , then to Credentials < nl > + # * Press " Create new key " for Android Application < nl > + # * Allow any IP < nl > + # * Get API key from created " Key for Android Application " < nl > + # * Project Id can be found on Overview page < nl > + google { < nl > + < nl > + # Uncomment if you want to perform OAuth authentication < nl > + # for GMail accounts < nl > + # oauth { < nl > + # auth - uri : " https : / / accounts . google . com / o / oauth2 / auth " < nl > + # token - uri : " https : / / accounts . google . com / o / oauth2 / token " < nl > + # profile - uri : " https : / / www . googleapis . com / oauth2 / v2 / userinfo " < nl > + # client - id : < put _ your _ client _ id _ here > < nl > + # client - secret : < put _ your _ client _ secret _ here > < nl > + # scope : " https : / / www . googleapis . com / auth / userinfo . email https : / / www . googleapis . com / auth / userinfo . profile https : / / www . google . com / m8 / feeds / " < nl > + # } < nl > + < nl > + # Android & Chrome push notifications < nl > + # push { < nl > + # # Keys for push notifications in format < nl > + # keys = [ < nl > + # { < nl > + # project - id : < put _ your _ project _ id _ here > < nl > + # key : < put _ your _ key _ here > < nl > + # } < nl > + # ] < nl > + # } < nl > + } < nl > + < nl > + # Accessing Apple servers for push notifications < nl > + apple { < nl > + < nl > + # Safari & iOS notifications < nl > + # push { < nl > + # Mobile push certificates < nl > + # certs = [ < nl > + # { < nl > + # key : < put _ your _ certificate _ id _ here > < nl > + # path : < put _ your _ certificate _ path _ here > < nl > + # password : < put _ your _ certificate _ password _ here > < nl > + # sandbox : yes / no < nl > + # } < nl > + # ] < nl > + # } < nl > + } < nl > + } < nl > diff - - git a / actor - server / src / linux / usr / share / actor / conf / server . conf . example - minimal b / actor - server / src / linux / usr / share / actor / conf / server . conf . example - minimal < nl > new file mode 100644 < nl > index 0000000 . . 575c672 < nl > - - - / dev / null < nl > + + + b / actor - server / src / linux / usr / share / actor / conf / server . conf . example - minimal < nl > @ @ - 0 , 0 + 1 , 21 @ @ < nl > + services { < nl > + postgresql { < nl > + host : " localhost " < nl > + < nl > + db : actor < nl > + < nl > + user : actor < nl > + < nl > + password : < password > < nl > + } < nl > + < nl > + actor - activation { < nl > + auth - token : < token > < nl > + } < nl > + } < nl > + < nl > + secret : < put a long random string here > < nl > + project - name : < your application name > < nl > + public - endpoints : [ < nl > + < list of endpoints accessible by client applications > < nl > + ] < nl > \ No newline at end of file < nl > diff - - git a / actor - server / src / universal / conf / server . conf . example b / actor - server / src / universal / conf / server . conf . example < nl > deleted file mode 100644 < nl > index a4b7e43 . . 0000000 < nl > - - - a / actor - server / src / universal / conf / server . conf . example < nl > + + + / dev / null < nl > @ @ - 1 , 250 + 0 , 0 @ @ < nl > - # HTTP Server settings < nl > - # It serves static app ( optionally ) and provides integration API < nl > - # http { < nl > - # interface : " 0 . 0 . 0 . 0 " < nl > - # port : 9090 < nl > - # base - uri : " https : / / api . actor . im " < nl > - # } < nl > - < nl > - # URIs of endpoints , accessible by client applications < nl > - # public - endpoints : [ < nl > - # " wss : / / front1 - ws - mtproto - api - rev2 . actor . im " , < nl > - # " tls : / / front1 - mtproto - api - rev2 . actor . im " , < nl > - # " tcp : / / front3 - mtproto - api - rev3 . actor . im : 443 " < nl > - # ] < nl > - # Endpoints for Mobile / Web API < nl > - # It is strictly recommended to use 443 port < nl > - # for all connections . There are a lot of problems < nl > - # on any other ports . < nl > - # < nl > - # Array of elements in format : < nl > - # { < nl > - # type : " tcp " or " websocket " < nl > - # host : Listening host < nl > - # post : Listening port < nl > - # keystore : [ Optional ] Keystore < nl > - # } < nl > - # endpoints : [ < nl > - # { < nl > - # type : tcp < nl > - # interface : " 0 . 0 . 0 . 0 " < nl > - # port : 9070 < nl > - # } , < nl > - # { < nl > - # type : websocket < nl > - # interface : " 0 . 0 . 0 . 0 " < nl > - # port : 9080 < nl > - # } < nl > - # ] < nl > - < nl > - # Name of your application . < nl > - project - name : < your application name > < nl > - < nl > - # Secret is used to work with various secrets like password , auth hashes , etc < nl > - # It have to be set once and never be changed in future < nl > - secret : < put a long random string here > < nl > - < nl > - # Server modules < nl > - modules { < nl > - < nl > - # Configuration for messaging module < nl > - # messaging { < nl > - # Configure url for group invites here < nl > - # groups { < nl > - # invite { < nl > - # base - uri : https : / / quit . email < nl > - # } < nl > - # } < nl > - # } < nl > - < nl > - # Message enricher < nl > - # Comment this module if you don ' t want to use message < nl > - # enriching feature < nl > - # enricher { < nl > - # Uncomment to customize max image preview size < nl > - # max - preview - size = 2 M < nl > - # } < nl > - } < nl > - < nl > - # Services that are used by the server . < nl > - # Default distribution support services : < nl > - # * [ REQUIRED ] postgresql : PostgreSQL database < nl > - # * email : Email integration < nl > - # * aws : Amazon Web Services integration < nl > - # * google : Accessing Google services < nl > - # * apple : Accessing Apple services < nl > - # * telesign : Telesign Activation gateway < nl > - # * actor - activation : Actor Activation gateway < nl > - < nl > - services { < nl > - < nl > - # PostgreSQL storage for data < nl > - # The only required service to start server < nl > - # For more information see https : / / github . com / actorapp / actor - bootstrap / blob / master / docs / server / configure - database . md < nl > - postgresql { < nl > - # Host of PostgreSQL instance < nl > - host : localhost < nl > - # Port of PostgreSQL instance < nl > - port : 5432 < nl > - # Database name < nl > - db : actor < nl > - # User name in PostgreSQL < nl > - user : actor < nl > - # Password in PostgreSQL < nl > - password : < put _ psql _ password _ here > < nl > - } < nl > - < nl > - # AWS configuration < nl > - # It is strictly recommended to configure s3 storage for < nl > - # enabling file sharing in apps < nl > - # aws { < nl > - # S3 Storage , used for file sharing < nl > - # For more information see https : / / github . com / actorapp / actor - bootstrap / blob / master / docs / server / configure - s3 . md < nl > - # s3 { < nl > - # Bucket name < nl > - # default - bucket : < put _ your _ bucket _ name _ here > < nl > - # S3 Api Key < nl > - # access - key : < put _ your _ aws _ key _ here > < nl > - # S3 Api Secret < nl > - # secret - key : < put _ your _ aws _ secret _ here > < nl > - # S3 Endpoint < nl > - # endpoint : < put _ your _ custom _ endpoint _ here > < nl > - # S3 bucket region < nl > - # region : < put _ your _ region _ here > < nl > - # Enable S3 URLs with path - style access < nl > - # path - style - access : true / false < nl > - # } < nl > - # } < nl > - < nl > - # Service used for sending activation codes < nl > - activation { < nl > - # Define code providers . look im . actor . server . activation for full provider list < nl > - # providers { < nl > - # internal : im . actor . server . activation . internal . InternalCodeProvider < nl > - # sms : im . actor . server . activation . gate . ActorGateSmsProvider < nl > - # smtp : im . actor . server . activation . smtp . SMTPProvider < nl > - # call : im . actor . server . activation . telesign . TelesignProvider < nl > - # } < nl > - # Allow client to repeat code sending after this interval < nl > - # repeat - limit : 1m < nl > - # Time and attempt to expire sms / email activation code < nl > - # code - expiration : 1 day < nl > - # code - attempts : 3 < nl > - < nl > - # Email template for email code activation < nl > - # email { < nl > - # template : templates / activation - email - template . html < nl > - # } < nl > - # Setting for internal activation ( aka via actor bot ) < nl > - # internal { < nl > - # sender - user - id : 10 < nl > - # online - time - window : 10m < nl > - # message - template : " Your Actor activation code : $ $ CODE $ $ " < nl > - # } < nl > - } < nl > - < nl > - # Actor SMS gate < nl > - # Write to @ gatekeeper in Actor Cloud to get your token < nl > - actor - activation { < nl > - # uri : " https : / / gate . actor . im " < nl > - auth - token : < put token here > < nl > - } < nl > - < nl > - # Telesign SMS gate < nl > - # To get tokens ask at telesign web site : https : / / www . telesign . com < nl > - # telesign { < nl > - # customer - id : < put _ your _ customer _ id _ here > < nl > - # api - key : < put _ your _ api _ key _ here > < nl > - # } < nl > - < nl > - # Email configuration < nl > - email { < nl > - < nl > - # Sender information for outgoing emails < nl > - # sender { < nl > - # Sender Email address < nl > - # address : < put _ sender _ address _ here > < nl > - # Sender Name < nl > - # name : < put _ sender _ full _ name _ here > < nl > - # Mail theme prefix < nl > - # prefix : < put _ mail _ theme _ prefix _ here > < nl > - # } < nl > - < nl > - # SMTP server configuration < nl > - # smtp { < nl > - < nl > - # SMTP server host < nl > - # host : < put _ smtp _ server _ host _ here > < nl > - # SMTP server port < nl > - # port : < put _ smtp _ server _ port _ here > < nl > - # SMTP server username < nl > - # username : < put _ smtp _ server _ username _ here > < nl > - # SMTP server password < nl > - # password : < put _ smtp _ server _ password _ here > < nl > - < nl > - # Is TLS required < nl > - # tls : true < nl > - # } < nl > - } < nl > - < nl > - # Accessing Google Services < nl > - # Used for OAuth2 in gmail mailboxes < nl > - # and sending push notifications in Android & Chrome < nl > - # < nl > - # How to get OAuth2 : < nl > - # * Open https : / / console . developers . google . com / < nl > - # * Go To Api & Auth , then to Credentials < nl > - # * Press " Client Id " and create id for Web Application < nl > - # * In created Client Id there are values " Client Id " and " Client Secret " < nl > - # for web OAuth configuration < nl > - # * Same steps for Android & iOS applications < nl > - # < nl > - # How to get Push keys < nl > - # * Open https : / / console . developers . google . com / < nl > - # * Go To Api & Auth , then to Credentials < nl > - # * Press " Create new key " for Android Application < nl > - # * Allow any IP < nl > - # * Get API key from created " Key for Android Application " < nl > - # * Project Id can be found on Overview page < nl > - google { < nl > - < nl > - # Uncomment if you want to perform OAuth authentication < nl > - # for GMail accounts < nl > - # oauth { < nl > - # auth - uri : " https : / / accounts . google . com / o / oauth2 / auth " < nl > - # token - uri : " https : / / accounts . google . com / o / oauth2 / token " < nl > - # profile - uri : " https : / / www . googleapis . com / oauth2 / v2 / userinfo " < nl > - # client - id : < put _ your _ client _ id _ here > < nl > - # client - secret : < put _ your _ client _ secret _ here > < nl > - # scope : " https : / / www . googleapis . com / auth / userinfo . email https : / / www . googleapis . com / auth / userinfo . profile https : / / www . google . com / m8 / feeds / " < nl > - # } < nl > - < nl > - # Android & Chrome push notifications < nl > - # push { < nl > - # # Keys for push notifications in format < nl > - # keys = [ < nl > - # { < nl > - # project - id : < put _ your _ project _ id _ here > < nl > - # key : < put _ your _ key _ here > < nl > - # } < nl > - # ] < nl > - # } < nl > - } < nl > - < nl > - # Accessing Apple servers for push notifications < nl > - apple { < nl > - < nl > - # Safari & iOS notifications < nl > - # push { < nl > - # Mobile push certificates < nl > - # certs = [ < nl > - # { < nl > - # key : < put _ your _ certificate _ id _ here > < nl > - # path : < put _ your _ certificate _ path _ here > < nl > - # password : < put _ your _ certificate _ password _ here > < nl > - # sandbox : yes / no < nl > - # } < nl > - # ] < nl > - # } < nl > - } < nl > - } < nl > diff - - git a / actor - server / src / universal / conf / server . conf . example - minimal b / actor - server / src / universal / conf / server . conf . example - minimal < nl > deleted file mode 100644 < nl > index 575c672 . . 0000000 < nl > - - - a / actor - server / src / universal / conf / server . conf . example - minimal < nl > + + + / dev / null < nl > @ @ - 1 , 21 + 0 , 0 @ @ < nl > - services { < nl > - postgresql { < nl > - host : " localhost " < nl > - < nl > - db : actor < nl > - < nl > - user : actor < nl > - < nl > - password : < password > < nl > - } < nl > - < nl > - actor - activation { < nl > - auth - token : < token > < nl > - } < nl > - } < nl > - < nl > - secret : < put a long random string here > < nl > - project - name : < your application name > < nl > - public - endpoints : [ < nl > - < list of endpoints accessible by client applications > < nl > - ] < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - activation / src / main / resources / reference . conf b / actor - server / actor - activation / src / main / resources / reference . conf < nl > index 46d4164 . . 5eb0e53 100644 < nl > - - - a / actor - server / actor - activation / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - activation / src / main / resources / reference . conf < nl > @ @ - 1 , 15 + 1 , 15 @ @ < nl > services { < nl > < nl > activation { < nl > - default - service : internal < nl > + default - service : actor - activation < nl > repeat - limit : 1m < nl > code - expiration : 1 day < nl > code - attempts : 3 < nl > } < nl > < nl > - activation - gate { < nl > + actor - activation { < nl > uri : " https : / / gate . actor . im " < nl > - auth - token : " 2173fc216dc95641g3137825g59d5gg228237 " < nl > + auth - token : $ { ? ACTIVATION _ GW _ TOKEN } < nl > } < nl > < nl > telesign { < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala < nl > index 07fd304 . . 670ec0a 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala < nl > @ @ - 16 , 6 + 16 , 10 @ @ object GateConfig { < nl > } yield GateConfig ( uri , authToken ) < nl > < nl > def load : Try [ GateConfig ] = { < nl > - load ( ActorConfig . load ( ) . getConfig ( " services . activation - gate " ) ) < nl > + for { < nl > + config ← Try ( ActorConfig . load ( ) . getConfig ( " services . actor - activation " ) ) < nl > + . orElse ( Try ( ActorConfig . load ( ) . getConfig ( " services . activation - gate " ) ) ) < nl > + gateConfig ← load ( config ) < nl > + } yield gateConfig < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - http - api / src / main / resources / reference . conf b / actor - server / actor - http - api / src / main / resources / reference . conf < nl > index 9f564d6 . . 33bccdf 100644 < nl > - - - a / actor - server / actor - http - api / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - http - api / src / main / resources / reference . conf < nl > @ @ - 1 , 4 + 1 , 4 @ @ < nl > - webapp { < nl > + http { < nl > interface = " 0 . 0 . 0 . 0 " < nl > port = 9090 < nl > host = " localhost " < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > index a50007f . . af8529f 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > @ @ - 39 , 7 + 39 , 7 @ @ object HttpApiFrontend { < nl > system : ActorSystem , < nl > materializer : Materializer < nl > ) : Unit = { < nl > - HttpApiConfig . load ( serverConfig . getConfig ( " webapp " ) ) match { < nl > + HttpApiConfig . load ( serverConfig . getConfig ( " http " ) ) match { < nl > case Success ( apiConfig ) ⇒ < nl > val tlsContext = TlsContext . load ( serverConfig . getConfig ( " tls . keystores " ) ) . right . toOption < nl > start ( apiConfig , customRoutes , tlsContext ) < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala < nl > index 3d9ba20 . . 38d2dd2 100644 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala < nl > @ @ - 81 , 8 + 81 , 8 @ @ object ActorConfig { < nl > < nl > def baseUrl ( implicit system : ActorSystem ) = { < nl > val config = system . settings . config < nl > - val scheme = config . getString ( " webapp . scheme " ) < nl > - val host = config . getString ( " webapp . host " ) < nl > + val scheme = config . getString ( " http . scheme " ) < nl > + val host = config . getString ( " http . host " ) < nl > s " $ scheme : / / $ host " < nl > } < nl > } < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > index 2c5a220 . . 773ee9d 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > @ @ - 94 , 7 + 94 , 7 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > val emailConfig = EmailConfig . fromConfig ( serverConfig . getConfig ( " services . email " ) ) . toOption . get < nl > val gateConfig = GateConfig . load . get < nl > val groupInviteConfig = GroupInviteConfig . load ( serverConfig . getConfig ( " modules . messaging . groups . invite " ) ) < nl > - val webappConfig = HttpApiConfig . load ( serverConfig . getConfig ( " webapp " ) ) . toOption . get < nl > + val webappConfig = HttpApiConfig . load ( serverConfig . getConfig ( " http " ) ) . toOption . get < nl > val oauth2GoogleConfig = OAuth2GoogleConfig . load ( serverConfig . getConfig ( " services . google . oauth " ) ) < nl > val richMessageConfig = RichMessageConfig . load ( serverConfig . getConfig ( " modules . enricher " ) ) . get < nl > val sequenceConfig = SequenceServiceConfig . load ( ) . get < nl > diff - - git a / actor - server / src / docker / opt / docker / conf / server . conf b / actor - server / src / docker / opt / docker / conf / server . conf < nl > index 58c0b0c . . 51e3e5e 100644 < nl > - - - a / actor - server / src / docker / opt / docker / conf / server . conf < nl > + + + b / actor - server / src / docker / opt / docker / conf / server . conf < nl > @ @ - 19 , 7 + 19 , 7 @ @ services { < nl > default - service : actor - activation < nl > } < nl > < nl > - activation - gate { < nl > + actor - activation { < nl > uri : " https : / / activation - gw . actor . im " < nl > auth - token : " FPEinjrmxsq1ZDyu1bc7 " < nl > auth - token : $ { ? ACTIVATION _ GW _ TOKEN } < nl > diff - - git a / actor - server / src / main / resources / application . conf . example b / actor - server / src / main / resources / application . conf . example < nl > deleted file mode 100644 < nl > index 068669d . . 0000000 < nl > - - - a / actor - server / src / main / resources / application . conf . example < nl > + + + / dev / null < nl > @ @ - 1 , 326 + 0 , 0 @ @ < nl > - # Example configuration for Actor Platform < nl > - # This file uses HOCON syntax ( https : / / github . com / typesafehub / config / blob / master / HOCON . md ) < nl > - # To start server you need : < nl > - # * Configure PostgreSQL service < nl > - # * Configure one of supported SMS gateway service ( TeleSign , Clickatell , Twilio ) < nl > - # or < nl > - # Configure email service < nl > - < nl > - # Configuration of storage engines for server < nl > - # Comminity distribution can store all required data < nl > - # in PostgreSQL and store files at Amazon S3 . < nl > - # In enterprise versions you can configure < nl > - # other storage engines < nl > - storage { < nl > - # Can be only postgresql in Community distribution < nl > - database : " postgresql " < nl > - # Can be only s3 in Community distribution < nl > - files : " s3 " < nl > - } < nl > - < nl > - # We strictly recommend to use TLS < nl > - # Most of modern browsers are not working with websockets over < nl > - # non - encrypted connection < nl > - tls { < nl > - < nl > - # Ceritifcate keystore in Java Keystore format < nl > - # with single key with alias password with password < nl > - # equals to keystore password < nl > - # < nl > - # Written in format : < nl > - # name { Unique name for certificate < nl > - # path : Path to keystore < nl > - # password : Password to keystore < nl > - # } < nl > - keystores { < nl > - < write _ keystore _ name _ here > { < nl > - path : < write _ keystore _ path _ here > < nl > - password : < write _ keystore _ password _ here > < nl > - } < nl > - } < nl > - } < nl > - < nl > - # Web App settings < nl > - # { < nl > - # host : Listening host < nl > - # post : Listening port < nl > - # domain : Domain < nl > - # keystore : [ Optional ] Keystore < nl > - # } < nl > - webapp { < nl > - interface : " 0 . 0 . 0 . 0 " < nl > - port : 9090 < nl > - host : " localhost " < nl > - } < nl > - < nl > - # Endpoints for Mobile / Web API < nl > - # It is strictly recommended to use 443 port < nl > - # for all connections . There are a lot of problems < nl > - # on any other ports . < nl > - # < nl > - # Array of elements in format : < nl > - # { < nl > - # type : " tcp " or " websocket " < nl > - # host : Listening host < nl > - # post : Listening port < nl > - # keystore : [ Optional ] Keystore < nl > - # } < nl > - endpoints : [ < nl > - { < nl > - type : tcp < nl > - interface : " 0 . 0 . 0 . 0 " < nl > - port : 9070 < nl > - } , < nl > - { < nl > - type : websocket < nl > - interface : " 0 . 0 . 0 . 0 " < nl > - port : 9080 < nl > - } < nl > - ] < nl > - < nl > - # Enabled mobules for server < nl > - # Default distribution has two modules : auth and enricher . < nl > - # * auth : enables authentication support < nl > - # * enricher : enables encriching of messages < nl > - # for example , downloading previews of images by URL , or < nl > - # loading gif images from Gliphy < nl > - modules { < nl > - < nl > - # Configuration for messaging module < nl > - # messaging { < nl > - # Configure url for group invites here < nl > - # groups { < nl > - # invite { < nl > - # base - uri : < write _ base _ uri _ here > < nl > - # } < nl > - # } < nl > - # } < nl > - < nl > - # Configuration for authentication . < nl > - # Default distribution can authenticate with one - time < nl > - # code or oauth2 . < nl > - # < nl > - # If you comment this module authentication will be disabled . < nl > - # Useful for some security - related cases . < nl > - auth { < nl > - # You can enable or disable types of authentication by < nl > - # adding or removing from types variable . < nl > - # Supported types : < nl > - # * sms : one - time password by SMS , < nl > - # * email : one - time password by email < nl > - # * oauth2 : OAuth2 authentication for some mail domains < nl > - < nl > - types : [ sms , email , oauth2 ] < nl > - < nl > - # Uncomment if you want to tweak sms authentication parameters < nl > - # sms { < nl > - # Uncomment to change SMS send repeat limit on double sms request < nl > - # repeat - limit = 1m < nl > - # Uncomment to force some specific gateway for sending sms < nl > - # primary - gateway = telesign < nl > - # } < nl > - } < nl > - < nl > - # Message enricher < nl > - # Comment this module if you don ' t want to use message < nl > - # enriching feature < nl > - enricher { < nl > - < nl > - # Uncomment to customize max image preview size < nl > - # max - preview - size = 2 M < nl > - < nl > - # Uncomment for disabling gliphy integration < nl > - # NOTE : If glyphy integration is not set this feature < nl > - # will be automatically disabled < nl > - # glyphy - enabled = false < nl > - } < nl > - } < nl > - < nl > - # Services that are used by the server . < nl > - # Default distribution support services : < nl > - # * [ REQUIRED ] postgresql : PostgreSQL database < nl > - # * email : Email integration < nl > - # * aws : Amazon Web Services integration < nl > - # * google : Accessing Google services < nl > - # * apple : Accessing Apple services < nl > - # * gliphy : Giphy . com integration ( for Message Enricher ) < nl > - # * telesign : Telesign SMS gateway < nl > - # * twilio : Twilio SMS gateway < nl > - # * clickatel : Clickatel SMS gateway < nl > - < nl > - services { < nl > - < nl > - # PostgreSQL storage for data < nl > - # The only required service to start server < nl > - postgresql { < nl > - < nl > - # Host of PostgreSQL instance < nl > - host : < write _ psql _ server _ host _ here > < nl > - # Port of PostgreSQL instance < nl > - port : 5432 < nl > - # Database name < nl > - db : actor < nl > - # User name in PostgreSQL < nl > - user : < write _ psql _ user _ here > < nl > - # Password in PostgreSQL < nl > - password : < write _ psql _ password _ here > < nl > - } < nl > - < nl > - # AWS configuration < nl > - # It is strictly recommended to configure s3 storage for < nl > - # enabling file sharing in apps < nl > - aws { < nl > - < nl > - # S3 Storage , used for file sharing < nl > - s3 { < nl > - < nl > - # S3 Api Key < nl > - access - key : " YOUR AWS KEY ID " < nl > - # S3 Api Secret < nl > - secret - key : " YOUR AWS SECRET KEY " < nl > - < nl > - # File bucket < nl > - default - bucket : " bucket for storing files " < nl > - } < nl > - } < nl > - < nl > - # Service used for sending activation codes < nl > - activation { < nl > - # Define witch activation service to use : internal / actor - activation < nl > - # default - service : internal < nl > - # Allow client to repeat code sending after this interval < nl > - repeat - limit : 1m < nl > - # Time and attempt to expire sms / email activation code < nl > - # code - expiration : 1 day < nl > - # code - attempts : 3 < nl > - } < nl > - < nl > - activation - gate { < nl > - uri : " https : / / gate . actor . im " < nl > - auth - token : " 2173fc216dc95641g3137825g59d5gg228237 " < nl > - } < nl > - < nl > - # Email configuration < nl > - email { < nl > - < nl > - # Sender information for outgoing emails < nl > - sender { < nl > - # Sender Email address < nl > - address : < write _ sender _ address _ here > < nl > - # Sender Name < nl > - name : < write _ sender _ full _ name _ here > < nl > - # Mail theme prefix < nl > - prefix : < write _ mail _ theme _ prefix _ here > < nl > - } < nl > - < nl > - # SMTP server configuration < nl > - smtp { < nl > - < nl > - # SMTP server host < nl > - host : < write _ smtp _ server _ host _ here > < nl > - # SMTP server port < nl > - port : < write _ smtp _ server _ port _ here > < nl > - # SMTP server username < nl > - username : < write _ smtp _ server _ username _ here > < nl > - # SMTP server password < nl > - password : < write _ smtp _ server _ password _ here > < nl > - < nl > - # Is TLS required < nl > - tls : true < nl > - } < nl > - } < nl > - < nl > - # Telesign SMS gate ( best gate for authentication ) < nl > - # To get tokens ask at telesign web site : https : / / www . telesign . com < nl > - telesign { < nl > - customer - id : < write _ your _ customer _ id _ here > < nl > - api - key : < write _ your _ api _ key _ here > < nl > - } < nl > - < nl > - # Twilio SMS gate ( fast , but sometimes unstable ) < nl > - # To get tokens signup at Twilio web site : https : / / www . twilio . com < nl > - # twilio { < nl > - # account : < nl > - # token : < nl > - # } < nl > - < nl > - # Clickatell SMS ( slowest gate , but more stable than Twilio ) < nl > - # To get tokens signup at Clickatel web site : https : / / www . clickatell . com / < nl > - # clickatell { < nl > - # user : < nl > - # password : < nl > - # app _ id : < nl > - # } < nl > - < nl > - # Accessing Google Services < nl > - # Used for OAuth2 in gmail mailboxes < nl > - # and sending push notifications in Android & Chrome < nl > - # < nl > - # How to get OAuth2 : < nl > - # * Open https : / / console . developers . google . com / < nl > - # * Go To Api & Auth , then to Credentials < nl > - # * Press " Client Id " and create id for Web Application < nl > - # * In created Client Id there are values " Client Id " and " Client Secret " < nl > - # for web OAuth configuration < nl > - # * Same steps for Android & iOS applications < nl > - # < nl > - # How to get Push keys < nl > - # * Open https : / / console . developers . google . com / < nl > - # * Go To Api & Auth , then to Credentials < nl > - # * Press " Create new key " for Android Application < nl > - # * Allow any IP < nl > - # * Get API key from created " Key for Android Application " < nl > - # * Project Id can be found on Overview page < nl > - google { < nl > - < nl > - # Uncomment if you want to perform OAuth authentication < nl > - # for GMail accounts < nl > - # oauth { < nl > - # auth - uri : " https : / / accounts . google . com / o / oauth2 / auth " < nl > - # token - uri : " https : / / accounts . google . com / o / oauth2 / token " < nl > - # profile - uri : " https : / / www . googleapis . com / oauth2 / v2 / userinfo " < nl > - # client - id : < write _ your _ client _ id _ here > < nl > - # client - secret : < write _ your _ client _ secret _ here > < nl > - # scope : " https : / / www . googleapis . com / auth / userinfo . email https : / / www . googleapis . com / auth / userinfo . profile https : / / www . google . com / m8 / feeds / " < nl > - # } < nl > - < nl > - # Android & Chrome push notifications < nl > - # push { < nl > - # # Keys for push notifications in format : < nl > - # # { < nl > - # # projectId : Key project ID ( see comments above ) < nl > - # # key : Secret Key ( see comments above ) < nl > - # # } < nl > - # keys = [ < nl > - # { < nl > - # project - id : < nl > - # key : < nl > - # } < nl > - # ] < nl > - # } < nl > - } < nl > - < nl > - # Accessing Apple servers for push notifications < nl > - apple { < nl > - < nl > - # Safari & iOS notifications < nl > - # push { < nl > - # # Mobile push certificates in format : < nl > - # # { < nl > - # # certId : Random Int unique value for certificate < nl > - # # path : Path to certificate file < nl > - # # password : Password to certificate < nl > - # # } < nl > - # mobile - certs = [ { < nl > - # certId : < write _ your _ certificate _ id _ here > < nl > - # path : < write _ your _ certificate _ path _ here > < nl > - # password : < write _ your _ certificate _ password _ here > < nl > - # } ] < nl > - # } < nl > - } < nl > - < nl > - # Accessing Gliphy for gif image downloading < nl > - # gliphy { < nl > - # api - token = < write _ your _ api _ token _ here > < nl > - # } < nl > - } < nl > diff - - git a / actor - server / src / main / resources / application . conf . example - minimal b / actor - server / src / main / resources / application . conf . example - minimal < nl > deleted file mode 100644 < nl > index 5164924 . . 0000000 < nl > - - - a / actor - server / src / main / resources / application . conf . example - minimal < nl > + + + / dev / null < nl > @ @ - 1 , 18 + 0 , 0 @ @ < nl > - services { < nl > - postgresql { < nl > - host : " localhost " < nl > - user : " postgres " < nl > - password : " " < nl > - db : " actor " < nl > - } < nl > - < nl > - aws { < nl > - s3 { < nl > - access - key : " YOUR AWS KEY ID " < nl > - secret - key : " YOUR AWS SECRET KEY " < nl > - default - bucket : " bucket for storing files " < nl > - } < nl > - } < nl > - } < nl > - < nl > - # secret : < your long secret here with special low and up case alphanumeric characters , in double quotes > < nl > diff - - git a / actor - server / src / universal / conf / server . conf . example b / actor - server / src / universal / conf / server . conf . example < nl > index baca203 . . 4f7f7f7 100644 < nl > - - - a / actor - server / src / universal / conf / server . conf . example < nl > + + + b / actor - server / src / universal / conf / server . conf . example < nl > @ @ - 1 , 36 + 1 , 219 @ @ < nl > - services { < nl > - postgresql { < nl > - host : " localhost " < nl > + # HTTP Server settings < nl > + # It serves static app ( optionally ) and provides integration API < nl > + # http { < nl > + # interface : " 0 . 0 . 0 . 0 " < nl > + # port : 9090 < nl > + # host : " localhost " < nl > + # } < nl > < nl > - db : < db > < nl > + # Endpoints for Mobile / Web API < nl > + # It is strictly recommended to use 443 port < nl > + # for all connections . There are a lot of problems < nl > + # on any other ports . < nl > + # < nl > + # Array of elements in format : < nl > + # { < nl > + # type : " tcp " or " websocket " < nl > + # host : Listening host < nl > + # post : Listening port < nl > + # keystore : [ Optional ] Keystore < nl > + # } < nl > + # endpoints : [ < nl > + # { < nl > + # type : tcp < nl > + # interface : " 0 . 0 . 0 . 0 " < nl > + # port : 9070 < nl > + # } , < nl > + # { < nl > + # type : websocket < nl > + # interface : " 0 . 0 . 0 . 0 " < nl > + # port : 9080 < nl > + # } < nl > + # ] < nl > < nl > - user : < user > < nl > + # Secret is used to work with various secrets like password , auth hashes , etc < nl > + # It have to be set once and never be changed in future < nl > + secret : < put a long random string here > < nl > < nl > - password : < password > < nl > - } < nl > + # Server modules < nl > + modules { < nl > < nl > - activation { < nl > - default - service : actor - activation < nl > - } < nl > + # Configuration for messaging module < nl > + # messaging { < nl > + # Configure url for group invites here < nl > + # groups { < nl > + # invite { < nl > + # base - uri : https : / / quit . email < nl > + # } < nl > + # } < nl > + # } < nl > + < nl > + # Message enricher < nl > + # Comment this module if you don ' t want to use message < nl > + # enriching feature < nl > + # enricher { < nl > + # Uncomment to customize max image preview size < nl > + # max - preview - size = 2 M < nl > + # } < nl > + } < nl > + < nl > + # Services that are used by the server . < nl > + # Default distribution support services : < nl > + # * [ REQUIRED ] postgresql : PostgreSQL database < nl > + # * email : Email integration < nl > + # * aws : Amazon Web Services integration < nl > + # * google : Accessing Google services < nl > + # * apple : Accessing Apple services < nl > + # * telesign : Telesign Activation gateway < nl > + # * actor - activation : Actor Activation gateway < nl > < nl > - activation - gate { < nl > - uri : " https : / / activation - gw . actor . im " < nl > - auth - token : < token > < nl > + services { < nl > + < nl > + # PostgreSQL storage for data < nl > + # The only required service to start server < nl > + # For more information see https : / / github . com / actorapp / actor - bootstrap / blob / master / docs / server / Database . md < nl > + postgresql { < nl > + # Host of PostgreSQL instance < nl > + host : < put _ psql _ server _ host _ here > < nl > + # Port of PostgreSQL instance < nl > + port : 5432 < nl > + # Database name < nl > + db : actor < nl > + # User name in PostgreSQL < nl > + user : < put _ psql _ user _ here > < nl > + # Password in PostgreSQL < nl > + password : < put _ psql _ password _ here > < nl > } < nl > < nl > + # AWS configuration < nl > + # It is strictly recommended to configure s3 storage for < nl > + # enabling file sharing in apps < nl > aws { < nl > + # S3 Storage , used for file sharing < nl > + # For more information see https : / / github . com / actorapp / actor - bootstrap / blob / master / docs / server / AWS . md < nl > s3 { < nl > # S3 Api Key < nl > - access - key : < YOUR AWS KEY ID > < nl > - < nl > + access - key : < put _ your _ aws _ key _ here > < nl > # S3 Api Secret < nl > - secret - key : < YOUR AWS SECRET KEY > < nl > - < nl > + secret - key : < put _ your _ aws _ secret _ here > < nl > # File bucket < nl > - default - bucket : < bucket for storing files > < nl > + default - bucket : < put _ your _ bucket _ here > < nl > } < nl > } < nl > - } < nl > < nl > - secret : < put a long random string here > < nl > + # Service used for sending activation codes < nl > + activation { < nl > + # Define witch activation service to use : internal / actor - activation < nl > + # default - service : actor - activation < nl > + # Allow client to repeat code sending after this interval < nl > + # repeat - limit : 1m < nl > + # Time and attempt to expire sms / email activation code < nl > + # code - expiration : 1 day < nl > + # code - attempts : 3 < nl > + } < nl > < nl > + # Service used for sending auth codes < nl > + # Write to @ gatekeeper in Actor Cloud to get your token < nl > + actor - activation { < nl > + # uri : " https : / / gate . actor . im " < nl > + auth - token : < put token here > < nl > + } < nl > + < nl > + # Telesign SMS gate ( best gate for authentication ) < nl > + # To get tokens ask at telesign web site : https : / / www . telesign . com < nl > + # telesign { < nl > + # customer - id : < put _ your _ customer _ id _ here > < nl > + # api - key : < put _ your _ api _ key _ here > < nl > + # } < nl > + < nl > + # Email configuration < nl > + email { < nl > + < nl > + # Sender information for outgoing emails < nl > + # sender { < nl > + # Sender Email address < nl > + # address : < put _ sender _ address _ here > < nl > + # Sender Name < nl > + # name : < put _ sender _ full _ name _ here > < nl > + # Mail theme prefix < nl > + # prefix : < put _ mail _ theme _ prefix _ here > < nl > + # } < nl > + < nl > + # SMTP server configuration < nl > + # smtp { < nl > + < nl > + # SMTP server host < nl > + # host : < put _ smtp _ server _ host _ here > < nl > + # SMTP server port < nl > + # port : < put _ smtp _ server _ port _ here > < nl > + # SMTP server username < nl > + # username : < put _ smtp _ server _ username _ here > < nl > + # SMTP server password < nl > + # password : < put _ smtp _ server _ password _ here > < nl > + < nl > + # Is TLS required < nl > + # tls : true < nl > + # } < nl > + } < nl > + < nl > + # Accessing Google Services < nl > + # Used for OAuth2 in gmail mailboxes < nl > + # and sending push notifications in Android & Chrome < nl > + # < nl > + # How to get OAuth2 : < nl > + # * Open https : / / console . developers . google . com / < nl > + # * Go To Api & Auth , then to Credentials < nl > + # * Press " Client Id " and create id for Web Application < nl > + # * In created Client Id there are values " Client Id " and " Client Secret " < nl > + # for web OAuth configuration < nl > + # * Same steps for Android & iOS applications < nl > + # < nl > + # How to get Push keys < nl > + # * Open https : / / console . developers . google . com / < nl > + # * Go To Api & Auth , then to Credentials < nl > + # * Press " Create new key " for Android Application < nl > + # * Allow any IP < nl > + # * Get API key from created " Key for Android Application " < nl > + # * Project Id can be found on Overview page < nl > + google { < nl > + < nl > + # Uncomment if you want to perform OAuth authentication < nl > + # for GMail accounts < nl > + # oauth { < nl > + # auth - uri : " https : / / accounts . google . com / o / oauth2 / auth " < nl > + # token - uri : " https : / / accounts . google . com / o / oauth2 / token " < nl > + # profile - uri : " https : / / www . googleapis . com / oauth2 / v2 / userinfo " < nl > + # client - id : < put _ your _ client _ id _ here > < nl > + # client - secret : < put _ your _ client _ secret _ here > < nl > + # scope : " https : / / www . googleapis . com / auth / userinfo . email https : / / www . googleapis . com / auth / userinfo . profile https : / / www . google . com / m8 / feeds / " < nl > + # } < nl > + < nl > + # Android & Chrome push notifications < nl > + # push { < nl > + # # Keys for push notifications in format < nl > + # keys = [ < nl > + # { < nl > + # project - id : < put _ your _ project _ id _ here > < nl > + # key : < put _ your _ key _ here > < nl > + # } < nl > + # ] < nl > + # } < nl > + } < nl > + < nl > + # Accessing Apple servers for push notifications < nl > + apple { < nl > + < nl > + # Safari & iOS notifications < nl > + # push { < nl > + # Mobile push certificates < nl > + # certs = [ < nl > + # { < nl > + # key : < put _ your _ certificate _ id _ here > < nl > + # path : < put _ your _ certificate _ path _ here > < nl > + # password : < put _ your _ certificate _ password _ here > < nl > + # sandbox : yes / no < nl > + # } < nl > + # ] < nl > + # } < nl > + } < nl > + } < nl > diff - - git a / actor - server / src / universal / conf / server . conf . example - minimal b / actor - server / src / universal / conf / server . conf . example - minimal < nl > new file mode 100644 < nl > index 0000000 . . 9f37696 < nl > - - - / dev / null < nl > + + + b / actor - server / src / universal / conf / server . conf . example - minimal < nl > @ @ - 0 , 0 + 1 , 36 @ @ < nl > + services { < nl > + postgresql { < nl > + host : " localhost " < nl > + < nl > + db : < db > < nl > + < nl > + user : < user > < nl > + < nl > + password : < password > < nl > + } < nl > + < nl > + activation { < nl > + default - service : actor - activation < nl > + } < nl > + < nl > + actor - activation { < nl > + uri : " https : / / activation - gw . actor . im " < nl > + auth - token : < token > < nl > + } < nl > + < nl > + aws { < nl > + s3 { < nl > + # S3 Api Key < nl > + access - key : < YOUR AWS KEY ID > < nl > + < nl > + # S3 Api Secret < nl > + secret - key : < YOUR AWS SECRET KEY > < nl > + < nl > + # File bucket < nl > + default - bucket : < bucket for storing files > < nl > + } < nl > + } < nl > + } < nl > + < nl > + secret : < put a long random string here > < nl > +

TEST DIFF:
diff - - git a / actor - server / Dockerfile b / actor - server / Dockerfile 
 new file mode 100644 
 index 0000000 . . 4025021 
 - - - / dev / null 
 + + + b / actor - server / Dockerfile 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + FROM openjdk : 8u92 - jre - alpine 
 + MAINTAINER Actor LLC < oss @ actor . im > 
 + RUN apk - - update add bash openssl apr 
 + ADD target / docker / stage / var / var 
 + ENTRYPOINT bin / actor 
 + WORKDIR / var / lib / actor 
 + EXPOSE 9070 9080 9090 
 diff - - git a / actor - server / build . sbt b / actor - server / build . sbt 
 index 0f290c6 . . 8f24fd2 100644 
 - - - a / actor - server / build . sbt 
 + + + b / actor - server / build . sbt 
 @ @ - 2 , 3 + 2 , 5 @ @ addCommandAlias ( " debianPackage " , " debian : packageBin " ) 
 addCommandAlias ( " debianPackageSystemd " , 
 " ; set serverLoading in Debian : = com . typesafe . sbt . packager . archetypes . ServerLoader . Systemd ; debian : packageBin " 
 ) 
 + 
 + defaultLinuxInstallLocation in Docker : = " / var / lib / actor " 
 diff - - git a / actor - server / docker . sh b / actor - server / docker . sh 
 new file mode 100755 
 index 0000000 . . 11c3eef 
 - - - / dev / null 
 + + + b / actor - server / docker . sh 
 @ @ - 0 , 0 + 1 , 3 @ @ 
 + # ! / bin / bash 
 + 
 + sbt docker : stage & & docker build - - no - cache = true - f Dockerfile - t actor - server . 
 diff - - git a / actor - server / src / docker / opt / docker / conf / logback . xml b / actor - server / src / docker / opt / docker / conf / logback . xml 
 deleted file mode 100644 
 index 762dabf . . 0000000 
 - - - a / actor - server / src / docker / opt / docker / conf / logback . xml 
 + + + / dev / null 
 @ @ - 1 , 28 + 0 , 0 @ @ 
 - < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 - < configuration scan = " true " scanPeriod = " 20 seconds " > 
 - < logger name = " slick . compiler " level = " WARN " / > 
 - < logger name = " slick . ast " level = " WARN " / > 
 - < logger name = " akka . stream . impl " level = " WARN " / > 
 - < logger name = " org . apache . zookeeper . ClientCnxn " level = " WARN " / > 
 - < logger name = " slick . relational . ResultConverterCompiler " level = " WARN " / > 
 - < logger name = " slick . jdbc . StatementInvoker . result " level = " WARN " / > 
 - < logger name = " slick . jdbc . JdbcBackend . statement " level = " WARN " / > 
 - < logger name = " slick . backend . DatabaseComponent . action " level = " WARN " / > 
 - < logger name = " slick . jdbc . JdbcBackend . benchmark " level = " WARN " / > 
 - < logger name = " im . actor . server . session . ReSender " level = " WARN " / > 
 - < logger name = " im . actor . server . session . SessionMessagePublisher " level = " WARN " / > 
 - < logger name = " im . actor . server . peermanagers . GroupPeerManager " level = " INFO " / > 
 - 
 - < appender name = " STDOUT " class = " ch . qos . logback . core . ConsoleAppender " > 
 - < withJansi > true < / withJansi > 
 - < encoder > 
 - < charset > UTF - 8 < / charset > 
 - < pattern > % X { akkaTimestamp } % highlight ( % - 5level ) % cyan ( % logger { 36 } ) % magenta ( % X { akkaSource } ) % X { authId } % X { sessionId } % msg % n 
 - < / pattern > 
 - < / encoder > 
 - < / appender > 
 - 
 - < root level = " INFO " > 
 - < appender - ref ref = " STDOUT " / > 
 - < / root > 
 - < / configuration > 
 diff - - git a / actor - server / src / docker / opt / docker / conf / server . conf b / actor - server / src / docker / opt / docker / conf / server . conf 
 deleted file mode 100644 
 index 0a45894 . . 0000000 
 - - - a / actor - server / src / docker / opt / docker / conf / server . conf 
 + + + / dev / null 
 @ @ - 1 , 52 + 0 , 0 @ @ 
 - / / We need it in application . conf because reference . conf can ' t refer to application . conf , this is a work - around 
 - 
 - modules { 
 - files { 
 - adapter : " im . actor . server . file . local . LocalFileStorageAdapter " 
 - } 
 - } 
 - 
 - services { 
 - postgresql { 
 - host : " postgres " 
 - host : $ { ? DB _ HOST } 
 - 
 - db : postgres 
 - db : $ { ? DB _ NAME } 
 - 
 - user : " postgres " 
 - user : $ { ? DB _ USER } 
 - 
 - password : " " 
 - password : $ { ? DB _ PASSWORD } 
 - } 
 - 
 - actor - activation { 
 - uri : " https : / / activation - gw . actor . im " 
 - auth - token : " FPEinjrmxsq1ZDyu1bc7 " 
 - auth - token : $ { ? ACTIVATION _ GW _ TOKEN } 
 - } 
 - 
 - file - storage { 
 - location : " / var / lib / actor / files " 
 - location : $ { ? FILESTORAGE _ LOCATION } 
 - } 
 - } 
 - 
 - http { 
 - static - files - directory : " / opt / docker / files " 
 - } 
 - 
 - secret : $ { ? SECRET } 
 - 
 - akka { 
 - log - config - on - start : true 
 - 
 - cluster { 
 - seed - nodes = [ " akka . tcp : / / actor - server @ 127 . 0 . 0 . 1 : 2552 " ] 
 - } 
 - 
 - remote { 
 - netty . tcp . hostname = " 127 . 0 . 0 . 1 " 
 - } 
 - } 
 diff - - git a / actor - server / src / docker / var / lib / actor / conf / logback . xml b / actor - server / src / docker / var / lib / actor / conf / logback . xml 
 new file mode 100644 
 index 0000000 . . a97393d 
 - - - / dev / null 
 + + + b / actor - server / src / docker / var / lib / actor / conf / logback . xml 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 + < configuration scan = " true " scanPeriod = " 20 seconds " > 
 + < logger name = " slick . compiler " level = " WARN " / > 
 + < logger name = " slick . ast " level = " WARN " / > 
 + < logger name = " akka . stream . impl " level = " WARN " / > 
 + < logger name = " slick . relational . ResultConverterCompiler " level = " WARN " / > 
 + < logger name = " slick . jdbc . StatementInvoker . result " level = " WARN " / > 
 + < logger name = " slick . jdbc . JdbcBackend . statement " level = " WARN " / > 
 + < logger name = " slick . backend . DatabaseComponent . action " level = " WARN " / > 
 + < logger name = " slick . jdbc . JdbcBackend . benchmark " level = " WARN " / > 
 + < logger name = " im . actor . server . session . ReSender " level = " WARN " / > 
 + < logger name = " im . actor . server . session . SessionMessagePublisher " level = " WARN " / > 
 + 
 + < appender name = " STDOUT " class = " ch . qos . logback . core . ConsoleAppender " > 
 + < withJansi > true < / withJansi > 
 + < encoder > 
 + < charset > UTF - 8 < / charset > 
 + < pattern > % X { akkaTimestamp } % highlight ( % - 5level ) % cyan ( % logger { 36 } ) % magenta ( % X { akkaSource } ) % X { authId } % X { sessionId } % msg % n 
 + < / pattern > 
 + < / encoder > 
 + < / appender > 
 + 
 + < root level = " DEBUG " > 
 + < appender - ref ref = " STDOUT " / > 
 + < / root > 
 + < / configuration > 
 diff - - git a / actor - server / src / docker / var / lib / actor / conf / server . conf b / actor - server / src / docker / var / lib / actor / conf / server . conf 
 new file mode 100644 
 index 0000000 . . cf9156a 
 - - - / dev / null 
 + + + b / actor - server / src / docker / var / lib / actor / conf / server . conf 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + / / We need it in application . conf because reference . conf can ' t refer to application . conf , this is a work - around 
 + 
 + modules { 
 + files { 
 + adapter : " im . actor . server . file . local . LocalFileStorageAdapter " 
 + } 
 + } 
 + 
 + services { 
 + postgresql { 
 + host : " postgres " 
 + host : $ { ? ACTOR _ DB _ HOST } 
 + 
 + db : postgres 
 + db : $ { ? ACTOR _ DB _ NAME } 
 + 
 + user : " postgres " 
 + user : $ { ? ACTOR _ DB _ USER } 
 + 
 + password : " " 
 + password : $ { ? ACTOR _ DB _ PASSWORD } 
 + } 
 + 
 + actor - activation { 
 + uri : " https : / / gate . actor . im " 
 + auth - token : $ { ? ACTOR _ GATE _ TOKEN } 
 + } 
 + 
 + file - storage { 
 + location : " / var / lib / actor / files " 
 + location : $ { ? ACTOR _ FILESTORAGE _ LOCATION } 
 + } 
 + } 
 + 
 + secret : $ { ? ACTOR _ SECRET } 
 + 
 + akka { 
 + log - config - on - start : true 
 + loggers : [ " akka . event . slf4j . Slf4jLogger " ] 
 + loglevel : " DEBUG " 
 + 
 + cluster { 
 + seed - nodes = [ " akka . tcp : / / actor - server @ 127 . 0 . 0 . 1 : 2552 " ] 
 + } 
 + 
 + remote { 
 + netty . tcp . hostname = " 127 . 0 . 0 . 1 " 
 + } 
 + } 
 + 
 diff - - git a / actor - server / src / docker / var / lib / actor / files / init b / actor - server / src / docker / var / lib / actor / files / init 
 deleted file mode 100644 
 index e69de29 . . 0000000 
 diff - - git a / actor - server / src / linux / usr / share / actor / conf / server . conf . example b / actor - server / src / linux / usr / share / actor / conf / server . conf . example 
 new file mode 100644 
 index 0000000 . . a4b7e43 
 - - - / dev / null 
 + + + b / actor - server / src / linux / usr / share / actor / conf / server . conf . example 
 @ @ - 0 , 0 + 1 , 250 @ @ 
 + # HTTP Server settings 
 + # It serves static app ( optionally ) and provides integration API 
 + # http { 
 + # interface : " 0 . 0 . 0 . 0 " 
 + # port : 9090 
 + # base - uri : " https : / / api . actor . im " 
 + # } 
 + 
 + # URIs of endpoints , accessible by client applications 
 + # public - endpoints : [ 
 + # " wss : / / front1 - ws - mtproto - api - rev2 . actor . im " , 
 + # " tls : / / front1 - mtproto - api - rev2 . actor . im " , 
 + # " tcp : / / front3 - mtproto - api - rev3 . actor . im : 443 " 
 + # ] 
 + # Endpoints for Mobile / Web API 
 + # It is strictly recommended to use 443 port 
 + # for all connections . There are a lot of problems 
 + # on any other ports . 
 + # 
 + # Array of elements in format : 
 + # { 
 + # type : " tcp " or " websocket " 
 + # host : Listening host 
 + # post : Listening port 
 + # keystore : [ Optional ] Keystore 
 + # } 
 + # endpoints : [ 
 + # { 
 + # type : tcp 
 + # interface : " 0 . 0 . 0 . 0 " 
 + # port : 9070 
 + # } , 
 + # { 
 + # type : websocket 
 + # interface : " 0 . 0 . 0 . 0 " 
 + # port : 9080 
 + # } 
 + # ] 
 + 
 + # Name of your application . 
 + project - name : < your application name > 
 + 
 + # Secret is used to work with various secrets like password , auth hashes , etc 
 + # It have to be set once and never be changed in future 
 + secret : < put a long random string here > 
 + 
 + # Server modules 
 + modules { 
 + 
 + # Configuration for messaging module 
 + # messaging { 
 + # Configure url for group invites here 
 + # groups { 
 + # invite { 
 + # base - uri : https : / / quit . email 
 + # } 
 + # } 
 + # } 
 + 
 + # Message enricher 
 + # Comment this module if you don ' t want to use message 
 + # enriching feature 
 + # enricher { 
 + # Uncomment to customize max image preview size 
 + # max - preview - size = 2 M 
 + # } 
 + } 
 + 
 + # Services that are used by the server . 
 + # Default distribution support services : 
 + # * [ REQUIRED ] postgresql : PostgreSQL database 
 + # * email : Email integration 
 + # * aws : Amazon Web Services integration 
 + # * google : Accessing Google services 
 + # * apple : Accessing Apple services 
 + # * telesign : Telesign Activation gateway 
 + # * actor - activation : Actor Activation gateway 
 + 
 + services { 
 + 
 + # PostgreSQL storage for data 
 + # The only required service to start server 
 + # For more information see https : / / github . com / actorapp / actor - bootstrap / blob / master / docs / server / configure - database . md 
 + postgresql { 
 + # Host of PostgreSQL instance 
 + host : localhost 
 + # Port of PostgreSQL instance 
 + port : 5432 
 + # Database name 
 + db : actor 
 + # User name in PostgreSQL 
 + user : actor 
 + # Password in PostgreSQL 
 + password : < put _ psql _ password _ here > 
 + } 
 + 
 + # AWS configuration 
 + # It is strictly recommended to configure s3 storage for 
 + # enabling file sharing in apps 
 + # aws { 
 + # S3 Storage , used for file sharing 
 + # For more information see https : / / github . com / actorapp / actor - bootstrap / blob / master / docs / server / configure - s3 . md 
 + # s3 { 
 + # Bucket name 
 + # default - bucket : < put _ your _ bucket _ name _ here > 
 + # S3 Api Key 
 + # access - key : < put _ your _ aws _ key _ here > 
 + # S3 Api Secret 
 + # secret - key : < put _ your _ aws _ secret _ here > 
 + # S3 Endpoint 
 + # endpoint : < put _ your _ custom _ endpoint _ here > 
 + # S3 bucket region 
 + # region : < put _ your _ region _ here > 
 + # Enable S3 URLs with path - style access 
 + # path - style - access : true / false 
 + # } 
 + # } 
 + 
 + # Service used for sending activation codes 
 + activation { 
 + # Define code providers . look im . actor . server . activation for full provider list 
 + # providers { 
 + # internal : im . actor . server . activation . internal . InternalCodeProvider 
 + # sms : im . actor . server . activation . gate . ActorGateSmsProvider 
 + # smtp : im . actor . server . activation . smtp . SMTPProvider 
 + # call : im . actor . server . activation . telesign . TelesignProvider 
 + # } 
 + # Allow client to repeat code sending after this interval 
 + # repeat - limit : 1m 
 + # Time and attempt to expire sms / email activation code 
 + # code - expiration : 1 day 
 + # code - attempts : 3 
 + 
 + # Email template for email code activation 
 + # email { 
 + # template : templates / activation - email - template . html 
 + # } 
 + # Setting for internal activation ( aka via actor bot ) 
 + # internal { 
 + # sender - user - id : 10 
 + # online - time - window : 10m 
 + # message - template : " Your Actor activation code : $ $ CODE $ $ " 
 + # } 
 + } 
 + 
 + # Actor SMS gate 
 + # Write to @ gatekeeper in Actor Cloud to get your token 
 + actor - activation { 
 + # uri : " https : / / gate . actor . im " 
 + auth - token : < put token here > 
 + } 
 + 
 + # Telesign SMS gate 
 + # To get tokens ask at telesign web site : https : / / www . telesign . com 
 + # telesign { 
 + # customer - id : < put _ your _ customer _ id _ here > 
 + # api - key : < put _ your _ api _ key _ here > 
 + # } 
 + 
 + # Email configuration 
 + email { 
 + 
 + # Sender information for outgoing emails 
 + # sender { 
 + # Sender Email address 
 + # address : < put _ sender _ address _ here > 
 + # Sender Name 
 + # name : < put _ sender _ full _ name _ here > 
 + # Mail theme prefix 
 + # prefix : < put _ mail _ theme _ prefix _ here > 
 + # } 
 + 
 + # SMTP server configuration 
 + # smtp { 
 + 
 + # SMTP server host 
 + # host : < put _ smtp _ server _ host _ here > 
 + # SMTP server port 
 + # port : < put _ smtp _ server _ port _ here > 
 + # SMTP server username 
 + # username : < put _ smtp _ server _ username _ here > 
 + # SMTP server password 
 + # password : < put _ smtp _ server _ password _ here > 
 + 
 + # Is TLS required 
 + # tls : true 
 + # } 
 + } 
 + 
 + # Accessing Google Services 
 + # Used for OAuth2 in gmail mailboxes 
 + # and sending push notifications in Android & Chrome 
 + # 
 + # How to get OAuth2 : 
 + # * Open https : / / console . developers . google . com / 
 + # * Go To Api & Auth , then to Credentials 
 + # * Press " Client Id " and create id for Web Application 
 + # * In created Client Id there are values " Client Id " and " Client Secret " 
 + # for web OAuth configuration 
 + # * Same steps for Android & iOS applications 
 + # 
 + # How to get Push keys 
 + # * Open https : / / console . developers . google . com / 
 + # * Go To Api & Auth , then to Credentials 
 + # * Press " Create new key " for Android Application 
 + # * Allow any IP 
 + # * Get API key from created " Key for Android Application " 
 + # * Project Id can be found on Overview page 
 + google { 
 + 
 + # Uncomment if you want to perform OAuth authentication 
 + # for GMail accounts 
 + # oauth { 
 + # auth - uri : " https : / / accounts . google . com / o / oauth2 / auth " 
 + # token - uri : " https : / / accounts . google . com / o / oauth2 / token " 
 + # profile - uri : " https : / / www . googleapis . com / oauth2 / v2 / userinfo " 
 + # client - id : < put _ your _ client _ id _ here > 
 + # client - secret : < put _ your _ client _ secret _ here > 
 + # scope : " https : / / www . googleapis . com / auth / userinfo . email https : / / www . googleapis . com / auth / userinfo . profile https : / / www . google . com / m8 / feeds / " 
 + # } 
 + 
 + # Android & Chrome push notifications 
 + # push { 
 + # # Keys for push notifications in format 
 + # keys = [ 
 + # { 
 + # project - id : < put _ your _ project _ id _ here > 
 + # key : < put _ your _ key _ here > 
 + # } 
 + # ] 
 + # } 
 + } 
 + 
 + # Accessing Apple servers for push notifications 
 + apple { 
 + 
 + # Safari & iOS notifications 
 + # push { 
 + # Mobile push certificates 
 + # certs = [ 
 + # { 
 + # key : < put _ your _ certificate _ id _ here > 
 + # path : < put _ your _ certificate _ path _ here > 
 + # password : < put _ your _ certificate _ password _ here > 
 + # sandbox : yes / no 
 + # } 
 + # ] 
 + # } 
 + } 
 + } 
 diff - - git a / actor - server / src / linux / usr / share / actor / conf / server . conf . example - minimal b / actor - server / src / linux / usr / share / actor / conf / server . conf . example - minimal 
 new file mode 100644 
 index 0000000 . . 575c672 
 - - - / dev / null 
 + + + b / actor - server / src / linux / usr / share / actor / conf / server . conf . example - minimal 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + services { 
 + postgresql { 
 + host : " localhost " 
 + 
 + db : actor 
 + 
 + user : actor 
 + 
 + password : < password > 
 + } 
 + 
 + actor - activation { 
 + auth - token : < token > 
 + } 
 + } 
 + 
 + secret : < put a long random string here > 
 + project - name : < your application name > 
 + public - endpoints : [ 
 + < list of endpoints accessible by client applications > 
 + ] 
 \ No newline at end of file 
 diff - - git a / actor - server / src / universal / conf / server . conf . example b / actor - server / src / universal / conf / server . conf . example 
 deleted file mode 100644 
 index a4b7e43 . . 0000000 
 - - - a / actor - server / src / universal / conf / server . conf . example 
 + + + / dev / null 
 @ @ - 1 , 250 + 0 , 0 @ @ 
 - # HTTP Server settings 
 - # It serves static app ( optionally ) and provides integration API 
 - # http { 
 - # interface : " 0 . 0 . 0 . 0 " 
 - # port : 9090 
 - # base - uri : " https : / / api . actor . im " 
 - # } 
 - 
 - # URIs of endpoints , accessible by client applications 
 - # public - endpoints : [ 
 - # " wss : / / front1 - ws - mtproto - api - rev2 . actor . im " , 
 - # " tls : / / front1 - mtproto - api - rev2 . actor . im " , 
 - # " tcp : / / front3 - mtproto - api - rev3 . actor . im : 443 " 
 - # ] 
 - # Endpoints for Mobile / Web API 
 - # It is strictly recommended to use 443 port 
 - # for all connections . There are a lot of problems 
 - # on any other ports . 
 - # 
 - # Array of elements in format : 
 - # { 
 - # type : " tcp " or " websocket " 
 - # host : Listening host 
 - # post : Listening port 
 - # keystore : [ Optional ] Keystore 
 - # } 
 - # endpoints : [ 
 - # { 
 - # type : tcp 
 - # interface : " 0 . 0 . 0 . 0 " 
 - # port : 9070 
 - # } , 
 - # { 
 - # type : websocket 
 - # interface : " 0 . 0 . 0 . 0 " 
 - # port : 9080 
 - # } 
 - # ] 
 - 
 - # Name of your application . 
 - project - name : < your application name > 
 - 
 - # Secret is used to work with various secrets like password , auth hashes , etc 
 - # It have to be set once and never be changed in future 
 - secret : < put a long random string here > 
 - 
 - # Server modules 
 - modules { 
 - 
 - # Configuration for messaging module 
 - # messaging { 
 - # Configure url for group invites here 
 - # groups { 
 - # invite { 
 - # base - uri : https : / / quit . email 
 - # } 
 - # } 
 - # } 
 - 
 - # Message enricher 
 - # Comment this module if you don ' t want to use message 
 - # enriching feature 
 - # enricher { 
 - # Uncomment to customize max image preview size 
 - # max - preview - size = 2 M 
 - # } 
 - } 
 - 
 - # Services that are used by the server . 
 - # Default distribution support services : 
 - # * [ REQUIRED ] postgresql : PostgreSQL database 
 - # * email : Email integration 
 - # * aws : Amazon Web Services integration 
 - # * google : Accessing Google services 
 - # * apple : Accessing Apple services 
 - # * telesign : Telesign Activation gateway 
 - # * actor - activation : Actor Activation gateway 
 - 
 - services { 
 - 
 - # PostgreSQL storage for data 
 - # The only required service to start server 
 - # For more information see https : / / github . com / actorapp / actor - bootstrap / blob / master / docs / server / configure - database . md 
 - postgresql { 
 - # Host of PostgreSQL instance 
 - host : localhost 
 - # Port of PostgreSQL instance 
 - port : 5432 
 - # Database name 
 - db : actor 
 - # User name in PostgreSQL 
 - user : actor 
 - # Password in PostgreSQL 
 - password : < put _ psql _ password _ here > 
 - } 
 - 
 - # AWS configuration 
 - # It is strictly recommended to configure s3 storage for 
 - # enabling file sharing in apps 
 - # aws { 
 - # S3 Storage , used for file sharing 
 - # For more information see https : / / github . com / actorapp / actor - bootstrap / blob / master / docs / server / configure - s3 . md 
 - # s3 { 
 - # Bucket name 
 - # default - bucket : < put _ your _ bucket _ name _ here > 
 - # S3 Api Key 
 - # access - key : < put _ your _ aws _ key _ here > 
 - # S3 Api Secret 
 - # secret - key : < put _ your _ aws _ secret _ here > 
 - # S3 Endpoint 
 - # endpoint : < put _ your _ custom _ endpoint _ here > 
 - # S3 bucket region 
 - # region : < put _ your _ region _ here > 
 - # Enable S3 URLs with path - style access 
 - # path - style - access : true / false 
 - # } 
 - # } 
 - 
 - # Service used for sending activation codes 
 - activation { 
 - # Define code providers . look im . actor . server . activation for full provider list 
 - # providers { 
 - # internal : im . actor . server . activation . internal . InternalCodeProvider 
 - # sms : im . actor . server . activation . gate . ActorGateSmsProvider 
 - # smtp : im . actor . server . activation . smtp . SMTPProvider 
 - # call : im . actor . server . activation . telesign . TelesignProvider 
 - # } 
 - # Allow client to repeat code sending after this interval 
 - # repeat - limit : 1m 
 - # Time and attempt to expire sms / email activation code 
 - # code - expiration : 1 day 
 - # code - attempts : 3 
 - 
 - # Email template for email code activation 
 - # email { 
 - # template : templates / activation - email - template . html 
 - # } 
 - # Setting for internal activation ( aka via actor bot ) 
 - # internal { 
 - # sender - user - id : 10 
 - # online - time - window : 10m 
 - # message - template : " Your Actor activation code : $ $ CODE $ $ " 
 - # } 
 - } 
 - 
 - # Actor SMS gate 
 - # Write to @ gatekeeper in Actor Cloud to get your token 
 - actor - activation { 
 - # uri : " https : / / gate . actor . im " 
 - auth - token : < put token here > 
 - } 
 - 
 - # Telesign SMS gate 
 - # To get tokens ask at telesign web site : https : / / www . telesign . com 
 - # telesign { 
 - # customer - id : < put _ your _ customer _ id _ here > 
 - # api - key : < put _ your _ api _ key _ here > 
 - # } 
 - 
 - # Email configuration 
 - email { 
 - 
 - # Sender information for outgoing emails 
 - # sender { 
 - # Sender Email address 
 - # address : < put _ sender _ address _ here > 
 - # Sender Name 
 - # name : < put _ sender _ full _ name _ here > 
 - # Mail theme prefix 
 - # prefix : < put _ mail _ theme _ prefix _ here > 
 - # } 
 - 
 - # SMTP server configuration 
 - # smtp { 
 - 
 - # SMTP server host 
 - # host : < put _ smtp _ server _ host _ here > 
 - # SMTP server port 
 - # port : < put _ smtp _ server _ port _ here > 
 - # SMTP server username 
 - # username : < put _ smtp _ server _ username _ here > 
 - # SMTP server password 
 - # password : < put _ smtp _ server _ password _ here > 
 - 
 - # Is TLS required 
 - # tls : true 
 - # } 
 - } 
 - 
 - # Accessing Google Services 
 - # Used for OAuth2 in gmail mailboxes 
 - # and sending push notifications in Android & Chrome 
 - # 
 - # How to get OAuth2 : 
 - # * Open https : / / console . developers . google . com / 
 - # * Go To Api & Auth , then to Credentials 
 - # * Press " Client Id " and create id for Web Application 
 - # * In created Client Id there are values " Client Id " and " Client Secret " 
 - # for web OAuth configuration 
 - # * Same steps for Android & iOS applications 
 - # 
 - # How to get Push keys 
 - # * Open https : / / console . developers . google . com / 
 - # * Go To Api & Auth , then to Credentials 
 - # * Press " Create new key " for Android Application 
 - # * Allow any IP 
 - # * Get API key from created " Key for Android Application " 
 - # * Project Id can be found on Overview page 
 - google { 
 - 
 - # Uncomment if you want to perform OAuth authentication 
 - # for GMail accounts 
 - # oauth { 
 - # auth - uri : " https : / / accounts . google . com / o / oauth2 / auth " 
 - # token - uri : " https : / / accounts . google . com / o / oauth2 / token " 
 - # profile - uri : " https : / / www . googleapis . com / oauth2 / v2 / userinfo " 
 - # client - id : < put _ your _ client _ id _ here > 
 - # client - secret : < put _ your _ client _ secret _ here > 
 - # scope : " https : / / www . googleapis . com / auth / userinfo . email https : / / www . googleapis . com / auth / userinfo . profile https : / / www . google . com / m8 / feeds / " 
 - # } 
 - 
 - # Android & Chrome push notifications 
 - # push { 
 - # # Keys for push notifications in format 
 - # keys = [ 
 - # { 
 - # project - id : < put _ your _ project _ id _ here > 
 - # key : < put _ your _ key _ here > 
 - # } 
 - # ] 
 - # } 
 - } 
 - 
 - # Accessing Apple servers for push notifications 
 - apple { 
 - 
 - # Safari & iOS notifications 
 - # push { 
 - # Mobile push certificates 
 - # certs = [ 
 - # { 
 - # key : < put _ your _ certificate _ id _ here > 
 - # path : < put _ your _ certificate _ path _ here > 
 - # password : < put _ your _ certificate _ password _ here > 
 - # sandbox : yes / no 
 - # } 
 - # ] 
 - # } 
 - } 
 - } 
 diff - - git a / actor - server / src / universal / conf / server . conf . example - minimal b / actor - server / src / universal / conf / server . conf . example - minimal 
 deleted file mode 100644 
 index 575c672 . . 0000000 
 - - - a / actor - server / src / universal / conf / server . conf . example - minimal 
 + + + / dev / null 
 @ @ - 1 , 21 + 0 , 0 @ @ 
 - services { 
 - postgresql { 
 - host : " localhost " 
 - 
 - db : actor 
 - 
 - user : actor 
 - 
 - password : < password > 
 - } 
 - 
 - actor - activation { 
 - auth - token : < token > 
 - } 
 - } 
 - 
 - secret : < put a long random string here > 
 - project - name : < your application name > 
 - public - endpoints : [ 
 - < list of endpoints accessible by client applications > 
 - ] 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - activation / src / main / resources / reference . conf b / actor - server / actor - activation / src / main / resources / reference . conf 
 index 46d4164 . . 5eb0e53 100644 
 - - - a / actor - server / actor - activation / src / main / resources / reference . conf 
 + + + b / actor - server / actor - activation / src / main / resources / reference . conf 
 @ @ - 1 , 15 + 1 , 15 @ @ 
 services { 
 
 activation { 
 - default - service : internal 
 + default - service : actor - activation 
 repeat - limit : 1m 
 code - expiration : 1 day 
 code - attempts : 3 
 } 
 
 - activation - gate { 
 + actor - activation { 
 uri : " https : / / gate . actor . im " 
 - auth - token : " 2173fc216dc95641g3137825g59d5gg228237 " 
 + auth - token : $ { ? ACTIVATION _ GW _ TOKEN } 
 } 
 
 telesign { 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala 
 index 07fd304 . . 670ec0a 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala 
 @ @ - 16 , 6 + 16 , 10 @ @ object GateConfig { 
 } yield GateConfig ( uri , authToken ) 
 
 def load : Try [ GateConfig ] = { 
 - load ( ActorConfig . load ( ) . getConfig ( " services . activation - gate " ) ) 
 + for { 
 + config ← Try ( ActorConfig . load ( ) . getConfig ( " services . actor - activation " ) ) 
 + . orElse ( Try ( ActorConfig . load ( ) . getConfig ( " services . activation - gate " ) ) ) 
 + gateConfig ← load ( config ) 
 + } yield gateConfig 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - http - api / src / main / resources / reference . conf b / actor - server / actor - http - api / src / main / resources / reference . conf 
 index 9f564d6 . . 33bccdf 100644 
 - - - a / actor - server / actor - http - api / src / main / resources / reference . conf 
 + + + b / actor - server / actor - http - api / src / main / resources / reference . conf 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - webapp { 
 + http { 
 interface = " 0 . 0 . 0 . 0 " 
 port = 9090 
 host = " localhost " 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 index a50007f . . af8529f 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 @ @ - 39 , 7 + 39 , 7 @ @ object HttpApiFrontend { 
 system : ActorSystem , 
 materializer : Materializer 
 ) : Unit = { 
 - HttpApiConfig . load ( serverConfig . getConfig ( " webapp " ) ) match { 
 + HttpApiConfig . load ( serverConfig . getConfig ( " http " ) ) match { 
 case Success ( apiConfig ) ⇒ 
 val tlsContext = TlsContext . load ( serverConfig . getConfig ( " tls . keystores " ) ) . right . toOption 
 start ( apiConfig , customRoutes , tlsContext ) 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala 
 index 3d9ba20 . . 38d2dd2 100644 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala 
 @ @ - 81 , 8 + 81 , 8 @ @ object ActorConfig { 
 
 def baseUrl ( implicit system : ActorSystem ) = { 
 val config = system . settings . config 
 - val scheme = config . getString ( " webapp . scheme " ) 
 - val host = config . getString ( " webapp . host " ) 
 + val scheme = config . getString ( " http . scheme " ) 
 + val host = config . getString ( " http . host " ) 
 s " $ scheme : / / $ host " 
 } 
 } 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 index 2c5a220 . . 773ee9d 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 @ @ - 94 , 7 + 94 , 7 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 val emailConfig = EmailConfig . fromConfig ( serverConfig . getConfig ( " services . email " ) ) . toOption . get 
 val gateConfig = GateConfig . load . get 
 val groupInviteConfig = GroupInviteConfig . load ( serverConfig . getConfig ( " modules . messaging . groups . invite " ) ) 
 - val webappConfig = HttpApiConfig . load ( serverConfig . getConfig ( " webapp " ) ) . toOption . get 
 + val webappConfig = HttpApiConfig . load ( serverConfig . getConfig ( " http " ) ) . toOption . get 
 val oauth2GoogleConfig = OAuth2GoogleConfig . load ( serverConfig . getConfig ( " services . google . oauth " ) ) 
 val richMessageConfig = RichMessageConfig . load ( serverConfig . getConfig ( " modules . enricher " ) ) . get 
 val sequenceConfig = SequenceServiceConfig . load ( ) . get 
 diff - - git a / actor - server / src / docker / opt / docker / conf / server . conf b / actor - server / src / docker / opt / docker / conf / server . conf 
 index 58c0b0c . . 51e3e5e 100644 
 - - - a / actor - server / src / docker / opt / docker / conf / server . conf 
 + + + b / actor - server / src / docker / opt / docker / conf / server . conf 
 @ @ - 19 , 7 + 19 , 7 @ @ services { 
 default - service : actor - activation 
 } 
 
 - activation - gate { 
 + actor - activation { 
 uri : " https : / / activation - gw . actor . im " 
 auth - token : " FPEinjrmxsq1ZDyu1bc7 " 
 auth - token : $ { ? ACTIVATION _ GW _ TOKEN } 
 diff - - git a / actor - server / src / main / resources / application . conf . example b / actor - server / src / main / resources / application . conf . example 
 deleted file mode 100644 
 index 068669d . . 0000000 
 - - - a / actor - server / src / main / resources / application . conf . example 
 + + + / dev / null 
 @ @ - 1 , 326 + 0 , 0 @ @ 
 - # Example configuration for Actor Platform 
 - # This file uses HOCON syntax ( https : / / github . com / typesafehub / config / blob / master / HOCON . md ) 
 - # To start server you need : 
 - # * Configure PostgreSQL service 
 - # * Configure one of supported SMS gateway service ( TeleSign , Clickatell , Twilio ) 
 - # or 
 - # Configure email service 
 - 
 - # Configuration of storage engines for server 
 - # Comminity distribution can store all required data 
 - # in PostgreSQL and store files at Amazon S3 . 
 - # In enterprise versions you can configure 
 - # other storage engines 
 - storage { 
 - # Can be only postgresql in Community distribution 
 - database : " postgresql " 
 - # Can be only s3 in Community distribution 
 - files : " s3 " 
 - } 
 - 
 - # We strictly recommend to use TLS 
 - # Most of modern browsers are not working with websockets over 
 - # non - encrypted connection 
 - tls { 
 - 
 - # Ceritifcate keystore in Java Keystore format 
 - # with single key with alias password with password 
 - # equals to keystore password 
 - # 
 - # Written in format : 
 - # name { Unique name for certificate 
 - # path : Path to keystore 
 - # password : Password to keystore 
 - # } 
 - keystores { 
 - < write _ keystore _ name _ here > { 
 - path : < write _ keystore _ path _ here > 
 - password : < write _ keystore _ password _ here > 
 - } 
 - } 
 - } 
 - 
 - # Web App settings 
 - # { 
 - # host : Listening host 
 - # post : Listening port 
 - # domain : Domain 
 - # keystore : [ Optional ] Keystore 
 - # } 
 - webapp { 
 - interface : " 0 . 0 . 0 . 0 " 
 - port : 9090 
 - host : " localhost " 
 - } 
 - 
 - # Endpoints for Mobile / Web API 
 - # It is strictly recommended to use 443 port 
 - # for all connections . There are a lot of problems 
 - # on any other ports . 
 - # 
 - # Array of elements in format : 
 - # { 
 - # type : " tcp " or " websocket " 
 - # host : Listening host 
 - # post : Listening port 
 - # keystore : [ Optional ] Keystore 
 - # } 
 - endpoints : [ 
 - { 
 - type : tcp 
 - interface : " 0 . 0 . 0 . 0 " 
 - port : 9070 
 - } , 
 - { 
 - type : websocket 
 - interface : " 0 . 0 . 0 . 0 " 
 - port : 9080 
 - } 
 - ] 
 - 
 - # Enabled mobules for server 
 - # Default distribution has two modules : auth and enricher . 
 - # * auth : enables authentication support 
 - # * enricher : enables encriching of messages 
 - # for example , downloading previews of images by URL , or 
 - # loading gif images from Gliphy 
 - modules { 
 - 
 - # Configuration for messaging module 
 - # messaging { 
 - # Configure url for group invites here 
 - # groups { 
 - # invite { 
 - # base - uri : < write _ base _ uri _ here > 
 - # } 
 - # } 
 - # } 
 - 
 - # Configuration for authentication . 
 - # Default distribution can authenticate with one - time 
 - # code or oauth2 . 
 - # 
 - # If you comment this module authentication will be disabled . 
 - # Useful for some security - related cases . 
 - auth { 
 - # You can enable or disable types of authentication by 
 - # adding or removing from types variable . 
 - # Supported types : 
 - # * sms : one - time password by SMS , 
 - # * email : one - time password by email 
 - # * oauth2 : OAuth2 authentication for some mail domains 
 - 
 - types : [ sms , email , oauth2 ] 
 - 
 - # Uncomment if you want to tweak sms authentication parameters 
 - # sms { 
 - # Uncomment to change SMS send repeat limit on double sms request 
 - # repeat - limit = 1m 
 - # Uncomment to force some specific gateway for sending sms 
 - # primary - gateway = telesign 
 - # } 
 - } 
 - 
 - # Message enricher 
 - # Comment this module if you don ' t want to use message 
 - # enriching feature 
 - enricher { 
 - 
 - # Uncomment to customize max image preview size 
 - # max - preview - size = 2 M 
 - 
 - # Uncomment for disabling gliphy integration 
 - # NOTE : If glyphy integration is not set this feature 
 - # will be automatically disabled 
 - # glyphy - enabled = false 
 - } 
 - } 
 - 
 - # Services that are used by the server . 
 - # Default distribution support services : 
 - # * [ REQUIRED ] postgresql : PostgreSQL database 
 - # * email : Email integration 
 - # * aws : Amazon Web Services integration 
 - # * google : Accessing Google services 
 - # * apple : Accessing Apple services 
 - # * gliphy : Giphy . com integration ( for Message Enricher ) 
 - # * telesign : Telesign SMS gateway 
 - # * twilio : Twilio SMS gateway 
 - # * clickatel : Clickatel SMS gateway 
 - 
 - services { 
 - 
 - # PostgreSQL storage for data 
 - # The only required service to start server 
 - postgresql { 
 - 
 - # Host of PostgreSQL instance 
 - host : < write _ psql _ server _ host _ here > 
 - # Port of PostgreSQL instance 
 - port : 5432 
 - # Database name 
 - db : actor 
 - # User name in PostgreSQL 
 - user : < write _ psql _ user _ here > 
 - # Password in PostgreSQL 
 - password : < write _ psql _ password _ here > 
 - } 
 - 
 - # AWS configuration 
 - # It is strictly recommended to configure s3 storage for 
 - # enabling file sharing in apps 
 - aws { 
 - 
 - # S3 Storage , used for file sharing 
 - s3 { 
 - 
 - # S3 Api Key 
 - access - key : " YOUR AWS KEY ID " 
 - # S3 Api Secret 
 - secret - key : " YOUR AWS SECRET KEY " 
 - 
 - # File bucket 
 - default - bucket : " bucket for storing files " 
 - } 
 - } 
 - 
 - # Service used for sending activation codes 
 - activation { 
 - # Define witch activation service to use : internal / actor - activation 
 - # default - service : internal 
 - # Allow client to repeat code sending after this interval 
 - repeat - limit : 1m 
 - # Time and attempt to expire sms / email activation code 
 - # code - expiration : 1 day 
 - # code - attempts : 3 
 - } 
 - 
 - activation - gate { 
 - uri : " https : / / gate . actor . im " 
 - auth - token : " 2173fc216dc95641g3137825g59d5gg228237 " 
 - } 
 - 
 - # Email configuration 
 - email { 
 - 
 - # Sender information for outgoing emails 
 - sender { 
 - # Sender Email address 
 - address : < write _ sender _ address _ here > 
 - # Sender Name 
 - name : < write _ sender _ full _ name _ here > 
 - # Mail theme prefix 
 - prefix : < write _ mail _ theme _ prefix _ here > 
 - } 
 - 
 - # SMTP server configuration 
 - smtp { 
 - 
 - # SMTP server host 
 - host : < write _ smtp _ server _ host _ here > 
 - # SMTP server port 
 - port : < write _ smtp _ server _ port _ here > 
 - # SMTP server username 
 - username : < write _ smtp _ server _ username _ here > 
 - # SMTP server password 
 - password : < write _ smtp _ server _ password _ here > 
 - 
 - # Is TLS required 
 - tls : true 
 - } 
 - } 
 - 
 - # Telesign SMS gate ( best gate for authentication ) 
 - # To get tokens ask at telesign web site : https : / / www . telesign . com 
 - telesign { 
 - customer - id : < write _ your _ customer _ id _ here > 
 - api - key : < write _ your _ api _ key _ here > 
 - } 
 - 
 - # Twilio SMS gate ( fast , but sometimes unstable ) 
 - # To get tokens signup at Twilio web site : https : / / www . twilio . com 
 - # twilio { 
 - # account : 
 - # token : 
 - # } 
 - 
 - # Clickatell SMS ( slowest gate , but more stable than Twilio ) 
 - # To get tokens signup at Clickatel web site : https : / / www . clickatell . com / 
 - # clickatell { 
 - # user : 
 - # password : 
 - # app _ id : 
 - # } 
 - 
 - # Accessing Google Services 
 - # Used for OAuth2 in gmail mailboxes 
 - # and sending push notifications in Android & Chrome 
 - # 
 - # How to get OAuth2 : 
 - # * Open https : / / console . developers . google . com / 
 - # * Go To Api & Auth , then to Credentials 
 - # * Press " Client Id " and create id for Web Application 
 - # * In created Client Id there are values " Client Id " and " Client Secret " 
 - # for web OAuth configuration 
 - # * Same steps for Android & iOS applications 
 - # 
 - # How to get Push keys 
 - # * Open https : / / console . developers . google . com / 
 - # * Go To Api & Auth , then to Credentials 
 - # * Press " Create new key " for Android Application 
 - # * Allow any IP 
 - # * Get API key from created " Key for Android Application " 
 - # * Project Id can be found on Overview page 
 - google { 
 - 
 - # Uncomment if you want to perform OAuth authentication 
 - # for GMail accounts 
 - # oauth { 
 - # auth - uri : " https : / / accounts . google . com / o / oauth2 / auth " 
 - # token - uri : " https : / / accounts . google . com / o / oauth2 / token " 
 - # profile - uri : " https : / / www . googleapis . com / oauth2 / v2 / userinfo " 
 - # client - id : < write _ your _ client _ id _ here > 
 - # client - secret : < write _ your _ client _ secret _ here > 
 - # scope : " https : / / www . googleapis . com / auth / userinfo . email https : / / www . googleapis . com / auth / userinfo . profile https : / / www . google . com / m8 / feeds / " 
 - # } 
 - 
 - # Android & Chrome push notifications 
 - # push { 
 - # # Keys for push notifications in format : 
 - # # { 
 - # # projectId : Key project ID ( see comments above ) 
 - # # key : Secret Key ( see comments above ) 
 - # # } 
 - # keys = [ 
 - # { 
 - # project - id : 
 - # key : 
 - # } 
 - # ] 
 - # } 
 - } 
 - 
 - # Accessing Apple servers for push notifications 
 - apple { 
 - 
 - # Safari & iOS notifications 
 - # push { 
 - # # Mobile push certificates in format : 
 - # # { 
 - # # certId : Random Int unique value for certificate 
 - # # path : Path to certificate file 
 - # # password : Password to certificate 
 - # # } 
 - # mobile - certs = [ { 
 - # certId : < write _ your _ certificate _ id _ here > 
 - # path : < write _ your _ certificate _ path _ here > 
 - # password : < write _ your _ certificate _ password _ here > 
 - # } ] 
 - # } 
 - } 
 - 
 - # Accessing Gliphy for gif image downloading 
 - # gliphy { 
 - # api - token = < write _ your _ api _ token _ here > 
 - # } 
 - } 
 diff - - git a / actor - server / src / main / resources / application . conf . example - minimal b / actor - server / src / main / resources / application . conf . example - minimal 
 deleted file mode 100644 
 index 5164924 . . 0000000 
 - - - a / actor - server / src / main / resources / application . conf . example - minimal 
 + + + / dev / null 
 @ @ - 1 , 18 + 0 , 0 @ @ 
 - services { 
 - postgresql { 
 - host : " localhost " 
 - user : " postgres " 
 - password : " " 
 - db : " actor " 
 - } 
 - 
 - aws { 
 - s3 { 
 - access - key : " YOUR AWS KEY ID " 
 - secret - key : " YOUR AWS SECRET KEY " 
 - default - bucket : " bucket for storing files " 
 - } 
 - } 
 - } 
 - 
 - # secret : < your long secret here with special low and up case alphanumeric characters , in double quotes > 
 diff - - git a / actor - server / src / universal / conf / server . conf . example b / actor - server / src / universal / conf / server . conf . example 
 index baca203 . . 4f7f7f7 100644 
 - - - a / actor - server / src / universal / conf / server . conf . example 
 + + + b / actor - server / src / universal / conf / server . conf . example 
 @ @ - 1 , 36 + 1 , 219 @ @ 
 - services { 
 - postgresql { 
 - host : " localhost " 
 + # HTTP Server settings 
 + # It serves static app ( optionally ) and provides integration API 
 + # http { 
 + # interface : " 0 . 0 . 0 . 0 " 
 + # port : 9090 
 + # host : " localhost " 
 + # } 
 
 - db : < db > 
 + # Endpoints for Mobile / Web API 
 + # It is strictly recommended to use 443 port 
 + # for all connections . There are a lot of problems 
 + # on any other ports . 
 + # 
 + # Array of elements in format : 
 + # { 
 + # type : " tcp " or " websocket " 
 + # host : Listening host 
 + # post : Listening port 
 + # keystore : [ Optional ] Keystore 
 + # } 
 + # endpoints : [ 
 + # { 
 + # type : tcp 
 + # interface : " 0 . 0 . 0 . 0 " 
 + # port : 9070 
 + # } , 
 + # { 
 + # type : websocket 
 + # interface : " 0 . 0 . 0 . 0 " 
 + # port : 9080 
 + # } 
 + # ] 
 
 - user : < user > 
 + # Secret is used to work with various secrets like password , auth hashes , etc 
 + # It have to be set once and never be changed in future 
 + secret : < put a long random string here > 
 
 - password : < password > 
 - } 
 + # Server modules 
 + modules { 
 
 - activation { 
 - default - service : actor - activation 
 - } 
 + # Configuration for messaging module 
 + # messaging { 
 + # Configure url for group invites here 
 + # groups { 
 + # invite { 
 + # base - uri : https : / / quit . email 
 + # } 
 + # } 
 + # } 
 + 
 + # Message enricher 
 + # Comment this module if you don ' t want to use message 
 + # enriching feature 
 + # enricher { 
 + # Uncomment to customize max image preview size 
 + # max - preview - size = 2 M 
 + # } 
 + } 
 + 
 + # Services that are used by the server . 
 + # Default distribution support services : 
 + # * [ REQUIRED ] postgresql : PostgreSQL database 
 + # * email : Email integration 
 + # * aws : Amazon Web Services integration 
 + # * google : Accessing Google services 
 + # * apple : Accessing Apple services 
 + # * telesign : Telesign Activation gateway 
 + # * actor - activation : Actor Activation gateway 
 
 - activation - gate { 
 - uri : " https : / / activation - gw . actor . im " 
 - auth - token : < token > 
 + services { 
 + 
 + # PostgreSQL storage for data 
 + # The only required service to start server 
 + # For more information see https : / / github . com / actorapp / actor - bootstrap / blob / master / docs / server / Database . md 
 + postgresql { 
 + # Host of PostgreSQL instance 
 + host : < put _ psql _ server _ host _ here > 
 + # Port of PostgreSQL instance 
 + port : 5432 
 + # Database name 
 + db : actor 
 + # User name in PostgreSQL 
 + user : < put _ psql _ user _ here > 
 + # Password in PostgreSQL 
 + password : < put _ psql _ password _ here > 
 } 
 
 + # AWS configuration 
 + # It is strictly recommended to configure s3 storage for 
 + # enabling file sharing in apps 
 aws { 
 + # S3 Storage , used for file sharing 
 + # For more information see https : / / github . com / actorapp / actor - bootstrap / blob / master / docs / server / AWS . md 
 s3 { 
 # S3 Api Key 
 - access - key : < YOUR AWS KEY ID > 
 - 
 + access - key : < put _ your _ aws _ key _ here > 
 # S3 Api Secret 
 - secret - key : < YOUR AWS SECRET KEY > 
 - 
 + secret - key : < put _ your _ aws _ secret _ here > 
 # File bucket 
 - default - bucket : < bucket for storing files > 
 + default - bucket : < put _ your _ bucket _ here > 
 } 
 } 
 - } 
 
 - secret : < put a long random string here > 
 + # Service used for sending activation codes 
 + activation { 
 + # Define witch activation service to use : internal / actor - activation 
 + # default - service : actor - activation 
 + # Allow client to repeat code sending after this interval 
 + # repeat - limit : 1m 
 + # Time and attempt to expire sms / email activation code 
 + # code - expiration : 1 day 
 + # code - attempts : 3 
 + } 
 
 + # Service used for sending auth codes 
 + # Write to @ gatekeeper in Actor Cloud to get your token 
 + actor - activation { 
 + # uri : " https : / / gate . actor . im " 
 + auth - token : < put token here > 
 + } 
 + 
 + # Telesign SMS gate ( best gate for authentication ) 
 + # To get tokens ask at telesign web site : https : / / www . telesign . com 
 + # telesign { 
 + # customer - id : < put _ your _ customer _ id _ here > 
 + # api - key : < put _ your _ api _ key _ here > 
 + # } 
 + 
 + # Email configuration 
 + email { 
 + 
 + # Sender information for outgoing emails 
 + # sender { 
 + # Sender Email address 
 + # address : < put _ sender _ address _ here > 
 + # Sender Name 
 + # name : < put _ sender _ full _ name _ here > 
 + # Mail theme prefix 
 + # prefix : < put _ mail _ theme _ prefix _ here > 
 + # } 
 + 
 + # SMTP server configuration 
 + # smtp { 
 + 
 + # SMTP server host 
 + # host : < put _ smtp _ server _ host _ here > 
 + # SMTP server port 
 + # port : < put _ smtp _ server _ port _ here > 
 + # SMTP server username 
 + # username : < put _ smtp _ server _ username _ here > 
 + # SMTP server password 
 + # password : < put _ smtp _ server _ password _ here > 
 + 
 + # Is TLS required 
 + # tls : true 
 + # } 
 + } 
 + 
 + # Accessing Google Services 
 + # Used for OAuth2 in gmail mailboxes 
 + # and sending push notifications in Android & Chrome 
 + # 
 + # How to get OAuth2 : 
 + # * Open https : / / console . developers . google . com / 
 + # * Go To Api & Auth , then to Credentials 
 + # * Press " Client Id " and create id for Web Application 
 + # * In created Client Id there are values " Client Id " and " Client Secret " 
 + # for web OAuth configuration 
 + # * Same steps for Android & iOS applications 
 + # 
 + # How to get Push keys 
 + # * Open https : / / console . developers . google . com / 
 + # * Go To Api & Auth , then to Credentials 
 + # * Press " Create new key " for Android Application 
 + # * Allow any IP 
 + # * Get API key from created " Key for Android Application " 
 + # * Project Id can be found on Overview page 
 + google { 
 + 
 + # Uncomment if you want to perform OAuth authentication 
 + # for GMail accounts 
 + # oauth { 
 + # auth - uri : " https : / / accounts . google . com / o / oauth2 / auth " 
 + # token - uri : " https : / / accounts . google . com / o / oauth2 / token " 
 + # profile - uri : " https : / / www . googleapis . com / oauth2 / v2 / userinfo " 
 + # client - id : < put _ your _ client _ id _ here > 
 + # client - secret : < put _ your _ client _ secret _ here > 
 + # scope : " https : / / www . googleapis . com / auth / userinfo . email https : / / www . googleapis . com / auth / userinfo . profile https : / / www . google . com / m8 / feeds / " 
 + # } 
 + 
 + # Android & Chrome push notifications 
 + # push { 
 + # # Keys for push notifications in format 
 + # keys = [ 
 + # { 
 + # project - id : < put _ your _ project _ id _ here > 
 + # key : < put _ your _ key _ here > 
 + # } 
 + # ] 
 + # } 
 + } 
 + 
 + # Accessing Apple servers for push notifications 
 + apple { 
 + 
 + # Safari & iOS notifications 
 + # push { 
 + # Mobile push certificates 
 + # certs = [ 
 + # { 
 + # key : < put _ your _ certificate _ id _ here > 
 + # path : < put _ your _ certificate _ path _ here > 
 + # password : < put _ your _ certificate _ password _ here > 
 + # sandbox : yes / no 
 + # } 
 + # ] 
 + # } 
 + } 
 + } 
 diff - - git a / actor - server / src / universal / conf / server . conf . example - minimal b / actor - server / src / universal / conf / server . conf . example - minimal 
 new file mode 100644 
 index 0000000 . . 9f37696 
 - - - / dev / null 
 + + + b / actor - server / src / universal / conf / server . conf . example - minimal 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + services { 
 + postgresql { 
 + host : " localhost " 
 + 
 + db : < db > 
 + 
 + user : < user > 
 + 
 + password : < password > 
 + } 
 + 
 + activation { 
 + default - service : actor - activation 
 + } 
 + 
 + actor - activation { 
 + uri : " https : / / activation - gw . actor . im " 
 + auth - token : < token > 
 + } 
 + 
 + aws { 
 + s3 { 
 + # S3 Api Key 
 + access - key : < YOUR AWS KEY ID > 
 + 
 + # S3 Api Secret 
 + secret - key : < YOUR AWS SECRET KEY > 
 + 
 + # File bucket 
 + default - bucket : < bucket for storing files > 
 + } 
 + } 
 + } 
 + 
 + secret : < put a long random string here > 
 +
