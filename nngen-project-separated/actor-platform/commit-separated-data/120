BLEU SCORE: 0.13949762415143757

TEST MSG: fix ( server : sequence ) : rewrite difference to avoid counters madness
GENERATED MSG: fix ( server : messaging ) : don ' t count dialogs with hidden groups ; added isArchived to dialogs

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > index be400ee . . 3b7d1c5 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > @ @ - 463 , 22 + 463 , 34 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit < nl > } < nl > } < nl > < nl > + object DialogGroupKeys { < nl > + val Favourites = " favourites " < nl > + val Direct = " privates " < nl > + val Groups = " groups " < nl > + } < nl > + < nl > + object DialogGroupTitles { < nl > + val Favourites = " Favourites " < nl > + val Direct = " Direct Messages " < nl > + val Groups = " Groups " < nl > + } < nl > + < nl > object DialogExtension extends ExtensionId [ DialogExtensionImpl ] with ExtensionIdProvider { < nl > override def lookup = DialogExtension < nl > < nl > override def createExtension ( system : ExtendedActorSystem ) = new DialogExtensionImpl ( system ) < nl > < nl > def groupKey ( group : DialogGroupType ) = group match { < nl > - case DialogGroupType . Favourites ⇒ " favourites " < nl > - case DialogGroupType . DirectMessages ⇒ " privates " < nl > - case DialogGroupType . Groups ⇒ " groups " < nl > + case DialogGroupType . Favourites ⇒ DialogGroupKeys . Favourites < nl > + case DialogGroupType . DirectMessages ⇒ DialogGroupKeys . Direct < nl > + case DialogGroupType . Groups ⇒ DialogGroupKeys . Groups < nl > case unknown ⇒ throw DialogErrors . UnknownDialogGroupType ( unknown ) < nl > } < nl > < nl > def groupTitle ( group : DialogGroupType ) = group match { < nl > - case DialogGroupType . Favourites ⇒ " Favourites " < nl > - case DialogGroupType . DirectMessages ⇒ " Direct Messages " < nl > - case DialogGroupType . Groups ⇒ " Groups " < nl > + case DialogGroupType . Favourites ⇒ DialogGroupTitles . Favourites < nl > + case DialogGroupType . DirectMessages ⇒ DialogGroupTitles . Direct < nl > + case DialogGroupType . Groups ⇒ DialogGroupTitles . Groups < nl > case unknown ⇒ throw DialogErrors . UnknownDialogGroupType ( unknown ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > index e65030d . . e308b0f 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > @ @ - 107 , 6 + 107 , 7 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > import context . dispatcher < nl > < nl > private val system = context . system < nl > + private val seqUpdExt = SeqUpdatesExtension ( system ) < nl > private val userExt = UserExtension ( system ) < nl > private val groupExt = GroupExtension ( system ) < nl > private val db = DbExtension ( system ) . db < nl > @ @ - 218 , 7 + 219 , 7 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > commit ( e ) < nl > ( for { < nl > _ ← db . run ( HistoryMessageRepo . deleteAll ( userId , peer ) ) < nl > - _ ← SeqUpdatesExtension ( system ) . deliverUserUpdate ( userId , UpdateChatDelete ( peer . asStruct ) ) < nl > + _ ← seqUpdExt . deliverUserUpdate ( userId , UpdateChatDelete ( peer . asStruct ) ) < nl > seqState ← sendChatGroupsChanged ( clientAuthId ) < nl > / / _ = thatDialog ! PoisonPill / / kill that dialog would be good < nl > } yield seqState ) pipeTo sender ( ) < nl > @ @ - 273 , 8 + 274 , 13 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > for { < nl > groups ← DialogExtension ( system ) . fetchApiGroupedDialogs ( userId ) < nl > update = UpdateChatGroupsChanged ( groups ) < nl > - seqState ← SeqUpdatesExtension ( system ) < nl > - . deliverClientUpdate ( userId , authId , update , pushRules ) < nl > + seqState ← seqUpdExt . deliverClientUpdate ( < nl > + userId , < nl > + authId , < nl > + update , < nl > + pushRules , < nl > + deliveryId = s " dialogschanged _ $ { userId } " < nl > + ) < nl > } yield seqState < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DeliveryOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DeliveryOperations . scala < nl > index 38c7c21 . . 04204cd 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DeliveryOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DeliveryOperations . scala < nl > @ @ - 1 , 9 + 1 , 8 @ @ < nl > package im . actor . server . sequence . operations < nl > < nl > import com . google . protobuf . ByteString < nl > - import com . google . protobuf . wrappers . StringValue < nl > import im . actor . api . rpc . Update < nl > - import im . actor . server . model . { Peer , SerializedUpdate , UpdateMapping } < nl > + import im . actor . server . model . { SerializedUpdate , UpdateMapping } < nl > import im . actor . server . sequence . UserSequenceCommands . { DeliverUpdate , Envelope } < nl > import im . actor . server . sequence . { PushData , PushRules , SeqState , SeqUpdatesExtension } < nl > import akka . pattern . ask < nl > @ @ - 154 , 7 + 153 , 7 @ @ trait DeliveryOperations { this : SeqUpdatesExtension ⇒ < nl > ( region . ref ? Envelope ( userId ) . withDeliverUpdate ( deliver ) ) . mapTo [ SeqState ] < nl > } < nl > < nl > - private def serializedUpdate ( u : Update ) : SerializedUpdate = < nl > + protected def serializedUpdate ( u : Update ) : SerializedUpdate = < nl > SerializedUpdate ( u . header , ByteString . copyFrom ( u . toByteArray ) , u . _ relatedUserIds , u . _ relatedGroupIds ) < nl > < nl > private def buildDeliver ( < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala < nl > index 430ab30 . . 51239ea 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala < nl > @ @ - 1 , 7 + 1 , 10 @ @ < nl > package im . actor . server . sequence . operations < nl > < nl > import akka . http . scaladsl . util . FastFuture < nl > + import im . actor . api . rpc . messaging . { ApiDialogGroup , ApiDialogShort , UpdateChatGroupsChanged , UpdateMessageReadByMe } < nl > + import im . actor . api . rpc . peers . ApiPeer < nl > import im . actor . api . rpc . sequence . UpdateEmptyUpdate < nl > + import im . actor . server . dialog . { DialogGroupKeys , DialogGroupTitles } < nl > import im . actor . server . model . { SeqUpdate , SerializedUpdate , UpdateMapping } < nl > import im . actor . server . persist . sequence . UserSequenceRepo < nl > import im . actor . server . sequence . { CommonState , Difference , SeqUpdatesExtension } < nl > @ @ - 18 , 7 + 21 , 12 @ @ trait DifferenceOperations { this : SeqUpdatesExtension ⇒ < nl > < nl > private type ReduceKey = String < nl > private object DiffAcc { < nl > - def empty ( commonSeq : Int ) = DiffAcc ( commonSeq , 0 , immutable . TreeMap . empty , Map . empty ) < nl > + def empty ( commonSeq : Int ) = DiffAcc ( < nl > + commonSeq = commonSeq , < nl > + seqDelta = 0 , < nl > + generic = immutable . TreeMap . empty , < nl > + reduced = Map . empty < nl > + ) < nl > } < nl > < nl > / * * < nl > @ @ - 42 , 7 + 50 , 78 @ @ trait DifferenceOperations { this : SeqUpdatesExtension ⇒ < nl > ) { < nl > def nonEmpty = generic . nonEmpty | | reduced . nonEmpty < nl > < nl > - def toVector = ( generic + + reduced . values ) . values . toVector < nl > + private def rewriteDialogsCounter ( dialogs : IndexedSeq [ ApiDialogShort ] , upd : UpdateMessageReadByMe ) = < nl > + dialogs map { dlg ⇒ < nl > + if ( upd . peer = = dlg . peer ) { < nl > + dlg . copy ( counter = upd . unreadCounter getOrElse 0 ) < nl > + } else { < nl > + dlg < nl > + } < nl > + } < nl > + < nl > + def toVector = { < nl > + val originalUpdates = ( generic + + reduced . values ) . values . toVector < nl > + < nl > + / / If there is UpdateChatGroupsChanged in difference , < nl > + / / we are writing up to date counters from UpdateMessageReadByMe < nl > + / / for each peer we have in UpdateMessageReadByMe updates . < nl > + / / After that , we update original difference < nl > + val optLastChatsChanged : Option [ ( Int , UpdateChatGroupsChanged ) ] = < nl > + originalUpdates . zipWithIndex . reverse find { < nl > + case ( upd , i ) ⇒ < nl > + upd . header = = UpdateChatGroupsChanged . header < nl > + } flatMap { < nl > + case ( upd , i ) ⇒ < nl > + UpdateChatGroupsChanged . parseFrom ( upd . body ) . right . toOption map ( i → _ ) < nl > + } < nl > + < nl > + optLastChatsChanged match { < nl > + case None ⇒ originalUpdates < nl > + case Some ( ( index , chatsChanged ) ) ⇒ < nl > + def singleGroup ( groupKey : String ) = ( chatsChanged . dialogs collect { < nl > + case group if group . key = = groupKey ⇒ group . dialogs < nl > + } ) . flatten < nl > + < nl > + val ( groups , direct , favourites ) = ( originalUpdates foldLeft ( < nl > + singleGroup ( DialogGroupKeys . Groups ) , < nl > + singleGroup ( DialogGroupKeys . Direct ) , < nl > + singleGroup ( DialogGroupKeys . Favourites ) < nl > + ) ) { < nl > + case ( acc @ ( gr , dir , fav ) , upd ) ⇒ < nl > + if ( upd . header = = UpdateMessageReadByMe . header ) { < nl > + UpdateMessageReadByMe . parseFrom ( upd . body ) . right . toOption map { upd ⇒ < nl > + ( < nl > + rewriteDialogsCounter ( gr , upd ) , < nl > + rewriteDialogsCounter ( dir , upd ) , < nl > + rewriteDialogsCounter ( fav , upd ) < nl > + ) < nl > + } getOrElse acc < nl > + } else acc < nl > + } < nl > + < nl > + val chatsChangedUpdated = < nl > + chatsChanged . copy ( < nl > + Vector ( < nl > + ApiDialogGroup ( < nl > + title = DialogGroupTitles . Groups , < nl > + key = DialogGroupKeys . Groups , < nl > + dialogs = groups < nl > + ) , < nl > + ApiDialogGroup ( < nl > + title = DialogGroupTitles . Direct , < nl > + key = DialogGroupKeys . Direct , < nl > + dialogs = direct < nl > + ) , < nl > + ApiDialogGroup ( < nl > + title = DialogGroupTitles . Favourites , < nl > + key = DialogGroupKeys . Favourites , < nl > + dialogs = favourites < nl > + ) < nl > + ) < nl > + ) < nl > + originalUpdates . updated ( index , serializedUpdate ( chatsChangedUpdated ) ) < nl > + } < nl > + } < nl > } < nl > < nl > def getDifference ( < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > index e5aeda7 . . 86bb7cc 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > @ @ - 93 , 9 + 93 , 6 @ @ object GroupRepo { < nl > ) < nl > } < nl > < nl > - def findPublic = < nl > - groups . filter ( _ . isPublic = = = true ) . map ( _ . asGroup ) . result < nl > - < nl > @ deprecated ( " Replace with some sort of key - value maybe ? " , " 2016 - 06 - 05 " ) < nl > def findAllIds = allIds . result < nl > < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala < nl > index 4c15592 . . 478e525 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala < nl > @ @ - 161 , 6 + 161 , 7 @ @ final class SequenceServiceImpl ( config : SequenceServiceConfig ) ( < nl > } < nl > } < nl > < nl > + / / TODO : add non deleted check too . < nl > private def getNonChannelsIds ( groups : Seq [ ApiGroupOutPeer ] ) : Future [ Seq [ Int ] ] = { < nl > FutureExt . ftraverse ( groups ) { < nl > case ApiGroupOutPeer ( groupId , _ ) ⇒
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json < nl > index 528e9b1 . . 57fd83d 100644 < nl > - - - a / actor - server / actor - core / src / main / actor - api / actor . json < nl > + + + b / actor - server / actor - core / src / main / actor - api / actor . json < nl > @ @ - 3100 , 6 + 3100 , 106 @ @ < nl > } < nl > } , < nl > { < nl > + " type " : " struct " , < nl > + " content " : { < nl > + " name " : " DialogShort " , < nl > + " doc " : [ < nl > + " Short Dialog from grouped conversation list " , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " peer " , < nl > + " category " : " full " , < nl > + " description " : " Peer of conversation " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " counter " , < nl > + " category " : " full " , < nl > + " description " : " Conversation unread count " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " date " , < nl > + " category " : " full " , < nl > + " description " : " Conversation top message date " < nl > + } < nl > + ] , < nl > + " attributes " : [ < nl > + { < nl > + " type " : { < nl > + " type " : " struct " , < nl > + " childType " : " Peer " < nl > + } , < nl > + " id " : 1 , < nl > + " name " : " peer " < nl > + } , < nl > + { < nl > + " type " : " int32 " , < nl > + " id " : 2 , < nl > + " name " : " counter " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " alias " , < nl > + " childType " : " date " < nl > + } , < nl > + " id " : 4 , < nl > + " name " : " date " < nl > + } < nl > + ] < nl > + } < nl > + } , < nl > + { < nl > + " type " : " struct " , < nl > + " content " : { < nl > + " name " : " DialogGroup " , < nl > + " doc " : [ < nl > + " Grouped dialog list " , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " title " , < nl > + " category " : " full " , < nl > + " description " : " Title of group " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " key " , < nl > + " category " : " full " , < nl > + " description " : " Key of group " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " dialogs " , < nl > + " category " : " full " , < nl > + " description " : " Conversations in group " < nl > + } < nl > + ] , < nl > + " attributes " : [ < nl > + { < nl > + " type " : " string " , < nl > + " id " : 1 , < nl > + " name " : " title " < nl > + } , < nl > + { < nl > + " type " : " string " , < nl > + " id " : 2 , < nl > + " name " : " key " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " list " , < nl > + " childType " : { < nl > + " type " : " struct " , < nl > + " childType " : " DialogShort " < nl > + } < nl > + } , < nl > + " id " : 3 , < nl > + " name " : " dialogs " < nl > + } < nl > + ] < nl > + } < nl > + } , < nl > + { < nl > " type " : " rpc " , < nl > " content " : { < nl > " name " : " SendMessage " , < nl > @ @ - 3837 , 6 + 3937 , 87 @ @ < nl > } < nl > } , < nl > { < nl > + " type " : " update " , < nl > + " content " : { < nl > + " name " : " ChatArchived " , < nl > + " header " : 65 , < nl > + " doc " : [ < nl > + " Update about chat archive " , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " peer " , < nl > + " category " : " full " , < nl > + " description " : " Destination peer " < nl > + } < nl > + ] , < nl > + " attributes " : [ < nl > + { < nl > + " type " : { < nl > + " type " : " struct " , < nl > + " childType " : " Peer " < nl > + } , < nl > + " id " : 1 , < nl > + " name " : " peer " < nl > + } < nl > + ] < nl > + } < nl > + } , < nl > + { < nl > + " type " : " update " , < nl > + " content " : { < nl > + " name " : " ChatRestored " , < nl > + " header " : 66 , < nl > + " doc " : [ < nl > + " Update about chat restore " , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " peer " , < nl > + " category " : " full " , < nl > + " description " : " Destination peer " < nl > + } < nl > + ] , < nl > + " attributes " : [ < nl > + { < nl > + " type " : { < nl > + " type " : " struct " , < nl > + " childType " : " Peer " < nl > + } , < nl > + " id " : 1 , < nl > + " name " : " peer " < nl > + } < nl > + ] < nl > + } < nl > + } , < nl > + { < nl > + " type " : " update " , < nl > + " content " : { < nl > + " name " : " ChatGroupsChanged " , < nl > + " header " : 1 , < nl > + " doc " : [ < nl > + " Update about chat groups changed . Called only when adding , removing and reordering of grouped dialog . " , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " dialogs " , < nl > + " category " : " full " , < nl > + " description " : " New dialgos list " < nl > + } < nl > + ] , < nl > + " attributes " : [ < nl > + { < nl > + " type " : { < nl > + " type " : " list " , < nl > + " childType " : { < nl > + " type " : " struct " , < nl > + " childType " : " DialogGroup " < nl > + } < nl > + } , < nl > + " id " : 1 , < nl > + " name " : " dialogs " < nl > + } < nl > + ] < nl > + } < nl > + } , < nl > + { < nl > " type " : " enum " , < nl > " content " : { < nl > " name " : " MessageState " , < nl > @ @ - 4235 , 6 + 4416 , 77 @ @ < nl > } < nl > ] < nl > } < nl > + } , < nl > + { < nl > + " type " : " rpc " , < nl > + " content " : { < nl > + " name " : " LoadGroupedDialogs " , < nl > + " header " : 225 , < nl > + " response " : { < nl > + " type " : " anonymous " , < nl > + " header " : 226 , < nl > + " doc " : [ < nl > + " Loaded grouped dialogs " , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " dialogs " , < nl > + " category " : " compact " , < nl > + " description " : " Loaded groups of dialogs " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " users " , < nl > + " category " : " compact " , < nl > + " description " : " Loaded users " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " groups " , < nl > + " category " : " full " , < nl > + " description " : " Loaded groups " < nl > + } < nl > + ] , < nl > + " attributes " : [ < nl > + { < nl > + " type " : { < nl > + " type " : " list " , < nl > + " childType " : { < nl > + " type " : " struct " , < nl > + " childType " : " DialogGroup " < nl > + } < nl > + } , < nl > + " id " : 1 , < nl > + " name " : " dialogs " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " list " , < nl > + " childType " : { < nl > + " type " : " struct " , < nl > + " childType " : " User " < nl > + } < nl > + } , < nl > + " id " : 2 , < nl > + " name " : " users " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " list " , < nl > + " childType " : { < nl > + " type " : " struct " , < nl > + " childType " : " Group " < nl > + } < nl > + } , < nl > + " id " : 3 , < nl > + " name " : " groups " < nl > + } < nl > + ] < nl > + } , < nl > + " doc " : [ < nl > + " Load all dialogs from grouped list " < nl > + ] , < nl > + " attributes " : [ ] < nl > + } < nl > } < nl > ] < nl > } , < nl > @ @ - 9049 , 4 + 9301 , 4 @ @ < nl > ] < nl > } < nl > ] < nl > - } < nl > \ No newline at end of file < nl > + } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index 8ef1b65 . . 9ae6dbf 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 99 , 7 + 99 , 8 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > about = None , < nl > topic = None < nl > ) , < nl > - randomId < nl > + randomId , < nl > + isHidden = false < nl > ) < nl > _ ← p . GroupUser . create ( groupId , creatorUserId , creatorUserId , date , None , isAdmin = true ) < nl > _ ← HistoryUtils . writeHistoryMessage ( < nl > @ @ - 459 , 6 + 460 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > about = None , < nl > topic = None < nl > ) , < nl > - randomId < nl > + randomId , < nl > + state . isHidden < nl > ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupMigrator . scala < nl > index a11f0ff . . 0465035 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupMigrator . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupMigrator . scala < nl > @ @ - 26 , 7 + 26 , 7 @ @ object GroupMigrator extends Migration { < nl > protected override def migrationTimeout : Duration = 1 . hour < nl > < nl > protected override def startMigration ( ) ( implicit system : ActorSystem , db : PostgresDriver . api . Database , ec : ExecutionContext ) : Future [ Unit ] = { < nl > - db . run ( p . Group . allIds ) flatMap ( ids ⇒ Future . sequence ( ids map migrateSingle ) ) map ( _ ⇒ ( ) ) < nl > + db . run ( p . Group . findAllIds ) flatMap ( ids ⇒ Future . sequence ( ids map migrateSingle ) ) map ( _ ⇒ ( ) ) < nl > } < nl > < nl > private def migrateSingle ( groupId : Int ) ( implicit system : ActorSystem , db : Database ) : Future [ Unit ] = { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala < nl > index 3d0d02f . . d094d1e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala < nl > @ @ - 19 , 7 + 19 , 7 @ @ object GroupCreatorMemberMigrator extends Migration { < nl > protected override def migrationTimeout = 1 . hour < nl > < nl > protected override def startMigration ( ) ( implicit system : ActorSystem , db : Database , ec : ExecutionContext ) : Future [ Unit ] = { < nl > - db . run ( persist . Group . allIds ) flatMap { groupIds ⇒ < nl > + db . run ( persist . Group . findAllIds ) flatMap { groupIds ⇒ < nl > Future . sequence ( groupIds map { groupId ⇒ < nl > val promise = Promise [ Unit ] ( ) < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala < nl > new file mode 100644 < nl > index 0000000 . . 7cb8f39 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala < nl > @ @ - 0 , 0 + 1 , 34 @ @ < nl > + package im . actor . server . migrations < nl > + < nl > + import akka . actor . ActorSystem < nl > + import im . actor . server . db . DbExtension < nl > + import im . actor . server . group . GroupExtension < nl > + import im . actor . server . persist < nl > + import slick . driver . PostgresDriver < nl > + < nl > + import scala . concurrent . duration . _ < nl > + import scala . concurrent . { ExecutionContext , Future } < nl > + < nl > + object HiddenGroupMigrator extends Migration { < nl > + override protected def migrationName : String = " PutHiddenGroupsToSQL " < nl > + < nl > + override protected def migrationTimeout : Duration = 15 . minutes < nl > + < nl > + override protected def startMigration ( ) ( implicit system : ActorSystem , db : PostgresDriver . api . Database , ec : ExecutionContext ) : Future [ Unit ] = { < nl > + for { < nl > + ids ← db . run ( persist . Group . findAllIds ) < nl > + _ ← Future . sequence ( ids map migrateGroup ) < nl > + } yield ( ) < nl > + } < nl > + < nl > + private def migrateGroup ( id : Int ) ( implicit system : ActorSystem , ec : ExecutionContext ) : Future [ Unit ] = { < nl > + val db = DbExtension ( system ) . db < nl > + val groupExt = GroupExtension ( system ) < nl > + groupExt . getApiStruct ( id , 0 ) flatMap { group ⇒ < nl > + if ( group . isHidden . contains ( true ) ) < nl > + db . run ( persist . Group . makeHidden ( id ) ) map ( _ ⇒ ( ) ) < nl > + else < nl > + Future . successful ( ( ) ) < nl > + } < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala < nl > index 75f123a . . 568b8ac 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala < nl > @ @ - 26 , 7 + 26 , 7 @ @ object IntegrationTokenMigrator extends Migration { < nl > ) : Future [ Unit ] = { < nl > implicit val kv = ShardakkaExtension ( system ) . simpleKeyValue [ Int ] ( KeyValueMappings . IntegrationTokens , IntCodec ) < nl > implicit val viewRegion = GroupExtension ( system ) . viewRegion < nl > - db . run ( persist . Group . allIds ) flatMap { ids ⇒ < nl > + db . run ( persist . Group . findAllIds ) flatMap { ids ⇒ < nl > system . log . debug ( " Going to migrate integration tokens for groups : { } " , ids ) < nl > Future . sequence ( ids map ( groupId ⇒ migrateSingle ( groupId ) recover { < nl > case NoBotFound ⇒ < nl > diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / Dialog . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / Dialog . scala < nl > index c8ee944 . . b364e9b 100644 < nl > - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / Dialog . scala < nl > + + + b / actor - server / actor - models / src / main / scala / im / actor / server / models / Dialog . scala < nl > @ @ - 28 , 5 + 28 , 5 @ @ case class Dialog ( < nl > lastReadAt : DateTime , < nl > ownerLastReceivedAt : DateTime , < nl > ownerLastReadAt : DateTime , < nl > - isHidden : Boolean < nl > + isArchived : Boolean < nl > ) < nl > diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / Group . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / Group . scala < nl > index 19facf8 . . f103a9a 100644 < nl > - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / Group . scala < nl > + + + b / actor - server / actor - models / src / main / scala / im / actor / server / models / Group . scala < nl > @ @ - 41 , 5 + 41 , 6 @ @ case class FullGroup ( < nl > titleChangeRandomId : Long , < nl > avatarChangerUserId : Int , < nl > avatarChangedAt : DateTime , < nl > - avatarChangeRandomId : Long < nl > + avatarChangeRandomId : Long , < nl > + isHidden : Boolean < nl > ) < nl > diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20151014194156 _ _ AddIsHiddenToGroups . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20151014194156 _ _ AddIsHiddenToGroups . sql < nl > new file mode 100644 < nl > index 0000000 . . 0d3ae91 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20151014194156 _ _ AddIsHiddenToGroups . sql < nl > @ @ - 0 , 0 + 1 , 5 @ @ < nl > + ALTER TABLE groups ADD COLUMN is _ hidden BOOLEAN DEFAULT FALSE ; < nl > + ALTER TABLE dialogs DROP COLUMN is _ hidden ; < nl > + ALTER TABLE dialogs ADD COLUMN is _ archived BOOLEAN DEFAULT FALSE ; < nl > + CREATE INDEX idx _ groups _ id _ is _ hidden ON groups ( id , is _ hidden ) ; < nl > + CREATE INDEX idx _ dialogs _ user _ id _ is _ archived ON dialogs ( user _ id , is _ archived ) ; < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala < nl > index 93d56d8 . . ffa59dc 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala < nl > @ @ - 10 , 6 + 10 , 8 @ @ import slick . profile . { SqlAction , FixedSqlStreamingAction , FixedSqlAction } < nl > < nl > import im . actor . server . models < nl > < nl > + import scala . util . matching . Regex . Groups < nl > + < nl > class DialogTable ( tag : Tag ) extends Table [ models . Dialog ] ( tag , " dialogs " ) { < nl > < nl > def userId = column [ Int ] ( " user _ id " , O . PrimaryKey ) < nl > @ @ - 28 , 12 + 30 , 12 @ @ class DialogTable ( tag : Tag ) extends Table [ models . Dialog ] ( tag , " dialogs " ) { < nl > < nl > def ownerLastReadAt = column [ DateTime ] ( " owner _ last _ read _ at " ) < nl > < nl > - def isHidden = column [ Boolean ] ( " is _ hidden " ) < nl > + def isArchived = column [ Boolean ] ( " is _ archived " ) < nl > < nl > - def * = ( userId , peerType , peerId , lastMessageDate , lastReceivedAt , lastReadAt , ownerLastReceivedAt , ownerLastReadAt , isHidden ) < > ( applyDialog . tupled , unapplyDialog ) < nl > + def * = ( userId , peerType , peerId , lastMessageDate , lastReceivedAt , lastReadAt , ownerLastReceivedAt , ownerLastReadAt , isArchived ) < > ( applyDialog . tupled , unapplyDialog ) < nl > < nl > def applyDialog : ( Int , Int , Int , DateTime , DateTime , DateTime , DateTime , DateTime , Boolean ) ⇒ models . Dialog = { < nl > - case ( userId , peerType , peerId , lastMessageDate , lastReceivedAt , lastReadAt , ownerLastReceivedAt , ownerLastReadAt , isHidden ) ⇒ < nl > + case ( userId , peerType , peerId , lastMessageDate , lastReceivedAt , lastReadAt , ownerLastReceivedAt , ownerLastReadAt , isArchived ) ⇒ < nl > models . Dialog ( < nl > userId = userId , < nl > peer = models . Peer ( models . PeerType . fromInt ( peerType ) , peerId ) , < nl > @ @ - 42 , 14 + 44 , 14 @ @ class DialogTable ( tag : Tag ) extends Table [ models . Dialog ] ( tag , " dialogs " ) { < nl > lastReadAt = lastReadAt , < nl > ownerLastReceivedAt = ownerLastReceivedAt , < nl > ownerLastReadAt = ownerLastReadAt , < nl > - isHidden = isHidden < nl > + isArchived = isArchived < nl > ) < nl > } < nl > < nl > def unapplyDialog : models . Dialog ⇒ Option [ ( Int , Int , Int , DateTime , DateTime , DateTime , DateTime , DateTime , Boolean ) ] = { dialog ⇒ < nl > models . Dialog . unapply ( dialog ) . map { < nl > - case ( userId , peer , lastMessageDate , lastReceivedAt , lastReadAt , ownerLastReceivedAt , ownerLastReadAt , isHidden ) ⇒ < nl > - ( userId , peer . typ . toInt , peer . id , lastMessageDate , lastReceivedAt , lastReadAt , ownerLastReceivedAt , ownerLastReadAt , isHidden ) < nl > + case ( userId , peer , lastMessageDate , lastReceivedAt , lastReadAt , ownerLastReceivedAt , ownerLastReadAt , isArchived ) ⇒ < nl > + ( userId , peer . typ . toInt , peer . id , lastMessageDate , lastReceivedAt , lastReadAt , ownerLastReceivedAt , ownerLastReadAt , isArchived ) < nl > } < nl > } < nl > } < nl > @ @ - 77 , 6 + 79 , 10 @ @ object Dialog { < nl > val byPeerTypeC = Compiled ( byPeerType _ ) < nl > val idByPeerTypeC = Compiled ( idByPeerType _ ) < nl > < nl > + val notHiddenDialogs = Dialog . dialogs joinLeft Group . groups on ( _ . peerId = = = _ . id ) filter { < nl > + case ( dialog , groupOpt ) ⇒ dialog . isArchived = = = false & & ( groupOpt . map ( ! _ . isHidden ) . getOrElse ( true ) ) < nl > + } map ( _ . _ 1 ) < nl > + < nl > def create ( dialog : models . Dialog ) = < nl > dialogs + = dialog < nl > < nl > @ @ - 102 , 9 + 108 , 9 @ @ object Dialog { < nl > def findLastReadBefore ( date : DateTime , userId : Int ) = < nl > dialogs . filter ( d ⇒ d . userId = = = userId & & d . ownerLastReadAt < date ) . result < nl > < nl > - def findNotHiddenByUser ( userId : Int , dateOpt : Option [ DateTime ] , limit : Int ) ( implicit ec : ExecutionContext ) = { < nl > - val baseQuery = dialogs < nl > - . filter ( d ⇒ d . userId = = = userId & & d . isHidden = = = false ) < nl > + def findNotArchivedByUser ( userId : Int , dateOpt : Option [ DateTime ] , limit : Int ) ( implicit ec : ExecutionContext ) = { < nl > + val baseQuery = notHiddenDialogs < nl > + . filter ( d ⇒ d . userId = = = userId ) < nl > . sortBy ( _ . lastMessageDate . desc ) < nl > < nl > val limitedQuery = dateOpt match { < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > index 198249c . . 68d5113 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > @ @ - 35 , 6 + 35 , 8 @ @ class FullGroupTable ( tag : Tag ) extends Table [ models . FullGroup ] ( tag , " groups " ) { < nl > < nl > def avatarChangeRandomId = column [ Long ] ( " avatar _ change _ random _ id " ) < nl > < nl > + def isHidden = column [ Boolean ] ( " is _ hidden " ) < nl > + < nl > def * = < nl > ( < nl > id , < nl > @ @ - 50 , 7 + 52 , 8 @ @ class FullGroupTable ( tag : Tag ) extends Table [ models . FullGroup ] ( tag , " groups " ) { < nl > titleChangeRandomId , < nl > avatarChangerUserId , < nl > avatarChangedAt , < nl > - avatarChangeRandomId < nl > + avatarChangeRandomId , < nl > + isHidden < nl > ) < > ( models . FullGroup . tupled , models . FullGroup . unapply ) < nl > < nl > def asGroup = ( id , creatorUserId , accessHash , title , isPublic , createdAt , about , topic ) < > ( ( models . Group . apply _ ) . tupled , models . Group . unapply ) < nl > @ @ - 68 , 9 + 71 , 9 @ @ object Group { < nl > val groupByIdC = Compiled ( groupById _ ) < nl > val titleByIdC = Compiled ( titleById _ ) < nl > < nl > - val allIds = groups . map ( _ . id ) . result < nl > + val allIds = groups . map ( _ . id ) < nl > < nl > - def create ( group : models . Group , randomId : Long ) = { < nl > + def create ( group : models . Group , randomId : Long , isHidden : Boolean ) = { < nl > groups + = models . FullGroup ( < nl > id = group . id , < nl > creatorUserId = group . creatorUserId , < nl > @ @ - 85 , 13 + 88 , 16 @ @ object Group { < nl > titleChangeRandomId = randomId , < nl > avatarChangerUserId = group . creatorUserId , < nl > avatarChangedAt = group . createdAt , < nl > - avatarChangeRandomId = randomId < nl > + avatarChangeRandomId = randomId , < nl > + isHidden = isHidden < nl > ) < nl > } < nl > < nl > def findPublic = < nl > groups . filter ( _ . isPublic = = = true ) . map ( _ . asGroup ) . result < nl > < nl > + def findAllIds = allIds . result < nl > + < nl > def find ( id : Int ) = < nl > groupByIdC ( id ) . result . headOption < nl > < nl > @ @ - 113 , 4 + 119 , 6 @ @ object Group { < nl > byIdC . applied ( id ) . map ( _ . about ) . update ( about ) < nl > < nl > def makePublic ( id : Int ) = byIdC . applied ( id ) . map ( _ . isPublic ) . update ( true ) < nl > + < nl > + def makeHidden ( id : Int ) = byIdC . applied ( id ) . map ( _ . isHidden ) . update ( true ) < nl > } < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessage . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessage . scala < nl > index 20ba862 . . b9c75e6 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessage . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessage . scala < nl > @ @ - 120 , 7 + 120 , 7 @ @ object HistoryMessage { < nl > / / в о з м о ж н о т у т н е у ч и т ы в а ю т с я < nl > private def unreadTotal ( userId : Rep [ Int ] ) = < nl > ( for { < nl > - d ← Dialog . dialogs . filter ( d ⇒ d . userId = = = userId & & d . isHidden = = = false ) < nl > + d ← Dialog . notHiddenDialogs . filter ( _ . userId = = = userId ) < nl > m ← notDeletedMessages . filter ( _ . senderUserId = ! = userId ) < nl > if m . userId = = = d . userId & & m . peerType = = = d . peerType & & m . peerId = = = d . peerId & & m . date > d . ownerLastReadAt < nl > } yield m . date ) . length < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > index 9099c1b . . 4c62416 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > @ @ - 78 , 7 + 78 , 7 @ @ trait HistoryHandlers { < nl > < nl > override def jhandleLoadDialogs ( endDate : Long , limit : Int , clientData : ClientData ) : Future [ HandlerResult [ ResponseLoadDialogs ] ] = { < nl > val authorizedAction = requireAuth ( clientData ) . map { implicit client ⇒ < nl > - persist . Dialog . findNotHiddenByUser ( client . userId , endDateTimeFrom ( endDate ) , limit ) flatMap { dialogModels ⇒ < nl > + persist . Dialog . findNotArchivedByUser ( client . userId , endDateTimeFrom ( endDate ) , limit ) flatMap { dialogModels ⇒ < nl > for { < nl > dialogs ← DBIO . sequence ( dialogModels map getDialogStruct ) < nl > ( users , groups ) ← getDialogsUsersGroups ( dialogs ) < nl > @ @ - 95 , 6 + 95 , 14 @ @ trait HistoryHandlers { < nl > db . run ( toDBIOAction ( authorizedAction ) ) < nl > } < nl > < nl > + override def jhandleLoadGroupedDialogs ( clientData : ClientData ) : Future [ HandlerResult [ ResponseLoadGroupedDialogs ] ] = { < nl > + val authorizedAction = requireAuth ( clientData ) map { implicit client ⇒ < nl > + throw new RuntimeException ( " Not implemented yet " ) < nl > + } < nl > + < nl > + db . run ( toDBIOAction ( authorizedAction ) ) < nl > + } < nl > + < nl > override def jhandleLoadHistory ( peer : ApiOutPeer , endDate : Long , limit : Int , clientData : ClientData ) : Future [ HandlerResult [ ResponseLoadHistory ] ] = { < nl > val authorizedAction = requireAuth ( clientData ) . map { implicit client ⇒ < nl > withOutPeer ( peer ) { < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / ReverseHooksListener . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / ReverseHooksListener . scala < nl > index dcb7b07 . . ed67d03 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / ReverseHooksListener . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / ReverseHooksListener . scala < nl > @ @ - 69 , 7 + 69 , 7 @ @ private [ messaging ] final class ReverseHooksListener ( mediator : ActorRef ) extends < nl > private def fetchGroups ( ) : Unit = { < nl > log . debug ( " Fetching groups to subscribe to reverse hooks " ) < nl > < nl > - for ( groupIds ← db . run ( persist . Group . allIds ) ) yield { < nl > + for ( groupIds ← db . run ( persist . Group . findAllIds ) ) yield { < nl > log . debug ( " Group ids to subscribe to reverse hooks { } " , groupIds ) < nl > self ! SubscribeGroups ( groupIds . toSet ) < nl > } < nl > diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > index 68368c5 . . 6e409e6 100644 < nl > - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > @ @ - 33 , 7 + 33 , 7 @ @ import im . actor . server . dialog . { DialogExtension , DialogProcessor } < nl > import im . actor . server . email . { EmailConfig , EmailSender } < nl > import im . actor . server . enrich . { RichMessageConfig , RichMessageWorker } < nl > import im . actor . server . group . _ < nl > - import im . actor . server . migrations . { GroupCreatorMemberMigrator , IntegrationTokenMigrator , LocalNamesMigrator } < nl > + import im . actor . server . migrations . { HiddenGroupMigrator , GroupCreatorMemberMigrator , IntegrationTokenMigrator , LocalNamesMigrator } < nl > import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } < nl > import im . actor . server . presences . { GroupPresenceExtension , PresenceExtension } < nl > import im . actor . server . sequence . _ < nl > @ @ - 89 , 6 + 89 , 7 @ @ object Main extends App { < nl > GroupMigrator . migrate ( ) < nl > LocalNamesMigrator . migrate ( ) < nl > GroupCreatorMemberMigrator . migrate ( ) < nl > + HiddenGroupMigrator . migrate ( ) < nl > < nl > val weakUpdatesExt = WeakUpdatesExtension ( system ) < nl > val presenceExt = PresenceExtension ( system ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ArchivedDialogsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ArchivedDialogsSpec . scala < nl > new file mode 100644 < nl > index 0000000 . . e69de29

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 index be400ee . . 3b7d1c5 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 @ @ - 463 , 22 + 463 , 34 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit 
 } 
 } 
 
 + object DialogGroupKeys { 
 + val Favourites = " favourites " 
 + val Direct = " privates " 
 + val Groups = " groups " 
 + } 
 + 
 + object DialogGroupTitles { 
 + val Favourites = " Favourites " 
 + val Direct = " Direct Messages " 
 + val Groups = " Groups " 
 + } 
 + 
 object DialogExtension extends ExtensionId [ DialogExtensionImpl ] with ExtensionIdProvider { 
 override def lookup = DialogExtension 
 
 override def createExtension ( system : ExtendedActorSystem ) = new DialogExtensionImpl ( system ) 
 
 def groupKey ( group : DialogGroupType ) = group match { 
 - case DialogGroupType . Favourites ⇒ " favourites " 
 - case DialogGroupType . DirectMessages ⇒ " privates " 
 - case DialogGroupType . Groups ⇒ " groups " 
 + case DialogGroupType . Favourites ⇒ DialogGroupKeys . Favourites 
 + case DialogGroupType . DirectMessages ⇒ DialogGroupKeys . Direct 
 + case DialogGroupType . Groups ⇒ DialogGroupKeys . Groups 
 case unknown ⇒ throw DialogErrors . UnknownDialogGroupType ( unknown ) 
 } 
 
 def groupTitle ( group : DialogGroupType ) = group match { 
 - case DialogGroupType . Favourites ⇒ " Favourites " 
 - case DialogGroupType . DirectMessages ⇒ " Direct Messages " 
 - case DialogGroupType . Groups ⇒ " Groups " 
 + case DialogGroupType . Favourites ⇒ DialogGroupTitles . Favourites 
 + case DialogGroupType . DirectMessages ⇒ DialogGroupTitles . Direct 
 + case DialogGroupType . Groups ⇒ DialogGroupTitles . Groups 
 case unknown ⇒ throw DialogErrors . UnknownDialogGroupType ( unknown ) 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 index e65030d . . e308b0f 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 @ @ - 107 , 6 + 107 , 7 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 import context . dispatcher 
 
 private val system = context . system 
 + private val seqUpdExt = SeqUpdatesExtension ( system ) 
 private val userExt = UserExtension ( system ) 
 private val groupExt = GroupExtension ( system ) 
 private val db = DbExtension ( system ) . db 
 @ @ - 218 , 7 + 219 , 7 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 commit ( e ) 
 ( for { 
 _ ← db . run ( HistoryMessageRepo . deleteAll ( userId , peer ) ) 
 - _ ← SeqUpdatesExtension ( system ) . deliverUserUpdate ( userId , UpdateChatDelete ( peer . asStruct ) ) 
 + _ ← seqUpdExt . deliverUserUpdate ( userId , UpdateChatDelete ( peer . asStruct ) ) 
 seqState ← sendChatGroupsChanged ( clientAuthId ) 
 / / _ = thatDialog ! PoisonPill / / kill that dialog would be good 
 } yield seqState ) pipeTo sender ( ) 
 @ @ - 273 , 8 + 274 , 13 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 for { 
 groups ← DialogExtension ( system ) . fetchApiGroupedDialogs ( userId ) 
 update = UpdateChatGroupsChanged ( groups ) 
 - seqState ← SeqUpdatesExtension ( system ) 
 - . deliverClientUpdate ( userId , authId , update , pushRules ) 
 + seqState ← seqUpdExt . deliverClientUpdate ( 
 + userId , 
 + authId , 
 + update , 
 + pushRules , 
 + deliveryId = s " dialogschanged _ $ { userId } " 
 + ) 
 } yield seqState 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DeliveryOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DeliveryOperations . scala 
 index 38c7c21 . . 04204cd 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DeliveryOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DeliveryOperations . scala 
 @ @ - 1 , 9 + 1 , 8 @ @ 
 package im . actor . server . sequence . operations 
 
 import com . google . protobuf . ByteString 
 - import com . google . protobuf . wrappers . StringValue 
 import im . actor . api . rpc . Update 
 - import im . actor . server . model . { Peer , SerializedUpdate , UpdateMapping } 
 + import im . actor . server . model . { SerializedUpdate , UpdateMapping } 
 import im . actor . server . sequence . UserSequenceCommands . { DeliverUpdate , Envelope } 
 import im . actor . server . sequence . { PushData , PushRules , SeqState , SeqUpdatesExtension } 
 import akka . pattern . ask 
 @ @ - 154 , 7 + 153 , 7 @ @ trait DeliveryOperations { this : SeqUpdatesExtension ⇒ 
 ( region . ref ? Envelope ( userId ) . withDeliverUpdate ( deliver ) ) . mapTo [ SeqState ] 
 } 
 
 - private def serializedUpdate ( u : Update ) : SerializedUpdate = 
 + protected def serializedUpdate ( u : Update ) : SerializedUpdate = 
 SerializedUpdate ( u . header , ByteString . copyFrom ( u . toByteArray ) , u . _ relatedUserIds , u . _ relatedGroupIds ) 
 
 private def buildDeliver ( 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala 
 index 430ab30 . . 51239ea 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala 
 @ @ - 1 , 7 + 1 , 10 @ @ 
 package im . actor . server . sequence . operations 
 
 import akka . http . scaladsl . util . FastFuture 
 + import im . actor . api . rpc . messaging . { ApiDialogGroup , ApiDialogShort , UpdateChatGroupsChanged , UpdateMessageReadByMe } 
 + import im . actor . api . rpc . peers . ApiPeer 
 import im . actor . api . rpc . sequence . UpdateEmptyUpdate 
 + import im . actor . server . dialog . { DialogGroupKeys , DialogGroupTitles } 
 import im . actor . server . model . { SeqUpdate , SerializedUpdate , UpdateMapping } 
 import im . actor . server . persist . sequence . UserSequenceRepo 
 import im . actor . server . sequence . { CommonState , Difference , SeqUpdatesExtension } 
 @ @ - 18 , 7 + 21 , 12 @ @ trait DifferenceOperations { this : SeqUpdatesExtension ⇒ 
 
 private type ReduceKey = String 
 private object DiffAcc { 
 - def empty ( commonSeq : Int ) = DiffAcc ( commonSeq , 0 , immutable . TreeMap . empty , Map . empty ) 
 + def empty ( commonSeq : Int ) = DiffAcc ( 
 + commonSeq = commonSeq , 
 + seqDelta = 0 , 
 + generic = immutable . TreeMap . empty , 
 + reduced = Map . empty 
 + ) 
 } 
 
 / * * 
 @ @ - 42 , 7 + 50 , 78 @ @ trait DifferenceOperations { this : SeqUpdatesExtension ⇒ 
 ) { 
 def nonEmpty = generic . nonEmpty | | reduced . nonEmpty 
 
 - def toVector = ( generic + + reduced . values ) . values . toVector 
 + private def rewriteDialogsCounter ( dialogs : IndexedSeq [ ApiDialogShort ] , upd : UpdateMessageReadByMe ) = 
 + dialogs map { dlg ⇒ 
 + if ( upd . peer = = dlg . peer ) { 
 + dlg . copy ( counter = upd . unreadCounter getOrElse 0 ) 
 + } else { 
 + dlg 
 + } 
 + } 
 + 
 + def toVector = { 
 + val originalUpdates = ( generic + + reduced . values ) . values . toVector 
 + 
 + / / If there is UpdateChatGroupsChanged in difference , 
 + / / we are writing up to date counters from UpdateMessageReadByMe 
 + / / for each peer we have in UpdateMessageReadByMe updates . 
 + / / After that , we update original difference 
 + val optLastChatsChanged : Option [ ( Int , UpdateChatGroupsChanged ) ] = 
 + originalUpdates . zipWithIndex . reverse find { 
 + case ( upd , i ) ⇒ 
 + upd . header = = UpdateChatGroupsChanged . header 
 + } flatMap { 
 + case ( upd , i ) ⇒ 
 + UpdateChatGroupsChanged . parseFrom ( upd . body ) . right . toOption map ( i → _ ) 
 + } 
 + 
 + optLastChatsChanged match { 
 + case None ⇒ originalUpdates 
 + case Some ( ( index , chatsChanged ) ) ⇒ 
 + def singleGroup ( groupKey : String ) = ( chatsChanged . dialogs collect { 
 + case group if group . key = = groupKey ⇒ group . dialogs 
 + } ) . flatten 
 + 
 + val ( groups , direct , favourites ) = ( originalUpdates foldLeft ( 
 + singleGroup ( DialogGroupKeys . Groups ) , 
 + singleGroup ( DialogGroupKeys . Direct ) , 
 + singleGroup ( DialogGroupKeys . Favourites ) 
 + ) ) { 
 + case ( acc @ ( gr , dir , fav ) , upd ) ⇒ 
 + if ( upd . header = = UpdateMessageReadByMe . header ) { 
 + UpdateMessageReadByMe . parseFrom ( upd . body ) . right . toOption map { upd ⇒ 
 + ( 
 + rewriteDialogsCounter ( gr , upd ) , 
 + rewriteDialogsCounter ( dir , upd ) , 
 + rewriteDialogsCounter ( fav , upd ) 
 + ) 
 + } getOrElse acc 
 + } else acc 
 + } 
 + 
 + val chatsChangedUpdated = 
 + chatsChanged . copy ( 
 + Vector ( 
 + ApiDialogGroup ( 
 + title = DialogGroupTitles . Groups , 
 + key = DialogGroupKeys . Groups , 
 + dialogs = groups 
 + ) , 
 + ApiDialogGroup ( 
 + title = DialogGroupTitles . Direct , 
 + key = DialogGroupKeys . Direct , 
 + dialogs = direct 
 + ) , 
 + ApiDialogGroup ( 
 + title = DialogGroupTitles . Favourites , 
 + key = DialogGroupKeys . Favourites , 
 + dialogs = favourites 
 + ) 
 + ) 
 + ) 
 + originalUpdates . updated ( index , serializedUpdate ( chatsChangedUpdated ) ) 
 + } 
 + } 
 } 
 
 def getDifference ( 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 index e5aeda7 . . 86bb7cc 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 @ @ - 93 , 9 + 93 , 6 @ @ object GroupRepo { 
 ) 
 } 
 
 - def findPublic = 
 - groups . filter ( _ . isPublic = = = true ) . map ( _ . asGroup ) . result 
 - 
 @ deprecated ( " Replace with some sort of key - value maybe ? " , " 2016 - 06 - 05 " ) 
 def findAllIds = allIds . result 
 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala 
 index 4c15592 . . 478e525 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala 
 @ @ - 161 , 6 + 161 , 7 @ @ final class SequenceServiceImpl ( config : SequenceServiceConfig ) ( 
 } 
 } 
 
 + / / TODO : add non deleted check too . 
 private def getNonChannelsIds ( groups : Seq [ ApiGroupOutPeer ] ) : Future [ Seq [ Int ] ] = { 
 FutureExt . ftraverse ( groups ) { 
 case ApiGroupOutPeer ( groupId , _ ) ⇒

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json 
 index 528e9b1 . . 57fd83d 100644 
 - - - a / actor - server / actor - core / src / main / actor - api / actor . json 
 + + + b / actor - server / actor - core / src / main / actor - api / actor . json 
 @ @ - 3100 , 6 + 3100 , 106 @ @ 
 } 
 } , 
 { 
 + " type " : " struct " , 
 + " content " : { 
 + " name " : " DialogShort " , 
 + " doc " : [ 
 + " Short Dialog from grouped conversation list " , 
 + { 
 + " type " : " reference " , 
 + " argument " : " peer " , 
 + " category " : " full " , 
 + " description " : " Peer of conversation " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " counter " , 
 + " category " : " full " , 
 + " description " : " Conversation unread count " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " date " , 
 + " category " : " full " , 
 + " description " : " Conversation top message date " 
 + } 
 + ] , 
 + " attributes " : [ 
 + { 
 + " type " : { 
 + " type " : " struct " , 
 + " childType " : " Peer " 
 + } , 
 + " id " : 1 , 
 + " name " : " peer " 
 + } , 
 + { 
 + " type " : " int32 " , 
 + " id " : 2 , 
 + " name " : " counter " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " alias " , 
 + " childType " : " date " 
 + } , 
 + " id " : 4 , 
 + " name " : " date " 
 + } 
 + ] 
 + } 
 + } , 
 + { 
 + " type " : " struct " , 
 + " content " : { 
 + " name " : " DialogGroup " , 
 + " doc " : [ 
 + " Grouped dialog list " , 
 + { 
 + " type " : " reference " , 
 + " argument " : " title " , 
 + " category " : " full " , 
 + " description " : " Title of group " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " key " , 
 + " category " : " full " , 
 + " description " : " Key of group " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " dialogs " , 
 + " category " : " full " , 
 + " description " : " Conversations in group " 
 + } 
 + ] , 
 + " attributes " : [ 
 + { 
 + " type " : " string " , 
 + " id " : 1 , 
 + " name " : " title " 
 + } , 
 + { 
 + " type " : " string " , 
 + " id " : 2 , 
 + " name " : " key " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " list " , 
 + " childType " : { 
 + " type " : " struct " , 
 + " childType " : " DialogShort " 
 + } 
 + } , 
 + " id " : 3 , 
 + " name " : " dialogs " 
 + } 
 + ] 
 + } 
 + } , 
 + { 
 " type " : " rpc " , 
 " content " : { 
 " name " : " SendMessage " , 
 @ @ - 3837 , 6 + 3937 , 87 @ @ 
 } 
 } , 
 { 
 + " type " : " update " , 
 + " content " : { 
 + " name " : " ChatArchived " , 
 + " header " : 65 , 
 + " doc " : [ 
 + " Update about chat archive " , 
 + { 
 + " type " : " reference " , 
 + " argument " : " peer " , 
 + " category " : " full " , 
 + " description " : " Destination peer " 
 + } 
 + ] , 
 + " attributes " : [ 
 + { 
 + " type " : { 
 + " type " : " struct " , 
 + " childType " : " Peer " 
 + } , 
 + " id " : 1 , 
 + " name " : " peer " 
 + } 
 + ] 
 + } 
 + } , 
 + { 
 + " type " : " update " , 
 + " content " : { 
 + " name " : " ChatRestored " , 
 + " header " : 66 , 
 + " doc " : [ 
 + " Update about chat restore " , 
 + { 
 + " type " : " reference " , 
 + " argument " : " peer " , 
 + " category " : " full " , 
 + " description " : " Destination peer " 
 + } 
 + ] , 
 + " attributes " : [ 
 + { 
 + " type " : { 
 + " type " : " struct " , 
 + " childType " : " Peer " 
 + } , 
 + " id " : 1 , 
 + " name " : " peer " 
 + } 
 + ] 
 + } 
 + } , 
 + { 
 + " type " : " update " , 
 + " content " : { 
 + " name " : " ChatGroupsChanged " , 
 + " header " : 1 , 
 + " doc " : [ 
 + " Update about chat groups changed . Called only when adding , removing and reordering of grouped dialog . " , 
 + { 
 + " type " : " reference " , 
 + " argument " : " dialogs " , 
 + " category " : " full " , 
 + " description " : " New dialgos list " 
 + } 
 + ] , 
 + " attributes " : [ 
 + { 
 + " type " : { 
 + " type " : " list " , 
 + " childType " : { 
 + " type " : " struct " , 
 + " childType " : " DialogGroup " 
 + } 
 + } , 
 + " id " : 1 , 
 + " name " : " dialogs " 
 + } 
 + ] 
 + } 
 + } , 
 + { 
 " type " : " enum " , 
 " content " : { 
 " name " : " MessageState " , 
 @ @ - 4235 , 6 + 4416 , 77 @ @ 
 } 
 ] 
 } 
 + } , 
 + { 
 + " type " : " rpc " , 
 + " content " : { 
 + " name " : " LoadGroupedDialogs " , 
 + " header " : 225 , 
 + " response " : { 
 + " type " : " anonymous " , 
 + " header " : 226 , 
 + " doc " : [ 
 + " Loaded grouped dialogs " , 
 + { 
 + " type " : " reference " , 
 + " argument " : " dialogs " , 
 + " category " : " compact " , 
 + " description " : " Loaded groups of dialogs " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " users " , 
 + " category " : " compact " , 
 + " description " : " Loaded users " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " groups " , 
 + " category " : " full " , 
 + " description " : " Loaded groups " 
 + } 
 + ] , 
 + " attributes " : [ 
 + { 
 + " type " : { 
 + " type " : " list " , 
 + " childType " : { 
 + " type " : " struct " , 
 + " childType " : " DialogGroup " 
 + } 
 + } , 
 + " id " : 1 , 
 + " name " : " dialogs " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " list " , 
 + " childType " : { 
 + " type " : " struct " , 
 + " childType " : " User " 
 + } 
 + } , 
 + " id " : 2 , 
 + " name " : " users " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " list " , 
 + " childType " : { 
 + " type " : " struct " , 
 + " childType " : " Group " 
 + } 
 + } , 
 + " id " : 3 , 
 + " name " : " groups " 
 + } 
 + ] 
 + } , 
 + " doc " : [ 
 + " Load all dialogs from grouped list " 
 + ] , 
 + " attributes " : [ ] 
 + } 
 } 
 ] 
 } , 
 @ @ - 9049 , 4 + 9301 , 4 @ @ 
 ] 
 } 
 ] 
 - } 
 \ No newline at end of file 
 + } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index 8ef1b65 . . 9ae6dbf 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 99 , 7 + 99 , 8 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 about = None , 
 topic = None 
 ) , 
 - randomId 
 + randomId , 
 + isHidden = false 
 ) 
 _ ← p . GroupUser . create ( groupId , creatorUserId , creatorUserId , date , None , isAdmin = true ) 
 _ ← HistoryUtils . writeHistoryMessage ( 
 @ @ - 459 , 6 + 460 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 about = None , 
 topic = None 
 ) , 
 - randomId 
 + randomId , 
 + state . isHidden 
 ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupMigrator . scala 
 index a11f0ff . . 0465035 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupMigrator . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupMigrator . scala 
 @ @ - 26 , 7 + 26 , 7 @ @ object GroupMigrator extends Migration { 
 protected override def migrationTimeout : Duration = 1 . hour 
 
 protected override def startMigration ( ) ( implicit system : ActorSystem , db : PostgresDriver . api . Database , ec : ExecutionContext ) : Future [ Unit ] = { 
 - db . run ( p . Group . allIds ) flatMap ( ids ⇒ Future . sequence ( ids map migrateSingle ) ) map ( _ ⇒ ( ) ) 
 + db . run ( p . Group . findAllIds ) flatMap ( ids ⇒ Future . sequence ( ids map migrateSingle ) ) map ( _ ⇒ ( ) ) 
 } 
 
 private def migrateSingle ( groupId : Int ) ( implicit system : ActorSystem , db : Database ) : Future [ Unit ] = { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala 
 index 3d0d02f . . d094d1e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala 
 @ @ - 19 , 7 + 19 , 7 @ @ object GroupCreatorMemberMigrator extends Migration { 
 protected override def migrationTimeout = 1 . hour 
 
 protected override def startMigration ( ) ( implicit system : ActorSystem , db : Database , ec : ExecutionContext ) : Future [ Unit ] = { 
 - db . run ( persist . Group . allIds ) flatMap { groupIds ⇒ 
 + db . run ( persist . Group . findAllIds ) flatMap { groupIds ⇒ 
 Future . sequence ( groupIds map { groupId ⇒ 
 val promise = Promise [ Unit ] ( ) 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala 
 new file mode 100644 
 index 0000000 . . 7cb8f39 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala 
 @ @ - 0 , 0 + 1 , 34 @ @ 
 + package im . actor . server . migrations 
 + 
 + import akka . actor . ActorSystem 
 + import im . actor . server . db . DbExtension 
 + import im . actor . server . group . GroupExtension 
 + import im . actor . server . persist 
 + import slick . driver . PostgresDriver 
 + 
 + import scala . concurrent . duration . _ 
 + import scala . concurrent . { ExecutionContext , Future } 
 + 
 + object HiddenGroupMigrator extends Migration { 
 + override protected def migrationName : String = " PutHiddenGroupsToSQL " 
 + 
 + override protected def migrationTimeout : Duration = 15 . minutes 
 + 
 + override protected def startMigration ( ) ( implicit system : ActorSystem , db : PostgresDriver . api . Database , ec : ExecutionContext ) : Future [ Unit ] = { 
 + for { 
 + ids ← db . run ( persist . Group . findAllIds ) 
 + _ ← Future . sequence ( ids map migrateGroup ) 
 + } yield ( ) 
 + } 
 + 
 + private def migrateGroup ( id : Int ) ( implicit system : ActorSystem , ec : ExecutionContext ) : Future [ Unit ] = { 
 + val db = DbExtension ( system ) . db 
 + val groupExt = GroupExtension ( system ) 
 + groupExt . getApiStruct ( id , 0 ) flatMap { group ⇒ 
 + if ( group . isHidden . contains ( true ) ) 
 + db . run ( persist . Group . makeHidden ( id ) ) map ( _ ⇒ ( ) ) 
 + else 
 + Future . successful ( ( ) ) 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala 
 index 75f123a . . 568b8ac 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala 
 @ @ - 26 , 7 + 26 , 7 @ @ object IntegrationTokenMigrator extends Migration { 
 ) : Future [ Unit ] = { 
 implicit val kv = ShardakkaExtension ( system ) . simpleKeyValue [ Int ] ( KeyValueMappings . IntegrationTokens , IntCodec ) 
 implicit val viewRegion = GroupExtension ( system ) . viewRegion 
 - db . run ( persist . Group . allIds ) flatMap { ids ⇒ 
 + db . run ( persist . Group . findAllIds ) flatMap { ids ⇒ 
 system . log . debug ( " Going to migrate integration tokens for groups : { } " , ids ) 
 Future . sequence ( ids map ( groupId ⇒ migrateSingle ( groupId ) recover { 
 case NoBotFound ⇒ 
 diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / Dialog . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / Dialog . scala 
 index c8ee944 . . b364e9b 100644 
 - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / Dialog . scala 
 + + + b / actor - server / actor - models / src / main / scala / im / actor / server / models / Dialog . scala 
 @ @ - 28 , 5 + 28 , 5 @ @ case class Dialog ( 
 lastReadAt : DateTime , 
 ownerLastReceivedAt : DateTime , 
 ownerLastReadAt : DateTime , 
 - isHidden : Boolean 
 + isArchived : Boolean 
 ) 
 diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / Group . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / Group . scala 
 index 19facf8 . . f103a9a 100644 
 - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / Group . scala 
 + + + b / actor - server / actor - models / src / main / scala / im / actor / server / models / Group . scala 
 @ @ - 41 , 5 + 41 , 6 @ @ case class FullGroup ( 
 titleChangeRandomId : Long , 
 avatarChangerUserId : Int , 
 avatarChangedAt : DateTime , 
 - avatarChangeRandomId : Long 
 + avatarChangeRandomId : Long , 
 + isHidden : Boolean 
 ) 
 diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20151014194156 _ _ AddIsHiddenToGroups . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20151014194156 _ _ AddIsHiddenToGroups . sql 
 new file mode 100644 
 index 0000000 . . 0d3ae91 
 - - - / dev / null 
 + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20151014194156 _ _ AddIsHiddenToGroups . sql 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + ALTER TABLE groups ADD COLUMN is _ hidden BOOLEAN DEFAULT FALSE ; 
 + ALTER TABLE dialogs DROP COLUMN is _ hidden ; 
 + ALTER TABLE dialogs ADD COLUMN is _ archived BOOLEAN DEFAULT FALSE ; 
 + CREATE INDEX idx _ groups _ id _ is _ hidden ON groups ( id , is _ hidden ) ; 
 + CREATE INDEX idx _ dialogs _ user _ id _ is _ archived ON dialogs ( user _ id , is _ archived ) ; 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala 
 index 93d56d8 . . ffa59dc 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala 
 @ @ - 10 , 6 + 10 , 8 @ @ import slick . profile . { SqlAction , FixedSqlStreamingAction , FixedSqlAction } 
 
 import im . actor . server . models 
 
 + import scala . util . matching . Regex . Groups 
 + 
 class DialogTable ( tag : Tag ) extends Table [ models . Dialog ] ( tag , " dialogs " ) { 
 
 def userId = column [ Int ] ( " user _ id " , O . PrimaryKey ) 
 @ @ - 28 , 12 + 30 , 12 @ @ class DialogTable ( tag : Tag ) extends Table [ models . Dialog ] ( tag , " dialogs " ) { 
 
 def ownerLastReadAt = column [ DateTime ] ( " owner _ last _ read _ at " ) 
 
 - def isHidden = column [ Boolean ] ( " is _ hidden " ) 
 + def isArchived = column [ Boolean ] ( " is _ archived " ) 
 
 - def * = ( userId , peerType , peerId , lastMessageDate , lastReceivedAt , lastReadAt , ownerLastReceivedAt , ownerLastReadAt , isHidden ) < > ( applyDialog . tupled , unapplyDialog ) 
 + def * = ( userId , peerType , peerId , lastMessageDate , lastReceivedAt , lastReadAt , ownerLastReceivedAt , ownerLastReadAt , isArchived ) < > ( applyDialog . tupled , unapplyDialog ) 
 
 def applyDialog : ( Int , Int , Int , DateTime , DateTime , DateTime , DateTime , DateTime , Boolean ) ⇒ models . Dialog = { 
 - case ( userId , peerType , peerId , lastMessageDate , lastReceivedAt , lastReadAt , ownerLastReceivedAt , ownerLastReadAt , isHidden ) ⇒ 
 + case ( userId , peerType , peerId , lastMessageDate , lastReceivedAt , lastReadAt , ownerLastReceivedAt , ownerLastReadAt , isArchived ) ⇒ 
 models . Dialog ( 
 userId = userId , 
 peer = models . Peer ( models . PeerType . fromInt ( peerType ) , peerId ) , 
 @ @ - 42 , 14 + 44 , 14 @ @ class DialogTable ( tag : Tag ) extends Table [ models . Dialog ] ( tag , " dialogs " ) { 
 lastReadAt = lastReadAt , 
 ownerLastReceivedAt = ownerLastReceivedAt , 
 ownerLastReadAt = ownerLastReadAt , 
 - isHidden = isHidden 
 + isArchived = isArchived 
 ) 
 } 
 
 def unapplyDialog : models . Dialog ⇒ Option [ ( Int , Int , Int , DateTime , DateTime , DateTime , DateTime , DateTime , Boolean ) ] = { dialog ⇒ 
 models . Dialog . unapply ( dialog ) . map { 
 - case ( userId , peer , lastMessageDate , lastReceivedAt , lastReadAt , ownerLastReceivedAt , ownerLastReadAt , isHidden ) ⇒ 
 - ( userId , peer . typ . toInt , peer . id , lastMessageDate , lastReceivedAt , lastReadAt , ownerLastReceivedAt , ownerLastReadAt , isHidden ) 
 + case ( userId , peer , lastMessageDate , lastReceivedAt , lastReadAt , ownerLastReceivedAt , ownerLastReadAt , isArchived ) ⇒ 
 + ( userId , peer . typ . toInt , peer . id , lastMessageDate , lastReceivedAt , lastReadAt , ownerLastReceivedAt , ownerLastReadAt , isArchived ) 
 } 
 } 
 } 
 @ @ - 77 , 6 + 79 , 10 @ @ object Dialog { 
 val byPeerTypeC = Compiled ( byPeerType _ ) 
 val idByPeerTypeC = Compiled ( idByPeerType _ ) 
 
 + val notHiddenDialogs = Dialog . dialogs joinLeft Group . groups on ( _ . peerId = = = _ . id ) filter { 
 + case ( dialog , groupOpt ) ⇒ dialog . isArchived = = = false & & ( groupOpt . map ( ! _ . isHidden ) . getOrElse ( true ) ) 
 + } map ( _ . _ 1 ) 
 + 
 def create ( dialog : models . Dialog ) = 
 dialogs + = dialog 
 
 @ @ - 102 , 9 + 108 , 9 @ @ object Dialog { 
 def findLastReadBefore ( date : DateTime , userId : Int ) = 
 dialogs . filter ( d ⇒ d . userId = = = userId & & d . ownerLastReadAt < date ) . result 
 
 - def findNotHiddenByUser ( userId : Int , dateOpt : Option [ DateTime ] , limit : Int ) ( implicit ec : ExecutionContext ) = { 
 - val baseQuery = dialogs 
 - . filter ( d ⇒ d . userId = = = userId & & d . isHidden = = = false ) 
 + def findNotArchivedByUser ( userId : Int , dateOpt : Option [ DateTime ] , limit : Int ) ( implicit ec : ExecutionContext ) = { 
 + val baseQuery = notHiddenDialogs 
 + . filter ( d ⇒ d . userId = = = userId ) 
 . sortBy ( _ . lastMessageDate . desc ) 
 
 val limitedQuery = dateOpt match { 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 index 198249c . . 68d5113 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 @ @ - 35 , 6 + 35 , 8 @ @ class FullGroupTable ( tag : Tag ) extends Table [ models . FullGroup ] ( tag , " groups " ) { 
 
 def avatarChangeRandomId = column [ Long ] ( " avatar _ change _ random _ id " ) 
 
 + def isHidden = column [ Boolean ] ( " is _ hidden " ) 
 + 
 def * = 
 ( 
 id , 
 @ @ - 50 , 7 + 52 , 8 @ @ class FullGroupTable ( tag : Tag ) extends Table [ models . FullGroup ] ( tag , " groups " ) { 
 titleChangeRandomId , 
 avatarChangerUserId , 
 avatarChangedAt , 
 - avatarChangeRandomId 
 + avatarChangeRandomId , 
 + isHidden 
 ) < > ( models . FullGroup . tupled , models . FullGroup . unapply ) 
 
 def asGroup = ( id , creatorUserId , accessHash , title , isPublic , createdAt , about , topic ) < > ( ( models . Group . apply _ ) . tupled , models . Group . unapply ) 
 @ @ - 68 , 9 + 71 , 9 @ @ object Group { 
 val groupByIdC = Compiled ( groupById _ ) 
 val titleByIdC = Compiled ( titleById _ ) 
 
 - val allIds = groups . map ( _ . id ) . result 
 + val allIds = groups . map ( _ . id ) 
 
 - def create ( group : models . Group , randomId : Long ) = { 
 + def create ( group : models . Group , randomId : Long , isHidden : Boolean ) = { 
 groups + = models . FullGroup ( 
 id = group . id , 
 creatorUserId = group . creatorUserId , 
 @ @ - 85 , 13 + 88 , 16 @ @ object Group { 
 titleChangeRandomId = randomId , 
 avatarChangerUserId = group . creatorUserId , 
 avatarChangedAt = group . createdAt , 
 - avatarChangeRandomId = randomId 
 + avatarChangeRandomId = randomId , 
 + isHidden = isHidden 
 ) 
 } 
 
 def findPublic = 
 groups . filter ( _ . isPublic = = = true ) . map ( _ . asGroup ) . result 
 
 + def findAllIds = allIds . result 
 + 
 def find ( id : Int ) = 
 groupByIdC ( id ) . result . headOption 
 
 @ @ - 113 , 4 + 119 , 6 @ @ object Group { 
 byIdC . applied ( id ) . map ( _ . about ) . update ( about ) 
 
 def makePublic ( id : Int ) = byIdC . applied ( id ) . map ( _ . isPublic ) . update ( true ) 
 + 
 + def makeHidden ( id : Int ) = byIdC . applied ( id ) . map ( _ . isHidden ) . update ( true ) 
 } 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessage . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessage . scala 
 index 20ba862 . . b9c75e6 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessage . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessage . scala 
 @ @ - 120 , 7 + 120 , 7 @ @ object HistoryMessage { 
 / / в о з м о ж н о т у т н е у ч и т ы в а ю т с я 
 private def unreadTotal ( userId : Rep [ Int ] ) = 
 ( for { 
 - d ← Dialog . dialogs . filter ( d ⇒ d . userId = = = userId & & d . isHidden = = = false ) 
 + d ← Dialog . notHiddenDialogs . filter ( _ . userId = = = userId ) 
 m ← notDeletedMessages . filter ( _ . senderUserId = ! = userId ) 
 if m . userId = = = d . userId & & m . peerType = = = d . peerType & & m . peerId = = = d . peerId & & m . date > d . ownerLastReadAt 
 } yield m . date ) . length 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 index 9099c1b . . 4c62416 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 @ @ - 78 , 7 + 78 , 7 @ @ trait HistoryHandlers { 
 
 override def jhandleLoadDialogs ( endDate : Long , limit : Int , clientData : ClientData ) : Future [ HandlerResult [ ResponseLoadDialogs ] ] = { 
 val authorizedAction = requireAuth ( clientData ) . map { implicit client ⇒ 
 - persist . Dialog . findNotHiddenByUser ( client . userId , endDateTimeFrom ( endDate ) , limit ) flatMap { dialogModels ⇒ 
 + persist . Dialog . findNotArchivedByUser ( client . userId , endDateTimeFrom ( endDate ) , limit ) flatMap { dialogModels ⇒ 
 for { 
 dialogs ← DBIO . sequence ( dialogModels map getDialogStruct ) 
 ( users , groups ) ← getDialogsUsersGroups ( dialogs ) 
 @ @ - 95 , 6 + 95 , 14 @ @ trait HistoryHandlers { 
 db . run ( toDBIOAction ( authorizedAction ) ) 
 } 
 
 + override def jhandleLoadGroupedDialogs ( clientData : ClientData ) : Future [ HandlerResult [ ResponseLoadGroupedDialogs ] ] = { 
 + val authorizedAction = requireAuth ( clientData ) map { implicit client ⇒ 
 + throw new RuntimeException ( " Not implemented yet " ) 
 + } 
 + 
 + db . run ( toDBIOAction ( authorizedAction ) ) 
 + } 
 + 
 override def jhandleLoadHistory ( peer : ApiOutPeer , endDate : Long , limit : Int , clientData : ClientData ) : Future [ HandlerResult [ ResponseLoadHistory ] ] = { 
 val authorizedAction = requireAuth ( clientData ) . map { implicit client ⇒ 
 withOutPeer ( peer ) { 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / ReverseHooksListener . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / ReverseHooksListener . scala 
 index dcb7b07 . . ed67d03 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / ReverseHooksListener . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / ReverseHooksListener . scala 
 @ @ - 69 , 7 + 69 , 7 @ @ private [ messaging ] final class ReverseHooksListener ( mediator : ActorRef ) extends 
 private def fetchGroups ( ) : Unit = { 
 log . debug ( " Fetching groups to subscribe to reverse hooks " ) 
 
 - for ( groupIds ← db . run ( persist . Group . allIds ) ) yield { 
 + for ( groupIds ← db . run ( persist . Group . findAllIds ) ) yield { 
 log . debug ( " Group ids to subscribe to reverse hooks { } " , groupIds ) 
 self ! SubscribeGroups ( groupIds . toSet ) 
 } 
 diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 index 68368c5 . . 6e409e6 100644 
 - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 @ @ - 33 , 7 + 33 , 7 @ @ import im . actor . server . dialog . { DialogExtension , DialogProcessor } 
 import im . actor . server . email . { EmailConfig , EmailSender } 
 import im . actor . server . enrich . { RichMessageConfig , RichMessageWorker } 
 import im . actor . server . group . _ 
 - import im . actor . server . migrations . { GroupCreatorMemberMigrator , IntegrationTokenMigrator , LocalNamesMigrator } 
 + import im . actor . server . migrations . { HiddenGroupMigrator , GroupCreatorMemberMigrator , IntegrationTokenMigrator , LocalNamesMigrator } 
 import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } 
 import im . actor . server . presences . { GroupPresenceExtension , PresenceExtension } 
 import im . actor . server . sequence . _ 
 @ @ - 89 , 6 + 89 , 7 @ @ object Main extends App { 
 GroupMigrator . migrate ( ) 
 LocalNamesMigrator . migrate ( ) 
 GroupCreatorMemberMigrator . migrate ( ) 
 + HiddenGroupMigrator . migrate ( ) 
 
 val weakUpdatesExt = WeakUpdatesExtension ( system ) 
 val presenceExt = PresenceExtension ( system ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ArchivedDialogsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ArchivedDialogsSpec . scala 
 new file mode 100644 
 index 0000000 . . e69de29
