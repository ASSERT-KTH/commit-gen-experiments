BLEU SCORE: 0.05108099332943181

TEST MSG: fix ( iOS ) : Fixing preferences storage saving nulls as bytes , fixing cocoa random provider support
GENERATED MSG: feat ( sdk ) : New methods in storage engines

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / UDPreferencesStorage . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / UDPreferencesStorage . swift < nl > index c96c511 . . 5414174 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / UDPreferencesStorage . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / UDPreferencesStorage . swift < nl > @ @ - 62 , 7 + 62 , 11 @ @ import Foundation < nl > } < nl > < nl > func putBytesWithKey ( key : String ! , withValue v : IOSByteArray ! ) { < nl > - prefs . setObject ( v . toNSData ( ) , forKey : key ) < nl > + if ( v = = nil ) { < nl > + prefs . removeObjectForKey ( key ) < nl > + } else { < nl > + prefs . setObject ( v . toNSData ( ) , forKey : key ) < nl > + } < nl > prefs . synchronize ( ) < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / RandomRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / RandomRuntimeProvider . java < nl > index 5a833ce . . 15d894a 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / RandomRuntimeProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / RandomRuntimeProvider . java < nl > @ @ - 1 , 33 + 1 , 7 @ @ < nl > package im . actor . runtime ; < nl > < nl > - import java . math . BigInteger ; < nl > + import im . actor . runtime . cocoa . CocoaRandomProvider ; < nl > < nl > - / * * < nl > - * Created by ex3ndr on 07 . 08 . 15 . < nl > - * / < nl > - public class RandomRuntimeProvider implements RandomRuntime { < nl > - @ Override < nl > - public byte [ ] randomBytes ( int length ) { < nl > - throw new RuntimeException ( " Dumb " ) ; < nl > - } < nl > + public class RandomRuntimeProvider extends CocoaRandomProvider { < nl > < nl > - @ Override < nl > - public int randomInt ( int maxValue ) { < nl > - throw new RuntimeException ( " Dumb " ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void nextBytes ( byte [ ] data ) { < nl > - throw new RuntimeException ( " Dumb " ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public BigInteger generateBigInteger ( int numBits ) { < nl > - throw new RuntimeException ( " Dumb " ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public BigInteger generateBigInteger ( int numBits , int certanity ) { < nl > - throw new RuntimeException ( " Dumb " ) ; < nl > - } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaRandomProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaRandomProvider . java < nl > new file mode 100644 < nl > index 0000000 . . 28b4f72 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaRandomProvider . java < nl > @ @ - 0 , 0 + 1 , 38 @ @ < nl > + package im . actor . runtime . cocoa ; < nl > + < nl > + import java . math . BigInteger ; < nl > + import java . security . SecureRandom ; < nl > + < nl > + import im . actor . runtime . crypto . bouncycastle . RandomProvider ; < nl > + < nl > + public class CocoaRandomProvider implements RandomProvider { < nl > + < nl > + private SecureRandom secureRandom = new SecureRandom ( ) ; < nl > + < nl > + @ Override < nl > + public synchronized byte [ ] randomBytes ( int length ) { < nl > + byte [ ] res = new byte [ length ] ; < nl > + secureRandom . nextBytes ( res ) ; < nl > + return res ; < nl > + } < nl > + < nl > + @ Override < nl > + public synchronized int randomInt ( int maxValue ) { < nl > + return secureRandom . nextInt ( maxValue ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public synchronized void nextBytes ( byte [ ] data ) { < nl > + secureRandom . nextBytes ( data ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public synchronized BigInteger generateBigInteger ( int numBits ) { < nl > + throw new RuntimeException ( " Not supported " ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public synchronized BigInteger generateBigInteger ( int numBits , int certanity ) { < nl > + throw new RuntimeException ( " Not supported " ) ; < nl > + } < nl > + }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java < nl > index 4603abc . . 19fdb7f 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java < nl > @ @ - 158 , 7 + 158 , 7 @ @ public class MVVMCollection < T extends BserObject & KeyValueItem , V extends BaseV < nl > return cache . get ( id ) ; < nl > } < nl > < nl > - byte [ ] data = collectionStorage . getValue ( id ) ; < nl > + byte [ ] data = collectionStorage . loadItem ( id ) ; < nl > < nl > if ( data ! = null ) { < nl > try { < nl > diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java < nl > index 3efd294 . . 4bf8fb8 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java < nl > @ @ - 9 , 21 + 9 , 69 @ @ import com . google . j2objc . annotations . ObjectiveCName ; < nl > import java . util . List ; < nl > < nl > public interface KeyValueStorage { < nl > + < nl > + / * * < nl > + * Adding new or replacing old record < nl > + * < nl > + * @ param key record key < nl > + * @ param data record raw data < nl > + * / < nl > @ ObjectiveCName ( " addOrUpdateItemWithKey : withData : " ) < nl > void addOrUpdateItem ( long key , byte [ ] data ) ; < nl > < nl > + / * * < nl > + * Adding new or replacing old records < nl > + * < nl > + * @ param values records < nl > + * / < nl > @ ObjectiveCName ( " addOrUpdateItems : " ) < nl > void addOrUpdateItems ( List < KeyValueRecord > values ) ; < nl > < nl > + / * * < nl > + * Removing record by key < nl > + * < nl > + * @ param key record key < nl > + * / < nl > @ ObjectiveCName ( " removeItemWithKey : " ) < nl > void removeItem ( long key ) ; < nl > < nl > + / * * < nl > + * Removing records by keys < nl > + * < nl > + * @ param keys record keys < nl > + * / < nl > @ ObjectiveCName ( " removeItemsWithKeys : " ) < nl > void removeItems ( long [ ] keys ) ; < nl > < nl > + / * * < nl > + * Loading item by key < nl > + * < nl > + * @ param key record key < nl > + * @ return result or null if not found < nl > + * / < nl > + @ ObjectiveCName ( " loadItemWithKey : " ) < nl > + byte [ ] loadItem ( long key ) ; < nl > + < nl > + / * * < nl > + * Loading items by keys < nl > + * < nl > + * @ param keys record keys < nl > + * @ return all loaded items < nl > + * / < nl > + @ ObjectiveCName ( " loadItems : " ) < nl > + List < KeyValueRecord > loadItems ( long [ ] keys ) ; < nl > + < nl > + / * * < nl > + * Loading all items from storage < nl > + * < nl > + * @ return all items < nl > + * / < nl > + @ ObjectiveCName ( " loadAllItems " ) < nl > + List < KeyValueRecord > loadAllItems ( ) ; < nl > + < nl > + / * * < nl > + * Clearing storage < nl > + * / < nl > @ ObjectiveCName ( " clear " ) < nl > void clear ( ) ; < nl > - < nl > - @ ObjectiveCName ( " getValueWithKey : " ) < nl > - byte [ ] getValue ( long key ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java < nl > index dff9c2b . . 19d8315 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java < nl > @ @ - 32 , 6 + 32 , 9 @ @ public interface ListStorage { < nl > @ ObjectiveCName ( " loadItemWithKey : " ) < nl > ListEngineRecord loadItem ( long key ) ; < nl > < nl > + @ ObjectiveCName ( " loadAllItems " ) < nl > + List < ListEngineRecord > loadAllItems ( ) ; < nl > + < nl > @ ObjectiveCName ( " isEmpty " ) < nl > boolean isEmpty ( ) ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java < nl > index 0081db1 . . a54f1ec 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java < nl > @ @ - 21 , 6 + 21 , 6 @ @ public class SyncKeyValue { < nl > } < nl > < nl > public synchronized byte [ ] get ( long key ) { < nl > - return storage . getValue ( key ) ; < nl > + return storage . loadItem ( key ) ; < nl > } < nl > - } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java < nl > index 05b4ca8 . . 5e9f694 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java < nl > @ @ - 1 , 5 + 1 , 6 @ @ < nl > package im . actor . runtime . storage . memory ; < nl > < nl > + import java . util . ArrayList ; < nl > import java . util . HashMap ; < nl > import java . util . List ; < nl > < nl > @ @ - 35 , 12 + 36 , 33 @ @ public class MemoryKeyValueStorage implements KeyValueStorage { < nl > } < nl > < nl > @ Override < nl > - public void clear ( ) { < nl > - records . clear ( ) ; < nl > + public byte [ ] loadItem ( long key ) { < nl > + return records . get ( key ) ; < nl > } < nl > < nl > @ Override < nl > - public byte [ ] getValue ( long key ) { < nl > - return records . get ( key ) ; < nl > + public List < KeyValueRecord > loadItems ( long [ ] keys ) { < nl > + ArrayList < KeyValueRecord > res = new ArrayList < KeyValueRecord > ( ) ; < nl > + for ( long id : keys ) { < nl > + byte [ ] data = loadItem ( id ) ; < nl > + if ( data ! = null ) { < nl > + res . add ( new KeyValueRecord ( id , data ) ) ; < nl > + } < nl > + } < nl > + return res ; < nl > + } < nl > + < nl > + @ Override < nl > + public List < KeyValueRecord > loadAllItems ( ) { < nl > + ArrayList < KeyValueRecord > res = new ArrayList < KeyValueRecord > ( ) ; < nl > + for ( long id : records . keySet ( ) ) { < nl > + res . add ( new KeyValueRecord ( id , records . get ( id ) ) ) ; < nl > + } < nl > + return res ; < nl > + } < nl > + < nl > + @ Override < nl > + public void clear ( ) { < nl > + records . clear ( ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java < nl > index b3455d6 . . 188f5c0 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java < nl > @ @ - 1 , 14 + 1 , 12 @ @ < nl > package im . actor . runtime . storage . memory ; < nl > < nl > + import java . util . ArrayList ; < nl > import java . util . HashMap ; < nl > import java . util . List ; < nl > < nl > import im . actor . runtime . storage . ListEngineRecord ; < nl > import im . actor . runtime . storage . ListStorage ; < nl > < nl > - / * * < nl > - * Created by ex3ndr on 28 . 07 . 15 . < nl > - * / < nl > public class MemoryListStorage implements ListStorage { < nl > < nl > private HashMap < Long , Record > records = new HashMap < Long , Record > ( ) ; < nl > @ @ - 54 , 6 + 52 , 16 @ @ public class MemoryListStorage implements ListStorage { < nl > } < nl > < nl > @ Override < nl > + public List < ListEngineRecord > loadAllItems ( ) { < nl > + ArrayList < ListEngineRecord > res = new ArrayList < ListEngineRecord > ( ) ; < nl > + for ( long id : records . keySet ( ) ) { < nl > + Record record = records . get ( id ) ; < nl > + res . add ( new ListEngineRecord ( id , record . getOrder ( ) , record . getQuery ( ) , record . getData ( ) ) ) ; < nl > + } < nl > + return res ; < nl > + } < nl > + < nl > + @ Override < nl > public boolean isEmpty ( ) { < nl > return getCount ( ) = = 0 ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / UDPreferencesStorage . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / UDPreferencesStorage . swift 
 index c96c511 . . 5414174 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / UDPreferencesStorage . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / UDPreferencesStorage . swift 
 @ @ - 62 , 7 + 62 , 11 @ @ import Foundation 
 } 
 
 func putBytesWithKey ( key : String ! , withValue v : IOSByteArray ! ) { 
 - prefs . setObject ( v . toNSData ( ) , forKey : key ) 
 + if ( v = = nil ) { 
 + prefs . removeObjectForKey ( key ) 
 + } else { 
 + prefs . setObject ( v . toNSData ( ) , forKey : key ) 
 + } 
 prefs . synchronize ( ) 
 } 
 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / RandomRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / RandomRuntimeProvider . java 
 index 5a833ce . . 15d894a 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / RandomRuntimeProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / RandomRuntimeProvider . java 
 @ @ - 1 , 33 + 1 , 7 @ @ 
 package im . actor . runtime ; 
 
 - import java . math . BigInteger ; 
 + import im . actor . runtime . cocoa . CocoaRandomProvider ; 
 
 - / * * 
 - * Created by ex3ndr on 07 . 08 . 15 . 
 - * / 
 - public class RandomRuntimeProvider implements RandomRuntime { 
 - @ Override 
 - public byte [ ] randomBytes ( int length ) { 
 - throw new RuntimeException ( " Dumb " ) ; 
 - } 
 + public class RandomRuntimeProvider extends CocoaRandomProvider { 
 
 - @ Override 
 - public int randomInt ( int maxValue ) { 
 - throw new RuntimeException ( " Dumb " ) ; 
 - } 
 - 
 - @ Override 
 - public void nextBytes ( byte [ ] data ) { 
 - throw new RuntimeException ( " Dumb " ) ; 
 - } 
 - 
 - @ Override 
 - public BigInteger generateBigInteger ( int numBits ) { 
 - throw new RuntimeException ( " Dumb " ) ; 
 - } 
 - 
 - @ Override 
 - public BigInteger generateBigInteger ( int numBits , int certanity ) { 
 - throw new RuntimeException ( " Dumb " ) ; 
 - } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaRandomProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaRandomProvider . java 
 new file mode 100644 
 index 0000000 . . 28b4f72 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaRandomProvider . java 
 @ @ - 0 , 0 + 1 , 38 @ @ 
 + package im . actor . runtime . cocoa ; 
 + 
 + import java . math . BigInteger ; 
 + import java . security . SecureRandom ; 
 + 
 + import im . actor . runtime . crypto . bouncycastle . RandomProvider ; 
 + 
 + public class CocoaRandomProvider implements RandomProvider { 
 + 
 + private SecureRandom secureRandom = new SecureRandom ( ) ; 
 + 
 + @ Override 
 + public synchronized byte [ ] randomBytes ( int length ) { 
 + byte [ ] res = new byte [ length ] ; 
 + secureRandom . nextBytes ( res ) ; 
 + return res ; 
 + } 
 + 
 + @ Override 
 + public synchronized int randomInt ( int maxValue ) { 
 + return secureRandom . nextInt ( maxValue ) ; 
 + } 
 + 
 + @ Override 
 + public synchronized void nextBytes ( byte [ ] data ) { 
 + secureRandom . nextBytes ( data ) ; 
 + } 
 + 
 + @ Override 
 + public synchronized BigInteger generateBigInteger ( int numBits ) { 
 + throw new RuntimeException ( " Not supported " ) ; 
 + } 
 + 
 + @ Override 
 + public synchronized BigInteger generateBigInteger ( int numBits , int certanity ) { 
 + throw new RuntimeException ( " Not supported " ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java 
 index 4603abc . . 19fdb7f 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java 
 @ @ - 158 , 7 + 158 , 7 @ @ public class MVVMCollection < T extends BserObject & KeyValueItem , V extends BaseV 
 return cache . get ( id ) ; 
 } 
 
 - byte [ ] data = collectionStorage . getValue ( id ) ; 
 + byte [ ] data = collectionStorage . loadItem ( id ) ; 
 
 if ( data ! = null ) { 
 try { 
 diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java 
 index 3efd294 . . 4bf8fb8 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java 
 @ @ - 9 , 21 + 9 , 69 @ @ import com . google . j2objc . annotations . ObjectiveCName ; 
 import java . util . List ; 
 
 public interface KeyValueStorage { 
 + 
 + / * * 
 + * Adding new or replacing old record 
 + * 
 + * @ param key record key 
 + * @ param data record raw data 
 + * / 
 @ ObjectiveCName ( " addOrUpdateItemWithKey : withData : " ) 
 void addOrUpdateItem ( long key , byte [ ] data ) ; 
 
 + / * * 
 + * Adding new or replacing old records 
 + * 
 + * @ param values records 
 + * / 
 @ ObjectiveCName ( " addOrUpdateItems : " ) 
 void addOrUpdateItems ( List < KeyValueRecord > values ) ; 
 
 + / * * 
 + * Removing record by key 
 + * 
 + * @ param key record key 
 + * / 
 @ ObjectiveCName ( " removeItemWithKey : " ) 
 void removeItem ( long key ) ; 
 
 + / * * 
 + * Removing records by keys 
 + * 
 + * @ param keys record keys 
 + * / 
 @ ObjectiveCName ( " removeItemsWithKeys : " ) 
 void removeItems ( long [ ] keys ) ; 
 
 + / * * 
 + * Loading item by key 
 + * 
 + * @ param key record key 
 + * @ return result or null if not found 
 + * / 
 + @ ObjectiveCName ( " loadItemWithKey : " ) 
 + byte [ ] loadItem ( long key ) ; 
 + 
 + / * * 
 + * Loading items by keys 
 + * 
 + * @ param keys record keys 
 + * @ return all loaded items 
 + * / 
 + @ ObjectiveCName ( " loadItems : " ) 
 + List < KeyValueRecord > loadItems ( long [ ] keys ) ; 
 + 
 + / * * 
 + * Loading all items from storage 
 + * 
 + * @ return all items 
 + * / 
 + @ ObjectiveCName ( " loadAllItems " ) 
 + List < KeyValueRecord > loadAllItems ( ) ; 
 + 
 + / * * 
 + * Clearing storage 
 + * / 
 @ ObjectiveCName ( " clear " ) 
 void clear ( ) ; 
 - 
 - @ ObjectiveCName ( " getValueWithKey : " ) 
 - byte [ ] getValue ( long key ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java 
 index dff9c2b . . 19d8315 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java 
 @ @ - 32 , 6 + 32 , 9 @ @ public interface ListStorage { 
 @ ObjectiveCName ( " loadItemWithKey : " ) 
 ListEngineRecord loadItem ( long key ) ; 
 
 + @ ObjectiveCName ( " loadAllItems " ) 
 + List < ListEngineRecord > loadAllItems ( ) ; 
 + 
 @ ObjectiveCName ( " isEmpty " ) 
 boolean isEmpty ( ) ; 
 
 diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java 
 index 0081db1 . . a54f1ec 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java 
 @ @ - 21 , 6 + 21 , 6 @ @ public class SyncKeyValue { 
 } 
 
 public synchronized byte [ ] get ( long key ) { 
 - return storage . getValue ( key ) ; 
 + return storage . loadItem ( key ) ; 
 } 
 - } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java 
 index 05b4ca8 . . 5e9f694 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package im . actor . runtime . storage . memory ; 
 
 + import java . util . ArrayList ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 
 @ @ - 35 , 12 + 36 , 33 @ @ public class MemoryKeyValueStorage implements KeyValueStorage { 
 } 
 
 @ Override 
 - public void clear ( ) { 
 - records . clear ( ) ; 
 + public byte [ ] loadItem ( long key ) { 
 + return records . get ( key ) ; 
 } 
 
 @ Override 
 - public byte [ ] getValue ( long key ) { 
 - return records . get ( key ) ; 
 + public List < KeyValueRecord > loadItems ( long [ ] keys ) { 
 + ArrayList < KeyValueRecord > res = new ArrayList < KeyValueRecord > ( ) ; 
 + for ( long id : keys ) { 
 + byte [ ] data = loadItem ( id ) ; 
 + if ( data ! = null ) { 
 + res . add ( new KeyValueRecord ( id , data ) ) ; 
 + } 
 + } 
 + return res ; 
 + } 
 + 
 + @ Override 
 + public List < KeyValueRecord > loadAllItems ( ) { 
 + ArrayList < KeyValueRecord > res = new ArrayList < KeyValueRecord > ( ) ; 
 + for ( long id : records . keySet ( ) ) { 
 + res . add ( new KeyValueRecord ( id , records . get ( id ) ) ) ; 
 + } 
 + return res ; 
 + } 
 + 
 + @ Override 
 + public void clear ( ) { 
 + records . clear ( ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java 
 index b3455d6 . . 188f5c0 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java 
 @ @ - 1 , 14 + 1 , 12 @ @ 
 package im . actor . runtime . storage . memory ; 
 
 + import java . util . ArrayList ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 
 import im . actor . runtime . storage . ListEngineRecord ; 
 import im . actor . runtime . storage . ListStorage ; 
 
 - / * * 
 - * Created by ex3ndr on 28 . 07 . 15 . 
 - * / 
 public class MemoryListStorage implements ListStorage { 
 
 private HashMap < Long , Record > records = new HashMap < Long , Record > ( ) ; 
 @ @ - 54 , 6 + 52 , 16 @ @ public class MemoryListStorage implements ListStorage { 
 } 
 
 @ Override 
 + public List < ListEngineRecord > loadAllItems ( ) { 
 + ArrayList < ListEngineRecord > res = new ArrayList < ListEngineRecord > ( ) ; 
 + for ( long id : records . keySet ( ) ) { 
 + Record record = records . get ( id ) ; 
 + res . add ( new ListEngineRecord ( id , record . getOrder ( ) , record . getQuery ( ) , record . getData ( ) ) ) ; 
 + } 
 + return res ; 
 + } 
 + 
 + @ Override 
 public boolean isEmpty ( ) { 
 return getCount ( ) = = 0 ; 
 }
