BLEU SCORE: 0.2984745896009823

TEST MSG: refactor ( server ) : use FastFuture where possible
GENERATED MSG: fix ( server ) : fixed cluster issues

TEST DIFF (one line): diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationContext . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationContext . scala < nl > index 33c84e4 . . 3bff2da 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationContext . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationContext . scala < nl > @ @ - 101 , 5 + 101 , 5 @ @ final class ActivationContext ( implicit system : ActorSystem ) extends CodeGen { < nl > } < nl > < nl > private def tryCleanup ( optProvider : Option [ ActivationProvider ] , txHash : String ) : Future [ Unit ] = < nl > - optProvider map ( _ . cleanup ( txHash ) ) getOrElse Future . successful ( ( ) ) < nl > + optProvider map ( _ . cleanup ( txHash ) ) getOrElse FastFuture . successful ( ( ) ) < nl > } < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala < nl > index d84759f . . 061e52c 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > package im . actor . server . activation . internal < nl > < nl > import akka . actor . ActorSystem < nl > + import akka . http . scaladsl . util . FastFuture < nl > import cats . data . { Xor , XorT } < nl > import im . actor . api . rpc . messaging . ApiTextMessage < nl > import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } < nl > @ @ - 37 , 7 + 38 , 7 @ @ private [ activation ] final class InternalCodeProvider ( system : ActorSystem ) < nl > _ ← fromFuture ( < nl > if ( wasOnlineRecently ( lastSeen . getMillis ) ) < nl > sendCode ( userId , code . code ) < nl > - else Future . successful ( ( ) ) < nl > + else FastFuture . successful ( ( ) ) < nl > ) < nl > } yield ( ) ) . fold ( < nl > failure ⇒ { < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala < nl > index 305baa2 . . cebdde5 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala < nl > @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . bot < nl > < nl > import akka . actor . _ < nl > import akka . cluster . singleton . { ClusterSingletonManager , ClusterSingletonManagerSettings } < nl > + import akka . http . scaladsl . util . FastFuture < nl > import akka . pattern . pipe < nl > import akka . stream . scaladsl . { Sink , Source } < nl > import akka . stream . { ActorMaterializer , OverflowStrategy } < nl > @ @ - 62 , 7 + 63 , 7 @ @ abstract class InternalBot ( userId : Int , nickname : String , name : String , isAdmin : < nl > val existence = botExt . exists ( userId ) flatMap { exists ⇒ < nl > if ( exists ) { < nl > log . warning ( " Bot already exists " ) < nl > - Future . successful ( ( ) ) < nl > + FastFuture . successful ( ( ) ) < nl > } else { < nl > log . warning ( " Creating user { } " , userId ) < nl > botExt . create ( userId , nickname , name , isAdmin ) map ( _ ⇒ ( ) ) andThen { < nl > diff - - git a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / SecurityHandlers . scala b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / SecurityHandlers . scala < nl > index c1931c6 . . 6f81ef9 100644 < nl > - - - a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / SecurityHandlers . scala < nl > + + + b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / SecurityHandlers . scala < nl > @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . cli < nl > < nl > import java . security . SecureRandom < nl > < nl > + import akka . http . scaladsl . util . FastFuture < nl > import better . files . _ < nl > import im . actor . crypto . Curve25519 < nl > < nl > @ @ - 19 , 10 + 20 , 10 @ @ final class SecurityHandlers { < nl > < nl > if ( pubFile . exists ) { < nl > println ( s " File $ pubPath already exists ! " ) < nl > - Future . successful ( ( ) ) < nl > + FastFuture . successful ( ( ) ) < nl > } else if ( privateFile . exists ) { < nl > println ( s " File $ privatePath already exists ! " ) < nl > - Future . successful ( ( ) ) < nl > + FastFuture . successful ( ( ) ) < nl > } else { < nl > val randomBytes = new Array [ Byte ] ( 32 ) < nl > random . nextBytes ( randomBytes ) < nl > @ @ - 52 , 7 + 53 , 7 @ @ final class SecurityHandlers { < nl > | } < nl > | " " " . stripMargin < nl > ) < nl > - Future . successful ( ( ) ) < nl > + FastFuture . successful ( ( ) ) < nl > } < nl > } < nl > - } < nl > \ No newline at end of file < nl > + } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala < nl > index 632a46d . . d23bfba 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala < nl > @ @ - 40 , 7 + 40 , 7 @ @ trait IncrementalSnapshots [ S < : ProcessorState [ S ] ] extends ProcessorStateControl < nl > < nl > override protected def afterCommit ( e : Event ) : Unit = { < nl > super . afterCommit ( e ) < nl > - if ( recoveryFinished ) { < nl > + if ( recoveryFinished ) { < nl > _ commitsNum + = 1 < nl > if ( _ commitsNum > = SnapshotCommitsThreshold & & _ savingSequenceNr ! = snapshotSequenceNr ) { < nl > log . debug ( " Saving snapshot due to threshold hit " ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupPeerCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupPeerCommandHandlers . scala < nl > index 13b2b17 . . f944d0c 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupPeerCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupPeerCommandHandlers . scala < nl > @ @ - 66 , 7 + 66 , 7 @ @ trait GroupPeerCommandHandlers extends PeersImplicits { < nl > withMembers { ( _ , invitedUserIds , _ ) ⇒ < nl > if ( invitedUserIds contains readerUserId ) { < nl > groupExt . joinAfterFirstRead ( groupId , readerUserId , mr . readerAuthId ) < nl > - } else Future . successful ( ( ) ) < nl > + } else FastFuture . successful ( ( ) ) < nl > } < nl > < nl > val canRead = canMakeRead ( state , mr ) < nl > @ @ - 76 , 9 + 76 , 9 @ @ trait GroupPeerCommandHandlers extends PeersImplicits { < nl > Future . traverse ( memberIds - readerUserId ) { memberId ⇒ < nl > dialogExt . ackMessageRead ( Peer . privat ( memberId ) , mr ) < nl > } map ( _ ⇒ ( ) ) < nl > - } else Future . successful ( ( ) ) < nl > + } else FastFuture . successful ( ( ) ) < nl > } < nl > - } else Future . successful ( ( ) ) ) map { _ ⇒ MessageReadAck ( ) } pipeTo sender ( ) recover { < nl > + } else FastFuture . successful ( ( ) ) ) map { _ ⇒ MessageReadAck ( ) } pipeTo sender ( ) recover { < nl > case e ⇒ < nl > log . error ( e , " Failed to mark messages read " ) < nl > throw e < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / messaging / PushText . scala b / actor - server / actor - core / src / main / scala / im / actor / server / messaging / PushText . scala < nl > index 5052806 . . 3c5e6f7 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / messaging / PushText . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / messaging / PushText . scala < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > package im . actor . server . messaging < nl > < nl > import akka . actor . ActorSystem < nl > + import akka . http . scaladsl . util . FastFuture < nl > import im . actor . api . rpc . messaging . _ < nl > import im . actor . server . group . GroupExtension < nl > import im . actor . server . model . { Peer , PeerType } < nl > @ @ - 30 , 7 + 31 , 7 @ @ trait PushText { < nl > case _ ⇒ < nl > formatAuthored ( peer , outUser , clientName , dm . name ) < nl > } < nl > - case unsupported ⇒ Future . successful ( ( " " , " " ) ) < nl > + case unsupported ⇒ FastFuture . successful ( ( " " , " " ) ) < nl > } < nl > } < nl > < nl > @ @ - 40 , 7 + 41 , 7 @ @ trait PushText { < nl > for { < nl > group ← GroupExtension ( system ) . getApiStruct ( groupId , userId ) < nl > } yield ( s " $ authorName @ $ { group . title } : $ message " , s " $ authorName @ $ { group . title } : $ CensoredText " ) < nl > - case Peer ( PeerType . Private , _ ) ⇒ Future . successful ( ( s " $ authorName : $ message " , s " $ authorName : $ CensoredText " ) ) < nl > + case Peer ( PeerType . Private , _ ) ⇒ FastFuture . successful ( ( s " $ authorName : $ message " , s " $ authorName : $ CensoredText " ) ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala < nl > index 9ecd6d2 . . e56872c 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > package im . actor . server . migrations < nl > < nl > import akka . actor . ActorSystem < nl > + import akka . http . scaladsl . util . FastFuture < nl > import akka . util . Timeout < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . group . GroupErrors . NoBotFound < nl > @ @ - 45 , 7 + 46 , 7 @ @ object IntegrationTokenMigrator extends Migration { < nl > optToken ← GroupExtension ( system ) . getIntegrationToken ( groupId ) < nl > _ ← optToken map { token ⇒ kv . upsert ( token , groupId ) } getOrElse { < nl > system . log . warning ( " Could not find integration token in group { } " , groupId ) < nl > - Future . successful ( ( ) ) < nl > + FastFuture . successful ( ( ) ) < nl > } < nl > } yield { < nl > system . log . info ( " Integration token migrated for group { } " , groupId ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / Migration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / Migration . scala < nl > index 924dada . . b3e679f 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / Migration . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / Migration . scala < nl > @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . server . migrations < nl > import java . time . Instant < nl > < nl > import akka . actor . { Actor , ActorLogging , ActorSystem } < nl > + import akka . http . scaladsl . util . FastFuture < nl > import akka . persistence . PersistentActor < nl > import akka . util . Timeout < nl > import im . actor . config . ActorConfig < nl > @ @ - 10 , 7 + 11 , 7 @ @ import im . actor . server . KeyValueMappings < nl > import shardakka . { InstantCodec , ShardakkaExtension } < nl > < nl > import scala . concurrent . duration . _ < nl > - import scala . concurrent . { Promise , Await , Future } < nl > + import scala . concurrent . { Await , Future , Promise } < nl > < nl > trait Migration { < nl > < nl > @ @ - 27 , 7 + 28 , 7 @ @ trait Migration { < nl > Await . result ( migrations . get ( migrationName ) flatMap { < nl > case Some ( date ) ⇒ < nl > system . log . debug ( s " Migration $ migrationName will not run . Already completed at $ date " ) < nl > - Future . successful ( ( ) ) < nl > + FastFuture . successful ( ( ) ) < nl > case _ ⇒ < nl > system . log . warning ( s " Migration $ migrationName started " ) < nl > startMigration ( ) flatMap { _ ⇒ < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > index ff68eb6 . . 40ba6b8 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > @ @ - 171 , 7 + 171 , 7 @ @ private [ user ] sealed trait Queries { < nl > def getName ( userId : Int , clientUserId : Int ) : Future [ String ] = < nl > for { < nl > localNameOpt ← getLocalName ( clientUserId , userId ) < nl > - name ← localNameOpt map Future . successful getOrElse getName ( userId ) < nl > + name ← localNameOpt map FastFuture . successful getOrElse getName ( userId ) < nl > } yield name < nl > < nl > def getUser ( userId : Int ) : Future [ UserState ] = < nl > diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > index 3468e8b . . f145822 100644 < nl > - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > @ @ - 1 , 5 + 1 , 6 @ @ < nl > package im . actor . server . email < nl > < nl > + import akka . http . scaladsl . util . FastFuture < nl > import im . actor . config . ActorConfig < nl > import org . apache . commons . mail . { DefaultAuthenticator , HtmlEmail } < nl > < nl > @ @ - 27 , 7 + 28 , 7 @ @ trait EmailSender { < nl > } < nl > < nl > object DummyEmailSender extends EmailSender { < nl > - override def send ( message : Message ) : Future [ Unit ] = Future . successful ( ( ) ) < nl > + override def send ( message : Message ) : Future [ Unit ] = FastFuture . successful ( ( ) ) < nl > } < nl > < nl > final class SmtpEmailSender ( config : EmailConfig ) ( implicit ec : ExecutionContext ) extends EmailSender { < nl > @ @ - 48 , 4 + 49 , 4 @ @ final class SmtpEmailSender ( config : EmailConfig ) ( implicit ec : ExecutionContext ) < nl > email . addTo ( message . to ) < nl > email . send ( ) < nl > } < nl > - } < nl > \ No newline at end of file < nl > + } < nl > diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / AuthorizationManager . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / AuthorizationManager . scala < nl > index a98024a . . ee98d79 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / AuthorizationManager . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / AuthorizationManager . scala < nl > @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . server . frontend < nl > import java . security . { MessageDigest , SecureRandom } < nl > < nl > import akka . actor . _ < nl > + import akka . http . scaladsl . util . FastFuture < nl > import akka . pattern . pipe < nl > import akka . stream . actor . ActorPublisher < nl > import better . files . File < nl > @ @ - 130 , 7 + 131 , 7 @ @ final class AuthorizationManager ( serverKeys : Seq [ ServerKey ] , sessionClient : Acto < nl > if ( authId = = 0L ) { < nl > authId = IdUtils . nextAuthId ( ThreadLocalSecureRandom . current ( ) ) < nl > db . run ( AuthIdRepo . create ( authId , None , None ) ) < nl > - } else Future . successful ( ( ) ) < nl > + } else FastFuture . successful ( ( ) ) < nl > < nl > f onComplete { < nl > case Success ( _ ) ⇒ < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > index 05fe83f . . d700511 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > @ @ - 114 , 7 + 114 , 7 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) < nl > for { < nl > isComplete ← haveAllParts ( fileDir , partNames , fileSize ) < nl > result ← concatFiles ( fileDir , partNames , fileName . safe , fileSize ) < nl > - _ ← if ( isComplete ) deleteUploadedParts ( fileDir , partNames ) else Future . successful ( ( ) ) < nl > + _ ← if ( isComplete ) deleteUploadedParts ( fileDir , partNames ) else FastFuture . successful ( ( ) ) < nl > _ ← db . run ( FileRepo . setUploaded ( fileId , fileName . safe ) ) < nl > } yield ( ) < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > index 726945f . . 01ba65d 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . server . api . rpc . service . auth < nl > import java . time . { LocalDateTime , ZoneOffset } < nl > < nl > import akka . actor . ActorSystem < nl > + import akka . http . scaladsl . util . FastFuture < nl > import akka . pattern . ask < nl > import cats . data . Xor < nl > import im . actor . api . rpc . _ < nl > @ @ - 204 , 7 + 205 , 7 @ @ trait AuthHelpers extends Helpers { < nl > client : ClientData < nl > ) : Result [ ApiUser ] = { < nl > for { < nl > - _ ← fromFuture ( if ( countryCode . nonEmpty ) userExt . changeCountryCode ( userId , countryCode ) else Future . successful ( ( ) ) ) < nl > + _ ← fromFuture ( if ( countryCode . nonEmpty ) userExt . changeCountryCode ( userId , countryCode ) else FastFuture . successful ( ( ) ) ) < nl > _ ← fromFuture ( userExt . setDeviceInfo ( userId , client . authId , DeviceInfo . parseFrom ( transaction . deviceInfo ) ) recover { case _ ⇒ ( ) } ) < nl > _ ← fromDBIO ( AuthIdRepo . setUserData ( client . authId , userId ) ) < nl > userStruct ← fromFuture ( userExt . getApiStruct ( userId , userId , client . authId ) )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala b / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > index 25b1496 . . 4f514b0 100644 < nl > - - - a / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > + + + b / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > @ @ - 55 , 8 + 55 , 13 @ @ private [ api ] trait MessageMapper { < nl > ByteString . copyFrom ( group . toByteArray ) < nl > } < nl > < nl > - private def applyPeer ( buf : ByteString ) : Peer = < nl > - Peer . parseFrom ( CodedInputStream . newInstance ( buf . asReadOnlyByteBuffer ( ) ) ) . right . get < nl > + private def applyPeer ( bytes : ByteString ) : Peer = { < nl > + if ( bytes . size ( ) > 0 ) { < nl > + Peer . parseFrom ( CodedInputStream . newInstance ( bytes . asReadOnlyByteBuffer ( ) ) ) . right . get < nl > + } else { < nl > + null < nl > + } < nl > + } < nl > < nl > private def unapplyPeer ( peer : Peer ) : ByteString = < nl > ByteString . copyFrom ( peer . toByteArray ) < nl > diff - - git a / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala b / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala < nl > index 780e6a7 . . 5ebe48c 100644 < nl > - - - a / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala < nl > + + + b / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala < nl > @ @ - 1 , 31 + 1 , 15 @ @ < nl > package im . actor . server . commons < nl > < nl > - import com . typesafe . config . { ConfigFactory , Config } < nl > + import com . typesafe . config . { Config , ConfigFactory } < nl > < nl > object ActorConfig { < nl > def load ( ) : Config = { < nl > ConfigFactory . parseString ( < nl > - s " " " < nl > + " " " < nl > | akka { < nl > | actor { < nl > | provider : " akka . cluster . ClusterActorRefProvider " < nl > | } < nl > - | < nl > - | remote { < nl > - | netty . tcp { < nl > - | hostname : " 127 . 0 . 0 . 1 " < nl > - | port : 2553 < nl > - | } < nl > - | } < nl > - | < nl > - | cluster { < nl > - | seed - nodes : [ " akka . tcp : / / actor - server @ 127 . 0 . 0 . 1 : 2553 " ] < nl > - | } < nl > - | < nl > - | persistence { < nl > - | journal . plugin : " jdbc - journal " < nl > - | snapshot - store . plugin : " jdbc - snapshot - store " < nl > - | } < nl > | } < nl > | < nl > | jdbc - connection { < nl > @ @ - 35 , 6 + 19 , 16 @ @ object ActorConfig { < nl > " " " . stripMargin < nl > ) < nl > . withFallback ( ConfigFactory . load ( ) ) < nl > + . withFallback ( ConfigFactory . parseString ( < nl > + " " " < nl > + | akka { < nl > + | persistence { < nl > + | journal . plugin : " jdbc - journal " < nl > + | snapshot - store . plugin : " jdbc - snapshot - store " < nl > + | } < nl > + | } < nl > + " " " . stripMargin < nl > + ) ) < nl > . resolve ( ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala < nl > index 900f96e . . 9807973 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala < nl > @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ < nl > sealed trait GroupDialogExtension extends Extension < nl > < nl > final class GroupDialogExtensionImpl ( system : ActorSystem ) extends GroupDialogExtension { < nl > + GroupDialog . register ( ) < nl > + < nl > lazy val region : GroupDialogRegion = GroupDialogRegion . start ( ) ( system ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala < nl > index 79bf6f5 . . d5d79d6 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala < nl > @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ < nl > sealed trait PrivateDialogExtension extends Extension < nl > < nl > final class PrivateDialogExtensionImpl ( system : ActorSystem ) extends PrivateDialogExtension { < nl > + PrivateDialog . register ( ) < nl > + < nl > lazy val region : PrivateDialogRegion = PrivateDialogRegion . start ( ) ( system ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala < nl > index 4b344bc . . 6dd3eb7 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala < nl > @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ < nl > sealed trait GroupExtension extends Extension < nl > < nl > final class GroupExtensionImpl ( system : ActorSystem ) extends GroupExtension { < nl > + GroupProcessor . register ( ) < nl > + < nl > lazy val processorRegion : GroupProcessorRegion = GroupProcessorRegion . start ( ) ( system ) < nl > lazy val viewRegion : GroupViewRegion = GroupViewRegion ( processorRegion . ref ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > index ce3eec3 . . 458a489 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > @ @ - 7 , 11 + 7 , 10 @ @ import akka . persistence . { RecoveryCompleted , RecoveryFailure } < nl > import akka . util . Timeout < nl > import im . actor . server . commons . serialization . ActorSerializer < nl > import im . actor . server . db . DbExtension < nl > + import im . actor . server . dialog . group . { GroupDialogExtension , GroupDialogRegion } < nl > import im . actor . server . event . TSEvent < nl > import im . actor . server . file . Avatar < nl > import im . actor . server . office . { PeerProcessor , ProcessorState , StopOffice } < nl > - import im . actor . server . dialog . group . GroupDialogExtension < nl > - import im . actor . server . dialog . group . GroupDialogRegion < nl > import im . actor . server . push . SeqUpdatesExtension < nl > import im . actor . server . user . { UserExtension , UserProcessorRegion , UserViewRegion } < nl > import im . actor . server . util . { FileStorageAdapter , S3StorageExtension } < nl > @ @ - 84 , 6 + 83 , 8 @ @ object GroupProcessor { < nl > ActorSerializer . register ( 21004 , classOf [ GroupQueries . CheckAccessHashResponse ] ) < nl > ActorSerializer . register ( 21005 , classOf [ GroupQueries . GetMembers ] ) < nl > ActorSerializer . register ( 21006 , classOf [ GroupQueries . GetMembersResponse ] ) < nl > + ActorSerializer . register ( 21007 , classOf [ GroupQueries . GetApiStruct ] ) < nl > + ActorSerializer . register ( 21008 , classOf [ GroupQueries . GetApiStructResponse ] ) < nl > < nl > ActorSerializer . register ( 22003 , classOf [ GroupEvents . UserInvited ] ) < nl > ActorSerializer . register ( 22004 , classOf [ GroupEvents . UserJoined ] ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala < nl > index f58914d . . 1fc3f06 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala < nl > @ @ - 43 , 6 + 43 , 8 @ @ final class SeqUpdatesExtensionImpl ( < nl > private implicit val system : ActorSystem = _ system < nl > private implicit lazy val db : Database = DbExtension ( system ) . db < nl > < nl > + SeqUpdatesManager . register ( ) < nl > + < nl > lazy val region : SeqUpdatesManagerRegion = SeqUpdatesManagerRegion . start ( ) ( system , gpm , apm ) < nl > < nl > def getFatData ( < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > index b8c35f6 . . 4c42aa0 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . push < nl > < nl > import java . nio . ByteBuffer < nl > < nl > - import im . actor . server . util . AnyRefLogSource < nl > + import im . actor . server . commons . serialization . ActorSerializer < nl > < nl > import scala . annotation . tailrec < nl > import scala . concurrent . _ < nl > @ @ - 18 , 7 + 18 , 7 @ @ import im . actor . api . rpc . peers . { PeerType , Peer } < nl > import im . actor . api . { rpc ⇒ api } < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . models . sequence < nl > - import im . actor . server . sequence . SeqState < nl > + import im . actor . server . sequence . { SeqStateDate , SeqState } < nl > import im . actor . server . user . { UserOffice , UserViewRegion } < nl > import im . actor . server . { models , persist ⇒ p } < nl > < nl > @ @ - 34 , 6 + 34 , 11 @ @ object SeqUpdatesManager { < nl > / / TODO : configurable < nl > private implicit val OperationTimeout = Timeout ( 30 . seconds ) < nl > < nl > + def register ( ) : Unit = { < nl > + ActorSerializer . register ( 60001 , classOf [ SeqState ] ) < nl > + ActorSerializer . register ( 60002 , classOf [ SeqStateDate ] ) < nl > + } < nl > + < nl > def getSeqState ( authId : Long ) ( implicit ext : SeqUpdatesExtension , ec : ExecutionContext ) : Future [ SeqState ] = < nl > ext . region . ref . ask ( Envelope ( authId , GetSequenceState ) ) ( OperationTimeout ) . mapTo [ SeqState ] < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > index 1f6e847 . . b3ed7b2 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ < nl > sealed trait UserExtension extends Extension < nl > < nl > final class UserExtensionImpl ( system : ActorSystem ) extends UserExtension { < nl > + UserProcessor . register ( ) < nl > + < nl > lazy val processorRegion : UserProcessorRegion = UserProcessorRegion . start ( ) ( system ) < nl > lazy val viewRegion : UserViewRegion = UserViewRegion ( processorRegion . ref ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > index d506745 . . ac89e49 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > @ @ - 102 , 6 + 102 , 8 @ @ object UserProcessor { < nl > ActorSerializer . register ( 11004 , classOf [ UserQueries . GetContactRecordsResponse ] ) < nl > ActorSerializer . register ( 11005 , classOf [ UserQueries . CheckAccessHash ] ) < nl > ActorSerializer . register ( 11006 , classOf [ UserQueries . CheckAccessHashResponse ] ) < nl > + ActorSerializer . register ( 11007 , classOf [ UserQueries . GetApiStruct ] ) < nl > + ActorSerializer . register ( 11008 , classOf [ UserQueries . GetApiStructResponse ] ) < nl > < nl > ActorSerializer . register ( 12001 , classOf [ UserEvents . AuthAdded ] ) < nl > ActorSerializer . register ( 12002 , classOf [ UserEvents . AuthRemoved ] ) < nl > diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > index ccdd66e . . 3ae4734 100644 < nl > - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > @ @ - 93 , 12 + 93 , 10 @ @ object Main extends App { < nl > case _ ⇒ throw new Exception ( " " " Invalid activation . default - service value provided : valid options : " internal " , actor - activation " " " ) < nl > } < nl > < nl > - Session . startRegion ( < nl > + implicit val sessionRegion = Session . startRegion ( < nl > Some ( Session . props ( mediator ) ) < nl > ) < nl > < nl > - implicit val sessionRegion = Session . startRegionProxy ( ) < nl > - < nl > RichMessageWorker . startWorker ( richMessageConfig , mediator ) < nl > < nl > implicit val oauth2Service = new GoogleProvider ( oauth2GoogleConfig ) < nl > diff - - git a / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala b / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala < nl > index 2e3a937 . . 2dd469e 100644 < nl > - - - a / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala < nl > + + + b / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala < nl > @ @ - 2 , 11 + 2 , 6 @ @ package im . actor . server . util < nl > < nl > import java . io . File < nl > < nl > - import scala . concurrent . duration . _ < nl > - import scala . concurrent . forkjoin . ThreadLocalRandom < nl > - import scala . concurrent . { ExecutionContext , Future } < nl > - import scala . util . Try < nl > - < nl > import akka . actor . _ < nl > import com . amazonaws . HttpMethod < nl > import com . amazonaws . auth . BasicAWSCredentials < nl > @ @ - 16 , 13 + 11 , 25 @ @ import com . amazonaws . services . s3 . transfer . model . UploadResult < nl > import com . github . dwhjames . awswrap . s3 . { AmazonS3ScalaClient , FutureTransfer } < nl > import com . github . kxbmap . configs . _ < nl > import com . typesafe . config . { Config , ConfigFactory } < nl > - import slick . driver . PostgresDriver . api . _ < nl > - < nl > - import im . actor . api . rpc . files . FileLocation < nl > + import im . actor . api . rpc . files . { FileLocation ⇒ ApiFileLocation } < nl > + import im . actor . server . commons . serialization . ActorSerializer < nl > import im . actor . server . db . DbExtension < nl > + import im . actor . server . file . { Avatar , AvatarImage , FileLocation } < nl > import im . actor . server . { models , persist } < nl > + import slick . driver . PostgresDriver . api . _ < nl > < nl > - class S3StorageExtensionImpl ( val s3StorageAdapter : S3StorageAdapter ) extends Extension < nl > + import scala . concurrent . duration . _ < nl > + import scala . concurrent . forkjoin . ThreadLocalRandom < nl > + import scala . concurrent . { ExecutionContext , Future } < nl > + import scala . util . Try < nl > + < nl > + class S3StorageExtensionImpl ( val s3StorageAdapter : S3StorageAdapter ) extends Extension { < nl > + / / TODO : move to a proper place < nl > + < nl > + ActorSerializer . register ( 80001 , classOf [ FileLocation ] ) < nl > + ActorSerializer . register ( 80002 , classOf [ AvatarImage ] ) < nl > + ActorSerializer . register ( 80003 , classOf [ Avatar ] ) < nl > + } < nl > < nl > object S3StorageExtension extends ExtensionId [ S3StorageExtensionImpl ] with ExtensionIdProvider { < nl > override def lookup = S3StorageExtension < nl > @ @ - 62 , 10 + 69 , 10 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext < nl > val s3Client = new AmazonS3ScalaClient ( awsCredentials ) < nl > val transferManager = new TransferManager ( awsCredentials ) < nl > < nl > - override def uploadFile ( name : String , file : File ) : DBIO [ FileLocation ] = < nl > + override def uploadFile ( name : String , file : File ) : DBIO [ ApiFileLocation ] = < nl > uploadFile ( bucketName , name , file ) < nl > < nl > - override def uploadFileF ( name : String , file : File ) : Future [ FileLocation ] = < nl > + override def uploadFileF ( name : String , file : File ) : Future [ ApiFileLocation ] = < nl > db . run ( uploadFile ( name , file ) ) < nl > < nl > override def downloadFile ( id : Long ) : DBIO [ Option [ File ] ] = { < nl > @ @ - 102 , 7 + 109 , 7 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext < nl > } yield file < nl > } < nl > < nl > - private def uploadFile ( bucketName : String , name : String , file : File ) : DBIO [ FileLocation ] = { < nl > + private def uploadFile ( bucketName : String , name : String , file : File ) : DBIO [ ApiFileLocation ] = { < nl > val rnd = ThreadLocalRandom . current ( ) < nl > val id = rnd . nextLong ( ) < nl > val accessSalt = ACLUtils . nextAccessSalt ( rnd ) < nl > @ @ - 112 , 7 + 119 , 7 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext < nl > _ ← persist . File . create ( id , accessSalt , FileUtils . s3Key ( id , name ) ) < nl > _ ← DBIO . from ( s3Upload ( bucketName , id , name , file ) ) < nl > _ ← DBIO . from ( sizeF ) flatMap ( s ⇒ persist . File . setUploaded ( id , s , name ) ) < nl > - } yield FileLocation ( id , ACLUtils . fileAccessHash ( id , accessSalt ) ) < nl > + } yield ApiFileLocation ( id , ACLUtils . fileAccessHash ( id , accessSalt ) ) < nl > } < nl > < nl > private def s3Upload ( bucketName : String , id : Long , name : String , file : File ) : Future [ UploadResult ] = {

TEST DIFF:
diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationContext . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationContext . scala 
 index 33c84e4 . . 3bff2da 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationContext . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / ActivationContext . scala 
 @ @ - 101 , 5 + 101 , 5 @ @ final class ActivationContext ( implicit system : ActorSystem ) extends CodeGen { 
 } 
 
 private def tryCleanup ( optProvider : Option [ ActivationProvider ] , txHash : String ) : Future [ Unit ] = 
 - optProvider map ( _ . cleanup ( txHash ) ) getOrElse Future . successful ( ( ) ) 
 + optProvider map ( _ . cleanup ( txHash ) ) getOrElse FastFuture . successful ( ( ) ) 
 } 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala 
 index d84759f . . 061e52c 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package im . actor . server . activation . internal 
 
 import akka . actor . ActorSystem 
 + import akka . http . scaladsl . util . FastFuture 
 import cats . data . { Xor , XorT } 
 import im . actor . api . rpc . messaging . ApiTextMessage 
 import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } 
 @ @ - 37 , 7 + 38 , 7 @ @ private [ activation ] final class InternalCodeProvider ( system : ActorSystem ) 
 _ ← fromFuture ( 
 if ( wasOnlineRecently ( lastSeen . getMillis ) ) 
 sendCode ( userId , code . code ) 
 - else Future . successful ( ( ) ) 
 + else FastFuture . successful ( ( ) ) 
 ) 
 } yield ( ) ) . fold ( 
 failure ⇒ { 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala 
 index 305baa2 . . cebdde5 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala 
 @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . bot 
 
 import akka . actor . _ 
 import akka . cluster . singleton . { ClusterSingletonManager , ClusterSingletonManagerSettings } 
 + import akka . http . scaladsl . util . FastFuture 
 import akka . pattern . pipe 
 import akka . stream . scaladsl . { Sink , Source } 
 import akka . stream . { ActorMaterializer , OverflowStrategy } 
 @ @ - 62 , 7 + 63 , 7 @ @ abstract class InternalBot ( userId : Int , nickname : String , name : String , isAdmin : 
 val existence = botExt . exists ( userId ) flatMap { exists ⇒ 
 if ( exists ) { 
 log . warning ( " Bot already exists " ) 
 - Future . successful ( ( ) ) 
 + FastFuture . successful ( ( ) ) 
 } else { 
 log . warning ( " Creating user { } " , userId ) 
 botExt . create ( userId , nickname , name , isAdmin ) map ( _ ⇒ ( ) ) andThen { 
 diff - - git a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / SecurityHandlers . scala b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / SecurityHandlers . scala 
 index c1931c6 . . 6f81ef9 100644 
 - - - a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / SecurityHandlers . scala 
 + + + b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / SecurityHandlers . scala 
 @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . cli 
 
 import java . security . SecureRandom 
 
 + import akka . http . scaladsl . util . FastFuture 
 import better . files . _ 
 import im . actor . crypto . Curve25519 
 
 @ @ - 19 , 10 + 20 , 10 @ @ final class SecurityHandlers { 
 
 if ( pubFile . exists ) { 
 println ( s " File $ pubPath already exists ! " ) 
 - Future . successful ( ( ) ) 
 + FastFuture . successful ( ( ) ) 
 } else if ( privateFile . exists ) { 
 println ( s " File $ privatePath already exists ! " ) 
 - Future . successful ( ( ) ) 
 + FastFuture . successful ( ( ) ) 
 } else { 
 val randomBytes = new Array [ Byte ] ( 32 ) 
 random . nextBytes ( randomBytes ) 
 @ @ - 52 , 7 + 53 , 7 @ @ final class SecurityHandlers { 
 | } 
 | " " " . stripMargin 
 ) 
 - Future . successful ( ( ) ) 
 + FastFuture . successful ( ( ) ) 
 } 
 } 
 - } 
 \ No newline at end of file 
 + } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala 
 index 632a46d . . d23bfba 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala 
 @ @ - 40 , 7 + 40 , 7 @ @ trait IncrementalSnapshots [ S < : ProcessorState [ S ] ] extends ProcessorStateControl 
 
 override protected def afterCommit ( e : Event ) : Unit = { 
 super . afterCommit ( e ) 
 - if ( recoveryFinished ) { 
 + if ( recoveryFinished ) { 
 _ commitsNum + = 1 
 if ( _ commitsNum > = SnapshotCommitsThreshold & & _ savingSequenceNr ! = snapshotSequenceNr ) { 
 log . debug ( " Saving snapshot due to threshold hit " ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupPeerCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupPeerCommandHandlers . scala 
 index 13b2b17 . . f944d0c 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupPeerCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupPeerCommandHandlers . scala 
 @ @ - 66 , 7 + 66 , 7 @ @ trait GroupPeerCommandHandlers extends PeersImplicits { 
 withMembers { ( _ , invitedUserIds , _ ) ⇒ 
 if ( invitedUserIds contains readerUserId ) { 
 groupExt . joinAfterFirstRead ( groupId , readerUserId , mr . readerAuthId ) 
 - } else Future . successful ( ( ) ) 
 + } else FastFuture . successful ( ( ) ) 
 } 
 
 val canRead = canMakeRead ( state , mr ) 
 @ @ - 76 , 9 + 76 , 9 @ @ trait GroupPeerCommandHandlers extends PeersImplicits { 
 Future . traverse ( memberIds - readerUserId ) { memberId ⇒ 
 dialogExt . ackMessageRead ( Peer . privat ( memberId ) , mr ) 
 } map ( _ ⇒ ( ) ) 
 - } else Future . successful ( ( ) ) 
 + } else FastFuture . successful ( ( ) ) 
 } 
 - } else Future . successful ( ( ) ) ) map { _ ⇒ MessageReadAck ( ) } pipeTo sender ( ) recover { 
 + } else FastFuture . successful ( ( ) ) ) map { _ ⇒ MessageReadAck ( ) } pipeTo sender ( ) recover { 
 case e ⇒ 
 log . error ( e , " Failed to mark messages read " ) 
 throw e 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / messaging / PushText . scala b / actor - server / actor - core / src / main / scala / im / actor / server / messaging / PushText . scala 
 index 5052806 . . 3c5e6f7 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / messaging / PushText . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / messaging / PushText . scala 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package im . actor . server . messaging 
 
 import akka . actor . ActorSystem 
 + import akka . http . scaladsl . util . FastFuture 
 import im . actor . api . rpc . messaging . _ 
 import im . actor . server . group . GroupExtension 
 import im . actor . server . model . { Peer , PeerType } 
 @ @ - 30 , 7 + 31 , 7 @ @ trait PushText { 
 case _ ⇒ 
 formatAuthored ( peer , outUser , clientName , dm . name ) 
 } 
 - case unsupported ⇒ Future . successful ( ( " " , " " ) ) 
 + case unsupported ⇒ FastFuture . successful ( ( " " , " " ) ) 
 } 
 } 
 
 @ @ - 40 , 7 + 41 , 7 @ @ trait PushText { 
 for { 
 group ← GroupExtension ( system ) . getApiStruct ( groupId , userId ) 
 } yield ( s " $ authorName @ $ { group . title } : $ message " , s " $ authorName @ $ { group . title } : $ CensoredText " ) 
 - case Peer ( PeerType . Private , _ ) ⇒ Future . successful ( ( s " $ authorName : $ message " , s " $ authorName : $ CensoredText " ) ) 
 + case Peer ( PeerType . Private , _ ) ⇒ FastFuture . successful ( ( s " $ authorName : $ message " , s " $ authorName : $ CensoredText " ) ) 
 } 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala 
 index 9ecd6d2 . . e56872c 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package im . actor . server . migrations 
 
 import akka . actor . ActorSystem 
 + import akka . http . scaladsl . util . FastFuture 
 import akka . util . Timeout 
 import im . actor . server . db . DbExtension 
 import im . actor . server . group . GroupErrors . NoBotFound 
 @ @ - 45 , 7 + 46 , 7 @ @ object IntegrationTokenMigrator extends Migration { 
 optToken ← GroupExtension ( system ) . getIntegrationToken ( groupId ) 
 _ ← optToken map { token ⇒ kv . upsert ( token , groupId ) } getOrElse { 
 system . log . warning ( " Could not find integration token in group { } " , groupId ) 
 - Future . successful ( ( ) ) 
 + FastFuture . successful ( ( ) ) 
 } 
 } yield { 
 system . log . info ( " Integration token migrated for group { } " , groupId ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / Migration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / Migration . scala 
 index 924dada . . b3e679f 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / Migration . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / Migration . scala 
 @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . server . migrations 
 import java . time . Instant 
 
 import akka . actor . { Actor , ActorLogging , ActorSystem } 
 + import akka . http . scaladsl . util . FastFuture 
 import akka . persistence . PersistentActor 
 import akka . util . Timeout 
 import im . actor . config . ActorConfig 
 @ @ - 10 , 7 + 11 , 7 @ @ import im . actor . server . KeyValueMappings 
 import shardakka . { InstantCodec , ShardakkaExtension } 
 
 import scala . concurrent . duration . _ 
 - import scala . concurrent . { Promise , Await , Future } 
 + import scala . concurrent . { Await , Future , Promise } 
 
 trait Migration { 
 
 @ @ - 27 , 7 + 28 , 7 @ @ trait Migration { 
 Await . result ( migrations . get ( migrationName ) flatMap { 
 case Some ( date ) ⇒ 
 system . log . debug ( s " Migration $ migrationName will not run . Already completed at $ date " ) 
 - Future . successful ( ( ) ) 
 + FastFuture . successful ( ( ) ) 
 case _ ⇒ 
 system . log . warning ( s " Migration $ migrationName started " ) 
 startMigration ( ) flatMap { _ ⇒ 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 index ff68eb6 . . 40ba6b8 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 @ @ - 171 , 7 + 171 , 7 @ @ private [ user ] sealed trait Queries { 
 def getName ( userId : Int , clientUserId : Int ) : Future [ String ] = 
 for { 
 localNameOpt ← getLocalName ( clientUserId , userId ) 
 - name ← localNameOpt map Future . successful getOrElse getName ( userId ) 
 + name ← localNameOpt map FastFuture . successful getOrElse getName ( userId ) 
 } yield name 
 
 def getUser ( userId : Int ) : Future [ UserState ] = 
 diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 index 3468e8b . . f145822 100644 
 - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package im . actor . server . email 
 
 + import akka . http . scaladsl . util . FastFuture 
 import im . actor . config . ActorConfig 
 import org . apache . commons . mail . { DefaultAuthenticator , HtmlEmail } 
 
 @ @ - 27 , 7 + 28 , 7 @ @ trait EmailSender { 
 } 
 
 object DummyEmailSender extends EmailSender { 
 - override def send ( message : Message ) : Future [ Unit ] = Future . successful ( ( ) ) 
 + override def send ( message : Message ) : Future [ Unit ] = FastFuture . successful ( ( ) ) 
 } 
 
 final class SmtpEmailSender ( config : EmailConfig ) ( implicit ec : ExecutionContext ) extends EmailSender { 
 @ @ - 48 , 4 + 49 , 4 @ @ final class SmtpEmailSender ( config : EmailConfig ) ( implicit ec : ExecutionContext ) 
 email . addTo ( message . to ) 
 email . send ( ) 
 } 
 - } 
 \ No newline at end of file 
 + } 
 diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / AuthorizationManager . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / AuthorizationManager . scala 
 index a98024a . . ee98d79 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / AuthorizationManager . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / AuthorizationManager . scala 
 @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . server . frontend 
 import java . security . { MessageDigest , SecureRandom } 
 
 import akka . actor . _ 
 + import akka . http . scaladsl . util . FastFuture 
 import akka . pattern . pipe 
 import akka . stream . actor . ActorPublisher 
 import better . files . File 
 @ @ - 130 , 7 + 131 , 7 @ @ final class AuthorizationManager ( serverKeys : Seq [ ServerKey ] , sessionClient : Acto 
 if ( authId = = 0L ) { 
 authId = IdUtils . nextAuthId ( ThreadLocalSecureRandom . current ( ) ) 
 db . run ( AuthIdRepo . create ( authId , None , None ) ) 
 - } else Future . successful ( ( ) ) 
 + } else FastFuture . successful ( ( ) ) 
 
 f onComplete { 
 case Success ( _ ) ⇒ 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 index 05fe83f . . d700511 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 @ @ - 114 , 7 + 114 , 7 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) 
 for { 
 isComplete ← haveAllParts ( fileDir , partNames , fileSize ) 
 result ← concatFiles ( fileDir , partNames , fileName . safe , fileSize ) 
 - _ ← if ( isComplete ) deleteUploadedParts ( fileDir , partNames ) else Future . successful ( ( ) ) 
 + _ ← if ( isComplete ) deleteUploadedParts ( fileDir , partNames ) else FastFuture . successful ( ( ) ) 
 _ ← db . run ( FileRepo . setUploaded ( fileId , fileName . safe ) ) 
 } yield ( ) 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 index 726945f . . 01ba65d 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . server . api . rpc . service . auth 
 import java . time . { LocalDateTime , ZoneOffset } 
 
 import akka . actor . ActorSystem 
 + import akka . http . scaladsl . util . FastFuture 
 import akka . pattern . ask 
 import cats . data . Xor 
 import im . actor . api . rpc . _ 
 @ @ - 204 , 7 + 205 , 7 @ @ trait AuthHelpers extends Helpers { 
 client : ClientData 
 ) : Result [ ApiUser ] = { 
 for { 
 - _ ← fromFuture ( if ( countryCode . nonEmpty ) userExt . changeCountryCode ( userId , countryCode ) else Future . successful ( ( ) ) ) 
 + _ ← fromFuture ( if ( countryCode . nonEmpty ) userExt . changeCountryCode ( userId , countryCode ) else FastFuture . successful ( ( ) ) ) 
 _ ← fromFuture ( userExt . setDeviceInfo ( userId , client . authId , DeviceInfo . parseFrom ( transaction . deviceInfo ) ) recover { case _ ⇒ ( ) } ) 
 _ ← fromDBIO ( AuthIdRepo . setUserData ( client . authId , userId ) ) 
 userStruct ← fromFuture ( userExt . getApiStruct ( userId , userId , client . authId ) )

NEAREST DIFF:
diff - - git a / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala b / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala 
 index 25b1496 . . 4f514b0 100644 
 - - - a / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala 
 + + + b / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala 
 @ @ - 55 , 8 + 55 , 13 @ @ private [ api ] trait MessageMapper { 
 ByteString . copyFrom ( group . toByteArray ) 
 } 
 
 - private def applyPeer ( buf : ByteString ) : Peer = 
 - Peer . parseFrom ( CodedInputStream . newInstance ( buf . asReadOnlyByteBuffer ( ) ) ) . right . get 
 + private def applyPeer ( bytes : ByteString ) : Peer = { 
 + if ( bytes . size ( ) > 0 ) { 
 + Peer . parseFrom ( CodedInputStream . newInstance ( bytes . asReadOnlyByteBuffer ( ) ) ) . right . get 
 + } else { 
 + null 
 + } 
 + } 
 
 private def unapplyPeer ( peer : Peer ) : ByteString = 
 ByteString . copyFrom ( peer . toByteArray ) 
 diff - - git a / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala b / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala 
 index 780e6a7 . . 5ebe48c 100644 
 - - - a / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala 
 + + + b / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala 
 @ @ - 1 , 31 + 1 , 15 @ @ 
 package im . actor . server . commons 
 
 - import com . typesafe . config . { ConfigFactory , Config } 
 + import com . typesafe . config . { Config , ConfigFactory } 
 
 object ActorConfig { 
 def load ( ) : Config = { 
 ConfigFactory . parseString ( 
 - s " " " 
 + " " " 
 | akka { 
 | actor { 
 | provider : " akka . cluster . ClusterActorRefProvider " 
 | } 
 - | 
 - | remote { 
 - | netty . tcp { 
 - | hostname : " 127 . 0 . 0 . 1 " 
 - | port : 2553 
 - | } 
 - | } 
 - | 
 - | cluster { 
 - | seed - nodes : [ " akka . tcp : / / actor - server @ 127 . 0 . 0 . 1 : 2553 " ] 
 - | } 
 - | 
 - | persistence { 
 - | journal . plugin : " jdbc - journal " 
 - | snapshot - store . plugin : " jdbc - snapshot - store " 
 - | } 
 | } 
 | 
 | jdbc - connection { 
 @ @ - 35 , 6 + 19 , 16 @ @ object ActorConfig { 
 " " " . stripMargin 
 ) 
 . withFallback ( ConfigFactory . load ( ) ) 
 + . withFallback ( ConfigFactory . parseString ( 
 + " " " 
 + | akka { 
 + | persistence { 
 + | journal . plugin : " jdbc - journal " 
 + | snapshot - store . plugin : " jdbc - snapshot - store " 
 + | } 
 + | } 
 + " " " . stripMargin 
 + ) ) 
 . resolve ( ) 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala 
 index 900f96e . . 9807973 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala 
 @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ 
 sealed trait GroupDialogExtension extends Extension 
 
 final class GroupDialogExtensionImpl ( system : ActorSystem ) extends GroupDialogExtension { 
 + GroupDialog . register ( ) 
 + 
 lazy val region : GroupDialogRegion = GroupDialogRegion . start ( ) ( system ) 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala 
 index 79bf6f5 . . d5d79d6 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala 
 @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ 
 sealed trait PrivateDialogExtension extends Extension 
 
 final class PrivateDialogExtensionImpl ( system : ActorSystem ) extends PrivateDialogExtension { 
 + PrivateDialog . register ( ) 
 + 
 lazy val region : PrivateDialogRegion = PrivateDialogRegion . start ( ) ( system ) 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala 
 index 4b344bc . . 6dd3eb7 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala 
 @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ 
 sealed trait GroupExtension extends Extension 
 
 final class GroupExtensionImpl ( system : ActorSystem ) extends GroupExtension { 
 + GroupProcessor . register ( ) 
 + 
 lazy val processorRegion : GroupProcessorRegion = GroupProcessorRegion . start ( ) ( system ) 
 lazy val viewRegion : GroupViewRegion = GroupViewRegion ( processorRegion . ref ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 index ce3eec3 . . 458a489 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 @ @ - 7 , 11 + 7 , 10 @ @ import akka . persistence . { RecoveryCompleted , RecoveryFailure } 
 import akka . util . Timeout 
 import im . actor . server . commons . serialization . ActorSerializer 
 import im . actor . server . db . DbExtension 
 + import im . actor . server . dialog . group . { GroupDialogExtension , GroupDialogRegion } 
 import im . actor . server . event . TSEvent 
 import im . actor . server . file . Avatar 
 import im . actor . server . office . { PeerProcessor , ProcessorState , StopOffice } 
 - import im . actor . server . dialog . group . GroupDialogExtension 
 - import im . actor . server . dialog . group . GroupDialogRegion 
 import im . actor . server . push . SeqUpdatesExtension 
 import im . actor . server . user . { UserExtension , UserProcessorRegion , UserViewRegion } 
 import im . actor . server . util . { FileStorageAdapter , S3StorageExtension } 
 @ @ - 84 , 6 + 83 , 8 @ @ object GroupProcessor { 
 ActorSerializer . register ( 21004 , classOf [ GroupQueries . CheckAccessHashResponse ] ) 
 ActorSerializer . register ( 21005 , classOf [ GroupQueries . GetMembers ] ) 
 ActorSerializer . register ( 21006 , classOf [ GroupQueries . GetMembersResponse ] ) 
 + ActorSerializer . register ( 21007 , classOf [ GroupQueries . GetApiStruct ] ) 
 + ActorSerializer . register ( 21008 , classOf [ GroupQueries . GetApiStructResponse ] ) 
 
 ActorSerializer . register ( 22003 , classOf [ GroupEvents . UserInvited ] ) 
 ActorSerializer . register ( 22004 , classOf [ GroupEvents . UserJoined ] ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala 
 index f58914d . . 1fc3f06 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala 
 @ @ - 43 , 6 + 43 , 8 @ @ final class SeqUpdatesExtensionImpl ( 
 private implicit val system : ActorSystem = _ system 
 private implicit lazy val db : Database = DbExtension ( system ) . db 
 
 + SeqUpdatesManager . register ( ) 
 + 
 lazy val region : SeqUpdatesManagerRegion = SeqUpdatesManagerRegion . start ( ) ( system , gpm , apm ) 
 
 def getFatData ( 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 index b8c35f6 . . 4c42aa0 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . push 
 
 import java . nio . ByteBuffer 
 
 - import im . actor . server . util . AnyRefLogSource 
 + import im . actor . server . commons . serialization . ActorSerializer 
 
 import scala . annotation . tailrec 
 import scala . concurrent . _ 
 @ @ - 18 , 7 + 18 , 7 @ @ import im . actor . api . rpc . peers . { PeerType , Peer } 
 import im . actor . api . { rpc ⇒ api } 
 import im . actor . server . db . DbExtension 
 import im . actor . server . models . sequence 
 - import im . actor . server . sequence . SeqState 
 + import im . actor . server . sequence . { SeqStateDate , SeqState } 
 import im . actor . server . user . { UserOffice , UserViewRegion } 
 import im . actor . server . { models , persist ⇒ p } 
 
 @ @ - 34 , 6 + 34 , 11 @ @ object SeqUpdatesManager { 
 / / TODO : configurable 
 private implicit val OperationTimeout = Timeout ( 30 . seconds ) 
 
 + def register ( ) : Unit = { 
 + ActorSerializer . register ( 60001 , classOf [ SeqState ] ) 
 + ActorSerializer . register ( 60002 , classOf [ SeqStateDate ] ) 
 + } 
 + 
 def getSeqState ( authId : Long ) ( implicit ext : SeqUpdatesExtension , ec : ExecutionContext ) : Future [ SeqState ] = 
 ext . region . ref . ask ( Envelope ( authId , GetSequenceState ) ) ( OperationTimeout ) . mapTo [ SeqState ] 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 index 1f6e847 . . b3ed7b2 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ 
 sealed trait UserExtension extends Extension 
 
 final class UserExtensionImpl ( system : ActorSystem ) extends UserExtension { 
 + UserProcessor . register ( ) 
 + 
 lazy val processorRegion : UserProcessorRegion = UserProcessorRegion . start ( ) ( system ) 
 lazy val viewRegion : UserViewRegion = UserViewRegion ( processorRegion . ref ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 index d506745 . . ac89e49 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 @ @ - 102 , 6 + 102 , 8 @ @ object UserProcessor { 
 ActorSerializer . register ( 11004 , classOf [ UserQueries . GetContactRecordsResponse ] ) 
 ActorSerializer . register ( 11005 , classOf [ UserQueries . CheckAccessHash ] ) 
 ActorSerializer . register ( 11006 , classOf [ UserQueries . CheckAccessHashResponse ] ) 
 + ActorSerializer . register ( 11007 , classOf [ UserQueries . GetApiStruct ] ) 
 + ActorSerializer . register ( 11008 , classOf [ UserQueries . GetApiStructResponse ] ) 
 
 ActorSerializer . register ( 12001 , classOf [ UserEvents . AuthAdded ] ) 
 ActorSerializer . register ( 12002 , classOf [ UserEvents . AuthRemoved ] ) 
 diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 index ccdd66e . . 3ae4734 100644 
 - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 @ @ - 93 , 12 + 93 , 10 @ @ object Main extends App { 
 case _ ⇒ throw new Exception ( " " " Invalid activation . default - service value provided : valid options : " internal " , actor - activation " " " ) 
 } 
 
 - Session . startRegion ( 
 + implicit val sessionRegion = Session . startRegion ( 
 Some ( Session . props ( mediator ) ) 
 ) 
 
 - implicit val sessionRegion = Session . startRegionProxy ( ) 
 - 
 RichMessageWorker . startWorker ( richMessageConfig , mediator ) 
 
 implicit val oauth2Service = new GoogleProvider ( oauth2GoogleConfig ) 
 diff - - git a / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala b / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala 
 index 2e3a937 . . 2dd469e 100644 
 - - - a / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala 
 + + + b / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala 
 @ @ - 2 , 11 + 2 , 6 @ @ package im . actor . server . util 
 
 import java . io . File 
 
 - import scala . concurrent . duration . _ 
 - import scala . concurrent . forkjoin . ThreadLocalRandom 
 - import scala . concurrent . { ExecutionContext , Future } 
 - import scala . util . Try 
 - 
 import akka . actor . _ 
 import com . amazonaws . HttpMethod 
 import com . amazonaws . auth . BasicAWSCredentials 
 @ @ - 16 , 13 + 11 , 25 @ @ import com . amazonaws . services . s3 . transfer . model . UploadResult 
 import com . github . dwhjames . awswrap . s3 . { AmazonS3ScalaClient , FutureTransfer } 
 import com . github . kxbmap . configs . _ 
 import com . typesafe . config . { Config , ConfigFactory } 
 - import slick . driver . PostgresDriver . api . _ 
 - 
 - import im . actor . api . rpc . files . FileLocation 
 + import im . actor . api . rpc . files . { FileLocation ⇒ ApiFileLocation } 
 + import im . actor . server . commons . serialization . ActorSerializer 
 import im . actor . server . db . DbExtension 
 + import im . actor . server . file . { Avatar , AvatarImage , FileLocation } 
 import im . actor . server . { models , persist } 
 + import slick . driver . PostgresDriver . api . _ 
 
 - class S3StorageExtensionImpl ( val s3StorageAdapter : S3StorageAdapter ) extends Extension 
 + import scala . concurrent . duration . _ 
 + import scala . concurrent . forkjoin . ThreadLocalRandom 
 + import scala . concurrent . { ExecutionContext , Future } 
 + import scala . util . Try 
 + 
 + class S3StorageExtensionImpl ( val s3StorageAdapter : S3StorageAdapter ) extends Extension { 
 + / / TODO : move to a proper place 
 + 
 + ActorSerializer . register ( 80001 , classOf [ FileLocation ] ) 
 + ActorSerializer . register ( 80002 , classOf [ AvatarImage ] ) 
 + ActorSerializer . register ( 80003 , classOf [ Avatar ] ) 
 + } 
 
 object S3StorageExtension extends ExtensionId [ S3StorageExtensionImpl ] with ExtensionIdProvider { 
 override def lookup = S3StorageExtension 
 @ @ - 62 , 10 + 69 , 10 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext 
 val s3Client = new AmazonS3ScalaClient ( awsCredentials ) 
 val transferManager = new TransferManager ( awsCredentials ) 
 
 - override def uploadFile ( name : String , file : File ) : DBIO [ FileLocation ] = 
 + override def uploadFile ( name : String , file : File ) : DBIO [ ApiFileLocation ] = 
 uploadFile ( bucketName , name , file ) 
 
 - override def uploadFileF ( name : String , file : File ) : Future [ FileLocation ] = 
 + override def uploadFileF ( name : String , file : File ) : Future [ ApiFileLocation ] = 
 db . run ( uploadFile ( name , file ) ) 
 
 override def downloadFile ( id : Long ) : DBIO [ Option [ File ] ] = { 
 @ @ - 102 , 7 + 109 , 7 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext 
 } yield file 
 } 
 
 - private def uploadFile ( bucketName : String , name : String , file : File ) : DBIO [ FileLocation ] = { 
 + private def uploadFile ( bucketName : String , name : String , file : File ) : DBIO [ ApiFileLocation ] = { 
 val rnd = ThreadLocalRandom . current ( ) 
 val id = rnd . nextLong ( ) 
 val accessSalt = ACLUtils . nextAccessSalt ( rnd ) 
 @ @ - 112 , 7 + 119 , 7 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext 
 _ ← persist . File . create ( id , accessSalt , FileUtils . s3Key ( id , name ) ) 
 _ ← DBIO . from ( s3Upload ( bucketName , id , name , file ) ) 
 _ ← DBIO . from ( sizeF ) flatMap ( s ⇒ persist . File . setUploaded ( id , s , name ) ) 
 - } yield FileLocation ( id , ACLUtils . fileAccessHash ( id , accessSalt ) ) 
 + } yield ApiFileLocation ( id , ACLUtils . fileAccessHash ( id , accessSalt ) ) 
 } 
 
 private def s3Upload ( bucketName : String , id : Long , name : String , file : File ) : Future [ UploadResult ] = {
