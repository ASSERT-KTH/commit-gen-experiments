BLEU SCORE: 0.14258769764520748

TEST MSG: feat ( core ) : Added new date binding
GENERATED MSG: feat ( js ) : Implement new bind messages

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 98f516a . . ec55748 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 426 , 23 + 426 , 7 @ @ public class JsFacade implements Exportable { < nl > public void preInitChat ( JsPeer peer ) { < nl > messenger . onConversationPreLoad ( peer . convert ( ) ) ; < nl > } < nl > - < nl > - @ UsedByApp < nl > - public void bindChat ( JsPeer peer , JsDisplayListCallback < JsMessage > callback ) { < nl > - if ( callback = = null ) { < nl > - return ; < nl > - } < nl > - messenger . getSharedChatList ( peer . convert ( ) ) . subscribe ( callback , true ) ; < nl > - } < nl > - < nl > - @ UsedByApp < nl > - public void unbindChat ( JsPeer peer , JsDisplayListCallback < JsMessage > callback ) { < nl > - if ( callback = = null ) { < nl > - return ; < nl > - } < nl > - messenger . getSharedChatList ( peer . convert ( ) ) . unsubscribe ( callback ) ; < nl > - } < nl > - < nl > + < nl > @ UsedByApp < nl > public JsMessagesBind bindMessages ( JsPeer peer , JsMessagesBindClosure callback ) { < nl > if ( callback = = null ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / Enums . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / Enums . java < nl > index 718cdf1 . . 17f82ee 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / Enums . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / Enums . java < nl > @ @ - 39 , 10 + 39 , 6 @ @ public class Enums { < nl > return " sent " ; < nl > case ERROR : < nl > return " error " ; < nl > - / / case READ : < nl > - / / return " read " ; < nl > - / / case RECEIVED : < nl > - / / return " received " ; < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java < nl > index 9f706d9 . . 8ffbc07 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java < nl > @ @ - 95 , 14 + 95 , 23 @ @ public class JsMessage extends JavaScriptObject { < nl > } < nl > reactions . push ( JsReaction . create ( r . getCode ( ) , uids , isOwnSet ) ) ; < nl > } < nl > - < nl > + double sortDate = value . getDate ( ) / 1000 . 0 ; < nl > return create ( rid , sortKey , sender , isOut , date , fullDate , Enums . convert ( value . getMessageState ( ) ) , isOnServer , content , < nl > - reactions ) ; < nl > + reactions , sortDate ) ; < nl > } < nl > } ; < nl > < nl > - public native static JsMessage create ( String rid , String sortKey , JsPeerInfo sender , boolean isOut , String date , JsDate fullDate , String state , boolean isOnServer , JsContent content , < nl > - JsArray < JsReaction > reactions ) / * - { < nl > + public native static JsMessage create ( String rid , < nl > + String sortKey , < nl > + JsPeerInfo sender , < nl > + boolean isOut , < nl > + String date , < nl > + JsDate fullDate , < nl > + String state , < nl > + boolean isOnServer , < nl > + JsContent content , < nl > + JsArray < JsReaction > reactions , < nl > + double sortDate ) / * - { < nl > return { < nl > rid : rid , < nl > sortKey : sortKey , < nl > @ @ - 113 , 7 + 122 , 8 @ @ public class JsMessage extends JavaScriptObject { < nl > state : state , < nl > isOnServer : isOnServer , < nl > content : content , < nl > - reactions : reactions < nl > + reactions : reactions , < nl > + sortDate : sortDate < nl > } ; < nl > } - * / ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java < nl > index 36329b2 . . 17a026a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java < nl > @ @ - 7 , 6 + 7 , 7 @ @ import org . timepedia . exporter . client . Export ; < nl > import org . timepedia . exporter . client . Exportable ; < nl > < nl > import im . actor . core . entity . Message ; < nl > + import im . actor . core . js . annotations . UsedByApp ; < nl > import im . actor . core . viewmodel . ConversationVM ; < nl > import im . actor . runtime . js . mvvm . JsDisplayList ; < nl > import im . actor . runtime . js . mvvm . JsDisplayListBind ; < nl > @ @ - 15 , 37 + 16 , 57 @ @ import im . actor . runtime . mvvm . Value ; < nl > import im . actor . runtime . mvvm . ValueChangedListener ; < nl > < nl > @ Export < nl > - public class JsMessagesBind implements Exportable , JsDisplayListCallback < JsMessage > , ValueChangedListener < Boolean > { < nl > + public class JsMessagesBind implements Exportable , JsDisplayListCallback < JsMessage > { < nl > < nl > private final JsDisplayList < JsMessage , Message > displayList ; < nl > private final JsDisplayListBind < JsMessage , Message > bind ; < nl > private final ConversationVM conversationVM ; < nl > - private final JsMessagesBindClosure closure ; < nl > - private boolean isLoaded ; < nl > + private JsMessagesBindClosure closure ; < nl > private JsArray < JsMessage > arrays ; < nl > private JsArray < JavaScriptObject > overlays ; < nl > private boolean isLocked = true ; < nl > + private ValueChangedListener < Boolean > isLoadedListener = new ValueChangedListener < Boolean > ( ) { < nl > + @ Override < nl > + public void onChanged ( Boolean val , Value < Boolean > valueModel ) { < nl > + if ( ! isLocked ) { < nl > + notifySubscriber ( ) ; < nl > + } < nl > + } < nl > + } ; < nl > + private ValueChangedListener < Long > readDateListener = new ValueChangedListener < Long > ( ) { < nl > + @ Override < nl > + public void onChanged ( Long val , Value < Long > valueModel ) { < nl > + if ( ! isLocked ) { < nl > + notifySubscriber ( ) ; < nl > + } < nl > + } < nl > + } ; < nl > + private ValueChangedListener < Long > receiveDateListener = new ValueChangedListener < Long > ( ) { < nl > + @ Override < nl > + public void onChanged ( Long val , Value < Long > valueModel ) { < nl > + if ( ! isLocked ) { < nl > + notifySubscriber ( ) ; < nl > + } < nl > + } < nl > + } ; < nl > < nl > @ Export < nl > public JsMessagesBind ( JsMessagesBindClosure closure , < nl > JsDisplayList < JsMessage , Message > displayList , < nl > ConversationVM conversationVM ) { < nl > + < nl > this . displayList = displayList ; < nl > this . closure = closure ; < nl > this . conversationVM = conversationVM ; < nl > - this . conversationVM . getIsLoaded ( ) . subscribe ( this ) ; < nl > + this . conversationVM . getIsLoaded ( ) . subscribe ( isLoadedListener ) ; < nl > + this . conversationVM . getReadDate ( ) . subscribe ( readDateListener ) ; < nl > + this . conversationVM . getReceiveDate ( ) . subscribe ( receiveDateListener ) ; < nl > this . bind = displayList . subscribe ( this , true ) ; < nl > this . bind . initAll ( ) ; < nl > - < nl > notifySubscriber ( ) ; < nl > this . isLocked = false ; < nl > } < nl > < nl > - @ Export < nl > - public void unbind ( ) { < nl > - this . displayList . unsubscribe ( this ) ; < nl > - } < nl > - < nl > @ Override < nl > public void onCollectionChanged ( JsArray < JsMessage > array , JsArray < JavaScriptObject > overlays ) { < nl > this . arrays = array ; < nl > @ @ - 55 , 15 + 76 , 20 @ @ public class JsMessagesBind implements Exportable , JsDisplayListCallback < JsMessa < nl > } < nl > } < nl > < nl > - @ Override < nl > - public void onChanged ( Boolean val , Value < Boolean > valueModel ) { < nl > - this . isLoaded = val ; < nl > - if ( ! isLocked ) { < nl > - notifySubscriber ( ) ; < nl > - } < nl > + private void notifySubscriber ( ) { < nl > + boolean isLoaded = this . conversationVM . getIsLoaded ( ) . get ( ) ; < nl > + double readDate = this . conversationVM . getReadDate ( ) . get ( ) / 1000 . 0 ; < nl > + double receiveDate = this . conversationVM . getReceiveDate ( ) . get ( ) / 1000 . 0 ; < nl > + closure . onBind ( arrays , overlays , isLoaded , receiveDate , readDate ) ; < nl > } < nl > < nl > - private void notifySubscriber ( ) { < nl > - closure . onBind ( arrays , overlays , isLoaded ) ; < nl > + @ Export < nl > + @ UsedByApp < nl > + public void unbind ( ) { < nl > + this . closure = null ; < nl > + this . displayList . unsubscribe ( this ) ; < nl > + this . conversationVM . getIsLoaded ( ) . unsubscribe ( isLoadedListener ) ; < nl > + this . conversationVM . getReadDate ( ) . unsubscribe ( readDateListener ) ; < nl > + this . conversationVM . getReceiveDate ( ) . unsubscribe ( receiveDateListener ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBindClosure . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBindClosure . java < nl > index 854eb1c . . cf86329 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBindClosure . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBindClosure . java < nl > @ @ - 10 , 5 + 10 , 9 @ @ import org . timepedia . exporter . client . Exportable ; < nl > @ Export < nl > @ ExportClosure < nl > public interface JsMessagesBindClosure extends Exportable { < nl > - void onBind ( JsArray < JsMessage > array , JsArray < JavaScriptObject > overlays , boolean isLoaded ) ; < nl > + void onBind ( JsArray < JsMessage > array , < nl > + JsArray < JavaScriptObject > overlays , < nl > + boolean isLoaded , < nl > + Double receiveDate , < nl > + Double readDate ) ; < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 8e4ad6f . . c294e30 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 418 , 6 + 418 , 15 @ @ public class JsFacade implements Exportable { < nl > messenger . getSharedChatList ( peer . convert ( ) ) . unsubscribe ( callback ) ; < nl > } < nl > < nl > + public JsMessagesBind bindMessages ( JsPeer peer , JsMessagesBindClosure callback ) { < nl > + if ( callback = = null ) { < nl > + return null ; < nl > + } < nl > + Peer peerC = peer . convert ( ) ; < nl > + < nl > + return new JsMessagesBind ( callback , messenger . getSharedChatList ( peerC ) , messenger . getConversationVM ( peerC ) ) ; < nl > + } < nl > + < nl > public void onMessageShown ( JsPeer peer , JsMessage message ) { < nl > if ( message . isOnServer ( ) ) { < nl > messenger . onMessageShown ( peer . convert ( ) , Long . parseLong ( message . getSortKey ( ) ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > index 85bcd9d . . 62d71b2 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > @ @ - 43 , 6 + 43 , 7 @ @ import im . actor . core . js . providers . electron . JsElectronListener ; < nl > import im . actor . core . js . providers . notification . JsChromePush ; < nl > import im . actor . core . js . providers . notification . JsSafariPush ; < nl > import im . actor . core . js . providers . notification . PushSubscribeResult ; < nl > + import im . actor . core . viewmodel . ConversationVM ; < nl > import im . actor . core . viewmodel . GroupVM ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > import im . actor . runtime . Log ; < nl > @ @ - 236 , 6 + 237 , 8 @ @ public class JsMessenger extends Messenger { < nl > return jsBindingModule . getDialogsGroupedList ( ) ; < nl > } < nl > < nl > + < nl > + < nl > private String getSmallAvatarUrl ( Avatar avatar ) { < nl > if ( avatar ! = null & & avatar . getSmallImage ( ) ! = null ) { < nl > return getFileUrl ( avatar . getSmallImage ( ) . getFileReference ( ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java < nl > new file mode 100644 < nl > index 0000000 . . 36329b2 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java < nl > @ @ - 0 , 0 + 1 , 69 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + import com . google . gwt . core . client . JsArray ; < nl > + < nl > + import org . timepedia . exporter . client . Export ; < nl > + import org . timepedia . exporter . client . Exportable ; < nl > + < nl > + import im . actor . core . entity . Message ; < nl > + import im . actor . core . viewmodel . ConversationVM ; < nl > + import im . actor . runtime . js . mvvm . JsDisplayList ; < nl > + import im . actor . runtime . js . mvvm . JsDisplayListBind ; < nl > + import im . actor . runtime . js . mvvm . JsDisplayListCallback ; < nl > + import im . actor . runtime . mvvm . Value ; < nl > + import im . actor . runtime . mvvm . ValueChangedListener ; < nl > + < nl > + @ Export < nl > + public class JsMessagesBind implements Exportable , JsDisplayListCallback < JsMessage > , ValueChangedListener < Boolean > { < nl > + < nl > + private final JsDisplayList < JsMessage , Message > displayList ; < nl > + private final JsDisplayListBind < JsMessage , Message > bind ; < nl > + private final ConversationVM conversationVM ; < nl > + private final JsMessagesBindClosure closure ; < nl > + private boolean isLoaded ; < nl > + private JsArray < JsMessage > arrays ; < nl > + private JsArray < JavaScriptObject > overlays ; < nl > + private boolean isLocked = true ; < nl > + < nl > + @ Export < nl > + public JsMessagesBind ( JsMessagesBindClosure closure , < nl > + JsDisplayList < JsMessage , Message > displayList , < nl > + ConversationVM conversationVM ) { < nl > + this . displayList = displayList ; < nl > + this . closure = closure ; < nl > + this . conversationVM = conversationVM ; < nl > + this . conversationVM . getIsLoaded ( ) . subscribe ( this ) ; < nl > + this . bind = displayList . subscribe ( this , true ) ; < nl > + this . bind . initAll ( ) ; < nl > + < nl > + notifySubscriber ( ) ; < nl > + this . isLocked = false ; < nl > + } < nl > + < nl > + @ Export < nl > + public void unbind ( ) { < nl > + this . displayList . unsubscribe ( this ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onCollectionChanged ( JsArray < JsMessage > array , JsArray < JavaScriptObject > overlays ) { < nl > + this . arrays = array ; < nl > + this . overlays = overlays ; < nl > + if ( ! isLocked ) { < nl > + notifySubscriber ( ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void onChanged ( Boolean val , Value < Boolean > valueModel ) { < nl > + this . isLoaded = val ; < nl > + if ( ! isLocked ) { < nl > + notifySubscriber ( ) ; < nl > + } < nl > + } < nl > + < nl > + private void notifySubscriber ( ) { < nl > + closure . onBind ( arrays , overlays , isLoaded ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBindClosure . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBindClosure . java < nl > new file mode 100644 < nl > index 0000000 . . 854eb1c < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBindClosure . java < nl > @ @ - 0 , 0 + 1 , 14 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + import com . google . gwt . core . client . JsArray ; < nl > + < nl > + import org . timepedia . exporter . client . Export ; < nl > + import org . timepedia . exporter . client . ExportClosure ; < nl > + import org . timepedia . exporter . client . Exportable ; < nl > + < nl > + @ Export < nl > + @ ExportClosure < nl > + public interface JsMessagesBindClosure extends Exportable { < nl > + void onBind ( JsArray < JsMessage > array , JsArray < JavaScriptObject > overlays , boolean isLoaded ) ; < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index f9db21b . . d2174c8 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 48 , 6 + 48 , 7 @ @ import im . actor . core . util . ActorTrace ; < nl > import im . actor . core . util . Timing ; < nl > import im . actor . core . viewmodel . AppStateVM ; < nl > import im . actor . core . viewmodel . Command ; < nl > + import im . actor . core . viewmodel . ConversationVM ; < nl > import im . actor . core . viewmodel . DialogGroupsVM ; < nl > import im . actor . core . viewmodel . FileCallback ; < nl > import im . actor . core . viewmodel . FileVM ; < nl > @ @ - 582 , 6 + 583 , 16 @ @ public class Messenger { < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > < nl > / * * < nl > + * Getting Conversation VM < nl > + * < nl > + * @ param peer peer < nl > + * @ return Conversation VM < nl > + * / < nl > + public ConversationVM getConversationVM ( Peer peer ) { < nl > + return modules . getMessagesModule ( ) . getConversationVM ( peer ) ; < nl > + } < nl > + < nl > + / * * < nl > * Send Markdown Message with mentions < nl > * < nl > * @ param peer destination peer < nl > @ @ - 747 , 7 + 758 , 7 @ @ public class Messenger { < nl > / * * < nl > * Send json message < nl > * < nl > - * @ param peer destination peer < nl > + * @ param peer destination peer < nl > * @ param content json content < nl > * / < nl > @ ObjectiveCName ( " sendJsonWithPeer : withJson : " )

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 98f516a . . ec55748 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 426 , 23 + 426 , 7 @ @ public class JsFacade implements Exportable { 
 public void preInitChat ( JsPeer peer ) { 
 messenger . onConversationPreLoad ( peer . convert ( ) ) ; 
 } 
 - 
 - @ UsedByApp 
 - public void bindChat ( JsPeer peer , JsDisplayListCallback < JsMessage > callback ) { 
 - if ( callback = = null ) { 
 - return ; 
 - } 
 - messenger . getSharedChatList ( peer . convert ( ) ) . subscribe ( callback , true ) ; 
 - } 
 - 
 - @ UsedByApp 
 - public void unbindChat ( JsPeer peer , JsDisplayListCallback < JsMessage > callback ) { 
 - if ( callback = = null ) { 
 - return ; 
 - } 
 - messenger . getSharedChatList ( peer . convert ( ) ) . unsubscribe ( callback ) ; 
 - } 
 - 
 + 
 @ UsedByApp 
 public JsMessagesBind bindMessages ( JsPeer peer , JsMessagesBindClosure callback ) { 
 if ( callback = = null ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / Enums . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / Enums . java 
 index 718cdf1 . . 17f82ee 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / Enums . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / Enums . java 
 @ @ - 39 , 10 + 39 , 6 @ @ public class Enums { 
 return " sent " ; 
 case ERROR : 
 return " error " ; 
 - / / case READ : 
 - / / return " read " ; 
 - / / case RECEIVED : 
 - / / return " received " ; 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java 
 index 9f706d9 . . 8ffbc07 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java 
 @ @ - 95 , 14 + 95 , 23 @ @ public class JsMessage extends JavaScriptObject { 
 } 
 reactions . push ( JsReaction . create ( r . getCode ( ) , uids , isOwnSet ) ) ; 
 } 
 - 
 + double sortDate = value . getDate ( ) / 1000 . 0 ; 
 return create ( rid , sortKey , sender , isOut , date , fullDate , Enums . convert ( value . getMessageState ( ) ) , isOnServer , content , 
 - reactions ) ; 
 + reactions , sortDate ) ; 
 } 
 } ; 
 
 - public native static JsMessage create ( String rid , String sortKey , JsPeerInfo sender , boolean isOut , String date , JsDate fullDate , String state , boolean isOnServer , JsContent content , 
 - JsArray < JsReaction > reactions ) / * - { 
 + public native static JsMessage create ( String rid , 
 + String sortKey , 
 + JsPeerInfo sender , 
 + boolean isOut , 
 + String date , 
 + JsDate fullDate , 
 + String state , 
 + boolean isOnServer , 
 + JsContent content , 
 + JsArray < JsReaction > reactions , 
 + double sortDate ) / * - { 
 return { 
 rid : rid , 
 sortKey : sortKey , 
 @ @ - 113 , 7 + 122 , 8 @ @ public class JsMessage extends JavaScriptObject { 
 state : state , 
 isOnServer : isOnServer , 
 content : content , 
 - reactions : reactions 
 + reactions : reactions , 
 + sortDate : sortDate 
 } ; 
 } - * / ; 
 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java 
 index 36329b2 . . 17a026a 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java 
 @ @ - 7 , 6 + 7 , 7 @ @ import org . timepedia . exporter . client . Export ; 
 import org . timepedia . exporter . client . Exportable ; 
 
 import im . actor . core . entity . Message ; 
 + import im . actor . core . js . annotations . UsedByApp ; 
 import im . actor . core . viewmodel . ConversationVM ; 
 import im . actor . runtime . js . mvvm . JsDisplayList ; 
 import im . actor . runtime . js . mvvm . JsDisplayListBind ; 
 @ @ - 15 , 37 + 16 , 57 @ @ import im . actor . runtime . mvvm . Value ; 
 import im . actor . runtime . mvvm . ValueChangedListener ; 
 
 @ Export 
 - public class JsMessagesBind implements Exportable , JsDisplayListCallback < JsMessage > , ValueChangedListener < Boolean > { 
 + public class JsMessagesBind implements Exportable , JsDisplayListCallback < JsMessage > { 
 
 private final JsDisplayList < JsMessage , Message > displayList ; 
 private final JsDisplayListBind < JsMessage , Message > bind ; 
 private final ConversationVM conversationVM ; 
 - private final JsMessagesBindClosure closure ; 
 - private boolean isLoaded ; 
 + private JsMessagesBindClosure closure ; 
 private JsArray < JsMessage > arrays ; 
 private JsArray < JavaScriptObject > overlays ; 
 private boolean isLocked = true ; 
 + private ValueChangedListener < Boolean > isLoadedListener = new ValueChangedListener < Boolean > ( ) { 
 + @ Override 
 + public void onChanged ( Boolean val , Value < Boolean > valueModel ) { 
 + if ( ! isLocked ) { 
 + notifySubscriber ( ) ; 
 + } 
 + } 
 + } ; 
 + private ValueChangedListener < Long > readDateListener = new ValueChangedListener < Long > ( ) { 
 + @ Override 
 + public void onChanged ( Long val , Value < Long > valueModel ) { 
 + if ( ! isLocked ) { 
 + notifySubscriber ( ) ; 
 + } 
 + } 
 + } ; 
 + private ValueChangedListener < Long > receiveDateListener = new ValueChangedListener < Long > ( ) { 
 + @ Override 
 + public void onChanged ( Long val , Value < Long > valueModel ) { 
 + if ( ! isLocked ) { 
 + notifySubscriber ( ) ; 
 + } 
 + } 
 + } ; 
 
 @ Export 
 public JsMessagesBind ( JsMessagesBindClosure closure , 
 JsDisplayList < JsMessage , Message > displayList , 
 ConversationVM conversationVM ) { 
 + 
 this . displayList = displayList ; 
 this . closure = closure ; 
 this . conversationVM = conversationVM ; 
 - this . conversationVM . getIsLoaded ( ) . subscribe ( this ) ; 
 + this . conversationVM . getIsLoaded ( ) . subscribe ( isLoadedListener ) ; 
 + this . conversationVM . getReadDate ( ) . subscribe ( readDateListener ) ; 
 + this . conversationVM . getReceiveDate ( ) . subscribe ( receiveDateListener ) ; 
 this . bind = displayList . subscribe ( this , true ) ; 
 this . bind . initAll ( ) ; 
 - 
 notifySubscriber ( ) ; 
 this . isLocked = false ; 
 } 
 
 - @ Export 
 - public void unbind ( ) { 
 - this . displayList . unsubscribe ( this ) ; 
 - } 
 - 
 @ Override 
 public void onCollectionChanged ( JsArray < JsMessage > array , JsArray < JavaScriptObject > overlays ) { 
 this . arrays = array ; 
 @ @ - 55 , 15 + 76 , 20 @ @ public class JsMessagesBind implements Exportable , JsDisplayListCallback < JsMessa 
 } 
 } 
 
 - @ Override 
 - public void onChanged ( Boolean val , Value < Boolean > valueModel ) { 
 - this . isLoaded = val ; 
 - if ( ! isLocked ) { 
 - notifySubscriber ( ) ; 
 - } 
 + private void notifySubscriber ( ) { 
 + boolean isLoaded = this . conversationVM . getIsLoaded ( ) . get ( ) ; 
 + double readDate = this . conversationVM . getReadDate ( ) . get ( ) / 1000 . 0 ; 
 + double receiveDate = this . conversationVM . getReceiveDate ( ) . get ( ) / 1000 . 0 ; 
 + closure . onBind ( arrays , overlays , isLoaded , receiveDate , readDate ) ; 
 } 
 
 - private void notifySubscriber ( ) { 
 - closure . onBind ( arrays , overlays , isLoaded ) ; 
 + @ Export 
 + @ UsedByApp 
 + public void unbind ( ) { 
 + this . closure = null ; 
 + this . displayList . unsubscribe ( this ) ; 
 + this . conversationVM . getIsLoaded ( ) . unsubscribe ( isLoadedListener ) ; 
 + this . conversationVM . getReadDate ( ) . unsubscribe ( readDateListener ) ; 
 + this . conversationVM . getReceiveDate ( ) . unsubscribe ( receiveDateListener ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBindClosure . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBindClosure . java 
 index 854eb1c . . cf86329 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBindClosure . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBindClosure . java 
 @ @ - 10 , 5 + 10 , 9 @ @ import org . timepedia . exporter . client . Exportable ; 
 @ Export 
 @ ExportClosure 
 public interface JsMessagesBindClosure extends Exportable { 
 - void onBind ( JsArray < JsMessage > array , JsArray < JavaScriptObject > overlays , boolean isLoaded ) ; 
 + void onBind ( JsArray < JsMessage > array , 
 + JsArray < JavaScriptObject > overlays , 
 + boolean isLoaded , 
 + Double receiveDate , 
 + Double readDate ) ; 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 8e4ad6f . . c294e30 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 418 , 6 + 418 , 15 @ @ public class JsFacade implements Exportable { 
 messenger . getSharedChatList ( peer . convert ( ) ) . unsubscribe ( callback ) ; 
 } 
 
 + public JsMessagesBind bindMessages ( JsPeer peer , JsMessagesBindClosure callback ) { 
 + if ( callback = = null ) { 
 + return null ; 
 + } 
 + Peer peerC = peer . convert ( ) ; 
 + 
 + return new JsMessagesBind ( callback , messenger . getSharedChatList ( peerC ) , messenger . getConversationVM ( peerC ) ) ; 
 + } 
 + 
 public void onMessageShown ( JsPeer peer , JsMessage message ) { 
 if ( message . isOnServer ( ) ) { 
 messenger . onMessageShown ( peer . convert ( ) , Long . parseLong ( message . getSortKey ( ) ) ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 index 85bcd9d . . 62d71b2 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 @ @ - 43 , 6 + 43 , 7 @ @ import im . actor . core . js . providers . electron . JsElectronListener ; 
 import im . actor . core . js . providers . notification . JsChromePush ; 
 import im . actor . core . js . providers . notification . JsSafariPush ; 
 import im . actor . core . js . providers . notification . PushSubscribeResult ; 
 + import im . actor . core . viewmodel . ConversationVM ; 
 import im . actor . core . viewmodel . GroupVM ; 
 import im . actor . core . viewmodel . UserVM ; 
 import im . actor . runtime . Log ; 
 @ @ - 236 , 6 + 237 , 8 @ @ public class JsMessenger extends Messenger { 
 return jsBindingModule . getDialogsGroupedList ( ) ; 
 } 
 
 + 
 + 
 private String getSmallAvatarUrl ( Avatar avatar ) { 
 if ( avatar ! = null & & avatar . getSmallImage ( ) ! = null ) { 
 return getFileUrl ( avatar . getSmallImage ( ) . getFileReference ( ) ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java 
 new file mode 100644 
 index 0000000 . . 36329b2 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java 
 @ @ - 0 , 0 + 1 , 69 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + import com . google . gwt . core . client . JsArray ; 
 + 
 + import org . timepedia . exporter . client . Export ; 
 + import org . timepedia . exporter . client . Exportable ; 
 + 
 + import im . actor . core . entity . Message ; 
 + import im . actor . core . viewmodel . ConversationVM ; 
 + import im . actor . runtime . js . mvvm . JsDisplayList ; 
 + import im . actor . runtime . js . mvvm . JsDisplayListBind ; 
 + import im . actor . runtime . js . mvvm . JsDisplayListCallback ; 
 + import im . actor . runtime . mvvm . Value ; 
 + import im . actor . runtime . mvvm . ValueChangedListener ; 
 + 
 + @ Export 
 + public class JsMessagesBind implements Exportable , JsDisplayListCallback < JsMessage > , ValueChangedListener < Boolean > { 
 + 
 + private final JsDisplayList < JsMessage , Message > displayList ; 
 + private final JsDisplayListBind < JsMessage , Message > bind ; 
 + private final ConversationVM conversationVM ; 
 + private final JsMessagesBindClosure closure ; 
 + private boolean isLoaded ; 
 + private JsArray < JsMessage > arrays ; 
 + private JsArray < JavaScriptObject > overlays ; 
 + private boolean isLocked = true ; 
 + 
 + @ Export 
 + public JsMessagesBind ( JsMessagesBindClosure closure , 
 + JsDisplayList < JsMessage , Message > displayList , 
 + ConversationVM conversationVM ) { 
 + this . displayList = displayList ; 
 + this . closure = closure ; 
 + this . conversationVM = conversationVM ; 
 + this . conversationVM . getIsLoaded ( ) . subscribe ( this ) ; 
 + this . bind = displayList . subscribe ( this , true ) ; 
 + this . bind . initAll ( ) ; 
 + 
 + notifySubscriber ( ) ; 
 + this . isLocked = false ; 
 + } 
 + 
 + @ Export 
 + public void unbind ( ) { 
 + this . displayList . unsubscribe ( this ) ; 
 + } 
 + 
 + @ Override 
 + public void onCollectionChanged ( JsArray < JsMessage > array , JsArray < JavaScriptObject > overlays ) { 
 + this . arrays = array ; 
 + this . overlays = overlays ; 
 + if ( ! isLocked ) { 
 + notifySubscriber ( ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void onChanged ( Boolean val , Value < Boolean > valueModel ) { 
 + this . isLoaded = val ; 
 + if ( ! isLocked ) { 
 + notifySubscriber ( ) ; 
 + } 
 + } 
 + 
 + private void notifySubscriber ( ) { 
 + closure . onBind ( arrays , overlays , isLoaded ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBindClosure . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBindClosure . java 
 new file mode 100644 
 index 0000000 . . 854eb1c 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBindClosure . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + import com . google . gwt . core . client . JsArray ; 
 + 
 + import org . timepedia . exporter . client . Export ; 
 + import org . timepedia . exporter . client . ExportClosure ; 
 + import org . timepedia . exporter . client . Exportable ; 
 + 
 + @ Export 
 + @ ExportClosure 
 + public interface JsMessagesBindClosure extends Exportable { 
 + void onBind ( JsArray < JsMessage > array , JsArray < JavaScriptObject > overlays , boolean isLoaded ) ; 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index f9db21b . . d2174c8 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 48 , 6 + 48 , 7 @ @ import im . actor . core . util . ActorTrace ; 
 import im . actor . core . util . Timing ; 
 import im . actor . core . viewmodel . AppStateVM ; 
 import im . actor . core . viewmodel . Command ; 
 + import im . actor . core . viewmodel . ConversationVM ; 
 import im . actor . core . viewmodel . DialogGroupsVM ; 
 import im . actor . core . viewmodel . FileCallback ; 
 import im . actor . core . viewmodel . FileVM ; 
 @ @ - 582 , 6 + 583 , 16 @ @ public class Messenger { 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 / * * 
 + * Getting Conversation VM 
 + * 
 + * @ param peer peer 
 + * @ return Conversation VM 
 + * / 
 + public ConversationVM getConversationVM ( Peer peer ) { 
 + return modules . getMessagesModule ( ) . getConversationVM ( peer ) ; 
 + } 
 + 
 + / * * 
 * Send Markdown Message with mentions 
 * 
 * @ param peer destination peer 
 @ @ - 747 , 7 + 758 , 7 @ @ public class Messenger { 
 / * * 
 * Send json message 
 * 
 - * @ param peer destination peer 
 + * @ param peer destination peer 
 * @ param content json content 
 * / 
 @ ObjectiveCName ( " sendJsonWithPeer : withJson : " )
