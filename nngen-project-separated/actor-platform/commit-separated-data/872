BLEU SCORE: 0.5760844201603896

TEST MSG: fix ( server : eventbus ) : send EventBus . Disposed on disposal
GENERATED MSG: fix ( server : eventbus ) : send update on explicit dispose

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > index 021c698 . . 4934b98 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > @ @ - 160 , 8 + 160 , 7 @ @ final class EventBusMediator extends Actor with ActorLogging { < nl > case ConsumerTimedOut ( authId ) ⇒ < nl > if ( ( owner . isDefined & & consumers . ownerAuthIds = = Set ( authId ) ) | | consumers . authIds = = Set ( authId ) ) { < nl > log . debug ( " Disposing as no more clients connected " ) < nl > - broadcast ( UpdateEventBusDisposed ( id ) ) < nl > - context stop self < nl > + dispose ( ) < nl > } else { < nl > consumers . remove ( authId ) match { < nl > case Some ( ( userId , deviceId ) ) ⇒ < nl > @ @ - 178 , 8 + 177 , 7 @ @ final class EventBusMediator extends Actor with ActorLogging { < nl > case Dispose ( clientUserId ) ⇒ < nl > if ( owner . contains ( clientUserId ) ) { < nl > log . debug ( " Disposing by owner request " ) < nl > - broadcast ( UpdateEventBusDisposed ( id ) ) < nl > - context stop self < nl > + dispose ( ) < nl > } else sender ( ) ! Status . Failure ( new RuntimeException ( " Attempt to dispose by not an owner " ) ) < nl > case subscribe @ Subscribe ( ref ) ⇒ < nl > this . internalConsumers . add ( ref ) < nl > @ @ - 189 , 6 + 187 , 12 @ @ final class EventBusMediator extends Actor with ActorLogging { < nl > this . internalConsumers . remove ( ref ) < nl > } < nl > < nl > + private def dispose ( ) : Unit = { < nl > + broadcast ( UpdateEventBusDisposed ( id ) ) < nl > + internalConsumers foreach ( _ ! EventBus . Disposed ( id ) ) < nl > + context stop self < nl > + } < nl > + < nl > private def broadcast ( update : Update ) : Unit = < nl > consumers . authIds foreach ( weakExt . pushUpdate ( _ , update , None , None ) )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > index 8350828 . . acde905 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > @ @ - 157 , 7 + 157 , 7 @ @ final class EventBusMediator extends Actor with ActorLogging { < nl > } < nl > case ConsumerTimedOut ( authId ) ⇒ < nl > if ( ( owner . isDefined & & consumers . ownerAuthIds = = Set ( authId ) ) | | consumers . authIds = = Set ( authId ) ) { < nl > - log . debug ( " Disposing " ) < nl > + log . debug ( " Disposing as no more clients connected " ) < nl > broadcast ( UpdateEventBusDisposed ( id ) ) < nl > context stop self < nl > } else { < nl > @ @ - 175 , 6 + 175 , 8 @ @ final class EventBusMediator extends Actor with ActorLogging { < nl > sender ( ) ! JoinAck ( deviceId ) < nl > case Dispose ( clientUserId ) ⇒ < nl > if ( owner . contains ( clientUserId ) ) { < nl > + log . debug ( " Disposing by owner request " ) < nl > + broadcast ( UpdateEventBusDisposed ( id ) ) < nl > context stop self < nl > } else sender ( ) ! Status . Failure ( new RuntimeException ( " Attempt to dispose by not an owner " ) ) < nl > case subscribe @ Subscribe ( ref ) ⇒

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 index 021c698 . . 4934b98 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 @ @ - 160 , 8 + 160 , 7 @ @ final class EventBusMediator extends Actor with ActorLogging { 
 case ConsumerTimedOut ( authId ) ⇒ 
 if ( ( owner . isDefined & & consumers . ownerAuthIds = = Set ( authId ) ) | | consumers . authIds = = Set ( authId ) ) { 
 log . debug ( " Disposing as no more clients connected " ) 
 - broadcast ( UpdateEventBusDisposed ( id ) ) 
 - context stop self 
 + dispose ( ) 
 } else { 
 consumers . remove ( authId ) match { 
 case Some ( ( userId , deviceId ) ) ⇒ 
 @ @ - 178 , 8 + 177 , 7 @ @ final class EventBusMediator extends Actor with ActorLogging { 
 case Dispose ( clientUserId ) ⇒ 
 if ( owner . contains ( clientUserId ) ) { 
 log . debug ( " Disposing by owner request " ) 
 - broadcast ( UpdateEventBusDisposed ( id ) ) 
 - context stop self 
 + dispose ( ) 
 } else sender ( ) ! Status . Failure ( new RuntimeException ( " Attempt to dispose by not an owner " ) ) 
 case subscribe @ Subscribe ( ref ) ⇒ 
 this . internalConsumers . add ( ref ) 
 @ @ - 189 , 6 + 187 , 12 @ @ final class EventBusMediator extends Actor with ActorLogging { 
 this . internalConsumers . remove ( ref ) 
 } 
 
 + private def dispose ( ) : Unit = { 
 + broadcast ( UpdateEventBusDisposed ( id ) ) 
 + internalConsumers foreach ( _ ! EventBus . Disposed ( id ) ) 
 + context stop self 
 + } 
 + 
 private def broadcast ( update : Update ) : Unit = 
 consumers . authIds foreach ( weakExt . pushUpdate ( _ , update , None , None ) )

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 index 8350828 . . acde905 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 @ @ - 157 , 7 + 157 , 7 @ @ final class EventBusMediator extends Actor with ActorLogging { 
 } 
 case ConsumerTimedOut ( authId ) ⇒ 
 if ( ( owner . isDefined & & consumers . ownerAuthIds = = Set ( authId ) ) | | consumers . authIds = = Set ( authId ) ) { 
 - log . debug ( " Disposing " ) 
 + log . debug ( " Disposing as no more clients connected " ) 
 broadcast ( UpdateEventBusDisposed ( id ) ) 
 context stop self 
 } else { 
 @ @ - 175 , 6 + 175 , 8 @ @ final class EventBusMediator extends Actor with ActorLogging { 
 sender ( ) ! JoinAck ( deviceId ) 
 case Dispose ( clientUserId ) ⇒ 
 if ( owner . contains ( clientUserId ) ) { 
 + log . debug ( " Disposing by owner request " ) 
 + broadcast ( UpdateEventBusDisposed ( id ) ) 
 context stop self 
 } else sender ( ) ! Status . Failure ( new RuntimeException ( " Attempt to dispose by not an owner " ) ) 
 case subscribe @ Subscribe ( ref ) ⇒
