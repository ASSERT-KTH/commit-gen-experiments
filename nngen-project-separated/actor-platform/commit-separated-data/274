BLEU SCORE: 0.11868405219520975

TEST MSG: fix ( runtime ) : Fixing generic immediate dispatcher init
GENERATED MSG: fix ( IOS ) : fixing falling on launch

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericImmediateDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericImmediateDispatcher . java < nl > index 19b3bf4 . . c923e96 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericImmediateDispatcher . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericImmediateDispatcher . java < nl > @ @ - 9 , 38 + 9 , 27 @ @ import im . actor . runtime . threading . ImmediateDispatcher ; < nl > < nl > public class GenericImmediateDispatcher implements ImmediateDispatcher { < nl > < nl > - private Executor EXECUTOR ; < nl > - private boolean isInited ; < nl > + private final Executor EXECUTOR ; < nl > < nl > public GenericImmediateDispatcher ( String name , ThreadPriority priority ) { < nl > - Runtime . dispatch ( ( ) - > { < nl > - EXECUTOR = Executors . newSingleThreadExecutor ( r - > { < nl > - Thread workingThread = new Thread ( r ) ; < nl > - switch ( priority ) { < nl > - case HIGH : < nl > - workingThread . setPriority ( Thread . MAX _ PRIORITY ) ; < nl > - case LOW : < nl > - workingThread . setPriority ( Thread . MIN _ PRIORITY ) ; < nl > - default : < nl > - case NORMAL : < nl > - workingThread . setPriority ( Thread . NORM _ PRIORITY ) ; < nl > - } < nl > - workingThread . setName ( name ) ; < nl > - return workingThread ; < nl > - } ) ; < nl > - isInited = true ; < nl > + EXECUTOR = Executors . newSingleThreadExecutor ( r - > { < nl > + Thread workingThread = new Thread ( r ) ; < nl > + switch ( priority ) { < nl > + case HIGH : < nl > + workingThread . setPriority ( Thread . MAX _ PRIORITY ) ; < nl > + case LOW : < nl > + workingThread . setPriority ( Thread . MIN _ PRIORITY ) ; < nl > + default : < nl > + case NORMAL : < nl > + workingThread . setPriority ( Thread . NORM _ PRIORITY ) ; < nl > + } < nl > + workingThread . setName ( name ) ; < nl > + return workingThread ; < nl > } ) ; < nl > } < nl > < nl > @ Override < nl > public synchronized void dispatchNow ( Runnable runnable ) { < nl > - if ( EXECUTOR = = null ) { < nl > - EXECUTOR = Executors . newSingleThreadExecutor ( ) ; < nl > - } < nl > - if ( isInited ) { < nl > - EXECUTOR . execute ( runnable ) ; < nl > - } else { < nl > - Runtime . dispatch ( ( ) - > EXECUTOR . execute ( runnable ) ) ; < nl > - } < nl > + EXECUTOR . execute ( runnable ) ; < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericImmediateDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericImmediateDispatcher . java < nl > index 92e656e . . 19b3bf4 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericImmediateDispatcher . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericImmediateDispatcher . java < nl > @ @ - 9 , 12 + 9 , 12 @ @ import im . actor . runtime . threading . ImmediateDispatcher ; < nl > < nl > public class GenericImmediateDispatcher implements ImmediateDispatcher { < nl > < nl > - private Executor executor ; < nl > + private Executor EXECUTOR ; < nl > private boolean isInited ; < nl > < nl > public GenericImmediateDispatcher ( String name , ThreadPriority priority ) { < nl > Runtime . dispatch ( ( ) - > { < nl > - executor = Executors . newSingleThreadExecutor ( r - > { < nl > + EXECUTOR = Executors . newSingleThreadExecutor ( r - > { < nl > Thread workingThread = new Thread ( r ) ; < nl > switch ( priority ) { < nl > case HIGH : < nl > @ @ - 34 , 10 + 34 , 13 @ @ public class GenericImmediateDispatcher implements ImmediateDispatcher { < nl > < nl > @ Override < nl > public synchronized void dispatchNow ( Runnable runnable ) { < nl > + if ( EXECUTOR = = null ) { < nl > + EXECUTOR = Executors . newSingleThreadExecutor ( ) ; < nl > + } < nl > if ( isInited ) { < nl > - executor . execute ( runnable ) ; < nl > + EXECUTOR . execute ( runnable ) ; < nl > } else { < nl > - Runtime . dispatch ( ( ) - > executor . execute ( runnable ) ) ; < nl > + Runtime . dispatch ( ( ) - > EXECUTOR . execute ( runnable ) ) ; < nl > } < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericImmediateDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericImmediateDispatcher . java 
 index 19b3bf4 . . c923e96 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericImmediateDispatcher . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericImmediateDispatcher . java 
 @ @ - 9 , 38 + 9 , 27 @ @ import im . actor . runtime . threading . ImmediateDispatcher ; 
 
 public class GenericImmediateDispatcher implements ImmediateDispatcher { 
 
 - private Executor EXECUTOR ; 
 - private boolean isInited ; 
 + private final Executor EXECUTOR ; 
 
 public GenericImmediateDispatcher ( String name , ThreadPriority priority ) { 
 - Runtime . dispatch ( ( ) - > { 
 - EXECUTOR = Executors . newSingleThreadExecutor ( r - > { 
 - Thread workingThread = new Thread ( r ) ; 
 - switch ( priority ) { 
 - case HIGH : 
 - workingThread . setPriority ( Thread . MAX _ PRIORITY ) ; 
 - case LOW : 
 - workingThread . setPriority ( Thread . MIN _ PRIORITY ) ; 
 - default : 
 - case NORMAL : 
 - workingThread . setPriority ( Thread . NORM _ PRIORITY ) ; 
 - } 
 - workingThread . setName ( name ) ; 
 - return workingThread ; 
 - } ) ; 
 - isInited = true ; 
 + EXECUTOR = Executors . newSingleThreadExecutor ( r - > { 
 + Thread workingThread = new Thread ( r ) ; 
 + switch ( priority ) { 
 + case HIGH : 
 + workingThread . setPriority ( Thread . MAX _ PRIORITY ) ; 
 + case LOW : 
 + workingThread . setPriority ( Thread . MIN _ PRIORITY ) ; 
 + default : 
 + case NORMAL : 
 + workingThread . setPriority ( Thread . NORM _ PRIORITY ) ; 
 + } 
 + workingThread . setName ( name ) ; 
 + return workingThread ; 
 } ) ; 
 } 
 
 @ Override 
 public synchronized void dispatchNow ( Runnable runnable ) { 
 - if ( EXECUTOR = = null ) { 
 - EXECUTOR = Executors . newSingleThreadExecutor ( ) ; 
 - } 
 - if ( isInited ) { 
 - EXECUTOR . execute ( runnable ) ; 
 - } else { 
 - Runtime . dispatch ( ( ) - > EXECUTOR . execute ( runnable ) ) ; 
 - } 
 + EXECUTOR . execute ( runnable ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericImmediateDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericImmediateDispatcher . java 
 index 92e656e . . 19b3bf4 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericImmediateDispatcher . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericImmediateDispatcher . java 
 @ @ - 9 , 12 + 9 , 12 @ @ import im . actor . runtime . threading . ImmediateDispatcher ; 
 
 public class GenericImmediateDispatcher implements ImmediateDispatcher { 
 
 - private Executor executor ; 
 + private Executor EXECUTOR ; 
 private boolean isInited ; 
 
 public GenericImmediateDispatcher ( String name , ThreadPriority priority ) { 
 Runtime . dispatch ( ( ) - > { 
 - executor = Executors . newSingleThreadExecutor ( r - > { 
 + EXECUTOR = Executors . newSingleThreadExecutor ( r - > { 
 Thread workingThread = new Thread ( r ) ; 
 switch ( priority ) { 
 case HIGH : 
 @ @ - 34 , 10 + 34 , 13 @ @ public class GenericImmediateDispatcher implements ImmediateDispatcher { 
 
 @ Override 
 public synchronized void dispatchNow ( Runnable runnable ) { 
 + if ( EXECUTOR = = null ) { 
 + EXECUTOR = Executors . newSingleThreadExecutor ( ) ; 
 + } 
 if ( isInited ) { 
 - executor . execute ( runnable ) ; 
 + EXECUTOR . execute ( runnable ) ; 
 } else { 
 - Runtime . dispatch ( ( ) - > executor . execute ( runnable ) ) ; 
 + Runtime . dispatch ( ( ) - > EXECUTOR . execute ( runnable ) ) ; 
 } 
 } 
 }
