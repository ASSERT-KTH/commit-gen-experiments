BLEU SCORE: 0.5873949094699213

TEST MSG: fix ( core ) : Fixing Global Counter updates
GENERATED MSG: fix ( core ) : Fixing ephermal keys generation

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > index a4ac5ad . . 62448a1 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > @ @ - 155 , 7 + 155 , 9 @ @ public class AndroidMessenger extends im . actor . core . Messenger { < nl > modules . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalCounter ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { < nl > @ Override < nl > public void onChanged ( Integer val , Value < Integer > valueModel ) { < nl > - ShortcutBadger . with ( AndroidContext . getContext ( ) ) . count ( val ) ; < nl > + if ( val ! = null ) { < nl > + ShortcutBadger . with ( AndroidContext . getContext ( ) ) . count ( val ) ; < nl > + } < nl > } < nl > } ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > index 1fa1395 . . 9ee47c6 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > @ @ - 601 , 7 + 601 , 7 @ @ public class RouterActor extends ModuleActor { < nl > groups . add ( new DialogGroup ( i . getTitle ( ) , i . getKey ( ) , dialogSmalls ) ) ; < nl > } < nl > context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; < nl > - context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalCounter ( ) . change ( counter ) ; < nl > + context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . onGlobalCounterChanged ( counter ) ; < nl > } < nl > < nl > / /
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java < nl > index c58469c . . 3e2a496 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java < nl > @ @ - 130 , 7 + 130 , 7 @ @ public class KeyManagerActor extends ModuleActor { < nl > < nl > / / Generating ephemeral keys < nl > List < KeyValueRecord > records = ephemeralStorage . loadAllItems ( ) ; < nl > - for ( int i = 0 ; i < records . size ( ) - 100 ; i + + ) { < nl > + for ( int i = 0 ; i < 100 - records . size ( ) ; i + + ) { < nl > long randomId = RandomUtils . nextRid ( ) ; < nl > EncryptionKey encryptionKey = new EncryptionKey ( < nl > randomId , < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceHandlerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceHandlerActor . java < nl > index 831d631 . . 96f33da 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceHandlerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceHandlerActor . java < nl > @ @ - 23 , 7 + 23 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > this . processor . processWeakUpdate ( update , date ) ; < nl > < nl > Log . d ( TAG , " Unlocking sequence in 1500 ms " ) ; < nl > - sender ( ) . send ( new StashIgnore ( new SequenceActor . UpdateProcessed ( ) ) , 1500 ) ; < nl > + sender ( ) . send ( new StashIgnore ( new SequenceActor . UpdateProcessed ( ) ) ) ; < nl > } < nl > < nl > @ Override

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 index a4ac5ad . . 62448a1 100644 
 - - - a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 + + + b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 @ @ - 155 , 7 + 155 , 9 @ @ public class AndroidMessenger extends im . actor . core . Messenger { 
 modules . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalCounter ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { 
 @ Override 
 public void onChanged ( Integer val , Value < Integer > valueModel ) { 
 - ShortcutBadger . with ( AndroidContext . getContext ( ) ) . count ( val ) ; 
 + if ( val ! = null ) { 
 + ShortcutBadger . with ( AndroidContext . getContext ( ) ) . count ( val ) ; 
 + } 
 } 
 } ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 index 1fa1395 . . 9ee47c6 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 @ @ - 601 , 7 + 601 , 7 @ @ public class RouterActor extends ModuleActor { 
 groups . add ( new DialogGroup ( i . getTitle ( ) , i . getKey ( ) , dialogSmalls ) ) ; 
 } 
 context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; 
 - context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalCounter ( ) . change ( counter ) ; 
 + context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . onGlobalCounterChanged ( counter ) ; 
 } 
 
 / /

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java 
 index c58469c . . 3e2a496 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java 
 @ @ - 130 , 7 + 130 , 7 @ @ public class KeyManagerActor extends ModuleActor { 
 
 / / Generating ephemeral keys 
 List < KeyValueRecord > records = ephemeralStorage . loadAllItems ( ) ; 
 - for ( int i = 0 ; i < records . size ( ) - 100 ; i + + ) { 
 + for ( int i = 0 ; i < 100 - records . size ( ) ; i + + ) { 
 long randomId = RandomUtils . nextRid ( ) ; 
 EncryptionKey encryptionKey = new EncryptionKey ( 
 randomId , 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceHandlerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceHandlerActor . java 
 index 831d631 . . 96f33da 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceHandlerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceHandlerActor . java 
 @ @ - 23 , 7 + 23 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { 
 this . processor . processWeakUpdate ( update , date ) ; 
 
 Log . d ( TAG , " Unlocking sequence in 1500 ms " ) ; 
 - sender ( ) . send ( new StashIgnore ( new SequenceActor . UpdateProcessed ( ) ) , 1500 ) ; 
 + sender ( ) . send ( new StashIgnore ( new SequenceActor . UpdateProcessed ( ) ) ) ; 
 } 
 
 @ Override
