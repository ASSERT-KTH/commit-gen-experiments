BLEU SCORE: 0.06676784496926842

TEST MSG: fix ( server : groups ) : take group type from event
GENERATED MSG: fix ( sever ) : don ' t throw exception when there is no bot in group

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > index e3dda14 . . 566d29f 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > @ @ - 366 , 6 + 366 , 9 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { < nl > UpdateGroupMembersUpdated ( groupId , members = Vector . empty ) < nl > ) < nl > < nl > + / / TODO : add UpdateIsDeleted < nl > + / / TODO : for old API updates as in leacve < nl > + < nl > val result : Future [ SeqState ] = for { < nl > _ ← db . run ( HistoryMessageRepo . deleteAll ( cmd . clientUserId , apiGroupPeer . asModel ) ) < nl > _ ← Future . traverse ( deleteGroupMembersUpdates ) { update ⇒ < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > index fa51af8 . . c289fdd 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > @ @ - 167 , 6 + 167 , 7 @ @ private [ group ] final case class GroupState ( < nl > < nl > override def updated ( e : Event ) : GroupState = e match { < nl > case evt : Created ⇒ < nl > + val typeOfGroup = evt . typ . getOrElse ( GroupType . General ) < nl > this . copy ( < nl > id = evt . groupId , < nl > createdAt = Some ( evt . ts ) , < nl > @ @ - 177 , 7 + 178 , 7 @ @ private [ group ] final case class GroupState ( < nl > avatar = None , < nl > topic = None , < nl > shortName = None , < nl > - groupType = evt . typ . getOrElse ( GroupType . General ) , < nl > + groupType = typeOfGroup , < nl > isHidden = evt . isHidden getOrElse false , < nl > isHistoryShared = evt . isHistoryShared getOrElse false , < nl > members = ( < nl > @ @ - 194 , 7 + 195 , 7 @ @ private [ group ] final case class GroupState ( < nl > invitedUserIds = evt . userIds . filterNot ( _ = = evt . creatorUserId ) . toSet , < nl > accessHash = evt . accessHash , < nl > adminSettings = < nl > - if ( groupType . isChannel ) AdminSettings . ChannelsDefault < nl > + if ( typeOfGroup . isChannel ) AdminSettings . ChannelsDefault < nl > else AdminSettings . PlainDefault , < nl > bot = None , < nl > extensions = ( evt . extensions map { / / TODO : validate is it right ?
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto < nl > index de4d02f . . 8288744 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / group . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / group . proto < nl > @ @ - 213 , 7 + 213 , 7 @ @ message GroupQueries { < nl > message GetMembersResponse { < nl > repeated int32 member _ ids = 1 ; < nl > repeated int32 invited _ user _ ids = 2 ; < nl > - required int32 bot _ id = 3 ; < nl > + optional int32 bot _ id = 3 ; < nl > } < nl > < nl > message IsPublic { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala < nl > index 11958e5 . . 39c1184 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala < nl > @ @ - 144 , 7 + 144 , 7 @ @ trait GroupDialogHandlers extends UpdateCounters { < nl > } < nl > } < nl > < nl > - protected def withMemberIds [ T ] ( groupId : Int ) ( f : ( Set [ Int ] , Set [ Int ] , Int ) ⇒ Future [ T ] ) : Future [ T ] = { < nl > + protected def withMemberIds [ T ] ( groupId : Int ) ( f : ( Set [ Int ] , Set [ Int ] , Option [ Int ] ) ⇒ Future [ T ] ) : Future [ T ] = { < nl > GroupOffice . getMemberIds ( groupId ) flatMap { < nl > case ( memberIds , invitedUserIds , botId ) ⇒ < nl > f ( memberIds . toSet , invitedUserIds . toSet , botId ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > index 955e770 . . 3cb9502 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > @ @ - 175 , 6 + 175 , 6 @ @ private [ group ] sealed trait Queries { < nl > region : GroupViewRegion , < nl > timeout : Timeout , < nl > ec : ExecutionContext < nl > - ) : Future [ ( Seq [ Int ] , Seq [ Int ] , Int ) ] = ( region . ref ? GetMembers ( groupId ) ) . mapTo [ GetMembersResponse ] map ( r ⇒ ( r . memberIds , r . invitedUserIds , r . botId ) ) < nl > + ) : Future [ ( Seq [ Int ] , Seq [ Int ] , Option [ Int ] ) ] = ( region . ref ? GetMembers ( groupId ) ) . mapTo [ GetMembersResponse ] map ( r ⇒ ( r . memberIds , r . invitedUserIds , r . botId ) ) < nl > < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > index 014e9d7 . . 864368d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > @ @ - 51 , 13 + 51 , 10 @ @ private [ group ] trait GroupQueryHandlers extends GroupCommandHelpers { < nl > sender ( ) ! CheckAccessHashResponse ( isCorrect = group . accessHash = = hash ) < nl > < nl > def getMembers ( group : Group ) : Unit = { < nl > - group . bot map { bot ⇒ < nl > - val members = group . members . keySet . toSeq < nl > - val invited = group . invitedUserIds . toSeq < nl > - sender ( ) ! GetMembersResponse ( members , invited , bot . userId ) < nl > - } getOrElse { < nl > - sender ( ) ! Status . Failure ( NoBotFound ) < nl > - } < nl > + val members = group . members . keySet . toSeq < nl > + val invited = group . invitedUserIds . toSeq < nl > + val bot = group . bot . map ( _ . userId ) < nl > + sender ( ) ! GetMembersResponse ( members , invited , bot ) < nl > } < nl > < nl > def isPublic ( group : Group ) : Unit = { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala < nl > index e4b86f1 . . 5570e1c 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala < nl > @ @ - 48 , 22 + 48 , 14 @ @ object IntegrationTokenMigrator extends Migration { < nl > ) : Future [ Unit ] = { < nl > implicit val timeout = Timeout ( 40 . seconds ) < nl > for { < nl > - optRandomMember ← GroupOffice . getMemberIds ( groupId ) . map ( _ . _ 1 . headOption ) < nl > - _ ← optRandomMember map { member ⇒ < nl > - for { < nl > - optToken ← GroupOffice . getIntegrationToken ( groupId , member ) < nl > - _ ← optToken map { token ⇒ kv . upsert ( token , groupId ) } getOrElse { < nl > - system . log . warning ( " Could not find integration token in group { } " , groupId ) < nl > - Future . successful ( ( ) ) < nl > - } < nl > - } yield { < nl > - system . log . info ( " Integration token migrated for group { } " , groupId ) < nl > - ( ) < nl > - } < nl > - } getOrElse { < nl > - system . log . warning ( " Could not find member in group { } " , groupId ) < nl > + optToken ← GroupOffice . getIntegrationToken ( groupId ) < nl > + _ ← optToken map { token ⇒ kv . upsert ( token , groupId ) } getOrElse { < nl > + system . log . warning ( " Could not find integration token in group { } " , groupId ) < nl > Future . successful ( ( ) ) < nl > } < nl > - } yield ( ) < nl > + } yield { < nl > + system . log . info ( " Integration token migrated for group { } " , groupId ) < nl > + ( ) < nl > + } < nl > } < nl > } < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / webhooks / IngoingHooks . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / webhooks / IngoingHooks . scala < nl > index 1f206d4 . . 0d5ac7f 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / webhooks / IngoingHooks . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / webhooks / IngoingHooks . scala < nl > @ @ - 48 , 8 + 48 , 10 @ @ trait IngoingHooks extends ContentUnmarshaller { < nl > Future . successful ( Left ( StatusCodes . Forbidden ) ) < nl > } else { < nl > for { < nl > - ( _ , _ , botId ) ← GroupOffice . getMemberIds ( groupId ) < nl > - _ ← GroupDialogOperations . sendMessage ( groupId , botId , 0 , ThreadLocalRandom . current ( ) . nextLong ( ) , message ) < nl > + ( _ , _ , optBot ) ← GroupOffice . getMemberIds ( groupId ) < nl > + _ ← optBot map { botId ⇒ < nl > + GroupDialogOperations . sendMessage ( groupId , botId , 0 , ThreadLocalRandom . current ( ) . nextLong ( ) , message ) < nl > + } getOrElse Future . successful ( Left ( StatusCodes . NotAcceptable ) ) < nl > } yield Right ( ( ) ) < nl > } < nl > } yield result

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 index e3dda14 . . 566d29f 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 @ @ - 366 , 6 + 366 , 9 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { 
 UpdateGroupMembersUpdated ( groupId , members = Vector . empty ) 
 ) 
 
 + / / TODO : add UpdateIsDeleted 
 + / / TODO : for old API updates as in leacve 
 + 
 val result : Future [ SeqState ] = for { 
 _ ← db . run ( HistoryMessageRepo . deleteAll ( cmd . clientUserId , apiGroupPeer . asModel ) ) 
 _ ← Future . traverse ( deleteGroupMembersUpdates ) { update ⇒ 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 index fa51af8 . . c289fdd 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 @ @ - 167 , 6 + 167 , 7 @ @ private [ group ] final case class GroupState ( 
 
 override def updated ( e : Event ) : GroupState = e match { 
 case evt : Created ⇒ 
 + val typeOfGroup = evt . typ . getOrElse ( GroupType . General ) 
 this . copy ( 
 id = evt . groupId , 
 createdAt = Some ( evt . ts ) , 
 @ @ - 177 , 7 + 178 , 7 @ @ private [ group ] final case class GroupState ( 
 avatar = None , 
 topic = None , 
 shortName = None , 
 - groupType = evt . typ . getOrElse ( GroupType . General ) , 
 + groupType = typeOfGroup , 
 isHidden = evt . isHidden getOrElse false , 
 isHistoryShared = evt . isHistoryShared getOrElse false , 
 members = ( 
 @ @ - 194 , 7 + 195 , 7 @ @ private [ group ] final case class GroupState ( 
 invitedUserIds = evt . userIds . filterNot ( _ = = evt . creatorUserId ) . toSet , 
 accessHash = evt . accessHash , 
 adminSettings = 
 - if ( groupType . isChannel ) AdminSettings . ChannelsDefault 
 + if ( typeOfGroup . isChannel ) AdminSettings . ChannelsDefault 
 else AdminSettings . PlainDefault , 
 bot = None , 
 extensions = ( evt . extensions map { / / TODO : validate is it right ?

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto 
 index de4d02f . . 8288744 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / group . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / group . proto 
 @ @ - 213 , 7 + 213 , 7 @ @ message GroupQueries { 
 message GetMembersResponse { 
 repeated int32 member _ ids = 1 ; 
 repeated int32 invited _ user _ ids = 2 ; 
 - required int32 bot _ id = 3 ; 
 + optional int32 bot _ id = 3 ; 
 } 
 
 message IsPublic { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala 
 index 11958e5 . . 39c1184 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala 
 @ @ - 144 , 7 + 144 , 7 @ @ trait GroupDialogHandlers extends UpdateCounters { 
 } 
 } 
 
 - protected def withMemberIds [ T ] ( groupId : Int ) ( f : ( Set [ Int ] , Set [ Int ] , Int ) ⇒ Future [ T ] ) : Future [ T ] = { 
 + protected def withMemberIds [ T ] ( groupId : Int ) ( f : ( Set [ Int ] , Set [ Int ] , Option [ Int ] ) ⇒ Future [ T ] ) : Future [ T ] = { 
 GroupOffice . getMemberIds ( groupId ) flatMap { 
 case ( memberIds , invitedUserIds , botId ) ⇒ 
 f ( memberIds . toSet , invitedUserIds . toSet , botId ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 index 955e770 . . 3cb9502 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 @ @ - 175 , 6 + 175 , 6 @ @ private [ group ] sealed trait Queries { 
 region : GroupViewRegion , 
 timeout : Timeout , 
 ec : ExecutionContext 
 - ) : Future [ ( Seq [ Int ] , Seq [ Int ] , Int ) ] = ( region . ref ? GetMembers ( groupId ) ) . mapTo [ GetMembersResponse ] map ( r ⇒ ( r . memberIds , r . invitedUserIds , r . botId ) ) 
 + ) : Future [ ( Seq [ Int ] , Seq [ Int ] , Option [ Int ] ) ] = ( region . ref ? GetMembers ( groupId ) ) . mapTo [ GetMembersResponse ] map ( r ⇒ ( r . memberIds , r . invitedUserIds , r . botId ) ) 
 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 index 014e9d7 . . 864368d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 @ @ - 51 , 13 + 51 , 10 @ @ private [ group ] trait GroupQueryHandlers extends GroupCommandHelpers { 
 sender ( ) ! CheckAccessHashResponse ( isCorrect = group . accessHash = = hash ) 
 
 def getMembers ( group : Group ) : Unit = { 
 - group . bot map { bot ⇒ 
 - val members = group . members . keySet . toSeq 
 - val invited = group . invitedUserIds . toSeq 
 - sender ( ) ! GetMembersResponse ( members , invited , bot . userId ) 
 - } getOrElse { 
 - sender ( ) ! Status . Failure ( NoBotFound ) 
 - } 
 + val members = group . members . keySet . toSeq 
 + val invited = group . invitedUserIds . toSeq 
 + val bot = group . bot . map ( _ . userId ) 
 + sender ( ) ! GetMembersResponse ( members , invited , bot ) 
 } 
 
 def isPublic ( group : Group ) : Unit = { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala 
 index e4b86f1 . . 5570e1c 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / IntegrationTokenMigrator . scala 
 @ @ - 48 , 22 + 48 , 14 @ @ object IntegrationTokenMigrator extends Migration { 
 ) : Future [ Unit ] = { 
 implicit val timeout = Timeout ( 40 . seconds ) 
 for { 
 - optRandomMember ← GroupOffice . getMemberIds ( groupId ) . map ( _ . _ 1 . headOption ) 
 - _ ← optRandomMember map { member ⇒ 
 - for { 
 - optToken ← GroupOffice . getIntegrationToken ( groupId , member ) 
 - _ ← optToken map { token ⇒ kv . upsert ( token , groupId ) } getOrElse { 
 - system . log . warning ( " Could not find integration token in group { } " , groupId ) 
 - Future . successful ( ( ) ) 
 - } 
 - } yield { 
 - system . log . info ( " Integration token migrated for group { } " , groupId ) 
 - ( ) 
 - } 
 - } getOrElse { 
 - system . log . warning ( " Could not find member in group { } " , groupId ) 
 + optToken ← GroupOffice . getIntegrationToken ( groupId ) 
 + _ ← optToken map { token ⇒ kv . upsert ( token , groupId ) } getOrElse { 
 + system . log . warning ( " Could not find integration token in group { } " , groupId ) 
 Future . successful ( ( ) ) 
 } 
 - } yield ( ) 
 + } yield { 
 + system . log . info ( " Integration token migrated for group { } " , groupId ) 
 + ( ) 
 + } 
 } 
 } 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / webhooks / IngoingHooks . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / webhooks / IngoingHooks . scala 
 index 1f206d4 . . 0d5ac7f 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / webhooks / IngoingHooks . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / webhooks / IngoingHooks . scala 
 @ @ - 48 , 8 + 48 , 10 @ @ trait IngoingHooks extends ContentUnmarshaller { 
 Future . successful ( Left ( StatusCodes . Forbidden ) ) 
 } else { 
 for { 
 - ( _ , _ , botId ) ← GroupOffice . getMemberIds ( groupId ) 
 - _ ← GroupDialogOperations . sendMessage ( groupId , botId , 0 , ThreadLocalRandom . current ( ) . nextLong ( ) , message ) 
 + ( _ , _ , optBot ) ← GroupOffice . getMemberIds ( groupId ) 
 + _ ← optBot map { botId ⇒ 
 + GroupDialogOperations . sendMessage ( groupId , botId , 0 , ThreadLocalRandom . current ( ) . nextLong ( ) , message ) 
 + } getOrElse Future . successful ( Left ( StatusCodes . NotAcceptable ) ) 
 } yield Right ( ( ) ) 
 } 
 } yield result
